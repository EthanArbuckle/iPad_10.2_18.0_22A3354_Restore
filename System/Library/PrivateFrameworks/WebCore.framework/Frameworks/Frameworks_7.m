void webrtc::`anonymous namespace'::ProduceCertificateStatsFromSSLCertificateStats(webrtc::_anonymous_namespace_ *this, Timestamp a2, const rtc::SSLCertificateStats *a3, webrtc::RTCStatsReport *a4)
{
  uint64_t v5;
  int v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  unint64_t v10;
  std::string *p_s1;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *var0;
  char *v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  std::string::size_type size;
  std::string *v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  std::string *v30;
  char v31;
  _OWORD *v32;
  __int128 *v33;
  _OWORD *v34;
  __int128 v35;
  char v36;
  __int128 v37;
  __int128 *v38;
  char v39;
  __int128 v40;
  int64_t v41;
  __int128 v42;
  const std::string::value_type *v43;
  size_t v44;
  char v45;
  __int128 v46;
  const std::string::value_type *v47;
  size_t v48;
  __int128 v49;
  std::string *v50;
  char v51;
  __int128 v52;
  __int128 v53;
  const std::string::value_type *v54;
  size_t v55;
  uint64_t v56;
  const std::string::value_type *v57;
  size_t v58;
  uint64_t v61;
  std::string v62;
  std::string __s1;

  v5 = 0;
  v6 = (_DWORD)a3 + 16;
  v7 = (uint64_t **)((char *)a3 + 24);
  do
  {
    v8 = *(char *)(a2.var0 + 23);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(a2.var0 + 23);
    else
      v9 = *(_QWORD *)(a2.var0 + 8);
    v10 = v9 + 2;
    if (v9 + 2 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_134;
    if (v10 > 0x16)
    {
      v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      p_s1 = (std::string *)operator new(v12 + 1);
      __s1.__r_.__value_.__l.__size_ = v9 + 2;
      __s1.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
    }
    else
    {
      memset(&__s1, 0, sizeof(__s1));
      p_s1 = &__s1;
      *((_BYTE *)&__s1.__r_.__value_.__s + 23) = v9 + 2;
    }
    v14 = &p_s1->__r_.__value_.__s.__data_[2];
    v15 = p_s1 <= (std::string *)"CF" && v14 > "CF";
    if (v15
      || ((LOWORD(p_s1->__r_.__value_.__l.__data_) = 17987, v8 >= 0)
        ? (var0 = (char *)a2.var0)
        : (var0 = *(char **)a2.var0),
          (v17 = &v14[v9], var0 >= v14) ? (v18 = v17 > var0) : (v18 = 0),
          v18))
    {
LABEL_133:
      __break(1u);
LABEL_134:
      abort();
    }
    if (v9)
      memmove(v14, var0, v9);
    *v17 = 0;
    v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(v6, (const void **)&__s1.__r_.__value_.__l.__data_, *v7, (uint64_t *)v7);
    if (v7 != (uint64_t **)v19)
    {
      v20 = v19;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        size = __s1.__r_.__value_.__l.__size_;
        if ((__s1.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_133;
        v22 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        if (__s1.__r_.__value_.__l.__size_)
        {
          if (!__s1.__r_.__value_.__r.__words[0])
            goto LABEL_133;
        }
      }
      else
      {
        size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        v22 = &__s1;
      }
      v23 = v20 + 4;
      if (*((char *)v20 + 55) < 0)
      {
        v24 = v20[5];
        if ((v24 & 0x8000000000000000) != 0)
          goto LABEL_133;
        v23 = (_QWORD *)*v23;
        if (v24)
        {
          if (!v23)
            goto LABEL_133;
        }
      }
      else
      {
        v24 = *((unsigned __int8 *)v20 + 55);
      }
      if (v24 >= size)
        v25 = size;
      else
        v25 = v24;
      v26 = memcmp(v22, v23, v25);
      if (v26)
      {
        if (v26 < 0)
          goto LABEL_45;
      }
      else if (size < v24)
      {
        goto LABEL_45;
      }
      if (v20[7])
      {
        v27 = 0;
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_119;
        goto LABEL_120;
      }
    }
LABEL_45:
    v28 = (_QWORD *)operator new();
    v29 = (uint64_t)v28;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v62, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
      *(_QWORD *)v29 = &unk_24C0BC140;
      v30 = (std::string *)(v29 + 8);
      v31 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_49:
        std::string::__init_copy_ctor_external(v30, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
        v31 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        goto LABEL_50;
      }
    }
    else
    {
      v62 = __s1;
      *v28 = &unk_24C0BC140;
      v30 = (std::string *)(v28 + 1);
      v31 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_49;
    }
    *v30 = v62;
LABEL_50:
    *(_QWORD *)(v29 + 32) = this;
    *(_BYTE *)(v29 + 40) = 0;
    v32 = (_OWORD *)(v29 + 40);
    *(_QWORD *)v29 = &off_24C0BC490;
    *(_BYTE *)(v29 + 64) = 0;
    *(_BYTE *)(v29 + 72) = 0;
    v33 = (__int128 *)(v29 + 72);
    *(_BYTE *)(v29 + 96) = 0;
    *(_BYTE *)(v29 + 104) = 0;
    v34 = (_OWORD *)(v29 + 104);
    *(_BYTE *)(v29 + 128) = 0;
    *(_BYTE *)(v29 + 136) = 0;
    *(_BYTE *)(v29 + 160) = 0;
    if (v31 < 0 && (operator delete(v62.__r_.__value_.__l.__data_), *(_BYTE *)(v29 + 64)))
    {
      if (v32 != (_OWORD *)a2.var0)
      {
        v36 = *(_BYTE *)(a2.var0 + 23);
        if (*(char *)(v29 + 63) < 0)
        {
          if (v36 >= 0)
            v57 = (const std::string::value_type *)a2.var0;
          else
            v57 = *(const std::string::value_type **)a2.var0;
          if (v36 >= 0)
            v58 = *(unsigned __int8 *)(a2.var0 + 23);
          else
            v58 = *(_QWORD *)(a2.var0 + 8);
          std::string::__assign_no_alias<false>((std::string *)(v29 + 40), v57, v58);
        }
        else if ((*(_BYTE *)(a2.var0 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)(v29 + 40), *(char **)a2.var0, *(_QWORD *)(a2.var0 + 8));
        }
        else
        {
          v37 = *(_OWORD *)a2.var0;
          *(_QWORD *)(v29 + 56) = *(_QWORD *)(a2.var0 + 16);
          *v32 = v37;
        }
      }
    }
    else
    {
      if (*(char *)(a2.var0 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v29 + 40), *(const std::string::value_type **)a2.var0, *(_QWORD *)(a2.var0 + 8));
      }
      else
      {
        v35 = *(_OWORD *)a2.var0;
        *(_QWORD *)(v29 + 56) = *(_QWORD *)(a2.var0 + 16);
        *v32 = v35;
      }
      *(_BYTE *)(v29 + 64) = 1;
    }
    v38 = (__int128 *)(a2.var0 + 24);
    if (!*(_BYTE *)(v29 + 96))
    {
      if (*(char *)(a2.var0 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v29 + 72), *(const std::string::value_type **)(a2.var0 + 24), *(_QWORD *)(a2.var0 + 32));
      }
      else
      {
        v42 = *v38;
        *(_QWORD *)(v29 + 88) = *(_QWORD *)(a2.var0 + 40);
        *v33 = v42;
      }
      *(_BYTE *)(v29 + 96) = 1;
LABEL_78:
      v41 = a2.var0 + 48;
      if (!*(_BYTE *)(v29 + 128))
        goto LABEL_93;
      goto LABEL_79;
    }
    if (v33 == v38)
      goto LABEL_78;
    v39 = *(_BYTE *)(a2.var0 + 47);
    if (*(char *)(v29 + 95) < 0)
    {
      if (v39 >= 0)
        v43 = (const std::string::value_type *)(a2.var0 + 24);
      else
        v43 = *(const std::string::value_type **)(a2.var0 + 24);
      if (v39 >= 0)
        v44 = *(unsigned __int8 *)(a2.var0 + 47);
      else
        v44 = *(_QWORD *)(a2.var0 + 32);
      std::string::__assign_no_alias<false>((std::string *)(v29 + 72), v43, v44);
      v41 = a2.var0 + 48;
      if (!*(_BYTE *)(v29 + 128))
      {
LABEL_93:
        if (*(char *)(a2.var0 + 71) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v29 + 104), *(const std::string::value_type **)(a2.var0 + 48), *(_QWORD *)(a2.var0 + 56));
        }
        else
        {
          v49 = *(_OWORD *)v41;
          *(_QWORD *)(v29 + 120) = *(_QWORD *)(v41 + 16);
          *v34 = v49;
        }
        *(_BYTE *)(v29 + 128) = 1;
LABEL_97:
        if (!v5)
          goto LABEL_116;
        goto LABEL_98;
      }
    }
    else if ((*(_BYTE *)(a2.var0 + 47) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)(v29 + 72), *(char **)(a2.var0 + 24), *(_QWORD *)(a2.var0 + 32));
      v41 = a2.var0 + 48;
      if (!*(_BYTE *)(v29 + 128))
        goto LABEL_93;
    }
    else
    {
      v40 = *v38;
      *(_QWORD *)(v29 + 88) = *(_QWORD *)(a2.var0 + 40);
      *v33 = v40;
      v41 = a2.var0 + 48;
      if (!*(_BYTE *)(v29 + 128))
        goto LABEL_93;
    }
LABEL_79:
    if (v34 == (_OWORD *)v41)
      goto LABEL_97;
    v45 = *(_BYTE *)(a2.var0 + 71);
    if (*(char *)(v29 + 127) < 0)
    {
      if (v45 >= 0)
        v47 = (const std::string::value_type *)v41;
      else
        v47 = *(const std::string::value_type **)(a2.var0 + 48);
      if (v45 >= 0)
        v48 = *(unsigned __int8 *)(a2.var0 + 71);
      else
        v48 = *(_QWORD *)(a2.var0 + 56);
      std::string::__assign_no_alias<false>((std::string *)(v29 + 104), v47, v48);
      if (!v5)
        goto LABEL_116;
    }
    else if ((*(_BYTE *)(a2.var0 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)(v29 + 104), *(char **)(a2.var0 + 48), *(_QWORD *)(a2.var0 + 56));
      if (!v5)
        goto LABEL_116;
    }
    else
    {
      v46 = *(_OWORD *)v41;
      *(_QWORD *)(v29 + 120) = *(_QWORD *)(v41 + 16);
      *v34 = v46;
      if (!v5)
        goto LABEL_116;
    }
LABEL_98:
    v50 = (std::string *)(v5 + 136);
    if (*(_BYTE *)(v5 + 160))
    {
      if (v50 != v30)
      {
        v51 = *(_BYTE *)(v29 + 31);
        if (*(char *)(v5 + 159) < 0)
        {
          if (v51 >= 0)
            v54 = (const std::string::value_type *)v30;
          else
            v54 = *(const std::string::value_type **)(v29 + 8);
          if (v51 >= 0)
            v55 = *(unsigned __int8 *)(v29 + 31);
          else
            v55 = *(_QWORD *)(v29 + 16);
          std::string::__assign_no_alias<false>(v50, v54, v55);
        }
        else if ((*(_BYTE *)(v29 + 31) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v50, *(char **)(v29 + 8), *(_QWORD *)(v29 + 16));
        }
        else
        {
          v52 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          *(_QWORD *)(v5 + 152) = *((_QWORD *)&v30->__r_.__value_.__l + 2);
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v52;
        }
      }
    }
    else
    {
      if (*(char *)(v29 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)(v29 + 8), *(_QWORD *)(v29 + 16));
      }
      else
      {
        v53 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        *(_QWORD *)(v5 + 152) = *((_QWORD *)&v30->__r_.__value_.__l + 2);
        *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v53;
      }
      *(_BYTE *)(v5 + 160) = 1;
    }
LABEL_116:
    v61 = v29;
    webrtc::RTCStatsReport::AddStats((uint64_t)a3, &v61);
    v56 = v61;
    v61 = 0;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v27 = 1;
    v5 = v29;
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
LABEL_119:
      operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_120:
    if (!v27)
      break;
    a2.var0 = *(_QWORD *)(a2.var0 + 72);
  }
  while (a2.var0);
}

std::string *std::optional<std::string>::operator=[abi:sn180100]<char const*,void>(std::string *this, char *__s)
{
  size_t v5;
  std::string::size_type v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (__s)
    {
      std::string::__assign_external(this, __s);
      return this;
    }
    goto LABEL_18;
  }
  if (!__s)
    goto LABEL_18;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
  v6 = v5;
  if (v5 > 0x16)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (char *)operator new(v8 + 1);
    this->__r_.__value_.__l.__size_ = v6;
    this->__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v5;
    v7 = (char *)this;
  }
  v10 = &v7[v6];
  if (v7 <= __s && v10 > __s)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    abort();
  }
  if (v6)
    memmove(v7, __s, v6);
  *v10 = 0;
  this[1].__r_.__value_.__s.__data_[0] = 1;
  return this;
}

size_t webrtc::`anonymous namespace'::RTCTransportStatsIDFromTransportChannel(char *a1, _QWORD *a2, int a3)
{
  unint64_t v5;
  size_t v7;
  char *v8;
  size_t result;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *__s[2];
  size_t v16;
  _WORD v17[512];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __s[0] = (char *)v17;
  __s[1] = (char *)1024;
  v17[0] = 84;
  if (*((char *)a2 + 23) < 0)
  {
    v5 = a2[1];
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_25;
    a2 = (_QWORD *)*a2;
    if (v5 && a2 == 0)
      goto LABEL_25;
  }
  else
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  if (v5 >= 0x3FE)
    v7 = 1022;
  else
    v7 = v5;
  memcpy((char *)v17 + 1, a2, v7);
  v16 = v7 + 1;
  *((_BYTE *)v17 + v16) = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__s, "%d", a3);
  v8 = __s[0];
  if (!__s[0])
    goto LABEL_25;
  result = strlen(__s[0]);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_26;
  v10 = result;
  if (result > 0x16)
  {
    v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v11 = result | 7;
    v12 = v11 + 1;
    result = (size_t)operator new(v11 + 1);
    *((_QWORD *)a1 + 1) = v10;
    *((_QWORD *)a1 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a1 = result;
    a1 = (char *)result;
  }
  else
  {
    a1[23] = result;
  }
  v13 = &a1[v10];
  if (a1 <= v8 && v13 > v8)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    abort();
  }
  if (v10)
    result = (size_t)memmove(a1, v8, v10);
  *v13 = 0;
  return result;
}

uint64_t webrtc::`anonymous namespace'::ProduceIceCandidateStats(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v18;
  std::string *v19;
  char v21;
  void *v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  int v26;
  std::string *v27;
  char v28;
  const std::string::value_type *v29;
  size_t v30;
  int v31;
  char *v32;
  char **v33;
  int v34;
  uint64_t v35;
  std::string *v36;
  char v37;
  size_t v38;
  int v39;
  size_t v40;
  const std::string::value_type *v41;
  size_t v42;
  const std::string::value_type *v43;
  int v44;
  const char *v45;
  size_t v46;
  void **v47;
  uint64_t v48;
  void **v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  const std::string::value_type *v53;
  std::string::size_type v54;
  std::string *v55;
  const std::string::value_type *v56;
  size_t v57;
  std::string *v58;
  std::string *v59;
  char v60;
  const std::string::value_type *v61;
  size_t v62;
  void **v63;
  char v64;
  const std::string::value_type *v65;
  size_t v66;
  std::string *v69;
  std::string *v70;
  char v71;
  const std::string::value_type *v72;
  size_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  void *__p[2];
  unint64_t v78;
  _QWORD v79[4];
  unsigned __int16 v80;
  int v81;
  char v82;
  void *__s1[2];
  unint64_t v84;

  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v7 > 0x16)
  {
    v14 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v14 = v7 | 7;
    v15 = v14 + 1;
    v13 = (unint64_t)operator new(v14 + 1);
    __s1[1] = (void *)(v6 + 1);
    v84 = v15 | 0x8000000000000000;
    __s1[0] = (void *)v13;
  }
  else
  {
    __s1[1] = 0;
    v84 = 0;
    __s1[0] = 0;
    v13 = (unint64_t)__s1;
    HIBYTE(v84) = v6 + 1;
  }
  v16 = (std::string *)(v13 + 1);
  if (v13 <= (unint64_t)"I" && v16 > (std::string *)"I")
    goto LABEL_230;
  *(_BYTE *)v13 = 73;
  v13 = *(_QWORD *)a2;
  v18 = v5 >= 0 ? (std::string *)a2 : *(std::string **)a2;
  v19 = (std::string *)((char *)v16 + v6);
  if (v18 >= v16 && v19 > v18)
    goto LABEL_230;
  if (v6)
    memmove(v16, v18, v6);
  v19->__r_.__value_.__s.__data_[0] = 0;
  v16 = (std::string *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a5 + 16, (const void **)__s1, *(uint64_t **)(a5 + 24), (uint64_t *)(a5 + 24));
  if ((std::string *)(a5 + 24) != v16)
  {
    v6 = (uint64_t)v16;
    v21 = HIBYTE(v84);
    if (SHIBYTE(v84) < 0)
    {
      v22 = __s1[1];
      if (((unint64_t)__s1[1] & 0x8000000000000000) != 0)
        goto LABEL_230;
      v16 = (std::string *)__s1[0];
      if (__s1[1])
      {
        if (!__s1[0])
          goto LABEL_230;
      }
    }
    else
    {
      v22 = (void *)HIBYTE(v84);
      v16 = (std::string *)__s1;
    }
    v23 = (_QWORD *)(v6 + 32);
    v13 = *(char *)(v6 + 55);
    if ((v13 & 0x80000000) != 0)
    {
      v24 = *(_QWORD *)(v6 + 40);
      if ((v24 & 0x8000000000000000) != 0)
        goto LABEL_230;
      v23 = (_QWORD *)*v23;
      if (v24)
      {
        if (!v23)
          goto LABEL_230;
      }
    }
    else
    {
      v24 = *(unsigned __int8 *)(v6 + 55);
    }
    if (v24 >= (unint64_t)v22)
      v25 = (size_t)v22;
    else
      v25 = v24;
    v26 = memcmp(v16, v23, v25);
    if (v26)
    {
      if (v26 < 0)
        goto LABEL_42;
    }
    else if ((unint64_t)v22 < v24)
    {
      goto LABEL_42;
    }
    v6 = *(_QWORD *)(v6 + 56);
    if (v6)
      goto LABEL_255;
  }
LABEL_42:
  if (a3)
  {
    v6 = operator new();
    *(_OWORD *)__p = *(_OWORD *)__s1;
    v78 = v84;
    __s1[0] = 0;
    __s1[1] = 0;
    v84 = 0;
    webrtc::RTCLocalIceCandidateStats::RTCLocalIceCandidateStats(v6, (uint64_t)__p, a1);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_44;
  }
  else
  {
    v6 = operator new();
    *(_OWORD *)__p = *(_OWORD *)__s1;
    v78 = v84;
    __s1[0] = 0;
    __s1[1] = 0;
    v84 = 0;
    webrtc::RTCRemoteIceCandidateStats::RTCRemoteIceCandidateStats(v6, (uint64_t)__p, a1);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
LABEL_44:
      v27 = (std::string *)(v6 + 40);
      if (*(_BYTE *)(v6 + 64))
        goto LABEL_45;
LABEL_52:
      if (*(char *)(a4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
        v27->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
      }
      *(_BYTE *)(v6 + 64) = 1;
LABEL_64:
      if (!a3)
        goto LABEL_162;
      goto LABEL_65;
    }
  }
  operator delete(__p[0]);
  v27 = (std::string *)(v6 + 40);
  if (!*(_BYTE *)(v6 + 64))
    goto LABEL_52;
LABEL_45:
  if (v27 == (std::string *)a4)
    goto LABEL_64;
  v28 = *(_BYTE *)(a4 + 23);
  if (*(char *)(v6 + 63) < 0)
  {
    if (v28 >= 0)
      v29 = (const std::string::value_type *)a4;
    else
      v29 = *(const std::string::value_type **)a4;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(a4 + 23);
    else
      v30 = *(_QWORD *)(a4 + 8);
    std::string::__assign_no_alias<false>(v27, v29, v30);
    if (!a3)
      goto LABEL_162;
  }
  else if ((*(_BYTE *)(a4 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v27, *(char **)a4, *(_QWORD *)(a4 + 8));
    if (!a3)
      goto LABEL_162;
  }
  else
  {
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    v27->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
    if (!a3)
      goto LABEL_162;
  }
LABEL_65:
  v31 = *(_DWORD *)(a2 + 240);
  v32 = "cellular";
  if (v31 > 127)
  {
    if (v31 != 128 && v31 != 256 && v31 != 512)
LABEL_71:
      v32 = 0;
  }
  else
  {
    switch(v31)
    {
      case 0:
      case 16:
      case 32:
        v32 = "unknown";
        break;
      case 1:
        v32 = "ethernet";
        break;
      case 2:
        v32 = "wifi";
        break;
      case 4:
      case 64:
        break;
      case 8:
        v32 = "vpn";
        break;
      default:
        goto LABEL_71;
    }
  }
  v16 = std::optional<std::string>::operator=[abi:sn180100]<char const*,void>((std::string *)(v6 + 80), v32);
  v33 = (char **)(a2 + 408);
  v34 = *(_DWORD *)(a2 + 208);
  if (v34 == 1)
  {
    v38 = *(unsigned __int8 *)(a2 + 431);
    v39 = (char)v38;
    v40 = *(_QWORD *)(a2 + 416);
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(a2 + 416);
    if (v38)
    {
      v16 = (std::string *)(v6 + 288);
      if (*(_BYTE *)(v6 + 312))
      {
        if (v16 == (std::string *)v33)
          goto LABEL_129;
        if ((*(char *)(v6 + 311) & 0x80000000) == 0)
        {
          if ((v39 & 0x80000000) == 0)
          {
LABEL_120:
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v33;
            v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 424);
            goto LABEL_129;
          }
LABEL_98:
          v16 = (std::string *)std::string::__assign_no_alias<true>(v16, *v33, v40);
          goto LABEL_129;
        }
LABEL_123:
        if (v39 >= 0)
          v43 = (const std::string::value_type *)(a2 + 408);
        else
          v43 = *v33;
        v16 = std::string::__assign_no_alias<false>(v16, v43, v38);
        goto LABEL_129;
      }
LABEL_121:
      if (v39 < 0)
      {
        std::string::__init_copy_ctor_external(v16, *v33, v40);
      }
      else
      {
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v33;
        v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 424);
      }
      *(_BYTE *)(v6 + 312) = 1;
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  if (v34 != 3)
  {
    if (v34 != 2)
      goto LABEL_129;
    v35 = *(unsigned __int8 *)(a2 + 79);
    if ((v35 & 0x80u) != 0)
      v35 = *(_QWORD *)(a2 + 64);
    if (!v35)
      goto LABEL_129;
  }
  v36 = (std::string *)(a2 + 56);
  v16 = (std::string *)(v6 + 216);
  if (!*(_BYTE *)(v6 + 240))
  {
    if (*(char *)(a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 232) = *(_QWORD *)(a2 + 72);
    }
    *(_BYTE *)(v6 + 240) = 1;
LABEL_113:
    v38 = *(unsigned __int8 *)(a2 + 431);
    v39 = (char)v38;
    v40 = *(_QWORD *)(a2 + 416);
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(a2 + 416);
    if (v38)
      goto LABEL_116;
    goto LABEL_129;
  }
  if (v16 == v36)
    goto LABEL_113;
  v37 = *(_BYTE *)(a2 + 79);
  if (*(char *)(v6 + 239) < 0)
  {
    if (v37 >= 0)
      v41 = (const std::string::value_type *)(a2 + 56);
    else
      v41 = *(const std::string::value_type **)(a2 + 56);
    if (v37 >= 0)
      v42 = *(unsigned __int8 *)(a2 + 79);
    else
      v42 = *(_QWORD *)(a2 + 64);
    v16 = std::string::__assign_no_alias<false>(v16, v41, v42);
    v38 = *(unsigned __int8 *)(a2 + 431);
    v39 = (char)v38;
    v40 = *(_QWORD *)(a2 + 416);
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(a2 + 416);
    if (v38)
      goto LABEL_116;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 79) & 0x80) == 0)
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 232) = *(_QWORD *)(a2 + 72);
      v38 = *(unsigned __int8 *)(a2 + 431);
      v39 = (char)v38;
      v40 = *(_QWORD *)(a2 + 416);
      if ((v38 & 0x80u) != 0)
        v38 = *(_QWORD *)(a2 + 416);
      if (!v38)
        goto LABEL_129;
LABEL_116:
      v16 = (std::string *)(v6 + 288);
      if (*(_BYTE *)(v6 + 312))
      {
        if (v16 == (std::string *)v33)
          goto LABEL_129;
        if ((*(char *)(v6 + 311) & 0x80000000) == 0)
        {
          if ((v39 & 0x80000000) == 0)
            goto LABEL_120;
          goto LABEL_98;
        }
        goto LABEL_123;
      }
      goto LABEL_121;
    }
    v16 = (std::string *)std::string::__assign_no_alias<true>(v16, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64));
    v38 = *(unsigned __int8 *)(a2 + 431);
    v39 = (char)v38;
    v40 = *(_QWORD *)(a2 + 416);
    if ((v38 & 0x80u) != 0)
      v38 = *(_QWORD *)(a2 + 416);
    if (v38)
      goto LABEL_116;
  }
LABEL_129:
  v44 = *(_DWORD *)(a2 + 240);
  switch(v44)
  {
    case 8:
      *(_WORD *)(v6 + 456) = 257;
      v44 = *(_DWORD *)(a2 + 244);
      if (v44 <= 127)
      {
        v45 = "cellular";
        v46 = 8;
        switch(v44)
        {
          case 0:
            goto LABEL_134;
          case 1:
            goto LABEL_141;
          case 2:
            goto LABEL_143;
          case 4:
            goto LABEL_152;
          case 16:
            goto LABEL_145;
          case 32:
            goto LABEL_147;
          case 64:
            goto LABEL_149;
          default:
            goto LABEL_160;
        }
      }
      break;
    case 128:
      v45 = "cellular3g";
      v46 = 10;
LABEL_152:
      HIBYTE(v78) = v46;
      v13 = (unint64_t)__p;
      v47 = (void **)((char *)__p + v46);
      if (__p > (void **)v45)
        goto LABEL_154;
      goto LABEL_153;
    case 256:
      v45 = "cellular4g";
      v46 = 10;
      HIBYTE(v78) = 10;
      v13 = (unint64_t)__p;
      v47 = (void **)((char *)&__p[1] + 2);
      if (__p > (void **)"cellular4g")
        goto LABEL_154;
      goto LABEL_153;
    default:
      *(_WORD *)(v6 + 456) = 256;
      if (v44 <= 127)
      {
        v45 = "cellular";
        v46 = 8;
        switch(v44)
        {
          case 0:
LABEL_134:
            v45 = "unknown";
            v46 = 7;
            HIBYTE(v78) = 7;
            v13 = (unint64_t)__p;
            v47 = (void **)((char *)__p + 7);
            if (__p > (void **)"unknown")
              goto LABEL_154;
            goto LABEL_153;
          case 1:
LABEL_141:
            v45 = "ethernet";
            v46 = 8;
            HIBYTE(v78) = 8;
            v13 = (unint64_t)__p;
            v47 = &__p[1];
            if (__p > (void **)"ethernet")
              goto LABEL_154;
            goto LABEL_153;
          case 2:
LABEL_143:
            v45 = "wifi";
            v46 = 4;
            HIBYTE(v78) = 4;
            v13 = (unint64_t)__p;
            v47 = (void **)((char *)__p + 4);
            if (__p > (void **)"wifi")
              goto LABEL_154;
            goto LABEL_153;
          case 4:
            goto LABEL_152;
          case 16:
LABEL_145:
            v45 = "loopback";
            v46 = 8;
            HIBYTE(v78) = 8;
            v13 = (unint64_t)__p;
            v47 = &__p[1];
            if (__p > (void **)"loopback")
              goto LABEL_154;
            goto LABEL_153;
          case 32:
LABEL_147:
            v45 = "any";
            v46 = 3;
            HIBYTE(v78) = 3;
            v13 = (unint64_t)__p;
            v47 = (void **)((char *)__p + 3);
            if (__p > (void **)"any")
              goto LABEL_154;
            goto LABEL_153;
          case 64:
LABEL_149:
            v45 = "cellular2g";
            v46 = 10;
            HIBYTE(v78) = 10;
            v13 = (unint64_t)__p;
            v47 = (void **)((char *)&__p[1] + 2);
            if (__p > (void **)"cellular2g")
              goto LABEL_154;
            goto LABEL_153;
          default:
            goto LABEL_160;
        }
      }
      break;
  }
  if (v44 != 512)
  {
LABEL_160:
    HIBYTE(v78) = 0;
    LOBYTE(__p[0]) = 0;
    v48 = v6 + 464;
    if (*(_BYTE *)(v6 + 488))
      goto LABEL_155;
LABEL_161:
    *(_OWORD *)v48 = *(_OWORD *)__p;
    *(_QWORD *)(v48 + 16) = v78;
    *(_BYTE *)(v6 + 488) = 1;
    goto LABEL_162;
  }
  v45 = "cellular5g";
  v46 = 10;
  HIBYTE(v78) = 10;
  v13 = (unint64_t)__p;
  v47 = (void **)((char *)&__p[1] + 2);
  if (__p <= (void **)"cellular5g")
  {
LABEL_153:
    if (v47 > (void **)v45)
      goto LABEL_230;
  }
LABEL_154:
  memcpy(__p, v45, v46);
  *(_BYTE *)v47 = 0;
  v48 = v6 + 464;
  if (!*(_BYTE *)(v6 + 488))
    goto LABEL_161;
LABEL_155:
  if (*(char *)(v6 + 487) < 0)
    operator delete(*(void **)v48);
  *(_OWORD *)v48 = *(_OWORD *)__p;
  *(_QWORD *)(v48 + 16) = v78;
LABEL_162:
  rtc::IPAddress::ToString((rtc::IPAddress *)(a2 + 104), __p);
  v49 = (void **)(v6 + 112);
  if (*(_BYTE *)(v6 + 136))
  {
    if (*(char *)(v6 + 135) < 0)
      operator delete(*v49);
    *(_OWORD *)v49 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 128) = v78;
    rtc::IPAddress::ToString((rtc::IPAddress *)(a2 + 104), __p);
    v50 = v6 + 144;
    if (*(_BYTE *)(v6 + 168))
      goto LABEL_166;
LABEL_170:
    *(_OWORD *)v50 = *(_OWORD *)__p;
    *(_QWORD *)(v50 + 16) = v78;
    *(_BYTE *)(v6 + 168) = 1;
    goto LABEL_171;
  }
  *(_OWORD *)v49 = *(_OWORD *)__p;
  *(_QWORD *)(v6 + 128) = v78;
  *(_BYTE *)(v6 + 136) = 1;
  rtc::IPAddress::ToString((rtc::IPAddress *)(a2 + 104), __p);
  v50 = v6 + 144;
  if (!*(_BYTE *)(v6 + 168))
    goto LABEL_170;
LABEL_166:
  if (*(char *)(v6 + 167) < 0)
    operator delete(*(void **)v50);
  *(_OWORD *)v50 = *(_OWORD *)__p;
  *(_QWORD *)(v50 + 16) = v78;
LABEL_171:
  *(_DWORD *)(v6 + 176) = *(unsigned __int16 *)(a2 + 136);
  *(_BYTE *)(v6 + 180) = 1;
  a1 = a2 + 32;
  v16 = (std::string *)(v6 + 184);
  if (!*(_BYTE *)(v6 + 208))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      *(_QWORD *)(v6 + 200) = *(_QWORD *)(a2 + 48);
    }
    *(_BYTE *)(v6 + 208) = 1;
LABEL_192:
    v52 = *(_DWORD *)(a2 + 208) - 1;
    if (v52 <= 2)
      goto LABEL_193;
    goto LABEL_176;
  }
  if (v16 == (std::string *)a1)
    goto LABEL_192;
  v51 = *(_BYTE *)(a2 + 55);
  if (*(char *)(v6 + 207) < 0)
  {
    if (v51 >= 0)
      v56 = (const std::string::value_type *)(a2 + 32);
    else
      v56 = *(const std::string::value_type **)(a2 + 32);
    if (v51 >= 0)
      v57 = *(unsigned __int8 *)(a2 + 55);
    else
      v57 = *(_QWORD *)(a2 + 40);
    v16 = std::string::__assign_no_alias<false>(v16, v56, v57);
    v52 = *(_DWORD *)(a2 + 208) - 1;
    if (v52 <= 2)
      goto LABEL_193;
LABEL_176:
    v53 = "host";
    v54 = 4;
    v55 = (std::string *)(v6 + 248);
    if (!*(_BYTE *)(v6 + 272))
      goto LABEL_177;
LABEL_194:
    std::string::__assign_external(v55, v53, v54);
    goto LABEL_195;
  }
  if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
  {
    v16 = (std::string *)std::string::__assign_no_alias<true>(v16, *(char **)(a2 + 32), *(_QWORD *)(a2 + 40));
    v52 = *(_DWORD *)(a2 + 208) - 1;
    if (v52 <= 2)
      goto LABEL_193;
    goto LABEL_176;
  }
  *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  *(_QWORD *)(v6 + 200) = *(_QWORD *)(a2 + 48);
  v52 = *(_DWORD *)(a2 + 208) - 1;
  if (v52 > 2)
    goto LABEL_176;
LABEL_193:
  v53 = off_24C0BC3B8[v52];
  v54 = 5;
  v55 = (std::string *)(v6 + 248);
  if (*(_BYTE *)(v6 + 272))
    goto LABEL_194;
LABEL_177:
  *(_BYTE *)(v6 + 271) = v54;
  if (v55 <= (std::string *)v53)
  {
    v13 = (unint64_t)v55 + v54;
    if ((char *)v55 + v54 > v53)
      goto LABEL_230;
  }
  memcpy(v55, v53, v54);
  v55->__r_.__value_.__s.__data_[v54] = 0;
  *(_BYTE *)(v6 + 272) = 1;
LABEL_195:
  *(_DWORD *)(v6 + 280) = *(_DWORD *)(a2 + 152);
  *(_BYTE *)(v6 + 284) = 1;
  v58 = (std::string *)(a2 + 256);
  v59 = (std::string *)(v6 + 320);
  if (*(_BYTE *)(v6 + 344))
  {
    if (v59 != v58)
    {
      v60 = *(_BYTE *)(a2 + 279);
      if (*(char *)(v6 + 343) < 0)
      {
        if (v60 >= 0)
          v61 = (const std::string::value_type *)(a2 + 256);
        else
          v61 = *(const std::string::value_type **)(a2 + 256);
        if (v60 >= 0)
          v62 = *(unsigned __int8 *)(a2 + 279);
        else
          v62 = *(_QWORD *)(a2 + 264);
        std::string::__assign_no_alias<false>(v59, v61, v62);
      }
      else if ((*(_BYTE *)(a2 + 279) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v59, *(char **)(a2 + 256), *(_QWORD *)(a2 + 264));
      }
      else
      {
        *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        *(_QWORD *)(v6 + 336) = *(_QWORD *)(a2 + 272);
      }
    }
  }
  else
  {
    if (*(char *)(a2 + 279) < 0)
    {
      std::string::__init_copy_ctor_external(v59, *(const std::string::value_type **)(a2 + 256), *(_QWORD *)(a2 + 264));
    }
    else
    {
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      *(_QWORD *)(v6 + 336) = *(_QWORD *)(a2 + 272);
    }
    *(_BYTE *)(v6 + 344) = 1;
  }
  __p[0] = 0;
  __p[1] = 0;
  v78 = 0;
  v79[0] = &unk_24C0ACDA0;
  memset(&v79[1], 0, 20);
  if (__p != (void **)(a2 + 280))
  {
    if (*(char *)(a2 + 303) < 0)
    {
      std::string::__assign_no_alias<true>(__p, *(char **)(a2 + 280), *(_QWORD *)(a2 + 288));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 280);
      v78 = *(_QWORD *)(a2 + 296);
    }
  }
  LODWORD(v79[1]) = *(_DWORD *)(a2 + 312);
  *(_OWORD *)((char *)&v79[1] + 4) = *(_OWORD *)(a2 + 316);
  v80 = *(_WORD *)(a2 + 336);
  v82 = *(_BYTE *)(a2 + 344);
  v81 = *(_DWORD *)(a2 + 340);
  if (v80)
  {
    rtc::IPAddress::ToString((rtc::IPAddress *)v79, &v75);
    v63 = (void **)(v6 + 352);
    if (*(_BYTE *)(v6 + 376))
    {
      if (*(char *)(v6 + 375) < 0)
        operator delete(*v63);
      *(_OWORD *)v63 = v75;
      *(_QWORD *)(v6 + 368) = v76;
    }
    else
    {
      *(_OWORD *)v63 = v75;
      *(_QWORD *)(v6 + 368) = v76;
      *(_BYTE *)(v6 + 376) = 1;
    }
    *(_DWORD *)(v6 + 384) = v80;
    *(_BYTE *)(v6 + 388) = 1;
  }
  v13 = a2 + 160;
  v16 = (std::string *)(v6 + 392);
  if (!*(_BYTE *)(v6 + 416))
    goto LABEL_231;
  if (v16 == (std::string *)v13)
    goto LABEL_243;
  v64 = *(_BYTE *)(a2 + 183);
  if (*(char *)(v6 + 415) < 0)
  {
    if (v64 >= 0)
      v65 = (const std::string::value_type *)(a2 + 160);
    else
      v65 = *(const std::string::value_type **)(a2 + 160);
    if (v64 >= 0)
      v66 = *(unsigned __int8 *)(a2 + 183);
    else
      v66 = *(_QWORD *)(a2 + 168);
    v16 = std::string::__assign_no_alias<false>(v16, v65, v66);
    LODWORD(v13) = *(char *)(a2 + 55);
    if ((v13 & 0x80000000) != 0)
    {
LABEL_227:
      do
      {
        v13 = *(_QWORD *)(a2 + 40);
        if ((v13 & 0x8000000000000000) == 0)
        {
          a1 = *(_QWORD *)a1;
          if (!v13 || a1)
            goto LABEL_245;
        }
LABEL_230:
        __break(1u);
LABEL_231:
        if (*(char *)(a2 + 183) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(a2 + 160), *(_QWORD *)(a2 + 168));
        }
        else
        {
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
          v16->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        }
        *(_BYTE *)(v6 + 416) = 1;
LABEL_243:
        LODWORD(v13) = *(char *)(a2 + 55);
      }
      while ((v13 & 0x80000000) != 0);
    }
  }
  else if ((*(_BYTE *)(a2 + 183) & 0x80) != 0)
  {
    v16 = (std::string *)std::string::__assign_no_alias<true>(v16, *(char **)(a2 + 160), *(_QWORD *)(a2 + 168));
    LODWORD(v13) = *(char *)(a2 + 55);
    if ((v13 & 0x80000000) != 0)
      goto LABEL_227;
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
    *(_QWORD *)(v6 + 408) = *(_QWORD *)(a2 + 176);
    LODWORD(v13) = *(char *)(a2 + 55);
    if ((v13 & 0x80000000) != 0)
      goto LABEL_227;
  }
  v13 = v13;
LABEL_245:
  if (v13 == 3 && *(_WORD *)a1 == 25460 && *(_BYTE *)(a1 + 2) == 112)
  {
    v69 = (std::string *)(a2 + 352);
    v70 = (std::string *)(v6 + 424);
    if (*(_BYTE *)(v6 + 448))
    {
      if (v70 != v69)
      {
        v71 = *(_BYTE *)(a2 + 375);
        if (*(char *)(v6 + 447) < 0)
        {
          if (v71 >= 0)
            v72 = (const std::string::value_type *)(a2 + 352);
          else
            v72 = *(const std::string::value_type **)(a2 + 352);
          if (v71 >= 0)
            v73 = *(unsigned __int8 *)(a2 + 375);
          else
            v73 = *(_QWORD *)(a2 + 360);
          std::string::__assign_no_alias<false>(v70, v72, v73);
        }
        else if ((*(_BYTE *)(a2 + 375) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v70, *(char **)(a2 + 352), *(_QWORD *)(a2 + 360));
        }
        else
        {
          *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          *(_QWORD *)(v6 + 440) = *(_QWORD *)(a2 + 368);
        }
      }
    }
    else
    {
      if (*(char *)(a2 + 375) < 0)
      {
        std::string::__init_copy_ctor_external(v70, *(const std::string::value_type **)(a2 + 352), *(_QWORD *)(a2 + 360));
      }
      else
      {
        *(_OWORD *)&v70->__r_.__value_.__l.__data_ = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
        *(_QWORD *)(v6 + 440) = *(_QWORD *)(a2 + 368);
      }
      *(_BYTE *)(v6 + 448) = 1;
    }
  }
  v74 = v6;
  webrtc::RTCStatsReport::AddStats(a5, &v74);
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  v21 = HIBYTE(v84);
LABEL_255:
  if (v21 < 0)
    operator delete(__s1[0]);
  return v6 + 8;
}

size_t webrtc::`anonymous namespace'::RTCMediaSourceStatsIDFromKindAndAttachment(char *a1, int a2, int a3)
{
  char v4;
  char *v5;
  size_t result;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *__s;
  __int128 v13;
  _BYTE v14[1024];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  __s = v14;
  v14[0] = 83;
  if (a2)
    v4 = 86;
  else
    v4 = 65;
  v14[1] = v4;
  v13 = xmmword_208F1A070;
  v14[2] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", a3);
  v5 = __s;
  if (!__s)
    goto LABEL_18;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_19;
  v7 = result;
  if (result > 0x16)
  {
    v8 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v8 = result | 7;
    v9 = v8 + 1;
    result = (size_t)operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v7;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = result;
    a1 = (char *)result;
  }
  else
  {
    a1[23] = result;
  }
  v10 = &a1[v7];
  if (a1 <= v5 && v10 > v5)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    abort();
  }
  if (v7)
    result = (size_t)memmove(a1, v5, v7);
  *v10 = 0;
  return result;
}

webrtc::RTCInboundRtpStreamStats *webrtc::RTCStatsReport::TryAddStats<webrtc::RTCInboundRtpStreamStats>(uint64_t a1, webrtc::RTCInboundRtpStreamStats **a2)
{
  webrtc::RTCInboundRtpStreamStats *v4;
  _QWORD **v5;
  __int128 v6;
  webrtc::RTCInboundRtpStreamStats *v7;
  std::string::size_type v8;
  const void **v9;
  const void *v10;
  uint64_t **v11;
  _OWORD *v12;
  std::string::size_type v13;
  webrtc::RTCInboundRtpStreamStats *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void **v18;
  std::string __p;
  void *v21[2];
  std::string::size_type v22;
  webrtc::RTCInboundRtpStreamStats *v23;
  uint64_t v24;

  v4 = *a2;
  v5 = (_QWORD **)(a1 + 16);
  if (*((char *)*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 1), *((_QWORD *)v4 + 2));
    v7 = *a2;
  }
  else
  {
    v6 = *(_OWORD *)((char *)v4 + 8);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 3);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v7 = v4;
  }
  *(_OWORD *)v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v8 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  v22 = v8;
  v23 = v7;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v5, &v24, (const void **)v21);
  v10 = *v9;
  if (!*v9)
  {
    v11 = (uint64_t **)v9;
    v12 = operator new(0x40uLL);
    v12[2] = *(_OWORD *)v21;
    v21[0] = 0;
    v21[1] = 0;
    v13 = v22;
    v14 = v23;
    v22 = 0;
    v23 = 0;
    *((_QWORD *)v12 + 6) = v13;
    *((_QWORD *)v12 + 7) = v14;
    v15 = v24;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v15;
    *v11 = (uint64_t *)v12;
    v16 = (_QWORD *)**v5;
    if (v16)
    {
      *v5 = v16;
      v17 = *v11;
    }
    else
    {
      v17 = (uint64_t *)v12;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v17);
    ++*(_QWORD *)(a1 + 32);
  }
  v18 = (void **)v23;
  v23 = 0;
  if (v18)
  {
    webrtc::RTCInboundRtpStreamStats::~RTCInboundRtpStreamStats(v18);
    MEMORY[0x20BD0ADEC]();
  }
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
  if (v10)
    return 0;
  else
    return v4;
}

void webrtc::`anonymous namespace'::CreateRemoteOutboundMediaStreamStats(std::string **a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int *v10;
  int v11;
  unsigned __int8 v12;
  std::string *appended;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  _DWORD *v22;
  const char *v23;
  unint64_t v24;
  std::string *v25;
  char v26;
  const std::string::value_type *v27;
  size_t v28;
  _OWORD *v29;
  char v30;
  const std::string::value_type *v31;
  size_t v32;
  uint64_t v33;
  std::string *v34;
  char v35;
  const std::string::value_type *v36;
  size_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  void *v45[2];
  unint64_t v46;
  char *__s;
  __int128 v48;
  void *__p[2];
  unint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a2 + 264))
  {
    *a1 = 0;
    return;
  }
  v10 = *(int **)(a2 + 160);
  if (*(int **)(a2 + 168) == v10)
    v11 = 0;
  else
    v11 = *v10;
  __s = (char *)__p;
  LOWORD(__p[0]) = 20306;
  if (a3)
    v12 = 86;
  else
    v12 = 65;
  WORD1(__p[0]) = v12;
  v48 = xmmword_208F1A090;
  appended = (std::string *)rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", v11);
  v14 = (unint64_t)__s;
  if (!__s)
    goto LABEL_119;
  v15 = strlen(__s);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v16 = (char *)v15;
  if (v15 > 0x16)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    appended = (std::string *)operator new(v17 + 1);
    v45[1] = v16;
    v46 = v18 | 0x8000000000000000;
    v45[0] = appended;
  }
  else
  {
    HIBYTE(v46) = v15;
    appended = (std::string *)v45;
  }
  v19 = &v16[(_QWORD)appended];
  if ((unint64_t)appended <= v14 && (unint64_t)v19 > v14)
    goto LABEL_119;
  if (v16)
    appended = (std::string *)memmove(appended, (const void *)v14, (size_t)v16);
  *v19 = 0;
  if (!*(_BYTE *)(a2 + 264))
    goto LABEL_119;
  v21 = 1000 * *(_QWORD *)(a2 + 256);
  v14 = operator new();
  *(_OWORD *)__p = *(_OWORD *)v45;
  v50 = v46;
  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  appended = (std::string *)webrtc::RTCRemoteOutboundRtpStreamStats::RTCRemoteOutboundRtpStreamStats(v14, (uint64_t)__p, v21);
  *a1 = appended;
  if ((SHIBYTE(v50) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v46) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(v45[0]);
    v22 = *(_DWORD **)(a2 + 160);
    if (*(_DWORD **)(a2 + 168) != v22)
      goto LABEL_26;
LABEL_32:
    *(_DWORD *)(v14 + 40) = 0;
    *(_BYTE *)(v14 + 44) = 1;
    if (a3 > 3)
LABEL_33:
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)appended);
    goto LABEL_27;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v46) < 0)
    goto LABEL_31;
LABEL_25:
  v22 = *(_DWORD **)(a2 + 160);
  if (*(_DWORD **)(a2 + 168) == v22)
    goto LABEL_32;
LABEL_26:
  *(_DWORD *)(v14 + 40) = *v22;
  *(_BYTE *)(v14 + 44) = 1;
LABEL_27:
  switch(a3)
  {
    case 0u:
      HIBYTE(v50) = 5;
      v23 = "audio";
      if (__p > (void **)"audio")
        goto LABEL_40;
      goto LABEL_39;
    case 1u:
      HIBYTE(v50) = 5;
      v23 = "video";
      if (__p > (void **)"video")
        goto LABEL_40;
LABEL_39:
      if ((char *)__p + 5 > v23)
        goto LABEL_119;
LABEL_40:
      LODWORD(__p[0]) = *(_DWORD *)v23;
      WORD2(__p[0]) = *((unsigned __int8 *)v23 + 4);
      v24 = v14 + 48;
      if (!*(_BYTE *)(v14 + 72))
      {
LABEL_50:
        *(_OWORD *)v24 = *(_OWORD *)__p;
        *(_QWORD *)(v24 + 16) = v50;
        *(_BYTE *)(v14 + 72) = 1;
        v25 = (std::string *)(v14 + 80);
        if (*(_BYTE *)(v14 + 104))
          goto LABEL_44;
LABEL_51:
        if (*(char *)(a5 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        }
        else
        {
          *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
          v25->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
        }
        *(_BYTE *)(v14 + 104) = 1;
LABEL_63:
        if (!*(_BYTE *)(a4 + 136))
          goto LABEL_82;
        goto LABEL_64;
      }
LABEL_41:
      if (*(char *)(v14 + 71) < 0)
        operator delete(*(void **)v24);
      *(_OWORD *)v24 = *(_OWORD *)__p;
      *(_QWORD *)(v24 + 16) = v50;
      v25 = (std::string *)(v14 + 80);
      if (!*(_BYTE *)(v14 + 104))
        goto LABEL_51;
LABEL_44:
      if (v25 == (std::string *)a5)
        goto LABEL_63;
      v26 = *(_BYTE *)(a5 + 23);
      if (*(char *)(v14 + 103) < 0)
      {
        if (v26 >= 0)
          v27 = (const std::string::value_type *)a5;
        else
          v27 = *(const std::string::value_type **)a5;
        if (v26 >= 0)
          v28 = *(unsigned __int8 *)(a5 + 23);
        else
          v28 = *(_QWORD *)(a5 + 8);
        std::string::__assign_no_alias<false>(v25, v27, v28);
        if (!*(_BYTE *)(a4 + 136))
          goto LABEL_82;
      }
      else if ((*(_BYTE *)(a5 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v25, *(char **)a5, *(_QWORD *)(a5 + 8));
        if (!*(_BYTE *)(a4 + 136))
          goto LABEL_82;
      }
      else
      {
        *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a5;
        v25->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
        if (!*(_BYTE *)(a4 + 136))
          goto LABEL_82;
      }
LABEL_64:
      v29 = (_OWORD *)(a4 + 112);
      appended = (std::string *)(v14 + 112);
      if (*(_BYTE *)(v14 + 136))
      {
        if (v14 == a4)
          goto LABEL_82;
        v30 = *(_BYTE *)(a4 + 135);
        if (*(char *)(v14 + 135) < 0)
        {
          if (v30 >= 0)
            v31 = (const std::string::value_type *)(a4 + 112);
          else
            v31 = *(const std::string::value_type **)(a4 + 112);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a4 + 135);
          else
            v32 = *(_QWORD *)(a4 + 120);
          std::string::__assign_no_alias<false>(appended, v31, v32);
        }
        else
        {
          if ((*(_BYTE *)(a4 + 135) & 0x80) != 0)
            goto LABEL_120;
          *(_OWORD *)&appended->__r_.__value_.__l.__data_ = *v29;
          *(_QWORD *)(v14 + 128) = *(_QWORD *)(a4 + 128);
        }
      }
      else
      {
        if (*(char *)(a4 + 135) < 0)
        {
          std::string::__init_copy_ctor_external(appended, *(const std::string::value_type **)(a4 + 112), *(_QWORD *)(a4 + 120));
        }
        else
        {
          *(_OWORD *)&appended->__r_.__value_.__l.__data_ = *v29;
          *(_QWORD *)(v14 + 128) = *(_QWORD *)(a4 + 128);
        }
        *(_BYTE *)(v14 + 136) = 1;
      }
      while (1)
      {
LABEL_82:
        v33 = *(_QWORD *)(a2 + 296);
        *(_QWORD *)(v14 + 144) = *(_QWORD *)(a2 + 288);
        *(_BYTE *)(v14 + 152) = 1;
        *(_QWORD *)(v14 + 160) = v33;
        *(_BYTE *)(v14 + 168) = 1;
        v34 = (std::string *)(a4 + 8);
        appended = (std::string *)(v14 + 176);
        if (!*(_BYTE *)(v14 + 200))
        {
          if (*(char *)(a4 + 31) < 0)
          {
            std::string::__init_copy_ctor_external(appended, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
          }
          else
          {
            *(_OWORD *)&appended->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
            *(_QWORD *)(v14 + 192) = *(_QWORD *)(a4 + 24);
          }
          *(_BYTE *)(v14 + 200) = 1;
LABEL_100:
          if (*(_BYTE *)(a2 + 280))
            goto LABEL_101;
          goto LABEL_119;
        }
        if (appended == v34)
          goto LABEL_100;
        v35 = *(_BYTE *)(a4 + 31);
        if (*(char *)(v14 + 199) < 0)
          break;
        if ((*(_BYTE *)(a4 + 31) & 0x80) != 0)
        {
          appended = (std::string *)std::string::__assign_no_alias<true>(appended, *(char **)(a4 + 8), *(_QWORD *)(a4 + 16));
          if (*(_BYTE *)(a2 + 280))
            goto LABEL_101;
        }
        else
        {
          *(_OWORD *)&appended->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          *(_QWORD *)(v14 + 192) = *(_QWORD *)(a4 + 24);
          if (*(_BYTE *)(a2 + 280))
            goto LABEL_101;
        }
LABEL_119:
        __break(1u);
LABEL_120:
        std::string::__assign_no_alias<true>(appended, *(char **)(a4 + 112), *(_QWORD *)(a4 + 120));
      }
      if (v35 >= 0)
        v36 = (const std::string::value_type *)(a4 + 8);
      else
        v36 = *(const std::string::value_type **)(a4 + 8);
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a4 + 31);
      else
        v37 = *(_QWORD *)(a4 + 16);
      appended = std::string::__assign_no_alias<false>(appended, v36, v37);
      if (!*(_BYTE *)(a2 + 280))
        goto LABEL_119;
LABEL_101:
      *(double *)(v14 + 208) = (double)*(uint64_t *)(a2 + 272);
      *(_BYTE *)(v14 + 216) = 1;
      *(_QWORD *)(v14 + 224) = *(_QWORD *)(a2 + 304);
      *(_BYTE *)(v14 + 232) = 1;
      if (*(_BYTE *)(a2 + 320))
      {
        v38 = *(_QWORD *)(a2 + 312);
        if (v38 == 0x8000000000000000)
        {
          v39 = 0xFFF0000000000000;
LABEL_106:
          v40 = *(double *)&v39;
        }
        else
        {
          if (v38 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v39 = 0x7FF0000000000000;
            goto LABEL_106;
          }
          v40 = (double)v38 * 0.000001;
        }
        *(double *)(v14 + 240) = v40;
        *(_BYTE *)(v14 + 248) = 1;
      }
      v41 = *(int *)(a2 + 336);
      if (*(_BYTE *)(v14 + 264))
      {
        *(_QWORD *)(v14 + 256) = v41;
        v42 = *(_QWORD *)(a2 + 328);
        if (v42 != 0x8000000000000000)
          goto LABEL_111;
LABEL_114:
        v43 = 0xFFF0000000000000;
LABEL_115:
        v44 = *(double *)&v43;
      }
      else
      {
        *(_BYTE *)(v14 + 264) = 1;
        *(_QWORD *)(v14 + 256) = v41;
        v42 = *(_QWORD *)(a2 + 328);
        if (v42 == 0x8000000000000000)
          goto LABEL_114;
LABEL_111:
        if (v42 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v43 = 0x7FF0000000000000;
          goto LABEL_115;
        }
        v44 = (double)v42 * 0.000001;
      }
      *(double *)(v14 + 272) = v44;
      *(_BYTE *)(v14 + 280) = 1;
      return;
    case 2u:
      HIBYTE(v50) = 4;
      if (__p <= (void **)"data" && (char *)__p + 4 > "data")
        goto LABEL_119;
      strcpy((char *)__p, "data");
      v24 = v14 + 48;
      if (!*(_BYTE *)(v14 + 72))
        goto LABEL_50;
      goto LABEL_41;
    case 3u:
      HIBYTE(v50) = 0;
      LOBYTE(__p[0]) = 0;
      v24 = v14 + 48;
      if (!*(_BYTE *)(v14 + 72))
        goto LABEL_50;
      goto LABEL_41;
    default:
      goto LABEL_33;
  }
}

webrtc::RTCRemoteOutboundRtpStreamStats *webrtc::RTCStatsReport::TryAddStats<webrtc::RTCRemoteOutboundRtpStreamStats>(uint64_t a1, webrtc::RTCRemoteOutboundRtpStreamStats **a2)
{
  webrtc::RTCRemoteOutboundRtpStreamStats *v4;
  _QWORD **v5;
  __int128 v6;
  webrtc::RTCRemoteOutboundRtpStreamStats *v7;
  std::string::size_type v8;
  const void **v9;
  const void *v10;
  uint64_t **v11;
  _OWORD *v12;
  std::string::size_type v13;
  webrtc::RTCRemoteOutboundRtpStreamStats *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  void **v18;
  std::string __p;
  void *v21[2];
  std::string::size_type v22;
  webrtc::RTCRemoteOutboundRtpStreamStats *v23;
  uint64_t v24;

  v4 = *a2;
  v5 = (_QWORD **)(a1 + 16);
  if (*((char *)*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 1), *((_QWORD *)v4 + 2));
    v7 = *a2;
  }
  else
  {
    v6 = *(_OWORD *)((char *)v4 + 8);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 3);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v7 = v4;
  }
  *(_OWORD *)v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v8 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  v22 = v8;
  v23 = v7;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v5, &v24, (const void **)v21);
  v10 = *v9;
  if (!*v9)
  {
    v11 = (uint64_t **)v9;
    v12 = operator new(0x40uLL);
    v12[2] = *(_OWORD *)v21;
    v21[0] = 0;
    v21[1] = 0;
    v13 = v22;
    v14 = v23;
    v22 = 0;
    v23 = 0;
    *((_QWORD *)v12 + 6) = v13;
    *((_QWORD *)v12 + 7) = v14;
    v15 = v24;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v15;
    *v11 = (uint64_t *)v12;
    v16 = (_QWORD *)**v5;
    if (v16)
    {
      *v5 = v16;
      v17 = *v11;
    }
    else
    {
      v17 = (uint64_t *)v12;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v17);
    ++*(_QWORD *)(a1 + 32);
  }
  v18 = (void **)v23;
  v23 = 0;
  if (v18)
  {
    webrtc::RTCRemoteOutboundRtpStreamStats::~RTCRemoteOutboundRtpStreamStats(v18);
    MEMORY[0x20BD0ADEC]();
  }
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
  if (v10)
    return 0;
  else
    return v4;
}

webrtc::RTCOutboundRtpStreamStats *webrtc::RTCStatsReport::TryAddStats<webrtc::RTCOutboundRtpStreamStats>(uint64_t a1, webrtc::RTCOutboundRtpStreamStats **a2)
{
  webrtc::RTCOutboundRtpStreamStats *v4;
  _QWORD **v5;
  __int128 v6;
  webrtc::RTCOutboundRtpStreamStats *v7;
  std::string::size_type v8;
  const void **v9;
  const void *v10;
  uint64_t **v11;
  _OWORD *v12;
  std::string::size_type v13;
  webrtc::RTCOutboundRtpStreamStats *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  webrtc::RTCOutboundRtpStreamStats *v18;
  std::string __p;
  void *v21[2];
  std::string::size_type v22;
  webrtc::RTCOutboundRtpStreamStats *v23;
  uint64_t v24;

  v4 = *a2;
  v5 = (_QWORD **)(a1 + 16);
  if (*((char *)*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 1), *((_QWORD *)v4 + 2));
    v7 = *a2;
  }
  else
  {
    v6 = *(_OWORD *)((char *)v4 + 8);
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 3);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v7 = v4;
  }
  *(_OWORD *)v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v8 = __p.__r_.__value_.__r.__words[2];
  memset(&__p, 0, sizeof(__p));
  *a2 = 0;
  v22 = v8;
  v23 = v7;
  v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v5, &v24, (const void **)v21);
  v10 = *v9;
  if (!*v9)
  {
    v11 = (uint64_t **)v9;
    v12 = operator new(0x40uLL);
    v12[2] = *(_OWORD *)v21;
    v21[0] = 0;
    v21[1] = 0;
    v13 = v22;
    v14 = v23;
    v22 = 0;
    v23 = 0;
    *((_QWORD *)v12 + 6) = v13;
    *((_QWORD *)v12 + 7) = v14;
    v15 = v24;
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = v15;
    *v11 = (uint64_t *)v12;
    v16 = (_QWORD *)**v5;
    if (v16)
    {
      *v5 = v16;
      v17 = *v11;
    }
    else
    {
      v17 = (uint64_t *)v12;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v17);
    ++*(_QWORD *)(a1 + 32);
  }
  v18 = v23;
  v23 = 0;
  if (v18)
  {
    webrtc::RTCOutboundRtpStreamStats::~RTCOutboundRtpStreamStats(v18);
    MEMORY[0x20BD0ADEC]();
  }
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(v21[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_13:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
  if (v10)
    return 0;
  else
    return v4;
}

void webrtc::`anonymous namespace'::ProduceRemoteInboundRtpStreamStatsFromReportBlockData(uint64_t *a1, const void **a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v12;
  unsigned __int8 v13;
  char *v14;
  size_t v15;
  size_t v16;
  char *p_p;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string::value_type *v26;
  int v27;
  int v28;
  char *v29;
  _OWORD *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  size_t v41;
  __int128 v42;
  BOOL v43;
  int v44;
  uint64_t *v45;
  _QWORD *v46;
  size_t v47;
  size_t v49;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  size_t v54;
  int v55;
  __int128 *p_s2;
  size_t v57;
  _QWORD *v58;
  size_t v59;
  size_t v60;
  int v61;
  std::string *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  __int128 v66;
  const std::string::value_type *v67;
  size_t v68;
  char v69;
  __int128 v70;
  const std::string::value_type *v71;
  size_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  size_t v77;
  const void *v78;
  _QWORD *v79;
  size_t v80;
  size_t v81;
  int v82;
  uint64_t v83;
  std::string *v84;
  char v85;
  __int128 v86;
  __int128 v87;
  const std::string::value_type *v88;
  size_t size;
  const void **v90;
  uint64_t *v91;
  uint64_t *v92;
  size_t v93;
  const void *v94;
  size_t v95;
  _QWORD *v96;
  size_t v97;
  size_t v98;
  int v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  const std::string::value_type *v103;
  size_t v104;
  char v105;
  std::string *v106;
  std::string *v107;
  uint64_t v108;
  const void **__s1;
  void *__p;
  size_t v111;
  unint64_t v112;
  char *__s;
  __int128 v114;
  __int128 __s2;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v12 = *(_DWORD *)(a3 + 4);
  __s = (char *)&__s2;
  LOWORD(__s2) = 18770;
  if (a4)
    v13 = 86;
  else
    v13 = 65;
  WORD1(__s2) = v13;
  v114 = xmmword_208F1A090;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", v12);
  v14 = __s;
  if (!__s)
    goto LABEL_234;
  v15 = strlen(__s);
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_235;
  v16 = v15;
  if (v15 > 0x16)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    p_p = (char *)operator new(v18 + 1);
    v111 = v16;
    v112 = v19 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v112) = v15;
    p_p = (char *)&__p;
  }
  v20 = &p_p[v16];
  if (p_p <= v14 && v20 > v14)
    goto LABEL_234;
  v108 = a6;
  if (v16)
    memmove(p_p, v14, v16);
  *v20 = 0;
  v22 = *(_QWORD *)(a3 + 24);
  v23 = operator new();
  v26 = (std::string::value_type *)__p;
  v25 = v111;
  *(_DWORD *)((char *)&__s + 3) = *(_DWORD *)((char *)&v112 + 3);
  v27 = v112;
  BYTE3(__s) = BYTE3(v112);
  v28 = SHIBYTE(v112);
  __p = 0;
  v111 = 0;
  v112 = 0;
  LODWORD(__s2) = v27;
  *(_DWORD *)((char *)&__s2 + 3) = *(_DWORD *)((char *)&__s + 3);
  *(_DWORD *)((char *)&__s + 3) = 0;
  LODWORD(__s) = 0;
  *(_QWORD *)v23 = &unk_24C0BC140;
  if (v28 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v23 + 8), v26, v25);
  }
  else
  {
    *(_QWORD *)(v23 + 8) = v26;
    *(_QWORD *)(v23 + 16) = v25;
    *(_DWORD *)(v23 + 24) = __s2;
    *(_DWORD *)(v23 + 27) = *(_DWORD *)((char *)&__s2 + 3);
    *(_BYTE *)(v23 + 31) = v28;
  }
  *(_QWORD *)(v23 + 32) = v22;
  *(_QWORD *)v23 = off_24C0BC650;
  *(_BYTE *)(v23 + 40) = 0;
  *(_BYTE *)(v23 + 44) = 0;
  *(_BYTE *)(v23 + 48) = 0;
  v29 = (char *)(v23 + 48);
  *(_BYTE *)(v23 + 80) = 0;
  v107 = (std::string *)(v23 + 80);
  *(_BYTE *)(v23 + 72) = 0;
  *(_BYTE *)(v23 + 104) = 0;
  *(_BYTE *)(v23 + 112) = 0;
  *(_BYTE *)(v23 + 136) = 0;
  if (v28 < 0)
    operator delete(v26);
  *(_BYTE *)(v23 + 144) = 0;
  *(_BYTE *)(v23 + 152) = 0;
  *(_BYTE *)(v23 + 160) = 0;
  *(_QWORD *)v23 = &off_24C0BC6F8;
  *(_BYTE *)(v23 + 168) = 0;
  v30 = (_OWORD *)(v23 + 168);
  *(_BYTE *)(v23 + 164) = 0;
  *(_BYTE *)(v23 + 192) = 0;
  *(_BYTE *)(v23 + 200) = 0;
  *(_BYTE *)(v23 + 208) = 0;
  *(_BYTE *)(v23 + 216) = 0;
  *(_BYTE *)(v23 + 224) = 0;
  *(_BYTE *)(v23 + 232) = 0;
  *(_BYTE *)(v23 + 240) = 0;
  *(_BYTE *)(v23 + 248) = 0;
  *(_BYTE *)(v23 + 252) = 0;
  *a1 = v23;
  if (SHIBYTE(v112) < 0)
    operator delete(__p);
  *(_DWORD *)(v23 + 40) = *(_DWORD *)(a3 + 4);
  *(_BYTE *)(v23 + 44) = 1;
  if (a4)
    v31 = "video";
  else
    v31 = "audio";
  if (*(_BYTE *)(v23 + 72))
  {
    std::string::__assign_external((std::string *)(v23 + 48), v31);
  }
  else
  {
    *(_BYTE *)(v23 + 71) = 5;
    if (v29 <= v31 && v23 + 53 > (unint64_t)v31)
      goto LABEL_234;
    *(_DWORD *)v29 = *(_DWORD *)v31;
    *(_BYTE *)(v23 + 52) = v31[4];
    *(_BYTE *)(v23 + 53) = 0;
    *(_BYTE *)(v23 + 72) = 1;
  }
  *(_DWORD *)(v23 + 160) = *(_DWORD *)(a3 + 12);
  *(_BYTE *)(v23 + 164) = 1;
  LOBYTE(v24) = *(_BYTE *)(a3 + 8);
  *(float *)&v24 = (double)v24 * 0.00390625;
  if (!*(_BYTE *)(v23 + 224))
    *(_BYTE *)(v23 + 224) = 1;
  *(double *)(v23 + 216) = *(float *)&v24;
  v32 = *(_QWORD *)(a3 + 48);
  if (v32)
  {
    v33 = *(_QWORD *)(a3 + 32);
    if (v33 == 0x8000000000000000)
    {
      v34 = 0xFFF0000000000000;
    }
    else
    {
      if (v33 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v35 = (double)v33 * 0.000001;
        goto LABEL_41;
      }
      v34 = 0x7FF0000000000000;
    }
    v35 = *(double *)&v34;
LABEL_41:
    *(double *)(v23 + 200) = v35;
    *(_BYTE *)(v23 + 208) = 1;
  }
  v36 = *(_QWORD *)(a3 + 40);
  if (v36 == 0x8000000000000000)
  {
    v37 = 0xFFF0000000000000;
  }
  else
  {
    if (v36 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v106 = (std::string *)(v23 + 112);
      *(double *)(v23 + 232) = (double)v36 * 0.000001;
      *(_BYTE *)(v23 + 240) = 1;
      if (*(_BYTE *)(v23 + 252))
        goto LABEL_48;
      goto LABEL_47;
    }
    v37 = 0x7FF0000000000000;
  }
  v106 = (std::string *)(v23 + 112);
  *(_QWORD *)(v23 + 232) = v37;
  *(_BYTE *)(v23 + 240) = 1;
  if (!*(_BYTE *)(v23 + 252))
LABEL_47:
    *(_BYTE *)(v23 + 252) = 1;
LABEL_48:
  *(_DWORD *)(v23 + 248) = v32;
  __s1 = a2;
  v40 = *(uint64_t **)(a5 + 8);
  v39 = (uint64_t *)(a5 + 8);
  v38 = v40;
  if (!v40)
    goto LABEL_229;
  v41 = HIBYTE(v116);
  v42 = __s2;
  if (*((_QWORD *)&__s2 + 1))
    v43 = (_QWORD)__s2 == 0;
  else
    v43 = 0;
  v44 = !v43;
  v105 = v44;
  if ((v116 & 0x8000000000000000) == 0)
  {
    v45 = v39;
    while (1)
    {
      v46 = v38 + 4;
      if (*((char *)v38 + 55) < 0)
      {
        v47 = v38[5];
        if ((v47 & 0x8000000000000000) != 0)
          goto LABEL_234;
        v46 = (_QWORD *)*v46;
        if (v47 && v46 == 0)
          goto LABEL_234;
      }
      else
      {
        v47 = *((unsigned __int8 *)v38 + 55);
      }
      if (v41 >= v47)
        v49 = v47;
      else
        v49 = v41;
      v50 = memcmp(v46, &__s2, v49);
      if (v50)
      {
        if (v50 < 0)
          goto LABEL_57;
LABEL_72:
        v45 = v38;
        v38 = (uint64_t *)*v38;
        if (!v38)
          goto LABEL_96;
      }
      else
      {
        if (v47 >= v41)
          goto LABEL_72;
LABEL_57:
        v38 = (uint64_t *)v38[1];
        if (!v38)
          goto LABEL_96;
      }
    }
  }
  if ((*((_QWORD *)&__s2 + 1) & 0x8000000000000000) != 0 || !v44)
    goto LABEL_234;
  v45 = v39;
  do
  {
    while (1)
    {
      v51 = v38 + 4;
      if (*((char *)v38 + 55) < 0)
      {
        v52 = v38[5];
        if ((v52 & 0x8000000000000000) != 0)
          goto LABEL_234;
        v51 = (_QWORD *)*v51;
        if (v52 && v51 == 0)
          goto LABEL_234;
      }
      else
      {
        v52 = *((unsigned __int8 *)v38 + 55);
      }
      v54 = *((_QWORD *)&v42 + 1) >= v52 ? v52 : *((_QWORD *)&v42 + 1);
      v55 = memcmp(v51, (const void *)v42, v54);
      if (v55)
        break;
      if (v52 >= *((_QWORD *)&v42 + 1))
        goto LABEL_95;
LABEL_79:
      v38 = (uint64_t *)v38[1];
      if (!v38)
        goto LABEL_96;
    }
    if (v55 < 0)
      goto LABEL_79;
LABEL_95:
    v45 = v38;
    v38 = (uint64_t *)*v38;
  }
  while (v38);
LABEL_96:
  if (v39 == v45)
    goto LABEL_229;
  if ((v41 & 0x80) == 0)
  {
    p_s2 = &__s2;
    v57 = v41;
    goto LABEL_101;
  }
  if ((*((_QWORD *)&v42 + 1) & 0x8000000000000000) != 0)
    goto LABEL_234;
  v57 = *((_QWORD *)&v42 + 1);
  p_s2 = (__int128 *)v42;
  if ((v105 & 1) == 0)
    goto LABEL_234;
LABEL_101:
  v58 = v45 + 4;
  if (*((char *)v45 + 55) < 0)
  {
    v59 = v45[5];
    if ((v59 & 0x8000000000000000) == 0)
    {
      v58 = (_QWORD *)*v58;
      if (!v59 || v58)
        goto LABEL_106;
    }
    goto LABEL_234;
  }
  v59 = *((unsigned __int8 *)v45 + 55);
LABEL_106:
  if (v59 >= v57)
    v60 = v57;
  else
    v60 = v59;
  v61 = memcmp(p_s2, v58, v60);
  if (v61)
  {
    if (v61 < 0)
      goto LABEL_229;
  }
  else if (v57 < v59)
  {
    goto LABEL_229;
  }
  if (!*(_BYTE *)(v23 + 192))
  {
    if ((v41 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v23 + 168), (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
    }
    else
    {
      *v30 = __s2;
      *(_QWORD *)(v23 + 184) = v116;
    }
    v62 = (std::string *)(v23 + 8);
    v63 = v108;
    *(_BYTE *)(v23 + 192) = 1;
    v64 = v45[7];
    v65 = (std::string *)(v64 + 208);
    if (*(_BYTE *)(v64 + 232))
      goto LABEL_135;
LABEL_117:
    if (*(char *)(v23 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)(v23 + 8), *(_QWORD *)(v23 + 16));
    }
    else
    {
      v66 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v65->__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
    }
    *(_BYTE *)(v64 + 232) = 1;
    goto LABEL_147;
  }
  if (*(char *)(v23 + 191) < 0)
  {
    if ((v41 & 0x80u) == 0)
      v67 = (const std::string::value_type *)&__s2;
    else
      v67 = (const std::string::value_type *)v42;
    if ((v41 & 0x80u) == 0)
      v68 = v41;
    else
      v68 = *((_QWORD *)&v42 + 1);
    std::string::__assign_no_alias<false>((std::string *)(v23 + 168), v67, v68);
    v62 = (std::string *)(v23 + 8);
    v63 = v108;
    v64 = v45[7];
    v65 = (std::string *)(v64 + 208);
    if (*(_BYTE *)(v64 + 232))
      goto LABEL_135;
    goto LABEL_117;
  }
  if ((v41 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)(v23 + 168), (char *)v42, *((size_t *)&v42 + 1));
    v62 = (std::string *)(v23 + 8);
    v63 = v108;
    v64 = v45[7];
    v65 = (std::string *)(v64 + 208);
    if (*(_BYTE *)(v64 + 232))
      goto LABEL_135;
    goto LABEL_117;
  }
  *v30 = __s2;
  *(_QWORD *)(v23 + 184) = v116;
  v62 = (std::string *)(v23 + 8);
  v63 = v108;
  v64 = v45[7];
  v65 = (std::string *)(v64 + 208);
  if (!*(_BYTE *)(v64 + 232))
    goto LABEL_117;
LABEL_135:
  if (v65 != v62)
  {
    v69 = *(_BYTE *)(v23 + 31);
    if (*(char *)(v64 + 231) < 0)
    {
      if (v69 >= 0)
        v71 = (const std::string::value_type *)v62;
      else
        v71 = *(const std::string::value_type **)(v23 + 8);
      if (v69 >= 0)
        v72 = *(unsigned __int8 *)(v23 + 31);
      else
        v72 = *(_QWORD *)(v23 + 16);
      std::string::__assign_no_alias<false>(v65, v71, v72);
    }
    else if ((*(_BYTE *)(v23 + 31) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v65, *(char **)(v23 + 8), *(_QWORD *)(v23 + 16));
    }
    else
    {
      v70 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
      v65->__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v70;
    }
  }
LABEL_147:
  v74 = *(uint64_t **)(v63 + 24);
  v73 = (uint64_t *)(v63 + 24);
  v75 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v73 - 8, __s1, v74, v73);
  if (v73 == v75)
  {
LABEL_187:
    if (!*(_BYTE *)(v64 + 136))
      goto LABEL_229;
    goto LABEL_188;
  }
  v76 = v75;
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    v77 = *((unsigned __int8 *)__s1 + 23);
    goto LABEL_153;
  }
  v77 = (size_t)__s1[1];
  if ((v77 & 0x8000000000000000) != 0 || (v78 = *__s1, __s1 = (const void **)*__s1, v77) && !v78)
  {
LABEL_234:
    __break(1u);
LABEL_235:
    abort();
  }
LABEL_153:
  v79 = v75 + 4;
  if (*((char *)v75 + 55) < 0)
  {
    v80 = v75[5];
    if ((v80 & 0x8000000000000000) == 0)
    {
      v79 = (_QWORD *)*v79;
      if (!v80 || v79)
        goto LABEL_158;
    }
    goto LABEL_234;
  }
  v80 = *((unsigned __int8 *)v75 + 55);
LABEL_158:
  if (v80 >= v77)
    v81 = v77;
  else
    v81 = v80;
  v82 = memcmp(__s1, v79, v81);
  if (!v82)
  {
    if (v77 >= v80)
      goto LABEL_165;
    goto LABEL_187;
  }
  if (v82 < 0)
    goto LABEL_187;
LABEL_165:
  v83 = v76[7];
  if (!v83)
    goto LABEL_187;
  if (*(_BYTE *)(v83 + 128))
  {
    v84 = (std::string *)(v83 + 104);
    if (*(_BYTE *)(v23 + 104))
      goto LABEL_168;
LABEL_175:
    if (SHIBYTE(v84->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v107, v84->__r_.__value_.__l.__data_, v84->__r_.__value_.__l.__size_);
    }
    else
    {
      v87 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
      *(_QWORD *)(v23 + 96) = *((_QWORD *)&v84->__r_.__value_.__l + 2);
      *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v87;
    }
    *(_BYTE *)(v23 + 104) = 1;
    goto LABEL_187;
  }
  if (!*(_BYTE *)(v64 + 104))
    goto LABEL_234;
  v84 = (std::string *)(v64 + 80);
  if (!*(_BYTE *)(v23 + 104))
    goto LABEL_175;
LABEL_168:
  if (v107 == v84)
    goto LABEL_187;
  v85 = HIBYTE(v84->__r_.__value_.__r.__words[2]);
  if (*(char *)(v23 + 103) < 0)
  {
    if (v85 >= 0)
      v88 = (const std::string::value_type *)v84;
    else
      v88 = (const std::string::value_type *)v84->__r_.__value_.__r.__words[0];
    if (v85 >= 0)
      size = HIBYTE(v84->__r_.__value_.__r.__words[2]);
    else
      size = v84->__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v107, v88, size);
    if (*(_BYTE *)(v64 + 136))
      goto LABEL_188;
    goto LABEL_229;
  }
  if ((*((_BYTE *)&v84->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v107, v84->__r_.__value_.__l.__data_, v84->__r_.__value_.__l.__size_);
    if (*(_BYTE *)(v64 + 136))
      goto LABEL_188;
    goto LABEL_229;
  }
  v86 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  *(_QWORD *)(v23 + 96) = *((_QWORD *)&v84->__r_.__value_.__l + 2);
  *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v86;
  if (!*(_BYTE *)(v64 + 136))
    goto LABEL_229;
LABEL_188:
  v90 = (const void **)(v64 + 112);
  v91 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)v73 - 8, (const void **)(v64 + 112), (uint64_t *)*v73, v73);
  if (v73 == v91)
    goto LABEL_229;
  v92 = v91;
  v93 = *(unsigned __int8 *)(v64 + 135);
  v94 = (const void *)(v64 + 112);
  v95 = v93;
  if (*(char *)(v64 + 135) < 0)
  {
    v95 = *(_QWORD *)(v64 + 120);
    if ((v95 & 0x8000000000000000) != 0)
      goto LABEL_234;
    v94 = *v90;
    if (v95)
    {
      if (!v94)
        goto LABEL_234;
    }
  }
  v96 = v92 + 4;
  if (*((char *)v92 + 55) < 0)
  {
    v97 = v92[5];
    if ((v97 & 0x8000000000000000) == 0)
    {
      v96 = (_QWORD *)*v96;
      if (!v97 || v96)
        goto LABEL_198;
    }
    goto LABEL_234;
  }
  v97 = *((unsigned __int8 *)v92 + 55);
LABEL_198:
  if (v97 >= v95)
    v98 = v95;
  else
    v98 = v97;
  v99 = memcmp(v94, v96, v98);
  if (v99)
  {
    if (v99 < 0)
      goto LABEL_229;
  }
  else if (v95 < v97)
  {
    goto LABEL_229;
  }
  v100 = v92[7];
  if (!v100)
    goto LABEL_229;
  if (!*(_BYTE *)(v64 + 136))
    goto LABEL_234;
  if (!*(_BYTE *)(v23 + 136))
  {
    if ((v93 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v106, *(const std::string::value_type **)(v64 + 112), *(_QWORD *)(v64 + 120));
    }
    else
    {
      v102 = *(_OWORD *)v90;
      v106->__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 128);
      *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v102;
    }
    *(_BYTE *)(v23 + 136) = 1;
LABEL_227:
    if (!*(_BYTE *)(v100 + 116))
      goto LABEL_229;
    goto LABEL_228;
  }
  if (v23 == v64)
    goto LABEL_227;
  if (*(char *)(v23 + 135) < 0)
  {
    if ((v93 & 0x80u) == 0)
      v103 = (const std::string::value_type *)(v64 + 112);
    else
      v103 = *(const std::string::value_type **)(v64 + 112);
    if ((v93 & 0x80u) == 0)
      v104 = v93;
    else
      v104 = *(_QWORD *)(v64 + 120);
    std::string::__assign_no_alias<false>(v106, v103, v104);
    if (*(_BYTE *)(v100 + 116))
      goto LABEL_228;
  }
  else
  {
    if ((v93 & 0x80) == 0)
    {
      v101 = *(_OWORD *)v90;
      v106->__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 128);
      *(_OWORD *)&v106->__r_.__value_.__l.__data_ = v101;
      if (!*(_BYTE *)(v100 + 116))
        goto LABEL_229;
LABEL_228:
      *(double *)(v23 + 144) = (double)(1000000 * *(unsigned int *)(a3 + 20) / *(int *)(v100 + 112)) * 0.000001;
      *(_BYTE *)(v23 + 152) = 1;
      goto LABEL_229;
    }
    std::string::__assign_no_alias<true>(v106, *(char **)(v64 + 112), *(_QWORD *)(v64 + 120));
    if (*(_BYTE *)(v100 + 116))
      goto LABEL_228;
  }
LABEL_229:
  if (SHIBYTE(v116) < 0)
    operator delete((void *)__s2);
}

void webrtc::RTCStatsCollector::OnSctpDataChannelStateChanged(uint64_t a1, int a2, int a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  int *v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  char *v54;
  size_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  int v69;

  if (a3 != 3)
  {
    if (a3 != 1)
      return;
    v6 = *(char **)(a1 + 440);
    v5 = *(char **)(a1 + 448);
    v7 = v5 - v6;
    if (v5 == v6)
    {
      v14 = v5 - v6;
      v15 = (v5 - v6) >> 2;
      v16 = &v6[(v5 - v6) & 0xFFFFFFFFFFFFFFFCLL];
      if (v16 != v5)
        goto LABEL_10;
    }
    else
    {
      v8 = v7 >> 2;
      v9 = *(char **)(a1 + 440);
      do
      {
        v10 = v8 >> 1;
        v11 = (int *)&v9[4 * (v8 >> 1)];
        v13 = *v11;
        v12 = (char *)(v11 + 1);
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v9 = v12;
        else
          v8 = v10;
      }
      while (v8);
      v14 = v9 - v6;
      v15 = (v9 - v6) >> 2;
      v16 = &v6[(v9 - v6) & 0xFFFFFFFFFFFFFFFCLL];
      if (v16 != v5)
      {
LABEL_10:
        if (*(_DWORD *)v16 > a2)
        {
          v17 = *(_QWORD *)(a1 + 456);
          if ((unint64_t)v5 < v17)
          {
            v18 = v5 - (v16 + 4);
            v19 = v18 >> 2;
            v20 = v5 - 4;
            if ((unint64_t)v5 < 4)
            {
              v24 = *(char **)(a1 + 448);
              goto LABEL_80;
            }
            v21 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + v18;
            v22 = (unint64_t)&v6[v21 + 4];
            if ((unint64_t)v5 > v22)
              v22 = *(_QWORD *)(a1 + 448);
            v23 = v22 + ~(unint64_t)v6 - v21;
            if (v23 >= 0x2C)
            {
              v24 = *(char **)(a1 + 448);
              if ((unint64_t)(v16 + 4 - &v6[v14 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
              {
                v63 = (v23 >> 2) + 1;
                v64 = 4 * (v63 & 0x7FFFFFFFFFFFFFF8);
                v20 += v64;
                v24 = &v5[v64];
                v65 = v5 + 16;
                v66 = &v6[4 * v19 + 16 + 4 * v15];
                v67 = v63 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v68 = *(_OWORD *)v66;
                  *(v65 - 1) = *((_OWORD *)v66 - 1);
                  *v65 = v68;
                  v65 += 2;
                  v66 += 32;
                  v67 -= 8;
                }
                while (v67);
                if (v63 == (v63 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_80:
                  *(_QWORD *)(a1 + 448) = v24;
                  if (v5 != v16 + 4)
                    memmove(&v5[-4 * v19], v16, v18);
                  *(_DWORD *)v16 = a2;
                  goto LABEL_83;
                }
              }
            }
            else
            {
              v24 = *(char **)(a1 + 448);
            }
            do
            {
              v69 = *(_DWORD *)v20;
              v20 += 4;
              *(_DWORD *)v24 = v69;
              v24 += 4;
            }
            while (v20 < v5);
            goto LABEL_80;
          }
LABEL_37:
          v37 = (v7 >> 2) + 1;
          if (v37 >> 62)
            goto LABEL_86;
          v38 = v17 - (_QWORD)v6;
          v39 = (uint64_t)(v17 - (_QWORD)v6) >> 1;
          if (v39 > v37)
            v37 = v39;
          if (v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v37;
          if (v40)
          {
            if (v40 >> 62)
              goto LABEL_87;
            v41 = (char *)operator new(4 * v40);
            v42 = &v41[4 * v15];
            v43 = &v41[4 * v40];
            if (v15 != v40)
              goto LABEL_59;
          }
          else
          {
            v41 = 0;
            v42 = (char *)(4 * v15);
            v43 = 0;
            if (v15)
              goto LABEL_59;
          }
          if ((uint64_t)(v14 & 0xFFFFFFFFFFFFFFFCLL) >= 1)
          {
            v44 = v15 + 2;
            if (v15 >= -1)
              v44 = v15 + 1;
            v42 -= 4 * (v44 >> 1);
            goto LABEL_59;
          }
          if ((unint64_t)v14 < 4)
            v45 = 1;
          else
            v45 = (v14 >> 1) & 0xFFFFFFFFFFFFFFFELL;
          if (!(v45 >> 62))
          {
            v46 = 4 * v45;
            v47 = (char *)operator new(4 * v45);
            v42 = &v47[v45 & 0xFFFFFFFFFFFFFFFCLL];
            v43 = &v47[v46];
            if (v41)
              operator delete(v41);
LABEL_59:
            if (v42)
            {
              *(_DWORD *)v42 = a2;
              v48 = *(char **)(a1 + 440);
              if (v48 == v16)
              {
                v52 = v42;
                v56 = *(char **)(a1 + 448);
                v55 = v56 - v16;
                if (v56 == v16)
                {
LABEL_67:
                  *(_QWORD *)(a1 + 440) = v52;
                  *(_QWORD *)(a1 + 448) = &v42[v55 + 4];
                  *(_QWORD *)(a1 + 456) = v43;
                  if (v48)
                    operator delete(v48);
                  goto LABEL_83;
                }
LABEL_66:
                memmove(v42 + 4, v16, v55);
                v48 = *(char **)(a1 + 440);
                goto LABEL_67;
              }
              v49 = &v6[v14 & 0xFFFFFFFFFFFFFFFCLL];
              v50 = v49 - v48 - 4;
              if (v50 >= 0x2C && (unint64_t)(v49 - v42) >= 0x20)
              {
                v57 = (v50 >> 2) + 1;
                v58 = 4 * (v57 & 0x7FFFFFFFFFFFFFF8);
                v51 = &v16[-v58];
                v52 = &v42[-v58];
                v59 = v42 - 16;
                v60 = &v6[4 * v15 - 16];
                v61 = v57 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v62 = *(_OWORD *)v60;
                  *((_OWORD *)v59 - 1) = *((_OWORD *)v60 - 1);
                  *(_OWORD *)v59 = v62;
                  v59 -= 32;
                  v60 -= 32;
                  v61 -= 8;
                }
                while (v61);
                if (v57 == (v57 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_65:
                  v54 = *(char **)(a1 + 448);
                  v55 = v54 - v16;
                  if (v54 == v16)
                    goto LABEL_67;
                  goto LABEL_66;
                }
              }
              else
              {
                v51 = v16;
                v52 = v42;
              }
              do
              {
                v53 = *((_DWORD *)v51 - 1);
                v51 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              while (v51 != v48);
              goto LABEL_65;
            }
            goto LABEL_85;
          }
LABEL_87:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
LABEL_83:
        ++*(_DWORD *)(a1 + 432);
        return;
      }
    }
    v17 = *(_QWORD *)(a1 + 456);
    if ((unint64_t)v5 >= v17)
      goto LABEL_37;
    if (v6)
    {
      *(_DWORD *)v5 = a2;
      *(_QWORD *)(a1 + 448) = v5 + 4;
      goto LABEL_83;
    }
LABEL_85:
    __break(1u);
LABEL_86:
    abort();
  }
  v26 = *(char **)(a1 + 440);
  v25 = *(char **)(a1 + 448);
  if (v25 == v26)
  {
    v28 = *(char **)(a1 + 448);
    v33 = v28;
  }
  else
  {
    v27 = (v25 - v26) >> 2;
    v28 = *(char **)(a1 + 440);
    do
    {
      v29 = v27 >> 1;
      v30 = &v28[4 * (v27 >> 1)];
      v32 = *(_DWORD *)v30;
      v31 = v30 + 4;
      v27 += ~(v27 >> 1);
      if (v32 < a2)
        v28 = v31;
      else
        v27 = v29;
    }
    while (v27);
    v33 = v28;
    if (v25 != v28)
    {
      if (*(_DWORD *)v28 <= a2)
        v33 = v28 + 4;
      else
        v33 = v28;
    }
  }
  v34 = (v28 - v26) >> 2;
  v35 = (v33 - v26) >> 2;
  if (v35 < v34)
    goto LABEL_85;
  if (v34 != v35)
  {
    v36 = v25 - v33;
    if (v25 != v33)
      memmove(v28, v33, v25 - v33);
    *(_QWORD *)(a1 + 448) = &v28[v36];
    ++*(_DWORD *)(a1 + 436);
  }
}

void webrtc::TrackMediaInfoMap::~TrackMediaInfoMap(webrtc::TrackMediaInfoMap *this)
{
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 56));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 53));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 50));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 47));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 44));
  std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*((_QWORD **)this + 41));
  std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*((_QWORD **)this + 38));
  std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*((_QWORD **)this + 35));
  std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*((_QWORD **)this + 32));
  if (*((_BYTE *)this + 240))
    cricket::VideoMediaInfo::~VideoMediaInfo((char **)this + 15);
  if (*((_BYTE *)this + 112))
    cricket::VoiceMediaInfo::~VoiceMediaInfo((char **)this + 1);
}

size_t webrtc::`anonymous namespace'::RTCInboundRtpStreamStatsIDFromSSRC(char *a1, _QWORD *a2, int a3, int a4)
{
  unint64_t v7;
  size_t v9;
  size_t v10;
  char *v11;
  _BYTE *v12;
  char v13;
  char *v14;
  size_t result;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *__s[3];
  char __src;
  _WORD v22[512];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  __s[0] = (char *)v22;
  __s[1] = (char *)1024;
  v22[0] = 73;
  if (*((char *)a2 + 23) < 0)
  {
    v7 = a2[1];
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_29;
    a2 = (_QWORD *)*a2;
    if (v7 && a2 == 0)
      goto LABEL_29;
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  if (v7 >= 0x3FE)
    v9 = 1022;
  else
    v9 = v7;
  v10 = v7 < 0x3FE;
  if (v7 >= 0x3FE)
    v11 = (char *)(v9 + 1);
  else
    v11 = (char *)(v9 + 2);
  memcpy((char *)v22 + 1, a2, v9);
  v12 = (char *)v22 + v9 + 1;
  *v12 = 0;
  if (a3)
    v13 = 86;
  else
    v13 = 65;
  __src = v13;
  memcpy(v12, &__src, v10);
  __s[2] = v11;
  *((_BYTE *)v22 + (_QWORD)v11) = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__s, "%u", a4);
  v14 = __s[0];
  if (!__s[0])
  {
LABEL_29:
    __break(1u);
LABEL_30:
    abort();
  }
  result = strlen(__s[0]);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_30;
  v16 = result;
  if (result <= 0x16)
  {
    a1[23] = result;
    v17 = &a1[result];
    if (a1 > v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  v18 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v18 = result | 7;
  v19 = v18 + 1;
  result = (size_t)operator new(v18 + 1);
  *((_QWORD *)a1 + 1) = v16;
  *((_QWORD *)a1 + 2) = v19 | 0x8000000000000000;
  *(_QWORD *)a1 = result;
  a1 = (char *)result;
  v17 = (char *)(result + v16);
  if (result <= (unint64_t)v14)
  {
LABEL_25:
    if (v17 <= v14)
      goto LABEL_26;
    goto LABEL_29;
  }
LABEL_26:
  if (v16)
    result = (size_t)memmove(a1, v14, v16);
  *v17 = 0;
  return result;
}

uint64_t webrtc::`anonymous namespace'::SetInboundRTPStreamStatsFromMediaReceiverInfo(uint64_t result, uint64_t a2)
{
  int *v2;
  int v3;

  v2 = *(int **)(result + 160);
  if (*(int **)(result + 168) == v2)
    v3 = 0;
  else
    v3 = *v2;
  *(_DWORD *)(a2 + 40) = v3;
  *(_BYTE *)(a2 + 44) = 1;
  *(_DWORD *)(a2 + 296) = *(_DWORD *)(result + 16);
  *(_BYTE *)(a2 + 300) = 1;
  *(_QWORD *)(a2 + 376) = *(_QWORD *)result;
  *(_BYTE *)(a2 + 384) = 1;
  *(_QWORD *)(a2 + 392) = *(_QWORD *)(result + 8);
  *(_BYTE *)(a2 + 400) = 1;
  if (*(_BYTE *)(result + 32))
  {
    *(_QWORD *)(a2 + 424) = *(_QWORD *)(result + 24);
    *(_BYTE *)(a2 + 432) = 1;
  }
  if (*(_BYTE *)(result + 48))
  {
    *(_QWORD *)(a2 + 408) = *(_QWORD *)(result + 40);
    *(_BYTE *)(a2 + 416) = 1;
  }
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(result + 20);
  *(_BYTE *)(a2 + 164) = 1;
  *(_QWORD *)(a2 + 464) = *(_QWORD *)(result + 64);
  *(_BYTE *)(a2 + 472) = 1;
  *(_QWORD *)(a2 + 480) = *(_QWORD *)(result + 72);
  *(_BYTE *)(a2 + 488) = 1;
  *(_QWORD *)(a2 + 496) = *(_QWORD *)(result + 80);
  *(_BYTE *)(a2 + 504) = 1;
  *(_QWORD *)(a2 + 512) = *(_QWORD *)(result + 88);
  *(_BYTE *)(a2 + 520) = 1;
  if (*(_BYTE *)(result + 60))
  {
    *(_DWORD *)(a2 + 968) = *(_DWORD *)(result + 56);
    *(_BYTE *)(a2 + 972) = 1;
  }
  if (*(_BYTE *)(result + 216))
  {
    *(_QWORD *)(a2 + 320) = *(_QWORD *)(result + 208);
    *(_BYTE *)(a2 + 328) = 1;
  }
  if (*(_BYTE *)(result + 232))
  {
    *(_QWORD *)(a2 + 352) = *(_QWORD *)(result + 224);
    *(_BYTE *)(a2 + 360) = 1;
  }
  if (*(_BYTE *)(result + 248))
  {
    *(_QWORD *)(a2 + 336) = *(_QWORD *)(result + 240);
    *(_BYTE *)(a2 + 344) = 1;
  }
  return result;
}

void webrtc::`anonymous namespace'::GetCodecIdAndMaybeCreateCodecStats(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  unint64_t v12;
  const std::string::value_type *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::string::size_type v21;
  char v22;
  std::string *p_p;
  std::string::size_type v24;
  size_t v25;
  char *v26;
  size_t v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  size_t v35;
  const std::string::value_type *v36;
  _QWORD *v37;
  size_t v38;
  size_t v39;
  int v40;
  uint64_t v41;
  std::string *v42;
  char v43;
  _OWORD *v44;
  void **v45;
  const char *v46;
  uint64_t v47;
  std::string *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  std::string::size_type v52;
  const std::string::value_type *v53;
  BOOL v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string *v57;
  char *v58;
  std::string::size_type v59;
  int v60;
  int v61;
  std::string::size_type v62;
  char v63;
  std::string::size_type v64;
  char v65;
  uint64_t v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  size_t v69;
  uint64_t v70;
  std::string __p;
  std::string __src;
  std::string v73;
  std::string v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)(a5 + 104);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  v73.__r_.__value_.__s.__data_[0] = 67;
  *(_WORD *)((char *)&v73.__r_.__value_.__l.__data_ + 1) = a3;
  *(_OWORD *)&v74.__r_.__value_.__r.__words[1] = xmmword_208F1A070;
  if (*(char *)(a4 + 23) < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v13 = *(const std::string::value_type **)a4;
    if (v12)
    {
      if (!v13)
        goto LABEL_147;
    }
  }
  else
  {
    v12 = *(unsigned __int8 *)(a4 + 23);
    v13 = (const std::string::value_type *)a4;
  }
  if (v12 >= 0x3FD)
    v14 = 1021;
  else
    v14 = v12;
  v15 = v14 + 2;
  v16 = v12 < 0x3FD;
  if (v12 < 0x3FD)
    v17 = v14 + 3;
  else
    v17 = v14 + 2;
  memcpy(&v73.__r_.__value_.__s.__data_[2], v13, v14);
  v73.__r_.__value_.__s.__data_[v15] = 0;
  __src.__r_.__value_.__s.__data_[0] = 95;
  memcpy((char *)&v73 + v15, &__src, v16);
  v74.__r_.__value_.__r.__words[2] = v17;
  v73.__r_.__value_.__s.__data_[v17] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v74, "%d", v11);
  memset(&__src, 0, sizeof(__src));
  webrtc::WriteFmtpParameters((_QWORD *)(a5 + 80), &__src);
  if (v18)
  {
    __p.__r_.__value_.__s.__data_[0] = 95;
    size = v74.__r_.__value_.__l.__size_;
    v20 = v74.__r_.__value_.__r.__words[2] + 1;
    memcpy((void *)(v74.__r_.__value_.__r.__words[0] + v74.__r_.__value_.__r.__words[2]), &__p, v74.__r_.__value_.__l.__size_ != v74.__r_.__value_.__r.__words[2] + 1);
    v21 = v74.__r_.__value_.__r.__words[2];
    if (size != v20)
      v21 = v74.__r_.__value_.__r.__words[2] + 1;
    v74.__r_.__value_.__r.__words[2] = v21;
    *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + v21) = 0;
    __p = __src;
    memset(&__src, 0, sizeof(__src));
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v24 = __p.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_147;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        if (!__p.__r_.__value_.__r.__words[0])
          goto LABEL_147;
      }
    }
    else
    {
      p_p = &__p;
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if (v24 >= v74.__r_.__value_.__l.__size_ + ~v74.__r_.__value_.__r.__words[2])
      v25 = v74.__r_.__value_.__l.__size_ + ~v74.__r_.__value_.__r.__words[2];
    else
      v25 = v24;
    memcpy((void *)(v74.__r_.__value_.__r.__words[0] + v74.__r_.__value_.__r.__words[2]), p_p, v25);
    v74.__r_.__value_.__r.__words[2] += v25;
    *(_BYTE *)(v74.__r_.__value_.__r.__words[0] + v74.__r_.__value_.__r.__words[2]) = 0;
    if (v22 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v26 = (char *)v74.__r_.__value_.__r.__words[0];
  if (!v74.__r_.__value_.__r.__words[0])
  {
LABEL_147:
    __break(1u);
LABEL_148:
    abort();
  }
  v27 = strlen(v74.__r_.__value_.__l.__data_);
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_148;
  v28 = v27;
  if (v27 > 0x16)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v29 = (char *)operator new(v31 + 1);
    *(_QWORD *)(a1 + 8) = v28;
    *(_QWORD *)(a1 + 16) = v32 | 0x8000000000000000;
    *(_QWORD *)a1 = v29;
    v30 = &v29[v28];
    if (v29 > v26)
      goto LABEL_34;
  }
  else
  {
    *(_BYTE *)(a1 + 23) = v27;
    v29 = (char *)a1;
    v30 = (char *)(a1 + v28);
    if (a1 > (unint64_t)v26)
      goto LABEL_34;
  }
  if (v30 > v26)
    goto LABEL_147;
LABEL_34:
  if (v28)
    memmove(v29, v26, v28);
  *v30 = 0;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  v33 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a6 + 16, (const void **)a1, *(uint64_t **)(a6 + 24), (uint64_t *)(a6 + 24));
  if ((uint64_t *)(a6 + 24) == v33)
    goto LABEL_57;
  v34 = v33;
  if (*(char *)(a1 + 23) < 0)
  {
    v35 = *(_QWORD *)(a1 + 8);
    if ((v35 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v36 = *(const std::string::value_type **)a1;
    if (v35)
    {
      if (!v36)
        goto LABEL_147;
    }
  }
  else
  {
    v35 = *(unsigned __int8 *)(a1 + 23);
    v36 = (const std::string::value_type *)a1;
  }
  v37 = v34 + 4;
  if (*((char *)v34 + 55) < 0)
  {
    v38 = v34[5];
    if ((v38 & 0x8000000000000000) != 0)
      goto LABEL_147;
    v37 = (_QWORD *)*v37;
    if (v38)
    {
      if (!v37)
        goto LABEL_147;
    }
  }
  else
  {
    v38 = *((unsigned __int8 *)v34 + 55);
  }
  if (v38 >= v35)
    v39 = v35;
  else
    v39 = v38;
  v40 = memcmp(v36, v37, v39);
  if (!v40)
  {
    if (v35 < v38)
      goto LABEL_57;
LABEL_56:
    if (v34[7])
      return;
    goto LABEL_57;
  }
  if ((v40 & 0x80000000) == 0)
    goto LABEL_56;
LABEL_57:
  v41 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v73 = *(std::string *)a1;
  *(_QWORD *)v41 = &unk_24C0BC140;
  v42 = (std::string *)(v41 + 8);
  v43 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
    v43 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *(_QWORD *)(v41 + 24) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
  }
  *(_QWORD *)(v41 + 32) = a2;
  *(_QWORD *)v41 = off_24C0BC4C8;
  *(_BYTE *)(v41 + 40) = 0;
  v44 = (_OWORD *)(v41 + 40);
  *(_BYTE *)(v41 + 64) = 0;
  *(_BYTE *)(v41 + 72) = 0;
  *(_BYTE *)(v41 + 76) = 0;
  *(_BYTE *)(v41 + 80) = 0;
  v45 = (void **)(v41 + 80);
  *(_BYTE *)(v41 + 104) = 0;
  *(_BYTE *)(v41 + 112) = 0;
  *(_BYTE *)(v41 + 116) = 0;
  *(_BYTE *)(v41 + 120) = 0;
  *(_BYTE *)(v41 + 124) = 0;
  *(_BYTE *)(v41 + 128) = 0;
  *(_BYTE *)(v41 + 152) = 0;
  if (v43 < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  *(_DWORD *)(v41 + 72) = v11;
  *(_BYTE *)(v41 + 76) = 1;
  switch(*(_DWORD *)(a5 + 32))
  {
    case 0:
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = 5;
      v46 = "audio";
      if (&v74 > (std::string *)"audio")
        goto LABEL_74;
      goto LABEL_73;
    case 1:
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = 5;
      v46 = "video";
      if (&v74 > (std::string *)"video")
        goto LABEL_74;
LABEL_73:
      if ((char *)v74.__r_.__value_.__r.__words + 5 > v46)
        goto LABEL_147;
LABEL_74:
      LODWORD(v74.__r_.__value_.__l.__data_) = *(_DWORD *)v46;
      WORD2(v74.__r_.__value_.__r.__words[0]) = *((unsigned __int8 *)v46 + 4);
      v47 = 5;
      v48 = (std::string *)((char *)v74.__r_.__value_.__r.__words + 5);
      if ((char *)v74.__r_.__value_.__r.__words + 5 > "/")
        goto LABEL_78;
LABEL_77:
      if ((char *)&v48->__r_.__value_.__l.__data_ + 1 > "/")
        goto LABEL_147;
LABEL_78:
      v49 = v74.__r_.__value_.__r.__words[2];
      v48->__r_.__value_.__s.__data_[0] = 47;
      v50 = v47 + 1;
      if ((v49 & 0x8000000000000000) != 0)
        v74.__r_.__value_.__l.__size_ = v50;
      else
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = v50;
      v74.__r_.__value_.__s.__data_[v50] = 0;
      v51 = *(char *)(a5 + 31);
      v73 = v74;
      memset(&v74, 0, sizeof(v74));
      if (v51 < 0)
      {
        v53 = *(const std::string::value_type **)(a5 + 8);
        v52 = *(_QWORD *)(a5 + 16);
        v54 = v52 == 0;
        if (v53 || !v52)
          goto LABEL_85;
        goto LABEL_147;
      }
      v52 = v51;
      v53 = (const std::string::value_type *)(a5 + 8);
      v54 = v51 == 0;
LABEL_85:
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v55 = 22;
      else
        v55 = (v73.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      else
        v56 = v73.__r_.__value_.__l.__size_;
      if (v55 - v56 < v52)
      {
        std::string::__grow_by_and_replace(&v73, v55, v56 + v52 - v55, v56, v56, 0, v52, v53);
        goto LABEL_103;
      }
      if (!v54)
      {
        if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v73;
        else
          v57 = (std::string *)v73.__r_.__value_.__r.__words[0];
        v58 = (char *)v57 + v56;
        if ((char *)v57 + v56 > v53 || &v58[v52] <= v53)
        {
          memmove(v58, v53, v52);
          v59 = v56 + v52;
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            v73.__r_.__value_.__l.__size_ = v56 + v52;
          else
            *((_BYTE *)&v73.__r_.__value_.__s + 23) = v59 & 0x7F;
          v57->__r_.__value_.__s.__data_[v59] = 0;
          goto LABEL_103;
        }
        goto LABEL_147;
      }
LABEL_103:
      __src = v73;
      memset(&v73, 0, sizeof(v73));
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v74.__r_.__value_.__l.__data_);
        if (*(_BYTE *)(v41 + 104))
        {
LABEL_105:
          if (*(char *)(v41 + 103) < 0)
            operator delete(*v45);
          *(_OWORD *)v45 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
          *(_QWORD *)(v41 + 96) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
          if (*(_BYTE *)(a5 + 40))
            goto LABEL_108;
          goto LABEL_109;
        }
      }
      else if (*(_BYTE *)(v41 + 104))
      {
        goto LABEL_105;
      }
      *(_OWORD *)v45 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
      *(_QWORD *)(v41 + 96) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
      *(_BYTE *)(v41 + 104) = 1;
      if (*(_BYTE *)(a5 + 40))
      {
LABEL_108:
        *(_DWORD *)(v41 + 112) = *(_DWORD *)(a5 + 36);
        *(_BYTE *)(v41 + 116) = 1;
      }
LABEL_109:
      if (*(_BYTE *)(a5 + 48))
      {
        v60 = *(_DWORD *)(a5 + 44);
        if (!*(_BYTE *)(v41 + 124))
          *(_BYTE *)(v41 + 124) = 1;
        *(_DWORD *)(v41 + 120) = v60;
      }
      memset(&v73, 0, sizeof(v73));
      webrtc::WriteFmtpParameters((_QWORD *)(a5 + 80), &v73);
      if (!v61)
      {
LABEL_118:
        if (*(_BYTE *)(v41 + 64))
          goto LABEL_119;
LABEL_128:
        if (*(char *)(a4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v41 + 40), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        }
        else
        {
          *v44 = *(_OWORD *)a4;
          *(_QWORD *)(v41 + 56) = *(_QWORD *)(a4 + 16);
        }
        *(_BYTE *)(v41 + 64) = 1;
LABEL_140:
        v70 = v41;
        webrtc::RTCStatsReport::AddStats(a6, &v70);
        v66 = v70;
        if (!v70)
          goto LABEL_142;
        goto LABEL_141;
      }
      v74.__r_.__value_.__r.__words[0] = v73.__r_.__value_.__l.__size_;
      v62 = v73.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v73.__r_.__value_.__r.__words[1] + 7);
      v63 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      memset(&v73, 0, sizeof(v73));
      if (*(_BYTE *)(v41 + 152))
      {
        if (*(char *)(v41 + 151) < 0)
          operator delete(*(void **)(v41 + 128));
        v64 = v74.__r_.__value_.__r.__words[0];
        *(_QWORD *)(v41 + 128) = v62;
        *(_QWORD *)(v41 + 136) = v64;
        *(_QWORD *)(v41 + 143) = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7);
        *(_BYTE *)(v41 + 151) = v63;
        goto LABEL_118;
      }
      v67 = v74.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v41 + 128) = v62;
      *(_QWORD *)(v41 + 136) = v67;
      *(_QWORD *)(v41 + 143) = *(std::string::size_type *)((char *)v74.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v41 + 151) = v63;
      *(_BYTE *)(v41 + 152) = 1;
      if (!*(_BYTE *)(v41 + 64))
        goto LABEL_128;
LABEL_119:
      if (v44 == (_OWORD *)a4)
        goto LABEL_140;
      v65 = *(_BYTE *)(a4 + 23);
      if (*(char *)(v41 + 63) < 0)
      {
        if (v65 >= 0)
          v68 = (const std::string::value_type *)a4;
        else
          v68 = *(const std::string::value_type **)a4;
        if (v65 >= 0)
          v69 = *(unsigned __int8 *)(a4 + 23);
        else
          v69 = *(_QWORD *)(a4 + 8);
        std::string::__assign_no_alias<false>((std::string *)(v41 + 40), v68, v69);
        v70 = v41;
        webrtc::RTCStatsReport::AddStats(a6, &v70);
        v66 = v70;
        if (!v70)
          goto LABEL_142;
        goto LABEL_141;
      }
      if ((*(_BYTE *)(a4 + 23) & 0x80) == 0)
      {
        *v44 = *(_OWORD *)a4;
        *(_QWORD *)(v41 + 56) = *(_QWORD *)(a4 + 16);
        v70 = v41;
        webrtc::RTCStatsReport::AddStats(a6, &v70);
        v66 = v70;
        if (!v70)
          goto LABEL_142;
LABEL_141:
        (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
        goto LABEL_142;
      }
      std::string::__assign_no_alias<true>((_QWORD *)(v41 + 40), *(char **)a4, *(_QWORD *)(a4 + 8));
      v70 = v41;
      webrtc::RTCStatsReport::AddStats(a6, &v70);
      v66 = v70;
      if (v70)
        goto LABEL_141;
LABEL_142:
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      return;
    case 2:
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = 4;
      if (&v74 <= (std::string *)"data" && (char *)v74.__r_.__value_.__r.__words + 4 > "data")
        goto LABEL_147;
      strcpy((char *)&v74, "data");
      v47 = 4;
      v48 = (std::string *)((char *)v74.__r_.__value_.__r.__words + 4);
      if ((char *)v74.__r_.__value_.__r.__words + 4 > "/")
        goto LABEL_78;
      goto LABEL_77;
    case 3:
      v47 = 0;
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = 0;
      v74.__r_.__value_.__s.__data_[0] = 0;
      v48 = &v74;
      if (&v74 <= (std::string *)"/")
        goto LABEL_77;
      goto LABEL_78;
    default:
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v42);
  }
}

size_t webrtc::`anonymous namespace'::RTCOutboundRtpStreamStatsIDFromSSRC(char *a1, _QWORD *a2, int a3, int a4)
{
  unint64_t v7;
  size_t v9;
  size_t v10;
  char *v11;
  _BYTE *v12;
  char v13;
  char *v14;
  size_t result;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *__s[3];
  char __src;
  _WORD v22[512];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  __s[0] = (char *)v22;
  __s[1] = (char *)1024;
  v22[0] = 79;
  if (*((char *)a2 + 23) < 0)
  {
    v7 = a2[1];
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_29;
    a2 = (_QWORD *)*a2;
    if (v7 && a2 == 0)
      goto LABEL_29;
  }
  else
  {
    v7 = *((unsigned __int8 *)a2 + 23);
  }
  if (v7 >= 0x3FE)
    v9 = 1022;
  else
    v9 = v7;
  v10 = v7 < 0x3FE;
  if (v7 >= 0x3FE)
    v11 = (char *)(v9 + 1);
  else
    v11 = (char *)(v9 + 2);
  memcpy((char *)v22 + 1, a2, v9);
  v12 = (char *)v22 + v9 + 1;
  *v12 = 0;
  if (a3)
    v13 = 86;
  else
    v13 = 65;
  __src = v13;
  memcpy(v12, &__src, v10);
  __s[2] = v11;
  *((_BYTE *)v22 + (_QWORD)v11) = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)__s, "%u", a4);
  v14 = __s[0];
  if (!__s[0])
  {
LABEL_29:
    __break(1u);
LABEL_30:
    abort();
  }
  result = strlen(__s[0]);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_30;
  v16 = result;
  if (result <= 0x16)
  {
    a1[23] = result;
    v17 = &a1[result];
    if (a1 > v14)
      goto LABEL_26;
    goto LABEL_25;
  }
  v18 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v18 = result | 7;
  v19 = v18 + 1;
  result = (size_t)operator new(v18 + 1);
  *((_QWORD *)a1 + 1) = v16;
  *((_QWORD *)a1 + 2) = v19 | 0x8000000000000000;
  *(_QWORD *)a1 = result;
  a1 = (char *)result;
  v17 = (char *)(result + v16);
  if (result <= (unint64_t)v14)
  {
LABEL_25:
    if (v17 <= v14)
      goto LABEL_26;
    goto LABEL_29;
  }
LABEL_26:
  if (v16)
    result = (size_t)memmove(a1, v14, v16);
  *v17 = 0;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::CreateReportFilteredBySelector(BOOL,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,webrtc::scoped_refptr<webrtc::RtpSenderInternal>,webrtc::scoped_refptr<webrtc::RtpReceiverInternal>)::$_1>(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1[1] + 200))(*(_QWORD *)a1[1]);
  v3 = *a1;
  *(_DWORD *)v3 = result;
  *(_BYTE *)(v3 + 4) = BYTE4(result);
  return result;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t rtc::RefCountedObject<webrtc::RTCStatsCollector>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 464);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::RTCStatsCollector>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 116;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::RTCStatsCollector>::~RefCountedObject(webrtc::RTCStatsCollector *a1)
{
  webrtc::RTCStatsCollector::~RTCStatsCollector(a1);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::RTCStatsCollector>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 464));
  return v1 == 1;
}

void std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy(uint64_t a1, char *a2)
{
  rtc::SSLCertificateStats *v4;
  rtc::SSLCertificateStats *v5;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (rtc::SSLCertificateStats *)*((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = 0;
    if (v4)
    {
      rtc::SSLCertificateStats::~SSLCertificateStats(v4);
      MEMORY[0x20BD0ADEC]();
    }
    v5 = (rtc::SSLCertificateStats *)*((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v5)
    {
      rtc::SSLCertificateStats::~SSLCertificateStats(v5);
      MEMORY[0x20BD0ADEC]();
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void absl::internal_any_invocable::RemoteInvoker<false,void,std::__bind_front_t<void (webrtc::RTCStatsCollector::*)(webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>),webrtc::scoped_refptr<webrtc::RTCStatsCollector>,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>> &&>(void (***a1)(_QWORD *, _QWORD, void **))
{
  _OWORD *v1;
  _QWORD *v2;
  void (*v3)(_QWORD *, _QWORD, void **);
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(_QWORD, _QWORD, _QWORD);
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  unsigned int v14;
  unsigned int v15;
  void *__p[2];
  void (*v17)(_QWORD, _QWORD, _QWORD);
  void (*v18)(_QWORD, _QWORD, _QWORD);

  v1 = *a1;
  v2 = *a1 + 4;
  v3 = **a1;
  v4 = (uint64_t)(*a1)[1];
  v5 = (_QWORD *)((char *)(*a1)[2] + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *, _QWORD, void **))(*v5 + v3);
  v6 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v1 + 3);
  *((_QWORD *)v1 + 3) = 0;
  *(_OWORD *)__p = v1[2];
  v17 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)v1 + 6);
  v18 = v6;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  v3(v5, &v18, __p);
  v7 = (char *)__p[0];
  if (__p[0])
  {
    v8 = (char *)__p[1];
    v9 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v10 = *((_QWORD *)v8 - 1);
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = *((_QWORD *)v8 - 2);
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v12 = *((_QWORD *)v8 - 3);
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = __p[0];
    }
    __p[1] = v7;
    operator delete(v9);
  }
  v13 = v18;
  if (v18)
  {
    do
    {
      v14 = __ldaxr((unsigned int *)v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, (unsigned int *)v13));
    if (!v15)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)v13 + 16, *((char **)v13 + 3));
      MEMORY[0x20BD0ADEC](v13, 0x1020C4043D65406);
    }
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<std::__bind_front_t<void (webrtc::RTCStatsCollector::*)(webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>),webrtc::scoped_refptr<webrtc::RTCStatsCollector>,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = v3[4];
      if (v4)
      {
        v5 = v3[5];
        v6 = (void *)v3[4];
        if (v5 != v4)
        {
          do
          {
            v7 = *(_QWORD *)(v5 - 8);
            if (v7)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            v8 = *(_QWORD *)(v5 - 16);
            if (v8)
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
            v9 = *(_QWORD *)(v5 - 24);
            if (v9)
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
            v5 -= 32;
          }
          while (v5 != v4);
          v6 = (void *)v3[4];
        }
        v3[5] = v4;
        operator delete(v6);
      }
      v10 = v3[3];
      if (v10)
      {
        do
        {
          v11 = __ldaxr((unsigned int *)v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, (unsigned int *)v10));
        if (!v12)
        {
          std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v10 + 16, *(char **)(v10 + 24));
          MEMORY[0x20BD0ADEC](v10, 0x1020C4043D65406);
        }
      }
      v13 = v3[2];
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RTCStatsCollector::GetStatsReportInternal(webrtc::RTCStatsCollector::RequestInfo)::$_1 &&>(rtc::Thread *a1)
{
  uint64_t v1;
  __int128 v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  char *v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  BOOL v21;
  std::string *v22;
  std::string::size_type size;
  std::string::value_type *v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  signed __int8 v30;
  __int128 v31;
  char *v32;
  __int128 v33;
  const std::string::value_type *v34;
  size_t v35;
  char v36;
  __int128 v37;
  int v38;
  const std::string::value_type *v39;
  size_t v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  const void **v47;
  uint64_t **v48;
  _OWORD *v49;
  std::string::size_type v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  rtc::Thread *v56;
  _BYTE *v57;
  char v58;
  pthread_mutex_t *v59;
  _QWORD *v60;
  std::string::size_type v61;
  uint64_t v62;
  _QWORD **v63;
  rtc::SSLCertificateStats *v64;
  std::string::size_type v65;
  rtc::SSLCertificateStats *v66;
  std::string::size_type v67;
  const void **v68;
  rtc::SSLCertificateStats *v69;
  rtc::SSLCertificateStats *v70;
  _QWORD *v71;
  uint64_t **v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  std::string::size_type v78;
  rtc::SSLCertChain *v79;
  std::string::size_type v80;
  const void **v81;
  rtc::SSLCertificateStats *v82;
  rtc::SSLCertificateStats *v83;
  rtc::SSLCertChain *v84;
  uint64_t v85;
  uint64_t **v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  std::string *v99;
  std::string *v100;
  rtc::SSLCertificateStats *v101;
  std::string::size_type v102;
  rtc::SSLCertificateStats *v103;
  std::string::size_type v104;
  const void **v105;
  rtc::SSLCertificateStats *v106;
  rtc::SSLCertificateStats *v107;
  uint64_t *v108;
  uint64_t **v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  uint64_t **v115;
  std::string::size_type v116;
  uint64_t v117;
  char v118;
  _BYTE *v119;
  char v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  std::string::size_type v124;
  void *v125[2];
  uint64_t v126;
  char v127;
  uint64_t **v128;
  uint64_t *v129;
  uint64_t v130;
  std::string v131;
  void *__p;
  uint64_t *v133;
  uint64_t v134;
  rtc::SSLCertChain *v135;
  uint64_t v136;
  uint64_t v137;
  std::string __str;
  __int128 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)a1;
  v123 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  v124 = **(_QWORD **)a1;
  LOBYTE(v125[0]) = 0;
  v127 = 0;
  if (*(_BYTE *)(v1 + 32))
  {
    v2 = *(_OWORD *)(v1 + 8);
    v126 = *(_QWORD *)(v1 + 24);
    *(_OWORD *)v125 = v2;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    v127 = 1;
  }
  v3 = rtc::Thread::Current(a1);
  v120 = v3[217];
  v121 = v3;
  v3[217] = 0;
  v4 = operator new();
  *(_DWORD *)v4 = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = v123;
  *(_QWORD *)(v4 + 16) = v4 + 24;
  do
    v5 = __ldxr((unsigned int *)v4);
  while (__stxr(v5 + 1, (unsigned int *)v4));
  v6 = *(_QWORD *)(v124 + 88);
  *(_QWORD *)(v124 + 88) = v4;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v6 + 16, *(char **)(v6 + 24));
      v4 = MEMORY[0x20BD0ADEC](v6, 0x1020C4043D65406);
    }
  }
  v122 = *(_QWORD *)(v124 + 88);
  v9 = rtc::Thread::Current((rtc::Thread *)v4);
  v10 = v9[217];
  v9[217] = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v124 + 8) + 552))(&__p);
  v11 = (uint64_t *)__p;
  v12 = v133;
  if (__p != v133)
  {
    v118 = v10;
    v119 = v9;
    v13 = (char *)__p + 31;
    while (1)
    {
      v14 = v13 - 31;
      v15 = snprintf((char *)&__str, 0x20uLL, "%d", *(_DWORD *)(v13 - 31));
      if (v15 < 0)
        goto LABEL_208;
      v16 = v15;
      if (v15 > 0x16)
      {
        v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v18 = v15 | 7;
        v19 = v18 + 1;
        v17 = (std::string *)operator new(v18 + 1);
        v131.__r_.__value_.__l.__size_ = v16;
        v131.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
        v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((_BYTE *)&v131.__r_.__value_.__s + 23) = v15;
        v17 = &v131;
      }
      v20 = (char *)v17 + v16;
      v21 = v17 > &__str || (std::string *)((char *)v17 + v16) <= &__str;
      if (!v21)
      {
        __break(1u);
LABEL_208:
        abort();
      }
      if ((_DWORD)v16)
        memcpy(v17, &__str, v16);
      *v20 = 0;
      v22 = std::string::insert(&v131, 0, "D");
      v24 = (std::string::value_type *)v22->__r_.__value_.__r.__words[0];
      size = v22->__r_.__value_.__l.__size_;
      LODWORD(__str.__r_.__value_.__l.__data_) = v22->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v22->__r_.__value_.__r.__words[2]
                                                                           + 3);
      v25 = SHIBYTE(v22->__r_.__value_.__r.__words[2]);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v26 = operator new();
      *(_QWORD *)v26 = &unk_24C0BC140;
      if (v25 < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v26 + 8), v24, size);
      }
      else
      {
        *(_QWORD *)(v26 + 8) = v24;
        *(_QWORD *)(v26 + 16) = size;
        *(_DWORD *)(v26 + 24) = __str.__r_.__value_.__l.__data_;
        *(_DWORD *)(v26 + 27) = *(_DWORD *)((char *)__str.__r_.__value_.__r.__words + 3);
        *(_BYTE *)(v26 + 31) = v25;
      }
      *(_QWORD *)(v26 + 32) = v123;
      *(_QWORD *)v26 = off_24C0BC500;
      *(_BYTE *)(v26 + 40) = 0;
      v27 = (char *)(v26 + 40);
      *(_BYTE *)(v26 + 64) = 0;
      *(_BYTE *)(v26 + 72) = 0;
      v28 = (char *)(v26 + 72);
      *(_BYTE *)(v26 + 96) = 0;
      *(_BYTE *)(v26 + 104) = 0;
      *(_BYTE *)(v26 + 108) = 0;
      *(_BYTE *)(v26 + 112) = 0;
      *(_BYTE *)(v26 + 136) = 0;
      *(_BYTE *)(v26 + 144) = 0;
      *(_BYTE *)(v26 + 148) = 0;
      *(_BYTE *)(v26 + 152) = 0;
      *(_BYTE *)(v26 + 160) = 0;
      *(_BYTE *)(v26 + 168) = 0;
      *(_BYTE *)(v26 + 172) = 0;
      *(_BYTE *)(v26 + 176) = 0;
      *(_BYTE *)(v26 + 184) = 0;
      if (v25 < 0)
      {
        operator delete(v24);
        if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_30:
          v29 = v13 - 23;
          if (!*(_BYTE *)(v26 + 64))
            goto LABEL_38;
          goto LABEL_31;
        }
      }
      else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_30;
      }
      operator delete(v131.__r_.__value_.__l.__data_);
      v29 = v13 - 23;
      if (!*(_BYTE *)(v26 + 64))
      {
LABEL_38:
        if (*v13 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v26 + 40), *(const std::string::value_type **)(v13 - 23), *(_QWORD *)(v13 - 15));
        }
        else
        {
          v33 = *(_OWORD *)v29;
          *(_QWORD *)(v26 + 56) = *((_QWORD *)v29 + 2);
          *(_OWORD *)v27 = v33;
        }
        *(_BYTE *)(v26 + 64) = 1;
LABEL_50:
        v32 = v13 + 1;
        if (!*(_BYTE *)(v26 + 96))
          goto LABEL_65;
        goto LABEL_51;
      }
LABEL_31:
      if (v29 == v27)
        goto LABEL_50;
      v30 = *v13;
      if (*(char *)(v26 + 63) < 0)
      {
        if (v30 >= 0)
          v34 = v29;
        else
          v34 = *(const std::string::value_type **)(v13 - 23);
        if (v30 >= 0)
          v35 = *v13;
        else
          v35 = *(_QWORD *)(v13 - 15);
        std::string::__assign_no_alias<false>((std::string *)(v26 + 40), v34, v35);
        v32 = v13 + 1;
        if (!*(_BYTE *)(v26 + 96))
        {
LABEL_65:
          if (v13[24] < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v26 + 72), *(const std::string::value_type **)(v13 + 1), *(_QWORD *)(v13 + 9));
          }
          else
          {
            v41 = *(_OWORD *)v32;
            *(_QWORD *)(v26 + 88) = *((_QWORD *)v32 + 2);
            *(_OWORD *)v28 = v41;
          }
          *(_BYTE *)(v26 + 96) = 1;
          goto LABEL_69;
        }
      }
      else if (*v13 < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v26 + 40), *(char **)(v13 - 23), *(_QWORD *)(v13 - 15));
        v32 = v13 + 1;
        if (!*(_BYTE *)(v26 + 96))
          goto LABEL_65;
      }
      else
      {
        v31 = *(_OWORD *)v29;
        *(_QWORD *)(v26 + 56) = *((_QWORD *)v29 + 2);
        *(_OWORD *)v27 = v31;
        v32 = v13 + 1;
        if (!*(_BYTE *)(v26 + 96))
          goto LABEL_65;
      }
LABEL_51:
      if (v32 != v28)
      {
        v36 = v13[24];
        if (*(char *)(v26 + 95) < 0)
        {
          if (v36 >= 0)
            v39 = v32;
          else
            v39 = *(const std::string::value_type **)(v13 + 1);
          if (v36 >= 0)
            v40 = v13[24];
          else
            v40 = *(_QWORD *)(v13 + 9);
          std::string::__assign_no_alias<false>((std::string *)(v26 + 72), v39, v40);
          v38 = *(_DWORD *)(v13 - 27);
          if (v38 < 0)
            goto LABEL_71;
        }
        else if (v13[24] < 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)(v26 + 72), *(char **)(v13 + 1), *(_QWORD *)(v13 + 9));
          v38 = *(_DWORD *)(v13 - 27);
          if (v38 < 0)
            goto LABEL_71;
        }
        else
        {
          v37 = *(_OWORD *)v32;
          *(_QWORD *)(v26 + 88) = *((_QWORD *)v32 + 2);
          *(_OWORD *)v28 = v37;
          v38 = *(_DWORD *)(v13 - 27);
          if (v38 < 0)
            goto LABEL_71;
        }
LABEL_70:
        *(_DWORD *)(v26 + 104) = v38;
        *(_BYTE *)(v26 + 108) = 1;
        goto LABEL_71;
      }
LABEL_69:
      v38 = *(_DWORD *)(v13 - 27);
      if ((v38 & 0x80000000) == 0)
        goto LABEL_70;
LABEL_71:
      v42 = *(int *)(v13 + 25);
      if (v42 > 3)
        v43 = 0;
      else
        v43 = off_24C0BC3D0[v42];
      std::optional<std::string>::operator=[abi:sn180100]<char const*,void>((std::string *)(v26 + 112), v43);
      *(_DWORD *)(v26 + 144) = *(_DWORD *)(v13 + 29);
      *(_BYTE *)(v26 + 148) = 1;
      *(_QWORD *)(v26 + 152) = *(_QWORD *)(v13 + 41);
      *(_BYTE *)(v26 + 160) = 1;
      *(_DWORD *)(v26 + 168) = *(_DWORD *)(v13 + 33);
      *(_BYTE *)(v26 + 172) = 1;
      *(_QWORD *)(v26 + 176) = *(_QWORD *)(v13 + 49);
      *(_BYTE *)(v26 + 184) = 1;
      v128 = (uint64_t **)v26;
      webrtc::RTCStatsReport::AddStats(v122, (uint64_t *)&v128);
      v44 = (uint64_t)v128;
      v128 = 0;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      v13 += 88;
      if (v14 + 88 == (char *)v12)
      {
        v11 = (uint64_t *)__p;
        v9 = v119;
        v10 = v118;
        break;
      }
    }
  }
  if (v11)
  {
    v45 = v133;
    v46 = v11;
    if (v133 == v11)
    {
LABEL_89:
      v133 = v11;
      operator delete(v46);
      goto LABEL_90;
    }
    while (1)
    {
      if (*((char *)v45 - 33) < 0)
      {
        operator delete((void *)*(v45 - 7));
        if (*((char *)v45 - 57) < 0)
LABEL_87:
          operator delete((void *)*(v45 - 10));
      }
      else if (*((char *)v45 - 57) < 0)
      {
        goto LABEL_87;
      }
      v45 -= 11;
      if (v45 == v11)
      {
        v46 = __p;
        goto LABEL_89;
      }
    }
  }
LABEL_90:
  v9[217] = v10;
  v133 = 0;
  v134 = 0;
  __p = &v133;
  if (v127)
  {
    v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&__p, &__str, (const void **)v125);
    if (!*v47)
    {
      v48 = (uint64_t **)v47;
      v49 = operator new(0x38uLL);
      v49[2] = *(_OWORD *)v125;
      *((_QWORD *)v49 + 6) = v126;
      v125[0] = 0;
      v125[1] = 0;
      v126 = 0;
      v50 = __str.__r_.__value_.__r.__words[0];
      *(_QWORD *)v49 = 0;
      *((_QWORD *)v49 + 1) = 0;
      *((_QWORD *)v49 + 2) = v50;
      *v48 = (uint64_t *)v49;
      if (*(_QWORD *)__p)
      {
        __p = *(void **)__p;
        v51 = *v48;
      }
      else
      {
        v51 = (uint64_t *)v49;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v133, v51);
      ++v134;
    }
  }
  v52 = *(_QWORD *)(v124 + 216);
  v53 = *(_QWORD *)(v124 + 224);
  if (v52 != v53)
  {
    v54 = v52 + 48;
    do
    {
      if (*(_BYTE *)(v54 + 24))
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&__p, (const void **)v54, v54);
      v55 = v54 + 504;
      v54 += 552;
    }
    while (v55 != v53);
  }
  v56 = (rtc::Thread *)(*(_QWORD *(**)(std::string *__return_ptr, _QWORD, void **))(**(_QWORD **)(v124 + 8)
                                                                                             + 576))(&v131, *(_QWORD *)(v124 + 8), &__p);
  v57 = rtc::Thread::Current(v56);
  v58 = v57[217];
  v57[217] = 0;
  v129 = 0;
  v130 = 0;
  v128 = &v129;
  v59 = (pthread_mutex_t *)(v124 + 240);
  pthread_mutex_lock((pthread_mutex_t *)(v124 + 240));
  v60 = *(_QWORD **)(v124 + 304);
  if (v60 != (_QWORD *)(v124 + 312))
  {
    do
    {
      v64 = (rtc::SSLCertificateStats *)v60[7];
      if (v64)
      {
        rtc::SSLCertificateStats::Copy(v64, (std::string **)&__str);
        v65 = __str.__r_.__value_.__r.__words[0];
        v66 = (rtc::SSLCertificateStats *)v60[8];
        if (v66)
          goto LABEL_109;
      }
      else
      {
        v65 = 0;
        v66 = (rtc::SSLCertificateStats *)v60[8];
        if (v66)
        {
LABEL_109:
          rtc::SSLCertificateStats::Copy(v66, (std::string **)&__str);
          v67 = __str.__r_.__value_.__r.__words[0];
          if ((*((char *)v60 + 55) & 0x80000000) == 0)
            goto LABEL_110;
          goto LABEL_113;
        }
      }
      v67 = 0;
      if ((*((char *)v60 + 55) & 0x80000000) == 0)
      {
LABEL_110:
        __str = *(std::string *)(v60 + 4);
        goto LABEL_114;
      }
LABEL_113:
      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v60[4], v60[5]);
LABEL_114:
      *(_QWORD *)&v139 = v65;
      *((_QWORD *)&v139 + 1) = v67;
      v68 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v128, &v137, (const void **)&__str.__r_.__value_.__l.__data_);
      if (*v68)
      {
        v69 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
        *((_QWORD *)&v139 + 1) = 0;
        if (!v69)
          goto LABEL_117;
LABEL_116:
        rtc::SSLCertificateStats::~SSLCertificateStats(v69);
        MEMORY[0x20BD0ADEC]();
        goto LABEL_117;
      }
      v72 = (uint64_t **)v68;
      v73 = (char *)operator new(0x48uLL);
      *(std::string *)(v73 + 32) = __str;
      memset(&__str, 0, sizeof(__str));
      v74 = v139;
      v139 = 0u;
      *(_OWORD *)(v73 + 56) = v74;
      v75 = v137;
      *(_OWORD *)v73 = 0u;
      *((_QWORD *)v73 + 2) = v75;
      *v72 = (uint64_t *)v73;
      if (*v128)
      {
        v128 = (uint64_t **)*v128;
        v76 = *v72;
      }
      else
      {
        v76 = (uint64_t *)v73;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v129, v76);
      ++v130;
      v69 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
      *((_QWORD *)&v139 + 1) = 0;
      if (v69)
        goto LABEL_116;
LABEL_117:
      v70 = (rtc::SSLCertificateStats *)v139;
      *(_QWORD *)&v139 = 0;
      if (v70)
      {
        rtc::SSLCertificateStats::~SSLCertificateStats(v70);
        MEMORY[0x20BD0ADEC]();
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        v71 = (_QWORD *)v60[1];
        if (v71)
        {
          do
          {
LABEL_125:
            v77 = v71;
            v71 = (_QWORD *)*v71;
          }
          while (v71);
          goto LABEL_106;
        }
      }
      else
      {
        v71 = (_QWORD *)v60[1];
        if (v71)
          goto LABEL_125;
      }
      do
      {
        v77 = (_QWORD *)v60[2];
        v21 = *v77 == (_QWORD)v60;
        v60 = v77;
      }
      while (!v21);
LABEL_106:
      v60 = v77;
    }
    while (v77 != (_QWORD *)(v124 + 312));
  }
  pthread_mutex_unlock(v59);
  if (v130)
    goto LABEL_204;
  v61 = v131.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v131.__r_.__value_.__l.__data_ != &v131.__r_.__value_.__r.__words[1])
  {
    do
    {
      v136 = 0;
      v78 = 0;
      if ((*(unsigned int (**)(_QWORD, std::string::size_type, uint64_t *))(**(_QWORD **)(v124 + 8) + 600))(*(_QWORD *)(v124 + 8), v61 + 32, &v136))
      {
        v79 = (rtc::SSLCertChain *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v136 + 8) + 24))(*(_QWORD *)(v136 + 8));
        rtc::SSLCertChain::GetStats(v79, (uint64_t *)&__str);
        v78 = __str.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(rtc::SSLCertChain **__return_ptr, _QWORD, std::string::size_type))(**(_QWORD **)(v124 + 8)
                                                                                               + 608))(&v135, *(_QWORD *)(v124 + 8), v61 + 32);
      if (v135)
      {
        rtc::SSLCertChain::GetStats(v135, (uint64_t *)&__str);
        v80 = __str.__r_.__value_.__r.__words[0];
        if ((*(char *)(v61 + 55) & 0x80000000) == 0)
          goto LABEL_138;
      }
      else
      {
        v80 = 0;
        if ((*(char *)(v61 + 55) & 0x80000000) == 0)
        {
LABEL_138:
          __str = *(std::string *)(v61 + 32);
          goto LABEL_141;
        }
      }
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v61 + 32), *(_QWORD *)(v61 + 40));
LABEL_141:
      *(_QWORD *)&v139 = v78;
      *((_QWORD *)&v139 + 1) = v80;
      v81 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v128, &v137, (const void **)&__str.__r_.__value_.__l.__data_);
      if (*v81)
      {
        v82 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
        *((_QWORD *)&v139 + 1) = 0;
        if (!v82)
          goto LABEL_144;
LABEL_143:
        rtc::SSLCertificateStats::~SSLCertificateStats(v82);
        MEMORY[0x20BD0ADEC]();
        goto LABEL_144;
      }
      v86 = (uint64_t **)v81;
      v87 = (char *)operator new(0x48uLL);
      *(std::string *)(v87 + 32) = __str;
      memset(&__str, 0, sizeof(__str));
      v88 = v139;
      v139 = 0u;
      *(_OWORD *)(v87 + 56) = v88;
      v89 = v137;
      *(_OWORD *)v87 = 0u;
      *((_QWORD *)v87 + 2) = v89;
      *v86 = (uint64_t *)v87;
      if (*v128)
      {
        v128 = (uint64_t **)*v128;
        v90 = *v86;
      }
      else
      {
        v90 = (uint64_t *)v87;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v129, v90);
      ++v130;
      v82 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
      *((_QWORD *)&v139 + 1) = 0;
      if (v82)
        goto LABEL_143;
LABEL_144:
      v83 = (rtc::SSLCertificateStats *)v139;
      *(_QWORD *)&v139 = 0;
      if (v83)
      {
        rtc::SSLCertificateStats::~SSLCertificateStats(v83);
        MEMORY[0x20BD0ADEC]();
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        v84 = v135;
        v135 = 0;
        if (v84)
        {
LABEL_153:
          v91 = *(_QWORD **)v84;
          if (*(_QWORD *)v84)
          {
            v92 = (_QWORD *)*((_QWORD *)v84 + 1);
            v93 = *(_QWORD **)v84;
            if (v92 != v91)
            {
              do
              {
                v95 = *--v92;
                v94 = v95;
                *v92 = 0;
                if (v95)
                  (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
              }
              while (v92 != v91);
              v93 = *(_QWORD **)v84;
            }
            *((_QWORD *)v84 + 1) = v91;
            operator delete(v93);
          }
          MEMORY[0x20BD0ADEC](v84, 0x20C40960023A9);
          v85 = v136;
          if (!v136)
            goto LABEL_167;
          do
          {
LABEL_162:
            v96 = __ldaxr((unsigned int *)v85);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, (unsigned int *)v85));
          if (!v97)
          {
            v98 = *(_QWORD *)(v85 + 8);
            *(_QWORD *)(v85 + 8) = 0;
            if (v98)
              (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
            MEMORY[0x20BD0ADEC](v85, 0x1020C40D5A9D86FLL);
          }
          goto LABEL_167;
        }
      }
      else
      {
        v84 = v135;
        v135 = 0;
        if (v84)
          goto LABEL_153;
      }
      v85 = v136;
      if (v136)
        goto LABEL_162;
LABEL_167:
      v99 = *(std::string **)(v61 + 8);
      if (v99)
      {
        do
        {
          v100 = v99;
          v99 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        while (v99);
      }
      else
      {
        do
        {
          v100 = *(std::string **)(v61 + 16);
          v21 = v100->__r_.__value_.__r.__words[0] == v61;
          v61 = (std::string::size_type)v100;
        }
        while (!v21);
      }
      v61 = (std::string::size_type)v100;
    }
    while (v100 != (std::string *)&v131.__r_.__value_.__r.__words[1]);
  }
  pthread_mutex_lock(v59);
  v62 = (uint64_t)v128;
  if (v128 != &v129)
  {
    v63 = (_QWORD **)(v124 + 304);
    do
    {
      v101 = *(rtc::SSLCertificateStats **)(v62 + 56);
      if (v101)
      {
        rtc::SSLCertificateStats::Copy(v101, (std::string **)&__str);
        v102 = __str.__r_.__value_.__r.__words[0];
        v103 = *(rtc::SSLCertificateStats **)(v62 + 64);
        if (v103)
          goto LABEL_179;
      }
      else
      {
        v102 = 0;
        v103 = *(rtc::SSLCertificateStats **)(v62 + 64);
        if (v103)
        {
LABEL_179:
          rtc::SSLCertificateStats::Copy(v103, (std::string **)&__str);
          v104 = __str.__r_.__value_.__r.__words[0];
          if ((*(char *)(v62 + 55) & 0x80000000) == 0)
            goto LABEL_180;
          goto LABEL_183;
        }
      }
      v104 = 0;
      if ((*(char *)(v62 + 55) & 0x80000000) == 0)
      {
LABEL_180:
        __str = *(std::string *)(v62 + 32);
        goto LABEL_184;
      }
LABEL_183:
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v62 + 32), *(_QWORD *)(v62 + 40));
LABEL_184:
      *(_QWORD *)&v139 = v102;
      *((_QWORD *)&v139 + 1) = v104;
      v105 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v63, &v137, (const void **)&__str.__r_.__value_.__l.__data_);
      if (*v105)
      {
        v106 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
        *((_QWORD *)&v139 + 1) = 0;
        if (!v106)
          goto LABEL_187;
LABEL_186:
        rtc::SSLCertificateStats::~SSLCertificateStats(v106);
        MEMORY[0x20BD0ADEC]();
        goto LABEL_187;
      }
      v109 = (uint64_t **)v105;
      v110 = (char *)operator new(0x48uLL);
      *(std::string *)(v110 + 32) = __str;
      memset(&__str, 0, sizeof(__str));
      v111 = v139;
      v139 = 0u;
      *(_OWORD *)(v110 + 56) = v111;
      v112 = v137;
      *(_OWORD *)v110 = 0u;
      *((_QWORD *)v110 + 2) = v112;
      *v109 = (uint64_t *)v110;
      v113 = (_QWORD *)**v63;
      if (v113)
      {
        *v63 = v113;
        v114 = *v109;
      }
      else
      {
        v114 = (uint64_t *)v110;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v124 + 312), v114);
      ++*(_QWORD *)(v124 + 320);
      v106 = (rtc::SSLCertificateStats *)*((_QWORD *)&v139 + 1);
      *((_QWORD *)&v139 + 1) = 0;
      if (v106)
        goto LABEL_186;
LABEL_187:
      v107 = (rtc::SSLCertificateStats *)v139;
      *(_QWORD *)&v139 = 0;
      if (v107)
      {
        rtc::SSLCertificateStats::~SSLCertificateStats(v107);
        MEMORY[0x20BD0ADEC]();
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        v108 = *(uint64_t **)(v62 + 8);
        if (v108)
        {
          do
          {
LABEL_195:
            v115 = (uint64_t **)v108;
            v108 = (uint64_t *)*v108;
          }
          while (v108);
          goto LABEL_176;
        }
      }
      else
      {
        v108 = *(uint64_t **)(v62 + 8);
        if (v108)
          goto LABEL_195;
      }
      do
      {
        v115 = *(uint64_t ***)(v62 + 16);
        v21 = *v115 == (uint64_t *)v62;
        v62 = (uint64_t)v115;
      }
      while (!v21);
LABEL_176:
      v62 = (uint64_t)v115;
    }
    while (v115 != &v129);
  }
  pthread_mutex_unlock(v59);
LABEL_204:
  v57[217] = v58;
  v116 = v124;
  (*(void (**)(std::string::size_type, uint64_t, std::string *, uint64_t ***, _QWORD))(*(_QWORD *)v124 + 40))(v124, v123, &v131, &v128, *(_QWORD *)(v124 + 88));
  pthread_mutex_lock((pthread_mutex_t *)(v124 + 96));
  *(_BYTE *)(v124 + 209) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v124 + 160));
  pthread_mutex_unlock((pthread_mutex_t *)(v124 + 96));
  (**(void (***)(std::string::size_type))v116)(v116);
  v117 = *(_QWORD *)(v124 + 16);
  (**(void (***)(std::string::size_type))v116)(v116);
  __str.__r_.__value_.__r.__words[0] = v124;
  __str.__r_.__value_.__r.__words[2] = (std::string::size_type)absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RTCStatsCollector::ProducePartialResultsOnNetworkThread(webrtc::Timestamp,std::optional<std::string>)::$_1>;
  *(_QWORD *)&v139 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RTCStatsCollector::ProducePartialResultsOnNetworkThread(webrtc::Timestamp,std::optional<std::string>)::$_1 &&>;
  (*(void (**)(uint64_t, std::string *, uint64_t *, uint64_t *))(*(_QWORD *)v117 + 8))(v117, &__str, &v137, &v136);
  ((void (*)(uint64_t, std::string *, std::string *))__str.__r_.__value_.__r.__words[2])(1, &__str, &__str);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v116 + 8))(v116);
  std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy((uint64_t)&v128, (char *)v129);
  std::__tree<std::__value_type<std::string,cricket::TransportStats>,std::__map_value_compare<std::string,std::__value_type<std::string,cricket::TransportStats>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,cricket::TransportStats>>>::destroy((uint64_t)&v131, v131.__r_.__value_.__l.__size_);
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__p, (char *)v133);
  v121[217] = v120;
  if (v127)
  {
    if (SHIBYTE(v126) < 0)
      operator delete(v125[0]);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RTCStatsCollector::GetStatsReportInternal(webrtc::RTCStatsCollector::RequestInfo)::$_1>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*((_BYTE *)v3 + 32) && *((char *)v3 + 31) < 0)
        operator delete((void *)v3[1]);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RTCStatsCollector::ProducePartialResultsOnNetworkThread(webrtc::Timestamp,std::optional<std::string>)::$_1 &&>(webrtc::RTCStatsCollector **a1)
{
  webrtc::RTCStatsCollector::MergeNetworkReport_s(*a1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RTCStatsCollector::ProducePartialResultsOnNetworkThread(webrtc::Timestamp,std::optional<std::string>)::$_1>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__tree<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::__map_value_compare<cricket::VoiceMediaSendChannelInterface *,std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::less<cricket::VoiceMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>>>::destroy(char **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::__map_value_compare<cricket::VoiceMediaSendChannelInterface *,std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::less<cricket::VoiceMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::__map_value_compare<cricket::VoiceMediaSendChannelInterface *,std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::less<cricket::VoiceMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>>>::destroy(a1[1]);
    cricket::VoiceMediaSendInfo::~VoiceMediaSendInfo(a1 + 5);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::__map_value_compare<cricket::VideoMediaSendChannelInterface *,std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::less<cricket::VideoMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>>>::destroy(char **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::__map_value_compare<cricket::VideoMediaSendChannelInterface *,std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::less<cricket::VideoMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::__map_value_compare<cricket::VideoMediaSendChannelInterface *,std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::less<cricket::VideoMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>>>::destroy(a1[1]);
    cricket::VideoMediaSendInfo::~VideoMediaSendInfo(a1 + 5);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::__map_value_compare<cricket::VoiceMediaReceiveChannelInterface *,std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::less<cricket::VoiceMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>>>::destroy(char **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::__map_value_compare<cricket::VoiceMediaReceiveChannelInterface *,std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::less<cricket::VoiceMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::__map_value_compare<cricket::VoiceMediaReceiveChannelInterface *,std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::less<cricket::VoiceMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>>>::destroy(a1[1]);
    cricket::VoiceMediaReceiveInfo::~VoiceMediaReceiveInfo(a1 + 5);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::__map_value_compare<cricket::VideoMediaReceiveChannelInterface *,std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::less<cricket::VideoMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>>>::destroy(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (a1)
  {
    std::__tree<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::__map_value_compare<cricket::VideoMediaReceiveChannelInterface *,std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::less<cricket::VideoMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::__map_value_compare<cricket::VideoMediaReceiveChannelInterface *,std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::less<cricket::VideoMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>>>::destroy(a1[1]);
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)(a1 + 8), (char *)a1[9]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
          cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)(v3 - 728));
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::PrepareTransceiverStatsInfosAndCallStats_s_w_n(void)::$_1>(rtc::Thread *a1)
{
  _BYTE *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::string *v48;
  const std::string::value_type **v49;
  __int128 v50;
  char *v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int64_t v55;
  char *v56;
  char *v57;
  _BYTE *v58;
  _BYTE *v59;
  int64_t v60;
  char *v61;
  char *v62;
  char *v63;
  _BYTE *v64;
  _BYTE *v65;
  int64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  std::string *v100;
  const std::string::value_type **v101;
  __int128 v102;
  char *v103;
  _BYTE *v104;
  _BYTE *v105;
  int64_t v106;
  char *v107;
  char *v108;
  _BYTE *v109;
  _BYTE *v110;
  int64_t v111;
  char *v112;
  char *v113;
  void **v114;
  _QWORD *v115;
  void ***v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  BOOL v121;
  int v122;
  _QWORD *v123;
  _QWORD *v124;
  int v125;
  _DWORD *v126;
  void **v127;
  _BYTE *v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  _BYTE *v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t v142;
  void **v143;
  _QWORD *v144;
  void ***v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  _QWORD *v151;
  _QWORD *v152;
  int v153;
  _DWORD *v154;
  void **v155;
  _BYTE *v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _BYTE *v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  _DWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  unint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  void **v215;
  char *v216;
  char *v217;
  void *v218;
  void *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  std::string *v232;
  char v233;
  __int128 v234;
  __int128 v235;
  const std::string::value_type *v236;
  size_t v237;
  uint64_t v238;
  unint64_t v239;
  __int128 *v240;
  size_t v241;
  __int128 *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  __int128 *v246;
  char *v248;
  __int128 v249;
  uint64_t v250;
  uint64_t **v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t v254;
  uint64_t **v255;
  unint64_t v256;
  uint64_t *v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t **v260;
  uint64_t *v261;
  uint64_t **v262;
  uint64_t v263;
  uint64_t **v264;
  unint64_t v265;
  uint64_t *v266;
  __int128 *v267;
  int64_t v268;
  unint64_t v269;
  char *v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  std::string *v277;
  __int128 v278;
  _BYTE *v279;
  _BYTE *v280;
  int64_t v281;
  char *v282;
  char *v283;
  _BYTE *v284;
  _BYTE *v285;
  int64_t v286;
  _BYTE *v287;
  _BYTE *v288;
  char *v289;
  char *v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  uint64_t v297;
  uint64_t v298;
  int64_t v299;
  unint64_t v300;
  char *v301;
  uint64_t v302;
  char *v303;
  char *v304;
  std::string *v305;
  __int128 *v306;
  __int128 v307;
  char *v308;
  _BYTE *v309;
  _BYTE *v310;
  int64_t v311;
  std::string *v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t **v316;
  uint64_t *v317;
  uint64_t **v318;
  uint64_t v319;
  uint64_t **v320;
  unint64_t v321;
  uint64_t *v322;
  int64_t v323;
  unint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  char *v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  uint64_t v338;
  char *v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  std::string *v343;
  const std::string::value_type **v344;
  __int128 v345;
  char *v346;
  uint64_t v347;
  _BYTE *v348;
  _BYTE *v349;
  int64_t v350;
  char *v351;
  char *v352;
  _BYTE *v353;
  _BYTE *v354;
  int64_t v355;
  char *v356;
  char *v357;
  char *v358;
  _BYTE *v359;
  _BYTE *v360;
  int64_t v361;
  char *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t **v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t *v368;
  uint64_t *v369;
  unint64_t v370;
  _QWORD *v371;
  int64_t v372;
  unint64_t v373;
  char *v374;
  uint64_t v375;
  char *v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  char *v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;
  char *v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  __int128 v399;
  __int128 v400;
  std::string *v401;
  const std::string::value_type **v402;
  __int128 v403;
  char *v404;
  _BYTE *v405;
  _BYTE *v406;
  int64_t v407;
  char *v408;
  char *v409;
  _BYTE *v410;
  _BYTE *v411;
  int64_t v412;
  char *v413;
  char *v414;
  char *v415;
  uint64_t *v416;
  uint64_t *v417;
  unint64_t v418;
  unint64_t v419;
  void *v420;
  void **v421;
  void **v422;
  void *v423;
  char v424;
  _BYTE *v425;
  rtc::Thread *v426;
  int v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  _QWORD *v431;
  _QWORD *v432;
  char *v433;
  uint64_t v434;
  char *v435;
  char *v436;
  _QWORD *v437;
  uint64_t **v438;
  uint64_t *v439;
  unint64_t v440;
  uint64_t **v441;
  uint64_t **v442;
  uint64_t **v443;
  char *v444;
  uint64_t **v445;
  uint64_t v446;
  _QWORD *v447;
  unint64_t v448;
  uint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  uint64_t v455;
  void *__p[2];
  __int128 v457;
  __int128 v458;
  _QWORD *v459;
  _QWORD v460[2];
  __int128 v461;
  unint64_t v462;
  uint64_t v463;
  int *v464;
  char *v465;
  uint64_t v466;
  int v467;

  v431 = (_QWORD *)*((_QWORD *)a1 + 1);
  v2 = rtc::Thread::Current(a1);
  v424 = v2[217];
  v425 = v2;
  v2[217] = 0;
  v426 = a1;
  v3 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v428 = v3[1];
  if (v4 == v428)
    goto LABEL_416;
  while (2)
  {
    v432 = *(_QWORD **)(*(_QWORD *)v4 + 16);
    v5 = (*(uint64_t (**)(void))(*v432 + 32))();
    v6 = v5;
    v8 = v431[28];
    v7 = v431[29];
    v430 = v4;
    if (v8 < v7)
    {
      if (!v8)
        goto LABEL_417;
      bzero((void *)v8, 0x228uLL);
      v9 = v431;
      *(_QWORD *)(v8 + 328) = v8 + 336;
      *(_QWORD *)(v8 + 352) = v8 + 360;
      *(_QWORD *)(v8 + 360) = 0;
      *(_QWORD *)(v8 + 384) = 0;
      *(_QWORD *)(v8 + 392) = 0;
      *(_QWORD *)(v8 + 368) = 0;
      *(_QWORD *)(v8 + 376) = v8 + 384;
      *(_QWORD *)(v8 + 400) = v8 + 408;
      *(_QWORD *)(v8 + 408) = 0;
      *(_QWORD *)(v8 + 432) = 0;
      *(_QWORD *)(v8 + 440) = 0;
      *(_QWORD *)(v8 + 416) = 0;
      *(_QWORD *)(v8 + 424) = v8 + 432;
      *(_QWORD *)(v8 + 448) = v8 + 456;
      *(_QWORD *)(v8 + 456) = 0;
      *(_QWORD *)(v8 + 480) = 0;
      *(_QWORD *)(v8 + 488) = 0;
      *(_QWORD *)(v8 + 464) = 0;
      *(_QWORD *)(v8 + 472) = v8 + 480;
      *(_QWORD *)(v8 + 504) = 0;
      *(_QWORD *)(v8 + 512) = 0;
      *(_QWORD *)(v8 + 496) = v8 + 504;
      *(_QWORD *)(v8 + 528) = 0;
      *(_QWORD *)(v8 + 536) = 0;
      *(_QWORD *)(v8 + 520) = v8 + 528;
      v10 = (char *)(v8 + 552);
      *(_BYTE *)(v8 + 548) = 0;
      goto LABEL_259;
    }
    v427 = v5;
    v11 = v431[27];
    v12 = 0xF128CFC4A33F128DLL * ((uint64_t)(v8 - v11) >> 3) + 1;
    if (v12 > 0x76B981DAE6076BLL)
      goto LABEL_418;
    v13 = 0xF128CFC4A33F128DLL * ((uint64_t)(v7 - v11) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3B5CC0ED7303B5)
      v14 = 0x76B981DAE6076BLL;
    else
      v14 = v12;
    if (!v14)
      goto LABEL_417;
    if (v14 > 0x76B981DAE6076BLL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v15 = 552 * v14;
    v16 = (char *)operator new(552 * v14);
    v17 = &v16[v15];
    v18 = &v16[8 * ((uint64_t)(v8 - v11) >> 3)];
    bzero(v18, 0x228uLL);
    *((_QWORD *)v18 + 41) = v18 + 336;
    *((_QWORD *)v18 + 44) = v18 + 360;
    *((_QWORD *)v18 + 45) = 0;
    *((_QWORD *)v18 + 48) = 0;
    *((_QWORD *)v18 + 49) = 0;
    *((_QWORD *)v18 + 46) = 0;
    *((_QWORD *)v18 + 47) = v18 + 384;
    *((_QWORD *)v18 + 50) = v18 + 408;
    *((_QWORD *)v18 + 51) = 0;
    *((_QWORD *)v18 + 54) = 0;
    *((_QWORD *)v18 + 55) = 0;
    *((_QWORD *)v18 + 52) = 0;
    *((_QWORD *)v18 + 53) = v18 + 432;
    *((_QWORD *)v18 + 56) = v18 + 456;
    *((_QWORD *)v18 + 57) = 0;
    *((_QWORD *)v18 + 60) = 0;
    *((_QWORD *)v18 + 61) = 0;
    *((_QWORD *)v18 + 58) = 0;
    *((_QWORD *)v18 + 59) = v18 + 480;
    *((_QWORD *)v18 + 63) = 0;
    *((_QWORD *)v18 + 64) = 0;
    *((_QWORD *)v18 + 62) = v18 + 504;
    *((_QWORD *)v18 + 66) = 0;
    *((_QWORD *)v18 + 67) = 0;
    *((_QWORD *)v18 + 65) = v18 + 528;
    v18[544] = 0;
    v10 = v18 + 552;
    v18[548] = 0;
    v429 = v18 + 552;
    if (v8 == v11)
    {
      v9 = v431;
      v431[27] = v18;
      v431[28] = v10;
      v431[29] = v17;
      v6 = v427;
      if (!v8)
        goto LABEL_259;
      goto LABEL_258;
    }
    v433 = v17;
    v434 = v11;
    do
    {
      while (1)
      {
        v19 = v18 - 552;
        v20 = v8 - 552;
        v21 = *(_QWORD *)(v8 - 552);
        *(_QWORD *)(v8 - 552) = 0;
        *(_QWORD *)v19 = v21;
        *((_DWORD *)v19 + 2) = *(_DWORD *)(v8 - 544);
        *(v18 - 536) = 0;
        *(v18 - 512) = 0;
        if (*(_BYTE *)(v8 - 512))
        {
          v22 = *(_OWORD *)(v8 - 536);
          *((_QWORD *)v18 - 65) = *(_QWORD *)(v8 - 520);
          *(_OWORD *)(v18 - 536) = v22;
          *(_QWORD *)(v8 - 528) = 0;
          *(_QWORD *)(v8 - 520) = 0;
          *(_QWORD *)(v8 - 536) = 0;
          *(v18 - 512) = 1;
        }
        *(v18 - 504) = 0;
        *(v18 - 480) = 0;
        if (*(_BYTE *)(v8 - 480))
        {
          v23 = *(_OWORD *)(v8 - 504);
          *((_QWORD *)v18 - 61) = *(_QWORD *)(v8 - 488);
          *(_OWORD *)(v18 - 504) = v23;
          *(_QWORD *)(v8 - 496) = 0;
          *(_QWORD *)(v8 - 488) = 0;
          *(_QWORD *)(v8 - 504) = 0;
          *(v18 - 480) = 1;
        }
        v24 = *(_BYTE *)(v8 - 472);
        *(v18 - 464) = 0;
        v25 = v18 - 464;
        *(v18 - 472) = v24;
        *(v18 - 360) = 0;
        if (*(_BYTE *)(v8 - 360))
        {
          v435 = v18 - 360;
          v448 = v8;
          v452 = v18 - 552;
          *(_QWORD *)v25 = 0;
          *((_QWORD *)v18 - 57) = 0;
          *((_QWORD *)v18 - 56) = 0;
          v440 = v8 - 552;
          v444 = v18;
          v26 = *(_QWORD *)(v8 - 464);
          v27 = *(_QWORD *)(v8 - 456);
          v28 = v27 - v26;
          if (v27 != v26)
          {
            v29 = 0x7D6343EB1A1F58D1 * (v28 >> 3);
            if (v29 > 0xA72F05397829CBLL)
              goto LABEL_418;
            v30 = v18 - 456;
            v31 = v18 - 448;
            v32 = (char *)operator new(v28);
            v33 = 0;
            *(_QWORD *)v25 = v32;
            v436 = v30;
            *(_QWORD *)v30 = v32;
            *(_QWORD *)v31 = &v32[392 * v29];
            do
            {
              v43 = v26 + v33;
              v44 = &v32[v33];
              *(_OWORD *)v44 = *(_OWORD *)(v26 + v33);
              v45 = *(_OWORD *)(v26 + v33 + 16);
              v46 = *(_OWORD *)(v26 + v33 + 32);
              v47 = *(_OWORD *)(v26 + v33 + 64);
              *((_OWORD *)v44 + 3) = *(_OWORD *)(v26 + v33 + 48);
              *((_OWORD *)v44 + 4) = v47;
              *((_OWORD *)v44 + 1) = v45;
              *((_OWORD *)v44 + 2) = v46;
              v48 = (std::string *)&v32[v33 + 80];
              v49 = (const std::string::value_type **)(v26 + v33 + 80);
              if (*(char *)(v26 + v33 + 103) < 0)
              {
                std::string::__init_copy_ctor_external(v48, *v49, *(_QWORD *)(v43 + 88));
              }
              else
              {
                v50 = *(_OWORD *)v49;
                *(_QWORD *)&v32[v33 + 96] = *(_QWORD *)(v26 + v33 + 96);
                *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v50;
              }
              v51 = &v32[v33];
              v52 = *(_QWORD *)(v43 + 104);
              *(_QWORD *)&v32[v33 + 112] = 0;
              *((_QWORD *)v51 + 13) = v52;
              *((_QWORD *)v51 + 15) = 0;
              *((_QWORD *)v51 + 16) = 0;
              v54 = *(_BYTE **)(v43 + 112);
              v53 = *(_BYTE **)(v43 + 120);
              v55 = v53 - v54;
              if (v53 != v54)
              {
                if (v55 < 0)
                  goto LABEL_418;
                v56 = (char *)operator new(v53 - v54);
                *(_QWORD *)&v32[v33 + 112] = v56;
                v57 = &v56[16 * (v55 >> 4)];
                *((_QWORD *)v51 + 15) = v56;
                *((_QWORD *)v51 + 16) = v57;
                memcpy(v56, v54, v55);
                *((_QWORD *)v51 + 15) = v57;
              }
              *((_QWORD *)v51 + 17) = 0;
              *((_QWORD *)v51 + 18) = 0;
              *((_QWORD *)v51 + 19) = 0;
              v59 = *(_BYTE **)(v43 + 136);
              v58 = *(_BYTE **)(v43 + 144);
              v60 = v58 - v59;
              if (v58 != v59)
              {
                if (v60 < 0)
                  goto LABEL_418;
                v61 = (char *)operator new(v58 - v59);
                *((_QWORD *)v51 + 17) = v61;
                v62 = &v61[16 * (v60 >> 4)];
                *((_QWORD *)v51 + 18) = v61;
                *((_QWORD *)v51 + 19) = v62;
                memcpy(v61, v59, v60);
                *((_QWORD *)v51 + 18) = v62;
              }
              v63 = &v32[v33];
              *(_QWORD *)&v32[v33 + 160] = 0;
              *((_QWORD *)v63 + 21) = 0;
              *((_QWORD *)v63 + 22) = 0;
              v65 = *(_BYTE **)(v43 + 160);
              v64 = *(_BYTE **)(v43 + 168);
              v66 = v64 - v65;
              if (v64 != v65)
              {
                if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v66 >> 3)) > 0x492492492492492)
                  goto LABEL_418;
                v67 = (char *)operator new(v66);
                *(_QWORD *)&v32[v33 + 160] = v67;
                v68 = &v67[8 * (v66 >> 3)];
                *((_QWORD *)v63 + 21) = v67;
                *((_QWORD *)v63 + 22) = v68;
                memcpy(v67, v65, v66);
                *((_QWORD *)v63 + 21) = v68;
              }
              *(_OWORD *)(v63 + 184) = *(_OWORD *)(v43 + 184);
              v34 = *(_OWORD *)(v43 + 200);
              *((_QWORD *)v63 + 27) = *(_QWORD *)(v43 + 216);
              *(_OWORD *)(v63 + 200) = v34;
              v35 = *(_OWORD *)(v43 + 224);
              v36 = *(_OWORD *)(v43 + 240);
              v37 = *(_OWORD *)(v43 + 256);
              *(_QWORD *)(v63 + 269) = *(_QWORD *)(v43 + 269);
              *((_OWORD *)v63 + 15) = v36;
              *((_OWORD *)v63 + 16) = v37;
              *((_OWORD *)v63 + 14) = v35;
              v39 = *(_OWORD *)(v43 + 344);
              v38 = *(_OWORD *)(v43 + 360);
              v40 = *(_OWORD *)(v43 + 328);
              *(_OWORD *)(v63 + 373) = *(_OWORD *)(v43 + 373);
              *(_OWORD *)(v63 + 344) = v39;
              *(_OWORD *)(v63 + 360) = v38;
              *(_OWORD *)(v63 + 328) = v40;
              v41 = *(_OWORD *)(v43 + 280);
              v42 = *(_OWORD *)(v43 + 312);
              *(_OWORD *)(v63 + 296) = *(_OWORD *)(v43 + 296);
              *(_OWORD *)(v63 + 312) = v42;
              *(_OWORD *)(v63 + 280) = v41;
              v33 += 392;
            }
            while (v43 + 392 != v27);
            *(_QWORD *)v436 = &v32[v33];
          }
          *((_QWORD *)v452 + 15) = 0;
          *((_QWORD *)v452 + 14) = 0;
          v437 = v452 + 120;
          *((_QWORD *)v452 + 16) = 0;
          v69 = *(_QWORD *)(v440 + 112);
          v70 = *(_QWORD *)(v440 + 120);
          v71 = v70 - v69;
          if (v70 != v69)
          {
            v72 = 0xF83E0F83E0F83E1 * (v71 >> 4);
            if (v72 > 0x7C1F07C1F07C1FLL)
              goto LABEL_418;
            v73 = (char *)operator new(v71);
            v74 = 0;
            *((_QWORD *)v452 + 14) = v73;
            *v437 = v73;
            *((_QWORD *)v452 + 16) = &v73[528 * v72];
            do
            {
              v92 = v69 + v74;
              v93 = &v73[v74];
              v94 = *(_OWORD *)(v69 + v74);
              v95 = *(_OWORD *)(v69 + v74 + 16);
              v96 = *(_OWORD *)(v69 + v74 + 48);
              *((_OWORD *)v93 + 2) = *(_OWORD *)(v69 + v74 + 32);
              *((_OWORD *)v93 + 3) = v96;
              *(_OWORD *)v93 = v94;
              *((_OWORD *)v93 + 1) = v95;
              v97 = *(_OWORD *)(v69 + v74 + 64);
              v98 = *(_OWORD *)(v69 + v74 + 80);
              v99 = *(_OWORD *)(v69 + v74 + 96);
              *(_OWORD *)(v93 + 105) = *(_OWORD *)(v69 + v74 + 105);
              *((_OWORD *)v93 + 5) = v98;
              *((_OWORD *)v93 + 6) = v99;
              *((_OWORD *)v93 + 4) = v97;
              v100 = (std::string *)&v73[v74 + 128];
              v101 = (const std::string::value_type **)(v69 + v74 + 128);
              if (*(char *)(v69 + v74 + 151) < 0)
              {
                std::string::__init_copy_ctor_external(v100, *v101, *(_QWORD *)(v92 + 136));
              }
              else
              {
                v102 = *(_OWORD *)v101;
                *(_QWORD *)&v73[v74 + 144] = *(_QWORD *)(v69 + v74 + 144);
                *(_OWORD *)&v100->__r_.__value_.__l.__data_ = v102;
              }
              v103 = &v73[v74];
              *((_QWORD *)v103 + 19) = *(_QWORD *)(v92 + 152);
              *((_QWORD *)v103 + 20) = 0;
              *((_QWORD *)v103 + 21) = 0;
              *((_QWORD *)v103 + 22) = 0;
              v105 = *(_BYTE **)(v92 + 160);
              v104 = *(_BYTE **)(v92 + 168);
              v106 = v104 - v105;
              if (v104 != v105)
              {
                if (v106 < 0)
                  goto LABEL_418;
                v107 = (char *)operator new(v104 - v105);
                *((_QWORD *)v103 + 20) = v107;
                *((_QWORD *)v103 + 21) = v107;
                v108 = &v107[16 * (v106 >> 4)];
                *((_QWORD *)v103 + 22) = v108;
                memcpy(v107, v105, v106);
                *((_QWORD *)v103 + 21) = v108;
              }
              *((_QWORD *)v103 + 23) = 0;
              *((_QWORD *)v103 + 24) = 0;
              *((_QWORD *)v103 + 25) = 0;
              v110 = *(_BYTE **)(v92 + 184);
              v109 = *(_BYTE **)(v92 + 192);
              v111 = v109 - v110;
              if (v109 != v110)
              {
                if (v111 < 0)
                  goto LABEL_418;
                v112 = (char *)operator new(v109 - v110);
                *((_QWORD *)v103 + 23) = v112;
                v113 = &v112[16 * (v111 >> 4)];
                *((_QWORD *)v103 + 24) = v112;
                *((_QWORD *)v103 + 25) = v113;
                memcpy(v112, v110, v111);
                *((_QWORD *)v103 + 24) = v113;
              }
              v75 = &v73[v74];
              *((_OWORD *)v75 + 13) = *(_OWORD *)(v92 + 208);
              v76 = *(_OWORD *)(v92 + 224);
              v77 = *(_OWORD *)(v92 + 240);
              v78 = *(_OWORD *)(v92 + 272);
              *((_OWORD *)v75 + 16) = *(_OWORD *)(v92 + 256);
              *((_OWORD *)v75 + 17) = v78;
              *((_OWORD *)v75 + 14) = v76;
              *((_OWORD *)v75 + 15) = v77;
              v79 = *(_OWORD *)(v92 + 288);
              v80 = *(_OWORD *)(v92 + 304);
              v81 = *(_OWORD *)(v92 + 320);
              *((_DWORD *)v75 + 84) = *(_DWORD *)(v92 + 336);
              *((_OWORD *)v75 + 19) = v80;
              *((_OWORD *)v75 + 20) = v81;
              *((_OWORD *)v75 + 18) = v79;
              v82 = &v73[v74 + 340];
              v83 = *(_OWORD *)(v92 + 340);
              v84 = *(_OWORD *)(v92 + 356);
              v85 = *(_OWORD *)(v92 + 388);
              *((_OWORD *)v82 + 2) = *(_OWORD *)(v92 + 372);
              *((_OWORD *)v82 + 3) = v85;
              *(_OWORD *)v82 = v83;
              *((_OWORD *)v82 + 1) = v84;
              v86 = *(_OWORD *)(v92 + 404);
              v87 = *(_OWORD *)(v92 + 420);
              v88 = *(_OWORD *)(v92 + 452);
              *((_OWORD *)v82 + 6) = *(_OWORD *)(v92 + 436);
              *((_OWORD *)v82 + 7) = v88;
              *((_OWORD *)v82 + 4) = v86;
              *((_OWORD *)v82 + 5) = v87;
              v89 = *(_OWORD *)(v92 + 468);
              v90 = *(_OWORD *)(v92 + 484);
              v91 = *(_OWORD *)(v92 + 500);
              *((_OWORD *)v75 + 32) = *(_OWORD *)(v92 + 512);
              *((_OWORD *)v82 + 9) = v90;
              *((_OWORD *)v82 + 10) = v91;
              *((_OWORD *)v82 + 8) = v89;
              v74 += 528;
            }
            while (v92 + 528 != v70);
            *v437 = &v73[v74];
          }
          *((_QWORD *)v452 + 18) = 0;
          *((_QWORD *)v452 + 19) = 0;
          v114 = (void **)(v452 + 144);
          *((_QWORD *)v452 + 17) = v452 + 144;
          v115 = *(_QWORD **)(v448 - 416);
          if (v115 != (_QWORD *)(v448 - 408))
          {
            v116 = (void ***)(v452 + 136);
            while (1)
            {
              v117 = *v114;
              v118 = v452 + 144;
              if (*v116 != v114)
              {
                v119 = *v114;
                v120 = v452 + 144;
                if (v117)
                {
                  do
                  {
                    v118 = v119;
                    v119 = (_QWORD *)v119[1];
                  }
                  while (v119);
                }
                else
                {
                  do
                  {
                    v118 = (_QWORD *)v120[2];
                    v121 = *v118 == (_QWORD)v120;
                    v120 = v118;
                  }
                  while (v121);
                }
                v122 = *((_DWORD *)v115 + 8);
                if (*((_DWORD *)v118 + 8) >= v122)
                  break;
              }
              if (v117)
                v123 = v118;
              else
                v123 = v452 + 144;
              if (v117)
                v124 = v118 + 1;
              else
                v124 = v452 + 144;
              if (!*v124)
                goto LABEL_79;
LABEL_104:
              v140 = (_QWORD *)v115[1];
              if (v140)
              {
                do
                {
                  v141 = v140;
                  v140 = (_QWORD *)*v140;
                }
                while (v140);
              }
              else
              {
                do
                {
                  v141 = (_QWORD *)v115[2];
                  v121 = *v141 == (_QWORD)v115;
                  v115 = v141;
                }
                while (!v121);
              }
              v115 = v141;
              if (v141 == (_QWORD *)(v448 - 408))
                goto LABEL_116;
            }
            v124 = v452 + 144;
            v123 = v452 + 144;
            if (v117)
            {
              while (1)
              {
                while (1)
                {
                  v123 = v117;
                  v125 = *((_DWORD *)v117 + 8);
                  if (v122 >= v125)
                    break;
                  v117 = (_QWORD *)*v123;
                  v124 = v123;
                  if (!*v123)
                    goto LABEL_79;
                }
                if (v125 >= v122)
                  goto LABEL_104;
                v117 = (_QWORD *)v123[1];
                if (!v117)
                {
                  v124 = v123 + 1;
                  break;
                }
              }
            }
LABEL_79:
            v126 = operator new(0x98uLL);
            v126[8] = *((_DWORD *)v115 + 8);
            webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v126 + 10), (const webrtc::RtpCodec *)(v115 + 5));
            *((_QWORD *)v126 + 5) = off_24C0BCC30;
            v126[36] = *((_DWORD *)v115 + 36);
            *(_QWORD *)v126 = 0;
            *((_QWORD *)v126 + 1) = 0;
            *((_QWORD *)v126 + 2) = v123;
            *v124 = v126;
            v127 = (void **)**v116;
            if (v127)
            {
              *v116 = v127;
              v126 = (_DWORD *)*v124;
            }
            v128 = *v114;
            v121 = v126 == *v114;
            *((_BYTE *)v126 + 24) = v121;
            if (!v121)
            {
              do
              {
                v129 = *((_QWORD *)v126 + 2);
                if (*(_BYTE *)(v129 + 24))
                  break;
                v130 = *(_BYTE **)(v129 + 16);
                v131 = *(_QWORD *)v130;
                if (*(_QWORD *)v130 == v129)
                {
                  v134 = *((_QWORD *)v130 + 1);
                  if (!v134 || (v135 = *(unsigned __int8 *)(v134 + 24), v132 = (_BYTE *)(v134 + 24), v135))
                  {
                    if (*(_DWORD **)v129 == v126)
                    {
                      *(_BYTE *)(v129 + 24) = 1;
                      v130[24] = 0;
                      v138 = *(_QWORD *)(v129 + 8);
                      *(_QWORD *)v130 = v138;
                      if (v138)
                        goto LABEL_96;
                    }
                    else
                    {
                      v136 = *(uint64_t **)(v129 + 8);
                      v137 = *v136;
                      *(_QWORD *)(v129 + 8) = *v136;
                      if (v137)
                      {
                        *(_QWORD *)(v137 + 16) = v129;
                        v130 = *(_BYTE **)(v129 + 16);
                      }
                      v136[2] = (uint64_t)v130;
                      *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8 * (**(_QWORD **)(v129 + 16) != v129)) = v136;
                      *v136 = v129;
                      *(_QWORD *)(v129 + 16) = v136;
                      v130 = (_BYTE *)v136[2];
                      v129 = *(_QWORD *)v130;
                      *((_BYTE *)v136 + 24) = 1;
                      v130[24] = 0;
                      v138 = *(_QWORD *)(v129 + 8);
                      *(_QWORD *)v130 = v138;
                      if (v138)
LABEL_96:
                        *(_QWORD *)(v138 + 16) = v130;
                    }
                    *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
                    *(_QWORD *)(*((_QWORD *)v130 + 2) + 8 * (**((_QWORD **)v130 + 2) != (_QWORD)v130)) = v129;
                    *(_QWORD *)(v129 + 8) = v130;
LABEL_102:
                    *((_QWORD *)v130 + 2) = v129;
                    break;
                  }
                }
                else if (!v131 || (v133 = *(unsigned __int8 *)(v131 + 24), v132 = (_BYTE *)(v131 + 24), v133))
                {
                  if (*(_DWORD **)v129 == v126)
                  {
                    v142 = *((_QWORD *)v126 + 1);
                    *(_QWORD *)v129 = v142;
                    if (v142)
                    {
                      *(_QWORD *)(v142 + 16) = v129;
                      v130 = *(_BYTE **)(v129 + 16);
                    }
                    *((_QWORD *)v126 + 2) = v130;
                    *(_QWORD *)(*(_QWORD *)(v129 + 16) + 8 * (**(_QWORD **)(v129 + 16) != v129)) = v126;
                    *((_QWORD *)v126 + 1) = v129;
                    *(_QWORD *)(v129 + 16) = v126;
                    v130 = (_BYTE *)*((_QWORD *)v126 + 2);
                    *((_BYTE *)v126 + 24) = 1;
                    v130[24] = 0;
                    v129 = *((_QWORD *)v130 + 1);
                    v139 = *(_DWORD **)v129;
                    *((_QWORD *)v130 + 1) = *(_QWORD *)v129;
                    if (v139)
LABEL_100:
                      *((_QWORD *)v139 + 2) = v130;
                  }
                  else
                  {
                    *(_BYTE *)(v129 + 24) = 1;
                    v130[24] = 0;
                    v129 = *((_QWORD *)v130 + 1);
                    v139 = *(_DWORD **)v129;
                    *((_QWORD *)v130 + 1) = *(_QWORD *)v129;
                    if (v139)
                      goto LABEL_100;
                  }
                  *(_QWORD *)(v129 + 16) = *((_QWORD *)v130 + 2);
                  *(_QWORD *)(*((_QWORD *)v130 + 2) + 8 * (**((_QWORD **)v130 + 2) != (_QWORD)v130)) = v129;
                  *(_QWORD *)v129 = v130;
                  goto LABEL_102;
                }
                *(_BYTE *)(v129 + 24) = 1;
                v126 = v130;
                v130[24] = v130 == v128;
                *v132 = 1;
              }
              while (v130 != v128);
            }
            ++*((_QWORD *)v444 - 50);
            goto LABEL_104;
          }
LABEL_116:
          *((_QWORD *)v452 + 21) = 0;
          *((_QWORD *)v452 + 22) = 0;
          v143 = (void **)(v452 + 168);
          *((_QWORD *)v452 + 20) = v452 + 168;
          v144 = *(_QWORD **)(v448 - 392);
          if (v144 != (_QWORD *)(v448 - 384))
          {
            v145 = (void ***)(v452 + 160);
            while (1)
            {
              v146 = *v143;
              v147 = v452 + 168;
              if (*v145 != v143)
              {
                v148 = *v143;
                v149 = v452 + 168;
                if (v146)
                {
                  do
                  {
                    v147 = v148;
                    v148 = (_QWORD *)v148[1];
                  }
                  while (v148);
                }
                else
                {
                  do
                  {
                    v147 = (_QWORD *)v149[2];
                    v121 = *v147 == (_QWORD)v149;
                    v149 = v147;
                  }
                  while (v121);
                }
                v150 = *((_DWORD *)v144 + 8);
                if (*((_DWORD *)v147 + 8) >= v150)
                  break;
              }
              if (v146)
                v151 = v147;
              else
                v151 = v452 + 168;
              if (v146)
                v152 = v147 + 1;
              else
                v152 = v452 + 168;
              if (!*v152)
                goto LABEL_140;
LABEL_165:
              v168 = (_QWORD *)v144[1];
              if (v168)
              {
                do
                {
                  v169 = v168;
                  v168 = (_QWORD *)*v168;
                }
                while (v168);
              }
              else
              {
                do
                {
                  v169 = (_QWORD *)v144[2];
                  v121 = *v169 == (_QWORD)v144;
                  v144 = v169;
                }
                while (!v121);
              }
              v144 = v169;
              if (v169 == (_QWORD *)(v448 - 384))
                goto LABEL_177;
            }
            v152 = v452 + 168;
            v151 = v452 + 168;
            if (v146)
            {
              while (1)
              {
                while (1)
                {
                  v151 = v146;
                  v153 = *((_DWORD *)v146 + 8);
                  if (v150 >= v153)
                    break;
                  v146 = (_QWORD *)*v151;
                  v152 = v151;
                  if (!*v151)
                    goto LABEL_140;
                }
                if (v153 >= v150)
                  goto LABEL_165;
                v146 = (_QWORD *)v151[1];
                if (!v146)
                {
                  v152 = v151 + 1;
                  break;
                }
              }
            }
LABEL_140:
            v154 = operator new(0x98uLL);
            v154[8] = *((_DWORD *)v144 + 8);
            webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v154 + 10), (const webrtc::RtpCodec *)(v144 + 5));
            *((_QWORD *)v154 + 5) = off_24C0BCC30;
            v154[36] = *((_DWORD *)v144 + 36);
            *(_QWORD *)v154 = 0;
            *((_QWORD *)v154 + 1) = 0;
            *((_QWORD *)v154 + 2) = v151;
            *v152 = v154;
            v155 = (void **)**v145;
            if (v155)
            {
              *v145 = v155;
              v154 = (_DWORD *)*v152;
            }
            v156 = *v143;
            v121 = v154 == *v143;
            *((_BYTE *)v154 + 24) = v121;
            if (!v121)
            {
              do
              {
                v157 = *((_QWORD *)v154 + 2);
                if (*(_BYTE *)(v157 + 24))
                  break;
                v158 = *(_BYTE **)(v157 + 16);
                v159 = *(_QWORD *)v158;
                if (*(_QWORD *)v158 == v157)
                {
                  v162 = *((_QWORD *)v158 + 1);
                  if (!v162 || (v163 = *(unsigned __int8 *)(v162 + 24), v160 = (_BYTE *)(v162 + 24), v163))
                  {
                    if (*(_DWORD **)v157 == v154)
                    {
                      *(_BYTE *)(v157 + 24) = 1;
                      v158[24] = 0;
                      v166 = *(_QWORD *)(v157 + 8);
                      *(_QWORD *)v158 = v166;
                      if (v166)
                        goto LABEL_157;
                    }
                    else
                    {
                      v164 = *(uint64_t **)(v157 + 8);
                      v165 = *v164;
                      *(_QWORD *)(v157 + 8) = *v164;
                      if (v165)
                      {
                        *(_QWORD *)(v165 + 16) = v157;
                        v158 = *(_BYTE **)(v157 + 16);
                      }
                      v164[2] = (uint64_t)v158;
                      *(_QWORD *)(*(_QWORD *)(v157 + 16) + 8 * (**(_QWORD **)(v157 + 16) != v157)) = v164;
                      *v164 = v157;
                      *(_QWORD *)(v157 + 16) = v164;
                      v158 = (_BYTE *)v164[2];
                      v157 = *(_QWORD *)v158;
                      *((_BYTE *)v164 + 24) = 1;
                      v158[24] = 0;
                      v166 = *(_QWORD *)(v157 + 8);
                      *(_QWORD *)v158 = v166;
                      if (v166)
LABEL_157:
                        *(_QWORD *)(v166 + 16) = v158;
                    }
                    *(_QWORD *)(v157 + 16) = *((_QWORD *)v158 + 2);
                    *(_QWORD *)(*((_QWORD *)v158 + 2) + 8 * (**((_QWORD **)v158 + 2) != (_QWORD)v158)) = v157;
                    *(_QWORD *)(v157 + 8) = v158;
LABEL_163:
                    *((_QWORD *)v158 + 2) = v157;
                    break;
                  }
                }
                else if (!v159 || (v161 = *(unsigned __int8 *)(v159 + 24), v160 = (_BYTE *)(v159 + 24), v161))
                {
                  if (*(_DWORD **)v157 == v154)
                  {
                    v170 = *((_QWORD *)v154 + 1);
                    *(_QWORD *)v157 = v170;
                    if (v170)
                    {
                      *(_QWORD *)(v170 + 16) = v157;
                      v158 = *(_BYTE **)(v157 + 16);
                    }
                    *((_QWORD *)v154 + 2) = v158;
                    *(_QWORD *)(*(_QWORD *)(v157 + 16) + 8 * (**(_QWORD **)(v157 + 16) != v157)) = v154;
                    *((_QWORD *)v154 + 1) = v157;
                    *(_QWORD *)(v157 + 16) = v154;
                    v158 = (_BYTE *)*((_QWORD *)v154 + 2);
                    *((_BYTE *)v154 + 24) = 1;
                    v158[24] = 0;
                    v157 = *((_QWORD *)v158 + 1);
                    v167 = *(_DWORD **)v157;
                    *((_QWORD *)v158 + 1) = *(_QWORD *)v157;
                    if (v167)
LABEL_161:
                      *((_QWORD *)v167 + 2) = v158;
                  }
                  else
                  {
                    *(_BYTE *)(v157 + 24) = 1;
                    v158[24] = 0;
                    v157 = *((_QWORD *)v158 + 1);
                    v167 = *(_DWORD **)v157;
                    *((_QWORD *)v158 + 1) = *(_QWORD *)v157;
                    if (v167)
                      goto LABEL_161;
                  }
                  *(_QWORD *)(v157 + 16) = *((_QWORD *)v158 + 2);
                  *(_QWORD *)(*((_QWORD *)v158 + 2) + 8 * (**((_QWORD **)v158 + 2) != (_QWORD)v158)) = v157;
                  *(_QWORD *)v157 = v158;
                  goto LABEL_163;
                }
                *(_BYTE *)(v157 + 24) = 1;
                v154 = v158;
                v158[24] = v158 == v156;
                *v160 = 1;
              }
              while (v158 != v156);
            }
            ++*((_QWORD *)v444 - 47);
            goto LABEL_165;
          }
LABEL_177:
          v18 = v444;
          v8 = v448;
          *((_DWORD *)v444 - 92) = *(_DWORD *)(v448 - 368);
          v11 = v434;
          *v435 = 1;
          v17 = v433;
          v19 = v452;
          v20 = v440;
        }
        *(v18 - 352) = 0;
        *(v18 - 232) = 0;
        if (*(_BYTE *)(v8 - 232))
        {
          cricket::VideoMediaInfo::VideoMediaInfo((cricket::VideoMediaInfo *)(v18 - 352), (const cricket::VideoMediaInfo *)(v8 - 352));
          *(v18 - 232) = 1;
        }
        *((_QWORD *)v18 - 28) = *(_QWORD *)(v8 - 224);
        v171 = (_QWORD *)(v8 - 216);
        v172 = *(_QWORD *)(v8 - 216);
        *((_QWORD *)v18 - 27) = v172;
        v173 = v18 - 216;
        v174 = *(_QWORD *)(v8 - 208);
        *((_QWORD *)v18 - 26) = v174;
        if (v174)
        {
          *(_QWORD *)(v172 + 16) = v173;
          *(_QWORD *)(v8 - 224) = v171;
          *v171 = 0;
          *(_QWORD *)(v8 - 208) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 28) = v173;
        }
        *((_QWORD *)v18 - 25) = *(_QWORD *)(v8 - 200);
        v175 = (_QWORD *)(v8 - 192);
        v176 = *(_QWORD *)(v8 - 192);
        *((_QWORD *)v18 - 24) = v176;
        v177 = v18 - 192;
        v178 = *(_QWORD *)(v8 - 184);
        *((_QWORD *)v18 - 23) = v178;
        if (v178)
        {
          *(_QWORD *)(v176 + 16) = v177;
          *(_QWORD *)(v8 - 200) = v175;
          *v175 = 0;
          *(_QWORD *)(v8 - 184) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 25) = v177;
        }
        *((_QWORD *)v18 - 22) = *(_QWORD *)(v8 - 176);
        v179 = (_QWORD *)(v8 - 168);
        v180 = *(_QWORD *)(v8 - 168);
        *((_QWORD *)v18 - 21) = v180;
        v181 = v18 - 168;
        v182 = *(_QWORD *)(v8 - 160);
        *((_QWORD *)v18 - 20) = v182;
        if (v182)
        {
          *(_QWORD *)(v180 + 16) = v181;
          *(_QWORD *)(v8 - 176) = v179;
          *v179 = 0;
          *(_QWORD *)(v8 - 160) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 22) = v181;
        }
        *((_QWORD *)v18 - 19) = *(_QWORD *)(v8 - 152);
        v183 = (_QWORD *)(v8 - 144);
        v184 = *(_QWORD *)(v8 - 144);
        *((_QWORD *)v18 - 18) = v184;
        v185 = v18 - 144;
        v186 = *(_QWORD *)(v8 - 136);
        *((_QWORD *)v18 - 17) = v186;
        if (v186)
        {
          *(_QWORD *)(v184 + 16) = v185;
          *(_QWORD *)(v8 - 152) = v183;
          *v183 = 0;
          *(_QWORD *)(v8 - 136) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 19) = v185;
        }
        *((_QWORD *)v18 - 16) = *(_QWORD *)(v8 - 128);
        v187 = (_QWORD *)(v8 - 120);
        v188 = *(_QWORD *)(v8 - 120);
        *((_QWORD *)v18 - 15) = v188;
        v189 = v18 - 120;
        v190 = *(_QWORD *)(v8 - 112);
        *((_QWORD *)v18 - 14) = v190;
        if (v190)
        {
          *(_QWORD *)(v188 + 16) = v189;
          *(_QWORD *)(v8 - 128) = v187;
          *v187 = 0;
          *(_QWORD *)(v8 - 112) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 16) = v189;
        }
        *((_QWORD *)v18 - 13) = *(_QWORD *)(v8 - 104);
        v191 = (_QWORD *)(v8 - 96);
        v192 = *(_QWORD *)(v8 - 96);
        *((_QWORD *)v18 - 12) = v192;
        v193 = v18 - 96;
        v194 = *(_QWORD *)(v8 - 88);
        *((_QWORD *)v18 - 11) = v194;
        if (v194)
        {
          *(_QWORD *)(v192 + 16) = v193;
          *(_QWORD *)(v8 - 104) = v191;
          *v191 = 0;
          *(_QWORD *)(v8 - 88) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 13) = v193;
        }
        *((_QWORD *)v18 - 10) = *(_QWORD *)(v8 - 80);
        v195 = (_QWORD *)(v8 - 72);
        v196 = *(_QWORD *)(v8 - 72);
        *((_QWORD *)v18 - 9) = v196;
        v197 = v18 - 72;
        v198 = *(_QWORD *)(v8 - 64);
        *((_QWORD *)v18 - 8) = v198;
        if (v198)
        {
          *(_QWORD *)(v196 + 16) = v197;
          *(_QWORD *)(v8 - 80) = v195;
          *v195 = 0;
          *(_QWORD *)(v8 - 64) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 10) = v197;
        }
        *((_QWORD *)v18 - 7) = *(_QWORD *)(v8 - 56);
        v199 = (_QWORD *)(v8 - 48);
        v200 = *(_QWORD *)(v8 - 48);
        *((_QWORD *)v18 - 6) = v200;
        v201 = v18 - 48;
        v202 = *(_QWORD *)(v8 - 40);
        *((_QWORD *)v18 - 5) = v202;
        if (v202)
        {
          *(_QWORD *)(v200 + 16) = v201;
          *(_QWORD *)(v8 - 56) = v199;
          *v199 = 0;
          *(_QWORD *)(v8 - 40) = 0;
        }
        else
        {
          *((_QWORD *)v18 - 7) = v201;
        }
        *((_QWORD *)v18 - 4) = *(_QWORD *)(v8 - 32);
        v203 = (_QWORD *)(v8 - 24);
        v204 = *(_QWORD *)(v8 - 24);
        *((_QWORD *)v18 - 3) = v204;
        v205 = v18 - 24;
        v206 = *(_QWORD *)(v8 - 16);
        *((_QWORD *)v18 - 2) = v206;
        if (v206)
          break;
        *((_QWORD *)v18 - 4) = v205;
        *((_QWORD *)v18 - 1) = *(_QWORD *)(v8 - 8);
        v8 = v20;
        v18 = v19;
        if (v20 == v11)
          goto LABEL_206;
      }
      *(_QWORD *)(v204 + 16) = v205;
      *(_QWORD *)(v8 - 32) = v203;
      *v203 = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *((_QWORD *)v18 - 1) = *(_QWORD *)(v8 - 8);
      v8 = v20;
      v18 = v19;
    }
    while (v20 != v11);
LABEL_206:
    v9 = v431;
    v8 = v431[27];
    v207 = v431[28];
    v10 = v429;
    v431[27] = v19;
    v431[28] = v429;
    v431[29] = v17;
    if (v207 != v8)
    {
LABEL_209:
      v208 = (_QWORD *)(v207 - 552);
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v207 - 24));
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v207 - 48));
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v207 - 72));
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v207 - 96));
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v207 - 120));
      std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v207 - 144));
      std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v207 - 168));
      std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v207 - 192));
      std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v207 - 216));
      if (!*(_BYTE *)(v207 - 232))
        goto LABEL_246;
      std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(v207 - 256, *(char **)(v207 - 248));
      std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy(v207 - 280, *(char **)(v207 - 272));
      v209 = *(_QWORD *)(v207 - 304);
      if (!v209)
        goto LABEL_236;
      v210 = v8;
      v211 = (_QWORD *)(v207 - 296);
      v212 = *(_QWORD *)(v207 - 296);
      v213 = *(void **)(v207 - 304);
      if (v212 == v209)
        goto LABEL_235;
      while (1)
      {
        v214 = v212 - 728;
        if (*(_BYTE *)(v212 - 336) && *(char *)(v212 - 337) < 0)
        {
          operator delete(*(void **)(v212 - 360));
          v215 = (void **)(v212 - 384);
          v216 = *(char **)(v212 - 384);
          if (v216)
          {
LABEL_217:
            v217 = *(char **)(v212 - 376);
            v218 = v216;
            if (v217 != v216)
            {
              do
              {
                v219 = (void *)*((_QWORD *)v217 - 3);
                if (v219)
                {
                  *((_QWORD *)v217 - 2) = v219;
                  operator delete(v219);
                }
                if (*(v217 - 25) < 0)
                  operator delete(*((void **)v217 - 6));
                v217 -= 48;
              }
              while (v217 != v216);
              v218 = *v215;
            }
            *(_QWORD *)(v212 - 376) = v216;
            operator delete(v218);
          }
        }
        else
        {
          v215 = (void **)(v212 - 384);
          v216 = *(char **)(v212 - 384);
          if (v216)
            goto LABEL_217;
        }
        v220 = *(void **)(v212 - 544);
        if (v220)
        {
          *(_QWORD *)(v212 - 536) = v220;
          operator delete(v220);
        }
        v221 = *(void **)(v212 - 568);
        if (v221)
        {
          *(_QWORD *)(v212 - 560) = v221;
          operator delete(v221);
        }
        if (*(char *)(v212 - 577) < 0)
          operator delete(*(void **)(v212 - 600));
        v212 -= 728;
        if (v214 == v209)
        {
          v213 = *(void **)(v207 - 304);
          v211 = (_QWORD *)(v207 - 296);
LABEL_235:
          *v211 = v209;
          operator delete(v213);
          v8 = v210;
LABEL_236:
          v222 = *(_QWORD *)(v207 - 328);
          if (v222)
          {
            v223 = *(_QWORD *)(v207 - 320);
            v224 = *(void **)(v207 - 328);
            if (v223 != v222)
            {
              do
                cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v223 - 456));
              while (v223 != v222);
              v224 = *(void **)(v207 - 328);
            }
            *(_QWORD *)(v207 - 320) = v222;
            operator delete(v224);
          }
          v225 = *(_QWORD *)(v207 - 352);
          if (v225)
          {
            v226 = *(_QWORD *)(v207 - 344);
            v227 = *(void **)(v207 - 352);
            if (v226 != v225)
            {
              do
                cricket::VideoSenderInfo::~VideoSenderInfo((void **)(v226 - 456));
              while (v226 != v225);
              v227 = *(void **)(v207 - 352);
            }
            *(_QWORD *)(v207 - 344) = v225;
            operator delete(v227);
          }
LABEL_246:
          if (*(_BYTE *)(v207 - 360))
            cricket::VoiceMediaInfo::~VoiceMediaInfo((char **)(v207 - 464));
          if (*(_BYTE *)(v207 - 480) && *(char *)(v207 - 481) < 0)
          {
            operator delete(*(void **)(v207 - 504));
            if (*(_BYTE *)(v207 - 512))
              goto LABEL_251;
          }
          else if (*(_BYTE *)(v207 - 512))
          {
LABEL_251:
            if (*(char *)(v207 - 513) < 0)
              operator delete(*(void **)(v207 - 536));
          }
          if (*v208)
            (*(void (**)(_QWORD))(*(_QWORD *)*v208 + 8))(*v208);
          v207 -= 552;
          if (v208 == (_QWORD *)v8)
          {
            v9 = v431;
            v10 = v429;
            break;
          }
          goto LABEL_209;
        }
      }
    }
    v6 = v427;
    if (v8)
    {
LABEL_258:
      operator delete((void *)v8);
      v10 = v429;
      v9 = v431;
    }
LABEL_259:
    v9[28] = v10;
    if ((char *)v9[27] == v10)
      goto LABEL_417;
    v228 = v10;
    v229 = v10 - 552;
    (*(void (**)(_QWORD *))*v432)(v432);
    if (*(_QWORD *)v229)
      (*(void (**)(_QWORD))(**(_QWORD **)v229 + 8))(*(_QWORD *)v229);
    *(_QWORD *)v229 = v432;
    *((_DWORD *)v228 - 136) = v6;
    v230 = v432[20];
    if (!v230)
      goto LABEL_4;
    v231 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v230 + 96))(v432[20]);
    v232 = (std::string *)(v228 - 536);
    if (*(v228 - 512))
    {
      if (v232 != (std::string *)v231)
      {
        v233 = *(_BYTE *)(v231 + 23);
        if (*(v228 - 513) < 0)
        {
          if (v233 >= 0)
            v236 = (const std::string::value_type *)v231;
          else
            v236 = *(const std::string::value_type **)v231;
          if (v233 >= 0)
            v237 = *(unsigned __int8 *)(v231 + 23);
          else
            v237 = *(_QWORD *)(v231 + 8);
          std::string::__assign_no_alias<false>(v232, v236, v237);
        }
        else if ((*(_BYTE *)(v231 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v232, *(char **)v231, *(_QWORD *)(v231 + 8));
        }
        else
        {
          v234 = *(_OWORD *)v231;
          *((_QWORD *)v228 - 65) = *(_QWORD *)(v231 + 16);
          *(_OWORD *)&v232->__r_.__value_.__l.__data_ = v234;
        }
      }
    }
    else
    {
      if (*(char *)(v231 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v232, *(const std::string::value_type **)v231, *(_QWORD *)(v231 + 8));
      }
      else
      {
        v235 = *(_OWORD *)v231;
        *((_QWORD *)v228 - 65) = *(_QWORD *)(v231 + 16);
        *(_OWORD *)&v232->__r_.__value_.__l.__data_ = v235;
      }
      *(v228 - 512) = 1;
    }
    v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 88))(v230);
    if (v239 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_418;
    v240 = (__int128 *)v238;
    v241 = v239;
    if (v239 > 0x16)
    {
      v243 = (v239 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v239 | 7) != 0x17)
        v243 = v239 | 7;
      v244 = v243 + 1;
      v242 = (__int128 *)operator new(v243 + 1);
      *((_QWORD *)&v461 + 1) = v241;
      v462 = v244 | 0x8000000000000000;
      *(_QWORD *)&v461 = v242;
    }
    else
    {
      HIBYTE(v462) = v239;
      v242 = &v461;
    }
    v245 = v228;
    v246 = (__int128 *)((char *)v242 + v241);
    if (v242 <= v240 && v246 > v240)
    {
LABEL_417:
      __break(1u);
      goto LABEL_418;
    }
    if (v241)
    {
      memmove(v242, v240, v241);
      v245 = v228;
    }
    *(_BYTE *)v246 = 0;
    v248 = v245 - 504;
    if (!*(v245 - 480))
    {
      v314 = v461;
      *((_QWORD *)v245 - 61) = v462;
      *(_OWORD *)v248 = v314;
      v462 = 0;
      v461 = 0uLL;
      *(v245 - 480) = 1;
      if (SHIBYTE(v462) < 0)
      {
        operator delete((void *)v461);
        if (v6 == 1)
          goto LABEL_297;
      }
      else if (v6 == 1)
      {
        goto LABEL_297;
      }
LABEL_346:
      if (v6)
        goto LABEL_4;
      v315 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 56))(v230);
      v316 = (uint64_t **)*((_QWORD *)v426 + 2);
      __p[0] = 0;
      __p[1] = 0;
      v458 = 0uLL;
      *(_QWORD *)&v457 = 0;
      *((_QWORD *)&v457 + 1) = &v458;
      v462 = 0;
      v463 = 0;
      v465 = 0;
      v466 = 0;
      v461 = (unint64_t)v315;
      v464 = (int *)&v465;
      std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)&v464, (int *)&v458, (int *)&v458);
      v318 = v316 + 1;
      v317 = v316[1];
      v319 = v461;
      if (v317)
      {
        do
        {
          while (1)
          {
            v320 = (uint64_t **)v317;
            v321 = v317[4];
            if ((unint64_t)v461 >= v321)
              break;
            v317 = *v320;
            v318 = v320;
            if (!*v320)
              goto LABEL_354;
          }
          if (v321 >= (unint64_t)v461)
            goto LABEL_375;
          v317 = v320[1];
        }
        while (v317);
        v318 = v320 + 1;
      }
      else
      {
        v320 = v316 + 1;
      }
LABEL_354:
      v322 = (uint64_t *)operator new(0x58uLL);
      v322[4] = v319;
      v322[5] = 0;
      v322[6] = 0;
      v322[7] = 0;
      v450 = v462;
      v454 = *((_QWORD *)&v461 + 1);
      v323 = v462 - *((_QWORD *)&v461 + 1);
      if (v462 != *((_QWORD *)&v461 + 1))
      {
        v442 = v316;
        v446 = v230;
        v324 = 0x7D6343EB1A1F58D1 * (v323 >> 3);
        if (v324 > 0xA72F05397829CBLL)
          goto LABEL_418;
        v325 = (char *)operator new(v323);
        v326 = 0;
        v322[5] = (uint64_t)v325;
        v322[6] = (uint64_t)v325;
        v439 = v322;
        v322[7] = (uint64_t)&v325[392 * v324];
        do
        {
          v338 = v454 + v326;
          v339 = &v325[v326];
          *(_OWORD *)v339 = *(_OWORD *)(v454 + v326);
          v340 = *(_OWORD *)(v454 + v326 + 16);
          v341 = *(_OWORD *)(v454 + v326 + 32);
          v342 = *(_OWORD *)(v454 + v326 + 64);
          *((_OWORD *)v339 + 3) = *(_OWORD *)(v454 + v326 + 48);
          *((_OWORD *)v339 + 4) = v342;
          *((_OWORD *)v339 + 1) = v340;
          *((_OWORD *)v339 + 2) = v341;
          v343 = (std::string *)&v325[v326 + 80];
          v344 = (const std::string::value_type **)(v454 + v326 + 80);
          if (*(char *)(v454 + v326 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(v343, *v344, *(_QWORD *)(v338 + 88));
          }
          else
          {
            v345 = *(_OWORD *)v344;
            *(_QWORD *)&v325[v326 + 96] = *(_QWORD *)(v338 + 96);
            *(_OWORD *)&v343->__r_.__value_.__l.__data_ = v345;
          }
          v346 = &v325[v326];
          v347 = *(_QWORD *)(v338 + 104);
          *(_QWORD *)&v325[v326 + 112] = 0;
          *((_QWORD *)v346 + 13) = v347;
          *((_QWORD *)v346 + 15) = 0;
          *((_QWORD *)v346 + 16) = 0;
          v349 = *(_BYTE **)(v338 + 112);
          v348 = *(_BYTE **)(v338 + 120);
          v350 = v348 - v349;
          if (v348 != v349)
          {
            if (v350 < 0)
              goto LABEL_418;
            v351 = (char *)operator new(v348 - v349);
            *(_QWORD *)&v325[v326 + 112] = v351;
            v352 = &v351[16 * (v350 >> 4)];
            *((_QWORD *)v346 + 15) = v351;
            *((_QWORD *)v346 + 16) = v352;
            memcpy(v351, v349, v350);
            *((_QWORD *)v346 + 15) = v352;
          }
          *((_QWORD *)v346 + 17) = 0;
          *((_QWORD *)v346 + 18) = 0;
          *((_QWORD *)v346 + 19) = 0;
          v354 = *(_BYTE **)(v338 + 136);
          v353 = *(_BYTE **)(v338 + 144);
          v355 = v353 - v354;
          if (v353 != v354)
          {
            if (v355 < 0)
              goto LABEL_418;
            v356 = (char *)operator new(v353 - v354);
            *((_QWORD *)v346 + 17) = v356;
            v357 = &v356[16 * (v355 >> 4)];
            *((_QWORD *)v346 + 18) = v356;
            *((_QWORD *)v346 + 19) = v357;
            memcpy(v356, v354, v355);
            *((_QWORD *)v346 + 18) = v357;
          }
          v358 = &v325[v326];
          *(_QWORD *)&v325[v326 + 160] = 0;
          *((_QWORD *)v358 + 21) = 0;
          *((_QWORD *)v358 + 22) = 0;
          v360 = *(_BYTE **)(v338 + 160);
          v359 = *(_BYTE **)(v338 + 168);
          v361 = v359 - v360;
          if (v359 != v360)
          {
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v361 >> 3)) > 0x492492492492492)
              goto LABEL_418;
            v327 = (char *)operator new(v361);
            *(_QWORD *)&v325[v326 + 160] = v327;
            v328 = &v327[8 * (v361 >> 3)];
            *((_QWORD *)v358 + 21) = v327;
            *((_QWORD *)v358 + 22) = v328;
            memcpy(v327, v360, v361);
            *((_QWORD *)v358 + 21) = v328;
          }
          *(_OWORD *)(v358 + 184) = *(_OWORD *)(v338 + 184);
          v329 = *(_OWORD *)(v338 + 200);
          *((_QWORD *)v358 + 27) = *(_QWORD *)(v338 + 216);
          *(_OWORD *)(v358 + 200) = v329;
          v330 = *(_OWORD *)(v338 + 224);
          v331 = *(_OWORD *)(v338 + 240);
          v332 = *(_OWORD *)(v338 + 256);
          *(_QWORD *)(v358 + 269) = *(_QWORD *)(v338 + 269);
          *((_OWORD *)v358 + 15) = v331;
          *((_OWORD *)v358 + 16) = v332;
          *((_OWORD *)v358 + 14) = v330;
          v334 = *(_OWORD *)(v338 + 344);
          v333 = *(_OWORD *)(v338 + 360);
          v335 = *(_OWORD *)(v338 + 328);
          *(_OWORD *)(v358 + 373) = *(_OWORD *)(v338 + 373);
          *(_OWORD *)(v358 + 344) = v334;
          *(_OWORD *)(v358 + 360) = v333;
          *(_OWORD *)(v358 + 328) = v335;
          v336 = *(_OWORD *)(v338 + 280);
          v337 = *(_OWORD *)(v338 + 312);
          *(_OWORD *)(v358 + 296) = *(_OWORD *)(v338 + 296);
          *(_OWORD *)(v358 + 312) = v337;
          *(_OWORD *)(v358 + 280) = v336;
          v326 += 392;
        }
        while (v338 + 392 != v450);
        v362 = &v325[v326];
        v322 = v439;
        v316 = v442;
        v439[6] = (uint64_t)v362;
        v230 = v446;
      }
      v322[10] = 0;
      v322[9] = 0;
      v322[8] = (uint64_t)(v322 + 9);
      std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>(v322 + 8, v464, (int *)&v465);
      *v322 = 0;
      v322[1] = 0;
      v322[2] = (uint64_t)v320;
      *v318 = v322;
      v363 = (uint64_t *)**v316;
      if (v363)
      {
        *v316 = v363;
        v322 = *v318;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v316[1], v322);
      v316[2] = (uint64_t *)((char *)v316[2] + 1);
LABEL_375:
      cricket::VoiceMediaSendInfo::~VoiceMediaSendInfo((char **)&v461 + 1);
      cricket::VoiceMediaSendInfo::~VoiceMediaSendInfo((char **)__p);
      v364 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 80))(v230);
      v365 = (uint64_t **)*((_QWORD *)v426 + 3);
      __p[0] = 0;
      __p[1] = 0;
      v458 = 0uLL;
      *(_QWORD *)&v457 = 0;
      *((_QWORD *)&v457 + 1) = &v458;
      LODWORD(v459) = 0;
      v462 = 0;
      v463 = 0;
      v465 = 0;
      v466 = 0;
      v461 = (unint64_t)v364;
      v464 = (int *)&v465;
      std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)&v464, (int *)&v458, (int *)&v458);
      v467 = (int)v459;
      v366 = v461;
      v368 = (uint64_t *)(v365 + 1);
      v367 = v365[1];
      if (v367)
      {
        do
        {
          while (1)
          {
            v369 = v367;
            v370 = v367[4];
            if (v370 <= (unint64_t)v461)
              break;
            v367 = (uint64_t *)*v369;
            v368 = v369;
            if (!*v369)
              goto LABEL_382;
          }
          if (v370 >= (unint64_t)v461)
            goto LABEL_399;
          v367 = (uint64_t *)v369[1];
        }
        while (v367);
        v368 = v369 + 1;
      }
      else
      {
        v369 = (uint64_t *)(v365 + 1);
      }
LABEL_382:
      v371 = operator new(0x60uLL);
      v371[4] = v366;
      v371[5] = 0;
      v371[6] = 0;
      v371[7] = 0;
      v451 = v462;
      v455 = *((_QWORD *)&v461 + 1);
      v372 = v462 - *((_QWORD *)&v461 + 1);
      if (v462 != *((_QWORD *)&v461 + 1))
      {
        v443 = v365;
        v447 = v371;
        v373 = 0xF83E0F83E0F83E1 * (v372 >> 4);
        if (v373 > 0x7C1F07C1F07C1FLL)
          goto LABEL_418;
        v374 = (char *)operator new(v372);
        v375 = 0;
        v447[5] = v374;
        v447[6] = v374;
        v447[7] = &v374[528 * v373];
        do
        {
          v393 = v455 + v375;
          v394 = &v374[v375];
          v395 = *(_OWORD *)(v455 + v375);
          v396 = *(_OWORD *)(v455 + v375 + 16);
          v397 = *(_OWORD *)(v455 + v375 + 48);
          *((_OWORD *)v394 + 2) = *(_OWORD *)(v455 + v375 + 32);
          *((_OWORD *)v394 + 3) = v397;
          *(_OWORD *)v394 = v395;
          *((_OWORD *)v394 + 1) = v396;
          v398 = *(_OWORD *)(v455 + v375 + 64);
          v399 = *(_OWORD *)(v455 + v375 + 80);
          v400 = *(_OWORD *)(v455 + v375 + 96);
          *(_OWORD *)(v394 + 105) = *(_OWORD *)(v455 + v375 + 105);
          *((_OWORD *)v394 + 5) = v399;
          *((_OWORD *)v394 + 6) = v400;
          *((_OWORD *)v394 + 4) = v398;
          v401 = (std::string *)&v374[v375 + 128];
          v402 = (const std::string::value_type **)(v455 + v375 + 128);
          if (*(char *)(v455 + v375 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v401, *v402, *(_QWORD *)(v393 + 136));
          }
          else
          {
            v403 = *(_OWORD *)v402;
            *(_QWORD *)&v374[v375 + 144] = *(_QWORD *)(v393 + 144);
            *(_OWORD *)&v401->__r_.__value_.__l.__data_ = v403;
          }
          v404 = &v374[v375];
          *((_QWORD *)v404 + 19) = *(_QWORD *)(v393 + 152);
          *((_QWORD *)v404 + 20) = 0;
          *((_QWORD *)v404 + 21) = 0;
          *((_QWORD *)v404 + 22) = 0;
          v406 = *(_BYTE **)(v393 + 160);
          v405 = *(_BYTE **)(v393 + 168);
          v407 = v405 - v406;
          if (v405 != v406)
          {
            if (v407 < 0)
              goto LABEL_418;
            v408 = (char *)operator new(v405 - v406);
            *((_QWORD *)v404 + 20) = v408;
            *((_QWORD *)v404 + 21) = v408;
            v409 = &v408[16 * (v407 >> 4)];
            *((_QWORD *)v404 + 22) = v409;
            memcpy(v408, v406, v407);
            *((_QWORD *)v404 + 21) = v409;
          }
          *((_QWORD *)v404 + 23) = 0;
          *((_QWORD *)v404 + 24) = 0;
          *((_QWORD *)v404 + 25) = 0;
          v411 = *(_BYTE **)(v393 + 184);
          v410 = *(_BYTE **)(v393 + 192);
          v412 = v410 - v411;
          if (v410 != v411)
          {
            if (v412 < 0)
              goto LABEL_418;
            v413 = (char *)operator new(v410 - v411);
            *((_QWORD *)v404 + 23) = v413;
            v414 = &v413[16 * (v412 >> 4)];
            *((_QWORD *)v404 + 24) = v413;
            *((_QWORD *)v404 + 25) = v414;
            memcpy(v413, v411, v412);
            *((_QWORD *)v404 + 24) = v414;
          }
          v376 = &v374[v375];
          *((_OWORD *)v376 + 13) = *(_OWORD *)(v393 + 208);
          v377 = *(_OWORD *)(v393 + 224);
          v378 = *(_OWORD *)(v393 + 240);
          v379 = *(_OWORD *)(v393 + 272);
          *((_OWORD *)v376 + 16) = *(_OWORD *)(v393 + 256);
          *((_OWORD *)v376 + 17) = v379;
          *((_OWORD *)v376 + 14) = v377;
          *((_OWORD *)v376 + 15) = v378;
          v380 = *(_OWORD *)(v393 + 288);
          v381 = *(_OWORD *)(v393 + 304);
          v382 = *(_OWORD *)(v393 + 320);
          *((_DWORD *)v376 + 84) = *(_DWORD *)(v393 + 336);
          *((_OWORD *)v376 + 19) = v381;
          *((_OWORD *)v376 + 20) = v382;
          *((_OWORD *)v376 + 18) = v380;
          v383 = &v374[v375 + 340];
          v384 = *(_OWORD *)(v393 + 340);
          v385 = *(_OWORD *)(v393 + 356);
          v386 = *(_OWORD *)(v393 + 388);
          *((_OWORD *)v383 + 2) = *(_OWORD *)(v393 + 372);
          *((_OWORD *)v383 + 3) = v386;
          *(_OWORD *)v383 = v384;
          *((_OWORD *)v383 + 1) = v385;
          v387 = *(_OWORD *)(v393 + 404);
          v388 = *(_OWORD *)(v393 + 420);
          v389 = *(_OWORD *)(v393 + 452);
          *((_OWORD *)v383 + 6) = *(_OWORD *)(v393 + 436);
          *((_OWORD *)v383 + 7) = v389;
          *((_OWORD *)v383 + 4) = v387;
          *((_OWORD *)v383 + 5) = v388;
          v390 = *(_OWORD *)(v393 + 468);
          v391 = *(_OWORD *)(v393 + 484);
          v392 = *(_OWORD *)(v393 + 500);
          *((_OWORD *)v376 + 32) = *(_OWORD *)(v393 + 512);
          *((_OWORD *)v383 + 9) = v391;
          *((_OWORD *)v383 + 10) = v392;
          *((_OWORD *)v383 + 8) = v390;
          v375 += 528;
        }
        while (v393 + 528 != v451);
        v415 = &v374[v375];
        v365 = v443;
        v371 = v447;
        v447[6] = v415;
      }
      v371[10] = 0;
      v371[9] = 0;
      v371[8] = v371 + 9;
      std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>(v371 + 8, v464, (int *)&v465);
      *((_DWORD *)v371 + 22) = v467;
      *v371 = 0;
      v371[1] = 0;
      v371[2] = v369;
      *v368 = (uint64_t)v371;
      v416 = (uint64_t *)**v365;
      if (v416)
      {
        *v365 = v416;
        v371 = (_QWORD *)*v368;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v365[1], v371);
      v365[2] = (uint64_t *)((char *)v365[2] + 1);
LABEL_399:
      cricket::VoiceMediaReceiveInfo::~VoiceMediaReceiveInfo((char **)&v461 + 1);
      cricket::VoiceMediaReceiveInfo::~VoiceMediaReceiveInfo((char **)__p);
      goto LABEL_4;
    }
    if (*(v245 - 481) < 0)
      operator delete(*(void **)v248);
    v249 = v461;
    *((_QWORD *)v248 + 2) = v462;
    *(_OWORD *)v248 = v249;
    if (v6 != 1)
      goto LABEL_346;
LABEL_297:
    v250 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 48))(v230);
    v251 = (uint64_t **)*((_QWORD *)v426 + 4);
    v460[0] = 0;
    v460[1] = 0;
    *(_OWORD *)__p = 0u;
    v457 = 0u;
    v458 = 0u;
    v459 = v460;
    *(_QWORD *)&v461 = v250;
    cricket::VideoMediaSendInfo::VideoMediaSendInfo((cricket::VideoMediaSendInfo *)((char *)&v461 + 8), (const cricket::VideoMediaSendInfo *)__p);
    v253 = v251 + 1;
    v252 = v251[1];
    v254 = v461;
    if (v252)
    {
      while (1)
      {
        while (1)
        {
          v255 = (uint64_t **)v252;
          v256 = v252[4];
          if ((unint64_t)v461 >= v256)
            break;
          v252 = *v255;
          v253 = v255;
          if (!*v255)
            goto LABEL_304;
        }
        if (v256 >= (unint64_t)v461)
          break;
        v252 = v255[1];
        if (!v252)
        {
          v253 = v255 + 1;
          goto LABEL_304;
        }
      }
    }
    else
    {
      v255 = v251 + 1;
LABEL_304:
      v257 = (uint64_t *)operator new(0x70uLL);
      v257[4] = v254;
      cricket::VideoMediaSendInfo::VideoMediaSendInfo((cricket::VideoMediaSendInfo *)(v257 + 5), (const cricket::VideoMediaSendInfo *)((char *)&v461 + 8));
      *v257 = 0;
      v257[1] = 0;
      v257[2] = (uint64_t)v255;
      *v253 = v257;
      v258 = (uint64_t *)**v251;
      if (v258)
      {
        *v251 = v258;
        v257 = *v253;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v251[1], v257);
      v251[2] = (uint64_t *)((char *)v251[2] + 1);
    }
    cricket::VideoMediaSendInfo::~VideoMediaSendInfo((char **)&v461 + 1);
    cricket::VideoMediaSendInfo::~VideoMediaSendInfo((char **)__p);
    v259 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v230 + 72))(v230);
    v260 = (uint64_t **)*((_QWORD *)v426 + 5);
    __p[0] = 0;
    __p[1] = 0;
    v458 = 0uLL;
    *(_QWORD *)&v457 = 0;
    *((_QWORD *)&v457 + 1) = &v458;
    v462 = 0;
    v463 = 0;
    v465 = 0;
    v466 = 0;
    v461 = (unint64_t)v259;
    v464 = (int *)&v465;
    std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)&v464, (int *)&v458, (int *)&v458);
    v262 = v260 + 1;
    v261 = v260[1];
    v263 = v461;
    if (v261)
    {
      do
      {
        while (1)
        {
          v264 = (uint64_t **)v261;
          v265 = v261[4];
          if ((unint64_t)v461 >= v265)
            break;
          v261 = *v264;
          v262 = v264;
          if (!*v264)
            goto LABEL_314;
        }
        if (v265 >= (unint64_t)v461)
          goto LABEL_404;
        v261 = v264[1];
      }
      while (v261);
      v262 = v264 + 1;
    }
    else
    {
      v264 = v260 + 1;
    }
LABEL_314:
    v266 = (uint64_t *)operator new(0x58uLL);
    v266[4] = v263;
    v266[5] = 0;
    v266[6] = 0;
    v266[7] = 0;
    v267 = (__int128 *)*((_QWORD *)&v461 + 1);
    v453 = v462;
    v268 = v462 - *((_QWORD *)&v461 + 1);
    if (v462 == *((_QWORD *)&v461 + 1))
      goto LABEL_401;
    v445 = v260;
    v449 = v266;
    v438 = v262;
    v441 = v264;
    v269 = 0x2FD2FD2FD2FD2FD3 * (v268 >> 3);
    if (v269 >= 0x5A05A05A05A05BLL)
LABEL_418:
      abort();
    v270 = (char *)operator new(v268);
    v266[5] = (uint64_t)v270;
    v266[6] = (uint64_t)v270;
    v266[7] = (uint64_t)&v270[728 * v269];
    do
    {
      v271 = *v267;
      v272 = v267[1];
      v273 = v267[3];
      *((_OWORD *)v270 + 2) = v267[2];
      *((_OWORD *)v270 + 3) = v273;
      *(_OWORD *)v270 = v271;
      *((_OWORD *)v270 + 1) = v272;
      v274 = v267[4];
      v275 = v267[5];
      v276 = v267[6];
      *(_OWORD *)(v270 + 105) = *(__int128 *)((char *)v267 + 105);
      *((_OWORD *)v270 + 5) = v275;
      *((_OWORD *)v270 + 6) = v276;
      *((_OWORD *)v270 + 4) = v274;
      v277 = (std::string *)(v270 + 128);
      if (*((char *)v267 + 151) < 0)
      {
        std::string::__init_copy_ctor_external(v277, *((const std::string::value_type **)v267 + 16), *((_QWORD *)v267 + 17));
        *((_QWORD *)v270 + 19) = *((_QWORD *)v267 + 19);
        *((_QWORD *)v270 + 20) = 0;
        *((_QWORD *)v270 + 21) = 0;
        *((_QWORD *)v270 + 22) = 0;
        v280 = (_BYTE *)*((_QWORD *)v267 + 20);
        v287 = (_BYTE *)*((_QWORD *)v267 + 21);
        v281 = v287 - v280;
        if (v287 != v280)
        {
LABEL_322:
          if (v281 < 0)
            goto LABEL_418;
          v282 = (char *)operator new(v281);
          *((_QWORD *)v270 + 20) = v282;
          *((_QWORD *)v270 + 21) = v282;
          v283 = &v282[16 * (v281 >> 4)];
          *((_QWORD *)v270 + 22) = v283;
          memcpy(v282, v280, v281);
          *((_QWORD *)v270 + 21) = v283;
          *((_QWORD *)v270 + 23) = 0;
          *((_QWORD *)v270 + 24) = 0;
          *((_QWORD *)v270 + 25) = 0;
          v285 = (_BYTE *)*((_QWORD *)v267 + 23);
          v284 = (_BYTE *)*((_QWORD *)v267 + 24);
          v286 = v284 - v285;
          if (v284 == v285)
            goto LABEL_329;
          goto LABEL_327;
        }
      }
      else
      {
        v278 = v267[8];
        *((_QWORD *)v270 + 18) = *((_QWORD *)v267 + 18);
        *(_OWORD *)&v277->__r_.__value_.__l.__data_ = v278;
        *((_QWORD *)v270 + 19) = *((_QWORD *)v267 + 19);
        *((_QWORD *)v270 + 20) = 0;
        *((_QWORD *)v270 + 21) = 0;
        *((_QWORD *)v270 + 22) = 0;
        v280 = (_BYTE *)*((_QWORD *)v267 + 20);
        v279 = (_BYTE *)*((_QWORD *)v267 + 21);
        v281 = v279 - v280;
        if (v279 != v280)
          goto LABEL_322;
      }
      *((_QWORD *)v270 + 23) = 0;
      *((_QWORD *)v270 + 24) = 0;
      *((_QWORD *)v270 + 25) = 0;
      v285 = (_BYTE *)*((_QWORD *)v267 + 23);
      v288 = (_BYTE *)*((_QWORD *)v267 + 24);
      v286 = v288 - v285;
      if (v288 == v285)
        goto LABEL_329;
LABEL_327:
      if (v286 < 0)
        goto LABEL_418;
      v289 = (char *)operator new(v286);
      *((_QWORD *)v270 + 23) = v289;
      *((_QWORD *)v270 + 24) = v289;
      v290 = &v289[16 * (v286 >> 4)];
      *((_QWORD *)v270 + 25) = v290;
      memcpy(v289, v285, v286);
      *((_QWORD *)v270 + 24) = v290;
LABEL_329:
      *((_OWORD *)v270 + 13) = v267[13];
      v291 = v267[14];
      v292 = v267[15];
      v293 = v267[17];
      *((_OWORD *)v270 + 16) = v267[16];
      *((_OWORD *)v270 + 17) = v293;
      *((_OWORD *)v270 + 14) = v291;
      *((_OWORD *)v270 + 15) = v292;
      v294 = v267[18];
      v295 = v267[19];
      v296 = v267[20];
      *((_DWORD *)v270 + 84) = *((_DWORD *)v267 + 84);
      *((_OWORD *)v270 + 19) = v295;
      *((_OWORD *)v270 + 20) = v296;
      *((_OWORD *)v270 + 18) = v294;
      *((_QWORD *)v270 + 44) = 0;
      *((_QWORD *)v270 + 45) = 0;
      *((_QWORD *)v270 + 43) = 0;
      v297 = *((_QWORD *)v267 + 43);
      v298 = *((_QWORD *)v267 + 44);
      v299 = v298 - v297;
      if (v298 != v297)
      {
        v300 = 0xAAAAAAAAAAAAAAABLL * (v299 >> 4);
        if (v300 >= 0x555555555555556)
          goto LABEL_418;
        v301 = (char *)operator new(v299);
        v302 = 0;
        *((_QWORD *)v270 + 43) = v301;
        *((_QWORD *)v270 + 44) = v301;
        *((_QWORD *)v270 + 45) = &v301[48 * v300];
        do
        {
          v305 = (std::string *)&v301[v302];
          v306 = (__int128 *)(v297 + v302);
          if (*(char *)(v297 + v302 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v305, *(const std::string::value_type **)v306, *((_QWORD *)v306 + 1));
          }
          else
          {
            v307 = *v306;
            v305->__r_.__value_.__r.__words[2] = *((_QWORD *)v306 + 2);
            *(_OWORD *)&v305->__r_.__value_.__l.__data_ = v307;
          }
          v308 = &v301[v302];
          *((_QWORD *)v308 + 3) = 0;
          *((_QWORD *)v308 + 4) = 0;
          *((_QWORD *)v308 + 5) = 0;
          v310 = *(_BYTE **)(v297 + v302 + 24);
          v309 = *(_BYTE **)(v297 + v302 + 32);
          v311 = v309 - v310;
          if (v309 != v310)
          {
            if (v311 < 0)
              goto LABEL_418;
            v303 = (char *)operator new(v309 - v310);
            *((_QWORD *)v308 + 3) = v303;
            *((_QWORD *)v308 + 4) = v303;
            v304 = &v303[4 * (v311 >> 2)];
            *((_QWORD *)v308 + 5) = v304;
            memcpy(v303, v310, v311);
            *((_QWORD *)v308 + 4) = v304;
          }
          v302 += 48;
        }
        while (v297 + v302 != v298);
        *((_QWORD *)v270 + 44) = &v301[v302];
      }
      v270[368] = 0;
      v270[392] = 0;
      if (*((_BYTE *)v267 + 392))
      {
        v312 = (std::string *)(v270 + 368);
        if (*((char *)v267 + 391) < 0)
        {
          std::string::__init_copy_ctor_external(v312, *((const std::string::value_type **)v267 + 46), *((_QWORD *)v267 + 47));
        }
        else
        {
          v313 = v267[23];
          *((_QWORD *)v270 + 48) = *((_QWORD *)v267 + 48);
          *(_OWORD *)&v312->__r_.__value_.__l.__data_ = v313;
        }
        v270[392] = 1;
      }
      memcpy(v270 + 400, v267 + 25, 0x141uLL);
      v267 = (__int128 *)((char *)v267 + 728);
      v270 += 728;
    }
    while (v267 != (__int128 *)v453);
    v260 = v445;
    v266 = v449;
    v449[6] = (uint64_t)v270;
    v262 = v438;
    v264 = v441;
LABEL_401:
    v266[10] = 0;
    v266[9] = 0;
    v266[8] = (uint64_t)(v266 + 9);
    std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>(v266 + 8, v464, (int *)&v465);
    *v266 = 0;
    v266[1] = 0;
    v266[2] = (uint64_t)v264;
    *v262 = v266;
    v417 = (uint64_t *)**v260;
    if (v417)
    {
      *v260 = v417;
      v266 = *v262;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v260[1], v266);
    v260[2] = (uint64_t *)((char *)v260[2] + 1);
LABEL_404:
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v464, v465);
    v418 = *((_QWORD *)&v461 + 1);
    if (*((_QWORD *)&v461 + 1))
    {
      v419 = v462;
      v420 = (void *)*((_QWORD *)&v461 + 1);
      if (v462 != *((_QWORD *)&v461 + 1))
      {
        do
          cricket::VideoReceiverInfo::~VideoReceiverInfo((void **)(v419 - 728));
        while (v419 != v418);
        v420 = (void *)*((_QWORD *)&v461 + 1);
      }
      v462 = v418;
      operator delete(v420);
    }
    std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::destroy((uint64_t)&v457 + 8, (char *)v458);
    v421 = (void **)__p[0];
    if (__p[0])
    {
      v422 = (void **)__p[1];
      v423 = __p[0];
      if (__p[1] != __p[0])
      {
        do
          cricket::VideoReceiverInfo::~VideoReceiverInfo(v422 - 91);
        while (v422 != v421);
        v423 = __p[0];
      }
      __p[1] = v421;
      operator delete(v423);
    }
LABEL_4:
    v4 = v430 + 8;
    if (v430 + 8 != v428)
      continue;
    break;
  }
LABEL_416:
  v425[217] = v424;
}

cricket::VoiceMediaInfo *cricket::VoiceMediaInfo::VoiceMediaInfo(cricket::VoiceMediaInfo *this, const cricket::VoiceMediaInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    v7 = 0x7D6343EB1A1F58D1 * (v6 >> 3);
    if (v7 >= 0xA72F05397829CCLL)
      goto LABEL_12;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[392 * v7];
    do
    {
      v10 = cricket::MediaSenderInfo::MediaSenderInfo((uint64_t)&v8[v9], v4 + v9);
      v11 = *(_OWORD *)(v4 + v9 + 200);
      *(_QWORD *)(v10 + 216) = *(_QWORD *)(v4 + v9 + 216);
      *(_OWORD *)(v10 + 200) = v11;
      v12 = *(_OWORD *)(v4 + v9 + 224);
      v13 = *(_OWORD *)(v4 + v9 + 240);
      v14 = *(_OWORD *)(v4 + v9 + 256);
      *(_QWORD *)(v10 + 269) = *(_QWORD *)(v4 + v9 + 269);
      *(_OWORD *)(v10 + 240) = v13;
      *(_OWORD *)(v10 + 256) = v14;
      *(_OWORD *)(v10 + 224) = v12;
      v16 = *(_OWORD *)(v4 + v9 + 344);
      v15 = *(_OWORD *)(v4 + v9 + 360);
      v17 = *(_OWORD *)(v4 + v9 + 328);
      *(_OWORD *)(v10 + 373) = *(_OWORD *)(v4 + v9 + 373);
      *(_OWORD *)(v10 + 344) = v16;
      *(_OWORD *)(v10 + 360) = v15;
      *(_OWORD *)(v10 + 328) = v17;
      v18 = *(_OWORD *)(v4 + v9 + 280);
      v19 = *(_OWORD *)(v4 + v9 + 312);
      *(_OWORD *)(v10 + 296) = *(_OWORD *)(v4 + v9 + 296);
      *(_OWORD *)(v10 + 312) = v19;
      *(_OWORD *)(v10 + 280) = v18;
      v9 += 392;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v20 = *((_QWORD *)a2 + 3);
  v21 = *((_QWORD *)a2 + 4);
  v22 = v21 - v20;
  if (v21 == v20)
    goto LABEL_11;
  v23 = 0xF83E0F83E0F83E1 * (v22 >> 4);
  if (v23 >= 0x7C1F07C1F07C20)
LABEL_12:
    abort();
  v24 = (char *)operator new(v22);
  v25 = 0;
  *((_QWORD *)this + 3) = v24;
  *((_QWORD *)this + 4) = v24;
  *((_QWORD *)this + 5) = &v24[528 * v23];
  do
  {
    v26 = (_OWORD *)cricket::MediaReceiverInfo::MediaReceiverInfo((uint64_t)&v24[v25], (__int128 *)(v20 + v25));
    v27 = *(_OWORD *)(v20 + v25 + 340);
    v28 = *(_OWORD *)(v20 + v25 + 356);
    v29 = *(_OWORD *)(v20 + v25 + 388);
    *(_OWORD *)((char *)v26 + 372) = *(_OWORD *)(v20 + v25 + 372);
    *(_OWORD *)((char *)v26 + 388) = v29;
    *(_OWORD *)((char *)v26 + 340) = v27;
    *(_OWORD *)((char *)v26 + 356) = v28;
    v30 = *(_OWORD *)(v20 + v25 + 404);
    v31 = *(_OWORD *)(v20 + v25 + 420);
    v32 = *(_OWORD *)(v20 + v25 + 452);
    *(_OWORD *)((char *)v26 + 436) = *(_OWORD *)(v20 + v25 + 436);
    *(_OWORD *)((char *)v26 + 452) = v32;
    *(_OWORD *)((char *)v26 + 404) = v30;
    *(_OWORD *)((char *)v26 + 420) = v31;
    v33 = *(_OWORD *)(v20 + v25 + 468);
    v34 = *(_OWORD *)(v20 + v25 + 484);
    v35 = *(_OWORD *)(v20 + v25 + 500);
    v26[32] = *(_OWORD *)(v20 + v25 + 512);
    *(_OWORD *)((char *)v26 + 484) = v34;
    *(_OWORD *)((char *)v26 + 500) = v35;
    *(_OWORD *)((char *)v26 + 468) = v33;
    v25 += 528;
  }
  while (v20 + v25 != v21);
  *((_QWORD *)this + 4) = &v24[v25];
LABEL_11:
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)this + 6, *((int **)a2 + 6), (int *)a2 + 14);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)this + 9, *((int **)a2 + 9), (int *)a2 + 20);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  return this;
}

uint64_t *std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  int *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17[11];

  if (a2 != a3)
  {
    v17[9] = v3;
    v17[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>(v7, v8, v17, &v16, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x98uLL);
        v11[8] = v6[8];
        webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v11 + 10), (const webrtc::RtpCodec *)(v6 + 10));
        *((_QWORD *)v11 + 5) = off_24C0BCC30;
        v11[36] = v6[36];
        v12 = v17[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v11 = (_DWORD *)*v10;
        }
        result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], (uint64_t *)v11);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_10:
            v14 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v14 = (int *)*((_QWORD *)v6 + 2);
        v15 = *(_QWORD *)v14 == (_QWORD)v6;
        v6 = v14;
      }
      while (!v15);
LABEL_3:
      v6 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

cricket::VideoMediaInfo *cricket::VideoMediaInfo::VideoMediaInfo(cricket::VideoMediaInfo *this, const cricket::VideoMediaInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    v7 = 0x823EE08FB823EE09 * (v6 >> 3);
    if (v7 > 0x8FB823EE08FB82)
      goto LABEL_17;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[456 * v7];
    do
    {
      cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v8[v9], v4 + v9);
      v9 += 456;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  v12 = v11 - v10;
  if (v11 != v10)
  {
    v13 = 0x823EE08FB823EE09 * (v12 >> 3);
    if (v13 > 0x8FB823EE08FB82)
      goto LABEL_17;
    v14 = (char *)operator new(v12);
    v15 = 0;
    *((_QWORD *)this + 3) = v14;
    *((_QWORD *)this + 4) = v14;
    *((_QWORD *)this + 5) = &v14[456 * v13];
    do
    {
      cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v14[v15], v10 + v15);
      v15 += 456;
    }
    while (v10 + v15 != v11);
    *((_QWORD *)this + 4) = &v14[v15];
  }
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v16 = *((_QWORD *)a2 + 6);
  v17 = *((_QWORD *)a2 + 7);
  v18 = v17 - v16;
  if (v17 == v16)
    goto LABEL_16;
  v19 = 0x2FD2FD2FD2FD2FD3 * (v18 >> 3);
  if (v19 >= 0x5A05A05A05A05BLL)
LABEL_17:
    abort();
  v20 = (char *)operator new(v18);
  v21 = 0;
  *((_QWORD *)this + 6) = v20;
  *((_QWORD *)this + 7) = v20;
  *((_QWORD *)this + 8) = &v20[728 * v19];
  do
  {
    std::construct_at[abi:sn180100]<cricket::VideoReceiverInfo,cricket::VideoReceiverInfo&,cricket::VideoReceiverInfo*>((uint64_t)&v20[v21], v16 + v21);
    v21 += 728;
  }
  while (v16 + v21 != v17);
  *((_QWORD *)this + 7) = &v20[v21];
LABEL_16:
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)this + 9, *((int **)a2 + 9), (int *)a2 + 20);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = (char *)this + 104;
  std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)this + 12, *((int **)a2 + 12), (int *)a2 + 26);
  return this;
}

cricket::VideoMediaSendInfo *cricket::VideoMediaSendInfo::VideoMediaSendInfo(cricket::VideoMediaSendInfo *this, const cricket::VideoMediaSendInfo *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    v7 = 0x823EE08FB823EE09 * (v6 >> 3);
    if (v7 > 0x8FB823EE08FB82)
      goto LABEL_12;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[456 * v7];
    do
    {
      cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v8[v9], v4 + v9);
      v9 += 456;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  v12 = v11 - v10;
  if (v11 == v10)
    goto LABEL_11;
  v13 = 0x823EE08FB823EE09 * (v12 >> 3);
  if (v13 > 0x8FB823EE08FB82)
LABEL_12:
    abort();
  v14 = (char *)operator new(v12);
  v15 = 0;
  *((_QWORD *)this + 3) = v14;
  *((_QWORD *)this + 4) = v14;
  *((_QWORD *)this + 5) = &v14[456 * v13];
  do
  {
    cricket::VideoSenderInfo::VideoSenderInfo((uint64_t)&v14[v15], v10 + v15);
    v15 += 456;
  }
  while (v10 + v15 != v11);
  *((_QWORD *)this + 4) = &v14[v15];
LABEL_11:
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  std::map<int,webrtc::RtpCodecParameters>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>>((uint64_t *)this + 6, *((int **)a2 + 6), (int *)a2 + 14);
  return this;
}

double rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::PrepareTransceiverStatsInfosAndCallStats_s_w_n(void)::$_2>(rtc::Thread *a1)
{
  unint64_t v1;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t **v61;
  uint64_t *v62;
  uint64_t **v63;
  _QWORD *v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t **v69;
  char *v70;
  uint64_t **v71;
  char *v72;
  unint64_t v73;
  char *v74;
  uint64_t *v75;
  uint64_t *v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t **v85;
  char *v86;
  uint64_t **v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t **v93;
  uint64_t *v94;
  uint64_t **v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t *v99;
  uint64_t *v100;
  char *v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  char *v114;
  uint64_t v115;
  void (***v116)(_QWORD);
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  void (***v122)(_QWORD);
  int64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  int64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  size_t v150;
  char *v151;
  uint64_t v152;
  void (***v153)(_QWORD);
  unint64_t v154;
  char *v155;
  char *v156;
  char *v157;
  void (***v158)(_QWORD);
  int64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  int64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  int64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  BOOL v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  double result;
  char v194;
  _BYTE *v195;
  _QWORD *v196;
  uint64_t v197;
  char *v198;
  _QWORD *v199;
  rtc::Thread *v200;
  int v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208[15];
  char v209;
  char *v210[13];
  char v211;
  char *v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  uint64_t v222;
  __int128 v224;
  _BYTE v225[25];
  uint64_t v226[3];
  uint64_t v227;
  uint64_t v228;
  char v229;
  char *v230[3];
  uint64_t v231[3];
  uint64_t v232;
  _DWORD v233[8];
  char v234;

  v196 = (_QWORD *)*((_QWORD *)a1 + 4);
  v3 = rtc::Thread::Current(a1);
  v194 = v3[217];
  v195 = v3;
  v3[217] = 0;
  v200 = a1;
  v4 = *(_QWORD *)a1 + 8;
  v5 = **(_QWORD ***)a1;
  if (v5 != (_QWORD *)v4)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v5[4] + 224))(v5[4], v5 + 5) & 1) == 0
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x4202;
        rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
      }
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v185 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v185);
      }
      v5 = v14;
    }
    while (v14 != (_QWORD *)v4);
  }
  v15 = (_QWORD *)*((_QWORD *)a1 + 1);
  v18 = (_QWORD *)*v15;
  v16 = v15 + 1;
  v17 = v18;
  if (v18 != v16)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD *, _QWORD))(*(_QWORD *)v17[4] + 216))(v17[4], v17 + 5, 0) & 1) == 0
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x4232;
        rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
      }
      v26 = (_QWORD *)v17[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v17[2];
          v185 = *v27 == (_QWORD)v17;
          v17 = v27;
        }
        while (!v185);
      }
      v17 = v27;
    }
    while (v27 != v16);
  }
  v28 = (_QWORD *)*((_QWORD *)a1 + 2);
  v31 = (_QWORD *)*v28;
  v29 = v28 + 1;
  v30 = v31;
  if (v31 != v29)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v30[4] + 216))(v30[4], v30 + 5) & 1) == 0
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x425A;
        rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
      }
      v39 = (_QWORD *)v30[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v30[2];
          v185 = *v40 == (_QWORD)v30;
          v30 = v40;
        }
        while (!v185);
      }
      v30 = v40;
    }
    while (v40 != v29);
  }
  v41 = (_QWORD *)*((_QWORD *)a1 + 3);
  v44 = (_QWORD *)*v41;
  v42 = v41 + 1;
  v43 = v44;
  if (v44 != v42)
  {
    do
    {
      if (((*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v43[4] + 224))(v43[4], v43 + 5) & 1) == 0
        && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      {
        v1 = v1 & 0xFFFFFFFF00000000 | 0x4282;
        rtc::webrtc_logging_impl::Log("\r\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
      }
      v52 = (_QWORD *)v43[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (_QWORD *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (_QWORD *)v43[2];
          v185 = *v53 == (_QWORD)v43;
          v43 = v53;
        }
        while (!v185);
      }
      v43 = v53;
    }
    while (v53 != v42);
  }
  v54 = (_QWORD *)v196[27];
  v199 = (_QWORD *)v196[28];
  if (v54 != v199)
  {
    v55 = 0;
    while (1)
    {
      v56 = (_QWORD *)*v54;
      if (*v54)
        (*(void (**)(_QWORD))*v56)(*v54);
      LOBYTE(v230[0]) = 0;
      v234 = 0;
      LOBYTE(v224) = 0;
      v229 = 0;
      v57 = v56[20];
      if (v57)
      {
        v58 = (*(uint64_t (**)(_QWORD *))(*v56 + 32))(v56);
        if (v58 == 1)
        {
          v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 48))(v57);
          v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 72))(v57);
          v85 = (uint64_t **)*((_QWORD *)v200 + 2);
          v87 = v85 + 1;
          v86 = (char *)v85[1];
          if (v86)
          {
            while (1)
            {
              while (1)
              {
                v88 = v86;
                v89 = *((_QWORD *)v86 + 4);
                if (v83 >= v89)
                  break;
                v86 = *(char **)v88;
                v87 = (uint64_t **)v88;
                if (!*(_QWORD *)v88)
                  goto LABEL_86;
              }
              if (v89 >= v83)
                break;
              v86 = (char *)*((_QWORD *)v88 + 1);
              if (!v86)
              {
                v87 = (uint64_t **)(v88 + 8);
                goto LABEL_86;
              }
            }
          }
          else
          {
            v88 = (char *)(v85 + 1);
LABEL_86:
            v90 = v88;
            v88 = (char *)operator new(0x70uLL);
            *((_QWORD *)v88 + 4) = v83;
            *((_QWORD *)v88 + 12) = 0;
            *((_QWORD *)v88 + 13) = 0;
            *(_OWORD *)(v88 + 40) = 0u;
            *(_OWORD *)(v88 + 56) = 0u;
            *(_OWORD *)(v88 + 72) = 0u;
            *((_QWORD *)v88 + 11) = v88 + 96;
            *(_QWORD *)v88 = 0;
            *((_QWORD *)v88 + 1) = 0;
            *((_QWORD *)v88 + 2) = v90;
            *v87 = (uint64_t *)v88;
            v91 = (uint64_t *)**v85;
            v92 = (uint64_t *)v88;
            if (v91)
            {
              *v85 = v91;
              v92 = *v87;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v85[1], v92);
            v85[2] = (uint64_t *)((char *)v85[2] + 1);
          }
          v93 = (uint64_t **)*((_QWORD *)v200 + 3);
          v95 = v93 + 1;
          v94 = v93[1];
          if (v94)
          {
            while (1)
            {
              while (1)
              {
                v96 = v94;
                v97 = v94[4];
                if (v84 >= v97)
                  break;
                v94 = (uint64_t *)*v96;
                v95 = (uint64_t **)v96;
                if (!*v96)
                  goto LABEL_96;
              }
              if (v97 >= v84)
                break;
              v94 = (uint64_t *)v96[1];
              if (!v94)
              {
                v95 = (uint64_t **)(v96 + 1);
                goto LABEL_96;
              }
            }
          }
          else
          {
            v96 = v93 + 1;
LABEL_96:
            v98 = v96;
            v96 = operator new(0x58uLL);
            v96[4] = v84;
            v96[5] = 0;
            v96[6] = 0;
            v96[7] = 0;
            v96[10] = 0;
            v96[9] = 0;
            v96[8] = v96 + 9;
            *v96 = 0;
            v96[1] = 0;
            v96[2] = v98;
            *v95 = v96;
            v99 = (uint64_t *)**v93;
            v100 = v96;
            if (v99)
            {
              *v93 = v99;
              v100 = *v95;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v93[1], v100);
            v93[2] = (uint64_t *)((char *)v93[2] + 1);
          }
          v101 = (char *)*((_QWORD *)v88 + 5);
          v102 = *((_OWORD *)v88 + 3);
          v103 = *((_OWORD *)v88 + 4);
          *((_QWORD *)v88 + 6) = 0;
          *((_QWORD *)v88 + 7) = 0;
          *((_QWORD *)v88 + 5) = 0;
          v104 = *((_QWORD *)v88 + 10);
          v212 = v101;
          v215 = v104;
          *((_QWORD *)v88 + 8) = 0;
          *((_QWORD *)v88 + 9) = 0;
          *((_QWORD *)v88 + 10) = 0;
          v217 = 0;
          v216 = 0uLL;
          v216 = *(_OWORD *)(v96 + 5);
          v213 = v102;
          v217 = v96[7];
          v96[5] = 0;
          v96[6] = 0;
          v96[7] = 0;
          v105 = v88 + 96;
          v106 = *((_QWORD *)v88 + 12);
          v214 = v103;
          v218 = (uint64_t *)*((_QWORD *)v88 + 11);
          v219 = v106;
          v220 = *((_QWORD *)v88 + 13);
          if (v220)
          {
            *(_QWORD *)(v106 + 16) = &v219;
            *((_QWORD *)v88 + 11) = v105;
            *v105 = 0;
            *((_QWORD *)v88 + 13) = 0;
          }
          else
          {
            v218 = &v219;
          }
          v221 = (uint64_t *)v96[8];
          v109 = v96 + 9;
          v110 = v96[9];
          v222 = v110;
          if (v96[10])
          {
            *(_QWORD *)(v110 + 16) = &v222;
            v96[8] = v109;
            *v109 = 0;
            v96[10] = 0;
            if (v229)
              goto LABEL_108;
LABEL_242:
            cricket::VideoMediaInfo::VideoMediaInfo((cricket::VideoMediaInfo *)&v224, (const cricket::VideoMediaInfo *)&v212);
            v229 = 1;
          }
          else
          {
            v221 = &v222;
            if (!v229)
              goto LABEL_242;
LABEL_108:
            std::vector<cricket::VideoSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VideoSenderInfo*,cricket::VideoSenderInfo*>((uint64_t *)&v224, (uint64_t)v101, v102, 0x823EE08FB823EE09 * ((uint64_t)(v102 - (_QWORD)v101) >> 3));
            std::vector<cricket::VideoSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VideoSenderInfo*,cricket::VideoSenderInfo*>((uint64_t *)&v225[8], v214, *((uint64_t *)&v214 + 1), 0x823EE08FB823EE09 * ((uint64_t)(*((_QWORD *)&v214 + 1) - v214) >> 3));
            std::vector<cricket::VideoReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VideoReceiverInfo*,cricket::VideoReceiverInfo*>(v226, (__int128 *)v216, *((__int128 **)&v216 + 1), 0x2FD2FD2FD2FD2FD3 * ((uint64_t)(*((_QWORD *)&v216 + 1) - v216) >> 3));
            std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)&v227, v218, &v219);
            std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)&v228, v221, &v222);
          }
          cricket::VideoMediaInfo::~VideoMediaInfo(&v212);
          v111 = v56[4];
          v112 = v56[5];
          v113 = v112 - v111;
          v202 = v54;
          v203 = v56;
          v201 = v55;
          if (v112 == v111)
          {
LABEL_244:
            v118 = 0;
            v119 = 0;
            v148 = v203[7];
            v149 = v203[8];
            v150 = v149 - v148;
            if (v149 != v148)
              goto LABEL_161;
LABEL_245:
            v155 = 0;
            v156 = 0;
            LOBYTE(v210[0]) = 0;
            v211 = 0;
            if (v234)
              goto LABEL_208;
            goto LABEL_209;
          }
          goto LABEL_113;
        }
        if (!v58)
          break;
      }
LABEL_112:
      v111 = v56[4];
      v112 = v56[5];
      v113 = v112 - v111;
      v202 = v54;
      v203 = v56;
      v201 = v55;
      if (v112 == v111)
        goto LABEL_244;
LABEL_113:
      if ((v113 & 0x8000000000000000) != 0)
        goto LABEL_253;
      v114 = (char *)operator new(v113);
      v115 = 0;
      do
      {
        v116 = *(void (****)(_QWORD))(v111 + v115);
        *(_QWORD *)&v114[v115] = v116;
        if (v116)
          (**v116)(v116);
        v115 += 8;
      }
      while (v111 + v115 != v112);
      if (!v115)
      {
        v118 = 0;
        v119 = 0;
        goto LABEL_160;
      }
      v117 = 0;
      v118 = 0;
      v119 = 0;
      v204 = v115 >> 3;
      v206 = v114;
      v120 = &v114[v115 & 0xFFFFFFFFFFFFFFF8];
      v121 = v114;
      do
      {
        while (1)
        {
          v122 = *(void (****)(_QWORD))(*(_QWORD *)v121 + 24);
          if (v122)
            (**v122)(*(_QWORD *)(*(_QWORD *)v121 + 24));
          if (v118 < v117)
            break;
          v123 = v118 - v119;
          v124 = (v118 - v119) >> 3;
          v125 = v124 + 1;
          if ((unint64_t)(v124 + 1) >> 61)
            goto LABEL_253;
          if ((v117 - v119) >> 2 > v125)
            v125 = (v117 - v119) >> 2;
          if ((unint64_t)(v117 - v119) >= 0x7FFFFFFFFFFFFFF8)
            v125 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v125)
          {
LABEL_252:
            __break(1u);
LABEL_253:
            abort();
          }
          if (v125 >> 61)
LABEL_254:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v126 = 8 * v125;
          v127 = (char *)operator new(8 * v125);
          v128 = &v127[8 * v124];
          *(_QWORD *)v128 = v122;
          v129 = v128 + 8;
          v130 = v118 - v119;
          if (v118 != v119)
          {
            v131 = v130 - 8;
            if ((unint64_t)(v130 - 8) < 0x138)
            {
              v132 = v118;
              goto LABEL_137;
            }
            v137 = v118 - 8 - v119;
            if (&v118[-(v137 & 0xFFFFFFFFFFFFFFF8) - 8] > v118 - 8)
            {
              v132 = v118;
              goto LABEL_137;
            }
            if (&v127[v123 - 8 - (v137 & 0xFFFFFFFFFFFFFFF8)] > &v127[v123 - 8])
            {
              v132 = v118;
              goto LABEL_137;
            }
            v138 = v137 & 0xFFFFFFFFFFFFFFF8;
            if (&v118[-v138 - 8] < v128)
            {
              v132 = v118;
              if (&v127[v123 - v138 - 8] < v118)
                goto LABEL_257;
            }
            v139 = (v131 >> 3) + 1;
            v140 = 8 * (v139 & 0x3FFFFFFFFFFFFFFCLL);
            v132 = &v118[-v140];
            v128 -= v140;
            v141 = &v127[8 * v124 - 16];
            v142 = v118 - 16;
            v143 = v139 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v145 = *((_OWORD *)v142 - 1);
              v144 = *(_OWORD *)v142;
              *((_OWORD *)v142 - 1) = 0uLL;
              *(_OWORD *)v142 = 0uLL;
              *((_OWORD *)v141 - 1) = v145;
              *(_OWORD *)v141 = v144;
              v141 -= 32;
              v142 -= 32;
              v143 -= 4;
            }
            while (v143);
            if (v139 != (v139 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_257:
              do
              {
LABEL_137:
                v133 = *((_QWORD *)v132 - 1);
                v132 -= 8;
                *(_QWORD *)v132 = 0;
                *((_QWORD *)v128 - 1) = v133;
                v128 -= 8;
              }
              while (v132 != v119);
            }
            v134 = v127;
            do
            {
              v136 = *((_QWORD *)v118 - 1);
              v118 -= 8;
              v135 = v136;
              if (v136)
                (*(void (**)(uint64_t))(*(_QWORD *)v135 + 8))(v135);
            }
            while (v118 != v119);
            v127 = v134;
          }
          v117 = &v127[v126];
          if (v119)
            operator delete(v119);
          v119 = v128;
          v118 = v129;
          v121 += 8;
          if (v121 == v120)
            goto LABEL_155;
        }
        if (!v118)
          goto LABEL_252;
        *(_QWORD *)v118 = v122;
        v118 += 8;
        v121 += 8;
      }
      while (v121 != v120);
LABEL_155:
      v114 = v206;
      v146 = 8 * v204;
      do
      {
        v147 = *(_QWORD *)&v206[v146 - 8];
        if (v147)
          (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
        v146 -= 8;
      }
      while (v146);
LABEL_160:
      operator delete(v114);
      v148 = v203[7];
      v149 = v203[8];
      v150 = v149 - v148;
      if (v149 == v148)
        goto LABEL_245;
LABEL_161:
      if ((v150 & 0x8000000000000000) != 0)
        goto LABEL_253;
      v151 = (char *)operator new(v150);
      v152 = 0;
      do
      {
        v153 = *(void (****)(_QWORD))(v148 + v152);
        *(_QWORD *)&v151[v152] = v153;
        if (v153)
          (**v153)(v153);
        v152 += 8;
      }
      while (v148 + v152 != v149);
      if (!v152)
      {
        v155 = 0;
        v156 = 0;
        goto LABEL_207;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v197 = v152 >> 3;
      v198 = v151;
      v157 = &v151[v152 & 0xFFFFFFFFFFFFFFF8];
      v205 = v157;
      while (2)
      {
        while (2)
        {
          v158 = *(void (****)(_QWORD))(*(_QWORD *)v151 + 32);
          if (v158)
            (**v158)(*(_QWORD *)(*(_QWORD *)v151 + 32));
          if ((unint64_t)v155 >= v154)
          {
            v159 = v155 - v156;
            v160 = (v155 - v156) >> 3;
            v161 = v160 + 1;
            if ((unint64_t)(v160 + 1) >> 61)
              goto LABEL_253;
            if ((uint64_t)(v154 - (_QWORD)v156) >> 2 > v161)
              v161 = (uint64_t)(v154 - (_QWORD)v156) >> 2;
            if (v154 - (unint64_t)v156 >= 0x7FFFFFFFFFFFFFF8)
              v161 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v161)
              goto LABEL_252;
            if (v161 >> 61)
              goto LABEL_254;
            v207 = 8 * v161;
            v162 = (char *)operator new(8 * v161);
            v163 = v162;
            v164 = &v162[8 * v160];
            *(_QWORD *)v164 = v158;
            v165 = v164 + 8;
            v166 = v155 - v156;
            if (v155 != v156)
            {
              v167 = v166 - 8;
              if ((unint64_t)(v166 - 8) < 0x138)
              {
                v168 = v155;
                goto LABEL_185;
              }
              v170 = v155 - 8 - v156;
              if (&v155[-(v170 & 0xFFFFFFFFFFFFFFF8) - 8] > v155 - 8)
              {
                v168 = v155;
                goto LABEL_185;
              }
              if (&v162[v159 - 8 - (v170 & 0xFFFFFFFFFFFFFFF8)] > &v162[v159 - 8])
              {
                v168 = v155;
                goto LABEL_185;
              }
              v171 = v170 & 0xFFFFFFFFFFFFFFF8;
              if (&v155[-v171 - 8] < v164)
              {
                v168 = v155;
                if (&v162[v159 - v171 - 8] < v155)
                  goto LABEL_258;
              }
              v172 = (v167 >> 3) + 1;
              v173 = 8 * (v172 & 0x3FFFFFFFFFFFFFFCLL);
              v168 = &v155[-v173];
              v164 -= v173;
              v174 = &v162[8 * v160 - 16];
              v175 = v155 - 16;
              v176 = v172 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v178 = *((_OWORD *)v175 - 1);
                v177 = *(_OWORD *)v175;
                *((_OWORD *)v175 - 1) = 0uLL;
                *(_OWORD *)v175 = 0uLL;
                *((_OWORD *)v174 - 1) = v178;
                *(_OWORD *)v174 = v177;
                v174 -= 32;
                v175 -= 32;
                v176 -= 4;
              }
              while (v176);
              if (v172 != (v172 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_258:
                do
                {
LABEL_185:
                  v169 = *((_QWORD *)v168 - 1);
                  v168 -= 8;
                  *(_QWORD *)v168 = 0;
                  *((_QWORD *)v164 - 1) = v169;
                  v164 -= 8;
                }
                while (v168 != v156);
              }
              do
              {
                v180 = *((_QWORD *)v155 - 1);
                v155 -= 8;
                v179 = v180;
                if (v180)
                  (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
              }
              while (v155 != v156);
            }
            v154 = (unint64_t)&v163[v207];
            if (v156)
              operator delete(v156);
            v156 = v164;
            v155 = v165;
            v157 = v205;
            v151 += 8;
            if (v151 == v205)
              goto LABEL_202;
            continue;
          }
          break;
        }
        if (!v155)
          goto LABEL_252;
        *(_QWORD *)v155 = v158;
        v155 += 8;
        v151 += 8;
        if (v151 != v157)
          continue;
        break;
      }
LABEL_202:
      v151 = v198;
      v181 = 8 * v197;
      do
      {
        v182 = *(_QWORD *)&v198[v181 - 8];
        if (v182)
          (*(void (**)(uint64_t))(*(_QWORD *)v182 + 8))(v182);
        v181 -= 8;
      }
      while (v181);
LABEL_207:
      operator delete(v151);
      LOBYTE(v210[0]) = 0;
      v211 = 0;
      if (v234)
      {
LABEL_208:
        cricket::VoiceMediaInfo::VoiceMediaInfo((cricket::VoiceMediaInfo *)v210, (const cricket::VoiceMediaInfo *)v230);
        v211 = 1;
      }
LABEL_209:
      LOBYTE(v208[0]) = 0;
      v209 = 0;
      if (v229)
      {
        cricket::VideoMediaInfo::VideoMediaInfo((cricket::VideoMediaInfo *)v208, (const cricket::VideoMediaInfo *)&v224);
        v209 = 1;
      }
      if (v118 == v119)
        v183 = 0;
      else
        v183 = v119;
      if (v155 == v156)
        v184 = 0;
      else
        v184 = v156;
      webrtc::TrackMediaInfoMap::Initialize((uint64_t)(v202 + 10), (uint64_t)v210, (uint64_t)v208, v183, (v118 - v119) >> 3, v184, (v155 - v156) >> 3);
      if (v209)
        cricket::VideoMediaInfo::~VideoMediaInfo(v208);
      if (v211)
        cricket::VoiceMediaInfo::~VoiceMediaInfo(v210);
      if ((*(unsigned int (**)(_QWORD *))(*v203 + 32))(v203))
        v185 = 1;
      else
        v185 = v155 == v156;
      v186 = !v185;
      if (v156)
      {
        while (v155 != v156)
        {
          v188 = *((_QWORD *)v155 - 1);
          v155 -= 8;
          v187 = v188;
          if (v188)
            (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
        }
        operator delete(v156);
      }
      if (v119)
      {
        while (v118 != v119)
        {
          v190 = *((_QWORD *)v118 - 1);
          v118 -= 8;
          v189 = v190;
          if (v190)
            (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
        }
        operator delete(v119);
      }
      if (v229)
        cricket::VideoMediaInfo::~VideoMediaInfo((char **)&v224);
      if (v234)
        cricket::VoiceMediaInfo::~VoiceMediaInfo(v230);
      v55 = v201 | v186;
      (*(void (**)(_QWORD *))(*v203 + 8))(v203);
      v54 = v202 + 69;
      if (v202 + 69 == v199)
        goto LABEL_248;
    }
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 56))(v57);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v57 + 80))(v57);
    v61 = *(uint64_t ***)v200;
    v63 = (uint64_t **)(*(_QWORD *)v200 + 8);
    v62 = *v63;
    if (*v63)
    {
      while (1)
      {
        while (1)
        {
          v64 = v62;
          v65 = v62[4];
          if (v59 >= v65)
            break;
          v62 = (uint64_t *)*v64;
          v63 = (uint64_t **)v64;
          if (!*v64)
            goto LABEL_64;
        }
        if (v65 >= v59)
          break;
        v62 = (uint64_t *)v64[1];
        if (!v62)
        {
          v63 = (uint64_t **)(v64 + 1);
          goto LABEL_64;
        }
      }
    }
    else
    {
      v64 = (_QWORD *)(*(_QWORD *)v200 + 8);
LABEL_64:
      v66 = v64;
      v64 = operator new(0x58uLL);
      v64[4] = v59;
      v64[5] = 0;
      v64[6] = 0;
      v64[7] = 0;
      v64[10] = 0;
      v64[9] = 0;
      v64[8] = v64 + 9;
      *v64 = 0;
      v64[1] = 0;
      v64[2] = v66;
      *v63 = v64;
      v67 = (uint64_t *)**v61;
      v68 = v64;
      if (v67)
      {
        *v61 = v67;
        v68 = *v63;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v61[1], v68);
      v61[2] = (uint64_t *)((char *)v61[2] + 1);
    }
    v69 = (uint64_t **)*((_QWORD *)v200 + 1);
    v71 = v69 + 1;
    v70 = (char *)v69[1];
    if (v70)
    {
      while (1)
      {
        while (1)
        {
          v72 = v70;
          v73 = *((_QWORD *)v70 + 4);
          if (v60 >= v73)
            break;
          v70 = *(char **)v72;
          v71 = (uint64_t **)v72;
          if (!*(_QWORD *)v72)
            goto LABEL_74;
        }
        if (v73 >= v60)
          break;
        v70 = (char *)*((_QWORD *)v72 + 1);
        if (!v70)
        {
          v71 = (uint64_t **)(v72 + 8);
          goto LABEL_74;
        }
      }
    }
    else
    {
      v72 = (char *)(v69 + 1);
LABEL_74:
      v74 = v72;
      v72 = (char *)operator new(0x60uLL);
      *((_QWORD *)v72 + 4) = v60;
      *((_QWORD *)v72 + 5) = 0;
      *((_QWORD *)v72 + 6) = 0;
      *((_QWORD *)v72 + 7) = 0;
      *((_QWORD *)v72 + 10) = 0;
      *((_QWORD *)v72 + 9) = 0;
      *((_QWORD *)v72 + 8) = v72 + 72;
      *((_DWORD *)v72 + 22) = 0;
      *(_QWORD *)v72 = 0;
      *((_QWORD *)v72 + 1) = 0;
      *((_QWORD *)v72 + 2) = v74;
      *v71 = (uint64_t *)v72;
      v75 = (uint64_t *)**v69;
      v76 = (uint64_t *)v72;
      if (v75)
      {
        *v69 = v75;
        v76 = *v71;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v69[1], v76);
      v69[2] = (uint64_t *)((char *)v69[2] + 1);
    }
    v77 = (char *)v64[5];
    v78 = *((_OWORD *)v64 + 3);
    v213 = v78;
    v64[6] = 0;
    v64[7] = 0;
    v64[5] = 0;
    v215 = 0;
    v214 = 0uLL;
    v79 = *(_OWORD *)(v72 + 40);
    v80 = *((_QWORD *)v72 + 7);
    v212 = v77;
    v215 = v80;
    *((_QWORD *)v72 + 5) = 0;
    *((_QWORD *)v72 + 6) = 0;
    *((_QWORD *)v72 + 7) = 0;
    v81 = v64 + 9;
    v82 = v64[9];
    v214 = v79;
    *(_QWORD *)&v216 = v64[8];
    *((_QWORD *)&v216 + 1) = v82;
    v217 = v64[10];
    if (v217)
    {
      *(_QWORD *)(v82 + 16) = (char *)&v216 + 8;
      v64[8] = v81;
      *v81 = 0;
      v64[10] = 0;
    }
    else
    {
      *(_QWORD *)&v216 = (char *)&v216 + 8;
    }
    v218 = (uint64_t *)*((_QWORD *)v72 + 8);
    v107 = v72 + 72;
    v108 = *((_QWORD *)v72 + 9);
    v219 = v108;
    v220 = *((_QWORD *)v72 + 10);
    if (v220)
    {
      *(_QWORD *)(v108 + 16) = &v219;
      *((_QWORD *)v72 + 8) = v107;
      *v107 = 0;
      *((_QWORD *)v72 + 10) = 0;
      LODWORD(v221) = *((_DWORD *)v72 + 22);
      if (v234)
      {
LABEL_104:
        std::vector<cricket::VoiceSenderInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceSenderInfo*,cricket::VoiceSenderInfo*>((uint64_t *)v230, (uint64_t)v77, v78, 0x7D6343EB1A1F58D1 * ((uint64_t)(v78 - (_QWORD)v77) >> 3));
        std::vector<cricket::VoiceReceiverInfo>::__assign_with_size[abi:sn180100]<cricket::VoiceReceiverInfo*,cricket::VoiceReceiverInfo*>(v231, v214, *((uint64_t *)&v214 + 1), 0xF83E0F83E0F83E1 * ((uint64_t)(*((_QWORD *)&v214 + 1) - v214) >> 4));
        std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)&v232, (_QWORD *)v216, (_QWORD *)&v216 + 1);
        std::__tree<std::__value_type<int,webrtc::RtpCodecParameters>,std::__map_value_compare<int,std::__value_type<int,webrtc::RtpCodecParameters>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RtpCodecParameters>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::RtpCodecParameters>,std::__tree_node<std::__value_type<int,webrtc::RtpCodecParameters>,void *> *,long>>((uint64_t)v233, v218, &v219);
        v233[6] = (_DWORD)v221;
LABEL_111:
        cricket::VoiceMediaInfo::~VoiceMediaInfo(&v212);
        goto LABEL_112;
      }
    }
    else
    {
      v218 = &v219;
      LODWORD(v221) = *((_DWORD *)v72 + 22);
      if (v234)
        goto LABEL_104;
    }
    cricket::VoiceMediaInfo::VoiceMediaInfo((cricket::VoiceMediaInfo *)v230, (const cricket::VoiceMediaInfo *)&v212);
    v234 = 1;
    goto LABEL_111;
  }
  LOBYTE(v55) = 0;
LABEL_248:
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v196[1] + 584))(&v224);
  v191 = *(_OWORD *)v225;
  *(_OWORD *)(v196 + 41) = v224;
  *(_OWORD *)(v196 + 43) = v191;
  if ((v55 & 1) != 0)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v196[1] + 592))(&v224);
  }
  else
  {
    LOBYTE(v224) = 0;
    v225[24] = 0;
  }
  v192 = *(_OWORD *)v225;
  *(_OWORD *)(v196 + 45) = v224;
  *(_OWORD *)(v196 + 47) = v192;
  result = *(double *)&v225[9];
  *(_OWORD *)((char *)v196 + 385) = *(_OWORD *)&v225[9];
  v195[217] = v194;
  return result;
}

void webrtc::RTCStatsReport::ConstIterator::~ConstIterator(webrtc::RTCStatsReport::ConstIterator *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)v1));
    if (!v3)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v1 + 16, *(char **)(v1 + 24));
      MEMORY[0x20BD0ADEC](v1, 0x1020C4043D65406);
    }
  }
}

uint64_t webrtc::RTCStatsReport::ConstIterator::operator++(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  BOOL v4;

  v1 = *(_QWORD **)(result + 8);
  v2 = (_QWORD *)v1[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  else
  {
    do
    {
      v3 = (_QWORD *)v1[2];
      v4 = *v3 == (_QWORD)v1;
      v1 = v3;
    }
    while (!v4);
  }
  *(_QWORD *)(result + 8) = v3;
  return result;
}

uint64_t webrtc::RTCStatsReport::ConstIterator::operator*(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
}

uint64_t webrtc::RTCStatsReport::ConstIterator::operator->(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 56);
}

BOOL webrtc::RTCStatsReport::ConstIterator::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

uint64_t webrtc::RTCStatsReport::Copy@<X0>(webrtc::RTCStatsReport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *((_QWORD *)this + 1);
  result = operator new();
  v6 = result;
  *(_DWORD *)result = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = result + 24;
  *a2 = result;
  do
    v7 = __ldxr((unsigned int *)result);
  while (__stxr(v7 + 1, (unsigned int *)result));
  v8 = (char *)*((_QWORD *)this + 2);
  v9 = (char *)this + 24;
  if (v8 != v9)
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v8 + 7) + 16))(&v15);
      v10 = v15;
      v15 = 0;
      v16 = v10;
      webrtc::RTCStatsReport::AddStats(v6, &v16);
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      result = v15;
      v15 = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      v12 = (char *)*((_QWORD *)v8 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (char *)*((_QWORD *)v8 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v14);
      }
      v8 = v13;
    }
    while (v13 != v9);
  }
  return result;
}

void webrtc::RTCStatsReport::AddStats(uint64_t a1, uint64_t *a2)
{
  _QWORD **v4;
  uint64_t v5;
  __int128 v6;
  std::string::size_type v7;
  const void **v8;
  uint64_t **v9;
  _OWORD *v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD **)(a1 + 16);
  v5 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
    v5 = *a2;
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 8);
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 24);
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)__p = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
  v7 = v17.__r_.__value_.__r.__words[2];
  memset(&v17, 0, sizeof(v17));
  *a2 = 0;
  v19 = v7;
  v20 = v5;
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)v4, &v21, (const void **)__p);
  if (!*v8)
  {
    v9 = (uint64_t **)v8;
    v10 = operator new(0x40uLL);
    v10[2] = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = v19;
    v12 = v20;
    v19 = 0;
    v20 = 0;
    *((_QWORD *)v10 + 6) = v11;
    *((_QWORD *)v10 + 7) = v12;
    v13 = v21;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v13;
    *v9 = (uint64_t *)v10;
    v14 = (_QWORD *)**v4;
    if (v14)
    {
      *v4 = v14;
      v15 = *v9;
    }
    else
    {
      v15 = (uint64_t *)v10;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 24), v15);
    ++*(_QWORD *)(a1 + 32);
  }
  v16 = v20;
  v20 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v17.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void webrtc::RTCStatsReport::Take(_QWORD *__s2@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  size_t v8;
  const void *v9;
  size_t v10;
  BOOL v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  size_t v17;
  int v18;
  _QWORD *v19;
  size_t v20;
  size_t v22;
  int v23;
  void **v24;
  size_t v25;
  void *v26;
  size_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;

  v5 = a2 + 3;
  v4 = (uint64_t *)a2[3];
  if (!v4)
    goto LABEL_65;
  v6 = __s2;
  v8 = *((unsigned __int8 *)__s2 + 23);
  v9 = (const void *)*__s2;
  v10 = __s2[1];
  if (v10)
    v11 = v9 == 0;
  else
    v11 = 0;
  v12 = !v11;
  v35 = v12;
  if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
  {
    v13 = a2 + 3;
    while (1)
    {
      v14 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        v15 = v4[5];
        if ((v15 & 0x8000000000000000) != 0)
          goto LABEL_76;
        v14 = (_QWORD *)*v14;
        if (v15 && v14 == 0)
          goto LABEL_76;
      }
      else
      {
        v15 = *((unsigned __int8 *)v4 + 55);
      }
      if (v8 >= v15)
        v17 = v15;
      else
        v17 = v8;
      v18 = memcmp(v14, v6, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_12;
LABEL_10:
        v13 = v4;
        v4 = (uint64_t *)*v4;
        if (!v4)
          goto LABEL_47;
      }
      else
      {
        if (v15 >= v8)
          goto LABEL_10;
LABEL_12:
        v4 = (uint64_t *)v4[1];
        if (!v4)
          goto LABEL_47;
      }
    }
  }
  if ((v10 & 0x8000000000000000) != 0 || !v12)
  {
LABEL_76:
    __break(1u);
    return;
  }
  v13 = a2 + 3;
  do
  {
    while (1)
    {
      v19 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        v20 = v4[5];
        if ((v20 & 0x8000000000000000) != 0)
          goto LABEL_76;
        v19 = (_QWORD *)*v19;
        if (v20 && v19 == 0)
          goto LABEL_76;
      }
      else
      {
        v20 = *((unsigned __int8 *)v4 + 55);
      }
      v22 = v10 >= v20 ? v20 : v10;
      v23 = memcmp(v19, v9, v22);
      if (v23)
        break;
      if (v20 >= v10)
        goto LABEL_46;
LABEL_31:
      v4 = (uint64_t *)v4[1];
      if (!v4)
        goto LABEL_47;
    }
    if (v23 < 0)
      goto LABEL_31;
LABEL_46:
    v13 = v4;
    v4 = (uint64_t *)*v4;
  }
  while (v4);
LABEL_47:
  if (v5 == v13)
    goto LABEL_65;
  if ((v8 & 0x80) != 0)
  {
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_76;
    v6 = v9;
    v8 = v10;
    if ((v35 & 1) == 0)
      goto LABEL_76;
  }
  v24 = (void **)(v13 + 4);
  if (*((char *)v13 + 55) < 0)
  {
    v25 = v13[5];
    if ((v25 & 0x8000000000000000) == 0)
    {
      v26 = *v24;
      if (!v25 || v26)
        goto LABEL_56;
    }
    goto LABEL_76;
  }
  v25 = *((unsigned __int8 *)v13 + 55);
  v26 = v13 + 4;
LABEL_56:
  if (v25 >= v8)
    v27 = v8;
  else
    v27 = v25;
  v28 = memcmp(v6, v26, v27);
  if (v28)
  {
    if ((v28 & 0x80000000) == 0)
      goto LABEL_61;
LABEL_65:
    *a3 = 0;
  }
  else
  {
    if (v8 < v25)
      goto LABEL_65;
LABEL_61:
    v29 = v13[7];
    v13[7] = 0;
    *a3 = v29;
    v30 = (_QWORD *)v13[1];
    if (v30)
    {
      do
      {
        v31 = v30;
        v30 = (_QWORD *)*v30;
      }
      while (v30);
    }
    else
    {
      v32 = v13;
      do
      {
        v31 = (_QWORD *)v32[2];
        v11 = *v31 == (_QWORD)v32;
        v32 = v31;
      }
      while (!v11);
    }
    if ((_QWORD *)a2[2] == v13)
      a2[2] = v31;
    v33 = (uint64_t *)a2[3];
    --a2[4];
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v33, v13);
    v34 = v13[7];
    v13[7] = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    if (*((char *)v13 + 55) < 0)
      operator delete(*v24);
    operator delete(v13);
  }
}

uint64_t webrtc::RTCStatsReport::begin@<X0>(webrtc::RTCStatsReport *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (this)
  {
    do
      v3 = __ldxr((unsigned int *)this);
    while (__stxr(v3 + 1, (unsigned int *)this));
  }
  result = (uint64_t)this + 16;
  v5 = *((_QWORD *)this + 2);
  *a2 = this;
  do
    v6 = __ldxr((unsigned int *)this);
  while (__stxr(v6 + 1, (unsigned int *)this));
  a2[1] = v5;
  do
  {
    v7 = __ldaxr((unsigned int *)this);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)this));
  if (!v8)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(result, *((char **)this + 3));
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t webrtc::RTCStatsReport::end@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  if (this)
  {
    do
      v2 = __ldxr((unsigned int *)this);
    while (__stxr(v2 + 1, (unsigned int *)this));
    *a2 = this;
    do
      v3 = __ldxr((unsigned int *)this);
    while (__stxr(v3 + 1, (unsigned int *)this));
    a2[1] = this + 24;
    do
    {
      v4 = __ldaxr((unsigned int *)this);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)this));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(this + 16, *(char **)(this + 24));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 24;
  }
  return this;
}

webrtc *webrtc::`anonymous namespace'::TraverseAndTakeVisitedStats(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  const webrtc::RTCStats *v5;
  webrtc *result;
  webrtc *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  webrtc *v12;
  uint64_t *v13;
  uint64_t *v14;
  webrtc *v15;

  webrtc::RTCStatsReport::Take(a3, a1, &v15);
  result = v15;
  if (v15)
  {
    webrtc::GetStatsReferencedIds(v15, v5, (uint64_t)&v13);
    v7 = v15;
    v15 = 0;
    v12 = v7;
    webrtc::RTCStatsReport::AddStats(a2, (uint64_t *)&v12);
    if (v12)
      (*(void (**)(webrtc *))(*(_QWORD *)v12 + 8))(v12);
    v8 = v13;
    v9 = v14;
    if (v13 != v14)
    {
      v10 = v13;
      do
      {
        v11 = *v10++;
      }
      while (v10 != v9);
    }
    if (v8)
      operator delete(v8);
    result = v15;
    v15 = 0;
    if (result)
      return (webrtc *)(*(uint64_t (**)(webrtc *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void webrtc::GetStatsReferencedIds(webrtc *this@<X0>, const webrtc::RTCStats *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = (char *)(*(uint64_t (**)(webrtc *, const webrtc::RTCStats *))(*(_QWORD *)this + 24))(this, a2);
  if (v5 == "certificate")
  {
    return;
  }
  if (v5 == "codec")
    goto LABEL_10;
  if (v5 == "data-channel")
    return;
  if (v5 == "candidate-pair")
  {
    return;
  }
  if (v5 == "local-candidate" || v5 == "remote-candidate")
  {
LABEL_10:
    return;
  }
  if (v5 != "peer-connection")
  {
    if (v5 == "inbound-rtp")
    {
    }
    else
    {
      if (v5 == "outbound-rtp")
      {
        goto LABEL_23;
      }
      if (v5 != "remote-inbound-rtp")
      {
        if (v5 != "remote-outbound-rtp")
        {
          if (v5 == "transport")
          {
          }
          return;
        }
LABEL_23:
        return;
      }
    }
  }
}

void webrtc::`anonymous namespace'::AddIdIfDefined(uint64_t a1, char **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _OWORD *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  if (*(_BYTE *)(a1 + 24))
  {
    v5 = a2[1];
    v4 = (unint64_t)a2[2];
    if ((unint64_t)v5 >= v4)
    {
      v7 = *a2;
      v8 = v5 - *a2;
      v9 = v8 >> 3;
      v10 = (v8 >> 3) + 1;
      if (v10 >> 61)
        goto LABEL_25;
      v11 = v4 - (_QWORD)v7;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      v13 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v12)
        v13 = v10;
      if (v13)
      {
        if (v13 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v14 = 8 * v13;
        v15 = operator new(8 * v13);
        v16 = &v15[v14];
        v17 = &v15[8 * v9];
        *(_QWORD *)v17 = a1;
        v6 = v17 + 8;
        if (v5 != v7)
        {
          v18 = v5 - v7 - 8;
          if (v18 < 0x58)
            goto LABEL_29;
          if ((unint64_t)(&v5[-v8] - v15) < 0x20)
            goto LABEL_29;
          v19 = (v18 >> 3) + 1;
          v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          v21 = &v5[-v20];
          v17 -= v20;
          v22 = &v15[8 * v9 - 16];
          v23 = v5 - 16;
          v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v25 = *(_OWORD *)v23;
            *(v22 - 1) = *((_OWORD *)v23 - 1);
            *v22 = v25;
            v22 -= 2;
            v23 -= 32;
            v24 -= 4;
          }
          while (v24);
          v5 = v21;
          if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_29:
            do
            {
              v26 = *((_QWORD *)v5 - 1);
              v5 -= 8;
              *((_QWORD *)v17 - 1) = v26;
              v17 -= 8;
            }
            while (v5 != v7);
          }
          v5 = v7;
        }
        *a2 = v17;
        a2[1] = v6;
        a2[2] = v16;
        if (v5)
          operator delete(v5);
        goto LABEL_22;
      }
    }
    else if (v5)
    {
      *(_QWORD *)v5 = a1;
      v6 = v5 + 8;
LABEL_22:
      a2[1] = v6;
      return;
    }
    __break(1u);
LABEL_25:
    abort();
  }
}

void webrtc::rtclog::StreamConfig::~StreamConfig(webrtc::rtclog::StreamConfig *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    v3 = *((_QWORD *)this + 11);
    v4 = (void *)*((_QWORD *)this + 10);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (void *)*((_QWORD *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

void sub_208747E7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208747F50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208747FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WK_RTCCVPixelBuffer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_208748720(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748730(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748770(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087487F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748800(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748820(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208748830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087497C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087498B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_208749964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

void sub_208749B6C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_208749B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

void sub_208749F00(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;
  void *v2;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749F1C(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749F30(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;
  void *v2;
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749F58(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;
  void *v2;
  void *v3;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749F74(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;
  void *v2;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749F8C(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;
  void *v2;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749FA4(_Unwind_Exception *a1)
{
  webrtc::EncodedImage *v1;

  webrtc::EncodedImage::~EncodedImage(v1);
  _Unwind_Resume(a1);
}

void sub_208749FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  webrtc::EncodedImage *v9;

  if (a9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
    webrtc::EncodedImage::~EncodedImage(v9);
    _Unwind_Resume(a1);
  }
  webrtc::EncodedImage::~EncodedImage(v9);
  _Unwind_Resume(a1);
}

uint64_t rtc::RefCountedObject<`anonymous namespace'::ObjCEncodedImageBuffer>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<`anonymous namespace'::ObjCEncodedImageBuffer>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<`anonymous namespace'::ObjCEncodedImageBuffer>::~RefCountedObject(uint64_t a1)
{

  return a1;
}

void rtc::RefCountedObject<`anonymous namespace'::ObjCEncodedImageBuffer>::~RefCountedObject(uint64_t a1)
{

  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `anonymous namespace'::ObjCEncodedImageBuffer::data(id *this)
{
  return objc_msgSend(this[1], "bytes");
}

{
  return objc_msgSend(this[1], "bytes");
}

uint64_t `anonymous namespace'::ObjCEncodedImageBuffer::size(id *this)
{
  return objc_msgSend(this[1], "length");
}

BOOL rtc::RefCountedObject<`anonymous namespace'::ObjCEncodedImageBuffer>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

void sub_20874A2C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20874A2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20874A424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;

  if (a22)
  {
    if (a21 < 0)
    {
      operator delete(__p);

      _Unwind_Resume(a1);
    }
  }

  _Unwind_Resume(a1);
}

void sub_20874A8C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t cricket::RtcpMuxFilter::SetAnswer(int *a1, uint64_t a2, int a3)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v3 = *a1;
  if (*a1 == 5)
    return a2;
  if (a3 != 1 || v3 != 2)
  {
    v4 = !a3 && (v3 & 0xFFFFFFFD) == 1;
    v5 = v4;
    v6 = v3 == 4 && a3 == 1;
    if (!v6 && !v5)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        return 0;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtcp_mux_filter.cc");
      return 0;
    }
  }
  if (!*((_BYTE *)a1 + 4) && (_DWORD)a2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtcp_mux_filter.cc");
    return 0;
  }
  if (((*((_BYTE *)a1 + 4) != 0) & a2) != 0)
    v22 = 5;
  else
    v22 = 0;
  *a1 = v22;
  return 1;
}

_QWORD *webrtc::RTCPReceiver::RTCPReceiver(_QWORD *a1, uint64_t a2, unint64_t *a3)
{
  int v6;
  int *p_p;
  unint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  unint64_t v28;
  unsigned __int8 v29;
  pthread_mutexattr_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *a1 = *(_QWORD *)(a2 + 8);
  *((_BYTE *)a1 + 8) = *(_BYTE *)(a2 + 1);
  v31 = 0;
  v32 = 0;
  v30.__sig = (uint64_t)&unk_24C0B3F60;
  *(_QWORD *)v30.__opaque = 0;
  webrtc::FieldTrialsRegistry::Lookup((uint64_t)&v30);
  if ((char)v29 < 0)
  {
    v8 = v28;
    if ((v28 & 0x8000000000000000) != 0)
      goto LABEL_43;
    p_p = (int *)__p;
    if (v28)
    {
      if (!__p)
        goto LABEL_43;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v8 = v29;
  }
  if (v8 < 7)
  {
    v9 = 0;
    if ((v29 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v10 = *p_p;
  v11 = *(int *)((char *)p_p + 3);
  v9 = v10 == 1650552389 && v11 == 1684368482;
  if ((v29 & 0x80) != 0)
LABEL_16:
    operator delete(__p);
LABEL_17:
  v30.__sig = (uint64_t)&unk_24C0B4260;
  v13 = *(_QWORD *)v30.__opaque;
  if (*(_QWORD *)v30.__opaque)
  {
    v14 = v31;
    v15 = *(void **)v30.__opaque;
    if (v31 != *(_QWORD *)v30.__opaque)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = *(void **)v30.__opaque;
    }
    v31 = v13;
    operator delete(v15);
  }
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 208);
  v16 = a1 + 4;
  *((_BYTE *)a1 + 9) = v9;
  v17 = a3 + 1;
  if (!a3)
    v17 = 0;
  a1[2] = v17;
  a1[3] = 2;
  a3 = a1 + 3;
  if (*(_BYTE *)(a2 + 216))
  {
    *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 212);
    a1[3] = 4;
  }
  v18 = *(_QWORD *)(a2 + 120);
  if (v18)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
    if ((v19 & 0xFF00000000) != 0)
    {
      v6 = v19;
      v20 = *a3;
      if ((*a3 & 1) != 0)
      {
        v16 = (_QWORD *)a1[4];
        v21 = a1[5];
      }
      else
      {
        v21 = 4;
      }
      if (v20 >> 1 == v21)
        goto LABEL_44;
      if (v16)
      {
        *((_DWORD *)v16 + (v20 >> 1)) = v19;
        *a3 = v20 + 2;
        goto LABEL_37;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      absl::inlined_vector_internal::Storage<unsigned int,3ul,std::allocator<unsigned int>>::EmplaceBackSlow<unsigned int const&>((uint64_t)a3, v6);
    }
  }
LABEL_37:
  a1[6] = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 32);
  a1[9] = *(_QWORD *)(a2 + 56);
  a1[10] = *(_QWORD *)(a2 + 72);
  v22 = *(_DWORD *)(a2 + 168);
  v23 = 5000000;
  if (!*(_BYTE *)a2)
    v23 = 1000000;
  if (v22 <= 0)
    v24 = v23;
  else
    v24 = 1000 * v22;
  a1[11] = v24;
  pthread_mutexattr_init(&v30);
  pthread_mutexattr_setpolicy_np(&v30, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 12), &v30);
  pthread_mutexattr_destroy(&v30);
  *((_DWORD *)a1 + 40) = 0;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  a1[25] = 0;
  a1[26] = a1 + 26;
  a1[27] = a1 + 26;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_BYTE *)a1 + 256) = *(_BYTE *)(a2 + 221);
  *((_BYTE *)a1 + 264) = 0;
  *((_BYTE *)a1 + 272) = 0;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  a1[51] = 0x7FFFFFFFFFFFFFFFLL;
  a1[52] = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 53) = *(_OWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a2 + 88);
  a1[56] = 0;
  a1[57] = 0;
  a1[55] = v25;
  *(_QWORD *)((char *)a1 + 462) = 0;
  a1[59] = 0;
  a1[60] = 0;
  a1[61] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  return a1;
}

void webrtc::RTCPReceiver::~RTCPReceiver(webrtc::RTCPReceiver *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  webrtc::RTCPReceiver *v11;
  uint64_t v12;
  uint64_t v13;
  webrtc::RTCPReceiver *v14;

  v2 = (void *)*((_QWORD *)this + 48);
  if (v2)
  {
    *((_QWORD *)this + 49) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 42);
  if (v4)
  {
    *((_QWORD *)this + 43) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 39);
  if (v5)
  {
    *((_QWORD *)this + 40) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 36);
  if (v6)
  {
    v7 = *((_QWORD *)this + 37);
    v8 = (void *)*((_QWORD *)this + 36);
    if (v7 != v6)
    {
      do
      {
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(v7 - 16));
        v9 = *(void **)(v7 - 48);
        if (v9)
        {
          *(_QWORD *)(v7 - 40) = v9;
          operator delete(v9);
        }
        v7 -= 72;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 36);
    }
    *((_QWORD *)this + 37) = v6;
    operator delete(v8);
  }
  v10 = (void *)*((_QWORD *)this + 29);
  if (v10)
  {
    *((_QWORD *)this + 30) = v10;
    operator delete(v10);
  }
  if (*((_QWORD *)this + 28))
  {
    v12 = *((_QWORD *)this + 26);
    v11 = (webrtc::RTCPReceiver *)*((_QWORD *)this + 27);
    v13 = *(_QWORD *)v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v12 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    *((_QWORD *)this + 28) = 0;
    if (v11 != (webrtc::RTCPReceiver *)((char *)this + 208))
    {
      do
      {
        v14 = (webrtc::RTCPReceiver *)*((_QWORD *)v11 + 1);
        operator delete(v11);
        v11 = v14;
      }
      while (v14 != (webrtc::RTCPReceiver *)((char *)this + 208));
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 96));
  if ((*((_BYTE *)this + 24) & 1) != 0)
    operator delete(*((void **)this + 4));
}

void webrtc::RTCPReceiver::IncomingPacket(webrtc::RTCPReceiver *a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  __int128 v14;
  void *v15[4];
  char v16;
  int v17;
  uint64_t v18;
  void (**v19)(webrtc::rtcp::CongestionControlFeedback *__hidden);
  void *__p;
  void *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  if (a3)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    LOBYTE(v19) = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    *(_OWORD *)v13 = 0u;
    v14 = 0u;
    memset(v15, 0, 25);
    if (webrtc::RTCPReceiver::ParseCompoundPacket(a1, a2, a3, (size_t)v13))
      webrtc::RTCPReceiver::TriggerCallbacksFromRtcpPacket(a1, (int *)v13);
    v4 = v27;
    v27 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v22)
    {
      v19 = &off_24C0B1440;
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
    }
    v5 = v18;
    v18 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v15[0])
    {
      v15[1] = v15[0];
      operator delete(v15[0]);
    }
    if (v13[1])
    {
      *(void **)&v14 = v13[1];
      operator delete(v13[1]);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
  }
}

uint64_t webrtc::RTCPReceiver::ParseCompoundPacket(_QWORD *a1, const unsigned __int8 *a2, uint64_t a3, size_t a4)
{
  pthread_mutex_t *v8;
  unsigned int *v9;
  uint64_t v10;
  const unsigned __int8 *v11;
  char *v12;
  double v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  _BOOL4 v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  unint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  _BOOL4 v35;
  int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unint64_t v40;
  unsigned int *v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  int v49;
  char v50;
  void **v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  char v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  unsigned int *v64;
  char *v65;
  unsigned int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  __int128 v71;
  unint64_t v72;
  unint64_t v73;
  webrtc::rtcp *v74;
  __int32 *v75;
  unsigned int (***RemoteEstimateSerializer)(_QWORD, __int32 *);
  __int32 *v77;
  int v78;
  int64x2_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int32 *v83;
  int v84;
  unint64_t v85;
  _DWORD *v86;
  unsigned __int16 *v87;
  unsigned __int16 *v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  _DWORD *v92;
  unsigned int *v93;
  int v94;
  char v95;
  _BOOL4 v96;
  unsigned int v97;
  __int32 *v98;
  __int32 *v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  unsigned int v112;
  char *v113;
  int v114;
  int v115;
  uint64_t v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unsigned int *v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  __int32 *v139;
  unint64_t v140;
  __int32 *v141;
  __int32 *v142;
  __int32 *v143;
  __int32 v144;
  __int32 v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  unint64_t v155;
  char *v156;
  char *v157;
  unsigned int v158;
  char *v159;
  char *v160;
  unint64_t v161;
  char *v162;
  unint64_t v163;
  unsigned int *v164;
  char *v165;
  unsigned int v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  __int128 v178;
  char *v179;
  char *v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  unint64_t v185;
  char *v186;
  char *v187;
  _BYTE *v188;
  int v189;
  int64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  __int128 v196;
  char *v197;
  unint64_t v198;
  char *v199;
  unint64_t v200;
  __int128 v201;
  __int128 v202;
  unint64_t v203;
  char *j;
  __int128 v205;
  __int128 v206;
  void *v207;
  void *v208;
  int v209;
  char v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned __int8 *v213;
  uint64_t v214;
  void **v215;
  void **v216;
  char *v217;
  unint64_t v218;
  _DWORD *v219;
  int v220;
  char *v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  char *v225;
  unint64_t v226;
  unsigned int *v227;
  char *v228;
  unsigned int v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  unint64_t v233;
  unsigned __int8 v234;
  char *v235;
  uint64_t v236;
  char *v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  unsigned __int8 v241;
  char *v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  char *v246;
  unint64_t v247;
  char *v248;
  char *v249;
  _BYTE *v250;
  int v251;
  uint64_t *v252;
  uint64_t v253;
  BOOL v254;
  int64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  unsigned __int8 v261;
  char *v262;
  unint64_t v263;
  char *v264;
  unint64_t v265;
  __int128 v266;
  unint64_t v267;
  char *v268;
  __int128 v269;
  void *v270;
  unsigned int v271;
  unsigned int v272;
  BOOL v273;
  unint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  unsigned int v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  char v282;
  char *v283;
  __int128 v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  char *v288;
  unint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  void *v295;
  uint64_t v296;
  unint64_t v297;
  _DWORD *v298;
  __int32 v299;
  __int32 *v300;
  unint64_t v301;
  __int32 *v302;
  __int32 *v303;
  __int32 *v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  unsigned int v308;
  __int16 v309;
  __int16 v310;
  uint64_t v311;
  unint64_t v312;
  _DWORD *v313;
  _DWORD *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  char *v318;
  unint64_t v319;
  char *v320;
  char *v321;
  unsigned int v322;
  __int128 v323;
  int64x2_t v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  unsigned int v333;
  char *v334;
  char *v335;
  unint64_t v336;
  char *v337;
  unint64_t v338;
  unsigned int *v339;
  char *v340;
  unsigned int v341;
  char *v342;
  char *v343;
  unint64_t v344;
  char *v345;
  unint64_t v346;
  unsigned int *v347;
  char *v348;
  unsigned int v349;
  char *v350;
  int64_t v351;
  int64_t v352;
  _DWORD *v353;
  uint64_t v354;
  char *v355;
  char *v356;
  unint64_t v357;
  char *v358;
  unint64_t v359;
  unsigned int *v360;
  char *v361;
  unsigned int v362;
  char *v363;
  uint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  char *v370;
  char *v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  char *v389;
  uint64_t v390;
  unint64_t v391;
  const void *v392;
  char *v393;
  char *v394;
  uint64_t **v395;
  char *v396;
  unsigned int v397;
  char *v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  __int16 v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  unint64_t v406;
  char *v407;
  char *v408;
  __int128 v409;
  char *v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  char *v416;
  char *v417;
  char *v418;
  unint64_t v419;
  char *v420;
  char *v421;
  char *v422;
  char *v423;
  _OWORD *v424;
  char *i;
  __int128 v426;
  void *v427;
  char *v428;
  unint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  BOOL v447;
  BOOL v448;
  BOOL v449;
  TimeDelta v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  _QWORD *v458;
  char *v459;
  char *v460;
  char *v461;
  char *v463;
  char *v464;
  unint64_t v465;
  char *v466;
  unint64_t v467;
  unsigned int *v468;
  char *v469;
  unsigned int v470;
  char *v471;
  _BYTE *v472;
  int v473;
  uint64_t v474;
  unint64_t v475;
  std::string *v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  size_t v481;
  char v482;
  char v483;
  size_t v484;
  uint64_t v485;
  _BOOL4 v486;
  uint64_t v487;
  uint64_t *v488;
  int64x2_t v489;
  int64x2_t v490;
  pthread_mutex_t *v491;
  unsigned int *v492;
  const unsigned __int8 *v493;
  _DWORD *v494;
  char v495;
  _QWORD v496[3];
  _QWORD v497[2];
  _QWORD v498[2];
  char *v499;
  char *v500;
  uint64_t v501;
  __int16 v502;
  unsigned __int8 v503;
  unsigned int v504;
  unsigned int *v505;
  _BYTE __p[24];
  __int128 v507;
  __int32 *v508;
  uint64_t v509;
  unsigned __int8 *v510;
  unsigned __int8 *v511;
  char v512;
  _OWORD v513[3];
  _BYTE v514[96];
  int64x2_t v515;
  int64x2_t v516;
  uint64_t v517;
  unsigned int (***v518)(_QWORD, _QWORD);

  v8 = (pthread_mutex_t *)(a1 + 12);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 12));
  v502 = 0;
  v503 = 0;
  v504 = 0;
  v505 = 0;
  v499 = 0;
  v500 = 0;
  v9 = (unsigned int *)(a1 + 4);
  v10 = 1;
  v501 = 0;
  if (!a3)
  {
    if (a1[60])
      goto LABEL_613;
    goto LABEL_630;
  }
  v11 = &a2[a3];
  v479 = a4 + 8;
  v480 = a1 + 36;
  v492 = (unsigned int *)(a4 + 4);
  v484 = a4 + 320;
  v488 = a1 + 26;
  v481 = a4 + 144;
  v489 = vdupq_n_s64(0x7FF8000000000000uLL);
  v490 = vdupq_n_s64(0x8000000000000000);
  v491 = v8;
  v494 = (_DWORD *)a4;
  v493 = &a2[a3];
  while (2)
  {
    if (!webrtc::rtcp::CommonHeader::Parse((webrtc::rtcp::CommonHeader *)&v502, a2, v11 - a2))
      goto LABEL_612;
    switch((char)v502)
    {
      case -56:
        DWORD2(v513[0]) = 0;
        *(_QWORD *)&v513[0] = &off_24C0C0C50;
        *(_QWORD *)v514 = 0;
        *(_QWORD *)&v514[8] = 0;
        *((_QWORD *)&v513[2] + 1) = 0;
        memset(&v513[1], 0, 20);
        v18 = webrtc::rtcp::SenderReport::Parse((uint64_t)v513, (uint64_t)&v502);
        if (!v18)
          goto LABEL_232;
        v19 = DWORD2(v513[0]);
        *v492 = DWORD2(v513[0]);
        v21 = (unsigned int *)a1[36];
        v20 = (unsigned int *)a1[37];
        if (v20 == v21)
        {
          v23 = (unsigned int *)a1[37];
        }
        else
        {
          v22 = 0x8E38E38E38E38E39 * (((char *)v20 - (char *)v21) >> 3);
          v23 = (unsigned int *)a1[36];
          do
          {
            v24 = v22 >> 1;
            v25 = &v23[18 * (v22 >> 1)];
            v27 = *v25;
            v26 = v25 + 18;
            v22 += ~(v22 >> 1);
            if (v27 < v19)
              v23 = v26;
            else
              v22 = v24;
          }
          while (v22);
          if (v20 != v23)
          {
            if (&v23[18 * (*v23 <= v19)] == v23)
              v23 = (unsigned int *)a1[37];
            if (v23 != v20)
LABEL_20:
              *(_QWORD *)&v21[2 * (((char *)v23 - (char *)v21) >> 3) + 2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
LABEL_21:
            v28 = *(_DWORD *)a4;
            if (*((_DWORD *)a1 + 40) == v19)
            {
              *(_DWORD *)a4 = v28 | 2;
              a1[22] = *(_QWORD *)&v513[1];
              *((_DWORD *)a1 + 46) = DWORD2(v513[1]);
              v29 = *a1;
              v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
              a1[21] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 24))(v29, v30);
              v31 = LODWORD(v513[2]);
              *((_DWORD *)a1 + 47) = HIDWORD(v513[1]);
              v32 = a1[25] + 1;
              a1[24] = v31;
              a1[25] = v32;
              v34 = (char *)*((_QWORD *)&v513[2] + 1);
              v33 = *(char **)v514;
              if (*((_QWORD *)&v513[2] + 1) == *(_QWORD *)v514)
                goto LABEL_233;
            }
            else
            {
              *(_DWORD *)a4 = v28 | 4;
              v34 = (char *)*((_QWORD *)&v513[2] + 1);
              v33 = *(char **)v514;
              if (*((_QWORD *)&v513[2] + 1) == *(_QWORD *)v514)
                goto LABEL_233;
            }
            do
            {
              webrtc::RTCPReceiver::HandleReportBlock(a1, (uint64_t)v34, a4, v19);
              v34 += 28;
            }
            while (v34 != v33);
LABEL_232:
            v34 = (char *)*((_QWORD *)&v513[2] + 1);
LABEL_233:
            *(_QWORD *)&v513[0] = &off_24C0C0C50;
            v11 = v493;
            if (v34)
            {
              *(_QWORD *)v514 = v34;
              operator delete(v34);
            }
            *webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock>>>::operator[](&v499, v492) = 1;
            if (!v18)
              goto LABEL_612;
            goto LABEL_4;
          }
        }
        if (v20 == v23)
          v23 = (unsigned int *)a1[37];
        if (v23 != v20)
          goto LABEL_20;
        goto LABEL_21;
      case -55:
        DWORD2(v513[0]) = 0;
        *(_QWORD *)&v513[0] = &off_24C0BB310;
        memset(&v513[1], 0, 24);
        v35 = webrtc::rtcp::ReceiverReport::Parse((webrtc::rtcp::ReceiverReport *)v513, (const webrtc::rtcp::CommonHeader *)&v502);
        LOBYTE(v36) = v35;
        if (!v35)
          goto LABEL_38;
        v37 = DWORD2(v513[0]);
        *v492 = DWORD2(v513[0]);
        v39 = (unsigned int *)a1[36];
        v38 = (unsigned int *)a1[37];
        if (v38 == v39)
        {
          v41 = (unsigned int *)a1[37];
        }
        else
        {
          v40 = 0x8E38E38E38E38E39 * (((char *)v38 - (char *)v39) >> 3);
          v41 = (unsigned int *)a1[36];
          do
          {
            v42 = v40 >> 1;
            v43 = &v41[18 * (v40 >> 1)];
            v45 = *v43;
            v44 = v43 + 18;
            v40 += ~(v40 >> 1);
            if (v45 < v37)
              v41 = v44;
            else
              v40 = v42;
          }
          while (v40);
          if (v38 != v41)
          {
            if (&v41[18 * (*v41 <= v37)] == v41)
              v41 = (unsigned int *)a1[37];
            if (v41 != v38)
LABEL_35:
              *(_QWORD *)&v39[2 * (((char *)v41 - (char *)v39) >> 3) + 2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
LABEL_36:
            *(_DWORD *)a4 |= 4u;
            v46 = *((_QWORD *)&v513[1] + 1);
            v47 = *(_QWORD *)&v513[1];
            if (*(_QWORD *)&v513[1] != *((_QWORD *)&v513[1] + 1))
            {
              do
              {
                webrtc::RTCPReceiver::HandleReportBlock(a1, v47, a4, v37);
                v47 += 28;
              }
              while (v47 != v46);
LABEL_38:
              v47 = *(_QWORD *)&v513[1];
            }
            *(_QWORD *)&v513[0] = &off_24C0BB310;
            v11 = v493;
            if (!v47)
              goto LABEL_539;
            *((_QWORD *)&v513[1] + 1) = v47;
            v48 = (void *)v47;
LABEL_578:
            operator delete(v48);
            if ((v36 & 1) == 0)
              goto LABEL_612;
            goto LABEL_4;
          }
        }
        if (v38 == v41)
          v41 = (unsigned int *)a1[37];
        if (v41 != v38)
          goto LABEL_35;
        goto LABEL_36;
      case -54:
        DWORD2(v513[0]) = 0;
        *(_QWORD *)&v513[0] = off_24C0C01D0;
        memset(&v513[1], 0, 24);
        *((_QWORD *)&v513[2] + 1) = 4;
        webrtc::rtcp::Sdes::Parse(v513, (uint64_t)&v502);
        v50 = v49;
        v51 = *(void ***)&v513[1];
        if (!v49)
          goto LABEL_246;
        v52 = *((_QWORD *)&v513[1] + 1);
        if (*(_QWORD *)&v513[1] == *((_QWORD *)&v513[1] + 1))
          goto LABEL_245;
        v53 = a1[53];
        if (!v53)
          goto LABEL_245;
        v54 = *(_QWORD *)&v513[1] + 32;
LABEL_47:
        v55 = (_QWORD *)(v54 - 24);
        if (*(char *)(v54 - 1) < 0)
        {
          v56 = *(_QWORD *)(v54 - 16);
          if (v56 < 0)
            goto LABEL_666;
          v55 = (_QWORD *)*v55;
          if (v56)
          {
            if (!v55)
              goto LABEL_666;
          }
        }
        else
        {
          v56 = *(unsigned __int8 *)(v54 - 1);
        }
        (*(void (**)(uint64_t, _QWORD, _QWORD *, uint64_t))(*(_QWORD *)v53 + 16))(v53, *(unsigned int *)(v54 - 32), v55, v56);
        while (v54 != v52)
        {
          v53 = a1[53];
          v54 += 32;
          if (v53)
            goto LABEL_47;
        }
        v51 = *(void ***)&v513[1];
LABEL_245:
        *v494 |= 8u;
LABEL_246:
        *(_QWORD *)&v513[0] = off_24C0C01D0;
        if (v51)
        {
          v215 = (void **)*((_QWORD *)&v513[1] + 1);
          v216 = v51;
          if (*((void ***)&v513[1] + 1) != v51)
          {
            do
            {
              if (*((char *)v215 - 1) < 0)
                operator delete(*(v215 - 3));
              v215 -= 4;
            }
            while (v215 != v51);
            v216 = *(void ***)&v513[1];
          }
          *((_QWORD *)&v513[1] + 1) = v51;
          operator delete(v216);
        }
        if ((v50 & 1) == 0)
          goto LABEL_612;
        a2 = (const unsigned __int8 *)v505 + v504 + v503;
        a4 = (size_t)v494;
        goto LABEL_6;
      case -53:
        DWORD2(v513[0]) = 0;
        *(_QWORD *)&v513[0] = off_24C0B0540;
        memset(&v513[1], 0, 32);
        *(_OWORD *)v514 = 0u;
        webrtc::rtcp::Bye::Parse((uint64_t)v513, (uint64_t)&v502, 0.0, v13, v14, v15, v16, v17);
        v58 = v57;
        if (!v57)
          goto LABEL_509;
        v60 = (char *)a1[39];
        v59 = (char *)a1[40];
        if (v59 == v60)
        {
          v62 = (char *)a1[40];
          v67 = v62;
        }
        else
        {
          v61 = (v59 - v60) >> 5;
          v62 = (char *)a1[39];
          do
          {
            v63 = v61 >> 1;
            v64 = (unsigned int *)&v62[32 * (v61 >> 1)];
            v66 = *v64;
            v65 = (char *)(v64 + 8);
            v61 += ~(v61 >> 1);
            if (v66 < DWORD2(v513[0]))
              v62 = v65;
            else
              v61 = v63;
          }
          while (v61);
          v67 = v62;
          if (v59 != v62)
          {
            v67 = v62 + 32;
            if (DWORD2(v513[0]) < *(_DWORD *)v62)
              v67 = v62;
          }
        }
        v68 = (v62 - v60) >> 5;
        v69 = (v67 - v60) >> 5;
        if (v69 < v68)
          goto LABEL_666;
        if (v68 != v69)
        {
          if (v67 != v59)
          {
            v62 = &v60[32 * v68];
            v70 = v62 + 8;
            do
            {
              *(v70 - 2) = *(_DWORD *)v67;
              v71 = *(_OWORD *)(v67 + 8);
              *((_QWORD *)v70 + 2) = *((_QWORD *)v67 + 3);
              *(_OWORD *)v70 = v71;
              v70 += 8;
              v67 += 32;
              v62 += 32;
            }
            while (v67 != v59);
          }
          a1[40] = v62;
        }
        v72 = a1[45];
        v73 = a1[46];
        if (v72 == v73)
          goto LABEL_448;
        while (*(_DWORD *)(v72 + 8) != DWORD2(v513[0]))
        {
          v72 += 64;
          if (v72 == v73)
            goto LABEL_448;
        }
        if (v72 == v73)
          goto LABEL_448;
        v274 = v72 + 64;
        if (v72 + 64 != v73)
        {
          do
          {
            if (*(_DWORD *)(v274 + 8) != DWORD2(v513[0]))
            {
              *(_DWORD *)v72 = *(_DWORD *)v274;
              v275 = *(_OWORD *)(v274 + 8);
              v276 = *(_OWORD *)(v274 + 24);
              v277 = *(_OWORD *)(v274 + 40);
              *(_QWORD *)(v72 + 56) = *(_QWORD *)(v274 + 56);
              *(_OWORD *)(v72 + 40) = v277;
              *(_OWORD *)(v72 + 24) = v276;
              *(_OWORD *)(v72 + 8) = v275;
              v72 += 64;
            }
            v274 += 64;
          }
          while (v274 != v73);
          v73 = a1[46];
        }
        if (v73 < v72)
          goto LABEL_666;
        if (v72 != v73)
        {
          v328 = (uint64_t)(v73 - v72) >> 6;
          if (v72 + (v328 << 6) != v73)
          {
            v329 = v328 << 6;
            do
            {
              *(_DWORD *)v72 = *(_DWORD *)(v72 + v329);
              v330 = *(_OWORD *)(v72 + v329 + 24);
              v331 = *(_OWORD *)(v72 + v329 + 40);
              v332 = *(_QWORD *)(v72 + v329 + 56);
              *(_OWORD *)(v72 + 8) = *(_OWORD *)(v72 + v329 + 8);
              *(_QWORD *)(v72 + 56) = v332;
              *(_OWORD *)(v72 + 40) = v331;
              *(_OWORD *)(v72 + 24) = v330;
              v72 += 64;
            }
            while (v72 + v329 != v73);
          }
          a1[46] = v72;
        }
LABEL_448:
        v333 = DWORD2(v513[0]);
        v334 = (char *)a1[36];
        v335 = (char *)a1[37];
        if (v335 == v334)
        {
          v337 = (char *)a1[37];
        }
        else
        {
          v336 = 0x8E38E38E38E38E39 * ((v335 - v334) >> 3);
          v337 = (char *)a1[36];
          do
          {
            v338 = v336 >> 1;
            v339 = (unsigned int *)&v337[72 * (v336 >> 1)];
            v341 = *v339;
            v340 = (char *)(v339 + 18);
            v336 += ~(v336 >> 1);
            if (v341 < DWORD2(v513[0]))
              v337 = v340;
            else
              v336 = v338;
          }
          while (v336);
          if (v335 != v337)
          {
            if (&v337[72 * (*(_DWORD *)v337 <= DWORD2(v513[0]))] == v337)
              v337 = (char *)a1[37];
            if (v337 != v335)
LABEL_458:
              v334[8 * ((v337 - v334) >> 3) + 16] = 1;
LABEL_459:
            v343 = (char *)a1[48];
            v342 = (char *)a1[49];
            if (v342 == v343)
            {
              v345 = (char *)a1[49];
              v350 = v345;
            }
            else
            {
              v344 = 0xAAAAAAAAAAAAAAABLL * ((v342 - v343) >> 3);
              v345 = (char *)a1[48];
              do
              {
                v346 = v344 >> 1;
                v347 = (unsigned int *)&v345[24 * (v344 >> 1)];
                v349 = *v347;
                v348 = (char *)(v347 + 6);
                v344 += ~(v344 >> 1);
                if (v349 < v333)
                  v345 = v348;
                else
                  v344 = v346;
              }
              while (v344);
              v350 = v345;
              if (v342 != v345)
              {
                v350 = v345 + 24;
                if (v333 < *(_DWORD *)v345)
                  v350 = v345;
              }
            }
            v351 = 0xAAAAAAAAAAAAAAABLL * ((v345 - v343) >> 3);
            v352 = 0xAAAAAAAAAAAAAAABLL * ((v350 - v343) >> 3);
            if (v352 < v351)
              goto LABEL_666;
            if (v351 != v352)
            {
              if (v350 != v342)
              {
                v345 = &v343[8 * ((v345 - v343) >> 3)];
                v353 = v345 + 8;
                do
                {
                  *(v353 - 2) = *(_DWORD *)v350;
                  v354 = *((_QWORD *)v350 + 1);
                  *((_BYTE *)v353 + 8) = v350[16];
                  *(_QWORD *)v353 = v354;
                  v353 += 6;
                  v350 += 24;
                  v345 += 24;
                }
                while (v350 != v342);
                v333 = DWORD2(v513[0]);
              }
              a1[49] = v345;
            }
            v355 = (char *)a1[29];
            v356 = (char *)a1[30];
            if (v356 == v355)
            {
              v358 = (char *)a1[30];
            }
            else
            {
              v357 = (v356 - v355) >> 4;
              v358 = (char *)a1[29];
              do
              {
                v359 = v357 >> 1;
                v360 = (unsigned int *)&v358[16 * (v357 >> 1)];
                v362 = *v360;
                v361 = (char *)(v360 + 4);
                v357 += ~(v357 >> 1);
                if (v362 < v333)
                  v358 = v361;
                else
                  v357 = v359;
              }
              while (v357);
              if (v356 != v358)
              {
                if (&v358[16 * (v333 >= *(_DWORD *)v358)] == v358)
                  v363 = (char *)a1[30];
                else
                  v363 = v358;
                if (v363 == v356)
                  goto LABEL_507;
                goto LABEL_498;
              }
            }
            if (v356 == v358)
              v363 = (char *)a1[30];
            else
              v363 = v358;
            if (v363 == v356)
            {
LABEL_507:
              if (*((_BYTE *)a1 + 272))
                *((_BYTE *)a1 + 272) = 0;
LABEL_509:
              *(_QWORD *)&v513[0] = off_24C0B0540;
              if ((v514[15] & 0x80000000) != 0)
                operator delete(*((void **)&v513[2] + 1));
              if (*(_QWORD *)&v513[1])
              {
                *((_QWORD *)&v513[1] + 1) = *(_QWORD *)&v513[1];
                operator delete(*(void **)&v513[1]);
              }
              if ((v58 & 1) == 0)
                goto LABEL_612;
              goto LABEL_4;
            }
LABEL_498:
            v364 = *(uint64_t **)&v355[16 * ((v363 - v355) >> 4) + 8];
            if (v364 == v488)
              goto LABEL_666;
            v365 = *v364;
            *(_QWORD *)(v365 + 8) = v364[1];
            *(_QWORD *)v364[1] = v365;
            --a1[28];
            operator delete(v364);
            v370 = (char *)a1[30];
            if (v370 == v363)
            {
              v477 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/containers/flat_tree.h", 885, "position != body_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v366, v367, v368, v369, v478);
              return webrtc::RTCPReceiver::TriggerCallbacksFromRtcpPacket((webrtc::RTCPReceiver *)v477);
            }
            v371 = v363 + 16;
            if (v363 + 16 != v370)
            {
              v372 = v370 - v363 - 32;
              if (v372 < 0x10)
                goto LABEL_672;
              v373 = a1[29];
              v374 = (uint64_t)&v363[-v373] >> 4;
              v375 = (v372 >> 4) + 1;
              v376 = 16 * (v375 & 0x1FFFFFFFFFFFFFFELL);
              v363 += v376;
              v371 += v376;
              v377 = v373 + 16 * v374 + 24;
              v378 = v375 & 0x1FFFFFFFFFFFFFFELL;
              do
              {
                v379 = *(_DWORD *)(v377 + 8);
                *(_DWORD *)(v377 - 24) = *(_DWORD *)(v377 - 8);
                *(_DWORD *)(v377 - 8) = v379;
                v380 = *(_QWORD *)(v377 + 16);
                *(_QWORD *)(v377 - 16) = *(_QWORD *)v377;
                *(_QWORD *)v377 = v380;
                v377 += 32;
                v378 -= 2;
              }
              while (v378);
              if (v375 != (v375 & 0x1FFFFFFFFFFFFFFELL))
              {
LABEL_672:
                do
                {
                  *(_DWORD *)v363 = *(_DWORD *)v371;
                  *((_QWORD *)v363 + 1) = *((_QWORD *)v371 + 1);
                  v363 += 16;
                  v371 += 16;
                }
                while (v371 != v370);
              }
            }
            a1[30] = v363;
            goto LABEL_507;
          }
        }
        if (v335 == v337)
          v337 = (char *)a1[37];
        if (v337 != v335)
          goto LABEL_458;
        goto LABEL_459;
      case -52:
        *(_DWORD *)&__p[8] = 0;
        *(_QWORD *)__p = &off_24C0ACC28;
        __p[12] = 0;
        *(_DWORD *)&__p[16] = 0;
        v508 = 0;
        v507 = 0uLL;
        v74 = (webrtc::rtcp *)webrtc::rtcp::App::Parse((uint64_t)__p, (uint64_t)&v502);
        LOBYTE(v36) = (_BYTE)v74;
        if ((_DWORD)v74 && *(_DWORD *)&__p[16] == 1735356263 && __p[12] == 13)
        {
          DWORD2(v513[0]) = *(_DWORD *)&__p[8];
          *(_QWORD *)((char *)v513 + 12) = *(_QWORD *)&__p[12];
          v485 = v507;
          *(_OWORD *)((char *)&v513[1] + 8) = v507;
          v75 = v508;
          *(_QWORD *)&v513[0] = &unk_24C0BB5B0;
          *((_QWORD *)&v513[2] + 1) = v508;
          *(_QWORD *)v514 = 0x7FF8000000000000;
          *(int64x2_t *)&v514[8] = v490;
          *(int64x2_t *)&v514[24] = v490;
          *(int64x2_t *)&v514[40] = v490;
          *(int64x2_t *)&v514[56] = v490;
          *(int64x2_t *)&v514[72] = v490;
          *(_QWORD *)&v514[88] = 0x8000000000000000;
          v515 = v489;
          v516 = v490;
          v517 = 0x7FF8000000000000;
          RemoteEstimateSerializer = (unsigned int (***)(_QWORD, __int32 *))webrtc::rtcp::GetRemoteEstimateSerializer(v74);
          v518 = (unsigned int (***)(_QWORD, _QWORD))RemoteEstimateSerializer;
          if (v485)
            v77 = v75;
          else
            v77 = 0;
          if ((**RemoteEstimateSerializer)(RemoteEstimateSerializer, v77))
          {
            v78 = *(unsigned __int8 *)(a4 + 456);
            v79 = v516;
            *(int64x2_t *)(v484 + 96) = v515;
            *(int64x2_t *)(v484 + 112) = v79;
            *(_QWORD *)(v484 + 128) = v517;
            v80 = *(_OWORD *)&v514[48];
            *(_OWORD *)(v484 + 32) = *(_OWORD *)&v514[32];
            *(_OWORD *)(v484 + 48) = v80;
            v81 = *(_OWORD *)&v514[80];
            *(_OWORD *)(v484 + 64) = *(_OWORD *)&v514[64];
            *(_OWORD *)(v484 + 80) = v81;
            v82 = *(_OWORD *)&v514[16];
            *(_OWORD *)v484 = *(_OWORD *)v514;
            *(_OWORD *)(v484 + 16) = v82;
            if (!v78)
              *(_BYTE *)(a4 + 456) = 1;
          }
          *(_QWORD *)&v513[0] = &off_24C0ACC28;
          v83 = (__int32 *)*((_QWORD *)&v513[2] + 1);
          *((_QWORD *)&v513[2] + 1) = 0;
          if (!v83)
            goto LABEL_539;
        }
        else
        {
          v83 = v508;
          if (!v508)
            goto LABEL_539;
        }
        MEMORY[0x20BD0ADD4](v83, 0x1000C8077774924);
        if ((v36 & 1) == 0)
          goto LABEL_612;
        goto LABEL_4;
      case -51:
        switch(HIBYTE(v502))
        {
          case 1:
            v513[0] = (unint64_t)&off_24C0B7570;
            memset(&v513[1], 0, 32);
            *(_OWORD *)v514 = 0u;
            webrtc::rtcp::Nack::Parse((webrtc::rtcp::Nack *)v513, (uint64_t)&v502);
            LOBYTE(v36) = v84;
            if (!v84 || *((_BYTE *)a1 + 8))
              goto LABEL_573;
            v85 = a1[3];
            if (v85 <= 1)
              goto LABEL_666;
            v86 = v9;
            if ((v85 & 1) != 0)
              v86 = *(_DWORD **)v9;
            if (*v86 != HIDWORD(v513[0]))
              goto LABEL_573;
            std::vector<short>::__insert_with_size[abi:sn180100]<short const*,short const*>(v479, *(char **)(a4 + 16), *((char **)&v513[2] + 1), *(char **)v514, (uint64_t)(*(_QWORD *)v514 - *((_QWORD *)&v513[2] + 1)) >> 1);
            v87 = (unsigned __int16 *)*((_QWORD *)&v513[2] + 1);
            v88 = *(unsigned __int16 **)v514;
            if (*((_QWORD *)&v513[2] + 1) == *(_QWORD *)v514)
              goto LABEL_574;
            v89 = *((_DWORD *)a1 + 118);
            break;
          case 3:
            v513[0] = (unint64_t)&off_24C0C2650;
            memset(&v513[1], 0, 24);
            v36 = webrtc::rtcp::Tmmbr::Parse((uint64_t)v513, (uint64_t)&v502);
            v48 = *(void **)&v513[1];
            if (!v36)
              goto LABEL_538;
            v278 = HIDWORD(v513[0]) ? HIDWORD(v513[0]) : DWORD2(v513[0]);
            if (*(_QWORD *)&v513[1] == *((_QWORD *)&v513[1] + 1))
              goto LABEL_538;
            v279 = a1[3];
            if (v279 < 2)
              goto LABEL_666;
            if ((v279 & 1) != 0)
            {
              v280 = *(_QWORD *)&v513[1];
              while (**(_DWORD **)v9 != *(_DWORD *)v280 || !*(_QWORD *)(v280 + 8))
              {
                v280 += 24;
                if (v280 == *((_QWORD *)&v513[1] + 1))
                  goto LABEL_538;
              }
            }
            else
            {
              v280 = *(_QWORD *)&v513[1];
              while (*v9 != *(_DWORD *)v280 || !*(_QWORD *)(v280 + 8))
              {
                v280 += 24;
                if (v280 == *((_QWORD *)&v513[1] + 1))
                  goto LABEL_538;
              }
            }
            *(_DWORD *)__p = DWORD2(v513[0]);
            v393 = webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::TmmbrInformation,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::TmmbrInformation>>>::operator[](v480, (unsigned int *)__p);
            *(_QWORD *)v393 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
            v395 = (uint64_t **)(v393 + 48);
            v394 = (char *)*((_QWORD *)v393 + 6);
            if (!v394)
            {
              v396 = v393 + 48;
              goto LABEL_534;
            }
            do
            {
              while (1)
              {
                v396 = v394;
                v397 = *((_DWORD *)v394 + 8);
                if (v278 >= v397)
                  break;
                v394 = *(char **)v396;
                v395 = (uint64_t **)v396;
                if (!*(_QWORD *)v396)
                  goto LABEL_534;
              }
              if (v397 >= v278)
                goto LABEL_537;
              v394 = (char *)*((_QWORD *)v396 + 1);
            }
            while (v394);
            v395 = (uint64_t **)(v396 + 8);
LABEL_534:
            v398 = v396;
            v396 = (char *)operator new(0x48uLL);
            *((_DWORD *)v396 + 8) = v278;
            *(_OWORD *)(v396 + 40) = 0u;
            *(_OWORD *)(v396 + 56) = 0u;
            *(_QWORD *)v396 = 0;
            *((_QWORD *)v396 + 1) = 0;
            *((_QWORD *)v396 + 2) = v398;
            *v395 = (uint64_t *)v396;
            v399 = **((_QWORD **)v393 + 5);
            v400 = (uint64_t *)v396;
            if (v399)
            {
              *((_QWORD *)v393 + 5) = v399;
              v400 = *v395;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v393 + 6), v400);
            ++*((_QWORD *)v393 + 7);
LABEL_537:
            v401 = *(_QWORD *)(v280 + 8);
            v402 = *(_WORD *)(v280 + 16);
            *((_DWORD *)v396 + 10) = v278;
            *((_QWORD *)v396 + 6) = v401;
            *((_WORD *)v396 + 28) = v402;
            *((_QWORD *)v396 + 8) = *(_QWORD *)v393;
            a4 = (size_t)v494;
            *v494 |= 0x100u;
            v48 = *(void **)&v513[1];
            v11 = v493;
LABEL_538:
            *(_QWORD *)&v513[0] = &off_24C0C2650;
            if (!v48)
              goto LABEL_539;
LABEL_577:
            *((_QWORD *)&v513[1] + 1) = v48;
            goto LABEL_578;
          case 4:
            v513[0] = (unint64_t)&off_24C0C2620;
            memset(&v513[1], 0, 24);
            v281 = webrtc::rtcp::Tmmbn::Parse((uint64_t)v513, (uint64_t)&v502);
            v282 = v281;
            if (!v281)
              goto LABEL_568;
            *(_DWORD *)__p = DWORD2(v513[0]);
            v283 = webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::TmmbrInformation,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::TmmbrInformation>>>::operator[](v480, (unsigned int *)__p);
            *(_QWORD *)v283 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
            *(_DWORD *)a4 |= 0x200u;
            if (v283 + 16 == (char *)&v513[1])
              goto LABEL_568;
            v284 = v513[1];
            v285 = *((_QWORD *)&v513[1] + 1) - *(_QWORD *)&v513[1];
            v286 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v513[1] + 1) - *(_QWORD *)&v513[1]) >> 3);
            v287 = *((_QWORD *)v283 + 4);
            v288 = (char *)*((_QWORD *)v283 + 2);
            if (0xAAAAAAAAAAAAAAABLL * ((v287 - (uint64_t)v288) >> 3) >= v286)
            {
              v389 = (char *)*((_QWORD *)v283 + 3);
              v294 = v283 + 24;
              v388 = v389;
              v390 = v389 - v288;
              v391 = 0xAAAAAAAAAAAAAAABLL * ((v389 - v288) >> 3);
              if (v391 >= v286)
              {
                if (*((_QWORD *)&v513[1] + 1) != *(_QWORD *)&v513[1])
                  memmove(v288, *(const void **)&v513[1], v285 - 6);
                v8 = v491;
              }
              else
              {
                if (v388 != v288)
                {
                  memmove(v288, *(const void **)&v513[1], v390 - 6);
                  v288 = *(char **)v294;
                }
                v392 = (const void *)(v284 + 24 * v391);
                v285 = *((_QWORD *)&v284 + 1) - (_QWORD)v392;
                if (*((const void **)&v284 + 1) != v392)
                  memmove(v288, v392, v285 - 6);
                v8 = v491;
              }
            }
            else
            {
              if (v288)
              {
                *((_QWORD *)v283 + 3) = v288;
                operator delete(v288);
                v287 = 0;
                *((_QWORD *)v283 + 2) = 0;
                *((_QWORD *)v283 + 3) = 0;
                *((_QWORD *)v283 + 4) = 0;
              }
              if (v286 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_667;
              v289 = 0xAAAAAAAAAAAAAAABLL * (v287 >> 3);
              v290 = 2 * v289;
              if (2 * v289 <= v286)
                v290 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v284 + 1) - v284) >> 3);
              v291 = v289 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v290;
              if (v291 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_667;
              v292 = 24 * v291;
              v293 = (char *)operator new(24 * v291);
              v288 = v293;
              *((_QWORD *)v283 + 3) = v293;
              v294 = v283 + 24;
              *((_QWORD *)v294 - 1) = v293;
              *((_QWORD *)v294 + 1) = &v293[v292];
              if (*((_QWORD *)&v284 + 1) != (_QWORD)v284)
                memcpy(v293, (const void *)v284, v285 - 6);
              v8 = v491;
            }
            a4 = (size_t)v494;
            *(_QWORD *)v294 = &v288[v285];
LABEL_568:
            *(_QWORD *)&v513[0] = &off_24C0C2620;
            if (*(_QWORD *)&v513[1])
            {
              *((_QWORD *)&v513[1] + 1) = *(_QWORD *)&v513[1];
              operator delete(*(void **)&v513[1]);
            }
            v11 = v493;
            v9 = (unsigned int *)(a1 + 4);
            if ((v282 & 1) == 0)
              goto LABEL_612;
            goto LABEL_4;
          case 5:
            if (v504 != 8)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v438, v439, v440, v441, v442, v443, v444, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/rapid_resync_request.cc");
              goto LABEL_612;
            }
            *(_DWORD *)a4 |= 0x400u;
            a2 = (const unsigned __int8 *)v505 + v503 + 8;
            goto LABEL_6;
          case 0xB:
            if (!*((_BYTE *)a1 + 9))
              goto LABEL_3;
            v513[0] = (unint64_t)&off_24C0B1440;
            memset(&v513[1], 0, 28);
            if (!webrtc::rtcp::CongestionControlFeedback::Parse((uint64_t)v513, (uint64_t)&v502))
            {
              *(_QWORD *)&v513[0] = &off_24C0B1440;
              if (*(_QWORD *)&v513[1])
              {
                *((_QWORD *)&v513[1] + 1) = *(_QWORD *)&v513[1];
                operator delete(*(void **)&v513[1]);
              }
              goto LABEL_612;
            }
            if (*(_BYTE *)(a4 + 136))
            {
              *(_QWORD *)(a4 + 88) = &off_24C0B1440;
              v295 = *(void **)(a4 + 104);
              if (v295)
              {
                *(_QWORD *)(a4 + 112) = v295;
                operator delete(v295);
              }
            }
            *(_QWORD *)(a4 + 96) = *((_QWORD *)&v513[0] + 1);
            *(_QWORD *)(a4 + 88) = &off_24C0B1440;
            *(_OWORD *)(a4 + 104) = v513[1];
            *(_QWORD *)(a4 + 120) = *(_QWORD *)&v513[2];
            *(_DWORD *)(a4 + 128) = DWORD2(v513[2]);
            a2 = (const unsigned __int8 *)v505 + v504 + v503;
            *(_BYTE *)(a4 + 136) = 1;
            goto LABEL_6;
          case 0xF:
            v296 = operator new();
            *(_QWORD *)v296 = &off_24C0C2908;
            *(_QWORD *)(v296 + 8) = 0;
            *(_QWORD *)(v296 + 16) = 0;
            *(_WORD *)(v296 + 24) = 256;
            *(_QWORD *)(v296 + 128) = 0;
            *(_OWORD *)(v296 + 32) = 0u;
            *(_OWORD *)(v296 + 48) = 0u;
            *(_OWORD *)(v296 + 64) = 0u;
            *(_OWORD *)(v296 + 80) = 0u;
            *(_OWORD *)(v296 + 96) = 0u;
            *(_WORD *)(v296 + 136) = 1;
            *(_QWORD *)(v296 + 144) = 20;
            if ((webrtc::rtcp::TransportFeedback::Parse(v296, (uint64_t)&v502) & 1) != 0)
            {
              v297 = a1[3];
              if (v297 <= 1)
                goto LABEL_666;
              v298 = v9;
              if ((v297 & 1) != 0)
                v298 = *(_DWORD **)v9;
              v299 = *(_DWORD *)(v296 + 12);
              if (v299 == *v298
                || ((v297 & 1) != 0 ? (v300 = *(__int32 **)v9) : (v300 = (__int32 *)v9),
                    (v301 = v297 >> 1, v302 = &v300[v297 >> 1], (v303 = wmemchr(v300, v299, v297 >> 1)) != 0)
                  ? (v304 = v303)
                  : (v304 = v302),
                    v273 = v301 == v304 - v300,
                    v11 = v493,
                    !v273))
              {
                *(_DWORD *)a4 |= 0x100000u;
                v305 = *(_QWORD *)(a4 + 80);
                *(_QWORD *)(a4 + 80) = v296;
                v296 = v305;
                if (!v305)
                  goto LABEL_4;
              }
            }
            else
            {
              ++a1[60];
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v296 + 8))(v296);
            goto LABEL_4;
          default:
            goto LABEL_3;
        }
        do
        {
          v271 = *v87;
          if (!v89)
          {
LABEL_338:
            *((_WORD *)a1 + 234) = v271;
            ++*((_DWORD *)a1 + 119);
            goto LABEL_339;
          }
          v272 = *((unsigned __int16 *)a1 + 234);
          if (v271 - v272 == 0x8000)
          {
            if (v272 < v271)
              goto LABEL_338;
          }
          else
          {
            v273 = v272 != v271 && (((_WORD)v271 - (_WORD)v272) & 0x8000) == 0;
            if (v273)
              goto LABEL_338;
          }
LABEL_339:
          ++v89;
          ++v87;
        }
        while (v87 != v88);
        *((_DWORD *)a1 + 118) = v89;
        *(_DWORD *)a4 |= 0x40u;
        ++*((_DWORD *)a1 + 112);
        *((_DWORD *)a1 + 115) = v89;
        *((_DWORD *)a1 + 116) = *((_DWORD *)a1 + 119);
LABEL_573:
        v87 = (unsigned __int16 *)*((_QWORD *)&v513[2] + 1);
LABEL_574:
        *(_QWORD *)&v513[0] = &off_24C0B7570;
        if (v87)
        {
          *(_QWORD *)v514 = v87;
          operator delete(v87);
        }
        v48 = *(void **)&v513[1];
        if (*(_QWORD *)&v513[1])
          goto LABEL_577;
LABEL_539:
        if ((v36 & 1) != 0)
          goto LABEL_4;
LABEL_612:
        v10 = 0;
        if (!a1[60])
          goto LABEL_630;
LABEL_613:
        v445 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
        v446 = a1[61];
        v447 = v445 == 0x7FFFFFFFFFFFFFFFLL || v446 == 0x8000000000000000;
        if (v447
          || (v445 != 0x8000000000000000 ? (v448 = v446 == 0x7FFFFFFFFFFFFFFFLL) : (v448 = 1),
              !v448 ? (v449 = v445 - v446 <= 9999999) : (v449 = 1),
              !v449))
        {
          a1[61] = v445;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v496[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/"
                      "rtp_rtcp/source/rtcp_receiver.cc";
            v496[1] = 3898;
            v496[2] = &v495;
            v497[0] = a1[60];
            v497[1] = v496;
            v498[0] = " RTCP blocks were skipped due to being malformed or of unrecognized/unsupported type, during the past ";
            v498[1] = v497;
            webrtc::ToString((webrtc *)0x989680, v450, __p);
            if ((__p[23] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v513, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
              v458 = v498;
              *((_QWORD *)&v513[1] + 1) = v498;
              if ((__p[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__p);
                v458 = (_QWORD *)*((_QWORD *)&v513[1] + 1);
              }
            }
            else
            {
              v513[0] = *(_OWORD *)__p;
              v458 = v498;
              *(_QWORD *)&v513[1] = *(_QWORD *)&__p[16];
              *((_QWORD *)&v513[1] + 1) = v498;
            }
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v451, v452, v453, v454, v455, v456, v457, **(_QWORD **)(v458[1] + 8));
            if (SBYTE7(v513[1]) < 0)
            {
              operator delete(*(void **)&v513[0]);
              if ((v10 & 1) == 0)
                goto LABEL_662;
LABEL_631:
              v460 = v499;
              v459 = v500;
              if (v499 == v500)
              {
LABEL_656:
                v474 = a1[55];
                if (!v474)
                  goto LABEL_663;
                v475 = a1[3];
                if (v475 > 1)
                {
                  if ((v475 & 1) != 0)
                    v9 = *(unsigned int **)v9;
                  (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v474 + 16))(v474, *v9, a1 + 56);
                  goto LABEL_663;
                }
                goto LABEL_666;
              }
              v461 = v499;
              while (!v461[4] || v461[5] != 0)
              {
LABEL_633:
                v461 += 8;
                if (v461 == v459)
                  goto LABEL_656;
              }
              v463 = (char *)a1[42];
              v464 = (char *)a1[43];
              if (v464 == v463)
              {
                v466 = (char *)a1[43];
              }
              else
              {
                v465 = 0xCCCCCCCCCCCCCCCDLL * ((v464 - v463) >> 3);
                v466 = (char *)a1[42];
                do
                {
                  v467 = v465 >> 1;
                  v468 = (unsigned int *)&v466[40 * (v465 >> 1)];
                  v470 = *v468;
                  v469 = (char *)(v468 + 10);
                  v465 += ~(v465 >> 1);
                  if (v470 < *(_DWORD *)v461)
                    v466 = v469;
                  else
                    v465 = v467;
                }
                while (v465);
                if (v464 != v466)
                {
                  if (&v466[40 * (*(_DWORD *)v461 >= *(_DWORD *)v466)] == v466)
                    v466 = (char *)a1[43];
                  if (v466 == v464)
                    goto LABEL_633;
                  goto LABEL_654;
                }
              }
              if (v464 == v466)
                v466 = (char *)a1[43];
              if (v466 == v464)
                goto LABEL_633;
LABEL_654:
              v471 = &v463[8 * ((v466 - v463) >> 3)];
              v473 = v471[16];
              v472 = v471 + 16;
              if (v473)
                *v472 = 0;
              goto LABEL_633;
            }
          }
        }
LABEL_630:
        if ((v10 & 1) != 0)
          goto LABEL_631;
LABEL_662:
        ++a1[60];
        v460 = v499;
LABEL_663:
        if (v460)
          operator delete(v460);
        pthread_mutex_unlock(v8);
        return v10;
      case -50:
        if (HIBYTE(v502) == 15)
        {
          v513[0] = (unint64_t)&off_24C0BB3F0;
          memset(&v513[1], 0, 32);
          if (webrtc::rtcp::Remb::Parse((uint64_t)v513, (uint64_t)&v502))
          {
            *(_DWORD *)a4 |= 0x10000u;
            v208 = (void *)*((_QWORD *)&v513[1] + 1);
            *(_DWORD *)(a4 + 72) = v513[1];
            *(_QWORD *)&v513[0] = &off_24C0BB3F0;
            if (v208)
            {
              *(_QWORD *)&v513[2] = v208;
              operator delete(v208);
            }
          }
          else
          {
            *(_QWORD *)&v513[0] = &off_24C0BB3F0;
            if (*((_QWORD *)&v513[1] + 1))
            {
              *(_QWORD *)&v513[2] = *((_QWORD *)&v513[1] + 1);
              operator delete(*((void **)&v513[1] + 1));
            }
            v306 = operator new();
            *(_QWORD *)v306 = &unk_24C0B6958;
            *(_QWORD *)(v306 + 8) = 0;
            *(_DWORD *)(v306 + 16) = 0;
            *(_BYTE *)(v306 + 20) = 0;
            if (v504 < 0x10 || (v307 = v505, bswap32(v505[2]) != 1280201798))
              webrtc::rtcp::LossNotification::~LossNotification((webrtc::rtcp::LossNotification *)v306);
            *(_DWORD *)(v306 + 8) = bswap32(*v505);
            *(_DWORD *)(v306 + 12) = bswap32(v307[1]);
            v308 = bswap32(*((unsigned __int16 *)v307 + 6)) >> 16;
            *(_WORD *)(v306 + 16) = v308;
            v309 = *((unsigned __int8 *)v307 + 14);
            v310 = *((unsigned __int8 *)v307 + 15);
            *(_WORD *)(v306 + 18) = v308 + ((unsigned __int16)(v310 & 0xFFFE | (v309 << 8)) >> 1);
            *(_BYTE *)(v306 + 20) = v310 & 1;
            *(_DWORD *)a4 |= 0x2000u;
            v311 = *(_QWORD *)(a4 + 464);
            *(_QWORD *)(a4 + 464) = v306;
            if (v311)
              (*(void (**)(uint64_t))(*(_QWORD *)v311 + 8))(v311);
          }
          goto LABEL_4;
        }
        if (HIBYTE(v502) != 4)
        {
          if (HIBYTE(v502) == 1)
          {
            v90 = v504;
            if (v504 <= 7)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v431, v432, v433, v434, v435, v436, v437, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/pli.cc");
              goto LABEL_612;
            }
            v91 = a1[3];
            if (v91 > 1)
            {
              v92 = v9;
              if ((v91 & 1) != 0)
                v92 = *(_DWORD **)v9;
              v93 = v505;
              if (*v92 == bswap32(v505[1]))
              {
                ++*((_DWORD *)a1 + 114);
                *(_DWORD *)a4 |= 0x20u;
              }
              v12 = (char *)v93 + v90;
              goto LABEL_5;
            }
LABEL_666:
            __break(1u);
LABEL_667:
            abort();
          }
LABEL_3:
          ++a1[60];
LABEL_4:
          v12 = (char *)v505 + v504;
LABEL_5:
          a2 = (const unsigned __int8 *)&v12[v503];
          goto LABEL_6;
        }
        v513[0] = (unint64_t)&off_24C0B4290;
        memset(&v513[1], 0, 24);
        v209 = webrtc::rtcp::Fir::Parse((webrtc::rtcp::Fir *)v513, (const webrtc::rtcp::CommonHeader *)&v502);
        v210 = v209;
        v211 = *(unsigned __int8 **)&v513[1];
        if (!v209 || *(_QWORD *)&v513[1] == *((_QWORD *)&v513[1] + 1))
          goto LABEL_435;
        v483 = v209;
        v212 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
        v213 = (unsigned __int8 *)*((_QWORD *)&v513[1] + 1);
        v211 = *(unsigned __int8 **)&v513[1];
        if (*(_QWORD *)&v513[1] == *((_QWORD *)&v513[1] + 1))
          goto LABEL_434;
        v214 = v212;
        v487 = v212;
        do
        {
          v218 = a1[3];
          if (v218 <= 1)
            goto LABEL_666;
          v219 = v9;
          if ((v218 & 1) != 0)
            v219 = *(_DWORD **)v9;
          if (*v219 == *(_DWORD *)v211)
          {
            ++*((_DWORD *)a1 + 113);
            v220 = DWORD2(v513[0]);
            v221 = (char *)a1[48];
            v222 = (char *)a1[49];
            v223 = v222 - v221;
            if (v222 == v221)
            {
              v225 = (char *)a1[49];
            }
            else
            {
              v224 = 0xAAAAAAAAAAAAAAABLL * (v223 >> 3);
              v225 = (char *)a1[48];
              do
              {
                v226 = v224 >> 1;
                v227 = (unsigned int *)&v225[24 * (v224 >> 1)];
                v229 = *v227;
                v228 = (char *)(v227 + 6);
                v224 += ~(v224 >> 1);
                if (v229 < DWORD2(v513[0]))
                  v225 = v228;
                else
                  v224 = v226;
              }
              while (v224);
            }
            v230 = (unsigned __int128)((v225 - v221) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
            v231 = (v230 >> 2) + ((unint64_t)v230 >> 63);
            v232 = &v221[24 * v231];
            if (v232 == v222)
            {
              v233 = a1[50];
              if ((unint64_t)v222 < v233)
              {
                if (!v221)
                  goto LABEL_666;
                *(_DWORD *)v222 = DWORD2(v513[0]);
                v241 = v211[4];
                v242 = &v221[24 * v231];
                *((_QWORD *)v242 + 1) = v214;
                v242[16] = v241;
                a1[49] = v222 + 24;
LABEL_257:
                v9 = (unsigned int *)(a1 + 4);
LABEL_258:
                *(_DWORD *)a4 |= 0x80u;
                goto LABEL_259;
              }
LABEL_284:
              v243 = 1 - 0x5555555555555555 * (v223 >> 3);
              if (v243 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_667;
              v244 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v233 - (_QWORD)v221) >> 3);
              if (2 * v244 > v243)
                v243 = 2 * v244;
              if (v244 >= 0x555555555555555)
                v245 = 0xAAAAAAAAAAAAAAALL;
              else
                v245 = v243;
              if (v245)
              {
                if (v245 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_668;
                v246 = (char *)operator new(24 * v245);
                v214 = v487;
                v247 = (unint64_t)&v246[24 * v231];
                v248 = &v246[24 * v245];
                if ((char *)v247 != v248)
                  goto LABEL_315;
              }
              else
              {
                v246 = 0;
                v247 = 24 * v231;
                v248 = 0;
                if (v247)
                  goto LABEL_315;
              }
              v255 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - (_QWORD)v246) >> 3);
              if (v247 <= (unint64_t)v246)
              {
                v257 = 0x5555555555555556 * ((uint64_t)(v247 - (_QWORD)v246) >> 3);
                if ((char *)v247 == v246)
                  v257 = 1;
                if (v257 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_668;
                v258 = v257 >> 2;
                v259 = 24 * v257;
                v260 = (char *)operator new(24 * v257);
                v247 = (unint64_t)&v260[24 * v258];
                v248 = &v260[v259];
                if (v246)
                  operator delete(v246);
                v214 = v487;
              }
              else
              {
                if (v255 >= -1)
                  v256 = v255 + 1;
                else
                  v256 = v255 + 2;
                v248 = (char *)v247;
                v247 -= 24 * (v256 >> 1);
              }
LABEL_315:
              v8 = v491;
              if (!v247)
                goto LABEL_666;
              *(_DWORD *)v247 = v220;
              v261 = v211[4];
              *(_QWORD *)(v247 + 8) = v214;
              *(_BYTE *)(v247 + 16) = v261;
              v262 = (char *)a1[48];
              v263 = v247;
              if (v262 != v232)
              {
                v264 = v232;
                v265 = v247;
                do
                {
                  v263 = v265 - 24;
                  v266 = *(_OWORD *)(v264 - 24);
                  *(_QWORD *)(v265 - 8) = *((_QWORD *)v264 - 1);
                  *(_OWORD *)(v265 - 24) = v266;
                  v264 -= 24;
                  v265 -= 24;
                }
                while (v264 != v262);
              }
              v267 = v247 + 24;
              v268 = (char *)a1[49];
              v9 = (unsigned int *)(a1 + 4);
              if (v268 == v232)
              {
                a4 = (size_t)v494;
                v270 = (void *)a1[48];
                a1[48] = v263;
                a1[49] = v267;
                a1[50] = v248;
                if (!v270)
                  goto LABEL_258;
              }
              else
              {
                a4 = (size_t)v494;
                do
                {
                  v269 = *(_OWORD *)v232;
                  *(_QWORD *)(v267 + 16) = *((_QWORD *)v232 + 2);
                  *(_OWORD *)v267 = v269;
                  v267 += 24;
                  v232 += 24;
                }
                while (v232 != v268);
                v270 = (void *)a1[48];
                a1[48] = v263;
                a1[49] = v267;
                a1[50] = v248;
                if (!v270)
                  goto LABEL_258;
              }
              operator delete(v270);
              v214 = v487;
              goto LABEL_258;
            }
            if (DWORD2(v513[0]) < *(_DWORD *)v232)
            {
              v233 = a1[50];
              if ((unint64_t)v222 < v233)
              {
                v234 = v211[4];
                v235 = v222 - 24;
                v236 = a1[49];
                v237 = v222 - 24;
                if ((unint64_t)v222 >= 0x18)
                {
                  do
                  {
                    v238 = *(_OWORD *)v237;
                    *(_QWORD *)(v236 + 16) = *((_QWORD *)v237 + 2);
                    *(_OWORD *)v236 = v238;
                    v236 += 24;
                    v237 += 24;
                  }
                  while (v237 < v222);
                }
                a1[49] = v236;
                if (v222 != v232 + 24)
                {
                  v239 = 8 * ((v222 - (v232 + 24)) >> 3);
                  do
                  {
                    *(_DWORD *)v235 = *(_DWORD *)&v232[v239 - 24];
                    v240 = *(_QWORD *)&v232[v239 - 16];
                    v235[16] = v232[v239 - 8];
                    *((_QWORD *)v235 + 1) = v240;
                    v235 -= 24;
                    v239 -= 24;
                  }
                  while (v239);
                }
                *(_DWORD *)v232 = v220;
                v217 = &v221[24 * v231];
                *((_QWORD *)v217 + 1) = v214;
                v217[16] = v234;
                goto LABEL_257;
              }
              goto LABEL_284;
            }
            v249 = &v221[24 * v231];
            v251 = v249[16];
            v250 = v249 + 16;
            v9 = (unsigned int *)(a1 + 4);
            if (v211[4] != v251)
            {
              if ((v252 = (uint64_t *)(v250 - 8), v214 == 0x7FFFFFFFFFFFFFFFLL)
                || (v253 = *v252, *v252 == 0x8000000000000000)
                || v214 != 0x8000000000000000
                && (v253 != 0x7FFFFFFFFFFFFFFFLL ? (v254 = v214 - v253 < 17000) : (v254 = 1), !v254))
              {
                *v252 = v214;
                *v250 = v211[4];
                goto LABEL_258;
              }
            }
          }
LABEL_259:
          v211 += 8;
        }
        while (v211 != v213);
        v211 = *(unsigned __int8 **)&v513[1];
LABEL_434:
        v210 = v483;
LABEL_435:
        *(_QWORD *)&v513[0] = &off_24C0B4290;
        if (v211)
        {
          *((_QWORD *)&v513[1] + 1) = v211;
          operator delete(v211);
        }
        if ((v210 & 1) == 0)
          goto LABEL_612;
        a2 = (const unsigned __int8 *)v505 + v504 + v503;
        v11 = v493;
LABEL_6:
        if (a2 == v11)
        {
          v10 = 1;
          if (a1[60])
            goto LABEL_613;
          goto LABEL_630;
        }
        continue;
      case -49:
        LODWORD(v496[0]) = 0;
        *(_DWORD *)&__p[8] = 0;
        *(_QWORD *)__p = &off_24C0B3E10;
        __p[16] = 0;
        LOBYTE(v507) = 0;
        v512 = 0;
        v508 = 0;
        v509 = 0;
        *((_QWORD *)&v507 + 1) = 0;
        LOBYTE(v510) = 0;
        v94 = webrtc::rtcp::ExtendedReports::Parse((webrtc::rtcp::ExtendedReports *)__p, (const webrtc::rtcp::CommonHeader *)&v502);
        v95 = v94;
        v96 = 0;
        if (!v94)
          goto LABEL_423;
        v482 = v94;
        v97 = *(_DWORD *)&__p[8];
        LODWORD(v496[0]) = *(_DWORD *)&__p[8];
        v98 = (__int32 *)*((_QWORD *)&v507 + 1);
        v99 = v508;
        v486 = *((_QWORD *)&v507 + 1) != (_QWORD)v508;
        if (!(_BYTE)v507)
          goto LABEL_140;
        v100 = *(_DWORD *)&__p[16];
        v101 = *(_DWORD *)&__p[20];
        v102 = *a1;
        v103 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
        v104 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v102 + 24))(v102, v103);
        v105 = (char *)a1[29];
        v106 = (char *)a1[30];
        if (v106 == v105)
        {
          v108 = (char *)a1[30];
          v113 = v108;
        }
        else
        {
          v107 = (v106 - v105) >> 4;
          v108 = (char *)a1[29];
          do
          {
            v109 = v107 >> 1;
            v110 = &v108[16 * (v107 >> 1)];
            v112 = *(_DWORD *)v110;
            v111 = v110 + 16;
            v107 += ~(v107 >> 1);
            if (v112 < v97)
              v108 = v111;
            else
              v107 = v109;
          }
          while (v107);
          v113 = (char *)a1[30];
          if (v106 != v108)
            v113 = &v108[16 * (*(_DWORD *)v108 <= v97)];
        }
        v114 = __PAIR64__(v101, v100) >> 16;
        v115 = v104 >> 16;
        if (v113 == v108)
          v108 = (char *)a1[30];
        if (v108 != v106)
        {
          v116 = *(_QWORD *)&v105[16 * ((v108 - v105) >> 4) + 8];
          *(_DWORD *)(v116 + 20) = v114;
          *(_DWORD *)(v116 + 24) = v115;
          v9 = (unsigned int *)(a1 + 4);
          a4 = (size_t)v494;
          goto LABEL_119;
        }
        v312 = a1[28];
        if (v312 > 0x12B)
        {
          v9 = (unsigned int *)(a1 + 4);
          a4 = (size_t)v494;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v381, v382, v383, v384, v385, v386, v387, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
          goto LABEL_119;
        }
        v313 = operator new(0x20uLL);
        v314 = v313;
        v313[4] = v97;
        v313[5] = v114;
        v313[6] = v115;
        v315 = a1[26];
        *(_QWORD *)v313 = v315;
        *((_QWORD *)v313 + 1) = v488;
        *(_QWORD *)(v315 + 8) = v313;
        a1[26] = v313;
        a1[28] = v312 + 1;
        v316 = v106 - v105;
        if (v106 == v105)
        {
          v318 = v106;
        }
        else
        {
          v317 = v316 >> 4;
          v318 = v105;
          do
          {
            v319 = v317 >> 1;
            v320 = &v318[16 * (v317 >> 1)];
            v322 = *(_DWORD *)v320;
            v321 = v320 + 16;
            v317 += ~(v317 >> 1);
            if (v322 < v97)
              v318 = v321;
            else
              v317 = v319;
          }
          while (v317);
        }
        a4 = (size_t)v494;
        v403 = v318 - v105;
        v404 = (v318 - v105) >> 4;
        v405 = &v105[(v318 - v105) & 0xFFFFFFFFFFFFFFF0];
        if (v405 == v106)
        {
          v406 = a1[31];
          if ((unint64_t)v106 < v406)
          {
            if (!v105)
              goto LABEL_666;
            *(_DWORD *)v106 = v97;
            *(_QWORD *)&v105[16 * v404 + 8] = 0;
            a1[30] = v106 + 16;
            v412 = v106;
            v9 = (unsigned int *)(a1 + 4);
            *((_QWORD *)v412 + 1) = v313;
            goto LABEL_119;
          }
        }
        else
        {
          if (*(_DWORD *)v405 <= v97)
          {
            v9 = (unsigned int *)(a1 + 4);
            *((_QWORD *)v405 + 1) = v313;
            goto LABEL_119;
          }
          v406 = a1[31];
          if ((unint64_t)v106 < v406)
          {
            v407 = v106 - 16;
            v408 = v106;
            if ((unint64_t)v106 >= 0x10)
            {
              do
              {
                v409 = *(_OWORD *)v407;
                v407 += 16;
                *(_OWORD *)v408 = v409;
                v408 += 16;
              }
              while (v407 < v106);
            }
            a1[30] = v408;
            if (v106 != v405 + 16)
            {
              v410 = v106 - 8;
              v411 = 16 * ((v106 - (v405 + 16)) >> 4);
              do
              {
                *((_DWORD *)v410 - 2) = *(_DWORD *)&v405[v411 - 16];
                *(_QWORD *)v410 = *(_QWORD *)&v405[v411 - 8];
                v410 -= 16;
                v411 -= 16;
              }
              while (v411);
            }
            *(_DWORD *)v405 = v97;
            *(_QWORD *)&v105[16 * v404 + 8] = 0;
            v9 = (unsigned int *)(a1 + 4);
            *((_QWORD *)v405 + 1) = v313;
            goto LABEL_119;
          }
        }
        v413 = (v316 >> 4) + 1;
        if (v413 >> 60)
          goto LABEL_667;
        v414 = v406 - (_QWORD)v105;
        if (v414 >> 3 > v413)
          v413 = v414 >> 3;
        if ((unint64_t)v414 >= 0x7FFFFFFFFFFFFFF0)
          v415 = 0xFFFFFFFFFFFFFFFLL;
        else
          v415 = v413;
        if (v415)
        {
          if (v415 >> 60)
            goto LABEL_668;
          v416 = (char *)operator new(16 * v415);
        }
        else
        {
          v416 = 0;
        }
        v417 = &v416[16 * v404];
        v418 = &v416[16 * v415];
        if (v404 != v415)
        {
          v9 = (unsigned int *)(a1 + 4);
LABEL_587:
          if (!v417)
            goto LABEL_666;
          *(_DWORD *)v417 = v97;
          *((_QWORD *)v417 + 1) = 0;
          v420 = (char *)a1[29];
          v421 = v417;
          if (v420 != v405)
          {
            v422 = v405;
            v423 = v417;
            do
            {
              v421 = v423 - 16;
              *((_OWORD *)v423 - 1) = *((_OWORD *)v422 - 1);
              v422 -= 16;
              v423 -= 16;
            }
            while (v422 != v420);
          }
          v424 = v417 + 16;
          for (i = (char *)a1[30]; v405 != i; ++v424)
          {
            v426 = *(_OWORD *)v405;
            v405 += 16;
            *v424 = v426;
          }
          v427 = (void *)a1[29];
          a1[29] = v421;
          a1[30] = v424;
          a1[31] = v418;
          if (v427)
            operator delete(v427);
          v428 = v417;
          a4 = (size_t)v494;
          *((_QWORD *)v428 + 1) = v314;
LABEL_119:
          v98 = (__int32 *)*((_QWORD *)&v507 + 1);
          v99 = v508;
          if (*((__int32 **)&v507 + 1) == v508)
          {
LABEL_120:
            if (v512)
            {
              v8 = v491;
              v11 = v493;
              v96 = v486;
              if (*((_DWORD *)a1 + 40) == *(_DWORD *)&__p[8])
              {
                v117 = v511;
                v118 = v510;
                LODWORD(v513[0]) = 0;
                BYTE4(v513[0]) = 0;
                BYTE8(v513[0]) = 0;
                BYTE12(v513[0]) = 0;
                LOBYTE(v513[1]) = 0;
                BYTE4(v513[1]) = 0;
                BYTE8(v513[1]) = 0;
                BYTE12(v513[1]) = 0;
                LOBYTE(v513[2]) = 0;
                BYTE4(v513[2]) = 0;
                BYTE8(v513[2]) = 0;
                BYTE12(v513[2]) = 0;
                v514[0] = 0;
                v514[4] = 0;
                v514[8] = 0;
                v514[12] = 0;
                v514[16] = 0;
                v514[20] = 0;
                v514[24] = 0;
                v514[28] = 0;
                v514[32] = 0;
                v514[36] = 0;
                v514[40] = 0;
                v514[44] = 0;
                v514[48] = 0;
                v514[52] = 0;
                v514[56] = 0;
                v514[60] = 0;
                v514[64] = 0;
                v514[68] = 0;
                v514[72] = 0;
                v514[76] = 0;
                v514[80] = 0;
                v514[84] = 0;
                v514[88] = 0;
                v514[92] = 0;
                v515.i8[0] = 0;
                v515.i8[4] = 0;
                v515.i8[8] = 0;
                v515.i8[12] = 0;
                v516.i8[0] = 0;
                v516.i8[4] = 0;
                if (v510 != v511)
                {
                  v119 = 0;
                  do
                  {
                    v120 = *v118;
                    if (v120 <= 4 && (v121 = v118[1], v121 < 4))
                    {
                      v129 = (char *)&v513[2 * v120] + 8 * v121;
                      v130 = (unsigned int *)(v129 + 4);
                      v131 = v129[8];
                      v132 = v119;
                      if (v131)
                        v132 = v119 - *v130;
                      v133 = 1000 * *((_DWORD *)v118 + 1);
                      v134 = v132 + v133;
                      if (v134 <= 0xFFFFFFFFLL)
                      {
                        *v130 = v133;
                        *((_BYTE *)v130 + 4) = 1;
                        v119 = v134;
                      }
                    }
                    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                    {
                      a4 = a4 & 0xFFFFFFFF00000000 | 0x1BF2;
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v122, v123, v124, v125, v126, v127, v128, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
                    }
                    v118 += 8;
                  }
                  while (v118 != v117);
                  LODWORD(v513[0]) = v119;
                  a4 = (size_t)v494;
                  v96 = v486;
                }
                v323 = *(_OWORD *)&v514[64];
                v324 = v515;
                *(_OWORD *)(v481 + 128) = *(_OWORD *)&v514[80];
                *(int64x2_t *)(v481 + 144) = v324;
                *(_QWORD *)(v481 + 160) = v516.i64[0];
                v325 = *(_OWORD *)v514;
                v326 = *(_OWORD *)&v514[32];
                *(_OWORD *)(v481 + 64) = *(_OWORD *)&v514[16];
                *(_OWORD *)(v481 + 80) = v326;
                *(_OWORD *)(v481 + 96) = *(_OWORD *)&v514[48];
                *(_OWORD *)(v481 + 112) = v323;
                v327 = v513[1];
                *(_OWORD *)v481 = v513[0];
                *(_OWORD *)(v481 + 16) = v327;
                *(_OWORD *)(v481 + 32) = v513[2];
                *(_OWORD *)(v481 + 48) = v325;
                *(_BYTE *)(a4 + 312) = 1;
              }
              v95 = v482;
LABEL_423:
              *(_QWORD *)__p = &off_24C0B3E10;
              if (v512 && v510)
              {
                v511 = v510;
                operator delete(v510);
              }
            }
            else
            {
              *(_QWORD *)__p = &off_24C0B3E10;
              v8 = v491;
              v11 = v493;
              v95 = v482;
              v96 = v486;
            }
            if (*((_QWORD *)&v507 + 1))
            {
              v508 = (__int32 *)*((_QWORD *)&v507 + 1);
              operator delete(*((void **)&v507 + 1));
            }
            if (v96)
              webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock>>>::operator[](&v499, (unsigned int *)v496)[1] = 1;
            if ((v95 & 1) == 0)
              goto LABEL_612;
            goto LABEL_4;
          }
          while (1)
          {
            v137 = *(_DWORD *)&__p[8];
            v138 = a1[3];
            if ((v138 & 1) != 0)
              v139 = (__int32 *)a1[4];
            else
              v139 = (__int32 *)v9;
            v140 = v138 >> 1;
            v141 = &v139[v138 >> 1];
            v142 = wmemchr(v139, *v98, v138 >> 1);
            if (v142)
              v143 = v142;
            else
              v143 = v141;
            if (v140 == v143 - v139 || !*((_BYTE *)a1 + 256))
              goto LABEL_139;
            v144 = v98[1];
            if (v144)
            {
              v145 = v98[2];
              v146 = *a1;
              v147 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
              v148 = ((unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v146 + 24))(v146, v147) >> 16)- (v145+ v144);
              if (v148 <= 0x80000000)
              {
                v167 = (((1000000 * (unint64_t)v148) >> 15) & 1) + ((1000000 * (unint64_t)v148) >> 16);
                if (v167 <= 0x3E8)
                  v149 = 1000;
                else
                  v149 = v167;
                a4 = (size_t)v494;
                if (!*((_BYTE *)a1 + 272))
                  goto LABEL_174;
LABEL_152:
                a1[33] = v149;
                v150 = (char *)a1[42];
                v151 = (char *)a1[43];
                v152 = v151 - v150;
                if (v151 != v150)
                  goto LABEL_153;
LABEL_175:
                v154 = v151;
              }
              else
              {
                v149 = 1000;
                a4 = (size_t)v494;
                if (*((_BYTE *)a1 + 272))
                  goto LABEL_152;
LABEL_174:
                *((_BYTE *)a1 + 272) = 1;
                a1[33] = v149;
                v150 = (char *)a1[42];
                v151 = (char *)a1[43];
                v152 = v151 - v150;
                if (v151 == v150)
                  goto LABEL_175;
LABEL_153:
                v153 = 0xCCCCCCCCCCCCCCCDLL * (v152 >> 3);
                v154 = v150;
                do
                {
                  v155 = v153 >> 1;
                  v156 = &v154[40 * (v153 >> 1)];
                  v158 = *(_DWORD *)v156;
                  v157 = v156 + 40;
                  v153 += ~(v153 >> 1);
                  if (v158 < v137)
                    v154 = v157;
                  else
                    v153 = v155;
                }
                while (v153);
              }
              v168 = (unsigned __int128)((v154 - v150) * (__int128)0x6666666666666667) >> 64;
              v169 = (v168 >> 4) + ((unint64_t)v168 >> 63);
              v170 = &v150[40 * v169];
              if (v170 == v151)
              {
                memset(v513, 0, 32);
                v171 = a1[44];
                if ((unint64_t)v151 >= v171)
                  goto LABEL_189;
                if (!v150)
                  goto LABEL_666;
                *(_DWORD *)v151 = v137;
                v180 = &v150[40 * v169];
                *(_OWORD *)(v180 + 24) = 0uLL;
                *(_OWORD *)(v180 + 8) = 0uLL;
                a1[43] = v151 + 40;
                v170 = v151;
              }
              else if (*(_DWORD *)v170 > v137)
              {
                memset(v513, 0, 32);
                v171 = a1[44];
                if ((unint64_t)v151 < v171)
                {
                  v172 = v151 - 40;
                  v173 = v151;
                  v174 = v151 - 40;
                  if ((unint64_t)v151 >= 0x28)
                  {
                    do
                    {
                      v175 = *(_OWORD *)v174;
                      v176 = *((_OWORD *)v174 + 1);
                      *((_QWORD *)v173 + 4) = *((_QWORD *)v174 + 4);
                      *(_OWORD *)v173 = v175;
                      *((_OWORD *)v173 + 1) = v176;
                      v174 += 40;
                      v173 += 40;
                    }
                    while (v174 < v151);
                  }
                  a1[43] = v173;
                  if (v151 != v170 + 40)
                  {
                    v177 = 8 * ((v151 - (v170 + 40)) >> 3);
                    do
                    {
                      *(_DWORD *)v172 = *(_DWORD *)&v170[v177 - 40];
                      v178 = *(_OWORD *)&v170[v177 - 32];
                      *(_OWORD *)(v172 + 20) = *(_OWORD *)&v170[v177 - 20];
                      *(_OWORD *)(v172 + 8) = v178;
                      v172 -= 40;
                      v177 -= 40;
                    }
                    while (v177);
                  }
                  *(_DWORD *)v170 = v137;
                  v179 = &v150[40 * v169];
                  *((_QWORD *)v179 + 2) = 0;
                  *((_QWORD *)v179 + 3) = 0;
                  *((_QWORD *)v179 + 1) = 0;
                  *((_DWORD *)v179 + 8) = 0;
                  if (!v170[16])
                    goto LABEL_226;
                  goto LABEL_134;
                }
LABEL_189:
                v181 = 1 - 0x3333333333333333 * (v152 >> 3);
                if (v181 > 0x666666666666666)
                  goto LABEL_667;
                v182 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v171 - (_QWORD)v150) >> 3);
                if (2 * v182 > v181)
                  v181 = 2 * v182;
                if (v182 >= 0x333333333333333)
                  v183 = 0x666666666666666;
                else
                  v183 = v181;
                if (v183)
                {
                  if (v183 > 0x666666666666666)
                    goto LABEL_668;
                  v184 = (char *)operator new(40 * v183);
                  v185 = (unint64_t)&v184[40 * v169];
                  v186 = &v184[40 * v183];
                  if ((char *)v185 == v186)
                    goto LABEL_207;
                }
                else
                {
                  v184 = 0;
                  v185 = 40 * v169;
                  v186 = 0;
                  if (!v185)
                  {
LABEL_207:
                    v190 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v185 - (_QWORD)v184) >> 3);
                    if (v185 <= (unint64_t)v184)
                    {
                      v192 = 0x999999999999999ALL * ((uint64_t)(v185 - (_QWORD)v184) >> 3);
                      if ((char *)v185 == v184)
                        v192 = 1;
                      if (v192 > 0x666666666666666)
                        goto LABEL_668;
                      v193 = v192 >> 2;
                      v194 = 40 * v192;
                      v195 = (char *)operator new(40 * v192);
                      v185 = (unint64_t)&v195[40 * v193];
                      v186 = &v195[v194];
                      if (v184)
                        operator delete(v184);
                    }
                    else
                    {
                      if (v190 >= -1)
                        v191 = v190 + 1;
                      else
                        v191 = v190 + 2;
                      v186 = (char *)v185;
                      v185 -= 40 * (v191 >> 1);
                    }
                  }
                }
                if (!v185)
                  goto LABEL_666;
                *(_DWORD *)v185 = v137;
                v196 = v513[0];
                *(_OWORD *)(v185 + 24) = v513[1];
                *(_OWORD *)(v185 + 8) = v196;
                v197 = (char *)a1[42];
                v198 = v185;
                if (v197 != v170)
                {
                  v199 = v170;
                  v200 = v185;
                  do
                  {
                    v198 = v200 - 40;
                    v201 = *(_OWORD *)(v199 - 40);
                    v202 = *(_OWORD *)(v199 - 24);
                    *(_QWORD *)(v200 - 8) = *((_QWORD *)v199 - 1);
                    *(_OWORD *)(v200 - 24) = v202;
                    *(_OWORD *)(v200 - 40) = v201;
                    v199 -= 40;
                    v200 -= 40;
                  }
                  while (v199 != v197);
                }
                v203 = v185 + 40;
                for (j = (char *)a1[43]; v170 != j; v203 += 40)
                {
                  v205 = *(_OWORD *)v170;
                  v206 = *((_OWORD *)v170 + 1);
                  *(_QWORD *)(v203 + 32) = *((_QWORD *)v170 + 4);
                  *(_OWORD *)v203 = v205;
                  *(_OWORD *)(v203 + 16) = v206;
                  v170 += 40;
                }
                v207 = (void *)a1[42];
                a1[42] = v198;
                a1[43] = v203;
                a1[44] = v186;
                if (v207)
                  operator delete(v207);
                v170 = (char *)v185;
                a4 = (size_t)v494;
                if (!v170[16])
LABEL_226:
                  v170[16] = 1;
LABEL_134:
                *((_QWORD *)v170 + 1) = v149;
                v135 = *((_QWORD *)v170 + 3);
                v136 = v135 + v149;
                if (v135 == 0x8000000000000000)
                  v136 = 0x8000000000000000;
                if (v135 != 0x7FFFFFFFFFFFFFFFLL)
                  v135 = v136;
                *((_QWORD *)v170 + 3) = v135;
                ++*((_DWORD *)v170 + 8);
                v9 = (unsigned int *)(a1 + 4);
                goto LABEL_139;
              }
              if (!v170[16])
                goto LABEL_226;
              goto LABEL_134;
            }
            v159 = (char *)a1[42];
            v160 = (char *)a1[43];
            if (v160 == v159)
              break;
            v161 = 0xCCCCCCCCCCCCCCCDLL * ((v160 - v159) >> 3);
            v162 = (char *)a1[42];
            do
            {
              v163 = v161 >> 1;
              v164 = (unsigned int *)&v162[40 * (v161 >> 1)];
              v166 = *v164;
              v165 = (char *)(v164 + 10);
              v161 += ~(v161 >> 1);
              if (v166 < v137)
                v162 = v165;
              else
                v161 = v163;
            }
            while (v161);
            if (v160 == v162)
            {
LABEL_200:
              if (v160 == v162)
                v162 = (char *)a1[43];
              if (v162 != v160)
                goto LABEL_203;
LABEL_139:
              v98 += 3;
LABEL_140:
              if (v98 == v99)
                goto LABEL_120;
            }
            else
            {
              if (&v162[40 * (*(_DWORD *)v162 <= v137)] == v162)
                v162 = (char *)a1[43];
              if (v162 == v160)
                goto LABEL_139;
LABEL_203:
              v187 = &v159[8 * ((v162 - v159) >> 3)];
              v189 = v187[16];
              v188 = v187 + 16;
              if (!v189)
                goto LABEL_139;
              *v188 = 0;
              v98 += 3;
              if (v98 == v99)
                goto LABEL_120;
            }
          }
          v162 = (char *)a1[43];
          goto LABEL_200;
        }
        v9 = (unsigned int *)(a1 + 4);
        if ((uint64_t)(v403 & 0xFFFFFFFFFFFFFFF0) >= 1)
        {
          v419 = v404 + 2;
          if (v404 >= -1)
            v419 = v404 + 1;
          v417 -= 16 * (v419 >> 1);
          goto LABEL_587;
        }
        if ((unint64_t)v403 < 0x10)
          v429 = 1;
        else
          v429 = (v403 >> 3) & 0xFFFFFFFFFFFFFFFELL;
        if (!(v429 >> 60))
        {
          v430 = (char *)operator new(16 * v429);
          v417 = &v430[16 * (v429 >> 2)];
          v418 = &v430[16 * v429];
          if (v416)
            operator delete(v416);
          goto LABEL_587;
        }
LABEL_668:
        std::__throw_bad_array_new_length[abi:sn180100]();
      default:
        goto LABEL_3;
    }
  }
}

void webrtc::RTCPReceiver::TriggerCallbacksFromRtcpPacket(webrtc::RTCPReceiver *this, int *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (***v29)(_QWORD, _OWORD *);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  _OWORD v42[3];
  uint64_t v43;
  _OWORD v44[8];
  uint64_t v45;

  if ((*((_BYTE *)a2 + 1) & 1) != 0)
    webrtc::RTCPReceiver::NotifyTmmbrUpdated(this);
  if (!*((_BYTE *)this + 8))
  {
    v13 = *a2;
    if ((*a2 & 0x400) != 0)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 8))(*((_QWORD *)this + 2));
      if (*((_BYTE *)this + 8))
        goto LABEL_4;
      v13 = *a2;
    }
    if ((v13 & 0x40) != 0 && *((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
      (*(void (**)(_QWORD, int *))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), a2 + 2);
    }
  }
LABEL_4:
  if (!*((_QWORD *)this + 7))
    goto LABEL_23;
  v4 = *a2;
  if ((*a2 & 0xA0) == 0)
    goto LABEL_23;
  v5 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>();
  if ((v4 & 0x20) != 0)
  {
    if ((v5 & 1) == 0)
LABEL_18:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_18;
  }
  v21 = *((_QWORD *)this + 3);
  if (v21 <= 1)
    goto LABEL_58;
  v22 = (unsigned int *)((char *)this + 32);
  if ((v21 & 1) != 0)
    v22 = *(unsigned int **)v22;
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 7) + 16))(*((_QWORD *)this + 7), *v22);
LABEL_23:
  v23 = *((_QWORD *)this + 8);
  if (v23 && (*((_BYTE *)a2 + 1) & 0x20) != 0)
  {
    v24 = *((_QWORD *)this + 3);
    if (v24 > 1)
    {
      v25 = (_QWORD *)((char *)this + 32);
      if ((v24 & 1) != 0)
        v25 = (_QWORD *)*v25;
      if (*(_DWORD *)(*((_QWORD *)a2 + 58) + 12) == *(_DWORD *)v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
      goto LABEL_30;
    }
LABEL_58:
    __break(1u);
    return;
  }
LABEL_30:
  if (*((_QWORD *)this + 6))
  {
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    if ((*((_BYTE *)a2 + 2) & 1) != 0)
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6), v26, a2[18]);
    if (*((_QWORD *)a2 + 4) != *((_QWORD *)a2 + 5))
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v26);
    if (*((_BYTE *)a2 + 64))
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6), v26, *((_QWORD *)a2 + 7));
    if (*((_QWORD *)a2 + 10))
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v26);
    if (*((_BYTE *)a2 + 136))
      (*(void (**)(_QWORD, uint64_t, int *))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v26, a2 + 22);
  }
  if ((*(_BYTE *)a2 & 6) != 0)
  {
    v27 = *((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4);
    if (v27)
      v28 = *((_QWORD *)a2 + 4);
    else
      v28 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2), v28, 0x6DB6DB6DB6DB6DB7 * (v27 >> 3));
  }
  v29 = (void (***)(_QWORD, _OWORD *))*((_QWORD *)this + 9);
  if (v29 && *((_BYTE *)a2 + 456))
  {
    v30 = *((_OWORD *)a2 + 27);
    v44[6] = *((_OWORD *)a2 + 26);
    v44[7] = v30;
    v45 = *((_QWORD *)a2 + 56);
    v31 = *((_OWORD *)a2 + 23);
    v44[2] = *((_OWORD *)a2 + 22);
    v44[3] = v31;
    v32 = *((_OWORD *)a2 + 25);
    v44[4] = *((_OWORD *)a2 + 24);
    v44[5] = v32;
    v33 = *((_OWORD *)a2 + 21);
    v44[0] = *((_OWORD *)a2 + 20);
    v44[1] = v33;
    (**v29)(v29, v44);
  }
  v34 = *((_QWORD *)this + 10);
  if (v34 && *((_BYTE *)a2 + 312))
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v34 + 16))(v34, a2 + 36);
  if (!*((_BYTE *)this + 8))
  {
    if (*((_QWORD *)this + 54))
    {
      v36 = (__int128 *)*((_QWORD *)a2 + 4);
      v35 = (__int128 *)*((_QWORD *)a2 + 5);
      while (v36 != v35)
      {
        v37 = *((_QWORD *)this + 54);
        v39 = v36[1];
        v38 = v36[2];
        v40 = *((_QWORD *)v36 + 6);
        v41 = *v36;
        v36 = (__int128 *)((char *)v36 + 56);
        v43 = v40;
        v42[1] = v39;
        v42[2] = v38;
        v42[0] = v41;
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v37 + 16))(v37, v42);
      }
    }
  }
}

unint64_t webrtc::RTCPReceiver::OnPeriodicRttUpdate(webrtc::RTCPReceiver *this, Timestamp a2, int a3)
{
  pthread_mutex_t *v6;
  int64_t v7;
  BOOL v8;
  int8x8_t *v9;
  uint64_t v10;
  unint64_t v11;
  int8x8_t v12;
  int8x8_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64x2_t v19;
  const double *v20;
  int64x2_t v21;
  const double *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  if (a3)
  {
    v7 = *((_QWORD *)this + 51);
    v8 = (unint64_t)(v7 - 0x7FFFFFFFFFFFFFFFLL) >= 2 && v7 <= a2.var0;
    if (v8 || (v10 = *((_QWORD *)this + 39), v9 = (int8x8_t *)*((_QWORD *)this + 40), (int8x8_t *)v10 == v9))
    {
      LOBYTE(v14) = 0;
      v15 = 0;
    }
    else
    {
      v11 = (unint64_t)&v9[-4] - v10;
      v12 = (int8x8_t)0x8000000000000000;
      if (v11 >= 0x80)
      {
        v16 = (v11 >> 5) + 1;
        v17 = v16 & 3;
        if ((v16 & 3) == 0)
          v17 = 4;
        v18 = v16 - v17;
        v13 = (int8x8_t *)(v10 + 32 * v18);
        v19 = vdupq_n_s64(0x8000000000000000);
        v20 = (const double *)(v10 + 72);
        v21 = v19;
        do
        {
          v22 = v20 - 8;
          v23 = (unsigned __int128)vld4q_f64(v22);
          v24 = (unsigned __int128)vld4q_f64(v20);
          v19 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v23, v19), (int8x16_t)v23, (int8x16_t)v19);
          v21 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v24, v21), (int8x16_t)v24, (int8x16_t)v21);
          v20 += 16;
          v18 -= 4;
        }
        while (v18);
        v25 = vbslq_s8((int8x16_t)vcgtq_s64(v19, v21), (int8x16_t)v19, (int8x16_t)v21);
        v26 = vextq_s8(v25, v25, 8uLL).u64[0];
        v12 = vbsl_s8((int8x8_t)vcgtd_s64(v25.i64[0], v26), *(int8x8_t *)v25.i8, (int8x8_t)v26);
      }
      else
      {
        v13 = (int8x8_t *)*((_QWORD *)this + 39);
      }
      do
      {
        if (*(_QWORD *)&v13[1] > *(_QWORD *)&v12)
          v12 = v13[1];
        v13 += 4;
      }
      while (v13 != v9);
      if ((unint64_t)(*(_QWORD *)&v12 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        LOBYTE(v14) = 0;
      else
        LOBYTE(v14) = v12.i8[0];
      if ((unint64_t)(*(_QWORD *)&v12 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v15 = 0;
      else
        v15 = *(_QWORD *)&v12 & 0xFFFFFFFFFFFFFF00;
    }
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v28 = *((_QWORD *)this + 51);
    if ((unint64_t)(v28 - 0x7FFFFFFFFFFFFFFFLL) < 2 || 3 * *((_QWORD *)this + 11) + v28 >= v27)
    {
      v36 = *((_QWORD *)this + 52);
      if ((unint64_t)(v36 - 0x7FFFFFFFFFFFFFFFLL) < 2)
        goto LABEL_35;
      if (3 * *((_QWORD *)this + 11) + v36 >= v27)
        goto LABEL_35;
      *((_QWORD *)this + 52) = 0x7FFFFFFFFFFFFFFFLL;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_35;
    }
    else
    {
      *((_QWORD *)this + 51) = 0x7FFFFFFFFFFFFFFFLL;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      {
LABEL_35:
        pthread_mutex_unlock(v6);
        return v15 & 0xFFFFFFFFFFFFFF00 | v14;
      }
    }
    rtc::webrtc_logging_impl::Log("\r\t\t\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_receiver.cc");
    goto LABEL_35;
  }
  v14 = *((_QWORD *)this + 33);
  if (*((_BYTE *)this + 272))
    *((_BYTE *)this + 272) = 0;
  pthread_mutex_unlock(v6);
  v15 = v14 & 0xFFFFFFFFFFFFFF00;
  return v15 & 0xFFFFFFFFFFFFFF00 | v14;
}

uint64_t webrtc::RTCPReceiver::ConsumeReceivedXrReferenceTimeInfo@<X0>(webrtc::RTCPReceiver *this@<X0>, char **a2@<X8>)
{
  webrtc::RTCPReceiver *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *i;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  pthread_mutex_t *v42;
  webrtc::RTCPReceiver *v43;
  int v44;

  v2 = this;
  v42 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  if (*((_QWORD *)v2 + 28) >= 0x32uLL)
    v4 = 50;
  else
    v4 = *((_QWORD *)v2 + 28);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    v5 = (char *)operator new(12 * v4);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[12 * v4];
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)v2;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v2 + 16))(*(_QWORD *)v2);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7);
  if (v4)
  {
    v9 = 0;
    v10 = v5;
    v44 = v8 >> 16;
    v43 = v2;
    do
    {
      if (!*((_QWORD *)v2 + 28))
      {
LABEL_44:
        __break(1u);
LABEL_45:
        abort();
      }
      v11 = (_DWORD *)*((_QWORD *)v2 + 27);
      v12 = v11[5];
      v13 = v44 - v11[6];
      v14 = v11[4];
      v15 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v15)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v10) >> 2) + 1;
        if (v20 > 0x1555555555555555)
          goto LABEL_45;
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (_QWORD)v10) >> 2);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0xAAAAAAAAAAAAAAALL)
          v22 = 0x1555555555555555;
        else
          v22 = v20;
        if (!v22)
          goto LABEL_44;
        if (v22 > 0x1555555555555555)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v23 = 12 * v22;
        v24 = (char *)operator new(12 * v22);
        v25 = &v24[4 * ((v5 - v10) >> 2)];
        *(_DWORD *)v25 = v14;
        *((_DWORD *)v25 + 1) = v12;
        *((_DWORD *)v25 + 2) = v13;
        for (i = v25; v5 != v10; *((_DWORD *)i + 2) = v28)
        {
          v27 = *(_QWORD *)(v5 - 12);
          v5 -= 12;
          v28 = *((_DWORD *)v5 + 2);
          *(_QWORD *)(i - 12) = v27;
          i -= 12;
        }
        v5 = v25 + 12;
        *a2 = i;
        a2[1] = v25 + 12;
        a2[2] = &v24[v23];
        if (v10)
          operator delete(v10);
        v10 = i;
        v2 = v43;
        a2[1] = v5;
        v17 = (char *)*((_QWORD *)v43 + 29);
        v16 = (char *)*((_QWORD *)v43 + 30);
        v18 = v16 - v17;
        if (v16 == v17)
        {
LABEL_13:
          v19 = v16;
          goto LABEL_32;
        }
      }
      else
      {
        if (!v5)
          goto LABEL_44;
        *(_DWORD *)v5 = v14;
        *((_DWORD *)v5 + 1) = v12;
        *((_DWORD *)v5 + 2) = v13;
        v5 += 12;
        a2[1] = v5;
        v17 = (char *)*((_QWORD *)v2 + 29);
        v16 = (char *)*((_QWORD *)v2 + 30);
        v18 = v16 - v17;
        if (v16 == v17)
          goto LABEL_13;
      }
      v29 = v18 >> 4;
      v19 = v17;
      do
      {
        v30 = v29 >> 1;
        v31 = &v19[16 * (v29 >> 1)];
        v33 = *(_DWORD *)v31;
        v32 = v31 + 16;
        v29 += ~(v29 >> 1);
        if (v33 < v11[4])
          v19 = v32;
        else
          v29 = v30;
      }
      while (v29);
LABEL_32:
      v34 = v19;
      if (v16 != v19)
      {
        v34 = v19 + 16;
        if (v11[4] < *(_DWORD *)v19)
          v34 = v19;
      }
      v35 = (v19 - v17) >> 4;
      v36 = (v34 - v17) >> 4;
      if (v36 < v35)
        goto LABEL_44;
      if (v35 != v36)
      {
        if (v34 != v16)
        {
          v19 = &v17[16 * v35];
          v37 = v19 + 8;
          do
          {
            *((_DWORD *)v37 - 2) = *(_DWORD *)v34;
            *v37 = *((_QWORD *)v34 + 1);
            v37 += 2;
            v34 += 16;
            v19 += 16;
          }
          while (v34 != v16);
        }
        *((_QWORD *)v2 + 30) = v19;
      }
      v38 = *((_QWORD *)v2 + 28);
      if (!v38)
        goto LABEL_44;
      v39 = (uint64_t *)*((_QWORD *)v2 + 27);
      v40 = *v39;
      *(_QWORD *)(v40 + 8) = v39[1];
      *(_QWORD *)v39[1] = v40;
      *((_QWORD *)v2 + 28) = v38 - 1;
      operator delete(v39);
      ++v9;
    }
    while (v9 != v4);
  }
  return pthread_mutex_unlock(v42);
}

uint64_t webrtc::RTCPReceiver::GetLatestReportBlockData@<X0>(webrtc::RTCPReceiver *this@<X0>, char **a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  pthread_mutex_t *v28;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v28 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v4 = *((_QWORD *)this + 45);
  v5 = *((_QWORD *)this + 46);
  if (v4 != v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      while (1)
      {
        v8 = (__int128 *)(v4 + 8);
        v9 = (unint64_t)a2[2];
        if ((unint64_t)v6 >= v9)
          break;
        if (!v6)
          goto LABEL_24;
        v10 = *v8;
        v11 = *(_OWORD *)(v4 + 24);
        v12 = *(_OWORD *)(v4 + 40);
        *((_QWORD *)v6 + 6) = *(_QWORD *)(v4 + 56);
        *((_OWORD *)v6 + 1) = v11;
        *((_OWORD *)v6 + 2) = v12;
        *(_OWORD *)v6 = v10;
        v6 += 56;
        a2[1] = v6;
        v4 += 64;
        if (v4 == v5)
          return pthread_mutex_unlock(v28);
      }
      v13 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) + 1;
      if (v13 > 0x492492492492492)
        goto LABEL_25;
      v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (_QWORD)v7) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x249249249249249)
        v15 = 0x492492492492492;
      else
        v15 = v13;
      if (!v15)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        abort();
      }
      if (v15 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v16 = 56 * v15;
      v17 = (char *)operator new(56 * v15);
      v18 = &v17[8 * ((v6 - v7) >> 3)];
      v20 = *(_OWORD *)(v4 + 24);
      v19 = *(_OWORD *)(v4 + 40);
      v21 = *v8;
      *((_QWORD *)v18 + 6) = *(_QWORD *)(v4 + 56);
      *((_OWORD *)v18 + 1) = v20;
      *((_OWORD *)v18 + 2) = v19;
      *(_OWORD *)v18 = v21;
      if (v6 != v7)
        break;
      v26 = &v17[8 * ((v6 - v7) >> 3)];
      v6 = v18 + 56;
      *a2 = v18;
      a2[1] = v18 + 56;
      a2[2] = &v17[v16];
      if (v7)
        goto LABEL_22;
LABEL_3:
      v7 = v26;
      a2[1] = v6;
      v4 += 64;
      if (v4 == v5)
        return pthread_mutex_unlock(v28);
    }
    v22 = &v17[8 * ((v6 - v7) >> 3)];
    do
    {
      v23 = *(_OWORD *)(v6 - 56);
      v24 = *(_OWORD *)(v6 - 40);
      v25 = *(_OWORD *)(v6 - 24);
      v26 = v22 - 56;
      *((_QWORD *)v22 - 1) = *((_QWORD *)v6 - 1);
      *(_OWORD *)(v22 - 24) = v25;
      *(_OWORD *)(v22 - 40) = v24;
      *(_OWORD *)(v22 - 56) = v23;
      v6 -= 56;
      v22 -= 56;
    }
    while (v6 != v7);
    v6 = v18 + 56;
    *a2 = v26;
    a2[1] = v18 + 56;
    a2[2] = &v17[v16];
    if (!v7)
      goto LABEL_3;
LABEL_22:
    operator delete(v7);
    goto LABEL_3;
  }
  return pthread_mutex_unlock(v28);
}

char *webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::ParseCompoundPacket(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTCPReceiver::PacketInformation *)::RtcpReceivedBlock>>>::operator[](char **a1, unsigned int *a2)
{
  char *v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD *v63;
  char *v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;

  v5 = *a1;
  v4 = a1[1];
  v6 = *a2;
  v7 = v4 - *a1;
  if (v4 == *a1)
  {
    v9 = a1[1];
    v14 = v4 - v5;
    v15 = (v4 - v5) >> 3;
    v16 = &v5[(v4 - v5) & 0xFFFFFFFFFFFFFFF8];
    if (v16 != v4)
      goto LABEL_8;
  }
  else
  {
    v8 = v7 >> 3;
    v9 = *a1;
    do
    {
      v10 = v8 >> 1;
      v11 = &v9[8 * (v8 >> 1)];
      v13 = *(_DWORD *)v11;
      v12 = v11 + 8;
      v8 += ~(v8 >> 1);
      if (v13 < v6)
        v9 = v12;
      else
        v8 = v10;
    }
    while (v8);
    v14 = v9 - v5;
    v15 = (v9 - v5) >> 3;
    v16 = &v5[(v9 - v5) & 0xFFFFFFFFFFFFFFF8];
    if (v16 != v4)
    {
LABEL_8:
      if (v6 >= *(_DWORD *)v16)
        return v16 + 4;
      v17 = (unint64_t)a1[2];
      if ((unint64_t)v4 < v17)
      {
        v18 = v4 - (v16 + 8);
        v19 = v18 >> 3;
        v20 = v4 - 8;
        if ((unint64_t)v4 < 8)
        {
          v24 = v4;
        }
        else
        {
          v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + v18;
          v22 = (unint64_t)&v5[v21 + 8];
          if ((unint64_t)v4 > v22)
            v22 = (unint64_t)v4;
          v23 = v22 + ~(unint64_t)v5 - v21;
          if (v23 >= 0x58)
          {
            v24 = v4;
            if ((unint64_t)(v16 + 8 - &v5[v14 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
            {
              v61 = (v23 >> 3) + 1;
              v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
              v20 += v62;
              v24 = &v4[v62];
              v63 = v4 + 16;
              v64 = &v5[8 * v19 + 16 + 8 * v15];
              v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v66 = *(_OWORD *)v64;
                *(v63 - 1) = *((_OWORD *)v64 - 1);
                *v63 = v66;
                v63 += 2;
                v64 += 32;
                v65 -= 4;
              }
              while (v65);
              if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_65;
            }
          }
          else
          {
            v24 = v4;
          }
          do
          {
            v67 = *(_QWORD *)v20;
            v20 += 8;
            *(_QWORD *)v24 = v67;
            v24 += 8;
          }
          while (v20 < v4);
        }
LABEL_65:
        a1[1] = v24;
        if (v4 != v16 + 8)
        {
          v68 = v4 - 4;
          v69 = 8 * v19;
          do
          {
            *((_DWORD *)v68 - 1) = *(_DWORD *)&v16[v69 - 8];
            *(_WORD *)v68 = *(_WORD *)&v16[v69 - 4];
            v68 -= 8;
            v69 -= 8;
          }
          while (v69);
        }
        *(_DWORD *)v16 = v6;
        *(_WORD *)&v5[8 * v15 + 4] = 0;
        return v16 + 4;
      }
      goto LABEL_19;
    }
  }
  v17 = (unint64_t)a1[2];
  if ((unint64_t)v4 < v17)
  {
    if (v5)
    {
      *(_DWORD *)v4 = v6;
      *(_WORD *)&v5[8 * v15 + 4] = 0;
      a1[1] = v4 + 8;
      v16 = v4;
      return v16 + 4;
    }
    goto LABEL_70;
  }
LABEL_19:
  v25 = (v7 >> 3) + 1;
  if (v25 >> 61)
    goto LABEL_71;
  v26 = v17 - (_QWORD)v5;
  v27 = (uint64_t)(v17 - (_QWORD)v5) >> 2;
  if (v27 > v25)
    v25 = v27;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    v28 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v28 = v25;
  if (v28)
  {
    if (v28 >> 61)
      goto LABEL_72;
    v29 = v15;
    v30 = (char *)operator new(8 * v28);
    v15 = v29;
    v31 = &v30[8 * v29];
    if (v15 != v28)
      goto LABEL_34;
  }
  else
  {
    v30 = 0;
    v31 = (char *)(8 * v15);
    if (v15)
      goto LABEL_34;
  }
  if (v14 < 1)
  {
    v58 = v14 >> 2;
    if (v9 == v5)
      v58 = 1;
    if (!(v58 >> 61))
    {
      v59 = v15;
      v60 = 8 * v58;
      v31 = (char *)operator new(8 * v58);
      v33 = &v31[v60];
      if (v30)
      {
        operator delete(v30);
        v6 = *a2;
      }
      v15 = v59;
      goto LABEL_36;
    }
LABEL_72:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v32 = v15 + 2;
  if (v15 >= -1)
    v32 = v15 + 1;
  v31 -= 8 * (v32 >> 1);
LABEL_34:
  if (!v31)
  {
LABEL_70:
    __break(1u);
LABEL_71:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v33 = &v30[8 * v28];
LABEL_36:
  *(_DWORD *)v31 = v6;
  *((_WORD *)v31 + 2) = 0;
  v34 = v31 + 8;
  v35 = *a1;
  v36 = v31;
  if (*a1 != v16)
  {
    v37 = &v5[v14 & 0xFFFFFFFFFFFFFFF8];
    v38 = v37 - v35 - 8;
    v39 = v16;
    v36 = v31;
    if (v38 < 0x58)
      goto LABEL_75;
    v39 = v16;
    v36 = v31;
    if ((unint64_t)(v37 - v31) < 0x20)
      goto LABEL_75;
    v40 = (v38 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v39 = &v16[-v41];
    v36 = &v31[-v41];
    v42 = v31 - 16;
    v43 = &v5[8 * v15 - 16];
    v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v42 - 1) = *((_OWORD *)v43 - 1);
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 32;
      v44 -= 4;
    }
    while (v44);
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_75:
      do
      {
        v46 = *((_QWORD *)v39 - 1);
        v39 -= 8;
        *((_QWORD *)v36 - 1) = v46;
        v36 -= 8;
      }
      while (v39 != v35);
    }
  }
  v47 = a1[1];
  if (v47 != v16)
  {
    v48 = &v5[v14 & 0xFFFFFFFFFFFFFFF8];
    v49 = v47 - v48 - 8;
    if (v49 < 0x48)
      goto LABEL_76;
    if ((unint64_t)(v31 - v48 + 8) < 0x20)
      goto LABEL_76;
    v50 = (v49 >> 3) + 1;
    v51 = 8 * (v50 & 0x3FFFFFFFFFFFFFFCLL);
    v16 += v51;
    v34 += v51;
    v52 = v31 + 24;
    v53 = &v5[8 * v15 + 16];
    v54 = v50 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v55 = *(_OWORD *)v53;
      *(v52 - 1) = *((_OWORD *)v53 - 1);
      *v52 = v55;
      v52 += 2;
      v53 += 32;
      v54 -= 4;
    }
    while (v54);
    if (v50 != (v50 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_76:
      do
      {
        v56 = *(_QWORD *)v16;
        v16 += 8;
        *(_QWORD *)v34 = v56;
        v34 += 8;
      }
      while (v16 != v47);
    }
  }
  v57 = *a1;
  *a1 = v36;
  a1[1] = v34;
  a1[2] = v33;
  if (v57)
    operator delete(v57);
  v16 = v31;
  return v16 + 4;
}

void webrtc::RTCPReceiver::HandleReportBlock(_QWORD *a1, uint64_t a2, size_t a3, unsigned int a4)
{
  _QWORD *v8;
  __int32 v9;
  unint64_t v10;
  __int32 *v11;
  unint64_t v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int32 v18;
  char *v19;
  unsigned __int32 *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unsigned __int32 *v25;
  char *v26;
  unsigned __int32 v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int32 *v30;
  unint64_t v31;
  char *v32;
  unsigned __int32 *v33;
  unsigned __int32 *v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  _OWORD *v56;
  unsigned __int32 *v57;
  char *v58;
  unsigned __int32 *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unsigned __int32 *j;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unsigned int *v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  _OWORD *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  _OWORD *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  char *i;
  __int128 v118;
  __int128 v119;
  void *v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 *v124;
  unint64_t v125;
  char *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  char *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  size_t __sz;
  size_t __sza;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;

  v8 = a1 + 4;
  v9 = *(_DWORD *)a2;
  v10 = a1[3];
  if ((v10 & 1) != 0)
    v11 = (__int32 *)a1[4];
  else
    v11 = (__int32 *)(a1 + 4);
  v12 = v10 >> 1;
  v13 = &v11[v10 >> 1];
  v14 = wmemchr(v11, v9, v10 >> 1);
  if (v14)
    v15 = v14;
  else
    v15 = v13;
  if (v12 != v15 - v11)
  {
    v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    v17 = v16;
    a1[51] = v16;
    v18 = *(_DWORD *)a2;
    v19 = (char *)a1[45];
    v20 = (unsigned __int32 *)a1[46];
    v21 = (char *)v20 - v19;
    if (v20 == (unsigned __int32 *)v19)
    {
      v28 = (char *)v20 - v19;
      v29 = ((char *)v20 - v19) >> 6;
      v30 = (unsigned __int32 *)&v19[((char *)v20 - v19) & 0xFFFFFFFFFFFFFFC0];
      if (v30 != v20)
        goto LABEL_15;
    }
    else
    {
      v22 = v21 >> 6;
      v23 = (char *)a1[45];
      do
      {
        v24 = v22 >> 1;
        v25 = (unsigned __int32 *)&v23[64 * (v22 >> 1)];
        v27 = *v25;
        v26 = (char *)(v25 + 16);
        v22 += ~(v22 >> 1);
        if (v27 < v18)
          v23 = v26;
        else
          v22 = v24;
      }
      while (v22);
      v28 = v23 - v19;
      v29 = (v23 - v19) >> 6;
      v30 = (unsigned __int32 *)&v19[(v23 - v19) & 0xFFFFFFFFFFFFFFC0];
      if (v30 != v20)
      {
LABEL_15:
        if (v18 >= *v30)
          goto LABEL_61;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v31 = a1[47];
        if ((unint64_t)v20 < v31)
        {
          v32 = (char *)(v30 + 16);
          v33 = v20 - 16;
          if ((unint64_t)v20 < 0x40)
          {
            v35 = (_OWORD *)a1[46];
          }
          else
          {
            v34 = v20 - 16;
            v35 = (_OWORD *)a1[46];
            do
            {
              v36 = *(_OWORD *)v34;
              v37 = *((_OWORD *)v34 + 1);
              v38 = *((_OWORD *)v34 + 3);
              v35[2] = *((_OWORD *)v34 + 2);
              v35[3] = v38;
              *v35 = v36;
              v35[1] = v37;
              v35 += 4;
              v34 += 16;
            }
            while (v34 < v20);
          }
          a1[46] = v35;
          if (v20 != (unsigned __int32 *)v32)
          {
            v48 = ((char *)v20 - v32) >> 6 << 6;
            do
            {
              *v33 = *(unsigned __int32 *)((char *)v30 + v48 - 64);
              v49 = *(_OWORD *)((char *)v30 + v48 - 56);
              v50 = *(_OWORD *)((char *)v30 + v48 - 40);
              v51 = *(_OWORD *)((char *)v30 + v48 - 24);
              *((_QWORD *)v33 + 7) = *(_QWORD *)((char *)v30 + v48 - 8);
              *(_OWORD *)(v33 + 10) = v51;
              *(_OWORD *)(v33 + 6) = v50;
              *(_OWORD *)(v33 + 2) = v49;
              v33 -= 16;
              v48 -= 64;
            }
            while (v48);
          }
          *v30 = v18;
          v52 = &v19[64 * v29];
          *(_OWORD *)(v52 + 8) = 0u;
          *(_OWORD *)(v52 + 24) = 0u;
          *(_OWORD *)(v52 + 40) = 0u;
          *((_QWORD *)v52 + 7) = 0;
          goto LABEL_61;
        }
        goto LABEL_25;
      }
    }
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v31 = a1[47];
    if ((unint64_t)v20 < v31)
    {
      if (!v19)
        goto LABEL_155;
      *v20 = v18;
      v39 = &v19[64 * v29];
      *((_QWORD *)v39 + 7) = 0;
      *(_OWORD *)(v39 + 40) = 0uLL;
      *(_OWORD *)(v39 + 24) = 0uLL;
      *(_OWORD *)(v39 + 8) = 0uLL;
      a1[46] = v20 + 16;
      v30 = v20;
LABEL_61:
      if (*(_DWORD *)(a2 + 12) > v30[6])
        a1[52] = a1[51];
      v69 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, v17);
      v30[2] = a4;
      v30[3] = *(_DWORD *)a2;
      *((_BYTE *)v30 + 16) = *(_BYTE *)(a2 + 4);
      *(_QWORD *)(v30 + 5) = *(_QWORD *)(a2 + 8);
      v30[7] = *(_DWORD *)(a2 + 16);
      *((_QWORD *)v30 + 4) = 1000 * ((uint64_t)((double)v69 / 4294967.3 + 0.5) + 1000 * HIDWORD(v69))
                           - 2208988800000000;
      v70 = *(_DWORD *)(a2 + 20);
      if (!v70)
      {
LABEL_137:
        v124 = (__int128 *)(v30 + 2);
        v126 = *(char **)(a3 + 40);
        v125 = *(_QWORD *)(a3 + 48);
        if ((unint64_t)v126 < v125)
        {
          if (v126)
          {
            v127 = *v124;
            v128 = *(_OWORD *)(v30 + 6);
            v129 = *(_OWORD *)(v30 + 10);
            *((_QWORD *)v126 + 6) = *((_QWORD *)v30 + 7);
            *((_OWORD *)v126 + 1) = v128;
            *((_OWORD *)v126 + 2) = v129;
            *(_OWORD *)v126 = v127;
            v130 = v126 + 56;
LABEL_153:
            *(_QWORD *)(a3 + 40) = v130;
            return;
          }
          goto LABEL_155;
        }
        v131 = *(char **)(a3 + 32);
        v132 = 0x6DB6DB6DB6DB6DB7 * ((v126 - v131) >> 3) + 1;
        if (v132 > 0x492492492492492)
          goto LABEL_156;
        v133 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v125 - (_QWORD)v131) >> 3);
        if (2 * v133 > v132)
          v132 = 2 * v133;
        if (v133 >= 0x249249249249249)
          v134 = 0x492492492492492;
        else
          v134 = v132;
        if (v134)
        {
          if (v134 <= 0x492492492492492)
          {
            v135 = 56 * v134;
            v136 = (char *)operator new(56 * v134);
            v137 = &v136[v135];
            v138 = &v136[8 * ((v126 - v131) >> 3)];
            v140 = *(_OWORD *)(v30 + 6);
            v139 = *(_OWORD *)(v30 + 10);
            v141 = *v124;
            *((_QWORD *)v138 + 6) = *((_QWORD *)v30 + 7);
            *((_OWORD *)v138 + 1) = v140;
            *((_OWORD *)v138 + 2) = v139;
            *(_OWORD *)v138 = v141;
            v130 = v138 + 56;
            if (v126 != v131)
            {
              do
              {
                v142 = *(_OWORD *)(v126 - 56);
                v143 = *(_OWORD *)(v126 - 40);
                v144 = *(_OWORD *)(v126 - 24);
                *((_QWORD *)v138 - 1) = *((_QWORD *)v126 - 1);
                *(_OWORD *)(v138 - 24) = v144;
                *(_OWORD *)(v138 - 40) = v143;
                *(_OWORD *)(v138 - 56) = v142;
                v138 -= 56;
                v126 -= 56;
              }
              while (v126 != v131);
              v126 = v131;
            }
            *(_QWORD *)(a3 + 32) = v138;
            *(_QWORD *)(a3 + 40) = v130;
            *(_QWORD *)(a3 + 48) = v137;
            if (v126)
              operator delete(v126);
            goto LABEL_153;
          }
LABEL_157:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
LABEL_155:
        __break(1u);
LABEL_156:
        abort();
      }
      v71 = (v69 >> 16) - (v70 + *(_DWORD *)(a2 + 24));
      if (v71 <= 0x80000000)
      {
        v73 = (((1000000 * (unint64_t)v71) >> 15) & 1) + ((1000000 * (unint64_t)v71) >> 16);
        if (v73 <= 0x3E8)
          v72 = 1000;
        else
          v72 = v73;
      }
      else
      {
        v72 = 1000;
      }
      v74 = *((_QWORD *)v30 + 6);
      v75 = *((_QWORD *)v30 + 7);
      v76 = v74 + v72;
      if (v74 == 0x8000000000000000)
        v76 = 0x8000000000000000;
      if (v74 != 0x7FFFFFFFFFFFFFFFLL)
        v74 = v76;
      *((_QWORD *)v30 + 5) = v72;
      *((_QWORD *)v30 + 6) = v74;
      *((_QWORD *)v30 + 7) = v75 + 1;
      v77 = a1[3];
      if (v77 <= 1)
        goto LABEL_155;
      if ((v77 & 1) != 0)
        v8 = (_QWORD *)*v8;
      if (*(_DWORD *)a2 != *(_DWORD *)v8)
      {
LABEL_134:
        if (!*(_BYTE *)(a3 + 64))
          *(_BYTE *)(a3 + 64) = 1;
        *(_QWORD *)(a3 + 56) = v72;
        goto LABEL_137;
      }
      v78 = (char *)a1[39];
      v79 = (char *)a1[40];
      v80 = v79 - v78;
      __sza = a3;
      if (v79 == v78)
      {
        v87 = v79 - v78;
        v88 = (v79 - v78) >> 5;
        v89 = &v78[(v79 - v78) & 0xFFFFFFFFFFFFFFE0];
        if (v89 != v79)
        {
LABEL_84:
          if (*(_DWORD *)v89 <= a4)
          {
LABEL_129:
            v121 = *((_QWORD *)v89 + 2);
            v122 = *((_QWORD *)v89 + 3);
            v123 = v121 + v72;
            if (v121 == 0x8000000000000000)
              v123 = 0x8000000000000000;
            if (v121 != 0x7FFFFFFFFFFFFFFFLL)
              v121 = v123;
            *((_QWORD *)v89 + 1) = v72;
            *((_QWORD *)v89 + 2) = v121;
            *((_QWORD *)v89 + 3) = v122 + 1;
            a3 = __sza;
            goto LABEL_134;
          }
          v149 = 0uLL;
          v90 = a1[41];
          if ((unint64_t)v79 < v90)
          {
            v91 = v89 + 32;
            v92 = v79 - 32;
            if ((unint64_t)v79 < 0x20)
            {
              v94 = (_OWORD *)a1[40];
            }
            else
            {
              v93 = v79 - 32;
              v94 = (_OWORD *)a1[40];
              do
              {
                v95 = *(_OWORD *)v93;
                v96 = *((_OWORD *)v93 + 1);
                v93 += 32;
                *v94 = v95;
                v94[1] = v96;
                v94 += 2;
              }
              while (v93 < v79);
            }
            a1[40] = v94;
            if (v79 != v91)
            {
              v105 = 32 * ((v79 - v91) >> 5);
              do
              {
                *(_DWORD *)v92 = *(_DWORD *)&v89[v105 - 32];
                v106 = *(_OWORD *)&v89[v105 - 24];
                *((_QWORD *)v92 + 3) = *(_QWORD *)&v89[v105 - 8];
                *(_OWORD *)(v92 + 8) = v106;
                v92 -= 32;
                v105 -= 32;
              }
              while (v105);
            }
            *(_DWORD *)v89 = a4;
            v107 = &v78[32 * v88];
            *((_QWORD *)v107 + 2) = 0;
            *((_QWORD *)v107 + 3) = 0;
            *((_QWORD *)v107 + 1) = 0;
            goto LABEL_129;
          }
LABEL_94:
          v98 = (v80 >> 5) + 1;
          if (v98 >> 59)
            goto LABEL_156;
          v99 = v90 - (_QWORD)v78;
          if (v99 >> 4 > v98)
            v98 = v99 >> 4;
          if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
            v100 = 0x7FFFFFFFFFFFFFFLL;
          else
            v100 = v98;
          if (v100)
          {
            if (v100 >> 59)
              goto LABEL_157;
            v101 = (char *)operator new(32 * v100);
            v102 = (uint64_t)&v101[32 * v88];
            v103 = &v101[32 * v100];
            if (v88 != v100)
              goto LABEL_120;
          }
          else
          {
            v101 = 0;
            v102 = 32 * v88;
            v103 = 0;
            if (v88)
            {
LABEL_120:
              if (!v102)
                goto LABEL_155;
              *(_DWORD *)v102 = a4;
              *(_OWORD *)(v102 + 8) = v149;
              *(_QWORD *)(v102 + 24) = 0;
              v111 = (_OWORD *)(v102 + 32);
              v112 = (char *)a1[39];
              v113 = v102;
              if (v112 != v89)
              {
                v114 = v89;
                v115 = v102;
                do
                {
                  v113 = v115 - 32;
                  v116 = *((_OWORD *)v114 - 1);
                  *(_OWORD *)(v115 - 32) = *((_OWORD *)v114 - 2);
                  *(_OWORD *)(v115 - 16) = v116;
                  v114 -= 32;
                  v115 -= 32;
                }
                while (v114 != v112);
              }
              for (i = (char *)a1[40]; v89 != i; v111 += 2)
              {
                v118 = *(_OWORD *)v89;
                v119 = *((_OWORD *)v89 + 1);
                v89 += 32;
                *v111 = v118;
                v111[1] = v119;
              }
              v120 = (void *)a1[39];
              a1[39] = v113;
              a1[40] = v111;
              a1[41] = v103;
              if (v120)
                operator delete(v120);
              v89 = (char *)v102;
              goto LABEL_129;
            }
          }
          if ((uint64_t)(v87 & 0xFFFFFFFFFFFFFFE0) < 1)
          {
            if ((unint64_t)v87 < 0x20)
              v108 = 1;
            else
              v108 = (v87 >> 4) & 0xFFFFFFFFFFFFFFFELL;
            if (v108 >> 59)
              goto LABEL_157;
            v109 = (char *)operator new(32 * v108);
            v102 = (uint64_t)&v109[32 * (v108 >> 2)];
            v103 = &v109[32 * v108];
            if (v101)
            {
              v110 = &v109[32 * v108];
              operator delete(v101);
              v103 = v110;
            }
          }
          else
          {
            v104 = v88 + 2;
            if (v88 >= -1)
              v104 = v88 + 1;
            v102 -= 32 * (v104 >> 1);
          }
          goto LABEL_120;
        }
      }
      else
      {
        v81 = v80 >> 5;
        v82 = (char *)a1[39];
        do
        {
          v83 = v81 >> 1;
          v84 = (unsigned int *)&v82[32 * (v81 >> 1)];
          v86 = *v84;
          v85 = (char *)(v84 + 8);
          v81 += ~(v81 >> 1);
          if (v86 < a4)
            v82 = v85;
          else
            v81 = v83;
        }
        while (v81);
        v87 = v82 - v78;
        v88 = (v82 - v78) >> 5;
        v89 = &v78[(v82 - v78) & 0xFFFFFFFFFFFFFFE0];
        if (v89 != v79)
          goto LABEL_84;
      }
      v149 = 0uLL;
      v90 = a1[41];
      if ((unint64_t)v79 < v90)
      {
        if (!v78)
          goto LABEL_155;
        *(_DWORD *)v79 = a4;
        v97 = &v78[32 * v88];
        *((_QWORD *)v97 + 1) = 0;
        *((_QWORD *)v97 + 2) = 0;
        *((_QWORD *)v97 + 3) = 0;
        a1[40] = v79 + 32;
        v89 = v79;
        goto LABEL_129;
      }
      goto LABEL_94;
    }
LABEL_25:
    __sz = a3;
    v40 = (v21 >> 6) + 1;
    if (v40 >> 58)
      goto LABEL_156;
    v41 = v31 - (_QWORD)v19;
    if (v41 >> 5 > v40)
      v40 = v41 >> 5;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFC0)
      v42 = 0x3FFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    v145 = v16;
    if (v42)
    {
      if (v42 >> 58)
        goto LABEL_157;
      v43 = v29;
      v44 = (char *)operator new(v42 << 6);
      v29 = v43;
      v45 = &v44[64 * v43];
      v46 = &v44[64 * v42];
      if (v29 != v42)
        goto LABEL_51;
    }
    else
    {
      v44 = 0;
      v45 = (char *)(v29 << 6);
      v46 = 0;
      if (v29)
        goto LABEL_51;
    }
    a3 = __sz;
    if ((uint64_t)(v28 & 0xFFFFFFFFFFFFFFC0) >= 1)
    {
      v47 = v29 + 2;
      if (v29 >= -1)
        v47 = v29 + 1;
      v45 -= 64 * (v47 >> 1);
      goto LABEL_52;
    }
    if ((unint64_t)v28 < 0x40)
      v53 = 1;
    else
      v53 = (v28 >> 5) & 0xFFFFFFFFFFFFFFFELL;
    if (v53 >> 58)
      goto LABEL_157;
    v54 = (char *)operator new(v53 << 6);
    v45 = &v54[64 * (v53 >> 2)];
    v46 = &v54[64 * v53];
    if (v44)
    {
      v55 = &v54[64 * v53];
      operator delete(v44);
      v46 = v55;
    }
LABEL_51:
    a3 = __sz;
LABEL_52:
    if (!v45)
      goto LABEL_155;
    *(_DWORD *)v45 = v18;
    *((_QWORD *)v45 + 7) = 0;
    *(_OWORD *)(v45 + 40) = v151;
    *(_OWORD *)(v45 + 24) = v150;
    *(_OWORD *)(v45 + 8) = v148;
    v56 = v45 + 64;
    v57 = (unsigned __int32 *)a1[45];
    v58 = v45;
    if (v57 != v30)
    {
      v59 = v30;
      v60 = v45;
      do
      {
        v58 = v60 - 64;
        v61 = *((_OWORD *)v59 - 4);
        v62 = *((_OWORD *)v59 - 3);
        v63 = *((_OWORD *)v59 - 1);
        *((_OWORD *)v60 - 2) = *((_OWORD *)v59 - 2);
        *((_OWORD *)v60 - 1) = v63;
        *((_OWORD *)v60 - 4) = v61;
        *((_OWORD *)v60 - 3) = v62;
        v59 -= 16;
        v60 -= 64;
      }
      while (v59 != v57);
    }
    for (j = (unsigned __int32 *)a1[46]; v30 != j; v30 += 16)
    {
      v65 = *(_OWORD *)v30;
      v66 = *((_OWORD *)v30 + 1);
      v67 = *((_OWORD *)v30 + 3);
      v56[2] = *((_OWORD *)v30 + 2);
      v56[3] = v67;
      *v56 = v65;
      v56[1] = v66;
      v56 += 4;
    }
    v68 = (void *)a1[45];
    a1[45] = v58;
    a1[46] = v56;
    a1[47] = v46;
    if (v68)
      operator delete(v68);
    v30 = (unsigned __int32 *)v45;
    v17 = v145;
    goto LABEL_61;
  }
}

char *webrtc::flat_map<unsigned int,webrtc::RTCPReceiver::TmmbrInformation,std::less<void>,std::vector<std::pair<unsigned int,webrtc::RTCPReceiver::TmmbrInformation>>>::operator[](uint64_t *a1, unsigned int *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void **v33;
  char *v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  _DWORD *v45;
  void *v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  unint64_t v92;
  char *v93;
  __int128 v94;
  void *v95[2];
  __int128 v96;
  unsigned int v97;
  uint64_t v98;
  char v99;
  void *__p[2];
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (uint64_t)&v4[-*a1];
  if (v4 == (char *)*a1)
  {
    v8 = (char *)a1[1];
  }
  else
  {
    v7 = 0x8E38E38E38E38E39 * (v6 >> 3);
    v8 = (char *)*a1;
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[72 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 72;
      v7 += ~(v7 >> 1);
      if (v12 < *a2)
        v8 = v11;
      else
        v7 = v9;
    }
    while (v7);
  }
  v13 = 0x8E38E38E38E38E39 * ((v8 - v5) >> 3);
  if (v8 == v4)
  {
    v96 = 0u;
    v94 = 0u;
    *(_OWORD *)v95 = 0u;
    v14 = a1[2];
    if ((unint64_t)v4 < v14)
    {
      if (v5)
      {
        *(_DWORD *)v4 = *a2;
        v53 = &v5[8 * ((v8 - v5) >> 3)];
        v53[16] = 0;
        *((_QWORD *)v53 + 1) = 0;
        *((_QWORD *)v53 + 4) = 0;
        *((_QWORD *)v53 + 5) = 0;
        *((_QWORD *)v53 + 3) = 0;
        *((_QWORD *)v53 + 7) = 0;
        *((_QWORD *)v53 + 8) = 0;
        *((_QWORD *)v53 + 6) = v53 + 56;
        a1[1] = (uint64_t)(v4 + 72);
        v8 = v4;
        goto LABEL_81;
      }
LABEL_83:
      __break(1u);
LABEL_84:
      abort();
    }
LABEL_34:
    v54 = 0x8E38E38E38E38E39 * (v6 >> 3) + 1;
    if (v54 > 0x38E38E38E38E38ELL)
      goto LABEL_84;
    v55 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - (_QWORD)v5) >> 3);
    if (2 * v55 > v54)
      v54 = 2 * v55;
    if (v55 >= 0x1C71C71C71C71C7)
      v56 = 0x38E38E38E38E38ELL;
    else
      v56 = v54;
    if (v56)
    {
      if (v56 > 0x38E38E38E38E38ELL)
        goto LABEL_85;
      v57 = (char *)operator new(72 * v56);
      v58 = 0x8E38E38E38E38E39 * ((v8 - v5) >> 3);
      v59 = (uint64_t)&v57[8 * ((v8 - v5) >> 3)];
      if (v58 != v56)
        goto LABEL_49;
    }
    else
    {
      v57 = 0;
      v58 = 0x8E38E38E38E38E39 * ((v8 - v5) >> 3);
      v59 = 8 * ((v8 - v5) >> 3);
      if (v58)
        goto LABEL_49;
    }
    if (v8 - v5 >= 1)
    {
      v60 = v58 + 2;
      if (v58 >= -1)
        v60 = v58 + 1;
      v59 -= 72 * (v60 >> 1);
LABEL_49:
      if (v59)
      {
        v61 = &v57[72 * v56];
        goto LABEL_51;
      }
      goto LABEL_83;
    }
    v87 = 2 * v58;
    if (v8 == v5)
      v87 = 1;
    if (v87 <= 0x38E38E38E38E38ELL)
    {
      v88 = v87 >> 2;
      v89 = 72 * v87;
      v90 = (char *)operator new(72 * v87);
      v59 = (uint64_t)&v90[72 * v88];
      v61 = &v90[v89];
      if (v57)
        operator delete(v57);
LABEL_51:
      *(_DWORD *)v59 = *a2;
      *(_BYTE *)(v59 + 16) = BYTE8(v94);
      *(_QWORD *)(v59 + 8) = v94;
      *(_OWORD *)(v59 + 24) = *(_OWORD *)v95;
      *(_QWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = &v96;
      v62 = v96;
      *(_QWORD *)(v59 + 56) = v96;
      v63 = v59 + 56;
      v64 = *((_QWORD *)&v96 + 1);
      *(_QWORD *)(v59 + 64) = *((_QWORD *)&v96 + 1);
      if (v64)
      {
        *(_QWORD *)(v62 + 16) = v63;
        v96 = 0uLL;
        v65 = (char *)*a1;
        v66 = v59;
        if ((char *)*a1 == v8)
          goto LABEL_53;
      }
      else
      {
        *(_QWORD *)(v59 + 48) = v63;
        v65 = (char *)*a1;
        v66 = v59;
        if ((char *)*a1 == v8)
        {
LABEL_53:
          v67 = (char *)a1[1];
          if (v67 != v8)
          {
LABEL_54:
            v68 = 0;
            do
            {
              while (1)
              {
                v69 = v59 + v68;
                v70 = &v8[v68];
                *(_DWORD *)(v69 + 72) = *(_DWORD *)&v8[v68];
                v71 = *(_QWORD *)&v8[v68 + 8];
                *(_BYTE *)(v69 + 88) = v8[v68 + 16];
                *(_QWORD *)(v69 + 80) = v71;
                *(_QWORD *)(v69 + 104) = 0;
                *(_QWORD *)(v69 + 112) = 0;
                *(_QWORD *)(v69 + 96) = 0;
                *(_OWORD *)(v69 + 96) = *(_OWORD *)&v8[v68 + 24];
                *(_QWORD *)(v69 + 112) = *(_QWORD *)&v8[v68 + 40];
                *((_QWORD *)v70 + 3) = 0;
                *((_QWORD *)v70 + 4) = 0;
                *((_QWORD *)v70 + 5) = 0;
                *(_QWORD *)(v69 + 120) = *(_QWORD *)&v8[v68 + 48];
                v72 = &v8[v68 + 56];
                v73 = *(_QWORD *)v72;
                *(_QWORD *)(v59 + v68 + 128) = *(_QWORD *)v72;
                v74 = v59 + v68 + 128;
                v75 = *(_QWORD *)&v8[v68 + 64];
                *(_QWORD *)(v69 + 136) = v75;
                if (!v75)
                  break;
                *(_QWORD *)(v73 + 16) = v74;
                *((_QWORD *)v70 + 6) = v72;
                *(_QWORD *)v72 = 0;
                *(_QWORD *)&v8[v68 + 64] = 0;
                v68 += 72;
                if (&v8[v68] == v67)
                  goto LABEL_58;
              }
              *(_QWORD *)(v69 + 120) = v74;
              v68 += 72;
            }
            while (&v8[v68] != v67);
LABEL_58:
            v8 = (char *)a1[1];
            v76 = v59 + v68 + 72;
            goto LABEL_66;
          }
LABEL_65:
          v76 = v59 + 72;
LABEL_66:
          v85 = (char *)*a1;
          *a1 = v66;
          a1[1] = v76;
          a1[2] = (uint64_t)v61;
          while (v8 != v85)
          {
            std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)v8 - 2));
            v86 = (void *)*((_QWORD *)v8 - 6);
            if (v86)
            {
              *((_QWORD *)v8 - 5) = v86;
              operator delete(v86);
            }
            v8 -= 72;
          }
          if (v85)
            operator delete(v85);
          v8 = (char *)v59;
          goto LABEL_81;
        }
      }
      v77 = 0;
      do
      {
        while (1)
        {
          v78 = v59 + v77;
          v79 = &v8[v77];
          *(_DWORD *)(v78 - 72) = *(_DWORD *)&v8[v77 - 72];
          v80 = *(_QWORD *)&v8[v77 - 64];
          *(_BYTE *)(v78 - 56) = v8[v77 - 56];
          *(_QWORD *)(v78 - 64) = v80;
          *(_QWORD *)(v78 - 40) = 0;
          *(_QWORD *)(v78 - 32) = 0;
          *(_QWORD *)(v78 - 48) = 0;
          *(_OWORD *)(v78 - 48) = *(_OWORD *)&v8[v77 - 48];
          *(_QWORD *)(v78 - 32) = *(_QWORD *)&v8[v77 - 32];
          *((_QWORD *)v79 - 6) = 0;
          *((_QWORD *)v79 - 5) = 0;
          *((_QWORD *)v79 - 4) = 0;
          *(_QWORD *)(v78 - 24) = *(_QWORD *)&v8[v77 - 24];
          v81 = &v8[v77 - 16];
          v82 = *(_QWORD *)v81;
          *(_QWORD *)(v59 + v77 - 16) = *(_QWORD *)v81;
          v83 = v59 + v77 - 16;
          v84 = *(_QWORD *)&v8[v77 - 8];
          *(_QWORD *)(v78 - 8) = v84;
          if (!v84)
            break;
          *(_QWORD *)(v82 + 16) = v83;
          *((_QWORD *)v79 - 3) = v81;
          *(_QWORD *)v81 = 0;
          *(_QWORD *)&v8[v77 - 8] = 0;
          v77 -= 72;
          if (&v8[v77] == v65)
            goto LABEL_64;
        }
        *(_QWORD *)(v78 - 24) = v83;
        v77 -= 72;
      }
      while (&v8[v77] != v65);
LABEL_64:
      v66 = v59 + v77;
      v67 = (char *)a1[1];
      if (v67 != v8)
        goto LABEL_54;
      goto LABEL_65;
    }
LABEL_85:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (*a2 < *(_DWORD *)v8)
  {
    v96 = 0u;
    v94 = 0u;
    *(_OWORD *)v95 = 0u;
    v14 = a1[2];
    if ((unint64_t)v4 < v14)
    {
      v104 = 0;
      v105 = a1 + 2;
      v15 = *a2;
      v97 = *a2;
      v98 = 0;
      v99 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v102 = &v103;
      v103 = 0;
      v16 = v4 - 72;
      v17 = v4;
      v101 = 0;
      if ((unint64_t)v4 >= 0x48)
      {
        v18 = 0;
        v19 = &v5[8 * ((v4 - (v8 + 72)) >> 3) + 8 * ((v8 - v5) >> 3)];
        do
        {
          while (1)
          {
            v20 = &v4[v18];
            v21 = &v19[v18];
            *(_DWORD *)v20 = *(_DWORD *)&v19[v18];
            v22 = *(_QWORD *)&v19[v18 + 8];
            v20[16] = v19[v18 + 16];
            *((_QWORD *)v20 + 1) = v22;
            *((_QWORD *)v20 + 4) = 0;
            *((_QWORD *)v20 + 5) = 0;
            *((_QWORD *)v20 + 3) = 0;
            *(_OWORD *)(v20 + 24) = *(_OWORD *)&v19[v18 + 24];
            *((_QWORD *)v20 + 5) = *(_QWORD *)&v19[v18 + 40];
            *((_QWORD *)v21 + 3) = 0;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v20 + 6) = *(_QWORD *)&v19[v18 + 48];
            v23 = (uint64_t *)&v19[v18 + 56];
            v24 = *v23;
            *(_QWORD *)&v4[v18 + 56] = *v23;
            v25 = (uint64_t)&v4[v18 + 56];
            v26 = *(_QWORD *)&v19[v18 + 64];
            *((_QWORD *)v20 + 8) = v26;
            if (v26)
              break;
            *((_QWORD *)v20 + 6) = v25;
            v18 += 72;
            if (&v19[v18] >= v4)
              goto LABEL_17;
          }
          *(_QWORD *)(v24 + 16) = v25;
          *((_QWORD *)v21 + 6) = v23;
          *v23 = 0;
          *(_QWORD *)&v19[v18 + 64] = 0;
          v18 += 72;
        }
        while (&v19[v18] < v4);
LABEL_17:
        v17 = &v4[v18];
      }
      a1[1] = (uint64_t)v17;
      if (v4 != v8 + 72)
      {
        v27 = 0;
        v92 = 0x8E38E38E38E38E39 * ((v8 - v5) >> 3);
        v93 = v5;
        v28 = &v5[8 * ((v4 - (v8 + 72)) >> 3) + 8 * ((v8 - v5) >> 3)];
        v29 = -8 * ((v4 - (v8 + 72)) >> 3);
        do
        {
          while (1)
          {
            v30 = &v28[v27];
            v31 = &v4[v27];
            v33 = (void **)&v4[v27 - 48];
            v32 = *v33;
            *((_DWORD *)v33 - 6) = *(_DWORD *)&v28[v27 - 72];
            v34 = &v16[v27];
            v35 = *(void **)&v16[v27 - 64];
            *((_BYTE *)v33 - 8) = v16[v27 - 56];
            *(v33 - 2) = v35;
            if (v32)
            {
              *((_QWORD *)v31 - 5) = v32;
              operator delete(v32);
              *v33 = 0;
              *(_QWORD *)&v4[v27 - 40] = 0;
              *(_QWORD *)&v4[v27 - 32] = 0;
            }
            v36 = v30 - 48;
            *(_OWORD *)v33 = *((_OWORD *)v30 - 3);
            *((_QWORD *)v31 - 4) = *((_QWORD *)v34 - 4);
            *(_QWORD *)v36 = 0;
            *((_QWORD *)v36 + 1) = 0;
            *((_QWORD *)v36 + 2) = 0;
            v37 = v31 - 16;
            std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)v31 - 2));
            *((_QWORD *)v31 - 3) = *((_QWORD *)v34 - 3);
            v40 = *((_QWORD *)v30 - 2);
            v39 = v30 - 16;
            v38 = v40;
            *((_QWORD *)v31 - 2) = v40;
            v41 = *((_QWORD *)v39 + 1);
            *((_QWORD *)v31 - 1) = v41;
            if (v41)
              break;
            *((_QWORD *)v31 - 3) = v37;
            v27 -= 72;
            if (v29 == v27)
              goto LABEL_25;
          }
          *(_QWORD *)(v38 + 16) = v37;
          *((_QWORD *)v34 - 3) = v34 - 16;
          *(_QWORD *)v39 = 0;
          *((_QWORD *)v39 + 1) = 0;
          v27 -= 72;
        }
        while (v29 != v27);
LABEL_25:
        v15 = v97;
        v13 = v92;
        v5 = v93;
      }
      *(_DWORD *)v8 = v15;
      v42 = &v5[72 * v13];
      v43 = v98;
      v46 = (void *)*((_QWORD *)v42 + 3);
      v45 = v42 + 24;
      v44 = v46;
      *((_BYTE *)v45 - 8) = v99;
      *((_QWORD *)v45 - 2) = v43;
      if (v46)
      {
        *(_QWORD *)&v5[72 * v13 + 32] = v44;
        operator delete(v44);
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 2) = 0;
      }
      *(_OWORD *)v45 = *(_OWORD *)__p;
      v47 = &v5[72 * v13];
      *((_QWORD *)v47 + 5) = v101;
      __p[0] = 0;
      __p[1] = 0;
      v101 = 0;
      v48 = v47 + 56;
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)v47 + 7));
      *((_QWORD *)v47 + 6) = v102;
      v49 = v47 + 48;
      v50 = v103;
      *v48 = v103;
      v51 = v104;
      v49[2] = v104;
      if (v51)
      {
        v50[2] = v48;
        v102 = &v103;
        v103 = 0;
        v104 = 0;
        std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(0);
        v52 = __p[0];
        if (!__p[0])
          goto LABEL_81;
        goto LABEL_80;
      }
      *v49 = v48;
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v50);
      v52 = __p[0];
      if (__p[0])
      {
LABEL_80:
        __p[1] = v52;
        operator delete(v52);
      }
LABEL_81:
      std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy((_QWORD *)v96);
      return v8 + 8;
    }
    goto LABEL_34;
  }
  return v8 + 8;
}

uint64_t webrtc::RTCPReceiver::BoundingSet@<X0>(webrtc::RTCPReceiver *this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;
  unsigned int v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unsigned int *v13;
  char *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  int64_t v25;
  char *v26;
  char *v27;

  v6 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v7 = *((_DWORD *)this + 40);
  v8 = (char *)*((_QWORD *)this + 36);
  v9 = (char *)*((_QWORD *)this + 37);
  if (v9 == v8)
  {
    v11 = (char *)*((_QWORD *)this + 37);
  }
  else
  {
    v10 = 0x8E38E38E38E38E39 * ((v9 - v8) >> 3);
    v11 = (char *)*((_QWORD *)this + 36);
    do
    {
      v12 = v10 >> 1;
      v13 = (unsigned int *)&v11[72 * (v10 >> 1)];
      v15 = *v13;
      v14 = (char *)(v13 + 18);
      v10 += ~(v10 >> 1);
      if (v15 < v7)
        v11 = v14;
      else
        v10 = v12;
    }
    while (v10);
    if (v9 != v11)
    {
      if (&v11[72 * (*(_DWORD *)v11 <= v7)] == v11)
        v11 = (char *)*((_QWORD *)this + 37);
      if (v11 != v9)
        goto LABEL_11;
LABEL_30:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return pthread_mutex_unlock(v6);
    }
  }
  if (v9 == v11)
    v11 = (char *)*((_QWORD *)this + 37);
  if (v11 == v9)
    goto LABEL_30;
LABEL_11:
  v16 = *((_QWORD *)this + 3);
  if (v16 <= 1)
  {
    __break(1u);
    goto LABEL_33;
  }
  v17 = (uint64_t)&v8[8 * ((v11 - v8) >> 3) + 24];
  v18 = (_QWORD *)((char *)this + 32);
  if ((v16 & 1) != 0)
    v18 = (_QWORD *)*v18;
  v20 = *(char **)v17;
  v19 = *(char **)(v17 + 8);
  if (v20 == v19)
  {
    *a2 = 0;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    return pthread_mutex_unlock(v6);
  }
  v21 = *(_DWORD *)v18;
  v22 = v20 + 24;
  do
  {
    v23 = *((_DWORD *)v22 - 6);
    v24 = v23 == v21 || v22 == v19;
    v22 += 24;
  }
  while (!v24);
  *a2 = v23 == v21;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v25 = v19 - v20;
  if (v19 != v20)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v25 >> 3) < 0xAAAAAAAAAAAAAABLL)
    {
      v26 = (char *)operator new(v25);
      *a3 = v26;
      v27 = &v26[8 * (v25 >> 3)];
      a3[2] = v27;
      memcpy(v26, v20, v25 - 6);
      a3[1] = v27;
      return pthread_mutex_unlock(v6);
    }
LABEL_33:
    abort();
  }
  return pthread_mutex_unlock(v6);
}

void webrtc::RTCPReceiver::NotifyTmmbrUpdated(webrtc::RTCPReceiver *this)
{
  webrtc::RTCPReceiver *v1;
  pthread_mutex_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  uint64_t *v34;
  __n128 v35;
  __n128 BoundingSet;
  void *v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const double *v46;
  int8x16_t v47;
  int8x16_t v48;
  const double *v49;
  unsigned __int128 v50;
  unsigned __int128 v51;
  unint64_t v52;
  uint64_t v53;
  void (***v54)(_QWORD, void **, __n128);
  pthread_mutex_t *v55;
  webrtc::RTCPReceiver *v56;
  _QWORD *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *__p;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;

  v1 = this;
  v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v62 = 0;
  v63 = 0;
  __p = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 16))(*(_QWORD *)v1);
  v4 = (_QWORD *)*((_QWORD *)v1 + 36);
  v5 = (_QWORD *)*((_QWORD *)v1 + 37);
  if (v4 != v5)
  {
    v6 = v3;
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v55 = v2;
      v56 = v1;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v57 = v5;
      while (1)
      {
        v16 = (uint64_t *)v4[6];
        if (v16 != v4 + 7)
          break;
LABEL_15:
        v4 += 9;
        if (v4 == v57)
        {
          v62 = v9;
          v63 = v8;
          __p = v7;
          v2 = v55;
          v1 = v56;
          goto LABEL_57;
        }
      }
      while (1)
      {
        v18 = v16[8];
        if (v18 == 0x8000000000000000
          || v6 != 0x8000000000000000 && (v18 != 0x7FFFFFFFFFFFFFFFLL ? (v19 = v6 - v18 < 25000001) : (v19 = 1), !v19))
        {
          v20 = (uint64_t *)v16[1];
          v21 = v16;
          if (v20)
          {
            do
            {
              v22 = v20;
              v20 = (uint64_t *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v22 = (uint64_t *)v21[2];
              v15 = *v22 == (_QWORD)v21;
              v21 = v22;
            }
            while (!v15);
          }
          if ((uint64_t *)v4[6] == v16)
            v4[6] = v22;
          v17 = (uint64_t *)v4[7];
          --v4[8];
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v17, v16);
          operator delete(v16);
          goto LABEL_19;
        }
        v23 = (__int128 *)(v16 + 5);
        if (v9 >= v8)
          break;
        if (!v9)
          goto LABEL_79;
        v24 = *v23;
        *((_QWORD *)v9 + 2) = v16[7];
        *(_OWORD *)v9 = v24;
        v9 += 24;
        v25 = (uint64_t *)v16[1];
        if (!v25)
        {
          do
          {
LABEL_52:
            v34 = v16;
            v16 = (uint64_t *)v16[2];
          }
          while ((uint64_t *)*v16 != v34);
          v22 = v16;
          goto LABEL_19;
        }
        do
        {
LABEL_50:
          v22 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
LABEL_19:
        v16 = v22;
        if (v22 == v4 + 7)
          goto LABEL_15;
      }
      v26 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v7) >> 3) + 1;
      if (v26 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_80;
      if (0x5555555555555556 * ((v8 - v7) >> 3) > v26)
        v26 = 0x5555555555555556 * ((v8 - v7) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3) >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      if (!v26)
      {
LABEL_79:
        __break(1u);
LABEL_80:
        abort();
      }
      if (v26 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v27 = 24 * v26;
      v28 = (char *)operator new(24 * v26);
      v29 = v16[7];
      v30 = &v28[8 * ((v9 - v7) >> 3)];
      *(_OWORD *)v30 = *v23;
      *((_QWORD *)v30 + 2) = v29;
      if (v9 == v7)
      {
        v33 = &v28[8 * ((v9 - v7) >> 3)];
        v8 = &v28[v27];
        v9 = v30 + 24;
        if (v7)
LABEL_48:
          operator delete(v7);
      }
      else
      {
        v31 = &v28[8 * ((v9 - v7) >> 3)];
        do
        {
          v32 = *(_OWORD *)(v9 - 24);
          v33 = v31 - 24;
          *((_WORD *)v31 - 4) = *((_WORD *)v9 - 4);
          *(_OWORD *)(v31 - 24) = v32;
          v9 -= 24;
          v31 -= 24;
        }
        while (v9 != v7);
        v8 = &v28[v27];
        v9 = v30 + 24;
        if (v7)
          goto LABEL_48;
      }
      v7 = v33;
      v25 = (uint64_t *)v16[1];
      if (!v25)
        goto LABEL_52;
      goto LABEL_50;
    }
    do
    {
      v10 = (uint64_t *)v4[6];
      if (v10 != v4 + 7)
      {
        do
        {
          v12 = (uint64_t *)v10[1];
          v13 = v10;
          if (v12)
          {
            do
            {
              v14 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v14 = (uint64_t *)v13[2];
              v15 = *v14 == (_QWORD)v13;
              v13 = v14;
            }
            while (!v15);
          }
          if ((uint64_t *)v4[6] == v10)
            v4[6] = v14;
          v11 = (uint64_t *)v4[7];
          --v4[8];
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v11, v10);
          operator delete(v10);
          v10 = v14;
        }
        while (v14 != v4 + 7);
      }
      v4 += 9;
    }
    while (v4 != v5);
  }
LABEL_57:
  pthread_mutex_unlock(v2);
  BoundingSet = webrtc::TMMBRHelp::FindBoundingSet((uint64_t *)&__p, (uint64_t *)&v64, v35);
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  v37 = v64;
  v38 = v65;
  if (v64 == v65)
  {
    v38 = v64;
  }
  else
  {
    v39 = *((_QWORD *)v1 + 6);
    if (v39)
    {
      v40 = v65 - (_BYTE *)v64 - 24;
      if (v40 >= 0x60)
      {
        v43 = v40 / 0x18 + 1;
        v44 = v43 & 3;
        if ((v43 & 3) == 0)
          v44 = 4;
        v45 = v43 - v44;
        v42 = (char *)v64 + 24 * v45;
        v46 = (const double *)((char *)v64 + 56);
        v47.i64[0] = -1;
        v47.i64[1] = -1;
        v48.i64[0] = -1;
        v48.i64[1] = -1;
        do
        {
          v49 = v46 - 6;
          v50 = (unsigned __int128)vld3q_f64(v49);
          v51 = (unsigned __int128)vld3q_f64(v46);
          v47 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v47, (uint64x2_t)v50), (int8x16_t)v50, v47);
          v48 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v48, (uint64x2_t)v51), (int8x16_t)v51, v48);
          v46 += 12;
          v45 -= 4;
        }
        while (v45);
        BoundingSet = (__n128)vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v48, (uint64x2_t)v47), v47, v48);
        v52 = vextq_s8((int8x16_t)BoundingSet, (int8x16_t)BoundingSet, 8uLL).u64[0];
        BoundingSet.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v52, BoundingSet.n128_u64[0]), (int8x8_t)BoundingSet.n128_u64[0], (int8x8_t)v52);
        v41 = BoundingSet.n128_u64[0];
      }
      else
      {
        v41 = -1;
        v42 = (char *)v64;
      }
      do
      {
        if (*((_QWORD *)v42 + 1) < v41)
          v41 = *((_QWORD *)v42 + 1);
        v42 += 24;
      }
      while (v42 != v65);
      if (v41 <= 0x7FFFFFFFFFFFFFFELL)
      {
        v53 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)v1 + 16))(*(_QWORD *)v1, BoundingSet);
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v39 + 32))(v39, v53, v41);
        v37 = v64;
        v38 = v65;
      }
    }
  }
  v54 = (void (***)(_QWORD, void **, __n128))*((_QWORD *)v1 + 2);
  v58 = v37;
  v59 = v38;
  v60 = v66;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  (**v54)(v54, &v58, BoundingSet);
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  if (v64)
  {
    v65 = (char *)v64;
    operator delete(v64);
  }
}

void absl::inlined_vector_internal::Storage<unsigned int,3ul,std::allocator<unsigned int>>::EmplaceBackSlow<unsigned int const&>(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  int v19;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 61) & 3) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 8;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(4 * v6);
  v10 = v9;
  *(_DWORD *)&v9[4 * (v4 >> 1)] = a2;
  if (v4 >= 2)
  {
    v11 = 0;
    if (v4 < 0x10 || (unint64_t)&v9[-v5] < 0x20)
    {
      v12 = (int *)v5;
    }
    else
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFF8;
      v12 = (int *)(v5 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8));
      v13 = v9 + 16;
      v14 = (__int128 *)(v5 + 16);
      v15 = v8 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v8 == v11)
        goto LABEL_15;
    }
    v17 = v8 - v11;
    v18 = &v9[4 * v11];
    do
    {
      v19 = *v12++;
      *(_DWORD *)v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
}

uint64_t webrtc::RTCPSender::RTCPSender(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  char *v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t **v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t **v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  unsigned int *v31;
  uint64_t **v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int *v38;
  uint64_t **v39;
  _QWORD *v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int *v45;
  uint64_t **v46;
  _QWORD *v47;
  unsigned int v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t **v53;
  _QWORD *v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int *v59;
  uint64_t **v60;
  _QWORD *v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int *v66;
  uint64_t **v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int *v73;
  uint64_t **v74;
  _QWORD *v75;
  unsigned int v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int *v80;
  _QWORD *v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  pthread_mutexattr_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BC470;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 16);
  v5 = 5000000;
  if (!*(_BYTE *)a2)
    v5 = 1000000;
  if (*(_BYTE *)(a2 + 80))
    v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (v6 == a2 + 32)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 24))(*(_QWORD *)(a2 + 56));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = v6;
      *(_QWORD *)(a2 + 56) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  pthread_mutexattr_init(&v87);
  pthread_mutexattr_setpolicy_np(&v87, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 96), &v87);
  pthread_mutexattr_destroy(&v87);
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  v7 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 240) = v7;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 280) = &unk_24C0B6958;
  *(_DWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 368) = 1472;
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 436) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 444) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 468) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 476) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 484) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 492) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 500) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 508) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 516) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 524) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 532) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 540) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 556) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 564) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 572) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 580) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 588) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = v8;
  *(_QWORD *)(a1 + 406) = 0;
  *(_QWORD *)(a1 + 421) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_BYTE *)(a1 + 624) = -1;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  v9 = (uint64_t **)(a1 + 664);
  *(_QWORD *)(a1 + 632) = a1 + 640;
  v10 = (char *)operator new(0x38uLL);
  v11 = 2;
  *((_DWORD *)v10 + 8) = 2;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = a1 + 664;
  *(_QWORD *)(a1 + 664) = v10;
  *(_QWORD *)(a1 + 656) = v10;
  v10[24] = 1;
  *(_QWORD *)(a1 + 672) = 1;
  *((_QWORD *)v10 + 5) = webrtc::RTCPSender::BuildSR;
  *((_QWORD *)v10 + 6) = 0;
  while (v11 < 5)
  {
    if (v11 == 4)
    {
      v14 = v10;
      goto LABEL_22;
    }
    v12 = (unsigned int *)*((_QWORD *)v10 + 1);
    if (!v12)
    {
      v13 = (uint64_t **)(v10 + 8);
      goto LABEL_18;
    }
LABEL_12:
    v11 = v12[8];
    v10 = (char *)v12;
  }
  v12 = *(unsigned int **)v10;
  if (*(_QWORD *)v10)
    goto LABEL_12;
  v13 = (uint64_t **)v10;
LABEL_18:
  v14 = operator new(0x38uLL);
  v14[8] = 4;
  *((_QWORD *)v14 + 5) = 0;
  *((_QWORD *)v14 + 6) = 0;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v10;
  *v13 = (uint64_t *)v14;
  v15 = **(_QWORD **)(a1 + 656);
  v16 = (uint64_t *)v14;
  if (v15)
  {
    *(_QWORD *)(a1 + 656) = v15;
    v16 = *v13;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v16);
  ++*(_QWORD *)(a1 + 672);
LABEL_22:
  *((_QWORD *)v14 + 5) = webrtc::RTCPSender::BuildRR;
  *((_QWORD *)v14 + 6) = 0;
  v17 = *v9;
  v18 = (uint64_t **)(a1 + 664);
  v19 = (uint64_t **)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v19 = (uint64_t **)v17;
        v20 = *((_DWORD *)v17 + 8);
        if (v20 < 9)
          break;
        v17 = *v19;
        v18 = v19;
        if (!*v19)
          goto LABEL_29;
      }
      if (v20 == 8)
        break;
      v17 = v19[1];
      if (!v17)
      {
        v18 = v19 + 1;
        goto LABEL_29;
      }
    }
  }
  else
  {
LABEL_29:
    v21 = (uint64_t *)v19;
    v19 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v19 + 8) = 8;
    v19[5] = 0;
    v19[6] = 0;
    *v19 = 0;
    v19[1] = 0;
    v19[2] = v21;
    *v18 = (uint64_t *)v19;
    v22 = **(_QWORD **)(a1 + 656);
    v23 = (uint64_t *)v19;
    if (v22)
    {
      *(_QWORD *)(a1 + 656) = v22;
      v23 = *v18;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v23);
    ++*(_QWORD *)(a1 + 672);
  }
  v19[5] = (uint64_t *)webrtc::RTCPSender::BuildSDES;
  v19[6] = 0;
  v24 = (unsigned int *)*v9;
  v25 = (uint64_t **)(a1 + 664);
  v26 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v26 = v24;
        v27 = v24[8];
        if (v27 < 0x21)
          break;
        v24 = (unsigned int *)*v26;
        v25 = (uint64_t **)v26;
        if (!*v26)
          goto LABEL_39;
      }
      if (v27 == 32)
        break;
      v24 = (unsigned int *)v26[1];
      if (!v24)
      {
        v25 = (uint64_t **)(v26 + 1);
        goto LABEL_39;
      }
    }
  }
  else
  {
LABEL_39:
    v28 = v26;
    v26 = operator new(0x38uLL);
    *((_DWORD *)v26 + 8) = 32;
    v26[5] = 0;
    v26[6] = 0;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = v28;
    *v25 = v26;
    v29 = **(_QWORD **)(a1 + 656);
    v30 = v26;
    if (v29)
    {
      *(_QWORD *)(a1 + 656) = v29;
      v30 = *v25;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v30);
    ++*(_QWORD *)(a1 + 672);
  }
  v26[5] = webrtc::RTCPSender::BuildPLI;
  v26[6] = 0;
  v31 = (unsigned int *)*v9;
  v32 = (uint64_t **)(a1 + 664);
  v33 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v33 = v31;
        v34 = v31[8];
        if (v34 < 0x81)
          break;
        v31 = (unsigned int *)*v33;
        v32 = (uint64_t **)v33;
        if (!*v33)
          goto LABEL_49;
      }
      if (v34 == 128)
        break;
      v31 = (unsigned int *)v33[1];
      if (!v31)
      {
        v32 = (uint64_t **)(v33 + 1);
        goto LABEL_49;
      }
    }
  }
  else
  {
LABEL_49:
    v35 = v33;
    v33 = operator new(0x38uLL);
    *((_DWORD *)v33 + 8) = 128;
    v33[5] = 0;
    v33[6] = 0;
    *v33 = 0;
    v33[1] = 0;
    v33[2] = v35;
    *v32 = v33;
    v36 = **(_QWORD **)(a1 + 656);
    v37 = v33;
    if (v36)
    {
      *(_QWORD *)(a1 + 656) = v36;
      v37 = *v32;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v37);
    ++*(_QWORD *)(a1 + 672);
  }
  v33[5] = webrtc::RTCPSender::BuildFIR;
  v33[6] = 0;
  v38 = (unsigned int *)*v9;
  v39 = (uint64_t **)(a1 + 664);
  v40 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v40 = v38;
        v41 = v38[8];
        if (v41 <= 0x10000)
          break;
        v38 = (unsigned int *)*v40;
        v39 = (uint64_t **)v40;
        if (!*v40)
          goto LABEL_59;
      }
      if (v41 == 0x10000)
        break;
      v38 = (unsigned int *)v40[1];
      if (!v38)
      {
        v39 = (uint64_t **)(v40 + 1);
        goto LABEL_59;
      }
    }
  }
  else
  {
LABEL_59:
    v42 = v40;
    v40 = operator new(0x38uLL);
    *((_DWORD *)v40 + 8) = 0x10000;
    v40[5] = 0;
    v40[6] = 0;
    *v40 = 0;
    v40[1] = 0;
    v40[2] = v42;
    *v39 = v40;
    v43 = **(_QWORD **)(a1 + 656);
    v44 = v40;
    if (v43)
    {
      *(_QWORD *)(a1 + 656) = v43;
      v44 = *v39;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v44);
    ++*(_QWORD *)(a1 + 672);
  }
  v40[5] = webrtc::RTCPSender::BuildREMB;
  v40[6] = 0;
  v45 = (unsigned int *)*v9;
  v46 = (uint64_t **)(a1 + 664);
  v47 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v47 = v45;
        v48 = v45[8];
        if (v48 < 0x11)
          break;
        v45 = (unsigned int *)*v47;
        v46 = (uint64_t **)v47;
        if (!*v47)
          goto LABEL_69;
      }
      if (v48 == 16)
        break;
      v45 = (unsigned int *)v47[1];
      if (!v45)
      {
        v46 = (uint64_t **)(v47 + 1);
        goto LABEL_69;
      }
    }
  }
  else
  {
LABEL_69:
    v49 = v47;
    v47 = operator new(0x38uLL);
    *((_DWORD *)v47 + 8) = 16;
    v47[5] = 0;
    v47[6] = 0;
    *v47 = 0;
    v47[1] = 0;
    v47[2] = v49;
    *v46 = v47;
    v50 = **(_QWORD **)(a1 + 656);
    v51 = v47;
    if (v50)
    {
      *(_QWORD *)(a1 + 656) = v50;
      v51 = *v46;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v51);
    ++*(_QWORD *)(a1 + 672);
  }
  v47[5] = webrtc::RTCPSender::BuildBYE;
  v47[6] = 0;
  v52 = (unsigned int *)*v9;
  v53 = (uint64_t **)(a1 + 664);
  v54 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v54 = v52;
        v55 = v52[8];
        if (v55 <= 0x2000)
          break;
        v52 = (unsigned int *)*v54;
        v53 = (uint64_t **)v54;
        if (!*v54)
          goto LABEL_79;
      }
      if (v55 == 0x2000)
        break;
      v52 = (unsigned int *)v54[1];
      if (!v52)
      {
        v53 = (uint64_t **)(v54 + 1);
        goto LABEL_79;
      }
    }
  }
  else
  {
LABEL_79:
    v56 = v54;
    v54 = operator new(0x38uLL);
    *((_DWORD *)v54 + 8) = 0x2000;
    v54[5] = 0;
    v54[6] = 0;
    *v54 = 0;
    v54[1] = 0;
    v54[2] = v56;
    *v53 = v54;
    v57 = **(_QWORD **)(a1 + 656);
    v58 = v54;
    if (v57)
    {
      *(_QWORD *)(a1 + 656) = v57;
      v58 = *v53;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v58);
    ++*(_QWORD *)(a1 + 672);
  }
  v54[5] = webrtc::RTCPSender::BuildLossNotification;
  v54[6] = 0;
  v59 = (unsigned int *)*v9;
  v60 = (uint64_t **)(a1 + 664);
  v61 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v61 = v59;
        v62 = v59[8];
        if (v62 < 0x101)
          break;
        v59 = (unsigned int *)*v61;
        v60 = (uint64_t **)v61;
        if (!*v61)
          goto LABEL_89;
      }
      if (v62 == 256)
        break;
      v59 = (unsigned int *)v61[1];
      if (!v59)
      {
        v60 = (uint64_t **)(v61 + 1);
        goto LABEL_89;
      }
    }
  }
  else
  {
LABEL_89:
    v63 = v61;
    v61 = operator new(0x38uLL);
    *((_DWORD *)v61 + 8) = 256;
    v61[5] = 0;
    v61[6] = 0;
    *v61 = 0;
    v61[1] = 0;
    v61[2] = v63;
    *v60 = v61;
    v64 = **(_QWORD **)(a1 + 656);
    v65 = v61;
    if (v64)
    {
      *(_QWORD *)(a1 + 656) = v64;
      v65 = *v60;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v65);
    ++*(_QWORD *)(a1 + 672);
  }
  v61[5] = webrtc::RTCPSender::BuildTMMBR;
  v61[6] = 0;
  v66 = (unsigned int *)*v9;
  v67 = (uint64_t **)(a1 + 664);
  v68 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v68 = v66;
        v69 = v66[8];
        if (v69 < 0x201)
          break;
        v66 = (unsigned int *)*v68;
        v67 = (uint64_t **)v68;
        if (!*v68)
          goto LABEL_99;
      }
      if (v69 == 512)
        break;
      v66 = (unsigned int *)v68[1];
      if (!v66)
      {
        v67 = (uint64_t **)(v68 + 1);
        goto LABEL_99;
      }
    }
  }
  else
  {
LABEL_99:
    v70 = v68;
    v68 = operator new(0x38uLL);
    *((_DWORD *)v68 + 8) = 512;
    v68[5] = 0;
    v68[6] = 0;
    *v68 = 0;
    v68[1] = 0;
    v68[2] = v70;
    *v67 = v68;
    v71 = **(_QWORD **)(a1 + 656);
    v72 = v68;
    if (v71)
    {
      *(_QWORD *)(a1 + 656) = v71;
      v72 = *v67;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v72);
    ++*(_QWORD *)(a1 + 672);
  }
  v68[5] = webrtc::RTCPSender::BuildTMMBN;
  v68[6] = 0;
  v73 = (unsigned int *)*v9;
  v74 = (uint64_t **)(a1 + 664);
  v75 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v75 = v73;
        v76 = v73[8];
        if (v76 < 0x41)
          break;
        v73 = (unsigned int *)*v75;
        v74 = (uint64_t **)v75;
        if (!*v75)
          goto LABEL_109;
      }
      if (v76 == 64)
        break;
      v73 = (unsigned int *)v75[1];
      if (!v73)
      {
        v74 = (uint64_t **)(v75 + 1);
        goto LABEL_109;
      }
    }
  }
  else
  {
LABEL_109:
    v77 = v75;
    v75 = operator new(0x38uLL);
    *((_DWORD *)v75 + 8) = 64;
    v75[5] = 0;
    v75[6] = 0;
    *v75 = 0;
    v75[1] = 0;
    v75[2] = v77;
    *v74 = v75;
    v78 = **(_QWORD **)(a1 + 656);
    v79 = v75;
    if (v78)
    {
      *(_QWORD *)(a1 + 656) = v78;
      v79 = *v74;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v79);
    ++*(_QWORD *)(a1 + 672);
  }
  v75[5] = webrtc::RTCPSender::BuildNACK;
  v75[6] = 0;
  v80 = (unsigned int *)*v9;
  v81 = (_QWORD *)(a1 + 664);
  if (*v9)
  {
    while (1)
    {
      while (1)
      {
        v81 = v80;
        v82 = v80[8];
        if (v82 <= 0x2C0000)
          break;
        v80 = (unsigned int *)*v81;
        v9 = (uint64_t **)v81;
        if (!*v81)
          goto LABEL_119;
      }
      if (v82 == 2883584)
        break;
      v80 = (unsigned int *)v81[1];
      if (!v80)
      {
        v9 = (uint64_t **)(v81 + 1);
        goto LABEL_119;
      }
    }
  }
  else
  {
LABEL_119:
    v83 = v81;
    v81 = operator new(0x38uLL);
    *((_DWORD *)v81 + 8) = 2883584;
    v81[5] = 0;
    v81[6] = 0;
    *v81 = 0;
    v81[1] = 0;
    v81[2] = v83;
    *v9 = v81;
    v84 = **(_QWORD **)(a1 + 656);
    v85 = v81;
    if (v84)
    {
      *(_QWORD *)(a1 + 656) = v84;
      v85 = *v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 664), v85);
    ++*(_QWORD *)(a1 + 672);
  }
  v81[5] = webrtc::RTCPSender::BuildExtendedReports;
  v81[6] = 0;
  return a1;
}

void webrtc::RTCPSender::BuildSR(uint64_t a1, int **a2, uint64_t a3)
{
  char *v6;
  int v7;
  uint64_t **v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (**v41)(webrtc::rtcp::SenderReport *__hidden);
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  void *__p;
  void *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v6 = *(char **)(a1 + 608);
  v7 = *(char *)(a1 + 624);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = v6[28];
        if (v7 >= v10)
          break;
        v6 = *(char **)v9;
        v8 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_8;
      }
      if (v10 >= v7)
        break;
      v6 = (char *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v8 = (uint64_t **)(v9 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 608);
    v9 = (char *)(a1 + 608);
LABEL_8:
    v11 = v9;
    v9 = (char *)operator new(0x28uLL);
    v9[28] = v7;
    *((_DWORD *)v9 + 8) = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v8 = (uint64_t *)v9;
    v12 = **(_QWORD **)(a1 + 600);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *(_QWORD *)(a1 + 600) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 608), v13);
    ++*(_QWORD *)(a1 + 616);
  }
  v14 = *((_DWORD *)v9 + 8);
  if (v14 <= 0)
  {
    if (*(_BYTE *)(a1 + 8))
      v14 = 8;
    else
      v14 = 90;
  }
  if (*(_BYTE *)(a1 + 200))
  {
    v15 = *(_QWORD *)(a1 + 192);
    v16 = v15 / 0x3E8uLL;
    if (v15 % 0x3E8uLL > 0x1F3)
      LODWORD(v16) = v16 + 1;
    if (-v15 % 0x3E8uLL <= 0x1F4)
      v17 = 0;
    else
      v17 = -1;
    v18 = v17 - -v15 / 0x3E8uLL;
    if (v15 >= 0)
      v18 = v16;
    v19 = *(_DWORD *)(a1 + 188) + *(_DWORD *)(a1 + 184) + v14 * ((uint64_t)(a2[3] + 125) / 1000 - v18);
    v41 = &off_24C0C0C50;
    v48 = 0;
    v49 = 0;
    __p = 0;
    v42 = *(_DWORD *)(a1 + 12);
    v43 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
    v44 = v19;
    v20 = *a2;
    v45 = **a2;
    v46 = *((_QWORD *)v20 + 1);
    v21 = *(_QWORD *)(a1 + 240);
    if (v21)
    {
      (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(&v50, v21, 31);
      v22 = v50;
      v23 = v51;
      v24 = v52;
      if (v50 == v51)
      {
        v23 = v50;
      }
      else if (*((_QWORD *)v20 + 4))
      {
        v25 = *(_QWORD *)(a1 + 16);
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
        v27 = ((unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 24))(v25, v26) >> 16)
            - (*((_QWORD *)v20 + 4) >> 16);
        v28 = v20[6];
        v29 = v23 - v22 - 28;
        v30 = v22;
        if (v29 < 0x1C)
          goto LABEL_46;
        v31 = v29 / 0x1C + 1;
        v30 = &v22[28 * (v31 & 0x1FFFFFFFFFFFFFFELL)];
        v32 = v22 + 52;
        v33 = v31 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          *(v32 - 1) = v28;
          *v32 = v27;
          *(v32 - 8) = v28;
          *(v32 - 7) = v27;
          v32 += 14;
          v33 -= 2;
        }
        while (v33);
        if (v31 != (v31 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_46:
          do
          {
            *((_DWORD *)v30 + 5) = v28;
            *((_DWORD *)v30 + 6) = v27;
            v30 += 28;
          }
          while (v30 != v23);
        }
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v23 - v22) >> 2)) >= 0x20)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v34, v35, v36, v37, v38, v39, v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/sender_report.cc");
      if (v22)
        operator delete(v22);
    }
    else
    {
      __p = v22;
      v48 = v23;
      v49 = v24;
    }
    webrtc::rtcp::SenderReport::Create((unsigned int *)&v41, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
    v41 = &off_24C0C0C50;
    if (__p)
    {
      v48 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __break(1u);
  }
}

void webrtc::RTCPSender::BuildRR(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(webrtc::rtcp::ReceiverReport *__hidden);
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v26 = &off_24C0BB310;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  v27 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)(a1 + 240);
  if (v5)
  {
    v6 = *a2;
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(&v31, v5, 31);
    v7 = v31;
    v8 = v32;
    v9 = v33;
    if (v31 == v32)
    {
      v8 = v31;
    }
    else if (*(_QWORD *)(v6 + 32))
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v12 = ((unint64_t)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 24))(v10, v11) >> 16)
          - (*(_QWORD *)(v6 + 32) >> 16);
      v13 = *(_DWORD *)(v6 + 24);
      v14 = v8 - v7 - 28;
      v15 = v7;
      if (v14 < 0x1C)
        goto LABEL_27;
      v16 = v14 / 0x1C + 1;
      v15 = &v7[28 * (v16 & 0x1FFFFFFFFFFFFFFELL)];
      v17 = v7 + 52;
      v18 = v16 & 0x1FFFFFFFFFFFFFFELL;
      do
      {
        *(v17 - 1) = v13;
        *v17 = v12;
        *(v17 - 8) = v13;
        *(v17 - 7) = v12;
        v17 += 14;
        v18 -= 2;
      }
      while (v18);
      if (v16 != (v16 & 0x1FFFFFFFFFFFFFFELL))
      {
LABEL_27:
        do
        {
          *((_DWORD *)v15 + 5) = v13;
          *((_DWORD *)v15 + 6) = v12;
          v15 += 28;
        }
        while (v15 != v8);
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 2)) < 0x20)
  {
    v28 = v7;
    v29 = v8;
    v30 = v9;
    if (*(_DWORD *)(a1 + 32) == 1)
      goto LABEL_22;
LABEL_21:
    if (v7 == v8)
      goto LABEL_23;
    goto LABEL_22;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/receiver_report.cc");
  if (v7)
  {
    operator delete(v7);
    v8 = 0;
    v7 = 0;
    if (*(_DWORD *)(a1 + 32) == 1)
      goto LABEL_22;
    goto LABEL_21;
  }
  v8 = 0;
  if (*(_DWORD *)(a1 + 32) != 1)
    goto LABEL_21;
LABEL_22:
  webrtc::rtcp::ReceiverReport::Create((unsigned int *)&v26, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v8 = v28;
LABEL_23:
  v26 = &off_24C0BB310;
  if (v8)
  {
    v29 = v8;
    operator delete(v8);
  }
}

void webrtc::RTCPSender::BuildSDES(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string::value_type **v9;
  size_t v10;
  void **v11;
  void **v12;
  void *v13;
  std::string *v14;
  void (**v15)(webrtc::rtcp::Sdes *__hidden);
  int v16;
  void *__p;
  void **v18;
  uint64_t v19;
  uint64_t v20;

  v9 = (std::string::value_type **)(a1 + 216);
  if ((*(char *)(a1 + 239) & 0x80000000) == 0)
  {
    v10 = *(unsigned __int8 *)(a1 + 239);
    v16 = 0;
    v15 = off_24C0C01D0;
    __p = 0;
    v18 = 0;
    v19 = 0;
    v20 = 4;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 224);
  if (v10 >= 0x100)
  {
LABEL_16:
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc", 400, "length_cname < 256", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v10);
    webrtc::RTCPSender::BuildPLI(v14);
    return;
  }
  v16 = 0;
  v15 = off_24C0C01D0;
  __p = 0;
  v18 = 0;
  v19 = 0;
  v20 = 4;
  v9 = (std::string::value_type **)*v9;
  if (v10 && !v9)
  {
    __break(1u);
    goto LABEL_16;
  }
LABEL_6:
  webrtc::rtcp::Sdes::AddCName(&v15, *(_DWORD *)(a1 + 12), v9, v10);
  ((void (*)(const void ***, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))v15[3])((const void ***)&v15, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v15 = off_24C0C01D0;
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v18;
    v13 = __p;
    if (v18 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v18 = v11;
    operator delete(v13);
  }
}

uint64_t webrtc::RTCPSender::BuildPLI(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  void *v5;
  int v6;
  int v7;

  v5 = &unk_24C0BA920;
  v3 = a1[52];
  v6 = a1[3];
  v7 = v3;
  ++a1[100];
  return webrtc::rtcp::Pli::Create((unsigned int *)&v5, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
}

void webrtc::RTCPSender::BuildFIR(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  void (**v6)(webrtc::rtcp::Fir *__hidden);
  int v7;
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;

  v5 = *(_BYTE *)(a1 + 272) + 1;
  *(_BYTE *)(a1 + 272) = v5;
  v6 = &off_24C0B4290;
  v10 = 0;
  v11 = 0;
  __p = 0;
  v7 = *(_DWORD *)(a1 + 12);
  v8 = 0;
  webrtc::rtcp::Fir::AddRequestTo((webrtc::rtcp::Fir *)&v6, *(_DWORD *)(a1 + 208), v5);
  ++*(_DWORD *)(a1 + 396);
  ((void (*)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))v6[3])((uint64_t)&v6, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v6 = &off_24C0B4290;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void webrtc::RTCPSender::BuildREMB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(webrtc::rtcp::Remb *__hidden);
  int v17;
  int v18;
  uint64_t v19;
  void *__p;
  void *v21;
  char *v22;

  v16 = &off_24C0BB3F0;
  v17 = *(_DWORD *)(a1 + 12);
  v18 = 0;
  v4 = *(_BYTE **)(a1 + 312);
  v19 = *(_QWORD *)(a1 + 304);
  __p = 0;
  v21 = 0;
  v22 = 0;
  v5 = *(_BYTE **)(a1 + 320);
  v6 = v5 - v4;
  if (v5 == v4)
  {
    v7 = 0;
    v8 = 0;
LABEL_4:
    __p = v7;
    v21 = v8;
    v22 = v8;
    goto LABEL_10;
  }
  if (v6 < 0)
    abort();
  v7 = (char *)operator new(v5 - v4);
  v8 = &v7[4 * (v6 >> 2)];
  memcpy(v7, v4, v6);
  if ((unint64_t)(4 * (v6 >> 2)) < 0x400)
    goto LABEL_4;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remb.cc");
  if (v7)
    operator delete(v7);
LABEL_10:
  webrtc::rtcp::Remb::Create((uint64_t)&v16, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v16 = &off_24C0BB3F0;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void webrtc::RTCPSender::BuildBYE(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(webrtc::rtcp::Bye *__hidden);
  int v17;
  void *v18[2];
  void *__p[2];
  __int128 v20;

  v16 = off_24C0B0540;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v17 = *(_DWORD *)(a1 + 12);
  v5 = *(_BYTE **)(a1 + 248);
  v4 = *(_BYTE **)(a1 + 256);
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v7 = 0;
    v8 = 0;
LABEL_4:
    v18[0] = v7;
    v18[1] = v8;
    __p[0] = v8;
    goto LABEL_10;
  }
  if (v6 < 0)
    abort();
  v7 = (char *)operator new(v4 - v5);
  v8 = &v7[4 * (v6 >> 2)];
  memcpy(v7, v5, v6);
  if ((unint64_t)(4 * (v6 >> 2)) < 0x7C)
    goto LABEL_4;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/bye.cc");
  if (v7)
    operator delete(v7);
LABEL_10:
  webrtc::rtcp::Bye::Create((uint64_t)&v16, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v16 = off_24C0B0540;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[1]);
  if (v18[0])
  {
    v18[1] = v18[0];
    operator delete(v18[0]);
  }
}

uint64_t webrtc::RTCPSender::BuildLossNotification(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a1 + 208);
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 280) + 24))(a1 + 280, a3 + 4, a3 + 3, a3[2], *a3, a3[1]);
}

void webrtc::RTCPSender::BuildTMMBR(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  webrtc::RTCPReceiver *v4;
  __n128 v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unsigned int v21;
  void (**v22)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t));
  int v23;
  _BOOL4 v24;
  BOOL v25;
  __int128 v26;
  __int16 v27;
  void (**v28)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t));
  void (**v29)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t));
  void *__p;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char *v35;
  unsigned int *v36;
  unsigned int *v37;
  unint64_t v38;
  BOOL v39;

  v4 = *(webrtc::RTCPReceiver **)(*(_QWORD *)a2 + 64);
  if (v4)
  {
    v39 = 0;
    webrtc::RTCPReceiver::BoundingSet(v4, &v39, &v36);
    v7 = (char *)v36;
    v8 = (char *)v37;
    if (v36 == v37)
      goto LABEL_9;
    v9 = a1[90];
    v10 = v36;
    do
    {
      if (*((_QWORD *)v10 + 1) == v9 && a1[91] == *((unsigned __int16 *)v10 + 8))
        goto LABEL_12;
      v10 += 6;
    }
    while (v10 != v37);
    if (v39)
    {
LABEL_9:
      v11 = a1[90];
      if (!(_DWORD)v11)
      {
LABEL_12:
        if (v7)
        {
          v37 = (unsigned int *)v7;
          operator delete(v7);
        }
        return;
      }
LABEL_10:
      v28 = (void (**)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))&off_24C0C2650;
      v31 = 0;
      v32 = 0;
      __p = 0;
      v29 = (void (**)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))a1[3];
      LODWORD(v26) = a1[52];
      *((_QWORD *)&v26 + 1) = v11;
      v27 = a1[91];
      webrtc::rtcp::Tmmbn::AddTmmbr(&v28, &v26);
      v28[3]((uint64_t)&v28, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
      v28 = (void (**)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))&off_24C0C2650;
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
      goto LABEL_12;
    }
    v12 = a1[3];
    v13 = a1[91];
    v14 = (char *)v38;
    if ((unint64_t)v37 >= v38)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3) + 1;
      if (v16 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_48;
      if (0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3) > v16)
        v16 = 0x5555555555555556 * ((uint64_t)(v38 - (_QWORD)v36) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (_QWORD)v36) >> 3) >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      if (v17)
      {
        if (v17 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v18 = (char *)operator new(24 * v17);
        v19 = &v18[8 * ((v8 - v7) >> 3)];
        *(_DWORD *)v19 = v12;
        *((_QWORD *)v19 + 1) = v9;
        *((_WORD *)v19 + 8) = v13;
        v20 = v19;
        do
        {
          v6 = *(__n128 *)(v8 - 24);
          *((_WORD *)v20 - 4) = *((_WORD *)v8 - 4);
          *(__n128 *)(v20 - 24) = v6;
          v20 -= 24;
          v8 -= 24;
        }
        while (v8 != v7);
        v14 = &v18[24 * v17];
        v15 = v19 + 24;
        if (v7)
          operator delete(v7);
        v7 = v20;
LABEL_31:
        v33 = v7;
        v34 = v15;
        v35 = v14;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        webrtc::TMMBRHelp::FindBoundingSet((uint64_t *)&v33, (uint64_t *)&v28, v6);
        if (v33)
        {
          v34 = v33;
          operator delete(v33);
        }
        if (v28 == v29)
        {
          v24 = 0;
          v39 = 0;
          if (v28)
          {
LABEL_41:
            v29 = v28;
            operator delete(v28);
          }
        }
        else
        {
          v21 = a1[3];
          v22 = v28 + 3;
          do
          {
            v23 = *((_DWORD *)v22 - 6);
            v24 = v23 == v21;
            v25 = v23 == v21 || v22 == v29;
            v22 += 3;
          }
          while (!v25);
          v39 = v23 == v21;
          if (v28)
            goto LABEL_41;
        }
        if (!v24)
          return;
        v7 = 0;
        v11 = a1[90];
        if (!(_DWORD)v11)
          goto LABEL_12;
        goto LABEL_10;
      }
    }
    else if (v37)
    {
      *v37 = v12;
      *((_QWORD *)v8 + 1) = v9;
      v15 = v8 + 24;
      *((_WORD *)v8 + 8) = v13;
      goto LABEL_31;
    }
    __break(1u);
LABEL_48:
    abort();
  }
}

void webrtc::RTCPSender::BuildTMMBN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void (**v6)(webrtc::rtcp::Tmmbn *__hidden);
  void (**v7)(webrtc::rtcp::Tmmbn *__hidden);
  int v8;
  int v9;
  void *__p;
  void *v11;
  uint64_t v12;

  v7 = &off_24C0C2620;
  v11 = 0;
  v12 = 0;
  __p = 0;
  v8 = *(_DWORD *)(a1 + 12);
  v9 = 0;
  v4 = *(_QWORD *)(a1 + 336);
  v5 = *(_QWORD *)(a1 + 344);
  if (v4 == v5)
  {
    v6 = &off_24C0C2620;
  }
  else
  {
    do
    {
      if (*(_QWORD *)(v4 + 8))
        webrtc::rtcp::Tmmbn::AddTmmbr(&v7, (__int128 *)v4);
      v4 += 24;
    }
    while (v4 != v5);
    v6 = v7;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))v6[3])((uint64_t)&v7, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v7 = &off_24C0C2620;
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void webrtc::RTCPSender::BuildNACK(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  char *v10;
  char *v11;
  int v12;
  unsigned __int16 *v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v21;
  void (**v22)(webrtc::rtcp::Nack *__hidden);
  int v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *__p;
  void *v29;
  char *v30;

  v22 = &off_24C0B7570;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v6 = *(_DWORD *)(a1 + 208);
  v23 = *(_DWORD *)(a1 + 12);
  v24 = v6;
  v7 = *(int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    if ((v7 & 0x80000000) != 0)
      abort();
    v8 = *(const void **)(a2 + 16);
    v9 = 2 * v7;
    v10 = (char *)operator new(2 * v7);
    v11 = &v10[2 * v7];
    memcpy(v10, v8, v9);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  __p = v10;
  v29 = v11;
  v30 = v11;
  webrtc::rtcp::Nack::Pack((webrtc::rtcp::Nack *)&v22);
  v12 = *(_DWORD *)(a2 + 8);
  if (v12 > 0)
  {
    v13 = *(unsigned __int16 **)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 416);
    v15 = *(unsigned int *)(a2 + 8);
    v16 = v14;
    while (1)
    {
      v18 = *v13++;
      v17 = v18;
      if (v16)
      {
        v19 = *(unsigned __int16 *)(a1 + 412);
        if (v17 - v19 == 0x8000)
        {
          if (v19 >= v17)
            goto LABEL_8;
        }
        else if (v19 == v17 || (((_WORD)v17 - (_WORD)v19) & 0x8000) != 0)
        {
          goto LABEL_8;
        }
      }
      *(_WORD *)(a1 + 412) = v17;
      ++*(_DWORD *)(a1 + 420);
LABEL_8:
      ++v16;
      if (!--v15)
      {
        v21 = v14 + v12;
        *(_DWORD *)(a1 + 416) = v21;
        goto LABEL_20;
      }
    }
  }
  v21 = *(_DWORD *)(a1 + 416);
LABEL_20:
  *(_DWORD *)(a1 + 404) = v21;
  *(_DWORD *)(a1 + 408) = *(_DWORD *)(a1 + 420);
  ++*(_DWORD *)(a1 + 392);
  ((void (*)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t)))v22[3])((uint64_t)&v22, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8));
  v22 = &off_24C0B7570;
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void webrtc::RTCPSender::BuildExtendedReports(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *__p;
  void *v19;
  uint64_t v20;
  void (**v21)(webrtc::rtcp::ExtendedReports *__hidden);
  int v22;
  uint64_t v23;
  char v24;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  char v30;

  v21 = &off_24C0B3E10;
  LOBYTE(v23) = 0;
  v24 = 0;
  v30 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  LOBYTE(v28) = 0;
  v22 = *(_DWORD *)(a1 + 12);
  if (!*(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 376))
  {
    v23 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a2[3]);
    v24 = 1;
  }
  v6 = *a2;
  v7 = *(uint64_t **)(*a2 + 40);
  for (i = *(uint64_t **)(v6 + 48); v7 != i; v7 = (uint64_t *)((char *)v7 + 12))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((v26 - (_BYTE *)v25) >> 2) < 0x32)
    {
      webrtc::rtcp::Dlrr::AddDlrrItem(&v25, v7);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/extended_reports.cc");
    }
  }
  if (*(_BYTE *)(a1 + 592))
  {
    v16 = 0;
    __p = 0;
    v19 = 0;
    v17 = (_BYTE *)(a1 + 456);
    v20 = 0;
    do
    {
      if (*(v17 - 24))
        webrtc::rtcp::TargetBitrate::AddTargetBitrate((webrtc::rtcp::TargetBitrate *)&__p, v16, 0, *((unsigned int *)v17 - 7) / 0x3E8uLL);
      if (*(v17 - 16))
        webrtc::rtcp::TargetBitrate::AddTargetBitrate((webrtc::rtcp::TargetBitrate *)&__p, v16, 1u, *((unsigned int *)v17 - 5) / 0x3E8uLL);
      if (*(v17 - 8))
        webrtc::rtcp::TargetBitrate::AddTargetBitrate((webrtc::rtcp::TargetBitrate *)&__p, v16, 2u, *((unsigned int *)v17 - 3) / 0x3E8uLL);
      if (*v17)
        webrtc::rtcp::TargetBitrate::AddTargetBitrate((webrtc::rtcp::TargetBitrate *)&__p, v16, 3u, *((unsigned int *)v17 - 1) / 0x3E8uLL);
      ++v16;
      v17 += 32;
    }
    while (v16 != 5);
    webrtc::rtcp::ExtendedReports::SetTargetBitrate((webrtc::rtcp::ExtendedReports *)&v21, (char **)&__p);
    *(_BYTE *)(a1 + 592) = 0;
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
  ((void (*)(uint64_t, uint64_t, uint64_t *, unint64_t, uint64_t, void (*)(uint64_t, uint64_t)))v21[3])((uint64_t)&v21, a3 + 32, (uint64_t *)(a3 + 24), *(_QWORD *)(a3 + 16), *(_QWORD *)a3, *(void (**)(uint64_t, uint64_t))(a3 + 8));
  v21 = &off_24C0B3E10;
  if (v30 && v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void webrtc::RTCPSender::~RTCPSender(webrtc::RTCPSender *this)
{
  void *v2;
  void *v3;
  void *v4;
  webrtc::RTCPSender *v5;
  webrtc::RTCPSender *v6;
  uint64_t v7;

  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 656, *((_QWORD **)this + 83));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 632, *((_QWORD **)this + 80));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 600, *((_QWORD **)this + 76));
  v2 = (void *)*((_QWORD *)this + 42);
  if (v2)
  {
    *((_QWORD *)this + 43) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 39);
  if (v3)
  {
    *((_QWORD *)this + 40) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 31);
  if (v4)
  {
    *((_QWORD *)this + 32) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 239) < 0)
  {
    operator delete(*((void **)this + 27));
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 96));
    v5 = (webrtc::RTCPSender *)((char *)this + 64);
    v6 = (webrtc::RTCPSender *)*((_QWORD *)this + 11);
    if (v6 != (webrtc::RTCPSender *)((char *)this + 64))
      goto LABEL_9;
LABEL_12:
    v7 = 4;
    v6 = v5;
    goto LABEL_13;
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 96));
  v5 = (webrtc::RTCPSender *)((char *)this + 64);
  v6 = (webrtc::RTCPSender *)*((_QWORD *)this + 11);
  if (v6 == (webrtc::RTCPSender *)((char *)this + 64))
    goto LABEL_12;
LABEL_9:
  if (!v6)
    return;
  v7 = 5;
LABEL_13:
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
}

{
  webrtc::RTCPSender::~RTCPSender(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RTCPSender::SetRTCPStatus(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 32))
    {
      v5 = *(_QWORD *)(a1 + 56) / 2;
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      v7 = v6 + v5;
      if (v6 == 0x8000000000000000)
        v7 = 0x8000000000000000;
      if (v6 == 0x7FFFFFFFFFFFFFFFLL)
        v7 = 0x7FFFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(a1 + 176))
        *(_BYTE *)(a1 + 176) = 1;
      *(_QWORD *)(a1 + 168) = v7;
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v10 = v5;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v10);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 176))
  {
    *(_BYTE *)(a1 + 176) = 0;
  }
  *(_DWORD *)(a1 + 32) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t *webrtc::RTCPSender::SendLossNotification(uint64_t a1, _QWORD *a2, int a3, int a4, char a5, char a6)
{
  unint64_t v12;
  pthread_mutex_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t **v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  std::string *v27;
  unsigned int v28;
  _QWORD v29[2];
  unsigned int v30;
  _QWORD *v31;
  uint64_t (*v32)(_DWORD **, const void *, size_t);
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v12 = 0xFFFFFFFFLL;
  v30 = -1;
  v29[0] = a1;
  v29[1] = &v30;
  LOBYTE(v31) = 0;
  v36 = 0;
  v13 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (((a4 - a3) & 0x8000) != 0)
    goto LABEL_21;
  *(_WORD *)(a1 + 298) = a4;
  *(_WORD *)(a1 + 296) = a3;
  *(_BYTE *)(a1 + 300) = a5;
  v18 = *(uint64_t **)(a1 + 640);
  if (v18)
  {
    while (1)
    {
      while (1)
      {
        v20 = (uint64_t **)v18;
        v21 = *((_DWORD *)v18 + 7);
        if (v21 <= 0x2000)
          break;
        v18 = *v20;
        v19 = v20;
        if (!*v20)
          goto LABEL_9;
      }
      if (v21 == 0x2000)
        break;
      v18 = v20[1];
      if (!v18)
      {
        v19 = v20 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v19 = (uint64_t **)(a1 + 640);
    v20 = (uint64_t **)(a1 + 640);
LABEL_9:
    v22 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v22 + 28) = 0x100002000;
    *v22 = 0;
    v22[1] = 0;
    v22[2] = (uint64_t)v20;
    *v19 = v22;
    v23 = **(_QWORD **)(a1 + 632);
    if (v23)
    {
      *(_QWORD *)(a1 + 632) = v23;
      v24 = *v19;
    }
    else
    {
      v24 = v22;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), v24);
    ++*(_QWORD *)(a1 + 648);
  }
  if ((a6 & 1) != 0)
  {
    v12 = 0;
    goto LABEL_21;
  }
  v25 = *(_QWORD *)(a1 + 368);
  v31 = v29;
  v32 = rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendLossNotification(webrtc::RTCPSender::FeedbackState const&,unsigned short,unsigned short,BOOL,BOOL)::$_0>;
  v33 = v25;
  v34 = 0;
  if (v25 < 0x5DD)
  {
    v36 = 1;
    v12 = webrtc::RTCPSender::ComputeCompoundRTCPPacket(a1, a2, 0x2000u, 0, 0, (uint64_t)&v31);
    if (!HIDWORD(v12))
    {
      pthread_mutex_unlock(v13);
      if (!v36)
        __break(1u);
      if (v34)
        ((void (*)(_QWORD *, uint64_t *))v32)(v31, &v35);
      return (uint64_t *)v30;
    }
LABEL_21:
    pthread_mutex_unlock(v13);
    return (uint64_t *)v12;
  }
  v27 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc", 67, "max_packet_size <= 1500", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v14, v15, v16, v17, v25);
  return webrtc::RTCPSender::SetFlag((uint64_t *)v27, v28);
}

uint64_t *webrtc::RTCPSender::SetFlag(uint64_t *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v11;
  unsigned int v12;

  v2 = (uint64_t)this;
  v3 = (uint64_t **)(this + 80);
  v4 = this[80];
  if ((a2 & 0x2C0000) != 0)
  {
    v5 = this + 80;
    if (!v4)
    {
LABEL_9:
      v7 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v7 + 28) = 0x1002C0000;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = (uint64_t)v5;
      *v3 = v7;
      v8 = **(_QWORD **)(v2 + 632);
      if (v8)
      {
LABEL_10:
        *(_QWORD *)(v2 + 632) = v8;
        v9 = *v3;
LABEL_20:
        this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 640), v9);
        ++*(_QWORD *)(v2 + 648);
        return this;
      }
LABEL_19:
      v9 = v7;
      goto LABEL_20;
    }
    while (1)
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        v6 = *(_DWORD *)(v4 + 28);
        if (v6 <= 0x2C0000)
          break;
        v4 = *v5;
        v3 = (uint64_t **)v5;
        if (!*v5)
          goto LABEL_9;
      }
      if (v6 == 2883584)
        break;
      v4 = v5[1];
      if (!v4)
      {
        v3 = (uint64_t **)(v5 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v11 = this + 80;
    if (!v4)
    {
LABEL_18:
      v7 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v7 + 28) = a2 | 0x100000000;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = (uint64_t)v11;
      *v3 = v7;
      v8 = **(_QWORD **)(v2 + 632);
      if (v8)
        goto LABEL_10;
      goto LABEL_19;
    }
    while (1)
    {
      while (1)
      {
        v11 = (_QWORD *)v4;
        v12 = *(_DWORD *)(v4 + 28);
        if (v12 <= a2)
          break;
        v4 = *v11;
        v3 = (uint64_t **)v11;
        if (!*v11)
          goto LABEL_18;
      }
      if (v12 >= a2)
        break;
      v4 = v11[1];
      if (!v4)
      {
        v3 = (uint64_t **)(v11 + 1);
        goto LABEL_18;
      }
    }
  }
  return this;
}

uint64_t webrtc::RTCPSender::ComputeCompoundRTCPPacket(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  uint64_t **v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  BOOL v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t **v71;
  unsigned int v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  uint64_t **v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t **v102;
  char v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t **v108;
  uint64_t *v109;
  uint64_t **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  BOOL v116;
  uint64_t *v117;
  uint64_t v118;
  void (*v119)(void);
  uint64_t v120;
  _QWORD *v122;
  _QWORD *v123;
  uint64_t **v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t v128;

  if (!*(_DWORD *)(a1 + 32))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc");
    goto LABEL_43;
  }
  webrtc::RTCPSender::SetFlag((uint64_t *)a1, a3);
  if (!*(_BYTE *)(a1 + 200))
  {
    v41 = (uint64_t **)(a1 + 640);
    v42 = *(uint64_t **)(a1 + 640);
    if (!v42)
      goto LABEL_55;
    v43 = a1 + 640;
    v44 = *(_QWORD *)(a1 + 640);
    do
    {
      v45 = *(_DWORD *)(v44 + 28);
      v46 = v45 >= 2;
      if (v45 >= 2)
        v47 = (uint64_t *)v44;
      else
        v47 = (uint64_t *)(v44 + 8);
      if (v46)
        v43 = v44;
      v44 = *v47;
    }
    while (*v47);
    if ((uint64_t **)v43 != v41 && *(_DWORD *)(v43 + 28) <= 2u)
    {
      if (*(_BYTE *)(v43 + 32))
      {
        v67 = *(_QWORD **)(v43 + 8);
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = (_QWORD *)*v67;
          }
          while (v67);
        }
        else
        {
          v123 = (_QWORD *)v43;
          do
          {
            v68 = (_QWORD *)v123[2];
            v25 = *v68 == (_QWORD)v123;
            v123 = v68;
          }
          while (!v25);
        }
        if (*(_QWORD *)(a1 + 632) == v43)
          *(_QWORD *)(a1 + 632) = v68;
        --*(_QWORD *)(a1 + 648);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v42, (uint64_t *)v43);
        operator delete((void *)v43);
      }
      v48 = 1;
      if (*(_BYTE *)(a1 + 160))
      {
LABEL_56:
        v49 = *v41;
        if (!*v41)
          goto LABEL_66;
        v50 = a1 + 640;
        v51 = *v41;
        do
        {
          v52 = *((_DWORD *)v51 + 7);
          v53 = v52 == 0;
          if (v52)
            v54 = (uint64_t **)v51;
          else
            v54 = (uint64_t **)(v51 + 1);
          if (!v53)
            v50 = (uint64_t)v51;
          v51 = *v54;
        }
        while (*v54);
        if ((uint64_t **)v50 != v41 && *(_DWORD *)(v50 + 28) <= 1u)
        {
          if (*(_BYTE *)(v50 + 32))
          {
            v69 = *(_QWORD **)(v50 + 8);
            if (v69)
            {
              do
              {
                v70 = v69;
                v69 = (_QWORD *)*v69;
              }
              while (v69);
            }
            else
            {
              v125 = (_QWORD *)v50;
              do
              {
                v70 = (_QWORD *)v125[2];
                v25 = *v70 == (_QWORD)v125;
                v125 = v70;
              }
              while (!v25);
            }
            if (*(_QWORD *)(a1 + 632) == v50)
              *(_QWORD *)(a1 + 632) = v70;
            --*(_QWORD *)(a1 + 648);
            std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v49, (uint64_t *)v50);
            operator delete((void *)v50);
            v124 = *(uint64_t ***)(a1 + 632);
            if (v124 != v41)
            {
LABEL_235:
              while (!*((_BYTE *)v124 + 32))
              {
                v126 = v124[1];
                if (v126)
                {
                  do
                  {
                    v127 = (uint64_t **)v126;
                    v126 = (uint64_t *)*v126;
                  }
                  while (v126);
                }
                else
                {
                  do
                  {
                    v127 = (uint64_t **)v124[2];
                    v25 = *v127 == (uint64_t *)v124;
                    v124 = v127;
                  }
                  while (!v25);
                }
                v124 = v127;
                if (v127 == v41)
                  goto LABEL_226;
              }
              if (!*(_BYTE *)(a1 + 160))
                goto LABEL_3;
LABEL_243:
              if (*(_DWORD *)(a1 + 32) != 1)
                goto LABEL_3;
LABEL_43:
              v38 = 0x100000000;
              v39 = 4294967040;
              v40 = 255;
              return v40 | v38 | v39;
            }
LABEL_226:
            v40 = 0;
            v39 = 0;
            v38 = 0x100000000;
            return v40 | v38 | v39;
          }
        }
        else
        {
LABEL_66:
          if ((v48 & 1) == 0)
            goto LABEL_243;
        }
LABEL_225:
        v124 = *(uint64_t ***)(a1 + 632);
        if (v124 != v41)
          goto LABEL_235;
        goto LABEL_226;
      }
    }
    else
    {
LABEL_55:
      v48 = 0;
      if (*(_BYTE *)(a1 + 160))
        goto LABEL_56;
    }
    if (!v48)
      goto LABEL_3;
    goto LABEL_225;
  }
LABEL_3:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v10 = (uint64_t **)(a1 + 640);
  v11 = *(uint64_t **)(a1 + 640);
  if (!v11)
    goto LABEL_33;
  v12 = a1 + 640;
  v13 = *(_QWORD *)(a1 + 640);
  do
  {
    v14 = *(_DWORD *)(v13 + 28);
    v15 = v14 >= 2;
    if (v14 >= 2)
      v16 = (uint64_t *)v13;
    else
      v16 = (uint64_t *)(v13 + 8);
    if (v15)
      v12 = v13;
    v13 = *v16;
  }
  while (*v16);
  if ((uint64_t **)v12 != v10 && *(_DWORD *)(v12 + 28) < 3u)
    goto LABEL_39;
  v17 = a1 + 640;
  v18 = *(_QWORD *)(a1 + 640);
  do
  {
    v19 = *(_DWORD *)(v18 + 28);
    v20 = v19 >= 4;
    if (v19 >= 4)
      v21 = (uint64_t *)v18;
    else
      v21 = (uint64_t *)(v18 + 8);
    if (v20)
      v17 = v18;
    v18 = *v21;
  }
  while (*v21);
  if ((uint64_t **)v17 != v10 && *(_DWORD *)(v17 + 28) < 5u)
  {
LABEL_39:
    v29 = 1;
    v30 = *v10;
    if (!*v10)
      goto LABEL_116;
    goto LABEL_69;
  }
  v22 = a1 + 640;
  v23 = *(_QWORD *)(a1 + 640);
  do
  {
    v24 = *(_DWORD *)(v23 + 28);
    v25 = v24 == 0;
    if (v24)
      v26 = (uint64_t *)v23;
    else
      v26 = (uint64_t *)(v23 + 8);
    if (!v25)
      v22 = v23;
    v23 = *v26;
  }
  while (*v26);
  if ((uint64_t **)v22 != v10 && *(_DWORD *)(v22 + 28) <= 1u)
  {
    if (*(_BYTE *)(v22 + 32))
    {
      v65 = *(_QWORD **)(v22 + 8);
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = (_QWORD *)*v65;
        }
        while (v65);
      }
      else
      {
        v122 = (_QWORD *)v22;
        do
        {
          v66 = (_QWORD *)v122[2];
          v25 = *v66 == (_QWORD)v122;
          v122 = v66;
        }
        while (!v25);
      }
      if (*(_QWORD *)(a1 + 632) == v22)
        *(_QWORD *)(a1 + 632) = v66;
      --*(_QWORD *)(a1 + 648);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v11, (uint64_t *)v22);
      operator delete((void *)v22);
    }
    v27 = *(_DWORD *)(a1 + 32);
    if (v27 == 2)
      goto LABEL_35;
  }
  else
  {
LABEL_33:
    v27 = *(_DWORD *)(a1 + 32);
  }
  if (v27 == 1)
  {
LABEL_35:
    if (*(_BYTE *)(a1 + 160))
      v28 = 2;
    else
      v28 = 4;
    webrtc::RTCPSender::SetFlag((uint64_t *)a1, v28);
    goto LABEL_39;
  }
  v29 = 0;
  v30 = *v10;
  if (!*v10)
    goto LABEL_116;
LABEL_69:
  v55 = a1 + 640;
  v56 = (uint64_t)v30;
  do
  {
    v57 = *(_DWORD *)(v56 + 28);
    v58 = v57 >= 2;
    if (v57 >= 2)
      v59 = (uint64_t *)v56;
    else
      v59 = (uint64_t *)(v56 + 8);
    if (v58)
      v55 = v56;
    v56 = *v59;
  }
  while (*v59);
  if ((uint64_t **)v55 == v10 || *(_DWORD *)(v55 + 28) >= 3u)
  {
    v60 = a1 + 640;
    v61 = (uint64_t)v30;
    do
    {
      v62 = *(_DWORD *)(v61 + 28);
      v63 = v62 >= 4;
      if (v62 >= 4)
        v64 = (uint64_t *)v61;
      else
        v64 = (uint64_t *)(v61 + 8);
      if (v63)
        v60 = v61;
      v61 = *v64;
    }
    while (*v64);
    if ((uint64_t **)v60 != v10 && *(_DWORD *)(v60 + 28) <= 4u)
    {
      if (*(char *)(a1 + 239) < 0)
      {
        if (*(_QWORD *)(a1 + 224))
          goto LABEL_107;
      }
      else if (*(_BYTE *)(a1 + 239))
      {
        goto LABEL_107;
      }
    }
  }
  else
  {
    do
    {
LABEL_107:
      while (1)
      {
        v71 = (uint64_t **)v30;
        v72 = *((_DWORD *)v30 + 7);
        if (v72 >= 9)
          break;
        if (v72 == 8)
          goto LABEL_116;
        v30 = v71[1];
        if (!v30)
        {
          v73 = v71 + 1;
          goto LABEL_112;
        }
      }
      v30 = *v71;
    }
    while (*v71);
    v73 = v71;
LABEL_112:
    v74 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v74 + 28) = 0x100000008;
    *v74 = 0;
    v74[1] = 0;
    v74[2] = (uint64_t)v71;
    *v73 = v74;
    v75 = **(_QWORD **)(a1 + 632);
    if (v75)
    {
      *(_QWORD *)(a1 + 632) = v75;
      v76 = *v73;
    }
    else
    {
      v76 = v74;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), v76);
    ++*(_QWORD *)(a1 + 648);
  }
LABEL_116:
  if (v29)
  {
    if (!*(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 376) || a2[5] != a2[6] || *(_BYTE *)(a1 + 592))
    {
      v77 = *(uint64_t **)(a1 + 640);
      v78 = (uint64_t **)(a1 + 640);
      v79 = (uint64_t **)(a1 + 640);
      if (v77)
      {
        while (1)
        {
          while (1)
          {
            v79 = (uint64_t **)v77;
            v80 = *((_DWORD *)v77 + 7);
            if (v80 <= 0x2C0000)
              break;
            v77 = *v79;
            v78 = v79;
            if (!*v79)
              goto LABEL_129;
          }
          if (v80 == 2883584)
            break;
          v77 = v79[1];
          if (!v77)
          {
            v78 = v79 + 1;
            goto LABEL_129;
          }
        }
      }
      else
      {
LABEL_129:
        v81 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v81 + 28) = 0x1002C0000;
        *v81 = 0;
        v81[1] = 0;
        v81[2] = (uint64_t)v79;
        *v78 = v81;
        v82 = **(_QWORD **)(a1 + 632);
        if (v82)
        {
          *(_QWORD *)(a1 + 632) = v82;
          v83 = *v78;
        }
        else
        {
          v83 = v81;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), v83);
        ++*(_QWORD *)(a1 + 648);
      }
    }
    v84 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 8)
      || !*(_BYTE *)(a1 + 160)
      || (v87 = a2[2], (uint64_t)v87 < 72001)
      || (v87 % 0x3E8 <= 0x1F3 ? (v88 = v87 / 0x3E8) : (v88 = v87 / 0x3E8 + 1),
          v85 = 0x15752A00 / v88,
          v84 < (uint64_t)v85))
    {
      if (v84 < 0)
      {
        v89 = -v84;
        v90 = v89 / 0x3E8;
        if (v89 % 0x3E8 <= 0x1F4)
          v91 = 0;
        else
          v91 = -1;
        LODWORD(v86) = v91 - v90;
LABEL_150:
        v92 = *(_QWORD *)(a1 + 16);
        v93 = *(_QWORD *)(a1 + 24) ^ (*(_QWORD *)(a1 + 24) >> 12);
        v94 = v93 ^ (v93 << 25) ^ ((v93 ^ (unint64_t)(v93 << 25)) >> 27);
        *(_QWORD *)(a1 + 24) = v94;
        v95 = (1332534557 * v94);
        if ((v86 & 0x80000000) == 0)
          v96 = v86;
        else
          v96 = v86 + 1;
        v97 = 1000
            * (int)((v96 >> 1)
                  + ((v95 + v95 * (unint64_t)(3 * (int)v86 / 2 - (v96 >> 1))) >> 32));
        if (v97 <= 1000)
          v98 = 1000;
        else
          v98 = v97;
        v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v92 + 16))(v92);
        v100 = v98 + v99;
        if (v99 == 0x8000000000000000)
          v100 = 0x8000000000000000;
        if (v99 == 0x7FFFFFFFFFFFFFFFLL)
          v100 = 0x7FFFFFFFFFFFFFFFLL;
        if (!*(_BYTE *)(a1 + 176))
          *(_BYTE *)(a1 + 176) = 1;
        *(_QWORD *)(a1 + 168) = v100;
        v101 = *(_QWORD *)(a1 + 88);
        if (v101)
        {
          v128 = v98;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v101 + 48))(v101, &v128);
        }
        goto LABEL_164;
      }
      v85 = *(_QWORD *)(a1 + 56);
    }
    v86 = v85 / 0x3E8;
    if (v85 % 0x3E8 > 0x1F3)
      LODWORD(v86) = v86 + 1;
    goto LABEL_150;
  }
LABEL_164:
  v102 = *(uint64_t ***)(a1 + 632);
  if (v102 != v10)
  {
    v103 = 0;
    v104 = (uint64_t *)(a1 + 664);
    do
    {
      while (1)
      {
        v105 = *((_DWORD *)v102 + 7);
        v106 = v102[1];
        if (*((_BYTE *)v102 + 32))
        {
          v107 = v102[1];
          v108 = v102;
          if (v106)
          {
            do
            {
              v109 = v107;
              v107 = (uint64_t *)*v107;
            }
            while (v107);
          }
          else
          {
            do
            {
              v109 = v108[2];
              v25 = *v109 == (_QWORD)v108;
              v108 = (uint64_t **)v109;
            }
            while (!v25);
          }
          v110 = v102;
          if (v106)
          {
            do
            {
              v111 = v106;
              v106 = (uint64_t *)*v106;
            }
            while (v106);
          }
          else
          {
            do
            {
              v111 = v110[2];
              v25 = *v111 == (_QWORD)v110;
              v110 = (uint64_t **)v111;
            }
            while (!v25);
          }
          if (*(uint64_t ***)(a1 + 632) == v102)
            *(_QWORD *)(a1 + 632) = v111;
          --*(_QWORD *)(a1 + 648);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), (uint64_t *)v102);
          operator delete(v102);
          v102 = (uint64_t **)v109;
        }
        else
        {
          v112 = (uint64_t *)v102;
          if (v106)
          {
            do
            {
              v102 = (uint64_t **)v106;
              v106 = (uint64_t *)*v106;
            }
            while (v106);
          }
          else
          {
            do
            {
              v102 = (uint64_t **)v112[2];
              v25 = *v102 == v112;
              v112 = (uint64_t *)v102;
            }
            while (!v25);
          }
        }
        if (v105 != 16)
          break;
        v103 = 1;
        if (v102 == v10)
          goto LABEL_204;
      }
      v113 = *v104;
      if (*v104)
      {
        v114 = a1 + 664;
        do
        {
          v115 = *(_DWORD *)(v113 + 32);
          v116 = v115 >= v105;
          if (v115 >= v105)
            v117 = (uint64_t *)v113;
          else
            v117 = (uint64_t *)(v113 + 8);
          if (v116)
            v114 = v113;
          v113 = *v117;
        }
        while (*v117);
        if ((uint64_t *)v114 != v104 && v105 >= *(_DWORD *)(v114 + 32))
        {
          v119 = *(void (**)(void))(v114 + 40);
          v118 = *(_QWORD *)(v114 + 48);
          if ((v118 & 1) != 0)
            v119 = *(void (**)(void))(*(_QWORD *)(a1 + (v118 >> 1)) + v119);
          v119();
        }
      }
    }
    while (v102 != v10);
    if ((v103 & 1) == 0)
      goto LABEL_205;
LABEL_204:
    webrtc::RTCPSender::BuildBYE(a1, v9, a6);
  }
LABEL_205:
  v120 = *(_QWORD *)(a1 + 384);
  if (v120)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v120 + 16))(v120, *(unsigned int *)(a1 + 208), a1 + 392);
  v38 = 0;
  v40 = 0;
  v39 = 0;
  return v40 | v38 | v39;
}

uint64_t webrtc::RTCPSender::SetRemb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pthread_mutex_t *v11;
  _QWORD *v12;
  void *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string *v31;
  uint64_t v32;

  if (a2 < 0)
  {
    v31 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc", 268, "bitrate_bps >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, a2);
    return webrtc::RTCPSender::UnsetRemb((webrtc::RTCPSender *)v31);
  }
  else
  {
    v11 = (pthread_mutex_t *)(a1 + 96);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    if (*(_DWORD *)(a1 + 32))
    {
      *(_QWORD *)(a1 + 304) = a2;
      v12 = (_QWORD *)(a1 + 312);
      v13 = *(void **)(a1 + 312);
      if (v13)
      {
        *(_QWORD *)(a1 + 320) = v13;
        operator delete(v13);
        *v12 = 0;
        *(_QWORD *)(a1 + 320) = 0;
        *(_QWORD *)(a1 + 328) = 0;
      }
      *(_OWORD *)v12 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 328) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      v14 = *(uint64_t **)(a1 + 640);
      if (v14)
      {
        while (1)
        {
          while (1)
          {
            v16 = (uint64_t **)v14;
            v17 = *((_DWORD *)v14 + 7);
            if (v17 <= 0x10000)
              break;
            v14 = *v16;
            v15 = v16;
            if (!*v16)
              goto LABEL_12;
          }
          if (v17 == 0x10000)
            break;
          v14 = v16[1];
          if (!v14)
          {
            v15 = v16 + 1;
            goto LABEL_12;
          }
        }
      }
      else
      {
        v15 = (uint64_t **)(a1 + 640);
        v16 = (uint64_t **)(a1 + 640);
LABEL_12:
        v18 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v18 + 28) = 0x10000;
        *v18 = 0;
        v18[1] = 0;
        v18[2] = (uint64_t)v16;
        *v15 = v18;
        v19 = **(_QWORD **)(a1 + 632);
        if (v19)
        {
          *(_QWORD *)(a1 + 632) = v19;
          v20 = *v15;
        }
        else
        {
          v20 = v18;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), v20);
        ++*(_QWORD *)(a1 + 648);
      }
      v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 176))
        *(_BYTE *)(a1 + 176) = 1;
      *(_QWORD *)(a1 + 168) = v28;
      v29 = *(_QWORD *)(a1 + 88);
      if (v29)
      {
        v32 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v29 + 48))(v29, &v32);
      }
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc");
    }
    return pthread_mutex_unlock(v11);
  }
}

uint64_t webrtc::RTCPSender::UnsetRemb(webrtc::RTCPSender *this)
{
  pthread_mutex_t *v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  unsigned int v6;
  BOOL v7;
  char **v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;

  v2 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v3 = (uint64_t *)*((_QWORD *)this + 80);
  if (v3)
  {
    v4 = (char *)this + 640;
    v5 = (char *)*((_QWORD *)this + 80);
    do
    {
      v6 = *((_DWORD *)v5 + 7);
      v7 = v6 >= 0x10000;
      if (v6 >= 0x10000)
        v8 = (char **)v5;
      else
        v8 = (char **)(v5 + 8);
      if (v7)
        v4 = v5;
      v5 = *v8;
    }
    while (*v8);
    if (v4 != (char *)this + 640 && *((_DWORD *)v4 + 7) <= 0x10000u)
    {
      v9 = (char *)*((_QWORD *)v4 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        v11 = v4;
        do
        {
          v10 = (char *)*((_QWORD *)v11 + 2);
          v12 = *(_QWORD *)v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if (*((char **)this + 79) == v4)
        *((_QWORD *)this + 79) = v10;
      --*((_QWORD *)this + 81);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v4);
      operator delete(v4);
    }
  }
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::RTCPSender::SetRtpClockRate(webrtc::RTCPSender *this, int a2, int a3)
{
  pthread_mutex_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;

  v6 = (pthread_mutex_t *)((char *)this + 96);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  v7 = (char *)*((_QWORD *)this + 76);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v7;
        v10 = v7[28];
        if (v10 <= a2)
          break;
        v7 = (char *)*v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (v10 >= a2)
        break;
      v7 = (char *)v9[1];
      if (!v7)
      {
        v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)((char *)this + 608);
    v9 = (uint64_t **)((char *)this + 608);
LABEL_8:
    v11 = (char *)v9;
    v9 = (uint64_t **)operator new(0x28uLL);
    *((_BYTE *)v9 + 28) = a2;
    *((_DWORD *)v9 + 8) = 0;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t *)v11;
    *v8 = (uint64_t *)v9;
    v12 = **((_QWORD **)this + 75);
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *((_QWORD *)this + 75) = v12;
      v13 = *v8;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 76), v13);
    ++*((_QWORD *)this + 77);
  }
  *((_DWORD *)v9 + 8) = a3 / 1000;
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::RTCPSender::SetCNAME(uint64_t a1, __int128 *a2, size_t a3)
{
  pthread_mutex_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  BOOL v11;
  BOOL v12;
  void **v13;
  __int128 v15;
  unint64_t v16;

  v6 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (a3 > 0x16)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    v7 = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&v15 + 1) = a3;
    v16 = v9 | 0x8000000000000000;
    *(_QWORD *)&v15 = v7;
  }
  else
  {
    HIBYTE(v16) = a3;
    v7 = &v15;
  }
  v10 = (__int128 *)((char *)v7 + a3);
  if (v7 <= a2)
  {
    v11 = v10 >= a2;
    v12 = v10 == a2;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (!v12 && v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a3)
    memmove(v7, a2, a3);
  *(_BYTE *)v10 = 0;
  v13 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v15;
  *(_QWORD *)(a1 + 232) = v16;
  pthread_mutex_unlock(v6);
  return 0;
}

void webrtc::rtcp::Fir::AddRequestTo(webrtc::rtcp::Fir *this, int a2, char a3)
{
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char v19;

  v7 = (char *)*((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)v7 < v6)
  {
    if (v7)
    {
      *(_DWORD *)v7 = a2;
      v7[4] = a3;
      v8 = v7 + 8;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  v9 = (char *)*((_QWORD *)this + 2);
  v10 = (v7 - v9) >> 3;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 61)
    goto LABEL_18;
  v12 = v6 - (_QWORD)v9;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
  v14 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v13)
    v14 = v11;
  if (!v14)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    abort();
  }
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v15 = 8 * v14;
  v16 = (char *)operator new(8 * v14);
  v17 = &v16[8 * v10];
  *(_DWORD *)v17 = a2;
  v17[4] = a3;
  v8 = v17 + 8;
  if (v7 != v9)
  {
    do
    {
      v18 = *((_DWORD *)v7 - 2);
      v7 -= 8;
      v19 = v7[4];
      *((_DWORD *)v17 - 2) = v18;
      v17 -= 8;
      v17[4] = v19;
    }
    while (v7 != v9);
    v7 = v9;
  }
  *((_QWORD *)this + 2) = v17;
  *((_QWORD *)this + 3) = v8;
  *((_QWORD *)this + 4) = &v16[v15];
  if (v7)
    operator delete(v7);
LABEL_16:
  *((_QWORD *)this + 3) = v8;
}

unint64_t webrtc::RTCPSender::SendRTCP(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  pthread_mutex_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  unsigned int v19;
  _QWORD *v20;
  uint64_t (*v21)(_DWORD **, const void *, size_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v19 = -1;
  v18[0] = a1;
  v18[1] = &v19;
  v10 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  v15 = *(_QWORD *)(a1 + 368);
  v20 = v18;
  v21 = rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendRTCP(webrtc::RTCPSender::FeedbackState const&,webrtc::RTCPPacketType,int,unsigned short const*)::$_0>;
  v22 = v15;
  v23 = 0;
  if (v15 >= 0x5DD)
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc", 67, "max_packet_size <= 1500", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v11, v12, v13, v14, v15);
  v25 = 1;
  v16 = webrtc::RTCPSender::ComputeCompoundRTCPPacket(a1, a2, a3, a4, a5, (uint64_t)&v20);
  pthread_mutex_unlock(v10);
  if (HIDWORD(v16))
    return v16;
  v15 = v25;
  if (!v25)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v23)
    ((void (*)(_QWORD *, uint64_t *))v21)(v20, &v24);
  return v19;
}

uint64_t webrtc::RTCPSender::SetTmmbn(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  v5 = *(void **)(a1 + 336);
  if (v5)
  {
    *(_QWORD *)(a1 + 344) = v5;
    operator delete(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = 0;
  }
  *(_OWORD *)(a1 + 336) = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v6 = *(uint64_t **)(a1 + 640);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 7);
        if (v9 < 0x201)
          break;
        v6 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 == 512)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v7 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 640);
    v8 = (uint64_t **)(a1 + 640);
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v10 + 28) = 0x100000200;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v7 = v10;
    v11 = **(_QWORD **)(a1 + 632);
    if (v11)
    {
      *(_QWORD *)(a1 + 632) = v11;
      v12 = *v7;
    }
    else
    {
      v12 = v10;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 640), v12);
    ++*(_QWORD *)(a1 + 648);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RTCPSender::SetVideoBitrateAllocation(webrtc::RTCPSender *this, const webrtc::VideoBitrateAllocation *a2)
{
  pthread_mutex_t *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  int v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t **v83;
  uint64_t **v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  void *__p[2];
  char v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[24];
  unsigned __int8 v101;

  v4 = (pthread_mutex_t *)((char *)this + 96);
  result = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 96));
  if (!*((_DWORD *)this + 8))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v68, v69, v70, v71, v72, v73, v74, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc");
    return pthread_mutex_unlock(v4);
  }
  v6 = 0;
  v7 = 0;
  v8 = 0;
  LOBYTE(v91) = 0;
  v101 = 0;
  do
  {
    if (v8)
    {
      if (!*((_BYTE *)this + v6 + 432))
        goto LABEL_21;
    }
    else
    {
      v9 = *((unsigned __int8 *)a2 + v6 + 8);
      v10 = *((unsigned __int8 *)this + v6 + 432);
      if ((*((_BYTE *)a2 + v6 + 8) != 0) == (*((_BYTE *)this + v6 + 432) != 0))
      {
        if (*((_BYTE *)a2 + v6 + 8))
          v9 = *(_DWORD *)((char *)a2 + v6 + 4);
        if (*((_BYTE *)this + v6 + 432))
        {
          v11 = *(_DWORD *)((char *)this + v6 + 428);
          if ((v9 != 0) != (v11 == 0))
          {
            v8 = 0;
            if (!v11)
              goto LABEL_20;
            goto LABEL_18;
          }
        }
        else if (!v9)
        {
          goto LABEL_27;
        }
      }
      v12 = *((_OWORD *)a2 + 8);
      v13 = *((_OWORD *)a2 + 9);
      v14 = *((_OWORD *)a2 + 6);
      v98 = *((_OWORD *)a2 + 7);
      v99 = v12;
      *(_OWORD *)v100 = v13;
      *(_QWORD *)&v100[16] = *((_QWORD *)a2 + 20);
      v15 = *((_OWORD *)a2 + 5);
      v95 = *((_OWORD *)a2 + 4);
      v96 = v15;
      v97 = v14;
      v16 = *((_OWORD *)a2 + 1);
      v91 = *(_OWORD *)a2;
      v92 = v16;
      v17 = *((_OWORD *)a2 + 3);
      v93 = *((_OWORD *)a2 + 2);
      v94 = v17;
      v7 = 1;
      v8 = 1;
      v101 = 1;
      if (!v10)
        goto LABEL_21;
    }
    if (!*(_DWORD *)((char *)this + v6 + 428))
      goto LABEL_20;
LABEL_18:
    if (*((_BYTE *)a2 + v6 + 8) && *(_DWORD *)((char *)a2 + v6 + 4))
    {
LABEL_20:
      if (v8)
        goto LABEL_21;
      goto LABEL_27;
    }
    if (!v8)
      goto LABEL_105;
    v18 = v91;
    v19 = (char *)&v91 + v6;
    if (*((_BYTE *)&v91 + v6 + 8))
      v18 = v91 - *((_DWORD *)v19 + 1);
    *((_DWORD *)v19 + 1) = 0;
    v19[8] = 1;
    LODWORD(v91) = v18;
    v7 = v101;
    v8 = v101;
    if (v101)
    {
LABEL_21:
      if (!*((_BYTE *)this + v6 + 440))
        goto LABEL_51;
      goto LABEL_36;
    }
LABEL_27:
    v20 = *((unsigned __int8 *)a2 + v6 + 16);
    v21 = *((unsigned __int8 *)this + v6 + 440);
    if ((*((_BYTE *)a2 + v6 + 16) != 0) == (*((_BYTE *)this + v6 + 440) != 0))
    {
      if (*((_BYTE *)a2 + v6 + 16))
        v20 = *(_DWORD *)((char *)a2 + v6 + 12);
      if (*((_BYTE *)this + v6 + 440))
      {
        v22 = *(_DWORD *)((char *)this + v6 + 436);
        if ((v20 != 0) != (v22 == 0))
        {
          v8 = 0;
          if (v22)
            goto LABEL_37;
          goto LABEL_39;
        }
      }
      else if (!v20)
      {
        goto LABEL_40;
      }
    }
    v23 = *((_OWORD *)a2 + 8);
    v24 = *((_OWORD *)a2 + 9);
    v25 = *((_OWORD *)a2 + 6);
    v98 = *((_OWORD *)a2 + 7);
    v99 = v23;
    *(_OWORD *)v100 = v24;
    *(_QWORD *)&v100[16] = *((_QWORD *)a2 + 20);
    v26 = *((_OWORD *)a2 + 5);
    v95 = *((_OWORD *)a2 + 4);
    v96 = v26;
    v97 = v25;
    v27 = *((_OWORD *)a2 + 1);
    v91 = *(_OWORD *)a2;
    v92 = v27;
    v28 = *((_OWORD *)a2 + 3);
    v93 = *((_OWORD *)a2 + 2);
    v94 = v28;
    v7 = 1;
    v8 = 1;
    v101 = 1;
    if (!v21)
      goto LABEL_51;
LABEL_36:
    if (*(_DWORD *)((char *)this + v6 + 436))
    {
LABEL_37:
      if (!*((_BYTE *)a2 + v6 + 16) || !*(_DWORD *)((char *)a2 + v6 + 12))
      {
        if (!v8)
          goto LABEL_105;
        v32 = v91;
        v33 = (char *)&v91 + v6;
        if (*((_BYTE *)&v91 + v6 + 16))
          v32 = v91 - *((_DWORD *)v33 + 3);
        *((_DWORD *)v33 + 3) = 0;
        v33[16] = 1;
        LODWORD(v91) = v32;
LABEL_51:
        if (!*((_BYTE *)this + v6 + 448))
          goto LABEL_67;
        goto LABEL_52;
      }
    }
LABEL_39:
    if (v8)
      goto LABEL_51;
LABEL_40:
    v29 = *((unsigned __int8 *)a2 + v6 + 24);
    v30 = *((unsigned __int8 *)this + v6 + 448);
    if ((*((_BYTE *)a2 + v6 + 24) != 0) == (*((_BYTE *)this + v6 + 448) != 0))
    {
      if (*((_BYTE *)a2 + v6 + 24))
        v29 = *(_DWORD *)((char *)a2 + v6 + 20);
      if (*((_BYTE *)this + v6 + 448))
      {
        v31 = *(_DWORD *)((char *)this + v6 + 444);
        if ((v29 != 0) != (v31 == 0))
        {
          v8 = 0;
          if (v31)
            goto LABEL_53;
          goto LABEL_55;
        }
      }
      else if (!v29)
      {
        goto LABEL_56;
      }
    }
    v40 = *((_OWORD *)a2 + 8);
    v41 = *((_OWORD *)a2 + 9);
    v42 = *((_OWORD *)a2 + 6);
    v98 = *((_OWORD *)a2 + 7);
    v99 = v40;
    *(_OWORD *)v100 = v41;
    *(_QWORD *)&v100[16] = *((_QWORD *)a2 + 20);
    v43 = *((_OWORD *)a2 + 5);
    v95 = *((_OWORD *)a2 + 4);
    v96 = v43;
    v97 = v42;
    v44 = *((_OWORD *)a2 + 1);
    v91 = *(_OWORD *)a2;
    v92 = v44;
    v45 = *((_OWORD *)a2 + 3);
    v93 = *((_OWORD *)a2 + 2);
    v94 = v45;
    v7 = 1;
    v8 = 1;
    v101 = 1;
    if (!v30)
      goto LABEL_67;
LABEL_52:
    if (*(_DWORD *)((char *)this + v6 + 444))
    {
LABEL_53:
      if (!*((_BYTE *)a2 + v6 + 24) || !*(_DWORD *)((char *)a2 + v6 + 20))
      {
        if (!v8)
          goto LABEL_105;
        v36 = v91;
        v37 = (char *)&v91 + v6;
        if (*((_BYTE *)&v92 + v6 + 8))
          v36 = v91 - *((_DWORD *)v37 + 5);
        *((_DWORD *)v37 + 5) = 0;
        v37[24] = 1;
        LODWORD(v91) = v36;
LABEL_67:
        if (!*((_BYTE *)this + v6 + 456))
          goto LABEL_4;
        goto LABEL_68;
      }
    }
LABEL_55:
    if (v8)
      goto LABEL_67;
LABEL_56:
    v8 = *((unsigned __int8 *)a2 + v6 + 32);
    v34 = *((unsigned __int8 *)this + v6 + 456);
    if ((*((_BYTE *)a2 + v6 + 32) != 0) == (*((_BYTE *)this + v6 + 456) != 0))
    {
      if (*((_BYTE *)a2 + v6 + 32))
        v8 = *(_DWORD *)((char *)a2 + v6 + 28);
      if (*((_BYTE *)this + v6 + 456))
      {
        v35 = *(_DWORD *)((char *)this + v6 + 452);
        if ((v8 != 0) != (v35 == 0))
        {
          v8 = 0;
          if (!v35)
            goto LABEL_4;
          goto LABEL_69;
        }
      }
      else if (!v8)
      {
        goto LABEL_4;
      }
    }
    v46 = *((_OWORD *)a2 + 8);
    v47 = *((_OWORD *)a2 + 9);
    v48 = *((_OWORD *)a2 + 6);
    v98 = *((_OWORD *)a2 + 7);
    v99 = v46;
    *(_OWORD *)v100 = v47;
    *(_QWORD *)&v100[16] = *((_QWORD *)a2 + 20);
    v49 = *((_OWORD *)a2 + 5);
    v95 = *((_OWORD *)a2 + 4);
    v96 = v49;
    v97 = v48;
    v50 = *((_OWORD *)a2 + 1);
    v91 = *(_OWORD *)a2;
    v92 = v50;
    v51 = *((_OWORD *)a2 + 3);
    v93 = *((_OWORD *)a2 + 2);
    v94 = v51;
    v7 = 1;
    v8 = 1;
    v101 = 1;
    if (!v34)
      goto LABEL_4;
LABEL_68:
    if (!*(_DWORD *)((char *)this + v6 + 452))
      goto LABEL_4;
LABEL_69:
    if (!*((_BYTE *)a2 + v6 + 32) || !*(_DWORD *)((char *)a2 + v6 + 28))
    {
      if (!v8)
      {
LABEL_105:
        __break(1u);
        return result;
      }
      v38 = v91;
      v39 = (char *)&v91 + v6;
      if (*((_BYTE *)&v93 + v6))
        v38 = v91 - *((_DWORD *)v39 + 7);
      *((_DWORD *)v39 + 7) = 0;
      v39[32] = 1;
      LODWORD(v91) = v38;
    }
LABEL_4:
    v6 += 32;
  }
  while (v6 != 160);
  v52 = (_OWORD *)((char *)this + 424);
  if (!v7)
  {
    v75 = *(_OWORD *)a2;
    v76 = *((_OWORD *)a2 + 2);
    *(_OWORD *)((char *)this + 440) = *((_OWORD *)a2 + 1);
    *(_OWORD *)((char *)this + 456) = v76;
    *v52 = v75;
    v77 = *((_OWORD *)a2 + 3);
    v78 = *((_OWORD *)a2 + 4);
    v79 = *((_OWORD *)a2 + 6);
    *(_OWORD *)((char *)this + 504) = *((_OWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 520) = v79;
    *(_OWORD *)((char *)this + 472) = v77;
    *(_OWORD *)((char *)this + 488) = v78;
    v80 = *((_OWORD *)a2 + 7);
    v81 = *((_OWORD *)a2 + 8);
    v82 = *((_OWORD *)a2 + 9);
    *(_QWORD *)((char *)this + 581) = *(_QWORD *)((char *)a2 + 157);
    *(_OWORD *)((char *)this + 552) = v81;
    *(_OWORD *)((char *)this + 568) = v82;
    *(_OWORD *)((char *)this + 536) = v80;
    *((_BYTE *)this + 592) = 1;
    v67 = (uint64_t *)*((_QWORD *)this + 80);
    if (v67)
      goto LABEL_94;
    goto LABEL_92;
  }
  v53 = v98;
  v54 = *(_OWORD *)v100;
  *(_OWORD *)((char *)this + 552) = v99;
  *(_OWORD *)((char *)this + 568) = v54;
  *(_QWORD *)((char *)this + 581) = *(_QWORD *)&v100[13];
  v55 = v96;
  *(_OWORD *)((char *)this + 488) = v95;
  *(_OWORD *)((char *)this + 504) = v55;
  *(_OWORD *)((char *)this + 520) = v97;
  *(_OWORD *)((char *)this + 536) = v53;
  v56 = v92;
  *v52 = v91;
  *(_OWORD *)((char *)this + 440) = v56;
  v57 = v94;
  *(_OWORD *)((char *)this + 456) = v93;
  *(_OWORD *)((char *)this + 472) = v57;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0
    && (webrtc::VideoBitrateAllocation::ToString((webrtc::RTCPSender *)((char *)this + 424), (char *)__p),
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc"), v90 < 0))
  {
    operator delete(__p[0]);
    v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
    if (!*((_BYTE *)this + 176))
LABEL_84:
      *((_BYTE *)this + 176) = 1;
  }
  else
  {
    v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
    if (!*((_BYTE *)this + 176))
      goto LABEL_84;
  }
  *((_QWORD *)this + 21) = v65;
  v66 = *((_QWORD *)this + 11);
  if (v66)
  {
    __p[0] = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v66 + 48))(v66, __p);
  }
  *((_BYTE *)this + 592) = 1;
  v67 = (uint64_t *)*((_QWORD *)this + 80);
  if (v67)
  {
    while (1)
    {
LABEL_94:
      while (1)
      {
        v84 = (uint64_t **)v67;
        v85 = *((_DWORD *)v67 + 7);
        if (v85 <= 0x2C0000)
          break;
        v67 = *v84;
        v83 = v84;
        if (!*v84)
          goto LABEL_98;
      }
      if (v85 == 2883584)
        break;
      v67 = v84[1];
      if (!v67)
      {
        v83 = v84 + 1;
        goto LABEL_98;
      }
    }
  }
  else
  {
LABEL_92:
    v83 = (uint64_t **)((char *)this + 640);
    v84 = (uint64_t **)((char *)this + 640);
LABEL_98:
    v86 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v86 + 28) = 0x1002C0000;
    *v86 = 0;
    v86[1] = 0;
    v86[2] = (uint64_t)v84;
    *v83 = v86;
    v87 = **((_QWORD **)this + 79);
    if (v87)
    {
      *((_QWORD *)this + 79) = v87;
      v88 = *v83;
    }
    else
    {
      v88 = v86;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 80), v88);
    ++*((_QWORD *)this + 81);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RTCPSender::SendCombinedRtcpPacket(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD **v12;
  _DWORD **v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t (*v25)(uint64_t *, const void *, size_t);
  unint64_t v26;
  uint64_t v27;
  _QWORD v28[189];

  v28[188] = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)(a1 + 96);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
  if (*(_DWORD *)(a1 + 32))
  {
    v5 = *(_QWORD *)(a1 + 368);
    v6 = *(_DWORD *)(a1 + 12);
    result = pthread_mutex_unlock(v4);
    v23 = a1;
    v24 = &v23;
    v25 = rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendCombinedRtcpPacket(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)::$_0>;
    v26 = v5;
    v27 = 0;
    if (v5 >= 0x5DD)
    {
      v22 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc", 67, "max_packet_size <= 1500", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, v9, v10, v11, v5);
      return rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendLossNotification(webrtc::RTCPSender::FeedbackState const&,unsigned short,unsigned short,BOOL,BOOL)::$_0>(v22);
    }
    else
    {
      v12 = *(_DWORD ***)a2;
      v13 = *(_DWORD ***)(a2 + 8);
      if (*(_DWORD ***)a2 != v13)
      {
        do
        {
          v14 = *v12++;
          v14[2] = v6;
          result = (*(uint64_t (**)(_DWORD *, _QWORD *, uint64_t *, unint64_t, uint64_t *, uint64_t (*)(uint64_t *, const void *, size_t)))(*(_QWORD *)v14 + 24))(v14, v28, &v27, v26, v24, v25);
        }
        while (v12 != v13);
        if (v27)
          return ((uint64_t (*)(uint64_t *, _QWORD *))v25)(v24, v28);
      }
    }
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_sender.cc");
    return pthread_mutex_unlock(v4);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendLossNotification(webrtc::RTCPSender::FeedbackState const&,unsigned short,unsigned short,BOOL,BOOL)::$_0>(_DWORD **a1, const void *a2, size_t a3)
{
  const void *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  v6 = *a1;
  v7 = *((_QWORD *)*a1 + 6);
  if (!a3)
    a2 = 0;
  result = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v7 + 8))(v7, a2);
  *a1[1] = 0;
  v9 = v6[5];
  if (v9)
  {
    v10 = (_QWORD *)operator new();
    if (rtc::g_clock)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *v10 = &unk_24C0BC028;
    v10[1] = 1000 * (v11 / 1000000);
    v10[2] = a3;
    v10[3] = a3;
    if (a3)
    {
      v12 = (void *)operator new[]();
      v10[4] = v12;
      memcpy(v12, v4, a3);
    }
    else
    {
      v10[4] = 0;
    }
    v13 = v10;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 40))(v9, &v13);
    result = (uint64_t)v13;
    v13 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendRTCP(webrtc::RTCPSender::FeedbackState const&,webrtc::RTCPPacketType,int,unsigned short const*)::$_0>(_DWORD **a1, const void *a2, size_t a3)
{
  const void *v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  v6 = *a1;
  v7 = *((_QWORD *)*a1 + 6);
  if (!a3)
    a2 = 0;
  result = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v7 + 8))(v7, a2);
  if ((_DWORD)result)
  {
    *a1[1] = 0;
    v9 = v6[5];
    if (v9)
    {
      v10 = (_QWORD *)operator new();
      if (rtc::g_clock)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      *v10 = &unk_24C0BC028;
      v10[1] = 1000 * (v11 / 1000000);
      v10[2] = a3;
      v10[3] = a3;
      if (a3)
      {
        v12 = (void *)operator new[]();
        v10[4] = v12;
        memcpy(v12, v4, a3);
      }
      else
      {
        v10[4] = 0;
      }
      v13 = v10;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v9 + 40))(v9, &v13);
      result = (uint64_t)v13;
      v13 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(rtc::ArrayView<unsigned char const,-4711l>)>::CallVoidPtr<webrtc::RTCPSender::SendCombinedRtcpPacket(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)::$_0>(uint64_t *a1, const void *a2, size_t a3)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  v4 = a2;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 48);
  if (!a3)
    a2 = 0;
  result = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v6 + 8))(v6, a2);
  if ((_DWORD)result)
  {
    v8 = *(_QWORD *)(v5 + 40);
    if (v8)
    {
      v9 = (_QWORD *)operator new();
      if (rtc::g_clock)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v10 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      *v9 = &unk_24C0BC028;
      v9[1] = 1000 * (v10 / 1000000);
      v9[2] = a3;
      v9[3] = a3;
      if (a3)
      {
        v11 = (void *)operator new[]();
        v9[4] = v11;
        memcpy(v11, v4, a3);
      }
      else
      {
        v9[4] = 0;
      }
      v12 = v9;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v8 + 40))(v8, &v12);
      result = (uint64_t)v12;
      v12 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void sub_208754468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087545EC(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754600(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754614(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754628(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_20875463C(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754650(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754664(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void sub_208754678(_Unwind_Exception *a1)
{
  webrtc::RtpEncodingParameters *v1;

  webrtc::RtpEncodingParameters::~RtpEncodingParameters(v1);
  _Unwind_Resume(a1);
}

void webrtc::RTCCertificateStats::copy(webrtc::RTCCertificateStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = &off_24C0BC490;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  *(_BYTE *)(v4 + 104) = 0;
  v9 = (std::string *)(v4 + 104);
  *(_BYTE *)(v4 + 128) = 0;
  if (*((_BYTE *)this + 128))
  {
    if (*((char *)this + 127) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
      *(_QWORD *)(v4 + 120) = *((_QWORD *)this + 15);
    }
    *(_BYTE *)(v4 + 128) = 1;
  }
  *(_BYTE *)(v4 + 136) = 0;
  v10 = (std::string *)(v4 + 136);
  *(_BYTE *)(v4 + 160) = 0;
  if (*((_BYTE *)this + 160))
  {
    if (*((char *)this + 159) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
      *(_QWORD *)(v4 + 152) = *((_QWORD *)this + 19);
    }
    *(_BYTE *)(v4 + 160) = 1;
  }
  *a2 = v4;
}

const char *webrtc::RTCCertificateStats::type(webrtc::RTCCertificateStats *this)
{
  return "certificate";
}

void webrtc::RTCCertificateStats::AttributesImpl(webrtc::RTCCertificateStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char **v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;

  v5 = (char *)this + 40;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a2 + 4;
  if (a2 == -4)
  {
    v9 = operator new(0x18uLL);
    v10 = v9 + 3;
    a3[1] = (char *)(v9 + 3);
    v11 = a3 + 1;
    *v9 = "fingerprint";
    v9[1] = v5;
    v9[2] = 6;
    *a3 = (char *)v9;
    a3[2] = (char *)(v9 + 3);
    v12 = v9 + 3;
    v13 = (char *)this + 72;
    a3[1] = (char *)(v9 + 3);
  }
  else
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_51;
    v7 = 3 * v6;
    v8 = operator new(24 * v6);
    v9 = v8;
    v10 = &v8[v7];
    *a3 = (char *)v8;
    a3[1] = (char *)v8;
    v11 = a3 + 1;
    a3[2] = (char *)&v8[v7];
    *v8 = "fingerprint";
    v8[1] = v5;
    v8[2] = 6;
    v12 = v8 + 3;
    v13 = (char *)this + 72;
    a3[1] = (char *)(v8 + 3);
    if (v8 + 3 < &v8[v7])
    {
      *v12 = "fingerprintAlgorithm";
      v8[4] = v13;
      v8[5] = 6;
      v14 = (char *)(v8 + 6);
      v15 = (char *)this + 104;
      a3[1] = (char *)(v8 + 6);
      v16 = (unint64_t)a3[2];
      if ((unint64_t)(v8 + 6) < v16)
        goto LABEL_5;
LABEL_21:
      v28 = *a3;
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a3) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_51;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v28) >> 3);
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x555555555555555)
        v32 = 0xAAAAAAAAAAAAAAALL;
      else
        v32 = v30;
      if (!v32)
        goto LABEL_52;
      if (v32 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_53;
      v33 = 24 * v32;
      v34 = (char *)operator new(24 * v32);
      v35 = &v34[v33];
      v36 = &v34[24 * v29];
      *(_QWORD *)v36 = "base64Certificate";
      *((_QWORD *)v36 + 1) = v15;
      *((_QWORD *)v36 + 2) = 6;
      v17 = v36 + 24;
      if (v14 == v28)
      {
        *a3 = v36;
        a3[1] = v17;
        v28 = v14;
        a3[2] = v35;
      }
      else
      {
        do
        {
          v37 = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v36 - 24) = *(_OWORD *)(v14 - 24);
          *((_QWORD *)v36 - 1) = v37;
          v36 -= 24;
          v14 -= 24;
        }
        while (v14 != v28);
        *a3 = v36;
        a3[1] = v17;
        a3[2] = v35;
        if (!v28)
        {
          v18 = (char *)this + 136;
          a3[1] = v17;
          v19 = (unint64_t)a3[2];
          if ((unint64_t)v17 >= v19)
            goto LABEL_36;
          goto LABEL_33;
        }
      }
      operator delete(v28);
      v18 = (char *)this + 136;
      a3[1] = v17;
      v19 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v19)
        goto LABEL_36;
LABEL_33:
      *(_QWORD *)v17 = "issuerCertificateId";
      *((_QWORD *)v17 + 1) = v18;
      *((_QWORD *)v17 + 2) = 6;
      v38 = v17 + 24;
      goto LABEL_50;
    }
  }
  v20 = 0xAAAAAAAAAAAAAAABLL * (v12 - v9) + 1;
  if (v20 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_51;
  v21 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v20;
  if (!v22)
    goto LABEL_52;
  if (v22 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_53;
  v23 = 24 * v22;
  v24 = (char *)operator new(24 * v22);
  v25 = &v24[8 * (v12 - v9)];
  *(_QWORD *)v25 = "fingerprintAlgorithm";
  *((_QWORD *)v25 + 1) = v13;
  *((_QWORD *)v25 + 2) = 6;
  v14 = v25 + 24;
  if (v12 == v9)
  {
    v27 = &v24[8 * (v12 - v9)];
  }
  else
  {
    do
    {
      v26 = *(v12 - 1);
      v27 = v25 - 24;
      *(_OWORD *)(v25 - 24) = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v25 - 1) = v26;
      v12 -= 3;
      v25 -= 24;
    }
    while (v12 != v9);
  }
  *a3 = v27;
  a3[1] = v14;
  a3[2] = &v24[v23];
  operator delete(v9);
  v15 = (char *)this + 104;
  a3[1] = v14;
  v16 = (unint64_t)a3[2];
  if ((unint64_t)v14 >= v16)
    goto LABEL_21;
LABEL_5:
  *(_QWORD *)v14 = "base64Certificate";
  *((_QWORD *)v14 + 1) = v15;
  *((_QWORD *)v14 + 2) = 6;
  v17 = v14 + 24;
  v18 = (char *)this + 136;
  a3[1] = v17;
  v19 = (unint64_t)a3[2];
  if ((unint64_t)v17 < v19)
    goto LABEL_33;
LABEL_36:
  v39 = *a3;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a3) >> 3);
  v41 = v40 + 1;
  if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_51:
    abort();
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v39) >> 3);
  if (2 * v42 > v41)
    v41 = 2 * v42;
  if (v42 >= 0x555555555555555)
    v43 = 0xAAAAAAAAAAAAAAALL;
  else
    v43 = v41;
  if (!v43)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v43 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_53;
  v44 = 24 * v43;
  v45 = (char *)operator new(24 * v43);
  v46 = &v45[v44];
  v47 = &v45[24 * v40];
  *(_QWORD *)v47 = "issuerCertificateId";
  *((_QWORD *)v47 + 1) = v18;
  *((_QWORD *)v47 + 2) = 6;
  v38 = v47 + 24;
  if (v17 == v39)
  {
    *a3 = v47;
    a3[1] = v38;
    v39 = v17;
    a3[2] = v46;
LABEL_49:
    operator delete(v39);
    goto LABEL_50;
  }
  do
  {
    v48 = *(_OWORD *)(v17 - 24);
    *((_QWORD *)v47 - 1) = *((_QWORD *)v17 - 1);
    *(_OWORD *)(v47 - 24) = v48;
    v47 -= 24;
    v17 -= 24;
  }
  while (v17 != v39);
  *a3 = v47;
  a3[1] = v38;
  a3[2] = v46;
  if (v39)
    goto LABEL_49;
LABEL_50:
  *v11 = v38;
}

void webrtc::RTCCertificateStats::~RTCCertificateStats(void **this)
{
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    if (!*((_BYTE *)this + 128))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 128))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
LABEL_7:
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_13:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  webrtc::RTCCertificateStats::~RTCCertificateStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RTCCodecStats::copy(webrtc::RTCCodecStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC4C8;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  v8 = *((_QWORD *)this + 9);
  *(_BYTE *)(v4 + 80) = 0;
  v9 = (std::string *)(v4 + 80);
  *(_QWORD *)(v4 + 72) = v8;
  *(_BYTE *)(v4 + 104) = 0;
  if (*((_BYTE *)this + 104))
  {
    if (*((char *)this + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
      *(_QWORD *)(v4 + 96) = *((_QWORD *)this + 12);
    }
    *(_BYTE *)(v4 + 104) = 1;
  }
  *(_BYTE *)(v4 + 128) = 0;
  v10 = (std::string *)(v4 + 128);
  *(_QWORD *)(v4 + 112) = *((_QWORD *)this + 14);
  *(_QWORD *)(v4 + 117) = *(_QWORD *)((char *)this + 117);
  *(_BYTE *)(v4 + 152) = 0;
  if (*((_BYTE *)this + 152))
  {
    if (*((char *)this + 151) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
      *(_QWORD *)(v4 + 144) = *((_QWORD *)this + 18);
    }
    *(_BYTE *)(v4 + 152) = 1;
  }
  *a2 = v4;
}

const char *webrtc::RTCCodecStats::type(webrtc::RTCCodecStats *this)
{
  return "codec";
}

void webrtc::RTCCodecStats::AttributesImpl(webrtc::RTCCodecStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCCodecStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCCodecStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCCodecStats *v25;
  _QWORD v26[20];

  v26[18] = *MEMORY[0x24BDAC8D0];
  v26[0] = "transportId";
  v26[1] = (char *)this + 40;
  v26[2] = 6;
  v26[3] = "payloadType";
  v26[4] = (char *)this + 72;
  v26[5] = 2;
  v26[6] = "mimeType";
  v26[7] = (char *)this + 80;
  v26[8] = 6;
  v26[9] = "clockRate";
  v26[10] = (char *)this + 112;
  v26[11] = 2;
  v26[12] = "channels";
  v26[13] = (char *)this + 120;
  v26[14] = 2;
  v26[15] = "sdpFmtpLine";
  v26[16] = (char *)this + 128;
  v26[17] = 6;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  v10 = a2 + 6;
  if (a2 == -6)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCCodecStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCCodecStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCCodecStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCCodecStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCCodecStats *)(v22 + 24);
        a9[2] = (webrtc::RTCCodecStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCCodecStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCCodecStats *)v22;
      a9[1] = (webrtc::RTCCodecStats *)(v22 + 24);
      a9[2] = (webrtc::RTCCodecStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCCodecStats *)v15;
      if (++v14 == 6)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCCodecStats *)v15;
    ++v14;
  }
  while (v14 != 6);
}

void webrtc::RTCCodecStats::~RTCCodecStats(void **this)
{
  if (*((_BYTE *)this + 152) && *((char *)this + 151) < 0)
  {
    operator delete(this[16]);
    if (!*((_BYTE *)this + 104))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 104))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
LABEL_7:
  if (!*((_BYTE *)this + 64) || (*((char *)this + 63) & 0x80000000) == 0)
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(this[1]);
    return;
  }
  operator delete(this[5]);
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    goto LABEL_12;
}

{
  if (*((_BYTE *)this + 152) && *((char *)this + 151) < 0)
  {
    operator delete(this[16]);
    if (!*((_BYTE *)this + 104))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 104))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
LABEL_7:
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_14:
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_14;
  }
  operator delete(this[1]);
  goto LABEL_14;
}

__n128 webrtc::RTCDataChannelStats::copy@<Q0>(webrtc::RTCDataChannelStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  __n128 result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC500;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  v9 = *((_QWORD *)this + 13);
  *(_BYTE *)(v4 + 112) = 0;
  v10 = (std::string *)(v4 + 112);
  *(_QWORD *)(v4 + 104) = v9;
  *(_BYTE *)(v4 + 136) = 0;
  if (*((_BYTE *)this + 136))
  {
    if (*((char *)this + 135) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 14), *((_QWORD *)this + 15));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
      *(_QWORD *)(v4 + 128) = *((_QWORD *)this + 16);
    }
    *(_BYTE *)(v4 + 136) = 1;
  }
  v11 = *((_OWORD *)this + 10);
  *(_OWORD *)(v4 + 144) = *((_OWORD *)this + 9);
  *(_OWORD *)(v4 + 160) = v11;
  result = *(__n128 *)((char *)this + 169);
  *(__n128 *)(v4 + 169) = result;
  *a2 = v4;
  return result;
}

const char *webrtc::RTCDataChannelStats::type(webrtc::RTCDataChannelStats *this)
{
  return "data-channel";
}

void webrtc::RTCDataChannelStats::AttributesImpl(webrtc::RTCDataChannelStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCDataChannelStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCDataChannelStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCDataChannelStats *v25;
  _QWORD v26[26];

  v26[24] = *MEMORY[0x24BDAC8D0];
  v26[0] = "label";
  v26[1] = (char *)this + 40;
  v26[2] = 6;
  v26[3] = "protocol";
  v26[4] = (char *)this + 72;
  v26[5] = 6;
  v26[6] = "dataChannelIdentifier";
  v26[7] = (char *)this + 104;
  v26[8] = 1;
  v26[9] = "state";
  v26[10] = (char *)this + 112;
  v26[11] = 6;
  v26[12] = "messagesSent";
  v26[13] = (char *)this + 144;
  v26[14] = 2;
  v26[15] = "bytesSent";
  v26[16] = (char *)this + 152;
  v26[17] = 4;
  v26[18] = "messagesReceived";
  v26[19] = (char *)this + 168;
  v26[20] = 2;
  v26[21] = "bytesReceived";
  v26[22] = (char *)this + 176;
  v26[23] = 4;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v10 = a2 + 8;
  if (a2 == -8)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCDataChannelStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCDataChannelStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCDataChannelStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCDataChannelStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCDataChannelStats *)(v22 + 24);
        a9[2] = (webrtc::RTCDataChannelStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCDataChannelStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCDataChannelStats *)v22;
      a9[1] = (webrtc::RTCDataChannelStats *)(v22 + 24);
      a9[2] = (webrtc::RTCDataChannelStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCDataChannelStats *)v15;
      if (++v14 == 8)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCDataChannelStats *)v15;
    ++v14;
  }
  while (v14 != 8);
}

void webrtc::RTCDataChannelStats::~RTCDataChannelStats(void **this)
{
  if (*((_BYTE *)this + 136) && *((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if (!*((_BYTE *)this + 96))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 96))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
LABEL_7:
  if (!*((_BYTE *)this + 64) || (*((char *)this + 63) & 0x80000000) == 0)
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(this[1]);
    return;
  }
  operator delete(this[5]);
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    goto LABEL_12;
}

{
  if (*((_BYTE *)this + 136) && *((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if (!*((_BYTE *)this + 96))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 96))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
LABEL_7:
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_14:
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_14;
  }
  operator delete(this[1]);
  goto LABEL_14;
}

void *webrtc::RTCIceCandidatePairStats::copy@<X0>(webrtc::RTCIceCandidatePairStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  void *result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = &off_24C0BC538;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  *(_BYTE *)(v4 + 104) = 0;
  v9 = (std::string *)(v4 + 104);
  *(_BYTE *)(v4 + 128) = 0;
  if (*((_BYTE *)this + 128))
  {
    if (*((char *)this + 127) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
      *(_QWORD *)(v4 + 120) = *((_QWORD *)this + 15);
    }
    *(_BYTE *)(v4 + 128) = 1;
  }
  *(_BYTE *)(v4 + 136) = 0;
  v10 = (std::string *)(v4 + 136);
  *(_BYTE *)(v4 + 160) = 0;
  if (*((_BYTE *)this + 160))
  {
    if (*((char *)this + 159) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
      *(_QWORD *)(v4 + 152) = *((_QWORD *)this + 19);
    }
    *(_BYTE *)(v4 + 160) = 1;
  }
  result = memcpy((void *)(v4 + 168), (char *)this + 168, 0x121uLL);
  *a2 = v4;
  return result;
}

const char *webrtc::RTCIceCandidatePairStats::type(webrtc::RTCIceCandidatePairStats *this)
{
  return "candidate-pair";
}

void webrtc::RTCIceCandidatePairStats::AttributesImpl(webrtc::RTCIceCandidatePairStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCIceCandidatePairStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCIceCandidatePairStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCIceCandidatePairStats *v25;
  _QWORD v26[74];

  v26[72] = *MEMORY[0x24BDAC8D0];
  v26[0] = "transportId";
  v26[1] = (char *)this + 40;
  v26[2] = 6;
  v26[3] = "localCandidateId";
  v26[4] = (char *)this + 72;
  v26[5] = 6;
  v26[6] = "remoteCandidateId";
  v26[7] = (char *)this + 104;
  v26[8] = 6;
  v26[9] = "state";
  v26[10] = (char *)this + 136;
  v26[11] = 6;
  v26[12] = "priority";
  v26[13] = (char *)this + 168;
  v26[14] = 4;
  v26[15] = "nominated";
  v26[16] = (char *)this + 184;
  v26[17] = 0;
  v26[18] = "writable";
  v26[19] = (char *)this + 186;
  v26[20] = 0;
  v26[21] = "packetsSent";
  v26[22] = (char *)this + 192;
  v26[23] = 4;
  v26[24] = "packetsReceived";
  v26[25] = (char *)this + 208;
  v26[26] = 4;
  v26[27] = "bytesSent";
  v26[28] = (char *)this + 224;
  v26[29] = 4;
  v26[30] = "bytesReceived";
  v26[31] = (char *)this + 240;
  v26[32] = 4;
  v26[33] = "totalRoundTripTime";
  v26[34] = (char *)this + 256;
  v26[35] = 5;
  v26[36] = "currentRoundTripTime";
  v26[37] = (char *)this + 272;
  v26[38] = 5;
  v26[39] = "availableOutgoingBitrate";
  v26[40] = (char *)this + 288;
  v26[41] = 5;
  v26[42] = "availableIncomingBitrate";
  v26[43] = (char *)this + 304;
  v26[44] = 5;
  v26[45] = "requestsReceived";
  v26[46] = (char *)this + 320;
  v26[47] = 4;
  v26[48] = "requestsSent";
  v26[49] = (char *)this + 336;
  v26[50] = 4;
  v26[51] = "responsesReceived";
  v26[52] = (char *)this + 352;
  v26[53] = 4;
  v26[54] = "responsesSent";
  v26[55] = (char *)this + 368;
  v26[56] = 4;
  v26[57] = "consentRequestsSent";
  v26[58] = (char *)this + 384;
  v26[59] = 4;
  v26[60] = "packetsDiscardedOnSend";
  v26[61] = (char *)this + 400;
  v26[62] = 4;
  v26[63] = "bytesDiscardedOnSend";
  v26[64] = (char *)this + 416;
  v26[65] = 4;
  v26[66] = "lastPacketReceivedTimestamp";
  v26[67] = (char *)this + 432;
  v26[68] = 5;
  v26[69] = "lastPacketSentTimestamp";
  v26[70] = (char *)this + 448;
  v26[71] = 5;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v10 = a2 + 24;
  if (a2 == -24)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCIceCandidatePairStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCIceCandidatePairStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCIceCandidatePairStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCIceCandidatePairStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCIceCandidatePairStats *)(v22 + 24);
        a9[2] = (webrtc::RTCIceCandidatePairStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCIceCandidatePairStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCIceCandidatePairStats *)v22;
      a9[1] = (webrtc::RTCIceCandidatePairStats *)(v22 + 24);
      a9[2] = (webrtc::RTCIceCandidatePairStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCIceCandidatePairStats *)v15;
      if (++v14 == 24)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCIceCandidatePairStats *)v15;
    ++v14;
  }
  while (v14 != 24);
}

uint64_t webrtc::RTCIceCandidatePairStats::RTCIceCandidatePairStats(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_24C0BC140;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = &off_24C0BC538;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  return a1;
}

void webrtc::RTCIceCandidatePairStats::~RTCIceCandidatePairStats(void **this)
{
  webrtc::RTCCertificateStats::~RTCCertificateStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::RTCIceCandidateStats *webrtc::RTCIceCandidateStats::copy@<X0>(webrtc::RTCIceCandidateStats *this@<X0>, webrtc::RTCIceCandidateStats **a2@<X8>)
{
  webrtc::RTCIceCandidateStats *v4;
  webrtc::RTCIceCandidateStats *result;

  v4 = (webrtc::RTCIceCandidateStats *)operator new();
  result = webrtc::RTCIceCandidateStats::RTCIceCandidateStats(v4, this);
  *a2 = result;
  return result;
}

const char *webrtc::RTCIceCandidateStats::type(webrtc::RTCIceCandidateStats *this)
{
  return "abstract-ice-candidate";
}

void webrtc::RTCIceCandidateStats::AttributesImpl(webrtc::RTCIceCandidateStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCIceCandidateStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCIceCandidateStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCIceCandidateStats *v25;
  _QWORD v26[56];

  v26[54] = *MEMORY[0x24BDAC8D0];
  v26[0] = "transportId";
  v26[1] = (char *)this + 40;
  v26[2] = 6;
  v26[3] = "isRemote";
  v26[4] = (char *)this + 72;
  v26[5] = 0;
  v26[6] = "networkType";
  v26[7] = (char *)this + 80;
  v26[8] = 6;
  v26[9] = "ip";
  v26[10] = (char *)this + 112;
  v26[11] = 6;
  v26[12] = "address";
  v26[13] = (char *)this + 144;
  v26[14] = 6;
  v26[15] = "port";
  v26[16] = (char *)this + 176;
  v26[17] = 1;
  v26[18] = "protocol";
  v26[19] = (char *)this + 184;
  v26[20] = 6;
  v26[21] = "relayProtocol";
  v26[22] = (char *)this + 216;
  v26[23] = 6;
  v26[24] = "candidateType";
  v26[25] = (char *)this + 248;
  v26[26] = 6;
  v26[27] = "priority";
  v26[28] = (char *)this + 280;
  v26[29] = 1;
  v26[30] = "url";
  v26[31] = (char *)this + 288;
  v26[32] = 6;
  v26[33] = "foundation";
  v26[34] = (char *)this + 320;
  v26[35] = 6;
  v26[36] = "relatedAddress";
  v26[37] = (char *)this + 352;
  v26[38] = 6;
  v26[39] = "relatedPort";
  v26[40] = (char *)this + 384;
  v26[41] = 1;
  v26[42] = "usernameFragment";
  v26[43] = (char *)this + 392;
  v26[44] = 6;
  v26[45] = "tcpType";
  v26[46] = (char *)this + 424;
  v26[47] = 6;
  v26[48] = "vpn";
  v26[49] = (char *)this + 456;
  v26[50] = 0;
  v26[51] = "networkAdapterType";
  v26[52] = (char *)this + 464;
  v26[53] = 6;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v10 = a2 + 18;
  if (a2 == -18)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCIceCandidateStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCIceCandidateStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCIceCandidateStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCIceCandidateStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCIceCandidateStats *)(v22 + 24);
        a9[2] = (webrtc::RTCIceCandidateStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCIceCandidateStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCIceCandidateStats *)v22;
      a9[1] = (webrtc::RTCIceCandidateStats *)(v22 + 24);
      a9[2] = (webrtc::RTCIceCandidateStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCIceCandidateStats *)v15;
      if (++v14 == 18)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCIceCandidateStats *)v15;
    ++v14;
  }
  while (v14 != 18);
}

void webrtc::RTCIceCandidateStats::~RTCIceCandidateStats(void **this)
{
  *this = &off_24C0BC570;
  if (*((_BYTE *)this + 488) && *((char *)this + 487) < 0)
  {
    operator delete(this[58]);
    if (!*((_BYTE *)this + 448))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 448))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
LABEL_7:
  if (*((_BYTE *)this + 416) && *((char *)this + 415) < 0)
  {
    operator delete(this[49]);
    if (!*((_BYTE *)this + 376))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 376))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
LABEL_13:
  if (*((_BYTE *)this + 344) && *((char *)this + 343) < 0)
  {
    operator delete(this[40]);
    if (!*((_BYTE *)this + 312))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 312))
  {
    goto LABEL_19;
  }
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
LABEL_19:
  if (*((_BYTE *)this + 272) && *((char *)this + 271) < 0)
  {
    operator delete(this[31]);
    if (!*((_BYTE *)this + 240))
      goto LABEL_25;
  }
  else if (!*((_BYTE *)this + 240))
  {
    goto LABEL_25;
  }
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
LABEL_25:
  if (*((_BYTE *)this + 208) && *((char *)this + 207) < 0)
  {
    operator delete(this[23]);
    if (!*((_BYTE *)this + 168))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 168))
  {
    goto LABEL_31;
  }
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
LABEL_31:
  if (*((_BYTE *)this + 136) && *((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if (!*((_BYTE *)this + 104))
      goto LABEL_37;
  }
  else if (!*((_BYTE *)this + 104))
  {
    goto LABEL_37;
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
LABEL_37:
  if (!*((_BYTE *)this + 64) || (*((char *)this + 63) & 0x80000000) == 0)
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_42:
    operator delete(this[1]);
    return;
  }
  operator delete(this[5]);
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    goto LABEL_42;
}

{
  webrtc::RTCIceCandidateStats::~RTCIceCandidateStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RTCLocalIceCandidateStats::RTCLocalIceCandidateStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  int v7;
  std::string *v8;
  _BYTE v10[7];

  v6 = *(std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v7 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = &unk_24C0BC140;
  v8 = (std::string *)(a1 + 8);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v8, v6, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 27) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 31) = v7;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = &off_24C0BC570;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 256;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (v7 < 0)
    operator delete(v6);
  *(_QWORD *)a1 = &off_24C0BC5A8;
  return a1;
}

webrtc::RTCIceCandidateStats *webrtc::RTCLocalIceCandidateStats::copy@<X0>(webrtc::RTCLocalIceCandidateStats *this@<X0>, webrtc::RTCIceCandidateStats **a2@<X8>)
{
  webrtc::RTCIceCandidateStats *v4;
  webrtc::RTCIceCandidateStats *result;

  v4 = (webrtc::RTCIceCandidateStats *)operator new();
  result = webrtc::RTCIceCandidateStats::RTCIceCandidateStats(v4, this);
  *(_QWORD *)result = &off_24C0BC5A8;
  *a2 = result;
  return result;
}

const char *webrtc::RTCLocalIceCandidateStats::type(webrtc::RTCLocalIceCandidateStats *this)
{
  return "local-candidate";
}

uint64_t webrtc::RTCRemoteIceCandidateStats::RTCRemoteIceCandidateStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  int v7;
  std::string *v8;
  _BYTE v10[7];

  v6 = *(std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v7 = *(char *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = &unk_24C0BC140;
  v8 = (std::string *)(a1 + 8);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v8, v6, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 27) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 31) = v7;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = &off_24C0BC570;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 257;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 284) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 388) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  if (v7 < 0)
    operator delete(v6);
  *(_QWORD *)a1 = &off_24C0BC5E0;
  return a1;
}

webrtc::RTCIceCandidateStats *webrtc::RTCRemoteIceCandidateStats::copy@<X0>(webrtc::RTCRemoteIceCandidateStats *this@<X0>, webrtc::RTCIceCandidateStats **a2@<X8>)
{
  webrtc::RTCIceCandidateStats *v4;
  webrtc::RTCIceCandidateStats *result;

  v4 = (webrtc::RTCIceCandidateStats *)operator new();
  result = webrtc::RTCIceCandidateStats::RTCIceCandidateStats(v4, this);
  *(_QWORD *)result = &off_24C0BC5E0;
  *a2 = result;
  return result;
}

const char *webrtc::RTCRemoteIceCandidateStats::type(webrtc::RTCRemoteIceCandidateStats *this)
{
  return "remote-candidate";
}

void webrtc::RTCPeerConnectionStats::copy(webrtc::RTCPeerConnectionStats *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;

  v4 = (_QWORD *)operator new();
  v5 = *((_QWORD *)this + 4);
  *v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 1);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    v4[3] = *((_QWORD *)this + 3);
  }
  *v4 = off_24C0BC618;
  v7 = *((_QWORD *)this + 5);
  v4[4] = v5;
  v4[5] = v7;
  *(_QWORD *)((char *)v4 + 45) = *(_QWORD *)((char *)this + 45);
  *a2 = v4;
}

const char *webrtc::RTCPeerConnectionStats::type(webrtc::RTCPeerConnectionStats *this)
{
  return "peer-connection";
}

void webrtc::RTCPeerConnectionStats::AttributesImpl(webrtc::RTCPeerConnectionStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v5 = (char *)this + 40;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a2 + 2;
  if (a2 == -2)
  {
    v9 = (char *)operator new(0x18uLL);
    v10 = (unint64_t)(v9 + 24);
    a3[1] = v9 + 24;
    v11 = a3 + 1;
    *(_QWORD *)v9 = "dataChannelsOpened";
    *((_QWORD *)v9 + 1) = v5;
    *((_QWORD *)v9 + 2) = 2;
    *a3 = v9;
    a3[2] = v9 + 24;
    v12 = v9 + 24;
    v13 = (char *)this + 48;
    a3[1] = v9 + 24;
  }
  else
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_20;
    v7 = 24 * v6;
    v8 = (char *)operator new(24 * v6);
    v9 = v8;
    v10 = (unint64_t)&v8[v7];
    *a3 = v8;
    a3[1] = v8;
    v11 = a3 + 1;
    a3[2] = (char *)v10;
    *(_QWORD *)v8 = "dataChannelsOpened";
    *((_QWORD *)v8 + 1) = v5;
    *((_QWORD *)v8 + 2) = 2;
    v12 = v8 + 24;
    v13 = (char *)this + 48;
    a3[1] = v8 + 24;
    if ((unint64_t)(v8 + 24) < v10)
    {
      *(_QWORD *)v12 = "dataChannelsClosed";
      *((_QWORD *)v8 + 4) = v13;
      *((_QWORD *)v8 + 5) = 2;
      v14 = v8 + 48;
      goto LABEL_19;
    }
  }
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3) + 1;
  if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_20:
    abort();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v15;
  if (!v17)
  {
    __break(1u);
LABEL_22:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v17 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_22;
  v18 = 24 * v17;
  v19 = (char *)operator new(24 * v17);
  v20 = &v19[v18];
  v21 = &v19[8 * ((v12 - v9) >> 3)];
  *(_QWORD *)v21 = "dataChannelsClosed";
  *((_QWORD *)v21 + 1) = v13;
  *((_QWORD *)v21 + 2) = 2;
  v14 = v21 + 24;
  if (v12 == v9)
  {
    v23 = &v19[8 * ((v12 - v9) >> 3)];
  }
  else
  {
    do
    {
      v22 = *((_QWORD *)v12 - 1);
      v23 = v21 - 24;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)(v12 - 24);
      *((_QWORD *)v21 - 1) = v22;
      v12 -= 24;
      v21 -= 24;
    }
    while (v12 != v9);
  }
  *a3 = v23;
  a3[1] = v14;
  a3[2] = v20;
  operator delete(v9);
LABEL_19:
  *v11 = v14;
}

void webrtc::RTCPeerConnectionStats::~RTCPeerConnectionStats(void **this)
{
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::RTCRtpStreamStats *webrtc::RTCRtpStreamStats::copy@<X0>(webrtc::RTCRtpStreamStats *this@<X0>, webrtc::RTCRtpStreamStats **a2@<X8>)
{
  webrtc::RTCRtpStreamStats *v4;
  webrtc::RTCRtpStreamStats *result;

  v4 = (webrtc::RTCRtpStreamStats *)operator new();
  result = webrtc::RTCRtpStreamStats::RTCRtpStreamStats(v4, this);
  *a2 = result;
  return result;
}

const char *webrtc::RTCRtpStreamStats::type(webrtc::RTCRtpStreamStats *this)
{
  return "rtp";
}

void webrtc::RTCRtpStreamStats::AttributesImpl(webrtc::RTCRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char **v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  __int128 v48;

  v5 = (char *)this + 40;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a2 + 4;
  if (a2 == -4)
  {
    v9 = operator new(0x18uLL);
    v10 = v9 + 3;
    a3[1] = (char *)(v9 + 3);
    v11 = a3 + 1;
    *v9 = "ssrc";
    v9[1] = v5;
    v9[2] = 2;
    *a3 = (char *)v9;
    a3[2] = (char *)(v9 + 3);
    v12 = v9 + 3;
    v13 = (char *)this + 48;
    a3[1] = (char *)(v9 + 3);
  }
  else
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_51;
    v7 = 3 * v6;
    v8 = operator new(24 * v6);
    v9 = v8;
    v10 = &v8[v7];
    *a3 = (char *)v8;
    a3[1] = (char *)v8;
    v11 = a3 + 1;
    a3[2] = (char *)&v8[v7];
    *v8 = "ssrc";
    v8[1] = v5;
    v8[2] = 2;
    v12 = v8 + 3;
    v13 = (char *)this + 48;
    a3[1] = (char *)(v8 + 3);
    if (v8 + 3 < &v8[v7])
    {
      *v12 = "kind";
      v8[4] = v13;
      v8[5] = 6;
      v14 = (char *)(v8 + 6);
      v15 = (char *)this + 80;
      a3[1] = (char *)(v8 + 6);
      v16 = (unint64_t)a3[2];
      if ((unint64_t)(v8 + 6) < v16)
        goto LABEL_5;
LABEL_21:
      v28 = *a3;
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a3) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_51;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)v28) >> 3);
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x555555555555555)
        v32 = 0xAAAAAAAAAAAAAAALL;
      else
        v32 = v30;
      if (!v32)
        goto LABEL_52;
      if (v32 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_53;
      v33 = 24 * v32;
      v34 = (char *)operator new(24 * v32);
      v35 = &v34[v33];
      v36 = &v34[24 * v29];
      *(_QWORD *)v36 = "transportId";
      *((_QWORD *)v36 + 1) = v15;
      *((_QWORD *)v36 + 2) = 6;
      v17 = v36 + 24;
      if (v14 == v28)
      {
        *a3 = v36;
        a3[1] = v17;
        v28 = v14;
        a3[2] = v35;
      }
      else
      {
        do
        {
          v37 = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v36 - 24) = *(_OWORD *)(v14 - 24);
          *((_QWORD *)v36 - 1) = v37;
          v36 -= 24;
          v14 -= 24;
        }
        while (v14 != v28);
        *a3 = v36;
        a3[1] = v17;
        a3[2] = v35;
        if (!v28)
        {
          v18 = (char *)this + 112;
          a3[1] = v17;
          v19 = (unint64_t)a3[2];
          if ((unint64_t)v17 >= v19)
            goto LABEL_36;
          goto LABEL_33;
        }
      }
      operator delete(v28);
      v18 = (char *)this + 112;
      a3[1] = v17;
      v19 = (unint64_t)a3[2];
      if ((unint64_t)v17 >= v19)
        goto LABEL_36;
LABEL_33:
      *(_QWORD *)v17 = "codecId";
      *((_QWORD *)v17 + 1) = v18;
      *((_QWORD *)v17 + 2) = 6;
      v38 = v17 + 24;
      goto LABEL_50;
    }
  }
  v20 = 0xAAAAAAAAAAAAAAABLL * (v12 - v9) + 1;
  if (v20 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_51;
  v21 = 0xAAAAAAAAAAAAAAABLL * (v10 - v9);
  if (2 * v21 > v20)
    v20 = 2 * v21;
  if (v21 >= 0x555555555555555)
    v22 = 0xAAAAAAAAAAAAAAALL;
  else
    v22 = v20;
  if (!v22)
    goto LABEL_52;
  if (v22 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_53;
  v23 = 24 * v22;
  v24 = (char *)operator new(24 * v22);
  v25 = &v24[8 * (v12 - v9)];
  *(_QWORD *)v25 = "kind";
  *((_QWORD *)v25 + 1) = v13;
  *((_QWORD *)v25 + 2) = 6;
  v14 = v25 + 24;
  if (v12 == v9)
  {
    v27 = &v24[8 * (v12 - v9)];
  }
  else
  {
    do
    {
      v26 = *(v12 - 1);
      v27 = v25 - 24;
      *(_OWORD *)(v25 - 24) = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v25 - 1) = v26;
      v12 -= 3;
      v25 -= 24;
    }
    while (v12 != v9);
  }
  *a3 = v27;
  a3[1] = v14;
  a3[2] = &v24[v23];
  operator delete(v9);
  v15 = (char *)this + 80;
  a3[1] = v14;
  v16 = (unint64_t)a3[2];
  if ((unint64_t)v14 >= v16)
    goto LABEL_21;
LABEL_5:
  *(_QWORD *)v14 = "transportId";
  *((_QWORD *)v14 + 1) = v15;
  *((_QWORD *)v14 + 2) = 6;
  v17 = v14 + 24;
  v18 = (char *)this + 112;
  a3[1] = v17;
  v19 = (unint64_t)a3[2];
  if ((unint64_t)v17 < v19)
    goto LABEL_33;
LABEL_36:
  v39 = *a3;
  v40 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a3) >> 3);
  v41 = v40 + 1;
  if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_51:
    abort();
  v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (_QWORD)v39) >> 3);
  if (2 * v42 > v41)
    v41 = 2 * v42;
  if (v42 >= 0x555555555555555)
    v43 = 0xAAAAAAAAAAAAAAALL;
  else
    v43 = v41;
  if (!v43)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v43 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_53;
  v44 = 24 * v43;
  v45 = (char *)operator new(24 * v43);
  v46 = &v45[v44];
  v47 = &v45[24 * v40];
  *(_QWORD *)v47 = "codecId";
  *((_QWORD *)v47 + 1) = v18;
  *((_QWORD *)v47 + 2) = 6;
  v38 = v47 + 24;
  if (v17 == v39)
  {
    *a3 = v47;
    a3[1] = v38;
    v39 = v17;
    a3[2] = v46;
LABEL_49:
    operator delete(v39);
    goto LABEL_50;
  }
  do
  {
    v48 = *(_OWORD *)(v17 - 24);
    *((_QWORD *)v47 - 1) = *((_QWORD *)v17 - 1);
    *(_OWORD *)(v47 - 24) = v48;
    v47 -= 24;
    v17 -= 24;
  }
  while (v17 != v39);
  *a3 = v47;
  a3[1] = v38;
  a3[2] = v46;
  if (v39)
    goto LABEL_49;
LABEL_50:
  *v11 = v38;
}

void webrtc::RTCRtpStreamStats::~RTCRtpStreamStats(void **this)
{
  *this = off_24C0BC650;
  if (*((_BYTE *)this + 136) && *((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if (!*((_BYTE *)this + 104))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 104))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
LABEL_7:
  if (!*((_BYTE *)this + 72) || (*((char *)this + 71) & 0x80000000) == 0)
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_12:
    operator delete(this[1]);
    return;
  }
  operator delete(this[6]);
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    goto LABEL_12;
}

{
  *this = off_24C0BC650;
  if (*((_BYTE *)this + 136) && *((char *)this + 135) < 0)
  {
    operator delete(this[14]);
    if (!*((_BYTE *)this + 104))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 104))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
LABEL_7:
  if (*((_BYTE *)this + 72) && *((char *)this + 71) < 0)
  {
    operator delete(this[6]);
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_14:
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_14;
  }
  operator delete(this[1]);
  goto LABEL_14;
}

void webrtc::RTCReceivedRtpStreamStats::AttributesImpl(webrtc::RTCReceivedRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v5 = (char *)this + 144;
  webrtc::RTCRtpStreamStats::AttributesImpl(this, a2 + 2, a3);
  v6 = a3[1];
  v7 = a3[2];
  if (v6 >= v7)
  {
    v9 = *a3;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    if (0x5555555555555556 * ((v7 - v9) >> 3) > v11)
      v11 = 0x5555555555555556 * ((v7 - v9) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v9) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    if (!v11)
      goto LABEL_32;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_34;
    v12 = 24 * v11;
    v13 = (char *)operator new(24 * v11);
    v7 = &v13[v12];
    v14 = &v13[24 * v10];
    *(_QWORD *)v14 = "jitter";
    *((_QWORD *)v14 + 1) = v5;
    *((_QWORD *)v14 + 2) = 5;
    v8 = v14 + 24;
    if (v6 != v9)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v6 -= 24;
      }
      while (v6 != v9);
      v6 = v9;
    }
    *a3 = v14;
    a3[2] = v7;
    if (v6)
      operator delete(v6);
  }
  else
  {
    if (!v6)
      goto LABEL_32;
    *(_QWORD *)v6 = "jitter";
    *((_QWORD *)v6 + 1) = v5;
    *((_QWORD *)v6 + 2) = 5;
    v8 = v6 + 24;
  }
  v16 = (char *)this + 160;
  if (v8 < v7)
  {
    *(_QWORD *)v8 = "packetsLost";
    *((_QWORD *)v8 + 1) = v16;
    *((_QWORD *)v8 + 2) = 1;
    v17 = v8 + 24;
    goto LABEL_31;
  }
  v18 = *a3;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a3) >> 3);
  v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_33:
    abort();
  if (0x5555555555555556 * ((v7 - v18) >> 3) > v20)
    v20 = 0x5555555555555556 * ((v7 - v18) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v18) >> 3) >= 0x555555555555555)
    v20 = 0xAAAAAAAAAAAAAAALL;
  if (!v20)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 > 0xAAAAAAAAAAAAAAALL)
LABEL_34:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v21 = 24 * v20;
  v22 = (char *)operator new(24 * v20);
  v23 = &v22[v21];
  v24 = &v22[24 * v19];
  *(_QWORD *)v24 = "packetsLost";
  *((_QWORD *)v24 + 1) = v16;
  *((_QWORD *)v24 + 2) = 1;
  v17 = v24 + 24;
  if (v8 == v18)
  {
    *a3 = v24;
    a3[1] = v17;
    v18 = v8;
    a3[2] = v23;
LABEL_30:
    operator delete(v18);
    goto LABEL_31;
  }
  do
  {
    v25 = *(_OWORD *)(v8 - 24);
    *((_QWORD *)v24 - 1) = *((_QWORD *)v8 - 1);
    *(_OWORD *)(v24 - 24) = v25;
    v24 -= 24;
    v8 -= 24;
  }
  while (v8 != v18);
  *a3 = v24;
  a3[1] = v17;
  a3[2] = v23;
  if (v18)
    goto LABEL_30;
LABEL_31:
  a3[1] = v17;
}

void webrtc::RTCSentRtpStreamStats::AttributesImpl(webrtc::RTCSentRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v5 = (char *)this + 144;
  webrtc::RTCRtpStreamStats::AttributesImpl(this, a2 + 2, a3);
  v6 = a3[1];
  v7 = a3[2];
  if (v6 >= v7)
  {
    v9 = *a3;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    if (0x5555555555555556 * ((v7 - v9) >> 3) > v11)
      v11 = 0x5555555555555556 * ((v7 - v9) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v9) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    if (!v11)
      goto LABEL_32;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_34;
    v12 = 24 * v11;
    v13 = (char *)operator new(24 * v11);
    v7 = &v13[v12];
    v14 = &v13[24 * v10];
    *(_QWORD *)v14 = "packetsSent";
    *((_QWORD *)v14 + 1) = v5;
    *((_QWORD *)v14 + 2) = 4;
    v8 = v14 + 24;
    if (v6 != v9)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v6 -= 24;
      }
      while (v6 != v9);
      v6 = v9;
    }
    *a3 = v14;
    a3[2] = v7;
    if (v6)
      operator delete(v6);
  }
  else
  {
    if (!v6)
      goto LABEL_32;
    *(_QWORD *)v6 = "packetsSent";
    *((_QWORD *)v6 + 1) = v5;
    *((_QWORD *)v6 + 2) = 4;
    v8 = v6 + 24;
  }
  v16 = (char *)this + 160;
  if (v8 < v7)
  {
    *(_QWORD *)v8 = "bytesSent";
    *((_QWORD *)v8 + 1) = v16;
    *((_QWORD *)v8 + 2) = 4;
    v17 = v8 + 24;
    goto LABEL_31;
  }
  v18 = *a3;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a3) >> 3);
  v20 = v19 + 1;
  if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_33:
    abort();
  if (0x5555555555555556 * ((v7 - v18) >> 3) > v20)
    v20 = 0x5555555555555556 * ((v7 - v18) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v18) >> 3) >= 0x555555555555555)
    v20 = 0xAAAAAAAAAAAAAAALL;
  if (!v20)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 > 0xAAAAAAAAAAAAAAALL)
LABEL_34:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v21 = 24 * v20;
  v22 = (char *)operator new(24 * v20);
  v23 = &v22[v21];
  v24 = &v22[24 * v19];
  *(_QWORD *)v24 = "bytesSent";
  *((_QWORD *)v24 + 1) = v16;
  *((_QWORD *)v24 + 2) = 4;
  v17 = v24 + 24;
  if (v8 == v18)
  {
    *a3 = v24;
    a3[1] = v17;
    v18 = v8;
    a3[2] = v23;
LABEL_30:
    operator delete(v18);
    goto LABEL_31;
  }
  do
  {
    v25 = *(_OWORD *)(v8 - 24);
    *((_QWORD *)v24 - 1) = *((_QWORD *)v8 - 1);
    *(_OWORD *)(v24 - 24) = v25;
    v24 -= 24;
    v8 -= 24;
  }
  while (v8 != v18);
  *a3 = v24;
  a3[1] = v17;
  a3[2] = v23;
  if (v18)
    goto LABEL_30;
LABEL_31:
  a3[1] = v17;
}

__n128 webrtc::RTCInboundRtpStreamStats::copy@<Q0>(webrtc::RTCInboundRtpStreamStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  webrtc::RTCRtpStreamStats *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __n128 result;

  v4 = operator new();
  v5 = webrtc::RTCRtpStreamStats::RTCRtpStreamStats((webrtc::RTCRtpStreamStats *)v4, this);
  *((_OWORD *)v5 + 9) = *((_OWORD *)this + 9);
  *(_QWORD *)((char *)v5 + 157) = *(_QWORD *)((char *)this + 157);
  *(_QWORD *)v5 = &off_24C0BC688;
  *((_BYTE *)v5 + 168) = 0;
  v6 = (std::string *)((char *)v5 + 168);
  *(_BYTE *)(v4 + 192) = 0;
  if (*((_BYTE *)this + 192))
  {
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
    }
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 200) = 0;
  v7 = (std::string *)(v4 + 200);
  *(_BYTE *)(v4 + 224) = 0;
  if (*((_BYTE *)this + 224))
  {
    if (*((char *)this + 223) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
      *(_QWORD *)(v4 + 216) = *((_QWORD *)this + 27);
    }
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 232) = 0;
  v8 = (std::string *)(v4 + 232);
  *(_BYTE *)(v4 + 256) = 0;
  if (*((_BYTE *)this + 256))
  {
    if (*((char *)this + 255) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
      *(_QWORD *)(v4 + 248) = *((_QWORD *)this + 31);
    }
    *(_BYTE *)(v4 + 256) = 1;
  }
  *(_BYTE *)(v4 + 264) = 0;
  *(_BYTE *)(v4 + 288) = 0;
  if (*((_BYTE *)this + 288))
  {
    v9 = (std::string *)(v4 + 264);
    if (*((char *)this + 287) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 264);
      *(_QWORD *)(v4 + 280) = *((_QWORD *)this + 35);
    }
    *(_BYTE *)(v4 + 288) = 1;
  }
  memcpy((void *)(v4 + 296), (char *)this + 296, 0x239uLL);
  *(_BYTE *)(v4 + 872) = 0;
  *(_BYTE *)(v4 + 896) = 0;
  if (*((_BYTE *)this + 896))
  {
    v10 = (std::string *)(v4 + 872);
    if (*((char *)this + 895) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 109), *((_QWORD *)this + 110));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 872);
      *(_QWORD *)(v4 + 888) = *((_QWORD *)this + 111);
    }
    *(_BYTE *)(v4 + 896) = 1;
  }
  *(_OWORD *)(v4 + 904) = *(_OWORD *)((char *)this + 904);
  *(_BYTE *)(v4 + 920) = 0;
  *(_BYTE *)(v4 + 944) = 0;
  if (*((_BYTE *)this + 944))
  {
    v11 = (std::string *)(v4 + 920);
    if (*((char *)this + 943) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)this + 115), *((_QWORD *)this + 116));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 920);
      *(_QWORD *)(v4 + 936) = *((_QWORD *)this + 117);
    }
    *(_BYTE *)(v4 + 944) = 1;
  }
  *(_BYTE *)(v4 + 984) = *((_BYTE *)this + 984);
  v12 = *(_OWORD *)((char *)this + 968);
  *(_OWORD *)(v4 + 952) = *(_OWORD *)((char *)this + 952);
  *(_OWORD *)(v4 + 968) = v12;
  *(_BYTE *)(v4 + 992) = 0;
  *(_BYTE *)(v4 + 1016) = 0;
  if (*((_BYTE *)this + 1016))
  {
    v13 = (std::string *)(v4 + 992);
    if (*((char *)this + 1015) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)this + 124), *((_QWORD *)this + 125));
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *((_OWORD *)this + 62);
      *(_QWORD *)(v4 + 1008) = *((_QWORD *)this + 126);
    }
    *(_BYTE *)(v4 + 1016) = 1;
  }
  *(_OWORD *)(v4 + 1056) = *((_OWORD *)this + 66);
  *(_OWORD *)(v4 + 1072) = *((_OWORD *)this + 67);
  *(_OWORD *)(v4 + 1088) = *((_OWORD *)this + 68);
  *(_OWORD *)(v4 + 1024) = *((_OWORD *)this + 64);
  *(_OWORD *)(v4 + 1040) = *((_OWORD *)this + 65);
  result = *(__n128 *)((char *)this + 1097);
  *(__n128 *)(v4 + 1097) = result;
  *a2 = v4;
  return result;
}

const char *webrtc::RTCInboundRtpStreamStats::type(webrtc::RTCInboundRtpStreamStats *this)
{
  return "inbound-rtp";
}

void webrtc::RTCInboundRtpStreamStats::AttributesImpl(webrtc::RTCInboundRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char **v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  char *v26;
  _QWORD v27[185];

  v27[183] = *MEMORY[0x24BDAC8D0];
  v27[0] = "playoutId";
  v27[1] = (char *)this + 168;
  v27[2] = 6;
  v27[3] = "trackIdentifier";
  v27[4] = (char *)this + 200;
  v27[5] = 6;
  v27[6] = "mid";
  v27[7] = (char *)this + 232;
  v27[8] = 6;
  v27[9] = "remoteId";
  v27[10] = (char *)this + 264;
  v27[11] = 6;
  v27[12] = "packetsReceived";
  v27[13] = (char *)this + 296;
  v27[14] = 2;
  v27[15] = "packetsDiscarded";
  v27[16] = (char *)this + 304;
  v27[17] = 4;
  v27[18] = "fecPacketsReceived";
  v27[19] = (char *)this + 320;
  v27[20] = 4;
  v27[21] = "fecBytesReceived";
  v27[22] = (char *)this + 336;
  v27[23] = 4;
  v27[24] = "fecPacketsDiscarded";
  v27[25] = (char *)this + 352;
  v27[26] = 4;
  v27[27] = "fecSsrc";
  v27[28] = (char *)this + 368;
  v27[29] = 2;
  v27[30] = "bytesReceived";
  v27[31] = (char *)this + 376;
  v27[32] = 4;
  v27[33] = "headerBytesReceived";
  v27[34] = (char *)this + 392;
  v27[35] = 4;
  v27[36] = "retransmittedPacketsReceived";
  v27[37] = (char *)this + 408;
  v27[38] = 4;
  v27[39] = "retransmittedBytesReceived";
  v27[40] = (char *)this + 424;
  v27[41] = 4;
  v27[42] = "rtxSsrc";
  v27[43] = (char *)this + 440;
  v27[44] = 2;
  v27[45] = "lastPacketReceivedTimestamp";
  v27[46] = (char *)this + 448;
  v27[47] = 5;
  v27[48] = "jitterBufferDelay";
  v27[49] = (char *)this + 464;
  v27[50] = 5;
  v27[51] = "jitterBufferTargetDelay";
  v27[52] = (char *)this + 480;
  v27[53] = 5;
  v27[54] = "jitterBufferMinimumDelay";
  v27[55] = (char *)this + 496;
  v27[56] = 5;
  v27[57] = "jitterBufferEmittedCount";
  v27[58] = (char *)this + 512;
  v27[59] = 4;
  v27[60] = "totalSamplesReceived";
  v27[61] = (char *)this + 528;
  v27[62] = 4;
  v27[63] = "concealedSamples";
  v27[64] = (char *)this + 544;
  v27[65] = 4;
  v27[66] = "silentConcealedSamples";
  v27[67] = (char *)this + 560;
  v27[68] = 4;
  v27[69] = "concealmentEvents";
  v27[70] = (char *)this + 576;
  v27[71] = 4;
  v27[72] = "insertedSamplesForDeceleration";
  v27[73] = (char *)this + 592;
  v27[74] = 4;
  v27[75] = "removedSamplesForAcceleration";
  v27[76] = (char *)this + 608;
  v27[77] = 4;
  v27[78] = "audioLevel";
  v27[79] = (char *)this + 624;
  v27[80] = 5;
  v27[81] = "totalAudioEnergy";
  v27[82] = (char *)this + 640;
  v27[83] = 5;
  v27[84] = "totalSamplesDuration";
  v27[85] = (char *)this + 656;
  v27[86] = 5;
  v27[87] = "framesReceived";
  v27[88] = (char *)this + 672;
  v27[89] = 2;
  v27[90] = "frameWidth";
  v27[91] = (char *)this + 680;
  v27[92] = 2;
  v27[93] = "frameHeight";
  v27[94] = (char *)this + 688;
  v27[95] = 2;
  v27[96] = "framesPerSecond";
  v27[97] = (char *)this + 696;
  v27[98] = 5;
  v27[99] = "framesDecoded";
  v27[100] = (char *)this + 712;
  v27[101] = 2;
  v27[102] = "keyFramesDecoded";
  v27[103] = (char *)this + 720;
  v27[104] = 2;
  v27[105] = "framesDropped";
  v27[106] = (char *)this + 728;
  v27[107] = 2;
  v27[108] = "totalDecodeTime";
  v27[109] = (char *)this + 736;
  v27[110] = 5;
  v27[111] = "totalProcessingDelay";
  v27[112] = (char *)this + 752;
  v27[113] = 5;
  v27[114] = "totalAssemblyTime";
  v27[115] = (char *)this + 768;
  v27[116] = 5;
  v27[117] = "framesAssembledFromMultiplePackets";
  v27[118] = (char *)this + 784;
  v27[119] = 2;
  v27[120] = "totalInterFrameDelay";
  v27[121] = (char *)this + 792;
  v27[122] = 5;
  v27[123] = "totalSquaredInterFrameDelay";
  v27[124] = (char *)this + 808;
  v27[125] = 5;
  v27[126] = "pauseCount";
  v27[127] = (char *)this + 824;
  v27[128] = 2;
  v27[129] = "totalPausesDuration";
  v27[130] = (char *)this + 832;
  v27[131] = 5;
  v27[132] = "freezeCount";
  v27[133] = (char *)this + 848;
  v27[134] = 2;
  v27[135] = "totalFreezesDuration";
  v27[136] = (char *)this + 856;
  v27[137] = 5;
  v27[138] = "contentType";
  v27[139] = (char *)this + 872;
  v27[140] = 6;
  v27[141] = "estimatedPlayoutTimestamp";
  v27[142] = (char *)this + 904;
  v27[143] = 5;
  v27[144] = "decoderImplementation";
  v27[145] = (char *)this + 920;
  v27[146] = 6;
  v27[147] = "firCount";
  v27[148] = (char *)this + 952;
  v27[149] = 2;
  v27[150] = "pliCount";
  v27[151] = (char *)this + 960;
  v27[152] = 2;
  v27[153] = "nackCount";
  v27[154] = (char *)this + 968;
  v27[155] = 2;
  v27[156] = "qpSum";
  v27[157] = (char *)this + 976;
  v27[158] = 4;
  v27[159] = "googTimingFrameInfo";
  v27[160] = (char *)this + 992;
  v27[161] = 6;
  v27[162] = "powerEfficientDecoder";
  v27[163] = (char *)this + 1024;
  v27[164] = 0;
  v27[165] = "jitterBufferFlushes";
  v27[166] = (char *)this + 1032;
  v27[167] = 4;
  v27[168] = "delayedPacketOutageSamples";
  v27[169] = (char *)this + 1048;
  v27[170] = 4;
  v27[171] = "relativePacketArrivalDelay";
  v27[172] = (char *)this + 1064;
  v27[173] = 5;
  v27[174] = "interruptionCount";
  v27[175] = (char *)this + 1080;
  v27[176] = 2;
  v27[177] = "totalInterruptionDuration";
  v27[178] = (char *)this + 1088;
  v27[179] = 5;
  v27[180] = "minPlayoutDelay";
  v27[181] = (char *)this + 1104;
  v27[182] = 5;
  webrtc::RTCReceivedRtpStreamStats::AttributesImpl(this, a2 + 61, a3);
  v12 = 0;
  v14 = a3[1];
  v13 = a3[2];
  v15 = a3;
  v16 = *a3;
  do
  {
    while (1)
    {
      v17 = &v27[3 * v12];
      v18 = v17[2];
      if (v18 >= 0x10)
        goto LABEL_24;
      v19 = v17[1];
      v20 = v27[3 * v12];
      if (v14 < v13)
        break;
      v21 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v16) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v13 - v16) >> 3) > v21)
        v21 = 0x5555555555555556 * ((v13 - v16) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v16) >> 3) >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      if (!v21)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v22 = 24 * v21;
      v4 = (absl::variant_internal *)operator new(24 * v21);
      v23 = (_QWORD *)((char *)v4 + 8 * ((v14 - v16) >> 3));
      *v23 = v20;
      v23[1] = v19;
      v23[2] = v18;
      if (v14 != v16)
      {
        v24 = (char *)v4 + 8 * ((v14 - v16) >> 3);
        do
        {
          v25 = *(_OWORD *)(v14 - 24);
          v26 = v24 - 24;
          *((_QWORD *)v24 - 1) = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v24 - 24) = v25;
          v14 -= 24;
          v24 -= 24;
        }
        while (v14 != v16);
        v13 = (char *)v4 + v22;
        v14 = (char *)(v23 + 3);
        *v15 = v26;
        v15[1] = (char *)(v23 + 3);
        v15[2] = v13;
        if (!v16)
          goto LABEL_2;
LABEL_21:
        operator delete(v16);
        goto LABEL_2;
      }
      v26 = (char *)v4 + 8 * ((v14 - v16) >> 3);
      v13 = (char *)v4 + v22;
      v14 = (char *)(v23 + 3);
      *v15 = v26;
      v15[1] = (char *)(v23 + 3);
      v15[2] = v13;
      if (v16)
        goto LABEL_21;
LABEL_2:
      v16 = v26;
      v15[1] = v14;
      if (++v12 == 61)
        return;
    }
    if (!v14)
      goto LABEL_23;
    *(_QWORD *)v14 = v20;
    *((_QWORD *)v14 + 1) = v19;
    *((_QWORD *)v14 + 2) = v18;
    v14 += 24;
    v15[1] = v14;
    ++v12;
  }
  while (v12 != 61);
}

uint64_t webrtc::RTCInboundRtpStreamStats::RTCInboundRtpStreamStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  int v7;
  std::string *v8;
  _BYTE v10[7];

  v6 = *(std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v7 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C0BC140;
  v8 = (std::string *)(a1 + 8);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v8, v6, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 27) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 31) = v7;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = off_24C0BC650;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (v7 < 0)
    operator delete(v6);
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_QWORD *)a1 = &off_24C0BC688;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 300) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 444) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_BYTE *)(a1 + 568) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 676) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 684) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 692) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 716) = 0;
  *(_BYTE *)(a1 + 720) = 0;
  *(_BYTE *)(a1 + 724) = 0;
  *(_BYTE *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 732) = 0;
  *(_BYTE *)(a1 + 736) = 0;
  *(_BYTE *)(a1 + 744) = 0;
  *(_BYTE *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_BYTE *)(a1 + 776) = 0;
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 788) = 0;
  *(_BYTE *)(a1 + 792) = 0;
  *(_BYTE *)(a1 + 800) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 828) = 0;
  *(_BYTE *)(a1 + 832) = 0;
  *(_BYTE *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 852) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 864) = 0;
  *(_BYTE *)(a1 + 872) = 0;
  *(_BYTE *)(a1 + 896) = 0;
  *(_BYTE *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 912) = 0;
  *(_BYTE *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 956) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  *(_BYTE *)(a1 + 964) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_BYTE *)(a1 + 972) = 0;
  *(_BYTE *)(a1 + 976) = 0;
  *(_BYTE *)(a1 + 984) = 0;
  *(_BYTE *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_WORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1080) = 0;
  *(_BYTE *)(a1 + 1084) = 0;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_BYTE *)(a1 + 1112) = 0;
  return a1;
}

void webrtc::RTCInboundRtpStreamStats::~RTCInboundRtpStreamStats(void **this)
{
  if (*((_BYTE *)this + 1016) && *((char *)this + 1015) < 0)
  {
    operator delete(this[124]);
    if (!*((_BYTE *)this + 944))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 944))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 943) < 0)
    operator delete(this[115]);
LABEL_7:
  if (*((_BYTE *)this + 896) && *((char *)this + 895) < 0)
  {
    operator delete(this[109]);
    if (!*((_BYTE *)this + 288))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 288))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
LABEL_13:
  if (*((_BYTE *)this + 256) && *((char *)this + 255) < 0)
  {
    operator delete(this[29]);
    if (!*((_BYTE *)this + 224))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 224))
  {
    goto LABEL_19;
  }
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
LABEL_19:
  if (*((_BYTE *)this + 192) && *((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_25;
  }
  else
  {
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_25;
  }
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
LABEL_25:
  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if (!*((_BYTE *)this + 72))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 72))
  {
    goto LABEL_31;
  }
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
LABEL_31:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  webrtc::RTCInboundRtpStreamStats::~RTCInboundRtpStreamStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RTCOutboundRtpStreamStats::copy(webrtc::RTCOutboundRtpStreamStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  webrtc::RTCRtpStreamStats *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  uint64_t **v16;
  char *v17;
  const void **v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  _QWORD *v23;
  size_t v24;
  size_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  int v29;
  uint64_t **v30;
  uint64_t v31;
  size_t v32;
  const void *v33;
  BOOL v34;
  char v35;
  const void *v36;
  size_t v37;
  const void **v38;
  size_t v39;
  const void *v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  size_t v45;
  size_t v46;
  int v47;
  char *v48;
  uint64_t *v49;
  std::string *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  std::string *v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  webrtc::RTCOutboundRtpStreamStats *v58;
  uint64_t *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;

  v4 = operator new();
  v5 = webrtc::RTCRtpStreamStats::RTCRtpStreamStats((webrtc::RTCRtpStreamStats *)v4, this);
  *((_OWORD *)v5 + 9) = *((_OWORD *)this + 9);
  *(_OWORD *)((char *)v5 + 153) = *(_OWORD *)((char *)this + 153);
  *(_QWORD *)v5 = &off_24C0BC6C0;
  *((_BYTE *)v5 + 176) = 0;
  v6 = (std::string *)((char *)v5 + 176);
  *(_BYTE *)(v4 + 200) = 0;
  if (*((_BYTE *)this + 200))
  {
    if (*((char *)this + 199) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
    }
    *(_BYTE *)(v4 + 200) = 1;
  }
  *(_BYTE *)(v4 + 208) = 0;
  v7 = (std::string *)(v4 + 208);
  *(_BYTE *)(v4 + 232) = 0;
  if (*((_BYTE *)this + 232))
  {
    if (*((char *)this + 231) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *((_OWORD *)this + 13);
      *(_QWORD *)(v4 + 224) = *((_QWORD *)this + 28);
    }
    *(_BYTE *)(v4 + 232) = 1;
  }
  *(_BYTE *)(v4 + 240) = 0;
  v8 = (std::string *)(v4 + 240);
  *(_BYTE *)(v4 + 264) = 0;
  if (*((_BYTE *)this + 264))
  {
    if (*((char *)this + 263) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 30), *((_QWORD *)this + 31));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *((_OWORD *)this + 15);
      *(_QWORD *)(v4 + 256) = *((_QWORD *)this + 32);
    }
    *(_BYTE *)(v4 + 264) = 1;
  }
  *(_BYTE *)(v4 + 272) = 0;
  *(_BYTE *)(v4 + 296) = 0;
  if (*((_BYTE *)this + 296))
  {
    v9 = (std::string *)(v4 + 272);
    if (*((char *)this + 295) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 34), *((_QWORD *)this + 35));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *((_OWORD *)this + 17);
      *(_QWORD *)(v4 + 288) = *((_QWORD *)this + 36);
    }
    *(_BYTE *)(v4 + 296) = 1;
  }
  v10 = *((_OWORD *)this + 28);
  *(_OWORD *)(v4 + 432) = *((_OWORD *)this + 27);
  *(_OWORD *)(v4 + 448) = v10;
  v11 = *((_OWORD *)this + 24);
  *(_OWORD *)(v4 + 368) = *((_OWORD *)this + 23);
  *(_OWORD *)(v4 + 384) = v11;
  v12 = *((_OWORD *)this + 26);
  *(_OWORD *)(v4 + 400) = *((_OWORD *)this + 25);
  *(_OWORD *)(v4 + 416) = v12;
  v13 = *((_OWORD *)this + 20);
  *(_OWORD *)(v4 + 304) = *((_OWORD *)this + 19);
  *(_OWORD *)(v4 + 320) = v13;
  v14 = *((_OWORD *)this + 22);
  *(_OWORD *)(v4 + 336) = *((_OWORD *)this + 21);
  *(_OWORD *)(v4 + 352) = v14;
  *(_OWORD *)(v4 + 457) = *(_OWORD *)((char *)this + 457);
  *(_BYTE *)(v4 + 480) = 0;
  *(_BYTE *)(v4 + 504) = 0;
  if (*((_BYTE *)this + 504))
  {
    v15 = (std::string *)(v4 + 480);
    if (*((char *)this + 503) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)this + 60), *((_QWORD *)this + 61));
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *((_OWORD *)this + 30);
      *(_QWORD *)(v4 + 496) = *((_QWORD *)this + 62);
    }
    *(_BYTE *)(v4 + 504) = 1;
  }
  *(_BYTE *)(v4 + 512) = 0;
  *(_BYTE *)(v4 + 536) = 0;
  if (*((_BYTE *)this + 536))
  {
    v58 = this;
    v59 = a2;
    v16 = (uint64_t **)(v4 + 520);
    *(_QWORD *)(v4 + 528) = 0;
    *(_QWORD *)(v4 + 520) = 0;
    *(_QWORD *)(v4 + 512) = v4 + 520;
    v17 = (char *)*((_QWORD *)this + 64);
    v61 = (char *)this + 520;
    if (v17 != (char *)this + 520)
    {
      v62 = v4;
      v60 = v4 + 520;
      do
      {
        v18 = (const void **)(v17 + 32);
        v19 = *(_QWORD *)(v4 + 520);
        v20 = v16;
        if (*(uint64_t ***)(v4 + 512) != v16)
        {
          v21 = *(uint64_t ***)(v4 + 520);
          v22 = v16;
          if (v19)
          {
            do
            {
              v20 = v21;
              v21 = (uint64_t **)v21[1];
            }
            while (v21);
          }
          else
          {
            do
            {
              v20 = (uint64_t **)v22[2];
              v34 = *v20 == (uint64_t *)v22;
              v22 = v20;
            }
            while (v34);
          }
          v23 = v20 + 4;
          if (*((char *)v20 + 55) < 0)
          {
            v24 = (size_t)v20[5];
            if ((v24 & 0x8000000000000000) != 0 || (v23 = (_QWORD *)*v23, v24) && !v23)
            {
LABEL_126:
              __break(1u);
              return;
            }
          }
          else
          {
            v24 = *((unsigned __int8 *)v20 + 55);
          }
          v25 = v17[55];
          v26 = v17 + 32;
          v27 = v25;
          if (v17[55] < 0)
          {
            v27 = *((_QWORD *)v17 + 5);
            if ((v27 & 0x8000000000000000) != 0)
              goto LABEL_126;
            v26 = *v18;
            if (v27)
            {
              if (!v26)
                goto LABEL_126;
            }
          }
          if (v27 >= v24)
            v28 = v24;
          else
            v28 = v27;
          v29 = memcmp(v23, v26, v28);
          if (v29)
          {
            if ((v29 & 0x80000000) == 0)
              goto LABEL_49;
          }
          else if (v24 >= v27)
          {
LABEL_49:
            v30 = v16;
            v31 = (uint64_t)v16;
            if (v19)
            {
              v33 = (const void *)*((_QWORD *)v17 + 4);
              v32 = *((_QWORD *)v17 + 5);
              if (v32)
                v34 = v33 == 0;
              else
                v34 = 0;
              v35 = !v34;
              v63 = v35;
              while (1)
              {
                v31 = v19;
                v36 = v17 + 32;
                v37 = v25;
                if ((v25 & 0x80) != 0)
                {
                  if ((v32 & 0x8000000000000000) != 0)
                    goto LABEL_126;
                  v36 = v33;
                  v37 = v32;
                  if ((v63 & 1) == 0)
                    goto LABEL_126;
                }
                v38 = (const void **)(v19 + 32);
                v39 = *(unsigned __int8 *)(v31 + 55);
                v40 = (const void *)(v31 + 32);
                v41 = v39;
                if (*(char *)(v31 + 55) < 0)
                {
                  v41 = *(_QWORD *)(v31 + 40);
                  if ((v41 & 0x8000000000000000) != 0)
                    goto LABEL_126;
                  v40 = *v38;
                  if (v41)
                  {
                    if (!v40)
                      goto LABEL_126;
                  }
                }
                if (v41 >= v37)
                  v42 = v37;
                else
                  v42 = v41;
                v43 = memcmp(v36, v40, v42);
                if (v43)
                {
                  if (v43 < 0)
                    goto LABEL_57;
LABEL_72:
                  if ((v39 & 0x80) != 0)
                  {
                    v39 = *(_QWORD *)(v31 + 40);
                    if ((v39 & 0x8000000000000000) != 0)
                      goto LABEL_126;
                    v38 = (const void **)*v38;
                    if (v39)
                    {
                      if (!v38)
                        goto LABEL_126;
                    }
                  }
                  v44 = v17 + 32;
                  v45 = v25;
                  if ((v25 & 0x80) != 0)
                  {
                    if ((v32 & 0x8000000000000000) != 0)
                      goto LABEL_126;
                    v44 = v33;
                    v45 = v32;
                    if ((v63 & 1) == 0)
                      goto LABEL_126;
                  }
                  if (v45 >= v39)
                    v46 = v39;
                  else
                    v46 = v45;
                  v47 = memcmp(v38, v44, v46);
                  if (v47)
                  {
                    if ((v47 & 0x80000000) == 0)
                      goto LABEL_96;
                  }
                  else if (v39 >= v45)
                  {
                    goto LABEL_96;
                  }
                  v19 = *(_QWORD *)(v31 + 8);
                  if (!v19)
                  {
                    v30 = (uint64_t **)(v31 + 8);
                    goto LABEL_98;
                  }
                }
                else
                {
                  if (v37 >= v41)
                    goto LABEL_72;
LABEL_57:
                  v19 = *(_QWORD *)v31;
                  v30 = (uint64_t **)v31;
                  if (!*(_QWORD *)v31)
                    goto LABEL_98;
                }
              }
            }
            goto LABEL_98;
          }
        }
        if (v19)
          v31 = (uint64_t)v20;
        else
          v31 = (uint64_t)v16;
        if (v19)
          v30 = v20 + 1;
        else
          v30 = v16;
        if (*v30)
        {
LABEL_96:
          v48 = (char *)*((_QWORD *)v17 + 1);
          if (!v48)
            goto LABEL_106;
          goto LABEL_104;
        }
LABEL_98:
        v49 = (uint64_t *)operator new(0x40uLL);
        v50 = (std::string *)(v49 + 4);
        if (v17[55] < 0)
        {
          std::string::__init_copy_ctor_external(v50, *((const std::string::value_type **)v17 + 4), *((_QWORD *)v17 + 5));
        }
        else
        {
          v51 = *(_OWORD *)v18;
          v49[6] = *((_QWORD *)v17 + 6);
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
        }
        v49[7] = *((_QWORD *)v17 + 7);
        *v49 = 0;
        v49[1] = 0;
        v49[2] = v31;
        *v30 = v49;
        v52 = **(_QWORD **)(v62 + 512);
        if (v52)
        {
          *(_QWORD *)(v62 + 512) = v52;
          v49 = *v30;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v62 + 520), v49);
        ++*(_QWORD *)(v62 + 528);
        v48 = (char *)*((_QWORD *)v17 + 1);
        if (!v48)
        {
          do
          {
LABEL_106:
            v53 = (char *)*((_QWORD *)v17 + 2);
            v34 = *(_QWORD *)v53 == (_QWORD)v17;
            v17 = v53;
          }
          while (!v34);
          goto LABEL_29;
        }
        do
        {
LABEL_104:
          v53 = v48;
          v48 = *(char **)v48;
        }
        while (v48);
LABEL_29:
        v17 = v53;
        v4 = v62;
        v16 = (uint64_t **)v60;
      }
      while (v53 != v61);
    }
    *(_BYTE *)(v4 + 536) = 1;
    this = v58;
    a2 = v59;
  }
  *(_QWORD *)(v4 + 544) = *((_QWORD *)this + 68);
  *(_BYTE *)(v4 + 552) = 0;
  *(_BYTE *)(v4 + 576) = 0;
  if (*((_BYTE *)this + 576))
  {
    v54 = (std::string *)(v4 + 552);
    if (*((char *)this + 575) < 0)
    {
      std::string::__init_copy_ctor_external(v54, *((const std::string::value_type **)this + 69), *((_QWORD *)this + 70));
    }
    else
    {
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 552);
      *(_QWORD *)(v4 + 568) = *((_QWORD *)this + 71);
    }
    *(_BYTE *)(v4 + 576) = 1;
  }
  *(_BYTE *)(v4 + 584) = 0;
  *(_BYTE *)(v4 + 608) = 0;
  if (*((_BYTE *)this + 608))
  {
    v55 = (std::string *)(v4 + 584);
    if (*((char *)this + 607) < 0)
    {
      std::string::__init_copy_ctor_external(v55, *((const std::string::value_type **)this + 73), *((_QWORD *)this + 74));
    }
    else
    {
      *(_OWORD *)&v55->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 584);
      *(_QWORD *)(v4 + 600) = *((_QWORD *)this + 75);
    }
    *(_BYTE *)(v4 + 608) = 1;
  }
  v56 = *(_OWORD *)((char *)this + 632);
  *(_OWORD *)(v4 + 616) = *(_OWORD *)((char *)this + 616);
  *(_OWORD *)(v4 + 632) = v56;
  *(_OWORD *)(v4 + 644) = *(_OWORD *)((char *)this + 644);
  *(_BYTE *)(v4 + 664) = 0;
  *(_BYTE *)(v4 + 688) = 0;
  if (*((_BYTE *)this + 688))
  {
    v57 = (std::string *)(v4 + 664);
    if (*((char *)this + 687) < 0)
    {
      std::string::__init_copy_ctor_external(v57, *((const std::string::value_type **)this + 83), *((_QWORD *)this + 84));
    }
    else
    {
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 664);
      *(_QWORD *)(v4 + 680) = *((_QWORD *)this + 85);
    }
    *(_BYTE *)(v4 + 688) = 1;
  }
  *(_QWORD *)(v4 + 696) = *((_QWORD *)this + 87);
  *a2 = v4;
}

const char *webrtc::RTCOutboundRtpStreamStats::type(webrtc::RTCOutboundRtpStreamStats *this)
{
  return "outbound-rtp";
}

void webrtc::RTCOutboundRtpStreamStats::AttributesImpl(webrtc::RTCOutboundRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  _QWORD v26[95];

  v26[93] = *MEMORY[0x24BDAC8D0];
  v26[0] = "mediaSourceId";
  v26[1] = (char *)this + 176;
  v26[2] = 6;
  v26[3] = "remoteId";
  v26[4] = (char *)this + 208;
  v26[5] = 6;
  v26[6] = "mid";
  v26[7] = (char *)this + 240;
  v26[8] = 6;
  v26[9] = "rid";
  v26[10] = (char *)this + 272;
  v26[11] = 6;
  v26[12] = "retransmittedPacketsSent";
  v26[13] = (char *)this + 304;
  v26[14] = 4;
  v26[15] = "headerBytesSent";
  v26[16] = (char *)this + 320;
  v26[17] = 4;
  v26[18] = "retransmittedBytesSent";
  v26[19] = (char *)this + 336;
  v26[20] = 4;
  v26[21] = "targetBitrate";
  v26[22] = (char *)this + 352;
  v26[23] = 5;
  v26[24] = "framesEncoded";
  v26[25] = (char *)this + 368;
  v26[26] = 2;
  v26[27] = "keyFramesEncoded";
  v26[28] = (char *)this + 376;
  v26[29] = 2;
  v26[30] = "totalEncodeTime";
  v26[31] = (char *)this + 384;
  v26[32] = 5;
  v26[33] = "totalEncodedBytesTarget";
  v26[34] = (char *)this + 400;
  v26[35] = 4;
  v26[36] = "frameWidth";
  v26[37] = (char *)this + 416;
  v26[38] = 2;
  v26[39] = "frameHeight";
  v26[40] = (char *)this + 424;
  v26[41] = 2;
  v26[42] = "framesPerSecond";
  v26[43] = (char *)this + 432;
  v26[44] = 5;
  v26[45] = "framesSent";
  v26[46] = (char *)this + 448;
  v26[47] = 2;
  v26[48] = "hugeFramesSent";
  v26[49] = (char *)this + 456;
  v26[50] = 2;
  v26[51] = "totalPacketSendDelay";
  v26[52] = (char *)this + 464;
  v26[53] = 5;
  v26[54] = "qualityLimitationReason";
  v26[55] = (char *)this + 480;
  v26[56] = 6;
  v26[57] = "qualityLimitationDurations";
  v26[58] = (char *)this + 512;
  v26[59] = 15;
  v26[60] = "qualityLimitationResolutionChanges";
  v26[61] = (char *)this + 544;
  v26[62] = 2;
  v26[63] = "contentType";
  v26[64] = (char *)this + 552;
  v26[65] = 6;
  v26[66] = "encoderImplementation";
  v26[67] = (char *)this + 584;
  v26[68] = 6;
  v26[69] = "firCount";
  v26[70] = (char *)this + 616;
  v26[71] = 2;
  v26[72] = "pliCount";
  v26[73] = (char *)this + 624;
  v26[74] = 2;
  v26[75] = "nackCount";
  v26[76] = (char *)this + 632;
  v26[77] = 2;
  v26[78] = "qpSum";
  v26[79] = (char *)this + 640;
  v26[80] = 4;
  v26[81] = "active";
  v26[82] = (char *)this + 656;
  v26[83] = 0;
  v26[84] = "powerEfficientEncoder";
  v26[85] = (char *)this + 658;
  v26[86] = 0;
  v26[87] = "scalabilityMode";
  v26[88] = (char *)this + 664;
  v26[89] = 6;
  v26[90] = "rtxSsrc";
  v26[91] = (char *)this + 696;
  v26[92] = 2;
  webrtc::RTCSentRtpStreamStats::AttributesImpl(this, a2 + 31, a3);
  v12 = 0;
  v14 = a3[1];
  v13 = a3[2];
  v15 = *a3;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v12];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_24;
      v18 = v16[1];
      v19 = v26[3 * v12];
      if (v14 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v13 - v15) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      v4 = (absl::variant_internal *)operator new(24 * v20);
      v22 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v14 != v15)
      {
        v23 = (char *)v4 + 8 * ((v14 - v15) >> 3);
        do
        {
          v24 = *(_OWORD *)(v14 - 24);
          v25 = v23 - 24;
          *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v14 -= 24;
          v23 -= 24;
        }
        while (v14 != v15);
        v13 = (char *)v4 + v21;
        v14 = v22 + 24;
        *a3 = v25;
        a3[1] = v22 + 24;
        a3[2] = v13;
        if (!v15)
          goto LABEL_2;
LABEL_21:
        operator delete(v15);
        goto LABEL_2;
      }
      v25 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      v13 = (char *)v4 + v21;
      v14 = v22 + 24;
      *a3 = v22;
      a3[1] = v22 + 24;
      a3[2] = v13;
      if (v15)
        goto LABEL_21;
LABEL_2:
      v15 = v25;
      a3[1] = v14;
      if (++v12 == 31)
        return;
    }
    if (!v14)
      goto LABEL_23;
    *(_QWORD *)v14 = v19;
    *((_QWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 2) = v17;
    v14 += 24;
    a3[1] = v14;
    ++v12;
  }
  while (v12 != 31);
}

uint64_t webrtc::RTCOutboundRtpStreamStats::RTCOutboundRtpStreamStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  int v7;
  std::string *v8;
  _BYTE v10[7];

  v6 = *(std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v7 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C0BC140;
  v8 = (std::string *)(a1 + 8);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v8, v6, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 27) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 31) = v7;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = off_24C0BC650;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (v7 < 0)
    operator delete(v6);
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)a1 = &off_24C0BC6C0;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 380) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 420) = 0;
  *(_BYTE *)(a1 + 424) = 0;
  *(_BYTE *)(a1 + 428) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_BYTE *)(a1 + 460) = 0;
  *(_BYTE *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 584) = 0;
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 620) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 628) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 636) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_BYTE *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  return a1;
}

void webrtc::RTCOutboundRtpStreamStats::~RTCOutboundRtpStreamStats(webrtc::RTCOutboundRtpStreamStats *this)
{
  if (*((_BYTE *)this + 688) && *((char *)this + 687) < 0)
  {
    operator delete(*((void **)this + 83));
    if (!*((_BYTE *)this + 608))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 608))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
LABEL_7:
  if (*((_BYTE *)this + 576) && *((char *)this + 575) < 0)
  {
    operator delete(*((void **)this + 69));
    if (!*((_BYTE *)this + 536))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 536))
LABEL_10:
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 512, *((char **)this + 65));
LABEL_11:
  if (*((_BYTE *)this + 504) && *((char *)this + 503) < 0)
  {
    operator delete(*((void **)this + 60));
    if (!*((_BYTE *)this + 296))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 296))
  {
    goto LABEL_19;
  }
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
LABEL_19:
  if (*((_BYTE *)this + 264) && *((char *)this + 263) < 0)
  {
    operator delete(*((void **)this + 30));
    if (!*((_BYTE *)this + 232))
      goto LABEL_25;
  }
  else if (!*((_BYTE *)this + 232))
  {
    goto LABEL_25;
  }
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
LABEL_25:
  if (*((_BYTE *)this + 200) && *((char *)this + 199) < 0)
  {
    operator delete(*((void **)this + 22));
    *(_QWORD *)this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_31;
  }
  else
  {
    *(_QWORD *)this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_31;
  }
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
LABEL_31:
  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
  {
    operator delete(*((void **)this + 10));
    if (!*((_BYTE *)this + 72))
      goto LABEL_37;
  }
  else if (!*((_BYTE *)this + 72))
  {
    goto LABEL_37;
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
LABEL_37:
  *(_QWORD *)this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  webrtc::RTCOutboundRtpStreamStats::~RTCOutboundRtpStreamStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::RTCRemoteInboundRtpStreamStats::copy@<Q0>(webrtc::RTCRemoteInboundRtpStreamStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  webrtc::RTCRtpStreamStats *v5;
  std::string *v6;
  __n128 result;

  v4 = operator new();
  v5 = webrtc::RTCRtpStreamStats::RTCRtpStreamStats((webrtc::RTCRtpStreamStats *)v4, this);
  *((_OWORD *)v5 + 9) = *((_OWORD *)this + 9);
  *(_QWORD *)((char *)v5 + 157) = *(_QWORD *)((char *)this + 157);
  *(_QWORD *)v5 = &off_24C0BC6F8;
  *((_BYTE *)v5 + 168) = 0;
  v6 = (std::string *)((char *)v5 + 168);
  *(_BYTE *)(v4 + 192) = 0;
  if (*((_BYTE *)this + 192))
  {
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
    }
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_OWORD *)(v4 + 200) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)((char *)this + 216);
  result = *(__n128 *)((char *)this + 232);
  *(__n128 *)(v4 + 232) = result;
  *(_QWORD *)(v4 + 245) = *(_QWORD *)((char *)this + 245);
  *a2 = v4;
  return result;
}

const char *webrtc::RTCRemoteInboundRtpStreamStats::type(webrtc::RTCRemoteInboundRtpStreamStats *this)
{
  return "remote-inbound-rtp";
}

void webrtc::RTCRemoteInboundRtpStreamStats::AttributesImpl(webrtc::RTCRemoteInboundRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  _QWORD v26[16];

  v26[15] = *MEMORY[0x24BDAC8D0];
  v26[0] = "localId";
  v26[1] = (char *)this + 168;
  v26[2] = 6;
  v26[3] = "roundTripTime";
  v26[4] = (char *)this + 200;
  v26[5] = 5;
  v26[6] = "fractionLost";
  v26[7] = (char *)this + 216;
  v26[8] = 5;
  v26[9] = "totalRoundTripTime";
  v26[10] = (char *)this + 232;
  v26[11] = 5;
  v26[12] = "roundTripTimeMeasurements";
  v26[13] = (char *)this + 248;
  v26[14] = 1;
  webrtc::RTCReceivedRtpStreamStats::AttributesImpl(this, a2 + 5, a3);
  v12 = 0;
  v14 = a3[1];
  v13 = a3[2];
  v15 = *a3;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v12];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_24;
      v18 = v16[1];
      v19 = v26[3 * v12];
      if (v14 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v13 - v15) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      v4 = (absl::variant_internal *)operator new(24 * v20);
      v22 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v14 != v15)
      {
        v23 = (char *)v4 + 8 * ((v14 - v15) >> 3);
        do
        {
          v24 = *(_OWORD *)(v14 - 24);
          v25 = v23 - 24;
          *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v14 -= 24;
          v23 -= 24;
        }
        while (v14 != v15);
        v13 = (char *)v4 + v21;
        v14 = v22 + 24;
        *a3 = v25;
        a3[1] = v22 + 24;
        a3[2] = v13;
        if (!v15)
          goto LABEL_2;
LABEL_21:
        operator delete(v15);
        goto LABEL_2;
      }
      v25 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      v13 = (char *)v4 + v21;
      v14 = v22 + 24;
      *a3 = v22;
      a3[1] = v22 + 24;
      a3[2] = v13;
      if (v15)
        goto LABEL_21;
LABEL_2:
      v15 = v25;
      a3[1] = v14;
      if (++v12 == 5)
        return;
    }
    if (!v14)
      goto LABEL_23;
    *(_QWORD *)v14 = v19;
    *((_QWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 2) = v17;
    v14 += 24;
    a3[1] = v14;
    ++v12;
  }
  while (v12 != 5);
}

void webrtc::RTCRemoteInboundRtpStreamStats::~RTCRemoteInboundRtpStreamStats(void **this)
{
  if (*((_BYTE *)this + 192) && *((char *)this + 191) < 0)
  {
    operator delete(this[21]);
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_7;
  }
  else
  {
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_7;
  }
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
LABEL_7:
  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if (!*((_BYTE *)this + 72))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 72))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
LABEL_13:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  webrtc::RTCRemoteInboundRtpStreamStats::~RTCRemoteInboundRtpStreamStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::RTCRemoteOutboundRtpStreamStats::copy@<Q0>(webrtc::RTCRemoteOutboundRtpStreamStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  webrtc::RTCRtpStreamStats *v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __n128 result;

  v4 = operator new();
  v5 = webrtc::RTCRtpStreamStats::RTCRtpStreamStats((webrtc::RTCRtpStreamStats *)v4, this);
  *((_OWORD *)v5 + 9) = *((_OWORD *)this + 9);
  *(_OWORD *)((char *)v5 + 153) = *(_OWORD *)((char *)this + 153);
  *(_QWORD *)v5 = &off_24C0BC730;
  *((_BYTE *)v5 + 176) = 0;
  v6 = (std::string *)((char *)v5 + 176);
  *(_BYTE *)(v4 + 200) = 0;
  if (*((_BYTE *)this + 200))
  {
    if (*((char *)this + 199) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
    }
    *(_BYTE *)(v4 + 200) = 1;
  }
  v7 = *((_OWORD *)this + 16);
  *(_OWORD *)(v4 + 240) = *((_OWORD *)this + 15);
  *(_OWORD *)(v4 + 256) = v7;
  v8 = *((_OWORD *)this + 14);
  *(_OWORD *)(v4 + 208) = *((_OWORD *)this + 13);
  *(_OWORD *)(v4 + 224) = v8;
  result = *(__n128 *)((char *)this + 265);
  *(__n128 *)(v4 + 265) = result;
  *a2 = v4;
  return result;
}

const char *webrtc::RTCRemoteOutboundRtpStreamStats::type(webrtc::RTCRemoteOutboundRtpStreamStats *this)
{
  return "remote-outbound-rtp";
}

void webrtc::RTCRemoteOutboundRtpStreamStats::AttributesImpl(webrtc::RTCRemoteOutboundRtpStreamStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  _QWORD v26[20];

  v26[18] = *MEMORY[0x24BDAC8D0];
  v26[0] = "localId";
  v26[1] = (char *)this + 176;
  v26[2] = 6;
  v26[3] = "remoteTimestamp";
  v26[4] = (char *)this + 208;
  v26[5] = 5;
  v26[6] = "reportsSent";
  v26[7] = (char *)this + 224;
  v26[8] = 4;
  v26[9] = "roundTripTime";
  v26[10] = (char *)this + 240;
  v26[11] = 5;
  v26[12] = "roundTripTimeMeasurements";
  v26[13] = (char *)this + 256;
  v26[14] = 4;
  v26[15] = "totalRoundTripTime";
  v26[16] = (char *)this + 272;
  v26[17] = 5;
  webrtc::RTCSentRtpStreamStats::AttributesImpl(this, a2 + 6, a3);
  v12 = 0;
  v14 = a3[1];
  v13 = a3[2];
  v15 = *a3;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v12];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_24;
      v18 = v16[1];
      v19 = v26[3 * v12];
      if (v14 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v13 - v15) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      v4 = (absl::variant_internal *)operator new(24 * v20);
      v22 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v14 != v15)
      {
        v23 = (char *)v4 + 8 * ((v14 - v15) >> 3);
        do
        {
          v24 = *(_OWORD *)(v14 - 24);
          v25 = v23 - 24;
          *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v14 -= 24;
          v23 -= 24;
        }
        while (v14 != v15);
        v13 = (char *)v4 + v21;
        v14 = v22 + 24;
        *a3 = v25;
        a3[1] = v22 + 24;
        a3[2] = v13;
        if (!v15)
          goto LABEL_2;
LABEL_21:
        operator delete(v15);
        goto LABEL_2;
      }
      v25 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      v13 = (char *)v4 + v21;
      v14 = v22 + 24;
      *a3 = v22;
      a3[1] = v22 + 24;
      a3[2] = v13;
      if (v15)
        goto LABEL_21;
LABEL_2:
      v15 = v25;
      a3[1] = v14;
      if (++v12 == 6)
        return;
    }
    if (!v14)
      goto LABEL_23;
    *(_QWORD *)v14 = v19;
    *((_QWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 2) = v17;
    v14 += 24;
    a3[1] = v14;
    ++v12;
  }
  while (v12 != 6);
}

uint64_t webrtc::RTCRemoteOutboundRtpStreamStats::RTCRemoteOutboundRtpStreamStats(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string::value_type *v6;
  int v7;
  std::string *v8;
  _BYTE v10[7];

  v6 = *(std::string::value_type **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)v10 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&v10[3] = *(_DWORD *)(a2 + 19);
  v7 = *(char *)(a2 + 23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C0BC140;
  v8 = (std::string *)(a1 + 8);
  if (v7 < 0)
  {
    std::string::__init_copy_ctor_external(v8, v6, v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)v10;
    *(_DWORD *)(a1 + 27) = *(_DWORD *)&v10[3];
    *(_BYTE *)(a1 + 31) = v7;
  }
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)a1 = off_24C0BC650;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (v7 < 0)
    operator delete(v6);
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)a1 = &off_24C0BC730;
  *(_BYTE *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  return a1;
}

void webrtc::RTCRemoteOutboundRtpStreamStats::~RTCRemoteOutboundRtpStreamStats(void **this)
{
  if (*((_BYTE *)this + 200) && *((char *)this + 199) < 0)
  {
    operator delete(this[22]);
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_7;
  }
  else
  {
    *this = off_24C0BC650;
    if (!*((_BYTE *)this + 136))
      goto LABEL_7;
  }
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
LABEL_7:
  if (*((_BYTE *)this + 104) && *((char *)this + 103) < 0)
  {
    operator delete(this[10]);
    if (!*((_BYTE *)this + 72))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 72))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
LABEL_13:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  webrtc::RTCRemoteOutboundRtpStreamStats::~RTCRemoteOutboundRtpStreamStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RTCMediaSourceStats::copy(webrtc::RTCMediaSourceStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC768;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  *a2 = v4;
}

const char *webrtc::RTCMediaSourceStats::type(webrtc::RTCMediaSourceStats *this)
{
  return "parent-media-source";
}

void webrtc::RTCMediaSourceStats::AttributesImpl(webrtc::RTCMediaSourceStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;

  v5 = (char *)this + 40;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = a2 + 2;
  if (a2 == -2)
  {
    v9 = (char *)operator new(0x18uLL);
    v10 = (unint64_t)(v9 + 24);
    a3[1] = v9 + 24;
    v11 = a3 + 1;
    *(_QWORD *)v9 = "trackIdentifier";
    *((_QWORD *)v9 + 1) = v5;
    *((_QWORD *)v9 + 2) = 6;
    *a3 = v9;
    a3[2] = v9 + 24;
    v12 = v9 + 24;
    v13 = (char *)this + 72;
    a3[1] = v9 + 24;
  }
  else
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_20;
    v7 = 24 * v6;
    v8 = (char *)operator new(24 * v6);
    v9 = v8;
    v10 = (unint64_t)&v8[v7];
    *a3 = v8;
    a3[1] = v8;
    v11 = a3 + 1;
    a3[2] = (char *)v10;
    *(_QWORD *)v8 = "trackIdentifier";
    *((_QWORD *)v8 + 1) = v5;
    *((_QWORD *)v8 + 2) = 6;
    v12 = v8 + 24;
    v13 = (char *)this + 72;
    a3[1] = v8 + 24;
    if ((unint64_t)(v8 + 24) < v10)
    {
      *(_QWORD *)v12 = "kind";
      *((_QWORD *)v8 + 4) = v13;
      *((_QWORD *)v8 + 5) = 6;
      v14 = v8 + 48;
      goto LABEL_19;
    }
  }
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v9) >> 3) + 1;
  if (v15 > 0xAAAAAAAAAAAAAAALL)
LABEL_20:
    abort();
  v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v9) >> 3);
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x555555555555555)
    v17 = 0xAAAAAAAAAAAAAAALL;
  else
    v17 = v15;
  if (!v17)
  {
    __break(1u);
LABEL_22:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v17 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_22;
  v18 = 24 * v17;
  v19 = (char *)operator new(24 * v17);
  v20 = &v19[v18];
  v21 = &v19[8 * ((v12 - v9) >> 3)];
  *(_QWORD *)v21 = "kind";
  *((_QWORD *)v21 + 1) = v13;
  *((_QWORD *)v21 + 2) = 6;
  v14 = v21 + 24;
  if (v12 == v9)
  {
    v23 = &v19[8 * ((v12 - v9) >> 3)];
  }
  else
  {
    do
    {
      v22 = *((_QWORD *)v12 - 1);
      v23 = v21 - 24;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)(v12 - 24);
      *((_QWORD *)v21 - 1) = v22;
      v12 -= 24;
      v21 -= 24;
    }
    while (v12 != v9);
  }
  *a3 = v23;
  a3[1] = v14;
  a3[2] = v20;
  operator delete(v9);
LABEL_19:
  *v11 = v14;
}

void webrtc::RTCMediaSourceStats::~RTCMediaSourceStats(void **this)
{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::RTCAudioSourceStats::copy@<Q0>(webrtc::RTCAudioSourceStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  __n128 result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC768;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  *(_QWORD *)v4 = off_24C0BC7A0;
  *(_OWORD *)(v4 + 120) = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v4 + 161) = *(_OWORD *)((char *)this + 161);
  result = *(__n128 *)((char *)this + 104);
  *(__n128 *)(v4 + 104) = result;
  *a2 = v4;
  return result;
}

const char *webrtc::RTCAudioSourceStats::type(webrtc::RTCAudioSourceStats *this)
{
  return "media-source";
}

void webrtc::RTCAudioSourceStats::AttributesImpl(webrtc::RTCAudioSourceStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  absl::variant_internal *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  _QWORD v26[16];

  v26[15] = *MEMORY[0x24BDAC8D0];
  v26[0] = "audioLevel";
  v26[1] = (char *)this + 104;
  v26[2] = 5;
  v26[3] = "totalAudioEnergy";
  v26[4] = (char *)this + 120;
  v26[5] = 5;
  v26[6] = "totalSamplesDuration";
  v26[7] = (char *)this + 136;
  v26[8] = 5;
  v26[9] = "echoReturnLoss";
  v26[10] = (char *)this + 152;
  v26[11] = 5;
  v26[12] = "echoReturnLossEnhancement";
  v26[13] = (char *)this + 168;
  v26[14] = 5;
  webrtc::RTCMediaSourceStats::AttributesImpl(this, a2 + 5, a3);
  v12 = 0;
  v14 = a3[1];
  v13 = a3[2];
  v15 = *a3;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v12];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_24;
      v18 = v16[1];
      v19 = v26[3 * v12];
      if (v14 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((v13 - v15) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - v15) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - v15) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_23:
        __break(1u);
LABEL_24:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v4, v5, v6, v7, v8, v9, v10, v11);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      v4 = (absl::variant_internal *)operator new(24 * v20);
      v22 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v14 != v15)
      {
        v23 = (char *)v4 + 8 * ((v14 - v15) >> 3);
        do
        {
          v24 = *(_OWORD *)(v14 - 24);
          v25 = v23 - 24;
          *((_QWORD *)v23 - 1) = *((_QWORD *)v14 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v14 -= 24;
          v23 -= 24;
        }
        while (v14 != v15);
        v13 = (char *)v4 + v21;
        v14 = v22 + 24;
        *a3 = v25;
        a3[1] = v22 + 24;
        a3[2] = v13;
        if (!v15)
          goto LABEL_2;
LABEL_21:
        operator delete(v15);
        goto LABEL_2;
      }
      v25 = (char *)v4 + 8 * ((v14 - v15) >> 3);
      v13 = (char *)v4 + v21;
      v14 = v22 + 24;
      *a3 = v22;
      a3[1] = v22 + 24;
      a3[2] = v13;
      if (v15)
        goto LABEL_21;
LABEL_2:
      v15 = v25;
      a3[1] = v14;
      if (++v12 == 5)
        return;
    }
    if (!v14)
      goto LABEL_23;
    *(_QWORD *)v14 = v19;
    *((_QWORD *)v14 + 1) = v18;
    *((_QWORD *)v14 + 2) = v17;
    v14 += 24;
    a3[1] = v14;
    ++v12;
  }
  while (v12 != 5);
}

void webrtc::RTCAudioSourceStats::~RTCAudioSourceStats(void **this)
{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::RTCVideoSourceStats::copy@<Q0>(webrtc::RTCVideoSourceStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  __n128 result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC768;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_BYTE *)(v4 + 72) = 0;
  v8 = (std::string *)(v4 + 72);
  *(_BYTE *)(v4 + 96) = 0;
  if (*((_BYTE *)this + 96))
  {
    if (*((char *)this + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
      *(_QWORD *)(v4 + 88) = *((_QWORD *)this + 11);
    }
    *(_BYTE *)(v4 + 96) = 1;
  }
  *(_QWORD *)v4 = off_24C0BC7D8;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)((char *)this + 104);
  result = *(__n128 *)((char *)this + 120);
  *(__n128 *)(v4 + 120) = result;
  *(_BYTE *)(v4 + 136) = *((_BYTE *)this + 136);
  *a2 = v4;
  return result;
}

const char *webrtc::RTCVideoSourceStats::type(webrtc::RTCVideoSourceStats *this)
{
  return "media-source";
}

void webrtc::RTCVideoSourceStats::AttributesImpl(webrtc::RTCVideoSourceStats *this@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;

  v5 = (char *)this + 104;
  webrtc::RTCMediaSourceStats::AttributesImpl(this, a2 + 4, a3);
  v6 = a3[1];
  v7 = a3[2];
  if (v6 >= v7)
  {
    v9 = *a3;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_64;
    if (0x5555555555555556 * ((v7 - v9) >> 3) > v11)
      v11 = 0x5555555555555556 * ((v7 - v9) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v9) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    if (!v11)
      goto LABEL_63;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_65;
    v12 = 24 * v11;
    v13 = (char *)operator new(24 * v11);
    v7 = &v13[v12];
    v14 = &v13[24 * v10];
    *(_QWORD *)v14 = "width";
    *((_QWORD *)v14 + 1) = v5;
    *((_QWORD *)v14 + 2) = 2;
    v8 = v14 + 24;
    if (v6 != v9)
    {
      do
      {
        v15 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v14 - 24) = v15;
        v14 -= 24;
        v6 -= 24;
      }
      while (v6 != v9);
      v6 = v9;
    }
    *a3 = v14;
    a3[2] = v7;
    if (v6)
      operator delete(v6);
  }
  else
  {
    if (!v6)
      goto LABEL_63;
    *(_QWORD *)v6 = "width";
    *((_QWORD *)v6 + 1) = v5;
    *((_QWORD *)v6 + 2) = 2;
    v8 = v6 + 24;
  }
  v16 = (char *)this + 112;
  if (v8 >= v7)
  {
    v19 = *a3;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v8 - *a3) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_64;
    if (0x5555555555555556 * ((v7 - v19) >> 3) > v21)
      v21 = 0x5555555555555556 * ((v7 - v19) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v19) >> 3) >= 0x555555555555555)
      v21 = 0xAAAAAAAAAAAAAAALL;
    if (!v21)
      goto LABEL_63;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_65;
    v22 = 24 * v21;
    v23 = (char *)operator new(24 * v21);
    v7 = &v23[v22];
    v24 = &v23[24 * v20];
    *(_QWORD *)v24 = "height";
    *((_QWORD *)v24 + 1) = v16;
    *((_QWORD *)v24 + 2) = 2;
    v17 = v24 + 24;
    if (v8 == v19)
    {
      *a3 = v24;
      a3[1] = v17;
      v19 = v8;
      a3[2] = v7;
    }
    else
    {
      do
      {
        v25 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v24 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)(v24 - 24) = v25;
        v24 -= 24;
        v8 -= 24;
      }
      while (v8 != v19);
      *a3 = v24;
      a3[1] = v17;
      a3[2] = v7;
      if (!v19)
      {
        v18 = (char *)this + 120;
        a3[1] = v17;
        if (v17 >= v7)
          goto LABEL_34;
        goto LABEL_30;
      }
    }
    operator delete(v19);
    v7 = a3[2];
    v18 = (char *)this + 120;
    a3[1] = v17;
    if (v17 >= v7)
      goto LABEL_34;
  }
  else
  {
    *(_QWORD *)v8 = "height";
    *((_QWORD *)v8 + 1) = v16;
    *((_QWORD *)v8 + 2) = 2;
    v17 = v8 + 24;
    v18 = (char *)this + 120;
    a3[1] = v17;
    if (v17 >= v7)
    {
LABEL_34:
      v29 = *a3;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *a3) >> 3);
      v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_64;
      if (0x5555555555555556 * ((v7 - v29) >> 3) > v31)
        v31 = 0x5555555555555556 * ((v7 - v29) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v7 - v29) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      if (!v31)
        goto LABEL_63;
      if (v31 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_65;
      v32 = 24 * v31;
      v33 = (char *)operator new(24 * v31);
      v34 = &v33[v32];
      v35 = &v33[24 * v30];
      *(_QWORD *)v35 = "frames";
      *((_QWORD *)v35 + 1) = v18;
      *((_QWORD *)v35 + 2) = 2;
      v26 = v35 + 24;
      if (v17 == v29)
      {
        *a3 = v35;
        a3[1] = v26;
        v29 = v17;
        a3[2] = v34;
      }
      else
      {
        do
        {
          v36 = *(_OWORD *)(v17 - 24);
          *((_QWORD *)v35 - 1) = *((_QWORD *)v17 - 1);
          *(_OWORD *)(v35 - 24) = v36;
          v35 -= 24;
          v17 -= 24;
        }
        while (v17 != v29);
        *a3 = v35;
        a3[1] = v26;
        a3[2] = v34;
        if (!v29)
        {
          v27 = (char *)this + 128;
          a3[1] = v26;
          v28 = (unint64_t)a3[2];
          if ((unint64_t)v26 < v28)
            goto LABEL_45;
          goto LABEL_48;
        }
      }
      operator delete(v29);
      v27 = (char *)this + 128;
      a3[1] = v26;
      v28 = (unint64_t)a3[2];
      if ((unint64_t)v26 < v28)
        goto LABEL_45;
      goto LABEL_48;
    }
  }
LABEL_30:
  *(_QWORD *)v17 = "frames";
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = 2;
  v26 = v17 + 24;
  v27 = (char *)this + 128;
  a3[1] = v26;
  v28 = (unint64_t)a3[2];
  if ((unint64_t)v26 < v28)
  {
LABEL_45:
    *(_QWORD *)v26 = "framesPerSecond";
    *((_QWORD *)v26 + 1) = v27;
    *((_QWORD *)v26 + 2) = 5;
    v37 = v26 + 24;
    goto LABEL_62;
  }
LABEL_48:
  v38 = *a3;
  v39 = 0xAAAAAAAAAAAAAAABLL * ((v26 - *a3) >> 3);
  v40 = v39 + 1;
  if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_64;
  v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - (_QWORD)v38) >> 3);
  if (2 * v41 > v40)
    v40 = 2 * v41;
  if (v41 >= 0x555555555555555)
    v42 = 0xAAAAAAAAAAAAAAALL;
  else
    v42 = v40;
  if (!v42)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    abort();
  }
  if (v42 > 0xAAAAAAAAAAAAAAALL)
LABEL_65:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v43 = 24 * v42;
  v44 = (char *)operator new(24 * v42);
  v45 = &v44[v43];
  v46 = &v44[24 * v39];
  *(_QWORD *)v46 = "framesPerSecond";
  *((_QWORD *)v46 + 1) = v27;
  *((_QWORD *)v46 + 2) = 5;
  v37 = v46 + 24;
  if (v26 == v38)
  {
    *a3 = v46;
    a3[1] = v37;
    v38 = v26;
    a3[2] = v45;
LABEL_61:
    operator delete(v38);
    goto LABEL_62;
  }
  do
  {
    v47 = *(_OWORD *)(v26 - 24);
    *((_QWORD *)v46 - 1) = *((_QWORD *)v26 - 1);
    *(_OWORD *)(v46 - 24) = v47;
    v46 -= 24;
    v26 -= 24;
  }
  while (v26 != v38);
  *a3 = v46;
  a3[1] = v37;
  a3[2] = v45;
  if (v38)
    goto LABEL_61;
LABEL_62:
  a3[1] = v37;
}

void webrtc::RTCVideoSourceStats::~RTCVideoSourceStats(void **this)
{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C0BC768;
  if (*((_BYTE *)this + 96) && *((char *)this + 95) < 0)
  {
    operator delete(this[9]);
    if (!*((_BYTE *)this + 64))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 64))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
LABEL_7:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RTCTransportStats::copy(webrtc::RTCTransportStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = &off_24C0BC810;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((char *)this + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)((char *)this + 72);
  *(_OWORD *)(v4 + 81) = *(_OWORD *)((char *)this + 81);
  *(_BYTE *)(v4 + 104) = 0;
  v7 = (std::string *)(v4 + 104);
  *(_BYTE *)(v4 + 128) = 0;
  if (*((_BYTE *)this + 128))
  {
    if (*((char *)this + 127) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
      *(_QWORD *)(v4 + 120) = *((_QWORD *)this + 15);
    }
    *(_BYTE *)(v4 + 128) = 1;
  }
  *(_BYTE *)(v4 + 136) = 0;
  v8 = (std::string *)(v4 + 136);
  *(_BYTE *)(v4 + 160) = 0;
  if (*((_BYTE *)this + 160))
  {
    if (*((char *)this + 159) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
      *(_QWORD *)(v4 + 152) = *((_QWORD *)this + 19);
    }
    *(_BYTE *)(v4 + 160) = 1;
  }
  *(_BYTE *)(v4 + 168) = 0;
  v9 = (std::string *)(v4 + 168);
  *(_BYTE *)(v4 + 192) = 0;
  if (*((_BYTE *)this + 192))
  {
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
      *(_QWORD *)(v4 + 184) = *((_QWORD *)this + 23);
    }
    *(_BYTE *)(v4 + 192) = 1;
  }
  *(_BYTE *)(v4 + 200) = 0;
  v10 = (std::string *)(v4 + 200);
  *(_BYTE *)(v4 + 224) = 0;
  if (*((_BYTE *)this + 224))
  {
    if (*((char *)this + 223) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
      *(_QWORD *)(v4 + 216) = *((_QWORD *)this + 27);
    }
    *(_BYTE *)(v4 + 224) = 1;
  }
  *(_BYTE *)(v4 + 232) = 0;
  v11 = (std::string *)(v4 + 232);
  *(_BYTE *)(v4 + 256) = 0;
  if (*((_BYTE *)this + 256))
  {
    if (*((char *)this + 255) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
      *(_QWORD *)(v4 + 248) = *((_QWORD *)this + 31);
    }
    *(_BYTE *)(v4 + 256) = 1;
  }
  *(_BYTE *)(v4 + 264) = 0;
  *(_BYTE *)(v4 + 288) = 0;
  if (*((_BYTE *)this + 288))
  {
    v12 = (std::string *)(v4 + 264);
    if (*((char *)this + 287) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)this + 33), *((_QWORD *)this + 34));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 264);
      *(_QWORD *)(v4 + 280) = *((_QWORD *)this + 35);
    }
    *(_BYTE *)(v4 + 288) = 1;
  }
  *(_BYTE *)(v4 + 296) = 0;
  *(_BYTE *)(v4 + 320) = 0;
  if (*((_BYTE *)this + 320))
  {
    v13 = (std::string *)(v4 + 296);
    if (*((char *)this + 319) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 296);
      *(_QWORD *)(v4 + 312) = *((_QWORD *)this + 39);
    }
    *(_BYTE *)(v4 + 320) = 1;
  }
  *(_BYTE *)(v4 + 328) = 0;
  *(_BYTE *)(v4 + 352) = 0;
  if (*((_BYTE *)this + 352))
  {
    v14 = (std::string *)(v4 + 328);
    if (*((char *)this + 351) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)this + 41), *((_QWORD *)this + 42));
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 328);
      *(_QWORD *)(v4 + 344) = *((_QWORD *)this + 43);
    }
    *(_BYTE *)(v4 + 352) = 1;
  }
  *(_BYTE *)(v4 + 360) = 0;
  *(_BYTE *)(v4 + 384) = 0;
  if (*((_BYTE *)this + 384))
  {
    v15 = (std::string *)(v4 + 360);
    if (*((char *)this + 383) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)this + 45), *((_QWORD *)this + 46));
    }
    else
    {
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 360);
      *(_QWORD *)(v4 + 376) = *((_QWORD *)this + 47);
    }
    *(_BYTE *)(v4 + 384) = 1;
  }
  *(_QWORD *)(v4 + 392) = *((_QWORD *)this + 49);
  *(_BYTE *)(v4 + 400) = 0;
  *(_BYTE *)(v4 + 424) = 0;
  if (*((_BYTE *)this + 424))
  {
    v16 = (std::string *)(v4 + 400);
    if (*((char *)this + 423) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)this + 50), *((_QWORD *)this + 51));
    }
    else
    {
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *((_OWORD *)this + 25);
      *(_QWORD *)(v4 + 416) = *((_QWORD *)this + 52);
    }
    *(_BYTE *)(v4 + 424) = 1;
  }
  *(_BYTE *)(v4 + 432) = 0;
  *(_BYTE *)(v4 + 456) = 0;
  if (*((_BYTE *)this + 456))
  {
    v17 = (std::string *)(v4 + 432);
    if (*((char *)this + 455) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)this + 54), *((_QWORD *)this + 55));
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *((_OWORD *)this + 27);
      *(_QWORD *)(v4 + 448) = *((_QWORD *)this + 56);
    }
    *(_BYTE *)(v4 + 456) = 1;
  }
  *(_BYTE *)(v4 + 464) = 0;
  *(_BYTE *)(v4 + 488) = 0;
  if (*((_BYTE *)this + 488))
  {
    v18 = (std::string *)(v4 + 464);
    if (*((char *)this + 487) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *((const std::string::value_type **)this + 58), *((_QWORD *)this + 59));
    }
    else
    {
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *((_OWORD *)this + 29);
      *(_QWORD *)(v4 + 480) = *((_QWORD *)this + 60);
    }
    *(_BYTE *)(v4 + 488) = 1;
  }
  *a2 = v4;
}

const char *webrtc::RTCTransportStats::type(webrtc::RTCTransportStats *this)
{
  return "transport";
}

void webrtc::RTCTransportStats::AttributesImpl(webrtc::RTCTransportStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCTransportStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCTransportStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCTransportStats *v25;
  _QWORD v26[53];

  v26[51] = *MEMORY[0x24BDAC8D0];
  v26[0] = "bytesSent";
  v26[1] = (char *)this + 40;
  v26[2] = 4;
  v26[3] = "packetsSent";
  v26[4] = (char *)this + 56;
  v26[5] = 4;
  v26[6] = "bytesReceived";
  v26[7] = (char *)this + 72;
  v26[8] = 4;
  v26[9] = "packetsReceived";
  v26[10] = (char *)this + 88;
  v26[11] = 4;
  v26[12] = "rtcpTransportStatsId";
  v26[13] = (char *)this + 104;
  v26[14] = 6;
  v26[15] = "dtlsState";
  v26[16] = (char *)this + 136;
  v26[17] = 6;
  v26[18] = "selectedCandidatePairId";
  v26[19] = (char *)this + 168;
  v26[20] = 6;
  v26[21] = "localCertificateId";
  v26[22] = (char *)this + 200;
  v26[23] = 6;
  v26[24] = "remoteCertificateId";
  v26[25] = (char *)this + 232;
  v26[26] = 6;
  v26[27] = "tlsVersion";
  v26[28] = (char *)this + 264;
  v26[29] = 6;
  v26[30] = "dtlsCipher";
  v26[31] = (char *)this + 296;
  v26[32] = 6;
  v26[33] = "dtlsRole";
  v26[34] = (char *)this + 328;
  v26[35] = 6;
  v26[36] = "srtpCipher";
  v26[37] = (char *)this + 360;
  v26[38] = 6;
  v26[39] = "selectedCandidatePairChanges";
  v26[40] = (char *)this + 392;
  v26[41] = 2;
  v26[42] = "iceRole";
  v26[43] = (char *)this + 400;
  v26[44] = 6;
  v26[45] = "iceLocalUsernameFragment";
  v26[46] = (char *)this + 432;
  v26[47] = 6;
  v26[48] = "iceState";
  v26[49] = (char *)this + 464;
  v26[50] = 6;
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v10 = a2 + 17;
  if (a2 == -17)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCTransportStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCTransportStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCTransportStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCTransportStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCTransportStats *)(v22 + 24);
        a9[2] = (webrtc::RTCTransportStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCTransportStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCTransportStats *)v22;
      a9[1] = (webrtc::RTCTransportStats *)(v22 + 24);
      a9[2] = (webrtc::RTCTransportStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCTransportStats *)v15;
      if (++v14 == 17)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCTransportStats *)v15;
    ++v14;
  }
  while (v14 != 17);
}

void webrtc::RTCTransportStats::~RTCTransportStats(void **this)
{
  if (*((_BYTE *)this + 488) && *((char *)this + 487) < 0)
  {
    operator delete(this[58]);
    if (!*((_BYTE *)this + 456))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)this + 456))
  {
    goto LABEL_7;
  }
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
LABEL_7:
  if (*((_BYTE *)this + 424) && *((char *)this + 423) < 0)
  {
    operator delete(this[50]);
    if (!*((_BYTE *)this + 384))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 384))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
LABEL_13:
  if (*((_BYTE *)this + 352) && *((char *)this + 351) < 0)
  {
    operator delete(this[41]);
    if (!*((_BYTE *)this + 320))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 320))
  {
    goto LABEL_19;
  }
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
LABEL_19:
  if (*((_BYTE *)this + 288) && *((char *)this + 287) < 0)
  {
    operator delete(this[33]);
    if (!*((_BYTE *)this + 256))
      goto LABEL_25;
  }
  else if (!*((_BYTE *)this + 256))
  {
    goto LABEL_25;
  }
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
LABEL_25:
  if (*((_BYTE *)this + 224) && *((char *)this + 223) < 0)
  {
    operator delete(this[25]);
    if (!*((_BYTE *)this + 192))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 192))
  {
    goto LABEL_31;
  }
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
LABEL_31:
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    if (!*((_BYTE *)this + 128))
      goto LABEL_37;
  }
  else if (!*((_BYTE *)this + 128))
  {
    goto LABEL_37;
  }
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
LABEL_37:
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  webrtc::RTCTransportStats::~RTCTransportStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webrtc::RTCAudioPlayoutStats::copy@<Q0>(webrtc::RTCAudioPlayoutStats *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  __n128 result;

  v4 = operator new();
  v5 = *((_QWORD *)this + 4);
  *(_QWORD *)v4 = &unk_24C0BC140;
  v6 = (std::string *)(v4 + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    *(_QWORD *)(v4 + 24) = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)v4 = off_24C0BC848;
  *(_BYTE *)(v4 + 40) = 0;
  v7 = (std::string *)(v4 + 40);
  *(_BYTE *)(v4 + 64) = 0;
  if (*((_BYTE *)this + 64))
  {
    if (*((char *)this + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
      *(_QWORD *)(v4 + 56) = *((_QWORD *)this + 7);
    }
    *(_BYTE *)(v4 + 64) = 1;
  }
  *(_OWORD *)(v4 + 88) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(v4 + 129) = *(_OWORD *)((char *)this + 129);
  result = *(__n128 *)((char *)this + 72);
  *(__n128 *)(v4 + 72) = result;
  *a2 = v4;
  return result;
}

const char *webrtc::RTCAudioPlayoutStats::type(webrtc::RTCAudioPlayoutStats *this)
{
  return "media-playout";
}

void webrtc::RTCAudioPlayoutStats::AttributesImpl(webrtc::RTCAudioPlayoutStats *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, webrtc::RTCAudioPlayoutStats **a9@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  webrtc::RTCAudioPlayoutStats *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  webrtc::RTCAudioPlayoutStats *v25;
  _QWORD v26[20];

  v26[18] = *MEMORY[0x24BDAC8D0];
  v26[0] = "kind";
  v26[1] = (char *)this + 40;
  v26[2] = 6;
  v26[3] = "synthesizedSamplesDuration";
  v26[4] = (char *)this + 72;
  v26[5] = 5;
  v26[6] = "synthesizedSamplesEvents";
  v26[7] = (char *)this + 88;
  v26[8] = 4;
  v26[9] = "totalSamplesDuration";
  v26[10] = (char *)this + 104;
  v26[11] = 5;
  v26[12] = "totalPlayoutDelay";
  v26[13] = (char *)this + 120;
  v26[14] = 5;
  v26[15] = "totalSamplesCount";
  v26[16] = (char *)this + 136;
  v26[17] = 4;
  a9[1] = 0;
  a9[2] = 0;
  *a9 = 0;
  v10 = a2 + 6;
  if (a2 == -6)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_29:
      abort();
    v11 = 24 * v10;
    this = (webrtc::RTCAudioPlayoutStats *)operator new(24 * v10);
    v12 = this;
    v13 = (char *)this + v11;
    *a9 = this;
    a9[1] = this;
    a9[2] = (webrtc::RTCAudioPlayoutStats *)v13;
  }
  v14 = 0;
  v15 = (char *)v12;
  do
  {
    while (1)
    {
      v16 = &v26[3 * v14];
      v17 = v16[2];
      if (v17 >= 0x10)
        goto LABEL_28;
      v18 = v16[1];
      v19 = v26[3 * v14];
      if (v15 < v13)
        break;
      v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (char *)v12) >> 3) + 1;
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_29;
      if (0x5555555555555556 * ((v13 - (char *)v12) >> 3) > v20)
        v20 = 0x5555555555555556 * ((v13 - (char *)v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v13 - (char *)v12) >> 3) >= 0x555555555555555)
        v20 = 0xAAAAAAAAAAAAAAALL;
      if (!v20)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
      }
      if (v20 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 24 * v20;
      this = (webrtc::RTCAudioPlayoutStats *)operator new(24 * v20);
      v22 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
      *(_QWORD *)v22 = v19;
      *((_QWORD *)v22 + 1) = v18;
      *((_QWORD *)v22 + 2) = v17;
      if (v15 != (char *)v12)
      {
        v23 = (char *)this + 8 * ((v15 - (char *)v12) >> 3);
        do
        {
          v24 = *(_OWORD *)(v15 - 24);
          v25 = (webrtc::RTCAudioPlayoutStats *)(v23 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v15 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v15 -= 24;
          v23 -= 24;
        }
        while (v15 != (char *)v12);
        v13 = (char *)this + v21;
        v15 = v22 + 24;
        *a9 = v25;
        a9[1] = (webrtc::RTCAudioPlayoutStats *)(v22 + 24);
        a9[2] = (webrtc::RTCAudioPlayoutStats *)v13;
        if (!v12)
          goto LABEL_6;
LABEL_25:
        operator delete(v12);
        goto LABEL_6;
      }
      v25 = (webrtc::RTCAudioPlayoutStats *)((char *)this + 8 * ((v15 - (char *)v12) >> 3));
      v13 = (char *)this + v21;
      v15 = v22 + 24;
      *a9 = (webrtc::RTCAudioPlayoutStats *)v22;
      a9[1] = (webrtc::RTCAudioPlayoutStats *)(v22 + 24);
      a9[2] = (webrtc::RTCAudioPlayoutStats *)v13;
      if (v12)
        goto LABEL_25;
LABEL_6:
      v12 = v25;
      a9[1] = (webrtc::RTCAudioPlayoutStats *)v15;
      if (++v14 == 6)
        return;
    }
    if (!v15)
      goto LABEL_27;
    *(_QWORD *)v15 = v19;
    *((_QWORD *)v15 + 1) = v18;
    *((_QWORD *)v15 + 2) = v17;
    v15 += 24;
    a9[1] = (webrtc::RTCAudioPlayoutStats *)v15;
    ++v14;
  }
  while (v14 != 6);
}

void webrtc::RTCAudioPlayoutStats::~RTCAudioPlayoutStats(void **this)
{
  if (!*((_BYTE *)this + 64) || (*((char *)this + 63) & 0x80000000) == 0)
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_6:
    operator delete(this[1]);
    return;
  }
  operator delete(this[5]);
  *this = &unk_24C0BC140;
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
}

{
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
LABEL_8:
      JUMPOUT(0x20BD0ADECLL);
  }
  else
  {
    *this = &unk_24C0BC140;
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(this[1]);
  goto LABEL_8;
}

void webrtc::RTCLocalIceCandidateStats::~RTCLocalIceCandidateStats(void **this)
{
  webrtc::RTCIceCandidateStats::~RTCIceCandidateStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RTCRemoteIceCandidateStats::~RTCRemoteIceCandidateStats(void **this)
{
  webrtc::RTCIceCandidateStats::~RTCIceCandidateStats(this);
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::RTCIceCandidateStats *webrtc::RTCIceCandidateStats::RTCIceCandidateStats(webrtc::RTCIceCandidateStats *this, const webrtc::RTCIceCandidateStats *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  __int16 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;

  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)this = &unk_24C0BC140;
  v5 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 8);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)this + 4) = v4;
  *(_QWORD *)this = &off_24C0BC570;
  *((_BYTE *)this + 40) = 0;
  v7 = (std::string *)((char *)this + 40);
  *((_BYTE *)this + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 63) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
    }
    else
    {
      v8 = *(_OWORD *)((char *)a2 + 40);
      *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_BYTE *)this + 64) = 1;
  }
  v9 = *((_WORD *)a2 + 36);
  *((_BYTE *)this + 80) = 0;
  v10 = (std::string *)((char *)this + 80);
  *((_WORD *)this + 36) = v9;
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    if (*((char *)a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
    }
    else
    {
      v11 = *((_OWORD *)a2 + 5);
      *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  v12 = (std::string *)((char *)this + 112);
  *((_BYTE *)this + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    if (*((char *)a2 + 135) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_BYTE *)this + 136) = 1;
  }
  *((_BYTE *)this + 144) = 0;
  v14 = (std::string *)((char *)this + 144);
  *((_BYTE *)this + 168) = 0;
  if (*((_BYTE *)a2 + 168))
  {
    if (*((char *)a2 + 167) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
    }
    else
    {
      v15 = *((_OWORD *)a2 + 9);
      *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *((_BYTE *)this + 168) = 1;
  }
  v16 = *((_QWORD *)a2 + 22);
  *((_BYTE *)this + 184) = 0;
  v17 = (std::string *)((char *)this + 184);
  *((_QWORD *)this + 22) = v16;
  *((_BYTE *)this + 208) = 0;
  if (*((_BYTE *)a2 + 208))
  {
    if (*((char *)a2 + 207) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a2 + 23), *((_QWORD *)a2 + 24));
    }
    else
    {
      v18 = *(_OWORD *)((char *)a2 + 184);
      *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    }
    *((_BYTE *)this + 208) = 1;
  }
  *((_BYTE *)this + 216) = 0;
  v19 = (std::string *)((char *)this + 216);
  *((_BYTE *)this + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    if (*((char *)a2 + 239) < 0)
    {
      std::string::__init_copy_ctor_external(v19, *((const std::string::value_type **)a2 + 27), *((_QWORD *)a2 + 28));
    }
    else
    {
      v20 = *(_OWORD *)((char *)a2 + 216);
      *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    *((_BYTE *)this + 240) = 1;
  }
  *((_BYTE *)this + 248) = 0;
  v21 = (std::string *)((char *)this + 248);
  *((_BYTE *)this + 272) = 0;
  if (*((_BYTE *)a2 + 272))
  {
    if (*((char *)a2 + 271) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
    }
    else
    {
      v22 = *(_OWORD *)((char *)a2 + 248);
      *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    }
    *((_BYTE *)this + 272) = 1;
  }
  *((_QWORD *)this + 35) = *((_QWORD *)a2 + 35);
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 312) = 0;
  if (*((_BYTE *)a2 + 312))
  {
    v23 = (std::string *)((char *)this + 288);
    if (*((char *)a2 + 311) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *((const std::string::value_type **)a2 + 36), *((_QWORD *)a2 + 37));
    }
    else
    {
      v24 = *((_OWORD *)a2 + 18);
      *((_QWORD *)this + 38) = *((_QWORD *)a2 + 38);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    }
    *((_BYTE *)this + 312) = 1;
  }
  *((_BYTE *)this + 320) = 0;
  *((_BYTE *)this + 344) = 0;
  if (*((_BYTE *)a2 + 344))
  {
    v25 = (std::string *)((char *)this + 320);
    if (*((char *)a2 + 343) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 40), *((_QWORD *)a2 + 41));
    }
    else
    {
      v26 = *((_OWORD *)a2 + 20);
      *((_QWORD *)this + 42) = *((_QWORD *)a2 + 42);
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
    }
    *((_BYTE *)this + 344) = 1;
  }
  *((_BYTE *)this + 352) = 0;
  *((_BYTE *)this + 376) = 0;
  if (*((_BYTE *)a2 + 376))
  {
    v27 = (std::string *)((char *)this + 352);
    if (*((char *)a2 + 375) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *((const std::string::value_type **)a2 + 44), *((_QWORD *)a2 + 45));
    }
    else
    {
      v28 = *((_OWORD *)a2 + 22);
      *((_QWORD *)this + 46) = *((_QWORD *)a2 + 46);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
    }
    *((_BYTE *)this + 376) = 1;
  }
  *((_QWORD *)this + 48) = *((_QWORD *)a2 + 48);
  *((_BYTE *)this + 392) = 0;
  *((_BYTE *)this + 416) = 0;
  if (*((_BYTE *)a2 + 416))
  {
    v29 = (std::string *)((char *)this + 392);
    if (*((char *)a2 + 415) < 0)
    {
      std::string::__init_copy_ctor_external(v29, *((const std::string::value_type **)a2 + 49), *((_QWORD *)a2 + 50));
    }
    else
    {
      v30 = *(_OWORD *)((char *)a2 + 392);
      *((_QWORD *)this + 51) = *((_QWORD *)a2 + 51);
      *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
    }
    *((_BYTE *)this + 416) = 1;
  }
  *((_BYTE *)this + 424) = 0;
  *((_BYTE *)this + 448) = 0;
  if (*((_BYTE *)a2 + 448))
  {
    v31 = (std::string *)((char *)this + 424);
    if (*((char *)a2 + 447) < 0)
    {
      std::string::__init_copy_ctor_external(v31, *((const std::string::value_type **)a2 + 53), *((_QWORD *)a2 + 54));
    }
    else
    {
      v32 = *(_OWORD *)((char *)a2 + 424);
      *((_QWORD *)this + 55) = *((_QWORD *)a2 + 55);
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
    }
    *((_BYTE *)this + 448) = 1;
  }
  *((_WORD *)this + 228) = *((_WORD *)a2 + 228);
  *((_BYTE *)this + 464) = 0;
  *((_BYTE *)this + 488) = 0;
  if (*((_BYTE *)a2 + 488))
  {
    v33 = (std::string *)((char *)this + 464);
    if (*((char *)a2 + 487) < 0)
    {
      std::string::__init_copy_ctor_external(v33, *((const std::string::value_type **)a2 + 58), *((_QWORD *)a2 + 59));
    }
    else
    {
      v34 = *((_OWORD *)a2 + 29);
      *((_QWORD *)this + 60) = *((_QWORD *)a2 + 60);
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    }
    *((_BYTE *)this + 488) = 1;
  }
  return this;
}

webrtc::RTCRtpStreamStats *webrtc::RTCRtpStreamStats::RTCRtpStreamStats(webrtc::RTCRtpStreamStats *this, const webrtc::RTCRtpStreamStats *a2)
{
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  v4 = *((_QWORD *)a2 + 4);
  *(_QWORD *)this = &unk_24C0BC140;
  v5 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 8);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_QWORD *)this + 4) = v4;
  *(_QWORD *)this = off_24C0BC650;
  v7 = *((_QWORD *)a2 + 5);
  *((_BYTE *)this + 48) = 0;
  v8 = (std::string *)((char *)this + 48);
  *((_QWORD *)this + 5) = v7;
  *((_BYTE *)this + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    }
    else
    {
      v9 = *((_OWORD *)a2 + 3);
      *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
    }
    *((_BYTE *)this + 72) = 1;
  }
  *((_BYTE *)this + 80) = 0;
  v10 = (std::string *)((char *)this + 80);
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    if (*((char *)a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
    }
    else
    {
      v11 = *((_OWORD *)a2 + 5);
      *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
    }
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  v12 = (std::string *)((char *)this + 112);
  *((_BYTE *)this + 136) = 0;
  if (*((_BYTE *)a2 + 136))
  {
    if (*((char *)a2 + 135) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_BYTE *)this + 136) = 1;
  }
  return this;
}

void sub_20875C4B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20875C4D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20875C4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875C4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_20875C510(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20875C528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20875CBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37)
{
  void *v37;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

void sub_20875D094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t decompressionOutputCallback(void *a1, _QWORD *a2, unsigned int a3, unsigned int a4, __CVBuffer *a5, CMTime *a6, CMTime *a7)
{
  void *v11;
  void *v12;
  WK_RTCCVPixelBuffer *v13;
  WK_RTCVideoFrame *v14;
  WK_RTCVideoFrame *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CMTime time;

  v11 = a1;
  v12 = v11;
  if (a3 || !a5)
  {
    if (a3 <= 1)
      v16 = 1;
    else
      v16 = a3;
    objc_msgSend(v11, "setError:", v16);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoDecoderH264.mm");
    objc_msgSend(v12, "processFrame:reorderSize:", 0, a2[1]);
  }
  else
  {
    CVBufferRemoveAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5410]);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5490], (CFTypeRef)*MEMORY[0x24BDC54B8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5510], (CFTypeRef)*MEMORY[0x24BDC5568], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5570], (CFTypeRef)*MEMORY[0x24BDC55A8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, CFSTR("ColorInfoGuessedBy"), CFSTR("RTCVideoDecoderH264"), kCVAttachmentMode_ShouldPropagate);
    v13 = -[WK_RTCCVPixelBuffer initWithPixelBuffer:]([WK_RTCCVPixelBuffer alloc], "initWithPixelBuffer:", a5);
    v14 = [WK_RTCVideoFrame alloc];
    time = *a6;
    v15 = -[WK_RTCVideoFrame initWithBuffer:rotation:timeStampNs:](v14, "initWithBuffer:rotation:timeStampNs:", v13, 0, (uint64_t)(CMTimeGetSeconds(&time) * 1000000000.0));
    -[WK_RTCVideoFrame setTimeStamp:](v15, "setTimeStamp:", *a2);
    objc_msgSend(v12, "processFrame:reorderSize:", v15, a2[1]);

  }
  return MEMORY[0x20BD0ADEC](a2, 0x1000C40451B5BE8);
}

void sub_20875D45C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (v1)
    MEMORY[0x20BD0ADEC](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void sub_20875D508(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875D57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WK_RTCVideoDecoderH264;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20875D644(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875D654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20875D668(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20875DAE8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_20875DD1C(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20875DD30(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20875E044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875E140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20875E154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20875E16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

webrtc::RTCVideoFrameReorderQueue *webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameReorderQueue(webrtc::RTCVideoFrameReorderQueue *this)
{
  pthread_mutexattr_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x24BDAC8D0];
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_setpolicy_np(&v3, 3);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 56), &v3);
  pthread_mutexattr_destroy(&v3);
  return this;
}

void sub_20875E2C4(_Unwind_Exception *a1)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v7;

  std::deque<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>>::clear(v1);
  v3 = (void **)v1[1];
  v4 = (void **)v1[2];
  if (v3 != v4)
  {
    do
    {
      v5 = *v3++;
      operator delete(v5);
    }
    while (v3 != v4);
    v7 = v1[1];
    v6 = v1[2];
    if (v6 != v7)
      v1[2] = &v6[(v7 - v6 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  void ***v6;
  uint64_t v7;
  void **v8;
  void *v9;
  void ***v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 >> 9];
    v6 = (void ***)((char *)*v5 + 8 * (v4 & 0x1FF));
    v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v4) & 0x1FF);
    if (v6 != (void ***)v7)
    {
      while (v6)
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          v9 = *v8;
          if (*v8)
          {
            *v8 = 0;

          }
          MEMORY[0x20BD0ADEC](v8, 0x1080C40468F112ELL);
        }
        if ((char *)++v6 - (_BYTE *)*v5 == 4096)
        {
          v10 = (void ***)v5[1];
          ++v5;
          v6 = v10;
        }
        if (v6 == (void ***)v7)
        {
          v2 = (void **)a1[1];
          v3 = (void **)a1[2];
          goto LABEL_13;
        }
      }
      __break(1u);
      return;
    }
LABEL_13:
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 512;
  }
  a1[4] = v13;
}

uint64_t h265DecompressionOutputCallback(void *a1, _QWORD *a2, unsigned int a3, unsigned int a4, __CVBuffer *a5, CMTime *a6, CMTime *a7)
{
  void *v11;
  void *v12;
  WK_RTCCVPixelBuffer *v13;
  WK_RTCVideoFrame *v14;
  WK_RTCVideoFrame *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CMTime time;

  v11 = a1;
  v12 = v11;
  if (a3 || !a5)
  {
    if (a3 <= 1)
      v16 = 1;
    else
      v16 = a3;
    objc_msgSend(v11, "setError:", v16);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoDecoderH265.mm");
    objc_msgSend(v12, "processFrame:reorderSize:", 0, a2[1]);
  }
  else
  {
    CVBufferRemoveAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5410]);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5490], (CFTypeRef)*MEMORY[0x24BDC54B8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5510], (CFTypeRef)*MEMORY[0x24BDC5568], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5570], (CFTypeRef)*MEMORY[0x24BDC55A8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, CFSTR("ColorInfoGuessedBy"), CFSTR("RTCVideoDecoderH265"), kCVAttachmentMode_ShouldPropagate);
    v13 = -[WK_RTCCVPixelBuffer initWithPixelBuffer:]([WK_RTCCVPixelBuffer alloc], "initWithPixelBuffer:", a5);
    v14 = [WK_RTCVideoFrame alloc];
    time = *a6;
    v15 = -[WK_RTCVideoFrame initWithBuffer:rotation:timeStampNs:](v14, "initWithBuffer:rotation:timeStampNs:", v13, 0, (uint64_t)(CMTimeGetSeconds(&time) * 1000000000.0));
    -[WK_RTCVideoFrame setTimeStamp:](v15, "setTimeStamp:", *a2);
    objc_msgSend(v12, "processFrame:reorderSize:", v15, a2[1]);

  }
  return MEMORY[0x20BD0ADEC](a2, 0x1000C40451B5BE8);
}

void sub_20875E654(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  if (v1)
    MEMORY[0x20BD0ADEC](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void sub_20875E72C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WK_RTCVideoDecoderH265;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_20875E7F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875E804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_20875E818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_20875ED98(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

void sub_20875F4C0(_Unwind_Exception *a1)
{
  const void *v1;

  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_20875F7C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875F8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20875F8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_20875F8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_20875FAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a9)
  {
    v15 = a9 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_20875FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void vp9DecompressionOutputCallback(void *a1, _QWORD *a2, unsigned int a3, unsigned int a4, __CVBuffer *a5, CMTime *a6, CMTime *a7)
{
  void *v11;
  void *v12;
  const void *v13;
  WK_RTCCVPixelBuffer *v14;
  WK_RTCVideoFrame *v15;
  WK_RTCVideoFrame *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CMTime time;
  _QWORD *v26;

  v11 = a1;
  v12 = v11;
  v26 = a2;
  if (a3 || !a5)
  {
    if (a3 <= 1)
      v17 = 1;
    else
      v17 = a3;
    objc_msgSend(v11, "setError:", v17);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoDecoderVTBVP9.mm");
    (*(void (**)(void))(*a2 + 16))();
  }
  else
  {
    v13 = (const void *)objc_msgSend(v11, "colorSpace");
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5410], v13, kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5490], (CFTypeRef)*MEMORY[0x24BDC54B8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5510], (CFTypeRef)*MEMORY[0x24BDC5538], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, (CFStringRef)*MEMORY[0x24BDC5570], (CFTypeRef)*MEMORY[0x24BDC55A8], kCVAttachmentMode_ShouldPropagate);
    CVBufferSetAttachment(a5, CFSTR("ColorInfoGuessedBy"), CFSTR("RTCVideoDecoderVTBVP9"), kCVAttachmentMode_ShouldPropagate);
    v14 = -[WK_RTCCVPixelBuffer initWithPixelBuffer:]([WK_RTCCVPixelBuffer alloc], "initWithPixelBuffer:", a5);
    v15 = [WK_RTCVideoFrame alloc];
    time = *a6;
    v16 = -[WK_RTCVideoFrame initWithBuffer:rotation:timeStampNs:](v15, "initWithBuffer:rotation:timeStampNs:", v14, 0, (uint64_t)(CMTimeGetSeconds(&time) * 1000000000.0));
    -[WK_RTCVideoFrame setTimeStamp:](v16, "setTimeStamp:", a2[1]);
    (*(void (**)(void))(*a2 + 16))();

  }
  MEMORY[0x20BD0ADEC](a2, 0x1080C40FC6463CFLL);

}

void sub_20875FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  std::unique_ptr<RTCFrameDecodeParams>::~unique_ptr[abi:sn180100]((id **)va);

  _Unwind_Resume(a1);
}

void sub_20875FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  va_list va;

  va_start(va, a8);

  std::unique_ptr<RTCFrameDecodeParams>::~unique_ptr[abi:sn180100]((id **)va);
  _Unwind_Resume(a1);
}

void sub_20875FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);
  std::unique_ptr<RTCFrameDecodeParams>::~unique_ptr[abi:sn180100]((id **)va);

  _Unwind_Resume(a1);
}

id **std::unique_ptr<RTCFrameDecodeParams>::~unique_ptr[abi:sn180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x20BD0ADEC](v2, 0x1080C40FC6463CFLL);
  }
  return a1;
}

void sub_20875FF60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20875FFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)WK_RTCVideoDecoderVTBVP9;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2087600C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2087600E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208760730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  const void *v9;
  va_list va;

  va_start(va, a9);
  std::unique_ptr<RTCFrameDecodeParams>::~unique_ptr[abi:sn180100]((id **)va);
  CFRelease(v9);
  _Unwind_Resume(a1);
}

void sub_208760C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a18)
    (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

void sub_208761208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ExtractProfile(uint64_t this, const H264ProfileLevelId *a2)
{
  switch((int)this)
  {
    case 0:
    case 1:
      switch((int)a2)
      {
        case 0:
        case 10:
        case 11:
        case 12:
        case 13:
        case 20:
        case 21:
        case 22:
          this = *MEMORY[0x24BDF9700];
          break;
        case 30:
          this = *MEMORY[0x24BDF96B8];
          break;
        case 31:
          this = *MEMORY[0x24BDF96C0];
          break;
        case 32:
          this = *MEMORY[0x24BDF96C8];
          break;
        case 40:
          this = *MEMORY[0x24BDF96D0];
          break;
        case 41:
          this = *MEMORY[0x24BDF96D8];
          break;
        case 42:
          this = *MEMORY[0x24BDF96E0];
          break;
        case 50:
          this = *MEMORY[0x24BDF96E8];
          break;
        case 51:
          this = *MEMORY[0x24BDF96F0];
          break;
        case 52:
          this = *MEMORY[0x24BDF96F8];
          break;
        default:
          goto LABEL_2;
      }
      break;
    case 2:
      switch((int)a2)
      {
        case 0:
        case 10:
        case 11:
        case 12:
        case 13:
        case 20:
        case 21:
        case 22:
          this = *MEMORY[0x24BDF97C0];
          break;
        case 30:
          this = *MEMORY[0x24BDF9778];
          break;
        case 31:
          this = *MEMORY[0x24BDF9780];
          break;
        case 32:
          this = *MEMORY[0x24BDF9788];
          break;
        case 40:
          this = *MEMORY[0x24BDF9790];
          break;
        case 41:
          this = *MEMORY[0x24BDF9798];
          break;
        case 42:
          this = *MEMORY[0x24BDF97A0];
          break;
        case 50:
          this = *MEMORY[0x24BDF97A8];
          break;
        case 51:
          this = *MEMORY[0x24BDF97B0];
          break;
        case 52:
          this = *MEMORY[0x24BDF97B8];
          break;
        default:
          goto LABEL_2;
      }
      break;
    case 3:
    case 4:
    case 5:
LABEL_2:
      this = *MEMORY[0x24BDF9770];
      break;
    default:
      return this;
  }
  return this;
}

void sub_20876145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WK_RTCVideoEncoderH264;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_2087616D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087616E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087616F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::computeDefaultBitRateKbps(uint64_t this, int a2, const H264ProfileLevelId *a3)
{
  if ((_DWORD)this)
    return this;
  this = 64;
  switch(a2)
  {
    case 0:
      this = 128;
      break;
    case 11:
      this = 192;
      break;
    case 12:
      this = 384;
      break;
    case 13:
      this = 768;
      break;
    case 20:
    case 21:
    case 22:
      this = 4000;
      break;
    case 30:
      this = 10000;
      break;
    case 31:
      this = 14000;
      break;
    case 32:
    case 40:
      this = 20000;
      break;
    case 41:
    case 42:
      this = 50000;
      break;
    case 50:
      this = 135000;
      break;
    case 51:
    case 52:
      this = 240000;
      break;
    default:
      return this;
  }
  return this;
}

void sub_208762064(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Unwind_Resume(a1);
}

CVPixelBufferRef `anonymous namespace'::CreatePixelBuffer(_anonymous_namespace_ *this, OpaqueVTCompressionSession *a2)
{
  __CVPixelBufferPool *PixelBufferPool;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CVPixelBufferRef pixelBufferOut;

  if (!this)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_13:
    rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm");
    return 0;
  }
  PixelBufferPool = VTCompressionSessionGetPixelBufferPool(this);
  if (!PixelBufferPool)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_13;
  }
  pixelBufferOut = 0;
  if (!CVPixelBufferPoolCreatePixelBuffer(0, PixelBufferPool, &pixelBufferOut))
    return pixelBufferOut;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoEncoderH264.mm");
  return 0;
}

void std::vector<unsigned char>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + a2;
  }
}

void std::vector<unsigned char>::shrink_to_fit(char **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  char *v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;

  v1 = a1[1];
  v2 = *a1;
  v3 = v1 - *a1;
  if (a1[2] - *a1 > v3)
  {
    if (v1 == v2)
    {
      v6 = (char *)(v1 - *a1);
      v5 = v6;
LABEL_20:
      *a1 = v5;
      a1[1] = v6;
      a1[2] = v6;
      if (v2)
        operator delete(v2);
      return;
    }
    v5 = (char *)operator new(v1 - *a1);
    v6 = &v5[v3];
    if (v3 < 8)
    {
      v7 = &v5[v3];
      goto LABEL_18;
    }
    v7 = &v5[v3];
    if ((unint64_t)(v2 - v5) >= 0x20)
    {
      if (v3 < 0x20)
      {
        v8 = 0;
        goto LABEL_13;
      }
      v8 = v3 & 0xFFFFFFFFFFFFFFE0;
      v9 = v1 - 16;
      v10 = &v5[v1 - 16 - v2];
      v11 = v3 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v12 = *(_OWORD *)v9;
        *((_OWORD *)v10 - 1) = *((_OWORD *)v9 - 1);
        *(_OWORD *)v10 = v12;
        v10 -= 32;
        v9 -= 32;
        v11 -= 32;
      }
      while (v11);
      if (v3 == v8)
        goto LABEL_20;
      if ((v3 & 0x18) != 0)
      {
LABEL_13:
        v7 = &v6[-(v3 & 0xFFFFFFFFFFFFFFF8)];
        v13 = &v1[-v8 - 8];
        v14 = v13 - v2;
        v15 = v8 - (v3 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v16 = *(_QWORD *)v13;
          v13 -= 8;
          *(_QWORD *)&v5[v14] = v16;
          v14 -= 8;
          v15 += 8;
        }
        while (v15);
        v1 -= v3 & 0xFFFFFFFFFFFFFFF8;
        if (v3 == (v3 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_20;
        goto LABEL_18;
      }
      v7 = &v6[-v8];
      v1 -= v8;
    }
LABEL_18:
    v17 = v7 - 1;
    do
    {
      v18 = *--v1;
      *v17-- = v18;
    }
    while (v1 != v2);
    goto LABEL_20;
  }
}

id **std::unique_ptr<`anonymous namespace'::RTCFrameEncodeParams>::~unique_ptr[abi:sn180100](id **a1)
{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x20BD0ADEC](v2, 0x1080C40613243D1);
  }
  return a1;
}

{
  id *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x20BD0ADEC](v2, 0x1080C40B94625D9);
  }
  return a1;
}

void sub_2087626E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_20876270C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2087628E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::compressionOutputCallback(_anonymous_namespace_ *this, unsigned int *a2, void *a3, uint64_t a4, uint64_t a5, opaqueCMSampleBuffer *a6)
{
  uint64_t result;
  uint64_t v8;

  if (a2)
  {
    LOBYTE(v8) = *((_BYTE *)a2 + 56);
    objc_msgSend(*(id *)a2, "frameWasEncoded:flags:sampleBuffer:codecSpecificInfo:width:height:renderTimeMs:timestamp:duration:rotation:isKeyFrameRequired:", a3, a4, a5, *((_QWORD *)a2 + 1), a2[4], a2[5], *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), *((_QWORD *)a2 + 6), v8, a2);

    return MEMORY[0x20BD0ADEC](a2, 0x1080C40613243D1);
  }
  return result;
}

void sub_208762BF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_2087635BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  void *v31;

  _Block_object_dispose(&a25, 8);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100](&a31);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 48) = 0;
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (v2)
      MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t *std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
    MEMORY[0x20BD0ADEC](v2, 0x1010C40A79CA2DELL);
  }
  return a1;
}

void sub_208763B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_208763BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)WK_RTCVideoEncoderH265;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_208763CCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2087646A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

void `anonymous namespace'::compressionOutputCallback(_anonymous_namespace_ *this, _DWORD *a2, void *a3, uint64_t a4, uint64_t a5, opaqueCMSampleBuffer *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (a2)
  {
    if (*(_QWORD *)a2)
    {
      LODWORD(v9) = a2[6];
      objc_msgSend(*(id *)a2, "frameWasEncoded:flags:sampleBuffer:width:height:renderTimeMs:timestamp:rotation:", a3, a4, a5, a2[2], a2[3], *((_QWORD *)a2 + 2), v9, *((_QWORD *)a2 + 4));

      goto LABEL_6;
    }
  }
  else
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoEncoderH265.mm", 150, "params", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, (uint64_t)a6, a7, a8, v9);
  }
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/sdk/objc/components/video_codec/RTCVideoEncoderH265.mm", 153, "encodeParams->encoder", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, (uint64_t)a6, a7, a8, v9);
  __break(1u);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

void sub_208764C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  _Unwind_Resume(a1);
}

void sub_208764C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  _Unwind_Resume(a1);
}

void sub_20876534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20876539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087653B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087653C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087653DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087653F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  va_list va;

  va_start(va, a12);

  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087654B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2087654C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  std::unique_ptr<rtc::BufferT<unsigned char,false>>::~unique_ptr[abi:sn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_208765754(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_208765768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208765AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a9)
  {
    v15 = a9 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_208765C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a9)
  {
    v15 = a9 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(unsigned int *))(*(_QWORD *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_208765D4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_208765E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void webrtc::RTCVideoFrameReorderQueue::append(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  pthread_mutex_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  void *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  char *v39;
  unint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  __int128 *v81;
  _OWORD *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  int64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  _OWORD *v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  int64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  id v131;

  v5 = a2;
  v6 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  v7 = (_QWORD *)operator new();
  v8 = v5;
  *v7 = v8;
  v131 = v8;
  v9 = objc_msgSend(v8, "timeStamp");
  v10 = *(char **)(a1 + 8);
  v11 = *(char **)(a1 + 16);
  v12 = v11 - v10;
  v7[1] = v9;
  v7[2] = a3;
  if (v11 == v10)
    v13 = 0;
  else
    v13 = ((v11 - v10) << 6) - 1;
  v15 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  if (v13 == v14 + v15)
  {
    if (v15 >= 0x200)
    {
      *(_QWORD *)(a1 + 32) = v15 - 512;
      v16 = v10 + 8;
      v17 = *(_QWORD *)v10;
      *(_QWORD *)(a1 + 8) = v10 + 8;
      if (v11 != *(char **)(a1 + 24))
        goto LABEL_7;
      v32 = *(char **)a1;
      if ((unint64_t)v16 > *(_QWORD *)a1)
      {
        v33 = (uint64_t)&v16[-*(_QWORD *)a1] >> 3;
        if (v33 >= -1)
          v34 = v33 + 1;
        else
          v34 = v33 + 2;
        v35 = v34 >> 1;
        v36 = -v35;
        v37 = &v16[-8 * v35];
        v38 = v11 - v16;
        if (v11 != v16)
        {
          memmove(&v16[-8 * v35], v16, v11 - v16);
          v11 = *(char **)(a1 + 8);
        }
        v39 = &v11[8 * v36];
        v11 = &v37[v38];
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = &v37[v38];
        goto LABEL_8;
      }
      if (v11 == v32)
        v40 = 1;
      else
        v40 = (v11 - v32) >> 2;
      if (!(v40 >> 61))
      {
        v41 = (char *)operator new(8 * v40);
        v42 = &v41[8 * (v40 >> 2)];
        v44 = v11 - v16;
        v43 = v11 == v16;
        v11 = v42;
        if (v43)
          goto LABEL_107;
        v11 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = v44 - 8;
        if (v45 >= 0x38)
        {
          v108 = &v41[8 * (v40 >> 2)];
          v46 = v108;
          if ((unint64_t)(v108 - v16) >= 0x20)
          {
            v109 = (v45 >> 3) + 1;
            v110 = 8 * (v109 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v42[v110];
            v16 += v110;
            v111 = (__int128 *)(v10 + 24);
            v112 = v108 + 16;
            v113 = v109 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v114 = *v111;
              *(v112 - 1) = *(v111 - 1);
              *v112 = v114;
              v111 += 2;
              v112 += 2;
              v113 -= 4;
            }
            while (v113);
            if (v109 == (v109 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_107:
              *(_QWORD *)a1 = v41;
              *(_QWORD *)(a1 + 8) = v42;
              *(_QWORD *)(a1 + 16) = v11;
              *(_QWORD *)(a1 + 24) = &v41[8 * v40];
              if (v32)
              {
                operator delete(v32);
                v11 = *(char **)(a1 + 16);
              }
LABEL_7:
              if (v11)
              {
LABEL_8:
                *(_QWORD *)v11 = v17;
LABEL_86:
                v11 = (char *)(*(_QWORD *)(a1 + 16) + 8);
                *(_QWORD *)(a1 + 16) = v11;
LABEL_87:
                v14 = *(_QWORD *)(a1 + 40);
                v10 = *(char **)(a1 + 8);
                goto LABEL_88;
              }
LABEL_126:
              __break(1u);
              return;
            }
          }
        }
        else
        {
          v46 = &v41[8 * (v40 >> 2)];
        }
        do
        {
          v115 = *(_QWORD *)v16;
          v16 += 8;
          *(_QWORD *)v46 = v115;
          v46 += 8;
        }
        while (v46 != v11);
        goto LABEL_107;
      }
LABEL_124:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v18 = v12 >> 3;
    v19 = *(char **)(a1 + 24);
    v20 = *(char **)a1;
    v21 = (uint64_t)&v19[-*(_QWORD *)a1];
    if (v12 >> 3 >= (unint64_t)(v21 >> 3))
    {
      v24 = v21 >> 2;
      if (v19 == v20)
        v25 = 1;
      else
        v25 = v24;
      if (!(v25 >> 61))
      {
        v26 = (char *)operator new(8 * v25);
        v27 = operator new(0x1000uLL);
        v28 = &v26[8 * v18];
        v29 = &v26[8 * v25];
        if (v18 == v25)
        {
          v30 = v27;
          if (v12 < 1)
          {
            if (v11 == v10)
              v48 = 1;
            else
              v48 = v12 >> 2;
            if (v48 >> 61)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v28 = (char *)operator new(8 * v48);
            operator delete(v26);
            v29 = &v28[8 * v48];
            v10 = *(char **)(a1 + 8);
            v11 = *(char **)(a1 + 16);
            v26 = v28;
          }
          else
          {
            v31 = v18 + 2;
            if (v18 >= -1)
              v31 = v18 + 1;
            v28 -= 8 * (v31 >> 1);
          }
          v27 = v30;
        }
        *(_QWORD *)v28 = v27;
        v49 = v28 + 8;
        if (v11 == v10)
        {
          v50 = v28;
          v51 = v28 + 8;
        }
        else
        {
          do
          {
            if (v28 == v26)
            {
              if (v49 >= v29)
              {
                if (v29 == v28)
                  v57 = 1;
                else
                  v57 = (v29 - v28) >> 2;
                if (v57 >> 61)
                  std::__throw_bad_array_new_length[abi:sn180100]();
                v58 = (char *)operator new(8 * v57);
                v26 = v58;
                v59 = (v57 + 3) >> 2;
                v53 = &v58[8 * v59];
                v51 = v53;
                v60 = v49 - v28;
                if (v49 != v28)
                {
                  v51 = &v53[v60 & 0xFFFFFFFFFFFFFFF8];
                  v61 = v60 - 8;
                  v62 = &v58[8 * v59];
                  v63 = v28;
                  if (v61 < 0x38)
                    goto LABEL_129;
                  v64 = 8 * v59;
                  v62 = &v58[8 * v59];
                  v63 = v28;
                  if ((unint64_t)(v62 - v28) < 0x20)
                    goto LABEL_129;
                  v65 = (v61 >> 3) + 1;
                  v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
                  v62 = &v53[v66];
                  v63 = &v28[v66];
                  v67 = (__int128 *)(v28 + 16);
                  v68 = &v58[v64 + 16];
                  v69 = v65 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v70 = *v67;
                    *((_OWORD *)v68 - 1) = *(v67 - 1);
                    *(_OWORD *)v68 = v70;
                    v67 += 2;
                    v68 += 32;
                    v69 -= 4;
                  }
                  while (v69);
                  if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_129:
                    do
                    {
                      v71 = *(_QWORD *)v63;
                      v63 += 8;
                      *(_QWORD *)v62 = v71;
                      v62 += 8;
                    }
                    while (v62 != v51);
                  }
                }
                v29 = &v58[8 * v57];
                operator delete(v28);
              }
              else
              {
                v55 = (v29 - v49) >> 3;
                if (v55 >= -1)
                  v56 = v55 + 1;
                else
                  v56 = v55 + 2;
                v51 = &v49[8 * (v56 >> 1)];
                v53 = &v28[8 * (v56 >> 1)];
                if (v49 == v28)
                {
                  v26 = v49;
                }
                else
                {
                  memmove(&v28[8 * (v56 >> 1)], v28, v49 - v28);
                  v26 = v28;
                }
              }
            }
            else
            {
              v53 = v28;
              v51 = v49;
            }
            v54 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v53 - 1) = v54;
            v50 = v53 - 8;
            v49 = v51;
            v28 = v50;
          }
          while (v11 != *(char **)(a1 + 8));
        }
        v52 = *(char **)a1;
        *(_QWORD *)a1 = v26;
        *(_QWORD *)(a1 + 8) = v50;
        v11 = v51;
        *(_QWORD *)(a1 + 16) = v51;
        *(_QWORD *)(a1 + 24) = v29;
        v6 = (pthread_mutex_t *)(a1 + 56);
        if (v52)
        {
          operator delete(v52);
          v11 = *(char **)(a1 + 16);
        }
        goto LABEL_87;
      }
      goto LABEL_124;
    }
    v22 = operator new(0x1000uLL);
    v23 = v22;
    if (v19 != v11)
    {
      if (v11)
      {
        *(_QWORD *)v11 = v22;
        goto LABEL_86;
      }
      goto LABEL_126;
    }
    if (v10 == v20)
    {
      if (v11 == v10)
        v72 = 1;
      else
        v72 = (v19 - v10) >> 2;
      if (v72 >> 61)
        goto LABEL_124;
      v73 = (char *)operator new(8 * v72);
      v74 = (v72 + 3) >> 2;
      v47 = &v73[8 * v74];
      v75 = v47;
      if (v11 != v10)
      {
        v75 = &v47[8 * v18];
        v76 = &v73[8 * v74];
        v77 = v10;
        if ((unint64_t)(v12 - 8) < 0x38)
          goto LABEL_130;
        v78 = &v73[8 * v74];
        v76 = v78;
        v77 = v10;
        if ((unint64_t)(v78 - v10) < 0x20)
          goto LABEL_130;
        v79 = ((unint64_t)(v12 - 8) >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v76 = &v47[v80];
        v77 = &v10[v80];
        v81 = (__int128 *)(v10 + 16);
        v82 = v78 + 16;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *v81;
          *(v82 - 1) = *(v81 - 1);
          *v82 = v84;
          v81 += 2;
          v82 += 2;
          v83 -= 4;
        }
        while (v83);
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_130:
          do
          {
            v85 = *(_QWORD *)v77;
            v77 += 8;
            *(_QWORD *)v76 = v85;
            v76 += 8;
          }
          while (v76 != v75);
        }
      }
      *(_QWORD *)a1 = v73;
      *(_QWORD *)(a1 + 8) = v47;
      *(_QWORD *)(a1 + 16) = v75;
      *(_QWORD *)(a1 + 24) = &v73[8 * v72];
      if (v10)
      {
        operator delete(v10);
        v47 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v47 = v10;
    }
    *((_QWORD *)v47 - 1) = v23;
    v86 = *(char **)(a1 + 8);
    v87 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v86 - 8;
    v88 = *((_QWORD *)v86 - 1);
    *(_QWORD *)(a1 + 8) = v86;
    if (v87 != *(char **)(a1 + 24))
      goto LABEL_84;
    v101 = *(char **)a1;
    if ((unint64_t)v86 > *(_QWORD *)a1)
    {
      v102 = (uint64_t)&v86[-*(_QWORD *)a1] >> 3;
      if (v102 >= -1)
        v103 = v102 + 1;
      else
        v103 = v102 + 2;
      v104 = v103 >> 1;
      v105 = -v104;
      v106 = &v86[-8 * v104];
      v107 = v87 - v86;
      if (v87 != v86)
      {
        memmove(&v86[-8 * v104], v86, v87 - v86);
        v86 = *(char **)(a1 + 8);
      }
      v87 = &v106[v107];
      *(_QWORD *)(a1 + 8) = &v86[8 * v105];
      *(_QWORD *)(a1 + 16) = &v106[v107];
      goto LABEL_85;
    }
    if (v87 == v101)
      v116 = 1;
    else
      v116 = (v87 - v101) >> 2;
    if (v116 >> 61)
      goto LABEL_124;
    v117 = (char *)operator new(8 * v116);
    v118 = &v117[8 * (v116 >> 2)];
    v119 = v87 - v86;
    v43 = v87 == v86;
    v87 = v118;
    if (!v43)
    {
      v87 = &v118[v119 & 0xFFFFFFFFFFFFFFF8];
      v120 = v119 - 8;
      if (v120 < 0x38)
      {
        v121 = &v117[8 * (v116 >> 2)];
        do
        {
LABEL_120:
          v130 = *(_QWORD *)v86;
          v86 += 8;
          *(_QWORD *)v121 = v130;
          v121 += 8;
        }
        while (v121 != v87);
        goto LABEL_121;
      }
      v122 = &v117[8 * (v116 >> 2)];
      v121 = v122;
      if ((unint64_t)(v122 - v86) < 0x20)
        goto LABEL_120;
      v123 = (v120 >> 3) + 1;
      v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
      v121 = &v118[v124];
      v125 = &v86[v124];
      v126 = (__int128 *)(v86 + 16);
      v127 = v122 + 16;
      v128 = v123 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v129 = *v126;
        *(v127 - 1) = *(v126 - 1);
        *v127 = v129;
        v126 += 2;
        v127 += 2;
        v128 -= 4;
      }
      while (v128);
      v86 = v125;
      if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_120;
    }
LABEL_121:
    *(_QWORD *)a1 = v117;
    *(_QWORD *)(a1 + 8) = v118;
    *(_QWORD *)(a1 + 16) = v87;
    *(_QWORD *)(a1 + 24) = &v117[8 * v116];
    if (v101)
    {
      operator delete(v101);
      v87 = *(char **)(a1 + 16);
    }
LABEL_84:
    if (!v87)
      goto LABEL_126;
LABEL_85:
    *(_QWORD *)v87 = v88;
    goto LABEL_86;
  }
LABEL_88:
  if (v11 == v10)
    goto LABEL_126;
  v89 = *(_QWORD *)(a1 + 32);
  v90 = *(_QWORD *)&v10[((v89 + v14) >> 6) & 0x3FFFFFFFFFFFFF8];
  if (!v90)
    goto LABEL_126;
  *(_QWORD *)(v90 + 8 * (((_WORD)v89 + (_WORD)v14) & 0x1FF)) = v7;
  v91 = v14 + 1;
  *(_QWORD *)(a1 + 40) = v14 + 1;
  v92 = &v10[8 * (v89 >> 9)];
  v93 = v89 & 0x1FF;
  v94 = (uint64_t *)(*(_QWORD *)v92 + 8 * v93);
  v95 = v89 + v91;
  v96 = &v10[8 * (v95 >> 9)];
  v97 = v95 & 0x1FF;
  v98 = (uint64_t *)(*(_QWORD *)v96 + 8 * v97);
  if (v98 == v94 || (v99 = v97 + ((v96 - v92) << 6), v99 == v93))
    v100 = 0;
  else
    v100 = 63 - __clz(v99 - v93);
  std::__introsort<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,false>((unint64_t)v92, v94, v96, v98, 2 * v100, 1);
  pthread_mutex_unlock(v6);

}

void sub_2087665E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_mutex_t *a9, void *a10, uint64_t a11, void **a12)
{
  void *v12;
  void *v13;

  operator delete(v12);
  operator delete(v13);
  std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>::~unique_ptr[abi:sn180100](&a12);
  pthread_mutex_unlock(a9);

  _Unwind_Resume(a1);
}

void sub_208766640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_mutex_t *a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;
  pthread_mutex_t *v12;

  MEMORY[0x20BD0ADEC](v11, 0x1080C40468F112ELL);
  pthread_mutex_unlock(v12);

  _Unwind_Resume(a1);
}

void sub_208766678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, pthread_mutex_t *a9, uint64_t a10)
{
  void *v10;
  pthread_mutex_t *v11;

  pthread_mutex_unlock(v11);

  _Unwind_Resume(a1);
}

void sub_208766698(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ***std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>::~unique_ptr[abi:sn180100](void ***a1)
{
  void **v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      *v2 = 0;

    }
    MEMORY[0x20BD0ADEC](v2, 0x1080C40468F112ELL);
  }
  return a1;
}

id webrtc::RTCVideoFrameReorderQueue::takeIfAvailable(webrtc::RTCVideoFrameReorderQueue *this)
{
  pthread_mutex_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v3 = *((_QWORD *)this + 5);
  if (v3
    && (v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + ((*((_QWORD *)this + 4) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * (*((_QWORD *)this + 4) & 0x1FFLL)),
        v3 > *(_QWORD *)(v4 + 16)))
  {
    v5 = *(void **)v4;
    *(_QWORD *)v4 = 0;
    std::deque<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>>::pop_front((uint64_t)this);
  }
  else
  {
    v5 = 0;
  }
  pthread_mutex_unlock(v2);
  return v5;
}

void sub_208766788(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void std::deque<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>>::pop_front(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v1 >> 6) & 0x3FFFFFFFFFFFFF8));
  if (v2)
  {
    v4 = 8 * (*(_QWORD *)(a1 + 32) & 0x1FFLL);
    v5 = *(void ***)(v2 + v4);
    *(_QWORD *)(v2 + v4) = 0;
    if (v5)
    {
      v6 = *v5;
      if (*v5)
      {
        *v5 = 0;

      }
      MEMORY[0x20BD0ADEC](v5, 0x1080C40468F112ELL);
      v1 = *(_QWORD *)(a1 + 32);
    }
    v7 = *(_QWORD *)(a1 + 40) - 1;
    v8 = v1 + 1;
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
    if (v8 >= 0x400)
    {
      operator delete(**(void ***)(a1 + 8));
      *(_QWORD *)(a1 + 8) += 8;
      *(_QWORD *)(a1 + 32) -= 512;
    }
  }
  else
  {
    __break(1u);
  }
}

id webrtc::RTCVideoFrameReorderQueue::takeIfAny(webrtc::RTCVideoFrameReorderQueue *this)
{
  pthread_mutex_t *v2;
  void **v3;
  void *v4;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  if (*((_QWORD *)this + 5))
  {
    v3 = *(void ***)(*(_QWORD *)(*((_QWORD *)this + 1) + ((*((_QWORD *)this + 4) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*((_QWORD *)this + 4) & 0x1FFLL));
    v4 = *v3;
    *v3 = 0;
    std::deque<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>>::pop_front((uint64_t)this);
  }
  else
  {
    v4 = 0;
  }
  pthread_mutex_unlock(v2);
  return v4;
}

void sub_2087668CC(_Unwind_Exception *a1)
{
  pthread_mutex_t *v1;
  void *v2;

  pthread_mutex_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,false>(unint64_t a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t v62;
  unint64_t j;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v75;
  _BOOL4 v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  void *v90;
  void **v91;
  void *v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  char *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  void ***v158;
  uint64_t *v159;
  void **v160;
  void **v161;
  uint64_t v162;
  void *v163;
  void **v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t *v172;
  unint64_t v173;
  uint64_t *i;
  uint64_t *v175;
  void ****v176;
  uint64_t v177;
  void ***v178;
  uint64_t v179;
  uint64_t v180;
  void **v181;
  void ***v182;
  uint64_t v183;
  void ***v184;
  void **v185;
  void *v186;
  void **v187;
  void *v188;
  int64_t v189;
  int64_t v190;
  char *v191;
  int64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  int64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void **v208;
  void ***v209;
  void **v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void **v218;
  void *v219;
  uint64_t v220;
  uint64_t v222;
  uint64_t v223;
  void ***v224;
  uint64_t **v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void **v232;
  void **v233;
  void *v234;
  uint64_t v235;
  uint64_t *v236;
  void **v237;
  void **v238;
  void *v239;
  uint64_t *v240;
  uint64_t *v241;
  void **v242;
  void *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void **v251;
  uint64_t v252;
  void **v253;
  unint64_t v254;
  uint64_t v255;
  void ***v256;
  void **v257;
  void *v258;
  int64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t *v269;
  unint64_t v270;
  _QWORD *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  void ****v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  void ***v299;
  uint64_t v300;
  void ***v301;
  void **v302;
  void *v303;
  void **v304;
  void *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char *v309;
  uint64_t **v310;

  if (a4 == a2)
    return;
  v7 = a4;
  v9 = a2;
  v11 = 511;
  v12 = 509;
  v13 = 512;
  while (2)
  {
    v14 = *(uint64_t **)a3;
    v15 = (uint64_t)v7 - *(_QWORD *)a3;
    v16 = v15 >> 3;
    v17 = *(uint64_t **)a1;
    v18 = (uint64_t)v9 - *(_QWORD *)a1;
    v19 = v18 >> 3;
    v20 = (v15 >> 3) + ((_QWORD)&a3[-a1] << 6) - (v18 >> 3);
    switch(v20)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (v7 == v14)
          v7 = (uint64_t *)(*((_QWORD *)a3 - 1) + 4096);
        v166 = *(v7 - 1);
        v167 = *v9;
        if (*(_QWORD *)(v166 + 8) < *(_QWORD *)(*v9 + 8))
        {
          *v9 = v166;
          *(v7 - 1) = v167;
        }
        return;
      case 3:
        if (v18 < -7)
          v168 = *(_QWORD *)(a1 - 8 * ((unint64_t)(510 - v19) >> 9)) + 8 * (~(510 - (_WORD)v19) & 0x1FF);
        else
          v168 = *(_QWORD *)(a1 + (((unint64_t)(v19 + 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v19 + 1) & 0x1FF);
        if (v7 == v14)
          v7 = (uint64_t *)(*((_QWORD *)a3 - 1) + 4096);
        v261 = *(_QWORD *)v168;
        v262 = *v9;
        v263 = *(_QWORD *)(*(_QWORD *)v168 + 8);
        v264 = *(_QWORD *)(*v9 + 8);
        v265 = *(v7 - 1);
        v266 = *(_QWORD *)(v265 + 8);
        if (v263 >= v264)
        {
          if (v266 < v263)
          {
            *(_QWORD *)v168 = v265;
            *(v7 - 1) = v261;
            v274 = *v9;
            if (*(_QWORD *)(*(_QWORD *)v168 + 8) < *(_QWORD *)(*v9 + 8))
            {
              *v9 = *(_QWORD *)v168;
              *(_QWORD *)v168 = v274;
            }
          }
        }
        else if (v266 >= v263)
        {
          *v9 = v261;
          *(_QWORD *)v168 = v262;
          v276 = *(v7 - 1);
          if (*(_QWORD *)(v276 + 8) < v264)
          {
            *(_QWORD *)v168 = v276;
            *(v7 - 1) = v262;
          }
        }
        else
        {
          *v9 = v265;
          *(v7 - 1) = v262;
        }
        return;
      case 4:
        if (v18 >= -7)
        {
          v169 = *(_QWORD *)(a1 + (((unint64_t)(v19 + 1) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v19 + 1) & 0x1FF);
          v170 = v19 + 2;
LABEL_372:
          v267 = *(_QWORD *)(a1 + ((v170 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v170 & 0x1FF);
          goto LABEL_387;
        }
        v169 = *(_QWORD *)(a1 - 8 * ((unint64_t)(510 - v19) >> 9)) + 8 * (~(510 - (_WORD)v19) & 0x1FF);
        if ((unint64_t)v18 >= 0xFFFFFFFFFFFFFFF1)
        {
          v170 = 1;
          goto LABEL_372;
        }
        v267 = *(_QWORD *)(a1 - 8 * ((unint64_t)(509 - v19) >> 9)) + 8 * (~(509 - (_WORD)v19) & 0x1FF);
LABEL_387:
        if (v7 == v14)
          v7 = (uint64_t *)(*((_QWORD *)a3 - 1) + 4096);
        v277 = *(_QWORD *)v169;
        v278 = *v9;
        v279 = *(_QWORD *)(*(_QWORD *)v169 + 8);
        v280 = *(_QWORD *)(*v9 + 8);
        v281 = *(_QWORD *)v267;
        v282 = *(_QWORD *)(*(_QWORD *)v267 + 8);
        if (v279 >= v280)
        {
          if (v282 >= v279)
          {
            v277 = *(_QWORD *)v267;
          }
          else
          {
            *(_QWORD *)v169 = v281;
            *(_QWORD *)v267 = v277;
            v283 = *v9;
            if (*(_QWORD *)(*(_QWORD *)v169 + 8) < *(_QWORD *)(*v9 + 8))
            {
              *v9 = *(_QWORD *)v169;
              *(_QWORD *)v169 = v283;
              v277 = *(_QWORD *)v267;
            }
          }
          goto LABEL_401;
        }
        if (v282 >= v279)
        {
          *v9 = v277;
          *(_QWORD *)v169 = v278;
          v277 = *(_QWORD *)v267;
          if (*(_QWORD *)(*(_QWORD *)v267 + 8) >= v280)
          {
LABEL_401:
            v284 = *(v7 - 1);
            if (*(_QWORD *)(v284 + 8) < *(_QWORD *)(v277 + 8))
            {
              *(_QWORD *)v267 = v284;
              *(v7 - 1) = v277;
              v285 = *(_QWORD *)v169;
              if (*(_QWORD *)(*(_QWORD *)v267 + 8) < *(_QWORD *)(*(_QWORD *)v169 + 8))
              {
                *(_QWORD *)v169 = *(_QWORD *)v267;
                *(_QWORD *)v267 = v285;
                v286 = *v9;
                if (*(_QWORD *)(*(_QWORD *)v169 + 8) < *(_QWORD *)(*v9 + 8))
                {
                  *v9 = *(_QWORD *)v169;
                  *(_QWORD *)v169 = v286;
                }
              }
            }
            return;
          }
          *(_QWORD *)v169 = v277;
        }
        else
        {
          *v9 = v281;
        }
        *(_QWORD *)v267 = v278;
        v277 = v278;
        goto LABEL_401;
      case 5:
        if (v18 < -7)
        {
          v171 = (_QWORD *)(a1 - 8 * ((unint64_t)(510 - v19) >> 9));
          v172 = (uint64_t *)(*v171 + 8 * (~(510 - (_WORD)v19) & 0x1FF));
          if ((unint64_t)v18 < 0xFFFFFFFFFFFFFFF1)
          {
            v268 = (_QWORD *)(a1 - 8 * ((unint64_t)(509 - v19) >> 9));
            v269 = (uint64_t *)(*v268 + 8 * (~(509 - (_WORD)v19) & 0x1FF));
            if ((unint64_t)v18 < 0xFFFFFFFFFFFFFFE9)
            {
              v288 = 508 - v19;
              v271 = (_QWORD *)(a1 - 8 * (v288 >> 9));
              v272 = (uint64_t *)(*v271 + 8 * (~(_WORD)v288 & 0x1FF));
              if (v7 != v14)
              {
LABEL_378:
                std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,0>(a1, v9, (uint64_t)v171, v172, (uint64_t)v268, v269, (uint64_t)v271, v272, (uint64_t)a3, v7 - 1);
                return;
              }
LABEL_377:
              v273 = *((_QWORD *)a3 - 1);
              a3 -= 8;
              v7 = (uint64_t *)(v273 + 4096);
              goto LABEL_378;
            }
            v270 = 1;
LABEL_376:
            v271 = (_QWORD *)(a1 + 8 * (v270 >> 9));
            v272 = (uint64_t *)(*v271 + 8 * (v270 & 0x1FF));
            if (v7 != v14)
              goto LABEL_378;
            goto LABEL_377;
          }
          v173 = 1;
        }
        else
        {
          v171 = (_QWORD *)(a1 + 8 * ((unint64_t)(v19 + 1) >> 9));
          v172 = (uint64_t *)(*v171 + 8 * ((v19 + 1) & 0x1FF));
          v173 = v19 + 2;
        }
        v268 = (_QWORD *)(a1 + 8 * (v173 >> 9));
        v269 = (uint64_t *)(*v268 + 8 * (v173 & 0x1FF));
        v270 = v19 + 3;
        goto LABEL_376;
      default:
        if (v20 <= 23)
        {
          if ((a6 & 1) != 0)
          {
            for (i = v9 + 1; ; ++i)
            {
              if ((char *)i - (char *)v17 == 4096)
              {
                v175 = *(uint64_t **)(a1 + 8);
                a1 += 8;
                v17 = v175;
                i = v175;
              }
              if (i == v7)
                return;
              v176 = (void ****)a1;
              v177 = (uint64_t)i;
              if (i == v17)
              {
                v176 = (void ****)(a1 - 8);
                v177 = *(_QWORD *)(a1 - 8) + 4096;
              }
              v179 = *(_QWORD *)(v177 - 8);
              v178 = (void ***)(v177 - 8);
              v180 = *i;
              if (*(_QWORD *)(*i + 8) < *(_QWORD *)(v179 + 8))
              {
                *i = 0;
                v181 = *v178;
                v182 = (void ***)i;
                while (1)
                {
                  v184 = v178;
                  *v178 = 0;
                  v185 = *v182;
                  *v182 = v181;
                  if (v185)
                  {
                    v186 = *v185;
                    if (*v185)
                    {
                      *v185 = 0;

                    }
                    MEMORY[0x20BD0ADEC](v185, 0x1080C40468F112ELL, v11, v12, v13);
                  }
                  if (v184 == (void ***)v9)
                    break;
                  if (v184 == *v176)
                  {
                    v183 = (uint64_t)*--v176;
                    v178 = (void ***)(v183 + 4088);
                    v181 = *(void ***)(v183 + 4088);
                    v182 = v184;
                    if (*(_QWORD *)(v180 + 8) >= (unint64_t)v181[1])
                      goto LABEL_255;
                  }
                  else
                  {
                    v178 = v184 - 1;
                    v181 = *(v184 - 1);
                    v182 = v184;
                    if (*(_QWORD *)(v180 + 8) >= (unint64_t)v181[1])
                      goto LABEL_255;
                  }
                }
                v184 = (void ***)v9;
LABEL_255:
                v187 = *v184;
                *v184 = (void **)v180;
                if (v187)
                {
                  v188 = *v187;
                  if (*v187)
                  {
                    *v187 = 0;

                  }
                  MEMORY[0x20BD0ADEC](v187, 0x1080C40468F112ELL);
                }
                v17 = *(uint64_t **)a1;
              }
            }
          }
          if (v18 < 9)
          {
            v275 = *(_QWORD *)(a1 - 8 * ((unint64_t)(512 - v19) >> 9)) + 8 * (~(512 - (_WORD)v19) & 0x1FF);
            if (v18 < -7)
            {
              v289 = 510 - v19;
              LOWORD(v19) = ~(510 - v19);
              v287 = (uint64_t *)(a1 - 8 * (v289 >> 9));
LABEL_410:
              v290 = *v287;
              v291 = *v287 + 8 * (v19 & 0x1FF);
              if ((uint64_t *)v291 == v7)
                return;
              while (1)
              {
                v292 = (v291 - v290) >> 3;
                if (v291 - v290 < 9)
                {
                  v297 = 512 - v292;
                  v294 = (void ****)&v287[-(v297 >> 9)];
                  v295 = (uint64_t)&(*v294)[~(_WORD)v297 & 0x1FF];
                  v296 = *(_QWORD *)v291;
                  if (*(_QWORD *)(*(_QWORD *)v291 + 8) >= *(_QWORD *)(*(_QWORD *)v295 + 8))
                    goto LABEL_431;
                }
                else
                {
                  v293 = v292 - 1;
                  v294 = (void ****)&v287[v293 >> 9];
                  v295 = (uint64_t)&(*v294)[v293 & 0x1FF];
                  v296 = *(_QWORD *)v291;
                  if (*(_QWORD *)(*(_QWORD *)v291 + 8) >= *(_QWORD *)(*(_QWORD *)v295 + 8))
                    goto LABEL_431;
                }
                *(_QWORD *)v291 = 0;
                v298 = *(_QWORD *)v295;
                v299 = (void ***)v291;
                do
                {
                  while (1)
                  {
                    v301 = (void ***)v295;
                    *(_QWORD *)v295 = 0;
                    v302 = *v299;
                    *v299 = (void **)v298;
                    if (v302)
                    {
                      v303 = *v302;
                      if (*v302)
                      {
                        *v302 = 0;

                      }
                      MEMORY[0x20BD0ADEC](v302, 0x1080C40468F112ELL, v11, v12, v13);
                    }
                    if (v301 == (void ***)v275)
                      goto LABEL_434;
                    if (v301 != *v294)
                      break;
                    v300 = (uint64_t)*--v294;
                    v295 = v300 + 4088;
                    v298 = *(_QWORD *)(v300 + 4088);
                    v299 = v301;
                    if (*(_QWORD *)(v296 + 8) >= *(_QWORD *)(v298 + 8))
                      goto LABEL_426;
                  }
                  v295 = (uint64_t)(v301 - 1);
                  v298 = (uint64_t)*(v301 - 1);
                  v299 = v301;
                }
                while (*(_QWORD *)(v296 + 8) < *(_QWORD *)(v298 + 8));
LABEL_426:
                v304 = *v301;
                *v301 = (void **)v296;
                if (v304)
                {
                  v305 = *v304;
                  if (*v304)
                  {
                    *v304 = 0;

                  }
                  MEMORY[0x20BD0ADEC](v304, 0x1080C40468F112ELL, v11, v12, v13);
                }
                v290 = *v287;
LABEL_431:
                v291 += 8;
                if (v291 - v290 == 4096)
                {
                  v306 = v287[1];
                  ++v287;
                  v290 = v306;
                  v291 = v306;
                }
                if ((uint64_t *)v291 == v7)
                  return;
              }
            }
          }
          else
          {
            v275 = *(_QWORD *)(a1 + (((unint64_t)(v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v19 - 1) & 0x1FF);
          }
          v287 = (uint64_t *)(a1 + 8 * ((unint64_t)++v19 >> 9));
          goto LABEL_410;
        }
        if (a5)
        {
          v21 = (unint64_t)v20 >> 1;
          v22 = ((unint64_t)v20 >> 1) + v19;
          if ((unint64_t)v20 >= 0x81)
          {
            if (v22 < 1)
            {
              v23 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v22) >> 9)) + 8 * (~(511 - (_WORD)v22) & 0x1FF);
              if (v15 >= 9)
                goto LABEL_9;
            }
            else
            {
              v23 = *(_QWORD *)(a1 + (((unint64_t)v22 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v22 & 0x1FF);
              if (v15 >= 9)
              {
LABEL_9:
                v24 = *(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                    + 8 * (((_WORD)v16 - 1) & 0x1FF);
                goto LABEL_15;
              }
            }
            v24 = *(_QWORD *)&a3[-8 * ((unint64_t)(512 - v16) >> 9)] + 8 * (~(512 - (_WORD)v16) & 0x1FF);
LABEL_15:
            v27 = *(_QWORD *)v23;
            v28 = *v9;
            v29 = *(_QWORD *)(*(_QWORD *)v23 + 8);
            v30 = *(_QWORD *)(*v9 + 8);
            v31 = *(_QWORD *)v24;
            v32 = *(_QWORD *)(*(_QWORD *)v24 + 8);
            if (v29 >= v30)
            {
              if (v32 < v29)
              {
                *(_QWORD *)v23 = v31;
                *(_QWORD *)v24 = v27;
                v33 = *v9;
                if (*(_QWORD *)(*(_QWORD *)v23 + 8) < *(_QWORD *)(*v9 + 8))
                {
                  *v9 = *(_QWORD *)v23;
                  *(_QWORD *)v23 = v33;
                }
              }
            }
            else
            {
              if (v32 >= v29)
              {
                *v9 = v27;
                *(_QWORD *)v23 = v28;
                if (*(_QWORD *)(*(_QWORD *)v24 + 8) >= v30)
                  goto LABEL_33;
                *(_QWORD *)v23 = *(_QWORD *)v24;
              }
              else
              {
                *v9 = v31;
              }
              *(_QWORD *)v24 = v28;
            }
LABEL_33:
            v41 = (uint64_t)v9 - *(_QWORD *)a1;
            v42 = v41 >> 3;
            if (v41 < -7)
            {
              v43 = *(_QWORD *)(a1 - 8 * ((unint64_t)(510 - v42) >> 9)) + 8 * (~(510 - (_WORD)v42) & 0x1FF);
              v44 = v21 - 1;
              v45 = v42 + v21 - 1;
              if (v45 < 1)
              {
LABEL_35:
                v46 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v45) >> 9)) + 8 * (~(511 - (_WORD)v45) & 0x1FF);
                v47 = (uint64_t)v7 - *(_QWORD *)a3;
                v48 = v47 >> 3;
                if (v47 < 17)
                {
LABEL_36:
                  v49 = *(_QWORD *)&a3[-8 * ((unint64_t)(513 - v48) >> 9)] + 8 * (~(513 - (_WORD)v48) & 0x1FF);
                  goto LABEL_40;
                }
LABEL_39:
                v49 = *(_QWORD *)&a3[((unint64_t)(v48 - 2) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v48 - 2) & 0x1FF);
LABEL_40:
                v51 = *(_QWORD *)v46;
                v52 = *(_QWORD *)v43;
                v53 = *(_QWORD *)(*(_QWORD *)v46 + 8);
                v54 = *(_QWORD *)(*(_QWORD *)v43 + 8);
                v55 = *(_QWORD *)v49;
                v56 = *(_QWORD *)(*(_QWORD *)v49 + 8);
                if (v53 >= v54)
                {
                  if (v56 < v53)
                  {
                    *(_QWORD *)v46 = v55;
                    *(_QWORD *)v49 = v51;
                    v57 = *(_QWORD *)v43;
                    if (*(_QWORD *)(*(_QWORD *)v46 + 8) < *(_QWORD *)(*(_QWORD *)v43 + 8))
                    {
                      *(_QWORD *)v43 = *(_QWORD *)v46;
                      *(_QWORD *)v46 = v57;
                    }
                  }
                }
                else
                {
                  if (v56 >= v53)
                  {
                    *(_QWORD *)v43 = v51;
                    *(_QWORD *)v46 = v52;
                    if (*(_QWORD *)(*(_QWORD *)v49 + 8) >= v54)
                      goto LABEL_123;
                    *(_QWORD *)v46 = *(_QWORD *)v49;
                  }
                  else
                  {
                    *(_QWORD *)v43 = v55;
                  }
                  *(_QWORD *)v49 = v52;
                }
LABEL_123:
                v99 = (uint64_t)v9 - *(_QWORD *)a1;
                v100 = v99 >> 3;
                if (v99 < -15)
                {
                  v101 = *(_QWORD *)(a1 - 8 * ((unint64_t)(509 - v100) >> 9))
                       + 8 * (~(509 - (_WORD)v100) & 0x1FF);
                  v102 = v21 + 1;
                  v103 = v100 + v21 + 1;
                  if (v103 < 1)
                  {
LABEL_125:
                    v104 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v103) >> 9))
                         + 8 * (~(511 - (_WORD)v103) & 0x1FF);
                    v105 = (uint64_t)v7 - *(_QWORD *)a3;
                    v106 = v105 >> 3;
                    if (v105 < 25)
                    {
LABEL_126:
                      v107 = *(_QWORD *)&a3[-8 * ((unint64_t)(514 - v106) >> 9)]
                           + 8 * (~(514 - (_WORD)v106) & 0x1FF);
                      goto LABEL_130;
                    }
LABEL_129:
                    v107 = *(_QWORD *)&a3[((unint64_t)(v106 - 3) >> 6) & 0x3FFFFFFFFFFFFF8]
                         + 8 * ((v106 - 3) & 0x1FF);
LABEL_130:
                    v109 = *(_QWORD *)v104;
                    v110 = *(_QWORD *)v101;
                    v111 = *(_QWORD *)(*(_QWORD *)v104 + 8);
                    v112 = *(_QWORD *)(*(_QWORD *)v101 + 8);
                    v113 = *(_QWORD *)v107;
                    v114 = *(_QWORD *)(*(_QWORD *)v107 + 8);
                    if (v111 >= v112)
                    {
                      if (v114 < v111)
                      {
                        *(_QWORD *)v104 = v113;
                        *(_QWORD *)v107 = v109;
                        v115 = *(_QWORD *)v101;
                        if (*(_QWORD *)(*(_QWORD *)v104 + 8) < *(_QWORD *)(*(_QWORD *)v101 + 8))
                        {
                          *(_QWORD *)v101 = *(_QWORD *)v104;
                          *(_QWORD *)v104 = v115;
                        }
                      }
                    }
                    else
                    {
                      if (v114 >= v111)
                      {
                        *(_QWORD *)v101 = v109;
                        *(_QWORD *)v104 = v110;
                        if (*(_QWORD *)(*(_QWORD *)v107 + 8) >= v112)
                          goto LABEL_139;
                        *(_QWORD *)v104 = *(_QWORD *)v107;
                      }
                      else
                      {
                        *(_QWORD *)v101 = v113;
                      }
                      *(_QWORD *)v107 = v110;
                    }
LABEL_139:
                    v116 = ((uint64_t)v9 - *(_QWORD *)a1) >> 3;
                    v117 = v116 + v44;
                    if (v117 < 1)
                    {
                      v118 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v117) >> 9))
                           + 8 * (~(511 - (_WORD)v117) & 0x1FF);
                      v119 = v116 + v21;
                      if ((uint64_t)(v116 + v21) >= 1)
                      {
LABEL_141:
                        v120 = *(_QWORD *)(a1 + ((v119 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v119 & 0x1FF);
                        v121 = v116 + v102;
                        if (v121 >= 1)
                        {
LABEL_142:
                          v122 = *(_QWORD *)(a1 + (((unint64_t)v121 >> 6) & 0x3FFFFFFFFFFFFF8))
                               + 8 * (v121 & 0x1FF);
                          goto LABEL_146;
                        }
LABEL_145:
                        v122 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v121) >> 9))
                             + 8 * (~(511 - (_WORD)v121) & 0x1FF);
LABEL_146:
                        v123 = *(_QWORD *)v120;
                        v124 = *(_QWORD *)v118;
                        v125 = *(_QWORD *)(*(_QWORD *)v120 + 8);
                        v126 = *(_QWORD *)(*(_QWORD *)v118 + 8);
                        v127 = *(_QWORD *)v122;
                        v128 = *(_QWORD *)(*(_QWORD *)v122 + 8);
                        if (v125 >= v126)
                        {
                          if (v128 < v125)
                          {
                            *(_QWORD *)v120 = v127;
                            *(_QWORD *)v122 = v123;
                            v129 = *(_QWORD *)v118;
                            if (*(_QWORD *)(*(_QWORD *)v120 + 8) < *(_QWORD *)(*(_QWORD *)v118 + 8))
                            {
                              *(_QWORD *)v118 = *(_QWORD *)v120;
                              *(_QWORD *)v120 = v129;
                            }
                          }
                        }
                        else
                        {
                          if (v128 >= v125)
                          {
                            *(_QWORD *)v118 = v123;
                            *(_QWORD *)v120 = v124;
                            if (*(_QWORD *)(*(_QWORD *)v122 + 8) >= v126)
                              goto LABEL_155;
                            *(_QWORD *)v120 = *(_QWORD *)v122;
                          }
                          else
                          {
                            *(_QWORD *)v118 = v127;
                          }
                          *(_QWORD *)v122 = v124;
                        }
LABEL_155:
                        v130 = v21 + (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
                        if (v130 < 1)
                        {
                          v133 = (uint64_t *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v130) >> 9))
                                           + 8 * (~(511 - (_WORD)v130) & 0x1FF));
                          v134 = *v9;
                          *v9 = *v133;
                          *v133 = v134;
                          --a5;
                          if ((a6 & 1) == 0)
                            goto LABEL_159;
                        }
                        else
                        {
                          v131 = (uint64_t *)(*(_QWORD *)(a1 + (((unint64_t)v130 >> 6) & 0x3FFFFFFFFFFFFF8))
                                           + 8 * (v130 & 0x1FF));
                          v132 = *v9;
                          *v9 = *v131;
                          *v131 = v132;
                          --a5;
                          if ((a6 & 1) == 0)
                          {
LABEL_159:
                            v135 = (uint64_t)v9 - *(_QWORD *)a1;
                            v136 = v135 >> 3;
                            if (v135 < 9)
                            {
                              v58 = *v9;
                              v139 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 - 8 * ((unint64_t)(512 - v136) >> 9))
                                                           + 8 * (~(512 - (_WORD)v136) & 0x1FF))
                                               + 8);
                              v138 = *(_QWORD *)(*v9 + 8);
                              if (v139 >= v138)
                              {
LABEL_163:
                                *v9 = 0;
                                v140 = *(uint64_t **)a3;
                                v141 = (uint64_t)v7 - *(_QWORD *)a3;
                                v142 = v141 >> 3;
                                if (v141 < 9)
                                {
                                  v145 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a3[-8
                                                                              * ((unint64_t)(512 - v142) >> 9)]
                                                               + 8 * (~(512 - (_WORD)v142) & 0x1FF))
                                                   + 8);
                                  v144 = *(uint64_t **)a1;
                                  v96 = v9;
                                  if (v138 < v145)
                                  {
                                    while (1)
                                    {
LABEL_167:
                                      if ((char *)++v96 - (char *)v144 == 4096)
                                      {
                                        v146 = *(uint64_t **)(a1 + 8);
                                        a1 += 8;
                                        v144 = v146;
                                        v96 = v146;
                                      }
                                      if (v96 == v7)
                                        goto LABEL_434;
                                      if (v138 < *(_QWORD *)(*v96 + 8))
                                        goto LABEL_171;
                                    }
                                  }
                                }
                                else
                                {
                                  v143 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&a3[((unint64_t)(v142 - 1) >> 6) & 0x3FFFFFFFFFFFFF8]
                                                               + 8 * ((v142 - 1) & 0x1FF))
                                                   + 8);
                                  v144 = *(uint64_t **)a1;
                                  v96 = v9;
                                  if (v138 < v143)
                                    goto LABEL_167;
                                }
                                do
                                {
                                  if ((char *)++v96 - (char *)v144 == 4096)
                                  {
                                    v159 = *(uint64_t **)(a1 + 8);
                                    a1 += 8;
                                    v144 = v159;
                                    v96 = v159;
                                  }
                                }
                                while ((a1 < (unint64_t)a3 || (char *)a1 == a3 && v96 < v7)
                                     && v138 >= *(_QWORD *)(*v96 + 8));
LABEL_171:
                                if (a1 < (unint64_t)a3
                                  || (v147 = a3, v148 = v7, (char *)a1 == a3) && (v147 = a3, v148 = v7, v96 < v7))
                                {
                                  v147 = a3;
                                  v148 = v7;
                                  while (v148 != v9)
                                  {
                                    if (v148 == v140)
                                    {
                                      v150 = (uint64_t *)*((_QWORD *)v147 - 1);
                                      v147 -= 8;
                                      v140 = v150;
                                      v148 = v150 + 512;
                                    }
                                    v149 = *--v148;
                                    if (v138 >= *(_QWORD *)(v149 + 8))
                                      goto LABEL_190;
                                  }
                                  goto LABEL_434;
                                }
LABEL_190:
                                if (a1 >= (unint64_t)v147 && ((char *)a1 != v147 || v96 >= v148))
                                {
                                  v155 = a3;
                                  v156 = (char *)v96 - (char *)v144;
                                  v157 = v156 >> 3;
                                  if (v156 < 9)
                                    v158 = (void ***)(*(_QWORD *)(a1 - 8 * ((unint64_t)(512 - v157) >> 9))
                                                    + 8 * (~(512 - (_WORD)v157) & 0x1FF));
                                  else
                                    v158 = (void ***)(*(_QWORD *)(a1
                                                                + (((unint64_t)(v157 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                    + 8 * ((v157 - 1) & 0x1FF));
                                  if (v158 != (void ***)v9)
                                  {
                                    v160 = *v158;
                                    *v158 = 0;
                                    v161 = (void **)*v9;
                                    *v9 = (uint64_t)v160;
                                    if (v161)
                                    {
                                      v162 = v58;
                                      v163 = *v161;
                                      if (*v161)
                                      {
                                        *v161 = 0;

                                      }
                                      MEMORY[0x20BD0ADEC](v161, 0x1080C40468F112ELL);
                                      v13 = 512;
                                      v58 = v162;
                                    }
                                  }
                                  v164 = *v158;
                                  *v158 = (void **)v58;
                                  if (!v164)
                                  {
                                    a6 = 0;
                                    a3 = v155;
                                    v11 = 511;
                                    v12 = 509;
                                    v9 = v96;
                                    if (v7 != v96)
                                      continue;
                                    return;
                                  }
                                  v165 = *v164;
                                  if (*v164)
                                  {
                                    *v164 = 0;

                                  }
                                  MEMORY[0x20BD0ADEC](v164, 0x1080C40468F112ELL);
                                  a6 = 0;
                                  a3 = v155;
                                  goto LABEL_217;
                                }
                                v151 = *v96;
                                *v96++ = *v148;
                                *v148 = v151;
                                v144 = *(uint64_t **)a1;
                                if ((uint64_t *)((char *)v96 - *(_QWORD *)a1) != (uint64_t *)4096)
                                  goto LABEL_183;
LABEL_182:
                                v152 = *(uint64_t **)(a1 + 8);
                                a1 += 8;
                                v144 = v152;
                                v96 = v152;
LABEL_183:
                                while (v96 != v7)
                                {
                                  if (v138 < *(_QWORD *)(*v96 + 8))
                                  {
                                    while (v148 != v9)
                                    {
                                      if (v148 == *(uint64_t **)v147)
                                      {
                                        v154 = *((_QWORD *)v147 - 1);
                                        v147 -= 8;
                                        v148 = (uint64_t *)(v154 + 4096);
                                      }
                                      v153 = *--v148;
                                      if (v138 >= *(_QWORD *)(v153 + 8))
                                        goto LABEL_190;
                                    }
                                    break;
                                  }
                                  if ((char *)++v96 - (char *)v144 == 4096)
                                    goto LABEL_182;
                                }
LABEL_434:
                                __break(1u);
                                return;
                              }
                            }
                            else
                            {
                              v58 = *v9;
                              v137 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1
                                                                       + (((unint64_t)(v136 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                           + 8 * ((v136 - 1) & 0x1FF))
                                               + 8);
                              v138 = *(_QWORD *)(*v9 + 8);
                              if (v137 >= v138)
                                goto LABEL_163;
                            }
LABEL_51:
                            *v9 = 0;
                            v59 = v9 + 1;
                            v60 = *(uint64_t **)a1;
                            if ((uint64_t *)((char *)v9 - *(_QWORD *)a1 + 8) == (uint64_t *)4096)
                            {
                              v61 = (uint64_t **)(a1 + 8);
                              v60 = *(uint64_t **)(a1 + 8);
                              v59 = v60;
                            }
                            else
                            {
                              v61 = (uint64_t **)a1;
                            }
                            if (v59 == v7)
                              goto LABEL_434;
                            v62 = *v59;
                            for (j = *(_QWORD *)(v58 + 8); *(_QWORD *)(*v59 + 8) < j; v62 = *v59)
                            {
                              if ((char *)++v59 - (char *)v60 == 4096)
                              {
                                v64 = v61[1];
                                ++v61;
                                v60 = v64;
                                v59 = v64;
                              }
                              if (v59 == v7)
                                goto LABEL_434;
                            }
                            v65 = v59 - v60;
                            if ((char *)v59 - (char *)v60 < 9)
                            {
                              v69 = (uint64_t)&v61[-((unint64_t)(512 - v65) >> 9)][~(512 - (_WORD)v65) & 0x1FF];
                              v67 = a3;
                              v68 = v7;
                              if ((uint64_t *)v69 != v9)
                              {
LABEL_66:
                                while (v68 != v9)
                                {
                                  if (v68 == *(uint64_t **)v67)
                                  {
                                    v71 = *((_QWORD *)v67 - 1);
                                    v67 -= 8;
                                    v68 = (uint64_t *)(v71 + 4096);
                                  }
                                  v70 = *--v68;
                                  if (*(_QWORD *)(v70 + 8) < j)
                                    goto LABEL_76;
                                }
                                goto LABEL_434;
                              }
                            }
                            else
                            {
                              v66 = (uint64_t)&(*(uint64_t **)((char *)v61
                                                           + (((unint64_t)(v65 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v65 - 1) & 0x1FF];
                              v67 = a3;
                              v68 = v7;
                              if ((uint64_t *)v66 != v9)
                                goto LABEL_66;
                            }
                            v67 = a3;
                            v68 = v7;
                            while (v61 < (uint64_t **)v67 || v61 == (uint64_t **)v67 && v59 < v68)
                            {
                              if (v68 == *(uint64_t **)v67)
                              {
                                v73 = *((_QWORD *)v67 - 1);
                                v67 -= 8;
                                v68 = (uint64_t *)(v73 + 4088);
                                if (*(_QWORD *)(*(_QWORD *)(v73 + 4088) + 8) < j)
                                  break;
                              }
                              else
                              {
                                v72 = *--v68;
                                if (*(_QWORD *)(v72 + 8) < j)
                                  break;
                              }
                            }
LABEL_76:
                            v75 = v61 != (uint64_t **)v67 || v59 >= v68;
                            v76 = v61 >= (uint64_t **)v67 && v75;
LABEL_85:
                            if (v61 < (uint64_t **)v67 || v61 == (uint64_t **)v67 && v59 < v68)
                            {
                              *v59++ = *v68;
                              *v68 = v62;
                              v60 = *v61;
                              if ((char *)v59 - (char *)*v61 != 4096)
                                goto LABEL_92;
LABEL_91:
                              v77 = v61[1];
                              ++v61;
                              v60 = v77;
                              v59 = v77;
LABEL_92:
                              while (v59 != v7)
                              {
                                v62 = *v59;
                                if (*(_QWORD *)(*v59 + 8) >= j)
                                {
                                  while (v68 != v9)
                                  {
                                    if (v68 == *(uint64_t **)v67)
                                    {
                                      v79 = *((_QWORD *)v67 - 1);
                                      v67 -= 8;
                                      v68 = (uint64_t *)(v79 + 4096);
                                    }
                                    v78 = *--v68;
                                    if (*(_QWORD *)(v78 + 8) < j)
                                      goto LABEL_85;
                                  }
                                  goto LABEL_434;
                                }
                                if ((char *)++v59 - (char *)v60 == 4096)
                                  goto LABEL_91;
                              }
                              goto LABEL_434;
                            }
                            v80 = (char *)v59 - (char *)v60;
                            v81 = v80 >> 3;
                            v307 = a5;
                            if (v80 < 9)
                            {
                              v86 = 512 - v81;
                              v83 = (char *)&v61[-(v86 >> 9)];
                              v84 = (uint64_t *)(*(_QWORD *)v83 + 8 * (~(_DWORD)v86 & 0x1FFLL));
                              v85 = a6;
                              if (v84 == v9)
                                goto LABEL_107;
                            }
                            else
                            {
                              v82 = v81 - 1;
                              v83 = (char *)&v61[v82 >> 9];
                              v84 = (uint64_t *)(*(_QWORD *)v83 + 8 * (v82 & 0x1FF));
                              v85 = a6;
                              if (v84 == v9)
                                goto LABEL_107;
                            }
                            v87 = *v84;
                            *v84 = 0;
                            v88 = (void **)*v9;
                            *v9 = v87;
                            if (v88)
                            {
                              v89 = v58;
                              v90 = *v88;
                              if (*v88)
                              {
                                *v88 = 0;

                              }
                              MEMORY[0x20BD0ADEC](v88, 0x1080C40468F112ELL);
                              LOBYTE(a6) = v85;
                              v58 = v89;
                            }
LABEL_107:
                            v91 = (void **)*v84;
                            *v84 = v58;
                            if (v91)
                            {
                              v92 = *v91;
                              if (*v91)
                              {
                                *v91 = 0;

                              }
                              MEMORY[0x20BD0ADEC](v91, 0x1080C40468F112ELL);
                              LOBYTE(a6) = v85;
                            }
                            if (!v76)
                            {
LABEL_118:
                              a5 = v307;
                              std::__introsort<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,false>(a1, v9, v83, v84, v307, a6 & 1);
                              v96 = v84 + 1;
                              a6 = 0;
                              if ((uint64_t *)((char *)v96 - *(_QWORD *)v83) == (uint64_t *)4096)
                              {
                                v98 = (uint64_t *)*((_QWORD *)v83 + 1);
                                v83 += 8;
                                v96 = v98;
                              }
                              a1 = (unint64_t)v83;
LABEL_217:
                              v11 = 511;
                              v12 = 509;
                              goto LABEL_218;
                            }
                            v93 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>>((char *)a1, v9, v83, v84);
                            v94 = (uint64_t)v84 - *(_QWORD *)v83;
                            v95 = v94 >> 3;
                            if (v94 < -7)
                            {
                              if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>>(&v83[-8 * ((unint64_t)(510 - v95) >> 9)], (uint64_t *)(*(_QWORD *)&v83[-8 * ((unint64_t)(510 - v95) >> 9)]+ 8 * (~(510 - (_WORD)v95) & 0x1FF)), a3, v7))
                              {
LABEL_114:
                                a6 = v85;
                                if (v93)
                                {
                                  v96 = v84 + 1;
                                  if ((uint64_t *)((char *)v96 - *(_QWORD *)v83) == (uint64_t *)4096)
                                  {
                                    v97 = (uint64_t *)*((_QWORD *)v83 + 1);
                                    v83 += 8;
                                    v96 = v97;
                                  }
                                  a1 = (unint64_t)v83;
                                  v11 = 511;
                                  v12 = 509;
                                  a5 = v307;
LABEL_218:
                                  v13 = 512;
                                  v9 = v96;
                                  if (v7 != v96)
                                    continue;
                                  return;
                                }
                                goto LABEL_118;
                              }
                            }
                            else if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>>(&v83[8 * ((unint64_t)(v95 + 1) >> 9)], (uint64_t *)(*(_QWORD *)&v83[8 * ((unint64_t)(v95 + 1) >> 9)]+ 8 * ((v95 + 1) & 0x1FF)), a3, v7))
                            {
                              goto LABEL_114;
                            }
                            a3 = v83;
                            v7 = v84;
                            v11 = 511;
                            v12 = 509;
                            v13 = 512;
                            a6 = v85;
                            a5 = v307;
                            if (!v93 && v84 != v9)
                              continue;
                            return;
                          }
                        }
LABEL_50:
                        v58 = *v9;
                        goto LABEL_51;
                      }
                    }
                    else
                    {
                      v118 = *(_QWORD *)(a1 + (((unint64_t)v117 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v117 & 0x1FF);
                      v119 = v116 + v21;
                      if ((uint64_t)(v116 + v21) >= 1)
                        goto LABEL_141;
                    }
                    v120 = *(_QWORD *)(a1 - 8 * ((511 - v119) >> 9)) + 8 * (~(511 - (_WORD)v119) & 0x1FF);
                    v121 = v116 + v102;
                    if (v121 >= 1)
                      goto LABEL_142;
                    goto LABEL_145;
                  }
                }
                else
                {
                  v101 = *(_QWORD *)(a1 + (((unint64_t)(v100 + 2) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v100 + 2) & 0x1FF);
                  v102 = v21 + 1;
                  v103 = v100 + v21 + 1;
                  if (v103 < 1)
                    goto LABEL_125;
                }
                v104 = *(_QWORD *)(a1 + (((unint64_t)v103 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v103 & 0x1FF);
                v108 = (uint64_t)v7 - *(_QWORD *)a3;
                v106 = v108 >> 3;
                if (v108 < 25)
                  goto LABEL_126;
                goto LABEL_129;
              }
            }
            else
            {
              v43 = *(_QWORD *)(a1 + (((unint64_t)(v42 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((v42 + 1) & 0x1FF);
              v44 = v21 - 1;
              v45 = v42 + v21 - 1;
              if (v45 < 1)
                goto LABEL_35;
            }
            v46 = *(_QWORD *)(a1 + (((unint64_t)v45 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v45 & 0x1FF);
            v50 = (uint64_t)v7 - *(_QWORD *)a3;
            v48 = v50 >> 3;
            if (v50 < 17)
              goto LABEL_36;
            goto LABEL_39;
          }
          if (v22 < 1)
          {
            v25 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v22) >> 9)) + 8 * (~(511 - (_WORD)v22) & 0x1FF);
            if (v15 >= 9)
              goto LABEL_12;
          }
          else
          {
            v25 = *(_QWORD *)(a1 + (((unint64_t)v22 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v22 & 0x1FF);
            if (v15 >= 9)
            {
LABEL_12:
              v26 = *(_QWORD *)&a3[((unint64_t)(v16 - 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v16 - 1) & 0x1FF);
              goto LABEL_23;
            }
          }
          v26 = *(_QWORD *)&a3[-8 * ((unint64_t)(512 - v16) >> 9)] + 8 * (~(512 - (_WORD)v16) & 0x1FF);
LABEL_23:
          v34 = *v9;
          v35 = *(_QWORD *)v25;
          v36 = *(_QWORD *)(*v9 + 8);
          v37 = *(_QWORD *)(*(_QWORD *)v25 + 8);
          v38 = *(_QWORD *)v26;
          v39 = *(_QWORD *)(*(_QWORD *)v26 + 8);
          if (v36 >= v37)
          {
            if (v39 < v36)
            {
              *v9 = v38;
              *(_QWORD *)v26 = v34;
              v40 = *(_QWORD *)v25;
              if (*(_QWORD *)(*v9 + 8) < *(_QWORD *)(*(_QWORD *)v25 + 8))
              {
                *(_QWORD *)v25 = *v9;
                *v9 = v40;
                --a5;
                if ((a6 & 1) == 0)
                  goto LABEL_159;
                goto LABEL_50;
              }
            }
          }
          else
          {
            if (v39 >= v36)
            {
              *(_QWORD *)v25 = v34;
              *v9 = v35;
              if (*(_QWORD *)(*(_QWORD *)v26 + 8) >= v37)
                goto LABEL_49;
              *v9 = *(_QWORD *)v26;
            }
            else
            {
              *(_QWORD *)v25 = v38;
            }
            *(_QWORD *)v26 = v35;
          }
LABEL_49:
          --a5;
          if ((a6 & 1) == 0)
            goto LABEL_159;
          goto LABEL_50;
        }
        v308 = (_QWORD)&a3[-a1] << 6;
        v309 = a3;
        v189 = (unint64_t)(v20 - 2) >> 1;
        v190 = v189;
        while (2)
        {
          v192 = v190;
          v193 = ((uint64_t)v9 - *(_QWORD *)a1) >> 3;
          if (!v192)
            goto LABEL_269;
          v194 = v193 + v192;
          if (v193 + v192 >= 1)
          {
            v195 = (uint64_t *)(a1 + 8 * (v194 >> 9));
            v196 = *v195;
            v197 = *v195 + 8 * (v194 & 0x1FF);
            if ((uint64_t *)v197 != v9)
              goto LABEL_264;
LABEL_269:
            v198 = 0;
            v197 = (uint64_t)v9;
            v199 = 1;
            v200 = v193 + 1;
            if (v200 >= 1)
              goto LABEL_266;
LABEL_270:
            v205 = 511 - v200;
            v201 = (uint64_t *)(a1 - 8 * (v205 >> 9));
            v202 = *v201;
            v203 = *v201 + 8 * (~(_DWORD)v205 & 0x1FFLL);
            v204 = 2 * v198 + 2;
            if (v204 < v20)
              goto LABEL_271;
            goto LABEL_273;
          }
          v195 = (uint64_t *)(a1 - 8 * ((511 - v194) >> 9));
          v196 = *v195;
          v197 = *v195 + 8 * (~(511 - (_WORD)v194) & 0x1FF);
          if ((uint64_t *)v197 == v9)
            goto LABEL_269;
LABEL_264:
          v198 = ((v197 - v196) >> 3) + (((_QWORD)v195 - a1) << 6) - v193;
          if (v189 < v198)
            goto LABEL_260;
          v199 = (2 * v198) | 1;
          v200 = v199 + v193;
          if (v200 < 1)
            goto LABEL_270;
LABEL_266:
          v201 = (uint64_t *)(a1 + 8 * ((unint64_t)v200 >> 9));
          v202 = *v201;
          v203 = *v201 + 8 * (v200 & 0x1FF);
          v204 = 2 * v198 + 2;
          if (v204 < v20)
          {
LABEL_271:
            v206 = (v203 - v202) >> 3;
            if (v203 - v202 < -7)
            {
              if (*(_QWORD *)(*(_QWORD *)v203 + 8) >= *(_QWORD *)(*(_QWORD *)(v201[-((unint64_t)(510 - v206) >> 9)]
                                                                               + 8 * (~(510 - (_WORD)v206) & 0x1FF))
                                                                   + 8))
                goto LABEL_273;
            }
            else if (*(_QWORD *)(*(_QWORD *)v203 + 8) >= *(_QWORD *)(*(_QWORD *)(*(uint64_t *)((char *)v201
                                                                                               + (((unint64_t)(v206 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                  + 8 * ((v206 + 1) & 0x1FF))
                                                                      + 8))
            {
              goto LABEL_273;
            }
            v203 += 8;
            if (v203 - v202 == 4096)
              v203 = v201[1];
            goto LABEL_274;
          }
LABEL_273:
          v204 = v199;
LABEL_274:
          v207 = *(_QWORD *)v197;
          if (*(_QWORD *)(*(_QWORD *)v203 + 8) < *(_QWORD *)(*(_QWORD *)v197 + 8))
            goto LABEL_260;
          *(_QWORD *)v197 = 0;
          v208 = *(void ***)v203;
          do
          {
            v209 = (void ***)v197;
            v197 = v203;
            *(_QWORD *)v203 = 0;
            v210 = *v209;
            *v209 = v208;
            if (v210)
            {
              v211 = *v210;
              if (*v210)
              {
                *v210 = 0;

              }
              MEMORY[0x20BD0ADEC](v210, 0x1080C40468F112ELL, v11, v12, v13);
            }
            if (v189 < v204)
              break;
            v212 = (2 * v204) | 1;
            v213 = v212 + (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
            if (v213 < 1)
            {
              v216 = 511 - v213;
              v214 = (uint64_t *)(a1 - 8 * (v216 >> 9));
              v215 = *v214;
              v203 = *v214 + 8 * (~(_WORD)v216 & 0x1FF);
              v204 = 2 * v204 + 2;
              if (v204 >= v20)
                goto LABEL_276;
            }
            else
            {
              v214 = (uint64_t *)(a1 + 8 * ((unint64_t)v213 >> 9));
              v215 = *v214;
              v203 = *v214 + 8 * (v213 & 0x1FF);
              v204 = 2 * v204 + 2;
              if (v204 >= v20)
                goto LABEL_276;
            }
            v217 = (v203 - v215) >> 3;
            if (v203 - v215 < -7)
            {
              if (*(_QWORD *)(*(_QWORD *)v203 + 8) < *(_QWORD *)(*(_QWORD *)(v214[-((unint64_t)(510 - v217) >> 9)]
                                                                              + 8 * (~(510 - (_WORD)v217) & 0x1FF))
                                                                  + 8))
              {
LABEL_291:
                v203 += 8;
                if (v203 - v215 == 4096)
                  v203 = v214[1];
                goto LABEL_277;
              }
            }
            else if (*(_QWORD *)(*(_QWORD *)v203 + 8) < *(_QWORD *)(*(_QWORD *)(*(uint64_t *)((char *)v214
                                                                                              + (((unint64_t)(v217 + 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                 + 8 * ((v217 + 1) & 0x1FF))
                                                                     + 8))
            {
              goto LABEL_291;
            }
LABEL_276:
            v204 = v212;
LABEL_277:
            v208 = *(void ***)v203;
          }
          while (*(_QWORD *)(*(_QWORD *)v203 + 8) >= *(_QWORD *)(v207 + 8));
          v218 = *(void ***)v197;
          *(_QWORD *)v197 = v207;
          if (v218)
          {
            v219 = *v218;
            if (*v218)
            {
              *v218 = 0;

            }
            MEMORY[0x20BD0ADEC](v218, 0x1080C40468F112ELL);
          }
LABEL_260:
          v190 = v192 - 1;
          v191 = v309;
          if (v192)
            continue;
          break;
        }
        v220 = v308 + (((uint64_t)v7 - *(_QWORD *)v309) >> 3) - (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
        if (v220 < 2)
          return;
        while (2)
        {
          v310 = (uint64_t **)v191;
          v222 = 0;
          v223 = *v9;
          *v9 = 0;
          v224 = (void ***)v9;
          v225 = (uint64_t **)a1;
          while (2)
          {
            if (v222 == -1)
            {
              v226 = (uint64_t)v224;
              v227 = -1;
              v222 = 0;
              if (v220 <= 0)
              {
LABEL_314:
                v222 = v227;
                goto LABEL_315;
              }
            }
            else
            {
              v228 = v222 + 1 + (((char *)v224 - (char *)*v225) >> 3);
              if (v228 < 1)
              {
                v229 = 511 - v228;
                v225 -= v229 >> 9;
                v226 = (uint64_t)&(*v225)[~(_WORD)v229 & 0x1FF];
                v227 = (2 * v222) | 1;
                v222 = 2 * v222 + 2;
                if (v222 >= v220)
                  goto LABEL_314;
              }
              else
              {
                v225 += (unint64_t)v228 >> 9;
                v226 = (uint64_t)&(*v225)[v228 & 0x1FF];
                v227 = (2 * v222) | 1;
                v222 = 2 * v222 + 2;
                if (v222 >= v220)
                  goto LABEL_314;
              }
            }
            v230 = v226 - (_QWORD)*v225;
            v231 = v230 >> 3;
            if (v230 < -7)
            {
              if (*(_QWORD *)(*(_QWORD *)v226 + 8) >= *(_QWORD *)(v225[-((unint64_t)(510 - v231) >> 9)][~(510 - (_WORD)v231) & 0x1FF]
                                                                   + 8))
                goto LABEL_314;
            }
            else if (*(_QWORD *)(*(_QWORD *)v226 + 8) >= *(_QWORD *)((*(uint64_t **)((char *)v225
                                                                                     + (((unint64_t)(v231 + 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v231 + 1) & 0x1FF]
                                                                      + 8))
            {
              goto LABEL_314;
            }
            v226 += 8;
            if (v226 - (_QWORD)*v225 == 4096)
            {
              v235 = (uint64_t)v225[1];
              ++v225;
              v226 = v235;
            }
LABEL_315:
            v232 = *(void ***)v226;
            *(_QWORD *)v226 = 0;
            v233 = *v224;
            *v224 = v232;
            if (v233)
            {
              v234 = *v233;
              if (*v233)
              {
                *v233 = 0;

              }
              MEMORY[0x20BD0ADEC](v233, 0x1080C40468F112ELL);
            }
            v224 = (void ***)v226;
            if (v222 <= (uint64_t)((unint64_t)(v220 - 2) >> 1))
              continue;
            break;
          }
          if (*v310 != v7)
          {
            v236 = v7 - 1;
            if ((uint64_t *)v226 != v7 - 1)
              goto LABEL_323;
LABEL_340:
            v253 = *(void ***)v226;
            *(_QWORD *)v226 = v223;
            if (!v253)
              goto LABEL_360;
LABEL_357:
            v260 = *v253;
            if (*v253)
            {
              *v253 = 0;

            }
            MEMORY[0x20BD0ADEC](v253, 0x1080C40468F112ELL);
            goto LABEL_360;
          }
          v236 = *(v310 - 1) + 511;
          if ((uint64_t *)v226 == v236)
            goto LABEL_340;
LABEL_323:
          v237 = (void **)*v236;
          *v236 = 0;
          v238 = *(void ***)v226;
          *(_QWORD *)v226 = v237;
          if (v238)
          {
            v239 = *v238;
            if (*v238)
            {
              *v238 = 0;

            }
            MEMORY[0x20BD0ADEC](v238, 0x1080C40468F112ELL);
          }
          v240 = (uint64_t *)(v226 + 8);
          if ((char *)v240 - (char *)*v225 == 4096)
          {
            v241 = v225[1];
            ++v225;
            v240 = v241;
          }
          v242 = (void **)*v236;
          *v236 = v223;
          if (v242)
          {
            v243 = *v242;
            if (*v242)
            {
              *v242 = 0;

            }
            MEMORY[0x20BD0ADEC](v242, 0x1080C40468F112ELL);
          }
          if (v240 != v9)
          {
            v244 = *v225;
            v245 = ((uint64_t)v9 - *(_QWORD *)a1) >> 3;
            v246 = v240 - *v225 + (((_QWORD)v225 - a1) << 6) - v245;
            v247 = v246 - 2;
            if (v246 >= 2)
            {
              v248 = v247 >> 1;
              v249 = (uint64_t)v9;
              if (v247 >= 2)
              {
                v254 = v248 + v245;
                if ((uint64_t)(v248 + v245) < 1)
                {
                  v249 = *(_QWORD *)(a1 - 8 * ((511 - v254) >> 9)) + 8 * (~(511 - (_WORD)v254) & 0x1FF);
                  if (v244 != v240)
                    goto LABEL_337;
                }
                else
                {
                  v249 = *(_QWORD *)(a1 + ((v254 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v254 & 0x1FF);
                  if (v244 != v240)
                    goto LABEL_337;
                }
              }
              else if (v244 != v240)
              {
LABEL_337:
                v252 = *(v240 - 1);
                v250 = (uint64_t)(v240 - 1);
                v251 = (void **)v252;
                if (*(_QWORD *)(*(_QWORD *)v249 + 8) >= *(_QWORD *)(v252 + 8))
                  goto LABEL_360;
LABEL_345:
                *(_QWORD *)v250 = 0;
                v255 = *(_QWORD *)v249;
                do
                {
                  v256 = (void ***)v249;
                  *(_QWORD *)v249 = 0;
                  v257 = *(void ***)v250;
                  *(_QWORD *)v250 = v255;
                  if (v257)
                  {
                    v258 = *v257;
                    if (*v257)
                    {
                      *v257 = 0;

                    }
                    MEMORY[0x20BD0ADEC](v257, 0x1080C40468F112ELL);
                  }
                  if (!v248)
                    break;
                  v249 = (uint64_t)v9;
                  if (v248 >= 3)
                  {
                    v259 = ((v248 - 1) >> 1) + (((uint64_t)v9 - *(_QWORD *)a1) >> 3);
                    if (v259 < 1)
                      v249 = *(_QWORD *)(a1 - 8 * ((unint64_t)(511 - v259) >> 9))
                           + 8 * (~(511 - (_WORD)v259) & 0x1FF);
                    else
                      v249 = *(_QWORD *)(a1 + (((unint64_t)v259 >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * (v259 & 0x1FF);
                  }
                  v255 = *(_QWORD *)v249;
                  v250 = (uint64_t)v256;
                  v248 = (v248 - 1) >> 1;
                }
                while (*(_QWORD *)(*(_QWORD *)v249 + 8) < (unint64_t)v251[1]);
                v253 = *v256;
                *v256 = v251;
                if (!v253)
                  goto LABEL_360;
                goto LABEL_357;
              }
              v250 = (uint64_t)(*(v225 - 1) + 511);
              v251 = *(void ***)v250;
              if (*(_QWORD *)(*(_QWORD *)v249 + 8) >= *(_QWORD *)(*(_QWORD *)v250 + 8))
                goto LABEL_360;
              goto LABEL_345;
            }
          }
LABEL_360:
          v191 = (char *)v310;
          if (v7 == *v310)
          {
            v191 = (char *)(v310 - 1);
            v7 = *(v310 - 1) + 512;
          }
          --v7;
          if (v220-- > 2)
            continue;
          return;
        }
    }
  }
}

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,0>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t *a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = *a4;
  v11 = *a2;
  v12 = *(_QWORD *)(*a4 + 8);
  v13 = *(_QWORD *)(*a2 + 8);
  v14 = *a6;
  v15 = *(_QWORD *)(*a6 + 8);
  if (v12 >= v13)
  {
    if (v15 >= v12)
    {
      v10 = *a6;
      v17 = *a8;
      if (*(_QWORD *)(*a8 + 8) >= *(_QWORD *)(v14 + 8))
        goto LABEL_17;
      goto LABEL_14;
    }
    *a4 = v14;
    *a6 = v10;
    v16 = *a2;
    if (*(_QWORD *)(*a4 + 8) < *(_QWORD *)(*a2 + 8))
    {
      *a2 = *a4;
      *a4 = v16;
      v10 = *a6;
      v17 = *a8;
      if (*(_QWORD *)(*a8 + 8) >= *(_QWORD *)(*a6 + 8))
        goto LABEL_17;
      goto LABEL_14;
    }
  }
  else
  {
    if (v15 >= v12)
    {
      *a2 = v10;
      *a4 = v11;
      v10 = *a6;
      if (*(_QWORD *)(*a6 + 8) >= v13)
        goto LABEL_11;
      *a4 = v10;
    }
    else
    {
      *a2 = v14;
    }
    *a6 = v11;
    v10 = v11;
  }
LABEL_11:
  v17 = *a8;
  if (*(_QWORD *)(*a8 + 8) >= *(_QWORD *)(v10 + 8))
    goto LABEL_17;
LABEL_14:
  *a6 = v17;
  *a8 = v10;
  v18 = *a4;
  if (*(_QWORD *)(*a6 + 8) < *(_QWORD *)(*a4 + 8))
  {
    *a4 = *a6;
    *a6 = v18;
    v19 = *a2;
    if (*(_QWORD *)(*a4 + 8) < *(_QWORD *)(*a2 + 8))
    {
      *a2 = *a4;
      *a4 = v19;
    }
  }
LABEL_17:
  v20 = *a8;
  if (*(_QWORD *)(*a10 + 8) < *(_QWORD *)(*a8 + 8))
  {
    *a8 = *a10;
    *a10 = v20;
    v21 = *a6;
    if (*(_QWORD *)(*a8 + 8) < *(_QWORD *)(*a6 + 8))
    {
      *a6 = *a8;
      *a8 = v21;
      v22 = *a4;
      if (*(_QWORD *)(*a6 + 8) < *(_QWORD *)(*a4 + 8))
      {
        *a4 = *a6;
        *a6 = v22;
        v23 = *a2;
        if (*(_QWORD *)(*a4 + 8) < *(_QWORD *)(*a2 + 8))
        {
          *a2 = *a4;
          *a4 = v23;
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>>(char *a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void ****v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  void ****v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int16 v57;
  int v58;
  uint64_t v59;
  void ****v60;
  uint64_t v61;
  uint64_t v62;
  void ***v63;
  uint64_t v64;
  void ***v65;
  void **v66;
  void *v67;
  void **v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;

  if (a4 == a2)
    return 1;
  v4 = (uint64_t)a4;
  v6 = *(uint64_t **)a3;
  v7 = (uint64_t)a2 - *(_QWORD *)a1;
  v8 = v7 >> 3;
  v9 = 1;
  switch((((uint64_t)a4 - *(_QWORD *)a3) >> 3) + ((a3 - a1) << 6) - (v7 >> 3))
  {
    case 0:
    case 1:
      return v9;
    case 2:
      if (v6 == a4)
        v4 = *((_QWORD *)a3 - 1) + 4096;
      v10 = *(_QWORD *)(v4 - 8);
      v11 = *a2;
      if (*(_QWORD *)(v10 + 8) < *(_QWORD *)(*a2 + 8))
      {
        *a2 = v10;
        *(_QWORD *)(v4 - 8) = v11;
      }
      return 1;
    case 3:
      if (v7 < -7)
      {
        v15 = *(_QWORD *)&a1[-8 * ((unint64_t)(510 - v8) >> 9)] + 8 * (~(510 - (_WORD)v8) & 0x1FF);
        if (v6 != a4)
          goto LABEL_21;
      }
      else
      {
        v15 = *(_QWORD *)&a1[((unint64_t)(v8 + 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (((_WORD)v8 + 1) & 0x1FF);
        if (v6 != a4)
          goto LABEL_21;
      }
      v4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_21:
      v21 = *(_QWORD *)v15;
      v22 = *a2;
      v23 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      v24 = *(_QWORD *)(*a2 + 8);
      v25 = *(_QWORD *)(v4 - 8);
      v26 = *(_QWORD *)(v25 + 8);
      if (v23 < v24)
      {
        if (v26 >= v23)
        {
          *a2 = v21;
          *(_QWORD *)v15 = v22;
          v49 = *(_QWORD *)(v4 - 8);
          if (*(_QWORD *)(v49 + 8) < v24)
          {
            *(_QWORD *)v15 = v49;
            *(_QWORD *)(v4 - 8) = v22;
          }
        }
        else
        {
          *a2 = v25;
          *(_QWORD *)(v4 - 8) = v22;
        }
        return 1;
      }
      if (v26 >= v23)
        return 1;
      *(_QWORD *)v15 = v25;
      *(_QWORD *)(v4 - 8) = v21;
      goto LABEL_93;
    case 4:
      if (v7 >= -7)
      {
        v15 = *(_QWORD *)&a1[((unint64_t)(v8 + 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v8 + 1) & 0x1FF);
        v19 = v8 + 2;
        goto LABEL_34;
      }
      v15 = *(_QWORD *)&a1[-8 * ((unint64_t)(510 - v8) >> 9)] + 8 * (~(510 - (_WORD)v8) & 0x1FF);
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF1)
      {
        v19 = 1;
LABEL_34:
        v33 = *(_QWORD *)&a1[(v19 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v19 & 0x1FF);
        if (v6 != a4)
          goto LABEL_36;
        goto LABEL_35;
      }
      v33 = *(_QWORD *)&a1[-8 * ((unint64_t)(509 - v8) >> 9)] + 8 * (~(509 - (_WORD)v8) & 0x1FF);
      if (v6 == a4)
LABEL_35:
        v4 = *((_QWORD *)a3 - 1) + 4096;
LABEL_36:
      v34 = *(_QWORD *)v15;
      v35 = *a2;
      v36 = *(_QWORD *)(*(_QWORD *)v15 + 8);
      v37 = *(_QWORD *)(*a2 + 8);
      v38 = *(_QWORD *)v33;
      v39 = *(_QWORD *)(*(_QWORD *)v33 + 8);
      if (v36 < v37)
      {
        if (v39 >= v36)
        {
          *a2 = v34;
          *(_QWORD *)v15 = v35;
          v34 = *(_QWORD *)v33;
          if (*(_QWORD *)(*(_QWORD *)v33 + 8) >= v37)
            goto LABEL_88;
          *(_QWORD *)v15 = v34;
        }
        else
        {
          *a2 = v38;
        }
        *(_QWORD *)v33 = v35;
        v34 = v35;
LABEL_88:
        v41 = *(_QWORD *)(v4 - 8);
        if (*(_QWORD *)(v41 + 8) >= *(_QWORD *)(v34 + 8))
          return 1;
LABEL_91:
        *(_QWORD *)v33 = v41;
        *(_QWORD *)(v4 - 8) = v34;
        v70 = *(_QWORD *)v15;
        if (*(_QWORD *)(*(_QWORD *)v33 + 8) < *(_QWORD *)(*(_QWORD *)v15 + 8))
        {
          *(_QWORD *)v15 = *(_QWORD *)v33;
          *(_QWORD *)v33 = v70;
LABEL_93:
          v71 = *a2;
          if (*(_QWORD *)(*(_QWORD *)v15 + 8) < *(_QWORD *)(*a2 + 8))
          {
            *a2 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v71;
          }
        }
        return 1;
      }
      if (v39 >= v36)
      {
        v34 = *(_QWORD *)v33;
        v41 = *(_QWORD *)(v4 - 8);
        if (*(_QWORD *)(v41 + 8) < *(_QWORD *)(v38 + 8))
          goto LABEL_91;
      }
      else
      {
        *(_QWORD *)v15 = v38;
        *(_QWORD *)v33 = v34;
        v40 = *a2;
        if (*(_QWORD *)(*(_QWORD *)v15 + 8) >= *(_QWORD *)(*a2 + 8))
          goto LABEL_88;
        *a2 = *(_QWORD *)v15;
        *(_QWORD *)v15 = v40;
        v34 = *(_QWORD *)v33;
        v41 = *(_QWORD *)(v4 - 8);
        if (*(_QWORD *)(v41 + 8) < *(_QWORD *)(*(_QWORD *)v33 + 8))
          goto LABEL_91;
      }
      return 1;
    case 5:
      if (v7 >= -7)
      {
        v16 = &a1[8 * ((unint64_t)(v8 + 1) >> 9)];
        v17 = (uint64_t *)(*(_QWORD *)v16 + 8 * ((v8 + 1) & 0x1FF));
        v18 = v8 + 2;
LABEL_26:
        v27 = &a1[8 * (v18 >> 9)];
        v28 = (uint64_t *)(*(_QWORD *)v27 + 8 * (v18 & 0x1FF));
        v29 = v8 + 3;
        goto LABEL_27;
      }
      v16 = &a1[-8 * ((unint64_t)(510 - v8) >> 9)];
      v17 = (uint64_t *)(*(_QWORD *)v16 + 8 * (~(510 - (_WORD)v8) & 0x1FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFF1)
      {
        v18 = 1;
        goto LABEL_26;
      }
      v27 = &a1[-8 * ((unint64_t)(509 - v8) >> 9)];
      v28 = (uint64_t *)(*(_QWORD *)v27 + 8 * (~(509 - (_WORD)v8) & 0x1FF));
      if ((unint64_t)v7 >= 0xFFFFFFFFFFFFFFE9)
      {
        v29 = 1;
LABEL_27:
        v30 = &a1[8 * (v29 >> 9)];
        v31 = (uint64_t *)(*(_QWORD *)v30 + 8 * (v29 & 0x1FF));
        if (v6 != (uint64_t *)v4)
          goto LABEL_29;
        goto LABEL_28;
      }
      v74 = 508 - v8;
      v30 = &a1[-8 * (v74 >> 9)];
      v31 = (uint64_t *)(*(_QWORD *)v30 + 8 * (~(_WORD)v74 & 0x1FF));
      if (v6 == (uint64_t *)v4)
      {
LABEL_28:
        v32 = *((_QWORD *)a3 - 1);
        a3 -= 8;
        v4 = v32 + 4096;
      }
LABEL_29:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RTCVideoFrameReorderQueue::append(RTCVideoFrame *,unsigned char)::$_0 &,std::__deque_iterator<std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>*,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>&,std::unique_ptr<webrtc::RTCVideoFrameReorderQueue::RTCVideoFrameWithOrder>**,long,512l>,0>((uint64_t)a1, a2, (uint64_t)v16, v17, (uint64_t)v27, v28, (uint64_t)v30, v31, (uint64_t)a3, (uint64_t *)(v4 - 8));
      return 1;
    default:
      if (v7 <= -16)
      {
        v12 = (void ****)&a1[-8 * ((unint64_t)(509 - v8) >> 9)];
        v13 = (uint64_t)&(*v12)[~(509 - (_WORD)v8) & 0x1FF];
        v14 = 510 - v8;
        goto LABEL_18;
      }
      v12 = (void ****)&a1[8 * ((unint64_t)(v8 + 2) >> 9)];
      v13 = (uint64_t)&(*v12)[(v8 + 2) & 0x1FF];
      if (v8 == -1)
      {
        v14 = 511;
LABEL_18:
        v20 = *(_QWORD *)&a1[-8 * (v14 >> 9)] + 8 * (~(_WORD)v14 & 0x1FF);
        goto LABEL_44;
      }
      v20 = *(_QWORD *)&a1[((unint64_t)(v8 + 1) >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * ((v8 + 1) & 0x1FF);
LABEL_44:
      v42 = *(_QWORD *)v20;
      v43 = *a2;
      v44 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      v45 = *(_QWORD *)(*a2 + 8);
      v46 = *(_QWORD *)v13;
      v47 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (v44 >= v45)
      {
        if (v47 < v44)
        {
          *(_QWORD *)v20 = v46;
          *(_QWORD *)v13 = v42;
          v48 = *a2;
          if (*(_QWORD *)(*(_QWORD *)v20 + 8) < *(_QWORD *)(*a2 + 8))
          {
            *a2 = *(_QWORD *)v20;
            *(_QWORD *)v20 = v48;
          }
        }
      }
      else
      {
        if (v47 >= v44)
        {
          *a2 = v42;
          *(_QWORD *)v20 = v43;
          if (*(_QWORD *)(*(_QWORD *)v13 + 8) >= v45)
            goto LABEL_57;
          *(_QWORD *)v20 = *(_QWORD *)v13;
        }
        else
        {
          *a2 = v46;
        }
        *(_QWORD *)v13 = v43;
      }
LABEL_57:
      v50 = v13 - (_QWORD)*v12;
      v51 = v50 >> 3;
      if (v50 < -7)
      {
        v56 = 510 - v51;
        v57 = ~(_WORD)v56;
        v53 = &v12[-(v56 >> 9)];
        v54 = (uint64_t)*v53;
        v55 = (uint64_t)&(*v53)[v57 & 0x1FF];
        if ((uint64_t *)v55 == a4)
          return 1;
      }
      else
      {
        v52 = v51 + 1;
        v53 = &v12[(unint64_t)(v51 + 1) >> 9];
        v54 = (uint64_t)*v53;
        v55 = (uint64_t)&(*v53)[v52 & 0x1FF];
        if ((uint64_t *)v55 == a4)
          return 1;
      }
      v58 = 0;
      break;
  }
  while (1)
  {
    v59 = v55;
    v60 = v53;
    v61 = *(_QWORD *)v55;
    if (*(_QWORD *)(*(_QWORD *)v55 + 8) < *(_QWORD *)(*(_QWORD *)v13 + 8))
      break;
LABEL_81:
    v55 = v59 + 8;
    v53 = v60;
    if (v59 + 8 - v54 == 4096)
    {
      v53 = v60 + 1;
      v54 = (uint64_t)v60[1];
      v55 = v54;
    }
    v12 = v60;
    v13 = v59;
    if (v55 == v4)
      return 1;
  }
  *(_QWORD *)v55 = 0;
  v62 = *(_QWORD *)v13;
  v63 = (void ***)v55;
  while (1)
  {
    v65 = (void ***)v13;
    *(_QWORD *)v13 = 0;
    v66 = *v63;
    *v63 = (void **)v62;
    if (v66)
    {
      v67 = *v66;
      if (*v66)
      {
        *v66 = 0;

      }
      MEMORY[0x20BD0ADEC](v66, 0x1080C40468F112ELL);
    }
    if (v65 == (void ***)a2)
      break;
    if (v65 == *v12)
    {
      v64 = (uint64_t)*--v12;
      v13 = v64 + 4088;
      v62 = *(_QWORD *)(v64 + 4088);
      v63 = v65;
      if (*(_QWORD *)(v61 + 8) >= *(_QWORD *)(v62 + 8))
        goto LABEL_75;
    }
    else
    {
      v13 = (uint64_t)(v65 - 1);
      v62 = (uint64_t)*(v65 - 1);
      v63 = v65;
      if (*(_QWORD *)(v61 + 8) >= *(_QWORD *)(v62 + 8))
        goto LABEL_75;
    }
  }
  v65 = (void ***)a2;
LABEL_75:
  v68 = *v65;
  *v65 = (void **)v61;
  if (v68)
  {
    v69 = *v68;
    if (*v68)
    {
      *v68 = 0;

    }
    MEMORY[0x20BD0ADEC](v68, 0x1080C40468F112ELL);
  }
  if (++v58 != 8)
  {
    v54 = (uint64_t)*v60;
    goto LABEL_81;
  }
  v73 = v59 + 8;
  if (v59 + 8 - (_QWORD)*v60 == 4096)
    v73 = (uint64_t)v60[1];
  return v73 == v4;
}

unint64_t webrtc::RtpBitrateConfigurator::UpdateWithSdpParameters(uint64_t a1, uint64_t *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v21;

  v2 = *((_DWORD *)a2 + 1);
  if (v2 == -1)
  {
    v4 = 0;
    v2 = 0;
    v11 = *a2;
    *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 36) = v11;
    v6 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
LABEL_6:
      v6 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 40);
    v15 = v2 == v3;
    v4 = v2 != v3;
    if (v15)
      v2 = 0;
    v5 = *a2;
    *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 2);
    *(_QWORD *)(a1 + 36) = v5;
    v6 = *(unsigned __int8 *)(a1 + 16);
    if (*(_BYTE *)(a1 + 16))
      goto LABEL_6;
  }
  LODWORD(v7) = *(_DWORD *)(a1 + 36);
  if (v6 > (int)v7)
    LODWORD(v7) = v6;
  if (*(_BYTE *)(a1 + 32))
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = *(_DWORD *)(a1 + 44);
    if (v9 >= v8)
      v10 = *(_DWORD *)(a1 + 28);
    else
      v10 = *(_DWORD *)(a1 + 44);
    if (v9 < 1)
      v10 = *(_DWORD *)(a1 + 28);
    if (v8 > 0)
      v9 = v10;
  }
  else
  {
    v9 = *(_DWORD *)(a1 + 44);
  }
  v12 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v12 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    LODWORD(v12) = -1;
  if (v12 >= v9)
    v13 = v9;
  else
    v13 = v12;
  if ((int)v12 < 1)
    v13 = v9;
  if (v9 >= 1)
    v14 = v13;
  else
    v14 = v12;
  v15 = (int)v7 <= v14 || v14 == -1;
  if (v15)
    v7 = v7;
  else
    v7 = v14;
  if ((_DWORD)v7 == *(_DWORD *)a1 && v14 == *(_DWORD *)(a1 + 8) && (_DWORD)v4 == 0)
    return v4 << 32;
  if ((_DWORD)v4)
  {
    if (v2 <= (int)v7)
      v17 = v7;
    else
      v17 = v2;
    if (v14 >= v17)
      v18 = v17;
    else
      v18 = v14;
    if (v14 < 1)
      v18 = v17;
    if (v17 >= 1)
      v19 = v18;
    else
      v19 = v14;
    *(_DWORD *)a1 = v7;
    *(_DWORD *)(a1 + 4) = v19;
    *(_DWORD *)(a1 + 8) = v14;
    return v7 | (v19 << 32);
  }
  else
  {
    v21 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)a1 = v7;
    *(_DWORD *)(a1 + 4) = v21;
    *(_DWORD *)(a1 + 8) = v14;
    return v7 | 0xFFFFFFFF00000000;
  }
}

unint64_t webrtc::RtpBitrateConfigurator::UpdateConstraints(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;

  v2 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(a1 + 16))
    v2 = *(_DWORD *)(a1 + 12);
  LODWORD(v3) = *(_DWORD *)(a1 + 36);
  if (v2 > (int)v3)
    LODWORD(v3) = v2;
  if (*(_BYTE *)(a1 + 32))
  {
    v4 = *(_DWORD *)(a1 + 28);
    v5 = *(_DWORD *)(a1 + 44);
    if (v5 >= v4)
      v6 = *(_DWORD *)(a1 + 28);
    else
      v6 = *(_DWORD *)(a1 + 44);
    if (v5 < 1)
      v6 = *(_DWORD *)(a1 + 28);
    if (v4 > 0)
      v5 = v6;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 44);
  }
  v7 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v7 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    LODWORD(v7) = -1;
  if (v7 >= v5)
    v8 = v5;
  else
    v8 = v7;
  if ((int)v7 < 1)
    v8 = v5;
  if (v5 >= 1)
    v9 = v8;
  else
    v9 = v7;
  if ((int)v3 <= v9 || v9 == -1)
    v3 = v3;
  else
    v3 = v9;
  if ((_DWORD)v3 == *(_DWORD *)a1)
  {
    v11 = *(unsigned __int8 *)(a2 + 4);
    if (v9 == *(_DWORD *)(a1 + 8) && (_DWORD)v11 == 0)
      return v11 << 32;
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(a2 + 4);
  }
  if ((_DWORD)v11)
  {
    v14 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= (int)v3)
      v14 = v3;
    if (v9 >= v14)
      v15 = v14;
    else
      v15 = v9;
    if (v9 < 1)
      v15 = v14;
    if (v14 >= 1)
      v16 = v15;
    else
      v16 = v9;
    *(_DWORD *)a1 = v3;
    *(_DWORD *)(a1 + 4) = v16;
    *(_DWORD *)(a1 + 8) = v9;
    return v3 | (v16 << 32);
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)a1 = v3;
    *(_DWORD *)(a1 + 4) = v17;
    *(_DWORD *)(a1 + 8) = v9;
    return v3 | 0xFFFFFFFF00000000;
  }
}

uint64_t webrtc::RtpConfig::RtpConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  std::string *v29;
  __int128 *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int64_t v38;
  char *v39;
  char *v40;
  _BYTE *v41;
  _BYTE *v42;
  int64_t v43;
  char *v44;
  char *v45;
  std::string *v46;
  __int128 v47;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v6 < 0)
      goto LABEL_35;
    v7 = (char *)operator new(v4 - *(_QWORD *)a2);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[4 * (v6 >> 2)];
    *(_QWORD *)(a1 + 16) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(a1 + 8) = v8;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = v10 - v9;
  if (v10 != v9)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    if (v12 >= 0xAAAAAAAAAAAAAABLL)
      goto LABEL_35;
    v13 = (char *)operator new(v11);
    v14 = 0;
    *(_QWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = &v13[24 * v12];
    do
    {
      while (1)
      {
        v15 = (__int128 *)(v9 + v14);
        v16 = (std::string *)&v13[v14];
        if ((*(char *)(v9 + v14 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
        v14 += 24;
        if (v9 + v14 == v10)
          goto LABEL_10;
      }
      v17 = *v15;
      v16->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      v14 += 24;
    }
    while (v9 + v14 != v10);
LABEL_10:
    *(_QWORD *)(a1 + 32) = &v13[v14];
  }
  v18 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  v20 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(a2 + 104);
  v23 = v22 - v21;
  if (v22 != v21)
  {
    if (v23 < 0)
      goto LABEL_35;
    v24 = v23 >> 5;
    v25 = (char *)operator new(v23);
    v26 = 0;
    *(_QWORD *)(a1 + 96) = v25;
    *(_QWORD *)(a1 + 104) = v25;
    *(_QWORD *)(a1 + 112) = &v25[32 * v24];
    do
    {
      v29 = (std::string *)&v25[v26];
      v30 = (__int128 *)(v21 + v26);
      if (*(char *)(v21 + v26 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)v30, *((_QWORD *)v30 + 1));
      }
      else
      {
        v31 = *v30;
        v29->__r_.__value_.__r.__words[2] = *((_QWORD *)v30 + 2);
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v31;
      }
      v27 = &v25[v26];
      v28 = *(_DWORD *)(v21 + v26 + 24);
      v27[28] = *(_BYTE *)(v21 + v26 + 28);
      *((_DWORD *)v27 + 6) = v28;
      v26 += 32;
    }
    while (v21 + v26 != v22);
    *(_QWORD *)(a1 + 104) = &v25[v26];
  }
  v32 = (std::string *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v33 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
  }
  v34 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v34;
  v35 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = v35;
  *(_QWORD *)(a1 + 176) = 0;
  v37 = *(_BYTE **)(a2 + 176);
  v36 = *(_BYTE **)(a2 + 184);
  v38 = v36 - v37;
  if (v36 != v37)
  {
    if (v38 < 0)
      goto LABEL_35;
    v39 = (char *)operator new(v36 - v37);
    *(_QWORD *)(a1 + 176) = v39;
    *(_QWORD *)(a1 + 184) = v39;
    v40 = &v39[4 * (v38 >> 2)];
    *(_QWORD *)(a1 + 192) = v40;
    memcpy(v39, v37, v38);
    *(_QWORD *)(a1 + 184) = v40;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v42 = *(_BYTE **)(a2 + 200);
  v41 = *(_BYTE **)(a2 + 208);
  v43 = v41 - v42;
  if (v41 == v42)
    goto LABEL_31;
  if (v43 < 0)
LABEL_35:
    abort();
  v44 = (char *)operator new(v41 - v42);
  *(_QWORD *)(a1 + 200) = v44;
  *(_QWORD *)(a1 + 208) = v44;
  v45 = &v44[4 * (v43 >> 2)];
  *(_QWORD *)(a1 + 216) = v45;
  memcpy(v44, v42, v43);
  *(_QWORD *)(a1 + 208) = v45;
LABEL_31:
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  v46 = (std::string *)(a1 + 232);
  if (*(char *)(a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external(v46, *(const std::string::value_type **)(a2 + 232), *(_QWORD *)(a2 + 240));
  }
  else
  {
    v47 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
  }
  *(_BYTE *)(a1 + 256) = *(_BYTE *)(a2 + 256);
  return a1;
}

void webrtc::RtpConfig::~RtpConfig(webrtc::RtpConfig *this)
{
  void *v2;
  void *v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;
  void *v9;
  void *v10;

  if ((*((char *)this + 255) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 25);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 29));
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  if ((*((char *)this + 143) & 0x80000000) == 0)
  {
    v4 = (void **)*((_QWORD *)this + 12);
    if (!v4)
      goto LABEL_8;
LABEL_16:
    v7 = (void **)*((_QWORD *)this + 13);
    if (v7 == v4)
    {
      *((_QWORD *)this + 13) = v4;
      operator delete(v4);
      if (*((char *)this + 71) < 0)
        goto LABEL_18;
    }
    else
    {
      do
      {
        if (*((char *)v7 - 9) < 0)
          operator delete(*(v7 - 4));
        v7 -= 4;
      }
      while (v7 != v4);
      v9 = (void *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 13) = v4;
      operator delete(v9);
      if (*((char *)this + 71) < 0)
        goto LABEL_18;
    }
LABEL_9:
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_10;
    goto LABEL_19;
  }
  operator delete(*((void **)this + 15));
  v4 = (void **)*((_QWORD *)this + 12);
  if (v4)
    goto LABEL_16;
LABEL_8:
  if ((*((char *)this + 71) & 0x80000000) == 0)
    goto LABEL_9;
LABEL_18:
  operator delete(*((void **)this + 6));
  v5 = (void **)*((_QWORD *)this + 3);
  if (!v5)
  {
LABEL_10:
    v6 = *(void **)this;
    if (!*(_QWORD *)this)
      return;
    goto LABEL_11;
  }
LABEL_19:
  v8 = (void **)*((_QWORD *)this + 4);
  if (v8 == v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
    v6 = *(void **)this;
    if (!*(_QWORD *)this)
      return;
LABEL_11:
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
    return;
  }
  do
  {
    if (*((char *)v8 - 1) < 0)
      operator delete(*(v8 - 3));
    v8 -= 3;
  }
  while (v8 != v5);
  v10 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 4) = v5;
  operator delete(v10);
  v6 = *(void **)this;
  if (*(_QWORD *)this)
    goto LABEL_11;
}

unint64_t webrtc::RtpConfig::ToString@<X0>(webrtc::RtpConfig *this@<X0>, char *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  const char *v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  unint64_t v34;
  const char *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t i;
  size_t v41;
  char *v42;
  size_t v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  const char *v50;
  size_t v51;
  size_t v52;
  char *v53;
  size_t v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  size_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  size_t v66;
  size_t v67;
  char *p_p;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  const void *v73;
  size_t v74;
  size_t v75;
  _QWORD *v76;
  size_t v77;
  size_t v78;
  size_t v79;
  size_t v80;
  const char *v81;
  unint64_t v82;
  size_t v83;
  size_t v84;
  size_t v85;
  size_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  size_t v91;
  size_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  size_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  size_t v107;
  size_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  const void *v114;
  size_t v115;
  size_t v116;
  _QWORD *v117;
  size_t v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t result;
  size_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void *__p;
  size_t v130;
  unint64_t v131;
  char *v132;
  __int128 v133;
  char *__s;
  __int128 v135;
  char v136[2048];
  char __src[23];
  unsigned __int8 v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  v4 = v136;
  v132 = v136;
  strcpy(v136, "{ssrcs: [");
  v133 = xmmword_208F1A4E0;
  v5 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
  {
    v10 = 2048;
    v9 = 9;
  }
  else
  {
    v6 = 0;
    do
    {
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%u", *(_DWORD *)(v5 + 4 * v6));
      v5 = *(_QWORD *)this;
      v7 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
      if (v6 != v7 - 1)
      {
        if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 2uLL)
          v8 = 2;
        else
          v8 = v133 + ~*((_QWORD *)&v133 + 1);
        memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ", v8);
        *((_QWORD *)&v133 + 1) += v8;
        v132[*((_QWORD *)&v133 + 1)] = 0;
        v5 = *(_QWORD *)this;
        v7 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
      }
      ++v6;
    }
    while (v6 < v7);
    v9 = *((_QWORD *)&v133 + 1);
    v10 = v133;
    v4 = v132;
  }
  v11 = v10 + ~v9;
  if (v11 >= 0xA)
    v12 = 10;
  else
    v12 = v11;
  memcpy(&v4[v9], "], rids: [", v12);
  *((_QWORD *)&v133 + 1) += v12;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v13 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (_QWORD *)(v13 + v14);
      LODWORD(v13) = *(char *)(v13 + v14 + 23);
      if ((v13 & 0x80000000) != 0)
      {
        v13 = v16[1];
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_262;
        v16 = (_QWORD *)*v16;
        if (v13 && v16 == 0)
          goto LABEL_262;
      }
      else
      {
        v13 = v13;
      }
      if (v13 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
        v18 = v133 + ~*((_QWORD *)&v133 + 1);
      else
        v18 = v13;
      memcpy(&v132[*((_QWORD *)&v133 + 1)], v16, v18);
      *((_QWORD *)&v133 + 1) += v18;
      v132[*((_QWORD *)&v133 + 1)] = 0;
      v13 = *((_QWORD *)this + 3);
      v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - v13) >> 3);
      if (v15 != v19 - 1)
      {
        if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 2uLL)
          v20 = 2;
        else
          v20 = v133 + ~*((_QWORD *)&v133 + 1);
        memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ", v20);
        *((_QWORD *)&v133 + 1) += v20;
        v132[*((_QWORD *)&v133 + 1)] = 0;
        v13 = *((_QWORD *)this + 3);
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - v13) >> 3);
      }
      ++v15;
      v14 += 24;
    }
    while (v15 < v19);
  }
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 9uLL)
    v21 = 9;
  else
    v21 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], "], mid: '", v21);
  *((_QWORD *)&v133 + 1) += v21;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v22 = (_QWORD *)((char *)this + 48);
  if (*((char *)this + 71) < 0)
  {
    v23 = *((_QWORD *)this + 7);
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_262;
    v22 = (_QWORD *)*v22;
    if (v23)
    {
      if (!v22)
        goto LABEL_262;
    }
  }
  else
  {
    v23 = *((unsigned __int8 *)this + 71);
  }
  if (v23 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v24 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v24 = v23;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v22, v24);
  *((_QWORD *)&v133 + 1) += v24;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v25 = v133;
  v26 = *((_QWORD *)&v133 + 1) + 1;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], "'", v133 != *((_QWORD *)&v133 + 1) + 1);
  v27 = *((_QWORD *)&v133 + 1);
  if (v25 != v26)
    v27 = *((_QWORD *)&v133 + 1) + 1;
  *((_QWORD *)&v133 + 1) = v27;
  v132[v27] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0xDuLL)
    v28 = 13;
  else
    v28 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", rtcp_mode: ", v28);
  *((_QWORD *)&v133 + 1) += v28;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if (*((_DWORD *)this + 18) == 1)
    v29 = "RtcpMode::kCompound";
  else
    v29 = "RtcpMode::kReducedSize";
  if (*((_DWORD *)this + 18) == 1)
    v30 = 19;
  else
    v30 = 22;
  if (v30 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v31 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v31 = v30;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v29, v31);
  *((_QWORD *)&v133 + 1) += v31;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x13uLL)
    v32 = 19;
  else
    v32 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", max_packet_size: ", v32);
  *((_QWORD *)&v133 + 1) += v32;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%lu", *((_QWORD *)this + 10));
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x16uLL)
    v33 = 22;
  else
    v33 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", extmap-allow-mixed: ", v33);
  *((_QWORD *)&v133 + 1) += v33;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v34 = 4;
  if (*((_BYTE *)this + 88))
  {
    v35 = "true";
  }
  else
  {
    v34 = 5;
    v35 = "false";
  }
  if (v34 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v36 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v36 = v34;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v35, v36);
  *((_QWORD *)&v133 + 1) += v36;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0xFuLL)
    v37 = 15;
  else
    v37 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", extensions: [", v37);
  *((_QWORD *)&v133 + 1) += v37;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v38 = *((_QWORD *)this + 12);
  if (*((_QWORD *)this + 13) != v38)
  {
    v39 = 0;
    for (i = 0; i < v44; ++i)
    {
      webrtc::RtpExtension::ToString((webrtc::RtpExtension *)(v38 + v39), __src);
      if ((char)v138 < 0)
      {
        v41 = *(_QWORD *)&__src[8];
        if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
          goto LABEL_262;
        v42 = *(char **)__src;
        if (*(_QWORD *)&__src[8])
        {
          if (!*(_QWORD *)__src)
            goto LABEL_262;
        }
      }
      else
      {
        v41 = v138;
        v42 = __src;
      }
      if (v41 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
        v43 = v133 + ~*((_QWORD *)&v133 + 1);
      else
        v43 = v41;
      memcpy(&v132[*((_QWORD *)&v133 + 1)], v42, v43);
      *((_QWORD *)&v133 + 1) += v43;
      v132[*((_QWORD *)&v133 + 1)] = 0;
      if ((char)v138 < 0)
      {
        operator delete(*(void **)__src);
        v38 = *((_QWORD *)this + 12);
        v44 = (*((_QWORD *)this + 13) - v38) >> 5;
        if (i != v44 - 1)
        {
LABEL_87:
          if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 2uLL)
            v45 = 2;
          else
            v45 = v133 + ~*((_QWORD *)&v133 + 1);
          memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ", v45);
          *((_QWORD *)&v133 + 1) += v45;
          v132[*((_QWORD *)&v133 + 1)] = 0;
          v38 = *((_QWORD *)this + 12);
          v44 = (*((_QWORD *)this + 13) - v38) >> 5;
        }
      }
      else
      {
        v38 = *((_QWORD *)this + 12);
        v44 = (*((_QWORD *)this + 13) - v38) >> 5;
        if (i != v44 - 1)
          goto LABEL_87;
      }
      v39 += 32;
    }
  }
  __src[0] = 93;
  v46 = v133;
  v47 = *((_QWORD *)&v133 + 1) + 1;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], __src, v133 != *((_QWORD *)&v133 + 1) + 1);
  v48 = *((_QWORD *)&v133 + 1);
  if (v46 != v47)
    v48 = *((_QWORD *)&v133 + 1) + 1;
  *((_QWORD *)&v133 + 1) = v48;
  v132[v48] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 8uLL)
    v49 = 8;
  else
    v49 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", lntf: ", v49);
  *((_QWORD *)&v133 + 1) += v49;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if (*((_BYTE *)this + 149))
    v50 = "{enabled: true}";
  else
    v50 = "{enabled: false}";
  if (*((_BYTE *)this + 149))
    v51 = 15;
  else
    v51 = 16;
  v138 = v51;
  if (v50 >= __src && &__src[v51] > v50)
    goto LABEL_262;
  memcpy(__src, v50, v51);
  __src[v51] = 0;
  if ((char)v138 < 0)
  {
    v52 = *(_QWORD *)&__src[8];
    if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
      goto LABEL_262;
    v53 = *(char **)__src;
    if (*(_QWORD *)&__src[8])
    {
      if (!*(_QWORD *)__src)
        goto LABEL_262;
    }
  }
  else
  {
    v52 = v138;
    v53 = __src;
  }
  if (v52 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v54 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v54 = v52;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v53, v54);
  *((_QWORD *)&v133 + 1) += v54;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((char)v138 < 0)
    operator delete(*(void **)__src);
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x19uLL)
    v55 = 25;
  else
    v55 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", nack: {rtp_history_ms: ", v55);
  *((_QWORD *)&v133 + 1) += v55;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%d", *((_DWORD *)this + 38));
  __src[0] = 125;
  v56 = v133;
  v57 = *((_QWORD *)&v133 + 1) + 1;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], __src, v133 != *((_QWORD *)&v133 + 1) + 1);
  v58 = *((_QWORD *)&v133 + 1);
  if (v56 != v57)
    v58 = *((_QWORD *)&v133 + 1) + 1;
  *((_QWORD *)&v133 + 1) = v58;
  v132[v58] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0xAuLL)
    v59 = 10;
  else
    v59 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ulpfec: ", v59);
  *((_QWORD *)&v133 + 1) += v59;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  __s = __src;
  strcpy(__src, "{ulpfec_payload_type: ");
  v135 = xmmword_208F1A4F0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 39));
  if ((_QWORD)v135 + ~*((_QWORD *)&v135 + 1) >= 0x14uLL)
    v60 = 20;
  else
    v60 = v135 + ~*((_QWORD *)&v135 + 1);
  memcpy(&__s[*((_QWORD *)&v135 + 1)], ", red_payload_type: ", v60);
  *((_QWORD *)&v135 + 1) += v60;
  __s[*((_QWORD *)&v135 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 40));
  if ((_QWORD)v135 + ~*((_QWORD *)&v135 + 1) >= 0x18uLL)
    v61 = 24;
  else
    v61 = v135 + ~*((_QWORD *)&v135 + 1);
  memcpy(&__s[*((_QWORD *)&v135 + 1)], ", red_rtx_payload_type: ", v61);
  *((_QWORD *)&v135 + 1) += v61;
  __s[*((_QWORD *)&v135 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 41));
  LOBYTE(__p) = 125;
  v62 = v135;
  v63 = *((_QWORD *)&v135 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v135 + 1)], &__p, v135 != *((_QWORD *)&v135 + 1) + 1);
  v64 = *((_QWORD *)&v135 + 1);
  if (v62 != v63)
    v64 = *((_QWORD *)&v135 + 1) + 1;
  *((_QWORD *)&v135 + 1) = v64;
  __s[v64] = 0;
  v65 = __s;
  if (!__s)
    goto LABEL_262;
  v66 = strlen(__s);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v67 = v66;
  if (v66 > 0x16)
  {
    v70 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v70 = v66 | 7;
    v71 = v70 + 1;
    p_p = (char *)operator new(v70 + 1);
    v130 = v67;
    v131 = v71 | 0x8000000000000000;
    __p = p_p;
    v69 = &p_p[v67];
    if (p_p > v65)
      goto LABEL_139;
  }
  else
  {
    HIBYTE(v131) = v66;
    p_p = (char *)&__p;
    v69 = (char *)&__p + v67;
    if (&__p > (void **)__s)
      goto LABEL_139;
  }
  if (v69 > v65)
    goto LABEL_262;
LABEL_139:
  if (v67)
    memmove(p_p, v65, v67);
  *v69 = 0;
  if (SHIBYTE(v131) < 0)
  {
    v72 = v130;
    if ((v130 & 0x8000000000000000) != 0)
      goto LABEL_262;
    v73 = __p;
    if (v130)
    {
      if (!__p)
        goto LABEL_262;
    }
  }
  else
  {
    v72 = HIBYTE(v131);
    v73 = &__p;
  }
  if (v72 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v74 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v74 = v72;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v73, v74);
  *((_QWORD *)&v133 + 1) += v74;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if (SHIBYTE(v131) < 0)
    operator delete(__p);
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x10uLL)
    v75 = 16;
  else
    v75 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", payload_name: ", v75);
  *((_QWORD *)&v133 + 1) += v75;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v76 = (_QWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    v77 = *((_QWORD *)this + 16);
    if ((v77 & 0x8000000000000000) != 0)
      goto LABEL_262;
    v76 = (_QWORD *)*v76;
    if (v77)
    {
      if (!v76)
        goto LABEL_262;
    }
  }
  else
  {
    v77 = *((unsigned __int8 *)this + 143);
  }
  if (v77 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v78 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v78 = v77;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v76, v78);
  *((_QWORD *)&v133 + 1) += v78;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x10uLL)
    v79 = 16;
  else
    v79 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", payload_type: ", v79);
  *((_QWORD *)&v133 + 1) += v79;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%d", *((_DWORD *)this + 36));
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0xFuLL)
    v80 = 15;
  else
    v80 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", raw_payload: ", v80);
  *((_QWORD *)&v133 + 1) += v80;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if (*((_BYTE *)this + 148))
    v81 = "true";
  else
    v81 = "false";
  v82 = 4;
  if (!*((_BYTE *)this + 148))
    v82 = 5;
  if (v82 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v83 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v83 = v82;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v81, v83);
  *((_QWORD *)&v133 + 1) += v83;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x1AuLL)
    v84 = 26;
  else
    v84 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", flexfec: {payload_type: ", v84);
  *((_QWORD *)&v133 + 1) += v84;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%d", *((_DWORD *)this + 42));
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 8uLL)
    v85 = 8;
  else
    v85 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ssrc: ", v85);
  *((_QWORD *)&v133 + 1) += v85;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%u", *((_DWORD *)this + 43));
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0x1AuLL)
    v86 = 26;
  else
    v86 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", protected_media_ssrcs: [", v86);
  *((_QWORD *)&v133 + 1) += v86;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v87 = *((_QWORD *)this + 22);
  if (*((_QWORD *)this + 23) != v87)
  {
    v88 = 0;
    do
    {
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v132, "%u", *(_DWORD *)(v87 + 4 * v88));
      v87 = *((_QWORD *)this + 22);
      v89 = (*((_QWORD *)this + 23) - v87) >> 2;
      if (v88 != v89 - 1)
      {
        if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 2uLL)
          v90 = 2;
        else
          v90 = v133 + ~*((_QWORD *)&v133 + 1);
        memcpy(&v132[*((_QWORD *)&v133 + 1)], ", ", v90);
        *((_QWORD *)&v133 + 1) += v90;
        v132[*((_QWORD *)&v133 + 1)] = 0;
        v87 = *((_QWORD *)this + 22);
        v89 = (*((_QWORD *)this + 23) - v87) >> 2;
      }
      ++v88;
    }
    while (v88 < v89);
  }
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 2uLL)
    v91 = 2;
  else
    v91 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], "]}", v91);
  *((_QWORD *)&v133 + 1) += v91;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 7uLL)
    v92 = 7;
  else
    v92 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", rtx: ", v92);
  *((_QWORD *)&v133 + 1) += v92;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v93 = __src;
  __s = __src;
  strcpy(__src, "{ssrcs: [");
  v135 = xmmword_208F1A500;
  v94 = *((_QWORD *)this + 25);
  if (*((_QWORD *)this + 26) == v94)
  {
    v99 = 1024;
    v98 = 9;
  }
  else
  {
    v95 = 0;
    do
    {
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%u", *(_DWORD *)(v94 + 4 * v95));
      v94 = *((_QWORD *)this + 25);
      v96 = (*((_QWORD *)this + 26) - v94) >> 2;
      if (v95 != v96 - 1)
      {
        if ((_QWORD)v135 + ~*((_QWORD *)&v135 + 1) >= 2uLL)
          v97 = 2;
        else
          v97 = v135 + ~*((_QWORD *)&v135 + 1);
        memcpy(&__s[*((_QWORD *)&v135 + 1)], ", ", v97);
        *((_QWORD *)&v135 + 1) += v97;
        __s[*((_QWORD *)&v135 + 1)] = 0;
        v94 = *((_QWORD *)this + 25);
        v96 = (*((_QWORD *)this + 26) - v94) >> 2;
      }
      ++v95;
    }
    while (v95 < v96);
    v98 = *((_QWORD *)&v135 + 1);
    v99 = v135;
    v93 = __s;
  }
  LOBYTE(__p) = 93;
  v100 = v98 + 1;
  memcpy(&v93[v98], &__p, v99 != v98 + 1);
  v101 = *((_QWORD *)&v135 + 1);
  if (v99 != v100)
    v101 = *((_QWORD *)&v135 + 1) + 1;
  *((_QWORD *)&v135 + 1) = v101;
  __s[v101] = 0;
  if ((_QWORD)v135 + ~*((_QWORD *)&v135 + 1) >= 0x10uLL)
    v102 = 16;
  else
    v102 = v135 + ~*((_QWORD *)&v135 + 1);
  memcpy(&__s[*((_QWORD *)&v135 + 1)], ", payload_type: ", v102);
  *((_QWORD *)&v135 + 1) += v102;
  __s[*((_QWORD *)&v135 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 56));
  LOBYTE(__p) = 125;
  v103 = v135;
  v104 = *((_QWORD *)&v135 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v135 + 1)], &__p, v135 != *((_QWORD *)&v135 + 1) + 1);
  v105 = *((_QWORD *)&v135 + 1);
  if (v103 != v104)
    v105 = *((_QWORD *)&v135 + 1) + 1;
  *((_QWORD *)&v135 + 1) = v105;
  __s[v105] = 0;
  v106 = __s;
  if (!__s)
    goto LABEL_262;
  v107 = strlen(__s);
  if (v107 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v108 = v107;
  if (v107 > 0x16)
  {
    v111 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v107 | 7) != 0x17)
      v111 = v107 | 7;
    v112 = v111 + 1;
    v109 = (char *)operator new(v111 + 1);
    v130 = v108;
    v131 = v112 | 0x8000000000000000;
    __p = v109;
    v110 = &v109[v108];
    if (v109 > v106)
      goto LABEL_225;
  }
  else
  {
    HIBYTE(v131) = v107;
    v109 = (char *)&__p;
    v110 = (char *)&__p + v108;
    if (&__p > (void **)__s)
      goto LABEL_225;
  }
  if (v110 > v106)
    goto LABEL_262;
LABEL_225:
  if (v108)
    memmove(v109, v106, v108);
  *v110 = 0;
  if (SHIBYTE(v131) < 0)
  {
    v113 = v130;
    if ((v130 & 0x8000000000000000) != 0)
      goto LABEL_262;
    v114 = __p;
    if (v130)
    {
      if (!__p)
        goto LABEL_262;
    }
  }
  else
  {
    v113 = HIBYTE(v131);
    v114 = &__p;
  }
  if (v113 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v115 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v115 = v113;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v114, v115);
  *((_QWORD *)&v133 + 1) += v115;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  if (SHIBYTE(v131) < 0)
    operator delete(__p);
  if ((_QWORD)v133 + ~*((_QWORD *)&v133 + 1) >= 0xAuLL)
    v116 = 10;
  else
    v116 = v133 + ~*((_QWORD *)&v133 + 1);
  memcpy(&v132[*((_QWORD *)&v133 + 1)], ", c_name: ", v116);
  *((_QWORD *)&v133 + 1) += v116;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  v117 = (_QWORD *)((char *)this + 232);
  if (*((char *)this + 255) < 0)
  {
    v118 = *((_QWORD *)this + 30);
    if ((v118 & 0x8000000000000000) == 0)
    {
      v117 = (_QWORD *)*v117;
      if (!v118 || v117)
        goto LABEL_245;
    }
LABEL_262:
    __break(1u);
LABEL_263:
    abort();
  }
  v118 = *((unsigned __int8 *)this + 255);
LABEL_245:
  if (v118 >= (_QWORD)v133 + ~*((_QWORD *)&v133 + 1))
    v119 = v133 + ~*((_QWORD *)&v133 + 1);
  else
    v119 = v118;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], v117, v119);
  *((_QWORD *)&v133 + 1) += v119;
  v132[*((_QWORD *)&v133 + 1)] = 0;
  __src[0] = 125;
  v120 = v133;
  v121 = *((_QWORD *)&v133 + 1) + 1;
  memcpy(&v132[*((_QWORD *)&v133 + 1)], __src, v133 != *((_QWORD *)&v133 + 1) + 1);
  v122 = *((_QWORD *)&v133 + 1);
  if (v120 != v121)
    v122 = *((_QWORD *)&v133 + 1) + 1;
  *((_QWORD *)&v133 + 1) = v122;
  v132[v122] = 0;
  v123 = v132;
  if (!v132)
    goto LABEL_262;
  result = strlen(v132);
  if (result > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v125 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v126 = &a2[result];
    if (a2 > v123)
      goto LABEL_259;
    goto LABEL_258;
  }
  v127 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v127 = result | 7;
  v128 = v127 + 1;
  result = (unint64_t)operator new(v127 + 1);
  *((_QWORD *)a2 + 1) = v125;
  *((_QWORD *)a2 + 2) = v128 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v126 = (char *)(result + v125);
  if (result <= (unint64_t)v123)
  {
LABEL_258:
    if (v126 <= v123)
      goto LABEL_259;
    goto LABEL_262;
  }
LABEL_259:
  if (v125)
    result = (unint64_t)memmove(a2, v123, v125);
  *v126 = 0;
  return result;
}

std::string *webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria(std::string *a1, std::string *__src, size_t __len, char *a4, size_t a5)
{
  std::string *v9;
  size_t v10;
  size_t v11;
  std::string *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t size;
  std::string *v22;
  std::string *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_38:
    abort();
  v9 = a1;
  if (__len > 0x16)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    a1 = (std::string *)operator new(v10 + 1);
    v9->__r_.__value_.__l.__size_ = __len;
    v9->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v9->__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  }
  else
  {
    *((_BYTE *)&a1->__r_.__value_.__s + 23) = __len;
  }
  v12 = (std::string *)((char *)a1 + __len);
  if (a1 <= __src && v12 > __src)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (__len)
    memmove(a1, __src, __len);
  v12->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9->__r_.__value_.__l.__size_ < 0x11)
      goto LABEL_26;
LABEL_17:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
    if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
    {
      size = v9->__r_.__value_.__l.__size_;
      if (size >= 0x10)
      {
        v22 = (std::string *)v9->__r_.__value_.__r.__words[0];
        v9->__r_.__value_.__l.__size_ = 16;
        goto LABEL_25;
      }
    }
    else
    {
      size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      if (size > 0xF)
      {
        *((_BYTE *)&v9->__r_.__value_.__s + 23) = 16;
        v22 = v9;
LABEL_25:
        v22->__r_.__value_.__s.__data_[16] = 0;
        goto LABEL_26;
      }
    }
    std::string::append(v9, 16 - size, 0);
    goto LABEL_26;
  }
  if (HIBYTE(v9->__r_.__value_.__r.__words[2]) >= 0x11uLL)
    goto LABEL_17;
LABEL_26:
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_38;
  if (a5 <= 0x16)
  {
    v23 = v9 + 1;
    *((_BYTE *)&v9[1].__r_.__value_.__s + 23) = a5;
    v24 = (char *)&v9[1] + a5;
    if (&v9[1] > (std::string *)a4)
      goto LABEL_34;
    goto LABEL_33;
  }
  v25 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a5 | 7) != 0x17)
    v25 = a5 | 7;
  v26 = v25 + 1;
  v23 = (std::string *)operator new(v25 + 1);
  v9[1].__r_.__value_.__l.__size_ = a5;
  v9[1].__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
  v9[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  v24 = (char *)v23 + a5;
  if (v23 <= (std::string *)a4)
  {
LABEL_33:
    if (v24 <= a4)
      goto LABEL_34;
    goto LABEL_37;
  }
LABEL_34:
  if (a5)
    memmove(v23, a4, a5);
  *v24 = 0;
  *(_OWORD *)&v9[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&v9[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&v9[2].__r_.__value_.__l.__data_ = 0u;
  return v9;
}

void webrtc::RtpDemuxerCriteria::ToString(std::string *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v5;
  size_t v6;
  BOOL v7;
  std::string *p_src;
  std::string::size_type size;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string *v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  const std::string::value_type **p_data;
  int v18;
  unsigned __int8 v19;
  size_t v20;
  BOOL v21;
  std::string *p_p_new_stuff;
  std::string *v23;
  _QWORD *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string *v29;
  char *v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  int *data;
  int *v35;
  std::string *v36;
  char *v37;
  std::string::size_type v38;
  std::string *v39;
  int v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string::size_type v47;
  unsigned __int8 *v48;
  unsigned __int8 *i;
  std::string *v50;
  char *v51;
  std::string::size_type v52;
  std::string *v53;
  int v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  _WORD *v63;
  std::string::size_type v64;
  std::string __p_new_stuff;
  std::string __src;
  std::string v67;

  memset(&v67, 0, sizeof(v67));
  if (&v67 <= (std::string *)"{mid: " && (char *)v67.__r_.__value_.__r.__words + 6 > "{mid: ")
    goto LABEL_179;
  strcpy((char *)&v67, "{mid: ");
  *((_BYTE *)&v67.__r_.__value_.__s + 23) = 6;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::__init_copy_ctor_external(&__src, this->__r_.__value_.__l.__data_, size);
      v5 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_15;
    }
LABEL_12:
    *((_BYTE *)&__src.__r_.__value_.__s + 23) = 7;
    if (&__src <= (std::string *)"<empty>" && (char *)__src.__r_.__value_.__r.__words + 7 > "<empty>")
      goto LABEL_179;
    strcpy((char *)&__src, "<empty>");
    v5 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
  if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
    goto LABEL_12;
  __src = *this;
  v5 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v6 = v5;
    v7 = v5 == 0;
    p_src = &__src;
    goto LABEL_18;
  }
LABEL_15:
  v6 = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_179;
  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  v7 = __src.__r_.__value_.__l.__size_ == 0;
  if (__src.__r_.__value_.__l.__size_)
  {
    if (!__src.__r_.__value_.__r.__words[0])
      goto LABEL_179;
  }
LABEL_18:
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = 22;
  else
    v10 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v11 = v67.__r_.__value_.__l.__size_;
  if (v10 - v11 >= v6)
  {
    if (!v7)
    {
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v67;
      else
        v12 = (std::string *)v67.__r_.__value_.__r.__words[0];
      v13 = (char *)v12 + v11;
      if ((std::string *)((char *)v12 + v11) <= p_src && &v13[v6] > (char *)p_src)
        goto LABEL_179;
      memmove(v13, p_src, v6);
      v14 = v11 + v6;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        v67.__r_.__value_.__l.__size_ = v11 + v6;
      else
        *((_BYTE *)&v67.__r_.__value_.__s + 23) = v14 & 0x7F;
      v12->__r_.__value_.__s.__data_[v14] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v67, v10, v11 + v6 - v10, v11, v11, 0, v6, (const std::string::value_type *)p_src);
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = 22;
  else
    v15 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v16 = v67.__r_.__value_.__l.__size_;
  if (v15 - v16 < 8)
  {
    std::string::__grow_by_and_replace(&v67, v15, v16 - v15 + 8, v16, v16, 0, 8uLL, ", rsid: ");
    p_data = (const std::string::value_type **)&this[1].__r_.__value_.__l.__data_;
    v18 = SHIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_44;
LABEL_53:
    v26 = this[1].__r_.__value_.__l.__size_;
    if (v26)
    {
      std::string::__init_copy_ctor_external(&__p_new_stuff, *p_data, v26);
      v19 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
      goto LABEL_59;
    }
LABEL_56:
    *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 7;
    if (&__p_new_stuff <= (std::string *)"<empty>" && (char *)__p_new_stuff.__r_.__value_.__r.__words + 7 > "<empty>")
      goto LABEL_179;
    strcpy((char *)&__p_new_stuff, "<empty>");
    v19 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_59;
  }
  v23 = &v67;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = (std::string *)v67.__r_.__value_.__r.__words[0];
  v24 = (std::string::size_type *)((char *)v23->__r_.__value_.__r.__words + v16);
  if ((char *)v23 + v16 <= ", rsid: " && v24 + 1 > (_QWORD *)", rsid: ")
    goto LABEL_179;
  *v24 = 0x203A64697372202CLL;
  v25 = v16 + 8;
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    v67.__r_.__value_.__l.__size_ = v16 + 8;
    v23->__r_.__value_.__s.__data_[v25] = 0;
    p_data = (const std::string::value_type **)&this[1].__r_.__value_.__l.__data_;
    v18 = SHIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if (v18 < 0)
      goto LABEL_53;
  }
  else
  {
    *((_BYTE *)&v67.__r_.__value_.__s + 23) = v25 & 0x7F;
    v23->__r_.__value_.__s.__data_[v25] = 0;
    p_data = (const std::string::value_type **)&this[1].__r_.__value_.__l.__data_;
    v18 = SHIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if (v18 < 0)
      goto LABEL_53;
  }
LABEL_44:
  if (!v18)
    goto LABEL_56;
  __p_new_stuff = *(std::string *)p_data;
  v19 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_46:
    v20 = v19;
    v21 = v19 == 0;
    p_p_new_stuff = &__p_new_stuff;
    goto LABEL_62;
  }
LABEL_59:
  v20 = __p_new_stuff.__r_.__value_.__l.__size_;
  if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_179;
  p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
  v21 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
  if (__p_new_stuff.__r_.__value_.__l.__size_)
  {
    if (!__p_new_stuff.__r_.__value_.__r.__words[0])
      goto LABEL_179;
  }
LABEL_62:
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v27 = 22;
  else
    v27 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v28 = v67.__r_.__value_.__l.__size_;
  if (v27 - v28 >= v20)
  {
    if (!v21)
    {
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v67;
      else
        v29 = (std::string *)v67.__r_.__value_.__r.__words[0];
      v30 = (char *)v29 + v28;
      if ((std::string *)((char *)v29 + v28) <= p_p_new_stuff && &v30[v20] > (char *)p_p_new_stuff)
        goto LABEL_179;
      memmove(v30, p_p_new_stuff, v20);
      v31 = v28 + v20;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        v67.__r_.__value_.__l.__size_ = v28 + v20;
      else
        *((_BYTE *)&v67.__r_.__value_.__s + 23) = v31 & 0x7F;
      v29->__r_.__value_.__s.__data_[v31] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v67, v27, v28 + v20 - v27, v28, v28, 0, v20, (const std::string::value_type *)p_p_new_stuff);
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = 22;
  else
    v32 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v33 = v67.__r_.__value_.__l.__size_;
  if (v32 - v33 >= 0xA)
  {
    v36 = &v67;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v36 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v37 = (char *)v36 + v33;
    if ((char *)v36 + v33 <= ", ssrcs: [" && v37 + 10 > ", ssrcs: [")
      goto LABEL_179;
    *((_WORD *)v37 + 4) = 23328;
    *(_QWORD *)v37 = *(_QWORD *)", ssrcs: [";
    v38 = v33 + 10;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      v67.__r_.__value_.__l.__size_ = v33 + 10;
      v36->__r_.__value_.__s.__data_[v38] = 0;
      if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
    }
    else
    {
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = v38 & 0x7F;
      v36->__r_.__value_.__s.__data_[v38] = 0;
      if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_101;
    }
LABEL_90:
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_102:
    operator delete(__src.__r_.__value_.__l.__data_);
    data = (int *)this[2].__r_.__value_.__l.__data_;
    v35 = (int *)this[2].__r_.__value_.__l.__size_;
    if (data != v35)
    {
      while (1)
      {
LABEL_106:
        v39 = rtc::StringBuilder::operator<<(&v67, *data);
        v40 = SHIBYTE(v39->__r_.__value_.__r.__words[2]);
        if (v40 >= 0)
          v41 = 22;
        else
          v41 = (v39->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v40 >= 0)
          v42 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
        else
          v42 = v39->__r_.__value_.__l.__size_;
        if (v41 - v42 < 2)
        {
          std::string::__grow_by_and_replace(v39, v41, v42 - v41 + 2, v42, v42, 0, 2uLL, ", ");
        }
        else
        {
          if (v40 >= 0)
            v43 = v39;
          else
            v43 = (std::string *)v39->__r_.__value_.__r.__words[0];
          if ((char *)v43 + v42 <= ", " && &v43->__r_.__value_.__s.__data_[v42 + 2] > ", ")
            goto LABEL_179;
          *(_WORD *)((char *)&v43->__r_.__value_.__l.__data_ + v42) = 8236;
          v45 = v42 + 2;
          if (SHIBYTE(v39->__r_.__value_.__r.__words[2]) < 0)
            v39->__r_.__value_.__l.__size_ = v45;
          else
            *((_BYTE *)&v39->__r_.__value_.__s + 23) = v45 & 0x7F;
          v43->__r_.__value_.__s.__data_[v45] = 0;
        }
        if (++data == v35)
          goto LABEL_124;
      }
    }
    goto LABEL_124;
  }
  std::string::__grow_by_and_replace(&v67, v32, v33 - v32 + 10, v33, v33, 0, 0xAuLL, ", ssrcs: [");
  if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_90;
LABEL_101:
  operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_102;
LABEL_91:
  data = (int *)this[2].__r_.__value_.__l.__data_;
  v35 = (int *)this[2].__r_.__value_.__l.__size_;
  if (data != v35)
    goto LABEL_106;
LABEL_124:
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = 22;
  else
    v46 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v47 = v67.__r_.__value_.__l.__size_;
  if (v46 - v47 >= 0x14)
  {
    v50 = &v67;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v50 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v51 = (char *)v50 + v47;
    if ((char *)v50 + v47 <= "], payload_types = [" && v51 + 20 > "], payload_types = [")
      goto LABEL_179;
    *((_DWORD *)v51 + 4) = 1528839456;
    *(_OWORD *)v51 = *(_OWORD *)"], payload_types = [";
    v52 = v47 + 20;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      v67.__r_.__value_.__l.__size_ = v47 + 20;
      v50->__r_.__value_.__s.__data_[v52] = 0;
      v48 = (unsigned __int8 *)this[3].__r_.__value_.__l.__data_;
      for (i = (unsigned __int8 *)this[3].__r_.__value_.__l.__size_; v48 != i; ++v48)
      {
LABEL_144:
        v53 = rtc::StringBuilder::operator<<(&v67, *v48);
        v54 = SHIBYTE(v53->__r_.__value_.__r.__words[2]);
        if (v54 >= 0)
          v55 = 22;
        else
          v55 = (v53->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v54 >= 0)
          v56 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
        else
          v56 = v53->__r_.__value_.__l.__size_;
        if (v55 - v56 < 2)
        {
          std::string::__grow_by_and_replace(v53, v55, v56 - v55 + 2, v56, v56, 0, 2uLL, ", ");
        }
        else
        {
          if (v54 >= 0)
            v57 = v53;
          else
            v57 = (std::string *)v53->__r_.__value_.__r.__words[0];
          if ((char *)v57 + v56 <= ", " && &v57->__r_.__value_.__s.__data_[v56 + 2] > ", ")
            goto LABEL_179;
          *(_WORD *)((char *)&v57->__r_.__value_.__l.__data_ + v56) = 8236;
          v59 = v56 + 2;
          if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
            v53->__r_.__value_.__l.__size_ = v59;
          else
            *((_BYTE *)&v53->__r_.__value_.__s + 23) = v59 & 0x7F;
          v57->__r_.__value_.__s.__data_[v59] = 0;
        }
      }
    }
    else
    {
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = v52 & 0x7F;
      v50->__r_.__value_.__s.__data_[v52] = 0;
      v48 = (unsigned __int8 *)this[3].__r_.__value_.__l.__data_;
      i = (unsigned __int8 *)this[3].__r_.__value_.__l.__size_;
      if (v48 != i)
        goto LABEL_144;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v67, v46, v47 - v46 + 20, v47, v47, 0, 0x14uLL, "], payload_types = [");
    v48 = (unsigned __int8 *)this[3].__r_.__value_.__l.__data_;
    i = (unsigned __int8 *)this[3].__r_.__value_.__l.__size_;
    if (v48 != i)
      goto LABEL_144;
  }
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = 22;
  else
    v60 = (v67.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
  else
    v61 = v67.__r_.__value_.__l.__size_;
  if (v60 - v61 < 2)
  {
    std::string::__grow_by_and_replace(&v67, v60, v61 - v60 + 2, v61, v61, 0, 2uLL, "]}");
LABEL_178:
    *a2 = v67;
    return;
  }
  v62 = &v67;
  if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v62 = (std::string *)v67.__r_.__value_.__r.__words[0];
  v63 = (_WORD *)((char *)v62 + v61);
  if ((char *)v62 + v61 > "]}" || v63 + 1 <= (_WORD *)"]}")
  {
    *v63 = 32093;
    v64 = v61 + 2;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      v67.__r_.__value_.__l.__size_ = v61 + 2;
    else
      *((_BYTE *)&v67.__r_.__value_.__s + 23) = v64 & 0x7F;
    v62->__r_.__value_.__s.__data_[v64] = 0;
    goto LABEL_178;
  }
LABEL_179:
  __break(1u);
}

void webrtc::RtpDemuxer::DescribePacket(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v5;
  std::string *v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  const char *v21;
  size_t v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unsigned __int8 v25;
  size_t v26;
  BOOL v27;
  std::string *p_src;
  uint64_t v29;
  const char *v30;
  size_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  unsigned __int8 v34;
  size_t v35;
  BOOL v36;
  std::string *v37;
  uint64_t v38;
  const char *v39;
  size_t v40;
  std::string::size_type v41;
  std::string::size_type v42;
  unsigned __int8 v43;
  std::string::size_type v44;
  BOOL v45;
  std::string *p_p;
  std::string *v47;
  char *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  char *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string *v57;
  _DWORD *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  char *v63;
  std::string::size_type v64;
  std::string *v65;
  char *v66;
  std::string::size_type v67;
  std::string *v68;
  char *v69;
  std::string::size_type v70;
  std::string __p;
  std::string v72;
  std::string __src;
  std::string v74;

  memset(&v74, 0, sizeof(v74));
  if (&v74 <= (std::string *)"PT=" && (char *)v74.__r_.__value_.__r.__words + 3 > "PT=")
    goto LABEL_171;
  LODWORD(v74.__r_.__value_.__l.__data_) = 4019280;
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = 3;
  v5 = rtc::StringBuilder::operator<<(&v74, *(unsigned __int8 *)(a1 + 1));
  v6 = v5;
  v7 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
  if (v7 >= 0)
    v8 = 22;
  else
    v8 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v7 >= 0)
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  else
    size = v5->__r_.__value_.__l.__size_;
  if (v8 - size >= 6)
  {
    if (v7 >= 0)
      v10 = v5;
    else
      v10 = (std::string *)v5->__r_.__value_.__r.__words[0];
    v11 = (std::string::size_type)v10 + size;
    if ((char *)v10 + size <= " SSRC=" && (char *)v10->__r_.__value_.__r.__words + size + 6 > " SSRC=")
      goto LABEL_171;
    *(_WORD *)(v11 + 4) = 15683;
    *(_DWORD *)v11 = 1381192480;
    v13 = size + 6;
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      v5->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&v5->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v5, v8, size - v8 + 6, size, size, 0, 6uLL, " SSRC=");
  }
  rtc::StringBuilder::operator<<(v6, *(_DWORD *)(a1 + 12));
  memset(&__src, 0, sizeof(__src));
  if (*(_BYTE *)(a1 + 48))
  {
    v14 = *(unsigned __int8 **)(a1 + 56);
    v15 = *(unsigned __int8 **)(a1 + 64);
    if (v14 != v15)
    {
      while (*v14 != *(unsigned __int8 *)(a1 + 48))
      {
        v14 += 4;
        if (v14 == v15)
          goto LABEL_28;
      }
      v20 = *(_QWORD *)(a1 + 88);
      if (v20)
        v20 = *(_QWORD *)(v20 + 16) + *(_QWORD *)(a1 + 96);
      if (v14[1])
      {
        v21 = (const char *)(v20 + *((unsigned __int16 *)v14 + 1));
        if (*v21)
        {
          v22 = strnlen(v21, v14[1]);
          std::string::__assign_external(&__src, v21, v22);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = 22;
          else
            v23 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          else
            v24 = v74.__r_.__value_.__l.__size_;
          if (v23 - v24 >= 5)
          {
            v47 = &v74;
            if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v47 = (std::string *)v74.__r_.__value_.__r.__words[0];
            v48 = (char *)v47 + v24;
            if ((char *)v47 + v24 <= " MID=" && v48 + 5 > " MID=")
              goto LABEL_171;
            v48[4] = 61;
            *(_DWORD *)v48 = 1145654560;
            v49 = v24 + 5;
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            {
              v74.__r_.__value_.__l.__size_ = v24 + 5;
              v47->__r_.__value_.__s.__data_[v49] = 0;
              v25 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_57;
            }
            else
            {
              *((_BYTE *)&v74.__r_.__value_.__s + 23) = v49 & 0x7F;
              v47->__r_.__value_.__s.__data_[v49] = 0;
              v25 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_57;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&v74, v23, v24 - v23 + 5, v24, v24, 0, 5uLL, " MID=");
            v25 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              v26 = v25;
              v27 = v25 == 0;
              p_src = &__src;
LABEL_93:
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50 = 22;
              else
                v50 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v51 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
              else
                v51 = v74.__r_.__value_.__l.__size_;
              if (v50 - v51 >= v26)
              {
                if (!v27)
                {
                  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v62 = &v74;
                  else
                    v62 = (std::string *)v74.__r_.__value_.__r.__words[0];
                  v63 = (char *)v62 + v51;
                  if ((std::string *)((char *)v62 + v51) <= p_src && &v63[v26] > (char *)p_src)
                    goto LABEL_171;
                  memmove(v63, p_src, v26);
                  v64 = v51 + v26;
                  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                    v74.__r_.__value_.__l.__size_ = v51 + v26;
                  else
                    *((_BYTE *)&v74.__r_.__value_.__s + 23) = v64 & 0x7F;
                  v62->__r_.__value_.__s.__data_[v64] = 0;
                }
              }
              else
              {
                std::string::__grow_by_and_replace(&v74, v50, v51 + v26 - v50, v51, v51, 0, v26, (const std::string::value_type *)p_src);
              }
              goto LABEL_28;
            }
          }
          v26 = __src.__r_.__value_.__l.__size_;
          if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_171;
          p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
          v27 = __src.__r_.__value_.__l.__size_ == 0;
          if (__src.__r_.__value_.__l.__size_)
          {
            if (!__src.__r_.__value_.__r.__words[0])
              goto LABEL_171;
          }
          goto LABEL_93;
        }
      }
    }
  }
LABEL_28:
  memset(&v72, 0, sizeof(v72));
  if (!*(_BYTE *)(a1 + 46))
    goto LABEL_32;
  v16 = *(unsigned __int8 **)(a1 + 56);
  v17 = *(unsigned __int8 **)(a1 + 64);
  if (v16 == v17)
    goto LABEL_32;
  while (*v16 != *(unsigned __int8 *)(a1 + 46))
  {
    v16 += 4;
    if (v16 == v17)
      goto LABEL_32;
  }
  v29 = *(_QWORD *)(a1 + 88);
  if (v29)
    v29 = *(_QWORD *)(v29 + 16) + *(_QWORD *)(a1 + 96);
  if (!v16[1])
    goto LABEL_32;
  v30 = (const char *)(v29 + *((unsigned __int16 *)v16 + 1));
  if (!*v30)
    goto LABEL_32;
  v31 = strnlen(v30, v16[1]);
  std::string::__assign_external(&v72, v30, v31);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = 22;
  else
    v32 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v33 = v74.__r_.__value_.__l.__size_;
  if (v32 - v33 >= 6)
  {
    v52 = &v74;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v52 = (std::string *)v74.__r_.__value_.__r.__words[0];
    v53 = (char *)v52 + v33;
    if ((char *)v52 + v33 <= " RSID=" && v53 + 6 > " RSID=")
      goto LABEL_171;
    *((_WORD *)v53 + 2) = 15684;
    *(_DWORD *)v53 = 1230197280;
    v54 = v33 + 6;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      v74.__r_.__value_.__l.__size_ = v33 + 6;
      v52->__r_.__value_.__s.__data_[v54] = 0;
      v34 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_70;
    }
    else
    {
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = v54 & 0x7F;
      v52->__r_.__value_.__s.__data_[v54] = 0;
      v34 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_70;
    }
LABEL_107:
    v35 = v72.__r_.__value_.__l.__size_;
    if ((v72.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_171;
    v37 = (std::string *)v72.__r_.__value_.__r.__words[0];
    v36 = v72.__r_.__value_.__l.__size_ == 0;
    if (v72.__r_.__value_.__l.__size_)
    {
      if (!v72.__r_.__value_.__r.__words[0])
        goto LABEL_171;
    }
    goto LABEL_110;
  }
  std::string::__grow_by_and_replace(&v74, v32, v33 - v32 + 6, v33, v33, 0, 6uLL, " RSID=");
  v34 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_107;
LABEL_70:
  v35 = v34;
  v36 = v34 == 0;
  v37 = &v72;
LABEL_110:
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = 22;
  else
    v55 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v56 = v74.__r_.__value_.__l.__size_;
  if (v55 - v56 >= v35)
  {
    if (!v36)
    {
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = &v74;
      else
        v65 = (std::string *)v74.__r_.__value_.__r.__words[0];
      v66 = (char *)v65 + v56;
      if ((std::string *)((char *)v65 + v56) <= v37 && &v66[v35] > (char *)v37)
        goto LABEL_171;
      memmove(v66, v37, v35);
      v67 = v56 + v35;
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        v74.__r_.__value_.__l.__size_ = v56 + v35;
      else
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = v67 & 0x7F;
      v65->__r_.__value_.__s.__data_[v67] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v74, v55, v56 + v35 - v55, v56, v56, 0, v35, (const std::string::value_type *)v37);
  }
LABEL_32:
  memset(&__p, 0, sizeof(__p));
  if (!*(_BYTE *)(a1 + 47))
    goto LABEL_36;
  v18 = *(unsigned __int8 **)(a1 + 56);
  v19 = *(unsigned __int8 **)(a1 + 64);
  if (v18 == v19)
    goto LABEL_36;
  while (*v18 != *(unsigned __int8 *)(a1 + 47))
  {
    v18 += 4;
    if (v18 == v19)
      goto LABEL_36;
  }
  v38 = *(_QWORD *)(a1 + 88);
  if (v38)
    v38 = *(_QWORD *)(v38 + 16) + *(_QWORD *)(a1 + 96);
  if (!v18[1])
    goto LABEL_36;
  v39 = (const char *)(v38 + *((unsigned __int16 *)v18 + 1));
  if (!*v39)
    goto LABEL_36;
  v40 = strnlen(v39, v18[1]);
  std::string::__assign_external(&__p, v39, v40);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = 22;
  else
    v41 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v42 = v74.__r_.__value_.__l.__size_;
  if (v41 - v42 >= 7)
  {
    v57 = &v74;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
    v58 = (_DWORD *)((char *)v57 + v42);
    if ((char *)v57 + v42 <= " RRSID=" && (char *)v58 + 7 > " RRSID=")
      goto LABEL_171;
    *(_DWORD *)((char *)v58 + 3) = 1027885395;
    *v58 = 1397903904;
    v59 = v42 + 7;
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    {
      v74.__r_.__value_.__l.__size_ = v42 + 7;
      v57->__r_.__value_.__s.__data_[v59] = 0;
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_83;
    }
    else
    {
      *((_BYTE *)&v74.__r_.__value_.__s + 23) = v59 & 0x7F;
      v57->__r_.__value_.__s.__data_[v59] = 0;
      v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_83;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v74, v41, v42 - v41 + 7, v42, v42, 0, 7uLL, " RRSID=");
    v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_83:
      v44 = v43;
      v45 = v43 == 0;
      p_p = &__p;
      goto LABEL_127;
    }
  }
  v44 = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_171;
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v45 = __p.__r_.__value_.__l.__size_ == 0;
  if (__p.__r_.__value_.__l.__size_)
  {
    if (!__p.__r_.__value_.__r.__words[0])
      goto LABEL_171;
  }
LABEL_127:
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = 22;
  else
    v60 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v61 = v74.__r_.__value_.__l.__size_;
  if (v60 - v61 < v44)
  {
    std::string::__grow_by_and_replace(&v74, v60, v61 + v44 - v60, v61, v61, 0, v44, (const std::string::value_type *)p_p);
    goto LABEL_36;
  }
  if (!v45)
  {
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v74;
    else
      v68 = (std::string *)v74.__r_.__value_.__r.__words[0];
    v69 = (char *)v68 + v61;
    if ((std::string *)((char *)v68 + v61) > p_p || &v69[v44] <= (char *)p_p)
    {
      memmove(v69, p_p, v44);
      v70 = v61 + v44;
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        v74.__r_.__value_.__l.__size_ = v61 + v44;
      else
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = v70 & 0x7F;
      v68->__r_.__value_.__s.__data_[v70] = 0;
      goto LABEL_36;
    }
LABEL_171:
    __break(1u);
    return;
  }
LABEL_36:
  *a2 = v74;
  memset(&v74, 0, sizeof(v74));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v72.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_39:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_44:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
LABEL_43:
  operator delete(__src.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
}

void webrtc::RtpDemuxer::~RtpDemuxer(webrtc::RtpDemuxer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    v3 = *((_QWORD *)this + 22);
    v4 = (void *)*((_QWORD *)this + 21);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = *((_QWORD *)this + 19);
    v7 = (void *)*((_QWORD *)this + 18);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v5;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 15);
  if (v8)
  {
    v9 = *((_QWORD *)this + 16);
    v10 = (void *)*((_QWORD *)this + 15);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v8;
    operator delete(v10);
  }
  v11 = *((_QWORD *)this + 12);
  if (v11)
  {
    v12 = *((_QWORD *)this + 13);
    v13 = (void *)*((_QWORD *)this + 12);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 9) < 0)
          operator delete(*(void **)(v12 - 32));
        v12 -= 32;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v11;
    operator delete(v13);
  }
  v14 = *((_QWORD *)this + 9);
  if (v14)
  {
    v15 = *((_QWORD *)this + 10);
    v16 = (void *)*((_QWORD *)this + 9);
    if (v15 == v14)
    {
LABEL_43:
      *((_QWORD *)this + 10) = v14;
      operator delete(v16);
      goto LABEL_44;
    }
    while (1)
    {
      if (*(char *)(v15 - 9) < 0)
      {
        operator delete(*(void **)(v15 - 32));
        if (*(char *)(v15 - 33) < 0)
LABEL_41:
          operator delete(*(void **)(v15 - 56));
      }
      else if (*(char *)(v15 - 33) < 0)
      {
        goto LABEL_41;
      }
      v15 -= 56;
      if (v15 == v14)
      {
        v16 = (void *)*((_QWORD *)this + 9);
        goto LABEL_43;
      }
    }
  }
LABEL_44:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 7));
  v17 = (void *)*((_QWORD *)this + 3);
  if (v17)
  {
    *((_QWORD *)this + 4) = v17;
    operator delete(v17);
  }
  v18 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v19 = *((_QWORD *)this + 1);
    v20 = *(void **)this;
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 9) < 0)
          operator delete(*(void **)(v19 - 32));
        v19 -= 32;
      }
      while (v19 != v18);
      v20 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v18;
    operator delete(v20);
  }
}

uint64_t webrtc::RtpDemuxer::AddSink(uint64_t a1, unsigned __int8 *__s2, std::string::size_type a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  size_t v33;
  unsigned __int8 *v34;
  size_t v35;
  char *v36;
  size_t v37;
  int v38;
  unsigned int *v39;
  unsigned int *v40;
  char *v41;
  char *v42;
  unsigned int v43;
  _DWORD *v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int *v47;
  _DWORD *v48;
  unsigned int v49;
  _DWORD *v50;
  char *v51;
  int v52;
  std::string::size_type v53;
  uint64_t v54;
  const std::string::value_type **v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  __int128 v94;
  unint64_t v95;
  void **v96;
  __int128 *v97;
  __int128 v98;
  void **v99;
  std::string::size_type v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  std::string::size_type v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  __int128 v117;
  std::string::size_type v118;
  uint64_t v119;
  __int128 *v120;
  __int128 *v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 *v125;
  __int128 v126;
  __int128 v127;
  __int128 *v128;
  unsigned int v129;
  char *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  unsigned int v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t ***v139;
  unsigned int v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t **v143;
  uint64_t **v144;
  uint64_t **v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  const void **v150;
  const void **v151;
  const void **v152;
  const void **i;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  std::string::size_type v159;
  std::string::size_type v160;
  char v161;
  std::string::size_type v162;
  uint64_t v163;
  char *v164;
  char *v165;
  std::string v166;
  std::string v167;
  std::string __s2a;
  std::string __p;
  std::string::size_type v170;
  _QWORD v171[2];
  _QWORD v172[4];

  v172[2] = *MEMORY[0x24BDAC8D0];
  v6 = __s2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)__s2 + 1);
  if (!v6)
    goto LABEL_55;
  v8 = __s2[47];
  v9 = v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)__s2 + 4);
  if (!v8)
  {
    v12 = webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::equal_range<std::string>(a1 + 120, (const void **)__s2);
    if (v12 != v13 && *(_QWORD *)(a1 + 128) != v12)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_85;
      webrtc::RtpDemuxerCriteria::ToString((std::string *)__s2, &__s2a);
      rtc::webrtc_logging_impl::Log("\r\n\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
      if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_84;
    }
    goto LABEL_55;
  }
  if ((v7 & 0x80000000) == 0)
  {
    __s2a = *(std::string *)__s2;
    if ((v9 & 0x80) == 0)
      goto LABEL_9;
LABEL_17:
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)__s2 + 3), *((_QWORD *)__s2 + 4));
    v10 = *(_QWORD **)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 80) - (_QWORD)v10;
    if (!v11)
      goto LABEL_27;
    goto LABEL_18;
  }
  std::string::__init_copy_ctor_external(&__s2a, *(const std::string::value_type **)__s2, *((_QWORD *)__s2 + 1));
  if ((__s2[47] & 0x80) != 0)
    goto LABEL_17;
LABEL_9:
  __p = *(std::string *)(__s2 + 1);
  v10 = *(_QWORD **)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 80) - (_QWORD)v10;
  if (!v11)
    goto LABEL_27;
LABEL_18:
  v21 = 0x6DB6DB6DB6DB6DB7 * (v11 >> 3);
  do
  {
    v22 = (uint64_t)&v10[7 * (v21 >> 1)];
    v23 = (char)std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>(v22, &__s2a);
    if (v23 >= 0)
      v21 >>= 1;
    else
      v21 += ~(v21 >> 1);
    if (v23 < 0)
      v10 = (_QWORD *)(v22 + 56);
  }
  while (v21);
  if (*(_QWORD **)(a1 + 80) == v10
    || (std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>((uint64_t)&__s2a, v10) & 0x80) == 0)
  {
LABEL_27:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_34;
  }
  v10 = *(_QWORD **)(a1 + 80);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_28:
    if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    if (v10 != *(_QWORD **)(a1 + 80))
      goto LABEL_30;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(__s2a.__r_.__value_.__l.__data_);
  if (v10 != *(_QWORD **)(a1 + 80))
  {
LABEL_30:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_85;
    goto LABEL_31;
  }
LABEL_36:
  v31 = std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::KeyValueCompare>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), __s2);
  if (*(_QWORD *)(a1 + 8) != v31)
  {
    v32 = (char *)v31;
    if ((char)__s2[23] < 0)
    {
      v33 = *((_QWORD *)__s2 + 1);
      if ((v33 & 0x8000000000000000) != 0)
        goto LABEL_218;
      v34 = *(unsigned __int8 **)__s2;
      if (v33)
      {
        if (!v34)
          goto LABEL_218;
      }
    }
    else
    {
      v33 = __s2[23];
      v34 = __s2;
    }
    if (v32[23] < 0)
    {
      v35 = *((_QWORD *)v32 + 1);
      if ((v35 & 0x8000000000000000) != 0)
        goto LABEL_218;
      v36 = *(char **)v32;
      if (v35)
      {
        if (!v36)
          goto LABEL_218;
      }
    }
    else
    {
      v35 = v32[23];
      v36 = v32;
    }
    if (v35 >= v33)
      v37 = v33;
    else
      v37 = v35;
    v38 = memcmp(v34, v36, v37);
    if (v38)
    {
      if ((v38 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if (v33 >= v35)
    {
LABEL_52:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_85;
LABEL_31:
      webrtc::RtpDemuxerCriteria::ToString((std::string *)__s2, &__s2a);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
      if (SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) < 0)
LABEL_84:
        operator delete(__s2a.__r_.__value_.__l.__data_);
LABEL_85:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        webrtc::RtpDemuxerCriteria::ToString((std::string *)__s2, &__s2a);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v65, v66, v67, v68, v69, v70, v71, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
        if (SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s2a.__r_.__value_.__l.__data_);
      }
      return 0;
    }
  }
LABEL_55:
  v39 = (unsigned int *)*((_QWORD *)__s2 + 6);
  v40 = (unsigned int *)*((_QWORD *)__s2 + 7);
  if (v39 != v40)
  {
    v41 = *(char **)(a1 + 24);
    v42 = *(char **)(a1 + 32);
    if (v42 != v41)
    {
      while (1)
      {
        v43 = *v39;
        v44 = *(_DWORD **)(a1 + 24);
        v45 = (v42 - v41) >> 4;
        do
        {
          v46 = v45 >> 1;
          v47 = &v44[4 * (v45 >> 1)];
          v49 = *v47;
          v48 = v47 + 4;
          v45 += ~(v45 >> 1);
          if (v49 < v43)
            v44 = v48;
          else
            v45 = v46;
        }
        while (v45);
        v50 = *(_DWORD **)(a1 + 32);
        if (v42 != (char *)v44)
          v50 = &v44[4 * (v43 >= *v44)];
        v51 = v50 == v44 ? *(char **)(a1 + 32) : (char *)v44;
        if (v42 != v51)
          break;
        if (++v39 == v40)
          goto LABEL_69;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        goto LABEL_85;
      webrtc::RtpDemuxerCriteria::ToString((std::string *)__s2, &__s2a);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
      if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_85;
      goto LABEL_84;
    }
  }
LABEL_69:
  v52 = (char)__s2[23];
  v53 = *((_QWORD *)__s2 + 1);
  if (v52 >= 0)
    v54 = __s2[23];
  else
    v54 = *((_QWORD *)__s2 + 1);
  v55 = (const std::string::value_type **)(__s2 + 24);
  v56 = __s2[47];
  v57 = __s2[47];
  if (!v54)
  {
    if ((char)v56 < 0)
    {
      v100 = *((_QWORD *)__s2 + 4);
      if (!v100)
        goto LABEL_172;
      std::string::__init_copy_ctor_external(&__s2a, *v55, v100);
    }
    else
    {
      if (!(_BYTE)v56)
        goto LABEL_172;
      *(_OWORD *)&__s2a.__r_.__value_.__l.__data_ = *(_OWORD *)v55;
      __s2a.__r_.__value_.__r.__words[2] = *((_QWORD *)__s2 + 5);
    }
    __p.__r_.__value_.__r.__words[0] = a3;
    webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::emplace_key_args<std::string,std::pair<std::string,webrtc::RtpPacketSinkInterface *>>((uint64_t *)(a1 + 96), &__s2a, (__int128 *)&__s2a);
    if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_172;
    goto LABEL_134;
  }
  if ((v56 & 0x80u) != 0)
    v56 = *((_QWORD *)__s2 + 4);
  if (!v56)
  {
    if (v52 < 0)
      std::string::__init_copy_ctor_external(&__s2a, *(const std::string::value_type **)__s2, v53);
    else
      __s2a = *(std::string *)__s2;
    __p.__r_.__value_.__r.__words[0] = a3;
    webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::emplace_key_args<std::string,std::pair<std::string,webrtc::RtpPacketSinkInterface *>>((uint64_t *)a1, &__s2a, (__int128 *)&__s2a);
    if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_172;
LABEL_134:
    operator delete(__s2a.__r_.__value_.__l.__data_);
    v107 = (unsigned int *)*((_QWORD *)__s2 + 6);
    v108 = (unsigned int *)*((_QWORD *)__s2 + 7);
    if (v107 != v108)
      goto LABEL_176;
    goto LABEL_191;
  }
  if (v52 < 0)
  {
    std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)__s2, v53);
    if ((__s2[47] & 0x80) == 0)
      goto LABEL_78;
  }
  else
  {
    v166 = *(std::string *)__s2;
    if ((v57 & 0x80) == 0)
    {
LABEL_78:
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = *(_OWORD *)v55;
      v167.__r_.__value_.__r.__words[2] = *((_QWORD *)__s2 + 5);
      goto LABEL_93;
    }
  }
  std::string::__init_copy_ctor_external(&v167, *((const std::string::value_type **)__s2 + 3), *((_QWORD *)__s2 + 4));
LABEL_93:
  __s2a = v166;
  memset(&v166, 0, sizeof(v166));
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v167.__r_.__value_.__l.__data_;
  v73 = v167.__r_.__value_.__r.__words[2];
  memset(&v167, 0, sizeof(v167));
  __p.__r_.__value_.__r.__words[2] = v73;
  v170 = a3;
  v75 = *(_QWORD *)(a1 + 72);
  v74 = *(char **)(a1 + 80);
  if (v74 == (char *)v75)
  {
    v79 = *(char **)(a1 + 72);
  }
  else
  {
    v76 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v74[-v75] >> 3);
    do
    {
      v77 = v75 + 56 * (v76 >> 1);
      v78 = (char)std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>(v77, &__s2a);
      if (v78 >= 0)
        v76 >>= 1;
      else
        v76 += ~(v76 >> 1);
      if (v78 < 0)
        v75 = v77 + 56;
    }
    while (v76);
    v74 = (char *)v75;
    v79 = *(char **)(a1 + 72);
    v75 = *(_QWORD *)(a1 + 80);
    if (v74 != (char *)v75)
    {
      if ((std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>((uint64_t)&__s2a, v74) & 0x80) == 0)
        goto LABEL_168;
      v79 = *(char **)(a1 + 72);
      v75 = *(_QWORD *)(a1 + 80);
    }
  }
  v80 = v74 - v79;
  v81 = (v74 - v79) / 56;
  v82 = (__int128 *)&v79[56 * v81];
  v83 = *(_QWORD *)(a1 + 88);
  if (v75 < v83)
  {
    if (v82 != (__int128 *)v75)
    {
      v163 = (v74 - v79) / 56;
      v164 = v79;
      v172[0] = __s2a.__r_.__value_.__l.__size_;
      v159 = __s2a.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v172 + 7) = *(std::string::size_type *)((char *)&__s2a.__r_.__value_.__r.__words[1] + 7);
      v158 = HIBYTE(__s2a.__r_.__value_.__r.__words[2]);
      memset(&__s2a, 0, sizeof(__s2a));
      v171[0] = __p.__r_.__value_.__l.__size_;
      v162 = __p.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v171 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
      v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      v84 = (uint64_t)v82 + 56;
      v85 = v75 - 56;
      v86 = v75;
      v160 = v170;
      if (v75 >= 0x38)
      {
        v86 = v75;
        do
        {
          v87 = *(_OWORD *)v85;
          *(_QWORD *)(v86 + 16) = *(_QWORD *)(v85 + 16);
          *(_OWORD *)v86 = v87;
          *(_QWORD *)(v85 + 8) = 0;
          *(_QWORD *)(v85 + 16) = 0;
          *(_QWORD *)v85 = 0;
          v88 = *(_OWORD *)(v85 + 24);
          *(_QWORD *)(v86 + 40) = *(_QWORD *)(v85 + 40);
          *(_OWORD *)(v86 + 24) = v88;
          *(_QWORD *)(v85 + 32) = 0;
          *(_QWORD *)(v85 + 40) = 0;
          *(_QWORD *)(v85 + 24) = 0;
          *(_QWORD *)(v86 + 48) = *(_QWORD *)(v85 + 48);
          v86 += 56;
          v85 += 56;
        }
        while (v85 < v75);
      }
      *(_QWORD *)(a1 + 80) = v86;
      if (v75 != v84)
      {
        v89 = 0;
        v90 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v75 - v84) >> 3);
        v91 = &v79[56 * v163 + 56 * v90];
        v92 = -56 * v90;
        do
        {
          v95 = v75 + v89;
          v96 = (void **)(v75 + v89 - 56);
          if (*(char *)(v75 + v89 - 33) < 0)
            operator delete(*v96);
          v97 = (__int128 *)&v91[v89 - 56];
          v98 = *v97;
          *(_QWORD *)(v75 + v89 - 40) = *(_QWORD *)&v91[v89 - 40];
          *(_OWORD *)v96 = v98;
          v91[v89 - 33] = 0;
          *(_BYTE *)v97 = 0;
          v99 = (void **)(v95 - 32);
          if (*(char *)(v95 - 9) < 0)
            operator delete(*v99);
          v93 = &v91[v89];
          v94 = *(_OWORD *)&v91[v89 - 32];
          *(_QWORD *)(v95 - 16) = *(_QWORD *)&v91[v89 - 16];
          *(_OWORD *)v99 = v94;
          *(v93 - 9) = 0;
          *(v93 - 32) = 0;
          *(_QWORD *)(v75 + v89 - 8) = *(_QWORD *)&v91[v89 - 8];
          v89 -= 56;
        }
        while (v92 != v89);
      }
      if (*((char *)v82 + 23) < 0)
        operator delete(*(void **)v82);
      *(_QWORD *)v82 = v159;
      v109 = v172[0];
      *(_QWORD *)((char *)v82 + 15) = *(_QWORD *)((char *)v172 + 7);
      *((_QWORD *)v82 + 1) = v109;
      *((_BYTE *)v82 + 23) = v158;
      if (*((char *)v82 + 47) < 0)
        operator delete(*((void **)v82 + 3));
      *((_QWORD *)v82 + 3) = v162;
      v110 = v171[0];
      *(_QWORD *)((char *)v82 + 39) = *(_QWORD *)((char *)v171 + 7);
      *((_QWORD *)v82 + 4) = v110;
      *((_BYTE *)v82 + 47) = v161;
      *(_QWORD *)&v164[56 * v163 + 48] = v160;
      goto LABEL_168;
    }
    if (v79)
    {
      v111 = *(_OWORD *)&__s2a.__r_.__value_.__l.__data_;
      *(_QWORD *)(v75 + 16) = *((_QWORD *)&__s2a.__r_.__value_.__l + 2);
      *(_OWORD *)v75 = v111;
      memset(&__s2a, 0, sizeof(__s2a));
      v112 = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v75 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v75 + 40) = v112;
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)&v79[56 * v81 + 48] = v170;
      *(_QWORD *)(a1 + 80) = v75 + 56;
      goto LABEL_168;
    }
    goto LABEL_218;
  }
  v101 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v75 - (_QWORD)v79) >> 3) + 1;
  if (v101 > 0x492492492492492)
    goto LABEL_219;
  v102 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v83 - (_QWORD)v79) >> 3);
  if (2 * v102 > v101)
    v101 = 2 * v102;
  if (v102 >= 0x249249249249249)
    v103 = 0x492492492492492;
  else
    v103 = v101;
  v165 = v79;
  if (v103)
  {
    if (v103 > 0x492492492492492)
      goto LABEL_220;
    v104 = (char *)operator new(56 * v103);
    v105 = v81;
    v106 = (uint64_t)&v104[56 * v81];
    if (v105 != v103)
      goto LABEL_148;
  }
  else
  {
    v104 = 0;
    v105 = (v74 - v79) / 56;
    v106 = 56 * v81;
    if (v105)
      goto LABEL_148;
  }
  if (v80 >= 1)
  {
    v113 = v105 < -1;
    v114 = v105;
    v115 = v105 + 2;
    if (!v113)
      v115 = v114 + 1;
    v106 -= 56 * (v115 >> 1);
LABEL_148:
    if (v106)
    {
      v116 = &v104[56 * v103];
      goto LABEL_150;
    }
LABEL_218:
    __break(1u);
LABEL_219:
    abort();
  }
  v154 = 2 * v105;
  if (v165 == v74)
    v154 = 1;
  if (v154 > 0x492492492492492)
LABEL_220:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v155 = v154 >> 2;
  v156 = 56 * v154;
  v157 = (char *)operator new(56 * v154);
  v106 = (uint64_t)&v157[56 * v155];
  v116 = &v157[v156];
  if (v104)
    operator delete(v104);
LABEL_150:
  v117 = *(_OWORD *)&__s2a.__r_.__value_.__l.__data_;
  *(_QWORD *)(v106 + 16) = *((_QWORD *)&__s2a.__r_.__value_.__l + 2);
  *(_OWORD *)v106 = v117;
  memset(&__s2a, 0, sizeof(__s2a));
  v118 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v106 + 24) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(v106 + 40) = v118;
  memset(&__p, 0, sizeof(__p));
  *(_QWORD *)(v106 + 48) = v170;
  v119 = v106 + 56;
  v120 = *(__int128 **)(a1 + 72);
  if (v120 == v82)
  {
    v122 = v106;
    v125 = *(__int128 **)(a1 + 80);
    if (v125 == v82)
      goto LABEL_158;
  }
  else
  {
    v121 = v82;
    do
    {
      v122 = v106 - 56;
      v123 = *(__int128 *)((char *)v121 - 56);
      *(_QWORD *)(v106 - 40) = *((_QWORD *)v121 - 5);
      *(_OWORD *)(v106 - 56) = v123;
      *((_QWORD *)v121 - 6) = 0;
      *((_QWORD *)v121 - 5) = 0;
      *((_QWORD *)v121 - 7) = 0;
      v124 = *(v121 - 2);
      *(_QWORD *)(v106 - 16) = *((_QWORD *)v121 - 2);
      *(_OWORD *)(v106 - 32) = v124;
      *((_QWORD *)v121 - 3) = 0;
      *((_QWORD *)v121 - 2) = 0;
      *((_QWORD *)v121 - 4) = 0;
      *(_QWORD *)(v106 - 8) = *((_QWORD *)v121 - 1);
      v121 = (__int128 *)((char *)v121 - 56);
      v106 -= 56;
    }
    while (v121 != v120);
    v125 = *(__int128 **)(a1 + 80);
    if (v125 == v82)
      goto LABEL_158;
  }
  do
  {
    v126 = *v82;
    *(_QWORD *)(v119 + 16) = *((_QWORD *)v82 + 2);
    *(_OWORD *)v119 = v126;
    *((_QWORD *)v82 + 1) = 0;
    *((_QWORD *)v82 + 2) = 0;
    *(_QWORD *)v82 = 0;
    v127 = *(__int128 *)((char *)v82 + 24);
    *(_QWORD *)(v119 + 40) = *((_QWORD *)v82 + 5);
    *(_OWORD *)(v119 + 24) = v127;
    *((_QWORD *)v82 + 4) = 0;
    *((_QWORD *)v82 + 5) = 0;
    *((_QWORD *)v82 + 3) = 0;
    *(_QWORD *)(v119 + 48) = *((_QWORD *)v82 + 6);
    v119 += 56;
    v82 = (__int128 *)((char *)v82 + 56);
  }
  while (v82 != v125);
  v82 = *(__int128 **)(a1 + 80);
LABEL_158:
  v128 = *(__int128 **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v122;
  *(_QWORD *)(a1 + 80) = v119;
  *(_QWORD *)(a1 + 88) = v116;
  if (v82 == v128)
    goto LABEL_166;
  do
  {
    while (*((char *)v82 - 9) < 0)
    {
      operator delete(*((void **)v82 - 4));
      if (*((char *)v82 - 33) < 0)
        goto LABEL_164;
LABEL_161:
      v82 = (__int128 *)((char *)v82 - 56);
      if (v82 == v128)
        goto LABEL_165;
    }
    if ((*((char *)v82 - 33) & 0x80000000) == 0)
      goto LABEL_161;
LABEL_164:
    operator delete(*((void **)v82 - 7));
    v82 = (__int128 *)((char *)v82 - 56);
  }
  while (v82 != v128);
LABEL_165:
  v82 = v128;
LABEL_166:
  if (v82)
    operator delete(v82);
LABEL_168:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_170;
LABEL_188:
    operator delete(__s2a.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_189;
LABEL_171:
    if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_172;
LABEL_190:
    operator delete(v166.__r_.__value_.__l.__data_);
    v107 = (unsigned int *)*((_QWORD *)__s2 + 6);
    v108 = (unsigned int *)*((_QWORD *)__s2 + 7);
    if (v107 == v108)
      goto LABEL_191;
LABEL_176:
    while (2)
    {
      v129 = *v107;
      LODWORD(__s2a.__r_.__value_.__l.__data_) = *v107;
      __s2a.__r_.__value_.__l.__size_ = a3;
      v130 = *(char **)(a1 + 24);
      v131 = *(char **)(a1 + 32);
      if (v131 == v130)
      {
        v130 = *(char **)(a1 + 32);
      }
      else
      {
        v132 = (v131 - v130) >> 4;
        do
        {
          v133 = v132 >> 1;
          v134 = &v130[16 * (v132 >> 1)];
          v136 = *(_DWORD *)v134;
          v135 = v134 + 16;
          v132 += ~(v132 >> 1);
          if (v136 < v129)
            v130 = v135;
          else
            v132 = v133;
        }
        while (v132);
        if (v130 != v131 && v129 >= *(_DWORD *)v130)
        {
LABEL_175:
          if (++v107 == v108)
            goto LABEL_191;
          continue;
        }
      }
      break;
    }
    std::vector<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>::emplace<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>((char **)(a1 + 24), (uint64_t)v130, (int *)&__s2a);
    goto LABEL_175;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s2a.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_188;
LABEL_170:
  if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_171;
LABEL_189:
  operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_190;
LABEL_172:
  v107 = (unsigned int *)*((_QWORD *)__s2 + 6);
  v108 = (unsigned int *)*((_QWORD *)__s2 + 7);
  if (v107 != v108)
    goto LABEL_176;
LABEL_191:
  v138 = (unsigned __int8 *)*((_QWORD *)__s2 + 9);
  v137 = (unsigned __int8 *)*((_QWORD *)__s2 + 10);
  if (v138 != v137)
  {
    v139 = (uint64_t ***)(a1 + 56);
    do
    {
      v140 = *v138;
      v141 = (uint64_t *)operator new(0x30uLL);
      v142 = v141;
      *((_BYTE *)v141 + 32) = v140;
      v141[5] = a3;
      v143 = *v139;
      v144 = (uint64_t **)(a1 + 56);
      v145 = (uint64_t **)(a1 + 56);
      if (*v139)
      {
        do
        {
          while (1)
          {
            v144 = v143;
            if (v140 >= *((unsigned __int8 *)v143 + 32))
              break;
            v143 = (uint64_t **)*v143;
            v145 = v144;
            if (!*v144)
              goto LABEL_199;
          }
          v143 = (uint64_t **)v143[1];
        }
        while (v143);
        v145 = v144 + 1;
        *v141 = 0;
        v141[1] = 0;
        v141[2] = (uint64_t)v144;
        v144[1] = v141;
        v146 = **(_QWORD **)(a1 + 48);
        if (!v146)
          goto LABEL_193;
      }
      else
      {
LABEL_199:
        *v141 = 0;
        v141[1] = 0;
        v141[2] = (uint64_t)v144;
        *v145 = v141;
        v146 = **(_QWORD **)(a1 + 48);
        if (!v146)
          goto LABEL_193;
      }
      *(_QWORD *)(a1 + 48) = v146;
      v142 = *v145;
LABEL_193:
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v142);
      ++*(_QWORD *)(a1 + 64);
      ++v138;
    }
    while (v138 != v137);
  }
  v148 = *(_QWORD *)(a1 + 120);
  v149 = *(_QWORD *)(a1 + 128);
  v147 = (unint64_t *)(a1 + 120);
  while (v149 != v148)
  {
    if (*(char *)(v149 - 1) < 0)
      operator delete(*(void **)(v149 - 24));
    v149 -= 24;
  }
  *(_QWORD *)(a1 + 128) = v148;
  v150 = *(const void ***)a1;
  v151 = *(const void ***)(a1 + 8);
  if (*(const void ***)a1 != v151)
  {
    do
    {
      webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::emplace_key_args<std::string,std::string const&>((unint64_t *)(a1 + 120), v150, (uint64_t)v150);
      v150 += 4;
    }
    while (v150 != v151);
  }
  v152 = *(const void ***)(a1 + 72);
  for (i = *(const void ***)(a1 + 80); v152 != i; v152 += 7)
    webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::emplace_key_args<std::string,std::string const&>(v147, v152, (uint64_t)v152);
  return 1;
}

uint64_t webrtc::RtpDemuxer::AddSink(uint64_t a1, int a2, std::string::size_type a3)
{
  uint64_t v5;
  void *v7[2];
  void *v8[2];
  __int128 v9;
  void *v10[2];
  void *__p[2];
  __int128 v12;
  int v13;

  v13 = a2;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v9 = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  std::vector<unsigned int>::emplace<unsigned int const&>((char **)v10, 0, &v13);
  v5 = webrtc::RtpDemuxer::AddSink(a1, (unsigned __int8 *)v7, a3);
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
  if (v10[0])
  {
    v10[1] = v10[0];
    operator delete(v10[0]);
  }
  if (SHIBYTE(v9) < 0)
  {
    operator delete(v8[1]);
    if ((SHIBYTE(v8[0]) & 0x80000000) == 0)
      return v5;
  }
  else if ((SHIBYTE(v8[0]) & 0x80000000) == 0)
  {
    return v5;
  }
  operator delete(v7[0]);
  return v5;
}

void webrtc::RtpDemuxer::RemoveSink(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  void **v25;
  unint64_t i;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  const void **j;
  const void **v33;
  uint64_t v34;

  v34 = a2;
  v5 = a1[3];
  v4 = a1[4];
  if (v5 != v4)
  {
    v6 = v5 + 16;
    while (*(_QWORD *)(v6 - 8) != a2)
    {
      v7 = v6 == v4;
      v6 += 16;
      if (v7)
        goto LABEL_14;
    }
    v8 = v6 - 16;
    if (v6 - 16 != v4)
    {
      while (v6 != v4)
      {
        v18 = *(_QWORD *)(v6 + 8);
        if (v18 != a2)
        {
          *(_DWORD *)v8 = *(_DWORD *)v6;
          *(_QWORD *)(v8 + 8) = v18;
          v8 += 16;
        }
        v6 += 16;
      }
    }
    if (v4 < v8)
      goto LABEL_73;
    v9 = (uint64_t)(v4 - v8) >> 4;
    if (v8 != v4)
    {
      if (v8 + 16 * v9 != v4)
      {
        v10 = 16 * v9;
        do
        {
          *(_DWORD *)v8 = *(_DWORD *)(v8 + 16 * v9);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v8 + v10 + 8);
          v8 += 16;
        }
        while (v8 + v10 != v4);
      }
      a1[4] = v8;
    }
  }
LABEL_14:
  v11 = (uint64_t *)a1[6];
  if (v11 != a1 + 7)
  {
    v12 = 0;
    do
    {
      v14 = (uint64_t *)v11[1];
      if (v11[5] == a2)
      {
        v17 = v11;
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v17[2];
            v7 = *v15 == (_QWORD)v17;
            v17 = v15;
          }
          while (!v7);
        }
        if ((uint64_t *)a1[6] == v11)
          a1[6] = v15;
        v13 = (uint64_t *)a1[7];
        --a1[8];
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v13, v11);
        operator delete(v11);
        ++v12;
      }
      else if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v16 = v11;
          v11 = (uint64_t *)v11[2];
        }
        while ((uint64_t *)*v11 != v16);
        v15 = v11;
      }
      v11 = v15;
    }
    while (v15 != a1 + 7);
  }
  v19 = a1[9];
  v20 = a1[10];
  if (v19 != v20)
  {
    v21 = (__int128 *)(v19 + 56);
    while (*((_QWORD *)v21 - 1) != a2)
    {
      v7 = v21 == (__int128 *)v20;
      v21 = (__int128 *)((char *)v21 + 56);
      if (v7)
        goto LABEL_63;
    }
    v22 = (unint64_t)v21 - 56;
    if ((__int128 *)((char *)v21 - 56) != (__int128 *)v20 && v21 != (__int128 *)v20)
    {
      do
      {
        if (*((_QWORD *)v21 + 6) != v34)
        {
          if (*(char *)(v22 + 23) < 0)
            operator delete(*(void **)v22);
          v24 = *v21;
          *(_QWORD *)(v22 + 16) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v22 = v24;
          *((_BYTE *)v21 + 23) = 0;
          *(_BYTE *)v21 = 0;
          v25 = (void **)(v22 + 24);
          if (*(char *)(v22 + 47) < 0)
            operator delete(*v25);
          v23 = *(__int128 *)((char *)v21 + 24);
          *(_QWORD *)(v22 + 40) = *((_QWORD *)v21 + 5);
          *(_OWORD *)v25 = v23;
          *((_BYTE *)v21 + 47) = 0;
          *((_BYTE *)v21 + 24) = 0;
          *(_QWORD *)(v22 + 48) = *((_QWORD *)v21 + 6);
          v22 += 56;
        }
        v21 = (__int128 *)((char *)v21 + 56);
      }
      while (v21 != (__int128 *)v20);
      v20 = a1[10];
    }
    if (v20 >= v22)
    {
      if (v22 != v20)
      {
        for (i = v20; ; i -= 56)
        {
          if (i == v22)
          {
            a1[10] = v22;
            goto LABEL_63;
          }
          if (*(char *)(i - 9) < 0)
          {
            operator delete(*(void **)(i - 32));
            if ((*(char *)(i - 33) & 0x80000000) == 0)
              continue;
          }
          else if ((*(char *)(i - 33) & 0x80000000) == 0)
          {
            continue;
          }
          operator delete(*(void **)(i - 56));
        }
      }
      goto LABEL_63;
    }
LABEL_73:
    __break(1u);
    return;
  }
LABEL_63:
  v28 = a1[15];
  v29 = a1[16];
  v27 = a1 + 15;
  while (v29 != v28)
  {
    if (*(char *)(v29 - 1) < 0)
      operator delete(*(void **)(v29 - 24));
    v29 -= 24;
  }
  a1[16] = v28;
  v30 = (const void **)*a1;
  v31 = (const void **)a1[1];
  if ((const void **)*a1 != v31)
  {
    do
    {
      webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::emplace_key_args<std::string,std::string const&>(a1 + 15, v30, (uint64_t)v30);
      v30 += 4;
    }
    while (v30 != v31);
  }
  v33 = (const void **)a1[9];
  for (j = (const void **)a1[10]; v33 != j; v33 += 7)
    webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::emplace_key_args<std::string,std::string const&>(v27, v33, (uint64_t)v33);
}

void webrtc::`anonymous namespace'::RemoveFromMapByValue<webrtc::flat_map<std::string,webrtc::RtpPacketSinkInterface *,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>,webrtc::RtpPacketSinkInterface const*>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t i;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[1];
  if (*a1 != v2)
  {
    for (i = *a1 + 32; *(_QWORD *)(i - 8) != *a2; i += 32)
    {
      if (i == v2)
        return;
    }
    v7 = i - 32;
    if (i - 32 != v2 && i != v2)
    {
      do
      {
        if (*(_QWORD *)(i + 24) != *a2)
        {
          if (*(char *)(v7 + 23) < 0)
            operator delete(*(void **)v7);
          v8 = *(_OWORD *)i;
          *(_QWORD *)(v7 + 16) = *(_QWORD *)(i + 16);
          *(_OWORD *)v7 = v8;
          *(_BYTE *)(i + 23) = 0;
          *(_BYTE *)i = 0;
          *(_QWORD *)(v7 + 24) = *(_QWORD *)(i + 24);
          v7 += 32;
        }
        i += 32;
      }
      while (i != v2);
      v2 = a1[1];
    }
    if (v2 < v7)
    {
      __break(1u);
    }
    else
    {
      v9 = (uint64_t)(v2 - v7) >> 5;
      if (v7 != v2)
      {
        if (v7 + 32 * v9 != v2)
        {
          v10 = 32 * v9;
          do
          {
            if (*(char *)(v7 + 23) < 0)
              operator delete(*(void **)v7);
            v11 = (_BYTE *)(v7 + v10);
            v12 = *(_QWORD *)(v7 + v10 + 16);
            v13 = *(_QWORD *)(v7 + v10 + 24);
            *(_OWORD *)v7 = *(_OWORD *)(v7 + 32 * v9);
            *(_QWORD *)(v7 + 16) = v12;
            *(_QWORD *)(v7 + 24) = v13;
            v11[23] = 0;
            *v11 = 0;
            v7 += 32;
          }
          while (v7 + v10 != v2);
          v2 = a1[1];
        }
        while (v2 != v7)
        {
          if (*(char *)(v2 - 9) < 0)
            operator delete(*(void **)(v2 - 32));
          v2 -= 32;
        }
        a1[1] = v7;
      }
    }
  }
}

uint64_t webrtc::RtpDemuxer::ResolveSink(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  const char *v7;
  size_t v8;
  int v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  size_t v16;
  const char *v17;
  uint64_t v18;
  size_t v19;
  int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unsigned int v39;
  std::string *p_s2;
  uint64_t *v41;
  char *v42;
  char *v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  unsigned int *v49;
  char *v50;
  unsigned int v51;
  char *v52;
  std::string *v53;
  int v54;
  size_t v55;
  std::string *v56;
  std::string *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int *v60;
  char *v61;
  unsigned int v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  size_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  __int128 v73;
  std::string *v74;
  size_t size;
  size_t v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  uint64_t v80;
  std::string *v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  size_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unsigned int *v101;
  char *v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  BOOL v112;
  uint64_t *v113;
  uint64_t v114;
  unsigned int v115;
  BOOL v116;
  uint64_t *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  unsigned int v121;
  std::string v122;
  std::string __s2;
  void *v124[2];
  unint64_t v125;
  void *v126[2];
  unint64_t v127;
  void *__p[2];
  unint64_t v129;
  void *v130[2];
  unint64_t v131;

  memset(&__s2, 0, sizeof(__s2));
  memset(&v122, 0, sizeof(v122));
  if (!*(_BYTE *)(a1 + 192))
    goto LABEL_13;
  if (!*(_BYTE *)(a2 + 48))
    goto LABEL_13;
  v4 = *(unsigned __int8 **)(a2 + 56);
  v5 = *(unsigned __int8 **)(a2 + 64);
  if (v4 == v5)
    goto LABEL_13;
  while (*v4 != *(unsigned __int8 *)(a2 + 48))
  {
    v4 += 4;
    if (v4 == v5)
      goto LABEL_13;
  }
  v6 = *(_QWORD *)(a2 + 88);
  if (v6)
    v6 = *(_QWORD *)(v6 + 16) + *(_QWORD *)(a2 + 96);
  if (v4[1] && (v7 = (const char *)(v6 + *((unsigned __int16 *)v4 + 1)), *v7))
  {
    v8 = strnlen(v7, v4[1]);
    std::string::__assign_external(&__s2, v7, v8);
    v9 = 1;
    v10 = *(unsigned __int8 *)(a2 + 47);
    if (!*(_BYTE *)(a2 + 47))
      goto LABEL_17;
  }
  else
  {
LABEL_13:
    v9 = 0;
    v10 = *(unsigned __int8 *)(a2 + 47);
    if (!*(_BYTE *)(a2 + 47))
      goto LABEL_17;
  }
  v11 = *(unsigned __int8 **)(a2 + 56);
  v12 = *(unsigned __int8 **)(a2 + 64);
  if (v11 != v12)
  {
    while (*v11 != v10)
    {
      v11 += 4;
      if (v11 == v12)
        goto LABEL_17;
    }
    v15 = *(_QWORD *)(a2 + 88);
    if (v15)
      v15 = *(_QWORD *)(v15 + 16) + *(_QWORD *)(a2 + 96);
    v16 = v11[1];
    if (v11[1])
    {
      v17 = (const char *)(v15 + *((unsigned __int16 *)v11 + 1));
      if (*v17)
      {
LABEL_31:
        v19 = strnlen(v17, v16);
        std::string::__assign_external(&v122, v17, v19);
        v20 = 1;
        v21 = *(_DWORD *)(a2 + 12);
        v121 = v21;
        if (!v9)
          goto LABEL_32;
LABEL_41:
        v30 = webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::equal_range<std::string>(a1 + 120, (const void **)&__s2.__r_.__value_.__l.__data_);
        if (v30 == v31)
          v32 = *(_QWORD *)(a1 + 128);
        else
          v32 = v30;
        if (v32 == *(_QWORD *)(a1 + 128))
          goto LABEL_222;
        v34 = *(char **)(a1 + 144);
        v33 = *(char **)(a1 + 152);
        if (v33 == v34)
        {
          v34 = *(char **)(a1 + 152);
        }
        else
        {
          v35 = (v33 - v34) >> 5;
          do
          {
            v36 = v35 >> 1;
            v37 = &v34[32 * (v35 >> 1)];
            v39 = *(_DWORD *)v37;
            v38 = v37 + 32;
            v35 += ~(v35 >> 1);
            if (v39 < v21)
              v34 = v38;
            else
              v35 = v36;
          }
          while (v35);
          if (v34 != v33 && v21 >= *(_DWORD *)v34)
            goto LABEL_84;
        }
        __p[0] = 0;
        __p[1] = 0;
        v129 = 0;
        v34 = std::vector<std::pair<unsigned int,std::string>>::emplace<unsigned int const&,std::string>((uint64_t *)(a1 + 144), v34, &v121, (__int128 *)__p);
        if (SHIBYTE(v129) < 0)
        {
          operator delete(__p[0]);
          v57 = (std::string *)(v34 + 8);
          p_s2 = &__s2;
          if (v34 + 8 == (char *)&__s2)
          {
LABEL_85:
            v43 = *(char **)(a1 + 168);
            v42 = *(char **)(a1 + 176);
            v41 = (uint64_t *)(a1 + 168);
            v45 = v42 - v43;
            v44 = v42 == v43;
            if (v20)
              goto LABEL_86;
            goto LABEL_61;
          }
LABEL_122:
          if (v34[31] < 0)
          {
            p_s2 = &__s2;
            if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v74 = &__s2;
            else
              v74 = (std::string *)__s2.__r_.__value_.__r.__words[0];
            if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
            else
              size = __s2.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>(v57, (const std::string::value_type *)v74, size);
            v43 = *(char **)(a1 + 168);
            v42 = *(char **)(a1 + 176);
            v41 = (uint64_t *)(a1 + 168);
            v45 = v42 - v43;
            v44 = v42 == v43;
            if (v20)
              goto LABEL_86;
          }
          else if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v57, __s2.__r_.__value_.__l.__data_, __s2.__r_.__value_.__l.__size_);
            p_s2 = &__s2;
            v43 = *(char **)(a1 + 168);
            v42 = *(char **)(a1 + 176);
            v41 = (uint64_t *)(a1 + 168);
            v45 = v42 - v43;
            v44 = v42 == v43;
            if (v20)
              goto LABEL_86;
          }
          else
          {
            v73 = *(_OWORD *)&__s2.__r_.__value_.__l.__data_;
            v57->__r_.__value_.__r.__words[2] = __s2.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v73;
            p_s2 = &__s2;
            v43 = *(char **)(a1 + 168);
            v42 = *(char **)(a1 + 176);
            v41 = (uint64_t *)(a1 + 168);
            v45 = v42 - v43;
            v44 = v42 == v43;
            if (v20)
              goto LABEL_86;
          }
LABEL_61:
          if (v44)
          {
            v47 = v42;
            v52 = v42;
          }
          else
          {
            v46 = v45 >> 5;
            v47 = v43;
            do
            {
              v48 = v46 >> 1;
              v49 = (unsigned int *)&v47[32 * (v46 >> 1)];
              v51 = *v49;
              v50 = (char *)(v49 + 8);
              v46 += ~(v46 >> 1);
              if (v51 < v121)
                v47 = v50;
              else
                v46 = v48;
            }
            while (v46);
            v52 = v42;
            if (v42 != v47)
              v52 = &v47[32 * (v121 >= *(_DWORD *)v47)];
          }
          if (v52 == v47)
            v47 = v42;
          if (v47 == v42)
          {
            if (!p_s2)
              goto LABEL_190;
            v53 = 0;
            v54 = SHIBYTE(p_s2->__r_.__value_.__r.__words[2]);
            if ((v54 & 0x80000000) == 0)
              goto LABEL_112;
            goto LABEL_77;
          }
          v53 = (std::string *)&v43[32 * ((v47 - v43) >> 5) + 8];
          if (!p_s2)
            goto LABEL_180;
LABEL_111:
          v54 = SHIBYTE(p_s2->__r_.__value_.__r.__words[2]);
          if ((v54 & 0x80000000) == 0)
          {
LABEL_112:
            v55 = v54;
            v56 = p_s2;
            goto LABEL_113;
          }
LABEL_77:
          v55 = p_s2->__r_.__value_.__l.__size_;
          if ((v55 & 0x8000000000000000) != 0)
            goto LABEL_253;
          v56 = (std::string *)p_s2->__r_.__value_.__r.__words[0];
          if (v55)
          {
            if (!v56)
              goto LABEL_253;
          }
LABEL_113:
          v67 = v121;
          v68 = webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::equal_range<std::string_view>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v56, v55);
          if (v68 == v69)
            v70 = *(_QWORD *)(a1 + 8);
          else
            v70 = v68;
          if (v70 != *(_QWORD *)(a1 + 8))
          {
            v71 = *(_QWORD *)(*(_QWORD *)a1 + 32 * ((v70 - *(_QWORD *)a1) >> 5) + 24);
            webrtc::RtpDemuxer::AddSsrcSinkBinding(a1, v67, v71);
            if (v71)
            {
LABEL_223:
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_251;
              goto LABEL_224;
            }
          }
          if (!v53)
            goto LABEL_222;
          if (SHIBYTE(p_s2->__r_.__value_.__r.__words[2]) < 0)
          {
            v72 = p_s2->__r_.__value_.__l.__size_;
            if ((v72 & 0x8000000000000000) != 0)
              goto LABEL_253;
            p_s2 = (std::string *)p_s2->__r_.__value_.__r.__words[0];
            if (v72)
            {
              if (!p_s2)
                goto LABEL_253;
            }
          }
          else
          {
            v72 = HIBYTE(p_s2->__r_.__value_.__r.__words[2]);
          }
          if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
          {
            v76 = v53->__r_.__value_.__l.__size_;
            if ((v76 & 0x8000000000000000) != 0)
              goto LABEL_253;
            v53 = (std::string *)v53->__r_.__value_.__r.__words[0];
            if (v76)
            {
              if (!v53)
                goto LABEL_253;
            }
          }
          else
          {
            v76 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
          }
          if (v72 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_254;
          if (v72 > 0x16)
          {
            v79 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v72 | 7) != 0x17)
              v79 = v72 | 7;
            v80 = v79 + 1;
            v77 = (std::string *)operator new(v79 + 1);
            v126[1] = (void *)v72;
            v127 = v80 | 0x8000000000000000;
            v126[0] = v77;
            v78 = (std::string *)((char *)v77 + v72);
            if (v77 > p_s2)
              goto LABEL_150;
          }
          else
          {
            HIBYTE(v127) = v72;
            v77 = (std::string *)v126;
            v78 = (std::string *)((char *)v126 + v72);
            if (v126 > (void **)p_s2)
            {
LABEL_150:
              if (v72)
                memmove(v77, p_s2, v72);
              v78->__r_.__value_.__s.__data_[0] = 0;
              if (v76 > 0x7FFFFFFFFFFFFFF7)
LABEL_254:
                abort();
              if (v76 > 0x16)
              {
                v83 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v76 | 7) != 0x17)
                  v83 = v76 | 7;
                v84 = v83 + 1;
                v81 = (std::string *)operator new(v83 + 1);
                v124[1] = (void *)v76;
                v125 = v84 | 0x8000000000000000;
                v124[0] = v81;
                v82 = (std::string *)((char *)v81 + v76);
                if (v81 > v53)
                {
LABEL_160:
                  if (v76)
                    memmove(v81, v53, v76);
                  v82->__r_.__value_.__s.__data_[0] = 0;
                  *(_OWORD *)__p = *(_OWORD *)v126;
                  v129 = v127;
                  v126[0] = 0;
                  v126[1] = 0;
                  v127 = 0;
                  *(_OWORD *)v130 = *(_OWORD *)v124;
                  v131 = v125;
                  v124[0] = 0;
                  v124[1] = 0;
                  v125 = 0;
                  v86 = *(_QWORD **)(a1 + 72);
                  v85 = *(_QWORD **)(a1 + 80);
                  if (v85 != v86)
                  {
                    v87 = 0x6DB6DB6DB6DB6DB7 * (v85 - v86);
                    do
                    {
                      v88 = (uint64_t)&v86[7 * (v87 >> 1)];
                      v89 = (char)std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>(v88, __p);
                      if (v89 >= 0)
                        v87 >>= 1;
                      else
                        v87 += ~(v87 >> 1);
                      if (v89 < 0)
                        v86 = (_QWORD *)(v88 + 56);
                    }
                    while (v87);
                    v85 = v86;
                    v86 = *(_QWORD **)(a1 + 80);
                  }
                  if (v86 != v85)
                  {
                    if ((std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>((uint64_t)__p, v85) & 0x80) == 0)
                    {
                      v90 = *(_QWORD *)(a1 + 72);
                      if ((SHIBYTE(v131) & 0x80000000) == 0)
                        goto LABEL_174;
                      goto LABEL_217;
                    }
                    v86 = *(_QWORD **)(a1 + 80);
                  }
                  v85 = v86;
                  v90 = *(_QWORD *)(a1 + 72);
                  if ((SHIBYTE(v131) & 0x80000000) == 0)
                  {
LABEL_174:
                    if ((SHIBYTE(v129) & 0x80000000) == 0)
                      goto LABEL_175;
                    goto LABEL_218;
                  }
LABEL_217:
                  operator delete(v130[0]);
                  if ((SHIBYTE(v129) & 0x80000000) == 0)
                  {
LABEL_175:
                    if ((SHIBYTE(v125) & 0x80000000) == 0)
                      goto LABEL_176;
                    goto LABEL_219;
                  }
LABEL_218:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v125) & 0x80000000) == 0)
                  {
LABEL_176:
                    if ((SHIBYTE(v127) & 0x80000000) == 0)
                      goto LABEL_177;
LABEL_220:
                    operator delete(v126[0]);
                    if (v85 != *(_QWORD **)(a1 + 80))
                      goto LABEL_221;
LABEL_222:
                    v71 = 0;
                    goto LABEL_223;
                  }
LABEL_219:
                  operator delete(v124[0]);
                  if ((SHIBYTE(v127) & 0x80000000) == 0)
                  {
LABEL_177:
                    if (v85 == *(_QWORD **)(a1 + 80))
                      goto LABEL_222;
LABEL_221:
                    v71 = *(_QWORD *)(v90 + 8 * (((uint64_t)v85 - v90) >> 3) + 48);
                    webrtc::RtpDemuxer::AddSsrcSinkBinding(a1, v67, v71);
                    if (v71)
                      goto LABEL_223;
                    goto LABEL_222;
                  }
                  goto LABEL_220;
                }
              }
              else
              {
                HIBYTE(v125) = v76;
                v81 = (std::string *)v124;
                v82 = (std::string *)((char *)v124 + v76);
                if (v124 > (void **)v53)
                  goto LABEL_160;
              }
              if (v82 <= v53)
                goto LABEL_160;
LABEL_253:
              __break(1u);
              goto LABEL_254;
            }
          }
          if (v78 > p_s2)
            goto LABEL_253;
          goto LABEL_150;
        }
LABEL_84:
        v57 = (std::string *)(v34 + 8);
        p_s2 = &__s2;
        if (v34 + 8 == (char *)&__s2)
          goto LABEL_85;
        goto LABEL_122;
      }
    }
  }
LABEL_17:
  if (*(_BYTE *)(a2 + 46))
  {
    v13 = *(unsigned __int8 **)(a2 + 56);
    v14 = *(unsigned __int8 **)(a2 + 64);
    if (v13 != v14)
    {
      while (*v13 != *(unsigned __int8 *)(a2 + 46))
      {
        v13 += 4;
        if (v13 == v14)
          goto LABEL_40;
      }
      v18 = *(_QWORD *)(a2 + 88);
      if (v18)
        v18 = *(_QWORD *)(v18 + 16) + *(_QWORD *)(a2 + 96);
      v16 = v13[1];
      if (v13[1])
      {
        v17 = (const char *)(v18 + *((unsigned __int16 *)v13 + 1));
        if (*v17)
          goto LABEL_31;
      }
    }
  }
LABEL_40:
  v20 = 0;
  v21 = *(_DWORD *)(a2 + 12);
  v121 = v21;
  if (v9)
    goto LABEL_41;
LABEL_32:
  v23 = *(unsigned int **)(a1 + 144);
  v22 = *(unsigned int **)(a1 + 152);
  if (v22 == v23)
  {
    v23 = *(unsigned int **)(a1 + 152);
  }
  else
  {
    v24 = ((char *)v22 - (char *)v23) >> 5;
    do
    {
      v25 = v24 >> 1;
      v26 = &v23[8 * (v24 >> 1)];
      v28 = *v26;
      v27 = v26 + 8;
      v24 += ~(v24 >> 1);
      if (v28 < v21)
        v23 = v27;
      else
        v24 = v25;
    }
    while (v24);
    if (v22 != v23)
    {
      v29 = &v23[8 * (v21 >= *v23)];
      goto LABEL_55;
    }
  }
  v29 = *(unsigned int **)(a1 + 152);
LABEL_55:
  if (v29 == v23)
    v23 = *(unsigned int **)(a1 + 152);
  if (v23 == v22)
    p_s2 = 0;
  else
    p_s2 = (std::string *)(v23 + 2);
  v43 = *(char **)(a1 + 168);
  v42 = *(char **)(a1 + 176);
  v41 = (uint64_t *)(a1 + 168);
  v45 = v42 - v43;
  v44 = v42 == v43;
  if (!v20)
    goto LABEL_61;
LABEL_86:
  if (v44)
  {
    v43 = v42;
  }
  else
  {
    v58 = v45 >> 5;
    do
    {
      v59 = v58 >> 1;
      v60 = (unsigned int *)&v43[32 * (v58 >> 1)];
      v62 = *v60;
      v61 = (char *)(v60 + 8);
      v58 += ~(v58 >> 1);
      if (v62 < v121)
        v43 = v61;
      else
        v58 = v59;
    }
    while (v58);
    if (v43 != v42 && v121 >= *(_DWORD *)v43)
      goto LABEL_98;
  }
  __p[0] = 0;
  __p[1] = 0;
  v129 = 0;
  v43 = std::vector<std::pair<unsigned int,std::string>>::emplace<unsigned int const&,std::string>(v41, v43, &v121, (__int128 *)__p);
  if (SHIBYTE(v129) < 0)
    operator delete(__p[0]);
LABEL_98:
  v63 = (std::string *)(v43 + 8);
  v53 = &v122;
  if (v43 + 8 == (char *)&v122)
    goto LABEL_110;
  if (v43[31] < 0)
  {
    v53 = &v122;
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = &v122;
    else
      v65 = (std::string *)v122.__r_.__value_.__r.__words[0];
    if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
    else
      v66 = v122.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v63, (const std::string::value_type *)v65, v66);
LABEL_110:
    if (!p_s2)
      goto LABEL_180;
    goto LABEL_111;
  }
  if ((*((_BYTE *)&v122.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v63, v122.__r_.__value_.__l.__data_, v122.__r_.__value_.__l.__size_);
    v53 = &v122;
    if (!p_s2)
      goto LABEL_180;
    goto LABEL_111;
  }
  v64 = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
  *((_QWORD *)v43 + 3) = *((_QWORD *)&v122.__r_.__value_.__l + 2);
  *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
  v53 = &v122;
  if (p_s2)
    goto LABEL_111;
LABEL_180:
  if (SHIBYTE(v53->__r_.__value_.__r.__words[2]) < 0)
  {
    v91 = v53->__r_.__value_.__l.__size_;
    if ((v91 & 0x8000000000000000) == 0)
    {
      v53 = (std::string *)v53->__r_.__value_.__r.__words[0];
      if (!v91 || v53)
        goto LABEL_185;
    }
    goto LABEL_253;
  }
  v91 = HIBYTE(v53->__r_.__value_.__r.__words[2]);
LABEL_185:
  v92 = v121;
  v93 = webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::equal_range<std::string_view>(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v53, v91);
  if (v93 == v94)
    v95 = *(_QWORD *)(a1 + 104);
  else
    v95 = v93;
  if (v95 != *(_QWORD *)(a1 + 104))
  {
    v71 = *(_QWORD *)(*(_QWORD *)(a1 + 96) + 32 * ((v95 - *(_QWORD *)(a1 + 96)) >> 5) + 24);
    webrtc::RtpDemuxer::AddSsrcSinkBinding(a1, v92, v71);
    if (v71)
      goto LABEL_223;
  }
LABEL_190:
  v96 = *(char **)(a1 + 24);
  v97 = *(char **)(a1 + 32);
  if (v97 == v96)
  {
    v99 = *(char **)(a1 + 32);
  }
  else
  {
    v98 = (v97 - v96) >> 4;
    v99 = *(char **)(a1 + 24);
    do
    {
      v100 = v98 >> 1;
      v101 = (unsigned int *)&v99[16 * (v98 >> 1)];
      v103 = *v101;
      v102 = (char *)(v101 + 4);
      v98 += ~(v98 >> 1);
      if (v103 < v121)
        v99 = v102;
      else
        v98 = v100;
    }
    while (v98);
    if (v97 != v99)
    {
      if (&v99[16 * (v121 >= *(_DWORD *)v99)] == v99)
        v99 = *(char **)(a1 + 32);
      if (v99 != v97)
        goto LABEL_200;
      goto LABEL_206;
    }
  }
  if (v97 == v99)
    v99 = *(char **)(a1 + 32);
  if (v99 == v97)
  {
LABEL_206:
    v104 = (_QWORD *)(a1 + 56);
    v105 = *(uint64_t **)(a1 + 56);
    if (v105)
    {
      v106 = *(unsigned __int8 *)(a2 + 1);
      while (1)
      {
        while (1)
        {
          v107 = *((unsigned __int8 *)v105 + 32);
          if (v107 <= v106)
            break;
          v104 = v105;
          v105 = (uint64_t *)*v105;
          if (!v105)
            goto LABEL_222;
        }
        if (v107 >= v106)
          break;
        v105 = (uint64_t *)v105[1];
        if (!v105)
          goto LABEL_222;
      }
      v109 = *v105;
      v110 = v105;
      if (*v105)
      {
        v110 = v105;
        do
        {
          v111 = *(unsigned __int8 *)(v109 + 32);
          v112 = v111 >= v106;
          if (v111 >= v106)
            v113 = (uint64_t *)v109;
          else
            v113 = (uint64_t *)(v109 + 8);
          if (v112)
            v110 = (_QWORD *)v109;
          v109 = *v113;
        }
        while (*v113);
      }
      v114 = v105[1];
      if (v114)
      {
        do
        {
          v115 = *(unsigned __int8 *)(v114 + 32);
          v116 = v115 > v106;
          if (v115 <= v106)
            v117 = (uint64_t *)(v114 + 8);
          else
            v117 = (uint64_t *)v114;
          if (v116)
            v104 = (_QWORD *)v114;
          v114 = *v117;
        }
        while (*v117);
      }
      if (v110 != v104)
      {
        v118 = (_QWORD *)v110[1];
        if (v118)
        {
          do
          {
            v119 = v118;
            v118 = (_QWORD *)*v118;
          }
          while (v118);
        }
        else
        {
          v120 = v110;
          do
          {
            v119 = (_QWORD *)v120[2];
            v44 = *v119 == (_QWORD)v120;
            v120 = v119;
          }
          while (!v44);
        }
        if (v119 == v104)
        {
          v71 = v110[5];
          webrtc::RtpDemuxer::AddSsrcSinkBinding(a1, v121, v71);
          if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_251;
          goto LABEL_224;
        }
      }
    }
    goto LABEL_222;
  }
LABEL_200:
  v71 = *(_QWORD *)&v96[16 * ((v99 - v96) >> 4) + 8];
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_251:
    operator delete(v122.__r_.__value_.__l.__data_);
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_252;
    return v71;
  }
LABEL_224:
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
LABEL_252:
    operator delete(__s2.__r_.__value_.__l.__data_);
  return v71;
}

void webrtc::RtpDemuxer::AddSsrcSinkBinding(uint64_t a1, unsigned int a2, uint64_t a3)
{
  char **v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;

  v5 = *(unsigned int **)(a1 + 24);
  v6 = *(unsigned int **)(a1 + 32);
  v4 = (char **)(a1 + 24);
  if ((unint64_t)((char *)v6 - (char *)v5) < 0x3E71)
  {
    v14 = (unint64_t)((char *)v6 - (char *)v5) >> 4;
    v24 = a2;
    v25 = a3;
    if (v6 != v5)
    {
      v15 = (char *)v5;
      do
      {
        v16 = v14 >> 1;
        v17 = (unsigned int *)&v15[16 * (v14 >> 1)];
        v19 = *v17;
        v18 = (char *)(v17 + 4);
        v14 += ~(v14 >> 1);
        if (v19 < a2)
          v15 = v18;
        else
          v14 = v16;
      }
      while (v14);
      v14 = (v15 - (char *)v5) >> 4;
    }
    v20 = &v5[4 * v14];
    if (v20 == v6 || *v20 > a2)
    {
      std::vector<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>::emplace<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>(v4, (uint64_t)v20, (int *)&v24);
    }
    else
    {
      v21 = &v5[4 * v14];
      v23 = *((_QWORD *)v21 + 1);
      v22 = v21 + 2;
      if (v23 != a3)
        *v22 = a3;
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_demuxer.cc");
  }
}

void webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::emplace_key_args<std::string,std::pair<std::string,webrtc::RtpPacketSinkInterface *>>(uint64_t *a1, _QWORD *__s2, __int128 *a3)
{
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  __int128 v14;
  size_t v15;
  const void *v16;
  size_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 *v30;
  __int128 v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  char *v50;
  char v51;
  uint64_t v52;
  _BYTE v53[15];

  v4 = __s2;
  v6 = std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::KeyValueCompare>(*a1, a1[1], __s2);
  v7 = v6;
  v8 = *a1;
  v9 = a1[1];
  v10 = v6 - *a1;
  v11 = v10 >> 5;
  if (v6 == v9)
  {
    v13 = a1[2];
    if (v6 < v13)
    {
      if (v8)
      {
        v14 = *a3;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v6 = v14;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(v8 + 32 * v11 + 24) = *((_QWORD *)a3 + 3);
        a1[1] = v6 + 32;
        return;
      }
      goto LABEL_74;
    }
  }
  else
  {
    if (*((char *)v4 + 23) < 0)
    {
      v12 = v4[1];
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_74;
      v4 = (_QWORD *)*v4;
      if (v12)
      {
        if (!v4)
          goto LABEL_74;
      }
    }
    else
    {
      v12 = *((unsigned __int8 *)v4 + 23);
    }
    if (*(char *)(v6 + 23) < 0)
    {
      v15 = *(_QWORD *)(v6 + 8);
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_74;
      v16 = *(const void **)v6;
      if (v15 && v16 == 0)
        goto LABEL_74;
    }
    else
    {
      v15 = *(unsigned __int8 *)(v6 + 23);
      v16 = (const void *)v6;
    }
    if (v15 >= v12)
      v18 = v12;
    else
      v18 = v15;
    v19 = memcmp(v4, v16, v18);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return;
    }
    else if (v12 >= v15)
    {
      return;
    }
    v13 = a1[2];
    if (v9 < v13)
    {
      v52 = *(_QWORD *)a3;
      *(_QWORD *)v53 = *((_QWORD *)a3 + 1);
      *(_QWORD *)&v53[7] = *(_QWORD *)((char *)a3 + 15);
      v51 = *((_BYTE *)a3 + 23);
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
      v20 = *((_QWORD *)a3 + 3);
      v21 = a1[1];
      v22 = v7 + 32;
      v23 = v21 - 32;
      v24 = v21;
      if (v21 >= 0x20)
      {
        do
        {
          v25 = *(_OWORD *)v23;
          *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
          *(_OWORD *)v24 = v25;
          *(_QWORD *)(v23 + 8) = 0;
          *(_QWORD *)(v23 + 16) = 0;
          *(_QWORD *)v23 = 0;
          *(_QWORD *)(v24 + 24) = *(_QWORD *)(v23 + 24);
          v24 += 32;
          v23 += 32;
        }
        while (v23 < v21);
      }
      a1[1] = v24;
      if (v21 != v22)
      {
        v26 = 0;
        v27 = 32 * ((uint64_t)(v21 - v22) >> 5);
        v28 = v8 + v27 + 32 * v11;
        v29 = -v27;
        do
        {
          v32 = (void **)(v21 + v26 - 32);
          if (*(char *)(v21 + v26 - 9) < 0)
            operator delete(*v32);
          v30 = (__int128 *)(v28 + v26 - 32);
          v31 = *v30;
          *(_QWORD *)(v21 + v26 - 16) = *(_QWORD *)(v28 + v26 - 16);
          *(_OWORD *)v32 = v31;
          *(_BYTE *)(v28 + v26 - 9) = 0;
          *(_BYTE *)v30 = 0;
          *(_QWORD *)(v21 + v26 - 8) = *(_QWORD *)(v28 + v26 - 8);
          v26 -= 32;
        }
        while (v29 != v26);
      }
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      *(_QWORD *)v7 = v52;
      *(_QWORD *)(v7 + 8) = *(_QWORD *)v53;
      *(_QWORD *)(v7 + 15) = *(_QWORD *)&v53[7];
      *(_BYTE *)(v7 + 23) = v51;
      *(_QWORD *)(v8 + 32 * v11 + 24) = v20;
      return;
    }
  }
  v33 = ((uint64_t)(v9 - v8) >> 5) + 1;
  if (v33 >> 59)
    abort();
  v34 = v13 - v8;
  if (v34 >> 4 > v33)
    v33 = v34 >> 4;
  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFE0)
    v35 = 0x7FFFFFFFFFFFFFFLL;
  else
    v35 = v33;
  if (v35)
  {
    if (v35 >> 59)
      goto LABEL_76;
    v36 = (char *)operator new(32 * v35);
    v37 = (uint64_t)&v36[32 * v11];
    if (v11 != v35)
      goto LABEL_50;
  }
  else
  {
    v36 = 0;
    v37 = 32 * v11;
    if (v11)
      goto LABEL_50;
  }
  if (v10 >= 1)
  {
    v38 = v11 + 2;
    if (v11 >= -1)
      v38 = v11 + 1;
    v37 -= 32 * (v38 >> 1);
LABEL_50:
    if (v37)
    {
      v39 = &v36[32 * v35];
      goto LABEL_52;
    }
LABEL_74:
    __break(1u);
  }
  if (v7 == v8)
    v49 = 1;
  else
    v49 = v10 >> 4;
  if (v49 >> 59)
LABEL_76:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v50 = (char *)operator new(32 * v49);
  v37 = (uint64_t)&v50[32 * (v49 >> 2)];
  v39 = &v50[32 * v49];
  if (v36)
    operator delete(v36);
LABEL_52:
  v40 = *a3;
  *(_QWORD *)(v37 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)v37 = v40;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(v37 + 24) = *((_QWORD *)a3 + 3);
  v41 = v37 + 32;
  v42 = *a1;
  if (*a1 == v7)
  {
    v44 = v37;
    v46 = a1[1];
    if (v46 == v7)
      goto LABEL_56;
  }
  else
  {
    v43 = v7;
    do
    {
      v44 = v37 - 32;
      v45 = *(_OWORD *)(v43 - 32);
      *(_QWORD *)(v37 - 16) = *(_QWORD *)(v43 - 16);
      *(_OWORD *)(v37 - 32) = v45;
      *(_QWORD *)(v43 - 24) = 0;
      *(_QWORD *)(v43 - 16) = 0;
      *(_QWORD *)(v43 - 32) = 0;
      *(_QWORD *)(v37 - 8) = *(_QWORD *)(v43 - 8);
      v43 -= 32;
      v37 -= 32;
    }
    while (v43 != v42);
    v46 = a1[1];
    if (v46 == v7)
    {
LABEL_56:
      v47 = *a1;
      *a1 = v44;
      a1[1] = v41;
      a1[2] = (uint64_t)v39;
      if (v7 == v47)
        goto LABEL_57;
      goto LABEL_64;
    }
  }
  do
  {
    v48 = *(_OWORD *)v7;
    *(_QWORD *)(v41 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)v41 = v48;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v41 + 24) = *(_QWORD *)(v7 + 24);
    v41 += 32;
    v7 += 32;
  }
  while (v7 != v46);
  v47 = *a1;
  v7 = a1[1];
  *a1 = v44;
  a1[1] = v41;
  a1[2] = (uint64_t)v39;
  if (v7 == v47)
  {
LABEL_57:
    if (!v7)
      return;
LABEL_58:
    operator delete((void *)v7);
    return;
  }
  do
  {
LABEL_64:
    if (*(char *)(v7 - 9) < 0)
      operator delete(*(void **)(v7 - 32));
    v7 -= 32;
  }
  while (v7 != v47);
  v7 = v47;
  if (v47)
    goto LABEL_58;
}

uint64_t std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::__wrap_iter<std::pair<std::string,webrtc::RtpPacketSinkInterface *> const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::KeyValueCompare>(uint64_t a1, uint64_t a2, _QWORD *__s2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  const void *v8;
  unint64_t v9;
  BOOL v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v15;
  int v16;
  size_t v17;
  const void *v18;
  size_t v20;
  int v21;

  v4 = a1;
  if (a2 == a1)
    return v4;
  v6 = (unint64_t)__s2;
  v7 = (a2 - a1) >> 5;
  v8 = (const void *)*__s2;
  v9 = __s2[1];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 0;
  v11 = !v10;
  if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
  {
    v8 = (const void *)*((unsigned __int8 *)__s2 + 23);
    while (1)
    {
      v9 = v7 >> 1;
      v3 = v4 + 32 * (v7 >> 1);
      if (*(char *)(v3 + 23) < 0)
      {
        v12 = *(_QWORD *)(v3 + 8);
        if ((v12 & 0x8000000000000000) != 0)
          goto LABEL_30;
        v13 = *(const void **)v3;
        if (v12 && v13 == 0)
          goto LABEL_30;
      }
      else
      {
        v12 = *(unsigned __int8 *)(v3 + 23);
        v13 = (const void *)(v4 + 32 * (v7 >> 1));
      }
      if ((unint64_t)v8 >= v12)
        v15 = v12;
      else
        v15 = (size_t)v8;
      v16 = memcmp(v13, (const void *)v6, v15);
      if (v16)
      {
        if ((v16 & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if (v12 >= (unint64_t)v8)
      {
        goto LABEL_12;
      }
      v4 = v3 + 32;
      v9 = v7 + ~v9;
LABEL_12:
      v7 = v9;
      if (!v9)
        return v4;
    }
  }
  if ((v9 & 0x8000000000000000) == 0 && v11)
    goto LABEL_33;
LABEL_30:
  __break(1u);
LABEL_31:
  v4 = v3 + 32;
  v6 = v7 + ~v6;
  while (1)
  {
    v7 = v6;
    if (!v6)
      return v4;
LABEL_33:
    v6 = v7 >> 1;
    v3 = v4 + 32 * (v7 >> 1);
    if (*(char *)(v3 + 23) < 0)
    {
      v17 = *(_QWORD *)(v3 + 8);
      if ((v17 & 0x8000000000000000) != 0)
        goto LABEL_30;
      v18 = *(const void **)v3;
      if (v17 && v18 == 0)
        goto LABEL_30;
    }
    else
    {
      v17 = *(unsigned __int8 *)(v3 + 23);
      v18 = (const void *)(v4 + 32 * (v7 >> 1));
    }
    if (v9 >= v17)
      v20 = v17;
    else
      v20 = v9;
    v21 = memcmp(v18, v8, v20);
    if (v21)
    {
      if (v21 < 0)
        goto LABEL_31;
    }
    else if (v17 < v9)
    {
      goto LABEL_31;
    }
  }
}

uint64_t std::operator<=>[abi:sn180100]<std::string,std::string,std::string,std::string>(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  size_t v4;
  size_t v6;
  size_t v7;
  int v8;
  BOOL v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  size_t v13;

  v2 = a2;
  v3 = result;
  if (*(char *)(result + 23) < 0)
  {
    v4 = *(_QWORD *)(result + 8);
    if ((v4 & 0x8000000000000000) != 0)
      goto LABEL_38;
    result = *(_QWORD *)result;
    if (v4 && result == 0)
      goto LABEL_38;
  }
  else
  {
    v4 = *(unsigned __int8 *)(result + 23);
  }
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_38;
    a2 = (_QWORD *)*a2;
    if (v6)
    {
      if (!a2)
        goto LABEL_38;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
  }
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = v6;
  v8 = memcmp((const void *)result, a2, v7);
  if (v8)
  {
LABEL_17:
    if ((v8 & 0x80000000) == 0)
      return 1;
    return 255;
  }
  v9 = v4 >= v6;
  if (v4 != v6)
  {
LABEL_36:
    if (v9)
      return 1;
    return 255;
  }
  result = v3 + 24;
  if (*(char *)(v3 + 47) < 0)
  {
    v10 = *(_QWORD *)(v3 + 32);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_38;
    result = *(_QWORD *)result;
    if (v10)
    {
      if (!result)
        goto LABEL_38;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(v3 + 47);
  }
  v11 = v2 + 3;
  if ((*((char *)v2 + 47) & 0x80000000) == 0)
  {
    v12 = *((unsigned __int8 *)v2 + 47);
    goto LABEL_30;
  }
  v12 = v2[4];
  if ((v12 & 0x8000000000000000) == 0)
  {
    v11 = (_QWORD *)*v11;
    if (!v12 || v11)
    {
LABEL_30:
      if (v12 >= v10)
        v13 = v10;
      else
        v13 = v12;
      v8 = memcmp((const void *)result, v11, v13);
      if (v8)
        goto LABEL_17;
      v9 = v10 >= v12;
      if (v10 == v12)
        return 0;
      goto LABEL_36;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void std::vector<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>::emplace<std::pair<unsigned int,webrtc::RtpPacketSinkInterface *>>(char **a1, uint64_t a2, int *a3)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  __int128 *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *i;
  __int128 v35;
  char *v36;

  v5 = *a1;
  v6 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 4;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  v10 = (unint64_t)a1[2];
  if (v6 < v10)
  {
    if (v9 != (char *)v6)
    {
      v11 = *a3;
      v12 = *((_QWORD *)a3 + 1);
      v13 = v9 + 16;
      v14 = (__int128 *)(v6 - 16);
      v15 = a1[1];
      if (v6 >= 0x10)
      {
        do
        {
          v16 = *v14++;
          *(_OWORD *)v15 = v16;
          v15 += 16;
        }
        while ((unint64_t)v14 < v6);
      }
      a1[1] = v15;
      if ((_DWORD *)v6 != v13)
      {
        v17 = (uint64_t)(v6 - (_QWORD)v13) >> 4;
        v18 = (_QWORD *)(v6 - 8);
        v19 = 16 * v17;
        do
        {
          *((_DWORD *)v18 - 2) = *(_DWORD *)&v9[v19 - 16];
          *v18 = *(_QWORD *)&v9[v19 - 8];
          v18 -= 2;
          v19 -= 16;
        }
        while (v19);
      }
      *(_DWORD *)v9 = v11;
      *(_QWORD *)&v5[16 * v8 + 8] = v12;
      return;
    }
    if (v5)
    {
      *(_OWORD *)v9 = *(_OWORD *)a3;
      a1[1] = v9 + 16;
      return;
    }
    goto LABEL_43;
  }
  v20 = ((uint64_t)(v6 - (_QWORD)v5) >> 4) + 1;
  if (v20 >> 60)
    goto LABEL_44;
  v21 = v10 - (_QWORD)v5;
  v22 = v21 >> 3;
  if (v21 >> 3 <= v20)
    v22 = v20;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
    v23 = 0xFFFFFFFFFFFFFFFLL;
  else
    v23 = v22;
  if (v23)
  {
    if (v23 >> 60)
      goto LABEL_45;
    v24 = (char *)operator new(16 * v23);
    v25 = &v24[16 * v8];
    v26 = &v24[16 * v23];
    if (v8 != v23)
      goto LABEL_32;
  }
  else
  {
    v24 = 0;
    v25 = (char *)(16 * v8);
    v26 = 0;
    if (v8)
      goto LABEL_32;
  }
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF0) >= 1)
  {
    v27 = v8 + 2;
    if (v8 >= -1)
      v27 = v8 + 1;
    v25 -= 16 * (v27 >> 1);
    goto LABEL_32;
  }
  if ((unint64_t)v7 < 0x10)
    v28 = 1;
  else
    v28 = (v7 >> 3) & 0xFFFFFFFFFFFFFFFELL;
  if (v28 >> 60)
LABEL_45:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v29 = (char *)operator new(16 * v28);
  v25 = &v29[16 * (v28 >> 2)];
  v26 = &v29[16 * v28];
  if (v24)
    operator delete(v24);
LABEL_32:
  if (!v25)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    abort();
  }
  *(_OWORD *)v25 = *(_OWORD *)a3;
  v30 = v25 + 16;
  v31 = *a1;
  if (*a1 == v9)
  {
    v33 = v25;
    i = a1[1];
    if (i == v9)
      goto LABEL_38;
    goto LABEL_37;
  }
  v32 = v9;
  do
  {
    v33 = v25 - 16;
    *((_OWORD *)v25 - 1) = *((_OWORD *)v32 - 1);
    v32 -= 16;
    v25 -= 16;
  }
  while (v32 != v31);
  for (i = a1[1]; v9 != i; v30 += 16)
  {
LABEL_37:
    v35 = *(_OWORD *)v9;
    v9 += 16;
    *(_OWORD *)v30 = v35;
  }
LABEL_38:
  v36 = *a1;
  *a1 = v33;
  a1[1] = v30;
  a1[2] = v26;
  if (v36)
    operator delete(v36);
}

unint64_t webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::equal_range<std::string>(uint64_t a1, const void **__s2)
{
  const void **v2;
  unint64_t result;
  unint64_t v5;
  size_t v6;
  size_t v7;
  const void *v8;
  size_t v10;

  v2 = __s2;
  result = std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::KeyValueCompare>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), __s2);
  v5 = result;
  if (*(_QWORD *)(a1 + 8) == result)
    return v5;
  if (*((char *)v2 + 23) < 0)
  {
    v6 = (size_t)v2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_19;
    v2 = (const void **)*v2;
    if (v6)
    {
      if (!v2)
        goto LABEL_19;
    }
  }
  else
  {
    v6 = *((unsigned __int8 *)v2 + 23);
  }
  if ((*(char *)(result + 23) & 0x80000000) == 0)
  {
    v7 = *(unsigned __int8 *)(result + 23);
    v8 = (const void *)result;
LABEL_14:
    if (v7 >= v6)
      v10 = v6;
    else
      v10 = v7;
    memcmp(v2, v8, v10);
    return v5;
  }
  v7 = *(_QWORD *)(result + 8);
  if ((v7 & 0x8000000000000000) == 0)
  {
    v8 = *(const void **)result;
    if (!v7 || v8 != 0)
      goto LABEL_14;
  }
LABEL_19:
  __break(1u);
  return result;
}

unint64_t std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::KeyValueCompare>(unint64_t result, uint64_t a2, const void **__s2)
{
  uint64_t v3;
  unint64_t v5;
  const void *v6;
  size_t v7;
  BOOL v8;
  int v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  size_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  size_t v20;

  v3 = result;
  if (a2 == result)
    return v3;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - result) >> 3);
  v6 = *__s2;
  v7 = (size_t)__s2[1];
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 0;
  v9 = !v8;
  if ((*((_BYTE *)__s2 + 23) & 0x80) == 0)
  {
    v10 = *((unsigned __int8 *)__s2 + 23);
    while (1)
    {
      v11 = v5 >> 1;
      v12 = v3 + 24 * (v5 >> 1);
      if (*(char *)(v12 + 23) < 0)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_48;
        result = *(_QWORD *)v12;
        if (v13 && result == 0)
          goto LABEL_48;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v12 + 23);
        result = v3 + 24 * (v5 >> 1);
      }
      if (v10 >= v13)
        v15 = v13;
      else
        v15 = v10;
      result = memcmp((const void *)result, __s2, v15);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if (v13 >= v10)
      {
        goto LABEL_12;
      }
      v3 = v12 + 24;
      v11 = v5 + ~v11;
LABEL_12:
      v5 = v11;
      if (!v11)
        return v3;
    }
  }
  if ((v7 & 0x8000000000000000) == 0 && v9)
  {
    while (1)
    {
      v16 = v5 >> 1;
      v17 = v3 + 24 * (v5 >> 1);
      if (*(char *)(v17 + 23) < 0)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if ((v18 & 0x8000000000000000) != 0)
          break;
        result = *(_QWORD *)v17;
        if (v18 && result == 0)
          break;
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        result = v3 + 24 * (v5 >> 1);
      }
      if (v7 >= v18)
        v20 = v18;
      else
        v20 = v7;
      result = memcmp((const void *)result, v6, v20);
      if ((_DWORD)result)
      {
        if ((result & 0x80000000) == 0)
          goto LABEL_32;
      }
      else if (v18 >= v7)
      {
        goto LABEL_32;
      }
      v3 = v17 + 24;
      v16 = v5 + ~v16;
LABEL_32:
      v5 = v16;
      if (!v16)
        return v3;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

__n128 webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::emplace_key_args<std::string,std::string const&>(unint64_t *a1, const void **__s2, uint64_t a3)
{
  const void **v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  __n128 result;
  size_t v15;
  const void *v16;
  size_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  std::string *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  __n128 *v34;
  unint64_t v35;
  unint64_t v36;
  std::string *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  std::string v45;
  _QWORD *v46;

  v4 = __s2;
  v6 = std::__lower_bound[abi:sn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::string,std::__identity,webrtc::flat_containers_internal::flat_tree<std::string,webrtc::identity,std::less<void>,std::vector<std::string>>::KeyValueCompare>(*a1, a1[1], __s2);
  v8 = *a1;
  v7 = a1[1];
  v9 = v6 - *a1;
  v10 = v9 / 24;
  v11 = *a1 + 24 * (v9 / 24);
  if (v11 == v7)
  {
    v13 = a1[2];
    if (v11 < v13)
    {
      if (v8)
      {
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(*a1 + 24 * (v9 / 24)), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          result = *(__n128 *)a3;
          *(_QWORD *)(v11 + 16) = *(_QWORD *)(a3 + 16);
          *(__n128 *)v11 = result;
        }
        a1[1] = v11 + 24;
        return result;
      }
      goto LABEL_82;
    }
  }
  else
  {
    if (*((char *)v4 + 23) < 0)
    {
      v12 = (size_t)v4[1];
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v4 = (const void **)*v4;
      if (v12)
      {
        if (!v4)
          goto LABEL_82;
      }
    }
    else
    {
      v12 = *((unsigned __int8 *)v4 + 23);
    }
    if (*(char *)(v11 + 23) < 0)
    {
      v15 = *(_QWORD *)(v11 + 8);
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_82;
      v16 = *(const void **)v11;
      if (v15 && v16 == 0)
        goto LABEL_82;
    }
    else
    {
      v15 = *(unsigned __int8 *)(v11 + 23);
      v16 = (const void *)(*a1 + 24 * (v9 / 24));
    }
    if (v15 >= v12)
      v18 = v12;
    else
      v18 = v15;
    v19 = memcmp(v4, v16, v18);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return result;
    }
    else if (v12 >= v15)
    {
      return result;
    }
    v13 = a1[2];
    if (v7 < v13)
    {
      v46 = a1 + 2;
      if (*(char *)(a3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        v7 = a1[1];
        v20 = v11 + 24;
        v21 = v7 - 24;
        v22 = v7;
        if (v7 < 0x18)
        {
LABEL_73:
          a1[1] = v22;
          if (v7 != v20)
          {
            v42 = 8 * ((uint64_t)(v7 - v20) >> 3);
            do
            {
              if (*(char *)(v21 + 23) < 0)
                operator delete(*(void **)v21);
              v43 = (__int128 *)(v11 + v42 - 24);
              v44 = *v43;
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v11 + v42 - 8);
              *(_OWORD *)v21 = v44;
              v21 -= 24;
              *(_BYTE *)(v11 + v42 - 1) = 0;
              *(_BYTE *)v43 = 0;
              v42 -= 24;
            }
            while (v42);
          }
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          result = *(__n128 *)&v45.__r_.__value_.__l.__data_;
          *(_QWORD *)(v11 + 16) = *((_QWORD *)&v45.__r_.__value_.__l + 2);
          *(__n128 *)v11 = result;
          return result;
        }
      }
      else
      {
        v45 = *(std::string *)a3;
        v20 = v11 + 24;
        v21 = v7 - 24;
        v22 = v7;
        if (v7 - 24 >= v7)
          goto LABEL_73;
      }
      v40 = v21;
      v22 = v7;
      do
      {
        v41 = *(_OWORD *)v40;
        *(_QWORD *)(v22 + 16) = *(_QWORD *)(v40 + 16);
        *(_OWORD *)v22 = v41;
        v22 += 24;
        *(_QWORD *)(v40 + 8) = 0;
        *(_QWORD *)(v40 + 16) = 0;
        *(_QWORD *)v40 = 0;
        v40 += 24;
      }
      while (v40 < v7);
      goto LABEL_73;
    }
  }
  v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v8) >> 3) + 1;
  if (v23 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_83;
  v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v8) >> 3);
  if (2 * v24 > v23)
    v23 = 2 * v24;
  if (v24 >= 0x555555555555555)
    v25 = 0xAAAAAAAAAAAAAAALL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_84;
    v26 = (char *)operator new(24 * v25);
    v27 = (std::string *)&v26[24 * v10];
    v28 = &v26[24 * v25];
    if (v10 != v25)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = (std::string *)(24 * v10);
    v28 = 0;
    if (v10)
      goto LABEL_49;
  }
  if (v9 >= 24)
  {
    v29 = v10 + 2;
    if (v10 >= -1)
      v29 = v10 + 1;
    v27 -= v29 >> 1;
    goto LABEL_49;
  }
  v30 = 2 * v10;
  if ((unint64_t)(v9 + 23) < 0x2F)
    v30 = 1;
  if (v30 > 0xAAAAAAAAAAAAAAALL)
LABEL_84:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v31 = v30 >> 2;
  v32 = 24 * v30;
  v33 = (char *)operator new(24 * v30);
  v27 = (std::string *)&v33[24 * v31];
  v28 = &v33[v32];
  if (v26)
    operator delete(v26);
LABEL_49:
  if (!v27)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    abort();
  }
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    v34 = (__n128 *)&v27[1];
    v35 = *a1;
    if (*a1 != v11)
      goto LABEL_52;
LABEL_59:
    v37 = v27;
    v38 = a1[1];
    if (v38 == v11)
      goto LABEL_55;
    goto LABEL_60;
  }
  result = *(__n128 *)a3;
  *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  v27->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  v34 = (__n128 *)&v27[1];
  v35 = *a1;
  if (*a1 == v11)
    goto LABEL_59;
LABEL_52:
  v36 = v11;
  do
  {
    v37 = v27 - 1;
    result = *(__n128 *)(v36 - 24);
    v27[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 - 8);
    *(__n128 *)&v27[-1].__r_.__value_.__l.__data_ = result;
    *(_QWORD *)(v36 - 16) = 0;
    *(_QWORD *)(v36 - 8) = 0;
    *(_QWORD *)(v36 - 24) = 0;
    v36 -= 24;
    --v27;
  }
  while (v36 != v35);
  v38 = a1[1];
  if (v38 == v11)
  {
LABEL_55:
    v39 = *a1;
    *a1 = (unint64_t)v37;
    a1[1] = (unint64_t)v34;
    a1[2] = (unint64_t)v28;
    if (v11 == v39)
      goto LABEL_56;
    goto LABEL_64;
  }
  do
  {
LABEL_60:
    result = *(__n128 *)v11;
    v34[1].n128_u64[0] = *(_QWORD *)(v11 + 16);
    *v34 = result;
    v34 = (__n128 *)((char *)v34 + 24);
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)v11 = 0;
    v11 += 24;
  }
  while (v11 != v38);
  v39 = *a1;
  v11 = a1[1];
  *a1 = (unint64_t)v37;
  a1[1] = (unint64_t)v34;
  a1[2] = (unint64_t)v28;
  if (v11 == v39)
  {
LABEL_56:
    if (!v11)
      return result;
LABEL_67:
    operator delete((void *)v11);
    return result;
  }
  do
  {
LABEL_64:
    if (*(char *)(v11 - 1) < 0)
      operator delete(*(void **)(v11 - 24));
    v11 -= 24;
  }
  while (v11 != v39);
  v11 = v39;
  if (v39)
    goto LABEL_67;
  return result;
}

char *std::vector<std::pair<unsigned int,std::string>>::emplace<unsigned int const&,std::string>(uint64_t *a1, char *a2, _DWORD *a3, __int128 *a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  char *v33;
  __int128 v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  int v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  char *v46;
  unint64_t v48;
  _DWORD *v49;
  char *v50;
  char v51;
  void *v52;
  _BYTE v53[15];

  v7 = (char *)*a1;
  v6 = (char *)a1[1];
  v8 = (uint64_t)&a2[-*a1];
  v9 = v8 >> 5;
  v10 = (char *)(*a1 + (v8 & 0xFFFFFFFFFFFFFFE0));
  v11 = a1[2];
  if ((unint64_t)v6 >= v11)
  {
    v25 = ((v6 - v7) >> 5) + 1;
    if (v25 >> 59)
      abort();
    v27 = v11 - (_QWORD)v7;
    if (v27 >> 4 > v25)
      v25 = v27 >> 4;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
      v28 = 0x7FFFFFFFFFFFFFFLL;
    else
      v28 = v25;
    if (v28)
    {
      if (v28 >> 59)
        goto LABEL_57;
      v29 = a3;
      v30 = (char *)operator new(32 * v28);
      a3 = v29;
      v31 = (uint64_t)&v30[32 * v9];
      if (v9 != v28)
        goto LABEL_30;
    }
    else
    {
      v30 = 0;
      v31 = 32 * v9;
      if (v9)
      {
LABEL_30:
        if (!v31)
          goto LABEL_55;
        v36 = &v30[32 * v28];
LABEL_32:
        *(_DWORD *)v31 = *a3;
        v37 = *a4;
        *(_QWORD *)(v31 + 24) = *((_QWORD *)a4 + 2);
        *(_OWORD *)(v31 + 8) = v37;
        *((_QWORD *)a4 + 1) = 0;
        *((_QWORD *)a4 + 2) = 0;
        *(_QWORD *)a4 = 0;
        v38 = v31 + 32;
        v39 = (char *)*a1;
        v40 = v31;
        if ((char *)*a1 != v10)
        {
          v41 = v10;
          v40 = v31;
          do
          {
            v42 = *((_DWORD *)v41 - 8);
            v41 -= 32;
            *(_DWORD *)(v40 - 32) = v42;
            v40 -= 32;
            v43 = *(_OWORD *)(v41 + 8);
            *(_QWORD *)(v40 + 24) = *((_QWORD *)v41 + 3);
            *(_OWORD *)(v40 + 8) = v43;
            *((_QWORD *)v41 + 2) = 0;
            *((_QWORD *)v41 + 3) = 0;
            *((_QWORD *)v41 + 1) = 0;
          }
          while (v41 != v39);
        }
        v44 = (char *)a1[1];
        if (v44 != v10)
        {
          do
          {
            *(_DWORD *)v38 = *(_DWORD *)v10;
            v45 = *(_OWORD *)(v10 + 8);
            *(_QWORD *)(v38 + 24) = *((_QWORD *)v10 + 3);
            *(_OWORD *)(v38 + 8) = v45;
            *((_QWORD *)v10 + 2) = 0;
            *((_QWORD *)v10 + 3) = 0;
            *((_QWORD *)v10 + 1) = 0;
            v38 += 32;
            v10 += 32;
          }
          while (v10 != v44);
          v10 = (char *)a1[1];
        }
        v46 = (char *)*a1;
        *a1 = v40;
        a1[1] = v38;
        a1[2] = (uint64_t)v36;
        if (v10 == v46)
        {
          if (!v10)
            return (char *)v31;
        }
        else
        {
          do
          {
            if (*(v10 - 1) < 0)
              operator delete(*((void **)v10 - 3));
            v10 -= 32;
          }
          while (v10 != v46);
          v10 = v46;
          if (!v46)
            return (char *)v31;
        }
        operator delete(v10);
        return (char *)v31;
      }
    }
    if (v8 >= 1)
    {
      v35 = v9 + 2;
      if (v9 >= -1)
        v35 = v9 + 1;
      v31 -= 32 * (v35 >> 1);
      goto LABEL_30;
    }
    if (v7 == a2)
      v48 = 1;
    else
      v48 = v8 >> 4;
    if (!(v48 >> 59))
    {
      v49 = a3;
      v50 = (char *)operator new(32 * v48);
      v31 = (uint64_t)&v50[32 * (v48 >> 2)];
      v36 = &v50[32 * v48];
      if (v30)
        operator delete(v30);
      a3 = v49;
      goto LABEL_32;
    }
LABEL_57:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v10 == v6)
  {
    if (v7)
    {
      *(_DWORD *)v10 = *a3;
      v33 = &v7[32 * v9];
      v34 = *a4;
      *((_QWORD *)v33 + 3) = *((_QWORD *)a4 + 2);
      *(_OWORD *)(v33 + 8) = v34;
      *((_QWORD *)a4 + 1) = 0;
      *((_QWORD *)a4 + 2) = 0;
      *(_QWORD *)a4 = 0;
      a1[1] = (uint64_t)(v10 + 32);
      return v10;
    }
LABEL_55:
    __break(1u);
  }
  v12 = *a3;
  v52 = *(void **)a4;
  *(_QWORD *)v53 = *((_QWORD *)a4 + 1);
  *(_QWORD *)&v53[7] = *(_QWORD *)((char *)a4 + 15);
  v51 = *((_BYTE *)a4 + 23);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  v13 = a1[1];
  v14 = v10 + 32;
  v15 = v13 - 32;
  v16 = v13;
  if (v13 >= 0x20)
  {
    do
    {
      *(_DWORD *)v16 = *(_DWORD *)v15;
      v17 = *(_OWORD *)(v15 + 8);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v15 + 24);
      *(_OWORD *)(v16 + 8) = v17;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 8) = 0;
      v16 += 32;
      v15 += 32;
    }
    while (v15 < v13);
  }
  a1[1] = v16;
  if ((char *)v13 != v14)
  {
    v18 = 0;
    v19 = 32 * ((uint64_t)(v13 - (_QWORD)v14) >> 5);
    v20 = &v7[32 * v9 + v19];
    v21 = -v19;
    do
    {
      v23 = &v20[v18];
      *(_DWORD *)(v13 + v18 - 32) = *(_DWORD *)&v20[v18 - 32];
      v24 = v13 + v18 - 24;
      if (*(char *)(v13 + v18 - 1) < 0)
        operator delete(*(void **)v24);
      v18 -= 32;
      v22 = *(_OWORD *)(v23 - 24);
      *(_QWORD *)(v24 + 16) = *((_QWORD *)v23 - 1);
      *(_OWORD *)v24 = v22;
      *(v23 - 1) = 0;
      *(v23 - 24) = 0;
    }
    while (v21 != v18);
  }
  *(_DWORD *)v10 = v12;
  v32 = (void **)&v7[32 * v9 + 8];
  if (v10[31] < 0)
    operator delete(*v32);
  *v32 = v52;
  *(_QWORD *)&v7[32 * v9 + 16] = *(_QWORD *)v53;
  *(_QWORD *)&v7[32 * v9 + 23] = *(_QWORD *)&v53[7];
  v7[32 * v9 + 31] = v51;
  return v10;
}

uint64_t webrtc::flat_containers_internal::flat_tree<std::string,webrtc::flat_containers_internal::GetFirst,std::less<void>,std::vector<std::pair<std::string,webrtc::RtpPacketSinkInterface *>>>::equal_range<std::string_view>(uint64_t result, uint64_t a2, void *__s1, size_t a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  const void *v12;
  size_t v14;
  size_t v15;
  const void *v16;
  size_t v17;

  if (a2 == result)
    return a2;
  v7 = result;
  v8 = (a2 - result) >> 5;
  do
  {
    v9 = v8 >> 1;
    v10 = v7 + 32 * (v8 >> 1);
    if (*(char *)(v10 + 23) < 0)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if ((v11 & 0x8000000000000000) != 0)
        goto LABEL_32;
      v12 = *(const void **)v10;
      if (v11 && v12 == 0)
        goto LABEL_32;
    }
    else
    {
      v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = (const void *)(v7 + 32 * (v8 >> 1));
    }
    if (v11 >= a4)
      v14 = a4;
    else
      v14 = v11;
    result = memcmp(__s1, v12, v14);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
        goto LABEL_3;
    }
    else if (v11 < a4)
    {
LABEL_3:
      v7 = v10 + 32;
      v9 = v8 + ~v9;
    }
    v8 = v9;
  }
  while (v9);
  if (v7 == a2)
    return v7;
  if (*(char *)(v7 + 23) < 0)
  {
    v15 = *(_QWORD *)(v7 + 8);
    if ((v15 & 0x8000000000000000) != 0 || (v16 = *(const void **)v7, v15) && !v16)
    {
LABEL_32:
      __break(1u);
      return result;
    }
  }
  else
  {
    v15 = *(unsigned __int8 *)(v7 + 23);
    v16 = (const void *)v7;
  }
  if (v15 >= a4)
    v17 = a4;
  else
    v17 = v15;
  memcmp(__s1, v16, v17);
  return v7;
}

uint64_t webrtc::RtpDependencyDescriptorExtension::ValueSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  LOBYTE(v9) = 0;
  v10 = a3;
  v11 = a1;
  v12 = a2;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  webrtc::RtpDependencyDescriptorWriter::FindBestTemplate(&v9);
  v3 = 0;
  if ((_BYTE)v9)
    goto LABEL_2;
  v6 = v10;
  v7 = *(_QWORD *)(v10 + 136);
  if (v16 <= 0)
  {
    if (!v7)
    {
      if (!*(_BYTE *)(v10 + 128))
      {
        v3 = v16 + 24;
        goto LABEL_2;
      }
      v3 = v16 + 29;
      goto LABEL_12;
    }
    v3 = v16 + 29;
    goto LABEL_10;
  }
  v3 = v16 + 29;
  if (v7)
LABEL_10:
    v3 += webrtc::RtpDependencyDescriptorWriter::StructureSizeBits((webrtc::RtpDependencyDescriptorWriter *)&v9);
  if (!*(_BYTE *)(v6 + 128))
    goto LABEL_2;
LABEL_12:
  v8 = *(_DWORD *)(v11 + 4);
  if (!*(_QWORD *)(v6 + 136) || ~(-1 << v8) != *(_DWORD *)(v6 + 124))
    v3 += v8;
LABEL_2:
  v4 = v3 / 8;
  if (v3 >= 0 && (v3 & 0x80000007) != 0)
    ++v4;
  return v4;
}

uint64_t webrtc::RtpDependencyDescriptorReader::RtpDependencyDescriptorReader(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint8x16_t *v9;
  uint64_t v10;
  unsigned int v13;
  uint8x16_t *v14;
  _DWORD *v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  char v24;
  char v25;
  int v26;
  char v27;
  _OWORD *v28;
  unint64_t v29;
  webrtc::FrameDependencyStructure *v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 v35;
  char v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  __int32 v46;
  BOOL v47;
  int v48;
  int v49;
  unint64_t v50;
  uint8x16_t *v51;
  unint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int64x2_t v67;
  int8x16_t v68;
  int64x2_t v69;
  __int8 *v70;
  unint64_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  uint8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  uint64x2_t v83;
  int8x16_t v84;
  uint32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  uint32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  uint64_t v94;
  unint64_t v95;
  BOOL v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  int v119;
  unint64_t v120;
  int v121;
  uint64_t i;
  unint64_t v123;
  unsigned int v124;
  unsigned __int8 *v125;
  int v126;
  char v127;
  unsigned int v128;
  unsigned int v129;
  uint8x16_t *v130;
  unint64_t v131;
  int v132;
  char v133;
  int v134;
  int v135;
  unint64_t v136;
  _BYTE *v137;
  int v138;
  int v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  int v153;
  int v154;
  unint64_t v155;
  int v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned __int8 *v168;
  char v169;
  int v170;
  char v171;
  uint64_t j;
  unsigned int v173;
  unsigned __int8 *v174;
  int v175;
  char v176;
  _QWORD *v177;
  _QWORD *v178;
  int v179;
  BOOL v180;
  char *v181;
  char v182;
  unint64_t *v183;
  _QWORD *v184;
  uint64_t v185;
  unsigned int v186;
  char v187;
  int v188;
  unint64_t v189;
  int v190;
  _BYTE *v191;
  int v192;
  int NonSymmetric;
  int v194;
  int v195;
  uint64_t v196;
  unint64_t *v197;
  int v198;
  int v199;
  unint64_t *v200;
  int v201;
  unint64_t *v202;
  int v203;
  unsigned __int8 *v204;
  char v205;
  int v206;
  int v207;
  char v208;
  _BYTE *v209;
  int v210;
  unsigned int v211;
  uint64_t v212;
  int v213;
  int v214;
  unint64_t v215;
  unint64_t *v216;
  uint64_t v217;
  unint64_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  __int32 v222;
  unint64_t v223;
  unsigned int v224;
  int v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v230;
  unsigned __int8 *v231;
  int64x2_t v232;
  int64x2_t v233;
  int8x16_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int8x16_t v243;
  int8x16_t v244;
  unint64_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t v251;
  uint8x16_t v252;
  uint16x8_t v253;
  uint16x8_t v254;
  uint32x4_t v255;
  uint32x4_t v256;
  uint64x2_t v257;
  int8x16_t v258;
  uint32x4_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  uint32x4_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  unint64_t v268;
  unsigned int v269;
  unint64_t *v270;
  unint64_t *v271;
  unint64_t *v272;
  uint64_t v273;
  int v274;
  unsigned int v275;
  int v276;
  char v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  int v288;
  int v289;
  unint64_t v290;
  unint64_t v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t *v295;
  _OWORD *v296;
  __int128 *v297;
  uint64_t v298;
  __int128 v299;
  unint64_t v300;
  char *v301;
  uint64_t v302;
  char *v303;
  unint64_t v304;
  int v305;
  unsigned __int8 *v306;
  int v307;
  unsigned int v308;
  int v309;
  unint64_t v310;
  unsigned int v311;
  unsigned __int8 *v312;
  unsigned __int8 *v313;
  unint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  int *v318;
  unsigned int v319;
  unint64_t v320;
  unsigned int v321;
  unsigned __int8 *v322;
  unint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  int64x2_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t *v330;
  __n128 __p;
  char *v332;

  *(_QWORD *)a1 = a5;
  if (a3)
    v8 = a2;
  else
    v8 = 0;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = (uint8x16_t *)(a1 + 8);
  if (((a3 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v325);
LABEL_422:
    abort();
  }
  v10 = a5;
  v13 = 8 * a3;
  *(_DWORD *)(a1 + 16) = 8 * a3 - 1;
  v14 = (uint8x16_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  v15 = (_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  if (!(8 * (_DWORD)a3))
  {
    *(_WORD *)a5 = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v16 = v8;
    *(_BYTE *)(a1 + 20) = 0;
LABEL_10:
    v18 = -1;
    v14->i32[0] = -1;
    *(_DWORD *)(a5 + 4) = 0;
    if (a3 < 4)
      goto LABEL_37;
    goto LABEL_11;
  }
  *(_BYTE *)a5 = *v8 >> 7;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = v13 - 2;
  *(_BYTE *)(a5 + 1) = (*v8 & 0x40) != 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = v13 - 8;
  v16 = v8 + 1;
  v17 = *v8 & 0x3F;
  *(_QWORD *)(a1 + 8) = v8 + 1;
  *(_DWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 20) = 0;
  if (v13 <= 0x17)
    goto LABEL_10;
  v18 = v13 - 24;
  v14->i32[0] = v18;
  v19 = v8[1];
  v9->i64[0] = (uint64_t)(v8 + 2);
  v20 = v8[2] | (v19 << 8);
  v16 = v8 + 3;
  v9->i64[0] = (uint64_t)(v8 + 3);
  *(_DWORD *)(a5 + 4) = v20;
  if (a3 < 4)
  {
LABEL_37:
    v33 = *(_QWORD *)(a5 + 136);
    if (!v33)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_11:
  *(_BYTE *)(a1 + 20) = 0;
  v21 = v18 - 1;
  *(_DWORD *)(a1 + 16) = v18 - 1;
  if (v18 > 0)
  {
    if ((v21 & 7) != 0)
    {
      v22 = ((*v16 >> (v21 & 7)) & 1) == 0;
      v23 = v18 - 2;
      v14->i32[0] = v23;
      v24 = v23 & 7;
      if ((v23 & 7) != 0)
        goto LABEL_14;
    }
    else
    {
      v34 = v16 + 1;
      *(_QWORD *)(a1 + 8) = v16 + 1;
      v35 = *v16;
      v22 = (v35 & 1) == 0;
      *(_BYTE *)(a1 + 20) = 0;
      v23 = v18 - 2;
      *(_DWORD *)(a1 + 16) = v23;
      if (!v21)
      {
        *(_DWORD *)(a1 + 16) = -4;
        *(_DWORD *)(a1 + 28) = 0;
        if ((v35 & 1) == 0)
          goto LABEL_37;
        goto LABEL_18;
      }
      v16 = v34;
      v24 = v23 & 7;
      if ((v23 & 7) != 0)
      {
LABEL_14:
        *(_BYTE *)(a1 + 28) = (*v16 >> v24) & 1;
        *(_BYTE *)(a1 + 20) = 0;
        v25 = v23 - 1;
        *(_DWORD *)(a1 + 16) = v23 - 1;
        if (v23 >= 1)
        {
LABEL_15:
          v26 = v25 & 7;
          if (v26)
          {
            *(_BYTE *)(a1 + 29) = (*v16 >> v26) & 1;
            *(_BYTE *)(a1 + 20) = 0;
            v27 = v23 - 2;
            *(_DWORD *)(a1 + 16) = v23 - 2;
            if (v23 < 2)
              goto LABEL_17;
          }
          else
          {
            v9->i64[0] = (uint64_t)(v16 + 1);
            v41 = *v16++;
            *(_BYTE *)(a1 + 29) = v41 & 1;
            *(_BYTE *)(a1 + 20) = 0;
            v27 = v23 - 2;
            *(_DWORD *)(a1 + 16) = v23 - 2;
            if (v23 < 2)
            {
LABEL_17:
              *(_WORD *)(a1 + 30) = 0;
              *(_BYTE *)(a1 + 20) = 0;
              *(_DWORD *)(a1 + 16) = -2;
              if (v22)
                goto LABEL_37;
              goto LABEL_18;
            }
          }
          v42 = v27 & 7;
          if (v42)
          {
            *(_BYTE *)(a1 + 30) = (*v16 >> v42) & 1;
            *(_BYTE *)(a1 + 20) = 0;
            v54 = v23 >= 3;
            v43 = v23 - 3;
            *(_DWORD *)(a1 + 16) = v43;
            if (!v54)
              goto LABEL_36;
          }
          else
          {
            v9->i64[0] = (uint64_t)(v16 + 1);
            v134 = *v16++;
            *(_BYTE *)(a1 + 30) = v134 & 1;
            *(_BYTE *)(a1 + 20) = 0;
            v54 = v23 >= 3;
            v43 = v23 - 3;
            *(_DWORD *)(a1 + 16) = v43;
            if (!v54)
            {
LABEL_36:
              *(_BYTE *)(a1 + 31) = 0;
              if (v22)
                goto LABEL_37;
              goto LABEL_18;
            }
          }
          v135 = v43 & 7;
          if (v135)
          {
            *(_BYTE *)(a1 + 31) = (*v16 >> v135) & 1;
            if (v22)
              goto LABEL_37;
          }
          else
          {
            v9->i64[0] = (uint64_t)(v16 + 1);
            *(_BYTE *)(a1 + 31) = *v16 & 1;
            if (v22)
              goto LABEL_37;
          }
LABEL_18:
          v28 = (_OWORD *)operator new();
          *v28 = 0u;
          v28[1] = 0u;
          v28[2] = 0u;
          v28[3] = 0u;
          v28[4] = 0u;
          v28[5] = 0u;
          v28[6] = 0u;
          v28[7] = 0u;
          v30 = *(webrtc::FrameDependencyStructure **)(*(_QWORD *)a1 + 136);
          *(_QWORD *)(*(_QWORD *)a1 + 136) = v28;
          if (v30)
          {
            webrtc::FrameDependencyStructure::~FrameDependencyStructure(v30);
            MEMORY[0x20BD0ADEC]();
          }
          *(_BYTE *)(a1 + 20) = 0;
          v31 = *(_DWORD *)(a1 + 16);
          v329 = v10;
          v328 = (uint64_t)v15;
          v327 = a4;
          if (v31 <= 5)
          {
            v32 = *(_QWORD *)a1 + 136;
            **(_DWORD **)v32 = 0;
            goto LABEL_124;
          }
          v37 = *(_DWORD *)(a1 + 16) & 7;
          LODWORD(v29) = v31 - 6;
          v14->i32[0] = v31 - 6;
          if ((v31 & 7) == 7)
          {
            v39 = v9->i64[0];
            v38 = ((unint64_t)*(unsigned __int8 *)v9->i64[0] >> 1) & 0x3F;
            goto LABEL_123;
          }
          if ((v31 & 7) != 0)
          {
            v40 = 6 - v37;
            v39 = v9->i64[0] + 1;
            v38 = (unint64_t)(*(unsigned __int8 *)v9->i64[0] & ~(-1 << v37)) << (6 - v37);
            v9->i64[0] = v39;
            if (v37 == 6)
              goto LABEL_123;
          }
          else
          {
            LODWORD(v38) = 0;
            v39 = v9->i64[0];
            v40 = 6;
          }
          LODWORD(v38) = v38 | (*(unsigned __int8 *)v39 >> (8 - v40));
LABEL_123:
          v32 = *(_QWORD *)a1 + 136;
          **(_DWORD **)v32 = v38;
          *(_BYTE *)(a1 + 20) = 0;
          if (v29 > 4)
          {
            v211 = v29 & 7;
            v14->i32[0] = v31 - 11;
            if (v211 < 6)
            {
              LODWORD(v29) = 5;
              if (!v211)
                goto LABEL_419;
              LODWORD(v29) = 5 - v211;
              v289 = *(unsigned __int8 *)v39++;
              v136 = (unint64_t)(v289 & ~(-1 << v211)) << (5 - v211);
              v9->i64[0] = v39;
              if (v211 != 5)
                goto LABEL_420;
            }
            else
            {
              LODWORD(v136) = (*(unsigned __int8 *)v39 >> (v211 - 5)) & 0x1F;
            }
            goto LABEL_125;
          }
LABEL_124:
          LODWORD(v136) = 0;
          v14->i32[0] = -1;
          goto LABEL_125;
        }
LABEL_29:
        *(_WORD *)(a1 + 29) = 0;
        *(_BYTE *)(a1 + 20) = 0;
        *(_DWORD *)(a1 + 16) = v23 - 3;
        goto LABEL_36;
      }
    }
    v9->i64[0] = (uint64_t)(v16 + 1);
    v36 = *v16++;
    *(_BYTE *)(a1 + 28) = v36 & 1;
    *(_BYTE *)(a1 + 20) = 0;
    v25 = v23 - 1;
    *(_DWORD *)(a1 + 16) = v23 - 1;
    if (v23 >= 1)
      goto LABEL_15;
    goto LABEL_29;
  }
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = v18 - 5;
  *(_DWORD *)(a1 + 28) = 0;
  v33 = *(_QWORD *)(a5 + 136);
  if (!v33)
    goto LABEL_23;
LABEL_38:
  *(_QWORD *)(a1 + 32) = v33;
  a4 = v33;
  if (!*(_BYTE *)(a1 + 28))
    goto LABEL_72;
LABEL_39:
  LODWORD(v44) = *(_DWORD *)(a4 + 4);
  *(_BYTE *)(a1 + 20) = 0;
  if ((v44 & 0x80000000) != 0 || (v45 = *(_DWORD *)(a1 + 16), v46 = v45 - v44, v45 < (int)v44))
  {
    LODWORD(v50) = 0;
    v14->i32[0] = -1;
    goto LABEL_69;
  }
  v47 = -v45 < 0;
  v48 = -v45 & 7;
  v49 = *(_DWORD *)(a1 + 16) & 7;
  if (!v47)
    v49 = -v48;
  v14->i32[0] = v46;
  if (v49 <= (int)v44)
  {
    if (v49 < 1)
    {
      v50 = 0;
      if ((int)v44 < 8)
        goto LABEL_67;
    }
    else
    {
      LODWORD(v44) = v44 - v49;
      v50 = (unint64_t)(*(unsigned __int8 *)v9->i64[0]++ & ~(-1 << v49)) << v44;
      if ((int)v44 < 8)
        goto LABEL_67;
    }
    v51 = (uint8x16_t *)v9->i64[0];
    v44 = v44;
    v52 = v44 - 15;
    if (v44 < 0xFuLL)
      v52 = 0;
    if (v52 < 0x71)
      goto LABEL_64;
    v53 = v44 - 15;
    if (v44 < 0xFuLL)
      v53 = 0;
    v54 = v9 >= (uint8x16_t *)&v51->i8[((unint64_t)(v53 + 7) >> 3) + 1] || v51 >= v14;
    if (v54)
    {
      v55 = ((v52 + 7) >> 3) + 1;
      v56 = vdupq_n_s64(v44);
      v57 = vaddq_s64(v56, (int64x2_t)xmmword_208F05970);
      v58 = vaddq_s64(v56, (int64x2_t)xmmword_208F05980);
      v59 = vaddq_s64(v56, (int64x2_t)xmmword_208F05990);
      v60 = vaddq_s64(v56, (int64x2_t)xmmword_208F059A0);
      v61 = vaddq_s64(v56, (int64x2_t)xmmword_208F059B0);
      v62 = vaddq_s64(v56, (int64x2_t)xmmword_208F059C0);
      v63 = vaddq_s64(v56, (int64x2_t)xmmword_208F059D0);
      v64 = vaddq_s64(v56, (int64x2_t)xmmword_208F059E0);
      v65 = (int8x16_t)v50;
      v66 = 0uLL;
      v67 = vdupq_n_s64(0xFFFFFFF8uLL);
      v68.i64[0] = 0xFFFFFFFFLL;
      v68.i64[1] = 0xFFFFFFFFLL;
      v69 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
      v44 = v44 - 8 * (v55 & 0x7FFFFFF0);
      v70 = &v51->i8[v55 & 0x7FFFFFF0];
      v71 = v55 & 0x7FFFFFF0;
      v72 = 0uLL;
      v73 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v76 = 0uLL;
      v77 = 0uLL;
      do
      {
        v78 = *v51++;
        v79 = vmovl_u8(*(uint8x8_t *)v78.i8);
        v80 = vmovl_high_u8(v78);
        v81 = vmovl_u16(*(uint16x4_t *)v80.i8);
        v82 = vmovl_high_u16(v80);
        v83.i64[0] = v82.u32[2];
        v83.i64[1] = v82.u32[3];
        v84 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v57, v67), v68));
        v85 = vmovl_u16(*(uint16x4_t *)v79.i8);
        v83.i64[0] = v82.u32[0];
        v83.i64[1] = v82.u32[1];
        v86 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v58, v67), v68));
        v83.i64[0] = v85.u32[0];
        v83.i64[1] = v85.u32[1];
        v87 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v64, v67), v68));
        v83.i64[0] = v81.u32[2];
        v83.i64[1] = v81.u32[3];
        v88 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v59, v67), v68));
        v89 = vmovl_high_u16(v79);
        v83.i64[0] = v85.u32[2];
        v83.i64[1] = v85.u32[3];
        v90 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v63, v67), v68));
        v83.i64[0] = v89.u32[0];
        v83.i64[1] = v89.u32[1];
        v91 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v62, v67), v68));
        v83.i64[0] = v81.u32[0];
        v83.i64[1] = v81.u32[1];
        v92 = (int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v60, v67), v68));
        v83.i64[0] = v89.u32[2];
        v83.i64[1] = v89.u32[3];
        v73 = vorrq_s8((int8x16_t)vshlq_u64(v83, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v61, v67), v68)), v73);
        v74 = vorrq_s8(v92, v74);
        v72 = vorrq_s8(v91, v72);
        v66 = vorrq_s8(v90, v66);
        v75 = vorrq_s8(v88, v75);
        v65 = vorrq_s8(v87, v65);
        v76 = vorrq_s8(v86, v76);
        v77 = vorrq_s8(v84, v77);
        v63 = vaddq_s64(v63, v69);
        v64 = vaddq_s64(v64, v69);
        v62 = vaddq_s64(v62, v69);
        v61 = vaddq_s64(v61, v69);
        v60 = vaddq_s64(v60, v69);
        v59 = vaddq_s64(v59, v69);
        v58 = vaddq_s64(v58, v69);
        v57 = vaddq_s64(v57, v69);
        v71 -= 16;
      }
      while (v71);
      v9->i64[0] = (uint64_t)v51;
      v93 = vorrq_s8(vorrq_s8(vorrq_s8(v65, v74), vorrq_s8(v72, v76)), vorrq_s8(vorrq_s8(v66, v75), vorrq_s8(v73, v77)));
      v50 = (unint64_t)vorr_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL));
      if (v55 == (v55 & 0x7FFFFFF0))
      {
LABEL_67:
        if ((int)v44 >= 1)
          LODWORD(v50) = v50 | (*(unsigned __int8 *)v9->i64[0] >> (8 - v44));
        goto LABEL_69;
      }
    }
    else
    {
LABEL_64:
      v70 = (__int8 *)v9->i64[0];
    }
    v94 = (uint64_t)(v70 + 1);
    v95 = v44;
    do
    {
      LODWORD(v44) = v95 - 8;
      v50 |= (unint64_t)*(unsigned __int8 *)(v94 - 1) << (v95 - 8);
      v9->i64[0] = v94++;
      v96 = v95 > 0xF;
      v95 -= 8;
    }
    while (v96);
    goto LABEL_67;
  }
  LODWORD(v50) = (*(unsigned __int8 *)v9->i64[0] >> (v49 - v44)) & ~(-1 << v44);
LABEL_69:
  if (!*(_BYTE *)(v10 + 128))
    *(_BYTE *)(v10 + 128) = 1;
  *(_DWORD *)(v10 + 124) = v50;
  a4 = *(_QWORD *)(a1 + 32);
  while (1)
  {
LABEL_72:
    v97 = *v15 - *(_DWORD *)a4 + 64;
    v98 = v97 & 0x3F;
    v99 = -v97;
    v47 = v99 < 0;
    v100 = v99 & 0x3F;
    if (v47)
      v101 = v98;
    else
      v101 = -v100;
    v102 = *(_QWORD *)(a4 + 104);
    if (0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(a4 + 112) - v102) >> 3) <= (unint64_t)v101)
    {
LABEL_96:
      v14->i32[0] = -1;
      return a1;
    }
    v103 = (unint64_t *)(v102 + 104 * v101);
    v104 = *(unint64_t **)a1;
    v105 = *(unint64_t **)a1;
    v105[1] = *v103;
    if (v105 + 1 != v103)
    {
      v106 = (_QWORD *)(v102 + 104 * v101);
      v107 = v106[1];
      if ((v107 & 1) != 0)
        v108 = v106[2];
      else
        v108 = (uint64_t)(v106 + 2);
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>(v104 + 2, v108, v107 >> 1);
      v109 = v106[7];
      if ((v109 & 1) != 0)
        v110 = v106[8];
      else
        v110 = (uint64_t)(v106 + 8);
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(v104 + 8, v110, v109 >> 1);
      v113 = v106[11];
      v112 = v106 + 11;
      v111 = v113;
      v114 = *(v112 - 1);
      if ((v114 & 1) != 0)
        v115 = v111;
      else
        v115 = (uint64_t)v112;
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(v104 + 11, v115, v114 >> 1);
    }
    if (*(_BYTE *)(a1 + 29))
    {
      v116 = *(_QWORD *)(*(_QWORD *)a1 + 16);
      v117 = (_QWORD *)(*(_QWORD *)a1 + 24);
      if ((v116 & 1) != 0)
        v117 = (_QWORD *)*v117;
      if (v116 >= 2)
      {
        v120 = v116 >> 1;
        v121 = v14->i32[0];
        for (i = 4 * v120; i; i -= 4)
        {
          *(_BYTE *)(a1 + 20) = 0;
          if (v121 <= 1)
          {
            LODWORD(v123) = 0;
            v121 = -1;
            v14->i32[0] = -1;
          }
          else
          {
            v124 = v121 & 7;
            v121 -= 2;
            v14->i32[0] = v121;
            v125 = (unsigned __int8 *)v9->i64[0];
            if (v124 < 3)
            {
              if (!v124)
              {
                LODWORD(v123) = 0;
                v127 = 6;
                goto LABEL_107;
              }
              v126 = *v125++;
              v123 = (unint64_t)(v126 & ~(-1 << v124)) << (2 - v124);
              v9->i64[0] = (uint64_t)v125;
              if (v124 != 2)
              {
                v127 = 7;
LABEL_107:
                LODWORD(v123) = v123 | (*v125 >> v127);
              }
            }
            else
            {
              LODWORD(v123) = (*v125 >> (v124 - 2)) & 3;
            }
          }
          *(_DWORD *)v117 = v123;
          v117 = (_QWORD *)((char *)v117 + 4);
        }
      }
    }
    if (!*(_BYTE *)(a1 + 30))
      goto LABEL_343;
    v118 = *(unint64_t **)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 64) & 1) != 0)
      operator delete((void *)v118[9]);
    v118[8] = 0;
    *(_BYTE *)(a1 + 20) = 0;
    v119 = *(_DWORD *)(a1 + 16);
    if (v119 < 2)
    {
LABEL_95:
      v14->i32[0] = -1;
      goto LABEL_343;
    }
    v128 = *(_DWORD *)(a1 + 16) & 7;
    v129 = v119 - 2;
    v14->i32[0] = v119 - 2;
    v130 = (uint8x16_t *)v9->i64[0];
    if (v128 >= 3)
    {
      v131 = (v130->u8[0] >> (v128 - 2)) & 3;
      goto LABEL_297;
    }
    if (v128)
    {
      v132 = v130->u8[0];
      v130 = (uint8x16_t *)((char *)v130 + 1);
      v131 = (unint64_t)(v132 & ~(-1 << v128)) << (2 - v128);
      v9->i64[0] = (uint64_t)v130;
      if (v128 == 2)
        goto LABEL_297;
      v133 = 7;
    }
    else
    {
      v131 = 0;
      v133 = 6;
    }
    v131 |= v130->u8[0] >> v133;
LABEL_297:
    if (v131)
    {
      v329 = -96;
      v328 = -80;
      v327 = -64;
      v219 = vdupq_n_s64(0xFFFFFFF8uLL);
      v220 = (int64x2_t)xmmword_208F059E0;
      v221 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
      while (1)
      {
        LODWORD(v131) = 4 * v131;
        *(_BYTE *)(a1 + 20) = 0;
        v222 = v129 - v131;
        if (v129 < v131)
        {
          LODWORD(v223) = 0;
          v14->i32[0] = -1;
          goto LABEL_329;
        }
        v224 = v129 & 7;
        v14->i32[0] = v222;
        if (v224 > v131)
        {
          LODWORD(v223) = (v130->u8[0] >> (v224 - v131)) & ~(-1 << v131);
          goto LABEL_329;
        }
        if (!v224)
          break;
        LODWORD(v131) = v131 - v224;
        v225 = v130->u8[0];
        v130 = (uint8x16_t *)((char *)v130 + 1);
        v223 = (unint64_t)(v225 & ~(-1 << v224)) << v131;
        v9->i64[0] = (uint64_t)v130;
        if ((int)v131 >= 8)
          goto LABEL_309;
LABEL_327:
        if ((int)v131 >= 1)
          LODWORD(v223) = v223 | (v130->u8[0] >> (8 - v131));
LABEL_329:
        v270 = *(unint64_t **)a1;
        v271 = (unint64_t *)(*(_QWORD *)a1 + 64);
        v39 = *v271;
        v32 = (v223 + 1);
        __p.n128_u32[0] = v223 + 1;
        if ((v39 & 1) != 0)
        {
          v272 = (unint64_t *)v270[9];
          v273 = v270[10];
        }
        else
        {
          v272 = v270 + 9;
          v273 = 4;
        }
        v29 = v39 >> 1;
        if (v39 >> 1 == v273)
        {
          v326 = v220;
          absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)v271, &__p);
          v220 = v326;
          *(_BYTE *)(a1 + 20) = 0;
          v274 = *(_DWORD *)(a1 + 16);
          if (v274 < 2)
            goto LABEL_95;
        }
        else
        {
          if (!v272)
            goto LABEL_418;
          *((_DWORD *)v272 + v29) = v32;
          *v271 = v39 + 2;
          *(_BYTE *)(a1 + 20) = 0;
          v274 = *(_DWORD *)(a1 + 16);
          if (v274 < 2)
            goto LABEL_95;
        }
        v275 = v274 & 7;
        v129 = v274 - 2;
        v14->i32[0] = v274 - 2;
        v130 = (uint8x16_t *)v9->i64[0];
        if (v275 >= 3)
        {
          v131 = (v130->u8[0] >> (v275 - 2)) & 3;
        }
        else
        {
          if (!v275)
          {
            v131 = 0;
            v277 = 6;
            goto LABEL_340;
          }
          v276 = v130->u8[0];
          v130 = (uint8x16_t *)((char *)v130 + 1);
          v131 = (unint64_t)(v276 & ~(-1 << v275)) << (2 - v275);
          v9->i64[0] = (uint64_t)v130;
          if (v275 != 2)
          {
            v277 = 7;
LABEL_340:
            v131 |= v130->u8[0] >> v277;
          }
        }
        if (!v131)
          goto LABEL_343;
      }
      v223 = 0;
      if ((int)v131 < 8)
        goto LABEL_327;
LABEL_309:
      v226 = v131;
      v54 = v131 >= 0xFuLL;
      v227 = v131 - 15;
      if (!v54)
        v227 = 0;
      if (v227 < 0x71)
        goto LABEL_323;
      v228 = v226 - 15;
      if (v226 < 0xF)
        v228 = 0;
      if (v9 >= (uint8x16_t *)&v130->i8[((v228 + 7) >> 3) + 1] || v130 >= v14)
      {
        v230 = ((v227 + 7) >> 3) + 1;
        v131 = v226 - 8 * (v230 & 0x7FFFFFF0);
        v231 = &v130->u8[v230 & 0x7FFFFFF0];
        v232 = vdupq_n_s64(v226);
        v233 = vaddq_s64(v232, (int64x2_t)xmmword_208F05970);
        v234.i64[0] = 0xFFFFFFFFLL;
        v234.i64[1] = 0xFFFFFFFFLL;
        v235 = vaddq_s64(v232, (int64x2_t)xmmword_208F05980);
        v236 = vaddq_s64(v232, (int64x2_t)xmmword_208F05990);
        v237 = vaddq_s64(v232, (int64x2_t)xmmword_208F059A0);
        v238 = vaddq_s64(v232, (int64x2_t)xmmword_208F059B0);
        v239 = vaddq_s64(v232, (int64x2_t)xmmword_208F059C0);
        v240 = vaddq_s64(v232, (int64x2_t)xmmword_208F059D0);
        v241 = v220;
        v242 = vaddq_s64(v232, v220);
        v243 = 0uLL;
        v244 = (int8x16_t)v223;
        v245 = v230 & 0x7FFFFFF0;
        v246 = 0uLL;
        v247 = 0uLL;
        v248 = 0uLL;
        v249 = 0uLL;
        v250 = 0uLL;
        v251 = 0uLL;
        do
        {
          v252 = *v130++;
          v253 = vmovl_u8(*(uint8x8_t *)v252.i8);
          v254 = vmovl_high_u8(v252);
          v255 = vmovl_u16(*(uint16x4_t *)v254.i8);
          v256 = vmovl_high_u16(v254);
          v257.i64[0] = v256.u32[2];
          v257.i64[1] = v256.u32[3];
          v258 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v233, v219), v234));
          v259 = vmovl_u16(*(uint16x4_t *)v253.i8);
          v257.i64[0] = v256.u32[0];
          v257.i64[1] = v256.u32[1];
          v260 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v235, v219), v234));
          v257.i64[0] = v259.u32[0];
          v257.i64[1] = v259.u32[1];
          v261 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v242, v219), v234));
          v257.i64[0] = v255.u32[2];
          v257.i64[1] = v255.u32[3];
          v262 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v236, v219), v234));
          v263 = vmovl_high_u16(v253);
          v257.i64[0] = v259.u32[2];
          v257.i64[1] = v259.u32[3];
          v264 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v240, v219), v234));
          v257.i64[0] = v263.u32[0];
          v257.i64[1] = v263.u32[1];
          v265 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v239, v219), v234));
          v257.i64[0] = v255.u32[0];
          v257.i64[1] = v255.u32[1];
          v266 = (int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v237, v219), v234));
          v257.i64[0] = v263.u32[2];
          v257.i64[1] = v263.u32[3];
          v247 = vorrq_s8((int8x16_t)vshlq_u64(v257, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v238, v219), v234)), v247);
          v248 = vorrq_s8(v266, v248);
          v246 = vorrq_s8(v265, v246);
          v243 = vorrq_s8(v264, v243);
          v249 = vorrq_s8(v262, v249);
          v244 = vorrq_s8(v261, v244);
          v250 = vorrq_s8(v260, v250);
          v251 = vorrq_s8(v258, v251);
          v240 = vaddq_s64(v240, v221);
          v242 = vaddq_s64(v242, v221);
          v239 = vaddq_s64(v239, v221);
          v238 = vaddq_s64(v238, v221);
          v237 = vaddq_s64(v237, v221);
          v236 = vaddq_s64(v236, v221);
          v235 = vaddq_s64(v235, v221);
          v233 = vaddq_s64(v233, v221);
          v245 -= 16;
        }
        while (v245);
        v9->i64[0] = (uint64_t)v130;
        v267 = vorrq_s8(vorrq_s8(vorrq_s8(v244, v248), vorrq_s8(v246, v250)), vorrq_s8(vorrq_s8(v243, v249), vorrq_s8(v247, v251)));
        v223 = (unint64_t)vorr_s8(*(int8x8_t *)v267.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL));
        v220 = v241;
        if (v230 == (v230 & 0x7FFFFFF0))
          goto LABEL_326;
      }
      else
      {
LABEL_323:
        v131 = v226;
        v231 = (unsigned __int8 *)v130;
      }
      v268 = v131;
      do
      {
        v269 = *v231++;
        LODWORD(v131) = v268 - 8;
        v223 |= (unint64_t)v269 << (v268 - 8);
        v9->i64[0] = (uint64_t)v231;
        v96 = v268 > 0xF;
        v268 -= 8;
      }
      while (v96);
LABEL_326:
      v130 = (uint8x16_t *)v231;
      goto LABEL_327;
    }
LABEL_343:
    v39 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 31))
    {
      v278 = *(_QWORD *)(v39 + 88);
      v279 = (_QWORD *)(v39 + 96);
      if ((v278 & 1) != 0)
        v279 = (_QWORD *)*v279;
      if (v278 >= 2)
      {
        v284 = 4 * (v278 >> 1);
        do
        {
          *(_BYTE *)(a1 + 20) = 0;
          v286 = *(_DWORD *)(a1 + 16);
          if (v286 <= 7)
          {
            v285 = 0;
            v14->i32[0] = -1;
          }
          else
          {
            v14->i32[0] = v286 - 8;
            v287 = v9->i64[0];
            v285 = *(unsigned __int8 *)v9->i64[0];
            v288 = v286 & 7;
            ++v9->i64[0];
            if (v288)
              v285 = (*(unsigned __int8 *)(v287 + 1) >> v288) | (v285 << (8 - v288)) & 0xFE;
          }
          *(_DWORD *)v279 = v285;
          v279 = (_QWORD *)((char *)v279 + 4);
          v284 -= 4;
        }
        while (v284);
      }
    }
    v29 = *(_QWORD *)(a1 + 32);
    v280 = *(_QWORD *)(v29 + 64);
    if (v280 <= 1)
    {
      if (*(_BYTE *)(v39 + 120))
        *(_BYTE *)(v39 + 120) = 0;
      return a1;
    }
    v32 = *(int *)(v39 + 8);
    if (v32 < v280 >> 1)
      break;
LABEL_418:
    while (1)
    {
      __break(1u);
LABEL_419:
      LODWORD(v136) = 0;
LABEL_420:
      LODWORD(v29) = 8 - v29;
      LODWORD(v136) = v136 | (*(unsigned __int8 *)v39 >> v29);
LABEL_125:
      v39 = 0;
      v137 = 0;
      v138 = 0;
      v139 = 0;
      v140 = 0;
      v141 = 0;
      v32 = *(_QWORD *)v32;
      *(_DWORD *)(v32 + 4) = v136 + 1;
      __p = 0uLL;
      v332 = 0;
      while (1)
      {
        if (v141 >= (unint64_t)v140)
        {
          v142 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)v39 >> 3);
          v39 = v142 + 1;
          if ((unint64_t)(v142 + 1) > 0x276276276276276)
            goto LABEL_422;
          v32 = 0x4EC4EC4EC4EC4EC5 * ((v140 - v137) >> 3);
          if (0x9D89D89D89D89D8ALL * ((v140 - v137) >> 3) > v39)
            v39 = 0x9D89D89D89D89D8ALL * ((v140 - v137) >> 3);
          if (v32 >= 0x13B13B13B13B13BLL)
            v39 = 0x276276276276276;
          if (!v39)
            goto LABEL_418;
          if (v39 > 0x276276276276276)
            goto LABEL_423;
          v143 = 104 * v39;
          v144 = (char *)operator new(104 * v39);
          v145 = (unint64_t)&v144[104 * v142];
          *(_OWORD *)v145 = 0u;
          *(_OWORD *)(v145 + 16) = 0u;
          v140 = &v144[v143];
          *(_OWORD *)(v145 + 32) = 0u;
          *(_OWORD *)(v145 + 48) = 0u;
          *(_OWORD *)(v145 + 64) = 0u;
          *(_OWORD *)(v145 + 80) = 0u;
          *(_QWORD *)(v145 + 96) = 0;
          v146 = v145 + 104;
          if ((_BYTE *)v141 == v137)
          {
            __p.n128_u64[0] = v145;
            v332 = v140;
LABEL_151:
            if (v137)
              operator delete(v137);
            v137 = (_BYTE *)v145;
            v141 = v146;
            goto LABEL_154;
          }
          v147 = 0;
          do
          {
            v148 = v141 + v147;
            v149 = v145 + v147;
            *(_QWORD *)(v149 - 104) = *(_QWORD *)(v141 + v147 - 104);
            *(_QWORD *)(v149 - 96) = *(_QWORD *)(v141 + v147 - 96);
            v150 = *(_OWORD *)(v141 + v147 - 88);
            v151 = *(_OWORD *)(v141 + v147 - 72);
            *(_QWORD *)(v149 - 56) = *(_QWORD *)(v141 + v147 - 56);
            *(_OWORD *)(v149 - 72) = v151;
            *(_OWORD *)(v149 - 88) = v150;
            v152 = *(_QWORD *)(v141 + v147 - 48);
            *(_QWORD *)(v148 - 96) = 0;
            *(_QWORD *)(v149 - 48) = v152;
            *(_OWORD *)(v149 - 40) = *(_OWORD *)(v141 + v147 - 40);
            *(_QWORD *)(v148 - 48) = 0;
            v29 = *(_QWORD *)(v141 + v147 - 24);
            *(_QWORD *)(v149 - 24) = v29;
            *(_OWORD *)(v149 - 16) = *(_OWORD *)(v141 + v147 - 16);
            *(_QWORD *)(v148 - 24) = 0;
            v147 -= 104;
            v32 = v141 + v147;
          }
          while ((_BYTE *)(v141 + v147) != v137);
          v145 += v147;
          __p.n128_u64[0] = v145;
          __p.n128_u64[1] = v146;
          v332 = v140;
          while (1)
          {
            if ((*(_BYTE *)(v141 - 24) & 1) != 0)
            {
              operator delete(*(void **)(v141 - 16));
              if ((*(_BYTE *)(v141 - 48) & 1) == 0)
              {
LABEL_145:
                v39 = *(unsigned __int8 *)(v141 - 96);
                if ((v39 & 1) != 0)
                  goto LABEL_149;
                goto LABEL_142;
              }
            }
            else if ((*(_BYTE *)(v141 - 48) & 1) == 0)
            {
              goto LABEL_145;
            }
            operator delete(*(void **)(v141 - 40));
            v39 = *(unsigned __int8 *)(v141 - 96);
            if ((v39 & 1) != 0)
LABEL_149:
              operator delete(*(void **)(v141 - 88));
LABEL_142:
            v141 -= 104;
            if ((_BYTE *)v141 == v137)
              goto LABEL_151;
          }
        }
        if (!v141)
          goto LABEL_418;
        *(_QWORD *)(v141 + 96) = 0;
        *(_OWORD *)(v141 + 64) = 0u;
        *(_OWORD *)(v141 + 80) = 0u;
        *(_OWORD *)(v141 + 32) = 0u;
        *(_OWORD *)(v141 + 48) = 0u;
        *(_OWORD *)v141 = 0u;
        *(_OWORD *)(v141 + 16) = 0u;
        v141 += 104;
LABEL_154:
        __p.n128_u64[1] = v141;
        if (v137 == (_BYTE *)v141)
          goto LABEL_418;
        *(_DWORD *)(v141 - 104) = v139;
        *(_DWORD *)(v141 - 100) = v138;
        *(_BYTE *)(a1 + 20) = 0;
        v153 = *(_DWORD *)(a1 + 16);
        if (v153 <= 1)
        {
          *(_DWORD *)(a1 + 16) = -1;
          *(_BYTE *)(a1 + 20) = 1;
          goto LABEL_171;
        }
        v154 = *(_DWORD *)(a1 + 16) & 7;
        v14->i32[0] = v153 - 2;
        v32 = v9->i64[0];
        if ((v153 & 7u) >= 3)
        {
          v32 = *(unsigned __int8 *)v32;
          LODWORD(v155) = (v32 >> (v154 - 2)) & 3;
          goto LABEL_163;
        }
        if ((v153 & 7) != 0)
        {
          v156 = *(unsigned __int8 *)v32++;
          v29 = v156 & ~(-1 << v154);
          v155 = v29 << (2 - v154);
          v9->i64[0] = v32;
          if (v154 == 2)
            goto LABEL_163;
          v157 = 7;
        }
        else
        {
          LODWORD(v155) = 0;
          v157 = 6;
        }
        v32 = *(unsigned __int8 *)v32 >> v157;
        LODWORD(v155) = v155 | v32;
LABEL_163:
        if ((_DWORD)v155 == 1)
          break;
        if ((_DWORD)v155 == 2)
        {
          if (v139 > 2)
            goto LABEL_169;
          v138 = 0;
          ++v139;
        }
        else if ((_DWORD)v155 == 3)
        {
          goto LABEL_171;
        }
LABEL_127:
        *(_BYTE *)(a1 + 20) = 1;
        v39 = v141 - (_QWORD)v137;
        if (v141 - (_QWORD)v137 == 6656)
          goto LABEL_169;
      }
      if (v138 <= 6)
      {
        ++v138;
        goto LABEL_127;
      }
LABEL_169:
      v14->i32[0] = -1;
LABEL_171:
      std::vector<webrtc::FrameDependencyTemplate>::__move_assign((void **)(*(_QWORD *)(*(_QWORD *)a1 + 136) + 104), &__p);
      v158 = __p.n128_u64[0];
      if (__p.n128_u64[0])
      {
        v159 = __p.n128_u64[1];
        v160 = (void *)__p.n128_u64[0];
        if (__p.n128_u64[1] == __p.n128_u64[0])
        {
LABEL_183:
          __p.n128_u64[1] = v158;
          operator delete(v160);
          goto LABEL_184;
        }
        while (1)
        {
          if ((*(_BYTE *)(v159 - 24) & 1) != 0)
          {
            operator delete(*(void **)(v159 - 16));
            if ((*(_BYTE *)(v159 - 48) & 1) == 0)
            {
LABEL_177:
              if ((*(_BYTE *)(v159 - 96) & 1) != 0)
                goto LABEL_181;
              goto LABEL_174;
            }
          }
          else if ((*(_BYTE *)(v159 - 48) & 1) == 0)
          {
            goto LABEL_177;
          }
          operator delete(*(void **)(v159 - 40));
          if ((*(_BYTE *)(v159 - 96) & 1) != 0)
LABEL_181:
            operator delete(*(void **)(v159 - 88));
LABEL_174:
          v159 -= 104;
          if (v159 == v158)
          {
            v160 = (void *)__p.n128_u64[0];
            goto LABEL_183;
          }
        }
      }
LABEL_184:
      v39 = *(_QWORD *)a1;
      v161 = *(_QWORD *)(*(_QWORD *)a1 + 136);
      v162 = *(_QWORD *)(v161 + 104);
      v163 = *(_QWORD *)(v161 + 112);
      if (v162 != v163)
      {
        v164 = *(unsigned int *)(v161 + 4);
        do
        {
          if ((v164 & 0x80000000) != 0)
            goto LABEL_418;
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<webrtc::DecodeTargetIndication>>>((uint64_t *)(v162 + 8), v164);
          v164 = *(unsigned int *)(v161 + 4);
          if ((int)v164 >= 1)
          {
            v165 = *(_QWORD *)(v162 + 8);
            v39 = v165 >> 1;
            LODWORD(v32) = v14->i32[0];
            if ((v165 & 1) == 0)
            {
              v166 = 0;
              while (1)
              {
                *(_BYTE *)(a1 + 20) = 0;
                v29 = (v32 - 2);
                if ((int)v32 >= 2)
                {
                  v167 = v32 & 7;
                  v14->i32[0] = v29;
                  v168 = (unsigned __int8 *)v9->i64[0];
                  v169 = (v32 & 7) - 2;
                  if (v167 <= 2)
                  {
                    if (!v167)
                    {
                      v32 = 0;
                      v171 = 6;
                      goto LABEL_199;
                    }
                    v170 = *v168++;
                    v32 = (unint64_t)(v170 & ~(-1 << v167)) << (2 - v167);
                    v9->i64[0] = (uint64_t)v168;
                    if (v167 != 2)
                    {
                      v171 = 7;
LABEL_199:
                      v32 |= *v168 >> v171;
                    }
                  }
                  else
                  {
                    v32 = (*v168 >> v169) & 3;
                  }
                }
                else
                {
                  v32 = 0;
                  v29 = 0xFFFFFFFFLL;
                  v14->i32[0] = -1;
                }
                if (v39 == v166)
                  goto LABEL_418;
                *(_DWORD *)(v162 + 4 * v166++ + 16) = v32;
                v32 = v29;
                if (v164 == v166)
                  goto LABEL_186;
              }
            }
            for (j = 0; v164 != j; ++j)
            {
              *(_BYTE *)(a1 + 20) = 0;
              if ((int)v32 > 1)
              {
                v173 = v32 & 7;
                v32 = (v32 - 2);
                v14->i32[0] = v32;
                v174 = (unsigned __int8 *)v9->i64[0];
                if (v173 < 3)
                {
                  if (!v173)
                  {
                    LODWORD(v29) = 0;
                    v176 = 6;
                    goto LABEL_212;
                  }
                  v175 = *v174++;
                  v29 = (unint64_t)(v175 & ~(-1 << v173)) << (2 - v173);
                  v9->i64[0] = (uint64_t)v174;
                  if (v173 != 2)
                  {
                    v176 = 7;
LABEL_212:
                    LODWORD(v29) = v29 | (*v174 >> v176);
                  }
                }
                else
                {
                  LODWORD(v29) = (*v174 >> (v173 - 2)) & 3;
                }
              }
              else
              {
                LODWORD(v29) = 0;
                v32 = 0xFFFFFFFFLL;
                v14->i32[0] = -1;
              }
              if (v39 == j)
                goto LABEL_418;
              *(_DWORD *)(*(_QWORD *)(v162 + 16) + 4 * j) = v29;
            }
          }
LABEL_186:
          v162 += 104;
        }
        while (v162 != v163);
        v161 = *(_QWORD *)(*(_QWORD *)a1 + 136);
        v177 = *(_QWORD **)(v161 + 104);
        v178 = *(_QWORD **)(v161 + 112);
        if (v177 != v178)
        {
          v179 = v14->i32[0];
          while (1)
          {
            *(_BYTE *)(a1 + 20) = 0;
            v180 = __OFSUB__(v179--, 1);
            *(_DWORD *)(a1 + 16) = v179;
            if (v179 < 0 == v180)
            {
              v181 = (char *)v9->i64[0];
              if ((v179 & 7) != 0)
              {
                if (((*v181 >> (v179 & 7)) & 1) != 0)
                  break;
                goto LABEL_218;
              }
              v9->i64[0] = (uint64_t)(v181 + 1);
              v182 = *v181++;
              if ((v182 & 1) != 0)
                break;
            }
LABEL_218:
            v177 += 13;
            if (v177 == v178)
            {
              v161 = *(_QWORD *)(*(_QWORD *)a1 + 136);
              goto LABEL_249;
            }
          }
          v183 = v177 + 7;
          while (1)
          {
            *(_BYTE *)(a1 + 20) = 0;
            if (v179 <= 3)
            {
              v14->i32[0] = -1;
              v39 = 1;
              __p.n128_u32[0] = 1;
              v32 = *v183;
              if ((*v183 & 1) != 0)
                goto LABEL_228;
              goto LABEL_235;
            }
            v186 = v179 & 7;
            v14->i32[0] = v179 - 4;
            if (v186 >= 5)
            {
              v39 = ((*v181 >> (v186 - 4)) & 0xFu) + 1;
              __p.n128_u32[0] = ((*v181 >> (v186 - 4)) & 0xF) + 1;
              v32 = *v183;
              if ((*v183 & 1) != 0)
                goto LABEL_228;
              goto LABEL_235;
            }
            if ((v179 & 7) != 0)
            {
              v187 = 4 - v186;
              v188 = *v181++;
              v189 = (unint64_t)(v188 & ~(-1 << v186)) << (4 - v186);
              v9->i64[0] = (uint64_t)v181;
              if (v186 == 4)
              {
                v39 = (v189 + 1);
                __p.n128_u32[0] = v39;
                v32 = *v183;
                if ((*v183 & 1) != 0)
                  goto LABEL_228;
                goto LABEL_235;
              }
            }
            else
            {
              LODWORD(v189) = 0;
              v187 = 4;
            }
            v39 = (v189 | (*v181 >> (8 - v187))) + 1;
            __p.n128_u32[0] = v39;
            v32 = *v183;
            if ((*v183 & 1) != 0)
            {
LABEL_228:
              v184 = (_QWORD *)v177[8];
              v185 = v177[9];
              goto LABEL_236;
            }
LABEL_235:
            v184 = v177 + 8;
            v185 = 4;
LABEL_236:
            v29 = v32 >> 1;
            if (v32 >> 1 == v185)
            {
              absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)(v177 + 7), &__p);
              *(_BYTE *)(a1 + 20) = 0;
              v192 = *(_DWORD *)(a1 + 16);
              v180 = __OFSUB__(v192, 1);
              v179 = v192 - 1;
              *(_DWORD *)(a1 + 16) = v179;
              if (v179 < 0 != v180)
                goto LABEL_218;
            }
            else
            {
              if (!v184)
                goto LABEL_418;
              *((_DWORD *)v184 + v29) = v39;
              *v183 = v32 + 2;
              *(_BYTE *)(a1 + 20) = 0;
              v190 = *(_DWORD *)(a1 + 16);
              v180 = __OFSUB__(v190, 1);
              v179 = v190 - 1;
              *(_DWORD *)(a1 + 16) = v179;
              if (v179 < 0 != v180)
                goto LABEL_218;
            }
            v191 = (_BYTE *)v9->i64[0];
            if ((v179 & 7) != 0)
            {
              v181 = (char *)v9->i64[0];
              if (((*v191 >> (v179 & 7)) & 1) == 0)
                goto LABEL_218;
            }
            else
            {
              v181 = v191 + 1;
              v9->i64[0] = (uint64_t)(v191 + 1);
              if ((*v191 & 1) == 0)
                goto LABEL_218;
            }
          }
        }
      }
LABEL_249:
      NonSymmetric = webrtc::BitstreamReader::ReadNonSymmetric(v9, *(_DWORD *)(v161 + 4) + 1);
      *(_DWORD *)(v161 + 8) = NonSymmetric;
      if (NonSymmetric)
      {
        if (*(int *)(v161 + 4) >= 1)
        {
          v194 = 0;
          do
          {
            while (1)
            {
              v195 = webrtc::BitstreamReader::ReadNonSymmetric(v9, *(_DWORD *)(v161 + 8));
              v39 = *(_QWORD *)(v161 + 16);
              if ((v39 & 1) != 0)
              {
                v32 = *(_QWORD *)(v161 + 24);
                v196 = *(_QWORD *)(v161 + 32);
              }
              else
              {
                v32 = v161 + 24;
                v196 = 10;
              }
              v29 = v39 >> 1;
              if (v39 >> 1 != v196)
                break;
              absl::inlined_vector_internal::Storage<int,10ul,std::allocator<int>>::EmplaceBackSlow<int>(v161 + 16, v195);
              if (++v194 >= *(_DWORD *)(v161 + 4))
                goto LABEL_260;
            }
            if (!v32)
              goto LABEL_418;
            *(_DWORD *)(v32 + 4 * v29) = v195;
            *(_QWORD *)(v161 + 16) = v39 + 2;
            ++v194;
          }
          while (v194 < *(_DWORD *)(v161 + 4));
        }
LABEL_260:
        v197 = *(unint64_t **)(v161 + 104);
        v330 = *(unint64_t **)(v161 + 112);
        if (v197 != v330)
        {
          v198 = *(_DWORD *)(v161 + 8);
          if (v198 >= 1)
          {
            while (v198 < 1)
            {
LABEL_263:
              v197 += 13;
              if (v197 == v330)
                goto LABEL_285;
            }
            v199 = 0;
            v200 = v197 + 10;
            while (1)
            {
              *(_BYTE *)(a1 + 20) = 0;
              v201 = *(_DWORD *)(a1 + 16);
              if (v201 <= 3)
              {
                v39 = 0;
                v14->i32[0] = -1;
                __p.n128_u32[0] = 0;
                v32 = *v200;
                if ((*v200 & 1) == 0)
                  goto LABEL_275;
                goto LABEL_268;
              }
              v203 = *(_DWORD *)(a1 + 16) & 7;
              v14->i32[0] = v201 - 4;
              v204 = (unsigned __int8 *)v9->i64[0];
              if ((v201 & 7u) >= 5)
              {
                v39 = (*v204 >> (v203 - 4)) & 0xF;
                __p.n128_u32[0] = (*v204 >> (v203 - 4)) & 0xF;
                v32 = *v200;
                if ((*v200 & 1) == 0)
                  goto LABEL_275;
                goto LABEL_268;
              }
              if ((v201 & 7) != 0)
              {
                v205 = 4 - v203;
                v206 = *v204++;
                v39 = (unint64_t)(v206 & ~(-1 << v203)) << (4 - v203);
                v9->i64[0] = (uint64_t)v204;
                if (v203 == 4)
                {
                  __p.n128_u32[0] = v39;
                  v32 = *v200;
                  if ((*v200 & 1) == 0)
                    goto LABEL_275;
                  goto LABEL_268;
                }
              }
              else
              {
                v39 = 0;
                v205 = 4;
              }
              v39 |= *v204 >> (8 - v205);
              __p.n128_u32[0] = v39;
              v32 = *v200;
              if ((*v200 & 1) == 0)
              {
LABEL_275:
                v202 = v197 + 11;
                v29 = 4;
                goto LABEL_276;
              }
LABEL_268:
              v202 = (unint64_t *)v197[11];
              v29 = v197[12];
LABEL_276:
              if (v32 >> 1 == v29)
              {
                absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)(v197 + 10), &__p);
                ++v199;
                v198 = *(_DWORD *)(v161 + 8);
                if (v199 >= v198)
                  goto LABEL_263;
              }
              else
              {
                if (!v202)
                  goto LABEL_418;
                *((_DWORD *)v202 + (v32 >> 1)) = v39;
                *v200 = v32 + 2;
                ++v199;
                v198 = *(_DWORD *)(v161 + 8);
                if (v199 >= v198)
                  goto LABEL_263;
              }
            }
          }
        }
      }
LABEL_285:
      *(_BYTE *)(a1 + 20) = 0;
      v207 = *(_DWORD *)(a1 + 16);
      v208 = v207 - 1;
      *(_DWORD *)(a1 + 16) = v207 - 1;
      if (v207 < 1)
        break;
      v209 = (_BYTE *)v9->i64[0];
      v210 = v208 & 7;
      if (v210)
      {
        if (((*v209 >> v210) & 1) == 0)
          break;
      }
      else
      {
        v9->i64[0] = (uint64_t)(v209 + 1);
        if ((*v209 & 1) == 0)
          break;
      }
      v212 = *(_QWORD *)(*(_QWORD *)a1 + 136);
      v32 = *(_QWORD *)(v212 + 104);
      v39 = *(_QWORD *)(v212 + 112);
      if (v32 != v39)
      {
        v213 = *(_DWORD *)(v39 - 104);
        v214 = v213 + 1;
        v216 = (unint64_t *)(v212 + 64);
        v215 = *(_QWORD *)(v212 + 64);
        v217 = v212 + 72;
        if ((v215 & 1) != 0)
        {
          v217 = *(_QWORD *)(v212 + 72);
          v218 = *(_QWORD *)(v212 + 80);
        }
        else
        {
          v218 = 4;
        }
        if (v218 >= v214)
          goto LABEL_388;
        v290 = 2 * v218;
        if (v290 <= v214)
          v291 = v214;
        else
          v291 = v290;
        if (v291 >> 61)
LABEL_423:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v292 = (char *)operator new(8 * v291);
        if (v215 >= 2)
        {
          v293 = 0;
          v294 = v215 >> 1;
          if (v215 < 8 || (unint64_t)&v292[-v217] < 0x20)
          {
            v295 = (uint64_t *)v217;
          }
          else
          {
            v293 = v294 & 0x7FFFFFFFFFFFFFFCLL;
            v295 = (uint64_t *)(v217 + 8 * (v294 & 0x7FFFFFFFFFFFFFFCLL));
            v296 = v292 + 16;
            v297 = (__int128 *)(v217 + 16);
            v298 = v294 & 0x7FFFFFFFFFFFFFFCLL;
            do
            {
              v299 = *v297;
              *(v296 - 1) = *(v297 - 1);
              *v296 = v299;
              v296 += 2;
              v297 += 2;
              v298 -= 4;
            }
            while (v298);
            if (v294 == v293)
              goto LABEL_385;
          }
          v300 = v294 - v293;
          v301 = &v292[8 * v293];
          do
          {
            v302 = *v295++;
            *(_QWORD *)v301 = v302;
            v301 += 8;
            --v300;
          }
          while (v300);
        }
LABEL_385:
        if ((v215 & 1) != 0)
        {
          v303 = v292;
          operator delete(*(void **)(v212 + 72));
          v292 = v303;
          v215 = *v216;
        }
        *(_QWORD *)(v212 + 72) = v292;
        *(_QWORD *)(v212 + 80) = v291;
        *(_QWORD *)(v212 + 64) = v215 | 1;
LABEL_388:
        if ((v213 & 0x80000000) == 0)
        {
          do
          {
            while (1)
            {
              LOWORD(v304) = 0;
              *(_BYTE *)(a1 + 20) = 0;
              v305 = *(_DWORD *)(a1 + 16);
              if (v305 < 16)
                goto LABEL_398;
              v14->i32[0] = v305 - 16;
              v306 = (unsigned __int8 *)v9->i64[0];
              v307 = v305 & 7;
              if ((v305 & 7) != 0)
              {
                v308 = 16 - v307;
                v309 = *v306++;
                v310 = (unint64_t)(v309 & ~(-1 << v307)) << (16 - v307);
                v9->i64[0] = (uint64_t)v306;
              }
              else
              {
                v310 = 0;
                v308 = 16;
              }
              v311 = v308 - 8;
              v312 = v306 + 1;
              v304 = ((unint64_t)*v306 << (v308 - 8)) | v310;
              v9->i64[0] = (uint64_t)(v306 + 1);
              if (v308 >= 0x10)
              {
                v311 = v308 - 16;
                v304 |= (unint64_t)v306[1] << (v308 - 16);
                v313 = v306 + 2;
                v9->i64[0] = (uint64_t)(v306 + 2);
                ++v306;
                v312 = v313;
              }
              if (v311)
                LODWORD(v304) = v304 | (*v312 >> (8 - v311));
              *(_BYTE *)(a1 + 20) = 0;
              if (v305 > 31)
              {
                v14->i32[0] = v305 - 32;
                if ((v305 & 7) != 0)
                {
                  v319 = 16 - v307;
                  v320 = (unint64_t)(*v312 & ~(-1 << v307)) << (16 - v307);
                  v312 = v306 + 2;
                  v9->i64[0] = (uint64_t)(v306 + 2);
                }
                else
                {
                  v320 = 0;
                  v319 = 16;
                }
                v321 = v319 - 8;
                v322 = v312 + 1;
                v32 = ((unint64_t)*v312 << (v319 - 8)) | v320;
                v9->i64[0] = (uint64_t)(v312 + 1);
                if (v319 >= 0x10)
                {
                  v321 = v319 - 16;
                  v32 |= (unint64_t)v312[1] << (v319 - 16);
                  v322 = v312 + 2;
                  v9->i64[0] = (uint64_t)(v312 + 2);
                }
                if (v321)
                  v32 |= *v322 >> (8 - v321);
              }
              else
              {
LABEL_398:
                v32 = 0;
                v14->i32[0] = -1;
              }
              v314 = *v216;
              if ((*v216 & 1) != 0)
              {
                v29 = *(_QWORD *)(v212 + 72);
                v315 = *(_QWORD *)(v212 + 80);
              }
              else
              {
                v29 = v212 + 72;
                v315 = 4;
              }
              v316 = (unsigned __int16)v304 + 1;
              v317 = (unsigned __int16)v32 + 1;
              v39 = v314 >> 1;
              if (v314 >> 1 != v315)
                break;
              absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::EmplaceBackSlow<int,int>(v212 + 64, v316, v317);
              if (!--v214)
                goto LABEL_414;
            }
            if (!v29)
              goto LABEL_418;
            v318 = (int *)(v29 + 8 * v39);
            *v318 = v316;
            v318[1] = v317;
            *v216 = v314 + 2;
            --v214;
          }
          while (v214);
        }
        break;
      }
    }
LABEL_414:
    v323 = *(unint64_t **)a1;
    v324 = -1 << *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 136) + 4);
    if (!*(_BYTE *)(*(_QWORD *)a1 + 128))
      *((_BYTE *)v323 + 128) = 1;
    *((_DWORD *)v323 + 31) = ~(_DWORD)v324;
    v10 = v329;
    v15 = (_DWORD *)v328;
    a4 = v327;
    v33 = *(_QWORD *)(v329 + 136);
    if (v33)
      goto LABEL_38;
LABEL_23:
    *(_QWORD *)(a1 + 32) = a4;
    if (!a4)
      goto LABEL_96;
    if (*(_BYTE *)(a1 + 28))
      goto LABEL_39;
  }
  v281 = (_QWORD *)(v29 + 72);
  if ((v280 & 1) != 0)
    v281 = (_QWORD *)*v281;
  v282 = v281[v32];
  if (!*(_BYTE *)(v39 + 120))
    *(_BYTE *)(v39 + 120) = 1;
  *(_QWORD *)(v39 + 112) = v282;
  return a1;
}

void absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<webrtc::DecodeTargetIndication>>>(uint64_t *a1, unint64_t a2)
{
  void **v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  int v22;

  v4 = (void **)(a1 + 1);
  v5 = *a1;
  v6 = *a1 & 1;
  if ((*a1 & 1) != 0)
  {
    v8 = (_QWORD *)a1[1];
    v7 = a1[2];
    v9 = v5 >> 1;
    v10 = a2 - (v5 >> 1);
    if (a2 <= v5 >> 1)
      goto LABEL_25;
  }
  else
  {
    v7 = 10;
    v8 = a1 + 1;
    v9 = v5 >> 1;
    v10 = a2 - (v5 >> 1);
    if (a2 <= v5 >> 1)
      goto LABEL_25;
  }
  if (v7 >= a2)
  {
    if (v8)
    {
      bzero((char *)v8 + 4 * v9, 4 * v10);
      goto LABEL_25;
    }
    __break(1u);
LABEL_27:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v11 = 2 * v7;
  if (v11 <= a2)
    v12 = a2;
  else
    v12 = v11;
  if (v12 >> 62)
    goto LABEL_27;
  v13 = (char *)operator new(4 * v12);
  bzero(&v13[4 * v9], 4 * v10);
  if (v5 >= 2)
  {
    v14 = 0;
    if (v5 < 0x10 || (unint64_t)(v13 - (char *)v8) < 0x20)
    {
      v15 = (int *)v8;
    }
    else
    {
      v14 = v9 & 0x7FFFFFFFFFFFFFF8;
      v15 = (int *)v8 + (v9 & 0x7FFFFFFFFFFFFFF8);
      v16 = v13 + 16;
      v17 = (__int128 *)(v8 + 2);
      v18 = v9 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v19 = *v17;
        *(v16 - 1) = *(v17 - 1);
        *v16 = v19;
        v16 += 2;
        v17 += 2;
        v18 -= 8;
      }
      while (v18);
      if (v9 == v14)
        goto LABEL_22;
    }
    v20 = v9 - v14;
    v21 = &v13[4 * v14];
    do
    {
      v22 = *v15++;
      *(_DWORD *)v21 = v22;
      v21 += 4;
      --v20;
    }
    while (v20);
  }
LABEL_22:
  if (v6)
    operator delete(*v4);
  a1[1] = (uint64_t)v13;
  a1[2] = v12;
  v6 = 1;
LABEL_25:
  *a1 = v6 | (2 * a2);
}

void absl::inlined_vector_internal::Storage<int,10ul,std::allocator<int>>::EmplaceBackSlow<int>(uint64_t a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  char *v18;
  int v19;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 61) & 3) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 20;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(4 * v6);
  v10 = v9;
  *(_DWORD *)&v9[4 * (v4 >> 1)] = a2;
  if (v4 >= 2)
  {
    v11 = 0;
    if (v4 < 0x10 || (unint64_t)&v9[-v5] < 0x20)
    {
      v12 = (int *)v5;
    }
    else
    {
      v11 = v8 & 0x7FFFFFFFFFFFFFF8;
      v12 = (int *)(v5 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8));
      v13 = v9 + 16;
      v14 = (__int128 *)(v5 + 16);
      v15 = v8 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v16 = *v14;
        *(v13 - 1) = *(v14 - 1);
        *v13 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 8;
      }
      while (v15);
      if (v8 == v11)
        goto LABEL_15;
    }
    v17 = v8 - v11;
    v18 = &v9[4 * v11];
    do
    {
      v19 = *v12++;
      *(_DWORD *)v18 = v19;
      v18 += 4;
      --v17;
    }
    while (v17);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
}

void absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::EmplaceBackSlow<int,int>(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;

  v7 = a1 + 8;
  v6 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 16);
    if (((v9 >> 60) & 7) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v7 = *(_QWORD *)(a1 + 8);
    v8 = 2 * v9;
  }
  else
  {
    v8 = 8;
  }
  v10 = v6 >> 1;
  v11 = (char *)operator new(8 * v8);
  v12 = v11;
  v13 = &v11[8 * (v6 >> 1)];
  *(_DWORD *)v13 = a2;
  *((_DWORD *)v13 + 1) = a3;
  if (v6 >= 2)
  {
    v14 = 0;
    if (v6 < 8 || (unint64_t)&v11[-v7] < 0x20)
    {
      v15 = (uint64_t *)v7;
    }
    else
    {
      v14 = v10 & 0x7FFFFFFFFFFFFFFCLL;
      v15 = (uint64_t *)(v7 + 8 * (v10 & 0x7FFFFFFFFFFFFFFCLL));
      v16 = v11 + 16;
      v17 = (__int128 *)(v7 + 16);
      v18 = v10 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        v19 = *v17;
        *(v16 - 1) = *(v17 - 1);
        *v16 = v19;
        v16 += 2;
        v17 += 2;
        v18 -= 4;
      }
      while (v18);
      if (v10 == v14)
        goto LABEL_15;
    }
    v20 = v10 - v14;
    v21 = &v11[8 * v14];
    do
    {
      v22 = *v15++;
      *(_QWORD *)v21 = v22;
      v21 += 8;
      --v20;
    }
    while (v20);
  }
LABEL_15:
  if ((v6 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v6 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = (v6 | 1) + 2;
}

_QWORD *webrtc::RtpDependencyDescriptorWriter::FindBestTemplate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;

  v1 = this;
  v2 = this[2];
  v4 = *(_QWORD *)(v2 + 104);
  v3 = *(_DWORD **)(v2 + 112);
  if ((_DWORD *)v4 != v3)
  {
    v5 = this[1];
    while (*(_DWORD *)(v5 + 8) != *(_DWORD *)v4 || *(_DWORD *)(v5 + 12) != *(_DWORD *)(v4 + 4))
    {
      v4 += 104;
      if ((_DWORD *)v4 == v3)
        goto LABEL_17;
    }
  }
  if ((_DWORD *)v4 == v3)
  {
LABEL_17:
    *(_BYTE *)this = 1;
  }
  else
  {
    v6 = this[1];
    v7 = (_DWORD *)v4;
    while (*(_DWORD *)(v6 + 8) == *v7 && *(_DWORD *)(v6 + 12) == v7[1])
    {
      v7 += 26;
      if (v7 == v3)
      {
        v7 = v3;
        break;
      }
    }
    this = (_QWORD *)webrtc::RtpDependencyDescriptorWriter::CalculateMatch(this, (_QWORD *)v4);
    v1[8] = this;
    v1[9] = v8;
    v9 = (_QWORD *)(v4 + 104);
    if (v9 != (_QWORD *)v7)
    {
      v10 = v9;
      do
      {
        this = (_QWORD *)webrtc::RtpDependencyDescriptorWriter::CalculateMatch(v1, v9);
        if (*((_DWORD *)v1 + 19) > SHIDWORD(v11))
        {
          v1[8] = this;
          v1[9] = v11;
        }
        v10 += 26;
        v9 += 13;
      }
      while (v10 != v7);
    }
  }
  return this;
}

BOOL webrtc::RtpDependencyDescriptorWriter::Write(webrtc::RtpDependencyDescriptorWriter *this)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (*(_BYTE *)this)
    return 0;
  webrtc::RtpDependencyDescriptorWriter::WriteMandatoryFields(this);
  if (*((int *)this + 19) > 0 || (v3 = *((_QWORD *)this + 1), *(_QWORD *)(v3 + 136)) || *(_BYTE *)(v3 + 128))
  {
    webrtc::RtpDependencyDescriptorWriter::WriteExtendedFields(this);
    webrtc::RtpDependencyDescriptorWriter::WriteFrameDependencyDefinition((uint64_t)this);
  }
  v4 = 8 * (*((_QWORD *)this + 5) - *((_QWORD *)this + 6)) - *((_QWORD *)this + 7);
  if ((v4 & 0x3F) != 0
    && (rtc::BitBufferWriter::WriteBits((webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32), 0, v4 & 0x3F) & 1) == 0)
  {
    *(_BYTE *)this = 1;
  }
  if (v4 >= 0x40)
  {
    v5 = v4 >> 6;
    do
    {
      if ((rtc::BitBufferWriter::WriteBits((webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32), 0, 0x40uLL) & 1) == 0)
        *(_BYTE *)this = 1;
      --v5;
    }
    while (v5);
  }
  return *(_BYTE *)this == 0;
}

uint64_t webrtc::RtpDependencyDescriptorWriter::WriteMandatoryFields(webrtc::RtpDependencyDescriptorWriter *this)
{
  rtc::BitBufferWriter *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32);
  if ((rtc::BitBufferWriter::WriteBits((webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32), **((unsigned __int8 **)this + 1), 1uLL) & 1) == 0)*(_BYTE *)this = 1;
  if ((rtc::BitBufferWriter::WriteBits(v2, *(unsigned __int8 *)(*((_QWORD *)this + 1) + 1), 1uLL) & 1) == 0)
    *(_BYTE *)this = 1;
  if (**((int **)this + 2)
     + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 8) - *(_QWORD *)(*((_QWORD *)this + 2) + 104)) >> 3) <= 0)
    v3 = -(-(**((int **)this + 2)
           + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((_QWORD *)this + 8) - *(_QWORD *)(*((_QWORD *)this + 2) + 104)) >> 3)) & 0x3F);
  else
    v3 = (**((_DWORD **)this + 2)
        - 59 * ((uint64_t)(*((_QWORD *)this + 8) - *(_QWORD *)(*((_QWORD *)this + 2) + 104)) >> 3)) & 0x3F;
  if ((rtc::BitBufferWriter::WriteBits(v2, v3, 6uLL) & 1) != 0)
  {
    result = rtc::BitBufferWriter::WriteBits(v2, *(int *)(*((_QWORD *)this + 1) + 4), 0x10uLL);
    if ((result & 1) != 0)
      return result;
LABEL_12:
    *(_BYTE *)this = 1;
    return result;
  }
  *(_BYTE *)this = 1;
  result = rtc::BitBufferWriter::WriteBits(v2, *(int *)(*((_QWORD *)this + 1) + 4), 0x10uLL);
  if ((result & 1) == 0)
    goto LABEL_12;
  return result;
}

uint64_t webrtc::RtpDependencyDescriptorWriter::WriteExtendedFields(webrtc::RtpDependencyDescriptorWriter *this)
{
  uint64_t v2;
  rtc::BitBufferWriter *v3;
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  _BYTE *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unsigned int *v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  _BYTE *v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  int *v83;
  uint64_t v84;
  int *v85;

  v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 136);
  v3 = (webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32);
  if ((rtc::BitBufferWriter::WriteBits((webrtc::RtpDependencyDescriptorWriter *)((char *)this + 32), v2 != 0, 1uLL) & 1) == 0)
    *(_BYTE *)this = 1;
  v4 = *((_QWORD *)this + 1);
  if (!*(_BYTE *)(v4 + 128)
    || *(_QWORD *)(v4 + 136) && ~(-1 << *(_DWORD *)(*((_QWORD *)this + 2) + 4)) == *(_DWORD *)(v4 + 124))
  {
    v5 = 0;
    if ((rtc::BitBufferWriter::WriteBits(v3, 0, 1uLL) & 1) != 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 1;
  if ((rtc::BitBufferWriter::WriteBits(v3, 1, 1uLL) & 1) == 0)
LABEL_7:
    *(_BYTE *)this = 1;
LABEL_8:
  if ((rtc::BitBufferWriter::WriteBits(v3, *((unsigned __int8 *)this + 72), 1uLL) & 1) != 0)
  {
    if ((rtc::BitBufferWriter::WriteBits(v3, *((unsigned __int8 *)this + 73), 1uLL) & 1) != 0)
      goto LABEL_10;
  }
  else
  {
    *(_BYTE *)this = 1;
    if ((rtc::BitBufferWriter::WriteBits(v3, *((unsigned __int8 *)this + 73), 1uLL) & 1) != 0)
    {
LABEL_10:
      result = rtc::BitBufferWriter::WriteBits(v3, *((unsigned __int8 *)this + 74), 1uLL);
      if ((result & 1) != 0)
        goto LABEL_11;
LABEL_15:
      *(_BYTE *)this = 1;
      if (!v2)
        goto LABEL_137;
      goto LABEL_16;
    }
  }
  *(_BYTE *)this = 1;
  result = rtc::BitBufferWriter::WriteBits(v3, *((unsigned __int8 *)this + 74), 1uLL);
  if ((result & 1) == 0)
    goto LABEL_15;
LABEL_11:
  if (!v2)
    goto LABEL_137;
LABEL_16:
  if ((rtc::BitBufferWriter::WriteBits(v3, **((int **)this + 2), 6uLL) & 1) == 0)
    *(_BYTE *)this = 1;
  result = rtc::BitBufferWriter::WriteBits(v3, *(int *)(*((_QWORD *)this + 2) + 4) - 1, 5uLL);
  if ((result & 1) == 0)
    *(_BYTE *)this = 1;
  v7 = *((_QWORD *)this + 2);
  v8 = *(_QWORD *)(v7 + 104);
  v9 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v7 + 112) - v8) >> 3);
  if (v9 >= 2)
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      if (v9 <= v11 - 1)
        goto LABEL_149;
      v12 = v8 + v10;
      v13 = *(_DWORD *)(v8 + v10);
      v14 = *(_DWORD *)(v8 + v10 + 104);
      v15 = *(_DWORD *)(v12 + 108);
      if (v14 != v13)
        break;
      v16 = *(_DWORD *)(v12 + 4);
      if (v15 == v16)
      {
        v17 = 0;
      }
      else
      {
        if (v16 + 1 != v15)
          break;
        v17 = 1;
      }
LABEL_35:
      result = rtc::BitBufferWriter::WriteBits(v3, v17, 2uLL);
      if ((result & 1) == 0)
        *(_BYTE *)this = 1;
      ++v11;
      v8 = *(_QWORD *)(v7 + 104);
      v9 = 0x4EC4EC4EC4EC4EC5 * ((*(_QWORD *)(v7 + 112) - v8) >> 3);
      v10 += 104;
      if (v11 >= v9)
        goto LABEL_37;
    }
    v18 = v13 + 1;
    if (v15)
      v19 = 0;
    else
      v19 = v18 == v14;
    if (v19)
      v17 = 2;
    else
      v17 = 4;
    goto LABEL_35;
  }
LABEL_37:
  if ((rtc::BitBufferWriter::WriteBits(v3, 3, 2uLL) & 1) == 0)
    *(_BYTE *)this = 1;
  v20 = *((_QWORD *)this + 2);
  v21 = *(_QWORD *)(v20 + 104);
  v22 = *(_QWORD *)(v20 + 112);
  if (v21 != v22)
  {
    do
    {
      v23 = *(_QWORD *)(v21 + 8);
      v24 = (unsigned int *)(v21 + 16);
      if ((v23 & 1) != 0)
        v24 = *(unsigned int **)v24;
      if (v23 >= 2)
      {
        v26 = *((_QWORD *)this + 5);
        v25 = *((_QWORD *)this + 6);
        v27 = *((_QWORD *)this + 7);
        v28 = 4 * (v23 >> 1);
        do
        {
          while (1)
          {
            if ((unint64_t)(8 * (v26 - v25) - v27) >= 2)
            {
              v29 = 8 - v27;
              if ((unint64_t)(8 - v27) >= 2)
                v30 = 2;
              else
                v30 = 8 - v27;
              v31 = 8 - v30;
              v32 = *v24;
              v33 = (_BYTE *)(*(_QWORD *)v3 + v25);
              *v33 = ((*v24 & 3) << 6 >> v27) | *v33 & ~(((255 << v31) & 0xFEu) >> v27);
              if (v29 < 2)
                v33[1] = v33[1] & ~(-1 << (14 - v27)) | ((unint64_t)(v32 << 62 << v29) >> 56);
              v26 = *((_QWORD *)this + 5);
              v25 = *((_QWORD *)this + 6);
              v27 = *((_QWORD *)this + 7);
              if ((unint64_t)(8 * (v26 - v25) - v27) >= 2)
                break;
            }
            *(_BYTE *)this = 1;
            ++v24;
            v28 -= 4;
            if (!v28)
              goto LABEL_41;
          }
          v34 = v27 + 2;
          v25 += v34 >> 3;
          v27 = v34 & 7;
          *((_QWORD *)this + 6) = v25;
          *((_QWORD *)this + 7) = v27;
          ++v24;
          v28 -= 4;
        }
        while (v28);
      }
LABEL_41:
      v21 += 104;
    }
    while (v21 != v22);
    v20 = *((_QWORD *)this + 2);
    v35 = *(_QWORD *)(v20 + 104);
    v36 = *(_QWORD *)(v20 + 112);
    if (v35 != v36)
    {
      do
      {
        v37 = *(_QWORD *)(v35 + 56);
        v38 = (_QWORD *)(v35 + 64);
        if ((v37 & 1) != 0)
          v38 = (_QWORD *)*v38;
        if (v37 >= 2)
        {
          v40 = *((_QWORD *)this + 5);
          v39 = *((_QWORD *)this + 6);
          v41 = *((_QWORD *)this + 7);
          v42 = 4 * (v37 >> 1);
          do
          {
            while (1)
            {
              if ((unint64_t)(8 * (v40 - v39) - v41) >= 5)
              {
                v43 = 8 - v41;
                if ((unint64_t)(8 - v41) >= 5)
                  v44 = 5;
                else
                  v44 = 8 - v41;
                v45 = (*(_DWORD *)v38 - 1) | 0x10u;
                v46 = (_BYTE *)(*(_QWORD *)v3 + v39);
                *v46 = ((8 * ((*(_DWORD *)v38 - 1) & 0xF | 0x10u)) >> v41) | *v46 & ~(((255 << (8 - v44)) & 0xFEu) >> v41);
                if (v43 < 5)
                  v46[1] = v46[1] & ~(-1 << (11 - v41)) | ((unint64_t)(v45 << 59 << v43) >> 56);
                v40 = *((_QWORD *)this + 5);
                v39 = *((_QWORD *)this + 6);
                v41 = *((_QWORD *)this + 7);
                if ((unint64_t)(8 * (v40 - v39) - v41) >= 5)
                  break;
              }
              *(_BYTE *)this = 1;
              v38 = (_QWORD *)((char *)v38 + 4);
              v42 -= 4;
              if (!v42)
                goto LABEL_64;
            }
            v47 = v41 + 5;
            v39 += v47 >> 3;
            v41 = v47 & 7;
            *((_QWORD *)this + 6) = v39;
            *((_QWORD *)this + 7) = v41;
            v38 = (_QWORD *)((char *)v38 + 4);
            v42 -= 4;
          }
          while (v42);
        }
LABEL_64:
        if ((rtc::BitBufferWriter::WriteBits(v3, 0, 1uLL) & 1) == 0)
          *(_BYTE *)this = 1;
        v35 += 104;
      }
      while (v35 != v36);
      v20 = *((_QWORD *)this + 2);
    }
  }
  v48 = *(_DWORD *)(v20 + 4);
  if (!v48)
    goto LABEL_87;
  v49 = *(unsigned int *)(v20 + 8);
  v50 = 32 - __clz(v48 + 1);
  v58 = __CFADD__(v48, 1);
  v51 = v48 + 1;
  if (v58)
    v52 = 0;
  else
    v52 = v50;
  v53 = (1 << v52) - v51;
  if (v53 > v49)
  {
    if ((rtc::BitBufferWriter::WriteBits(v3, v49, v52 - 1) & 1) != 0)
      goto LABEL_87;
    goto LABEL_86;
  }
  if ((rtc::BitBufferWriter::WriteBits(v3, v53 + v49, v52) & 1) == 0)
LABEL_86:
    *(_BYTE *)this = 1;
LABEL_87:
  v54 = *((_QWORD *)this + 2);
  v55 = *(_DWORD *)(v54 + 8);
  if (!v55)
    goto LABEL_130;
  v56 = *(_QWORD *)(v54 + 16);
  v57 = (unsigned int *)(v54 + 24);
  if ((v56 & 1) != 0)
  {
    v57 = *(unsigned int **)v57;
    if (v55 == 1 || v56 < 2)
    {
LABEL_93:
      v59 = *(_QWORD *)(v54 + 104);
      v60 = *(_QWORD *)(v54 + 112);
      if (v59 != v60)
        goto LABEL_115;
      goto LABEL_130;
    }
  }
  else
  {
    v58 = v55 != 1 && v56 >= 2;
    if (!v58)
      goto LABEL_93;
  }
  v62 = 4 * (v56 >> 1);
  do
  {
    v63 = *(_DWORD *)(*((_QWORD *)this + 2) + 8);
    if (v63 != 1)
    {
      v64 = *v57;
      v65 = 32 - __clz(v63);
      if (v63)
        v66 = v65;
      else
        v66 = 0;
      v67 = (1 << v66) - v63;
      if (v67 <= v64)
      {
        if ((rtc::BitBufferWriter::WriteBits(v3, v67 + v64, v66) & 1) == 0)
LABEL_101:
          *(_BYTE *)this = 1;
      }
      else if ((rtc::BitBufferWriter::WriteBits(v3, v64, v66 - 1) & 1) == 0)
      {
        goto LABEL_101;
      }
    }
    ++v57;
    v62 -= 4;
  }
  while (v62);
  v54 = *((_QWORD *)this + 2);
  v59 = *(_QWORD *)(v54 + 104);
  v60 = *(_QWORD *)(v54 + 112);
  if (v59 != v60)
  {
    do
    {
LABEL_115:
      v68 = *(_QWORD *)(v59 + 80);
      v69 = (unsigned int *)(v59 + 88);
      if ((v68 & 1) != 0)
        v69 = *(unsigned int **)v69;
      if (v68 >= 2)
      {
        v71 = *((_QWORD *)this + 5);
        v70 = *((_QWORD *)this + 6);
        v72 = *((_QWORD *)this + 7);
        v73 = 4 * (v68 >> 1);
        do
        {
          while (1)
          {
            if ((unint64_t)(8 * (v71 - v70) - v72) >= 4)
            {
              v74 = 8 - v72;
              if ((unint64_t)(8 - v72) >= 4)
                v75 = 4;
              else
                v75 = 8 - v72;
              v76 = 8 - v75;
              v77 = *v69;
              v78 = (_BYTE *)(*(_QWORD *)v3 + v70);
              *v78 = ((16 * (*v69 & 0xF)) >> v72) | *v78 & ~(((255 << v76) & 0xFEu) >> v72);
              if (v74 < 4)
                v78[1] = v78[1] & ~(-1 << (12 - v72)) | ((unint64_t)(v77 << 60 << v74) >> 56);
              v71 = *((_QWORD *)this + 5);
              v70 = *((_QWORD *)this + 6);
              v72 = *((_QWORD *)this + 7);
              if ((unint64_t)(8 * (v71 - v70) - v72) >= 4)
                break;
            }
            *(_BYTE *)this = 1;
            ++v69;
            v73 -= 4;
            if (!v73)
              goto LABEL_114;
          }
          v79 = v72 + 4;
          v70 += v79 >> 3;
          v72 = v79 & 7;
          *((_QWORD *)this + 6) = v70;
          *((_QWORD *)this + 7) = v72;
          ++v69;
          v73 -= 4;
        }
        while (v73);
      }
LABEL_114:
      v59 += 104;
    }
    while (v59 != v60);
    v54 = *((_QWORD *)this + 2);
  }
LABEL_130:
  v80 = *(_QWORD *)(v54 + 64);
  result = rtc::BitBufferWriter::WriteBits(v3, v80 > 1, 1uLL);
  if ((result & 1) == 0)
    *(_BYTE *)this = 1;
  if (v80 < 2)
  {
LABEL_137:
    if (v5)
    {
      v84 = *((_QWORD *)this + 1);
      if (!*(_BYTE *)(v84 + 128))
        goto LABEL_149;
      result = rtc::BitBufferWriter::WriteBits(v3, *(unsigned int *)(v84 + 124), *(int *)(*((_QWORD *)this + 2) + 4));
      if ((result & 1) == 0)
        *(_BYTE *)this = 1;
    }
  }
  else
  {
    v81 = (_QWORD *)*((_QWORD *)this + 2);
    if (v81[13] != v81[14])
    {
      v82 = v81[8];
      v83 = (int *)(v81 + 9);
      if ((v82 & 1) != 0)
        v83 = *(int **)v83;
      if (v82 < 2)
        goto LABEL_137;
      v85 = &v83[2 * (v82 >> 1)];
      while (2)
      {
        if ((rtc::BitBufferWriter::WriteBits(v3, *v83 - 1, 0x10uLL) & 1) != 0)
        {
          result = rtc::BitBufferWriter::WriteBits(v3, v83[1] - 1, 0x10uLL);
          if ((result & 1) == 0)
LABEL_148:
            *(_BYTE *)this = 1;
        }
        else
        {
          *(_BYTE *)this = 1;
          result = rtc::BitBufferWriter::WriteBits(v3, v83[1] - 1, 0x10uLL);
          if ((result & 1) == 0)
            goto LABEL_148;
        }
        v83 += 2;
        if (v83 == v85)
          goto LABEL_137;
        continue;
      }
    }
LABEL_149:
    __break(1u);
  }
  return result;
}

uint64_t webrtc::RtpDependencyDescriptorWriter::WriteFrameDependencyDefinition(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;

  v1 = this;
  if (*(_BYTE *)(this + 72))
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(v2 + 16);
    v4 = (unsigned int *)(v2 + 24);
    if ((v3 & 1) != 0)
      v4 = *(unsigned int **)v4;
    if (v3 >= 2)
    {
      v12 = 4 * (v3 >> 1);
      do
      {
        this = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), *v4, 2uLL);
        if ((this & 1) == 0)
          *(_BYTE *)v1 = 1;
        ++v4;
        v12 -= 4;
      }
      while (v12);
    }
  }
  if (*(_BYTE *)(v1 + 73))
  {
    v5 = *(_QWORD *)(v1 + 8);
    v6 = *(_QWORD *)(v5 + 64);
    v7 = (_QWORD *)(v5 + 72);
    if ((v6 & 1) != 0)
      v7 = (_QWORD *)*v7;
    if (v6 < 2)
    {
LABEL_9:
      this = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), 0, 2uLL);
      if ((this & 1) == 0)
        *(_BYTE *)v1 = 1;
      goto LABEL_11;
    }
    v13 = 4 * (v6 >> 1);
    while (1)
    {
      v14 = *(_DWORD *)v7;
      if (*(int *)v7 > 16)
      {
        v15 = v14 - 1;
        if (v14 > 0x100)
        {
          if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), v15 | 0x3000, 0xEuLL) & 1) == 0)
LABEL_37:
            *(_BYTE *)v1 = 1;
        }
        else if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), v15 | 0x200, 0xAuLL) & 1) == 0)
        {
          goto LABEL_37;
        }
      }
      else if ((rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), (v14 - 1) | 0x10, 6uLL) & 1) == 0)
      {
        goto LABEL_37;
      }
      v7 = (_QWORD *)((char *)v7 + 4);
      v13 -= 4;
      if (!v13)
        goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_BYTE *)(v1 + 74) && *(int *)(*(_QWORD *)(v1 + 16) + 8) >= 1)
  {
    for (i = 0; (uint64_t)i < *(int *)(*(_QWORD *)(v1 + 16) + 8); ++i)
    {
      if (((*(_QWORD *)(v1 + 24) >> i) & 1) != 0)
      {
        v9 = *(_QWORD *)(v1 + 8);
        v10 = *(_QWORD *)(v9 + 88);
        if (i >= v10 >> 1)
        {
          __break(1u);
          return this;
        }
        v11 = (_QWORD *)(v9 + 96);
        if ((v10 & 1) != 0)
          v11 = (_QWORD *)*v11;
        this = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), *((int *)v11 + i), 8uLL);
        if ((this & 1) == 0)
LABEL_22:
          *(_BYTE *)v1 = 1;
      }
      else
      {
        this = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)(v1 + 32), 0, 8uLL);
        if ((this & 1) == 0)
          goto LABEL_22;
      }
    }
  }
  return this;
}

uint64_t webrtc::RtpDependencyDescriptorWriter::StructureSizeBits(webrtc::RtpDependencyDescriptorWriter *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  unsigned int v7;
  BOOL v8;
  int v9;
  signed int v10;
  int v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;

  v1 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)(v1 + 104);
  v2 = *(_QWORD *)(v1 + 112);
  v4 = 0x4EC4EC4EC4EC4EC5 * ((v2 - v3) >> 3);
  v5 = *(unsigned int *)(v1 + 4);
  for (i = 0xEC4EC4EC4EC4EC4FLL * ((v2 - v3) >> 3) + 0x9D89D89D89D89D8ALL * ((v2 - v3) >> 3) * v5 + 11;
        v3 != v2;
        v3 += 104)
  {
    i = 5 * (*(_QWORD *)(v3 + 56) >> 1) + (int)i;
  }
  v7 = 32 - __clz(v5 + 1);
  v8 = __CFADD__((_DWORD)v5, 1);
  v9 = v5 + 1;
  v10 = *(_DWORD *)(v1 + 8);
  if (v8)
    v7 = 0;
  v11 = (__PAIR64__(i + v7, v10) - ((1 << v7) - v9)) >> 32;
  if (v10 > 0)
  {
    v12 = *(_QWORD *)(v1 + 16);
    v13 = (_QWORD *)(v1 + 24);
    if ((v12 & 1) != 0)
      v13 = (_QWORD *)*v13;
    if (v12 >= 2)
    {
      v14 = v12 >> 1;
      v15 = __clz(v10);
      v16 = 32 - v15;
      v17 = (1 << -(char)v15) - v10;
      v18 = 4 * v14;
      do
      {
        v19 = *(_DWORD *)v13;
        v13 = (_QWORD *)((char *)v13 + 4);
        v11 = (__PAIR64__(v16 + v11, v19) - v17) >> 32;
        v18 -= 4;
      }
      while (v18);
    }
    v11 += 4 * v10 * v4;
  }
  return (v11 + 32 * (*(_DWORD *)(v1 + 64) >> 1) + 1);
}

unint64_t webrtc::RtpDependencyDescriptorWriter::CalculateMatch(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  const void *v8;
  const void *v9;
  _BOOL4 v10;
  _DWORD *v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int32x4_t *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t *v25;
  int32x4_t v26;
  uint32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t result;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unsigned int *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;

  v4 = (_QWORD *)a1[1];
  v5 = v4[8];
  v6 = a2[7];
  v7 = (2 * v5) & 0xFFFFFFFFFFFFFFFCLL;
  if (v7 == 4 * (v6 >> 1))
  {
    if ((v6 & 1) != 0)
      v8 = (const void *)a2[8];
    else
      v8 = a2 + 8;
    if ((v5 & 1) != 0)
      v9 = (const void *)v4[9];
    else
      v9 = v4 + 9;
    v10 = memcmp(v9, v8, v7) != 0;
  }
  else
  {
    v10 = 1;
  }
  v11 = v4 + 3;
  v12 = v4[2];
  if ((v12 & 1) != 0)
    v11 = (_DWORD *)v4[3];
  v13 = a2 + 2;
  v14 = a2[1];
  if ((v14 & 1) != 0)
    v13 = (_DWORD *)a2[2];
  if (v12 >> 1 != v14 >> 1)
    goto LABEL_35;
  if (v12 >= 2 && v14 >= 2)
  {
    v32 = 4 * (v12 >> 1) - 4;
    v33 = 4 * (v14 >> 1) - 4;
    v34 = v11;
    v35 = v13;
    while (*v34 == *v35)
    {
      ++v34;
      ++v35;
      if (v32)
      {
        v32 -= 4;
        v36 = v33;
        v33 -= 4;
        if (v36)
          continue;
      }
      goto LABEL_19;
    }
LABEL_35:
    v16 = *(unsigned int *)(a1[2] + 8);
    if ((int)v16 < 1)
      goto LABEL_20;
LABEL_36:
    v37 = 0;
    v38 = a1[3];
    while (1)
    {
      result = v38 >> v37;
      if (((v38 >> v37) & 1) != 0)
      {
        v40 = v4[11];
        if (v37 >= v40 >> 1)
          goto LABEL_55;
        result = (unint64_t)(v4 + 12);
        if ((v40 & 1) != 0)
          result = v4[12];
        v41 = a2[10];
        if (v37 >= v41 >> 1)
        {
LABEL_55:
          __break(1u);
          return result;
        }
        v42 = a2 + 11;
        if ((v41 & 1) != 0)
          v42 = (_QWORD *)a2[11];
        if (*(_DWORD *)(result + 4 * v37) != *((_DWORD *)v42 + v37))
          goto LABEL_20;
      }
      if (v16 == ++v37)
        goto LABEL_20;
    }
  }
LABEL_19:
  v16 = *(unsigned int *)(a1[2] + 8);
  if ((int)v16 >= 1)
    goto LABEL_36;
LABEL_20:
  if (v10)
  {
    v17 = v5 >> 1;
    v18 = 2 * (v5 >> 1) + 2;
    v19 = (int32x4_t *)(v4 + 9);
    if ((v5 & 1) != 0)
      v19 = (int32x4_t *)v19->i64[0];
    if (v5 >= 2)
    {
      v20 = (v17 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v21 = (unsigned int *)v19;
      if (v20 < 7)
        goto LABEL_46;
      v22 = v20 + 1;
      v21 = (unsigned int *)v19 + (v22 & 0x7FFFFFFFFFFFFFF8);
      v23 = 0uLL;
      v24 = (int32x4_t)(2 * (v5 >> 1) + 2);
      v25 = v19 + 1;
      v26.i64[0] = 0x1100000011;
      v26.i64[1] = 0x1100000011;
      v27 = (uint32x4_t)vdupq_n_s32(0x101u);
      v28.i64[0] = 0xC0000000CLL;
      v28.i64[1] = 0xC0000000CLL;
      v29.i64[0] = 0x800000008;
      v29.i64[1] = 0x800000008;
      v30.i64[0] = 0x400000004;
      v30.i64[1] = 0x400000004;
      v31 = v22 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v26, v25[-1]), v30, vbslq_s8((int8x16_t)vcgtq_u32(v27, (uint32x4_t)v25[-1]), v29, v28)), v24);
        v23 = vaddq_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v26, *v25), v30, vbslq_s8((int8x16_t)vcgtq_u32(v27, *(uint32x4_t *)v25), v29, v28)), v23);
        v25 += 2;
        v31 -= 8;
      }
      while (v31);
      v18 = vaddvq_s32(vaddq_s32(v23, v24));
      if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_46:
        v43 = (unsigned int *)v19 + v17;
        do
        {
          v45 = *v21++;
          v44 = v45;
          if (v45 >= 0x101)
            v46 = 12;
          else
            v46 = 8;
          if (v44 >= 17)
            v47 = v46;
          else
            v47 = 4;
          v18 += v47;
        }
        while (v21 != v43);
      }
    }
  }
  return (unint64_t)a2;
}

uint64_t webrtc::RtpDescriptorAuthentication@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int32 v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint16x8_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint16x8_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint16x8_t *v34;
  unsigned int v35;
  uint64_t v36;
  __int32 v37;
  BOOL v38;
  size_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;

  if (!*(_BYTE *)(result + 144)
    || (v3 = *(_DWORD *)(result + 8), (v3 & 0x80000000) != 0)
    || (v4 = *(_DWORD *)(result + 12), (v4 | v3) > 7)
    || (v5 = *(_QWORD *)(result + 64), v5 >= 0x12))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return result;
  }
  v43.i64[1] = 0;
  v45.i64[0] = 0;
  v43.i16[0] = 1;
  v43.i8[5] = v4;
  v43.i8[4] = 1 << v3;
  v6 = *(_QWORD *)result;
  v43.i16[1] = *(_QWORD *)result;
  v7 = result + 72;
  if ((v5 & 1) != 0)
    v7 = *(_QWORD *)(result + 72);
  if (v5 < 2)
  {
    v8 = *(unsigned __int16 *)(result + 158);
    v45.i32[0] = *(unsigned __int16 *)(result + 156);
    v45.i32[1] = v8;
    goto LABEL_42;
  }
  v9 = v5 >> 1;
  if ((_WORD)v6 == *(_WORD *)v7)
  {
    v10 = 0;
    if (v9 == 1)
      goto LABEL_39;
  }
  else
  {
    v44.i16[0] = v6 - *(_WORD *)v7;
    v10 = 1;
    if (v9 == 1)
      goto LABEL_39;
  }
  if ((_WORD)v6 != *(_WORD *)(v7 + 8))
    *(_WORD *)(((unint64_t)&v43 | (2 * v10++)) + 0x10) = v6 - *(_WORD *)(v7 + 8);
  if (v9 != 2)
  {
    if ((_WORD)v6 != *(_WORD *)(v7 + 16))
      *(_WORD *)(((unint64_t)&v43 | (2 * v10++)) + 0x10) = v6 - *(_WORD *)(v7 + 16);
    if (v9 != 3)
    {
      if (v10 != 8 && (_WORD)v6 != *(_WORD *)(v7 + 24))
        *((_WORD *)&v43 + v10++ + 8) = v6 - *(_WORD *)(v7 + 24);
      if (v9 != 4)
      {
        if (v10 != 8 && (_WORD)v6 != *(_WORD *)(v7 + 32))
          *((_WORD *)&v43 + v10++ + 8) = v6 - *(_WORD *)(v7 + 32);
        if (v9 != 5)
        {
          if (v10 != 8 && (_WORD)v6 != *(_WORD *)(v7 + 40))
            *((_WORD *)&v43 + v10++ + 8) = v6 - *(_WORD *)(v7 + 40);
          if (v9 != 6)
          {
            if (v10 != 8 && (_WORD)v6 != *(_WORD *)(v7 + 48))
              *((_WORD *)&v43 + v10++ + 8) = v6 - *(_WORD *)(v7 + 48);
            if (v9 != 7 && v10 != 8)
            {
              v11 = v6 - *(_DWORD *)(v7 + 56);
              if ((_WORD)v11)
                *((_WORD *)&v43 + v10++ + 8) = v11;
            }
          }
        }
      }
    }
  }
LABEL_39:
  v43.i64[1] = v10;
  v12 = v10 == 0;
  if (v10)
  {
    v13 = (v10 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v13 >= 0xF)
    {
      v16 = v13 + 1;
      v17 = (v13 + 1) & 0xFFFFFFFFFFFFFFF0;
      v18.i64[0] = 0x3F003F003F003FLL;
      v18.i64[1] = 0x3F003F003F003FLL;
      v19 = (int16x8_t)vcgtq_u16(v44, v18);
      v20 = vmovl_s16(*(int16x4_t *)v19.i8);
      v21.i64[0] = v20.i32[0];
      v21.i64[1] = v20.i32[1];
      v22 = v21;
      v23 = vmovl_high_s16(v19);
      v21.i64[0] = v23.i32[0];
      v21.i64[1] = v23.i32[1];
      v24 = v21;
      v21.i64[0] = v23.i32[2];
      v21.i64[1] = v23.i32[3];
      v25 = v21;
      v21.i64[0] = v20.i32[2];
      v21.i64[1] = v20.i32[3];
      v26 = v21;
      v27 = (int16x8_t)vcgtq_u16(v45, v18);
      v28 = vmovl_high_s16(v27);
      v21.i64[0] = v28.i32[0];
      v21.i64[1] = v28.i32[1];
      v29 = v21;
      v21.i64[0] = v28.i32[2];
      v21.i64[1] = v28.i32[3];
      v30 = v21;
      v31 = vmovl_s16(*(int16x4_t *)v27.i8);
      v21.i64[0] = v31.i32[2];
      v21.i64[1] = v31.i32[3];
      v32 = v21;
      v21.i64[0] = v31.i32[0];
      v21.i64[1] = v31.i32[1];
      v33 = (int8x16_t)vdupq_n_s64(2uLL);
      v14 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v21, v33), (int64x2_t)vmvnq_s8(v21)), (int64x2_t)vbslq_s8(v22, (int8x16_t)xmmword_208F1A540, (int8x16_t)xmmword_208F1A530)), vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v29, v33), (int64x2_t)vmvnq_s8(v29)), vsubq_s64((int64x2_t)vandq_s8(v24, v33), (int64x2_t)vmvnq_s8(v24)))), vaddq_s64(vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v32, v33), (int64x2_t)vmvnq_s8(v32)), vsubq_s64((int64x2_t)vandq_s8(v26, v33), (int64x2_t)vmvnq_s8(v26))), vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v30, v33), (int64x2_t)vmvnq_s8(v30)), vsubq_s64((int64x2_t)vandq_s8(v25, v33), (int64x2_t)vmvnq_s8(v25))))));
      if (v16 == v17)
        goto LABEL_50;
      v15 = (uint16x8_t *)((char *)&v44 + 2 * v17);
    }
    else
    {
      v14 = 4;
      v15 = &v44;
    }
    v34 = (uint16x8_t *)((char *)&v44 + 2 * v10);
    do
    {
      v35 = v15->u16[0];
      v15 = (uint16x8_t *)((char *)v15 + 2);
      if (v35 <= 0x3F)
        v36 = 1;
      else
        v36 = 2;
      v14 += v36;
    }
    while (v15 != v34);
    goto LABEL_50;
  }
LABEL_42:
  v12 = 1;
  v14 = 4;
LABEL_50:
  v37 = v45.i32[1];
  v38 = v45.i32[0] > 0 && v12;
  a2[1] = 0;
  a2[2] = 0;
  if (v38 && v37 > 0)
    v39 = v14 + 4;
  else
    v39 = v14;
  *a2 = 0;
  if (v39)
  {
    if ((v39 & 0x8000000000000000) != 0)
      abort();
    v40 = (char *)operator new(v39);
    *a2 = v40;
    v41 = &v40[v39];
    a2[2] = &v40[v39];
    bzero(v40, v39);
    a2[1] = &v40[v39];
  }
  else
  {
    v41 = 0;
    v40 = 0;
  }
  if (v41 == v40)
    v42 = 0;
  else
    v42 = (uint64_t)v40;
  return webrtc::RtpGenericFrameDescriptorExtension00::Write(v42, v41 - v40, &v43);
}

void webrtc::RtpPacketizer::Create(absl::variant_internal *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int16 v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  webrtc::H264 *v43;
  uint64_t v44;
  webrtc::H264 *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;

  if (((unint64_t)a1 & 0xFF00000000) != 0)
  {
    switch((int)a1)
    {
      case 1:
        if (*(_QWORD *)(a6 + 1936) != 1)
          absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v15 = operator new();
        v49 = a4;
        v50 = a5;
        *(_QWORD *)v15 = off_24C0BC950;
        webrtc::RtpPacketizerVp8::BuildHeader(a6 + 296, v15 + 8);
        if (a3)
          v16 = a2;
        else
          v16 = 0;
        *(_OWORD *)(v15 + 48) = 0u;
        v17 = (void **)(v15 + 48);
        *(_QWORD *)(v15 + 32) = v16;
        *(_QWORD *)(v15 + 40) = a3;
        *(_OWORD *)(v15 + 64) = 0u;
        LODWORD(v49) = a4 - (*(_QWORD *)(v15 + 8) >> 1);
        if (a3)
        {
          webrtc::RtpPacketizer::SplitAboutEqually((int)a3, (int *)&v49, (int **)&v47);
          v18 = *v17;
          if (*v17)
          {
            *(_QWORD *)(v15 + 56) = v18;
            operator delete(v18);
          }
          v19 = v47;
          *(_OWORD *)(v15 + 48) = v47;
          *(_QWORD *)(v15 + 64) = v48;
          *(_QWORD *)(v15 + 72) = v19;
        }
        else
        {
          *(_QWORD *)(v15 + 72) = 0;
        }
        break;
      case 2:
        if (*(_QWORD *)(a6 + 1936) != 2)
          absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v27 = (_QWORD *)(a6 + 296);
        v28 = operator new();
        v15 = v28;
        if (a3)
          v31 = a2;
        else
          v31 = 0;
        webrtc::RtpPacketizerVp9::RtpPacketizerVp9(v28, v31, (uint64_t)a3, a4, a5, v27, v29, v30);
        break;
      case 3:
        v32 = a7;
        v15 = operator new();
        v33 = *(_DWORD *)(a6 + 152);
        v34 = *(_BYTE *)(a6 + 167);
        *(_QWORD *)v15 = &off_24C0BCB90;
        *(_DWORD *)(v15 + 8) = v33;
        if (a3)
          v35 = a2;
        else
          v35 = 0;
        webrtc::RtpPacketizerAv1::ParseObus(v35, (uint64_t)a3, (char **)(v15 + 16));
        v36 = (void **)(v15 + 40);
        v37 = *(_QWORD *)(v15 + 24) - *(_QWORD *)(v15 + 16);
        v38 = v37 >> 5;
        if (v37)
          v39 = *(char **)(v15 + 16);
        else
          v39 = 0;
        if (v32)
          webrtc::RtpPacketizerAv1::PacketizeAboutEqually(v39, v38, a4, a5, v36);
        else
          webrtc::RtpPacketizerAv1::Packetize(v39, v38, a4, a5, (uint64_t)v36);
        *(_BYTE *)(v15 + 64) = v34;
        *(_QWORD *)(v15 + 72) = 0;
        break;
      case 4:
        if (*(_QWORD *)(a6 + 1936) != 3)
          absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
        v40 = operator new();
        v15 = v40;
        if (a3)
          v43 = (webrtc::H264 *)a2;
        else
          v43 = 0;
        webrtc::RtpPacketizerH264::RtpPacketizerH264(v40, v43, a3, a4, a5, *(unsigned int *)(a6 + 432), v41, v42);
        break;
      case 5:
        v44 = operator new();
        v15 = v44;
        if (a3)
          v45 = (webrtc::H264 *)a2;
        else
          v45 = 0;
        webrtc::RtpPacketizerH265::RtpPacketizerH265(v44, v45, a3, a4, a5);
        break;
      default:
        v22 = operator new();
        v15 = v22;
        v49 = a4;
        v50 = a5;
        *(_QWORD *)v22 = &off_24C0BC920;
        if (a3)
          v23 = a2;
        else
          v23 = 0;
        *(_QWORD *)(v22 + 24) = v23;
        *(_QWORD *)(v22 + 32) = a3;
        *(_QWORD *)(v22 + 16) = 1;
        if (*(_DWORD *)(a6 + 152) == 3)
          v24 = 3;
        else
          v24 = 2;
        *(_BYTE *)(v22 + 8) = v24;
        if (*(_QWORD *)(a6 + 1936) == 4)
        {
          v25 = *(_WORD *)(a6 + 296);
          *(_BYTE *)(v22 + 8) = v24 | 4;
          *(_BYTE *)(v22 + 9) = HIBYTE(v25) & 0x7F;
          *(_BYTE *)(v22 + 10) = v25;
          *(_QWORD *)(v22 + 16) = 3;
          v26 = -3;
        }
        else
        {
          v26 = -1;
        }
        LODWORD(v49) = v26 + a4;
        goto LABEL_47;
    }
  }
  else
  {
    v20 = (_QWORD *)operator new();
    v15 = (uint64_t)v20;
    v49 = a4;
    v50 = a5;
    *v20 = &off_24C0BC920;
    if (a3)
      v21 = a2;
    else
      v21 = 0;
    v20[2] = 0;
    v20[3] = v21;
    v20[4] = a3;
LABEL_47:
    webrtc::RtpPacketizer::SplitAboutEqually((int)a3, (int *)&v49, (int **)&v47);
    v46 = v47;
    *(_OWORD *)(v15 + 40) = v47;
    *(_QWORD *)(v15 + 56) = v48;
    *(_QWORD *)(v15 + 64) = v46;
  }
  *a9 = v15;
}

void webrtc::RtpPacketizer::SplitAboutEqually(int a1@<W0>, int *a2@<X1>, int **a3@<X8>)
{
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  char v17;
  int *v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  _BOOL4 v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  int *v33;
  int v34;
  int *v35;
  unint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  uint64_t v46;
  __int128 v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1)
  {
    v4 = a1;
    v6 = *a2;
    if (*a2 >= a2[3] + a1)
    {
      v14 = (int *)operator new(4uLL);
      *a3 = v14;
      *v14++ = v4;
      a3[1] = v14;
      a3[2] = v14;
      return;
    }
    v7 = a2[1];
    if (v6 > v7)
    {
      v8 = a2[2];
      if (v6 > v8)
      {
        v9 = v7 + a1 + v8;
        v10 = (v6 + v9 - 1) / v6;
        v11 = v10 == 1 ? 2 : v10;
        if (v11 <= a1)
        {
          if (v11)
          {
            if (v11 < 0)
              goto LABEL_61;
            v12 = (int *)operator new(4 * v11);
            v13 = (char *)&v12[v11];
            *a3 = v12;
            a3[1] = v12;
            a3[2] = (int *)v13;
            if (v4 < 1)
              return;
          }
          else
          {
            v13 = 0;
            v12 = 0;
            if (a1 < 1)
              return;
          }
          v15 = v9 / v11;
          v16 = v9 % v11;
          v17 = 1;
          v18 = v12;
          v48 = v16;
          while (1)
          {
            while (1)
            {
              if (v11 == v16)
                ++v15;
              v20 = v15;
              if ((v17 & 1) != 0)
              {
                v21 = a2[1];
                v22 = v21 + 1;
                v23 = v15 - v21;
                if (v15 <= v22)
                  v20 = 1;
                else
                  v20 = v23;
              }
              v24 = v20 >= v4 ? v4 : v20;
              v25 = v11 == 2 && v4 <= v20;
              v26 = v25;
              v27 = v24 - v26;
              if (v12 >= (int *)v13)
                break;
              if (!v12)
                goto LABEL_60;
              *v12++ = v27;
              v17 = 0;
              a3[1] = v12;
              --v11;
              v19 = __OFSUB__(v4, v27);
              v4 -= v27;
              if ((v4 < 0) ^ v19 | (v4 == 0))
                return;
            }
            v28 = v12 - v18;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              goto LABEL_61;
            v30 = v13 - (char *)v18;
            v31 = (v13 - (char *)v18) >> 1;
            if (v31 > v29)
              v29 = v31;
            if (v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v29 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v29)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              abort();
            }
            v50 = v15;
            v51 = v27;
            if (v29 >> 62)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v49 = 4 * v29;
            v32 = operator new(4 * v29);
            v33 = (int *)&v32[4 * v28];
            v34 = v51;
            *v33 = v51;
            v35 = v33 + 1;
            if (v12 != v18)
              break;
            v13 = &v32[v49];
            *a3 = v33;
            a3[1] = v35;
            a3[2] = (int *)&v32[v49];
            if (v18)
              goto LABEL_52;
LABEL_17:
            v18 = v33;
            v15 = v50;
            v16 = v48;
            v17 = 0;
            a3[1] = v35;
            --v11;
            v12 = v35;
            v19 = __OFSUB__(v4, v34);
            v4 -= v34;
            if ((v4 < 0) ^ v19 | (v4 == 0))
              return;
          }
          v36 = (char *)v12 - (char *)v18 - 4;
          if (v36 < 0xBC
            || (v41 = ((char *)(v12 - 1) - (char *)v18) & 0xFFFFFFFFFFFFFFFCLL,
                &v32[(char *)v12 - (char *)v18 - 4 - v41] > &v32[(char *)v12 - (char *)v18 - 4])
            || (int *)((char *)v12 - v41 - 4) > v12 - 1
            || (unint64_t)((char *)v18 - v32) < 0x20)
          {
            v37 = v12;
            v38 = v49;
          }
          else
          {
            v42 = (v36 >> 2) + 1;
            v43 = 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
            v37 = &v12[v43 / 0xFFFFFFFFFFFFFFFCLL];
            v33 = (int *)((char *)v33 - v43);
            v44 = &v32[4 * v28 - 16];
            v45 = (__int128 *)(v12 - 4);
            v46 = v42 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v47 = *v45;
              *(v44 - 1) = *(v45 - 1);
              *v44 = v47;
              v44 -= 2;
              v45 -= 2;
              v46 -= 8;
            }
            while (v46);
            v38 = v49;
            if (v42 == (v42 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_49:
              v13 = &v32[v38];
              *a3 = v33;
              a3[1] = v35;
              a3[2] = (int *)v13;
              if (!v18)
                goto LABEL_17;
LABEL_52:
              v40 = v13;
              operator delete(v18);
              v13 = v40;
              v34 = v51;
              goto LABEL_17;
            }
          }
          do
          {
            v39 = *--v37;
            *--v33 = v39;
          }
          while (v37 != v18);
          goto LABEL_49;
        }
      }
    }
  }
}

void webrtc::RtpPacketizerH264::RtpPacketizerH264(uint64_t a1, webrtc::H264 *this, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v8;
  _QWORD *v9;
  int v10;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  _QWORD *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void **v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  int *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int *v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  char v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  _QWORD *v117;
  int *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t i;
  uint64_t v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::string *v143;
  uint64_t v144;
  _QWORD *v145;
  int *v146;
  int *v147;
  int *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  int v153;
  int *v154;
  int *v155;
  __int128 v156;

  *(_QWORD *)a1 = &off_24C0BC8F0;
  *(_QWORD *)(a1 + 8) = a4;
  v8 = (int *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = a5;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = (_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  if (a6 >= 2)
  {
LABEL_182:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 49, "packetization_mode == H264PacketizationMode::NonInterleaved || packetization_mode == H264PacketizationMode::SingleNalUnit", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v144);
    goto LABEL_183;
  }
  v10 = a6;
  v12 = (unint64_t)this;
  webrtc::H264::FindNaluIndices(this, a3, (char **)&v154);
  v18 = v154;
  v19 = v155;
  if (v154 != v155)
  {
    v153 = v10;
    v20 = v9;
    do
    {
      v21 = *((_QWORD *)v18 + 1);
      v22 = &a3[-v21];
      if ((unint64_t)a3 <= v21)
      {
        v24 = 0;
        v25 = 0;
      }
      else
      {
        v23 = v12 + v21;
        if ((unint64_t)v22 >= *((_QWORD *)v18 + 2))
          v24 = (unsigned __int8 *)*((_QWORD *)v18 + 2);
        else
          v24 = v22;
        if (v24)
          v25 = v23;
        else
          v25 = 0;
      }
      v26 = *(_QWORD *)(a1 + 40);
      v27 = *(_QWORD *)(a1 + 48);
      v28 = 32 * (v27 - v26) - 1;
      if (v27 == v26)
        v28 = 0;
      if (v28 == *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64))
      {
        std::deque<rtc::ArrayView<unsigned char const,-4711l>>::__add_back_capacity(a1 + 32);
        v26 = *(_QWORD *)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 48);
      }
      if (v27 == v26)
        goto LABEL_176;
      v29 = *(_QWORD *)(a1 + 72) + *(_QWORD *)(a1 + 64);
      v30 = *(_QWORD *)(v26 + ((v29 >> 5) & 0x7FFFFFFFFFFFFF8));
      if (!v30)
        goto LABEL_176;
      v31 = (unint64_t *)(v30 + 16 * v29);
      *v31 = v25;
      v31[1] = (unint64_t)v24;
      ++*(_QWORD *)(a1 + 72);
      v18 += 6;
    }
    while (v18 != v19);
    v18 = v154;
    v9 = v20;
    v10 = v153;
  }
  if (v18)
  {
    v155 = v18;
    operator delete(v18);
  }
  v32 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a1 + 48) == v32)
  {
    v34 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 64);
    v34 = *(_QWORD *)(a1 + 72);
    v35 = (uint64_t *)(v32 + 8 * (v33 >> 8));
    v36 = *v35;
    v37 = *v35 + 16 * v33;
    v38 = *(_QWORD *)(v32 + (((v34 + v33) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v34 + v33);
    while (v37 != v38)
    {
      if (!*(_QWORD *)(v37 + 8))
        goto LABEL_36;
      v37 += 16;
      if (v37 - v36 == 4096)
      {
        v39 = v35[1];
        ++v35;
        v36 = v39;
        v37 = v39;
      }
    }
  }
  if (!v34)
    return;
  v150 = a1 + 80;
  if (v10 != 1)
  {
    v49 = 0;
    v145 = v9;
    v146 = v8;
    while (1)
    {
      LODWORD(v50) = *(_DWORD *)(a1 + 8);
      if (v34 == 1)
        break;
      if (!v49)
      {
        v51 = *(_DWORD *)(a1 + 12);
        goto LABEL_51;
      }
      v52 = *(_DWORD *)(a1 + 8);
      if (v49 + 1 == v34)
      {
        v51 = *(_DWORD *)(a1 + 16);
        goto LABEL_51;
      }
LABEL_52:
      v53 = *(_QWORD *)(a1 + 64) + v49;
      v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + ((v53 >> 5) & 0x7FFFFFFFFFFFFF8));
      v55 = (*(_BYTE *)(a1 + 64) + v49);
      v56 = *(_QWORD *)(v54 + 16 * v53 + 8);
      v151 = v56;
      if (v52 >= (int)v56)
      {
        v50 = (int)v50;
        v79 = (int)v50 - v56;
        if ((int)v50 < v56)
          goto LABEL_179;
        v80 = *(unsigned __int8 **)(v54 + 16 * v55);
        ++*v9;
        if (v49 || v34 != 1)
        {
          if (v49)
          {
            v82 = v56;
            if (v34 - 1 != v49)
              goto LABEL_105;
            v81 = *(int *)(a1 + 16);
          }
          else
          {
            v81 = *(int *)(a1 + 12);
          }
        }
        else
        {
          v81 = *(int *)(a1 + 20);
        }
        v82 = v56 + v81;
LABEL_105:
        if (v82 > (int)v50)
          goto LABEL_180;
        if (!v56)
          goto LABEL_178;
        v83 = *(_QWORD *)(a1 + 88);
        v84 = *(_QWORD *)(a1 + 96);
        v85 = 170 * ((v84 - v83) >> 3) - 1;
        v12 = *v80;
        if (v84 == v83)
          v85 = 0;
        if (v85 == *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112))
        {
          v86 = v49;
          std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
          v56 = v151;
          v49 = v86;
          v83 = *(_QWORD *)(a1 + 88);
          v84 = *(_QWORD *)(a1 + 96);
        }
        if (v84 == v83)
          goto LABEL_176;
        v87 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
        v88 = *(_QWORD *)(v83 + 8 * (v87 / 0xAA));
        if (!v88)
          goto LABEL_176;
        v89 = v88 + 24 * (v87 % 0xAA);
        *(_QWORD *)v89 = v80;
        *(_QWORD *)(v89 + 8) = v56;
        *(_WORD *)(v89 + 16) = 1;
        *(_BYTE *)(v89 + 18) = 1;
        *(_BYTE *)(v89 + 19) = v12;
        v90 = *(_QWORD *)(a1 + 120);
        v91 = v90 + 1;
        *(_QWORD *)(a1 + 120) = v90 + 1;
        v34 = v49 + 1;
        v92 = *(_QWORD *)(a1 + 72);
        if (v49 + 1 == v92)
          goto LABEL_43;
        v93 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                             + (((*(_QWORD *)(a1 + 64) + v34) >> 5) & 0x7FFFFFFFFFFFFF8))
                                 + 16 * (*(_BYTE *)(a1 + 64) + v34));
        v94 = v93[1];
        v95 = v94 + 5;
        if (v49 || v92 != 2)
        {
          if (v49)
          {
            v97 = v94 + 5;
            if (v92 - 2 != v49)
              goto LABEL_123;
            v96 = *(int *)(a1 + 16);
          }
          else
          {
            v96 = *(int *)(a1 + 12);
          }
        }
        else
        {
          v96 = *(int *)(a1 + 20);
        }
        v97 = v95 + v96;
LABEL_123:
        if (v79 < v97)
        {
LABEL_124:
          v49 = v34;
          v90 = v91 - 1;
          v34 = v92;
          goto LABEL_44;
        }
        if (!v94)
          goto LABEL_178;
        v12 = *v93;
        v98 = *(_QWORD *)(a1 + 88);
        v99 = *(_QWORD *)(a1 + 96);
        v100 = 170 * ((v99 - v98) >> 3) - 1;
        v101 = *(_BYTE *)v12;
        if (v99 == v98)
          v100 = 0;
        if (v100 == *(_QWORD *)(a1 + 112) + v91)
        {
          v102 = v49;
          std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
          v49 = v102;
          v98 = *(_QWORD *)(a1 + 88);
          v99 = *(_QWORD *)(a1 + 96);
        }
        if (v99 == v98)
          goto LABEL_176;
        v103 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
        v104 = *(_QWORD *)(v98 + 8 * (v103 / 0xAA));
        if (!v104)
          goto LABEL_176;
        v105 = v104 + 24 * (v103 % 0xAA);
        *(_QWORD *)v105 = v12;
        *(_QWORD *)(v105 + 8) = v94;
        *(_WORD *)(v105 + 16) = 0;
        *(_BYTE *)(v105 + 18) = 1;
        *(_BYTE *)(v105 + 19) = v101;
        v90 = *(_QWORD *)(a1 + 120);
        v91 = v90 + 1;
        *(_QWORD *)(a1 + 120) = v90 + 1;
        v34 = v49 + 2;
        v92 = *(_QWORD *)(a1 + 72);
        if (v49 + 2 != v92)
        {
          v106 = v79 - v95;
          do
          {
            v107 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                                  + (((v34 + *(_QWORD *)(a1 + 64)) >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * (v34 + *(_BYTE *)(a1 + 64)));
            v108 = v107[1];
            v109 = v108 + 2;
            v110 = v92 - 1;
            if (v49 || v34 != v110)
            {
              if (v49)
              {
                v112 = v108 + 2;
                if (v34 != v110)
                  goto LABEL_142;
                v111 = *(int *)(a1 + 16);
              }
              else
              {
                v111 = *(int *)(a1 + 12);
              }
            }
            else
            {
              v111 = *(int *)(a1 + 20);
            }
            v112 = v109 + v111;
LABEL_142:
            if (v106 < v112)
              goto LABEL_124;
            if (!v108)
              goto LABEL_178;
            v12 = *v107;
            v113 = *(_QWORD *)(a1 + 88);
            v114 = *(_QWORD *)(a1 + 96);
            v115 = 170 * ((v114 - v113) >> 3) - 1;
            v116 = *(_BYTE *)v12;
            if (v114 == v113)
              v115 = 0;
            if (v115 == *(_QWORD *)(a1 + 112) + v91)
            {
              v117 = v9;
              v118 = v8;
              v119 = v49;
              std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
              v49 = v119;
              v8 = v118;
              v9 = v117;
              v113 = *(_QWORD *)(a1 + 88);
              v114 = *(_QWORD *)(a1 + 96);
            }
            if (v114 == v113)
              goto LABEL_176;
            v120 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
            v121 = *(_QWORD *)(v113 + 8 * (v120 / 0xAA));
            if (!v121)
              goto LABEL_176;
            v122 = v121 + 24 * (v120 % 0xAA);
            *(_QWORD *)v122 = v12;
            *(_QWORD *)(v122 + 8) = v108;
            *(_WORD *)(v122 + 16) = 0;
            *(_BYTE *)(v122 + 18) = 1;
            *(_BYTE *)(v122 + 19) = v116;
            v90 = *(_QWORD *)(a1 + 120);
            v91 = v90 + 1;
            *(_QWORD *)(a1 + 120) = v90 + 1;
            ++v34;
            v92 = *(_QWORD *)(a1 + 72);
            v106 -= v109;
          }
          while (v34 != v92);
        }
LABEL_43:
        v49 = v34;
LABEL_44:
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * ((*(_QWORD *)(a1 + 112) + v90) / 0xAAuLL))
                 + 24 * ((*(_QWORD *)(a1 + 112) + v90) % 0xAAuLL)
                 + 17) = 1;
        if (v49 >= v34)
          return;
      }
      else
      {
        v57 = *(char **)(v54 + 16 * v55);
        if (!v56)
          v57 = 0;
        v152 = v57;
        v156 = *(_OWORD *)v8;
        LODWORD(v156) = v156 - 2;
        v58 = v34 - 1;
        if (v34 == 1)
          goto LABEL_58;
        if (v58 == v49)
        {
          HIDWORD(v156) = *(_DWORD *)(a1 + 16);
LABEL_58:
          if (!v49)
          {
            v149 = 0;
            if (v34 == 1)
              goto LABEL_61;
            goto LABEL_60;
          }
          goto LABEL_101;
        }
        if (!v49)
        {
          HIDWORD(v156) = *(_DWORD *)(a1 + 12);
          v149 = 0;
LABEL_60:
          DWORD2(v156) = 0;
          goto LABEL_61;
        }
        HIDWORD(v156) = 0;
LABEL_101:
        DWORD1(v156) = 0;
        v149 = v49;
        if (v58 != v49)
          goto LABEL_60;
LABEL_61:
        v59 = v56 - 1;
        webrtc::RtpPacketizer::SplitAboutEqually(v56 - 1, (int *)&v156, &v154);
        v60 = v154;
        v12 = (unint64_t)v155;
        if (v154 != v155)
        {
          v61 = 0;
          v147 = v155;
          v148 = v154;
          v62 = v155 - v154;
          v63 = 1;
          v64 = v154;
          v65 = v151;
          while (1)
          {
            v12 = v64[v61];
            if ((int)v12 <= 0)
              break;
            v66 = &v152[v63];
            v67 = v65 - v63;
            if (v67 >= v12)
              v67 = v64[v61];
            if (!v67)
              v66 = 0;
            if (v65 > v63)
              v68 = v67;
            else
              v68 = 0;
            if (v65 > v63)
              v69 = v66;
            else
              v69 = 0;
            v70 = *(_QWORD *)(a1 + 88);
            v71 = *(_QWORD *)(a1 + 96);
            v72 = 170 * ((v71 - v70) >> 3) - 1;
            if (v71 == v70)
              v72 = 0;
            v73 = v61 == v62 - 1;
            v74 = *v152;
            if (v68)
              v75 = v69;
            else
              v75 = 0;
            if (v72 == *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112))
            {
              std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
              v65 = v151;
              v70 = *(_QWORD *)(a1 + 88);
              v71 = *(_QWORD *)(a1 + 96);
            }
            if (v71 == v70)
              goto LABEL_176;
            v76 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
            v77 = *(_QWORD *)(v70 + 8 * (v76 / 0xAA));
            if (!v77)
              goto LABEL_176;
            v78 = v77 + 24 * (v76 % 0xAA);
            *(_QWORD *)v78 = v75;
            *(_QWORD *)(v78 + 8) = v68;
            *(_BYTE *)(v78 + 16) = v61 == 0;
            *(_BYTE *)(v78 + 17) = v73;
            *(_BYTE *)(v78 + 18) = 0;
            *(_BYTE *)(v78 + 19) = v74;
            ++*(_QWORD *)(a1 + 120);
            v63 += v12;
            v59 -= v12;
            ++v61;
            v64 = v154;
            v62 = v155 - v154;
            if (v61 >= v62)
            {
              v9 = v145;
              v8 = v146;
              *v145 += v62;
              v12 = (unint64_t)v147;
              v60 = v148;
              if (v59)
                goto LABEL_181;
              if (!v64)
                goto LABEL_87;
              goto LABEL_86;
            }
          }
LABEL_177:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 145, "packet_length > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v14, v15, v16, v17, v12);
LABEL_178:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 182, "fragment.size() > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v14, v15, v16, v17, 0);
LABEL_179:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 164, "payload_size_left >= fragment.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v14, v15, v16, v17, v50);
LABEL_180:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 203, "aggregated_fragments > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v14, v15, v16, v17, 0);
LABEL_181:
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 154, "0 == payload_left", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v14, v15, v16, v17, 0);
          goto LABEL_182;
        }
        v64 = v154;
        if (v154)
        {
LABEL_86:
          v155 = v64;
          operator delete(v64);
        }
LABEL_87:
        if (v60 == (int *)v12)
          goto LABEL_36;
        v49 = v149 + 1;
        v34 = *(_QWORD *)(a1 + 72);
        if (v149 + 1 >= v34)
          return;
      }
    }
    v51 = *(_DWORD *)(a1 + 20);
LABEL_51:
    v52 = v50 - v51;
    goto LABEL_52;
  }
  v40 = 12;
  if (v34 == 1)
    v40 = 20;
  v12 = *(int *)(a1 + 8) - (uint64_t)*(int *)(a1 + v40);
  v41 = *(_QWORD *)(v32 + ((*(_QWORD *)(a1 + 64) >> 5) & 0x7FFFFFFFFFFFFF8))
      + 16 * *(_QWORD *)(a1 + 64);
  v42 = *(_QWORD *)(v41 + 8);
  if (v12 < v42)
  {
LABEL_34:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v43, v44, v45, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc");
LABEL_36:
    *(_QWORD *)(a1 + 24) = 0;
    v46 = *(_QWORD *)(a1 + 120);
    if (v46)
    {
      v47 = *(void ***)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 112);
      while (*(void **)((char *)v47
                       + (((unint64_t)((v48 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
      {
        --v46;
        *(_QWORD *)(a1 + 112) = ++v48;
        *(_QWORD *)(a1 + 120) = v46;
        if (v48 >= 0x154)
        {
          operator delete(*v47);
          v47 = (void **)(*(_QWORD *)(a1 + 88) + 8);
          *(_QWORD *)(a1 + 88) = v47;
          v46 = *(_QWORD *)(a1 + 120);
          v48 = *(_QWORD *)(a1 + 112) - 170;
          *(_QWORD *)(a1 + 112) = v48;
        }
        if (!v46)
          return;
      }
LABEL_176:
      __break(1u);
      goto LABEL_177;
    }
    return;
  }
  if (!v42)
  {
LABEL_183:
    v143 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 226, "!fragment.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v14, v15, v16, v17, v144);
    webrtc::RtpPacketizerH264::~RtpPacketizerH264((void **)&v143->__r_.__value_.__l.__data_);
    return;
  }
  v123 = *(unsigned __int8 **)v41;
  v124 = *(_QWORD *)(a1 + 88);
  v125 = *(_QWORD *)(a1 + 96);
  v126 = 170 * ((v125 - v124) >> 3) - 1;
  v12 = *v123;
  if (v125 == v124)
    v126 = 0;
  if (v126 == *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112))
  {
    std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
    v124 = *(_QWORD *)(a1 + 88);
    v125 = *(_QWORD *)(a1 + 96);
  }
  if (v125 == v124)
    goto LABEL_176;
  v127 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
  v128 = *(_QWORD *)(v124 + 8 * (v127 / 0xAA));
  if (!v128)
    goto LABEL_176;
  v129 = v128 + 24 * (v127 % 0xAA);
  *(_QWORD *)v129 = v123;
  *(_QWORD *)(v129 + 8) = v42;
  *(_WORD *)(v129 + 16) = 257;
  *(_BYTE *)(v129 + 18) = 0;
  *(_BYTE *)(v129 + 19) = v12;
  v130 = *(_QWORD *)(a1 + 120) + 1;
  *(_QWORD *)(a1 + 120) = v130;
  ++*(_QWORD *)(a1 + 24);
  v131 = *(_QWORD *)(a1 + 72);
  if (v131 >= 2)
  {
    for (i = 1; i < v131; ++i)
    {
      v12 = *v8;
      if (v131 == 1)
      {
        v133 = *(int *)(a1 + 20);
      }
      else
      {
        if (i + 1 != v131)
          goto LABEL_166;
        v133 = *(int *)(a1 + 16);
      }
      v12 -= v133;
LABEL_166:
      v134 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40)
                                            + (((i + *(_QWORD *)(a1 + 64)) >> 5) & 0x7FFFFFFFFFFFFF8))
                                + 16 * (i + *(_BYTE *)(a1 + 64)));
      v135 = v134[1];
      if (v12 < v135)
        goto LABEL_34;
      if (!v135)
        goto LABEL_183;
      v12 = *v134;
      v136 = *(_QWORD *)(a1 + 88);
      v137 = *(_QWORD *)(a1 + 96);
      v138 = 170 * ((v137 - v136) >> 3) - 1;
      v139 = *(_BYTE *)v12;
      if (v137 == v136)
        v138 = 0;
      if (v138 == *(_QWORD *)(a1 + 112) + v130)
      {
        std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v150);
        v136 = *(_QWORD *)(a1 + 88);
        v137 = *(_QWORD *)(a1 + 96);
      }
      if (v137 == v136)
        goto LABEL_176;
      v140 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
      v141 = *(_QWORD *)(v136 + 8 * (v140 / 0xAA));
      if (!v141)
        goto LABEL_176;
      v142 = v141 + 24 * (v140 % 0xAA);
      *(_QWORD *)v142 = v12;
      *(_QWORD *)(v142 + 8) = v135;
      *(_WORD *)(v142 + 16) = 257;
      *(_BYTE *)(v142 + 18) = 0;
      *(_BYTE *)(v142 + 19) = v139;
      v130 = *(_QWORD *)(a1 + 120) + 1;
      *(_QWORD *)(a1 + 120) = v130;
      ++*(_QWORD *)(a1 + 24);
      v131 = *(_QWORD *)(a1 + 72);
    }
  }
}

void webrtc::RtpPacketizerH264::~RtpPacketizerH264(void **this)
{
  void **v1;

  *this = &off_24C0BC8F0;
  v1 = this + 4;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 10);
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100](v1);
}

{
  void **v1;

  *this = &off_24C0BC8F0;
  v1 = this + 4;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 10);
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100](v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpPacketizerH264::NumPackets(webrtc::RtpPacketizerH264 *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t webrtc::RtpPacketizerH264::NextPacket(webrtc::RtpPacketizerH264 *this, webrtc::RtpPacketToSend *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char **v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void **v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  _BYTE *v44;
  char v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void **v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  _BOOL4 v64;
  unint64_t v65;
  uint64_t v66;
  size_t v67;
  const void *v68;
  const void *v69;
  void **v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void **v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;
  std::string *v83;
  uint64_t v84;

  v9 = *((_QWORD *)this + 15);
  if (!v9)
    return v9 != 0;
  v12 = *((_QWORD *)this + 14);
  v13 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v12 / 0xAA));
  v14 = v12 % 0xAA;
  v15 = (char **)(v13 + 24 * v14);
  v16 = *((unsigned __int8 *)v15 + 17);
  if (*((_BYTE *)v15 + 16))
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v30 = *v15;
    v29 = (size_t)v15[1];
    *((_QWORD *)a2 + 3) = 0;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
    v31 = *((_QWORD *)a2 + 11);
    if (v31)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v31 + 8) - *((_QWORD *)a2 + 12)));
    *((_QWORD *)a2 + 3) = v29;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v29));
    v32 = *((_QWORD *)a2 + 2);
    v33 = *((_QWORD *)a2 + 11);
    if (v33)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v33 + 8) - *((_QWORD *)a2 + 12)));
      v33 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12);
    }
    memcpy((void *)(v33 + v32), v30, v29);
    v34 = (void **)*((_QWORD *)this + 11);
    v35 = *((_QWORD *)this + 14);
    if (*(void **)((char *)v34
                  + (((unint64_t)((v35 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
    {
      v36 = *((_QWORD *)this + 15) - 1;
      v37 = v35 + 1;
      *((_QWORD *)this + 14) = v37;
      *((_QWORD *)this + 15) = v36;
      if (v37 >= 0x154)
      {
        operator delete(*v34);
        *((_QWORD *)this + 11) += 8;
        *((_QWORD *)this + 14) -= 170;
      }
      v38 = (void **)*((_QWORD *)this + 5);
      v39 = *((_QWORD *)this + 8);
      if (*(void **)((char *)v38 + ((v39 >> 5) & 0x7FFFFFFFFFFFFF8)))
      {
        v40 = *((_QWORD *)this + 9) - 1;
        v41 = v39 + 1;
        *((_QWORD *)this + 8) = v41;
        *((_QWORD *)this + 9) = v40;
        if (v41 >= 0x200)
        {
          operator delete(*v38);
          *((_QWORD *)this + 5) += 8;
          *((_QWORD *)this + 8) -= 256;
        }
LABEL_58:
        v79 = *((_QWORD *)this + 15) == 0;
        *(_BYTE *)a2 = v79;
        v80 = *((_QWORD *)a2 + 12);
        v81 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v80 + 1);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v80));
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v81 & 0x7F | (v79 << 7);
        --*((_QWORD *)this + 3);
        return v9 != 0;
      }
    }
    goto LABEL_60;
  }
  if (!*((_BYTE *)v15 + 18))
  {
    v42 = v13 + 24 * v14;
    v43 = *(_BYTE *)(v42 + 19);
    v8 = v43 & 0xE0 | 0x1Cu;
    v44 = (_BYTE *)(v42 + 17);
    v45 = v43 & 0x1F | ((*((_BYTE *)v15 + 16) != 0) << 7) | ((v16 != 0) << 6);
    v46 = (size_t)v15[1];
    if (v46)
      v30 = *v15;
    else
      v30 = 0;
    v47 = v46 + 2;
    *((_QWORD *)a2 + 3) = 0;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
    v48 = *((_QWORD *)a2 + 11);
    if (v48)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v48 + 8) - *((_QWORD *)a2 + 12)));
    *((_QWORD *)a2 + 3) = v47;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v47));
    v49 = *((_QWORD *)a2 + 2);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - *((_QWORD *)a2 + 12)));
    v50 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + v49);
    *v50 = v8;
    v50[1] = v45;
    memcpy(v50 + 2, v30, v46);
    if (*v44)
    {
      v51 = (void **)*((_QWORD *)this + 5);
      v52 = *((_QWORD *)this + 8);
      if (!*(void **)((char *)v51 + ((v52 >> 5) & 0x7FFFFFFFFFFFFF8)))
      {
LABEL_60:
        __break(1u);
LABEL_61:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 272, "index + kLengthFieldSize + fragment.size() <= payload_capacity", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v22, v23, v24, v25, v8);
LABEL_62:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 260, "payload_capacity >= kNalHeaderSize", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, (uint64_t)v30);
LABEL_63:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 264, "packet->first_fragment", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v22, v23, v24, v25, v84);
        goto LABEL_64;
      }
      v53 = *((_QWORD *)this + 9) - 1;
      v54 = v52 + 1;
      *((_QWORD *)this + 8) = v54;
      *((_QWORD *)this + 9) = v53;
      if (v54 >= 0x200)
      {
        operator delete(*v51);
        *((_QWORD *)this + 5) += 8;
        *((_QWORD *)this + 8) -= 256;
      }
    }
    v55 = (void **)*((_QWORD *)this + 11);
    v56 = *((_QWORD *)this + 14);
    if (*(void **)((char *)v55
                  + (((unint64_t)((v56 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
    {
      v57 = *((_QWORD *)this + 15) - 1;
      v58 = v56 + 1;
      *((_QWORD *)this + 14) = v58;
      *((_QWORD *)this + 15) = v57;
      if (v58 >= 0x154)
      {
        operator delete(*v55);
        *((_QWORD *)this + 11) += 8;
        *((_QWORD *)this + 14) -= 170;
      }
      goto LABEL_58;
    }
    goto LABEL_60;
  }
  v18 = *((_QWORD *)a2 + 11);
  if (v18)
    v18 = *(_QWORD *)(v18 + 8) - *((_QWORD *)a2 + 12);
  v19 = (uint64_t *)*((_QWORD *)a2 + 2);
  v20 = (char *)v19 + *((_QWORD *)a2 + 3) + *((unsigned __int8 *)a2 + 2);
  v30 = (char *)(v18 - (_QWORD)v20);
  if ((char *)v18 == v20)
    goto LABEL_62;
  *((_QWORD *)a2 + 3) = 0;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, v19);
  v21 = *((_QWORD *)a2 + 11);
  if (v21)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v21 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v30;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)&v30[*((_QWORD *)a2 + 2)]);
  v26 = *((_QWORD *)a2 + 2);
  v27 = *((_QWORD *)a2 + 11);
  if (v27)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v27 + 8) - *((_QWORD *)a2 + 12)));
    v28 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12);
  }
  else
  {
    v28 = 0;
  }
  v59 = *((_QWORD *)this + 14);
  v60 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (v59 / 0xAA));
  v61 = v59 % 0xAA;
  if (!*(_BYTE *)(v60 + 24 * v61 + 16))
    goto LABEL_63;
  v62 = (_BYTE *)(v28 + v26);
  v63 = (_BYTE *)(v60 + 24 * v61);
  *v62 = v63[19] & 0xE0 | 0x18;
  v64 = v63[17] == 0;
  if (v63[18])
  {
    v65 = v60 + 24 * v61;
    v66 = 1;
    while (1)
    {
      v67 = *(_QWORD *)(v65 + 8);
      v8 = v67 + v66 + 2;
      if (v8 > (unint64_t)v30)
        goto LABEL_61;
      v68 = *(const void **)v65;
      if (v67)
        v69 = v68;
      else
        v69 = 0;
      *(_WORD *)&v62[v66] = bswap32(v67) >> 16;
      memcpy(&v62[v66 + 2], v69, v67);
      v70 = (void **)*((_QWORD *)this + 11);
      v71 = *((_QWORD *)this + 14);
      if (!*(void **)((char *)v70
                     + (((unint64_t)((v71 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_60;
      v72 = *((_QWORD *)this + 15) - 1;
      v73 = v71 + 1;
      *((_QWORD *)this + 14) = v73;
      *((_QWORD *)this + 15) = v72;
      if (v73 >= 0x154)
      {
        operator delete(*v70);
        *((_QWORD *)this + 11) += 8;
        *((_QWORD *)this + 14) -= 170;
      }
      v74 = (void **)*((_QWORD *)this + 5);
      v75 = *((_QWORD *)this + 8);
      if (!*(void **)((char *)v74 + ((v75 >> 5) & 0x7FFFFFFFFFFFFF8)))
        goto LABEL_60;
      v76 = *((_QWORD *)this + 9) - 1;
      v77 = v75 + 1;
      *((_QWORD *)this + 8) = v77;
      *((_QWORD *)this + 9) = v76;
      if (v77 >= 0x200)
      {
        operator delete(*v74);
        *((_QWORD *)this + 5) += 8;
        *((_QWORD *)this + 8) -= 256;
      }
      if (!v64)
        goto LABEL_56;
      v65 = *(_QWORD *)(*((_QWORD *)this + 11) + 8 * (*((_QWORD *)this + 14) / 0xAAuLL))
          + 24 * (*((_QWORD *)this + 14) % 0xAAuLL);
      v64 = *(_BYTE *)(v65 + 17) == 0;
      v66 = v8;
      if (!*(_BYTE *)(v65 + 18))
        goto LABEL_55;
    }
  }
  v8 = 1;
LABEL_55:
  if (!v64)
  {
LABEL_56:
    *((_QWORD *)a2 + 3) = v8;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v8));
    v78 = *((_QWORD *)a2 + 11);
    if (v78)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v78 + 8) - *((_QWORD *)a2 + 12)));
    goto LABEL_58;
  }
LABEL_64:
  v83 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_h264.cc", 286, "is_last_fragment", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v22, v23, v24, v25, v84);
  return std::deque<rtc::ArrayView<unsigned char const,-4711l>>::__add_back_capacity(v83);
}

void std::deque<rtc::ArrayView<unsigned char const,-4711l>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  void *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 *v79;
  _OWORD *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  __int128 *v87;
  _OWORD *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  void *v92;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_4;
    v27 = *(char **)a1;
    v28 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 > *(_QWORD *)a1)
    {
LABEL_23:
      v29 = v28 >> 3;
      if (v29 >= -1)
        v30 = v29 + 1;
      else
        v30 = v29 + 2;
      v31 = v30 >> 1;
      v32 = -v31;
      v33 = &v7[-8 * v31];
      v34 = v5 - v7;
      if (v5 != v7)
      {
        memmove(&v7[-8 * v31], v7, v5 - v7);
        v7 = *(char **)(a1 + 8);
      }
      v5 = &v33[v34];
      *(_QWORD *)(a1 + 8) = &v7[8 * v32];
      *(_QWORD *)(a1 + 16) = &v33[v34];
LABEL_31:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v36 = (v5 - v27) >> 2;
    if (v5 == v27)
      v36 = 1;
    if (v36 >> 61)
      goto LABEL_86;
    v37 = v36 >> 2;
    v38 = 8 * v36;
    v39 = (char *)operator new(8 * v36);
    v40 = &v39[8 * v37];
    v42 = v5 - v7;
    v41 = v5 == v7;
    v5 = v40;
    if (!v41)
    {
      v5 = &v40[v42 & 0xFFFFFFFFFFFFFFF8];
      v43 = v42 - 8;
      if ((unint64_t)(v42 - 8) < 0x38)
      {
        v44 = &v39[8 * v37];
        do
        {
LABEL_76:
          v83 = *(_QWORD *)v7;
          v7 += 8;
          *(_QWORD *)v44 = v83;
          v44 += 8;
        }
        while (v44 != v5);
        goto LABEL_77;
      }
      v76 = &v39[8 * v37];
      v44 = v76;
      if ((unint64_t)(v76 - v7) < 0x20)
        goto LABEL_76;
      v77 = (v43 >> 3) + 1;
      v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
      v44 = &v40[v78];
      v7 += v78;
      v79 = (__int128 *)(v6 + 3);
      v80 = v76 + 16;
      v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v82 = *v79;
        *(v80 - 1) = *(v79 - 1);
        *v80 = v82;
        v79 += 2;
        v80 += 2;
        v81 -= 4;
      }
      while (v81);
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_76;
    }
LABEL_77:
    *(_QWORD *)a1 = v39;
    *(_QWORD *)(a1 + 8) = v40;
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = &v39[v38];
    if (v27)
    {
      operator delete(v27);
      v5 = *(char **)(a1 + 16);
    }
LABEL_4:
    if (!v5)
      goto LABEL_5;
    goto LABEL_31;
  }
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v10 - v11;
    v13 = (v10 - v11) >> 3;
    v14 = v9 - *(_QWORD *)a1;
    if (v13 >= (unint64_t)(v14 >> 3))
      break;
    if (v9 != v10)
    {
      v92 = operator new(0x1000uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)a1, &v92);
      return;
    }
    v92 = operator new(0x1000uLL);
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)a1, &v92);
    v35 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v35 + 1);
    v8 = *v35;
    *(_QWORD *)(a1 + 8) = v35 + 1;
    if (v5 == *(char **)(a1 + 24))
    {
      v67 = *(char **)a1;
      v28 = (uint64_t)&v7[-*(_QWORD *)a1];
      if ((unint64_t)v7 > *(_QWORD *)a1)
        goto LABEL_23;
      v68 = (v5 - v67) >> 2;
      if (v5 == v67)
        v68 = 1;
      if (v68 >> 61)
        goto LABEL_86;
      v69 = v68 >> 2;
      v70 = 8 * v68;
      v71 = (char *)operator new(8 * v68);
      v72 = &v71[8 * v69];
      v73 = v5 - v7;
      v41 = v5 == v7;
      v5 = v72;
      if (!v41)
      {
        v5 = &v72[v73 & 0xFFFFFFFFFFFFFFF8];
        v74 = v73 - 8;
        if ((unint64_t)(v73 - 8) < 0x38)
        {
          v75 = &v71[8 * v69];
          goto LABEL_83;
        }
        v84 = &v71[8 * v69];
        v75 = v84;
        if ((unint64_t)(v84 - v7) < 0x20)
          goto LABEL_89;
        v85 = (v74 >> 3) + 1;
        v86 = 8 * (v85 & 0x3FFFFFFFFFFFFFFCLL);
        v75 = &v72[v86];
        v7 += v86;
        v87 = (__int128 *)(v35 + 3);
        v88 = v84 + 16;
        v89 = v85 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v90 = *v87;
          *(v88 - 1) = *(v87 - 1);
          *v88 = v90;
          v87 += 2;
          v88 += 2;
          v89 -= 4;
        }
        while (v89);
        if (v85 != (v85 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_89:
          do
          {
LABEL_83:
            v91 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v75 = v91;
            v75 += 8;
          }
          while (v75 != v5);
        }
      }
      *(_QWORD *)a1 = v71;
      *(_QWORD *)(a1 + 8) = v72;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = &v71[v70];
      if (v67)
      {
        operator delete(v67);
        v5 = *(char **)(a1 + 16);
      }
    }
    if (v5)
      goto LABEL_31;
LABEL_5:
    __break(1u);
  }
  v15 = v14 >> 2;
  if (v9 == *(_QWORD *)a1)
    v16 = 1;
  else
    v16 = v15;
  if (v16 >> 61)
    goto LABEL_86;
  v17 = (char *)operator new(8 * v16);
  v18 = &v17[8 * v13];
  v19 = &v17[8 * v16];
  v20 = operator new(0x1000uLL);
  v21 = v20;
  if (v13 != v16)
  {
LABEL_18:
    *(_QWORD *)v18 = v20;
    v23 = v18 + 8;
    if (v10 != v11)
      goto LABEL_46;
    goto LABEL_19;
  }
  if (v12 >= 1)
  {
    v22 = v13 + 2;
    if (v13 >= -1)
      v22 = v13 + 1;
    v18 -= 8 * (v22 >> 1);
    goto LABEL_18;
  }
  v45 = v12 >> 2;
  if (v10 == v11)
    v45 = 1;
  if (v45 >> 61)
LABEL_86:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v46 = 8 * v45;
  v18 = (char *)operator new(8 * v45);
  operator delete(v17);
  v19 = &v18[v46];
  v47 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v17 = v18;
  *(_QWORD *)v18 = v21;
  v23 = v18 + 8;
  if (v10 != v47)
  {
    while (1)
    {
LABEL_46:
      if (v18 == v17)
      {
        if (v23 >= v19)
        {
          v52 = (v19 - v18) >> 2;
          if (v19 == v18)
            v52 = 1;
          if (v52 >> 61)
            goto LABEL_86;
          v53 = (v52 + 3) >> 2;
          v54 = 8 * v52;
          v55 = (char *)operator new(8 * v52);
          v17 = v55;
          v48 = &v55[8 * v53];
          v25 = v48;
          v56 = v23 - v18;
          if (v23 != v18)
          {
            v25 = &v48[v56 & 0xFFFFFFFFFFFFFFF8];
            v57 = v56 - 8;
            v58 = &v55[8 * v53];
            v59 = v18;
            if (v57 < 0x38)
              goto LABEL_90;
            v58 = &v55[8 * v53];
            v59 = v18;
            if ((unint64_t)(v58 - v18) < 0x20)
              goto LABEL_90;
            v60 = (v57 >> 3) + 1;
            v61 = 8 * (v60 & 0x3FFFFFFFFFFFFFFCLL);
            v58 = &v48[v61];
            v59 = &v18[v61];
            v62 = (__int128 *)(v18 + 16);
            v63 = &v55[8 * v53 + 16];
            v64 = v60 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v65 = *v62;
              *((_OWORD *)v63 - 1) = *(v62 - 1);
              *(_OWORD *)v63 = v65;
              v62 += 2;
              v63 += 32;
              v64 -= 4;
            }
            while (v64);
            if (v60 != (v60 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_90:
              do
              {
                v66 = *(_QWORD *)v59;
                v59 += 8;
                *(_QWORD *)v58 = v66;
                v58 += 8;
              }
              while (v58 != v25);
            }
          }
          v19 = &v55[v54];
          operator delete(v18);
        }
        else
        {
          v50 = (v19 - v23) >> 3;
          if (v50 >= -1)
            v51 = v50 + 1;
          else
            v51 = v50 + 2;
          v25 = &v23[8 * (v51 >> 1)];
          v48 = &v18[8 * (v51 >> 1)];
          if (v23 == v18)
          {
            v17 = v23;
          }
          else
          {
            memmove(&v18[8 * (v51 >> 1)], v18, v23 - v18);
            v17 = v18;
          }
        }
      }
      else
      {
        v48 = v18;
        v25 = v23;
      }
      v49 = *(_QWORD *)(v10 - 8);
      v10 -= 8;
      *((_QWORD *)v48 - 1) = v49;
      v24 = v48 - 8;
      v23 = v25;
      v18 = v24;
      if (v10 == *(_QWORD *)(a1 + 8))
        goto LABEL_20;
    }
  }
LABEL_19:
  v24 = v18;
  v25 = v23;
LABEL_20:
  v26 = *(char **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v24;
  *(_QWORD *)(a1 + 16) = v25;
  *(_QWORD *)(a1 + 24) = v19;
  if (v26)
    operator delete(v26);
}

void webrtc::RtpPacketizerGeneric::~RtpPacketizerGeneric(webrtc::RtpPacketizerGeneric *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BC920;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BC920;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpPacketizerGeneric::NumPackets(webrtc::RtpPacketizerGeneric *this)
{
  return (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 8)) >> 2;
}

uint64_t webrtc::RtpPacketizerGeneric::NextPacket(webrtc::RtpPacketizerGeneric *this, webrtc::RtpPacketToSend *a2)
{
  int *v2;
  int *v3;
  size_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  size_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (int *)*((_QWORD *)this + 6);
  v3 = (int *)*((_QWORD *)this + 8);
  if (v3 == v2)
    return v3 != v2;
  v6 = *v3;
  v7 = *((_QWORD *)this + 2) + v6;
  *((_QWORD *)a2 + 3) = 0;
  v8 = (uint64_t *)((char *)a2 + 88);
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
  v9 = *((_QWORD *)a2 + 11);
  if (v9)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(v9 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v7;
  rtc::CopyOnWriteBuffer::SetSize(v8, (uint64_t *)(*((_QWORD *)a2 + 2) + v7));
  v14 = *((_QWORD *)a2 + 11);
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 2);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(v14 + 8) - *((_QWORD *)a2 + 12)));
    v16 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16);
    if (v16)
    {
      v17 = *((_QWORD *)a2 + 12) + v15;
      v18 = v16 + v17;
      v19 = *((_QWORD *)this + 2);
      if (v19)
      {
        memcpy((void *)(v16 + v17), (char *)this + 8, v19);
        *((_BYTE *)this + 8) &= ~2u;
        v20 = *((_QWORD *)this + 2);
      }
      else
      {
        v20 = 0;
      }
      memcpy((void *)(v18 + v20), *((const void **)this + 3), v6);
      v21 = *((_QWORD *)this + 4);
      if (v21 <= v6)
      {
        v21 = 0;
        v22 = 0;
      }
      else
      {
        if (v21 - v6 < v21)
          v21 -= v6;
        if (v21)
          v22 = *((_QWORD *)this + 3) + v6;
        else
          v22 = 0;
      }
      *((_QWORD *)this + 3) = v22;
      *((_QWORD *)this + 4) = v21;
      *((_QWORD *)this + 8) += 4;
      v23 = v21 == 0;
      *(_BYTE *)a2 = v21 == 0;
      v24 = *((_QWORD *)a2 + 12);
      v25 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v24 + 1);
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v24));
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v25 & 0x7F | (v23 << 7);
      return v3 != v2;
    }
  }
  v27 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_video_generic.cc", 60, "out_ptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v29);
  return webrtc::RtpPacketizerVp8::BuildHeader((uint64_t)v27, v28);
}

uint64_t webrtc::RtpPacketizerVp8::BuildHeader@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  int v2;
  int v3;
  int v4;
  int v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  v2 = *(unsigned __int8 *)(result + 6);
  v3 = *(_DWORD *)(result + 8);
  v4 = *(unsigned __int16 *)(result + 4);
  v5 = *(unsigned __int16 *)(result + 2);
  if (v4 == 0xFFFF)
    v6 = (v5 != 0xFFFF) << 7;
  else
    v6 = ((v5 != 0xFFFF) << 7) | 0x40;
  if (v2 != 255)
    v6 |= 0x20u;
  v7 = v6 | 0x10;
  if (v3 == -1)
    v7 = v6;
  if (*(_BYTE *)result)
    v8 = ((v7 != 0) << 7) | 0x20;
  else
    v8 = (v7 != 0) << 7;
  *(_BYTE *)(a2 + 8) = v8 | 0x10;
  v9 = a2 + 8;
  *(_QWORD *)a2 = 2;
  if (v7)
  {
    *(_BYTE *)(a2 + 9) = v7;
    v10 = 4;
    *(_QWORD *)a2 = 4;
    if (v5 == 0xFFFF)
    {
      v11 = 2;
      if (v4 == 0xFFFF)
        goto LABEL_17;
    }
    else
    {
      *(_BYTE *)(a2 + 10) = BYTE1(v5) | 0x80;
      *(_BYTE *)(a2 + 11) = v5;
      v10 = 8;
      *(_QWORD *)a2 = 8;
      v11 = 4;
      if (v4 == 0xFFFF)
      {
LABEL_17:
        if (v2 != 255 || v3 != -1)
        {
          if (v2 == 255)
          {
            v12 = 0;
          }
          else if (*(_BYTE *)(result + 7))
          {
            v12 = ((_BYTE)v2 << 6) | 0x20;
          }
          else
          {
            v12 = (_BYTE)v2 << 6;
          }
          if (v3 == -1)
            v13 = 0;
          else
            v13 = v3 & 0x1F;
          *(_BYTE *)(v9 + (v10 >> 1)) = v12 | v13;
          *(_QWORD *)a2 += 2;
        }
        return result;
      }
    }
    *(_BYTE *)(v9 + v11) = v4;
    v10 |= 2uLL;
    *(_QWORD *)a2 = v10;
    goto LABEL_17;
  }
  return result;
}

void webrtc::RtpPacketizerVp8::~RtpPacketizerVp8(webrtc::RtpPacketizerVp8 *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0BC950;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    operator delete(*((void **)this + 2));
}

{
  void *v2;

  *(_QWORD *)this = off_24C0BC950;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpPacketizerVp8::NumPackets(webrtc::RtpPacketizerVp8 *this)
{
  return (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 9)) >> 2;
}

uint64_t webrtc::RtpPacketizerVp8::NextPacket(webrtc::RtpPacketizerVp8 *this, webrtc::RtpPacketToSend *a2)
{
  int *v2;
  int *v3;
  size_t v6;
  size_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char **v19;
  char **v20;
  size_t v21;
  size_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  uint64_t v34;

  v2 = (int *)*((_QWORD *)this + 7);
  v3 = (int *)*((_QWORD *)this + 9);
  if (v3 == v2)
    return v3 != v2;
  v6 = *v3;
  *((_QWORD *)this + 9) = v3 + 1;
  v7 = v6 + (*((_QWORD *)this + 1) >> 1);
  *((_QWORD *)a2 + 3) = 0;
  v8 = (uint64_t *)((char *)a2 + 88);
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
  v9 = *((_QWORD *)a2 + 11);
  if (v9)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(v9 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v7;
  rtc::CopyOnWriteBuffer::SetSize(v8, (uint64_t *)(*((_QWORD *)a2 + 2) + v7));
  v14 = *((_QWORD *)a2 + 11);
  if (v14)
  {
    v15 = *((_QWORD *)a2 + 2);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(v14 + 8) - *((_QWORD *)a2 + 12)));
    v16 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16);
    if (v16)
    {
      v17 = (char *)(v16 + *((_QWORD *)a2 + 12) + v15);
      v18 = *((_QWORD *)this + 1);
      v19 = (char **)((char *)this + 16);
      v20 = (char **)((char *)this + 16);
      if ((v18 & 1) != 0)
        v20 = (char **)*v19;
      memcpy(v17, v20, v18 >> 1);
      memcpy(&v17[*((_QWORD *)this + 1) >> 1], *((const void **)this + 4), v6);
      v21 = *((_QWORD *)this + 5);
      if (v21 <= v6)
      {
        v21 = 0;
        v22 = 0;
      }
      else
      {
        if (v21 - v6 < v21)
          v21 -= v6;
        if (v21)
          v22 = *((_QWORD *)this + 4) + v6;
        else
          v22 = 0;
      }
      *((_QWORD *)this + 4) = v22;
      *((_QWORD *)this + 5) = v21;
      v23 = *((_QWORD *)this + 1);
      if (v23 > 1)
      {
        if ((v23 & 1) != 0)
          v19 = (char **)*v19;
        *(_BYTE *)v19 &= ~0x10u;
        v24 = *((_QWORD *)this + 9) == *((_QWORD *)this + 7);
        *(_BYTE *)a2 = v24;
        v25 = *((_QWORD *)a2 + 12);
        v26 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v25 + 1);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v25));
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v26 & 0x7F | (v24 << 7);
        return v3 != v2;
      }
      __break(1u);
    }
  }
  v28 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp8.cc", 88, "buffer", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v10, v11, v12, v13, v34);
  return webrtc::RtpPacketizerVp9::RtpPacketizerVp9(v28, v29, v30, v31, v32, v33);
}

void webrtc::RtpPacketizerVp9::RtpPacketizerVp9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *__src, uint64_t a7, uint64_t a8)
{
  void *v9;
  unint64_t v10;
  int v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _WORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  void **v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  std::string *v58;
  __int128 v59;
  uint64_t v60;
  int v61[2];
  uint64_t v62;

  v62 = a5;
  *(_QWORD *)a1 = &off_24C0BC980;
  v9 = (void *)(a1 + 8);
  v10 = __src[4];
  if (v10 >= 9)
  {
LABEL_66:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 292, "original_header.num_spatial_layers <= kMaxVp9NumberOfSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, (uint64_t)__src, a7, a8, v10);
LABEL_67:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 323, "hdr_.first_active_layer == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v16, v17, v18, v19, v48);
    goto LABEL_68;
  }
  v12 = HIDWORD(a5);
  memcpy(v9, __src, 0x668uLL);
  if (__src[5])
  {
    v20 = *(_QWORD *)(a1 + 40);
    if (v20 - 9 >= 0xFFFFFFFFFFFFFFF8)
    {
      v21 = *(_QWORD *)(a1 + 48);
      v22 = v20 - v21;
      if (v20 > v21)
      {
        v23 = *(_QWORD *)(a1 + 48);
        if (v22 < 0x10)
          goto LABEL_6;
        v52 = 2 * v21;
        v53 = 2 * v21 + a1;
        v54 = v53 + 58;
        v23 = *(_QWORD *)(a1 + 48);
        if (-2 * v21 < 0x10)
          goto LABEL_6;
        v55 = v53 + 74;
        v23 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)(v55 - (a1 + 58)) < 0x10)
          goto LABEL_6;
        v23 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)(a1 + 74 - v54) < 0x10)
          goto LABEL_6;
        v23 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)(a1 + 74 - v55) < 0x10)
          goto LABEL_6;
        v23 = v21 + (v22 & 0xFFFFFFFFFFFFFFF8);
        v56 = v22 & 0xFFFFFFFFFFFFFFF8;
        v57 = a1;
        do
        {
          *(_OWORD *)(v57 + 58) = *(_OWORD *)(v57 + v52 + 58);
          *(_OWORD *)(v57 + 74) = *(_OWORD *)(v57 + v52 + 74);
          v57 += 16;
          v56 -= 8;
        }
        while (v56);
        if (v22 != (v22 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_6:
          v24 = v20 - v23;
          v25 = a1 + 2 * v23;
          do
          {
            v26 = v25 - 2 * v21;
            *(_WORD *)(v26 + 58) = *(_WORD *)(v25 + 58);
            *(_WORD *)(v26 + 74) = *(_WORD *)(v25 + 74);
            v25 += 2;
            --v24;
          }
          while (v24);
        }
      }
      if (v22 < v20)
      {
        v27 = v20 - v21;
        if (v21 < 8)
          goto LABEL_13;
        v27 = v22 + (v21 & 0xFFFFFFFFFFFFFFF8);
        v28 = (_OWORD *)(a1 - 2 * v21 + 2 * v20 + 74);
        v29 = v21 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *(v28 - 1) = 0uLL;
          *v28++ = 0uLL;
          v29 -= 8;
        }
        while (v29);
        if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_13:
          v30 = v20 - v27;
          v31 = (_WORD *)(a1 + 2 * v27 + 74);
          do
          {
            *(v31 - 8) = 0;
            *v31++ = 0;
            --v30;
          }
          while (v30);
        }
      }
      *(_BYTE *)(a1 + 21) -= v21;
      *(_QWORD *)(a1 + 40) = v22;
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  LODWORD(v32) = 0;
  if (*(_BYTE *)(a1 + 8) && *(_BYTE *)(a1 + 9))
  {
    v32 = *(unsigned __int8 *)(a1 + 25);
    if (!*(_BYTE *)(a1 + 25))
    {
LABEL_71:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 97, "hdr.num_ref_pics > 0U", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v16, v17, v18, v19, 0);
      goto LABEL_72;
    }
    if (v32 >= 4)
    {
LABEL_72:
      v58 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 98, "hdr.num_ref_pics <= kMaxVp9RefPics", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v32);
      webrtc::RtpPacketizerVp9::~RtpPacketizerVp9((webrtc::RtpPacketizerVp9 *)v58);
      return;
    }
  }
  if (*(_WORD *)(a1 + 16) == 127)
    v33 = 2;
  else
    v33 = 3;
  if (*(unsigned __int16 *)(a1 + 14) == 0xFFFF)
    v34 = 1;
  else
    v34 = v33;
  if (*(_BYTE *)(a1 + 9))
    v35 = 1;
  else
    v35 = 2;
  if ((*(_BYTE *)(a1 + 20) & *(_BYTE *)(a1 + 21)) == 0xFF)
    v36 = 0;
  else
    v36 = v35;
  v37 = v36 + v34 + v32;
  *(_DWORD *)(a1 + 1648) = v37;
  if (*(_BYTE *)(a1 + 12))
  {
    v38 = *(_QWORD *)(a1 + 40);
    if (!v38)
    {
LABEL_68:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 126, "hdr.num_spatial_layers > 0U", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v16, v17, v18, v19, 0);
      goto LABEL_69;
    }
    if (v38 >= 9)
    {
LABEL_69:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 127, "hdr.num_spatial_layers <= kMaxVp9NumberOfSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v38);
      goto LABEL_70;
    }
    v39 = *(_QWORD *)(a1 + 96);
    if (v39 >= 0x100)
    {
LABEL_70:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 128, "hdr.gof.num_frames_in_gof <= kMaxVp9FramesInGof", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v39);
      goto LABEL_71;
    }
    v40 = (4 * v38) | 1;
    if (!*(_BYTE *)(a1 + 56))
      v40 = 1;
    if (v39)
      v41 = v39 + 1;
    else
      v41 = 0;
    v42 = v41 + v40;
    if (v39)
    {
      v43 = (unsigned __int8 *)(a1 + 614);
      while (1)
      {
        v45 = *v43++;
        v44 = v45;
        if (v45 >= 4)
          break;
        v42 += v44;
        if (!--v39)
          goto LABEL_47;
      }
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 139, "hdr.gof.num_ref_pics[i] <= kMaxVp9RefPics", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v16, v17, v18, v19, v44);
      goto LABEL_66;
    }
  }
  else
  {
    v42 = 0;
  }
LABEL_47:
  *(_DWORD *)(a1 + 1652) = v42;
  if (a3)
    v46 = a2;
  else
    v46 = 0;
  *(_QWORD *)(a1 + 1656) = v46;
  *(_QWORD *)(a1 + 1664) = a3;
  v47 = (void **)(a1 + 1672);
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1688) = 0u;
  v48 = *(_QWORD *)(a1 + 48);
  if (v48)
    goto LABEL_67;
  v61[0] = a4 - v37;
  v61[1] = v42 + HIDWORD(a4);
  HIDWORD(v62) = v42 + v12;
  if (a3)
  {
    webrtc::RtpPacketizer::SplitAboutEqually(a3, v61, (int **)&v59);
    v49 = *v47;
    if (*v47)
    {
      *(_QWORD *)(a1 + 1680) = v49;
      operator delete(v49);
    }
    v50 = v59;
    *(_OWORD *)v47 = v59;
    *(_QWORD *)(a1 + 1688) = v60;
    v51 = v50;
  }
  else
  {
    v51 = 0;
  }
  *(_QWORD *)(a1 + 1696) = v51;
}

void webrtc::RtpPacketizerVp9::~RtpPacketizerVp9(webrtc::RtpPacketizerVp9 *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BC980;
  v2 = (void *)*((_QWORD *)this + 209);
  if (v2)
  {
    *((_QWORD *)this + 210) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BC980;
  v2 = (void *)*((_QWORD *)this + 209);
  if (v2)
  {
    *((_QWORD *)this + 210) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpPacketizerVp9::NumPackets(webrtc::RtpPacketizerVp9 *this)
{
  return (uint64_t)(*((_QWORD *)this + 210) - *((_QWORD *)this + 212)) >> 2;
}

uint64_t webrtc::RtpPacketizerVp9::NextPacket(webrtc::RtpPacketizerVp9 *this, webrtc::RtpPacketToSend *a2)
{
  int *v2;
  int *v5;
  size_t v6;
  int *v7;
  int v8;
  size_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  int v26;
  int v27;
  _BOOL4 v29;
  char v30;
  char v31;
  char v32;
  _BOOL4 v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  size_t v72;
  _BOOL4 v73;
  uint64_t v74;
  char v75;
  char v76;
  std::string *v77;
  rtc::BitBufferWriter *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  size_t __n;
  int *v87;
  _BYTE *v88;
  uint64_t v89;
  __int128 v90;

  v2 = (int *)*((_QWORD *)this + 212);
  if (v2 == *((int **)this + 210))
    return 0;
  v87 = (int *)*((_QWORD *)this + 210);
  v5 = (int *)*((_QWORD *)this + 209);
  v7 = v2 + 1;
  v6 = *v2;
  *((_QWORD *)this + 212) = v2 + 1;
  v8 = *((_DWORD *)this + 412);
  if (v2 == v5)
    v8 += *((_DWORD *)this + 413);
  __n = v6;
  v9 = v6 + v8;
  *((_QWORD *)a2 + 3) = 0;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
  v10 = *((_QWORD *)a2 + 11);
  if (v10)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v10 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v9;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v9));
  v15 = *((_QWORD *)a2 + 11);
  if (!v15
    || (v16 = *((_QWORD *)a2 + 2),
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v15 + 8) - *((_QWORD *)a2 + 12))), (v19 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16)) == 0))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 356, "buffer", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, v14, v85);
LABEL_100:
    v77 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 368, "hdr_.spatial_idx < hdr_.num_spatial_layers - 1 || hdr_.end_of_picture", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v67, v68, v69, v70, v85);
  }
  v20 = *((_QWORD *)a2 + 12) + v16;
  v21 = v19 + v20;
  if (v8)
    v22 = (_BYTE *)(v19 + v20);
  else
    v22 = 0;
  v23 = *((unsigned __int8 *)this + 8);
  v24 = (*((_BYTE *)this + 20) & *((_BYTE *)this + 21)) != 255;
  v25 = v8;
  v26 = *((unsigned __int16 *)this + 7);
  v27 = *((unsigned __int8 *)this + 9);
  v29 = v2 == v5 && *((_BYTE *)this + 12) != 0;
  v30 = *((_BYTE *)this + 13);
  v88 = v22;
  v89 = v8;
  if ((v8 & 0x1FFFFFFFFFFFFFFFLL) == 0)
    return 0;
  if (v24)
    v31 = 32;
  else
    v31 = 0;
  if (v29)
    v32 = 2;
  else
    v32 = 0;
  v90 = xmmword_208F08A40;
  *v22 = ((v26 != 0xFFFF) << 7) | ((_BYTE)v23 << 6) | v31 | (16 * v27) | (8 * (v2 == v5)) | (4 * (v7 == v87)) | v32 | v30;
  if (v26 == 0xFFFF)
  {
    v44 = v21;
    v45 = 1;
    if (!v24)
      goto LABEL_60;
    goto LABEL_45;
  }
  v34 = *((__int16 *)this + 7) != -1 && *((_WORD *)this + 8) != 127;
  if (v8 == 1)
    goto LABEL_38;
  if (v34)
    v35 = 0x80;
  else
    v35 = 0;
  v22[1] = v35 & 0x80 | v22[1] & 0x7F;
  v36 = 7;
  if (v34)
    v36 = 15;
  if (8 * v8 - 9 < v36)
  {
LABEL_38:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      goto LABEL_67;
    return 0;
  }
  v46 = (uint64_t)*((__int16 *)this + 7) << -(char)v36;
  v22[1] = v35 | (v46 >> 57);
  if (v34)
    v22[2] = v46 >> 49;
  v44 = v21;
  v45 = ((v36 + 1) >> 3) + 1;
  v90 = v45;
  if (v24)
  {
LABEL_45:
    if (((v89 - v45) & 0x1FFFFFFFFFFFFFFFLL) == 0)
      goto LABEL_66;
    v47 = *((_BYTE *)this + 20);
    v48 = v47 == -1 ? 0 : 32 * v47;
    v88[v45] = v48 & 0xE0 | v88[v45] & 0x1F;
    *(_QWORD *)&v90 = v45;
    *((_QWORD *)&v90 + 1) = 3;
    v49 = v23;
    if (!rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v88, *((unsigned __int8 *)this + 22), 1uLL)|| (*((unsigned __int8 *)this + 21) != 255 ? (v50 = *((unsigned __int8 *)this + 21)) : (v50 = 0), !rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v88, v50, 3uLL)|| !rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v88, *((unsigned __int8 *)this + 23), 1uLL)|| (v23 = v49, !*((_BYTE *)this + 9))&& (*((unsigned __int16 *)this + 9) != 0xFFFF ? (v51 = *((_WORD *)this + 9)) : (v51 = 0), v52 = rtc::BitBufferWriter::WriteBits((rtc::BitBufferWriter *)&v88, v51, 8uLL), v23 = v49, (v52 & 1) == 0)))
    {
LABEL_66:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
LABEL_67:
        rtc::webrtc_logging_impl::Log("\r\t", v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc");
      return 0;
    }
  }
LABEL_60:
  if (v23 && v27)
  {
    if (*((__int16 *)this + 7) != -1)
    {
      LODWORD(v53) = *((unsigned __int8 *)this + 25);
      if ((v53 - 4) >= 0xFFFFFFFD)
      {
        v55 = 0;
        v57 = *((_QWORD *)&v90 + 1);
        v56 = v90;
        v59 = v88;
        v58 = v89;
        while ((unint64_t)(8 * (v58 - v56) - v57) >= 7)
        {
          v60 = *((unsigned __int8 *)this + v55 + 26);
          v61 = &v59[v56];
          v11 = 8 - v57;
          if ((unint64_t)(8 - v57) >= 7)
            v62 = 7;
          else
            v62 = 8 - v57;
          v14 = *v61;
          v13 = (2 * (v60 & 0x7F)) >> v57;
          v12 = v13 | v14 & ~(((255 << (8 - v62)) & 0xFEu) >> v57);
          *v61 = v12;
          if (v11 <= 6)
          {
            v63 = (unint64_t)(v60 << 57 << v11) >> 56;
            v12 = v61[1];
            v11 = v12 & ~(255 << (9 - v57));
            v61[1] = v12 & ~(-1 << (9 - v57)) | v63;
          }
          v64 = v57 + 7;
          v65 = v56 + (v64 >> 3);
          v66 = v64 & 7;
          if (v66 == 8 * (v58 - v65))
            break;
          v18 = (-129 >> v66);
          v17 = (v18 & v59[v65]);
          v59[v65] = v18 & v59[v65] | ((((_DWORD)v55 != (_DWORD)v53 - 1) << 7) >> v66);
          v56 = v65 + ((v66 + 1) >> 3);
          v57 = (v66 + 1) & 7;
          ++v55;
          v53 = *((unsigned __int8 *)this + 25);
          if (v55 >= v53)
          {
            *(_QWORD *)&v90 = v56;
            *((_QWORD *)&v90 + 1) = v57;
            goto LABEL_79;
          }
        }
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_67;
  }
LABEL_79:
  if (v29
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_67;
  }
  memcpy((void *)(v44 + v25), *((const void **)this + 207), __n);
  v71 = *((_QWORD *)this + 208);
  if (v71 <= __n)
  {
    v71 = 0;
    v72 = 0;
  }
  else
  {
    v72 = *((_QWORD *)this + 207) + __n;
    if (v71 - __n < v71)
      v71 -= __n;
    if (!v71)
      v72 = 0;
  }
  *((_QWORD *)this + 207) = v72;
  *((_QWORD *)this + 208) = v71;
  if (*((_QWORD *)this + 5) - 1 <= (unint64_t)*((unsigned __int8 *)this + 21) && !*((_BYTE *)this + 1640))
    goto LABEL_100;
  v73 = v7 == v87 && *((_BYTE *)this + 1640) != 0;
  *(_BYTE *)a2 = v73;
  v74 = *((_QWORD *)a2 + 12);
  v75 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v74 + 1);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v74));
  if (v73)
    v76 = 0x80;
  else
    v76 = 0;
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v76 & 0x80 | v75 & 0x7F;
  return 1;
}

uint64_t webrtc::`anonymous namespace'::WriteSsData(uint64_t a1, rtc::BitBufferWriter *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  std::string *v19;

  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 251, "vp9.num_spatial_layers > 0U", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 0);
    goto LABEL_33;
  }
  if (v9 >= 9)
  {
LABEL_33:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 252, "vp9.num_spatial_layers <= kMaxVp9NumberOfSpatialLayers", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v9);
    goto LABEL_34;
  }
  v8 = *(_QWORD *)(a1 + 88);
  if (v8 >= 0x100)
  {
LABEL_34:
    v19 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_format_vp9.cc", 253, "vp9.gof.num_frames_in_gof <= kMaxVp9FramesInGof", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v8);
    return webrtc::internal::RtpFrameReferenceFinderImpl::ManageFrame((webrtc::RtpVp9RefFinder *)v19);
  }
  result = rtc::BitBufferWriter::WriteBits(this, v9 - 1, 3uLL);
  if ((_DWORD)result)
  {
    result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(a1 + 48), 1uLL);
    if ((_DWORD)result)
    {
      result = rtc::BitBufferWriter::WriteBits(this, v8 != 0, 1uLL);
      if ((_DWORD)result)
      {
        result = rtc::BitBufferWriter::WriteBits(this, 0, 3uLL);
        if ((_DWORD)result)
        {
          if (*(_BYTE *)(a1 + 48) && *(_QWORD *)(a1 + 32))
          {
            v13 = 0;
            while (1)
            {
              v14 = a1 + 2 * v13;
              result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int16 *)(v14 + 50), 0x10uLL);
              if (!(_DWORD)result)
                break;
              if ((rtc::BitBufferWriter::WriteBits(this, *(unsigned __int16 *)(v14 + 66), 0x10uLL) & 1) == 0)
                return 0;
              if ((unint64_t)++v13 >= *(_QWORD *)(a1 + 32))
                goto LABEL_14;
            }
          }
          else
          {
LABEL_14:
            if (!v8
              || (result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(a1 + 88), 8uLL), (_DWORD)result))
            {
              if (*(_QWORD *)(a1 + 88))
              {
                v15 = 0;
                v16 = a1 + 861;
                do
                {
                  result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(a1 + v15 + 96), 3uLL);
                  if (!(_DWORD)result)
                    break;
                  result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(a1 + v15 + 351), 1uLL);
                  if (!(_DWORD)result)
                    break;
                  result = rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(a1 + v15 + 606), 2uLL);
                  if (!(_DWORD)result)
                    break;
                  result = rtc::BitBufferWriter::WriteBits(this, 0, 2uLL);
                  if (!(_DWORD)result)
                    break;
                  v17 = (_BYTE *)(a1 + v15 + 606);
                  if (*v17)
                  {
                    v18 = 0;
                    while ((rtc::BitBufferWriter::WriteBits(this, *(unsigned __int8 *)(v16 + v18), 8uLL) & 1) != 0)
                    {
                      if (++v18 >= (unint64_t)*v17)
                        goto LABEL_18;
                    }
                    return 0;
                  }
LABEL_18:
                  ++v15;
                  v16 += 3;
                  result = 1;
                }
                while (v15 < *(_QWORD *)(a1 + 88));
              }
              else
              {
                return 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void webrtc::internal::RtpFrameReferenceFinderImpl::ManageFrame(webrtc::RtpVp9RefFinder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  webrtc::RtpFrameObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int16 v32;
  unsigned __int16 v33;
  BOOL v34;
  int v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  webrtc::RtpFrameObject *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned __int16 v45;
  unsigned __int16 v46;
  BOOL v47;
  int v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  webrtc::RtpFrameObject *v53;
  webrtc::RtpFrameObject *v54;
  webrtc::RtpFrameObject *v55;
  webrtc::RtpFrameObject *v56;
  webrtc::RtpFrameObject *v57;
  webrtc::RtpFrameObject *v58;
  webrtc::RtpFrameObject *v59;
  void **v60;

  v12 = (_QWORD *)((char *)this + 77256);
  v13 = *(_QWORD *)a2;
  if (*(_BYTE *)(*(_QWORD *)a2 + 2568))
  {
    if (this)
    {
      v14 = *((_QWORD *)this + 9682);
      if (v14 == 1)
      {
        *(_QWORD *)a2 = 0;
        v59 = (webrtc::RtpFrameObject *)v13;
        goto LABEL_20;
      }
    }
    else
    {
      v14 = MEMORY[0x12E90];
    }
    v60 = (void **)this;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v14);
    v12[25] = 1;
    v19 = *(unsigned __int8 *)(v13 + 2568);
    v20 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v59 = (webrtc::RtpFrameObject *)v20;
    if (v19)
    {
LABEL_20:
      webrtc::RtpGenericFrameRefFinder::ManageFrame((uint64_t *)&v59, v13 + 2424, a9);
      v21 = v59;
      if (!v59)
        return;
      goto LABEL_21;
    }
    __break(1u);
LABEL_116:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_DWORD *)(v13 + 4400);
  if (!v15)
  {
    if (*(_QWORD *)(v13 + 4360) == 4)
    {
      if (this)
      {
        v22 = *((_QWORD *)this + 9682);
        v23 = v13;
        if (v22 == 2)
          goto LABEL_55;
      }
      else
      {
        v22 = MEMORY[0x12E90];
      }
      v60 = (void **)this;
      absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v22);
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      v12[25] = 2;
      v23 = *(_QWORD *)a2;
LABEL_55:
      *(_QWORD *)a2 = 0;
      v29 = *(_WORD *)(v13 + 2720);
      *(_BYTE *)(v23 + 196) = 1;
      *(_DWORD *)(v23 + 192) = 0;
      v30 = v29 & 0x7FFF;
      if (*((_BYTE *)this + 10))
      {
        v31 = *((unsigned __int16 *)this + 4);
        v32 = v30 - v31;
        v33 = (v30 - v31) ^ 0x8000;
        v34 = v31 >= v30;
        v35 = v31 - v30;
        if (v35 != 0 && v34)
          v32 = v33;
        v36 = !v34;
        if (!v34)
          LOWORD(v35) = v35 ^ 0x8000;
        v35 = (unsigned __int16)v35;
        if (v32 < (unsigned __int16)v35)
          v35 = v32;
        if (v35 == 0x4000)
          v37 = v36;
        else
          v37 = v32 <= 0x4000u;
        if (v37)
          v38 = v32;
        else
          v38 = v32 - 0x8000;
        v39 = v38 + *(_QWORD *)this;
      }
      else
      {
        v39 = v30;
      }
      *(_QWORD *)this = v39;
      *((_WORD *)this + 4) = v30;
      *((_BYTE *)this + 10) = 1;
      *(_QWORD *)(v23 + 2408) = v39;
      *(_QWORD *)(v23 + 328) = *(_DWORD *)(v23 + 2576) != 3;
      *(_QWORD *)(v23 + 336) = v39 - 1;
      *a9 = 2;
      a9[1] = v23;
      return;
    }
    if (this)
    {
      v26 = *((_QWORD *)this + 9682);
      if (v26 == 3)
      {
LABEL_74:
        *(_QWORD *)a2 = 0;
        v54 = (webrtc::RtpFrameObject *)v13;
        webrtc::RtpSeqNumOnlyRefFinder::ManageFrame((uint64_t)this, &v54, a9);
        v21 = v54;
        v54 = 0;
        if (!v21)
          return;
        goto LABEL_21;
      }
    }
    else
    {
      v26 = MEMORY[0x12E90];
    }
    v60 = (void **)this;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v26);
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *((_QWORD *)this + 13) = 0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_QWORD *)this = (char *)this + 8;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 3) = (char *)this + 32;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *(_OWORD *)((char *)this + 89) = 0u;
    v12[25] = 3;
    v13 = *(_QWORD *)a2;
    goto LABEL_74;
  }
  if (v15 != 2)
  {
    if (v15 == 1)
    {
      if (*(_QWORD *)(v13 + 4360) != 1)
        goto LABEL_116;
      if (*(unsigned __int8 *)(v13 + 2726) != 255 && *(unsigned __int16 *)(v13 + 2724) != 0xFFFF)
      {
        if (this)
        {
          v27 = *((_QWORD *)this + 9682);
          if (v27 == 4)
          {
LABEL_83:
            *(_QWORD *)a2 = 0;
            v57 = (webrtc::RtpFrameObject *)v13;
            webrtc::RtpVp8RefFinder::ManageFrame(this, (uint64_t *)&v57, a3, a4, a5, a6, a7, a8, a9);
            v21 = v57;
            v57 = 0;
            if (!v21)
              return;
LABEL_21:
            (*(void (**)(webrtc::RtpFrameObject *))(*(_QWORD *)v21 + 8))(v21);
            return;
          }
        }
        else
        {
          v27 = MEMORY[0x12E90];
        }
        v60 = (void **)this;
        absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v27);
        *(_OWORD *)this = 0u;
        *((_QWORD *)this + 16) = 0;
        *((_OWORD *)this + 6) = 0u;
        *((_OWORD *)this + 7) = 0u;
        *((_OWORD *)this + 4) = 0u;
        *((_OWORD *)this + 5) = 0u;
        *((_OWORD *)this + 2) = 0u;
        *((_OWORD *)this + 3) = 0u;
        *((_OWORD *)this + 1) = 0u;
        *(_DWORD *)this = -1;
        *((_QWORD *)this + 3) = 0;
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 1) = (char *)this + 16;
        *((_QWORD *)this + 12) = 0;
        *((_QWORD *)this + 11) = 0;
        *((_QWORD *)this + 10) = (char *)this + 88;
        v12[25] = 4;
        v13 = *(_QWORD *)a2;
        goto LABEL_83;
      }
      v17 = *(unsigned __int16 *)(v13 + 2722);
      if (v17 != 0xFFFF)
      {
        if (this)
        {
          v18 = *((_QWORD *)this + 9682);
          if (v18 == 2)
            goto LABEL_92;
        }
        else
        {
          v18 = MEMORY[0x12E90];
        }
        v60 = (void **)this;
        absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v18);
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        v12[25] = 2;
        LOWORD(v17) = *(_WORD *)(v13 + 2722);
        goto LABEL_91;
      }
      if (this)
      {
        v40 = *((_QWORD *)this + 9682);
        if (v40 == 3)
        {
LABEL_113:
          *(_QWORD *)a2 = 0;
          v58 = (webrtc::RtpFrameObject *)v13;
          webrtc::RtpSeqNumOnlyRefFinder::ManageFrame((uint64_t)this, &v58, a9);
          v21 = v58;
          v58 = 0;
          if (v21)
            goto LABEL_21;
          return;
        }
      }
      else
      {
        v40 = MEMORY[0x12E90];
      }
      v60 = (void **)this;
      absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v40);
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(_OWORD *)((char *)this + 72) = 0u;
      *(_OWORD *)((char *)this + 88) = 0u;
      *((_QWORD *)this + 13) = 0;
      *(_OWORD *)((char *)this + 8) = 0u;
      *(_QWORD *)this = (char *)this + 8;
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 3) = (char *)this + 32;
      *((_OWORD *)this + 3) = 0u;
      *((_OWORD *)this + 4) = 0u;
      *((_OWORD *)this + 5) = 0u;
      *(_OWORD *)((char *)this + 89) = 0u;
      v12[25] = 3;
      v13 = *(_QWORD *)a2;
      goto LABEL_113;
    }
    if (this)
    {
      v25 = *((_QWORD *)this + 9682);
      if (v25 == 3)
      {
LABEL_43:
        *(_QWORD *)a2 = 0;
        v53 = (webrtc::RtpFrameObject *)v13;
        webrtc::RtpSeqNumOnlyRefFinder::ManageFrame((uint64_t)this, &v53, a9);
        v21 = v53;
        v53 = 0;
        if (!v21)
          return;
        goto LABEL_21;
      }
    }
    else
    {
      v25 = MEMORY[0x12E90];
    }
    v60 = (void **)this;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v25);
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
    *((_QWORD *)this + 13) = 0;
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_QWORD *)this = (char *)this + 8;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 3) = (char *)this + 32;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *(_OWORD *)((char *)this + 89) = 0u;
    v12[25] = 3;
    v13 = *(_QWORD *)a2;
    goto LABEL_43;
  }
  if (*(_QWORD *)(v13 + 4360) != 2)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, a8);
  if (*(unsigned __int8 *)(v13 + 2732) != 255)
  {
    if (this)
    {
      v24 = *((_QWORD *)this + 9682);
      if (v24 == 5)
      {
LABEL_51:
        *(_QWORD *)a2 = 0;
        v55 = (webrtc::RtpFrameObject *)v13;
        webrtc::RtpVp9RefFinder::ManageFrame(this, (uint64_t *)&v55, a3, a4, a5, a6, a7, a8, a9);
        v21 = v55;
        v55 = 0;
        if (!v21)
          return;
        goto LABEL_21;
      }
    }
    else
    {
      v24 = MEMORY[0x12E90];
    }
    v60 = (void **)this;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v24);
    bzero(this, 0x12E90uLL);
    *v12 = (char *)this + 77264;
    *((_QWORD *)this + 9661) = 0;
    *((_QWORD *)this + 9662) = 0;
    v12[3] = (char *)this + 77288;
    *((_QWORD *)this + 9673) = 0;
    *((_QWORD *)this + 9665) = 0;
    *((_QWORD *)this + 9664) = 0;
    v12[6] = (char *)this + 77312;
    *((_QWORD *)this + 9668) = 0;
    *((_QWORD *)this + 9667) = 0;
    v12[9] = (char *)this + 77336;
    *((_QWORD *)this + 9671) = 0;
    *((_QWORD *)this + 9670) = 0;
    v12[12] = (char *)this + 77360;
    *((_QWORD *)this + 9674) = 0;
    v12[15] = (char *)this + 77384;
    *((_QWORD *)this + 9677) = 0;
    *((_QWORD *)this + 9676) = 0;
    v12[18] = (char *)this + 77408;
    v12[25] = 5;
    v13 = *(_QWORD *)a2;
    goto LABEL_51;
  }
  v17 = *(unsigned __int16 *)(v13 + 2726);
  if (v17 != 0xFFFF)
  {
    if (this)
    {
      v28 = *((_QWORD *)this + 9682);
      if (v28 == 2)
      {
LABEL_92:
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(v13 + 192) = 0;
        *(_BYTE *)(v13 + 196) = 1;
        v43 = v17 & 0x7FFF;
        if (*((_BYTE *)this + 10))
        {
          v44 = *((unsigned __int16 *)this + 4);
          v45 = v43 - v44;
          v46 = (v43 - v44) ^ 0x8000;
          v47 = v44 >= v43;
          v48 = v44 - v43;
          if (v48 != 0 && v47)
            v45 = v46;
          v49 = !v47;
          if (!v47)
            LOWORD(v48) = v48 ^ 0x8000;
          v48 = (unsigned __int16)v48;
          if (v45 < (unsigned __int16)v48)
            v48 = v45;
          if (v48 == 0x4000)
            v50 = v49;
          else
            v50 = v45 <= 0x4000u;
          if (v50)
            v51 = v45;
          else
            v51 = v45 - 0x8000;
          v52 = v51 + *(_QWORD *)this;
        }
        else
        {
          v52 = v43;
        }
        *(_QWORD *)this = v52;
        *((_WORD *)this + 4) = v43;
        *((_BYTE *)this + 10) = 1;
        *(_QWORD *)(v13 + 2408) = v52;
        *(_QWORD *)(v13 + 328) = *(_DWORD *)(v13 + 2576) != 3;
        *(_QWORD *)(v13 + 336) = v52 - 1;
        *a9 = 2;
        a9[1] = v13;
        return;
      }
    }
    else
    {
      v28 = MEMORY[0x12E90];
    }
    v60 = (void **)this;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v60, v28);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    v12[25] = 2;
    LOWORD(v17) = *(_WORD *)(v13 + 2726);
LABEL_91:
    v13 = *(_QWORD *)a2;
    goto LABEL_92;
  }
  v41 = webrtc::internal::RtpFrameReferenceFinderImpl::GetRefFinderAs<webrtc::RtpSeqNumOnlyRefFinder>((uint64_t)this);
  v42 = *(webrtc::RtpFrameObject **)a2;
  *(_QWORD *)a2 = 0;
  v56 = v42;
  webrtc::RtpSeqNumOnlyRefFinder::ManageFrame(v41, &v56, a9);
  v21 = v56;
  v56 = 0;
  if (v21)
    goto LABEL_21;
}

uint64_t webrtc::internal::RtpFrameReferenceFinderImpl::GetRefFinderAs<webrtc::RtpSeqNumOnlyRefFinder>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  v1 = result;
  if (!result)
  {
    v2 = MEMORY[0x12E90];
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(result + 77456);
  if (v2 != 3)
  {
LABEL_5:
    v3 = (void **)result;
    absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(&v3, v2);
    *(_OWORD *)(v1 + 40) = 0u;
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    *(_QWORD *)(v1 + 104) = 0;
    *(_OWORD *)(v1 + 8) = 0u;
    *(_QWORD *)v1 = v1 + 8;
    *(_QWORD *)(v1 + 40) = 0;
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 24) = v1 + 32;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_OWORD *)(v1 + 89) = 0u;
    *(_QWORD *)(v1 + 77456) = 3;
    return v1;
  }
  return result;
}

uint64_t webrtc::RtpFrameReferenceFinder::ManageFrame@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, unint64_t *a9@<X8>)
{
  uint64_t v9;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL4 v14;
  webrtc::RtpVp9RefFinder *v15;
  unint64_t v16;
  int64x2_t **v17;
  unint64_t *v18;
  unint64_t v19;
  int64x2_t **v20;
  const double *v21;
  int64x2_t *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t v25;
  int64x2_t v26;
  int64x2_t *v27;
  unint64_t v28;
  int64x2_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;

  v9 = result;
  v11 = *(_DWORD *)result;
  v12 = *a2;
  if (*(_DWORD *)result != -1)
  {
    v13 = *(unsigned __int16 *)(v12 + 4404);
    if (v13 != (unsigned __int16)v11)
    {
      v14 = (__int16)(v11 - v13) >= 0;
      if ((unsigned __int16)*(_DWORD *)result - v13 == 0x8000)
        v14 = (unsigned __int16)*(_DWORD *)result > v13;
      if (v14)
      {
        *a9 = 0;
        return result;
      }
    }
  }
  v15 = *(webrtc::RtpVp9RefFinder **)(result + 16);
  *a2 = 0;
  v32 = v12;
  webrtc::internal::RtpFrameReferenceFinderImpl::ManageFrame(v15, (uint64_t)&v32, a3, a4, a5, a6, a7, a8, a9);
  result = v32;
  if (v32)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v16 = *a9;
  v19 = a9[1];
  v18 = a9 + 1;
  v17 = (int64x2_t **)v19;
  if ((v16 & 1) == 0)
    v17 = (int64x2_t **)v18;
  if (v16 >= 2)
  {
    v20 = &v17[v16 >> 1];
    v21 = (const double *)(v9 + 8);
    do
    {
      v22 = *v17;
      v22[150].i64[1] = *(_QWORD *)v21 + (*v17)[150].i64[1];
      v23 = v22[20].u64[1];
      if (v23)
      {
        if (v23 >= 6
          && ((unint64_t)&v22[21] < v9 + 16 ? (v24 = v21 >= (const double *)&v22[21].i64[v23]) : (v24 = 1), v24))
        {
          v25 = v23 & 0xFFFFFFFFFFFFFFFCLL;
          v26 = (int64x2_t)vld1q_dup_f64(v21);
          v27 = v22 + 22;
          v28 = v23 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v29 = vaddq_s64(*v27, v26);
            v27[-1] = vaddq_s64(v27[-1], v26);
            *v27 = v29;
            v27 += 2;
            v28 -= 4;
          }
          while (v28);
          if (v23 == v25)
            goto LABEL_14;
        }
        else
        {
          v25 = 0;
        }
        v30 = v23 - v25;
        v31 = &v22[21].i64[v25];
        do
        {
          *v31++ += *(_QWORD *)v21;
          --v30;
        }
        while (v30);
      }
LABEL_14:
      ++v17;
    }
    while (v17 != v20);
  }
  return result;
}

void absl::variant_internal::VisitIndicesSwitch<6ul>::Run<absl::variant_internal::VariantStateBaseDestructorNontrivial<absl::monostate,webrtc::RtpGenericFrameRefFinder,webrtc::RtpFrameIdOnlyRefFinder,webrtc::RtpSeqNumOnlyRefFinder,webrtc::RtpVp8RefFinder,webrtc::RtpVp9RefFinder>::Destroyer>(void ***a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  _QWORD **v4;
  uint64_t v5;
  void **v6;

  switch(a2)
  {
    case 5:
      v3 = *a1;
      v4 = (_QWORD **)(*a1 + 9658);
      v5 = (uint64_t)(*a1 + 9663);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(*a1 + 9675), (*a1)[9676]);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v3 + 9672), v4[15]);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v3 + 9669), v4[12]);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v3 + 9666), v4[9]);
      std::__tree<sigslot::_signal_base_interface *>::destroy(v5, v4[6]);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v3 + 9660), v4[3]);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v3 + 9657), *v4);
      std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::~deque[abi:sn180100](v3);
      break;
    case 4:
      v6 = *a1;
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(*a1 + 10), (*a1)[11]);
      std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::~deque[abi:sn180100](v6 + 4);
      std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(v6 + 1), v6[2]);
      break;
    case 3:
      v2 = (uint64_t)*a1;
      std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100](*a1 + 6);
      std::__tree<sigslot::_signal_base_interface *>::destroy(v2 + 24, *(_QWORD **)(v2 + 32));
      std::__tree<sigslot::_signal_base_interface *>::destroy(v2, *(_QWORD **)(v2 + 8));
      break;
  }
}

void **std::deque<webrtc::RtpVp8RefFinder::UnwrappedTl0Frame>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  if (v3 == v2)
  {
    v3 = (void **)result[1];
    result[5] = 0;
    v9 = 0;
    goto LABEL_13;
  }
  v4 = (unint64_t)result[4];
  v5 = &v2[v4 >> 8];
  v6 = (uint64_t)*v5 + 16 * v4;
  v7 = *(uint64_t *)((char *)v2 + ((((unint64_t)result[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*((_BYTE *)result + 40) + v4);
  if (v6 == v7)
  {
LABEL_11:
    v1[5] = 0;
    v9 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = (void **)v1[2];
        v2 = (void **)((char *)v1[1] + 8);
        v1[1] = v2;
        v9 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
LABEL_13:
    v10 = v9 >> 3;
    if (v10 == 1)
    {
      v11 = 128;
    }
    else
    {
      if (v10 != 2)
        goto LABEL_19;
      v11 = 256;
    }
    v1[4] = (void *)v11;
LABEL_19:
    if (v2 != v3)
    {
      do
      {
        v12 = *v2++;
        operator delete(v12);
      }
      while (v2 != v3);
      v14 = v1[1];
      v13 = v1[2];
      if (v13 != v14)
        v1[2] = &v13[(v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    if (*v1)
      operator delete(*v1);
    return v1;
  }
  while (v6)
  {
    result = *(void ***)(v6 + 8);
    *(_QWORD *)(v6 + 8) = 0;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    v6 += 16;
    if (v6 - (_QWORD)*v5 == 4096)
    {
      v8 = (uint64_t)v5[1];
      ++v5;
      v6 = v8;
    }
    if (v6 == v7)
    {
      v2 = (void **)v1[1];
      v3 = (void **)v1[2];
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

BOOL webrtc::RtpGenericFrameDescriptorExtension00::Parse(char *a1, unint64_t a2, uint64_t a3)
{
  unsigned __int8 v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (a2)
  {
    v3 = *a1;
    *(_BYTE *)a3 = *a1 >> 7;
    *(_BYTE *)(a3 + 1) = (*a1 & 0x40) != 0;
    if ((v3 & 0x80) == 0)
      return a2 == 1;
    if (a2 >= 4)
    {
      *(_BYTE *)(a3 + 5) = *a1 & 7;
      *(_BYTE *)(a3 + 4) = a1[1];
      *(_WORD *)(a3 + 2) = *((_WORD *)a1 + 1);
      *(_QWORD *)(a3 + 8) = 0;
      if (a2 >= 8 && (*a1 & 8) == 0)
      {
        v6 = __rev16(*((unsigned __int16 *)a1 + 3));
        *(_DWORD *)(a3 + 32) = __rev16(*((unsigned __int16 *)a1 + 2));
        *(_DWORD *)(a3 + 36) = v6;
        return 1;
      }
      if ((*a1 & 8) == 0)
        return 1;
      v7 = 0;
      v8 = 4;
      while (a2 != v8)
      {
        v9 = a1[v8];
        v10 = v9 >> 2;
        v11 = v8 + 1;
        if ((v9 & 2) != 0)
        {
          if (a2 == v11)
            return 0;
          v10 |= a1[v11] << 6;
          v8 += 2;
        }
        else
        {
          ++v8;
        }
        if (!v10 || v7 == 8)
          break;
        *(_WORD *)(a3 + 16 + 2 * v7++) = v10;
        *(_QWORD *)(a3 + 8) = v7;
        v5 = 1;
        if ((v9 & 1) == 0)
          return v5;
      }
    }
  }
  return 0;
}

uint64_t webrtc::RtpGenericFrameDescriptorExtension00::ValueSize(uint16x8_t *a1)
{
  uint64_t v1;
  uint16x8_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  unint64_t v7;
  unint64_t v8;
  int64x2_t v9;
  uint16x8_t v10;
  int8x16_t v11;
  int64x2_t v12;
  uint16x8_t *v13;
  unint64_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  int8x16_t v34;
  unsigned __int16 *v35;
  unsigned int v36;
  uint64_t v37;

  if (!a1->i8[0])
    return 1;
  v1 = a1->i64[1];
  if (v1)
    v2 = a1 + 1;
  else
    v2 = 0;
  if (v1)
  {
    v3 = (v1 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v3 < 0xF)
    {
      v4 = 4;
      v5 = (unsigned __int16 *)v2;
      goto LABEL_13;
    }
    v7 = v3 + 1;
    v8 = (v3 + 1) & 0xFFFFFFFFFFFFFFF0;
    v5 = (unsigned __int16 *)v2 + v8;
    v9 = 0uLL;
    v10.i64[0] = 0x3F003F003F003FLL;
    v10.i64[1] = 0x3F003F003F003FLL;
    v11 = (int8x16_t)vdupq_n_s64(2uLL);
    v12 = (int64x2_t)xmmword_208F1A560;
    v13 = v2 + 1;
    v14 = v8;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    do
    {
      v21 = (int16x8_t)vcgtq_u16(v13[-1], v10);
      v22 = vmovl_high_s16(v21);
      v23.i64[0] = v22.i32[2];
      v23.i64[1] = v22.i32[3];
      v24 = v23;
      v23.i64[0] = v22.i32[0];
      v23.i64[1] = v22.i32[1];
      v25 = v23;
      v26 = vmovl_s16(*(int16x4_t *)v21.i8);
      v23.i64[0] = v26.i32[2];
      v23.i64[1] = v26.i32[3];
      v27 = v23;
      v23.i64[0] = v26.i32[0];
      v23.i64[1] = v26.i32[1];
      v28 = v23;
      v29 = (int16x8_t)vcgtq_u16(*v13, v10);
      v30 = vmovl_high_s16(v29);
      v23.i64[0] = v30.i32[2];
      v23.i64[1] = v30.i32[3];
      v31 = v23;
      v23.i64[0] = v30.i32[0];
      v23.i64[1] = v30.i32[1];
      v32 = v23;
      v33 = vmovl_s16(*(int16x4_t *)v29.i8);
      v23.i64[0] = v33.i32[2];
      v23.i64[1] = v33.i32[3];
      v34 = v23;
      v23.i64[0] = v33.i32[0];
      v23.i64[1] = v33.i32[1];
      v16 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v24, v11), (int64x2_t)vmvnq_s8(v24)), v16);
      v15 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v25, v11), (int64x2_t)vmvnq_s8(v25)), v15);
      v9 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v27, v11), (int64x2_t)vmvnq_s8(v27)), v9);
      v12 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v28, v11), (int64x2_t)vmvnq_s8(v28)), v12);
      v20 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v31, v11), (int64x2_t)vmvnq_s8(v31)), v20);
      v19 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v32, v11), (int64x2_t)vmvnq_s8(v32)), v19);
      v18 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v34, v11), (int64x2_t)vmvnq_s8(v34)), v18);
      v17 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v23, v11), (int64x2_t)vmvnq_s8(v23)), v17);
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
    v4 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v17, v12), vaddq_s64(v19, v15)), vaddq_s64(vaddq_s64(v18, v9), vaddq_s64(v20, v16))));
    if (v7 != v8)
    {
LABEL_13:
      v35 = (unsigned __int16 *)v2 + v1;
      do
      {
        v36 = *v5++;
        if (v36 <= 0x3F)
          v37 = 1;
        else
          v37 = 2;
        v4 += v37;
      }
      while (v5 != v35);
    }
  }
  else
  {
    v4 = 4;
  }
  if (!v1 && a1[2].i32[0] >= 1 && a1[2].i32[1] > 0)
    v4 += 4;
  return v4;
}

uint64_t webrtc::RtpGenericFrameDescriptorExtension00::Write(uint64_t a1, uint64_t a2, uint16x8_t *a3)
{
  uint16x8_t *v3;
  uint64_t v4;
  uint16x8_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  char v9;
  unint64_t v11;
  unint64_t v12;
  int64x2_t v13;
  uint16x8_t v14;
  int8x16_t v15;
  int64x2_t v16;
  uint16x8_t *v17;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int8x16_t v38;
  unsigned __int16 *v39;
  unsigned int v40;
  uint64_t v41;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;

  if (a3->i8[0])
  {
    v3 = a3 + 1;
    v4 = a3->i64[1];
    if (v4)
      v5 = a3 + 1;
    else
      v5 = 0;
    if (v4)
    {
      v6 = (v4 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v6 >= 0xF)
      {
        v11 = v6 + 1;
        v12 = (v6 + 1) & 0xFFFFFFFFFFFFFFF0;
        v8 = (unsigned __int16 *)v5 + v12;
        v13 = 0uLL;
        v14.i64[0] = 0x3F003F003F003FLL;
        v14.i64[1] = 0x3F003F003F003FLL;
        v15 = (int8x16_t)vdupq_n_s64(2uLL);
        v16 = (int64x2_t)xmmword_208F1A560;
        v17 = v5 + 1;
        v18 = v12;
        v19 = 0uLL;
        v20 = 0uLL;
        v21 = 0uLL;
        v22 = 0uLL;
        v23 = 0uLL;
        v24 = 0uLL;
        do
        {
          v25 = (int16x8_t)vcgtq_u16(v17[-1], v14);
          v26 = vmovl_high_s16(v25);
          v27.i64[0] = v26.i32[2];
          v27.i64[1] = v26.i32[3];
          v28 = v27;
          v27.i64[0] = v26.i32[0];
          v27.i64[1] = v26.i32[1];
          v29 = v27;
          v30 = vmovl_s16(*(int16x4_t *)v25.i8);
          v27.i64[0] = v30.i32[2];
          v27.i64[1] = v30.i32[3];
          v31 = v27;
          v27.i64[0] = v30.i32[0];
          v27.i64[1] = v30.i32[1];
          v32 = v27;
          v33 = (int16x8_t)vcgtq_u16(*v17, v14);
          v34 = vmovl_high_s16(v33);
          v27.i64[0] = v34.i32[2];
          v27.i64[1] = v34.i32[3];
          v35 = v27;
          v27.i64[0] = v34.i32[0];
          v27.i64[1] = v34.i32[1];
          v36 = v27;
          v37 = vmovl_s16(*(int16x4_t *)v33.i8);
          v27.i64[0] = v37.i32[2];
          v27.i64[1] = v37.i32[3];
          v38 = v27;
          v27.i64[0] = v37.i32[0];
          v27.i64[1] = v37.i32[1];
          v20 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v28, v15), (int64x2_t)vmvnq_s8(v28)), v20);
          v19 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v29, v15), (int64x2_t)vmvnq_s8(v29)), v19);
          v13 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v31, v15), (int64x2_t)vmvnq_s8(v31)), v13);
          v16 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v32, v15), (int64x2_t)vmvnq_s8(v32)), v16);
          v24 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v35, v15), (int64x2_t)vmvnq_s8(v35)), v24);
          v23 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v36, v15), (int64x2_t)vmvnq_s8(v36)), v23);
          v22 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v38, v15), (int64x2_t)vmvnq_s8(v38)), v22);
          v21 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v27, v15), (int64x2_t)vmvnq_s8(v27)), v21);
          v17 += 2;
          v18 -= 16;
        }
        while (v18);
        v7 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v21, v16), vaddq_s64(v23, v19)), vaddq_s64(vaddq_s64(v22, v13), vaddq_s64(v24, v20))));
        if (v11 == v12)
          goto LABEL_23;
      }
      else
      {
        v7 = 4;
        v8 = (unsigned __int16 *)v5;
      }
      v39 = (unsigned __int16 *)v5 + v4;
      do
      {
        v40 = *v8++;
        if (v40 <= 0x3F)
          v41 = 1;
        else
          v41 = 2;
        v7 += v41;
      }
      while (v8 != v39);
    }
    else
    {
      v7 = 4;
    }
LABEL_23:
    v43 = a3[2].i32[1] > 0 && a3[2].i32[0] > 0 && v4 == 0;
    v44 = v7 + 4;
    if (!v43)
      v44 = v7;
    if (a2 == v44)
    {
      v45 = v4 != 0;
      if (a3->i8[1])
        v46 = -16;
      else
        v46 = -80;
      *(_BYTE *)a1 = v46 | a3->i8[5] | (8 * v45);
      *(_BYTE *)(a1 + 1) = a3->i8[4];
      *(_WORD *)(a1 + 2) = a3->i16[1];
      v47 = a3->i64[1];
      if (!v47)
        v3 = 0;
      if (!a3->i8[0] || v47)
      {
        if (v47)
        {
          v49 = 0;
          v50 = 4;
          do
          {
            v51 = v3->u16[v49];
            v52 = v50 + 1;
            *(_BYTE *)(a1 + v50) = (4 * v51) | (2 * (v51 > 0x3F)) | (v49 < v47 - 1);
            if (v51 >= 0x40)
            {
              *(_BYTE *)(a1 + v52) = v3->u16[v49] >> 6;
              v52 = v50 + 2;
            }
            ++v49;
            v50 = v52;
          }
          while (v47 != v49);
        }
      }
      else
      {
        v48 = a3[2].i32[0];
        if (v48 >= 1 && a3[2].i32[1] >= 1)
        {
          *(_BYTE *)(a1 + 4) = BYTE1(v48);
          *(_BYTE *)(a1 + 5) = a3[2].i32[0];
          *(_BYTE *)(a1 + 6) = BYTE1(a3[2].i32[1]);
          *(_BYTE *)(a1 + 7) = a3[2].i32[1];
          return 1;
        }
      }
      return 1;
    }
    goto LABEL_47;
  }
  if (a2 == 1)
  {
    if (a3->i8[1])
      v9 = 112;
    else
      v9 = 48;
    *(_BYTE *)a1 = v9;
    return 1;
  }
LABEL_47:
  webrtc::RtpGenericFrameDescriptorExtension00::ValueSize(a3);
  v58 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension.cc", 132, "data.size() == ValueSize(descriptor)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v54, v55, v56, v57, a2);
  return webrtc::RtpGenericFrameRefFinder::ManageFrame(v58);
}

void webrtc::RtpGenericFrameRefFinder::ManageFrame(uint64_t *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  _OWORD *v34;
  uint64_t v35;
  __int128 v36;

  *a3 = 0;
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= 5)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_generic_ref_finder.cc");
    return;
  }
  v11 = *a1;
  *(_QWORD *)(v11 + 2408) = *(_QWORD *)a2;
  *(_DWORD *)(v11 + 192) = v3;
  *(_BYTE *)(v11 + 196) = 1;
  v12 = *(_DWORD *)(a2 + 12);
  if (v12 != 255)
  {
    v13 = *a1;
    *(_DWORD *)(v13 + 200) = v12;
    *(_BYTE *)(v13 + 204) = 1;
  }
  v14 = *(_QWORD *)(a2 + 64);
  if (v14 < 0xC)
  {
    v22 = v14 >> 1;
    v23 = *a1;
    *(_QWORD *)(*a1 + 328) = v22;
    v24 = *(_QWORD *)(a2 + 64);
    if (v24 >= 2)
    {
      v25 = v24 >> 1;
      if ((v24 & 1) != 0)
      {
        v32 = 0;
        do
        {
          *(_QWORD *)(v23 + 336 + 8 * v32) = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v32);
          ++v32;
        }
        while (v25 != v32);
        goto LABEL_20;
      }
      if (v24 >= 0x10 && (unint64_t)(v23 - a2 + 264) >= 0x20)
      {
        v26 = v25 & 0x7FFFFFFFFFFFFFFCLL;
        v33 = (__int128 *)(a2 + 88);
        v34 = (_OWORD *)(v23 + 352);
        v35 = v25 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 4;
        }
        while (v35);
        if (v25 == v26)
          goto LABEL_20;
      }
      else
      {
        v26 = 0;
      }
      v27 = v25 - v26;
      v28 = 8 * v26;
      v29 = (_QWORD *)(8 * v26 + v23 + 336);
      v30 = (uint64_t *)(v28 + a2 + 72);
      do
      {
        v31 = *v30++;
        *v29++ = v31;
        --v27;
      }
      while (v27);
    }
LABEL_20:
    *a1 = 0;
    *a3 = 2;
    a3[1] = v23;
    return;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/rtp_generic_ref_finder.cc");
}

uint64_t webrtc::RtpHeaderExtensionMap::RegisterByUri(webrtc::RtpHeaderExtensionMap *a1, int a2, _QWORD *__s1, uint64_t a4)
{
  int *v9;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  switch(a4)
  {
    case 26:
      if (*__s1 != 0x707067333A6E7275
        || __s1[1] != 0x6F2D6F656469763ALL
        || __s1[2] != 0x697461746E656972
        || *((_WORD *)__s1 + 12) != 28271)
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCA18;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 34:
      if (*__s1 != *(_QWORD *)"urn:ietf:params:rtp-hdrext:toffset"
        || __s1[1] != *(_QWORD *)":params:rtp-hdrext:toffset"
        || __s1[2] != *(_QWORD *)"rtp-hdrext:toffset"
        || __s1[3] != *(_QWORD *)"xt:toffset"
        || *((unsigned __int16 *)__s1 + 16) != (unint64_t)*(unsigned __int16 *)"et")
      {
        goto LABEL_286;
      }
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 35:
      if (*__s1 != *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid"
        || __s1[1] != *(_QWORD *)":params:rtp-hdrext:sdes:mid"
        || __s1[2] != *(_QWORD *)"rtp-hdrext:sdes:mid"
        || __s1[3] != *(_QWORD *)"xt:sdes:mid"
        || *(_QWORD *)((char *)__s1 + 27) != *(_QWORD *)"sdes:mid")
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCAF0;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 43:
      if (*__s1 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:ssrc-audio-level"
        && __s1[1] == *(_QWORD *)":params:rtp-hdrext:ssrc-audio-level"
        && __s1[2] == *(_QWORD *)"rtp-hdrext:ssrc-audio-level"
        && __s1[3] == *(_QWORD *)"xt:ssrc-audio-level"
        && __s1[4] == *(_QWORD *)"audio-level"
        && *(_QWORD *)((char *)__s1 + 35) == *(_QWORD *)"io-level")
      {
        v9 = &dword_24C0BC9B8;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
      if (*__s1 == 0x667465693A6E7275
        && __s1[1] == 0x3A736D617261703ALL
        && __s1[2] == 0x657264682D707472
        && __s1[3] == 0x2D637273633A7478
        && __s1[4] == 0x656C2D6F69647561
        && *(_QWORD *)((char *)__s1 + 35) == 0x6C6576656C2D6F69)
      {
        v9 = &dword_24C0BC9D0;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
      goto LABEL_286;
    case 45:
      if (*__s1 != *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id"
        || __s1[1] != *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id"
        || __s1[2] != *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id"
        || __s1[3] != *(_QWORD *)"xt:sdes:rtp-stream-id"
        || __s1[4] != *(_QWORD *)"rtp-stream-id"
        || *(_QWORD *)((char *)__s1 + 37) != *(_QWORD *)"tream-id")
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCAC0;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 54:
      if (*__s1 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id"
        && __s1[1] == *(_QWORD *)":params:rtp-hdrext:sdes:repaired-rtp-stream-id"
        && __s1[2] == *(_QWORD *)"rtp-hdrext:sdes:repaired-rtp-stream-id"
        && __s1[3] == *(_QWORD *)"xt:sdes:repaired-rtp-stream-id"
        && __s1[4] == *(_QWORD *)"repaired-rtp-stream-id"
        && __s1[5] == *(_QWORD *)"-rtp-stream-id"
        && *(_QWORD *)((char *)__s1 + 46) == *(_QWORD *)"tream-id")
      {
        v9 = &dword_24C0BCAD8;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
      if (*__s1 == 0x772F2F3A70747468
        && __s1[1] == 0x74726265772E7777
        && __s1[2] == 0x78652F67726F2E63
        && __s1[3] == 0x746E656D69726570
        && __s1[4] == 0x64682D7074722F73
        && __s1[5] == 0x626E692F74786572
        && *(_QWORD *)((char *)__s1 + 46) == 0x6E632D646E61626ELL)
      {
        v9 = &dword_24C0BCB50;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
      goto LABEL_286;
    case 56:
      if (*__s1 != 0x772F2F3A70747468
        || __s1[1] != 0x74726265772E7777
        || __s1[2] != 0x78652F67726F2E63
        || __s1[3] != 0x746E656D69726570
        || __s1[4] != 0x64682D7074722F73
        || __s1[5] != 0x6C6F632F74786572
        || __s1[6] != 0x65636170732D726FLL)
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCB38;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 57:
      if (*__s1 != 0x772F2F3A70747468
        || __s1[1] != 0x74726265772E7777
        || __s1[2] != 0x78652F67726F2E63
        || __s1[3] != 0x746E656D69726570
        || __s1[4] != 0x64682D7074722F73
        || __s1[5] != 0x6469762F74786572
        || __s1[6] != 0x6E696D69742D6F65
        || *((_BYTE *)__s1 + 56) != 103)
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCAA8;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 58:
      if (*__s1 == *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time"
        && __s1[1] == *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time"
        && __s1[2] == *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time"
        && __s1[3] == *(_QWORD *)"periments/rtp-hdrext/abs-send-time"
        && __s1[4] == *(_QWORD *)"s/rtp-hdrext/abs-send-time"
        && __s1[5] == *(_QWORD *)"rext/abs-send-time"
        && __s1[6] == *(_QWORD *)"-send-time"
        && *((unsigned __int16 *)__s1 + 28) == (unint64_t)*(unsigned __int16 *)"me")
      {
        v9 = &dword_24C0BC9E8;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
      if (*__s1 == 0x772F2F3A70747468
        && __s1[1] == 0x74726265772E7777
        && __s1[2] == 0x78652F67726F2E63
        && __s1[3] == 0x746E656D69726570
        && __s1[4] == 0x64682D7074722F73
        && __s1[5] == 0x616C702F74786572
        && __s1[6] == 0x6C65642D74756F79
        && *((_WORD *)__s1 + 28) == 31073)
      {
        v9 = &dword_24C0BCA60;
        return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
      }
LABEL_286:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v94, v95, v96, v97, v98, v99, v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extension_map.cc");
      return 0;
    case 61:
      v72 = *__s1;
      v73 = __s1[1];
      v74 = __s1[2];
      v75 = __s1[3];
      v76 = __s1[4];
      v77 = __s1[5];
      v78 = __s1[6];
      v79 = *(_QWORD *)((char *)__s1 + 53);
      if (v72 != *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
        || v73 != *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time"
        || v74 != *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time"
        || v75 != *(_QWORD *)"periments/rtp-hdrext/abs-capture-time"
        || v76 != *(_QWORD *)"s/rtp-hdrext/abs-capture-time"
        || v77 != *(_QWORD *)"rext/abs-capture-time"
        || v78 != *(_QWORD *)"-capture-time"
        || v79 != *(_QWORD *)"ure-time")
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCA00;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 63:
      if (*__s1 != 0x772F2F3A70747468
        || __s1[1] != 0x74726265772E7777
        || __s1[2] != 0x78652F67726F2E63
        || __s1[3] != 0x746E656D69726570
        || __s1[4] != 0x64682D7074722F73
        || __s1[5] != 0x6469762F74786572
        || __s1[6] != 0x65746E6F632D6F65
        || *(_QWORD *)((char *)__s1 + 55) != 0x657079742D746E65)
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCA78;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 65:
      if (memcmp(__s1, "http://www.webrtc.org/experiments/rtp-hdrext/transport-wide-cc-02", 0x41uLL))
        goto LABEL_286;
      v9 = &dword_24C0BCA48;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 68:
      if (memcmp(__s1, "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id", 0x44uLL))
        goto LABEL_286;
      v9 = &dword_24C0BCB68;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 70:
      if (memcmp(__s1, "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00", 0x46uLL))
        goto LABEL_286;
      v9 = &dword_24C0BCA90;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 72:
      if (memcmp(__s1, "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00", 0x48uLL))
        goto LABEL_286;
      v9 = &dword_24C0BCB08;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 73:
      if (memcmp(__s1, "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", 0x49uLL))
        goto LABEL_286;
      v9 = &dword_24C0BCA30;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    case 87:
      if (memcmp(__s1, "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension", 0x57uLL))
      {
        goto LABEL_286;
      }
      v9 = &dword_24C0BCB20;
      return webrtc::RtpHeaderExtensionMap::Register(a1, a2, *v9);
    default:
      goto LABEL_286;
  }
}

uint64_t webrtc::RtpHeaderExtensionMap::Register(webrtc::RtpHeaderExtensionMap *a1, int a2, int a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int Type;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;

  v3 = a2;
  if ((a2 - 256) <= 0xFFFFFF00)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    v22 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_18:
    rtc::webrtc_logging_impl::Log(v22, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extension_map.cc");
    return 0;
  }
  Type = webrtc::RtpHeaderExtensionMap::GetType(a1, a2);
  if (Type != a3)
  {
    if (Type)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return 0;
    }
    else
    {
      if (!*((_BYTE *)a1 + a3))
      {
        *((_BYTE *)a1 + a3) = v3;
        return 1;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return 0;
    }
    v22 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t;
    goto LABEL_18;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_header_extension_map.cc");
  return 1;
}

uint64_t webrtc::RtpHeaderExtensionMap::GetType(webrtc::RtpHeaderExtensionMap *this, int a2)
{
  if (*((unsigned __int8 *)this + 1) == a2)
    return 1;
  if (*((unsigned __int8 *)this + 2) == a2)
    return 2;
  if (*((unsigned __int8 *)this + 3) == a2)
    return 3;
  if (*((unsigned __int8 *)this + 4) == a2)
    return 4;
  if (*((unsigned __int8 *)this + 5) == a2)
    return 5;
  if (*((unsigned __int8 *)this + 6) == a2)
    return 6;
  if (*((unsigned __int8 *)this + 7) == a2)
    return 7;
  if (*((unsigned __int8 *)this + 8) == a2)
    return 8;
  if (*((unsigned __int8 *)this + 9) == a2)
    return 9;
  if (*((unsigned __int8 *)this + 10) == a2)
    return 10;
  if (*((unsigned __int8 *)this + 11) == a2)
    return 11;
  if (*((unsigned __int8 *)this + 12) == a2)
    return 12;
  if (*((unsigned __int8 *)this + 13) == a2)
    return 13;
  if (*((unsigned __int8 *)this + 14) == a2)
    return 14;
  if (*((unsigned __int8 *)this + 15) == a2)
    return 15;
  if (*((unsigned __int8 *)this + 16) == a2)
    return 16;
  if (*((unsigned __int8 *)this + 17) == a2)
    return 17;
  if (*((unsigned __int8 *)this + 18) == a2)
    return 18;
  if (*((unsigned __int8 *)this + 19) == a2)
    return 19;
  if (*((unsigned __int8 *)this + 20) == a2)
    return 20;
  return 0;
}

uint64_t webrtc::RtpHeaderExtensionMap::Deregister(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = result;
  switch(a3)
  {
    case 26:
      if (*a2 == 0x707067333A6E7275
        && a2[1] == 0x6F2D6F656469763ALL
        && a2[2] == 0x697461746E656972
        && *((_WORD *)a2 + 12) == 28271)
      {
        v7 = &dword_24C0BCA18;
        goto LABEL_290;
      }
      break;
    case 34:
      if (*(_QWORD *)"urn:ietf:params:rtp-hdrext:toffset" == *a2
        && *(_QWORD *)":params:rtp-hdrext:toffset" == a2[1]
        && *(_QWORD *)"rtp-hdrext:toffset" == a2[2]
        && *(_QWORD *)"xt:toffset" == a2[3]
        && *(unsigned __int16 *)"et" == (unint64_t)*((unsigned __int16 *)a2 + 16))
      {
        goto LABEL_290;
      }
      break;
    case 35:
      if (*(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid" == *a2
        && *(_QWORD *)":params:rtp-hdrext:sdes:mid" == a2[1]
        && *(_QWORD *)"rtp-hdrext:sdes:mid" == a2[2]
        && *(_QWORD *)"xt:sdes:mid" == a2[3]
        && *(_QWORD *)"sdes:mid" == *(_QWORD *)((char *)a2 + 27))
      {
        v7 = &dword_24C0BCAF0;
        goto LABEL_290;
      }
      break;
    case 43:
      result = a2[4];
      if (*(_QWORD *)"urn:ietf:params:rtp-hdrext:ssrc-audio-level" == *a2
        && *(_QWORD *)":params:rtp-hdrext:ssrc-audio-level" == a2[1]
        && *(_QWORD *)"rtp-hdrext:ssrc-audio-level" == a2[2]
        && *(_QWORD *)"xt:ssrc-audio-level" == a2[3]
        && *(_QWORD *)"audio-level" == result
        && *(_QWORD *)"io-level" == *(_QWORD *)((char *)a2 + 35))
      {
        v7 = &dword_24C0BC9B8;
        goto LABEL_290;
      }
      if (*a2 == 0x667465693A6E7275
        && a2[1] == 0x3A736D617261703ALL
        && a2[2] == 0x657264682D707472
        && a2[3] == 0x2D637273633A7478
        && a2[4] == 0x656C2D6F69647561
        && *(_QWORD *)((char *)a2 + 35) == 0x6C6576656C2D6F69)
      {
        v7 = &dword_24C0BC9D0;
        goto LABEL_290;
      }
      break;
    case 45:
      v26 = *a2;
      v27 = a2[1];
      v28 = a2[2];
      v29 = a2[3];
      result = a2[4];
      v30 = *(_QWORD *)((char *)a2 + 37);
      if (*(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id" == v26
        && *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id" == v27
        && *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id" == v28
        && *(_QWORD *)"xt:sdes:rtp-stream-id" == v29
        && *(_QWORD *)"rtp-stream-id" == result
        && *(_QWORD *)"tream-id" == v30)
      {
        v7 = &dword_24C0BCAC0;
        goto LABEL_290;
      }
      break;
    case 54:
      result = *(_QWORD *)"-rtp-stream-id";
      if (*(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id" == *a2
        && *(_QWORD *)":params:rtp-hdrext:sdes:repaired-rtp-stream-id" == a2[1]
        && *(_QWORD *)"rtp-hdrext:sdes:repaired-rtp-stream-id" == a2[2]
        && *(_QWORD *)"xt:sdes:repaired-rtp-stream-id" == a2[3]
        && *(_QWORD *)"repaired-rtp-stream-id" == a2[4]
        && *(_QWORD *)"-rtp-stream-id" == a2[5]
        && *(_QWORD *)"tream-id" == *(_QWORD *)((char *)a2 + 46))
      {
        v7 = &dword_24C0BCAD8;
        goto LABEL_290;
      }
      if (*a2 == 0x772F2F3A70747468
        && a2[1] == 0x74726265772E7777
        && a2[2] == 0x78652F67726F2E63
        && a2[3] == 0x746E656D69726570
        && a2[4] == 0x64682D7074722F73
        && a2[5] == 0x626E692F74786572
        && *(_QWORD *)((char *)a2 + 46) == 0x6E632D646E61626ELL)
      {
        v7 = &dword_24C0BCB50;
        goto LABEL_290;
      }
      break;
    case 56:
      if (*a2 == 0x772F2F3A70747468
        && a2[1] == 0x74726265772E7777
        && a2[2] == 0x78652F67726F2E63
        && a2[3] == 0x746E656D69726570
        && a2[4] == 0x64682D7074722F73
        && a2[5] == 0x6C6F632F74786572
        && a2[6] == 0x65636170732D726FLL)
      {
        v7 = &dword_24C0BCB38;
        goto LABEL_290;
      }
      break;
    case 57:
      if (*a2 == 0x772F2F3A70747468
        && a2[1] == 0x74726265772E7777
        && a2[2] == 0x78652F67726F2E63
        && a2[3] == 0x746E656D69726570
        && a2[4] == 0x64682D7074722F73
        && a2[5] == 0x6469762F74786572
        && a2[6] == 0x6E696D69742D6F65
        && *((_BYTE *)a2 + 56) == 103)
      {
        v7 = &dword_24C0BCAA8;
        goto LABEL_290;
      }
      break;
    case 58:
      result = *(_QWORD *)"rext/abs-send-time";
      if (*(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" == *a2
        && *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time" == a2[1]
        && *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time" == a2[2]
        && *(_QWORD *)"periments/rtp-hdrext/abs-send-time" == a2[3]
        && *(_QWORD *)"s/rtp-hdrext/abs-send-time" == a2[4]
        && *(_QWORD *)"rext/abs-send-time" == a2[5]
        && *(_QWORD *)"-send-time" == a2[6]
        && *(unsigned __int16 *)"me" == (unint64_t)*((unsigned __int16 *)a2 + 28))
      {
        v7 = &dword_24C0BC9E8;
        goto LABEL_290;
      }
      if (*a2 == 0x772F2F3A70747468
        && a2[1] == 0x74726265772E7777
        && a2[2] == 0x78652F67726F2E63
        && a2[3] == 0x746E656D69726570
        && a2[4] == 0x64682D7074722F73
        && a2[5] == 0x616C702F74786572
        && a2[6] == 0x6C65642D74756F79
        && *((_WORD *)a2 + 28) == 31073)
      {
        v7 = &dword_24C0BCA60;
        goto LABEL_290;
      }
      break;
    case 61:
      v75 = *a2;
      v76 = a2[1];
      v77 = a2[2];
      v78 = a2[3];
      result = *(_QWORD *)"rext/abs-capture-time";
      v79 = a2[4];
      v80 = a2[5];
      v81 = a2[6];
      v82 = *(_QWORD *)((char *)a2 + 53);
      if (*(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time" == v75
        && *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time" == v76
        && *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time" == v77
        && *(_QWORD *)"periments/rtp-hdrext/abs-capture-time" == v78
        && *(_QWORD *)"s/rtp-hdrext/abs-capture-time" == v79
        && *(_QWORD *)"rext/abs-capture-time" == v80
        && *(_QWORD *)"-capture-time" == v81
        && *(_QWORD *)"ure-time" == v82)
      {
        v7 = &dword_24C0BCA00;
        goto LABEL_290;
      }
      break;
    case 63:
      if (*a2 == 0x772F2F3A70747468
        && a2[1] == 0x74726265772E7777
        && a2[2] == 0x78652F67726F2E63
        && a2[3] == 0x746E656D69726570
        && a2[4] == 0x64682D7074722F73
        && a2[5] == 0x6469762F74786572
        && a2[6] == 0x65746E6F632D6F65
        && *(_QWORD *)((char *)a2 + 55) == 0x657079742D746E65)
      {
        v7 = &dword_24C0BCA78;
        goto LABEL_290;
      }
      break;
    case 65:
      result = memcmp("http://www.webrtc.org/experiments/rtp-hdrext/transport-wide-cc-02", a2, 0x41uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCA48;
        goto LABEL_290;
      }
      break;
    case 68:
      result = memcmp("http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id", a2, 0x44uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCB68;
        goto LABEL_290;
      }
      break;
    case 70:
      result = memcmp("http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00", a2, 0x46uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCA90;
        goto LABEL_290;
      }
      break;
    case 72:
      result = memcmp("http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00", a2, 0x48uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCB08;
        goto LABEL_290;
      }
      break;
    case 73:
      result = memcmp("http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01", a2, 0x49uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCA30;
        goto LABEL_290;
      }
      break;
    case 87:
      result = memcmp("https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension", a2, 0x57uLL);
      if (!(_DWORD)result)
      {
        v7 = &dword_24C0BCB20;
LABEL_290:
        *(_BYTE *)(v3 + *v7) = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

BOOL webrtc::ColorSpaceExtension::Parse(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 *v11;
  _OWORD v12[3];

  if (a2 != 28 && a2 != 4)
    return 0;
  v4 = *a1;
  if (v4 > 0x3F)
    return 0;
  if (((0x401FF6uLL >> v4) & 1) == 0)
    return 0;
  *(_BYTE *)a3 = v4;
  v6 = a1[1];
  if (v6 > 0x3F)
    return 0;
  if (((0x7FFF6uLL >> v6) & 1) == 0)
    return 0;
  *(_BYTE *)(a3 + 1) = v6;
  v7 = a1[2];
  if (v7 > 0x3F)
    return 0;
  if (((0x7FF7uLL >> v7) & 1) == 0)
    return 0;
  *(_BYTE *)(a3 + 2) = v7;
  v8 = a1[3];
  *(_DWORD *)(a3 + 4) = (v8 >> 4) & 3;
  v9 = (v8 >> 2) & 3;
  if (((7uLL >> v9) & 1) == 0)
    return 0;
  *(_DWORD *)(a3 + 8) = v9;
  v10 = v8 & 3;
  if (((7uLL >> v10) & 1) == 0)
    return 0;
  *(_DWORD *)(a3 + 12) = v10;
  if (a2 == 4)
  {
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    return 1;
  }
  else
  {
    memset(v12, 0, sizeof(v12));
    v11 = (unsigned __int16 *)(a1 + 4);
    if (a2 - 4 < a2)
      a2 -= 4;
    webrtc::ColorSpaceExtension::ParseHdrMetadata(v11, a2, (uint64_t)v12);
    result = webrtc::HdrMetadata::Validate((webrtc::HdrMetadata *)v12);
    if (result)
    {
      *(_BYTE *)(a3 + 16) = v12[0];
      *(_OWORD *)(a3 + 17) = *(_OWORD *)((char *)v12 + 1);
      *(_OWORD *)(a3 + 33) = *(_OWORD *)((char *)&v12[1] + 1);
      *(_OWORD *)(a3 + 48) = v12[2];
      result = 1;
      *(_BYTE *)(a3 + 64) = 1;
    }
  }
  return result;
}

uint64_t webrtc::ColorSpaceExtension::ParseHdrMetadata(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  float v6;

  *(float *)(a3 + 32) = (float)(bswap32(*a1) >> 16);
  *(float *)(a3 + 36) = (float)(bswap32(a1[1]) >> 16) / 10000.0;
  v3 = bswap32(a1[3]);
  *(float *)a3 = (float)(bswap32(a1[2]) >> 16) / 50000.0;
  *(float *)(a3 + 4) = (float)HIWORD(v3) / 50000.0;
  v4 = bswap32(a1[5]);
  *(float *)(a3 + 8) = (float)(bswap32(a1[4]) >> 16) / 50000.0;
  *(float *)(a3 + 12) = (float)HIWORD(v4) / 50000.0;
  v5 = bswap32(a1[7]);
  *(float *)(a3 + 16) = (float)(bswap32(a1[6]) >> 16) / 50000.0;
  *(float *)(a3 + 20) = (float)HIWORD(v5) / 50000.0;
  v6 = (float)(bswap32(a1[9]) >> 16) / 50000.0;
  *(float *)(a3 + 24) = (float)(bswap32(a1[8]) >> 16) / 50000.0;
  *(float *)(a3 + 28) = v6;
  *(_DWORD *)(a3 + 40) = __rev16(a1[10]);
  *(_DWORD *)(a3 + 44) = __rev16(a1[11]);
  return 24;
}

BOOL webrtc::HdrMetadata::Validate(webrtc::HdrMetadata *this)
{
  float v1;
  float v3;
  float v6;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (*((_DWORD *)this + 10) > 0x4E20u || *((_DWORD *)this + 11) > 0x4E20u)
    return 0;
  v1 = *((float *)this + 8);
  if (v1 < 0.0 || v1 > 20000.0)
    return 0;
  v3 = *((float *)this + 9);
  if (v3 < 0.0 || v3 > 5.0)
    return 0;
  if (*(float *)this < 0.0 || *(float *)this > 1.0)
    return 0;
  v6 = *((float *)this + 1);
  if (v6 < 0.0 || v6 > 1.0)
    return 0;
  v9 = 0;
  v10 = *((float *)this + 2);
  if (v10 < 0.0)
    return v9;
  if (v10 > 1.0)
    return v9;
  v9 = 0;
  v11 = *((float *)this + 3);
  if (v11 < 0.0)
    return v9;
  if (v11 > 1.0)
    return v9;
  v9 = 0;
  v12 = *((float *)this + 4);
  if (v12 < 0.0)
    return v9;
  if (v12 > 1.0)
    return v9;
  v9 = 0;
  v13 = *((float *)this + 5);
  if (v13 < 0.0)
    return v9;
  if (v13 > 1.0)
    return v9;
  v9 = 0;
  v14 = *((float *)this + 6);
  if (v14 < 0.0 || v14 > 1.0)
    return v9;
  v15 = *((float *)this + 7);
  if (v15 < 0.0)
    return 0;
  return v15 <= 1.0;
}

uint64_t webrtc::ColorSpaceExtension::WriteHdrMetadata(_WORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = __rev16(llroundf(*(float *)(a3 + 32)));
  a1[1] = __rev16(llroundf(*(float *)(a3 + 36) * 10000.0));
  a1[2] = __rev16(llroundf(*(float *)a3 * 50000.0));
  a1[3] = __rev16(llroundf(*(float *)(a3 + 4) * 50000.0));
  a1[4] = __rev16(llroundf(*(float *)(a3 + 8) * 50000.0));
  a1[5] = __rev16(llroundf(*(float *)(a3 + 12) * 50000.0));
  a1[6] = __rev16(llroundf(*(float *)(a3 + 16) * 50000.0));
  a1[7] = __rev16(llroundf(*(float *)(a3 + 20) * 50000.0));
  a1[8] = __rev16(llroundf(*(float *)(a3 + 24) * 50000.0));
  a1[9] = __rev16(llroundf(*(float *)(a3 + 28) * 50000.0));
  a1[10] = bswap32(*(unsigned __int16 *)(a3 + 40)) >> 16;
  a1[11] = bswap32(*(unsigned __int16 *)(a3 + 44)) >> 16;
  return 24;
}

uint64_t webrtc::RTPHeaderExtension::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  char v10;
  __int128 v11;
  std::string *v12;
  __int128 *v13;
  size_t v14;
  const std::string::value_type *v15;
  size_t v16;
  __int128 v17;
  std::string *v18;
  const std::string::value_type *v19;
  size_t v20;
  const std::string::value_type *v21;
  size_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const std::string::value_type *v27;
  size_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  if ((__int128 *)a1 == a2)
    goto LABEL_35;
  v9 = (std::string *)(a1 + 112);
  v10 = *((_BYTE *)a2 + 135);
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    if ((*((_BYTE *)a2 + 135) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v9, *((char **)a2 + 14), *((_QWORD *)a2 + 15));
      v12 = (std::string *)(a1 + 136);
      v13 = (__int128 *)((char *)a2 + 136);
      v14 = *((unsigned __int8 *)a2 + 159);
      if (*(char *)(a1 + 159) < 0)
        goto LABEL_17;
    }
    else
    {
      v11 = a2[7];
      *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      v12 = (std::string *)(a1 + 136);
      v13 = (__int128 *)((char *)a2 + 136);
      v14 = *((unsigned __int8 *)a2 + 159);
      if (*(char *)(a1 + 159) < 0)
        goto LABEL_17;
    }
LABEL_13:
    if ((v14 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v12, *((char **)a2 + 17), *((_QWORD *)a2 + 18));
      v18 = (std::string *)(a1 + 160);
      v19 = (const std::string::value_type *)(a2 + 10);
      v20 = *((unsigned __int8 *)a2 + 183);
      if ((*(char *)(a1 + 183) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else
    {
      v17 = *v13;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v17;
      v18 = (std::string *)(a1 + 160);
      v19 = (const std::string::value_type *)(a2 + 10);
      v20 = *((unsigned __int8 *)a2 + 183);
      if ((*(char *)(a1 + 183) & 0x80000000) == 0)
        goto LABEL_24;
    }
    goto LABEL_28;
  }
  if (v10 >= 0)
    v15 = (const std::string::value_type *)(a2 + 7);
  else
    v15 = (const std::string::value_type *)*((_QWORD *)a2 + 14);
  if (v10 >= 0)
    v16 = *((unsigned __int8 *)a2 + 135);
  else
    v16 = *((_QWORD *)a2 + 15);
  std::string::__assign_no_alias<false>(v9, v15, v16);
  v12 = (std::string *)(a1 + 136);
  v13 = (__int128 *)((char *)a2 + 136);
  v14 = *((unsigned __int8 *)a2 + 159);
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    goto LABEL_13;
LABEL_17:
  if ((v14 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v13;
  else
    v21 = (const std::string::value_type *)*((_QWORD *)a2 + 17);
  if ((v14 & 0x80u) == 0)
    v22 = v14;
  else
    v22 = *((_QWORD *)a2 + 18);
  std::string::__assign_no_alias<false>(v12, v21, v22);
  v18 = (std::string *)(a1 + 160);
  v19 = (const std::string::value_type *)(a2 + 10);
  v20 = *((unsigned __int8 *)a2 + 183);
  if (*(char *)(a1 + 183) < 0)
  {
LABEL_28:
    if ((v20 & 0x80u) == 0)
      v27 = v19;
    else
      v27 = (const std::string::value_type *)*((_QWORD *)a2 + 20);
    if ((v20 & 0x80u) == 0)
      v28 = v20;
    else
      v28 = *((_QWORD *)a2 + 21);
    std::string::__assign_no_alias<false>(v18, v27, v28);
LABEL_35:
    v24 = a1 + 184;
    v25 = (uint64_t)a2 + 184;
    v26 = *(unsigned __int8 *)(a1 + 252);
    if (v26 != *((unsigned __int8 *)a2 + 252))
      goto LABEL_39;
    goto LABEL_36;
  }
LABEL_24:
  if ((v20 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v18, *((char **)a2 + 20), *((_QWORD *)a2 + 21));
    v24 = a1 + 184;
    v25 = (uint64_t)a2 + 184;
    v26 = *(unsigned __int8 *)(a1 + 252);
    if (v26 != *((unsigned __int8 *)a2 + 252))
      goto LABEL_39;
  }
  else
  {
    v23 = *(_OWORD *)v19;
    v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v23;
    v24 = a1 + 184;
    v25 = (uint64_t)a2 + 184;
    v26 = *(unsigned __int8 *)(a1 + 252);
    if (v26 != *((unsigned __int8 *)a2 + 252))
    {
LABEL_39:
      if (v26)
      {
        *(_BYTE *)(a1 + 252) = 0;
      }
      else
      {
        *(_OWORD *)v24 = *(_OWORD *)v25;
        v32 = *(_OWORD *)(v25 + 16);
        v33 = *(_OWORD *)(v25 + 32);
        v34 = *(_OWORD *)(v25 + 48);
        *(_BYTE *)(v24 + 64) = *(_BYTE *)(v25 + 64);
        *(_OWORD *)(v24 + 32) = v33;
        *(_OWORD *)(v24 + 48) = v34;
        *(_OWORD *)(v24 + 16) = v32;
        *(_BYTE *)(a1 + 252) = 1;
      }
      goto LABEL_42;
    }
  }
LABEL_36:
  if (v26)
  {
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v29 = *(_OWORD *)(v25 + 16);
    v30 = *(_OWORD *)(v25 + 32);
    v31 = *(_OWORD *)(v25 + 48);
    *(_BYTE *)(v24 + 64) = *(_BYTE *)(v25 + 64);
    *(_OWORD *)(v24 + 32) = v30;
    *(_OWORD *)(v24 + 48) = v31;
    *(_OWORD *)(v24 + 16) = v29;
  }
LABEL_42:
  v35 = *((_QWORD *)a2 + 32);
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  *(_QWORD *)(a1 + 256) = v35;
  return a1;
}

webrtc::RtpPacket *webrtc::RtpPacket::RtpPacket(webrtc::RtpPacket *this, const webrtc::RtpHeaderExtensionMap *a2, uint64_t *a3)
{
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;

  v5 = (_OWORD *)((char *)this + 32);
  if (a2)
  {
    v6 = *(_OWORD *)a2;
    *(_QWORD *)((char *)this + 46) = *(_QWORD *)((char *)a2 + 14);
    *v5 = v6;
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *((_QWORD *)this + 5) = 0;
    *(_QWORD *)((char *)this + 46) = 0;
  }
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v7 = operator new();
  *(_QWORD *)v7 = a3;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = operator new[]();
  *(_DWORD *)(v7 + 24) = 0;
  v8 = (unsigned int *)(v7 + 24);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = a3;
  *(_WORD *)this = 0;
  *((_WORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_OWORD *)this + 1) = xmmword_208F1A8D0;
  *((_BYTE *)this + 2) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = v7;
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, a3);
  v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
  *(_DWORD *)(v10 + 8) = 0;
  *(_QWORD *)v10 = 0;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)this + 11, (uint64_t *)0xC);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12)) = 0x80;
  return this;
}

uint64_t webrtc::RtpPacket::ParseBuffer(webrtc::RtpPacket *this, const unsigned __int8 *a2, unint64_t a3)
{
  char v5;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  char *ExtensionInfo;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  const unsigned __int8 *v76;
  const unsigned __int8 *v77;
  unint64_t v78;

  if (a3 < 0xC)
    return 0;
  v5 = *a2;
  if ((*a2 & 0xC0) != 0x80)
    return 0;
  *(_BYTE *)this = a2[1] >> 7;
  *((_BYTE *)this + 1) = a2[1] & 0x7F;
  *((_WORD *)this + 2) = bswap32(*((unsigned __int16 *)a2 + 1)) >> 16;
  *((_DWORD *)this + 2) = bswap32(*((_DWORD *)a2 + 1));
  *((_DWORD *)this + 3) = bswap32(*((_DWORD *)a2 + 2));
  v8 = 4 * (v5 & 0xF) + 12;
  if (v8 > a3)
    return 0;
  *((_QWORD *)this + 2) = v8;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  if ((v5 & 0x10) != 0)
  {
    v18 = 4 * (v5 & 0xF) + 16;
    if (v18 > a3)
      return 0;
    v19 = ((unint64_t)a2[v8 | 2] << 10) | (4 * a2[(v8 | 2) + 1]);
    v9 = v19 + v18;
    if (v19 + v18 > a3)
      return 0;
    v20 = bswap32(*(unsigned __int16 *)&a2[v8]) >> 16;
    if (v20 == 48862 || (v20 & 0xFFF0) == 0x1000)
    {
      if (v20 == 48862)
        v28 = 1;
      else
        v28 = 2;
      if (v28 < v19)
      {
        v78 = v28 | v18;
        if (v20 == 48862)
        {
          v29 = 0;
          v30 = &a2[4 * (v5 & 0xF) + 17];
          v31 = 1;
          v76 = v30;
          while (1)
          {
            v32 = a2[v29 + v18];
            if (!a2[v29 + v18])
              break;
LABEL_27:
            if (v32 >> 4 != 15)
            {
              v34 = v32 & 0xF;
              if (v32 > 0xF || v34 == 0)
              {
                v36 = (v34 + 1);
                if (v31 + v36 > v19)
                  goto LABEL_56;
                ExtensionInfo = webrtc::RtpPacket::FindOrCreateExtensionInfo(this, v32 >> 4);
                if (ExtensionInfo[1])
                {
                  v74 = ExtensionInfo;
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
                  {
                    v73 = v73 & 0xFFFFFFFF00000000 | 0x1088;
                    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
                  }
                  ExtensionInfo = v74;
                  v30 = v76;
                }
                else
                {
                  v30 = v76;
                }
                v45 = *((_QWORD *)this + 10);
                if (!((v45 + v78) >> 16))
                {
                  *((_WORD *)ExtensionInfo + 1) = v45 + v78;
                  ExtensionInfo[1] = v36;
                  v29 = v28 + v36 + v45;
                  *((_QWORD *)this + 10) = v29;
                  v31 = v29 + v28;
                  if (v29 + v28 < v19)
                    continue;
                }
              }
            }
            goto LABEL_58;
          }
          while (1)
          {
            v33 = v29 + 1;
            *((_QWORD *)this + 10) = v29 + 1;
            if (v29 + 1 + v28 >= v19)
              break;
            v32 = v30[v29++];
            if (v32)
            {
              v31 = v28 + v33;
              goto LABEL_27;
            }
          }
        }
        else
        {
          v46 = 0;
          v47 = a2 + 17;
          v48 = 2;
          v77 = a2 + 17;
          while (1)
          {
            v49 = v46 + v18;
            v50 = a2[v46 + v18];
            if (!a2[v46 + v18])
              break;
LABEL_48:
            v52 = a2[v49 + 1];
            if (v48 + v52 > v19)
            {
LABEL_56:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v62, v63, v64, v65, v66, v67, v68, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
              goto LABEL_58;
            }
            v53 = webrtc::RtpPacket::FindOrCreateExtensionInfo(this, v50);
            if (v53[1])
            {
              v75 = v53;
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
              {
                v72 = v72 & 0xFFFFFFFF00000000 | 0x1088;
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v54, v55, v56, v57, v58, v59, v60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
              }
              v53 = v75;
            }
            v61 = *((_QWORD *)this + 10);
            v47 = v77;
            if (!((v61 + v78) >> 16))
            {
              *((_WORD *)v53 + 1) = v61 + v78;
              v53[1] = v52;
              v46 = v28 + v52 + v61;
              *((_QWORD *)this + 10) = v46;
              v48 = v46 + v28;
              if (v46 + v28 < v19)
                continue;
            }
            goto LABEL_58;
          }
          v51 = 4 * (v5 & 0xF) + v46;
          while (1)
          {
            *((_QWORD *)this + 10) = ++v46;
            if (v46 + v28 >= v19)
              break;
            v50 = v47[v51++];
            if (v50)
            {
              v49 = v51 + 16;
              v48 = v28 + v46;
              goto LABEL_48;
            }
          }
        }
      }
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
    }
LABEL_58:
    *((_QWORD *)this + 2) = v9;
    if ((v5 & 0x20) == 0)
      goto LABEL_59;
  }
  else
  {
    v9 = 4 * (v5 & 0xF) + 12;
    if ((v5 & 0x20) == 0)
    {
LABEL_59:
      v10 = 0;
      *((_BYTE *)this + 2) = 0;
      goto LABEL_60;
    }
  }
  if (v9 >= a3)
    goto LABEL_59;
  v10 = a2[a3 - 1];
  *((_BYTE *)this + 2) = v10;
  if (!v10)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
    return 0;
  }
LABEL_60:
  v69 = v9 + v10;
  v70 = a3 >= v69;
  v71 = a3 - v69;
  if (!v70)
    return 0;
  *((_QWORD *)this + 3) = v71;
  return 1;
}

uint64_t webrtc::RtpPacket::Parse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  if (*a2)
  {
    v4 = webrtc::RtpPacket::ParseBuffer((webrtc::RtpPacket *)a1, (const unsigned __int8 *)(*(_QWORD *)(*a2 + 16) + a2[1]), a2[2]);
    if ((v4 & 1) != 0)
      goto LABEL_3;
LABEL_12:
    *(_WORD *)a1 = 0;
    *(_WORD *)(a1 + 4) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_OWORD *)(a1 + 16) = xmmword_208F1A8D0;
    *(_BYTE *)(a1 + 2) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(a1 + 88), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - *(_QWORD *)(a1 + 96)));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 16) + *(_QWORD *)(a1 + 96);
    *(_DWORD *)(v12 + 8) = 0;
    *(_QWORD *)v12 = 0;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)(a1 + 88), (uint64_t *)0xC);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(a1 + 88), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - *(_QWORD *)(a1 + 96)));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16) + *(_QWORD *)(a1 + 96)) = 0x80;
    return v4;
  }
  v4 = webrtc::RtpPacket::ParseBuffer((webrtc::RtpPacket *)a1, 0, a2[2]);
  if ((v4 & 1) == 0)
    goto LABEL_12;
LABEL_3:
  v5 = *a2;
  *a2 = 0;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 24);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      v10 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
    }
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 1);
  a2[1] = 0;
  a2[2] = 0;
  return v4;
}

_QWORD *webrtc::RtpPacket::CopyHeaderFrom(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v3 = result;
  *(_WORD *)result = *(_WORD *)a2;
  *((_WORD *)result + 2) = *(_WORD *)(a2 + 4);
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)((char *)result + 46) = *(_QWORD *)(a2 + 46);
  *((_OWORD *)result + 2) = v4;
  if (result != (_QWORD *)a2)
    result = std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(result + 7, *(char **)(a2 + 56), *(char **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  v5 = *(_QWORD *)(a2 + 88);
  v3[10] = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v7 = (unsigned int *)(v5 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a2 + 96);
  v10 = v3[11];
  v3[11] = v5;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 24);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      v14 = *(_QWORD *)(v10 + 16);
      *(_QWORD *)(v10 + 16) = 0;
      if (v14)
        MEMORY[0x20BD0ADD4](v14, 0x1000C8077774924);
      result = (_QWORD *)MEMORY[0x20BD0ADEC](v10, 0x1010C40EE34DA14);
    }
  }
  v3[12] = v9;
  v3[13] = v6;
  v3[3] = 0;
  *((_BYTE *)v3 + 2) = 0;
  return result;
}

uint64_t webrtc::RtpPacket::WriteAt(webrtc::RtpPacket *this, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 11);
  v4 = (uint64_t *)((char *)this + 88);
  v5 = v6;
  if (v6)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v4, (uint64_t *)(*(_QWORD *)(v5 + 8) - *((_QWORD *)this + 12)));
    v5 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
  }
  return v5 + a2;
}

void webrtc::RtpPacket::ZeroMutableExtensions(webrtc::RtpPacket *this)
{
  unint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  webrtc::RtpHeaderExtensionMap *v5;
  uint64_t *v6;
  void *v7;
  size_t v8;
  unsigned int Type;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v3 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    v5 = (webrtc::RtpPacket *)((char *)this + 32);
    v6 = (uint64_t *)((char *)this + 88);
    while (1)
    {
      Type = webrtc::RtpHeaderExtensionMap::GetType(v5, *v2);
      if (Type > 0xD)
        goto LABEL_5;
      if (((1 << Type) & 0x322) != 0)
        break;
      if (!Type)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v1 = v1 & 0xFFFFFFFF00000000 | 0x532;
          rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
        }
        goto LABEL_5;
      }
      if (Type == 13)
      {
        v12 = v2[1];
        if (v12 >= 8)
        {
          v13 = *((unsigned __int16 *)v2 + 1);
          v14 = *v6;
          if (*v6)
          {
            rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v6, (uint64_t *)(*(_QWORD *)(v14 + 8) - *((_QWORD *)this + 12)));
            v14 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
            v12 = v2[1];
          }
          v7 = (void *)(v14 + v13 + 7);
          v8 = v12 - 7;
          goto LABEL_4;
        }
      }
LABEL_5:
      v2 += 4;
      if (v2 == v3)
        return;
    }
    v10 = *((unsigned __int16 *)v2 + 1);
    v11 = *v6;
    if (*v6)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v6, (uint64_t *)(*(_QWORD *)(v11 + 8) - *((_QWORD *)this + 12)));
      v11 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
    }
    v7 = (void *)(v11 + v10);
    v8 = v2[1];
LABEL_4:
    bzero(v7, v8);
    goto LABEL_5;
  }
}

uint64_t *webrtc::RtpPacket::SetCsrcs(rtc::CopyOnWriteBuffer *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 4 * a3;
  v8 = (uint64_t *)((char *)this + 88);
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 2) = 4 * a3 + 12;
  v9 = *((_QWORD *)this + 12);
  v10 = *(_BYTE *)(*(_QWORD *)(v7 + 16) + v9) & 0xF0 | a3;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(v7 + 8) - v9));
  *(_BYTE *)(*(_QWORD *)(*v8 + 16) + v8[1]) = v10;
  if (a3)
  {
    v11 = 0;
    do
    {
      v12 = *(_DWORD *)(a2 + v11);
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v8, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
      *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v11 + 12) = bswap32(v12);
      v11 += 4;
    }
    while (v6 != v11);
  }
  return rtc::CopyOnWriteBuffer::SetSize(v8, *((uint64_t **)this + 2));
}

uint64_t webrtc::RtpPacket::AllocateRawExtension(webrtc::RtpPacket *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  BOOL v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v56;
  uint64_t v57;
  char v58;
  _BYTE *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  _BYTE *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int16 v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 *v82;
  uint64_t v83;
  __int128 v84;
  int v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;

  v9 = a2;
  v11 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v12 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (v11 != v12)
  {
    v13 = (unsigned __int8 *)*((_QWORD *)this + 7);
    while (*v13 != (_DWORD)a2)
    {
      v13 += 4;
      if (v13 == v12)
        goto LABEL_5;
    }
    if (v13[1] == a3)
    {
      v21 = *((unsigned __int16 *)v13 + 1);
      v22 = (uint64_t *)((char *)this + 88);
      v23 = *((_QWORD *)this + 11);
      if (v23)
      {
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v22, (uint64_t *)(*(_QWORD *)(v23 + 8) - *((_QWORD *)this + 12)));
        v23 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
      }
      v24 = v23 + v21;
      v25 = a3 == 0;
      goto LABEL_77;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
    return 0;
  }
LABEL_5:
  if (*((_QWORD *)this + 3))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_14:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
    return 0;
  }
  if (*((_BYTE *)this + 2))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_14;
  }
  v33 = *((_QWORD *)this + 11);
  v34 = *((_QWORD *)this + 12);
  v35 = (_BYTE *)(*(_QWORD *)(v33 + 16) + v34);
  v36 = (int)a2 >= 15 || (unint64_t)(a3 - 1) >= 0x10;
  v37 = !v36;
  if (v36 && !*((_BYTE *)this + 53))
    goto LABEL_83;
  v38 = 4 * (*v35 & 0xF);
  v39 = v38 + 12;
  v40 = v38 + 16;
  v41 = *((_QWORD *)this + 10);
  if (!v41)
  {
    if (v37)
      v42 = -16674;
    else
      v42 = 4096;
    goto LABEL_36;
  }
  v42 = v35[v40 - 3] | (v35[v39] << 8);
  if (v42 != 48862)
    LOBYTE(v37) = 1;
  if ((v37 & 1) != 0)
  {
LABEL_36:
    v51 = v42 == 48862;
    if (v42 == 48862)
      v52 = 1;
    else
      v52 = 2;
    v53 = v41 + a3 + v52;
    v54 = HIBYTE(v42);
    if (v53 + v40 > (unint64_t)(*(_QWORD *)(v33 + 8) - v34))
      goto LABEL_40;
    goto LABEL_45;
  }
  v43 = a3 + 2;
  if (a3 + 2 + ((v12 - v11) >> 2) + v40 + v41 > (unint64_t)(*(_QWORD *)(v33 + 8) - v34))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_41:
    rtc::webrtc_logging_impl::Log("\r\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
    return 0;
  }
  webrtc::RtpPacket::PromoteToTwoByteHeaderExtension(this, a2, a3, a4, a5, a6, a7, a8);
  v41 = *((_QWORD *)this + 10);
  v33 = *((_QWORD *)this + 11);
  v53 = v43 + v41;
  v56 = v43 + v41 + v40;
  v51 = 0;
  LOBYTE(v42) = 0;
  if (v33)
  {
    v54 = 16;
    v52 = 2;
    if (v56 <= *(_QWORD *)(v33 + 8) - *((_QWORD *)this + 12))
      goto LABEL_45;
LABEL_40:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_41;
  }
  v54 = 16;
  v52 = 2;
  if (v56)
    goto LABEL_40;
LABEL_45:
  v95 = v53;
  if (!v41)
  {
    v57 = *((_QWORD *)this + 12);
    v58 = *(_BYTE *)(*(_QWORD *)(v33 + 16) + v57) | 0x10;
    v93 = v54;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(v33 + 8) - v57));
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12)) = v58;
    v59 = (_BYTE *)webrtc::RtpPacket::WriteAt(this, v39);
    *v59 = v93;
    v59[1] = v42;
  }
  if (v51)
  {
    v60 = (a3 - 1) | (16 * v9);
    v61 = *((_QWORD *)this + 10) + v40;
  }
  else
  {
    v62 = *((_QWORD *)this + 10) + v40;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v62) = v9;
    v61 = v39 + *((_QWORD *)this + 10) + 5;
    v60 = a3;
  }
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v61) = v60;
  v63 = *((_QWORD *)this + 10) + (v52 | v40);
  v65 = (char *)*((_QWORD *)this + 8);
  v64 = *((_QWORD *)this + 9);
  if ((unint64_t)v65 >= v64)
  {
    v94 = v39;
    v68 = (char *)*((_QWORD *)this + 7);
    v69 = (v65 - v68) >> 2;
    v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62)
      goto LABEL_84;
    v71 = v64 - (_QWORD)v68;
    if (v71 >> 1 > v70)
      v70 = v71 >> 1;
    v36 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
    v72 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v36)
      v72 = v70;
    if (!v72)
      goto LABEL_82;
    if (v72 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v73 = v63;
    v63 = 4 * v72;
    v74 = (char *)operator new(4 * v72);
    v75 = &v74[4 * v69];
    *v75 = v9;
    v76 = &v74[v63];
    v75[1] = a3;
    LOWORD(v63) = v73;
    *((_WORD *)v75 + 1) = v73;
    v66 = v75 + 4;
    if (v65 == v68)
    {
      v39 = v94;
      goto LABEL_70;
    }
    v77 = v65 - v68 - 4;
    if (v77 >= 0x2C)
    {
      v39 = v94;
      if ((unint64_t)(v68 - v74) >= 0x20)
      {
        v78 = (v77 >> 2) + 1;
        v79 = 4 * (v78 & 0x7FFFFFFFFFFFFFF8);
        v80 = &v65[-v79];
        v75 -= v79;
        v81 = &v74[4 * v69 - 16];
        v82 = (__int128 *)(v65 - 16);
        v83 = v78 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v84 = *v82;
          *((_OWORD *)v81 - 1) = *(v82 - 1);
          *(_OWORD *)v81 = v84;
          v81 -= 32;
          v82 -= 2;
          v83 -= 8;
        }
        while (v83);
        v65 = v80;
        if (v78 == (v78 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_69;
      }
    }
    else
    {
      v39 = v94;
    }
    do
    {
      v85 = *((_DWORD *)v65 - 1);
      v65 -= 4;
      *((_DWORD *)v75 - 1) = v85;
      v75 -= 4;
    }
    while (v65 != v68);
LABEL_69:
    v65 = v68;
LABEL_70:
    v67 = v95;
    *((_QWORD *)this + 7) = v75;
    *((_QWORD *)this + 8) = v66;
    *((_QWORD *)this + 9) = v76;
    if (v65)
      operator delete(v65);
    goto LABEL_72;
  }
  if (!v65)
  {
LABEL_82:
    __break(1u);
LABEL_83:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc", 264, "!two_byte_header_required || extensions_.ExtmapAllowMixed()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v92);
LABEL_84:
    abort();
  }
  *v65 = v9;
  v65[1] = a3;
  v66 = v65 + 4;
  *((_WORD *)v65 + 1) = v63;
  v67 = v95;
LABEL_72:
  *((_QWORD *)this + 8) = v66;
  *((_QWORD *)this + 10) = v67;
  v86 = v67 + 3;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
  v87 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + (v39 | 2));
  *v87 = v86 >> 10;
  v87[1] = v86 >> 2;
  v89 = *((_QWORD *)this + 10);
  v88 = *((_QWORD *)this + 11);
  if (v88)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(v88 + 8) - *((_QWORD *)this + 12)));
    v88 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
  }
  bzero((void *)(v88 + v89 + v40), (v86 & 0x3FFFC) - v89);
  v90 = (uint64_t *)(v40 + ((unsigned __int16)v86 & 0xFFFC));
  *((_QWORD *)this + 2) = v90;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)this + 11, v90);
  v91 = *((_QWORD *)this + 11);
  if (v91)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)this + 11, (uint64_t *)(*(_QWORD *)(v91 + 8) - *((_QWORD *)this + 12)));
    v91 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
  }
  v24 = v91 + (unsigned __int16)v63;
  v25 = a3 == 0;
LABEL_77:
  if (v25)
    return 0;
  else
    return v24;
}

uint64_t *webrtc::RtpPacket::PromoteToTwoByteHeaderExtension(webrtc::RtpPacket *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  std::string *v32;
  unint64_t v33;

  v9 = (uint64_t *)((char *)this + 88);
  v10 = *((_QWORD *)this + 8);
  v11 = v10 - *((_QWORD *)this + 7);
  v12 = v11 >> 2;
  if (!v11)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc", 346, "extension_entries_.size() > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v12);
    goto LABEL_12;
  }
  v14 = *((_QWORD *)this + 3);
  if (v14)
  {
LABEL_12:
    v32 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc", 347, "payload_size_ == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v14);
    return (uint64_t *)webrtc::RtpPacket::SetPadding((webrtc::RtpPacket *)v32, v33);
  }
  v15 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12));
  v16 = 4 * (*v15 & 0xF);
  v17 = v16 + 12;
  v18 = v16 + 16;
  if ((v15[v16 + 13] | (v15[v16 + 12] << 8)) == 0xBEDE)
    goto LABEL_6;
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc", 349, "kOneByteExtensionProfileId == ByteReader<uint16_t>::ReadBigEndian( data() + extensions_offset - 4)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, 48862);
  while (1)
  {
    v20 = v10 - 4;
    memmove((void *)(v19 + v8 + v12), (const void *)(v19 + v8), *(unsigned __int8 *)(v10 - 3));
    v21 = *(_BYTE *)(v10 - 3);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v8 + v12 - 1) = v21;
    v22 = *(_BYTE *)(v10 - 4);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v8 + v12-- - 2) = v22;
    v10 = v20;
    if (v20 == *((_QWORD *)this + 7))
      break;
LABEL_6:
    v8 = *(unsigned __int16 *)(v10 - 2);
    *(_WORD *)(v10 - 2) = v12 + v8;
    v19 = *v9;
    if (*v9)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(v19 + 8) - *((_QWORD *)this + 12)));
      v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
    }
  }
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
  *(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + v17) = 16;
  v23 = *((_QWORD *)this + 11);
  v24 = *((_QWORD *)this + 10) + ((uint64_t)(*((_QWORD *)this + 8) - *((_QWORD *)this + 7)) >> 2);
  *((_QWORD *)this + 10) = v24;
  v25 = v24 + 3;
  v26 = (unint64_t)(v24 + 3) >> 2;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(v23 + 8) - *((_QWORD *)this + 12)));
  v27 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) + (v17 | 2));
  *v27 = v25 >> 10;
  v27[1] = v26;
  v29 = *((_QWORD *)this + 10);
  v28 = *((_QWORD *)this + 11);
  if (v28)
  {
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(v28 + 8) - *((_QWORD *)this + 12)));
    v28 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
  }
  bzero((void *)(v28 + v29 + v18), (v25 & 0x3FFFC) - v29);
  v30 = (uint64_t *)(v18 + ((unsigned __int16)v25 & 0xFFFC));
  *((_QWORD *)this + 2) = v30;
  return rtc::CopyOnWriteBuffer::SetSize(v9, v30);
}

BOOL webrtc::RtpPacket::SetPadding(webrtc::RtpPacket *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = (uint64_t *)((char *)this + 88);
  v3 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 3) + *((_QWORD *)this + 2);
  v6 = v5 + a2;
  if (v3)
  {
    v7 = *(_QWORD *)(v3 + 8) - *((_QWORD *)this + 12);
    if (v6 <= v7)
    {
LABEL_3:
      *((_BYTE *)this + 2) = a2;
      rtc::CopyOnWriteBuffer::SetSize((uint64_t *)this + 11, (uint64_t *)(v5 + a2));
      v8 = *((unsigned __int8 *)this + 2);
      if (*((_BYTE *)this + 2))
      {
        v9 = *((_QWORD *)this + 3) + *((_QWORD *)this + 2);
        v10 = *((_QWORD *)this + 11);
        if (v10)
        {
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v4, (uint64_t *)(*(_QWORD *)(v10 + 8) - *((_QWORD *)this + 12)));
          v10 = *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12);
        }
        bzero((void *)(v10 + v9), *((unsigned __int8 *)this + 2) - 1);
        v21 = v8 + v9;
        v22 = *((_BYTE *)this + 2);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v4, (uint64_t *)(*(_QWORD *)(*((_QWORD *)this + 11) + 8) - *((_QWORD *)this + 12)));
        *(_BYTE *)(v21 + *(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12) - 1) = v22;
        v18 = *((_QWORD *)this + 12);
        v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        v20 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + v18) | 0x20;
      }
      else
      {
        v18 = *((_QWORD *)this + 12);
        v19 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
        v20 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + v18) & 0xDF;
      }
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v4, (uint64_t *)(v19 - v18));
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 11) + 16) + *((_QWORD *)this + 12)) = v20;
      return v6 <= v7;
    }
  }
  else
  {
    v7 = 0;
    if (!v6)
      goto LABEL_3;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet.cc");
  return v6 <= v7;
}

char *webrtc::RtpPacket::FindOrCreateExtensionInfo(webrtc::RtpPacket *this, int a2)
{
  char v2;
  char *v4;
  char *v5;
  char *result;
  unint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  char *v26;

  v2 = a2;
  v4 = (char *)*((_QWORD *)this + 7);
  v5 = (char *)*((_QWORD *)this + 8);
  if (v4 == v5)
  {
LABEL_5:
    v7 = *((_QWORD *)this + 9);
    if ((unint64_t)v5 < v7)
    {
      if (!v5)
        goto LABEL_28;
      *(_WORD *)v5 = a2;
      v8 = v5 + 4;
      *((_WORD *)v5 + 1) = 0;
      *((_QWORD *)this + 8) = v5 + 4;
      if (v4 == v5 + 4)
        goto LABEL_28;
      return v8 - 4;
    }
    v9 = v5 - v4;
    v10 = (v5 - v4) >> 2;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62)
      goto LABEL_29;
    v12 = v7 - (_QWORD)v4;
    if (v12 >> 1 > v11)
      v11 = v12 >> 1;
    v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v11;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = 4 * v14;
      v16 = operator new(4 * v14);
      v17 = &v16[4 * v10];
      *v17 = v2;
      v17[1] = 0;
      *((_WORD *)v17 + 1) = 0;
      v8 = v17 + 4;
      if (v4 != v5)
      {
        if ((unint64_t)(v9 - 4) < 0x2C)
          goto LABEL_33;
        if ((unint64_t)(v4 - v16) < 0x20)
          goto LABEL_33;
        v18 = ((unint64_t)(v9 - 4) >> 2) + 1;
        v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
        v20 = &v5[-v19];
        v17 -= v19;
        v21 = &v16[4 * v10 - 16];
        v22 = v5 - 16;
        v23 = v18 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v24 = *(_OWORD *)v22;
          *(v21 - 1) = *((_OWORD *)v22 - 1);
          *v21 = v24;
          v21 -= 2;
          v22 -= 32;
          v23 -= 8;
        }
        while (v23);
        v5 = v20;
        if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_33:
          do
          {
            v25 = *((_DWORD *)v5 - 1);
            v5 -= 4;
            *((_DWORD *)v17 - 1) = v25;
            v17 -= 4;
          }
          while (v5 != v4);
        }
      }
      *((_QWORD *)this + 7) = v17;
      *((_QWORD *)this + 8) = v8;
      *((_QWORD *)this + 9) = &v16[v15];
      if (v4)
      {
        operator delete(v4);
        v26 = (char *)*((_QWORD *)this + 7);
        *((_QWORD *)this + 8) = v8;
        if (v26 != v8)
          return v8 - 4;
      }
      else
      {
        *((_QWORD *)this + 8) = v8;
        if (v17 != v8)
          return v8 - 4;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    abort();
  }
  result = (char *)*((_QWORD *)this + 7);
  while (*result != a2)
  {
    result += 4;
    if (result == v5)
      goto LABEL_5;
  }
  return result;
}

uint64_t *webrtc::RtpPacketHistory::StoredPacket::IncrementTimesRetransmitted(uint64_t *result, uint64_t **a2)
{
  uint64_t *v2;
  unint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;

  v2 = result;
  if (!a2)
  {
    v15 = result + 4;
    goto LABEL_19;
  }
  result = std::__tree<webrtc::RtpPacketHistory::StoredPacket *,webrtc::RtpPacketHistory::MoreUseful,std::allocator<webrtc::RtpPacketHistory::StoredPacket *>>::__erase_unique<webrtc::RtpPacketHistory::StoredPacket *>(a2, (uint64_t)result);
  v4 = v2[4] + 1;
  v2[4] = v4;
  if (result)
  {
    v6 = a2 + 1;
    v5 = a2[1];
    if (!v5)
    {
      v7 = a2 + 1;
      goto LABEL_14;
    }
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        v9 = *(_QWORD *)(v8 + 32);
        if (v4 == v9)
          break;
        if (v4 >= v9)
        {
          if (v9 >= v4)
            return result;
          goto LABEL_12;
        }
LABEL_5:
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_14;
      }
      v10 = v2[3];
      v11 = *(_QWORD *)(v8 + 24);
      if (v10 > v11)
        goto LABEL_5;
      if (v11 <= v10)
        return result;
LABEL_12:
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
LABEL_14:
        v12 = (uint64_t *)operator new(0x28uLL);
        v12[4] = (uint64_t)v2;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v7;
        *v6 = v12;
        v13 = (uint64_t *)**a2;
        if (v13)
        {
          *a2 = v13;
          v14 = *v6;
        }
        else
        {
          v14 = v12;
        }
        result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a2[1], v14);
        v15 = a2 + 2;
LABEL_19:
        ++*v15;
        return result;
      }
    }
  }
  return result;
}

void webrtc::RtpPacketHistory::~RtpPacketHistory(webrtc::RtpPacketHistory *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (*((_BYTE *)this + 392))
  {
    v2 = (unsigned int *)*((_QWORD *)this + 45);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
    v6 = *((_QWORD *)this + 34);
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 24);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        v10 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v10)
          MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
      }
    }
    v11 = (void *)*((_QWORD *)this + 30);
    if (v11)
    {
      *((_QWORD *)this + 31) = v11;
      operator delete(v11);
    }
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  v12 = (void **)((char *)this + 104);
  std::deque<webrtc::RtpPacketHistory::StoredPacket>::clear((_QWORD *)this + 13);
  v13 = (void **)*((_QWORD *)this + 14);
  v14 = (void **)*((_QWORD *)this + 15);
  if (v13 != v14)
  {
    do
    {
      v15 = *v13++;
      operator delete(v15);
    }
    while (v13 != v14);
    v17 = *((_QWORD *)this + 14);
    v16 = *((_QWORD *)this + 15);
    if (v16 != v17)
      *((_QWORD *)this + 15) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*v12)
    operator delete(*v12);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
}

uint64_t webrtc::RtpPacketHistory::SetStorePacketsStatus(uint64_t a1, int a2, unint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a2 && *(_DWORD *)(a1 + 88) && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc");
  std::deque<webrtc::RtpPacketHistory::StoredPacket>::clear((_QWORD *)(a1 + 104));
  std::__tree<sigslot::_signal_base_interface *>::destroy(a1 + 160, *(_QWORD **)(a1 + 168));
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  if (*(_BYTE *)(a1 + 392))
  {
    v14 = *(unsigned int **)(a1 + 360);
    if (v14)
    {
      v15 = v14 + 2;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
    }
    v18 = *(_QWORD *)(a1 + 272);
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 24);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = *(_QWORD *)(v18 + 16);
        *(_QWORD *)(v18 + 16) = 0;
        if (v22)
          MEMORY[0x20BD0ADD4](v22, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v18, 0x1010C40EE34DA14);
      }
    }
    v23 = *(void **)(a1 + 240);
    if (v23)
    {
      *(_QWORD *)(a1 + 248) = v23;
      operator delete(v23);
    }
    *(_BYTE *)(a1 + 392) = 0;
  }
  *(_DWORD *)(a1 + 88) = a2;
  v24 = 9600;
  if (a3 < 0x2580)
    v24 = a3;
  *(_QWORD *)(a1 + 80) = v24;
  return pthread_mutex_unlock(v6);
}

void webrtc::RtpPacketHistory::CullOldPackets(webrtc::RtpPacketHistory *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  int64_t v20;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v3 = *((_QWORD *)this + 12);
  v4 = &webrtc::RtpPacketHistory::kMinPacketDuration;
  if ((unint64_t)(v3 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v37 = 3 * v3;
    if (v3 >= 333334)
      v4 = &v37;
  }
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = *v4;
    v35 = 3 * *v4;
    v36 = (uint64_t **)((char *)this + 160);
    do
    {
      if (v5 >> 7 < 0x4B)
      {
        v14 = *((_QWORD *)this + 17);
        v15 = v14 / 0x66;
        v16 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v14 / 0x66));
        v17 = v14 % 0x66;
        if (*(_BYTE *)(v16 + 40 * (v14 % 0x66) + 8))
          return;
        v18 = *(_QWORD *)(v16 + 40 * v17 + 16);
        v19 = v6 == 0x8000000000000000 || v18 == 0x8000000000000000;
        v20 = v18 + v6;
        if (v19)
          v20 = 0x8000000000000000;
        if (v6 == 0x7FFFFFFFFFFFFFFFLL || v18 == 0x7FFFFFFFFFFFFFFFLL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        if (v20 > v2)
          return;
        if (v5 < *((_QWORD *)this + 10))
        {
          v22 = v18 + v35;
          if (v18 == 0x8000000000000000)
            v22 = *(_QWORD *)(v16 + 40 * v17 + 16);
          if (v18 != 0x7FFFFFFFFFFFFFFFLL)
            v18 = v22;
          if (v18 > v2)
            return;
        }
        v11 = *(_QWORD **)(v16 + 40 * v17);
        *(_QWORD *)(v16 + 40 * v17) = 0;
        if (*((_DWORD *)this + 2) != 1
          || (std::__tree<webrtc::RtpPacketHistory::StoredPacket *,webrtc::RtpPacketHistory::MoreUseful,std::allocator<webrtc::RtpPacketHistory::StoredPacket *>>::__erase_unique<webrtc::RtpPacketHistory::StoredPacket *>(v36, *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v15) + 40 * v17), (v5 = *((_QWORD *)this + 18)) != 0))
        {
          v23 = *((_QWORD *)this + 17);
          do
          {
            v24 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v23 / 0x66)) + 40 * (v23 % 0x66));
            if (*v24)
              break;
            *v24 = 0;
            --v5;
            *((_QWORD *)this + 17) = ++v23;
            *((_QWORD *)this + 18) = v5;
            if (v23 >= 0xCC)
            {
              operator delete(**((void ***)this + 14));
              *((_QWORD *)this + 14) += 8;
              v5 = *((_QWORD *)this + 18);
              v23 = *((_QWORD *)this + 17) - 102;
              *((_QWORD *)this + 17) = v23;
            }
          }
          while (v5);
        }
      }
      else
      {
        v7 = *((_QWORD *)this + 17);
        v8 = v7 / 0x66;
        v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v7 / 0x66));
        v10 = v7 % 0x66;
        v11 = *(_QWORD **)(v9 + 40 * v10);
        *(_QWORD *)(v9 + 40 * v10) = 0;
        if (*((_DWORD *)this + 2) == 1)
        {
          std::__tree<webrtc::RtpPacketHistory::StoredPacket *,webrtc::RtpPacketHistory::MoreUseful,std::allocator<webrtc::RtpPacketHistory::StoredPacket *>>::__erase_unique<webrtc::RtpPacketHistory::StoredPacket *>(v36, *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v8) + 40 * v10);
          v5 = *((_QWORD *)this + 18);
        }
        if (v5)
        {
          v12 = *((_QWORD *)this + 17);
          do
          {
            v13 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v12 / 0x66)) + 40 * (v12 % 0x66));
            if (*v13)
              break;
            *v13 = 0;
            --v5;
            *((_QWORD *)this + 17) = ++v12;
            *((_QWORD *)this + 18) = v5;
            if (v12 >= 0xCC)
            {
              operator delete(**((void ***)this + 14));
              *((_QWORD *)this + 14) += 8;
              v5 = *((_QWORD *)this + 18);
              v12 = *((_QWORD *)this + 17) - 102;
              *((_QWORD *)this + 17) = v12;
            }
          }
          while (v5);
        }
      }
      if (v11)
      {
        v25 = (unsigned int *)v11[22];
        if (v25)
        {
          v26 = v25 + 2;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
        v29 = v11[11];
        if (v29)
        {
          v30 = (unsigned int *)(v29 + 24);
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            v33 = *(_QWORD *)(v29 + 16);
            *(_QWORD *)(v29 + 16) = 0;
            if (v33)
              MEMORY[0x20BD0ADD4](v33, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v29, 0x1010C40EE34DA14);
          }
        }
        v34 = (void *)v11[7];
        if (v34)
        {
          v11[8] = v34;
          operator delete(v34);
        }
        MEMORY[0x20BD0ADEC](v11, 0x1020C4000E59722);
        v5 = *((_QWORD *)this + 18);
      }
    }
    while (v5);
  }
}

uint64_t webrtc::RtpPacketHistory::PutRtpPacket(uint64_t a1, __int128 **a2, uint64_t a3)
{
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  __int128 *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE *v44;
  _BYTE *v45;
  int64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unsigned int *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t **v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  uint64_t **v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  void *v111;
  void *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int64_t v120;
  char *v121;
  _QWORD *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  BOOL v131;
  int64_t v132;
  unint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  void *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  int64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  char *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  int64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  int64_t v180;
  unint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  __int128 *v185;
  char *v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t *v193;
  unsigned int v194;
  unsigned __int16 v195;
  unsigned int v196;
  void **v198;
  uint64_t *v200;
  uint64_t *v201;
  unint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  unint64_t v206;
  char *v207;
  void *v208;
  void *v209;
  char *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  char *v214;
  uint64_t *v215;
  void *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  int64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 *v238;
  char *v239;
  uint64_t v240;
  __int128 v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  __int128 **v245;
  pthread_mutex_t *v246;
  char **v247;
  unsigned int v248;
  unsigned int v249;
  _QWORD *v250;
  void *v251;

  v246 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (!*(_DWORD *)(a1 + 88))
    return pthread_mutex_unlock(v246);
  webrtc::RtpPacketHistory::CullOldPackets((webrtc::RtpPacketHistory *)a1);
  v6 = *((unsigned __int16 *)*a2 + 2);
  v7 = *(_QWORD *)(a1 + 144);
  v244 = a3;
  v245 = a2;
  if (!v7
    || (v8 = *(_QWORD *)(a1 + 136),
        v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (v8 / 0x66)) + 40 * (v8 % 0x66))
                                 + 4),
        v9 == v6))
  {
    v10 = 0;
    goto LABEL_5;
  }
  v10 = v6 - v9;
  if (v6 - v9 == 0x8000)
  {
    if (v9 >= v6)
      goto LABEL_199;
LABEL_205:
    if (v9 > v6)
    {
      v10 += 0x10000;
      goto LABEL_5;
    }
    goto LABEL_207;
  }
  if ((v10 & 0x8000) == 0)
    goto LABEL_205;
LABEL_199:
  if (v9 < v6)
    goto LABEL_218;
LABEL_207:
  if ((v10 & 0x80000000) != 0)
    goto LABEL_219;
LABEL_5:
  if (v7 <= v10
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * ((*(_QWORD *)(a1 + 136) + (unint64_t)v10) / 0x66))
                  + 40 * ((*(_QWORD *)(a1 + 136) + (unint64_t)v10) % 0x66)))
  {
    goto LABEL_28;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packet_history.cc");
  webrtc::RtpPacketHistory::RemovePacket((webrtc::RtpPacketHistory *)a1, v10, &v250);
  v18 = v250;
  v250 = 0;
  if (v18)
  {
    v19 = (unsigned int *)v18[22];
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
    v23 = v18[11];
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 24);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(_QWORD *)(v23 + 16);
        *(_QWORD *)(v23 + 16) = 0;
        if (v27)
          MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
      }
    }
    v28 = (void *)v18[7];
    if (v28)
    {
      v18[8] = v28;
      operator delete(v28);
    }
    MEMORY[0x20BD0ADEC](v18, 0x1020C4000E59722);
  }
  v7 = *(_QWORD *)(a1 + 144);
  if (!v7)
    goto LABEL_27;
  v8 = *(_QWORD *)(a1 + 136);
  v29 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (v8 / 0x66)) + 40 * (v8 % 0x66)) + 4);
  if (v29 == v6)
    goto LABEL_27;
  v10 = v6 - v29;
  if (v6 - v29 == 0x8000)
  {
    if (v29 >= v6)
      goto LABEL_217;
LABEL_279:
    if (v29 > v6)
    {
      v10 += 0x10000;
      goto LABEL_28;
    }
    goto LABEL_281;
  }
  if ((v10 & 0x8000) == 0)
    goto LABEL_279;
LABEL_217:
  if (v29 < v6)
  {
LABEL_218:
    v10 -= 0x10000;
    goto LABEL_219;
  }
LABEL_281:
  if ((v10 & 0x80000000) != 0)
  {
LABEL_219:
    v198 = (void **)(a1 + 104);
    while (1)
    {
      v201 = *(uint64_t **)(a1 + 112);
      v200 = *(uint64_t **)(a1 + 120);
      if (!v8)
        break;
LABEL_271:
      v242 = &v201[v8 / 0x66];
      v243 = *v242 + 40 * (v8 % 0x66);
      if (v200 == v201)
        v243 = 0;
      if (v243 == *v242)
        v243 = *(v242 - 1) + 4080;
      *(_QWORD *)(v243 - 8) = 0;
      *(_OWORD *)(v243 - 24) = 0u;
      *(_OWORD *)(v243 - 40) = 0u;
      v8 = *(_QWORD *)(a1 + 136) - 1;
      v7 = *(_QWORD *)(a1 + 144) + 1;
      *(_QWORD *)(a1 + 136) = v8;
      *(_QWORD *)(a1 + 144) = v7;
      if (__CFADD__(v10++, 1))
      {
LABEL_27:
        v10 = 0;
        goto LABEL_28;
      }
    }
    v202 = v200 - v201;
    v203 = 102 * v202 - 1;
    if (v200 == v201)
      v203 = 0;
    if (v203 - v7 >= 0x66)
    {
      *(_QWORD *)(a1 + 136) = 102;
      v251 = (void *)*(v200 - 1);
      *(_QWORD *)(a1 + 120) = v200 - 1;
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front(v198, &v251);
LABEL_270:
      v8 = *(_QWORD *)(a1 + 136);
      v201 = *(uint64_t **)(a1 + 112);
      v200 = *(uint64_t **)(a1 + 120);
      goto LABEL_271;
    }
    v204 = *(char **)(a1 + 128);
    v205 = *(char **)(a1 + 104);
    if (v202 < (v204 - v205) >> 3)
    {
      if (v201 == (uint64_t *)v205)
      {
        v251 = operator new(0xFF0uLL);
        std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)v198, &v251);
        v213 = *(_QWORD *)(a1 + 120);
        v251 = *(void **)(v213 - 8);
        *(_QWORD *)(a1 + 120) = v213 - 8;
        std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front(v198, &v251);
        if (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) == 8)
          goto LABEL_229;
      }
      else
      {
        v251 = operator new(0xFF0uLL);
        std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front(v198, &v251);
        if (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) == 8)
        {
LABEL_229:
          *(_QWORD *)(a1 + 136) = 51;
          goto LABEL_270;
        }
      }
      *(_QWORD *)(a1 + 136) += 102;
      goto LABEL_270;
    }
    v249 = v10;
    if (v204 == v205)
      v206 = 1;
    else
      v206 = (v204 - v205) >> 2;
    if (v206 >> 61)
LABEL_284:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v207 = (char *)operator new(8 * v206);
    v208 = operator new(0xFF0uLL);
    v209 = v208;
    if (v206)
    {
      v210 = &v207[8 * v206];
      *(_QWORD *)v207 = v208;
      v211 = v207 + 8;
      v212 = v207;
      v10 = v249;
      if (v201 != v200)
        goto LABEL_244;
      goto LABEL_240;
    }
    v214 = (char *)operator new(8uLL);
    v210 = v214 + 8;
    operator delete(v207);
    v201 = *(uint64_t **)(a1 + 112);
    v215 = *(uint64_t **)(a1 + 120);
    v207 = v214;
    *(_QWORD *)v214 = v209;
    v211 = v214 + 8;
    v212 = v214;
    v10 = v249;
    if (v201 == v215)
    {
LABEL_240:
      v216 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v207;
      *(_QWORD *)(a1 + 112) = v212;
      *(_QWORD *)(a1 + 120) = v211;
      *(_QWORD *)(a1 + 128) = v210;
      if (v211 - v212 == 8)
        v217 = 51;
      else
        v217 = *(_QWORD *)(a1 + 136) + 102;
      v198 = (void **)(a1 + 104);
      *(_QWORD *)(a1 + 136) = v217;
      if (v216)
        operator delete(v216);
      goto LABEL_270;
    }
    while (1)
    {
LABEL_244:
      if (v211 != v210)
        goto LABEL_243;
      if (v212 > v207)
      {
        v219 = (v212 - v207) >> 3;
        if (v219 >= -1)
          v220 = v219 + 1;
        else
          v220 = v219 + 2;
        v221 = v220 >> 1;
        v222 = &v212[-8 * (v220 >> 1)];
        v223 = v211;
        if (v211 != v212)
        {
          memmove(v222, v212, v211 - v212);
          v223 = v212;
        }
        v210 = v211;
        v211 = &v222[v211 - v212];
        v212 = &v223[-8 * v221];
        if (!v211)
          goto LABEL_283;
        goto LABEL_243;
      }
      v224 = (v211 - v207) >> 2;
      if (v211 == v207)
        v224 = 1;
      if (v224 >> 61)
        goto LABEL_284;
      v225 = v224 >> 2;
      v226 = 8 * v224;
      v227 = (char *)operator new(8 * v224);
      v228 = v227;
      v229 = &v227[8 * v225];
      v230 = v229;
      v231 = v211 - v212;
      if (v211 != v212)
      {
        v230 = &v229[v231 & 0xFFFFFFFFFFFFFFF8];
        v232 = v231 - 8;
        if (v232 < 0x38 || (unint64_t)(&v227[8 * v225] - v212) < 0x20)
        {
          v233 = &v227[8 * v225];
          v234 = v212;
          do
          {
LABEL_258:
            v235 = *(_QWORD *)v234;
            v234 += 8;
            *(_QWORD *)v233 = v235;
            v233 += 8;
          }
          while (v233 != v230);
          goto LABEL_259;
        }
        v236 = (v232 >> 3) + 1;
        v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
        v233 = &v229[v237];
        v234 = &v212[v237];
        v238 = (__int128 *)(v212 + 16);
        v239 = &v227[8 * v225 + 16];
        v240 = v236 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v241 = *v238;
          *((_OWORD *)v239 - 1) = *(v238 - 1);
          *(_OWORD *)v239 = v241;
          v238 += 2;
          v239 += 32;
          v240 -= 4;
        }
        while (v240);
        if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_258;
      }
LABEL_259:
      v10 = v249;
      if (v207)
        operator delete(v207);
      v207 = v228;
      v210 = &v228[v226];
      v211 = v230;
      v212 = v229;
      if (!v230)
      {
LABEL_283:
        __break(1u);
        goto LABEL_284;
      }
LABEL_243:
      v218 = *v201++;
      *(_QWORD *)v211 = v218;
      v211 += 8;
      if (v201 == *(uint64_t **)(a1 + 120))
        goto LABEL_240;
    }
  }
LABEL_28:
  if ((int)v10 >= (int)v7)
  {
    v247 = (char **)(a1 + 104);
    v248 = v10;
    while (1)
    {
      v97 = *(char **)(a1 + 112);
      v98 = *(char **)(a1 + 120);
      v99 = v98 - v97;
      v100 = (v98 - v97) >> 3;
      v101 = v98 == v97 ? 0 : 102 * v100 - 1;
      v102 = *(_QWORD *)(a1 + 136);
      if (v101 == v102 + v7)
        break;
LABEL_145:
      if (v98 == v97)
        goto LABEL_283;
      v139 = *(_QWORD *)(a1 + 144) + *(_QWORD *)(a1 + 136);
      v140 = *(_QWORD *)&v97[8 * (v139 / 0x66)];
      if (!v140)
        goto LABEL_283;
      v141 = v140 + 40 * (v139 % 0x66);
      *(_QWORD *)(v141 + 32) = 0;
      *(_OWORD *)v141 = 0u;
      *(_OWORD *)(v141 + 16) = 0u;
      v7 = *(_QWORD *)(a1 + 144) + 1;
      *(_QWORD *)(a1 + 144) = v7;
      if ((int)v10 < (int)v7)
        goto LABEL_29;
    }
    if (v102 >= 0x66)
    {
      *(_QWORD *)(a1 + 136) = v102 - 102;
      v103 = v97 + 8;
      v104 = *(_QWORD *)v97;
      *(_QWORD *)(a1 + 112) = v97 + 8;
      if (v98 != *(char **)(a1 + 128))
        goto LABEL_105;
      v115 = *v247;
      if (v103 > *v247)
      {
        v116 = (v103 - *v247) >> 3;
        if (v116 >= -1)
          v117 = v116 + 1;
        else
          v117 = v116 + 2;
        v118 = v117 >> 1;
        v119 = &v103[-8 * (v117 >> 1)];
        v120 = v98 - v103;
        if (v98 != v103)
        {
          memmove(&v103[-8 * (v117 >> 1)], v97 + 8, v98 - v103);
          v98 = *(char **)(a1 + 112);
        }
        v121 = &v98[-8 * v118];
        v98 = &v119[v120];
        *(_QWORD *)(a1 + 112) = v121;
        *(_QWORD *)(a1 + 120) = &v119[v120];
LABEL_106:
        *(_QWORD *)v98 = v104;
        *(_QWORD *)(a1 + 120) += 8;
LABEL_144:
        v97 = *(char **)(a1 + 112);
        v98 = *(char **)(a1 + 120);
        goto LABEL_145;
      }
      v126 = (v98 - v115) >> 2;
      if (v98 == v115)
        v126 = 1;
      if (v126 >> 61)
        goto LABEL_284;
      v127 = v126 >> 2;
      v128 = 8 * v126;
      v129 = (char *)operator new(8 * v126);
      v130 = &v129[8 * v127];
      v132 = v98 - v103;
      v131 = v98 == v103;
      v98 = v130;
      if (!v131)
      {
        v98 = &v130[v132 & 0xFFFFFFFFFFFFFFF8];
        v133 = v132 - 8;
        if ((unint64_t)(v132 - 8) < 0x38)
        {
          v134 = &v129[8 * v127];
          do
          {
LABEL_181:
            v174 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v134 = v174;
            v134 += 8;
          }
          while (v134 != v98);
          goto LABEL_182;
        }
        v134 = &v129[8 * v127];
        if ((unint64_t)(v134 - v103) < 0x20)
          goto LABEL_181;
        v168 = (v133 >> 3) + 1;
        v169 = 8 * (v168 & 0x3FFFFFFFFFFFFFFCLL);
        v134 = &v130[v169];
        v103 += v169;
        v170 = (__int128 *)(v97 + 24);
        v171 = &v129[8 * v127 + 16];
        v172 = v168 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v173 = *v170;
          *((_OWORD *)v171 - 1) = *(v170 - 1);
          *(_OWORD *)v171 = v173;
          v170 += 2;
          v171 += 32;
          v172 -= 4;
        }
        while (v172);
        if (v168 != (v168 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_181;
      }
LABEL_182:
      *(_QWORD *)(a1 + 104) = v129;
      *(_QWORD *)(a1 + 112) = v130;
      *(_QWORD *)(a1 + 120) = v98;
      *(_QWORD *)(a1 + 128) = &v129[v128];
      if (v115)
      {
        operator delete(v115);
        v98 = *(char **)(a1 + 120);
      }
LABEL_105:
      if (!v98)
        goto LABEL_283;
      goto LABEL_106;
    }
    v105 = *(char **)(a1 + 128);
    v106 = *(char **)(a1 + 104);
    if (v100 >= (unint64_t)((v105 - v106) >> 3))
    {
      if (v105 == v106)
        v107 = 1;
      else
        v107 = (v105 - v106) >> 2;
      if (v107 >> 61)
        goto LABEL_284;
      v108 = (char *)operator new(8 * v107);
      v109 = &v108[8 * v100];
      v110 = &v108[8 * v107];
      v111 = operator new(0xFF0uLL);
      v112 = v111;
      if (v100 == v107)
      {
        v10 = v248;
        if (v99 < 1)
        {
          v135 = v99 >> 2;
          if (v98 == v97)
            v135 = 1;
          if (v135 >> 61)
            goto LABEL_284;
          v136 = 8 * v135;
          v109 = (char *)operator new(8 * v135);
          operator delete(v108);
          v110 = &v109[v136];
          v137 = *(char **)(a1 + 112);
          v98 = *(char **)(a1 + 120);
          v108 = v109;
          *(_QWORD *)v109 = v112;
          v114 = v109 + 8;
          if (v98 != v137)
            goto LABEL_151;
        }
        else
        {
          v113 = v100 + 2;
          if (v100 >= -1)
            v113 = v100 + 1;
          v109 -= 8 * (v113 >> 1);
          *(_QWORD *)v109 = v111;
          v114 = v109 + 8;
          if (v98 != v97)
          {
            do
            {
LABEL_151:
              if (v109 == v108)
              {
                if (v114 >= v110)
                {
                  v147 = (v110 - v109) >> 2;
                  if (v110 == v109)
                    v147 = 1;
                  if (v147 >> 61)
                    goto LABEL_284;
                  v148 = (v147 + 3) >> 2;
                  v149 = 8 * v147;
                  v150 = (char *)operator new(8 * v147);
                  v108 = v150;
                  v142 = &v150[8 * v148];
                  v143 = v142;
                  v151 = v114 - v109;
                  if (v114 != v109)
                  {
                    v143 = &v142[v151 & 0xFFFFFFFFFFFFFFF8];
                    v152 = v151 - 8;
                    v153 = &v150[8 * v148];
                    v154 = v109;
                    if (v152 < 0x38)
                      goto LABEL_288;
                    v153 = &v150[8 * v148];
                    v154 = v109;
                    if ((unint64_t)(v153 - v109) < 0x20)
                      goto LABEL_288;
                    v155 = (v152 >> 3) + 1;
                    v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
                    v153 = &v142[v156];
                    v154 = &v109[v156];
                    v157 = (__int128 *)(v109 + 16);
                    v158 = &v150[8 * v148 + 16];
                    v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v160 = *v157;
                      *((_OWORD *)v158 - 1) = *(v157 - 1);
                      *(_OWORD *)v158 = v160;
                      v157 += 2;
                      v158 += 32;
                      v159 -= 4;
                    }
                    while (v159);
                    if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_288:
                      do
                      {
                        v161 = *(_QWORD *)v154;
                        v154 += 8;
                        *(_QWORD *)v153 = v161;
                        v153 += 8;
                      }
                      while (v153 != v143);
                    }
                  }
                  v110 = &v150[v149];
                  operator delete(v109);
                }
                else
                {
                  v145 = (v110 - v114) >> 3;
                  if (v145 >= -1)
                    v146 = v145 + 1;
                  else
                    v146 = v145 + 2;
                  v143 = &v114[8 * (v146 >> 1)];
                  v142 = &v109[8 * (v146 >> 1)];
                  if (v114 == v109)
                  {
                    v108 = v114;
                  }
                  else
                  {
                    memmove(&v109[8 * (v146 >> 1)], v109, v114 - v109);
                    v108 = v109;
                  }
                }
              }
              else
              {
                v142 = v109;
                v143 = v114;
              }
              v144 = *((_QWORD *)v98 - 1);
              v98 -= 8;
              *((_QWORD *)v142 - 1) = v144;
              v109 = v142 - 8;
              v114 = v143;
            }
            while (v98 != *(char **)(a1 + 112));
          }
        }
      }
      else
      {
        v10 = v248;
        *(_QWORD *)v109 = v111;
        v114 = v109 + 8;
        if (v98 != v97)
          goto LABEL_151;
      }
      v138 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v108;
      *(_QWORD *)(a1 + 112) = v109;
      *(_QWORD *)(a1 + 120) = v114;
      *(_QWORD *)(a1 + 128) = v110;
      if (v138)
        operator delete(v138);
      goto LABEL_144;
    }
    if (v105 != v98)
    {
      v251 = operator new(0xFF0uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back(v247, &v251);
      goto LABEL_144;
    }
    v251 = operator new(0xFF0uLL);
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)v247, &v251);
    v122 = *(_QWORD **)(a1 + 112);
    v123 = *(char **)(a1 + 120);
    v125 = (char *)(v122 + 1);
    v124 = *v122;
    *(_QWORD *)(a1 + 112) = v122 + 1;
    if (v123 != *(char **)(a1 + 128))
      goto LABEL_130;
    v162 = *v247;
    if (v125 > *v247)
    {
      v163 = (v125 - *v247) >> 3;
      if (v163 >= -1)
        v164 = v163 + 1;
      else
        v164 = v163 + 2;
      v165 = v164 >> 1;
      v166 = &v125[-8 * (v164 >> 1)];
      v167 = v123 - v125;
      if (v123 != v125)
      {
        memmove(&v125[-8 * (v164 >> 1)], v125, v123 - v125);
        v125 = *(char **)(a1 + 112);
      }
      v123 = &v166[v167];
      *(_QWORD *)(a1 + 112) = &v125[-8 * v165];
      *(_QWORD *)(a1 + 120) = &v166[v167];
LABEL_131:
      *(_QWORD *)v123 = v124;
      *(_QWORD *)(a1 + 120) += 8;
      goto LABEL_144;
    }
    v175 = (v123 - v162) >> 2;
    if (v123 == v162)
      v175 = 1;
    if (v175 >> 61)
      goto LABEL_284;
    v176 = v175 >> 2;
    v177 = 8 * v175;
    v178 = (char *)operator new(8 * v175);
    v179 = &v178[8 * v176];
    v180 = v123 - v125;
    v131 = v123 == v125;
    v123 = v179;
    if (!v131)
    {
      v123 = &v179[v180 & 0xFFFFFFFFFFFFFFF8];
      v181 = v180 - 8;
      if ((unint64_t)(v180 - 8) < 0x38)
      {
        v182 = &v178[8 * v176];
        do
        {
LABEL_194:
          v189 = *(_QWORD *)v125;
          v125 += 8;
          *(_QWORD *)v182 = v189;
          v182 += 8;
        }
        while (v182 != v123);
        goto LABEL_195;
      }
      v182 = &v178[8 * v176];
      if ((unint64_t)(v182 - v125) < 0x20)
        goto LABEL_194;
      v183 = (v181 >> 3) + 1;
      v184 = 8 * (v183 & 0x3FFFFFFFFFFFFFFCLL);
      v182 = &v179[v184];
      v125 += v184;
      v185 = (__int128 *)(v122 + 3);
      v186 = &v178[8 * v176 + 16];
      v187 = v183 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v188 = *v185;
        *((_OWORD *)v186 - 1) = *(v185 - 1);
        *(_OWORD *)v186 = v188;
        v185 += 2;
        v186 += 32;
        v187 -= 4;
      }
      while (v187);
      if (v183 != (v183 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_194;
    }
LABEL_195:
    *(_QWORD *)(a1 + 104) = v178;
    *(_QWORD *)(a1 + 112) = v179;
    *(_QWORD *)(a1 + 120) = v123;
    *(_QWORD *)(a1 + 128) = &v178[v177];
    if (v162)
    {
      operator delete(v162);
      v123 = *(char **)(a1 + 120);
    }
LABEL_130:
    if (!v123)
      goto LABEL_283;
    goto LABEL_131;
  }
LABEL_29:
  v30 = *v245;
  if (*(_DWORD *)(a1 + 8) != 2)
    goto LABEL_57;
  if (*(_BYTE *)(a1 + 392))
  {
    if ((unint64_t)(*((_QWORD *)v30 + 3) + 100) <= *(_QWORD *)(a1 + 208))
    {
      v194 = *((unsigned __int16 *)v30 + 2);
      v195 = *(_WORD *)(a1 + 188) + 0x2000;
      v196 = v194 - v195;
      if (v196 == 0x8000)
      {
        if (v194 <= v195)
          goto LABEL_57;
      }
      else if (v194 == v195 || (v196 & 0x8000) != 0)
      {
        goto LABEL_57;
      }
    }
    v31 = *(unsigned int **)(a1 + 360);
    if (v31)
    {
      v32 = v31 + 2;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
        (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
    }
    v35 = *(_QWORD *)(a1 + 272);
    if (v35)
    {
      v36 = (unsigned int *)(v35 + 24);
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = *(_QWORD *)(v35 + 16);
        *(_QWORD *)(v35 + 16) = 0;
        if (v39)
          MEMORY[0x20BD0ADD4](v39, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v35, 0x1010C40EE34DA14);
      }
    }
    v40 = *(void **)(a1 + 240);
    if (v40)
    {
      *(_QWORD *)(a1 + 248) = v40;
      operator delete(v40);
    }
    *(_BYTE *)(a1 + 392) = 0;
  }
  v41 = *v30;
  v42 = v30[1];
  v43 = v30[2];
  *(_QWORD *)(a1 + 230) = *(_QWORD *)((char *)v30 + 46);
  *(_OWORD *)(a1 + 200) = v42;
  *(_OWORD *)(a1 + 216) = v43;
  *(_OWORD *)(a1 + 184) = v41;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  v45 = (_BYTE *)*((_QWORD *)v30 + 7);
  v44 = (_BYTE *)*((_QWORD *)v30 + 8);
  v46 = v44 - v45;
  if (v44 != v45)
  {
    if (v46 < 0)
      abort();
    v47 = (char *)operator new(v44 - v45);
    *(_QWORD *)(a1 + 240) = v47;
    *(_QWORD *)(a1 + 248) = v47;
    v48 = &v47[4 * (v46 >> 2)];
    *(_QWORD *)(a1 + 256) = v48;
    memcpy(v47, v45, v46);
    *(_QWORD *)(a1 + 248) = v48;
  }
  *(_QWORD *)(a1 + 264) = *((_QWORD *)v30 + 10);
  v49 = *((_QWORD *)v30 + 11);
  *(_QWORD *)(a1 + 272) = v49;
  if (v49)
  {
    v50 = (unsigned int *)(v49 + 24);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  *(_OWORD *)(a1 + 280) = v30[6];
  v52 = v30[7];
  v53 = v30[8];
  v54 = v30[9];
  *(_OWORD *)(a1 + 341) = *(__int128 *)((char *)v30 + 157);
  *(_OWORD *)(a1 + 312) = v53;
  *(_OWORD *)(a1 + 328) = v54;
  *(_OWORD *)(a1 + 296) = v52;
  v55 = *((_QWORD *)v30 + 22);
  *(_QWORD *)(a1 + 360) = v55;
  if (v55)
  {
    v56 = (unsigned int *)(v55 + 8);
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v58 = *(__int128 *)((char *)v30 + 184);
  *(_BYTE *)(a1 + 384) = *((_BYTE *)v30 + 200);
  *(_OWORD *)(a1 + 368) = v58;
  *(_BYTE *)(a1 + 392) = 1;
  v30 = *v245;
LABEL_57:
  *v245 = 0;
  v59 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v59 + 1;
  v60 = v10;
  v61 = *(_QWORD *)(a1 + 136) + v10;
  v62 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (v61 / 0x66));
  v63 = v61 % 0x66;
  v64 = 40 * (v61 % 0x66);
  v65 = *(_QWORD **)(v62 + v64);
  *(_QWORD *)(v62 + v64) = v30;
  if (v65)
  {
    v66 = (unsigned int *)v65[22];
    if (v66)
    {
      v67 = v66 + 2;
      do
      {
        v68 = __ldaxr(v67);
        v69 = v68 - 1;
      }
      while (__stlxr(v69, v67));
      if (!v69)
        (*(void (**)(unsigned int *))(*(_QWORD *)v66 + 8))(v66);
    }
    v70 = v65[11];
    if (v70)
    {
      v71 = (unsigned int *)(v70 + 24);
      do
      {
        v72 = __ldaxr(v71);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v71));
      if (!v73)
      {
        v74 = *(_QWORD *)(v70 + 16);
        *(_QWORD *)(v70 + 16) = 0;
        if (v74)
          MEMORY[0x20BD0ADD4](v74, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v70, 0x1010C40EE34DA14);
      }
    }
    v75 = (void *)v65[7];
    if (v75)
    {
      v65[8] = v75;
      operator delete(v75);
    }
    MEMORY[0x20BD0ADEC](v65, 0x1020C4000E59722);
  }
  v76 = v62 + 40 * v63;
  *(_BYTE *)(v76 + 8) = 0;
  *(_QWORD *)(v76 + 16) = v244;
  *(_QWORD *)(v76 + 24) = v59;
  *(_QWORD *)(v76 + 32) = 0;
  if (*(_DWORD *)(a1 + 8) != 1)
    return pthread_mutex_unlock(v246);
  v77 = *(_QWORD *)(a1 + 176);
  if (v77 >= 0x3E)
  {
    v79 = (uint64_t *)(a1 + 168);
    v78 = *(uint64_t **)(a1 + 168);
    if (v78)
    {
      v80 = *(uint64_t **)(a1 + 168);
      do
      {
        v79 = v80;
        v80 = (uint64_t *)v80[1];
      }
      while (v80);
    }
    else
    {
      do
      {
        v83 = v79;
        v79 = (uint64_t *)v79[2];
      }
      while ((uint64_t *)*v79 == v83);
      v84 = (uint64_t *)v79[1];
      if (v84)
      {
        do
        {
          v81 = v84;
          v84 = (uint64_t *)*v84;
        }
        while (v84);
        goto LABEL_84;
      }
    }
    v81 = v79;
    do
    {
      v82 = v81;
      v81 = (uint64_t *)v81[2];
    }
    while ((uint64_t *)*v81 != v82);
LABEL_84:
    if (*(uint64_t **)(a1 + 160) == v79)
      *(_QWORD *)(a1 + 160) = v81;
    *(_QWORD *)(a1 + 176) = v77 - 1;
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v78, v79);
    operator delete(v79);
  }
  v86 = (uint64_t **)(a1 + 168);
  v85 = *(uint64_t **)(a1 + 168);
  v87 = *(_QWORD *)(a1 + 136) + v60;
  v88 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * (v87 / 0x66));
  v89 = v87 % 0x66;
  if (v85)
  {
    v90 = v88 + 40 * v89;
    v91 = *(_QWORD *)(v90 + 32);
    v92 = (unint64_t *)(v90 + 24);
    while (1)
    {
      while (1)
      {
        v93 = (uint64_t **)v85;
        v94 = v85[4];
        v95 = *(_QWORD *)(v94 + 32);
        if (v91 == v95)
          break;
        if (v91 >= v95)
        {
          if (v95 >= v91)
            return pthread_mutex_unlock(v246);
          goto LABEL_96;
        }
LABEL_89:
        v85 = *v93;
        v86 = v93;
        if (!*v93)
          goto LABEL_202;
      }
      v96 = *(_QWORD *)(v94 + 24);
      if (*v92 > v96)
        goto LABEL_89;
      if (v96 <= *v92)
        return pthread_mutex_unlock(v246);
LABEL_96:
      v85 = v93[1];
      if (!v85)
      {
        v86 = v93 + 1;
        goto LABEL_202;
      }
    }
  }
  v93 = (uint64_t **)(a1 + 168);
LABEL_202:
  v190 = v88 + 40 * v89;
  v191 = (uint64_t *)operator new(0x28uLL);
  v191[4] = v190;
  *v191 = 0;
  v191[1] = 0;
  v191[2] = (uint64_t)v93;
  *v86 = v191;
  v192 = **(_QWORD **)(a1 + 160);
  if (v192)
  {
    *(_QWORD *)(a1 + 160) = v192;
    v193 = *v86;
  }
  else
  {
    v193 = v191;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v193);
  ++*(_QWORD *)(a1 + 176);
  return pthread_mutex_unlock(v246);
}

void webrtc::RtpPacketHistory::RemovePacket(webrtc::RtpPacketHistory *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v5 = *((_QWORD *)this + 17) + a2;
  v6 = v5 / 0x66;
  v7 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v5 / 0x66));
  v8 = v5 % 0x66;
  v9 = *(_QWORD *)(v7 + 40 * v8);
  *(_QWORD *)(v7 + 40 * v8) = 0;
  *a3 = v9;
  if (*((_DWORD *)this + 2) == 1)
    std::__tree<webrtc::RtpPacketHistory::StoredPacket *,webrtc::RtpPacketHistory::MoreUseful,std::allocator<webrtc::RtpPacketHistory::StoredPacket *>>::__erase_unique<webrtc::RtpPacketHistory::StoredPacket *>((uint64_t **)this + 20, *(_QWORD *)(*((_QWORD *)this + 14) + 8 * v6) + 40 * v8);
  if (!a2)
  {
    v10 = *((_QWORD *)this + 18);
    if (v10)
    {
      v11 = *((_QWORD *)this + 17);
      do
      {
        v12 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66));
        if (*v12)
          break;
        *v12 = 0;
        --v10;
        *((_QWORD *)this + 17) = ++v11;
        *((_QWORD *)this + 18) = v10;
        if (v11 >= 0xCC)
        {
          operator delete(**((void ***)this + 14));
          *((_QWORD *)this + 14) += 8;
          v10 = *((_QWORD *)this + 18);
          v11 = *((_QWORD *)this + 17) - 102;
          *((_QWORD *)this + 17) = v11;
        }
      }
      while (v10);
    }
  }
}

uint64_t webrtc::RtpPacketHistory::GetPacketAndMarkAsPending@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, void (*a4)(uint64_t, _QWORD)@<X3>, _QWORD *a5@<X8>)
{
  pthread_mutex_t *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;

  v10 = (pthread_mutex_t *)(a1 + 2);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
  if (!*((_DWORD *)a1 + 22))
    goto LABEL_27;
  v11 = a1[18];
  if (!v11
    || (v12 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1[14] + 8 * (a1[17] / 0x66uLL)) + 40 * (a1[17] % 0x66uLL))
                                  + 4),
        v12 == a2))
  {
    v13 = 0;
    goto LABEL_5;
  }
  v13 = a2 - v12;
  if (a2 - v12 == 0x8000)
  {
    if (v12 < a2)
    {
      v13 = 0x8000;
      goto LABEL_5;
    }
LABEL_25:
    if (v12 < a2)
    {
LABEL_27:
      *a5 = 0;
      return pthread_mutex_unlock(v10);
    }
    goto LABEL_26;
  }
  if ((v13 & 0x8000) != 0)
    goto LABEL_25;
  if (v12 > a2)
  {
    v13 += 0x10000;
    goto LABEL_5;
  }
LABEL_26:
  if ((v13 & 0x80000000) != 0)
    goto LABEL_27;
LABEL_5:
  if (v11 <= v13)
    goto LABEL_27;
  v14 = a1[17] + v13;
  v15 = *(_QWORD *)(a1[14] + 8 * (v14 / 0x66));
  v16 = v14 % 0x66;
  v17 = (_QWORD *)(v15 + 40 * (v14 % 0x66));
  if (!*v17)
    goto LABEL_27;
  v18 = v15 + 40 * v16;
  v20 = *(unsigned __int8 *)(v18 + 8);
  v19 = (_BYTE *)(v18 + 8);
  if (v20)
    goto LABEL_27;
  if (*(_QWORD *)(v15 + 40 * v16 + 32))
  {
    v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    if (v21 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v22 = *(_QWORD *)(v15 + 40 * v16 + 16);
      v23 = 0x8000000000000000;
      if (v22 != 0x8000000000000000)
      {
        if (v22 != 0x7FFFFFFFFFFFFFFFLL && v21 != 0x8000000000000000)
          v23 = v21 - v22;
        if (v23 < a1[12])
          goto LABEL_27;
      }
    }
  }
  a4(a3, *v17);
  if (*a5)
    *v19 = 1;
  return pthread_mutex_unlock(v10);
}

uint64_t webrtc::RtpPacketHistory::MarkPacketAsSent(webrtc::RtpPacketHistory *this, unsigned int a2)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t **v14;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  if (!*((_DWORD *)this + 22))
    return pthread_mutex_unlock(v4);
  v5 = *((_QWORD *)this + 18);
  if (v5)
  {
    v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 14) + 8 * (*((_QWORD *)this + 17) / 0x66uLL))
                                         + 40 * (*((_QWORD *)this + 17) % 0x66uLL))
                             + 4);
    if (v6 != a2)
    {
      v7 = a2 - v6;
      if (a2 - v6 == 0x8000)
      {
        if (v6 < a2)
        {
          v7 = 0x8000;
          goto LABEL_5;
        }
      }
      else if ((v7 & 0x8000) == 0)
      {
        if (v6 > a2)
        {
          v7 += 0x10000;
          goto LABEL_5;
        }
LABEL_19:
        if ((v7 & 0x80000000) != 0)
          return pthread_mutex_unlock(v4);
        goto LABEL_5;
      }
      if (v6 < a2)
        return pthread_mutex_unlock(v4);
      goto LABEL_19;
    }
  }
  v7 = 0;
LABEL_5:
  if (v5 > v7)
  {
    v8 = *((_QWORD *)this + 17) + v7;
    v9 = *(_QWORD *)(*((_QWORD *)this + 14) + 8 * (v8 / 0x66));
    v10 = v8 % 0x66;
    v11 = (uint64_t *)(v9 + 40 * (v8 % 0x66));
    if (*v11)
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
      v13 = v9 + 40 * v10;
      *(_QWORD *)(v13 + 16) = v12;
      *(_BYTE *)(v13 + 8) = 0;
      if (*((_DWORD *)this + 2) == 1)
        v14 = (uint64_t **)((char *)this + 160);
      else
        v14 = 0;
      webrtc::RtpPacketHistory::StoredPacket::IncrementTimesRetransmitted(v11, v14);
    }
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RtpPacketHistory::GetPayloadPaddingPacket@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t)@<X2>, _QWORD *a4@<X8>)
{
  pthread_mutex_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;

  v8 = (pthread_mutex_t *)(a1 + 2);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
  if (!*((_DWORD *)a1 + 22))
    goto LABEL_20;
  v9 = *((_DWORD *)a1 + 2);
  if (v9 == 1)
  {
    if (a1[22])
    {
      v21 = *(uint64_t **)(a1[20] + 32);
      if (v21)
      {
        if (!*((_BYTE *)v21 + 8))
          goto LABEL_25;
      }
    }
LABEL_20:
    *a4 = 0;
    return pthread_mutex_unlock(v8);
  }
  if (v9 == 2 && *((_BYTE *)a1 + 392))
  {
    ((void (*)(uint64_t, _QWORD *))a3)(a2, a1 + 23);
    return pthread_mutex_unlock(v8);
  }
  v10 = a1[18];
  if (!v10)
    goto LABEL_20;
  v11 = a1[14];
  if (a1[15] == v11)
    goto LABEL_20;
  v12 = a1[17];
  v13 = v12 + v10;
  v14 = (uint64_t *)(v11 + 8 * ((v12 + v10) / 0x66));
  v15 = *v14;
  v16 = *v14 + 40 * (v13 % 0x66);
  v17 = *(_QWORD *)(v11 + 8 * (v12 / 0x66)) + 40 * (v12 % 0x66);
  if (v16 == v17)
    goto LABEL_20;
  while (1)
  {
    v18 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v15) >> 3);
    v19 = (_QWORD *)(v16 - v15 < 41
                   ? v14[-((102 - v18) / 0x66)] + 40 * (102 * ((102 - v18) / 0x66) - (102 - v18)) + 4040
                   : v14[(v18 - 1) / 0x66] + 40 * ((v18 - 1) % 0x66));
    if (*v19)
      break;
    if (v16 == v15)
    {
      v20 = *--v14;
      v15 = v20;
      v16 = v20 + 4080;
    }
    v16 -= 40;
    if (v16 == v17)
      goto LABEL_20;
  }
  if (v16 == v15)
    v16 = *(v14 - 1) + 4080;
  v21 = (uint64_t *)(v16 - 40);
  if (*(_BYTE *)(v16 - 32))
    goto LABEL_20;
LABEL_25:
  a3(&v25, a2, *v21);
  v23 = v25;
  if (v25)
  {
    v21[2] = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    if (*((_DWORD *)a1 + 2) == 1)
      v24 = (uint64_t **)(a1 + 20);
    else
      v24 = 0;
    webrtc::RtpPacketHistory::StoredPacket::IncrementTimesRetransmitted(v21, v24);
    v23 = v25;
  }
  *a4 = v23;
  return pthread_mutex_unlock(v8);
}

uint64_t webrtc::RtpPacketHistory::CullAcknowledgedPackets(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  _QWORD *v24;

  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  if (a3)
  {
    v7 = &a2[a3];
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 144);
      if (!v8
        || (v9 = *a2,
            v10 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112)
                                                              + 8 * (*(_QWORD *)(a1 + 136) / 0x66uLL))
                                                  + 40 * (*(_QWORD *)(a1 + 136) % 0x66uLL))
                                      + 4),
            v10 == v9))
      {
        v11 = 0;
LABEL_8:
        if (v8 > v11)
        {
          webrtc::RtpPacketHistory::RemovePacket((webrtc::RtpPacketHistory *)a1, v11, &v24);
          v12 = v24;
          v24 = 0;
          if (v12)
          {
            v13 = (unsigned int *)v12[22];
            if (v13)
            {
              v14 = v13 + 2;
              do
              {
                v15 = __ldaxr(v14);
                v16 = v15 - 1;
              }
              while (__stlxr(v16, v14));
              if (!v16)
                (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
            }
            v17 = v12[11];
            if (v17)
            {
              v18 = (unsigned int *)(v17 + 24);
              do
              {
                v19 = __ldaxr(v18);
                v20 = v19 - 1;
              }
              while (__stlxr(v20, v18));
              if (!v20)
              {
                v21 = *(_QWORD *)(v17 + 16);
                *(_QWORD *)(v17 + 16) = 0;
                if (v21)
                  MEMORY[0x20BD0ADD4](v21, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v17, 0x1010C40EE34DA14);
              }
            }
            v22 = (void *)v12[7];
            if (v22)
            {
              v12[8] = v22;
              operator delete(v22);
            }
            MEMORY[0x20BD0ADEC](v12, 0x1020C4000E59722);
          }
        }
        goto LABEL_4;
      }
      v11 = v9 - v10;
      if (v9 - v10 == 0x8000)
        break;
      if ((v11 & 0x8000) != 0)
        goto LABEL_30;
      if (v10 > v9)
      {
        v11 += 0x10000;
        goto LABEL_8;
      }
LABEL_31:
      if ((v11 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_4:
      if (++a2 == v7)
        return pthread_mutex_unlock(v6);
    }
    if (v10 < v9)
    {
      v11 = 0x8000;
      goto LABEL_8;
    }
LABEL_30:
    if (v10 < v9)
      goto LABEL_4;
    goto LABEL_31;
  }
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::RtpPacketHistory::Clear(webrtc::RtpPacketHistory *this)
{
  pthread_mutex_t *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  std::deque<webrtc::RtpPacketHistory::StoredPacket>::clear((_QWORD *)this + 13);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  *((_QWORD *)this + 20) = (char *)this + 168;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  if (*((_BYTE *)this + 392))
  {
    v3 = (unsigned int *)*((_QWORD *)this + 45);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
    v7 = *((_QWORD *)this + 34);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)(v7 + 16) = 0;
        if (v11)
          MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v7, 0x1010C40EE34DA14);
      }
    }
    v12 = (void *)*((_QWORD *)this + 30);
    if (v12)
    {
      *((_QWORD *)this + 31) = v12;
      operator delete(v12);
    }
    *((_BYTE *)this + 392) = 0;
  }
  return pthread_mutex_unlock(v2);
}

void std::deque<webrtc::RtpPacketHistory::StoredPacket>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v20 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x66];
    v6 = (char *)*v5 + 40 * (v4 % 0x66);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x66] + 40 * ((a1[5] + v4) % 0x66);
    if (v6 != (char *)v7)
    {
      while (v6)
      {
        v8 = *(_QWORD **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          v9 = (unsigned int *)v8[22];
          if (v9)
          {
            v10 = v9 + 2;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
          }
          v13 = v8[11];
          if (v13)
          {
            v14 = (unsigned int *)(v13 + 24);
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
            {
              v17 = *(_QWORD *)(v13 + 16);
              *(_QWORD *)(v13 + 16) = 0;
              if (v17)
                MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v13, 0x1010C40EE34DA14);
            }
          }
          v18 = (void *)v8[7];
          if (v18)
          {
            v8[8] = v18;
            operator delete(v18);
          }
          MEMORY[0x20BD0ADEC](v8, 0x1020C4000E59722);
        }
        v6 += 40;
        if (v6 - (_BYTE *)*v5 == 4080)
        {
          v19 = (char *)v5[1];
          ++v5;
          v6 = v19;
        }
        if (v6 == (char *)v7)
        {
          v2 = (void **)a1[1];
          v3 = (void **)a1[2];
          goto LABEL_25;
        }
      }
      __break(1u);
      return;
    }
LABEL_25:
    a1[5] = 0;
    v20 = (char *)v3 - (char *)v2;
    if (v20 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v21 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v20 = v21 - (_QWORD)v2;
      }
      while (v20 > 0x10);
    }
  }
  if (v20 >> 3 == 1)
  {
    v22 = 51;
  }
  else
  {
    if (v20 >> 3 != 2)
      return;
    v22 = 102;
  }
  a1[4] = v22;
}

uint64_t *std::__tree<webrtc::RtpPacketHistory::StoredPacket *,webrtc::RtpPacketHistory::MoreUseful,std::allocator<webrtc::RtpPacketHistory::StoredPacket *>>::__erase_unique<webrtc::RtpPacketHistory::StoredPacket *>(uint64_t **a1, uint64_t a2)
{
  uint64_t *result;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)(a1 + 1);
  result = a1[1];
  if (!result)
    return result;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v4;
  v7 = result;
  do
  {
    while (1)
    {
      v11 = v7[4];
      v12 = *(_QWORD *)(v11 + 32);
      if (v12 == v5)
        break;
      if (v12 >= v5)
        v13 = (uint64_t **)v7;
      else
        v13 = (uint64_t **)(v7 + 1);
      if (v12 >= v5)
        v6 = v7;
      v7 = *v13;
      if (!*v13)
        goto LABEL_17;
    }
    v8 = *(_QWORD *)(v11 + 24) > *(_QWORD *)(a2 + 24);
    v9 = !v8;
    if (v8)
      v10 = (uint64_t **)(v7 + 1);
    else
      v10 = (uint64_t **)v7;
    if (v9)
      v6 = v7;
    v7 = *v10;
  }
  while (*v10);
LABEL_17:
  if (v6 == v4)
    return 0;
  v14 = v6[4];
  v15 = *(_QWORD *)(v14 + 32);
  if (v5 == v15)
  {
    if (*(_QWORD *)(a2 + 24) > *(_QWORD *)(v14 + 24))
      return 0;
    goto LABEL_24;
  }
  if (v5 < v15)
    return 0;
LABEL_24:
  v16 = (uint64_t *)v6[1];
  if (v16)
  {
    do
    {
      v17 = v16;
      v16 = (uint64_t *)*v16;
    }
    while (v16);
  }
  else
  {
    v18 = v6;
    do
    {
      v17 = (uint64_t *)v18[2];
      v9 = *v17 == (_QWORD)v18;
      v18 = v17;
    }
    while (!v9);
  }
  if (*a1 == v6)
    *a1 = v17;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(result, v6);
  operator delete(v6);
  return (uint64_t *)1;
}

uint64_t webrtc::RtpPacketReceived::RtpPacketReceived(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 46) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 7);
  v7 = (_BYTE *)*((_QWORD *)a2 + 8);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      abort();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 56) = v10;
    *(_QWORD *)(a1 + 64) = v10;
    v11 = &v10[4 * (v9 >> 2)];
    *(_QWORD *)(a1 + 72) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 64) = v11;
  }
  v12 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 88) = v12;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 24);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  v15 = a2[7];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_OWORD *)(a1 + 112) = v15;
  v16 = *((_QWORD *)a2 + 17);
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  return a1;
}

uint64_t webrtc::RtpPacketReceived::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 46) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  v8 = (_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 56);
  v9 = (_QWORD *)a2 + 7;
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
  }
  *(_OWORD *)(a1 + 56) = *(__int128 *)((char *)a2 + 56);
  v10 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  v9[1] = 0;
  v9[2] = 0;
  *v9 = 0;
  v11 = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = 0;
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v10;
  *(_QWORD *)(a1 + 88) = v11;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 24);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      v16 = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      if (v16)
        MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
    }
  }
  *(_OWORD *)(a1 + 96) = a2[6];
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v17 = a2[7];
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  *(_OWORD *)(a1 + 112) = v17;
  v18 = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = 0;
  v19 = *(unsigned int **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v18;
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  }
  return a1;
}

__n128 webrtc::RtpPacketReceived::GetHeader(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char v3;
  __n128 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 v25;
  unint64_t v26;
  char v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  unsigned int v53;
  char v54;
  int v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  int v59;
  char *v60;
  uint64_t v61;
  char v62;
  int v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  uint64_t v75;
  const char *v76;
  size_t v77;
  uint64_t v78;
  const char *v79;
  size_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  uint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  _BOOL4 v89;
  int v90;
  uint64_t v91;
  int v92;
  __int128 v93;
  __int128 v94;
  unsigned __int16 *v96;
  unsigned __int8 v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  _BYTE v105[32];
  __int128 v106;
  __int128 v107;
  char v108;
  unsigned __int8 v109;

  *(_WORD *)a2 = *(_WORD *)a1;
  *(_WORD *)(a2 + 2) = *(_WORD *)(a1 + 4);
  result.n128_u64[0] = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 4) = result.n128_u64[0];
  v8 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v9 + v7;
  v11 = *(_BYTE *)(v9 + v7) & 0xF;
  if ((*(_BYTE *)(v9 + v7) & 0xF) != 0)
  {
    v12 = (char *)operator new(4 * v11);
    bzero(v12, 4 * v11);
    v13 = 0;
    do
    {
      *(_DWORD *)&v12[v13] = bswap32(*(_DWORD *)(v7 + v9 + 12 + v13));
      v13 += 4;
    }
    while (4 * v11 != v13);
    *(_BYTE *)(a2 + 12) = v11;
    if (v11 <= 1)
      v14 = 1;
    else
      v14 = v11;
    memcpy((void *)(a2 + 16), v12, 4 * v14);
    *(_QWORD *)(a2 + 80) = *(unsigned __int8 *)(a1 + 2);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned __int8 *)(a1 + 33);
    if (!*(_BYTE *)(a1 + 33))
      goto LABEL_19;
  }
  else
  {
    v12 = 0;
    *(_BYTE *)(a2 + 12) = 0;
    *(_QWORD *)(a2 + 80) = *(unsigned __int8 *)(a1 + 2);
    *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 16);
    v15 = *(unsigned __int8 *)(a1 + 33);
    if (!*(_BYTE *)(a1 + 33))
      goto LABEL_19;
  }
  v16 = *(unsigned __int8 **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  if (v16 == (unsigned __int8 *)v2)
    goto LABEL_19;
  while (*v16 != v15)
  {
    v16 += 4;
    if (v16 == (unsigned __int8 *)v2)
      goto LABEL_19;
  }
  if (v16[1] != 3)
  {
LABEL_19:
    *(_BYTE *)(a2 + 96) = 0;
    v20 = *(unsigned __int8 *)(a1 + 37);
    if (!*(_BYTE *)(a1 + 37))
      goto LABEL_27;
    goto LABEL_20;
  }
  v17 = (unsigned __int8 *)(v10 + *((unsigned __int16 *)v16 + 1));
  v18 = *v17;
  v2 = (char)v18;
  v19 = v17[2] | (v18 << 16) | (v17[1] << 8);
  if ((v2 & 0x80000000) != 0)
    v19 |= 0xFF000000;
  *(_DWORD *)(a2 + 100) = v19;
  *(_BYTE *)(a2 + 96) = 1;
  v20 = *(unsigned __int8 *)(a1 + 37);
  if (!*(_BYTE *)(a1 + 37))
    goto LABEL_27;
LABEL_20:
  v21 = *(unsigned __int8 **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  if (v21 == (unsigned __int8 *)v2)
    goto LABEL_27;
  while (*v21 != v20)
  {
    v21 += 4;
    if (v21 == (unsigned __int8 *)v2)
      goto LABEL_27;
  }
  if (v21[1] != 3)
  {
LABEL_27:
    *(_BYTE *)(a2 + 104) = 0;
    v23 = *(unsigned __int8 *)(a1 + 38);
    if (!*(_BYTE *)(a1 + 38))
      goto LABEL_31;
    goto LABEL_28;
  }
  v22 = (unsigned __int8 *)(v10 + *((unsigned __int16 *)v21 + 1));
  v2 = v22[1];
  *(_DWORD *)(a2 + 108) = (*v22 << 16) | ((_DWORD)v2 << 8) | v22[2];
  *(_BYTE *)(a2 + 104) = 1;
  v23 = *(unsigned __int8 *)(a1 + 38);
  if (!*(_BYTE *)(a1 + 38))
    goto LABEL_31;
LABEL_28:
  v24 = *(unsigned __int8 **)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 64);
  if (v24 != (unsigned __int8 *)v2)
  {
    while (*v24 != v23)
    {
      v24 += 4;
      if (v24 == (unsigned __int8 *)v2)
        goto LABEL_31;
    }
    v2 = v24[1];
    if (v24[1])
    {
      v32 = *(_QWORD *)(v8 + 16);
      v33 = *((unsigned __int16 *)v24 + 1);
      *(_DWORD *)v105 = 0;
      *(_DWORD *)&v105[3] = 0;
      if ((_DWORD)v2 == 16 || (_DWORD)v2 == 8)
      {
        v35 = (unsigned __int8 *)(v32 + v7 + v33);
        v25 = _byteswap_uint64(*(_QWORD *)v35);
        v26 = (((unint64_t)*v35 << 56) | ((unint64_t)v35[1] << 48) | ((unint64_t)v35[2] << 40) | ((unint64_t)v35[3] << 32) | ((unint64_t)v35[4] << 24) | ((unint64_t)v35[5] << 16) | ((unint64_t)v35[6] << 8)) >> 8;
        if ((_DWORD)v2 == 8)
        {
          v2 = 0;
          v3 = 0;
        }
        else
        {
          v2 = bswap64(*((_QWORD *)v35 + 1));
          v3 = 1;
        }
        v27 = 1;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v2 = 0;
        v3 = 0;
        v27 = 0;
      }
      goto LABEL_32;
    }
  }
LABEL_31:
  v25 = 0;
  v26 = 0;
  v27 = 0;
LABEL_32:
  *(_QWORD *)(a2 + 112) = v25 | (v26 << 8);
  *(_QWORD *)(a2 + 120) = v2;
  *(_BYTE *)(a2 + 128) = v3;
  *(_DWORD *)(a2 + 129) = *(_DWORD *)v105;
  *(_DWORD *)(a2 + 132) = *(_DWORD *)&v105[3];
  *(_BYTE *)(a2 + 136) = v27;
  if (!*(_BYTE *)(a1 + 41))
    goto LABEL_36;
  v28 = *(unsigned __int8 **)(a1 + 56);
  v29 = *(unsigned __int8 **)(a1 + 64);
  if (v28 == v29)
    goto LABEL_36;
  while (*v28 != *(unsigned __int8 *)(a1 + 41))
  {
    v28 += 4;
    if (v28 == v29)
      goto LABEL_36;
  }
  v36 = *(_QWORD *)(a1 + 88);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 16) + *(_QWORD *)(a1 + 96);
    v38 = v28[1];
    if (!v28[1])
      goto LABEL_36;
  }
  else
  {
    v37 = 0;
    v38 = v28[1];
    if (!v28[1])
      goto LABEL_36;
  }
  if (v38 != 4 && v38 != 2)
  {
LABEL_36:
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_56;
    v30 = *(unsigned __int8 **)(a1 + 56);
    v31 = *(unsigned __int8 **)(a1 + 64);
    if (v30 == v31)
      goto LABEL_56;
    while (*v30 != *(unsigned __int8 *)(a1 + 40))
    {
      v30 += 4;
      if (v30 == v31)
        goto LABEL_56;
    }
    v39 = *(_QWORD *)(a1 + 88);
    if (v39)
      v39 = *(_QWORD *)(v39 + 16) + *(_QWORD *)(a1 + 96);
    if (v30[1] != 2)
    {
LABEL_56:
      v40 = 0;
      goto LABEL_57;
    }
    *(_WORD *)(a2 + 146) = bswap32(*(unsigned __int16 *)(v39 + *((unsigned __int16 *)v30 + 1))) >> 16;
    goto LABEL_177;
  }
  v96 = (unsigned __int16 *)(v37 + *((unsigned __int16 *)v28 + 1));
  *(_WORD *)(a2 + 146) = bswap32(*v96) >> 16;
  if (*(_BYTE *)(a2 + 156))
    *(_BYTE *)(a2 + 156) = 0;
  if (v38 != 4)
  {
LABEL_177:
    v40 = 1;
    goto LABEL_57;
  }
  v97 = *((_BYTE *)v96 + 2);
  v98 = *((unsigned __int8 *)v96 + 3) | ((v97 & 0x7F) << 8);
  v40 = 1;
  if ((_DWORD)v98)
  {
    *(_BYTE *)(a2 + 156) = 1;
    *(_QWORD *)(a2 + 148) = ((unint64_t)v97 >> 7) | (v98 << 32);
  }
LABEL_57:
  *(_BYTE *)(a2 + 144) = v40;
  LODWORD(v41) = *(unsigned __int8 *)(a1 + 34);
  if (*(_BYTE *)(a1 + 34))
  {
    v42 = *(unsigned __int8 **)(a1 + 56);
    v43 = *(unsigned __int8 **)(a1 + 64);
    if (v42 == v43)
      goto LABEL_67;
    while (*v42 != (_DWORD)v41)
    {
      v42 += 4;
      if (v42 == v43)
        goto LABEL_67;
    }
    v41 = *(_QWORD *)(a1 + 88);
    if (v41)
      v41 = *(_QWORD *)(v41 + 16) + *(_QWORD *)(a1 + 96);
    if (v42[1] != 1)
    {
LABEL_67:
      v44 = 0;
      LOBYTE(v41) = 0;
    }
    else
    {
      v45 = *(unsigned __int8 *)(v41 + *((unsigned __int16 *)v42 + 1));
      v44 = (v45 >> 7) | ((v45 & 0x7F) << 32);
      LOBYTE(v41) = 1;
    }
  }
  else
  {
    v44 = 0;
  }
  *(_QWORD *)(a2 + 352) = v44;
  *(_BYTE *)(a2 + 360) = v41;
  if (!*(_BYTE *)(a1 + 39))
    goto LABEL_78;
  v46 = *(unsigned __int8 **)(a1 + 56);
  v47 = *(unsigned __int8 **)(a1 + 64);
  if (v46 == v47)
    goto LABEL_78;
  while (*v46 != *(unsigned __int8 *)(a1 + 39))
  {
    v46 += 4;
    if (v46 == v47)
      goto LABEL_78;
  }
  v48 = *(_QWORD *)(a1 + 88);
  if (v48)
    v48 = *(_QWORD *)(v48 + 16) + *(_QWORD *)(a1 + 96);
  if (v46[1] == 1)
  {
    *(_DWORD *)(a2 + 164) = 90 * (*(_BYTE *)(v48 + *((unsigned __int16 *)v46 + 1)) & 3);
    *(_BYTE *)(a2 + 160) = 1;
    v49 = *(unsigned __int8 *)(a1 + 43);
    if (!*(_BYTE *)(a1 + 43))
      goto LABEL_89;
  }
  else
  {
LABEL_78:
    *(_BYTE *)(a2 + 160) = 0;
    v49 = *(unsigned __int8 *)(a1 + 43);
    if (!*(_BYTE *)(a1 + 43))
      goto LABEL_89;
  }
  v50 = *(unsigned __int8 **)(a1 + 56);
  v51 = *(unsigned __int8 **)(a1 + 64);
  if (v50 != v51)
  {
    while (*v50 != v49)
    {
      v50 += 4;
      if (v50 == v51)
        goto LABEL_89;
    }
    v52 = *(_QWORD *)(a1 + 88);
    if (v52)
      v52 = *(_QWORD *)(v52 + 16) + *(_QWORD *)(a1 + 96);
    if (v50[1])
    {
      if (v50[1] == 1)
      {
        v53 = *(unsigned __int8 *)(v52 + *((unsigned __int16 *)v50 + 1));
        if (v53 <= 0x3F)
        {
          *(_BYTE *)(a2 + 169) = v53 & 1;
          v54 = 1;
          goto LABEL_90;
        }
      }
    }
  }
LABEL_89:
  v54 = 0;
LABEL_90:
  *(_BYTE *)(a2 + 168) = v54;
  v55 = *(unsigned __int8 *)(a1 + 45);
  if (!*(_BYTE *)(a1 + 45))
    goto LABEL_102;
  v56 = *(unsigned __int8 **)(a1 + 56);
  v57 = *(unsigned __int8 **)(a1 + 64);
  if (v56 == v57)
    goto LABEL_101;
  while (*v56 != v55)
  {
    v56 += 4;
    if (v56 == v57)
      goto LABEL_101;
  }
  v58 = *(_QWORD *)(a1 + 88);
  if (v58)
    v58 = *(_QWORD *)(v58 + 16) + *(_QWORD *)(a1 + 96);
  v59 = v56[1];
  if (!v56[1])
  {
LABEL_101:
    LOBYTE(v55) = 0;
    goto LABEL_102;
  }
  v60 = (char *)(v58 + *((unsigned __int16 *)v56 + 1));
  if (v59 != 12)
  {
    LOBYTE(v55) = 0;
    if (v59 == 13)
    {
      v61 = 0;
      v62 = *v60;
      goto LABEL_183;
    }
LABEL_102:
    *(_BYTE *)(a2 + 170) = v55;
    v63 = *(unsigned __int8 *)(a1 + 46);
    if (!*(_BYTE *)(a1 + 46))
      goto LABEL_106;
    goto LABEL_103;
  }
  v62 = 0;
  v61 = -1;
LABEL_183:
  *(_BYTE *)(a2 + 184) = v62;
  v104 = &v60[v61];
  *(_WORD *)(a2 + 172) = bswap32(*(unsigned __int16 *)(v104 + 1)) >> 16;
  *(_WORD *)(a2 + 174) = bswap32(*(unsigned __int16 *)(v104 + 3)) >> 16;
  *(_WORD *)(a2 + 176) = bswap32(*(unsigned __int16 *)(v104 + 5)) >> 16;
  *(_WORD *)(a2 + 178) = bswap32(*(unsigned __int16 *)(v104 + 7)) >> 16;
  *(_WORD *)(a2 + 180) = bswap32(*(unsigned __int16 *)(v104 + 9)) >> 16;
  *(_WORD *)(a2 + 182) = bswap32(*(unsigned __int16 *)(v104 + 11)) >> 16;
  *(_BYTE *)(a2 + 170) = 1;
  v63 = *(unsigned __int8 *)(a1 + 46);
  if (!*(_BYTE *)(a1 + 46))
    goto LABEL_106;
LABEL_103:
  v64 = *(unsigned __int8 **)(a1 + 56);
  v65 = *(unsigned __int8 **)(a1 + 64);
  if (v64 != v65)
  {
    while (*v64 != v63)
    {
      v64 += 4;
      if (v64 == v65)
        goto LABEL_106;
    }
    v72 = *(_QWORD *)(a1 + 88);
    if (v72)
      v72 = *(_QWORD *)(v72 + 16) + *(_QWORD *)(a1 + 96);
    if (v64[1])
    {
      v73 = (const char *)(v72 + *((unsigned __int16 *)v64 + 1));
      if (*v73)
      {
        v74 = strnlen(v73, v64[1]);
        std::string::__assign_external((std::string *)(a2 + 208), v73, v74);
      }
    }
  }
LABEL_106:
  if (*(_BYTE *)(a1 + 47))
  {
    v66 = *(unsigned __int8 **)(a1 + 56);
    v67 = *(unsigned __int8 **)(a1 + 64);
    if (v66 != v67)
    {
      while (*v66 != *(unsigned __int8 *)(a1 + 47))
      {
        v66 += 4;
        if (v66 == v67)
          goto LABEL_110;
      }
      v75 = *(_QWORD *)(a1 + 88);
      if (v75)
        v75 = *(_QWORD *)(v75 + 16) + *(_QWORD *)(a1 + 96);
      if (v66[1])
      {
        v76 = (const char *)(v75 + *((unsigned __int16 *)v66 + 1));
        if (*v76)
        {
          v77 = strnlen(v76, v66[1]);
          std::string::__assign_external((std::string *)(a2 + 232), v76, v77);
        }
      }
    }
  }
LABEL_110:
  if (*(_BYTE *)(a1 + 48))
  {
    v68 = *(unsigned __int8 **)(a1 + 56);
    v69 = *(unsigned __int8 **)(a1 + 64);
    if (v68 != v69)
    {
      while (*v68 != *(unsigned __int8 *)(a1 + 48))
      {
        v68 += 4;
        if (v68 == v69)
          goto LABEL_114;
      }
      v78 = *(_QWORD *)(a1 + 88);
      if (v78)
        v78 = *(_QWORD *)(v78 + 16) + *(_QWORD *)(a1 + 96);
      if (v68[1])
      {
        v79 = (const char *)(v78 + *((unsigned __int16 *)v68 + 1));
        if (*v79)
        {
          v80 = strnlen(v79, v68[1]);
          std::string::__assign_external((std::string *)(a2 + 256), v79, v80);
        }
      }
    }
  }
LABEL_114:
  if (*(_BYTE *)(a1 + 42))
  {
    v70 = *(unsigned __int8 **)(a1 + 56);
    v71 = *(unsigned __int8 **)(a1 + 64);
    if (v70 != v71)
    {
      while (*v70 != *(unsigned __int8 *)(a1 + 42))
      {
        v70 += 4;
        if (v70 == v71)
          goto LABEL_140;
      }
      v81 = *(_QWORD *)(a1 + 88);
      if (v81)
        v81 = *(_QWORD *)(v81 + 16) + *(_QWORD *)(a1 + 96);
      if (v70[1])
        v82 = v70[1] == 3;
      else
        v82 = 0;
      if (v82)
      {
        v99 = (unsigned __int8 *)(v81 + *((unsigned __int16 *)v70 + 1));
        v100 = v99[1];
        v101 = v99[2];
        v102 = ((*v99 << 16) | (v100 << 8)) >> 12;
        v103 = v101 & 0xFFFFF0FF | ((v100 & 0xF) << 8);
        if (v102 <= v103)
        {
          *(_QWORD *)(a2 + 192) = 10000 * v102;
          *(_QWORD *)(a2 + 200) = 10000 * v103;
        }
      }
    }
  }
LABEL_140:
  v105[0] = 0;
  v83 = *(unsigned __int8 *)(a1 + 51);
  if (!*(_BYTE *)(a1 + 51))
  {
LABEL_154:
    v91 = a2 + 280;
    v92 = *(unsigned __int8 *)(a2 + 348);
    if (v92 == v83)
      goto LABEL_155;
    goto LABEL_159;
  }
  v84 = *(unsigned __int8 **)(a1 + 56);
  v85 = *(unsigned __int8 **)(a1 + 64);
  if (v84 != v85)
  {
    while (*v84 != v83)
    {
      v84 += 4;
      if (v84 == v85)
        goto LABEL_158;
    }
    v86 = *(_QWORD *)(a1 + 88);
    if (v86)
      v86 = *(_QWORD *)(v86 + 16) + *(_QWORD *)(a1 + 96);
    v87 = v84[1];
    if (v84[1])
    {
      v88 = (unsigned __int8 *)(v86 + *((unsigned __int16 *)v84 + 1));
      *(_WORD *)v105 = 514;
      v105[2] = 2;
      v108 = 0;
      *(_QWORD *)&v105[4] = 0;
      *(_QWORD *)&v105[9] = 0;
      v109 = 1;
      v89 = webrtc::ColorSpaceExtension::Parse(v88, v87, (uint64_t)v105);
      if (v109)
        v90 = v89;
      else
        v90 = 1;
      if (v90)
        v83 = v109;
      else
        v83 = 0;
      goto LABEL_154;
    }
  }
LABEL_158:
  v91 = a2 + 280;
  v92 = *(unsigned __int8 *)(a2 + 348);
  if (!*(_BYTE *)(a2 + 348))
  {
LABEL_155:
    if (v92)
    {
      v93 = v107;
      *(_OWORD *)(v91 + 32) = v106;
      *(_OWORD *)(v91 + 48) = v93;
      *(_BYTE *)(v91 + 64) = v108;
      result = *(__n128 *)&v105[16];
      *(_OWORD *)v91 = *(_OWORD *)v105;
      *(__n128 *)(v91 + 16) = result;
      if (!v12)
        return result;
      goto LABEL_162;
    }
LABEL_161:
    if (!v12)
      return result;
    goto LABEL_162;
  }
LABEL_159:
  if (v92)
  {
    *(_BYTE *)(a2 + 348) = 0;
    goto LABEL_161;
  }
  v94 = v107;
  *(_OWORD *)(v91 + 32) = v106;
  *(_OWORD *)(v91 + 48) = v94;
  *(_BYTE *)(v91 + 64) = v108;
  result = *(__n128 *)&v105[16];
  *(_OWORD *)v91 = *(_OWORD *)v105;
  *(__n128 *)(v91 + 16) = result;
  *(_BYTE *)(a2 + 348) = 1;
  if (v12)
LABEL_162:
    operator delete(v12);
  return result;
}

uint64_t webrtc::RtpPacketSendInfo::From@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;

  *(_WORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 12) = 0;
  if (*(_BYTE *)(result + 160))
  {
    LOWORD(v3) = *(_WORD *)(result + 152);
LABEL_3:
    *(_WORD *)a3 = v3;
    goto LABEL_4;
  }
  if (*(_BYTE *)(result + 40))
  {
    v9 = *(unsigned __int8 **)(result + 56);
    v10 = *(unsigned __int8 **)(result + 64);
    if (v9 != v10)
    {
      while (*v9 != *(unsigned __int8 *)(result + 40))
      {
        v9 += 4;
        if (v9 == v10)
          goto LABEL_4;
      }
      v11 = *(_QWORD *)(result + 88);
      if (v11)
        v11 = *(_QWORD *)(v11 + 16) + *(_QWORD *)(result + 96);
      if (v9[1] == 2)
      {
        v3 = bswap32(*(unsigned __int16 *)(v11 + *((unsigned __int16 *)v9 + 1))) >> 16;
        goto LABEL_3;
      }
    }
  }
LABEL_4:
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 24) + *(_QWORD *)(result + 16) + *(unsigned __int8 *)(result + 2);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)a2;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(result + 120);
  v6 = *(unsigned __int8 *)(result + 128);
  *(_QWORD *)(a3 + 24) = v4;
  *(_QWORD *)(a3 + 32) = v5;
  *(_BYTE *)(a3 + 40) = v6;
  if (v6)
  {
    if (v5 >= 2)
    {
      if (v5 != 2)
        return result;
      v8 = *(_QWORD *)(result + 144);
      if ((v8 & 0xFF00000000) == 0)
        LODWORD(v8) = 0;
      *(_DWORD *)(a3 + 4) = v8;
      *(_BYTE *)(a3 + 8) = 1;
      v7 = *(_DWORD *)(result + 170);
      if ((v7 & 0xFF0000) == 0)
        LOWORD(v7) = 0;
    }
    else
    {
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(result + 12);
      *(_BYTE *)(a3 + 8) = 1;
      LOWORD(v7) = *(_WORD *)(result + 4);
    }
    *(_WORD *)(a3 + 12) = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t webrtc::RtpPacketToSend::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 v25;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_QWORD *)(a1 + 46) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  if ((__int128 *)a1 != a2)
  {
    std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>((_QWORD *)(a1 + 56), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    v7 = *((_QWORD *)a2 + 11);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    if (v7)
    {
      v8 = (unsigned int *)(v7 + 24);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(_QWORD *)(a1 + 88);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 24);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(v10 + 16) = 0;
        if (v14)
          MEMORY[0x20BD0ADD4](v14, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v10, 0x1010C40EE34DA14);
      }
    }
    *(_QWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 96) = a2[6];
  }
  v15 = a2[7];
  v16 = a2[8];
  v17 = a2[9];
  *(_OWORD *)(a1 + 157) = *(__int128 *)((char *)a2 + 157);
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v17;
  *(_OWORD *)(a1 + 112) = v15;
  v18 = *((_QWORD *)a2 + 22);
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(unsigned int **)(a1 + 176);
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
  }
  *(_QWORD *)(a1 + 176) = v18;
  v25 = *(__int128 *)((char *)a2 + 184);
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_OWORD *)(a1 + 184) = v25;
  return a1;
}

void webrtc::RtpPacketToSend::~RtpPacketToSend(webrtc::RtpPacketToSend *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;

  v2 = (unsigned int *)*((_QWORD *)this + 22);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 24);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      v10 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 16) = 0;
      if (v10)
        MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v6, 0x1010C40EE34DA14);
    }
  }
  v11 = (void *)*((_QWORD *)this + 7);
  if (v11)
  {
    *((_QWORD *)this + 8) = v11;
    operator delete(v11);
  }
}

void webrtc::RtpPacketizerAv1::ParseObus(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  char v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  char **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  int v27;
  __int16 v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;

  if (a2)
    v5 = a1;
  else
    v5 = 0;
  v29[0] = v5;
  v29[1] = a2;
  v30 = 0;
  v31 = a2;
  if (a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if (a2 != v6)
      {
        v7 = *(unsigned __int8 *)(v29[0] + v6++);
        v30 = v6;
      }
      if ((v7 & 4) != 0)
      {
        if (a2 == v6)
          goto LABEL_42;
        v3 = *(_BYTE *)(v29[0] + v6++);
        v30 = v6;
        v11 = 2;
        if ((v7 & 2) == 0)
        {
LABEL_12:
          v12 = a2 - v6;
          if (a2 == v6)
            v13 = 0;
          else
            v13 = v29[0] + v6;
          v30 = a2;
          v14 = (v7 >> 3) & 0xF;
          goto LABEL_24;
        }
      }
      else
      {
        v11 = 1;
        if ((v7 & 2) == 0)
          goto LABEL_12;
      }
      v26 = 0;
      if (!rtc::ByteBufferReader::ReadUVarint((rtc::ByteBufferReader *)v29, &v26)
        || (v12 = v26, v26 > v31 - v30))
      {
LABEL_42:
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        if (v8)
          operator delete(v8);
        return;
      }
      if (v26)
        v13 = v29[0] + v30;
      else
        v13 = 0;
      v30 += v26;
      v14 = (v7 >> 3) & 0xF;
LABEL_24:
      if (((1 << v14) & 0x8104) != 0)
        goto LABEL_7;
      v15 = v11 + v12;
      if (v9 >= v10)
      {
        v17 = a3;
        v18 = (v9 - v8) >> 5;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59)
          goto LABEL_48;
        if ((v10 - v8) >> 4 > v19)
          v19 = (v10 - v8) >> 4;
        if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFE0)
          v19 = 0x7FFFFFFFFFFFFFFLL;
        if (!v19)
        {
LABEL_47:
          __break(1u);
LABEL_48:
          abort();
        }
        if (v19 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v20 = 32 * v19;
        v21 = (char *)operator new(32 * v19);
        v22 = &v21[32 * v18];
        *v22 = v7;
        v22[1] = v3;
        *((_QWORD *)v22 + 1) = v13;
        *((_QWORD *)v22 + 2) = v12;
        *((_DWORD *)v22 + 6) = v15;
        if (v9 == v8)
        {
          v25 = &v21[32 * v18];
          a3 = v17;
          v10 = &v21[v20];
          v9 = v22 + 32;
          if (v8)
            goto LABEL_41;
        }
        else
        {
          v23 = &v21[32 * v18];
          a3 = v17;
          do
          {
            v24 = *((_OWORD *)v9 - 2);
            v25 = v23 - 32;
            *(_OWORD *)(v23 - 20) = *(_OWORD *)(v9 - 20);
            *((_OWORD *)v23 - 2) = v24;
            v9 -= 32;
            v23 -= 32;
          }
          while (v9 != v8);
          v10 = &v21[v20];
          v9 = v22 + 32;
          if (!v8)
            goto LABEL_6;
LABEL_41:
          operator delete(v8);
        }
LABEL_6:
        v8 = v25;
        goto LABEL_7;
      }
      if (!v9)
        goto LABEL_47;
      *v9 = v7;
      v9[1] = v3;
      v16 = v27;
      *((_WORD *)v9 + 3) = v28;
      *(_DWORD *)(v9 + 2) = v16;
      *((_QWORD *)v9 + 1) = v13;
      *((_QWORD *)v9 + 2) = v12;
      *((_DWORD *)v9 + 6) = v15;
      v9 += 32;
LABEL_7:
      v6 = v30;
      a2 = v31;
      if (v31 == v30)
        goto LABEL_45;
    }
  }
  v10 = 0;
  v9 = 0;
  v8 = 0;
LABEL_45:
  *a3 = v8;
  a3[1] = v9;
  a3[2] = v10;
}

void webrtc::RtpPacketizerAv1::PacketizeAboutEqually(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  char *v9;
  __int32 *v10;
  __int32 *v11;
  int64_t v12;
  unint64_t v13;
  int v14;
  __int32 v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  __int32 *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int64x2_t v29;
  int64x2_t v30;
  __int32 *v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int32 *v57;
  __int32 *v58;
  void *v59;

  if (a2)
    v9 = a1;
  else
    v9 = 0;
  webrtc::RtpPacketizerAv1::Packetize(v9, a2, a3, a4, (uint64_t)&v57);
  v10 = v57;
  v11 = v58;
  v12 = (char *)v58 - (char *)v57;
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v58 - v57);
  if (v13 < 2 || v57 == v58)
    goto LABEL_35;
  v14 = ~HIDWORD(a3) + a3;
  v15 = v57[4];
  v16 = __OFSUB__(v14, v15);
  v17 = v14 - v15;
  if (v17 < 0 != v16)
    v17 = 0;
  v18 = v17;
  v19 = v57 + 5;
  if (v57 + 5 != v58)
  {
    if ((unint64_t)(v12 - 40) >= 0xA0)
    {
      v21 = (v12 - 40) / 0x14uLL + 1;
      v22 = v21 & 7;
      if ((v21 & 7) == 0)
        v22 = 8;
      v23 = v21 - v22;
      v20 = v23 + 1;
      v19 += 5 * v23;
      v24 = 0uLL;
      v25 = (int64x2_t)v18;
      v26 = vdupq_n_s64(v13 - 1);
      v27 = (int8x16_t)vdupq_n_s32(~(_DWORD)a4);
      v28 = vdupq_n_s32(a3);
      v29 = (int64x2_t)xmmword_208F0B510;
      v30 = (int64x2_t)xmmword_208F08A50;
      v31 = v57 + 24;
      v32 = vdupq_n_s64(4uLL);
      v33 = 0uLL;
      v34 = 0uLL;
      do
      {
        v35 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v30, v26), (int32x4_t)vceqq_s64(v29, v26));
        v36 = (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(vaddq_s64(v30, v32), v26), (int32x4_t)vceqq_s64(vaddq_s64(v29, v32), v26));
        v37 = vaddq_s32((int32x4_t)vornq_s8(vandq_s8(v27, v35), v35), v28);
        v38 = vaddq_s32((int32x4_t)vornq_s8(vandq_s8(v27, v36), v36), v28);
        v35.i32[0] = *(v31 - 15);
        v35.i32[1] = *(v31 - 10);
        v35.i32[2] = *(v31 - 5);
        v35.i32[3] = *v31;
        v39.i32[0] = v31[5];
        v39.i32[1] = v31[10];
        v39.i32[2] = v31[15];
        v39.i32[3] = v31[20];
        v40 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v37, (int32x4_t)v35), (int8x16_t)vcgtq_s32((int32x4_t)v35, v37));
        v41 = (int32x4_t)vbicq_s8((int8x16_t)vsubq_s32(v38, v39), (int8x16_t)vcgtq_s32(v39, v38));
        v24 = vaddw_high_s32(v24, v40);
        v25 = vaddw_s32(v25, *(int32x2_t *)v40.i8);
        v34 = vaddw_high_s32(v34, v41);
        v33 = vaddw_s32(v33, *(int32x2_t *)v41.i8);
        v42 = vdupq_n_s64(8uLL);
        v29 = vaddq_s64(v29, v42);
        v30 = vaddq_s64(v30, v42);
        v31 += 40;
        v23 -= 8;
      }
      while (v23);
      v18 = vaddvq_s64(vaddq_s64(vaddq_s64(v33, v25), vaddq_s64(v34, v24)));
    }
    else
    {
      v20 = 1;
    }
    v43 = ~v20 - 0x3333333333333333 * (v58 - v57);
    do
    {
      if (v43)
        v44 = -1;
      else
        v44 = ~(_DWORD)a4;
      v45 = v44 + a3;
      v46 = v19[4];
      v16 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v47 < 0 != v16)
        v47 = 0;
      v18 += v47;
      v19 += 5;
      --v43;
    }
    while (v19 != v58);
  }
  if (v18 <= 2 * (v58 - v57))
    goto LABEL_35;
  if ((int)(a3 - v18 / v13 + 1 - a4) < 3 || (int)(a3 - v18 / v13 + 1 - HIDWORD(a3)) <= 2)
    goto LABEL_35;
  webrtc::RtpPacketizerAv1::Packetize(v9, a2, (a3 - (v18 / v13) + 1) | a3 & 0xFFFFFFFF00000000, a4, (uint64_t)a5);
  v49 = *a5;
  if ((_BYTE *)a5[1] - (_BYTE *)*a5 != v12)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_av1.cc");
    if (v49)
      operator delete(v49);
LABEL_35:
    *a5 = v10;
    a5[1] = v11;
    a5[2] = v59;
    return;
  }
  if (v10)
    operator delete(v10);
}

char *webrtc::RtpPacketizerAv1::Packetize@<X0>(char *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  char *v15;
  int v16;
  int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  signed int v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  __int128 v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v68;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (a2)
  {
    if ((int)a3 - (int)a4 >= 3)
    {
      v6 = HIDWORD(a3);
      if ((int)a3 - HIDWORD(a3) >= 3)
      {
        v7 = a2;
        v8 = result;
        v9 = a3 - 1;
        result = (char *)operator new(0x14uLL);
        v10 = 0;
        v11 = result + 20;
        *(_QWORD *)result = 0;
        *((_DWORD *)result + 2) = 0;
        v12 = v9 - v6;
        *((_DWORD *)result + 4) = 0;
        *(_QWORD *)(a5 + 8) = result + 20;
        *(_QWORD *)(a5 + 16) = result + 20;
        v68 = v7 - 1;
        v13 = v6 - HIDWORD(a4);
        v64 = v13;
        v14 = result + 20;
        v15 = result;
        *(_QWORD *)a5 = result;
        v65 = v8;
        v66 = v7;
        while (1)
        {
          while (1)
          {
            if (v15 == v14)
              goto LABEL_98;
            v16 = *((_DWORD *)v14 - 4);
            if (*((_DWORD *)v14 - 1) && v16 <= 3)
            {
              v19 = *((int *)v14 - 2);
              v18 = 1;
              if (v19 >= 0x80)
              {
                do
                {
                  v20 = v19 >> 14;
                  v19 >>= 7;
                  ++v18;
                }
                while (v20);
              }
              result = *(char **)a5;
              v15 = *(char **)a5;
            }
            else
            {
              v18 = 0;
            }
            if (v15 == v14)
              goto LABEL_98;
            if (v16 <= 2)
              v21 = 1;
            else
              v21 = 2;
            if (v12 < v21 + v18)
            {
              std::vector<webrtc::RtpPacketizerAv1::Packet>::emplace_back<unsigned long &>((char **)a5, v10);
              v18 = 0;
              result = *(char **)a5;
              v11 = *(char **)(a5 + 8);
              v14 = v11;
              v15 = *(char **)a5;
              v12 = v9;
            }
            if (v15 == v14)
            {
LABEL_98:
              __break(1u);
LABEL_99:
              abort();
            }
            v22 = *((_DWORD *)v14 - 1);
            v23 = *((_DWORD *)v14 - 4);
            *((_DWORD *)v14 - 4) = v23 + 1;
            v24 = &v8[32 * v10];
            v27 = *((_DWORD *)v24 + 6);
            v26 = (int *)(v24 + 24);
            v25 = v27;
            v28 = v27;
            if (v23 >= 3)
            {
              if (v25 < 0x80)
              {
                v30 = 1;
              }
              else
              {
                v29 = v25;
                v30 = 1;
                do
                {
                  v31 = v29 >> 14;
                  v29 >>= 7;
                  ++v30;
                }
                while (v31);
              }
              v28 = v30 + v25;
              result = *(char **)a5;
              v15 = *(char **)a5;
            }
            v32 = v22 + v18;
            v33 = v12 - v18;
            v34 = v33 - a4;
            if (v11 - result == 20)
              v34 = v13 + v33;
            v35 = v10 == v68 ? v11 : v14;
            if (v10 == v68)
              v15 = result;
            else
              v34 = v33;
            if (v28 > v34)
              break;
            *((_DWORD *)v14 - 2) = v25;
            *((_DWORD *)v14 - 1) = v28 + v32;
            v12 = v33 - v28;
            ++v10;
            v14 = v35;
            if (v10 == v7)
              return result;
          }
          if (v23 >= 3)
            break;
          if (v33 >= v25 - 1)
            v37 = v25 - 1;
          else
            v37 = v33;
          if (!v37)
          {
LABEL_60:
            v37 = 0;
            *((_DWORD *)v14 - 4) = v23;
            *((_DWORD *)v14 - 1) = v22;
            v47 = v9;
            if (v9 < v25)
              goto LABEL_76;
            goto LABEL_61;
          }
          v39 = v37 + v32;
LABEL_75:
          *((_DWORD *)v14 - 2) = v37;
          *((_DWORD *)v14 - 1) = v39;
          v47 = v37 + v9;
          if ((int)(v37 + v9) < v25)
          {
            while (1)
            {
LABEL_76:
              v48 = v47;
              v53 = *(_QWORD *)(a5 + 16);
              if ((unint64_t)v11 < v53)
              {
                if (!v11)
                  goto LABEL_98;
                *((_DWORD *)v11 + 1) = 0;
                *((_DWORD *)v11 + 2) = 0;
                *(_DWORD *)v11 = v10;
                *((_DWORD *)v11 + 4) = 0;
                v11 += 20;
                goto LABEL_92;
              }
              v54 = *(char **)a5;
              v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v11[-*(_QWORD *)a5] >> 2);
              v56 = v55 + 1;
              if (v55 + 1 > 0xCCCCCCCCCCCCCCCLL)
                goto LABEL_99;
              v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v54) >> 2);
              if (2 * v57 > v56)
                v56 = 2 * v57;
              if (v57 >= 0x666666666666666)
                v58 = 0xCCCCCCCCCCCCCCCLL;
              else
                v58 = v56;
              if (!v58)
                goto LABEL_98;
              if (v58 > 0xCCCCCCCCCCCCCCCLL)
                std::__throw_bad_array_new_length[abi:sn180100]();
              v59 = 20 * v58;
              v60 = (char *)operator new(20 * v58);
              v61 = &v60[20 * v55];
              *((_DWORD *)v61 + 1) = 0;
              *((_DWORD *)v61 + 2) = 0;
              *(_DWORD *)v61 = v10;
              *((_DWORD *)v61 + 4) = 0;
              if (v11 == v54)
              {
                v54 = v11;
                v11 = v61 + 20;
                *(_QWORD *)a5 = v61;
                *(_QWORD *)(a5 + 8) = v61 + 20;
                *(_QWORD *)(a5 + 16) = &v60[v59];
                if (!v54)
                  goto LABEL_92;
              }
              else
              {
                v62 = &v60[20 * v55];
                do
                {
                  v63 = *(_OWORD *)(v11 - 20);
                  *((_DWORD *)v62 - 1) = *((_DWORD *)v11 - 1);
                  *(_OWORD *)(v62 - 20) = v63;
                  v62 -= 20;
                  v11 -= 20;
                }
                while (v11 != v54);
                v11 = v61 + 20;
                *(_QWORD *)a5 = v62;
                *(_QWORD *)(a5 + 8) = v61 + 20;
                *(_QWORD *)(a5 + 16) = &v60[v59];
                if (!v54)
                  goto LABEL_92;
              }
              operator delete(v54);
LABEL_92:
              *(_QWORD *)(a5 + 8) = v11;
              if (*(char **)a5 == v11)
                goto LABEL_98;
              *((_DWORD *)v11 - 4) = 1;
              *((_DWORD *)v11 - 3) = v37;
              *((_DWORD *)v11 - 2) = v9;
              *((_DWORD *)v11 - 1) = v9;
              v47 = v48 + v9;
              v25 = *v26;
              v37 = v48;
              if ((int)(v48 + v9) >= *v26)
                goto LABEL_62;
            }
          }
LABEL_61:
          v48 = v37;
LABEL_62:
          v49 = v25 - v48;
          if (v10 == v68 && v49 > v9 - (int)a4)
          {
            std::vector<webrtc::RtpPacketizerAv1::Packet>::emplace_back<unsigned long &>((char **)a5, v68);
            v50 = *(_QWORD *)(a5 + 8);
            if (*(_QWORD *)a5 == v50)
              goto LABEL_98;
            v51 = v49 + a4;
            if (v49 + (int)a4 < 0 != __OFADD__(v49, (_DWORD)a4))
              ++v51;
            v52 = v51 >> 1;
            *(_DWORD *)(v50 - 16) = 1;
            *(_DWORD *)(v50 - 12) = v48;
            if (v52 >= v49)
              v52 = v49 - 1;
            v49 -= v52;
            *(_DWORD *)(v50 - 8) = v52;
            *(_DWORD *)(v50 - 4) = v52;
            v48 += v52;
          }
          std::vector<webrtc::RtpPacketizerAv1::Packet>::emplace_back<unsigned long &>((char **)a5, v10);
          result = *(char **)a5;
          v11 = *(char **)(a5 + 8);
          if (*(char **)a5 == v11)
            goto LABEL_98;
          *((_DWORD *)v11 - 4) = 1;
          *((_DWORD *)v11 - 3) = v48;
          v12 = v9 - v49;
          v15 = result;
          *((_DWORD *)v11 - 2) = v49;
          *((_DWORD *)v11 - 1) = v49;
          v8 = v65;
          v7 = v66;
          v13 = v64;
          ++v10;
          v14 = v11;
          if (v10 == v66)
            return result;
        }
        if (v33 >= 2)
        {
          v40 = 0;
          v41 = 7;
          do
          {
            ++v40;
            v42 = (1 << v41) + v40;
            v41 += 7;
          }
          while (v42 <= v33);
          v43 = v33 - v40;
          if (v43 >= v25 - 1)
            v37 = v25 - 1;
          else
            v37 = v43;
          if (!v37)
            goto LABEL_60;
          v38 = v37 + v32;
          if (v37 < 0x80)
          {
            v45 = 1;
LABEL_74:
            v39 = v45 + v38;
            goto LABEL_75;
          }
        }
        else
        {
          if (v25 >= 1)
            v36 = 1;
          else
            v36 = v25;
          v37 = v36 - 1;
          if (v36 == 1)
            goto LABEL_60;
          v38 = v37 + v32;
        }
        v44 = (int)v37;
        v45 = 1;
        do
        {
          v46 = v44 >> 14;
          v44 >>= 7;
          ++v45;
        }
        while (v46);
        goto LABEL_74;
      }
    }
  }
  return result;
}

void std::vector<webrtc::RtpPacketizerAv1::Packet>::emplace_back<unsigned long &>(char **a1, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *((_DWORD *)v5 + 1) = 0;
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)v5 = a2;
      v6 = v5 + 20;
      *((_DWORD *)v5 + 4) = 0;
LABEL_4:
      a1[1] = v6;
      return;
    }
    goto LABEL_18;
  }
  v7 = *a1;
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
  v9 = v8 + 1;
  if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL)
    goto LABEL_19;
  v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v7) >> 2);
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x666666666666666)
    v11 = 0xCCCCCCCCCCCCCCCLL;
  else
    v11 = v9;
  if (!v11)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    abort();
  }
  if (v11 > 0xCCCCCCCCCCCCCCCLL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v12 = 20 * v11;
  v13 = (char *)operator new(20 * v11);
  v14 = &v13[20 * v8];
  *((_DWORD *)v14 + 1) = 0;
  *((_DWORD *)v14 + 2) = 0;
  *(_DWORD *)v14 = a2;
  *((_DWORD *)v14 + 4) = 0;
  v6 = v14 + 20;
  if (v5 != v7)
  {
    do
    {
      v15 = *(_OWORD *)(v5 - 20);
      *((_DWORD *)v14 - 1) = *((_DWORD *)v5 - 1);
      *(_OWORD *)(v14 - 20) = v15;
      v14 -= 20;
      v5 -= 20;
    }
    while (v5 != v7);
    v5 = v7;
  }
  *a1 = v14;
  a1[1] = v6;
  a1[2] = &v13[v12];
  if (!v5)
    goto LABEL_4;
  operator delete(v5);
  a1[1] = v6;
}

uint64_t *webrtc::RtpPacketizerAv1::NextPacket(webrtc::RtpPacketizerAv1 *this, webrtc::RtpPacketToSend *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  int v29;
  int v30;
  int *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  _BOOL4 v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t *v70;

  v2 = *((_QWORD *)this + 9);
  v3 = *((_QWORD *)this + 5);
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 6) - v3) >> 2);
  if (v2 >= v4)
    return (uint64_t *)(v2 < v4);
  v7 = (int *)(v3 + 20 * v2);
  v8 = v7[4] + 1;
  *((_QWORD *)a2 + 3) = 0;
  v9 = (uint64_t *)((char *)a2 + 88);
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
  v10 = *((_QWORD *)a2 + 11);
  if (v10)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(v10 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v8;
  result = rtc::CopyOnWriteBuffer::SetSize(v9, (uint64_t *)(*((_QWORD *)a2 + 2) + v8));
  v12 = *((_QWORD *)a2 + 2);
  v13 = *((_QWORD *)a2 + 11);
  if (v13)
  {
    result = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v9, (uint64_t *)(*(_QWORD *)(v13 + 8) - *((_QWORD *)a2 + 12)));
    v13 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12);
  }
  v14 = *((_QWORD *)this + 9);
  v15 = *((_QWORD *)this + 5);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 6) - v15) >> 2) <= v14)
    goto LABEL_81;
  v16 = *(_DWORD *)(v15 + 20 * v14 + 4);
  v17 = v16 + *(_DWORD *)(v15 + 20 * v14) - 1;
  v18 = (_BYTE *)*((_QWORD *)this + 2);
  v19 = (_BYTE *)*((_QWORD *)this + 3);
  if (v17 >= (v19 - v18) >> 5)
    goto LABEL_81;
  v20 = v15 + 20 * v14;
  v22 = *(_DWORD *)(v20 + 8);
  v21 = *(_DWORD *)(v20 + 12);
  if (v16 == 1)
    v23 = v22;
  else
    v23 = 0;
  v24 = v22 > 0;
  if (v23 + v21 >= *(_DWORD *)&v18[32 * v17 + 24])
    v25 = v24 << 7;
  else
    v25 = ((v24 & 1) << 7) | 0x40;
  if (v16 >= 4)
    v26 = 0;
  else
    v26 = 16 * v16;
  v27 = v25 | v26;
  if (!v14 && *((_DWORD *)this + 2) == 3)
  {
    if (v18 == v19)
      goto LABEL_81;
    if ((*v18 & 0x78) == 8)
      v27 |= 8u;
  }
  v70 = v9;
  *(_BYTE *)(v13 + v12) = v27;
  result = (uint64_t *)(v13 + v12 + 1);
  v28 = v3 + 20 * v2;
  v30 = *(_DWORD *)(v28 + 4);
  v29 = *(_DWORD *)(v28 + 8);
  v31 = (int *)(v28 + 4);
  if (v30 >= 2)
  {
    v32 = *v7;
    v33 = *((_QWORD *)this + 2);
    if (v32 >= (*((_QWORD *)this + 3) - v33) >> 5)
      goto LABEL_81;
    v34 = v33 + 32 * v32;
    v35 = *(int *)(v34 + 24) - (uint64_t)v29;
    if (v35 < 0x80)
    {
      *(_BYTE *)result = v35;
      v38 = (char *)result + 1;
      if (v29)
        goto LABEL_28;
    }
    else
    {
      v36 = 0;
      do
      {
        *((_BYTE *)result + v36++) = v35 | 0x80;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *((_BYTE *)result + v36) = v35;
      v38 = (char *)result + (int)v36 + 1;
      if (v29)
      {
LABEL_28:
        if (v29 >= 2 || (*(_BYTE *)v34 & 4) == 0)
        {
LABEL_31:
          if ((*(_BYTE *)v34 & 4) != 0)
            v39 = -2;
          else
            v39 = -1;
          v40 = (v39 + v29) & ~((v39 + v29) >> 31);
          v41 = v33 + 32 * v32;
          v42 = *(_QWORD *)(v41 + 16);
          v43 = v42 - v40;
          if (v42 && v42 != v40)
            memcpy(v38, (const void *)(*(_QWORD *)(v41 + 8) + v40), v42 - v40);
          result = (uint64_t *)&v38[v43];
          v30 = *v31;
          if (*v31 >= 3)
          {
            v44 = 1;
            while (1)
            {
              v45 = *v7 + (uint64_t)v44;
              v46 = *((_QWORD *)this + 2);
              if (v45 >= (*((_QWORD *)this + 3) - v46) >> 5)
                goto LABEL_81;
              v47 = v46 + 32 * v45;
              v48 = *(int *)(v47 + 24);
              if (v48 < 0x80)
              {
                LODWORD(v49) = 0;
              }
              else
              {
                v49 = 0;
                do
                {
                  *((_BYTE *)result + v49++) = v48 | 0x80;
                  v50 = v48 >> 14;
                  v48 >>= 7;
                }
                while (v50);
              }
              *((_BYTE *)result + v49) = v48;
              v51 = (char *)result + (int)v49;
              v51[1] = *(_BYTE *)v47 & 0xFD;
              v52 = v51 + 1;
              if ((*(_BYTE *)v47 & 4) == 0)
                break;
              v53 = v52 + 2;
              v52[1] = *(_BYTE *)(v46 + 32 * v45 + 1);
              v54 = v46 + 32 * v45;
              v55 = *(_QWORD *)(v54 + 16);
              if (v55)
                goto LABEL_50;
LABEL_39:
              result = (uint64_t *)&v53[v55];
              ++v44;
              v30 = *v31;
              if (v44 >= *v31 - 1)
                goto LABEL_51;
            }
            v53 = v52 + 1;
            v54 = v46 + 32 * v45;
            v55 = *(_QWORD *)(v54 + 16);
            if (!v55)
              goto LABEL_39;
LABEL_50:
            memcpy(v53, *(const void **)(v54 + 8), v55);
            goto LABEL_39;
          }
LABEL_51:
          v29 = 0;
          goto LABEL_52;
        }
LABEL_30:
        *v38++ = *(_BYTE *)(v33 + 32 * v32 + 1);
        goto LABEL_31;
      }
    }
    *v38++ = *(_BYTE *)v34 & 0xFD;
    if ((*(_BYTE *)v34 & 4) == 0)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_52:
  v56 = v30 + *v7 - 1;
  v57 = *((_QWORD *)this + 2);
  if (v56 < (*((_QWORD *)this + 3) - v57) >> 5)
  {
    v58 = (_BYTE *)(v57 + 32 * v56);
    v59 = *(_DWORD *)(v3 + 20 * v2 + 12);
    if (v30 > 3)
    {
      v60 = v59;
      if (v59 < 0x80)
      {
        LODWORD(v61) = 0;
      }
      else
      {
        v61 = 0;
        do
        {
          *((_BYTE *)result + v61++) = v60 | 0x80;
          v62 = v60 >> 14;
          v60 >>= 7;
        }
        while (v62);
      }
      *((_BYTE *)result + v61) = v60;
      result = (uint64_t *)((char *)result + (int)v61 + 1);
    }
    if (v29 || (v63 = v59 - 1, v59 < 1))
    {
      v63 = v59;
      if (v29 > 1)
      {
LABEL_70:
        if ((*v58 & 4) != 0)
          v64 = -2;
        else
          v64 = -1;
        memcpy(result, (const void *)(*(_QWORD *)(v57 + 32 * v56 + 8) + ((v64 + v29) & ~((v64 + v29) >> 31))), v63);
        v65 = *((_QWORD *)this + 9) + 1;
        *((_QWORD *)this + 9) = v65;
        v66 = v65 == 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2)
           && *((_BYTE *)this + 64) != 0;
        *(_BYTE *)a2 = v66;
        v67 = *((_QWORD *)a2 + 12);
        v68 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v67 + 1);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v70, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v67));
        if (v66)
          v69 = 0x80;
        else
          v69 = 0;
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v69 & 0x80 | v68 & 0x7F;
        return (uint64_t *)(v2 < v4);
      }
    }
    else
    {
      *(_BYTE *)result = *v58 & 0xFD;
      result = (uint64_t *)((char *)result + 1);
    }
    if ((*v58 & 4) != 0 && v63 >= 1)
    {
      *(_BYTE *)result = *(_BYTE *)(v57 + 32 * v56 + 1);
      result = (uint64_t *)((char *)result + 1);
      --v63;
    }
    goto LABEL_70;
  }
LABEL_81:
  __break(1u);
  return result;
}

void webrtc::RtpPacketizerAv1::~RtpPacketizerAv1(webrtc::RtpPacketizerAv1 *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24C0BCB90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24C0BCB90;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::RtpPacketizerAv1::NumPackets(webrtc::RtpPacketizerAv1 *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 2) - *((_QWORD *)this + 9);
}

void webrtc::RtpPacketizerH265::RtpPacketizerH265(uint64_t a1, webrtc::H264 *this, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  void **v27;
  unint64_t v28;
  unint64_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int *v44;
  int v45;
  unsigned __int16 *v46;
  unint64_t v47;
  int *v48;
  int *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int *v53;
  unint64_t v54;
  unsigned int v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned __int8 *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unsigned __int8 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int16 v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void **v103;
  unint64_t v104;
  std::string *v105;
  int *v106;
  int *v107;
  int *v108;
  unint64_t v109;
  __int128 *v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int16 *v113;
  int *v114;
  int *v115;
  __int128 v116;

  v6 = (unint64_t)this;
  *(_QWORD *)a1 = &off_24C0BCBC0;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = a1 + 8;
  *(_QWORD *)(a1 + 104) = a4;
  v110 = (__int128 *)(a1 + 104);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 112) = a5;
  *(_QWORD *)(a1 + 120) = 0;
  webrtc::H264::FindNaluIndices(this, a3, (char **)&v114);
  v13 = v114;
  v14 = v115;
  if (v114 == v115)
  {
    LODWORD(v16) = 1;
    if (!v114)
      goto LABEL_36;
    goto LABEL_35;
  }
  while (1)
  {
    v15 = (unsigned __int8 *)*((_QWORD *)v13 + 2);
    v16 = v15 != 0;
    if (!v15)
    {
      v27 = *(void ***)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24) - (_QWORD)v27;
      if (v28)
      {
        v29 = *(_QWORD *)(a1 + 40);
        v30 = &v27[v29 >> 8];
        v31 = (uint64_t)*v30;
        v32 = (uint64_t)*v30 + 16 * v29;
        v33 = *(uint64_t *)((char *)v27 + (((*(_QWORD *)(a1 + 48) + v29) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*(_BYTE *)(a1 + 48) + v29);
        while (v32 != v33)
        {
          if (!v32)
            goto LABEL_144;
          v32 += 16;
          if (v32 - v31 == 4096)
          {
            v34 = (uint64_t)v30[1];
            ++v30;
            v31 = v34;
            v32 = v34;
          }
        }
      }
      *(_QWORD *)(a1 + 48) = 0;
      if (v28 >= 0x11)
      {
        do
        {
          operator delete(*v27);
          v35 = *(_QWORD *)(a1 + 24);
          v27 = (void **)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v27;
          v28 = v35 - (_QWORD)v27;
        }
        while (v28 > 0x10);
      }
      if (v28 >> 3 != 1)
      {
        if (v28 >> 3 == 2)
          *(_QWORD *)(a1 + 40) = 256;
LABEL_34:
        v13 = v114;
        if (!v114)
          goto LABEL_36;
        goto LABEL_35;
      }
      *(_QWORD *)(a1 + 40) = 128;
      v13 = v114;
      if (!v114)
      {
LABEL_36:
        if (!(_DWORD)v16)
          return;
        v6 = *(_QWORD *)(a1 + 48);
        if (!v6)
          return;
        v16 = 0;
        v106 = (int *)(a1 + 108);
        v111 = a1 + 56;
        while (1)
        {
          while (1)
          {
            v37 = *(_QWORD *)(a1 + 40) + v16;
            v38 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v37 >> 5) & 0x7FFFFFFFFFFFFF8));
            v39 = (*(_BYTE *)(a1 + 40) + v16);
            v40 = *(_QWORD *)(v38 + 16 * v37 + 8);
            v41 = *(_DWORD *)(a1 + 104);
            v42 = v41;
            v112 = v40;
            if (v6 != 1)
              break;
            v43 = v41 - *(_DWORD *)(a1 + 116);
            v44 = (int *)(a1 + 116);
            if (v43 < (int)v40)
              goto LABEL_50;
LABEL_85:
            v42 -= *v44;
LABEL_86:
            v67 = v42 - v40;
            if (v42 < v40)
              goto LABEL_147;
            v68 = *(unsigned __int8 **)(v38 + 16 * v39);
            ++*(_QWORD *)(a1 + 120);
            v69 = v40;
            if (v6 != 1)
            {
              v69 = v40;
              if (v6 - 1 == v16)
                v69 = v40 + *(int *)(a1 + 112);
            }
            if (v42 < v69)
              goto LABEL_148;
            if (!v40)
              goto LABEL_146;
            v70 = *(_QWORD *)(a1 + 64);
            v71 = *(_QWORD *)(a1 + 72);
            v72 = 170 * ((v71 - v70) >> 3) - 1;
            v6 = *v68;
            if (v71 == v70)
              v72 = 0;
            if (v72 == *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88))
            {
              std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v111);
              v40 = v112;
              v70 = *(_QWORD *)(a1 + 64);
              v71 = *(_QWORD *)(a1 + 72);
            }
            if (v71 == v70)
              goto LABEL_144;
            v73 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
            v74 = *(_QWORD *)(v70 + 8 * (v73 / 0xAA));
            if (!v74)
              goto LABEL_144;
            v75 = v74 + 24 * (v73 % 0xAA);
            *(_QWORD *)v75 = v68;
            *(_QWORD *)(v75 + 8) = v40;
            *(_WORD *)(v75 + 16) = 1;
            *(_BYTE *)(v75 + 18) = 1;
            *(_WORD *)(v75 + 20) = v6;
            v76 = *(_QWORD *)(a1 + 96);
            v77 = v76 + 1;
            *(_QWORD *)(a1 + 96) = v76 + 1;
            v6 = v16 + 1;
            v78 = *(_QWORD *)(a1 + 48);
            if (v16 + 1 != v78)
            {
              v79 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 16)
                                                   + (((*(_QWORD *)(a1 + 40) + v6) >> 5) & 0x7FFFFFFFFFFFFF8))
                                       + 16 * (*(_BYTE *)(a1 + 40) + v6));
              v80 = v79[1];
              v81 = v80 + 6;
              if (v78 == 1)
              {
                if (v67 < v81)
                  goto LABEL_111;
              }
              else
              {
                v82 = v80 + 6;
                if (v78 - 2 == v16)
                  v82 = v81 + *(int *)(a1 + 112);
                if (v67 < v82)
                  goto LABEL_111;
              }
              if (!v80)
                goto LABEL_146;
              v6 = *v79;
              v83 = *(_QWORD *)(a1 + 64);
              v84 = *(_QWORD *)(a1 + 72);
              v85 = 170 * ((v84 - v83) >> 3) - 1;
              v86 = *(unsigned __int8 *)v6;
              if (v84 == v83)
                v85 = 0;
              if (v85 == *(_QWORD *)(a1 + 88) + v77)
              {
                std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v111);
                v83 = *(_QWORD *)(a1 + 64);
                v84 = *(_QWORD *)(a1 + 72);
              }
              if (v84 == v83)
                goto LABEL_144;
              v87 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
              v88 = *(_QWORD *)(v83 + 8 * (v87 / 0xAA));
              if (!v88)
                goto LABEL_144;
              v89 = v88 + 24 * (v87 % 0xAA);
              *(_QWORD *)v89 = v6;
              *(_QWORD *)(v89 + 8) = v80;
              *(_WORD *)(v89 + 16) = 0;
              *(_BYTE *)(v89 + 18) = 1;
              *(_WORD *)(v89 + 20) = v86;
              v76 = *(_QWORD *)(a1 + 96);
              v77 = v76 + 1;
              *(_QWORD *)(a1 + 96) = v76 + 1;
              v6 = v16 + 2;
              v78 = *(_QWORD *)(a1 + 48);
              if (v16 + 2 != v78)
              {
                v90 = v67 - v81;
                while (1)
                {
                  v91 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + (((v6 + *(_QWORD *)(a1 + 40)) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v6 + *(_BYTE *)(a1 + 40));
                  v16 = *(_QWORD *)(v91 + 8);
                  v92 = v16 + 2;
                  v93 = v16 + 2;
                  if (v78 != 1 && v6 == v78 - 1)
                    v93 = v92 + *(int *)(a1 + 112);
                  if (v90 < v93)
                    break;
                  if (!v16)
                    goto LABEL_146;
                  v94 = *(unsigned __int8 **)v91;
                  v95 = *(_QWORD *)(a1 + 64);
                  v96 = *(_QWORD *)(a1 + 72);
                  v97 = 170 * ((v96 - v95) >> 3) - 1;
                  v98 = *v94;
                  if (v96 == v95)
                    v97 = 0;
                  if (v97 == *(_QWORD *)(a1 + 88) + v77)
                  {
                    std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v111);
                    v95 = *(_QWORD *)(a1 + 64);
                    v96 = *(_QWORD *)(a1 + 72);
                  }
                  if (v96 == v95)
                    goto LABEL_144;
                  v99 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
                  v100 = *(_QWORD *)(v95 + 8 * (v99 / 0xAA));
                  if (!v100)
                    goto LABEL_144;
                  v101 = v100 + 24 * (v99 % 0xAA);
                  *(_QWORD *)v101 = v94;
                  *(_QWORD *)(v101 + 8) = v16;
                  *(_WORD *)(v101 + 16) = 0;
                  *(_BYTE *)(v101 + 18) = 1;
                  *(_WORD *)(v101 + 20) = v98;
                  v76 = *(_QWORD *)(a1 + 96);
                  v77 = v76 + 1;
                  *(_QWORD *)(a1 + 96) = v76 + 1;
                  ++v6;
                  v78 = *(_QWORD *)(a1 + 48);
                  v90 -= v92;
                  if (v6 == v78)
                    goto LABEL_39;
                }
LABEL_111:
                v36 = v6;
                v76 = v77 - 1;
                v6 = v78;
                goto LABEL_40;
              }
            }
LABEL_39:
            v36 = v6;
LABEL_40:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * ((*(_QWORD *)(a1 + 88) + v76) / 0xAAuLL))
                     + 24 * ((*(_QWORD *)(a1 + 88) + v76) % 0xAAuLL)
                     + 17) = 1;
            v16 = v36;
            if (v36 >= v6)
              return;
          }
          if (v16)
          {
            if (v16 + 1 != v6)
              goto LABEL_49;
            v45 = *(_DWORD *)(a1 + 112);
          }
          else
          {
            v45 = *v106;
          }
          v41 -= v45;
LABEL_49:
          if (v41 >= (int)v40)
          {
            v44 = (int *)(a1 + 108);
            if (v16)
              goto LABEL_86;
            goto LABEL_85;
          }
LABEL_50:
          v46 = *(unsigned __int16 **)(v38 + 16 * v39);
          if (!v40)
            v46 = 0;
          v113 = v46;
          v116 = *v110;
          LODWORD(v116) = v116 - 3;
          v47 = v6 - 1;
          if (v6 == 1)
            goto LABEL_55;
          if (v47 == v16)
          {
            HIDWORD(v116) = *(_DWORD *)(a1 + 112);
LABEL_55:
            if (!v16)
            {
              if (v6 == 1)
                goto LABEL_58;
              goto LABEL_57;
            }
            goto LABEL_108;
          }
          if (!v16)
          {
            HIDWORD(v116) = *v106;
LABEL_57:
            DWORD2(v116) = 0;
            goto LABEL_58;
          }
          HIDWORD(v116) = 0;
LABEL_108:
          DWORD1(v116) = 0;
          if (v47 != v16)
            goto LABEL_57;
LABEL_58:
          v6 = v40 - 2;
          webrtc::RtpPacketizer::SplitAboutEqually(v40 - 2, (int *)&v116, &v114);
          v48 = v114;
          v49 = v115;
          if (v114 != v115)
          {
            v108 = v114;
            v109 = v16;
            v50 = 0;
            v107 = v115;
            v51 = v115 - v114;
            v52 = 2;
            v53 = v114;
            v54 = v112;
            while (1)
            {
              v16 = v53[v50];
              if ((int)v16 <= 0)
                goto LABEL_145;
              v55 = *v113;
              v56 = (char *)v113 + v52;
              v57 = v54 - v52;
              if (v57 >= v16)
                v57 = v53[v50];
              if (!v57)
                v56 = 0;
              if (v54 > v52)
                v58 = v57;
              else
                v58 = 0;
              if (v54 > v52)
                v59 = v56;
              else
                v59 = 0;
              v60 = *(_QWORD *)(a1 + 64);
              v61 = *(_QWORD *)(a1 + 72);
              v62 = 170 * ((v61 - v60) >> 3) - 1;
              if (v61 == v60)
                v62 = 0;
              v63 = v50 == v51 - 1;
              if (v62 == *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88))
              {
                std::deque<webrtc::PacketArrivalHistory::PacketArrival>::__add_back_capacity(v111);
                v54 = v112;
                v60 = *(_QWORD *)(a1 + 64);
                v61 = *(_QWORD *)(a1 + 72);
              }
              if (v61 == v60)
                goto LABEL_144;
              v64 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88);
              v65 = *(_QWORD *)(v60 + 8 * (v64 / 0xAA));
              if (!v65)
                goto LABEL_144;
              v66 = v65 + 24 * (v64 % 0xAA);
              *(_QWORD *)v66 = v59;
              *(_QWORD *)(v66 + 8) = v58;
              *(_BYTE *)(v66 + 16) = v50 == 0;
              *(_BYTE *)(v66 + 17) = v63;
              *(_BYTE *)(v66 + 18) = 0;
              *(_WORD *)(v66 + 20) = bswap32(v55) >> 16;
              ++*(_QWORD *)(a1 + 96);
              v52 += v16;
              v6 -= v16;
              ++v50;
              v53 = v114;
              v51 = v115 - v114;
              if (v50 >= v51)
              {
                *(_QWORD *)(a1 + 120) += v51;
                v48 = v108;
                v16 = v109;
                v49 = v107;
                if (v6)
                  goto LABEL_149;
                if (!v53)
                  goto LABEL_81;
                goto LABEL_80;
              }
            }
          }
          v53 = v114;
          if (v114)
          {
LABEL_80:
            v115 = v53;
            operator delete(v53);
          }
LABEL_81:
          if (v48 == v49)
          {
            *(_QWORD *)(a1 + 120) = 0;
            v102 = *(_QWORD *)(a1 + 96);
            if (!v102)
              return;
            v103 = *(void ***)(a1 + 64);
            v104 = *(_QWORD *)(a1 + 88);
            while (*(void **)((char *)v103
                             + (((unint64_t)((v104 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
            {
              --v102;
              *(_QWORD *)(a1 + 88) = ++v104;
              *(_QWORD *)(a1 + 96) = v102;
              if (v104 >= 0x154)
              {
                operator delete(*v103);
                v103 = (void **)(*(_QWORD *)(a1 + 64) + 8);
                *(_QWORD *)(a1 + 64) = v103;
                v102 = *(_QWORD *)(a1 + 96);
                v104 = *(_QWORD *)(a1 + 88) - 170;
                *(_QWORD *)(a1 + 88) = v104;
              }
              if (!v102)
                return;
            }
            goto LABEL_144;
          }
          ++v16;
          v6 = *(_QWORD *)(a1 + 48);
          if (v16 >= v6)
            return;
        }
      }
LABEL_35:
      v115 = v13;
      operator delete(v13);
      goto LABEL_36;
    }
    v17 = *((_QWORD *)v13 + 1);
    v18 = v6 + v17;
    if (&a3[-v17] < v15)
      v15 = &a3[-v17];
    if (!v15)
      v18 = 0;
    if ((unint64_t)a3 > v17)
      v19 = v15;
    else
      v19 = 0;
    if ((unint64_t)a3 > v17)
      v20 = v18;
    else
      v20 = 0;
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_QWORD *)(a1 + 24);
    v23 = 32 * (v22 - v21) - 1;
    if (v22 == v21)
      v23 = 0;
    if (v23 == *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40))
    {
      std::deque<rtc::ArrayView<unsigned char const,-4711l>>::__add_back_capacity(v8);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
    }
    if (v22 == v21)
      break;
    v24 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
    v25 = *(_QWORD *)(v21 + ((v24 >> 5) & 0x7FFFFFFFFFFFFF8));
    if (!v25)
      break;
    v26 = (unint64_t *)(v25 + 16 * v24);
    *v26 = v20;
    v26[1] = (unint64_t)v19;
    ++*(_QWORD *)(a1 + 48);
    v13 += 6;
    if (v13 == v14)
      goto LABEL_34;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 123, "packet_length > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v9, v10, v11, v12, v16);
LABEL_146:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 167, "fragment.size() > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v9, v10, v11, v12, 0);
LABEL_147:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 149, "payload_size_left >= fragment.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v9, v10, v11, v12, v42);
LABEL_148:
  rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 193, "aggregated_fragments > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v9, v10, v11, v12, 0);
LABEL_149:
  v105 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 134, "payload_left == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v9, v10, v11, v12, v6);
  webrtc::RtpPacketizerH265::~RtpPacketizerH265((void **)&v105->__r_.__value_.__l.__data_);
}

void webrtc::RtpPacketizerH265::~RtpPacketizerH265(void **this)
{
  void **v1;

  *this = &off_24C0BCBC0;
  v1 = this + 1;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 7);
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100](v1);
}

{
  void **v1;

  *this = &off_24C0BCBC0;
  v1 = this + 1;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 7);
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100](v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtpPacketizerH265::NumPackets(webrtc::RtpPacketizerH265 *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t webrtc::RtpPacketizerH265::NextPacket(webrtc::RtpPacketizerH265 *this, webrtc::RtpPacketToSend *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  __int16 v32;
  _BOOL4 v33;
  unint64_t v34;
  int v35;
  const void *v36;
  int v37;
  void **v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void **v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void **v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  size_t v61;
  _BYTE *v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  const void *v73;
  void **v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void **v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  std::string *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;

  v8 = *((_QWORD *)this + 12);
  if (!v8)
    return v8 != 0;
  v11 = *((_QWORD *)this + 11);
  v12 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * (v11 / 0xAA));
  v13 = v11 % 0xAA;
  v14 = v12 + 24 * v13;
  v15 = *(unsigned __int8 *)(v14 + 16);
  v16 = *(unsigned __int8 *)(v14 + 17);
  if (*(_BYTE *)(v14 + 16))
    v17 = v16 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v47 = *(_BYTE **)v14;
    v46 = *(_QWORD *)(v14 + 8);
    *((_QWORD *)a2 + 3) = 0;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
    v48 = *((_QWORD *)a2 + 11);
    if (v48)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v48 + 8) - *((_QWORD *)a2 + 12)));
    *((_QWORD *)a2 + 3) = v46;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v46));
    v49 = *((_QWORD *)a2 + 2);
    v50 = *((_QWORD *)a2 + 11);
    if (v50)
    {
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v50 + 8) - *((_QWORD *)a2 + 12)));
      v50 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12);
    }
    memcpy((void *)(v50 + v49), v47, v46);
    v51 = (void **)*((_QWORD *)this + 8);
    v52 = *((_QWORD *)this + 11);
    if (*(void **)((char *)v51
                  + (((unint64_t)((v52 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
    {
      v53 = *((_QWORD *)this + 12) - 1;
      v54 = v52 + 1;
      *((_QWORD *)this + 11) = v54;
      *((_QWORD *)this + 12) = v53;
      if (v54 >= 0x154)
      {
        operator delete(*v51);
        *((_QWORD *)this + 8) += 8;
        *((_QWORD *)this + 11) -= 170;
      }
      v55 = (void **)*((_QWORD *)this + 2);
      v56 = *((_QWORD *)this + 5);
      if (*(void **)((char *)v55 + ((v56 >> 5) & 0x7FFFFFFFFFFFFF8)))
      {
        v57 = *((_QWORD *)this + 6) - 1;
        v58 = v56 + 1;
        *((_QWORD *)this + 5) = v58;
        *((_QWORD *)this + 6) = v57;
        if (v58 >= 0x200)
        {
          operator delete(*v55);
          *((_QWORD *)this + 2) += 8;
          *((_QWORD *)this + 5) -= 256;
        }
LABEL_58:
        v83 = *((_QWORD *)this + 12) == 0;
        *(_BYTE *)a2 = v83;
        v84 = *((_QWORD *)a2 + 12);
        v85 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + v84 + 1);
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 8) - v84));
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 16) + *((_QWORD *)a2 + 12) + 1) = v85 & 0x7F | (v83 << 7);
        --*((_QWORD *)this + 15);
        return v8 != 0;
      }
    }
    goto LABEL_60;
  }
  v90 = *((_QWORD *)this + 12);
  if (!*(_BYTE *)(v14 + 18))
  {
    v59 = v12 + 24 * v13;
    v60 = *(unsigned __int16 *)(v59 + 20);
    v62 = *(_BYTE **)v14;
    v61 = *(_QWORD *)(v14 + 8);
    v63 = v61 + 3;
    *((_QWORD *)a2 + 3) = 0;
    v47 = (char *)a2 + 88;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, *((uint64_t **)a2 + 2));
    v64 = *((_QWORD *)a2 + 11);
    if (v64)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v64 + 8) - *((_QWORD *)a2 + 12)));
    *((_QWORD *)a2 + 3) = v63;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v63));
    v69 = *((_QWORD *)a2 + 11);
    if (!v69)
      goto LABEL_62;
    v70 = *((_QWORD *)a2 + 2);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v69 + 8) - *((_QWORD *)a2 + 12)));
    v71 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16);
    if (!v71)
      goto LABEL_62;
    v47 = (_BYTE *)(v59 + 17);
    v72 = (_BYTE *)(v71 + *((_QWORD *)a2 + 12) + v70);
    if (v61)
      v73 = v62;
    else
      v73 = 0;
    *v72 = BYTE1(v60) & 0x81 | 0x62;
    v72[1] = v60;
    v72[2] = ((v15 != 0) << 7) | (v60 >> 9) & 0x3F | ((v16 != 0) << 6);
    memcpy(v72 + 3, v73, v61);
    v8 = v90;
    if (*v47)
    {
      v74 = (void **)*((_QWORD *)this + 2);
      v75 = *((_QWORD *)this + 5);
      if (!*(void **)((char *)v74 + ((v75 >> 5) & 0x7FFFFFFFFFFFFF8)))
      {
LABEL_60:
        __break(1u);
LABEL_61:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 229, "buffer", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v21, v22, v23, v24, v89);
LABEL_62:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 312, "buffer", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v65, v66, v67, v68, v89);
LABEL_63:
        rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 227, "payload_capacity >= kH265PayloadHeaderSizeBytes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, (uint64_t)v47);
        goto LABEL_64;
      }
      v76 = *((_QWORD *)this + 6) - 1;
      v77 = v75 + 1;
      *((_QWORD *)this + 5) = v77;
      *((_QWORD *)this + 6) = v76;
      if (v77 >= 0x200)
      {
        operator delete(*v74);
        *((_QWORD *)this + 2) += 8;
        *((_QWORD *)this + 5) -= 256;
      }
    }
    v78 = (void **)*((_QWORD *)this + 8);
    v79 = *((_QWORD *)this + 11);
    if (*(void **)((char *)v78
                  + (((unint64_t)((v79 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
    {
      v80 = *((_QWORD *)this + 12) - 1;
      v81 = v79 + 1;
      *((_QWORD *)this + 11) = v81;
      *((_QWORD *)this + 12) = v80;
      if (v81 >= 0x154)
      {
        operator delete(*v78);
        *((_QWORD *)this + 8) += 8;
        *((_QWORD *)this + 11) -= 170;
      }
      goto LABEL_58;
    }
    goto LABEL_60;
  }
  v18 = *((_QWORD *)a2 + 11);
  if (v18)
    v18 = *(_QWORD *)(v18 + 8) - *((_QWORD *)a2 + 12);
  v19 = (uint64_t *)*((_QWORD *)a2 + 2);
  v47 = (_BYTE *)(v18 - *((unsigned __int8 *)a2 + 2) - ((_QWORD)v19 + *((_QWORD *)a2 + 3)));
  if ((unint64_t)v47 <= 1)
    goto LABEL_63;
  *((_QWORD *)a2 + 3) = 0;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, v19);
  v20 = *((_QWORD *)a2 + 11);
  if (v20)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v20 + 8) - *((_QWORD *)a2 + 12)));
  *((_QWORD *)a2 + 3) = v47;
  rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)&v47[*((_QWORD *)a2 + 2)]);
  v25 = *((_QWORD *)a2 + 11);
  if (!v25)
    goto LABEL_61;
  v47 = (_BYTE *)*((_QWORD *)a2 + 2);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v25 + 8) - *((_QWORD *)a2 + 12)));
  v26 = *(_QWORD *)(*((_QWORD *)a2 + 11) + 16);
  if (!v26)
    goto LABEL_61;
  v27 = *((_QWORD *)this + 11);
  v28 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * (v27 / 0xAA));
  v29 = v27 % 0xAA;
  if (!*(_BYTE *)(v28 + 24 * v29 + 16))
  {
LABEL_64:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 231, "packet->first_fragment", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v21, v22, v23, v24, v89);
    goto LABEL_65;
  }
  v30 = &v47[*((_QWORD *)a2 + 12) + v26];
  v31 = v28 + 24 * v29;
  v32 = *(_WORD *)(v31 + 20);
  *v30 = HIBYTE(v32) & 0x81 | 0x60;
  v30[1] = v32;
  v33 = *(_BYTE *)(v31 + 17) == 0;
  if (*(_BYTE *)(v31 + 18))
  {
    v34 = v28 + 24 * v29;
    v35 = 2;
    while (1)
    {
      v47 = *(_BYTE **)(v34 + 8);
      v36 = v47 ? *(const void **)v34 : 0;
      *(_WORD *)&v30[v35] = bswap32(v47) >> 16;
      v37 = v35 + 2;
      memcpy(&v30[v35 + 2], v36, (size_t)v47);
      v38 = (void **)*((_QWORD *)this + 8);
      v39 = *((_QWORD *)this + 11);
      if (!*(void **)((char *)v38
                     + (((unint64_t)((v39 * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64) >> 4) & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_60;
      v40 = *((_QWORD *)this + 12) - 1;
      v41 = v39 + 1;
      *((_QWORD *)this + 11) = v41;
      *((_QWORD *)this + 12) = v40;
      if (v41 >= 0x154)
      {
        operator delete(*v38);
        *((_QWORD *)this + 8) += 8;
        *((_QWORD *)this + 11) -= 170;
      }
      v42 = (void **)*((_QWORD *)this + 2);
      v43 = *((_QWORD *)this + 5);
      if (!*(void **)((char *)v42 + ((v43 >> 5) & 0x7FFFFFFFFFFFFF8)))
        goto LABEL_60;
      v44 = *((_QWORD *)this + 6) - 1;
      v45 = v43 + 1;
      *((_QWORD *)this + 5) = v45;
      *((_QWORD *)this + 6) = v44;
      if (v45 >= 0x200)
      {
        operator delete(*v42);
        *((_QWORD *)this + 2) += 8;
        *((_QWORD *)this + 5) -= 256;
      }
      v35 = v37 + (_DWORD)v47;
      if (!v33)
        goto LABEL_56;
      v34 = *(_QWORD *)(*((_QWORD *)this + 8) + 8 * (*((_QWORD *)this + 11) / 0xAAuLL))
          + 24 * (*((_QWORD *)this + 11) % 0xAAuLL);
      v33 = *(_BYTE *)(v34 + 17) == 0;
      if (!*(_BYTE *)(v34 + 18))
        goto LABEL_55;
    }
  }
  v35 = 2;
LABEL_55:
  if (!v33)
  {
LABEL_56:
    *((_QWORD *)a2 + 3) = v35;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)a2 + 11, (uint64_t *)(*((_QWORD *)a2 + 2) + v35));
    v82 = *((_QWORD *)a2 + 11);
    v8 = v90;
    if (v82)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)a2 + 11, (uint64_t *)(*(_QWORD *)(v82 + 8) - *((_QWORD *)a2 + 12)));
    goto LABEL_58;
  }
LABEL_65:
  v87 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_packetizer_h265.cc", 269, "is_last_fragment", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v21, v22, v23, v24, v89);
  return webrtc::RtcpFeedback::RtcpFeedback((uint64_t)v87, v88);
}

uint64_t webrtc::RtcpFeedback::RtcpFeedback(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

webrtc::RtpCodec *webrtc::RtpCodec::RtpCodec(webrtc::RtpCodec *this, const webrtc::RtpCodec *a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v18;
  char *v19;
  BOOL v20;

  *(_QWORD *)this = off_24C0BCBF0;
  v4 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_OWORD *)a2 + 2);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  v7 = *((_QWORD *)a2 + 7);
  v8 = *((_QWORD *)a2 + 8);
  v9 = v8 - v7;
  if (v8 != v7)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 2);
    if (v10 >= 0x1555555555555556)
      abort();
    v11 = (char *)operator new(v9);
    v12 = 0;
    *((_QWORD *)this + 7) = v11;
    *((_QWORD *)this + 8) = v11;
    *((_QWORD *)this + 9) = &v11[12 * v10];
    do
    {
      v13 = &v11[v12];
      v14 = *(_QWORD *)(v7 + v12);
      v13[8] = *(_BYTE *)(v7 + v12 + 8);
      *(_QWORD *)v13 = v14;
      v12 += 12;
    }
    while (v7 + v12 != v8);
    *((_QWORD *)this + 8) = &v11[v12];
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  v15 = (char *)*((_QWORD *)a2 + 10);
  v16 = (char *)a2 + 88;
  if (v15 != v16)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)this + 10, (uint64_t *)this + 11, (uint64_t)(v15 + 32), (uint64_t)(v15 + 32));
      v18 = (char *)*((_QWORD *)v15 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)*((_QWORD *)v15 + 2);
          v20 = *(_QWORD *)v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v20);
      }
      v15 = v19;
    }
    while (v19 != v16);
  }
  return this;
}

void webrtc::RtpCodec::~RtpCodec(webrtc::RtpCodec *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL webrtc::RtpCodec::IsResiliencyCodec(_BOOL8 this)
{
  unsigned __int16 **v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  int v6;
  int v7;
  unsigned __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned __int16 *v19;
  uint64_t v20;

  v1 = (unsigned __int16 **)(this + 8);
  v2 = *(unsigned __int8 *)(this + 31);
  v3 = (unsigned __int16 *)(this + 8);
  v4 = v2;
  if (*(char *)(this + 31) < 0)
  {
    v4 = *(_QWORD *)(this + 16);
    if (v4 < 0)
      goto LABEL_43;
    v3 = *v1;
    if (v4 && v3 == 0)
      goto LABEL_43;
  }
  if (v4 == 3)
  {
    v6 = *v3;
    v7 = *((unsigned __int8 *)v3 + 2);
    if (v6 == *(unsigned __int16 *)"rtx" && v7 == cricket::kRtxCodecName[2])
      return 1;
  }
  v9 = (unsigned __int16 *)(this + 8);
  v10 = *(unsigned __int8 *)(this + 31);
  if ((v2 & 0x80) != 0)
  {
    v10 = *(_QWORD *)(this + 16);
    if (v10 < 0)
      goto LABEL_43;
    v9 = *v1;
    if (v10)
    {
      if (!v9)
        goto LABEL_43;
    }
  }
  if (v10 == 3)
  {
    v11 = *v9;
    v12 = *((unsigned __int8 *)v9 + 2);
    if (v11 == (unsigned __int16)cricket::kRedCodecName && v12 == 100)
      return 1;
  }
  v14 = (unsigned __int16 *)(this + 8);
  v15 = *(unsigned __int8 *)(this + 31);
  if ((v2 & 0x80) != 0)
  {
    v15 = *(_QWORD *)(this + 16);
    if (v15 < 0)
      goto LABEL_43;
    v14 = *v1;
    if (v15)
    {
      if (!v14)
        goto LABEL_43;
    }
  }
  if (v15 == 6)
  {
    v16 = *(_DWORD *)v14;
    v17 = v14[2];
    if (v16 == *(_DWORD *)"ulpfec" && v17 == *(unsigned __int16 *)"ec")
      return 1;
  }
  if ((v2 & 0x80) != 0)
  {
    v2 = *(_QWORD *)(this + 16);
    if (v2 < 0 || (v1 = (unsigned __int16 **)*v1, v2) && !v1)
    {
LABEL_43:
      __break(1u);
      return this;
    }
  }
  if (v2 != 10)
    return 0;
  v19 = *v1;
  v20 = *((unsigned __int16 *)v1 + 4);
  return v19 == *(unsigned __int16 **)"flexfec-03" && v20 == *(unsigned __int16 *)"03";
}

uint64_t webrtc::RtpCodecCapability::RtpCodecCapability(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 44) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 29) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = this + 88;
  *(_QWORD *)this = off_24C0BCC10;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 104) = 0;
  *(_BYTE *)(this + 108) = 0;
  *(_QWORD *)(this + 112) = 0;
  return this;
}

void webrtc::RtpCodecCapability::~RtpCodecCapability(webrtc::RtpCodecCapability *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0BCC10;
  if ((*((_BYTE *)this + 112) & 1) != 0)
    operator delete(*((void **)this + 15));
  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24C0BCC10;
  if ((*((_BYTE *)this + 112) & 1) != 0)
    operator delete(*((void **)this + 15));
  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtpHeaderExtensionCapability::~RtpHeaderExtensionCapability(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *webrtc::RtpExtension::RtpExtension(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  *(_QWORD *)((char *)this + 21) = 0;
  this[2] = 0;
  return this;
}

void webrtc::RtpExtension::~RtpExtension(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t webrtc::RtpFecParameters::RtpFecParameters(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

_QWORD *webrtc::RtpRtxParameters::RtpRtxParameters(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t webrtc::RtpEncodingParameters::RtpEncodingParameters(uint64_t this)
{
  *(_BYTE *)this = 0;
  *(_BYTE *)(this + 4) = 0;
  *(_QWORD *)(this + 8) = 0x3FF0000000000000;
  *(_DWORD *)(this + 16) = 1;
  *(_BYTE *)(this + 20) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_BYTE *)(this + 28) = 0;
  *(_BYTE *)(this + 32) = 0;
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_BYTE *)(this + 56) = 0;
  *(_BYTE *)(this + 60) = 0;
  *(_BYTE *)(this + 64) = 0;
  *(_BYTE *)(this + 72) = 0;
  *(_BYTE *)(this + 80) = 0;
  *(_BYTE *)(this + 104) = 0;
  *(_BYTE *)(this + 112) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 124) = 1;
  *(_BYTE *)(this + 160) = 0;
  *(_BYTE *)(this + 264) = 0;
  *(_QWORD *)(this + 128) = 0;
  *(_QWORD *)(this + 136) = 0;
  *(_WORD *)(this + 152) = 0;
  *(_QWORD *)(this + 144) = 0;
  return this;
}

webrtc::RtpEncodingParameters *webrtc::RtpEncodingParameters::RtpEncodingParameters(webrtc::RtpEncodingParameters *this, const webrtc::RtpEncodingParameters *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  __int16 v12;

  *(_OWORD *)this = *(_OWORD *)a2;
  v4 = *((_OWORD *)a2 + 1);
  v5 = *((_OWORD *)a2 + 2);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 57) = *(_OWORD *)((char *)a2 + 57);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  *((_BYTE *)this + 80) = 0;
  v7 = (std::string *)((char *)this + 80);
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    if (*((char *)a2 + 103) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
    }
    else
    {
      v8 = *((_OWORD *)a2 + 5);
      v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 12);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_BYTE *)this + 104) = 1;
  }
  v9 = *((_QWORD *)a2 + 14);
  *(_QWORD *)((char *)this + 117) = *(_QWORD *)((char *)a2 + 117);
  *((_QWORD *)this + 14) = v9;
  v10 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = *((_WORD *)a2 + 76);
  *((_BYTE *)this + 160) = 0;
  *((_WORD *)this + 76) = v12;
  *((_BYTE *)this + 264) = 0;
  if (*((_BYTE *)a2 + 264))
  {
    webrtc::RtpCodec::RtpCodec((webrtc::RtpEncodingParameters *)((char *)this + 160), (const webrtc::RtpEncodingParameters *)((char *)a2 + 160));
    *((_BYTE *)this + 264) = 1;
  }
  return this;
}

void webrtc::RtpEncodingParameters::~RtpEncodingParameters(webrtc::RtpEncodingParameters *this)
{
  void *v2;

  if (!*((_BYTE *)this + 264))
    goto LABEL_5;
  *((_QWORD *)this + 20) = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 240, *((_QWORD *)this + 31));
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  if ((*((char *)this + 191) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 151) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(*((void **)this + 16));
    if (!*((_BYTE *)this + 104))
      return;
    goto LABEL_10;
  }
  operator delete(*((void **)this + 21));
  if (*((char *)this + 151) < 0)
    goto LABEL_9;
LABEL_6:
  if (!*((_BYTE *)this + 104))
    return;
LABEL_10:
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
}

uint64_t webrtc::RtpCodecParameters::RtpCodecParameters(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  *(_BYTE *)(this + 44) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_QWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_QWORD *)(this + 96) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 29) = 0;
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = this + 88;
  *(_QWORD *)this = off_24C0BCC30;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 104) = 0;
  return this;
}

webrtc::RtpCodec *webrtc::RtpCodecParameters::RtpCodecParameters(webrtc::RtpCodecParameters *this, const webrtc::RtpCodecParameters *a2)
{
  webrtc::RtpCodec *result;

  result = webrtc::RtpCodec::RtpCodec(this, a2);
  *(_QWORD *)result = off_24C0BCC30;
  *((_DWORD *)result + 26) = *((_DWORD *)a2 + 26);
  return result;
}

void webrtc::RtpCodecParameters::~RtpCodecParameters(webrtc::RtpCodecParameters *this)
{
  void *v2;

  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 80, *((_QWORD *)this + 11));
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x20BD0ADECLL);
}

double webrtc::RtpCapabilities::RtpCapabilities(webrtc::RtpCapabilities *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void webrtc::RtpCapabilities::~RtpCapabilities(webrtc::RtpCapabilities *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void *v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (**v11)(_QWORD);
  BOOL v12;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *((_QWORD *)this + 4);
    v5 = (void *)*((_QWORD *)this + 3);
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 17) < 0)
          operator delete(*(void **)(v4 - 40));
        v4 -= 40;
      }
      while (v4 != v3);
      v5 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v3;
    operator delete(v5);
  }
  v6 = *(void (****)(_QWORD))this;
  if (*(_QWORD *)this)
  {
    v7 = (void (***)(_QWORD))*((_QWORD *)this + 1);
    v8 = *(void **)this;
    if (v7 != v6)
    {
      v9 = v7 - 20;
      v10 = v7 - 20;
      do
      {
        v11 = *v10;
        v10 -= 20;
        (*v11)(v9);
        v12 = v9 == v6;
        v9 = v10;
      }
      while (!v12);
      v8 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v6;
    operator delete(v8);
  }
}

double webrtc::RtpParameters::RtpParameters(webrtc::RtpParameters *this)
{
  double result;

  *((_BYTE *)this + 124) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 76) = 256;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 105) = 0u;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 164) = 0;
  return result;
}

std::string *webrtc::RtpParameters::RtpParameters(std::string *this, const webrtc::RtpParameters *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  std::string *v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  webrtc::RtpCodec *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  std::string *v38;
  const std::string::value_type **v39;
  __int128 v40;
  uint64_t v41;
  std::string *v42;
  const std::string::value_type **v43;
  __int128 v44;
  char *v45;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      this[2].__r_.__value_.__r.__words[0] = 0;
      this[2].__r_.__value_.__l.__size_ = 0;
      this[2].__r_.__value_.__r.__words[2] = 0;
      v7 = *((_QWORD *)a2 + 6);
      v8 = *((_QWORD *)a2 + 7);
      v9 = v8 - v7;
      if (v8 == v7)
        goto LABEL_4;
LABEL_10:
      v18 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 4);
      if (v18 >= 0x24924924924924ALL)
        goto LABEL_37;
      v19 = (char *)operator new(v9);
      v20 = 0;
      this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v19[112 * v18];
      do
      {
        v21 = webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v19[v20], (const webrtc::RtpCodec *)(v7 + v20));
        *(_QWORD *)v21 = off_24C0BCC30;
        *((_DWORD *)v21 + 26) = *(_DWORD *)(v7 + v20 + 104);
        v20 += 112;
      }
      while (v7 + v20 != v8);
      this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&v19[v20];
      this[3].__r_.__value_.__r.__words[0] = 0;
      this[3].__r_.__value_.__l.__size_ = 0;
      this[3].__r_.__value_.__r.__words[2] = 0;
      v10 = *((_QWORD *)a2 + 9);
      v11 = *((_QWORD *)a2 + 10);
      v12 = v11 - v10;
      if (v11 == v10)
        goto LABEL_5;
      goto LABEL_14;
    }
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v7 = *((_QWORD *)a2 + 6);
  v8 = *((_QWORD *)a2 + 7);
  v9 = v8 - v7;
  if (v8 != v7)
    goto LABEL_10;
LABEL_4:
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  v10 = *((_QWORD *)a2 + 9);
  v11 = *((_QWORD *)a2 + 10);
  v12 = v11 - v10;
  if (v11 == v10)
  {
LABEL_5:
    this[4].__r_.__value_.__r.__words[0] = 0;
    this[4].__r_.__value_.__l.__size_ = 0;
    this[4].__r_.__value_.__r.__words[2] = 0;
    v13 = *((_QWORD *)a2 + 12);
    v14 = *((_QWORD *)a2 + 13);
    v15 = v14 - v13;
    if (v14 == v13)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_14:
  if (v12 < 0)
    goto LABEL_37;
  v22 = v12 >> 5;
  v23 = (char *)operator new(v12);
  v24 = 0;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
  this[3].__r_.__value_.__l.__size_ = (std::string::size_type)v23;
  this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)&v23[32 * v22];
  do
  {
    v27 = (std::string *)&v23[v24];
    v28 = (__int128 *)(v10 + v24);
    if (*(char *)(v10 + v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
    }
    else
    {
      v29 = *v28;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)v28 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
    }
    v25 = &v23[v24];
    v26 = *(_DWORD *)(v10 + v24 + 24);
    v25[28] = *(_BYTE *)(v10 + v24 + 28);
    *((_DWORD *)v25 + 6) = v26;
    v24 += 32;
  }
  while (v10 + v24 != v11);
  this[3].__r_.__value_.__l.__size_ = (std::string::size_type)&v23[v24];
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  v13 = *((_QWORD *)a2 + 12);
  v14 = *((_QWORD *)a2 + 13);
  v15 = v14 - v13;
  if (v14 != v13)
  {
LABEL_21:
    v30 = 0xF0F0F0F0F0F0F0F1 * (v15 >> 4);
    if (v30 < 0xF0F0F0F0F0F0F1)
    {
      v31 = operator new(v15);
      v32 = 0;
      this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v31;
      this[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&v31[272 * v30];
      do
      {
        v33 = &v31[v32];
        v34 = v13 + v32;
        *(_OWORD *)v33 = *(_OWORD *)(v13 + v32);
        v35 = *(_OWORD *)(v13 + v32 + 16);
        v36 = *(_OWORD *)(v13 + v32 + 32);
        v37 = *(_OWORD *)(v13 + v32 + 48);
        *(_OWORD *)(v33 + 57) = *(_OWORD *)(v13 + v32 + 57);
        *((_OWORD *)v33 + 2) = v36;
        *((_OWORD *)v33 + 3) = v37;
        *((_OWORD *)v33 + 1) = v35;
        v31[v32 + 80] = 0;
        v38 = (std::string *)&v31[v32 + 80];
        v33[104] = 0;
        if (*(_BYTE *)(v13 + v32 + 104))
        {
          v39 = (const std::string::value_type **)(v34 + 80);
          if (*(char *)(v34 + 103) < 0)
          {
            std::string::__init_copy_ctor_external(v38, *v39, *(_QWORD *)(v13 + v32 + 88));
          }
          else
          {
            v40 = *(_OWORD *)v39;
            *(_QWORD *)&v31[v32 + 96] = *(_QWORD *)(v34 + 96);
            *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v40;
          }
          v33[104] = 1;
        }
        v41 = *(_QWORD *)(v34 + 112);
        *(_QWORD *)(v33 + 117) = *(_QWORD *)(v34 + 117);
        *((_QWORD *)v33 + 14) = v41;
        v42 = (std::string *)(v33 + 128);
        v43 = (const std::string::value_type **)(v34 + 128);
        if (*(char *)(v34 + 151) < 0)
        {
          std::string::__init_copy_ctor_external(v42, *v43, *(_QWORD *)(v13 + v32 + 136));
        }
        else
        {
          v44 = *(_OWORD *)v43;
          *((_QWORD *)v33 + 18) = *(_QWORD *)(v34 + 144);
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v44;
        }
        v45 = &v31[v32];
        *((_WORD *)v45 + 76) = *(_WORD *)(v34 + 152);
        v31[v32 + 160] = 0;
        v45[264] = 0;
        if (*(_BYTE *)(v34 + 264))
        {
          webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v31[v32 + 160], (const webrtc::RtpCodec *)(v13 + v32 + 160));
          v45[264] = 1;
        }
        v32 += 272;
      }
      while (v34 + 272 != v14);
      this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&v31[v32];
      this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
      v16 = (std::string *)((char *)this + 128);
      if ((*((char *)a2 + 151) & 0x80000000) == 0)
        goto LABEL_7;
LABEL_35:
      std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
      goto LABEL_36;
    }
LABEL_37:
    abort();
  }
LABEL_6:
  this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
  v16 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
    goto LABEL_35;
LABEL_7:
  v17 = *((_OWORD *)a2 + 8);
  v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 18);
  *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
LABEL_36:
  LOWORD(this[6].__r_.__value_.__r.__words[1]) = *((_WORD *)a2 + 76);
  this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 20);
  return this;
}

void webrtc::RtpParameters::~RtpParameters(void **this)
{
  char *v2;
  void **v3;
  char *v4;
  char *v5;
  char *v6;
  void **v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void (**v13)(char *);
  BOOL v14;

  if (*((char *)this + 151) < 0)
  {
    operator delete(this[16]);
    v2 = (char *)this[12];
    if (!v2)
    {
LABEL_3:
      v3 = (void **)this[9];
      if (!v3)
        goto LABEL_4;
LABEL_13:
      v7 = (void **)this[10];
      if (v7 == v3)
      {
        this[10] = v3;
        operator delete(v3);
        v4 = (char *)this[6];
        if (v4)
          goto LABEL_20;
      }
      else
      {
        do
        {
          if (*((char *)v7 - 9) < 0)
            operator delete(*(v7 - 4));
          v7 -= 4;
        }
        while (v7 != v3);
        v8 = this[9];
        this[10] = v3;
        operator delete(v8);
        v4 = (char *)this[6];
        if (v4)
          goto LABEL_20;
      }
LABEL_5:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_26;
    }
  }
  else
  {
    v2 = (char *)this[12];
    if (!v2)
      goto LABEL_3;
  }
  v5 = (char *)this[13];
  v6 = v2;
  if (v5 != v2)
  {
    do
      webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v5 - 272));
    while (v5 != v2);
    v6 = (char *)this[12];
  }
  this[13] = v2;
  operator delete(v6);
  v3 = (void **)this[9];
  if (v3)
    goto LABEL_13;
LABEL_4:
  v4 = (char *)this[6];
  if (!v4)
    goto LABEL_5;
LABEL_20:
  v9 = (char *)this[7];
  v10 = v4;
  if (v9 != v4)
  {
    v11 = v9 - 112;
    v12 = v9 - 112;
    do
    {
      v13 = *(void (***)(char *))v12;
      v12 -= 112;
      (*v13)(v11);
      v14 = v11 == v4;
      v11 = v12;
    }
    while (!v14);
    v10 = (char *)this[6];
  }
  this[7] = v4;
  operator delete(v10);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_27:
    operator delete(*this);
    return;
  }
LABEL_26:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_27;
}

unint64_t webrtc::RtpExtension::ToString@<X0>(webrtc::RtpExtension *this@<X0>, char *a2@<X8>)
{
  unint64_t v4;
  webrtc::RtpExtension *v5;
  size_t v6;
  size_t v7;
  char *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  unint64_t result;
  size_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *__s;
  uint64_t v21;
  size_t v22;
  char __src;
  char v24[256];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  __s = v24;
  v21 = 256;
  strcpy(v24, "{uri: ");
  if (*((char *)this + 23) < 0)
  {
    v4 = *((_QWORD *)this + 1);
    if ((v4 & 0x8000000000000000) != 0 || (v5 = *(webrtc::RtpExtension **)this, v4) && !v5)
    {
LABEL_31:
      __break(1u);
LABEL_32:
      abort();
    }
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 23);
    v5 = this;
  }
  if (v4 >= 0xF9)
    v6 = 249;
  else
    v6 = v4;
  memcpy(&v24[6], v5, v6);
  v7 = v6 + 6;
  v8 = &v24[v6 + 6];
  *v8 = 0;
  if (249 - v6 >= 6)
    v9 = 6;
  else
    v9 = 249 - v6;
  memcpy(v8, ", id: ", v9);
  v22 = v9 + v7;
  v24[v22] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 6));
  if (*((_BYTE *)this + 28))
  {
    if (v21 + ~v22 >= 9)
      v10 = 9;
    else
      v10 = v21 + ~v22;
    memcpy(&__s[v22], ", encrypt", v10);
    v22 += v10;
    __s[v22] = 0;
  }
  __src = 125;
  v11 = v21;
  v12 = v22 + 1;
  memcpy(&__s[v22], &__src, v21 != v22 + 1);
  v13 = v22;
  if (v11 != v12)
    v13 = v22 + 1;
  v22 = v13;
  __s[v13] = 0;
  v14 = __s;
  if (!__s)
    goto LABEL_31;
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_32;
  v16 = result;
  if (result <= 0x16)
  {
    a2[23] = result;
    v17 = &a2[result];
    if (a2 > v14)
      goto LABEL_28;
    goto LABEL_27;
  }
  v18 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v18 = result | 7;
  v19 = v18 + 1;
  result = (unint64_t)operator new(v18 + 1);
  *((_QWORD *)a2 + 1) = v16;
  *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
  *(_QWORD *)a2 = result;
  a2 = (char *)result;
  v17 = (char *)(result + v16);
  if (result <= (unint64_t)v14)
  {
LABEL_27:
    if (v17 <= v14)
      goto LABEL_28;
    goto LABEL_31;
  }
LABEL_28:
  if (v16)
    result = (unint64_t)memmove(a2, v14, v16);
  *v17 = 0;
  return result;
}

uint64_t webrtc::RtpExtension::IsSupportedForAudio(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v52;
  size_t v53;

  v2 = 0;
  switch(a2)
  {
    case '#':
      v6 = *a1 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid"
        && a1[1] == *(_QWORD *)":params:rtp-hdrext:sdes:mid"
        && a1[2] == *(_QWORD *)"rtp-hdrext:sdes:mid"
        && a1[3] == *(_QWORD *)"xt:sdes:mid"
        && *(uint64_t *)((char *)a1 + 27) == *(_QWORD *)"sdes:mid";
      goto LABEL_69;
    case '+':
      v7 = *a1;
      v8 = a1[1];
      v9 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:ssrc-audio-level";
      v10 = *(_QWORD *)":params:rtp-hdrext:ssrc-audio-level";
      v11 = a1[2];
      v12 = a1[3];
      v13 = *(_QWORD *)"rtp-hdrext:ssrc-audio-level";
      v14 = *(_QWORD *)"xt:ssrc-audio-level";
      v15 = a1[4];
      v16 = *(_QWORD *)"audio-level";
      v17 = *(uint64_t *)((char *)a1 + 35);
      v18 = *(_QWORD *)"io-level";
      goto LABEL_16;
    case '-':
      v7 = *a1;
      v8 = a1[1];
      v9 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id";
      v10 = *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id";
      v11 = a1[2];
      v12 = a1[3];
      v13 = *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id";
      v14 = *(_QWORD *)"xt:sdes:rtp-stream-id";
      v15 = a1[4];
      v16 = *(_QWORD *)"rtp-stream-id";
      v17 = *(uint64_t *)((char *)a1 + 37);
      v18 = *(_QWORD *)"tream-id";
LABEL_16:
      v22 = v7 == v9 && v8 == v10 && v11 == v13 && v12 == v14 && v15 == v16;
      goto LABEL_63;
    case '6':
      v23 = *a1;
      v24 = a1[1];
      v25 = a1[2];
      v26 = a1[3];
      v28 = a1[4];
      v27 = a1[5];
      v17 = *(uint64_t *)((char *)a1 + 46);
      v18 = *(_QWORD *)"tream-id";
      v22 = v23 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id"
         && v24 == *(_QWORD *)":params:rtp-hdrext:sdes:repaired-rtp-stream-id"
         && v25 == *(_QWORD *)"rtp-hdrext:sdes:repaired-rtp-stream-id"
         && v26 == *(_QWORD *)"xt:sdes:repaired-rtp-stream-id"
         && v28 == *(_QWORD *)"repaired-rtp-stream-id"
         && v27 == *(_QWORD *)"-rtp-stream-id";
      goto LABEL_63;
    case ':':
      v33 = *a1;
      v34 = a1[1];
      v35 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time";
      v36 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time";
      v37 = a1[2];
      v38 = a1[3];
      v39 = *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time";
      v40 = *(_QWORD *)"periments/rtp-hdrext/abs-send-time";
      v42 = a1[4];
      v41 = a1[5];
      v43 = *(_QWORD *)"s/rtp-hdrext/abs-send-time";
      v44 = *(_QWORD *)"rext/abs-send-time";
      v45 = a1[6];
      v46 = *(_QWORD *)"-send-time";
      v17 = *((unsigned __int16 *)a1 + 28);
      v18 = *(unsigned __int16 *)"me";
      goto LABEL_45;
    case '=':
      v33 = *a1;
      v34 = a1[1];
      v35 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
      v36 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
      v37 = a1[2];
      v38 = a1[3];
      v39 = *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time";
      v40 = *(_QWORD *)"periments/rtp-hdrext/abs-capture-time";
      v42 = a1[4];
      v41 = a1[5];
      v43 = *(_QWORD *)"s/rtp-hdrext/abs-capture-time";
      v44 = *(_QWORD *)"rext/abs-capture-time";
      v45 = a1[6];
      v46 = *(_QWORD *)"-capture-time";
      v17 = *(uint64_t *)((char *)a1 + 53);
      v18 = *(_QWORD *)"ure-time";
LABEL_45:
      v22 = v33 == v35 && v34 == v36 && v37 == v39 && v38 == v40 && v42 == v43 && v41 == v44 && v45 == v46;
LABEL_63:
      v6 = v22 && v17 == v18;
      goto LABEL_69;
    case 'A':
      v52 = "http://www.webrtc.org/experiments/rtp-hdrext/transport-wide-cc-02";
      v53 = 65;
      goto LABEL_68;
    case 'I':
      v52 = "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01";
      v53 = 73;
LABEL_68:
      v6 = memcmp(a1, v52, v53) == 0;
LABEL_69:
      v2 = v6;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t webrtc::RtpExtension::IsSupportedForVideo(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v77;
  size_t v78;

  v2 = 0;
  switch(a2)
  {
    case 26:
      return *a1 == *(_QWORD *)"urn:3gpp:video-orientation"
          && a1[1] == *(_QWORD *)":video-orientation"
          && a1[2] == *(_QWORD *)"rientation"
          && *((unsigned __int16 *)a1 + 12) == (unint64_t)*(unsigned __int16 *)"on";
    case 34:
      v6 = *a1;
      v7 = a1[1];
      v8 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:toffset";
      v9 = *(_QWORD *)":params:rtp-hdrext:toffset";
      v10 = a1[2];
      v11 = a1[3];
      v12 = *(_QWORD *)"rtp-hdrext:toffset";
      v13 = *(_QWORD *)"xt:toffset";
      v14 = *((unsigned __int16 *)a1 + 16);
      v15 = *(unsigned __int16 *)"et";
      return v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15;
    case 35:
      v6 = *a1;
      v7 = a1[1];
      v8 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:mid";
      v9 = *(_QWORD *)":params:rtp-hdrext:sdes:mid";
      v10 = a1[2];
      v11 = a1[3];
      v12 = *(_QWORD *)"rtp-hdrext:sdes:mid";
      v13 = *(_QWORD *)"xt:sdes:mid";
      v14 = *(uint64_t *)((char *)a1 + 27);
      v15 = *(_QWORD *)"sdes:mid";
      return v6 == v8 && v7 == v9 && v10 == v12 && v11 == v13 && v14 == v15;
    case 45:
      v19 = *a1;
      v20 = a1[1];
      v21 = a1[2];
      v22 = a1[3];
      v23 = a1[4];
      v24 = *(uint64_t *)((char *)a1 + 37);
      return v19 == *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id"
          && v20 == *(_QWORD *)":params:rtp-hdrext:sdes:rtp-stream-id"
          && v21 == *(_QWORD *)"rtp-hdrext:sdes:rtp-stream-id"
          && v22 == *(_QWORD *)"xt:sdes:rtp-stream-id"
          && v23 == *(_QWORD *)"rtp-stream-id"
          && v24 == *(_QWORD *)"tream-id";
    case 54:
      v29 = *a1;
      v30 = a1[1];
      v31 = *(_QWORD *)"urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id";
      v32 = *(_QWORD *)":params:rtp-hdrext:sdes:repaired-rtp-stream-id";
      v33 = a1[2];
      v34 = a1[3];
      v35 = *(_QWORD *)"rtp-hdrext:sdes:repaired-rtp-stream-id";
      v36 = *(_QWORD *)"xt:sdes:repaired-rtp-stream-id";
      v38 = a1[4];
      v37 = a1[5];
      v39 = *(_QWORD *)"repaired-rtp-stream-id";
      v40 = *(_QWORD *)"-rtp-stream-id";
      v41 = *(uint64_t *)((char *)a1 + 46);
      v42 = *(_QWORD *)"tream-id";
      return v29 == v31 && v30 == v32 && v33 == v35 && v34 == v36 && v38 == v39 && v37 == v40 && v41 == v42;
    case 56:
      v29 = *a1;
      v30 = a1[1];
      v31 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/color-space";
      v32 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/color-space";
      v33 = a1[2];
      v34 = a1[3];
      v35 = *(_QWORD *)"c.org/experiments/rtp-hdrext/color-space";
      v36 = *(_QWORD *)"periments/rtp-hdrext/color-space";
      v38 = a1[4];
      v37 = a1[5];
      v39 = *(_QWORD *)"s/rtp-hdrext/color-space";
      v40 = *(_QWORD *)"rext/color-space";
      v41 = a1[6];
      v42 = *(_QWORD *)"or-space";
      return v29 == v31 && v30 == v32 && v33 == v35 && v34 == v36 && v38 == v39 && v37 == v40 && v41 == v42;
    case 57:
      v48 = *a1;
      v49 = a1[1];
      v50 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/video-timing";
      v51 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/video-timing";
      v52 = a1[2];
      v53 = a1[3];
      v54 = *(_QWORD *)"c.org/experiments/rtp-hdrext/video-timing";
      v55 = *(_QWORD *)"periments/rtp-hdrext/video-timing";
      v57 = a1[4];
      v56 = a1[5];
      v58 = *(_QWORD *)"s/rtp-hdrext/video-timing";
      v59 = *(_QWORD *)"rext/video-timing";
      v60 = a1[6];
      v61 = *(_QWORD *)"eo-timing";
      v62 = *((unsigned __int8 *)a1 + 56);
      v63 = webrtc::RtpExtension::kVideoTimingUri[56];
      return v48 == v50
          && v49 == v51
          && v52 == v54
          && v53 == v55
          && v57 == v58
          && v56 == v59
          && v60 == v61
          && v62 == v63;
    case 58:
      if (*a1 == *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time"
        && a1[1] == *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-send-time"
        && a1[2] == *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-send-time"
        && a1[3] == *(_QWORD *)"periments/rtp-hdrext/abs-send-time"
        && a1[4] == *(_QWORD *)"s/rtp-hdrext/abs-send-time"
        && a1[5] == *(_QWORD *)"rext/abs-send-time"
        && a1[6] == *(_QWORD *)"-send-time"
        && *((unsigned __int16 *)a1 + 28) == (unint64_t)*(unsigned __int16 *)"me")
      {
        return 1;
      }
      v48 = *a1;
      v49 = a1[1];
      v50 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/playout-delay";
      v51 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/playout-delay";
      v52 = a1[2];
      v53 = a1[3];
      v54 = *(_QWORD *)"c.org/experiments/rtp-hdrext/playout-delay";
      v55 = *(_QWORD *)"periments/rtp-hdrext/playout-delay";
      v57 = a1[4];
      v56 = a1[5];
      v58 = *(_QWORD *)"s/rtp-hdrext/playout-delay";
      v59 = *(_QWORD *)"rext/playout-delay";
      v60 = a1[6];
      v61 = *(_QWORD *)"yout-delay";
      v62 = *((unsigned __int16 *)a1 + 28);
      v63 = *(unsigned __int16 *)"ay";
      return v48 == v50
          && v49 == v51
          && v52 == v54
          && v53 == v55
          && v57 == v58
          && v56 == v59
          && v60 == v61
          && v62 == v63;
    case 61:
      v48 = *a1;
      v49 = a1[1];
      v50 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
      v51 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/abs-capture-time";
      v52 = a1[2];
      v53 = a1[3];
      v54 = *(_QWORD *)"c.org/experiments/rtp-hdrext/abs-capture-time";
      v55 = *(_QWORD *)"periments/rtp-hdrext/abs-capture-time";
      v57 = a1[4];
      v56 = a1[5];
      v58 = *(_QWORD *)"s/rtp-hdrext/abs-capture-time";
      v59 = *(_QWORD *)"rext/abs-capture-time";
      v60 = a1[6];
      v61 = *(_QWORD *)"-capture-time";
      v62 = *(uint64_t *)((char *)a1 + 53);
      v63 = *(_QWORD *)"ure-time";
      return v48 == v50
          && v49 == v51
          && v52 == v54
          && v53 == v55
          && v57 == v58
          && v56 == v59
          && v60 == v61
          && v62 == v63;
    case 63:
      v48 = *a1;
      v49 = a1[1];
      v50 = *(_QWORD *)"http://www.webrtc.org/experiments/rtp-hdrext/video-content-type";
      v51 = *(_QWORD *)"ww.webrtc.org/experiments/rtp-hdrext/video-content-type";
      v52 = a1[2];
      v53 = a1[3];
      v54 = *(_QWORD *)"c.org/experiments/rtp-hdrext/video-content-type";
      v55 = *(_QWORD *)"periments/rtp-hdrext/video-content-type";
      v57 = a1[4];
      v56 = a1[5];
      v58 = *(_QWORD *)"s/rtp-hdrext/video-content-type";
      v59 = *(_QWORD *)"rext/video-content-type";
      v60 = a1[6];
      v61 = *(_QWORD *)"eo-content-type";
      v62 = *(uint64_t *)((char *)a1 + 55);
      v63 = *(_QWORD *)"ent-type";
      return v48 == v50
          && v49 == v51
          && v52 == v54
          && v53 == v55
          && v57 == v58
          && v56 == v59
          && v60 == v61
          && v62 == v63;
    case 65:
      v77 = "http://www.webrtc.org/experiments/rtp-hdrext/transport-wide-cc-02";
      v78 = 65;
      return memcmp(a1, v77, v78) == 0;
    case 68:
      v77 = "http://www.webrtc.org/experiments/rtp-hdrext/video-frame-tracking-id";
      v78 = 68;
      return memcmp(a1, v77, v78) == 0;
    case 70:
      v77 = "http://www.webrtc.org/experiments/rtp-hdrext/video-layers-allocation00";
      v78 = 70;
      return memcmp(a1, v77, v78) == 0;
    case 72:
      v77 = "http://www.webrtc.org/experiments/rtp-hdrext/generic-frame-descriptor-00";
      v78 = 72;
      return memcmp(a1, v77, v78) == 0;
    case 73:
      v77 = "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01";
      v78 = 73;
      return memcmp(a1, v77, v78) == 0;
    case 87:
      v77 = "https://aomediacodec.github.io/av1-rtp-spec/#dependency-descriptor-rtp-header-extension";
      v78 = 87;
      return memcmp(a1, v77, v78) == 0;
    default:
      return v2;
  }
}

void webrtc::RtpExtension::DeduplicateHeaderExtensions(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  unsigned __int8 v9;
  const std::string::value_type *v10;
  size_t v11;
  char *i;
  uint64_t v13;
  char *v14;
  __int128 v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  const std::string::value_type *v22;
  size_t v23;
  char *j;
  uint64_t v25;
  char *v26;
  __int128 v28;
  int v29;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v5 = *a1;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_39;
  }
  v7 = a1[1];
  if (v5 != v7)
  {
    v8 = 0;
    while (1)
    {
      if (*(_BYTE *)(v5 + 28))
      {
        v9 = *(_BYTE *)(v5 + 23);
        v10 = (const std::string::value_type *)v5;
        v11 = v9;
        if ((char)v9 < 0)
        {
          v11 = *(_QWORD *)(v5 + 8);
          if ((v11 & 0x8000000000000000) != 0 || (v10 = *(const std::string::value_type **)v5, v11) && !v10)
          {
LABEL_68:
            __break(1u);
            return;
          }
        }
        for (i = *(char **)a3; i != v8; i += 32)
        {
          if (i[23] < 0)
          {
            v13 = *((_QWORD *)i + 1);
            if (v13 < 0)
              goto LABEL_68;
            v14 = *(char **)i;
            if (v13 && v14 == 0)
              goto LABEL_68;
          }
          else
          {
            v13 = i[23];
            v14 = i;
          }
          if (v11 == v13 && !memcmp(v10, v14, v11))
            goto LABEL_6;
        }
        if ((unint64_t)v8 >= *(_QWORD *)(a3 + 16))
        {
          v8 = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)a3, v5);
        }
        else
        {
          if (!v8)
            goto LABEL_68;
          if ((v9 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v8, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
          }
          else
          {
            v16 = *(_OWORD *)v5;
            *((_QWORD *)v8 + 2) = *(_QWORD *)(v5 + 16);
            *(_OWORD *)v8 = v16;
          }
          v17 = *(_DWORD *)(v5 + 24);
          v8[28] = *(_BYTE *)(v5 + 28);
          *((_DWORD *)v8 + 6) = v17;
          v8 += 32;
        }
        *(_QWORD *)(a3 + 8) = v8;
      }
LABEL_6:
      v5 += 32;
      if (v5 == v7)
        goto LABEL_33;
    }
  }
  v8 = 0;
LABEL_33:
  if (a2 != 2)
  {
    v5 = *a1;
LABEL_39:
    v20 = a1[1];
    while (v5 != v20)
    {
      if (!*(_BYTE *)(v5 + 28))
      {
        v21 = *(_BYTE *)(v5 + 23);
        v22 = (const std::string::value_type *)v5;
        v23 = v21;
        if ((char)v21 < 0)
        {
          v23 = *(_QWORD *)(v5 + 8);
          if ((v23 & 0x8000000000000000) != 0)
            goto LABEL_68;
          v22 = *(const std::string::value_type **)v5;
          if (v23)
          {
            if (!v22)
              goto LABEL_68;
          }
        }
        for (j = *(char **)a3; j != v8; j += 32)
        {
          if (j[23] < 0)
          {
            v25 = *((_QWORD *)j + 1);
            if (v25 < 0)
              goto LABEL_68;
            v26 = *(char **)j;
            if (v25 && v26 == 0)
              goto LABEL_68;
          }
          else
          {
            v25 = j[23];
            v26 = j;
          }
          if (v23 == v25 && !memcmp(v22, v26, v23))
            goto LABEL_42;
        }
        if ((unint64_t)v8 >= *(_QWORD *)(a3 + 16))
        {
          v8 = std::vector<webrtc::RtpExtension>::__push_back_slow_path<webrtc::RtpExtension const&>((char **)a3, v5);
        }
        else
        {
          if (!v8)
            goto LABEL_68;
          if ((v21 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v8, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
          }
          else
          {
            v28 = *(_OWORD *)v5;
            *((_QWORD *)v8 + 2) = *(_QWORD *)(v5 + 16);
            *(_OWORD *)v8 = v28;
          }
          v29 = *(_DWORD *)(v5 + 24);
          v8[28] = *(_BYTE *)(v5 + 28);
          *((_DWORD *)v8 + 6) = v29;
          v8 += 32;
        }
        *(_QWORD *)(a3 + 8) = v8;
      }
LABEL_42:
      v5 += 32;
    }
  }
  v18 = 126 - 2 * __clz((uint64_t)&v8[-*(_QWORD *)a3] >> 5);
  if (v8 == *(char **)a3)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,false>(*(_QWORD *)a3, (unint64_t)v8, v19, 1);
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,false>(unint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  BOOL v4;
  unint64_t v5;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  size_t v19;
  const std::string::value_type *v20;
  size_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  size_t v34;
  __int128 v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  BOOL v42;
  std::string *v43;
  size_t v44;
  size_t v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  char v49;
  int v50;
  BOOL v51;
  char v52;
  char *v53;
  char *v54;
  char v55;
  unint64_t v56;
  size_t v57;
  char *v58;
  std::string *v59;
  size_t v60;
  size_t v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  BOOL v66;
  char v67;
  size_t v68;
  char *v69;
  std::string *v70;
  size_t v71;
  size_t v72;
  int v73;
  unsigned int v74;
  BOOL v75;
  int v76;
  BOOL v77;
  unint64_t v78;
  size_t v79;
  __int128 v80;
  BOOL v81;
  unsigned int v82;
  char *v83;
  char v84;
  size_t v85;
  char *v86;
  std::string *v87;
  size_t v88;
  size_t v89;
  int v90;
  unsigned int v91;
  BOOL v92;
  int v93;
  BOOL v94;
  char *v95;
  char v96;
  size_t v97;
  char *v98;
  std::string *v99;
  size_t v100;
  size_t v101;
  int v102;
  unsigned int v103;
  BOOL v104;
  int v105;
  BOOL v106;
  std::string *v107;
  char v108;
  __int128 v109;
  const std::string::value_type *v110;
  size_t v111;
  int v112;
  __int128 v113;
  std::string *v114;
  size_t v115;
  int v116;
  char v117;
  __int128 v118;
  int v119;
  std::string *v120;
  std::string::size_type v121;
  size_t v122;
  std::string *v123;
  size_t v124;
  int v125;
  std::string::size_type v126;
  std::string::size_type v127;
  BOOL v128;
  char v129;
  char *v130;
  char v131;
  std::string *v132;
  size_t v133;
  uint64_t v134;
  size_t v135;
  char *v136;
  size_t v137;
  int v138;
  BOOL v139;
  unsigned int v140;
  BOOL v141;
  int v142;
  BOOL v143;
  unsigned int v144;
  char v145;
  int v146;
  BOOL v147;
  char v148;
  char *v149;
  std::string *v150;
  size_t v151;
  size_t v152;
  char *v153;
  size_t v154;
  int v155;
  char v156;
  BOOL v157;
  unsigned int v158;
  BOOL v159;
  int v160;
  BOOL v161;
  BOOL v162;
  char v163;
  char *v164;
  char v165;
  std::string *v166;
  size_t v167;
  uint64_t v168;
  size_t v169;
  char *v170;
  size_t v171;
  int v172;
  unsigned int v173;
  BOOL v174;
  int v175;
  BOOL v176;
  __int128 v177;
  BOOL v178;
  char v179;
  unsigned int v180;
  char *v181;
  char v182;
  std::string *v183;
  size_t v184;
  size_t v185;
  char *v186;
  size_t v187;
  int v188;
  unsigned int v189;
  BOOL v190;
  int v191;
  BOOL v192;
  char *v193;
  char v194;
  std::string *v195;
  size_t v196;
  size_t v197;
  char *v198;
  size_t v199;
  int v200;
  unsigned int v201;
  BOOL v202;
  int v203;
  BOOL v204;
  std::string *v205;
  char v206;
  __int128 v207;
  const std::string::value_type *v208;
  size_t v209;
  int v210;
  __int128 v211;
  std::string *v212;
  size_t v213;
  int v214;
  size_t v215;
  std::string *v216;
  const void **v217;
  unint64_t v218;
  int64_t v219;
  std::string *v220;
  size_t v221;
  int v222;
  int64_t v223;
  uint64_t v224;
  std::string *v225;
  unint64_t v226;
  char *v227;
  BOOL v228;
  unint64_t v229;
  std::string::size_type *p_size;
  BOOL v231;
  size_t v232;
  int v233;
  size_t v234;
  char *v235;
  BOOL v236;
  std::string *v237;
  const std::string::value_type *v238;
  size_t v239;
  char *v240;
  int *v241;
  size_t v242;
  int v243;
  __int128 v244;
  unsigned int v245;
  unsigned int v246;
  BOOL v247;
  char v248;
  int v249;
  BOOL v250;
  int v251;
  std::string *v252;
  char v253;
  std::string *v254;
  char v255;
  __int128 v256;
  const std::string::value_type *v257;
  size_t v258;
  int data;
  uint64_t v260;
  uint64_t v261;
  size_t v262;
  char *v263;
  BOOL v264;
  char *v265;
  size_t v266;
  std::string::size_type *v267;
  size_t v268;
  int v269;
  int v270;
  size_t v271;
  char *v272;
  unsigned int v273;
  unsigned int v274;
  BOOL v275;
  char v276;
  unsigned int v277;
  unsigned int v278;
  BOOL v279;
  BOOL v280;
  std::string::size_type v281;
  std::string *v282;
  size_t v283;
  int v284;
  unsigned int v285;
  BOOL v286;
  int v287;
  BOOL v288;
  __int128 v289;
  unsigned int v290;
  unsigned int v291;
  BOOL v292;
  char v293;
  unsigned int v294;
  unsigned int v295;
  BOOL v296;
  char *v297;
  char *v298;
  unint64_t v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  std::string *v303;
  size_t v304;
  int v305;
  unint64_t v306;
  unsigned __int8 v307;
  const void *v308;
  size_t v309;
  BOOL v310;
  size_t v311;
  const void *v312;
  size_t v313;
  int v314;
  unsigned int v315;
  unsigned int v316;
  BOOL v317;
  char v318;
  unsigned int v319;
  unsigned int v320;
  BOOL v321;
  __int128 v322;
  unint64_t v323;
  char v324;
  unint64_t v325;
  char *v326;
  std::string *v327;
  int v328;
  size_t v329;
  char *v330;
  const std::string::value_type *v331;
  size_t v332;
  std::string::size_type v333;
  std::string *v334;
  char *v335;
  size_t v336;
  size_t v337;
  int v338;
  unsigned int v339;
  unsigned int v340;
  std::string *v341;
  __int128 v342;
  int64_t v343;
  std::string *v344;
  std::string *v345;
  __int128 v346;
  uint64_t v347;
  int v348;
  const std::string::value_type *v349;
  size_t v350;
  int v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  size_t v355;
  const std::string::value_type *v356;
  BOOL v357;
  size_t v358;
  std::string::size_type *v359;
  BOOL v360;
  size_t v361;
  int v362;
  std::string *v363;
  char v364;
  __int128 v365;
  unsigned int v366;
  unsigned int v367;
  BOOL v368;
  char v369;
  int v370;
  int v371;
  BOOL v372;
  std::string::value_type v373;
  std::string *v374;
  __int128 v375;
  __int128 v376;
  const std::string::value_type *v377;
  size_t v378;
  int v379;
  __int128 v380;
  std::string *v381;
  size_t v382;
  int v383;
  uint64_t v384;
  unint64_t v385;
  std::string *v386;
  size_t v387;
  char *v388;
  BOOL v389;
  unsigned __int8 v390;
  std::string *v391;
  size_t v392;
  size_t v393;
  int v394;
  unsigned int v395;
  unsigned int v396;
  BOOL v397;
  char v398;
  int v399;
  BOOL v400;
  std::string *v401;
  size_t v402;
  __int128 v403;
  signed int *v404;
  int v405;
  int v406;
  char v407;
  std::string *v408;
  char v409;
  __int128 v410;
  int v411;
  const std::string::value_type *v412;
  size_t v413;
  int v414;
  size_t v415;
  char *v416;
  BOOL v417;
  std::string::size_type v418;
  std::string *v419;
  size_t v420;
  int v421;
  unsigned int v422;
  BOOL v423;
  int v424;
  BOOL v425;
  int v426;
  __int128 v427;
  std::string *v428;
  size_t v429;
  int v430;
  unsigned __int8 v431;
  size_t v432;
  const void *v433;
  size_t v434;
  int v435;
  std::string *v436;
  unsigned int v437;
  unsigned int v438;
  BOOL v439;
  char v440;
  int v441;
  int v442;
  BOOL v443;
  std::string *v444;
  size_t v445;
  int v446;
  char v447;
  const std::string::value_type *v448;
  size_t v449;
  BOOL v450;
  size_t v451;
  const void *v452;
  signed int *v453;
  size_t v454;
  int v455;
  char *v456;
  unsigned int v457;
  unsigned int v458;
  BOOL v459;
  char v460;
  int v461;
  BOOL v462;
  __int128 v463;
  size_t v464;
  uint64_t v465;
  char *v466;
  char v467;
  char *v468;
  std::string *v469;
  const std::string::value_type *v470;
  size_t v471;
  std::string *v472;
  std::string::size_type size;
  char *v474;
  size_t v475;
  size_t v476;
  int v477;
  unsigned int v478;
  int v479;
  std::string *v480;
  __int128 v481;
  uint64_t v482;
  uint64_t v483;
  int v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  std::string *v488;
  int v489;
  int v490;
  int v491;
  int64_t v492;
  unint64_t v493;
  std::string *__dst;
  unsigned int __dsta;
  int __dstb;
  std::string v497;
  int v498;
  std::string::value_type v499;
  std::string v500;
  signed int v501;
  unsigned __int8 v502;

void std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  char v33;
  int v34;
  int v35;
  BOOL v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  char v46;
  int v47;
  int v48;
  BOOL v49;
  size_t v50;
  const void *v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  char v59;
  int v60;
  int v61;
  BOOL v62;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, a2, a3, a4);
  if (*(char *)(a5 + 23) < 0)
  {
    v10 = *(_QWORD *)(a5 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v11 = *(const void **)a5;
    if (v10)
    {
      if (!v11)
        goto LABEL_118;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a5 + 23);
    v11 = (const void *)a5;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    v12 = *(_QWORD *)(a4 + 8);
    if ((v12 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v13 = *(const void **)a4;
    if (v12)
    {
      if (!v13)
        goto LABEL_118;
    }
  }
  else
  {
    v12 = *(unsigned __int8 *)(a4 + 23);
    v13 = (const void *)a4;
  }
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      return;
  }
  else if (v10 == v12)
  {
    v16 = *(unsigned __int8 *)(a5 + 28);
    v17 = *(unsigned __int8 *)(a4 + 28);
    v18 = v16 == v17;
    if (v16 >= v17)
      v19 = 1;
    else
      v19 = -1;
    if (v18)
    {
      v20 = *(_DWORD *)(a5 + 24);
      v21 = *(_DWORD *)(a4 + 24);
      v22 = v20 == v21;
      v23 = v20 < v21;
      v19 = -1;
      if (!v23)
        v19 = 1;
      if (v22)
        v19 = 0;
    }
    if ((v19 & 0x80) == 0)
      return;
  }
  else if (v10 >= v12)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a4, (std::string *)a5);
  if (*(char *)(a4 + 23) < 0)
  {
    v24 = *(_QWORD *)(a4 + 8);
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v25 = *(const void **)a4;
    if (v24)
    {
      if (!v25)
        goto LABEL_118;
    }
  }
  else
  {
    v24 = *(unsigned __int8 *)(a4 + 23);
    v25 = (const void *)a4;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v26 = *(_QWORD *)(a3 + 8);
    if ((v26 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v27 = *(const void **)a3;
    if (v26)
    {
      if (!v27)
        goto LABEL_118;
    }
  }
  else
  {
    v26 = *(unsigned __int8 *)(a3 + 23);
    v27 = (const void *)a3;
  }
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0)
      return;
  }
  else if (v24 == v26)
  {
    v30 = *(unsigned __int8 *)(a4 + 28);
    v31 = *(unsigned __int8 *)(a3 + 28);
    v32 = v30 == v31;
    if (v30 >= v31)
      v33 = 1;
    else
      v33 = -1;
    if (v32)
    {
      v34 = *(_DWORD *)(a4 + 24);
      v35 = *(_DWORD *)(a3 + 24);
      v36 = v34 == v35;
      v23 = v34 < v35;
      v33 = -1;
      if (!v23)
        v33 = 1;
      if (v36)
        v33 = 0;
    }
    if ((v33 & 0x80) == 0)
      return;
  }
  else if (v24 >= v26)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a3, (std::string *)a4);
  if (*(char *)(a3 + 23) < 0)
  {
    v37 = *(_QWORD *)(a3 + 8);
    if ((v37 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v38 = *(const void **)a3;
    if (v37)
    {
      if (!v38)
        goto LABEL_118;
    }
  }
  else
  {
    v37 = *(unsigned __int8 *)(a3 + 23);
    v38 = (const void *)a3;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v39 = *(_QWORD *)(a2 + 8);
    if ((v39 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v40 = *(const void **)a2;
    if (v39)
    {
      if (!v40)
        goto LABEL_118;
    }
  }
  else
  {
    v39 = *(unsigned __int8 *)(a2 + 23);
    v40 = (const void *)a2;
  }
  if (v39 >= v37)
    v41 = v37;
  else
    v41 = v39;
  v42 = memcmp(v38, v40, v41);
  if (v42)
  {
    if ((v42 & 0x80000000) == 0)
      return;
  }
  else if (v37 == v39)
  {
    v43 = *(unsigned __int8 *)(a3 + 28);
    v44 = *(unsigned __int8 *)(a2 + 28);
    v45 = v43 == v44;
    if (v43 >= v44)
      v46 = 1;
    else
      v46 = -1;
    if (v45)
    {
      v47 = *(_DWORD *)(a3 + 24);
      v48 = *(_DWORD *)(a2 + 24);
      v49 = v47 == v48;
      v23 = v47 < v48;
      v46 = -1;
      if (!v23)
        v46 = 1;
      if (v49)
        v46 = 0;
    }
    if ((v46 & 0x80) == 0)
      return;
  }
  else if (v37 >= v39)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
  if (*(char *)(a2 + 23) < 0)
  {
    v50 = *(_QWORD *)(a2 + 8);
    if ((v50 & 0x8000000000000000) != 0)
      goto LABEL_118;
    v51 = *(const void **)a2;
    if (v50)
    {
      if (!v51)
        goto LABEL_118;
    }
  }
  else
  {
    v50 = *(unsigned __int8 *)(a2 + 23);
    v51 = (const void *)a2;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v52 = *(unsigned __int8 *)(a1 + 23);
    v53 = (const void *)a1;
    goto LABEL_98;
  }
  v52 = *(_QWORD *)(a1 + 8);
  if ((v52 & 0x8000000000000000) != 0 || (v53 = *(const void **)a1, v52) && !v53)
  {
LABEL_118:
    __break(1u);
    return;
  }
LABEL_98:
  if (v52 >= v50)
    v54 = v50;
  else
    v54 = v52;
  v55 = memcmp(v51, v53, v54);
  if (v55)
  {
    if ((v55 & 0x80000000) == 0)
      return;
LABEL_117:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    return;
  }
  if (v50 == v52)
  {
    v56 = *(unsigned __int8 *)(a2 + 28);
    v57 = *(unsigned __int8 *)(a1 + 28);
    v58 = v56 == v57;
    if (v56 >= v57)
      v59 = 1;
    else
      v59 = -1;
    if (v58)
    {
      v60 = *(_DWORD *)(a2 + 24);
      v61 = *(_DWORD *)(a1 + 24);
      v62 = v60 == v61;
      v23 = v60 < v61;
      v59 = -1;
      if (!v23)
        v59 = 1;
      if (v62)
        v59 = 0;
    }
    if (v59 < 0)
      goto LABEL_117;
  }
  else if (v50 < v52)
  {
    goto LABEL_117;
  }
}

void std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(uint64_t a1, const void **a2, uint64_t a3)
{
  size_t v6;
  const void *v7;
  size_t v8;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  size_t v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  char v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v23;
  const void *v24;
  size_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  char v30;
  int v31;
  int v32;
  BOOL v33;
  size_t v34;
  const void *v35;
  const void *v36;
  size_t v37;
  int v38;
  size_t v39;
  const void *v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;
  size_t v48;
  const void *v49;
  size_t v50;
  const void *v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  size_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  BOOL v60;
  char v61;
  int v62;
  int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  char v68;
  int v69;
  int v70;
  BOOL v71;

  v6 = *((unsigned __int8 *)a2 + 23);
  v7 = a2;
  v8 = v6;
  if (*((char *)a2 + 23) < 0)
  {
    v8 = (size_t)a2[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_146;
    v7 = *a2;
    if (v8 && v7 == 0)
      goto LABEL_146;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_146;
    v11 = *(const void **)a1;
    if (v10)
    {
      if (!v11)
        goto LABEL_146;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 23);
    v11 = (const void *)a1;
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v7, v11, v12);
  if (!v13)
  {
    if (v8 == v10)
    {
      v16 = *((unsigned __int8 *)a2 + 28);
      v17 = *(unsigned __int8 *)(a1 + 28);
      v18 = v16 == v17;
      if (v16 >= v17)
        v19 = 1;
      else
        v19 = -1;
      if (v18)
      {
        v20 = *((_DWORD *)a2 + 6);
        v21 = *(_DWORD *)(a1 + 24);
        v22 = v20 == v21;
        v23 = v20 < v21;
        v19 = -1;
        if (!v23)
          v19 = 1;
        if (v22)
          v19 = 0;
      }
      if ((v19 & 0x80) == 0)
        goto LABEL_17;
    }
    else if (v8 >= v10)
    {
      goto LABEL_17;
    }
LABEL_57:
    if (*(char *)(a3 + 23) < 0)
    {
      v34 = *(_QWORD *)(a3 + 8);
      if ((v34 & 0x8000000000000000) != 0)
        goto LABEL_146;
      v35 = *(const void **)a3;
      if (v34)
      {
        if (!v35)
          goto LABEL_146;
      }
    }
    else
    {
      v34 = *(unsigned __int8 *)(a3 + 23);
      v35 = (const void *)a3;
    }
    v36 = a2;
    if ((v6 & 0x80) != 0)
    {
      v6 = (size_t)a2[1];
      if ((v6 & 0x8000000000000000) != 0)
        goto LABEL_146;
      v36 = *a2;
      if (v6)
      {
        if (!v36)
          goto LABEL_146;
      }
    }
    if (v6 >= v34)
      v37 = v34;
    else
      v37 = v6;
    v38 = memcmp(v35, v36, v37);
    if (v38)
    {
      if ((v38 & 0x80000000) == 0)
        goto LABEL_71;
LABEL_141:
      std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a3);
      return;
    }
    if (v34 == v6)
    {
      v41 = *(unsigned __int8 *)(a3 + 28);
      v42 = *((unsigned __int8 *)a2 + 28);
      v43 = v41 == v42;
      if (v41 >= v42)
        v44 = 1;
      else
        v44 = -1;
      if (v43)
      {
        v45 = *(_DWORD *)(a3 + 24);
        v46 = *((_DWORD *)a2 + 6);
        v47 = v45 == v46;
        v23 = v45 < v46;
        v44 = -1;
        if (!v23)
          v44 = 1;
        if (v47)
          v44 = 0;
      }
      if (v44 < 0)
        goto LABEL_141;
    }
    else if (v34 < v6)
    {
      goto LABEL_141;
    }
LABEL_71:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    if (*(char *)(a3 + 23) < 0)
    {
      v39 = *(_QWORD *)(a3 + 8);
      if ((v39 & 0x8000000000000000) != 0)
        goto LABEL_146;
      v40 = *(const void **)a3;
      if (v39)
      {
        if (!v40)
          goto LABEL_146;
      }
    }
    else
    {
      v39 = *(unsigned __int8 *)(a3 + 23);
      v40 = (const void *)a3;
    }
    if (*((char *)a2 + 23) < 0)
    {
      v50 = (size_t)a2[1];
      if ((v50 & 0x8000000000000000) != 0)
        goto LABEL_146;
      v51 = *a2;
      if (v50)
      {
        if (!v51)
          goto LABEL_146;
      }
    }
    else
    {
      v50 = *((unsigned __int8 *)a2 + 23);
      v51 = a2;
    }
    if (v50 >= v39)
      v54 = v39;
    else
      v54 = v50;
    v55 = memcmp(v40, v51, v54);
    if (v55)
    {
      if ((v55 & 0x80000000) == 0)
        return;
    }
    else if (v39 == v50)
    {
      v58 = *(unsigned __int8 *)(a3 + 28);
      v59 = *((unsigned __int8 *)a2 + 28);
      v60 = v58 == v59;
      if (v58 >= v59)
        v61 = 1;
      else
        v61 = -1;
      if (v60)
      {
        v62 = *(_DWORD *)(a3 + 24);
        v63 = *((_DWORD *)a2 + 6);
        v64 = v62 == v63;
        v23 = v62 < v63;
        v61 = -1;
        if (!v23)
          v61 = 1;
        if (v64)
          v61 = 0;
      }
      if ((v61 & 0x80) == 0)
        return;
    }
    else if (v39 >= v50)
    {
      return;
    }
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
    return;
  }
  if (v13 < 0)
    goto LABEL_57;
LABEL_17:
  if (*(char *)(a3 + 23) < 0)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_146;
    v15 = *(const void **)a3;
    if (v14)
    {
      if (!v15)
        goto LABEL_146;
    }
  }
  else
  {
    v14 = *(unsigned __int8 *)(a3 + 23);
    v15 = (const void *)a3;
  }
  v24 = a2;
  if ((v6 & 0x80) != 0)
  {
    v6 = (size_t)a2[1];
    if ((v6 & 0x8000000000000000) != 0)
      goto LABEL_146;
    v24 = *a2;
    if (v6)
    {
      if (!v24)
        goto LABEL_146;
    }
  }
  v25 = v6 >= v14 ? v14 : v6;
  v26 = memcmp(v15, v24, v25);
  if (v26)
  {
    if ((v26 & 0x80000000) == 0)
      return;
  }
  else if (v14 == v6)
  {
    v27 = *(unsigned __int8 *)(a3 + 28);
    v28 = *((unsigned __int8 *)a2 + 28);
    v29 = v27 == v28;
    if (v27 >= v28)
      v30 = 1;
    else
      v30 = -1;
    if (v29)
    {
      v31 = *(_DWORD *)(a3 + 24);
      v32 = *((_DWORD *)a2 + 6);
      v33 = v31 == v32;
      v23 = v31 < v32;
      v30 = -1;
      if (!v23)
        v30 = 1;
      if (v33)
        v30 = 0;
    }
    if ((v30 & 0x80) == 0)
      return;
  }
  else if (v14 >= v6)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
  if (*((char *)a2 + 23) < 0)
  {
    v48 = (size_t)a2[1];
    if ((v48 & 0x8000000000000000) != 0)
      goto LABEL_146;
    v49 = *a2;
    if (v48)
    {
      if (!v49)
        goto LABEL_146;
    }
  }
  else
  {
    v48 = *((unsigned __int8 *)a2 + 23);
    v49 = a2;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v52 = *(unsigned __int8 *)(a1 + 23);
    v53 = (const void *)a1;
    goto LABEL_110;
  }
  v52 = *(_QWORD *)(a1 + 8);
  if ((v52 & 0x8000000000000000) != 0 || (v53 = *(const void **)a1, v52) && !v53)
  {
LABEL_146:
    __break(1u);
    return;
  }
LABEL_110:
  if (v52 >= v48)
    v56 = v48;
  else
    v56 = v52;
  v57 = memcmp(v49, v53, v56);
  if (v57)
  {
    if ((v57 & 0x80000000) == 0)
      return;
LABEL_145:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    return;
  }
  if (v48 == v52)
  {
    v65 = *((unsigned __int8 *)a2 + 28);
    v66 = *(unsigned __int8 *)(a1 + 28);
    v67 = v65 == v66;
    if (v65 >= v66)
      v68 = 1;
    else
      v68 = -1;
    if (v67)
    {
      v69 = *((_DWORD *)a2 + 6);
      v70 = *(_DWORD *)(a1 + 24);
      v71 = v69 == v70;
      v23 = v69 < v70;
      v68 = -1;
      if (!v23)
        v68 = 1;
      if (v71)
        v68 = 0;
    }
    if (v68 < 0)
      goto LABEL_145;
  }
  else if (v48 < v52)
  {
    goto LABEL_145;
  }
}

std::string::size_type std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type result;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::string *v11;
  size_t v12;
  unsigned __int8 v13;
  size_t v14;
  size_t v16;
  const void *v17;
  int *v18;
  size_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  const std::string::value_type *v34;
  size_t v35;
  uint64_t v36;
  std::string::size_type size;
  _QWORD *v38;
  size_t v39;
  size_t v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  size_t v45;
  const void *v46;
  size_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  int v53;
  int v54;
  BOOL v55;
  BOOL v56;
  std::string v57;
  int v58;
  unsigned __int8 v59;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(char *)(a2 - 9) < 0)
      {
        v6 = *(_QWORD *)(a2 - 24);
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_134;
        result = *(_QWORD *)(a2 - 32);
        if (v6)
        {
          if (!result)
            goto LABEL_134;
        }
      }
      else
      {
        v6 = *(unsigned __int8 *)(a2 - 9);
        result = a2 - 32;
      }
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        v45 = *(unsigned __int8 *)(a1 + 23);
        v46 = (const void *)a1;
LABEL_112:
        if (v45 >= v6)
          v47 = v6;
        else
          v47 = v45;
        v48 = memcmp((const void *)result, v46, v47);
        if (v48)
        {
          if ((v48 & 0x80000000) == 0)
            return 1;
          goto LABEL_117;
        }
        if (v6 == v45)
        {
          v49 = *(unsigned __int8 *)(a2 - 4);
          v50 = *(unsigned __int8 *)(a1 + 28);
          v51 = v49 == v50;
          if (v49 >= v50)
            v52 = 1;
          else
            v52 = -1;
          if (v51)
          {
            v53 = *(_DWORD *)(a2 - 8);
            v54 = *(_DWORD *)(a1 + 24);
            v55 = v53 == v54;
            v56 = v53 < v54;
            v52 = -1;
            if (!v56)
              v52 = 1;
            if (v55)
              v52 = 0;
          }
          if ((v52 & 0x80) == 0)
            return 1;
        }
        else if (v6 >= v45)
        {
          return 1;
        }
LABEL_117:
        std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)(a2 - 32));
        return 1;
      }
      v45 = *(_QWORD *)(a1 + 8);
      if ((v45 & 0x8000000000000000) == 0)
      {
        v46 = *(const void **)a1;
        if (!v45 || v46)
          goto LABEL_112;
      }
LABEL_134:
      __break(1u);
      return result;
    case 3:
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, (const void **)(a1 + 32), a2 - 32);
      return 1;
    case 4:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,0>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v7 = a1 + 64;
      std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, (const void **)(a1 + 32), a1 + 64);
      v8 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      while (2)
      {
        v13 = *(_BYTE *)(v8 + 23);
        result = v8;
        v14 = v13;
        if ((char)v13 < 0)
        {
          v14 = *(_QWORD *)(v8 + 8);
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_134;
          result = *(_QWORD *)v8;
          if (v14 && result == 0)
            goto LABEL_134;
        }
        if (*(char *)(v7 + 23) < 0)
        {
          v16 = *(_QWORD *)(v7 + 8);
          if ((v16 & 0x8000000000000000) != 0)
            goto LABEL_134;
          v17 = *(const void **)v7;
          if (v16)
          {
            if (!v17)
              goto LABEL_134;
          }
        }
        else
        {
          v16 = *(unsigned __int8 *)(v7 + 23);
          v17 = (const void *)v7;
        }
        v18 = (int *)(v8 + 24);
        if (v16 >= v14)
          v19 = v14;
        else
          v19 = v16;
        v20 = memcmp((const void *)result, v17, v19);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            goto LABEL_15;
        }
        else if (v14 == v16)
        {
          v21 = *(unsigned __int8 *)(v8 + 28);
          v22 = *(unsigned __int8 *)(v7 + 28);
          v23 = v21 == v22;
          if (v21 >= v22)
            v24 = 1;
          else
            v24 = -1;
          if (v23)
          {
            v25 = *(_DWORD *)(v7 + 24);
            v24 = *v18 >= v25 ? 1 : -1;
            if (*v18 == v25)
              v24 = 0;
          }
          if ((v24 & 0x80) == 0)
            goto LABEL_15;
        }
        else if (v14 >= v16)
        {
          goto LABEL_15;
        }
        if ((v13 & 0x80) != 0)
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
        else
          v57 = *(std::string *)v8;
        v58 = *v18;
        v59 = *(_BYTE *)(v8 + 28);
        v26 = v9;
        while (1)
        {
          v28 = v26;
          v29 = a1 + v26;
          v30 = a1 + v26 + 64;
          result = a1 + v26 + 96;
          v31 = *(char *)(a1 + v26 + 119);
          v32 = *(unsigned __int8 *)(a1 + v26 + 87);
          if (v31 < 0)
          {
            v33 = *(_QWORD *)(v29 + 72);
            v34 = (v32 & 0x80u) == 0 ? (const std::string::value_type *)v30 : *(const std::string::value_type **)v30;
            v35 = (v32 & 0x80u) == 0 ? v32 : v33;
            result = (std::string::size_type)std::string::__assign_no_alias<false>((std::string *)result, v34, v35);
          }
          else if ((v32 & 0x80) != 0)
          {
            result = (std::string::size_type)std::string::__assign_no_alias<true>((_QWORD *)result, *(char **)v30, *(_QWORD *)(a1 + v28 + 72));
          }
          else
          {
            *(_OWORD *)result = *(_OWORD *)v30;
            *(_QWORD *)(result + 16) = *(_QWORD *)(v30 + 16);
          }
          v36 = a1 + v28;
          *(_DWORD *)(v36 + 120) = *(_DWORD *)(a1 + v28 + 88);
          *(_BYTE *)(v36 + 124) = *(_BYTE *)(a1 + v28 + 92);
          if (v28 == -64)
            break;
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          {
            size = v57.__r_.__value_.__l.__size_;
            if ((v57.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_134;
            result = v57.__r_.__value_.__r.__words[0];
            if (v57.__r_.__value_.__l.__size_)
            {
              if (!v57.__r_.__value_.__r.__words[0])
                goto LABEL_134;
            }
          }
          else
          {
            size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
            result = (std::string::size_type)&v57;
          }
          v38 = (_QWORD *)(v36 + 32);
          if (*(char *)(a1 + v28 + 55) < 0)
          {
            v39 = *(_QWORD *)(a1 + v28 + 40);
            if ((v39 & 0x8000000000000000) != 0)
              goto LABEL_134;
            v38 = (_QWORD *)*v38;
            if (v39)
            {
              if (!v38)
                goto LABEL_134;
            }
          }
          else
          {
            v39 = *(unsigned __int8 *)(a1 + v28 + 55);
          }
          if (v39 >= size)
            v40 = size;
          else
            v40 = v39;
          v41 = memcmp((const void *)result, v38, v40);
          if (v41)
          {
            if ((v41 & 0x80000000) == 0)
              goto LABEL_92;
          }
          else
          {
            if (size == v39)
            {
              v42 = *(unsigned __int8 *)(v36 + 60);
              if (v59 >= v42)
                v27 = 1;
              else
                v27 = -1;
              if (v59 == v42)
              {
                v43 = *(_DWORD *)(v36 + 56);
                v27 = v58 >= v43 ? 1 : -1;
                if (v58 == v43)
                  v27 = 0;
              }
              goto LABEL_53;
            }
            if (size >= v39)
            {
LABEL_92:
              v44 = a1 + v28 + 64;
              if ((std::string *)v44 == &v57)
                goto LABEL_13;
              goto LABEL_97;
            }
          }
          v27 = -1;
LABEL_53:
          v26 = v28 - 32;
          if ((v27 & 0x80) == 0)
            goto LABEL_92;
        }
        v44 = a1;
        if ((std::string *)a1 == &v57)
          goto LABEL_13;
LABEL_97:
        if (*(char *)(v44 + 23) < 0)
        {
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = &v57;
          else
            v11 = (std::string *)v57.__r_.__value_.__r.__words[0];
          if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
          else
            v12 = v57.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((std::string *)v44, (const std::string::value_type *)v11, v12);
        }
        else if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v44, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)v44 = v57;
        }
LABEL_13:
        *(_DWORD *)(v36 + 88) = v58;
        *(_BYTE *)(v36 + 92) = v59;
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v57.__r_.__value_.__l.__data_);
          if (++v10 == 8)
            return v8 + 32 == a2;
LABEL_15:
          v7 = v8;
          v9 += 32;
          v8 += 32;
          if (v8 == a2)
            return 1;
          continue;
        }
        break;
      }
      if (++v10 != 8)
        goto LABEL_15;
      return v8 + 32 == a2;
  }
}

void std::swap[abi:sn180100]<webrtc::RtpExtension>(std::string *this, std::string *a2)
{
  char v4;
  __int128 v5;
  std::string *v6;
  size_t size;
  int v8;
  std::string *v9;
  std::string *p_p;
  size_t v11;
  std::string __p;
  int data;
  std::string::value_type v14;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    __p = *this;
  data = (int)this[1].__r_.__value_.__l.__data_;
  v14 = this[1].__r_.__value_.__s.__data_[4];
  if (this != a2)
  {
    v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (v4 >= 0)
        v6 = a2;
      else
        v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      if (v4 >= 0)
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      else
        size = a2->__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(this, (const std::string::value_type *)v6, size);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
    }
  }
  v9 = a2 + 1;
  v8 = (int)a2[1].__r_.__value_.__l.__data_;
  this[1].__r_.__value_.__s.__data_[4] = a2[1].__r_.__value_.__s.__data_[4];
  LODWORD(this[1].__r_.__value_.__l.__data_) = v8;
  if (&__p == a2)
  {
LABEL_28:
    LODWORD(v9->__r_.__value_.__l.__data_) = data;
    a2[1].__r_.__value_.__s.__data_[4] = v14;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_31;
  }
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v11 = __p.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(a2, (const std::string::value_type *)p_p, v11);
    goto LABEL_28;
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    LODWORD(v9->__r_.__value_.__l.__data_) = data;
    a2[1].__r_.__value_.__s.__data_[4] = v14;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_31:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  *a2 = __p;
  LODWORD(v9->__r_.__value_.__l.__data_) = data;
  a2[1].__r_.__value_.__s.__data_[4] = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
}

void std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  size_t v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  char v31;
  int v32;
  int v33;
  BOOL v34;
  size_t v35;
  const void *v36;
  size_t v37;
  const void *v38;
  size_t v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  char v44;
  int v45;
  int v46;
  BOOL v47;

  std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, (const void **)a2, a3);
  if (*(char *)(a4 + 23) < 0)
  {
    v8 = *(_QWORD *)(a4 + 8);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v9 = *(const void **)a4;
    if (v8)
    {
      if (!v9)
        goto LABEL_89;
    }
  }
  else
  {
    v8 = *(unsigned __int8 *)(a4 + 23);
    v9 = (const void *)a4;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    v10 = *(_QWORD *)(a3 + 8);
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v11 = *(const void **)a3;
    if (v10)
    {
      if (!v11)
        goto LABEL_89;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a3 + 23);
    v11 = (const void *)a3;
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      return;
  }
  else if (v8 == v10)
  {
    v14 = *(unsigned __int8 *)(a4 + 28);
    v15 = *(unsigned __int8 *)(a3 + 28);
    v16 = v14 == v15;
    if (v14 >= v15)
      v17 = 1;
    else
      v17 = -1;
    if (v16)
    {
      v18 = *(_DWORD *)(a4 + 24);
      v19 = *(_DWORD *)(a3 + 24);
      v20 = v18 == v19;
      v21 = v18 < v19;
      v17 = -1;
      if (!v21)
        v17 = 1;
      if (v20)
        v17 = 0;
    }
    if ((v17 & 0x80) == 0)
      return;
  }
  else if (v8 >= v10)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a3, (std::string *)a4);
  if (*(char *)(a3 + 23) < 0)
  {
    v22 = *(_QWORD *)(a3 + 8);
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v23 = *(const void **)a3;
    if (v22)
    {
      if (!v23)
        goto LABEL_89;
    }
  }
  else
  {
    v22 = *(unsigned __int8 *)(a3 + 23);
    v23 = (const void *)a3;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v24 = *(_QWORD *)(a2 + 8);
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v25 = *(const void **)a2;
    if (v24)
    {
      if (!v25)
        goto LABEL_89;
    }
  }
  else
  {
    v24 = *(unsigned __int8 *)(a2 + 23);
    v25 = (const void *)a2;
  }
  if (v24 >= v22)
    v26 = v22;
  else
    v26 = v24;
  v27 = memcmp(v23, v25, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
      return;
  }
  else if (v22 == v24)
  {
    v28 = *(unsigned __int8 *)(a3 + 28);
    v29 = *(unsigned __int8 *)(a2 + 28);
    v30 = v28 == v29;
    if (v28 >= v29)
      v31 = 1;
    else
      v31 = -1;
    if (v30)
    {
      v32 = *(_DWORD *)(a3 + 24);
      v33 = *(_DWORD *)(a2 + 24);
      v34 = v32 == v33;
      v21 = v32 < v33;
      v31 = -1;
      if (!v21)
        v31 = 1;
      if (v34)
        v31 = 0;
    }
    if ((v31 & 0x80) == 0)
      return;
  }
  else if (v22 >= v24)
  {
    return;
  }
  std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a2, (std::string *)a3);
  if (*(char *)(a2 + 23) < 0)
  {
    v35 = *(_QWORD *)(a2 + 8);
    if ((v35 & 0x8000000000000000) != 0)
      goto LABEL_89;
    v36 = *(const void **)a2;
    if (v35)
    {
      if (!v36)
        goto LABEL_89;
    }
  }
  else
  {
    v35 = *(unsigned __int8 *)(a2 + 23);
    v36 = (const void *)a2;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v37 = *(unsigned __int8 *)(a1 + 23);
    v38 = (const void *)a1;
    goto LABEL_69;
  }
  v37 = *(_QWORD *)(a1 + 8);
  if ((v37 & 0x8000000000000000) != 0 || (v38 = *(const void **)a1, v37) && !v38)
  {
LABEL_89:
    __break(1u);
    return;
  }
LABEL_69:
  if (v37 >= v35)
    v39 = v35;
  else
    v39 = v37;
  v40 = memcmp(v36, v38, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0)
      return;
LABEL_88:
    std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
    return;
  }
  if (v35 == v37)
  {
    v41 = *(unsigned __int8 *)(a2 + 28);
    v42 = *(unsigned __int8 *)(a1 + 28);
    v43 = v41 == v42;
    if (v41 >= v42)
      v44 = 1;
    else
      v44 = -1;
    if (v43)
    {
      v45 = *(_DWORD *)(a2 + 24);
      v46 = *(_DWORD *)(a1 + 24);
      v47 = v45 == v46;
      v21 = v45 < v46;
      v44 = -1;
      if (!v21)
        v44 = 1;
      if (v47)
        v44 = 0;
    }
    if (v44 < 0)
      goto LABEL_88;
  }
  else if (v35 < v37)
  {
    goto LABEL_88;
  }
}

void cricket::StreamParams::add_ssrc(cricket::StreamParams *this, int a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _DWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = (char *)*((_QWORD *)this + 4);
  v4 = *((_QWORD *)this + 5);
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_DWORD *)v5 = a2;
      v7 = v5 + 4;
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  v8 = (char *)*((_QWORD *)this + 3);
  v9 = (v5 - v8) >> 2;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 62)
    goto LABEL_22;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 1 > v10)
    v10 = v11 >> 1;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL;
  v13 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    abort();
  }
  if (v13 >> 62)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 4 * v13;
  v15 = operator new(4 * v13);
  v16 = &v15[4 * v9];
  v17 = &v15[v14];
  *v16 = a2;
  v7 = v16 + 1;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 4;
    if (v18 < 0x2C)
      goto LABEL_26;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_26;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v6 = &v5[-v20];
    v16 = (_DWORD *)((char *)v16 - v20);
    v21 = &v15[4 * v9 - 16];
    v22 = v5 - 16;
    v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_26:
      do
      {
        v25 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *--v16 = v25;
      }
      while (v6 != v8);
    }
  }
  *((_QWORD *)this + 3) = v16;
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = v17;
  if (v8)
    operator delete(v8);
LABEL_20:
  *((_QWORD *)this + 4) = v7;
}

void webrtc::ToRtpCapabilities(uint64_t *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  __int128 *v8;
  unsigned __int8 v9;
  unsigned __int16 *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  int *v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  __int128 v32;
  int v33;
  int v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  uint64_t v37;
  unsigned __int16 *v38;
  uint64_t v39;
  int v41;
  int v42;
  BOOL v43;
  unsigned __int16 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unsigned __int16 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  unsigned __int16 **v70;
  unsigned __int16 *v71;
  uint64_t v72;
  int v73;
  char v74;
  int v75;
  char *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v83;
  int v84;
  int *v86;
  uint64_t *v87;
  uint64_t **v88;
  int *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned __int16 *v103;
  const void **v104;
  _QWORD *v105;
  const void **v106;
  char *v107;
  std::string *v108;
  __int128 v109;
  std::string *v110;
  __int128 v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  unint64_t v131;
  webrtc::RtpCodec *v132;
  unint64_t *v133;
  __int128 v134;
  __int128 v135;
  _QWORD *v136;
  char *v137;
  char *v138;
  void **v139;
  void **v140;
  unint64_t v141;
  size_t v142;
  char *v143;
  void **v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  char *v150;
  char *v151;
  size_t v152;
  char *v153;
  char *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  std::string *v162;
  const std::string::value_type **v163;
  __int128 v164;
  void **v165;
  int v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v172;
  char *v173;
  char *v174;
  _BYTE *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  BOOL v179;
  unint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  _DWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  _OWORD *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  int v192;
  unint64_t v193;
  _DWORD *v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  _DWORD *v202;
  char *v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  _OWORD *v208;
  char *v209;
  uint64_t v210;
  __int128 v211;
  int v212;
  unint64_t v213;
  char *v214;
  _DWORD *v215;
  char *v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  _BYTE *v222;
  _DWORD *v223;
  char *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  _OWORD *v229;
  char *v230;
  uint64_t v231;
  __int128 v232;
  int v233;
  char v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  unsigned __int16 **v239;
  uint64_t v241;
  char *v242;
  unsigned __int16 *v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  void (**v247)(webrtc::RtpCodec *__hidden);
  __int128 v248;
  __int128 v249;
  char v250;
  int v251;
  char v252;
  void *v253;
  int *v254;
  char *v255;
  uint64_t *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  __int128 __p;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;

  v3 = a3;
  v264 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = *a1;
  v237 = a1[1];
  if (*a1 == v237)
  {
    v236 = 0;
    v235 = 0;
    v137 = *a2;
    v138 = a2[1];
    if (*a2 == v138)
      goto LABEL_309;
    goto LABEL_248;
  }
  v235 = 0;
  v5 = 0;
  v6 = &v256;
  v7 = (uint64_t *)&v257;
  v236 = 0;
  do
  {
    v8 = (__int128 *)(v4 + 16);
    v9 = *(_BYTE *)(v4 + 39);
    v10 = (unsigned __int16 *)(v4 + 16);
    v11 = v9;
    if ((char)v9 < 0)
    {
      v11 = *(_QWORD *)(v4 + 24);
      if (v11 < 0)
        goto LABEL_373;
      v10 = *(unsigned __int16 **)v8;
      v12 = v11 && v10 == 0;
      if (v12)
        goto LABEL_373;
    }
    if (v11 == 3
      && ((v13 = *v10, v14 = *((unsigned __int8 *)v10 + 2), v13 == (unsigned __int16)cricket::kRedCodecName)
        ? (v15 = v14 == 100)
        : (v15 = 0),
          v15))
    {
      BYTE4(v236) = 1;
      v31 = v5;
    }
    else
    {
      v16 = (int *)(v4 + 16);
      v17 = *(unsigned __int8 *)(v4 + 39);
      if ((*(_BYTE *)(v4 + 39) & 0x80) != 0)
      {
        v17 = *(_QWORD *)(v4 + 24);
        if (v17 < 0)
          goto LABEL_373;
        v16 = *(int **)v8;
        if (v17)
        {
          if (!v16)
            goto LABEL_373;
        }
      }
      if (v17 == 6
        && ((v18 = *v16, v19 = *((unsigned __int16 *)v16 + 2), v18 == *(_DWORD *)"ulpfec")
          ? (v20 = v19 == *(unsigned __int16 *)"ec")
          : (v20 = 0),
            v20))
      {
        v235 = 1;
        v31 = v5;
      }
      else
      {
        v21 = (uint64_t *)(v4 + 16);
        v22 = *(unsigned __int8 *)(v4 + 39);
        if ((*(_BYTE *)(v4 + 39) & 0x80) != 0)
        {
          v22 = *(_QWORD *)(v4 + 24);
          if (v22 < 0)
            goto LABEL_373;
          v21 = *(uint64_t **)v8;
          if (v22)
          {
            if (!v21)
              goto LABEL_373;
          }
        }
        if (v22 == 10
          && ((v23 = *v21, v24 = *((unsigned __int16 *)v21 + 4), v23 == *(_QWORD *)"flexfec-03")
            ? (v25 = v24 == *(unsigned __int16 *)"03")
            : (v25 = 0),
              v25))
        {
          LOBYTE(v236) = 1;
          v31 = v5;
        }
        else
        {
          v26 = (unsigned __int16 *)(v4 + 16);
          v27 = *(unsigned __int8 *)(v4 + 39);
          if ((*(_BYTE *)(v4 + 39) & 0x80) != 0)
          {
            v27 = *(_QWORD *)(v4 + 24);
            if (v27 < 0)
              goto LABEL_373;
            v26 = *(unsigned __int16 **)v8;
            if (v27)
            {
              if (!v26)
                goto LABEL_373;
            }
          }
          if (v27 == 3
            && ((v28 = *v26, v29 = *((unsigned __int8 *)v26 + 2), v28 == *(unsigned __int16 *)"rtx")
              ? (v30 = v29 == cricket::kRtxCodecName[2])
              : (v30 = 0),
                v30))
          {
            v31 = 1;
            if ((v5 & 1) != 0)
              goto LABEL_244;
          }
          else
          {
            v31 = v5;
          }
        }
      }
    }
    v238 = v31;
    v250 = 0;
    LOBYTE(v251) = 0;
    v252 = 0;
    v254 = 0;
    v255 = 0;
    v253 = 0;
    *v7 = 0;
    v7[1] = 0;
    *(_QWORD *)&v249 = 0;
    v248 = 0uLL;
    *(_QWORD *)((char *)&v249 + 5) = 0;
    v256 = v7;
    v247 = off_24C0BCC10;
    LOBYTE(v259) = 0;
    BYTE4(v259) = 0;
    v260 = 0;
    if (&v248 != v8)
    {
      if ((v9 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(&v248, *(char **)(v4 + 16), *(_QWORD *)(v4 + 24));
      }
      else
      {
        v32 = *v8;
        *(_QWORD *)&v249 = *(_QWORD *)(v4 + 32);
        v248 = v32;
      }
    }
    v239 = (unsigned __int16 **)(v4 + 16);
    v33 = *(_DWORD *)(v4 + 8);
    v34 = *(_DWORD *)(v4 + 40);
    DWORD2(v249) = v33 != 0;
    HIDWORD(v249) = v34;
    v250 = 1;
    LODWORD(v259) = *(_DWORD *)(v4 + 12);
    BYTE4(v259) = 1;
    v36 = *(unsigned __int16 **)(v4 + 192);
    v35 = *(unsigned __int16 **)(v4 + 200);
    v241 = v4;
    v243 = v35;
    if (v36 == v35)
    {
      if (!v33)
        goto LABEL_52;
LABEL_171:
      if (v33 == 1)
        absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=(&v260, (unint64_t *)(v4 + 88));
      goto LABEL_173;
    }
    do
    {
      v37 = *((unsigned __int8 *)v36 + 23);
      v38 = v36;
      v39 = v37;
      if (*((char *)v36 + 23) < 0)
      {
        v39 = *((_QWORD *)v36 + 1);
        if (v39 < 0)
          goto LABEL_373;
        v38 = *(unsigned __int16 **)v36;
        if (v39 && v38 == 0)
          goto LABEL_373;
      }
      if (v39 == 3
        && ((v41 = *v38, v42 = *((unsigned __int8 *)v38 + 2), v41 == *(unsigned __int16 *)"ccm")
          ? (v43 = v42 == cricket::kRtcpFbParamCcm[2])
          : (v43 = 0),
            v43))
      {
        if (*((char *)v36 + 47) < 0)
        {
          v67 = *((_QWORD *)v36 + 4);
          if (v67 < 0)
            goto LABEL_373;
          v68 = (unsigned __int16 *)*((_QWORD *)v36 + 3);
          if (v67)
          {
            if (!v68)
              goto LABEL_373;
          }
        }
        else
        {
          v67 = *((unsigned __int8 *)v36 + 47);
          v68 = v36 + 12;
        }
        if (v67 == 3)
        {
          v80 = *v68;
          v81 = *((unsigned __int8 *)v68 + 2);
          if (v80 == *(unsigned __int16 *)"fir" && v81 == cricket::kRtcpFbCcmParamFir[2])
          {
            v75 = 0;
            v74 = 1;
            v73 = 2;
            v77 = v254;
            v76 = v255;
            if (v254 < (int *)v255)
              goto LABEL_149;
            goto LABEL_152;
          }
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          goto LABEL_53;
      }
      else
      {
        v44 = v36;
        v45 = *((unsigned __int8 *)v36 + 23);
        if ((v37 & 0x80) != 0)
        {
          v45 = *((_QWORD *)v36 + 1);
          if (v45 < 0)
            goto LABEL_373;
          v44 = *(unsigned __int16 **)v36;
          if (v45)
          {
            if (!v44)
              goto LABEL_373;
          }
        }
        if (v45 == 9
          && ((v46 = *(_QWORD *)v44, v47 = *((unsigned __int8 *)v44 + 8), v46 == *(_QWORD *)"goog-lntf")
            ? (v48 = v47 == cricket::kRtcpFbParamLntf[8])
            : (v48 = 0),
              v48))
        {
          v69 = *((unsigned __int8 *)v36 + 47);
          if ((v69 & 0x80u) != 0)
            v69 = *((_QWORD *)v36 + 4);
          if (!v69)
          {
            v73 = 0;
            v74 = 0;
            v75 = 1;
            v77 = v254;
            v76 = v255;
            if (v254 < (int *)v255)
              goto LABEL_149;
LABEL_152:
            v87 = v7;
            v88 = v6;
            v89 = (int *)v253;
            v90 = 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (_BYTE *)v253) >> 2);
            v91 = v90 + 1;
            if (v90 + 1 > 0x1555555555555555)
              goto LABEL_374;
            v92 = 0xAAAAAAAAAAAAAAABLL * ((v76 - (_BYTE *)v253) >> 2);
            if (2 * v92 > v91)
              v91 = 2 * v92;
            if (v92 >= 0xAAAAAAAAAAAAAAALL)
              v93 = 0x1555555555555555;
            else
              v93 = v91;
            if (!v93)
              goto LABEL_373;
            if (v93 > 0x1555555555555555)
              goto LABEL_375;
            v94 = 12 * v93;
            v95 = (char *)operator new(12 * v93);
            v96 = &v95[12 * v90];
            *(_DWORD *)v96 = v75;
            *((_DWORD *)v96 + 1) = v73;
            v96[8] = v74;
            v97 = v96;
            v6 = v88;
            if (v77 == v89)
            {
              v7 = v87;
              v35 = v243;
            }
            else
            {
              v35 = v243;
              do
              {
                v98 = *(_QWORD *)(v77 - 3);
                v77 -= 3;
                v99 = *((_BYTE *)v77 + 8);
                *(_QWORD *)(v97 - 12) = v98;
                v97 -= 12;
                v97[8] = v99;
              }
              while (v77 != v89);
              v77 = v89;
              v7 = v87;
            }
            v86 = (int *)(v96 + 12);
            v253 = v97;
            v254 = (int *)(v96 + 12);
            v255 = &v95[v94];
            if (v77)
              operator delete(v77);
            goto LABEL_167;
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            goto LABEL_53;
        }
        else
        {
          v49 = v36;
          v50 = *((unsigned __int8 *)v36 + 23);
          if ((v37 & 0x80) != 0)
          {
            v50 = *((_QWORD *)v36 + 1);
            if (v50 < 0)
              goto LABEL_373;
            v49 = *(unsigned __int16 **)v36;
            if (v50)
            {
              if (!v49)
                goto LABEL_373;
            }
          }
          if (v50 == 4 && *(_DWORD *)v49 == *(_DWORD *)"nack")
          {
            v70 = (unsigned __int16 **)(v36 + 12);
            if (*((char *)v36 + 47) < 0)
            {
              v72 = *((_QWORD *)v36 + 4);
              if (!v72)
              {
                v73 = 0;
                v74 = 1;
                v75 = 2;
                v77 = v254;
                v76 = v255;
                if (v254 < (int *)v255)
                  goto LABEL_149;
                goto LABEL_152;
              }
              if (v72 < 0)
                goto LABEL_373;
              v71 = *v70;
              if (!*v70)
                goto LABEL_373;
            }
            else
            {
              v71 = v36 + 12;
              v72 = *((unsigned __int8 *)v36 + 47);
              if (!*((_BYTE *)v36 + 47))
              {
                v73 = 0;
                v74 = 1;
                v75 = 2;
                v77 = v254;
                v76 = v255;
                if (v254 < (int *)v255)
                  goto LABEL_149;
                goto LABEL_152;
              }
            }
            if (v72 == 3)
            {
              v83 = *v71;
              v84 = *((unsigned __int8 *)v71 + 2);
              if (v83 == *(unsigned __int16 *)"pli" && v84 == cricket::kRtcpFbNackParamPli[2])
              {
                v73 = 1;
                v75 = 2;
                v74 = 1;
                v77 = v254;
                v76 = v255;
                if (v254 >= (int *)v255)
                  goto LABEL_152;
LABEL_149:
                if (!v77)
                  goto LABEL_373;
                *v77 = v75;
                v77[1] = v73;
                v86 = v77 + 3;
                *((_BYTE *)v77 + 8) = v74;
                v35 = v243;
LABEL_167:
                v254 = v86;
                goto LABEL_54;
              }
            }
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_53:
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v60, v61, v62, v63, v64, v65, v66, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_parameters_conversion.cc");
          }
          else
          {
            v51 = v36;
            v52 = *((unsigned __int8 *)v36 + 23);
            if ((v37 & 0x80) != 0)
            {
              v52 = *((_QWORD *)v36 + 1);
              if (v52 < 0)
                goto LABEL_373;
              v51 = *(unsigned __int16 **)v36;
              if (v52)
              {
                if (!v51)
                  goto LABEL_373;
              }
            }
            if (v52 == 9
              && ((v53 = *(_QWORD *)v51, v54 = *((unsigned __int8 *)v51 + 8), v53 == *(_QWORD *)"goog-remb")
                ? (v55 = v54 == cricket::kRtcpFbParamRemb[8])
                : (v55 = 0),
                  v55))
            {
              v78 = *((unsigned __int8 *)v36 + 47);
              if ((v78 & 0x80u) != 0)
                v78 = *((_QWORD *)v36 + 4);
              if (!v78)
              {
                v73 = 0;
                v74 = 0;
                v75 = 3;
                v77 = v254;
                v76 = v255;
                if (v254 < (int *)v255)
                  goto LABEL_149;
                goto LABEL_152;
              }
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                goto LABEL_53;
            }
            else
            {
              v56 = v36;
              if ((v37 & 0x80) != 0)
              {
                v37 = *((_QWORD *)v36 + 1);
                if (v37 < 0)
                  goto LABEL_373;
                v56 = *(unsigned __int16 **)v36;
                if (v37)
                {
                  if (!v56)
                    goto LABEL_373;
                }
              }
              if (v37 == 12
                && ((v57 = *(_QWORD *)v56, v58 = *((unsigned int *)v56 + 2), v57 == *(_QWORD *)"transport-cc")
                  ? (v59 = v58 == *(unsigned int *)"t-cc")
                  : (v59 = 0),
                    v59))
              {
                v79 = *((unsigned __int8 *)v36 + 47);
                if ((v79 & 0x80u) != 0)
                  v79 = *((_QWORD *)v36 + 4);
                if (!v79)
                {
                  v73 = 0;
                  v74 = 0;
                  v75 = 4;
                  v77 = v254;
                  v76 = v255;
                  if (v254 < (int *)v255)
                    goto LABEL_149;
                  goto LABEL_152;
                }
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                  goto LABEL_53;
              }
              else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                goto LABEL_53;
              }
            }
          }
        }
      }
LABEL_54:
      v36 += 24;
    }
    while (v36 != v35);
    v4 = v241;
    v33 = *(_DWORD *)(v241 + 8);
    if (v33)
      goto LABEL_171;
LABEL_52:
    v251 = *(_QWORD *)(v4 + 48);
    v252 = 1;
LABEL_173:
    v100 = *(_QWORD **)(v4 + 168);
    v101 = (_QWORD *)(v4 + 176);
    if (v100 != v101)
    {
LABEL_177:
      v104 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v6, v7, &v246, &v245, (uint64_t)(v100 + 4));
      if (*v104)
      {
        v105 = (_QWORD *)v100[1];
        if (!v105)
          goto LABEL_211;
        goto LABEL_205;
      }
      v106 = v104;
      v107 = (char *)operator new(0x50uLL);
      v108 = (std::string *)(v107 + 32);
      if (*((char *)v100 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v108, (const std::string::value_type *)v100[4], v100[5]);
        v110 = (std::string *)(v107 + 56);
        if ((*((char *)v100 + 79) & 0x80000000) == 0)
          goto LABEL_182;
      }
      else
      {
        v109 = *((_OWORD *)v100 + 2);
        *((_QWORD *)v107 + 6) = v100[6];
        *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
        v110 = (std::string *)(v107 + 56);
        if ((*((char *)v100 + 79) & 0x80000000) == 0)
        {
LABEL_182:
          v111 = *(_OWORD *)(v100 + 7);
          v110->__r_.__value_.__r.__words[2] = v100[9];
          *(_OWORD *)&v110->__r_.__value_.__l.__data_ = v111;
          goto LABEL_185;
        }
      }
      std::string::__init_copy_ctor_external(v110, (const std::string::value_type *)v100[7], v100[8]);
LABEL_185:
      v112 = v246;
      *(_QWORD *)v107 = 0;
      *((_QWORD *)v107 + 1) = 0;
      *((_QWORD *)v107 + 2) = v112;
      *v106 = v107;
      if (*v256)
      {
        v256 = (uint64_t *)*v256;
        v107 = (char *)*v106;
      }
      v113 = (uint64_t)v257;
      v12 = v107 == v257;
      v107[24] = v107 == v257;
      if (v12)
      {
LABEL_204:
        ++v258;
        v105 = (_QWORD *)v100[1];
        if (!v105)
          goto LABEL_211;
        goto LABEL_205;
      }
      while (1)
      {
        v114 = *((_QWORD *)v107 + 2);
        if (*(_BYTE *)(v114 + 24))
          goto LABEL_204;
        v115 = *(_BYTE **)(v114 + 16);
        v116 = *(_QWORD *)v115;
        if (*(_QWORD *)v115 == v114)
        {
          v119 = *((_QWORD *)v115 + 1);
          if (!v119 || (v120 = *(unsigned __int8 *)(v119 + 24), v117 = (_BYTE *)(v119 + 24), v120))
          {
            if (*(char **)v114 == v107)
            {
              *(_BYTE *)(v114 + 24) = 1;
              v115[24] = 0;
              v123 = *(_QWORD *)(v114 + 8);
              *(_QWORD *)v115 = v123;
              if (v123)
                goto LABEL_202;
            }
            else
            {
              v121 = *(uint64_t **)(v114 + 8);
              v122 = *v121;
              *(_QWORD *)(v114 + 8) = *v121;
              if (v122)
              {
                *(_QWORD *)(v122 + 16) = v114;
                v115 = *(_BYTE **)(v114 + 16);
              }
              v121[2] = (uint64_t)v115;
              *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v121;
              *v121 = v114;
              *(_QWORD *)(v114 + 16) = v121;
              v115 = (_BYTE *)v121[2];
              v114 = *(_QWORD *)v115;
              *((_BYTE *)v121 + 24) = 1;
              v115[24] = 0;
              v123 = *(_QWORD *)(v114 + 8);
              *(_QWORD *)v115 = v123;
              if (v123)
LABEL_202:
                *(_QWORD *)(v123 + 16) = v115;
            }
            *(_QWORD *)(v114 + 16) = *((_QWORD *)v115 + 2);
            *(_QWORD *)(*((_QWORD *)v115 + 2) + 8 * (**((_QWORD **)v115 + 2) != (_QWORD)v115)) = v114;
            *(_QWORD *)(v114 + 8) = v115;
            *((_QWORD *)v115 + 2) = v114;
            goto LABEL_204;
          }
        }
        else if (!v116 || (v118 = *(unsigned __int8 *)(v116 + 24), v117 = (_BYTE *)(v116 + 24), v118))
        {
          if (*(char **)v114 == v107)
          {
            v127 = *((_QWORD *)v107 + 1);
            *(_QWORD *)v114 = v127;
            if (v127)
            {
              *(_QWORD *)(v127 + 16) = v114;
              v115 = *(_BYTE **)(v114 + 16);
            }
            *((_QWORD *)v107 + 2) = v115;
            *(_QWORD *)(*(_QWORD *)(v114 + 16) + 8 * (**(_QWORD **)(v114 + 16) != v114)) = v107;
            *((_QWORD *)v107 + 1) = v114;
            *(_QWORD *)(v114 + 16) = v107;
            v115 = (_BYTE *)*((_QWORD *)v107 + 2);
            v107[24] = 1;
            v115[24] = 0;
            v125 = (uint64_t *)*((_QWORD *)v115 + 1);
            v126 = *v125;
            *((_QWORD *)v115 + 1) = *v125;
            if (v126)
LABEL_209:
              *(_QWORD *)(v126 + 16) = v115;
          }
          else
          {
            *(_BYTE *)(v114 + 24) = 1;
            v115[24] = 0;
            v125 = (uint64_t *)*((_QWORD *)v115 + 1);
            v126 = *v125;
            *((_QWORD *)v115 + 1) = *v125;
            if (v126)
              goto LABEL_209;
          }
          v125[2] = *((_QWORD *)v115 + 2);
          *(_QWORD *)(*((_QWORD *)v115 + 2) + 8 * (**((_QWORD **)v115 + 2) != (_QWORD)v115)) = v125;
          *v125 = (uint64_t)v115;
          *((_QWORD *)v115 + 2) = v125;
          ++v258;
          v105 = (_QWORD *)v100[1];
          if (!v105)
          {
            do
            {
LABEL_211:
              v124 = (_QWORD *)v100[2];
              v12 = *v124 == (_QWORD)v100;
              v100 = v124;
            }
            while (!v12);
            goto LABEL_176;
          }
          do
          {
LABEL_205:
            v124 = v105;
            v105 = (_QWORD *)*v105;
          }
          while (v105);
LABEL_176:
          v100 = v124;
          if (v124 == v101)
            break;
          goto LABEL_177;
        }
        *(_BYTE *)(v114 + 24) = 1;
        v107 = v115;
        v115[24] = v115 == (_BYTE *)v113;
        *v117 = 1;
        if (v115 == (_BYTE *)v113)
          goto LABEL_204;
      }
    }
    v4 = v241;
    if (*(char *)(v241 + 39) < 0)
    {
      v102 = *(_QWORD *)(v241 + 24);
      v3 = a3;
      if ((v102 & 0x8000000000000000) == 0)
      {
        v103 = *v239;
        if (!v102 || v103)
          goto LABEL_223;
      }
      goto LABEL_373;
    }
    v102 = *(unsigned __int8 *)(v241 + 39);
    v103 = (unsigned __int16 *)v239;
    v3 = a3;
LABEL_223:
    if (v102 == 3)
    {
      v128 = *v103;
      v129 = *((unsigned __int8 *)v103 + 2);
      if (v128 == *(unsigned __int16 *)"rtx" && v129 == cricket::kRtxCodecName[2])
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v6, (uint64_t)v257);
        v257 = 0;
        v258 = 0;
        v256 = v7;
        v131 = *(_QWORD *)(v3 + 8);
        if (v131 >= *(_QWORD *)(v3 + 16))
          goto LABEL_234;
LABEL_229:
        if (v131)
        {
          v132 = webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)v131, (const webrtc::RtpCodec *)&v247);
          *(_QWORD *)v131 = off_24C0BCC10;
          *(_QWORD *)(v131 + 104) = v259;
          *((_QWORD *)v132 + 14) = 0;
          v133 = (unint64_t *)((char *)v132 + 112);
          if (v260 >= 2)
          {
            if ((v260 & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v133, &v260);
            }
            else
            {
              *(_QWORD *)(v131 + 112) = v260;
              v134 = __p;
              v135 = v262;
              *(_QWORD *)(v131 + 152) = v263;
              *(_OWORD *)(v131 + 136) = v135;
              *(_OWORD *)(v131 + 120) = v134;
            }
          }
          v136 = (_QWORD *)(v131 + 160);
          goto LABEL_237;
        }
        goto LABEL_373;
      }
    }
    v131 = *(_QWORD *)(v3 + 8);
    if (v131 < *(_QWORD *)(v3 + 16))
      goto LABEL_229;
LABEL_234:
    v136 = std::vector<webrtc::RtpCodecCapability>::__push_back_slow_path<webrtc::RtpCodecCapability const&>((void **)v3, (uint64_t)&v247);
LABEL_237:
    *(_QWORD *)(v3 + 8) = v136;
    v247 = off_24C0BCC10;
    if ((v260 & 1) != 0)
      operator delete((void *)__p);
    v247 = off_24C0BCBF0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v6, (uint64_t)v257);
    if (v253)
    {
      v254 = (int *)v253;
      operator delete(v253);
    }
    if (SBYTE7(v249) < 0)
      operator delete((void *)v248);
    v31 = v238;
LABEL_244:
    v4 += 216;
    v5 = v31;
  }
  while (v4 != v237);
  v137 = *a2;
  v138 = a2[1];
  if (*a2 != v138)
  {
LABEL_248:
    v139 = *(void ***)(v3 + 32);
    v242 = v138;
    do
    {
      v141 = *(_QWORD *)(v3 + 40);
      if ((unint64_t)v139 < v141)
      {
        if (!v139)
          goto LABEL_373;
        if (v137[23] < 0)
        {
          v142 = *((_QWORD *)v137 + 1);
          if ((v142 & 0x8000000000000000) != 0)
            goto LABEL_373;
          v143 = *(char **)v137;
          if (v142)
          {
            if (!v143)
              goto LABEL_373;
          }
          if (v142 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_374;
        }
        else
        {
          v142 = v137[23];
          v143 = v137;
        }
        v166 = *((_DWORD *)v137 + 6);
        if (v142 > 0x16)
        {
          v168 = (v142 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v142 | 7) != 0x17)
            v168 = v142 | 7;
          v169 = v168 + 1;
          v167 = (char *)operator new(v168 + 1);
          v139[1] = (void *)v142;
          v139[2] = (void *)(v169 | 0x8000000000000000);
          *v139 = v167;
        }
        else
        {
          *((_BYTE *)v139 + 23) = v142;
          v167 = (char *)v139;
        }
        v170 = &v167[v142];
        if (v167 <= v143 && v170 > v143)
          goto LABEL_373;
        if (v142)
          memmove(v167, v143, v142);
        *v170 = 0;
        *((_DWORD *)v139 + 6) = v166;
        *((_BYTE *)v139 + 28) = 1;
        *((_BYTE *)v139 + 32) = 0;
        v140 = v139 + 5;
        *((_DWORD *)v139 + 9) = 0;
        goto LABEL_250;
      }
      v144 = *(void ***)(v3 + 24);
      v145 = 0xCCCCCCCCCCCCCCCDLL * (v139 - v144) + 1;
      if (v145 > 0x666666666666666)
        goto LABEL_374;
      v146 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v141 - (_QWORD)v144) >> 3);
      if (2 * v146 > v145)
        v145 = 2 * v146;
      if (v146 >= 0x333333333333333)
        v147 = 0x666666666666666;
      else
        v147 = v145;
      if (!v147)
        goto LABEL_373;
      if (v147 > 0x666666666666666)
        goto LABEL_375;
      v148 = *((_DWORD *)v137 + 6);
      v149 = 40 * v147;
      v150 = (char *)operator new(40 * v147);
      v151 = v150;
      if (v137[23] < 0)
      {
        v152 = *((_QWORD *)v137 + 1);
        if ((v152 & 0x8000000000000000) != 0)
          goto LABEL_373;
        v153 = *(char **)v137;
        if (v152)
        {
          if (!v153)
            goto LABEL_373;
        }
        if (v152 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_374;
      }
      else
      {
        v152 = v137[23];
        v153 = v137;
      }
      v154 = &v150[8 * (v139 - v144)];
      v244 = v149;
      if (v152 > 0x16)
      {
        v157 = (v152 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v152 | 7) != 0x17)
          v157 = v152 | 7;
        v158 = v157 + 1;
        v155 = (char *)operator new(v157 + 1);
        *((_QWORD *)v154 + 1) = v152;
        *((_QWORD *)v154 + 2) = v158 | 0x8000000000000000;
        *(_QWORD *)v154 = v155;
        v156 = &v155[v152];
        if (v155 <= v153)
        {
LABEL_275:
          if (v156 > v153)
            goto LABEL_373;
        }
      }
      else
      {
        v154[23] = v152;
        v155 = &v150[8 * (v139 - v144)];
        v156 = &v154[v152];
        if (v154 <= v153)
          goto LABEL_275;
      }
      if (v152)
        memmove(v155, v153, v152);
      *v156 = 0;
      v159 = &v151[8 * (v139 - v144)];
      *((_DWORD *)v159 + 6) = v148;
      v160 = &v151[v244];
      v159[28] = 1;
      v159[32] = 0;
      *((_DWORD *)v159 + 9) = 0;
      v140 = (void **)(v154 + 40);
      if (v139 == v144)
      {
        v3 = a3;
        *(_QWORD *)(a3 + 24) = v154;
        *(_QWORD *)(a3 + 32) = v140;
        *(_QWORD *)(a3 + 40) = v160;
        v138 = v242;
      }
      else
      {
        v161 = 0;
        v3 = a3;
        do
        {
          v162 = (std::string *)&v154[v161 * 8 - 40];
          v163 = (const std::string::value_type **)&v139[v161 - 5];
          if (*((char *)&v139[v161 - 2] - 1) < 0)
          {
            std::string::__init_copy_ctor_external(v162, *v163, (std::string::size_type)v139[v161 - 4]);
          }
          else
          {
            v164 = *(_OWORD *)v163;
            *(_QWORD *)&v154[v161 * 8 - 24] = v139[v161 - 3];
            *(_OWORD *)&v162->__r_.__value_.__l.__data_ = v164;
          }
          *(_OWORD *)&v154[v161 * 8 - 16] = *(_OWORD *)&v139[v161 - 2];
          v161 -= 5;
        }
        while (&v139[v161] != v144);
        v139 = *(void ***)(a3 + 24);
        v165 = *(void ***)(a3 + 32);
        *(_QWORD *)(a3 + 24) = &v154[v161 * 8];
        *(_QWORD *)(a3 + 32) = v140;
        *(_QWORD *)(a3 + 40) = v160;
        if (v165 == v139)
        {
          v138 = v242;
          if (!v139)
            goto LABEL_250;
LABEL_306:
          operator delete(v139);
          goto LABEL_250;
        }
        v138 = v242;
        do
        {
          if (*((char *)v165 - 17) < 0)
            operator delete(*(v165 - 5));
          v165 -= 5;
        }
        while (v165 != v139);
      }
      if (v139)
        goto LABEL_306;
LABEL_250:
      *(_QWORD *)(v3 + 32) = v140;
      v137 += 32;
      v139 = v140;
    }
    while (v137 != v138);
  }
LABEL_309:
  if ((v236 & 0x100000000) == 0)
    goto LABEL_351;
  v173 = *(char **)(v3 + 56);
  v172 = *(_QWORD *)(v3 + 64);
  if ((unint64_t)v173 < v172)
  {
    if (v173)
    {
      *(_DWORD *)v173 = 0;
      v174 = v173 + 4;
      goto LABEL_329;
    }
LABEL_373:
    __break(1u);
LABEL_374:
    abort();
  }
  v175 = *(_BYTE **)(v3 + 48);
  v176 = (v173 - v175) >> 2;
  v177 = v176 + 1;
  if ((unint64_t)(v176 + 1) >> 62)
    goto LABEL_374;
  v178 = v172 - (_QWORD)v175;
  if (v178 >> 1 > v177)
    v177 = v178 >> 1;
  v179 = (unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL;
  v180 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v179)
    v180 = v177;
  if (!v180)
    goto LABEL_373;
  if (v180 >> 62)
    goto LABEL_375;
  v181 = 4 * v180;
  v182 = operator new(4 * v180);
  v183 = &v182[4 * v176];
  *v183 = 0;
  v174 = (char *)(v183 + 1);
  if (v173 != v175)
  {
    v184 = v173 - v175 - 4;
    if (v184 < 0x2C)
      goto LABEL_378;
    if ((unint64_t)(v175 - v182) < 0x20)
      goto LABEL_378;
    v185 = (v184 >> 2) + 1;
    v186 = 4 * (v185 & 0x7FFFFFFFFFFFFFF8);
    v187 = &v173[-v186];
    v183 = (_DWORD *)((char *)v183 - v186);
    v188 = &v182[v173 - v175 - 16];
    v189 = v173 - 16;
    v190 = v185 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v191 = *(_OWORD *)v189;
      *(v188 - 1) = *((_OWORD *)v189 - 1);
      *v188 = v191;
      v188 -= 2;
      v189 -= 32;
      v190 -= 8;
    }
    while (v190);
    v173 = v187;
    if (v185 != (v185 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_378:
      do
      {
        v192 = *((_DWORD *)v173 - 1);
        v173 -= 4;
        *--v183 = v192;
      }
      while (v173 != v175);
    }
  }
  *(_QWORD *)(v3 + 48) = v183;
  *(_QWORD *)(v3 + 56) = v174;
  *(_QWORD *)(v3 + 64) = &v182[v181];
  if (v175)
    operator delete(v175);
LABEL_329:
  *(_QWORD *)(v3 + 56) = v174;
  if ((v235 & 1) == 0)
    goto LABEL_351;
  v193 = *(_QWORD *)(v3 + 64);
  if ((unint64_t)v174 < v193)
  {
    *(_DWORD *)v174 = 1;
    v194 = v174 + 4;
    goto LABEL_350;
  }
  v195 = *(char **)(v3 + 48);
  v196 = (v174 - v195) >> 2;
  v197 = v196 + 1;
  if ((unint64_t)(v196 + 1) >> 62)
    goto LABEL_374;
  v198 = v193 - (_QWORD)v195;
  if (v198 >> 1 > v197)
    v197 = v198 >> 1;
  v179 = (unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL;
  v199 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v179)
    v199 = v197;
  if (!v199)
    goto LABEL_373;
  if (v199 >> 62)
    goto LABEL_375;
  v200 = 4 * v199;
  v201 = operator new(4 * v199);
  v202 = &v201[4 * v196];
  v203 = &v201[v200];
  *v202 = 1;
  v194 = v202 + 1;
  if (v174 != v195)
  {
    v204 = v174 - v195 - 4;
    if (v204 < 0x2C)
    {
      v205 = v174;
      goto LABEL_347;
    }
    if ((unint64_t)(v195 - v201) < 0x20)
    {
      v205 = v174;
      goto LABEL_347;
    }
    v206 = (v204 >> 2) + 1;
    v207 = 4 * (v206 & 0x7FFFFFFFFFFFFFF8);
    v205 = &v174[-v207];
    v202 = (_DWORD *)((char *)v202 - v207);
    v208 = &v201[v174 - v195 - 16];
    v209 = v174 - 16;
    v210 = v206 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v211 = *(_OWORD *)v209;
      *(v208 - 1) = *((_OWORD *)v209 - 1);
      *v208 = v211;
      v208 -= 2;
      v209 -= 32;
      v210 -= 8;
    }
    while (v210);
    if (v206 != (v206 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_347:
        v212 = *((_DWORD *)v205 - 1);
        v205 -= 4;
        *--v202 = v212;
      }
      while (v205 != v195);
    }
  }
  *(_QWORD *)(v3 + 48) = v202;
  *(_QWORD *)(v3 + 56) = v194;
  *(_QWORD *)(v3 + 64) = v203;
  if (v195)
    operator delete(v195);
LABEL_350:
  *(_QWORD *)(v3 + 56) = v194;
LABEL_351:
  if ((v236 & 1) == 0)
    return;
  v214 = *(char **)(v3 + 56);
  v213 = *(_QWORD *)(v3 + 64);
  if ((unint64_t)v214 >= v213)
  {
    v216 = *(char **)(v3 + 48);
    v217 = (v214 - v216) >> 2;
    v218 = v217 + 1;
    if ((unint64_t)(v217 + 1) >> 62)
      goto LABEL_374;
    v219 = v213 - (_QWORD)v216;
    if (v219 >> 1 > v218)
      v218 = v219 >> 1;
    v179 = (unint64_t)v219 >= 0x7FFFFFFFFFFFFFFCLL;
    v220 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v179)
      v220 = v218;
    if (!v220)
      goto LABEL_373;
    if (!(v220 >> 62))
    {
      v221 = 4 * v220;
      v222 = operator new(4 * v220);
      v223 = &v222[4 * v217];
      v224 = &v222[v221];
      *v223 = 2;
      v215 = v223 + 1;
      if (v214 != v216)
      {
        v225 = v214 - v216 - 4;
        if (v225 < 0x2C)
          goto LABEL_379;
        if ((unint64_t)(v216 - v222) < 0x20)
          goto LABEL_379;
        v226 = (v225 >> 2) + 1;
        v227 = 4 * (v226 & 0x7FFFFFFFFFFFFFF8);
        v228 = &v214[-v227];
        v223 = (_DWORD *)((char *)v223 - v227);
        v229 = &v222[v214 - v216 - 16];
        v230 = v214 - 16;
        v231 = v226 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v232 = *(_OWORD *)v230;
          *(v229 - 1) = *((_OWORD *)v230 - 1);
          *v229 = v232;
          v229 -= 2;
          v230 -= 32;
          v231 -= 8;
        }
        while (v231);
        v214 = v228;
        if (v226 != (v226 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_379:
          do
          {
            v233 = *((_DWORD *)v214 - 1);
            v214 -= 4;
            *--v223 = v233;
          }
          while (v214 != v216);
        }
      }
      *(_QWORD *)(v3 + 48) = v223;
      *(_QWORD *)(v3 + 56) = v215;
      *(_QWORD *)(v3 + 64) = v224;
      if (v216)
        operator delete(v216);
      goto LABEL_371;
    }
LABEL_375:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (!v214)
    goto LABEL_373;
  *(_DWORD *)v214 = 2;
  v215 = v214 + 4;
LABEL_371:
  *(_QWORD *)(v3 + 56) = v215;
}

char *std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21;

  v2 = 0x8E38E38E38E38E39 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7)
    abort();
  if (0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x1C71C71C71C71C72 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0x8E38E38E38E38E39 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0xE38E38E38E38E3)
    v5 = 0x1C71C71C71C71C7;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x1C71C71C71C71C7)
    goto LABEL_21;
  v7 = 144 * v5;
  v8 = (char *)operator new(144 * v5);
  v9 = &v8[144 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  v10 = &v8[v7];
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v9 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v9 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v9 + 11) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(v9 + 72) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *((_OWORD *)v9 + 6) = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v9 + 14) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(a2 + 120);
  *((_QWORD *)v9 + 17) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v12 = v9 + 144;
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v9;
    a1[1] = v12;
    a1[2] = v10;
    if (!v14)
      return v12;
    goto LABEL_15;
  }
  v15 = 0;
  do
  {
    v16 = &v9[v15];
    v17 = &v14[v15];
    v18 = *(_OWORD *)&v14[v15 - 144];
    *((_QWORD *)v16 - 16) = *(_QWORD *)&v14[v15 - 128];
    *((_OWORD *)v16 - 9) = v18;
    *((_QWORD *)v17 - 17) = 0;
    *((_QWORD *)v17 - 16) = 0;
    *((_QWORD *)v17 - 18) = 0;
    *(_OWORD *)(v16 - 120) = *(_OWORD *)&v14[v15 - 120];
    *((_QWORD *)v16 - 13) = *(_QWORD *)&v14[v15 - 104];
    *((_QWORD *)v17 - 15) = 0;
    *((_QWORD *)v17 - 14) = 0;
    v19 = *(_OWORD *)&v14[v15 - 96];
    *((_QWORD *)v17 - 13) = 0;
    *((_OWORD *)v16 - 6) = v19;
    *((_QWORD *)v16 - 10) = *(_QWORD *)&v14[v15 - 80];
    *((_QWORD *)v17 - 12) = 0;
    *((_QWORD *)v17 - 11) = 0;
    *((_QWORD *)v17 - 10) = 0;
    v20 = *(_OWORD *)&v14[v15 - 72];
    *((_QWORD *)v16 - 7) = *(_QWORD *)&v14[v15 - 56];
    *(_OWORD *)(v16 - 72) = v20;
    *((_QWORD *)v17 - 8) = 0;
    *((_QWORD *)v17 - 7) = 0;
    *((_QWORD *)v17 - 9) = 0;
    *((_OWORD *)v16 - 3) = *(_OWORD *)&v14[v15 - 48];
    *((_QWORD *)v16 - 4) = *(_QWORD *)&v14[v15 - 32];
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *((_QWORD *)v17 - 4) = 0;
    *(_OWORD *)(v16 - 24) = *(_OWORD *)&v14[v15 - 24];
    *((_QWORD *)v16 - 1) = *(_QWORD *)&v14[v15 - 8];
    *((_QWORD *)v17 - 3) = 0;
    *((_QWORD *)v17 - 2) = 0;
    *((_QWORD *)v17 - 1) = 0;
    v15 -= 144;
  }
  while (&v14[v15] != v13);
  v14 = (char *)*a1;
  v21 = (char *)a1[1];
  *a1 = &v9[v15];
  a1[1] = v12;
  a1[2] = v10;
  while (v21 != v14)
    cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v21 - 144));
  if (v14)
LABEL_15:
    operator delete(v14);
  return v12;
}

_QWORD *std::vector<webrtc::RtpCodecCapability>::__push_back_slow_path<webrtc::RtpCodecCapability const&>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  webrtc::RtpCodec *v9;
  webrtc::RtpCodec *v10;
  unint64_t v11;
  unint64_t *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  void (***v28)(char *);
  void (**v29)(char *);
  BOOL v30;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999)
    abort();
  if (0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x999999999999999ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v5 = 0x199999999999999;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_31:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x199999999999999)
    goto LABEL_31;
  v7 = 160 * v5;
  v8 = (char *)operator new(160 * v5);
  v9 = (webrtc::RtpCodec *)&v8[160 * v2];
  v10 = webrtc::RtpCodec::RtpCodec(v9, (const webrtc::RtpCodec *)a2);
  *(_QWORD *)v9 = off_24C0BCC10;
  v11 = *(_QWORD *)(a2 + 112);
  *((_QWORD *)v9 + 13) = *(_QWORD *)(a2 + 104);
  *((_QWORD *)v10 + 14) = 0;
  v12 = (unint64_t *)((char *)v10 + 112);
  if (v11 >= 2)
  {
    if ((v11 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v12, (unint64_t *)(a2 + 112));
      v14 = &v8[v7];
      v15 = (_QWORD *)((char *)v9 + 160);
      v17 = (char *)*a1;
      v16 = (char *)a1[1];
      if (v16 != *a1)
        goto LABEL_13;
LABEL_27:
      *a1 = v9;
      a1[1] = v15;
      a1[2] = v14;
      if (!v16)
        return v15;
      goto LABEL_24;
    }
    *v12 = v11;
    v13 = &v8[160 * v2];
    *(_OWORD *)(v13 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(v13 + 136) = *(_OWORD *)(a2 + 136);
    *((_QWORD *)v13 + 19) = *(_QWORD *)(a2 + 152);
  }
  v14 = &v8[v7];
  v15 = (_QWORD *)((char *)v9 + 160);
  v17 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
    goto LABEL_27;
LABEL_13:
  v18 = 0;
  do
  {
    v19 = (_QWORD *)((char *)v9 + v18);
    webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)((char *)v9 + v18 - 160), (const webrtc::RtpCodec *)&v16[v18 - 160]);
    *(v19 - 20) = off_24C0BCC10;
    v20 = *(_QWORD *)&v16[v18 - 56];
    *(v19 - 6) = 0;
    v21 = (unint64_t *)((char *)v9 + v18 - 48);
    *(_QWORD *)((char *)v9 + v18 - 56) = v20;
    v22 = *(_QWORD *)&v16[v18 - 48];
    if (v22 >= 2)
    {
      if ((v22 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v21, (unint64_t *)&v16[v18 - 48]);
      }
      else
      {
        *v21 = v22;
        v23 = (_QWORD *)((char *)v9 + v18);
        v24 = *(_OWORD *)&v16[v18 - 40];
        v25 = *(_OWORD *)&v16[v18 - 24];
        *(v23 - 1) = *(_QWORD *)&v16[v18 - 8];
        *(_OWORD *)(v23 - 3) = v25;
        *(_OWORD *)(v23 - 5) = v24;
      }
    }
    v18 -= 160;
  }
  while (&v16[v18] != v17);
  v16 = (char *)*a1;
  v26 = (char *)a1[1];
  *a1 = (char *)v9 + v18;
  a1[1] = v15;
  a1[2] = v14;
  if (v26 != v16)
  {
    v27 = v26 - 160;
    v28 = (void (***)(char *))(v26 - 160);
    do
    {
      v29 = *v28;
      v28 -= 20;
      (*v29)(v27);
      v30 = v27 == v16;
      v27 = (char *)v28;
    }
    while (!v30);
  }
  if (v16)
LABEL_24:
    operator delete(v16);
  return v15;
}

_DWORD *std::vector<webrtc::RtpCodecParameters>::__push_back_slow_path<webrtc::RtpCodecParameters>(void **a1, const webrtc::RtpCodec *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  webrtc::RtpCodec *v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  void (***v18)(char *);
  void (**v19)(char *);
  BOOL v20;

  v2 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    abort();
  if (0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)) >= 0x124924924924924)
    v5 = 0x249249249249249;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_23:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x249249249249249)
    goto LABEL_23;
  v7 = 112 * v5;
  v8 = (char *)operator new(112 * v5);
  v9 = &v8[v7];
  v10 = (webrtc::RtpCodec *)&v8[112 * v2];
  webrtc::RtpCodec::RtpCodec(v10, a2);
  *(_QWORD *)v10 = off_24C0BCC30;
  *((_DWORD *)v10 + 26) = *((_DWORD *)a2 + 26);
  v11 = (_DWORD *)((char *)v10 + 112);
  v13 = (char *)*a1;
  v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_17;
  }
  v14 = 0;
  do
  {
    v15 = (_DWORD *)((char *)v10 + v14);
    webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)((char *)v10 + v14 - 112), (const webrtc::RtpCodec *)&v12[v14 - 112]);
    *((_QWORD *)v15 - 14) = off_24C0BCC30;
    *(v15 - 2) = *(_DWORD *)&v12[v14 - 8];
    v14 -= 112;
  }
  while (&v12[v14] != v13);
  v12 = (char *)*a1;
  v16 = (char *)a1[1];
  *a1 = (char *)v10 + v14;
  a1[1] = v11;
  a1[2] = v9;
  if (v16 != v12)
  {
    v17 = v16 - 112;
    v18 = (void (***)(char *))(v16 - 112);
    do
    {
      v19 = *v18;
      v18 -= 14;
      (*v19)(v17);
      v20 = v17 == v12;
      v17 = (char *)v18;
    }
    while (!v20);
  }
  if (v12)
LABEL_17:
    operator delete(v12);
  return v11;
}

_QWORD *webrtc::RtpPayloadParams::RtpPayloadParams(uint64_t a1, int a2, __int16 *a3, uint64_t a4)
{
  _QWORD *result;
  int *p_p;
  unint64_t v9;
  BOOL v10;
  int v11;
  int v12;
  int *v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  __int128 v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *__p;
  unint64_t v30;
  unsigned __int8 v31;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_WORD *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 932) = a2;
  *(_WORD *)(a1 + 936) = -1;
  *(_BYTE *)(a1 + 938) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-GenericPictureId", 23);
  if ((char)v31 < 0)
  {
    v9 = v30;
    if ((v30 & 0x8000000000000000) != 0)
      goto LABEL_41;
    p_p = (int *)__p;
    if (v30)
    {
      if (!__p)
        goto LABEL_41;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v9 = v31;
  }
  if (v9 >= 7)
  {
    v11 = *p_p;
    v12 = *(int *)((char *)p_p + 3);
    v10 = v11 == 1650552389 && v12 == 1684368482;
    if ((v31 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v10 = 0;
  if ((v31 & 0x80) != 0)
LABEL_16:
    operator delete(__p);
LABEL_17:
  *(_BYTE *)(a1 + 960) = v10;
  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&__p, a4, "WebRTC-GenericCodecDependencyDescriptor", 39);
  if (((char)v31 & 0x80000000) == 0)
  {
    v14 = (int *)&__p;
    v15 = v31;
    goto LABEL_22;
  }
  v15 = v30;
  if ((v30 & 0x8000000000000000) == 0)
  {
    v14 = (int *)__p;
    if (!v30 || __p)
    {
LABEL_22:
      if (v15 >= 7)
      {
        v17 = *v14;
        v18 = *(int *)((char *)v14 + 3);
        v16 = v17 == 1650552389 && v18 == 1684368482;
        if ((v31 & 0x80) == 0)
        {
LABEL_33:
          *(_BYTE *)(a1 + 961) = v16;
          *(_QWORD *)&v20 = -1;
          *((_QWORD *)&v20 + 1) = -1;
          *(_OWORD *)(a1 + 304) = v20;
          *(_OWORD *)(a1 + 320) = v20;
          *(_OWORD *)(a1 + 336) = v20;
          *(_OWORD *)(a1 + 352) = v20;
          *(_OWORD *)(a1 + 368) = v20;
          *(_OWORD *)(a1 + 384) = v20;
          *(_OWORD *)(a1 + 400) = v20;
          *(_OWORD *)(a1 + 416) = v20;
          *(_OWORD *)(a1 + 432) = v20;
          *(_OWORD *)(a1 + 448) = v20;
          *(_OWORD *)(a1 + 464) = v20;
          *(_OWORD *)(a1 + 480) = v20;
          *(_OWORD *)(a1 + 496) = v20;
          *(_OWORD *)(a1 + 512) = v20;
          *(_OWORD *)(a1 + 528) = v20;
          *(_OWORD *)(a1 + 544) = v20;
          *(_OWORD *)(a1 + 560) = v20;
          *(_OWORD *)(a1 + 576) = v20;
          *(_OWORD *)(a1 + 592) = v20;
          *(_OWORD *)(a1 + 608) = v20;
          *(_OWORD *)(a1 + 624) = v20;
          *(_OWORD *)(a1 + 640) = v20;
          *(_OWORD *)(a1 + 656) = v20;
          *(_OWORD *)(a1 + 672) = v20;
          *(_OWORD *)(a1 + 688) = v20;
          *(_OWORD *)(a1 + 704) = v20;
          *(_OWORD *)(a1 + 720) = v20;
          *(_OWORD *)(a1 + 736) = v20;
          *(_OWORD *)(a1 + 752) = v20;
          *(_OWORD *)(a1 + 768) = v20;
          *(_OWORD *)(a1 + 784) = v20;
          *(_OWORD *)(a1 + 800) = v20;
          *(_QWORD *)(a1 + 920) = -1;
          *(_OWORD *)(a1 + 888) = v20;
          *(_OWORD *)(a1 + 904) = v20;
          *(_OWORD *)(a1 + 856) = v20;
          *(_OWORD *)(a1 + 872) = v20;
          *(_OWORD *)(a1 + 840) = v20;
          if (rtc::g_clock)
          {
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
            if (a3)
            {
LABEL_35:
              v22 = *a3;
              v23 = *((_BYTE *)a3 + 2);
              v24 = *((_QWORD *)a3 + 2);
LABEL_40:
              *(_WORD *)(a1 + 936) = v22;
              *(_BYTE *)(a1 + 938) = v23;
              *(_QWORD *)(a1 + 952) = v24;
              return (_QWORD *)a1;
            }
          }
          else
          {
            if (!dword_253EA791C)
              mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
            v21 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
                / dword_253EA791C;
            if (a3)
              goto LABEL_35;
          }
          v25 = (v21 / 1000) ^ ((unint64_t)(v21 / 1000) >> 12) ^ (((v21 / 1000) ^ ((unint64_t)(v21 / 1000) >> 12)) << 25);
          v26 = v25 ^ (v25 >> 27);
          v22 = (23837 * v26) & 0x7FFF;
          v27 = v26 ^ (v26 >> 12) ^ ((v26 ^ (v26 >> 12)) << 25);
          v28 = v27 ^ (v27 >> 27);
          v23 = 29 * v28;
          v24 = (unsigned __int16)(-8931
                                 * (((v28 ^ (v28 >> 12) ^ ((v28 ^ (v28 >> 12)) << 25)) >> 27) ^ v28 ^ (v28 >> 12)));
          goto LABEL_40;
        }
      }
      else
      {
        v16 = 0;
        if ((v31 & 0x80) == 0)
          goto LABEL_33;
      }
      operator delete(__p);
      goto LABEL_33;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t webrtc::RtpPayloadParams::RtpPayloadParams(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)a1 = 0;
  if (*(_QWORD *)a2 >= 2uLL)
    absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::InitFrom((unint64_t *)a1, (unint64_t *)a2);
  *(_QWORD *)(a1 + 232) = 0;
  v4 = *(_QWORD *)(a2 + 232);
  if (v4 >= 2)
  {
    if ((v4 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<std::optional<long long>,4ul,std::allocator<std::optional<long long>>>::InitFrom((unint64_t *)(a1 + 232), (unint64_t *)(a2 + 232));
    }
    else
    {
      *(_QWORD *)(a1 + 232) = v4;
      v5 = *(_OWORD *)(a2 + 240);
      v6 = *(_OWORD *)(a2 + 256);
      v7 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v7;
      *(_OWORD *)(a1 + 240) = v5;
      *(_OWORD *)(a1 + 256) = v6;
    }
  }
  memcpy((void *)(a1 + 304), (const void *)(a2 + 304), 0x200uLL);
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  v8 = *(_BYTE **)(a2 + 816);
  v9 = *(_BYTE **)(a2 + 824);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new(v9 - v8);
    *(_QWORD *)(a1 + 816) = v11;
    *(_QWORD *)(a1 + 824) = v11;
    v12 = &v11[64 * (v10 >> 6)];
    *(_QWORD *)(a1 + 832) = v12;
    memcpy(v11, v8, v10);
    *(_QWORD *)(a1 + 824) = v12;
  }
  v13 = *(_OWORD *)(a2 + 840);
  v14 = *(_OWORD *)(a2 + 856);
  v15 = *(_OWORD *)(a2 + 888);
  *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
  *(_OWORD *)(a1 + 888) = v15;
  *(_OWORD *)(a1 + 840) = v13;
  *(_OWORD *)(a1 + 856) = v14;
  v16 = *(_OWORD *)(a2 + 904);
  v17 = *(_OWORD *)(a2 + 920);
  v18 = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 946) = *(_OWORD *)(a2 + 946);
  *(_OWORD *)(a1 + 920) = v17;
  *(_OWORD *)(a1 + 936) = v18;
  *(_OWORD *)(a1 + 904) = v16;
  return a1;
}

void webrtc::RtpPayloadParams::GetRtpVideoHeader(absl::variant_internal *a1@<X0>, uint64_t a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  int v19;
  __int128 v20;
  char v21;
  int v22;
  unint64_t v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  __int16 *v31;
  __int16 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  size_t v36;
  _BYTE *v37;
  int v38;
  unint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  char v45;
  __int128 v46;
  __int128 v47;
  int v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  __int16 v59;
  unint64_t v60;
  int v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  int v79;
  int v80;
  unsigned int v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  unsigned __int8 v114;
  int *v115;
  int *v116;
  size_t v117;
  unint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int *v130;
  _OWORD *v131;
  __int128 *v132;
  uint64_t v133;
  __int128 v134;
  unint64_t v135;
  _DWORD *v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  unint64_t v147;
  char *v148;
  size_t v149;
  char *v150;
  int *v151;
  _OWORD *v152;
  __int128 *v153;
  unint64_t v154;
  __int128 v155;
  unint64_t v156;
  _DWORD *v157;
  int v158;
  uint64_t v159;
  int v160;
  _BYTE *v161;
  void **v162;
  void **v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  int v172;
  __int128 v173;
  uint64_t *v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unsigned int v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  size_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  size_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  size_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  size_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  size_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  size_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  size_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  _OWORD *v265;
  __int128 v266;
  unint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t *v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t *v289;
  unint64_t *v290;
  uint64_t v291;
  __int128 v292;
  _BYTE v293[48];
  unint64_t v294;
  void *v295[2];
  __int128 v296;
  uint64_t v297;
  unint64_t v298;
  void *__p[2];
  uint64_t v300;
  unint64_t v301;
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  uint64_t v305;

  v9 = a3;
  v10 = a2;
  v11 = (unint64_t)a1;
  v12 = a9;
  v305 = *MEMORY[0x24BDAC8D0];
  v13 = (_WORD *)(a9 + 288);
  if ((_BYTE)a5)
  {
    v14 = a4;
  }
  else
  {
    v14 = *((_QWORD *)a1 + 119);
    *((_QWORD *)a1 + 119) = v14 + 1;
  }
  *(_BYTE *)a9 = 0;
  *(_BYTE *)(a9 + 144) = 0;
  *(_QWORD *)(a9 + 152) = 0;
  *(_QWORD *)(a9 + 159) = 0;
  *(_WORD *)(a9 + 167) = 1;
  *(_DWORD *)(a9 + 172) = 0;
  *(_BYTE *)(a9 + 176) = 0;
  *(_BYTE *)(a9 + 192) = 0;
  *(_QWORD *)(a9 + 200) = 0;
  v15 = a9 + 200;
  *(_QWORD *)(a9 + 206) = 0;
  *(_BYTE *)(a9 + 212) = -1;
  *(_BYTE *)(a9 + 216) = 0;
  *(_BYTE *)(a9 + 284) = 0;
  *(_BYTE *)(a9 + 288) = 0;
  *(_BYTE *)(a9 + 290) = 0;
  *(_QWORD *)(a9 + 1936) = 0;
  *(_BYTE *)(a9 + 1944) = 0;
  *(_BYTE *)(a9 + 1968) = 0;
  if (a3)
  {
    v16 = *(_QWORD *)(a2 + 184);
    v17 = *(_DWORD *)a3;
    *(_DWORD *)(v12 + 172) = *(_DWORD *)a3;
    v18 = *(_BYTE *)(a3 + 1632);
    *(_BYTE *)(v12 + 167) = v18;
    switch(v17)
    {
      case 0:
        *(_DWORD *)(v12 + 172) = 0;
        break;
      case 1:
        *(_QWORD *)(v12 + 296) = 0;
        *(_QWORD *)(v12 + 304) = 0;
        *(_DWORD *)(v12 + 312) = 0;
        *(_QWORD *)(v12 + 1936) = 1;
        *(_DWORD *)(v12 + 298) = -1;
        *(_BYTE *)(v12 + 296) = *(_BYTE *)(a3 + 8);
        *(_WORD *)(v12 + 302) = *(_WORD *)(a3 + 9);
        *(_DWORD *)(v12 + 304) = *(char *)(a3 + 11);
        break;
      case 2:
        LODWORD(v291) = v14;
        bzero((void *)(v12 + 312), 0x658uLL);
        *(_QWORD *)(v12 + 1936) = 2;
        *(_DWORD *)(v12 + 296) = 0;
        *(_WORD *)(v12 + 300) = 0;
        *(_DWORD *)(v12 + 302) = 0x7FFFFFFF;
        *(_WORD *)(v12 + 306) = -1;
        *(_BYTE *)(v12 + 1928) = 1;
        *(_WORD *)(v12 + 296) = *(_WORD *)(v9 + 9);
        v19 = *(unsigned __int8 *)(v9 + 11);
        *(_BYTE *)(v12 + 301) = *(_BYTE *)(v9 + 12);
        *(_BYTE *)(v12 + 308) = *(_BYTE *)(v9 + 13);
        *(_WORD *)(v12 + 310) = *(_WORD *)(v9 + 14);
        *(_BYTE *)(v12 + 312) = *(_BYTE *)(v9 + 16);
        v20 = *(_OWORD *)(v9 + 24);
        *(_OWORD *)(v12 + 328) = v20;
        *(_BYTE *)(v12 + 300) = v19;
        if ((v16 & 0xFF00000000) != 0)
          v21 = v16;
        else
          v21 = -1;
        if ((unint64_t)v20 <= 1)
          v21 = -1;
        *(_BYTE *)(v12 + 309) = v21;
        if (!v19)
          goto LABEL_31;
        v22 = *(unsigned __int8 *)(v9 + 40);
        *(_BYTE *)(v12 + 344) = v22;
        if (!v22 || !(_QWORD)v20)
          goto LABEL_24;
        if ((unint64_t)v20 < 8)
        {
          v23 = 0;
LABEL_22:
          v28 = v20 - v23;
          v29 = 2 * v23;
          v30 = (_WORD *)(2 * v23 + v12 + 362);
          v31 = (__int16 *)(v29 + v9 + 58);
          do
          {
            *(v30 - 8) = *(v31 - 8);
            v32 = *v31++;
            *v30++ = v32;
            --v28;
          }
          while (v28);
          goto LABEL_24;
        }
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        v24 = (__int128 *)(v9 + 58);
        v25 = (_OWORD *)(v12 + 346);
        v26 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          *v25 = *(v24 - 1);
          v27 = *v24++;
          v25[1] = v27;
          ++v25;
          v26 -= 8;
        }
        while (v26);
        if ((_QWORD)v20 != v23)
          goto LABEL_22;
LABEL_24:
        v33 = *(_QWORD *)(v9 + 80);
        *(_QWORD *)(v12 + 384) = v33;
        if (v33)
        {
          v34 = 0;
          v35 = v12 + 1157;
          v36 = v9 + 853;
          do
          {
            v37 = (_BYTE *)(v12 + v34);
            v37[392] = *(_BYTE *)(v9 + v34 + 88);
            v37[647] = *(_BYTE *)(v9 + v34 + 343);
            v38 = *(unsigned __int8 *)(v9 + v34 + 598);
            v37[902] = v38;
            if (v38)
            {
              v39 = 0;
              v40 = v37 + 902;
              do
              {
                *(_BYTE *)(v35 + v39) = *(_BYTE *)(v36 + v39);
                ++v39;
              }
              while (v39 < *v40);
            }
            ++v34;
            v35 += 3;
            v36 += 3;
          }
          while (v34 < *(_QWORD *)(v12 + 384));
        }
LABEL_31:
        a3 = *(unsigned __int8 *)(v9 + 1624);
        *(_BYTE *)(v12 + 313) = a3;
        if (a3)
          a1 = (absl::variant_internal *)memcpy((void *)(v12 + 314), (const void *)(v9 + 1625), a3);
        *(_BYTE *)(v12 + 1928) = v18;
        break;
      case 4:
        *(_OWORD *)(v12 + 408) = 0u;
        *(_OWORD *)(v12 + 424) = 0u;
        *(_OWORD *)(v12 + 376) = 0u;
        *(_OWORD *)(v12 + 392) = 0u;
        *(_OWORD *)(v12 + 344) = 0u;
        *(_OWORD *)(v12 + 360) = 0u;
        *(_OWORD *)(v12 + 312) = 0u;
        *(_OWORD *)(v12 + 328) = 0u;
        *(_OWORD *)(v12 + 296) = 0u;
        *(_QWORD *)(v12 + 1936) = 3;
        *(_DWORD *)(v12 + 432) = *(_DWORD *)(a3 + 8);
        break;
      default:
        break;
    }
  }
  v41 = *(_QWORD *)(v10 + 156);
  if ((v41 & 0xFF00000000) == 0)
    LOBYTE(v41) = 0;
  *(_BYTE *)(v12 + 168) = v41;
  v42 = *(_DWORD *)(v10 + 24);
  v43 = *(_DWORD *)(v10 + 28);
  *(_DWORD *)(v12 + 152) = v42;
  *(_DWORD *)(v12 + 160) = v43;
  *(_BYTE *)(v12 + 164) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)(v12 + 176) = *(_OWORD *)(v10 + 112);
  *(_BYTE *)(v12 + 192) = *(_BYTE *)(v10 + 128);
  v44 = *(_DWORD *)(v10 + 4);
  *(_WORD *)(v12 + 156) = *(_DWORD *)v10;
  *(_WORD *)(v12 + 158) = v44;
  v45 = *(_BYTE *)(v10 + 292);
  if (v45)
  {
    v45 = *(_BYTE *)(v10 + 224);
    v46 = *(_OWORD *)(v10 + 241);
    v292 = *(_OWORD *)(v10 + 225);
    *(_OWORD *)v293 = v46;
    v47 = *(_OWORD *)(v10 + 273);
    *(_OWORD *)&v293[16] = *(_OWORD *)(v10 + 257);
    *(_OWORD *)&v293[32] = v47;
    v48 = *(unsigned __int8 *)(v12 + 284);
    if (v48 == 1)
      goto LABEL_38;
LABEL_41:
    if (v48)
    {
      *(_BYTE *)(v12 + 284) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 216) = v45;
      v51 = *(_OWORD *)v293;
      *(_OWORD *)(v12 + 217) = v292;
      *(_OWORD *)(v12 + 233) = v51;
      v52 = *(_OWORD *)&v293[32];
      *(_OWORD *)(v12 + 249) = *(_OWORD *)&v293[16];
      *(_OWORD *)(v12 + 265) = v52;
      *(_BYTE *)(v12 + 284) = 1;
    }
    goto LABEL_44;
  }
  v48 = *(unsigned __int8 *)(v12 + 284);
  if (*(_BYTE *)(v12 + 284))
    goto LABEL_41;
LABEL_38:
  if (v48)
  {
    *(_BYTE *)(v12 + 216) = v45;
    v49 = *(_OWORD *)v293;
    *(_OWORD *)(v12 + 217) = v292;
    *(_OWORD *)(v12 + 233) = v49;
    v50 = *(_OWORD *)&v293[32];
    *(_OWORD *)(v12 + 249) = *(_OWORD *)&v293[16];
    *(_OWORD *)(v12 + 265) = v50;
  }
LABEL_44:
  v53 = *(_DWORD *)(v10 + 296);
  *v13 = v53;
  *(_BYTE *)(v12 + 290) = BYTE2(v53);
  if (*(_BYTE *)(v10 + 40) && *(unsigned __int8 *)(v10 + 40) != 255)
  {
    v54 = *(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 16);
    __asm { BR              X15 }
  }
  *(_BYTE *)(v12 + 212) = -1;
  if (v9 && *(_DWORD *)v9 == 2)
  {
    v55 = *(unsigned __int8 *)(v9 + 8);
    LODWORD(v56) = v42 == 3;
    if (!*(_BYTE *)(v9 + 8))
    {
      v57 = *(_DWORD *)(v12 + 172);
      if (v57 != 2)
        goto LABEL_51;
LABEL_59:
      if (*(_QWORD *)(v12 + 1936) != 2)
LABEL_564:
        absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, a3, a4, a5, a6, a7, a8);
      *(_WORD *)(v12 + 302) = *(_WORD *)(v11 + 936);
      v58 = *(unsigned __int8 *)(v12 + 308);
      if (v58 != 255 || *(unsigned __int8 *)(v12 + 309) != 255)
      {
        if (v55 && (v58 == 255 || !*(_BYTE *)(v12 + 308)))
          ++*(_BYTE *)(v11 + 938);
        *(_WORD *)(v12 + 306) = *(unsigned __int8 *)(v11 + 938);
        if (!v9)
          goto LABEL_74;
        goto LABEL_72;
      }
      goto LABEL_71;
    }
  }
  else
  {
    LODWORD(v56) = v42 == 3;
  }
  *(_WORD *)(v11 + 936) = (*(_WORD *)(v11 + 936) + 1) & 0x7FFF;
  v55 = 1;
  v57 = *(_DWORD *)(v12 + 172);
  if (v57 == 2)
    goto LABEL_59;
LABEL_51:
  if (v57 == 1)
  {
    if (*(_QWORD *)(v12 + 1936) != 1)
LABEL_563:
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, a3, a4, a5, a6, a7, a8);
    *(_WORD *)(v12 + 298) = *(_WORD *)(v11 + 936);
    if (!*(_BYTE *)(v12 + 302))
    {
      v114 = *(_BYTE *)(v11 + 938) + 1;
      *(_BYTE *)(v11 + 938) = v114;
      *(_WORD *)(v12 + 300) = v114;
      if (!v9)
        goto LABEL_74;
      goto LABEL_72;
    }
    if (*(unsigned __int8 *)(v12 + 302) != 255)
    {
      *(_WORD *)(v12 + 300) = *(unsigned __int8 *)(v11 + 938);
      if (!v9)
        goto LABEL_74;
LABEL_72:
      if (!*(_BYTE *)(v9 + 1848))
        goto LABEL_74;
      v60 = *(_QWORD *)(v9 + 1744);
      if (v60 < 2)
        goto LABEL_74;
      if ((v56 & 1) != 0)
      {
        v63 = *(_QWORD *)(v9 + 1824);
        if (v63 >> 60)
          goto LABEL_644;
        v10 = v11 + 232;
        absl::inlined_vector_internal::Storage<std::optional<long long>,4ul,std::allocator<std::optional<long long>>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<std::optional<long long>>>>((unint64_t *)(v11 + 232), v63);
        v64 = *(_QWORD *)(v9 + 1824);
        if (v64)
        {
          v65 = 0;
          v66 = *(_QWORD *)(v9 + 1816);
          v67 = 8;
          do
          {
            if (((*(_QWORD *)(v66 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v65) & 1) != 0)
            {
              if (v65 >= *(_QWORD *)v10 >> 1)
                goto LABEL_644;
              v68 = v11 + 240;
              if ((*(_QWORD *)v10 & 1) != 0)
                v68 = *(_QWORD *)(v11 + 240);
              if (*(_BYTE *)(v68 + v67))
                *(_BYTE *)(v68 + v67) = 0;
            }
            ++v65;
            v67 += 16;
          }
          while (v64 != v65);
        }
        if (!*(_BYTE *)(v9 + 1848))
          goto LABEL_644;
        v60 = *(_QWORD *)(v9 + 1744);
      }
      v10 = (unint64_t)&v292;
      v298 = 0;
      *(_QWORD *)v293 = 0;
      v300 = 0xFFFFFFFFLL;
      v292 = (unint64_t)v14;
      v115 = (int *)(v9 + 1752);
      if ((v60 & 1) != 0)
        v115 = *(int **)(v9 + 1752);
      if (v60 >= 2)
        v116 = v115;
      else
        v116 = 0;
      webrtc::FrameDependenciesCalculator::FromBuffersUsage((unint64_t *)v11, v14, v116, v60 >> 1, a5, a6, a7, a8, &v301);
      v294 = v301;
      *(_OWORD *)v295 = v302;
      v296 = v303;
      v297 = v304;
      webrtc::ChainDiffCalculator::From((_QWORD *)(v11 + 232), v14, (_QWORD *)(v9 + 1816), &v301);
      if ((v298 & 1) != 0)
        operator delete(__p[0]);
      v298 = v301;
      *(_OWORD *)__p = v302;
      *((_QWORD *)&v292 + 1) = *(_QWORD *)(v9 + 1640);
      v14 = (uint64_t)v293;
      if (v293 == (_BYTE *)(v9 + 1648))
      {
LABEL_315:
        v159 = *(_QWORD *)(v9 + 1840);
        v300 = v159;
        v160 = *(unsigned __int8 *)(v12 + 144);
        *(_OWORD *)v12 = v292;
        if (v160)
        {
          if (&v292 != (__int128 *)v12)
          {
            if ((v293[0] & 1) != 0)
              v161 = *(_BYTE **)&v293[8];
            else
              v161 = &v293[8];
            absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<webrtc::DecodeTargetIndication>,webrtc::DecodeTargetIndication const*>>((unint64_t *)(v12 + 16), (uint64_t)v161, *(uint64_t *)v293 >> 1);
            if ((v294 & 1) != 0)
              v162 = (void **)v295[0];
            else
              v162 = v295;
            absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<long long>,long long const*>>((unint64_t *)(v12 + 64), (uint64_t)v162, (uint64_t)v294 >> 1);
            if ((v298 & 1) != 0)
              v163 = (void **)__p[0];
            else
              v163 = __p;
            absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>((unint64_t *)(v12 + 112), (uint64_t)v163, (uint64_t)v298 >> 1);
            v159 = v300;
          }
          *(_QWORD *)(v12 + 136) = v159;
          if ((v298 & 1) != 0)
            goto LABEL_328;
          goto LABEL_329;
        }
        *(_QWORD *)(v12 + 16) = 0;
        if (*(_QWORD *)v293 < 2uLL)
        {
          *(_QWORD *)(v12 + 64) = 0;
          v164 = (unint64_t *)(v12 + 64);
          v165 = v294;
          if (v294 < 2)
            goto LABEL_336;
LABEL_360:
          if ((v165 & 1) != 0)
          {
            absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::InitFrom(v164, &v294);
            *(_QWORD *)(v12 + 112) = 0;
            v166 = (unint64_t *)(v12 + 112);
            v167 = v298;
            if (v298 < 2)
              goto LABEL_367;
          }
          else
          {
            *(_QWORD *)(v12 + 64) = v165;
            v175 = v296;
            *(_OWORD *)(v12 + 72) = *(_OWORD *)v295;
            *(_OWORD *)(v12 + 88) = v175;
            *(_QWORD *)(v12 + 104) = v297;
            *(_QWORD *)(v12 + 112) = 0;
            v166 = (unint64_t *)(v12 + 112);
            v167 = v298;
            if (v298 < 2)
              goto LABEL_367;
          }
LABEL_364:
          if ((v167 & 1) != 0)
          {
            absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v166, &v298);
          }
          else
          {
            *(_QWORD *)(v12 + 112) = v167;
            *(_OWORD *)(v12 + 120) = *(_OWORD *)__p;
          }
LABEL_367:
          *(_QWORD *)(v12 + 136) = v300;
          *(_BYTE *)(v12 + 144) = 1;
          if ((v298 & 1) != 0)
LABEL_328:
            operator delete(__p[0]);
LABEL_329:
          if ((v294 & 1) != 0)
          {
            operator delete(v295[0]);
            if ((v293[0] & 1) == 0)
              return;
          }
          else if ((v293[0] & 1) == 0)
          {
            return;
          }
          operator delete(*(void **)&v293[8]);
          return;
        }
        if ((v293[0] & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom((unint64_t *)(v12 + 16), (unint64_t *)v293);
          *(_QWORD *)(v12 + 64) = 0;
          v164 = (unint64_t *)(v12 + 64);
          v165 = v294;
          if (v294 >= 2)
            goto LABEL_360;
        }
        else
        {
          *(_QWORD *)(v12 + 16) = *(_QWORD *)v293;
          *(_OWORD *)(v12 + 24) = *(_OWORD *)&v293[8];
          *(_OWORD *)(v12 + 40) = *(_OWORD *)&v293[24];
          *(_QWORD *)(v12 + 56) = *(_QWORD *)&v293[40];
          *(_QWORD *)(v12 + 64) = 0;
          v164 = (unint64_t *)(v12 + 64);
          v165 = v294;
          if (v294 >= 2)
            goto LABEL_360;
        }
LABEL_336:
        *(_QWORD *)(v12 + 112) = 0;
        v166 = (unint64_t *)(v12 + 112);
        v167 = v298;
        if (v298 < 2)
          goto LABEL_367;
        goto LABEL_364;
      }
      v15 = *(_QWORD *)(v9 + 1648);
      if ((v15 & 1) != 0)
        v117 = *(_QWORD *)(v9 + 1656);
      else
        v117 = v9 + 1656;
      v118 = v15 >> 1;
      v119 = *(_BYTE **)&v293[8];
      v120 = v293[0] & 1;
      if ((v293[0] & 1) == 0)
        v119 = &v293[8];
      v121 = 10;
      if ((v293[0] & 1) != 0)
        v121 = *(_QWORD *)&v293[16];
      if (v121 >= v118)
      {
        v126 = *(_QWORD *)v293 >> 1;
        v127 = v118 - (*(_QWORD *)v293 >> 1);
        if (v118 < *(_QWORD *)v293 >> 1)
          v127 = 0;
        if (v126 >= v118)
          v128 = v15 >> 1;
        else
          v128 = *(_QWORD *)v293 >> 1;
        if (v128)
        {
          v129 = 0;
          if (v128 < 8)
            goto LABEL_269;
          if ((unint64_t)&v119[-v117] < 0x20)
            goto LABEL_269;
          v129 = v128 & 0x7FFFFFFFFFFFFFF8;
          v130 = (int *)(v117 + 4 * (v128 & 0x7FFFFFFFFFFFFFF8));
          v131 = v119 + 16;
          v132 = (__int128 *)(v117 + 16);
          v133 = v128 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v134 = *v132;
            *(v131 - 1) = *(v132 - 1);
            *v131 = v134;
            v131 += 2;
            v132 += 2;
            v133 -= 8;
          }
          while (v133);
          v117 += 4 * (v128 & 0x7FFFFFFFFFFFFFF8);
          if (v128 != v129)
          {
LABEL_269:
            v135 = v128 - v129;
            v136 = &v119[4 * v129];
            v130 = (int *)v117;
            do
            {
              v137 = *v130++;
              *v136++ = v137;
              --v135;
            }
            while (v135);
          }
          if (v126 >= v118)
            goto LABEL_314;
        }
        else
        {
          v130 = (int *)v117;
          if (v126 >= v118)
          {
LABEL_314:
            *(_QWORD *)v293 = v120 | v15 & 0xFFFFFFFFFFFFFFFELL;
            goto LABEL_315;
          }
        }
        if (!v119)
          goto LABEL_644;
        v123 = 0;
        v122 = 0;
        v118 = v127;
        v117 = (size_t)v130;
        v124 = &v119[4 * v126];
        v125 = 0;
        if (v118 < 8)
          goto LABEL_307;
      }
      else
      {
        if (2 * v121 <= v118)
          v122 = v15 >> 1;
        else
          v122 = 2 * v121;
        if (v122 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v123 = operator new(4 * v122);
        v124 = v123;
        v125 = 0;
        if (v118 < 8)
          goto LABEL_307;
      }
      if ((unint64_t)&v124[-v117] >= 0x20)
      {
        v125 = v118 & 0xFFFFFFFFFFFFFFF8;
        v151 = (int *)(v117 + 4 * (v118 & 0xFFFFFFFFFFFFFFF8));
        v152 = v124 + 16;
        v153 = (__int128 *)(v117 + 16);
        v154 = v118 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v155 = *v153;
          *(v152 - 1) = *(v153 - 1);
          *v152 = v155;
          v152 += 2;
          v153 += 2;
          v154 -= 8;
        }
        while (v154);
        if (v118 == v125)
        {
LABEL_310:
          if (v123)
          {
            if (v120)
              operator delete(*(void **)&v293[8]);
            *(_QWORD *)&v293[8] = v123;
            *(_QWORD *)&v293[16] = v122;
            v120 = 1;
          }
          goto LABEL_314;
        }
LABEL_308:
        v156 = v118 - v125;
        v157 = &v124[4 * v125];
        do
        {
          v158 = *v151++;
          *v157++ = v158;
          --v156;
        }
        while (v156);
        goto LABEL_310;
      }
LABEL_307:
      v151 = (int *)v117;
      goto LABEL_308;
    }
  }
  else if (!v57 && *(_BYTE *)(v11 + 960))
  {
    v59 = *(_WORD *)(v11 + 936);
    *(_QWORD *)(v12 + 1936) = 4;
    *(_WORD *)(v12 + 296) = v59;
  }
LABEL_71:
  if (v9)
    goto LABEL_72;
LABEL_74:
  switch(v57)
  {
    case 0:
      if (!*(_BYTE *)(v12 + 144))
        goto LABEL_80;
      if ((*(_BYTE *)(v12 + 112) & 1) != 0)
      {
        operator delete(*(void **)(v12 + 120));
        if ((*(_BYTE *)(v12 + 64) & 1) == 0)
        {
LABEL_78:
          if ((*(_BYTE *)(v12 + 16) & 1) == 0)
            goto LABEL_80;
          goto LABEL_79;
        }
      }
      else if ((*(_BYTE *)(v12 + 64) & 1) == 0)
      {
        goto LABEL_78;
      }
      operator delete(*(void **)(v12 + 72));
      if ((*(_BYTE *)(v12 + 16) & 1) == 0)
      {
LABEL_80:
        *(_QWORD *)(v12 + 64) = 0;
        *(_QWORD *)(v12 + 136) = 0xFFFFFFFFLL;
        *(_BYTE *)(v12 + 144) = 1;
        *(_QWORD *)v12 = v14;
        *(_DWORD *)(v12 + 24) = 2;
        *(_OWORD *)(v12 + 8) = xmmword_208F1A990;
        if ((_DWORD)v56)
        {
          v61 = 0;
          *(_QWORD *)(v11 + 360) = -1;
          *(_QWORD *)&v62 = -1;
          *((_QWORD *)&v62 + 1) = -1;
          *(_OWORD *)(v11 + 344) = v62;
          *(_OWORD *)(v11 + 328) = v62;
          *(_OWORD *)(v11 + 312) = v62;
        }
        else
        {
          v138 = *(_QWORD *)(v11 + 304);
          v61 = v14 - v138;
          *(_QWORD *)(v12 + 64) = 2;
          *(_QWORD *)(v12 + 72) = v138;
        }
        *(_DWORD *)(v12 + 120) = v61;
        *(_QWORD *)(v12 + 112) = 2;
        *(_QWORD *)(v11 + 304) = v14;
        return;
      }
LABEL_79:
      operator delete(*(void **)(v12 + 24));
      goto LABEL_80;
    case 1:
      if (!v9)
        return;
      if (*(_QWORD *)(v12 + 1936) != 1)
        goto LABEL_563;
      v69 = *(unsigned __int8 *)(v12 + 302);
      if (v69 == 255)
        v70 = 0;
      else
        v70 = *(unsigned __int8 *)(v12 + 302);
      if (v70 >= 8)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return;
        goto LABEL_231;
      }
      if (!*(_BYTE *)(v12 + 144))
        goto LABEL_292;
      if ((*(_BYTE *)(v12 + 112) & 1) != 0)
      {
        operator delete(*(void **)(v12 + 120));
        if ((*(_BYTE *)(v12 + 64) & 1) == 0)
        {
LABEL_290:
          if ((*(_BYTE *)(v12 + 16) & 1) == 0)
            goto LABEL_292;
          goto LABEL_291;
        }
      }
      else if ((*(_BYTE *)(v12 + 64) & 1) == 0)
      {
        goto LABEL_290;
      }
      operator delete(*(void **)(v12 + 72));
      if ((*(_BYTE *)(v12 + 16) & 1) != 0)
LABEL_291:
        operator delete(*(void **)(v12 + 24));
LABEL_292:
      *(_QWORD *)(v12 + 64) = 0;
      v290 = (unint64_t *)(v12 + 64);
      *(_QWORD *)(v12 + 112) = 0;
      v289 = (unint64_t *)(v12 + 112);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 136) = 0xFFFFFFFFLL;
      *(_BYTE *)(v12 + 144) = 1;
      *(_QWORD *)v12 = v14;
      *(_DWORD *)(v12 + 8) = 0;
      *(_DWORD *)(v12 + 12) = v70;
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<webrtc::DecodeTargetIndication>>>((uint64_t *)(v12 + 16), 4uLL);
      v147 = *(_QWORD *)(v12 + 16);
      if ((v147 & 1) != 0)
        v148 = *(char **)(v12 + 24);
      else
        v148 = (char *)(v12 + 24);
      LODWORD(v291) = v70;
      if (v70)
      {
        v149 = 4 * (v69 - (v69 != 0)) + 4;
        bzero(v148, v149);
        v150 = &v148[v149];
        if ((v147 & 1) != 0)
          v148 = *(char **)(v12 + 24);
        else
          v148 = (char *)(v12 + 24);
      }
      else
      {
        v150 = v148;
      }
      v170 = &v148[4 * (v147 >> 1)] - v150;
      v15 = v12 + 64;
      if (v170 >= 1)
        memset_pattern16(v150, &unk_208F1A9A0, 4 * (((unint64_t)v170 >> 2) - ((unint64_t)v170 > 3)) + 4);
      LODWORD(v10) = v291;
      if (*(_BYTE *)(v9 + 12))
      {
        *(_WORD *)(v11 + 928) = 257;
        if ((v56 & 1) != 0)
        {
          v171 = 0;
          *(_QWORD *)(v11 + 904) = v14;
          *(_QWORD *)(v11 + 912) = v14;
          *(_QWORD *)(v11 + 920) = v14;
          goto LABEL_432;
        }
        v176 = *(_QWORD *)(v9 + 40);
        if (!v176)
        {
LABEL_403:
          v188 = *(_QWORD *)(v9 + 72);
          LODWORD(v10) = v291;
          if (!v188)
            goto LABEL_427;
          v189 = (unint64_t *)(v9 + 48);
          do
          {
            v191 = *v189++;
            v190 = v191;
            if (v191 >= 3)
              goto LABEL_644;
            *(_QWORD *)(v11 + 904 + 8 * v190) = v14;
            --v188;
          }
          while (v188);
          goto LABEL_427;
        }
        v177 = 0;
        v10 = v11 + 904;
        v178 = (_QWORD *)(v12 + 72);
        while (1)
        {
          v179 = *(_QWORD *)(v9 + 8 + 8 * v177 + 8);
          *(_QWORD *)&v292 = 0;
          if (v179 >= 3)
            goto LABEL_644;
          v180 = *(_QWORD *)(v10 + 8 * v179);
          *(_QWORD *)&v292 = v180;
          v181 = *v290;
          v182 = (_QWORD *)*v178;
          if ((*v290 & 1) != 0)
            v183 = (_QWORD *)*v178;
          else
            v183 = (_QWORD *)(v12 + 72);
          v184 = v181 >> 1;
          if (v181 >= 2)
          {
            v185 = 8 * v184;
            v186 = &v183[v184];
            while (*v183 != v180)
            {
              ++v183;
              v185 -= 8;
              if (!v185)
              {
                v183 = v186;
                break;
              }
            }
          }
          if ((v181 & 1) != 0)
          {
            if (v183 == &v182[v184])
            {
              v187 = *(_QWORD *)(v12 + 80);
              goto LABEL_399;
            }
          }
          else if (v183 == &v178[v184])
          {
            v182 = (_QWORD *)(v12 + 72);
            v187 = 5;
LABEL_399:
            if (v184 == v187)
            {
              absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, &v292);
              v176 = *(_QWORD *)(v9 + 40);
            }
            else
            {
              if (!v182)
                goto LABEL_644;
              v182[v184] = v180;
              *v290 = v181 + 2;
            }
          }
          if (++v177 >= v176)
            goto LABEL_403;
        }
      }
      v172 = *(unsigned __int8 *)(v12 + 303);
      *(_WORD *)(v11 + 928) = 256;
      if ((_DWORD)v56)
      {
        *(_QWORD *)&v173 = -1;
        *((_QWORD *)&v173 + 1) = -1;
        *(_OWORD *)(v11 + 336) = v173;
        *(_OWORD *)(v11 + 352) = v173;
        *(_OWORD *)(v11 + 304) = v173;
        *(_OWORD *)(v11 + 320) = v173;
        v174 = (uint64_t *)(v11 + 304 + 8 * v291);
        goto LABEL_426;
      }
      if (v172)
      {
        v193 = *(_QWORD *)(v11 + 304);
        v194 = *(_QWORD *)(v11 + 312);
        *(_QWORD *)&v292 = v193;
        if (v194 >= v193)
        {
          if (*(_QWORD *)(v11 + 320) >= v193)
          {
LABEL_412:
            if (*(_QWORD *)(v11 + 328) < v193)
              goto LABEL_413;
            goto LABEL_439;
          }
        }
        else
        {
          *(_QWORD *)(v11 + 312) = -1;
          if (*(_QWORD *)(v11 + 320) >= v193)
            goto LABEL_412;
        }
        *(_QWORD *)(v11 + 320) = -1;
        if (*(_QWORD *)(v11 + 328) < v193)
        {
LABEL_413:
          *(_QWORD *)(v11 + 328) = -1;
          if (*(_QWORD *)(v11 + 336) >= v193)
            goto LABEL_414;
          goto LABEL_440;
        }
LABEL_439:
        if (*(_QWORD *)(v11 + 336) >= v193)
        {
LABEL_414:
          if (*(_QWORD *)(v11 + 344) < v193)
            goto LABEL_415;
          goto LABEL_441;
        }
LABEL_440:
        *(_QWORD *)(v11 + 336) = -1;
        if (*(_QWORD *)(v11 + 344) < v193)
        {
LABEL_415:
          *(_QWORD *)(v11 + 344) = -1;
          if (*(_QWORD *)(v11 + 352) >= v193)
            goto LABEL_416;
          goto LABEL_442;
        }
LABEL_441:
        if (*(_QWORD *)(v11 + 352) >= v193)
        {
LABEL_416:
          if (*(_QWORD *)(v11 + 360) >= v193)
            goto LABEL_418;
          goto LABEL_417;
        }
LABEL_442:
        *(_QWORD *)(v11 + 352) = -1;
        if (*(_QWORD *)(v11 + 360) >= v193)
        {
LABEL_418:
          v196 = *(_QWORD *)(v12 + 72);
          v12 += 72;
          v195 = v196;
          v197 = *(_QWORD *)(v12 - 8);
          if ((v197 & 1) == 0)
            v195 = v12;
          v198 = 5;
          if ((v197 & 1) != 0)
            v198 = *(_QWORD *)(v12 + 8);
          if (v197 >> 1 == v198)
          {
            absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, &v292);
          }
          else
          {
            if (!v195)
              goto LABEL_644;
            *(_QWORD *)(v195 + 8 * (v197 >> 1)) = v193;
            *v290 = v197 + 2;
          }
          goto LABEL_425;
        }
LABEL_417:
        *(_QWORD *)(v11 + 360) = -1;
        goto LABEL_418;
      }
      v9 = v12 + 72;
      v214 = *(_QWORD *)(v11 + 304);
      *(_QWORD *)&v292 = v214;
      if (v214 != -1)
      {
        v215 = *(_QWORD *)(v12 + 64);
        v216 = *(_QWORD *)(v12 + 72);
        if ((v215 & 1) == 0)
          v216 = v12 + 72;
        v217 = 5;
        if ((v215 & 1) != 0)
          v217 = *(_QWORD *)(v12 + 80);
        if (v215 >> 1 == v217)
          goto LABEL_645;
        if (!v216)
          goto LABEL_644;
        *(_QWORD *)(v216 + 8 * (v215 >> 1)) = v214;
        *v290 = v215 + 2;
      }
      if (!(_DWORD)v291)
        goto LABEL_425;
      while (2)
      {
        v218 = *(_QWORD *)(v11 + 312);
        *(_QWORD *)&v292 = v218;
        if (v218 == -1)
          goto LABEL_495;
        v219 = *(_QWORD *)(v12 + 64);
        v220 = *(_QWORD *)(v12 + 72);
        if ((v219 & 1) == 0)
          v220 = v9;
        v221 = 5;
        if ((v219 & 1) != 0)
          v221 = *(_QWORD *)(v12 + 80);
        if (v219 >> 1 == v221)
        {
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          v222 = v10 + 1;
          if ((_DWORD)v10 == 1)
            goto LABEL_425;
        }
        else
        {
          if (!v220)
            goto LABEL_644;
          *(_QWORD *)(v220 + 8 * (v219 >> 1)) = v218;
          *(_QWORD *)v15 = v219 + 2;
LABEL_495:
          v222 = v10 + 1;
          if ((_DWORD)v10 == 1)
            goto LABEL_425;
        }
        v223 = *(_QWORD *)(v11 + 320);
        *(_QWORD *)&v292 = v223;
        if (v223 == -1)
          goto LABEL_504;
        v224 = *(_QWORD *)(v12 + 64);
        v225 = *(_QWORD *)(v12 + 72);
        if ((v224 & 1) == 0)
          v225 = v9;
        v226 = 5;
        if ((v224 & 1) != 0)
          v226 = *(_QWORD *)(v12 + 80);
        if (v224 >> 1 == v226)
        {
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          if (v222 == 3)
            goto LABEL_425;
        }
        else
        {
          if (!v225)
            goto LABEL_644;
          *(_QWORD *)(v225 + 8 * (v224 >> 1)) = v223;
          *(_QWORD *)v15 = v224 + 2;
LABEL_504:
          if (v222 == 3)
            goto LABEL_425;
        }
        v227 = *(_QWORD *)(v11 + 328);
        *(_QWORD *)&v292 = v227;
        if (v227 == -1)
          goto LABEL_513;
        v228 = *(_QWORD *)(v12 + 64);
        v229 = *(_QWORD *)(v12 + 72);
        if ((v228 & 1) == 0)
          v229 = v9;
        v230 = 5;
        if ((v228 & 1) != 0)
          v230 = *(_QWORD *)(v12 + 80);
        if (v228 >> 1 == v230)
        {
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          if (v222 == 4)
            goto LABEL_425;
        }
        else
        {
          if (!v229)
            goto LABEL_644;
          *(_QWORD *)(v229 + 8 * (v228 >> 1)) = v227;
          *(_QWORD *)v15 = v228 + 2;
LABEL_513:
          if (v222 == 4)
            goto LABEL_425;
        }
        v231 = *(_QWORD *)(v11 + 336);
        *(_QWORD *)&v292 = v231;
        if (v231 == -1)
          goto LABEL_522;
        v232 = *(_QWORD *)(v12 + 64);
        v233 = *(_QWORD *)(v12 + 72);
        if ((v232 & 1) == 0)
          v233 = v9;
        v234 = 5;
        if ((v232 & 1) != 0)
          v234 = *(_QWORD *)(v12 + 80);
        if (v232 >> 1 == v234)
        {
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          if (v222 == 5)
            goto LABEL_425;
        }
        else
        {
          if (!v233)
            goto LABEL_644;
          *(_QWORD *)(v233 + 8 * (v232 >> 1)) = v231;
          *(_QWORD *)v15 = v232 + 2;
LABEL_522:
          if (v222 == 5)
            goto LABEL_425;
        }
        v235 = *(_QWORD *)(v11 + 344);
        *(_QWORD *)&v292 = v235;
        if (v235 == -1)
          goto LABEL_531;
        v236 = *(_QWORD *)(v12 + 64);
        v237 = *(_QWORD *)(v12 + 72);
        if ((v236 & 1) == 0)
          v237 = v9;
        v238 = 5;
        if ((v236 & 1) != 0)
          v238 = *(_QWORD *)(v12 + 80);
        if (v236 >> 1 == v238)
        {
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          if (v222 == 6)
            goto LABEL_425;
        }
        else
        {
          if (!v237)
            goto LABEL_644;
          *(_QWORD *)(v237 + 8 * (v236 >> 1)) = v235;
          *(_QWORD *)v15 = v236 + 2;
LABEL_531:
          if (v222 == 6)
            goto LABEL_425;
        }
        v239 = *(_QWORD *)(v11 + 352);
        *(_QWORD *)&v292 = v239;
        if (v239 == -1)
          goto LABEL_540;
        v240 = *(_QWORD *)(v12 + 64);
        v241 = *(_QWORD *)(v12 + 72);
        if ((v240 & 1) == 0)
          v241 = v9;
        v242 = 5;
        if ((v240 & 1) != 0)
          v242 = *(_QWORD *)(v12 + 80);
        if (v240 >> 1 != v242)
        {
          LODWORD(v10) = v291;
          if (v241)
          {
            *(_QWORD *)(v241 + 8 * (v240 >> 1)) = v239;
            *v290 = v240 + 2;
LABEL_540:
            if (v222 == 7)
              goto LABEL_425;
            goto LABEL_541;
          }
LABEL_644:
          __break(1u);
LABEL_645:
          absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v15, &v292);
          if (!(_DWORD)v10)
            goto LABEL_425;
          continue;
        }
        break;
      }
      absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, &v292);
      LODWORD(v10) = v291;
      if (v222 == 7)
        goto LABEL_425;
LABEL_541:
      v243 = *(_QWORD *)(v11 + 360);
      *(_QWORD *)&v292 = v243;
      if (v243 == -1)
        goto LABEL_663;
      v244 = *(_QWORD *)(v12 + 64);
      v245 = *(_QWORD *)(v12 + 72);
      if ((v244 & 1) == 0)
        v245 = v9;
      v246 = 5;
      if ((v244 & 1) != 0)
        v246 = *(_QWORD *)(v12 + 80);
      if (v244 >> 1 != v246)
      {
        if (v245)
        {
          *(_QWORD *)(v245 + 8 * (v244 >> 1)) = v243;
          *v290 = v244 + 2;
          LODWORD(v10) = v291;
          goto LABEL_425;
        }
        goto LABEL_644;
      }
      absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, &v292);
LABEL_663:
      LODWORD(v10) = v291;
LABEL_425:
      v174 = (uint64_t *)(v11 + 8 * v10 + 304);
LABEL_426:
      *v174 = v14;
LABEL_427:
      if ((v56 & 1) != 0)
      {
        v171 = 0;
      }
      else
      {
        v199 = *(_QWORD *)(v11 + 840);
        if (v199 >= 0)
          v171 = v14 - v199;
        else
          v171 = 0;
      }
LABEL_432:
      LODWORD(v292) = v171;
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::Assign<absl::inlined_vector_internal::IteratorValueAdapter<std::allocator<int>,int const*>>(v289, (uint64_t)&v292, 1uLL);
      if (!(_DWORD)v10)
        *(_QWORD *)(v11 + 840) = v14;
      return;
    case 2:
      if (!v9)
        return;
      if (*(_QWORD *)(v12 + 1936) != 2)
        goto LABEL_564;
      v9 = *(_QWORD *)(v12 + 328);
      v78 = *(unint64_t **)(v12 + 336);
      v79 = v9 - 1;
      v80 = *(unsigned __int8 *)(v12 + 309);
      if (v80 == 255)
        LOBYTE(v80) = 0;
      v56 = v80;
      if (*(unsigned __int8 *)(v12 + 308) == 255)
        v81 = 0;
      else
        v81 = *(unsigned __int8 *)(v12 + 308);
      if (v81 > 3 || v80 < (int)v78 || v79 > 2 || v79 < v80)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v139, v140, v141, v142, v143, v144, v145, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_payload_params.cc");
        return;
      }
      v291 = v14;
      if (!*(_BYTE *)(v12 + 144))
        goto LABEL_117;
      if ((*(_BYTE *)(v12 + 112) & 1) != 0)
      {
        operator delete(*(void **)(v12 + 120));
        if ((*(_BYTE *)(v12 + 64) & 1) == 0)
        {
LABEL_115:
          if ((*(_BYTE *)(v12 + 16) & 1) == 0)
            goto LABEL_117;
          goto LABEL_116;
        }
      }
      else if ((*(_BYTE *)(v12 + 64) & 1) == 0)
      {
        goto LABEL_115;
      }
      operator delete(*(void **)(v12 + 72));
      if ((*(_BYTE *)(v12 + 16) & 1) != 0)
LABEL_116:
        operator delete(*(void **)(v12 + 24));
LABEL_117:
      v288 = (v9 - 1);
      v289 = v78;
      *(_QWORD *)(v12 + 64) = 0;
      v290 = (unint64_t *)(v12 + 64);
      *(_QWORD *)(v12 + 112) = 0;
      *(_QWORD *)(v12 + 136) = 0xFFFFFFFFLL;
      v14 = 1;
      *(_BYTE *)(v12 + 144) = 1;
      *(_QWORD *)v12 = v291;
      *(_DWORD *)(v12 + 8) = v56;
      *(_DWORD *)(v12 + 12) = v81;
      v15 = 0;
      *(_QWORD *)(v12 + 24) = operator new(0x50uLL);
      v10 = v12 + 24;
      *(_QWORD *)(v12 + 16) = 1;
      v82 = (unint64_t *)(v12 + 16);
      *(_QWORD *)(v12 + 32) = 20;
      while (1)
      {
        while (v15 < v56)
        {
          LODWORD(v292) = 0;
          v83 = *(_QWORD *)(v12 + 16);
          v84 = *(_QWORD *)(v12 + 24);
          if ((v83 & 1) != 0)
          {
            v85 = *(_QWORD *)(v12 + 32);
          }
          else
          {
            v84 = v12 + 24;
            v85 = 10;
          }
          if (v83 >> 1 == v85)
          {
            absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
            v86 = *v82;
          }
          else
          {
            if (!v84)
              goto LABEL_644;
            *(_DWORD *)(v84 + 4 * (v83 >> 1)) = 0;
            v86 = v83 + 2;
            *v82 = v86;
          }
          LODWORD(v292) = 0;
          v87 = *(_QWORD *)(v12 + 24);
          if ((v86 & 1) != 0)
          {
            v88 = *(_QWORD *)(v12 + 32);
          }
          else
          {
            v87 = v12 + 24;
            v88 = 10;
          }
          if (v86 >> 1 == v88)
          {
            absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
            v89 = *v82;
          }
          else
          {
            if (!v87)
              goto LABEL_644;
            *(_DWORD *)(v87 + 4 * (v86 >> 1)) = 0;
            v89 = v86 + 2;
            *v82 = v89;
          }
          LODWORD(v292) = 0;
          v90 = *(_QWORD *)(v12 + 24);
          if ((v89 & 1) != 0)
          {
            v91 = *(_QWORD *)(v12 + 32);
          }
          else
          {
            v90 = v12 + 24;
            v91 = 10;
          }
          if (v89 >> 1 == v91)
          {
            absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
            v92 = *v82;
          }
          else
          {
            if (!v90)
              goto LABEL_644;
            *(_DWORD *)(v90 + 4 * (v89 >> 1)) = 0;
            v92 = v89 + 2;
            *v82 = v92;
          }
          LODWORD(v292) = 0;
          v93 = *(_QWORD *)(v12 + 24);
          if ((v92 & 1) != 0)
          {
            v94 = *(_QWORD *)(v12 + 32);
          }
          else
          {
            v93 = v12 + 24;
            v94 = 10;
          }
          if (v92 >> 1 == v94)
            goto LABEL_218;
          if (!v93)
            goto LABEL_644;
          *(_DWORD *)(v93 + 4 * (v92 >> 1)) = 0;
          *v82 = v92 + 2;
          v15 = (v15 + 1);
          if ((_DWORD)v15 == 3)
            goto LABEL_219;
        }
        if (v81 || (_DWORD)v56 != (_DWORD)v15 && *(_BYTE *)(v12 + 301))
        {
          v95 = 0;
          LODWORD(v292) = 0;
        }
        else
        {
          if ((_DWORD)v56 == (_DWORD)v15 || !*(_BYTE *)(v12 + 296))
            v95 = 2;
          else
            v95 = 3;
          LODWORD(v292) = v95;
        }
        v96 = *(_QWORD *)(v12 + 16);
        v97 = *(_QWORD *)(v12 + 24);
        if ((v96 & 1) != 0)
        {
          v98 = *(_QWORD *)(v12 + 32);
        }
        else
        {
          v97 = v12 + 24;
          v98 = 10;
        }
        if (v96 >> 1 == v98)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
          if (v81 > 1)
            goto LABEL_156;
        }
        else
        {
          if (!v97)
            goto LABEL_644;
          *(_DWORD *)(v97 + 4 * (v96 >> 1)) = v95;
          *v82 = v96 + 2;
          if (v81 > 1)
          {
LABEL_156:
            v99 = 0;
            LODWORD(v292) = 0;
            goto LABEL_165;
          }
        }
        if ((_DWORD)v56 != (_DWORD)v15 && *(_BYTE *)(v12 + 301))
          goto LABEL_156;
        if (v81 == 1 && (_DWORD)v56 == (_DWORD)v15
          || (_DWORD)v56 == (_DWORD)v15 && *(_BYTE *)(v12 + 310)
          || !*(_BYTE *)(v12 + 296))
        {
          v99 = 2;
        }
        else
        {
          v99 = 3;
        }
        LODWORD(v292) = v99;
LABEL_165:
        v100 = *(_QWORD *)(v12 + 16);
        v101 = *(_QWORD *)(v12 + 24);
        if ((v100 & 1) != 0)
        {
          v102 = *(_QWORD *)(v12 + 32);
        }
        else
        {
          v101 = v12 + 24;
          v102 = 10;
        }
        if (v100 >> 1 == v102)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
          if (v81 > 2)
            goto LABEL_173;
        }
        else
        {
          if (!v101)
            goto LABEL_644;
          *(_DWORD *)(v101 + 4 * (v100 >> 1)) = v99;
          *v82 = v100 + 2;
          if (v81 > 2)
          {
LABEL_173:
            v103 = 0;
            LODWORD(v292) = 0;
            goto LABEL_182;
          }
        }
        if ((_DWORD)v56 != (_DWORD)v15 && *(_BYTE *)(v12 + 301))
          goto LABEL_173;
        if (v81 == 2 && (_DWORD)v56 == (_DWORD)v15
          || (_DWORD)v56 == (_DWORD)v15 && *(_BYTE *)(v12 + 310)
          || !*(_BYTE *)(v12 + 296))
        {
          v103 = 2;
        }
        else
        {
          v103 = 3;
        }
        LODWORD(v292) = v103;
LABEL_182:
        v104 = *(_QWORD *)(v12 + 16);
        v105 = *(_QWORD *)(v12 + 24);
        if ((v104 & 1) != 0)
        {
          v106 = *(_QWORD *)(v12 + 32);
        }
        else
        {
          v105 = v12 + 24;
          v106 = 10;
        }
        if (v104 >> 1 == v106)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
          if ((_DWORD)v56 == (_DWORD)v15)
            goto LABEL_203;
        }
        else
        {
          if (!v105)
            goto LABEL_644;
          *(_DWORD *)(v105 + 4 * (v104 >> 1)) = v103;
          *v82 = v104 + 2;
          if ((_DWORD)v56 == (_DWORD)v15)
          {
LABEL_203:
            if (v81 == 3 && (_DWORD)v56 == (_DWORD)v15
              || (_DWORD)v56 == (_DWORD)v15 && *(_BYTE *)(v12 + 310)
              || !*(_BYTE *)(v12 + 296))
            {
              v107 = 2;
            }
            else
            {
              v107 = 3;
            }
            LODWORD(v292) = v107;
            goto LABEL_211;
          }
        }
        if (!*(_BYTE *)(v12 + 301))
          goto LABEL_203;
        v107 = 0;
        LODWORD(v292) = 0;
LABEL_211:
        v108 = *(_QWORD *)(v12 + 16);
        v109 = *(_QWORD *)(v12 + 24);
        if ((v108 & 1) != 0)
        {
          v110 = *(_QWORD *)(v12 + 32);
        }
        else
        {
          v109 = v12 + 24;
          v110 = 10;
        }
        if (v108 >> 1 == v110)
        {
LABEL_218:
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>(v12 + 16, &v292);
          v15 = (v15 + 1);
          if ((_DWORD)v15 == 3)
            goto LABEL_219;
        }
        else
        {
          if (!v109)
            goto LABEL_644;
          *(_DWORD *)(v109 + 4 * (v108 >> 1)) = v107;
          *v82 = v108 + 2;
          v15 = (v15 + 1);
          if ((_DWORD)v15 == 3)
          {
LABEL_219:
            v15 = *(_QWORD *)(v11 + 816);
            v14 = v291;
            if (v15 == *(_QWORD *)(v11 + 824))
            {
              v111 = *(_QWORD *)(v11 + 832) - v15;
              if (v111 >= 0x2000)
              {
                if (!v15)
                  goto LABEL_644;
                bzero(*(void **)(v11 + 816), 0x2000uLL);
                *(_QWORD *)(v11 + 824) = v15 + 0x2000;
                v14 = v291;
              }
              else
              {
                v112 = v111 >> 5;
                if (v112 <= 0x80)
                  v112 = 128;
                v287 = v112 << 6;
                v113 = (char *)operator new(v112 << 6);
                bzero(v113, 0x2000uLL);
                *(_QWORD *)(v11 + 816) = v113;
                *(_QWORD *)(v11 + 824) = v113 + 0x2000;
                *(_QWORD *)(v11 + 832) = &v113[v287];
                if (v15)
                  operator delete((void *)v15);
              }
            }
            if (*(_BYTE *)(v12 + 297))
            {
              v200 = (_QWORD *)(v12 + 64);
              if (!(_DWORD)v56 || !*(_BYTE *)(v12 + 311))
                goto LABEL_457;
              v201 = *(__int16 *)(v12 + 302) % 128;
              v202 = *(_QWORD *)(v11 + 816);
              if (v201 >= (*(_QWORD *)(v11 + 824) - v202) >> 6 || v56 >= 9)
                goto LABEL_644;
              v203 = (_QWORD *)(v202 + (v201 << 6) + 8 * (v56 - 1));
              v204 = v12 + 72;
              v205 = *(_QWORD *)(v12 + 64);
              v206 = *(_QWORD *)(v12 + 80);
              if ((v205 & 1) != 0)
                v204 = *(_QWORD *)(v12 + 72);
              else
                v206 = 5;
              if (v205 >> 1 == v206)
              {
                absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, v203);
                v200 = (_QWORD *)(v12 + 64);
                if (*(_BYTE *)(v12 + 296))
                  goto LABEL_458;
              }
              else
              {
                if (!v204)
                  goto LABEL_644;
                *(_QWORD *)(v204 + 8 * (v205 >> 1)) = *v203;
                *v290 = v205 + 2;
LABEL_457:
                if (*(_BYTE *)(v12 + 296))
                {
LABEL_458:
                  v207 = *(unsigned __int8 *)(v12 + 313);
                  if (*(_BYTE *)(v12 + 313))
                  {
                    if (v56 > 7)
                      goto LABEL_644;
                    v10 = 0;
                    v15 = v12 + 72;
                    do
                    {
                      while (1)
                      {
                        v208 = (*(_WORD *)(v12 + 302) - *(_BYTE *)(v12 + 314 + v10)) & 0x7F;
                        v209 = *(_QWORD *)(v11 + 816);
                        if (v208 >= (*(_QWORD *)(v11 + 824) - v209) >> 6)
                          goto LABEL_644;
                        v210 = (_QWORD *)(v209 + (v208 << 6) + 8 * v56);
                        v211 = *(_QWORD *)(v12 + 64);
                        v212 = *(_QWORD *)(v12 + 72);
                        if ((v211 & 1) != 0)
                        {
                          v213 = *(_QWORD *)(v12 + 80);
                        }
                        else
                        {
                          v212 = v12 + 72;
                          v213 = 5;
                        }
                        if (v211 >> 1 != v213)
                          break;
                        absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, v210);
                        v200 = (_QWORD *)(v12 + 64);
                        v207 = *(unsigned __int8 *)(v12 + 313);
                        if (++v10 >= *(unsigned __int8 *)(v12 + 313))
                          goto LABEL_576;
                      }
                      if (!v212)
                        goto LABEL_644;
                      *(_QWORD *)(v212 + 8 * (v211 >> 1)) = *v210;
                      *v200 = v211 + 2;
                      ++v10;
                    }
                    while (v10 < v207);
                  }
                }
              }
LABEL_576:
              v257 = *(__int16 *)(v12 + 302) % 128;
              v258 = *(_QWORD *)(v11 + 816);
              if (v257 >= (*(_QWORD *)(v11 + 824) - v258) >> 6)
                goto LABEL_644;
              v15 = (uint64_t)v289;
              if (v56 >= 8)
                goto LABEL_644;
              v248 = (uint64_t *)(v258 + (v257 << 6) + 8 * v56);
LABEL_579:
              *v248 = v14;
              *(_QWORD *)(v12 + 136) = (-1 << (4 * v9)) ^ (-1 << (4 * v15));
              if (!(*(unsigned __int8 *)(v12 + 296) | *(unsigned __int8 *)(v12 + 311)))
              {
                if (v56 <= 8)
                  v259 = 8;
                else
                  v259 = v56;
                v260 = v9 + ~v56;
                if (v260 >= v259 - v56)
                  v260 = v259 - v56;
                v261 = v260 + 1;
                if (v261 >= 5)
                {
                  v263 = v261 & 3;
                  if ((v261 & 3) == 0)
                    v263 = 4;
                  v264 = v261 - v263;
                  v262 = v264 + v56;
                  v265 = (_OWORD *)(v11 + 8 * v56 + 840);
                  *(_QWORD *)&v266 = -1;
                  *((_QWORD *)&v266 + 1) = -1;
                  do
                  {
                    *v265 = v266;
                    v265[1] = v266;
                    v265 += 2;
                    v264 -= 4;
                  }
                  while (v264);
                }
                else
                {
                  v262 = v56;
                }
                v267 = v9 - v262;
                v268 = (_QWORD *)(v11 + 8 * v262 + 840);
                v269 = v259 - v262;
                do
                {
                  if (!v269)
                    goto LABEL_644;
                  *v268++ = -1;
                  --v269;
                  --v267;
                }
                while (v267);
              }
              v270 = *(_QWORD *)(v12 + 112);
              v271 = (uint64_t *)(v12 + 120);
              if ((v270 & 1) != 0)
              {
                if (v270 >= 6)
                {
                  v276 = 7;
                }
                else
                {
                  v274 = *(_QWORD *)(v12 + 120);
                  v273 = *(_QWORD *)(v12 + 128);
                  v10 = v270 >> 1;
                  if (v273 >= 3)
                  {
                    if (!v274)
                      goto LABEL_644;
                    v272 = (char *)(v274 + 4 * v10);
                    LODWORD(v15) = (_DWORD)v289;
LABEL_609:
                    bzero(v272, 12 - 4 * v10);
                    v276 = v270 & 1 | 6;
                    v14 = v291;
                  }
                  else
                  {
                    v275 = 2 * v273;
                    if (v275 <= 3)
                      v275 = 3;
                    v290 = *(unint64_t **)(v12 + 120);
                    v291 = v275;
                    v15 = (uint64_t)operator new(4 * v275);
                    bzero((void *)(v15 + 4 * v10), 12 - 4 * v10);
                    if (v270 >= 2)
                    {
                      *(_DWORD *)v15 = *(_DWORD *)v290;
                      if (v10 != 1)
                        *(_DWORD *)(v15 + 4) = *((_DWORD *)v290 + 1);
                    }
                    operator delete(v290);
                    *(_QWORD *)(v12 + 120) = v15;
                    *(_QWORD *)(v12 + 128) = v291;
                    v276 = 7;
                    LODWORD(v15) = (_DWORD)v289;
                  }
                }
              }
              else
              {
                if (v270 <= 5)
                {
                  v10 = v270 >> 1;
                  v272 = (char *)v271 + 4 * (v270 >> 1);
                  goto LABEL_609;
                }
                v276 = 6;
              }
              v10 = v11 + 840;
              v15 = (int)v15;
              *(_QWORD *)(v12 + 112) = v276;
              do
              {
                if ((v15 & 0xFFFFFFF8) != 0)
                  goto LABEL_644;
                v279 = *(_QWORD *)(v10 + 8 * v15);
                if (v279 == -1)
                {
                  if (v15 >= v276 >> 1)
                    goto LABEL_644;
                  LODWORD(v277) = 0;
                }
                else
                {
                  v277 = v14 - v279;
                  if (v277 >= 256)
                  {
                    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                    {
                      v11 = v11 & 0xFFFFFFFF00000000 | 0x153B;
                      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, v280, v281, v282, v283, v284, v285, v286, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_payload_params.cc");
                    }
                    LODWORD(v277) = 0;
                    *(_QWORD *)(v10 + 8 * v15) = -1;
                    v276 = *(_QWORD *)(v12 + 112);
                  }
                  if (v15 >= v276 >> 1)
                    goto LABEL_644;
                }
                v278 = *v271;
                if ((v276 & 1) == 0)
                  v278 = v12 + 120;
                *(_DWORD *)(v278 + 4 * v15++) = v277;
              }
              while ((_DWORD)v9 != (_DWORD)v15);
              if (!v81)
              {
                if (v56 >= 8)
                  goto LABEL_644;
                *(_QWORD *)(v10 + 8 * v56) = v14;
                if (!*(_BYTE *)(v12 + 301) && (int)v288 > (int)v56)
                {
                  if ((_DWORD)v56 == 7)
                    goto LABEL_644;
                  *(_QWORD *)(v10 + 8 * (v56 + 1)) = v14;
                  if (v56 + 1 != v288)
                  {
                    if (v56 == 6)
                      goto LABEL_644;
                    *(_QWORD *)(v10 + 8 * (v56 + 2)) = v14;
                    if (v56 + 2 != v288)
                    {
                      if (v56 == 5)
                        goto LABEL_644;
                      *(_QWORD *)(v10 + 8 * (v56 + 3)) = v14;
                      if (v56 + 3 != v288)
                      {
                        if (v56 == 4)
                          goto LABEL_644;
                        *(_QWORD *)(v10 + 8 * (v56 + 4)) = v14;
                        if (v56 + 4 != v288)
                        {
                          if (v56 == 3)
                            goto LABEL_644;
                          *(_QWORD *)(v10 + 8 * (v56 + 5)) = v14;
                          if (v56 + 5 != v288)
                          {
                            if (v56 == 2)
                              goto LABEL_644;
                            *(_QWORD *)(v10 + 8 * (v56 + 6)) = v14;
                            if (v56 + 6 != v288)
                            {
                              if (v56 == 1)
                                goto LABEL_644;
                              *(_QWORD *)(v10 + 8 * (v56 + 7)) = v14;
                              if (v56 + 7 != v288)
                                goto LABEL_644;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              return;
            }
            if (!(v81 | v56))
            {
              v247 = *(uint64_t **)(v11 + 824);
              v248 = *(uint64_t **)(v11 + 816);
              if (*(_BYTE *)(v12 + 296))
              {
                v15 = (uint64_t)v289;
                if (v247 == v248)
                  goto LABEL_644;
                v249 = v12 + 72;
                v250 = *(_QWORD *)(v12 + 64);
                v251 = *(_QWORD *)(v12 + 80);
                if ((v250 & 1) != 0)
                  v249 = *(_QWORD *)(v12 + 72);
                else
                  v251 = 5;
                if (v250 >> 1 == v251)
                {
                  absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>((uint64_t)v290, v248);
                  v248 = *(uint64_t **)(v11 + 816);
                  if (*(uint64_t **)(v11 + 824) == v248)
                    goto LABEL_644;
                }
                else
                {
                  if (!v249)
                    goto LABEL_644;
                  *(_QWORD *)(v249 + 8 * (v250 >> 1)) = *v248;
                  *v290 = v250 + 2;
                  if (v247 == v248)
                    goto LABEL_644;
                }
              }
              else
              {
                v15 = (uint64_t)v289;
                if (v247 == v248)
                  goto LABEL_644;
              }
              goto LABEL_579;
            }
            if (!*(_BYTE *)(v12 + 144))
              return;
            if ((*(_BYTE *)(v12 + 112) & 1) != 0)
            {
              operator delete(*(void **)(v12 + 120));
              if ((*(_BYTE *)v290 & 1) != 0)
                goto LABEL_559;
LABEL_475:
              if ((*(_BYTE *)v82 & 1) == 0)
              {
LABEL_477:
                *(_BYTE *)(v12 + 144) = 0;
                return;
              }
            }
            else
            {
              if ((*(_BYTE *)v290 & 1) == 0)
                goto LABEL_475;
LABEL_559:
              operator delete(*(void **)(v12 + 72));
              if ((*(_BYTE *)v82 & 1) == 0)
                goto LABEL_477;
            }
            operator delete(*(void **)v10);
            goto LABEL_477;
          }
        }
      }
    case 4:
      if (!v9)
        return;
      if (*(unsigned __int8 *)(v9 + 12) == 255)
        v15 = 0;
      else
        v15 = *(unsigned __int8 *)(v9 + 12);
      if (v15 >= 8)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_231:
          rtc::webrtc_logging_impl::Log("\r\t", v71, v72, v73, v74, v75, v76, v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/rtp_payload_params.cc");
        return;
      }
      if (!*(_BYTE *)(v12 + 144))
        goto LABEL_285;
      if ((*(_BYTE *)(v12 + 112) & 1) != 0)
      {
        operator delete(*(void **)(v12 + 120));
        if ((*(_BYTE *)(v12 + 64) & 1) == 0)
        {
LABEL_283:
          if ((*(_BYTE *)(v12 + 16) & 1) == 0)
            goto LABEL_285;
          goto LABEL_284;
        }
      }
      else if ((*(_BYTE *)(v12 + 64) & 1) == 0)
      {
        goto LABEL_283;
      }
      operator delete(*(void **)(v12 + 72));
      if ((*(_BYTE *)(v12 + 16) & 1) != 0)
LABEL_284:
        operator delete(*(void **)(v12 + 24));
LABEL_285:
      *(_QWORD *)(v12 + 64) = 0;
      v10 = v12 + 64;
      *(_QWORD *)(v12 + 112) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 136) = 0xFFFFFFFFLL;
      *(_BYTE *)(v12 + 144) = 1;
      *(_QWORD *)v12 = v14;
      *(_DWORD *)(v12 + 12) = v15;
      if ((_DWORD)v56)
      {
        *(_QWORD *)&v146 = -1;
        *((_QWORD *)&v146 + 1) = -1;
        *(_OWORD *)(v11 + 336) = v146;
        *(_OWORD *)(v11 + 352) = v146;
        *(_OWORD *)(v11 + 304) = v146;
        *(_OWORD *)(v11 + 320) = v146;
        *(_QWORD *)(v11 + 304 + 8 * v15) = v14;
        return;
      }
      v168 = *(unsigned __int8 *)(v9 + 13);
      v9 = v11 + 304;
      if (!v168)
      {
        v11 = v12 + 72;
        v192 = (v15 + 1);
        v56 = v9;
        do
        {
          v253 = *(_QWORD *)v56;
          v56 += 8;
          v252 = v253;
          *(_QWORD *)&v292 = v253;
          if (v253 != -1)
          {
            v254 = *(_QWORD *)(v12 + 64);
            v255 = *(_QWORD *)(v12 + 72);
            if ((v254 & 1) != 0)
            {
              v256 = *(_QWORD *)(v12 + 80);
            }
            else
            {
              v255 = v12 + 72;
              v256 = 5;
            }
            if (v254 >> 1 == v256)
            {
              absl::inlined_vector_internal::Storage<long long,5ul,std::allocator<long long>>::EmplaceBackSlow<long long const&>(v12 + 64, &v292);
            }
            else
            {
              if (!v255)
                goto LABEL_644;
              *(_QWORD *)(v255 + 8 * (v254 >> 1)) = v252;
              *(_QWORD *)v10 = v254 + 2;
            }
          }
          --v192;
        }
        while (v192);
        *(_QWORD *)(v9 + 8 * v15) = v14;
        return;
      }
      v169 = *(_QWORD *)(v11 + 304);
      if (*(_QWORD *)(v11 + 312) >= v169)
      {
        if (*(_QWORD *)(v11 + 320) >= v169)
        {
LABEL_344:
          if (*(_QWORD *)(v11 + 328) < v169)
            goto LABEL_345;
          goto LABEL_374;
        }
      }
      else
      {
        *(_QWORD *)(v11 + 312) = -1;
        if (*(_QWORD *)(v11 + 320) >= v169)
          goto LABEL_344;
      }
      *(_QWORD *)(v11 + 320) = -1;
      if (*(_QWORD *)(v11 + 328) < v169)
      {
LABEL_345:
        *(_QWORD *)(v11 + 328) = -1;
        if (*(_QWORD *)(v11 + 336) >= v169)
          goto LABEL_346;
        goto LABEL_375;
      }
LABEL_374:
      if (*(_QWORD *)(v11 + 336) >= v169)
      {
LABEL_346:
        if (*(_QWORD *)(v11 + 344) < v169)
          goto LABEL_347;
        goto LABEL_376;
      }
LABEL_375:
      *(_QWORD *)(v11 + 336) = -1;
      if (*(_QWORD *)(v11 + 344) < v169)
      {
LABEL_347:
        *(_QWORD *)(v11 + 344) = -1;
        if (*(_QWORD *)(v11 + 352) >= v169)
          goto LABEL_348;
        goto LABEL_377;
      }
LABEL_376:
      if (*(_QWORD *)(v11 + 352) >= v169)
      {
LABEL_348:
        if (*(_QWORD *)(v11 + 360) >= v169)
        {
LABEL_350:
          *(_QWORD *)(v12 + 64) = 2;
          *(_QWORD *)(v12 + 72) = v169;
          *(_QWORD *)(v9 + 8 * v15) = v14;
          return;
        }
LABEL_349:
        *(_QWORD *)(v11 + 360) = -1;
        goto LABEL_350;
      }
LABEL_377:
      *(_QWORD *)(v11 + 352) = -1;
      if (*(_QWORD *)(v11 + 360) >= v169)
        goto LABEL_350;
      goto LABEL_349;
    default:
      return;
  }
}

void webrtc::RtpPayloadParams::GenericStructure(webrtc::RtpPayloadParams *this@<X0>, const webrtc::CodecSpecificInfo *a2@<X1>, _BYTE *a3@<X8>)
{
  if (a2)
    __asm { BR              X10 }
  *a3 = 0;
  a3[128] = 0;
}

void webrtc::`anonymous namespace'::MinimalisticStructure(webrtc::_anonymous_namespace_ *this, int a2, int a3)
{
  webrtc::_anonymous_namespace_ *v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  char *v45;
  void **v46;
  _QWORD *v47;
  webrtc::_anonymous_namespace_ *v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  void *__p[4];

  v5 = this;
  __p[2] = *(void **)MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 2) = 0;
  v47 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;
  v46 = (void **)((char *)this + 104);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v6 = a3 * a2;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = a3 * a2;
  *((_DWORD *)this + 2) = a2;
  if (a3 * a2)
  {
    v7 = (char *)operator new(104 * v6);
    *((_QWORD *)v5 + 13) = v7;
    *((_QWORD *)v5 + 14) = v7;
    *((_QWORD *)v5 + 15) = &v7[104 * v6];
  }
  v49 = v6;
  v8 = 0;
  v45 = (char *)v5 + 24;
  if (a2 <= 1)
    v9 = 1;
  else
    v9 = a2;
  v43 = v9;
  v48 = v5;
  do
  {
    v10 = 0;
    do
    {
      v11 = 0;
      v58 = 0;
      v56 = 0;
      v52 = 0;
      v51 = __PAIR64__(v10, v8);
      do
      {
        v12 = a3;
        if (v8 > v11)
        {
          do
          {
            while (1)
            {
              v50 = 0;
              v17 = v52;
              v18 = (__int128 *)v53;
              if ((v52 & 1) != 0)
              {
                v19 = *((_QWORD *)&v53 + 1);
              }
              else
              {
                v18 = &v53;
                v19 = 10;
              }
              if (v52 >> 1 != v19)
                break;
              absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)&v52, &v50);
              if (!--v12)
                goto LABEL_10;
            }
            if (!v18)
              goto LABEL_98;
            *((_DWORD *)v18 + (v52 >> 1)) = 0;
            v52 = v17 + 2;
            --v12;
          }
          while (v12);
        }
        else
        {
          v13 = 0;
          do
          {
            while (1)
            {
              v50 = 2 * (v10 <= v13);
              v14 = v52;
              v15 = (__int128 *)v53;
              if ((v52 & 1) != 0)
              {
                v16 = *((_QWORD *)&v53 + 1);
              }
              else
              {
                v15 = &v53;
                v16 = 10;
              }
              if (v52 >> 1 != v16)
                break;
              absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::EmplaceBackSlow<webrtc::DecodeTargetIndication const&>((uint64_t)&v52, &v50);
              if (a3 == ++v13)
                goto LABEL_10;
            }
            if (!v15)
              goto LABEL_98;
            *((_DWORD *)v15 + (v52 >> 1)) = 2 * (v10 <= v13);
            v52 = v14 + 2;
            ++v13;
          }
          while (a3 != v13);
        }
LABEL_10:
        ++v11;
      }
      while (v11 != a2);
      v20 = v49;
      if (v10)
        v20 = a2;
      v50 = v20;
      v21 = v56;
      v22 = (__int128 *)v57;
      if ((v56 & 1) != 0)
      {
        v23 = *((_QWORD *)&v57 + 1);
      }
      else
      {
        v22 = &v57;
        v23 = 4;
      }
      if (v56 >> 1 == v23)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)&v56, &v50);
      }
      else
      {
        if (!v22)
          goto LABEL_98;
        *((_DWORD *)v22 + (v56 >> 1)) = v20;
        v56 = v21 + 2;
      }
      v24 = *((int *)v5 + 2);
      v25 = v58 & 1;
      if ((v58 & 1) != 0)
        v26 = (void **)__p[0];
      else
        v26 = __p;
      if ((v58 & 1) != 0)
        v27 = (unint64_t)__p[1];
      else
        v27 = 4;
      if (v27 >= v24)
      {
        v30 = v58 >> 1;
        if (v24 >= v58 >> 1)
          v31 = v24 - (v58 >> 1);
        else
          v31 = 0;
        if (v30 >= v24)
          v32 = v24;
        else
          v32 = v58 >> 1;
        if (v32)
        {
          v44 = v31;
          memset_pattern16(v26, &unk_208F1A9B0, 4 * v32);
          v31 = v44;
        }
        if (v30 < v24)
        {
          if (!v26)
            goto LABEL_98;
          memset_pattern16((char *)v26 + 4 * v30, &unk_208F1A9B0, 4 * v31);
        }
      }
      else
      {
        if (2 * v27 <= v24)
          v28 = v24;
        else
          v28 = 2 * v27;
        if (v28 >> 62)
          goto LABEL_99;
        v29 = operator new(4 * v28);
        memset_pattern16(v29, &unk_208F1A9B0, 4 * v24);
        if (v25)
          operator delete(__p[0]);
        __p[0] = v29;
        __p[1] = (void *)v28;
        v25 = 1;
      }
      v58 = v25 | (2 * v24);
      v5 = v48;
      v33 = *((_QWORD *)v48 + 14);
      if (v33 >= *((_QWORD *)v48 + 15))
      {
        *((_QWORD *)v48 + 14) = std::vector<webrtc::FrameDependencyTemplate>::__push_back_slow_path<webrtc::FrameDependencyTemplate const&>(v46, (uint64_t)&v51);
        v38 = *((_QWORD *)v48 + 2);
        if ((v38 & 1) == 0)
          goto LABEL_72;
        goto LABEL_83;
      }
      if (!v33)
        goto LABEL_98;
      *(_QWORD *)v33 = v51;
      *(_QWORD *)(v33 + 8) = 0;
      if (v52 >= 2)
      {
        if ((v52 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom((unint64_t *)(v33 + 8), &v52);
          *(_QWORD *)(v33 + 56) = 0;
          v34 = (unint64_t *)(v33 + 56);
          v35 = v56;
          if (v56 < 2)
          {
LABEL_68:
            *(_QWORD *)(v33 + 80) = 0;
            v36 = (unint64_t *)(v33 + 80);
            v37 = v58;
            if (v58 < 2)
              goto LABEL_82;
            goto LABEL_69;
          }
        }
        else
        {
          *(_QWORD *)(v33 + 8) = v52;
          v41 = v53;
          v42 = v54;
          *(_QWORD *)(v33 + 48) = v55;
          *(_OWORD *)(v33 + 16) = v41;
          *(_OWORD *)(v33 + 32) = v42;
          *(_QWORD *)(v33 + 56) = 0;
          v34 = (unint64_t *)(v33 + 56);
          v35 = v56;
          if (v56 < 2)
            goto LABEL_68;
        }
      }
      else
      {
        *(_QWORD *)(v33 + 56) = 0;
        v34 = (unint64_t *)(v33 + 56);
        v35 = v56;
        if (v56 < 2)
          goto LABEL_68;
      }
      if ((v35 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v34, &v56);
        *(_QWORD *)(v33 + 80) = 0;
        v36 = (unint64_t *)(v33 + 80);
        v37 = v58;
        if (v58 < 2)
          goto LABEL_82;
      }
      else
      {
        *(_QWORD *)(v33 + 56) = v35;
        *(_OWORD *)(v33 + 64) = v57;
        *(_QWORD *)(v33 + 80) = 0;
        v36 = (unint64_t *)(v33 + 80);
        v37 = v58;
        if (v58 < 2)
          goto LABEL_82;
      }
LABEL_69:
      if ((v37 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v36, &v58);
      }
      else
      {
        *(_QWORD *)(v33 + 80) = v37;
        *(_OWORD *)(v33 + 88) = *(_OWORD *)__p;
      }
LABEL_82:
      *((_QWORD *)v48 + 14) = v33 + 104;
      v38 = *((_QWORD *)v48 + 2);
      if ((v38 & 1) == 0)
      {
LABEL_72:
        v39 = v45;
        v40 = 10;
        goto LABEL_84;
      }
LABEL_83:
      v39 = (char *)*((_QWORD *)v48 + 3);
      v40 = *((_QWORD *)v48 + 4);
LABEL_84:
      if (v38 >> 1 == v40)
      {
        absl::inlined_vector_internal::Storage<int,10ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)v47, v8);
        if ((v58 & 1) != 0)
          goto LABEL_87;
      }
      else
      {
        if (!v39)
        {
LABEL_98:
          __break(1u);
LABEL_99:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        *(_DWORD *)&v39[4 * (v38 >> 1)] = v8;
        *v47 = v38 + 2;
        if ((v58 & 1) != 0)
LABEL_87:
          operator delete(__p[0]);
      }
      if ((v56 & 1) != 0)
      {
        operator delete((void *)v57);
        if ((v52 & 1) == 0)
          goto LABEL_8;
      }
      else if ((v52 & 1) == 0)
      {
        goto LABEL_8;
      }
      operator delete((void *)v53);
LABEL_8:
      ++v10;
    }
    while (v10 != a3);
    ++v8;
  }
  while (v8 != v43);
}

char *absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  char *result;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  __int128 v12;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 8)
      v8 = 8;
    else
      v8 = v2 >> 1;
    if (v8 < 0x492492492492493)
    {
      result = (char *)operator new(56 * v8);
      a1[1] = (unint64_t)result;
      a1[2] = v8;
      v7 = (_QWORD *)a2[1];
      goto LABEL_9;
    }
LABEL_17:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  result = (char *)(a1 + 1);
  v7 = a2 + 1;
LABEL_9:
  v9 = result + 16;
  v10 = v7 + 2;
  do
  {
    *((_OWORD *)v9 - 1) = *((_OWORD *)v10 - 1);
    *(_QWORD *)v9 = 0;
    v11 = *v10;
    if (*v10 >= 2uLL)
    {
      if ((v11 & 1) != 0)
      {
        result = (char *)absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::InitFrom((unint64_t *)v9, v10);
      }
      else
      {
        *(_QWORD *)v9 = v11;
        v12 = *(_OWORD *)(v10 + 1);
        *(_OWORD *)(v9 + 24) = *(_OWORD *)(v10 + 3);
        *(_OWORD *)(v9 + 8) = v12;
      }
    }
    v9 += 56;
    v10 += 7;
    --v5;
  }
  while (v5);
  *a1 = *a2;
  return result;
}

void *absl::inlined_vector_internal::Storage<std::optional<long long>,4ul,std::allocator<std::optional<long long>>>::InitFrom(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v5;
  void *v6;
  const void *v7;
  unint64_t v8;
  void *result;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v5 = v2 >> 1;
  if ((v2 & 1) != 0)
  {
    if (v5 <= 8)
      v8 = 8;
    else
      v8 = v2 >> 1;
    if (!(v8 >> 60))
    {
      v6 = operator new(16 * v8);
      a1[1] = (unint64_t)v6;
      a1[2] = v8;
      v7 = (const void *)a2[1];
      goto LABEL_9;
    }
LABEL_11:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v6 = a1 + 1;
  v7 = a2 + 1;
LABEL_9:
  result = memcpy(v6, v7, 16 * v5);
  *a1 = *a2;
  return result;
}

void absl::inlined_vector_internal::Storage<webrtc::FrameDependenciesCalculator::BufferUsage,4ul,std::allocator<webrtc::FrameDependenciesCalculator::BufferUsage>>::DestroyContents(_QWORD *a1)
{
  unint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (void **)(a1 + 1);
  v2 = *a1;
  v4 = *a1 & 1;
  v5 = a1 + 1;
  if ((*a1 & 1) != 0)
    v5 = *v3;
  if (v2 >= 2)
  {
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = v2 >> 1;
    v7 = (uint64_t)v5 + 56 * (v2 >> 1) - 40;
    do
    {
      if ((*(_BYTE *)v7 & 1) != 0)
        operator delete(*(void **)(v7 + 8));
      v7 -= 56;
      --v6;
    }
    while (v6);
    v4 = *a1 & 1;
  }
  if (v4)
    operator delete(*v3);
}

_QWORD *std::vector<webrtc::FrameDependencyTemplate>::__push_back_slow_path<webrtc::FrameDependencyTemplate const&>(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  _QWORD *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  unint64_t *v25;
  void **v26;
  __int128 v27;
  __int128 v28;

  v2 = 0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v5 = 0x276276276276276;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_40:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x276276276276276)
    goto LABEL_40;
  v7 = 104 * v5;
  v8 = (char *)operator new(104 * v5);
  v9 = (unint64_t *)&v8[104 * v2];
  *v9 = *(_QWORD *)a2;
  v9[1] = 0;
  v10 = v9 + 1;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 >= 2)
  {
    if ((v11 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::DecodeTargetIndication,10ul,std::allocator<webrtc::DecodeTargetIndication>>::InitFrom(v10, (unint64_t *)(a2 + 8));
    }
    else
    {
      *v10 = v11;
      v12 = &v8[104 * v2];
      v13 = *(_OWORD *)(a2 + 32);
      *((_OWORD *)v12 + 1) = *(_OWORD *)(a2 + 16);
      *((_OWORD *)v12 + 2) = v13;
      *((_QWORD *)v12 + 6) = *(_QWORD *)(a2 + 48);
    }
  }
  v14 = &v8[104 * v2];
  *((_QWORD *)v14 + 7) = 0;
  v15 = (unint64_t *)(v14 + 56);
  v16 = *(_QWORD *)(a2 + 56);
  if (v16 >= 2)
  {
    if ((v16 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v15, (unint64_t *)(a2 + 56));
    }
    else
    {
      *v15 = v16;
      *(_OWORD *)&v8[104 * v2 + 64] = *(_OWORD *)(a2 + 64);
    }
  }
  v17 = &v8[104 * v2];
  *((_QWORD *)v17 + 10) = 0;
  v18 = (unint64_t *)(v17 + 80);
  v19 = *(_QWORD *)(a2 + 80);
  if (v19 < 2)
  {
LABEL_20:
    v20 = &v8[v7];
    v21 = v9 + 13;
    v23 = (void **)*a1;
    v22 = (void **)a1[1];
    if (v22 != *a1)
      goto LABEL_21;
    goto LABEL_36;
  }
  if ((v19 & 1) == 0)
  {
    *v18 = v19;
    *(_OWORD *)&v8[104 * v2 + 88] = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }
  absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::InitFrom(v18, (unint64_t *)(a2 + 80));
  v20 = &v8[v7];
  v21 = v9 + 13;
  v23 = (void **)*a1;
  v22 = (void **)a1[1];
  if (v22 != *a1)
  {
LABEL_21:
    v24 = 0;
    do
    {
      v25 = &v9[v24];
      v26 = &v22[v24];
      *(v25 - 13) = (unint64_t)v22[v24 - 13];
      *(v25 - 12) = 0;
      *(v25 - 12) = (unint64_t)v22[v24 - 12];
      v27 = *(_OWORD *)&v22[v24 - 11];
      v28 = *(_OWORD *)&v22[v24 - 9];
      *(v25 - 7) = (unint64_t)v22[v24 - 7];
      *(_OWORD *)(v25 - 9) = v28;
      *(_OWORD *)(v25 - 11) = v27;
      *(v26 - 12) = 0;
      *(v25 - 6) = 0;
      *(v25 - 6) = (unint64_t)v22[v24 - 6];
      *(_OWORD *)(v25 - 5) = *(_OWORD *)&v22[v24 - 5];
      *(v26 - 6) = 0;
      *(v25 - 3) = 0;
      *(v25 - 3) = (unint64_t)v22[v24 - 3];
      *((_OWORD *)v25 - 1) = *(_OWORD *)&v22[v24 - 2];
      *(v26 - 3) = 0;
      v24 -= 13;
    }
    while (&v22[v24] != v23);
    *a1 = &v9[v24];
    a1[1] = v21;
    a1[2] = v20;
    while (1)
    {
      if ((*(_BYTE *)(v22 - 3) & 1) != 0)
      {
        operator delete(*(v22 - 2));
        if ((*(_BYTE *)(v22 - 6) & 1) == 0)
        {
LABEL_27:
          if ((*(_BYTE *)(v22 - 12) & 1) != 0)
            goto LABEL_31;
          goto LABEL_24;
        }
      }
      else if ((*(_BYTE *)(v22 - 6) & 1) == 0)
      {
        goto LABEL_27;
      }
      operator delete(*(v22 - 5));
      if ((*(_BYTE *)(v22 - 12) & 1) != 0)
LABEL_31:
        operator delete(*(v22 - 11));
LABEL_24:
      v22 -= 13;
      if (v22 == v23)
      {
        v22 = v23;
        if (v23)
          goto LABEL_33;
        return v21;
      }
    }
  }
LABEL_36:
  *a1 = v9;
  a1[1] = v21;
  a1[2] = v20;
  if (v22)
LABEL_33:
    operator delete(v22);
  return v21;
}

void absl::inlined_vector_internal::Storage<webrtc::RenderResolution,4ul,std::allocator<webrtc::RenderResolution>>::Resize<absl::inlined_vector_internal::CopyValueAdapter<std::allocator<webrtc::RenderResolution>>>(unint64_t *a1, const double *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  double *v14;
  double v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v20;
  float64x2_t v21;
  float64x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v4 = *a1;
  if ((*a1 & 1) == 0)
  {
    if (v4 <= 5)
    {
      v5 = v4 >> 1;
      v6 = (unint64_t)&a1[(v4 >> 1) + 1];
      v7 = 3 - (v4 >> 1);
      if (v7 < 0xA)
        goto LABEL_27;
LABEL_19:
      if (v6 >= (unint64_t)(a2 + 1) || v6 - 8 * v5 + 24 <= (unint64_t)a2)
      {
        v20 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        v21 = vld1q_dup_f64(a2);
        v22 = (float64x2_t *)(v6 + 16);
        v23 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v22[-1] = v21;
          *v22 = v21;
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        if (v7 == v20)
          goto LABEL_31;
        goto LABEL_28;
      }
LABEL_27:
      v20 = 0;
LABEL_28:
      v24 = v20 + v5 - 3;
      v25 = (_QWORD *)(v6 + 8 * v20);
      do
        *v25++ = *(_QWORD *)a2;
      while (!__CFADD__(v24++, 1));
LABEL_31:
      v4 = *a1;
    }
LABEL_32:
    *a1 = v4 & 1 | 6;
    return;
  }
  if (v4 >= 6)
    goto LABEL_32;
  v9 = (uint64_t *)a1[1];
  v8 = a1[2];
  v5 = v4 >> 1;
  if (v8 < 3)
  {
    v10 = 2 * v8;
    if (v10 <= 3)
      v11 = 3;
    else
      v11 = v10;
    v12 = operator new(8 * v11);
    v13 = v12;
    v14 = (double *)&v12[v5];
    v15 = *a2;
    *v14 = *a2;
    if (v5 != 2)
    {
      v14[1] = v15;
      if (v5 != 1)
        v14[2] = v15;
    }
    if (v4 >= 2)
    {
      v16 = v12;
      v17 = v9;
      do
      {
        v18 = *v17++;
        *v16++ = v18;
        --v5;
      }
      while (v5);
    }
    operator delete(v9);
    a1[1] = (unint64_t)v13;
    a1[2] = v11;
    LOBYTE(v4) = 1;
    goto LABEL_32;
  }
  if (v9)
  {
    v6 = (unint64_t)&v9[v5];
    v7 = 3 - v5;
    if (3 - v5 < 0xA)
      goto LABEL_27;
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t webrtc::RtpReceiverInternal::CreateStreamsFromIds@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;

  v4 = *(_QWORD *)result;
  v3 = *(_QWORD *)(result + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = v3 - v4;
  if (v5)
  {
    if (!((0xAAAAAAAAAAAAAAABLL * (v5 >> 3)) >> 61))
    {
      v6 = (_QWORD *)result;
      v21 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
      v7 = 0x5555555555555558 * (v5 >> 3);
      v8 = (char *)operator new(v7);
      *a2 = v8;
      a2[2] = &v8[v7];
      bzero(v8, v7);
      v9 = 0;
      a2[1] = &v8[v7];
      while (1)
      {
        v10 = rtc::Thread::Current((rtc::Thread *)result);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3) <= v9)
          break;
        v11 = v10;
        v12 = *v6 + 24 * v9;
        v13 = operator new();
        *(_QWORD *)(v13 + 16) = v13 + 16;
        *(_QWORD *)(v13 + 24) = v13 + 16;
        *(_QWORD *)(v13 + 32) = 0;
        *(_QWORD *)v13 = &unk_24C0B7020;
        *(_QWORD *)(v13 + 8) = &unk_24C0B70C8;
        v14 = (std::string *)(v13 + 40);
        if (*(char *)(v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
        }
        else
        {
          v15 = *(_OWORD *)v12;
          *(_QWORD *)(v13 + 56) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        *(_OWORD *)(v13 + 80) = 0u;
        *(_OWORD *)(v13 + 96) = 0u;
        *(_OWORD *)(v13 + 64) = 0u;
        *(_QWORD *)v13 = &unk_24C0B71D0;
        *(_QWORD *)(v13 + 8) = &unk_24C0B7280;
        *(_DWORD *)(v13 + 112) = 0;
        v16 = (unsigned int *)(v13 + 112);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        result = operator new();
        *(_QWORD *)(result + 16) = v11;
        *(_QWORD *)(result + 24) = v13;
        *(_QWORD *)result = off_24C0B9F28;
        *(_QWORD *)(result + 8) = &unk_24C0B9FD8;
        *(_DWORD *)(result + 32) = 0;
        v18 = (unsigned int *)(result + 32);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        if (v9 == v21)
          break;
        v20 = *(_QWORD *)&v8[8 * v9];
        *(_QWORD *)&v8[8 * v9] = result;
        if (v20)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (++v9 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6[1] - *v6) >> 3))
          return result;
      }
      __break(1u);
    }
    abort();
  }
  return result;
}

void webrtc::RtpReceiverInterface::stream_ids(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void webrtc::RtpReceiverInterface::streams(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void webrtc::RtpReceiverInterface::GetSources(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void webrtc::RtpReceiverInterface::GetFrameDecryptor(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void webrtc::RtpReceiverInterface::dtls_transport(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unint64_t webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *sig;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  pthread_mutex_t *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _QWORD *v53;
  char v54;
  __n128 v55;
  __n128 (*v56)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v57)(uint64_t *);
  _QWORD v58[3];
  _QWORD *v59;
  _BYTE v60[25];
  _QWORD v61[3];
  _QWORD *v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[2];
  _QWORD v67[3];
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  pthread_mutexattr_t v72;
  unsigned __int8 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BCD28;
  *(_QWORD *)(a1 + 8) = &unk_24C0BCF90;
  *(_QWORD *)(a1 + 24) = 0;
  LOBYTE(v64) = 0;
  BYTE8(v63) = 0;
  v60[0] = *(_BYTE *)v4;
  *(_DWORD *)&v60[4] = *(_DWORD *)(v4 + 208);
  v5 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)&v60[8] = *(_QWORD *)(v4 + 8);
  *(_QWORD *)&v60[16] = v5;
  v60[24] = *(_BYTE *)(v4 + 221);
  *(_QWORD *)&v63 = *(_QWORD *)(v4 + 136);
  v6 = *(_DWORD *)(v4 + 168);
  if (v6)
  {
    LOBYTE(v64) = 1;
    *((_QWORD *)&v63 + 1) = 1000 * v6;
  }
  v7 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)&v64 + 1) = *(_QWORD *)(a2 + 16);
  v65 = v7;
  v58[0] = &off_24C0BCFD0;
  v58[1] = a1;
  v59 = v58;
  v62 = v61;
  v61[0] = &off_24C0BCFD0;
  v61[1] = a1;
  v66[0] = *(_OWORD *)v60;
  *(_OWORD *)((char *)v66 + 9) = *(_OWORD *)&v60[9];
  v68 = v67;
  v67[0] = &off_24C0BCFD0;
  v67[1] = a1;
  v71 = v7;
  v70 = v64;
  v69 = v63;
  webrtc::RTCPSender::RTCPSender(a1 + 32, (uint64_t)v66);
  v8 = v68;
  if (v68 == v67)
  {
    v9 = 4;
    v8 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_8;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  v10 = v59;
  if (v59 == v58)
  {
    v11 = 4;
    v10 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  v12 = v62;
  if (v62 == v61)
  {
    v13 = 4;
    v12 = v61;
    goto LABEL_17;
  }
  if (v62)
  {
    v13 = 5;
LABEL_17:
    (*(void (**)(void))(*v12 + 8 * v13))();
  }
  webrtc::RTCPReceiver::RTCPReceiver((_QWORD *)(a1 + 712), a2, (unint64_t *)a1);
  *(_QWORD *)(a1 + 1208) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 1216) = 28;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_WORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1240) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 1248) = 0;
  pthread_mutexattr_init(&v72);
  pthread_mutexattr_setpolicy_np(&v72, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 1256), &v72);
  pthread_mutexattr_destroy(&v72);
  *(_QWORD *)(a1 + 1320) = 0;
  v14 = operator new();
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  *(_QWORD *)(a1 + 1328) = v14;
  do
    v15 = __ldxr((unsigned int *)v14);
  while (__stxr(v15 + 1, (unsigned int *)v14));
  if (!*(_BYTE *)(a2 + 1))
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = (char *)operator new();
    v18 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a2 + 200);
    if (v19)
    {
      (*(void (**)(pthread_mutexattr_t *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v19 + 16))(&v72, v19, "WebRTC-PaddingMode-RecentLargePacket", 36);
      if ((char)v73 < 0)
      {
        v21 = *(_QWORD *)v72.__opaque;
        if ((*(_QWORD *)v72.__opaque & 0x8000000000000000) != 0
          || (sig = (_QWORD *)v72.__sig, *(_QWORD *)v72.__opaque) && !v72.__sig)
        {
          __break(1u);
LABEL_65:
          {
            v53 = (_QWORD *)operator new();
            *v53 = &unk_24C0B13E8;
            *((_QWORD *)v17 + 153) = v53;
          }
          goto LABEL_53;
        }
      }
      else
      {
        sig = &v72;
        v21 = v73;
      }
      if (v21 >= 8)
      {
        if (*sig == 0x64656C6261736944)
          v22 = 1;
        else
          v22 = 2;
        if ((v73 & 0x80) != 0)
          goto LABEL_35;
      }
      else
      {
        v22 = 2;
        if ((v73 & 0x80) != 0)
LABEL_35:
          operator delete((void *)v72.__sig);
      }
    }
    else
    {
      v22 = 2;
    }
    *(_QWORD *)v17 = v18;
    *((_DWORD *)v17 + 2) = v22;
    pthread_mutexattr_init(&v72);
    pthread_mutexattr_setpolicy_np(&v72, 3);
    pthread_mutex_init((pthread_mutex_t *)(v17 + 16), &v72);
    pthread_mutexattr_destroy(&v72);
    *((_QWORD *)v17 + 10) = 0;
    *((_DWORD *)v17 + 22) = 0;
    *((_QWORD *)v17 + 12) = 0x8000000000000000;
    *((_QWORD *)v17 + 22) = 0;
    *((_QWORD *)v17 + 21) = 0;
    *(_OWORD *)(v17 + 136) = 0u;
    *(_OWORD *)(v17 + 120) = 0u;
    *(_OWORD *)(v17 + 104) = 0u;
    *((_QWORD *)v17 + 19) = 0;
    *((_QWORD *)v17 + 20) = v17 + 168;
    v17[184] = 0;
    v17[392] = 0;
    v23 = *(_QWORD *)(a2 + 212);
    v24 = *(_QWORD *)(a2 + 8);
    v25 = *(_BYTE *)a2 ^ 1;
    *((_DWORD *)v17 + 102) = *(_DWORD *)(a2 + 208);
    *(_QWORD *)(v17 + 412) = v23;
    v17[420] = v25;
    *((_QWORD *)v17 + 53) = v24;
    *((_DWORD *)v17 + 108) = 0;
    v17[436] = -1;
    *((_DWORD *)v17 + 110) = 0;
    *((int64x2_t *)v17 + 28) = vdupq_n_s64(0x8000000000000000);
    v17[464] = 0;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
    v27 = v26 ^ (v26 >> 12) ^ ((v26 ^ (v26 >> 12)) << 25);
    v28 = v27 ^ (v27 >> 27);
    *((_WORD *)v17 + 216) = ((0x7FFF * (unint64_t)(1332534557 * v28)) >> 32) + 1;
    v29 = v28 ^ (v28 >> 12) ^ ((v28 ^ (v28 >> 12)) << 25);
    v30 = 1332534557 * ((v29 >> 27) ^ v29);
    *((_WORD *)v17 + 217) = ((((unint64_t)v30 << 15) - v30) >> 32) + 1;
    v31 = webrtc::RtpSenderEgress::RtpSenderEgress((unint64_t)(v17 + 472), a2, (uint64_t)v17);
    *((_QWORD *)v17 + 121) = &off_24C0BDBD0;
    *((_QWORD *)v17 + 122) = v16;
    *((_WORD *)v17 + 492) = 0;
    *((_QWORD *)v17 + 124) = v31;
    *((_QWORD *)v17 + 125) = v17 + 408;
    v32 = operator new();
    *(_DWORD *)v32 = 0;
    *(_BYTE *)(v32 + 4) = 1;
    *((_QWORD *)v17 + 126) = v32;
    do
      v33 = __ldxr((unsigned int *)v32);
    while (__stxr(v33 + 1, (unsigned int *)v32));
    if (*(_QWORD *)(a2 + 112))
      v34 = *(_QWORD *)(a2 + 112);
    else
      v34 = (uint64_t)(v17 + 968);
    webrtc::RTPSender::RTPSender((uint64_t)(v17 + 1016), a2, (uint64_t)v17, v34);
    v35 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v17;
    if (!v35)
    {
LABEL_49:
      v39 = (pthread_mutex_t *)(v17 + 1072);
      pthread_mutex_lock((pthread_mutex_t *)(v17 + 1072));
      v40 = *((_DWORD *)v17 + 298);
      pthread_mutex_unlock(v39);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
      *(_DWORD *)(a1 + 216) = v40;
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
      v41 = *(_QWORD *)(a1 + 24);
      pthread_mutex_lock((pthread_mutex_t *)(v41 + 1072));
      v42 = *(_DWORD *)(v41 + 1192);
      pthread_mutex_unlock((pthread_mutex_t *)(v41 + 1072));
      *(_DWORD *)(v41 + 596) = v42;
      goto LABEL_50;
    }
    std::__tree<sigslot::_signal_base_interface *>::destroy(v35 + 1272, *(_QWORD **)(v35 + 1280));
    if (*(char *)(v35 + 1247) < 0)
    {
      operator delete(*(void **)(v35 + 1224));
      if ((*(char *)(v35 + 1223) & 0x80000000) == 0)
        goto LABEL_44;
    }
    else if ((*(char *)(v35 + 1223) & 0x80000000) == 0)
    {
      goto LABEL_44;
    }
    operator delete(*(void **)(v35 + 1200));
LABEL_44:
    pthread_mutex_destroy((pthread_mutex_t *)(v35 + 1072));
    *(_QWORD *)(v35 + 968) = &off_24C0BDBD0;
    v36 = *(_QWORD *)(v35 + 1008);
    *(_BYTE *)(v36 + 4) = 0;
    do
    {
      v37 = __ldaxr((unsigned int *)v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)v36));
    if (!v38)
      MEMORY[0x20BD0ADEC]();
    webrtc::RtpSenderEgress::~RtpSenderEgress((webrtc::RtpSenderEgress *)(v35 + 472));
    webrtc::RtpPacketHistory::~RtpPacketHistory((webrtc::RtpPacketHistory *)v35);
    MEMORY[0x20BD0ADEC]();
    v17 = *(char **)(a1 + 24);
    goto LABEL_49;
  }
LABEL_50:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  *(_QWORD *)(a1 + 400) = 1460;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  v43 = *(_QWORD *)(a1 + 24);
  if (v43)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v43 + 1072));
    *(_QWORD *)(v43 + 1144) = 1460;
    pthread_mutex_unlock((pthread_mutex_t *)(v43 + 1072));
  }
  a2 = *(_QWORD *)(a1 + 16);
  v55.n128_u64[0] = a1;
  v56 = absl::internal_any_invocable::LocalManagerTrivial;
  v57 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_1 &>;
  v17 = (char *)&unk_253EA7000;
  if ((v44 & 1) == 0)
    goto LABEL_65;
LABEL_53:
  webrtc::RepeatingTaskHandle::DelayedStart(a2, 1000000, (uint64_t)&v55, 0, *((_QWORD *)v17 + 153), (uint64_t)&v54, (unsigned int **)&v72);
  v45 = v72.__sig;
  v72.__sig = 0;
  v46 = *(unsigned int **)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = v45;
  if (v46)
  {
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      MEMORY[0x20BD0ADEC]();
    v49 = (unsigned int *)v72.__sig;
    if (v72.__sig)
    {
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
        MEMORY[0x20BD0ADEC]();
    }
  }
  v56(1, &v55, &v55);
  return a1;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetMaxRtpPacketSize(pthread_mutex_t *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t result;
  uint64_t v6;

  v4 = this + 2;
  pthread_mutex_lock(this + 2);
  *(_QWORD *)&this[6].__opaque[8] = a2;
  result = pthread_mutex_unlock(v4);
  v6 = *(_QWORD *)&this->__opaque[16];
  if (v6)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 1072));
    *(_QWORD *)(v6 + 1144) = a2;
    return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 1072));
  }
  return result;
}

void webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *((_QWORD *)this + 156);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 156) = 0;
  }
  v5 = *((_QWORD *)this + 166);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1256));
  v8 = (unsigned int *)*((_QWORD *)this + 156);
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      MEMORY[0x20BD0ADEC]();
  }
  webrtc::RTCPReceiver::~RTCPReceiver((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 712));
  webrtc::RTCPSender::~RTCPSender((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 32));
  v11 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v11)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v11 + 1272, *(_QWORD **)(v11 + 1280));
    if (*(char *)(v11 + 1247) < 0)
    {
      operator delete(*(void **)(v11 + 1224));
      if ((*(char *)(v11 + 1223) & 0x80000000) == 0)
        goto LABEL_18;
    }
    else if ((*(char *)(v11 + 1223) & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(*(void **)(v11 + 1200));
LABEL_18:
    pthread_mutex_destroy((pthread_mutex_t *)(v11 + 1072));
    *(_QWORD *)(v11 + 968) = &off_24C0BDBD0;
    v12 = *(_QWORD *)(v11 + 1008);
    *(_BYTE *)(v12 + 4) = 0;
    do
    {
      v13 = __ldaxr((unsigned int *)v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, (unsigned int *)v12));
    if (!v14)
      MEMORY[0x20BD0ADEC]();
    webrtc::RtpSenderEgress::~RtpSenderEgress((webrtc::RtpSenderEgress *)(v11 + 472));
    webrtc::RtpPacketHistory::~RtpPacketHistory((webrtc::RtpPacketHistory *)v11);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(webrtc::ModuleRtpRtcpImpl2 *this)
{
  webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2((webrtc::ModuleRtpRtcpImpl2 *)((char *)this - 8));
}

{
  webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2((webrtc::ModuleRtpRtcpImpl2 *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRtxSendStatus(webrtc::ModuleRtpRtcpImpl2 *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 1072));
  if (!a2 || *(_BYTE *)(v3 + 1044) && *(_QWORD *)(v3 + 1288))
  {
    *(_DWORD *)(v3 + 1264) = a2;
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc");
    return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RtxSendStatus(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = (pthread_mutex_t *)(v1 + 1072);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
    v1 = *(unsigned int *)(v1 + 1264);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRtxSendPayloadType(webrtc::ModuleRtpRtcpImpl2 *this, int a2, char a3)
{
  return webrtc::RTPSender::SetRtxPayloadType((webrtc::RTPSender *)(*((_QWORD *)this + 3) + 1016), a2, a3);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RtxSsrc(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 1040);
  else
    return 0;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::FlexfecSsrc(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return *(_QWORD *)(v1 + 1048);
  else
    return 0;
}

void webrtc::ModuleRtpRtcpImpl2::IncomingRtcpPacket(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  webrtc::RTCPReceiver *v3;

  v3 = (webrtc::RTCPReceiver *)(a1 + 712);
  if (!a3)
    a2 = 0;
  webrtc::RTCPReceiver::IncomingPacket(v3, a2, a3);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RegisterSendPayloadFrequency(webrtc::ModuleRtpRtcpImpl2 *this, char a2, int a3)
{
  return webrtc::RTCPSender::SetRtpClockRate((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 32), a2, a3);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::DeRegisterSendPayload(webrtc::ModuleRtpRtcpImpl2 *this)
{
  return 0;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::StartTimestamp(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  v2 = (pthread_mutex_t *)(v1 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
  v3 = *(unsigned int *)(v1 + 1192);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetStartTimestamp(pthread_mutex_t *this, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t result;

  v4 = this + 2;
  pthread_mutex_lock(this + 2);
  *(_DWORD *)&this[3].__opaque[16] = a2;
  pthread_mutex_unlock(v4);
  v5 = *(_QWORD *)&this->__opaque[16];
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 1072));
  *(_DWORD *)(v5 + 1192) = a2;
  result = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 1072));
  *(_DWORD *)(*(_QWORD *)&this->__opaque[16] + 596) = a2;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SequenceNumber(webrtc::ModuleRtpRtcpImpl2 *this)
{
  return *(unsigned __int16 *)(*((_QWORD *)this + 3) + 432);
}

webrtc::RtpPacketHistory *webrtc::ModuleRtpRtcpImpl2::SetSequenceNumber(webrtc::ModuleRtpRtcpImpl2 *this, int a2)
{
  webrtc::RtpPacketHistory *result;

  result = (webrtc::RtpPacketHistory *)*((_QWORD *)this + 3);
  if (*((unsigned __int16 *)result + 216) != a2)
  {
    *((_WORD *)result + 216) = a2;
    return (webrtc::RtpPacketHistory *)webrtc::RtpPacketHistory::Clear(result);
  }
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRtpState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1072));
  *(_DWORD *)(v4 + 1192) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(v4 + 1249) = *(_BYTE *)(a2 + 32);
  webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v4 + 1016));
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1072));
  v5 = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v5 + 432) = *(_WORD *)a2;
  *(_DWORD *)(v5 + 440) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v5 + 448) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 456) = *(_QWORD *)(a2 + 24);
  v6 = *(_DWORD *)(a2 + 4);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  *(_DWORD *)(a1 + 216) = v6;
  result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 128));
  *(_DWORD *)(*(_QWORD *)(a1 + 24) + 596) = *(_DWORD *)(a2 + 4);
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRtxState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1072));
  *(_BYTE *)(v4 + 1250) = *(_BYTE *)(a2 + 32);
  result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1072));
  *(_WORD *)(*(_QWORD *)(a1 + 24) + 434) = *(_WORD *)a2;
  return result;
}

__n128 webrtc::ModuleRtpRtcpImpl2::GetRtpState@<Q0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4;
  __n128 *v5;
  __n128 result;

  v4 = *((_QWORD *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1072));
  a2->n128_u32[1] = *(_DWORD *)(v4 + 1192);
  a2[2].n128_u8[0] = *(_BYTE *)(v4 + 1249);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1072));
  v5 = (__n128 *)*((_QWORD *)this + 3);
  a2->n128_u16[0] = v5[27].n128_u16[0];
  a2->n128_u32[2] = v5[27].n128_u32[2];
  result = v5[28];
  a2[1] = result;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::GetRtxState@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, int64x2_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1072));
  a2[1] = vdupq_n_s64(0x8000000000000000);
  a2->i32[1] = *(_DWORD *)(v4 + 1192);
  a2->i32[2] = 0;
  a2[2].i8[0] = *(_BYTE *)(v4 + 1250);
  result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1072));
  a2->i16[0] = *(_WORD *)(*((_QWORD *)this + 3) + 434);
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetNonSenderRttMeasurement(webrtc::ModuleRtpRtcpImpl2 *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 128);
  pthread_mutex_lock((pthread_mutex_t *)this + 2);
  *((_BYTE *)this + 408) = a2;
  pthread_mutex_unlock(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  *((_BYTE *)this + 968) = a2;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 808));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetMid(uint64_t result, __int128 *a2, size_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(result + 24);
  if (v3)
    return webrtc::RTPSender::SetMid(v3 + 1016, a2, a3);
  return result;
}

double webrtc::ModuleRtpRtcpImpl2::GetFeedbackState@<D0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  webrtc::RtpSenderEgress *v5;
  uint64_t v6;
  uint64_t v7;
  Timestamp v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  webrtc::RTCPReceiver *v18;
  pthread_mutex_t *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  double result;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = (webrtc::RtpSenderEgress *)(v4 + 472);
    v6 = *(_QWORD *)(v4 + 616);
    v7 = *(_QWORD *)(v4 + 744);
    *(_DWORD *)a2 = *(_DWORD *)(v4 + 760) + *(_DWORD *)(v4 + 632);
    *(_QWORD *)(a2 + 8) = v7 + v6;
    v8.var0 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 151) + 16))(*((_QWORD *)this + 151));
    webrtc::RtpSenderEgress::GetSendRates(v5, v8, (uint64_t *)&v25);
    v9 = 0x7FFFFFFFFFFFFFFFLL;
    if ((_QWORD)v25 != 0x7FFFFFFFFFFFFFFFLL && *((_QWORD *)&v25 + 1) != 0x7FFFFFFFFFFFFFFFLL)
    {
      v10 = *((_QWORD *)&v25 + 1) == 0x8000000000000000 || (_QWORD)v25 == 0x8000000000000000;
      v11 = *((_QWORD *)&v25 + 1) + v25;
      if (v10)
        v11 = 0x8000000000000000;
      v9 = 0x7FFFFFFFFFFFFFFFLL;
      if (v11 != 0x7FFFFFFFFFFFFFFFLL && v26 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v12 = v26 == 0x8000000000000000 || v11 == 0x8000000000000000;
        v13 = v26 + v11;
        if (v12)
          v13 = 0x8000000000000000;
        v9 = 0x7FFFFFFFFFFFFFFFLL;
        if (v13 != 0x7FFFFFFFFFFFFFFFLL && v27 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v14 = v27 == 0x8000000000000000 || v13 == 0x8000000000000000;
          v15 = v27 + v13;
          if (v14)
            v15 = 0x8000000000000000;
          v9 = 0x7FFFFFFFFFFFFFFFLL;
          if (v15 != 0x7FFFFFFFFFFFFFFFLL && v28 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v9 = 0x8000000000000000;
            v16 = v28 == 0x8000000000000000 || v15 == 0x8000000000000000;
            v17 = v28 + v15;
            if (!v16)
              v9 = v17;
          }
        }
      }
    }
    *(_QWORD *)(a2 + 16) = v9;
  }
  v18 = (webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 712);
  *(_QWORD *)(a2 + 64) = (char *)this + 712;
  v19 = (pthread_mutex_t *)((char *)this + 808);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  v20 = *((_QWORD *)this + 110);
  if (v20)
  {
    v21 = *((_DWORD *)this + 223);
    v22 = *((_DWORD *)this + 222);
    pthread_mutex_unlock(v19);
    *(_DWORD *)(a2 + 24) = __PAIR64__(v21, v22) >> 16;
    *(_QWORD *)(a2 + 32) = v20;
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 808));
  }
  webrtc::RTCPReceiver::ConsumeReceivedXrReferenceTimeInfo(v18, (char **)&v25);
  v23 = v26;
  result = *(double *)&v25;
  *(_OWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 56) = v23;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetSendingStatus(pthread_mutex_t *this, int a2)
{
  pthread_mutex_t *v4;
  int v5;
  _BYTE v7[40];
  void *__p;

  v4 = this + 2;
  pthread_mutex_lock(this + 2);
  v5 = LOBYTE(this[3].__sig) != 0;
  pthread_mutex_unlock(v4);
  if (v5 != a2)
  {
    webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)this, (uint64_t)v7);
    pthread_mutex_lock(v4);
    LOBYTE(this[3].__sig) = a2;
    pthread_mutex_unlock(v4);
    if (__p)
      operator delete(__p);
  }
  return 0;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::Sending(pthread_mutex_t *this)
{
  pthread_mutex_t *v2;
  uint64_t sig_low;

  v2 = this + 2;
  pthread_mutex_lock(this + 2);
  sig_low = LOBYTE(this[3].__sig);
  pthread_mutex_unlock(v2);
  return sig_low;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetSendingMediaStatus(webrtc::ModuleRtpRtcpImpl2 *this, char a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 1072));
  *(_BYTE *)(v3 + 1136) = a2;
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SendingMedia(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = (pthread_mutex_t *)(v1 + 1072);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
    v1 = *(_BYTE *)(v1 + 1136) != 0;
    pthread_mutex_unlock(v2);
  }
  return v1;
}

BOOL webrtc::ModuleRtpRtcpImpl2::IsAudioConfigured(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  return v1 && *(_BYTE *)(v1 + 1032) != 0;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetAsPartOfAllocation(uint64_t this, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  std::string *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t vars0;

  v8 = *(_QWORD *)(this + 24);
  if (v8)
  {
    *(_BYTE *)(v8 + 593) = a2;
  }
  else
  {
    v9 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_rtcp_impl2.cc", 305, "rtp_sender_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, vars0);
    return webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame((pthread_mutex_t *)v9, v10, v11, v12, v13);
  }
  return this;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame(pthread_mutex_t *this, int a2, uint64_t a3, int a4, int a5)
{
  pthread_mutex_t *v10;
  int sig_low;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  unsigned int *v17;
  unsigned int v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  _QWORD v30[2];
  uint64_t (*v31)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v32)(uint64_t);
  void *__p;
  void *v34;
  char v35;

  v10 = this + 2;
  pthread_mutex_lock(this + 2);
  sig_low = LOBYTE(this[3].__sig);
  pthread_mutex_unlock(v10);
  if (!sig_low)
    return sig_low != 0;
  v28 = a5;
  v12 = a3 > 0;
  if (a3 <= 0)
    v13 = 0;
  else
    v13 = 1000 * a3;
  v14 = *(_QWORD *)&this->__opaque[8];
  {
    v15 = a4 & ~(a4 >> 31);
    v16 = a4 >= 0;
    v17 = *(unsigned int **)&this[20].__opaque[40];
    if (v17)
    {
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = operator new(0x30uLL);
    *(_QWORD *)v19 = this;
    v19[2] = a2;
    *((_QWORD *)v19 + 2) = v13;
    *((_QWORD *)v19 + 3) = v12;
    v19[8] = v15;
    *((_BYTE *)v19 + 36) = v16;
    *((_BYTE *)v19 + 40) = v28;
    v20 = (_QWORD *)operator new();
    *v20 = v17;
    v20[1] = v19;
    v20[2] = 48;
    v20[3] = absl::internal_any_invocable::RemoteManagerTrivial;
    v20[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame(unsigned int,long long,int,BOOL)::$_0 &&>;
    v30[0] = v20;
    v31 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v32 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v14 + 8))(v14, v30, &v35, &v29);
    v31(1, v30, v30);
    return sig_low != 0;
  }
  pthread_mutex_lock(v10);
  if ((a4 & 0x80000000) == 0)
    this[10].__opaque[8] = a4;
  *(_DWORD *)&this[3].__opaque[20] = a2;
  if (a3 <= 0)
  {
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this->__opaque[40] + 16))(*(_QWORD *)&this->__opaque[40]);
    if (!this[3].__opaque[32])
      this[3].__opaque[32] = 1;
    *(_QWORD *)&this[3].__opaque[24] = v22;
  }
  else
  {
    if (!this[3].__opaque[32])
      this[3].__opaque[32] = 1;
    *(_QWORD *)&this[3].__opaque[24] = 1000 * a3;
  }
  pthread_mutex_unlock(v10);
  v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&this->__opaque[40] + 16))(*(_QWORD *)&this->__opaque[40]);
  result = pthread_mutex_lock(v10);
  if (!LODWORD(this[1].__sig))
  {
    pthread_mutex_unlock(v10);
    return sig_low != 0;
  }
  v24 = 0x7FFFFFFFFFFFFFFFLL;
  v25 = v23 + 100000;
  if (v23 == 0x8000000000000000)
    v25 = 0x8000000000000000;
  if (v23 != 0x7FFFFFFFFFFFFFFFLL)
    v24 = v25;
  if (!a5)
    v24 = v23;
  if (this->__opaque[32])
    v26 = v23;
  else
    v26 = v24;
  if (this[3].__opaque[8])
  {
    v27 = *(_QWORD *)this[3].__opaque;
    pthread_mutex_unlock(v10);
    if (v26 >= v27)
    {
      webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)this, (uint64_t)v30);
      webrtc::RTCPSender::SendRTCP((uint64_t)&this->__opaque[24], v30, 1u, 0, 0);
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
    }
    return sig_low != 0;
  }
  __break(1u);
  return result;
}

BOOL webrtc::ModuleRtpRtcpImpl2::CanSendPacket(webrtc::ModuleRtpRtcpImpl2 *this, const webrtc::RtpPacketToSend *a2)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v7;
  _BOOL8 result;

  v4 = *((_QWORD *)this + 3);
  v5 = (pthread_mutex_t *)(v4 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1072));
  LODWORD(v4) = *(unsigned __int8 *)(v4 + 1136);
  pthread_mutex_unlock(v5);
  result = 0;
  if ((_DWORD)v4)
  {
    if (!*((_BYTE *)a2 + 128) || *((_QWORD *)a2 + 15) != 4)
      return 1;
    v7 = *((_QWORD *)this + 3);
    if (*((_DWORD *)a2 + 3) != *(_DWORD *)(v7 + 1036)
      || *(unsigned __int8 *)(v7 + 436) != 255 && (!*(_BYTE *)(v7 + 420) || *(_BYTE *)(v7 + 464)))
    {
      return 1;
    }
  }
  return result;
}

uint64_t *webrtc::ModuleRtpRtcpImpl2::AssignSequenceNumber(uint64_t *this, webrtc::RtpPacketToSend *a2)
{
  BOOL v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)a2 + 128))
    v2 = *((_QWORD *)a2 + 15) == 3;
  else
    v2 = 0;
  if (!v2)
  {
    v3 = (uint64_t *)(this[3] + 408);
    return webrtc::PacketSequencer::Sequence(v3, a2);
  }
  v4 = this[3];
  v5 = *(_QWORD *)(v4 + 1048);
  if ((v5 & 0xFF00000000) == 0 || *((_DWORD *)a2 + 3) != (_DWORD)v5)
  {
    v3 = (uint64_t *)(v4 + 408);
    return webrtc::PacketSequencer::Sequence(v3, a2);
  }
  return this;
}

void webrtc::ModuleRtpRtcpImpl2::SendPacket(uint64_t a1, webrtc::RtpPacket **a2, uint64_t a3)
{
  webrtc::RtpPacket *v3;
  uint64_t v4;
  webrtc::RtpPacket *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  webrtc::RtpPacket *v16;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24) + 472;
  *a2 = 0;
  v16 = v3;
  webrtc::RtpSenderEgress::SendPacket(v4, &v16, a3);
  v5 = v16;
  v16 = 0;
  if (v5)
  {
    v6 = (unsigned int *)*((_QWORD *)v5 + 22);
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
    v10 = *((_QWORD *)v5 + 11);
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 24);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        v14 = *(_QWORD *)(v10 + 16);
        *(_QWORD *)(v10 + 16) = 0;
        if (v14)
          MEMORY[0x20BD0ADD4](v14, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v10, 0x1010C40EE34DA14);
      }
    }
    v15 = (void *)*((_QWORD *)v5 + 7);
    if (v15)
    {
      *((_QWORD *)v5 + 8) = v15;
      operator delete(v15);
    }
    MEMORY[0x20BD0ADEC](v5, 0x1020C4000E59722);
  }
}

uint64_t webrtc::ModuleRtpRtcpImpl2::TrySendPacket(uint64_t a1, webrtc::RtpPacketToSend **a2, uint64_t a3)
{
  webrtc::RtpPacketToSend *v3;
  uint64_t v7;
  pthread_mutex_t *v8;
  uint64_t v10;
  webrtc::RtpPacketToSend *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v17;
  webrtc::RtpPacket *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  webrtc::RtpPacket *v29;

  v3 = *a2;
  if (!*a2)
    return 0;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (pthread_mutex_t *)(v7 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 1072));
  LODWORD(v7) = *(unsigned __int8 *)(v7 + 1136);
  pthread_mutex_unlock(v8);
  if (!(_DWORD)v7)
    return 0;
  if (*((_BYTE *)v3 + 128) && *((_QWORD *)v3 + 15) == 4)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (*((_DWORD *)v3 + 3) == *(_DWORD *)(v10 + 1036)
      && (*(unsigned __int8 *)(v10 + 436) == 255 || *(_BYTE *)(v10 + 420) && !*(_BYTE *)(v10 + 464)))
    {
      return 0;
    }
  }
  v11 = *a2;
  if (*((_BYTE *)*a2 + 128))
    v12 = *((_QWORD *)*a2 + 15) == 3;
  else
    v12 = 0;
  if (v12)
  {
    v13 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(v13 + 1048);
    if ((v15 & 0xFF00000000) != 0 && *((_DWORD *)v11 + 3) == (_DWORD)v15)
      goto LABEL_23;
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 24);
  }
  webrtc::PacketSequencer::Sequence((uint64_t *)(v13 + 408), v11);
  v11 = *a2;
LABEL_23:
  *a2 = 0;
  v17 = *(_QWORD *)(a1 + 24) + 472;
  v29 = v11;
  webrtc::RtpSenderEgress::SendPacket(v17, &v29, a3);
  v18 = v29;
  v29 = 0;
  if (v18)
  {
    v19 = (unsigned int *)*((_QWORD *)v18 + 22);
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
    }
    v23 = *((_QWORD *)v18 + 11);
    if (v23)
    {
      v24 = (unsigned int *)(v23 + 24);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        v27 = *(_QWORD *)(v23 + 16);
        *(_QWORD *)(v23 + 16) = 0;
        if (v27)
          MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
      }
    }
    v28 = (void *)*((_QWORD *)v18 + 7);
    if (v28)
    {
      *((_QWORD *)v18 + 8) = v28;
      operator delete(v28);
    }
    MEMORY[0x20BD0ADEC](v18, 0x1020C4000E59722);
  }
  return 1;
}

void webrtc::ModuleRtpRtcpImpl2::OnBatchComplete(webrtc::ModuleRtpRtcpImpl2 *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::RtpSenderEgress::OnBatchComplete((webrtc::RtpSenderEgress *)(*((_QWORD *)this + 3) + 472), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetFecProtectionParams(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 24);
  if (*(_BYTE *)(v3 + 904))
    *(_BYTE *)(v3 + 904) = 0;
  v4 = *a2;
  *(_DWORD *)(v3 + 888) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v3 + 880) = v4;
  v5 = *a3;
  *(_DWORD *)(v3 + 900) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(v3 + 892) = v5;
  *(_BYTE *)(v3 + 904) = 1;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::FetchFecPackets@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 552);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::OnAbortedRetransmissions(uint64_t result, unsigned __int16 *a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  if (a3)
    v3 = a2;
  else
    v3 = 0;
  if (a3)
  {
    v4 = *(_QWORD *)(result + 24);
    v5 = 2 * a3;
    do
    {
      v6 = *v3++;
      result = webrtc::RtpPacketHistory::MarkPacketAsSent(*(webrtc::RtpPacketHistory **)(v4 + 520), v6);
      v5 -= 2;
    }
    while (v5);
  }
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::OnPacketsAcknowledged(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  if (!a3)
    a2 = 0;
  return webrtc::RtpPacketHistory::CullAcknowledgedPackets(v3, a2, a3);
}

BOOL webrtc::ModuleRtpRtcpImpl2::SupportsPadding(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  _BOOL8 v3;

  v1 = *((_QWORD *)this + 3);
  v2 = (pthread_mutex_t *)(v1 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
  if (*(_BYTE *)(v1 + 1136))
  {
    v3 = *(_BYTE *)(v1 + 1296) != 0;
    pthread_mutex_unlock(v2);
    return v3;
  }
  else
  {
    pthread_mutex_unlock(v2);
    return 0;
  }
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SupportsRtxPayloadPadding(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  v2 = (pthread_mutex_t *)(v1 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
  if (*(_BYTE *)(v1 + 1136) && *(_BYTE *)(v1 + 1296))
  {
    v3 = (*(unsigned __int8 *)(v1 + 1264) >> 1) & 1;
    pthread_mutex_unlock(v2);
    return v3;
  }
  else
  {
    pthread_mutex_unlock(v2);
    return 0;
  }
}

void webrtc::ModuleRtpRtcpImpl2::GeneratePadding(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  int v4;
  int v5;
  char v6;
  webrtc::RTPSender *v7;

  v3 = (_BYTE *)*((_QWORD *)this + 3);
  v4 = v3[592];
  if (v3[436] == 255 || v3[420] && !v3[464])
  {
    v5 = 0;
    v6 = v4 != 0;
    v7 = (webrtc::RTPSender *)(v3 + 1016);
  }
  else
  {
    v5 = 1;
    v6 = v4 != 0;
    v7 = (webrtc::RTPSender *)(v3 + 1016);
  }
  webrtc::RTPSender::GeneratePadding(v7, a2, v6, v5, a3);
}

void webrtc::ModuleRtpRtcpImpl2::GetSentRtpPacketInfos(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 24) + 472;
  if (!a3)
    a2 = 0;
  webrtc::RtpSenderEgress::GetSentRtpPacketInfos(v4, a2, a3, a4);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::ExpectedPerPacketOverhead(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;
  pthread_mutex_t *v2;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    v2 = (pthread_mutex_t *)(v1 + 1072);
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 1072));
    v1 = *(_QWORD *)(v1 + 1176);
    pthread_mutex_unlock(v2);
  }
  return v1;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::MaxRtpPacketSize(webrtc::ModuleRtpRtcpImpl2 *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 1144);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RTCP(pthread_mutex_t *this)
{
  pthread_mutex_t *v2;
  uint64_t sig_low;

  v2 = this + 2;
  pthread_mutex_lock(this + 2);
  sig_low = LODWORD(this[1].__sig);
  pthread_mutex_unlock(v2);
  return sig_low;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRTCPStatus(uint64_t a1, int a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = (pthread_mutex_t *)(a1 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 128));
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 64))
    {
      v5 = *(_QWORD *)(a1 + 88) / 2;
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      v7 = v6 + v5;
      if (v6 == 0x8000000000000000)
        v7 = 0x8000000000000000;
      if (v6 == 0x7FFFFFFFFFFFFFFFLL)
        v7 = 0x7FFFFFFFFFFFFFFFLL;
      if (!*(_BYTE *)(a1 + 208))
        *(_BYTE *)(a1 + 208) = 1;
      *(_QWORD *)(a1 + 200) = v7;
      v8 = *(_QWORD *)(a1 + 120);
      if (v8)
      {
        v10 = v5;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(v8, &v10);
      }
    }
  }
  else if (*(_BYTE *)(a1 + 208))
  {
    *(_BYTE *)(a1 + 208) = 0;
  }
  *(_DWORD *)(a1 + 64) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetCNAME(uint64_t a1, __int128 *a2, size_t a3)
{
  return webrtc::RTCPSender::SetCNAME(a1 + 32, a2, a3);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::LastRtt(webrtc::ModuleRtpRtcpImpl2 *this)
{
  pthread_mutex_t *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = (pthread_mutex_t *)((char *)this + 808);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  v3 = (char *)*((_QWORD *)this + 128);
  v4 = (char *)*((_QWORD *)this + 129);
  if (v4 == v3)
  {
    v3 = (char *)*((_QWORD *)this + 129);
    goto LABEL_13;
  }
  v5 = (v4 - v3) >> 5;
  do
  {
    v6 = v5 >> 1;
    v7 = (unsigned int *)&v3[32 * (v5 >> 1)];
    v9 = *v7;
    v8 = (char *)(v7 + 8);
    v5 += ~(v5 >> 1);
    if (v9 < *((_DWORD *)this + 218))
      v3 = v8;
    else
      v5 = v6;
  }
  while (v5);
  if (v4 == v3)
  {
LABEL_13:
    if (v4 == v3)
      v3 = (char *)*((_QWORD *)this + 129);
    if (v4 != v3)
      goto LABEL_11;
    goto LABEL_16;
  }
  if (&v3[32 * (*((_DWORD *)this + 218) >= *(_DWORD *)v3)] == v3)
    v3 = (char *)*((_QWORD *)this + 129);
  if (v4 != v3)
  {
LABEL_11:
    v10 = *((_QWORD *)v3 + 1);
    goto LABEL_19;
  }
LABEL_16:
  pthread_mutex_unlock(v2);
  v2 = (pthread_mutex_t *)((char *)this + 1256);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1256));
  v11 = *((_QWORD *)this + 165);
  v12 = v11 <= 0;
  v13 = 1000 * v11;
  if (v12)
    v10 = 0;
  else
    v10 = v13;
LABEL_19:
  pthread_mutex_unlock(v2);
  return v10;
}

unint64_t webrtc::ModuleRtpRtcpImpl2::ExpectedRetransmissionTime(webrtc::ModuleRtpRtcpImpl2 *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  pthread_mutex_t *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = (pthread_mutex_t *)((char *)this + 1256);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1256));
  v3 = *((_QWORD *)this + 165);
  pthread_mutex_unlock(v2);
  if (v3 >= 1)
    return 1000 * v3;
  v5 = (pthread_mutex_t *)((char *)this + 808);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  v6 = (char *)*((_QWORD *)this + 128);
  v7 = (char *)*((_QWORD *)this + 129);
  if (v7 == v6)
  {
    v6 = (char *)*((_QWORD *)this + 129);
    goto LABEL_16;
  }
  v8 = (v7 - v6) >> 5;
  do
  {
    v9 = v8 >> 1;
    v10 = &v6[32 * (v8 >> 1)];
    v12 = *(_DWORD *)v10;
    v11 = v10 + 32;
    v8 += ~(v8 >> 1);
    if (v12 < *((_DWORD *)this + 218))
      v6 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v7 == v6)
  {
LABEL_16:
    if (v7 == v6)
      v13 = (char *)*((_QWORD *)this + 129);
    else
      v13 = v6;
    if (v7 != v13)
      goto LABEL_14;
    goto LABEL_20;
  }
  if (&v6[32 * (*((_DWORD *)this + 218) >= *(_DWORD *)v6)] == v6)
    v13 = (char *)*((_QWORD *)this + 129);
  else
    v13 = v6;
  if (v7 != v13)
  {
LABEL_14:
    v14 = *((_QWORD *)v13 + 2) / *((_QWORD *)v13 + 3);
    v15 = v14 & 0xFFFFFFFFFFFFFF00;
    v16 = v14;
    goto LABEL_21;
  }
LABEL_20:
  v16 = 0;
  v15 = 0;
LABEL_21:
  pthread_mutex_unlock(v5);
  if (v7 == v13)
    return 125000;
  else
    return v15 | v16;
}

unint64_t webrtc::ModuleRtpRtcpImpl2::SendRTCP(webrtc::ModuleRtpRtcpImpl2 *a1, unsigned int a2)
{
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[5];
  void *__p;
  void *v8;

  v3 = (uint64_t)a1 + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(a1, (uint64_t)v6);
  v4 = webrtc::RTCPSender::SendRTCP(v3, v6, a2, 0, 0);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v4;
}

__n128 webrtc::ModuleRtpRtcpImpl2::GetSendStreamDataCounters(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v3 = *(_QWORD *)(a1 + 24) + 472;
  v4 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 600);
  v5 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 616);
  v6 = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 648);
  a2[2] = *(_OWORD *)(*(_QWORD *)(a1 + 24) + 632);
  a2[3] = v6;
  *a2 = v4;
  a2[1] = v5;
  v7 = *(_OWORD *)(v3 + 192);
  v8 = *(_OWORD *)(v3 + 208);
  v9 = *(_OWORD *)(v3 + 240);
  a2[6] = *(_OWORD *)(v3 + 224);
  a2[7] = v9;
  a2[4] = v7;
  a2[5] = v8;
  v10 = *(_OWORD *)(v3 + 368);
  v12 = *(_OWORD *)(v3 + 320);
  v11 = *(_OWORD *)(v3 + 336);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v3 + 352);
  *(_OWORD *)(a3 + 112) = v10;
  *(_OWORD *)(a3 + 64) = v12;
  *(_OWORD *)(a3 + 80) = v11;
  result = *(__n128 *)(v3 + 256);
  v14 = *(_OWORD *)(v3 + 272);
  v15 = *(_OWORD *)(v3 + 304);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 288);
  *(_OWORD *)(a3 + 48) = v15;
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v14;
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::GetLatestReportBlockData@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, char **a2@<X8>)
{
  return webrtc::RTCPReceiver::GetLatestReportBlockData((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 712), a2);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::GetSenderReportStats@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;

  v4 = (pthread_mutex_t *)((char *)this + 808);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  if (*((_QWORD *)this + 110))
  {
    v5 = *((_OWORD *)this + 56);
    *(_OWORD *)a2 = *((_OWORD *)this + 55);
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 114);
    *(_BYTE *)(a2 + 40) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 40) = 0;
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::GetNonSenderRttStats@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;

  v4 = (pthread_mutex_t *)((char *)this + 808);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  v5 = (char *)*((_QWORD *)this + 131);
  v6 = (char *)*((_QWORD *)this + 132);
  if (v6 == v5)
  {
    v5 = (char *)*((_QWORD *)this + 132);
    goto LABEL_13;
  }
  v7 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v5) >> 3);
  do
  {
    v8 = v7 >> 1;
    v9 = (unsigned int *)&v5[40 * (v7 >> 1)];
    v11 = *v9;
    v10 = (char *)(v9 + 10);
    v7 += ~(v7 >> 1);
    if (v11 < *((_DWORD *)this + 218))
      v5 = v10;
    else
      v7 = v8;
  }
  while (v7);
  if (v6 == v5)
  {
LABEL_13:
    if (v6 == v5)
      v5 = (char *)*((_QWORD *)this + 132);
    if (v6 != v5)
      goto LABEL_11;
LABEL_16:
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  if (&v5[40 * (*((_DWORD *)this + 218) >= *(_DWORD *)v5)] == v5)
    v5 = (char *)*((_QWORD *)this + 132);
  if (v6 == v5)
    goto LABEL_16;
LABEL_11:
  v12 = *((_QWORD *)v5 + 1);
  v13 = *((_QWORD *)v5 + 2);
  v14 = *((_QWORD *)v5 + 3);
  v15 = *((_DWORD *)v5 + 8);
LABEL_17:
  result = pthread_mutex_unlock(v4);
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v14;
  *(_DWORD *)(a2 + 24) = v15;
  *(_BYTE *)(a2 + 32) = 1;
  return result;
}

void webrtc::ModuleRtpRtcpImpl2::SetRemb(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *__p[2];
  uint64_t v9;

  *(_OWORD *)__p = *(_OWORD *)a3;
  v9 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  webrtc::RTCPSender::SetRemb(a1 + 32, a2, (uint64_t)__p, a4, a5, a6, a7, a8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t webrtc::ModuleRtpRtcpImpl2::UnsetRemb(webrtc::ModuleRtpRtcpImpl2 *this)
{
  return webrtc::RTCPSender::UnsetRemb((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 32));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetExtmapAllowMixed(webrtc::ModuleRtpRtcpImpl2 *this, char a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 3);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 1072));
  *(_BYTE *)(v3 + 1173) = a2;
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RegisterRtpHeaderExtension(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  char v8;
  BOOL v9;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;

  v7 = *(_QWORD *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 1072));
  v8 = webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)(v7 + 1152), a4, a2, a3);
  if (*(_BYTE *)(v7 + 1160))
    v9 = 0;
  else
    v9 = *(_BYTE *)(v7 + 1161) == 0;
  v11 = !v9 || *(_BYTE *)(v7 + 1157) != 0 || *(_BYTE *)(v7 + 1153) != 0;
  *(_BYTE *)(v7 + 1296) = v11;
  webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v7 + 1016));
  result = pthread_mutex_unlock((pthread_mutex_t *)(v7 + 1072));
  if ((v8 & 1) == 0)
  {
    v17 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_rtcp_impl2.cc", 563, "registered", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v13, v14, v15, v16, v18);
    return webrtc::ModuleRtpRtcpImpl2::DeregisterSendRtpHeaderExtension(v17);
  }
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::DeregisterSendRtpHeaderExtension(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  BOOL v8;

  v5 = *(_QWORD *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 1072));
  webrtc::RtpHeaderExtensionMap::Deregister(v5 + 1152, a2, a3);
  if (*(_BYTE *)(v5 + 1160))
    v6 = 0;
  else
    v6 = *(_BYTE *)(v5 + 1161) == 0;
  v8 = !v6 || *(_BYTE *)(v5 + 1157) != 0 || *(_BYTE *)(v5 + 1153) != 0;
  *(_BYTE *)(v5 + 1296) = v8;
  webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v5 + 1016));
  return pthread_mutex_unlock((pthread_mutex_t *)(v5 + 1072));
}

void webrtc::ModuleRtpRtcpImpl2::SetTmmbn(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  uint64_t v3;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  webrtc::RTCPSender::SetTmmbn(a1 + 32, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void `non-virtual thunk to'webrtc::ModuleRtpRtcpImpl2::SetTmmbn(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  uint64_t v3;

  *(_OWORD *)__p = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  webrtc::RTCPSender::SetTmmbn(a1 + 24, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

unint64_t webrtc::ModuleRtpRtcpImpl2::SendNACK(webrtc::ModuleRtpRtcpImpl2 *this, const unsigned __int16 *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  void *__p;
  void *v29;

  LODWORD(v3) = a3;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 151) + 16))(*((_QWORD *)this + 151));
  v7 = v6 / 0x3E8uLL;
  if (v6 % 0x3E8uLL > 0x1F3)
    ++v7;
  if (-v6 % 0x3E8uLL <= 0x1F4)
    v8 = 0;
  else
    v8 = -1;
  if (v6 < 0)
    v9 = v8 - -v6 / 0x3E8uLL;
  else
    v9 = v7;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 1256));
  v10 = *((_QWORD *)this + 165);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 1256));
  if (v10)
  {
    v11 = 3 * v10;
    goto LABEL_11;
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  v13 = (char *)*((_QWORD *)this + 128);
  v14 = (char *)*((_QWORD *)this + 129);
  if (v14 == v13)
  {
    v13 = (char *)*((_QWORD *)this + 129);
  }
  else
  {
    v15 = (v14 - v13) >> 5;
    do
    {
      v16 = v15 >> 1;
      v17 = (unsigned int *)&v13[32 * (v15 >> 1)];
      v19 = *v17;
      v18 = (char *)(v17 + 8);
      v15 += ~(v15 >> 1);
      if (v19 < *((_DWORD *)this + 218))
        v13 = v18;
      else
        v15 = v16;
    }
    while (v15);
    if (v14 != v13)
    {
      if (&v13[32 * (*((_DWORD *)this + 218) >= *(_DWORD *)v13)] == v13)
        v13 = (char *)*((_QWORD *)this + 129);
      if (v14 != v13)
        goto LABEL_23;
LABEL_36:
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 808));
      goto LABEL_37;
    }
  }
  if (v14 == v13)
    v13 = (char *)*((_QWORD *)this + 129);
  if (v14 == v13)
    goto LABEL_36;
LABEL_23:
  v20 = *((_QWORD *)v13 + 2) / *((_QWORD *)v13 + 3);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 808));
  v21 = v20 / 0x3E8uLL;
  if (v20 % 0x3E8uLL > 0x1F3)
    ++v21;
  if (-v20 % 0x3E8uLL <= 0x1F4)
    v22 = 0;
  else
    v22 = -1;
  if (v20 < 0)
    v21 = v22 - -v20 / 0x3E8uLL;
  if (!v21)
  {
LABEL_37:
    if ((uint64_t)(v9 - *((_QWORD *)this + 153)) > 100)
      goto LABEL_12;
    goto LABEL_38;
  }
  v11 = 3 * v21;
LABEL_11:
  if ((uint64_t)(v9 - *((_QWORD *)this + 153)) > (v11 >> 1) + 5)
  {
LABEL_12:
    v12 = 0;
    *((_QWORD *)this + 153) = v9;
    goto LABEL_47;
  }
LABEL_38:
  v23 = *((unsigned __int16 *)this + 616);
  if (v23 == a2[v3 - 1])
    return 0;
  if ((_DWORD)v3)
  {
    v25 = 0;
    while (v23 != a2[v25])
    {
      if (v3 == ++v25)
        goto LABEL_44;
    }
    v12 = v25 + 1;
  }
  else
  {
LABEL_44:
    v12 = 0;
  }
  LOWORD(v3) = v3 - v12;
LABEL_47:
  if ((unsigned __int16)v3 >= 0xFDu)
    v3 = 253;
  else
    v3 = (unsigned __int16)v3;
  *((_WORD *)this + 616) = a2[(int)(v3 + v12 - 1)];
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(this, (uint64_t)v27);
  v24 = webrtc::RTCPSender::SendRTCP((uint64_t)this + 32, v27, 0x40u, v3, (uint64_t)&a2[v12]);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return v24;
}

void webrtc::ModuleRtpRtcpImpl2::SendNack(webrtc::ModuleRtpRtcpImpl2 *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD v4[5];
  void *__p;
  void *v6;

  v3 = (uint64_t)a1 + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(a1, (uint64_t)v4);
  webrtc::RTCPSender::SendRTCP(v3, v4, 0x40u, (unint64_t)(a2[1] - *a2) >> 1, *a2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetStorePacketsStatus(webrtc::ModuleRtpRtcpImpl2 *this, int a2, unsigned int a3)
{
  return webrtc::RtpPacketHistory::SetStorePacketsStatus(*((_QWORD *)this + 3), a2, a3);
}

void webrtc::ModuleRtpRtcpImpl2::SendCombinedRtcpPacket(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  __int128 v8;

  v7 = *(_QWORD **)a2;
  v2 = v7;
  v6 = *(_OWORD *)(a2 + 8);
  v8 = v6;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  webrtc::RTCPSender::SendCombinedRtcpPacket(a1 + 32, (uint64_t)&v7);
  if (v2)
  {
    v3 = (_QWORD *)v6;
    while (v3 != v2)
    {
      v5 = *--v3;
      v4 = v5;
      *v3 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    operator delete(v2);
  }
}

uint64_t *webrtc::ModuleRtpRtcpImpl2::SendLossNotification(webrtc::ModuleRtpRtcpImpl2 *this, int a2, int a3, char a4, char a5)
{
  char *v9;
  uint64_t *v10;
  _QWORD v12[5];
  void *__p;
  void *v14;

  v9 = (char *)this + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(this, (uint64_t)v12);
  v10 = webrtc::RTCPSender::SendLossNotification((uint64_t)v9, v12, a2, a3, a4, a5);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v10;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetRemoteSSRC(webrtc::ModuleRtpRtcpImpl2 *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 128);
  pthread_mutex_lock((pthread_mutex_t *)this + 2);
  *((_DWORD *)this + 60) = a2;
  pthread_mutex_unlock(v4);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 808));
  *((_QWORD *)this + 110) = 0;
  *((_DWORD *)this + 218) = a2;
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 808));
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetLocalSsrc(uint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(this + 736);
  if (v2 <= 1)
  {
    __break(1u);
  }
  else
  {
    v4 = this;
    v5 = (_QWORD *)(this + 744);
    if ((v2 & 1) != 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)v5 = a2;
    pthread_mutex_lock((pthread_mutex_t *)(this + 128));
    *(_DWORD *)(v4 + 44) = a2;
    return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 128));
  }
  return this;
}

webrtc::RateStatistics *webrtc::ModuleRtpRtcpImpl2::GetSendRates@<X0>(webrtc::ModuleRtpRtcpImpl2 *this@<X0>, uint64_t *a2@<X8>)
{
  webrtc::RtpSenderEgress *v3;
  Timestamp v4;

  v3 = (webrtc::RtpSenderEgress *)(*((_QWORD *)this + 3) + 472);
  v4.var0 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 151) + 16))(*((_QWORD *)this + 151));
  return webrtc::RtpSenderEgress::GetSendRates(v3, v4, a2);
}

void webrtc::ModuleRtpRtcpImpl2::OnRequestSendReport(webrtc::ModuleRtpRtcpImpl2 *this)
{
  char *v1;
  _QWORD v2[5];
  void *__p;
  void *v4;

  v1 = (char *)this + 32;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState(this, (uint64_t)v2);
  webrtc::RTCPSender::SendRTCP((uint64_t)v1, v2, 2u, 0, 0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void `non-virtual thunk to'webrtc::ModuleRtpRtcpImpl2::OnRequestSendReport(webrtc::ModuleRtpRtcpImpl2 *this)
{
  char *v1;
  _QWORD v2[5];
  void *__p;
  void *v4;

  v1 = (char *)this + 24;
  webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)((char *)this - 8), (uint64_t)v2);
  webrtc::RTCPSender::SendRTCP((uint64_t)v1, v2, 2u, 0, 0);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void webrtc::ModuleRtpRtcpImpl2::OnReceivedNack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  pthread_mutex_t *v5;
  int v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v5 = (pthread_mutex_t *)(v2 + 16);
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 16));
    v6 = *(_DWORD *)(v2 + 88);
    pthread_mutex_unlock(v5);
    if (v6)
    {
      if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
      {
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 1256));
        v7 = *(_QWORD *)(a1 + 1320);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1256));
        if (v7)
        {
LABEL_5:
          webrtc::RTPSender::OnReceivedNack((webrtc::RTPSender *)(*(_QWORD *)(a1 + 24) + 1016), (unsigned __int16 **)a2, v7);
          return;
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 808));
        v8 = *(char **)(a1 + 1024);
        v9 = *(char **)(a1 + 1032);
        if (v9 == v8)
        {
          v8 = *(char **)(a1 + 1032);
        }
        else
        {
          v10 = (v9 - v8) >> 5;
          do
          {
            v11 = v10 >> 1;
            v12 = (unsigned int *)&v8[32 * (v10 >> 1)];
            v14 = *v12;
            v13 = (char *)(v12 + 8);
            v10 += ~(v10 >> 1);
            if (v14 < *(_DWORD *)(a1 + 872))
              v8 = v13;
            else
              v10 = v11;
          }
          while (v10);
          if (v9 != v8)
          {
            if (&v8[32 * (*(_DWORD *)(a1 + 872) >= *(_DWORD *)v8)] == v8)
              v8 = *(char **)(a1 + 1032);
            if (v9 != v8)
            {
LABEL_17:
              v15 = *((_QWORD *)v8 + 2) / *((_QWORD *)v8 + 3);
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 808));
              if ((v15 & 0x8000000000000000) != 0)
              {
                if (-(uint64_t)v15 % 0x3E8uLL <= 0x1F4)
                  v16 = 0;
                else
                  v16 = -1;
                v7 = v16 - -(uint64_t)v15 / 0x3E8uLL;
              }
              else if (v15 % 0x3E8 <= 0x1F3)
              {
                v7 = v15 / 0x3E8;
              }
              else
              {
                v7 = v15 / 0x3E8 + 1;
              }
              goto LABEL_5;
            }
LABEL_25:
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 808));
            v7 = 0;
            goto LABEL_5;
          }
        }
        if (v9 == v8)
          v8 = *(char **)(a1 + 1032);
        if (v9 != v8)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
  }
}

void `non-virtual thunk to'webrtc::ModuleRtpRtcpImpl2::OnReceivedNack(uint64_t a1, uint64_t a2)
{
  webrtc::ModuleRtpRtcpImpl2::OnReceivedNack(a1 - 8, a2);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::OnReceivedRtcpReportBlocks(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  int v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (*(_QWORD *)(result + 24))
  {
    v5 = result;
    v6 = (pthread_mutex_t *)(result + 128);
    pthread_mutex_lock((pthread_mutex_t *)(result + 128));
    v7 = *(_DWORD *)(v5 + 44);
    pthread_mutex_unlock(v6);
    v8 = *(_QWORD *)(v5 + 24);
    v9 = (pthread_mutex_t *)(v8 + 1072);
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 1072));
    LODWORD(v8) = *(_DWORD *)(v8 + 1264);
    result = pthread_mutex_unlock(v9);
    if ((_DWORD)v8)
    {
      if (!a3)
        return result;
      v10 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 1040);
      if ((v10 & 0xFF00000000) != 0)
      {
        v11 = 56 * a3;
        v12 = (int *)(a2 + 4);
        while (1)
        {
          v17 = *v12;
          v12 += 14;
          v16 = v17;
          if (v7 == v17)
          {
            v13 = *(_QWORD *)(v5 + 24);
            v14 = (pthread_mutex_t *)(v13 + 1072);
            pthread_mutex_lock((pthread_mutex_t *)(v13 + 1072));
            v15 = *(unsigned __int8 *)(v13 + 1249);
            *(_BYTE *)(v13 + 1249) = 1;
            if (!v15)
              goto LABEL_12;
          }
          else
          {
            if (v16 != (_DWORD)v10)
              goto LABEL_8;
            v13 = *(_QWORD *)(v5 + 24);
            v14 = (pthread_mutex_t *)(v13 + 1072);
            pthread_mutex_lock((pthread_mutex_t *)(v13 + 1072));
            v18 = *(unsigned __int8 *)(v13 + 1250);
            *(_BYTE *)(v13 + 1250) = 1;
            if (!v18)
LABEL_12:
              webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v13 + 1016));
          }
          result = pthread_mutex_unlock(v14);
LABEL_8:
          v11 -= 56;
          if (!v11)
            return result;
        }
      }
    }
    else if (!a3)
    {
      return result;
    }
    v19 = a2 + 56 * a3;
    do
    {
      if (v7 == *(_DWORD *)(a2 + 4))
      {
        v20 = *(_QWORD *)(v5 + 24);
        pthread_mutex_lock((pthread_mutex_t *)(v20 + 1072));
        v21 = *(unsigned __int8 *)(v20 + 1249);
        *(_BYTE *)(v20 + 1249) = 1;
        if (!v21)
          webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v20 + 1016));
        result = pthread_mutex_unlock((pthread_mutex_t *)(v20 + 1072));
      }
      a2 += 56;
    }
    while (a2 != v19);
  }
  return result;
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SSRC(pthread_mutex_t *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = this + 2;
  pthread_mutex_lock(this + 2);
  v3 = *(unsigned int *)&this->__opaque[36];
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t `non-virtual thunk to'webrtc::ModuleRtpRtcpImpl2::OnReceivedRtcpReportBlocks(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return webrtc::ModuleRtpRtcpImpl2::OnReceivedRtcpReportBlocks(a1 - 8, a2, a3);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::SetVideoBitrateAllocation(webrtc::ModuleRtpRtcpImpl2 *this, const webrtc::VideoBitrateAllocation *a2)
{
  return webrtc::RTCPSender::SetVideoBitrateAllocation((webrtc::ModuleRtpRtcpImpl2 *)((char *)this + 32), a2);
}

uint64_t webrtc::ModuleRtpRtcpImpl2::RtpSender(webrtc::ModuleRtpRtcpImpl2 *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return v1 + 1016;
  else
    return 0;
}

{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return v1 + 1016;
  else
    return 0;
}

void std::__function::__func<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0,std::allocator<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0>,void ()(webrtc::TimeDelta)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0,std::allocator<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0>,void ()(webrtc::TimeDelta)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0BCFD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0,std::allocator<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0>,void ()(webrtc::TimeDelta)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0BCFD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0,std::allocator<webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_0>,void ()(webrtc::TimeDelta)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  if (*a2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 1208) + 16))(*(_QWORD *)(v2 + 1208));
    v5 = 0x8000000000000000;
    if (v4 != 0x8000000000000000 && v3 != 0x8000000000000000)
      v5 = v4 + v3;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    if (v3 == 0x7FFFFFFFFFFFFFFFLL)
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v7 = v5;
    v8 = *(_QWORD *)(v2 + 16);
    v9 = *(unsigned int **)(v2 + 1328);
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = (_QWORD *)operator new();
    *v11 = v9;
    v11[1] = v2;
    v11[2] = v7;
    v11[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v11[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::ScheduleMaybeSendRtcpAtOrAfterTimestamp(webrtc::Timestamp,webrtc::TimeDelta)::$_0 &&>;
    v19[0] = v11;
    v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    v18 = 0;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v8 + 16))(v8, v19, 1000 * ((v3 + 999) / 1000), &v18, &v17);
  }
  else
  {
    v12 = *(_QWORD *)(v2 + 16);
    v13 = *(unsigned int **)(v2 + 1328);
    if (v13)
    {
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (_QWORD *)operator new();
    *v15 = v13;
    v15[1] = v2;
    v15[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v15[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::ScheduleRtcpSendEvaluation(webrtc::TimeDelta)::$_0 &&>;
    v19[0] = v15;
    v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v12 + 8))(v12, v19, &v18, &v17);
  }
  return v20(1, v19, v19);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(webrtc::RtpRtcpInterface::Configuration const&)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int v5;
  Timestamp v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  void (***v10)(_QWORD, unint64_t);
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 1208) + 16))(*(_QWORD *)(*a1 + 1208));
  v3 = v2 - 1000000;
  if (v2 == 0x8000000000000000)
    v3 = 0x8000000000000000;
  if (v2 == 0x7FFFFFFFFFFFFFFFLL)
    v4 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v4 = v3;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 128));
  v5 = *(unsigned __int8 *)(v1 + 192);
  pthread_mutex_unlock((pthread_mutex_t *)(v1 + 128));
  v6.var0 = v4;
  v7 = webrtc::RTCPReceiver::OnPeriodicRttUpdate((webrtc::RTCPReceiver *)(v1 + 712), v6, v5);
  if (v8)
  {
    v9 = v7;
    v10 = *(void (****)(_QWORD, unint64_t))(v1 + 1240);
    if (v10)
    {
      v11 = v9 / 0x3E8uLL;
      if (v9 % 0x3E8uLL > 0x1F3)
        ++v11;
      if (-v9 % 0x3E8uLL <= 0x1F4)
        v12 = 0;
      else
        v12 = -1;
      if (v9 < 0)
        v13 = v12 - -v9 / 0x3E8uLL;
      else
        v13 = v11;
      (**v10)(v10, v13);
    }
    v14 = v9 / 0x3E8uLL;
    if (v9 % 0x3E8uLL > 0x1F3)
      ++v14;
    if (-v9 % 0x3E8uLL <= 0x1F4)
      v15 = 0;
    else
      v15 = -1;
    if (v9 < 0)
      v16 = v15 - -v9 / 0x3E8uLL;
    else
      v16 = v14;
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 1256));
    *(_QWORD *)(v1 + 1320) = v16;
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 1256));
    v17 = *(_QWORD *)(v1 + 24);
    if (v17)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v17 + 16));
      *(_QWORD *)(v17 + 96) = 1000 * v16;
      if (*(_DWORD *)(v17 + 88))
        webrtc::RtpPacketHistory::CullOldPackets((webrtc::RtpPacketHistory *)v17);
      pthread_mutex_unlock((pthread_mutex_t *)(v17 + 16));
    }
  }
  return 1000000;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame(unsigned int,long long,int,BOOL)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD v15[5];
  void *__p;
  void *v17;

  v1 = *a1;
  v2 = **a1;
  v3 = *((_DWORD *)*a1 + 2);
  v4 = (*a1)[2];
  v5 = *((unsigned __int8 *)*a1 + 24);
  v6 = *((unsigned __int8 *)*a1 + 36);
  v7 = *((_DWORD *)*a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
  if (v6)
    *(_BYTE *)(v2 + 656) = v7;
  *(_DWORD *)(v2 + 220) = v3;
  if (v5)
  {
    if (!*(_BYTE *)(v2 + 232))
      *(_BYTE *)(v2 + 232) = 1;
    *(_QWORD *)(v2 + 224) = v4;
  }
  else
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48));
    if (!*(_BYTE *)(v2 + 232))
      *(_BYTE *)(v2 + 232) = 1;
    *(_QWORD *)(v2 + 224) = v8;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  v9 = *((unsigned __int8 *)v1 + 40);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 48) + 16))(*(_QWORD *)(v2 + 48));
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
  if (*(_DWORD *)(v2 + 64))
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    v12 = v10 + 100000;
    if (v10 == 0x8000000000000000)
      v12 = 0x8000000000000000;
    if (v10 != 0x7FFFFFFFFFFFFFFFLL)
      v11 = v12;
    if (v9)
      v13 = *(_BYTE *)(v2 + 40) == 0;
    else
      v13 = 0;
    if (v13)
      v10 = v11;
    if (*(_BYTE *)(v2 + 208))
    {
      v14 = *(_QWORD *)(v2 + 200);
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
      if (v10 >= v14)
      {
        webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v2, (uint64_t)v15);
        webrtc::RTCPSender::SendRTCP(v2 + 32, v15, 1u, 0, 0);
        if (__p)
        {
          v17 = __p;
          operator delete(__p);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  }
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::ScheduleRtcpSendEvaluation(webrtc::TimeDelta)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];
  void *__p;
  void *v6;

  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 48) + 16))(*(_QWORD *)(*a1 + 48));
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 128));
  if (*(_DWORD *)(v1 + 64))
  {
    if (*(_BYTE *)(v1 + 208))
    {
      v3 = *(_QWORD *)(v1 + 200);
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 128));
      if (v2 >= v3)
      {
        webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v1, (uint64_t)v4);
        webrtc::RTCPSender::SendRTCP(v1 + 32, v4, 1u, 0, 0);
        if (__p)
        {
          v6 = __p;
          operator delete(__p);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 128));
  }
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::ScheduleMaybeSendRtcpAtOrAfterTimestamp(webrtc::Timestamp,webrtc::TimeDelta)::$_0 &&>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  uint64_t (*v13)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v14)(uint64_t);
  void *__p;
  void *v16;
  char v17;
  char v18;

  v1 = *a1;
  v2 = a1[1];
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 1208) + 16))(*(_QWORD *)(*a1 + 1208));
  if (v2 <= v3)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 16))(*(_QWORD *)(v1 + 48));
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 128));
    if (*(_DWORD *)(v1 + 64))
    {
      if (*(_BYTE *)(v1 + 208))
      {
        v11 = *(_QWORD *)(v1 + 200);
        pthread_mutex_unlock((pthread_mutex_t *)(v1 + 128));
        if (v10 >= v11)
        {
          webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v1, (uint64_t)v12);
          webrtc::RTCPSender::SendRTCP(v1 + 32, v12, 1u, 0, 0);
          if (__p)
          {
            v16 = __p;
            operator delete(__p);
          }
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)(v1 + 128));
    }
  }
  else
  {
    if (v3 == 0x8000000000000000 || v2 == 0x7FFFFFFFFFFFFFFFLL)
      v5 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v5 = v2 - v3;
    v6 = *(_QWORD *)(v1 + 16);
    v7 = *(unsigned int **)(v1 + 1328);
    if (v7)
    {
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (_QWORD *)operator new();
    *v9 = v7;
    v9[1] = v1;
    v9[2] = v2;
    v9[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v9[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ModuleRtpRtcpImpl2::ScheduleMaybeSendRtcpAtOrAfterTimestamp(webrtc::Timestamp,webrtc::TimeDelta)::$_0 &&>;
    v12[0] = v9;
    v13 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v14 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    v18 = 0;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v6 + 16))(v6, v12, 1000 * ((v5 + 999) / 1000), &v18, &v17);
    v13(1, v12, v12);
  }
}

uint64_t webrtc::RtpSenderBase::SetFrameEncryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 296) && *(_DWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 44))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameEncryptor(webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>)::$_1>, &v6);
  }
  return result;
}

uint64_t webrtc::RtpSenderBase::SetEncoderSelector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 296) && *(_DWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 44))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetEncoderSelectorOnChannel(void)::$_1>, &v6);
  }
  return result;
}

uint64_t webrtc::RtpSenderBase::SetMediaChannel(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 296) = a2;
  return result;
}

std::string *webrtc::RtpSenderBase::GetParametersInternal@<X0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  char v3;
  std::string *v4;
  _QWORD v5[2];

  if (this[1].__r_.__value_.__s.__data_[20])
  {
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
  }
  else if (this[12].__r_.__value_.__l.__size_ && LODWORD(this[1].__r_.__value_.__r.__words[2]))
  {
    size = this[1].__r_.__value_.__l.__size_;
    v4 = this;
    v5[0] = a2;
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
    v5[1] = &v4;
    return (std::string *)(*(uint64_t (**)(std::string::size_type, _QWORD *, void (*)(uint64_t), char *))(*(_QWORD *)size + 96))(size, v5, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpParameters rtc::Thread::BlockingCall<webrtc::RtpSenderBase::GetParametersInternal(void)::$_1,webrtc::RtpParameters,void>(webrtc::RtpSenderBase::GetParametersInternal(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v3);
  }
  else
  {
    return webrtc::RtpParameters::RtpParameters((std::string *)a2, (const webrtc::RtpParameters *)&this[4].__r_.__value_.__r.__words[1]);
  }
  return this;
}

std::string *webrtc::RtpSenderBase::GetParametersInternalWithAllLayers@<X0>(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  char v3;
  std::string *v4;
  _QWORD v5[2];

  if (this[1].__r_.__value_.__s.__data_[20])
  {
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
  }
  else if (this[12].__r_.__value_.__l.__size_ && LODWORD(this[1].__r_.__value_.__r.__words[2]))
  {
    size = this[1].__r_.__value_.__l.__size_;
    v4 = this;
    v5[0] = a2;
    *(_BYTE *)(a2 + 124) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_WORD *)(a2 + 152) = 256;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 105) = 0u;
    *(_BYTE *)(a2 + 160) = 0;
    *(_BYTE *)(a2 + 164) = 0;
    v5[1] = &v4;
    return (std::string *)(*(uint64_t (**)(std::string::size_type, _QWORD *, void (*)(uint64_t), char *))(*(_QWORD *)size + 96))(size, v5, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpParameters rtc::Thread::BlockingCall<webrtc::RtpSenderBase::GetParametersInternalWithAllLayers(void)::$_1,webrtc::RtpParameters,void>(webrtc::RtpSenderBase::GetParametersInternalWithAllLayers(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v3);
  }
  else
  {
    return webrtc::RtpParameters::RtpParameters((std::string *)a2, (const webrtc::RtpParameters *)&this[4].__r_.__value_.__r.__words[1]);
  }
  return this;
}

void webrtc::RtpSenderBase::GetParameters(void **this@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v4;
  int v5;
  char v6;
  const std::string::value_type *v7;
  size_t v8;
  int v9;
  int v10;
  std::string v11;

  (*((void (**)(_QWORD *__return_ptr))*this + 29))((_QWORD *)a2);
  rtc::CreateRandomUuid(&v11);
  v4 = this + 41;
  if (*((_BYTE *)this + 352))
  {
    if (*((char *)this + 351) < 0)
    {
      operator delete(this[41]);
      v5 = *((unsigned __int8 *)this + 352);
      *v4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      this[43] = (void *)v11.__r_.__value_.__r.__words[2];
      if (!v5)
      {
        std::__throw_bad_optional_access[abi:sn180100]();
        webrtc::RtpSenderBase::SetParametersInternal(v9, v10);
        return;
      }
    }
    else
    {
      *v4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
      this[43] = (void *)v11.__r_.__value_.__r.__words[2];
    }
  }
  else
  {
    *v4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    this[43] = (void *)v11.__r_.__value_.__r.__words[2];
    *((_BYTE *)this + 352) = 1;
  }
  if (v4 != (_OWORD *)a2)
  {
    v6 = *((_BYTE *)this + 351);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v6 >= 0)
        v7 = (const std::string::value_type *)(this + 41);
      else
        v7 = (const std::string::value_type *)this[41];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)this + 351);
      else
        v8 = (size_t)this[42];
      std::string::__assign_no_alias<false>((std::string *)a2, v7, v8);
    }
    else if ((*((_BYTE *)this + 351) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)a2, (char *)this[41], (size_t)this[42]);
    }
    else
    {
      *(_OWORD *)a2 = *v4;
      *(_QWORD *)(a2 + 16) = this[43];
    }
  }
}

void webrtc::RtpSenderBase::SetParametersInternal(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  char *v6;
  const std::string::value_type *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char **);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const cricket::Codec *v25;
  void (*v26)(uint64_t, const char **);
  void *v27;
  int v28;
  std::string::value_type *v29;
  double *v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  const char *v40;
  std::string __p;
  std::string v42[7];
  uint64_t v43;
  int v44;
  std::string v45;
  _DWORD v46[2];
  uint64_t v47;
  std::string v48;
  _DWORD v49[2];
  int v50;
  std::string v51;
  _BYTE v52[7];
  char v53;
  _BYTE v54[216];
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned __int8 *)(a2 + 47);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 32);
  if (v5)
    goto LABEL_4;
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104) - v19;
  if (v20)
  {
    v21 = v20 / 272;
    v22 = v21 <= 1 ? 1 : v21;
    if (v21 >= 2)
    {
      if (*(double *)(v19 + 280) != 1.0 || *(_DWORD *)(v19 + 288) != 1)
      {
LABEL_4:
        v6 = (char *)operator new(0x40uLL);
        v7 = v6;
        if (v6 <= "Attempted to set an unimplemented parameter of RtpParameters."
          && v6 + 61 > "Attempted to set an unimplemented parameter of RtpParameters.")
        {
          __break(1u);
        }
        strcpy(v6, "Attempted to set an unimplemented parameter of RtpParameters.");
        if (!rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>())
        {
          v40 = "UNSUPPORTED_PARAMETER";
          __p.__r_.__value_.__r.__words[0] = 21;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
        }
        v50 = 2;
        std::string::__init_copy_ctor_external(&v51, v7, 0x3DuLL);
        *(_DWORD *)v52 = 0;
        v52[4] = 0;
        v52[6] = 0;
        v15 = *(void (**)(uint64_t, const char **))(a3 + 24);
        if (v15)
        {
          LODWORD(v40) = v50;
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
            v15 = *(void (**)(uint64_t, const char **))(a3 + 24);
          }
          else
          {
            __p = v51;
          }
          LODWORD(v42[0].__r_.__value_.__l.__data_) = *(_DWORD *)v52;
          *(_DWORD *)((char *)v42[0].__r_.__value_.__r.__words + 3) = *(_DWORD *)&v52[3];
          v15(a3, &v40);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(1, a3, a3);
          *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
          *(_QWORD *)(a3 + 24) = 0;
        }
        v27 = (void *)v51.__r_.__value_.__r.__words[0];
        v28 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
        memset(&v51, 0, sizeof(v51));
        if (v28 < 0)
        {
          operator delete(v27);
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51.__r_.__value_.__l.__data_);
        }
        v29 = (std::string::value_type *)v7;
        goto LABEL_37;
      }
      v31 = (double *)(v19 + 560);
      v32 = 2;
      while (v22 != v32)
      {
        v33 = *(v31 - 1);
        v34 = *(_DWORD *)v31;
        ++v32;
        v31 += 34;
        if (v33 != 1.0 || v34 != 1)
        {
          if (v32 - 1 < v21)
            goto LABEL_4;
          break;
        }
      }
    }
  }
  if (*(_QWORD *)(a1 + 296) && *(_DWORD *)(a1 + 40))
  {
    (*(void (**)(_QWORD, uint64_t, const char **))(a3 + 16))(0, a3, &v40);
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a3 + 24) = 0;
    webrtc::RtpParameters::RtpParameters(v42, (const webrtc::RtpParameters *)a2);
    v43 = a1;
    v23 = *(_QWORD *)(a1 + 32);
    if (a4)
    {
      (*(void (**)(_QWORD, const char **, uint64_t (*)(), uint64_t *))(*(_QWORD *)v23 + 96))(*(_QWORD *)(a1 + 32), &v40, _ZN3rtc12FunctionViewIFvvEE11CallVoidPtrIZN6webrtc13RtpSenderBase21SetParametersInternalERKNS4_13RtpParametersEN4absl12AnyInvocableIFvNS4_8RTCErrorEOEEEbE3__1EEvNS2_9VoidUnionE, &v47);
    }
    else
    {
      v36 = operator new();
      ((void (*)(_QWORD, const char **, uint64_t))__p.__r_.__value_.__l.__size_)(0, &v40, v36);
      *(_OWORD *)(v36 + 16) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = (unint64_t)absl::internal_any_invocable::EmptyManager;
      webrtc::RtpParameters::RtpParameters((std::string *)(v36 + 32), (const webrtc::RtpParameters *)v42);
      *(_QWORD *)(v36 + 200) = v43;
      v47 = v36;
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc13RtpSenderBase21SetParametersInternalERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEbE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESE_;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)_ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc13RtpSenderBase21SetParametersInternalERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEbE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, uint64_t *, char *, char *))(*(_QWORD *)v23 + 8))(v23, &v47, &v53, &v39);
      ((void (*)(uint64_t, uint64_t *, uint64_t *))v48.__r_.__value_.__l.__size_)(1, &v47, &v47);
    }
    webrtc::RtpParameters::~RtpParameters((void **)&v42[0].__r_.__value_.__l.__data_);
    ((void (*)(uint64_t, const char **, const char **))__p.__r_.__value_.__l.__size_)(1, &v40, &v40);
    return;
  }
  v24 = *(_QWORD *)(a1 + 280) - *(_QWORD *)(a1 + 272);
  if (v24)
    v25 = *(const cricket::Codec **)(a1 + 272);
  else
    v25 = 0;
  v54[0] = 0;
  v55 = 0;
  cricket::CheckRtpParametersInvalidModificationAndValues((cricket::Codec *)v54, a1 + 104, a2, v25, 0x84BDA12F684BDA13 * (v24 >> 3), (uint64_t)&v47);
  if (v55)
    cricket::Codec::~Codec((cricket::Codec *)v54);
  if ((_DWORD)v47)
  {
    v44 = v47;
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
LABEL_53:
    std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    v46[0] = v49[0];
    *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)((char *)v49 + 3);
    v26 = *(void (**)(uint64_t, const char **))(a3 + 24);
    if (!v26)
      goto LABEL_62;
    goto LABEL_54;
  }
  webrtc::RtpParameters::operator=((std::string *)(a1 + 104), (std::string *)a2);
  v44 = v47;
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_53;
LABEL_27:
  v45 = v48;
  v46[0] = v49[0];
  *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)((char *)v49 + 3);
  v26 = *(void (**)(uint64_t, const char **))(a3 + 24);
  if (!v26)
    goto LABEL_62;
LABEL_54:
  LODWORD(v40) = v44;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    v26 = *(void (**)(uint64_t, const char **))(a3 + 24);
  }
  else
  {
    __p = v45;
  }
  LODWORD(v42[0].__r_.__value_.__l.__data_) = v46[0];
  *(_DWORD *)((char *)v42[0].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)v46 + 3);
  v26(a3, &v40);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(1, a3, a3);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
LABEL_62:
  v37 = (void *)v45.__r_.__value_.__r.__words[0];
  v38 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
  memset(&v45, 0, sizeof(v45));
  if (v38 < 0)
  {
    operator delete(v37);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    v29 = (std::string::value_type *)v48.__r_.__value_.__r.__words[0];
LABEL_37:
    operator delete(v29);
  }
}

void webrtc::RTCError::~RTCError(void **this)
{
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void webrtc::RtpSenderBase::SetParametersInternalWithAllLayers(webrtc::RtpSenderBase *this@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string::pointer data;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  const cricket::Codec *v21;
  double *v23;
  uint64_t v24;
  double v25;
  int v26;
  char v28;
  _QWORD v29[2];
  const char *v30;
  uint64_t v31;
  _BYTE v32[216];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  size = HIBYTE(a2[1].__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a2[1].__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_4;
  data = a2[4].__r_.__value_.__l.__data_;
  v15 = a2[4].__r_.__value_.__l.__size_ - (_QWORD)data;
  if (v15)
  {
    v16 = v15 / 272;
    v17 = v16 <= 1 ? 1 : v16;
    if (v16 >= 2)
    {
      if (*((double *)data + 35) != 1.0 || *((_DWORD *)data + 72) != 1)
      {
LABEL_4:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        {
          v30 = "UNSUPPORTED_PARAMETER";
          v31 = 21;
          rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
        }
        *(_DWORD *)a3 = 2;
        v12 = (char *)operator new(0x40uLL);
        *(_QWORD *)(a3 + 8) = v12;
        *(_OWORD *)(a3 + 16) = xmmword_208F0ABD0;
        if (v12 <= "Attempted to set an unimplemented parameter of RtpParameters."
          && v12 + 61 > "Attempted to set an unimplemented parameter of RtpParameters.")
        {
          __break(1u);
        }
        strcpy(v12, "Attempted to set an unimplemented parameter of RtpParameters.");
        *(_DWORD *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 36) = 0;
        *(_BYTE *)(a3 + 38) = 0;
        return;
      }
      v23 = (double *)(data + 560);
      v24 = 2;
      while (v17 != v24)
      {
        v25 = *(v23 - 1);
        v26 = *(_DWORD *)v23;
        ++v24;
        v23 += 34;
        if (v25 != 1.0 || v26 != 1)
        {
          if (v24 - 1 < v16)
            goto LABEL_4;
          break;
        }
      }
    }
  }
  if (*((_QWORD *)this + 37) && *((_DWORD *)this + 10))
  {
    v18 = *((_QWORD *)this + 4);
    v29[0] = a2;
    v29[1] = this;
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    v30 = (const char *)a3;
    v31 = (uint64_t)v29;
    (*(void (**)(uint64_t, const char **, __n128 (*)(uint64_t *), char *))(*(_QWORD *)v18 + 96))(v18, &v30, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::RtpSenderBase::SetParametersInternalWithAllLayers(webrtc::RtpParameters const&)::$_1,webrtc::RTCError,void>(webrtc::RtpSenderBase::SetParametersInternalWithAllLayers(webrtc::RtpParameters const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v28);
  }
  else
  {
    v19 = (std::string *)((char *)this + 104);
    v20 = *((_QWORD *)this + 35) - *((_QWORD *)this + 34);
    if (v20)
      v21 = (const cricket::Codec *)*((_QWORD *)this + 34);
    else
      v21 = 0;
    v32[0] = 0;
    v33 = 0;
    cricket::CheckRtpParametersInvalidModificationAndValues((cricket::Codec *)v32, (uint64_t)this + 104, (unint64_t)a2, v21, 0x84BDA12F684BDA13 * (v20 >> 3), a3);
    if (v33)
      cricket::Codec::~Codec((cricket::Codec *)v32);
    if (!*(_DWORD *)a3)
      webrtc::RtpParameters::operator=(v19, a2);
  }
}

unint64_t webrtc::RtpSenderBase::CheckSetParameters(unint64_t this, const webrtc::RtpParameters *a2, unsigned __int8 *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const void **v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = this;
  if (*((_BYTE *)a2 + 45))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    *(_DWORD *)v3 = 6;
    this = (unint64_t)operator new(0x40uLL);
    *(_QWORD *)(v3 + 8) = this;
    *(_OWORD *)(v3 + 16) = xmmword_208F0B3C0;
    if (this > (unint64_t)"Cannot set parameters on sender of a stopped transceiver."
      || this + 57 <= (unint64_t)"Cannot set parameters on sender of a stopped transceiver.")
    {
      strcpy((char *)this, "Cannot set parameters on sender of a stopped transceiver.");
LABEL_39:
      *(_DWORD *)(v3 + 32) = 0;
      *(_BYTE *)(v3 + 36) = 0;
      *(_BYTE *)(v3 + 38) = 0;
      return this;
    }
    goto LABEL_41;
  }
  if (*((_BYTE *)a2 + 44))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    *(_DWORD *)v3 = 6;
    this = (unint64_t)operator new(0x30uLL);
    *(_QWORD *)(v3 + 8) = this;
    *(_OWORD *)(v3 + 16) = xmmword_208F1AA00;
    if (this > (unint64_t)"Cannot set parameters on a stopped sender."
      || this + 42 <= (unint64_t)"Cannot set parameters on a stopped sender.")
    {
      strcpy((char *)this, "Cannot set parameters on a stopped sender.");
      goto LABEL_39;
    }
    goto LABEL_41;
  }
  if (!*((_BYTE *)a2 + 352))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    *(_DWORD *)v3 = 6;
    this = (unint64_t)operator new(0x58uLL);
    *(_QWORD *)(v3 + 8) = this;
    *(_OWORD *)(v3 + 16) = xmmword_208F1AA20;
    if (this > (unint64_t)"Failed to set parameters since getParameters() has never been called on this sender"
      || this + 83 <= (unint64_t)"Failed to set parameters since getParameters() has never been called on this sender")
    {
      strcpy((char *)this, "Failed to set parameters since getParameters() has never been called on this sender");
      goto LABEL_39;
    }
    goto LABEL_41;
  }
  v18 = *((unsigned __int8 *)a2 + 351);
  v19 = *((_QWORD *)a2 + 42);
  if ((v18 & 0x80u) == 0)
    v20 = *((unsigned __int8 *)a2 + 351);
  else
    v20 = *((_QWORD *)a2 + 42);
  v21 = a3[23];
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *((_QWORD *)a3 + 1);
  if (v20 == v21)
  {
    v23 = (const void **)((char *)a2 + 328);
    if (v22 >= 0)
      v24 = a3;
    else
      v24 = *(unsigned __int8 **)a3;
    if ((v18 & 0x80) != 0)
    {
      this = memcmp(*v23, v24, v19);
      if ((_DWORD)this)
        goto LABEL_34;
    }
    else if ((_DWORD)v18)
    {
      while (*(unsigned __int8 *)v23 == *v24)
      {
        v23 = (const void **)((char *)v23 + 1);
        ++v24;
        if (!--v18)
          goto LABEL_40;
      }
      goto LABEL_34;
    }
LABEL_40:
    *(_DWORD *)v3 = 0;
    *(_BYTE *)(v3 + 38) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 29) = 0;
    return this;
  }
LABEL_34:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  *(_DWORD *)v3 = 7;
  this = (unint64_t)operator new(0x70uLL);
  *(_QWORD *)(v3 + 8) = this;
  *(_OWORD *)(v3 + 16) = xmmword_208F1AA10;
  if (this > (unint64_t)"Failed to set parameters since the transaction_id doesn't match the last value returned "
                                "from getParameters()"
    || this + 108 <= (unint64_t)"Failed to set parameters since the transaction_id doesn't match the last value re"
                                       "turned from getParameters()")
  {
    strcpy((char *)this, "Failed to set parameters since the transaction_id doesn't match the last value returned from getParameters()");
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
  return this;
}

void webrtc::RtpSenderBase::CheckCodecParameters(webrtc::RtpSenderBase *this@<X0>, const webrtc::RtpParameters *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  BOOL v7;
  const cricket::Codec *v8;
  const cricket::Codec *v9;
  const cricket::Codec *v10;
  uint64_t v11;
  uint64_t v12;
  const cricket::Codec *v13;
  _BYTE v14[216];
  char v15;
  _BYTE v16[216];
  unsigned __int8 v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 37) + 40))(&v18);
  v6 = 0;
  v16[0] = 0;
  v17 = 0;
  if (v20)
    v7 = v19 == 1;
  else
    v7 = 0;
  if (v7)
  {
    v8 = (const cricket::Codec *)*((_QWORD *)this + 34);
    v9 = (const cricket::Codec *)*((_QWORD *)this + 35);
    if (v8 == v9)
    {
      v6 = 0;
    }
    else
    {
      while (1)
      {
        if (!v20)
          __break(1u);
        if ((cricket::Codec::Matches((cricket::Codec *)&v18, v8) & 1) != 0)
          break;
        v8 = (const cricket::Codec *)((char *)v8 + 216);
        if (v8 == v9)
        {
          v8 = v9;
          break;
        }
      }
      v6 = v17;
      if (v8 != *((const cricket::Codec **)this + 35))
      {
        cricket::Codec::Codec((cricket::Codec *)v16, v8);
        v6 = 1;
        v17 = 1;
      }
    }
  }
  v10 = (const cricket::Codec *)*((_QWORD *)this + 34);
  v11 = *((_QWORD *)this + 35) - (_QWORD)v10;
  v12 = 0x84BDA12F684BDA13 * (v11 >> 3);
  if (v11)
    v13 = v10;
  else
    v13 = 0;
  v14[0] = 0;
  v15 = 0;
  if (v6)
  {
    cricket::Codec::Codec((cricket::Codec *)v14, (const cricket::Codec *)v16);
    v15 = 1;
  }
  cricket::CheckScalabilityModeValues((unint64_t)a2, v13, v12, (uint64_t)v14, a3);
  if (v15)
    cricket::Codec::~Codec((cricket::Codec *)v14);
  if (v17)
    cricket::Codec::~Codec((cricket::Codec *)v16);
  if (v20)
    cricket::Codec::~Codec((cricket::Codec *)&v18);
}

unint64_t webrtc::RtpSenderBase::SetParameters@<X0>(void **this@<X0>, const webrtc::RtpParameters *a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t result;
  uint64_t v7;
  TimeDelta v8;
  TimeDelta v9;
  _QWORD v10[2];
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  void (*v12)(uint64_t *, int *);

  result = webrtc::RtpSenderBase::CheckSetParameters((unint64_t)a3, (const webrtc::RtpParameters *)this, (unsigned __int8 *)a2);
  if (!*a3)
  {
    v7 = operator new();
    v10[0] = rtc::Event::Event((rtc::Event *)v7, 0, 0);
    v10[1] = a3;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpSenderBase::SetParameters(webrtc::RtpParameters const&)::$_1 &&,webrtc::RTCError>;
    (*((void (**)(void **, const webrtc::RtpParameters *, _QWORD *, uint64_t))*this + 30))(this, a2, v10, 1);
    v11(1, (__n128 *)v10, (__n128 *)v10);
    v8.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v9.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)v7, v8, v9);
    if (*((_BYTE *)this + 352))
    {
      if (*((char *)this + 351) < 0)
        operator delete(this[41]);
      *((_BYTE *)this + 352) = 0;
    }
    pthread_mutex_destroy((pthread_mutex_t *)v7);
    pthread_cond_destroy((pthread_cond_t *)(v7 + 64));
    return MEMORY[0x20BD0ADEC](v7, 0x1000C409E47E95BLL);
  }
  return result;
}

void webrtc::RtpSenderBase::SetParametersAsync(webrtc::RtpParameters *a1, unsigned __int8 *a2, uint64_t a3)
{
  char v6;
  void (*v7)(uint64_t, webrtc::RtpParameters **);
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, __int128 *, uint64_t);
  _QWORD *v13;
  int v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v17)(webrtc::_anonymous_namespace_::SignalingThreadCallback **, const webrtc::RTCError *);
  int v18;
  std::string __p;
  _DWORD v20[2];
  int v21;
  std::string v22;
  _DWORD v23[2];
  webrtc::RtpParameters *v24;
  __int128 v25;
  __int128 v26;

  webrtc::RtpSenderBase::CheckSetParameters((unint64_t)&v21, a1, a2);
  if (!v21)
  {
    v10 = *((_QWORD *)a1 + 3);
    v24 = a1;
    (*(void (**)(_QWORD, uint64_t, __int128 *))(a3 + 16))(0, a3, &v25);
    v26 = *(_OWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a3 + 24) = 0;
    v11 = operator new();
    v12 = (void (*)(_QWORD, __int128 *, uint64_t))v26;
    *(_QWORD *)v11 = v24;
    v12(0, &v25, v11 + 8);
    *(_OWORD *)(v11 + 24) = v26;
    *(_QWORD *)&v26 = absl::internal_any_invocable::EmptyManager;
    *((_QWORD *)&v26 + 1) = 0;
    v13 = (_QWORD *)operator new();
    *v13 = v10;
    v13[1] = v11;
    v13[3] = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc13RtpSenderBase18SetParametersAsyncERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESE_;
    v13[4] = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc13RtpSenderBase18SetParametersAsyncERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1JS8_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    v15[0] = v13;
    (*(void (**)(webrtc::RtpParameters *, unsigned __int8 *, _QWORD *, _QWORD))(*(_QWORD *)a1 + 240))(a1, a2, v15, 0);
    v16(1, v15, v15);
    ((void (*)(uint64_t, __int128 *, __int128 *))v26)(1, &v25, &v25);
    if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
      return;
    goto LABEL_17;
  }
  v18 = v21;
  v6 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    v20[0] = v23[0];
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v23 + 3);
    v7 = *(void (**)(uint64_t, webrtc::RtpParameters **))(a3 + 24);
    if (!v7)
    {
LABEL_4:
      v8 = (void *)__p.__r_.__value_.__r.__words[0];
      v9 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      memset(&__p, 0, sizeof(__p));
      if ((v9 & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    __p = v22;
    v20[0] = v23[0];
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)((char *)v23 + 3);
    v7 = *(void (**)(uint64_t, webrtc::RtpParameters **))(a3 + 24);
    if (!v7)
      goto LABEL_4;
  }
  LODWORD(v24) = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v7 = *(void (**)(uint64_t, webrtc::RtpParameters **))(a3 + 24);
  }
  else
  {
    v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)&v26 = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  DWORD2(v26) = v20[0];
  *(_DWORD *)((char *)&v26 + 11) = *(_DWORD *)((char *)v20 + 3);
  v7(a3, &v24);
  if (SBYTE7(v26) < 0)
    operator delete((void *)v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(1, a3, a3);
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  v8 = (void *)__p.__r_.__value_.__r.__words[0];
  v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if ((v14 & 0x80000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x80) == 0)
      return;
    goto LABEL_17;
  }
LABEL_15:
  operator delete(v8);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v6 < 0)
LABEL_17:
    operator delete(v22.__r_.__value_.__l.__data_);
}

void webrtc::RtpSenderBase::set_stream_ids(_QWORD *a1, uint64_t *a2)
{
  std::string **v4;
  std::string *v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  char v10;
  uint64_t v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type size;
  uint64_t v15;
  __int128 v16;

  v5 = (std::string *)a1[10];
  v6 = (std::string *)a1[11];
  v4 = (std::string **)(a1 + 10);
  while (v6 != v5)
  {
    if (SHIBYTE(v6[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6[-1].__r_.__value_.__l.__data_);
    --v6;
  }
  a1[11] = v5;
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    v9 = v5;
    if (*v4 != v5)
    {
      v10 = *(_BYTE *)(v7 + 23);
      if (v10 >= 0)
        v11 = *(unsigned __int8 *)(v7 + 23);
      else
        v11 = *(_QWORD *)(v7 + 8);
      if (v10 >= 0)
        v12 = (const std::string::value_type *)v7;
      else
        v12 = *(const std::string::value_type **)v7;
      v9 = *v4;
      while (1)
      {
        v13 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
        if ((v13 & 0x80u) == 0)
          size = HIBYTE(v9->__r_.__value_.__r.__words[2]);
        else
          size = v9->__r_.__value_.__l.__size_;
        if (size == v11)
        {
          if ((v13 & 0x80) != 0)
          {
            if (!memcmp(v9->__r_.__value_.__l.__data_, v12, v9->__r_.__value_.__l.__size_))
              break;
          }
          else
          {
            if (!*((_BYTE *)&v9->__r_.__value_.__s + 23))
              break;
            v15 = 0;
            while (v9->__r_.__value_.__s.__data_[v15] == v12[v15])
            {
              if (v13 == ++v15)
                goto LABEL_30;
            }
          }
        }
        if (++v9 == v5)
          goto LABEL_31;
      }
    }
LABEL_30:
    if (v9 == v5)
    {
LABEL_31:
      if ((unint64_t)v5 >= a1[12])
      {
        v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)v4, v7);
      }
      else
      {
        if (!v5)
        {
          __break(1u);
          return;
        }
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v16 = *(_OWORD *)v7;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v16;
        }
        ++v5;
      }
      a1[11] = v5;
    }
    v7 += 24;
  }
}

uint64_t webrtc::RtpSenderBase::SetStreams(_QWORD *a1)
{
  uint64_t result;

  (*(void (**)(_QWORD *))(*a1 + 200))(a1);
  result = a1[48];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t webrtc::RtpSenderBase::SetTrack(uint64_t a1, void (***a2)(_QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v12;
  size_t v13;
  unint64_t v14;
  int v15;
  void **v16;
  uint64_t v17;
  void **v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  void *__p[2];
  unsigned __int8 v39;
  void *v40;
  size_t v41;
  unsigned __int8 v42;

  if (*(_BYTE *)(a1 + 44))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    return 0;
  }
  if (!a2)
    goto LABEL_34;
  ((void (**)(void **, _QWORD))*a2)[4](&v40, a2);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 304))(__p, a1);
  v12 = v42;
  if ((v42 & 0x80u) == 0)
    v13 = v42;
  else
    v13 = v41;
  v14 = v39;
  v15 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v14 = (unint64_t)__p[1];
  if (v13 == v14)
  {
    if ((v39 & 0x80u) == 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if ((char)v42 < 0)
    {
      v22 = memcmp(v40, v16, v41) != 0;
      if ((v15 & 0x80000000) == 0)
        goto LABEL_24;
    }
    else if (v42)
    {
      v17 = v42 - 1;
      v18 = &v40;
      do
      {
        v20 = *(unsigned __int8 *)v18;
        v18 = (void **)((char *)v18 + 1);
        v19 = v20;
        v21 = *(unsigned __int8 *)v16;
        v16 = (void **)((char *)v16 + 1);
        v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
      if (((char)v39 & 0x80000000) == 0)
      {
LABEL_24:
        if ((v12 & 0x80) == 0)
          goto LABEL_25;
        goto LABEL_33;
      }
    }
    else
    {
      v22 = 0;
      if (((char)v39 & 0x80000000) == 0)
        goto LABEL_24;
    }
  }
  else
  {
    v22 = 1;
    if (((char)v39 & 0x80000000) == 0)
      goto LABEL_24;
  }
  operator delete(__p[0]);
  if ((v42 & 0x80) == 0)
  {
LABEL_25:
    if (v22)
      goto LABEL_26;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v40);
  if (v22)
  {
LABEL_26:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      ((void (**)(void **, _QWORD))*a2)[4](&v40, a2);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 304))(__p, a1);
      rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
      if ((char)v39 < 0)
        operator delete(__p[0]);
      if ((char)v42 < 0)
        operator delete(v40);
    }
    return 0;
  }
LABEL_34:
  if (!*(_QWORD *)(a1 + 304))
  {
    v32 = 0;
    v31 = 0;
    v33 = 1;
    if (!a2)
      goto LABEL_38;
LABEL_37:
    ((void (*)(void (***)(_QWORD, _QWORD)))**a2)(a2);
    goto LABEL_38;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 304) + 8) + 8))(*(_QWORD *)(a1 + 304) + 8, a1 + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  v31 = *(_QWORD *)(a1 + 304);
  if (v31)
  {
    v32 = *(_DWORD *)(a1 + 40) != 0;
    (**(void (***)(_QWORD))v31)(*(_QWORD *)(a1 + 304));
    v33 = 0;
    if (!a2)
      goto LABEL_38;
    goto LABEL_37;
  }
  v32 = 0;
  v33 = 1;
  if (a2)
    goto LABEL_37;
LABEL_38:
  v34 = *(_QWORD *)(a1 + 304);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  *(_QWORD *)(a1 + 304) = a2;
  if (a2)
  {
    (*a2[1])(a2 + 1, a1 + 16);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
    v35 = *(_QWORD *)(a1 + 304);
    if (v35 && *(_DWORD *)(a1 + 40))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
      v36 = 43;
LABEL_49:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8 * v36))(a1);
      v35 = *(_QWORD *)(a1 + 304);
      goto LABEL_50;
    }
  }
  else
  {
    v35 = 0;
  }
  if (v32)
  {
    v36 = 40;
    goto LABEL_49;
  }
LABEL_50:
  if (v35)
  {
    do
    {
      LODWORD(v35) = v37 + 1;
    }
  }
  *(_DWORD *)(a1 + 48) = v35;
  if ((v33 & 1) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return 1;
}

uint64_t webrtc::RtpSenderBase::SetSsrc(uint64_t this, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  if (*(_BYTE *)(this + 44))
    return this;
  v3 = this;
  v4 = *(_DWORD *)(this + 40);
  if (v4 == a2)
    return this;
  if (!*(_QWORD *)(this + 304))
  {
    *(_DWORD *)(this + 40) = a2;
    goto LABEL_12;
  }
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)this + 320))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 352))(v3);
    v5 = *(_QWORD *)(v3 + 304);
    *(_DWORD *)(v3 + 40) = a2;
    if (!a2 || !v5)
      goto LABEL_12;
  }
  else
  {
    *(_DWORD *)(this + 40) = a2;
    if (!a2)
      goto LABEL_12;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 312))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 344))(v3);
LABEL_12:
  if (*(_QWORD *)(v3 + 200) != *(_QWORD *)(v3 + 208) || *(_BYTE *)(v3 + 268))
  {
    v6 = *(_QWORD *)(v3 + 32);
    v12 = v3;
    (*(void (**)(uint64_t, uint64_t *, void (*)(uint64_t *), char *))(*(_QWORD *)v6 + 96))(v6, &v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetSsrc::$_1>, &v11);
  }
  v7 = *(void (****)(_QWORD))(v3 + 320);
  if (v7)
  {
    v10 = *(_QWORD *)(v3 + 320);
    (**v7)(v7);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 136))(v3, &v10);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  this = *(_QWORD *)(v3 + 392);
  if (this)
  {
    v9 = *(_QWORD *)(v3 + 392);
    (**(void (***)(uint64_t))this)(this);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 176))(v3, &v9);
    this = v9;
    if (v9)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  if (*(_QWORD *)(v3 + 400) && *(_QWORD *)(v3 + 296) && *(_DWORD *)(v3 + 40) && !*(_BYTE *)(v3 + 44))
  {
    v8 = *(_QWORD *)(v3 + 32);
    v12 = v3;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v8 + 96))(v8, &v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetEncoderSelectorOnChannel(void)::$_1>, &v11);
  }
  return this;
}

uint64_t webrtc::RtpSenderBase::Stop(uint64_t this)
{
  uint64_t v1;

  if (!*(_BYTE *)(this + 44))
  {
    v1 = this;
    if (*(_QWORD *)(this + 304))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)this + 336))(this);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 304) + 8) + 8))(*(_QWORD *)(v1 + 304) + 8, v1 + 16);
      if (*(_QWORD *)(v1 + 304))
      {
        if (*(_DWORD *)(v1 + 40))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v1 + 320))(v1);
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 352))(v1);
        }
      }
    }
    *(_QWORD *)(v1 + 296) = 0;
    *(_QWORD *)(v1 + 384) = 0;
    *(_BYTE *)(v1 + 44) = 1;
  }
  return this;
}

void webrtc::RtpSenderBase::DisableEncodingLayers(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  __int128 *v43;
  uint64_t v44;
  int v45;
  __int128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  size_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v60;
  char *v61;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type size;
  std::string *v66;
  char *v67;
  std::string::size_type v68;
  int v69;
  size_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v77;
  char *v78;
  std::string::size_type v80;
  std::string::size_type v81;
  std::string::size_type v82;
  std::string *v83;
  char *v84;
  std::string::size_type v85;
  size_t v86;
  std::string *p_p;
  size_t v88;
  std::string *v89;
  std::string *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  std::string v94;
  std::string __p;
  void *v96[12];
  uint64_t v97;
  uint64_t v98;

  if (*(_BYTE *)(a1 + 44))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v96[0] = "INVALID_STATE";
      v96[1] = (void *)13;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    }
    *(_DWORD *)a3 = 6;
    v11 = (char *)operator new(0x30uLL);
    *(_QWORD *)(a3 + 8) = v11;
    *(_OWORD *)(a3 + 16) = xmmword_208F08640;
    if (v11 > "Cannot disable encodings on a stopped sender."
      || v11 + 45 <= "Cannot disable encodings on a stopped sender.")
    {
      strcpy(v11, "Cannot disable encodings on a stopped sender.");
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      return;
    }
    goto LABEL_199;
  }
  if (*a2 == a2[1])
  {
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
    return;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 248))(v96);
  v14 = *a2;
  v15 = a2[1];
  if (*a2 == v15)
    goto LABEL_42;
  v16 = v97;
  v17 = v98;
  if (v97 == v98)
  {
LABEL_88:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v52 = *((char *)v14 + 23);
      if (v52 >= 0)
        v53 = *((unsigned __int8 *)v14 + 23);
      else
        v53 = *((_QWORD *)v14 + 1);
      v54 = v53 + 5;
      if (v53 + 5 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_200;
      if (v54 > 0x16)
      {
        v56 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v54 | 7) != 0x17)
          v56 = v54 | 7;
        v57 = v56 + 1;
        v55 = (char *)operator new(v56 + 1);
        v94.__r_.__value_.__l.__size_ = v53 + 5;
        v94.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
      }
      else
      {
        memset(&v94, 0, sizeof(v94));
        v55 = (char *)&v94;
        *((_BYTE *)&v94.__r_.__value_.__s + 23) = v53 + 5;
      }
      v58 = v55 + 5;
      if (v55 <= "RID: " && v58 > "RID: ")
        goto LABEL_199;
      v55[4] = 32;
      *(_DWORD *)v55 = 977553746;
      v60 = v52 >= 0 ? (char *)v14 : *(char **)v14;
      v61 = &v58[v53];
      if (v60 >= v58 && v61 > v60)
        goto LABEL_199;
      if (v53)
        memmove(v58, v60, v53);
      *v61 = 0;
      v63 = v94.__r_.__value_.__r.__words[2];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = 22;
      else
        v64 = (v94.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        size = v94.__r_.__value_.__l.__size_;
      if (v64 - size >= 0x21)
      {
        v66 = &v94;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = (std::string *)v94.__r_.__value_.__r.__words[0];
        v67 = (char *)v66 + size;
        if ((char *)v66 + size <= " does not refer to a valid layer." && v67 + 33 > " does not refer to a valid layer.")
          goto LABEL_199;
        qmemcpy(v67, " does not refer to a valid layer.", 33);
        v68 = size + 33;
        if ((v63 & 0x8000000000000000) != 0)
          v94.__r_.__value_.__l.__size_ = size + 33;
        else
          *((_BYTE *)&v94.__r_.__value_.__s + 23) = v68 & 0x7F;
        v66->__r_.__value_.__s.__data_[v68] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v94, v64, size - v64 + 33, size, size, 0, 0x21uLL, " does not refer to a valid layer.");
      }
      __p = v94;
      memset(&v94, 0, sizeof(v94));
      rtc::webrtc_logging_impl::Log("\r\n\t\v\t", v64, v47, size, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
    }
    v69 = *((char *)v14 + 23);
    if (v69 >= 0)
      v70 = *((unsigned __int8 *)v14 + 23);
    else
      v70 = *((_QWORD *)v14 + 1);
    v71 = v70 + 5;
    if (v70 + 5 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v71 > 0x16)
      {
        v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v71 | 7) != 0x17)
          v73 = v71 | 7;
        v74 = v73 + 1;
        v72 = (char *)operator new(v73 + 1);
        v94.__r_.__value_.__l.__size_ = v70 + 5;
        v94.__r_.__value_.__r.__words[2] = v74 | 0x8000000000000000;
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      }
      else
      {
        memset(&v94, 0, sizeof(v94));
        v72 = (char *)&v94;
        *((_BYTE *)&v94.__r_.__value_.__s + 23) = v70 + 5;
      }
      v75 = v72 + 5;
      if (v72 <= "RID: " && v75 > "RID: ")
        goto LABEL_199;
      v72[4] = 32;
      *(_DWORD *)v72 = 977553746;
      v77 = v69 >= 0 ? (char *)v14 : *(char **)v14;
      v78 = &v75[v70];
      if (v77 >= v75 && v78 > v77)
        goto LABEL_199;
      if (v70)
        memmove(v75, v77, v70);
      *v78 = 0;
      v80 = v94.__r_.__value_.__r.__words[2];
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v81 = 22;
      else
        v81 = (v94.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = HIBYTE(v94.__r_.__value_.__r.__words[2]);
      else
        v82 = v94.__r_.__value_.__l.__size_;
      if (v81 - v82 >= 0x21)
      {
        v83 = &v94;
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v83 = (std::string *)v94.__r_.__value_.__r.__words[0];
        v84 = (char *)v83 + v82;
        if ((char *)v83 + v82 <= " does not refer to a valid layer." && v84 + 33 > " does not refer to a valid layer.")
          goto LABEL_199;
        qmemcpy(v84, " does not refer to a valid layer.", 33);
        v85 = v82 + 33;
        if ((v80 & 0x8000000000000000) != 0)
          v94.__r_.__value_.__l.__size_ = v82 + 33;
        else
          *((_BYTE *)&v94.__r_.__value_.__s + 23) = v85 & 0x7F;
        v83->__r_.__value_.__s.__data_[v85] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace(&v94, v81, v82 - v81 + 33, v82, v82, 0, 0x21uLL, " does not refer to a valid layer.");
      }
      __p = v94;
      memset(&v94, 0, sizeof(v94));
      v86 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v88 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_199;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_)
        {
          if (!__p.__r_.__value_.__r.__words[0])
            goto LABEL_199;
        }
        *(_DWORD *)a3 = 3;
        if (v88 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_200;
      }
      else
      {
        *(_DWORD *)a3 = 3;
        p_p = &__p;
        v88 = v86;
      }
      if (v88 > 0x16)
      {
        v91 = (v88 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v88 | 7) != 0x17)
          v91 = v88 | 7;
        v92 = v91 + 1;
        v89 = (std::string *)operator new(v91 + 1);
        *(_QWORD *)(a3 + 16) = v88;
        *(_QWORD *)(a3 + 24) = v92 | 0x8000000000000000;
        *(_QWORD *)(a3 + 8) = v89;
        v90 = (std::string *)((char *)v89 + v88);
        if (v89 > p_p)
          goto LABEL_192;
      }
      else
      {
        v89 = (std::string *)(a3 + 8);
        *(_BYTE *)(a3 + 31) = v88;
        v90 = (std::string *)(a3 + 8 + v88);
        if (a3 + 8 > (unint64_t)p_p)
          goto LABEL_192;
      }
      if (v90 <= p_p)
      {
LABEL_192:
        if (v88)
          memmove(v89, p_p, v88);
        v90->__r_.__value_.__s.__data_[0] = 0;
        *(_DWORD *)(a3 + 32) = 0;
        *(_BYTE *)(a3 + 36) = 0;
        *(_BYTE *)(a3 + 38) = 0;
        if ((v86 & 0x80) != 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
        }
        goto LABEL_197;
      }
LABEL_199:
      __break(1u);
    }
LABEL_200:
    abort();
  }
  v18 = *a2;
  while (2)
  {
    if (*((char *)v18 + 23) >= 0)
      v19 = *((unsigned __int8 *)v18 + 23);
    else
      v19 = *((_QWORD *)v18 + 1);
    v20 = v16;
    if ((*((_BYTE *)v18 + 23) & 0x80) != 0)
    {
      v21 = v16;
      while (1)
      {
        v25 = *(unsigned __int8 *)(v21 + 151);
        if ((v25 & 0x80u) == 0)
          v26 = *(unsigned __int8 *)(v21 + 151);
        else
          v26 = *(_QWORD *)(v21 + 136);
        if (v26 == v19)
        {
          v27 = *(unsigned __int8 **)v18;
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v21 + 128), v27, *(_QWORD *)(v21 + 136)))
              goto LABEL_11;
          }
          else
          {
            if (!*(_BYTE *)(v21 + 151))
              goto LABEL_11;
            v28 = 0;
            while (*(unsigned __int8 *)(v21 + v28 + 128) == v27[v28])
            {
              if (v25 == ++v28)
                goto LABEL_11;
            }
          }
        }
        v21 += 272;
        if (v21 == v17)
          goto LABEL_87;
      }
    }
    while (1)
    {
      v22 = *(unsigned __int8 *)(v20 + 151);
      v23 = (v22 & 0x80u) == 0 ? *(unsigned __int8 *)(v20 + 151) : *(_QWORD *)(v20 + 136);
      if (v23 == v19)
        break;
LABEL_18:
      v20 += 272;
      if (v20 == v17)
      {
LABEL_87:
        v14 = v18;
        goto LABEL_88;
      }
    }
    if ((v22 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)(v20 + 128), v18, *(_QWORD *)(v20 + 136)))
        goto LABEL_11;
      goto LABEL_18;
    }
    if (*(_BYTE *)(v20 + 151))
    {
      v24 = 0;
      while (*(unsigned __int8 *)(v20 + v24 + 128) == *((unsigned __int8 *)v18 + v24))
      {
        if (v22 == ++v24)
          goto LABEL_11;
      }
      goto LABEL_18;
    }
LABEL_11:
    v18 = (__int128 *)((char *)v18 + 24);
    if (v18 != v15)
      continue;
    break;
  }
LABEL_42:
  if (*(_QWORD *)(a1 + 296) && *(_DWORD *)(a1 + 40))
  {
    v29 = v97;
    v30 = v98;
    if (v97 != v98 && v14 != v15)
    {
      v93 = (__int128 *)((char *)v14 + 24);
      do
      {
        v32 = *(_QWORD *)(v29 + 136);
        v33 = *(unsigned __int8 *)(v29 + 151);
        if (*(char *)(v29 + 151) >= 0)
          v34 = *(unsigned __int8 *)(v29 + 151);
        else
          v34 = *(_QWORD *)(v29 + 136);
        if ((*(_BYTE *)(v29 + 151) & 0x80) != 0)
        {
          v43 = v14;
          while (1)
          {
            v44 = *((unsigned __int8 *)v14 + 23);
            v45 = (char)v44;
            if ((v44 & 0x80u) != 0)
              v44 = *((_QWORD *)v14 + 1);
            if (v34 == v44)
            {
              v46 = v45 >= 0 ? v14 : *(__int128 **)v14;
              if (!memcmp(*(const void **)(v29 + 128), v46, v32))
                break;
            }
            v14 = (__int128 *)((char *)v14 + 24);
            if (v14 == v15)
            {
              v31 = 1;
              goto LABEL_48;
            }
          }
          v31 = 0;
LABEL_48:
          v14 = v43;
        }
        else
        {
          v35 = v14;
          if (*(_BYTE *)(v29 + 151))
          {
            do
            {
              v39 = *((unsigned __int8 *)v35 + 23);
              v40 = (char)v39;
              if ((v39 & 0x80u) != 0)
                v39 = *((_QWORD *)v35 + 1);
              if (v34 == v39)
              {
                v41 = 0;
                if (v40 >= 0)
                  v42 = v35;
                else
                  v42 = *(__int128 **)v35;
                while (*(unsigned __int8 *)(v29 + v41 + 128) == *((unsigned __int8 *)v42 + v41))
                {
                  if (v33 == ++v41)
                    goto LABEL_75;
                }
              }
              v35 = (__int128 *)((char *)v35 + 24);
            }
            while (v35 != v15);
            v31 = 1;
          }
          else
          {
            if (*((char *)v14 + 23) >= 0)
              v36 = *((unsigned __int8 *)v14 + 23);
            else
              v36 = *((_QWORD *)v14 + 1);
            v37 = v93;
            if (v36 == v33)
            {
LABEL_75:
              v31 = 0;
            }
            else
            {
              do
              {
                v31 = v37 == v15;
                if (v37 == v15)
                  break;
                v38 = *((unsigned __int8 *)v37 + 23);
                if ((v38 & 0x80u) != 0)
                  v38 = *((_QWORD *)v37 + 1);
                v37 = (__int128 *)((char *)v37 + 24);
              }
              while (v34 != v38);
            }
          }
        }
        if (!*(_BYTE *)(v29 + 124))
          v31 = 0;
        *(_BYTE *)(v29 + 124) = v31;
        v29 += 272;
      }
      while (v29 != v30);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 256))(a1, v96);
    if (!*(_DWORD *)a3)
    {
      std::vector<std::string>::__insert_with_size[abi:sn180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)(a1 + 360), *(_QWORD *)(a1 + 368), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
      if (*(_BYTE *)(a1 + 352))
      {
        if (*(char *)(a1 + 351) < 0)
          operator delete(*(void **)(a1 + 328));
        *(_BYTE *)(a1 + 352) = 0;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 352))
    {
      if (*(char *)(a1 + 351) < 0)
        operator delete(*(void **)(a1 + 328));
      *(_BYTE *)(a1 + 352) = 0;
    }
    *(_DWORD *)a3 = 0;
    *(_BYTE *)(a3 + 38) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 29) = 0;
  }
LABEL_197:
  webrtc::RtpParameters::~RtpParameters(v96);
}

void webrtc::`anonymous namespace'::RemoveEncodingLayers(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  unint64_t v16;
  const std::string::value_type *v17;
  size_t v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::string *v32;
  char v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
    return;
  v6 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v3 += 272 * ((v2 - v3 - 272) / 0x110) + 272;
LABEL_26:
    if (v3 != v2)
    {
      v15 = (_OWORD *)(v3 + 272);
      if (v3 + 272 != v2)
      {
        v16 = v3;
        do
        {
          v19 = v15;
          v20 = *a1;
          v21 = a1[1];
          if (*a1 != v21)
          {
            v22 = *(_BYTE *)(v3 + 423);
            if (v22 >= 0)
              v23 = *(unsigned __int8 *)(v3 + 423);
            else
              v23 = *(_QWORD *)(v3 + 408);
            if (v22 >= 0)
              v24 = (unsigned __int8 *)(v3 + 400);
            else
              v24 = *(unsigned __int8 **)(v3 + 400);
            while (1)
            {
              v25 = *(unsigned __int8 *)(v20 + 23);
              if ((v25 & 0x80u) == 0)
                v26 = *(unsigned __int8 *)(v20 + 23);
              else
                v26 = *(_QWORD *)(v20 + 8);
              if (v26 == v23)
              {
                if ((v25 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v20, v24, *(_QWORD *)(v20 + 8)))
                    break;
                }
                else
                {
                  if (!*(_BYTE *)(v20 + 23))
                    break;
                  v27 = 0;
                  while (*(unsigned __int8 *)(v20 + v27) == v24[v27])
                  {
                    if (v25 == ++v27)
                      goto LABEL_56;
                  }
                }
              }
              v20 += 24;
              if (v20 == v21)
                goto LABEL_57;
            }
          }
LABEL_56:
          if (v20 == v21)
          {
LABEL_57:
            *(_OWORD *)v16 = *v19;
            v28 = v19[1];
            v29 = v19[2];
            v30 = v19[3];
            *(_OWORD *)(v16 + 57) = *(_OWORD *)((char *)v19 + 57);
            *(_OWORD *)(v16 + 32) = v29;
            *(_OWORD *)(v16 + 48) = v30;
            *(_OWORD *)(v16 + 16) = v28;
            std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v16 + 80), (std::string *)(v3 + 352));
            v31 = *(_QWORD *)(v3 + 384);
            *(_QWORD *)(v16 + 117) = *(_QWORD *)(v3 + 389);
            *(_QWORD *)(v16 + 112) = v31;
            if ((_OWORD *)v16 != v19)
            {
              v32 = (std::string *)(v16 + 128);
              v33 = *(_BYTE *)(v3 + 423);
              if (*(char *)(v16 + 151) < 0)
              {
                if (v33 >= 0)
                  v17 = (const std::string::value_type *)(v3 + 400);
                else
                  v17 = *(const std::string::value_type **)(v3 + 400);
                if (v33 >= 0)
                  v18 = *(unsigned __int8 *)(v3 + 423);
                else
                  v18 = *(_QWORD *)(v3 + 408);
                std::string::__assign_no_alias<false>(v32, v17, v18);
              }
              else if ((*(_BYTE *)(v3 + 423) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v32, *(char **)(v3 + 400), *(_QWORD *)(v3 + 408));
              }
              else
              {
                v34 = *(_OWORD *)(v3 + 400);
                *(_QWORD *)(v16 + 144) = *(_QWORD *)(v3 + 416);
                *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v34;
              }
            }
            *(_WORD *)(v16 + 152) = *(_WORD *)(v3 + 424);
            std::__optional_storage_base<webrtc::RtpCodec,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RtpCodec,false> const&>((webrtc::RtpCodec *)(v16 + 160), (webrtc::RtpCodec *)(v3 + 432));
            v16 += 272;
          }
          v15 = v19 + 17;
          v3 = (unint64_t)v19;
        }
        while (v19 + 17 != (_OWORD *)v2);
        v2 = a2[1];
        v3 = v16;
      }
      if (v2 < v3)
      {
        __break(1u);
      }
      else if (v3 != v2)
      {
        std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(v2, v2, v3);
        v36 = v35;
        v37 = a2[1];
        if (v37 != v35)
        {
          do
            webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v37 - 272));
          while (v37 != v36);
        }
        a2[1] = v36;
      }
    }
    return;
  }
  do
  {
    v8 = *(char *)(v3 + 151);
    if (v8 >= 0)
      v9 = *(unsigned __int8 *)(v3 + 151);
    else
      v9 = *(_QWORD *)(v3 + 136);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)(v3 + 128);
    else
      v10 = *(unsigned __int8 **)(v3 + 128);
    v11 = v6;
    while (1)
    {
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = *(unsigned __int8 *)(v11 + 23);
      else
        v13 = *(_QWORD *)(v11 + 8);
      if (v13 != v9)
        goto LABEL_11;
      if ((v12 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v11, v10, *(_QWORD *)(v11 + 8)))
        goto LABEL_21;
LABEL_11:
      v11 += 24;
      if (v11 == v7)
        goto LABEL_22;
    }
    if (*(_BYTE *)(v11 + 23))
    {
      v14 = 0;
      while (*(unsigned __int8 *)(v11 + v14) == v10[v14])
      {
        if (v12 == ++v14)
          goto LABEL_21;
      }
      goto LABEL_11;
    }
LABEL_21:
    if (v11 != v7)
      goto LABEL_26;
LABEL_22:
    v3 += 272;
  }
  while (v3 != v2);
}

uint64_t webrtc::RtpSenderBase::SetFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 296) && *(_DWORD *)(a1 + 40) && !*(_BYTE *)(a1 + 44))
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = a1;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_1>, &v6);
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::RtpSenderBase::SetFrameTransformer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v3;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (*(_QWORD *)(a1 + 288) && *(_DWORD *)(a1 + 32) && !*(_BYTE *)(a1 + 36))
  {
    v5 = *(_QWORD *)(a1 + 24);
    v7 = a1 - 8;
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v5 + 96))(v5, &v7, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_1>, &v6);
  }
  return result;
}

void webrtc::LocalAudioSinkAdapter::~LocalAudioSinkAdapter(webrtc::LocalAudioSinkAdapter *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BD1E0;
  *((_QWORD *)this + 1) = &unk_24C0BD220;
  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
}

{
  pthread_mutex_t *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BD1E0;
  *((_QWORD *)this + 1) = &unk_24C0BD220;
  v2 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::LocalAudioSinkAdapter::~LocalAudioSinkAdapter(webrtc::LocalAudioSinkAdapter *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  *((_QWORD *)this - 1) = &off_24C0BD1E0;
  *(_QWORD *)this = &unk_24C0BD220;
  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
}

{
  pthread_mutex_t *v2;
  uint64_t v3;

  *((_QWORD *)this - 1) = &off_24C0BD1E0;
  *(_QWORD *)this = &unk_24C0BD220;
  v2 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  pthread_mutex_unlock(v2);
  pthread_mutex_destroy(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::LocalAudioSinkAdapter::OnData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  pthread_mutex_t *v16;
  void (***v17)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v16 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  v17 = *(void (****)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 16);
  if (v17)
  {
    (**v17)(v17, a2, a3, a4, a5, a6, a7, a8);
    *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  }
  return pthread_mutex_unlock(v16);
}

uint64_t webrtc::LocalAudioSinkAdapter::SetSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t `non-virtual thunk to'webrtc::LocalAudioSinkAdapter::SetSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::AudioRtpSender::AudioRtpSender(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  std::string *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  pthread_mutexattr_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &unk_24C0BD668;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD018;
  *(_QWORD *)(a1 + 16) = &unk_24C0BD190;
  *(_QWORD *)(a1 + 24) = &unk_24C0BD1B8;
  *(_QWORD *)(a1 + 32) = rtc::Thread::Current((rtc::Thread *)a1);
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  v10 = (std::string *)(a1 + 64);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_BYTE *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 264) = 256;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 321) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a5;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v12 = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)(a1 + 208));
  *(_QWORD *)(a1 + 216) = v12;
  *(_QWORD *)a1 = &off_24C0BD248;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD2D0;
  *(_QWORD *)(a1 + 16) = &unk_24C0BD448;
  *(_QWORD *)(a1 + 24) = &unk_24C0BD470;
  *(_QWORD *)(a1 + 416) = a4;
  v13 = (uint64_t)rtc::Thread::Current((rtc::Thread *)v12);
  if (v13)
  {
    v14 = v13;
    v13 = operator new();
    *(_QWORD *)(v13 + 16) = v14;
    *(_QWORD *)(v13 + 24) = a1;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 56) = 0x3200000064;
    *(_DWORD *)(v13 + 64) = 2000;
    *(_QWORD *)(v13 + 72) = 0;
    *(_QWORD *)v13 = &unk_24C0B3728;
    *(_QWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 80) = 0;
    v15 = (unsigned int *)(v13 + 80);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 424) = v13;
  v17 = rtc::Thread::Current((rtc::Thread *)v13);
  v18 = *(void (****)(_QWORD))(a1 + 424);
  if (v18)
    (**v18)(*(_QWORD *)(a1 + 424));
  v19 = operator new();
  *(_QWORD *)(v19 + 8) = v17;
  *(_QWORD *)(v19 + 16) = v18;
  *(_QWORD *)v19 = off_24C0BD900;
  *(_DWORD *)(v19 + 24) = 0;
  v20 = (unsigned int *)(v19 + 24);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  *(_QWORD *)(a1 + 432) = v19;
  *(_BYTE *)(a1 + 440) = 0;
  v22 = operator new();
  *(_QWORD *)v22 = &off_24C0BD1E0;
  *(_QWORD *)(v22 + 8) = &unk_24C0BD220;
  *(_QWORD *)(v22 + 16) = 0;
  pthread_mutexattr_init(&v24);
  pthread_mutexattr_setpolicy_np(&v24, 3);
  pthread_mutex_init((pthread_mutex_t *)(v22 + 24), &v24);
  pthread_mutexattr_destroy(&v24);
  *(_DWORD *)(v22 + 88) = -1;
  *(_QWORD *)(a1 + 448) = v22;
  return a1;
}

void webrtc::RtpSenderBase::~RtpSenderBase(webrtc::RtpSenderBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void *v12;
  void (***v13)(_QWORD);
  void (***v14)(_QWORD);
  void (**v15)(_QWORD);
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  *(_QWORD *)this = &unk_24C0BD018;
  *((_QWORD *)this + 1) = &unk_24C0BD190;
  *((_QWORD *)this + 2) = &unk_24C0BD1B8;
  v2 = *((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 49);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 45);
  if (v4)
  {
    v5 = *((_QWORD *)this + 46);
    v6 = (void *)*((_QWORD *)this + 45);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 45);
    }
    *((_QWORD *)this + 46) = v4;
    operator delete(v6);
  }
  if (!*((_BYTE *)this + 352) || (*((char *)this + 351) & 0x80000000) == 0)
  {
    v7 = *((_QWORD *)this + 40);
    if (!v7)
      goto LABEL_17;
    goto LABEL_16;
  }
  operator delete(*((void **)this + 41));
  v7 = *((_QWORD *)this + 40);
  if (v7)
LABEL_16:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_17:
  v8 = *((_QWORD *)this + 39);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 38);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (void (***)(_QWORD))*((_QWORD *)this + 34);
  if (v10)
  {
    v11 = (void (***)(_QWORD))*((_QWORD *)this + 35);
    v12 = (void *)*((_QWORD *)this + 34);
    if (v11 != v10)
    {
      v13 = v11 - 27;
      v14 = v11 - 27;
      do
      {
        v15 = *v14;
        v14 -= 27;
        (*v15)(v13);
        v16 = v13 == v10;
        v13 = v14;
      }
      while (!v16);
      v12 = (void *)*((_QWORD *)this + 34);
    }
    *((_QWORD *)this + 35) = v10;
    operator delete(v12);
  }
  webrtc::RtpParameters::~RtpParameters((void **)this + 13);
  v17 = *((_QWORD *)this + 10);
  if (v17)
  {
    v18 = *((_QWORD *)this + 11);
    v19 = (void *)*((_QWORD *)this + 10);
    if (v18 != v17)
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v17;
    operator delete(v19);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

BOOL webrtc::AudioRtpSender::CanInsertDtmf(webrtc::AudioRtpSender *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  webrtc::AudioRtpSender *v11;
  _QWORD v12[2];
  char v13;

  if (*((_QWORD *)this + 38))
  {
    if (*((_DWORD *)this + 12))
    {
      v1 = *((_QWORD *)this + 5);
      v11 = this;
      v13 = 0;
      v12[0] = &v13;
      v12[1] = &v11;
      (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v1 + 96))(v1, v12, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::CanInsertDtmf(void)::$_0,BOOL,void>(webrtc::AudioRtpSender::CanInsertDtmf(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v10);
      return v13 != 0;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
  {
    return 0;
  }
  rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  return 0;
}

uint64_t webrtc::AudioRtpSender::InsertDtmf(webrtc::AudioRtpSender *this, int a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[3];
  int v14;
  int v15;
  _QWORD v16[2];
  char v17;

  v14 = a3;
  v15 = a2;
  if (!*((_QWORD *)this + 38))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
LABEL_10:
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    return 0;
  }
  if (!*((_DWORD *)this + 12))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    goto LABEL_10;
  }
  v3 = *((_QWORD *)this + 5);
  v13[0] = this;
  v13[1] = &v15;
  v13[2] = &v14;
  v17 = 0;
  v16[0] = &v17;
  v16[1] = v13;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v3 + 96))(v3, v16, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::InsertDtmf(int,int)::$_0,BOOL,void>(webrtc::AudioRtpSender::InsertDtmf(int,int)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v12);
  if (v17)
    return 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    goto LABEL_10;
  return 0;
}

uint64_t webrtc::AudioRtpSender::OnChanged(webrtc::AudioRtpSender *this)
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 440);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 39) + 48))(*((_QWORD *)this + 39));
  if (v2 != (_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 39) + 48))(*((_QWORD *)this + 39));
    *((_BYTE *)this + 440) = result;
    if (*((_QWORD *)this + 39))
    {
      if (*((_DWORD *)this + 12))
        return (*(uint64_t (**)(webrtc::AudioRtpSender *))(*(_QWORD *)this + 72))(this);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::OnChanged(webrtc::AudioRtpSender *this)
{
  int v2;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 416);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 48))(*((_QWORD *)this + 36));
  if (v2 != (_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 48))(*((_QWORD *)this + 36));
    *((_BYTE *)this + 416) = result;
    if (*((_QWORD *)this + 36))
    {
      if (*((_DWORD *)this + 6))
        return (*(uint64_t (**)(char *))(*((_QWORD *)this - 3) + 72))((char *)this - 24);
    }
  }
  return result;
}

uint64_t webrtc::AudioRtpSender::DetachTrack(webrtc::AudioRtpSender *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 39);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 39));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, *((_QWORD *)this + 56));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::DetachTrack(webrtc::AudioRtpSender *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 38);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 38));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 88))(v2, *((_QWORD *)this + 55));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t webrtc::AudioRtpSender::AttachTrack(webrtc::AudioRtpSender *this)
{
  uint64_t v2;

  *((_BYTE *)this + 440) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 39) + 48))(*((_QWORD *)this + 39));
  v2 = *((_QWORD *)this + 39);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 39));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 80))(v2, *((_QWORD *)this + 56));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::AttachTrack(webrtc::AudioRtpSender *this)
{
  uint64_t v2;

  *((_BYTE *)this + 432) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 38) + 48))(*((_QWORD *)this + 38));
  v2 = *((_QWORD *)this + 38);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 38));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 80))(v2, *((_QWORD *)this + 55));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t webrtc::AudioRtpSender::AddTrackToStats(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 312);
  if (v1)
  {
    v2 = this;
    if (*(_DWORD *)(this + 48))
    {
      v3 = *(_QWORD *)(this + 416);
      if (v3)
      {
        (**(void (***)(_QWORD))v1)(*(_QWORD *)(this + 312));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, v1, *(unsigned int *)(v2 + 48));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::AddTrackToStats(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 304);
  if (v1)
  {
    v2 = this;
    if (*(_DWORD *)(this + 40))
    {
      v3 = *(_QWORD *)(this + 408);
      if (v3)
      {
        (**(void (***)(_QWORD))v1)(*(_QWORD *)(this + 304));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, v1, *(unsigned int *)(v2 + 40));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
      }
    }
  }
  return this;
}

uint64_t webrtc::AudioRtpSender::RemoveTrackFromStats(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 312);
  if (v1)
  {
    v2 = this;
    if (*(_DWORD *)(this + 48))
    {
      v3 = *(_QWORD *)(this + 416);
      if (v3)
      {
        (**(void (***)(_QWORD))v1)(*(_QWORD *)(this + 312));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, v1, *(unsigned int *)(v2 + 48));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::RemoveTrackFromStats(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 304);
  if (v1)
  {
    v2 = this;
    if (*(_DWORD *)(this + 40))
    {
      v3 = *(_QWORD *)(this + 408);
      if (v3)
      {
        (**(void (***)(_QWORD))v1)(*(_QWORD *)(this + 304));
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, v1, *(unsigned int *)(v2 + 40));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
      }
    }
  }
  return this;
}

uint64_t (***webrtc::AudioRtpSender::GetDtmfSender@<X0>(webrtc::AudioRtpSender *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 54);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t (***`non-virtual thunk to'webrtc::AudioRtpSender::GetDtmfSender@<X0>(webrtc::AudioRtpSender *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 53);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

char *webrtc::AudioRtpSender::GenerateKeyFrame@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_DWORD *)a1 = 1;
  result = (char *)operator new(0x38uLL);
  *(_QWORD *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 16) = xmmword_208F0BCB0;
  if (result <= "Generating key frames for audio is not supported."
    && result + 49 > "Generating key frames for audio is not supported.")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Generating key frames for audio is not supported.");
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
  }
  return result;
}

char *`non-virtual thunk to'webrtc::AudioRtpSender::GenerateKeyFrame@<X0>(uint64_t a1@<X8>)
{
  char *result;

  *(_DWORD *)a1 = 1;
  result = (char *)operator new(0x38uLL);
  *(_QWORD *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 16) = xmmword_208F0BCB0;
  if (result <= "Generating key frames for audio is not supported."
    && result + 49 > "Generating key frames for audio is not supported.")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Generating key frames for audio is not supported.");
    *(_DWORD *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
    *(_BYTE *)(a1 + 38) = 0;
  }
  return result;
}

void webrtc::AudioRtpSender::SetSend(webrtc::AudioRtpSender *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[3];
  char v19;
  _QWORD v20[2];
  char v21;
  __int16 v22;
  char v23;
  char v24;
  __int16 v25;
  void *__p;
  char v27;
  char v28;
  __int16 v29;
  _QWORD v30[2];
  char v31;

  if (*((_QWORD *)this + 38))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    LOBYTE(__p) = 0;
    v28 = 0;
    v29 = 0;
    v20[0] = 0;
    *(_QWORD *)((char *)v20 + 5) = 0;
    v19 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 39) + 48))(*((_QWORD *)this + 39));
    v2 = *((_QWORD *)this + 5);
    v18[0] = this;
    v18[1] = &v19;
    v18[2] = v20;
    v31 = 0;
    v30[0] = &v31;
    v30[1] = v18;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v2 + 96))(v2, v30, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::SetSend(void)::$_1,BOOL,void>(webrtc::AudioRtpSender::SetSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v17);
    if (!v31 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    if (v28)
    {
      if (v27 < 0)
        operator delete(__p);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  }
}

void `non-virtual thunk to'webrtc::AudioRtpSender::SetSend(webrtc::AudioRtpSender *this)
{
  webrtc::AudioRtpSender::SetSend((webrtc::AudioRtpSender *)((char *)this - 8));
}

void webrtc::AudioRtpSender::ClearSend(webrtc::AudioRtpSender *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  _QWORD v19[2];
  char v20;
  __int16 v21;
  char v22;
  char v23;
  __int16 v24;
  void *__p;
  char v26;
  char v27;
  __int16 v28;
  _QWORD v29[2];
  char v30;

  if (*((_QWORD *)this + 38))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    LOBYTE(__p) = 0;
    v27 = 0;
    v28 = 0;
    v19[0] = 0;
    *(_QWORD *)((char *)v19 + 5) = 0;
    v2 = *((_QWORD *)this + 5);
    v18[0] = this;
    v18[1] = v19;
    v30 = 0;
    v29[0] = &v30;
    v29[1] = v18;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v2 + 96))(v2, v29, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::ClearSend(void)::$_1,BOOL,void>(webrtc::AudioRtpSender::ClearSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v17);
    if (!v30 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    if (v27)
    {
      if (v26 < 0)
        operator delete(__p);
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  }
}

void `non-virtual thunk to'webrtc::AudioRtpSender::ClearSend(webrtc::AudioRtpSender *this)
{
  webrtc::AudioRtpSender::ClearSend((webrtc::AudioRtpSender *)((char *)this - 8));
}

char *webrtc::VideoRtpSender::Create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  char *result;
  unsigned int *v11;
  unsigned int v12;

  v8 = operator new();
  *(_QWORD *)v8 = &unk_24C0BD018;
  *(_QWORD *)(v8 + 8) = &unk_24C0BD190;
  *(_QWORD *)(v8 + 16) = &unk_24C0BD1B8;
  *(_QWORD *)(v8 + 24) = rtc::Thread::Current((rtc::Thread *)v8);
  *(_QWORD *)(v8 + 32) = a1;
  *(_DWORD *)(v8 + 40) = 0;
  *(_WORD *)(v8 + 44) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  v9 = (std::string *)(v8 + 56);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(v8 + 228) = 0;
  *(_QWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = 0;
  *(_QWORD *)(v8 + 232) = 0;
  *(_WORD *)(v8 + 256) = 256;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_BYTE *)(v8 + 224) = 0;
  *(_BYTE *)(v8 + 264) = 0;
  *(_BYTE *)(v8 + 268) = 0;
  *(_BYTE *)(v8 + 352) = 0;
  *(_QWORD *)(v8 + 360) = 0;
  *(_QWORD *)(v8 + 368) = 0;
  *(_OWORD *)(v8 + 272) = 0u;
  *(_OWORD *)(v8 + 288) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 313) = 0u;
  *(_QWORD *)(v8 + 376) = 0;
  *(_QWORD *)(v8 + 384) = a3;
  *(_QWORD *)(v8 + 392) = 0;
  *(_QWORD *)(v8 + 400) = 0;
  result = std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>((void **)(v8 + 200));
  *(_QWORD *)(v8 + 208) = result;
  *(_QWORD *)v8 = off_24C0BD9F8;
  *(_QWORD *)(v8 + 8) = &unk_24C0BDB80;
  *(_QWORD *)(v8 + 16) = &unk_24C0BDBA8;
  v11 = (unsigned int *)(v8 + 412);
  *(_QWORD *)(v8 + 408) = 0;
  *a4 = v8;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

uint64_t webrtc::VideoRtpSender::OnChanged(webrtc::VideoRtpSender *this)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 38);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 38));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_DWORD *)this + 102) != v3)
  {
    *((_DWORD *)this + 102) = v3;
    if (*((_QWORD *)this + 38))
    {
      if (*((_DWORD *)this + 10))
        return (*(uint64_t (**)(webrtc::VideoRtpSender *))(*(_QWORD *)this + 312))(this);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::VideoRtpSender::OnChanged(webrtc::VideoRtpSender *this)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *((_QWORD *)this + 36);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 36));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((_DWORD *)this + 98) != v3)
  {
    *((_DWORD *)this + 98) = v3;
    if (*((_QWORD *)this + 36))
    {
      if (*((_DWORD *)this + 6))
        return (*(uint64_t (**)(char *))(*((_QWORD *)this - 2) + 312))((char *)this - 16);
    }
  }
  return result;
}

uint64_t webrtc::VideoRtpSender::AttachTrack(webrtc::VideoRtpSender *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 38);
  if (v2)
    (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 38));
  *((_DWORD *)this + 102) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void webrtc::VideoRtpSender::GetDtmfSender(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void webrtc::VideoRtpSender::GenerateKeyFrame(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  const void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  const void **v57;
  std::string *v58;
  char v59;
  void *v60[12];
  uint64_t v61;
  uint64_t v62;
  char v63;
  const char *v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, void ***, void ***);
  uint64_t (*v67)(uint64_t *);

  if (!(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 16))(*(_QWORD *)(a1 + 296))
    || !*(_DWORD *)(a1 + 40)
    || *(_BYTE *)(a1 + 44))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    goto LABEL_6;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 232))(v60, a1);
  v13 = *a2;
  v14 = a2[1];
  if (*a2 == v14)
  {
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)(a1 + 32);
    goto LABEL_13;
  }
  v15 = v61;
  v16 = v62;
  if (v61 == v62)
  {
    if ((*((_BYTE *)v13 + 23) & 0x80) != 0)
    {
      if (!v13[1])
        goto LABEL_65;
    }
    else if (!*((_BYTE *)v13 + 23))
    {
      goto LABEL_65;
    }
LABEL_60:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v64 = "INVALID_PARAMETER";
      v65 = 17;
      rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
    }
    *(_DWORD *)a3 = 3;
    v46 = (char *)operator new(0x30uLL);
    *(_QWORD *)(a3 + 8) = v46;
    *(_OWORD *)(a3 + 16) = xmmword_208F1AA00;
    if (v46 > "Attempted to specify a rid not configured." || v46 + 42 <= "Attempted to specify a rid not configured.")
    {
      strcpy(v46, "Attempted to specify a rid not configured.");
LABEL_70:
      *(_DWORD *)(a3 + 32) = 0;
      *(_BYTE *)(a3 + 36) = 0;
      *(_BYTE *)(a3 + 38) = 0;
      webrtc::RtpParameters::~RtpParameters(v60);
      return;
    }
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  v27 = *a2;
  while (2)
  {
    if ((*((_BYTE *)v27 + 23) & 0x80) == 0)
    {
      if (*((_BYTE *)v27 + 23))
      {
        v28 = *((unsigned __int8 *)v27 + 23);
        v29 = v15;
        while (1)
        {
          v30 = *(unsigned __int8 *)(v29 + 151);
          if ((v30 & 0x80u) == 0)
            v31 = *(unsigned __int8 *)(v29 + 151);
          else
            v31 = *(_QWORD *)(v29 + 136);
          if (v31 == v28)
          {
            if ((v30 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v29 + 128), v27, *(_QWORD *)(v29 + 136)))
                goto LABEL_27;
            }
            else
            {
              if (!*(_BYTE *)(v29 + 151))
                goto LABEL_27;
              v32 = 0;
              while (*(unsigned __int8 *)(v29 + v32 + 128) == *((unsigned __int8 *)v27 + v32))
              {
                if (v30 == ++v32)
                  goto LABEL_27;
              }
            }
          }
          v29 += 272;
          if (v29 == v16)
            goto LABEL_60;
        }
      }
LABEL_65:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v64 = "INVALID_PARAMETER";
        v65 = 17;
        rtc::webrtc_logging_impl::Log("\r\t\t\v\t", v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
      }
      *(_DWORD *)a3 = 3;
      v54 = (char *)operator new(0x28uLL);
      *(_QWORD *)(a3 + 8) = v54;
      *(_OWORD *)(a3 + 16) = xmmword_208F094E0;
      if (v54 > "Attempted to specify an empty rid." || v54 + 34 <= "Attempted to specify an empty rid.")
      {
        strcpy(v54, "Attempted to specify an empty rid.");
        goto LABEL_70;
      }
      goto LABEL_77;
    }
    v33 = v27[1];
    v34 = v15;
    if (!v33)
      goto LABEL_65;
    while (1)
    {
      v35 = *(unsigned __int8 *)(v34 + 151);
      v36 = (v35 & 0x80u) == 0 ? (const void *)*(unsigned __int8 *)(v34 + 151) : *(const void **)(v34 + 136);
      if (v36 == v33)
        break;
LABEL_46:
      v34 += 272;
      if (v34 == v16)
        goto LABEL_60;
    }
    v37 = (unsigned __int8 *)*v27;
    if ((v35 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)(v34 + 128), v37, *(_QWORD *)(v34 + 136)))
        goto LABEL_27;
      goto LABEL_46;
    }
    if (*(_BYTE *)(v34 + 151))
    {
      v38 = 0;
      while (*(unsigned __int8 *)(v34 + v38 + 128) == v37[v38])
      {
        if (v35 == ++v38)
          goto LABEL_27;
      }
      goto LABEL_46;
    }
LABEL_27:
    v27 += 3;
    if (v27 != v14)
      continue;
    break;
  }
  if (0xAAAAAAAAAAAAAAABLL * (v14 - v13) > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_78;
  v19 = *(_QWORD *)(a1 + 32);
  v18 = (char *)operator new((char *)v14 - (char *)v13);
  v55 = 0;
  do
  {
    while (1)
    {
      v57 = &v13[v55];
      v58 = (std::string *)&v18[v55 * 8];
      if (SHIBYTE(v13[v55 + 2]) < 0)
        break;
      v56 = *(_OWORD *)v57;
      v58->__r_.__value_.__r.__words[2] = (std::string::size_type)v57[2];
      *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v56;
      v55 += 3;
      if (&v13[v55] == v14)
        goto LABEL_76;
    }
    std::string::__init_copy_ctor_external(v58, (const std::string::value_type *)*v57, (std::string::size_type)v57[1]);
    v55 += 3;
  }
  while (&v13[v55] != v14);
LABEL_76:
  v17 = &v18[v55 * 8];
LABEL_13:
  v20 = (char *)operator new();
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = 0;
  v21 = v17 - v18;
  if (v17 != v18)
  {
    v22 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
    if (v22 <= 0xAAAAAAAAAAAAAAALL)
    {
      v23 = (char *)operator new(v21);
      v24 = 0;
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 2) = &v23[24 * v22];
      do
      {
        while (1)
        {
          v25 = &v18[v24];
          v26 = (std::string *)&v23[v24];
          if ((v18[v24 + 23] & 0x80000000) == 0)
            break;
          std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)v25, *((_QWORD *)v25 + 1));
          v24 += 24;
          if (&v18[v24] == v17)
            goto LABEL_19;
        }
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)v25;
        v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v25 + 2);
        v24 += 24;
      }
      while (&v18[v24] != v17);
LABEL_19:
      *((_QWORD *)v20 + 1) = &v23[v24];
      goto LABEL_20;
    }
LABEL_78:
    abort();
  }
LABEL_20:
  *((_QWORD *)v20 + 3) = a1;
  v64 = v20;
  v66 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoRtpSender::GenerateKeyFrame(std::vector<std::string> const&)::$_2>;
  v67 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoRtpSender::GenerateKeyFrame(std::vector<std::string> const&)::$_2 &&>;
  (*(void (**)(uint64_t, const char **, char *, char *))(*(_QWORD *)v19 + 8))(v19, &v64, &v63, &v59);
  v66(1, (void ***)&v64, (void ***)&v64);
  if (v18)
  {
    while (v17 != v18)
    {
      if (*(v17 - 1) < 0)
        operator delete(*((void **)v17 - 3));
      v17 -= 24;
    }
    operator delete(v18);
  }
  webrtc::RtpParameters::~RtpParameters(v60);
LABEL_6:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 38) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 29) = 0;
}

void webrtc::VideoRtpSender::SetSend(webrtc::VideoRtpSender *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  __int16 v14;
  char v15;
  char v16;
  __int16 v17;
  int v18;
  _QWORD v19[2];
  char v20;

  if (*((_QWORD *)this + 37))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v2 = *((_QWORD *)this + 38);
    if (v2)
      (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 38));
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    if (v3)
    {
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3) | 0x100;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
    }
    v18 = *((_DWORD *)this + 102);
    if ((v18 - 1) <= 2)
      v17 = 0x10101010100uLL >> (16 * (v18 - 1));
    v4 = *((_QWORD *)this + 4);
    v13[0] = this;
    v13[1] = &v14;
    v20 = 0;
    v19[0] = &v20;
    v19[1] = v13;
    (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v4 + 96))(v4, v19, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::VideoRtpSender::SetSend(void)::$_1,BOOL,void>(webrtc::VideoRtpSender::SetSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>, &v12);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  }
}

void webrtc::VideoRtpSender::ClearSend(webrtc::VideoRtpSender *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  webrtc::VideoRtpSender *v10;

  if (*((_QWORD *)this + 37))
  {
    v1 = *((_QWORD *)this + 4);
    v10 = this;
    (*(void (**)(uint64_t, webrtc::VideoRtpSender **, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v1 + 96))(v1, &v10, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpSender::ClearSend(void)::$_1>, &v9);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc");
  }
}

uint64_t (***webrtc::RtpSenderBase::track@<X0>(webrtc::RtpSenderBase *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 38);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t (***webrtc::RtpSenderBase::dtls_transport@<X0>(webrtc::RtpSenderBase *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 39);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

uint64_t webrtc::RtpSenderBase::ssrc(webrtc::RtpSenderBase *this)
{
  return *((unsigned int *)this + 10);
}

void webrtc::RtpSenderBase::id(webrtc::RtpSenderBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

void webrtc::RtpSenderBase::stream_ids(webrtc::RtpSenderBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  __int128 *v9;
  std::string *v10;
  __int128 v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 10);
  v3 = *((_QWORD *)this + 11);
  v4 = v3 - v2;
  if (v3 != v2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = (char *)operator new(v4);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[24 * v6];
    do
    {
      while (1)
      {
        v9 = (__int128 *)(v2 + v8);
        v10 = (std::string *)&v7[v8];
        if ((*(char *)(v2 + v8 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        v8 += 24;
        if (v2 + v8 == v3)
          goto LABEL_7;
      }
      v11 = *v9;
      v10->__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      v8 += 24;
    }
    while (v2 + v8 != v3);
LABEL_7:
    a2[1] = &v7[v8];
  }
}

uint64_t webrtc::RtpSenderBase::init_send_encodings@<X0>(webrtc::RtpSenderBase *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  const std::string::value_type **v15;
  __int128 v16;
  uint64_t v17;
  std::string *v18;
  const std::string::value_type **v19;
  __int128 v20;
  char *v21;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 25);
  v3 = *((_QWORD *)this + 26);
  result = v3 - v2;
  if (v3 != v2)
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * (result >> 4);
    if (v6 >= 0xF0F0F0F0F0F0F1)
      abort();
    v7 = operator new(result);
    v8 = 0;
    *a2 = v7;
    a2[2] = &v7[272 * v6];
    do
    {
      v9 = &v7[v8];
      v10 = v2 + v8;
      *(_OWORD *)v9 = *(_OWORD *)(v2 + v8);
      v11 = *(_OWORD *)(v2 + v8 + 16);
      v12 = *(_OWORD *)(v2 + v8 + 32);
      v13 = *(_OWORD *)(v2 + v8 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(v2 + v8 + 57);
      *((_OWORD *)v9 + 2) = v12;
      *((_OWORD *)v9 + 3) = v13;
      *((_OWORD *)v9 + 1) = v11;
      v7[v8 + 80] = 0;
      v14 = (std::string *)&v7[v8 + 80];
      v9[104] = 0;
      if (*(_BYTE *)(v2 + v8 + 104))
      {
        v15 = (const std::string::value_type **)(v10 + 80);
        if (*(char *)(v10 + 103) < 0)
        {
          std::string::__init_copy_ctor_external(v14, *v15, *(_QWORD *)(v2 + v8 + 88));
        }
        else
        {
          v16 = *(_OWORD *)v15;
          *(_QWORD *)&v7[v8 + 96] = *(_QWORD *)(v10 + 96);
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v16;
        }
        v9[104] = 1;
      }
      v17 = *(_QWORD *)(v10 + 112);
      *(_QWORD *)(v9 + 117) = *(_QWORD *)(v10 + 117);
      *((_QWORD *)v9 + 14) = v17;
      v18 = (std::string *)(v9 + 128);
      v19 = (const std::string::value_type **)(v10 + 128);
      if (*(char *)(v10 + 151) < 0)
      {
        std::string::__init_copy_ctor_external(v18, *v19, *(_QWORD *)(v2 + v8 + 136));
      }
      else
      {
        v20 = *(_OWORD *)v19;
        *((_QWORD *)v9 + 18) = *(_QWORD *)(v10 + 144);
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
      }
      v21 = &v7[v8];
      *((_WORD *)v21 + 76) = *(_WORD *)(v10 + 152);
      v7[v8 + 160] = 0;
      result = (uint64_t)&v7[v8 + 160];
      v21[264] = 0;
      if (*(_BYTE *)(v10 + 264))
      {
        result = (uint64_t)webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)result, (const webrtc::RtpCodec *)(v2 + v8 + 160));
        v21[264] = 1;
      }
      v8 += 272;
    }
    while (v10 + 272 != v3);
    a2[1] = &v7[v8];
  }
  return result;
}

uint64_t (***webrtc::RtpSenderBase::GetFrameEncryptor@<X0>(webrtc::RtpSenderBase *this@<X0>, _QWORD *a2@<X8>))(_QWORD)
{
  uint64_t (***result)(_QWORD);

  result = (uint64_t (***)(_QWORD))*((_QWORD *)this + 40);
  *a2 = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

void webrtc::RtpSenderBase::set_init_send_encodings(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  v2 = (uint64_t *)(a1 + 200);
  if (v2 != a2)
    std::vector<webrtc::RtpEncodingParameters>::__assign_with_size[abi:sn180100]<webrtc::RtpEncodingParameters*,webrtc::RtpEncodingParameters*>(v2, *a2, a2[1], 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4));
}

uint64_t webrtc::RtpSenderBase::set_transport(uint64_t a1, _QWORD *a2)
{
  void (***v3)(_QWORD);
  uint64_t result;

  v3 = (void (***)(_QWORD))*a2;
  if (*a2)
    (**v3)(*a2);
  result = *(_QWORD *)(a1 + 312);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 312) = v3;
  return result;
}

uint64_t webrtc::RtpSenderBase::AttachmentId(webrtc::RtpSenderBase *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t webrtc::RtpSenderBase::SetTransceiverAsStopped(uint64_t this)
{
  *(_BYTE *)(this + 45) = 1;
  return this;
}

uint64_t *webrtc::RtpSenderBase::SetSendCodecs(uint64_t a1, const cricket::Codec **a2)
{
  uint64_t *result;

  result = (uint64_t *)(a1 + 272);
  if (result != (uint64_t *)a2)
    return std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(result, *a2, a2[1], 0x84BDA12F684BDA13 * ((a2[1] - *a2) >> 3));
  return result;
}

uint64_t webrtc::LocalAudioSinkAdapter::OnData(webrtc::LocalAudioSinkAdapter *this, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(webrtc::LocalAudioSinkAdapter *, const void *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 8))(this, a2, a3, a4, a5, a6, 0, 0);
}

uint64_t webrtc::LocalAudioSinkAdapter::NumPreferredChannels(webrtc::LocalAudioSinkAdapter *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t webrtc::AudioRtpSender::media_type(webrtc::AudioRtpSender *this)
{
  return 0;
}

void webrtc::AudioRtpSender::track_kind(unint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 5;
  if (a1 <= (unint64_t)"audio" && a1 + 5 > (unint64_t)"audio")
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)"audio";
    *(_WORD *)(a1 + 4) = cricket::kMediaTypeAudio[4];
  }
}

uint64_t `non-virtual thunk to'webrtc::AudioRtpSender::media_type(webrtc::AudioRtpSender *this)
{
  return 0;
}

void `non-virtual thunk to'webrtc::AudioRtpSender::track_kind(unint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 5;
  if (a1 <= (unint64_t)"audio" && a1 + 5 > (unint64_t)"audio")
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)"audio";
    *(_WORD *)(a1 + 4) = cricket::kMediaTypeAudio[4];
  }
}

uint64_t webrtc::VideoRtpSender::media_type(webrtc::VideoRtpSender *this)
{
  return 1;
}

void webrtc::VideoRtpSender::track_kind(unint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 5;
  if (a1 <= (unint64_t)"video" && a1 + 5 > (unint64_t)"video")
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)"video";
    *(_WORD *)(a1 + 4) = cricket::kMediaTypeVideo[4];
  }
}

char *std::vector<webrtc::RtpEncodingParameters>::__emplace_back_slow_path<>(void **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  const std::string::value_type **v18;
  __int128 v19;
  uint64_t v20;
  std::string *v21;
  const std::string::value_type **v22;
  __int128 v23;
  char *v24;
  char *v25;

  v2 = (char *)*a1;
  v1 = (char *)a1[1];
  v3 = 0xF0F0F0F0F0F0F0F1 * ((v1 - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - v2) >> 4) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - v2) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - v2) >> 4) >= 0x78787878787878)
    v4 = 0xF0F0F0F0F0F0F0;
  if (!v4)
  {
    __break(1u);
LABEL_30:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v4 > 0xF0F0F0F0F0F0F0)
    goto LABEL_30;
  v6 = 272 * v4;
  v7 = (char *)operator new(272 * v4);
  v8 = &v7[272 * v3];
  *v8 = 0;
  v8[4] = 0;
  v9 = &v7[v6];
  *((_QWORD *)v8 + 1) = 0x3FF0000000000000;
  *((_DWORD *)v8 + 4) = 1;
  v8[20] = 0;
  v8[24] = 0;
  v8[28] = 0;
  v8[32] = 0;
  v8[40] = 0;
  v8[48] = 0;
  v8[56] = 0;
  v8[60] = 0;
  v8[64] = 0;
  v8[72] = 0;
  v8[80] = 0;
  v8[104] = 0;
  v8[112] = 0;
  v8[120] = 0;
  v8[124] = 1;
  v8[160] = 0;
  v8[264] = 0;
  *((_QWORD *)v8 + 16) = 0;
  *((_QWORD *)v8 + 17) = 0;
  *((_WORD *)v8 + 76) = 0;
  v10 = v8 + 272;
  *((_QWORD *)v8 + 18) = 0;
  if (v1 == v2)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v1)
      return v8 + 272;
    goto LABEL_24;
  }
  v11 = 0;
  do
  {
    v12 = &v8[v11];
    v13 = &v1[v11];
    v14 = *(_OWORD *)&v1[v11 - 256];
    v15 = *(_OWORD *)&v1[v11 - 240];
    v16 = *(_OWORD *)&v1[v11 - 224];
    *(_OWORD *)(v12 - 215) = *(_OWORD *)&v1[v11 - 215];
    *((_OWORD *)v12 - 15) = v15;
    *((_OWORD *)v12 - 14) = v16;
    *((_OWORD *)v12 - 16) = v14;
    *(_OWORD *)&v8[v11 - 272] = *(_OWORD *)&v1[v11 - 272];
    v8[v11 - 192] = 0;
    v17 = (std::string *)&v8[v11 - 192];
    *(v12 - 168) = 0;
    if (v1[v11 - 168])
    {
      v18 = (const std::string::value_type **)(v13 - 192);
      if (*(v13 - 169) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *v18, *(_QWORD *)&v1[v11 - 184]);
      }
      else
      {
        v19 = *(_OWORD *)v18;
        *(_QWORD *)&v8[v11 - 176] = *((_QWORD *)v13 - 22);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v19;
      }
      *(v12 - 168) = 1;
    }
    v20 = *((_QWORD *)v13 - 20);
    *(_QWORD *)(v12 - 155) = *(_QWORD *)(v13 - 155);
    *((_QWORD *)v12 - 20) = v20;
    v21 = (std::string *)(v12 - 144);
    v22 = (const std::string::value_type **)(v13 - 144);
    if (*(v13 - 121) < 0)
    {
      std::string::__init_copy_ctor_external(v21, *v22, *(_QWORD *)&v1[v11 - 136]);
    }
    else
    {
      v23 = *(_OWORD *)v22;
      *((_QWORD *)v12 - 16) = *((_QWORD *)v13 - 16);
      *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v23;
    }
    v24 = &v8[v11];
    *((_WORD *)v24 - 60) = *(_WORD *)&v1[v11 - 120];
    v8[v11 - 112] = 0;
    *(v24 - 8) = 0;
    if (v1[v11 - 8])
    {
      webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)&v8[v11 - 112], (const webrtc::RtpCodec *)&v1[v11 - 112]);
      *(v24 - 8) = 1;
    }
    v11 -= 272;
  }
  while (&v1[v11] != v2);
  v1 = (char *)*a1;
  v25 = (char *)a1[1];
  *a1 = &v8[v11];
  a1[1] = v10;
  a1[2] = v9;
  while (v25 != v1)
    webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v25 - 272));
  if (v1)
LABEL_24:
    operator delete(v1);
  return v8 + 272;
}

uint64_t webrtc::`anonymous namespace'::SignalingThreadCallback::Resolve(webrtc::_anonymous_namespace_::SignalingThreadCallback *this, const webrtc::RTCError *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t, char *, char *);
  __int128 v7;
  char *v8;
  void (*v9)(_QWORD, _QWORD);
  char *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t result;
  void *v14;
  int v15;
  int v16;
  std::string v17;
  _DWORD v18[3];
  char v19;
  int v20;
  std::string v21;
  _DWORD v22[2];
  std::string __p;
  _DWORD v24[3];
  char v25;
  _QWORD v26[2];
  uint64_t (*v27)(uint64_t, uint64_t *, _QWORD *);
  void (*v28)(uint64_t *);

  if (rtc::Thread::IsCurrent(*(rtc::Thread **)this))
  {
    v16 = *(_DWORD *)a2;
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&v17, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      v17 = *(std::string *)((char *)a2 + 8);
    v18[0] = *((_DWORD *)a2 + 8);
    *(_DWORD *)((char *)v18 + 3) = *(_DWORD *)((char *)a2 + 35);
    v10 = (char *)this + 32;
    v9 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 4);
    if (v9)
    {
      v20 = v16;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
        v9 = *(void (**)(_QWORD, _QWORD))v10;
      }
      else
      {
        v21 = v17;
      }
      v22[0] = v18[0];
      *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)((char *)v18 + 3);
      v9((char *)this + 8, &v20);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      (*((void (**)(uint64_t, char *, char *))this + 3))(1, (char *)this + 8, (char *)this + 8);
      *((_QWORD *)this + 3) = absl::internal_any_invocable::EmptyManager;
      *((_QWORD *)this + 4) = 0;
    }
    v14 = (void *)v17.__r_.__value_.__r.__words[0];
    v15 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    memset(&v17, 0, sizeof(v17));
    if (v15 < 0)
    {
      operator delete(v14);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    result = (*((uint64_t (**)(uint64_t, char *, char *))this + 3))(1, (char *)this + 8, (char *)this + 8);
    v6 = (uint64_t (**)(uint64_t, char *, char *))((char *)this + 24);
  }
  else
  {
    v4 = (char *)this + 8;
    v5 = *(_QWORD *)this;
    v6 = (uint64_t (**)(uint64_t, char *, char *))((char *)this + 24);
    (*((void (**)(_QWORD, char *, int *))this + 3))(0, (char *)this + 8, &v20);
    v7 = *(_OWORD *)((char *)this + 24);
    *((_QWORD *)this + 4) = 0;
    v8 = (char *)this + 32;
    *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = v7;
    *v6 = (uint64_t (*)(uint64_t, char *, char *))absl::internal_any_invocable::EmptyManager;
    v22[0] = *(_DWORD *)a2;
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      __p = *(std::string *)((char *)a2 + 8);
    v24[0] = *((_DWORD *)a2 + 8);
    *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)a2 + 35);
    v11 = operator new();
    ((void (*)(_QWORD, int *, uint64_t))v21.__r_.__value_.__l.__size_)(0, &v20, v11);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)&v21.__r_.__value_.__r.__words[1];
    *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = (unint64_t)absl::internal_any_invocable::EmptyManager;
    *(_DWORD *)(v11 + 32) = v22[0];
    v12 = (std::string *)(v11 + 40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v11 + 56) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_DWORD *)(v11 + 64) = v24[0];
    *(_DWORD *)(v11 + 67) = *(_DWORD *)((char *)v24 + 3);
    v26[0] = v11;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v26, &v25, &v19);
    v27(1, v26, v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ((void (*)(uint64_t, int *, int *))v21.__r_.__value_.__l.__size_)(1, &v20, &v20);
    result = (*v6)(1, v4, v4);
    v10 = v8;
  }
  *v6 = (uint64_t (*)(uint64_t, char *, char *))absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)v10 = 0;
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::SignalingThreadCallback::Resolve(webrtc::RTCError const&)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, int *);
  void *v3;
  int v4;
  int v5;
  int v6;
  std::string v7;
  _DWORD v8[2];
  int v9;
  std::string __p;
  _DWORD v11[2];

  v1 = *a1;
  v6 = *(_DWORD *)(*a1 + 32);
  if (*(char *)(*a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v1 + 40), *(_QWORD *)(v1 + 48));
    v8[0] = *(_DWORD *)(v1 + 64);
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)(v1 + 67);
    v2 = *(void (**)(uint64_t, int *))(v1 + 24);
    if (!v2)
    {
LABEL_3:
      v3 = (void *)v7.__r_.__value_.__r.__words[0];
      v4 = SHIBYTE(v7.__r_.__value_.__r.__words[2]);
      memset(&v7, 0, sizeof(v7));
      if ((v4 & 0x80000000) == 0)
        return;
      goto LABEL_12;
    }
  }
  else
  {
    v7 = *(std::string *)(v1 + 40);
    v8[0] = *(_DWORD *)(v1 + 64);
    *(_DWORD *)((char *)v8 + 3) = *(_DWORD *)(v1 + 67);
    v2 = *(void (**)(uint64_t, int *))(v1 + 24);
    if (!v2)
      goto LABEL_3;
  }
  v9 = v6;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
    v2 = *(void (**)(uint64_t, int *))(v1 + 24);
  }
  else
  {
    __p = v7;
  }
  v11[0] = v8[0];
  *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)((char *)v8 + 3);
  v2(v1, &v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(1, v1, v1);
  *(_QWORD *)(v1 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v1 + 24) = 0;
  v3 = (void *)v7.__r_.__value_.__r.__words[0];
  v5 = SHIBYTE(v7.__r_.__value_.__r.__words[2]);
  memset(&v7, 0, sizeof(v7));
  if (v5 < 0)
  {
LABEL_12:
    operator delete(v3);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::SignalingThreadCallback::Resolve(webrtc::RTCError const&)::{lambda(void)#1}>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 63) < 0)
        operator delete(*(void **)(v3 + 40));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, v3, v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::vector<std::string>::__insert_with_size[abi:sn180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(void **a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  _BYTE *v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  __int128 *v19;
  char *v20;
  __int128 *v21;
  std::string *v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  __int128 v25;
  uint64_t v26;
  __int128 *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  const std::string::value_type *v35;
  size_t v36;
  char v37;
  __int128 v38;
  std::string *v39;
  char *v40;
  uint64_t v41;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  void *v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  void *v51;
  __int128 v52;
  void *v53;

  if (a5 < 1)
    return;
  v6 = a3;
  v8 = *a1;
  v9 = (__int128 *)a1[1];
  v10 = (a2 - (uint64_t)*a1) / 24;
  v11 = (uint64_t)*a1 + 24 * v10;
  v12 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)v9) >> 3)) < a5)
  {
    v13 = a5 - 0x5555555555555555 * (((char *)v9 - v8) >> 3);
    if (v13 <= 0xAAAAAAAAAAAAAAALL)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v8) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13)
        v15 = v13;
      if (v14 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v39 = (std::string *)&v17[24 * v10];
      v40 = &v17[24 * v16];
      v41 = 24 * a5;
      v42 = &v39[a5];
      v43 = v39;
      do
      {
        while (1)
        {
          if (!v43)
            goto LABEL_68;
          if (*((char *)v6 + 23) < 0)
            break;
          v44 = *v6;
          v43->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
          *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v44;
          ++v43;
          v6 = (__int128 *)((char *)v6 + 24);
          v41 -= 24;
          if (!v41)
            goto LABEL_52;
        }
        v45 = *(const std::string::value_type **)v6;
        v46 = *((_QWORD *)v6 + 1);
        v6 = (__int128 *)((char *)v6 + 24);
        std::string::__init_copy_ctor_external(v43++, v45, v46);
        v41 -= 24;
      }
      while (v41);
LABEL_52:
      v47 = *a1;
      if (*a1 == (void *)v11)
      {
        v49 = v39;
        v51 = a1[1];
        if (v51 == (void *)v11)
          goto LABEL_60;
      }
      else
      {
        v48 = v11;
        do
        {
          v49 = v39 - 1;
          v50 = *(_OWORD *)(v48 - 24);
          v39[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 - 8);
          *(_OWORD *)&v39[-1].__r_.__value_.__l.__data_ = v50;
          *(_QWORD *)(v48 - 16) = 0;
          *(_QWORD *)(v48 - 8) = 0;
          *(_QWORD *)(v48 - 24) = 0;
          v48 -= 24;
          --v39;
        }
        while ((void *)v48 != v47);
        v51 = a1[1];
        if (v51 == (void *)v11)
          goto LABEL_60;
      }
      do
      {
        v52 = *(_OWORD *)v11;
        v42->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v52;
        ++v42;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = 0;
        v11 += 24;
      }
      while ((void *)v11 != v51);
      v11 = (uint64_t)a1[1];
LABEL_60:
      v53 = *a1;
      *a1 = v49;
      a1[1] = v42;
      a1[2] = v40;
      while ((void *)v11 != v53)
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      if (v53)
        operator delete(v53);
      return;
    }
LABEL_69:
    abort();
  }
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v11) >> 3)) >= a5)
  {
    v19 = (__int128 *)((char *)a3 + 24 * a5);
    v20 = (char *)a1[1];
    v26 = 24 * a5;
    v27 = (__int128 *)((char *)v9 - 24 * a5);
    v28 = v20;
    if (v27 >= v9)
      goto LABEL_26;
LABEL_23:
    v28 = v20;
    while (v28)
    {
      v29 = *v27;
      *((_QWORD *)v28 + 2) = *((_QWORD *)v27 + 2);
      *(_OWORD *)v28 = v29;
      v28 += 24;
      *((_QWORD *)v27 + 1) = 0;
      *((_QWORD *)v27 + 2) = 0;
      *(_QWORD *)v27 = 0;
      v27 = (__int128 *)((char *)v27 + 24);
      if (v27 >= v9)
        goto LABEL_26;
    }
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v19 = (__int128 *)((char *)a3 + 8 * (((uint64_t)v9 - v11) >> 3));
  v20 = (char *)a1[1];
  if (v19 != a4)
  {
    v21 = (__int128 *)((char *)a3 + 8 * (((uint64_t)v9 - v11) >> 3));
    v22 = (std::string *)a1[1];
    while (v22)
    {
      if (*((char *)v21 + 23) < 0)
      {
        v23 = *(const std::string::value_type **)v21;
        v24 = *((_QWORD *)v21 + 1);
        v21 = (__int128 *)((char *)v21 + 24);
        std::string::__init_copy_ctor_external(v22++, v23, v24);
        v20 += 24;
        if (v21 == a4)
          goto LABEL_19;
      }
      else
      {
        v25 = *v21;
        v22->__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v25;
        ++v22;
        v21 = (__int128 *)((char *)v21 + 24);
        v20 += 24;
        if (v21 == a4)
          goto LABEL_19;
      }
    }
    goto LABEL_68;
  }
LABEL_19:
  a1[1] = v20;
  if ((uint64_t)v9 - v11 < 1)
    return;
  v26 = 24 * a5;
  v27 = (__int128 *)&v20[-24 * a5];
  v28 = v20;
  if (v27 < v9)
    goto LABEL_23;
LABEL_26:
  v30 = v11 + v26;
  a1[1] = v28;
  if (v20 != (char *)v30)
  {
    v31 = v20 - 24;
    v32 = 8 * ((uint64_t)&v20[-v30] >> 3);
    do
    {
      if (v31[23] < 0)
        operator delete(*(void **)v31);
      v33 = (__int128 *)(v11 + v32 - 24);
      v34 = *v33;
      *((_QWORD *)v31 + 2) = *(_QWORD *)(v11 + v32 - 8);
      *(_OWORD *)v31 = v34;
      v31 -= 24;
      *(_BYTE *)(v11 + v32 - 1) = 0;
      *(_BYTE *)v33 = 0;
      v32 -= 24;
    }
    while (v32);
  }
  for (; v6 != v19; v11 += 24)
  {
    if (v6 != (__int128 *)v11)
    {
      v37 = *((_BYTE *)v6 + 23);
      if (*(char *)(v11 + 23) < 0)
      {
        if (v37 >= 0)
          v35 = (const std::string::value_type *)v6;
        else
          v35 = *(const std::string::value_type **)v6;
        if (v37 >= 0)
          v36 = *((unsigned __int8 *)v6 + 23);
        else
          v36 = *((_QWORD *)v6 + 1);
        std::string::__assign_no_alias<false>((std::string *)v11, v35, v36);
      }
      else if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v11, *(char **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v38 = *v6;
        *(_QWORD *)(v11 + 16) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v11 = v38;
      }
    }
    v6 = (__int128 *)((char *)v6 + 24);
  }
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameEncryptor(webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>)::$_1>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (***v3)(_QWORD);
  uint64_t result;
  void (***v5)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 296);
  v2 = *(unsigned int *)(*(_QWORD *)a1 + 40);
  v3 = *(void (****)(_QWORD))(*(_QWORD *)a1 + 320);
  v5 = v3;
  if (v3)
    (**v3)(v3);
  (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v1 + 120))(v1, v2, &v5);
  result = (uint64_t)v5;
  if (v5)
    return ((uint64_t (*)(_QWORD))(*v5)[1])(v5);
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetEncoderSelectorOnChannel(void)::$_1>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 296) + 144))(*(_QWORD *)(*(_QWORD *)a1 + 296), *(unsigned int *)(*(_QWORD *)a1 + 40), *(_QWORD *)(*(_QWORD *)a1 + 400));
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpParameters rtc::Thread::BlockingCall<webrtc::RtpSenderBase::GetParametersInternal(void)::$_1,webrtc::RtpParameters,void>(webrtc::RtpSenderBase::GetParametersInternal(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v2;
  std::string v3[4];
  unint64_t v4[9];

  v2 = **(_QWORD **)(a1 + 8);
  (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v2 + 296) + 152))(v3, *(_QWORD *)(v2 + 296), *(unsigned int *)(v2 + 40));
  webrtc::RtpParameters::operator=(*(std::string **)a1, v3);
  webrtc::RtpParameters::~RtpParameters((void **)&v3[0].__r_.__value_.__l.__data_);
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpParameters rtc::Thread::BlockingCall<webrtc::RtpSenderBase::GetParametersInternalWithAllLayers(void)::$_1,webrtc::RtpParameters,void>(webrtc::RtpSenderBase::GetParametersInternalWithAllLayers(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  std::string v2[7];

  (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(**(_QWORD **)(a1 + 8) + 296)
                                                                    + 152))(v2, *(_QWORD *)(**(_QWORD **)(a1 + 8) + 296), *(unsigned int *)(**(_QWORD **)(a1 + 8) + 40));
  webrtc::RtpParameters::operator=(*(std::string **)a1, v2);
  webrtc::RtpParameters::~RtpParameters((void **)&v2[0].__r_.__value_.__l.__data_);
}

void _ZZN6webrtc13RtpSenderBase21SetParametersInternalERKNS_13RtpParametersEN4absl12AnyInvocableIFvNS_8RTCErrorEOEEEbEN3__1clEv(uint64_t a1)
{
  uint64_t v2;
  const webrtc::RtpParameters *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  __int16 v39;
  uint64_t v40;
  std::string *v41;
  __int128 v42;
  __int16 v43;
  void (*v44)(uint64_t, void **);
  int v45;
  void (*v46)(uint64_t, void **);
  void *v47;
  int v48;
  int v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  int v54;
  int v55;
  std::string *v56;
  _BYTE v57[16];
  __int128 v58;
  void *v59[3];
  char v60;
  int v61;
  std::string v62;
  _DWORD v63[2];
  int v64;
  std::string v65;
  _DWORD v66[2];
  int v67;
  std::string __p;
  _DWORD v69[2];
  void *v70[12];
  uint64_t v71;
  uint64_t v72;
  std::string v73;
  void *v74;
  std::string v75;
  _DWORD v76[16];
  char *v77;
  char *v78;
  unint64_t v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 200);
  v3 = (const webrtc::RtpParameters *)(a1 + 32);
  webrtc::RtpParameters::RtpParameters(&v73, (const webrtc::RtpParameters *)(a1 + 32));
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v2 + 296) + 152))(v70, *(_QWORD *)(v2 + 296), *(unsigned int *)(v2 + 40));
  v8 = *(_QWORD *)(v2 + 360);
  v9 = *(_QWORD *)(v2 + 368);
  if (v8 != v9)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3)
        - 0xF0F0F0F0F0F0F0FLL * ((uint64_t)(*(_QWORD *)(a1 + 136) - *(_QWORD *)(a1 + 128)) >> 4);
    if (v10 != 0xF0F0F0F0F0F0F0F1 * ((v72 - v71) >> 4))
    {
      v56 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc", 78, "parameters.encodings.size() + removed_rids.size() == all_layers.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v4, v5, v6, v7, v10);
      _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc13RtpSenderBase21SetParametersInternalERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEbE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(v56);
      return;
    }
    webrtc::RtpParameters::RtpParameters((std::string *)&v74, v3);
    v11 = v78;
    v12 = v77;
    while (v11 != v12)
      webrtc::RtpEncodingParameters::~RtpEncodingParameters((webrtc::RtpEncodingParameters *)(v11 - 272));
    v78 = v12;
    v13 = v71;
    v14 = v72;
    if (v71 != v72)
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(v2 + 360);
        v17 = *(_QWORD *)(v2 + 368);
        if (v16 != v17)
        {
          v18 = *(char *)(v13 + 151);
          if (v18 >= 0)
            v19 = *(unsigned __int8 *)(v13 + 151);
          else
            v19 = *(_QWORD *)(v13 + 136);
          if (v18 >= 0)
            v20 = (unsigned __int8 *)(v13 + 128);
          else
            v20 = *(unsigned __int8 **)(v13 + 128);
          while (1)
          {
            v21 = *(unsigned __int8 *)(v16 + 23);
            if ((v21 & 0x80u) == 0)
              v22 = *(unsigned __int8 *)(v16 + 23);
            else
              v22 = *(_QWORD *)(v16 + 8);
            if (v22 == v19)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v16, v20, *(_QWORD *)(v16 + 8)))
                  break;
              }
              else
              {
                if (!*(_BYTE *)(v16 + 23))
                  break;
                v23 = 0;
                while (*(unsigned __int8 *)(v16 + v23) == v20[v23])
                {
                  if (v21 == ++v23)
                    goto LABEL_27;
                }
              }
            }
            v16 += 24;
            if (v16 == v17)
              goto LABEL_33;
          }
        }
LABEL_27:
        if (v16 == v17)
        {
LABEL_33:
          v29 = *(_QWORD *)(a1 + 128);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a1 + 136) - v29) >> 4) <= v15)
            goto LABEL_97;
          v30 = v29 + 272 * v15;
          if ((unint64_t)v12 >= v79)
          {
            v12 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>((void **)&v77, v30);
          }
          else
          {
            if (!v12)
LABEL_97:
              __break(1u);
            *(_OWORD *)v12 = *(_OWORD *)v30;
            v31 = *(_OWORD *)(v30 + 16);
            v32 = *(_OWORD *)(v30 + 32);
            v33 = *(_OWORD *)(v30 + 48);
            *(_OWORD *)(v12 + 57) = *(_OWORD *)(v30 + 57);
            *((_OWORD *)v12 + 2) = v32;
            *((_OWORD *)v12 + 3) = v33;
            *((_OWORD *)v12 + 1) = v31;
            v12[80] = 0;
            v34 = (std::string *)(v12 + 80);
            v12[104] = 0;
            if (*(_BYTE *)(v30 + 104))
            {
              if (*(char *)(v30 + 103) < 0)
              {
                std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v30 + 80), *(_QWORD *)(v30 + 88));
              }
              else
              {
                v35 = *(_OWORD *)(v30 + 80);
                *((_QWORD *)v12 + 12) = *(_QWORD *)(v30 + 96);
                *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
              }
              v12[104] = 1;
            }
            v40 = *(_QWORD *)(v30 + 112);
            *(_QWORD *)(v12 + 117) = *(_QWORD *)(v30 + 117);
            *((_QWORD *)v12 + 14) = v40;
            v41 = (std::string *)(v12 + 128);
            if (*(char *)(v30 + 151) < 0)
            {
              std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)(v30 + 128), *(_QWORD *)(v30 + 136));
            }
            else
            {
              v42 = *(_OWORD *)(v30 + 128);
              *((_QWORD *)v12 + 18) = *(_QWORD *)(v30 + 144);
              *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
            }
            v43 = *(_WORD *)(v30 + 152);
            v12[160] = 0;
            *((_WORD *)v12 + 76) = v43;
            v12[264] = 0;
            if (*(_BYTE *)(v30 + 264))
            {
              webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v12 + 160), (const webrtc::RtpCodec *)(v30 + 160));
              v12[264] = 1;
            }
            v12 += 272;
          }
          ++v15;
        }
        else if ((unint64_t)v12 >= v79)
        {
          v12 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters const&>((void **)&v77, v13);
        }
        else
        {
          if (!v12)
            goto LABEL_97;
          *(_OWORD *)v12 = *(_OWORD *)v13;
          v24 = *(_OWORD *)(v13 + 16);
          v25 = *(_OWORD *)(v13 + 32);
          v26 = *(_OWORD *)(v13 + 48);
          *(_OWORD *)(v12 + 57) = *(_OWORD *)(v13 + 57);
          *((_OWORD *)v12 + 2) = v25;
          *((_OWORD *)v12 + 3) = v26;
          *((_OWORD *)v12 + 1) = v24;
          v12[80] = 0;
          v27 = (std::string *)(v12 + 80);
          v12[104] = 0;
          if (*(_BYTE *)(v13 + 104))
          {
            if (*(char *)(v13 + 103) < 0)
            {
              std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(v13 + 80), *(_QWORD *)(v13 + 88));
            }
            else
            {
              v28 = *(_OWORD *)(v13 + 80);
              *((_QWORD *)v12 + 12) = *(_QWORD *)(v13 + 96);
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            }
            v12[104] = 1;
          }
          v36 = *(_QWORD *)(v13 + 112);
          *(_QWORD *)(v12 + 117) = *(_QWORD *)(v13 + 117);
          *((_QWORD *)v12 + 14) = v36;
          v37 = (std::string *)(v12 + 128);
          if (*(char *)(v13 + 151) < 0)
          {
            std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)(v13 + 128), *(_QWORD *)(v13 + 136));
          }
          else
          {
            v38 = *(_OWORD *)(v13 + 128);
            *((_QWORD *)v12 + 18) = *(_QWORD *)(v13 + 144);
            *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          }
          v39 = *(_WORD *)(v13 + 152);
          v12[160] = 0;
          *((_WORD *)v12 + 76) = v39;
          v12[264] = 0;
          if (*(_BYTE *)(v13 + 264))
          {
            webrtc::RtpCodec::RtpCodec((webrtc::RtpCodec *)(v12 + 160), (const webrtc::RtpCodec *)(v13 + 160));
            v12[264] = 1;
          }
          v12 += 272;
        }
        v78 = v12;
        v13 += 272;
      }
      while (v13 != v14);
    }
    webrtc::RtpParameters::operator=(&v73, (std::string *)&v74);
    webrtc::RtpParameters::~RtpParameters(&v74);
  }
  LOBYTE(v74) = 0;
  v80 = 0;
  cricket::CheckRtpParametersInvalidModificationAndValues((cricket::Codec *)&v74, (uint64_t)v70, (unint64_t)&v73, 0, 0, (uint64_t)&v67);
  if (v80)
    cricket::Codec::~Codec((cricket::Codec *)&v74);
  if (v67)
  {
    v64 = v67;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v66[0] = v69[0];
      *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)((char *)v69 + 3);
      v44 = *(void (**)(uint64_t, void **))(a1 + 24);
      if (v44)
      {
LABEL_63:
        LODWORD(v74) = v64;
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v75, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
          v44 = *(void (**)(uint64_t, void **))(a1 + 24);
        }
        else
        {
          v75 = v65;
        }
        v76[0] = v66[0];
        *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)((char *)v66 + 3);
        v44(a1, &v74);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v75.__r_.__value_.__l.__data_);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(1, a1, a1);
        *(_QWORD *)(a1 + 16) = absl::internal_any_invocable::EmptyManager;
        *(_QWORD *)(a1 + 24) = 0;
        v47 = (void *)v65.__r_.__value_.__r.__words[0];
        v49 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
        memset(&v65, 0, sizeof(v65));
        if ((v49 & 0x80000000) == 0)
          goto LABEL_94;
LABEL_79:
        operator delete(v47);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        {
          v50 = (void *)v65.__r_.__value_.__r.__words[0];
LABEL_93:
          operator delete(v50);
          goto LABEL_94;
        }
        goto LABEL_94;
      }
    }
    else
    {
      v65 = __p;
      v66[0] = v69[0];
      *(_DWORD *)((char *)v66 + 3) = *(_DWORD *)((char *)v69 + 3);
      v44 = *(void (**)(uint64_t, void **))(a1 + 24);
      if (v44)
        goto LABEL_63;
    }
    v47 = (void *)v65.__r_.__value_.__r.__words[0];
    v48 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
    memset(&v65, 0, sizeof(v65));
    if ((v48 & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_79;
  }
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v2 + 264))(&v74, v2, &v73);
  v45 = (int)v74;
  v67 = (int)v74;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v45 = v67;
  }
  __p = v75;
  v69[0] = v76[0];
  *(_DWORD *)((char *)v69 + 3) = *(_DWORD *)((char *)v76 + 3);
  if (!v45)
  {
    v51 = *(_QWORD *)(v2 + 296);
    v52 = *(unsigned int *)(v2 + 40);
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(a1 + 16))(0, a1, v57);
    v58 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, std::string *, _BYTE *))(*(_QWORD *)v51 + 128))(v59, v51, v52, &v73, v57);
    if (v60 < 0)
      operator delete(v59[1]);
    ((void (*)(uint64_t, _BYTE *, _BYTE *))v58)(1, v57, v57);
    goto LABEL_94;
  }
  v61 = v45;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v62 = __p;
    v63[0] = v69[0];
    *(_DWORD *)((char *)v63 + 3) = *(_DWORD *)((char *)v69 + 3);
    v46 = *(void (**)(uint64_t, void **))(a1 + 24);
    if (v46)
      goto LABEL_70;
LABEL_85:
    v53 = (void *)v62.__r_.__value_.__r.__words[0];
    v54 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
    memset(&v62, 0, sizeof(v62));
    if ((v54 & 0x80000000) == 0)
      goto LABEL_94;
    goto LABEL_91;
  }
  std::string::__init_copy_ctor_external(&v62, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  v63[0] = v69[0];
  *(_DWORD *)((char *)v63 + 3) = *(_DWORD *)((char *)v69 + 3);
  v46 = *(void (**)(uint64_t, void **))(a1 + 24);
  if (!v46)
    goto LABEL_85;
LABEL_70:
  LODWORD(v74) = v61;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v75, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    v46 = *(void (**)(uint64_t, void **))(a1 + 24);
  }
  else
  {
    v75 = v62;
  }
  v76[0] = v63[0];
  *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)((char *)v63 + 3);
  v46(a1, &v74);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 16))(1, a1, a1);
  *(_QWORD *)(a1 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 24) = 0;
  v53 = (void *)v62.__r_.__value_.__r.__words[0];
  v55 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  memset(&v62, 0, sizeof(v62));
  if ((v55 & 0x80000000) == 0)
    goto LABEL_94;
LABEL_91:
  operator delete(v53);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = (void *)v62.__r_.__value_.__r.__words[0];
    goto LABEL_93;
  }
LABEL_94:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  webrtc::RtpParameters::~RtpParameters(v70);
  webrtc::RtpParameters::~RtpParameters((void **)&v73.__r_.__value_.__l.__data_);
}

void _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc13RtpSenderBase21SetParametersInternalERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEbE3__1JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t *a1)
{
  _ZZN6webrtc13RtpSenderBase21SetParametersInternalERKNS_13RtpParametersEN4absl12AnyInvocableIFvNS_8RTCErrorEOEEEbEN3__1clEv(*a1);
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc13RtpSenderBase21SetParametersInternalERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEbE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESE_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      webrtc::RtpParameters::~RtpParameters((void **)(v3 + 32));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, v3, v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

__n128 rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCError rtc::Thread::BlockingCall<webrtc::RtpSenderBase::SetParametersInternalWithAllLayers(webrtc::RtpParameters const&)::$_1,webrtc::RTCError,void>(webrtc::RtpSenderBase::SetParametersInternalWithAllLayers(webrtc::RtpParameters const&)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __n128 result;
  int v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  _DWORD v13[2];
  _BYTE v14[16];
  void (*v15)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v16;
  std::string v17;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 8);
  webrtc::RtpParameters::RtpParameters(&v17, *(const webrtc::RtpParameters **)v2);
  v4 = *(_QWORD *)(v3 + 296);
  v5 = *(unsigned int *)(v3 + 40);
  v15 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, std::string *, _BYTE *))(*(_QWORD *)v4 + 128))(&v10, v4, v5, &v17, v14);
  v15(1, v14, v14);
  webrtc::RtpParameters::~RtpParameters((void **)&v17.__r_.__value_.__l.__data_);
  v6 = *a1;
  *(_DWORD *)v6 = v10;
  v7 = (void **)(v6 + 8);
  if (*(char *)(v6 + 31) < 0)
    operator delete(*v7);
  result = v11;
  *(_QWORD *)(v6 + 24) = v12;
  *(__n128 *)v7 = result;
  v9 = v13[0];
  *(_DWORD *)(v6 + 35) = *(_DWORD *)((char *)v13 + 3);
  *(_DWORD *)(v6 + 32) = v9;
  return result;
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RtpSenderBase::SetParameters(webrtc::RtpParameters const&)::$_1 &&,webrtc::RTCError>(uint64_t *a1, int *a2)
{
  int v3;
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  size_t v8;
  int v9;
  uint64_t v10;
  int v11;
  void *__p[2];
  uint64_t v13;
  _DWORD v14[2];

  v11 = *a2;
  v3 = v11;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 2);
  v13 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14[0] = a2[8];
  *(_DWORD *)((char *)v14 + 3) = *(int *)((char *)a2 + 35);
  v4 = a1[1];
  *(_DWORD *)v4 = v3;
  v5 = (std::string *)(v4 + 8);
  if ((int *)v4 != &v11)
  {
    if (*(char *)(v4 + 31) < 0)
    {
      if (v13 >= 0)
        v7 = __p;
      else
        v7 = (void **)__p[0];
      if (v13 >= 0)
        v8 = HIBYTE(v13);
      else
        v8 = (size_t)__p[1];
      std::string::__assign_no_alias<false>(v5, (const std::string::value_type *)v7, v8);
    }
    else if (v13 < 0)
    {
      std::string::__assign_no_alias<true>(v5, (char *)__p[0], (size_t)__p[1]);
    }
    else
    {
      v6 = *(_OWORD *)__p;
      *(_QWORD *)(v4 + 24) = v13;
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
    }
  }
  v9 = v14[0];
  *(_DWORD *)(v4 + 35) = *(_DWORD *)((char *)v14 + 3);
  *(_DWORD *)(v4 + 32) = v9;
  v10 = *a1;
  pthread_mutex_lock((pthread_mutex_t *)v10);
  *(_BYTE *)(v10 + 113) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v10 + 64));
  pthread_mutex_unlock((pthread_mutex_t *)v10);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc13RtpSenderBase18SetParametersAsyncERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1JS8_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t **a1, int *a2)
{
  uint64_t *v2;
  int v3;
  std::string::value_type *v4;
  std::string::size_type v5;
  int v6;
  uint64_t v7;
  void (*v8)(uint64_t, int *);
  void *v9;
  int v10;
  int v11;
  _BYTE v12[7];
  _BYTE v13[7];
  std::string v14;
  _DWORD v15[2];
  int v16;
  std::string __p;
  _DWORD v18[2];

  v2 = *a1;
  v3 = *a2;
  v4 = (std::string::value_type *)*((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  *(_DWORD *)v13 = a2[6];
  *(_DWORD *)&v13[3] = *(int *)((char *)a2 + 27);
  v6 = *((char *)a2 + 31);
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_DWORD *)v12 = a2[8];
  *(_DWORD *)&v12[3] = *(int *)((char *)a2 + 35);
  v7 = *v2;
  if (*(_BYTE *)(*v2 + 352))
  {
    if (*(char *)(v7 + 351) < 0)
      operator delete(*(void **)(v7 + 328));
    *(_BYTE *)(v7 + 352) = 0;
  }
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&v14, v4, v5);
    v15[0] = *(_DWORD *)v12;
    *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)&v12[3];
    v8 = (void (*)(uint64_t, int *))v2[4];
    if (!v8)
    {
LABEL_7:
      v9 = (void *)v14.__r_.__value_.__r.__words[0];
      v10 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
      memset(&v14, 0, sizeof(v14));
      if ((v10 & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
    v14.__r_.__value_.__l.__size_ = v5;
    LODWORD(v14.__r_.__value_.__r.__words[2]) = *(_DWORD *)v13;
    *(_DWORD *)((char *)&v14.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v13[3];
    *((_BYTE *)&v14.__r_.__value_.__s + 23) = v6;
    v15[0] = *(_DWORD *)v12;
    *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)&v12[3];
    v8 = (void (*)(uint64_t, int *))v2[4];
    if (!v8)
      goto LABEL_7;
  }
  v16 = v3;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    v8 = (void (*)(uint64_t, int *))v2[4];
  }
  else
  {
    __p = v14;
  }
  v18[0] = v15[0];
  *(_DWORD *)((char *)v18 + 3) = *(_DWORD *)((char *)v15 + 3);
  v8((uint64_t)(v2 + 1), &v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  ((void (*)(uint64_t, uint64_t *, uint64_t *))v2[3])(1, v2 + 1, v2 + 1);
  v2[3] = (uint64_t)absl::internal_any_invocable::EmptyManager;
  v2[4] = 0;
  v9 = (void *)v14.__r_.__value_.__r.__words[0];
  v11 = SHIBYTE(v14.__r_.__value_.__r.__words[2]);
  memset(&v14, 0, sizeof(v14));
  if ((v11 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_20:
    operator delete(v4);
    return;
  }
LABEL_16:
  operator delete(v9);
  if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_17;
  operator delete(v14.__r_.__value_.__l.__data_);
  if (v6 < 0)
    goto LABEL_20;
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc13RtpSenderBase18SetParametersAsyncERKNS2_13RtpParametersENS_12AnyInvocableIFvNS2_8RTCErrorEOEEEE3__1EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESE_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(1, v3 + 8, v3 + 8);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::SignalingThreadCallback &&,webrtc::RTCError>(webrtc::_anonymous_namespace_::SignalingThreadCallback **a1, const webrtc::RTCError *a2)
{
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::SignalingThreadCallback>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  rtc::webrtc_checks_impl *v4;
  _WORD v5[19];
  char v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (!*(_QWORD *)(v3 + 32))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 24))(1, v3 + 8, v3 + 8);
        JUMPOUT(0x20BD0ADECLL);
      }
      *(_DWORD *)v5 = 10;
      v6 = 0;
      memset(&v5[4], 0, 29);
      webrtc::RTCError::~RTCError((void **)v5);
      rtc::webrtc_checks_impl::UnreachableCodeReached(v4);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetSsrc(unsigned int)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const std::string::value_type *v11;
  size_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  const std::string::value_type *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  std::string *v31;
  char **v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  std::string *v39;
  _BYTE v40[16];
  void (*v41)(uint64_t, _BYTE *, _BYTE *);
  uint64_t v42;
  void *v43[3];
  char v44;
  void *v45[12];
  unint64_t v46;
  uint64_t v47;
  int v48;
  char v49;

  v1 = *a1;
  (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*a1 + 296) + 152))(v45, *(_QWORD *)(*a1 + 296), *(unsigned int *)(*a1 + 40));
  v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v47 - v46) >> 4);
  v7 = *(_QWORD *)(v1 + 200);
  v8 = *(_QWORD *)(v1 + 208);
  if (v6 < 0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 4))
  {
LABEL_44:
    v39 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtp_sender.cc", 490, "current_parameters.encodings.size() >= init_parameters_.encodings.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v2, v3, v4, v5, v6);
    rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_1>((uint64_t)v39);
  }
  else
  {
    if (v8 != v7)
    {
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v6 = v46;
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v47 - v46) >> 4) <= v10
          || (v13 = v7 + v9,
              v14 = *(_DWORD *)(v46 + v9),
              *(_BYTE *)(v13 + 4) = *(_BYTE *)(v46 + v9 + 4),
              *(_DWORD *)v13 = v14,
              v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v47 - v46) >> 4),
              v6 <= v10)
          || (v15 = *(_QWORD *)(v1 + 200), v6 = 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 208) - v15) >> 4), v6 <= v10))
        {
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        if (v15 == v46)
          goto LABEL_27;
        v6 = v46 + v9 + 128;
        v16 = v15 + v9;
        v17 = (std::string *)(v16 + 128);
        v18 = *(char *)(v16 + 151);
        v19 = *(_BYTE *)(v46 + v9 + 151);
        if (v18 < 0)
          break;
        if ((*(_BYTE *)(v46 + v9 + 151) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v17, *(char **)v6, *(_QWORD *)(v46 + v9 + 136));
          v21 = *(_QWORD *)(v1 + 200);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 208) - v21) >> 4) <= v10)
            goto LABEL_43;
        }
        else
        {
          v20 = *(_OWORD *)v6;
          v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v46 + v9 + 144);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v20;
          v21 = *(_QWORD *)(v1 + 200);
          if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 208) - v21) >> 4) <= v10)
            goto LABEL_43;
        }
LABEL_28:
        v24 = v46;
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v47 - v46) >> 4) <= v10)
          goto LABEL_43;
        v25 = v21 + v9;
        v26 = v46 + v9;
        *(_OWORD *)v26 = *(_OWORD *)(v21 + v9);
        v27 = *(_OWORD *)(v21 + v9 + 16);
        v28 = *(_OWORD *)(v21 + v9 + 32);
        v29 = *(_OWORD *)(v21 + v9 + 48);
        *(_OWORD *)(v26 + 57) = *(_OWORD *)(v21 + v9 + 57);
        *(_OWORD *)(v26 + 32) = v28;
        *(_OWORD *)(v26 + 48) = v29;
        *(_OWORD *)(v26 + 16) = v27;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v24 + v9 + 80), (std::string *)(v21 + v9 + 80));
        v30 = *(_QWORD *)(v21 + v9 + 112);
        *(_QWORD *)(v26 + 117) = *(_QWORD *)(v21 + v9 + 117);
        *(_QWORD *)(v26 + 112) = v30;
        if (v24 != v21)
        {
          v31 = (std::string *)(v26 + 128);
          v32 = (char **)(v25 + 128);
          v33 = *(_BYTE *)(v21 + v9 + 151);
          if (*(char *)(v26 + 151) < 0)
          {
            if (v33 >= 0)
              v11 = (const std::string::value_type *)(v25 + 128);
            else
              v11 = *v32;
            if (v33 >= 0)
              v12 = *(unsigned __int8 *)(v21 + v9 + 151);
            else
              v12 = *(_QWORD *)(v21 + v9 + 136);
            std::string::__assign_no_alias<false>(v31, v11, v12);
          }
          else if ((*(_BYTE *)(v21 + v9 + 151) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v31, *v32, *(_QWORD *)(v21 + v9 + 136));
          }
          else
          {
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v26 + 144) = *(_QWORD *)(v25 + 144);
            *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v34;
          }
        }
        *(_WORD *)(v26 + 152) = *(_WORD *)(v21 + v9 + 152);
        std::__optional_storage_base<webrtc::RtpCodec,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<webrtc::RtpCodec,false> const&>((webrtc::RtpCodec *)(v26 + 160), (webrtc::RtpCodec *)(v21 + v9 + 160));
        ++v10;
        v7 = *(_QWORD *)(v1 + 200);
        v9 += 272;
        if (v10 >= 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 208) - v7) >> 4))
          goto LABEL_36;
      }
      if (v19 >= 0)
        v22 = (const std::string::value_type *)(v46 + v9 + 128);
      else
        v22 = *(const std::string::value_type **)v6;
      if (v19 >= 0)
        v23 = *(unsigned __int8 *)(v46 + v9 + 151);
      else
        v23 = *(_QWORD *)(v46 + v9 + 136);
      std::string::__assign_no_alias<false>(v17, v22, v23);
LABEL_27:
      v21 = *(_QWORD *)(v1 + 200);
      if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v1 + 208) - v21) >> 4) <= v10)
        goto LABEL_43;
      goto LABEL_28;
    }
LABEL_36:
    v48 = *(_DWORD *)(v1 + 264);
    v49 = *(_BYTE *)(v1 + 268);
    v35 = *(_QWORD *)(v1 + 296);
    v36 = *(unsigned int *)(v1 + 40);
    v41 = (void (*)(uint64_t, _BYTE *, _BYTE *))absl::internal_any_invocable::EmptyManager;
    v42 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void **, _BYTE *))(*(_QWORD *)v35 + 128))(v43, v35, v36, v45, v40);
    if (v44 < 0)
      operator delete(v43[1]);
    v41(1, v40, v40);
    v38 = *(_QWORD *)(v1 + 200);
    for (i = *(_QWORD *)(v1 + 208);
          i != v38;
    *(_QWORD *)(v1 + 208) = v38;
    if (*(_BYTE *)(v1 + 268))
      *(_BYTE *)(v1 + 268) = 0;
    webrtc::RtpParameters::~RtpParameters(v45);
  }
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RtpSenderBase::SetFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_1>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (***v3)(_QWORD);
  uint64_t result;
  void (***v5)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 296);
  v2 = *(unsigned int *)(*(_QWORD *)a1 + 40);
  v3 = *(void (****)(_QWORD))(*(_QWORD *)a1 + 392);
  v5 = v3;
  if (v3)
    (**v3)(v3);
  (*(void (**)(uint64_t, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v1 + 136))(v1, v2, &v5);
  result = (uint64_t)v5;
  if (v5)
    return ((uint64_t (*)(_QWORD))(*v5)[1])(v5);
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::AudioRtpSender>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24C0BD248;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = &unk_24C0BD448;
  *(_QWORD *)(a1 + 24) = &unk_24C0BD470;
  v3 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 424);
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
    *(_BYTE *)(v5 + 4) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  if (*(_BYTE *)(a1 + 52))
  {
    v6 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v10 = *(_QWORD *)(a1 + 312);
  if (v10)
  {
    (**(void (***)(_QWORD))v10)(*(_QWORD *)(a1 + 312));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 88))(v10, *(_QWORD *)(a1 + 448));
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8) + 8))(*(_QWORD *)(a1 + 312) + 8, v3);
    if (*(_QWORD *)(a1 + 312))
    {
      if (*(_DWORD *)(a1 + 48))
      {
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
      }
    }
  }
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 52) = 1;
  v6 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v6)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 432);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 424);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  webrtc::RtpSenderBase::~RtpSenderBase(v2);
  return a1;
}

void rtc::RefCountedObject<webrtc::AudioRtpSender>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &off_24C0BD248;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = &unk_24C0BD448;
  *(_QWORD *)(a1 + 24) = &unk_24C0BD470;
  v3 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 424);
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
    *(_BYTE *)(v5 + 4) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  if (*(_BYTE *)(a1 + 52))
  {
    v6 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (!v6)
      goto LABEL_6;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 312);
    if (v9)
    {
      (**(void (***)(_QWORD))v9)(*(_QWORD *)(a1 + 312));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 88))(v9, *(_QWORD *)(a1 + 448));
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 8) + 8))(*(_QWORD *)(a1 + 312) + 8, v3);
      if (*(_QWORD *)(a1 + 312))
      {
        if (*(_DWORD *)(a1 + 48))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
        }
      }
    }
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    *(_BYTE *)(a1 + 52) = 1;
    v6 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (!v6)
    {
LABEL_6:
      v7 = *(_QWORD *)(a1 + 432);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = *(_QWORD *)(a1 + 424);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      webrtc::RtpSenderBase::~RtpSenderBase(v2);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  goto LABEL_6;
}

uint64_t rtc::RefCountedObject<webrtc::AudioRtpSender>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 456);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioRtpSender>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 114;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

BOOL rtc::RefCountedObject<webrtc::AudioRtpSender>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 456));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpSender>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 448);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpSender>::Release(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(a1 + 448);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (v2 == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 24))(a1 - 8);
  return v2 != 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpSender>::~RefCountedObject(webrtc::RtpSenderBase *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this - 1) = &off_24C0BD248;
  *(_QWORD *)this = &unk_24C0BD2D0;
  *((_QWORD *)this + 1) = &unk_24C0BD448;
  *((_QWORD *)this + 2) = &unk_24C0BD470;
  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 52);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
    *(_BYTE *)(v4 + 4) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (*((_BYTE *)this + 44))
  {
    v5 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = 0;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *((_QWORD *)this + 38);
  if (v8)
  {
    (**(void (***)(_QWORD))v8)(*((_QWORD *)this + 38));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(v8, *((_QWORD *)this + 55));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(*((_QWORD *)this + 38) + 8) + 8))(*((_QWORD *)this + 38) + 8, v2);
    if (*((_QWORD *)this + 38))
    {
      if (*((_DWORD *)this + 10))
      {
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 320))(this);
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 352))(this);
      }
    }
  }
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_BYTE *)this + 44) = 1;
  v5 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v5)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
LABEL_6:
  v6 = *((_QWORD *)this + 53);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 52);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  webrtc::RtpSenderBase::~RtpSenderBase(this);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this - 1) = &off_24C0BD248;
  *(_QWORD *)this = &unk_24C0BD2D0;
  *((_QWORD *)this + 1) = &unk_24C0BD448;
  *((_QWORD *)this + 2) = &unk_24C0BD470;
  v2 = (char *)this + 16;
  v3 = *((_QWORD *)this + 52);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
    *(_BYTE *)(v4 + 4) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (*((_BYTE *)this + 44))
  {
    v5 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = 0;
    if (!v5)
      goto LABEL_6;
  }
  else
  {
    v8 = *((_QWORD *)this + 38);
    if (v8)
    {
      (**(void (***)(_QWORD))v8)(*((_QWORD *)this + 38));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(v8, *((_QWORD *)this + 55));
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(*((_QWORD *)this + 38) + 8) + 8))(*((_QWORD *)this + 38) + 8, v2);
      if (*((_QWORD *)this + 38))
      {
        if (*((_DWORD *)this + 10))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 320))(this);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 352))(this);
        }
      }
    }
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 48) = 0;
    *((_BYTE *)this + 44) = 1;
    v5 = *((_QWORD *)this + 55);
    *((_QWORD *)this + 55) = 0;
    if (!v5)
    {
LABEL_6:
      v6 = *((_QWORD *)this + 53);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *((_QWORD *)this + 52);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      webrtc::RtpSenderBase::~RtpSenderBase(this);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  goto LABEL_6;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioRtpSender>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 - 16) = &off_24C0BD248;
  *(_QWORD *)(a1 - 8) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0BD448;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD470;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 408);
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
    *(_BYTE *)(v5 + 4) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    v6 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a1 + 296);
  if (v9)
  {
    (**(void (***)(_QWORD))v9)(*(_QWORD *)(a1 + 296));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 88))(v9, *(_QWORD *)(a1 + 432));
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8) + 8))(*(_QWORD *)(a1 + 296) + 8, v3);
    if (*(_QWORD *)(a1 + 296))
    {
      if (*(_DWORD *)(a1 + 32))
      {
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
      }
    }
  }
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 36) = 1;
  v6 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = 0;
  if (v6)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 416);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 408);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  webrtc::RtpSenderBase::~RtpSenderBase(v2);
}

{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 - 16) = &off_24C0BD248;
  *(_QWORD *)(a1 - 8) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0BD448;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD470;
  v3 = a1 + 8;
  v4 = *(_QWORD *)(a1 + 408);
  v5 = *(_QWORD *)(v4 + 72);
  if (v5)
    *(_BYTE *)(v5 + 4) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    v6 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;
    if (!v6)
      goto LABEL_6;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 296);
    if (v9)
    {
      (**(void (***)(_QWORD))v9)(*(_QWORD *)(a1 + 296));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 88))(v9, *(_QWORD *)(a1 + 432));
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 8) + 8))(*(_QWORD *)(a1 + 296) + 8, v3);
      if (*(_QWORD *)(a1 + 296))
      {
        if (*(_DWORD *)(a1 + 32))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
        }
      }
    }
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 36) = 1;
    v6 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = 0;
    if (!v6)
    {
LABEL_6:
      v7 = *(_QWORD *)(a1 + 416);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = *(_QWORD *)(a1 + 408);
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      webrtc::RtpSenderBase::~RtpSenderBase(v2);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  goto LABEL_6;
}

{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 24) = &off_24C0BD248;
  *(_QWORD *)(a1 - 16) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 - 16);
  *(_QWORD *)(a1 - 8) = &unk_24C0BD448;
  *(_QWORD *)a1 = &unk_24C0BD470;
  v3 = *(_QWORD *)(a1 + 400);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
    *(_BYTE *)(v4 + 4) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    v5 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(_QWORD *)(a1 + 288);
  if (v8)
  {
    (**(void (***)(_QWORD))v8)(*(_QWORD *)(a1 + 288));
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(v8, *(_QWORD *)(a1 + 424));
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8) + 8))(*(_QWORD *)(a1 + 288) + 8, a1);
    if (*(_QWORD *)(a1 + 288))
    {
      if (*(_DWORD *)(a1 + 24))
      {
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
        (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
      }
    }
  }
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 28) = 1;
  v5 = *(_QWORD *)(a1 + 424);
  *(_QWORD *)(a1 + 424) = 0;
  if (v5)
LABEL_5:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
LABEL_6:
  v6 = *(_QWORD *)(a1 + 408);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 400);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  webrtc::RtpSenderBase::~RtpSenderBase(v2);
}

{
  webrtc::RtpSenderBase *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 - 24) = &off_24C0BD248;
  *(_QWORD *)(a1 - 16) = &unk_24C0BD2D0;
  v2 = (webrtc::RtpSenderBase *)(a1 - 16);
  *(_QWORD *)(a1 - 8) = &unk_24C0BD448;
  *(_QWORD *)a1 = &unk_24C0BD470;
  v3 = *(_QWORD *)(a1 + 400);
  v4 = *(_QWORD *)(v3 + 72);
  if (v4)
    *(_BYTE *)(v4 + 4) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    v5 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    if (!v5)
      goto LABEL_6;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 288);
    if (v8)
    {
      (**(void (***)(_QWORD))v8)(*(_QWORD *)(a1 + 288));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(v8, *(_QWORD *)(a1 + 424));
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 288) + 8) + 8))(*(_QWORD *)(a1 + 288) + 8, a1);
      if (*(_QWORD *)(a1 + 288))
      {
        if (*(_DWORD *)(a1 + 24))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 320))(v2);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v2 + 352))(v2);
        }
      }
    }
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 28) = 1;
    v5 = *(_QWORD *)(a1 + 424);
    *(_QWORD *)(a1 + 424) = 0;
    if (!v5)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 408);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(a1 + 400);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      webrtc::RtpSenderBase::~RtpSenderBase(v2);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  goto LABEL_6;
}

uint64_t rtc::RefCountedObject<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 24);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 6;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::~DtmfSenderProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = xmmword_208F16EA0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,void,webrtc::DtmfSenderObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::UnregisterObserver(uint64_t a1)
{
  rtc::Thread *v2;
  void (*v3)(_QWORD *);
  _QWORD *v4;
  TimeDelta v5;
  TimeDelta v6;
  char v8;
  char v9;
  __n128 v10;
  __n128 (*v11)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v12)(uint64_t *);
  uint64_t v13;
  __int128 v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v13 = *(_QWORD *)(a1 + 16);
  v14 = xmmword_208F16E40;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (void (*)(_QWORD *))v14;
    v4 = (_QWORD *)(v13 + (*((uint64_t *)&v14 + 1) >> 1));
    if ((BYTE8(v14) & 1) != 0)
      v3 = *(void (**)(_QWORD *))(*v4 + v14);
    v3(v4);
  }
  else
  {
    v10.n128_u64[0] = (unint64_t)&v13;
    v11 = absl::internal_any_invocable::LocalManagerTrivial;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v10, &v9, &v8);
    v11(1, &v10, &v10);
    v5.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v6.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v5, v6);
  }
  pthread_mutex_destroy(&v15);
  return pthread_cond_destroy(&v16);
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::CanInsertDtmf(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F05250;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::InsertDtmf(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  rtc::Thread *v6;
  uint64_t (*v7)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD);
  _QWORD *v8;
  uint64_t v9;
  TimeDelta v10;
  TimeDelta v11;
  int v13;
  int v14;
  int v15;
  char v16;
  char v17;
  __n128 v18;
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(uint64_t *);
  uint64_t v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int *v27;
  pthread_mutex_t v28;
  pthread_cond_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v14 = a4;
  v15 = a3;
  v13 = a5;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = xmmword_208F05270;
  v24 = a2;
  v25 = (unsigned int *)&v15;
  v26 = (unsigned int *)&v14;
  v27 = (unsigned int *)&v13;
  rtc::Event::Event((rtc::Event *)&v28, 0, 0);
  v6 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v6))
  {
    v7 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD))v22;
    v8 = (_QWORD *)(v21 + (*((uint64_t *)&v22 + 1) >> 1));
    if ((BYTE8(v22) & 1) != 0)
      v7 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(*v8 + v22);
    v9 = v7(v8, v24, *v25, *v26, *v27);
    v23 = v9;
  }
  else
  {
    v18.n128_u64[0] = (unint64_t)&v21;
    v19 = absl::internal_any_invocable::LocalManagerTrivial;
    v20 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,BOOL,std::string const&,int,int,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v6 + 8))(v6, &v18, &v17, &v16);
    v19(1, &v18, &v18);
    v10.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v11.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v28, v10, v11);
    v9 = v23 != 0;
  }
  pthread_mutex_destroy(&v28);
  pthread_cond_destroy(&v29);
  return v9;
}

void webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::tones(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  rtc::Thread *v4;
  void (*v5)(__int128 *__return_ptr, _QWORD *);
  _QWORD *v6;
  TimeDelta v7;
  TimeDelta v8;
  char v9;
  char v10;
  __int128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  __int128 __p;
  __n128 (*v17)(uint64_t, __n128 *, __n128 *);
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F16E50;
  v17 = 0;
  __p = 0uLL;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v4 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v4))
  {
    v5 = (void (*)(__int128 *__return_ptr, _QWORD *))v15;
    v6 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v5 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v6 + v15);
    v5(&v11, v6);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)__p);
    __p = v11;
    v17 = v12;
  }
  else
  {
    *(_QWORD *)&v11 = &v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,std::string>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __int128 *, char *, char *))(*(_QWORD *)v4 + 8))(v4, &v11, &v10, &v9);
    v12(1, (__n128 *)&v11, (__n128 *)&v11);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v7, v8);
  }
  *(_OWORD *)a2 = __p;
  *(_QWORD *)(a2 + 16) = v17;
  v17 = 0;
  __p = 0uLL;
  pthread_mutex_destroy(&v18);
  pthread_cond_destroy(&v19);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::duration(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F05280;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::inter_tone_gap(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F05290;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::comma_delay(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 16);
  v15 = xmmword_208F052A0;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 8);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

BOOL rtc::RefCountedObject<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 24));
  return v1 == 1;
}

_QWORD *webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::~DtmfSenderProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BD980;
  v12 = a1;
  v13 = webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[1];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[2];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderProxyWithInternal<webrtc::DtmfSenderInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,void,webrtc::DtmfSenderObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_BYTE *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::DtmfSenderInterface,BOOL,std::string const&,int,int,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  _QWORD *v8;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD *)(*a1 + 32);
  v5 = *(unsigned int **)(*a1 + 40);
  v6 = *(unsigned int **)(*a1 + 48);
  v7 = *(unsigned int **)(*a1 + 56);
  v8 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD, _QWORD))(*v8 + v2);
  *(_BYTE *)(v1 + 24) = v2(v8, v4, *v5, *v6, *v7);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 64));
  *(_BYTE *)(v1 + 177) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 128));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 64));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,std::string>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(__int128 *__return_ptr, _QWORD *);
  uint64_t v3;
  _QWORD *v4;
  void **v5;
  __int128 v7;
  uint64_t v8;

  v1 = *a1;
  v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(__int128 *__return_ptr, _QWORD *))(*v4 + v2);
  v5 = (void **)(v1 + 24);
  v2(&v7, v4);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v7;
  *(_QWORD *)(v1 + 40) = v8;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 56));
  *(_BYTE *)(v1 + 169) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 120));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 56));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::DtmfSenderInterface,int>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::CanInsertDtmf(void)::$_0,BOOL,void>(webrtc::AudioRtpSender::CanInsertDtmf(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 304);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3);
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::InsertDtmf(int,int)::$_0,BOOL,void>(webrtc::AudioRtpSender::InsertDtmf(int,int)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  unsigned int **v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(unsigned int ***)(a1 + 8);
  v3 = *v2;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*v2 + 38) + 24))(*((_QWORD *)*v2 + 38));
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 216))(v4, v3[12], *v2[1], *v2[2]);
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::SetSend(void)::$_1,BOOL,void>(webrtc::AudioRtpSender::SetSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = *v2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 304) + 24))(*(_QWORD *)(*v2 + 304));
  v5 = *(_QWORD *)(v3 + 448);
  if (v5)
    v6 = v5 + 8;
  else
    v6 = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v4 + 200))(v4, *(unsigned int *)(v3 + 48), *(unsigned __int8 *)v2[1], v2[2], v6);
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::AudioRtpSender::ClearSend(void)::$_1,BOOL,void>(webrtc::AudioRtpSender::ClearSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *v2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 304) + 24))(*(_QWORD *)(*v2 + 304));
  result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 200))(v4, *(unsigned int *)(v3 + 48), 0, v2[1], 0);
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::VideoRtpSender>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 412);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpSender>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 103;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::VideoRtpSender>::~RefCountedObject(webrtc::RtpSenderBase *this)
{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0BD498;
  *((_QWORD *)this + 1) = &unk_24C0BD618;
  *((_QWORD *)this + 2) = &unk_24C0BD640;
  v2 = (char *)this + 16;
  if (*((_BYTE *)this + 44))
  {
    webrtc::RtpSenderBase::~RtpSenderBase(this);
  }
  else
  {
    v3 = *((_QWORD *)this + 38);
    if (v3)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8, v2);
      if (*((_QWORD *)this + 38))
      {
        if (*((_DWORD *)this + 10))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 320))(this);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 352))(this);
        }
      }
    }
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 48) = 0;
    *((_BYTE *)this + 44) = 1;
    webrtc::RtpSenderBase::~RtpSenderBase(this);
  }
}

{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_24C0BD498;
  *((_QWORD *)this + 1) = &unk_24C0BD618;
  *((_QWORD *)this + 2) = &unk_24C0BD640;
  v2 = (char *)this + 16;
  if (!*((_BYTE *)this + 44))
  {
    v3 = *((_QWORD *)this + 38);
    if (v3)
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8, v2);
      if (*((_QWORD *)this + 38))
      {
        if (*((_DWORD *)this + 10))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 320))(this);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)this + 352))(this);
        }
      }
    }
    *((_QWORD *)this + 37) = 0;
    *((_QWORD *)this + 48) = 0;
    *((_BYTE *)this + 44) = 1;
  }
  webrtc::RtpSenderBase::~RtpSenderBase(this);
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::VideoRtpSender>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 412));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::VideoRtpSender>::~RefCountedObject(uint64_t a1)
{
  webrtc::RtpSenderBase *v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(a1 - 8) = &unk_24C0BD498;
  v1 = (webrtc::RtpSenderBase *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0BD618;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD640;
  v2 = a1 + 8;
  if (*(_BYTE *)(a1 + 36))
  {
    webrtc::RtpSenderBase::~RtpSenderBase((webrtc::RtpSenderBase *)(a1 - 8));
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 296);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v4 + 8, v2);
      if (*(_QWORD *)(a1 + 296))
      {
        if (*(_DWORD *)(a1 + 32))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 320))(v1);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 352))(v1);
        }
      }
    }
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 36) = 1;
    webrtc::RtpSenderBase::~RtpSenderBase(v1);
  }
}

{
  webrtc::RtpSenderBase *v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(a1 - 8) = &unk_24C0BD498;
  v1 = (webrtc::RtpSenderBase *)(a1 - 8);
  *(_QWORD *)a1 = &unk_24C0BD618;
  *(_QWORD *)(a1 + 8) = &unk_24C0BD640;
  v2 = a1 + 8;
  if (!*(_BYTE *)(a1 + 36))
  {
    v4 = *(_QWORD *)(a1 + 296);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 8) + 8))(v4 + 8, v2);
      if (*(_QWORD *)(a1 + 296))
      {
        if (*(_DWORD *)(a1 + 32))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 320))(v1);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 352))(v1);
        }
      }
    }
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 376) = 0;
    *(_BYTE *)(a1 + 36) = 1;
  }
  webrtc::RtpSenderBase::~RtpSenderBase(v1);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::RtpSenderBase *v1;
  uint64_t v3;

  *(_QWORD *)(a1 - 16) = &unk_24C0BD498;
  v1 = (webrtc::RtpSenderBase *)(a1 - 16);
  *(_QWORD *)(a1 - 8) = &unk_24C0BD618;
  *(_QWORD *)a1 = &unk_24C0BD640;
  if (*(_BYTE *)(a1 + 28))
  {
    webrtc::RtpSenderBase::~RtpSenderBase((webrtc::RtpSenderBase *)(a1 - 16));
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 288);
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8, a1);
      if (*(_QWORD *)(a1 + 288))
      {
        if (*(_DWORD *)(a1 + 24))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 320))(v1);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 352))(v1);
        }
      }
    }
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 28) = 1;
    webrtc::RtpSenderBase::~RtpSenderBase(v1);
  }
}

{
  webrtc::RtpSenderBase *v1;
  uint64_t v3;

  *(_QWORD *)(a1 - 16) = &unk_24C0BD498;
  v1 = (webrtc::RtpSenderBase *)(a1 - 16);
  *(_QWORD *)(a1 - 8) = &unk_24C0BD618;
  *(_QWORD *)a1 = &unk_24C0BD640;
  if (!*(_BYTE *)(a1 + 28))
  {
    v3 = *(_QWORD *)(a1 + 288);
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 + 8) + 8))(v3 + 8, a1);
      if (*(_QWORD *)(a1 + 288))
      {
        if (*(_DWORD *)(a1 + 24))
        {
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 320))(v1);
          (*(void (**)(webrtc::RtpSenderBase *))(*(_QWORD *)v1 + 352))(v1);
        }
      }
    }
    *(_QWORD *)(a1 + 280) = 0;
    *(_QWORD *)(a1 + 368) = 0;
    *(_BYTE *)(a1 + 28) = 1;
  }
  webrtc::RtpSenderBase::~RtpSenderBase(v1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::VideoRtpSender::GenerateKeyFrame(std::vector<std::string> const&)::$_2 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 296) + 16))(*(_QWORD *)(v2 + 296));
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v3 + 208))(v3, *(unsigned int *)(v2 + 40), v1);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::VideoRtpSender::GenerateKeyFrame(std::vector<std::string> const&)::$_2>(uint64_t result, void ***a2, void ***a3)
{
  void **v3;
  void **v4;
  void **v5;
  void *v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (void **)*v3;
      if (*v3)
      {
        v5 = (void **)v3[1];
        v6 = *v3;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *v3;
        }
        v3[1] = v4;
        operator delete(v6);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<webrtc::VideoRtpSender::SetSend(void)::$_1,BOOL,void>(webrtc::VideoRtpSender::SetSend(void)::$_1 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = *v2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 296) + 16))(*(_QWORD *)(*v2 + 296));
  v5 = *(unsigned int *)(v3 + 40);
  v6 = v2[1];
  v7 = *(_QWORD *)(v3 + 304);
  if (v7)
  {
    (**(void (***)(_QWORD))v7)(*(_QWORD *)(v3 + 304));
    v8 = v7 + 16;
  }
  else
  {
    v8 = 0;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 200))(v4, v5, v6, v8);
  v10 = result;
  if (v7)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  **(_BYTE **)a1 = v10;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::VideoRtpSender::ClearSend(void)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 296) + 16))(*(_QWORD *)(*a1 + 296));
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v2 + 200))(v2, *(unsigned int *)(v1 + 40), 0, 0);
}

uint64_t webrtc::RTPSender::RTPSender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  pthread_mutexattr_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 212);
  v9 = *(_QWORD *)(a2 + 120);
  if (v9)
  {
    *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
  }
  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    *(_BYTE *)(a1 + 36) = 0;
  }
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  pthread_mutexattr_init(&v15);
  pthread_mutexattr_setpolicy_np(&v15, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 56), &v15);
  pthread_mutexattr_destroy(&v15);
  *(_BYTE *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = 1472;
  *(_BYTE *)(a1 + 157) = *(_BYTE *)(a2 + 193);
  *(_QWORD *)(a1 + 149) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v10 = (std::string *)(a1 + 184);
  if (*(char *)(a2 + 247) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 224), *(_QWORD *)(a2 + 232));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 240);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a1 + 233) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 152);
  v12 = *(_QWORD *)(a1 + 8) ^ (*(_QWORD *)(a1 + 8) >> 12);
  v13 = v12 ^ (v12 << 25) ^ ((v12 ^ (unint64_t)(v12 << 25)) >> 27);
  *(_QWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 176) = 1332534557 * v13;
  webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)a1);
  return a1;
}

void webrtc::RTPSender::UpdateHeaderSizes(webrtc::RTPSender *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  char *v62;
  int64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  char *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  int v95;
  int v96;
  int *v97;
  int v98;
  int *v99;
  webrtc::RTPSender *v100;
  int v101;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  char v111;
  webrtc::RTPSender *v112;
  uint64_t v113;
  unsigned int v114;

  v2 = 4 * *((_QWORD *)this + 30);
  v3 = *((unsigned __int8 *)this + 141);
  if (v3 <= 0xE)
    v4 = 1;
  else
    v4 = 2;
  if (*((unsigned __int8 *)this + 137) <= 0xEu)
    v5 = v4;
  else
    v5 = 2;
  v6 = v3 == 0;
  v7 = v3 != 0;
  if (v6)
    v8 = 0;
  else
    v8 = 3;
  if (v6)
    v9 = 1;
  else
    v9 = 2;
  if (*((_BYTE *)this + 137))
  {
    v4 = v5;
    v7 = v9;
    v10 = v8 + 3;
  }
  else
  {
    v10 = v8;
  }
  if (*((_BYTE *)this + 144))
  {
    ++v7;
    v10 += 2;
  }
  v11 = v10 + 3;
  if (*((_BYTE *)this + 146))
    v12 = v7 + 1;
  else
    v12 = v7;
  if (!*((_BYTE *)this + 146))
    v11 = v10;
  v13 = *((unsigned __int8 *)this + 144) > 0xEu || *((unsigned __int8 *)this + 146) > 0xEu;
  v14 = *((unsigned __int8 *)this + 152);
  if (v13 || v14 > 0xE)
    v16 = 2;
  else
    v16 = v4;
  v17 = v14 == 0;
  if (*((_BYTE *)this + 152))
    v18 = v12 + 1;
  else
    v18 = v12;
  if (v17)
    v19 = v11;
  else
    v19 = v11 + 16;
  if (*((_BYTE *)this + 149))
  {
    if (*((unsigned __int8 *)this + 149) > 0xEu)
      v16 = 2;
    v19 += 13;
    ++v18;
    v20 = v2 + 12;
LABEL_43:
    *((_QWORD *)this + 21) = v20 + ((v19 + v18 * v16 + 7) & 0xFFFFFFFC);
    v21 = *((unsigned __int8 *)this + 28);
    v22 = *((unsigned __int8 *)this + 232);
    v109 = v20;
    if (*((_BYTE *)this + 28))
      goto LABEL_44;
LABEL_48:
    if (v22)
    {
      v23 = 1;
      goto LABEL_51;
    }
LABEL_50:
    v23 = *((_BYTE *)this + 233) == 0;
    goto LABEL_51;
  }
  v20 = v2 + 12;
  if (v19)
    goto LABEL_43;
  *((_QWORD *)this + 21) = v20;
  v21 = *((unsigned __int8 *)this + 28);
  v22 = *((unsigned __int8 *)this + 232);
  v109 = v20;
  if (!*((_BYTE *)this + 28))
    goto LABEL_48;
LABEL_44:
  if (!v22)
  {
    v21 = *((_BYTE *)this + 234) == 0;
    goto LABEL_50;
  }
  v21 = 1;
  v23 = 1;
LABEL_51:
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v108 = (char *)this + 136;
  v112 = this;
  v27 = 7;
  if (*((_BYTE *)this + 16))
  {
  }
  else
  {
    v27 = 12;
  }
  v29 = &v28[v27];
  v110 = v21 | v23;
  v111 = v23 | v21 ^ 1;
  while (2)
  {
    switch(*(_DWORD *)v28)
    {
      case 0:
      case 4:
      case 6:
      case 7:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x13:
      case 0x14:
      case 0x15:
        goto LABEL_56;
      case 1:
      case 2:
      case 3:
      case 5:
      case 8:
      case 9:
      case 0x11:
      case 0x12:
        if (v25 < v26)
          goto LABEL_59;
        v30 = (v25 - v24) >> 3;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 61)
          goto LABEL_192;
        if ((v26 - v24) >> 2 > v31)
          v31 = (v26 - v24) >> 2;
        if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v31)
          goto LABEL_191;
        if (v31 >> 61)
          goto LABEL_193;
        v32 = v29;
        v33 = v1;
        v34 = v23;
        v113 = 8 * v31;
        this = (webrtc::RTPSender *)operator new(8 * v31);
        v35 = (char *)this + 8 * v30;
        *(_QWORD *)v35 = *v28;
        v36 = v35 + 8;
        if (v25 != v24)
        {
          v37 = v25 - v24 - 8;
          if (v37 < 0x168
            || (v38 = (v25 - 8 - v24) & 0xFFFFFFFFFFFFFFF8,
                (char *)this + v25 - v24 - v38 - 8 > (char *)this + v25 - v24 - 8)
            || &v25[-v38 - 8] > v25 - 8
            || (unint64_t)(v24 - (char *)this) < 0x20)
          {
            v39 = v25;
            v40 = v113;
            goto LABEL_74;
          }
          v43 = (v37 >> 3) + 1;
          v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v25[-v44];
          v35 -= v44;
          v45 = (_OWORD *)((char *)this + 8 * v30 - 16);
          v46 = v25 - 16;
          v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = *(_OWORD *)v46;
            *(v45 - 1) = *((_OWORD *)v46 - 1);
            *v45 = v48;
            v45 -= 2;
            v46 -= 32;
            v47 -= 4;
          }
          while (v47);
          v40 = v113;
          if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_74:
              v41 = *((_QWORD *)v39 - 1);
              v39 -= 8;
              *((_QWORD *)v35 - 1) = v41;
              v35 -= 8;
            }
            while (v39 != v24);
          }
          v26 = (char *)this + v40;
          if (!v24)
            goto LABEL_55;
          goto LABEL_78;
        }
        v26 = (char *)this + v113;
        if (!v24)
          goto LABEL_55;
LABEL_78:
        v42 = v26;
        operator delete(v24);
        v26 = v42;
LABEL_55:
        v25 = v36;
        v24 = v35;
        v23 = v34;
        v1 = v33;
        v29 = v32;
        goto LABEL_56;
      case 0xE:
        if (!(_DWORD)v23)
          goto LABEL_56;
        if (*((char *)v112 + 207) < 0)
        {
          if (!*((_QWORD *)v112 + 24))
            goto LABEL_56;
        }
        else if (!*((_BYTE *)v112 + 207))
        {
          goto LABEL_56;
        }
        if (v25 < v26)
          goto LABEL_59;
        v49 = v25 - v24;
        v50 = (v25 - v24) >> 3;
        v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61)
          goto LABEL_192;
        if ((v26 - v24) >> 2 > v51)
          v51 = (v26 - v24) >> 2;
        if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v51)
          goto LABEL_191;
        v114 = v23;
        if (v51 >> 61)
          goto LABEL_193;
        v52 = v25;
        v53 = 8 * v51;
        this = (webrtc::RTPSender *)operator new(8 * v51);
        v54 = (char *)this + 8 * v50;
        *(_QWORD *)v54 = *v28;
        v25 = v54 + 8;
        if (v52 == v24)
          goto LABEL_163;
        v55 = v52 - v24 - 8;
        if (v55 < 0x168)
        {
          v56 = v52;
          goto LABEL_148;
        }
        v69 = (v52 - 8 - v24) & 0xFFFFFFFFFFFFFFF8;
        if ((char *)this + v49 - v69 - 8 > (char *)this + v49 - 8)
        {
          v56 = v52;
          goto LABEL_148;
        }
        if (&v52[-v69 - 8] > v52 - 8)
        {
          v56 = v52;
          do
          {
LABEL_148:
            v78 = *((_QWORD *)v56 - 1);
            v56 -= 8;
            *((_QWORD *)v54 - 1) = v78;
            v54 -= 8;
          }
          while (v56 != v24);
          goto LABEL_163;
        }
        if ((unint64_t)(&v52[-v49] - (char *)this) < 0x20)
        {
          v56 = v52;
          goto LABEL_148;
        }
        v72 = (v55 >> 3) + 1;
        v73 = 8 * (v72 & 0x3FFFFFFFFFFFFFFCLL);
        v56 = &v52[-v73];
        v54 -= v73;
        v74 = (_OWORD *)((char *)this + 8 * v50 - 16);
        v75 = v52 - 16;
        v76 = v72 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 4;
        }
        while (v76);
        if (v72 != (v72 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_148;
        goto LABEL_163;
      case 0xF:
        if ((v111 & 1) != 0)
          goto LABEL_56;
        if (*((char *)v112 + 207) < 0)
        {
          if (!*((_QWORD *)v112 + 24))
            goto LABEL_56;
        }
        else if (!*((_BYTE *)v112 + 207))
        {
          goto LABEL_56;
        }
        if (v25 < v26)
          goto LABEL_59;
        v57 = v25 - v24;
        v58 = (v25 - v24) >> 3;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 61)
          goto LABEL_192;
        if ((v26 - v24) >> 2 > v59)
          v59 = (v26 - v24) >> 2;
        if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFF8)
          v59 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v59)
          goto LABEL_191;
        v114 = v23;
        if (v59 >> 61)
          goto LABEL_193;
        v60 = v25;
        v53 = 8 * v59;
        this = (webrtc::RTPSender *)operator new(8 * v59);
        v54 = (char *)this + 8 * v58;
        *(_QWORD *)v54 = *v28;
        v25 = v54 + 8;
        if (v60 == v24)
          goto LABEL_163;
        v61 = v60 - v24 - 8;
        if (v61 < 0x168)
        {
          v62 = v60;
          goto LABEL_155;
        }
        v70 = (v60 - 8 - v24) & 0xFFFFFFFFFFFFFFF8;
        if ((char *)this + v57 - v70 - 8 > (char *)this + v57 - 8)
        {
          v62 = v60;
          goto LABEL_155;
        }
        if (&v60[-v70 - 8] > v60 - 8)
        {
          v62 = v60;
          do
          {
LABEL_155:
            v85 = *((_QWORD *)v62 - 1);
            v62 -= 8;
            *((_QWORD *)v54 - 1) = v85;
            v54 -= 8;
          }
          while (v62 != v24);
          goto LABEL_163;
        }
        if ((unint64_t)(&v60[-v57] - (char *)this) < 0x20)
        {
          v62 = v60;
          goto LABEL_155;
        }
        v79 = (v61 >> 3) + 1;
        v80 = 8 * (v79 & 0x3FFFFFFFFFFFFFFCLL);
        v62 = &v60[-v80];
        v54 -= v80;
        v81 = (_OWORD *)((char *)this + 8 * v58 - 16);
        v82 = v60 - 16;
        v83 = v79 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        if (v79 != (v79 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_155;
        goto LABEL_163;
      case 0x10:
        if (!v110)
          goto LABEL_56;
        if (*((char *)v112 + 231) < 0)
        {
          if (!*((_QWORD *)v112 + 27))
            goto LABEL_56;
        }
        else if (!*((_BYTE *)v112 + 231))
        {
          goto LABEL_56;
        }
        if (v25 < v26)
        {
LABEL_59:
          if (!v25)
            goto LABEL_191;
          *(_QWORD *)v25 = *v28;
          v25 += 8;
        }
        else
        {
          v63 = v25 - v24;
          v64 = (v25 - v24) >> 3;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 61)
            goto LABEL_192;
          if ((v26 - v24) >> 2 > v65)
            v65 = (v26 - v24) >> 2;
          if ((unint64_t)(v26 - v24) >= 0x7FFFFFFFFFFFFFF8)
            v65 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v65)
          {
LABEL_191:
            __break(1u);
LABEL_192:
            abort();
          }
          v114 = v23;
          if (v65 >> 61)
LABEL_193:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v66 = v25;
          v53 = 8 * v65;
          this = (webrtc::RTPSender *)operator new(8 * v65);
          v54 = (char *)this + 8 * v64;
          *(_QWORD *)v54 = *v28;
          v25 = v54 + 8;
          if (v66 != v24)
          {
            v67 = v66 - v24 - 8;
            if (v67 < 0x168)
            {
              v68 = v66;
              goto LABEL_162;
            }
            v71 = (v66 - 8 - v24) & 0xFFFFFFFFFFFFFFF8;
            if ((char *)this + v63 - v71 - 8 > (char *)this + v63 - 8)
            {
              v68 = v66;
              goto LABEL_162;
            }
            if (&v66[-v71 - 8] > v66 - 8)
            {
              v68 = v66;
              do
              {
LABEL_162:
                v92 = *((_QWORD *)v68 - 1);
                v68 -= 8;
                *((_QWORD *)v54 - 1) = v92;
                v54 -= 8;
              }
              while (v68 != v24);
              goto LABEL_163;
            }
            if ((unint64_t)(&v66[-v63] - (char *)this) < 0x20)
            {
              v68 = v66;
              goto LABEL_162;
            }
            v86 = (v67 >> 3) + 1;
            v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
            v68 = &v66[-v87];
            v54 -= v87;
            v88 = (_OWORD *)((char *)this + 8 * v64 - 16);
            v89 = v66 - 16;
            v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v91 = *(_OWORD *)v89;
              *(v88 - 1) = *((_OWORD *)v89 - 1);
              *v88 = v91;
              v88 -= 2;
              v89 -= 32;
              v90 -= 4;
            }
            while (v90);
            if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_162;
          }
LABEL_163:
          v26 = (char *)this + v53;
          if (v24)
          {
            v93 = (char *)this + v53;
            operator delete(v24);
            v26 = v93;
          }
          v24 = v54;
          v23 = v114;
        }
LABEL_56:
        if (++v28 != v29)
          continue;
        if (v25 == v24)
          v94 = 0;
        else
          v94 = v24;
        if (v25 == v24)
        {
          v100 = v112;
          v107 = v109;
          *((_QWORD *)v112 + 20) = v109;
          if (*((_BYTE *)v112 + 28))
LABEL_185:
            *((_QWORD *)v100 + 20) = v107 + 2;
        }
        else
        {
          v95 = 0;
          v96 = 0;
          v97 = (int *)&v94[v25 - v24];
          v98 = 1;
          v99 = (int *)v24;
          v100 = v112;
          do
          {
            if (v108[*v99])
            {
              v101 = v99[1];
              if (v101 > 16 || v108[*v99] > 0xEu)
                v98 = 2;
              v95 += v101;
              ++v96;
            }
            v99 += 2;
          }
          while (v99 != v97);
          v103 = v95 + v96 * v98 + 7;
          v104 = v103 & 3;
          if (v103 <= 0)
            v104 = -(-v103 & 3);
          v105 = v103 - v104;
          if (v95)
            v106 = v105;
          else
            v106 = 0;
          v107 = v106 + v109;
          *((_QWORD *)v112 + 20) = v107;
          if (*((_BYTE *)v112 + 28))
            goto LABEL_185;
        }
        if (v24)
          operator delete(v24);
        return;
      default:
        rtc::webrtc_checks_impl::UnreachableCodeReached(this);
    }
  }
}

uint64_t webrtc::RTPSender::SetRtxPayloadType(webrtc::RTPSender *this, int a2, char a3)
{
  pthread_mutex_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  if (a2 < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc");
  }
  else
  {
    v7 = (char *)*((_QWORD *)this + 33);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = v7[25];
          if (v10 <= a3)
            break;
          v7 = (char *)*v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v10 >= a3)
          break;
        v7 = (char *)v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      v8 = (uint64_t **)((char *)this + 264);
      v9 = (uint64_t **)((char *)this + 264);
LABEL_9:
      v11 = (char *)v9;
      v9 = (uint64_t **)operator new(0x20uLL);
      *((_BYTE *)v9 + 25) = a3;
      *((_BYTE *)v9 + 26) = 0;
      *v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t *)v11;
      *v8 = (uint64_t *)v9;
      v12 = **((_QWORD **)this + 32);
      v13 = (uint64_t *)v9;
      if (v12)
      {
        *((_QWORD *)this + 32) = v12;
        v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 33), v13);
      ++*((_QWORD *)this + 34);
    }
    *((_BYTE *)v9 + 26) = a2;
  }
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::RTPSender::ReSendPacket(webrtc::RTPSender *this, unsigned int a2)
{
  pthread_mutex_t *v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  void *v29;
  webrtc::RTPSender *v30;
  webrtc::RTPSender *v31;
  void *v32;
  _QWORD *v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  void *__p;
  _QWORD *v58;
  _BYTE *v59;
  void *v60;
  webrtc::RTPSender *v61;
  _BYTE *v62;
  uint64_t v63;
  _BYTE v64[5];

  *(_DWORD *)&v64[1] = 0;
  v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v5 = *((_BYTE *)this + 248);
  pthread_mutex_unlock(v4);
  *(_DWORD *)v64 = v5 & 1;
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v60 = &v64[1];
  v61 = this;
  v62 = v64;
  webrtc::RtpPacketHistory::GetPacketAndMarkAsPending(v6, a2, (uint64_t)&v60, (void (*)(uint64_t, _QWORD))rtc::FunctionView<std::unique_ptr<webrtc::RtpPacketToSend> ()(webrtc::RtpPacketToSend const&)>::CallVoidPtr<webrtc::RTPSender::ReSendPacket(unsigned short)::$_0>, &v63);
  if (*(_DWORD *)&v64[1])
  {
    v7 = v63;
    if (!v63)
      return 0xFFFFFFFFLL;
    v8 = *(_QWORD *)(v63 + 120);
    if (*(_BYTE *)(v63 + 128))
      v9 = v8 == 0;
    else
      v9 = 0;
    if (v9)
    {
      v11 = 0;
    }
    else
    {
      if (*(_BYTE *)(v63 + 128))
        v10 = v8 == 1;
      else
        v10 = 0;
      if (!v10)
        goto LABEL_17;
      v11 = 1;
    }
    *(_DWORD *)(v63 + 136) = v11;
    *(_BYTE *)(v7 + 140) = 1;
LABEL_17:
    *(_QWORD *)(v7 + 120) = 2;
    *(_BYTE *)(v7 + 128) = 1;
    *(_BYTE *)(v7 + 186) = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v13 = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(&v60, &v63);
    v14 = *((_QWORD *)this + 6);
    __p = v60;
    v58 = v13;
    v59 = v62;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 16))(v14, &__p);
    v15 = __p;
    if (__p)
    {
      v16 = v58;
      v17 = __p;
      if (v58 != __p)
      {
        do
        {
          v19 = (_QWORD *)*--v16;
          v18 = v19;
          *v16 = 0;
          if (v19)
          {
            v20 = (unsigned int *)v18[22];
            if (v20)
            {
              v21 = v20 + 2;
              do
              {
                v22 = __ldaxr(v21);
                v23 = v22 - 1;
              }
              while (__stlxr(v23, v21));
              if (!v23)
                (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
            }
            v24 = v18[11];
            if (v24)
            {
              v25 = (unsigned int *)(v24 + 24);
              do
              {
                v26 = __ldaxr(v25);
                v27 = v26 - 1;
              }
              while (__stlxr(v27, v25));
              if (!v27)
              {
                v28 = *(_QWORD *)(v24 + 16);
                *(_QWORD *)(v24 + 16) = 0;
                if (v28)
                  MEMORY[0x20BD0ADD4](v28, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v24, 0x1010C40EE34DA14);
              }
            }
            v29 = (void *)v18[7];
            if (v29)
            {
              v18[8] = v29;
              operator delete(v29);
            }
            MEMORY[0x20BD0ADEC](v18, 0x1020C4000E59722);
          }
        }
        while (v16 != v15);
        v17 = __p;
      }
      v58 = v15;
      operator delete(v17);
    }
    v12 = *(unsigned int *)&v64[1];
    v30 = (webrtc::RTPSender *)v60;
    if (v60)
    {
      v31 = v61;
      v32 = v60;
      if (v61 != v60)
      {
        do
        {
          v34 = (_QWORD *)*((_QWORD *)v31 - 1);
          v31 = (webrtc::RTPSender *)((char *)v31 - 8);
          v33 = v34;
          *(_QWORD *)v31 = 0;
          if (v34)
          {
            v35 = (unsigned int *)v33[22];
            if (v35)
            {
              v36 = v35 + 2;
              do
              {
                v37 = __ldaxr(v36);
                v38 = v37 - 1;
              }
              while (__stlxr(v38, v36));
              if (!v38)
                (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
            }
            v39 = v33[11];
            if (v39)
            {
              v40 = (unsigned int *)(v39 + 24);
              do
              {
                v41 = __ldaxr(v40);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v40));
              if (!v42)
              {
                v43 = *(_QWORD *)(v39 + 16);
                *(_QWORD *)(v39 + 16) = 0;
                if (v43)
                  MEMORY[0x20BD0ADD4](v43, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v39, 0x1010C40EE34DA14);
              }
            }
            v44 = (void *)v33[7];
            if (v44)
            {
              v33[8] = v44;
              operator delete(v44);
            }
            MEMORY[0x20BD0ADEC](v33, 0x1020C4000E59722);
          }
        }
        while (v31 != v30);
        v32 = v60;
      }
      v61 = v30;
      operator delete(v32);
    }
    goto LABEL_61;
  }
  v12 = 0;
LABEL_61:
  v45 = (_QWORD *)v63;
  v63 = 0;
  if (v45)
  {
    v46 = (unsigned int *)v45[22];
    if (v46)
    {
      v47 = v46 + 2;
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
    }
    v50 = v45[11];
    if (v50)
    {
      v51 = (unsigned int *)(v50 + 24);
      do
      {
        v52 = __ldaxr(v51);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, v51));
      if (!v53)
      {
        v54 = *(_QWORD *)(v50 + 16);
        *(_QWORD *)(v50 + 16) = 0;
        if (v54)
          MEMORY[0x20BD0ADD4](v54, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v50, 0x1010C40EE34DA14);
      }
    }
    v55 = (void *)v45[7];
    if (v55)
    {
      v45[8] = v55;
      operator delete(v55);
    }
    MEMORY[0x20BD0ADEC](v45, 0x1020C4000E59722);
  }
  return v12;
}

void webrtc::RTPSender::OnReceivedNack(webrtc::RTPSender *a1, unsigned __int16 **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *((_QWORD *)a1 + 5);
  v6 = 1000 * a3 + 5000;
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 16));
  *(_QWORD *)(v5 + 96) = v6;
  if (*(_DWORD *)(v5 + 88))
    webrtc::RtpPacketHistory::CullOldPackets((webrtc::RtpPacketHistory *)v5);
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 16));
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    while ((webrtc::RTPSender::ReSendPacket(a1, *v7) & 0x80000000) == 0)
    {
      if (++v7 == v8)
        return;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc");
  }
}

void webrtc::RTPSender::GeneratePadding(webrtc::RTPSender *this@<X0>, unint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  pthread_mutex_t *v9;
  int v10;
  pthread_mutex_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v18;
  int v19;
  char *v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  pthread_mutex_t *v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  int v37;
  webrtc::RtpPacket *v38;
  webrtc::RtpPacket *v39;
  char *v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  char v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  BOOL v59;
  int v60;
  _WORD *RawExtension;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  rtc::CopyOnWriteBuffer *v75;
  int v76;
  rtc::CopyOnWriteBuffer *v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  void *v87;
  _QWORD *v88;
  void *v89;
  _QWORD *v90;
  _QWORD *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  rtc::CopyOnWriteBuffer *v104[3];
  uint64_t v105;
  unint64_t v106;
  void *__p[2];
  void *v108;
  unint64_t v109;

  v109 = a2;
  __p[0] = 0;
  __p[1] = 0;
  v108 = 0;
  v9 = (pthread_mutex_t *)((char *)this + 56);
  v106 = a2;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v102 = a5;
  if (*((_BYTE *)this + 120) && *((_BYTE *)this + 280))
  {
    v10 = *((_DWORD *)this + 62);
    v11 = v9;
    pthread_mutex_unlock(v9);
    if (a2 >= 0x32 && (v10 & 2) != 0)
    {
      while (1)
      {
        v12 = (_QWORD *)*((_QWORD *)this + 5);
        v104[0] = (rtc::CopyOnWriteBuffer *)&v109;
        v104[1] = (rtc::CopyOnWriteBuffer *)&v106;
        v104[2] = this;
        webrtc::RtpPacketHistory::GetPayloadPaddingPacket(v12, (uint64_t)v104, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))rtc::FunctionView<std::unique_ptr<webrtc::RtpPacketToSend> ()(webrtc::RtpPacketToSend const&)>::CallVoidPtr<webrtc::RTPSender::GeneratePadding(unsigned long,BOOL,BOOL)::$_0>, &v105);
        v13 = v105;
        if (!v105)
          goto LABEL_43;
        v14 = *(_QWORD *)(v105 + 24);
        v59 = v106 >= v14;
        v15 = v106 - v14;
        if (!v59)
          v15 = 0;
        v106 = v15;
        v16 = *(_QWORD *)(v105 + 120);
        if (*(_BYTE *)(v105 + 128) && v16 == 0)
          break;
        if (*(_BYTE *)(v105 + 128))
          v18 = v16 == 1;
        else
          v18 = 0;
        if (v18)
        {
          v19 = 1;
LABEL_22:
          *(_DWORD *)(v105 + 136) = v19;
          *(_BYTE *)(v13 + 140) = 1;
        }
        *(_QWORD *)(v13 + 120) = 4;
        *(_BYTE *)(v13 + 128) = 1;
        v20 = (char *)__p[1];
        if (__p[1] >= v108)
        {
          __p[1] = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(__p, &v105);
          v21 = (_QWORD *)v105;
          v105 = 0;
          if (v21)
            goto LABEL_28;
        }
        else
        {
          if (!__p[1])
          {
LABEL_153:
            __break(1u);
            return;
          }
          v105 = 0;
          *(_QWORD *)__p[1] = v13;
          __p[1] = v20 + 8;
          v21 = (_QWORD *)v105;
          v105 = 0;
          if (v21)
          {
LABEL_28:
            v22 = (unsigned int *)v21[22];
            if (v22)
            {
              v23 = v22 + 2;
              do
              {
                v24 = __ldaxr(v23);
                v25 = v24 - 1;
              }
              while (__stlxr(v25, v23));
              if (!v25)
                (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
            }
            v26 = v21[11];
            if (v26)
            {
              v27 = (unsigned int *)(v26 + 24);
              do
              {
                v28 = __ldaxr(v27);
                v29 = v28 - 1;
              }
              while (__stlxr(v29, v27));
              if (!v29)
              {
                v30 = *(_QWORD *)(v26 + 16);
                *(_QWORD *)(v26 + 16) = 0;
                if (v30)
                  MEMORY[0x20BD0ADD4](v30, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v26, 0x1010C40EE34DA14);
              }
            }
            v31 = (void *)v21[7];
            if (v31)
            {
              v21[8] = v31;
              operator delete(v31);
            }
            MEMORY[0x20BD0ADEC](v21, 0x1020C4000E59722);
          }
        }
        if (v106 <= 0x31)
          goto LABEL_43;
      }
      v19 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v11 = v9;
    pthread_mutex_unlock(v9);
  }
LABEL_43:
  v32 = v11;
  pthread_mutex_lock(v11);
  if (*((_BYTE *)this + 120))
  {
    v33 = *((_QWORD *)this + 16) - *((_QWORD *)this + 21);
    if (!*((_BYTE *)this + 16))
    {
      if (v33 >= 0xFF)
        v34 = 255;
      else
        v34 = *((_QWORD *)this + 16) - *((_QWORD *)this + 21);
      v35 = a4;
      if (v106)
        goto LABEL_66;
LABEL_130:
      *(_OWORD *)v102 = *(_OWORD *)__p;
      *(_QWORD *)(v102 + 16) = v108;
      __p[0] = 0;
      __p[1] = 0;
      v108 = 0;
      pthread_mutex_unlock(v32);
      v36 = __p[0];
      if (!__p[0])
        return;
      goto LABEL_131;
    }
    if (v33 >= v106)
      v33 = v106;
    if (v33 >= 0xFF)
      v33 = 255;
    if (v106 <= 0x32)
      v34 = 50;
    else
      v34 = v33;
    v35 = a4;
    if (!v106)
      goto LABEL_130;
    while (1)
    {
LABEL_66:
      v38 = (webrtc::RtpPacket *)operator new();
      v39 = webrtc::RtpPacket::RtpPacket(v38, (webrtc::RTPSender *)((char *)this + 136), (uint64_t *)0x5DC);
      *((_BYTE *)v39 + 136) = 0;
      *((_BYTE *)v39 + 140) = 0;
      *((_BYTE *)v39 + 144) = 0;
      *((_BYTE *)v39 + 148) = 0;
      *((_BYTE *)v39 + 152) = 0;
      *((_BYTE *)v39 + 160) = 0;
      *((_BYTE *)v39 + 168) = 0;
      *((_BYTE *)v39 + 170) = 0;
      *((_BYTE *)v39 + 172) = 0;
      *((_BYTE *)v39 + 192) = 0;
      *((_BYTE *)v39 + 200) = 0;
      *((_DWORD *)v39 + 46) = 0;
      *((_QWORD *)v39 + 22) = 0;
      v104[0] = v39;
      *((_OWORD *)v39 + 7) = xmmword_208F1AB10;
      *((_BYTE *)v39 + 128) = 1;
      *(_BYTE *)v39 = 0;
      v40 = (char *)v39 + 88;
      v41 = *((_QWORD *)v39 + 12);
      v42 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v39 + 11) + 16) + v41 + 1);
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v39 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v39 + 11) + 8) - v41));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v40 + 16) + *((_QWORD *)v38 + 12) + 1) = v42 & 0x7F;
      if (*((_DWORD *)this + 62))
      {
        if ((a3 & 1) == 0 && !*((_BYTE *)this + 141) && !*((_BYTE *)this + 144))
        {
LABEL_115:
          v76 = 1;
          v77 = v104[0];
          v104[0] = 0;
          if (v77)
            goto LABEL_116;
          goto LABEL_62;
        }
        if (!*((_BYTE *)this + 28))
          goto LABEL_153;
        v43 = *((_DWORD *)this + 6);
        v45 = (uint64_t *)((char *)v104[0] + 88);
        v44 = *((_QWORD *)v104[0] + 11);
        *((_DWORD *)v104[0] + 3) = v43;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v45, (uint64_t *)(*(_QWORD *)(v44 + 8) - v45[1]));
        *(_DWORD *)(*(_QWORD *)(*v45 + 16) + v45[1] + 8) = bswap32(v43);
        v46 = *(_BYTE *)(*((_QWORD *)this + 32) + 26);
        v48 = (uint64_t *)((char *)v104[0] + 88);
        v47 = *((_QWORD *)v104[0] + 11);
        *((_BYTE *)v104[0] + 1) = v46;
        v49 = v48[1];
        LOBYTE(v43) = *(_BYTE *)(*(_QWORD *)(v47 + 16) + v49 + 1) & 0x80 | v46;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v48, (uint64_t *)(*(_QWORD *)(v47 + 8) - v49));
        *(_BYTE *)(*(_QWORD *)(*v48 + 16) + v48[1] + 1) = v43;
        if (*((_BYTE *)this + 144))
        {
LABEL_75:
          v58 = *((unsigned __int8 *)v104[0] + 40);
          if (*((_BYTE *)v104[0] + 53))
            v59 = 0;
          else
            v59 = v58 >= 0xF;
          v60 = !v59;
          if (*((_BYTE *)v104[0] + 40))
          {
            if (v60)
            {
              RawExtension = (_WORD *)webrtc::RtpPacket::AllocateRawExtension(v104[0], v58, 2, v50, v51, v52, v53, v54);
              if (v62)
                *RawExtension = 0;
            }
          }
        }
      }
      else
      {
        if (!v35)
          goto LABEL_115;
        v55 = *((_DWORD *)this + 5);
        v57 = (uint64_t *)((char *)v104[0] + 88);
        v56 = *((_QWORD *)v104[0] + 11);
        *((_DWORD *)v104[0] + 3) = v55;
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v57, (uint64_t *)(*(_QWORD *)(v56 + 8) - v57[1]));
        *(_DWORD *)(*(_QWORD *)(*v57 + 16) + v57[1] + 8) = bswap32(v55);
        if (*((_BYTE *)this + 144))
          goto LABEL_75;
      }
      if (*((_BYTE *)this + 137))
      {
        v63 = *((unsigned __int8 *)v104[0] + 33);
        v64 = !*((_BYTE *)v104[0] + 53) && v63 >= 0xF;
        v65 = !v64;
        if (*((_BYTE *)v104[0] + 33))
        {
          if (v65)
          {
            v66 = webrtc::RtpPacket::AllocateRawExtension(v104[0], v63, 3, v50, v51, v52, v53, v54);
            if (v67)
            {
              *(_BYTE *)(v66 + 2) = 0;
              *(_WORD *)v66 = 0;
            }
          }
        }
      }
      if (*((_BYTE *)this + 141))
      {
        v68 = *((unsigned __int8 *)v104[0] + 37);
        v69 = !*((_BYTE *)v104[0] + 53) && v68 >= 0xF;
        v70 = !v69;
        if (*((_BYTE *)v104[0] + 37))
        {
          if (v70)
          {
            v71 = webrtc::RtpPacket::AllocateRawExtension(v104[0], v68, 3, v50, v51, v52, v53, v54);
            if (v72)
            {
              *(_BYTE *)(v71 + 2) = 0;
              *(_WORD *)v71 = 0;
            }
          }
        }
      }
      webrtc::RtpPacket::SetPadding(v104[0], v34);
      v73 = v106 - v34;
      if (v106 < v34)
        v73 = 0;
      v106 = v73;
      v74 = (char *)__p[1];
      if (__p[1] < v108)
      {
        if (!__p[1])
          goto LABEL_153;
        v75 = v104[0];
        v104[0] = 0;
        *(_QWORD *)__p[1] = v75;
        v76 = 0;
        __p[1] = v74 + 8;
        v77 = v104[0];
        v104[0] = 0;
        if (!v77)
          goto LABEL_62;
LABEL_116:
        v78 = (unsigned int *)*((_QWORD *)v77 + 22);
        if (v78)
        {
          v79 = v78 + 2;
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
            (*(void (**)(unsigned int *))(*(_QWORD *)v78 + 8))(v78);
        }
        v82 = *((_QWORD *)v77 + 11);
        if (v82)
        {
          v83 = (unsigned int *)(v82 + 24);
          do
          {
            v84 = __ldaxr(v83);
            v85 = v84 - 1;
          }
          while (__stlxr(v85, v83));
          if (!v85)
          {
            v86 = *(_QWORD *)(v82 + 16);
            *(_QWORD *)(v82 + 16) = 0;
            if (v86)
              MEMORY[0x20BD0ADD4](v86, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v82, 0x1010C40EE34DA14);
          }
        }
        v87 = (void *)*((_QWORD *)v77 + 7);
        if (v87)
        {
          *((_QWORD *)v77 + 8) = v87;
          operator delete(v87);
        }
        MEMORY[0x20BD0ADEC](v77, 0x1020C4000E59722);
        goto LABEL_62;
      }
      v76 = 0;
      __p[1] = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(__p, (uint64_t *)v104);
      v77 = v104[0];
      v104[0] = 0;
      if (v77)
        goto LABEL_116;
LABEL_62:
      if (v106)
        v37 = v76;
      else
        v37 = 1;
      if (v37 == 1)
        goto LABEL_130;
    }
  }
  *(_QWORD *)v102 = 0;
  *(_QWORD *)(v102 + 8) = 0;
  *(_QWORD *)(v102 + 16) = 0;
  pthread_mutex_unlock(v11);
  v36 = __p[0];
  if (!__p[0])
    return;
LABEL_131:
  v88 = __p[1];
  v89 = v36;
  if (__p[1] != v36)
  {
    do
    {
      v91 = (_QWORD *)*--v88;
      v90 = v91;
      *v88 = 0;
      if (v91)
      {
        v92 = (unsigned int *)v90[22];
        if (v92)
        {
          v93 = v92 + 2;
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
            (*(void (**)(unsigned int *))(*(_QWORD *)v92 + 8))(v92);
        }
        v96 = v90[11];
        if (v96)
        {
          v97 = (unsigned int *)(v96 + 24);
          do
          {
            v98 = __ldaxr(v97);
            v99 = v98 - 1;
          }
          while (__stlxr(v99, v97));
          if (!v99)
          {
            v100 = *(_QWORD *)(v96 + 16);
            *(_QWORD *)(v96 + 16) = 0;
            if (v100)
              MEMORY[0x20BD0ADD4](v100, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v96, 0x1010C40EE34DA14);
          }
        }
        v101 = (void *)v90[7];
        if (v101)
        {
          v90[8] = v101;
          operator delete(v101);
        }
        MEMORY[0x20BD0ADEC](v90, 0x1020C4000E59722);
      }
    }
    while (v88 != v36);
    v89 = __p[0];
  }
  __p[1] = v36;
  operator delete(v89);
}

void webrtc::RTPSender::EnqueuePackets(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64x2_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  void *v28;
  std::string *v29;
  void *__p[2];
  unint64_t v31;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
    v11 = vdupq_n_s64(v9);
LABEL_8:
    v13 = a1[6];
    *(int64x2_t *)__p = v11;
    v31 = a2[2];
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 16))(v13, __p);
    v14 = __p[0];
    if (__p[0])
    {
      v15 = __p[1];
      v16 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          v18 = (_QWORD *)*--v15;
          v17 = v18;
          *v15 = 0;
          if (v18)
          {
            v19 = (unsigned int *)v17[22];
            if (v19)
            {
              v20 = v19 + 2;
              do
              {
                v21 = __ldaxr(v20);
                v22 = v21 - 1;
              }
              while (__stlxr(v22, v20));
              if (!v22)
                (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
            }
            v23 = v17[11];
            if (v23)
            {
              v24 = (unsigned int *)(v23 + 24);
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                v27 = *(_QWORD *)(v23 + 16);
                *(_QWORD *)(v23 + 16) = 0;
                if (v27)
                  MEMORY[0x20BD0ADD4](v27, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v23, 0x1010C40EE34DA14);
              }
            }
            v28 = (void *)v17[7];
            if (v28)
            {
              v17[8] = v28;
              operator delete(v28);
            }
            MEMORY[0x20BD0ADEC](v17, 0x1020C4000E59722);
          }
        }
        while (v15 != v14);
        v16 = __p[0];
      }
      __p[1] = v14;
      operator delete(v16);
    }
  }
  else
  {
    while (1)
    {
      v12 = *(_QWORD *)v9;
      if (!*(_BYTE *)(*(_QWORD *)v9 + 128))
        break;
      if (*(uint64_t *)(v12 + 112) <= 0)
        *(_QWORD *)(v12 + 112) = v4;
      v9 += 8;
      if (v9 == v10)
      {
        v11 = *(int64x2_t *)a2;
        goto LABEL_8;
      }
    }
    v29 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc", 471, "packet->packet_type().has_value()", "\t", v5, v6, v7, v8, (uint64_t)"Packet type must be set before sending.");
    webrtc::RTPSender::AllocatePacket(v29);
  }
}

_BYTE *webrtc::RTPSender::AllocatePacket@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, webrtc::RtpPacket **a4@<X8>)
{
  pthread_mutex_t *v8;
  uint64_t v9;
  webrtc::RtpPacket *v10;
  unsigned int v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  uint64_t v38;
  size_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  _BOOL4 v44;
  uint64_t v45;
  size_t v46;

  v8 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  if (a3 > *(_QWORD *)(a1 + 240))
  {
    *(_QWORD *)(a1 + 240) = a3;
    webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)a1);
  }
  v9 = operator new();
  v10 = webrtc::RtpPacket::RtpPacket((webrtc::RtpPacket *)v9, (const webrtc::RtpHeaderExtensionMap *)(a1 + 136), *(uint64_t **)(a1 + 128));
  *((_QWORD *)v10 + 14) = 0;
  *((_BYTE *)v10 + 120) = 0;
  *((_BYTE *)v10 + 128) = 0;
  *((_BYTE *)v10 + 136) = 0;
  *((_BYTE *)v10 + 140) = 0;
  *((_BYTE *)v10 + 144) = 0;
  *((_BYTE *)v10 + 148) = 0;
  *((_BYTE *)v10 + 152) = 0;
  *((_BYTE *)v10 + 160) = 0;
  *((_BYTE *)v10 + 168) = 0;
  *((_BYTE *)v10 + 170) = 0;
  *((_BYTE *)v10 + 172) = 0;
  *((_BYTE *)v10 + 192) = 0;
  *((_BYTE *)v10 + 200) = 0;
  *((_QWORD *)v10 + 22) = 0;
  *((_DWORD *)v10 + 46) = 0;
  *a4 = v10;
  v11 = *(_DWORD *)(a1 + 20);
  v12 = (char *)v10 + 88;
  v13 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 11) + 8) - *((_QWORD *)v10 + 12));
  *((_DWORD *)v10 + 3) = v11;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v10 + 11, v13);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 16) + *(_QWORD *)(v9 + 96) + 8) = bswap32(v11);
  if (a3)
    v14 = a2;
  else
    v14 = 0;
  result = webrtc::RtpPacket::SetCsrcs((rtc::CopyOnWriteBuffer *)v9, v14, a3);
  v21 = *(unsigned __int8 *)(v9 + 37);
  if (*(_BYTE *)(v9 + 53))
    v22 = 0;
  else
    v22 = v21 >= 0xF;
  v23 = !v22;
  if (*(_BYTE *)(v9 + 37))
  {
    if (v23)
    {
      result = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v9, v21, 3, v16, v17, v18, v19, v20);
      if (v24)
      {
        result[2] = 0;
        *(_WORD *)result = 0;
      }
    }
  }
  v25 = *(unsigned __int8 *)(v9 + 33);
  if (*(_BYTE *)(v9 + 53))
    v26 = 0;
  else
    v26 = v25 >= 0xF;
  v27 = !v26;
  if (*(_BYTE *)(v9 + 33))
  {
    if (v27)
    {
      result = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v9, v25, 3, v16, v17, v18, v19, v20);
      if (v28)
      {
        result[2] = 0;
        *(_WORD *)result = 0;
      }
    }
  }
  v29 = *(unsigned __int8 *)(v9 + 40);
  if (*(_BYTE *)(v9 + 53))
    v30 = 0;
  else
    v30 = v29 >= 0xF;
  v31 = !v30;
  if (*(_BYTE *)(v9 + 40))
  {
    if (v31)
    {
      result = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v9, v29, 2, v16, v17, v18, v19, v20);
      if (v32)
        *(_WORD *)result = 0;
    }
  }
  if (!*(_BYTE *)(a1 + 232) && *(_BYTE *)(a1 + 233))
    return (_BYTE *)pthread_mutex_unlock(v8);
  v33 = (_QWORD *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
  {
    v34 = *(_QWORD *)(a1 + 216);
    if (!v34)
      goto LABEL_64;
    if ((v34 & 0x8000000000000000) != 0 || !*v33)
      goto LABEL_90;
  }
  else
  {
    v34 = *(unsigned __int8 *)(a1 + 231);
    if (!*(_BYTE *)(a1 + 231))
      goto LABEL_64;
  }
  if (v34 - 256 >= 0xFFFFFFFFFFFFFF01 && (v34 < 0x11 || *(_BYTE *)(v9 + 53)))
  {
    v35 = *(unsigned __int8 *)(v9 + 48);
    v36 = !*(_BYTE *)(v9 + 53) && v35 >= 0xF;
    v37 = !v36;
    if (*(_BYTE *)(v9 + 48))
    {
      if (v37)
      {
        result = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v9, v35, v34, v16, v17, v18, v19, v20);
        if (v38)
        {
          if (*(char *)(a1 + 231) < 0)
          {
            v39 = *(_QWORD *)(a1 + 216);
            if ((v39 & 0x8000000000000000) != 0)
              goto LABEL_90;
            v33 = (_QWORD *)*v33;
            if (v39)
            {
              if (!v33)
                goto LABEL_90;
            }
          }
          else
          {
            v39 = *(unsigned __int8 *)(a1 + 231);
          }
          if (v39 <= 0x10)
            result = memcpy(result, v33, v39);
        }
      }
    }
  }
LABEL_64:
  v40 = (_QWORD *)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
  {
    v41 = *(_QWORD *)(a1 + 192);
    if (!v41)
      return (_BYTE *)pthread_mutex_unlock(v8);
    if ((v41 & 0x8000000000000000) != 0 || !*v40)
      goto LABEL_90;
  }
  else
  {
    v41 = *(unsigned __int8 *)(a1 + 207);
    if (!*(_BYTE *)(a1 + 207))
      return (_BYTE *)pthread_mutex_unlock(v8);
  }
  if (v41 - 256 < 0xFFFFFFFFFFFFFF01 || v41 >= 0x11 && !*(_BYTE *)(v9 + 53))
    return (_BYTE *)pthread_mutex_unlock(v8);
  v42 = *(unsigned __int8 *)(v9 + 46);
  v43 = !*(_BYTE *)(v9 + 53) && v42 >= 0xF;
  v44 = !v43;
  if (!*(_BYTE *)(v9 + 46))
    return (_BYTE *)pthread_mutex_unlock(v8);
  if (!v44)
    return (_BYTE *)pthread_mutex_unlock(v8);
  result = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v9, v42, v41, v16, v17, v18, v19, v20);
  if (!v45)
    return (_BYTE *)pthread_mutex_unlock(v8);
  if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    v46 = *(unsigned __int8 *)(a1 + 207);
LABEL_87:
    if (v46 <= 0x10)
      memcpy(result, v40, v46);
    return (_BYTE *)pthread_mutex_unlock(v8);
  }
  v46 = *(_QWORD *)(a1 + 192);
  if ((v46 & 0x8000000000000000) == 0)
  {
    v40 = (_QWORD *)*v40;
    if (!v46 || v40)
      goto LABEL_87;
  }
LABEL_90:
  __break(1u);
  return result;
}

uint64_t webrtc::RTPSender::SetMid(uint64_t a1, __int128 *a2, size_t a3)
{
  pthread_mutex_t *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  BOOL v11;
  BOOL v12;
  void **v13;
  __int128 v15;
  unint64_t v16;

  v6 = (pthread_mutex_t *)(a1 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 56));
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (a3 > 0x16)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    v7 = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&v15 + 1) = a3;
    v16 = v9 | 0x8000000000000000;
    *(_QWORD *)&v15 = v7;
  }
  else
  {
    HIBYTE(v16) = a3;
    v7 = &v15;
  }
  v10 = (__int128 *)((char *)v7 + a3);
  if (v7 <= a2)
  {
    v11 = v10 >= a2;
    v12 = v10 == a2;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (!v12 && v11)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (a3)
    memmove(v7, a2, a3);
  *(_BYTE *)v10 = 0;
  v13 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*v13);
  *(_OWORD *)v13 = v15;
  *(_QWORD *)(a1 + 224) = v16;
  webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)a1);
  return pthread_mutex_unlock(v6);
}

unsigned int *webrtc::RTPSender::BuildRtxPacket(webrtc::RTPSender *this, const webrtc::RtpPacketToSend *a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  unsigned int *result;
  uint64_t v14;
  webrtc::RtpPacket *v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v45;
  BOOL v46;
  _BOOL4 v47;
  void *RawExtension;
  uint64_t v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  _BOOL4 v54;
  void *v55;
  uint64_t v56;
  size_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  _BOOL4 v62;
  void *v63;
  uint64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _WORD *v71;
  uint64_t v72;
  size_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  std::string *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;

  v6 = (pthread_mutex_t *)((char *)a2 + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a2 + 56));
  if (!*((_BYTE *)a2 + 120))
    goto LABEL_12;
  v7 = *((_QWORD *)a2 + 33);
  if (!v7)
    goto LABEL_12;
  v8 = *(char *)(a3 + 1);
  v9 = (char *)a2 + 264;
  do
  {
    v10 = *(char *)(v7 + 25);
    v11 = v10 < v8;
    if (v10 >= v8)
      v12 = (uint64_t *)v7;
    else
      v12 = (uint64_t *)(v7 + 8);
    if (!v11)
      v9 = (char *)v7;
    v7 = *v12;
  }
  while (*v12);
  if (v9 == (char *)a2 + 264 || v8 < v9[25])
  {
LABEL_12:
    *(_QWORD *)this = 0;
    return (unsigned int *)pthread_mutex_unlock(v6);
  }
  v14 = operator new();
  v15 = webrtc::RtpPacket::RtpPacket((webrtc::RtpPacket *)v14, (const webrtc::RtpPacketToSend *)((char *)a2 + 136), *((uint64_t **)a2 + 16));
  *((_QWORD *)v15 + 14) = 0;
  *((_BYTE *)v15 + 120) = 0;
  *((_BYTE *)v15 + 128) = 0;
  *((_BYTE *)v15 + 136) = 0;
  *((_BYTE *)v15 + 140) = 0;
  *((_BYTE *)v15 + 144) = 0;
  *((_BYTE *)v15 + 148) = 0;
  *((_BYTE *)v15 + 152) = 0;
  *((_BYTE *)v15 + 160) = 0;
  *((_BYTE *)v15 + 168) = 0;
  *((_BYTE *)v15 + 170) = 0;
  *((_BYTE *)v15 + 172) = 0;
  *((_QWORD *)v15 + 22) = 0;
  v83 = (uint64_t *)((char *)v15 + 176);
  *((_BYTE *)v15 + 192) = 0;
  *((_BYTE *)v15 + 200) = 0;
  *((_DWORD *)v15 + 46) = 0;
  v16 = v9[26];
  *((_BYTE *)v15 + 1) = v16;
  v17 = (uint64_t *)((char *)v15 + 88);
  v18 = *((_QWORD *)v15 + 12);
  v19 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v15 + 11) + 16) + v18 + 1) & 0x80 | v16;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v15 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v15 + 11) + 8) - v18));
  *(_BYTE *)(*(_QWORD *)(*v17 + 16) + *(_QWORD *)(v14 + 96) + 1) = v19;
  if (!*((_BYTE *)a2 + 28))
    goto LABEL_125;
  v24 = *((_DWORD *)a2 + 6);
  *(_DWORD *)(v14 + 12) = v24;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 8) - *(_QWORD *)(v14 + 96)));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) + *(_QWORD *)(v14 + 96) + 8) = bswap32(v24);
  LOBYTE(v24) = *(_BYTE *)a3 != 0;
  *(_BYTE *)v14 = *(_BYTE *)a3;
  v25 = *(_QWORD *)(v14 + 96);
  v26 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) + v25 + 1);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 8) - v25));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) + *(_QWORD *)(v14 + 96) + 1) = v26 & 0x7F | ((v24 & 1) << 7);
  v27 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(v14 + 8) = v27;
  v84 = v17;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 8) - *(_QWORD *)(v14 + 96)));
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 88) + 16) + *(_QWORD *)(v14 + 96) + 4) = bswap32(v27);
  v28 = *(_QWORD *)(a3 + 96);
  v29 = *(_QWORD *)(*(_QWORD *)(a3 + 88) + 16);
  v30 = *(_BYTE *)(v29 + v28) & 0xF;
  if ((*(_BYTE *)(v29 + v28) & 0xF) != 0)
  {
    v31 = (char *)operator new(4 * v30);
    bzero(v31, 4 * v30);
    v32 = 0;
    do
    {
      *(_DWORD *)&v31[v32] = bswap32(*(_DWORD *)(v28 + v29 + 12 + v32));
      v32 += 4;
    }
    while (4 * v30 != v32);
    if (4 * v30)
      v33 = (uint64_t)v31;
    else
      v33 = 0;
    webrtc::RtpPacket::SetCsrcs((rtc::CopyOnWriteBuffer *)v14, v33, (4 * v30) >> 2);
    if (v31)
      operator delete(v31);
  }
  else
  {
    webrtc::RtpPacket::SetCsrcs((rtc::CopyOnWriteBuffer *)v14, 0, 0);
  }
  v35 = a3 + 32;
  for (i = 1; i != 21; ++i)
  {
    if ((_DWORD)i != 14 && (_DWORD)i != 16)
    {
      v37 = *(unsigned __int8 *)(v35 + i);
      if (*(_BYTE *)(v35 + i))
      {
        v38 = *(unsigned __int8 **)(a3 + 56);
        v39 = *(unsigned __int8 **)(a3 + 64);
        if (v38 != v39)
        {
          v40 = *(unsigned __int8 **)(a3 + 56);
          while (*v40 != v37)
          {
            v40 += 4;
            if (v40 == v39)
              goto LABEL_23;
          }
          while (*v38 != v37)
          {
            v38 += 4;
            if (v38 == v39)
              goto LABEL_23;
          }
          v41 = *(_QWORD *)(a3 + 88);
          if (v41)
          {
            v42 = *(_QWORD *)(v41 + 16) + *(_QWORD *)(a3 + 96);
            v43 = v38[1];
            if (!v38[1])
              continue;
          }
          else
          {
            v42 = 0;
            v43 = v38[1];
            if (!v38[1])
              continue;
          }
          if (v43 < 0x11 || *(_BYTE *)(v14 + 53) != 0)
          {
            v45 = *(unsigned __int8 *)(v14 + 32 + i);
            v46 = !*(_BYTE *)(v14 + 53) && v45 >= 0xF;
            v47 = !v46;
            if (*(_BYTE *)(v14 + 32 + i))
            {
              if (v47)
              {
                v82 = *((unsigned __int16 *)v38 + 1);
                RawExtension = (void *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v14, v45, v43, v34, v20, v21, v22, v23);
                if (v49)
                {
                  if (v49 == v43)
                    memcpy(RawExtension, (const void *)(v42 + v82), v43);
                }
              }
            }
          }
        }
      }
    }
LABEL_23:
    ;
  }
  if (!*((_BYTE *)a2 + 232) && *((_BYTE *)a2 + 234))
    goto LABEL_108;
  v50 = (_QWORD *)((char *)a2 + 208);
  if (*((char *)a2 + 231) < 0)
  {
    v51 = *((_QWORD *)a2 + 27);
    if (!v51)
      goto LABEL_83;
    if ((v51 & 0x8000000000000000) == 0 && *v50)
      goto LABEL_64;
LABEL_125:
    __break(1u);
LABEL_126:
    v80 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender.cc", 694, "rtx_payload", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v20, v21, v22, v23, v81);
    return (unsigned int *)rtc::FunctionView<std::unique_ptr<webrtc::RtpPacketToSend> ()(webrtc::RtpPacketToSend const&)>::CallVoidPtr<webrtc::RTPSender::ReSendPacket(unsigned short)::$_0>(v80);
  }
  v51 = *((unsigned __int8 *)a2 + 231);
  if (!*((_BYTE *)a2 + 231))
    goto LABEL_83;
LABEL_64:
  if (v51 - 256 < 0xFFFFFFFFFFFFFF01 || v51 >= 0x11 && !*(_BYTE *)(v14 + 53))
    goto LABEL_83;
  v52 = *(unsigned __int8 *)(v14 + 48);
  v53 = !*(_BYTE *)(v14 + 53) && v52 >= 0xF;
  v54 = !v53;
  if (!*(_BYTE *)(v14 + 48))
    goto LABEL_83;
  if (!v54)
    goto LABEL_83;
  v55 = (void *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v14, v52, v51, v34, v20, v21, v22, v23);
  if (!v56)
    goto LABEL_83;
  if (*((char *)a2 + 231) < 0)
  {
    v57 = *((_QWORD *)a2 + 27);
    if ((v57 & 0x8000000000000000) == 0)
    {
      v50 = (_QWORD *)*v50;
      if (!v57 || v50)
        goto LABEL_81;
    }
    goto LABEL_125;
  }
  v57 = *((unsigned __int8 *)a2 + 231);
LABEL_81:
  if (v57 <= 0x10)
    memcpy(v55, v50, v57);
LABEL_83:
  v58 = (_QWORD *)((char *)a2 + 184);
  if (*((char *)a2 + 207) < 0)
  {
    v59 = *((_QWORD *)a2 + 24);
    if (!v59)
      goto LABEL_108;
    if ((v59 & 0x8000000000000000) == 0 && *v58)
      goto LABEL_89;
    goto LABEL_125;
  }
  v59 = *((unsigned __int8 *)a2 + 207);
  if (!*((_BYTE *)a2 + 207))
    goto LABEL_108;
LABEL_89:
  if (v59 - 256 < 0xFFFFFFFFFFFFFF01 || v59 >= 0x11 && !*(_BYTE *)(v14 + 53))
    goto LABEL_108;
  v60 = *(unsigned __int8 *)(v14 + 47);
  v61 = !*(_BYTE *)(v14 + 53) && v60 >= 0xF;
  v62 = !v61;
  if (!*(_BYTE *)(v14 + 47))
    goto LABEL_108;
  if (!v62)
    goto LABEL_108;
  v63 = (void *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v14, v60, v59, v34, v20, v21, v22, v23);
  if (!v64)
    goto LABEL_108;
  if (*((char *)a2 + 207) < 0)
  {
    v65 = *((_QWORD *)a2 + 24);
    if ((v65 & 0x8000000000000000) == 0)
    {
      v58 = (_QWORD *)*v58;
      if (!v65 || v58)
        goto LABEL_106;
    }
    goto LABEL_125;
  }
  v65 = *((unsigned __int8 *)a2 + 207);
LABEL_106:
  if (v65 <= 0x10)
    memcpy(v63, v58, v65);
LABEL_108:
  pthread_mutex_unlock(v6);
  v66 = *(_QWORD *)(a3 + 24) + 2;
  *(_QWORD *)(v14 + 24) = 0;
  rtc::CopyOnWriteBuffer::SetSize(v84, *(uint64_t **)(v14 + 16));
  v67 = *(_QWORD *)(v14 + 88);
  if (v67)
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v84, (uint64_t *)(*(_QWORD *)(v67 + 8) - *(_QWORD *)(v14 + 96)));
  *(_QWORD *)(v14 + 24) = v66;
  rtc::CopyOnWriteBuffer::SetSize(v84, (uint64_t *)(*(_QWORD *)(v14 + 16) + v66));
  v68 = *(_QWORD *)(v14 + 88);
  if (!v68)
    goto LABEL_126;
  v69 = *(_QWORD *)(v14 + 16);
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v84, (uint64_t *)(*(_QWORD *)(v68 + 8) - *(_QWORD *)(v14 + 96)));
  v70 = *(_QWORD *)(*(_QWORD *)(v14 + 88) + 16);
  if (!v70)
    goto LABEL_126;
  v71 = (_WORD *)(v70 + *(_QWORD *)(v14 + 96) + v69);
  *v71 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
  v72 = *(_QWORD *)(a3 + 88);
  if (v72)
    v72 = *(_QWORD *)(v72 + 16) + *(_QWORD *)(a3 + 96);
  v73 = *(_QWORD *)(a3 + 24);
  if (v73)
    memcpy(v71 + 1, (const void *)(v72 + *(_QWORD *)(a3 + 16)), v73);
  v74 = *(_QWORD *)(a3 + 176);
  if (v74)
  {
    v75 = (unsigned int *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  result = (unsigned int *)*v83;
  *v83 = v74;
  if (result)
  {
    v77 = result + 2;
    do
    {
      v78 = __ldaxr(v77);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v77));
    if (!v79)
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  }
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)this = v14;
  return result;
}

uint64_t rtc::FunctionView<std::unique_ptr<webrtc::RtpPacketToSend> ()(webrtc::RtpPacketToSend const&)>::CallVoidPtr<webrtc::RTPSender::ReSendPacket(unsigned short)::$_0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  const webrtc::RtpPacketToSend *v7;
  webrtc::RateLimiter *v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 16) + *(unsigned __int8 *)(a2 + 2);
  v7 = *(const webrtc::RtpPacketToSend **)(a1 + 8);
  **(_DWORD **)a1 = v6;
  *a3 = 0;
  v8 = (webrtc::RateLimiter *)*((_QWORD *)v7 + 36);
  if (!v8 || (result = webrtc::RateLimiter::TryUseRate(v8, (int)v6), (_DWORD)result))
  {
    if (**(_BYTE **)(a1 + 16))
    {
      result = (uint64_t)webrtc::RTPSender::BuildRtxPacket((webrtc::RTPSender *)&v25, v7, a2);
      v10 = v25;
      *a3 = v25;
      if (!v10)
        return result;
    }
    else
    {
      result = operator new();
      v10 = result;
      v11 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)(result + 16) = v11;
      *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(result + 46) = *(_QWORD *)(a2 + 46);
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = 0;
      *(_QWORD *)(result + 56) = 0;
      v13 = *(_BYTE **)(a2 + 56);
      v12 = *(_BYTE **)(a2 + 64);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          abort();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)(v10 + 56) = v15;
        v16 = &v15[4 * (v14 >> 2)];
        *(_QWORD *)(v10 + 72) = v16;
        result = (uint64_t)memcpy(v15, v13, v14);
        *(_QWORD *)(v10 + 64) = v16;
      }
      v17 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(v10 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(v10 + 88) = v17;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 24);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(v10 + 112) = v20;
      v21 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(v10 + 144) = v21;
      *(_OWORD *)(v10 + 157) = *(_OWORD *)(a2 + 157);
      v22 = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(v10 + 176) = v22;
      if (v22)
      {
        v23 = (unsigned int *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      *(_OWORD *)(v10 + 184) = *(_OWORD *)(a2 + 184);
      *(_BYTE *)(v10 + 200) = *(_BYTE *)(a2 + 200);
      *a3 = v10;
    }
    *(_WORD *)(v10 + 170) = *(_WORD *)(a2 + 4);
    *(_BYTE *)(v10 + 172) = 1;
    *(_DWORD *)(v10 + 144) = *(_DWORD *)(a2 + 12);
    *(_BYTE *)(v10 + 148) = 1;
  }
  return result;
}

unsigned int *rtc::FunctionView<std::unique_ptr<webrtc::RtpPacketToSend> ()(webrtc::RtpPacketToSend const&)>::CallVoidPtr<webrtc::RTPSender::GeneratePadding(unsigned long,BOOL,BOOL)::$_0>@<X0>(unsigned int *result@<X0>, uint64_t a2@<X1>, webrtc::RTPSender *a3@<X8>)
{
  if (*(_QWORD *)(a2 + 24) + 2 <= **((_QWORD **)result + 1)
                                   + (unint64_t)((double)**(unint64_t **)result * 2.0 + 0.5))
    return webrtc::RTPSender::BuildRtxPacket(a3, *((const webrtc::RtpPacketToSend **)result + 2), a2);
  *(_QWORD *)a3 = 0;
  return result;
}

uint64_t webrtc::RTPSenderAudio::RTPSenderAudio(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v5;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  v5 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_setpolicy_np(&v7, 3);
  pthread_mutex_init(v5, &v7);
  pthread_mutexattr_destroy(&v7);
  *(_WORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 82) = -1;
  *(_DWORD *)(a1 + 84) = 8000;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_setpolicy_np(&v7, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 120), &v7);
  pthread_mutexattr_destroy(&v7);
  *(_QWORD *)(a1 + 184) = a1 + 184;
  *(_QWORD *)(a1 + 192) = a1 + 184;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 209) = -1;
  *(_BYTE *)(a1 + 213) = -1;
  *(_BYTE *)(a1 + 216) = 0;
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_setpolicy_np(&v7, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 224), &v7);
  pthread_mutexattr_destroy(&v7);
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 292) = 0;
  *(_QWORD *)(a1 + 296) = a2;
  *(_QWORD *)(a1 + 304) = 0x8000000000000000;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  return a1;
}

void webrtc::RTPSenderAudio::SendAudio(_QWORD *a1, int *a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  int v35;
  rtc::CopyOnWriteBuffer *v36;
  int v37;
  int v38;
  int v39;
  _BOOL4 v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  rtc::CopyOnWriteBuffer *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  int v62;
  _BYTE *RawExtension;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  _BOOL4 v67;
  _QWORD *v68;
  uint64_t v69;
  rtc::CopyOnWriteBuffer *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  rtc::CopyOnWriteBuffer *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  rtc::CopyOnWriteBuffer *v107;
  unsigned int *v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  void *v117;
  std::string *v118;
  int v119;
  unsigned int v120;
  __int16 v121;
  int v122;
  uint64_t v123;
  void *__p;
  _QWORD *v125;
  _QWORD *v126;
  rtc::CopyOnWriteBuffer *v127;

  v4 = (pthread_mutex_t *)(a1 + 2);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2));
  v5 = *((_DWORD *)a1 + 21);
  if (*((_BYTE *)a2 + 40))
  {
    if (*((_BYTE *)a1 + 292))
      v6 = *((_DWORD *)a1 + 72);
    else
      v6 = 0;
    v9 = *(_DWORD *)(a1[1] + 20);
    v10 = a2[7];
    v11 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, *((_QWORD *)a2 + 4));
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[37] + 16))(a1[37]);
    v13 = a1[38];
    if (v12 != 0x7FFFFFFFFFFFFFFFLL && v13 != 0x8000000000000000)
    {
      v15 = v12 == 0x8000000000000000 || v13 == 0x7FFFFFFFFFFFFFFFLL;
      v16 = v15 || v12 - v13 <= 1000000;
      if (v16 && *((_DWORD *)a1 + 78) == v9 && v6 >= 1 && *((_DWORD *)a1 + 80) == v6 && *((_BYTE *)a1 + 344) && !a1[42])
      {
        v17 = v11
            - a1[41]
            - (uint64_t)((unint64_t)(v10 - *((_DWORD *)a1 + 79)) << 32) / v6;
        if (v17 < 0)
          v17 = (uint64_t)((unint64_t)(v10 - *((_DWORD *)a1 + 79)) << 32) / v6
              - (v11
               - a1[41]);
        if ((uint64_t)llround((double)(unint64_t)v17 * 0.000000232830644) < 2)
        {
          v8 = 0;
          v7 = 0;
          pthread_mutex_unlock(v4);
          if (*((_BYTE *)a1 + 80))
            goto LABEL_41;
LABEL_28:
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 15));
          v18 = a1[25];
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 15));
          if (v18)
          {
            v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
            v20 = v19 / 0x3E8uLL;
            if (v19 % 0x3E8uLL > 0x1F3)
              ++v20;
            if (-v19 % 0x3E8uLL <= 0x1F4)
              v21 = 0;
            else
              v21 = -1;
            if (v19 < 0)
              v20 = v21 - -v19 / 0x3E8uLL;
            if ((uint64_t)(v20 - a1[12]) >= 51)
            {
              *((_DWORD *)a1 + 22) = a2[7];
              pthread_mutex_lock((pthread_mutex_t *)(a1 + 15));
              v22 = a1[25];
              if (v22)
              {
                v23 = (_BYTE *)a1[24];
                v24 = v23[20];
                *((_DWORD *)a1 + 27) = *((_DWORD *)v23 + 4);
                *((_BYTE *)a1 + 112) = v24;
                v25 = *(_QWORD *)v23;
                *(_QWORD *)(v25 + 8) = *((_QWORD *)v23 + 1);
                **((_QWORD **)v23 + 1) = v25;
                a1[25] = v22 - 1;
                operator delete(v23);
                pthread_mutex_unlock((pthread_mutex_t *)(a1 + 15));
                *((_DWORD *)a1 + 23) = v5 / 0x3E8 * *((unsigned __int16 *)a1 + 54);
                *((_WORD *)a1 + 40) = 1;
                goto LABEL_41;
              }
              pthread_mutex_unlock((pthread_mutex_t *)(a1 + 15));
            }
          }
          if (*((_BYTE *)a1 + 80))
            goto LABEL_41;
          if (!*((_QWORD *)a2 + 2))
            return;
          webrtc::RTPSender::AllocatePacket(a1[1], *((_QWORD *)a2 + 7), *((_QWORD *)a2 + 8), &v127);
          v36 = v127;
          v37 = *a2;
          v38 = *((unsigned __int8 *)a2 + 24);
          pthread_mutex_lock(v4);
          v39 = *((unsigned __int8 *)a1 + 213);
          v40 = v39 != v38;
          if (v39 != v38)
          {
            if (v38 != 255
              && (*((unsigned __int8 *)a1 + 209) == v38
               || *((unsigned __int8 *)a1 + 210) == v38
               || *((unsigned __int8 *)a1 + 211) == v38
               || *((unsigned __int8 *)a1 + 212) == v38))
            {
LABEL_73:
              v40 = 0;
              goto LABEL_74;
            }
            if (v39 == 255)
            {
              v40 = 1;
              if (v37 != 2)
                goto LABEL_74;
              *((_BYTE *)a1 + 208) = 1;
              goto LABEL_73;
            }
          }
          if (v37 == 2)
          {
            *((_BYTE *)a1 + 208) = 1;
          }
          else if (*((_BYTE *)a1 + 208))
          {
            *((_BYTE *)a1 + 208) = 0;
            v40 = 1;
          }
LABEL_74:
          pthread_mutex_unlock(v4);
          *(_BYTE *)v36 = v40;
          v41 = *((_QWORD *)v36 + 12);
          v42 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v36 + 11) + 16) + v41 + 1);
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v36 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v36 + 11) + 8) - v41));
          if (v40)
            v43 = 0x80;
          else
            v43 = 0;
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v36 + 11) + 16) + *((_QWORD *)v36 + 12) + 1) = v43 & 0x80 | v42 & 0x7F;
          v44 = *((_BYTE *)a2 + 24);
          v46 = (uint64_t *)((char *)v127 + 88);
          v45 = *((_QWORD *)v127 + 11);
          *((_BYTE *)v127 + 1) = v44;
          v47 = v46[1];
          v48 = *(_BYTE *)(*(_QWORD *)(v45 + 16) + v47 + 1) & 0x80 | v44;
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v46, (uint64_t *)(*(_QWORD *)(v45 + 8) - v47));
          *(_BYTE *)(*(_QWORD *)(*v46 + 16) + v46[1] + 1) = v48;
          v49 = a2[7];
          v51 = (uint64_t *)((char *)v127 + 88);
          v50 = *((_QWORD *)v127 + 11);
          *((_DWORD *)v127 + 2) = v49;
          rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v51, (uint64_t *)(*(_QWORD *)(v50 + 8) - v51[1]));
          *(_DWORD *)(*(_QWORD *)(*v51 + 16) + v51[1] + 4) = bswap32(v49);
          v52 = v127;
          *((_QWORD *)v52 + 14) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
          if (*((_BYTE *)a2 + 52))
            v58 = a2[12];
          else
            v58 = 127;
          if ((v58 & 0x80000000) == 0)
          {
            if (v58 >= 0x80)
            {
LABEL_159:
              v118 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.cc", 20, "audio_level <= 127", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v54, v55, v56, v57, v58);
              webrtc::RTPSenderAudio::SendTelephoneEventPacket((webrtc::RTPSenderAudio *)v118, v119, v120, v121, v122);
              return;
            }
            v59 = *((unsigned __int8 *)v127 + 34);
            if (*((_BYTE *)v127 + 53))
              v60 = 0;
            else
              v60 = v59 >= 0xF;
            v61 = !v60;
            if (*((_BYTE *)v127 + 34))
            {
              if (v61)
              {
                v62 = *a2;
                RawExtension = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension(v127, v59, 1, v53, v54, v55, v56, v57);
                if (v64)
                  *RawExtension = v58 | ((v62 == 1) << 7);
              }
            }
            if (v8)
            {
              v65 = *((unsigned __int8 *)v127 + 38);
              v66 = !*((_BYTE *)v127 + 53) && v65 >= 0xF;
              v67 = !v66;
              if (*((_BYTE *)v127 + 38))
              {
                if (v67)
                {
                  v68 = (_QWORD *)webrtc::RtpPacket::AllocateRawExtension(v127, v65, 16, v53, v54, v55, v56, v57);
                  if (v69)
                  {
                    *v68 = bswap64(v7);
                    if (v69 != 8)
                      v68[1] = 0;
                  }
                }
              }
            }
            v70 = v127;
            v71 = *((_QWORD *)a2 + 2);
            *((_QWORD *)v127 + 3) = 0;
            v58 = (uint64_t)v70 + 88;
            rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v70 + 11, *((uint64_t **)v70 + 2));
            v72 = *((_QWORD *)v70 + 11);
            if (v72)
              rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v70 + 11, (uint64_t *)(*(_QWORD *)(v72 + 8) - *((_QWORD *)v70 + 12)));
            *((_QWORD *)v70 + 3) = v71;
            rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v70 + 11, (uint64_t *)(*((_QWORD *)v70 + 2) + v71));
            v77 = *((_QWORD *)v70 + 11);
            if (v77)
            {
              v78 = *((_QWORD *)v70 + 2);
              rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v70 + 11, (uint64_t *)(*(_QWORD *)(v77 + 8) - *((_QWORD *)v70 + 12)));
              v79 = *(_QWORD *)(*((_QWORD *)v70 + 11) + 16);
              if (v79)
              {
                memcpy((void *)(v79 + *((_QWORD *)v70 + 12) + v78), *((const void **)a2 + 1), *((_QWORD *)a2 + 2));
                pthread_mutex_lock(v4);
                *((_BYTE *)a1 + 213) = a2[6];
                pthread_mutex_unlock(v4);
                v80 = v127;
                v81 = *((_QWORD *)v127 + 15);
                if (*((_BYTE *)v127 + 128) && !v81 || *((_BYTE *)v127 + 128) && v81 == 1)
                {
                  *((_DWORD *)v127 + 34) = v81;
                  *((_BYTE *)v80 + 140) = 1;
                }
                *((_QWORD *)v80 + 15) = 0;
                *((_BYTE *)v80 + 128) = 1;
                *((_BYTE *)v80 + 168) = 1;
                v82 = operator new(8uLL);
                __p = v82;
                *v82 = v80;
                v83 = v82 + 1;
                v84 = (_QWORD *)a1[1];
                v125 = v83;
                v126 = v83;
                v127 = 0;
                webrtc::RTPSender::EnqueuePackets(v84, (unint64_t *)&__p);
                v85 = __p;
                if (__p)
                {
                  v86 = v125;
                  v87 = __p;
                  if (v125 != __p)
                  {
                    do
                    {
                      v89 = (_QWORD *)*--v86;
                      v88 = v89;
                      *v86 = 0;
                      if (v89)
                      {
                        v90 = (unsigned int *)v88[22];
                        if (v90)
                        {
                          v91 = v90 + 2;
                          do
                          {
                            v92 = __ldaxr(v91);
                            v93 = v92 - 1;
                          }
                          while (__stlxr(v93, v91));
                          if (!v93)
                            (*(void (**)(unsigned int *))(*(_QWORD *)v90 + 8))(v90);
                        }
                        v94 = v88[11];
                        if (v94)
                        {
                          v95 = (unsigned int *)(v94 + 24);
                          do
                          {
                            v96 = __ldaxr(v95);
                            v97 = v96 - 1;
                          }
                          while (__stlxr(v97, v95));
                          if (!v97)
                          {
                            v98 = *(_QWORD *)(v94 + 16);
                            *(_QWORD *)(v94 + 16) = 0;
                            if (v98)
                              MEMORY[0x20BD0ADD4](v98, 0x1000C8077774924);
                            MEMORY[0x20BD0ADEC](v94, 0x1010C40EE34DA14);
                          }
                        }
                        v99 = (void *)v88[7];
                        if (v99)
                        {
                          v88[8] = v99;
                          operator delete(v99);
                        }
                        MEMORY[0x20BD0ADEC](v88, 0x1020C4000E59722);
                      }
                    }
                    while (v86 != v85);
                    v87 = __p;
                  }
                  v125 = v85;
                  operator delete(v87);
                }
                pthread_mutex_lock((pthread_mutex_t *)(a1 + 28));
                if (*((_BYTE *)a1 + 216))
                {
                  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 28));
                }
                else
                {
                  *((_BYTE *)a1 + 216) = 1;
                  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 28));
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                    rtc::webrtc_logging_impl::Log("\r\t", v100, v101, v102, v103, v104, v105, v106, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_audio.cc");
                }
                v107 = v127;
                v127 = 0;
                if (v107)
                {
                  v108 = (unsigned int *)*((_QWORD *)v107 + 22);
                  if (v108)
                  {
                    v109 = v108 + 2;
                    do
                    {
                      v110 = __ldaxr(v109);
                      v111 = v110 - 1;
                    }
                    while (__stlxr(v111, v109));
                    if (!v111)
                      (*(void (**)(unsigned int *))(*(_QWORD *)v108 + 8))(v108);
                  }
                  v112 = *((_QWORD *)v107 + 11);
                  if (v112)
                  {
                    v113 = (unsigned int *)(v112 + 24);
                    do
                    {
                      v114 = __ldaxr(v113);
                      v115 = v114 - 1;
                    }
                    while (__stlxr(v115, v113));
                    if (!v115)
                    {
                      v116 = *(_QWORD *)(v112 + 16);
                      *(_QWORD *)(v112 + 16) = 0;
                      if (v116)
                        MEMORY[0x20BD0ADD4](v116, 0x1000C8077774924);
                      MEMORY[0x20BD0ADEC](v112, 0x1010C40EE34DA14);
                    }
                  }
                  v117 = (void *)*((_QWORD *)v107 + 7);
                  if (v117)
                  {
                    *((_QWORD *)v107 + 8) = v117;
                    operator delete(v117);
                  }
                  MEMORY[0x20BD0ADEC](v107, 0x1020C4000E59722);
                }
                return;
              }
            }
            rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_audio.cc", 257, "payload", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v73, v74, v75, v76, v123);
          }
          rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/rtp_headers.cc", 19, "audio_level >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v54, v55, v56, v57, v58);
          goto LABEL_159;
        }
      }
    }
    *((_DWORD *)a1 + 78) = v9;
    *((_DWORD *)a1 + 79) = v10;
    *((_DWORD *)a1 + 80) = v6;
    a1[41] = v11;
    a1[42] = 0;
    v8 = 1;
    *((_BYTE *)a1 + 344) = 1;
    a1[38] = v12;
    v7 = v11;
    pthread_mutex_unlock(v4);
    if (!*((_BYTE *)a1 + 80))
      goto LABEL_28;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    pthread_mutex_unlock(v4);
    if (!*((_BYTE *)a1 + 80))
      goto LABEL_28;
  }
LABEL_41:
  if (*a2)
  {
    v26 = a2[7];
  }
  else
  {
    v26 = a2[7];
    if (v26 - *((_DWORD *)a1 + 26) < 50 * v5 / 0x3E8)
      return;
  }
  *((_DWORD *)a1 + 26) = v26;
  v27 = *((_DWORD *)a1 + 22);
  v28 = *((_DWORD *)a1 + 23);
  v29 = v26 - v27;
  if (v28 > v26 - v27)
  {
    if (v26 == v27)
      return;
  }
  else
  {
    *((_BYTE *)a1 + 80) = 0;
    v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    v31 = v30 / 0x3E8uLL;
    if (v30 % 0x3E8uLL > 0x1F3)
      ++v31;
    if (-v30 % 0x3E8uLL <= 0x1F4)
      v32 = 0;
    else
      v32 = -1;
    if (v30 < 0)
      v31 = v32 - -v30 / 0x3E8uLL;
    a1[12] = v31;
    v27 = *((_DWORD *)a1 + 22);
  }
  if (v29 < 0x10000)
  {
    webrtc::RTPSenderAudio::SendTelephoneEventPacket((webrtc::RTPSenderAudio *)a1, v28 <= v29, v27, v29, *((_BYTE *)a1 + 81) == 0);
    *((_BYTE *)a1 + 81) = 1;
  }
  else
  {
    v33 = v28 <= v29;
    webrtc::RTPSenderAudio::SendTelephoneEventPacket((webrtc::RTPSenderAudio *)a1, v33, v27, 0xFFFF, 0);
    v34 = a2[7];
    v35 = *((_DWORD *)a1 + 23) - 0xFFFF;
    *((_DWORD *)a1 + 22) = v34;
    *((_DWORD *)a1 + 23) = v35;
    webrtc::RTPSenderAudio::SendTelephoneEventPacket((webrtc::RTPSenderAudio *)a1, v33, v34, v29 + 1, 0);
  }
}

void webrtc::RTPSenderAudio::SendTelephoneEventPacket(webrtc::RTPSenderAudio *this, int a2, unsigned int a3, __int16 a4, int a5)
{
  BOOL v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  rtc::CopyOnWriteBuffer *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  rtc::CopyOnWriteBuffer *v32;
  rtc::CopyOnWriteBuffer *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  rtc::CopyOnWriteBuffer *v38;
  uint64_t v39;
  char *v40;
  rtc::CopyOnWriteBuffer *v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  _QWORD *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  int64x2_t v84;
  char v85;
  char v86;
  char v87;
  void *__p[2];
  void *v89;
  rtc::CopyOnWriteBuffer *v90;
  void *v91[2];
  void *v92;

  v9 = a2 == 0;
  if (a2)
    v10 = 3;
  else
    v10 = 1;
  v91[0] = 0;
  v91[1] = 0;
  v92 = 0;
  if (v9)
    v11 = 0;
  else
    v11 = 0x80;
  v86 = v11;
  v83 = v10;
  std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::reserve((uint64_t)v91, v10);
  v12 = 0;
  v87 = a5;
  if (a5)
    v13 = 0x80;
  else
    v13 = 0;
  v85 = v13;
  v84 = vdupq_n_s64(0x10uLL);
  v14 = a3;
  v15 = bswap32(a3);
  do
  {
    v16 = operator new();
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 46) = 0;
    v17 = (uint64_t *)(v16 + 88);
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    v18 = operator new();
    *(int64x2_t *)v18 = v84;
    *(_QWORD *)(v18 + 16) = operator new[]();
    *(_DWORD *)(v18 + 24) = 0;
    v19 = (unsigned int *)(v18 + 24);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_OWORD *)(v16 + 96) = xmmword_208F1AB20;
    *(_WORD *)v16 = 0;
    *(_WORD *)(v16 + 4) = 0;
    *(_QWORD *)(v16 + 8) = 0;
    *(_OWORD *)(v16 + 16) = xmmword_208F1A8D0;
    *(_BYTE *)(v16 + 2) = 0;
    *(_QWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 88) = v18;
    *(_QWORD *)(v16 + 64) = *(_QWORD *)(v16 + 56);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)0x10);
    v21 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 16) + *(_QWORD *)(v16 + 96);
    *(_DWORD *)(v21 + 8) = 0;
    *(_QWORD *)v21 = 0;
    rtc::CopyOnWriteBuffer::SetSize(v17, (uint64_t *)0xC);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 8) - *(_QWORD *)(v16 + 96)));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16) + *(_QWORD *)(v16 + 96)) = 0x80;
    *(_QWORD *)(v16 + 112) = 0;
    *(_BYTE *)(v16 + 120) = 0;
    *(_BYTE *)(v16 + 128) = 0;
    *(_BYTE *)(v16 + 136) = 0;
    *(_BYTE *)(v16 + 140) = 0;
    *(_BYTE *)(v16 + 144) = 0;
    *(_BYTE *)(v16 + 148) = 0;
    *(_BYTE *)(v16 + 152) = 0;
    *(_BYTE *)(v16 + 160) = 0;
    *(_BYTE *)(v16 + 168) = 0;
    *(_BYTE *)(v16 + 170) = 0;
    *(_BYTE *)(v16 + 172) = 0;
    *(_BYTE *)(v16 + 192) = 0;
    *(_BYTE *)(v16 + 200) = 0;
    *(_QWORD *)(v16 + 176) = 0;
    *(_DWORD *)(v16 + 184) = 0;
    v90 = (rtc::CopyOnWriteBuffer *)v16;
    v22 = *((_BYTE *)this + 110);
    *(_BYTE *)(v16 + 1) = v22;
    v23 = *(_QWORD *)(v16 + 96);
    v24 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16) + v23 + 1) & 0x80 | v22;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v17, (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 8) - v23));
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 16) + *(_QWORD *)(v16 + 96) + 1) = v24;
    v25 = v90;
    *(_BYTE *)v90 = v87;
    v26 = *((_QWORD *)v25 + 12);
    v27 = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v25 + 11) + 16) + v26 + 1);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v25 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v25 + 11) + 8) - v26));
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v25 + 11) + 16) + *((_QWORD *)v25 + 12) + 1) = v27 & 0x7F | v85;
    LODWORD(v25) = *(_DWORD *)(*((_QWORD *)this + 1) + 20);
    v29 = (uint64_t *)((char *)v90 + 88);
    v28 = *((_QWORD *)v90 + 11);
    *((_DWORD *)v90 + 3) = (_DWORD)v25;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v29, (uint64_t *)(*(_QWORD *)(v28 + 8) - v29[1]));
    *(_DWORD *)(*(_QWORD *)(*v29 + 16) + v29[1] + 8) = bswap32(v25);
    v31 = (uint64_t *)((char *)v90 + 88);
    v30 = *((_QWORD *)v90 + 11);
    *((_DWORD *)v90 + 2) = v14;
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v31, (uint64_t *)(*(_QWORD *)(v30 + 8) - v31[1]));
    *(_DWORD *)(*(_QWORD *)(*v31 + 16) + v31[1] + 4) = v15;
    v32 = v90;
    *((_QWORD *)v32 + 14) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    v33 = v90;
    *((_QWORD *)v90 + 3) = 0;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v33 + 11, *((uint64_t **)v33 + 2));
    v34 = *((_QWORD *)v33 + 11);
    if (v34)
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v33 + 11, (uint64_t *)(*(_QWORD *)(v34 + 8) - *((_QWORD *)v33 + 12)));
    *((_QWORD *)v33 + 3) = 4;
    rtc::CopyOnWriteBuffer::SetSize((uint64_t *)v33 + 11, (uint64_t *)(*((_QWORD *)v33 + 2) + 4));
    v35 = *((_QWORD *)v33 + 2);
    rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)v33 + 11, (uint64_t *)(*(_QWORD *)(*((_QWORD *)v33 + 11) + 8) - *((_QWORD *)v33 + 12)));
    v36 = (_BYTE *)(*(_QWORD *)(*((_QWORD *)v33 + 11) + 16) + *((_QWORD *)v33 + 12) + v35);
    v37 = *((_BYTE *)this + 112);
    *v36 = *((_BYTE *)this + 111);
    v36[1] = v37 | v86;
    v36[2] = HIBYTE(a4);
    v36[3] = a4;
    v38 = v90;
    v39 = *((_QWORD *)v90 + 15);
    if (*((_BYTE *)v90 + 128) && !v39 || *((_BYTE *)v90 + 128) && v39 == 1)
    {
      *((_DWORD *)v90 + 34) = v39;
      *((_BYTE *)v38 + 140) = 1;
    }
    *((_QWORD *)v38 + 15) = 0;
    *((_BYTE *)v38 + 128) = 1;
    *((_BYTE *)v38 + 168) = 1;
    v40 = (char *)v91[1];
    if (v91[1] >= v92)
    {
      v91[1] = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(v91, (uint64_t *)&v90);
      v41 = v90;
      v90 = 0;
      if (!v41)
        goto LABEL_12;
LABEL_27:
      v42 = (unsigned int *)*((_QWORD *)v41 + 22);
      if (v42)
      {
        v43 = v42 + 2;
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
          (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
      }
      v46 = *((_QWORD *)v41 + 11);
      if (v46)
      {
        v47 = (unsigned int *)(v46 + 24);
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
        {
          v50 = *(_QWORD *)(v46 + 16);
          *(_QWORD *)(v46 + 16) = 0;
          if (v50)
            MEMORY[0x20BD0ADD4](v50, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v46, 0x1010C40EE34DA14);
        }
      }
      v51 = (void *)*((_QWORD *)v41 + 7);
      if (v51)
      {
        *((_QWORD *)v41 + 8) = v51;
        operator delete(v51);
      }
      MEMORY[0x20BD0ADEC](v41, 0x1020C4000E59722);
      goto LABEL_12;
    }
    if (!v91[1])
    {
      __break(1u);
      return;
    }
    v90 = 0;
    *(_QWORD *)v91[1] = v38;
    v91[1] = v40 + 8;
    v41 = v90;
    v90 = 0;
    if (v41)
      goto LABEL_27;
LABEL_12:
    ++v12;
  }
  while (v12 != v83);
  v52 = (_QWORD *)*((_QWORD *)this + 1);
  *(_OWORD *)__p = *(_OWORD *)v91;
  v89 = v92;
  v91[1] = 0;
  v92 = 0;
  v91[0] = 0;
  webrtc::RTPSender::EnqueuePackets(v52, (unint64_t *)__p);
  v53 = __p[0];
  if (__p[0])
  {
    v54 = __p[1];
    v55 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v57 = (_QWORD *)*--v54;
        v56 = v57;
        *v54 = 0;
        if (v57)
        {
          v58 = (unsigned int *)v56[22];
          if (v58)
          {
            v59 = v58 + 2;
            do
            {
              v60 = __ldaxr(v59);
              v61 = v60 - 1;
            }
            while (__stlxr(v61, v59));
            if (!v61)
              (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
          }
          v62 = v56[11];
          if (v62)
          {
            v63 = (unsigned int *)(v62 + 24);
            do
            {
              v64 = __ldaxr(v63);
              v65 = v64 - 1;
            }
            while (__stlxr(v65, v63));
            if (!v65)
            {
              v66 = *(_QWORD *)(v62 + 16);
              *(_QWORD *)(v62 + 16) = 0;
              if (v66)
                MEMORY[0x20BD0ADD4](v66, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v62, 0x1010C40EE34DA14);
            }
          }
          v67 = (void *)v56[7];
          if (v67)
          {
            v56[8] = v67;
            operator delete(v67);
          }
          MEMORY[0x20BD0ADEC](v56, 0x1020C4000E59722);
        }
      }
      while (v54 != v53);
      v55 = __p[0];
    }
    __p[1] = v53;
    operator delete(v55);
  }
  v68 = v91[0];
  if (v91[0])
  {
    v69 = v91[1];
    v70 = v91[0];
    if (v91[1] != v91[0])
    {
      do
      {
        v72 = (_QWORD *)*--v69;
        v71 = v72;
        *v69 = 0;
        if (v72)
        {
          v73 = (unsigned int *)v71[22];
          if (v73)
          {
            v74 = v73 + 2;
            do
            {
              v75 = __ldaxr(v74);
              v76 = v75 - 1;
            }
            while (__stlxr(v76, v74));
            if (!v76)
              (*(void (**)(unsigned int *))(*(_QWORD *)v73 + 8))(v73);
          }
          v77 = v71[11];
          if (v77)
          {
            v78 = (unsigned int *)(v77 + 24);
            do
            {
              v79 = __ldaxr(v78);
              v80 = v79 - 1;
            }
            while (__stlxr(v80, v78));
            if (!v80)
            {
              v81 = *(_QWORD *)(v77 + 16);
              *(_QWORD *)(v77 + 16) = 0;
              if (v81)
                MEMORY[0x20BD0ADD4](v81, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v77, 0x1010C40EE34DA14);
            }
          }
          v82 = (void *)v71[7];
          if (v82)
          {
            v71[8] = v82;
            operator delete(v82);
          }
          MEMORY[0x20BD0ADEC](v71, 0x1020C4000E59722);
        }
      }
      while (v69 != v68);
      v70 = v91[0];
    }
    v91[1] = v68;
    operator delete(v70);
  }
}

void webrtc::RtpSenderEgress::NonPacedPacketSender::~NonPacedPacketSender(webrtc::RtpSenderEgress::NonPacedPacketSender *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24C0BDBD0;
  v1 = *((_QWORD *)this + 5);
  *(_BYTE *)(v1 + 4) = 0;
  do
  {
    v2 = __ldaxr((unsigned int *)v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)v1));
  if (!v3)
    MEMORY[0x20BD0ADEC]();
}

{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;

  *(_QWORD *)this = &off_24C0BDBD0;
  v1 = *((_QWORD *)this + 5);
  *(_BYTE *)(v1 + 4) = 0;
  do
  {
    v2 = __ldaxr((unsigned int *)v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)v1));
  if (!v3)
    MEMORY[0x20BD0ADEC]();
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtpSenderEgress::NonPacedPacketSender::EnqueuePackets(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  webrtc::RtpPacketToSend **v14;
  webrtc::RtpPacketToSend **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  __int16 v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  _WORD *RawExtension;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  webrtc::RtpPacket *v39;
  webrtc::RtpPacket *v40;
  unsigned int *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  _QWORD *v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  _QWORD *v70;
  _QWORD *v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  void *v81;
  __int128 v82;
  void *__p;
  __int128 v84;
  webrtc::RtpPacket *v85;
  char v86;
  char v87;
  void *v88;
  __int128 v89;
  uint64_t (*v90)(uint64_t);

  v2 = *(_QWORD *)(a1 + 8);
  {
    v9 = *(unsigned int **)(a1 + 40);
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = *((_QWORD *)v3 + 2);
    v82 = *v3;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    v12 = operator new();
    *(_QWORD *)v12 = a1;
    *(_OWORD *)(v12 + 8) = v82;
    *(_QWORD *)(v12 + 24) = v11;
    v13 = (_QWORD *)operator new();
    *v13 = v9;
    v13[1] = v12;
    v13[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpSenderEgress::NonPacedPacketSender::EnqueuePackets(std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>)::$_0>;
    v13[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpSenderEgress::NonPacedPacketSender::EnqueuePackets(std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>)::$_0 &&>;
    v88 = v13;
    *((_QWORD *)&v89 + 1) = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v90 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, void **, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v88, &v87, &v86);
    (*((void (**)(uint64_t, void **, void **))&v89 + 1))(1, &v88, &v88);
    return;
  }
  v14 = *(webrtc::RtpPacketToSend ***)v3;
  v15 = (webrtc::RtpPacketToSend **)*((_QWORD *)v3 + 1);
  if (*(webrtc::RtpPacketToSend ***)v3 != v15)
  {
    while (1)
    {
      v16 = (unsigned __int8 *)*v14;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 28);
      if ((v17 & 0xFF00000000) == 0 || *((_DWORD *)*v14 + 3) != (_DWORD)v17)
        webrtc::PacketSequencer::Sequence(*(uint64_t **)(a1 + 32), *v14);
      v19 = *(_WORD *)(a1 + 16);
      *(_WORD *)(a1 + 16) = v19 + 1;
      v20 = v16[40];
      if (v16[53])
        v21 = 0;
      else
        v21 = v20 >= 0xF;
      v22 = !v21;
      if (v16[40])
        v23 = v22 == 0;
      else
        v23 = 1;
      if (v23)
        goto LABEL_28;
      RawExtension = (_WORD *)webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v16, v20, 2, v4, v5, v6, v7, v8);
      if (!v25)
        break;
      *RawExtension = bswap32(*(unsigned __int16 *)(a1 + 16)) >> 16;
LABEL_29:
      v26 = v16[33];
      if (v16[53])
        v27 = 0;
      else
        v27 = v26 >= 0xF;
      v28 = !v27;
      if (v16[33])
        v29 = v28 == 0;
      else
        v29 = 1;
      if (!v29)
      {
        v30 = webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v16, v26, 3, v4, v5, v6, v7, v8);
        if (v31)
        {
          *(_BYTE *)(v30 + 2) = 0;
          *(_WORD *)v30 = 0;
        }
      }
      v32 = v16[37];
      if (v16[53])
        v33 = 0;
      else
        v33 = v32 >= 0xF;
      v34 = !v33;
      if (v16[37])
        v35 = v34 == 0;
      else
        v35 = 1;
      if (!v35)
      {
        v36 = webrtc::RtpPacket::AllocateRawExtension((webrtc::RtpPacket *)v16, v32, 3, v4, v5, v6, v7, v8);
        if (v37)
        {
          *(_BYTE *)(v36 + 2) = 0;
          *(_WORD *)v36 = 0;
        }
      }
      v38 = *(_QWORD *)(a1 + 24);
      v39 = *v14;
      *v14 = 0;
      v85 = v39;
      v88 = 0;
      v89 = xmmword_208F08CB0;
      webrtc::RtpSenderEgress::SendPacket(v38, &v85, (uint64_t)&v88);
      v40 = v85;
      v85 = 0;
      if (v40)
      {
        v41 = (unsigned int *)*((_QWORD *)v40 + 22);
        if (v41)
        {
          v42 = v41 + 2;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
            (*(void (**)(unsigned int *))(*(_QWORD *)v41 + 8))(v41);
        }
        v45 = *((_QWORD *)v40 + 11);
        if (v45)
        {
          v46 = (unsigned int *)(v45 + 24);
          do
          {
            v47 = __ldaxr(v46);
            v48 = v47 - 1;
          }
          while (__stlxr(v48, v46));
          if (!v48)
          {
            v49 = *(_QWORD *)(v45 + 16);
            *(_QWORD *)(v45 + 16) = 0;
            if (v49)
              MEMORY[0x20BD0ADD4](v49, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v45, 0x1010C40EE34DA14);
          }
        }
        v50 = (void *)*((_QWORD *)v40 + 7);
        if (v50)
        {
          *((_QWORD *)v40 + 8) = v50;
          operator delete(v50);
        }
        MEMORY[0x20BD0ADEC](v40, 0x1020C4000E59722);
      }
      if (++v14 == v15)
        goto LABEL_68;
    }
    v19 = *(_WORD *)(a1 + 16) - 1;
LABEL_28:
    *(_WORD *)(a1 + 16) = v19;
    goto LABEL_29;
  }
LABEL_68:
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
  if (v51)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v51 + 64))(&v88);
    v52 = v88;
    if (v88 != (void *)v89)
    {
      __p = v88;
      v84 = v89;
      v89 = 0uLL;
      v88 = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, &__p);
      v53 = __p;
      if (__p)
      {
        v54 = (_QWORD *)v84;
        v55 = __p;
        if ((void *)v84 != __p)
        {
          do
          {
            v57 = (_QWORD *)*--v54;
            v56 = v57;
            *v54 = 0;
            if (v57)
            {
              v58 = (unsigned int *)v56[22];
              if (v58)
              {
                v59 = v58 + 2;
                do
                {
                  v60 = __ldaxr(v59);
                  v61 = v60 - 1;
                }
                while (__stlxr(v61, v59));
                if (!v61)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v58 + 8))(v58);
              }
              v62 = v56[11];
              if (v62)
              {
                v63 = (unsigned int *)(v62 + 24);
                do
                {
                  v64 = __ldaxr(v63);
                  v65 = v64 - 1;
                }
                while (__stlxr(v65, v63));
                if (!v65)
                {
                  v66 = *(_QWORD *)(v62 + 16);
                  *(_QWORD *)(v62 + 16) = 0;
                  if (v66)
                    MEMORY[0x20BD0ADD4](v66, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v62, 0x1010C40EE34DA14);
                }
              }
              v67 = (void *)v56[7];
              if (v67)
              {
                v56[8] = v67;
                operator delete(v67);
              }
              MEMORY[0x20BD0ADEC](v56, 0x1020C4000E59722);
            }
          }
          while (v54 != v53);
          v55 = __p;
        }
        *(_QWORD *)&v84 = v53;
        operator delete(v55);
      }
      v52 = v88;
    }
    if (v52)
    {
      v68 = (_QWORD *)v89;
      v69 = v52;
      if ((_QWORD *)v89 != v52)
      {
        do
        {
          v71 = (_QWORD *)*--v68;
          v70 = v71;
          *v68 = 0;
          if (v71)
          {
            v72 = (unsigned int *)v70[22];
            if (v72)
            {
              v73 = v72 + 2;
              do
              {
                v74 = __ldaxr(v73);
                v75 = v74 - 1;
              }
              while (__stlxr(v75, v73));
              if (!v75)
                (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
            }
            v76 = v70[11];
            if (v76)
            {
              v77 = (unsigned int *)(v76 + 24);
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                v80 = *(_QWORD *)(v76 + 16);
                *(_QWORD *)(v76 + 16) = 0;
                if (v80)
                  MEMORY[0x20BD0ADD4](v80, 0x1000C8077774924);
                MEMORY[0x20BD0ADEC](v76, 0x1010C40EE34DA14);
              }
            }
            v81 = (void *)v70[7];
            if (v81)
            {
              v70[8] = v81;
              operator delete(v81);
            }
            MEMORY[0x20BD0ADEC](v70, 0x1020C4000E59722);
          }
        }
        while (v68 != v52);
        v69 = v88;
      }
      *(_QWORD *)&v89 = v52;
      operator delete(v69);
    }
  }
}

void webrtc::RtpSenderEgress::SendPacket(uint64_t a1, webrtc::RtpPacket **a2, uint64_t a3)
{
  webrtc::RtpPacket *v6;
  int v7;
  _BYTE *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  webrtc::RtpPacket *v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  __int128 v37;
  webrtc::RtpPacket *v38;
  uint64_t v39;
  webrtc::RtpPacket *v40;
  unsigned int *v41;
  unsigned int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  webrtc::RtpPacket *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  size_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  webrtc::RtpPacket *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  webrtc::RtpPacket *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  webrtc::RtpPacket *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  webrtc::RtpPacket *v83;
  unsigned int *v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  int v102;
  unint64_t v103;
  _BYTE *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _WORD *v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v113;
  unint64_t v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  __int128 v126;
  char *v127;
  _QWORD *v128;
  _QWORD *v129;
  unsigned int *v130;
  unsigned int *v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  int v145;
  _BYTE *RawExtension;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  _BYTE v158[54];
  void *__p;
  void *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  uint64_t v168;
  __int128 v169;
  unsigned __int8 v170;
  uint64_t v171;

  v171 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = *((_DWORD *)*a2 + 3);
  if (v7 == *(_DWORD *)(a1 + 16) && (!*((_BYTE *)v6 + 128) || *((_QWORD *)v6 + 15) != 2))
  {
    *(_WORD *)(a1 + 88) = *((_WORD *)v6 + 2);
    v9 = (_BYTE *)(a1 + 90);
LABEL_13:
    *v9 = 1;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 24))
    v10 = v7 == *(_DWORD *)(a1 + 20);
  else
    v10 = 0;
  if (v10)
  {
    *(_WORD *)(a1 + 92) = *((_WORD *)v6 + 2);
    v9 = (_BYTE *)(a1 + 94);
    goto LABEL_13;
  }
LABEL_14:
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  v17 = *a2;
  if (*(_BYTE *)(a1 + 73))
  {
    if (*((_BYTE *)v17 + 128) && *((_QWORD *)v17 + 15) == 1)
    {
      webrtc::RtpSequenceNumberMap::InsertPacket(*(_QWORD **)(a1 + 440), *((unsigned __int16 *)v17 + 2), (*((_DWORD *)v17 + 2) - *(_DWORD *)(a1 + 124)) | ((unint64_t)*((unsigned __int8 *)v17 + 184) << 32) | ((unint64_t)*(unsigned __int8 *)v17 << 40));
      v17 = *a2;
    }
  }
  v19 = *(_QWORD *)(a1 + 80);
  if (v19 && *((_BYTE *)v17 + 186))
  {
    LOBYTE(v155) = 0;
    v157 = 0;
    if (*(_BYTE *)(a1 + 432))
    {
      v156 = *(_QWORD *)(a1 + 424);
      v155 = *(_OWORD *)(a1 + 408);
      v157 = 1;
      *(_BYTE *)(a1 + 432) = 0;
      (*(void (**)(uint64_t, __int128 *, unint64_t))(*(_QWORD *)v19 + 48))(v19, &v155, (unint64_t)&v155 | 0xC);
      v17 = *a2;
    }
    if (*((_BYTE *)v17 + 187))
    {
      v20 = *(_OWORD *)v17;
      v21 = *((_OWORD *)v17 + 1);
      v22 = *((_OWORD *)v17 + 2);
      *(_QWORD *)&v158[46] = *(_QWORD *)((char *)v17 + 46);
      *(_OWORD *)&v158[16] = v21;
      *(_OWORD *)&v158[32] = v22;
      *(_OWORD *)v158 = v20;
      v160 = 0;
      v161 = 0;
      __p = 0;
      v24 = (_BYTE *)*((_QWORD *)v17 + 7);
      v23 = (_BYTE *)*((_QWORD *)v17 + 8);
      v25 = v23 - v24;
      if (v23 != v24)
      {
        if (v25 < 0)
          goto LABEL_217;
        __p = operator new(v23 - v24);
        v160 = __p;
        v26 = (char *)__p + 4 * (v25 >> 2);
        v161 = v26;
        memcpy(__p, v24, v25);
        v160 = v26;
      }
      v27 = *((_QWORD *)v17 + 11);
      v162 = *((_QWORD *)v17 + 10);
      v163 = v27;
      if (v27)
      {
        v28 = (unsigned int *)(v27 + 24);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = *((_OWORD *)v17 + 6);
      v31 = *((_OWORD *)v17 + 7);
      v32 = *((_OWORD *)v17 + 8);
      v33 = *((_OWORD *)v17 + 9);
      *(_OWORD *)((char *)v167 + 13) = *(_OWORD *)((char *)v17 + 157);
      v166 = v32;
      v167[0] = v33;
      v164 = v30;
      v165 = v31;
      v34 = *((_QWORD *)v17 + 22);
      v168 = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v34 + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
      }
      v37 = *(_OWORD *)((char *)v17 + 184);
      v170 = *((_BYTE *)v17 + 200);
      v169 = v37;
      v38 = *a2;
      v39 = *((_QWORD *)*a2 + 11);
      v40 = *a2;
      if (v39)
      {
        v41 = (unsigned int *)(v39 + 24);
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
        v40 = *a2;
      }
      v158[1] = *(_BYTE *)(*(_QWORD *)(v39 + 16) + *((_QWORD *)v38 + 12) + *((_QWORD *)v40 + 2));
      v43 = *(_BYTE *)(*(_QWORD *)(v163 + 16) + v164 + 1) & 0x80 | v158[1];
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(&v163, (uint64_t *)(*(_QWORD *)(v163 + 8) - v164));
      *(_BYTE *)(*(_QWORD *)(v163 + 16) + v164 + 1) = v43;
      *(_QWORD *)&v158[24] = *((_QWORD *)*a2 + 3) - 1;
      rtc::CopyOnWriteBuffer::SetSize(&v163, (uint64_t *)(*(_QWORD *)&v158[16] + *(_QWORD *)&v158[24]));
      v44 = *(_QWORD *)&v158[16];
      v45 = v163;
      if (v163)
      {
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(&v163, (uint64_t *)(*(_QWORD *)(v163 + 8) - v164));
        v45 = *(_QWORD *)(v163 + 16) + v164;
      }
      v46 = *a2;
      v47 = *((_QWORD *)*a2 + 11);
      if (v47)
      {
        v47 = *(_QWORD *)(v47 + 16) + *((_QWORD *)v46 + 12);
        v48 = *((_QWORD *)v46 + 2);
        v49 = *((_QWORD *)v46 + 3);
        v50 = v47 + v48;
        v51 = v49 == 0;
        if (!v49)
          v50 = 0;
      }
      else
      {
        v48 = *((_QWORD *)v46 + 2);
        v49 = *((_QWORD *)v46 + 3);
        v51 = v49 == 0;
        if (v49)
          v50 = v48;
        else
          v50 = 0;
      }
      v52 = (_BYTE *)(v50 + 1);
      v53 = v47 + v48;
      if (v51)
        v53 = 0;
      v54 = (_BYTE *)(v53 + v49);
      v55 = v54 - v52;
      if (v54 != v52)
        memmove((void *)(v45 + v44), v52, v55);
      (*(void (**)(_QWORD, _BYTE *, size_t))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80), v158, v55);
      v56 = (unsigned int *)(v39 + 24);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        v59 = *(_QWORD *)(v39 + 16);
        *(_QWORD *)(v39 + 16) = 0;
        if (v59)
          MEMORY[0x20BD0ADD4](v59, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v39, 0x1010C40EE34DA14);
      }
      v60 = v168;
      if (v168)
      {
        v61 = (unsigned int *)(v168 + 8);
        do
        {
          v62 = __ldaxr(v61);
          v63 = v62 - 1;
        }
        while (__stlxr(v63, v61));
        if (!v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      }
      v64 = v163;
      if (v163)
      {
        v65 = (unsigned int *)(v163 + 24);
        do
        {
          v66 = __ldaxr(v65);
          v67 = v66 - 1;
        }
        while (__stlxr(v67, v65));
        if (!v67)
        {
          v68 = *(_QWORD *)(v64 + 16);
          *(_QWORD *)(v64 + 16) = 0;
          if (v68)
            MEMORY[0x20BD0ADD4](v68, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v64, 0x1010C40EE34DA14);
        }
      }
      if (__p)
      {
        v160 = __p;
        operator delete(__p);
      }
    }
    else
    {
      (*(void (**)(_QWORD, webrtc::RtpPacket *))(**(_QWORD **)(a1 + 80) + 56))(*(_QWORD *)(a1 + 80), v17);
    }
    v17 = *a2;
  }
  v69 = *((unsigned __int8 *)v17 + 33);
  if (*((_BYTE *)v17 + 33))
  {
    v70 = (unsigned __int8 *)*((_QWORD *)v17 + 7);
    v71 = (unsigned __int8 *)*((_QWORD *)v17 + 8);
    if (v70 != v71)
    {
      while (*v70 != (_DWORD)v69)
      {
        v70 += 4;
        if (v70 == v71)
          goto LABEL_78;
      }
      v96 = *((_QWORD *)v17 + 14);
      if (v96 >= 1)
      {
        v97 = 0x7FFFFFFFFFFFFFFFLL;
        if (v16 != 0x7FFFFFFFFFFFFFFFLL
          && ((v97 = 0x8000000000000000, v16 == 0x8000000000000000)
           || v96 == 0x7FFFFFFFFFFFFFFFLL
           || (v97 = v16 - v96, v16 - v96 < 0)))
        {
          v143 = -(uint64_t)v97;
          v144 = v143 / 0x3E8;
          if (v143 % 0x3E8 <= 0x1F4)
            v145 = 0;
          else
            v145 = -1;
          v98 = v145 - v144;
          if (*((_BYTE *)v17 + 53))
          {
LABEL_198:
            RawExtension = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension(v17, v69, 3, v11, v12, v13, v14, v15);
            if (v147)
            {
              *RawExtension = (90 * v98) >> 16;
              RawExtension[1] = (unsigned __int16)(90 * v98) >> 8;
              RawExtension[2] = 90 * v98;
            }
            goto LABEL_78;
          }
        }
        else
        {
          if (v97 % 0x3E8 <= 0x1F3)
            v98 = v97 / 0x3E8;
          else
            v98 = v97 / 0x3E8 + 1;
          if (*((_BYTE *)v17 + 53))
            goto LABEL_198;
        }
        if (v69 > 0xE)
          goto LABEL_78;
        goto LABEL_198;
      }
    }
  }
LABEL_78:
  v72 = *a2;
  v73 = *((unsigned __int8 *)*a2 + 37);
  if (*((_BYTE *)*a2 + 37))
  {
    v74 = (unsigned __int8 *)*((_QWORD *)v72 + 7);
    v75 = (unsigned __int8 *)*((_QWORD *)v72 + 8);
    if (v74 != v75)
    {
      while (*v74 != (_DWORD)v73)
      {
        v74 += 4;
        if (v74 == v75)
          goto LABEL_82;
      }
      if (*(_BYTE *)(a1 + 488))
      {
        v99 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v16);
        v100 = *((unsigned __int8 *)v72 + 37);
        if (*((_BYTE *)v72 + 53))
          v101 = 0;
        else
          v101 = v100 >= 0xF;
        v102 = !v101;
        if (*((_BYTE *)v72 + 37))
        {
          if (v102)
          {
            v103 = v99;
            v104 = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension(v72, v100, 3, v11, v12, v13, v14, v15);
            if (v105)
            {
              v106 = v103 >> 14;
              *v104 = v103 >> 30;
              v107 = v103 >> 22;
LABEL_180:
              v104[1] = v107;
              v104[2] = v106;
            }
          }
        }
      }
      else if (v73 < 0xF || *((_BYTE *)v72 + 53))
      {
        v104 = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension(*a2, v73, 3, v11, v12, v13, v14, v15);
        if (v140)
        {
          v106 = ((v16 % 64000000) << 18) / 1000000;
          *v104 = BYTE2(v106);
          v107 = v106 >> 8;
          goto LABEL_180;
        }
      }
    }
  }
LABEL_82:
  v76 = *a2;
  v77 = *((unsigned __int8 *)*a2 + 40);
  if (*((_BYTE *)*a2 + 40))
  {
    v78 = (unsigned __int8 *)*((_QWORD *)v76 + 7);
    v79 = (unsigned __int8 *)*((_QWORD *)v76 + 8);
    if (v78 != v79)
    {
      while (*v78 != (_DWORD)v77)
      {
        v78 += 4;
        if (v78 == v79)
          goto LABEL_86;
      }
      if (*((_BYTE *)v76 + 160))
      {
        v108 = *((_QWORD *)v76 + 19);
        if (v77 < 0xF || *((_BYTE *)v76 + 53))
        {
          v109 = (_WORD *)webrtc::RtpPacket::AllocateRawExtension(v76, v77, 2, v11, v12, v13, v14, v15);
          if (v110)
            *v109 = bswap32(v108) >> 16;
        }
      }
    }
  }
LABEL_86:
  v80 = *a2;
  if (*((_BYTE *)*a2 + 45))
  {
    v81 = (unsigned __int8 *)*((_QWORD *)v80 + 7);
    v82 = (unsigned __int8 *)*((_QWORD *)v80 + 8);
    if (v81 != v82)
    {
      while (*v81 != *((unsigned __int8 *)*a2 + 45))
      {
        v81 += 4;
        if (v81 == v82)
          goto LABEL_90;
      }
      v111 = *((_QWORD *)v80 + 14);
      v113 = v16 == 0x7FFFFFFFFFFFFFFFLL || v111 == 0x8000000000000000;
      if (*(_BYTE *)(a1 + 36))
      {
        if (v113)
        {
          v114 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v114 = 0x8000000000000000;
          if (v16 == 0x8000000000000000 || v111 == 0x7FFFFFFFFFFFFFFFLL || (v114 = v16 - v111, v16 - v111 < 0))
          {
            v148 = -(uint64_t)v114;
            v149 = -(uint64_t)v114 / 0x3E8uLL;
            if (v148 % 0x3E8 <= 0x1F4)
              v150 = 0;
            else
              v150 = -1;
            v142 = v150 - v149;
            goto LABEL_204;
          }
        }
        v142 = v114 / 0x3E8;
        if (v114 % 0x3E8 > 0x1F3)
          ++v142;
LABEL_204:
        __asm { BR              X11 }
      }
      if (v113)
      {
        v141 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v141 = 0x8000000000000000;
        if (v16 == 0x8000000000000000 || v111 == 0x7FFFFFFFFFFFFFFFLL || (v141 = v16 - v111, v16 - v111 < 0))
        {
          v152 = -(uint64_t)v141;
          v153 = -(uint64_t)v141 / 0x3E8uLL;
          if (v152 % 0x3E8 <= 0x1F4)
            v154 = 0;
          else
            v154 = -1;
          v151 = v154 - v153;
          goto LABEL_215;
        }
      }
      v151 = v141 / 0x3E8;
      if (v141 % 0x3E8 > 0x1F3)
        ++v151;
LABEL_215:
      __asm { BR              X11 }
    }
  }
LABEL_90:
  v83 = *a2;
  *a2 = 0;
  *(_QWORD *)v158 = v83;
  *(_OWORD *)&v158[8] = *(_OWORD *)a3;
  *(_QWORD *)&v158[24] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)&v158[32] = v16;
  if (!*(_BYTE *)a1 || *(_BYTE *)(a1 + 72))
  {
    webrtc::RtpSenderEgress::CompleteSendPacket((char *)a1, (int *)v158, 0, v11, v12, v13, v14, v15);
    goto LABEL_93;
  }
  v95 = *(char **)(a1 + 464);
  v94 = *(_QWORD *)(a1 + 472);
  if ((unint64_t)v95 < v94)
  {
    if (v95)
    {
      *(_QWORD *)v95 = v83;
      *(_OWORD *)(v95 + 8) = *(_OWORD *)&v158[8];
      *(_OWORD *)(v95 + 24) = *(_OWORD *)&v158[24];
      *(_QWORD *)(a1 + 464) = v95 + 40;
      v83 = 0;
      goto LABEL_93;
    }
LABEL_216:
    __break(1u);
  }
  v115 = *(_BYTE **)(a1 + 456);
  v116 = 0xCCCCCCCCCCCCCCCDLL * ((v95 - v115) >> 3) + 1;
  if (v116 > 0x666666666666666)
LABEL_217:
    abort();
  v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v94 - (_QWORD)v115) >> 3);
  if (2 * v117 > v116)
    v116 = 2 * v117;
  if (v117 >= 0x333333333333333)
    v118 = 0x666666666666666;
  else
    v118 = v116;
  if (!v118)
    goto LABEL_216;
  if (v118 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v119 = 40 * v118;
  v120 = (char *)operator new(40 * v118);
  v121 = &v120[v119];
  v122 = &v120[8 * ((v95 - v115) >> 3)];
  *(_QWORD *)v158 = 0;
  *(_QWORD *)v122 = v83;
  v123 = *(_OWORD *)&v158[24];
  *(_OWORD *)(v122 + 8) = *(_OWORD *)&v158[8];
  *(_OWORD *)(v122 + 24) = v123;
  v124 = v122 + 40;
  if (v95 == v115)
  {
    *(_QWORD *)(a1 + 456) = v122;
    *(_QWORD *)(a1 + 464) = v124;
    *(_QWORD *)(a1 + 472) = v121;
  }
  else
  {
    do
    {
      v125 = *((_QWORD *)v95 - 5);
      v95 -= 40;
      *(_QWORD *)v95 = 0;
      *((_QWORD *)v122 - 5) = v125;
      v122 -= 40;
      v126 = *(_OWORD *)(v95 + 8);
      *(_OWORD *)(v122 + 24) = *(_OWORD *)(v95 + 24);
      *(_OWORD *)(v122 + 8) = v126;
    }
    while (v95 != v115);
    v95 = *(char **)(a1 + 456);
    v127 = *(char **)(a1 + 464);
    *(_QWORD *)(a1 + 456) = v122;
    *(_QWORD *)(a1 + 464) = v124;
    *(_QWORD *)(a1 + 472) = v121;
    while (v127 != v95)
    {
      v129 = (_QWORD *)*((_QWORD *)v127 - 5);
      v127 -= 40;
      v128 = v129;
      *(_QWORD *)v127 = 0;
      if (v129)
      {
        v130 = (unsigned int *)v128[22];
        if (v130)
        {
          v131 = v130 + 2;
          do
          {
            v132 = __ldaxr(v131);
            v133 = v132 - 1;
          }
          while (__stlxr(v133, v131));
          if (!v133)
            (*(void (**)(unsigned int *))(*(_QWORD *)v130 + 8))(v130);
        }
        v134 = v128[11];
        if (v134)
        {
          v135 = (unsigned int *)(v134 + 24);
          do
          {
            v136 = __ldaxr(v135);
            v137 = v136 - 1;
          }
          while (__stlxr(v137, v135));
          if (!v137)
          {
            v138 = *(_QWORD *)(v134 + 16);
            *(_QWORD *)(v134 + 16) = 0;
            if (v138)
              MEMORY[0x20BD0ADD4](v138, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v134, 0x1010C40EE34DA14);
          }
        }
        v139 = (void *)v128[7];
        if (v139)
        {
          v128[8] = v139;
          operator delete(v139);
        }
        MEMORY[0x20BD0ADEC](v128, 0x1020C4000E59722);
      }
    }
  }
  if (v95)
    operator delete(v95);
  v83 = *(webrtc::RtpPacket **)v158;
  *(_QWORD *)(a1 + 464) = v124;
LABEL_93:
  *(_QWORD *)v158 = 0;
  if (v83)
  {
    v84 = (unsigned int *)*((_QWORD *)v83 + 22);
    if (v84)
    {
      v85 = v84 + 2;
      do
      {
        v86 = __ldaxr(v85);
        v87 = v86 - 1;
      }
      while (__stlxr(v87, v85));
      if (!v87)
        (*(void (**)(unsigned int *))(*(_QWORD *)v84 + 8))(v84);
    }
    v88 = *((_QWORD *)v83 + 11);
    if (v88)
    {
      v89 = (unsigned int *)(v88 + 24);
      do
      {
        v90 = __ldaxr(v89);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v89));
      if (!v91)
      {
        v92 = *(_QWORD *)(v88 + 16);
        *(_QWORD *)(v88 + 16) = 0;
        if (v92)
          MEMORY[0x20BD0ADD4](v92, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v88, 0x1010C40EE34DA14);
      }
    }
    v93 = (void *)*((_QWORD *)v83 + 7);
    if (v93)
    {
      *((_QWORD *)v83 + 8) = v93;
      operator delete(v93);
    }
    MEMORY[0x20BD0ADEC](v83, 0x1020C4000E59722);
  }
}

unint64_t webrtc::RtpSenderEgress::RtpSenderEgress(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  unsigned int **v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void **v17;
  unint64_t v18;
  BOOL v19;
  unsigned __int8 v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v29;
  int64x2_t v30;
  char v31;
  __n128 v32;
  __n128 (*v33)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v34)(uint64_t *);
  void *__p[2];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int64x2_t v42;

  v4 = a2;
  *(_BYTE *)a1 = *(_BYTE *)(a2 + 248);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v6 + 208);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(v6 + 212);
  v7 = *(_QWORD *)(v6 + 120);
  if (v7)
  {
    *(_QWORD *)(a1 + 28) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    *(_BYTE *)(a1 + 28) = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(v4 + 172);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v4 + 136);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)v4;
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(v4 + 220);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(v4 + 120);
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 90) = 0;
  *(_BYTE *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 94) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v4 + 160);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v4 + 128);
  *(_WORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 128) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  v36 = 0u;
  v37 = 0u;
  *(_OWORD *)__p = 0u;
  v38 = 0;
  v39 = -1;
  v40 = 0;
  v41 = 0x45FA000000000000;
  v30 = vdupq_n_s64(0x3E8uLL);
  v42 = v30;
  v8 = (char *)operator new(0x1E0uLL);
  *(_QWORD *)(a1 + 384) = v8;
  *(_QWORD *)(a1 + 392) = v8;
  v9 = v8 + 480;
  *(_QWORD *)(a1 + 400) = v8 + 480;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)v8, 0, 0, 0);
  *((_OWORD *)v8 + 3) = xmmword_208F08CC0;
  v8[64] = 0;
  *(_QWORD *)(v8 + 68) = 0x45FA000000000000;
  *((int64x2_t *)v8 + 5) = v30;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)(v8 + 96), 0, 0, 0);
  *((_OWORD *)v8 + 12) = 0u;
  v8 += 192;
  *((_OWORD *)v8 - 3) = xmmword_208F08CC0;
  *(v8 - 32) = 0;
  *(_QWORD *)(v8 - 28) = 0x45FA000000000000;
  *((int64x2_t *)v8 - 1) = v30;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)v8, 0, 0, 0);
  *((_OWORD *)v8 + 3) = xmmword_208F08CC0;
  v8[64] = 0;
  *(_QWORD *)(v8 + 68) = 0x45FA000000000000;
  *((int64x2_t *)v8 + 5) = v30;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)(v8 + 96), 0, 0, 0);
  *((_OWORD *)v8 + 9) = xmmword_208F08CC0;
  v8[160] = 0;
  *(_QWORD *)(v8 + 164) = 0x45FA000000000000;
  v10 = v8 + 192;
  *((int64x2_t *)v8 + 11) = v30;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>((uint64_t)(v8 + 192), 0, 0, 0);
  *((_OWORD *)v8 + 15) = xmmword_208F08CC0;
  v8[256] = 0;
  *(_QWORD *)(v8 + 260) = 0x45FA000000000000;
  *((int64x2_t *)v8 + 17) = v30;
  *(_QWORD *)(a1 + 392) = v9;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](__p);
  *(_BYTE *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  if (*(_BYTE *)(a1 + 73))
  {
    v11 = operator new();
    *(_QWORD *)v11 = 0x2000;
    v12 = 0uLL;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
  }
  else
  {
    v11 = 0;
    v12 = 0uLL;
  }
  *(_QWORD *)(a1 + 440) = v11;
  v13 = (unsigned int **)(a1 + 448);
  *(_OWORD *)(a1 + 448) = v12;
  *(_OWORD *)(a1 + 464) = v12;
  v14 = operator new();
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  *(_QWORD *)(a1 + 480) = v14;
  do
    v15 = __ldxr((unsigned int *)v14);
  while (__stxr(v15 + 1, (unsigned int *)v14));
  v16 = *(_QWORD *)(v4 + 200);
  if (v16)
  {
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v16 + 16))(__p, v16, "WebRTC-UseNtpTimeAbsoluteSendTime", 33);
    if (SBYTE7(v36) < 0)
    {
      v18 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & 0x8000000000000000) != 0 || (v17 = (void **)__p[0], __p[1]) && !__p[0])
      {
        __break(1u);
LABEL_36:
        {
          v29 = (_QWORD *)operator new();
          *v29 = &unk_24C0B13E8;
          v10[153] = v29;
        }
        goto LABEL_25;
      }
    }
    else
    {
      v17 = __p;
      v18 = BYTE7(v36);
    }
    if (v18 >= 8)
    {
      v19 = *v17 == (void *)0x64656C6261736944;
      if ((BYTE7(v36) & 0x80) != 0)
        goto LABEL_22;
    }
    else
    {
      v19 = 0;
      if ((BYTE7(v36) & 0x80) != 0)
      {
LABEL_22:
        operator delete(__p[0]);
        if (!v19)
          goto LABEL_23;
LABEL_20:
        *(_BYTE *)(a1 + 488) = 0;
        if (!*(_QWORD *)(a1 + 112))
          return a1;
        goto LABEL_24;
      }
    }
    if (!v19)
      goto LABEL_23;
    goto LABEL_20;
  }
LABEL_23:
  *(_BYTE *)(a1 + 488) = 1;
  if (!*(_QWORD *)(a1 + 112))
    return a1;
LABEL_24:
  v4 = *(_QWORD *)(a1 + 8);
  v32.n128_u64[0] = a1;
  v33 = absl::internal_any_invocable::LocalManagerTrivial;
  v34 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpSenderEgress::RtpSenderEgress(webrtc::RtpRtcpInterface::Configuration const&,webrtc::RtpPacketHistory *)::$_0 &>;
  v10 = &unk_253EA7000;
  if ((v20 & 1) == 0)
    goto LABEL_36;
LABEL_25:
  webrtc::RepeatingTaskHandle::DelayedStart(v4, 1000000, (uint64_t)&v32, 0, v10[153], (uint64_t)&v31, (unsigned int **)__p);
  v21 = (unsigned int *)__p[0];
  __p[0] = 0;
  v22 = *v13;
  *v13 = v21;
  if (v22)
  {
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      MEMORY[0x20BD0ADEC]();
    v25 = (unsigned int *)__p[0];
    if (__p[0])
    {
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        MEMORY[0x20BD0ADEC]();
    }
  }
  v33(1, &v32, &v32);
  return a1;
}

void webrtc::RtpSenderEgress::~RtpSenderEgress(webrtc::RtpSenderEgress *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void *v29;

  v2 = *((_QWORD *)this + 56);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 56) = 0;
  }
  v5 = *((_QWORD *)this + 60);
  *(_BYTE *)(v5 + 4) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)v5);
    v7 = v6 - 1;
  }
  while (__stlxr(v7, (unsigned int *)v5));
  if (!v7)
    MEMORY[0x20BD0ADEC]();
  v8 = (_QWORD *)*((_QWORD *)this + 57);
  if (v8)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 58);
    v10 = (void *)*((_QWORD *)this + 57);
    if (v9 != v8)
    {
      do
      {
        v12 = (_QWORD *)*(v9 - 5);
        v9 -= 5;
        v11 = v12;
        *v9 = 0;
        if (v12)
        {
          v13 = (unsigned int *)v11[22];
          if (v13)
          {
            v14 = v13 + 2;
            do
            {
              v15 = __ldaxr(v14);
              v16 = v15 - 1;
            }
            while (__stlxr(v16, v14));
            if (!v16)
              (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
          }
          v17 = v11[11];
          if (v17)
          {
            v18 = (unsigned int *)(v17 + 24);
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              v21 = *(_QWORD *)(v17 + 16);
              *(_QWORD *)(v17 + 16) = 0;
              if (v21)
                MEMORY[0x20BD0ADD4](v21, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v17, 0x1010C40EE34DA14);
            }
          }
          v22 = (void *)v11[7];
          if (v22)
          {
            v11[8] = v22;
            operator delete(v22);
          }
          MEMORY[0x20BD0ADEC](v11, 0x1020C4000E59722);
        }
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 57);
    }
    *((_QWORD *)this + 58) = v8;
    operator delete(v10);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 56);
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      MEMORY[0x20BD0ADEC]();
  }
  v26 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v26)
  {
    std::deque<webrtc::RtpSequenceNumberMap::Association>::~deque[abi:sn180100]((void **)(v26 + 8));
    MEMORY[0x20BD0ADEC](v26, 0x1080C40E0B7A938);
  }
  v27 = (void **)*((_QWORD *)this + 48);
  if (v27)
  {
    v28 = (void **)*((_QWORD *)this + 49);
    v29 = (void *)*((_QWORD *)this + 48);
    if (v28 != v27)
    {
      do
        v28 = std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](v28 - 12);
      while (v28 != v27);
      v29 = (void *)*((_QWORD *)this + 48);
    }
    *((_QWORD *)this + 49) = v27;
    operator delete(v29);
  }
}

void webrtc::RtpSenderEgress::CompleteSendPacket(char *a1, int *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 *v8;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  _BOOL4 v22;
  uint64_t v23;
  char v24;
  unsigned int (***v25)(_QWORD, uint64_t, uint64_t, uint64_t *);
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE *v47;
  _BYTE *v48;
  int64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  __int128 v61;
  __int128 *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  void *v72;
  int64x2_t *v73;
  unint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int64x2_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v87;
  int64x2_t v88;
  int64x2_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v93;
  uint64_t v94;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  webrtc::RateStatistics *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Timestamp v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  BOOL v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  BOOL v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  int v129;
  char v130;
  uint64_t v131[5];

  v8 = *(__int128 **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_188;
  v12 = *((_QWORD *)v8 + 15);
  v13 = *((unsigned __int8 *)v8 + 128);
  if (*((_BYTE *)v8 + 128))
    v14 = v12 == 1;
  else
    v14 = 0;
  v15 = v14;
  if (*((_BYTE *)v8 + 128))
    v16 = v12 == 0;
  else
    v16 = 0;
  if (v16)
    v17 = 1;
  else
    v17 = v15;
  v128 = -1;
  v130 = 0;
  v129 = v17 ^ 1;
  if (!*((_BYTE *)v8 + 40))
    goto LABEL_18;
  v18 = (unsigned __int8 *)*((_QWORD *)v8 + 7);
  v19 = (unsigned __int8 *)*((_QWORD *)v8 + 8);
  if (v18 == v19)
    goto LABEL_18;
  while (*v18 != *((unsigned __int8 *)v8 + 40))
  {
    v18 += 4;
    if (v18 == v19)
      goto LABEL_18;
  }
  v36 = *((_QWORD *)v8 + 11);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 16) + *((_QWORD *)v8 + 12);
    v38 = v18[1];
    if (!v18[1])
      goto LABEL_18;
  }
  else
  {
    v37 = 0;
    v38 = v18[1];
    if (!v18[1])
    {
LABEL_18:
      v20 = 0;
      goto LABEL_19;
    }
  }
  if (v38 == 2)
  {
    v124 = *(unsigned __int8 *)(v37 + *((unsigned __int16 *)v18 + 1) + 1) | (*(unsigned __int8 *)(v37
                                                                                                + *((unsigned __int16 *)v18
                                                                                                  + 1)) << 8);
    v20 = v124 | 0x10000;
    v128 = v124;
    *(_WORD *)((char *)&v129 + 1) = 257;
    v22 = v12 != 4 && v12 != 2;
    if (v13)
      goto LABEL_28;
    goto LABEL_29;
  }
  v20 = 0;
LABEL_19:
  if (*((_BYTE *)v8 + 160))
    v128 = *((_QWORD *)v8 + 19);
  v22 = v12 != 4 && v12 != 2;
  if (v13)
  {
LABEL_28:
    if (!v22)
      goto LABEL_32;
  }
LABEL_29:
  v23 = *((_QWORD *)a1 + 12);
  if (v23 && (unint64_t)(*((_QWORD *)v8 + 14) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v23 + 16))(v23, v20);
LABEL_32:
  v24 = *a1;
  if (*a1)
    v24 = a1[72] == 0;
  HIBYTE(v129) = v24;
  v130 = a3;
  v25 = (unsigned int (***)(_QWORD, uint64_t, uint64_t, uint64_t *))*((_QWORD *)a1 + 7);
  if (!v25)
    goto LABEL_52;
  v26 = *(__int128 **)a2;
  v27 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  if (v27)
    v27 = *(_QWORD *)(v27 + 16) + *((_QWORD *)v26 + 12);
  v28 = *((_QWORD *)v26 + 3) + *((_QWORD *)v26 + 2) + *((unsigned __int8 *)v26 + 2);
  v29 = v28 ? v27 : 0;
  if (!(**v25)(v25, v29, v28, &v128))
    goto LABEL_52;
  v30 = *((_DWORD *)v26 + 6) + *((_DWORD *)v26 + 4) + *((unsigned __int8 *)v26 + 2);
  v31 = *((_QWORD *)a1 + 8);
  if (!v31 || v30 < 1)
  {
    if (v30 > 0)
      goto LABEL_50;
LABEL_52:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_egress.cc");
    v34 = 0;
    v35 = *(__int128 **)a2;
    if (!v17)
      goto LABEL_81;
    goto LABEL_55;
  }
  v32 = operator new();
  v131[0] = webrtc::RtcEventRtpPacketOutgoing::RtcEventRtpPacketOutgoing(v32, v26, a2[4]);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 40))(v31, v131);
  v33 = v131[0];
  v131[0] = 0;
  if (v33)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = 1;
    v35 = *(__int128 **)a2;
    if (!v17)
      goto LABEL_81;
    goto LABEL_55;
  }
LABEL_50:
  v34 = 1;
  v35 = *(__int128 **)a2;
  if (!v17)
  {
LABEL_81:
    if ((*(_DWORD *)((_BYTE *)v35 + 170) & 0xFF0000) != 0)
      webrtc::RtpPacketHistory::MarkPacketAsSent(*((webrtc::RtpPacketHistory **)a1 + 6), (unsigned __int16)*(_DWORD *)((char *)v35 + 170));
    goto LABEL_83;
  }
LABEL_55:
  if (!*((_BYTE *)v35 + 168))
    goto LABEL_81;
  v42 = *((_QWORD *)a1 + 6);
  v43 = operator new();
  v45 = v35[1];
  v44 = v35[2];
  v46 = *v35;
  *(_QWORD *)(v43 + 46) = *(_QWORD *)((char *)v35 + 46);
  *(_OWORD *)(v43 + 16) = v45;
  *(_OWORD *)(v43 + 32) = v44;
  *(_OWORD *)v43 = v46;
  *(_QWORD *)(v43 + 64) = 0;
  *(_QWORD *)(v43 + 72) = 0;
  *(_QWORD *)(v43 + 56) = 0;
  v48 = (_BYTE *)*((_QWORD *)v35 + 7);
  v47 = (_BYTE *)*((_QWORD *)v35 + 8);
  v49 = v47 - v48;
  if (v47 != v48)
  {
    if (v49 < 0)
      goto LABEL_189;
    v50 = (char *)operator new(v47 - v48);
    *(_QWORD *)(v43 + 56) = v50;
    *(_QWORD *)(v43 + 64) = v50;
    v51 = &v50[4 * (v49 >> 2)];
    *(_QWORD *)(v43 + 72) = v51;
    memcpy(v50, v48, v49);
    *(_QWORD *)(v43 + 64) = v51;
  }
  *(_QWORD *)(v43 + 80) = *((_QWORD *)v35 + 10);
  v52 = *((_QWORD *)v35 + 11);
  *(_QWORD *)(v43 + 88) = v52;
  if (v52)
  {
    v53 = (unsigned int *)(v52 + 24);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  *(_OWORD *)(v43 + 96) = v35[6];
  v55 = v35[7];
  v56 = v35[8];
  v57 = v35[9];
  *(_OWORD *)(v43 + 157) = *(__int128 *)((char *)v35 + 157);
  *(_OWORD *)(v43 + 128) = v56;
  *(_OWORD *)(v43 + 144) = v57;
  *(_OWORD *)(v43 + 112) = v55;
  v58 = *((_QWORD *)v35 + 22);
  *(_QWORD *)(v43 + 176) = v58;
  if (v58)
  {
    v59 = (unsigned int *)(v58 + 8);
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  v61 = *(__int128 *)((char *)v35 + 184);
  *(_BYTE *)(v43 + 200) = *((_BYTE *)v35 + 200);
  *(_OWORD *)(v43 + 184) = v61;
  v127 = (__int128 *)v43;
  webrtc::RtpPacketHistory::PutRtpPacket(v42, &v127, *((_QWORD *)a2 + 4));
  v62 = v127;
  v127 = 0;
  if (v62)
  {
    v63 = (unsigned int *)*((_QWORD *)v62 + 22);
    if (v63)
    {
      v64 = v63 + 2;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
        (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
    }
    v67 = *((_QWORD *)v62 + 11);
    if (v67)
    {
      v68 = (unsigned int *)(v67 + 24);
      do
      {
        v69 = __ldaxr(v68);
        v70 = v69 - 1;
      }
      while (__stlxr(v70, v68));
      if (!v70)
      {
        v71 = *(_QWORD *)(v67 + 16);
        *(_QWORD *)(v67 + 16) = 0;
        if (v71)
          MEMORY[0x20BD0ADD4](v71, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v67, 0x1010C40EE34DA14);
      }
    }
    v72 = (void *)*((_QWORD *)v62 + 7);
    if (v72)
    {
      *((_QWORD *)v62 + 8) = v72;
      operator delete(v72);
    }
    MEMORY[0x20BD0ADEC](v62, 0x1020C4000E59722);
  }
LABEL_83:
  if (!v34)
    return;
  a1[120] = 1;
  v73 = *(int64x2_t **)a2;
  if (!*(_BYTE *)(*(_QWORD *)a2 + 128))
    goto LABEL_187;
  v74 = v73[7].u64[1];
  v75 = v73[1];
  v76 = v73->u8[2];
  v77 = v73[12].i64[0];
  if (!v73[12].i8[8])
    v77 = 0;
  v78 = *((_QWORD *)a2 + 4);
  v79 = v73->u32[3];
  v80 = 128;
  if (a1[24] != 0 && *((_DWORD *)a1 + 5) == (_DWORD)v79)
  {
    v80 = 256;
    v81 = a1 + 256;
  }
  else
  {
    v81 = a1 + 128;
  }
  if (*(_QWORD *)&a1[v80] == 0x7FFFFFFFFFFFFFFFLL)
    *(_QWORD *)&a1[v80] = v78;
  if (v74 == 2)
  {
    v88 = vdupq_n_s64(1uLL);
    v88.i64[0] = v76;
    v89 = vaddq_s64(*((int64x2_t *)v81 + 4), v88);
    *((int64x2_t *)v81 + 3) = vaddq_s64(*((int64x2_t *)v81 + 3), v75);
    *((int64x2_t *)v81 + 4) = v89;
    v90 = *((_QWORD *)v81 + 10);
    v91 = 0x8000000000000000;
    if (v77 != 0x8000000000000000 && v90 != 0x8000000000000000)
      v91 = v90 + v77;
    v93 = v90 == 0x7FFFFFFFFFFFFFFFLL || v77 == 0x7FFFFFFFFFFFFFFFLL;
    v94 = v93 ? 0x7FFFFFFFFFFFFFFFLL : v91;
    *((_QWORD *)v81 + 10) = v94;
  }
  else if (v74 == 3)
  {
    *(int64x2_t *)(v81 + 88) = vaddq_s64(*(int64x2_t *)(v81 + 88), v75);
    v82 = vdupq_n_s64(1uLL);
    v82.i64[0] = v76;
    *(int64x2_t *)(v81 + 104) = vaddq_s64(*(int64x2_t *)(v81 + 104), v82);
    v83 = *((_QWORD *)v81 + 15);
    v84 = 0x8000000000000000;
    if (v77 != 0x8000000000000000 && v83 != 0x8000000000000000)
      v84 = v83 + v77;
    if (v83 == 0x7FFFFFFFFFFFFFFFLL || v77 == 0x7FFFFFFFFFFFFFFFLL)
      v87 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v87 = v84;
    *((_QWORD *)v81 + 15) = v87;
  }
  *(int64x2_t *)(v81 + 8) = vaddq_s64(*(int64x2_t *)(v81 + 8), v75);
  v95 = vdupq_n_s64(1uLL);
  v95.i64[0] = v76;
  *(int64x2_t *)(v81 + 24) = vaddq_s64(*(int64x2_t *)(v81 + 24), v95);
  v96 = *((_QWORD *)v81 + 5);
  v97 = 0x8000000000000000;
  if (v77 != 0x8000000000000000 && v96 != 0x8000000000000000)
    v97 = v96 + v77;
  v99 = v96 == 0x7FFFFFFFFFFFFFFFLL || v77 == 0x7FFFFFFFFFFFFFFFLL;
  v100 = v99 ? 0x7FFFFFFFFFFFFFFFLL : v97;
  *((_QWORD *)v81 + 5) = v100;
  v101 = *((_QWORD *)a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 49) - v101) >> 5) <= v74)
  {
LABEL_187:
    __break(1u);
LABEL_188:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_egress.cc", 264, "packet", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v126);
LABEL_189:
    abort();
  }
  v102 = vaddvq_s64(v75) + v76;
  v103 = (webrtc::RateStatistics *)(v101 + 96 * v74);
  v104 = v78 / 0x3E8uLL;
  if (v78 % 0x3E8uLL > 0x1F3)
    ++v104;
  if (-v78 % 0x3E8uLL <= 0x1F4)
    v105 = 0;
  else
    v105 = -1;
  if (v78 < 0)
    v106 = v105 - -v78 / 0x3E8uLL;
  else
    v106 = v104;
  webrtc::RateStatistics::Update(v103, v102, v106);
  if (*((_QWORD *)a1 + 14))
  {
    v107.var0 = v78;
    webrtc::RtpSenderEgress::GetSendRates((webrtc::RtpSenderEgress *)a1, v107, v131);
    v109 = v131[0];
    v108 = v131[1];
    v110 = v131[2];
    v111 = v131[3];
    v112 = v131[4];
    v113 = *((_QWORD *)a1 + 13);
    if (!v113)
      goto LABEL_141;
    goto LABEL_140;
  }
  v108 = 0;
  v110 = 0;
  v111 = 0;
  v112 = 0;
  v109 = 0;
  v113 = *((_QWORD *)a1 + 13);
  if (v113)
LABEL_140:
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v113 + 16))(v113, v81, v79);
LABEL_141:
  v114 = *((_QWORD *)a1 + 14);
  if (v114)
  {
    v115 = 0xFFFFFFFFLL;
    if (v109 != 0x7FFFFFFFFFFFFFFFLL && v108 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v116 = 0x8000000000000000;
      if (v109 != 0x8000000000000000 && v108 != 0x8000000000000000)
        v116 = v109 + v108;
      if (v116 != 0x7FFFFFFFFFFFFFFFLL && v110 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v118 = v110 == 0x8000000000000000 || v116 == 0x8000000000000000;
        v119 = v116 + v110;
        if (v118)
          v119 = 0x8000000000000000;
        if (v119 != 0x7FFFFFFFFFFFFFFFLL && v111 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v120 = v111 == 0x8000000000000000 || v119 == 0x8000000000000000;
          v121 = v119 + v111;
          if (v120)
            v121 = 0x8000000000000000;
          if (v121 != 0x7FFFFFFFFFFFFFFFLL && v112 != 0x7FFFFFFFFFFFFFFFLL)
          {
            v122 = v112 == 0x8000000000000000 || v121 == 0x8000000000000000;
            v123 = v121 + v112;
            if (v122)
              v115 = 0;
            else
              v115 = v123;
          }
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v114 + 16))(v114, v115, v110, *((unsigned int *)a1 + 4));
  }
}

void webrtc::RtpSenderEgress::OnBatchComplete(webrtc::RtpSenderEgress *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v9;
  int *v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24;

  v9 = (int *)*((_QWORD *)this + 57);
  v10 = (int *)*((_QWORD *)this + 58);
  if (v9 == v10)
  {
LABEL_5:
    *((_QWORD *)this + 58) = v9;
  }
  else
  {
    do
    {
      v11 = *((_QWORD *)this + 58);
      if (*((_QWORD *)this + 57) == v11)
      {
        __break(1u);
        return;
      }
      webrtc::RtpSenderEgress::CompleteSendPacket((char *)this, v9, v9 == (int *)(v11 - 40), a4, a5, a6, a7, a8);
      v9 += 10;
    }
    while (v9 != v10);
    v12 = (int *)*((_QWORD *)this + 57);
    v9 = (int *)*((_QWORD *)this + 58);
    if (v9 == v12)
      goto LABEL_5;
    do
    {
      v14 = (_QWORD *)*((_QWORD *)v9 - 5);
      v9 -= 10;
      v13 = v14;
      *(_QWORD *)v9 = 0;
      if (v14)
      {
        v15 = (unsigned int *)v13[22];
        if (v15)
        {
          v16 = v15 + 2;
          do
          {
            v17 = __ldaxr(v16);
            v18 = v17 - 1;
          }
          while (__stlxr(v18, v16));
          if (!v18)
            (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
        }
        v19 = v13[11];
        if (v19)
        {
          v20 = (unsigned int *)(v19 + 24);
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            v23 = *(_QWORD *)(v19 + 16);
            *(_QWORD *)(v19 + 16) = 0;
            if (v23)
              MEMORY[0x20BD0ADD4](v23, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v19, 0x1010C40EE34DA14);
          }
        }
        v24 = (void *)v13[7];
        if (v24)
        {
          v13[8] = v24;
          operator delete(v24);
        }
        MEMORY[0x20BD0ADEC](v13, 0x1020C4000E59722);
      }
    }
    while (v9 != v12);
    *((_QWORD *)this + 58) = v12;
  }
}

webrtc::RateStatistics *webrtc::RtpSenderEgress::GetSendRates@<X0>(webrtc::RtpSenderEgress *this@<X0>, Timestamp a2@<0:X1>, uint64_t *a3@<X8>)
{
  webrtc::RateStatistics *result;
  webrtc::RateStatistics **v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  webrtc::RateStatistics *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  webrtc::RateStatistics *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  webrtc::RateStatistics *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  webrtc::RateStatistics *v46;

  v6 = (webrtc::RateStatistics **)((char *)this + 384);
  result = (webrtc::RateStatistics *)*((_QWORD *)this + 48);
  if (v6[1] == result)
    goto LABEL_66;
  v8 = (unint64_t)a2.var0 >> 3;
  v9 = (unint64_t)a2.var0 / 0x3E8;
  v10 = (unint64_t)a2.var0 % 0x3E8 <= 0x1F3 ? (unint64_t)a2.var0 / 0x3E8 : v9 + 1;
  v11 = -a2.var0 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
  v12 = v11 - -a2.var0 / 0x3E8uLL;
  v13 = a2.var0 < 0 ? v12 : v10;
  result = (webrtc::RateStatistics *)webrtc::RateStatistics::Rate(result, v13);
  v15 = v14 ? (uint64_t)result : 0;
  *a3 = v15;
  v16 = *((_QWORD *)this + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 49) - v16) >> 5) < 2)
    goto LABEL_66;
  v17 = (webrtc::RateStatistics *)(v16 + 96);
  v18 = a2.var0 - 1000 * v9 <= 0x1F3 ? v9 : v9 + 1;
  v19 = -a2.var0 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
  v20 = v19 - -a2.var0 / 0x3E8uLL;
  v21 = a2.var0 < 0 ? v20 : v18;
  result = (webrtc::RateStatistics *)webrtc::RateStatistics::Rate(v17, v21);
  v23 = v22 ? (uint64_t)result : 0;
  a3[1] = v23;
  v24 = *((_QWORD *)this + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 49) - v24) >> 5) < 3)
    goto LABEL_66;
  v25 = (webrtc::RateStatistics *)(v24 + 192);
  v26 = (unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  v27 = a2.var0 - 1000 * v26 <= 0x1F3
      ? (unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4
      : v26 + 1;
  v28 = -a2.var0 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
  v29 = v28 - -a2.var0 / 0x3E8uLL;
  v30 = a2.var0 < 0 ? v29 : v27;
  result = (webrtc::RateStatistics *)webrtc::RateStatistics::Rate(v25, v30);
  v32 = v31 ? (uint64_t)result : 0;
  a3[2] = v32;
  v33 = *((_QWORD *)this + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 49) - v33) >> 5) < 4)
    goto LABEL_66;
  v34 = (webrtc::RateStatistics *)(v33 + 288);
  v35 = a2.var0 - 1000 * v26 <= 0x1F3
      ? (unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4
      : v26 + 1;
  v36 = -a2.var0 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
  v37 = v36 - -a2.var0 / 0x3E8uLL;
  v38 = a2.var0 < 0 ? v37 : v35;
  result = (webrtc::RateStatistics *)webrtc::RateStatistics::Rate(v34, v38);
  v40 = v39 ? (uint64_t)result : 0;
  a3[3] = v40;
  v41 = *((_QWORD *)this + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 49) - v41) >> 5) < 5)
  {
LABEL_66:
    __break(1u);
  }
  else
  {
    if (a2.var0 < 0)
    {
      if (-a2.var0 % 0x3E8uLL <= 0x1F4)
        v44 = 0;
      else
        v44 = -1;
      v43 = v44 - -a2.var0 / 0x3E8uLL;
    }
    else
    {
      v42 = (unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
      if (a2.var0 - 1000 * v42 <= 0x1F3)
        v43 = (unint64_t)((v8 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
      else
        v43 = v42 + 1;
    }
    result = (webrtc::RateStatistics *)webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v41 + 384), v43);
    if (v45)
      v46 = result;
    else
      v46 = 0;
    a3[4] = (uint64_t)v46;
  }
  return result;
}

void webrtc::RtpSenderEgress::GetSentRtpPacketInfos(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unint64_t *v8;
  char *v9;
  unsigned __int16 *v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t *v19;
  unint64_t *v20;
  int v21;
  __int16 v22;

  if (*(_BYTE *)(a1 + 73))
  {
    if (a3)
    {
      if (a3 >> 61)
LABEL_28:
        abort();
      v8 = (unint64_t *)operator new(8 * a3);
      v9 = (char *)&v8[a3];
      v10 = &a2[a3];
      v11 = v8;
      while (1)
      {
        v12 = webrtc::RtpSequenceNumberMap::Get(*(webrtc::RtpSequenceNumberMap **)(a1 + 440), *a2);
        if (!v13)
          break;
        v14 = v12;
        if (v11 < (unint64_t *)v9)
        {
          *v11++ = v12;
          if (++a2 == v10)
            goto LABEL_24;
        }
        else
        {
          v15 = v11 - v8;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            goto LABEL_28;
          if ((v9 - (char *)v8) >> 2 > v16)
            v16 = (v9 - (char *)v8) >> 2;
          if ((unint64_t)(v9 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v16)
          {
            __break(1u);
LABEL_30:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v16 >> 61)
            goto LABEL_30;
          v17 = 8 * v16;
          v18 = (char *)operator new(8 * v16);
          v19 = (unint64_t *)&v18[8 * v15];
          *v19 = v14;
          v20 = v19;
          if (v11 != v8)
          {
            v20 = v19;
            do
            {
              v21 = *((_DWORD *)v11-- - 2);
              v22 = *((_WORD *)v11 + 2);
              *((_DWORD *)v20-- - 2) = v21;
              *((_WORD *)v20 + 2) = v22;
            }
            while (v11 != v8);
          }
          v9 = &v18[v17];
          if (v8)
            operator delete(v8);
          v8 = v20;
          v11 = v19 + 1;
          if (++a2 == v10)
            goto LABEL_24;
        }
      }
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      if (v8)
        operator delete(v8);
    }
    else
    {
      v9 = 0;
      v11 = 0;
      v8 = 0;
LABEL_24:
      *a4 = v8;
      a4[1] = v11;
      a4[2] = (unint64_t *)v9;
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RtpSenderEgress::NonPacedPacketSender::EnqueuePackets(std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  void *__p[2];
  uint64_t v19;

  v1 = *a1;
  v2 = **a1;
  *(_OWORD *)__p = *(_OWORD *)(v1 + 1);
  v19 = v1[3];
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 16))(v2, __p);
  v3 = __p[0];
  if (__p[0])
  {
    v4 = __p[1];
    v5 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (unsigned int *)v6[22];
          if (v8)
          {
            v9 = v8 + 2;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 8))(v8);
          }
          v12 = v6[11];
          if (v12)
          {
            v13 = (unsigned int *)(v12 + 24);
            do
            {
              v14 = __ldaxr(v13);
              v15 = v14 - 1;
            }
            while (__stlxr(v15, v13));
            if (!v15)
            {
              v16 = *(_QWORD *)(v12 + 16);
              *(_QWORD *)(v12 + 16) = 0;
              if (v16)
                MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
            }
          }
          v17 = (void *)v6[7];
          if (v17)
          {
            v6[8] = v17;
            operator delete(v17);
          }
          MEMORY[0x20BD0ADEC](v6, 0x1020C4000E59722);
        }
      }
      while (v4 != v3);
      v5 = __p[0];
    }
    __p[1] = v3;
    operator delete(v5);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RtpSenderEgress::NonPacedPacketSender::EnqueuePackets(std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(_QWORD **)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD **)(v3 + 16);
        v6 = *(void **)(v3 + 8);
        if (v5 != v4)
        {
          do
          {
            v8 = (_QWORD *)*--v5;
            v7 = v8;
            *v5 = 0;
            if (v8)
            {
              v9 = (unsigned int *)v7[22];
              if (v9)
              {
                v10 = v9 + 2;
                do
                {
                  v11 = __ldaxr(v10);
                  v12 = v11 - 1;
                }
                while (__stlxr(v12, v10));
                if (!v12)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
              }
              v13 = v7[11];
              if (v13)
              {
                v14 = (unsigned int *)(v13 + 24);
                do
                {
                  v15 = __ldaxr(v14);
                  v16 = v15 - 1;
                }
                while (__stlxr(v16, v14));
                if (!v16)
                {
                  v17 = *(_QWORD *)(v13 + 16);
                  *(_QWORD *)(v13 + 16) = 0;
                  if (v17)
                    MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v13, 0x1010C40EE34DA14);
                }
              }
              v18 = (void *)v7[7];
              if (v18)
              {
                v7[8] = v18;
                operator delete(v18);
              }
              MEMORY[0x20BD0ADEC](v7, 0x1020C4000E59722);
            }
          }
          while (v5 != v4);
          v6 = *(void **)(v3 + 8);
        }
        *(_QWORD *)(v3 + 16) = v4;
        operator delete(v6);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::RtpSenderEgress::RtpSenderEgress(webrtc::RtpRtcpInterface::Configuration const&,webrtc::RtpPacketHistory *)::$_0 &>(uint64_t *a1)
{
  uint64_t v1;
  Timestamp v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  BOOL v7;
  unint64_t v8;
  uint64_t v10;
  BOOL v12;
  unint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *a1;
  v2.var0 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 40) + 16))(*(_QWORD *)(*a1 + 40));
  webrtc::RtpSenderEgress::GetSendRates((webrtc::RtpSenderEgress *)v1, v2, &v16);
  if (v16 == 0x7FFFFFFFFFFFFFFFLL || v17 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_23;
  v3 = 0x8000000000000000;
  v4 = v17 == 0x8000000000000000 || v16 == 0x8000000000000000;
  v5 = v4 ? 0x8000000000000000 : v17 + v16;
  if (v5 == 0x7FFFFFFFFFFFFFFFLL || v18 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_23;
  v7 = v18 == 0x8000000000000000 || v5 == 0x8000000000000000;
  v8 = v18 + v5;
  if (!v7)
    v3 = v8;
  if (v3 == 0x7FFFFFFFFFFFFFFFLL || v19 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_23:
    v10 = 0xFFFFFFFFLL;
  }
  else
  {
    v12 = v19 == 0x8000000000000000 || v3 == 0x8000000000000000;
    v13 = v19 + v3;
    if (v12)
      v13 = 0x8000000000000000;
    v14 = v20 == 0x8000000000000000 || v13 == 0x8000000000000000;
    v15 = v20 + v13;
    if (v14)
      v15 = 0;
    if (v20 == 0x7FFFFFFFFFFFFFFFLL)
      v15 = -1;
    if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      v10 = 0xFFFFFFFFLL;
    else
      v10 = v15;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v1 + 112) + 16))(*(_QWORD *)(v1 + 112), v10, v18, *(unsigned int *)(v1 + 16));
  return 1000000;
}

uint64_t webrtc::RTPSenderVideo::RTPSenderVideo(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *p_p;
  webrtc::VideoPlayoutDelay *v8;
  TimeDelta v9;
  TimeDelta v10;
  _QWORD *sig;
  unint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  void (***v16)(_QWORD);
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  int *v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  void (**v32)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  char v38;
  uint64_t v39;
  _QWORD v40[2];
  pthread_mutexattr_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44[2];
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BDCF0;
  *(int8x16_t *)(a1 + 8) = vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL);
  *(_DWORD *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 41))
    v4 = 6;
  else
    v4 = 10;
  *(_DWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_DWORD *)(a1 + 384) = 2;
  *(_BYTE *)(a1 + 392) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 0;
  v5 = *(_QWORD *)(a2 + 56);
  v41.__sig = (uint64_t)off_24C0B4170;
  *(_QWORD *)v41.__opaque = 0;
  v42 = 0;
  v43 = 0;
  v45 = 6;
  if (v44 <= (void **)"min_ms" && (char *)v44 + 6 > "min_ms")
    goto LABEL_65;
  strcpy((char *)v44, "min_ms");
  v46 = 0;
  v41.__sig = (uint64_t)&unk_24C0B4110;
  v47 = 0;
  v32 = off_24C0B4170;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v37 = 6;
  if (v36 <= (void **)"max_ms" && (char *)v36 + 6 > "max_ms")
    goto LABEL_65;
  strcpy((char *)v36, "max_ms");
  v38 = 0;
  v32 = (void (**)(webrtc::FieldTrialParameterInterface *__hidden))&unk_24C0B4110;
  v39 = 0;
  v40[0] = &v32;
  v40[1] = &v41;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v5 + 16))(&__p, v5, "WebRTC-ForceSendPlayoutDelay", 28);
  if ((char)v31 < 0)
  {
    v6 = v30;
    if (v30 < 0)
      goto LABEL_65;
    p_p = (char *)__p;
    if (v30)
    {
      if (!__p)
        goto LABEL_65;
    }
  }
  else
  {
    v6 = v31;
    p_p = (char *)&__p;
  }
  webrtc::ParseFieldTrial(v40, 2, p_p, v6);
  if ((char)v31 < 0)
  {
    operator delete(__p);
    v8 = (webrtc::VideoPlayoutDelay *)(a1 + 672);
    if (!BYTE4(v39))
      goto LABEL_20;
  }
  else
  {
    v8 = (webrtc::VideoPlayoutDelay *)(a1 + 672);
    if (!BYTE4(v39))
    {
LABEL_20:
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(a1 + 688) = 0;
      v32 = off_24C0B4170;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  if (!BYTE4(v47))
    goto LABEL_20;
  v9.var0 = 1000 * (int)v47;
  v10.var0 = 1000 * (int)v39;
  webrtc::VideoPlayoutDelay::VideoPlayoutDelay(v8, v9, v10);
  *(_BYTE *)(a1 + 688) = 1;
  v32 = off_24C0B4170;
  if ((v37 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_21:
  operator delete(v36[0]);
LABEL_22:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v41.__sig = (uint64_t)off_24C0B4170;
  if (v45 < 0)
    operator delete(v44[0]);
  if (*(_QWORD *)v41.__opaque)
  {
    v42 = *(_QWORD *)v41.__opaque;
    operator delete(*(void **)v41.__opaque);
  }
  pthread_mutexattr_init(&v41);
  pthread_mutexattr_setpolicy_np(&v41, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 696), &v41);
  pthread_mutexattr_destroy(&v41);
  *(_QWORD *)(a1 + 760) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 768) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 776) = *(_QWORD *)(a2 + 24);
  pthread_mutexattr_init(&v41);
  pthread_mutexattr_setpolicy_np(&v41, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 784), &v41);
  pthread_mutexattr_destroy(&v41);
  *(_QWORD *)(a1 + 896) = 0;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_QWORD *)(a1 + 904) = -1;
  *(_BYTE *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 916) = 0x45FA000000000000;
  *(int64x2_t *)(a1 + 928) = vdupq_n_s64(0x3E8uLL);
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = a1 + 952;
  *(_BYTE *)(a1 + 968) = 0;
  pthread_mutexattr_init(&v41);
  pthread_mutexattr_setpolicy_np(&v41, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 976), &v41);
  pthread_mutexattr_destroy(&v41);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 40);
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 56)
                                                                                           + 16))(&v41, *(_QWORD *)(a2 + 56), "WebRTC-GenericDescriptorAuth", 28);
  if (SHIBYTE(v42) < 0)
  {
    v12 = *(_QWORD *)v41.__opaque;
    if ((*(_QWORD *)v41.__opaque & 0x8000000000000000) != 0)
      goto LABEL_65;
    sig = (_QWORD *)v41.__sig;
    if (*(_QWORD *)v41.__opaque)
    {
      if (!v41.__sig)
        goto LABEL_65;
    }
  }
  else
  {
    sig = &v41;
    v12 = HIBYTE(v42);
  }
  if (v12 >= 8)
  {
    v13 = *sig != 0x64656C6261736944;
    if ((v42 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  else
  {
    v13 = 1;
    if ((v42 & 0x8000000000000000) == 0)
      goto LABEL_38;
  }
  operator delete((void *)v41.__sig);
LABEL_38:
  *(_BYTE *)(a1 + 1049) = v13;
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 1064) = 0x8000000000000000;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  if (*(_QWORD *)(a2 + 64))
  {
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 20);
    v15 = operator new();
    v16 = *(void (****)(_QWORD))(a2 + 64);
    if (v16)
      (**v16)(*(_QWORD *)(a2 + 64));
    v17 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)v15 = &unk_24C0BDD70;
    pthread_mutexattr_init(&v41);
    pthread_mutexattr_setpolicy_np(&v41, 3);
    pthread_mutex_init((pthread_mutex_t *)(v15 + 8), &v41);
    pthread_mutexattr_destroy(&v41);
    *(_QWORD *)(v15 + 72) = a1;
    *(_QWORD *)(v15 + 80) = v16;
    *(_DWORD *)(v15 + 88) = v14;
    (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v17 + 16))(v17, "video_frame_transformer", 23, 0);
    *(_BYTE *)(v15 + 104) = 0;
    *(_QWORD *)v15 = off_24C0BDD28;
    *(_DWORD *)(v15 + 108) = 0;
    v18 = (unsigned int *)(v15 + 108);
    *(_QWORD *)(a1 + 1144) = v15;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  else
  {
    *(_QWORD *)(a1 + 1144) = 0;
  }
  (*(void (**)(pthread_mutexattr_t *__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a2 + 56)
                                                                                           + 16))(&v41, *(_QWORD *)(a2 + 56), "WebRTC-Video-AV1EvenPayloadSizes", 32);
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    v20 = (int *)&v41;
    v21 = HIBYTE(v42);
    goto LABEL_50;
  }
  v21 = *(_QWORD *)v41.__opaque;
  if ((*(_QWORD *)v41.__opaque & 0x8000000000000000) != 0
    || (v20 = (int *)v41.__sig, *(_QWORD *)v41.__opaque) && !v41.__sig)
  {
LABEL_65:
    __break(1u);
  }
LABEL_50:
  if (v21 >= 7)
  {
    v23 = *v20;
    v24 = *(int *)((char *)v20 + 3);
    v22 = v23 == 1650552389 && v24 == 1684368482;
    if ((v42 & 0x8000000000000000) == 0)
      goto LABEL_61;
    goto LABEL_60;
  }
  v22 = 0;
  if (v42 < 0)
LABEL_60:
    operator delete((void *)v41.__sig);
LABEL_61:
  *(_BYTE *)(a1 + 1152) = v22;
  v26 = *(_QWORD *)(a1 + 1144);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + 80);
    v41.__sig = *(_QWORD *)(a1 + 1144);
    (**(void (***)(uint64_t))v26)(v26);
    (*(void (**)(uint64_t, pthread_mutexattr_t *, _QWORD))(*(_QWORD *)v27 + 48))(v27, &v41, *(unsigned int *)(v26 + 88));
    if (v41.__sig)
      (*(void (**)(uint64_t))(*(_QWORD *)v41.__sig + 8))(v41.__sig);
  }
  return a1;
}

void webrtc::RTPSenderVideo::~RTPSenderVideo(webrtc::RTPSenderVideo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  webrtc::FrameDependencyStructure *v5;

  *(_QWORD *)this = &off_24C0BDCF0;
  v2 = *((_QWORD *)this + 143);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 80) + 64))(*(_QWORD *)(v2 + 80), *(unsigned int *)(v2 + 88));
    v3 = *(_QWORD *)(v2 + 80);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(v2 + 80) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
    *(_QWORD *)(v2 + 72) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
    v4 = *((_QWORD *)this + 143);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 976));
  std::__tree<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::__map_value_compare<int,std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::RTPSenderVideo::TemporalLayerStats>>>::destroy(*((void ***)this + 119));
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 106);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 784));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 696));
  if (*((_BYTE *)this + 632) && *((_QWORD *)this + 50))
    absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents((_QWORD *)this + 50);
  if (*((_BYTE *)this + 376) && *((_QWORD *)this + 18))
    absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents((_QWORD *)this + 18);
  v5 = (webrtc::FrameDependencyStructure *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    webrtc::FrameDependencyStructure::~FrameDependencyStructure(v5);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::RTPSenderVideo::~RTPSenderVideo(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RTPSenderVideo::SetVideoStructureInternal(webrtc::RTPSenderVideo *this, const webrtc::FrameDependencyStructure *a2)
{
  uint64_t result;
  unsigned int v5;
  webrtc::FrameDependencyStructure *v6;
  webrtc::FrameDependencyStructure *v7;

  result = *((_QWORD *)this + 16);
  if (a2)
  {
    if (result)
    {
      result = webrtc::operator==(result, (uint64_t)a2);
      if ((result & 1) != 0)
        return result;
      v5 = (**((_DWORD **)this + 16)
          - 991146299
          * ((*(_DWORD *)(*((_QWORD *)this + 16) + 112) - *(_DWORD *)(*((_QWORD *)this + 16) + 104)) >> 3)) & 0x3F;
    }
    else
    {
      v5 = 0;
    }
    v6 = (webrtc::FrameDependencyStructure *)operator new();
    result = (uint64_t)webrtc::FrameDependencyStructure::FrameDependencyStructure(v6, a2);
    v7 = (webrtc::FrameDependencyStructure *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = result;
    if (v7)
    {
      webrtc::FrameDependencyStructure::~FrameDependencyStructure(v7);
      MEMORY[0x20BD0ADEC]();
      result = *((_QWORD *)this + 16);
    }
    *(_DWORD *)result = v5;
  }
  else
  {
    *((_QWORD *)this + 16) = 0;
    if (result)
    {
      webrtc::FrameDependencyStructure::~FrameDependencyStructure((webrtc::FrameDependencyStructure *)result);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  return result;
}

uint64_t webrtc::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  size_t v6;
  const void *v7;
  const void *v8;
  uint64_t result;
  _DWORD *v10;
  unint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  unint64_t v39;
  size_t v40;
  const void *v41;
  const void *v42;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = (2 * v4) & 0xFFFFFFFFFFFFFFFCLL;
  if (v6 != 4 * (v5 >> 1))
    return 0;
  if ((v5 & 1) != 0)
    v7 = *(const void **)(a2 + 24);
  else
    v7 = (const void *)(a2 + 24);
  if ((v4 & 1) != 0)
    v8 = *(const void **)(a1 + 24);
  else
    v8 = (const void *)(a1 + 24);
  if (memcmp(v8, v7, v6))
    return 0;
  v10 = (_DWORD *)(a1 + 72);
  v11 = *(_QWORD *)(a1 + 64);
  if ((v11 & 1) != 0)
    v10 = *(_DWORD **)(a1 + 72);
  v12 = (_DWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a2 + 64);
  if ((v13 & 1) != 0)
    v12 = *(_DWORD **)(a2 + 72);
  if (v11 >> 1 != v13 >> 1)
    return 0;
  v14 = &v10[2 * (v11 >> 1)];
  v15 = &v12[2 * (v13 >> 1)];
  if (v11 >= 2 && v13 >= 2)
  {
    while (*v10 == *v12 && v10[1] == v12[1])
    {
      v10 += 2;
      v12 += 2;
      if (v10 == v14 || v12 == v15)
        goto LABEL_27;
    }
    return 0;
  }
LABEL_27:
  result = 0;
  if (v10 == v14 && v12 == v15)
  {
    v19 = a1 + 104;
    v17 = *(_QWORD *)(a1 + 104);
    v18 = *(_QWORD *)(v19 + 8);
    v21 = a2 + 104;
    v20 = *(_QWORD *)(a2 + 104);
    if (v18 - v17 == *(_QWORD *)(v21 + 8) - v20)
    {
      if (v17 == v18)
        return 1;
      while (*(_DWORD *)v17 == *(_DWORD *)v20 && *(_DWORD *)(v17 + 4) == *(_DWORD *)(v20 + 4))
      {
        v22 = *(_DWORD **)(v17 + 16);
        v23 = *(_QWORD *)(v17 + 8);
        if ((v23 & 1) == 0)
          v22 = (_DWORD *)(v17 + 16);
        v24 = (_DWORD *)(v20 + 16);
        v25 = *(_QWORD *)(v20 + 8);
        if ((v25 & 1) != 0)
          v24 = *(_DWORD **)(v20 + 16);
        v26 = v23 >> 1;
        v27 = v25 >> 1;
        if (v23 >> 1 != v25 >> 1)
          break;
        if (v23 >= 2 && v25 >= 2)
        {
          v28 = 4 * v26 - 4;
          v29 = 4 * v27 - 4;
          v30 = v22;
          v31 = v24;
          while (*v30 == *v31)
          {
            ++v30;
            ++v31;
            if (v28)
            {
              v28 -= 4;
              v32 = v29;
              v29 -= 4;
              if (v32)
                continue;
            }
            goto LABEL_46;
          }
          return 0;
        }
        v31 = v24;
        v30 = v22;
LABEL_46:
        result = 0;
        if (v30 != &v22[v26] || v31 != &v24[v27])
          return result;
        v33 = *(_QWORD *)(v17 + 56);
        v34 = *(_QWORD *)(v20 + 56);
        v35 = (2 * v33) & 0xFFFFFFFFFFFFFFFCLL;
        if (v35 != 4 * (v34 >> 1))
          return 0;
        v36 = (v34 & 1) != 0 ? *(const void **)(v20 + 64) : (const void *)(v20 + 64);
        v37 = (v33 & 1) != 0 ? *(const void **)(v17 + 64) : (const void *)(v17 + 64);
        if (memcmp(v37, v36, v35))
          return 0;
        v38 = *(_QWORD *)(v17 + 80);
        v39 = *(_QWORD *)(v20 + 80);
        v40 = (2 * v38) & 0xFFFFFFFFFFFFFFFCLL;
        if (v40 != 4 * (v39 >> 1))
          return 0;
        v41 = (v39 & 1) != 0 ? *(const void **)(v20 + 88) : (const void *)(v20 + 88);
        v42 = (v38 & 1) != 0 ? *(const void **)(v17 + 88) : (const void *)(v17 + 88);
        if (memcmp(v42, v41, v40))
          return 0;
        v17 += 104;
        v20 += 104;
        result = 1;
        if (v17 == v18)
          return result;
      }
    }
    return 0;
  }
  return result;
}

void webrtc::RTPSenderVideo::SetVideoLayersAllocation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v17;
  _QWORD v18[3];
  uint64_t v19;
  int v20;
  char v21;
  _QWORD v22[3];
  _QWORD v23[27];

  v23[26] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 1144);
  if (v2)
  {
    v20 = *(_DWORD *)a2;
    v21 = *(_BYTE *)(a2 + 4);
    v3 = v22;
    v4 = *(_QWORD *)(a2 + 8);
    if ((v4 & 1) != 0)
    {
      v14 = *(_QWORD *)(a2 + 24);
      v22[1] = *(_QWORD *)(a2 + 16);
      v22[2] = v14;
      v22[0] = v4 | 1;
      *(_QWORD *)(a2 + 8) = 0;
      webrtc::RTPSenderVideoFrameTransformerDelegate::SetVideoLayersAllocationUnderLock(v2, &v20);
      if (!v22[0])
        return;
    }
    else
    {
      if (v4 >= 2)
      {
        v5 = v4 >> 1;
        v6 = a2 + 16;
        v7 = v23;
        do
        {
          v8 = *(_OWORD *)(v6 + 16);
          *((_OWORD *)v7 - 1) = *(_OWORD *)v6;
          *(_OWORD *)v7 = v8;
          *((_OWORD *)v7 + 1) = *(_OWORD *)(v6 + 32);
          *((_DWORD *)v7 + 8) = *(_DWORD *)(v6 + 48);
          *((_BYTE *)v7 + 36) = *(_BYTE *)(v6 + 52);
          v7 += 7;
          *(_QWORD *)(v6 + 8) = 0;
          v6 += 56;
          --v5;
        }
        while (v5);
        v4 = *(_QWORD *)(a2 + 8);
      }
      v22[0] = v4 & 0xFFFFFFFFFFFFFFFELL;
      webrtc::RTPSenderVideoFrameTransformerDelegate::SetVideoLayersAllocationUnderLock(v2, &v20);
      if (!v22[0])
        return;
    }
    goto LABEL_17;
  }
  v16 = *(_DWORD *)a2;
  v17 = *(_BYTE *)(a2 + 4);
  v3 = v18;
  v9 = *(_QWORD *)(a2 + 8);
  if ((v9 & 1) != 0)
  {
    v15 = *(_QWORD *)(a2 + 24);
    v18[1] = *(_QWORD *)(a2 + 16);
    v18[2] = v15;
    v18[0] = v9 | 1;
    *(_QWORD *)(a2 + 8) = 0;
    webrtc::RTPSenderVideo::SetVideoLayersAllocationInternal(a1, &v16);
    if (!v18[0])
      return;
    goto LABEL_17;
  }
  if (v9 >= 2)
  {
    v10 = v9 >> 1;
    v11 = a2 + 16;
    v12 = &v19;
    do
    {
      v13 = *(_OWORD *)(v11 + 16);
      *((_OWORD *)v12 - 1) = *(_OWORD *)v11;
      *(_OWORD *)v12 = v13;
      *((_OWORD *)v12 + 1) = *(_OWORD *)(v11 + 32);
      *((_DWORD *)v12 + 8) = *(_DWORD *)(v11 + 48);
      *((_BYTE *)v12 + 36) = *(_BYTE *)(v11 + 52);
      v12 += 7;
      *(_QWORD *)(v11 + 8) = 0;
      v11 += 56;
      --v10;
    }
    while (v10);
    v9 = *(_QWORD *)(a2 + 8);
  }
  v18[0] = v9 & 0xFFFFFFFFFFFFFFFELL;
  webrtc::RTPSenderVideo::SetVideoLayersAllocationInternal(a1, &v16);
  if (v18[0])
LABEL_17:
    absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v3);
}

void webrtc::RTPSenderVideo::SetVideoLayersAllocationInternal(uint64_t a1, int *a2)
{
  int *v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  __int128 v37;
  int v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  void **v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int *v49;
  __int128 v50;
  int v51;
  unint64_t v52;
  __int128 v53;
  int v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  void **v70;
  unint64_t v71;

  v4 = (int *)(a1 + 136);
  v5 = *(unsigned __int8 *)(a1 + 376);
  if (*(_BYTE *)(a1 + 376))
  {
    v6 = *((_QWORD *)a2 + 1);
    if ((*(_QWORD *)(a1 + 144) ^ v6) <= 1)
    {
      v7 = *(_DWORD *)(a1 + 384);
      if (v7 != 1)
      {
        if (v7 != 2)
        {
LABEL_7:
          v8 = *a2;
          *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 4);
          *v4 = v8;
          goto LABEL_48;
        }
        *(_DWORD *)(a1 + 384) = 1;
      }
      if (v6 >= 2)
      {
        if (*(_BYTE *)(a1 + 632))
        {
          v9 = v6 >> 1;
          v10 = *(_QWORD *)(a1 + 400);
          v11 = v10 >> 1;
          if ((v6 & 1) != 0)
          {
            v16 = *((_QWORD *)a2 + 2);
            if (v9 <= 1)
              v17 = 1;
            else
              v17 = v6 >> 1;
            if ((v10 & 1) != 0)
            {
              v23 = 52;
              while (v11)
              {
                v24 = *(unsigned __int8 *)(v16 + v23) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 408) + v23);
                if (v24 < 0)
                  v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408) + v23) - *(unsigned __int8 *)(v16 + v23);
                if (v24 > 5)
                  goto LABEL_46;
                v23 += 56;
                --v11;
                if (!--v17)
                  goto LABEL_47;
              }
            }
            else
            {
              v18 = (unsigned __int8 *)(v16 + 52);
              v19 = (unsigned __int8 *)(a1 + 460);
              while (v11)
              {
                v20 = *v18 - *v19;
                if (v20 < 0)
                  v20 = *v19 - *v18;
                if (v20 > 5)
                  goto LABEL_46;
                v18 += 56;
                v19 += 56;
                --v11;
                if (!--v17)
                  goto LABEL_47;
              }
            }
          }
          else
          {
            if (v9 <= 1)
              v12 = 1;
            else
              v12 = v6 >> 1;
            if ((v10 & 1) != 0)
            {
              v21 = 0;
              while (v11)
              {
                v22 = LOBYTE(a2[v21 + 17]) - *(unsigned __int8 *)(*(_QWORD *)(a1 + 408) + v21 * 4 + 52);
                if (v22 < 0)
                  v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 408) + v21 * 4 + 52) - LOBYTE(a2[v21 + 17]);
                if (v22 > 5)
                  goto LABEL_46;
                v21 += 14;
                --v11;
                if (!--v12)
                  goto LABEL_47;
              }
            }
            else
            {
              v13 = (unsigned __int8 *)(a2 + 17);
              v14 = (unsigned __int8 *)(a1 + 460);
              while (v11)
              {
                v15 = *v13 - *v14;
                if (v15 < 0)
                  v15 = *v14 - *v13;
                if (v15 > 5)
                  goto LABEL_46;
                v13 += 56;
                v14 += 56;
                --v11;
                if (!--v12)
                  goto LABEL_47;
              }
            }
          }
        }
        goto LABEL_116;
      }
      goto LABEL_7;
    }
  }
LABEL_46:
  *(_DWORD *)(a1 + 384) = 0;
LABEL_47:
  v25 = *a2;
  *(_BYTE *)(a1 + 140) = *((_BYTE *)a2 + 4);
  *v4 = v25;
  if (v5)
  {
LABEL_48:
    if (v4 == a2)
      return;
    v26 = *((_QWORD *)a2 + 1);
    if ((v26 & 1) != 0)
    {
      v40 = *(_QWORD *)(a1 + 144);
      v41 = v40 & 1;
      v42 = (void **)(a1 + 152);
      v43 = (void *)(a1 + 152);
      if ((v40 & 1) != 0)
        v43 = *v42;
      if (v40 >= 2)
      {
        if (!v43)
          goto LABEL_116;
        v44 = v40 >> 1;
        v45 = (uint64_t)v43 + 56 * (v40 >> 1) - 48;
        do
        {
          if ((*(_BYTE *)v45 & 1) != 0)
            operator delete(*(void **)(v45 + 8));
          v45 -= 56;
          --v44;
        }
        while (v44);
        v41 = *(_QWORD *)(a1 + 144) & 1;
      }
      if (v41)
        operator delete(*v42);
      v57 = *((_QWORD *)a2 + 1);
      if ((v57 & 1) != 0)
      {
        *(_QWORD *)(a1 + 144) = v57;
        v58 = *((_OWORD *)a2 + 2);
        *(_OWORD *)v42 = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 168) = v58;
        v59 = *((_OWORD *)a2 + 3);
        v60 = *((_OWORD *)a2 + 4);
        v61 = *((_OWORD *)a2 + 6);
        *(_OWORD *)(a1 + 216) = *((_OWORD *)a2 + 5);
        *(_OWORD *)(a1 + 232) = v61;
        *(_OWORD *)(a1 + 184) = v59;
        *(_OWORD *)(a1 + 200) = v60;
        v62 = *((_OWORD *)a2 + 7);
        v63 = *((_OWORD *)a2 + 8);
        v64 = *((_OWORD *)a2 + 10);
        *(_OWORD *)(a1 + 280) = *((_OWORD *)a2 + 9);
        *(_OWORD *)(a1 + 296) = v64;
        *(_OWORD *)(a1 + 248) = v62;
        *(_OWORD *)(a1 + 264) = v63;
        v65 = *((_OWORD *)a2 + 11);
        v66 = *((_OWORD *)a2 + 12);
        v67 = *((_OWORD *)a2 + 14);
        *(_OWORD *)(a1 + 344) = *((_OWORD *)a2 + 13);
        *(_OWORD *)(a1 + 360) = v67;
        *(_OWORD *)(a1 + 312) = v65;
        *(_OWORD *)(a1 + 328) = v66;
        *((_QWORD *)a2 + 1) = 0;
        return;
      }
      goto LABEL_116;
    }
    v27 = a2 + 4;
    v28 = v26 >> 1;
    v29 = *(_QWORD *)(a1 + 144);
    v30 = a1 + 152;
    v70 = (void **)(a1 + 152);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD *)(a1 + 152);
      v31 = *(_QWORD *)(a1 + 160);
      v32 = v29 >> 1;
      if (v31 >= v28)
      {
LABEL_52:
        if (v32 < v28)
          v33 = 0;
        else
          v33 = v32 - v28;
        if (v32 < v28)
          v34 = 0;
        else
          v34 = v30 + 56 * v28;
        if (v32 < v28)
          v35 = v28 - v32;
        else
          v35 = 0;
        if (v32 < v28)
          v36 = (_QWORD *)(v30 + 56 * v32);
        else
          v36 = 0;
        if (v32 >= v28)
          v32 = v26 >> 1;
        for (; v32; --v32)
        {
          *(_QWORD *)v30 = *(_QWORD *)v27;
          if ((int *)v30 != v27)
          {
            if ((*(_BYTE *)(v30 + 8) & 1) != 0)
              operator delete(*(void **)(v30 + 16));
            *(_QWORD *)(v30 + 8) = *((_QWORD *)v27 + 1);
            v37 = *((_OWORD *)v27 + 2);
            *(_OWORD *)(v30 + 16) = *((_OWORD *)v27 + 1);
            *(_OWORD *)(v30 + 32) = v37;
            *((_QWORD *)v27 + 1) = 0;
          }
          v38 = v27[12];
          *(_BYTE *)(v30 + 52) = *((_BYTE *)v27 + 52);
          *(_DWORD *)(v30 + 48) = v38;
          v27 += 14;
          v30 += 56;
        }
        if (!v35)
        {
          v71 = 0;
          v55 = 0;
          if (v33)
            goto LABEL_97;
          goto LABEL_110;
        }
        if (v36)
        {
          v39 = 0;
          v71 = 0;
          v30 = v34;
          goto LABEL_95;
        }
LABEL_116:
        __break(1u);
        goto LABEL_117;
      }
    }
    else
    {
      v31 = 4;
      v32 = v29 >> 1;
      if (v28 <= 4)
        goto LABEL_52;
    }
    if (2 * v31 <= v28)
      v52 = v26 >> 1;
    else
      v52 = 2 * v31;
    if (v52 >= 0x492492492492493)
LABEL_117:
      std::__throw_bad_array_new_length[abi:sn180100]();
    v71 = v52;
    v39 = operator new(56 * v52);
    v36 = v39;
    v35 = v26 >> 1;
    v33 = v32;
    do
    {
LABEL_95:
      *v36 = *(_QWORD *)v27;
      v36[1] = 0;
      v36[1] = *((_QWORD *)v27 + 1);
      v53 = *((_OWORD *)v27 + 2);
      *((_OWORD *)v36 + 1) = *((_OWORD *)v27 + 1);
      *((_OWORD *)v36 + 2) = v53;
      *((_QWORD *)v27 + 1) = 0;
      v54 = v27[12];
      *((_BYTE *)v36 + 52) = *((_BYTE *)v27 + 52);
      *((_DWORD *)v36 + 12) = v54;
      v36 += 7;
      v27 += 14;
      --v35;
    }
    while (v35);
    v34 = v30;
    v55 = v39;
    if (v33)
    {
LABEL_97:
      if (v34)
      {
        v56 = v34 + 56 * v33 - 48;
        do
        {
          if ((*(_BYTE *)v56 & 1) != 0)
            operator delete(*(void **)(v56 + 8));
          v56 -= 56;
          --v33;
        }
        while (v33);
        goto LABEL_110;
      }
      goto LABEL_116;
    }
LABEL_110:
    v69 = *(_QWORD *)(a1 + 144);
    if (v55)
    {
      if ((v69 & 1) != 0)
        operator delete(*v70);
      *(_QWORD *)(a1 + 152) = v55;
      *(_QWORD *)(a1 + 160) = v71;
      LOBYTE(v69) = 1;
    }
    *(_QWORD *)(a1 + 144) = v26 & 0xFFFFFFFFFFFFFFFELL | v69 & 1;
    return;
  }
  *(_QWORD *)(a1 + 144) = 0;
  v46 = *((_QWORD *)a2 + 1);
  if ((v46 & 1) != 0)
  {
    v68 = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 160) = v68;
    *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 1) | 1;
    *((_QWORD *)a2 + 1) = 0;
  }
  else
  {
    if (v46 >= 2)
    {
      v47 = a1 + 152;
      v48 = v46 >> 1;
      v49 = a2 + 4;
      do
      {
        *(_QWORD *)v47 = *(_QWORD *)v49;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 8) = *((_QWORD *)v49 + 1);
        v50 = *((_OWORD *)v49 + 2);
        *(_OWORD *)(v47 + 16) = *((_OWORD *)v49 + 1);
        *(_OWORD *)(v47 + 32) = v50;
        *((_QWORD *)v49 + 1) = 0;
        v51 = v49[12];
        *(_BYTE *)(v47 + 52) = *((_BYTE *)v49 + 52);
        *(_DWORD *)(v47 + 48) = v51;
        v47 += 56;
        v49 += 14;
        --v48;
      }
      while (v48);
      v46 = *((_QWORD *)a2 + 1);
    }
    *(_QWORD *)(a1 + 144) = v46 & 0xFFFFFFFFFFFFFFFELL;
  }
  *(_BYTE *)(a1 + 376) = 1;
}

void webrtc::RTPSenderVideo::SetVideoLayersAllocationAfterTransformation(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  char v9;
  _QWORD v10[3];
  _QWORD v11[27];

  v11[26] = *MEMORY[0x24BDAC8D0];
  v8 = *(_DWORD *)a2;
  v9 = *(_BYTE *)(a2 + 4);
  v2 = *(_QWORD *)(a2 + 8);
  if ((v2 & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 24);
    v10[1] = *(_QWORD *)(a2 + 16);
    v10[2] = v7;
    v10[0] = v2 | 1;
    *(_QWORD *)(a2 + 8) = 0;
    webrtc::RTPSenderVideo::SetVideoLayersAllocationInternal(a1, &v8);
    if (!v10[0])
      return;
    goto LABEL_9;
  }
  if (v2 >= 2)
  {
    v3 = v2 >> 1;
    v4 = a2 + 16;
    v5 = v11;
    do
    {
      v6 = *(_OWORD *)(v4 + 16);
      *((_OWORD *)v5 - 1) = *(_OWORD *)v4;
      *(_OWORD *)v5 = v6;
      *((_OWORD *)v5 + 1) = *(_OWORD *)(v4 + 32);
      *((_DWORD *)v5 + 8) = *(_DWORD *)(v4 + 48);
      *((_BYTE *)v5 + 36) = *(_BYTE *)(v4 + 52);
      v5 += 7;
      *(_QWORD *)(v4 + 8) = 0;
      v4 += 56;
      --v3;
    }
    while (v3);
    v2 = *(_QWORD *)(a2 + 8);
  }
  v10[0] = v2 & 0xFFFFFFFFFFFFFFFELL;
  webrtc::RTPSenderVideo::SetVideoLayersAllocationInternal(a1, &v8);
  if (v10[0])
LABEL_9:
    absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(v10);
}

void webrtc::RTPSenderVideo::AddRtpHeaderExtensions(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, webrtc::RtpPacket *this, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  unsigned __int16 *v10;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  unint64_t RawExtension;
  BOOL v16;
  _BOOL4 v17;
  _WORD *v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BOOL4 v22;
  int v23;
  char v24;
  BOOL v25;
  _BOOL4 v26;
  BOOL v27;
  _BOOL4 v28;
  BOOL v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  _BOOL4 v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  int v38;
  char v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unint64_t v47;
  char *p_p;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int16 *v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  unint64_t v64;
  char *v65;
  int v66;
  unsigned __int16 *v67;
  _OWORD *v68;
  __int128 *v69;
  unint64_t v70;
  __int128 v71;
  unint64_t v72;
  char *v73;
  int v74;
  uint64_t v75;
  unsigned __int16 *v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  void *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned __int16 *v89;
  _OWORD *v90;
  __int128 *v91;
  uint64_t v92;
  __int128 v93;
  unint64_t v94;
  char *v95;
  int v96;
  unsigned __int16 *v97;
  _OWORD *v98;
  __int128 *v99;
  unint64_t v100;
  __int128 v101;
  unint64_t v102;
  char *v103;
  int v104;
  uint64_t v105;
  webrtc::FrameDependencyStructure *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _WORD *v111;
  uint64_t v112;
  int v113;
  int v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int64x2_t v127;
  uint16x8_t v128;
  int8x16_t v129;
  int64x2_t v130;
  uint16x8_t *v131;
  unint64_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int16x8_t v147;
  int32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int32x4_t v151;
  int8x16_t v152;
  unsigned __int16 *v153;
  unsigned int v154;
  uint64_t v155;
  int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  BOOL v163;
  _BOOL4 v164;
  _BYTE *v165;
  uint64_t v166;
  uint64_t v167;
  BOOL v168;
  int v169;
  _WORD *v170;
  uint64_t v171;
  int v172;
  unsigned __int16 *v173;
  unint64_t v174;
  unint64_t v175;
  unsigned __int16 *v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  _QWORD v180[10];
  uint16x8_t v181;
  unint64_t v182;
  void *v183;
  unint64_t v184;
  unint64_t v185;
  void *v186[2];
  unint64_t v187;
  void *__p;
  unint64_t v189;
  char v190;
  char v191;
  int v192;
  char v193;
  webrtc::FrameDependencyStructure *v194;
  uint64_t v195;

  v9 = a4;
  v179 = a3;
  v10 = (unsigned __int16 *)a2;
  v195 = *MEMORY[0x24BDAC8D0];
  v12 = *(unsigned __int8 *)(a2 + 284);
  if (*(_BYTE *)(a2 + 284))
    v13 = *(_BYTE *)(a1 + 116) == 0;
  else
    v13 = 1;
  if (v13)
  {
    RawExtension = (*(_BYTE *)(a2 + 284) != 0) ^ (*(_BYTE *)(a1 + 116) != 0);
    v14 = 1;
    if ((RawExtension & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    RawExtension = webrtc::operator!=((float *)(a2 + 216), (float *)(a1 + 48));
    v14 = 1;
    if ((RawExtension & 1) != 0)
      goto LABEL_11;
  }
  if (*((_DWORD *)v10 + 38) != 3)
    v14 = *(_BYTE *)(a1 + 120) != 0;
LABEL_11:
  if (v12 && v14 && v9)
  {
    a3 = *((_BYTE *)v10 + 280) ? 28 : 4;
    if (!*((_BYTE *)v10 + 280) || *((_BYTE *)this + 53))
    {
      a2 = *((unsigned __int8 *)this + 51);
      v16 = !*((_BYTE *)this + 53) && a2 >= 0xF;
      v17 = !v16;
      if (*((_BYTE *)this + 51))
      {
        if (v17)
        {
          RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, a3, a4, (uint64_t)this, a6, a7, a8);
          if (a2)
          {
            *(_BYTE *)RawExtension = *((_BYTE *)v10 + 216);
            *(_BYTE *)(RawExtension + 1) = *((_BYTE *)v10 + 217);
            *(_BYTE *)(RawExtension + 2) = *((_BYTE *)v10 + 218);
            *(_BYTE *)(RawExtension + 3) = (4 * *((_BYTE *)v10 + 224)) | (16 * *((_BYTE *)v10 + 220)) | *((_DWORD *)v10 + 57);
            if (*((_BYTE *)v10 + 280))
            {
              if (a2 <= 4)
                v18 = 0;
              else
                v18 = (_WORD *)(RawExtension + 4);
              if (a2 - 4 >= a2)
                v19 = a2;
              else
                v19 = a2 - 4;
              if (a2 <= 4)
                v20 = 0;
              else
                v20 = v19;
              RawExtension = webrtc::ColorSpaceExtension::WriteHdrMetadata(v18, v20, (uint64_t)(v10 + 116));
            }
          }
        }
      }
    }
  }
  if (*((_DWORD *)v10 + 38) == 3 || *(_DWORD *)(a1 + 44) | *((_DWORD *)v10 + 40))
  {
    if (v9)
    {
      a2 = *((unsigned __int8 *)this + 39);
      v21 = !*((_BYTE *)this + 53) && a2 >= 0xF;
      v22 = !v21;
      if (*((_BYTE *)this + 39))
      {
        if (v22)
        {
          RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, 1, a4, (uint64_t)this, a6, a7, a8);
          if (a2)
          {
            v23 = *((_DWORD *)v10 + 40);
            if (v23 == 270)
            {
              v24 = 3;
            }
            else if (v23 == 180)
            {
              v24 = 2;
            }
            else
            {
              v24 = v23 == 90;
            }
            *(_BYTE *)RawExtension = v24;
          }
        }
      }
    }
  }
  if (v9 && *((_DWORD *)v10 + 38) == 3 && *((_BYTE *)v10 + 164))
  {
    a2 = *((unsigned __int8 *)this + 43);
    v25 = !*((_BYTE *)this + 53) && a2 >= 0xF;
    v26 = !v25;
    if (*((_BYTE *)this + 43))
    {
      if (v26)
      {
        RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, 1, a4, (uint64_t)this, a6, a7, a8);
        if (a2)
          *(_BYTE *)RawExtension = *((_BYTE *)v10 + 164);
      }
    }
  }
  if (v9 && *((unsigned __int8 *)v10 + 212) != 255)
  {
    a2 = *((unsigned __int8 *)this + 45);
    v27 = !*((_BYTE *)this + 53) && a2 >= 0xF;
    v28 = !v27;
    if (*((_BYTE *)this + 45))
    {
      if (v28)
      {
        RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, 13, a4, (uint64_t)this, a6, a7, a8);
        if (a2)
        {
          *(_BYTE *)RawExtension = *((_BYTE *)v10 + 212);
          *(_WORD *)(RawExtension + 1) = bswap32(v10[100]) >> 16;
          *(_WORD *)(RawExtension + 3) = bswap32(v10[101]) >> 16;
          *(_WORD *)(RawExtension + 5) = bswap32(v10[102]) >> 16;
          *(_WORD *)(RawExtension + 7) = bswap32(v10[103]) >> 16;
          *(_WORD *)(RawExtension + 9) = bswap32(v10[104]) >> 16;
          *(_WORD *)(RawExtension + 11) = bswap32(v10[105]) >> 16;
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 664) && *(_BYTE *)(a1 + 656))
  {
    a2 = *((unsigned __int8 *)this + 42);
    v29 = !*((_BYTE *)this + 53) && a2 >= 0xF;
    v30 = !v29;
    if (*((_BYTE *)this + 42))
    {
      if (v30)
      {
        RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, 3, a4, (uint64_t)this, a6, a7, a8);
        if (a2)
        {
          v31 = *(_QWORD *)(a1 + 648) / 10000;
          v32 = v31 | ((*(_QWORD *)(a1 + 640) / 10000) << 12);
          *(_BYTE *)RawExtension = BYTE2(v32);
          *(_BYTE *)(RawExtension + 1) = BYTE1(v32);
          *(_BYTE *)(RawExtension + 2) = v31;
        }
      }
    }
  }
  if (v179 && *((_BYTE *)v10 + 1968))
  {
    a2 = *((unsigned __int8 *)this + 38);
    v33 = !*((_BYTE *)this + 53) && a2 >= 0xF;
    v34 = !v33;
    if (*((_BYTE *)this + 38) && v34)
    {
      v35 = *((_BYTE *)v10 + 1960) ? 16 : 8;
      RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, v35, a4, (uint64_t)this, a6, a7, a8);
      if (a2)
      {
        *(_QWORD *)RawExtension = bswap64(*((_QWORD *)v10 + 243));
        if (a2 != 8)
        {
          if (!*((_BYTE *)v10 + 1960))
            goto LABEL_364;
          *(_QWORD *)(RawExtension + 8) = bswap64(*((_QWORD *)v10 + 244));
        }
      }
    }
  }
  if (*((_BYTE *)v10 + 144))
  {
    if (!*((_BYTE *)this + 50) || !*(_QWORD *)(a1 + 128))
    {
      v39 = 0;
      a2 = *((unsigned __int8 *)this + 49);
      if (!*((_BYTE *)this + 49))
        goto LABEL_307;
      goto LABEL_244;
    }
    v187 = 0;
    v190 = 0;
    v191 = 0;
    LOBYTE(v192) = 0;
    v193 = 0;
    v194 = 0;
    v185 = 0;
    v182 = 0;
    v181.i8[0] = v179;
    v181.i8[1] = v9;
    v181.i32[1] = *v10;
    v36 = *((_QWORD *)v10 + 8);
    if ((v36 & 1) != 0)
      v37 = (_QWORD *)*((_QWORD *)v10 + 9);
    else
      v37 = v10 + 36;
    v181.i64[1] = *((_QWORD *)v10 + 1);
    if (v36 >= 2)
    {
      v40 = 8 * (v36 >> 1);
      do
      {
        while (1)
        {
          if (!*((_BYTE *)v10 + 144))
            goto LABEL_360;
          v41 = *(_DWORD *)v10 - *v37;
          LODWORD(v180[0]) = v41;
          v42 = v185;
          v43 = (void **)v186[0];
          if ((v185 & 1) != 0)
          {
            v44 = (uint64_t)v186[1];
          }
          else
          {
            v43 = v186;
            v44 = 4;
          }
          if (v185 >> 1 != v44)
            break;
          RawExtension = (unint64_t)absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)&v185, v180);
          ++v37;
          v40 -= 8;
          if (!v40)
            goto LABEL_131;
        }
        if (!v43)
          goto LABEL_360;
        *((_DWORD *)v43 + (v185 >> 1)) = v41;
        v185 = v42 + 2;
        ++v37;
        v40 -= 8;
      }
      while (v40);
LABEL_131:
      v38 = *((unsigned __int8 *)v10 + 144);
      if (!*((_BYTE *)v10 + 144))
        goto LABEL_360;
    }
    else
    {
      v38 = 1;
    }
    if (&v187 == (unint64_t *)(v10 + 56))
      goto LABEL_179;
    v45 = *((_QWORD *)v10 + 14);
    if ((v45 & 1) != 0)
      v46 = (unsigned __int16 *)*((_QWORD *)v10 + 15);
    else
      v46 = v10 + 60;
    v47 = v45 >> 1;
    p_p = (char *)__p;
    v49 = v187 & 1;
    if ((v187 & 1) == 0)
      p_p = (char *)&__p;
    v50 = 4;
    if ((v187 & 1) != 0)
      v50 = v189;
    if (v50 >= v47)
    {
      v55 = v187 >> 1;
      v56 = v47 - (v187 >> 1);
      if (v47 < v187 >> 1)
        v56 = 0;
      if (v55 >= v47)
        v57 = v45 >> 1;
      else
        v57 = v187 >> 1;
      if (v57)
      {
        v58 = 0;
        if (v57 < 8)
          goto LABEL_158;
        if ((unint64_t)(p_p - (char *)v46) < 0x20)
          goto LABEL_158;
        v58 = v57 & 0x7FFFFFFFFFFFFFF8;
        v59 = &v46[2 * (v57 & 0x7FFFFFFFFFFFFFF8)];
        v60 = p_p + 16;
        v61 = (__int128 *)(v46 + 8);
        v62 = v57 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v63 = *v61;
          *(v60 - 1) = *(v61 - 1);
          *v60 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 8;
        }
        while (v62);
        v46 += 2 * (v57 & 0x7FFFFFFFFFFFFFF8);
        if (v57 != v58)
        {
LABEL_158:
          v64 = v57 - v58;
          v65 = &p_p[4 * v58];
          v59 = v46;
          do
          {
            v66 = *(_DWORD *)v59;
            v59 += 2;
            *(_DWORD *)v65 = v66;
            v65 += 4;
            --v64;
          }
          while (v64);
        }
        if (v55 >= v47)
          goto LABEL_178;
      }
      else
      {
        v59 = v46;
        if (v55 >= v47)
          goto LABEL_178;
      }
      if (!p_p)
        goto LABEL_360;
      v52 = 0;
      v178 = 0;
      v47 = v56;
      v46 = v59;
      v53 = &p_p[4 * v55];
      v54 = 0;
      if (v47 < 8)
        goto LABEL_170;
    }
    else
    {
      if (2 * v50 <= v47)
        v51 = v45 >> 1;
      else
        v51 = 2 * v50;
      if (v51 >> 62)
        goto LABEL_363;
      v178 = v51;
      RawExtension = (unint64_t)operator new(4 * v51);
      v52 = (void *)RawExtension;
      v53 = (char *)RawExtension;
      v54 = 0;
      if (v47 < 8)
        goto LABEL_170;
    }
    if ((unint64_t)(v53 - (char *)v46) >= 0x20)
    {
      v54 = v47 & 0xFFFFFFFFFFFFFFF8;
      v67 = &v46[2 * (v47 & 0xFFFFFFFFFFFFFFF8)];
      v68 = v53 + 16;
      v69 = (__int128 *)(v46 + 8);
      v70 = v47 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v71 = *v69;
        *(v68 - 1) = *(v69 - 1);
        *v68 = v71;
        v68 += 2;
        v69 += 2;
        v70 -= 8;
      }
      while (v70);
      if (v47 == v54)
      {
LABEL_173:
        if (v52)
        {
          if (v49)
          {
            operator delete(__p);
            v38 = *((unsigned __int8 *)v10 + 144);
          }
          __p = v52;
          v189 = v178;
          v187 = v45 | 1;
          if (!v38)
            goto LABEL_360;
          goto LABEL_179;
        }
LABEL_178:
        v187 = v49 | v45 & 0xFFFFFFFFFFFFFFFELL;
LABEL_179:
        if (&v182 == (unint64_t *)(v10 + 8))
          goto LABEL_225;
        v75 = *((_QWORD *)v10 + 2);
        if ((v75 & 1) != 0)
          v76 = (unsigned __int16 *)*((_QWORD *)v10 + 3);
        else
          v76 = v10 + 12;
        v77 = v75 >> 1;
        v78 = (char *)v183;
        v79 = v182 & 1;
        if ((v182 & 1) == 0)
          v78 = (char *)&v183;
        v80 = 10;
        if ((v182 & 1) != 0)
          v80 = v184;
        if (v80 >= v77)
        {
          v85 = v182 >> 1;
          v86 = v77 - (v182 >> 1);
          if (v77 < v182 >> 1)
            v86 = 0;
          if (v85 >= v77)
            v87 = v75 >> 1;
          else
            v87 = v182 >> 1;
          if (v87)
          {
            v88 = 0;
            if (v87 < 8)
              goto LABEL_205;
            if ((unint64_t)(v78 - (char *)v76) < 0x20)
              goto LABEL_205;
            v88 = v87 & 0x7FFFFFFFFFFFFFF8;
            v89 = &v76[2 * (v87 & 0x7FFFFFFFFFFFFFF8)];
            v90 = v78 + 16;
            v91 = (__int128 *)(v76 + 8);
            v92 = v87 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v93 = *v91;
              *(v90 - 1) = *(v91 - 1);
              *v90 = v93;
              v90 += 2;
              v91 += 2;
              v92 -= 8;
            }
            while (v92);
            v76 += 2 * (v87 & 0x7FFFFFFFFFFFFFF8);
            if (v87 != v88)
            {
LABEL_205:
              v94 = v87 - v88;
              v95 = &v78[4 * v88];
              v89 = v76;
              do
              {
                v96 = *(_DWORD *)v89;
                v89 += 2;
                *(_DWORD *)v95 = v96;
                v95 += 4;
                --v94;
              }
              while (v94);
            }
            if (v85 >= v77)
              goto LABEL_224;
          }
          else
          {
            v89 = v76;
            if (v85 >= v77)
            {
LABEL_224:
              v182 = v79 | v75 & 0xFFFFFFFFFFFFFFFELL;
LABEL_225:
              if ((v179 & 1) != 0)
              {
                if (*(_DWORD *)(a1 + 1112))
                  v105 = *(unsigned int *)(a1 + 1120) | 0x100000000;
                else
                  v105 = 0;
                v192 = v105;
                v193 = BYTE4(v105);
              }
              if (*((_DWORD *)v10 + 38) == 3)
              {
                if (!*((_BYTE *)v10 + 144))
                  goto LABEL_360;
                if (*((_QWORD *)v10 + 8) <= 1uLL)
                {
                  if (v179)
                  {
                    v106 = v194;
                    v194 = *(webrtc::FrameDependencyStructure **)(a1 + 128);
                    if (v106)
                    {
                      webrtc::FrameDependencyStructure::~FrameDependencyStructure(v106);
                      MEMORY[0x20BD0ADEC]();
                    }
                  }
                }
              }
              v107 = *(_QWORD *)(a1 + 128);
              v108 = *(_QWORD *)(a1 + 1128);
              RawExtension = webrtc::RtpDependencyDescriptorExtension::ValueSize(v107, v108, (uint64_t)&v181);
              if (RawExtension - 256 < 0xFFFFFFFFFFFFFF01)
                goto LABEL_239;
              a3 = RawExtension;
              if (RawExtension >= 0x11 && !*((_BYTE *)this + 53))
                goto LABEL_239;
              v39 = 0;
              v121 = *((unsigned __int8 *)this + 50);
              if (*((_BYTE *)this + 53))
                v122 = 0;
              else
                v122 = v121 >= 0xF;
              v123 = !v122;
              if (*((_BYTE *)this + 50) && v123)
              {
                RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, v121, RawExtension, a4, (uint64_t)this, a6, a7, a8);
                if (!v124)
                {
LABEL_239:
                  v39 = 0;
                  goto LABEL_240;
                }
                LOBYTE(v180[0]) = 0;
                v180[1] = &v181;
                v180[2] = v107;
                v180[3] = v108;
                v180[4] = RawExtension;
                v180[5] = v124;
                memset(&v180[6], 0, 24);
                webrtc::RtpDependencyDescriptorWriter::FindBestTemplate(v180);
                RawExtension = webrtc::RtpDependencyDescriptorWriter::Write((webrtc::RtpDependencyDescriptorWriter *)v180);
                v39 = RawExtension;
              }
LABEL_240:
              v194 = 0;
              if ((v187 & 1) != 0)
              {
                operator delete(__p);
                if ((v185 & 1) == 0)
                {
LABEL_242:
                  if ((v182 & 1) == 0)
                    goto LABEL_243;
                  goto LABEL_266;
                }
              }
              else if ((v185 & 1) == 0)
              {
                goto LABEL_242;
              }
              operator delete(v186[0]);
              if ((v182 & 1) == 0)
              {
LABEL_243:
                a2 = *((unsigned __int8 *)this + 49);
                if (!*((_BYTE *)this + 49))
                  goto LABEL_307;
LABEL_244:
                if ((v39 & 1) != 0)
                  goto LABEL_307;
                *(__int32 *)((char *)v181.i32 + 2) = 0x10000;
                v181.i64[1] = 0;
                v184 = 0;
                v181.i8[0] = v179;
                v181.i8[1] = v9;
                if (!v179)
                {
                  v119 = *((_BYTE *)this + 53) != 0;
                  a3 = 1;
LABEL_260:
                  if (v119 || a2 <= 0xE)
                  {
                    RawExtension = webrtc::RtpPacket::AllocateRawExtension(this, a2, a3, a4, (uint64_t)this, a6, a7, a8);
                    if (a2)
                      RawExtension = webrtc::RtpGenericFrameDescriptorExtension00::Write(RawExtension, a2, &v181);
                  }
                  goto LABEL_307;
                }
                if (*((_BYTE *)v10 + 144))
                {
                  v109 = *(_QWORD *)v10;
                  v181.i16[1] = *(_QWORD *)v10;
                  v110 = *((_QWORD *)v10 + 8);
                  v111 = (_WORD *)*((_QWORD *)v10 + 9);
                  if ((v110 & 1) == 0)
                    v111 = v10 + 36;
                  if (v110 >= 2)
                  {
                    v112 = 0;
                    v120 = 8 * (v110 >> 1);
                    do
                    {
                      if (v112 != 8 && (_WORD)v109 != *v111)
                      {
                        *((_WORD *)&v181 + v112++ + 8) = v109 - *v111;
                        v181.i64[1] = v112;
                      }
                      v111 += 4;
                      v120 -= 8;
                    }
                    while (v120);
                  }
                  else
                  {
                    v112 = 0;
                  }
                  v113 = *((_DWORD *)v10 + 3);
                  v181.i8[4] = 1 << *((_DWORD *)v10 + 2);
                  v181.i8[5] = v113;
                  if (*((_DWORD *)v10 + 38) == 3)
                  {
                    v114 = v10[79];
                    LODWORD(v184) = v10[78];
                    HIDWORD(v184) = v114;
                  }
                  if (v112)
                    v115 = &v182;
                  else
                    v115 = 0;
                  if (v112)
                  {
                    v116 = (v112 - 1) & 0x7FFFFFFFFFFFFFFFLL;
                    if (v116 >= 0xF)
                    {
                      v125 = v116 + 1;
                      v126 = (v116 + 1) & 0xFFFFFFFFFFFFFFF0;
                      v118 = (unint64_t *)((char *)v115 + 2 * v126);
                      v127 = 0uLL;
                      v128.i64[0] = 0x3F003F003F003FLL;
                      v128.i64[1] = 0x3F003F003F003FLL;
                      v129 = (int8x16_t)vdupq_n_s64(2uLL);
                      v130 = (int64x2_t)xmmword_208F1A560;
                      v131 = (uint16x8_t *)(v115 + 2);
                      v132 = v126;
                      v133 = 0uLL;
                      v134 = 0uLL;
                      v135 = 0uLL;
                      v136 = 0uLL;
                      v137 = 0uLL;
                      v138 = 0uLL;
                      do
                      {
                        v139 = (int16x8_t)vcgtq_u16(v131[-1], v128);
                        v140 = vmovl_high_s16(v139);
                        v141.i64[0] = v140.i32[2];
                        v141.i64[1] = v140.i32[3];
                        v142 = v141;
                        v141.i64[0] = v140.i32[0];
                        v141.i64[1] = v140.i32[1];
                        v143 = v141;
                        v144 = vmovl_s16(*(int16x4_t *)v139.i8);
                        v141.i64[0] = v144.i32[2];
                        v141.i64[1] = v144.i32[3];
                        v145 = v141;
                        v141.i64[0] = v144.i32[0];
                        v141.i64[1] = v144.i32[1];
                        v146 = v141;
                        v147 = (int16x8_t)vcgtq_u16(*v131, v128);
                        v148 = vmovl_high_s16(v147);
                        v141.i64[0] = v148.i32[2];
                        v141.i64[1] = v148.i32[3];
                        v149 = v141;
                        v141.i64[0] = v148.i32[0];
                        v141.i64[1] = v148.i32[1];
                        v150 = v141;
                        v151 = vmovl_s16(*(int16x4_t *)v147.i8);
                        v141.i64[0] = v151.i32[2];
                        v141.i64[1] = v151.i32[3];
                        v152 = v141;
                        v141.i64[0] = v151.i32[0];
                        v141.i64[1] = v151.i32[1];
                        v134 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v142, v129), (int64x2_t)vmvnq_s8(v142)), v134);
                        v133 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v143, v129), (int64x2_t)vmvnq_s8(v143)), v133);
                        v127 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v145, v129), (int64x2_t)vmvnq_s8(v145)), v127);
                        v130 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v146, v129), (int64x2_t)vmvnq_s8(v146)), v130);
                        v138 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v149, v129), (int64x2_t)vmvnq_s8(v149)), v138);
                        v137 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v150, v129), (int64x2_t)vmvnq_s8(v150)), v137);
                        v136 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v152, v129), (int64x2_t)vmvnq_s8(v152)), v136);
                        v135 = vaddq_s64(vsubq_s64((int64x2_t)vandq_s8(v141, v129), (int64x2_t)vmvnq_s8(v141)), v135);
                        v131 += 2;
                        v132 -= 16;
                      }
                      while (v132);
                      v117 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v135, v130), vaddq_s64(v137, v133)), vaddq_s64(vaddq_s64(v136, v127), vaddq_s64(v138, v134))));
                      if (v125 == v126)
                        goto LABEL_292;
                    }
                    else
                    {
                      v117 = 4;
                      v118 = v115;
                    }
                    v153 = (unsigned __int16 *)v115 + v112;
                    do
                    {
                      v154 = *(unsigned __int16 *)v118;
                      v118 = (unint64_t *)((char *)v118 + 2);
                      if (v154 <= 0x3F)
                        v155 = 1;
                      else
                        v155 = 2;
                      v117 += v155;
                    }
                    while (v118 != (unint64_t *)v153);
                  }
                  else
                  {
                    v117 = 4;
                  }
LABEL_292:
                  if (SHIDWORD(v184) > 0 && (int)v184 > 0 && v112 == 0)
                    a3 = v117 + 4;
                  else
                    a3 = v117;
                  if (a3 - 256 < 0xFFFFFFFFFFFFFF01)
                    goto LABEL_307;
                  v119 = *((_BYTE *)this + 53) != 0;
                  if (a3 >= 0x11 && *((_BYTE *)this + 53) == 0)
                    goto LABEL_307;
                  goto LABEL_260;
                }
LABEL_360:
                __break(1u);
LABEL_361:
                absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)RawExtension, a2, a3, a4, (uint64_t)this, a6, a7, a8);
              }
LABEL_266:
              operator delete(v183);
              a2 = *((unsigned __int8 *)this + 49);
              if (!*((_BYTE *)this + 49))
                goto LABEL_307;
              goto LABEL_244;
            }
          }
          if (!v78)
            goto LABEL_360;
          v82 = 0;
          v81 = 0;
          v77 = v86;
          v76 = v89;
          v83 = &v78[4 * v85];
          v84 = 0;
          if (v77 < 8)
            goto LABEL_217;
LABEL_212:
          if ((unint64_t)(v83 - (char *)v76) >= 0x20)
          {
            v84 = v77 & 0xFFFFFFFFFFFFFFF8;
            v97 = &v76[2 * (v77 & 0xFFFFFFFFFFFFFFF8)];
            v98 = v83 + 16;
            v99 = (__int128 *)(v76 + 8);
            v100 = v77 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v101 = *v99;
              *(v98 - 1) = *(v99 - 1);
              *v98 = v101;
              v98 += 2;
              v99 += 2;
              v100 -= 8;
            }
            while (v100);
            if (v77 == v84)
            {
LABEL_220:
              if (v82)
              {
                if (v79)
                  operator delete(v183);
                v183 = v82;
                v184 = v81;
                v79 = 1;
              }
              goto LABEL_224;
            }
LABEL_218:
            v102 = v77 - v84;
            v103 = &v83[4 * v84];
            do
            {
              v104 = *(_DWORD *)v97;
              v97 += 2;
              *(_DWORD *)v103 = v104;
              v103 += 4;
              --v102;
            }
            while (v102);
            goto LABEL_220;
          }
LABEL_217:
          v97 = v76;
          goto LABEL_218;
        }
        if (2 * v80 <= v77)
          v81 = v75 >> 1;
        else
          v81 = 2 * v80;
        if (!(v81 >> 62))
        {
          RawExtension = (unint64_t)operator new(4 * v81);
          v82 = (void *)RawExtension;
          v83 = (char *)RawExtension;
          v84 = 0;
          if (v77 < 8)
            goto LABEL_217;
          goto LABEL_212;
        }
LABEL_363:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
LABEL_171:
      v72 = v47 - v54;
      v73 = &v53[4 * v54];
      do
      {
        v74 = *(_DWORD *)v67;
        v67 += 2;
        *(_DWORD *)v73 = v74;
        v73 += 4;
        --v72;
      }
      while (v72);
      goto LABEL_173;
    }
LABEL_170:
    v67 = v46;
    goto LABEL_171;
  }
LABEL_307:
  if (*((_BYTE *)this + 44))
  {
    if (v179)
    {
      v159 = *(_DWORD *)(a1 + 384);
      if (v159 != 2)
      {
        if (*((_DWORD *)v10 + 38) != 3)
        {
          v172 = *((_DWORD *)v10 + 43);
          if (v172 == 2)
          {
            if (*((_QWORD *)v10 + 242) != 2)
              absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)RawExtension, a2, a3, a4, (uint64_t)this, a6, a7, a8);
            if ((*((_BYTE *)v10 + 308) + 1) >= 2u)
              goto LABEL_329;
          }
          else if (v172 == 1)
          {
            if (*((_QWORD *)v10 + 242) != 1)
              goto LABEL_361;
            if ((*((_BYTE *)v10 + 302) + 1) > 1u)
              goto LABEL_329;
          }
          if (*((_BYTE *)v10 + 144))
          {
            v173 = v10 + 12;
            v174 = *((_QWORD *)v10 + 2);
            if ((v174 & 1) != 0)
              v173 = (unsigned __int16 *)*((_QWORD *)v10 + 3);
            v175 = v174 >> 1;
            if (v174 >= 2)
            {
              v177 = 4 * v175;
              v176 = v173;
              while (*(_DWORD *)v176 != 1)
              {
                v176 += 2;
                v177 -= 4;
                if (!v177)
                {
                  v176 = &v173[2 * v175];
                  break;
                }
              }
            }
            else
            {
              v176 = v173;
            }
            if (v175 != ((char *)v176 - (char *)v173) >> 2)
              goto LABEL_329;
          }
        }
        if (*(_BYTE *)(a1 + 376))
        {
          v160 = *(_QWORD *)(a1 + 144);
          v181.i32[0] = *(_DWORD *)(a1 + 136);
          v181.i8[4] = *(_BYTE *)(a1 + 140);
          v181.i64[1] = 0;
          if (v160 >= 2)
          {
            absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::InitFrom(&v181.u64[1], (unint64_t *)(a1 + 144));
            v159 = *(_DWORD *)(a1 + 384);
          }
          v181.i8[4] = v159 == 0;
          v161 = webrtc::RtpVideoLayersAllocationExtension::ValueSize((uint64_t)&v181);
          if (v161 - 256 >= 0xFFFFFFFFFFFFFF01 && (v161 < 0x11 || *((_BYTE *)this + 53)))
          {
            v162 = *((unsigned __int8 *)this + 44);
            v163 = !*((_BYTE *)this + 53) && v162 >= 0xF;
            v164 = !v163;
            if (*((_BYTE *)this + 44))
            {
              if (v164)
              {
                v165 = (_BYTE *)webrtc::RtpPacket::AllocateRawExtension(this, v162, v161, a4, (uint64_t)this, a6, a7, a8);
                if (v166)
                  webrtc::RtpVideoLayersAllocationExtension::Write(v165, v166, (uint64_t)&v181);
              }
            }
          }
          if (v181.i64[1])
            absl::inlined_vector_internal::Storage<webrtc::VideoLayersAllocation::SpatialLayer,4ul,std::allocator<webrtc::VideoLayersAllocation::SpatialLayer>>::DestroyContents(&v181.i64[1]);
          goto LABEL_329;
        }
LABEL_364:
        std::__throw_bad_optional_access[abi:sn180100]();
        return;
      }
    }
  }
LABEL_329:
  if (v179 && *((_BYTE *)v10 + 290))
  {
    v167 = *((unsigned __int8 *)this + 52);
    if (*((_BYTE *)this + 53))
      v168 = 0;
    else
      v168 = v167 >= 0xF;
    v169 = !v168;
    if (*((_BYTE *)this + 52) && v169)
    {
      v170 = (_WORD *)webrtc::RtpPacket::AllocateRawExtension(this, v167, 2, a4, (uint64_t)this, a6, a7, a8);
      if (v171)
        *v170 = bswap32(v10[144]) >> 16;
    }
  }
}

uint64_t webrtc::`anonymous namespace'::PacketWillLikelyBeRequestedForRestransmissionIfLost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *i;
  uint64_t v16;

  v8 = *(_DWORD *)(a1 + 172);
  if (v8 == 2)
  {
    if (*(_QWORD *)(a1 + 1936) != 2)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
    if ((*(_BYTE *)(a1 + 308) + 1) >= 2u)
      return 0;
  }
  else if (v8 == 1)
  {
    if (*(_QWORD *)(a1 + 1936) != 1)
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
    if ((*(_BYTE *)(a1 + 302) + 1) > 1u)
      return 0;
  }
  if (!*(_BYTE *)(a1 + 144))
    return 1;
  v12 = *(_DWORD **)(a1 + 24);
  v10 = (_DWORD *)(a1 + 24);
  v11 = v12;
  v13 = *((_QWORD *)v10 - 1);
  if ((v13 & 1) == 0)
    v11 = v10;
  v14 = v13 >> 1;
  if (v13 >= 2)
  {
    v16 = 4 * v14;
    for (i = v11; *i != 1; ++i)
    {
      v16 -= 4;
      if (!v16)
        return v14 == (uint64_t)(4 * v14) >> 2;
    }
  }
  else
  {
    i = v11;
  }
  return v14 == i - v11;
}

BOOL webrtc::RTPSenderVideo::SendVideo(uint64_t a1, char a2, absl::variant_internal *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8, unint64_t a9, int64_t a10, uint64_t *a11)
{
  _opaque_pthread_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  pthread_mutex_t *v26;
  absl::variant_internal *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v36;
  int v37;
  BOOL v38;
  pthread_mutex_t *v39;
  int v40;
  char **v41;
  char *v42;
  uint64_t **v43;
  char *v44;
  int v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  int64_t v55;
  int64_t v56;
  uint64_t v57;
  int v59;
  char *v60;
  uint64_t **v61;
  char *v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  int64_t v77;
  int v79;
  uint64_t v80;
  char v81;
  int v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  pthread_mutex_t *v98;
  uint64_t v99;
  pthread_mutex_t *v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double v112;
  int *v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int64_t v122;
  int64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  webrtc::RtpPacket *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE *v134;
  _BYTE *v135;
  int64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unsigned int *v140;
  unsigned int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  unsigned int *v146;
  unsigned int v147;
  __int128 v148;
  webrtc::RtpPacket *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE *v154;
  _BYTE *v155;
  int64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unsigned int *v160;
  unsigned int v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unsigned int *v166;
  unsigned int v167;
  __int128 v168;
  webrtc::RtpPacket *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _BYTE *v178;
  _BYTE *v179;
  int64_t v180;
  unsigned __int8 *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  unsigned int *v186;
  unsigned int v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  unsigned int *v192;
  unsigned int v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  webrtc::FrameDependencyStructure *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  int v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  uint64_t v220;
  size_t v221;
  const void *v222;
  _BYTE *v223;
  _BYTE *v224;
  int v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  void **v233;
  void *v234;
  const void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  webrtc::RtpPacket *v241;
  __int128 v242;
  _BYTE *v243;
  _BYTE *v244;
  int64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  unsigned int *v255;
  unsigned int v256;
  _QWORD *v257;
  unsigned int *v258;
  unsigned int *v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  void *v267;
  int v268;
  uint64_t v269;
  unsigned __int8 *v270;
  unsigned __int8 *i;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  _BYTE *v278;
  _BYTE *v279;
  int64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int *v285;
  unsigned int v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  uint64_t v290;
  unsigned int *v291;
  unsigned int v292;
  __int128 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  uint64_t v298;
  size_t v299;
  const void *v300;
  const void *v301;
  char v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char v306;
  rtc::CopyOnWriteBuffer *v307;
  uint64_t v308;
  uint64_t v309;
  BOOL v310;
  BOOL v311;
  int v312;
  uint64_t v313;
  rtc::CopyOnWriteBuffer *v314;
  unsigned int *v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int v318;
  uint64_t v319;
  unsigned int *v320;
  unsigned int v321;
  unsigned int v322;
  uint64_t v323;
  void *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  BOOL v342;
  BOOL v343;
  unint64_t v344;
  uint64_t v345;
  _QWORD *v346;
  unsigned int *v347;
  unsigned int *v348;
  unsigned int v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  unsigned int v354;
  uint64_t v355;
  void *v356;
  unint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unsigned int *v360;
  unsigned int *v361;
  unsigned int v362;
  unsigned int v363;
  uint64_t v364;
  unsigned int *v365;
  unsigned int v366;
  unsigned int v367;
  uint64_t v368;
  void *v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  uint64_t v379;
  _QWORD *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  _QWORD *v390;
  _QWORD *v391;
  unsigned int *v392;
  unsigned int *v393;
  unsigned int v394;
  unsigned int v395;
  uint64_t v396;
  unsigned int *v397;
  unsigned int v398;
  unsigned int v399;
  uint64_t v400;
  void *v401;
  _OWORD *v402;
  _OWORD *v403;
  int v404;
  int v405;
  char v406;
  _BYTE *v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  unsigned __int8 *v414;
  unsigned __int8 *v415;
  unsigned __int8 *v416;
  _QWORD *v417;
  _QWORD *v418;
  unsigned int *v419;
  unsigned int *v420;
  unsigned int v421;
  unsigned int v422;
  uint64_t v423;
  unsigned int *v424;
  unsigned int v425;
  unsigned int v426;
  uint64_t v427;
  void *v428;
  unsigned int *v429;
  unsigned int *v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int *v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v437;
  void *v438;
  unsigned int *v439;
  unsigned int *v440;
  unsigned int v441;
  unsigned int v442;
  uint64_t v443;
  unsigned int *v444;
  unsigned int v445;
  unsigned int v446;
  uint64_t v447;
  void *v448;
  unsigned int *v449;
  unsigned int *v450;
  unsigned int v451;
  unsigned int v452;
  uint64_t v453;
  unsigned int *v454;
  unsigned int v455;
  unsigned int v456;
  uint64_t v457;
  void *v458;
  webrtc::RtpPacket *v459;
  unsigned int *v460;
  unsigned int *v461;
  unsigned int v462;
  unsigned int v463;
  uint64_t v464;
  unsigned int *v465;
  unsigned int v466;
  unsigned int v467;
  uint64_t v468;
  void *v469;
  uint64_t v471;
  std::string *v472;
  uint64_t v473;
  const void *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unsigned __int8 *v478;
  uint64_t v479;
  int v480;
  int64x2_t v481;
  uint64_t v482;
  char v483;
  uint64_t v484;
  unsigned int v485;
  int v486;
  unint64_t v487;
  uint64_t v488;
  int v490;
  uint64_t v491;
  char v492;
  int v493;
  __int128 v494;
  rtc::CopyOnWriteBuffer *v495;
  unsigned __int8 *v496;
  __int128 v497;
  uint64_t v498;
  webrtc::RtpPacket *v499;
  _OWORD *v500;
  __int128 v501;

  v18 = pthread_self();
  v19 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v19 + 1;
  if (!v19)
    *(_QWORD *)(a1 + 32) = v18;
  if (!pthread_equal(*(pthread_t *)(a1 + 32), v18))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc", 468, "!race_checker468.RaceDetected()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v20, v21, v22, v23, v473);
LABEL_584:
    v472 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/api/units/frequency.h", 75, "frequency.IsFinite()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v70, v71, v72, v73, v473);
    rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v472);
  }
  v24 = a9;
  if (!*(_DWORD *)(a9 + 152))
  {
    v38 = 1;
    goto LABEL_571;
  }
  if (!a7
    || (v488 = a6,
        v25 = *(_QWORD *)(a1 + 8),
        v26 = (pthread_mutex_t *)(v25 + 56),
        pthread_mutex_lock((pthread_mutex_t *)(v25 + 56)),
        LODWORD(v25) = *(unsigned __int8 *)(v25 + 120),
        v27 = (absl::variant_internal *)pthread_mutex_unlock(v26),
        !(_DWORD)v25))
  {
    v38 = 0;
    goto LABEL_571;
  }
  if ((_DWORD)a3 != 4 || ((unint64_t)a3 & 0xFF00000000) == 0)
    v36 = *(_DWORD *)(a1 + 40);
  else
    v36 = 6;
  v37 = 255;
  switch(*(_QWORD *)(a9 + 1936))
  {
    case 0:
    case 3:
    case 4:
      break;
    case 1:
      v37 = *(unsigned __int8 *)(a9 + 302);
      break;
    case 2:
      v37 = *(unsigned __int8 *)(a9 + 308);
      break;
    default:
      absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(v27, v28, v29, v30, v31, v32, v33, v34);
  }
  v493 = 0;
  v477 = a8;
  v485 = a4;
  v483 = a2;
  if ((unint64_t)(a10 - 0x7FFFFFFFFFFFFFFFLL) >= 2 && v36)
  {
    v478 = a7;
    v39 = (pthread_mutex_t *)(a1 + 784);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 784));
    if ((v36 & 8) != 0)
    {
      v476 = a1 + 784;
      v479 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
      v40 = v37;
      v41 = (char **)(a1 + 952);
      v42 = *(char **)(a1 + 952);
      v43 = (uint64_t **)(a1 + 952);
      v44 = (char *)(a1 + 952);
      LODWORD(v475) = v36;
      if (v42)
      {
        while (1)
        {
          while (1)
          {
            v44 = v42;
            v45 = *((_DWORD *)v42 + 8);
            if (v45 <= v37)
              break;
            v42 = *(char **)v44;
            v43 = (uint64_t **)v44;
            if (!*(_QWORD *)v44)
              goto LABEL_28;
          }
          if (v45 >= v37)
            break;
          v42 = (char *)*((_QWORD *)v44 + 1);
          if (!v42)
          {
            v43 = (uint64_t **)(v44 + 8);
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        v46 = v44;
        v44 = (char *)operator new(0x90uLL);
        *((_DWORD *)v44 + 8) = v37;
        *(_OWORD *)(v44 + 88) = 0u;
        *(_OWORD *)(v44 + 104) = 0u;
        *(_OWORD *)(v44 + 40) = 0u;
        *(_OWORD *)(v44 + 56) = 0u;
        *(_OWORD *)(v44 + 72) = 0u;
        *((_QWORD *)v44 + 12) = -1;
        *((_DWORD *)v44 + 28) = 1232348160;
        *(int64x2_t *)(v44 + 120) = vdupq_n_s64(0x9C4uLL);
        *((_QWORD *)v44 + 17) = 0;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = v46;
        *v43 = (uint64_t *)v44;
        v47 = **(_QWORD **)(a1 + 944);
        v48 = (uint64_t *)v44;
        if (v47)
        {
          *(_QWORD *)(a1 + 944) = v47;
          v48 = *v43;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 952), v48);
        ++*(_QWORD *)(a1 + 960);
        v36 = v475;
      }
      v49 = v479 / 0x3E8uLL;
      if (v479 % 0x3E8uLL > 0x1F3)
        ++v49;
      if (-v479 % 0x3E8uLL <= 0x1F4)
        v50 = 0;
      else
        v50 = -1;
      if (v479 < 0)
        v51 = v50 - -v479 / 0x3E8uLL;
      else
        v51 = v49;
      webrtc::RateStatistics::Update((webrtc::RateStatistics *)(v44 + 40), 1, v51);
      v52 = *((_QWORD *)v44 + 17);
      *((_QWORD *)v44 + 17) = v479;
      v39 = (pthread_mutex_t *)(a1 + 784);
      if (v479 != 0x7FFFFFFFFFFFFFFFLL && v52 != 0x8000000000000000)
      {
        if ((v37 - 1) >= 0xFEu)
          goto LABEL_92;
        if (v479 == 0x8000000000000000 || v52 == 0x7FFFFFFFFFFFFFFFLL || v479 - v52 <= 131999)
        {
          v53 = v479 / 0x3E8uLL;
          if (v479 % 0x3E8uLL > 0x1F3)
            ++v53;
          if (-v479 % 0x3E8uLL <= 0x1F4)
            v54 = 0;
          else
            v54 = -1;
          if (v479 < 0)
            v53 = v54 - -v479 / 0x3E8uLL;
          v482 = v53;
          v481 = vdupq_n_s64(0x9C4uLL);
          v491 = 0x7FFFFFFFFFFFFFFFLL;
          do
          {
            while (1)
            {
              v59 = v40--;
              v60 = *v41;
              v61 = (uint64_t **)(a1 + 952);
              v62 = (char *)(a1 + 952);
              if (*v41)
              {
                while (1)
                {
                  while (1)
                  {
                    v62 = v60;
                    v63 = *((_DWORD *)v60 + 8);
                    if (v59 > v63)
                      break;
                    v60 = *(char **)v62;
                    v61 = (uint64_t **)v62;
                    if (!*(_QWORD *)v62)
                      goto LABEL_69;
                  }
                  if (v63 >= v40)
                    break;
                  v60 = (char *)*((_QWORD *)v62 + 1);
                  if (!v60)
                  {
                    v61 = (uint64_t **)(v62 + 8);
                    goto LABEL_69;
                  }
                }
              }
              else
              {
LABEL_69:
                v64 = a5;
                v65 = v62;
                v62 = (char *)operator new(0x90uLL);
                *((_DWORD *)v62 + 8) = v40;
                *(_OWORD *)(v62 + 88) = 0u;
                *(_OWORD *)(v62 + 104) = 0u;
                *(_OWORD *)(v62 + 40) = 0u;
                *(_OWORD *)(v62 + 56) = 0u;
                *(_OWORD *)(v62 + 72) = 0u;
                *((_QWORD *)v62 + 12) = -1;
                *((_DWORD *)v62 + 28) = 1232348160;
                *(int64x2_t *)(v62 + 120) = v481;
                *((_QWORD *)v62 + 17) = 0;
                *(_QWORD *)v62 = 0;
                *((_QWORD *)v62 + 1) = 0;
                *((_QWORD *)v62 + 2) = v65;
                *v61 = (uint64_t *)v62;
                v66 = (uint64_t *)v62;
                v67 = **(_QWORD **)(a1 + 944);
                if (v67)
                {
                  *(_QWORD *)(a1 + 944) = v67;
                  v66 = *v61;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 952), v66);
                ++*(_QWORD *)(a1 + 960);
                a5 = v64;
              }
              v68 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(v62 + 40), v482);
              v74 = v69 ? v68 : 0;
              if (v69 && v74 >= 1)
                break;
              v55 = a10;
              if (v59 <= 1)
                goto LABEL_175;
            }
            v75 = 0x7FFFFFFFFFFFFFFFLL;
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFFLL)
              goto LABEL_584;
            v76 = *((_QWORD *)v62 + 17);
            v77 = 0x7FFFFFFFFFFFFFFFLL;
            if (v76 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v75 = 0x3B9ACA00 / v68 + v76;
              if (v76 == 0x8000000000000000)
                v75 = 0x8000000000000000;
              if (v75 != 0x7FFFFFFFFFFFFFFFLL && v479 != 0x8000000000000000)
              {
                v77 = v75 - v479;
                if (v75 == 0x8000000000000000)
                  v77 = 0x8000000000000000;
              }
            }
            v56 = 0x8000000000000000;
            v55 = a10;
            if (a10 == 0x8000000000000000)
            {
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (a10 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v56 = -a10;
            }
            v57 = v491;
            if (v75 < v491 && v77 > v56)
              v57 = v75;
            v491 = v57;
          }
          while (v59 > 1);
LABEL_175:
          v122 = v491 - v479;
          if (v491 == 0x8000000000000000)
            v122 = 0x8000000000000000;
          if (v479 == 0x8000000000000000 || v491 == 0x7FFFFFFFFFFFFFFFLL)
            v122 = 0x7FFFFFFFFFFFFFFFLL;
          v36 = v475;
          v39 = (pthread_mutex_t *)(a1 + 784);
          if (v122 <= v55)
            goto LABEL_92;
        }
        goto LABEL_91;
      }
      if ((v37 - 1) < 0xFEu)
LABEL_91:
        v36 |= 4u;
    }
LABEL_92:
    if (v37 == 255)
    {
      v493 = 1;
      a7 = v478;
    }
    else
    {
      a7 = v478;
      if (v37 || (v36 & 2) == 0)
      {
        v79 = (v36 >> 2) & 1;
        if (!v37)
          v79 = 0;
      }
      else
      {
        v79 = 1;
      }
      v493 = v79;
    }
    pthread_mutex_unlock(v39);
  }
  if (*(_BYTE *)(a1 + 688))
    v80 = a1 + 672;
  else
    v80 = a9 + 176;
  v81 = *(_BYTE *)(v80 + 16);
  if (v81)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)v80;
    *(_BYTE *)(a1 + 656) = v81;
    *(_BYTE *)(a1 + 664) = 1;
  }
  v82 = *(_DWORD *)(a9 + 152);
  if (v82 == 3)
  {
    if (*(_BYTE *)(a1 + 656))
      *(_BYTE *)(a1 + 664) = 1;
    if (*(_BYTE *)(a1 + 376))
      *(_DWORD *)(a1 + 384) = 0;
  }
  v83 = *(_QWORD *)(a1 + 128);
  if (v83 && *(_BYTE *)(a9 + 144))
  {
    v84 = v82 == 3;
    v87 = *(_QWORD *)(v83 + 24);
    v86 = v83 + 24;
    v85 = v87;
    v88 = *(_QWORD *)(v86 - 8);
    if ((v88 & 1) == 0)
      v85 = v86;
    v89 = *(_QWORD *)(a9 + 112);
    v90 = a9 + 120;
    if ((v89 & 1) != 0)
      v90 = *(_QWORD *)(a9 + 120);
    if (v88 >= 2)
      v91 = v85;
    else
      v91 = 0;
    if (v89 >= 2)
      v92 = v90;
    else
      v92 = 0;
    webrtc::ActiveDecodeTargetsHelper::OnFrame(a1 + 1112, v91, v88 >> 1, *(_QWORD *)(a9 + 136), v84, *(_QWORD *)a9, v92, v89 >> 1);
  }
  if (*(_BYTE *)(a1 + 772))
    v93 = (v37 + 1) >= 2u;
  else
    v93 = 1;
  v94 = !v93;
  v95 = *(_QWORD *)(a1 + 8);
  v96 = *(_QWORD *)(v95 + 128);
  v492 = v94;
  if (v94 == 1)
  {
    v97 = *(_QWORD *)(a1 + 776);
    if (*(_BYTE *)(a1 + 764))
    {
      if (*(_DWORD *)(a1 + 768) == 1)
      {
        v98 = (pthread_mutex_t *)(v95 + 56);
        pthread_mutex_lock((pthread_mutex_t *)(v95 + 56));
        v99 = *(_QWORD *)(v95 + 168);
        pthread_mutex_unlock(v98);
        LODWORD(v97) = v97 + v99 - 11;
        v95 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        LODWORD(v97) = v97 + 1;
      }
    }
    LODWORD(v96) = v96 - v97;
  }
  if (v493)
  {
    v100 = (pthread_mutex_t *)(v95 + 56);
    pthread_mutex_lock((pthread_mutex_t *)(v95 + 56));
    if (*(_DWORD *)(v95 + 248))
    {
      if (!*(_BYTE *)(v95 + 232) && !*(_BYTE *)(v95 + 234) && *(_BYTE *)(v95 + 233))
      {
        if (*(char *)(v95 + 231) < 0)
        {
          v121 = *(_QWORD *)(v95 + 216);
          if (!v121)
            goto LABEL_575;
        }
        else
        {
          LODWORD(v121) = *(unsigned __int8 *)(v95 + 231);
          if (!*(_BYTE *)(v95 + 231))
          {
            LODWORD(v121) = 0;
            goto LABEL_575;
          }
        }
        LODWORD(v121) = v121 + 2;
LABEL_575:
        if (*(char *)(v95 + 207) < 0)
        {
          v471 = *(_QWORD *)(v95 + 192);
          if (!v471)
            goto LABEL_578;
        }
        else
        {
          LODWORD(v471) = *(unsigned __int8 *)(v95 + 207);
          if (!*(_BYTE *)(v95 + 207))
          {
LABEL_578:
            v101 = v121 + 5;
            goto LABEL_142;
          }
        }
        LODWORD(v121) = v121 + v471 + 2;
        goto LABEL_578;
      }
      v101 = 2;
    }
    else
    {
      v101 = 0;
    }
LABEL_142:
    pthread_mutex_unlock(v100);
    LODWORD(v96) = v96 - v101;
    v95 = *(_QWORD *)(a1 + 8);
  }
  v480 = v96;
  v102 = a11[1] - *a11;
  if (v102)
    v103 = *a11;
  else
    v103 = 0;
  webrtc::RTPSender::AllocatePacket(v95, v103, v102 >> 2, &v499);
  v105 = *((_QWORD *)v499 + 11);
  v104 = (uint64_t *)((char *)v499 + 88);
  *((_BYTE *)v499 + 1) = v483;
  v106 = v104[1];
  v107 = *(_BYTE *)(*(_QWORD *)(v105 + 16) + v106 + 1) & 0x80 | v483;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v104, (uint64_t *)(*(_QWORD *)(v105 + 8) - v106));
  *(_BYTE *)(*(_QWORD *)(*v104 + 16) + v104[1] + 1) = v107;
  v109 = *((_QWORD *)v499 + 11);
  v108 = (uint64_t *)((char *)v499 + 88);
  *((_DWORD *)v499 + 2) = v485;
  rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v108, (uint64_t *)(*(_QWORD *)(v109 + 8) - v108[1]));
  *(_DWORD *)(*(_QWORD *)(*v108 + 16) + v108[1] + 4) = bswap32(v485);
  if ((unint64_t)(a5 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    *((_QWORD *)v499 + 14) = a5;
    if (!*(_BYTE *)(a9 + 1968))
    {
      *(_QWORD *)(a9 + 1944) = 0;
      *(_QWORD *)(a9 + 1952) = 0;
      *(_QWORD *)(a9 + 1960) = 0;
      *(_BYTE *)(a9 + 1968) = 1;
      v110 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a5);
      v111 = 0;
      v112 = round((double)((uint64_t)((double)v110 / 4294967.3 + 0.5) + 1000 * HIDWORD(v110)) * 4294967.3);
      if (v112 > 0.0)
      {
        if (v112 >= 1.84467441e19)
          v111 = -1;
        else
          v111 = (unint64_t)v112;
      }
      if (!*(_BYTE *)(a9 + 1968))
        goto LABEL_581;
      *(_QWORD *)(a9 + 1944) = v111;
      if (!*(_BYTE *)(a9 + 1960))
        *(_BYTE *)(a9 + 1960) = 1;
      *(_QWORD *)(a9 + 1952) = 0;
    }
LABEL_158:
    v113 = (int *)((char *)v499 + 12);
    if (a11[1] != *a11)
      v113 = (int *)*a11;
    v114 = *v113;
    v115 = *((_DWORD *)v499 + 2);
    v116 = *(_QWORD *)(a9 + 1944);
    v117 = *(_QWORD *)(a9 + 1952);
    v118 = *(unsigned __int8 *)(a9 + 1960);
    v119 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1056) + 16))(*(_QWORD *)(a1 + 1056));
    if (v119 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_188;
    v120 = *(_QWORD *)(a1 + 1064);
    if (v120 == 0x8000000000000000
      || v119 != 0x8000000000000000 && v120 != 0x7FFFFFFFFFFFFFFFLL && v119 - v120 > 1000000)
    {
      goto LABEL_188;
    }
    if (*(_DWORD *)(a1 + 1072) != v114 || *(_DWORD *)(a1 + 1080) != 90000)
      goto LABEL_188;
    if (v118 && *(_BYTE *)(a1 + 1104))
    {
      if (*(_QWORD *)(a1 + 1096) != v117)
        goto LABEL_188;
    }
    else if ((v118 != 0) != (*(_BYTE *)(a1 + 1104) != 0))
    {
      goto LABEL_188;
    }
    v124 = (unint64_t)(v115 - *(_DWORD *)(a1 + 1076)) << 32;
    v125 = ((unsigned __int128)(v124 * (__int128)0x45962422C53EC283) >> 64) - v124;
    v126 = v116 - *(_QWORD *)(a1 + 1088) + (v125 >> 16) + ((unint64_t)v125 >> 63);
    if (v126 < 0)
      v126 = -v126;
    if ((uint64_t)llround((double)(unint64_t)v126 * 0.000000232830644) < 2)
    {
      LOBYTE(v116) = 0;
      v127 = 0;
      v128 = 0;
      goto LABEL_189;
    }
LABEL_188:
    *(_DWORD *)(a1 + 1072) = v114;
    *(_DWORD *)(a1 + 1076) = v115;
    *(_DWORD *)(a1 + 1080) = 90000;
    *(_QWORD *)(a1 + 1088) = v116;
    *(_QWORD *)(a1 + 1096) = v117;
    *(_BYTE *)(a1 + 1104) = v118;
    v127 = v116 & 0xFFFFFFFFFFFFFF00;
    v128 = 1;
    *(_QWORD *)(a1 + 1064) = v119;
LABEL_189:
    *(_QWORD *)(a9 + 1944) = v127 | v116;
    *(_QWORD *)(a9 + 1952) = v117;
    *(_BYTE *)(a9 + 1960) = v118;
    *(_BYTE *)(a9 + 1968) = v128;
    goto LABEL_190;
  }
  if (*(_BYTE *)(a9 + 1968))
    goto LABEL_158;
LABEL_190:
  v129 = v499;
  v130 = operator new();
  v132 = *((_OWORD *)v129 + 1);
  v131 = *((_OWORD *)v129 + 2);
  v133 = *(_OWORD *)v129;
  *(_QWORD *)(v130 + 46) = *(_QWORD *)((char *)v129 + 46);
  *(_OWORD *)(v130 + 16) = v132;
  *(_OWORD *)(v130 + 32) = v131;
  *(_OWORD *)v130 = v133;
  *(_QWORD *)(v130 + 64) = 0;
  *(_QWORD *)(v130 + 72) = 0;
  *(_QWORD *)(v130 + 56) = 0;
  v135 = (_BYTE *)*((_QWORD *)v129 + 7);
  v134 = (_BYTE *)*((_QWORD *)v129 + 8);
  v136 = v134 - v135;
  if (v134 != v135)
  {
    if (v136 < 0)
      goto LABEL_582;
    v137 = (char *)operator new(v134 - v135);
    *(_QWORD *)(v130 + 56) = v137;
    *(_QWORD *)(v130 + 64) = v137;
    v138 = &v137[4 * (v136 >> 2)];
    *(_QWORD *)(v130 + 72) = v138;
    memcpy(v137, v135, v136);
    *(_QWORD *)(v130 + 64) = v138;
  }
  *(_QWORD *)(v130 + 80) = *((_QWORD *)v129 + 10);
  v139 = *((_QWORD *)v129 + 11);
  *(_QWORD *)(v130 + 88) = v139;
  if (v139)
  {
    v140 = (unsigned int *)(v139 + 24);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  *(_OWORD *)(v130 + 96) = *((_OWORD *)v129 + 6);
  v142 = *((_OWORD *)v129 + 7);
  v143 = *((_OWORD *)v129 + 8);
  v144 = *((_OWORD *)v129 + 9);
  *(_OWORD *)(v130 + 157) = *(_OWORD *)((char *)v129 + 157);
  *(_OWORD *)(v130 + 128) = v143;
  *(_OWORD *)(v130 + 144) = v144;
  *(_OWORD *)(v130 + 112) = v142;
  v145 = *((_QWORD *)v129 + 22);
  *(_QWORD *)(v130 + 176) = v145;
  if (v145)
  {
    v146 = (unsigned int *)(v145 + 8);
    do
      v147 = __ldxr(v146);
    while (__stxr(v147 + 1, v146));
  }
  v148 = *(_OWORD *)((char *)v129 + 184);
  *(_BYTE *)(v130 + 200) = *((_BYTE *)v129 + 200);
  *(_OWORD *)(v130 + 184) = v148;
  v149 = v499;
  v150 = operator new();
  v152 = *((_OWORD *)v149 + 1);
  v151 = *((_OWORD *)v149 + 2);
  v153 = *(_OWORD *)v149;
  *(_QWORD *)(v150 + 46) = *(_QWORD *)((char *)v149 + 46);
  *(_OWORD *)(v150 + 16) = v152;
  *(_OWORD *)(v150 + 32) = v151;
  *(_QWORD *)(v150 + 56) = 0;
  *(_OWORD *)v150 = v153;
  *(_QWORD *)(v150 + 64) = 0;
  *(_QWORD *)(v150 + 72) = 0;
  v155 = (_BYTE *)*((_QWORD *)v149 + 7);
  v154 = (_BYTE *)*((_QWORD *)v149 + 8);
  v156 = v154 - v155;
  if (v154 != v155)
  {
    if (v156 < 0)
      goto LABEL_582;
    v157 = (char *)operator new(v154 - v155);
    *(_QWORD *)(v150 + 56) = v157;
    *(_QWORD *)(v150 + 64) = v157;
    v158 = &v157[4 * (v156 >> 2)];
    *(_QWORD *)(v150 + 72) = v158;
    memcpy(v157, v155, v156);
    *(_QWORD *)(v150 + 64) = v158;
  }
  *(_QWORD *)(v150 + 80) = *((_QWORD *)v149 + 10);
  v159 = *((_QWORD *)v149 + 11);
  *(_QWORD *)(v150 + 88) = v159;
  if (v159)
  {
    v160 = (unsigned int *)(v159 + 24);
    do
      v161 = __ldxr(v160);
    while (__stxr(v161 + 1, v160));
  }
  *(_OWORD *)(v150 + 96) = *((_OWORD *)v149 + 6);
  v162 = *((_OWORD *)v149 + 7);
  v163 = *((_OWORD *)v149 + 8);
  v164 = *((_OWORD *)v149 + 9);
  *(_OWORD *)(v150 + 157) = *(_OWORD *)((char *)v149 + 157);
  *(_OWORD *)(v150 + 128) = v163;
  *(_OWORD *)(v150 + 144) = v164;
  *(_OWORD *)(v150 + 112) = v162;
  v165 = *((_QWORD *)v149 + 22);
  *(_QWORD *)(v150 + 176) = v165;
  if (v165)
  {
    v166 = (unsigned int *)(v165 + 8);
    do
      v167 = __ldxr(v166);
    while (__stxr(v167 + 1, v166));
  }
  v168 = *(_OWORD *)((char *)v149 + 184);
  *(_BYTE *)(v150 + 200) = *((_BYTE *)v149 + 200);
  *(_OWORD *)(v150 + 184) = v168;
  v169 = v499;
  v170 = operator new();
  v174 = v170;
  v176 = *((_OWORD *)v169 + 1);
  v175 = *((_OWORD *)v169 + 2);
  v177 = *(_OWORD *)v169;
  *(_QWORD *)(v170 + 46) = *(_QWORD *)((char *)v169 + 46);
  *(_OWORD *)(v170 + 16) = v176;
  *(_OWORD *)(v170 + 32) = v175;
  *(_OWORD *)v170 = v177;
  *(_QWORD *)(v170 + 64) = 0;
  *(_QWORD *)(v170 + 72) = 0;
  *(_QWORD *)(v170 + 56) = 0;
  v179 = (_BYTE *)*((_QWORD *)v169 + 7);
  v178 = (_BYTE *)*((_QWORD *)v169 + 8);
  v180 = v178 - v179;
  if (v178 != v179)
  {
    if (v180 < 0)
      goto LABEL_582;
    v181 = a7;
    v182 = v170;
    v183 = (char *)operator new(v178 - v179);
    *(_QWORD *)(v174 + 56) = v183;
    *(_QWORD *)(v174 + 64) = v183;
    v184 = &v183[4 * (v180 >> 2)];
    *(_QWORD *)(v182 + 72) = v184;
    memcpy(v183, v179, v180);
    *(_QWORD *)(v182 + 64) = v184;
    v174 = v182;
    a7 = v181;
  }
  *(_QWORD *)(v174 + 80) = *((_QWORD *)v169 + 10);
  v185 = *((_QWORD *)v169 + 11);
  *(_QWORD *)(v174 + 88) = v185;
  if (v185)
  {
    v186 = (unsigned int *)(v185 + 24);
    do
      v187 = __ldxr(v186);
    while (__stxr(v187 + 1, v186));
  }
  *(_OWORD *)(v174 + 96) = *((_OWORD *)v169 + 6);
  v188 = *((_OWORD *)v169 + 7);
  v189 = *((_OWORD *)v169 + 8);
  v190 = *((_OWORD *)v169 + 9);
  *(_OWORD *)(v174 + 157) = *(_OWORD *)((char *)v169 + 157);
  *(_OWORD *)(v174 + 128) = v189;
  *(_OWORD *)(v174 + 144) = v190;
  *(_OWORD *)(v174 + 112) = v188;
  v191 = *((_QWORD *)v169 + 22);
  *(_QWORD *)(v174 + 176) = v191;
  if (v191)
  {
    v192 = (unsigned int *)(v191 + 8);
    do
      v193 = __ldxr(v192);
    while (__stxr(v193 + 1, v192));
  }
  v194 = *(_OWORD *)((char *)v169 + 184);
  *(_BYTE *)(v174 + 200) = *((_BYTE *)v169 + 200);
  *(_OWORD *)(v174 + 184) = v194;
  webrtc::RTPSenderVideo::AddRtpHeaderExtensions(a1, a9, 1uLL, 1, v499, v171, v172, v173);
  if (*(_QWORD *)(a1 + 128) && *((_BYTE *)v499 + 50))
  {
    v198 = (unsigned __int8 *)*((_QWORD *)v499 + 7);
    v199 = (unsigned __int8 *)*((_QWORD *)v499 + 8);
    if (v198 == v199)
    {
LABEL_222:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v200, v201, v202, v203, v195, v196, v197, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc");
      v204 = *(webrtc::FrameDependencyStructure **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      if (v204)
      {
        webrtc::FrameDependencyStructure::~FrameDependencyStructure(v204);
        MEMORY[0x20BD0ADEC]();
      }
    }
    else
    {
      while (*v198 != *((unsigned __int8 *)v499 + 50))
      {
        v198 += 4;
        if (v198 == v199)
          goto LABEL_222;
      }
    }
  }
  webrtc::RTPSenderVideo::AddRtpHeaderExtensions(a1, a9, 1uLL, 0, (webrtc::RtpPacket *)v130, v195, v196, v197);
  webrtc::RTPSenderVideo::AddRtpHeaderExtensions(a1, a9, 0, 0, (webrtc::RtpPacket *)v150, v205, v206, v207);
  webrtc::RTPSenderVideo::AddRtpHeaderExtensions(a1, a9, 0, 1, (webrtc::RtpPacket *)v174, v208, v209, v210);
  v212 = *(_DWORD *)(v150 + 16);
  v213 = *((_DWORD *)v499 + 4);
  v214 = *(_DWORD *)(v130 + 16);
  v484 = v174;
  v215 = *(_DWORD *)(v174 + 16);
  if (!*(_BYTE *)(v130 + 49)
    || (v216 = *(unsigned __int8 **)(v130 + 56), v217 = *(unsigned __int8 **)(v130 + 64), v216 == v217))
  {
LABEL_230:
    if (!*(_BYTE *)(v130 + 50))
      goto LABEL_237;
    v218 = *(unsigned __int8 **)(v130 + 56);
    v219 = *(unsigned __int8 **)(v130 + 64);
    if (v218 == v219)
      goto LABEL_237;
    while (*v218 != *(unsigned __int8 *)(v130 + 50))
    {
      v218 += 4;
      if (v218 == v219)
        goto LABEL_237;
    }
  }
  else
  {
    while (*v216 != *(unsigned __int8 *)(v130 + 49))
    {
      v216 += 4;
      if (v216 == v217)
        goto LABEL_230;
    }
  }
  if (*(_QWORD *)(a9 + 1936) == 1)
  {
    *(_DWORD *)(a9 + 298) = -1;
    *(_WORD *)(a9 + 302) = 255;
    *(_QWORD *)(a9 + 304) = 0xFFFFFFFFLL;
    *(_BYTE *)(a9 + 312) = 0;
  }
LABEL_237:
  v220 = *(_QWORD *)(a1 + 1040);
  if (v220)
  {
    LODWORD(v475) = v215;
    LODWORD(v476) = v214;
    v486 = v213;
    v221 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v220 + 40))(v220, 1, a7);
    if (v221)
    {
      v222 = (const void *)operator new[]();
      v496 = 0;
      if (*(_BYTE *)(a1 + 1049))
      {
LABEL_240:
        webrtc::RtpDescriptorAuthentication(a9, &v500);
        v224 = v500;
        v223 = (_BYTE *)v501;
LABEL_247:
        if (v223 == v224)
          v232 = 0;
        else
          v232 = v224;
        if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, void *, int64_t, uint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 1040) + 32))(*(_QWORD *)(a1 + 1040), 1, *(unsigned int *)(v130 + 12), v232, v223 - v224, v488, a7))
        {
          if (v224)
            operator delete(v224);
          v38 = 0;
          v233 = (void **)(v150 + 56);
          if (v222)
            goto LABEL_508;
          goto LABEL_509;
        }
        a7 = v496;
        if (v221 < (unint64_t)v496)
        {
          v234 = (void *)operator new[]();
          v235 = v234;
          if (v222)
          {
            memcpy(v234, v222, v221);
            MEMORY[0x20BD0ADD4](v222, 0x1000C8077774924);
          }
          v222 = v235;
          a7 = v496;
        }
        v488 = 0;
        v213 = v486;
        if (v224)
          operator delete(v224);
        v214 = v476;
        v215 = v475;
        goto LABEL_263;
      }
    }
    else
    {
      v222 = 0;
      v496 = 0;
      if (*(_BYTE *)(a1 + 1049))
        goto LABEL_240;
    }
    v223 = 0;
    v224 = 0;
    goto LABEL_247;
  }
  if (*(_BYTE *)(a1 + 1048))
  {
    v225 = v214;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v226, v227, v228, v229, v230, v231, v211, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc");
    v222 = 0;
    v214 = v225;
  }
  else
  {
    v222 = 0;
  }
LABEL_263:
  if (a7)
    v236 = v488;
  else
    v236 = 0;
  webrtc::RtpPacketizer::Create(a3, v236, a7, (v480 - v212) | ((unint64_t)(v214 - v212) << 32), (v215 - v212) | ((unint64_t)(v213 - v212) << 32), a9, *(unsigned __int8 *)(a1 + 1152), v211, &v498);
  v237 = v498;
  v238 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v498 + 16))(v498);
  if (!v238)
  {
    v38 = 0;
    v174 = v484;
    goto LABEL_506;
  }
  v239 = v238;
  v474 = v222;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 976));
  v490 = *(unsigned __int8 *)(a1 + 968);
  if (!*(_BYTE *)(a1 + 968))
    *(_BYTE *)(a1 + 968) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 976));
  v38 = 0;
  v240 = 0;
  v487 = v239 - 1;
  v496 = 0;
  v497 = 0uLL;
  while (1)
  {
    v500 = 0;
    if (v239 == 1)
    {
      v241 = v499;
      v499 = 0;
      v500 = v241;
    }
    else if (v240)
    {
      if (v240 == v487)
      {
        v241 = (webrtc::RtpPacket *)v484;
        v500 = (_OWORD *)v484;
        v484 = 0;
      }
      else
      {
        v241 = (webrtc::RtpPacket *)operator new();
        v242 = *(_OWORD *)(v150 + 16);
        *(_OWORD *)v241 = *(_OWORD *)v150;
        *((_OWORD *)v241 + 1) = v242;
        *((_OWORD *)v241 + 2) = *(_OWORD *)(v150 + 32);
        *(_QWORD *)((char *)v241 + 46) = *(_QWORD *)(v150 + 46);
        *((_QWORD *)v241 + 8) = 0;
        *((_QWORD *)v241 + 9) = 0;
        *((_QWORD *)v241 + 7) = 0;
        v244 = *(_BYTE **)(v150 + 56);
        v243 = *(_BYTE **)(v150 + 64);
        v245 = v243 - v244;
        if (v243 != v244)
        {
          if (v245 < 0)
            goto LABEL_582;
          v246 = (char *)operator new(v243 - v244);
          *((_QWORD *)v241 + 7) = v246;
          *((_QWORD *)v241 + 8) = v246;
          v247 = &v246[4 * (v245 >> 2)];
          *((_QWORD *)v241 + 9) = v247;
          memcpy(v246, v244, v245);
          *((_QWORD *)v241 + 8) = v247;
          v24 = a9;
        }
        v248 = *(_QWORD *)(v150 + 88);
        *((_QWORD *)v241 + 10) = *(_QWORD *)(v150 + 80);
        *((_QWORD *)v241 + 11) = v248;
        if (v248)
        {
          v249 = (unsigned int *)(v248 + 24);
          do
            v250 = __ldxr(v249);
          while (__stxr(v250 + 1, v249));
        }
        v251 = *(_OWORD *)(v150 + 112);
        v252 = *(_OWORD *)(v150 + 128);
        *((_OWORD *)v241 + 6) = *(_OWORD *)(v150 + 96);
        *((_OWORD *)v241 + 7) = v251;
        v253 = *(_OWORD *)(v150 + 144);
        *((_OWORD *)v241 + 8) = v252;
        *((_OWORD *)v241 + 9) = v253;
        *(_OWORD *)((char *)v241 + 157) = *(_OWORD *)(v150 + 157);
        v254 = *(_QWORD *)(v150 + 176);
        *((_QWORD *)v241 + 22) = v254;
        if (v254)
        {
          v255 = (unsigned int *)(v254 + 8);
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
        }
        *(_OWORD *)((char *)v241 + 184) = *(_OWORD *)(v150 + 184);
        *((_BYTE *)v241 + 200) = *(_BYTE *)(v150 + 200);
        v257 = v500;
        v500 = v241;
        if (v257)
        {
          v258 = (unsigned int *)v257[22];
          if (v258)
          {
            v259 = v258 + 2;
            do
            {
              v260 = __ldaxr(v259);
              v261 = v260 - 1;
            }
            while (__stlxr(v261, v259));
            if (!v261)
              (*(void (**)(unsigned int *))(*(_QWORD *)v258 + 8))(v258);
          }
          v262 = v257[11];
          if (v262)
          {
            v263 = (unsigned int *)(v262 + 24);
            do
            {
              v264 = __ldaxr(v263);
              v265 = v264 - 1;
            }
            while (__stlxr(v265, v263));
            if (!v265)
            {
              v266 = *(_QWORD *)(v262 + 16);
              *(_QWORD *)(v262 + 16) = 0;
              if (v266)
                MEMORY[0x20BD0ADD4](v266, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v262, 0x1010C40EE34DA14);
            }
          }
          v267 = (void *)v257[7];
          if (v267)
          {
            v257[8] = v267;
            operator delete(v267);
          }
          MEMORY[0x20BD0ADEC](v257, 0x1020C4000E59722);
          v241 = (webrtc::RtpPacket *)v500;
        }
      }
    }
    else
    {
      v500 = (_OWORD *)v130;
      v241 = (webrtc::RtpPacket *)v130;
      v130 = 0;
    }
    *((_BYTE *)v241 + 184) = v240 == 0;
    v268 = (*(uint64_t (**)(uint64_t, webrtc::RtpPacket *))(*(_QWORD *)v498 + 24))(v498, v241);
    v269 = (uint64_t)v500;
    if (!v268)
      break;
    *((_BYTE *)v500 + 168) = v493;
    *(_BYTE *)(v269 + 185) = *(_DWORD *)(v24 + 152) == 3;
    if (*(_BYTE *)(v269 + 45))
    {
      v270 = *(unsigned __int8 **)(v269 + 56);
      for (i = *(unsigned __int8 **)(v269 + 64); v270 != i; v270 += 4)
      {
        if (*v270 == *(unsigned __int8 *)(v269 + 45))
        {
          v339 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
          v340 = *(_QWORD *)(v269 + 112);
          v341 = 0x7FFFFFFFFFFFFFFFLL;
          v342 = v339 == 0x7FFFFFFFFFFFFFFFLL || v340 == 0x8000000000000000;
          if (!v342
            && ((v341 = 0x8000000000000000, v339 != 0x8000000000000000)
              ? (v343 = v340 == 0x7FFFFFFFFFFFFFFFLL)
              : (v343 = 1),
                v343 || (v341 = v339 - v340, v339 - v340 < 0)))
          {
            v357 = -(uint64_t)v341;
            v358 = v357 / 0x3E8;
            if (v357 % 0x3E8 <= 0x1F4)
              v359 = 0;
            else
              v359 = -1;
            v344 = v359 - v358;
          }
          else if (v341 % 0x3E8 <= 0x1F3)
          {
            v344 = v341 / 0x3E8;
          }
          else
          {
            v344 = v341 / 0x3E8 + 1;
          }
          __asm { BR              X10 }
        }
      }
    }
    v272 = (uint64_t)v500;
    *((_BYTE *)v500 + 186) = v492;
    if (*(_BYTE *)(a1 + 764))
    {
      v273 = operator new();
      v274 = (uint64_t)v500;
      v276 = v500[1];
      v275 = v500[2];
      v277 = *v500;
      *(_QWORD *)(v273 + 46) = *(_QWORD *)((char *)v500 + 46);
      *(_OWORD *)(v273 + 16) = v276;
      *(_OWORD *)(v273 + 32) = v275;
      *(_OWORD *)v273 = v277;
      *(_QWORD *)(v273 + 64) = 0;
      *(_QWORD *)(v273 + 72) = 0;
      *(_QWORD *)(v273 + 56) = 0;
      v279 = *(_BYTE **)(v274 + 56);
      v278 = *(_BYTE **)(v274 + 64);
      v280 = v278 - v279;
      if (v278 != v279)
      {
        if (v280 < 0)
          goto LABEL_582;
        v281 = (char *)operator new(v278 - v279);
        *(_QWORD *)(v273 + 56) = v281;
        *(_QWORD *)(v273 + 64) = v281;
        v282 = &v281[4 * (v280 >> 2)];
        *(_QWORD *)(v273 + 72) = v282;
        memcpy(v281, v279, v280);
        *(_QWORD *)(v273 + 64) = v282;
      }
      v284 = *(_QWORD *)(v274 + 80);
      v283 = *(_QWORD *)(v274 + 88);
      *(_QWORD *)(v273 + 88) = v283;
      *(_QWORD *)(v273 + 80) = v284;
      if (v283)
      {
        v285 = (unsigned int *)(v283 + 24);
        do
          v286 = __ldxr(v285);
        while (__stxr(v286 + 1, v285));
      }
      *(_OWORD *)(v273 + 96) = *(_OWORD *)(v274 + 96);
      v287 = *(_OWORD *)(v274 + 112);
      v288 = *(_OWORD *)(v274 + 128);
      v289 = *(_OWORD *)(v274 + 144);
      *(_OWORD *)(v273 + 157) = *(_OWORD *)(v274 + 157);
      *(_OWORD *)(v273 + 128) = v288;
      *(_OWORD *)(v273 + 144) = v289;
      *(_OWORD *)(v273 + 112) = v287;
      v290 = *(_QWORD *)(v274 + 176);
      *(_QWORD *)(v273 + 176) = v290;
      if (v290)
      {
        v291 = (unsigned int *)(v290 + 8);
        do
          v292 = __ldxr(v291);
        while (__stxr(v292 + 1, v291));
      }
      v293 = *(_OWORD *)(v274 + 184);
      *(_BYTE *)(v273 + 200) = *(_BYTE *)(v274 + 200);
      *(_OWORD *)(v273 + 184) = v293;
      v495 = (rtc::CopyOnWriteBuffer *)v273;
      v294 = *(_QWORD *)(v274 + 24);
      *(_QWORD *)(v273 + 24) = 0;
      rtc::CopyOnWriteBuffer::SetSize((uint64_t *)(v273 + 88), *(uint64_t **)(v273 + 16));
      v295 = *(_QWORD *)(v273 + 88);
      if (v295)
        rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(v273 + 88), (uint64_t *)(*(_QWORD *)(v295 + 8) - *(_QWORD *)(v273 + 96)));
      *(_QWORD *)(v273 + 24) = v294 + 1;
      rtc::CopyOnWriteBuffer::SetSize((uint64_t *)(v273 + 88), (uint64_t *)(*(_QWORD *)(v273 + 16) + v294 + 1));
      v296 = *(_QWORD *)(v273 + 16);
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity((uint64_t *)(v273 + 88), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v273 + 88) + 8) - *(_QWORD *)(v273 + 96)));
      v297 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v273 + 88) + 16) + *(_QWORD *)(v273 + 96) + v296);
      *v297 = *(_BYTE *)(v274 + 1);
      v298 = *(_QWORD *)(v274 + 88);
      if (v298)
        v298 = *(_QWORD *)(v298 + 16) + *(_QWORD *)(v274 + 96);
      v299 = *(_QWORD *)(v274 + 24);
      v300 = (const void *)(v298 + *(_QWORD *)(v274 + 16));
      if (v299)
        v301 = v300;
      else
        v301 = 0;
      memcpy(v297 + 1, v301, v299);
      if (!*(_BYTE *)(a1 + 764))
        goto LABEL_581;
      v302 = *(_BYTE *)(a1 + 760);
      v304 = (uint64_t *)((char *)v495 + 88);
      v303 = *((_QWORD *)v495 + 11);
      *((_BYTE *)v495 + 1) = v302;
      v305 = v304[1];
      v306 = *(_BYTE *)(*(_QWORD *)(v303 + 16) + v305 + 1) & 0x80 | v302;
      rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(v304, (uint64_t *)(*(_QWORD *)(v303 + 8) - v305));
      *(_BYTE *)(*(_QWORD *)(*v304 + 16) + v304[1] + 1) = v306;
      v307 = v495;
      *((_BYTE *)v495 + 187) = 1;
      v308 = *((_QWORD *)v307 + 15);
      if (*((_BYTE *)v307 + 128) && !v308)
      {
        v24 = a9;
        goto LABEL_341;
      }
      v24 = a9;
      if (*((_BYTE *)v307 + 128) && v308 == 1)
      {
LABEL_341:
        *((_DWORD *)v307 + 34) = v308;
        *((_BYTE *)v307 + 140) = 1;
      }
      *((_QWORD *)v307 + 15) = 1;
      *((_BYTE *)v307 + 128) = 1;
      *((_BYTE *)v307 + 168) = *((_BYTE *)v500 + 168);
      v313 = v497;
      if ((unint64_t)v497 >= *((_QWORD *)&v497 + 1))
      {
        *(_QWORD *)&v497 = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(&v496, (uint64_t *)&v495);
        v314 = v495;
        v495 = 0;
        if (!v314)
          goto LABEL_362;
      }
      else
      {
        if (!(_QWORD)v497)
          goto LABEL_581;
        v495 = 0;
        *(_QWORD *)v497 = v307;
        *(_QWORD *)&v497 = v313 + 8;
        v314 = v495;
        v495 = 0;
        if (!v314)
        {
LABEL_362:
          if (!v490)
            goto LABEL_363;
          goto LABEL_388;
        }
      }
      v315 = (unsigned int *)*((_QWORD *)v314 + 22);
      if (v315)
      {
        v316 = v315 + 2;
        do
        {
          v317 = __ldaxr(v316);
          v318 = v317 - 1;
        }
        while (__stlxr(v318, v316));
        if (!v318)
          (*(void (**)(unsigned int *))(*(_QWORD *)v315 + 8))(v315);
      }
      v319 = *((_QWORD *)v314 + 11);
      if (v319)
      {
        v320 = (unsigned int *)(v319 + 24);
        do
        {
          v321 = __ldaxr(v320);
          v322 = v321 - 1;
        }
        while (__stlxr(v322, v320));
        if (!v322)
        {
          v323 = *(_QWORD *)(v319 + 16);
          *(_QWORD *)(v319 + 16) = 0;
          if (v323)
            MEMORY[0x20BD0ADD4](v323, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v319, 0x1010C40EE34DA14);
        }
      }
      v324 = (void *)*((_QWORD *)v314 + 7);
      if (v324)
      {
        *((_QWORD *)v314 + 8) = v324;
        operator delete(v324);
      }
      MEMORY[0x20BD0ADEC](v314, 0x1020C4000E59722);
      goto LABEL_362;
    }
    v309 = *(_QWORD *)(v272 + 120);
    if (*(_BYTE *)(v272 + 128))
      v310 = v309 == 0;
    else
      v310 = 0;
    if (v310)
    {
      v312 = 0;
    }
    else
    {
      if (*(_BYTE *)(v272 + 128))
        v311 = v309 == 1;
      else
        v311 = 0;
      if (!v311)
        goto LABEL_383;
      v312 = 1;
    }
    *(_DWORD *)(v272 + 136) = v312;
    *(_BYTE *)(v272 + 140) = 1;
LABEL_383:
    *(_QWORD *)(v272 + 120) = 1;
    *(_BYTE *)(v272 + 128) = 1;
    v345 = v497;
    if ((unint64_t)v497 < *((_QWORD *)&v497 + 1))
    {
      if (!(_QWORD)v497)
        goto LABEL_581;
      v500 = 0;
      *(_QWORD *)v497 = v272;
      *(_QWORD *)&v497 = v345 + 8;
      if (v490)
        goto LABEL_388;
LABEL_363:
      if (!v240 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v475 = v475 & 0xFFFFFFFF00000000 | 0x1631;
        rtc::webrtc_logging_impl::Log("\r\t", v325, v326, v327, v328, v329, v330, v331, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc");
      }
      if (v240 == v487 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v476 = v476 & 0xFFFFFFFF00000000 | 0x1651;
        rtc::webrtc_logging_impl::Log("\r\t", v332, v333, v334, v335, v336, v337, v338, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc");
      }
      goto LABEL_388;
    }
    *(_QWORD *)&v497 = std::vector<std::unique_ptr<webrtc::RtpPacketToSend>>::__push_back_slow_path<std::unique_ptr<webrtc::RtpPacketToSend>>(&v496, (uint64_t *)&v500);
    if (!v490)
      goto LABEL_363;
LABEL_388:
    v346 = v500;
    v500 = 0;
    if (v346)
    {
      v347 = (unsigned int *)v346[22];
      if (v347)
      {
        v348 = v347 + 2;
        do
        {
          v349 = __ldaxr(v348);
          v350 = v349 - 1;
        }
        while (__stlxr(v350, v348));
        if (!v350)
          (*(void (**)(unsigned int *))(*(_QWORD *)v347 + 8))(v347);
      }
      v351 = v346[11];
      if (v351)
      {
        v352 = (unsigned int *)(v351 + 24);
        do
        {
          v353 = __ldaxr(v352);
          v354 = v353 - 1;
        }
        while (__stlxr(v354, v352));
        if (!v354)
        {
          v355 = *(_QWORD *)(v351 + 16);
          *(_QWORD *)(v351 + 16) = 0;
          if (v355)
            MEMORY[0x20BD0ADD4](v355, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v351, 0x1010C40EE34DA14);
        }
      }
      v356 = (void *)v346[7];
      if (v356)
      {
        v346[8] = v356;
        operator delete(v356);
      }
      MEMORY[0x20BD0ADEC](v346, 0x1020C4000E59722);
    }
    v38 = ++v240 >= v239;
    if (v240 == v239)
    {
      v370 = (uint64_t)v496;
      v494 = v497;
      v497 = 0uLL;
      v496 = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 784));
      if (v370 != (_QWORD)v494)
      {
        v371 = 0;
        v372 = v370;
        v373 = v477;
        while (1)
        {
          v374 = *(_QWORD *)v372;
          if (!*(_BYTE *)(*(_QWORD *)v372 + 128))
            break;
          if (*(_QWORD *)(v374 + 120) == 1)
            v371 += *(_QWORD *)(v374 + 24);
          v372 += 8;
          if (v372 == (_QWORD)v494)
            goto LABEL_432;
        }
LABEL_581:
        __break(1u);
LABEL_582:
        abort();
      }
      v371 = 0;
      v373 = v477;
LABEL_432:
      v375 = v371 - v373;
      if (v371 >= v373)
      {
        v376 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
        v377 = v376 / 0x3E8uLL;
        if (v376 % 0x3E8uLL > 0x1F3)
          ++v377;
        if (-v376 % 0x3E8uLL <= 0x1F4)
          v378 = 0;
        else
          v378 = -1;
        if (v376 < 0)
          v379 = v378 - -v376 / 0x3E8uLL;
        else
          v379 = v377;
        webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 848), v375, v379);
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 784));
      v380 = *(_QWORD **)(a1 + 8);
      v500 = (_OWORD *)v370;
      v501 = v494;
      webrtc::RTPSender::EnqueuePackets(v380, (unint64_t *)&v500);
      v388 = v500;
      if (v500)
      {
        v389 = (_QWORD *)v501;
        if ((_OWORD *)v501 != v500)
        {
          do
          {
            v391 = (_QWORD *)*--v389;
            v390 = v391;
            *v389 = 0;
            if (v391)
            {
              v392 = (unsigned int *)v390[22];
              if (v392)
              {
                v393 = v392 + 2;
                do
                {
                  v394 = __ldaxr(v393);
                  v395 = v394 - 1;
                }
                while (__stlxr(v395, v393));
                if (!v395)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v392 + 8))(v392);
              }
              v396 = v390[11];
              if (v396)
              {
                v397 = (unsigned int *)(v396 + 24);
                do
                {
                  v398 = __ldaxr(v397);
                  v399 = v398 - 1;
                }
                while (__stlxr(v399, v397));
                if (!v399)
                {
                  v400 = *(_QWORD *)(v396 + 16);
                  *(_QWORD *)(v396 + 16) = 0;
                  if (v400)
                    MEMORY[0x20BD0ADD4](v400, 0x1000C8077774924);
                  MEMORY[0x20BD0ADEC](v396, 0x1010C40EE34DA14);
                }
              }
              v401 = (void *)v390[7];
              if (v401)
              {
                v390[8] = v401;
                operator delete(v401);
              }
              MEMORY[0x20BD0ADEC](v390, 0x1020C4000E59722);
            }
          }
          while (v389 != v388);
          v388 = v500;
        }
        operator delete(v388);
      }
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(v24 + 160);
      v402 = (_OWORD *)(v24 + 216);
      v403 = (_OWORD *)(a1 + 48);
      v404 = *(unsigned __int8 *)(v24 + 284);
      v405 = *(unsigned __int8 *)(a1 + 116);
      if (*(_BYTE *)(v24 + 284) && *(_BYTE *)(a1 + 116))
      {
        if (!webrtc::operator!=((float *)(v24 + 216), (float *)(a1 + 48)))
        {
LABEL_467:
          v407 = (_BYTE *)(a1 + 120);
          v406 = *(_BYTE *)(a1 + 120);
          if (v406)
LABEL_477:
          v174 = v484;
          *v407 = v406;
          if (*(_DWORD *)(v24 + 152) == 3
          {
            *(_BYTE *)(a1 + 664) = 0;
            if (!*(_DWORD *)(a1 + 384))
              std::optional<webrtc::VideoLayersAllocation>::operator=[abi:sn180100](a1 + 392, (int *)(a1 + 136));
            *(_DWORD *)(a1 + 384) = 2;
          }
          v38 = 1;
          goto LABEL_483;
        }
      }
      else if ((v404 != 0) == (v405 != 0))
      {
        goto LABEL_467;
      }
      if (v405 == v404)
      {
        if (v405)
        {
          *v403 = *v402;
          v408 = *(_OWORD *)(v24 + 232);
          v409 = *(_OWORD *)(v24 + 248);
          v410 = *(_OWORD *)(v24 + 264);
          *(_BYTE *)(a1 + 112) = *(_BYTE *)(v24 + 280);
          *(_OWORD *)(a1 + 80) = v409;
          *(_OWORD *)(a1 + 96) = v410;
          *(_OWORD *)(a1 + 64) = v408;
        }
      }
      else if (v405)
      {
        *(_BYTE *)(a1 + 116) = 0;
      }
      else
      {
        *v403 = *v402;
        v411 = *(_OWORD *)(v24 + 232);
        v412 = *(_OWORD *)(v24 + 248);
        v413 = *(_OWORD *)(v24 + 264);
        *(_BYTE *)(a1 + 112) = *(_BYTE *)(v24 + 280);
        *(_OWORD *)(a1 + 80) = v412;
        *(_OWORD *)(a1 + 96) = v413;
        *(_OWORD *)(a1 + 64) = v411;
        *(_BYTE *)(a1 + 116) = 1;
      }
      v407 = (_BYTE *)(a1 + 120);
      goto LABEL_477;
    }
  }
  v500 = 0;
  v174 = v484;
  if (v269)
  {
    v360 = *(unsigned int **)(v269 + 176);
    if (v360)
    {
      v361 = v360 + 2;
      do
      {
        v362 = __ldaxr(v361);
        v363 = v362 - 1;
      }
      while (__stlxr(v363, v361));
      if (!v363)
        (*(void (**)(unsigned int *))(*(_QWORD *)v360 + 8))(v360);
    }
    v364 = *(_QWORD *)(v269 + 88);
    if (v364)
    {
      v365 = (unsigned int *)(v364 + 24);
      do
      {
        v366 = __ldaxr(v365);
        v367 = v366 - 1;
      }
      while (__stlxr(v367, v365));
      if (!v367)
      {
        v368 = *(_QWORD *)(v364 + 16);
        *(_QWORD *)(v364 + 16) = 0;
        if (v368)
          MEMORY[0x20BD0ADD4](v368, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v364, 0x1010C40EE34DA14);
      }
    }
    v369 = *(void **)(v269 + 56);
    if (v369)
    {
      *(_QWORD *)(v269 + 64) = v369;
      operator delete(v369);
    }
    MEMORY[0x20BD0ADEC](v269, 0x1020C4000E59722);
  }
LABEL_483:
  v414 = v496;
  if (v496)
  {
    v415 = (unsigned __int8 *)v497;
    v416 = v496;
    if ((unsigned __int8 *)v497 != v496)
    {
      do
      {
        v418 = (_QWORD *)*((_QWORD *)v415 - 1);
        v415 -= 8;
        v417 = v418;
        *(_QWORD *)v415 = 0;
        if (v418)
        {
          v419 = (unsigned int *)v417[22];
          if (v419)
          {
            v420 = v419 + 2;
            do
            {
              v421 = __ldaxr(v420);
              v422 = v421 - 1;
            }
            while (__stlxr(v422, v420));
            if (!v422)
              (*(void (**)(unsigned int *))(*(_QWORD *)v419 + 8))(v419);
          }
          v423 = v417[11];
          if (v423)
          {
            v424 = (unsigned int *)(v423 + 24);
            do
            {
              v425 = __ldaxr(v424);
              v426 = v425 - 1;
            }
            while (__stlxr(v426, v424));
            if (!v426)
            {
              v427 = *(_QWORD *)(v423 + 16);
              *(_QWORD *)(v423 + 16) = 0;
              if (v427)
                MEMORY[0x20BD0ADD4](v427, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v423, 0x1010C40EE34DA14);
            }
          }
          v428 = (void *)v417[7];
          if (v428)
          {
            v417[8] = v428;
            operator delete(v428);
          }
          MEMORY[0x20BD0ADEC](v417, 0x1020C4000E59722);
        }
      }
      while (v415 != v414);
      v416 = v496;
    }
    *(_QWORD *)&v497 = v414;
    operator delete(v416);
    v174 = v484;
  }
  v237 = v498;
  v222 = v474;
  if (v498)
LABEL_506:
    (*(void (**)(uint64_t))(*(_QWORD *)v237 + 8))(v237);
  v233 = (void **)(v150 + 56);
  if (v222)
LABEL_508:
    MEMORY[0x20BD0ADD4](v222, 0x1000C8077774924);
LABEL_509:
  if (v174)
  {
    v429 = *(unsigned int **)(v174 + 176);
    if (v429)
    {
      v430 = v429 + 2;
      do
      {
        v431 = __ldaxr(v430);
        v432 = v431 - 1;
      }
      while (__stlxr(v432, v430));
      if (!v432)
        (*(void (**)(unsigned int *))(*(_QWORD *)v429 + 8))(v429);
    }
    v433 = *(_QWORD *)(v174 + 88);
    if (v433)
    {
      v434 = (unsigned int *)(v433 + 24);
      do
      {
        v435 = __ldaxr(v434);
        v436 = v435 - 1;
      }
      while (__stlxr(v436, v434));
      if (!v436)
      {
        v437 = *(_QWORD *)(v433 + 16);
        *(_QWORD *)(v433 + 16) = 0;
        if (v437)
          MEMORY[0x20BD0ADD4](v437, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v433, 0x1010C40EE34DA14);
      }
    }
    v438 = *(void **)(v174 + 56);
    if (v438)
    {
      *(_QWORD *)(v174 + 64) = v438;
      operator delete(v438);
    }
    MEMORY[0x20BD0ADEC](v174, 0x1020C4000E59722);
  }
  v439 = *(unsigned int **)(v150 + 176);
  if (v439)
  {
    v440 = v439 + 2;
    do
    {
      v441 = __ldaxr(v440);
      v442 = v441 - 1;
    }
    while (__stlxr(v442, v440));
    if (!v442)
      (*(void (**)(unsigned int *))(*(_QWORD *)v439 + 8))(v439);
  }
  v443 = *(_QWORD *)(v150 + 88);
  if (v443)
  {
    v444 = (unsigned int *)(v443 + 24);
    do
    {
      v445 = __ldaxr(v444);
      v446 = v445 - 1;
    }
    while (__stlxr(v446, v444));
    if (!v446)
    {
      v447 = *(_QWORD *)(v443 + 16);
      *(_QWORD *)(v443 + 16) = 0;
      if (v447)
        MEMORY[0x20BD0ADD4](v447, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v443, 0x1010C40EE34DA14);
    }
  }
  v448 = *v233;
  if (*v233)
  {
    *(_QWORD *)(v150 + 64) = v448;
    operator delete(v448);
  }
  MEMORY[0x20BD0ADEC](v150, 0x1020C4000E59722);
  if (v130)
  {
    v449 = *(unsigned int **)(v130 + 176);
    if (v449)
    {
      v450 = v449 + 2;
      do
      {
        v451 = __ldaxr(v450);
        v452 = v451 - 1;
      }
      while (__stlxr(v452, v450));
      if (!v452)
        (*(void (**)(unsigned int *))(*(_QWORD *)v449 + 8))(v449);
    }
    v453 = *(_QWORD *)(v130 + 88);
    if (v453)
    {
      v454 = (unsigned int *)(v453 + 24);
      do
      {
        v455 = __ldaxr(v454);
        v456 = v455 - 1;
      }
      while (__stlxr(v456, v454));
      if (!v456)
      {
        v457 = *(_QWORD *)(v453 + 16);
        *(_QWORD *)(v453 + 16) = 0;
        if (v457)
          MEMORY[0x20BD0ADD4](v457, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v453, 0x1010C40EE34DA14);
      }
    }
    v458 = *(void **)(v130 + 56);
    if (v458)
    {
      *(_QWORD *)(v130 + 64) = v458;
      operator delete(v458);
    }
    MEMORY[0x20BD0ADEC](v130, 0x1020C4000E59722);
  }
  v459 = v499;
  v499 = 0;
  if (v459)
  {
    v460 = (unsigned int *)*((_QWORD *)v459 + 22);
    if (v460)
    {
      v461 = v460 + 2;
      do
      {
        v462 = __ldaxr(v461);
        v463 = v462 - 1;
      }
      while (__stlxr(v463, v461));
      if (!v463)
        (*(void (**)(unsigned int *))(*(_QWORD *)v460 + 8))(v460);
    }
    v464 = *((_QWORD *)v459 + 11);
    if (v464)
    {
      v465 = (unsigned int *)(v464 + 24);
      do
      {
        v466 = __ldaxr(v465);
        v467 = v466 - 1;
      }
      while (__stlxr(v467, v465));
      if (!v467)
      {
        v468 = *(_QWORD *)(v464 + 16);
        *(_QWORD *)(v464 + 16) = 0;
        if (v468)
          MEMORY[0x20BD0ADD4](v468, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v464, 0x1010C40EE34DA14);
      }
    }
    v469 = (void *)*((_QWORD *)v459 + 7);
    if (v469)
    {
      *((_QWORD *)v459 + 8) = v469;
      operator delete(v469);
    }
    MEMORY[0x20BD0ADEC](v459, 0x1020C4000E59722);
  }
LABEL_571:
  --*(_DWORD *)(a1 + 24);
  return v38;
}

