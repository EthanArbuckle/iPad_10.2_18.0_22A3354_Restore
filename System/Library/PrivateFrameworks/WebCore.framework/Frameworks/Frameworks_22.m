int *av1_fidentity4_c(int *result, _DWORD *a2)
{
  *a2 = (unint64_t)(5793 * *result + 2048) >> 12;
  a2[1] = (unint64_t)(5793 * result[1] + 2048) >> 12;
  a2[2] = (unint64_t)(5793 * result[2] + 2048) >> 12;
  a2[3] = (unint64_t)(5793 * result[3] + 2048) >> 12;
  return result;
}

_DWORD *av1_fidentity8_c(_DWORD *result, _DWORD *a2)
{
  *a2 = 2 * *result;
  a2[1] = 2 * result[1];
  a2[2] = 2 * result[2];
  a2[3] = 2 * result[3];
  a2[4] = 2 * result[4];
  a2[5] = 2 * result[5];
  a2[6] = 2 * result[6];
  a2[7] = 2 * result[7];
  return result;
}

int *av1_fidentity16_c(int *result, _DWORD *a2)
{
  *a2 = (unint64_t)(11586 * *result + 2048) >> 12;
  a2[1] = (unint64_t)(11586 * result[1] + 2048) >> 12;
  a2[2] = (unint64_t)(11586 * result[2] + 2048) >> 12;
  a2[3] = (unint64_t)(11586 * result[3] + 2048) >> 12;
  a2[4] = (unint64_t)(11586 * result[4] + 2048) >> 12;
  a2[5] = (unint64_t)(11586 * result[5] + 2048) >> 12;
  a2[6] = (unint64_t)(11586 * result[6] + 2048) >> 12;
  a2[7] = (unint64_t)(11586 * result[7] + 2048) >> 12;
  a2[8] = (unint64_t)(11586 * result[8] + 2048) >> 12;
  a2[9] = (unint64_t)(11586 * result[9] + 2048) >> 12;
  a2[10] = (unint64_t)(11586 * result[10] + 2048) >> 12;
  a2[11] = (unint64_t)(11586 * result[11] + 2048) >> 12;
  a2[12] = (unint64_t)(11586 * result[12] + 2048) >> 12;
  a2[13] = (unint64_t)(11586 * result[13] + 2048) >> 12;
  a2[14] = (unint64_t)(11586 * result[14] + 2048) >> 12;
  a2[15] = (unint64_t)(11586 * result[15] + 2048) >> 12;
  return result;
}

_DWORD *av1_fidentity32_c(_DWORD *result, _DWORD *a2)
{
  *a2 = 4 * *result;
  a2[1] = 4 * result[1];
  a2[2] = 4 * result[2];
  a2[3] = 4 * result[3];
  a2[4] = 4 * result[4];
  a2[5] = 4 * result[5];
  a2[6] = 4 * result[6];
  a2[7] = 4 * result[7];
  a2[8] = 4 * result[8];
  a2[9] = 4 * result[9];
  a2[10] = 4 * result[10];
  a2[11] = 4 * result[11];
  a2[12] = 4 * result[12];
  a2[13] = 4 * result[13];
  a2[14] = 4 * result[14];
  a2[15] = 4 * result[15];
  a2[16] = 4 * result[16];
  a2[17] = 4 * result[17];
  a2[18] = 4 * result[18];
  a2[19] = 4 * result[19];
  a2[20] = 4 * result[20];
  a2[21] = 4 * result[21];
  a2[22] = 4 * result[22];
  a2[23] = 4 * result[23];
  a2[24] = 4 * result[24];
  a2[25] = 4 * result[25];
  a2[26] = 4 * result[26];
  a2[27] = 4 * result[27];
  a2[28] = 4 * result[28];
  a2[29] = 4 * result[29];
  a2[30] = 4 * result[30];
  a2[31] = 4 * result[31];
  return result;
}

uint64_t av1_fdct64(_DWORD *a1, int *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t result;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  int v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  int v302;
  int v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  int v342;
  int v343;
  int v344;
  uint64_t v345;
  int v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int v350;
  uint64_t v351;
  int v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  int v356;
  int v357;
  int v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;

  v363 = a1[63] + *a1;
  *a2 = v363;
  v360 = a1[62] + a1[1];
  a2[1] = v360;
  v358 = a1[61] + a1[2];
  a2[2] = v358;
  v356 = a1[60] + a1[3];
  a2[3] = v356;
  v307 = a1[59] + a1[4];
  a2[4] = v307;
  v309 = a1[58] + a1[5];
  a2[5] = v309;
  v321 = a1[57] + a1[6];
  a2[6] = v321;
  v3 = 1 << (a3 - 1);
  v340 = a1[56] + a1[7];
  a2[7] = v340;
  v330 = a1[55] + a1[8];
  a2[8] = v330;
  v338 = a1[54] + a1[9];
  a2[9] = v338;
  v287 = a1[53] + a1[10];
  a2[10] = v287;
  v290 = a1[52] + a1[11];
  a2[11] = v290;
  v342 = a1[51] + a1[12];
  a2[12] = v342;
  v335 = a1[50] + a1[13];
  a2[13] = v335;
  v350 = a1[49] + a1[14];
  a2[14] = v350;
  v354 = a1[48] + a1[15];
  a2[15] = v354;
  v352 = a1[47] + a1[16];
  a2[16] = v352;
  v348 = a1[46] + a1[17];
  a2[17] = v348;
  v328 = a1[45] + a1[18];
  a2[18] = v328;
  v332 = a1[44] + a1[19];
  a2[19] = v332;
  v4 = a1[43] + a1[20];
  a2[20] = v4;
  v5 = a1[42] + a1[21];
  a2[21] = v5;
  v324 = a1[41] + a1[22];
  a2[22] = v324;
  v6 = a1[40] + a1[23];
  a2[23] = v6;
  v231 = v6;
  v7 = a1[39] + a1[24];
  a2[24] = v7;
  v315 = a1[38] + a1[25];
  a2[25] = v315;
  v8 = a1[37] + a1[26];
  a2[26] = v8;
  v9 = a1[36] + a1[27];
  a2[27] = v9;
  v326 = a1[35] + a1[28];
  a2[28] = v326;
  v318 = a1[34] + a1[29];
  a2[29] = v318;
  v344 = a1[33] + a1[30];
  a2[30] = v344;
  v346 = a1[32] + a1[31];
  a2[31] = v346;
  v305 = a1[31] - a1[32];
  a2[32] = v305;
  v302 = a1[30] - a1[33];
  a2[33] = v302;
  v296 = a1[29] - a1[34];
  a2[34] = v296;
  v298 = a1[28] - a1[35];
  a2[35] = v298;
  v312 = a1[27] - a1[36];
  a2[36] = v312;
  v282 = a1[26] - a1[37];
  a2[37] = v282;
  v285 = a1[25] - a1[38];
  a2[38] = v285;
  v279 = a1[24] - a1[39];
  a2[39] = v279;
  v10 = a1[23] - a1[40];
  a2[40] = v10;
  v11 = a1[22] - a1[41];
  a2[41] = v11;
  v12 = a1[21] - a1[42];
  a2[42] = v12;
  v13 = a1[20] - a1[43];
  a2[43] = v13;
  v14 = a1[19] - a1[44];
  a2[44] = v14;
  v15 = a1[18] - a1[45];
  a2[45] = v15;
  v16 = a1[17] - a1[46];
  a2[46] = v16;
  v17 = a1[16] - a1[47];
  a2[47] = v17;
  v260 = a1[15] - a1[48];
  a2[48] = v260;
  v263 = a1[14] - a1[49];
  a2[49] = v263;
  v266 = a1[13] - a1[50];
  a2[50] = v266;
  v18 = a1[12] - a1[51];
  a2[51] = v18;
  v19 = a1[11] - a1[52];
  a2[52] = v19;
  v20 = a1[10] - a1[53];
  a2[53] = v20;
  v21 = a1[9] - a1[54];
  a2[54] = v21;
  v22 = a1[8] - a1[55];
  a2[55] = v22;
  v274 = a1[7] - a1[56];
  a2[56] = v274;
  v277 = a1[6] - a1[57];
  a2[57] = v277;
  v272 = a1[5] - a1[58];
  a2[58] = v272;
  v269 = a1[4] - a1[59];
  a2[59] = v269;
  v294 = a1[3] - a1[60];
  a2[60] = v294;
  v292 = a1[2] - a1[61];
  a2[61] = v292;
  v300 = a1[1] - a1[62];
  a2[62] = v300;
  v23 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v311 = av1_cospi_arr_data[64 * (uint64_t)a3 - 609];
  v24 = v3 + v23 * v260;
  v259 = v24 + -(v23 * v17);
  v261 = v24 + v23 * v17;
  v25 = v3 + v23 * v263;
  v257 = v25 + -(v23 * v16);
  v258 = v25 + v23 * v16;
  v26 = v3 + v23 * v266;
  v237 = v26 + -(v23 * v15);
  v239 = v26 + v23 * v15;
  v27 = v3 + v23 * v18;
  v241 = v27 + -(v23 * v14);
  v244 = v27 + v23 * v14;
  v28 = v3 + v23 * v19;
  v29 = v28 + -(v23 * v13);
  v30 = v28 + v23 * v13;
  v31 = v3 + v23 * v20;
  v32 = v31 + -(v23 * v12);
  v33 = v31 + v23 * v12;
  v34 = v3 + v23 * v21;
  v35 = v34 + -(v23 * v11);
  v36 = v34 + v23 * v11;
  v37 = v3 + v23 * v22;
  v38 = v37 + -(v23 * v10);
  v39 = v37 + v23 * v10;
  v40 = v3 + v23 * (v340 - v7);
  v264 = v40 + -(v23 * (v330 - v6));
  v267 = v40 + v23 * (v330 - v6);
  v41 = v3 + v23 * (v321 - v315);
  v247 = v41 + -(v23 * (v338 - v324));
  v248 = v41 + v23 * (v338 - v324);
  v42 = v3 + v23 * (v309 - v8);
  v203 = v42 + -(v23 * (v287 - v5));
  v211 = v42 + v23 * (v287 - v5);
  v43 = v3 + v23 * (v307 - v9);
  v208 = v43 + -(v23 * (v290 - v4));
  v44 = v23;
  v251 = v43 + v23 * (v290 - v4);
  v217 = v9 + v307;
  v214 = v4 + v290;
  v204 = v332 + v342;
  v45 = v3 + v23 * (v326 + v356 - (v332 + v342));
  LODWORD(v43) = v217 - (v4 + v290);
  v249 = v45 + v23 * (int)v43;
  v250 = v45 + -(v23 * (_DWORD)v43);
  v196 = v8 + v309;
  v46 = v5 + v287;
  v47 = v3 + v23 * (v318 + v358 - (v328 + v335));
  v48 = v8 + v309 - (v5 + v287);
  v226 = v47 + -(v23 * v48);
  v291 = v47 + v23 * v48;
  v49 = v29 >> a3;
  v192 = v312 + v49;
  LODWORD(v47) = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v310 = av1_cospi_arr_data[64 * (uint64_t)a3 - 625];
  v188 = v269 + (v30 >> a3);
  v50 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v308 = av1_cospi_arr_data[64 * (uint64_t)a3 - 593];
  v233 = v3 + -((_DWORD)v47 * (v312 + (_DWORD)v49)) + v50 * v188;
  v51 = v32 >> a3;
  v186 = v282 + (v32 >> a3);
  v52 = v33 >> a3;
  v53 = v272 + v52;
  v190 = v3 + -((_DWORD)v47 * v186) + v50 * (v272 + (int)v52);
  v54 = v35 >> a3;
  v55 = v285 + v54;
  v56 = v36 >> a3;
  v57 = v277 + v56;
  v255 = v3 + -((_DWORD)v47 * (v285 + (_DWORD)v54)) + v50 * (v277 + (int)v56);
  v58 = v38 >> a3;
  LODWORD(v38) = v279 + (v38 >> a3);
  v59 = v39 >> a3;
  v60 = v274 + v59;
  v253 = v3 + -((_DWORD)v47 * (_DWORD)v38) + v50 * (v274 + (int)v59);
  LODWORD(v58) = v279 - v58;
  LODWORD(v59) = v274 - v59;
  v288 = v3 + -((_DWORD)v47 * (_DWORD)v59) + -(v50 * (_DWORD)v58);
  LODWORD(v56) = v277 - v56;
  v280 = v3 + -((_DWORD)v47 * (_DWORD)v56) + -(v50 * (v285 - (_DWORD)v54));
  LODWORD(v52) = v272 - v52;
  v229 = v3 + -((_DWORD)v47 * (_DWORD)v52) + -(v50 * (v282 - (_DWORD)v51));
  LODWORD(v49) = v312 - v49;
  LODWORD(v30) = v269 - (v30 >> a3);
  v313 = v3 + -((_DWORD)v47 * (_DWORD)v30) + -(v50 * (_DWORD)v49);
  v220 = v3 + -((_DWORD)v47 * (v282 - (_DWORD)v51)) + v50 * (int)v52;
  v223 = v3 + -((_DWORD)v47 * (_DWORD)v49) + v50 * (int)v30;
  v275 = v3 + -((_DWORD)v47 * (v285 - (_DWORD)v54)) + v50 * (int)v56;
  v278 = v3 + -((_DWORD)v47 * (_DWORD)v58) + v50 * (int)v59;
  v286 = v3 + (int)v47 * v60 + v50 * (int)v38;
  v273 = v3 + (int)v47 * v57 + v50 * v55;
  v176 = v3 + (int)v47 * v53 + v50 * v186;
  v177 = v3 + (int)v47 * v188 + v50 * v192;
  LODWORD(v30) = v315 + v321;
  LODWORD(v58) = v324 + v338;
  LODWORD(v52) = v318 + v358 + v328 + v335;
  v61 = v344 + v360 + v348 + v350;
  LODWORD(v24) = v315 + v321 + v324 + v338;
  v62 = v3 + v44 * (v61 - (int)v24);
  v63 = v52 - (v196 + v46);
  v322 = v62 + -(v44 * v63);
  v316 = v62 + v44 * v63;
  LODWORD(v62) = v335 - v328;
  v64 = v335 - v328 + (v203 >> a3);
  v65 = v211 >> a3;
  v66 = v358 - v318 + (v211 >> a3);
  v212 = v3 + -((_DWORD)v47 * v64) + v50 * v66;
  LODWORD(v56) = v342 - v332;
  LODWORD(v54) = v342 - v332 + (v208 >> a3);
  LODWORD(v43) = v356 - v326 + (v251 >> a3);
  v333 = v3 + -((_DWORD)v47 * (_DWORD)v54) + v50 * (int)v43;
  LODWORD(v49) = v56 - (v208 >> a3);
  v67 = v356 - v326 - (v251 >> a3);
  v336 = v3 + -((_DWORD)v47 * v67) + -(v50 * (_DWORD)v49);
  LODWORD(v62) = v62 - (v203 >> a3);
  v68 = v358 - v318 - v65;
  v209 = v3 + -((_DWORD)v47 * v68) + -(v50 * (_DWORD)v62);
  v195 = v3 + -((_DWORD)v47 * (_DWORD)v62) + v50 * v68;
  v252 = v3 + -((_DWORD)v47 * (_DWORD)v49) + v50 * v67;
  v339 = v3 + (int)v47 * (int)v43 + v50 * (int)v54;
  v187 = v3 + (int)v47 * v66 + v50 * v64;
  v270 = v7 + v340;
  v200 = v231 + v330;
  v319 = v326 + v356 + v204;
  LODWORD(v52) = v52 + v196 + v46;
  v197 = v352 + v354;
  v181 = v346 + v363 + v352 + v354;
  v184 = v217 + v214;
  v178 = v7 + v340 + v231 + v330;
  LODWORD(v49) = v319 + v217 + v214;
  LODWORD(v54) = v44 * (v61 + v24 + v52);
  v69 = v3 + v44 * (v181 + v178 + (int)v49);
  v325 = v69 + (int)v54;
  v329 = v69 + -(int)v54;
  v70 = v61 + v24 - v52;
  LODWORD(v52) = v181 + v178 - v49;
  v327 = v3 + (int)v47 * (int)v52 + v50 * v70;
  v331 = v3 + -((_DWORD)v47 * v70) + v50 * (int)v52;
  v71 = v30 - v58;
  LODWORD(v52) = v344 + v360 - (v348 + v350);
  LODWORD(v58) = v30 - v58 + (v226 >> a3);
  LODWORD(v49) = v52 + (v291 >> a3);
  v193 = v3 + -((_DWORD)v47 * (_DWORD)v58) + v50 * (int)v49;
  v72 = v71 - (v226 >> a3);
  LODWORD(v52) = v52 - (v291 >> a3);
  v283 = v3 + -((_DWORD)v47 * (_DWORD)v52) + -(v50 * v72);
  v215 = v3 + -((_DWORD)v47 * v72) + v50 * (int)v52;
  v189 = v3 + (int)v47 * (int)v49 + v50 * (int)v58;
  v73 = v190 >> a3;
  v74 = v296 + (v237 >> a3);
  v75 = v74 + (v190 >> a3);
  LODWORD(v47) = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  LODWORD(v291) = av1_cospi_arr_data[64 * (uint64_t)a3 - 633];
  v76 = v292 + (v239 >> a3);
  LODWORD(v190) = v76 + (v176 >> a3);
  LODWORD(v52) = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v359 = av1_cospi_arr_data[64 * (uint64_t)a3 - 585];
  v227 = v3 + -((_DWORD)v47 * v75) + (int)v52 * (int)v190;
  v77 = v298 + (v241 >> a3);
  v78 = v77 + (v233 >> a3);
  v79 = v244 >> a3;
  v80 = v294 + (v244 >> a3);
  LODWORD(v51) = v80 + (v177 >> a3);
  v245 = v3 + -((_DWORD)v47 * v78) + (int)v52 * (int)v51;
  v81 = v77 - (v233 >> a3);
  LODWORD(v24) = v80 - (v177 >> a3);
  v341 = v3 + -((_DWORD)v47 * (_DWORD)v24) + -((_DWORD)v52 * v81);
  v82 = v74 - v73;
  LODWORD(v65) = v76 - (v176 >> a3);
  v218 = v3 + -((_DWORD)v47 * (_DWORD)v65) + -((_DWORD)v52 * (v74 - (_DWORD)v73));
  LODWORD(v62) = v296 - (v237 >> a3);
  LODWORD(v49) = v292 - (v239 >> a3);
  v83 = v229 >> a3;
  v84 = v62 - (v229 >> a3);
  v85 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v357 = av1_cospi_arr_data[64 * (uint64_t)a3 - 601];
  v86 = v49 - (v220 >> a3);
  LODWORD(v73) = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v343 = av1_cospi_arr_data[64 * (uint64_t)a3 - 617];
  v230 = v3 + -(v85 * v84) + (int)v73 * v86;
  LODWORD(v38) = v298 - (v241 >> a3);
  LODWORD(v79) = v294 - v79;
  v87 = v38 - (v313 >> a3);
  LODWORD(v43) = v79 - (v223 >> a3);
  v240 = v3 + -(v85 * v87) + (int)v73 * (int)v43;
  LODWORD(v58) = v38 + (v313 >> a3);
  v88 = v79 + (v223 >> a3);
  v242 = v3 + -(v85 * v88) + -((_DWORD)v73 * (_DWORD)v58);
  LODWORD(v79) = v62 + v83;
  LODWORD(v62) = v49 + (v220 >> a3);
  v221 = v3 + -(v85 * (_DWORD)v79) + (int)v73 * (int)v62;
  v224 = v3 + -(v85 * (_DWORD)v62) + -((_DWORD)v73 * (_DWORD)v79);
  v236 = v3 + -(v85 * (_DWORD)v58) + (int)v73 * v88;
  v238 = v3 + v85 * (int)v43 + (int)v73 * v87;
  v205 = v3 + -((_DWORD)v47 * v82) + (int)v52 * (int)v65;
  v206 = v3 + v85 * v86 + (int)v73 * v84;
  v232 = v3 + -((_DWORD)v47 * v81) + (int)v52 * (int)v24;
  v234 = v3 + (int)v47 * (int)v51 + (int)v52 * v78;
  v191 = v3 + (int)v47 * (int)v190 + (int)v52 * v75;
  LODWORD(v62) = v181 - v178 + (v316 >> a3);
  LODWORD(v24) = v319 - v184 + (v322 >> a3);
  v314 = v3 + (int)v47 * (int)v62 + (int)v52 * (int)v24;
  v89 = v319 - v184 - (v322 >> a3);
  LODWORD(v43) = v181 - v178 - (v316 >> a3);
  v320 = v3 + v85 * (int)v43 + (int)v73 * v89;
  v317 = v3 + -(v85 * v89) + (int)v73 * (int)v43;
  v323 = v3 + -((_DWORD)v47 * (_DWORD)v24) + (int)v52 * (int)v62;
  v90 = v350 - v348;
  v91 = v350 - v348 + (v247 >> a3);
  v92 = v91 + (v212 >> a3);
  v93 = v360 - v344 + (v248 >> a3);
  LODWORD(v65) = v93 + (v187 >> a3);
  v349 = v3 + -((_DWORD)v47 * v92) + (int)v52 * (int)v65;
  LODWORD(v62) = v91 - (v212 >> a3);
  v94 = v93 - (v187 >> a3);
  v351 = v3 + -((_DWORD)v47 * v94) + -((_DWORD)v52 * (_DWORD)v62);
  v95 = v90 - (v247 >> a3);
  LODWORD(v43) = v360 - v344 - (v248 >> a3);
  LODWORD(v24) = v95 - (v209 >> a3);
  v96 = v43 - (v195 >> a3);
  v213 = v3 + -(v85 * (_DWORD)v24) + (int)v73 * v96;
  v97 = v95 + (v209 >> a3);
  LODWORD(v43) = v43 + (v195 >> a3);
  v345 = v3 + -(v85 * (_DWORD)v43) + -((_DWORD)v73 * v97);
  v210 = v3 + -(v85 * v97) + (int)v73 * (int)v43;
  LODWORD(v49) = *a1 - a1[63];
  LODWORD(v38) = v354 - v352;
  v355 = v3 + v85 * v96 + (int)v73 * (int)v24;
  LODWORD(v56) = v363 - v346;
  v98 = v270 - v200;
  v353 = v3 + -((_DWORD)v47 * (_DWORD)v62) + (int)v52 * v94;
  LODWORD(v43) = v346 + v363 - v197;
  LODWORD(v73) = v302 + (v257 >> a3);
  LODWORD(v58) = v302 - (v257 >> a3);
  v347 = v3 + (int)v47 * (int)v65 + (int)v52 * v92;
  v99 = v305 + (v259 >> a3);
  v100 = v305 - (v259 >> a3);
  LODWORD(v52) = v300 - (v258 >> a3);
  LODWORD(v203) = v300 + (v258 >> a3);
  v101 = v270 - v200 + (v250 >> a3);
  v303 = v101 + (v193 >> a3);
  v361 = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v271 = av1_cospi_arr_data[64 * (uint64_t)a3 - 581];
  LODWORD(v83) = v43 + (v249 >> a3);
  v102 = v83 + (v189 >> a3);
  v364 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  LODWORD(v259) = av1_cospi_arr_data[64 * (uint64_t)a3 - 637];
  v293 = v3 + v361 * v303 + v364 * v102;
  v103 = v101 - (v193 >> a3);
  LODWORD(v83) = v83 - (v189 >> a3);
  v104 = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  LODWORD(v257) = av1_cospi_arr_data[64 * (uint64_t)a3 - 613];
  v105 = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  LODWORD(v258) = av1_cospi_arr_data[64 * (uint64_t)a3 - 605];
  v301 = v3 + v104 * v103 + v105 * (int)v83;
  v106 = v98 - (v250 >> a3);
  v107 = v43 - (v249 >> a3);
  v108 = v106 - (v283 >> a3);
  LODWORD(v62) = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  LODWORD(v249) = av1_cospi_arr_data[64 * (uint64_t)a3 - 597];
  LODWORD(v47) = v107 - (v215 >> a3);
  LODWORD(v79) = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  LODWORD(v250) = av1_cospi_arr_data[64 * (uint64_t)a3 - 621];
  v297 = v3 + (int)v62 * v108 + (int)v79 * (int)v47;
  v109 = v106 + (v283 >> a3);
  LODWORD(v43) = v107 + (v215 >> a3);
  v110 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  LODWORD(v248) = av1_cospi_arr_data[64 * (uint64_t)a3 - 629];
  LODWORD(v65) = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  LODWORD(v247) = av1_cospi_arr_data[64 * (uint64_t)a3 - 589];
  v306 = v3 + v110 * v109 + (int)v65 * (int)v43;
  v111 = v49 - (v261 >> a3);
  LODWORD(v49) = v49 + (v261 >> a3);
  LODWORD(v24) = v38 + (v264 >> a3);
  LODWORD(v38) = v38 - (v264 >> a3);
  v284 = v3 + v110 * (int)v43 + -((_DWORD)v65 * v109);
  LODWORD(v51) = v56 - (v267 >> a3);
  LODWORD(v56) = v56 + (v267 >> a3);
  v112 = v73 + (v255 >> a3);
  LODWORD(v54) = v73 - (v255 >> a3);
  v299 = v3 + (int)v62 * (int)v47 + -((_DWORD)v79 * v108);
  v113 = v99 + (v253 >> a3);
  LODWORD(v267) = v99 - (v253 >> a3);
  v114 = v58 - (v280 >> a3);
  LODWORD(v193) = v58 + (v280 >> a3);
  v295 = v3 + v104 * (int)v83 + -(v105 * v103);
  v198 = v100 - (v288 >> a3);
  LODWORD(v264) = v100 + (v288 >> a3);
  LODWORD(v47) = v52;
  LODWORD(v52) = v52 + (v275 >> a3);
  v115 = v47 - (v275 >> a3);
  v304 = v3 + v361 * v102 + -(v364 * v303);
  LODWORD(v195) = v111 + (v278 >> a3);
  LODWORD(v261) = v111 - (v278 >> a3);
  LODWORD(v43) = v203 - (v273 >> a3);
  LODWORD(v83) = v203 + (v273 >> a3);
  v116 = v227 >> a3;
  LODWORD(v288) = v83 + (v191 >> a3);
  LODWORD(v280) = v112 + (v227 >> a3);
  v228 = v3 + v361 * (int)v288 + -(v364 * (_DWORD)v280);
  LODWORD(v275) = v112 - v116;
  LODWORD(v278) = v83 - (v191 >> a3);
  v216 = v3 + -((v112 - (_DWORD)v116) * v361) + -(v364 * (_DWORD)v278);
  LODWORD(v73) = v49 - (v286 >> a3);
  v117 = v49 + (v286 >> a3);
  LODWORD(v203) = v24 + (v333 >> a3);
  LODWORD(v255) = v24 - (v333 >> a3);
  v118 = v205 >> a3;
  LODWORD(v273) = v43 - (v205 >> a3);
  LODWORD(v286) = v54 - (v218 >> a3);
  v334 = v3 + v104 * (int)v273 + -(v105 * (_DWORD)v286);
  LODWORD(v205) = v54 + (v218 >> a3);
  v119 = v43 + v118;
  v219 = v3 + -((_DWORD)v205 * v104) + -(v105 * ((_DWORD)v43 + (_DWORD)v118));
  LODWORD(v58) = v38 - (v336 >> a3);
  LODWORD(v83) = v38 + (v336 >> a3);
  v169 = v51 + (v252 >> a3);
  LODWORD(v253) = v51 - (v252 >> a3);
  v120 = v115 + (v206 >> a3);
  LODWORD(v24) = v114 + (v230 >> a3);
  v337 = v3 + (int)v62 * v120 + -((_DWORD)v79 * (_DWORD)v24);
  LODWORD(v51) = v114 - (v230 >> a3);
  LODWORD(v43) = v115 - (v206 >> a3);
  v207 = v3 + -((_DWORD)v51 * (_DWORD)v62) + -((_DWORD)v79 * (_DWORD)v43);
  v121 = v56 - (v339 >> a3);
  v122 = v56 + (v339 >> a3);
  v201 = v113 + (v245 >> a3);
  LODWORD(v339) = v113 - (v245 >> a3);
  v123 = v224 >> a3;
  v124 = v52 - (v221 >> a3);
  LODWORD(v116) = v193 - (v224 >> a3);
  v225 = v3 + v110 * v124 + -((_DWORD)v65 * (_DWORD)v116);
  LODWORD(v52) = v52 + (v221 >> a3);
  v222 = v3 + -(((_DWORD)v193 + (_DWORD)v123) * v110) + -((_DWORD)v65 * (_DWORD)v52);
  v171 = v267 - (v341 >> a3);
  LODWORD(v176) = v267 + (v341 >> a3);
  LODWORD(v177) = v198 + (v240 >> a3);
  LODWORD(v187) = v198 - (v240 >> a3);
  v194 = v3 + v110 * (int)v52 + -((_DWORD)v65 * ((_DWORD)v193 + (_DWORD)v123));
  v174 = v264 - (v242 >> a3);
  v182 = v264 + (v242 >> a3);
  v185 = v195 + (v236 >> a3);
  LODWORD(v236) = v195 - (v236 >> a3);
  v173 = v3 + v110 * (int)v116 + (int)v65 * v124;
  v179 = v261 - (v238 >> a3);
  LODWORD(v191) = v261 + (v238 >> a3);
  v125 = v232 >> a3;
  LODWORD(v232) = v73 + (v232 >> a3);
  LODWORD(v240) = v73 - v125;
  v167 = v3 + (int)v62 * (int)v43 + -((_DWORD)v79 * (_DWORD)v51);
  LODWORD(v189) = v117 - (v234 >> a3);
  LODWORD(v238) = v117 + (v234 >> a3);
  LODWORD(v195) = v203 + (v349 >> a3);
  LODWORD(v252) = v203 - (v349 >> a3);
  v126 = v3 + (int)v62 * (int)v24 + (int)v79 * v120;
  v161 = v255 - (v351 >> a3);
  LODWORD(v234) = v255 + (v351 >> a3);
  v151 = v58 + (v213 >> a3);
  LODWORD(v79) = v58 - (v213 >> a3);
  v163 = v3 + v104 * v119 + -(v105 * (_DWORD)v205);
  v164 = v126;
  LODWORD(v267) = v83 - (v345 >> a3);
  LODWORD(v24) = v83 + (v345 >> a3);
  LODWORD(v52) = v169 + (v210 >> a3);
  v127 = v169 - (v210 >> a3);
  v160 = v3 + v104 * (int)v286 + v105 * (int)v273;
  LODWORD(v73) = v253 - (v355 >> a3);
  v128 = v253 + (v355 >> a3);
  v153 = v121 + (v353 >> a3);
  v156 = v121 - (v353 >> a3);
  v159 = v3 + v361 * (int)v278 + -(v364 * (_DWORD)v275);
  LODWORD(v83) = v122 - (v347 >> a3);
  v165 = v122 + (v347 >> a3);
  v158 = v3 + v361 * (int)v280 + v364 * (int)v288;
  v129 = av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  LODWORD(v213) = av1_cospi_arr_data[64 * (uint64_t)a3 - 579];
  v130 = av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v365 = av1_cospi_arr_data[64 * (uint64_t)a3 - 639];
  v254 = v3 + v129 * (int)v195 + v130 * v165;
  v131 = av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  LODWORD(v210) = av1_cospi_arr_data[64 * (uint64_t)a3 - 611];
  LODWORD(v51) = av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v362 = av1_cospi_arr_data[64 * (uint64_t)a3 - 607];
  LODWORD(v65) = av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  LODWORD(v205) = av1_cospi_arr_data[64 * (uint64_t)a3 - 595];
  v132 = av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  LODWORD(v355) = av1_cospi_arr_data[64 * (uint64_t)a3 - 623];
  v262 = v3 + (int)v65 * v161 + v132 * v156;
  v133 = av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  LODWORD(v203) = av1_cospi_arr_data[64 * (uint64_t)a3 - 627];
  v134 = av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  LODWORD(v353) = av1_cospi_arr_data[64 * (uint64_t)a3 - 591];
  v289 = v3 + v133 * (int)v234 + v134 * v153;
  LODWORD(v54) = av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v199 = av1_cospi_arr_data[64 * (uint64_t)a3 - 587];
  LODWORD(v62) = av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  LODWORD(v351) = av1_cospi_arr_data[64 * (uint64_t)a3 - 631];
  v246 = v3 + (int)v54 * v151 + (int)v62 * v128;
  LODWORD(v118) = av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v135 = v79;
  v136 = v3 + (int)v118 * (int)v79;
  LODWORD(v79) = av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  LODWORD(v349) = av1_cospi_arr_data[64 * (uint64_t)a3 - 599];
  LODWORD(v38) = av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v168 = av1_cospi_arr_data[64 * (uint64_t)a3 - 603];
  v170 = av1_cospi_arr_data[64 * (uint64_t)a3 - 619];
  LODWORD(v126) = av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  LODWORD(v341) = av1_cospi_arr_data[64 * (uint64_t)a3 - 615];
  v256 = v3 + (int)v38 * (int)v267 + (int)v126 * v127;
  LODWORD(v123) = av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  LODWORD(v345) = av1_cospi_arr_data[64 * (uint64_t)a3 - 635];
  LODWORD(v125) = av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  LODWORD(v347) = av1_cospi_arr_data[64 * (uint64_t)a3 - 583];
  v265 = v3 + (int)v38 * v127 + -((_DWORD)v267 * (_DWORD)v126);
  v243 = v3 + (int)v118 * (int)v73 + -(v135 * (_DWORD)v79);
  v276 = v3 + (int)v54 * v128 + -(v151 * (_DWORD)v62);
  v235 = v3 + v133 * v153 + -((_DWORD)v234 * v134);
  v268 = v3 + (int)v65 * v156 + -(v161 * v132);
  v281 = v3 + v129 * v165 + -((_DWORD)v195 * v130);
  LODWORD(v195) = v201 + (v228 >> a3);
  v202 = v201 - (v228 >> a3);
  v166 = v339 - (v216 >> a3);
  v162 = v339 + (v216 >> a3);
  v157 = v171 + (v334 >> a3);
  v143 = v176 + (v219 >> a3);
  v144 = v176 - (v219 >> a3);
  v141 = v177 + (v337 >> a3);
  LODWORD(v339) = v177 - (v337 >> a3);
  LODWORD(v337) = v187 - (v207 >> a3);
  v149 = v187 + (v207 >> a3);
  v150 = v171 - (v334 >> a3);
  v147 = v174 + (v225 >> a3);
  LODWORD(v176) = v174 - (v225 >> a3);
  v175 = v182 - (v222 >> a3);
  v172 = v182 + (v222 >> a3);
  v152 = v185 - (v194 >> a3);
  v154 = v185 + (v194 >> a3);
  v148 = v236 - (v173 >> a3);
  v137 = v236 + (v173 >> a3);
  LODWORD(v334) = v179 + (v167 >> a3);
  v139 = v179 - (v167 >> a3);
  v140 = v191 - (v164 >> a3);
  v142 = v191 + (v164 >> a3);
  v145 = v232 + (v163 >> a3);
  v146 = v232 - (v163 >> a3);
  LODWORD(v164) = v240 - (v160 >> a3);
  LODWORD(v177) = v240 + (v160 >> a3);
  LODWORD(v173) = v189 + (v159 >> a3);
  v180 = v189 - (v159 >> a3);
  v183 = v238 - (v158 >> a3);
  LODWORD(v187) = v238 + (v158 >> a3);
  LODWORD(v189) = av1_cospi_arr_data[64 * (uint64_t)a3 - 577];
  result = v3 + v310 * (int)v173 + -(v162 * (_DWORD)v353);
  *a2 = v325 >> a3;
  a2[1] = (v3 + (int)v189 * (int)v195 + v365 * (int)v187) >> a3;
  a2[2] = v254 >> a3;
  a2[3] = (v3 + (int)v259 * v154 + -(v172 * (_DWORD)v213)) >> a3;
  a2[4] = v293 >> a3;
  a2[5] = (v3 + v271 * v141 + (int)v345 * v142) >> a3;
  a2[6] = (v3 + (int)v123 * (int)v52 + -((_DWORD)v24 * (_DWORD)v125)) >> a3;
  a2[7] = (v3 + (int)v291 * v145 + -(v143 * (_DWORD)v347)) >> a3;
  a2[8] = v314 >> a3;
  a2[9] = (v3 + v359 * v157 + (int)v351 * (int)v177) >> a3;
  a2[10] = v246 >> a3;
  a2[11] = (v3 + (int)v248 * (int)v334 + -(v149 * v199)) >> a3;
  a2[12] = v284 >> a3;
  a2[13] = (v3 + (int)v247 * v147 + (int)v203 * v137) >> a3;
  a2[14] = v235 >> a3;
  a2[15] = result >> a3;
  a2[16] = v327 >> a3;
  a2[17] = (v3 + v308 * v166 + (int)v355 * v180) >> a3;
  a2[18] = v262 >> a3;
  a2[19] = (v3 + (int)v250 * v148 + -((_DWORD)v176 * (_DWORD)v205)) >> a3;
  a2[20] = v297 >> a3;
  a2[21] = (v3 + (int)v249 * (int)v337 + v170 * v139) >> a3;
  a2[22] = v243 >> a3;
  a2[23] = (v3 + v343 * (int)v164 + -(v150 * (_DWORD)v349)) >> a3;
  a2[24] = v317 >> a3;
  a2[25] = (v3 + v357 * v144 + (int)v341 * v146) >> a3;
  a2[26] = v256 >> a3;
  a2[27] = (v3 + (int)v257 * v140 + -((_DWORD)v339 * v168)) >> a3;
  a2[28] = v295 >> a3;
  a2[29] = (v3 + (int)v258 * v175 + (int)v210 * v152) >> a3;
  a2[30] = (v3 + v131 * (int)v83 + -((_DWORD)v252 * (_DWORD)v51)) >> a3;
  a2[31] = (v3 + v311 * v183 + -(v202 * v362)) >> a3;
  a2[32] = v329 >> a3;
  a2[33] = (v3 + v311 * v202 + v362 * v183) >> a3;
  a2[34] = (v3 + v131 * (int)v252 + (int)v51 * (int)v83) >> a3;
  a2[35] = (v3 + (int)v258 * v152 + -(v175 * (_DWORD)v210)) >> a3;
  a2[36] = v301 >> a3;
  a2[37] = (v3 + (int)v257 * (int)v339 + v168 * v140) >> a3;
  a2[38] = v265 >> a3;
  a2[39] = (v3 + v357 * v146 + -(v144 * (_DWORD)v341)) >> a3;
  a2[40] = v320 >> a3;
  a2[41] = (v3 + v343 * v150 + (int)v349 * (int)v164) >> a3;
  a2[42] = (v136 + (int)v79 * (int)v73) >> a3;
  a2[43] = (v3 + (int)v249 * v139 + -((_DWORD)v337 * v170)) >> a3;
  a2[44] = v299 >> a3;
  a2[45] = (v3 + (int)v250 * (int)v176 + (int)v205 * v148) >> a3;
  a2[46] = v268 >> a3;
  a2[47] = (v3 + v308 * v180 + -(v166 * (_DWORD)v355)) >> a3;
  a2[48] = v331 >> a3;
  a2[49] = (v3 + v310 * v162 + (int)v353 * (int)v173) >> a3;
  a2[50] = v289 >> a3;
  a2[51] = (v3 + (int)v247 * v137 + -(v147 * (_DWORD)v203)) >> a3;
  a2[52] = v306 >> a3;
  a2[53] = (v3 + (int)v248 * v149 + v199 * (int)v334) >> a3;
  a2[54] = v276 >> a3;
  a2[55] = (v3 + v359 * (int)v177 + -(v157 * (_DWORD)v351)) >> a3;
  a2[56] = v323 >> a3;
  a2[57] = (v3 + (int)v291 * v143 + (int)v347 * v145) >> a3;
  a2[58] = (v3 + (int)v123 * (int)v24 + (int)v125 * (int)v52) >> a3;
  a2[59] = (v3 + v271 * v142 + -(v141 * (_DWORD)v345)) >> a3;
  a2[60] = v304 >> a3;
  a2[61] = (v3 + (int)v259 * v172 + (int)v213 * v154) >> a3;
  a2[62] = v281 >> a3;
  a2[63] = (v3 + (int)v189 * (int)v187 + -((_DWORD)v195 * v365)) >> a3;
  return result;
}

uint64_t av1_get_fwd_txfm_cfg(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  int v21;
  int v22;
  unsigned int v23;
  char *v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  int v28;

  *(_BYTE *)a3 = a2;
  if ((result - 4) > 0xB)
  {
    v4 = 0;
    v5 = 0;
  }
  else
  {
    v3 = 4 * (char)(result - 4);
    v4 = *(_DWORD *)((char *)&unk_208F52E24 + v3);
    v5 = *(_DWORD *)((char *)&unk_208F52E54 + v3);
  }
  *(_QWORD *)(a3 + 26) = 0;
  v6 = (_BYTE *)(a3 + 26);
  *(_DWORD *)(a3 + 4) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  v7 = vtx_tab[result];
  v8 = htx_tab[result];
  v9 = 4 * a2;
  v10 = *(int *)((char *)&tx_size_wide_log2 + v9) - 2;
  v11 = *(int *)((char *)&tx_size_high_log2 + v9) - 2;
  *(_QWORD *)(a3 + 16) = *(&av1_fwd_txfm_shift_ls + a2);
  v12 = 4 * v10;
  v10 *= 5;
  *(_BYTE *)(a3 + 24) = av1_fwd_cos_bit_col[v10 + v11];
  *(_BYTE *)(a3 + 25) = av1_fwd_cos_bit_row[v10 + v11];
  v13 = av1_txfm_type_ls[4 * v11 + v7];
  *(_BYTE *)(a3 + 50) = v13;
  v14 = av1_txfm_type_ls[v12 + v8];
  *(_BYTE *)(a3 + 51) = v14;
  v15 = av1_txfm_stage_num_list[v13];
  *(_DWORD *)(a3 + 52) = av1_txfm_stage_num_list[v13];
  *(_DWORD *)(a3 + 56) = av1_txfm_stage_num_list[v14];
  *(_DWORD *)(a3 + 34) = 0;
  *(_QWORD *)(a3 + 38) = 0;
  *(_DWORD *)(a3 + 46) = 0;
  v16 = (char *)*(&fwd_txfm_range_mult2_list + v13);
  v17 = v15 - 1;
  if ((v15 - 1) >= 0xB)
    v18 = 11;
  else
    v18 = v15 - 1;
  v19 = (v18 + 1);
  v20 = v16;
  do
  {
    v21 = *v20++;
    *v6++ = (v21 + 1) >> 1;
    --v19;
  }
  while (v19);
  v22 = *(_DWORD *)(a3 + 56);
  v23 = v22 - 1;
  if (v22 >= 1)
  {
    v24 = (char *)*(&fwd_txfm_range_mult2_list + *(unsigned __int8 *)(a3 + 51));
    if (v23 >= 0xB)
      v25 = 11;
    else
      v25 = v23;
    v26 = (v25 + 1);
    v27 = (_BYTE *)(a3 + 38);
    do
    {
      v28 = *v24++;
      *v27++ = (v16[v17] + v28 + 1) >> 1;
      --v26;
    }
    while (v26);
  }
  return result;
}

uint64_t fwd_txfm2d_c(int16x4_t *a1, int32x4_t *a2, int a3, unsigned __int8 *a4, __int32 *a5, char a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char *v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  _BYTE *v25;
  char v26;
  unint64_t v27;
  signed __int8 v28;
  unint64_t v29;
  uint64_t v30;
  int32x4_t *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  unint64_t v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  int v43;
  int v44;
  uint64_t v45;
  int16x4_t *v46;
  uint64_t v47;
  __int32 *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int32x4_t *v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int32 v59;
  __int32 *v60;
  uint64_t v61;
  __int32 *v62;
  int v63;
  uint64_t v64;
  __int32 *v65;
  __int16 *v66;
  int v67;
  int32x4_t v68;
  int32x4_t *v69;
  int v70;
  int32x4_t v71;
  int32x4_t *v72;
  int32x4_t *v73;
  __int32 *v74;
  uint64_t v75;
  __int32 *v76;
  int32x4_t *v77;
  uint64_t v78;
  __int32 v79;
  __int32 v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int32x4_t *v84;
  uint64_t result;
  int v86;
  int32x4_t v87;
  int32x4_t *v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  unint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  int32x4_t *v96;
  signed __int8 v97;
  int v98;
  int32x4_t *v99;
  int v101;
  uint64_t v102;
  int v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  int32x4_t *v107;
  uint64_t (*v108)();
  uint64_t (*v109)();
  unsigned __int8 *v110;
  __int32 *v112;
  int16x4_t *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  _BYTE v118[4];
  int v119;
  _BYTE v120[12];
  _BYTE v121[12];
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  v8 = 4 * *a4;
  v9 = *(int *)((char *)&tx_size_wide_0 + v8);
  v10 = *(int *)((char *)&tx_size_high + v8);
  v117 = (char *)*((_QWORD *)a4 + 2);
  if ((_DWORD)v9 == (_DWORD)v10)
    goto LABEL_2;
  if ((int)v9 > (int)v10)
  {
    if ((_DWORD)v9 == 2 * (_DWORD)v10)
    {
      v98 = 1;
      goto LABEL_3;
    }
    if ((_DWORD)v9 == 4 * (_DWORD)v10)
    {
      v98 = 2;
      goto LABEL_3;
    }
LABEL_2:
    v98 = 0;
    goto LABEL_3;
  }
  if ((_DWORD)v10 == 2 * (_DWORD)v9)
  {
    v98 = -1;
    goto LABEL_3;
  }
  if ((_DWORD)v10 != 4 * (_DWORD)v9)
    goto LABEL_2;
  v98 = -2;
LABEL_3:
  v11 = *((unsigned int *)a4 + 13);
  if ((int)v11 >= 1)
  {
    v12 = v11 - 1;
    v13 = 11;
    if (v12 < 0xB)
      v13 = v12;
    v14 = a6 + *v117 + 1;
    v15 = v13 + 1;
    v16 = (char *)(a4 + 26);
    v17 = v121;
    do
    {
      v18 = *v16++;
      *v17++ = v14 + v18;
      --v15;
    }
    while (v15);
  }
  v19 = *((unsigned int *)a4 + 14);
  if ((int)v19 >= 1)
  {
    v20 = v19 - 1;
    v21 = 11;
    if (v20 < 0xB)
      v21 = v20;
    v22 = a6 + *v117 + v117[1] + 1;
    v23 = v21 + 1;
    v24 = (char *)(a4 + 38);
    v25 = v120;
    do
    {
      v26 = *v24++;
      *v25++ = v22 + v26;
      --v23;
    }
    while (v23);
  }
  v27 = (char)a4[50];
  if (v27 > 0xB)
  {
    v108 = 0;
    v28 = a4[24];
    v29 = (char)a4[51];
    if (v29 > 0xB)
      goto LABEL_15;
LABEL_20:
    v109 = off_24C0DD210[v29];
    goto LABEL_21;
  }
  v108 = off_24C0DD210[v27];
  v28 = a4[24];
  v29 = (char)a4[51];
  if (v29 <= 0xB)
    goto LABEL_20;
LABEL_15:
  v109 = 0;
LABEL_21:
  v30 = 0;
  v97 = a4[25];
  v31 = (int32x4_t *)((char *)a2 + 4 * v10);
  if ((int)v10 <= 1)
    v32 = 1;
  else
    v32 = v10;
  v33 = v9 - 1;
  if ((int)v9 <= 1)
    v34 = 1;
  else
    v34 = v9;
  v116 = v34;
  v35 = (v10 - 1) * a3;
  v36 = (unint64_t)(v32 - 1) >> 32 != 0;
  if (a3 >= 0)
    v37 = a3;
  else
    v37 = -a3;
  v38 = (v32 - 1) * (unint64_t)v37;
  if (!a3)
    v36 = 0;
  v101 = (v10 - 1) * a3;
  if (a3 <= 0)
    v39 = v35 + (int)v38 < v35;
  else
    v39 = v35 - (int)v38 > v35;
  v40 = (v38 & 0xFFFFFFFF00000000) != 0 || v39;
  v104 = v40 | v36;
  v41 = v32 & 0x7FFFFFFE;
  v42 = v32 > 0xF && a3 == 1;
  v43 = 2 * a3;
  v44 = v42;
  v103 = v44;
  v102 = v32 & 0x7FFFFFF0;
  v45 = 32 * a3;
  v46 = a1 + 2;
  v99 = a2 + 2;
  v47 = 4 * v9;
  v105 = v28;
  v48 = a5;
  v106 = v45;
  v107 = a2;
  v110 = a4;
  v115 = v32;
  do
  {
    v113 = v46;
    if (*((_DWORD *)a4 + 1))
    {
      v49 = v104;
      if (v32 < 2)
        v49 = 1;
      if ((v49 & 1) != 0)
      {
        v50 = 0;
LABEL_59:
        v61 = v32 - v50;
        v62 = &a2->i32[v50];
        v63 = a3 * (v10 - 1 - v50);
        do
        {
          *v62++ = a1->i16[v30 + v63];
          v63 -= a3;
          --v61;
        }
        while (v61);
        goto LABEL_65;
      }
      v57 = 0;
      v58 = v101;
      do
      {
        v59 = a1->i16[v30 + (int)((v10 + (v57 ^ 0xFFFFFFFE)) * a3)];
        v60 = &a2->i32[v57];
        *v60 = a1->i16[v30 + v58];
        v60[1] = v59;
        v57 += 2;
        v58 -= v43;
      }
      while (v41 != v57);
      v50 = v41;
      if (v41 != v32)
        goto LABEL_59;
    }
    else
    {
      if (!v103)
      {
        v56 = 0;
LABEL_63:
        v64 = v32 - v56;
        v65 = &a2->i32[v56];
        v66 = (__int16 *)a1 + v30 + a3 * (uint64_t)(int)v56;
        do
        {
          *v65++ = *v66;
          v66 += a3;
          --v64;
        }
        while (v64);
        goto LABEL_65;
      }
      v51 = v102;
      v52 = v99;
      do
      {
        v53 = *(int16x8_t *)v46[-2].i8;
        v54 = vmovl_s16(*v46);
        v55 = vmovl_high_s16(*(int16x8_t *)v46->i8);
        v52[-2] = vmovl_s16(*(int16x4_t *)v53.i8);
        v52[-1] = vmovl_high_s16(v53);
        *v52 = v54;
        v52[1] = v55;
        v52 += 4;
        v46 = (int16x4_t *)((char *)v46 + v45);
        v51 -= 16;
      }
      while (v51);
      v56 = v102;
      if (v102 != v32)
        goto LABEL_63;
    }
LABEL_65:
    v112 = v48;
    v114 = v33;
    if (*v117)
    {
      v67 = 0;
      v68 = vdupq_n_s32(*v117);
      v69 = a2;
      do
      {
        *v69 = vrshlq_s32(*v69, v68);
        ++v69;
        v67 += 4;
      }
      while (v67 < (int)v10);
    }
    ((void (*)(int32x4_t *, int32x4_t *, _QWORD, _BYTE *))v108)(a2, v31, v105, v121);
    if (v117[1])
    {
      v70 = 0;
      v71 = vdupq_n_s32(v117[1]);
      v72 = v31;
      do
      {
        *v72 = vrshlq_s32(*v72, v71);
        ++v72;
        v70 += 4;
      }
      while (v70 < (int)v10);
    }
    a4 = v110;
    v73 = v31;
    v74 = v112;
    v32 = v115;
    v75 = v115;
    if (*((_DWORD *)v110 + 2))
    {
      v76 = &a5[v114];
      v77 = v31;
      v78 = v115;
      do
      {
        v79 = v77->i32[0];
        v77 = (int32x4_t *)((char *)v77 + 4);
        *v76 = v79;
        v76 = (__int32 *)((char *)v76 + v47);
        --v78;
      }
      while (v78);
    }
    else
    {
      do
      {
        v80 = v73->i32[0];
        v73 = (int32x4_t *)((char *)v73 + 4);
        *v74 = v80;
        v74 = (__int32 *)((char *)v74 + v47);
        --v75;
      }
      while (v75);
    }
    ++v30;
    v46 = (int16x4_t *)((char *)v113 + 2);
    v33 = v114 - 1;
    v48 = v112 + 1;
    v45 = v106;
    a2 = v107;
  }
  while (v30 != v116);
  v81 = 0;
  if (v98 >= 0)
    v82 = v98;
  else
    v82 = -v98;
  v83 = 4 * v10;
  do
  {
    v84 = a2;
    result = ((uint64_t (*)(__int32 *, _BYTE *, _QWORD, _BYTE *))v109)(&a5[v81 * v9], v118, v97, v120);
    if (v117[2])
    {
      v86 = 0;
      v87 = vdupq_n_s32(v117[2]);
      v88 = (int32x4_t *)v118;
      do
      {
        *v88 = vrshlq_s32(*v88, v87);
        ++v88;
        v86 += 4;
      }
      while (v86 < (int)v9);
    }
    if (v82 == 1)
    {
      if (v116 < 2)
      {
        v89 = 0;
LABEL_90:
        v93 = v116 - v89;
        v94 = (int *)&v118[4 * v89];
        do
        {
          *v94 = (unint64_t)(5793 * *v94 + 2048) >> 12;
          ++v94;
          --v93;
        }
        while (v93);
        goto LABEL_92;
      }
      v90 = v116 & 0x7FFFFFFE;
      v91 = &v119;
      do
      {
        v92 = (unint64_t)(5793 * *v91 + 2048) >> 12;
        *(v91 - 1) = (unint64_t)(5793 * *(v91 - 1) + 2048) >> 12;
        *v91 = v92;
        v91 += 2;
        v90 -= 2;
      }
      while (v90);
      v89 = v116 & 0x7FFFFFFE;
      if (v89 != v116)
        goto LABEL_90;
    }
LABEL_92:
    v95 = 0;
    v96 = v84;
    do
    {
      v96->i32[0] = *(_DWORD *)&v118[v95];
      v95 += 4;
      v96 = (int32x4_t *)((char *)v96 + v83);
    }
    while (4 * v116 != v95);
    ++v81;
    a2 = (int32x4_t *)((char *)v84->i64 + 4);
  }
  while (v81 != v115);
  return result;
}

int32x4_t lowbd_fwd_txfm2d_4x4_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4, int32x4_t result)
{
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  BOOL v9;
  int16x4_t *v10;
  int v11;
  int16x4_t v12;
  uint64_t v13;
  int16x4_t *v14;
  int16x4_t v15;
  int16x4_t *v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int32x4_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  uint64_t v44;
  int16x4_t *v45;
  int16x4_t v46;
  int16x4_t *v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int32x4_t v63;
  int32x2_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x4_t v72;
  uint64_t v73;
  int16x4_t *v74;
  int16x4_t v75;
  int16x4_t *v76;
  int16x4_t v77;
  int16x4_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int32x4_t v92;
  int32x2_t v93;
  int32x2_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  uint64_t v100;
  int16x4_t *v101;
  int16x4_t v102;
  int16x4_t *v103;
  int16x4_t v104;
  int16x4_t v105;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  int16x4_t v110;
  int16x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int16x4_t v117;
  int16x4_t v118;
  int32x2_t v119;
  int16x4_t v120;
  int16x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int16x4_t v125;
  uint64_t v126;
  int16x4_t *v127;
  int16x4_t v128;
  int16x4_t *v129;
  int16x4_t v130;
  int16x4_t v131;
  int16x4_t v132;
  int16x4_t v133;
  int16x4_t v134;
  int16x4_t v135;
  int16x4_t v136;
  int16x4_t v137;
  int16x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int16x4_t v141;
  int32x4_t v142;
  int16x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x4_t v146;
  int32x2_t v147;
  int16x4_t v148;
  int16x4_t v149;
  int16x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int16x4_t v156;
  uint64_t v157;
  int16x4_t *v158;
  int16x4_t v159;
  int16x4_t *v160;
  int16x4_t v161;
  int16x4_t v162;
  int16x4_t v163;
  int16x4_t v164;
  int16x4_t v165;
  int16x4_t v166;
  int16x4_t v167;
  int16x4_t v168;
  int16x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int16x4_t v173;
  int16x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int16x4_t v177;
  int16x4_t v178;
  int32x2_t v179;
  int32x2_t v180;
  int32x2_t v181;
  int16x4_t v182;
  int16x4_t v183;
  int32x4_t v184;
  int16x4_t v185;
  int32x4_t v186;
  int16x4_t v187;
  int16x4_t v188;
  int16x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int16x4_t v194;
  uint64_t v195;
  int16x4_t *v196;
  int16x4_t v197;
  int16x4_t *v198;
  int16x4_t v199;
  int16x4_t v200;
  int16x4_t v201;
  int16x4_t v202;
  int16x4_t v203;
  int16x4_t v204;
  int16x4_t v205;
  int16x4_t v206;
  int16x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int16x4_t v211;
  int16x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int16x4_t v215;
  int16x4_t v216;
  int32x2_t v217;
  int32x2_t v218;
  int32x2_t v219;
  int16x4_t v220;
  int16x4_t v221;
  int16x4_t v222;
  int16x4_t v223;
  int16x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int16x4_t v228;
  uint64_t v229;
  int16x4_t *v230;
  int16x4_t v231;
  int16x4_t *v232;
  int16x4_t v233;
  int16x4_t v234;
  int16x4_t v235;
  int16x4_t v236;
  int16x4_t v237;
  int32x2_t v238;
  int32x2_t v239;
  int32x2_t v240;
  int32x2_t v241;
  int16x4_t v242;
  uint64_t v243;
  int16x4_t *v244;
  int16x4_t v245;
  int16x4_t *v246;
  int16x4_t v247;
  int16x4_t v248;
  int16x4_t v249;
  int16x4_t v250;
  int16x4_t v251;
  int16x4_t v252;
  int16x4_t v253;
  int16x4_t v254;
  int16x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int16x4_t v259;
  int16x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int16x4_t v263;
  int16x4_t v264;
  int32x2_t v265;
  int32x2_t v266;
  int16x4_t v267;
  uint64_t v268;
  int16x4_t *v269;
  int16x4_t v270;
  int16x4_t *v271;
  int16x4_t v272;
  int16x4_t v273;
  int16x4_t v274;
  int16x4_t v275;
  int16x4_t v276;
  int32x2_t v277;
  int32x2_t v278;
  int32x2_t v279;
  int32x2_t v280;
  int16x4_t v281;
  int16x4_t v282;
  int16x4_t v283;
  int16x4_t v284;
  int16x4_t v285;
  int16x4_t v286;
  int16x4_t v287;
  int16x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int16x4_t v291;
  int16x4_t v292;
  int16x4_t v293;
  uint64_t v294;
  int16x4_t *v295;
  int16x4_t v296;
  int16x4_t *v297;
  int16x4_t v298;
  int16x4_t v299;
  int16x4_t v300;
  int16x4_t v301;
  int16x4_t v302;
  int32x2_t v303;
  int32x2_t v304;
  int32x2_t v305;
  int32x2_t v306;
  int16x4_t v307;
  int16x4_t v308;
  int16x4_t v309;
  int16x4_t v310;
  int32x4_t v311;
  int16x4_t v312;
  int16x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int16x4_t v316;
  uint64_t v317;
  int16x4_t *v318;
  int16x4_t v319;
  int16x4_t *v320;
  int16x4_t v321;
  int16x4_t v322;
  int16x4_t v323;
  int16x4_t v324;
  int16x4_t v325;
  int32x2_t v326;
  int32x2_t v327;
  int32x2_t v328;
  int32x2_t v329;
  int16x4_t v330;
  int16x4_t v331;
  int16x4_t v332;
  int16x4_t v333;
  int16x4_t v334;
  int16x4_t v335;
  int16x4_t v336;
  int16x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;

  HIDWORD(v5) = a4;
  LODWORD(v5) = (a4 << 24) - 0x4000000;
  v6 = (v5 >> 25);
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x27;
  v9 = v7 || v8 == 0;
  if (v9)
    v10 = a1;
  else
    v10 = (int16x4_t *)((char *)a1 + 6 * a3);
  if (v9)
    v11 = a3;
  else
    v11 = -a3;
  switch(a4)
  {
    case 0:
      v125 = *v10;
      v126 = 2 * v11;
      v127 = (int16x4_t *)((char *)v10 + v126);
      v128 = *v127;
      v129 = (int16x4_t *)((char *)v127 + v126);
      v130 = vshl_n_s16(v125, 2uLL);
      v131 = vshl_n_s16(v128, 2uLL);
      v132 = vshl_n_s16(*v129, 2uLL);
      v133 = vshl_n_s16(*(int16x4_t *)((char *)v129 + v126), 2uLL);
      v134 = vadd_s16(v132, v131);
      v135 = vsub_s16(v131, v132);
      v136 = vadd_s16(v133, v130);
      v137 = vsub_s16(v130, v133);
      v138 = vdup_n_s16(0x16A1u);
      v139 = vmull_s16(v136, v138);
      v140 = vmlal_s16(v139, v134, v138);
      v141 = vdup_n_s16(0xC3Fu);
      v142 = vmlsl_s16(v139, v134, v138);
      v143 = vdup_n_s16(0x1D90u);
      v144 = vmlal_s16(vmull_s16(v137, v143), v135, v141);
      v145 = vmlsl_s16(vmull_s16(v137, v141), v135, v143);
      v146 = vrshrn_n_s32(v140, 0xDuLL);
      *(int16x4_t *)v140.i8 = vrshrn_n_s32(v144, 0xDuLL);
      *(int16x4_t *)v142.i8 = vrshrn_n_s32(v142, 0xDuLL);
      *(int16x4_t *)v145.i8 = vrshrn_n_s32(v145, 0xDuLL);
      *(int16x4_t *)v144.i8 = vtrn1_s16(v146, *(int16x4_t *)v140.i8);
      v147 = (int32x2_t)vtrn2_s16(v146, *(int16x4_t *)v140.i8);
      *(int16x4_t *)v140.i8 = vtrn1_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v145.i8);
      *(int16x4_t *)v145.i8 = vtrn2_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v145.i8);
      *(int32x2_t *)v142.i8 = vzip1_s32(v147, *(int32x2_t *)v145.i8);
      v148 = (int16x4_t)vzip2_s32(*(int32x2_t *)v144.i8, *(int32x2_t *)v140.i8);
      v149 = vadd_s16(v148, *(int16x4_t *)v142.i8);
      *(int16x4_t *)v142.i8 = vsub_s16(*(int16x4_t *)v142.i8, v148);
      *(int32x2_t *)v140.i8 = vzip1_s32(*(int32x2_t *)v144.i8, *(int32x2_t *)v140.i8);
      *(int32x2_t *)v145.i8 = vzip2_s32(v147, *(int32x2_t *)v145.i8);
      v150 = vadd_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v145.i8);
      *(int16x4_t *)v145.i8 = vsub_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v145.i8);
      v151 = vmull_s16(v150, v138);
      v152 = vmlal_s16(v151, v149, v138);
      v153 = vmlsl_s16(v151, v149, v138);
      v154 = vmlal_s16(vmull_s16(*(int16x4_t *)v145.i8, v143), *(int16x4_t *)v142.i8, v141);
      v155 = vmlsl_s16(vmull_s16(*(int16x4_t *)v145.i8, v141), *(int16x4_t *)v142.i8, v143);
      v42 = vrshrn_n_s32(v152, 0xDuLL);
      v96 = vrshrn_n_s32(v154, 0xDuLL);
      v97 = vrshrn_n_s32(v153, 0xDuLL);
      v98 = vrshrn_n_s32(v155, 0xDuLL);
      goto LABEL_28;
    case 1:
    case 4:
      v12 = *v10;
      v13 = 2 * v11;
      v14 = (int16x4_t *)((char *)v10 + v13);
      v15 = *v14;
      v16 = (int16x4_t *)((char *)v14 + v13);
      v17 = vshl_n_s16(v12, 2uLL);
      v18 = vshl_n_s16(v15, 2uLL);
      v19 = vshl_n_s16(*v16, 2uLL);
      v20 = vshl_n_s16(*(int16x4_t *)((char *)v16 + v13), 2uLL);
      v21 = vdup_n_s16(0x1A21u);
      v22 = vdup_n_s16(0x1364u);
      v23 = vdup_n_s16(0xA52u);
      v24 = vdup_n_s16(0x1DB6u);
      v25 = vmull_s16(vqadd_s16(v17, v18), v21);
      v26 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v18, v22), v19, v21), v17, v23), v20, v24);
      v27 = vaddq_s32(vmlsl_s16(vmull_s16(v20, v22), v19, v21), vmlsl_s16(vmull_s16(v17, v24), v18, v23));
      v28.i64[0] = 0x300000003;
      v28.i64[1] = 0x300000003;
      v29 = vsubq_s32(vmulq_s32(vmull_s16(v19, v21), v28), v26);
      v30 = vrshrn_n_s32(v26, 0xDuLL);
      v31 = vrshrn_n_s32(vmlsl_s16(v25, v20, v21), 0xDuLL);
      *(int16x4_t *)v25.i8 = vrshrn_n_s32(v27, 0xDuLL);
      v32.i64[0] = 0x100000001000;
      v32.i64[1] = 0x100000001000;
      *(int16x4_t *)v27.i8 = vshrn_n_s32(vaddq_s32(vaddq_s32(v27, v32), v29), 0xDuLL);
      *(int16x4_t *)v29.i8 = vtrn1_s16(v30, v31);
      v33 = (int32x2_t)vtrn2_s16(v30, v31);
      v34 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v27.i8);
      *(int16x4_t *)v27.i8 = vtrn2_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v27.i8);
      *(int32x2_t *)v25.i8 = vzip1_s32(v33, *(int32x2_t *)v27.i8);
      *(int32x2_t *)v32.i8 = vzip2_s32(*(int32x2_t *)v29.i8, v34);
      v35 = vadd_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v25.i8);
      *(int16x4_t *)v25.i8 = vsub_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v32.i8);
      *(int32x2_t *)v29.i8 = vzip1_s32(*(int32x2_t *)v29.i8, v34);
      *(int32x2_t *)v27.i8 = vzip2_s32(v33, *(int32x2_t *)v27.i8);
      v36 = vadd_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v29.i8);
      *(int16x4_t *)v27.i8 = vsub_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v27.i8);
      *(int16x4_t *)v29.i8 = vdup_n_s16(0x16A1u);
      v37 = vmull_s16(v36, *(int16x4_t *)v29.i8);
      v38 = vmlal_s16(v37, v35, *(int16x4_t *)v29.i8);
      *(int16x4_t *)v32.i8 = vdup_n_s16(0xC3Fu);
      v39 = vmlsl_s16(v37, v35, *(int16x4_t *)v29.i8);
      *(int16x4_t *)v29.i8 = vdup_n_s16(0x1D90u);
      v40 = vmlal_s16(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v32.i8);
      v41 = vmlsl_s16(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v29.i8);
      v42 = vrshrn_n_s32(v38, 0xDuLL);
      goto LABEL_22;
    case 2:
      v156 = *v10;
      v157 = 2 * v11;
      v158 = (int16x4_t *)((char *)v10 + v157);
      v159 = *v158;
      v160 = (int16x4_t *)((char *)v158 + v157);
      v161 = vshl_n_s16(v156, 2uLL);
      v162 = vshl_n_s16(v159, 2uLL);
      v163 = vshl_n_s16(*v160, 2uLL);
      v164 = vshl_n_s16(*(int16x4_t *)((char *)v160 + v157), 2uLL);
      v165 = vadd_s16(v163, v162);
      v166 = vsub_s16(v162, v163);
      v167 = vadd_s16(v164, v161);
      v168 = vsub_s16(v161, v164);
      v169 = vdup_n_s16(0x16A1u);
      v170 = vmull_s16(v167, v169);
      v171 = vmlal_s16(v170, v165, v169);
      v172 = vmlsl_s16(v170, v165, v169);
      v173 = vdup_n_s16(0xC3Fu);
      v174 = vdup_n_s16(0x1D90u);
      v175 = vmlal_s16(vmull_s16(v168, v174), v166, v173);
      v176 = vmlsl_s16(vmull_s16(v168, v173), v166, v174);
      v177 = vrshrn_n_s32(v171, 0xDuLL);
      v178 = vrshrn_n_s32(v175, 0xDuLL);
      *(int16x4_t *)v172.i8 = vrshrn_n_s32(v172, 0xDuLL);
      *(int16x4_t *)v176.i8 = vrshrn_n_s32(v176, 0xDuLL);
      v179 = (int32x2_t)vtrn1_s16(v177, v178);
      v180 = (int32x2_t)vtrn2_s16(v177, v178);
      v181 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v176.i8);
      *(int16x4_t *)v176.i8 = vtrn2_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v176.i8);
      *(int32x2_t *)v172.i8 = vzip1_s32(v179, v181);
      *(int32x2_t *)v171.i8 = vzip1_s32(v180, *(int32x2_t *)v176.i8);
      v182 = (int16x4_t)vzip2_s32(v179, v181);
      v183 = vdup_n_s16(0x1A21u);
      v184 = vmull_s16(v182, v183);
      v185 = vdup_n_s16(0x1364u);
      v186 = vmull_s16(*(int16x4_t *)v171.i8, v185);
      v187 = vdup_n_s16(0xA52u);
      v188 = (int16x4_t)vzip2_s32(v180, *(int32x2_t *)v176.i8);
      v189 = vdup_n_s16(0x1DB6u);
      v190 = vmull_s16(vqadd_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v171.i8), v183);
      v191 = vmlsl_s16(vmull_s16(*(int16x4_t *)v172.i8, v189), *(int16x4_t *)v171.i8, v187);
      v192 = vmlsl_s16(vmull_s16(v188, v185), v182, v183);
      v193 = vmlal_s16(vmlal_s16(vmlal_s16(v186, v182, v183), *(int16x4_t *)v172.i8, v187), v188, v189);
      goto LABEL_24;
    case 3:
    case 8:
      v43 = *v10;
      v44 = 2 * v11;
      v45 = (int16x4_t *)((char *)v10 + v44);
      v46 = *v45;
      v47 = (int16x4_t *)((char *)v45 + v44);
      v48 = vshl_n_s16(v43, 2uLL);
      v49 = vshl_n_s16(v46, 2uLL);
      v50 = vshl_n_s16(*v47, 2uLL);
      v51 = vshl_n_s16(*(int16x4_t *)((char *)v47 + v44), 2uLL);
      v52 = vdup_n_s16(0x1A21u);
      v53 = vdup_n_s16(0x1364u);
      v54 = vdup_n_s16(0xA52u);
      v55 = vdup_n_s16(0x1DB6u);
      v56 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v49, v53), v50, v52), v48, v54), v51, v55);
      v57 = vmlsl_s16(vmull_s16(vqadd_s16(v48, v49), v52), v51, v52);
      v58 = vaddq_s32(vmlsl_s16(vmull_s16(v51, v53), v50, v52), vmlsl_s16(vmull_s16(v48, v55), v49, v54));
      v59.i64[0] = 0x300000003;
      v59.i64[1] = 0x300000003;
      v60 = vsubq_s32(vmulq_s32(vmull_s16(v50, v52), v59), v56);
      v61 = vrshrn_n_s32(v56, 0xDuLL);
      *(int16x4_t *)v57.i8 = vrshrn_n_s32(v57, 0xDuLL);
      v62 = vrshrn_n_s32(v58, 0xDuLL);
      v63.i64[0] = 0x100000001000;
      v63.i64[1] = 0x100000001000;
      *(int16x4_t *)v58.i8 = vshrn_n_s32(vaddq_s32(vaddq_s32(v58, v63), v60), 0xDuLL);
      *(int16x4_t *)v60.i8 = vtrn1_s16(v61, *(int16x4_t *)v57.i8);
      v64 = (int32x2_t)vtrn2_s16(v61, *(int16x4_t *)v57.i8);
      *(int16x4_t *)v57.i8 = vtrn1_s16(v62, *(int16x4_t *)v58.i8);
      *(int16x4_t *)v58.i8 = vtrn2_s16(v62, *(int16x4_t *)v58.i8);
      v65 = (int16x4_t)vzip1_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v57.i8);
      v66 = (int16x4_t)vzip1_s32(v64, *(int32x2_t *)v58.i8);
      *(int32x2_t *)v60.i8 = vzip2_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v57.i8);
      v67 = vmull_s16(*(int16x4_t *)v60.i8, v52);
      *(int32x2_t *)v58.i8 = vzip2_s32(v64, *(int32x2_t *)v58.i8);
      v68 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v66, v53), *(int16x4_t *)v60.i8, v52), v65, v54), *(int16x4_t *)v58.i8, v55);
      v69 = vmlsl_s16(vmull_s16(vqadd_s16(v65, v66), v52), *(int16x4_t *)v58.i8, v52);
      v70 = vaddq_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v58.i8, v53), *(int16x4_t *)v60.i8, v52), vmlsl_s16(vmull_s16(v65, v55), v66, v54));
      v71 = vsubq_s32(vmulq_s32(v67, v59), v68);
      v42 = vrshrn_n_s32(v68, 0xDuLL);
      goto LABEL_15;
    case 5:
      v194 = *v10;
      v195 = 2 * v11;
      v196 = (int16x4_t *)((char *)v10 + v195);
      v197 = *v196;
      v198 = (int16x4_t *)((char *)v196 + v195);
      v199 = vshl_n_s16(v194, 2uLL);
      v200 = vshl_n_s16(v197, 2uLL);
      v201 = vshl_n_s16(*v198, 2uLL);
      v202 = vshl_n_s16(*(int16x4_t *)((char *)v198 + v195), 2uLL);
      v203 = vadd_s16(v201, v200);
      v204 = vsub_s16(v200, v201);
      v205 = vadd_s16(v202, v199);
      v206 = vsub_s16(v199, v202);
      v207 = vdup_n_s16(0x16A1u);
      v208 = vmull_s16(v205, v207);
      v209 = vmlal_s16(v208, v203, v207);
      v210 = vmlsl_s16(v208, v203, v207);
      v211 = vdup_n_s16(0xC3Fu);
      v212 = vdup_n_s16(0x1D90u);
      v213 = vmlal_s16(vmull_s16(v206, v212), v204, v211);
      v214 = vmlsl_s16(vmull_s16(v206, v211), v204, v212);
      v215 = vrshrn_n_s32(v209, 0xDuLL);
      v216 = vrshrn_n_s32(v213, 0xDuLL);
      *(int16x4_t *)v210.i8 = vrshrn_n_s32(v210, 0xDuLL);
      *(int16x4_t *)v214.i8 = vrshrn_n_s32(v214, 0xDuLL);
      v217 = (int32x2_t)vtrn1_s16(v215, v216);
      v218 = (int32x2_t)vtrn2_s16(v215, v216);
      v219 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v214.i8);
      *(int16x4_t *)v214.i8 = vtrn2_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v214.i8);
      *(int32x2_t *)v210.i8 = vzip1_s32(v217, v219);
      *(int32x2_t *)v209.i8 = vzip1_s32(v218, *(int32x2_t *)v214.i8);
      v220 = (int16x4_t)vzip2_s32(v217, v219);
      *(int32x2_t *)v214.i8 = vzip2_s32(v218, *(int32x2_t *)v214.i8);
      v221 = vdup_n_s16(0x1A21u);
      v222 = vdup_n_s16(0x1364u);
      v223 = vdup_n_s16(0xA52u);
      v224 = vdup_n_s16(0x1DB6u);
      v225 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v220, v222), *(int16x4_t *)v209.i8, v221), *(int16x4_t *)v214.i8, v223), *(int16x4_t *)v210.i8, v224);
      v226 = vmlsl_s16(vmull_s16(vqadd_s16(*(int16x4_t *)v214.i8, v220), v221), *(int16x4_t *)v210.i8, v221);
      v227 = vaddq_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v210.i8, v222), *(int16x4_t *)v209.i8, v221), vmlsl_s16(vmull_s16(*(int16x4_t *)v214.i8, v224), v220, v223));
      v214.i64[0] = 0x300000003;
      v214.i64[1] = 0x300000003;
      v71 = vsubq_s32(vmulq_s32(vmull_s16(*(int16x4_t *)v209.i8, v221), v214), v225);
      v42 = vrshrn_n_s32(v225, 0xDuLL);
      v96 = vrshrn_n_s32(v226, 0xDuLL);
      goto LABEL_26;
    case 6:
    case 7:
      v99 = *v10;
      v100 = 2 * v11;
      v101 = (int16x4_t *)((char *)v10 + v100);
      v102 = *v101;
      v103 = (int16x4_t *)((char *)v101 + v100);
      v104 = vshl_n_s16(v99, 2uLL);
      v105 = vshl_n_s16(v102, 2uLL);
      v106 = vshl_n_s16(*v103, 2uLL);
      v107 = vshl_n_s16(*(int16x4_t *)((char *)v103 + v100), 2uLL);
      v108 = vdup_n_s16(0x1A21u);
      v109 = vdup_n_s16(0x1364u);
      v110 = vdup_n_s16(0xA52u);
      v111 = vdup_n_s16(0x1DB6u);
      v112 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v105, v109), v106, v108), v104, v110), v107, v111);
      v113 = vmlsl_s16(vmull_s16(vqadd_s16(v104, v105), v108), v107, v108);
      v114 = vaddq_s32(vmlsl_s16(vmull_s16(v107, v109), v106, v108), vmlsl_s16(vmull_s16(v104, v111), v105, v110));
      v115.i64[0] = 0x300000003;
      v115.i64[1] = 0x300000003;
      v116 = vsubq_s32(vmulq_s32(vmull_s16(v106, v108), v115), v112);
      v117 = vrshrn_n_s32(v112, 0xDuLL);
      *(int16x4_t *)v113.i8 = vrshrn_n_s32(v113, 0xDuLL);
      v118 = vrshrn_n_s32(v114, 0xDuLL);
      v63.i64[0] = 0x100000001000;
      v63.i64[1] = 0x100000001000;
      *(int16x4_t *)v114.i8 = vshrn_n_s32(vaddq_s32(vaddq_s32(v114, v63), v116), 0xDuLL);
      *(int16x4_t *)v116.i8 = vtrn1_s16(v117, *(int16x4_t *)v113.i8);
      v119 = (int32x2_t)vtrn2_s16(v117, *(int16x4_t *)v113.i8);
      *(int16x4_t *)v113.i8 = vtrn1_s16(v118, *(int16x4_t *)v114.i8);
      *(int16x4_t *)v114.i8 = vtrn2_s16(v118, *(int16x4_t *)v114.i8);
      v120 = (int16x4_t)vzip1_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v113.i8);
      v121 = (int16x4_t)vzip1_s32(v119, *(int32x2_t *)v114.i8);
      *(int32x2_t *)v116.i8 = vzip2_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v113.i8);
      *(int32x2_t *)v114.i8 = vzip2_s32(v119, *(int32x2_t *)v114.i8);
      v122 = vmull_s16(v121, v108);
      v123 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, v109), v121, v108), *(int16x4_t *)v114.i8, v110), v120, v111);
      v69 = vmlsl_s16(vmull_s16(vqadd_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v116.i8), v108), v120, v108);
      v70 = vaddq_s32(vmlsl_s16(vmull_s16(v120, v109), v121, v108), vmlsl_s16(vmull_s16(*(int16x4_t *)v114.i8, v111), *(int16x4_t *)v116.i8, v110));
      v71 = vsubq_s32(vmulq_s32(v122, v115), v123);
      v42 = vrshrn_n_s32(v123, 0xDuLL);
LABEL_15:
      v96 = vrshrn_n_s32(v69, 0xDuLL);
      v97 = vrshrn_n_s32(v70, 0xDuLL);
      v124 = vaddq_s32(v70, v63);
      goto LABEL_27;
    case 9:
      v228 = *v10;
      v229 = 2 * v11;
      v230 = (int16x4_t *)((char *)v10 + v229);
      v231 = *v230;
      v232 = (int16x4_t *)((char *)v230 + v229);
      v233 = vdup_n_s16(0x16A1u);
      v234 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v228, 2uLL), v233), 0xCuLL);
      v235 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v231, 2uLL), v233), 0xCuLL);
      v236 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*v232, 2uLL), v233), 0xCuLL);
      v237 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*(int16x4_t *)((char *)v232 + v229), 2uLL), v233), 0xCuLL);
      v238 = (int32x2_t)vtrn1_s16(v234, v235);
      v239 = (int32x2_t)vtrn2_s16(v234, v235);
      v240 = (int32x2_t)vtrn1_s16(v236, v237);
      v241 = (int32x2_t)vtrn2_s16(v236, v237);
      v42 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(v238, v240), v233), 0xCuLL);
      v96 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(v239, v241), v233), 0xCuLL);
      v97 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(v238, v240), v233), 0xCuLL);
      v98 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(v239, v241), v233), 0xCuLL);
      goto LABEL_28;
    case 10:
      v242 = *v10;
      v243 = 2 * v11;
      v244 = (int16x4_t *)((char *)v10 + v243);
      v245 = *v244;
      v246 = (int16x4_t *)((char *)v244 + v243);
      v247 = vshl_n_s16(v242, 2uLL);
      v248 = vshl_n_s16(v245, 2uLL);
      v249 = vshl_n_s16(*v246, 2uLL);
      v250 = vshl_n_s16(*(int16x4_t *)((char *)v246 + v243), 2uLL);
      v251 = vadd_s16(v249, v248);
      v252 = vsub_s16(v248, v249);
      v253 = vadd_s16(v250, v247);
      v254 = vsub_s16(v247, v250);
      v255 = vdup_n_s16(0x16A1u);
      v256 = vmull_s16(v253, v255);
      v257 = vmlal_s16(v256, v251, v255);
      v258 = vmlsl_s16(v256, v251, v255);
      v259 = vdup_n_s16(0xC3Fu);
      v260 = vdup_n_s16(0x1D90u);
      v261 = vmlal_s16(vmull_s16(v254, v260), v252, v259);
      v262 = vmlsl_s16(vmull_s16(v254, v259), v252, v260);
      v263 = vrshrn_n_s32(v257, 0xDuLL);
      v264 = vrshrn_n_s32(v261, 0xDuLL);
      *(int16x4_t *)v258.i8 = vrshrn_n_s32(v258, 0xDuLL);
      *(int16x4_t *)v262.i8 = vrshrn_n_s32(v262, 0xDuLL);
      *(int16x4_t *)v257.i8 = vtrn1_s16(v263, v264);
      v265 = (int32x2_t)vtrn2_s16(v263, v264);
      v266 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v262.i8);
      *(int16x4_t *)v261.i8 = vtrn2_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v262.i8);
      v42 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(*(int32x2_t *)v257.i8, v266), v255), 0xCuLL);
      v96 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(v265, *(int32x2_t *)v261.i8), v255), 0xCuLL);
      v97 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(*(int32x2_t *)v257.i8, v266), v255), 0xCuLL);
      v98 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(v265, *(int32x2_t *)v261.i8), v255), 0xCuLL);
      goto LABEL_28;
    case 11:
      v267 = *v10;
      v268 = 2 * v11;
      v269 = (int16x4_t *)((char *)v10 + v268);
      v270 = *v269;
      v271 = (int16x4_t *)((char *)v269 + v268);
      v272 = vdup_n_s16(0x16A1u);
      v273 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v267, 2uLL), v272), 0xCuLL);
      v274 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v270, 2uLL), v272), 0xCuLL);
      v275 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*v271, 2uLL), v272), 0xCuLL);
      v276 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*(int16x4_t *)((char *)v271 + v268), 2uLL), v272), 0xCuLL);
      v277 = (int32x2_t)vtrn1_s16(v273, v274);
      v278 = (int32x2_t)vtrn2_s16(v273, v274);
      v279 = (int32x2_t)vtrn1_s16(v275, v276);
      v280 = (int32x2_t)vtrn2_s16(v275, v276);
      v281 = (int16x4_t)vzip1_s32(v278, v280);
      v282 = (int16x4_t)vzip2_s32(v277, v279);
      v283 = vadd_s16(v282, v281);
      v284 = vsub_s16(v281, v282);
      v285 = (int16x4_t)vzip1_s32(v277, v279);
      v286 = (int16x4_t)vzip2_s32(v278, v280);
      v287 = vadd_s16(v286, v285);
      v288 = vsub_s16(v285, v286);
      v289 = vmull_s16(v287, v272);
      v290 = vmlal_s16(v289, v283, v272);
      v291 = vdup_n_s16(0xC3Fu);
      v39 = vmlsl_s16(v289, v283, v272);
      v292 = vdup_n_s16(0x1D90u);
      v40 = vmlal_s16(vmull_s16(v288, v292), v284, v291);
      v41 = vmlsl_s16(vmull_s16(v288, v291), v284, v292);
      v42 = vrshrn_n_s32(v290, 0xDuLL);
LABEL_22:
      v96 = vrshrn_n_s32(v40, 0xDuLL);
      v97 = vrshrn_n_s32(v39, 0xDuLL);
      v98 = vrshrn_n_s32(v41, 0xDuLL);
      goto LABEL_28;
    case 12:
    case 14:
      v72 = *v10;
      v73 = 2 * v11;
      v74 = (int16x4_t *)((char *)v10 + v73);
      v75 = *v74;
      v76 = (int16x4_t *)((char *)v74 + v73);
      v77 = vshl_n_s16(v72, 2uLL);
      v78 = vshl_n_s16(v75, 2uLL);
      v79 = vshl_n_s16(*v76, 2uLL);
      v80 = vshl_n_s16(*(int16x4_t *)((char *)v76 + v73), 2uLL);
      v81 = vdup_n_s16(0x1A21u);
      v82 = vdup_n_s16(0x1364u);
      v83 = vdup_n_s16(0xA52u);
      v84 = vdup_n_s16(0x1DB6u);
      v85 = vmull_s16(vqadd_s16(v77, v78), v81);
      v86 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v78, v82), v79, v81), v77, v83), v80, v84);
      v87 = vaddq_s32(vmlsl_s16(vmull_s16(v80, v82), v79, v81), vmlsl_s16(vmull_s16(v77, v84), v78, v83));
      v88.i64[0] = 0x300000003;
      v88.i64[1] = 0x300000003;
      v89 = vsubq_s32(vmulq_s32(vmull_s16(v79, v81), v88), v86);
      v90 = vrshrn_n_s32(v86, 0xDuLL);
      v91 = vrshrn_n_s32(vmlsl_s16(v85, v80, v81), 0xDuLL);
      *(int16x4_t *)v85.i8 = vrshrn_n_s32(v87, 0xDuLL);
      v92.i64[0] = 0x100000001000;
      v92.i64[1] = 0x100000001000;
      *(int16x4_t *)v87.i8 = vshrn_n_s32(vaddq_s32(vaddq_s32(v87, v92), v89), 0xDuLL);
      *(int16x4_t *)v92.i8 = vtrn1_s16(v90, v91);
      v93 = (int32x2_t)vtrn2_s16(v90, v91);
      v94 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v87.i8);
      *(int16x4_t *)v85.i8 = vtrn2_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v87.i8);
      v95 = vdup_n_s16(0x16A1u);
      v42 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(*(int32x2_t *)v92.i8, v94), v95), 0xCuLL);
      v96 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip1_s32(v93, *(int32x2_t *)v85.i8), v95), 0xCuLL);
      v97 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(*(int32x2_t *)v92.i8, v94), v95), 0xCuLL);
      v98 = vqrshrn_n_s32(vmull_s16((int16x4_t)vzip2_s32(v93, *(int32x2_t *)v85.i8), v95), 0xCuLL);
      goto LABEL_28;
    case 13:
      v293 = *v10;
      v294 = 2 * v11;
      v295 = (int16x4_t *)((char *)v10 + v294);
      v296 = *v295;
      v297 = (int16x4_t *)((char *)v295 + v294);
      v298 = vdup_n_s16(0x16A1u);
      v299 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v293, 2uLL), v298), 0xCuLL);
      v300 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v296, 2uLL), v298), 0xCuLL);
      v301 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*v297, 2uLL), v298), 0xCuLL);
      v302 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*(int16x4_t *)((char *)v297 + v294), 2uLL), v298), 0xCuLL);
      v303 = (int32x2_t)vtrn1_s16(v299, v300);
      v304 = (int32x2_t)vtrn2_s16(v299, v300);
      v305 = (int32x2_t)vtrn1_s16(v301, v302);
      v306 = (int32x2_t)vtrn2_s16(v301, v302);
      v307 = (int16x4_t)vzip1_s32(v303, v305);
      v308 = (int16x4_t)vzip1_s32(v304, v306);
      v309 = (int16x4_t)vzip2_s32(v303, v305);
      v183 = vdup_n_s16(0x1A21u);
      v184 = vmull_s16(v309, v183);
      v310 = vdup_n_s16(0x1364u);
      v311 = vmull_s16(v308, v310);
      v312 = vdup_n_s16(0xA52u);
      v188 = (int16x4_t)vzip2_s32(v304, v306);
      v313 = vdup_n_s16(0x1DB6u);
      v190 = vmull_s16(vqadd_s16(v307, v308), v183);
      v191 = vmlsl_s16(vmull_s16(v307, v313), v308, v312);
      v192 = vmlsl_s16(vmull_s16(v188, v310), v309, v183);
      v193 = vmlal_s16(vmlal_s16(vmlal_s16(v311, v309, v183), v307, v312), v188, v313);
LABEL_24:
      v314 = vmlsl_s16(v190, v188, v183);
      v227 = vaddq_s32(v192, v191);
      v315.i64[0] = 0x300000003;
      v315.i64[1] = 0x300000003;
      v71 = vsubq_s32(vmulq_s32(v184, v315), v193);
      v42 = vrshrn_n_s32(v193, 0xDuLL);
      v96 = vrshrn_n_s32(v314, 0xDuLL);
      goto LABEL_26;
    case 15:
      v316 = *v10;
      v317 = 2 * v11;
      v318 = (int16x4_t *)((char *)v10 + v317);
      v319 = *v318;
      v320 = (int16x4_t *)((char *)v318 + v317);
      v321 = vdup_n_s16(0x16A1u);
      v322 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v316, 2uLL), v321), 0xCuLL);
      v323 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v319, 2uLL), v321), 0xCuLL);
      v324 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*v320, 2uLL), v321), 0xCuLL);
      v325 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*(int16x4_t *)((char *)v320 + v317), 2uLL), v321), 0xCuLL);
      v326 = (int32x2_t)vtrn1_s16(v322, v323);
      v327 = (int32x2_t)vtrn2_s16(v322, v323);
      v328 = (int32x2_t)vtrn1_s16(v324, v325);
      v329 = (int32x2_t)vtrn2_s16(v324, v325);
      v330 = (int16x4_t)vzip1_s32(v326, v328);
      v331 = (int16x4_t)vzip1_s32(v327, v329);
      v332 = (int16x4_t)vzip2_s32(v326, v328);
      v333 = (int16x4_t)vzip2_s32(v327, v329);
      v334 = vdup_n_s16(0x1A21u);
      v335 = vdup_n_s16(0x1364u);
      v336 = vdup_n_s16(0xA52u);
      v337 = vdup_n_s16(0x1DB6u);
      v338 = vmlal_s16(vmlal_s16(vmlal_s16(vmull_s16(v332, v335), v331, v334), v333, v336), v330, v337);
      v339 = vmlsl_s16(vmull_s16(vqadd_s16(v333, v332), v334), v330, v334);
      v227 = vaddq_s32(vmlsl_s16(vmull_s16(v330, v335), v331, v334), vmlsl_s16(vmull_s16(v333, v337), v332, v336));
      v340.i64[0] = 0x300000003;
      v340.i64[1] = 0x300000003;
      v71 = vsubq_s32(vmulq_s32(vmull_s16(v331, v334), v340), v338);
      v42 = vrshrn_n_s32(v338, 0xDuLL);
      v96 = vrshrn_n_s32(v339, 0xDuLL);
LABEL_26:
      v97 = vrshrn_n_s32(v227, 0xDuLL);
      v341.i64[0] = 0x100000001000;
      v341.i64[1] = 0x100000001000;
      v124 = vaddq_s32(v227, v341);
LABEL_27:
      v98 = vshrn_n_s32(vaddq_s32(v124, v71), 0xDuLL);
LABEL_28:
      *a2 = vmovl_s16(v42);
      a2[1] = vmovl_s16(v96);
      result = vmovl_s16(v97);
      a2[2] = result;
      a2[3] = vmovl_s16(v98);
      break;
    default:
      return result;
  }
  return result;
}

double lowbd_fwd_txfm2d_8x8_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4, __n128 a5)
{
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  uint64_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  __n128 *v128;
  int16x8_t v129;
  int32x4_t v130;
  uint64_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  __n128 *v164;
  int16x8_t v165;
  int32x4_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  uint64_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  __n128 *v225;
  int16x8_t v226;
  int32x4_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int16x8_t *v253;
  uint64_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  __n128 *v287;
  int16x8_t v288;
  int32x4_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  uint64_t v332;

  v332 = *MEMORY[0x24BDAC8D0];
  HIDWORD(v5) = a4;
  LODWORD(v5) = (a4 << 24) - 0x4000000;
  v6 = (v5 >> 25);
  v7 = v6 > 5;
  v8 = (1 << v6) & 0x27;
  if (!v7 && v8 != 0)
  {
    a1 = (int16x8_t *)((char *)a1 + 14 * a3);
    a3 = -a3;
  }
  switch(a4)
  {
    case 0:
      fdct8x8_col_neon(a1, &v316, a3, 13);
      goto LABEL_11;
    case 1:
    case 4:
      fadst8x8_col_neon(a1, &v316, a3, 13);
LABEL_11:
      v11 = vrhaddq_s16(v316, (int16x8_t)0);
      v12 = vrhaddq_s16(v317, (int16x8_t)0);
      v13 = vrhaddq_s16(v318, (int16x8_t)0);
      v14 = vrhaddq_s16(v319, (int16x8_t)0);
      v15 = vrhaddq_s16(v320, (int16x8_t)0);
      v16 = vrhaddq_s16(v321, (int16x8_t)0);
      v17 = vrhaddq_s16(v322, (int16x8_t)0);
      v18 = vrhaddq_s16(v323, (int16x8_t)0);
      v19 = (int32x4_t)vtrn1q_s16(v11, v12);
      v20 = (int32x4_t)vtrn2q_s16(v11, v12);
      v21 = (int32x4_t)vtrn1q_s16(v13, v14);
      v22 = (int32x4_t)vtrn2q_s16(v13, v14);
      v23 = (int32x4_t)vtrn1q_s16(v15, v16);
      v24 = (int32x4_t)vtrn2q_s16(v15, v16);
      v25 = (int32x4_t)vtrn1q_s16(v17, v18);
      v26 = (int32x4_t)vtrn2q_s16(v17, v18);
      v27 = (int64x2_t)vtrn1q_s32(v19, v21);
      v28 = (int64x2_t)vtrn2q_s32(v19, v21);
      v29 = (int64x2_t)vtrn1q_s32(v20, v22);
      v30 = (int64x2_t)vtrn2q_s32(v20, v22);
      v31 = (int64x2_t)vtrn1q_s32(v23, v25);
      v32 = (int64x2_t)vtrn2q_s32(v23, v25);
      v33 = (int64x2_t)vtrn1q_s32(v24, v26);
      v324 = (int16x8_t)vzip1q_s64(v27, v31);
      v325 = (int16x8_t)vzip1q_s64(v29, v33);
      v34 = (int64x2_t)vtrn2q_s32(v24, v26);
      v35 = vzip2q_s64(v29, v33);
      v36 = vzip1q_s64(v28, v32);
      v37 = vzip2q_s64(v28, v32);
      v326 = (int16x8_t)v36;
      v327 = (int16x8_t)vzip1q_s64(v30, v34);
      v328 = (int16x8_t)vzip2q_s64(v27, v31);
      v329 = (int16x8_t)v35;
      v38 = vzip2q_s64(v30, v34);
      goto LABEL_23;
    case 2:
      fdct8x8_col_neon(a1, &v316, a3, 13);
      goto LABEL_13;
    case 3:
    case 8:
      fadst8x8_col_neon(a1, &v316, a3, 13);
LABEL_13:
      v39 = vrhaddq_s16(v316, (int16x8_t)0);
      v40 = vrhaddq_s16(v317, (int16x8_t)0);
      v41 = vrhaddq_s16(v318, (int16x8_t)0);
      v42 = vrhaddq_s16(v319, (int16x8_t)0);
      v43 = vrhaddq_s16(v320, (int16x8_t)0);
      v44 = vrhaddq_s16(v321, (int16x8_t)0);
      v45 = vrhaddq_s16(v322, (int16x8_t)0);
      v46 = vrhaddq_s16(v323, (int16x8_t)0);
      v47 = (int32x4_t)vtrn1q_s16(v39, v40);
      v48 = (int32x4_t)vtrn2q_s16(v39, v40);
      v49 = (int32x4_t)vtrn1q_s16(v41, v42);
      v50 = (int32x4_t)vtrn2q_s16(v41, v42);
      v51 = (int32x4_t)vtrn1q_s16(v43, v44);
      v52 = (int32x4_t)vtrn2q_s16(v43, v44);
      v53 = (int32x4_t)vtrn1q_s16(v45, v46);
      v54 = (int32x4_t)vtrn2q_s16(v45, v46);
      v55 = (int64x2_t)vtrn1q_s32(v47, v49);
      v56 = (int64x2_t)vtrn2q_s32(v47, v49);
      v57 = (int64x2_t)vtrn1q_s32(v48, v50);
      v58 = (int64x2_t)vtrn2q_s32(v48, v50);
      v59 = (int64x2_t)vtrn1q_s32(v51, v53);
      v60 = (int64x2_t)vtrn2q_s32(v51, v53);
      v61 = (int64x2_t)vtrn1q_s32(v52, v54);
      v324 = (int16x8_t)vzip1q_s64(v55, v59);
      v325 = (int16x8_t)vzip1q_s64(v57, v61);
      v62 = (int64x2_t)vtrn2q_s32(v52, v54);
      v63 = vzip2q_s64(v57, v61);
      v64 = vzip1q_s64(v56, v60);
      v65 = vzip2q_s64(v56, v60);
      v326 = (int16x8_t)v64;
      v327 = (int16x8_t)vzip1q_s64(v58, v62);
      v328 = (int16x8_t)vzip2q_s64(v55, v59);
      v329 = (int16x8_t)v63;
      v66 = vzip2q_s64(v58, v62);
      goto LABEL_28;
    case 5:
      fdct8x8_col_neon(a1, &v316, a3, 13);
      goto LABEL_15;
    case 6:
    case 7:
      fadst8x8_col_neon(a1, &v316, a3, 13);
LABEL_15:
      v67 = vrhaddq_s16(v316, (int16x8_t)0);
      v68 = vrhaddq_s16(v317, (int16x8_t)0);
      v69 = vrhaddq_s16(v318, (int16x8_t)0);
      v70 = vrhaddq_s16(v319, (int16x8_t)0);
      v71 = vrhaddq_s16(v320, (int16x8_t)0);
      v72 = vrhaddq_s16(v321, (int16x8_t)0);
      v73 = vrhaddq_s16(v322, (int16x8_t)0);
      v74 = vrhaddq_s16(v323, (int16x8_t)0);
      v75 = (int32x4_t)vtrn1q_s16(v67, v68);
      v76 = (int32x4_t)vtrn2q_s16(v67, v68);
      v77 = (int32x4_t)vtrn1q_s16(v69, v70);
      v78 = (int32x4_t)vtrn2q_s16(v69, v70);
      v79 = (int32x4_t)vtrn1q_s16(v71, v72);
      v80 = (int32x4_t)vtrn2q_s16(v71, v72);
      v81 = (int32x4_t)vtrn1q_s16(v73, v74);
      v82 = (int32x4_t)vtrn2q_s16(v73, v74);
      v83 = (int64x2_t)vtrn1q_s32(v75, v77);
      v84 = (int64x2_t)vtrn2q_s32(v75, v77);
      v85 = (int64x2_t)vtrn1q_s32(v76, v78);
      v86 = (int64x2_t)vtrn2q_s32(v76, v78);
      v87 = (int64x2_t)vtrn1q_s32(v79, v81);
      v88 = (int64x2_t)vtrn2q_s32(v79, v81);
      v89 = (int64x2_t)vtrn1q_s32(v80, v82);
      v322 = (int16x8_t)vzip1q_s64(v85, v89);
      v323 = (int16x8_t)vzip1q_s64(v83, v87);
      v90 = (int64x2_t)vtrn2q_s32(v80, v82);
      v91 = vzip2q_s64(v85, v89);
      v92 = vzip1q_s64(v84, v88);
      v93 = vzip2q_s64(v84, v88);
      v320 = (int16x8_t)vzip1q_s64(v86, v90);
      v321 = (int16x8_t)v92;
      v318 = (int16x8_t)v91;
      v319 = (int16x8_t)vzip2q_s64(v83, v87);
      v94 = vzip2q_s64(v86, v90);
      goto LABEL_33;
    case 9:
      v95 = 0;
      v96 = vrhaddq_s16(vshlq_n_s16(*a1, 3uLL), (int16x8_t)0);
      v97 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 3uLL), (int16x8_t)0);
      v98 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 3uLL), (int16x8_t)0);
      v99 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 3uLL), (int16x8_t)0);
      v100 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 3uLL), (int16x8_t)0);
      v101 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 3uLL), (int16x8_t)0);
      v102 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 3uLL), (int16x8_t)0);
      v103 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 3uLL), (int16x8_t)0);
      v104 = (int32x4_t)vtrn1q_s16(v96, v97);
      v105 = (int32x4_t)vtrn2q_s16(v96, v97);
      v106 = (int32x4_t)vtrn1q_s16(v98, v99);
      v107 = (int32x4_t)vtrn2q_s16(v98, v99);
      v108 = (int32x4_t)vtrn1q_s16(v100, v101);
      v109 = (int32x4_t)vtrn2q_s16(v100, v101);
      v110 = (int32x4_t)vtrn1q_s16(v102, v103);
      v111 = (int32x4_t)vtrn2q_s16(v102, v103);
      v112 = (int64x2_t)vtrn1q_s32(v104, v106);
      v113 = (int64x2_t)vtrn2q_s32(v104, v106);
      v114 = (int64x2_t)vtrn1q_s32(v105, v107);
      v115 = (int64x2_t)vtrn2q_s32(v105, v107);
      v116 = (int64x2_t)vtrn1q_s32(v108, v110);
      v117 = (int64x2_t)vtrn2q_s32(v108, v110);
      v118 = (int64x2_t)vtrn1q_s32(v109, v111);
      v119 = (int64x2_t)vtrn2q_s32(v109, v111);
      v120 = (int16x8_t)vzip1q_s64(v112, v116);
      v121 = (int16x8_t)vzip2q_s64(v112, v116);
      v122 = (int16x8_t)vzip1q_s64(v114, v118);
      v123 = (int16x8_t)vzip2q_s64(v114, v118);
      v124 = (int16x8_t)vzip1q_s64(v113, v117);
      v125 = (int16x8_t)vzip2q_s64(v113, v117);
      v126 = (int16x8_t)vzip1q_s64(v115, v119);
      v324 = vaddq_s16(v120, v120);
      v325 = vaddq_s16(v122, v122);
      v127 = (int16x8_t)vzip2q_s64(v115, v119);
      v326 = vaddq_s16(v124, v124);
      v327 = vaddq_s16(v126, v126);
      v328 = vaddq_s16(v121, v121);
      v329 = vaddq_s16(v123, v123);
      v330 = vaddq_s16(v125, v125);
      v331 = vaddq_s16(v127, v127);
      v128 = (__n128 *)&a2[1];
      do
      {
        v129 = *(int16x8_t *)((char *)&v324 + v95);
        v130 = vmovl_s16(*(int16x4_t *)v129.i8);
        a5 = (__n128)vmovl_high_s16(v129);
        v128[-1] = (__n128)v130;
        *v128 = a5;
        v95 += 16;
        v128 += 2;
      }
      while (v95 != 128);
      return a5.n128_f64[0];
    case 10:
      fdct8x8_col_neon(a1, &v316, a3, 13);
      v131 = 0;
      v132 = vrhaddq_s16(v316, (int16x8_t)0);
      v133 = vrhaddq_s16(v317, (int16x8_t)0);
      v134 = vrhaddq_s16(v318, (int16x8_t)0);
      v135 = vrhaddq_s16(v319, (int16x8_t)0);
      v136 = vrhaddq_s16(v320, (int16x8_t)0);
      v137 = vrhaddq_s16(v321, (int16x8_t)0);
      v138 = vrhaddq_s16(v322, (int16x8_t)0);
      v139 = vrhaddq_s16(v323, (int16x8_t)0);
      v140 = (int32x4_t)vtrn1q_s16(v132, v133);
      v141 = (int32x4_t)vtrn2q_s16(v132, v133);
      v142 = (int32x4_t)vtrn1q_s16(v134, v135);
      v143 = (int32x4_t)vtrn2q_s16(v134, v135);
      v144 = (int32x4_t)vtrn1q_s16(v136, v137);
      v145 = (int32x4_t)vtrn2q_s16(v136, v137);
      v146 = (int32x4_t)vtrn1q_s16(v138, v139);
      v147 = (int32x4_t)vtrn2q_s16(v138, v139);
      v148 = (int64x2_t)vtrn1q_s32(v140, v142);
      v149 = (int64x2_t)vtrn2q_s32(v140, v142);
      v150 = (int64x2_t)vtrn1q_s32(v141, v143);
      v151 = (int64x2_t)vtrn2q_s32(v141, v143);
      v152 = (int64x2_t)vtrn1q_s32(v144, v146);
      v153 = (int64x2_t)vtrn2q_s32(v144, v146);
      v154 = (int64x2_t)vtrn1q_s32(v145, v147);
      v155 = (int64x2_t)vtrn2q_s32(v145, v147);
      v156 = (int16x8_t)vzip1q_s64(v148, v152);
      v157 = (int16x8_t)vzip2q_s64(v148, v152);
      v158 = (int16x8_t)vzip1q_s64(v150, v154);
      v159 = (int16x8_t)vzip2q_s64(v150, v154);
      v160 = (int16x8_t)vzip1q_s64(v149, v153);
      v161 = (int16x8_t)vzip2q_s64(v149, v153);
      v162 = (int16x8_t)vzip1q_s64(v151, v155);
      v324 = vaddq_s16(v156, v156);
      v325 = vaddq_s16(v158, v158);
      v163 = (int16x8_t)vzip2q_s64(v151, v155);
      v326 = vaddq_s16(v160, v160);
      v327 = vaddq_s16(v162, v162);
      v328 = vaddq_s16(v157, v157);
      v329 = vaddq_s16(v159, v159);
      v330 = vaddq_s16(v161, v161);
      v331 = vaddq_s16(v163, v163);
      v164 = (__n128 *)&a2[1];
      do
      {
        v165 = *(int16x8_t *)((char *)&v324 + v131);
        v166 = vmovl_s16(*(int16x4_t *)v165.i8);
        a5 = (__n128)vmovl_high_s16(v165);
        v164[-1] = (__n128)v166;
        *v164 = a5;
        v131 += 16;
        v164 += 2;
      }
      while (v131 != 128);
      return a5.n128_f64[0];
    case 11:
      v167 = vrhaddq_s16(vshlq_n_s16(*a1, 3uLL), (int16x8_t)0);
      v168 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 3uLL), (int16x8_t)0);
      v169 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 3uLL), (int16x8_t)0);
      v170 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 3uLL), (int16x8_t)0);
      v171 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 3uLL), (int16x8_t)0);
      v172 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 3uLL), (int16x8_t)0);
      v173 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 3uLL), (int16x8_t)0);
      v174 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 3uLL), (int16x8_t)0);
      v175 = (int32x4_t)vtrn1q_s16(v167, v168);
      v176 = (int32x4_t)vtrn2q_s16(v167, v168);
      v177 = (int32x4_t)vtrn1q_s16(v169, v170);
      v178 = (int32x4_t)vtrn2q_s16(v169, v170);
      v179 = (int32x4_t)vtrn1q_s16(v171, v172);
      v180 = (int32x4_t)vtrn2q_s16(v171, v172);
      v181 = (int32x4_t)vtrn1q_s16(v173, v174);
      v182 = (int32x4_t)vtrn2q_s16(v173, v174);
      v183 = (int64x2_t)vtrn1q_s32(v175, v177);
      v184 = (int64x2_t)vtrn2q_s32(v175, v177);
      v185 = (int64x2_t)vtrn1q_s32(v176, v178);
      v186 = (int64x2_t)vtrn2q_s32(v176, v178);
      v187 = (int64x2_t)vtrn1q_s32(v179, v181);
      v188 = (int64x2_t)vtrn2q_s32(v179, v181);
      v189 = (int64x2_t)vtrn1q_s32(v180, v182);
      v324 = (int16x8_t)vzip1q_s64(v183, v187);
      v325 = (int16x8_t)vzip1q_s64(v185, v189);
      v190 = (int64x2_t)vtrn2q_s32(v180, v182);
      v191 = vzip1q_s64(v184, v188);
      v37 = vzip2q_s64(v184, v188);
      v326 = (int16x8_t)v191;
      v327 = (int16x8_t)vzip1q_s64(v186, v190);
      v328 = (int16x8_t)vzip2q_s64(v183, v187);
      v329 = (int16x8_t)vzip2q_s64(v185, v189);
      v38 = vzip2q_s64(v186, v190);
LABEL_23:
      v330 = (int16x8_t)v37;
      v331 = (int16x8_t)v38;
      a5.n128_u64[0] = fdct8x8_row_neon(&v324, a2, 8, 13).u64[0];
      return a5.n128_f64[0];
    case 12:
      fadst8x8_col_neon(a1, &v316, a3, 13);
      v192 = 0;
      v193 = vrhaddq_s16(v316, (int16x8_t)0);
      v194 = vrhaddq_s16(v317, (int16x8_t)0);
      v195 = vrhaddq_s16(v318, (int16x8_t)0);
      v196 = vrhaddq_s16(v319, (int16x8_t)0);
      v197 = vrhaddq_s16(v320, (int16x8_t)0);
      v198 = vrhaddq_s16(v321, (int16x8_t)0);
      v199 = vrhaddq_s16(v322, (int16x8_t)0);
      v200 = vrhaddq_s16(v323, (int16x8_t)0);
      v201 = (int32x4_t)vtrn1q_s16(v193, v194);
      v202 = (int32x4_t)vtrn2q_s16(v193, v194);
      v203 = (int32x4_t)vtrn1q_s16(v195, v196);
      v204 = (int32x4_t)vtrn2q_s16(v195, v196);
      v205 = (int32x4_t)vtrn1q_s16(v197, v198);
      v206 = (int32x4_t)vtrn2q_s16(v197, v198);
      v207 = (int32x4_t)vtrn1q_s16(v199, v200);
      v208 = (int32x4_t)vtrn2q_s16(v199, v200);
      v209 = (int64x2_t)vtrn1q_s32(v201, v203);
      v210 = (int64x2_t)vtrn2q_s32(v201, v203);
      v211 = (int64x2_t)vtrn1q_s32(v202, v204);
      v212 = (int64x2_t)vtrn2q_s32(v202, v204);
      v213 = (int64x2_t)vtrn1q_s32(v205, v207);
      v214 = (int64x2_t)vtrn2q_s32(v205, v207);
      v215 = (int64x2_t)vtrn1q_s32(v206, v208);
      v216 = (int64x2_t)vtrn2q_s32(v206, v208);
      v217 = (int16x8_t)vzip1q_s64(v209, v213);
      v218 = (int16x8_t)vzip2q_s64(v209, v213);
      v219 = (int16x8_t)vzip1q_s64(v211, v215);
      v220 = (int16x8_t)vzip2q_s64(v211, v215);
      v221 = (int16x8_t)vzip1q_s64(v210, v214);
      v222 = (int16x8_t)vzip2q_s64(v210, v214);
      v223 = (int16x8_t)vzip1q_s64(v212, v216);
      v324 = vaddq_s16(v217, v217);
      v325 = vaddq_s16(v219, v219);
      v224 = (int16x8_t)vzip2q_s64(v212, v216);
      v326 = vaddq_s16(v221, v221);
      v327 = vaddq_s16(v223, v223);
      v328 = vaddq_s16(v218, v218);
      v329 = vaddq_s16(v220, v220);
      v330 = vaddq_s16(v222, v222);
      v331 = vaddq_s16(v224, v224);
      v225 = (__n128 *)&a2[1];
      do
      {
        v226 = *(int16x8_t *)((char *)&v324 + v192);
        v227 = vmovl_s16(*(int16x4_t *)v226.i8);
        a5 = (__n128)vmovl_high_s16(v226);
        v225[-1] = (__n128)v227;
        *v225 = a5;
        v192 += 16;
        v225 += 2;
      }
      while (v192 != 128);
      return a5.n128_f64[0];
    case 13:
      v228 = vrhaddq_s16(vshlq_n_s16(*a1, 3uLL), (int16x8_t)0);
      v229 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 3uLL), (int16x8_t)0);
      v230 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 3uLL), (int16x8_t)0);
      v231 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 3uLL), (int16x8_t)0);
      v232 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 3uLL), (int16x8_t)0);
      v233 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 3uLL), (int16x8_t)0);
      v234 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 3uLL), (int16x8_t)0);
      v235 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 3uLL), (int16x8_t)0);
      v236 = (int32x4_t)vtrn1q_s16(v228, v229);
      v237 = (int32x4_t)vtrn2q_s16(v228, v229);
      v238 = (int32x4_t)vtrn1q_s16(v230, v231);
      v239 = (int32x4_t)vtrn2q_s16(v230, v231);
      v240 = (int32x4_t)vtrn1q_s16(v232, v233);
      v241 = (int32x4_t)vtrn2q_s16(v232, v233);
      v242 = (int32x4_t)vtrn1q_s16(v234, v235);
      v243 = (int32x4_t)vtrn2q_s16(v234, v235);
      v244 = (int64x2_t)vtrn1q_s32(v236, v238);
      v245 = (int64x2_t)vtrn2q_s32(v236, v238);
      v246 = (int64x2_t)vtrn1q_s32(v237, v239);
      v247 = (int64x2_t)vtrn2q_s32(v237, v239);
      v248 = (int64x2_t)vtrn1q_s32(v240, v242);
      v249 = (int64x2_t)vtrn2q_s32(v240, v242);
      v250 = (int64x2_t)vtrn1q_s32(v241, v243);
      v324 = (int16x8_t)vzip1q_s64(v244, v248);
      v325 = (int16x8_t)vzip1q_s64(v246, v250);
      v251 = (int64x2_t)vtrn2q_s32(v241, v243);
      v252 = vzip1q_s64(v245, v249);
      v65 = vzip2q_s64(v245, v249);
      v326 = (int16x8_t)v252;
      v327 = (int16x8_t)vzip1q_s64(v247, v251);
      v328 = (int16x8_t)vzip2q_s64(v244, v248);
      v329 = (int16x8_t)vzip2q_s64(v246, v250);
      v66 = vzip2q_s64(v247, v251);
LABEL_28:
      v330 = (int16x8_t)v65;
      v331 = (int16x8_t)v66;
      v253 = &v324;
      goto LABEL_34;
    case 14:
      fadst8x8_col_neon(a1, &v316, a3, 13);
      v254 = 0;
      v255 = vrhaddq_s16(v316, (int16x8_t)0);
      v256 = vrhaddq_s16(v317, (int16x8_t)0);
      v257 = vrhaddq_s16(v318, (int16x8_t)0);
      v258 = vrhaddq_s16(v319, (int16x8_t)0);
      v259 = vrhaddq_s16(v320, (int16x8_t)0);
      v260 = vrhaddq_s16(v321, (int16x8_t)0);
      v261 = vrhaddq_s16(v322, (int16x8_t)0);
      v262 = vrhaddq_s16(v323, (int16x8_t)0);
      v263 = (int32x4_t)vtrn1q_s16(v255, v256);
      v264 = (int32x4_t)vtrn2q_s16(v255, v256);
      v265 = (int32x4_t)vtrn1q_s16(v257, v258);
      v266 = (int32x4_t)vtrn2q_s16(v257, v258);
      v267 = (int32x4_t)vtrn1q_s16(v259, v260);
      v268 = (int32x4_t)vtrn2q_s16(v259, v260);
      v269 = (int32x4_t)vtrn1q_s16(v261, v262);
      v270 = (int32x4_t)vtrn2q_s16(v261, v262);
      v271 = (int64x2_t)vtrn1q_s32(v263, v265);
      v272 = (int64x2_t)vtrn2q_s32(v263, v265);
      v273 = (int64x2_t)vtrn1q_s32(v264, v266);
      v274 = (int64x2_t)vtrn2q_s32(v264, v266);
      v275 = (int64x2_t)vtrn1q_s32(v267, v269);
      v276 = (int64x2_t)vtrn2q_s32(v267, v269);
      v277 = (int64x2_t)vtrn1q_s32(v268, v270);
      v278 = (int64x2_t)vtrn2q_s32(v268, v270);
      v279 = (int16x8_t)vzip1q_s64(v271, v275);
      v280 = (int16x8_t)vzip2q_s64(v271, v275);
      v281 = (int16x8_t)vzip1q_s64(v273, v277);
      v282 = (int16x8_t)vzip2q_s64(v273, v277);
      v283 = (int16x8_t)vzip1q_s64(v272, v276);
      v284 = (int16x8_t)vzip2q_s64(v272, v276);
      v285 = (int16x8_t)vzip1q_s64(v274, v278);
      v324 = vaddq_s16(v279, v279);
      v325 = vaddq_s16(v281, v281);
      v286 = (int16x8_t)vzip2q_s64(v274, v278);
      v326 = vaddq_s16(v283, v283);
      v327 = vaddq_s16(v285, v285);
      v328 = vaddq_s16(v280, v280);
      v329 = vaddq_s16(v282, v282);
      v330 = vaddq_s16(v284, v284);
      v331 = vaddq_s16(v286, v286);
      v287 = (__n128 *)&a2[1];
      do
      {
        v288 = *(int16x8_t *)((char *)&v324 + v254);
        v289 = vmovl_s16(*(int16x4_t *)v288.i8);
        a5 = (__n128)vmovl_high_s16(v288);
        v287[-1] = (__n128)v289;
        *v287 = a5;
        v254 += 16;
        v287 += 2;
      }
      while (v254 != 128);
      return a5.n128_f64[0];
    case 15:
      v290 = vrhaddq_s16(vshlq_n_s16(*a1, 3uLL), (int16x8_t)0);
      v291 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 3uLL), (int16x8_t)0);
      v292 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 3uLL), (int16x8_t)0);
      v293 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 3uLL), (int16x8_t)0);
      v294 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 3uLL), (int16x8_t)0);
      v295 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 3uLL), (int16x8_t)0);
      v296 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 3uLL), (int16x8_t)0);
      v297 = vrhaddq_s16(vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 3uLL), (int16x8_t)0);
      v298 = (int32x4_t)vtrn1q_s16(v290, v291);
      v299 = (int32x4_t)vtrn2q_s16(v290, v291);
      v300 = (int32x4_t)vtrn1q_s16(v292, v293);
      v301 = (int32x4_t)vtrn2q_s16(v292, v293);
      v302 = (int32x4_t)vtrn1q_s16(v294, v295);
      v303 = (int32x4_t)vtrn2q_s16(v294, v295);
      v304 = (int32x4_t)vtrn1q_s16(v296, v297);
      v305 = (int32x4_t)vtrn2q_s16(v296, v297);
      v306 = (int64x2_t)vtrn1q_s32(v298, v300);
      v307 = (int64x2_t)vtrn2q_s32(v298, v300);
      v308 = (int64x2_t)vtrn1q_s32(v299, v301);
      v309 = (int64x2_t)vtrn2q_s32(v299, v301);
      v310 = (int64x2_t)vtrn1q_s32(v302, v304);
      v311 = (int64x2_t)vtrn2q_s32(v302, v304);
      v312 = (int64x2_t)vtrn1q_s32(v303, v305);
      v322 = (int16x8_t)vzip1q_s64(v308, v312);
      v323 = (int16x8_t)vzip1q_s64(v306, v310);
      v313 = (int64x2_t)vtrn2q_s32(v303, v305);
      v314 = vzip1q_s64(v307, v311);
      v93 = vzip2q_s64(v307, v311);
      v320 = (int16x8_t)vzip1q_s64(v309, v313);
      v321 = (int16x8_t)v314;
      v318 = (int16x8_t)vzip2q_s64(v308, v312);
      v319 = (int16x8_t)vzip2q_s64(v306, v310);
      v94 = vzip2q_s64(v309, v313);
LABEL_33:
      v316 = (int16x8_t)v94;
      v317 = (int16x8_t)v93;
      v253 = &v316;
LABEL_34:
      a5.n128_u64[0] = fadst8x8_row_neon(v253, a2, 8, 13).u64[0];
      break;
    default:
      return a5.n128_f64[0];
  }
  return a5.n128_f64[0];
}

uint64_t lowbd_fwd_txfm2d_16x16_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int32x4_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t *v106;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  uint64_t v156;

  v4 = a3;
  v6 = a1;
  v7 = 0;
  v156 = *MEMORY[0x24BDAC8D0];
  v8 = col_txfm8x16_arr[a4];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v7 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v7 = 1;
LABEL_7:
    v6 = a1 + 30 * (_DWORD)a3;
    v4 = -(int)a3;
  }
LABEL_8:
  v9 = row_txfm8x16_arr[a4];
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v8)(v6, &v140, v4, 13);
  v10 = vrshrq_n_s16(v140, 2uLL);
  v11 = vrshrq_n_s16(v141, 2uLL);
  v12 = vrshrq_n_s16(v142, 2uLL);
  v13 = vrshrq_n_s16(v143, 2uLL);
  v14 = vrshrq_n_s16(v144, 2uLL);
  v15 = vrshrq_n_s16(v145, 2uLL);
  v16 = vrshrq_n_s16(v146, 2uLL);
  v17 = vrshrq_n_s16(v147, 2uLL);
  v18 = (int32x4_t)vtrn1q_s16(v10, v11);
  v19 = (int32x4_t)vtrn2q_s16(v10, v11);
  v140 = v10;
  v141 = v11;
  v20 = (int32x4_t)vtrn1q_s16(v12, v13);
  v21 = (int32x4_t)vtrn2q_s16(v12, v13);
  v22 = (int32x4_t)vtrn1q_s16(v14, v15);
  v142 = v12;
  v143 = v13;
  v23 = (int32x4_t)vtrn2q_s16(v14, v15);
  v24 = (int32x4_t)vtrn1q_s16(v16, v17);
  v144 = v14;
  v145 = v15;
  v25 = (int64x2_t)vtrn1q_s32(v18, v20);
  v26 = (int64x2_t)vtrn2q_s32(v18, v20);
  v27 = (int32x4_t)vtrn2q_s16(v16, v17);
  v146 = v16;
  v147 = v17;
  v28 = (int64x2_t)vtrn1q_s32(v19, v21);
  v29 = (int64x2_t)vtrn2q_s32(v19, v21);
  v30 = (int64x2_t)vtrn1q_s32(v22, v24);
  v31 = (int64x2_t)vtrn2q_s32(v22, v24);
  v148 = vrshrq_n_s16(v148, 2uLL);
  v149 = vrshrq_n_s16(v149, 2uLL);
  v32 = (int64x2_t)vtrn1q_s32(v23, v27);
  v33 = (int64x2_t)vtrn2q_s32(v23, v27);
  v34 = vzip1q_s64(v25, v30);
  v150 = vrshrq_n_s16(v150, 2uLL);
  v151 = vrshrq_n_s16(v151, 2uLL);
  v35 = vzip2q_s64(v25, v30);
  v36 = vzip1q_s64(v28, v32);
  v37 = vzip2q_s64(v28, v32);
  v152 = vrshrq_n_s16(v152, 2uLL);
  v153 = vrshrq_n_s16(v153, 2uLL);
  v38 = vzip1q_s64(v26, v31);
  v39 = vzip2q_s64(v26, v31);
  v40 = vzip1q_s64(v29, v33);
  v154 = vrshrq_n_s16(v154, 2uLL);
  v155 = vrshrq_n_s16(v155, 2uLL);
  v41 = vzip2q_s64(v29, v33);
  v42 = (int32x4_t)vtrn1q_s16(v148, v149);
  v43 = (int32x4_t)vtrn2q_s16(v148, v149);
  v108 = (int16x8_t)v34;
  v109 = (int16x8_t)v36;
  v44 = (int32x4_t)vtrn1q_s16(v150, v151);
  v45 = (int32x4_t)vtrn2q_s16(v150, v151);
  v46 = (int32x4_t)vtrn1q_s16(v152, v153);
  v110 = (int16x8_t)v38;
  v111 = (int16x8_t)v40;
  v47 = (int32x4_t)vtrn2q_s16(v152, v153);
  v48 = (int32x4_t)vtrn1q_s16(v154, v155);
  v49 = (int32x4_t)vtrn2q_s16(v154, v155);
  v112 = (int16x8_t)v35;
  v113 = (int16x8_t)v37;
  v50 = (int64x2_t)vtrn1q_s32(v42, v44);
  v51 = (int64x2_t)vtrn2q_s32(v42, v44);
  v52 = (int64x2_t)vtrn1q_s32(v43, v45);
  v114 = (int16x8_t)v39;
  v115 = (int16x8_t)v41;
  v53 = (int64x2_t)vtrn2q_s32(v43, v45);
  v54 = (int64x2_t)vtrn1q_s32(v46, v48);
  v55 = (int64x2_t)vtrn2q_s32(v46, v48);
  v56 = (int64x2_t)vtrn1q_s32(v47, v49);
  v57 = (int64x2_t)vtrn2q_s32(v47, v49);
  v124 = vzip1q_s64(v50, v54);
  v125 = vzip1q_s64(v52, v56);
  v126 = vzip1q_s64(v51, v55);
  v127 = vzip1q_s64(v53, v57);
  v128 = vzip2q_s64(v50, v54);
  v129 = vzip2q_s64(v52, v56);
  v130 = vzip2q_s64(v51, v55);
  v131 = vzip2q_s64(v53, v57);
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v8)(v6 + 16, &v140, v4, 13);
  v58 = vrshrq_n_s16(v140, 2uLL);
  v59 = vrshrq_n_s16(v141, 2uLL);
  v60 = vrshrq_n_s16(v142, 2uLL);
  v61 = vrshrq_n_s16(v143, 2uLL);
  v62 = vrshrq_n_s16(v144, 2uLL);
  v63 = vrshrq_n_s16(v145, 2uLL);
  v64 = vrshrq_n_s16(v146, 2uLL);
  v65 = vrshrq_n_s16(v147, 2uLL);
  v66 = (int32x4_t)vtrn1q_s16(v58, v59);
  v67 = (int32x4_t)vtrn2q_s16(v58, v59);
  v140 = v58;
  v141 = v59;
  v68 = (int32x4_t)vtrn1q_s16(v60, v61);
  v69 = (int32x4_t)vtrn2q_s16(v60, v61);
  v70 = (int32x4_t)vtrn1q_s16(v62, v63);
  v142 = v60;
  v143 = v61;
  v71 = (int32x4_t)vtrn2q_s16(v62, v63);
  v72 = (int32x4_t)vtrn1q_s16(v64, v65);
  v144 = v62;
  v145 = v63;
  v73 = (int64x2_t)vtrn1q_s32(v66, v68);
  v74 = (int64x2_t)vtrn2q_s32(v66, v68);
  v75 = (int32x4_t)vtrn2q_s16(v64, v65);
  v146 = v64;
  v147 = v65;
  v76 = (int64x2_t)vtrn1q_s32(v67, v69);
  v77 = (int64x2_t)vtrn2q_s32(v67, v69);
  v78 = (int64x2_t)vtrn1q_s32(v70, v72);
  v79 = (int64x2_t)vtrn2q_s32(v70, v72);
  v148 = vrshrq_n_s16(v148, 2uLL);
  v149 = vrshrq_n_s16(v149, 2uLL);
  v80 = (int64x2_t)vtrn1q_s32(v71, v75);
  v81 = (int64x2_t)vtrn2q_s32(v71, v75);
  v82 = vzip1q_s64(v73, v78);
  v150 = vrshrq_n_s16(v150, 2uLL);
  v151 = vrshrq_n_s16(v151, 2uLL);
  v83 = vzip2q_s64(v73, v78);
  v84 = vzip1q_s64(v76, v80);
  v85 = vzip2q_s64(v76, v80);
  v152 = vrshrq_n_s16(v152, 2uLL);
  v153 = vrshrq_n_s16(v153, 2uLL);
  v86 = vzip1q_s64(v74, v79);
  v87 = vzip2q_s64(v74, v79);
  v88 = vzip1q_s64(v77, v81);
  v154 = vrshrq_n_s16(v154, 2uLL);
  v155 = vrshrq_n_s16(v155, 2uLL);
  v89 = vzip2q_s64(v77, v81);
  v90 = (int32x4_t)vtrn1q_s16(v148, v149);
  v91 = (int32x4_t)vtrn2q_s16(v148, v149);
  v116 = v82;
  v117 = v84;
  v92 = (int32x4_t)vtrn1q_s16(v150, v151);
  v93 = (int32x4_t)vtrn2q_s16(v150, v151);
  v94 = (int32x4_t)vtrn1q_s16(v152, v153);
  v118 = v86;
  v119 = v88;
  v95 = (int32x4_t)vtrn2q_s16(v152, v153);
  v96 = (int32x4_t)vtrn1q_s16(v154, v155);
  v97 = (int32x4_t)vtrn2q_s16(v154, v155);
  v120 = v83;
  v121 = v85;
  v98 = (int64x2_t)vtrn1q_s32(v90, v92);
  v99 = (int64x2_t)vtrn2q_s32(v90, v92);
  v100 = (int64x2_t)vtrn1q_s32(v91, v93);
  v122 = v87;
  v123 = v89;
  v101 = (int64x2_t)vtrn2q_s32(v91, v93);
  v102 = (int64x2_t)vtrn1q_s32(v94, v96);
  v103 = (int64x2_t)vtrn2q_s32(v94, v96);
  v104 = (int64x2_t)vtrn1q_s32(v95, v97);
  v105 = (int64x2_t)vtrn2q_s32(v95, v97);
  v132 = vzip1q_s64(v98, v102);
  v133 = vzip1q_s64(v100, v104);
  v134 = vzip1q_s64(v99, v103);
  v135 = vzip1q_s64(v101, v105);
  v136 = vzip2q_s64(v98, v102);
  v137 = vzip2q_s64(v100, v104);
  v138 = vzip2q_s64(v99, v103);
  v139 = vzip2q_s64(v101, v105);
  if (v7)
  {
    v154 = v109;
    v155 = v108;
    v152 = v111;
    v153 = v110;
    v150 = v113;
    v151 = v112;
    v148 = v115;
    v149 = v114;
    v146 = (int16x8_t)v84;
    v147 = (int16x8_t)v82;
    v144 = (int16x8_t)v88;
    v145 = (int16x8_t)v86;
    v142 = (int16x8_t)v85;
    v143 = (int16x8_t)v83;
    v140 = (int16x8_t)v89;
    v141 = (int16x8_t)v87;
    v106 = (int64x2_t *)&v140;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v9)(&v140, a2, 16, 12);
    v154 = (int16x8_t)v125;
    v155 = (int16x8_t)v124;
    v152 = (int16x8_t)v127;
    v153 = (int16x8_t)v126;
    v150 = (int16x8_t)v129;
    v151 = (int16x8_t)v128;
    v148 = (int16x8_t)v131;
    v149 = (int16x8_t)v130;
    v146 = (int16x8_t)v133;
    v147 = (int16x8_t)v132;
    v144 = (int16x8_t)v135;
    v145 = (int16x8_t)v134;
    v142 = (int16x8_t)v137;
    v143 = (int16x8_t)v136;
    v140 = (int16x8_t)v139;
    v141 = (int16x8_t)v138;
  }
  else
  {
    v106 = &v124;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v9)(&v108, a2, 16, 12);
  }
  return ((uint64_t (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v9)(v106, a2 + 32, 16, 12);
}

uint64_t lowbd_fwd_txfm2d_32x32_neon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int32x4_t *v7;
  int32x4_t *v8;
  int16x4_t *v9;
  int v10;
  char v11;
  uint64_t v13;
  uint64_t (*v14)();
  uint64_t (*v15)();
  int16x8_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int64x2_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int32x4_t *v129;
  int16x8_t *v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  _OWORD v163[32];
  _OWORD v164[32];
  _OWORD v165[32];
  _OWORD v166[160];
  uint64_t v167;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v6 = v3;
  v8 = v7;
  v9 = (int16x4_t *)v2;
  v167 = *MEMORY[0x24BDAC8D0];
  if (((0xF1FEuLL >> v4) & 1) != 0)
  {
    v11 = v5;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    av1_get_fwd_txfm_cfg(v4, 3u, (uint64_t)&v131);
    return fwd_txfm2d_c(v9, v8, v6, (unsigned __int8 *)&v131, (__int32 *)v163, v11);
  }
  v10 = 0;
  if (v4 <= 0xF)
  {
    if (((1 << v4) & 0x4110) != 0)
    {
LABEL_9:
      v9 = (int16x4_t *)(v2 + 62 * (_DWORD)v3);
      v6 = -(int)v3;
      goto LABEL_10;
    }
    if (((1 << v4) & 0x80A0) != 0)
    {
      v10 = 1;
      goto LABEL_10;
    }
    if ((_DWORD)v4 == 6)
    {
      v10 = 1;
      goto LABEL_9;
    }
  }
LABEL_10:
  v13 = 0;
  v14 = col_txfm8x32_arr[v4];
  v15 = row_txfm8x32_arr[v4];
  do
  {
    ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v14)(v9, &v131, v6, 12);
    v131 = vrshrq_n_s16(v131, 4uLL);
    v132 = vrshrq_n_s16(v132, 4uLL);
    v133 = vrshrq_n_s16(v133, 4uLL);
    v134 = vrshrq_n_s16(v134, 4uLL);
    v135 = vrshrq_n_s16(v135, 4uLL);
    v136 = vrshrq_n_s16(v136, 4uLL);
    v16 = vrshrq_n_s16(v139, 4uLL);
    v17 = vrshrq_n_s16(v140, 4uLL);
    v137 = vrshrq_n_s16(v137, 4uLL);
    v138 = vrshrq_n_s16(v138, 4uLL);
    v18 = (int32x4_t)vtrn1q_s16(v131, v132);
    v19 = (int32x4_t)vtrn2q_s16(v131, v132);
    v20 = (int32x4_t)vtrn1q_s16(v133, v134);
    v139 = v16;
    v140 = v17;
    v21 = (int32x4_t)vtrn2q_s16(v133, v134);
    v22 = (int32x4_t)vtrn1q_s16(v135, v136);
    v23 = (int32x4_t)vtrn2q_s16(v135, v136);
    v24 = (int32x4_t)vtrn1q_s16(v137, v138);
    v25 = (int32x4_t)vtrn2q_s16(v137, v138);
    v26 = (int64x2_t)vtrn1q_s32(v18, v20);
    v27 = (int64x2_t)vtrn2q_s32(v18, v20);
    v28 = (int64x2_t)vtrn1q_s32(v19, v21);
    v29 = (int64x2_t)vtrn2q_s32(v19, v21);
    v30 = (int64x2_t)vtrn1q_s32(v22, v24);
    v31 = (int64x2_t)vtrn2q_s32(v22, v24);
    v32 = (int64x2_t)vtrn1q_s32(v23, v25);
    v33 = (int64x2_t)vtrn2q_s32(v23, v25);
    v34 = vzip1q_s64(v26, v30);
    v35 = vzip2q_s64(v26, v30);
    v36 = vzip1q_s64(v28, v32);
    v37 = vzip2q_s64(v28, v32);
    v38 = vzip1q_s64(v27, v31);
    v39 = vzip2q_s64(v27, v31);
    v40 = vzip1q_s64(v29, v33);
    v41 = vzip2q_s64(v29, v33);
    v42 = vrshrq_n_s16(v141, 4uLL);
    v43 = vrshrq_n_s16(v142, 4uLL);
    v141 = v42;
    v142 = v43;
    v44 = (int64x2_t *)&v163[v13];
    *v44 = v34;
    v44[1] = v36;
    v45 = vrshrq_n_s16(v143, 4uLL);
    v46 = vrshrq_n_s16(v144, 4uLL);
    v143 = v45;
    v144 = v46;
    v44[2] = v38;
    v44[3] = v40;
    v47 = vrshrq_n_s16(v145, 4uLL);
    v48 = vrshrq_n_s16(v146, 4uLL);
    v145 = v47;
    v146 = v48;
    v44[4] = v35;
    v44[5] = v37;
    v49 = (int32x4_t)vtrn1q_s16(v16, v17);
    v50 = (int32x4_t)vtrn2q_s16(v16, v17);
    v51 = (int32x4_t)vtrn1q_s16(v42, v43);
    v52 = (int32x4_t)vtrn2q_s16(v42, v43);
    v53 = (int32x4_t)vtrn1q_s16(v45, v46);
    v54 = (int32x4_t)vtrn2q_s16(v45, v46);
    v55 = vrshrq_n_s16(v147, 4uLL);
    v56 = vrshrq_n_s16(v148, 4uLL);
    v147 = v55;
    v148 = v56;
    v44[6] = v39;
    v44[7] = v41;
    v57 = (int32x4_t)vtrn1q_s16(v47, v48);
    v58 = (int32x4_t)vtrn2q_s16(v47, v48);
    v59 = (int64x2_t)vtrn1q_s32(v49, v51);
    v60 = (int64x2_t)vtrn2q_s32(v49, v51);
    v61 = (int64x2_t)vtrn1q_s32(v50, v52);
    v62 = (int64x2_t)vtrn2q_s32(v50, v52);
    v63 = (int64x2_t)vtrn1q_s32(v53, v57);
    v64 = (int64x2_t)vtrn2q_s32(v53, v57);
    v65 = (int64x2_t)vtrn1q_s32(v54, v58);
    v66 = (int64x2_t)vtrn2q_s32(v54, v58);
    v67 = vzip1q_s64(v59, v63);
    v68 = vzip2q_s64(v59, v63);
    v69 = vzip1q_s64(v61, v65);
    v70 = vzip2q_s64(v61, v65);
    v71 = vzip1q_s64(v60, v64);
    v72 = vzip2q_s64(v60, v64);
    v73 = vzip1q_s64(v62, v66);
    v74 = vzip2q_s64(v62, v66);
    v75 = vrshrq_n_s16(v149, 4uLL);
    v76 = vrshrq_n_s16(v150, 4uLL);
    v149 = v75;
    v150 = v76;
    v44[32] = v67;
    v44[33] = v69;
    v77 = vrshrq_n_s16(v151, 4uLL);
    v78 = vrshrq_n_s16(v152, 4uLL);
    v151 = v77;
    v152 = v78;
    v44[34] = v71;
    v44[35] = v73;
    v79 = (int32x4_t)vtrn1q_s16(v55, v56);
    v80 = (int32x4_t)vtrn2q_s16(v55, v56);
    v81 = (int32x4_t)vtrn1q_s16(v75, v76);
    v82 = (int32x4_t)vtrn2q_s16(v75, v76);
    v83 = vrshrq_n_s16(v153, 4uLL);
    v84 = vrshrq_n_s16(v154, 4uLL);
    v153 = v83;
    v154 = v84;
    v44[36] = v68;
    v44[37] = v70;
    v85 = (int32x4_t)vtrn1q_s16(v77, v78);
    v86 = (int32x4_t)vtrn2q_s16(v77, v78);
    v87 = (int32x4_t)vtrn1q_s16(v83, v84);
    v88 = (int32x4_t)vtrn2q_s16(v83, v84);
    v89 = (int64x2_t)vtrn1q_s32(v79, v81);
    v90 = (int64x2_t)vtrn2q_s32(v79, v81);
    v91 = vrshrq_n_s16(v155, 4uLL);
    v92 = vrshrq_n_s16(v156, 4uLL);
    v155 = v91;
    v156 = v92;
    v44[38] = v72;
    v44[39] = v74;
    v93 = (int64x2_t)vtrn1q_s32(v80, v82);
    v94 = (int64x2_t)vtrn2q_s32(v80, v82);
    v95 = (int64x2_t)vtrn1q_s32(v85, v87);
    v96 = (int64x2_t)vtrn2q_s32(v85, v87);
    v97 = (int64x2_t)vtrn1q_s32(v86, v88);
    v98 = (int64x2_t)vtrn2q_s32(v86, v88);
    v99 = vzip1q_s64(v89, v95);
    v100 = vzip2q_s64(v89, v95);
    v101 = vzip1q_s64(v93, v97);
    v102 = vzip2q_s64(v93, v97);
    v103 = vzip1q_s64(v90, v96);
    v104 = vzip2q_s64(v90, v96);
    v105 = vzip1q_s64(v94, v98);
    v106 = vzip2q_s64(v94, v98);
    v107 = vrshrq_n_s16(v157, 4uLL);
    v108 = vrshrq_n_s16(v158, 4uLL);
    v157 = v107;
    v158 = v108;
    v44[64] = v99;
    v44[65] = v101;
    v109 = vrshrq_n_s16(v159, 4uLL);
    v110 = vrshrq_n_s16(v160, 4uLL);
    v159 = v109;
    v160 = v110;
    v44[66] = v103;
    v111 = (int32x4_t)vtrn1q_s16(v91, v92);
    v44[67] = v105;
    v112 = (int32x4_t)vtrn2q_s16(v91, v92);
    v113 = (int32x4_t)vtrn1q_s16(v107, v108);
    v114 = (int32x4_t)vtrn2q_s16(v107, v108);
    v115 = vrshrq_n_s16(v161, 4uLL);
    v116 = vrshrq_n_s16(v162, 4uLL);
    v44[68] = v100;
    v117 = (int32x4_t)vtrn1q_s16(v109, v110);
    v118 = (int32x4_t)vtrn2q_s16(v109, v110);
    v119 = (int32x4_t)vtrn1q_s16(v115, v116);
    v161 = v115;
    v162 = v116;
    v120 = (int32x4_t)vtrn2q_s16(v115, v116);
    v44[69] = v102;
    v121 = (int64x2_t)vtrn1q_s32(v111, v113);
    v122 = (int64x2_t)vtrn2q_s32(v111, v113);
    v44[70] = v104;
    v44[71] = v106;
    v123 = (int64x2_t)vtrn1q_s32(v112, v114);
    v124 = (int64x2_t)vtrn2q_s32(v112, v114);
    v125 = (int64x2_t)vtrn1q_s32(v117, v119);
    v126 = (int64x2_t)vtrn2q_s32(v117, v119);
    v127 = (int64x2_t)vtrn1q_s32(v118, v120);
    v128 = (int64x2_t)vtrn2q_s32(v118, v120);
    v44[96] = vzip1q_s64(v121, v125);
    v44[97] = vzip1q_s64(v123, v127);
    v44[98] = vzip1q_s64(v122, v126);
    v44[99] = vzip1q_s64(v124, v128);
    v44[100] = vzip2q_s64(v121, v125);
    v44[101] = vzip2q_s64(v123, v127);
    v44[102] = vzip2q_s64(v122, v126);
    v44[103] = vzip2q_s64(v124, v128);
    v13 += 8;
    v9 += 2;
  }
  while (v13 != 32);
  if (v10)
  {
    v161 = (int16x8_t)v163[1];
    v162 = (int16x8_t)v163[0];
    v159 = (int16x8_t)v163[3];
    v160 = (int16x8_t)v163[2];
    v157 = (int16x8_t)v163[5];
    v158 = (int16x8_t)v163[4];
    v155 = (int16x8_t)v163[7];
    v156 = (int16x8_t)v163[6];
    v153 = (int16x8_t)v163[9];
    v154 = (int16x8_t)v163[8];
    v151 = (int16x8_t)v163[11];
    v152 = (int16x8_t)v163[10];
    v149 = (int16x8_t)v163[13];
    v150 = (int16x8_t)v163[12];
    v147 = (int16x8_t)v163[15];
    v148 = (int16x8_t)v163[14];
    v145 = (int16x8_t)v163[17];
    v146 = (int16x8_t)v163[16];
    v143 = (int16x8_t)v163[19];
    v144 = (int16x8_t)v163[18];
    v141 = (int16x8_t)v163[21];
    v142 = (int16x8_t)v163[20];
    v139 = (int16x8_t)v163[23];
    v140 = (int16x8_t)v163[22];
    v137 = (int16x8_t)v163[25];
    v138 = (int16x8_t)v163[24];
    v135 = (int16x8_t)v163[27];
    v136 = (int16x8_t)v163[26];
    v133 = (int16x8_t)v163[29];
    v134 = (int16x8_t)v163[28];
    v131 = (int16x8_t)v163[31];
    v132 = (int16x8_t)v163[30];
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v15)(&v131, v8, 32, 12);
    v161 = (int16x8_t)v164[1];
    v162 = (int16x8_t)v164[0];
    v159 = (int16x8_t)v164[3];
    v160 = (int16x8_t)v164[2];
    v157 = (int16x8_t)v164[5];
    v158 = (int16x8_t)v164[4];
    v155 = (int16x8_t)v164[7];
    v156 = (int16x8_t)v164[6];
    v153 = (int16x8_t)v164[9];
    v154 = (int16x8_t)v164[8];
    v151 = (int16x8_t)v164[11];
    v152 = (int16x8_t)v164[10];
    v149 = (int16x8_t)v164[13];
    v150 = (int16x8_t)v164[12];
    v147 = (int16x8_t)v164[15];
    v148 = (int16x8_t)v164[14];
    v145 = (int16x8_t)v164[17];
    v146 = (int16x8_t)v164[16];
    v143 = (int16x8_t)v164[19];
    v144 = (int16x8_t)v164[18];
    v141 = (int16x8_t)v164[21];
    v142 = (int16x8_t)v164[20];
    v139 = (int16x8_t)v164[23];
    v140 = (int16x8_t)v164[22];
    v137 = (int16x8_t)v164[25];
    v138 = (int16x8_t)v164[24];
    v135 = (int16x8_t)v164[27];
    v136 = (int16x8_t)v164[26];
    v133 = (int16x8_t)v164[29];
    v134 = (int16x8_t)v164[28];
    v131 = (int16x8_t)v164[31];
    v132 = (int16x8_t)v164[30];
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v15)(&v131, &v8[2], 32, 12);
    v161 = (int16x8_t)v165[1];
    v162 = (int16x8_t)v165[0];
    v159 = (int16x8_t)v165[3];
    v160 = (int16x8_t)v165[2];
    v157 = (int16x8_t)v165[5];
    v158 = (int16x8_t)v165[4];
    v155 = (int16x8_t)v165[7];
    v156 = (int16x8_t)v165[6];
    v153 = (int16x8_t)v165[9];
    v154 = (int16x8_t)v165[8];
    v151 = (int16x8_t)v165[11];
    v152 = (int16x8_t)v165[10];
    v149 = (int16x8_t)v165[13];
    v150 = (int16x8_t)v165[12];
    v147 = (int16x8_t)v165[15];
    v148 = (int16x8_t)v165[14];
    v145 = (int16x8_t)v165[17];
    v146 = (int16x8_t)v165[16];
    v143 = (int16x8_t)v165[19];
    v144 = (int16x8_t)v165[18];
    v141 = (int16x8_t)v165[21];
    v142 = (int16x8_t)v165[20];
    v139 = (int16x8_t)v165[23];
    v140 = (int16x8_t)v165[22];
    v137 = (int16x8_t)v165[25];
    v138 = (int16x8_t)v165[24];
    v135 = (int16x8_t)v165[27];
    v136 = (int16x8_t)v165[26];
    v133 = (int16x8_t)v165[29];
    v134 = (int16x8_t)v165[28];
    v131 = (int16x8_t)v165[31];
    v132 = (int16x8_t)v165[30];
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v15)(&v131, &v8[4], 32, 12);
    v161 = (int16x8_t)v166[1];
    v162 = (int16x8_t)v166[0];
    v159 = (int16x8_t)v166[3];
    v160 = (int16x8_t)v166[2];
    v157 = (int16x8_t)v166[5];
    v158 = (int16x8_t)v166[4];
    v155 = (int16x8_t)v166[7];
    v156 = (int16x8_t)v166[6];
    v153 = (int16x8_t)v166[9];
    v154 = (int16x8_t)v166[8];
    v151 = (int16x8_t)v166[11];
    v152 = (int16x8_t)v166[10];
    v149 = (int16x8_t)v166[13];
    v150 = (int16x8_t)v166[12];
    v147 = (int16x8_t)v166[15];
    v148 = (int16x8_t)v166[14];
    v145 = (int16x8_t)v166[17];
    v146 = (int16x8_t)v166[16];
    v143 = (int16x8_t)v166[19];
    v144 = (int16x8_t)v166[18];
    v141 = (int16x8_t)v166[21];
    v142 = (int16x8_t)v166[20];
    v139 = (int16x8_t)v166[23];
    v140 = (int16x8_t)v166[22];
    v137 = (int16x8_t)v166[25];
    v138 = (int16x8_t)v166[24];
    v135 = (int16x8_t)v166[27];
    v136 = (int16x8_t)v166[26];
    v133 = (int16x8_t)v166[29];
    v134 = (int16x8_t)v166[28];
    v129 = v8 + 6;
    v131 = (int16x8_t)v166[31];
    v132 = (int16x8_t)v166[30];
    v130 = &v131;
  }
  else
  {
    ((void (*)(_OWORD *, int32x4_t *, uint64_t, uint64_t))v15)(v163, v8, 32, 12);
    ((void (*)(_OWORD *, int32x4_t *, uint64_t, uint64_t))v15)(v164, &v8[2], 32, 12);
    ((void (*)(_OWORD *, int32x4_t *, uint64_t, uint64_t))v15)(v165, &v8[4], 32, 12);
    v129 = v8 + 6;
    v130 = (int16x8_t *)v166;
  }
  return ((uint64_t (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v15)(v130, v129, 32, 12);
}

void lowbd_fwd_txfm2d_64x64_neon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int16x8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x8_t v424;
  int16x8_t v425;
  int16x8_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int16x8_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int16x8_t v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int16x8_t v466;
  int16x8_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int16x8_t v472;
  int16x8_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int16x8_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int16x8_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int8x16_t v495;
  int8x16_t v496;
  int16x8_t v497;
  int16x8_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int16x8_t v501;
  int16x8_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int16x8_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int64x2_t v514;
  int64x2_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  int64x2_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int64x2_t v529;
  int64x2_t *v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int64x2_t v561;
  int64x2_t v562;
  int16x8_t v563;
  int16x8_t v564;
  int16x8_t v565;
  int16x8_t v566;
  int16x8_t v567;
  int16x8_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  int64x2_t v583;
  int64x2_t v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int16x8_t v598;
  int16x8_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  uint64_t v619;
  _BYTE *v620;
  uint64_t i;
  int16x8_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t *v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  int32x4_t v662;
  int32x4_t v663;
  int32x4_t v664;
  int32x4_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int16x8_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int16x8_t v681;
  int16x8_t v682;
  int16x8_t v683;
  int16x8_t v684;
  int16x8_t v685;
  int16x8_t v686;
  int16x8_t v687;
  int16x8_t v688;
  int32x4_t v689;
  int16x8_t v690;
  int32x4_t v691;
  int16x8_t v692;
  int32x4_t v693;
  int32x4_t v694;
  int32x4_t v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int32x4_t v699;
  int32x4_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int32x4_t v709;
  int16x8_t v710;
  int32x4_t v711;
  int16x8_t v712;
  int32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  int32x4_t v716;
  int32x4_t v717;
  int16x8_t v718;
  int32x4_t v719;
  int16x8_t v720;
  int32x4_t v721;
  int16x8_t v722;
  int32x4_t v723;
  int16x8_t v724;
  int32x4_t v725;
  int16x8_t v726;
  int32x4_t v727;
  int16x8_t v728;
  int32x4_t v729;
  int16x8_t v730;
  int32x4_t v731;
  int16x8_t v732;
  int16x8_t v733;
  int32x4_t v734;
  int16x8_t v735;
  int32x4_t v736;
  int16x8_t v737;
  int32x4_t v738;
  int16x8_t v739;
  int32x4_t v740;
  int16x8_t v741;
  int32x4_t v742;
  int16x8_t v743;
  int16x8_t v744;
  int32x4_t v745;
  int16x8_t v746;
  int16x8_t v747;
  int32x4_t v748;
  int16x8_t v749;
  int32x4_t v750;
  int16x8_t v751;
  int32x4_t v752;
  int16x8_t v753;
  int32x4_t v754;
  int16x8_t v755;
  int32x4_t v756;
  int32x4_t v757;
  int32x4_t v758;
  int16x8_t v759;
  int16x8_t v760;
  int16x8_t v761;
  int16x8_t v762;
  int16x8_t v763;
  int16x8_t v764;
  int16x8_t v765;
  int16x8_t v766;
  int32x4_t v767;
  int32x4_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int32x4_t v771;
  int32x4_t v772;
  int32x4_t v773;
  int32x4_t v774;
  int32x4_t v775;
  int32x4_t v776;
  int32x4_t v777;
  int32x4_t v778;
  int16x8_t v779;
  int32x4_t v780;
  int16x8_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int32x4_t v789;
  int32x4_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int32x4_t v793;
  int32x4_t v794;
  int16x8_t v795;
  int16x8_t v796;
  int16x8_t v797;
  int16x8_t v798;
  int16x8_t v799;
  int16x8_t v800;
  int16x8_t v801;
  int16x8_t v802;
  int16x8_t v803;
  int16x8_t v804;
  int16x8_t v805;
  int16x8_t v806;
  int16x8_t v807;
  int16x8_t v808;
  int16x8_t v809;
  int16x8_t v810;
  int16x8_t v811;
  int16x8_t v812;
  int16x8_t v813;
  int16x8_t v814;
  int16x8_t v815;
  int16x8_t v816;
  int16x8_t v817;
  int16x8_t v818;
  int16x8_t v819;
  int16x8_t v820;
  int16x8_t v821;
  int16x8_t v822;
  int16x8_t v823;
  int16x8_t v824;
  int16x8_t v825;
  int16x8_t v826;
  int16x8_t v827;
  int16x8_t v828;
  int16x8_t v829;
  int16x8_t v830;
  int16x8_t v831;
  int16x8_t v832;
  int16x8_t v833;
  int16x8_t v834;
  int16x8_t v835;
  int16x8_t v836;
  int16x8_t v837;
  int16x8_t v838;
  int16x8_t v839;
  int16x8_t v840;
  int16x8_t v841;
  int16x8_t v842;
  int16x8_t v843;
  int16x8_t v844;
  int16x8_t v845;
  int16x8_t v846;
  int16x8_t v847;
  int16x8_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int16x8_t v851;
  int16x8_t v852;
  int16x8_t v853;
  int16x8_t v854;
  int32x4_t v855;
  int16x8_t v856;
  int32x4_t v857;
  int16x8_t v858;
  int32x4_t v859;
  int16x8_t v860;
  int32x4_t v861;
  int16x8_t v862;
  int32x4_t v863;
  int16x8_t v864;
  int32x4_t v865;
  int16x8_t v866;
  int32x4_t v867;
  int16x8_t v868;
  int32x4_t v869;
  int16x8_t v870;
  int32x4_t v871;
  int16x8_t v872;
  int16x8_t v873;
  int32x4_t v874;
  int16x8_t v875;
  int16x8_t v876;
  int32x4_t v877;
  int16x8_t v878;
  int16x8_t v879;
  int16x8_t v880;
  int16x8_t v881;
  int16x8_t v882;
  int16x8_t v883;
  int16x8_t v884;
  int16x8_t v885;
  int16x8_t v886;
  int16x8_t v887;
  int32x4_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int32x4_t v893;
  int32x4_t v894;
  int32x4_t v895;
  int32x4_t v896;
  int32x4_t v897;
  int32x4_t v898;
  int32x4_t v899;
  int32x4_t v900;
  int32x4_t v901;
  int32x4_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int32x4_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int32x4_t v920;
  int32x4_t v921;
  int32x4_t v922;
  int32x4_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int32x4_t v937;
  int32x4_t v938;
  int32x4_t v939;
  int32x4_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int32x4_t v945;
  int32x4_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int32x4_t v949;
  int32x4_t v950;
  int32x4_t v951;
  _BYTE v952[8192];
  int16x8_t v953;
  int16x8_t v954;
  int16x8_t v955;
  int16x8_t v956;
  int16x8_t v957;
  int16x8_t v958;
  int16x8_t v959;
  int16x8_t v960;
  int16x8_t v961;
  int16x8_t v962;
  int16x8_t v963;
  int16x8_t v964;
  int16x8_t v965;
  int16x8_t v966;
  int16x8_t v967;
  int16x8_t v968;
  int16x8_t v969;
  int16x8_t v970;
  int16x8_t v971;
  int16x8_t v972;
  int16x8_t v973;
  int16x8_t v974;
  int16x8_t v975;
  int16x8_t v976;
  int16x8_t v977;
  int16x8_t v978;
  int16x8_t v979;
  int16x8_t v980;
  int16x8_t v981;
  int16x8_t v982;
  int16x8_t v983;
  int16x8_t v984;
  int16x8_t v985;
  int16x8_t v986;
  int16x8_t v987;
  int16x8_t v988;
  int16x8_t v989;
  int16x8_t v990;
  int16x8_t v991;
  int16x8_t v992;
  int16x8_t v993;
  int16x8_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int16x8_t v999;
  int16x8_t v1000;
  int16x8_t v1001;
  int16x8_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int16x8_t v1007;
  int16x8_t v1008;
  int16x8_t v1009;
  int16x8_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int16x8_t v1013;
  int16x8_t v1014;
  int16x8_t v1015;
  int16x8_t v1016;
  uint64_t v1017;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = (int16x8_t *)v2;
  v7 = 0;
  v853 = vdupq_n_s16(0x16A1u);
  v852 = vdupq_n_s16(0xE95Fu);
  v884 = vdupq_n_s16(0x1D90u);
  v883 = vdupq_n_s16(0xC3Fu);
  v887 = vdupq_n_s16(0xE270u);
  v882 = vdupq_n_s16(0xF3C1u);
  v881 = vdupq_n_s16(0x1F63u);
  v886 = vdupq_n_s16(0x63Eu);
  v885 = vdupq_n_s16(0xE09Du);
  v851 = vdupq_n_s16(0xF9C2u);
  v880 = vdupq_n_s16(0x11C7u);
  v879 = vdupq_n_s16(0x1A9Bu);
  v878 = vdupq_n_s16(0xEE39u);
  v850 = vdupq_n_s16(0xE565u);
  v849 = vdupq_n_s16(0x1FD9u);
  v848 = vdupq_n_s16(0x323u);
  v847 = vdupq_n_s16(0xE027u);
  v846 = vdupq_n_s16(0x144Du);
  v845 = vdupq_n_s16(0x18BDu);
  v844 = vdupq_n_s16(0xEBB3u);
  v843 = vdupq_n_s16(0x1C39u);
  v684 = vdupq_n_s16(0xE3C7u);
  v685 = vdupq_n_s16(0xF16u);
  v682 = vdupq_n_s16(0x1E9Fu);
  v683 = vdupq_n_s16(0x94Au);
  v680 = vdupq_n_s16(0xFCDDu);
  v681 = vdupq_n_s16(0xF6B6u);
  v678 = vdupq_n_s16(0xF0EAu);
  v679 = vdupq_n_s16(0xE743u);
  v676 = vdupq_n_s16(0x1FF6u);
  v677 = vdupq_n_s16(0xE161u);
  v1017 = *MEMORY[0x24BDAC8D0];
  do
  {
    v8 = 0;
    v9 = v6;
    do
    {
      *(int16x8_t *)((char *)&v953 + v8) = *v9;
      v8 += 16;
      v9 = (int16x8_t *)((char *)v9 + 2 * v3);
    }
    while (v8 != 1024);
    v829 = vqaddq_s16(v957, v1012);
    v832 = vqaddq_s16(v958, v1011);
    v836 = vqaddq_s16(v963, v1006);
    v839 = vqaddq_s16(v964, v1005);
    v841 = vqaddq_s16(v973, v996);
    v837 = vqaddq_s16(v974, v995);
    v834 = vqaddq_s16(v979, v990);
    v830 = vqaddq_s16(v980, v989);
    v10 = vqsubq_s16(v839, v841);
    v11 = vqsubq_s16(v836, v837);
    v12 = vqsubq_s16(v832, v834);
    v13 = vqsubq_s16(v829, v830);
    v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v10, v853), v13, v853), 0xDuLL);
    v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v10, v852), v13, v853), 0xDuLL);
    v16 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v11, v853), v12, v853), 0xDuLL);
    v17 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v11, v852), v12, v853), 0xDuLL);
    v826 = vqaddq_s16(v959, v1010);
    v828 = vqaddq_s16(v962, v1007);
    v827 = vqaddq_s16(v975, v994);
    v824 = vqaddq_s16(v978, v991);
    v18 = vqsubq_s16(v828, v827);
    v19 = vqsubq_s16(v826, v824);
    v20 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v18, v853), v19, v853), 0xDuLL);
    v21 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v18, v852), v19, v853), 0xDuLL);
    v821 = vqaddq_s16(v960, v1009);
    v823 = vqaddq_s16(v961, v1008);
    v819 = vqaddq_s16(v976, v993);
    v817 = vqaddq_s16(v977, v992);
    v22 = vqsubq_s16(v823, v819);
    v23 = vqsubq_s16(v821, v817);
    v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v22, v853), v23, v853), 0xDuLL);
    v25 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v22, v852), v23, v853), 0xDuLL);
    v813 = vqaddq_s16(v955, v1014);
    v815 = vqaddq_s16(v966, v1003);
    v814 = vqaddq_s16(v971, v998);
    v812 = vqaddq_s16(v982, v987);
    v875 = vqsubq_s16(v815, v814);
    v872 = vqsubq_s16(v813, v812);
    v26 = vqaddq_s16(v875, v17);
    v27 = vqaddq_s16(v872, v16);
    v28 = vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v883.i8);
    v29 = vmlal_high_s16(vmull_high_s16(v26, v887), v27, v883);
    v30 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v26, v883), v27, v884), 0xDuLL);
    v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
    v805 = vqaddq_s16(v956, v1013);
    v808 = vqaddq_s16(v965, v1004);
    v807 = vqaddq_s16(v972, v997);
    v803 = vqaddq_s16(v981, v988);
    v724 = vqsubq_s16(v808, v807);
    v726 = vqsubq_s16(v805, v803);
    v32 = vqaddq_s16(v724, v15);
    v33 = vqaddq_s16(v726, v14);
    v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v32, v883), v33, v884), 0xDuLL);
    v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v32, v887), v33, v883), 0xDuLL);
    v798 = vqaddq_s16(v954, v1015);
    v801 = vqaddq_s16(v967, v1002);
    v800 = vqaddq_s16(v970, v999);
    v797 = vqaddq_s16(v983, v986);
    v718 = vqsubq_s16(v798, v797);
    v720 = vqsubq_s16(v801, v800);
    v710 = vqaddq_s16(v718, v20);
    v712 = vqaddq_s16(v720, v21);
    v36 = vqaddq_s16(v712, v31);
    v37 = vqaddq_s16(v710, v30);
    v760 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v886.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v881.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v36, v886), v37, v881), 0xDuLL);
    v38 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v886.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v36, v885), v37, v886), 0xDuLL);
    v766 = vqaddq_s16(v968, v1001);
    v764 = vqaddq_s16(v953, v1016);
    v765 = vqaddq_s16(v969, v1000);
    v763 = vqaddq_s16(v984, v985);
    v39 = vqsubq_s16(v766, v765);
    v40 = vqsubq_s16(v764, v763);
    v41 = vqaddq_s16(v39, v25);
    v42 = vqaddq_s16(v40, v24);
    v761 = v38;
    v762 = vqaddq_s16(v41, v35);
    v759 = vqaddq_s16(v42, v34);
    v43 = vqsubq_s16(v762, v38);
    v44 = vqsubq_s16(v759, v760);
    v45 = vdupq_n_s16(0x157Du);
    v46 = vdupq_n_s16(0x17B6u);
    v717 = vmlal_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v46.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v45.i8);
    v716 = vmlal_high_s16(vmull_high_s16(v43, v46), v44, v45);
    v47 = vdupq_n_s16(0xEA83u);
    v714 = vmlal_high_s16(vmull_high_s16(v43, v47), v44, v46);
    v715 = vmlal_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v47.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v46.i8);
    v48 = vqsubq_s16(v712, v31);
    v49 = vqsubq_s16(v41, v35);
    v50 = vqsubq_s16(v42, v34);
    v51 = vqsubq_s16(v710, v30);
    v52 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v886.i8);
    v53 = vmlal_high_s16(vmull_high_s16(v48, v885), v51, v886);
    v54 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v851.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v885.i8);
    v55 = vmlal_high_s16(vmull_high_s16(v48, v851), v51, v885);
    v56 = vrshrn_high_n_s32(vrshrn_n_s32(v52, 0xDuLL), v53, 0xDuLL);
    v57 = vrshrn_high_n_s32(vrshrn_n_s32(v54, 0xDuLL), v55, 0xDuLL);
    v58 = vqsubq_s16(v49, v57);
    v59 = vqsubq_s16(v50, v56);
    v60 = vdupq_n_s16(0x1CEDu);
    v61 = vdupq_n_s16(0xDAFu);
    v713 = vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v61.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v60.i8);
    v711 = vmlal_high_s16(vmull_high_s16(v58, v61), v59, v60);
    v62 = vdupq_n_s16(0xE313u);
    v708 = vmlal_high_s16(vmull_high_s16(v58, v62), v59, v61);
    v709 = vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v61.i8);
    v63 = vqaddq_s16(v49, v57);
    v64 = vqaddq_s16(v50, v56);
    v65 = vdupq_n_s16(0xF538u);
    v66 = vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v65.i8);
    v67 = vmull_high_s16(v63, v65);
    v68 = vdupq_n_s16(0x1E21u);
    v706 = vmlal_high_s16(v67, v64, v68);
    v707 = vmlal_s16(v66, *(int16x4_t *)v64.i8, *(int16x4_t *)v68.i8);
    v69 = vqsubq_s16(v724, v15);
    v70 = vqsubq_s16(v875, v17);
    v71 = vqsubq_s16(v720, v21);
    v72 = vqsubq_s16(v39, v25);
    v73 = vqsubq_s16(v40, v24);
    v74 = vqsubq_s16(v718, v20);
    v75 = vqsubq_s16(v872, v16);
    v76 = vqsubq_s16(v726, v14);
    v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v883.i8);
    v78 = vmlal_high_s16(vmull_high_s16(v69, v887), v76, v883);
    v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v887.i8);
    v80 = vmlal_high_s16(vmull_high_s16(v69, v882), v76, v887);
    v81 = vrshrn_high_n_s32(vrshrn_n_s32(v77, 0xDuLL), v78, 0xDuLL);
    v82 = vrshrn_high_n_s32(vrshrn_n_s32(v79, 0xDuLL), v80, 0xDuLL);
    v83 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v887), v75, v883), 0xDuLL);
    v84 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v887.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v882), v75, v887), 0xDuLL);
    v85 = vqsubq_s16(v71, v84);
    v86 = vqsubq_s16(v74, v83);
    v87 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v879.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v880.i8);
    v88 = vmlal_high_s16(vmull_high_s16(v85, v879), v86, v880);
    v89 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v879.i8);
    v90 = vmlal_high_s16(vmull_high_s16(v85, v878), v86, v879);
    v91 = vrshrn_high_n_s32(vrshrn_n_s32(v87, 0xDuLL), v88, 0xDuLL);
    v92 = vrshrn_high_n_s32(vrshrn_n_s32(v89, 0xDuLL), v90, 0xDuLL);
    v93 = vqsubq_s16(v72, v82);
    v94 = vqsubq_s16(v73, v81);
    v95 = vqaddq_s16(v93, v92);
    v96 = vqaddq_s16(v94, v91);
    v97 = vdupq_n_s16(0x1F0Au);
    v98 = vdupq_n_s16(0x7C6u);
    v727 = vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v98.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
    v725 = vmlal_high_s16(vmull_high_s16(v95, v98), v96, v97);
    v99 = vdupq_n_s16(0xE0F6u);
    v719 = vmlal_high_s16(vmull_high_s16(v95, v99), v96, v98);
    v721 = vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v98.i8);
    v100 = vqsubq_s16(v93, v92);
    v101 = vqsubq_s16(v94, v91);
    v102 = vdupq_n_s16(0x1074u);
    v103 = vdupq_n_s16(0x1B73u);
    v705 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v102.i8);
    v704 = vmlal_high_s16(vmull_high_s16(v100, v103), v101, v102);
    v104 = vdupq_n_s16(0xEF8Cu);
    v702 = vmlal_high_s16(vmull_high_s16(v100, v104), v101, v103);
    v703 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v104.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v103.i8);
    v105 = vqaddq_s16(v71, v84);
    v106 = vqaddq_s16(v72, v82);
    v107 = vqaddq_s16(v73, v81);
    v108 = vqaddq_s16(v74, v83);
    v109 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v879.i8);
    v110 = vmlal_high_s16(vmull_high_s16(v105, v878), v108, v879);
    v111 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v878.i8);
    v112 = vmlal_high_s16(vmull_high_s16(v105, v850), v108, v878);
    v113 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xDuLL), v110, 0xDuLL);
    v114 = vrshrn_high_n_s32(vrshrn_n_s32(v111, 0xDuLL), v112, 0xDuLL);
    v115 = vqsubq_s16(v106, v114);
    v116 = vqsubq_s16(v107, v113);
    v117 = vdupq_n_s16(0x19B4u);
    v118 = vdupq_n_s16(0x1310u);
    v701 = vmlal_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v118.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v117.i8);
    v700 = vmlal_high_s16(vmull_high_s16(v115, v118), v116, v117);
    v119 = vdupq_n_s16(0xE64Cu);
    v698 = vmlal_high_s16(vmull_high_s16(v115, v119), v116, v118);
    v699 = vmlal_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v118.i8);
    v120 = vqaddq_s16(v106, v114);
    v121 = vqaddq_s16(v107, v113);
    v122 = vdupq_n_s16(0x4B2u);
    v123 = vdupq_n_s16(0x1FA7u);
    v697 = vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v121.i8, *(int16x4_t *)v122.i8);
    v696 = vmlal_high_s16(vmull_high_s16(v120, v123), v121, v122);
    v124 = vdupq_n_s16(0xFB4Eu);
    v694 = vmlal_high_s16(vmull_high_s16(v120, v124), v121, v123);
    v695 = vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v124.i8), *(int16x4_t *)v121.i8, *(int16x4_t *)v123.i8);
    v876 = vqsubq_s16(v984, v985);
    v873 = vqsubq_s16(v983, v986);
    v864 = vqsubq_s16(v982, v987);
    v870 = vqsubq_s16(v981, v988);
    v743 = vqsubq_s16(v979, v990);
    v746 = vqsubq_s16(v980, v989);
    v866 = vqsubq_s16(v978, v991);
    v862 = vqsubq_s16(v977, v992);
    v125 = vqsubq_s16(v976, v993);
    v126 = vqsubq_s16(v975, v994);
    v127 = vqsubq_s16(v974, v995);
    v128 = vqsubq_s16(v973, v996);
    v129 = vqsubq_s16(v972, v997);
    v130 = vqsubq_s16(v971, v998);
    v131 = vqsubq_s16(v970, v999);
    v132 = vqsubq_s16(v969, v1000);
    v133 = vqsubq_s16(v968, v1001);
    v134 = vqsubq_s16(v967, v1002);
    v135 = vqsubq_s16(v965, v1004);
    v136 = vqsubq_s16(v964, v1005);
    v137 = vqsubq_s16(v963, v1006);
    v138 = vqsubq_s16(v962, v1007);
    v139 = vqsubq_s16(v961, v1008);
    v737 = vqsubq_s16(v960, v1009);
    v755 = vqsubq_s16(v958, v1011);
    v751 = vqsubq_s16(v959, v1010);
    v753 = vqsubq_s16(v957, v1012);
    v860 = vqsubq_s16(v956, v1013);
    v730 = vqsubq_s16(v955, v1014);
    v868 = vqsubq_s16(v954, v1015);
    v858 = vqsubq_s16(v953, v1016);
    v749 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v853), v139, v853), 0xDuLL);
    v739 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v852), v139, v853), 0xDuLL);
    v741 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v853), v138, v853), 0xDuLL);
    v732 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v852), v138, v853), 0xDuLL);
    v735 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v853), v137, v853), 0xDuLL);
    v728 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v852), v137, v853), 0xDuLL);
    v722 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v853), v136, v853), 0xDuLL);
    v688 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v852), v136, v853), 0xDuLL);
    v854 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v129, v853), v135, v853), 0xDuLL);
    v140 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v129, v852), v135, v853), 0xDuLL);
    v141 = vqsubq_s16(v966, v1003);
    v686 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v130, v852), v141, v853), 0xDuLL);
    v687 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v130, v853), v141, v853), 0xDuLL);
    v690 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v131, v852), v134, v853), 0xDuLL);
    v692 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v131, v853), v134, v853), 0xDuLL);
    v856 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v132, v853), v133, v853), 0xDuLL);
    v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v132, v852), v133, v853), 0xDuLL);
    v143 = vqaddq_s16(v746, v688);
    v144 = vqaddq_s16(v753, v722);
    v145 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v883), v144, v884), 0xDuLL);
    v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v887), v144, v883), 0xDuLL);
    v147 = vqaddq_s16(v743, v728);
    v148 = vqaddq_s16(v755, v735);
    v149 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v883), v148, v884), 0xDuLL);
    v150 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v887), v148, v883), 0xDuLL);
    v151 = vqaddq_s16(v866, v732);
    v152 = vqaddq_s16(v751, v741);
    v153 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v883), v152, v884), 0xDuLL);
    v154 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v887), v152, v883), 0xDuLL);
    v155 = vqaddq_s16(v862, v739);
    v156 = vqaddq_s16(v737, v749);
    v157 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v156.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v155, v883), v156, v884), 0xDuLL);
    v158 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v156.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v155, v887), v156, v883), 0xDuLL);
    v779 = vqaddq_s16(v864, v686);
    v781 = vqaddq_s16(v730, v687);
    v159 = vqaddq_s16(v779, v150);
    v160 = vqaddq_s16(v781, v149);
    v161 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v886.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v881.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v159, v886), v160, v881), 0xDuLL);
    v162 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v886.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v159, v885), v160, v886), 0xDuLL);
    v163 = vqaddq_s16(v870, v140);
    v164 = vqaddq_s16(v860, v854);
    v165 = vqaddq_s16(v163, v146);
    v166 = vqaddq_s16(v164, v145);
    v167 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v165.i8, *(int16x4_t *)v886.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v881.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v165, v886), v166, v881), 0xDuLL);
    v168 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v165.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v886.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v165, v885), v166, v886), 0xDuLL);
    v169 = vqaddq_s16(v873, v690);
    v170 = vqaddq_s16(v868, v692);
    v171 = vqaddq_s16(v169, v154);
    v172 = vqaddq_s16(v170, v153);
    v173 = vqaddq_s16(v171, v162);
    v174 = vqaddq_s16(v172, v161);
    v811 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v848.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v849.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v173, v848), v174, v849), 0xDuLL);
    v810 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v848.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v173, v847), v174, v848), 0xDuLL);
    v175 = vqaddq_s16(v876, v142);
    v176 = vqaddq_s16(v858, v856);
    v177 = vqaddq_s16(v175, v158);
    v178 = vqaddq_s16(v176, v157);
    v795 = vqaddq_s16(v177, v168);
    v796 = vqaddq_s16(v178, v167);
    v179 = vqsubq_s16(v795, v810);
    v180 = vqsubq_s16(v796, v811);
    v181 = vdupq_n_s16(0x1611u);
    v182 = vdupq_n_s16(0x172Du);
    v794 = vmlal_s16(vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v182.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v181.i8);
    v793 = vmlal_high_s16(vmull_high_s16(v179, v182), v180, v181);
    v183 = vdupq_n_s16(0xE9EFu);
    v792 = vmlal_s16(vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v183.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v182.i8);
    v791 = vmlal_high_s16(vmull_high_s16(v179, v183), v180, v182);
    v184 = vqsubq_s16(v171, v162);
    v185 = vqsubq_s16(v177, v168);
    v186 = vqsubq_s16(v178, v167);
    v187 = vqsubq_s16(v172, v161);
    v188 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v848.i8);
    v189 = vmlal_high_s16(vmull_high_s16(v184, v847), v187, v848);
    v190 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v680.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v847.i8);
    v191 = vmlal_high_s16(vmull_high_s16(v184, v680), v187, v847);
    v192 = vrshrn_high_n_s32(vrshrn_n_s32(v188, 0xDuLL), v189, 0xDuLL);
    v193 = vrshrn_high_n_s32(vrshrn_n_s32(v190, 0xDuLL), v191, 0xDuLL);
    v194 = vqsubq_s16(v185, v193);
    v195 = vqsubq_s16(v186, v192);
    v196 = vdupq_n_s16(0x1D41u);
    v197 = vdupq_n_s16(0xCF8u);
    v790 = vmlal_s16(vmull_s16(*(int16x4_t *)v194.i8, *(int16x4_t *)v197.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v196.i8);
    v789 = vmlal_high_s16(vmull_high_s16(v194, v197), v195, v196);
    v198 = vdupq_n_s16(0xE2BFu);
    v788 = vmlal_s16(vmull_s16(*(int16x4_t *)v194.i8, *(int16x4_t *)v198.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v197.i8);
    v787 = vmlal_high_s16(vmull_high_s16(v194, v198), v195, v197);
    v199 = vqaddq_s16(v185, v193);
    v200 = vqaddq_s16(v186, v192);
    v201 = vdupq_n_s16(0xB84u);
    v202 = vdupq_n_s16(0x1DDBu);
    v786 = vmlal_s16(vmull_s16(*(int16x4_t *)v199.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v201.i8);
    v785 = vmlal_high_s16(vmull_high_s16(v199, v202), v200, v201);
    v203 = vdupq_n_s16(0xF47Cu);
    v784 = vmlal_s16(vmull_s16(*(int16x4_t *)v199.i8, *(int16x4_t *)v203.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v202.i8);
    v783 = vmlal_high_s16(vmull_high_s16(v199, v203), v200, v202);
    v204 = vqsubq_s16(v163, v146);
    v205 = vqsubq_s16(v779, v150);
    v206 = vqsubq_s16(v169, v154);
    v207 = vqsubq_s16(v175, v158);
    v208 = vqsubq_s16(v176, v157);
    v209 = vqsubq_s16(v170, v153);
    v210 = vqsubq_s16(v781, v149);
    v211 = vqsubq_s16(v164, v145);
    v212 = vmlal_s16(vmull_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v886.i8);
    v213 = vmlal_high_s16(vmull_high_s16(v204, v885), v211, v886);
    v214 = vmlal_s16(vmull_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v851.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v885.i8);
    v215 = vmlal_high_s16(vmull_high_s16(v204, v851), v211, v885);
    v216 = vrshrn_high_n_s32(vrshrn_n_s32(v212, 0xDuLL), v213, 0xDuLL);
    v217 = vrshrn_high_n_s32(vrshrn_n_s32(v214, 0xDuLL), v215, 0xDuLL);
    v218 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v886.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v205, v885), v210, v886), 0xDuLL);
    v219 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v851.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v885.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v205, v851), v210, v885), 0xDuLL);
    v220 = vqsubq_s16(v206, v219);
    v221 = vqsubq_s16(v209, v218);
    v222 = vmlal_s16(vmull_s16(*(int16x4_t *)v220.i8, *(int16x4_t *)v845.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v846.i8);
    v223 = vmlal_high_s16(vmull_high_s16(v220, v845), v221, v846);
    v224 = vmlal_s16(vmull_s16(*(int16x4_t *)v220.i8, *(int16x4_t *)v844.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v845.i8);
    v225 = vmlal_high_s16(vmull_high_s16(v220, v844), v221, v845);
    v226 = vrshrn_high_n_s32(vrshrn_n_s32(v222, 0xDuLL), v223, 0xDuLL);
    v227 = vrshrn_high_n_s32(vrshrn_n_s32(v224, 0xDuLL), v225, 0xDuLL);
    v228 = vqsubq_s16(v207, v217);
    v229 = vqsubq_s16(v208, v216);
    v230 = vqaddq_s16(v228, v227);
    v231 = vqaddq_s16(v229, v226);
    v232 = vdupq_n_s16(0x1F39u);
    v233 = vdupq_n_s16(0x703u);
    v782 = vmlal_s16(vmull_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v233.i8), *(int16x4_t *)v231.i8, *(int16x4_t *)v232.i8);
    v780 = vmlal_high_s16(vmull_high_s16(v230, v233), v231, v232);
    v234 = vdupq_n_s16(0xE0C7u);
    v778 = vmlal_s16(vmull_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v234.i8), *(int16x4_t *)v231.i8, *(int16x4_t *)v233.i8);
    v777 = vmlal_high_s16(vmull_high_s16(v230, v234), v231, v233);
    v235 = vqsubq_s16(v228, v227);
    v236 = vqsubq_s16(v229, v226);
    v237 = vdupq_n_s16(0x111Fu);
    v238 = vdupq_n_s16(0x1B09u);
    v776 = vmlal_s16(vmull_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v238.i8), *(int16x4_t *)v236.i8, *(int16x4_t *)v237.i8);
    v775 = vmlal_high_s16(vmull_high_s16(v235, v238), v236, v237);
    v239 = vdupq_n_s16(0xEEE1u);
    v774 = vmlal_s16(vmull_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v239.i8), *(int16x4_t *)v236.i8, *(int16x4_t *)v238.i8);
    v773 = vmlal_high_s16(vmull_high_s16(v235, v239), v236, v238);
    v240 = vqaddq_s16(v206, v219);
    v241 = vqaddq_s16(v207, v217);
    v242 = vqaddq_s16(v208, v216);
    v243 = vqaddq_s16(v209, v218);
    v244 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v844.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v845.i8);
    v245 = vmlal_high_s16(vmull_high_s16(v240, v844), v243, v845);
    v246 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v679.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v844.i8);
    v247 = vmlal_high_s16(vmull_high_s16(v240, v679), v243, v844);
    v248 = vrshrn_high_n_s32(vrshrn_n_s32(v244, 0xDuLL), v245, 0xDuLL);
    v249 = vrshrn_high_n_s32(vrshrn_n_s32(v246, 0xDuLL), v247, 0xDuLL);
    v250 = vqsubq_s16(v241, v249);
    v251 = vqsubq_s16(v242, v248);
    v252 = vdupq_n_s16(0x1A2Au);
    v253 = vdupq_n_s16(0x126Du);
    v772 = vmlal_s16(vmull_s16(*(int16x4_t *)v250.i8, *(int16x4_t *)v253.i8), *(int16x4_t *)v251.i8, *(int16x4_t *)v252.i8);
    v771 = vmlal_high_s16(vmull_high_s16(v250, v253), v251, v252);
    v254 = vdupq_n_s16(0xE5D6u);
    v770 = vmlal_s16(vmull_s16(*(int16x4_t *)v250.i8, *(int16x4_t *)v254.i8), *(int16x4_t *)v251.i8, *(int16x4_t *)v253.i8);
    v769 = vmlal_high_s16(vmull_high_s16(v250, v254), v251, v253);
    v255 = vqaddq_s16(v241, v249);
    v256 = vqaddq_s16(v242, v248);
    v257 = vdupq_n_s16(0x579u);
    v258 = vdupq_n_s16(0x1F87u);
    v768 = vmlal_s16(vmull_s16(*(int16x4_t *)v255.i8, *(int16x4_t *)v258.i8), *(int16x4_t *)v256.i8, *(int16x4_t *)v257.i8);
    v767 = vmlal_high_s16(vmull_high_s16(v255, v258), v256, v257);
    v259 = vdupq_n_s16(0xFA87u);
    v757 = vmlal_high_s16(vmull_high_s16(v255, v259), v256, v258);
    v758 = vmlal_s16(vmull_s16(*(int16x4_t *)v255.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v256.i8, *(int16x4_t *)v258.i8);
    v260 = vqsubq_s16(v862, v739);
    v261 = vqsubq_s16(v866, v732);
    v262 = vqsubq_s16(v743, v728);
    v263 = vqsubq_s16(v746, v688);
    v744 = vqsubq_s16(v870, v140);
    v747 = vqsubq_s16(v864, v686);
    v264 = vqsubq_s16(v873, v690);
    v265 = vqsubq_s16(v876, v142);
    v733 = vqsubq_s16(v858, v856);
    v266 = vqsubq_s16(v868, v692);
    v267 = vqsubq_s16(v730, v687);
    v268 = vqsubq_s16(v860, v854);
    v269 = vqsubq_s16(v753, v722);
    v270 = vqsubq_s16(v755, v735);
    v271 = vqsubq_s16(v751, v741);
    v272 = vqsubq_s16(v737, v749);
    v273 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v272.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v260, v887), v272, v883), 0xDuLL);
    v274 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v272.i8, *(int16x4_t *)v887.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v260, v882), v272, v887), 0xDuLL);
    v275 = vmlal_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v883.i8);
    v276 = vmlal_high_s16(vmull_high_s16(v261, v887), v271, v883);
    v277 = vmlal_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v887.i8);
    v278 = vmlal_high_s16(vmull_high_s16(v261, v882), v271, v887);
    v279 = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xDuLL), v276, 0xDuLL);
    v280 = vrshrn_high_n_s32(vrshrn_n_s32(v277, 0xDuLL), v278, 0xDuLL);
    v281 = vmlal_s16(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v887.i8);
    v282 = vmlal_high_s16(vmull_high_s16(v262, v882), v270, v887);
    v283 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v262, v887), v270, v883), 0xDuLL);
    v284 = vrshrn_high_n_s32(vrshrn_n_s32(v281, 0xDuLL), v282, 0xDuLL);
    v285 = vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v887.i8);
    v286 = vmlal_high_s16(vmull_high_s16(v263, v882), v269, v887);
    v287 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v263, v887), v269, v883), 0xDuLL);
    v288 = vrshrn_high_n_s32(vrshrn_n_s32(v285, 0xDuLL), v286, 0xDuLL);
    v289 = vqsubq_s16(v747, v284);
    v290 = vqsubq_s16(v267, v283);
    v291 = vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v879.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v880.i8);
    v292 = vmlal_high_s16(vmull_high_s16(v289, v879), v290, v880);
    v293 = vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v879.i8);
    v294 = vmlal_high_s16(vmull_high_s16(v289, v878), v290, v879);
    v295 = vrshrn_high_n_s32(vrshrn_n_s32(v291, 0xDuLL), v292, 0xDuLL);
    v296 = vrshrn_high_n_s32(vrshrn_n_s32(v293, 0xDuLL), v294, 0xDuLL);
    v297 = vqsubq_s16(v744, v288);
    v298 = vqsubq_s16(v268, v287);
    v299 = vmlal_s16(vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v879.i8), *(int16x4_t *)v298.i8, *(int16x4_t *)v880.i8);
    v300 = vmlal_high_s16(vmull_high_s16(v297, v879), v298, v880);
    v301 = vmlal_s16(vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v298.i8, *(int16x4_t *)v879.i8);
    v302 = vmlal_high_s16(vmull_high_s16(v297, v878), v298, v879);
    v303 = vrshrn_high_n_s32(vrshrn_n_s32(v299, 0xDuLL), v300, 0xDuLL);
    v304 = vrshrn_high_n_s32(vrshrn_n_s32(v301, 0xDuLL), v302, 0xDuLL);
    v305 = vqsubq_s16(v264, v280);
    v306 = vqsubq_s16(v266, v279);
    v307 = vqaddq_s16(v305, v296);
    v308 = vqaddq_s16(v306, v295);
    v309 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v685.i8), *(int16x4_t *)v308.i8, *(int16x4_t *)v843.i8);
    v310 = vmlal_high_s16(vmull_high_s16(v307, v685), v308, v843);
    v311 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v684.i8), *(int16x4_t *)v308.i8, *(int16x4_t *)v685.i8);
    v312 = vmlal_high_s16(vmull_high_s16(v307, v684), v308, v685);
    v313 = vrshrn_high_n_s32(vrshrn_n_s32(v309, 0xDuLL), v310, 0xDuLL);
    v314 = vrshrn_high_n_s32(vrshrn_n_s32(v311, 0xDuLL), v312, 0xDuLL);
    v315 = vqsubq_s16(v265, v274);
    v316 = vqsubq_s16(v733, v273);
    v317 = vqaddq_s16(v315, v304);
    v318 = vqaddq_s16(v316, v303);
    v319 = vqaddq_s16(v317, v314);
    v320 = vqaddq_s16(v318, v313);
    v321 = vdupq_n_s16(0x1FC2u);
    v322 = vdupq_n_s16(0x3EBu);
    v877 = vmlal_s16(vmull_s16(*(int16x4_t *)v319.i8, *(int16x4_t *)v322.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v321.i8);
    v874 = vmlal_high_s16(vmull_high_s16(v319, v322), v320, v321);
    v323 = vdupq_n_s16(0xE03Eu);
    v871 = vmlal_s16(vmull_s16(*(int16x4_t *)v319.i8, *(int16x4_t *)v323.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v322.i8);
    v869 = vmlal_high_s16(vmull_high_s16(v319, v323), v320, v322);
    v324 = vqsubq_s16(v317, v314);
    v325 = vqsubq_s16(v318, v313);
    v326 = vdupq_n_s16(0x13B0u);
    v327 = vdupq_n_s16(0x193Au);
    v740 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v327.i8), *(int16x4_t *)v325.i8, *(int16x4_t *)v326.i8);
    v867 = vmlal_high_s16(vmull_high_s16(v324, v327), v325, v326);
    v328 = vdupq_n_s16(0xEC50u);
    v863 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v328.i8), *(int16x4_t *)v325.i8, *(int16x4_t *)v327.i8);
    v865 = vmlal_high_s16(vmull_high_s16(v324, v328), v325, v327);
    v329 = vqsubq_s16(v305, v296);
    v330 = vqsubq_s16(v315, v304);
    v331 = vqsubq_s16(v316, v303);
    v332 = vqsubq_s16(v306, v295);
    v333 = vmlal_s16(vmull_s16(*(int16x4_t *)v329.i8, *(int16x4_t *)v684.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v685.i8);
    v334 = vmlal_high_s16(vmull_high_s16(v329, v684), v332, v685);
    v335 = vmlal_s16(vmull_s16(*(int16x4_t *)v329.i8, *(int16x4_t *)v678.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v684.i8);
    v336 = vmlal_high_s16(vmull_high_s16(v329, v678), v332, v684);
    v337 = vrshrn_high_n_s32(vrshrn_n_s32(v333, 0xDuLL), v334, 0xDuLL);
    v338 = vrshrn_high_n_s32(vrshrn_n_s32(v335, 0xDuLL), v336, 0xDuLL);
    v339 = vqsubq_s16(v330, v338);
    v340 = vqsubq_s16(v331, v337);
    v341 = vdupq_n_s16(0x1BD8u);
    v342 = vdupq_n_s16(0xFC6u);
    v861 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v342.i8), *(int16x4_t *)v340.i8, *(int16x4_t *)v341.i8);
    v859 = vmlal_high_s16(vmull_high_s16(v339, v342), v340, v341);
    v343 = vdupq_n_s16(0xE428u);
    v855 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v343.i8), *(int16x4_t *)v340.i8, *(int16x4_t *)v342.i8);
    v857 = vmlal_high_s16(vmull_high_s16(v339, v343), v340, v342);
    v344 = vqaddq_s16(v330, v338);
    v345 = vqaddq_s16(v331, v337);
    v346 = vdupq_n_s16(0x889u);
    v347 = vdupq_n_s16(0x1ED7u);
    v756 = vmlal_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v347.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v346.i8);
    v754 = vmlal_high_s16(vmull_high_s16(v344, v347), v345, v346);
    v348 = vdupq_n_s16(0xF777u);
    v752 = vmlal_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v348.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v347.i8);
    v738 = vmlal_high_s16(vmull_high_s16(v344, v348), v345, v347);
    v349 = vqaddq_s16(v744, v288);
    v350 = vqaddq_s16(v747, v284);
    v351 = vqaddq_s16(v264, v280);
    v352 = vqaddq_s16(v265, v274);
    v353 = vqaddq_s16(v733, v273);
    v354 = vqaddq_s16(v266, v279);
    v355 = vqaddq_s16(v267, v283);
    v356 = vqaddq_s16(v268, v287);
    v357 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v879.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v878), v356, v879), 0xDuLL);
    v358 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v878.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v850), v356, v878), 0xDuLL);
    v359 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v879.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v350, v878), v355, v879), 0xDuLL);
    v360 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v878.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v350, v850), v355, v878), 0xDuLL);
    v361 = vqsubq_s16(v351, v360);
    v362 = vqsubq_s16(v354, v359);
    v363 = vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v681.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v682.i8);
    v364 = vmlal_high_s16(vmull_high_s16(v361, v681), v362, v682);
    v365 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v682.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v683.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v361, v682), v362, v683), 0xDuLL);
    v366 = vrshrn_high_n_s32(vrshrn_n_s32(v363, 0xDuLL), v364, 0xDuLL);
    v367 = vqsubq_s16(v352, v358);
    v368 = vqsubq_s16(v353, v357);
    v369 = vqsubq_s16(v367, v366);
    v370 = vqsubq_s16(v368, v365);
    v371 = vdupq_n_s16(0xE63u);
    v372 = vdupq_n_s16(0x1C95u);
    v750 = vmlal_s16(vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v372.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v371.i8);
    v748 = vmlal_high_s16(vmull_high_s16(v369, v372), v370, v371);
    v373 = vdupq_n_s16(0xF19Du);
    v742 = vmlal_high_s16(vmull_high_s16(v369, v373), v370, v372);
    v745 = vmlal_s16(vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v373.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v372.i8);
    v374 = vqaddq_s16(v351, v360);
    v375 = vqaddq_s16(v352, v358);
    v376 = vqaddq_s16(v353, v357);
    v377 = vqaddq_s16(v354, v359);
    v378 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v681.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v682.i8);
    v379 = vmlal_high_s16(vmull_high_s16(v374, v681), v377, v682);
    v380 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v677.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v681.i8);
    v381 = vmlal_high_s16(vmull_high_s16(v374, v677), v377, v681);
    v382 = vrshrn_high_n_s32(vrshrn_n_s32(v378, 0xDuLL), v379, 0xDuLL);
    v383 = vrshrn_high_n_s32(vrshrn_n_s32(v380, 0xDuLL), v381, 0xDuLL);
    v384 = vqsubq_s16(v375, v383);
    v385 = vqsubq_s16(v376, v382);
    v386 = vdupq_n_s16(0x183Bu);
    v387 = vdupq_n_s16(0x14E7u);
    v736 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v387.i8), *(int16x4_t *)v385.i8, *(int16x4_t *)v386.i8);
    v734 = vmlal_high_s16(vmull_high_s16(v384, v387), v385, v386);
    v388 = vdupq_n_s16(0xE7C5u);
    v729 = vmlal_high_s16(vmull_high_s16(v384, v388), v385, v387);
    v731 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v388.i8), *(int16x4_t *)v385.i8, *(int16x4_t *)v387.i8);
    v389 = vqaddq_s16(v375, v383);
    v390 = vqaddq_s16(v376, v382);
    v391 = vdupq_n_s16(0x25Bu);
    v392 = vdupq_n_s16(0x1FEAu);
    v693 = vmlal_s16(vmull_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v390.i8, *(int16x4_t *)v391.i8);
    v723 = vmlal_high_s16(vmull_high_s16(v389, v392), v390, v391);
    v393 = vdupq_n_s16(0xFDA5u);
    v689 = vmlal_high_s16(vmull_high_s16(v389, v393), v390, v392);
    v691 = vmlal_s16(vmull_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v393.i8), *(int16x4_t *)v390.i8, *(int16x4_t *)v392.i8);
    v394 = vqaddq_s16(v764, v763);
    v395 = vqaddq_s16(v798, v797);
    v396 = vqaddq_s16(v813, v812);
    v397 = vqaddq_s16(v805, v803);
    v398 = vqaddq_s16(v829, v830);
    v399 = vqaddq_s16(v832, v834);
    v400 = vqaddq_s16(v826, v824);
    v401 = vqaddq_s16(v821, v817);
    v402 = vqaddq_s16(v823, v819);
    v403 = vqaddq_s16(v828, v827);
    v404 = vqaddq_s16(v836, v837);
    v405 = vqaddq_s16(v839, v841);
    v406 = vqaddq_s16(v808, v807);
    v407 = vqaddq_s16(v815, v814);
    v408 = vqaddq_s16(v801, v800);
    v409 = vqaddq_s16(v766, v765);
    v410 = vqaddq_s16(v401, v402);
    v411 = vqsubq_s16(v401, v402);
    v412 = vqaddq_s16(v400, v403);
    v413 = vqsubq_s16(v400, v403);
    v414 = vqaddq_s16(v399, v404);
    v415 = vqsubq_s16(v399, v404);
    v416 = vqaddq_s16(v398, v405);
    v417 = vqsubq_s16(v398, v405);
    v418 = vqaddq_s16(v397, v406);
    v419 = vqsubq_s16(v397, v406);
    v420 = vqaddq_s16(v396, v407);
    v421 = vqsubq_s16(v396, v407);
    v422 = vqaddq_s16(v395, v408);
    v423 = vqsubq_s16(v395, v408);
    v424 = vqaddq_s16(v394, v409);
    v425 = vqsubq_s16(v394, v409);
    v426 = vqaddq_s16(v418, v416);
    v427 = vqsubq_s16(v418, v416);
    v428 = vqaddq_s16(v420, v414);
    v429 = vqsubq_s16(v420, v414);
    v430 = vqaddq_s16(v422, v412);
    v431 = vqsubq_s16(v422, v412);
    v432 = vqaddq_s16(v424, v410);
    v433 = vqsubq_s16(v424, v410);
    v434 = vmlal_s16(vmull_s16(*(int16x4_t *)v415.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v421.i8, *(int16x4_t *)v853.i8);
    v435 = vmlal_high_s16(vmull_high_s16(v415, v853), v421, v853);
    v436 = vmlal_s16(vmull_s16(*(int16x4_t *)v415.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v421.i8, *(int16x4_t *)v853.i8);
    v437 = vmlal_high_s16(vmull_high_s16(v415, v852), v421, v853);
    v438 = vrshrn_high_n_s32(vrshrn_n_s32(v434, 0xDuLL), v435, 0xDuLL);
    v439 = vrshrn_high_n_s32(vrshrn_n_s32(v436, 0xDuLL), v437, 0xDuLL);
    v440 = vmlal_s16(vmull_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v853.i8);
    v441 = vmlal_high_s16(vmull_high_s16(v417, v853), v419, v853);
    v442 = vmlal_s16(vmull_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v853.i8);
    v443 = vmlal_high_s16(vmull_high_s16(v417, v852), v419, v853);
    v444 = vrshrn_high_n_s32(vrshrn_n_s32(v440, 0xDuLL), v441, 0xDuLL);
    v445 = vrshrn_high_n_s32(vrshrn_n_s32(v442, 0xDuLL), v443, 0xDuLL);
    v446 = vqaddq_s16(v430, v428);
    v447 = vqsubq_s16(v430, v428);
    v448 = vqaddq_s16(v432, v426);
    v449 = vqsubq_s16(v432, v426);
    v450 = vmlal_s16(vmull_s16(*(int16x4_t *)v429.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v431.i8, *(int16x4_t *)v853.i8);
    v451 = vmlal_high_s16(vmull_high_s16(v429, v853), v431, v853);
    v452 = vmlal_s16(vmull_s16(*(int16x4_t *)v429.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v431.i8, *(int16x4_t *)v853.i8);
    v453 = vmlal_high_s16(vmull_high_s16(v429, v852), v431, v853);
    v454 = vrshrn_high_n_s32(vrshrn_n_s32(v450, 0xDuLL), v451, 0xDuLL);
    v455 = vrshrn_high_n_s32(vrshrn_n_s32(v452, 0xDuLL), v453, 0xDuLL);
    v456 = vqaddq_s16(v413, v439);
    v457 = vqsubq_s16(v413, v439);
    v458 = vqaddq_s16(v411, v445);
    v459 = vqsubq_s16(v411, v445);
    v460 = vqsubq_s16(v423, v438);
    v461 = vqaddq_s16(v423, v438);
    v462 = vqsubq_s16(v425, v444);
    v463 = vqaddq_s16(v425, v444);
    v835 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v853.i8), *(int16x4_t *)v446.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v853), v446, v853), 0xDuLL);
    v816 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v852.i8), *(int16x4_t *)v446.i8, *(int16x4_t *)v853.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v852), v446, v853), 0xDuLL);
    v842 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v447.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v449.i8, *(int16x4_t *)v884.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v447, v883), v449, v884), 0xDuLL);
    v825 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v447.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v449.i8, *(int16x4_t *)v883.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v447, v887), v449, v883), 0xDuLL);
    v464 = vqaddq_s16(v427, v455);
    v465 = vqsubq_s16(v427, v455);
    v466 = vqsubq_s16(v433, v454);
    v467 = vqaddq_s16(v433, v454);
    v468 = vmlal_s16(vmull_s16(*(int16x4_t *)v456.i8, *(int16x4_t *)v883.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v884.i8);
    v469 = vmlal_high_s16(vmull_high_s16(v456, v883), v461, v884);
    v470 = vmlal_s16(vmull_s16(*(int16x4_t *)v456.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v883.i8);
    v471 = vmlal_high_s16(vmull_high_s16(v456, v887), v461, v883);
    v472 = vrshrn_high_n_s32(vrshrn_n_s32(v468, 0xDuLL), v469, 0xDuLL);
    v473 = vrshrn_high_n_s32(vrshrn_n_s32(v470, 0xDuLL), v471, 0xDuLL);
    v474 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v887.i8), *(int16x4_t *)v460.i8, *(int16x4_t *)v883.i8);
    v475 = vmlal_high_s16(vmull_high_s16(v457, v887), v460, v883);
    v476 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v882.i8), *(int16x4_t *)v460.i8, *(int16x4_t *)v887.i8);
    v477 = vmlal_high_s16(vmull_high_s16(v457, v882), v460, v887);
    v478 = vrshrn_high_n_s32(vrshrn_n_s32(v474, 0xDuLL), v475, 0xDuLL);
    v479 = vrshrn_high_n_s32(vrshrn_n_s32(v476, 0xDuLL), v477, 0xDuLL);
    v833 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v464.i8, *(int16x4_t *)v886.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v881.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v464, v886), v467, v881), 0xDuLL);
    v818 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v464.i8, *(int16x4_t *)v885.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v886.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v464, v885), v467, v886), 0xDuLL);
    v806 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v879.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v880.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v879), v466, v880), 0xDuLL);
    v840 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v878.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v879.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v878), v466, v879), 0xDuLL);
    v480 = vqaddq_s16(v458, v473);
    v481 = vqsubq_s16(v458, v473);
    v482 = vqsubq_s16(v459, v479);
    v483 = vqaddq_s16(v459, v479);
    v484 = vqaddq_s16(v462, v478);
    v485 = vqsubq_s16(v462, v478);
    v486 = vqsubq_s16(v463, v472);
    v487 = vqaddq_s16(v463, v472);
    v820 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v848.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v849.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v480, v848), v487, v849), 0xDuLL);
    v809 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v848.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v480, v847), v487, v848), 0xDuLL);
    v488 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v845.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v846.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v845), v486, v846), 0xDuLL);
    v838 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v844.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v845.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v844), v486, v845), 0xDuLL);
    v831 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v685.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v843.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v685), v485, v843), 0xDuLL);
    v489 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v684.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v685.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v684), v485, v685), 0xDuLL);
    v799 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v682.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v683.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v682), v484, v683), 0xDuLL);
    v822 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v681.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v682.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v681), v484, v682), 0xDuLL);
    v490 = vqaddq_s16(v762, v761);
    v491 = vqaddq_s16(v759, v760);
    v492 = vdupq_n_s16(0xE00Au);
    v493 = vdupq_n_s16(0x192u);
    v804 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v493.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v676.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v493), v491, v676), 0xDuLL);
    v802 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v492.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v493.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v492), v491, v493), 0xDuLL);
    v494 = vqaddq_s16(v795, v810);
    v495 = (int8x16_t)vqaddq_s16(v367, v366);
    v496 = (int8x16_t)vqaddq_s16(v368, v365);
    v497 = vqaddq_s16(v796, v811);
    v498 = vdupq_n_s16(0x1FFEu);
    v499 = vmlal_s16(vmull_s16(*(int16x4_t *)v494.i8, (int16x4_t)0xC900C900C900C9), *(int16x4_t *)v497.i8, *(int16x4_t *)v498.i8);
    v491.i64[0] = 0xC900C900C900C9;
    v491.i64[1] = 0xC900C900C900C9;
    v500 = vmlal_high_s16(vmull_high_s16(v494, v491), v497, v498);
    v501 = vdupq_n_s16(0xE002u);
    v502 = vdupq_n_s16(0x1E63u);
    v503 = vmlal_s16(vmull_s16(*(int16x4_t *)v495.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), *(int16x4_t *)v496.i8, *(int16x4_t *)v502.i8);
    v504 = vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v495, v495, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v496, v502);
    v505 = vdupq_n_s16(0xE19Du);
    v985 = vrshrq_n_s16(v816, 2uLL);
    v986 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v794, 0xDuLL), v793, 0xDuLL), 2uLL);
    v987 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v717, 0xDuLL), v716, 0xDuLL), 2uLL);
    v988 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v731, 0xDuLL), v729, 0xDuLL), 2uLL);
    v989 = vrshrq_n_s16(v488, 2uLL);
    v990 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v740, 0xDuLL), v867, 0xDuLL), 2uLL);
    v991 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v699, 0xDuLL), v698, 0xDuLL), 2uLL);
    v992 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v770, 0xDuLL), v769, 0xDuLL), 2uLL);
    v993 = vrshrq_n_s16(v806, 2uLL);
    v994 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v776, 0xDuLL), v775, 0xDuLL), 2uLL);
    v995 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v705, 0xDuLL), v704, 0xDuLL), 2uLL);
    v996 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v855, 0xDuLL), v857, 0xDuLL), 2uLL);
    v997 = vrshrq_n_s16(v489, 2uLL);
    v998 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v750, 0xDuLL), v748, 0xDuLL), 2uLL);
    v999 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v709, 0xDuLL), v708, 0xDuLL), 2uLL);
    v1000 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v788, 0xDuLL), v787, 0xDuLL), 2uLL);
    v1001 = vrshrq_n_s16(v825, 2uLL);
    v1002 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v786, 0xDuLL), v785, 0xDuLL), 2uLL);
    v1003 = vrshrq_n_s16(v1003, 2uLL);
    v1004 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v495.i8, *(int16x4_t *)v505.i8), *(int16x4_t *)v496.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v496, v496, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v495, v505), 0xDuLL), 2uLL);
    v1005 = vrshrq_n_s16(v799, 2uLL);
    v1006 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v756, 0xDuLL), v754, 0xDuLL), 2uLL);
    v1007 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v721, 0xDuLL), v719, 0xDuLL), 2uLL);
    v1008 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v778, 0xDuLL), v777, 0xDuLL), 2uLL);
    v1009 = vrshrq_n_s16(v818, 2uLL);
    v1010 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v768, 0xDuLL), v767, 0xDuLL), 2uLL);
    v1011 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v697, 0xDuLL), v696, 0xDuLL), 2uLL);
    v1012 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v871, 0xDuLL), v869, 0xDuLL), 2uLL);
    v1013 = vrshrq_n_s16(v809, 2uLL);
    v1014 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v693, 0xDuLL), v723, 0xDuLL), 2uLL);
    v1015 = vrshrq_n_s16(v802, 2uLL);
    v1016 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v494.i8, *(int16x4_t *)v501.i8), *(int16x4_t *)v497.i8, (int16x4_t)0xC900C900C900C9), 0xDuLL), vmlal_high_s16(vmull_high_s16(v494, v501), v497, v491), 0xDuLL), 2uLL);
    v953 = vrshrq_n_s16(v835, 2uLL);
    v954 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v499, 0xDuLL), v500, 0xDuLL), 2uLL);
    v506 = (int32x4_t)vtrn1q_s16(v953, v954);
    v507 = (int32x4_t)vtrn2q_s16(v953, v954);
    v955 = vrshrq_n_s16(v804, 2uLL);
    v956 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v691, 0xDuLL), v689, 0xDuLL), 2uLL);
    v508 = (int32x4_t)vtrn1q_s16(v955, v956);
    v509 = (int32x4_t)vtrn2q_s16(v955, v956);
    v957 = vrshrq_n_s16(v820, 2uLL);
    v958 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v877, 0xDuLL), v874, 0xDuLL), 2uLL);
    v510 = (int32x4_t)vtrn1q_s16(v957, v958);
    v511 = (int32x4_t)vtrn2q_s16(v957, v958);
    v959 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v695, 0xDuLL), v694, 0xDuLL), 2uLL);
    v960 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v758, 0xDuLL), v757, 0xDuLL), 2uLL);
    v512 = (int32x4_t)vtrn1q_s16(v959, v960);
    v513 = (int32x4_t)vtrn2q_s16(v959, v960);
    v514 = (int64x2_t)vtrn1q_s32(v506, v508);
    v515 = (int64x2_t)vtrn2q_s32(v506, v508);
    v516 = (int64x2_t)vtrn1q_s32(v507, v509);
    v517 = (int64x2_t)vtrn2q_s32(v507, v509);
    v518 = (int64x2_t)vtrn1q_s32(v510, v512);
    v519 = (int64x2_t)vtrn2q_s32(v510, v512);
    v520 = (int64x2_t)vtrn1q_s32(v511, v513);
    v521 = (int64x2_t)vtrn2q_s32(v511, v513);
    v522 = vzip1q_s64(v514, v518);
    v523 = vzip2q_s64(v514, v518);
    v524 = vzip1q_s64(v516, v520);
    v525 = vzip2q_s64(v516, v520);
    v526 = vzip1q_s64(v515, v519);
    v527 = vzip2q_s64(v515, v519);
    v528 = vzip1q_s64(v517, v521);
    v529 = vzip2q_s64(v517, v521);
    v530 = (int64x2_t *)&v952[128 * v7];
    *v530 = v522;
    v530[1] = v524;
    v530[2] = v526;
    v530[3] = v528;
    v530[4] = v523;
    v530[5] = v525;
    v530[6] = v527;
    v531 = vrshrq_n_s16(v833, 2uLL);
    v532 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v782, 0xDuLL), v780, 0xDuLL), 2uLL);
    v961 = v531;
    v962 = v532;
    v533 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v727, 0xDuLL), v725, 0xDuLL), 2uLL);
    v534 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v752, 0xDuLL), v738, 0xDuLL), 2uLL);
    v963 = v533;
    v964 = v534;
    v535 = vrshrq_n_s16(v822, 2uLL);
    v536 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v503, 0xDuLL), v504, 0xDuLL), 2uLL);
    v965 = v535;
    v966 = v536;
    v537 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v707, 0xDuLL), v706, 0xDuLL), 2uLL);
    v538 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v784, 0xDuLL), v783, 0xDuLL), 2uLL);
    v967 = v537;
    v968 = v538;
    v530[7] = v529;
    v539 = (int32x4_t)vtrn1q_s16(v531, v532);
    v540 = (int32x4_t)vtrn2q_s16(v531, v532);
    v541 = (int32x4_t)vtrn1q_s16(v533, v534);
    v542 = (int32x4_t)vtrn2q_s16(v533, v534);
    v543 = (int32x4_t)vtrn1q_s16(v535, v536);
    v544 = (int32x4_t)vtrn2q_s16(v535, v536);
    v545 = (int32x4_t)vtrn1q_s16(v537, v538);
    v546 = (int32x4_t)vtrn2q_s16(v537, v538);
    v547 = (int64x2_t)vtrn1q_s32(v539, v541);
    v548 = (int64x2_t)vtrn2q_s32(v539, v541);
    v549 = (int64x2_t)vtrn1q_s32(v540, v542);
    v550 = (int64x2_t)vtrn2q_s32(v540, v542);
    v551 = (int64x2_t)vtrn1q_s32(v543, v545);
    v552 = (int64x2_t)vtrn2q_s32(v543, v545);
    v553 = (int64x2_t)vtrn1q_s32(v544, v546);
    v554 = (int64x2_t)vtrn2q_s32(v544, v546);
    v555 = vzip1q_s64(v547, v551);
    v556 = vzip2q_s64(v547, v551);
    v557 = vzip1q_s64(v549, v553);
    v558 = vzip2q_s64(v549, v553);
    v559 = vzip1q_s64(v548, v552);
    v560 = vzip2q_s64(v548, v552);
    v561 = vzip1q_s64(v550, v554);
    v562 = vzip2q_s64(v550, v554);
    v530[64] = v555;
    v530[65] = v557;
    v530[66] = v559;
    v530[67] = v561;
    v530[68] = v556;
    v530[69] = v558;
    v530[70] = v560;
    v563 = vrshrq_n_s16(v842, 2uLL);
    v564 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v790, 0xDuLL), v789, 0xDuLL), 2uLL);
    v969 = v563;
    v970 = v564;
    v565 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v713, 0xDuLL), v711, 0xDuLL), 2uLL);
    v566 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v745, 0xDuLL), v742, 0xDuLL), 2uLL);
    v971 = v565;
    v972 = v566;
    v567 = vrshrq_n_s16(v831, 2uLL);
    v568 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v861, 0xDuLL), v859, 0xDuLL), 2uLL);
    v973 = v567;
    v974 = v568;
    v569 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v703, 0xDuLL), v702, 0xDuLL), 2uLL);
    v570 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v774, 0xDuLL), v773, 0xDuLL), 2uLL);
    v975 = v569;
    v976 = v570;
    v530[71] = v562;
    v571 = (int32x4_t)vtrn1q_s16(v563, v564);
    v572 = (int32x4_t)vtrn2q_s16(v563, v564);
    v573 = (int32x4_t)vtrn1q_s16(v565, v566);
    v574 = (int32x4_t)vtrn2q_s16(v565, v566);
    v575 = (int32x4_t)vtrn1q_s16(v567, v568);
    v576 = (int32x4_t)vtrn2q_s16(v567, v568);
    v577 = (int32x4_t)vtrn1q_s16(v569, v570);
    v578 = (int32x4_t)vtrn2q_s16(v569, v570);
    v579 = (int64x2_t)vtrn1q_s32(v571, v573);
    v580 = (int64x2_t)vtrn2q_s32(v571, v573);
    v581 = (int64x2_t)vtrn1q_s32(v572, v574);
    v582 = (int64x2_t)vtrn2q_s32(v572, v574);
    v583 = (int64x2_t)vtrn1q_s32(v575, v577);
    v584 = (int64x2_t)vtrn2q_s32(v575, v577);
    v585 = (int64x2_t)vtrn1q_s32(v576, v578);
    v586 = (int64x2_t)vtrn2q_s32(v576, v578);
    v587 = vzip1q_s64(v579, v583);
    v588 = vzip2q_s64(v579, v583);
    v589 = vzip1q_s64(v581, v585);
    v590 = vzip2q_s64(v581, v585);
    v530[128] = v587;
    v591 = vzip1q_s64(v580, v584);
    v592 = vzip2q_s64(v580, v584);
    v530[129] = v589;
    v593 = vzip1q_s64(v582, v586);
    v594 = vzip2q_s64(v582, v586);
    v530[130] = v591;
    v595 = vrshrq_n_s16(v840, 2uLL);
    v596 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v772, 0xDuLL), v771, 0xDuLL), 2uLL);
    v977 = v595;
    v978 = v596;
    v597 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v701, 0xDuLL), v700, 0xDuLL), 2uLL);
    v598 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v863, 0xDuLL), v865, 0xDuLL), 2uLL);
    v979 = v597;
    v980 = v598;
    v599 = vrshrq_n_s16(v838, 2uLL);
    v600 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v736, 0xDuLL), v734, 0xDuLL), 2uLL);
    v981 = v599;
    v982 = v600;
    v601 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v715, 0xDuLL), v714, 0xDuLL), 2uLL);
    v602 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v792, 0xDuLL), v791, 0xDuLL), 2uLL);
    v983 = v601;
    v984 = v602;
    v530[131] = v593;
    v530[132] = v588;
    v530[133] = v590;
    v530[134] = v592;
    v530[135] = v594;
    v603 = (int32x4_t)vtrn1q_s16(v595, v596);
    v604 = (int32x4_t)vtrn2q_s16(v595, v596);
    v605 = (int32x4_t)vtrn1q_s16(v597, v598);
    v606 = (int32x4_t)vtrn2q_s16(v597, v598);
    v607 = (int32x4_t)vtrn1q_s16(v599, v600);
    v608 = (int32x4_t)vtrn2q_s16(v599, v600);
    v609 = (int32x4_t)vtrn1q_s16(v601, v602);
    v610 = (int32x4_t)vtrn2q_s16(v601, v602);
    v611 = (int64x2_t)vtrn1q_s32(v603, v605);
    v612 = (int64x2_t)vtrn1q_s32(v604, v606);
    v613 = (int64x2_t)vtrn1q_s32(v607, v609);
    v614 = (int64x2_t)vtrn1q_s32(v608, v610);
    v530[192] = vzip1q_s64(v611, v613);
    v530[193] = vzip1q_s64(v612, v614);
    v615 = (int64x2_t)vtrn2q_s32(v603, v605);
    v616 = (int64x2_t)vtrn2q_s32(v607, v609);
    v530[194] = vzip1q_s64(v615, v616);
    v617 = (int64x2_t)vtrn2q_s32(v604, v606);
    v618 = (int64x2_t)vtrn2q_s32(v608, v610);
    v530[195] = vzip1q_s64(v617, v618);
    v530[196] = vzip2q_s64(v611, v613);
    v530[197] = vzip2q_s64(v612, v614);
    v530[198] = vzip2q_s64(v615, v616);
    v530[199] = vzip2q_s64(v617, v618);
    ++v7;
    ++v6;
  }
  while (v7 != 8);
  v619 = 0;
  v620 = v952;
  do
  {
    for (i = 0; i != 1024; i += 16)
    {
      v622 = *(int16x8_t *)&v620[i];
      *(int32x4_t *)((char *)&v920 + i) = vmovl_s16(*(int16x4_t *)v622.i8);
      *(int32x4_t *)((char *)&v888 + i) = vmovl_high_s16(v622);
    }
    fdct64_neon(&v920, &v920, 10);
    fdct64_neon(&v888, &v888, 10);
    v623 = vrshrq_n_s32(v921, 2uLL);
    v920 = vrshrq_n_s32(v920, 2uLL);
    v921 = v623;
    v624 = vrshrq_n_s32(v888, 2uLL);
    v625 = vrshrq_n_s32(v889, 2uLL);
    v888 = v624;
    v626 = (int32x4_t *)(v5 + 32 * v619);
    *v626 = v920;
    v626[1] = v624;
    v627 = vrshrq_n_s32(v922, 2uLL);
    v628 = vrshrq_n_s32(v923, 2uLL);
    v922 = v627;
    v923 = v628;
    v889 = v625;
    v626[8] = v623;
    v626[9] = v625;
    v629 = vrshrq_n_s32(v890, 2uLL);
    v630 = vrshrq_n_s32(v891, 2uLL);
    v890 = v629;
    v626[16] = v627;
    v626[17] = v629;
    v631 = vrshrq_n_s32(v924, 2uLL);
    v632 = vrshrq_n_s32(v925, 2uLL);
    v924 = v631;
    v925 = v632;
    v891 = v630;
    v626[24] = v628;
    v626[25] = v630;
    v633 = vrshrq_n_s32(v892, 2uLL);
    v634 = vrshrq_n_s32(v893, 2uLL);
    v892 = v633;
    v626[32] = v631;
    v626[33] = v633;
    v635 = vrshrq_n_s32(v926, 2uLL);
    v636 = vrshrq_n_s32(v927, 2uLL);
    v893 = v634;
    v626[40] = v632;
    v626[41] = v634;
    v637 = v895;
    v638 = vrshrq_n_s32(v894, 2uLL);
    v626[48] = v635;
    v626[49] = v638;
    v926 = v635;
    v927 = v636;
    v639 = vrshrq_n_s32(v637, 2uLL);
    v894 = v638;
    v626[56] = v636;
    v626[57] = v639;
    v640 = vrshrq_n_s32(v929, 2uLL);
    v928 = vrshrq_n_s32(v928, 2uLL);
    v929 = v640;
    v895 = v639;
    v626[64] = v928;
    v641 = vrshrq_n_s32(v897, 2uLL);
    v896 = vrshrq_n_s32(v896, 2uLL);
    v626[65] = v896;
    v626[72] = v640;
    v642 = vrshrq_n_s32(v930, 2uLL);
    v643 = vrshrq_n_s32(v931, 2uLL);
    v930 = v642;
    v931 = v643;
    v897 = v641;
    v626[73] = v641;
    v626[80] = v642;
    v644 = vrshrq_n_s32(v899, 2uLL);
    v898 = vrshrq_n_s32(v898, 2uLL);
    v626[81] = v898;
    v626[88] = v643;
    v645 = vrshrq_n_s32(v932, 2uLL);
    v646 = vrshrq_n_s32(v933, 2uLL);
    v932 = v645;
    v933 = v646;
    v899 = v644;
    v626[89] = v644;
    v626[96] = v645;
    v647 = vrshrq_n_s32(v901, 2uLL);
    v900 = vrshrq_n_s32(v900, 2uLL);
    v626[97] = v900;
    v626[104] = v646;
    v648 = vrshrq_n_s32(v934, 2uLL);
    v649 = vrshrq_n_s32(v935, 2uLL);
    v934 = v648;
    v935 = v649;
    v901 = v647;
    v626[105] = v647;
    v626[112] = v648;
    v650 = vrshrq_n_s32(v903, 2uLL);
    v902 = vrshrq_n_s32(v902, 2uLL);
    v626[113] = v902;
    v626[120] = v649;
    v651 = vrshrq_n_s32(v936, 2uLL);
    v652 = vrshrq_n_s32(v937, 2uLL);
    v936 = v651;
    v937 = v652;
    v903 = v650;
    v626[121] = v650;
    v626[128] = v651;
    v653 = vrshrq_n_s32(v905, 2uLL);
    v904 = vrshrq_n_s32(v904, 2uLL);
    v626[129] = v904;
    v626[136] = v652;
    v654 = vrshrq_n_s32(v938, 2uLL);
    v655 = vrshrq_n_s32(v939, 2uLL);
    v938 = v654;
    v939 = v655;
    v905 = v653;
    v626[137] = v653;
    v626[144] = v654;
    v656 = vrshrq_n_s32(v907, 2uLL);
    v906 = vrshrq_n_s32(v906, 2uLL);
    v626[145] = v906;
    v626[152] = v655;
    v657 = vrshrq_n_s32(v940, 2uLL);
    v658 = vrshrq_n_s32(v941, 2uLL);
    v940 = v657;
    v941 = v658;
    v907 = v656;
    v626[153] = v656;
    v626[160] = v657;
    v659 = vrshrq_n_s32(v909, 2uLL);
    v908 = vrshrq_n_s32(v908, 2uLL);
    v626[161] = v908;
    v626[168] = v658;
    v660 = vrshrq_n_s32(v942, 2uLL);
    v661 = vrshrq_n_s32(v943, 2uLL);
    v942 = v660;
    v943 = v661;
    v909 = v659;
    v626[169] = v659;
    v626[176] = v660;
    v662 = vrshrq_n_s32(v911, 2uLL);
    v910 = vrshrq_n_s32(v910, 2uLL);
    v626[177] = v910;
    v626[184] = v661;
    v663 = vrshrq_n_s32(v944, 2uLL);
    v664 = vrshrq_n_s32(v945, 2uLL);
    v944 = v663;
    v945 = v664;
    v911 = v662;
    v626[185] = v662;
    v626[192] = v663;
    v665 = vrshrq_n_s32(v913, 2uLL);
    v912 = vrshrq_n_s32(v912, 2uLL);
    v626[193] = v912;
    v626[200] = v664;
    v666 = vrshrq_n_s32(v946, 2uLL);
    v667 = vrshrq_n_s32(v947, 2uLL);
    v946 = v666;
    v947 = v667;
    v913 = v665;
    v626[201] = v665;
    v626[208] = v666;
    v668 = vrshrq_n_s32(v915, 2uLL);
    v914 = vrshrq_n_s32(v914, 2uLL);
    v626[209] = v914;
    v626[216] = v667;
    v669 = vrshrq_n_s32(v948, 2uLL);
    v670 = vrshrq_n_s32(v949, 2uLL);
    v948 = v669;
    v949 = v670;
    v915 = v668;
    v626[217] = v668;
    v626[224] = v669;
    v671 = vrshrq_n_s32(v917, 2uLL);
    v916 = vrshrq_n_s32(v916, 2uLL);
    v917 = v671;
    v626[225] = v916;
    v626[232] = v670;
    v672 = v919;
    v673 = vrshrq_n_s32(v918, 2uLL);
    v626[233] = v671;
    v626[241] = v673;
    v674 = vrshrq_n_s32(v950, 2uLL);
    v675 = vrshrq_n_s32(v951, 2uLL);
    v626[240] = v674;
    v950 = v674;
    v951 = v675;
    v626[248] = v675;
    v626[249] = vrshrq_n_s32(v672, 2uLL);
    ++v619;
    v620 += 1024;
  }
  while (v619 != 4);
}

uint64_t lowbd_fwd_txfm2d_4x8_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  uint64_t (*v6)();
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  _OWORD *v26;
  _OWORD v28[8];
  _OWORD v29[8];
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  uint64_t v38;

  v5 = 0;
  v38 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v5 = 1;
LABEL_7:
    a1 += 14 * (_DWORD)a3;
    a3 = -(int)a3;
  }
LABEL_8:
  v6 = row_rect_txfm8x4_arr[a4];
  ((void (*)(uint64_t, int16x4_t *, uint64_t, uint64_t))col_txfm4x8_arr[a4])(a1, &v30, a3, 13);
  *(int16x4_t *)v7.i8 = vrhadd_s16(v30, 0);
  *(int16x4_t *)v8.i8 = vrhadd_s16(v31, 0);
  v30 = *(int16x4_t *)v7.i8;
  v31 = *(int16x4_t *)v8.i8;
  *(int16x4_t *)v9.i8 = vrhadd_s16(v32, 0);
  *(int16x4_t *)v10.i8 = vrhadd_s16(v33, 0);
  v32 = *(int16x4_t *)v9.i8;
  v33 = *(int16x4_t *)v10.i8;
  *(int16x4_t *)v11.i8 = vrhadd_s16(v34, 0);
  *(int16x4_t *)v12.i8 = vrhadd_s16(v35, 0);
  v34 = *(int16x4_t *)v11.i8;
  v35 = *(int16x4_t *)v12.i8;
  *(int16x4_t *)v13.i8 = vrhadd_s16(v36, 0);
  v36 = *(int16x4_t *)v13.i8;
  v37 = vrhadd_s16(v37, 0);
  v14 = (int32x4_t)vzip1q_s16(v7, v8);
  v15 = (int32x4_t)vzip1q_s16(v9, v10);
  v16 = (int32x4_t)vzip1q_s16(v11, v12);
  v17 = (int32x4_t)vzip1q_s16(v13, (int16x8_t)(unint64_t)v37);
  v18 = (int64x2_t)vzip1q_s32(v14, v15);
  v19 = (int64x2_t)vzip2q_s32(v14, v15);
  v20 = (int64x2_t)vzip1q_s32(v16, v17);
  v21 = (int64x2_t)vzip2q_s32(v16, v17);
  v22 = vzip1q_s64(v18, v20);
  v23 = vzip2q_s64(v18, v20);
  v29[0] = v22;
  v29[1] = v23;
  v24 = vzip1q_s64(v19, v21);
  v25 = vzip2q_s64(v19, v21);
  v29[2] = v24;
  v29[3] = v25;
  if (v5)
  {
    v28[2] = v23;
    v28[3] = v22;
    v28[0] = v25;
    v28[1] = v24;
    v26 = v28;
  }
  else
  {
    v26 = v29;
  }
  return ((uint64_t (*)(_OWORD *, uint64_t, uint64_t, uint64_t))v6)(v26, a2, 8, 13);
}

uint64_t lowbd_fwd_txfm2d_8x4_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  uint64_t (*v6)();
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  _QWORD *v21;
  _QWORD v23[8];
  _OWORD v24[4];
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v29;

  v5 = 0;
  v29 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v5 = 1;
LABEL_7:
    a1 += 6 * (_DWORD)a3;
    a3 = -(int)a3;
  }
LABEL_8:
  v6 = row_rect_txfm4x8_arr[a4];
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))col_txfm8x4_arr[a4])(a1, &v25, a3, 13);
  v25 = vrhaddq_s16(v25, (int16x8_t)0);
  v26 = vrhaddq_s16(v26, (int16x8_t)0);
  v27 = vrhaddq_s16(v27, (int16x8_t)0);
  v28 = vrhaddq_s16(v28, (int16x8_t)0);
  v7 = (int32x4_t)vtrn1q_s16(v25, v26);
  v8 = (int32x4_t)vtrn2q_s16(v25, v26);
  v9 = (int32x4_t)vtrn1q_s16(v27, v28);
  v10 = (int32x4_t)vtrn2q_s16(v27, v28);
  v11 = (int8x16_t)vtrn1q_s32(v7, v9);
  v12 = (int8x16_t)vtrn2q_s32(v7, v9);
  v13 = (int8x16_t)vtrn1q_s32(v8, v10);
  v7.i64[0] = v11.i64[0];
  v7.i64[1] = v13.i64[0];
  v14 = (int8x16_t)vtrn2q_s32(v8, v10);
  v8.i64[0] = v12.i64[0];
  v8.i64[1] = v14.i64[0];
  v24[0] = v7;
  v24[1] = v8;
  v15 = vextq_s8(v11, v11, 8uLL).u64[0];
  v16 = vextq_s8(v13, v13, 8uLL).u64[0];
  *(_QWORD *)&v17 = v15;
  *((_QWORD *)&v17 + 1) = v16;
  v18 = vextq_s8(v12, v12, 8uLL).u64[0];
  v19 = vextq_s8(v14, v14, 8uLL).u64[0];
  *(_QWORD *)&v20 = v18;
  *((_QWORD *)&v20 + 1) = v19;
  v24[2] = v17;
  v24[3] = v20;
  if (v5)
  {
    v23[6] = v13.i64[0];
    v23[7] = v11.i64[0];
    v23[4] = v14.i64[0];
    v23[5] = v12.i64[0];
    v23[2] = v16;
    v23[3] = v15;
    v23[0] = v19;
    v23[1] = v18;
    v21 = v23;
  }
  else
  {
    v21 = v24;
  }
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v6)(v21, a2, 4, 13);
}

uint64_t lowbd_fwd_txfm2d_8x16_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  uint64_t (*v6)();
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int16x8_t *v63;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  _OWORD v73[8];
  _OWORD v74[8];
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  uint64_t v91;

  v5 = 0;
  v91 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v5 = 1;
LABEL_7:
    a1 += 30 * (_DWORD)a3;
    a3 = -(int)a3;
  }
LABEL_8:
  v6 = row_rect_txfm8x8_arr[a4];
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))col_txfm8x16_arr[a4])(a1, &v75, a3, 13);
  v7 = vrshrq_n_s16(v75, 2uLL);
  v8 = vrshrq_n_s16(v76, 2uLL);
  v9 = vrshrq_n_s16(v77, 2uLL);
  v10 = vrshrq_n_s16(v78, 2uLL);
  v11 = vrshrq_n_s16(v79, 2uLL);
  v12 = vrshrq_n_s16(v80, 2uLL);
  v13 = vrshrq_n_s16(v81, 2uLL);
  v14 = vrshrq_n_s16(v82, 2uLL);
  v15 = (int32x4_t)vtrn1q_s16(v7, v8);
  v16 = (int32x4_t)vtrn2q_s16(v7, v8);
  v75 = v7;
  v76 = v8;
  v17 = (int32x4_t)vtrn1q_s16(v9, v10);
  v18 = (int32x4_t)vtrn2q_s16(v9, v10);
  v19 = (int32x4_t)vtrn1q_s16(v11, v12);
  v77 = v9;
  v78 = v10;
  v20 = (int32x4_t)vtrn2q_s16(v11, v12);
  v21 = (int32x4_t)vtrn1q_s16(v13, v14);
  v79 = v11;
  v80 = v12;
  v22 = (int64x2_t)vtrn1q_s32(v15, v17);
  v23 = (int64x2_t)vtrn2q_s32(v15, v17);
  v24 = (int32x4_t)vtrn2q_s16(v13, v14);
  v81 = v13;
  v82 = v14;
  v25 = (int64x2_t)vtrn1q_s32(v16, v18);
  v26 = (int64x2_t)vtrn2q_s32(v16, v18);
  v27 = (int64x2_t)vtrn1q_s32(v19, v21);
  v28 = (int64x2_t)vtrn2q_s32(v19, v21);
  v83 = vrshrq_n_s16(v83, 2uLL);
  v84 = vrshrq_n_s16(v84, 2uLL);
  v29 = (int64x2_t)vtrn1q_s32(v20, v24);
  v30 = (int64x2_t)vtrn2q_s32(v20, v24);
  v31 = vzip1q_s64(v22, v27);
  v85 = vrshrq_n_s16(v85, 2uLL);
  v86 = vrshrq_n_s16(v86, 2uLL);
  v32 = vzip2q_s64(v22, v27);
  v33 = vzip1q_s64(v25, v29);
  v34 = vzip2q_s64(v25, v29);
  v87 = vrshrq_n_s16(v87, 2uLL);
  v88 = vrshrq_n_s16(v88, 2uLL);
  v35 = vzip1q_s64(v23, v28);
  v36 = vzip2q_s64(v23, v28);
  v37 = vzip1q_s64(v26, v30);
  v89 = vrshrq_n_s16(v89, 2uLL);
  v90 = vrshrq_n_s16(v90, 2uLL);
  v38 = vzip2q_s64(v26, v30);
  v39 = (int32x4_t)vtrn1q_s16(v83, v84);
  v40 = (int32x4_t)vtrn2q_s16(v83, v84);
  v73[0] = v31;
  v73[1] = v33;
  v41 = (int32x4_t)vtrn1q_s16(v85, v86);
  v42 = (int32x4_t)vtrn2q_s16(v85, v86);
  v43 = (int32x4_t)vtrn1q_s16(v87, v88);
  v73[2] = v35;
  v73[3] = v37;
  v44 = (int32x4_t)vtrn2q_s16(v87, v88);
  v45 = (int32x4_t)vtrn1q_s16(v89, v90);
  v46 = (int32x4_t)vtrn2q_s16(v89, v90);
  v73[4] = v32;
  v73[5] = v34;
  v47 = (int64x2_t)vtrn1q_s32(v39, v41);
  v48 = (int64x2_t)vtrn2q_s32(v39, v41);
  v49 = (int64x2_t)vtrn1q_s32(v40, v42);
  v73[6] = v36;
  v73[7] = v38;
  v50 = (int64x2_t)vtrn2q_s32(v40, v42);
  v51 = (int64x2_t)vtrn1q_s32(v43, v45);
  v52 = (int64x2_t)vtrn2q_s32(v43, v45);
  v53 = (int64x2_t)vtrn1q_s32(v44, v46);
  v54 = (int64x2_t)vtrn2q_s32(v44, v46);
  v55 = vzip1q_s64(v47, v51);
  v56 = vzip2q_s64(v47, v51);
  v57 = vzip1q_s64(v49, v53);
  v58 = vzip2q_s64(v49, v53);
  v59 = vzip1q_s64(v48, v52);
  v60 = vzip2q_s64(v48, v52);
  v61 = vzip1q_s64(v50, v54);
  v74[0] = v55;
  v74[1] = v57;
  v62 = vzip2q_s64(v50, v54);
  v74[2] = v59;
  v74[3] = v61;
  v74[4] = v56;
  v74[5] = v58;
  v74[6] = v60;
  v74[7] = v62;
  if (v5)
  {
    v81 = (int16x8_t)v33;
    v82 = (int16x8_t)v31;
    v79 = (int16x8_t)v37;
    v80 = (int16x8_t)v35;
    v77 = (int16x8_t)v34;
    v78 = (int16x8_t)v32;
    v75 = (int16x8_t)v38;
    v76 = (int16x8_t)v36;
    v63 = &v75;
    v69 = (int16x8_t)v56;
    v70 = (int16x8_t)v62;
    v71 = (int16x8_t)v58;
    v72 = (int16x8_t)v60;
    v65 = (int16x8_t)v55;
    v66 = (int16x8_t)v57;
    v67 = (int16x8_t)v59;
    v68 = (int16x8_t)v61;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v75, a2, 16, 13);
    v82 = v65;
    v81 = v66;
    v80 = v67;
    v79 = v68;
    v78 = v69;
    v77 = v71;
    v76 = v72;
    v75 = v70;
  }
  else
  {
    v63 = (int16x8_t *)v74;
    ((void (*)(_OWORD *, uint64_t, uint64_t, uint64_t))v6)(v73, a2, 16, 13);
  }
  return ((uint64_t (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(v63, a2 + 32, 16, 13);
}

uint64_t lowbd_fwd_txfm2d_16x8_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t (*v8)();
  uint64_t (*v9)();
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t *v62;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  uint64_t v96;

  v4 = a3;
  v6 = a1;
  v7 = 0;
  v96 = *MEMORY[0x24BDAC8D0];
  v8 = col_txfm8x8_arr[a4];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v7 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v7 = 1;
LABEL_7:
    v6 = a1 + 14 * (_DWORD)a3;
    v4 = -(int)a3;
  }
LABEL_8:
  v9 = row_rect_txfm8x16_arr[a4];
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v8)(v6, &v80, v4, 13);
  v10 = vrshrq_n_s16(v80, 2uLL);
  v11 = vrshrq_n_s16(v81, 2uLL);
  v12 = vrshrq_n_s16(v82, 2uLL);
  v13 = vrshrq_n_s16(v83, 2uLL);
  v14 = vrshrq_n_s16(v86, 2uLL);
  v15 = vrshrq_n_s16(v87, 2uLL);
  v16 = (int32x4_t)vtrn1q_s16(v10, v11);
  v17 = (int32x4_t)vtrn2q_s16(v10, v11);
  v18 = (int32x4_t)vtrn1q_s16(v12, v13);
  v80 = v10;
  v81 = v11;
  v82 = v12;
  v83 = v13;
  v84 = vrshrq_n_s16(v84, 2uLL);
  v85 = vrshrq_n_s16(v85, 2uLL);
  v19 = (int32x4_t)vtrn2q_s16(v12, v13);
  v20 = (int32x4_t)vtrn1q_s16(v84, v85);
  v21 = (int32x4_t)vtrn2q_s16(v84, v85);
  v22 = (int32x4_t)vtrn1q_s16(v14, v15);
  v23 = (int32x4_t)vtrn2q_s16(v14, v15);
  v86 = v14;
  v87 = v15;
  v24 = (int64x2_t)vtrn1q_s32(v16, v18);
  v25 = (int64x2_t)vtrn2q_s32(v16, v18);
  v26 = (int64x2_t)vtrn1q_s32(v17, v19);
  v27 = (int64x2_t)vtrn2q_s32(v17, v19);
  v28 = (int64x2_t)vtrn1q_s32(v20, v22);
  v29 = (int64x2_t)vtrn2q_s32(v20, v22);
  v30 = (int64x2_t)vtrn1q_s32(v21, v23);
  v31 = (int64x2_t)vtrn2q_s32(v21, v23);
  v64 = vzip1q_s64(v24, v28);
  v65 = vzip1q_s64(v26, v30);
  v66 = vzip1q_s64(v25, v29);
  v67 = vzip1q_s64(v27, v31);
  v68 = vzip2q_s64(v24, v28);
  v69 = vzip2q_s64(v26, v30);
  v70 = vzip2q_s64(v25, v29);
  v71 = vzip2q_s64(v27, v31);
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v8)(v6 + 16, &v80, v4, 13);
  v32 = vrshrq_n_s16(v80, 2uLL);
  v33 = vrshrq_n_s16(v81, 2uLL);
  v34 = vrshrq_n_s16(v82, 2uLL);
  v35 = vrshrq_n_s16(v83, 2uLL);
  v36 = vrshrq_n_s16(v86, 2uLL);
  v37 = vrshrq_n_s16(v87, 2uLL);
  v38 = (int32x4_t)vtrn1q_s16(v32, v33);
  v39 = (int32x4_t)vtrn2q_s16(v32, v33);
  v40 = (int32x4_t)vtrn1q_s16(v34, v35);
  v80 = v32;
  v81 = v33;
  v82 = v34;
  v83 = v35;
  v84 = vrshrq_n_s16(v84, 2uLL);
  v85 = vrshrq_n_s16(v85, 2uLL);
  v41 = (int32x4_t)vtrn2q_s16(v34, v35);
  v42 = (int32x4_t)vtrn1q_s16(v84, v85);
  v43 = (int32x4_t)vtrn2q_s16(v84, v85);
  v44 = (int32x4_t)vtrn1q_s16(v36, v37);
  v45 = (int32x4_t)vtrn2q_s16(v36, v37);
  v86 = v36;
  v87 = v37;
  v46 = (int64x2_t)vtrn1q_s32(v38, v40);
  v47 = (int64x2_t)vtrn2q_s32(v38, v40);
  v48 = (int64x2_t)vtrn1q_s32(v39, v41);
  v49 = (int64x2_t)vtrn2q_s32(v39, v41);
  v50 = (int64x2_t)vtrn1q_s32(v42, v44);
  v51 = (int64x2_t)vtrn2q_s32(v42, v44);
  v52 = (int64x2_t)vtrn1q_s32(v43, v45);
  v53 = (int64x2_t)vtrn2q_s32(v43, v45);
  v54 = vzip1q_s64(v46, v50);
  v55 = vzip2q_s64(v46, v50);
  v56 = vzip1q_s64(v48, v52);
  v72 = v54;
  v73 = v56;
  v57 = vzip2q_s64(v48, v52);
  v58 = vzip1q_s64(v47, v51);
  v59 = vzip2q_s64(v47, v51);
  v60 = vzip1q_s64(v49, v53);
  v74 = v58;
  v75 = v60;
  v61 = vzip2q_s64(v49, v53);
  v76 = v55;
  v77 = v57;
  v78 = v59;
  v79 = v61;
  if (v7)
  {
    v94 = v65;
    v95 = v64;
    v92 = v67;
    v93 = v66;
    v90 = v69;
    v91 = v68;
    v88 = v71;
    v89 = v70;
    v86 = (int16x8_t)v56;
    v87 = (int16x8_t)v54;
    v84 = (int16x8_t)v60;
    v85 = (int16x8_t)v58;
    v82 = (int16x8_t)v57;
    v83 = (int16x8_t)v55;
    v62 = (int64x2_t *)&v80;
    v80 = (int16x8_t)v61;
    v81 = (int16x8_t)v59;
  }
  else
  {
    v62 = &v64;
  }
  return ((uint64_t (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v9)(v62, a2, 8, 13);
}

uint64_t lowbd_fwd_txfm2d_16x32_neon(int16x4_t *a1, int32x4_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9, int16x8_t a10, int16x8_t a11, int16x8_t a12, int16x8_t a13, int16x8_t a14, int16x8_t a15, int16x8_t a16, int16x8_t a17, int16x8_t a18, int16x8_t a19, int16x8_t a20,int16x8_t a21,int16x8_t a22,int16x8_t a23,int16x8_t a24,int16x8_t a25,int16x8_t a26,int16x8_t a27,int16x8_t a28,int16x8_t a29,int16x8_t a30,int16x8_t a31,int16x8_t a32,int16x8_t a33,int16x8_t a34,int16x8_t a35,int16x8_t a36,int16x8_t a37,int16x8_t a38,__int128 a39)
{
  uint64_t v39;
  int16x4_t *v41;
  int v42;
  uint64_t v45;
  uint64_t (*v46)();
  char v47;
  char v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int64x2_t *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int64x2_t *v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t *v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t *v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int v147;
  uint64_t (*v148)();
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t vars0;

  v39 = a3;
  v41 = a1;
  STACK[0x1538] = *MEMORY[0x24BDAC8D0];
  if (((0xF1FEuLL >> a4) & 1) != 0)
  {
    v155 = 0u;
    vars0 = 0u;
    av1_get_fwd_txfm_cfg(a4, 9u, (uint64_t)&v155);
    return fwd_txfm2d_c(v41, a2, v39, (unsigned __int8 *)&v155, (__int32 *)&a39, a5);
  }
  v42 = 0;
  if (a4 <= 0xF)
  {
    if (((1 << a4) & 0x4110) != 0)
    {
LABEL_9:
      v147 = v42;
      v41 = (int16x4_t *)((char *)a1 + 62 * (int)a3);
      v39 = -(int)a3;
      goto LABEL_11;
    }
    if (((1 << a4) & 0x80A0) != 0)
    {
      v147 = 1;
      goto LABEL_11;
    }
    if ((_DWORD)a4 == 6)
    {
      v42 = 1;
      goto LABEL_9;
    }
  }
  v147 = 0;
LABEL_11:
  v45 = 0;
  v46 = col_txfm8x32_arr[a4];
  v148 = row_rect_txfm8x16_arr[a4];
  v47 = 1;
  do
  {
    v48 = v47;
    ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v46)(&v41[(unint64_t)v45 / 4], &v155, v39, 12);
    v47 = 0;
    v49 = vrshrq_n_s16(a13, 4uLL);
    v50 = vrshrq_n_s16(a14, 4uLL);
    v51 = vrshrq_n_s16(a15, 4uLL);
    v52 = vrshrq_n_s16(a16, 4uLL);
    v53 = vrshrq_n_s16(a17, 4uLL);
    v54 = vrshrq_n_s16(a18, 4uLL);
    v55 = vrshrq_n_s16(a19, 4uLL);
    v56 = (int64x2_t *)(&a39 + v45);
    v153 = vrshrq_n_s16(v155, 4uLL);
    v154 = vrshrq_n_s16(vars0, 4uLL);
    v57 = (int32x4_t)vtrn1q_s16(v153, v154);
    v58 = (int32x4_t)vtrn2q_s16(v153, v154);
    v151 = vrshrq_n_s16(a9, 4uLL);
    v152 = vrshrq_n_s16(a10, 4uLL);
    v59 = (int32x4_t)vtrn1q_s16(v151, v152);
    v60 = (int32x4_t)vtrn2q_s16(v151, v152);
    v149 = vrshrq_n_s16(a11, 4uLL);
    v150 = vrshrq_n_s16(a12, 4uLL);
    v61 = (int32x4_t)vtrn1q_s16(v149, v150);
    v62 = (int32x4_t)vtrn2q_s16(v149, v150);
    v63 = (int32x4_t)vtrn1q_s16(v49, v50);
    v64 = (int32x4_t)vtrn2q_s16(v49, v50);
    v65 = (int64x2_t)vtrn1q_s32(v57, v59);
    v66 = (int64x2_t)vtrn2q_s32(v57, v59);
    v67 = (int64x2_t)vtrn1q_s32(v58, v60);
    v68 = (int64x2_t)vtrn2q_s32(v58, v60);
    v69 = (int64x2_t)vtrn1q_s32(v61, v63);
    v70 = (int64x2_t)vtrn2q_s32(v61, v63);
    v71 = (int64x2_t)vtrn1q_s32(v62, v64);
    *v56 = vzip1q_s64(v65, v69);
    v56[1] = vzip1q_s64(v67, v71);
    v72 = (int64x2_t)vtrn2q_s32(v62, v64);
    v56[2] = vzip1q_s64(v66, v70);
    v56[3] = vzip1q_s64(v68, v72);
    v73 = vrshrq_n_s16(a20, 4uLL);
    v56[4] = vzip2q_s64(v65, v69);
    v56[5] = vzip2q_s64(v67, v71);
    v74 = vrshrq_n_s16(a21, 4uLL);
    v56[6] = vzip2q_s64(v66, v70);
    v56[7] = vzip2q_s64(v68, v72);
    v75 = vrshrq_n_s16(a22, 4uLL);
    v76 = (int64x2_t *)(&STACK[0xE20] + 2 * v45);
    v77 = (int32x4_t)vtrn1q_s16(v51, v52);
    v78 = (int32x4_t)vtrn2q_s16(v51, v52);
    v79 = (int32x4_t)vtrn1q_s16(v53, v54);
    v80 = (int32x4_t)vtrn2q_s16(v53, v54);
    v81 = (int32x4_t)vtrn1q_s16(v55, v73);
    v82 = (int32x4_t)vtrn2q_s16(v55, v73);
    v83 = (int32x4_t)vtrn1q_s16(v74, v75);
    v84 = (int32x4_t)vtrn2q_s16(v74, v75);
    v85 = (int64x2_t)vtrn1q_s32(v77, v79);
    v86 = (int64x2_t)vtrn1q_s32(v78, v80);
    v87 = (int64x2_t)vtrn1q_s32(v81, v83);
    v88 = (int64x2_t)vtrn1q_s32(v82, v84);
    *v76 = vzip1q_s64(v85, v87);
    v76[1] = vzip1q_s64(v86, v88);
    v89 = (int64x2_t)vtrn2q_s32(v77, v79);
    v90 = (int64x2_t)vtrn2q_s32(v78, v80);
    v91 = (int64x2_t)vtrn2q_s32(v81, v83);
    v92 = (int64x2_t)vtrn2q_s32(v82, v84);
    v76[2] = vzip1q_s64(v89, v91);
    v76[3] = vzip1q_s64(v90, v92);
    v76[4] = vzip2q_s64(v85, v87);
    v76[5] = vzip2q_s64(v86, v88);
    v76[6] = vzip2q_s64(v89, v91);
    v76[7] = vzip2q_s64(v90, v92);
    v93 = (int64x2_t *)(&STACK[0xF20] + 2 * v45);
    v94 = vrshrq_n_s16(a23, 4uLL);
    v95 = vrshrq_n_s16(a24, 4uLL);
    v96 = vrshrq_n_s16(a25, 4uLL);
    v97 = vrshrq_n_s16(a26, 4uLL);
    v98 = vrshrq_n_s16(a27, 4uLL);
    v99 = vrshrq_n_s16(a28, 4uLL);
    v100 = vrshrq_n_s16(a29, 4uLL);
    v101 = vrshrq_n_s16(a30, 4uLL);
    v102 = (int32x4_t)vtrn1q_s16(v94, v95);
    v103 = (int32x4_t)vtrn2q_s16(v94, v95);
    v104 = (int32x4_t)vtrn1q_s16(v96, v97);
    v105 = (int32x4_t)vtrn2q_s16(v96, v97);
    v106 = (int32x4_t)vtrn1q_s16(v98, v99);
    v107 = (int32x4_t)vtrn2q_s16(v98, v99);
    v108 = (int32x4_t)vtrn1q_s16(v100, v101);
    v109 = (int32x4_t)vtrn2q_s16(v100, v101);
    v110 = (int64x2_t)vtrn1q_s32(v102, v104);
    v111 = (int64x2_t)vtrn1q_s32(v103, v105);
    v112 = (int64x2_t)vtrn1q_s32(v106, v108);
    v113 = (int64x2_t)vtrn1q_s32(v107, v109);
    *v93 = vzip1q_s64(v110, v112);
    v93[1] = vzip1q_s64(v111, v113);
    v114 = (int64x2_t)vtrn2q_s32(v102, v104);
    v115 = (int64x2_t)vtrn2q_s32(v103, v105);
    v116 = (int64x2_t)vtrn2q_s32(v106, v108);
    v117 = (int64x2_t)vtrn2q_s32(v107, v109);
    v93[2] = vzip1q_s64(v114, v116);
    v93[3] = vzip1q_s64(v115, v117);
    v93[4] = vzip2q_s64(v110, v112);
    v93[5] = vzip2q_s64(v111, v113);
    v93[6] = vzip2q_s64(v114, v116);
    v93[7] = vzip2q_s64(v115, v117);
    v155 = v153;
    vars0 = v154;
    a9 = v151;
    a10 = v152;
    a11 = v149;
    a12 = v150;
    a13 = v49;
    a14 = v50;
    a15 = v51;
    a16 = v52;
    a17 = v53;
    a18 = v54;
    a19 = v55;
    a20 = v73;
    a21 = v74;
    a22 = v75;
    a23 = v94;
    a24 = v95;
    a25 = v96;
    a26 = v97;
    a27 = v98;
    a28 = v99;
    a29 = v100;
    a30 = v101;
    v118 = vrshrq_n_s16(a31, 4uLL);
    v119 = vrshrq_n_s16(a32, 4uLL);
    v120 = vrshrq_n_s16(a33, 4uLL);
    v121 = vrshrq_n_s16(a34, 4uLL);
    v122 = vrshrq_n_s16(a35, 4uLL);
    v123 = vrshrq_n_s16(a36, 4uLL);
    v124 = vrshrq_n_s16(a37, 4uLL);
    v125 = vrshrq_n_s16(a38, 4uLL);
    v126 = (int32x4_t)vtrn1q_s16(v118, v119);
    a31 = v118;
    a32 = v119;
    v127 = (int32x4_t)vtrn2q_s16(v118, v119);
    v128 = (int32x4_t)vtrn1q_s16(v120, v121);
    a33 = v120;
    a34 = v121;
    v129 = (int32x4_t)vtrn2q_s16(v120, v121);
    v130 = (int64x2_t)vtrn1q_s32(v126, v128);
    v131 = (int64x2_t)vtrn2q_s32(v126, v128);
    v132 = (int32x4_t)vtrn1q_s16(v122, v123);
    a35 = v122;
    a36 = v123;
    v133 = (int32x4_t)vtrn2q_s16(v122, v123);
    v134 = (int32x4_t)vtrn1q_s16(v124, v125);
    a37 = v124;
    a38 = v125;
    v135 = (int32x4_t)vtrn2q_s16(v124, v125);
    v136 = (int64x2_t)vtrn1q_s32(v127, v129);
    v137 = (int64x2_t)vtrn2q_s32(v127, v129);
    v138 = (int64x2_t)vtrn1q_s32(v132, v134);
    v139 = (int64x2_t)vtrn2q_s32(v132, v134);
    v140 = (int64x2_t)vtrn1q_s32(v133, v135);
    v141 = (int64x2_t)vtrn2q_s32(v133, v135);
    v142 = (int64x2_t *)(&STACK[0x1020] + 2 * v45);
    *v142 = vzip1q_s64(v130, v138);
    v142[1] = vzip1q_s64(v136, v140);
    v142[2] = vzip1q_s64(v131, v139);
    v142[3] = vzip1q_s64(v137, v141);
    v142[4] = vzip2q_s64(v130, v138);
    v142[5] = vzip2q_s64(v136, v140);
    v142[6] = vzip2q_s64(v131, v139);
    v142[7] = vzip2q_s64(v137, v141);
    v45 = 8;
  }
  while ((v48 & 1) != 0);
  if (v147)
  {
    v143 = *(int16x8_t *)&STACK[0xE00];
    v155 = *(int16x8_t *)&STACK[0xE10];
    vars0 = v143;
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v148)(&v155, a2, 32, 13);
    v144 = *(int16x8_t *)&STACK[0xF00];
    v155 = *(int16x8_t *)&STACK[0xF10];
    vars0 = v144;
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v148)(&v155, &a2[2], 32, 13);
    v145 = *(int16x8_t *)&STACK[0x1000];
    v155 = *(int16x8_t *)&STACK[0x1010];
    vars0 = v145;
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v148)(&v155, &a2[4], 32, 13);
    v146 = *(int16x8_t *)&STACK[0x1100];
    v155 = *(int16x8_t *)&STACK[0x1110];
    vars0 = v146;
    return ((uint64_t (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v148)(&v155, &a2[6], 32, 13);
  }
  else
  {
    ((void (*)(__int128 *, int32x4_t *, uint64_t, uint64_t))v148)(&a39, a2, 32, 13);
    ((void (*)(unint64_t *, int32x4_t *, uint64_t, uint64_t))v148)(&STACK[0xE20], &a2[2], 32, 13);
    ((void (*)(unint64_t *, int32x4_t *, uint64_t, uint64_t))v148)(&STACK[0xF20], &a2[4], 32, 13);
    return ((uint64_t (*)(unint64_t *, int32x4_t *, uint64_t, uint64_t))v148)(&STACK[0x1020], &a2[6], 32, 13);
  }
}

uint64_t lowbd_fwd_txfm2d_32x16_neon(int16x4_t *a1, int32x4_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int16x4_t *v7;
  int v8;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t (*v13)();
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t *v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t *v69;
  int16x8_t *v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[32];
  _OWORD v104[96];
  uint64_t v105;

  v5 = a3;
  v7 = a1;
  v105 = *MEMORY[0x24BDAC8D0];
  if (((0xF1FEuLL >> a4) & 1) != 0)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    av1_get_fwd_txfm_cfg(a4, 0xAu, (uint64_t)&v71);
    return fwd_txfm2d_c(v7, a2, v5, (unsigned __int8 *)&v71, (__int32 *)v103, a5);
  }
  v8 = 0;
  if (a4 <= 0xF)
  {
    if (((1 << a4) & 0x4110) != 0)
    {
LABEL_9:
      v7 = (int16x4_t *)((char *)a1 + 30 * (int)a3);
      v5 = -(int)a3;
      goto LABEL_10;
    }
    if (((1 << a4) & 0x80A0) != 0)
    {
      v8 = 1;
      goto LABEL_10;
    }
    if ((_DWORD)a4 == 6)
    {
      v8 = 1;
      goto LABEL_9;
    }
  }
LABEL_10:
  v11 = 0;
  v12 = col_txfm8x16_arr[a4];
  v13 = row_rect_txfm8x32_arr[a4];
  do
  {
    ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v12)(v7, &v71, v5, 13);
    v14 = vrshrq_n_s16(v71, 4uLL);
    v15 = vrshrq_n_s16(v72, 4uLL);
    v16 = vrshrq_n_s16(v73, 4uLL);
    v17 = vrshrq_n_s16(v74, 4uLL);
    v18 = vrshrq_n_s16(v75, 4uLL);
    v19 = vrshrq_n_s16(v76, 4uLL);
    v20 = vrshrq_n_s16(v77, 4uLL);
    v21 = vrshrq_n_s16(v78, 4uLL);
    v22 = vrshrq_n_s16(v81, 4uLL);
    v23 = vrshrq_n_s16(v82, 4uLL);
    v24 = vrshrq_n_s16(v83, 4uLL);
    v25 = vrshrq_n_s16(v84, 4uLL);
    v26 = vrshrq_n_s16(v85, 4uLL);
    v27 = vrshrq_n_s16(v86, 4uLL);
    v28 = (int32x4_t)vtrn1q_s16(v14, v15);
    v29 = (int32x4_t)vtrn2q_s16(v14, v15);
    v71 = v14;
    v72 = v15;
    v30 = (int32x4_t)vtrn1q_s16(v16, v17);
    v31 = (int32x4_t)vtrn2q_s16(v16, v17);
    v32 = (int32x4_t)vtrn1q_s16(v18, v19);
    v73 = v16;
    v74 = v17;
    v33 = (int32x4_t)vtrn2q_s16(v18, v19);
    v34 = (int32x4_t)vtrn1q_s16(v20, v21);
    v75 = v18;
    v76 = v19;
    v35 = (int64x2_t)vtrn1q_s32(v28, v30);
    v36 = (int64x2_t)vtrn2q_s32(v28, v30);
    v37 = (int32x4_t)vtrn2q_s16(v20, v21);
    v77 = v20;
    v78 = v21;
    v38 = (int64x2_t)vtrn1q_s32(v29, v31);
    v39 = (int64x2_t *)&v103[v11];
    v40 = (int64x2_t)vtrn2q_s32(v29, v31);
    v41 = (int64x2_t)vtrn1q_s32(v32, v34);
    v42 = (int64x2_t)vtrn2q_s32(v32, v34);
    v79 = vrshrq_n_s16(v79, 4uLL);
    v80 = vrshrq_n_s16(v80, 4uLL);
    v43 = (int64x2_t)vtrn1q_s32(v33, v37);
    v44 = (int64x2_t)vtrn2q_s32(v33, v37);
    v45 = vzip1q_s64(v35, v41);
    v81 = v22;
    v82 = v23;
    v46 = vzip2q_s64(v35, v41);
    v47 = vzip1q_s64(v38, v43);
    v48 = vzip2q_s64(v38, v43);
    v83 = v24;
    v84 = v25;
    v49 = vzip1q_s64(v36, v42);
    v50 = vzip2q_s64(v36, v42);
    v51 = vzip1q_s64(v40, v44);
    v85 = v26;
    v86 = v27;
    v52 = vzip2q_s64(v40, v44);
    v53 = (int32x4_t)vtrn1q_s16(v79, v80);
    v54 = (int32x4_t)vtrn2q_s16(v79, v80);
    *v39 = v45;
    v39[1] = v47;
    v55 = (int32x4_t)vtrn1q_s16(v22, v23);
    v56 = (int32x4_t)vtrn2q_s16(v22, v23);
    v57 = (int32x4_t)vtrn1q_s16(v24, v25);
    v39[2] = v49;
    v39[3] = v51;
    v58 = (int32x4_t)vtrn2q_s16(v24, v25);
    v59 = (int32x4_t)vtrn1q_s16(v26, v27);
    v60 = (int32x4_t)vtrn2q_s16(v26, v27);
    v39[4] = v46;
    v39[5] = v48;
    v61 = (int64x2_t)vtrn1q_s32(v53, v55);
    v62 = (int64x2_t)vtrn2q_s32(v53, v55);
    v63 = (int64x2_t)vtrn1q_s32(v54, v56);
    v39[6] = v50;
    v39[7] = v52;
    v64 = (int64x2_t)vtrn2q_s32(v54, v56);
    v65 = (int64x2_t)vtrn1q_s32(v57, v59);
    v66 = (int64x2_t)vtrn2q_s32(v57, v59);
    v67 = (int64x2_t)vtrn1q_s32(v58, v60);
    v68 = (int64x2_t)vtrn2q_s32(v58, v60);
    v39[32] = vzip1q_s64(v61, v65);
    v39[33] = vzip1q_s64(v63, v67);
    v39[34] = vzip1q_s64(v62, v66);
    v39[35] = vzip1q_s64(v64, v68);
    v39[36] = vzip2q_s64(v61, v65);
    v39[37] = vzip2q_s64(v63, v67);
    v11 += 8;
    v7 += 2;
    v39[38] = vzip2q_s64(v62, v66);
    v39[39] = vzip2q_s64(v64, v68);
  }
  while (v11 != 32);
  if (v8)
  {
    v101 = v103[1];
    v102 = v103[0];
    v99 = v103[3];
    v100 = v103[2];
    v97 = v103[5];
    v98 = v103[4];
    v95 = v103[7];
    v96 = v103[6];
    v93 = v103[9];
    v94 = v103[8];
    v91 = v103[11];
    v92 = v103[10];
    v89 = v103[13];
    v90 = v103[12];
    v87 = v103[15];
    v88 = v103[14];
    v85 = (int16x8_t)v103[17];
    v86 = (int16x8_t)v103[16];
    v83 = (int16x8_t)v103[19];
    v84 = (int16x8_t)v103[18];
    v81 = (int16x8_t)v103[21];
    v82 = (int16x8_t)v103[20];
    v79 = (int16x8_t)v103[23];
    v80 = (int16x8_t)v103[22];
    v77 = (int16x8_t)v103[25];
    v78 = (int16x8_t)v103[24];
    v75 = (int16x8_t)v103[27];
    v76 = (int16x8_t)v103[26];
    v73 = (int16x8_t)v103[29];
    v74 = (int16x8_t)v103[28];
    v71 = (int16x8_t)v103[31];
    v72 = (int16x8_t)v103[30];
    ((void (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v13)(&v71, a2, 16, 13);
    v101 = v104[1];
    v102 = v104[0];
    v99 = v104[3];
    v100 = v104[2];
    v97 = v104[5];
    v98 = v104[4];
    v95 = v104[7];
    v96 = v104[6];
    v93 = v104[9];
    v94 = v104[8];
    v91 = v104[11];
    v92 = v104[10];
    v89 = v104[13];
    v90 = v104[12];
    v87 = v104[15];
    v88 = v104[14];
    v85 = (int16x8_t)v104[17];
    v86 = (int16x8_t)v104[16];
    v83 = (int16x8_t)v104[19];
    v84 = (int16x8_t)v104[18];
    v81 = (int16x8_t)v104[21];
    v82 = (int16x8_t)v104[20];
    v79 = (int16x8_t)v104[23];
    v80 = (int16x8_t)v104[22];
    v77 = (int16x8_t)v104[25];
    v78 = (int16x8_t)v104[24];
    v75 = (int16x8_t)v104[27];
    v76 = (int16x8_t)v104[26];
    v73 = (int16x8_t)v104[29];
    v74 = (int16x8_t)v104[28];
    v69 = a2 + 2;
    v71 = (int16x8_t)v104[31];
    v72 = (int16x8_t)v104[30];
    v70 = &v71;
  }
  else
  {
    ((void (*)(_OWORD *, int32x4_t *, uint64_t, uint64_t))v13)(v103, a2, 16, 13);
    v69 = a2 + 2;
    v70 = (int16x8_t *)v104;
  }
  return ((uint64_t (*)(int16x8_t *, int32x4_t *, uint64_t, uint64_t))v13)(v70, v69, 16, 13);
}

void lowbd_fwd_txfm2d_32x64_neon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int16x8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int16x8_t *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x8_t v424;
  int16x8_t v425;
  int16x8_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int16x8_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int16x8_t v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int16x8_t v466;
  int16x8_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int16x8_t v472;
  int16x8_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int16x8_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int16x8_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int8x16_t v495;
  int8x16_t v496;
  int16x8_t v497;
  int16x8_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int16x8_t v501;
  int16x8_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int16x8_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int64x2_t v514;
  int64x2_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  int64x2_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t v524;
  int64x2_t v525;
  int64x2_t v526;
  int64x2_t v527;
  int64x2_t v528;
  int64x2_t v529;
  int64x2_t *v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int64x2_t v547;
  int64x2_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int64x2_t v557;
  int64x2_t v558;
  int64x2_t v559;
  int64x2_t v560;
  int64x2_t v561;
  int64x2_t v562;
  int16x8_t v563;
  int16x8_t v564;
  int16x8_t v565;
  int16x8_t v566;
  int16x8_t v567;
  int16x8_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  int64x2_t v583;
  int64x2_t v584;
  int64x2_t v585;
  int64x2_t v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t v589;
  int64x2_t v590;
  int64x2_t v591;
  int64x2_t v592;
  int64x2_t v593;
  int64x2_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int16x8_t v598;
  int16x8_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int32x4_t v607;
  int32x4_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int64x2_t v613;
  int64x2_t v614;
  int64x2_t v615;
  int64x2_t v616;
  int64x2_t v617;
  int64x2_t v618;
  uint64_t v619;
  _BYTE *v620;
  uint64_t i;
  int16x8_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t *v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int32x4_t v661;
  int32x4_t v662;
  int32x4_t v663;
  int32x4_t v664;
  int32x4_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  int32x4_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int32x4_t v677;
  int32x4_t v678;
  int32x4_t v679;
  int32x4_t v680;
  int32x4_t v681;
  int32x4_t v682;
  int32x4_t v683;
  int32x4_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int16x8_t v688;
  int16x8_t v689;
  int16x8_t v690;
  int16x8_t v691;
  int16x8_t v692;
  int16x8_t v693;
  int16x8_t v694;
  int16x8_t v695;
  int16x8_t v696;
  int16x8_t v697;
  int16x8_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int32x4_t v701;
  int16x8_t v702;
  int32x4_t v703;
  int16x8_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int32x4_t v709;
  int32x4_t v710;
  int32x4_t v711;
  int32x4_t v712;
  int32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  int32x4_t v716;
  int32x4_t v717;
  int32x4_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int16x8_t v722;
  int32x4_t v723;
  int16x8_t v724;
  int32x4_t v725;
  int32x4_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int32x4_t v729;
  int16x8_t v730;
  int32x4_t v731;
  int16x8_t v732;
  int32x4_t v733;
  int16x8_t v734;
  int32x4_t v735;
  int16x8_t v736;
  int32x4_t v737;
  int16x8_t v738;
  int32x4_t v739;
  int16x8_t v740;
  int32x4_t v741;
  int16x8_t v742;
  int32x4_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int32x4_t v746;
  int16x8_t v747;
  int32x4_t v748;
  int16x8_t v749;
  int32x4_t v750;
  int16x8_t v751;
  int32x4_t v752;
  int16x8_t v753;
  int32x4_t v754;
  int16x8_t v755;
  int16x8_t v756;
  int32x4_t v757;
  int16x8_t v758;
  int16x8_t v759;
  int32x4_t v760;
  int16x8_t v761;
  int32x4_t v762;
  int16x8_t v763;
  int32x4_t v764;
  int16x8_t v765;
  int32x4_t v766;
  int16x8_t v767;
  int32x4_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int16x8_t v771;
  int16x8_t v772;
  int16x8_t v773;
  int16x8_t v774;
  int16x8_t v775;
  int16x8_t v776;
  int16x8_t v777;
  int16x8_t v778;
  int32x4_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int32x4_t v789;
  int32x4_t v790;
  int16x8_t v791;
  int32x4_t v792;
  int16x8_t v793;
  int32x4_t v794;
  int32x4_t v795;
  int32x4_t v796;
  int32x4_t v797;
  int32x4_t v798;
  int32x4_t v799;
  int32x4_t v800;
  int32x4_t v801;
  int32x4_t v802;
  int32x4_t v803;
  int32x4_t v804;
  int32x4_t v805;
  int32x4_t v806;
  int16x8_t v807;
  int16x8_t v808;
  int16x8_t v809;
  int16x8_t v810;
  int16x8_t v811;
  int16x8_t v812;
  int16x8_t v813;
  int16x8_t v814;
  int16x8_t v815;
  int16x8_t v816;
  int16x8_t v817;
  int16x8_t v818;
  int16x8_t v819;
  int16x8_t v820;
  int16x8_t v821;
  int16x8_t v822;
  int16x8_t v823;
  int16x8_t v824;
  int16x8_t v825;
  int16x8_t v826;
  int16x8_t v827;
  int16x8_t v828;
  int16x8_t v829;
  int16x8_t v830;
  int16x8_t v831;
  int16x8_t v832;
  int16x8_t v833;
  int16x8_t v834;
  int16x8_t v835;
  int16x8_t v836;
  int16x8_t v837;
  int16x8_t v838;
  int16x8_t v839;
  int16x8_t v840;
  int16x8_t v841;
  int16x8_t v842;
  int16x8_t v843;
  int16x8_t v844;
  int16x8_t v845;
  int16x8_t v846;
  int16x8_t v847;
  int16x8_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int16x8_t v851;
  int16x8_t v852;
  int16x8_t v853;
  int16x8_t v854;
  int16x8_t v855;
  int16x8_t v856;
  int32x4_t v857;
  int16x8_t v858;
  int32x4_t v859;
  int16x8_t v860;
  int16x8_t v861;
  int32x4_t v862;
  int16x8_t v863;
  int32x4_t v864;
  int16x8_t v865;
  int16x8_t v866;
  int16x8_t v867;
  int16x8_t v868;
  int16x8_t v869;
  int32x4_t v870;
  int16x8_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int16x8_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int16x8_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int16x8_t v880;
  int32x4_t v881;
  int32x4_t v882;
  int16x8_t v883;
  int32x4_t v884;
  int32x4_t v885;
  int16x8_t v886;
  int32x4_t v887;
  int32x4_t v888;
  int16x8_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int16x8_t v892;
  int32x4_t v893;
  int32x4_t v894;
  int16x8_t v895;
  int32x4_t v896;
  int32x4_t v897;
  int16x8_t v898;
  int16x8_t v899;
  int32x4_t v900;
  int32x4_t v901;
  int16x8_t v902;
  int16x8_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int16x8_t v907;
  int32x4_t v908;
  int16x8_t v909;
  int32x4_t v910;
  int16x8_t v911;
  int32x4_t v912;
  int16x8_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int16x8_t v916;
  int32x4_t v917;
  int16x8_t v918;
  int32x4_t v919;
  int16x8_t v920;
  int32x4_t v921;
  int16x8_t v922;
  int32x4_t v923;
  int16x8_t v924;
  int32x4_t v925;
  int16x8_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int32x4_t v937;
  int32x4_t v938;
  int32x4_t v939;
  int32x4_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int32x4_t v945;
  int32x4_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int32x4_t v949;
  int32x4_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int32x4_t v953;
  int32x4_t v954;
  int32x4_t v955;
  int32x4_t v956;
  int32x4_t v957;
  int32x4_t v958;
  int32x4_t v959;
  int32x4_t v960;
  int32x4_t v961;
  int32x4_t v962;
  int32x4_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  int32x4_t v967;
  int32x4_t v968;
  int32x4_t v969;
  int32x4_t v970;
  int32x4_t v971;
  int32x4_t v972;
  int32x4_t v973;
  int32x4_t v974;
  int32x4_t v975;
  int32x4_t v976;
  int32x4_t v977;
  int32x4_t v978;
  int32x4_t v979;
  int32x4_t v980;
  int32x4_t v981;
  int32x4_t v982;
  int32x4_t v983;
  int32x4_t v984;
  int32x4_t v985;
  int32x4_t v986;
  int32x4_t v987;
  int32x4_t v988;
  int32x4_t v989;
  int32x4_t v990;
  int32x4_t v991;
  _BYTE v992[4096];
  int16x8_t v993;
  int16x8_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int16x8_t v999;
  int16x8_t v1000;
  int16x8_t v1001;
  int16x8_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int16x8_t v1007;
  int16x8_t v1008;
  int16x8_t v1009;
  int16x8_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int16x8_t v1013;
  int16x8_t v1014;
  int16x8_t v1015;
  int16x8_t v1016;
  int16x8_t v1017;
  int16x8_t v1018;
  int16x8_t v1019;
  int16x8_t v1020;
  int16x8_t v1021;
  int16x8_t v1022;
  int16x8_t v1023;
  int16x8_t v1024;
  int16x8_t v1025;
  int16x8_t v1026;
  int16x8_t v1027;
  int16x8_t v1028;
  int16x8_t v1029;
  int16x8_t v1030;
  int16x8_t v1031;
  int16x8_t v1032;
  int16x8_t v1033;
  int16x8_t v1034;
  int16x8_t v1035;
  int16x8_t v1036;
  int16x8_t v1037;
  int16x8_t v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  int16x8_t v1044;
  int16x8_t v1045;
  int16x8_t v1046;
  int16x8_t v1047;
  int16x8_t v1048;
  int16x8_t v1049;
  int16x8_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int16x8_t v1053;
  int16x8_t v1054;
  int16x8_t v1055;
  int16x8_t v1056;
  uint64_t v1057;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v6 = (int16x8_t *)v2;
  v7 = 0;
  v869 = vdupq_n_s16(0x16A1u);
  v868 = vdupq_n_s16(0xE95Fu);
  v920 = vdupq_n_s16(0x1D90u);
  v918 = vdupq_n_s16(0xC3Fu);
  v926 = vdupq_n_s16(0xE270u);
  v916 = vdupq_n_s16(0xF3C1u);
  v913 = vdupq_n_s16(0x1F63u);
  v924 = vdupq_n_s16(0x63Eu);
  v922 = vdupq_n_s16(0xE09Du);
  v867 = vdupq_n_s16(0xF9C2u);
  v911 = vdupq_n_s16(0x11C7u);
  v909 = vdupq_n_s16(0x1A9Bu);
  v907 = vdupq_n_s16(0xEE39u);
  v866 = vdupq_n_s16(0xE565u);
  v865 = vdupq_n_s16(0x1FD9u);
  v863 = vdupq_n_s16(0x323u);
  v861 = vdupq_n_s16(0xE027u);
  v860 = vdupq_n_s16(0x144Du);
  v858 = vdupq_n_s16(0x18BDu);
  v856 = vdupq_n_s16(0xEBB3u);
  v855 = vdupq_n_s16(0x1C39u);
  v696 = vdupq_n_s16(0xE3C7u);
  v697 = vdupq_n_s16(0xF16u);
  v694 = vdupq_n_s16(0x1E9Fu);
  v695 = vdupq_n_s16(0x94Au);
  v692 = vdupq_n_s16(0xFCDDu);
  v693 = vdupq_n_s16(0xF6B6u);
  v690 = vdupq_n_s16(0xF0EAu);
  v691 = vdupq_n_s16(0xE743u);
  v688 = vdupq_n_s16(0x1FF6u);
  v689 = vdupq_n_s16(0xE161u);
  v1057 = *MEMORY[0x24BDAC8D0];
  do
  {
    v8 = 0;
    v9 = v6;
    do
    {
      *(int16x8_t *)((char *)&v993 + v8) = *v9;
      v8 += 16;
      v9 = (int16x8_t *)((char *)v9 + 2 * v3);
    }
    while (v8 != 1024);
    v841 = vqaddq_s16(v997, v1052);
    v844 = vqaddq_s16(v998, v1051);
    v848 = vqaddq_s16(v1003, v1046);
    v851 = vqaddq_s16(v1004, v1045);
    v853 = vqaddq_s16(v1013, v1036);
    v849 = vqaddq_s16(v1014, v1035);
    v846 = vqaddq_s16(v1019, v1030);
    v842 = vqaddq_s16(v1020, v1029);
    v10 = vqsubq_s16(v851, v853);
    v11 = vqsubq_s16(v848, v849);
    v12 = vqsubq_s16(v844, v846);
    v13 = vqsubq_s16(v841, v842);
    v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v10, v869), v13, v869), 0xDuLL);
    v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v10, v868), v13, v869), 0xDuLL);
    v16 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v11, v869), v12, v869), 0xDuLL);
    v17 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v11, v868), v12, v869), 0xDuLL);
    v838 = vqaddq_s16(v999, v1050);
    v840 = vqaddq_s16(v1002, v1047);
    v839 = vqaddq_s16(v1015, v1034);
    v836 = vqaddq_s16(v1018, v1031);
    v18 = vqsubq_s16(v840, v839);
    v19 = vqsubq_s16(v838, v836);
    v20 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v18, v869), v19, v869), 0xDuLL);
    v21 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v18, v868), v19, v869), 0xDuLL);
    v833 = vqaddq_s16(v1000, v1049);
    v835 = vqaddq_s16(v1001, v1048);
    v831 = vqaddq_s16(v1016, v1033);
    v829 = vqaddq_s16(v1017, v1032);
    v22 = vqsubq_s16(v835, v831);
    v23 = vqsubq_s16(v833, v829);
    v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v22, v869), v23, v869), 0xDuLL);
    v25 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v22, v868), v23, v869), 0xDuLL);
    v825 = vqaddq_s16(v995, v1054);
    v827 = vqaddq_s16(v1006, v1043);
    v826 = vqaddq_s16(v1011, v1038);
    v824 = vqaddq_s16(v1022, v1027);
    v902 = vqsubq_s16(v827, v826);
    v898 = vqsubq_s16(v825, v824);
    v26 = vqaddq_s16(v902, v17);
    v27 = vqaddq_s16(v898, v16);
    v28 = vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v918.i8);
    v29 = vmlal_high_s16(vmull_high_s16(v26, v926), v27, v918);
    v30 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v27.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v26, v918), v27, v920), 0xDuLL);
    v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
    v817 = vqaddq_s16(v996, v1053);
    v820 = vqaddq_s16(v1005, v1044);
    v819 = vqaddq_s16(v1012, v1037);
    v815 = vqaddq_s16(v1021, v1028);
    v736 = vqsubq_s16(v820, v819);
    v738 = vqsubq_s16(v817, v815);
    v32 = vqaddq_s16(v736, v15);
    v33 = vqaddq_s16(v738, v14);
    v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v32, v918), v33, v920), 0xDuLL);
    v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v32, v926), v33, v918), 0xDuLL);
    v810 = vqaddq_s16(v994, v1055);
    v813 = vqaddq_s16(v1007, v1042);
    v812 = vqaddq_s16(v1010, v1039);
    v809 = vqaddq_s16(v1023, v1026);
    v730 = vqsubq_s16(v810, v809);
    v732 = vqsubq_s16(v813, v812);
    v722 = vqaddq_s16(v730, v20);
    v724 = vqaddq_s16(v732, v21);
    v36 = vqaddq_s16(v724, v31);
    v37 = vqaddq_s16(v722, v30);
    v772 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v924.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v913.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v36, v924), v37, v913), 0xDuLL);
    v38 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v37.i8, *(int16x4_t *)v924.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v36, v922), v37, v924), 0xDuLL);
    v778 = vqaddq_s16(v1008, v1041);
    v776 = vqaddq_s16(v993, v1056);
    v777 = vqaddq_s16(v1009, v1040);
    v775 = vqaddq_s16(v1024, v1025);
    v39 = vqsubq_s16(v778, v777);
    v40 = vqsubq_s16(v776, v775);
    v41 = vqaddq_s16(v39, v25);
    v42 = vqaddq_s16(v40, v24);
    v773 = v38;
    v774 = vqaddq_s16(v41, v35);
    v771 = vqaddq_s16(v42, v34);
    v43 = vqsubq_s16(v774, v38);
    v44 = vqsubq_s16(v771, v772);
    v45 = vdupq_n_s16(0x157Du);
    v46 = vdupq_n_s16(0x17B6u);
    v729 = vmlal_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v46.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v45.i8);
    v728 = vmlal_high_s16(vmull_high_s16(v43, v46), v44, v45);
    v47 = vdupq_n_s16(0xEA83u);
    v726 = vmlal_high_s16(vmull_high_s16(v43, v47), v44, v46);
    v727 = vmlal_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v47.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v46.i8);
    v48 = vqsubq_s16(v724, v31);
    v49 = vqsubq_s16(v41, v35);
    v50 = vqsubq_s16(v42, v34);
    v51 = vqsubq_s16(v722, v30);
    v52 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v924.i8);
    v53 = vmlal_high_s16(vmull_high_s16(v48, v922), v51, v924);
    v54 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v867.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v922.i8);
    v55 = vmlal_high_s16(vmull_high_s16(v48, v867), v51, v922);
    v56 = vrshrn_high_n_s32(vrshrn_n_s32(v52, 0xDuLL), v53, 0xDuLL);
    v57 = vrshrn_high_n_s32(vrshrn_n_s32(v54, 0xDuLL), v55, 0xDuLL);
    v58 = vqsubq_s16(v49, v57);
    v59 = vqsubq_s16(v50, v56);
    v60 = vdupq_n_s16(0x1CEDu);
    v61 = vdupq_n_s16(0xDAFu);
    v725 = vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v61.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v60.i8);
    v723 = vmlal_high_s16(vmull_high_s16(v58, v61), v59, v60);
    v62 = vdupq_n_s16(0xE313u);
    v720 = vmlal_high_s16(vmull_high_s16(v58, v62), v59, v61);
    v721 = vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v61.i8);
    v63 = vqaddq_s16(v49, v57);
    v64 = vqaddq_s16(v50, v56);
    v65 = vdupq_n_s16(0xF538u);
    v66 = vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v65.i8);
    v67 = vmull_high_s16(v63, v65);
    v68 = vdupq_n_s16(0x1E21u);
    v718 = vmlal_high_s16(v67, v64, v68);
    v719 = vmlal_s16(v66, *(int16x4_t *)v64.i8, *(int16x4_t *)v68.i8);
    v69 = vqsubq_s16(v736, v15);
    v70 = vqsubq_s16(v902, v17);
    v71 = vqsubq_s16(v732, v21);
    v72 = vqsubq_s16(v39, v25);
    v73 = vqsubq_s16(v40, v24);
    v74 = vqsubq_s16(v730, v20);
    v75 = vqsubq_s16(v898, v16);
    v76 = vqsubq_s16(v738, v14);
    v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v918.i8);
    v78 = vmlal_high_s16(vmull_high_s16(v69, v926), v76, v918);
    v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v926.i8);
    v80 = vmlal_high_s16(vmull_high_s16(v69, v916), v76, v926);
    v81 = vrshrn_high_n_s32(vrshrn_n_s32(v77, 0xDuLL), v78, 0xDuLL);
    v82 = vrshrn_high_n_s32(vrshrn_n_s32(v79, 0xDuLL), v80, 0xDuLL);
    v83 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v926), v75, v918), 0xDuLL);
    v84 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v926.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v916), v75, v926), 0xDuLL);
    v85 = vqsubq_s16(v71, v84);
    v86 = vqsubq_s16(v74, v83);
    v87 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v909.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v911.i8);
    v88 = vmlal_high_s16(vmull_high_s16(v85, v909), v86, v911);
    v89 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v909.i8);
    v90 = vmlal_high_s16(vmull_high_s16(v85, v907), v86, v909);
    v91 = vrshrn_high_n_s32(vrshrn_n_s32(v87, 0xDuLL), v88, 0xDuLL);
    v92 = vrshrn_high_n_s32(vrshrn_n_s32(v89, 0xDuLL), v90, 0xDuLL);
    v93 = vqsubq_s16(v72, v82);
    v94 = vqsubq_s16(v73, v81);
    v95 = vqaddq_s16(v93, v92);
    v96 = vqaddq_s16(v94, v91);
    v97 = vdupq_n_s16(0x1F0Au);
    v98 = vdupq_n_s16(0x7C6u);
    v739 = vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v98.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v97.i8);
    v737 = vmlal_high_s16(vmull_high_s16(v95, v98), v96, v97);
    v99 = vdupq_n_s16(0xE0F6u);
    v731 = vmlal_high_s16(vmull_high_s16(v95, v99), v96, v98);
    v733 = vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v98.i8);
    v100 = vqsubq_s16(v93, v92);
    v101 = vqsubq_s16(v94, v91);
    v102 = vdupq_n_s16(0x1074u);
    v103 = vdupq_n_s16(0x1B73u);
    v717 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v102.i8);
    v716 = vmlal_high_s16(vmull_high_s16(v100, v103), v101, v102);
    v104 = vdupq_n_s16(0xEF8Cu);
    v714 = vmlal_high_s16(vmull_high_s16(v100, v104), v101, v103);
    v715 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v104.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v103.i8);
    v105 = vqaddq_s16(v71, v84);
    v106 = vqaddq_s16(v72, v82);
    v107 = vqaddq_s16(v73, v81);
    v108 = vqaddq_s16(v74, v83);
    v109 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v909.i8);
    v110 = vmlal_high_s16(vmull_high_s16(v105, v907), v108, v909);
    v111 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v866.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v907.i8);
    v112 = vmlal_high_s16(vmull_high_s16(v105, v866), v108, v907);
    v113 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xDuLL), v110, 0xDuLL);
    v114 = vrshrn_high_n_s32(vrshrn_n_s32(v111, 0xDuLL), v112, 0xDuLL);
    v115 = vqsubq_s16(v106, v114);
    v116 = vqsubq_s16(v107, v113);
    v117 = vdupq_n_s16(0x19B4u);
    v118 = vdupq_n_s16(0x1310u);
    v713 = vmlal_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v118.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v117.i8);
    v712 = vmlal_high_s16(vmull_high_s16(v115, v118), v116, v117);
    v119 = vdupq_n_s16(0xE64Cu);
    v710 = vmlal_high_s16(vmull_high_s16(v115, v119), v116, v118);
    v711 = vmlal_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v118.i8);
    v120 = vqaddq_s16(v106, v114);
    v121 = vqaddq_s16(v107, v113);
    v122 = vdupq_n_s16(0x4B2u);
    v123 = vdupq_n_s16(0x1FA7u);
    v709 = vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v121.i8, *(int16x4_t *)v122.i8);
    v708 = vmlal_high_s16(vmull_high_s16(v120, v123), v121, v122);
    v124 = vdupq_n_s16(0xFB4Eu);
    v706 = vmlal_high_s16(vmull_high_s16(v120, v124), v121, v123);
    v707 = vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v124.i8), *(int16x4_t *)v121.i8, *(int16x4_t *)v123.i8);
    v903 = vqsubq_s16(v1024, v1025);
    v899 = vqsubq_s16(v1023, v1026);
    v886 = vqsubq_s16(v1022, v1027);
    v895 = vqsubq_s16(v1021, v1028);
    v755 = vqsubq_s16(v1019, v1030);
    v758 = vqsubq_s16(v1020, v1029);
    v889 = vqsubq_s16(v1018, v1031);
    v883 = vqsubq_s16(v1017, v1032);
    v125 = vqsubq_s16(v1016, v1033);
    v126 = vqsubq_s16(v1015, v1034);
    v127 = vqsubq_s16(v1014, v1035);
    v128 = vqsubq_s16(v1013, v1036);
    v129 = vqsubq_s16(v1012, v1037);
    v130 = vqsubq_s16(v1011, v1038);
    v131 = vqsubq_s16(v1010, v1039);
    v132 = vqsubq_s16(v1009, v1040);
    v133 = vqsubq_s16(v1008, v1041);
    v134 = vqsubq_s16(v1007, v1042);
    v135 = vqsubq_s16(v1005, v1044);
    v136 = vqsubq_s16(v1004, v1045);
    v137 = vqsubq_s16(v1003, v1046);
    v138 = vqsubq_s16(v1002, v1047);
    v139 = vqsubq_s16(v1001, v1048);
    v749 = vqsubq_s16(v1000, v1049);
    v767 = vqsubq_s16(v998, v1051);
    v763 = vqsubq_s16(v999, v1050);
    v765 = vqsubq_s16(v997, v1052);
    v880 = vqsubq_s16(v996, v1053);
    v742 = vqsubq_s16(v995, v1054);
    v892 = vqsubq_s16(v994, v1055);
    v877 = vqsubq_s16(v993, v1056);
    v761 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v869), v139, v869), 0xDuLL);
    v751 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v868), v139, v869), 0xDuLL);
    v753 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v869), v138, v869), 0xDuLL);
    v744 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v868), v138, v869), 0xDuLL);
    v747 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v869), v137, v869), 0xDuLL);
    v740 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v868), v137, v869), 0xDuLL);
    v734 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v869), v136, v869), 0xDuLL);
    v700 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v868), v136, v869), 0xDuLL);
    v871 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v129, v869), v135, v869), 0xDuLL);
    v140 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v129, v868), v135, v869), 0xDuLL);
    v141 = vqsubq_s16(v1006, v1043);
    v698 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v130, v868), v141, v869), 0xDuLL);
    v699 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v130, v869), v141, v869), 0xDuLL);
    v702 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v131, v868), v134, v869), 0xDuLL);
    v704 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v131, v869), v134, v869), 0xDuLL);
    v874 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v132, v869), v133, v869), 0xDuLL);
    v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v132, v868), v133, v869), 0xDuLL);
    v143 = vqaddq_s16(v758, v700);
    v144 = vqaddq_s16(v765, v734);
    v145 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v918), v144, v920), 0xDuLL);
    v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v926), v144, v918), 0xDuLL);
    v147 = vqaddq_s16(v755, v740);
    v148 = vqaddq_s16(v767, v747);
    v149 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v918), v148, v920), 0xDuLL);
    v150 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v926), v148, v918), 0xDuLL);
    v151 = vqaddq_s16(v889, v744);
    v152 = vqaddq_s16(v763, v753);
    v153 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v918), v152, v920), 0xDuLL);
    v154 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v926), v152, v918), 0xDuLL);
    v155 = vqaddq_s16(v883, v751);
    v156 = vqaddq_s16(v749, v761);
    v157 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v156.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v155, v918), v156, v920), 0xDuLL);
    v158 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v156.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v155, v926), v156, v918), 0xDuLL);
    v791 = vqaddq_s16(v886, v698);
    v793 = vqaddq_s16(v742, v699);
    v159 = vqaddq_s16(v791, v150);
    v160 = vqaddq_s16(v793, v149);
    v161 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v924.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v913.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v159, v924), v160, v913), 0xDuLL);
    v162 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v924.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v159, v922), v160, v924), 0xDuLL);
    v163 = vqaddq_s16(v895, v140);
    v164 = vqaddq_s16(v880, v871);
    v165 = vqaddq_s16(v163, v146);
    v166 = vqaddq_s16(v164, v145);
    v167 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v165.i8, *(int16x4_t *)v924.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v913.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v165, v924), v166, v913), 0xDuLL);
    v168 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v165.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v924.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v165, v922), v166, v924), 0xDuLL);
    v169 = vqaddq_s16(v899, v702);
    v170 = vqaddq_s16(v892, v704);
    v171 = vqaddq_s16(v169, v154);
    v172 = vqaddq_s16(v170, v153);
    v173 = vqaddq_s16(v171, v162);
    v174 = vqaddq_s16(v172, v161);
    v823 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v863.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v865.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v173, v863), v174, v865), 0xDuLL);
    v822 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v861.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v863.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v173, v861), v174, v863), 0xDuLL);
    v175 = vqaddq_s16(v903, v142);
    v176 = vqaddq_s16(v877, v874);
    v177 = vqaddq_s16(v175, v158);
    v178 = vqaddq_s16(v176, v157);
    v807 = vqaddq_s16(v177, v168);
    v808 = vqaddq_s16(v178, v167);
    v179 = vqsubq_s16(v807, v822);
    v180 = vqsubq_s16(v808, v823);
    v181 = vdupq_n_s16(0x1611u);
    v182 = vdupq_n_s16(0x172Du);
    v806 = vmlal_s16(vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v182.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v181.i8);
    v805 = vmlal_high_s16(vmull_high_s16(v179, v182), v180, v181);
    v183 = vdupq_n_s16(0xE9EFu);
    v804 = vmlal_s16(vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v183.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v182.i8);
    v803 = vmlal_high_s16(vmull_high_s16(v179, v183), v180, v182);
    v184 = vqsubq_s16(v171, v162);
    v185 = vqsubq_s16(v177, v168);
    v186 = vqsubq_s16(v178, v167);
    v187 = vqsubq_s16(v172, v161);
    v188 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v861.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v863.i8);
    v189 = vmlal_high_s16(vmull_high_s16(v184, v861), v187, v863);
    v190 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v692.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v861.i8);
    v191 = vmlal_high_s16(vmull_high_s16(v184, v692), v187, v861);
    v192 = vrshrn_high_n_s32(vrshrn_n_s32(v188, 0xDuLL), v189, 0xDuLL);
    v193 = vrshrn_high_n_s32(vrshrn_n_s32(v190, 0xDuLL), v191, 0xDuLL);
    v194 = vqsubq_s16(v185, v193);
    v195 = vqsubq_s16(v186, v192);
    v196 = vdupq_n_s16(0x1D41u);
    v197 = vdupq_n_s16(0xCF8u);
    v802 = vmlal_s16(vmull_s16(*(int16x4_t *)v194.i8, *(int16x4_t *)v197.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v196.i8);
    v801 = vmlal_high_s16(vmull_high_s16(v194, v197), v195, v196);
    v198 = vdupq_n_s16(0xE2BFu);
    v800 = vmlal_s16(vmull_s16(*(int16x4_t *)v194.i8, *(int16x4_t *)v198.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v197.i8);
    v799 = vmlal_high_s16(vmull_high_s16(v194, v198), v195, v197);
    v199 = vqaddq_s16(v185, v193);
    v200 = vqaddq_s16(v186, v192);
    v201 = vdupq_n_s16(0xB84u);
    v202 = vdupq_n_s16(0x1DDBu);
    v798 = vmlal_s16(vmull_s16(*(int16x4_t *)v199.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v201.i8);
    v797 = vmlal_high_s16(vmull_high_s16(v199, v202), v200, v201);
    v203 = vdupq_n_s16(0xF47Cu);
    v796 = vmlal_s16(vmull_s16(*(int16x4_t *)v199.i8, *(int16x4_t *)v203.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v202.i8);
    v795 = vmlal_high_s16(vmull_high_s16(v199, v203), v200, v202);
    v204 = vqsubq_s16(v163, v146);
    v205 = vqsubq_s16(v791, v150);
    v206 = vqsubq_s16(v169, v154);
    v207 = vqsubq_s16(v175, v158);
    v208 = vqsubq_s16(v176, v157);
    v209 = vqsubq_s16(v170, v153);
    v210 = vqsubq_s16(v793, v149);
    v211 = vqsubq_s16(v164, v145);
    v212 = vmlal_s16(vmull_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v924.i8);
    v213 = vmlal_high_s16(vmull_high_s16(v204, v922), v211, v924);
    v214 = vmlal_s16(vmull_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v867.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v922.i8);
    v215 = vmlal_high_s16(vmull_high_s16(v204, v867), v211, v922);
    v216 = vrshrn_high_n_s32(vrshrn_n_s32(v212, 0xDuLL), v213, 0xDuLL);
    v217 = vrshrn_high_n_s32(vrshrn_n_s32(v214, 0xDuLL), v215, 0xDuLL);
    v218 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v924.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v205, v922), v210, v924), 0xDuLL);
    v219 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v867.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v922.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v205, v867), v210, v922), 0xDuLL);
    v220 = vqsubq_s16(v206, v219);
    v221 = vqsubq_s16(v209, v218);
    v222 = vmlal_s16(vmull_s16(*(int16x4_t *)v220.i8, *(int16x4_t *)v858.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v860.i8);
    v223 = vmlal_high_s16(vmull_high_s16(v220, v858), v221, v860);
    v224 = vmlal_s16(vmull_s16(*(int16x4_t *)v220.i8, *(int16x4_t *)v856.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v858.i8);
    v225 = vmlal_high_s16(vmull_high_s16(v220, v856), v221, v858);
    v226 = vrshrn_high_n_s32(vrshrn_n_s32(v222, 0xDuLL), v223, 0xDuLL);
    v227 = vrshrn_high_n_s32(vrshrn_n_s32(v224, 0xDuLL), v225, 0xDuLL);
    v228 = vqsubq_s16(v207, v217);
    v229 = vqsubq_s16(v208, v216);
    v230 = vqaddq_s16(v228, v227);
    v231 = vqaddq_s16(v229, v226);
    v232 = vdupq_n_s16(0x1F39u);
    v233 = vdupq_n_s16(0x703u);
    v794 = vmlal_s16(vmull_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v233.i8), *(int16x4_t *)v231.i8, *(int16x4_t *)v232.i8);
    v792 = vmlal_high_s16(vmull_high_s16(v230, v233), v231, v232);
    v234 = vdupq_n_s16(0xE0C7u);
    v790 = vmlal_s16(vmull_s16(*(int16x4_t *)v230.i8, *(int16x4_t *)v234.i8), *(int16x4_t *)v231.i8, *(int16x4_t *)v233.i8);
    v789 = vmlal_high_s16(vmull_high_s16(v230, v234), v231, v233);
    v235 = vqsubq_s16(v228, v227);
    v236 = vqsubq_s16(v229, v226);
    v237 = vdupq_n_s16(0x111Fu);
    v238 = vdupq_n_s16(0x1B09u);
    v788 = vmlal_s16(vmull_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v238.i8), *(int16x4_t *)v236.i8, *(int16x4_t *)v237.i8);
    v787 = vmlal_high_s16(vmull_high_s16(v235, v238), v236, v237);
    v239 = vdupq_n_s16(0xEEE1u);
    v786 = vmlal_s16(vmull_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v239.i8), *(int16x4_t *)v236.i8, *(int16x4_t *)v238.i8);
    v785 = vmlal_high_s16(vmull_high_s16(v235, v239), v236, v238);
    v240 = vqaddq_s16(v206, v219);
    v241 = vqaddq_s16(v207, v217);
    v242 = vqaddq_s16(v208, v216);
    v243 = vqaddq_s16(v209, v218);
    v244 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v856.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v858.i8);
    v245 = vmlal_high_s16(vmull_high_s16(v240, v856), v243, v858);
    v246 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v691.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v856.i8);
    v247 = vmlal_high_s16(vmull_high_s16(v240, v691), v243, v856);
    v248 = vrshrn_high_n_s32(vrshrn_n_s32(v244, 0xDuLL), v245, 0xDuLL);
    v249 = vrshrn_high_n_s32(vrshrn_n_s32(v246, 0xDuLL), v247, 0xDuLL);
    v250 = vqsubq_s16(v241, v249);
    v251 = vqsubq_s16(v242, v248);
    v252 = vdupq_n_s16(0x1A2Au);
    v253 = vdupq_n_s16(0x126Du);
    v784 = vmlal_s16(vmull_s16(*(int16x4_t *)v250.i8, *(int16x4_t *)v253.i8), *(int16x4_t *)v251.i8, *(int16x4_t *)v252.i8);
    v783 = vmlal_high_s16(vmull_high_s16(v250, v253), v251, v252);
    v254 = vdupq_n_s16(0xE5D6u);
    v782 = vmlal_s16(vmull_s16(*(int16x4_t *)v250.i8, *(int16x4_t *)v254.i8), *(int16x4_t *)v251.i8, *(int16x4_t *)v253.i8);
    v781 = vmlal_high_s16(vmull_high_s16(v250, v254), v251, v253);
    v255 = vqaddq_s16(v241, v249);
    v256 = vqaddq_s16(v242, v248);
    v257 = vdupq_n_s16(0x579u);
    v258 = vdupq_n_s16(0x1F87u);
    v780 = vmlal_s16(vmull_s16(*(int16x4_t *)v255.i8, *(int16x4_t *)v258.i8), *(int16x4_t *)v256.i8, *(int16x4_t *)v257.i8);
    v779 = vmlal_high_s16(vmull_high_s16(v255, v258), v256, v257);
    v259 = vdupq_n_s16(0xFA87u);
    v769 = vmlal_high_s16(vmull_high_s16(v255, v259), v256, v258);
    v770 = vmlal_s16(vmull_s16(*(int16x4_t *)v255.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v256.i8, *(int16x4_t *)v258.i8);
    v260 = vqsubq_s16(v883, v751);
    v261 = vqsubq_s16(v889, v744);
    v262 = vqsubq_s16(v755, v740);
    v263 = vqsubq_s16(v758, v700);
    v756 = vqsubq_s16(v895, v140);
    v759 = vqsubq_s16(v886, v698);
    v264 = vqsubq_s16(v899, v702);
    v265 = vqsubq_s16(v903, v142);
    v745 = vqsubq_s16(v877, v874);
    v266 = vqsubq_s16(v892, v704);
    v267 = vqsubq_s16(v742, v699);
    v268 = vqsubq_s16(v880, v871);
    v269 = vqsubq_s16(v765, v734);
    v270 = vqsubq_s16(v767, v747);
    v271 = vqsubq_s16(v763, v753);
    v272 = vqsubq_s16(v749, v761);
    v273 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v272.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v260, v926), v272, v918), 0xDuLL);
    v274 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v272.i8, *(int16x4_t *)v926.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v260, v916), v272, v926), 0xDuLL);
    v275 = vmlal_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v918.i8);
    v276 = vmlal_high_s16(vmull_high_s16(v261, v926), v271, v918);
    v277 = vmlal_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v926.i8);
    v278 = vmlal_high_s16(vmull_high_s16(v261, v916), v271, v926);
    v279 = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xDuLL), v276, 0xDuLL);
    v280 = vrshrn_high_n_s32(vrshrn_n_s32(v277, 0xDuLL), v278, 0xDuLL);
    v281 = vmlal_s16(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v926.i8);
    v282 = vmlal_high_s16(vmull_high_s16(v262, v916), v270, v926);
    v283 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v262, v926), v270, v918), 0xDuLL);
    v284 = vrshrn_high_n_s32(vrshrn_n_s32(v281, 0xDuLL), v282, 0xDuLL);
    v285 = vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v926.i8);
    v286 = vmlal_high_s16(vmull_high_s16(v263, v916), v269, v926);
    v287 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v263, v926), v269, v918), 0xDuLL);
    v288 = vrshrn_high_n_s32(vrshrn_n_s32(v285, 0xDuLL), v286, 0xDuLL);
    v289 = vqsubq_s16(v759, v284);
    v290 = vqsubq_s16(v267, v283);
    v291 = vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v909.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v911.i8);
    v292 = vmlal_high_s16(vmull_high_s16(v289, v909), v290, v911);
    v293 = vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v909.i8);
    v294 = vmlal_high_s16(vmull_high_s16(v289, v907), v290, v909);
    v295 = vrshrn_high_n_s32(vrshrn_n_s32(v291, 0xDuLL), v292, 0xDuLL);
    v296 = vrshrn_high_n_s32(vrshrn_n_s32(v293, 0xDuLL), v294, 0xDuLL);
    v297 = vqsubq_s16(v756, v288);
    v298 = vqsubq_s16(v268, v287);
    v299 = vmlal_s16(vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v909.i8), *(int16x4_t *)v298.i8, *(int16x4_t *)v911.i8);
    v300 = vmlal_high_s16(vmull_high_s16(v297, v909), v298, v911);
    v301 = vmlal_s16(vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v298.i8, *(int16x4_t *)v909.i8);
    v302 = vmlal_high_s16(vmull_high_s16(v297, v907), v298, v909);
    v303 = vrshrn_high_n_s32(vrshrn_n_s32(v299, 0xDuLL), v300, 0xDuLL);
    v304 = vrshrn_high_n_s32(vrshrn_n_s32(v301, 0xDuLL), v302, 0xDuLL);
    v305 = vqsubq_s16(v264, v280);
    v306 = vqsubq_s16(v266, v279);
    v307 = vqaddq_s16(v305, v296);
    v308 = vqaddq_s16(v306, v295);
    v309 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v697.i8), *(int16x4_t *)v308.i8, *(int16x4_t *)v855.i8);
    v310 = vmlal_high_s16(vmull_high_s16(v307, v697), v308, v855);
    v311 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v696.i8), *(int16x4_t *)v308.i8, *(int16x4_t *)v697.i8);
    v312 = vmlal_high_s16(vmull_high_s16(v307, v696), v308, v697);
    v313 = vrshrn_high_n_s32(vrshrn_n_s32(v309, 0xDuLL), v310, 0xDuLL);
    v314 = vrshrn_high_n_s32(vrshrn_n_s32(v311, 0xDuLL), v312, 0xDuLL);
    v315 = vqsubq_s16(v265, v274);
    v316 = vqsubq_s16(v745, v273);
    v317 = vqaddq_s16(v315, v304);
    v318 = vqaddq_s16(v316, v303);
    v319 = vqaddq_s16(v317, v314);
    v320 = vqaddq_s16(v318, v313);
    v321 = vdupq_n_s16(0x1FC2u);
    v322 = vdupq_n_s16(0x3EBu);
    v904 = vmlal_s16(vmull_s16(*(int16x4_t *)v319.i8, *(int16x4_t *)v322.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v321.i8);
    v900 = vmlal_high_s16(vmull_high_s16(v319, v322), v320, v321);
    v323 = vdupq_n_s16(0xE03Eu);
    v896 = vmlal_s16(vmull_s16(*(int16x4_t *)v319.i8, *(int16x4_t *)v323.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v322.i8);
    v893 = vmlal_high_s16(vmull_high_s16(v319, v323), v320, v322);
    v324 = vqsubq_s16(v317, v314);
    v325 = vqsubq_s16(v318, v313);
    v326 = vdupq_n_s16(0x13B0u);
    v327 = vdupq_n_s16(0x193Au);
    v752 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v327.i8), *(int16x4_t *)v325.i8, *(int16x4_t *)v326.i8);
    v890 = vmlal_high_s16(vmull_high_s16(v324, v327), v325, v326);
    v328 = vdupq_n_s16(0xEC50u);
    v884 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v328.i8), *(int16x4_t *)v325.i8, *(int16x4_t *)v327.i8);
    v887 = vmlal_high_s16(vmull_high_s16(v324, v328), v325, v327);
    v329 = vqsubq_s16(v305, v296);
    v330 = vqsubq_s16(v315, v304);
    v331 = vqsubq_s16(v316, v303);
    v332 = vqsubq_s16(v306, v295);
    v333 = vmlal_s16(vmull_s16(*(int16x4_t *)v329.i8, *(int16x4_t *)v696.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v697.i8);
    v334 = vmlal_high_s16(vmull_high_s16(v329, v696), v332, v697);
    v335 = vmlal_s16(vmull_s16(*(int16x4_t *)v329.i8, *(int16x4_t *)v690.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v696.i8);
    v336 = vmlal_high_s16(vmull_high_s16(v329, v690), v332, v696);
    v337 = vrshrn_high_n_s32(vrshrn_n_s32(v333, 0xDuLL), v334, 0xDuLL);
    v338 = vrshrn_high_n_s32(vrshrn_n_s32(v335, 0xDuLL), v336, 0xDuLL);
    v339 = vqsubq_s16(v330, v338);
    v340 = vqsubq_s16(v331, v337);
    v341 = vdupq_n_s16(0x1BD8u);
    v342 = vdupq_n_s16(0xFC6u);
    v881 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v342.i8), *(int16x4_t *)v340.i8, *(int16x4_t *)v341.i8);
    v878 = vmlal_high_s16(vmull_high_s16(v339, v342), v340, v341);
    v343 = vdupq_n_s16(0xE428u);
    v872 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v343.i8), *(int16x4_t *)v340.i8, *(int16x4_t *)v342.i8);
    v875 = vmlal_high_s16(vmull_high_s16(v339, v343), v340, v342);
    v344 = vqaddq_s16(v330, v338);
    v345 = vqaddq_s16(v331, v337);
    v346 = vdupq_n_s16(0x889u);
    v347 = vdupq_n_s16(0x1ED7u);
    v768 = vmlal_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v347.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v346.i8);
    v766 = vmlal_high_s16(vmull_high_s16(v344, v347), v345, v346);
    v348 = vdupq_n_s16(0xF777u);
    v764 = vmlal_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v348.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v347.i8);
    v750 = vmlal_high_s16(vmull_high_s16(v344, v348), v345, v347);
    v349 = vqaddq_s16(v756, v288);
    v350 = vqaddq_s16(v759, v284);
    v351 = vqaddq_s16(v264, v280);
    v352 = vqaddq_s16(v265, v274);
    v353 = vqaddq_s16(v745, v273);
    v354 = vqaddq_s16(v266, v279);
    v355 = vqaddq_s16(v267, v283);
    v356 = vqaddq_s16(v268, v287);
    v357 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v909.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v907), v356, v909), 0xDuLL);
    v358 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v866.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v907.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v866), v356, v907), 0xDuLL);
    v359 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v909.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v350, v907), v355, v909), 0xDuLL);
    v360 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v866.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v907.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v350, v866), v355, v907), 0xDuLL);
    v361 = vqsubq_s16(v351, v360);
    v362 = vqsubq_s16(v354, v359);
    v363 = vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v693.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v694.i8);
    v364 = vmlal_high_s16(vmull_high_s16(v361, v693), v362, v694);
    v365 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v694.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v695.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v361, v694), v362, v695), 0xDuLL);
    v366 = vrshrn_high_n_s32(vrshrn_n_s32(v363, 0xDuLL), v364, 0xDuLL);
    v367 = vqsubq_s16(v352, v358);
    v368 = vqsubq_s16(v353, v357);
    v369 = vqsubq_s16(v367, v366);
    v370 = vqsubq_s16(v368, v365);
    v371 = vdupq_n_s16(0xE63u);
    v372 = vdupq_n_s16(0x1C95u);
    v762 = vmlal_s16(vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v372.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v371.i8);
    v760 = vmlal_high_s16(vmull_high_s16(v369, v372), v370, v371);
    v373 = vdupq_n_s16(0xF19Du);
    v754 = vmlal_high_s16(vmull_high_s16(v369, v373), v370, v372);
    v757 = vmlal_s16(vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v373.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v372.i8);
    v374 = vqaddq_s16(v351, v360);
    v375 = vqaddq_s16(v352, v358);
    v376 = vqaddq_s16(v353, v357);
    v377 = vqaddq_s16(v354, v359);
    v378 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v693.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v694.i8);
    v379 = vmlal_high_s16(vmull_high_s16(v374, v693), v377, v694);
    v380 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v689.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v693.i8);
    v381 = vmlal_high_s16(vmull_high_s16(v374, v689), v377, v693);
    v382 = vrshrn_high_n_s32(vrshrn_n_s32(v378, 0xDuLL), v379, 0xDuLL);
    v383 = vrshrn_high_n_s32(vrshrn_n_s32(v380, 0xDuLL), v381, 0xDuLL);
    v384 = vqsubq_s16(v375, v383);
    v385 = vqsubq_s16(v376, v382);
    v386 = vdupq_n_s16(0x183Bu);
    v387 = vdupq_n_s16(0x14E7u);
    v748 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v387.i8), *(int16x4_t *)v385.i8, *(int16x4_t *)v386.i8);
    v746 = vmlal_high_s16(vmull_high_s16(v384, v387), v385, v386);
    v388 = vdupq_n_s16(0xE7C5u);
    v741 = vmlal_high_s16(vmull_high_s16(v384, v388), v385, v387);
    v743 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v388.i8), *(int16x4_t *)v385.i8, *(int16x4_t *)v387.i8);
    v389 = vqaddq_s16(v375, v383);
    v390 = vqaddq_s16(v376, v382);
    v391 = vdupq_n_s16(0x25Bu);
    v392 = vdupq_n_s16(0x1FEAu);
    v705 = vmlal_s16(vmull_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v390.i8, *(int16x4_t *)v391.i8);
    v735 = vmlal_high_s16(vmull_high_s16(v389, v392), v390, v391);
    v393 = vdupq_n_s16(0xFDA5u);
    v701 = vmlal_high_s16(vmull_high_s16(v389, v393), v390, v392);
    v703 = vmlal_s16(vmull_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v393.i8), *(int16x4_t *)v390.i8, *(int16x4_t *)v392.i8);
    v394 = vqaddq_s16(v776, v775);
    v395 = vqaddq_s16(v810, v809);
    v396 = vqaddq_s16(v825, v824);
    v397 = vqaddq_s16(v817, v815);
    v398 = vqaddq_s16(v841, v842);
    v399 = vqaddq_s16(v844, v846);
    v400 = vqaddq_s16(v838, v836);
    v401 = vqaddq_s16(v833, v829);
    v402 = vqaddq_s16(v835, v831);
    v403 = vqaddq_s16(v840, v839);
    v404 = vqaddq_s16(v848, v849);
    v405 = vqaddq_s16(v851, v853);
    v406 = vqaddq_s16(v820, v819);
    v407 = vqaddq_s16(v827, v826);
    v408 = vqaddq_s16(v813, v812);
    v409 = vqaddq_s16(v778, v777);
    v410 = vqaddq_s16(v401, v402);
    v411 = vqsubq_s16(v401, v402);
    v412 = vqaddq_s16(v400, v403);
    v413 = vqsubq_s16(v400, v403);
    v414 = vqaddq_s16(v399, v404);
    v415 = vqsubq_s16(v399, v404);
    v416 = vqaddq_s16(v398, v405);
    v417 = vqsubq_s16(v398, v405);
    v418 = vqaddq_s16(v397, v406);
    v419 = vqsubq_s16(v397, v406);
    v420 = vqaddq_s16(v396, v407);
    v421 = vqsubq_s16(v396, v407);
    v422 = vqaddq_s16(v395, v408);
    v423 = vqsubq_s16(v395, v408);
    v424 = vqaddq_s16(v394, v409);
    v425 = vqsubq_s16(v394, v409);
    v426 = vqaddq_s16(v418, v416);
    v427 = vqsubq_s16(v418, v416);
    v428 = vqaddq_s16(v420, v414);
    v429 = vqsubq_s16(v420, v414);
    v430 = vqaddq_s16(v422, v412);
    v431 = vqsubq_s16(v422, v412);
    v432 = vqaddq_s16(v424, v410);
    v433 = vqsubq_s16(v424, v410);
    v434 = vmlal_s16(vmull_s16(*(int16x4_t *)v415.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v421.i8, *(int16x4_t *)v869.i8);
    v435 = vmlal_high_s16(vmull_high_s16(v415, v869), v421, v869);
    v436 = vmlal_s16(vmull_s16(*(int16x4_t *)v415.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v421.i8, *(int16x4_t *)v869.i8);
    v437 = vmlal_high_s16(vmull_high_s16(v415, v868), v421, v869);
    v438 = vrshrn_high_n_s32(vrshrn_n_s32(v434, 0xDuLL), v435, 0xDuLL);
    v439 = vrshrn_high_n_s32(vrshrn_n_s32(v436, 0xDuLL), v437, 0xDuLL);
    v440 = vmlal_s16(vmull_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v869.i8);
    v441 = vmlal_high_s16(vmull_high_s16(v417, v869), v419, v869);
    v442 = vmlal_s16(vmull_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v869.i8);
    v443 = vmlal_high_s16(vmull_high_s16(v417, v868), v419, v869);
    v444 = vrshrn_high_n_s32(vrshrn_n_s32(v440, 0xDuLL), v441, 0xDuLL);
    v445 = vrshrn_high_n_s32(vrshrn_n_s32(v442, 0xDuLL), v443, 0xDuLL);
    v446 = vqaddq_s16(v430, v428);
    v447 = vqsubq_s16(v430, v428);
    v448 = vqaddq_s16(v432, v426);
    v449 = vqsubq_s16(v432, v426);
    v450 = vmlal_s16(vmull_s16(*(int16x4_t *)v429.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v431.i8, *(int16x4_t *)v869.i8);
    v451 = vmlal_high_s16(vmull_high_s16(v429, v869), v431, v869);
    v452 = vmlal_s16(vmull_s16(*(int16x4_t *)v429.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v431.i8, *(int16x4_t *)v869.i8);
    v453 = vmlal_high_s16(vmull_high_s16(v429, v868), v431, v869);
    v454 = vrshrn_high_n_s32(vrshrn_n_s32(v450, 0xDuLL), v451, 0xDuLL);
    v455 = vrshrn_high_n_s32(vrshrn_n_s32(v452, 0xDuLL), v453, 0xDuLL);
    v456 = vqaddq_s16(v413, v439);
    v457 = vqsubq_s16(v413, v439);
    v458 = vqaddq_s16(v411, v445);
    v459 = vqsubq_s16(v411, v445);
    v460 = vqsubq_s16(v423, v438);
    v461 = vqaddq_s16(v423, v438);
    v462 = vqsubq_s16(v425, v444);
    v463 = vqaddq_s16(v425, v444);
    v847 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v869.i8), *(int16x4_t *)v446.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v869), v446, v869), 0xDuLL);
    v828 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v868.i8), *(int16x4_t *)v446.i8, *(int16x4_t *)v869.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v868), v446, v869), 0xDuLL);
    v854 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v447.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v449.i8, *(int16x4_t *)v920.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v447, v918), v449, v920), 0xDuLL);
    v837 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v447.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v449.i8, *(int16x4_t *)v918.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v447, v926), v449, v918), 0xDuLL);
    v464 = vqaddq_s16(v427, v455);
    v465 = vqsubq_s16(v427, v455);
    v466 = vqsubq_s16(v433, v454);
    v467 = vqaddq_s16(v433, v454);
    v468 = vmlal_s16(vmull_s16(*(int16x4_t *)v456.i8, *(int16x4_t *)v918.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v920.i8);
    v469 = vmlal_high_s16(vmull_high_s16(v456, v918), v461, v920);
    v470 = vmlal_s16(vmull_s16(*(int16x4_t *)v456.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v918.i8);
    v471 = vmlal_high_s16(vmull_high_s16(v456, v926), v461, v918);
    v472 = vrshrn_high_n_s32(vrshrn_n_s32(v468, 0xDuLL), v469, 0xDuLL);
    v473 = vrshrn_high_n_s32(vrshrn_n_s32(v470, 0xDuLL), v471, 0xDuLL);
    v474 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v926.i8), *(int16x4_t *)v460.i8, *(int16x4_t *)v918.i8);
    v475 = vmlal_high_s16(vmull_high_s16(v457, v926), v460, v918);
    v476 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v916.i8), *(int16x4_t *)v460.i8, *(int16x4_t *)v926.i8);
    v477 = vmlal_high_s16(vmull_high_s16(v457, v916), v460, v926);
    v478 = vrshrn_high_n_s32(vrshrn_n_s32(v474, 0xDuLL), v475, 0xDuLL);
    v479 = vrshrn_high_n_s32(vrshrn_n_s32(v476, 0xDuLL), v477, 0xDuLL);
    v845 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v464.i8, *(int16x4_t *)v924.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v913.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v464, v924), v467, v913), 0xDuLL);
    v830 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v464.i8, *(int16x4_t *)v922.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v924.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v464, v922), v467, v924), 0xDuLL);
    v818 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v909.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v911.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v909), v466, v911), 0xDuLL);
    v852 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v907.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v909.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v907), v466, v909), 0xDuLL);
    v480 = vqaddq_s16(v458, v473);
    v481 = vqsubq_s16(v458, v473);
    v482 = vqsubq_s16(v459, v479);
    v483 = vqaddq_s16(v459, v479);
    v484 = vqaddq_s16(v462, v478);
    v485 = vqsubq_s16(v462, v478);
    v486 = vqsubq_s16(v463, v472);
    v487 = vqaddq_s16(v463, v472);
    v832 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v863.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v865.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v480, v863), v487, v865), 0xDuLL);
    v821 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v861.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v863.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v480, v861), v487, v863), 0xDuLL);
    v488 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v858.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v860.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v858), v486, v860), 0xDuLL);
    v850 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v856.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v858.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v856), v486, v858), 0xDuLL);
    v843 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v697.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v855.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v697), v485, v855), 0xDuLL);
    v489 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v696.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v697.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v696), v485, v697), 0xDuLL);
    v811 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v694.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v695.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v694), v484, v695), 0xDuLL);
    v834 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v693.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v694.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v693), v484, v694), 0xDuLL);
    v490 = vqaddq_s16(v774, v773);
    v491 = vqaddq_s16(v771, v772);
    v492 = vdupq_n_s16(0xE00Au);
    v493 = vdupq_n_s16(0x192u);
    v816 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v493.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v688.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v493), v491, v688), 0xDuLL);
    v814 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v492.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v493.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v492), v491, v493), 0xDuLL);
    v494 = vqaddq_s16(v807, v822);
    v495 = (int8x16_t)vqaddq_s16(v367, v366);
    v496 = (int8x16_t)vqaddq_s16(v368, v365);
    v497 = vqaddq_s16(v808, v823);
    v498 = vdupq_n_s16(0x1FFEu);
    v499 = vmlal_s16(vmull_s16(*(int16x4_t *)v494.i8, (int16x4_t)0xC900C900C900C9), *(int16x4_t *)v497.i8, *(int16x4_t *)v498.i8);
    v491.i64[0] = 0xC900C900C900C9;
    v491.i64[1] = 0xC900C900C900C9;
    v500 = vmlal_high_s16(vmull_high_s16(v494, v491), v497, v498);
    v501 = vdupq_n_s16(0xE002u);
    v502 = vdupq_n_s16(0x1E63u);
    v503 = vmlal_s16(vmull_s16(*(int16x4_t *)v495.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), *(int16x4_t *)v496.i8, *(int16x4_t *)v502.i8);
    v504 = vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v495, v495, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v496, v502);
    v505 = vdupq_n_s16(0xE19Du);
    v1025 = vrshrq_n_s16(v828, 2uLL);
    v1026 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v806, 0xDuLL), v805, 0xDuLL), 2uLL);
    v1027 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v729, 0xDuLL), v728, 0xDuLL), 2uLL);
    v1028 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v743, 0xDuLL), v741, 0xDuLL), 2uLL);
    v1029 = vrshrq_n_s16(v488, 2uLL);
    v1030 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v752, 0xDuLL), v890, 0xDuLL), 2uLL);
    v1031 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v711, 0xDuLL), v710, 0xDuLL), 2uLL);
    v1032 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v782, 0xDuLL), v781, 0xDuLL), 2uLL);
    v1033 = vrshrq_n_s16(v818, 2uLL);
    v1034 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v788, 0xDuLL), v787, 0xDuLL), 2uLL);
    v1035 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v717, 0xDuLL), v716, 0xDuLL), 2uLL);
    v1036 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v872, 0xDuLL), v875, 0xDuLL), 2uLL);
    v1037 = vrshrq_n_s16(v489, 2uLL);
    v1038 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v762, 0xDuLL), v760, 0xDuLL), 2uLL);
    v1039 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v721, 0xDuLL), v720, 0xDuLL), 2uLL);
    v1040 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v800, 0xDuLL), v799, 0xDuLL), 2uLL);
    v1041 = vrshrq_n_s16(v837, 2uLL);
    v1042 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v798, 0xDuLL), v797, 0xDuLL), 2uLL);
    v1043 = vrshrq_n_s16(v1043, 2uLL);
    v1044 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v495.i8, *(int16x4_t *)v505.i8), *(int16x4_t *)v496.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v496, v496, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v495, v505), 0xDuLL), 2uLL);
    v1045 = vrshrq_n_s16(v811, 2uLL);
    v1046 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v768, 0xDuLL), v766, 0xDuLL), 2uLL);
    v1047 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v733, 0xDuLL), v731, 0xDuLL), 2uLL);
    v1048 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v790, 0xDuLL), v789, 0xDuLL), 2uLL);
    v1049 = vrshrq_n_s16(v830, 2uLL);
    v1050 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v780, 0xDuLL), v779, 0xDuLL), 2uLL);
    v1051 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v709, 0xDuLL), v708, 0xDuLL), 2uLL);
    v1052 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v896, 0xDuLL), v893, 0xDuLL), 2uLL);
    v1053 = vrshrq_n_s16(v821, 2uLL);
    v1054 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v705, 0xDuLL), v735, 0xDuLL), 2uLL);
    v1055 = vrshrq_n_s16(v814, 2uLL);
    v1056 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v494.i8, *(int16x4_t *)v501.i8), *(int16x4_t *)v497.i8, (int16x4_t)0xC900C900C900C9), 0xDuLL), vmlal_high_s16(vmull_high_s16(v494, v501), v497, v491), 0xDuLL), 2uLL);
    v993 = vrshrq_n_s16(v847, 2uLL);
    v994 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v499, 0xDuLL), v500, 0xDuLL), 2uLL);
    v506 = (int32x4_t)vtrn1q_s16(v993, v994);
    v507 = (int32x4_t)vtrn2q_s16(v993, v994);
    v995 = vrshrq_n_s16(v816, 2uLL);
    v996 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v703, 0xDuLL), v701, 0xDuLL), 2uLL);
    v508 = (int32x4_t)vtrn1q_s16(v995, v996);
    v509 = (int32x4_t)vtrn2q_s16(v995, v996);
    v997 = vrshrq_n_s16(v832, 2uLL);
    v998 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v904, 0xDuLL), v900, 0xDuLL), 2uLL);
    v510 = (int32x4_t)vtrn1q_s16(v997, v998);
    v511 = (int32x4_t)vtrn2q_s16(v997, v998);
    v999 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v707, 0xDuLL), v706, 0xDuLL), 2uLL);
    v1000 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v770, 0xDuLL), v769, 0xDuLL), 2uLL);
    v512 = (int32x4_t)vtrn1q_s16(v999, v1000);
    v513 = (int32x4_t)vtrn2q_s16(v999, v1000);
    v514 = (int64x2_t)vtrn1q_s32(v506, v508);
    v515 = (int64x2_t)vtrn2q_s32(v506, v508);
    v516 = (int64x2_t)vtrn1q_s32(v507, v509);
    v517 = (int64x2_t)vtrn2q_s32(v507, v509);
    v518 = (int64x2_t)vtrn1q_s32(v510, v512);
    v519 = (int64x2_t)vtrn2q_s32(v510, v512);
    v520 = (int64x2_t)vtrn1q_s32(v511, v513);
    v521 = (int64x2_t)vtrn2q_s32(v511, v513);
    v522 = vzip1q_s64(v514, v518);
    v523 = vzip2q_s64(v514, v518);
    v524 = vzip1q_s64(v516, v520);
    v525 = vzip2q_s64(v516, v520);
    v526 = vzip1q_s64(v515, v519);
    v527 = vzip2q_s64(v515, v519);
    v528 = vzip1q_s64(v517, v521);
    v529 = vzip2q_s64(v517, v521);
    v530 = (int64x2_t *)&v992[128 * v7];
    *v530 = v522;
    v530[1] = v524;
    v530[2] = v526;
    v530[3] = v528;
    v530[4] = v523;
    v530[5] = v525;
    v530[6] = v527;
    v531 = vrshrq_n_s16(v845, 2uLL);
    v532 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v794, 0xDuLL), v792, 0xDuLL), 2uLL);
    v1001 = v531;
    v1002 = v532;
    v533 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v739, 0xDuLL), v737, 0xDuLL), 2uLL);
    v534 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v764, 0xDuLL), v750, 0xDuLL), 2uLL);
    v1003 = v533;
    v1004 = v534;
    v535 = vrshrq_n_s16(v834, 2uLL);
    v536 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v503, 0xDuLL), v504, 0xDuLL), 2uLL);
    v1005 = v535;
    v1006 = v536;
    v537 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v719, 0xDuLL), v718, 0xDuLL), 2uLL);
    v538 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v796, 0xDuLL), v795, 0xDuLL), 2uLL);
    v1007 = v537;
    v1008 = v538;
    v530[7] = v529;
    v539 = (int32x4_t)vtrn1q_s16(v531, v532);
    v540 = (int32x4_t)vtrn2q_s16(v531, v532);
    v541 = (int32x4_t)vtrn1q_s16(v533, v534);
    v542 = (int32x4_t)vtrn2q_s16(v533, v534);
    v543 = (int32x4_t)vtrn1q_s16(v535, v536);
    v544 = (int32x4_t)vtrn2q_s16(v535, v536);
    v545 = (int32x4_t)vtrn1q_s16(v537, v538);
    v546 = (int32x4_t)vtrn2q_s16(v537, v538);
    v547 = (int64x2_t)vtrn1q_s32(v539, v541);
    v548 = (int64x2_t)vtrn2q_s32(v539, v541);
    v549 = (int64x2_t)vtrn1q_s32(v540, v542);
    v550 = (int64x2_t)vtrn2q_s32(v540, v542);
    v551 = (int64x2_t)vtrn1q_s32(v543, v545);
    v552 = (int64x2_t)vtrn2q_s32(v543, v545);
    v553 = (int64x2_t)vtrn1q_s32(v544, v546);
    v554 = (int64x2_t)vtrn2q_s32(v544, v546);
    v555 = vzip1q_s64(v547, v551);
    v556 = vzip2q_s64(v547, v551);
    v557 = vzip1q_s64(v549, v553);
    v558 = vzip2q_s64(v549, v553);
    v559 = vzip1q_s64(v548, v552);
    v560 = vzip2q_s64(v548, v552);
    v561 = vzip1q_s64(v550, v554);
    v562 = vzip2q_s64(v550, v554);
    v530[32] = v555;
    v530[33] = v557;
    v530[34] = v559;
    v530[35] = v561;
    v530[36] = v556;
    v530[37] = v558;
    v530[38] = v560;
    v563 = vrshrq_n_s16(v854, 2uLL);
    v564 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v802, 0xDuLL), v801, 0xDuLL), 2uLL);
    v1009 = v563;
    v1010 = v564;
    v565 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v725, 0xDuLL), v723, 0xDuLL), 2uLL);
    v566 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v757, 0xDuLL), v754, 0xDuLL), 2uLL);
    v1011 = v565;
    v1012 = v566;
    v567 = vrshrq_n_s16(v843, 2uLL);
    v568 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v881, 0xDuLL), v878, 0xDuLL), 2uLL);
    v1013 = v567;
    v1014 = v568;
    v569 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v715, 0xDuLL), v714, 0xDuLL), 2uLL);
    v570 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v786, 0xDuLL), v785, 0xDuLL), 2uLL);
    v1015 = v569;
    v1016 = v570;
    v530[39] = v562;
    v571 = (int32x4_t)vtrn1q_s16(v563, v564);
    v572 = (int32x4_t)vtrn2q_s16(v563, v564);
    v573 = (int32x4_t)vtrn1q_s16(v565, v566);
    v574 = (int32x4_t)vtrn2q_s16(v565, v566);
    v575 = (int32x4_t)vtrn1q_s16(v567, v568);
    v576 = (int32x4_t)vtrn2q_s16(v567, v568);
    v577 = (int32x4_t)vtrn1q_s16(v569, v570);
    v578 = (int32x4_t)vtrn2q_s16(v569, v570);
    v579 = (int64x2_t)vtrn1q_s32(v571, v573);
    v580 = (int64x2_t)vtrn2q_s32(v571, v573);
    v581 = (int64x2_t)vtrn1q_s32(v572, v574);
    v582 = (int64x2_t)vtrn2q_s32(v572, v574);
    v583 = (int64x2_t)vtrn1q_s32(v575, v577);
    v584 = (int64x2_t)vtrn2q_s32(v575, v577);
    v585 = (int64x2_t)vtrn1q_s32(v576, v578);
    v586 = (int64x2_t)vtrn2q_s32(v576, v578);
    v587 = vzip1q_s64(v579, v583);
    v588 = vzip2q_s64(v579, v583);
    v589 = vzip1q_s64(v581, v585);
    v590 = vzip2q_s64(v581, v585);
    v530[64] = v587;
    v591 = vzip1q_s64(v580, v584);
    v592 = vzip2q_s64(v580, v584);
    v530[65] = v589;
    v593 = vzip1q_s64(v582, v586);
    v594 = vzip2q_s64(v582, v586);
    v530[66] = v591;
    v595 = vrshrq_n_s16(v852, 2uLL);
    v596 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v784, 0xDuLL), v783, 0xDuLL), 2uLL);
    v1017 = v595;
    v1018 = v596;
    v597 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v713, 0xDuLL), v712, 0xDuLL), 2uLL);
    v598 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v884, 0xDuLL), v887, 0xDuLL), 2uLL);
    v1019 = v597;
    v1020 = v598;
    v599 = vrshrq_n_s16(v850, 2uLL);
    v600 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v748, 0xDuLL), v746, 0xDuLL), 2uLL);
    v1021 = v599;
    v1022 = v600;
    v601 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v727, 0xDuLL), v726, 0xDuLL), 2uLL);
    v602 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v804, 0xDuLL), v803, 0xDuLL), 2uLL);
    v1023 = v601;
    v1024 = v602;
    v530[67] = v593;
    v530[68] = v588;
    v530[69] = v590;
    v530[70] = v592;
    v530[71] = v594;
    v603 = (int32x4_t)vtrn1q_s16(v595, v596);
    v604 = (int32x4_t)vtrn2q_s16(v595, v596);
    v605 = (int32x4_t)vtrn1q_s16(v597, v598);
    v606 = (int32x4_t)vtrn2q_s16(v597, v598);
    v607 = (int32x4_t)vtrn1q_s16(v599, v600);
    v608 = (int32x4_t)vtrn2q_s16(v599, v600);
    v609 = (int32x4_t)vtrn1q_s16(v601, v602);
    v610 = (int32x4_t)vtrn2q_s16(v601, v602);
    v611 = (int64x2_t)vtrn1q_s32(v603, v605);
    v612 = (int64x2_t)vtrn1q_s32(v604, v606);
    v613 = (int64x2_t)vtrn1q_s32(v607, v609);
    v614 = (int64x2_t)vtrn1q_s32(v608, v610);
    v530[96] = vzip1q_s64(v611, v613);
    v530[97] = vzip1q_s64(v612, v614);
    v615 = (int64x2_t)vtrn2q_s32(v603, v605);
    v616 = (int64x2_t)vtrn2q_s32(v607, v609);
    v530[98] = vzip1q_s64(v615, v616);
    v617 = (int64x2_t)vtrn2q_s32(v604, v606);
    v618 = (int64x2_t)vtrn2q_s32(v608, v610);
    v530[99] = vzip1q_s64(v617, v618);
    v530[100] = vzip2q_s64(v611, v613);
    v530[101] = vzip2q_s64(v612, v614);
    v530[102] = vzip2q_s64(v615, v616);
    v530[103] = vzip2q_s64(v617, v618);
    ++v7;
    ++v6;
  }
  while (v7 != 4);
  v619 = 0;
  v620 = v992;
  do
  {
    for (i = 0; i != 512; i += 16)
    {
      v622 = *(int16x8_t *)&v620[i];
      *(int32x4_t *)((char *)&v960 + i) = vmovl_s16(*(int16x4_t *)v622.i8);
      *(int32x4_t *)((char *)&v928 + i) = vmovl_high_s16(v622);
    }
    fdct32_neon(&v960, &v960);
    fdct32_neon(&v928, &v928);
    v623 = vrshrq_n_s32(v962, 2uLL);
    v624 = vrshrq_n_s32(v963, 2uLL);
    v625 = vrshrq_n_s32(v964, 2uLL);
    v626 = vrshrq_n_s32(v965, 2uLL);
    v627 = vrshrq_n_s32(v966, 2uLL);
    v628 = vrshrq_n_s32(v967, 2uLL);
    v927 = vrshrq_n_s32(v968, 2uLL);
    v629 = vrshrq_n_s32(v969, 2uLL);
    v923 = vrshrq_n_s32(v970, 2uLL);
    v925 = vrshrq_n_s32(v971, 2uLL);
    v919 = vrshrq_n_s32(v972, 2uLL);
    v921 = vrshrq_n_s32(v973, 2uLL);
    v914 = vrshrq_n_s32(v974, 2uLL);
    v917 = vrshrq_n_s32(v975, 2uLL);
    v910 = vrshrq_n_s32(v976, 2uLL);
    v912 = vrshrq_n_s32(v977, 2uLL);
    v906 = vrshrq_n_s32(v978, 2uLL);
    v908 = vrshrq_n_s32(v979, 2uLL);
    v901 = vrshrq_n_s32(v980, 2uLL);
    v905 = vrshrq_n_s32(v981, 2uLL);
    v894 = vrshrq_n_s32(v982, 2uLL);
    v897 = vrshrq_n_s32(v983, 2uLL);
    v888 = vrshrq_n_s32(v984, 2uLL);
    v891 = vrshrq_n_s32(v985, 2uLL);
    v882 = vrshrq_n_s32(v986, 2uLL);
    v885 = vrshrq_n_s32(v987, 2uLL);
    v630 = v929;
    v631 = vdupq_n_s32(0x16A1u);
    v632 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v961, 2uLL), v631), 0xCuLL);
    v960 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v960, 2uLL), v631), 0xCuLL);
    v633 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v928, 2uLL), v631), 0xCuLL);
    v634 = (int32x4_t *)(v5 + 32 * v619);
    *v634 = v960;
    v634[1] = v633;
    v879 = vrshrq_n_s32(v988, 2uLL);
    v876 = vrshrq_n_s32(v989, 2uLL);
    v961 = v632;
    v635 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v630, 2uLL), v631), 0xCuLL);
    v928 = v633;
    v634[8] = v632;
    v634[9] = v635;
    v636 = v931;
    v962 = vrshrq_n_s32(vmulq_s32(v623, v631), 0xCuLL);
    v929 = v635;
    v637 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v930, 2uLL), v631), 0xCuLL);
    v634[16] = v962;
    v634[17] = v637;
    v873 = vrshrq_n_s32(v990, 2uLL);
    v870 = vrshrq_n_s32(v991, 2uLL);
    v963 = vrshrq_n_s32(vmulq_s32(v624, v631), 0xCuLL);
    v638 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v636, 2uLL), v631), 0xCuLL);
    v930 = v637;
    v634[24] = v963;
    v634[25] = v638;
    v639 = vrshrq_n_s32(v933, 2uLL);
    v964 = vrshrq_n_s32(vmulq_s32(v625, v631), 0xCuLL);
    v931 = v638;
    v640 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v932, 2uLL), v631), 0xCuLL);
    v634[32] = v964;
    v634[33] = v640;
    v864 = vrshrq_n_s32(v934, 2uLL);
    v641 = vrshrq_n_s32(v935, 2uLL);
    v965 = vrshrq_n_s32(vmulq_s32(v626, v631), 0xCuLL);
    v642 = vrshrq_n_s32(vmulq_s32(v639, v631), 0xCuLL);
    v932 = v640;
    v634[40] = v965;
    v634[41] = v642;
    v859 = vrshrq_n_s32(v936, 2uLL);
    v857 = vrshrq_n_s32(v937, 2uLL);
    v967 = vrshrq_n_s32(vmulq_s32(v628, v631), 0xCuLL);
    v933 = v642;
    v634[56] = v967;
    v862 = vmulq_s32(v914, v631);
    v643 = vmulq_s32(vrshrq_n_s32(v938, 2uLL), v631);
    v644 = vmulq_s32(vrshrq_n_s32(v939, 2uLL), v631);
    v645 = vmulq_s32(vrshrq_n_s32(v940, 2uLL), v631);
    v646 = vmulq_s32(vrshrq_n_s32(v941, 2uLL), v631);
    v647 = vmulq_s32(vrshrq_n_s32(v942, 2uLL), v631);
    v648 = vmulq_s32(vrshrq_n_s32(v943, 2uLL), v631);
    v649 = vmulq_s32(vrshrq_n_s32(v944, 2uLL), v631);
    v650 = vmulq_s32(vrshrq_n_s32(v945, 2uLL), v631);
    v651 = vmulq_s32(vrshrq_n_s32(v946, 2uLL), v631);
    v652 = vmulq_s32(vrshrq_n_s32(v947, 2uLL), v631);
    v653 = vmulq_s32(vrshrq_n_s32(v948, 2uLL), v631);
    v654 = vmulq_s32(vrshrq_n_s32(v949, 2uLL), v631);
    v655 = vmulq_s32(vrshrq_n_s32(v950, 2uLL), v631);
    v656 = vmulq_s32(vrshrq_n_s32(v951, 2uLL), v631);
    v657 = vmulq_s32(vrshrq_n_s32(v952, 2uLL), v631);
    v658 = vmulq_s32(vrshrq_n_s32(v953, 2uLL), v631);
    v659 = vmulq_s32(vrshrq_n_s32(v954, 2uLL), v631);
    v660 = vmulq_s32(vrshrq_n_s32(v955, 2uLL), v631);
    v915 = vmulq_s32(vrshrq_n_s32(v956, 2uLL), v631);
    v661 = vmulq_s32(vrshrq_n_s32(v957, 2uLL), v631);
    v662 = vmulq_s32(vrshrq_n_s32(v958, 2uLL), v631);
    v663 = vmulq_s32(vrshrq_n_s32(v959, 2uLL), v631);
    v966 = vrshrq_n_s32(vmulq_s32(v627, v631), 0xCuLL);
    v664 = vrshrq_n_s32(vmulq_s32(v864, v631), 0xCuLL);
    v634[48] = v966;
    v634[49] = v664;
    v934 = v664;
    v935 = vrshrq_n_s32(vmulq_s32(v641, v631), 0xCuLL);
    v634[57] = v935;
    v665 = vrshrq_n_s32(vmulq_s32(v927, v631), 0xCuLL);
    v634[64] = v665;
    v968 = v665;
    v969 = vrshrq_n_s32(vmulq_s32(v629, v631), 0xCuLL);
    v634[72] = v969;
    v666 = vrshrq_n_s32(vmulq_s32(v859, v631), 0xCuLL);
    v634[65] = v666;
    v936 = v666;
    v937 = vrshrq_n_s32(vmulq_s32(v857, v631), 0xCuLL);
    v634[73] = v937;
    v667 = vrshrq_n_s32(vmulq_s32(v923, v631), 0xCuLL);
    v634[80] = v667;
    v970 = v667;
    v971 = vrshrq_n_s32(vmulq_s32(v925, v631), 0xCuLL);
    v634[88] = v971;
    v668 = vrshrq_n_s32(v643, 0xCuLL);
    v634[81] = v668;
    v938 = v668;
    v939 = vrshrq_n_s32(v644, 0xCuLL);
    v634[89] = v939;
    v669 = vrshrq_n_s32(vmulq_s32(v919, v631), 0xCuLL);
    v634[96] = v669;
    v972 = v669;
    v973 = vrshrq_n_s32(vmulq_s32(v921, v631), 0xCuLL);
    v634[104] = v973;
    v670 = vrshrq_n_s32(v645, 0xCuLL);
    v634[97] = v670;
    v940 = v670;
    v941 = vrshrq_n_s32(v646, 0xCuLL);
    v634[105] = v941;
    v671 = vrshrq_n_s32(v862, 0xCuLL);
    v634[112] = v671;
    v974 = v671;
    v975 = vrshrq_n_s32(vmulq_s32(v917, v631), 0xCuLL);
    v634[120] = v975;
    v672 = vrshrq_n_s32(v647, 0xCuLL);
    v634[113] = v672;
    v942 = v672;
    v943 = vrshrq_n_s32(v648, 0xCuLL);
    v634[121] = v943;
    v673 = vrshrq_n_s32(vmulq_s32(v910, v631), 0xCuLL);
    v634[128] = v673;
    v976 = v673;
    v977 = vrshrq_n_s32(vmulq_s32(v912, v631), 0xCuLL);
    v634[136] = v977;
    v674 = vrshrq_n_s32(v649, 0xCuLL);
    v634[129] = v674;
    v944 = v674;
    v945 = vrshrq_n_s32(v650, 0xCuLL);
    v634[137] = v945;
    v675 = vrshrq_n_s32(vmulq_s32(v906, v631), 0xCuLL);
    v634[144] = v675;
    v978 = v675;
    v979 = vrshrq_n_s32(vmulq_s32(v908, v631), 0xCuLL);
    v634[152] = v979;
    v676 = vrshrq_n_s32(v651, 0xCuLL);
    v634[145] = v676;
    v946 = v676;
    v947 = vrshrq_n_s32(v652, 0xCuLL);
    v634[153] = v947;
    v677 = vrshrq_n_s32(vmulq_s32(v901, v631), 0xCuLL);
    v634[160] = v677;
    v980 = v677;
    v981 = vrshrq_n_s32(vmulq_s32(v905, v631), 0xCuLL);
    v634[168] = v981;
    v678 = vrshrq_n_s32(v653, 0xCuLL);
    v634[161] = v678;
    v948 = v678;
    v949 = vrshrq_n_s32(v654, 0xCuLL);
    v634[169] = v949;
    v679 = vrshrq_n_s32(vmulq_s32(v894, v631), 0xCuLL);
    v634[176] = v679;
    v982 = v679;
    v983 = vrshrq_n_s32(vmulq_s32(v897, v631), 0xCuLL);
    v634[184] = v983;
    v680 = vrshrq_n_s32(v655, 0xCuLL);
    v634[177] = v680;
    v950 = v680;
    v951 = vrshrq_n_s32(v656, 0xCuLL);
    v634[185] = v951;
    v681 = vrshrq_n_s32(vmulq_s32(v888, v631), 0xCuLL);
    v634[192] = v681;
    v984 = v681;
    v985 = vrshrq_n_s32(vmulq_s32(v891, v631), 0xCuLL);
    v634[200] = v985;
    v682 = vrshrq_n_s32(v657, 0xCuLL);
    v634[193] = v682;
    v952 = v682;
    v953 = vrshrq_n_s32(v658, 0xCuLL);
    v634[201] = v953;
    v683 = vrshrq_n_s32(vmulq_s32(v882, v631), 0xCuLL);
    v634[208] = v683;
    v986 = v683;
    v987 = vrshrq_n_s32(vmulq_s32(v885, v631), 0xCuLL);
    v634[216] = v987;
    v684 = vrshrq_n_s32(v659, 0xCuLL);
    v634[209] = v684;
    v954 = v684;
    v955 = vrshrq_n_s32(v660, 0xCuLL);
    v634[217] = v955;
    v685 = vrshrq_n_s32(vmulq_s32(v879, v631), 0xCuLL);
    v634[224] = v685;
    v988 = v685;
    v989 = vrshrq_n_s32(vmulq_s32(v876, v631), 0xCuLL);
    v634[232] = v989;
    v686 = vrshrq_n_s32(v915, 0xCuLL);
    v634[225] = v686;
    v956 = v686;
    v957 = vrshrq_n_s32(v661, 0xCuLL);
    v634[233] = v957;
    v634[241] = vrshrq_n_s32(v662, 0xCuLL);
    v687 = vrshrq_n_s32(vmulq_s32(v873, v631), 0xCuLL);
    v634[240] = v687;
    v990 = v687;
    v991 = vrshrq_n_s32(vmulq_s32(v870, v631), 0xCuLL);
    v634[248] = v991;
    v634[249] = vrshrq_n_s32(v663, 0xCuLL);
    ++v619;
    v620 += 512;
  }
  while (v619 != 4);
}

void lowbd_fwd_txfm2d_64x32_neon(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t (*v10)();
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int64x2_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t i;
  int16x8_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t *v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  _BYTE v285[4096];
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  uint64_t v318;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v7 = v2;
  v8 = 0;
  v318 = *MEMORY[0x24BDAC8D0];
  v10 = col_txfm8x32_arr[v9];
  do
  {
    ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v10)(v7, &v286, v4, 12);
    v286 = vrshrq_n_s16(v286, 4uLL);
    v287 = vrshrq_n_s16(v287, 4uLL);
    v288 = vrshrq_n_s16(v288, 4uLL);
    v289 = vrshrq_n_s16(v289, 4uLL);
    v290 = vrshrq_n_s16(v290, 4uLL);
    v291 = vrshrq_n_s16(v291, 4uLL);
    v11 = vrshrq_n_s16(v294, 4uLL);
    v12 = vrshrq_n_s16(v295, 4uLL);
    v292 = vrshrq_n_s16(v292, 4uLL);
    v293 = vrshrq_n_s16(v293, 4uLL);
    v13 = (int32x4_t)vtrn1q_s16(v286, v287);
    v14 = (int32x4_t)vtrn2q_s16(v286, v287);
    v15 = (int32x4_t)vtrn1q_s16(v288, v289);
    v294 = v11;
    v295 = v12;
    v16 = (int32x4_t)vtrn2q_s16(v288, v289);
    v17 = (int32x4_t)vtrn1q_s16(v290, v291);
    v18 = (int32x4_t)vtrn2q_s16(v290, v291);
    v19 = (int32x4_t)vtrn1q_s16(v292, v293);
    v20 = (int32x4_t)vtrn2q_s16(v292, v293);
    v21 = (int64x2_t)vtrn1q_s32(v13, v15);
    v22 = (int64x2_t)vtrn2q_s32(v13, v15);
    v23 = (int64x2_t)vtrn1q_s32(v14, v16);
    v24 = (int64x2_t)vtrn2q_s32(v14, v16);
    v25 = (int64x2_t)vtrn1q_s32(v17, v19);
    v26 = (int64x2_t)vtrn2q_s32(v17, v19);
    v27 = (int64x2_t)vtrn1q_s32(v18, v20);
    v28 = (int64x2_t)vtrn2q_s32(v18, v20);
    v29 = vzip1q_s64(v21, v25);
    v30 = vzip2q_s64(v21, v25);
    v31 = vzip1q_s64(v23, v27);
    v32 = vzip2q_s64(v23, v27);
    v33 = vzip1q_s64(v22, v26);
    v34 = vzip2q_s64(v22, v26);
    v35 = vzip1q_s64(v24, v28);
    v36 = vzip2q_s64(v24, v28);
    v37 = vrshrq_n_s16(v296, 4uLL);
    v38 = vrshrq_n_s16(v297, 4uLL);
    v296 = v37;
    v297 = v38;
    v39 = (int64x2_t *)&v285[v8];
    *v39 = v29;
    v39[1] = v31;
    v40 = vrshrq_n_s16(v298, 4uLL);
    v41 = vrshrq_n_s16(v299, 4uLL);
    v298 = v40;
    v299 = v41;
    v39[2] = v33;
    v39[3] = v35;
    v42 = vrshrq_n_s16(v300, 4uLL);
    v43 = vrshrq_n_s16(v301, 4uLL);
    v300 = v42;
    v301 = v43;
    v39[4] = v30;
    v39[5] = v32;
    v44 = (int32x4_t)vtrn1q_s16(v11, v12);
    v45 = (int32x4_t)vtrn2q_s16(v11, v12);
    v46 = (int32x4_t)vtrn1q_s16(v37, v38);
    v47 = (int32x4_t)vtrn2q_s16(v37, v38);
    v48 = (int32x4_t)vtrn1q_s16(v40, v41);
    v49 = (int32x4_t)vtrn2q_s16(v40, v41);
    v50 = vrshrq_n_s16(v302, 4uLL);
    v51 = vrshrq_n_s16(v303, 4uLL);
    v302 = v50;
    v303 = v51;
    v39[6] = v34;
    v39[7] = v36;
    v52 = (int32x4_t)vtrn1q_s16(v42, v43);
    v53 = (int32x4_t)vtrn2q_s16(v42, v43);
    v54 = (int64x2_t)vtrn1q_s32(v44, v46);
    v55 = (int64x2_t)vtrn2q_s32(v44, v46);
    v56 = (int64x2_t)vtrn1q_s32(v45, v47);
    v57 = (int64x2_t)vtrn2q_s32(v45, v47);
    v58 = (int64x2_t)vtrn1q_s32(v48, v52);
    v59 = (int64x2_t)vtrn2q_s32(v48, v52);
    v60 = (int64x2_t)vtrn1q_s32(v49, v53);
    v61 = (int64x2_t)vtrn2q_s32(v49, v53);
    v62 = vzip1q_s64(v54, v58);
    v63 = vzip2q_s64(v54, v58);
    v64 = vzip1q_s64(v56, v60);
    v65 = vzip2q_s64(v56, v60);
    v66 = vzip1q_s64(v55, v59);
    v67 = vzip2q_s64(v55, v59);
    v68 = vzip1q_s64(v57, v61);
    v69 = vzip2q_s64(v57, v61);
    v70 = vrshrq_n_s16(v304, 4uLL);
    v71 = vrshrq_n_s16(v305, 4uLL);
    v304 = v70;
    v305 = v71;
    v39[64] = v62;
    v39[65] = v64;
    v72 = vrshrq_n_s16(v306, 4uLL);
    v73 = vrshrq_n_s16(v307, 4uLL);
    v306 = v72;
    v307 = v73;
    v39[66] = v66;
    v39[67] = v68;
    v74 = vrshrq_n_s16(v308, 4uLL);
    v75 = vrshrq_n_s16(v309, 4uLL);
    v39[68] = v63;
    v76 = (int32x4_t)vtrn1q_s16(v50, v51);
    v77 = (int32x4_t)vtrn2q_s16(v50, v51);
    v78 = (int32x4_t)vtrn1q_s16(v70, v71);
    v308 = v74;
    v309 = v75;
    v79 = (int32x4_t)vtrn2q_s16(v70, v71);
    v39[69] = v65;
    v80 = (int32x4_t)vtrn1q_s16(v72, v73);
    v81 = (int32x4_t)vtrn2q_s16(v72, v73);
    v82 = (int32x4_t)vtrn1q_s16(v74, v75);
    v83 = (int32x4_t)vtrn2q_s16(v74, v75);
    v84 = (int64x2_t)vtrn1q_s32(v76, v78);
    v85 = (int64x2_t)vtrn2q_s32(v76, v78);
    v86 = vrshrq_n_s16(v310, 4uLL);
    v87 = vrshrq_n_s16(v311, 4uLL);
    v310 = v86;
    v311 = v87;
    v39[70] = v67;
    v88 = (int64x2_t)vtrn1q_s32(v77, v79);
    v39[71] = v69;
    v89 = (int64x2_t)vtrn2q_s32(v77, v79);
    v90 = (int64x2_t)vtrn1q_s32(v80, v82);
    v91 = (int64x2_t)vtrn2q_s32(v80, v82);
    v92 = (int64x2_t)vtrn1q_s32(v81, v83);
    v93 = (int64x2_t)vtrn2q_s32(v81, v83);
    v94 = vzip1q_s64(v84, v90);
    v95 = vzip2q_s64(v84, v90);
    v96 = vzip1q_s64(v88, v92);
    v97 = vzip2q_s64(v88, v92);
    v98 = vzip1q_s64(v85, v91);
    v99 = vzip2q_s64(v85, v91);
    v100 = vzip1q_s64(v89, v93);
    v101 = vzip2q_s64(v89, v93);
    v102 = vrshrq_n_s16(v312, 4uLL);
    v103 = vrshrq_n_s16(v313, 4uLL);
    v312 = v102;
    v313 = v103;
    v39[128] = v94;
    v39[129] = v96;
    v104 = vrshrq_n_s16(v314, 4uLL);
    v105 = vrshrq_n_s16(v315, 4uLL);
    v314 = v104;
    v315 = v105;
    v39[130] = v98;
    v106 = (int32x4_t)vtrn1q_s16(v86, v87);
    v39[131] = v100;
    v107 = (int32x4_t)vtrn2q_s16(v86, v87);
    v108 = (int32x4_t)vtrn1q_s16(v102, v103);
    v109 = (int32x4_t)vtrn2q_s16(v102, v103);
    v110 = vrshrq_n_s16(v316, 4uLL);
    v111 = vrshrq_n_s16(v317, 4uLL);
    v39[132] = v95;
    v112 = (int32x4_t)vtrn1q_s16(v104, v105);
    v113 = (int32x4_t)vtrn2q_s16(v104, v105);
    v114 = (int32x4_t)vtrn1q_s16(v110, v111);
    v316 = v110;
    v317 = v111;
    v115 = (int32x4_t)vtrn2q_s16(v110, v111);
    v39[133] = v97;
    v116 = (int64x2_t)vtrn1q_s32(v106, v108);
    v117 = (int64x2_t)vtrn2q_s32(v106, v108);
    v39[134] = v99;
    v39[135] = v101;
    v118 = (int64x2_t)vtrn1q_s32(v107, v109);
    v119 = (int64x2_t)vtrn2q_s32(v107, v109);
    v120 = (int64x2_t)vtrn1q_s32(v112, v114);
    v121 = (int64x2_t)vtrn2q_s32(v112, v114);
    v122 = (int64x2_t)vtrn1q_s32(v113, v115);
    v123 = (int64x2_t)vtrn2q_s32(v113, v115);
    v39[192] = vzip1q_s64(v116, v120);
    v39[193] = vzip1q_s64(v118, v122);
    v39[194] = vzip1q_s64(v117, v121);
    v39[195] = vzip1q_s64(v119, v123);
    v39[196] = vzip2q_s64(v116, v120);
    v39[197] = vzip2q_s64(v118, v122);
    v39[198] = vzip2q_s64(v117, v121);
    v39[199] = vzip2q_s64(v119, v123);
    v8 += 128;
    v7 += 16;
  }
  while (v8 != 1024);
  v124 = 0;
  v125 = v285;
  do
  {
    for (i = 0; i != 1024; i += 16)
    {
      v127 = *(int16x8_t *)&v125[i];
      *(int32x4_t *)((char *)&v253 + i) = vmovl_s16(*(int16x4_t *)v127.i8);
      *(int32x4_t *)((char *)&v221 + i) = vmovl_high_s16(v127);
    }
    fdct64_neon(&v253, &v253, 11);
    fdct64_neon(&v221, &v221, 11);
    v128 = vrshrq_n_s32(v255, 2uLL);
    v129 = vrshrq_n_s32(v256, 2uLL);
    v130 = vrshrq_n_s32(v257, 2uLL);
    v131 = vrshrq_n_s32(v258, 2uLL);
    v132 = vrshrq_n_s32(v260, 2uLL);
    v219 = vrshrq_n_s32(v261, 2uLL);
    v220 = vrshrq_n_s32(v259, 2uLL);
    v133 = vrshrq_n_s32(v262, 2uLL);
    v217 = vrshrq_n_s32(v264, 2uLL);
    v218 = vrshrq_n_s32(v263, 2uLL);
    v215 = vrshrq_n_s32(v266, 2uLL);
    v216 = vrshrq_n_s32(v265, 2uLL);
    v212 = vrshrq_n_s32(v268, 2uLL);
    v213 = vrshrq_n_s32(v267, 2uLL);
    v210 = vrshrq_n_s32(v270, 2uLL);
    v211 = vrshrq_n_s32(v269, 2uLL);
    v208 = vrshrq_n_s32(v272, 2uLL);
    v209 = vrshrq_n_s32(v271, 2uLL);
    v206 = vrshrq_n_s32(v274, 2uLL);
    v207 = vrshrq_n_s32(v273, 2uLL);
    v204 = vrshrq_n_s32(v276, 2uLL);
    v205 = vrshrq_n_s32(v275, 2uLL);
    v202 = vrshrq_n_s32(v278, 2uLL);
    v203 = vrshrq_n_s32(v277, 2uLL);
    v200 = vrshrq_n_s32(v280, 2uLL);
    v201 = vrshrq_n_s32(v279, 2uLL);
    v134 = v222;
    v135 = vdupq_n_s32(0x16A1u);
    v136 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v254, 2uLL), v135), 0xCuLL);
    v253 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v253, 2uLL), v135), 0xCuLL);
    v137 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v221, 2uLL), v135), 0xCuLL);
    v138 = (int32x4_t *)(v6 + 32 * v124);
    *v138 = v253;
    v138[1] = v137;
    v198 = vrshrq_n_s32(v282, 2uLL);
    v199 = vrshrq_n_s32(v281, 2uLL);
    v254 = v136;
    v139 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v134, 2uLL), v135), 0xCuLL);
    v221 = v137;
    v222 = v139;
    v138[8] = v136;
    v138[9] = v139;
    v140 = v224;
    v255 = vrshrq_n_s32(vmulq_s32(v128, v135), 0xCuLL);
    v141 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v223, 2uLL), v135), 0xCuLL);
    v138[16] = v255;
    v138[17] = v141;
    v196 = vrshrq_n_s32(v284, 2uLL);
    v197 = vrshrq_n_s32(v283, 2uLL);
    v256 = vrshrq_n_s32(vmulq_s32(v129, v135), 0xCuLL);
    v142 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v140, 2uLL), v135), 0xCuLL);
    v223 = v141;
    v224 = v142;
    v138[24] = v256;
    v138[25] = v142;
    v143 = vrshrq_n_s32(v226, 2uLL);
    v257 = vrshrq_n_s32(vmulq_s32(v130, v135), 0xCuLL);
    v144 = vrshrq_n_s32(vmulq_s32(vrshrq_n_s32(v225, 2uLL), v135), 0xCuLL);
    v138[32] = v257;
    v138[33] = v144;
    v195 = vrshrq_n_s32(v227, 2uLL);
    v145 = vrshrq_n_s32(v228, 2uLL);
    v258 = vrshrq_n_s32(vmulq_s32(v131, v135), 0xCuLL);
    v146 = vrshrq_n_s32(vmulq_s32(v143, v135), 0xCuLL);
    v225 = v144;
    v226 = v146;
    v138[40] = v258;
    v138[41] = v146;
    v192 = vrshrq_n_s32(v230, 2uLL);
    v193 = vrshrq_n_s32(v229, 2uLL);
    v260 = vrshrq_n_s32(vmulq_s32(v132, v135), 0xCuLL);
    v138[56] = v260;
    v194 = vmulq_s32(v213, v135);
    v147 = vmulq_s32(vrshrq_n_s32(v231, 2uLL), v135);
    v148 = vmulq_s32(vrshrq_n_s32(v232, 2uLL), v135);
    v149 = vmulq_s32(vrshrq_n_s32(v233, 2uLL), v135);
    v150 = vmulq_s32(vrshrq_n_s32(v234, 2uLL), v135);
    v151 = vmulq_s32(vrshrq_n_s32(v235, 2uLL), v135);
    v152 = vmulq_s32(vrshrq_n_s32(v236, 2uLL), v135);
    v153 = vmulq_s32(vrshrq_n_s32(v237, 2uLL), v135);
    v154 = vmulq_s32(vrshrq_n_s32(v238, 2uLL), v135);
    v155 = vmulq_s32(vrshrq_n_s32(v239, 2uLL), v135);
    v156 = vmulq_s32(vrshrq_n_s32(v240, 2uLL), v135);
    v157 = vmulq_s32(vrshrq_n_s32(v241, 2uLL), v135);
    v158 = vmulq_s32(vrshrq_n_s32(v242, 2uLL), v135);
    v159 = vmulq_s32(vrshrq_n_s32(v243, 2uLL), v135);
    v160 = vmulq_s32(vrshrq_n_s32(v244, 2uLL), v135);
    v161 = vmulq_s32(vrshrq_n_s32(v245, 2uLL), v135);
    v162 = vmulq_s32(vrshrq_n_s32(v246, 2uLL), v135);
    v163 = vmulq_s32(vrshrq_n_s32(v247, 2uLL), v135);
    v164 = vmulq_s32(vrshrq_n_s32(v248, 2uLL), v135);
    v214 = vmulq_s32(vrshrq_n_s32(v249, 2uLL), v135);
    v165 = vmulq_s32(vrshrq_n_s32(v250, 2uLL), v135);
    v166 = vmulq_s32(vrshrq_n_s32(v251, 2uLL), v135);
    v167 = vmulq_s32(vrshrq_n_s32(v252, 2uLL), v135);
    v259 = vrshrq_n_s32(vmulq_s32(v220, v135), 0xCuLL);
    v168 = vrshrq_n_s32(vmulq_s32(v195, v135), 0xCuLL);
    v138[48] = v259;
    v138[49] = v168;
    v227 = v168;
    v228 = vrshrq_n_s32(vmulq_s32(v145, v135), 0xCuLL);
    v138[57] = v228;
    v169 = vrshrq_n_s32(vmulq_s32(v219, v135), 0xCuLL);
    v138[64] = v169;
    v261 = v169;
    v262 = vrshrq_n_s32(vmulq_s32(v133, v135), 0xCuLL);
    v138[72] = v262;
    v170 = vrshrq_n_s32(vmulq_s32(v193, v135), 0xCuLL);
    v138[65] = v170;
    v229 = v170;
    v230 = vrshrq_n_s32(vmulq_s32(v192, v135), 0xCuLL);
    v138[73] = v230;
    v171 = vrshrq_n_s32(vmulq_s32(v218, v135), 0xCuLL);
    v138[80] = v171;
    v263 = v171;
    v264 = vrshrq_n_s32(vmulq_s32(v217, v135), 0xCuLL);
    v138[88] = v264;
    v172 = vrshrq_n_s32(v147, 0xCuLL);
    v138[81] = v172;
    v231 = v172;
    v232 = vrshrq_n_s32(v148, 0xCuLL);
    v138[89] = v232;
    v173 = vrshrq_n_s32(vmulq_s32(v216, v135), 0xCuLL);
    v138[96] = v173;
    v265 = v173;
    v266 = vrshrq_n_s32(vmulq_s32(v215, v135), 0xCuLL);
    v138[104] = v266;
    v174 = vrshrq_n_s32(v149, 0xCuLL);
    v138[97] = v174;
    v233 = v174;
    v234 = vrshrq_n_s32(v150, 0xCuLL);
    v138[105] = v234;
    v175 = vrshrq_n_s32(v194, 0xCuLL);
    v138[112] = v175;
    v267 = v175;
    v268 = vrshrq_n_s32(vmulq_s32(v212, v135), 0xCuLL);
    v138[120] = v268;
    v176 = vrshrq_n_s32(v151, 0xCuLL);
    v138[113] = v176;
    v235 = v176;
    v236 = vrshrq_n_s32(v152, 0xCuLL);
    v138[121] = v236;
    v177 = vrshrq_n_s32(vmulq_s32(v211, v135), 0xCuLL);
    v138[128] = v177;
    v269 = v177;
    v270 = vrshrq_n_s32(vmulq_s32(v210, v135), 0xCuLL);
    v138[136] = v270;
    v178 = vrshrq_n_s32(v153, 0xCuLL);
    v138[129] = v178;
    v237 = v178;
    v238 = vrshrq_n_s32(v154, 0xCuLL);
    v138[137] = v238;
    v179 = vrshrq_n_s32(vmulq_s32(v209, v135), 0xCuLL);
    v138[144] = v179;
    v271 = v179;
    v272 = vrshrq_n_s32(vmulq_s32(v208, v135), 0xCuLL);
    v138[152] = v272;
    v180 = vrshrq_n_s32(v155, 0xCuLL);
    v138[145] = v180;
    v239 = v180;
    v240 = vrshrq_n_s32(v156, 0xCuLL);
    v138[153] = v240;
    v181 = vrshrq_n_s32(vmulq_s32(v207, v135), 0xCuLL);
    v138[160] = v181;
    v273 = v181;
    v274 = vrshrq_n_s32(vmulq_s32(v206, v135), 0xCuLL);
    v138[168] = v274;
    v182 = vrshrq_n_s32(v157, 0xCuLL);
    v138[161] = v182;
    v241 = v182;
    v242 = vrshrq_n_s32(v158, 0xCuLL);
    v138[169] = v242;
    v183 = vrshrq_n_s32(vmulq_s32(v205, v135), 0xCuLL);
    v138[176] = v183;
    v275 = v183;
    v276 = vrshrq_n_s32(vmulq_s32(v204, v135), 0xCuLL);
    v138[184] = v276;
    v184 = vrshrq_n_s32(v159, 0xCuLL);
    v138[177] = v184;
    v243 = v184;
    v244 = vrshrq_n_s32(v160, 0xCuLL);
    v138[185] = v244;
    v185 = vrshrq_n_s32(vmulq_s32(v203, v135), 0xCuLL);
    v138[192] = v185;
    v277 = v185;
    v278 = vrshrq_n_s32(vmulq_s32(v202, v135), 0xCuLL);
    v138[200] = v278;
    v186 = vrshrq_n_s32(v161, 0xCuLL);
    v138[193] = v186;
    v245 = v186;
    v246 = vrshrq_n_s32(v162, 0xCuLL);
    v138[201] = v246;
    v187 = vrshrq_n_s32(vmulq_s32(v201, v135), 0xCuLL);
    v138[208] = v187;
    v279 = v187;
    v280 = vrshrq_n_s32(vmulq_s32(v200, v135), 0xCuLL);
    v138[216] = v280;
    v188 = vrshrq_n_s32(v163, 0xCuLL);
    v138[209] = v188;
    v247 = v188;
    v248 = vrshrq_n_s32(v164, 0xCuLL);
    v138[217] = v248;
    v189 = vrshrq_n_s32(vmulq_s32(v199, v135), 0xCuLL);
    v138[224] = v189;
    v281 = v189;
    v282 = vrshrq_n_s32(vmulq_s32(v198, v135), 0xCuLL);
    v138[232] = v282;
    v190 = vrshrq_n_s32(v214, 0xCuLL);
    v138[225] = v190;
    v249 = v190;
    v250 = vrshrq_n_s32(v165, 0xCuLL);
    v138[233] = v250;
    v138[241] = vrshrq_n_s32(v166, 0xCuLL);
    v191 = vrshrq_n_s32(vmulq_s32(v197, v135), 0xCuLL);
    v138[240] = v191;
    v283 = v191;
    v284 = vrshrq_n_s32(vmulq_s32(v196, v135), 0xCuLL);
    v138[248] = v284;
    v138[249] = vrshrq_n_s32(v167, 0xCuLL);
    ++v124;
    v125 += 1024;
  }
  while (v124 != 4);
}

uint64_t lowbd_fwd_txfm2d_4x16_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  uint64_t (*v6)();
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t *v48;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  _OWORD v58[8];
  _OWORD v59[8];
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  uint64_t v76;

  v5 = 0;
  v76 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v5 = 1;
LABEL_7:
    a1 += 30 * (_DWORD)a3;
    a3 = -(int)a3;
  }
LABEL_8:
  v6 = row_txfm8x4_arr[a4];
  ((void (*)(uint64_t, int16x4_t *, uint64_t, uint64_t))col_txfm4x16_arr[a4])(a1, &v60, a3, 13);
  *(int16x4_t *)v7.i8 = vrhadd_s16(v60, 0);
  *(int16x4_t *)v8.i8 = vrhadd_s16(v61, 0);
  v60 = *(int16x4_t *)v7.i8;
  v61 = *(int16x4_t *)v8.i8;
  *(int16x4_t *)v9.i8 = vrhadd_s16(v62, 0);
  *(int16x4_t *)v10.i8 = vrhadd_s16(v63, 0);
  v62 = *(int16x4_t *)v9.i8;
  v63 = *(int16x4_t *)v10.i8;
  *(int16x4_t *)v11.i8 = vrhadd_s16(v64, 0);
  *(int16x4_t *)v12.i8 = vrhadd_s16(v65, 0);
  v64 = *(int16x4_t *)v11.i8;
  v65 = *(int16x4_t *)v12.i8;
  *(int16x4_t *)v13.i8 = vrhadd_s16(v66, 0);
  *(int16x4_t *)v14.i8 = vrhadd_s16(v67, 0);
  *(int16x4_t *)v15.i8 = vrhadd_s16(v68, 0);
  *(int16x4_t *)v16.i8 = vrhadd_s16(v69, 0);
  *(int16x4_t *)v17.i8 = vrhadd_s16(v70, 0);
  *(int16x4_t *)v18.i8 = vrhadd_s16(v71, 0);
  *(int16x4_t *)v19.i8 = vrhadd_s16(v72, 0);
  *(int16x4_t *)v20.i8 = vrhadd_s16(v73, 0);
  *(int16x4_t *)v21.i8 = vrhadd_s16(v74, 0);
  v66 = *(int16x4_t *)v13.i8;
  v67 = *(int16x4_t *)v14.i8;
  *(int16x4_t *)v22.i8 = vrhadd_s16(v75, 0);
  v23 = (int32x4_t)vzip1q_s16(v7, v8);
  v24 = (int32x4_t)vzip1q_s16(v9, v10);
  v68 = *(int16x4_t *)v15.i8;
  v69 = *(int16x4_t *)v16.i8;
  v25 = (int32x4_t)vzip1q_s16(v11, v12);
  v26 = (int32x4_t)vzip1q_s16(v13, v14);
  v27 = (int64x2_t)vzip1q_s32(v23, v24);
  v70 = *(int16x4_t *)v17.i8;
  v71 = *(int16x4_t *)v18.i8;
  v28 = (int64x2_t)vzip2q_s32(v23, v24);
  v29 = (int64x2_t)vzip1q_s32(v25, v26);
  v30 = (int64x2_t)vzip2q_s32(v25, v26);
  v72 = *(int16x4_t *)v19.i8;
  v73 = *(int16x4_t *)v20.i8;
  v31 = vzip1q_s64(v27, v29);
  v32 = vzip2q_s64(v27, v29);
  v33 = vzip1q_s64(v28, v30);
  v74 = *(int16x4_t *)v21.i8;
  v75 = *(int16x4_t *)v22.i8;
  v34 = vzip2q_s64(v28, v30);
  v35 = (int32x4_t)vzip1q_s16(v15, v16);
  v36 = (int32x4_t)vzip1q_s16(v17, v18);
  v58[0] = v31;
  v58[1] = v32;
  v37 = (int32x4_t)vzip1q_s16(v19, v20);
  v38 = (int32x4_t)vzip1q_s16(v21, v22);
  v39 = (int64x2_t)vzip1q_s32(v35, v36);
  v58[2] = v33;
  v58[3] = v34;
  v40 = (int64x2_t)vzip2q_s32(v35, v36);
  v41 = (int64x2_t)vzip1q_s32(v37, v38);
  v42 = (int64x2_t)vzip2q_s32(v37, v38);
  v43 = vzip1q_s64(v39, v41);
  v44 = vzip2q_s64(v39, v41);
  v59[0] = v43;
  v59[1] = v44;
  v45 = vzip1q_s64(v40, v42);
  v46 = vzip2q_s64(v40, v42);
  v59[2] = v45;
  v59[3] = v46;
  if (v5)
  {
    v56 = v32;
    v57 = v31;
    v54 = v34;
    v55 = v33;
    v52 = v46;
    v53 = v45;
    v50 = v43;
    v51 = v44;
    ((void (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v6)(&v54, a2, 16, 12);
    v56 = v51;
    v57 = v50;
    v47 = a2 + 32;
    v54 = v52;
    v55 = v53;
    v48 = &v54;
  }
  else
  {
    ((void (*)(_OWORD *, uint64_t, uint64_t, uint64_t))v6)(v58, a2, 16, 12);
    v47 = a2 + 32;
    v48 = (int64x2_t *)v59;
  }
  return ((uint64_t (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v6)(v48, v47, 16, 12);
}

uint64_t lowbd_fwd_txfm2d_16x4_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  char v11;
  char v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  _QWORD *v23;
  _QWORD v25[16];
  _QWORD v26[16];
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint64_t v31;

  v4 = a3;
  v6 = a1;
  v7 = 0;
  v31 = *MEMORY[0x24BDAC8D0];
  if (a4 <= 0xF)
  {
    if (((1 << a4) & 0x4110) == 0)
    {
      if (((1 << a4) & 0x80A0) != 0)
      {
        v7 = 1;
        goto LABEL_8;
      }
      if (a4 != 6)
        goto LABEL_8;
      v7 = 1;
    }
    v6 = a1 + 6 * (_DWORD)a3;
    v4 = -(int)a3;
  }
LABEL_8:
  v8 = 0;
  v9 = col_txfm8x4_arr[a4];
  v10 = row_txfm4x16_arr[a4];
  v11 = 1;
  do
  {
    v12 = v11;
    ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))v9)(v6 + 2 * v8, &v27, v4, 13);
    v11 = 0;
    v27 = vrhaddq_s16(v27, (int16x8_t)0);
    v28 = vrhaddq_s16(v28, (int16x8_t)0);
    v29 = vrhaddq_s16(v29, (int16x8_t)0);
    v30 = vrhaddq_s16(v30, (int16x8_t)0);
    v13 = (int32x4_t)vtrn1q_s16(v27, v28);
    v14 = (int32x4_t)vtrn2q_s16(v27, v28);
    v15 = (int32x4_t)vtrn1q_s16(v29, v30);
    v16 = (int32x4_t)vtrn2q_s16(v29, v30);
    v17 = (int8x16_t)vtrn1q_s32(v13, v15);
    v18 = (int8x16_t)vtrn2q_s32(v13, v15);
    v19 = (int8x16_t)vtrn1q_s32(v14, v16);
    v20 = (int8x16_t)vtrn2q_s32(v14, v16);
    v16.i64[0] = vextq_s8(v17, v17, 8uLL).u64[0];
    v17.i64[1] = v19.i64[0];
    v21.i64[0] = vextq_s8(v18, v18, 8uLL).u64[0];
    v18.i64[1] = v20.i64[0];
    v22 = (int8x16_t *)&v26[v8];
    *v22 = v17;
    v22[1] = v18;
    v16.i64[1] = vextq_s8(v19, v19, 8uLL).u64[0];
    v21.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
    v22[2] = (int8x16_t)v16;
    v22[3] = v21;
    v8 = 8;
  }
  while ((v12 & 1) != 0);
  if (v7)
  {
    v25[14] = v26[1];
    v25[15] = v26[0];
    v25[12] = v26[3];
    v25[13] = v26[2];
    v25[10] = v26[5];
    v25[11] = v26[4];
    v25[8] = v26[7];
    v25[9] = v26[6];
    v25[6] = v26[9];
    v25[7] = v26[8];
    v25[4] = v26[11];
    v25[5] = v26[10];
    v25[2] = v26[13];
    v25[3] = v26[12];
    v23 = v25;
    v25[0] = v26[15];
    v25[1] = v26[14];
  }
  else
  {
    v23 = v26;
  }
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v10)(v23, a2, 4, 13);
}

uint64_t lowbd_fwd_txfm2d_8x32_neon(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v5;
  uint64_t (*v6)();
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t *v87;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  uint64_t v153;

  v5 = 0;
  v153 = *MEMORY[0x24BDAC8D0];
  if (a4 > 0xF)
    goto LABEL_8;
  if (((1 << a4) & 0x4110) != 0)
    goto LABEL_7;
  if (((1 << a4) & 0x80A0) != 0)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (a4 == 6)
  {
    v5 = 1;
LABEL_7:
    a1 += 62 * (_DWORD)a3;
    a3 = -(int)a3;
  }
LABEL_8:
  v6 = row_txfm8x8_arr[a4];
  ((void (*)(uint64_t, int16x8_t *, uint64_t, uint64_t))col_txfm8x32_arr[a4])(a1, &v121, a3, 12);
  v121 = vrshrq_n_s16(v121, 2uLL);
  v122 = vrshrq_n_s16(v122, 2uLL);
  v123 = vrshrq_n_s16(v123, 2uLL);
  v124 = vrshrq_n_s16(v124, 2uLL);
  v125 = vrshrq_n_s16(v125, 2uLL);
  v126 = vrshrq_n_s16(v126, 2uLL);
  v7 = (int32x4_t)vtrn1q_s16(v121, v122);
  v127 = vrshrq_n_s16(v127, 2uLL);
  v128 = vrshrq_n_s16(v128, 2uLL);
  v8 = (int32x4_t)vtrn2q_s16(v121, v122);
  v9 = (int32x4_t)vtrn1q_s16(v123, v124);
  v10 = (int32x4_t)vtrn2q_s16(v123, v124);
  v129 = vrshrq_n_s16(v129, 2uLL);
  v130 = vrshrq_n_s16(v130, 2uLL);
  v11 = (int32x4_t)vtrn1q_s16(v125, v126);
  v12 = (int32x4_t)vtrn2q_s16(v125, v126);
  v13 = (int32x4_t)vtrn1q_s16(v127, v128);
  v131 = vrshrq_n_s16(v131, 2uLL);
  v132 = vrshrq_n_s16(v132, 2uLL);
  v14 = (int32x4_t)vtrn2q_s16(v127, v128);
  v15 = (int64x2_t)vtrn1q_s32(v7, v9);
  v16 = (int64x2_t)vtrn2q_s32(v7, v9);
  v17 = (int64x2_t)vtrn1q_s32(v8, v10);
  v18 = (int64x2_t)vtrn2q_s32(v8, v10);
  v19 = (int64x2_t)vtrn1q_s32(v11, v13);
  v20 = (int64x2_t)vtrn2q_s32(v11, v13);
  v21 = (int64x2_t)vtrn1q_s32(v12, v14);
  v22 = (int64x2_t)vtrn2q_s32(v12, v14);
  v89 = vzip1q_s64(v15, v19);
  v90 = vzip1q_s64(v17, v21);
  v133 = vrshrq_n_s16(v133, 2uLL);
  v134 = vrshrq_n_s16(v134, 2uLL);
  v91 = vzip1q_s64(v16, v20);
  v92 = vzip1q_s64(v18, v22);
  v93 = vzip2q_s64(v15, v19);
  v94 = vzip2q_s64(v17, v21);
  v23 = (int32x4_t)vtrn1q_s16(v129, v130);
  v135 = vrshrq_n_s16(v135, 2uLL);
  v136 = vrshrq_n_s16(v136, 2uLL);
  v24 = (int32x4_t)vtrn2q_s16(v129, v130);
  v25 = (int32x4_t)vtrn1q_s16(v131, v132);
  v95 = vzip2q_s64(v16, v20);
  v96 = vzip2q_s64(v18, v22);
  v26 = (int32x4_t)vtrn2q_s16(v131, v132);
  v27 = (int32x4_t)vtrn1q_s16(v133, v134);
  v28 = (int32x4_t)vtrn2q_s16(v133, v134);
  v29 = (int32x4_t)vtrn1q_s16(v135, v136);
  v30 = (int32x4_t)vtrn2q_s16(v135, v136);
  v137 = vrshrq_n_s16(v137, 2uLL);
  v138 = vrshrq_n_s16(v138, 2uLL);
  v31 = (int64x2_t)vtrn1q_s32(v23, v25);
  v32 = (int64x2_t)vtrn2q_s32(v23, v25);
  v33 = (int64x2_t)vtrn1q_s32(v24, v26);
  v139 = vrshrq_n_s16(v139, 2uLL);
  v140 = vrshrq_n_s16(v140, 2uLL);
  v34 = (int64x2_t)vtrn2q_s32(v24, v26);
  v35 = (int64x2_t)vtrn1q_s32(v27, v29);
  v36 = (int64x2_t)vtrn2q_s32(v27, v29);
  v37 = (int64x2_t)vtrn1q_s32(v28, v30);
  v38 = (int64x2_t)vtrn2q_s32(v28, v30);
  v39 = vzip1q_s64(v31, v35);
  v40 = vzip2q_s64(v31, v35);
  v41 = vzip1q_s64(v33, v37);
  v42 = vzip2q_s64(v33, v37);
  v43 = vzip1q_s64(v32, v36);
  v44 = vzip2q_s64(v32, v36);
  v45 = vzip1q_s64(v34, v38);
  v46 = vzip2q_s64(v34, v38);
  v97 = (int16x8_t)v39;
  v98 = (int16x8_t)v41;
  v99 = (int16x8_t)v43;
  v100 = (int16x8_t)v45;
  v101 = (int16x8_t)v40;
  v102 = (int16x8_t)v42;
  v47 = (int32x4_t)vtrn1q_s16(v137, v138);
  v48 = (int32x4_t)vtrn2q_s16(v137, v138);
  v141 = vrshrq_n_s16(v141, 2uLL);
  v142 = vrshrq_n_s16(v142, 2uLL);
  v49 = (int32x4_t)vtrn1q_s16(v139, v140);
  v50 = (int32x4_t)vtrn2q_s16(v139, v140);
  v51 = (int32x4_t)vtrn1q_s16(v141, v142);
  v143 = vrshrq_n_s16(v143, 2uLL);
  v144 = vrshrq_n_s16(v144, 2uLL);
  v52 = (int32x4_t)vtrn2q_s16(v141, v142);
  v53 = (int32x4_t)vtrn1q_s16(v143, v144);
  v103 = (int16x8_t)v44;
  v104 = (int16x8_t)v46;
  v54 = (int32x4_t)vtrn2q_s16(v143, v144);
  v55 = (int64x2_t)vtrn1q_s32(v47, v49);
  v56 = (int64x2_t)vtrn2q_s32(v47, v49);
  v57 = (int64x2_t)vtrn1q_s32(v48, v50);
  v58 = (int64x2_t)vtrn2q_s32(v48, v50);
  v145 = vrshrq_n_s16(v145, 2uLL);
  v146 = vrshrq_n_s16(v146, 2uLL);
  v59 = (int64x2_t)vtrn1q_s32(v51, v53);
  v60 = (int64x2_t)vtrn2q_s32(v51, v53);
  v61 = (int64x2_t)vtrn1q_s32(v52, v54);
  v147 = vrshrq_n_s16(v147, 2uLL);
  v148 = vrshrq_n_s16(v148, 2uLL);
  v62 = (int64x2_t)vtrn2q_s32(v52, v54);
  v63 = vzip1q_s64(v55, v59);
  v64 = vzip2q_s64(v55, v59);
  v65 = vzip1q_s64(v57, v61);
  v66 = vzip2q_s64(v57, v61);
  v67 = vzip1q_s64(v56, v60);
  v68 = vzip2q_s64(v56, v60);
  v69 = vzip1q_s64(v58, v62);
  v70 = vzip2q_s64(v58, v62);
  v105 = (int16x8_t)v63;
  v106 = (int16x8_t)v65;
  v107 = (int16x8_t)v67;
  v108 = (int16x8_t)v69;
  v71 = (int32x4_t)vtrn1q_s16(v145, v146);
  v72 = (int32x4_t)vtrn2q_s16(v145, v146);
  v149 = vrshrq_n_s16(v149, 2uLL);
  v150 = vrshrq_n_s16(v150, 2uLL);
  v73 = (int32x4_t)vtrn1q_s16(v147, v148);
  v74 = (int32x4_t)vtrn2q_s16(v147, v148);
  v75 = (int32x4_t)vtrn1q_s16(v149, v150);
  v151 = vrshrq_n_s16(v151, 2uLL);
  v152 = vrshrq_n_s16(v152, 2uLL);
  v76 = (int32x4_t)vtrn2q_s16(v149, v150);
  v77 = (int32x4_t)vtrn1q_s16(v151, v152);
  v78 = (int32x4_t)vtrn2q_s16(v151, v152);
  v109 = (int16x8_t)v64;
  v110 = (int16x8_t)v66;
  v79 = (int64x2_t)vtrn1q_s32(v71, v73);
  v80 = (int64x2_t)vtrn2q_s32(v71, v73);
  v111 = (int16x8_t)v68;
  v112 = (int16x8_t)v70;
  v81 = (int64x2_t)vtrn1q_s32(v72, v74);
  v82 = (int64x2_t)vtrn2q_s32(v72, v74);
  v83 = (int64x2_t)vtrn1q_s32(v75, v77);
  v84 = (int64x2_t)vtrn2q_s32(v75, v77);
  v85 = (int64x2_t)vtrn1q_s32(v76, v78);
  v86 = (int64x2_t)vtrn2q_s32(v76, v78);
  v113 = vzip1q_s64(v79, v83);
  v114 = vzip1q_s64(v81, v85);
  v115 = vzip1q_s64(v80, v84);
  v116 = vzip1q_s64(v82, v86);
  v117 = vzip2q_s64(v79, v83);
  v118 = vzip2q_s64(v81, v85);
  v119 = vzip2q_s64(v80, v84);
  v120 = vzip2q_s64(v82, v86);
  if (v5)
  {
    v127 = (int16x8_t)v90;
    v128 = (int16x8_t)v89;
    v125 = (int16x8_t)v92;
    v126 = (int16x8_t)v91;
    v123 = (int16x8_t)v94;
    v124 = (int16x8_t)v93;
    v121 = (int16x8_t)v96;
    v122 = (int16x8_t)v95;
    v87 = (int64x2_t *)&v121;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v121, a2, 32, 12);
    v127 = v98;
    v128 = v97;
    v125 = v100;
    v126 = v99;
    v123 = v102;
    v124 = v101;
    v121 = v104;
    v122 = v103;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v121, a2 + 32, 32, 12);
    v127 = v106;
    v128 = v105;
    v125 = v108;
    v126 = v107;
    v123 = v110;
    v124 = v109;
    v121 = v112;
    v122 = v111;
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v121, a2 + 64, 32, 12);
    v127 = (int16x8_t)v114;
    v128 = (int16x8_t)v113;
    v125 = (int16x8_t)v116;
    v126 = (int16x8_t)v115;
    v123 = (int16x8_t)v118;
    v124 = (int16x8_t)v117;
    v121 = (int16x8_t)v120;
    v122 = (int16x8_t)v119;
  }
  else
  {
    v87 = &v113;
    ((void (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v6)(&v89, a2, 32, 12);
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v97, a2 + 32, 32, 12);
    ((void (*)(int16x8_t *, uint64_t, uint64_t, uint64_t))v6)(&v105, a2 + 64, 32, 12);
  }
  return ((uint64_t (*)(int64x2_t *, uint64_t, uint64_t, uint64_t))v6)(v87, a2 + 96, 32, 12);
}

uint64_t lowbd_fwd_txfm2d_32x8_neon(int16x4_t *a1, int32x4_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  int16x4_t *v7;
  int v8;
  uint64_t (*v9)();
  uint64_t (*v12)();
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t *v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  uint64_t v174;

  v5 = a3;
  v7 = a1;
  v174 = *MEMORY[0x24BDAC8D0];
  if (((0xF1FEuLL >> a4) & 1) != 0)
  {
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    av1_get_fwd_txfm_cfg(a4, 0xAu, (uint64_t)&v110);
    return fwd_txfm2d_c(v7, a2, v5, (unsigned __int8 *)&v110, v142.i32, a5);
  }
  v8 = 0;
  v9 = col_txfm8x8_arr[a4];
  if (a4 <= 0xF)
  {
    if (((1 << a4) & 0x4110) == 0)
    {
      if (((1 << a4) & 0x80A0) != 0)
      {
        v8 = 1;
        goto LABEL_10;
      }
      if ((_DWORD)a4 != 6)
        goto LABEL_10;
      v8 = 1;
    }
    v7 = (int16x4_t *)((char *)a1 + 14 * (int)a3);
    v5 = -(int)a3;
  }
LABEL_10:
  v12 = row_txfm8x32_arr[a4];
  ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v9)(v7, &v142, v5, 13);
  v13 = vrshrq_n_s16(v142, 2uLL);
  v14 = vrshrq_n_s16(v143, 2uLL);
  v15 = vrshrq_n_s16(v144, 2uLL);
  v16 = vrshrq_n_s16(v145, 2uLL);
  v17 = vrshrq_n_s16(v148, 2uLL);
  v18 = vrshrq_n_s16(v149, 2uLL);
  v19 = (int32x4_t)vtrn1q_s16(v13, v14);
  v20 = (int32x4_t)vtrn2q_s16(v13, v14);
  v21 = (int32x4_t)vtrn1q_s16(v15, v16);
  v142 = v13;
  v143 = v14;
  v144 = v15;
  v145 = v16;
  v146 = vrshrq_n_s16(v146, 2uLL);
  v147 = vrshrq_n_s16(v147, 2uLL);
  v22 = (int32x4_t)vtrn2q_s16(v15, v16);
  v23 = (int32x4_t)vtrn1q_s16(v146, v147);
  v24 = (int32x4_t)vtrn2q_s16(v146, v147);
  v25 = (int32x4_t)vtrn1q_s16(v17, v18);
  v26 = (int32x4_t)vtrn2q_s16(v17, v18);
  v148 = v17;
  v149 = v18;
  v27 = (int64x2_t)vtrn1q_s32(v19, v21);
  v28 = (int64x2_t)vtrn2q_s32(v19, v21);
  v29 = (int64x2_t)vtrn1q_s32(v20, v22);
  v30 = (int64x2_t)vtrn2q_s32(v20, v22);
  v31 = (int64x2_t)vtrn1q_s32(v23, v25);
  v32 = (int64x2_t)vtrn2q_s32(v23, v25);
  v33 = (int64x2_t)vtrn1q_s32(v24, v26);
  v34 = (int64x2_t)vtrn2q_s32(v24, v26);
  v110 = vzip1q_s64(v27, v31);
  v111 = vzip1q_s64(v29, v33);
  v112 = vzip1q_s64(v28, v32);
  v113 = vzip1q_s64(v30, v34);
  v114 = vzip2q_s64(v27, v31);
  v115 = vzip2q_s64(v29, v33);
  v116 = vzip2q_s64(v28, v32);
  v117 = vzip2q_s64(v30, v34);
  ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v9)(&v7[2], &v142, v5, 13);
  v35 = vrshrq_n_s16(v142, 2uLL);
  v36 = vrshrq_n_s16(v143, 2uLL);
  v37 = vrshrq_n_s16(v144, 2uLL);
  v38 = vrshrq_n_s16(v145, 2uLL);
  v39 = vrshrq_n_s16(v148, 2uLL);
  v40 = vrshrq_n_s16(v149, 2uLL);
  v41 = (int32x4_t)vtrn1q_s16(v35, v36);
  v42 = (int32x4_t)vtrn2q_s16(v35, v36);
  v43 = (int32x4_t)vtrn1q_s16(v37, v38);
  v142 = v35;
  v143 = v36;
  v144 = v37;
  v145 = v38;
  v146 = vrshrq_n_s16(v146, 2uLL);
  v147 = vrshrq_n_s16(v147, 2uLL);
  v44 = (int32x4_t)vtrn2q_s16(v37, v38);
  v45 = (int32x4_t)vtrn1q_s16(v146, v147);
  v46 = (int32x4_t)vtrn2q_s16(v146, v147);
  v47 = (int32x4_t)vtrn1q_s16(v39, v40);
  v48 = (int32x4_t)vtrn2q_s16(v39, v40);
  v148 = v39;
  v149 = v40;
  v49 = (int64x2_t)vtrn1q_s32(v41, v43);
  v50 = (int64x2_t)vtrn2q_s32(v41, v43);
  v51 = (int64x2_t)vtrn1q_s32(v42, v44);
  v52 = (int64x2_t)vtrn2q_s32(v42, v44);
  v53 = (int64x2_t)vtrn1q_s32(v45, v47);
  v54 = (int64x2_t)vtrn2q_s32(v45, v47);
  v55 = (int64x2_t)vtrn1q_s32(v46, v48);
  v56 = (int64x2_t)vtrn2q_s32(v46, v48);
  v118 = vzip1q_s64(v49, v53);
  v119 = vzip1q_s64(v51, v55);
  v120 = vzip1q_s64(v50, v54);
  v121 = vzip1q_s64(v52, v56);
  v122 = vzip2q_s64(v49, v53);
  v123 = vzip2q_s64(v51, v55);
  v124 = vzip2q_s64(v50, v54);
  v125 = vzip2q_s64(v52, v56);
  ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v9)(&v7[4], &v142, v5, 13);
  v57 = vrshrq_n_s16(v142, 2uLL);
  v58 = vrshrq_n_s16(v143, 2uLL);
  v59 = vrshrq_n_s16(v144, 2uLL);
  v60 = vrshrq_n_s16(v145, 2uLL);
  v61 = vrshrq_n_s16(v148, 2uLL);
  v62 = vrshrq_n_s16(v149, 2uLL);
  v63 = (int32x4_t)vtrn1q_s16(v57, v58);
  v64 = (int32x4_t)vtrn2q_s16(v57, v58);
  v65 = (int32x4_t)vtrn1q_s16(v59, v60);
  v142 = v57;
  v143 = v58;
  v144 = v59;
  v145 = v60;
  v146 = vrshrq_n_s16(v146, 2uLL);
  v147 = vrshrq_n_s16(v147, 2uLL);
  v66 = (int32x4_t)vtrn2q_s16(v59, v60);
  v67 = (int32x4_t)vtrn1q_s16(v146, v147);
  v68 = (int32x4_t)vtrn2q_s16(v146, v147);
  v69 = (int32x4_t)vtrn1q_s16(v61, v62);
  v70 = (int32x4_t)vtrn2q_s16(v61, v62);
  v148 = v61;
  v149 = v62;
  v71 = (int64x2_t)vtrn1q_s32(v63, v65);
  v72 = (int64x2_t)vtrn2q_s32(v63, v65);
  v73 = (int64x2_t)vtrn1q_s32(v64, v66);
  v74 = (int64x2_t)vtrn2q_s32(v64, v66);
  v75 = (int64x2_t)vtrn1q_s32(v67, v69);
  v76 = (int64x2_t)vtrn2q_s32(v67, v69);
  v77 = (int64x2_t)vtrn1q_s32(v68, v70);
  v78 = (int64x2_t)vtrn2q_s32(v68, v70);
  v126 = vzip1q_s64(v71, v75);
  v127 = vzip1q_s64(v73, v77);
  v128 = vzip1q_s64(v72, v76);
  v129 = vzip1q_s64(v74, v78);
  v130 = vzip2q_s64(v71, v75);
  v131 = vzip2q_s64(v73, v77);
  v132 = vzip2q_s64(v72, v76);
  v133 = vzip2q_s64(v74, v78);
  ((void (*)(int16x4_t *, int16x8_t *, uint64_t, uint64_t))v9)(&v7[6], &v142, v5, 13);
  v79 = vrshrq_n_s16(v142, 2uLL);
  v80 = vrshrq_n_s16(v143, 2uLL);
  v81 = vrshrq_n_s16(v144, 2uLL);
  v82 = vrshrq_n_s16(v145, 2uLL);
  v83 = vrshrq_n_s16(v148, 2uLL);
  v84 = vrshrq_n_s16(v149, 2uLL);
  v85 = (int32x4_t)vtrn1q_s16(v79, v80);
  v86 = (int32x4_t)vtrn2q_s16(v79, v80);
  v87 = (int32x4_t)vtrn1q_s16(v81, v82);
  v142 = v79;
  v143 = v80;
  v144 = v81;
  v145 = v82;
  v146 = vrshrq_n_s16(v146, 2uLL);
  v147 = vrshrq_n_s16(v147, 2uLL);
  v88 = (int32x4_t)vtrn2q_s16(v81, v82);
  v89 = (int32x4_t)vtrn1q_s16(v146, v147);
  v90 = (int32x4_t)vtrn2q_s16(v146, v147);
  v91 = (int32x4_t)vtrn1q_s16(v83, v84);
  v92 = (int32x4_t)vtrn2q_s16(v83, v84);
  v148 = v83;
  v149 = v84;
  v93 = (int64x2_t)vtrn1q_s32(v85, v87);
  v94 = (int64x2_t)vtrn2q_s32(v85, v87);
  v95 = (int64x2_t)vtrn1q_s32(v86, v88);
  v96 = (int64x2_t)vtrn2q_s32(v86, v88);
  v97 = (int64x2_t)vtrn1q_s32(v89, v91);
  v98 = (int64x2_t)vtrn2q_s32(v89, v91);
  v99 = (int64x2_t)vtrn1q_s32(v90, v92);
  v100 = (int64x2_t)vtrn2q_s32(v90, v92);
  v101 = vzip1q_s64(v93, v97);
  v102 = vzip2q_s64(v93, v97);
  v103 = vzip1q_s64(v95, v99);
  v134 = v101;
  v135 = v103;
  v104 = vzip2q_s64(v95, v99);
  v105 = vzip1q_s64(v94, v98);
  v106 = vzip2q_s64(v94, v98);
  v107 = vzip1q_s64(v96, v100);
  v136 = v105;
  v137 = v107;
  v108 = vzip2q_s64(v96, v100);
  v138 = v102;
  v139 = v104;
  v140 = v106;
  v141 = v108;
  if (v8)
  {
    v172 = v111;
    v173 = v110;
    v170 = v113;
    v171 = v112;
    v168 = v115;
    v169 = v114;
    v166 = v117;
    v167 = v116;
    v164 = v119;
    v165 = v118;
    v162 = v121;
    v163 = v120;
    v160 = v123;
    v161 = v122;
    v158 = v125;
    v159 = v124;
    v156 = v127;
    v157 = v126;
    v154 = v129;
    v155 = v128;
    v152 = v131;
    v153 = v130;
    v150 = v133;
    v151 = v132;
    v148 = (int16x8_t)v103;
    v149 = (int16x8_t)v101;
    v146 = (int16x8_t)v107;
    v147 = (int16x8_t)v105;
    v144 = (int16x8_t)v104;
    v145 = (int16x8_t)v102;
    v142 = (int16x8_t)v108;
    v143 = (int16x8_t)v106;
    v109 = (int64x2_t *)&v142;
  }
  else
  {
    v109 = &v110;
  }
  return ((uint64_t (*)(int64x2_t *, int32x4_t *, uint64_t, uint64_t))v12)(v109, a2, 8, 12);
}

uint64_t lowbd_fwd_txfm2d_16x64_neon()
{
  uint64_t v0;
  int32x4_t *v1;
  int v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  int16x8_t *v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int16x8_t v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int32x4_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int16x8_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x8_t v424;
  int16x8_t v425;
  int16x8_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int16x8_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int16x8_t v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int16x8_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int16x8_t v473;
  int16x8_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int16x8_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int16x8_t v495;
  int16x8_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int16x8_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int64x2_t v516;
  int64x2_t v517;
  int64x2_t v518;
  int64x2_t v519;
  int64x2_t v520;
  int64x2_t v521;
  int64x2_t v522;
  int64x2_t v523;
  int64x2_t *v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int64x2_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  int64x2_t v537;
  int64x2_t v538;
  int64x2_t v539;
  int64x2_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int64x2_t v549;
  int64x2_t v550;
  int64x2_t v551;
  int64x2_t v552;
  int64x2_t v553;
  int64x2_t v554;
  int64x2_t v555;
  int64x2_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int32x4_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int64x2_t v565;
  int64x2_t v566;
  int64x2_t v567;
  int64x2_t v568;
  int64x2_t v569;
  int64x2_t v570;
  int64x2_t v571;
  int64x2_t v572;
  int64x2_t v573;
  int64x2_t v574;
  int64x2_t v575;
  int64x2_t v576;
  int64x2_t v577;
  int64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int16x8_t v581;
  int16x8_t v582;
  int16x8_t v583;
  int16x8_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int32x4_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int64x2_t v597;
  int64x2_t v598;
  int64x2_t v599;
  int64x2_t v600;
  int64x2_t v601;
  int64x2_t v602;
  int64x2_t v603;
  int64x2_t v604;
  int64x2_t v605;
  int64x2_t v606;
  int64x2_t v607;
  int64x2_t v608;
  int64x2_t v609;
  int64x2_t v610;
  int64x2_t v611;
  int64x2_t v612;
  int16x8_t v613;
  int16x8_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int16x8_t v619;
  int16x8_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int64x2_t v629;
  int64x2_t v630;
  int64x2_t v631;
  int64x2_t v632;
  int64x2_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  int64x2_t v639;
  int64x2_t v640;
  int64x2_t v641;
  int64x2_t v642;
  int64x2_t v643;
  int64x2_t v644;
  int16x8_t v645;
  int16x8_t v646;
  int16x8_t v647;
  int16x8_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int16x8_t v651;
  int16x8_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  int64x2_t v666;
  int64x2_t v667;
  int64x2_t v668;
  int64x2_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int64x2_t v673;
  int64x2_t v674;
  int64x2_t v675;
  int64x2_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int16x8_t v681;
  int16x8_t v682;
  int16x8_t v683;
  int32x4_t v684;
  int32x4_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int32x4_t v688;
  int32x4_t v689;
  int32x4_t v690;
  int32x4_t v691;
  int64x2_t v692;
  int64x2_t v693;
  int64x2_t v694;
  int64x2_t v695;
  int64x2_t v696;
  int64x2_t v697;
  int64x2_t v698;
  int64x2_t v699;
  uint64_t v700;
  int32x4_t *v701;
  uint64_t result;
  _BYTE *v703;
  uint64_t v704;
  int16x8_t *v705;
  int16x8_t v706;
  int16x8_t v707;
  int16x8_t v708;
  int16x8_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int16x8_t v712;
  int16x8_t v713;
  int16x8_t v714;
  int16x8_t v715;
  int16x8_t v716;
  int16x8_t v717;
  int16x8_t v718;
  int16x8_t v719;
  int16x8_t v720;
  int16x8_t v721;
  int16x8_t v722;
  int16x8_t v723;
  int16x8_t v724;
  int16x8_t v725;
  int16x8_t v726;
  int16x8_t v727;
  int16x8_t v728;
  int16x8_t v729;
  int16x8_t v730;
  int16x8_t v731;
  int16x8_t v732;
  int16x8_t v733;
  int16x8_t v734;
  int16x8_t v735;
  int16x8_t v736;
  int16x8_t v737;
  int16x8_t v738;
  int16x8_t v739;
  int16x8_t v740;
  int16x8_t v741;
  int16x8_t v742;
  int16x8_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int16x8_t v746;
  int16x8_t v747;
  int16x8_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int32x4_t v751;
  int32x4_t v752;
  int16x8_t v753;
  int16x8_t v754;
  int16x8_t v755;
  int16x8_t v756;
  int16x8_t v757;
  int16x8_t v758;
  int16x8_t v759;
  int16x8_t v760;
  int16x8_t v761;
  int16x8_t v762;
  int16x8_t v763;
  int16x8_t v764;
  int16x8_t v765;
  int16x8_t v766;
  int16x8_t v767;
  int16x8_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int16x8_t v771;
  int16x8_t v772;
  int16x8_t v773;
  int16x8_t v774;
  int16x8_t v775;
  int16x8_t v776;
  int16x8_t v777;
  int16x8_t v778;
  int16x8_t v779;
  int16x8_t v780;
  int16x8_t v781;
  int32x4_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int16x8_t v786;
  int16x8_t v787;
  int32x4_t v788;
  int32x4_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int16x8_t v793;
  int16x8_t v794;
  int16x8_t v795;
  int16x8_t v796;
  int32x4_t v797;
  int32x4_t v798;
  int16x8_t v799;
  int32x4_t v800;
  int32x4_t v801;
  int16x8_t v802;
  int16x8_t v803;
  int16x8_t v804;
  int16x8_t v805;
  int32x4_t v806;
  int32x4_t v807;
  int16x8_t v808;
  int32x4_t v809;
  int32x4_t v810;
  int16x8_t v811;
  int16x8_t v812;
  int16x8_t v813;
  int16x8_t v814;
  int16x8_t v815;
  int16x8_t v816;
  int16x8_t v817;
  int16x8_t v818;
  int16x8_t v819;
  int16x8_t v820;
  int16x8_t v821;
  int16x8_t v822;
  int32x4_t v823;
  int32x4_t v824;
  int16x8_t v825;
  int16x8_t v826;
  int16x8_t v827;
  int32x4_t v828;
  int32x4_t v829;
  int16x8_t v830;
  int16x8_t v831;
  int16x8_t v832;
  int16x8_t v833;
  int16x8_t v834;
  int16x8_t v835;
  int16x8_t v836;
  int32x4_t v837;
  int32x4_t v838;
  int16x8_t v839;
  int32x4_t *v840;
  int16x8_t v841;
  int16x8_t v842;
  int16x8_t v843;
  int16x8_t v844;
  int16x8_t v845;
  int16x8_t v846;
  int16x8_t v847;
  int16x8_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int16x8_t v851;
  int16x8_t v852;
  int16x8_t v853;
  int32x4_t v854;
  int16x8_t v855;
  int32x4_t v856;
  int16x8_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int32x4_t v862;
  int32x4_t v863;
  int32x4_t v864;
  int32x4_t v865;
  int32x4_t v866;
  int32x4_t v867;
  int32x4_t v868;
  int32x4_t v869;
  int32x4_t v870;
  int32x4_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int16x8_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int16x8_t v882;
  int32x4_t v883;
  int16x8_t v884;
  int32x4_t v885;
  int16x8_t v886;
  int32x4_t v887;
  int16x8_t v888;
  int32x4_t v889;
  int16x8_t v890;
  int32x4_t v891;
  int16x8_t v892;
  int32x4_t v893;
  int16x8_t v894;
  int32x4_t v895;
  int16x8_t v896;
  int32x4_t v897;
  int16x8_t v898;
  int16x8_t v899;
  int32x4_t v900;
  int16x8_t v901;
  int32x4_t v902;
  int16x8_t v903;
  int32x4_t v904;
  int16x8_t v905;
  int16x8_t v906;
  int32x4_t v907;
  int16x8_t v908;
  int32x4_t v909;
  int16x8_t v910;
  int32x4_t v911;
  int16x8_t v912;
  int32x4_t v913;
  int16x8_t v914;
  int32x4_t v915;
  int16x8_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int16x8_t v920;
  int16x8_t v921;
  int32x4_t v922;
  int16x8_t v923;
  int16x8_t v924;
  int16x8_t v925;
  int16x8_t v926;
  int16x8_t v927;
  int16x8_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int32x4_t v937;
  int32x4_t v938;
  int32x4_t v939;
  int32x4_t v940;
  int16x8_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int16x8_t v944;
  int32x4_t v945;
  int16x8_t v946;
  int32x4_t v947;
  int16x8_t v948;
  int32x4_t v949;
  int16x8_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int32x4_t v953;
  int32x4_t v954;
  int32x4_t v955;
  int32x4_t v956;
  int32x4_t v957;
  int16x8_t v958;
  int16x8_t v959;
  int16x8_t v960;
  int16x8_t v961;
  int16x8_t v962;
  int16x8_t v963;
  int16x8_t v964;
  int16x8_t v965;
  int16x8_t v966;
  int32x4_t v967;
  int16x8_t v968;
  int16x8_t v969;
  int16x8_t v970;
  int16x8_t v971;
  int16x8_t v972;
  int16x8_t v973;
  int16x8_t v974;
  int16x8_t v975;
  int16x8_t v976;
  int16x8_t v977;
  int16x8_t v978;
  int16x8_t v979;
  int16x8_t v980;
  int16x8_t v981;
  int16x8_t v982;
  int16x8_t v983;
  int16x8_t v984;
  int16x8_t v985;
  int16x8_t v986;
  int16x8_t v987;
  int16x8_t v988;
  int16x8_t v989;
  int16x8_t v990;
  int16x8_t v991;
  int16x8_t v992;
  int16x8_t v993;
  int16x8_t v994;
  int16x8_t v995;
  int16x8_t v996;
  int16x8_t v997;
  int16x8_t v998;
  int16x8_t v999;
  int16x8_t v1000;
  int16x8_t v1001;
  int16x8_t v1002;
  int16x8_t v1003;
  int16x8_t v1004;
  int16x8_t v1005;
  int16x8_t v1006;
  int16x8_t v1007;
  int16x8_t v1008;
  int16x8_t v1009;
  int16x8_t v1010;
  int16x8_t v1011;
  int16x8_t v1012;
  int32x4_t v1013;
  int16x8_t v1014;
  int32x4_t v1015;
  int16x8_t v1016;
  int16x8_t v1017;
  int16x8_t v1018;
  int32x4_t v1019;
  int16x8_t v1020;
  int32x4_t v1021;
  int16x8_t v1022;
  int32x4_t v1023;
  int16x8_t v1024;
  int32x4_t v1025;
  int16x8_t v1026;
  int32x4_t v1027;
  int16x8_t v1028;
  int32x4_t v1029;
  int16x8_t v1030;
  int32x4_t v1031;
  int16x8_t v1032;
  int16x8_t v1033;
  int32x4_t v1034;
  int16x8_t v1035;
  int16x8_t v1036;
  int32x4_t v1037;
  int16x8_t v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  int16x8_t v1044;
  int16x8_t v1045;
  int16x8_t v1046;
  int16x8_t v1047;
  int16x8_t v1048;
  _BYTE v1049[2048];
  int16x8_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int16x8_t v1053;
  int16x8_t v1054;
  int16x8_t v1055;
  int16x8_t v1056;
  int16x8_t v1057;
  int16x8_t v1058;
  int16x8_t v1059;
  int16x8_t v1060;
  int16x8_t v1061;
  int16x8_t v1062;
  int16x8_t v1063;
  int16x8_t v1064;
  int16x8_t v1065;
  int16x8_t v1066;
  int16x8_t v1067;
  int16x8_t v1068;
  int16x8_t v1069;
  int16x8_t v1070;
  int16x8_t v1071;
  int16x8_t v1072;
  int16x8_t v1073;
  int16x8_t v1074;
  int16x8_t v1075;
  int16x8_t v1076;
  int16x8_t v1077;
  int16x8_t v1078;
  int16x8_t v1079;
  int16x8_t v1080;
  int16x8_t v1081;
  int16x8_t v1082;
  int16x8_t v1083;
  int16x8_t v1084;
  int16x8_t v1085;
  int16x8_t v1086;
  int16x8_t v1087;
  int16x8_t v1088;
  int16x8_t v1089;
  int16x8_t v1090;
  int16x8_t v1091;
  int16x8_t v1092;
  int16x8_t v1093;
  int16x8_t v1094;
  int16x8_t v1095;
  int16x8_t v1096;
  int16x8_t v1097;
  int16x8_t v1098;
  int16x8_t v1099;
  int16x8_t v1100;
  int16x8_t v1101;
  int16x8_t v1102;
  int16x8_t v1103;
  int16x8_t v1104;
  int16x8_t v1105;
  int16x8_t v1106;
  int16x8_t v1107;
  int16x8_t v1108;
  int16x8_t v1109;
  int16x8_t v1110;
  int16x8_t v1111;
  int16x8_t v1112;
  int16x8_t v1113;
  uint64_t v1114;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = 0;
  v4 = 1;
  v1011 = vdupq_n_s16(0x16A1u);
  v1010 = vdupq_n_s16(0xE95Fu);
  v1045 = vdupq_n_s16(0x1D90u);
  v1044 = vdupq_n_s16(0xC3Fu);
  v1048 = vdupq_n_s16(0xE270u);
  v1043 = vdupq_n_s16(0xF3C1u);
  v1042 = vdupq_n_s16(0x1F63u);
  v1047 = vdupq_n_s16(0x63Eu);
  v1046 = vdupq_n_s16(0xE09Du);
  v1009 = vdupq_n_s16(0xF9C2u);
  v1041 = vdupq_n_s16(0x11C7u);
  v1040 = vdupq_n_s16(0x1A9Bu);
  v1039 = vdupq_n_s16(0xEE39u);
  v1008 = vdupq_n_s16(0xE565u);
  v1007 = vdupq_n_s16(0x1FD9u);
  v1006 = vdupq_n_s16(0x323u);
  v1005 = vdupq_n_s16(0xE027u);
  v1004 = vdupq_n_s16(0x144Du);
  v1114 = *MEMORY[0x24BDAC8D0];
  v1003 = vdupq_n_s16(0x18BDu);
  v1002 = vdupq_n_s16(0xEBB3u);
  v1001 = vdupq_n_s16(0x1C39u);
  v1000 = vdupq_n_s16(0xF16u);
  v849 = vdupq_n_s16(0x94Au);
  v850 = vdupq_n_s16(0xE3C7u);
  v847 = vdupq_n_s16(0xF6B6u);
  v848 = vdupq_n_s16(0x1E9Fu);
  v845 = vdupq_n_s16(0xE743u);
  v846 = vdupq_n_s16(0xFCDDu);
  v843 = vdupq_n_s16(0xE161u);
  v844 = vdupq_n_s16(0xF0EAu);
  v842 = vdupq_n_s16(0x1FF6u);
  do
  {
    v5 = 0;
    v6 = v4;
    v7 = (int16x8_t *)(v0 + 2 * v3);
    do
    {
      *(int16x8_t *)((char *)&v1050 + v5) = *v7;
      v5 += 16;
      v7 = (int16x8_t *)((char *)v7 + 2 * v2);
    }
    while (v5 != 1024);
    v4 = 0;
    v987 = vqaddq_s16(v1054, v1109);
    v990 = vqaddq_s16(v1055, v1108);
    v993 = vqaddq_s16(v1060, v1103);
    v996 = vqaddq_s16(v1061, v1102);
    v998 = vqaddq_s16(v1070, v1093);
    v994 = vqaddq_s16(v1071, v1092);
    v991 = vqaddq_s16(v1076, v1087);
    v989 = vqaddq_s16(v1077, v1086);
    v8 = vqsubq_s16(v996, v998);
    v9 = vqsubq_s16(v993, v994);
    v10 = vqsubq_s16(v990, v991);
    v11 = vqsubq_s16(v987, v989);
    v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v8, v1011), v11, v1011), 0xDuLL);
    v13 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v8, v1010), v11, v1011), 0xDuLL);
    v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v10.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v9, v1011), v10, v1011), 0xDuLL);
    v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v10.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v9, v1010), v10, v1011), 0xDuLL);
    v983 = vqaddq_s16(v1056, v1107);
    v986 = vqaddq_s16(v1059, v1104);
    v984 = vqaddq_s16(v1072, v1091);
    v981 = vqaddq_s16(v1075, v1088);
    v16 = vqsubq_s16(v986, v984);
    v17 = vqsubq_s16(v983, v981);
    v18 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v16, v1011), v17, v1011), 0xDuLL);
    v19 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v16, v1010), v17, v1011), 0xDuLL);
    v977 = vqaddq_s16(v1057, v1106);
    v979 = vqaddq_s16(v1058, v1105);
    v976 = vqaddq_s16(v1073, v1090);
    v974 = vqaddq_s16(v1074, v1089);
    v20 = vqsubq_s16(v979, v976);
    v21 = vqsubq_s16(v977, v974);
    v22 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v20, v1011), v21, v1011), 0xDuLL);
    v23 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v20, v1010), v21, v1011), 0xDuLL);
    v970 = vqaddq_s16(v1052, v1111);
    v1038 = v1100;
    v973 = vqaddq_s16(v1063, v1100);
    v972 = vqaddq_s16(v1068, v1095);
    v968 = vqaddq_s16(v1079, v1084);
    v1035 = vqsubq_s16(v973, v972);
    v1032 = vqsubq_s16(v970, v968);
    v24 = vqaddq_s16(v1035, v15);
    v25 = vqaddq_s16(v1032, v14);
    v26 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v24, v1044), v25, v1045), 0xDuLL);
    v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v24, v1048), v25, v1044), 0xDuLL);
    v963 = vqaddq_s16(v1053, v1110);
    v965 = vqaddq_s16(v1062, v1101);
    v964 = vqaddq_s16(v1069, v1094);
    v962 = vqaddq_s16(v1078, v1085);
    v886 = vqsubq_s16(v965, v964);
    v888 = vqsubq_s16(v963, v962);
    v28 = vqaddq_s16(v886, v13);
    v29 = vqaddq_s16(v888, v12);
    v30 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v28, v1044), v29, v1045), 0xDuLL);
    v31 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v28, v1048), v29, v1044), 0xDuLL);
    v959 = vqaddq_s16(v1051, v1112);
    v961 = vqaddq_s16(v1064, v1099);
    v960 = vqaddq_s16(v1067, v1096);
    v958 = vqaddq_s16(v1080, v1083);
    v882 = vqsubq_s16(v961, v960);
    v884 = vqsubq_s16(v959, v958);
    v32 = vqaddq_s16(v882, v19);
    v875 = vqaddq_s16(v884, v18);
    v33 = vqaddq_s16(v32, v27);
    v34 = vqaddq_s16(v875, v26);
    v921 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v1047.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v1042.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v33, v1047), v34, v1042), 0xDuLL);
    v923 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v1047.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v33, v1046), v34, v1047), 0xDuLL);
    v928 = vqaddq_s16(v1065, v1098);
    v926 = vqaddq_s16(v1050, v1113);
    v927 = vqaddq_s16(v1066, v1097);
    v925 = vqaddq_s16(v1081, v1082);
    v35 = vqsubq_s16(v928, v927);
    v36 = vqsubq_s16(v926, v925);
    v37 = vqaddq_s16(v35, v23);
    v38 = vqaddq_s16(v36, v22);
    v924 = vqaddq_s16(v37, v31);
    v920 = vqaddq_s16(v38, v30);
    v39 = vqsubq_s16(v924, v923);
    v40 = vqsubq_s16(v920, v921);
    v41 = vdupq_n_s16(0x157Du);
    v42 = vdupq_n_s16(0x17B6u);
    v881 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v41.i8);
    v880 = vmlal_high_s16(vmull_high_s16(v39, v42), v40, v41);
    v43 = vdupq_n_s16(0xEA83u);
    v878 = vmlal_high_s16(vmull_high_s16(v39, v43), v40, v42);
    v879 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v42.i8);
    v44 = vqsubq_s16(v32, v27);
    v45 = vqsubq_s16(v37, v31);
    v46 = vqsubq_s16(v38, v30);
    v47 = vqsubq_s16(v875, v26);
    v48 = vmlal_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v1047.i8);
    v49 = vmlal_high_s16(vmull_high_s16(v44, v1046), v47, v1047);
    v50 = vmlal_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v1009.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v1046.i8);
    v51 = vmlal_high_s16(vmull_high_s16(v44, v1009), v47, v1046);
    v52 = vrshrn_high_n_s32(vrshrn_n_s32(v48, 0xDuLL), v49, 0xDuLL);
    v53 = vrshrn_high_n_s32(vrshrn_n_s32(v50, 0xDuLL), v51, 0xDuLL);
    v54 = vqsubq_s16(v45, v53);
    v55 = vqsubq_s16(v46, v52);
    v56 = vdupq_n_s16(0x1CEDu);
    v57 = vdupq_n_s16(0xDAFu);
    v877 = vmlal_s16(vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v57.i8), *(int16x4_t *)v55.i8, *(int16x4_t *)v56.i8);
    v876 = vmlal_high_s16(vmull_high_s16(v54, v57), v55, v56);
    v58 = vdupq_n_s16(0xE313u);
    v873 = vmlal_high_s16(vmull_high_s16(v54, v58), v55, v57);
    v874 = vmlal_s16(vmull_s16(*(int16x4_t *)v54.i8, *(int16x4_t *)v58.i8), *(int16x4_t *)v55.i8, *(int16x4_t *)v57.i8);
    v59 = vqaddq_s16(v45, v53);
    v60 = vqaddq_s16(v46, v52);
    v61 = vdupq_n_s16(0xF538u);
    v62 = vmull_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v61.i8);
    v63 = vmull_high_s16(v59, v61);
    v64 = vdupq_n_s16(0x1E21u);
    v871 = vmlal_high_s16(v63, v60, v64);
    v872 = vmlal_s16(v62, *(int16x4_t *)v60.i8, *(int16x4_t *)v64.i8);
    v65 = vqsubq_s16(v886, v13);
    v66 = vqsubq_s16(v1035, v15);
    v67 = vqsubq_s16(v882, v19);
    v68 = vqsubq_s16(v35, v23);
    v69 = vqsubq_s16(v36, v22);
    v70 = vqsubq_s16(v884, v18);
    v71 = vqsubq_s16(v1032, v14);
    v72 = vqsubq_s16(v888, v12);
    v73 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v1044.i8);
    v74 = vmlal_high_s16(vmull_high_s16(v65, v1048), v72, v1044);
    v75 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v1048.i8);
    v76 = vmlal_high_s16(vmull_high_s16(v65, v1043), v72, v1048);
    v77 = vrshrn_high_n_s32(vrshrn_n_s32(v73, 0xDuLL), v74, 0xDuLL);
    v78 = vrshrn_high_n_s32(vrshrn_n_s32(v75, 0xDuLL), v76, 0xDuLL);
    v79 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v66, v1048), v71, v1044), 0xDuLL);
    v80 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v1048.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v66, v1043), v71, v1048), 0xDuLL);
    v81 = vqsubq_s16(v67, v80);
    v82 = vqsubq_s16(v70, v79);
    v83 = vmlal_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v1040.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v1041.i8);
    v84 = vmlal_high_s16(vmull_high_s16(v81, v1040), v82, v1041);
    v85 = vmlal_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v1040.i8);
    v86 = vmlal_high_s16(vmull_high_s16(v81, v1039), v82, v1040);
    v87 = vrshrn_high_n_s32(vrshrn_n_s32(v83, 0xDuLL), v84, 0xDuLL);
    v88 = vrshrn_high_n_s32(vrshrn_n_s32(v85, 0xDuLL), v86, 0xDuLL);
    v89 = vqsubq_s16(v68, v78);
    v90 = vqsubq_s16(v69, v77);
    v91 = vqaddq_s16(v89, v88);
    v92 = vqaddq_s16(v90, v87);
    v93 = vdupq_n_s16(0x1F0Au);
    v94 = vdupq_n_s16(0x7C6u);
    v889 = vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v93.i8);
    v887 = vmlal_high_s16(vmull_high_s16(v91, v94), v92, v93);
    v95 = vdupq_n_s16(0xE0F6u);
    v883 = vmlal_high_s16(vmull_high_s16(v91, v95), v92, v94);
    v885 = vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v94.i8);
    v96 = vqsubq_s16(v89, v88);
    v97 = vqsubq_s16(v90, v87);
    v98 = vdupq_n_s16(0x1074u);
    v99 = vdupq_n_s16(0x1B73u);
    v870 = vmlal_s16(vmull_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v98.i8);
    v869 = vmlal_high_s16(vmull_high_s16(v96, v99), v97, v98);
    v100 = vdupq_n_s16(0xEF8Cu);
    v867 = vmlal_high_s16(vmull_high_s16(v96, v100), v97, v99);
    v868 = vmlal_s16(vmull_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v100.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v99.i8);
    v101 = vqaddq_s16(v67, v80);
    v102 = vqaddq_s16(v68, v78);
    v103 = vqaddq_s16(v69, v77);
    v104 = vqaddq_s16(v70, v79);
    v105 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v1040.i8);
    v106 = vmlal_high_s16(vmull_high_s16(v101, v1039), v104, v1040);
    v107 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v1008.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v1039.i8);
    v108 = vmlal_high_s16(vmull_high_s16(v101, v1008), v104, v1039);
    v109 = vrshrn_high_n_s32(vrshrn_n_s32(v105, 0xDuLL), v106, 0xDuLL);
    v110 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xDuLL), v108, 0xDuLL);
    v111 = vqsubq_s16(v102, v110);
    v112 = vqsubq_s16(v103, v109);
    v113 = vdupq_n_s16(0x19B4u);
    v114 = vdupq_n_s16(0x1310u);
    v866 = vmlal_s16(vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v113.i8);
    v865 = vmlal_high_s16(vmull_high_s16(v111, v114), v112, v113);
    v115 = vdupq_n_s16(0xE64Cu);
    v863 = vmlal_high_s16(vmull_high_s16(v111, v115), v112, v114);
    v864 = vmlal_s16(vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v115.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v114.i8);
    v116 = vqaddq_s16(v102, v110);
    v117 = vqaddq_s16(v103, v109);
    v118 = vdupq_n_s16(0x4B2u);
    v119 = vdupq_n_s16(0x1FA7u);
    v862 = vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v117.i8, *(int16x4_t *)v118.i8);
    v861 = vmlal_high_s16(vmull_high_s16(v116, v119), v117, v118);
    v120 = vdupq_n_s16(0xFB4Eu);
    v859 = vmlal_high_s16(vmull_high_s16(v116, v120), v117, v119);
    v860 = vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v120.i8), *(int16x4_t *)v117.i8, *(int16x4_t *)v119.i8);
    v1036 = vqsubq_s16(v1081, v1082);
    v1033 = vqsubq_s16(v1080, v1083);
    v1020 = vqsubq_s16(v1079, v1084);
    v1030 = vqsubq_s16(v1078, v1085);
    v905 = vqsubq_s16(v1076, v1087);
    v908 = vqsubq_s16(v1077, v1086);
    v892 = vqsubq_s16(v1075, v1088);
    v1022 = vqsubq_s16(v1074, v1089);
    v121 = vqsubq_s16(v1073, v1090);
    v122 = vqsubq_s16(v1072, v1091);
    v123 = vqsubq_s16(v1071, v1092);
    v124 = vqsubq_s16(v1070, v1093);
    v125 = vqsubq_s16(v1069, v1094);
    v126 = vqsubq_s16(v1068, v1095);
    v127 = vqsubq_s16(v1067, v1096);
    v128 = vqsubq_s16(v1066, v1097);
    v129 = vqsubq_s16(v1065, v1098);
    v130 = vqsubq_s16(v1064, v1099);
    v131 = vqsubq_s16(v1062, v1101);
    v132 = vqsubq_s16(v1061, v1102);
    v133 = vqsubq_s16(v1060, v1103);
    v134 = vqsubq_s16(v1059, v1104);
    v135 = vqsubq_s16(v1058, v1105);
    v901 = vqsubq_s16(v1057, v1106);
    v916 = vqsubq_s16(v1055, v1108);
    v912 = vqsubq_s16(v1056, v1107);
    v914 = vqsubq_s16(v1054, v1109);
    v1028 = vqsubq_s16(v1053, v1110);
    v890 = vqsubq_s16(v1052, v1111);
    v1024 = vqsubq_s16(v1051, v1112);
    v1026 = vqsubq_s16(v1050, v1113);
    v910 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v121, v1011), v135, v1011), 0xDuLL);
    v898 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v121, v1010), v135, v1011), 0xDuLL);
    v903 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v122, v1011), v134, v1011), 0xDuLL);
    v894 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v122, v1010), v134, v1011), 0xDuLL);
    v896 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v123, v1011), v133, v1011), 0xDuLL);
    v855 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v132.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v124, v1011), v132, v1011), 0xDuLL);
    v857 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v123, v1010), v133, v1011), 0xDuLL);
    v853 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v132.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v124, v1010), v132, v1011), 0xDuLL);
    v1016 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v131.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v1011), v131, v1011), 0xDuLL);
    v1014 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v131.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v125, v1010), v131, v1011), 0xDuLL);
    v136 = vqsubq_s16(v1063, v1100);
    v851 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v1010), v136, v1011), 0xDuLL);
    v852 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v126, v1011), v136, v1011), 0xDuLL);
    v1018 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v1011), v130, v1011), 0xDuLL);
    v137 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v127, v1010), v130, v1011), 0xDuLL);
    v1012 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v1011), v129, v1011), 0xDuLL);
    v138 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v128, v1010), v129, v1011), 0xDuLL);
    v139 = vqaddq_s16(v908, v853);
    v140 = vqaddq_s16(v914, v855);
    v141 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v140.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v139, v1044), v140, v1045), 0xDuLL);
    v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v140.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v139, v1048), v140, v1044), 0xDuLL);
    v143 = vqaddq_s16(v905, v857);
    v144 = vqaddq_s16(v916, v896);
    v145 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v1044), v144, v1045), 0xDuLL);
    v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v143, v1048), v144, v1044), 0xDuLL);
    v147 = vqaddq_s16(v892, v894);
    v148 = vqaddq_s16(v912, v903);
    v149 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v1044), v148, v1045), 0xDuLL);
    v150 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v147, v1048), v148, v1044), 0xDuLL);
    v151 = vqaddq_s16(v1022, v898);
    v152 = vqaddq_s16(v901, v910);
    v153 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v1044), v152, v1045), 0xDuLL);
    v154 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v151, v1048), v152, v1044), 0xDuLL);
    v155 = vqaddq_s16(v1020, v851);
    v941 = vqaddq_s16(v890, v852);
    v156 = vqaddq_s16(v155, v146);
    v157 = vqaddq_s16(v941, v145);
    v158 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v156.i8, *(int16x4_t *)v1047.i8), *(int16x4_t *)v157.i8, *(int16x4_t *)v1042.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v156, v1047), v157, v1042), 0xDuLL);
    v159 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v156.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v157.i8, *(int16x4_t *)v1047.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v156, v1046), v157, v1047), 0xDuLL);
    v160 = vqaddq_s16(v1030, v1014);
    v161 = vqaddq_s16(v1028, v1016);
    v162 = vqaddq_s16(v160, v142);
    v163 = vqaddq_s16(v161, v141);
    v164 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v1047.i8), *(int16x4_t *)v163.i8, *(int16x4_t *)v1042.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v162, v1047), v163, v1042), 0xDuLL);
    v165 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v163.i8, *(int16x4_t *)v1047.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v162, v1046), v163, v1047), 0xDuLL);
    v166 = vqaddq_s16(v1033, v137);
    v167 = vqaddq_s16(v1024, v1018);
    v168 = vqaddq_s16(v166, v150);
    v169 = vqaddq_s16(v167, v149);
    v170 = vqaddq_s16(v168, v159);
    v171 = vqaddq_s16(v169, v158);
    v950 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v1006.i8), *(int16x4_t *)v171.i8, *(int16x4_t *)v1007.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v170, v1006), v171, v1007), 0xDuLL);
    v948 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v1005.i8), *(int16x4_t *)v171.i8, *(int16x4_t *)v1006.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v170, v1005), v171, v1006), 0xDuLL);
    v172 = vqaddq_s16(v1036, v138);
    v173 = vqaddq_s16(v1026, v1012);
    v174 = vqaddq_s16(v172, v154);
    v175 = vqaddq_s16(v173, v153);
    v944 = vqaddq_s16(v174, v165);
    v946 = vqaddq_s16(v175, v164);
    v176 = vqsubq_s16(v944, v948);
    v177 = vqsubq_s16(v946, v950);
    v178 = vdupq_n_s16(0x1611u);
    v179 = vdupq_n_s16(0x172Du);
    v967 = vmlal_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v179.i8), *(int16x4_t *)v177.i8, *(int16x4_t *)v178.i8);
    v957 = vmlal_high_s16(vmull_high_s16(v176, v179), v177, v178);
    v180 = vdupq_n_s16(0xE9EFu);
    v956 = vmlal_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v180.i8), *(int16x4_t *)v177.i8, *(int16x4_t *)v179.i8);
    v955 = vmlal_high_s16(vmull_high_s16(v176, v180), v177, v179);
    v181 = vqsubq_s16(v168, v159);
    v182 = vqsubq_s16(v174, v165);
    v183 = vqsubq_s16(v175, v164);
    v184 = vqsubq_s16(v169, v158);
    v185 = vmlal_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v1005.i8), *(int16x4_t *)v184.i8, *(int16x4_t *)v1006.i8);
    v186 = vmlal_high_s16(vmull_high_s16(v181, v1005), v184, v1006);
    v187 = vmlal_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v846.i8), *(int16x4_t *)v184.i8, *(int16x4_t *)v1005.i8);
    v188 = vmlal_high_s16(vmull_high_s16(v181, v846), v184, v1005);
    v189 = vrshrn_high_n_s32(vrshrn_n_s32(v185, 0xDuLL), v186, 0xDuLL);
    v190 = vrshrn_high_n_s32(vrshrn_n_s32(v187, 0xDuLL), v188, 0xDuLL);
    v191 = vqsubq_s16(v182, v190);
    v192 = vqsubq_s16(v183, v189);
    v193 = vdupq_n_s16(0x1D41u);
    v194 = vdupq_n_s16(0xCF8u);
    v954 = vmlal_s16(vmull_s16(*(int16x4_t *)v191.i8, *(int16x4_t *)v194.i8), *(int16x4_t *)v192.i8, *(int16x4_t *)v193.i8);
    v953 = vmlal_high_s16(vmull_high_s16(v191, v194), v192, v193);
    v195 = vdupq_n_s16(0xE2BFu);
    v952 = vmlal_s16(vmull_s16(*(int16x4_t *)v191.i8, *(int16x4_t *)v195.i8), *(int16x4_t *)v192.i8, *(int16x4_t *)v194.i8);
    v951 = vmlal_high_s16(vmull_high_s16(v191, v195), v192, v194);
    v196 = vqaddq_s16(v182, v190);
    v197 = vqaddq_s16(v183, v189);
    v198 = vdupq_n_s16(0xB84u);
    v199 = vdupq_n_s16(0x1DDBu);
    v949 = vmlal_s16(vmull_s16(*(int16x4_t *)v196.i8, *(int16x4_t *)v199.i8), *(int16x4_t *)v197.i8, *(int16x4_t *)v198.i8);
    v947 = vmlal_high_s16(vmull_high_s16(v196, v199), v197, v198);
    v200 = vdupq_n_s16(0xF47Cu);
    v945 = vmlal_s16(vmull_s16(*(int16x4_t *)v196.i8, *(int16x4_t *)v200.i8), *(int16x4_t *)v197.i8, *(int16x4_t *)v199.i8);
    v943 = vmlal_high_s16(vmull_high_s16(v196, v200), v197, v199);
    v201 = vqsubq_s16(v160, v142);
    v202 = vqsubq_s16(v155, v146);
    v203 = vqsubq_s16(v166, v150);
    v204 = vqsubq_s16(v172, v154);
    v205 = vqsubq_s16(v173, v153);
    v206 = vqsubq_s16(v167, v149);
    v207 = vqsubq_s16(v941, v145);
    v208 = vqsubq_s16(v161, v141);
    v209 = vmlal_s16(vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v208.i8, *(int16x4_t *)v1047.i8);
    v210 = vmlal_high_s16(vmull_high_s16(v201, v1046), v208, v1047);
    v211 = vmlal_s16(vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v1009.i8), *(int16x4_t *)v208.i8, *(int16x4_t *)v1046.i8);
    v212 = vmlal_high_s16(vmull_high_s16(v201, v1009), v208, v1046);
    v213 = vrshrn_high_n_s32(vrshrn_n_s32(v209, 0xDuLL), v210, 0xDuLL);
    v214 = vrshrn_high_n_s32(vrshrn_n_s32(v211, 0xDuLL), v212, 0xDuLL);
    v215 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v207.i8, *(int16x4_t *)v1047.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v202, v1046), v207, v1047), 0xDuLL);
    v216 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v1009.i8), *(int16x4_t *)v207.i8, *(int16x4_t *)v1046.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v202, v1009), v207, v1046), 0xDuLL);
    v217 = vqsubq_s16(v203, v216);
    v218 = vqsubq_s16(v206, v215);
    v219 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v1003.i8), *(int16x4_t *)v218.i8, *(int16x4_t *)v1004.i8);
    v220 = vmlal_high_s16(vmull_high_s16(v217, v1003), v218, v1004);
    v221 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v1002.i8), *(int16x4_t *)v218.i8, *(int16x4_t *)v1003.i8);
    v222 = vmlal_high_s16(vmull_high_s16(v217, v1002), v218, v1003);
    v223 = vrshrn_high_n_s32(vrshrn_n_s32(v219, 0xDuLL), v220, 0xDuLL);
    v224 = vrshrn_high_n_s32(vrshrn_n_s32(v221, 0xDuLL), v222, 0xDuLL);
    v225 = vqsubq_s16(v204, v214);
    v226 = vqsubq_s16(v205, v213);
    v227 = vqaddq_s16(v225, v224);
    v228 = vqaddq_s16(v226, v223);
    v229 = vdupq_n_s16(0x1F39u);
    v230 = vdupq_n_s16(0x703u);
    v942 = vmlal_s16(vmull_s16(*(int16x4_t *)v227.i8, *(int16x4_t *)v230.i8), *(int16x4_t *)v228.i8, *(int16x4_t *)v229.i8);
    v940 = vmlal_high_s16(vmull_high_s16(v227, v230), v228, v229);
    v231 = vdupq_n_s16(0xE0C7u);
    v939 = vmlal_s16(vmull_s16(*(int16x4_t *)v227.i8, *(int16x4_t *)v231.i8), *(int16x4_t *)v228.i8, *(int16x4_t *)v230.i8);
    v938 = vmlal_high_s16(vmull_high_s16(v227, v231), v228, v230);
    v232 = vqsubq_s16(v225, v224);
    v233 = vqsubq_s16(v226, v223);
    v234 = vdupq_n_s16(0x111Fu);
    v235 = vdupq_n_s16(0x1B09u);
    v937 = vmlal_s16(vmull_s16(*(int16x4_t *)v232.i8, *(int16x4_t *)v235.i8), *(int16x4_t *)v233.i8, *(int16x4_t *)v234.i8);
    v936 = vmlal_high_s16(vmull_high_s16(v232, v235), v233, v234);
    v236 = vdupq_n_s16(0xEEE1u);
    v935 = vmlal_s16(vmull_s16(*(int16x4_t *)v232.i8, *(int16x4_t *)v236.i8), *(int16x4_t *)v233.i8, *(int16x4_t *)v235.i8);
    v934 = vmlal_high_s16(vmull_high_s16(v232, v236), v233, v235);
    v237 = vqaddq_s16(v203, v216);
    v238 = vqaddq_s16(v204, v214);
    v239 = vqaddq_s16(v205, v213);
    v240 = vqaddq_s16(v206, v215);
    v241 = vmlal_s16(vmull_s16(*(int16x4_t *)v237.i8, *(int16x4_t *)v1002.i8), *(int16x4_t *)v240.i8, *(int16x4_t *)v1003.i8);
    v242 = vmlal_high_s16(vmull_high_s16(v237, v1002), v240, v1003);
    v243 = vmlal_s16(vmull_s16(*(int16x4_t *)v237.i8, *(int16x4_t *)v845.i8), *(int16x4_t *)v240.i8, *(int16x4_t *)v1002.i8);
    v244 = vmlal_high_s16(vmull_high_s16(v237, v845), v240, v1002);
    v245 = vrshrn_high_n_s32(vrshrn_n_s32(v241, 0xDuLL), v242, 0xDuLL);
    v246 = vrshrn_high_n_s32(vrshrn_n_s32(v243, 0xDuLL), v244, 0xDuLL);
    v247 = vqsubq_s16(v238, v246);
    v248 = vqsubq_s16(v239, v245);
    v249 = vdupq_n_s16(0x1A2Au);
    v250 = vdupq_n_s16(0x126Du);
    v933 = vmlal_s16(vmull_s16(*(int16x4_t *)v247.i8, *(int16x4_t *)v250.i8), *(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8);
    v932 = vmlal_high_s16(vmull_high_s16(v247, v250), v248, v249);
    v251 = vdupq_n_s16(0xE5D6u);
    v931 = vmlal_s16(vmull_s16(*(int16x4_t *)v247.i8, *(int16x4_t *)v251.i8), *(int16x4_t *)v248.i8, *(int16x4_t *)v250.i8);
    v930 = vmlal_high_s16(vmull_high_s16(v247, v251), v248, v250);
    v252 = vqaddq_s16(v238, v246);
    v253 = vqaddq_s16(v239, v245);
    v254 = vdupq_n_s16(0x579u);
    v255 = vdupq_n_s16(0x1F87u);
    v929 = vmlal_s16(vmull_s16(*(int16x4_t *)v252.i8, *(int16x4_t *)v255.i8), *(int16x4_t *)v253.i8, *(int16x4_t *)v254.i8);
    v922 = vmlal_high_s16(vmull_high_s16(v252, v255), v253, v254);
    v256 = vdupq_n_s16(0xFA87u);
    v918 = vmlal_high_s16(vmull_high_s16(v252, v256), v253, v255);
    v919 = vmlal_s16(vmull_s16(*(int16x4_t *)v252.i8, *(int16x4_t *)v256.i8), *(int16x4_t *)v253.i8, *(int16x4_t *)v255.i8);
    v257 = vqsubq_s16(v1022, v898);
    v258 = vqsubq_s16(v892, v894);
    v259 = vqsubq_s16(v905, v857);
    v260 = vqsubq_s16(v908, v853);
    v261 = vqsubq_s16(v1020, v851);
    v906 = vqsubq_s16(v1030, v1014);
    v899 = vqsubq_s16(v1033, v137);
    v262 = vqsubq_s16(v1036, v138);
    v263 = vqsubq_s16(v1026, v1012);
    v264 = vqsubq_s16(v1024, v1018);
    v265 = vqsubq_s16(v890, v852);
    v266 = vqsubq_s16(v1028, v1016);
    v267 = vqsubq_s16(v914, v855);
    v268 = vqsubq_s16(v916, v896);
    v269 = vqsubq_s16(v912, v903);
    v270 = vqsubq_s16(v901, v910);
    v271 = vmlal_s16(vmull_s16(*(int16x4_t *)v257.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v1048.i8);
    v272 = vmlal_high_s16(vmull_high_s16(v257, v1043), v270, v1048);
    v273 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v257.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v257, v1048), v270, v1044), 0xDuLL);
    v274 = vrshrn_high_n_s32(vrshrn_n_s32(v271, 0xDuLL), v272, 0xDuLL);
    v275 = vmlal_s16(vmull_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v1048.i8);
    v276 = vmlal_high_s16(vmull_high_s16(v258, v1043), v269, v1048);
    v277 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v258, v1048), v269, v1044), 0xDuLL);
    v278 = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xDuLL), v276, 0xDuLL);
    v279 = vmlal_s16(vmull_s16(*(int16x4_t *)v259.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v268.i8, *(int16x4_t *)v1048.i8);
    v280 = vmlal_high_s16(vmull_high_s16(v259, v1043), v268, v1048);
    v281 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v259.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v268.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v259, v1048), v268, v1044), 0xDuLL);
    v282 = vrshrn_high_n_s32(vrshrn_n_s32(v279, 0xDuLL), v280, 0xDuLL);
    v283 = vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v267.i8, *(int16x4_t *)v1048.i8);
    v284 = vmlal_high_s16(vmull_high_s16(v260, v1043), v267, v1048);
    v285 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v267.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v260, v1048), v267, v1044), 0xDuLL);
    v286 = vrshrn_high_n_s32(vrshrn_n_s32(v283, 0xDuLL), v284, 0xDuLL);
    v287 = vqsubq_s16(v261, v282);
    v288 = vqsubq_s16(v265, v281);
    v289 = vmlal_s16(vmull_s16(*(int16x4_t *)v287.i8, *(int16x4_t *)v1040.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v1041.i8);
    v290 = vmlal_high_s16(vmull_high_s16(v287, v1040), v288, v1041);
    v291 = vmlal_s16(vmull_s16(*(int16x4_t *)v287.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v1040.i8);
    v292 = vmlal_high_s16(vmull_high_s16(v287, v1039), v288, v1040);
    v293 = vrshrn_high_n_s32(vrshrn_n_s32(v289, 0xDuLL), v290, 0xDuLL);
    v294 = vrshrn_high_n_s32(vrshrn_n_s32(v291, 0xDuLL), v292, 0xDuLL);
    v295 = vqsubq_s16(v906, v286);
    v296 = vqsubq_s16(v266, v285);
    v297 = vmlal_s16(vmull_s16(*(int16x4_t *)v295.i8, *(int16x4_t *)v1040.i8), *(int16x4_t *)v296.i8, *(int16x4_t *)v1041.i8);
    v298 = vmlal_high_s16(vmull_high_s16(v295, v1040), v296, v1041);
    v299 = vmlal_s16(vmull_s16(*(int16x4_t *)v295.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v296.i8, *(int16x4_t *)v1040.i8);
    v300 = vmlal_high_s16(vmull_high_s16(v295, v1039), v296, v1040);
    v301 = vrshrn_high_n_s32(vrshrn_n_s32(v297, 0xDuLL), v298, 0xDuLL);
    v302 = vrshrn_high_n_s32(vrshrn_n_s32(v299, 0xDuLL), v300, 0xDuLL);
    v303 = vqsubq_s16(v899, v278);
    v304 = vqsubq_s16(v264, v277);
    v305 = vqaddq_s16(v303, v294);
    v306 = vqaddq_s16(v304, v293);
    v307 = vmlal_s16(vmull_s16(*(int16x4_t *)v305.i8, *(int16x4_t *)v1000.i8), *(int16x4_t *)v306.i8, *(int16x4_t *)v1001.i8);
    v308 = vmlal_high_s16(vmull_high_s16(v305, v1000), v306, v1001);
    v309 = vmlal_s16(vmull_s16(*(int16x4_t *)v305.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v306.i8, *(int16x4_t *)v1000.i8);
    v310 = vmlal_high_s16(vmull_high_s16(v305, v850), v306, v1000);
    v311 = vrshrn_high_n_s32(vrshrn_n_s32(v307, 0xDuLL), v308, 0xDuLL);
    v312 = vrshrn_high_n_s32(vrshrn_n_s32(v309, 0xDuLL), v310, 0xDuLL);
    v313 = vqsubq_s16(v262, v274);
    v314 = vqsubq_s16(v263, v273);
    v315 = vqaddq_s16(v313, v302);
    v316 = vqaddq_s16(v314, v301);
    v317 = vqaddq_s16(v315, v312);
    v318 = vqaddq_s16(v316, v311);
    v319 = vdupq_n_s16(0x1FC2u);
    v320 = vdupq_n_s16(0x3EBu);
    v1037 = vmlal_s16(vmull_s16(*(int16x4_t *)v317.i8, *(int16x4_t *)v320.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v319.i8);
    v1034 = vmlal_high_s16(vmull_high_s16(v317, v320), v318, v319);
    v321 = vdupq_n_s16(0xE03Eu);
    v1031 = vmlal_s16(vmull_s16(*(int16x4_t *)v317.i8, *(int16x4_t *)v321.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v320.i8);
    v1029 = vmlal_high_s16(vmull_high_s16(v317, v321), v318, v320);
    v322 = vqsubq_s16(v315, v312);
    v323 = vqsubq_s16(v316, v311);
    v324 = vdupq_n_s16(0x13B0u);
    v325 = vdupq_n_s16(0x193Au);
    v1027 = vmlal_s16(vmull_s16(*(int16x4_t *)v322.i8, *(int16x4_t *)v325.i8), *(int16x4_t *)v323.i8, *(int16x4_t *)v324.i8);
    v1025 = vmlal_high_s16(vmull_high_s16(v322, v325), v323, v324);
    v326 = vdupq_n_s16(0xEC50u);
    v1023 = vmlal_s16(vmull_s16(*(int16x4_t *)v322.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v323.i8, *(int16x4_t *)v325.i8);
    v1021 = vmlal_high_s16(vmull_high_s16(v322, v326), v323, v325);
    v327 = vqsubq_s16(v303, v294);
    v328 = vqsubq_s16(v313, v302);
    v329 = vqsubq_s16(v314, v301);
    v330 = vqsubq_s16(v304, v293);
    v331 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v330.i8, *(int16x4_t *)v1000.i8);
    v332 = vmlal_high_s16(vmull_high_s16(v327, v850), v330, v1000);
    v333 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v844.i8), *(int16x4_t *)v330.i8, *(int16x4_t *)v850.i8);
    v334 = vmlal_high_s16(vmull_high_s16(v327, v844), v330, v850);
    v335 = vrshrn_high_n_s32(vrshrn_n_s32(v331, 0xDuLL), v332, 0xDuLL);
    v336 = vrshrn_high_n_s32(vrshrn_n_s32(v333, 0xDuLL), v334, 0xDuLL);
    v337 = vqsubq_s16(v328, v336);
    v338 = vqsubq_s16(v329, v335);
    v339 = vdupq_n_s16(0x1BD8u);
    v340 = vdupq_n_s16(0xFC6u);
    v1019 = vmlal_s16(vmull_s16(*(int16x4_t *)v337.i8, *(int16x4_t *)v340.i8), *(int16x4_t *)v338.i8, *(int16x4_t *)v339.i8);
    v1015 = vmlal_high_s16(vmull_high_s16(v337, v340), v338, v339);
    v341 = vdupq_n_s16(0xE428u);
    v1013 = vmlal_s16(vmull_s16(*(int16x4_t *)v337.i8, *(int16x4_t *)v341.i8), *(int16x4_t *)v338.i8, *(int16x4_t *)v340.i8);
    v917 = vmlal_high_s16(vmull_high_s16(v337, v341), v338, v340);
    v342 = vqaddq_s16(v328, v336);
    v343 = vqaddq_s16(v329, v335);
    v344 = vdupq_n_s16(0x889u);
    v345 = vdupq_n_s16(0x1ED7u);
    v913 = vmlal_s16(vmull_s16(*(int16x4_t *)v342.i8, *(int16x4_t *)v345.i8), *(int16x4_t *)v343.i8, *(int16x4_t *)v344.i8);
    v915 = vmlal_high_s16(vmull_high_s16(v342, v345), v343, v344);
    v346 = vdupq_n_s16(0xF777u);
    v347 = vmlal_s16(vmull_s16(*(int16x4_t *)v342.i8, *(int16x4_t *)v346.i8), *(int16x4_t *)v343.i8, *(int16x4_t *)v345.i8);
    v911 = vmlal_high_s16(vmull_high_s16(v342, v346), v343, v345);
    v348 = vqaddq_s16(v906, v286);
    v349 = vqaddq_s16(v261, v282);
    v350 = vqaddq_s16(v899, v278);
    v351 = vqaddq_s16(v262, v274);
    v352 = vqaddq_s16(v263, v273);
    v353 = vqaddq_s16(v264, v277);
    v354 = vqaddq_s16(v265, v281);
    v355 = vqaddq_s16(v266, v285);
    v356 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v1040.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v348, v1039), v355, v1040), 0xDuLL);
    v357 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v1008.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v1039.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v348, v1008), v355, v1039), 0xDuLL);
    v358 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v354.i8, *(int16x4_t *)v1040.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v1039), v354, v1040), 0xDuLL);
    v359 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v1008.i8), *(int16x4_t *)v354.i8, *(int16x4_t *)v1039.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v349, v1008), v354, v1039), 0xDuLL);
    v360 = vqsubq_s16(v350, v359);
    v361 = vqsubq_s16(v353, v358);
    v362 = vmlal_s16(vmull_s16(*(int16x4_t *)v360.i8, *(int16x4_t *)v848.i8), *(int16x4_t *)v361.i8, *(int16x4_t *)v849.i8);
    v363 = vmlal_high_s16(vmull_high_s16(v360, v848), v361, v849);
    v364 = vmlal_s16(vmull_s16(*(int16x4_t *)v360.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v361.i8, *(int16x4_t *)v848.i8);
    v365 = vmlal_high_s16(vmull_high_s16(v360, v847), v361, v848);
    v366 = vrshrn_high_n_s32(vrshrn_n_s32(v362, 0xDuLL), v363, 0xDuLL);
    v367 = vrshrn_high_n_s32(vrshrn_n_s32(v364, 0xDuLL), v365, 0xDuLL);
    v368 = vqsubq_s16(v351, v357);
    v369 = vqsubq_s16(v352, v356);
    v370 = vqsubq_s16(v368, v367);
    v371 = vqsubq_s16(v369, v366);
    v372 = vdupq_n_s16(0xE63u);
    v373 = vdupq_n_s16(0x1C95u);
    v909 = vmlal_s16(vmull_s16(*(int16x4_t *)v370.i8, *(int16x4_t *)v373.i8), *(int16x4_t *)v371.i8, *(int16x4_t *)v372.i8);
    v907 = vmlal_high_s16(vmull_high_s16(v370, v373), v371, v372);
    v374 = vdupq_n_s16(0xF19Du);
    v902 = vmlal_high_s16(vmull_high_s16(v370, v374), v371, v373);
    v904 = vmlal_s16(vmull_s16(*(int16x4_t *)v370.i8, *(int16x4_t *)v374.i8), *(int16x4_t *)v371.i8, *(int16x4_t *)v373.i8);
    v375 = vqaddq_s16(v350, v359);
    v376 = vqaddq_s16(v351, v357);
    v377 = vqaddq_s16(v352, v356);
    v378 = vqaddq_s16(v353, v358);
    v379 = vmlal_s16(vmull_s16(*(int16x4_t *)v375.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v848.i8);
    v380 = vmlal_high_s16(vmull_high_s16(v375, v847), v378, v848);
    v381 = vmlal_s16(vmull_s16(*(int16x4_t *)v375.i8, *(int16x4_t *)v843.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v847.i8);
    v382 = vmlal_high_s16(vmull_high_s16(v375, v843), v378, v847);
    v383 = vrshrn_high_n_s32(vrshrn_n_s32(v379, 0xDuLL), v380, 0xDuLL);
    v384 = vrshrn_high_n_s32(vrshrn_n_s32(v381, 0xDuLL), v382, 0xDuLL);
    v385 = vqsubq_s16(v376, v384);
    v386 = vqsubq_s16(v377, v383);
    v387 = vdupq_n_s16(0x183Bu);
    v388 = vdupq_n_s16(0x14E7u);
    v900 = vmlal_s16(vmull_s16(*(int16x4_t *)v385.i8, *(int16x4_t *)v388.i8), *(int16x4_t *)v386.i8, *(int16x4_t *)v387.i8);
    v897 = vmlal_high_s16(vmull_high_s16(v385, v388), v386, v387);
    v389 = vdupq_n_s16(0xE7C5u);
    v893 = vmlal_high_s16(vmull_high_s16(v385, v389), v386, v388);
    v895 = vmlal_s16(vmull_s16(*(int16x4_t *)v385.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v386.i8, *(int16x4_t *)v388.i8);
    v390 = vqaddq_s16(v376, v384);
    v391 = vqaddq_s16(v377, v383);
    v392 = vdupq_n_s16(0x25Bu);
    v393 = vdupq_n_s16(0x1FEAu);
    v891 = vmlal_s16(vmull_s16(*(int16x4_t *)v390.i8, *(int16x4_t *)v393.i8), *(int16x4_t *)v391.i8, *(int16x4_t *)v392.i8);
    v858 = vmlal_high_s16(vmull_high_s16(v390, v393), v391, v392);
    v394 = vdupq_n_s16(0xFDA5u);
    v854 = vmlal_high_s16(vmull_high_s16(v390, v394), v391, v393);
    v856 = vmlal_s16(vmull_s16(*(int16x4_t *)v390.i8, *(int16x4_t *)v394.i8), *(int16x4_t *)v391.i8, *(int16x4_t *)v393.i8);
    v395 = vqaddq_s16(v926, v925);
    v396 = vqaddq_s16(v959, v958);
    v397 = vqaddq_s16(v970, v968);
    v398 = vqaddq_s16(v963, v962);
    v399 = vqaddq_s16(v987, v989);
    v400 = vqaddq_s16(v990, v991);
    v401 = vqaddq_s16(v983, v981);
    v402 = vqaddq_s16(v977, v974);
    v403 = vqaddq_s16(v979, v976);
    v404 = vqaddq_s16(v986, v984);
    v405 = vqaddq_s16(v993, v994);
    v406 = vqaddq_s16(v996, v998);
    v407 = vqaddq_s16(v965, v964);
    v408 = vqaddq_s16(v973, v972);
    v409 = vqaddq_s16(v961, v960);
    v410 = vqaddq_s16(v928, v927);
    v411 = vqaddq_s16(v402, v403);
    v412 = vqsubq_s16(v402, v403);
    v413 = vqaddq_s16(v401, v404);
    v414 = vqsubq_s16(v401, v404);
    v415 = vqaddq_s16(v400, v405);
    v416 = vqsubq_s16(v400, v405);
    v417 = vqaddq_s16(v399, v406);
    v418 = vqsubq_s16(v399, v406);
    v419 = vqaddq_s16(v398, v407);
    v420 = vqsubq_s16(v398, v407);
    v421 = vqaddq_s16(v397, v408);
    v422 = vqsubq_s16(v397, v408);
    v423 = vqaddq_s16(v396, v409);
    v424 = vqsubq_s16(v396, v409);
    v425 = vqaddq_s16(v395, v410);
    v426 = vqsubq_s16(v395, v410);
    v427 = vqaddq_s16(v419, v417);
    v428 = vqsubq_s16(v419, v417);
    v429 = vqaddq_s16(v421, v415);
    v430 = vqsubq_s16(v421, v415);
    v431 = vqaddq_s16(v423, v413);
    v432 = vqsubq_s16(v423, v413);
    v433 = vqaddq_s16(v425, v411);
    v434 = vqsubq_s16(v425, v411);
    v435 = vmlal_s16(vmull_s16(*(int16x4_t *)v416.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v422.i8, *(int16x4_t *)v1011.i8);
    v436 = vmlal_high_s16(vmull_high_s16(v416, v1011), v422, v1011);
    v437 = vmlal_s16(vmull_s16(*(int16x4_t *)v416.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v422.i8, *(int16x4_t *)v1011.i8);
    v438 = vmlal_high_s16(vmull_high_s16(v416, v1010), v422, v1011);
    v439 = vrshrn_high_n_s32(vrshrn_n_s32(v435, 0xDuLL), v436, 0xDuLL);
    v440 = vrshrn_high_n_s32(vrshrn_n_s32(v437, 0xDuLL), v438, 0xDuLL);
    v441 = vmlal_s16(vmull_s16(*(int16x4_t *)v418.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v420.i8, *(int16x4_t *)v1011.i8);
    v442 = vmlal_high_s16(vmull_high_s16(v418, v1011), v420, v1011);
    v443 = vmlal_s16(vmull_s16(*(int16x4_t *)v418.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v420.i8, *(int16x4_t *)v1011.i8);
    v444 = vmlal_high_s16(vmull_high_s16(v418, v1010), v420, v1011);
    v445 = vrshrn_high_n_s32(vrshrn_n_s32(v441, 0xDuLL), v442, 0xDuLL);
    v446 = vrshrn_high_n_s32(vrshrn_n_s32(v443, 0xDuLL), v444, 0xDuLL);
    v447 = vqaddq_s16(v431, v429);
    v448 = vqsubq_s16(v431, v429);
    v449 = vqaddq_s16(v433, v427);
    v450 = vqsubq_s16(v433, v427);
    v451 = vmlal_s16(vmull_s16(*(int16x4_t *)v430.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v432.i8, *(int16x4_t *)v1011.i8);
    v452 = vmlal_high_s16(vmull_high_s16(v430, v1011), v432, v1011);
    v453 = vmlal_s16(vmull_s16(*(int16x4_t *)v430.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v432.i8, *(int16x4_t *)v1011.i8);
    v454 = vmlal_high_s16(vmull_high_s16(v430, v1010), v432, v1011);
    v455 = vrshrn_high_n_s32(vrshrn_n_s32(v451, 0xDuLL), v452, 0xDuLL);
    v456 = vrshrn_high_n_s32(vrshrn_n_s32(v453, 0xDuLL), v454, 0xDuLL);
    v457 = vqaddq_s16(v414, v440);
    v458 = vqsubq_s16(v414, v440);
    v459 = vqaddq_s16(v412, v446);
    v460 = vqsubq_s16(v412, v446);
    v461 = vqsubq_s16(v424, v439);
    v462 = vqaddq_s16(v424, v439);
    v463 = vqsubq_s16(v426, v445);
    v464 = vqaddq_s16(v426, v445);
    v966 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v449.i8, *(int16x4_t *)v1011.i8), *(int16x4_t *)v447.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v449, v1011), v447, v1011), 0xDuLL);
    v995 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v449.i8, *(int16x4_t *)v1010.i8), *(int16x4_t *)v447.i8, *(int16x4_t *)v1011.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v449, v1010), v447, v1011), 0xDuLL);
    v982 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v450.i8, *(int16x4_t *)v1045.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v1044), v450, v1045), 0xDuLL);
    v999 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v448.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v450.i8, *(int16x4_t *)v1044.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v448, v1048), v450, v1044), 0xDuLL);
    v465 = vqaddq_s16(v428, v456);
    v466 = vqsubq_s16(v428, v456);
    v467 = vqsubq_s16(v434, v455);
    v468 = vqaddq_s16(v434, v455);
    v469 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v1044.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v1045.i8);
    v470 = vmlal_high_s16(vmull_high_s16(v457, v1044), v462, v1045);
    v471 = vmlal_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v1044.i8);
    v472 = vmlal_high_s16(vmull_high_s16(v457, v1048), v462, v1044);
    v473 = vrshrn_high_n_s32(vrshrn_n_s32(v469, 0xDuLL), v470, 0xDuLL);
    v474 = vrshrn_high_n_s32(vrshrn_n_s32(v471, 0xDuLL), v472, 0xDuLL);
    v475 = vmlal_s16(vmull_s16(*(int16x4_t *)v458.i8, *(int16x4_t *)v1048.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v1044.i8);
    v476 = vmlal_high_s16(vmull_high_s16(v458, v1048), v461, v1044);
    v477 = vmlal_s16(vmull_s16(*(int16x4_t *)v458.i8, *(int16x4_t *)v1043.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v1048.i8);
    v478 = vmlal_high_s16(vmull_high_s16(v458, v1043), v461, v1048);
    v479 = vrshrn_high_n_s32(vrshrn_n_s32(v475, 0xDuLL), v476, 0xDuLL);
    v480 = vrshrn_high_n_s32(vrshrn_n_s32(v477, 0xDuLL), v478, 0xDuLL);
    v969 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v1047.i8), *(int16x4_t *)v468.i8, *(int16x4_t *)v1042.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v1047), v468, v1042), 0xDuLL);
    v1017 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v1046.i8), *(int16x4_t *)v468.i8, *(int16x4_t *)v1047.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v465, v1046), v468, v1047), 0xDuLL);
    v992 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v466.i8, *(int16x4_t *)v1040.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v1041.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v466, v1040), v467, v1041), 0xDuLL);
    v980 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v466.i8, *(int16x4_t *)v1039.i8), *(int16x4_t *)v467.i8, *(int16x4_t *)v1040.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v466, v1039), v467, v1040), 0xDuLL);
    v481 = vqaddq_s16(v459, v474);
    v482 = vqsubq_s16(v459, v474);
    v483 = vqsubq_s16(v460, v480);
    v484 = vqaddq_s16(v460, v480);
    v485 = vqaddq_s16(v463, v479);
    v486 = vqsubq_s16(v463, v479);
    v487 = vqsubq_s16(v464, v473);
    v488 = vqaddq_s16(v464, v473);
    v489 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v1006.i8), *(int16x4_t *)v488.i8, *(int16x4_t *)v1007.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v1006), v488, v1007), 0xDuLL);
    v997 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v481.i8, *(int16x4_t *)v1005.i8), *(int16x4_t *)v488.i8, *(int16x4_t *)v1006.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v481, v1005), v488, v1006), 0xDuLL);
    v985 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v1003.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v1004.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v1003), v487, v1004), 0xDuLL);
    v978 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v482.i8, *(int16x4_t *)v1002.i8), *(int16x4_t *)v487.i8, *(int16x4_t *)v1003.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v482, v1002), v487, v1003), 0xDuLL);
    v971 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v1000.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v1001.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v1000), v486, v1001), 0xDuLL);
    v988 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v483.i8, *(int16x4_t *)v850.i8), *(int16x4_t *)v486.i8, *(int16x4_t *)v1000.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v483, v850), v486, v1000), 0xDuLL);
    v490 = vqaddq_s16(v924, v923);
    v491 = vqaddq_s16(v920, v921);
    v492 = vdupq_n_s16(0xE00Au);
    v493 = vdupq_n_s16(0x192u);
    v494 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v493.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v842.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v493), v491, v842), 0xDuLL);
    v495 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v490.i8, *(int16x4_t *)v492.i8), *(int16x4_t *)v491.i8, *(int16x4_t *)v493.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v490, v492), v491, v493), 0xDuLL);
    v496 = vqaddq_s16(v944, v948);
    v497 = (int8x16_t)vqaddq_s16(v368, v367);
    v498 = (int8x16_t)vqaddq_s16(v369, v366);
    v499 = vqaddq_s16(v946, v950);
    v500 = vdupq_n_s16(0x1FFEu);
    v501 = vmlal_s16(vmull_s16(*(int16x4_t *)v496.i8, (int16x4_t)0xC900C900C900C9), *(int16x4_t *)v499.i8, *(int16x4_t *)v500.i8);
    v481.i64[0] = 0xC900C900C900C9;
    v481.i64[1] = 0xC900C900C900C9;
    v502 = vmlal_high_s16(vmull_high_s16(v496, v481), v499, v500);
    v503 = vdupq_n_s16(0xE002u);
    v504 = vrshrn_high_n_s32(vrshrn_n_s32(v501, 0xDuLL), v502, 0xDuLL);
    v975 = vrshrq_n_s16(v495, 2uLL);
    v1113 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v496.i8, *(int16x4_t *)v503.i8), *(int16x4_t *)v499.i8, (int16x4_t)0xC900C900C900C9), 0xDuLL), vmlal_high_s16(vmull_high_s16(v496, v503), v499, v481), 0xDuLL);
    v505 = vdupq_n_s16(0x1E63u);
    v506 = vdupq_n_s16(0xE19Du);
    v507 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v497.i8, *(int16x4_t *)v506.i8), *(int16x4_t *)v498.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v498, v498, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v497, v506), 0xDuLL);
    v1050 = vrshrq_n_s16(v966, 2uLL);
    v1051 = vrshrq_n_s16(v504, 2uLL);
    v508 = (int32x4_t)vtrn1q_s16(v1050, v1051);
    v509 = (int32x4_t)vtrn2q_s16(v1050, v1051);
    v1052 = vrshrq_n_s16(v494, 2uLL);
    v1053 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v856, 0xDuLL), v854, 0xDuLL), 2uLL);
    v510 = (int32x4_t)vtrn1q_s16(v1052, v1053);
    v511 = (int32x4_t)vtrn2q_s16(v1052, v1053);
    v1054 = vrshrq_n_s16(v489, 2uLL);
    v1055 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1037, 0xDuLL), v1034, 0xDuLL), 2uLL);
    v512 = (int32x4_t)vtrn1q_s16(v1054, v1055);
    v513 = (int32x4_t)vtrn2q_s16(v1054, v1055);
    v1056 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v860, 0xDuLL), v859, 0xDuLL), 2uLL);
    v1057 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v919, 0xDuLL), v918, 0xDuLL), 2uLL);
    v514 = (int32x4_t)vtrn1q_s16(v1056, v1057);
    v515 = (int32x4_t)vtrn2q_s16(v1056, v1057);
    v516 = (int64x2_t)vtrn1q_s32(v508, v510);
    v517 = (int64x2_t)vtrn2q_s32(v508, v510);
    v518 = (int64x2_t)vtrn1q_s32(v509, v511);
    v519 = (int64x2_t)vtrn2q_s32(v509, v511);
    v520 = (int64x2_t)vtrn1q_s32(v512, v514);
    v521 = (int64x2_t)vtrn2q_s32(v512, v514);
    v522 = (int64x2_t)vtrn1q_s32(v513, v515);
    v523 = (int64x2_t)vtrn2q_s32(v513, v515);
    v524 = (int64x2_t *)&v1049[16 * v3];
    *v524 = vzip1q_s64(v516, v520);
    v524[1] = vzip1q_s64(v518, v522);
    v524[2] = vzip1q_s64(v517, v521);
    v524[3] = vzip1q_s64(v519, v523);
    v524[4] = vzip2q_s64(v516, v520);
    v524[5] = vzip2q_s64(v518, v522);
    v524[6] = vzip2q_s64(v517, v521);
    v524[7] = vzip2q_s64(v519, v523);
    v1058 = vrshrq_n_s16(v969, 2uLL);
    v1059 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v942, 0xDuLL), v940, 0xDuLL), 2uLL);
    v525 = (int32x4_t)vtrn1q_s16(v1058, v1059);
    v526 = (int32x4_t)vtrn2q_s16(v1058, v1059);
    v1060 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v889, 0xDuLL), v887, 0xDuLL), 2uLL);
    v1061 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v347, 0xDuLL), v911, 0xDuLL), 2uLL);
    v527 = (int32x4_t)vtrn1q_s16(v1060, v1061);
    v528 = (int32x4_t)vtrn2q_s16(v1060, v1061);
    v1062 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v484.i8, *(int16x4_t *)v847.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v848.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v484, v847), v485, v848), 0xDuLL), 2uLL);
    v1063 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v497.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), *(int16x4_t *)v498.i8, *(int16x4_t *)v505.i8), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v497, v497, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v498, v505), 0xDuLL), 2uLL);
    v529 = (int32x4_t)vtrn1q_s16(v1062, v1063);
    v530 = (int32x4_t)vtrn2q_s16(v1062, v1063);
    v1064 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v872, 0xDuLL), v871, 0xDuLL), 2uLL);
    v1065 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v945, 0xDuLL), v943, 0xDuLL), 2uLL);
    v531 = (int32x4_t)vtrn1q_s16(v1064, v1065);
    v532 = (int32x4_t)vtrn2q_s16(v1064, v1065);
    v533 = (int64x2_t)vtrn1q_s32(v525, v527);
    v534 = (int64x2_t)vtrn2q_s32(v525, v527);
    v535 = (int64x2_t)vtrn1q_s32(v526, v528);
    v536 = (int64x2_t)vtrn2q_s32(v526, v528);
    v537 = (int64x2_t)vtrn1q_s32(v529, v531);
    v538 = (int64x2_t)vtrn2q_s32(v529, v531);
    v539 = (int64x2_t)vtrn1q_s32(v530, v532);
    v540 = (int64x2_t)vtrn2q_s32(v530, v532);
    v524[16] = vzip1q_s64(v533, v537);
    v524[17] = vzip1q_s64(v535, v539);
    v524[18] = vzip1q_s64(v534, v538);
    v524[19] = vzip1q_s64(v536, v540);
    v524[20] = vzip2q_s64(v533, v537);
    v524[21] = vzip2q_s64(v535, v539);
    v524[22] = vzip2q_s64(v534, v538);
    v524[23] = vzip2q_s64(v536, v540);
    v1066 = vrshrq_n_s16(v982, 2uLL);
    v1067 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v954, 0xDuLL), v953, 0xDuLL), 2uLL);
    v541 = (int32x4_t)vtrn1q_s16(v1066, v1067);
    v542 = (int32x4_t)vtrn2q_s16(v1066, v1067);
    v1068 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v877, 0xDuLL), v876, 0xDuLL), 2uLL);
    v1069 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v904, 0xDuLL), v902, 0xDuLL), 2uLL);
    v543 = (int32x4_t)vtrn1q_s16(v1068, v1069);
    v544 = (int32x4_t)vtrn2q_s16(v1068, v1069);
    v1070 = vrshrq_n_s16(v971, 2uLL);
    v1071 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1019, 0xDuLL), v1015, 0xDuLL), 2uLL);
    v545 = (int32x4_t)vtrn1q_s16(v1070, v1071);
    v546 = (int32x4_t)vtrn2q_s16(v1070, v1071);
    v1072 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v868, 0xDuLL), v867, 0xDuLL), 2uLL);
    v1073 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v935, 0xDuLL), v934, 0xDuLL), 2uLL);
    v547 = (int32x4_t)vtrn1q_s16(v1072, v1073);
    v548 = (int32x4_t)vtrn2q_s16(v1072, v1073);
    v549 = (int64x2_t)vtrn1q_s32(v541, v543);
    v550 = (int64x2_t)vtrn2q_s32(v541, v543);
    v551 = (int64x2_t)vtrn1q_s32(v542, v544);
    v552 = (int64x2_t)vtrn2q_s32(v542, v544);
    v553 = (int64x2_t)vtrn1q_s32(v545, v547);
    v554 = (int64x2_t)vtrn2q_s32(v545, v547);
    v555 = (int64x2_t)vtrn1q_s32(v546, v548);
    v556 = (int64x2_t)vtrn2q_s32(v546, v548);
    v524[32] = vzip1q_s64(v549, v553);
    v524[33] = vzip1q_s64(v551, v555);
    v524[34] = vzip1q_s64(v550, v554);
    v524[35] = vzip1q_s64(v552, v556);
    v524[36] = vzip2q_s64(v549, v553);
    v524[37] = vzip2q_s64(v551, v555);
    v524[38] = vzip2q_s64(v550, v554);
    v524[39] = vzip2q_s64(v552, v556);
    v1074 = vrshrq_n_s16(v980, 2uLL);
    v1075 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v933, 0xDuLL), v932, 0xDuLL), 2uLL);
    v557 = (int32x4_t)vtrn1q_s16(v1074, v1075);
    v558 = (int32x4_t)vtrn2q_s16(v1074, v1075);
    v1076 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v866, 0xDuLL), v865, 0xDuLL), 2uLL);
    v1077 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1023, 0xDuLL), v1021, 0xDuLL), 2uLL);
    v559 = (int32x4_t)vtrn1q_s16(v1076, v1077);
    v560 = (int32x4_t)vtrn2q_s16(v1076, v1077);
    v1078 = vrshrq_n_s16(v978, 2uLL);
    v1079 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v900, 0xDuLL), v897, 0xDuLL), 2uLL);
    v561 = (int32x4_t)vtrn1q_s16(v1078, v1079);
    v562 = (int32x4_t)vtrn2q_s16(v1078, v1079);
    v1080 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v879, 0xDuLL), v878, 0xDuLL), 2uLL);
    v1081 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v956, 0xDuLL), v955, 0xDuLL), 2uLL);
    v563 = (int32x4_t)vtrn1q_s16(v1080, v1081);
    v564 = (int32x4_t)vtrn2q_s16(v1080, v1081);
    v565 = (int64x2_t)vtrn1q_s32(v557, v559);
    v566 = (int64x2_t)vtrn2q_s32(v557, v559);
    v567 = (int64x2_t)vtrn1q_s32(v558, v560);
    v568 = (int64x2_t)vtrn2q_s32(v558, v560);
    v569 = (int64x2_t)vtrn1q_s32(v561, v563);
    v570 = (int64x2_t)vtrn2q_s32(v561, v563);
    v571 = (int64x2_t)vtrn1q_s32(v562, v564);
    v572 = (int64x2_t)vtrn2q_s32(v562, v564);
    v573 = vzip1q_s64(v565, v569);
    v574 = vzip2q_s64(v565, v569);
    v575 = vzip1q_s64(v567, v571);
    v576 = vzip2q_s64(v567, v571);
    v577 = vzip1q_s64(v566, v570);
    v578 = vzip2q_s64(v566, v570);
    v579 = vzip1q_s64(v568, v572);
    v580 = vzip2q_s64(v568, v572);
    v524[48] = v573;
    v524[49] = v575;
    v524[50] = v577;
    v524[51] = v579;
    v524[52] = v574;
    v524[53] = v576;
    v524[54] = v578;
    v581 = vrshrq_n_s16(v995, 2uLL);
    v582 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v967, 0xDuLL), v957, 0xDuLL), 2uLL);
    v1082 = v581;
    v1083 = v582;
    v583 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v881, 0xDuLL), v880, 0xDuLL), 2uLL);
    v584 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v895, 0xDuLL), v893, 0xDuLL), 2uLL);
    v1084 = v583;
    v1085 = v584;
    v585 = vrshrq_n_s16(v985, 2uLL);
    v586 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1027, 0xDuLL), v1025, 0xDuLL), 2uLL);
    v1086 = v585;
    v1087 = v586;
    v587 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v864, 0xDuLL), v863, 0xDuLL), 2uLL);
    v588 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v931, 0xDuLL), v930, 0xDuLL), 2uLL);
    v1088 = v587;
    v1089 = v588;
    v524[55] = v580;
    v589 = (int32x4_t)vtrn1q_s16(v581, v582);
    v590 = (int32x4_t)vtrn2q_s16(v581, v582);
    v591 = (int32x4_t)vtrn1q_s16(v583, v584);
    v592 = (int32x4_t)vtrn2q_s16(v583, v584);
    v593 = (int32x4_t)vtrn1q_s16(v585, v586);
    v594 = (int32x4_t)vtrn2q_s16(v585, v586);
    v595 = (int32x4_t)vtrn1q_s16(v587, v588);
    v596 = (int32x4_t)vtrn2q_s16(v587, v588);
    v597 = (int64x2_t)vtrn1q_s32(v589, v591);
    v598 = (int64x2_t)vtrn2q_s32(v589, v591);
    v599 = (int64x2_t)vtrn1q_s32(v590, v592);
    v600 = (int64x2_t)vtrn2q_s32(v590, v592);
    v601 = (int64x2_t)vtrn1q_s32(v593, v595);
    v602 = (int64x2_t)vtrn2q_s32(v593, v595);
    v603 = (int64x2_t)vtrn1q_s32(v594, v596);
    v604 = (int64x2_t)vtrn2q_s32(v594, v596);
    v605 = vzip1q_s64(v597, v601);
    v606 = vzip2q_s64(v597, v601);
    v607 = vzip1q_s64(v599, v603);
    v608 = vzip2q_s64(v599, v603);
    v609 = vzip1q_s64(v598, v602);
    v610 = vzip2q_s64(v598, v602);
    v611 = vzip1q_s64(v600, v604);
    v612 = vzip2q_s64(v600, v604);
    v524[64] = v605;
    v524[65] = v607;
    v524[66] = v609;
    v524[67] = v611;
    v524[68] = v606;
    v524[69] = v608;
    v524[70] = v610;
    v613 = vrshrq_n_s16(v992, 2uLL);
    v614 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v937, 0xDuLL), v936, 0xDuLL), 2uLL);
    v1090 = v613;
    v1091 = v614;
    v615 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v870, 0xDuLL), v869, 0xDuLL), 2uLL);
    v616 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1013, 0xDuLL), v917, 0xDuLL), 2uLL);
    v1092 = v615;
    v1093 = v616;
    v617 = vrshrq_n_s16(v988, 2uLL);
    v618 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v909, 0xDuLL), v907, 0xDuLL), 2uLL);
    v1094 = v617;
    v1095 = v618;
    v619 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v874, 0xDuLL), v873, 0xDuLL), 2uLL);
    v620 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v952, 0xDuLL), v951, 0xDuLL), 2uLL);
    v1096 = v619;
    v1097 = v620;
    v524[71] = v612;
    v621 = (int32x4_t)vtrn1q_s16(v613, v614);
    v622 = (int32x4_t)vtrn2q_s16(v613, v614);
    v623 = (int32x4_t)vtrn1q_s16(v615, v616);
    v624 = (int32x4_t)vtrn2q_s16(v615, v616);
    v625 = (int32x4_t)vtrn1q_s16(v617, v618);
    v626 = (int32x4_t)vtrn2q_s16(v617, v618);
    v627 = (int32x4_t)vtrn1q_s16(v619, v620);
    v628 = (int32x4_t)vtrn2q_s16(v619, v620);
    v629 = (int64x2_t)vtrn1q_s32(v621, v623);
    v630 = (int64x2_t)vtrn2q_s32(v621, v623);
    v631 = (int64x2_t)vtrn1q_s32(v622, v624);
    v632 = (int64x2_t)vtrn2q_s32(v622, v624);
    v633 = (int64x2_t)vtrn1q_s32(v625, v627);
    v634 = (int64x2_t)vtrn2q_s32(v625, v627);
    v635 = (int64x2_t)vtrn1q_s32(v626, v628);
    v636 = (int64x2_t)vtrn2q_s32(v626, v628);
    v637 = vzip1q_s64(v629, v633);
    v638 = vzip2q_s64(v629, v633);
    v639 = vzip1q_s64(v631, v635);
    v640 = vzip2q_s64(v631, v635);
    v641 = vzip1q_s64(v630, v634);
    v642 = vzip2q_s64(v630, v634);
    v643 = vzip1q_s64(v632, v636);
    v644 = vzip2q_s64(v632, v636);
    v524[80] = v637;
    v524[81] = v639;
    v524[82] = v641;
    v524[83] = v643;
    v524[84] = v638;
    v524[85] = v640;
    v524[86] = v642;
    v645 = vrshrq_n_s16(v999, 2uLL);
    v646 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v949, 0xDuLL), v947, 0xDuLL), 2uLL);
    v1098 = v645;
    v1099 = v646;
    v647 = vrshrq_n_s16(v1038, 2uLL);
    v648 = vrshrq_n_s16(v507, 2uLL);
    v1100 = v647;
    v1101 = v648;
    v649 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v484.i8, *(int16x4_t *)v848.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v849.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v484, v848), v485, v849), 0xDuLL), 2uLL);
    v650 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v913, 0xDuLL), v915, 0xDuLL), 2uLL);
    v1102 = v649;
    v1103 = v650;
    v651 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v885, 0xDuLL), v883, 0xDuLL), 2uLL);
    v652 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v939, 0xDuLL), v938, 0xDuLL), 2uLL);
    v1104 = v651;
    v1105 = v652;
    v524[87] = v644;
    v653 = (int32x4_t)vtrn1q_s16(v645, v646);
    v654 = (int32x4_t)vtrn2q_s16(v645, v646);
    v655 = (int32x4_t)vtrn1q_s16(v647, v648);
    v656 = (int32x4_t)vtrn2q_s16(v647, v648);
    v657 = (int32x4_t)vtrn1q_s16(v649, v650);
    v658 = (int32x4_t)vtrn2q_s16(v649, v650);
    v659 = (int32x4_t)vtrn1q_s16(v651, v652);
    v660 = (int32x4_t)vtrn2q_s16(v651, v652);
    v661 = (int64x2_t)vtrn1q_s32(v653, v655);
    v662 = (int64x2_t)vtrn2q_s32(v653, v655);
    v663 = (int64x2_t)vtrn1q_s32(v654, v656);
    v664 = (int64x2_t)vtrn2q_s32(v654, v656);
    v665 = (int64x2_t)vtrn1q_s32(v657, v659);
    v666 = (int64x2_t)vtrn2q_s32(v657, v659);
    v667 = (int64x2_t)vtrn1q_s32(v658, v660);
    v668 = (int64x2_t)vtrn2q_s32(v658, v660);
    v669 = vzip1q_s64(v661, v665);
    v670 = vzip2q_s64(v661, v665);
    v524[96] = v669;
    v671 = vzip1q_s64(v663, v667);
    v672 = vzip2q_s64(v663, v667);
    v524[97] = v671;
    v673 = vzip1q_s64(v662, v666);
    v674 = vzip2q_s64(v662, v666);
    v675 = vzip1q_s64(v664, v668);
    v676 = vzip2q_s64(v664, v668);
    v677 = vrshrq_n_s16(v1017, 2uLL);
    v678 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v929, 0xDuLL), v922, 0xDuLL), 2uLL);
    v1106 = v677;
    v1107 = v678;
    v679 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v862, 0xDuLL), v861, 0xDuLL), 2uLL);
    v680 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v1031, 0xDuLL), v1029, 0xDuLL), 2uLL);
    v1108 = v679;
    v1109 = v680;
    v681 = vrshrq_n_s16(v997, 2uLL);
    v682 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v891, 0xDuLL), v858, 0xDuLL), 2uLL);
    v1110 = v681;
    v1111 = v682;
    v1112 = v975;
    v524[98] = v673;
    v683 = vrshrq_n_s16(v1113, 2uLL);
    v1113 = v683;
    v524[99] = v675;
    v524[100] = v670;
    v524[101] = v672;
    v524[102] = v674;
    v524[103] = v676;
    v684 = (int32x4_t)vtrn1q_s16(v677, v678);
    v685 = (int32x4_t)vtrn2q_s16(v677, v678);
    v686 = (int32x4_t)vtrn1q_s16(v679, v680);
    v687 = (int32x4_t)vtrn2q_s16(v679, v680);
    v688 = (int32x4_t)vtrn1q_s16(v681, v682);
    v689 = (int32x4_t)vtrn2q_s16(v681, v682);
    v690 = (int32x4_t)vtrn1q_s16(v975, v683);
    v691 = (int32x4_t)vtrn2q_s16(v975, v683);
    v692 = (int64x2_t)vtrn1q_s32(v684, v686);
    v693 = (int64x2_t)vtrn1q_s32(v685, v687);
    v694 = (int64x2_t)vtrn1q_s32(v688, v690);
    v695 = (int64x2_t)vtrn1q_s32(v689, v691);
    v524[112] = vzip1q_s64(v692, v694);
    v524[113] = vzip1q_s64(v693, v695);
    v696 = (int64x2_t)vtrn2q_s32(v684, v686);
    v697 = (int64x2_t)vtrn2q_s32(v688, v690);
    v524[114] = vzip1q_s64(v696, v697);
    v698 = (int64x2_t)vtrn2q_s32(v685, v687);
    v699 = (int64x2_t)vtrn2q_s32(v689, v691);
    v524[115] = vzip1q_s64(v698, v699);
    v524[116] = vzip2q_s64(v692, v694);
    v524[117] = vzip2q_s64(v693, v695);
    v524[118] = vzip2q_s64(v696, v697);
    v524[119] = vzip2q_s64(v698, v699);
    v3 = 8;
  }
  while ((v6 & 1) != 0);
  v700 = 0;
  v701 = v1 + 1;
  result = 1598;
  v703 = v1049;
  do
  {
    v704 = 0;
    v705 = (int16x8_t *)&v1049[256 * v700];
    v706 = v705[1];
    v708 = v705[14];
    v707 = v705[15];
    v709 = vqaddq_s16(*v705, v707);
    v710 = vqaddq_s16(v706, v708);
    v711 = v705[2];
    v712 = v705[3];
    v714 = v705[12];
    v713 = v705[13];
    v715 = vqaddq_s16(v711, v713);
    v716 = vqaddq_s16(v712, v714);
    v717 = v705[4];
    v718 = v705[5];
    v720 = v705[10];
    v719 = v705[11];
    v721 = vqaddq_s16(v717, v719);
    v722 = vqaddq_s16(v718, v720);
    v723 = v705[6];
    v724 = v705[7];
    v726 = v705[8];
    v725 = v705[9];
    v727 = vqaddq_s16(v723, v725);
    v728 = vqaddq_s16(v724, v726);
    v729 = vqsubq_s16(v724, v726);
    v730 = vqsubq_s16(v723, v725);
    v731 = vqsubq_s16(v718, v720);
    v732 = vqsubq_s16(v717, v719);
    v733 = vqsubq_s16(v712, v714);
    v734 = vqsubq_s16(v711, v713);
    v735 = vqsubq_s16(v706, v708);
    v736 = vqsubq_s16(*v705, v707);
    v737 = vqaddq_s16(v709, v728);
    v738 = vqaddq_s16(v710, v727);
    v739 = vqaddq_s16(v715, v722);
    v740 = vqaddq_s16(v716, v721);
    v741 = vqsubq_s16(v716, v721);
    v742 = vqsubq_s16(v715, v722);
    v743 = vqsubq_s16(v710, v727);
    v744 = vqsubq_s16(v709, v728);
    v745 = vdupq_n_s16(0x16A0u);
    v746 = vdupq_n_s16(0xE960u);
    v747 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v731.i8, *(int16x4_t *)v745.i8), *(int16x4_t *)v734.i8, *(int16x4_t *)v745.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v731, v745), v734, v745), 0xDuLL);
    v748 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v731.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v734.i8, *(int16x4_t *)v745.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v731, v746), v734, v745), 0xDuLL);
    v749 = vmlal_s16(vmull_s16(*(int16x4_t *)v732.i8, *(int16x4_t *)v745.i8), *(int16x4_t *)v733.i8, *(int16x4_t *)v745.i8);
    v750 = vmlal_high_s16(vmull_high_s16(v732, v745), v733, v745);
    v751 = vmlal_s16(vmull_s16(*(int16x4_t *)v732.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v733.i8, *(int16x4_t *)v745.i8);
    v752 = vmlal_high_s16(vmull_high_s16(v732, v746), v733, v745);
    v753 = vrshrn_high_n_s32(vrshrn_n_s32(v749, 0xDuLL), v750, 0xDuLL);
    v754 = vrshrn_high_n_s32(vrshrn_n_s32(v751, 0xDuLL), v752, 0xDuLL);
    v755 = vqaddq_s16(v737, v740);
    v756 = vqaddq_s16(v738, v739);
    v757 = vqsubq_s16(v738, v739);
    v758 = vqsubq_s16(v737, v740);
    v759 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v742.i8, *(int16x4_t *)v745.i8), *(int16x4_t *)v743.i8, *(int16x4_t *)v745.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v742, v745), v743, v745), 0xDuLL);
    v760 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v742.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v743.i8, *(int16x4_t *)v745.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v742, v746), v743, v745), 0xDuLL);
    v761 = vqaddq_s16(v729, v754);
    v762 = vqaddq_s16(v730, v748);
    v763 = vqsubq_s16(v730, v748);
    v764 = vqsubq_s16(v729, v754);
    v765 = vqsubq_s16(v736, v753);
    v766 = vqsubq_s16(v735, v747);
    v767 = vqaddq_s16(v735, v747);
    v768 = vqaddq_s16(v736, v753);
    v769 = vmlal_s16(vmull_s16(*(int16x4_t *)v756.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v755.i8, *(int16x4_t *)v745.i8);
    v770 = vmlal_high_s16(vmull_high_s16(v756, v746), v755, v745);
    v771 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v756.i8, *(int16x4_t *)v745.i8), *(int16x4_t *)v755.i8, *(int16x4_t *)v745.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v756, v745), v755, v745), 0xDuLL);
    v772 = vdupq_n_s16(0x1D90u);
    v773 = vrshrn_high_n_s32(vrshrn_n_s32(v769, 0xDuLL), v770, 0xDuLL);
    v774 = vdupq_n_s16(0xC3Eu);
    v775 = vdupq_n_s16(0xE270u);
    v776 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v757.i8, *(int16x4_t *)v774.i8), *(int16x4_t *)v758.i8, *(int16x4_t *)v772.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v757, v774), v758, v772), 0xDuLL);
    v777 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v757.i8, *(int16x4_t *)v775.i8), *(int16x4_t *)v758.i8, *(int16x4_t *)v774.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v757, v775), v758, v774), 0xDuLL);
    v778 = vqaddq_s16(v741, v760);
    v779 = vqsubq_s16(v741, v760);
    v780 = vqsubq_s16(v744, v759);
    v781 = vqaddq_s16(v744, v759);
    v782 = vmlal_s16(vmull_s16(*(int16x4_t *)v762.i8, *(int16x4_t *)v774.i8), *(int16x4_t *)v767.i8, *(int16x4_t *)v772.i8);
    v783 = vmlal_high_s16(vmull_high_s16(v762, v774), v767, v772);
    v784 = vmlal_s16(vmull_s16(*(int16x4_t *)v762.i8, *(int16x4_t *)v775.i8), *(int16x4_t *)v767.i8, *(int16x4_t *)v774.i8);
    v785 = vmlal_high_s16(vmull_high_s16(v762, v775), v767, v774);
    v786 = vrshrn_high_n_s32(vrshrn_n_s32(v782, 0xDuLL), v783, 0xDuLL);
    v787 = vrshrn_high_n_s32(vrshrn_n_s32(v784, 0xDuLL), v785, 0xDuLL);
    v788 = vmlal_s16(vmull_s16(*(int16x4_t *)v763.i8, *(int16x4_t *)v775.i8), *(int16x4_t *)v766.i8, *(int16x4_t *)v774.i8);
    v789 = vmlal_high_s16(vmull_high_s16(v763, v775), v766, v774);
    v790 = vdupq_n_s16(0xF3C2u);
    v791 = vmlal_s16(vmull_s16(*(int16x4_t *)v763.i8, *(int16x4_t *)v790.i8), *(int16x4_t *)v766.i8, *(int16x4_t *)v775.i8);
    v792 = vmlal_high_s16(vmull_high_s16(v763, v790), v766, v775);
    v793 = vrshrn_high_n_s32(vrshrn_n_s32(v788, 0xDuLL), v789, 0xDuLL);
    v794 = vdupq_n_s16(0x1F62u);
    v795 = vrshrn_high_n_s32(vrshrn_n_s32(v791, 0xDuLL), v792, 0xDuLL);
    v796 = vdupq_n_s16(0x63Eu);
    v797 = vmlal_s16(vmull_s16(*(int16x4_t *)v778.i8, *(int16x4_t *)v796.i8), *(int16x4_t *)v781.i8, *(int16x4_t *)v794.i8);
    v798 = vmlal_high_s16(vmull_high_s16(v778, v796), v781, v794);
    v799 = vdupq_n_s16(0xE09Eu);
    v800 = vmlal_s16(vmull_s16(*(int16x4_t *)v778.i8, *(int16x4_t *)v799.i8), *(int16x4_t *)v781.i8, *(int16x4_t *)v796.i8);
    v801 = vmlal_high_s16(vmull_high_s16(v778, v799), v781, v796);
    v802 = vrshrn_high_n_s32(vrshrn_n_s32(v797, 0xDuLL), v798, 0xDuLL);
    v803 = vdupq_n_s16(0x11C8u);
    v804 = vrshrn_high_n_s32(vrshrn_n_s32(v800, 0xDuLL), v801, 0xDuLL);
    v805 = vdupq_n_s16(0x1A9Cu);
    v806 = vmlal_s16(vmull_s16(*(int16x4_t *)v779.i8, *(int16x4_t *)v805.i8), *(int16x4_t *)v780.i8, *(int16x4_t *)v803.i8);
    v807 = vmlal_high_s16(vmull_high_s16(v779, v805), v780, v803);
    v808 = vdupq_n_s16(0xEE38u);
    v809 = vmlal_s16(vmull_s16(*(int16x4_t *)v779.i8, *(int16x4_t *)v808.i8), *(int16x4_t *)v780.i8, *(int16x4_t *)v805.i8);
    v810 = vmlal_high_s16(vmull_high_s16(v779, v808), v780, v805);
    v811 = vrshrn_high_n_s32(vrshrn_n_s32(v806, 0xDuLL), v807, 0xDuLL);
    v812 = vrshrn_high_n_s32(vrshrn_n_s32(v809, 0xDuLL), v810, 0xDuLL);
    v813 = vqaddq_s16(v761, v787);
    v814 = vqsubq_s16(v761, v787);
    v815 = vqsubq_s16(v764, v795);
    v816 = vqaddq_s16(v764, v795);
    v817 = vqaddq_s16(v765, v793);
    v818 = vqsubq_s16(v765, v793);
    v819 = vqsubq_s16(v768, v786);
    v820 = vqaddq_s16(v768, v786);
    v821 = vdupq_n_s16(0x1FD8u);
    v822 = vdupq_n_s16(0x322u);
    v823 = vmlal_s16(vmull_s16(*(int16x4_t *)v813.i8, *(int16x4_t *)v822.i8), *(int16x4_t *)v820.i8, *(int16x4_t *)v821.i8);
    v824 = vmlal_high_s16(vmull_high_s16(v813, v822), v820, v821);
    v825 = vdupq_n_s16(0xE028u);
    *v705 = v771;
    v705[1] = vrshrn_high_n_s32(vrshrn_n_s32(v823, 0xDuLL), v824, 0xDuLL);
    v826 = vdupq_n_s16(0x144Cu);
    v705[14] = v804;
    v705[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v813.i8, *(int16x4_t *)v825.i8), *(int16x4_t *)v820.i8, *(int16x4_t *)v822.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v813, v825), v820, v822), 0xDuLL);
    v827 = vdupq_n_s16(0x18BCu);
    v828 = vmlal_s16(vmull_s16(*(int16x4_t *)v814.i8, *(int16x4_t *)v827.i8), *(int16x4_t *)v819.i8, *(int16x4_t *)v826.i8);
    v829 = vmlal_high_s16(vmull_high_s16(v814, v827), v819, v826);
    v830 = vdupq_n_s16(0xEBB4u);
    v705[8] = v773;
    v705[9] = vrshrn_high_n_s32(vrshrn_n_s32(v828, 0xDuLL), v829, 0xDuLL);
    v831 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v814.i8, *(int16x4_t *)v830.i8), *(int16x4_t *)v819.i8, *(int16x4_t *)v827.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v814, v830), v819, v827), 0xDuLL);
    v832 = vdupq_n_s16(0x1C38u);
    v833 = vdupq_n_s16(0xF16u);
    v705[6] = v812;
    v705[7] = v831;
    v834 = vdupq_n_s16(0xE3C8u);
    v705[4] = v776;
    v705[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v815.i8, *(int16x4_t *)v833.i8), *(int16x4_t *)v818.i8, *(int16x4_t *)v832.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v815, v833), v818, v832), 0xDuLL);
    v705[10] = v811;
    v705[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v815.i8, *(int16x4_t *)v834.i8), *(int16x4_t *)v818.i8, *(int16x4_t *)v833.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v815, v834), v818, v833), 0xDuLL);
    v835 = vdupq_n_s16(0x94Au);
    v836 = vdupq_n_s16(0x1EA0u);
    v837 = vmlal_s16(vmull_s16(*(int16x4_t *)v816.i8, *(int16x4_t *)v836.i8), *(int16x4_t *)v817.i8, *(int16x4_t *)v835.i8);
    v838 = vmlal_high_s16(vmull_high_s16(v816, v836), v817, v835);
    v839 = vdupq_n_s16(0xF6B6u);
    v705[12] = v777;
    v705[13] = vrshrn_high_n_s32(vrshrn_n_s32(v837, 0xDuLL), v838, 0xDuLL);
    v705[2] = v802;
    v705[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v816.i8, *(int16x4_t *)v839.i8), *(int16x4_t *)v817.i8, *(int16x4_t *)v836.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v816, v839), v817, v836), 0xDuLL);
    v840 = v701;
    do
    {
      v841 = *(int16x8_t *)&v703[v704];
      v840[-1] = vmovl_s16(*(int16x4_t *)v841.i8);
      *v840 = vmovl_high_s16(v841);
      v704 += 16;
      v840 += 8;
    }
    while (v704 != 256);
    ++v700;
    v701 += 2;
    v703 += 256;
  }
  while (v700 != 4);
  return result;
}

void lowbd_fwd_txfm2d_64x16_neon(int16x8_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t *v14;
  int16x8_t v15;
  int16x8_t *v16;
  int16x8_t v17;
  int16x8_t *v18;
  int16x8_t v19;
  int16x8_t *v20;
  int16x8_t v21;
  int16x8_t *v22;
  int16x8_t v23;
  int16x8_t *v24;
  int16x8_t v25;
  int16x8_t *v26;
  int16x8_t v27;
  int16x8_t *v28;
  int16x8_t v29;
  int16x8_t *v30;
  int16x8_t v31;
  int16x8_t *v32;
  int16x8_t v33;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t *v36;
  int16x8_t v37;
  int16x8_t *v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t *v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  uint64_t v178;
  char v179;
  uint64_t v180;
  int16x8_t *v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int16x8_t v363;
  int16x8_t v364;
  int16x8_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int16x8_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int16x8_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x8_t v424;
  int16x8_t v425;
  int32x4_t v426;
  int16x8_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int16x8_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int16x8_t v434;
  int16x8_t v435;
  int16x8_t v436;
  int16x8_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int16x8_t v441;
  int16x8_t v442;
  int16x8_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int16x8_t v450;
  int16x8_t v451;
  int16x8_t v452;
  int16x8_t v453;
  int16x8_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int16x8_t v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int16x8_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int16x8_t v473;
  int16x8_t v474;
  int16x8_t v475;
  int16x8_t v476;
  int16x8_t v477;
  int16x8_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int16x8_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int16x8_t v495;
  int16x8_t v496;
  int16x8_t v497;
  int16x8_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int16x8_t v501;
  int16x8_t v502;
  int16x8_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  int16x8_t v510;
  int16x8_t v511;
  int16x8_t v512;
  int16x8_t v513;
  int16x8_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int16x8_t v517;
  int16x8_t v518;
  int16x8_t v519;
  int16x8_t v520;
  int16x8_t v521;
  int16x8_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int16x8_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int16x8_t v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int16x8_t v539;
  int16x8_t v540;
  int16x8_t v541;
  int16x8_t v542;
  int16x8_t v543;
  int16x8_t v544;
  int16x8_t v545;
  int16x8_t v546;
  int16x8_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int16x8_t v550;
  int32x4_t v551;
  int16x8_t v552;
  int16x8_t v553;
  int16x8_t v554;
  int16x8_t v555;
  int16x8_t v556;
  int16x8_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int16x8_t v560;
  int16x8_t v561;
  int16x8_t v562;
  int16x8_t v563;
  int16x8_t v564;
  int32x4_t v565;
  int32x4_t v566;
  int16x8_t v567;
  int16x8_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int16x8_t v573;
  int16x8_t v574;
  int16x8_t v575;
  int16x8_t v576;
  int16x8_t v577;
  int16x8_t v578;
  int16x8_t v579;
  int16x8_t v580;
  int16x8_t v581;
  int16x8_t v582;
  int16x8_t v583;
  int16x8_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int16x8_t v589;
  int16x8_t v590;
  int16x8_t v591;
  int16x8_t v592;
  int16x8_t v593;
  int16x8_t v594;
  int32x4_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int16x8_t v598;
  int16x8_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int16x8_t v603;
  int16x8_t v604;
  int16x8_t v605;
  int16x8_t v606;
  int16x8_t v607;
  int16x8_t v608;
  int16x8_t v609;
  int16x8_t v610;
  int16x8_t v611;
  int16x8_t v612;
  int16x8_t v613;
  int16x8_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int16x8_t v619;
  int16x8_t v620;
  int16x8_t v621;
  int16x8_t v622;
  int16x8_t v623;
  int16x8_t v624;
  int16x8_t v625;
  int16x8_t v626;
  int16x8_t v627;
  int16x8_t v628;
  int16x8_t v629;
  int16x8_t v630;
  int16x8_t v631;
  int16x8_t v632;
  int16x8_t v633;
  int16x8_t v634;
  int16x8_t v635;
  int16x8_t v636;
  int16x8_t v637;
  int16x8_t v638;
  int16x8_t v639;
  int16x8_t v640;
  int16x8_t v641;
  int16x8_t v642;
  int16x8_t v643;
  int16x8_t v644;
  int16x8_t v645;
  int16x8_t v646;
  int16x8_t v647;
  int16x8_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int16x8_t v651;
  int16x8_t v652;
  int16x8_t v653;
  int16x8_t v654;
  int16x8_t v655;
  int16x8_t v656;
  int16x8_t v657;
  int16x8_t v658;
  int16x8_t v659;
  int16x8_t v660;
  int16x8_t v661;
  int16x8_t v662;
  int16x8_t v663;
  int16x8_t v664;
  int16x8_t v665;
  int16x8_t v666;
  int16x8_t v667;
  int16x8_t v668;
  int16x8_t v669;
  int16x8_t v670;
  int16x8_t v671;
  int16x8_t v672;
  int16x8_t v673;
  int16x8_t v674;
  int16x8_t v675;
  int16x8_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int16x8_t v681;
  int16x8_t v682;
  int16x8_t v683;
  int16x8_t v684;
  int16x8_t v685;
  int16x8_t v686;
  int16x8_t v687;
  int16x8_t v688;
  int16x8_t v689;
  int16x8_t v690;
  int16x8_t v691;
  int16x8_t v692;
  int16x8_t v693;
  int16x8_t v694;
  int16x8_t v695;
  int16x8_t v696;
  int16x8_t v697;
  int16x8_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int16x8_t v701;
  int16x8_t v702;
  int16x8_t v703;
  int16x8_t v704;
  int16x8_t v705;
  int16x8_t v706;
  int16x8_t v707;
  int16x8_t v708;
  int16x8_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int16x8_t v712;
  int16x8_t v713;
  int16x8_t v714;
  int16x8_t v715;
  int16x8_t v716;
  int16x8_t v717;
  int16x8_t v718;
  int32x4_t v719;
  int16x8_t v720;
  int32x4_t v721;
  int16x8_t v722;
  int16x8_t v723;
  int16x8_t v724;
  int16x8_t v725;
  int16x8_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int16x8_t v729;
  int16x8_t v730;
  int16x8_t v731;
  int16x8_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int16x8_t v735;
  int16x8_t v736;
  char v737;
  int32x4_t *v738;
  int16x8_t v739;
  int16x8_t v740;
  int16x8_t v741;
  int16x8_t v742;
  int16x8_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int16x8_t v746;
  int32x4_t v747;
  int16x8_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int16x8_t v751;
  int32x4_t v752;
  int16x8_t v753;
  int32x4_t v754;
  int32x4_t v755;
  int32x4_t v756;
  int32x4_t v757;
  int32x4_t v758;
  int32x4_t v759;
  int32x4_t v760;
  int16x8_t v761;
  int32x4_t v762;
  int32x4_t v763;
  int16x8_t v764;
  int32x4_t v765;
  int32x4_t v766;
  int32x4_t v767;
  int16x8_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int16x8_t v771;
  int32x4_t v772;
  int32x4_t v773;
  int16x8_t v774;
  int32x4_t v775;
  int32x4_t v776;
  int32x4_t v777;
  int16x8_t v778;
  int32x4_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int16x8_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int16x8_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int32x4_t v789;
  int16x8_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int32x4_t v793;
  int16x8_t v794;
  int32x4_t v795;
  int32x4_t v796;
  int32x4_t v797;
  int32x4_t v798;
  int32x4_t v799;
  int32x4_t v800;
  int32x4_t v801;
  int32x4_t v802;
  int32x4_t v803;
  int32x4_t v804;
  int32x4_t v805;
  int32x4_t v806;
  int32x4_t v807;
  int32x4_t v808;
  int32x4_t v809;
  int32x4_t v810;
  int32x4_t v811;
  int32x4_t v812;
  int32x4_t v813;
  int32x4_t v814;
  int32x4_t v815;
  int32x4_t v816;
  int32x4_t v817;
  int32x4_t v818;
  int32x4_t v819;
  int32x4_t v820;
  int32x4_t v821;
  int32x4_t v822;
  int32x4_t v823;
  int32x4_t v824;
  int32x4_t v825;
  int16x8_t v826;
  int32x4_t v827;
  int32x4_t v828;
  int16x8_t v829;
  int32x4_t v830;
  int32x4_t v831;
  int16x8_t v832;
  int32x4_t v833;
  int32x4_t v834;
  int16x8_t v835;
  int32x4_t v836;
  int32x4_t v837;
  int16x8_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int16x8_t v841;
  int32x4_t v842;
  int32x4_t v843;
  int32x4_t v844;
  int32x4_t v845;
  int32x4_t v846;
  int32x4_t v847;
  int32x4_t v848;
  int32x4_t v849;
  int32x4_t v850;
  int32x4_t v851;
  int32x4_t v852;
  int32x4_t v853;
  int32x4_t v854;
  int32x4_t v855;
  int32x4_t v856;
  int32x4_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int16x8_t v862;
  int16x8_t v863;
  int32x4_t v864;
  int32x4_t v865;
  int32x4_t v866;
  int16x8_t v867;
  int32x4_t v868;
  int32x4_t v869;
  int32x4_t v870;
  int16x8_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int16x8_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int16x8_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int16x8_t v882;
  int32x4_t v883;
  int32x4_t v884;
  int32x4_t v885;
  int32x4_t v886;
  int16x8_t v887;
  int32x4_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int16x8_t v893;
  int32x4_t v894;
  int32x4_t v895;
  int32x4_t v896;
  int32x4_t v897;
  int32x4_t v898;
  int16x8_t v899;
  int32x4_t v900;
  int32x4_t v901;
  int32x4_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int32x4_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int32x4_t v920;
  int32x4_t v921;
  int32x4_t v922;
  int32x4_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int16x8_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int32x4_t v937;
  int32x4_t v938;
  int32x4_t v939;
  int16x8_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int32x4_t v945;
  int32x4_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int32x4_t v949;
  int16x8_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int32x4_t v953;
  int16x8_t v954;
  int32x4_t v955;
  int16x8_t v956;
  int32x4_t v957;
  int16x8_t v958;
  int32x4_t v959;
  int16x8_t v960;
  int32x4_t v961;
  int16x8_t v962;
  int32x4_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  int32x4_t v967;
  int32x4_t v968;
  int32x4_t v969;
  int32x4_t v970;
  int32x4_t v971;
  int32x4_t v972;
  int32x4_t v973;
  int32x4_t v974;
  int32x4_t v975;
  int32x4_t v976;
  int32x4_t v977;
  int16x8_t v978;
  int32x4_t v979;
  int32x4_t v980;
  int16x8_t v981;
  int32x4_t v982;
  int32x4_t v983;
  int16x8_t v984;
  int32x4_t v985;
  int32x4_t v986;
  int16x8_t v987;
  int32x4_t v988;
  int32x4_t v989;
  int16x8_t v990;
  int32x4_t v991;
  int32x4_t v992;
  int16x8_t v993;
  int16x8_t v994;
  int32x4_t v995;
  int32x4_t v996;
  int16x8_t v997;
  int32x4_t v998;
  int32x4_t v999;
  int32x4_t v1000;
  int32x4_t v1001;
  int32x4_t v1002;
  int32x4_t v1003;
  int32x4_t v1004;
  int32x4_t v1005;
  int32x4_t v1006;
  int32x4_t v1007;
  int32x4_t v1008;
  int32x4_t v1009;
  int32x4_t v1010;
  int32x4_t v1011;
  int32x4_t v1012;
  int32x4_t v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int32x4_t v1017;
  int32x4_t v1018;
  int32x4_t v1019;
  int16x8_t v1020;
  int32x4_t v1021;
  int16x8_t v1022;
  int32x4_t v1023;
  int16x8_t v1024;
  int16x8_t v1025;
  int32x4_t v1026;
  int16x8_t v1027;
  int32x4_t v1028;
  int32x4_t v1029;
  int16x8_t v1030;
  int32x4_t v1031;
  int32x4_t v1032;
  int16x8_t v1033;
  int32x4_t v1034;
  int32x4_t v1035;
  int16x8_t v1036;
  int32x4_t v1037;
  int32x4_t v1038;
  int32x4_t v1039;
  int32x4_t v1040;
  int32x4_t v1041;
  int32x4_t v1042;
  int32x4_t v1043;
  int32x4_t v1044;
  int32x4_t v1045;
  int32x4_t v1046;
  int32x4_t v1047;
  int32x4_t v1048;
  int32x4_t v1049;
  int32x4_t v1050;
  int16x8_t v1051;
  int32x4_t v1052;
  int16x8_t v1053;
  int16x8_t v1054;
  int32x4_t v1055;
  int16x8_t v1056;
  int16x8_t v1057;
  int16x8_t v1058;
  int32x4_t v1059;
  int16x8_t v1060;
  int16x8_t v1061;
  int16x8_t v1062;
  int32x4_t v1063;
  int16x8_t v1064;
  int32x4_t v1065;
  int16x8_t v1066;
  int32x4_t v1067;
  int16x8_t v1068;
  int32x4_t v1069;
  int16x8_t v1070;
  int16x8_t v1071;
  int32x4_t v1072;
  int16x8_t v1073;
  int32x4_t v1074;
  int32x4_t v1075;
  int16x8_t v1076;
  int32x4_t v1077;
  int16x8_t v1078;
  int16x8_t v1079;
  int32x4_t v1080;
  int32x4_t v1081;
  int16x8_t v1082;
  int32x4_t v1083;
  int32x4_t v1084;
  int16x8_t v1085;
  int16x8_t v1086;
  int32x4_t v1087;
  int16x8_t v1088;
  int16x8_t v1089;
  int32x4_t v1090;
  int16x8_t v1091;
  int16x8_t v1092;
  int32x4_t v1093;
  int16x8_t v1094;
  int16x8_t v1095;
  int32x4_t v1096;
  int16x8_t v1097;
  int16x8_t v1098;
  int32x4_t v1099;
  int16x8_t v1100;
  int16x8_t v1101;
  int32x4_t v1102;
  _BYTE v1103[2048];
  uint64_t v1104;

  v3 = 0;
  v1104 = *MEMORY[0x24BDAC8D0];
  v4 = 2 * a3;
  v5 = vdupq_n_s16(0x16A1u);
  v6 = vdupq_n_s16(0xE95Fu);
  v1100 = vdupq_n_s16(0x1D90u);
  v7 = vdupq_n_s16(0xC3Fu);
  v8 = vdupq_n_s16(0xE270u);
  v1097 = vdupq_n_s16(0xF3C1u);
  v1094 = vdupq_n_s16(0x1F63u);
  v1091 = vdupq_n_s16(0x63Eu);
  v1088 = vdupq_n_s16(0xE09Du);
  v1085 = vdupq_n_s16(0x11C7u);
  v1082 = vdupq_n_s16(0x1A9Bu);
  v1079 = vdupq_n_s16(0xEE39u);
  v1076 = vdupq_n_s16(0x1FD9u);
  v1073 = vdupq_n_s16(0x323u);
  v1070 = vdupq_n_s16(0xE027u);
  v1068 = vdupq_n_s16(0x144Du);
  v9 = vdupq_n_s16(0x18BDu);
  v1066 = vdupq_n_s16(0xEBB3u);
  v1064 = vdupq_n_s16(0x1C39u);
  v10 = vdupq_n_s16(0xF16u);
  v1060 = vdupq_n_s16(0xE3C7u);
  v1056 = vdupq_n_s16(0x94Au);
  v11 = vdupq_n_s16(0x1E9Fu);
  v1053 = vdupq_n_s16(0xF6B6u);
  do
  {
    v12 = vshlq_n_s16(*a1, 2uLL);
    v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
    v14 = (int16x8_t *)((char *)a1 + v4 + v4);
    v15 = vshlq_n_s16(*v14, 2uLL);
    v16 = (int16x8_t *)((char *)v14 + v4);
    v17 = vshlq_n_s16(*v16, 2uLL);
    v18 = (int16x8_t *)((char *)v16 + v4);
    v19 = vshlq_n_s16(*v18, 2uLL);
    v20 = (int16x8_t *)((char *)v18 + v4);
    v21 = vshlq_n_s16(*v20, 2uLL);
    v22 = (int16x8_t *)((char *)v20 + v4);
    v23 = vshlq_n_s16(*v22, 2uLL);
    v24 = (int16x8_t *)((char *)v22 + v4);
    v25 = vshlq_n_s16(*v24, 2uLL);
    v26 = (int16x8_t *)((char *)v24 + v4);
    v27 = vshlq_n_s16(*v26, 2uLL);
    v28 = (int16x8_t *)((char *)v26 + v4);
    v29 = vshlq_n_s16(*v28, 2uLL);
    v30 = (int16x8_t *)((char *)v28 + v4);
    v31 = vshlq_n_s16(*v30, 2uLL);
    v32 = (int16x8_t *)((char *)v30 + v4);
    v33 = vshlq_n_s16(*v32, 2uLL);
    v34 = (int16x8_t *)((char *)v32 + v4);
    v35 = vshlq_n_s16(*v34, 2uLL);
    v36 = (int16x8_t *)((char *)v34 + v4);
    v37 = vshlq_n_s16(*v36, 2uLL);
    v38 = (int16x8_t *)((char *)v36 + v4);
    v39 = vshlq_n_s16(*v38, 2uLL);
    v40 = vshlq_n_s16(*(int16x8_t *)((char *)v38 + 2 * a3), 2uLL);
    v41 = vqaddq_s16(v15, v37);
    v42 = vqaddq_s16(v17, v35);
    v43 = vqaddq_s16(v23, v29);
    v44 = vqaddq_s16(v25, v27);
    v45 = vqsubq_s16(v25, v27);
    v46 = vqaddq_s16(v12, v40);
    v47 = vqsubq_s16(v23, v29);
    v48 = vqaddq_s16(v21, v31);
    v49 = vqsubq_s16(v21, v31);
    v50 = vqaddq_s16(v19, v33);
    v51 = vqsubq_s16(v19, v33);
    v52 = vqaddq_s16(v13, v39);
    v53 = vqsubq_s16(v17, v35);
    v54 = vqsubq_s16(v15, v37);
    v55 = vqsubq_s16(v13, v39);
    v56 = vqsubq_s16(v12, v40);
    v57 = vqaddq_s16(v41, v48);
    v58 = vqaddq_s16(v52, v43);
    v59 = vqaddq_s16(v42, v50);
    v60 = vqsubq_s16(v42, v50);
    v61 = vqsubq_s16(v41, v48);
    v62 = vqsubq_s16(v52, v43);
    v63 = vqaddq_s16(v46, v44);
    v64 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v5.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v49, v5), v54, v5), 0xDuLL);
    v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v54.i8, *(int16x4_t *)v5.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v49, v6), v54, v5), 0xDuLL);
    v66 = vqsubq_s16(v46, v44);
    v67 = vmlal_high_s16(vmull_high_s16(v51, v5), v53, v5);
    v68 = vmlal_high_s16(vmull_high_s16(v51, v6), v53, v5);
    *(int16x4_t *)v50.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v5.i8), 0xDuLL);
    v69 = vqaddq_s16(v63, v59);
    v70 = vqaddq_s16(v58, v57);
    *(int16x4_t *)v43.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v5.i8), 0xDuLL);
    v71 = vqsubq_s16(v58, v57);
    v72 = vqsubq_s16(v63, v59);
    v73 = vrshrn_high_n_s32(*(int16x4_t *)v50.i8, v67, 0xDuLL);
    v74 = vmlal_high_s16(vmull_high_s16(v61, v5), v62, v5);
    v75 = vmlal_high_s16(vmull_high_s16(v61, v6), v62, v5);
    v76 = vrshrn_high_n_s32(*(int16x4_t *)v43.i8, v68, 0xDuLL);
    *(int16x4_t *)v67.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v5.i8), 0xDuLL);
    *(int16x4_t *)v62.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v5.i8), 0xDuLL);
    v77 = vqaddq_s16(v45, v76);
    v78 = vqaddq_s16(v47, v65);
    v79 = vqsubq_s16(v47, v65);
    v80 = vqsubq_s16(v45, v76);
    v81 = vqsubq_s16(v56, v73);
    v82 = vqsubq_s16(v55, v64);
    v83 = vqaddq_s16(v55, v64);
    v84 = vqaddq_s16(v56, v73);
    v85 = vrshrn_high_n_s32(*(int16x4_t *)v67.i8, v74, 0xDuLL);
    v86 = vrshrn_high_n_s32(*(int16x4_t *)v62.i8, v75, 0xDuLL);
    v87 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v5.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v5.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v5), v69, v5), 0xDuLL);
    v88 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v5.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v70, v6), v69, v5), 0xDuLL);
    v89 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v1100.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v71, v7), v72, v1100), 0xDuLL);
    v90 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v8.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v7.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v71, v8), v72, v7), 0xDuLL);
    v91 = vqaddq_s16(v60, v86);
    v92 = vqsubq_s16(v60, v86);
    v93 = vqsubq_s16(v66, v85);
    v94 = vqaddq_s16(v66, v85);
    v95 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v7.i8), *(int16x4_t *)v83.i8, *(int16x4_t *)v1100.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v78, v7), v83, v1100), 0xDuLL);
    v96 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v8.i8), *(int16x4_t *)v83.i8, *(int16x4_t *)v7.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v78, v8), v83, v7), 0xDuLL);
    v97 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v8.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v7.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v79, v8), v82, v7), 0xDuLL);
    v98 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v1097.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v8.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v79, v1097), v82, v8), 0xDuLL);
    v99 = vmlal_high_s16(vmull_high_s16(v92, v1082), v93, v1085);
    v100 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v1091.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v1094.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v91, v1091), v94, v1094), 0xDuLL);
    v101 = vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v1079.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v1082.i8);
    v102 = vmlal_high_s16(vmull_high_s16(v92, v1079), v93, v1082);
    v103 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v1088.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v1091.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v91, v1088), v94, v1091), 0xDuLL);
    *(int16x4_t *)v93.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v1082.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v1085.i8), 0xDuLL);
    v104 = vqaddq_s16(v77, v96);
    v105 = vqsubq_s16(v77, v96);
    v106 = vqsubq_s16(v80, v98);
    v107 = vrshrn_high_n_s32(*(int16x4_t *)v93.i8, v99, 0xDuLL);
    v108 = vqaddq_s16(v80, v98);
    v109 = vqaddq_s16(v81, v97);
    v110 = vqsubq_s16(v81, v97);
    v111 = vqsubq_s16(v84, v95);
    v112 = vqaddq_s16(v84, v95);
    v113 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v1073.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v1076.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v104, v1073), v112, v1076), 0xDuLL);
    v114 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v1070.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v1073.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v104, v1070), v112, v1073), 0xDuLL);
    v115 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v9.i8), *(int16x4_t *)v111.i8, *(int16x4_t *)v1068.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v105, v9), v111, v1068), 0xDuLL);
    v116 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v1066.i8), *(int16x4_t *)v111.i8, *(int16x4_t *)v9.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v105, v1066), v111, v9), 0xDuLL);
    v117 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v10.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v1064.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v106, v10), v110, v1064), 0xDuLL);
    v118 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v1060.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v10.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v106, v1060), v110, v10), 0xDuLL);
    v119 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v1056.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v108, v11), v109, v1056), 0xDuLL);
    v120 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v1053.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v11.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v108, v1053), v109, v11), 0xDuLL);
    v121 = vrshrq_n_s16(v87, 4uLL);
    v122 = vrshrq_n_s16(v113, 4uLL);
    v123 = vrshrq_n_s16(v100, 4uLL);
    v124 = vrshrq_n_s16(v120, 4uLL);
    v125 = vrshrq_n_s16(v89, 4uLL);
    v126 = vrshrq_n_s16(v117, 4uLL);
    v127 = vrshrq_n_s16(vrshrn_high_n_s32(vrshrn_n_s32(v101, 0xDuLL), v102, 0xDuLL), 4uLL);
    v128 = vrshrq_n_s16(v116, 4uLL);
    v129 = (int32x4_t)vtrn1q_s16(v121, v122);
    v130 = (int32x4_t)vtrn2q_s16(v121, v122);
    v131 = (int32x4_t)vtrn1q_s16(v123, v124);
    v132 = (int32x4_t)vtrn2q_s16(v123, v124);
    v133 = (int32x4_t)vtrn1q_s16(v125, v126);
    v134 = (int32x4_t)vtrn2q_s16(v125, v126);
    v135 = (int32x4_t)vtrn1q_s16(v127, v128);
    v136 = (int32x4_t)vtrn2q_s16(v127, v128);
    v137 = (int64x2_t)vtrn1q_s32(v129, v131);
    v138 = (int64x2_t)vtrn2q_s32(v129, v131);
    v139 = (int64x2_t)vtrn1q_s32(v130, v132);
    v140 = (int64x2_t)vtrn2q_s32(v130, v132);
    v141 = (int64x2_t)vtrn1q_s32(v133, v135);
    v142 = (int64x2_t)vtrn2q_s32(v133, v135);
    v143 = (int64x2_t)vtrn1q_s32(v134, v136);
    v144 = (int64x2_t)vtrn2q_s32(v134, v136);
    v145 = vzip1q_s64(v137, v141);
    v146 = vzip2q_s64(v137, v141);
    v147 = vzip1q_s64(v139, v143);
    v148 = vzip2q_s64(v139, v143);
    v149 = vzip1q_s64(v138, v142);
    v150 = vzip2q_s64(v138, v142);
    v151 = vzip1q_s64(v140, v144);
    v152 = vzip2q_s64(v140, v144);
    v153 = (int64x2_t *)&v1103[v3];
    *v153 = v145;
    v153[1] = v147;
    v153[2] = v149;
    v153[3] = v151;
    v154 = vrshrq_n_s16(v88, 4uLL);
    v155 = vrshrq_n_s16(v115, 4uLL);
    v156 = vrshrq_n_s16(v107, 4uLL);
    v157 = vrshrq_n_s16(v118, 4uLL);
    v158 = vrshrq_n_s16(v90, 4uLL);
    v159 = vrshrq_n_s16(v119, 4uLL);
    v160 = (int32x4_t)vtrn1q_s16(v154, v155);
    v161 = (int32x4_t)vtrn2q_s16(v154, v155);
    v162 = (int32x4_t)vtrn1q_s16(v156, v157);
    v163 = (int32x4_t)vtrn2q_s16(v156, v157);
    v164 = (int32x4_t)vtrn1q_s16(v158, v159);
    v165 = (int32x4_t)vtrn2q_s16(v158, v159);
    v166 = vrshrq_n_s16(v103, 4uLL);
    v167 = vrshrq_n_s16(v114, 4uLL);
    v153[4] = v146;
    v153[5] = v148;
    v168 = (int32x4_t)vtrn1q_s16(v166, v167);
    v169 = (int32x4_t)vtrn2q_s16(v166, v167);
    v170 = (int64x2_t)vtrn1q_s32(v160, v162);
    v171 = (int64x2_t)vtrn2q_s32(v160, v162);
    v172 = (int64x2_t)vtrn1q_s32(v161, v163);
    v153[6] = v150;
    v153[7] = v152;
    v173 = (int64x2_t)vtrn1q_s32(v164, v168);
    v153[64] = vzip1q_s64(v170, v173);
    v174 = (int64x2_t)vtrn1q_s32(v165, v169);
    v153[65] = vzip1q_s64(v172, v174);
    v175 = (int64x2_t)vtrn2q_s32(v164, v168);
    v153[66] = vzip1q_s64(v171, v175);
    v176 = (int64x2_t)vtrn2q_s32(v161, v163);
    v177 = (int64x2_t)vtrn2q_s32(v165, v169);
    v153[67] = vzip1q_s64(v176, v177);
    v153[68] = vzip2q_s64(v170, v173);
    v153[69] = vzip2q_s64(v172, v174);
    v153[70] = vzip2q_s64(v171, v175);
    v153[71] = vzip2q_s64(v176, v177);
    v3 += 128;
    ++a1;
  }
  while (v3 != 1024);
  v178 = 0;
  v179 = 1;
  do
  {
    v180 = 0;
    v181 = (int16x8_t *)&v1103[1024 * v178];
    v182 = v181[10];
    v183 = v181[11];
    v185 = v181[52];
    v184 = v181[53];
    v186 = vqaddq_s16(v182, v184);
    v187 = vqaddq_s16(v183, v185);
    v188 = v181[12];
    v189 = v181[13];
    v191 = v181[50];
    v190 = v181[51];
    v192 = v181[16];
    v193 = v181[17];
    v194 = v181[46];
    v195 = v181[47];
    v1101 = vqaddq_s16(v192, v195);
    v1095 = vqaddq_s16(v193, v194);
    v196 = v181[18];
    v197 = v181[19];
    v199 = v181[44];
    v198 = v181[45];
    v782 = vqaddq_s16(v196, v198);
    v786 = vqaddq_s16(v188, v190);
    v778 = vqaddq_s16(v197, v199);
    v200 = v181[22];
    v201 = v181[23];
    v203 = v181[40];
    v202 = v181[41];
    v204 = vqaddq_s16(v200, v202);
    v205 = vqaddq_s16(v201, v203);
    v206 = vqsubq_s16(v201, v203);
    v207 = vqsubq_s16(v200, v202);
    v208 = v181[20];
    v209 = v181[21];
    v211 = v181[42];
    v210 = v181[43];
    v212 = vqaddq_s16(v209, v211);
    v213 = vqsubq_s16(v209, v211);
    v214 = vqaddq_s16(v208, v210);
    v215 = vqsubq_s16(v208, v210);
    v216 = vqsubq_s16(v197, v199);
    v217 = vqsubq_s16(v196, v198);
    v218 = vqsubq_s16(v193, v194);
    v219 = vqsubq_s16(v192, v195);
    v221 = v181[14];
    v220 = v181[15];
    v223 = v181[48];
    v222 = v181[49];
    v1098 = vqaddq_s16(v220, v223);
    v224 = vqsubq_s16(v220, v223);
    v1092 = vqaddq_s16(v221, v222);
    v225 = vqsubq_s16(v221, v222);
    v774 = vqaddq_s16(v189, v191);
    v226 = vqsubq_s16(v189, v191);
    v227 = vqsubq_s16(v188, v190);
    v228 = vqsubq_s16(v183, v185);
    v229 = vqsubq_s16(v182, v184);
    v230 = v181[8];
    v231 = v181[9];
    v232 = v181[54];
    v233 = vqaddq_s16(v231, v232);
    v234 = vqsubq_s16(v231, v232);
    v235 = v181[55];
    v236 = vqaddq_s16(v230, v235);
    v237 = vqsubq_s16(v230, v235);
    v1071 = vqaddq_s16(v187, v214);
    v238 = vqsubq_s16(v187, v214);
    v239 = vqaddq_s16(v186, v212);
    v240 = vqsubq_s16(v186, v212);
    v241 = vqaddq_s16(v233, v204);
    v242 = vqsubq_s16(v233, v204);
    v1089 = vqaddq_s16(v236, v205);
    v243 = vqsubq_s16(v236, v205);
    v1061 = v181[7];
    v1057 = v181[56];
    v244 = vqaddq_s16(v1061, v1057);
    v1054 = v181[24];
    v1030 = v181[25];
    v1051 = v181[39];
    v994 = v181[38];
    v245 = vqaddq_s16(v1054, v1051);
    v1086 = vqaddq_s16(v244, v245);
    v246 = vqsubq_s16(v244, v245);
    v1036 = v181[6];
    v1033 = v181[57];
    v247 = vqaddq_s16(v1036, v1033);
    v248 = vqaddq_s16(v1030, v994);
    v249 = vqaddq_s16(v247, v248);
    v250 = vqsubq_s16(v247, v248);
    v1027 = v181[5];
    v990 = v181[58];
    v251 = vqaddq_s16(v1027, v990);
    v981 = v181[26];
    v962 = v181[27];
    v978 = v181[37];
    v950 = v181[36];
    v252 = vqaddq_s16(v981, v978);
    v253 = vqaddq_s16(v251, v252);
    v254 = vqsubq_s16(v251, v252);
    v987 = v181[4];
    v984 = v181[59];
    v255 = vqaddq_s16(v987, v984);
    v256 = vqaddq_s16(v962, v950);
    v257 = vqaddq_s16(v255, v256);
    v258 = vqsubq_s16(v255, v256);
    v259 = vdupq_n_s16(0x16A0u);
    v970 = vmlal_s16(vmull_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v237.i8, *(int16x4_t *)v259.i8);
    v974 = vmlal_high_s16(vmull_high_s16(v206, v259), v237, v259);
    v260 = vdupq_n_s16(0xE960u);
    v966 = vmlal_s16(vmull_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v237.i8, *(int16x4_t *)v259.i8);
    v261 = vmlal_high_s16(vmull_high_s16(v206, v260), v237, v259);
    v946 = vmlal_s16(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v234.i8, *(int16x4_t *)v259.i8);
    v942 = vmlal_high_s16(vmull_high_s16(v207, v259), v234, v259);
    v936 = vmlal_s16(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v234.i8, *(int16x4_t *)v259.i8);
    v923 = vmlal_high_s16(vmull_high_s16(v207, v260), v234, v259);
    v920 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v229.i8, *(int16x4_t *)v259.i8);
    v917 = vmlal_high_s16(vmull_high_s16(v213, v259), v229, v259);
    v914 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v229.i8, *(int16x4_t *)v259.i8);
    v911 = vmlal_high_s16(vmull_high_s16(v213, v260), v229, v259);
    v908 = vmlal_s16(vmull_s16(*(int16x4_t *)v215.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v228.i8, *(int16x4_t *)v259.i8);
    v905 = vmlal_high_s16(vmull_high_s16(v215, v259), v228, v259);
    v902 = vmlal_s16(vmull_s16(*(int16x4_t *)v215.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v228.i8, *(int16x4_t *)v259.i8);
    v896 = vmlal_high_s16(vmull_high_s16(v215, v260), v228, v259);
    v1041 = vmlal_s16(vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v227.i8, *(int16x4_t *)v259.i8);
    v1039 = vmlal_high_s16(vmull_high_s16(v216, v259), v227, v259);
    v1018 = vmlal_s16(vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v227.i8, *(int16x4_t *)v259.i8);
    v1016 = vmlal_high_s16(vmull_high_s16(v216, v260), v227, v259);
    v1014 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v226.i8, *(int16x4_t *)v259.i8);
    v1012 = vmlal_high_s16(vmull_high_s16(v217, v259), v226, v259);
    v1001 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v226.i8, *(int16x4_t *)v259.i8);
    v998 = vmlal_high_s16(vmull_high_s16(v217, v260), v226, v259);
    v1010 = vmlal_s16(vmull_s16(*(int16x4_t *)v218.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v225.i8, *(int16x4_t *)v259.i8);
    v1008 = vmlal_high_s16(vmull_high_s16(v218, v259), v225, v259);
    v1006 = vmlal_s16(vmull_s16(*(int16x4_t *)v218.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v225.i8, *(int16x4_t *)v259.i8);
    v1004 = vmlal_high_s16(vmull_high_s16(v218, v260), v225, v259);
    v1083 = vmlal_s16(vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v224.i8, *(int16x4_t *)v259.i8);
    v1080 = vmlal_high_s16(vmull_high_s16(v219, v259), v224, v259);
    v1077 = vmlal_s16(vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v224.i8, *(int16x4_t *)v259.i8);
    v1074 = vmlal_high_s16(vmull_high_s16(v219, v260), v224, v259);
    v262 = vqaddq_s16(v253, v239);
    v263 = vqsubq_s16(v253, v239);
    v264 = vqsubq_s16(v257, v1071);
    v899 = v181[3];
    v893 = vqaddq_s16(v899, v181[60]);
    v882 = v181[28];
    v874 = v181[29];
    v878 = v181[35];
    v887 = vqaddq_s16(v882, v878);
    v265 = vqaddq_s16(v893, v887);
    v266 = vqaddq_s16(v786, v778);
    v768 = vqaddq_s16(v257, v1071);
    v771 = vqaddq_s16(v265, v266);
    v267 = vqsubq_s16(v265, v266);
    v867 = v181[2];
    v871 = v181[34];
    v862 = v181[61];
    v838 = vqaddq_s16(v874, v871);
    v841 = vqaddq_s16(v867, v862);
    v268 = vqaddq_s16(v841, v838);
    v269 = vqaddq_s16(v774, v782);
    v270 = vqaddq_s16(v268, v269);
    v271 = vqsubq_s16(v268, v269);
    v890 = vmlal_s16(vmull_s16(*(int16x4_t *)v238.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v258.i8, *(int16x4_t *)v259.i8);
    v822 = vmlal_high_s16(vmull_high_s16(v238, v259), v258, v259);
    v847 = vmlal_s16(vmull_s16(*(int16x4_t *)v238.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v258.i8, *(int16x4_t *)v259.i8);
    v844 = vmlal_high_s16(vmull_high_s16(v238, v260), v258, v259);
    v818 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v254.i8, *(int16x4_t *)v259.i8);
    v814 = vmlal_high_s16(vmull_high_s16(v240, v259), v254, v259);
    v810 = vmlal_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v254.i8, *(int16x4_t *)v259.i8);
    v806 = vmlal_high_s16(vmull_high_s16(v240, v260), v254, v259);
    v859 = vmlal_s16(vmull_s16(*(int16x4_t *)v242.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v250.i8, *(int16x4_t *)v259.i8);
    v856 = vmlal_high_s16(vmull_high_s16(v242, v259), v250, v259);
    v853 = vmlal_s16(vmull_s16(*(int16x4_t *)v242.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v250.i8, *(int16x4_t *)v259.i8);
    v850 = vmlal_high_s16(vmull_high_s16(v242, v260), v250, v259);
    v1049 = vmlal_s16(vmull_s16(*(int16x4_t *)v243.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v246.i8, *(int16x4_t *)v259.i8);
    v1047 = vmlal_high_s16(vmull_high_s16(v243, v259), v246, v259);
    v1045 = vmlal_s16(vmull_s16(*(int16x4_t *)v243.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v246.i8, *(int16x4_t *)v259.i8);
    v1043 = vmlal_high_s16(vmull_high_s16(v243, v260), v246, v259);
    v748 = vqaddq_s16(v270, v262);
    v272 = vqsubq_s16(v270, v262);
    v956 = v181[1];
    v954 = v181[62];
    v940 = v181[30];
    v1022 = v181[31];
    v934 = v181[33];
    v1020 = v181[32];
    v826 = vqaddq_s16(v940, v934);
    v829 = vqaddq_s16(v956, v954);
    v790 = vqaddq_s16(v1092, v1095);
    v794 = vqaddq_s16(v829, v826);
    v273 = vqaddq_s16(v794, v790);
    v274 = v241;
    v275 = v249;
    v276 = vqaddq_s16(v249, v241);
    v746 = vqaddq_s16(v273, v276);
    v277 = vqsubq_s16(v273, v276);
    v278 = vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v259.i8);
    v802 = vmlal_high_s16(vmull_high_s16(v263, v259), v271, v259);
    v798 = vmlal_s16(vmull_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v259.i8);
    v279 = vmlal_high_s16(vmull_high_s16(v263, v260), v271, v259);
    v932 = vmlal_s16(vmull_s16(*(int16x4_t *)v264.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v267.i8, *(int16x4_t *)v259.i8);
    v930 = vmlal_high_s16(vmull_high_s16(v264, v259), v267, v259);
    v928 = vmlal_s16(vmull_s16(*(int16x4_t *)v264.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v267.i8, *(int16x4_t *)v259.i8);
    v926 = vmlal_high_s16(vmull_high_s16(v264, v260), v267, v259);
    v765 = vmlal_s16(vmull_s16(*(int16x4_t *)v272.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v277.i8, *(int16x4_t *)v259.i8);
    v762 = vmlal_high_s16(vmull_high_s16(v272, v259), v277, v259);
    v756 = vmlal_high_s16(vmull_high_s16(v272, v260), v277, v259);
    v759 = vmlal_s16(vmull_s16(*(int16x4_t *)v272.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v277.i8, *(int16x4_t *)v259.i8);
    v1024 = v181[63];
    v960 = vqaddq_s16(*v181, v1024);
    v958 = vqaddq_s16(v1022, v1020);
    v832 = vqaddq_s16(v1098, v1101);
    v835 = vqaddq_s16(v960, v958);
    v751 = vqaddq_s16(v1086, v1089);
    v753 = vqaddq_s16(v835, v832);
    v742 = vqaddq_s16(v771, v768);
    v744 = vqaddq_s16(v753, v751);
    v280 = vqaddq_s16(v744, v742);
    v281 = vqaddq_s16(v746, v748);
    v1072 = vmlal_s16(vmull_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v259.i8), *(int16x4_t *)v281.i8, *(int16x4_t *)v259.i8);
    v1067 = vmlal_high_s16(vmull_high_s16(v280, v259), v281, v259);
    v1069 = vmlal_s16(vmull_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v260.i8), *(int16x4_t *)v281.i8, *(int16x4_t *)v259.i8);
    v1065 = vmlal_high_s16(vmull_high_s16(v280, v260), v281, v259);
    v282 = vqsubq_s16(v962, v950);
    v283 = vqsubq_s16(v981, v978);
    v284 = vqsubq_s16(v1030, v994);
    v285 = vqsubq_s16(v1054, v1051);
    v286 = vqsubq_s16(v1061, v1057);
    v287 = vqsubq_s16(v1036, v1033);
    v288 = vqsubq_s16(v1027, v990);
    v289 = vqsubq_s16(v987, v984);
    v290 = vqsubq_s16(v774, v782);
    v291 = vqsubq_s16(v786, v778);
    v292 = vqsubq_s16(v893, v887);
    v293 = vqsubq_s16(v841, v838);
    v294 = vrshrn_high_n_s32(vrshrn_n_s32(v970, 0xDuLL), v974, 0xDuLL);
    v295 = vrshrn_high_n_s32(vrshrn_n_s32(v966, 0xDuLL), v261, 0xDuLL);
    v296 = vrshrn_high_n_s32(vrshrn_n_s32(v946, 0xDuLL), v942, 0xDuLL);
    v297 = vrshrn_high_n_s32(vrshrn_n_s32(v936, 0xDuLL), v923, 0xDuLL);
    v298 = vrshrn_high_n_s32(vrshrn_n_s32(v920, 0xDuLL), v917, 0xDuLL);
    v299 = vrshrn_high_n_s32(vrshrn_n_s32(v914, 0xDuLL), v911, 0xDuLL);
    v300 = vrshrn_high_n_s32(vrshrn_n_s32(v908, 0xDuLL), v905, 0xDuLL);
    v301 = vrshrn_high_n_s32(vrshrn_n_s32(v902, 0xDuLL), v896, 0xDuLL);
    v1058 = vqsubq_s16(v275, v274);
    v1062 = vqsubq_s16(v794, v790);
    v302 = vrshrn_high_n_s32(vrshrn_n_s32(v890, 0xDuLL), v822, 0xDuLL);
    v303 = vrshrn_high_n_s32(vrshrn_n_s32(v847, 0xDuLL), v844, 0xDuLL);
    v304 = vrshrn_high_n_s32(vrshrn_n_s32(v818, 0xDuLL), v814, 0xDuLL);
    v305 = vrshrn_high_n_s32(vrshrn_n_s32(v810, 0xDuLL), v806, 0xDuLL);
    v306 = vqaddq_s16(v285, v295);
    v307 = vqsubq_s16(v285, v295);
    v308 = vqaddq_s16(v284, v297);
    v309 = vqsubq_s16(v284, v297);
    v310 = vqaddq_s16(v283, v299);
    v311 = vqsubq_s16(v283, v299);
    v312 = vqaddq_s16(v282, v301);
    v313 = vqsubq_s16(v282, v301);
    v314 = vqsubq_s16(v286, v294);
    v315 = vqaddq_s16(v286, v294);
    v316 = vqsubq_s16(v287, v296);
    v317 = vqaddq_s16(v287, v296);
    v318 = vqsubq_s16(v288, v298);
    v319 = vqaddq_s16(v288, v298);
    v320 = vqsubq_s16(v289, v300);
    v321 = vqaddq_s16(v289, v300);
    v322 = vrshrn_high_n_s32(vrshrn_n_s32(v278, 0xDuLL), v802, 0xDuLL);
    v323 = vrshrn_high_n_s32(vrshrn_n_s32(v798, 0xDuLL), v279, 0xDuLL);
    v324 = vqaddq_s16(v291, v303);
    v325 = vqsubq_s16(v291, v303);
    v326 = vqaddq_s16(v290, v305);
    v327 = vqsubq_s16(v290, v305);
    v328 = vqsubq_s16(v292, v302);
    v329 = vqaddq_s16(v292, v302);
    v330 = vqsubq_s16(v293, v304);
    v331 = vdupq_n_s16(0x1D90u);
    v332 = vqaddq_s16(v293, v304);
    v333 = vdupq_n_s16(0xC3Eu);
    v967 = vmlal_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v321.i8, *(int16x4_t *)v331.i8);
    v963 = vmlal_high_s16(vmull_high_s16(v312, v333), v321, v331);
    v334 = vdupq_n_s16(0xE270u);
    v975 = vmlal_s16(vmull_s16(*(int16x4_t *)v312.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v321.i8, *(int16x4_t *)v333.i8);
    v971 = vmlal_high_s16(vmull_high_s16(v312, v334), v321, v333);
    v335 = vmlal_s16(vmull_s16(*(int16x4_t *)v310.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v319.i8, *(int16x4_t *)v331.i8);
    v336 = vmlal_high_s16(vmull_high_s16(v310, v333), v319, v331);
    v337 = vmlal_s16(vmull_s16(*(int16x4_t *)v310.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v319.i8, *(int16x4_t *)v333.i8);
    v338 = vmlal_high_s16(vmull_high_s16(v310, v334), v319, v333);
    v799 = vmlal_s16(vmull_s16(*(int16x4_t *)v308.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v317.i8, *(int16x4_t *)v331.i8);
    v795 = vmlal_high_s16(vmull_high_s16(v308, v333), v317, v331);
    v787 = vmlal_high_s16(vmull_high_s16(v308, v334), v317, v333);
    v791 = vmlal_s16(vmull_s16(*(int16x4_t *)v308.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v317.i8, *(int16x4_t *)v333.i8);
    v988 = vmlal_s16(vmull_s16(*(int16x4_t *)v306.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v315.i8, *(int16x4_t *)v331.i8);
    v985 = vmlal_high_s16(vmull_high_s16(v306, v333), v315, v331);
    v982 = vmlal_s16(vmull_s16(*(int16x4_t *)v306.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v315.i8, *(int16x4_t *)v333.i8);
    v979 = vmlal_high_s16(vmull_high_s16(v306, v334), v315, v333);
    v1037 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v314.i8, *(int16x4_t *)v333.i8);
    v339 = vdupq_n_s16(0xF3C2u);
    v1034 = vmlal_high_s16(vmull_high_s16(v307, v334), v314, v333);
    v1031 = vmlal_s16(vmull_s16(*(int16x4_t *)v307.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v314.i8, *(int16x4_t *)v334.i8);
    v1028 = vmlal_high_s16(vmull_high_s16(v307, v339), v314, v334);
    v848 = vmlal_s16(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v316.i8, *(int16x4_t *)v333.i8);
    v845 = vmlal_high_s16(vmull_high_s16(v309, v334), v316, v333);
    v839 = vmlal_high_s16(vmull_high_s16(v309, v339), v316, v334);
    v842 = vmlal_s16(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v316.i8, *(int16x4_t *)v334.i8);
    v995 = vmlal_s16(vmull_s16(*(int16x4_t *)v311.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v333.i8);
    v991 = vmlal_high_s16(vmull_high_s16(v311, v334), v318, v333);
    v951 = vmlal_s16(vmull_s16(*(int16x4_t *)v311.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v318.i8, *(int16x4_t *)v334.i8);
    v947 = vmlal_high_s16(vmull_high_s16(v311, v339), v318, v334);
    v943 = vmlal_s16(vmull_s16(*(int16x4_t *)v313.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v333.i8);
    v937 = vmlal_high_s16(vmull_high_s16(v313, v334), v320, v333);
    v807 = vmlal_s16(vmull_s16(*(int16x4_t *)v313.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v320.i8, *(int16x4_t *)v334.i8);
    v803 = vmlal_high_s16(vmull_high_s16(v313, v339), v320, v334);
    v340 = vqsubq_s16(v746, v748);
    v341 = vqsubq_s16(v744, v742);
    v342 = vqaddq_s16(v1058, v323);
    v343 = vqsubq_s16(v1058, v323);
    v344 = vqsubq_s16(v1062, v322);
    v345 = vqaddq_s16(v1062, v322);
    v346 = vmlal_s16(vmull_s16(*(int16x4_t *)v326.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v331.i8);
    v347 = vmlal_high_s16(vmull_high_s16(v326, v333), v332, v331);
    v348 = vmlal_s16(vmull_s16(*(int16x4_t *)v326.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v333.i8);
    v349 = vmlal_high_s16(vmull_high_s16(v326, v334), v332, v333);
    v897 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v329.i8, *(int16x4_t *)v331.i8);
    v894 = vmlal_high_s16(vmull_high_s16(v324, v333), v329, v331);
    v891 = vmlal_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v329.i8, *(int16x4_t *)v333.i8);
    v888 = vmlal_high_s16(vmull_high_s16(v324, v334), v329, v333);
    v912 = vmlal_s16(vmull_s16(*(int16x4_t *)v325.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v328.i8, *(int16x4_t *)v333.i8);
    v909 = vmlal_high_s16(vmull_high_s16(v325, v334), v328, v333);
    v906 = vmlal_s16(vmull_s16(*(int16x4_t *)v325.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v328.i8, *(int16x4_t *)v334.i8);
    v903 = vmlal_high_s16(vmull_high_s16(v325, v339), v328, v334);
    v749 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v330.i8, *(int16x4_t *)v333.i8);
    v747 = vmlal_high_s16(vmull_high_s16(v327, v334), v330, v333);
    v350 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v330.i8, *(int16x4_t *)v334.i8);
    v351 = vmlal_high_s16(vmull_high_s16(v327, v339), v330, v334);
    v1063 = vmlal_s16(vmull_s16(*(int16x4_t *)v340.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v331.i8);
    v1059 = vmlal_high_s16(vmull_high_s16(v340, v333), v341, v331);
    v1055 = vmlal_s16(vmull_s16(*(int16x4_t *)v340.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v333.i8);
    v1052 = vmlal_high_s16(vmull_high_s16(v340, v334), v341, v333);
    v352 = vmlal_s16(vmull_s16(*(int16x4_t *)v342.i8, *(int16x4_t *)v333.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v331.i8);
    v783 = vmlal_high_s16(vmull_high_s16(v342, v333), v345, v331);
    v779 = vmlal_s16(vmull_s16(*(int16x4_t *)v342.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v333.i8);
    v775 = vmlal_high_s16(vmull_high_s16(v342, v334), v345, v333);
    v823 = vmlal_s16(vmull_s16(*(int16x4_t *)v343.i8, *(int16x4_t *)v334.i8), *(int16x4_t *)v344.i8, *(int16x4_t *)v333.i8);
    v819 = vmlal_high_s16(vmull_high_s16(v343, v334), v344, v333);
    v811 = vmlal_high_s16(vmull_high_s16(v343, v339), v344, v334);
    v815 = vmlal_s16(vmull_s16(*(int16x4_t *)v343.i8, *(int16x4_t *)v339.i8), *(int16x4_t *)v344.i8, *(int16x4_t *)v334.i8);
    v743 = vqsubq_s16(v874, v871);
    v745 = vqsubq_s16(v882, v878);
    v863 = vqsubq_s16(v867, v862);
    v740 = vqsubq_s16(v1092, v1095);
    v741 = vqsubq_s16(v899, v181[60]);
    v353 = vqsubq_s16(v829, v826);
    v354 = vrshrn_high_n_s32(vrshrn_n_s32(v1041, 0xDuLL), v1039, 0xDuLL);
    v355 = vrshrn_high_n_s32(vrshrn_n_s32(v1018, 0xDuLL), v1016, 0xDuLL);
    v356 = vrshrn_high_n_s32(vrshrn_n_s32(v1014, 0xDuLL), v1012, 0xDuLL);
    v357 = vrshrn_high_n_s32(vrshrn_n_s32(v1001, 0xDuLL), v998, 0xDuLL);
    v358 = vrshrn_high_n_s32(vrshrn_n_s32(v859, 0xDuLL), v856, 0xDuLL);
    v359 = vrshrn_high_n_s32(vrshrn_n_s32(v853, 0xDuLL), v850, 0xDuLL);
    v360 = vqsubq_s16(v771, v768);
    v361 = vqsubq_s16(v753, v751);
    v362 = vrshrn_high_n_s32(vrshrn_n_s32(v967, 0xDuLL), v963, 0xDuLL);
    v363 = vrshrn_high_n_s32(vrshrn_n_s32(v975, 0xDuLL), v971, 0xDuLL);
    v364 = vrshrn_high_n_s32(vrshrn_n_s32(v335, 0xDuLL), v336, 0xDuLL);
    v365 = vrshrn_high_n_s32(vrshrn_n_s32(v337, 0xDuLL), v338, 0xDuLL);
    v366 = vrshrn_high_n_s32(vrshrn_n_s32(v765, 0xDuLL), v762, 0xDuLL);
    v367 = vrshrn_high_n_s32(vrshrn_n_s32(v759, 0xDuLL), v756, 0xDuLL);
    v368 = vrshrn_high_n_s32(vrshrn_n_s32(v346, 0xDuLL), v347, 0xDuLL);
    v369 = vrshrn_high_n_s32(vrshrn_n_s32(v348, 0xDuLL), v349, 0xDuLL);
    v370 = vqaddq_s16(v745, v355);
    v371 = vqaddq_s16(v370, v363);
    v372 = vqsubq_s16(v370, v363);
    v373 = vqaddq_s16(v743, v357);
    v374 = vqaddq_s16(v373, v365);
    v375 = vqsubq_s16(v373, v365);
    v376 = vqaddq_s16(v741, v354);
    v377 = vqsubq_s16(v376, v362);
    v378 = vqaddq_s16(v376, v362);
    v379 = vqaddq_s16(v863, v356);
    v380 = vqsubq_s16(v379, v364);
    v381 = vqaddq_s16(v379, v364);
    v382 = vqaddq_s16(v740, v359);
    v383 = vqaddq_s16(v382, v369);
    v384 = vqsubq_s16(v382, v369);
    v385 = vqaddq_s16(v353, v358);
    v386 = vqsubq_s16(v385, v368);
    v387 = vqaddq_s16(v385, v368);
    v388 = vdupq_n_s16(0x1F62u);
    v389 = vdupq_n_s16(0x63Eu);
    v390 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v381.i8, *(int16x4_t *)v388.i8);
    v391 = vmlal_high_s16(vmull_high_s16(v374, v389), v381, v388);
    v392 = vdupq_n_s16(0xE09Eu);
    v393 = vmlal_s16(vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v381.i8, *(int16x4_t *)v389.i8);
    v394 = vmlal_high_s16(vmull_high_s16(v374, v392), v381, v389);
    v924 = vmlal_s16(vmull_s16(*(int16x4_t *)v371.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v388.i8);
    v921 = vmlal_high_s16(vmull_high_s16(v371, v389), v378, v388);
    v918 = vmlal_s16(vmull_s16(*(int16x4_t *)v371.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v389.i8);
    v915 = vmlal_high_s16(vmull_high_s16(v371, v392), v378, v389);
    v976 = vmlal_s16(vmull_s16(*(int16x4_t *)v372.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v389.i8);
    v972 = vmlal_high_s16(vmull_high_s16(v372, v392), v377, v389);
    v395 = vdupq_n_s16(0xF9C2u);
    v968 = vmlal_s16(vmull_s16(*(int16x4_t *)v372.i8, *(int16x4_t *)v395.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v392.i8);
    v964 = vmlal_high_s16(vmull_high_s16(v372, v395), v377, v392);
    v900 = vmlal_s16(vmull_s16(*(int16x4_t *)v375.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v380.i8, *(int16x4_t *)v389.i8);
    v879 = vmlal_high_s16(vmull_high_s16(v375, v392), v380, v389);
    v875 = vmlal_s16(vmull_s16(*(int16x4_t *)v375.i8, *(int16x4_t *)v395.i8), *(int16x4_t *)v380.i8, *(int16x4_t *)v392.i8);
    v868 = vmlal_high_s16(vmull_high_s16(v375, v395), v380, v392);
    v396 = vqaddq_s16(v360, v367);
    v397 = vqaddq_s16(v361, v366);
    v1096 = vmlal_s16(vmull_s16(*(int16x4_t *)v396.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v397.i8, *(int16x4_t *)v388.i8);
    v1093 = vmlal_high_s16(vmull_high_s16(v396, v389), v397, v388);
    v1042 = vmlal_s16(vmull_s16(*(int16x4_t *)v396.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v397.i8, *(int16x4_t *)v389.i8);
    v1040 = vmlal_high_s16(vmull_high_s16(v396, v392), v397, v389);
    v760 = vmlal_s16(vmull_s16(*(int16x4_t *)v383.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v387.i8, *(int16x4_t *)v388.i8);
    v754 = vmlal_s16(vmull_s16(*(int16x4_t *)v383.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v387.i8, *(int16x4_t *)v389.i8);
    v757 = vmlal_high_s16(vmull_high_s16(v383, v389), v387, v388);
    v752 = vmlal_high_s16(vmull_high_s16(v383, v392), v387, v389);
    v885 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v392.i8), *(int16x4_t *)v386.i8, *(int16x4_t *)v389.i8);
    v883 = vmlal_high_s16(vmull_high_s16(v384, v392), v386, v389);
    v872 = vmlal_s16(vmull_s16(*(int16x4_t *)v384.i8, *(int16x4_t *)v395.i8), *(int16x4_t *)v386.i8, *(int16x4_t *)v392.i8);
    v851 = vmlal_high_s16(vmull_high_s16(v384, v395), v386, v392);
    v398 = vqsubq_s16(v745, v355);
    v399 = vqsubq_s16(v743, v357);
    v400 = vqsubq_s16(v863, v356);
    v401 = vqsubq_s16(v741, v354);
    v402 = vqsubq_s16(v740, v359);
    v403 = vqsubq_s16(v353, v358);
    v404 = vrshrn_high_n_s32(vrshrn_n_s32(v995, 0xDuLL), v991, 0xDuLL);
    v405 = vrshrn_high_n_s32(vrshrn_n_s32(v951, 0xDuLL), v947, 0xDuLL);
    v406 = vrshrn_high_n_s32(vrshrn_n_s32(v943, 0xDuLL), v937, 0xDuLL);
    v407 = vrshrn_high_n_s32(vrshrn_n_s32(v807, 0xDuLL), v803, 0xDuLL);
    v408 = vrshrn_high_n_s32(vrshrn_n_s32(v749, 0xDuLL), v747, 0xDuLL);
    v409 = vrshrn_high_n_s32(vrshrn_n_s32(v350, 0xDuLL), v351, 0xDuLL);
    v410 = vqsubq_s16(v398, v407);
    v411 = vqaddq_s16(v398, v407);
    v412 = vqsubq_s16(v399, v405);
    v413 = vqaddq_s16(v399, v405);
    v414 = vqaddq_s16(v401, v406);
    v415 = vqsubq_s16(v401, v406);
    v416 = vqaddq_s16(v400, v404);
    v417 = vqsubq_s16(v400, v404);
    v418 = vqsubq_s16(v360, v367);
    v419 = vqsubq_s16(v361, v366);
    v420 = vqsubq_s16(v402, v409);
    v421 = vqaddq_s16(v402, v409);
    v422 = vqaddq_s16(v403, v408);
    v423 = vdupq_n_s16(0x11C8u);
    v424 = vdupq_n_s16(0x1A9Cu);
    v425 = vqsubq_s16(v403, v408);
    v426 = vmlal_s16(vmull_s16(*(int16x4_t *)v412.i8, *(int16x4_t *)v424.i8), *(int16x4_t *)v417.i8, *(int16x4_t *)v423.i8);
    v427 = vdupq_n_s16(0xEE38u);
    v428 = vmlal_high_s16(vmull_high_s16(v412, v424), v417, v423);
    v429 = vmlal_s16(vmull_s16(*(int16x4_t *)v412.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v417.i8, *(int16x4_t *)v424.i8);
    v430 = vmlal_high_s16(vmull_high_s16(v412, v427), v417, v424);
    v952 = vmlal_s16(vmull_s16(*(int16x4_t *)v410.i8, *(int16x4_t *)v424.i8), *(int16x4_t *)v415.i8, *(int16x4_t *)v423.i8);
    v948 = vmlal_high_s16(vmull_high_s16(v410, v424), v415, v423);
    v944 = vmlal_s16(vmull_s16(*(int16x4_t *)v410.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v415.i8, *(int16x4_t *)v424.i8);
    v938 = vmlal_high_s16(vmull_high_s16(v410, v427), v415, v424);
    v1002 = vmlal_s16(vmull_s16(*(int16x4_t *)v411.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v414.i8, *(int16x4_t *)v424.i8);
    v431 = vdupq_n_s16(0xE564u);
    v999 = vmlal_high_s16(vmull_high_s16(v411, v427), v414, v424);
    v996 = vmlal_s16(vmull_s16(*(int16x4_t *)v411.i8, *(int16x4_t *)v431.i8), *(int16x4_t *)v414.i8, *(int16x4_t *)v427.i8);
    v992 = vmlal_high_s16(vmull_high_s16(v411, v431), v414, v427);
    v864 = vmlal_s16(vmull_s16(*(int16x4_t *)v413.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v416.i8, *(int16x4_t *)v424.i8);
    v750 = vmlal_high_s16(vmull_high_s16(v413, v427), v416, v424);
    v432 = vmlal_s16(vmull_s16(*(int16x4_t *)v413.i8, *(int16x4_t *)v431.i8), *(int16x4_t *)v416.i8, *(int16x4_t *)v427.i8);
    v433 = vmlal_high_s16(vmull_high_s16(v413, v431), v416, v427);
    v1019 = vmlal_s16(vmull_s16(*(int16x4_t *)v418.i8, *(int16x4_t *)v424.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v423.i8);
    v1017 = vmlal_high_s16(vmull_high_s16(v418, v424), v419, v423);
    v1015 = vmlal_s16(vmull_s16(*(int16x4_t *)v418.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v419.i8, *(int16x4_t *)v424.i8);
    v1013 = vmlal_high_s16(vmull_high_s16(v418, v427), v419, v424);
    v804 = vmlal_s16(vmull_s16(*(int16x4_t *)v420.i8, *(int16x4_t *)v424.i8), *(int16x4_t *)v425.i8, *(int16x4_t *)v423.i8);
    v769 = vmlal_high_s16(vmull_high_s16(v420, v424), v425, v423);
    v766 = vmlal_s16(vmull_s16(*(int16x4_t *)v420.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v425.i8, *(int16x4_t *)v424.i8);
    v763 = vmlal_high_s16(vmull_high_s16(v420, v427), v425, v424);
    v860 = vmlal_s16(vmull_s16(*(int16x4_t *)v421.i8, *(int16x4_t *)v427.i8), *(int16x4_t *)v422.i8, *(int16x4_t *)v424.i8);
    v857 = vmlal_high_s16(vmull_high_s16(v421, v427), v422, v424);
    v854 = vmlal_s16(vmull_s16(*(int16x4_t *)v421.i8, *(int16x4_t *)v431.i8), *(int16x4_t *)v422.i8, *(int16x4_t *)v427.i8);
    v808 = vmlal_high_s16(vmull_high_s16(v421, v431), v422, v427);
    v434 = vqsubq_s16(v940, v934);
    v435 = vqsubq_s16(v956, v954);
    v436 = vrshrn_high_n_s32(vrshrn_n_s32(v1010, 0xDuLL), v1008, 0xDuLL);
    v437 = vrshrn_high_n_s32(vrshrn_n_s32(v1006, 0xDuLL), v1004, 0xDuLL);
    v438 = vqsubq_s16(v1086, v1089);
    v439 = vqsubq_s16(v835, v832);
    v440 = vrshrn_high_n_s32(vrshrn_n_s32(v932, 0xDuLL), v930, 0xDuLL);
    v441 = vrshrn_high_n_s32(vrshrn_n_s32(v928, 0xDuLL), v926, 0xDuLL);
    v442 = vrshrn_high_n_s32(vrshrn_n_s32(v799, 0xDuLL), v795, 0xDuLL);
    v443 = vrshrn_high_n_s32(vrshrn_n_s32(v791, 0xDuLL), v787, 0xDuLL);
    v444 = vrshrn_high_n_s32(vrshrn_n_s32(v352, 0xDuLL), v783, 0xDuLL);
    v445 = vrshrn_high_n_s32(vrshrn_n_s32(v779, 0xDuLL), v775, 0xDuLL);
    v446 = vrshrn_high_n_s32(vrshrn_n_s32(v390, 0xDuLL), v391, 0xDuLL);
    v447 = vrshrn_high_n_s32(vrshrn_n_s32(v393, 0xDuLL), v394, 0xDuLL);
    v448 = vqaddq_s16(v434, v437);
    v449 = v434;
    v450 = vqaddq_s16(v448, v443);
    v451 = vqaddq_s16(v450, v447);
    v452 = vqsubq_s16(v450, v447);
    v453 = vqaddq_s16(v435, v436);
    v454 = vqaddq_s16(v453, v442);
    v455 = vqsubq_s16(v454, v446);
    v456 = vqaddq_s16(v454, v446);
    v457 = vqaddq_s16(v438, v441);
    v458 = v438;
    v459 = vqaddq_s16(v439, v440);
    v460 = v439;
    v461 = vqaddq_s16(v457, v445);
    v462 = vqaddq_s16(v459, v444);
    v463 = vdupq_n_s16(0x1FD8u);
    v464 = vdupq_n_s16(0x322u);
    v1011 = vmlal_s16(vmull_s16(*(int16x4_t *)v461.i8, *(int16x4_t *)v464.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v463.i8);
    v1009 = vmlal_high_s16(vmull_high_s16(v461, v464), v462, v463);
    v465 = vdupq_n_s16(0xE028u);
    v1090 = vmlal_s16(vmull_s16(*(int16x4_t *)v461.i8, *(int16x4_t *)v465.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v464.i8);
    v1087 = vmlal_high_s16(vmull_high_s16(v461, v465), v462, v464);
    v466 = vmlal_s16(vmull_s16(*(int16x4_t *)v451.i8, *(int16x4_t *)v464.i8), *(int16x4_t *)v456.i8, *(int16x4_t *)v463.i8);
    v467 = vmlal_high_s16(vmull_high_s16(v451, v464), v456, v463);
    v468 = vmlal_s16(vmull_s16(*(int16x4_t *)v451.i8, *(int16x4_t *)v465.i8), *(int16x4_t *)v456.i8, *(int16x4_t *)v464.i8);
    v469 = vmlal_high_s16(vmull_high_s16(v451, v465), v456, v464);
    v776 = vmlal_s16(vmull_s16(*(int16x4_t *)v452.i8, *(int16x4_t *)v465.i8), *(int16x4_t *)v455.i8, *(int16x4_t *)v464.i8);
    v772 = vmlal_high_s16(vmull_high_s16(v452, v465), v455, v464);
    v470 = vdupq_n_s16(0xFCDEu);
    v471 = vmlal_s16(vmull_s16(*(int16x4_t *)v452.i8, *(int16x4_t *)v470.i8), *(int16x4_t *)v455.i8, *(int16x4_t *)v465.i8);
    v472 = vmlal_high_s16(vmull_high_s16(v452, v470), v455, v465);
    v473 = vqsubq_s16(v448, v443);
    v474 = vqsubq_s16(v453, v442);
    v475 = vrshrn_high_n_s32(vrshrn_n_s32(v900, 0xDuLL), v879, 0xDuLL);
    v476 = vrshrn_high_n_s32(vrshrn_n_s32(v875, 0xDuLL), v868, 0xDuLL);
    v477 = vqsubq_s16(v457, v445);
    v478 = vqsubq_s16(v459, v444);
    v479 = vqsubq_s16(v473, v476);
    v480 = vqaddq_s16(v473, v476);
    v481 = vqaddq_s16(v474, v475);
    v482 = vdupq_n_s16(0x144Cu);
    v483 = vdupq_n_s16(0x18BCu);
    v484 = vqsubq_s16(v474, v475);
    v1007 = vmlal_s16(vmull_s16(*(int16x4_t *)v477.i8, *(int16x4_t *)v483.i8), *(int16x4_t *)v478.i8, *(int16x4_t *)v482.i8);
    v485 = vdupq_n_s16(0xEBB4u);
    v1005 = vmlal_high_s16(vmull_high_s16(v477, v483), v478, v482);
    v957 = vmlal_s16(vmull_s16(*(int16x4_t *)v477.i8, *(int16x4_t *)v485.i8), *(int16x4_t *)v478.i8, *(int16x4_t *)v483.i8);
    v955 = vmlal_high_s16(vmull_high_s16(v477, v485), v478, v483);
    v784 = vmlal_s16(vmull_s16(*(int16x4_t *)v479.i8, *(int16x4_t *)v483.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v482.i8);
    v780 = vmlal_high_s16(vmull_high_s16(v479, v483), v484, v482);
    v486 = vmlal_s16(vmull_s16(*(int16x4_t *)v479.i8, *(int16x4_t *)v485.i8), *(int16x4_t *)v484.i8, *(int16x4_t *)v483.i8);
    v487 = vmlal_high_s16(vmull_high_s16(v479, v485), v484, v483);
    v800 = vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v485.i8), *(int16x4_t *)v481.i8, *(int16x4_t *)v483.i8);
    v488 = vdupq_n_s16(0xE744u);
    v796 = vmlal_high_s16(vmull_high_s16(v480, v485), v481, v483);
    v788 = vmlal_high_s16(vmull_high_s16(v480, v488), v481, v485);
    v792 = vmlal_s16(vmull_s16(*(int16x4_t *)v480.i8, *(int16x4_t *)v488.i8), *(int16x4_t *)v481.i8, *(int16x4_t *)v485.i8);
    v489 = vqsubq_s16(v449, v437);
    v490 = vqsubq_s16(v435, v436);
    v491 = vrshrn_high_n_s32(vrshrn_n_s32(v848, 0xDuLL), v845, 0xDuLL);
    v492 = vrshrn_high_n_s32(vrshrn_n_s32(v842, 0xDuLL), v839, 0xDuLL);
    v493 = vqsubq_s16(v458, v441);
    v494 = vqsubq_s16(v460, v440);
    v495 = vrshrn_high_n_s32(vrshrn_n_s32(v823, 0xDuLL), v819, 0xDuLL);
    v496 = vrshrn_high_n_s32(vrshrn_n_s32(v815, 0xDuLL), v811, 0xDuLL);
    v497 = vrshrn_high_n_s32(vrshrn_n_s32(v426, 0xDuLL), v428, 0xDuLL);
    v498 = vrshrn_high_n_s32(vrshrn_n_s32(v429, 0xDuLL), v430, 0xDuLL);
    v499 = vqsubq_s16(v489, v492);
    v500 = vqaddq_s16(v499, v498);
    v501 = vqsubq_s16(v499, v498);
    v502 = vqsubq_s16(v490, v491);
    v503 = vqsubq_s16(v502, v497);
    v504 = vqaddq_s16(v502, v497);
    v505 = vqsubq_s16(v493, v496);
    v506 = vdupq_n_s16(0x1C38u);
    v507 = vqsubq_s16(v494, v495);
    v508 = vdupq_n_s16(0xF16u);
    v941 = vmlal_s16(vmull_s16(*(int16x4_t *)v505.i8, *(int16x4_t *)v508.i8), *(int16x4_t *)v507.i8, *(int16x4_t *)v506.i8);
    v935 = vmlal_high_s16(vmull_high_s16(v505, v508), v507, v506);
    v509 = vdupq_n_s16(0xE3C8u);
    v931 = vmlal_high_s16(vmull_high_s16(v505, v509), v507, v508);
    v933 = vmlal_s16(vmull_s16(*(int16x4_t *)v505.i8, *(int16x4_t *)v509.i8), *(int16x4_t *)v507.i8, *(int16x4_t *)v508.i8);
    v824 = vmlal_s16(vmull_s16(*(int16x4_t *)v500.i8, *(int16x4_t *)v508.i8), *(int16x4_t *)v504.i8, *(int16x4_t *)v506.i8);
    v820 = vmlal_high_s16(vmull_high_s16(v500, v508), v504, v506);
    v816 = vmlal_s16(vmull_s16(*(int16x4_t *)v500.i8, *(int16x4_t *)v509.i8), *(int16x4_t *)v504.i8, *(int16x4_t *)v508.i8);
    v812 = vmlal_high_s16(vmull_high_s16(v500, v509), v504, v508);
    v836 = vmlal_s16(vmull_s16(*(int16x4_t *)v501.i8, *(int16x4_t *)v509.i8), *(int16x4_t *)v503.i8, *(int16x4_t *)v508.i8);
    v833 = vmlal_high_s16(vmull_high_s16(v501, v509), v503, v508);
    v510 = vdupq_n_s16(0xF0EAu);
    v827 = vmlal_high_s16(vmull_high_s16(v501, v510), v503, v509);
    v830 = vmlal_s16(vmull_s16(*(int16x4_t *)v501.i8, *(int16x4_t *)v510.i8), *(int16x4_t *)v503.i8, *(int16x4_t *)v509.i8);
    v511 = vqaddq_s16(v489, v492);
    v512 = vqaddq_s16(v490, v491);
    v513 = vrshrn_high_n_s32(vrshrn_n_s32(v864, 0xDuLL), v750, 0xDuLL);
    v514 = vrshrn_high_n_s32(vrshrn_n_s32(v432, 0xDuLL), v433, 0xDuLL);
    v515 = vqaddq_s16(v493, v496);
    v516 = vqaddq_s16(v494, v495);
    v517 = vqsubq_s16(v511, v514);
    v518 = vqaddq_s16(v511, v514);
    v519 = vqaddq_s16(v512, v513);
    v520 = vqsubq_s16(v512, v513);
    v521 = vdupq_n_s16(0x94Au);
    v522 = vdupq_n_s16(0x1EA0u);
    v523 = vmlal_s16(vmull_s16(*(int16x4_t *)v515.i8, *(int16x4_t *)v522.i8), *(int16x4_t *)v516.i8, *(int16x4_t *)v521.i8);
    v929 = vmlal_high_s16(vmull_high_s16(v515, v522), v516, v521);
    v524 = vdupq_n_s16(0xF6B6u);
    v927 = vmlal_s16(vmull_s16(*(int16x4_t *)v515.i8, *(int16x4_t *)v524.i8), *(int16x4_t *)v516.i8, *(int16x4_t *)v522.i8);
    v901 = vmlal_high_s16(vmull_high_s16(v515, v524), v516, v522);
    v880 = vmlal_s16(vmull_s16(*(int16x4_t *)v517.i8, *(int16x4_t *)v522.i8), *(int16x4_t *)v520.i8, *(int16x4_t *)v521.i8);
    v876 = vmlal_high_s16(vmull_high_s16(v517, v522), v520, v521);
    v869 = vmlal_s16(vmull_s16(*(int16x4_t *)v517.i8, *(int16x4_t *)v524.i8), *(int16x4_t *)v520.i8, *(int16x4_t *)v522.i8);
    v865 = vmlal_high_s16(vmull_high_s16(v517, v524), v520, v522);
    v525 = vmlal_s16(vmull_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v524.i8), *(int16x4_t *)v519.i8, *(int16x4_t *)v522.i8);
    v526 = vmlal_high_s16(vmull_high_s16(v518, v524), v519, v522);
    v527 = vdupq_n_s16(0xE160u);
    v528 = vmlal_s16(vmull_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v527.i8), *(int16x4_t *)v519.i8, *(int16x4_t *)v524.i8);
    v529 = vmlal_high_s16(vmull_high_s16(v518, v527), v519, v524);
    v530 = vqsubq_s16(v1098, v1101);
    v531 = vqsubq_s16(v960, v958);
    v532 = vrshrn_high_n_s32(vrshrn_n_s32(v1049, 0xDuLL), v1047, 0xDuLL);
    v533 = vrshrn_high_n_s32(vrshrn_n_s32(v1045, 0xDuLL), v1043, 0xDuLL);
    v534 = vrshrn_high_n_s32(vrshrn_n_s32(v897, 0xDuLL), v894, 0xDuLL);
    v535 = vrshrn_high_n_s32(vrshrn_n_s32(v891, 0xDuLL), v888, 0xDuLL);
    v536 = vrshrn_high_n_s32(vrshrn_n_s32(v760, 0xDuLL), v757, 0xDuLL);
    v537 = vrshrn_high_n_s32(vrshrn_n_s32(v754, 0xDuLL), v752, 0xDuLL);
    v538 = vqaddq_s16(v530, v533);
    v539 = vqaddq_s16(v531, v532);
    v540 = vqaddq_s16(v538, v535);
    v541 = vqaddq_s16(v539, v534);
    v542 = vqaddq_s16(v540, v537);
    v543 = vdupq_n_s16(0x1FF6u);
    v544 = vqaddq_s16(v541, v536);
    v545 = vdupq_n_s16(0x192u);
    v1050 = vmlal_s16(vmull_s16(*(int16x4_t *)v542.i8, *(int16x4_t *)v545.i8), *(int16x4_t *)v544.i8, *(int16x4_t *)v543.i8);
    v1048 = vmlal_high_s16(vmull_high_s16(v542, v545), v544, v543);
    v546 = vdupq_n_s16(0xE00Au);
    v1102 = vmlal_s16(vmull_s16(*(int16x4_t *)v542.i8, *(int16x4_t *)v546.i8), *(int16x4_t *)v544.i8, *(int16x4_t *)v545.i8);
    v1099 = vmlal_high_s16(vmull_high_s16(v542, v546), v544, v545);
    v547 = vqsubq_s16(v540, v537);
    v548 = vdupq_n_s16(0x157Eu);
    v549 = vdupq_n_s16(0x17B6u);
    v550 = vqsubq_s16(v541, v536);
    v551 = vmlal_s16(vmull_s16(*(int16x4_t *)v547.i8, *(int16x4_t *)v549.i8), *(int16x4_t *)v550.i8, *(int16x4_t *)v548.i8);
    v552 = vdupq_n_s16(0xEA82u);
    v895 = vmlal_s16(vmull_s16(*(int16x4_t *)v547.i8, *(int16x4_t *)v552.i8), *(int16x4_t *)v550.i8, *(int16x4_t *)v549.i8);
    v898 = vmlal_high_s16(vmull_high_s16(v547, v549), v550, v548);
    v892 = vmlal_high_s16(vmull_high_s16(v547, v552), v550, v549);
    v553 = vqsubq_s16(v538, v535);
    v554 = vqsubq_s16(v539, v534);
    v555 = vrshrn_high_n_s32(vrshrn_n_s32(v885, 0xDuLL), v883, 0xDuLL);
    v556 = vrshrn_high_n_s32(vrshrn_n_s32(v872, 0xDuLL), v851, 0xDuLL);
    v557 = vqsubq_s16(v553, v556);
    v558 = vqsubq_s16(v554, v555);
    v559 = vdupq_n_s16(0x1CEEu);
    v560 = vdupq_n_s16(0xDAEu);
    v961 = vmlal_s16(vmull_s16(*(int16x4_t *)v557.i8, *(int16x4_t *)v560.i8), *(int16x4_t *)v558.i8, *(int16x4_t *)v559.i8);
    v959 = vmlal_high_s16(vmull_high_s16(v557, v560), v558, v559);
    v561 = vdupq_n_s16(0xE312u);
    v1046 = vmlal_s16(vmull_s16(*(int16x4_t *)v557.i8, *(int16x4_t *)v561.i8), *(int16x4_t *)v558.i8, *(int16x4_t *)v560.i8);
    v1044 = vmlal_high_s16(vmull_high_s16(v557, v561), v558, v560);
    v562 = vqaddq_s16(v553, v556);
    v563 = vdupq_n_s16(0xF538u);
    v564 = vqaddq_s16(v554, v555);
    v565 = vmull_s16(*(int16x4_t *)v562.i8, *(int16x4_t *)v563.i8);
    v566 = vmull_high_s16(v562, v563);
    v567 = vdupq_n_s16(0x1E22u);
    v886 = vmlal_high_s16(v566, v564, v567);
    v889 = vmlal_s16(v565, *(int16x4_t *)v564.i8, *(int16x4_t *)v567.i8);
    v568 = vqsubq_s16(v530, v533);
    v569 = vqsubq_s16(v531, v532);
    v570 = vrshrn_high_n_s32(vrshrn_n_s32(v912, 0xDuLL), v909, 0xDuLL);
    v571 = vrshrn_high_n_s32(vrshrn_n_s32(v906, 0xDuLL), v903, 0xDuLL);
    v572 = vrshrn_high_n_s32(vrshrn_n_s32(v804, 0xDuLL), v769, 0xDuLL);
    v573 = vrshrn_high_n_s32(vrshrn_n_s32(v766, 0xDuLL), v763, 0xDuLL);
    v574 = vqsubq_s16(v568, v571);
    v575 = vqsubq_s16(v569, v570);
    v576 = vqaddq_s16(v574, v573);
    v577 = vdupq_n_s16(0x1F0Au);
    v578 = vdupq_n_s16(0x7C6u);
    v579 = vqaddq_s16(v575, v572);
    v852 = vmlal_s16(vmull_s16(*(int16x4_t *)v576.i8, *(int16x4_t *)v578.i8), *(int16x4_t *)v579.i8, *(int16x4_t *)v577.i8);
    v580 = vdupq_n_s16(0xE0F6u);
    v846 = vmlal_high_s16(vmull_high_s16(v576, v578), v579, v577);
    v910 = vmlal_high_s16(vmull_high_s16(v576, v580), v579, v578);
    v913 = vmlal_s16(vmull_s16(*(int16x4_t *)v576.i8, *(int16x4_t *)v580.i8), *(int16x4_t *)v579.i8, *(int16x4_t *)v578.i8);
    v581 = vqsubq_s16(v574, v573);
    v582 = vqsubq_s16(v575, v572);
    v583 = vdupq_n_s16(0x1074u);
    v584 = vdupq_n_s16(0x1B72u);
    v907 = vmlal_s16(vmull_s16(*(int16x4_t *)v581.i8, *(int16x4_t *)v584.i8), *(int16x4_t *)v582.i8, *(int16x4_t *)v583.i8);
    v904 = vmlal_high_s16(vmull_high_s16(v581, v584), v582, v583);
    v585 = vdupq_n_s16(0xEF8Cu);
    v884 = vmlal_s16(vmull_s16(*(int16x4_t *)v581.i8, *(int16x4_t *)v585.i8), *(int16x4_t *)v582.i8, *(int16x4_t *)v584.i8);
    v873 = vmlal_high_s16(vmull_high_s16(v581, v585), v582, v584);
    v586 = vqaddq_s16(v568, v571);
    v587 = vqaddq_s16(v569, v570);
    v588 = vrshrn_high_n_s32(vrshrn_n_s32(v860, 0xDuLL), v857, 0xDuLL);
    v589 = vrshrn_high_n_s32(vrshrn_n_s32(v854, 0xDuLL), v808, 0xDuLL);
    v590 = vqsubq_s16(v586, v589);
    v591 = vdupq_n_s16(0x19B4u);
    v592 = vqsubq_s16(v587, v588);
    v593 = vdupq_n_s16(0x1310u);
    v843 = vmlal_s16(vmull_s16(*(int16x4_t *)v590.i8, *(int16x4_t *)v593.i8), *(int16x4_t *)v592.i8, *(int16x4_t *)v591.i8);
    v840 = vmlal_high_s16(vmull_high_s16(v590, v593), v592, v591);
    v594 = vdupq_n_s16(0xE64Cu);
    v595 = vmull_s16(*(int16x4_t *)v590.i8, *(int16x4_t *)v594.i8);
    v849 = vmlal_high_s16(vmull_high_s16(v590, v594), v592, v593);
    v596 = vqaddq_s16(v586, v589);
    v597 = vdupq_n_s16(0x4B2u);
    v598 = vdupq_n_s16(0x1FA8u);
    v599 = vqaddq_s16(v587, v588);
    v861 = vmlal_s16(vmull_s16(*(int16x4_t *)v596.i8, *(int16x4_t *)v598.i8), *(int16x4_t *)v599.i8, *(int16x4_t *)v597.i8);
    v600 = vdupq_n_s16(0xFB4Eu);
    v855 = vmlal_s16(v595, *(int16x4_t *)v592.i8, *(int16x4_t *)v593.i8);
    v858 = vmlal_high_s16(vmull_high_s16(v596, v598), v599, v597);
    v805 = vmlal_high_s16(vmull_high_s16(v596, v600), v599, v598);
    v809 = vmlal_s16(vmull_s16(*(int16x4_t *)v596.i8, *(int16x4_t *)v600.i8), *(int16x4_t *)v599.i8, *(int16x4_t *)v598.i8);
    v601 = vqsubq_s16(v1022, v1020);
    v602 = vqsubq_s16(*v181, v1024);
    v603 = vrshrn_high_n_s32(vrshrn_n_s32(v1083, 0xDuLL), v1080, 0xDuLL);
    v604 = vrshrn_high_n_s32(vrshrn_n_s32(v1077, 0xDuLL), v1074, 0xDuLL);
    v605 = vrshrn_high_n_s32(vrshrn_n_s32(v988, 0xDuLL), v985, 0xDuLL);
    v606 = vrshrn_high_n_s32(vrshrn_n_s32(v982, 0xDuLL), v979, 0xDuLL);
    v607 = vrshrn_high_n_s32(vrshrn_n_s32(v924, 0xDuLL), v921, 0xDuLL);
    v608 = vrshrn_high_n_s32(vrshrn_n_s32(v918, 0xDuLL), v915, 0xDuLL);
    v609 = vrshrn_high_n_s32(vrshrn_n_s32(v466, 0xDuLL), v467, 0xDuLL);
    v610 = vrshrn_high_n_s32(vrshrn_n_s32(v468, 0xDuLL), v469, 0xDuLL);
    v611 = vqaddq_s16(v601, v604);
    v612 = vqaddq_s16(v602, v603);
    v613 = vqaddq_s16(v611, v606);
    v614 = vqaddq_s16(v612, v605);
    v1078 = vqaddq_s16(v613, v608);
    v1025 = vqaddq_s16(v614, v607);
    v615 = vqsubq_s16(v1078, v610);
    v616 = vqsubq_s16(v1025, v609);
    v617 = vdupq_n_s16(0x1610u);
    v618 = vdupq_n_s16(0x172Eu);
    v1084 = vmlal_s16(vmull_s16(*(int16x4_t *)v615.i8, *(int16x4_t *)v618.i8), *(int16x4_t *)v616.i8, *(int16x4_t *)v617.i8);
    v1081 = vmlal_high_s16(vmull_high_s16(v615, v618), v616, v617);
    v619 = vdupq_n_s16(0xE9F0u);
    v1075 = vmlal_s16(vmull_s16(*(int16x4_t *)v615.i8, *(int16x4_t *)v619.i8), *(int16x4_t *)v616.i8, *(int16x4_t *)v618.i8);
    v1026 = vmlal_high_s16(vmull_high_s16(v615, v619), v616, v618);
    v620 = vqsubq_s16(v613, v608);
    v621 = vqsubq_s16(v614, v607);
    v622 = vrshrn_high_n_s32(vrshrn_n_s32(v776, 0xDuLL), v772, 0xDuLL);
    v623 = vrshrn_high_n_s32(vrshrn_n_s32(v471, 0xDuLL), v472, 0xDuLL);
    v624 = vqsubq_s16(v620, v623);
    v625 = vdupq_n_s16(0x1D42u);
    v626 = vqsubq_s16(v621, v622);
    v627 = vdupq_n_s16(0xCF8u);
    v983 = vmlal_s16(vmull_s16(*(int16x4_t *)v624.i8, *(int16x4_t *)v627.i8), *(int16x4_t *)v626.i8, *(int16x4_t *)v625.i8);
    v980 = vmlal_high_s16(vmull_high_s16(v624, v627), v626, v625);
    v628 = vdupq_n_s16(0xE2BEu);
    v1023 = vmlal_s16(vmull_s16(*(int16x4_t *)v624.i8, *(int16x4_t *)v628.i8), *(int16x4_t *)v626.i8, *(int16x4_t *)v627.i8);
    v1021 = vmlal_high_s16(vmull_high_s16(v624, v628), v626, v627);
    v629 = vqaddq_s16(v620, v623);
    v630 = vdupq_n_s16(0xB84u);
    v631 = vdupq_n_s16(0x1DDCu);
    v632 = vqaddq_s16(v621, v622);
    v989 = vmlal_s16(vmull_s16(*(int16x4_t *)v629.i8, *(int16x4_t *)v631.i8), *(int16x4_t *)v632.i8, *(int16x4_t *)v630.i8);
    v633 = vdupq_n_s16(0xF47Cu);
    v986 = vmlal_high_s16(vmull_high_s16(v629, v631), v632, v630);
    v922 = vmlal_high_s16(vmull_high_s16(v629, v633), v632, v631);
    v925 = vmlal_s16(vmull_s16(*(int16x4_t *)v629.i8, *(int16x4_t *)v633.i8), *(int16x4_t *)v632.i8, *(int16x4_t *)v631.i8);
    v634 = vqsubq_s16(v611, v606);
    v635 = vqsubq_s16(v612, v605);
    v636 = vrshrn_high_n_s32(vrshrn_n_s32(v976, 0xDuLL), v972, 0xDuLL);
    v637 = vrshrn_high_n_s32(vrshrn_n_s32(v968, 0xDuLL), v964, 0xDuLL);
    v638 = vrshrn_high_n_s32(vrshrn_n_s32(v784, 0xDuLL), v780, 0xDuLL);
    v639 = vrshrn_high_n_s32(vrshrn_n_s32(v486, 0xDuLL), v487, 0xDuLL);
    v640 = vqsubq_s16(v634, v637);
    v641 = vqsubq_s16(v635, v636);
    v642 = vqaddq_s16(v640, v639);
    v643 = vqaddq_s16(v641, v638);
    v644 = vdupq_n_s16(0x1F38u);
    v645 = vdupq_n_s16(0x702u);
    v919 = vmlal_s16(vmull_s16(*(int16x4_t *)v642.i8, *(int16x4_t *)v645.i8), *(int16x4_t *)v643.i8, *(int16x4_t *)v644.i8);
    v916 = vmlal_high_s16(vmull_high_s16(v642, v645), v643, v644);
    v646 = vdupq_n_s16(0xE0C8u);
    v977 = vmlal_s16(vmull_s16(*(int16x4_t *)v642.i8, *(int16x4_t *)v646.i8), *(int16x4_t *)v643.i8, *(int16x4_t *)v645.i8);
    v973 = vmlal_high_s16(vmull_high_s16(v642, v646), v643, v645);
    v647 = vqsubq_s16(v640, v639);
    v648 = vdupq_n_s16(0x111Eu);
    v649 = vqsubq_s16(v641, v638);
    v650 = vdupq_n_s16(0x1B0Au);
    v969 = vmlal_s16(vmull_s16(*(int16x4_t *)v647.i8, *(int16x4_t *)v650.i8), *(int16x4_t *)v649.i8, *(int16x4_t *)v648.i8);
    v965 = vmlal_high_s16(vmull_high_s16(v647, v650), v649, v648);
    v651 = vdupq_n_s16(0xEEE2u);
    v781 = vmlal_high_s16(vmull_high_s16(v647, v651), v649, v650);
    v785 = vmlal_s16(vmull_s16(*(int16x4_t *)v647.i8, *(int16x4_t *)v651.i8), *(int16x4_t *)v649.i8, *(int16x4_t *)v650.i8);
    v652 = vqaddq_s16(v634, v637);
    v653 = vqaddq_s16(v635, v636);
    v654 = vrshrn_high_n_s32(vrshrn_n_s32(v800, 0xDuLL), v796, 0xDuLL);
    v655 = vrshrn_high_n_s32(vrshrn_n_s32(v792, 0xDuLL), v788, 0xDuLL);
    v656 = vqsubq_s16(v652, v655);
    v657 = vdupq_n_s16(0x1A2Au);
    v658 = vdupq_n_s16(0x126Eu);
    v659 = vqsubq_s16(v653, v654);
    v777 = vmlal_s16(vmull_s16(*(int16x4_t *)v656.i8, *(int16x4_t *)v658.i8), *(int16x4_t *)v659.i8, *(int16x4_t *)v657.i8);
    v660 = vdupq_n_s16(0xE5D6u);
    v773 = vmlal_high_s16(vmull_high_s16(v656, v658), v659, v657);
    v789 = vmlal_high_s16(vmull_high_s16(v656, v660), v659, v658);
    v661 = vqaddq_s16(v652, v655);
    v662 = vqaddq_s16(v653, v654);
    v663 = vdupq_n_s16(0x578u);
    v664 = vdupq_n_s16(0x1F88u);
    v797 = vmlal_s16(vmull_s16(*(int16x4_t *)v656.i8, *(int16x4_t *)v660.i8), *(int16x4_t *)v659.i8, *(int16x4_t *)v658.i8);
    v801 = vmlal_s16(vmull_s16(*(int16x4_t *)v661.i8, *(int16x4_t *)v664.i8), *(int16x4_t *)v662.i8, *(int16x4_t *)v663.i8);
    v793 = vmlal_high_s16(vmull_high_s16(v661, v664), v662, v663);
    v665 = vdupq_n_s16(0xFA88u);
    v767 = vmlal_high_s16(vmull_high_s16(v661, v665), v662, v664);
    v770 = vmlal_s16(vmull_s16(*(int16x4_t *)v661.i8, *(int16x4_t *)v665.i8), *(int16x4_t *)v662.i8, *(int16x4_t *)v664.i8);
    v666 = vqsubq_s16(v601, v604);
    v667 = vqsubq_s16(v602, v603);
    v668 = vrshrn_high_n_s32(vrshrn_n_s32(v1037, 0xDuLL), v1034, 0xDuLL);
    v669 = vrshrn_high_n_s32(vrshrn_n_s32(v1031, 0xDuLL), v1028, 0xDuLL);
    v670 = vrshrn_high_n_s32(vrshrn_n_s32(v952, 0xDuLL), v948, 0xDuLL);
    v671 = vrshrn_high_n_s32(vrshrn_n_s32(v944, 0xDuLL), v938, 0xDuLL);
    v672 = vrshrn_high_n_s32(vrshrn_n_s32(v824, 0xDuLL), v820, 0xDuLL);
    v673 = vrshrn_high_n_s32(vrshrn_n_s32(v816, 0xDuLL), v812, 0xDuLL);
    v674 = vqsubq_s16(v666, v669);
    v675 = vqsubq_s16(v667, v668);
    v676 = vqaddq_s16(v674, v671);
    v677 = vqaddq_s16(v675, v670);
    v678 = vqaddq_s16(v676, v673);
    v679 = vdupq_n_s16(0x1FC2u);
    v680 = vqaddq_s16(v677, v672);
    v681 = vdupq_n_s16(0x3EAu);
    v953 = vmlal_s16(vmull_s16(*(int16x4_t *)v678.i8, *(int16x4_t *)v681.i8), *(int16x4_t *)v680.i8, *(int16x4_t *)v679.i8);
    v949 = vmlal_high_s16(vmull_high_s16(v678, v681), v680, v679);
    v682 = vdupq_n_s16(0xE03Eu);
    v1038 = vmlal_s16(vmull_s16(*(int16x4_t *)v678.i8, *(int16x4_t *)v682.i8), *(int16x4_t *)v680.i8, *(int16x4_t *)v681.i8);
    v1035 = vmlal_high_s16(vmull_high_s16(v678, v682), v680, v681);
    v683 = vqsubq_s16(v676, v673);
    v684 = vdupq_n_s16(0x13B0u);
    v685 = vdupq_n_s16(0x193Au);
    v686 = vqsubq_s16(v677, v672);
    v1032 = vmlal_s16(vmull_s16(*(int16x4_t *)v683.i8, *(int16x4_t *)v685.i8), *(int16x4_t *)v686.i8, *(int16x4_t *)v684.i8);
    v687 = vdupq_n_s16(0xEC50u);
    v1029 = vmlal_high_s16(vmull_high_s16(v683, v685), v686, v684);
    v945 = vmlal_s16(vmull_s16(*(int16x4_t *)v683.i8, *(int16x4_t *)v687.i8), *(int16x4_t *)v686.i8, *(int16x4_t *)v685.i8);
    v939 = vmlal_high_s16(vmull_high_s16(v683, v687), v686, v685);
    v688 = vqsubq_s16(v674, v671);
    v689 = vqsubq_s16(v675, v670);
    v690 = vrshrn_high_n_s32(vrshrn_n_s32(v836, 0xDuLL), v833, 0xDuLL);
    v691 = vrshrn_high_n_s32(vrshrn_n_s32(v830, 0xDuLL), v827, 0xDuLL);
    v692 = vqsubq_s16(v688, v691);
    v693 = vqsubq_s16(v689, v690);
    v694 = vdupq_n_s16(0x1BD8u);
    v695 = vdupq_n_s16(0xFC6u);
    v825 = vmlal_s16(vmull_s16(*(int16x4_t *)v692.i8, *(int16x4_t *)v695.i8), *(int16x4_t *)v693.i8, *(int16x4_t *)v694.i8);
    v821 = vmlal_high_s16(vmull_high_s16(v692, v695), v693, v694);
    v696 = vdupq_n_s16(0xE428u);
    v834 = vmlal_high_s16(vmull_high_s16(v692, v696), v693, v695);
    v837 = vmlal_s16(vmull_s16(*(int16x4_t *)v692.i8, *(int16x4_t *)v696.i8), *(int16x4_t *)v693.i8, *(int16x4_t *)v695.i8);
    v697 = vqaddq_s16(v688, v691);
    v698 = vdupq_n_s16(0x888u);
    v699 = vqaddq_s16(v689, v690);
    v700 = vdupq_n_s16(0x1ED8u);
    v831 = vmlal_s16(vmull_s16(*(int16x4_t *)v697.i8, *(int16x4_t *)v700.i8), *(int16x4_t *)v699.i8, *(int16x4_t *)v698.i8);
    v828 = vmlal_high_s16(vmull_high_s16(v697, v700), v699, v698);
    v701 = vdupq_n_s16(0xF778u);
    v813 = vmlal_high_s16(vmull_high_s16(v697, v701), v699, v700);
    v817 = vmlal_s16(vmull_s16(*(int16x4_t *)v697.i8, *(int16x4_t *)v701.i8), *(int16x4_t *)v699.i8, *(int16x4_t *)v700.i8);
    v702 = vqaddq_s16(v666, v669);
    v703 = vqaddq_s16(v667, v668);
    v704 = vrshrn_high_n_s32(vrshrn_n_s32(v1002, 0xDuLL), v999, 0xDuLL);
    v705 = vrshrn_high_n_s32(vrshrn_n_s32(v996, 0xDuLL), v992, 0xDuLL);
    v764 = vrshrn_high_n_s32(vrshrn_n_s32(v880, 0xDuLL), v876, 0xDuLL);
    v997 = vrshrn_high_n_s32(vrshrn_n_s32(v869, 0xDuLL), v865, 0xDuLL);
    v993 = vqsubq_s16(v702, v705);
    v761 = vqsubq_s16(v703, v704);
    v706 = vqsubq_s16(v993, v997);
    v707 = vdupq_n_s16(0xE64u);
    v708 = vdupq_n_s16(0x1C96u);
    v709 = vqsubq_s16(v761, v764);
    v1003 = vmlal_s16(vmull_s16(*(int16x4_t *)v706.i8, *(int16x4_t *)v708.i8), *(int16x4_t *)v709.i8, *(int16x4_t *)v707.i8);
    v710 = vdupq_n_s16(0xF19Cu);
    v1000 = vmlal_high_s16(vmull_high_s16(v706, v708), v709, v707);
    v877 = vmlal_s16(vmull_s16(*(int16x4_t *)v706.i8, *(int16x4_t *)v710.i8), *(int16x4_t *)v709.i8, *(int16x4_t *)v708.i8);
    v866 = vmlal_high_s16(vmull_high_s16(v706, v710), v709, v708);
    v711 = vqaddq_s16(v702, v705);
    v712 = vqaddq_s16(v703, v704);
    v713 = vrshrn_high_n_s32(vrshrn_n_s32(v525, 0xDuLL), v526, 0xDuLL);
    v714 = vrshrn_high_n_s32(vrshrn_n_s32(v528, 0xDuLL), v529, 0xDuLL);
    v715 = vqsubq_s16(v711, v714);
    v716 = vqsubq_s16(v712, v713);
    v717 = vdupq_n_s16(0x183Cu);
    v718 = vdupq_n_s16(0x14E6u);
    v758 = vmlal_s16(vmull_s16(*(int16x4_t *)v715.i8, *(int16x4_t *)v718.i8), *(int16x4_t *)v716.i8, *(int16x4_t *)v717.i8);
    v719 = vmlal_high_s16(vmull_high_s16(v715, v718), v716, v717);
    v720 = vdupq_n_s16(0xE7C4u);
    v755 = vmlal_s16(vmull_s16(*(int16x4_t *)v715.i8, *(int16x4_t *)v720.i8), *(int16x4_t *)v716.i8, *(int16x4_t *)v718.i8);
    v721 = vmlal_high_s16(vmull_high_s16(v715, v720), v716, v718);
    v722 = vqaddq_s16(v711, v714);
    v723 = vdupq_n_s16(0x25Au);
    v724 = vqaddq_s16(v712, v713);
    v725 = vdupq_n_s16(0x1FEAu);
    v881 = vmlal_s16(vmull_s16(*(int16x4_t *)v722.i8, *(int16x4_t *)v725.i8), *(int16x4_t *)v724.i8, *(int16x4_t *)v723.i8);
    v870 = vmlal_high_s16(vmull_high_s16(v722, v725), v724, v723);
    v726 = vdupq_n_s16(0xFDA6u);
    v727 = vmlal_s16(vmull_s16(*(int16x4_t *)v722.i8, *(int16x4_t *)v726.i8), *(int16x4_t *)v724.i8, *(int16x4_t *)v725.i8);
    v728 = vmlal_high_s16(vmull_high_s16(v722, v726), v724, v725);
    v729 = vqaddq_s16(v1078, v610);
    v730 = vqaddq_s16(v1025, v609);
    v731 = vdupq_n_s16(0x1FFEu);
    v610.i64[0] = 0xCA00CA00CA00CALL;
    v610.i64[1] = 0xCA00CA00CA00CALL;
    v732 = vdupq_n_s16(0xE002u);
    v181[63] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v729.i8, *(int16x4_t *)v732.i8), *(int16x4_t *)v730.i8, (int16x4_t)0xCA00CA00CA00CALL), 0xDuLL), vmlal_high_s16(vmull_high_s16(v729, v732), v730, v610), 0xDuLL);
    *v181 = vrshrn_high_n_s32(vrshrn_n_s32(v1072, 0xDuLL), v1067, 0xDuLL);
    v181[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v729.i8, (int16x4_t)0xCA00CA00CA00CALL), *(int16x4_t *)v730.i8, *(int16x4_t *)v731.i8), 0xDuLL), vmlal_high_s16(vmull_high_s16(v729, v610), v730, v731), 0xDuLL);
    v733 = (int8x16_t)vqaddq_s16(v993, v997);
    v181[2] = vrshrn_high_n_s32(vrshrn_n_s32(v1050, 0xDuLL), v1048, 0xDuLL);
    v181[3] = vrshrn_high_n_s32(vrshrn_n_s32(v727, 0xDuLL), v728, 0xDuLL);
    v734 = (int8x16_t)vqaddq_s16(v761, v764);
    v181[4] = vrshrn_high_n_s32(vrshrn_n_s32(v1011, 0xDuLL), v1009, 0xDuLL);
    v181[5] = vrshrn_high_n_s32(vrshrn_n_s32(v953, 0xDuLL), v949, 0xDuLL);
    v181[6] = vrshrn_high_n_s32(vrshrn_n_s32(v809, 0xDuLL), v805, 0xDuLL);
    v181[7] = vrshrn_high_n_s32(vrshrn_n_s32(v770, 0xDuLL), v767, 0xDuLL);
    v181[8] = vrshrn_high_n_s32(vrshrn_n_s32(v1096, 0xDuLL), v1093, 0xDuLL);
    v181[9] = vrshrn_high_n_s32(vrshrn_n_s32(v919, 0xDuLL), v916, 0xDuLL);
    v181[10] = vrshrn_high_n_s32(vrshrn_n_s32(v852, 0xDuLL), v846, 0xDuLL);
    v181[11] = vrshrn_high_n_s32(vrshrn_n_s32(v817, 0xDuLL), v813, 0xDuLL);
    v735 = vdupq_n_s16(0x1E62u);
    v181[12] = vrshrn_high_n_s32(vrshrn_n_s32(v927, 0xDuLL), v901, 0xDuLL);
    v181[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v733.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), *(int16x4_t *)v734.i8, *(int16x4_t *)v735.i8), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v733, v733, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v734, v735), 0xDuLL);
    v181[14] = vrshrn_high_n_s32(vrshrn_n_s32(v889, 0xDuLL), v886, 0xDuLL);
    v181[15] = vrshrn_high_n_s32(vrshrn_n_s32(v925, 0xDuLL), v922, 0xDuLL);
    v181[16] = vrshrn_high_n_s32(vrshrn_n_s32(v1063, 0xDuLL), v1059, 0xDuLL);
    v181[17] = vrshrn_high_n_s32(vrshrn_n_s32(v983, 0xDuLL), v980, 0xDuLL);
    v181[18] = vrshrn_high_n_s32(vrshrn_n_s32(v961, 0xDuLL), v959, 0xDuLL);
    v181[19] = vrshrn_high_n_s32(vrshrn_n_s32(v877, 0xDuLL), v866, 0xDuLL);
    v181[20] = vrshrn_high_n_s32(vrshrn_n_s32(v941, 0xDuLL), v935, 0xDuLL);
    v181[21] = vrshrn_high_n_s32(vrshrn_n_s32(v825, 0xDuLL), v821, 0xDuLL);
    v181[22] = vrshrn_high_n_s32(vrshrn_n_s32(v884, 0xDuLL), v873, 0xDuLL);
    v181[23] = vrshrn_high_n_s32(vrshrn_n_s32(v785, 0xDuLL), v781, 0xDuLL);
    v181[24] = vrshrn_high_n_s32(vrshrn_n_s32(v1015, 0xDuLL), v1013, 0xDuLL);
    v181[25] = vrshrn_high_n_s32(vrshrn_n_s32(v777, 0xDuLL), v773, 0xDuLL);
    v181[26] = vrshrn_high_n_s32(vrshrn_n_s32(v843, 0xDuLL), v840, 0xDuLL);
    v181[27] = vrshrn_high_n_s32(vrshrn_n_s32(v945, 0xDuLL), v939, 0xDuLL);
    v181[28] = vrshrn_high_n_s32(vrshrn_n_s32(v957, 0xDuLL), v955, 0xDuLL);
    v181[29] = vrshrn_high_n_s32(vrshrn_n_s32(v758, 0xDuLL), v719, 0xDuLL);
    v181[30] = vrshrn_high_n_s32(vrshrn_n_s32(v895, 0xDuLL), v892, 0xDuLL);
    v181[31] = vrshrn_high_n_s32(vrshrn_n_s32(v1075, 0xDuLL), v1026, 0xDuLL);
    v181[32] = vrshrn_high_n_s32(vrshrn_n_s32(v1069, 0xDuLL), v1065, 0xDuLL);
    v181[33] = vrshrn_high_n_s32(vrshrn_n_s32(v1084, 0xDuLL), v1081, 0xDuLL);
    v181[34] = vrshrn_high_n_s32(vrshrn_n_s32(v551, 0xDuLL), v898, 0xDuLL);
    v181[35] = vrshrn_high_n_s32(vrshrn_n_s32(v755, 0xDuLL), v721, 0xDuLL);
    v181[36] = vrshrn_high_n_s32(vrshrn_n_s32(v1007, 0xDuLL), v1005, 0xDuLL);
    v181[37] = vrshrn_high_n_s32(vrshrn_n_s32(v1032, 0xDuLL), v1029, 0xDuLL);
    v181[38] = vrshrn_high_n_s32(vrshrn_n_s32(v855, 0xDuLL), v849, 0xDuLL);
    v181[39] = vrshrn_high_n_s32(vrshrn_n_s32(v797, 0xDuLL), v789, 0xDuLL);
    v181[40] = vrshrn_high_n_s32(vrshrn_n_s32(v1019, 0xDuLL), v1017, 0xDuLL);
    v181[41] = vrshrn_high_n_s32(vrshrn_n_s32(v969, 0xDuLL), v965, 0xDuLL);
    v181[42] = vrshrn_high_n_s32(vrshrn_n_s32(v907, 0xDuLL), v904, 0xDuLL);
    v181[43] = vrshrn_high_n_s32(vrshrn_n_s32(v837, 0xDuLL), v834, 0xDuLL);
    v181[44] = vrshrn_high_n_s32(vrshrn_n_s32(v933, 0xDuLL), v931, 0xDuLL);
    v181[45] = vrshrn_high_n_s32(vrshrn_n_s32(v1003, 0xDuLL), v1000, 0xDuLL);
    v181[46] = vrshrn_high_n_s32(vrshrn_n_s32(v1046, 0xDuLL), v1044, 0xDuLL);
    v181[47] = vrshrn_high_n_s32(vrshrn_n_s32(v1023, 0xDuLL), v1021, 0xDuLL);
    v736 = vdupq_n_s16(0xE19Eu);
    v181[48] = vrshrn_high_n_s32(vrshrn_n_s32(v1055, 0xDuLL), v1052, 0xDuLL);
    v181[49] = vrshrn_high_n_s32(vrshrn_n_s32(v989, 0xDuLL), v986, 0xDuLL);
    v181[51] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v733.i8, *(int16x4_t *)v736.i8), *(int16x4_t *)v734.i8, (int16x4_t)0xA0A0A0A0A0A0A0ALL), 0xDuLL), vmlal_high_s16(vmull_s16((int16x4_t)*(_OWORD *)&vextq_s8(v734, v734, 8uLL), (int16x4_t)0xA0A0A0A0A0A0A0ALL), (int16x8_t)v733, v736), 0xDuLL);
    v181[52] = vrshrn_high_n_s32(vrshrn_n_s32(v523, 0xDuLL), v929, 0xDuLL);
    v181[53] = vrshrn_high_n_s32(vrshrn_n_s32(v831, 0xDuLL), v828, 0xDuLL);
    v181[54] = vrshrn_high_n_s32(vrshrn_n_s32(v913, 0xDuLL), v910, 0xDuLL);
    v181[55] = vrshrn_high_n_s32(vrshrn_n_s32(v977, 0xDuLL), v973, 0xDuLL);
    v181[56] = vrshrn_high_n_s32(vrshrn_n_s32(v1042, 0xDuLL), v1040, 0xDuLL);
    v181[57] = vrshrn_high_n_s32(vrshrn_n_s32(v801, 0xDuLL), v793, 0xDuLL);
    v181[58] = vrshrn_high_n_s32(vrshrn_n_s32(v861, 0xDuLL), v858, 0xDuLL);
    v181[59] = vrshrn_high_n_s32(vrshrn_n_s32(v1038, 0xDuLL), v1035, 0xDuLL);
    v181[60] = vrshrn_high_n_s32(vrshrn_n_s32(v1090, 0xDuLL), v1087, 0xDuLL);
    v181[61] = vrshrn_high_n_s32(vrshrn_n_s32(v881, 0xDuLL), v870, 0xDuLL);
    v181[62] = vrshrn_high_n_s32(vrshrn_n_s32(v1102, 0xDuLL), v1099, 0xDuLL);
    v737 = v179;
    v738 = (int32x4_t *)(a2 + 16 + 32 * v178);
    do
    {
      v739 = v181[v180];
      v738[-1] = vmovl_s16(*(int16x4_t *)v739.i8);
      *v738 = vmovl_high_s16(v739);
      ++v180;
      v738 += 4;
    }
    while (v180 != 32);
    v179 = 0;
    v178 = 1;
  }
  while ((v737 & 1) != 0);
  bzero((void *)(a2 + 2048), 0x800uLL);
}

int16x8_t fdct8x8_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x4_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
  v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
  v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
  v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
  v12 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v13 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v14 = vqaddq_s16(v4, v11);
  v15 = vqaddq_s16(v5, v10);
  v16 = vqaddq_s16(v6, v9);
  v17 = vqaddq_s16(v7, v8);
  v18 = vqsubq_s16(v7, v8);
  v19 = vqsubq_s16(v6, v9);
  v20 = vqsubq_s16(v5, v10);
  v21 = vqsubq_s16(v4, v11);
  v22 = vqaddq_s16(v14, v17);
  v23 = vqaddq_s16(v15, v16);
  v24 = vqsubq_s16(v15, v16);
  v25 = vqsubq_s16(v14, v17);
  v26 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v12, 1), *(int16x4_t *)v20.i8, *v12, 0);
  v27 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v12, 1), v20, *v12, 0);
  v28 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v12, 2), *(int16x4_t *)v20.i8, *v12, 1);
  v29 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v12, 2), v20, *v12, 1);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xDuLL), v27, 0xDuLL);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
  v32 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v12, 1), *(int16x4_t *)v22.i8, *v12, 0);
  v33 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v12, 1), v22, *v12, 0);
  v34 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v12, 2), *(int16x4_t *)v22.i8, *v12, 1);
  v35 = vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v12, 2), v22, *v12, 1);
  v36 = vrshrn_high_n_s32(vrshrn_n_s32(v32, 0xDuLL), v33, 0xDuLL);
  v37 = vrshrn_high_n_s32(vrshrn_n_s32(v34, 0xDuLL), v35, 0xDuLL);
  v38 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v12->i8, 5), *(int16x4_t *)v25.i8, *(int16x8_t *)v12->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v12->i8, 5), v25, *(int16x8_t *)v12->i8, 4), 0xDuLL);
  v39 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v12->i8, 6), *(int16x4_t *)v25.i8, *(int16x8_t *)v12->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v12->i8, 6), v25, *(int16x8_t *)v12->i8, 5), 0xDuLL);
  v40 = vqaddq_s16(v18, v31);
  v41 = vqsubq_s16(v18, v31);
  v42 = vqsubq_s16(v21, v30);
  v43 = vqaddq_s16(v21, v30);
  *a2 = v36;
  a2[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v43.i8, *(int16x4_t *)v13.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v13.i8, 1), v43, *(int16x4_t *)v13.i8, 0), 0xDuLL);
  a2[6] = v39;
  a2[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v43.i8, *(int16x4_t *)v13.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v13.i8, 2), v43, *(int16x4_t *)v13.i8, 1), 0xDuLL);
  v44 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v41.i8, v13, 4), *(int16x4_t *)v42.i8, v13, 5);
  v45 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v41, v13, 4), v42, v13, 5);
  v46 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v41.i8, v13, 7), *(int16x4_t *)v42.i8, v13, 4);
  v47 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v41, v13, 7), v42, v13, 4);
  result = vrshrn_high_n_s32(vrshrn_n_s32(v44, 0xDuLL), v45, 0xDuLL);
  a2[4] = v37;
  a2[5] = result;
  a2[2] = v38;
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(v46, 0xDuLL), v47, 0xDuLL);
  return result;
}

int32x4_t fdct8x8_row_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t *v40;
  int16x8_t v41;
  int32x4_t v42;
  int32x4_t result;
  _OWORD v44[8];
  uint64_t v45;

  v4 = 0;
  v45 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v7 = a1[1];
  v9 = a1[6];
  v8 = a1[7];
  v10 = vqaddq_s16(*a1, v8);
  v11 = vqaddq_s16(v7, v9);
  v13 = a1[2];
  v12 = a1[3];
  v15 = a1[4];
  v14 = a1[5];
  v16 = vqaddq_s16(v13, v14);
  v17 = vqaddq_s16(v12, v15);
  v18 = vqsubq_s16(v12, v15);
  v19 = vqsubq_s16(v13, v14);
  v20 = vqsubq_s16(v7, v9);
  v21 = vqsubq_s16(*a1, v8);
  v22 = vqaddq_s16(v10, v17);
  v23 = vqaddq_s16(v11, v16);
  v24 = vqsubq_s16(v11, v16);
  v25 = vqsubq_s16(v10, v17);
  v26 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v5, 1), *(int16x4_t *)v20.i8, *v5, 0);
  v27 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v5, 1), v20, *v5, 0);
  v28 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v5, 2), *(int16x4_t *)v20.i8, *v5, 1);
  v29 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v5, 2), v20, *v5, 1);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xDuLL), v27, 0xDuLL);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v5, 1), *(int16x4_t *)v22.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v5, 1), v22, *v5, 0), 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v5, 2), *(int16x4_t *)v22.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v5, 2), v22, *v5, 1), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 5), v25, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 6), v25, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v36 = vqaddq_s16(v18, v31);
  v37 = vqsubq_s16(v18, v31);
  v38 = vqsubq_s16(v21, v30);
  v39 = vqaddq_s16(v21, v30);
  v44[0] = v32;
  v44[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v39.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v44[6] = v35;
  v44[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v39.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 2), v39, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v44[4] = v33;
  v44[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v6, 4), *(int16x4_t *)v38.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v37, v6, 4), v38, v6, 5), 0xDuLL);
  v44[2] = v34;
  v44[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v6, 7), *(int16x4_t *)v38.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v37, v6, 7), v38, v6, 4), 0xDuLL);
  v40 = a2 + 1;
  do
  {
    v41 = (int16x8_t)v44[v4];
    v42 = vmovl_s16(*(int16x4_t *)v41.i8);
    result = vmovl_high_s16(v41);
    v40[-1] = v42;
    *v40 = result;
    ++v4;
    v40 = (int32x4_t *)((char *)v40 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

int16x8_t fadst8x8_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x4_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
  v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
  v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
  v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
  v12 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v13 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v14 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v15 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v12, 3), *(int16x4_t *)v8.i8, *v12, 0);
  v16 = vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v12, 3), v8, *v12, 0);
  v17 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v12, 2), *(int16x4_t *)v8.i8, *v12, 3);
  v18 = vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v12, 2), v8, *v12, 3);
  v19 = vrshrn_high_n_s32(vrshrn_n_s32(v15, 0xDuLL), v16, 0xDuLL);
  v20 = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xDuLL), v18, 0xDuLL);
  v21 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *v12, 1), *(int16x4_t *)v6.i8, *v12, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v9, *v12, 1), v6, *v12, 0), 0xDuLL);
  v22 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *v12, 2), *(int16x4_t *)v6.i8, *v12, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v9, *v12, 2), v6, *v12, 1), 0xDuLL);
  v23 = vqaddq_s16(v4, v19);
  v24 = vqsubq_s16(v20, v11);
  v25 = vqsubq_s16(v4, v19);
  v26 = vqaddq_s16(v11, v20);
  v27 = vqsubq_s16(v22, v5);
  v28 = vqaddq_s16(v10, v21);
  v29 = vqaddq_s16(v5, v22);
  v30 = vqsubq_s16(v10, v21);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v28.i8, *(int16x8_t *)v12->i8, 5), *(int16x4_t *)v27.i8, *(int16x8_t *)v12->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v28, *(int16x8_t *)v12->i8, 5), v27, *(int16x8_t *)v12->i8, 4), 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v28.i8, *(int16x8_t *)v12->i8, 6), *(int16x4_t *)v27.i8, *(int16x8_t *)v12->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v28, *(int16x8_t *)v12->i8, 6), v27, *(int16x8_t *)v12->i8, 5), 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v29.i8, *(int16x8_t *)v12->i8, 5), *(int16x4_t *)v30.i8, *(int16x8_t *)v12->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v29, *(int16x8_t *)v12->i8, 5), v30, *(int16x8_t *)v12->i8, 4), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v29.i8, *(int16x8_t *)v12->i8, 6), *(int16x4_t *)v30.i8, *(int16x8_t *)v12->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v29, *(int16x8_t *)v12->i8, 6), v30, *(int16x8_t *)v12->i8, 5), 0xDuLL);
  v35 = vqaddq_s16(v23, v31);
  v36 = vqaddq_s16(v24, v32);
  v37 = vqaddq_s16(v25, v33);
  v38 = vqsubq_s16(v34, v26);
  v39 = vqsubq_s16(v23, v31);
  v40 = vqsubq_s16(v24, v32);
  v41 = vqsubq_s16(v25, v33);
  v42 = vqaddq_s16(v26, v34);
  v43 = vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v13.i8, 1), v35, *(int16x4_t *)v13.i8, 0);
  *(int16x4_t *)v25.i8 = vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 1), *(int16x4_t *)v35.i8, *(int16x4_t *)v13.i8, 0), 0xDuLL);
  v44 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v13.i8, 2), *(int16x4_t *)v35.i8, *(int16x4_t *)v13.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v13.i8, 2), v35, *(int16x4_t *)v13.i8, 1), 0xDuLL);
  a2[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v14.i8, 2), *(int16x4_t *)v37.i8, *(int16x4_t *)v14.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v14.i8, 2), v37, *(int16x4_t *)v14.i8, 1), 0xDuLL);
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v14, 4), *(int16x4_t *)v39.i8, v14, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v14, 4), v39, v14, 5), 0xDuLL);
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v14, 7), *(int16x4_t *)v39.i8, v14, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v14, 7), v39, v14, 4), 0xDuLL);
  a2[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v14.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v14.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v14.i8, 1), v37, *(int16x4_t *)v14.i8, 0), 0xDuLL);
  v45 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v13, 5), *(int16x4_t *)v41.i8, v13, 4);
  v46 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v13, 5), v41, v13, 4);
  v47 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v13, 6), *(int16x4_t *)v41.i8, v13, 5);
  v48 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v13, 6), v41, v13, 5);
  result = vrshrn_high_n_s32(vrshrn_n_s32(v45, 0xDuLL), v46, 0xDuLL);
  a2[6] = result;
  a2[7] = vrshrn_high_n_s32(*(int16x4_t *)v25.i8, v43, 0xDuLL);
  *a2 = v44;
  a2[1] = vrshrn_high_n_s32(vrshrn_n_s32(v47, 0xDuLL), v48, 0xDuLL);
  return result;
}

int32x4_t fadst8x8_row_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t *v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t result;
  _OWORD v47[8];
  uint64_t v48;

  v4 = 0;
  v48 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v7 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *v5, 3), *(int16x4_t *)v10.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v8, *v5, 3), v10, *v5, 0), 0xDuLL);
  v13 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *v5, 2), *(int16x4_t *)v10.i8, *v5, 3), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v8, *v5, 2), v10, *v5, 3), 0xDuLL);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v5, 1), *(int16x4_t *)v9.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v5, 1), v9, *v5, 0), 0xDuLL);
  v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v5, 2), *(int16x4_t *)v9.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v5, 2), v9, *v5, 1), 0xDuLL);
  v16 = a1[1];
  v17 = vqaddq_s16(*a1, v12);
  v19 = a1[6];
  v18 = a1[7];
  v20 = vqsubq_s16(v13, v18);
  v21 = vqsubq_s16(*a1, v12);
  v22 = vqaddq_s16(v18, v13);
  v23 = vqsubq_s16(v15, v16);
  v24 = vqaddq_s16(v19, v14);
  v25 = vqaddq_s16(v16, v15);
  v26 = vqsubq_s16(v19, v14);
  v27 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v23.i8, *(int16x8_t *)v5->i8, 4);
  v28 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 5), v23, *(int16x8_t *)v5->i8, 4);
  v29 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v23.i8, *(int16x8_t *)v5->i8, 5);
  v30 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 6), v23, *(int16x8_t *)v5->i8, 5);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v27, 0xDuLL), v28, 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(v29, 0xDuLL), v30, 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v26.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v25, *(int16x8_t *)v5->i8, 5), v26, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v26.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v25, *(int16x8_t *)v5->i8, 6), v26, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v35 = vqaddq_s16(v17, v31);
  v36 = vqaddq_s16(v20, v32);
  v37 = vqaddq_s16(v21, v33);
  v38 = vqsubq_s16(v34, v22);
  v39 = vqsubq_s16(v17, v31);
  v40 = vqsubq_s16(v20, v32);
  v41 = vqsubq_s16(v21, v33);
  v42 = vqaddq_s16(v22, v34);
  v47[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v7.i8, 2), *(int16x4_t *)v37.i8, *(int16x4_t *)v7.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v7.i8, 2), v37, *(int16x4_t *)v7.i8, 1), 0xDuLL);
  v47[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v7, 4), *(int16x4_t *)v39.i8, v7, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v7, 4), v39, v7, 5), 0xDuLL);
  v47[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v7, 7), *(int16x4_t *)v39.i8, v7, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v7, 7), v39, v7, 4), 0xDuLL);
  v47[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v7.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v7.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v7.i8, 1), v37, *(int16x4_t *)v7.i8, 0), 0xDuLL);
  v47[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v6, 5), *(int16x4_t *)v41.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v6, 5), v41, v6, 4), 0xDuLL);
  v47[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v35.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 1), v35, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v47[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v35.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 2), v35, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v47[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v6, 6), *(int16x4_t *)v41.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v6, 6), v41, v6, 5), 0xDuLL);
  v43 = a2 + 1;
  do
  {
    v44 = (int16x8_t)v47[v4];
    v45 = vmovl_s16(*(int16x4_t *)v44.i8);
    result = vmovl_high_s16(v44);
    v43[-1] = v45;
    *v43 = result;
    ++v4;
    v43 = (int32x4_t *)((char *)v43 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

int16x8_t fidentity8x8_col_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t result;

  v3 = *(int16x8_t *)((char *)a1 + 4 * a3);
  v4 = *(int16x8_t *)((char *)a1 + 6 * a3);
  v5 = *(int16x8_t *)((char *)a1 + 8 * a3);
  v6 = *(int16x8_t *)((char *)a1 + 10 * a3);
  v7 = *(int16x8_t *)((char *)a1 + 12 * a3);
  v8 = *(int16x8_t *)((char *)a1 + 14 * a3);
  v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 3uLL);
  *a2 = vshlq_n_s16(*a1, 3uLL);
  a2[1] = v9;
  a2[2] = vshlq_n_s16(v3, 3uLL);
  a2[3] = vshlq_n_s16(v4, 3uLL);
  a2[4] = vshlq_n_s16(v5, 3uLL);
  a2[5] = vshlq_n_s16(v6, 3uLL);
  result = vshlq_n_s16(v8, 3uLL);
  a2[6] = vshlq_n_s16(v7, 3uLL);
  a2[7] = result;
  return result;
}

int32x4_t fidentity8x8_row_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int32x4_t *v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t result;
  _OWORD v12[8];
  uint64_t v13;

  v3 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  v4 = vaddq_s16(a1[1], a1[1]);
  v12[0] = vaddq_s16(*a1, *a1);
  v12[1] = v4;
  v5 = vaddq_s16(a1[3], a1[3]);
  v12[2] = vaddq_s16(a1[2], a1[2]);
  v12[3] = v5;
  v6 = vaddq_s16(a1[5], a1[5]);
  v12[4] = vaddq_s16(a1[4], a1[4]);
  v12[5] = v6;
  v7 = vaddq_s16(a1[7], a1[7]);
  v12[6] = vaddq_s16(a1[6], a1[6]);
  v12[7] = v7;
  v8 = a2 + 1;
  do
  {
    v9 = (int16x8_t)v12[v3];
    v10 = vmovl_s16(*(int16x4_t *)v9.i8);
    result = vmovl_high_s16(v9);
    v8[-1] = v10;
    *v8 = result;
    ++v3;
    v8 = (int32x4_t *)((char *)v8 + 4 * a3);
  }
  while (v3 != 8);
  return result;
}

int16x8_t fdct8x16_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x4_t *v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
  v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
  v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
  v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
  v12 = vshlq_n_s16(a1[a3], 2uLL);
  v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 18 * a3), 2uLL);
  v14 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 20 * a3), 2uLL);
  v15 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 22 * a3), 2uLL);
  v16 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 24 * a3), 2uLL);
  v17 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 26 * a3), 2uLL);
  v18 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 28 * a3), 2uLL);
  v19 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 30 * a3), 2uLL);
  v20 = vqaddq_s16(v4, v19);
  v21 = vqaddq_s16(v5, v18);
  v22 = vqaddq_s16(v6, v17);
  v23 = vqaddq_s16(v7, v16);
  v24 = vqaddq_s16(v8, v15);
  v25 = vqaddq_s16(v9, v14);
  v26 = vqaddq_s16(v10, v13);
  v27 = vqaddq_s16(v11, v12);
  v28 = vqsubq_s16(v11, v12);
  v29 = vqsubq_s16(v10, v13);
  v30 = vqsubq_s16(v9, v14);
  v31 = vqsubq_s16(v8, v15);
  v32 = vqsubq_s16(v7, v16);
  v33 = vqsubq_s16(v6, v17);
  v34 = vqsubq_s16(v5, v18);
  v35 = vqsubq_s16(v4, v19);
  v36 = vqaddq_s16(v20, v27);
  v37 = vqaddq_s16(v21, v26);
  v38 = vqaddq_s16(v22, v25);
  v39 = vqaddq_s16(v23, v24);
  v40 = vqsubq_s16(v23, v24);
  v41 = vqsubq_s16(v22, v25);
  v42 = vqsubq_s16(v21, v26);
  v43 = vqsubq_s16(v20, v27);
  v44 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v45 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v46 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 1), *(int16x4_t *)v33.i8, *v44, 0);
  v47 = vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 1), v33, *v44, 0);
  v48 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 2), *(int16x4_t *)v33.i8, *v44, 1);
  v49 = vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 2), v33, *v44, 1);
  v50 = vrshrn_high_n_s32(vrshrn_n_s32(v46, 0xDuLL), v47, 0xDuLL);
  v51 = vrshrn_high_n_s32(vrshrn_n_s32(v48, 0xDuLL), v49, 0xDuLL);
  v52 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 1), *(int16x4_t *)v32.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 1), v32, *v44, 0), 0xDuLL);
  v53 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 2), *(int16x4_t *)v32.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 2), v32, *v44, 1), 0xDuLL);
  v54 = vqaddq_s16(v36, v39);
  v55 = vqaddq_s16(v37, v38);
  v56 = vqsubq_s16(v37, v38);
  v57 = vqsubq_s16(v36, v39);
  v58 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v59 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v60 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 2), *(int16x4_t *)v42.i8, *v44, 1);
  v61 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 2), v42, *v44, 1);
  v62 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 1), *(int16x4_t *)v42.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 1), v42, *v44, 0), 0xDuLL);
  v63 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xDuLL), v61, 0xDuLL);
  v64 = vqaddq_s16(v28, v53);
  v65 = vqaddq_s16(v29, v51);
  v66 = vqsubq_s16(v29, v51);
  v67 = vqsubq_s16(v28, v53);
  v68 = vqsubq_s16(v35, v52);
  v69 = vqsubq_s16(v34, v50);
  v70 = vqaddq_s16(v34, v50);
  v71 = vqaddq_s16(v35, v52);
  v72 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v55.i8, *v44, 1), *(int16x4_t *)v54.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v55, *v44, 1), v54, *v44, 0), 0xDuLL);
  v73 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v55.i8, *v44, 2), *(int16x4_t *)v54.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v55, *v44, 2), v54, *v44, 1), 0xDuLL);
  v74 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v56.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v57.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v56, *(int16x8_t *)v44->i8, 5), v57, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v75 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v56.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v57.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v56, *(int16x8_t *)v44->i8, 6), v57, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v76 = vqaddq_s16(v40, v63);
  v77 = vqsubq_s16(v40, v63);
  v78 = vqsubq_s16(v43, v62);
  v79 = vqaddq_s16(v43, v62);
  v80 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v70.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v65, *(int16x8_t *)v44->i8, 5), v70, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v81 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v70.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v65, *(int16x8_t *)v44->i8, 6), v70, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v82 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v69.i8, *(int16x8_t *)v44->i8, 5);
  v83 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v66, *(int16x8_t *)v44->i8, 6), v69, *(int16x8_t *)v44->i8, 5);
  v84 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 7), *(int16x4_t *)v69.i8, *(int16x8_t *)v44->i8, 6);
  v85 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v66, *(int16x8_t *)v44->i8, 7), v69, *(int16x8_t *)v44->i8, 6);
  v86 = vrshrn_high_n_s32(vrshrn_n_s32(v82, 0xDuLL), v83, 0xDuLL);
  v87 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xDuLL), v85, 0xDuLL);
  v88 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v79.i8, *(int16x4_t *)v45.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v76, *(int16x4_t *)v45.i8, 1), v79, *(int16x4_t *)v45.i8, 0), 0xDuLL);
  v89 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v45.i8, 2), *(int16x4_t *)v79.i8, *(int16x4_t *)v45.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v76, *(int16x4_t *)v45.i8, 2), v79, *(int16x4_t *)v45.i8, 1), 0xDuLL);
  v90 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v77.i8, v45, 4), *(int16x4_t *)v78.i8, v45, 5);
  v91 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v77, v45, 4), v78, v45, 5);
  v92 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v77.i8, v45, 7), *(int16x4_t *)v78.i8, v45, 4);
  v93 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v77, v45, 7), v78, v45, 4);
  v94 = vrshrn_high_n_s32(vrshrn_n_s32(v90, 0xDuLL), v91, 0xDuLL);
  v95 = vrshrn_high_n_s32(vrshrn_n_s32(v92, 0xDuLL), v93, 0xDuLL);
  v96 = vqaddq_s16(v64, v81);
  v97 = vqsubq_s16(v64, v81);
  v98 = vqsubq_s16(v67, v87);
  v99 = vqaddq_s16(v67, v87);
  v100 = vqaddq_s16(v68, v86);
  v101 = vqsubq_s16(v68, v86);
  v102 = vqsubq_s16(v71, v80);
  v103 = vqaddq_s16(v71, v80);
  *a2 = v72;
  a2[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v58.i8, 1), *(int16x4_t *)v103.i8, *(int16x4_t *)v58.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v96, *(int16x4_t *)v58.i8, 1), v103, *(int16x4_t *)v58.i8, 0), 0xDuLL);
  a2[14] = v89;
  a2[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v58.i8, 2), *(int16x4_t *)v103.i8, *(int16x4_t *)v58.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v96, *(int16x4_t *)v58.i8, 2), v103, *(int16x4_t *)v58.i8, 1), 0xDuLL);
  a2[8] = v73;
  a2[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v97.i8, v59, 4), *(int16x4_t *)v102.i8, v59, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v97, v59, 4), v102, v59, 5), 0xDuLL);
  a2[6] = v95;
  a2[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v97.i8, v59, 7), *(int16x4_t *)v102.i8, v59, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v97, v59, 7), v102, v59, 4), 0xDuLL);
  a2[4] = v74;
  a2[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v59.i8, 1), *(int16x4_t *)v101.i8, *(int16x4_t *)v59.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v98, *(int16x4_t *)v59.i8, 1), v101, *(int16x4_t *)v59.i8, 0), 0xDuLL);
  a2[10] = v94;
  a2[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v59.i8, 2), *(int16x4_t *)v101.i8, *(int16x4_t *)v59.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v98, *(int16x4_t *)v59.i8, 2), v101, *(int16x4_t *)v59.i8, 1), 0xDuLL);
  a2[12] = v75;
  a2[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v58, 4), *(int16x4_t *)v100.i8, v58, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v58, 4), v100, v58, 5), 0xDuLL);
  result = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v58, 7), *(int16x4_t *)v100.i8, v58, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v58, 7), v100, v58, 4), 0xDuLL);
  a2[2] = v88;
  a2[3] = result;
  return result;
}

int16x8_t fadst8x16_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x4_t *v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
  v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
  v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
  v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
  v12 = vshlq_n_s16(a1[a3], 2uLL);
  v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 18 * a3), 2uLL);
  v14 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 20 * a3), 2uLL);
  v15 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 22 * a3), 2uLL);
  v16 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 24 * a3), 2uLL);
  v17 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 26 * a3), 2uLL);
  v18 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 28 * a3), 2uLL);
  v19 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 30 * a3), 2uLL);
  v20 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v21 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v22 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v20, 2), *(int16x4_t *)v12.i8, *v20, 3);
  v23 = vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v20, 2), v12, *v20, 3);
  v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v20, 3), *(int16x4_t *)v12.i8, *v20, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v20, 3), v12, *v20, 0), 0xDuLL);
  v25 = vrshrn_high_n_s32(vrshrn_n_s32(v22, 0xDuLL), v23, 0xDuLL);
  v26 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v15.i8, *v20, 1), *(int16x4_t *)v8.i8, *v20, 0);
  v27 = vmlal_high_lane_s16(vmull_high_lane_s16(v15, *v20, 1), v8, *v20, 0);
  v28 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v15.i8, *v20, 2), *(int16x4_t *)v8.i8, *v20, 1);
  v29 = vmlal_high_lane_s16(vmull_high_lane_s16(v15, *v20, 2), v8, *v20, 1);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xDuLL), v27, 0xDuLL);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v20, 1), *(int16x4_t *)v10.i8, *v20, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v20, 1), v10, *v20, 0), 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v20, 2), *(int16x4_t *)v10.i8, *v20, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v20, 2), v10, *v20, 1), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *v20, 3), *(int16x4_t *)v14.i8, *v20, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v9, *v20, 3), v14, *v20, 0), 0xDuLL);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *v20, 2), *(int16x4_t *)v14.i8, *v20, 3), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v9, *v20, 2), v14, *v20, 3), 0xDuLL);
  v36 = vqaddq_s16(v4, v24);
  v37 = vqsubq_s16(v25, v19);
  v38 = vqsubq_s16(v4, v24);
  v39 = vqaddq_s16(v19, v25);
  v40 = vqsubq_s16(v31, v7);
  v41 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v42 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v43 = vqaddq_s16(v16, v30);
  v44 = vqaddq_s16(v7, v31);
  v45 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v46 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v47 = vqsubq_s16(v16, v30);
  v48 = vqsubq_s16(v33, v5);
  v49 = vqaddq_s16(v18, v32);
  v50 = vqaddq_s16(v5, v33);
  v51 = vqsubq_s16(v18, v32);
  v52 = vqaddq_s16(v6, v34);
  v53 = vqsubq_s16(v35, v17);
  v54 = vqsubq_s16(v6, v34);
  v55 = vqaddq_s16(v17, v35);
  v56 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v43.i8, *(int16x8_t *)v20->i8, 5), *(int16x4_t *)v40.i8, *(int16x8_t *)v20->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v43, *(int16x8_t *)v20->i8, 5), v40, *(int16x8_t *)v20->i8, 4), 0xDuLL);
  v57 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v43.i8, *(int16x8_t *)v20->i8, 6), *(int16x4_t *)v40.i8, *(int16x8_t *)v20->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v43, *(int16x8_t *)v20->i8, 6), v40, *(int16x8_t *)v20->i8, 5), 0xDuLL);
  v58 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v44.i8, *(int16x8_t *)v20->i8, 6), *(int16x4_t *)v47.i8, *(int16x8_t *)v20->i8, 5);
  v59 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v44, *(int16x8_t *)v20->i8, 6), v47, *(int16x8_t *)v20->i8, 5);
  v60 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v44.i8, *(int16x8_t *)v20->i8, 5), *(int16x4_t *)v47.i8, *(int16x8_t *)v20->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v44, *(int16x8_t *)v20->i8, 5), v47, *(int16x8_t *)v20->i8, 4), 0xDuLL);
  v61 = vrshrn_high_n_s32(vrshrn_n_s32(v58, 0xDuLL), v59, 0xDuLL);
  v62 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v20->i8, 5), *(int16x4_t *)v52.i8, *(int16x8_t *)v20->i8, 4);
  v63 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v20->i8, 5), v52, *(int16x8_t *)v20->i8, 4);
  v64 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v20->i8, 6), *(int16x4_t *)v52.i8, *(int16x8_t *)v20->i8, 5);
  v65 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v20->i8, 6), v52, *(int16x8_t *)v20->i8, 5);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(v62, 0xDuLL), v63, 0xDuLL);
  v67 = vrshrn_high_n_s32(vrshrn_n_s32(v64, 0xDuLL), v65, 0xDuLL);
  v68 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v20->i8, 7), *(int16x4_t *)v54.i8, *(int16x8_t *)v20->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v20->i8, 7), v54, *(int16x8_t *)v20->i8, 4), 0xDuLL);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v20->i8, 6), *(int16x4_t *)v54.i8, *(int16x8_t *)v20->i8, 7), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v20->i8, 6), v54, *(int16x8_t *)v20->i8, 7), 0xDuLL);
  v70 = vqaddq_s16(v36, v56);
  v71 = vqaddq_s16(v37, v57);
  v72 = vqaddq_s16(v38, v60);
  v73 = vqsubq_s16(v61, v39);
  v74 = vqsubq_s16(v36, v56);
  v75 = vqsubq_s16(v37, v57);
  v76 = vqsubq_s16(v38, v60);
  v77 = vqaddq_s16(v39, v61);
  v78 = vqaddq_s16(v48, v66);
  v79 = vqaddq_s16(v49, v67);
  v80 = vqsubq_s16(v69, v50);
  v81 = vqaddq_s16(v51, v68);
  v82 = vqsubq_s16(v48, v66);
  v83 = vqsubq_s16(v49, v67);
  v84 = vqaddq_s16(v50, v69);
  v85 = vqsubq_s16(v51, v68);
  v86 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v21.i8, 2), *(int16x4_t *)v78.i8, *(int16x4_t *)v21.i8, 1);
  v87 = vmlal_high_lane_s16(vmull_high_lane_s16(v79, *(int16x4_t *)v21.i8, 2), v78, *(int16x4_t *)v21.i8, 1);
  v88 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v21.i8, 1), *(int16x4_t *)v78.i8, *(int16x4_t *)v21.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v79, *(int16x4_t *)v21.i8, 1), v78, *(int16x4_t *)v21.i8, 0), 0xDuLL);
  v89 = vrshrn_high_n_s32(vrshrn_n_s32(v86, 0xDuLL), v87, 0xDuLL);
  v90 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v21, 4), *(int16x4_t *)v80.i8, v21, 5);
  v91 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v21, 4), v80, v21, 5);
  v92 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v21, 7), *(int16x4_t *)v80.i8, v21, 4);
  v93 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v21, 7), v80, v21, 4);
  v94 = vrshrn_high_n_s32(vrshrn_n_s32(v90, 0xDuLL), v91, 0xDuLL);
  v95 = vrshrn_high_n_s32(vrshrn_n_s32(v92, 0xDuLL), v93, 0xDuLL);
  v96 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v21.i8, 0), *(int16x4_t *)v83.i8, *(int16x4_t *)v21.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v82, *(int16x4_t *)v21.i8, 0), v83, *(int16x4_t *)v21.i8, 1), 0xDuLL);
  v97 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v21.i8, 3), *(int16x4_t *)v83.i8, *(int16x4_t *)v21.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v82, *(int16x4_t *)v21.i8, 3), v83, *(int16x4_t *)v21.i8, 0), 0xDuLL);
  v98 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v84.i8, v21, 4), *(int16x4_t *)v85.i8, v21, 5);
  v99 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v84, v21, 4), v85, v21, 5);
  v100 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v84.i8, v21, 7), *(int16x4_t *)v85.i8, v21, 4);
  v101 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v84, v21, 7), v85, v21, 4);
  v102 = vrshrn_high_n_s32(vrshrn_n_s32(v98, 0xDuLL), v99, 0xDuLL);
  v103 = vrshrn_high_n_s32(vrshrn_n_s32(v100, 0xDuLL), v101, 0xDuLL);
  v104 = vqaddq_s16(v70, v88);
  v105 = vqaddq_s16(v71, v89);
  v106 = vqaddq_s16(v72, v94);
  v107 = vqaddq_s16(v73, v95);
  v108 = vqaddq_s16(v74, v97);
  v109 = vqaddq_s16(v75, v96);
  v110 = vqaddq_s16(v76, v102);
  v111 = vqsubq_s16(v103, v77);
  v112 = vqsubq_s16(v70, v88);
  v113 = vqsubq_s16(v71, v89);
  v114 = vqsubq_s16(v72, v94);
  v115 = vqsubq_s16(v73, v95);
  v116 = vqsubq_s16(v74, v97);
  v117 = vqsubq_s16(v75, v96);
  v118 = vqsubq_s16(v76, v102);
  v119 = vqaddq_s16(v77, v103);
  v120 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v41.i8, 2), *(int16x4_t *)v104.i8, *(int16x4_t *)v41.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v41.i8, 2), v104, *(int16x4_t *)v41.i8, 1), 0xDuLL);
  a2[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v46.i8, 2), *(int16x4_t *)v110.i8, *(int16x4_t *)v46.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v111, *(int16x4_t *)v46.i8, 2), v110, *(int16x4_t *)v46.i8, 1), 0xDuLL);
  a2[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v46, 4), *(int16x4_t *)v112.i8, v46, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v46, 4), v112, v46, 5), 0xDuLL);
  a2[8] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v46, 7), *(int16x4_t *)v112.i8, v46, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v46, 7), v112, v46, 4), 0xDuLL);
  a2[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v46.i8, 1), *(int16x4_t *)v110.i8, *(int16x4_t *)v46.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v111, *(int16x4_t *)v46.i8, 1), v110, *(int16x4_t *)v46.i8, 0), 0xDuLL);
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v45.i8, 2), *(int16x4_t *)v108.i8, *(int16x4_t *)v45.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v109, *(int16x4_t *)v45.i8, 2), v108, *(int16x4_t *)v45.i8, 1), 0xDuLL);
  a2[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v45, 4), *(int16x4_t *)v114.i8, v45, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v45, 4), v114, v45, 5), 0xDuLL);
  a2[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v45, 7), *(int16x4_t *)v114.i8, v45, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v45, 7), v114, v45, 4), 0xDuLL);
  a2[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v108.i8, *(int16x4_t *)v45.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v109, *(int16x4_t *)v45.i8, 1), v108, *(int16x4_t *)v45.i8, 0), 0xDuLL);
  a2[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v42.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v42.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v42.i8, 2), v106, *(int16x4_t *)v42.i8, 1), 0xDuLL);
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v117.i8, v42, 4), *(int16x4_t *)v116.i8, v42, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v117, v42, 4), v116, v42, 5), 0xDuLL);
  a2[12] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v117.i8, v42, 7), *(int16x4_t *)v116.i8, v42, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v117, v42, 7), v116, v42, 4), 0xDuLL);
  a2[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v42.i8, 1), *(int16x4_t *)v106.i8, *(int16x4_t *)v42.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v42.i8, 1), v106, *(int16x4_t *)v42.i8, 0), 0xDuLL);
  a2[14] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v119.i8, v41, 5), *(int16x4_t *)v118.i8, v41, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v119, v41, 5), v118, v41, 4), 0xDuLL);
  a2[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v41.i8, 1), *(int16x4_t *)v104.i8, *(int16x4_t *)v41.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v41.i8, 1), v104, *(int16x4_t *)v41.i8, 0), 0xDuLL);
  result = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v119.i8, v41, 6), *(int16x4_t *)v118.i8, v41, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v119, v41, 6), v118, v41, 5), 0xDuLL);
  *a2 = v120;
  a2[1] = result;
  return result;
}

int16x8_t *fidentity8x16_col_neon(int16x8_t *result, uint64_t a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  _OWORD v20[16];
  uint64_t v21;

  v3 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v4 = *(int16x8_t *)((char *)result + 4 * a3);
  v5 = *(int16x8_t *)((char *)result + 6 * a3);
  v6 = *(int16x8_t *)((char *)result + 8 * a3);
  v7 = *(int16x8_t *)((char *)result + 10 * a3);
  v8 = *(int16x8_t *)((char *)result + 12 * a3);
  v9 = *(int16x8_t *)((char *)result + 14 * a3);
  v10 = result[a3];
  v11 = *(int16x8_t *)((char *)result + 18 * a3);
  v12 = *(int16x8_t *)((char *)result + 20 * a3);
  v13 = *(int16x8_t *)((char *)result + 22 * a3);
  v14 = *(int16x8_t *)((char *)result + 24 * a3);
  v15 = *(int16x8_t *)((char *)result + 26 * a3);
  v16 = *(int16x8_t *)((char *)result + 28 * a3);
  v17 = *(int16x8_t *)((char *)result + 30 * a3);
  v18 = vshlq_n_s16(*(int16x8_t *)((char *)result + 2 * a3), 2uLL);
  v20[0] = vshlq_n_s16(*result, 2uLL);
  v20[1] = v18;
  v20[2] = vshlq_n_s16(v4, 2uLL);
  v20[3] = vshlq_n_s16(v5, 2uLL);
  v20[4] = vshlq_n_s16(v6, 2uLL);
  v20[5] = vshlq_n_s16(v7, 2uLL);
  v20[6] = vshlq_n_s16(v8, 2uLL);
  v20[7] = vshlq_n_s16(v9, 2uLL);
  v20[8] = vshlq_n_s16(v10, 2uLL);
  v20[9] = vshlq_n_s16(v11, 2uLL);
  v20[10] = vshlq_n_s16(v12, 2uLL);
  v20[11] = vshlq_n_s16(v13, 2uLL);
  v20[12] = vshlq_n_s16(v14, 2uLL);
  v20[13] = vshlq_n_s16(v15, 2uLL);
  v20[14] = vshlq_n_s16(v16, 2uLL);
  v20[15] = vshlq_n_s16(v17, 2uLL);
  v19 = vdupq_n_s16(0x2D42u);
  do
  {
    *(int16x8_t *)(a2 + v3 * 16) = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)&v20[v3], *(int16x4_t *)v19.i8), 0xCuLL), vmull_high_s16((int16x8_t)v20[v3], v19), 0xCuLL);
    ++v3;
  }
  while (v3 != 16);
  return result;
}

int16x8_t *fdct8x16_row_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x4_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t *v100;
  int16x8_t v101;
  _OWORD v102[16];
  uint64_t v103;

  v4 = 0;
  v103 = *MEMORY[0x24BDAC8D0];
  v5 = result[1];
  v7 = result[14];
  v6 = result[15];
  v8 = vqaddq_s16(*result, v6);
  v9 = vqaddq_s16(v5, v7);
  v10 = result[2];
  v11 = result[3];
  v13 = result[12];
  v12 = result[13];
  v14 = vqaddq_s16(v10, v12);
  v15 = vqaddq_s16(v11, v13);
  v16 = result[4];
  v17 = result[5];
  v19 = result[10];
  v18 = result[11];
  v20 = vqaddq_s16(v16, v18);
  v21 = vqaddq_s16(v17, v19);
  v23 = result[6];
  v22 = result[7];
  v25 = result[8];
  v24 = result[9];
  v26 = vqaddq_s16(v23, v24);
  v27 = vqaddq_s16(v22, v25);
  v28 = vqsubq_s16(v22, v25);
  v29 = vqsubq_s16(v23, v24);
  v30 = vqsubq_s16(v17, v19);
  v31 = vqsubq_s16(v16, v18);
  v32 = vqsubq_s16(v11, v13);
  v33 = vqsubq_s16(v10, v12);
  v34 = vqsubq_s16(v5, v7);
  v35 = vqsubq_s16(*result, v6);
  v36 = vqaddq_s16(v8, v27);
  v37 = vqaddq_s16(v9, v26);
  v38 = vqaddq_s16(v14, v21);
  v39 = vqaddq_s16(v15, v20);
  v40 = vqsubq_s16(v15, v20);
  v41 = vqsubq_s16(v14, v21);
  v42 = vqsubq_s16(v9, v26);
  v43 = vqsubq_s16(v8, v27);
  v44 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v45 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v46 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v47 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v48 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 1), *(int16x4_t *)v33.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 1), v33, *v44, 0), 0xDuLL);
  v49 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 2), *(int16x4_t *)v33.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 2), v33, *v44, 1), 0xDuLL);
  v50 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 1), *(int16x4_t *)v32.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 1), v32, *v44, 0), 0xDuLL);
  v51 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 2), *(int16x4_t *)v32.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 2), v32, *v44, 1), 0xDuLL);
  v52 = vqaddq_s16(v36, v39);
  v53 = vqaddq_s16(v37, v38);
  v54 = vqsubq_s16(v37, v38);
  v55 = vqsubq_s16(v36, v39);
  v56 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 2), *(int16x4_t *)v42.i8, *v44, 1);
  v57 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 2), v42, *v44, 1);
  v58 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 1), *(int16x4_t *)v42.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 1), v42, *v44, 0), 0xDuLL);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(v56, 0xDuLL), v57, 0xDuLL);
  v60 = vqaddq_s16(v28, v51);
  v61 = vqaddq_s16(v29, v49);
  v62 = vqsubq_s16(v29, v49);
  v63 = vqsubq_s16(v28, v51);
  v64 = vqsubq_s16(v35, v50);
  v65 = vqsubq_s16(v34, v48);
  v66 = vqaddq_s16(v34, v48);
  v67 = vqaddq_s16(v35, v50);
  v68 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *v44, 1), *(int16x4_t *)v52.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v53, *v44, 1), v52, *v44, 0), 0xDuLL);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *v44, 2), *(int16x4_t *)v52.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v53, *v44, 2), v52, *v44, 1), 0xDuLL);
  v70 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v54.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v55.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v54, *(int16x8_t *)v44->i8, 5), v55, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v54.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v55.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v54, *(int16x8_t *)v44->i8, 6), v55, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v72 = vqaddq_s16(v40, v59);
  v73 = vqsubq_s16(v40, v59);
  v74 = vqsubq_s16(v43, v58);
  v75 = vqaddq_s16(v43, v58);
  v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v61.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v61, *(int16x8_t *)v44->i8, 5), v66, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v61.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v61, *(int16x8_t *)v44->i8, 6), v66, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v78 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v62.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 5);
  v79 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v62, *(int16x8_t *)v44->i8, 6), v65, *(int16x8_t *)v44->i8, 5);
  v80 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v62.i8, *(int16x8_t *)v44->i8, 7), *(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 6);
  v81 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v62, *(int16x8_t *)v44->i8, 7), v65, *(int16x8_t *)v44->i8, 6);
  v82 = vrshrn_high_n_s32(vrshrn_n_s32(v78, 0xDuLL), v79, 0xDuLL);
  v83 = vrshrn_high_n_s32(vrshrn_n_s32(v80, 0xDuLL), v81, 0xDuLL);
  v84 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v75.i8, *(int16x4_t *)v45.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v45.i8, 1), v75, *(int16x4_t *)v45.i8, 0), 0xDuLL);
  v85 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v45.i8, 2), *(int16x4_t *)v75.i8, *(int16x4_t *)v45.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v45.i8, 2), v75, *(int16x4_t *)v45.i8, 1), 0xDuLL);
  v86 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v73.i8, v45, 4), *(int16x4_t *)v74.i8, v45, 5);
  v87 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v73, v45, 4), v74, v45, 5);
  v88 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v73.i8, v45, 7), *(int16x4_t *)v74.i8, v45, 4);
  v89 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v73, v45, 7), v74, v45, 4);
  v90 = vrshrn_high_n_s32(vrshrn_n_s32(v86, 0xDuLL), v87, 0xDuLL);
  v91 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xDuLL), v89, 0xDuLL);
  v92 = vqaddq_s16(v60, v77);
  v93 = vqsubq_s16(v60, v77);
  v94 = vqsubq_s16(v63, v83);
  v95 = vqaddq_s16(v63, v83);
  v96 = vqaddq_s16(v64, v82);
  v97 = vqsubq_s16(v64, v82);
  v98 = vqsubq_s16(v67, v76);
  v99 = vqaddq_s16(v67, v76);
  v102[0] = v68;
  v102[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v46.i8, 1), *(int16x4_t *)v99.i8, *(int16x4_t *)v46.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v92, *(int16x4_t *)v46.i8, 1), v99, *(int16x4_t *)v46.i8, 0), 0xDuLL);
  v102[14] = v85;
  v102[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v46.i8, 2), *(int16x4_t *)v99.i8, *(int16x4_t *)v46.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v92, *(int16x4_t *)v46.i8, 2), v99, *(int16x4_t *)v46.i8, 1), 0xDuLL);
  v102[8] = v69;
  v102[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v47, 4), *(int16x4_t *)v98.i8, v47, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v93, v47, 4), v98, v47, 5), 0xDuLL);
  v102[6] = v91;
  v102[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v47, 7), *(int16x4_t *)v98.i8, v47, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v93, v47, 7), v98, v47, 4), 0xDuLL);
  v102[4] = v70;
  v102[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v47.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v47.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v94, *(int16x4_t *)v47.i8, 1), v97, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v102[10] = v90;
  v102[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v47.i8, 2), *(int16x4_t *)v97.i8, *(int16x4_t *)v47.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v94, *(int16x4_t *)v47.i8, 2), v97, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  v102[12] = v71;
  v102[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v46, 4), *(int16x4_t *)v96.i8, v46, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v46, 4), v96, v46, 5), 0xDuLL);
  v102[2] = v84;
  v102[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v46, 7), *(int16x4_t *)v96.i8, v46, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v46, 7), v96, v46, 4), 0xDuLL);
  v100 = a2 + 1;
  do
  {
    v101 = (int16x8_t)v102[v4];
    v100[-1] = vmovl_s16(*(int16x4_t *)v101.i8);
    *v100 = vmovl_high_s16(v101);
    ++v4;
    v100 = (int32x4_t *)((char *)v100 + 4 * a3);
  }
  while (v4 != 16);
  return result;
}

int16x8_t *fadst8x16_row_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int16x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int32x4_t *v116;
  int16x8_t v117;
  _OWORD v118[16];
  uint64_t v119;

  v4 = 0;
  v119 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v8 = result[6];
  v7 = result[7];
  v9 = result[8];
  v10 = result[9];
  v11 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v5, 3), *(int16x4_t *)v9.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v5, 3), v9, *v5, 0), 0xDuLL);
  v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v5, 2), *(int16x4_t *)v9.i8, *v5, 3), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v5, 2), v9, *v5, 3), 0xDuLL);
  v14 = result[10];
  v13 = result[11];
  v15 = result[4];
  v16 = result[5];
  v17 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v5, 1), *(int16x4_t *)v15.i8, *v5, 0);
  v18 = vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v5, 1), v15, *v5, 0);
  v19 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v5, 2), *(int16x4_t *)v15.i8, *v5, 1);
  v20 = vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v5, 2), v15, *v5, 1);
  v21 = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xDuLL), v18, 0xDuLL);
  v22 = vrshrn_high_n_s32(vrshrn_n_s32(v19, 0xDuLL), v20, 0xDuLL);
  v23 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v5, 1), *(int16x4_t *)v8.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v5, 1), v8, *v5, 0), 0xDuLL);
  v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v5, 2), *(int16x4_t *)v8.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v5, 2), v8, *v5, 1), 0xDuLL);
  v25 = vmlal_high_lane_s16(vmull_high_lane_s16(v16, *v5, 2), v14, *v5, 3);
  v26 = vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *v5, 2), *(int16x4_t *)v14.i8, *v5, 3), 0xDuLL);
  v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *v5, 3), *(int16x4_t *)v14.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v16, *v5, 3), v14, *v5, 0), 0xDuLL);
  v28 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v29 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v30 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v31 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v32 = vrshrn_high_n_s32(v26, v25, 0xDuLL);
  v33 = result[1];
  v34 = vqaddq_s16(*result, v11);
  v36 = result[14];
  v35 = result[15];
  v37 = vqsubq_s16(v12, v35);
  v38 = vqsubq_s16(*result, v11);
  v39 = vqaddq_s16(v35, v12);
  v41 = result[2];
  v40 = result[3];
  v42 = vqsubq_s16(v22, v40);
  v43 = result[12];
  v44 = result[13];
  v45 = vqaddq_s16(v43, v21);
  v46 = vqaddq_s16(v40, v22);
  v47 = vqsubq_s16(v43, v21);
  v48 = vqsubq_s16(v24, v33);
  v49 = vqaddq_s16(v36, v23);
  v50 = vqaddq_s16(v33, v24);
  v51 = vqsubq_s16(v36, v23);
  v52 = vqaddq_s16(v41, v27);
  v53 = vqsubq_s16(v32, v44);
  v54 = vqsubq_s16(v41, v27);
  v55 = vqaddq_s16(v44, v32);
  v56 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v45.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v42.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v45, *(int16x8_t *)v5->i8, 5), v42, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v57 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v45.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v42.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v45, *(int16x8_t *)v5->i8, 6), v42, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v58 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v46.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v47.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v46, *(int16x8_t *)v5->i8, 5), v47, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v46.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v47.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v46, *(int16x8_t *)v5->i8, 6), v47, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v60 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v52.i8, *(int16x8_t *)v5->i8, 4);
  v61 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v5->i8, 5), v52, *(int16x8_t *)v5->i8, 4);
  v62 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v52.i8, *(int16x8_t *)v5->i8, 5);
  v63 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v5->i8, 6), v52, *(int16x8_t *)v5->i8, 5);
  v64 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xDuLL), v61, 0xDuLL);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(v62, 0xDuLL), v63, 0xDuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v5->i8, 7), *(int16x4_t *)v54.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v5->i8, 7), v54, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v67 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v54.i8, *(int16x8_t *)v5->i8, 7), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v5->i8, 6), v54, *(int16x8_t *)v5->i8, 7), 0xDuLL);
  v68 = vqaddq_s16(v34, v56);
  v69 = vqaddq_s16(v37, v57);
  v70 = vqaddq_s16(v38, v58);
  v71 = vqsubq_s16(v59, v39);
  v72 = vqsubq_s16(v34, v56);
  v73 = vqsubq_s16(v37, v57);
  v74 = vqsubq_s16(v38, v58);
  v75 = vqaddq_s16(v39, v59);
  v76 = vqaddq_s16(v48, v64);
  v77 = vqaddq_s16(v49, v65);
  v78 = vqsubq_s16(v67, v50);
  v79 = vqaddq_s16(v51, v66);
  v80 = vqsubq_s16(v48, v64);
  v81 = vqsubq_s16(v49, v65);
  v82 = vqaddq_s16(v50, v67);
  v83 = vqsubq_s16(v51, v66);
  v84 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v76.i8, *(int16x4_t *)v6.i8, 0);
  v85 = vmlal_high_lane_s16(vmull_high_lane_s16(v77, *(int16x4_t *)v6.i8, 1), v76, *(int16x4_t *)v6.i8, 0);
  v86 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v6.i8, 1);
  v87 = vmlal_high_lane_s16(vmull_high_lane_s16(v77, *(int16x4_t *)v6.i8, 2), v76, *(int16x4_t *)v6.i8, 1);
  v88 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xDuLL), v85, 0xDuLL);
  v89 = vrshrn_high_n_s32(vrshrn_n_s32(v86, 0xDuLL), v87, 0xDuLL);
  v90 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v6, 4), *(int16x4_t *)v78.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v6, 4), v78, v6, 5), 0xDuLL);
  v91 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v6, 7), *(int16x4_t *)v78.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v6, 7), v78, v6, 4), 0xDuLL);
  v92 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v6.i8, 0), *(int16x4_t *)v81.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v80, *(int16x4_t *)v6.i8, 0), v81, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v93 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v6.i8, 3), *(int16x4_t *)v81.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v80, *(int16x4_t *)v6.i8, 3), v81, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v94 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v6, 4), *(int16x4_t *)v83.i8, v6, 5);
  v95 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v6, 4), v83, v6, 5);
  v96 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v6, 7), *(int16x4_t *)v83.i8, v6, 4);
  v97 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v6, 7), v83, v6, 4);
  v98 = vrshrn_high_n_s32(vrshrn_n_s32(v94, 0xDuLL), v95, 0xDuLL);
  v99 = vrshrn_high_n_s32(vrshrn_n_s32(v96, 0xDuLL), v97, 0xDuLL);
  v100 = vqaddq_s16(v68, v88);
  v101 = vqaddq_s16(v69, v89);
  v102 = vqaddq_s16(v70, v90);
  v103 = vqaddq_s16(v71, v91);
  v104 = vqaddq_s16(v72, v93);
  v105 = vqaddq_s16(v73, v92);
  v106 = vqaddq_s16(v74, v98);
  v107 = vqsubq_s16(v99, v75);
  v108 = vqsubq_s16(v68, v88);
  v109 = vqsubq_s16(v69, v89);
  v110 = vqsubq_s16(v70, v90);
  v111 = vqsubq_s16(v71, v91);
  v112 = vqsubq_s16(v72, v93);
  v113 = vqsubq_s16(v73, v92);
  v114 = vqsubq_s16(v74, v98);
  v115 = vqaddq_s16(v75, v99);
  v118[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v31.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v31.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v31.i8, 2), v106, *(int16x4_t *)v31.i8, 1), 0xDuLL);
  v118[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v109.i8, v31, 4), *(int16x4_t *)v108.i8, v31, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v109, v31, 4), v108, v31, 5), 0xDuLL);
  v118[8] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v109.i8, v31, 7), *(int16x4_t *)v108.i8, v31, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v109, v31, 7), v108, v31, 4), 0xDuLL);
  v118[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v31.i8, 1), *(int16x4_t *)v106.i8, *(int16x4_t *)v31.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v31.i8, 1), v106, *(int16x4_t *)v31.i8, 0), 0xDuLL);
  v118[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v30.i8, 2), *(int16x4_t *)v104.i8, *(int16x4_t *)v30.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v30.i8, 2), v104, *(int16x4_t *)v30.i8, 1), 0xDuLL);
  v118[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v111.i8, v30, 4), *(int16x4_t *)v110.i8, v30, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v111, v30, 4), v110, v30, 5), 0xDuLL);
  v118[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v111.i8, v30, 7), *(int16x4_t *)v110.i8, v30, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v111, v30, 7), v110, v30, 4), 0xDuLL);
  v118[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v30.i8, 1), *(int16x4_t *)v104.i8, *(int16x4_t *)v30.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v30.i8, 1), v104, *(int16x4_t *)v30.i8, 0), 0xDuLL);
  v118[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v29.i8, 2), *(int16x4_t *)v102.i8, *(int16x4_t *)v29.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v103, *(int16x4_t *)v29.i8, 2), v102, *(int16x4_t *)v29.i8, 1), 0xDuLL);
  v118[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v29, 4), *(int16x4_t *)v112.i8, v29, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v29, 4), v112, v29, 5), 0xDuLL);
  v118[12] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v29, 7), *(int16x4_t *)v112.i8, v29, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v29, 7), v112, v29, 4), 0xDuLL);
  v118[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v102.i8, *(int16x4_t *)v29.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v103, *(int16x4_t *)v29.i8, 1), v102, *(int16x4_t *)v29.i8, 0), 0xDuLL);
  v118[14] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v28, 5), *(int16x4_t *)v114.i8, v28, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v28, 5), v114, v28, 4), 0xDuLL);
  v118[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v100.i8, *(int16x4_t *)v28.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)v28.i8, 1), v100, *(int16x4_t *)v28.i8, 0), 0xDuLL);
  v118[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v28.i8, 2), *(int16x4_t *)v100.i8, *(int16x4_t *)v28.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)v28.i8, 2), v100, *(int16x4_t *)v28.i8, 1), 0xDuLL);
  v118[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v28, 6), *(int16x4_t *)v114.i8, v28, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v28, 6), v114, v28, 5), 0xDuLL);
  v116 = a2 + 1;
  do
  {
    v117 = (int16x8_t)v118[v4];
    v116[-1] = vmovl_s16(*(int16x4_t *)v117.i8);
    *v116 = vmovl_high_s16(v117);
    ++v4;
    v116 = (int32x4_t *)((char *)v116 + 4 * a3);
  }
  while (v4 != 16);
  return result;
}

int32x4_t fidentity8x16_row_neon(uint64_t a1, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  uint64_t v5;
  int32x4_t *v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t result;
  _BYTE v10[264];
  uint64_t v11;

  v3 = 0;
  v11 = *MEMORY[0x24BDAC8D0];
  v4 = vdupq_n_s16(0x2D42u);
  do
  {
    *(int16x8_t *)&v10[v3] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)(a1 + v3), *(int16x4_t *)v4.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)(a1 + v3), v4), 0xCuLL);
    v3 += 16;
  }
  while (v3 != 256);
  v5 = 0;
  v6 = a2 + 1;
  do
  {
    v7 = *(int16x8_t *)&v10[v5];
    v8 = vmovl_s16(*(int16x4_t *)v7.i8);
    result = vmovl_high_s16(v7);
    v6[-1] = v8;
    *v6 = result;
    v5 += 16;
    v6 = (int32x4_t *)((char *)v6 + 4 * a3);
  }
  while (v5 != 256);
  return result;
}

int16x8_t fdct8x32_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int16x8_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t result;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int16x8_t v258;
  int32x4_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int32x4_t v263;
  int16x8_t v264;
  int32x4_t v265;
  int16x8_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int16x8_t v293;
  int32x4_t v294;
  int16x8_t v295;
  int32x4_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int16x8_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int32x4_t v304;
  int16x8_t v305;
  int32x4_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int16x8_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int16x8_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int16x8_t v327;
  int32x4_t v328;
  int16x8_t v329;
  int32x4_t v330;

  v307 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v4 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v324 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
  v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
  v9 = vshlq_n_s16(a1[a3], 2uLL);
  v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 18 * a3), 2uLL);
  v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 20 * a3), 2uLL);
  v12 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 22 * a3), 2uLL);
  v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 24 * a3), 2uLL);
  v14 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 26 * a3), 2uLL);
  v293 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 34 * a3), 2uLL);
  v295 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 28 * a3), 2uLL);
  v15 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 36 * a3), 2uLL);
  v16 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 38 * a3), 2uLL);
  v17 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 40 * a3), 2uLL);
  v18 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 42 * a3), 2uLL);
  v19 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 44 * a3), 2uLL);
  v20 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 46 * a3), 2uLL);
  v21 = vshlq_n_s16(a1[3 * a3], 2uLL);
  v22 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 50 * a3), 2uLL);
  v23 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 52 * a3), 2uLL);
  v24 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 54 * a3), 2uLL);
  v25 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 56 * a3), 2uLL);
  v26 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 58 * a3), 2uLL);
  v305 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 60 * a3), 2uLL);
  v27 = vqaddq_s16(v307, v305);
  v28 = vqaddq_s16(v4, v26);
  v29 = v4;
  v30 = vqaddq_s16(v5, v25);
  v31 = v5;
  v32 = vqaddq_s16(v14, v15);
  v316 = vqsubq_s16(v14, v15);
  v33 = vqaddq_s16(v13, v16);
  v34 = vqsubq_s16(v13, v16);
  v35 = vqaddq_s16(v12, v17);
  v36 = vqsubq_s16(v12, v17);
  v37 = vqaddq_s16(v11, v18);
  v38 = vqsubq_s16(v11, v18);
  v39 = vqaddq_s16(v10, v19);
  v40 = vqsubq_s16(v10, v19);
  v41 = vqsubq_s16(v9, v20);
  v327 = vqaddq_s16(v8, v21);
  v329 = vqaddq_s16(v9, v20);
  v42 = vqsubq_s16(v8, v21);
  v43 = vqaddq_s16(v7, v22);
  v44 = vqsubq_s16(v7, v22);
  v45 = vqaddq_s16(v6, v23);
  v46 = vqsubq_s16(v6, v23);
  v47 = vqaddq_s16(v324, v24);
  v48 = vqsubq_s16(v324, v24);
  v49 = vqaddq_s16(v295, v293);
  v50 = vqsubq_s16(v31, v25);
  v51 = vqsubq_s16(v29, v26);
  v52 = vqaddq_s16(v27, v49);
  v53 = vqaddq_s16(v43, v39);
  v54 = vqsubq_s16(v43, v39);
  v55 = vqaddq_s16(v45, v37);
  v56 = vqsubq_s16(v45, v37);
  v258 = vqaddq_s16(v47, v35);
  v57 = vqsubq_s16(v47, v35);
  v262 = vqaddq_s16(v30, v33);
  v58 = vqsubq_s16(v30, v33);
  v59 = vqaddq_s16(v28, v32);
  v60 = vqsubq_s16(v28, v32);
  v61 = vqsubq_s16(v27, v49);
  v63 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v62 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v64 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v48.i8, *(int16x4_t *)v63.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v63.i8, 1), v48, *(int16x4_t *)v63.i8, 0), 0xDuLL);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v48.i8, *(int16x4_t *)v63.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v63.i8, 2), v48, *(int16x4_t *)v63.i8, 1), 0xDuLL);
  v66 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v46.i8, *(int16x4_t *)v63.i8, 1);
  v67 = vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v63.i8, 2), v46, *(int16x4_t *)v63.i8, 1);
  v68 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v46.i8, *(int16x4_t *)v63.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v63.i8, 1), v46, *(int16x4_t *)v63.i8, 0), 0xDuLL);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(v66, 0xDuLL), v67, 0xDuLL);
  v291 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v44.i8, *(int16x4_t *)v63.i8, 0);
  v289 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v63.i8, 1), v44, *(int16x4_t *)v63.i8, 0);
  v287 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v44.i8, *(int16x4_t *)v63.i8, 1);
  v285 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v63.i8, 2), v44, *(int16x4_t *)v63.i8, 1);
  v325 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v42.i8, *(int16x4_t *)v63.i8, 0);
  v322 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v63.i8, 1), v42, *(int16x4_t *)v63.i8, 0);
  v320 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v42.i8, *(int16x4_t *)v63.i8, 1);
  v318 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *(int16x4_t *)v63.i8, 2), v42, *(int16x4_t *)v63.i8, 1);
  v70 = vqaddq_s16(v59, v55);
  v71 = vqsubq_s16(v59, v55);
  v72 = vqaddq_s16(v52, v53);
  v73 = vqsubq_s16(v52, v53);
  v74 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v60.i8, *(int16x4_t *)v63.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v63.i8, 1), v60, *(int16x4_t *)v63.i8, 0), 0xDuLL);
  v75 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v60.i8, *(int16x4_t *)v63.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v63.i8, 2), v60, *(int16x4_t *)v63.i8, 1), 0xDuLL);
  v283 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v58.i8, *(int16x4_t *)v63.i8, 0);
  v277 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v63.i8, 1), v58, *(int16x4_t *)v63.i8, 0);
  v274 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v58.i8, *(int16x4_t *)v63.i8, 1);
  v272 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v63.i8, 2), v58, *(int16x4_t *)v63.i8, 1);
  v76 = vqaddq_s16(v34, v65);
  v77 = vqsubq_s16(v34, v65);
  v78 = vqaddq_s16(v316, v69);
  v79 = vqsubq_s16(v316, v69);
  v80 = vqsubq_s16(v50, v64);
  v81 = vqaddq_s16(v50, v64);
  v82 = vqsubq_s16(v51, v68);
  v83 = vqaddq_s16(v51, v68);
  v84 = vqaddq_s16(v72, v70);
  v85 = vqsubq_s16(v72, v70);
  v297 = vshlq_n_s16(a1[2 * a3], 2uLL);
  v299 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 30 * a3), 2uLL);
  v301 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 62 * a3), 2uLL);
  v303 = vshlq_n_s16(*a1, 2uLL);
  v264 = vqaddq_s16(v299, v297);
  v266 = vqaddq_s16(v303, v301);
  v260 = vqaddq_s16(v266, v264);
  v86 = vqaddq_s16(v327, v329);
  v87 = vqaddq_s16(v260, v86);
  v88 = vqaddq_s16(v262, v258);
  v89 = vqaddq_s16(v87, v88);
  v90 = vqsubq_s16(v87, v88);
  v91 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v73.i8, *(int16x4_t *)v63.i8, 0);
  v92 = vmlal_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v63.i8, 1), v73, *(int16x4_t *)v63.i8, 0);
  v93 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v73.i8, *(int16x4_t *)v63.i8, 1);
  v94 = vmlal_high_lane_s16(vmull_high_lane_s16(v71, *(int16x4_t *)v63.i8, 2), v73, *(int16x4_t *)v63.i8, 1);
  v95 = vqaddq_s16(v54, v75);
  v96 = vqsubq_s16(v54, v75);
  v97 = vqsubq_s16(v61, v74);
  v98 = vqaddq_s16(v61, v74);
  v99 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v78.i8, v63, 5), *(int16x4_t *)v83.i8, v63, 4);
  v100 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v78, v63, 5), v83, v63, 4);
  v101 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v78.i8, v63, 6), *(int16x4_t *)v83.i8, v63, 5);
  v102 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v78, v63, 6), v83, v63, 5);
  v280 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v76, v63, 5), v81, v63, 4);
  v281 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v76.i8, v63, 5), *(int16x4_t *)v81.i8, v63, 4);
  v279 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v76.i8, v63, 6), *(int16x4_t *)v81.i8, v63, 5);
  v276 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v76, v63, 6), v81, v63, 5);
  v270 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v77, v63, 6), v80, v63, 5);
  v271 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v77.i8, v63, 6), *(int16x4_t *)v80.i8, v63, 5);
  v268 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v77, v63, 7), v80, v63, 6);
  v269 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v77.i8, v63, 7), *(int16x4_t *)v80.i8, v63, 6);
  v103 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v63, 6), *(int16x4_t *)v82.i8, v63, 5);
  v104 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v63, 6), v82, v63, 5);
  v105 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v63, 7), *(int16x4_t *)v82.i8, v63, 6);
  v106 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v63, 7), v82, v63, 6);
  v315 = vmlal_high_lane_s16(vmull_high_lane_s16(v84, *(int16x4_t *)v63.i8, 1), v89, *(int16x4_t *)v63.i8, 0);
  v317 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v89.i8, *(int16x4_t *)v63.i8, 0);
  v313 = vmlal_high_lane_s16(vmull_high_lane_s16(v84, *(int16x4_t *)v63.i8, 2), v89, *(int16x4_t *)v63.i8, 1);
  v314 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v89.i8, *(int16x4_t *)v63.i8, 1);
  v311 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v85, v63, 5), v90, v63, 4);
  v312 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v85.i8, v63, 5), *(int16x4_t *)v90.i8, v63, 4);
  v309 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v85, v63, 6), v90, v63, 5);
  v310 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v85.i8, v63, 6), *(int16x4_t *)v90.i8, v63, 5);
  v107 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v63, 5), *(int16x4_t *)v98.i8, v63, 4);
  v108 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v63, 5), v98, v63, 4);
  v109 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v63, 6), *(int16x4_t *)v98.i8, v63, 5);
  v110 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v63, 6), v98, v63, 5);
  v111 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v96.i8, v63, 6), *(int16x4_t *)v97.i8, v63, 5);
  v112 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v96, v63, 6), v97, v63, 5);
  v113 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v96.i8, v63, 7), *(int16x4_t *)v97.i8, v63, 6);
  v114 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v96, v63, 7), v97, v63, 6);
  v115 = vqsubq_s16(v295, v293);
  v116 = vqsubq_s16(v307, v305);
  v117 = vrshrn_high_n_s32(vrshrn_n_s32(v291, 0xDuLL), v289, 0xDuLL);
  v118 = vrshrn_high_n_s32(vrshrn_n_s32(v287, 0xDuLL), v285, 0xDuLL);
  v119 = vqsubq_s16(v262, v258);
  v120 = vqsubq_s16(v260, v86);
  v121 = vqaddq_s16(v115, v118);
  v122 = vqsubq_s16(v115, v118);
  v123 = vqsubq_s16(v116, v117);
  v124 = vqaddq_s16(v116, v117);
  v125 = vrshrn_high_n_s32(vrshrn_n_s32(v91, 0xDuLL), v92, 0xDuLL);
  v126 = vrshrn_high_n_s32(vrshrn_n_s32(v93, 0xDuLL), v94, 0xDuLL);
  v127 = vrshrn_high_n_s32(vrshrn_n_s32(v99, 0xDuLL), v100, 0xDuLL);
  v128 = vrshrn_high_n_s32(vrshrn_n_s32(v101, 0xDuLL), v102, 0xDuLL);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(v103, 0xDuLL), v104, 0xDuLL);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(v105, 0xDuLL), v106, 0xDuLL);
  v131 = vqaddq_s16(v119, v126);
  v132 = vqsubq_s16(v119, v126);
  v133 = vqsubq_s16(v120, v125);
  v134 = vqaddq_s16(v120, v125);
  v135 = vqaddq_s16(v121, v128);
  v136 = vqsubq_s16(v121, v128);
  v137 = vqsubq_s16(v122, v130);
  v138 = vqaddq_s16(v122, v130);
  v139 = vqaddq_s16(v123, v129);
  v140 = vqsubq_s16(v123, v129);
  v141 = vqsubq_s16(v124, v127);
  v142 = vqaddq_s16(v124, v127);
  v294 = vmlal_high_lane_s16(vmull_high_lane_s16(v131, *(int16x4_t *)v62.i8, 1), v134, *(int16x4_t *)v62.i8, 0);
  v296 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v62.i8, 1), *(int16x4_t *)v134.i8, *(int16x4_t *)v62.i8, 0);
  v306 = vmlal_high_lane_s16(vmull_high_lane_s16(v131, *(int16x4_t *)v62.i8, 2), v134, *(int16x4_t *)v62.i8, 1);
  v308 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v62.i8, 2), *(int16x4_t *)v134.i8, *(int16x4_t *)v62.i8, 1);
  v290 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v132, v62, 4), v133, v62, 5);
  v292 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v132.i8, v62, 4), *(int16x4_t *)v133.i8, v62, 5);
  v286 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v132, v62, 7), v133, v62, 4);
  v288 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v132.i8, v62, 7), *(int16x4_t *)v133.i8, v62, 4);
  v143 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v62.i8, 1), *(int16x4_t *)v142.i8, *(int16x4_t *)v62.i8, 0);
  v144 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v62.i8, 1), v142, *(int16x4_t *)v62.i8, 0);
  v261 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v62.i8, 2), v142, *(int16x4_t *)v62.i8, 1);
  v263 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v62.i8, 2), *(int16x4_t *)v142.i8, *(int16x4_t *)v62.i8, 1);
  v145 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v62.i8, 2), *(int16x4_t *)v141.i8, *(int16x4_t *)v62.i8, 1);
  v146 = vmlal_high_lane_s16(vmull_high_lane_s16(v136, *(int16x4_t *)v62.i8, 2), v141, *(int16x4_t *)v62.i8, 1);
  v147 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v62.i8, 3), *(int16x4_t *)v141.i8, *(int16x4_t *)v62.i8, 2);
  v148 = vmlal_high_lane_s16(vmull_high_lane_s16(v136, *(int16x4_t *)v62.i8, 3), v141, *(int16x4_t *)v62.i8, 2);
  v149 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v137.i8, v62, 4), *(int16x4_t *)v140.i8, v62, 5);
  v150 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v137, v62, 4), v140, v62, 5);
  v151 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v137.i8, v62, 7), *(int16x4_t *)v140.i8, v62, 4);
  v152 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v137, v62, 7), v140, v62, 4);
  v259 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v138.i8, v62, 7), *(int16x4_t *)v139.i8, v62, 4);
  v257 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v138, v62, 7), v139, v62, 4);
  v255 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v138, v62, 6), v139, v62, 7);
  v256 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v138.i8, v62, 6), *(int16x4_t *)v139.i8, v62, 7);
  v153 = vqsubq_s16(v327, v329);
  v154 = vqsubq_s16(v266, v264);
  v155 = vrshrn_high_n_s32(vrshrn_n_s32(v283, 0xDuLL), v277, 0xDuLL);
  v156 = vrshrn_high_n_s32(vrshrn_n_s32(v274, 0xDuLL), v272, 0xDuLL);
  v157 = vqaddq_s16(v153, v156);
  v158 = vqsubq_s16(v153, v156);
  v159 = vqsubq_s16(v154, v155);
  v160 = vqaddq_s16(v154, v155);
  v161 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xDuLL), v108, 0xDuLL);
  v162 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xDuLL), v110, 0xDuLL);
  v163 = vrshrn_high_n_s32(vrshrn_n_s32(v111, 0xDuLL), v112, 0xDuLL);
  v164 = vrshrn_high_n_s32(vrshrn_n_s32(v113, 0xDuLL), v114, 0xDuLL);
  v165 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v166 = vqsubq_s16(v157, v162);
  v167 = vmull_laneq_s16(*(int16x4_t *)v166.i8, v165, 4);
  v168 = vmull_high_laneq_s16(v166, v165, 4);
  v169 = vmull_laneq_s16(*(int16x4_t *)v166.i8, v165, 7);
  v170 = vmull_high_laneq_s16(v166, v165, 7);
  v171 = vqsubq_s16(v160, v161);
  v328 = vmlal_high_laneq_s16(v168, v171, v165, 5);
  v330 = vmlal_laneq_s16(v167, *(int16x4_t *)v171.i8, v165, 5);
  v265 = vmlal_high_laneq_s16(v170, v171, v165, 4);
  v267 = vmlal_laneq_s16(v169, *(int16x4_t *)v171.i8, v165, 4);
  v172 = vqsubq_s16(v158, v164);
  v173 = vqsubq_s16(v159, v163);
  v275 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v165.i8, 1), *(int16x4_t *)v173.i8, *(int16x4_t *)v165.i8, 0);
  v273 = vmlal_high_lane_s16(vmull_high_lane_s16(v172, *(int16x4_t *)v165.i8, 1), v173, *(int16x4_t *)v165.i8, 0);
  v253 = vmlal_high_lane_s16(vmull_high_lane_s16(v172, *(int16x4_t *)v165.i8, 2), v173, *(int16x4_t *)v165.i8, 1);
  v254 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v165.i8, 2), *(int16x4_t *)v173.i8, *(int16x4_t *)v165.i8, 1);
  v174 = vqaddq_s16(v157, v162);
  v175 = vqaddq_s16(v158, v164);
  v176 = vqaddq_s16(v159, v163);
  v177 = vqaddq_s16(v160, v161);
  v178 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v284 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v178.i8, 1), *(int16x4_t *)v177.i8, *(int16x4_t *)v178.i8, 0);
  v278 = vmlal_high_lane_s16(vmull_high_lane_s16(v174, *(int16x4_t *)v178.i8, 1), v177, *(int16x4_t *)v178.i8, 0);
  v247 = vmlal_high_lane_s16(vmull_high_lane_s16(v174, *(int16x4_t *)v178.i8, 2), v177, *(int16x4_t *)v178.i8, 1);
  v248 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v178.i8, 2), *(int16x4_t *)v177.i8, *(int16x4_t *)v178.i8, 1);
  v252 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v175.i8, v178, 4), *(int16x4_t *)v176.i8, v178, 5);
  v251 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v175, v178, 4), v176, v178, 5);
  v250 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v175.i8, v178, 7), *(int16x4_t *)v176.i8, v178, 4);
  v249 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v175, v178, 7), v176, v178, 4);
  v179 = vqsubq_s16(v299, v297);
  v180 = vqsubq_s16(v303, v301);
  v181 = vrshrn_high_n_s32(vrshrn_n_s32(v325, 0xDuLL), v322, 0xDuLL);
  v182 = vrshrn_high_n_s32(vrshrn_n_s32(v320, 0xDuLL), v318, 0xDuLL);
  v183 = vqaddq_s16(v179, v182);
  v184 = vqsubq_s16(v179, v182);
  v185 = vqsubq_s16(v180, v181);
  v186 = vqaddq_s16(v180, v181);
  v187 = vrshrn_high_n_s32(vrshrn_n_s32(v281, 0xDuLL), v280, 0xDuLL);
  v188 = vrshrn_high_n_s32(vrshrn_n_s32(v279, 0xDuLL), v276, 0xDuLL);
  v189 = vrshrn_high_n_s32(vrshrn_n_s32(v271, 0xDuLL), v270, 0xDuLL);
  v190 = vrshrn_high_n_s32(vrshrn_n_s32(v269, 0xDuLL), v268, 0xDuLL);
  v191 = vrshrn_high_n_s32(vrshrn_n_s32(v145, 0xDuLL), v146, 0xDuLL);
  v192 = vrshrn_high_n_s32(vrshrn_n_s32(v147, 0xDuLL), v148, 0xDuLL);
  v193 = vrshrn_high_n_s32(vrshrn_n_s32(v149, 0xDuLL), v150, 0xDuLL);
  v194 = vrshrn_high_n_s32(vrshrn_n_s32(v151, 0xDuLL), v152, 0xDuLL);
  v195 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v196 = vqsubq_s16(v183, v188);
  v197 = vqaddq_s16(v196, v192);
  v198 = vqsubq_s16(v186, v187);
  v199 = vqaddq_s16(v198, v191);
  v319 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v197, v195, 4), v199, v195, 5);
  v321 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v197.i8, v195, 4), *(int16x4_t *)v199.i8, v195, 5);
  v323 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v197, v195, 7), v199, v195, 4);
  v326 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v197.i8, v195, 7), *(int16x4_t *)v199.i8, v195, 4);
  v200 = vqsubq_s16(v184, v190);
  v201 = vqsubq_s16(v185, v189);
  v202 = vqaddq_s16(v200, v194);
  v203 = vqaddq_s16(v201, v193);
  v304 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v195.i8, 1), *(int16x4_t *)v203.i8, *(int16x4_t *)v195.i8, 0);
  v302 = vmlal_high_lane_s16(vmull_high_lane_s16(v202, *(int16x4_t *)v195.i8, 1), v203, *(int16x4_t *)v195.i8, 0);
  v298 = vmlal_high_lane_s16(vmull_high_lane_s16(v202, *(int16x4_t *)v195.i8, 2), v203, *(int16x4_t *)v195.i8, 1);
  v300 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v195.i8, 2), *(int16x4_t *)v203.i8, *(int16x4_t *)v195.i8, 1);
  v204 = vqsubq_s16(v196, v192);
  v205 = vqsubq_s16(v200, v194);
  v206 = vqsubq_s16(v201, v193);
  v207 = vqsubq_s16(v198, v191);
  v209 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v208 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v210 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v209.i8, 1), *(int16x4_t *)v207.i8, *(int16x4_t *)v209.i8, 0);
  v211 = vmlal_high_lane_s16(vmull_high_lane_s16(v204, *(int16x4_t *)v209.i8, 1), v207, *(int16x4_t *)v209.i8, 0);
  v212 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v204.i8, *(int16x4_t *)v209.i8, 2), *(int16x4_t *)v207.i8, *(int16x4_t *)v209.i8, 1);
  v213 = vmlal_high_lane_s16(vmull_high_lane_s16(v204, *(int16x4_t *)v209.i8, 2), v207, *(int16x4_t *)v209.i8, 1);
  v282 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v205.i8, v209, 4), *(int16x4_t *)v206.i8, v209, 5);
  v214 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v205, v209, 4), v206, v209, 5);
  v215 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v205.i8, v209, 7), *(int16x4_t *)v206.i8, v209, 4);
  v216 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v205, v209, 7), v206, v209, 4);
  v217 = vqaddq_s16(v183, v188);
  v218 = vqaddq_s16(v184, v190);
  v219 = vqaddq_s16(v185, v189);
  v220 = vqaddq_s16(v186, v187);
  v221 = vrshrn_high_n_s32(vrshrn_n_s32(v143, 0xDuLL), v144, 0xDuLL);
  v222 = vrshrn_high_n_s32(vrshrn_n_s32(v263, 0xDuLL), v261, 0xDuLL);
  v223 = vrshrn_high_n_s32(vrshrn_n_s32(v259, 0xDuLL), v257, 0xDuLL);
  v224 = vrshrn_high_n_s32(vrshrn_n_s32(v256, 0xDuLL), v255, 0xDuLL);
  v225 = vqsubq_s16(v217, v222);
  v226 = vmull_laneq_s16(*(int16x4_t *)v225.i8, v208, 4);
  v227 = vmull_high_laneq_s16(v225, v208, 4);
  v228 = vmull_laneq_s16(*(int16x4_t *)v225.i8, v208, 7);
  v229 = vmull_high_laneq_s16(v225, v208, 7);
  v230 = vqsubq_s16(v220, v221);
  v231 = vmlal_laneq_s16(v226, *(int16x4_t *)v230.i8, v208, 5);
  v232 = vmlal_high_laneq_s16(v227, v230, v208, 5);
  v233 = vmlal_laneq_s16(v228, *(int16x4_t *)v230.i8, v208, 4);
  v234 = vmlal_high_laneq_s16(v229, v230, v208, 4);
  v235 = vqsubq_s16(v218, v224);
  v236 = vqsubq_s16(v219, v223);
  v237 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v208.i8, 1), *(int16x4_t *)v236.i8, *(int16x4_t *)v208.i8, 0);
  v238 = vmlal_high_lane_s16(vmull_high_lane_s16(v235, *(int16x4_t *)v208.i8, 1), v236, *(int16x4_t *)v208.i8, 0);
  v239 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v235.i8, *(int16x4_t *)v208.i8, 2), *(int16x4_t *)v236.i8, *(int16x4_t *)v208.i8, 1);
  v240 = vmlal_high_lane_s16(vmull_high_lane_s16(v235, *(int16x4_t *)v208.i8, 2), v236, *(int16x4_t *)v208.i8, 1);
  v241 = vqaddq_s16(v217, v222);
  v242 = vqaddq_s16(v218, v224);
  v243 = vqaddq_s16(v219, v223);
  v244 = vqaddq_s16(v220, v221);
  v245 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  *a2 = vrshrn_high_n_s32(vrshrn_n_s32(v317, 0xDuLL), v315, 0xDuLL);
  a2[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v241.i8, *(int16x4_t *)v245.i8, 1), *(int16x4_t *)v244.i8, *(int16x4_t *)v245.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v241, *(int16x4_t *)v245.i8, 1), v244, *(int16x4_t *)v245.i8, 0), 0xDuLL);
  a2[30] = vrshrn_high_n_s32(vrshrn_n_s32(v248, 0xDuLL), v247, 0xDuLL);
  a2[31] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v241.i8, *(int16x4_t *)v245.i8, 2), *(int16x4_t *)v244.i8, *(int16x4_t *)v245.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v241, *(int16x4_t *)v245.i8, 2), v244, *(int16x4_t *)v245.i8, 1), 0xDuLL);
  a2[16] = vrshrn_high_n_s32(vrshrn_n_s32(v314, 0xDuLL), v313, 0xDuLL);
  a2[17] = vrshrn_high_n_s32(vrshrn_n_s32(v231, 0xDuLL), v232, 0xDuLL);
  a2[14] = vrshrn_high_n_s32(vrshrn_n_s32(v267, 0xDuLL), v265, 0xDuLL);
  a2[15] = vrshrn_high_n_s32(vrshrn_n_s32(v233, 0xDuLL), v234, 0xDuLL);
  a2[8] = vrshrn_high_n_s32(vrshrn_n_s32(v312, 0xDuLL), v311, 0xDuLL);
  a2[9] = vrshrn_high_n_s32(vrshrn_n_s32(v210, 0xDuLL), v211, 0xDuLL);
  a2[22] = vrshrn_high_n_s32(vrshrn_n_s32(v254, 0xDuLL), v253, 0xDuLL);
  a2[23] = vrshrn_high_n_s32(vrshrn_n_s32(v212, 0xDuLL), v213, 0xDuLL);
  a2[24] = vrshrn_high_n_s32(vrshrn_n_s32(v310, 0xDuLL), v309, 0xDuLL);
  a2[25] = vrshrn_high_n_s32(vrshrn_n_s32(v321, 0xDuLL), v319, 0xDuLL);
  a2[6] = vrshrn_high_n_s32(vrshrn_n_s32(v250, 0xDuLL), v249, 0xDuLL);
  a2[7] = vrshrn_high_n_s32(vrshrn_n_s32(v326, 0xDuLL), v323, 0xDuLL);
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(v296, 0xDuLL), v294, 0xDuLL);
  a2[5] = vrshrn_high_n_s32(vrshrn_n_s32(v304, 0xDuLL), v302, 0xDuLL);
  a2[26] = vrshrn_high_n_s32(vrshrn_n_s32(v252, 0xDuLL), v251, 0xDuLL);
  a2[27] = vrshrn_high_n_s32(vrshrn_n_s32(v300, 0xDuLL), v298, 0xDuLL);
  a2[20] = vrshrn_high_n_s32(vrshrn_n_s32(v292, 0xDuLL), v290, 0xDuLL);
  a2[21] = vrshrn_high_n_s32(vrshrn_n_s32(v282, 0xDuLL), v214, 0xDuLL);
  a2[10] = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xDuLL), v273, 0xDuLL);
  a2[11] = vrshrn_high_n_s32(vrshrn_n_s32(v215, 0xDuLL), v216, 0xDuLL);
  a2[12] = vrshrn_high_n_s32(vrshrn_n_s32(v288, 0xDuLL), v286, 0xDuLL);
  a2[13] = vrshrn_high_n_s32(vrshrn_n_s32(v237, 0xDuLL), v238, 0xDuLL);
  a2[18] = vrshrn_high_n_s32(vrshrn_n_s32(v330, 0xDuLL), v328, 0xDuLL);
  a2[19] = vrshrn_high_n_s32(vrshrn_n_s32(v239, 0xDuLL), v240, 0xDuLL);
  a2[28] = vrshrn_high_n_s32(vrshrn_n_s32(v308, 0xDuLL), v306, 0xDuLL);
  a2[29] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v242.i8, v245, 4), *(int16x4_t *)v243.i8, v245, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v242, v245, 4), v243, v245, 5), 0xDuLL);
  result = vrshrn_high_n_s32(vrshrn_n_s32(v284, 0xDuLL), v278, 0xDuLL);
  a2[2] = result;
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v242.i8, v245, 7), *(int16x4_t *)v243.i8, v245, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v242, v245, 7), v243, v245, 4), 0xDuLL);
  return result;
}

int16x8_t fidentity8x32_col_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t result;

  v3 = *(int16x8_t *)((char *)a1 + 4 * a3);
  v4 = *(int16x8_t *)((char *)a1 + 6 * a3);
  v5 = *(int16x8_t *)((char *)a1 + 8 * a3);
  v6 = *(int16x8_t *)((char *)a1 + 10 * a3);
  v7 = *(int16x8_t *)((char *)a1 + 12 * a3);
  v8 = *(int16x8_t *)((char *)a1 + 14 * a3);
  v9 = a1[a3];
  v10 = *(int16x8_t *)((char *)a1 + 18 * a3);
  v11 = *(int16x8_t *)((char *)a1 + 20 * a3);
  v12 = *(int16x8_t *)((char *)a1 + 22 * a3);
  v13 = *(int16x8_t *)((char *)a1 + 24 * a3);
  v14 = *(int16x8_t *)((char *)a1 + 26 * a3);
  v15 = *(int16x8_t *)((char *)a1 + 28 * a3);
  v16 = *(int16x8_t *)((char *)a1 + 30 * a3);
  v17 = a1[2 * a3];
  v18 = *(int16x8_t *)((char *)a1 + 34 * a3);
  v19 = *(int16x8_t *)((char *)a1 + 36 * a3);
  v20 = *(int16x8_t *)((char *)a1 + 38 * a3);
  v21 = *(int16x8_t *)((char *)a1 + 40 * a3);
  v22 = *(int16x8_t *)((char *)a1 + 42 * a3);
  v23 = *(int16x8_t *)((char *)a1 + 44 * a3);
  v24 = *(int16x8_t *)((char *)a1 + 46 * a3);
  v25 = a1[3 * a3];
  v26 = *(int16x8_t *)((char *)a1 + 50 * a3);
  v27 = *(int16x8_t *)((char *)a1 + 52 * a3);
  v28 = *(int16x8_t *)((char *)a1 + 54 * a3);
  v29 = *(int16x8_t *)((char *)a1 + 56 * a3);
  v30 = *(int16x8_t *)((char *)a1 + 58 * a3);
  v31 = *(int16x8_t *)((char *)a1 + 60 * a3);
  v32 = *(int16x8_t *)((char *)a1 + 62 * a3);
  v33 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 4uLL);
  *a2 = vshlq_n_s16(*a1, 4uLL);
  a2[1] = v33;
  a2[2] = vshlq_n_s16(v3, 4uLL);
  a2[3] = vshlq_n_s16(v4, 4uLL);
  a2[4] = vshlq_n_s16(v5, 4uLL);
  a2[5] = vshlq_n_s16(v6, 4uLL);
  a2[6] = vshlq_n_s16(v7, 4uLL);
  a2[7] = vshlq_n_s16(v8, 4uLL);
  a2[8] = vshlq_n_s16(v9, 4uLL);
  a2[9] = vshlq_n_s16(v10, 4uLL);
  a2[10] = vshlq_n_s16(v11, 4uLL);
  a2[11] = vshlq_n_s16(v12, 4uLL);
  a2[12] = vshlq_n_s16(v13, 4uLL);
  a2[13] = vshlq_n_s16(v14, 4uLL);
  a2[14] = vshlq_n_s16(v15, 4uLL);
  a2[15] = vshlq_n_s16(v16, 4uLL);
  a2[16] = vshlq_n_s16(v17, 4uLL);
  a2[17] = vshlq_n_s16(v18, 4uLL);
  a2[18] = vshlq_n_s16(v19, 4uLL);
  a2[19] = vshlq_n_s16(v20, 4uLL);
  a2[20] = vshlq_n_s16(v21, 4uLL);
  a2[21] = vshlq_n_s16(v22, 4uLL);
  a2[22] = vshlq_n_s16(v23, 4uLL);
  a2[23] = vshlq_n_s16(v24, 4uLL);
  a2[24] = vshlq_n_s16(v25, 4uLL);
  a2[25] = vshlq_n_s16(v26, 4uLL);
  a2[26] = vshlq_n_s16(v27, 4uLL);
  a2[27] = vshlq_n_s16(v28, 4uLL);
  result = vshlq_n_s16(v32, 4uLL);
  a2[28] = vshlq_n_s16(v29, 4uLL);
  a2[29] = vshlq_n_s16(v30, 4uLL);
  a2[30] = vshlq_n_s16(v31, 4uLL);
  a2[31] = result;
  return result;
}

int16x8_t *fdct8x32_row_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int32x4_t *v250;
  int16x8_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int16x8_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int32x4_t v269;
  int16x8_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int16x8_t v295;
  int32x4_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int16x8_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int32x4_t v304;
  int16x8_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int16x8_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int32x4_t v327;
  int16x8_t v328;
  int32x4_t v329;
  int16x8_t v330;
  int32x4_t v331;
  _OWORD v332[32];
  uint64_t v333;

  v4 = 0;
  v333 = *MEMORY[0x24BDAC8D0];
  v299 = result[1];
  v5 = result[29];
  v308 = result[30];
  v6 = vqaddq_s16(v299, v308);
  v7 = result[2];
  v8 = result[3];
  v10 = result[27];
  v9 = result[28];
  v11 = vqaddq_s16(v7, v5);
  v12 = vqaddq_s16(v8, v9);
  v13 = result[4];
  v14 = result[5];
  v15 = result[26];
  v16 = vqaddq_s16(v13, v10);
  v17 = vqaddq_s16(v14, v15);
  v18 = result[8];
  v19 = result[9];
  v21 = result[22];
  v20 = result[23];
  v328 = vqaddq_s16(v18, v20);
  v22 = vqaddq_s16(v19, v21);
  v23 = result[10];
  v24 = result[11];
  v26 = result[20];
  v25 = result[21];
  v27 = vqaddq_s16(v23, v25);
  v28 = vqaddq_s16(v24, v26);
  v30 = result[12];
  v29 = result[13];
  v32 = result[18];
  v31 = result[19];
  v33 = vqaddq_s16(v29, v32);
  v34 = vqsubq_s16(v29, v32);
  v35 = vqaddq_s16(v30, v31);
  v36 = vqsubq_s16(v30, v31);
  v37 = vqsubq_s16(v24, v26);
  v38 = vqsubq_s16(v23, v25);
  v39 = vqsubq_s16(v19, v21);
  v40 = vqsubq_s16(v18, v20);
  v41 = result[6];
  v42 = result[7];
  v44 = result[24];
  v43 = result[25];
  v330 = vqaddq_s16(v42, v44);
  v45 = vqsubq_s16(v42, v44);
  v46 = vqaddq_s16(v41, v43);
  v47 = vqsubq_s16(v41, v43);
  v48 = vqsubq_s16(v14, v15);
  v49 = vqsubq_s16(v13, v10);
  v50 = vqsubq_s16(v8, v9);
  v51 = vqsubq_s16(v7, v5);
  v52 = vqaddq_s16(v11, v33);
  v264 = vqaddq_s16(v12, v35);
  v326 = vqaddq_s16(v16, v28);
  v53 = vqaddq_s16(v17, v27);
  v54 = vqaddq_s16(v46, v22);
  v55 = vqsubq_s16(v46, v22);
  v56 = vqsubq_s16(v17, v27);
  v57 = vqsubq_s16(v16, v28);
  v58 = vqsubq_s16(v12, v35);
  v59 = vqsubq_s16(v11, v33);
  v295 = result[17];
  v297 = result[14];
  v301 = result[16];
  v303 = result[15];
  v60 = vqaddq_s16(v297, v295);
  v61 = vqaddq_s16(v6, v60);
  v62 = vqsubq_s16(v6, v60);
  v64 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v63 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v49.i8, *(int16x4_t *)v64.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v37, *(int16x4_t *)v64.i8, 1), v49, *(int16x4_t *)v64.i8, 0), 0xDuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v49.i8, *(int16x4_t *)v64.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v37, *(int16x4_t *)v64.i8, 2), v49, *(int16x4_t *)v64.i8, 1), 0xDuLL);
  v67 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v48.i8, *(int16x4_t *)v64.i8, 0);
  v68 = vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v64.i8, 1), v48, *(int16x4_t *)v64.i8, 0);
  v69 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v48.i8, *(int16x4_t *)v64.i8, 1);
  v70 = vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v64.i8, 2), v48, *(int16x4_t *)v64.i8, 1);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(v67, 0xDuLL), v68, 0xDuLL);
  v72 = vrshrn_high_n_s32(vrshrn_n_s32(v69, 0xDuLL), v70, 0xDuLL);
  v293 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v47.i8, *(int16x4_t *)v64.i8, 0);
  v291 = vmlal_high_lane_s16(vmull_high_lane_s16(v39, *(int16x4_t *)v64.i8, 1), v47, *(int16x4_t *)v64.i8, 0);
  v289 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v47.i8, *(int16x4_t *)v64.i8, 1);
  v266 = vmlal_high_lane_s16(vmull_high_lane_s16(v39, *(int16x4_t *)v64.i8, 2), v47, *(int16x4_t *)v64.i8, 1);
  v324 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v45.i8, *(int16x4_t *)v64.i8, 0);
  v322 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v64.i8, 1), v45, *(int16x4_t *)v64.i8, 0);
  v320 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v45.i8, *(int16x4_t *)v64.i8, 1);
  v318 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v64.i8, 2), v45, *(int16x4_t *)v64.i8, 1);
  v73 = vqaddq_s16(v52, v53);
  v74 = vqsubq_s16(v52, v53);
  v75 = vqaddq_s16(v61, v54);
  v76 = vqsubq_s16(v61, v54);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v64.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v64.i8, 1), v59, *(int16x4_t *)v64.i8, 0), 0xDuLL);
  v78 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v59.i8, *(int16x4_t *)v64.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v64.i8, 2), v59, *(int16x4_t *)v64.i8, 1), 0xDuLL);
  v287 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v58.i8, *(int16x4_t *)v64.i8, 0);
  v281 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v64.i8, 1), v58, *(int16x4_t *)v64.i8, 0);
  v278 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v58.i8, *(int16x4_t *)v64.i8, 1);
  v276 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v64.i8, 2), v58, *(int16x4_t *)v64.i8, 1);
  v79 = vqaddq_s16(v36, v66);
  v80 = vqsubq_s16(v36, v66);
  v81 = vqaddq_s16(v34, v72);
  v82 = vqsubq_s16(v34, v72);
  v83 = vqsubq_s16(v50, v65);
  v84 = vqaddq_s16(v50, v65);
  v85 = vqsubq_s16(v51, v71);
  v86 = vqaddq_s16(v51, v71);
  v87 = vqaddq_s16(v75, v73);
  v88 = vqsubq_s16(v75, v73);
  v305 = result[31];
  v268 = vqaddq_s16(v303, v301);
  v270 = vqaddq_s16(*result, v305);
  v89 = vqaddq_s16(v270, v268);
  v90 = vqaddq_s16(v330, v328);
  v91 = vqaddq_s16(v89, v90);
  v92 = vqaddq_s16(v264, v326);
  v93 = vqaddq_s16(v91, v92);
  v94 = vqsubq_s16(v91, v92);
  v95 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v76.i8, *(int16x4_t *)v64.i8, 0);
  v96 = vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v64.i8, 1), v76, *(int16x4_t *)v64.i8, 0);
  v97 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v64.i8, 1);
  v98 = vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v64.i8, 2), v76, *(int16x4_t *)v64.i8, 1);
  v99 = vqaddq_s16(v55, v78);
  v100 = vqsubq_s16(v55, v78);
  v101 = vqsubq_s16(v62, v77);
  v102 = vqaddq_s16(v62, v77);
  v103 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v64, 5), *(int16x4_t *)v86.i8, v64, 4);
  v104 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v64, 5), v86, v64, 4);
  v105 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v64, 6), *(int16x4_t *)v86.i8, v64, 5);
  v106 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v64, 6), v86, v64, 5);
  v284 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v64, 5), v84, v64, 4);
  v285 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v64, 5), *(int16x4_t *)v84.i8, v64, 4);
  v283 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v64, 6), *(int16x4_t *)v84.i8, v64, 5);
  v280 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v64, 6), v84, v64, 5);
  v274 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v80, v64, 6), v83, v64, 5);
  v275 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v80.i8, v64, 6), *(int16x4_t *)v83.i8, v64, 5);
  v272 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v80, v64, 7), v83, v64, 6);
  v273 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v80.i8, v64, 7), *(int16x4_t *)v83.i8, v64, 6);
  v107 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v64, 6), *(int16x4_t *)v85.i8, v64, 5);
  v108 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v64, 6), v85, v64, 5);
  v109 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v64, 7), *(int16x4_t *)v85.i8, v64, 6);
  v110 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v64, 7), v85, v64, 6);
  v316 = vmlal_high_lane_s16(vmull_high_lane_s16(v87, *(int16x4_t *)v64.i8, 1), v93, *(int16x4_t *)v64.i8, 0);
  v317 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8, 0);
  v314 = vmlal_high_lane_s16(vmull_high_lane_s16(v87, *(int16x4_t *)v64.i8, 2), v93, *(int16x4_t *)v64.i8, 1);
  v315 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8, 1);
  v312 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v88, v64, 5), v94, v64, 4);
  v313 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v88.i8, v64, 5), *(int16x4_t *)v94.i8, v64, 4);
  v310 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v88, v64, 6), v94, v64, 5);
  v311 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v88.i8, v64, 6), *(int16x4_t *)v94.i8, v64, 5);
  v111 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v64, 5), *(int16x4_t *)v102.i8, v64, 4);
  v112 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v64, 5), v102, v64, 4);
  v113 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v64, 6), *(int16x4_t *)v102.i8, v64, 5);
  v114 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v64, 6), v102, v64, 5);
  v115 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v100.i8, v64, 6), *(int16x4_t *)v101.i8, v64, 5);
  v116 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v100, v64, 6), v101, v64, 5);
  v117 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v100.i8, v64, 7), *(int16x4_t *)v101.i8, v64, 6);
  v118 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v100, v64, 7), v101, v64, 6);
  v119 = vqsubq_s16(v297, v295);
  v120 = vqsubq_s16(v299, v308);
  v121 = vrshrn_high_n_s32(vrshrn_n_s32(v293, 0xDuLL), v291, 0xDuLL);
  v122 = vrshrn_high_n_s32(vrshrn_n_s32(v289, 0xDuLL), v266, 0xDuLL);
  v123 = vqsubq_s16(v264, v326);
  v124 = vqsubq_s16(v89, v90);
  v125 = vqaddq_s16(v119, v122);
  v126 = vqsubq_s16(v119, v122);
  v127 = vqsubq_s16(v120, v121);
  v128 = vqaddq_s16(v120, v121);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(v95, 0xDuLL), v96, 0xDuLL);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(v97, 0xDuLL), v98, 0xDuLL);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(v103, 0xDuLL), v104, 0xDuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(v105, 0xDuLL), v106, 0xDuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xDuLL), v108, 0xDuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xDuLL), v110, 0xDuLL);
  v135 = vqaddq_s16(v123, v130);
  v136 = vqsubq_s16(v123, v130);
  v137 = vqsubq_s16(v124, v129);
  v138 = vqaddq_s16(v124, v129);
  v139 = vqaddq_s16(v125, v132);
  v140 = vqsubq_s16(v125, v132);
  v141 = vqsubq_s16(v126, v134);
  v142 = vqaddq_s16(v126, v134);
  v143 = vqaddq_s16(v127, v133);
  v144 = vqsubq_s16(v127, v133);
  v145 = vqsubq_s16(v128, v131);
  v146 = vqaddq_s16(v128, v131);
  v298 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v63.i8, 1), v138, *(int16x4_t *)v63.i8, 0);
  v300 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v138.i8, *(int16x4_t *)v63.i8, 0);
  v327 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v138.i8, *(int16x4_t *)v63.i8, 1);
  v309 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v63.i8, 2), v138, *(int16x4_t *)v63.i8, 1);
  v294 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v136, v63, 4), v137, v63, 5);
  v296 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v136.i8, v63, 4), *(int16x4_t *)v137.i8, v63, 5);
  v290 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v136, v63, 7), v137, v63, 4);
  v292 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v136.i8, v63, 7), *(int16x4_t *)v137.i8, v63, 4);
  v147 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v146.i8, *(int16x4_t *)v63.i8, 0);
  v148 = vmlal_high_lane_s16(vmull_high_lane_s16(v139, *(int16x4_t *)v63.i8, 1), v146, *(int16x4_t *)v63.i8, 0);
  v265 = vmlal_high_lane_s16(vmull_high_lane_s16(v139, *(int16x4_t *)v63.i8, 2), v146, *(int16x4_t *)v63.i8, 1);
  v267 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v146.i8, *(int16x4_t *)v63.i8, 1);
  v149 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v145.i8, *(int16x4_t *)v63.i8, 1);
  v150 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v63.i8, 2), v145, *(int16x4_t *)v63.i8, 1);
  v151 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v63.i8, 3), *(int16x4_t *)v145.i8, *(int16x4_t *)v63.i8, 2);
  v152 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v63.i8, 3), v145, *(int16x4_t *)v63.i8, 2);
  v153 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v141.i8, v63, 4), *(int16x4_t *)v144.i8, v63, 5);
  v154 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v141, v63, 4), v144, v63, 5);
  v155 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v141.i8, v63, 7), *(int16x4_t *)v144.i8, v63, 4);
  v156 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v141, v63, 7), v144, v63, 4);
  v263 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v142.i8, v63, 7), *(int16x4_t *)v143.i8, v63, 4);
  v262 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v142, v63, 7), v143, v63, 4);
  v260 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v142, v63, 6), v143, v63, 7);
  v261 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v142.i8, v63, 6), *(int16x4_t *)v143.i8, v63, 7);
  v157 = vqsubq_s16(v330, v328);
  v158 = vqsubq_s16(v270, v268);
  v159 = vrshrn_high_n_s32(vrshrn_n_s32(v287, 0xDuLL), v281, 0xDuLL);
  v160 = vrshrn_high_n_s32(vrshrn_n_s32(v278, 0xDuLL), v276, 0xDuLL);
  v161 = vqaddq_s16(v157, v160);
  v162 = vqsubq_s16(v157, v160);
  v163 = vqsubq_s16(v158, v159);
  v164 = vqaddq_s16(v158, v159);
  v165 = vrshrn_high_n_s32(vrshrn_n_s32(v111, 0xDuLL), v112, 0xDuLL);
  v166 = vrshrn_high_n_s32(vrshrn_n_s32(v113, 0xDuLL), v114, 0xDuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(v115, 0xDuLL), v116, 0xDuLL);
  v168 = vrshrn_high_n_s32(vrshrn_n_s32(v117, 0xDuLL), v118, 0xDuLL);
  v169 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v170 = vqsubq_s16(v161, v166);
  v171 = vmull_laneq_s16(*(int16x4_t *)v170.i8, v169, 4);
  v172 = vmull_high_laneq_s16(v170, v169, 4);
  v173 = vmull_laneq_s16(*(int16x4_t *)v170.i8, v169, 7);
  v174 = vmull_high_laneq_s16(v170, v169, 7);
  v175 = vqsubq_s16(v164, v165);
  v329 = vmlal_high_laneq_s16(v172, v175, v169, 5);
  v331 = vmlal_laneq_s16(v171, *(int16x4_t *)v175.i8, v169, 5);
  v269 = vmlal_high_laneq_s16(v174, v175, v169, 4);
  v271 = vmlal_laneq_s16(v173, *(int16x4_t *)v175.i8, v169, 4);
  v176 = vqsubq_s16(v162, v168);
  v177 = vqsubq_s16(v163, v167);
  v279 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v169.i8, 1), *(int16x4_t *)v177.i8, *(int16x4_t *)v169.i8, 0);
  v277 = vmlal_high_lane_s16(vmull_high_lane_s16(v176, *(int16x4_t *)v169.i8, 1), v177, *(int16x4_t *)v169.i8, 0);
  v258 = vmlal_high_lane_s16(vmull_high_lane_s16(v176, *(int16x4_t *)v169.i8, 2), v177, *(int16x4_t *)v169.i8, 1);
  v259 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v169.i8, 2), *(int16x4_t *)v177.i8, *(int16x4_t *)v169.i8, 1);
  v178 = vqaddq_s16(v161, v166);
  v179 = vqaddq_s16(v162, v168);
  v180 = vqaddq_s16(v163, v167);
  v181 = vqaddq_s16(v164, v165);
  v182 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v288 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v182.i8, 1), *(int16x4_t *)v181.i8, *(int16x4_t *)v182.i8, 0);
  v282 = vmlal_high_lane_s16(vmull_high_lane_s16(v178, *(int16x4_t *)v182.i8, 1), v181, *(int16x4_t *)v182.i8, 0);
  v252 = vmlal_high_lane_s16(vmull_high_lane_s16(v178, *(int16x4_t *)v182.i8, 2), v181, *(int16x4_t *)v182.i8, 1);
  v253 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v182.i8, 2), *(int16x4_t *)v181.i8, *(int16x4_t *)v182.i8, 1);
  v257 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v179.i8, v182, 4), *(int16x4_t *)v180.i8, v182, 5);
  v256 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v179, v182, 4), v180, v182, 5);
  v255 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v179.i8, v182, 7), *(int16x4_t *)v180.i8, v182, 4);
  v254 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v179, v182, 7), v180, v182, 4);
  v183 = vqsubq_s16(v303, v301);
  v184 = vqsubq_s16(*result, v305);
  v185 = vrshrn_high_n_s32(vrshrn_n_s32(v324, 0xDuLL), v322, 0xDuLL);
  v186 = vrshrn_high_n_s32(vrshrn_n_s32(v320, 0xDuLL), v318, 0xDuLL);
  v187 = vqaddq_s16(v183, v186);
  v188 = vqsubq_s16(v183, v186);
  v189 = vqsubq_s16(v184, v185);
  v190 = vqaddq_s16(v184, v185);
  v191 = vrshrn_high_n_s32(vrshrn_n_s32(v285, 0xDuLL), v284, 0xDuLL);
  v192 = vrshrn_high_n_s32(vrshrn_n_s32(v283, 0xDuLL), v280, 0xDuLL);
  v193 = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xDuLL), v274, 0xDuLL);
  v194 = vrshrn_high_n_s32(vrshrn_n_s32(v273, 0xDuLL), v272, 0xDuLL);
  v195 = vrshrn_high_n_s32(vrshrn_n_s32(v149, 0xDuLL), v150, 0xDuLL);
  v196 = vrshrn_high_n_s32(vrshrn_n_s32(v151, 0xDuLL), v152, 0xDuLL);
  v197 = vrshrn_high_n_s32(vrshrn_n_s32(v153, 0xDuLL), v154, 0xDuLL);
  v198 = vrshrn_high_n_s32(vrshrn_n_s32(v155, 0xDuLL), v156, 0xDuLL);
  v199 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v200 = vqsubq_s16(v187, v192);
  v201 = vqaddq_s16(v200, v196);
  v202 = vqsubq_s16(v190, v191);
  v203 = vqaddq_s16(v202, v195);
  v319 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v201, v199, 4), v203, v199, 5);
  v321 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v201.i8, v199, 4), *(int16x4_t *)v203.i8, v199, 5);
  v323 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v201, v199, 7), v203, v199, 4);
  v325 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v201.i8, v199, 7), *(int16x4_t *)v203.i8, v199, 4);
  v204 = vqsubq_s16(v188, v194);
  v205 = vqsubq_s16(v189, v193);
  v206 = vqaddq_s16(v204, v198);
  v207 = vqaddq_s16(v205, v197);
  v307 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v199.i8, 1), *(int16x4_t *)v207.i8, *(int16x4_t *)v199.i8, 0);
  v306 = vmlal_high_lane_s16(vmull_high_lane_s16(v206, *(int16x4_t *)v199.i8, 1), v207, *(int16x4_t *)v199.i8, 0);
  v302 = vmlal_high_lane_s16(vmull_high_lane_s16(v206, *(int16x4_t *)v199.i8, 2), v207, *(int16x4_t *)v199.i8, 1);
  v304 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v199.i8, 2), *(int16x4_t *)v207.i8, *(int16x4_t *)v199.i8, 1);
  v208 = vqsubq_s16(v200, v196);
  v209 = vqsubq_s16(v204, v198);
  v210 = vqsubq_s16(v205, v197);
  v211 = vqsubq_s16(v202, v195);
  v213 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v212 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v214 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v213.i8, 1), *(int16x4_t *)v211.i8, *(int16x4_t *)v213.i8, 0);
  v215 = vmlal_high_lane_s16(vmull_high_lane_s16(v208, *(int16x4_t *)v213.i8, 1), v211, *(int16x4_t *)v213.i8, 0);
  v216 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v213.i8, 2), *(int16x4_t *)v211.i8, *(int16x4_t *)v213.i8, 1);
  v217 = vmlal_high_lane_s16(vmull_high_lane_s16(v208, *(int16x4_t *)v213.i8, 2), v211, *(int16x4_t *)v213.i8, 1);
  v286 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v209.i8, v213, 4), *(int16x4_t *)v210.i8, v213, 5);
  v218 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v209, v213, 4), v210, v213, 5);
  v219 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v209.i8, v213, 7), *(int16x4_t *)v210.i8, v213, 4);
  v220 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v209, v213, 7), v210, v213, 4);
  v221 = vqaddq_s16(v187, v192);
  v222 = vqaddq_s16(v188, v194);
  v223 = vqaddq_s16(v189, v193);
  v224 = vqaddq_s16(v190, v191);
  v225 = vrshrn_high_n_s32(vrshrn_n_s32(v147, 0xDuLL), v148, 0xDuLL);
  v226 = vrshrn_high_n_s32(vrshrn_n_s32(v267, 0xDuLL), v265, 0xDuLL);
  v227 = vrshrn_high_n_s32(vrshrn_n_s32(v263, 0xDuLL), v262, 0xDuLL);
  v228 = vrshrn_high_n_s32(vrshrn_n_s32(v261, 0xDuLL), v260, 0xDuLL);
  v229 = vqsubq_s16(v221, v226);
  v230 = vmull_laneq_s16(*(int16x4_t *)v229.i8, v212, 4);
  v231 = vmull_high_laneq_s16(v229, v212, 4);
  v232 = vmull_laneq_s16(*(int16x4_t *)v229.i8, v212, 7);
  v233 = vmull_high_laneq_s16(v229, v212, 7);
  v234 = vqsubq_s16(v224, v225);
  v235 = vmlal_laneq_s16(v230, *(int16x4_t *)v234.i8, v212, 5);
  v236 = vmlal_high_laneq_s16(v231, v234, v212, 5);
  v237 = vmlal_laneq_s16(v232, *(int16x4_t *)v234.i8, v212, 4);
  v238 = vmlal_high_laneq_s16(v233, v234, v212, 4);
  v239 = vqsubq_s16(v222, v228);
  v240 = vqsubq_s16(v223, v227);
  v241 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v239.i8, *(int16x4_t *)v212.i8, 1), *(int16x4_t *)v240.i8, *(int16x4_t *)v212.i8, 0);
  v242 = vmlal_high_lane_s16(vmull_high_lane_s16(v239, *(int16x4_t *)v212.i8, 1), v240, *(int16x4_t *)v212.i8, 0);
  v243 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v239.i8, *(int16x4_t *)v212.i8, 2), *(int16x4_t *)v240.i8, *(int16x4_t *)v212.i8, 1);
  v244 = vmlal_high_lane_s16(vmull_high_lane_s16(v239, *(int16x4_t *)v212.i8, 2), v240, *(int16x4_t *)v212.i8, 1);
  v245 = vqaddq_s16(v221, v226);
  v246 = vqaddq_s16(v222, v228);
  v247 = vqaddq_s16(v223, v227);
  v248 = vqaddq_s16(v224, v225);
  v249 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v332[0] = vrshrn_high_n_s32(vrshrn_n_s32(v317, 0xDuLL), v316, 0xDuLL);
  v332[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v249.i8, 1), *(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v245, *(int16x4_t *)v249.i8, 1), v248, *(int16x4_t *)v249.i8, 0), 0xDuLL);
  v332[30] = vrshrn_high_n_s32(vrshrn_n_s32(v253, 0xDuLL), v252, 0xDuLL);
  v332[31] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v249.i8, 2), *(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v245, *(int16x4_t *)v249.i8, 2), v248, *(int16x4_t *)v249.i8, 1), 0xDuLL);
  v332[16] = vrshrn_high_n_s32(vrshrn_n_s32(v315, 0xDuLL), v314, 0xDuLL);
  v332[17] = vrshrn_high_n_s32(vrshrn_n_s32(v235, 0xDuLL), v236, 0xDuLL);
  v332[14] = vrshrn_high_n_s32(vrshrn_n_s32(v271, 0xDuLL), v269, 0xDuLL);
  v332[15] = vrshrn_high_n_s32(vrshrn_n_s32(v237, 0xDuLL), v238, 0xDuLL);
  v332[8] = vrshrn_high_n_s32(vrshrn_n_s32(v313, 0xDuLL), v312, 0xDuLL);
  v332[9] = vrshrn_high_n_s32(vrshrn_n_s32(v214, 0xDuLL), v215, 0xDuLL);
  v332[22] = vrshrn_high_n_s32(vrshrn_n_s32(v259, 0xDuLL), v258, 0xDuLL);
  v332[23] = vrshrn_high_n_s32(vrshrn_n_s32(v216, 0xDuLL), v217, 0xDuLL);
  v332[24] = vrshrn_high_n_s32(vrshrn_n_s32(v311, 0xDuLL), v310, 0xDuLL);
  v332[25] = vrshrn_high_n_s32(vrshrn_n_s32(v321, 0xDuLL), v319, 0xDuLL);
  v332[6] = vrshrn_high_n_s32(vrshrn_n_s32(v255, 0xDuLL), v254, 0xDuLL);
  v332[7] = vrshrn_high_n_s32(vrshrn_n_s32(v325, 0xDuLL), v323, 0xDuLL);
  v332[4] = vrshrn_high_n_s32(vrshrn_n_s32(v300, 0xDuLL), v298, 0xDuLL);
  v332[5] = vrshrn_high_n_s32(vrshrn_n_s32(v307, 0xDuLL), v306, 0xDuLL);
  v332[26] = vrshrn_high_n_s32(vrshrn_n_s32(v257, 0xDuLL), v256, 0xDuLL);
  v332[27] = vrshrn_high_n_s32(vrshrn_n_s32(v304, 0xDuLL), v302, 0xDuLL);
  v332[20] = vrshrn_high_n_s32(vrshrn_n_s32(v296, 0xDuLL), v294, 0xDuLL);
  v332[21] = vrshrn_high_n_s32(vrshrn_n_s32(v286, 0xDuLL), v218, 0xDuLL);
  v332[10] = vrshrn_high_n_s32(vrshrn_n_s32(v279, 0xDuLL), v277, 0xDuLL);
  v332[11] = vrshrn_high_n_s32(vrshrn_n_s32(v219, 0xDuLL), v220, 0xDuLL);
  v332[12] = vrshrn_high_n_s32(vrshrn_n_s32(v292, 0xDuLL), v290, 0xDuLL);
  v332[13] = vrshrn_high_n_s32(vrshrn_n_s32(v241, 0xDuLL), v242, 0xDuLL);
  v332[18] = vrshrn_high_n_s32(vrshrn_n_s32(v331, 0xDuLL), v329, 0xDuLL);
  v332[19] = vrshrn_high_n_s32(vrshrn_n_s32(v243, 0xDuLL), v244, 0xDuLL);
  v332[28] = vrshrn_high_n_s32(vrshrn_n_s32(v327, 0xDuLL), v309, 0xDuLL);
  v332[29] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v246.i8, v249, 4), *(int16x4_t *)v247.i8, v249, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v246, v249, 4), v247, v249, 5), 0xDuLL);
  v332[2] = vrshrn_high_n_s32(vrshrn_n_s32(v288, 0xDuLL), v282, 0xDuLL);
  v332[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v246.i8, v249, 7), *(int16x4_t *)v247.i8, v249, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v246, v249, 7), v247, v249, 4), 0xDuLL);
  v250 = a2 + 1;
  do
  {
    v251 = (int16x8_t)v332[v4];
    v250[-1] = vmovl_s16(*(int16x4_t *)v251.i8);
    *v250 = vmovl_high_s16(v251);
    ++v4;
    v250 = (int32x4_t *)((char *)v250 + 4 * a3);
  }
  while (v4 != 32);
  return result;
}

int32x4_t fidentity8x32_row_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t *v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t result;
  _OWORD v24[32];
  uint64_t v25;

  v3 = 0;
  v25 = *MEMORY[0x24BDAC8D0];
  v4 = vshlq_n_s16(a1[1], 2uLL);
  v24[0] = vshlq_n_s16(*a1, 2uLL);
  v24[1] = v4;
  v5 = vshlq_n_s16(a1[3], 2uLL);
  v24[2] = vshlq_n_s16(a1[2], 2uLL);
  v24[3] = v5;
  v6 = vshlq_n_s16(a1[5], 2uLL);
  v24[4] = vshlq_n_s16(a1[4], 2uLL);
  v24[5] = v6;
  v7 = vshlq_n_s16(a1[7], 2uLL);
  v24[6] = vshlq_n_s16(a1[6], 2uLL);
  v24[7] = v7;
  v8 = vshlq_n_s16(a1[9], 2uLL);
  v24[8] = vshlq_n_s16(a1[8], 2uLL);
  v24[9] = v8;
  v9 = vshlq_n_s16(a1[11], 2uLL);
  v24[10] = vshlq_n_s16(a1[10], 2uLL);
  v24[11] = v9;
  v10 = vshlq_n_s16(a1[13], 2uLL);
  v24[12] = vshlq_n_s16(a1[12], 2uLL);
  v24[13] = v10;
  v11 = vshlq_n_s16(a1[15], 2uLL);
  v24[14] = vshlq_n_s16(a1[14], 2uLL);
  v24[15] = v11;
  v12 = vshlq_n_s16(a1[17], 2uLL);
  v24[16] = vshlq_n_s16(a1[16], 2uLL);
  v24[17] = v12;
  v13 = vshlq_n_s16(a1[19], 2uLL);
  v24[18] = vshlq_n_s16(a1[18], 2uLL);
  v24[19] = v13;
  v14 = vshlq_n_s16(a1[21], 2uLL);
  v24[20] = vshlq_n_s16(a1[20], 2uLL);
  v24[21] = v14;
  v15 = vshlq_n_s16(a1[23], 2uLL);
  v24[22] = vshlq_n_s16(a1[22], 2uLL);
  v24[23] = v15;
  v16 = vshlq_n_s16(a1[25], 2uLL);
  v24[24] = vshlq_n_s16(a1[24], 2uLL);
  v24[25] = v16;
  v17 = vshlq_n_s16(a1[27], 2uLL);
  v24[26] = vshlq_n_s16(a1[26], 2uLL);
  v24[27] = v17;
  v18 = vshlq_n_s16(a1[29], 2uLL);
  v24[28] = vshlq_n_s16(a1[28], 2uLL);
  v24[29] = v18;
  v19 = vshlq_n_s16(a1[31], 2uLL);
  v20 = a2 + 1;
  v24[30] = vshlq_n_s16(a1[30], 2uLL);
  v24[31] = v19;
  do
  {
    v21 = (int16x8_t)v24[v3];
    v22 = vmovl_s16(*(int16x4_t *)v21.i8);
    result = vmovl_high_s16(v21);
    v20[-1] = v22;
    *v20 = result;
    ++v3;
    v20 = (int32x4_t *)((char *)v20 + 4 * a3);
  }
  while (v3 != 32);
  return result;
}

int32x4_t fdct64_neon(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t *v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int16x8_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int16x8_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int16x8_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int16x8_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t result;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int32x4_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int32x4_t v559;
  int16x8_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int32x4_t v565;
  int32x4_t v566;
  int32x4_t v567;
  int32x4_t v568;
  int32x4_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int32x4_t v578;
  int32x4_t v579;
  int32x4_t v580;
  int32x4_t v581;
  int32x4_t v582;
  int32x4_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  int32x4_t v589;
  int32x4_t v590;
  int32x4_t v591;
  int32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;

  v3 = a1[10];
  v4 = a1[11];
  v6 = a1[52];
  v5 = a1[53];
  v7 = vqaddq_s32(v3, v5);
  v8 = vqaddq_s32(v4, v6);
  v9 = a1[12];
  v10 = a1[13];
  v12 = a1[50];
  v11 = a1[51];
  v579 = vqaddq_s32(v9, v11);
  v13 = a1[16];
  v14 = a1[17];
  v15 = a1[46];
  v16 = a1[47];
  v593 = vqaddq_s32(v13, v16);
  v585 = vqaddq_s32(v14, v15);
  v17 = a1[18];
  v18 = a1[19];
  v20 = a1[44];
  v19 = a1[45];
  v456 = vqaddq_s32(v18, v20);
  v457 = vqaddq_s32(v17, v19);
  v21 = a1[22];
  v22 = a1[23];
  v24 = a1[40];
  v23 = a1[41];
  v25 = vqaddq_s32(v21, v23);
  v26 = vqaddq_s32(v22, v24);
  v27 = vqsubq_s32(v22, v24);
  v28 = vqsubq_s32(v21, v23);
  v29 = a1[20];
  v30 = a1[21];
  v32 = a1[42];
  v31 = a1[43];
  v33 = vqaddq_s32(v30, v32);
  v34 = vqsubq_s32(v30, v32);
  v35 = vqaddq_s32(v29, v31);
  v36 = vqsubq_s32(v29, v31);
  v37 = vqsubq_s32(v18, v20);
  v38 = vqsubq_s32(v17, v19);
  v39 = vqsubq_s32(v14, v15);
  v40 = vqsubq_s32(v13, v16);
  v42 = a1[14];
  v41 = a1[15];
  v44 = a1[48];
  v43 = a1[49];
  v591 = vqaddq_s32(v41, v44);
  v45 = vqsubq_s32(v41, v44);
  v582 = vqaddq_s32(v42, v43);
  v46 = vqsubq_s32(v42, v43);
  v449 = vqaddq_s32(v10, v12);
  v47 = vqsubq_s32(v10, v12);
  v48 = vqsubq_s32(v9, v11);
  v49 = vqsubq_s32(v4, v6);
  v50 = vqsubq_s32(v3, v5);
  v51 = a1[8];
  v52 = a1[9];
  v53 = a1[54];
  v54 = vqaddq_s32(v52, v53);
  v55 = vqsubq_s32(v52, v53);
  v56 = a1[55];
  v57 = vqaddq_s32(v51, v56);
  v58 = vqsubq_s32(v51, v56);
  v59 = vqaddq_s32(v8, v35);
  v60 = vqsubq_s32(v8, v35);
  v61 = vqaddq_s32(v7, v33);
  v62 = vqsubq_s32(v7, v33);
  v455 = vqaddq_s32(v54, v25);
  v63 = vqsubq_s32(v54, v25);
  v587 = vqaddq_s32(v57, v26);
  v64 = vqsubq_s32(v57, v26);
  v563 = a1[7];
  v554 = a1[56];
  v65 = vqaddq_s32(v563, v554);
  v530 = a1[39];
  v532 = a1[24];
  v66 = vqaddq_s32(v532, v530);
  v589 = vqaddq_s32(v65, v66);
  v67 = vqsubq_s32(v65, v66);
  v522 = a1[25];
  v525 = a1[6];
  v527 = a1[57];
  v68 = vqaddq_s32(v525, v527);
  v69 = vqaddq_s32(v522, a1[38]);
  v454 = vqaddq_s32(v68, v69);
  v70 = vqsubq_s32(v68, v69);
  v520 = a1[5];
  v517 = a1[58];
  v71 = vqaddq_s32(v520, v517);
  v504 = a1[27];
  v507 = a1[37];
  v509 = a1[26];
  v494 = a1[36];
  v72 = vqaddq_s32(v509, v507);
  v73 = vqaddq_s32(v71, v72);
  v74 = vqsubq_s32(v71, v72);
  v513 = a1[59];
  v515 = a1[4];
  v75 = vqaddq_s32(v515, v513);
  v76 = vqaddq_s32(v504, v494);
  v77 = vqaddq_s32(v75, v76);
  v78 = vqsubq_s32(v75, v76);
  v79 = &av1_cospi_arr_q13_data[16 * (unint64_t)(a3 - 10)];
  v560 = v79[1];
  v80 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v79->i8, 0));
  v81 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v79->i8, 1));
  v511 = vmlaq_s32(vmulq_s32(v27, v81), v58, v80);
  v82 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v79->i8, 2));
  v83 = vmlaq_s32(vmulq_s32(v27, v82), v58, v81);
  v84 = vmlaq_s32(vmulq_s32(v28, v81), v55, v80);
  v85 = vmlaq_s32(vmulq_s32(v28, v82), v55, v81);
  v86 = vmlaq_s32(vmulq_s32(v34, v81), v50, v80);
  v481 = vmlaq_s32(vmulq_s32(v34, v82), v50, v81);
  v497 = vmlaq_s32(vmulq_s32(v36, v81), v49, v80);
  v477 = vmlaq_s32(vmulq_s32(v36, v82), v49, v81);
  v548 = vmlaq_s32(vmulq_s32(v37, v81), v48, v80);
  v544 = vmlaq_s32(vmulq_s32(v37, v82), v48, v81);
  v546 = vmlaq_s32(vmulq_s32(v38, v81), v47, v80);
  v534 = vmlaq_s32(vmulq_s32(v38, v82), v47, v81);
  v570 = vmlaq_s32(vmulq_s32(v39, v81), v46, v80);
  v568 = vmlaq_s32(vmulq_s32(v39, v82), v46, v81);
  v578 = vmlaq_s32(vmulq_s32(v40, v81), v45, v80);
  v577 = vmlaq_s32(vmulq_s32(v40, v82), v45, v81);
  v87 = vqaddq_s32(v73, v61);
  v88 = vqsubq_s32(v73, v61);
  v89 = vqaddq_s32(v77, v59);
  v90 = vqsubq_s32(v77, v59);
  v499 = a1[60];
  v502 = a1[3];
  v470 = vqaddq_s32(v502, v499);
  v486 = a1[29];
  v489 = a1[35];
  v491 = a1[28];
  v483 = a1[34];
  v468 = vqaddq_s32(v491, v489);
  v91 = vqaddq_s32(v470, v468);
  v92 = vqaddq_s32(v579, v456);
  v452 = v89;
  v453 = vqaddq_s32(v91, v92);
  v93 = vqsubq_s32(v91, v92);
  v479 = a1[61];
  v480 = a1[2];
  v466 = vqaddq_s32(v486, v483);
  v467 = vqaddq_s32(v480, v479);
  v94 = vqaddq_s32(v467, v466);
  v95 = vqaddq_s32(v449, v457);
  v96 = vqaddq_s32(v94, v95);
  v97 = vqsubq_s32(v94, v95);
  v474 = vmlaq_s32(vmulq_s32(v60, v81), v78, v80);
  v471 = vmlaq_s32(vmulq_s32(v60, v82), v78, v81);
  v472 = vmlaq_s32(vmulq_s32(v62, v81), v74, v80);
  v469 = vmlaq_s32(vmulq_s32(v62, v82), v74, v81);
  v485 = vmlaq_s32(vmulq_s32(v63, v81), v70, v80);
  v476 = vmlaq_s32(vmulq_s32(v63, v82), v70, v81);
  v575 = vmlaq_s32(vmulq_s32(v64, v81), v67, v80);
  v573 = vmlaq_s32(vmulq_s32(v64, v82), v67, v81);
  v445 = vqaddq_s32(v96, v87);
  v98 = vqsubq_s32(v96, v87);
  v540 = a1[62];
  v542 = a1[1];
  v465 = vqaddq_s32(v542, v540);
  v566 = a1[31];
  v536 = a1[33];
  v538 = a1[30];
  v565 = a1[32];
  v462 = vqaddq_s32(v538, v536);
  v99 = vqaddq_s32(v465, v462);
  v100 = vqaddq_s32(v582, v585);
  v101 = vqaddq_s32(v99, v100);
  v102 = vqaddq_s32(v454, v455);
  v446 = vqaddq_s32(v101, v102);
  v103 = vqsubq_s32(v101, v102);
  v461 = vmlaq_s32(vmulq_s32(v88, v81), v97, v80);
  v460 = vmlaq_s32(vmulq_s32(v88, v82), v97, v81);
  v552 = vmlaq_s32(vmulq_s32(v90, v81), v93, v80);
  v550 = vmlaq_s32(vmulq_s32(v90, v82), v93, v81);
  v458 = vmlaq_s32(vmulq_s32(v98, v81), v103, v80);
  v459 = vmlaq_s32(vmulq_s32(v98, v82), v103, v81);
  v567 = a1[63];
  v558 = vqaddq_s32(*a1, v567);
  v556 = vqaddq_s32(v566, v565);
  v463 = vqaddq_s32(v591, v593);
  v464 = vqaddq_s32(v558, v556);
  v450 = vqaddq_s32(v589, v587);
  v451 = vqaddq_s32(v464, v463);
  v447 = vqaddq_s32(v453, v89);
  v448 = vqaddq_s32(v451, v450);
  v572 = vmlaq_s32(vmulq_s32(vqaddq_s32(v448, v447), v80), vqaddq_s32(v446, v445), v81);
  v104 = vqsubq_s32(v504, v494);
  v105 = vqsubq_s32(v509, v507);
  v106 = vqsubq_s32(v522, a1[38]);
  v107 = vqsubq_s32(v532, v530);
  v108 = vqsubq_s32(v563, v554);
  v109 = vqsubq_s32(v525, v527);
  v110 = vqsubq_s32(v520, v517);
  v111 = vqsubq_s32(v515, v513);
  v112 = vqsubq_s32(v449, v457);
  v113 = vqsubq_s32(v579, v456);
  v114 = vqsubq_s32(v470, v468);
  v115 = vqsubq_s32(v467, v466);
  v116 = vqsubq_s32(v454, v455);
  v580 = vqsubq_s32(v99, v100);
  v117 = vrshrq_n_s32(v83, 0xDuLL);
  v118 = vqaddq_s32(v107, v117);
  v119 = vqsubq_s32(v107, v117);
  v120 = vrshrq_n_s32(v85, 0xDuLL);
  v121 = vqaddq_s32(v106, v120);
  v122 = vqsubq_s32(v106, v120);
  v123 = vrshrq_n_s32(v481, 0xDuLL);
  v124 = vqaddq_s32(v105, v123);
  v125 = vqsubq_s32(v105, v123);
  v126 = vrshrq_n_s32(v477, 0xDuLL);
  v127 = vqaddq_s32(v104, v126);
  v128 = vqsubq_s32(v104, v126);
  v129 = vrshrq_n_s32(v511, 0xDuLL);
  v130 = vqsubq_s32(v108, v129);
  v131 = vqaddq_s32(v108, v129);
  v132 = vrshrq_n_s32(v84, 0xDuLL);
  v133 = vqsubq_s32(v109, v132);
  v134 = vqaddq_s32(v109, v132);
  v135 = vrshrq_n_s32(v86, 0xDuLL);
  v136 = vqsubq_s32(v110, v135);
  v137 = vqaddq_s32(v110, v135);
  v138 = vrshrq_n_s32(v497, 0xDuLL);
  v139 = vqsubq_s32(v111, v138);
  v140 = vqaddq_s32(v111, v138);
  v141 = vrshrq_n_s32(v471, 0xDuLL);
  v142 = vqaddq_s32(v113, v141);
  v143 = vqsubq_s32(v113, v141);
  v144 = vrshrq_n_s32(v469, 0xDuLL);
  v145 = vqaddq_s32(v112, v144);
  v146 = vqsubq_s32(v112, v144);
  v147 = vrshrq_n_s32(v474, 0xDuLL);
  v148 = vqsubq_s32(v114, v147);
  v149 = vqaddq_s32(v114, v147);
  v150 = vrshrq_n_s32(v472, 0xDuLL);
  v151 = vqsubq_s32(v115, v150);
  v152 = vqaddq_s32(v115, v150);
  v153 = vmovl_s16(vdup_laneq_s16(*v79, 4));
  v154 = vmovl_s16(vdup_laneq_s16(*v79, 5));
  v155 = vmlaq_s32(vmulq_s32(v127, v154), v140, v153);
  v156 = vmovl_s16(vdup_laneq_s16(*v79, 6));
  v157 = vmlaq_s32(vmulq_s32(v127, v156), v140, v154);
  v158 = vmlaq_s32(vmulq_s32(v124, v154), v137, v153);
  v159 = vmlaq_s32(vmulq_s32(v124, v156), v137, v154);
  v482 = vmlaq_s32(vmulq_s32(v121, v154), v134, v153);
  v478 = vmlaq_s32(vmulq_s32(v121, v156), v134, v154);
  v555 = vmlaq_s32(vmulq_s32(v118, v154), v131, v153);
  v533 = vmlaq_s32(vmulq_s32(v118, v156), v131, v154);
  v564 = vmlaq_s32(vmulq_s32(v119, v156), v130, v154);
  v160 = vmovl_s16(vdup_laneq_s16(*v79, 7));
  v562 = vmlaq_s32(vmulq_s32(v119, v160), v130, v156);
  v516 = vmlaq_s32(vmulq_s32(v122, v156), v133, v154);
  v514 = vmlaq_s32(vmulq_s32(v122, v160), v133, v156);
  v528 = vmlaq_s32(vmulq_s32(v125, v156), v136, v154);
  v161 = vmlaq_s32(vmulq_s32(v125, v160), v136, v156);
  v523 = vmlaq_s32(vmulq_s32(v128, v156), v139, v154);
  v162 = vmlaq_s32(vmulq_s32(v128, v160), v139, v156);
  v163 = vrshrq_n_s32(v460, 0xDuLL);
  v164 = vqaddq_s32(v116, v163);
  v165 = vqsubq_s32(v116, v163);
  v166 = vrshrq_n_s32(v461, 0xDuLL);
  v167 = vqsubq_s32(v580, v166);
  v168 = vqaddq_s32(v580, v166);
  v169 = vmlaq_s32(vmulq_s32(v145, v154), v152, v153);
  v170 = vmlaq_s32(vmulq_s32(v145, v156), v152, v154);
  v519 = vmlaq_s32(vmulq_s32(v142, v154), v149, v153);
  v518 = vmlaq_s32(vmulq_s32(v142, v156), v149, v154);
  v531 = vmlaq_s32(vmulq_s32(v143, v156), v148, v154);
  v526 = vmlaq_s32(vmulq_s32(v143, v160), v148, v156);
  v171 = vmlaq_s32(vmulq_s32(v146, v156), v151, v154);
  v172 = vmlaq_s32(vmulq_s32(v146, v160), v151, v156);
  v581 = vmlaq_s32(vmulq_s32(vqsubq_s32(v446, v445), v154), vqsubq_s32(v448, v447), v153);
  v473 = vmlaq_s32(vmulq_s32(v164, v156), v168, v154);
  v475 = vmlaq_s32(vmulq_s32(v164, v154), v168, v153);
  v512 = vmlaq_s32(vmulq_s32(v165, v156), v167, v154);
  v510 = vmlaq_s32(vmulq_s32(v165, v160), v167, v156);
  v505 = vqsubq_s32(v486, v483);
  v173 = vqsubq_s32(v491, v489);
  v500 = vqsubq_s32(v502, v499);
  v174 = vqsubq_s32(v480, v479);
  v583 = vqsubq_s32(v582, v585);
  v175 = vqsubq_s32(v465, v462);
  v484 = vqsubq_s32(v453, v452);
  v492 = vqsubq_s32(v451, v450);
  v176 = vrshrq_n_s32(v544, 0xDuLL);
  v177 = vrshrq_n_s32(v157, 0xDuLL);
  v178 = vqaddq_s32(v173, v176);
  v179 = vqaddq_s32(v178, v177);
  v180 = vqsubq_s32(v178, v177);
  v181 = vrshrq_n_s32(v534, 0xDuLL);
  v182 = vrshrq_n_s32(v159, 0xDuLL);
  v183 = vqaddq_s32(v505, v181);
  v184 = vqaddq_s32(v183, v182);
  v185 = vqsubq_s32(v183, v182);
  v186 = vrshrq_n_s32(v548, 0xDuLL);
  v187 = vrshrq_n_s32(v155, 0xDuLL);
  v188 = vqaddq_s32(v500, v186);
  v189 = vqsubq_s32(v188, v187);
  v190 = vqaddq_s32(v188, v187);
  v191 = vrshrq_n_s32(v546, 0xDuLL);
  v192 = vrshrq_n_s32(v158, 0xDuLL);
  v193 = vqaddq_s32(v174, v191);
  v194 = vqsubq_s32(v193, v192);
  v195 = vqaddq_s32(v193, v192);
  v196 = vrshrq_n_s32(v476, 0xDuLL);
  v197 = vrshrq_n_s32(v170, 0xDuLL);
  v198 = vqaddq_s32(v583, v196);
  v199 = vqaddq_s32(v198, v197);
  v200 = vqsubq_s32(v198, v197);
  v201 = vrshrq_n_s32(v485, 0xDuLL);
  v202 = vrshrq_n_s32(v169, 0xDuLL);
  v203 = vqaddq_s32(v175, v201);
  v204 = vqsubq_s32(v203, v202);
  v205 = vqaddq_s32(v203, v202);
  v206 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v560.i8, 0));
  v207 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v560.i8, 1));
  v208 = vmlaq_s32(vmulq_s32(v184, v207), v195, v206);
  v209 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v560.i8, 2));
  v210 = vmlaq_s32(vmulq_s32(v184, v209), v195, v207);
  v535 = vmlaq_s32(vmulq_s32(v179, v207), v190, v206);
  v521 = vmlaq_s32(vmulq_s32(v179, v209), v190, v207);
  v549 = vmlaq_s32(vmulq_s32(v180, v209), v189, v207);
  v211 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v560.i8, 3));
  v547 = vmlaq_s32(vmulq_s32(v180, v211), v189, v209);
  v495 = vmlaq_s32(vmulq_s32(v185, v209), v194, v207);
  v487 = vmlaq_s32(vmulq_s32(v185, v211), v194, v209);
  v212 = vrshrq_n_s32(v458, 0xDuLL);
  v213 = vrshrq_n_s32(v459, 0xDuLL);
  v586 = vmlaq_s32(vmulq_s32(vqaddq_s32(v484, v213), v207), vqaddq_s32(v492, v212), v206);
  v498 = vmlaq_s32(vmulq_s32(v199, v207), v205, v206);
  v490 = vmlaq_s32(vmulq_s32(v199, v209), v205, v207);
  v508 = vmlaq_s32(vmulq_s32(v200, v209), v204, v207);
  v503 = vmlaq_s32(vmulq_s32(v200, v211), v204, v209);
  v214 = vqsubq_s32(v173, v176);
  v215 = vqsubq_s32(v505, v181);
  v216 = vqsubq_s32(v174, v191);
  v217 = vqsubq_s32(v500, v186);
  v218 = vqsubq_s32(v583, v196);
  v219 = vqsubq_s32(v175, v201);
  v220 = vrshrq_n_s32(v162, 0xDuLL);
  v221 = vqsubq_s32(v214, v220);
  v222 = vqaddq_s32(v214, v220);
  v223 = vrshrq_n_s32(v161, 0xDuLL);
  v224 = vqsubq_s32(v215, v223);
  v225 = vqaddq_s32(v215, v223);
  v226 = vrshrq_n_s32(v523, 0xDuLL);
  v227 = vqaddq_s32(v217, v226);
  v228 = vqsubq_s32(v217, v226);
  v229 = vrshrq_n_s32(v528, 0xDuLL);
  v230 = vqaddq_s32(v216, v229);
  v231 = vqsubq_s32(v216, v229);
  v232 = vrshrq_n_s32(v172, 0xDuLL);
  v233 = vqsubq_s32(v218, v232);
  v234 = vqaddq_s32(v218, v232);
  v235 = vrshrq_n_s32(v171, 0xDuLL);
  v236 = vqaddq_s32(v219, v235);
  v237 = vqsubq_s32(v219, v235);
  v238 = vmovl_s16(vdup_laneq_s16(v560, 5));
  v239 = vmovl_s16(vdup_laneq_s16(v560, 4));
  v240 = vmlaq_s32(vmulq_s32(v224, v239), v231, v238);
  v241 = vmovl_s16(vdup_laneq_s16(v560, 7));
  v242 = vmlaq_s32(vmulq_s32(v224, v241), v231, v239);
  v529 = vmlaq_s32(vmulq_s32(v221, v239), v228, v238);
  v524 = vmlaq_s32(vmulq_s32(v221, v241), v228, v239);
  *(int16x4_t *)v231.i8 = vdup_laneq_s16(v560, 6);
  v561 = vmlaq_s32(vmulq_s32(v222, v241), v227, v239);
  v243 = vmovl_s16(*(int16x4_t *)v231.i8);
  v545 = vmlaq_s32(vmulq_s32(v222, v243), v227, v241);
  v244 = vmlaq_s32(vmulq_s32(v225, v241), v230, v239);
  v245 = vmlaq_s32(vmulq_s32(v225, v243), v230, v241);
  v584 = vmlaq_s32(vmulq_s32(vqsubq_s32(v484, v213), v241), vqsubq_s32(v492, v212), v239);
  v493 = vmlaq_s32(vmulq_s32(v233, v239), v237, v238);
  v246 = vmlaq_s32(vmulq_s32(v233, v241), v237, v239);
  v506 = vmlaq_s32(vmulq_s32(v234, v241), v236, v239);
  v501 = vmlaq_s32(vmulq_s32(v234, v243), v236, v241);
  v247 = vqsubq_s32(v538, v536);
  v248 = vqsubq_s32(v542, v540);
  v249 = vqsubq_s32(v589, v587);
  v250 = vqsubq_s32(v464, v463);
  v251 = vrshrq_n_s32(v568, 0xDuLL);
  v252 = vrshrq_n_s32(v478, 0xDuLL);
  v253 = vrshrq_n_s32(v210, 0xDuLL);
  v254 = vqaddq_s32(v247, v251);
  v255 = vqaddq_s32(v254, v252);
  v256 = vqaddq_s32(v255, v253);
  v257 = vqsubq_s32(v255, v253);
  v258 = vrshrq_n_s32(v570, 0xDuLL);
  v259 = vrshrq_n_s32(v482, 0xDuLL);
  v260 = vrshrq_n_s32(v208, 0xDuLL);
  v261 = vqaddq_s32(v248, v258);
  v262 = vqaddq_s32(v261, v259);
  v263 = vqsubq_s32(v262, v260);
  v264 = vqaddq_s32(v262, v260);
  v265 = vrshrq_n_s32(v552, 0xDuLL);
  v266 = vrshrq_n_s32(v550, 0xDuLL);
  v267 = vrshrq_n_s32(v475, 0xDuLL);
  v268 = vrshrq_n_s32(v473, 0xDuLL);
  v270 = v79[2];
  v269 = v79[3];
  v271 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v270.i8, 0));
  v272 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v270.i8, 1));
  v273 = vqaddq_s32(v249, v266);
  v274 = vqaddq_s32(v250, v265);
  v590 = vmlaq_s32(vmulq_s32(vqaddq_s32(v273, v268), v272), vqaddq_s32(v274, v267), v271);
  v275 = vmlaq_s32(vmulq_s32(v256, v272), v264, v271);
  v276 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v270.i8, 2));
  v277 = vmlaq_s32(vmulq_s32(v256, v276), v264, v272);
  v278 = vmlaq_s32(vmulq_s32(v257, v276), v263, v272);
  v279 = vmlaq_s32(vmulq_s32(v257, vmovl_s16(vdup_lane_s16(*(int16x4_t *)v270.i8, 3))), v263, v276);
  v280 = vqsubq_s32(v254, v252);
  v281 = vqsubq_s32(v261, v259);
  v282 = vqsubq_s32(v273, v268);
  v283 = vqsubq_s32(v274, v267);
  v284 = vrshrq_n_s32(v487, 0xDuLL);
  v285 = vqsubq_s32(v280, v284);
  v286 = vqaddq_s32(v280, v284);
  v287 = vrshrq_n_s32(v495, 0xDuLL);
  v288 = vqaddq_s32(v281, v287);
  v289 = vqsubq_s32(v281, v287);
  v290 = vmovl_s16(vdup_laneq_s16(v269, 4));
  v291 = vmovl_s16(vdup_laneq_s16(v269, 7));
  v588 = vmlaq_s32(vmulq_s32(v282, v291), v283, v290);
  v292 = vmlaq_s32(vmulq_s32(v285, v290), v289, vmovl_s16(vdup_laneq_s16(v269, 5)));
  v293 = vmlaq_s32(vmulq_s32(v285, v291), v289, v290);
  v496 = vmlaq_s32(vmulq_s32(v286, v291), v288, v290);
  v488 = vmlaq_s32(vmulq_s32(v286, vmovl_s16(vdup_laneq_s16(v269, 6))), v288, v291);
  v294 = vqsubq_s32(v247, v251);
  v295 = vqsubq_s32(v248, v258);
  v296 = vqsubq_s32(v249, v266);
  v297 = vqsubq_s32(v250, v265);
  v298 = vrshrq_n_s32(v514, 0xDuLL);
  v299 = vrshrq_n_s32(v242, 0xDuLL);
  v300 = vqsubq_s32(v294, v298);
  v301 = vqaddq_s32(v300, v299);
  v302 = vqsubq_s32(v300, v299);
  v303 = vrshrq_n_s32(v516, 0xDuLL);
  v304 = vrshrq_n_s32(v240, 0xDuLL);
  v305 = vqsubq_s32(v295, v303);
  v306 = vqsubq_s32(v305, v304);
  v307 = vqaddq_s32(v305, v304);
  v308 = vrshrq_n_s32(v512, 0xDuLL);
  v309 = vrshrq_n_s32(v510, 0xDuLL);
  v310 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v269.i8, 0));
  v311 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v269.i8, 1));
  v571 = vmlaq_s32(vmulq_s32(vqsubq_s32(v296, v309), v311), vqsubq_s32(v297, v308), v310);
  v312 = vmlaq_s32(vmulq_s32(v301, v311), v307, v310);
  v313 = vmovl_s16(vdup_lane_s16(*(int16x4_t *)v269.i8, 2));
  v314 = vmlaq_s32(vmulq_s32(v301, v313), v307, v311);
  v541 = vmlaq_s32(vmulq_s32(v302, v313), v306, v311);
  v537 = vmlaq_s32(vmulq_s32(v302, vmovl_s16(vdup_lane_s16(*(int16x4_t *)v269.i8, 3))), v306, v313);
  v315 = vqaddq_s32(v294, v298);
  v316 = vqaddq_s32(v295, v303);
  v317 = vqaddq_s32(v296, v309);
  v318 = vqaddq_s32(v297, v308);
  v319 = vrshrq_n_s32(v245, 0xDuLL);
  v320 = vqsubq_s32(v315, v319);
  v321 = vqaddq_s32(v315, v319);
  v322 = vrshrq_n_s32(v244, 0xDuLL);
  v323 = vqaddq_s32(v316, v322);
  v324 = vqsubq_s32(v316, v322);
  v325 = vmovl_s16(vdup_laneq_s16(v270, 4));
  v326 = vmovl_s16(vdup_laneq_s16(v270, 7));
  v569 = vmlaq_s32(vmulq_s32(v317, v326), v318, v325);
  v543 = vmlaq_s32(vmulq_s32(v320, v325), v324, vmovl_s16(vdup_laneq_s16(v270, 5)));
  v539 = vmlaq_s32(vmulq_s32(v320, v326), v324, v325);
  v553 = vmlaq_s32(vmulq_s32(v321, v326), v323, v325);
  v551 = vmlaq_s32(vmulq_s32(v321, vmovl_s16(vdup_laneq_s16(v270, 6))), v323, v326);
  v327 = vqsubq_s32(v591, v593);
  v328 = vqsubq_s32(v558, v556);
  v329 = vrshrq_n_s32(v573, 0xDuLL);
  v330 = vrshrq_n_s32(v518, 0xDuLL);
  v331 = v79[4];
  v332 = v79[5];
  v333 = vrshrq_n_s32(v490, 0xDuLL);
  v334 = vqaddq_s32(v327, v329);
  v335 = vqaddq_s32(v334, v330);
  v336 = vrshrq_n_s32(v575, 0xDuLL);
  v337 = vrshrq_n_s32(v519, 0xDuLL);
  v338 = vrshrq_n_s32(v498, 0xDuLL);
  v339 = vqaddq_s32(v328, v336);
  v340 = vqaddq_s32(v339, v337);
  v576 = vmlaq_s32(vmulq_s32(vqaddq_s32(v335, v333), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v331.i8, 1))), vqaddq_s32(v340, v338), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v331.i8, 0)));
  v341 = v79[7];
  v594 = vmlaq_s32(vmulq_s32(vqsubq_s32(v335, v333), vmovl_s16(vdup_laneq_s16(v341, 7))), vqsubq_s32(v340, v338), vmovl_s16(vdup_laneq_s16(v341, 4)));
  v342 = vqsubq_s32(v334, v330);
  v343 = vqsubq_s32(v339, v337);
  v344 = vrshrq_n_s32(v503, 0xDuLL);
  v345 = v79[6];
  v346 = vrshrq_n_s32(v508, 0xDuLL);
  v592 = vmlaq_s32(vmulq_s32(vqsubq_s32(v342, v344), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v345.i8, 1))), vqsubq_s32(v343, v346), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v345.i8, 0)));
  v574 = vmlaq_s32(vmulq_s32(vqaddq_s32(v342, v344), vmovl_s16(vdup_laneq_s16(v332, 7))), vqaddq_s32(v343, v346), vmovl_s16(vdup_laneq_s16(v332, 4)));
  v347 = vqsubq_s32(v327, v329);
  v348 = vqsubq_s32(v328, v336);
  v349 = vrshrq_n_s32(v526, 0xDuLL);
  v350 = vrshrq_n_s32(v246, 0xDuLL);
  v351 = vqsubq_s32(v347, v349);
  v352 = vrshrq_n_s32(v531, 0xDuLL);
  v353 = vrshrq_n_s32(v493, 0xDuLL);
  v354 = vqsubq_s32(v348, v352);
  v355 = vmlaq_s32(vmulq_s32(vqaddq_s32(v351, v350), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v332.i8, 1))), vqaddq_s32(v354, v353), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v332.i8, 0)));
  v559 = vmlaq_s32(vmulq_s32(vqsubq_s32(v351, v350), vmovl_s16(vdup_laneq_s16(v345, 7))), vqsubq_s32(v354, v353), vmovl_s16(vdup_laneq_s16(v345, 4)));
  v356 = vqaddq_s32(v347, v349);
  v357 = vqaddq_s32(v348, v352);
  v358 = vrshrq_n_s32(v501, 0xDuLL);
  v359 = vrshrq_n_s32(v506, 0xDuLL);
  v557 = vmlaq_s32(vmulq_s32(vqsubq_s32(v356, v358), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v341.i8, 1))), vqsubq_s32(v357, v359), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v341.i8, 0)));
  v360 = vmlaq_s32(vmulq_s32(vqaddq_s32(v356, v358), vmovl_s16(vdup_laneq_s16(v331, 7))), vqaddq_s32(v357, v359), vmovl_s16(vdup_laneq_s16(v331, 4)));
  v361 = vqsubq_s32(v566, v565);
  v362 = vqsubq_s32(*a1, v567);
  v363 = vrshrq_n_s32(v577, 0xDuLL);
  v364 = vrshrq_n_s32(v533, 0xDuLL);
  v365 = vrshrq_n_s32(v521, 0xDuLL);
  v366 = vrshrq_n_s32(v277, 0xDuLL);
  v368 = v79[8];
  v367 = v79[9];
  v369 = vqaddq_s32(v361, v363);
  v370 = vqaddq_s32(v369, v364);
  v371 = vqaddq_s32(v370, v365);
  v372 = vrshrq_n_s32(v578, 0xDuLL);
  v373 = vrshrq_n_s32(v555, 0xDuLL);
  v374 = vrshrq_n_s32(v535, 0xDuLL);
  v375 = vrshrq_n_s32(v275, 0xDuLL);
  v376 = vqaddq_s32(v362, v372);
  v377 = vqaddq_s32(v376, v373);
  v378 = vqaddq_s32(v377, v374);
  v379 = vmlaq_s32(vmulq_s32(vqaddq_s32(v371, v366), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v368.i8, 1))), vqaddq_s32(v378, v375), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v368.i8, 0)));
  v380 = vqsubq_s32(v378, v375);
  v381 = v79[15];
  v382 = vmlaq_s32(vmulq_s32(vqsubq_s32(v371, v366), vmovl_s16(vdup_laneq_s16(v381, 7))), v380, vmovl_s16(vdup_laneq_s16(v381, 4)));
  v383 = vqsubq_s32(v370, v365);
  v384 = vqsubq_s32(v377, v374);
  v385 = vrshrq_n_s32(v279, 0xDuLL);
  v386 = v79[12];
  v387 = v79[13];
  v388 = vrshrq_n_s32(v278, 0xDuLL);
  v389 = vmlaq_s32(vmulq_s32(vqsubq_s32(v383, v385), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v386.i8, 1))), vqsubq_s32(v384, v388), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v386.i8, 0)));
  v390 = vqaddq_s32(v384, v388);
  v391 = v79[11];
  v392 = vmlaq_s32(vmulq_s32(vqaddq_s32(v383, v385), vmovl_s16(vdup_laneq_s16(v391, 7))), v390, vmovl_s16(vdup_laneq_s16(v391, 4)));
  v393 = vqsubq_s32(v369, v364);
  v394 = vqsubq_s32(v376, v373);
  v395 = vrshrq_n_s32(v547, 0xDuLL);
  v396 = vrshrq_n_s32(v293, 0xDuLL);
  v397 = v79[10];
  v398 = vqsubq_s32(v393, v395);
  v399 = vrshrq_n_s32(v549, 0xDuLL);
  v400 = vrshrq_n_s32(v292, 0xDuLL);
  v401 = vqsubq_s32(v394, v399);
  v402 = vmlaq_s32(vmulq_s32(vqaddq_s32(v398, v396), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v397.i8, 1))), vqaddq_s32(v401, v400), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v397.i8, 0)));
  v403 = vmlaq_s32(vmulq_s32(vqsubq_s32(v398, v396), vmovl_s16(vdup_laneq_s16(v387, 7))), vqsubq_s32(v401, v400), vmovl_s16(vdup_laneq_s16(v387, 4)));
  v404 = vqaddq_s32(v393, v395);
  v405 = vqaddq_s32(v394, v399);
  v406 = v79[14];
  v407 = vrshrq_n_s32(v488, 0xDuLL);
  v408 = vrshrq_n_s32(v496, 0xDuLL);
  v409 = vmlaq_s32(vmulq_s32(vqsubq_s32(v404, v407), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v406.i8, 1))), vqsubq_s32(v405, v408), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v406.i8, 0)));
  v410 = vmlaq_s32(vmulq_s32(vqaddq_s32(v404, v407), vmovl_s16(vdup_laneq_s16(v367, 7))), vqaddq_s32(v405, v408), vmovl_s16(vdup_laneq_s16(v367, 4)));
  v411 = vqsubq_s32(v361, v363);
  v412 = vqsubq_s32(v362, v372);
  v413 = vrshrq_n_s32(v562, 0xDuLL);
  v414 = vrshrq_n_s32(v524, 0xDuLL);
  v415 = vrshrq_n_s32(v314, 0xDuLL);
  v416 = vqsubq_s32(v411, v413);
  v417 = vqaddq_s32(v416, v414);
  v418 = vrshrq_n_s32(v564, 0xDuLL);
  v419 = vrshrq_n_s32(v529, 0xDuLL);
  v420 = vrshrq_n_s32(v312, 0xDuLL);
  v421 = vqsubq_s32(v412, v418);
  v422 = vqaddq_s32(v421, v419);
  v423 = vmlaq_s32(vmulq_s32(vqaddq_s32(v417, v415), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v367.i8, 1))), vqaddq_s32(v422, v420), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v367.i8, 0)));
  v424 = vmlaq_s32(vmulq_s32(vqsubq_s32(v417, v415), vmovl_s16(vdup_laneq_s16(v406, 7))), vqsubq_s32(v422, v420), vmovl_s16(vdup_laneq_s16(v406, 4)));
  v425 = vqsubq_s32(v416, v414);
  v426 = vqsubq_s32(v421, v419);
  v427 = vrshrq_n_s32(v537, 0xDuLL);
  v428 = vrshrq_n_s32(v541, 0xDuLL);
  v429 = vmlaq_s32(vmulq_s32(vqsubq_s32(v425, v427), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v387.i8, 1))), vqsubq_s32(v426, v428), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v387.i8, 0)));
  v430 = vmlaq_s32(vmulq_s32(vqaddq_s32(v425, v427), vmovl_s16(vdup_laneq_s16(v397, 7))), vqaddq_s32(v426, v428), vmovl_s16(vdup_laneq_s16(v397, 4)));
  v431 = vqaddq_s32(v411, v413);
  v432 = vqaddq_s32(v412, v418);
  v433 = vrshrq_n_s32(v545, 0xDuLL);
  v434 = vrshrq_n_s32(v539, 0xDuLL);
  v435 = vqsubq_s32(v431, v433);
  v436 = vrshrq_n_s32(v561, 0xDuLL);
  v437 = vrshrq_n_s32(v543, 0xDuLL);
  v438 = vqsubq_s32(v432, v436);
  v439 = vmlaq_s32(vmulq_s32(vqaddq_s32(v435, v434), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v391.i8, 1))), vqaddq_s32(v438, v437), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v391.i8, 0)));
  v440 = vqaddq_s32(v431, v433);
  v441 = vqaddq_s32(v432, v436);
  v442 = vrshrq_n_s32(v551, 0xDuLL);
  v443 = vrshrq_n_s32(v553, 0xDuLL);
  *a2 = vrshrq_n_s32(v572, 0xDuLL);
  a2[1] = vrshrq_n_s32(v379, 0xDuLL);
  a2[2] = vrshrq_n_s32(v576, 0xDuLL);
  a2[3] = vrshrq_n_s32(vmlaq_s32(vmulq_s32(vqaddq_s32(v440, v442), vmovl_s16(vdup_laneq_s16(v368, 7))), vqaddq_s32(v441, v443), vmovl_s16(vdup_laneq_s16(v368, 4))), 0xDuLL);
  a2[4] = vrshrq_n_s32(v590, 0xDuLL);
  a2[5] = vrshrq_n_s32(v423, 0xDuLL);
  a2[6] = vrshrq_n_s32(v360, 0xDuLL);
  a2[7] = vrshrq_n_s32(v410, 0xDuLL);
  a2[8] = vrshrq_n_s32(v586, 0xDuLL);
  a2[9] = vrshrq_n_s32(v402, 0xDuLL);
  a2[10] = vrshrq_n_s32(v355, 0xDuLL);
  a2[11] = vrshrq_n_s32(v430, 0xDuLL);
  a2[12] = vrshrq_n_s32(v569, 0xDuLL);
  a2[13] = vrshrq_n_s32(v439, 0xDuLL);
  a2[14] = vrshrq_n_s32(v574, 0xDuLL);
  a2[15] = vrshrq_n_s32(v392, 0xDuLL);
  a2[16] = vrshrq_n_s32(v581, 0xDuLL);
  a2[17] = vrshrq_n_s32(v389, 0xDuLL);
  a2[18] = vrshrq_n_s32(v592, 0xDuLL);
  a2[19] = vrshrq_n_s32(vmlaq_s32(vmulq_s32(vqsubq_s32(v435, v434), vmovl_s16(vdup_laneq_s16(v386, 7))), vqsubq_s32(v438, v437), vmovl_s16(vdup_laneq_s16(v386, 4))), 0xDuLL);
  a2[20] = vrshrq_n_s32(v571, 0xDuLL);
  a2[21] = vrshrq_n_s32(v429, 0xDuLL);
  a2[22] = vrshrq_n_s32(v559, 0xDuLL);
  a2[23] = vrshrq_n_s32(v403, 0xDuLL);
  a2[24] = vrshrq_n_s32(v584, 0xDuLL);
  a2[25] = vrshrq_n_s32(v409, 0xDuLL);
  a2[26] = vrshrq_n_s32(v557, 0xDuLL);
  a2[27] = vrshrq_n_s32(v424, 0xDuLL);
  a2[28] = vrshrq_n_s32(v588, 0xDuLL);
  a2[29] = vrshrq_n_s32(vmlaq_s32(vmulq_s32(vqsubq_s32(v440, v442), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v381.i8, 1))), vqsubq_s32(v441, v443), vmovl_s16(vdup_lane_s16(*(int16x4_t *)v381.i8, 0))), 0xDuLL);
  result = vrshrq_n_s32(v594, 0xDuLL);
  a2[30] = result;
  a2[31] = vrshrq_n_s32(v382, 0xDuLL);
  return result;
}

int16x4_t fdct4x8_col_neon(int16x4_t *a1, int16x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x4_t v6;
  int16x4_t *v7;
  int16x4_t v8;
  int16x4_t *v9;
  int16x4_t v10;
  int16x4_t *v11;
  int16x4_t v12;
  int16x4_t *v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t result;

  v4 = 2 * a3;
  v5 = (int16x4_t *)((char *)a1 + v4 + v4);
  v6 = *v5;
  v7 = (int16x4_t *)((char *)v5 + v4);
  v8 = *v7;
  v9 = (int16x4_t *)((char *)v7 + v4);
  v10 = *v9;
  v11 = (int16x4_t *)((char *)v9 + v4);
  v12 = *v11;
  v13 = (int16x4_t *)((char *)v11 + v4);
  v14 = vshl_n_s16(*a1, 2uLL);
  v15 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v4), 2uLL);
  v16 = vshl_n_s16(v6, 2uLL);
  v17 = vshl_n_s16(v8, 2uLL);
  v18 = vshl_n_s16(v10, 2uLL);
  v19 = vshl_n_s16(v12, 2uLL);
  v20 = vshl_n_s16(*v13, 2uLL);
  v21 = vshl_n_s16(*(int16x4_t *)((char *)v13 + v4), 2uLL);
  v23 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v22 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v24 = vqadd_s16(v14, v21);
  v25 = vqadd_s16(v15, v20);
  v26 = vqadd_s16(v16, v19);
  v27 = vqadd_s16(v17, v18);
  v28 = vqsub_s16(v17, v18);
  v29 = vqsub_s16(v16, v19);
  v30 = vqsub_s16(v15, v20);
  v31 = vqsub_s16(v14, v21);
  v32 = vqadd_s16(v24, v27);
  v33 = vqadd_s16(v25, v26);
  v34 = vqsub_s16(v25, v26);
  v35 = vqsub_s16(v24, v27);
  v36 = vmlal_lane_s16(vmull_lane_s16(v29, *(int16x4_t *)v23.i8, 1), v30, *(int16x4_t *)v23.i8, 0);
  v37 = vmlal_lane_s16(vmull_lane_s16(v29, *(int16x4_t *)v23.i8, 2), v30, *(int16x4_t *)v23.i8, 1);
  v38 = vqrshrn_n_s32(v36, 0xDuLL);
  *(int16x4_t *)v37.i8 = vqrshrn_n_s32(v37, 0xDuLL);
  *a2 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v33, *(int16x4_t *)v23.i8, 1), v32, *(int16x4_t *)v23.i8, 0), 0xDuLL);
  a2[4] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v33, *(int16x4_t *)v23.i8, 2), v32, *(int16x4_t *)v23.i8, 1), 0xDuLL);
  a2[2] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v34, v23, 5), v35, v23, 4), 0xDuLL);
  a2[6] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v34, v23, 6), v35, v23, 5), 0xDuLL);
  *(int16x4_t *)v23.i8 = vqadd_s16(v28, *(int16x4_t *)v37.i8);
  *(int16x4_t *)v37.i8 = vqsub_s16(v28, *(int16x4_t *)v37.i8);
  v39 = vqsub_s16(v31, v38);
  v40 = vqadd_s16(v31, v38);
  a2[1] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v22.i8, 1), v40, *(int16x4_t *)v22.i8, 0), 0xDuLL);
  a2[7] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v22.i8, 2), v40, *(int16x4_t *)v22.i8, 1), 0xDuLL);
  a2[5] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v22, 4), v39, v22, 5), 0xDuLL);
  result = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v22, 7), v39, v22, 4), 0xDuLL);
  a2[3] = result;
  return result;
}

int16x4_t fadst4x8_col_neon(int16x4_t *a1, int16x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x4_t v6;
  int16x4_t *v7;
  int16x4_t v8;
  int16x4_t *v9;
  int16x4_t v10;
  int16x4_t *v11;
  int16x4_t v12;
  int16x4_t *v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t result;

  v4 = 2 * a3;
  v5 = (int16x4_t *)((char *)a1 + v4 + v4);
  v6 = *v5;
  v7 = (int16x4_t *)((char *)v5 + v4);
  v8 = *v7;
  v9 = (int16x4_t *)((char *)v7 + v4);
  v10 = *v9;
  v11 = (int16x4_t *)((char *)v9 + v4);
  v12 = *v11;
  v13 = (int16x4_t *)((char *)v11 + v4);
  v14 = vshl_n_s16(*a1, 2uLL);
  v15 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v4), 2uLL);
  v16 = vshl_n_s16(v6, 2uLL);
  v17 = vshl_n_s16(v8, 2uLL);
  v18 = vshl_n_s16(v10, 2uLL);
  v19 = vshl_n_s16(v12, 2uLL);
  v20 = vshl_n_s16(*v13, 2uLL);
  v21 = vshl_n_s16(*(int16x4_t *)((char *)v13 + v4), 2uLL);
  v22 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v23 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v24 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v25 = vmlal_lane_s16(vmull_lane_s16(v17, *(int16x4_t *)v22.i8, 3), v18, *(int16x4_t *)v22.i8, 0);
  v26 = vmlal_lane_s16(vmull_lane_s16(v17, *(int16x4_t *)v22.i8, 2), v18, *(int16x4_t *)v22.i8, 3);
  v27 = vqrshrn_n_s32(v25, 0xDuLL);
  *(int16x4_t *)v26.i8 = vqrshrn_n_s32(v26, 0xDuLL);
  v28 = vmlal_lane_s16(vmull_lane_s16(v19, *(int16x4_t *)v22.i8, 1), v16, *(int16x4_t *)v22.i8, 0);
  v29 = vmlal_lane_s16(vmull_lane_s16(v19, *(int16x4_t *)v22.i8, 2), v16, *(int16x4_t *)v22.i8, 1);
  v30 = vqrshrn_n_s32(v28, 0xDuLL);
  *(int16x4_t *)v29.i8 = vqrshrn_n_s32(v29, 0xDuLL);
  *(int16x4_t *)v28.i8 = vqadd_s16(v14, v27);
  v31 = vqsub_s16(*(int16x4_t *)v26.i8, v21);
  v32 = vqsub_s16(v14, v27);
  *(int16x4_t *)v26.i8 = vqadd_s16(v21, *(int16x4_t *)v26.i8);
  v33 = vqsub_s16(*(int16x4_t *)v29.i8, v15);
  v34 = vqadd_s16(v20, v30);
  *(int16x4_t *)v29.i8 = vqadd_s16(v15, *(int16x4_t *)v29.i8);
  v35 = vqsub_s16(v20, v30);
  v36 = vmlal_laneq_s16(vmull_laneq_s16(v34, v22, 5), v33, v22, 4);
  v37 = vmlal_laneq_s16(vmull_laneq_s16(v34, v22, 6), v33, v22, 5);
  v38 = vqrshrn_n_s32(v36, 0xDuLL);
  *(int16x4_t *)v37.i8 = vqrshrn_n_s32(v37, 0xDuLL);
  v39 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v29.i8, v22, 5), v35, v22, 4);
  v40 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v29.i8, v22, 6), v35, v22, 5);
  *(int16x4_t *)v22.i8 = vqrshrn_n_s32(v39, 0xDuLL);
  *(int16x4_t *)v40.i8 = vqrshrn_n_s32(v40, 0xDuLL);
  v41 = vqadd_s16(*(int16x4_t *)v28.i8, v38);
  *(int16x4_t *)v39.i8 = vqadd_s16(v31, *(int16x4_t *)v37.i8);
  v42 = vqadd_s16(v32, *(int16x4_t *)v22.i8);
  v43 = vqsub_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v26.i8);
  v44 = vqsub_s16(*(int16x4_t *)v28.i8, v38);
  *(int16x4_t *)v37.i8 = vqsub_s16(v31, *(int16x4_t *)v37.i8);
  *(int16x4_t *)v22.i8 = vqsub_s16(v32, *(int16x4_t *)v22.i8);
  *(int16x4_t *)v26.i8 = vqadd_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v40.i8);
  a2[7] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v23.i8, 1), v41, *(int16x4_t *)v23.i8, 0), 0xDuLL);
  *a2 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v23.i8, 2), v41, *(int16x4_t *)v23.i8, 1), 0xDuLL);
  a2[5] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v43, *(int16x4_t *)v24.i8, 1), v42, *(int16x4_t *)v24.i8, 0), 0xDuLL);
  a2[2] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v43, *(int16x4_t *)v24.i8, 2), v42, *(int16x4_t *)v24.i8, 1), 0xDuLL);
  a2[3] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v24, 4), v44, v24, 5), 0xDuLL);
  a2[4] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v24, 7), v44, v24, 4), 0xDuLL);
  a2[6] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v26.i8, v23, 5), *(int16x4_t *)v22.i8, v23, 4), 0xDuLL);
  result = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v26.i8, v23, 6), *(int16x4_t *)v22.i8, v23, 5), 0xDuLL);
  a2[1] = result;
  return result;
}

int16x4_t fidentity4x8_col_neon(int16x4_t *a1, int16x4_t *a2, int a3)
{
  uint64_t v3;
  int16x4_t *v4;
  int16x4_t v5;
  int16x4_t *v6;
  int16x4_t v7;
  int16x4_t *v8;
  int16x4_t v9;
  int16x4_t *v10;
  int16x4_t v11;
  int16x4_t *v12;
  int16x4_t result;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;

  v3 = 2 * a3;
  v4 = (int16x4_t *)((char *)a1 + v3 + v3);
  v5 = *v4;
  v6 = (int16x4_t *)((char *)v4 + v3);
  v7 = *v6;
  v8 = (int16x4_t *)((char *)v6 + v3);
  v9 = *v8;
  v10 = (int16x4_t *)((char *)v8 + v3);
  v11 = *v10;
  v12 = (int16x4_t *)((char *)v10 + v3);
  result = vshl_n_s16(*a1, 3uLL);
  v14 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v3), 3uLL);
  v15 = vshl_n_s16(*v12, 3uLL);
  v16 = vshl_n_s16(*(int16x4_t *)((char *)v12 + v3), 3uLL);
  *a2 = result;
  a2[1] = v14;
  a2[2] = vshl_n_s16(v5, 3uLL);
  a2[3] = vshl_n_s16(v7, 3uLL);
  a2[4] = vshl_n_s16(v9, 3uLL);
  a2[5] = vshl_n_s16(v11, 3uLL);
  a2[6] = v15;
  a2[7] = v16;
  return result;
}

int32x4_t fdct8x4_row_rect_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int32x4_t *v21;
  int32x4_t result;
  int32x4_t *v23;

  v4 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = vqaddq_s16(*a1, v6);
  v9 = vqaddq_s16(v5, v7);
  v10 = vqsubq_s16(v5, v7);
  v11 = vqsubq_s16(*a1, v6);
  v12 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v4.i8, 1), *(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8, 0);
  v13 = vmlal_high_lane_s16(vmull_high_lane_s16(v9, *(int16x4_t *)v4.i8, 1), v8, *(int16x4_t *)v4.i8, 0);
  v14 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v4.i8, 2), *(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8, 1);
  v15 = vmlal_high_lane_s16(vmull_high_lane_s16(v9, *(int16x4_t *)v4.i8, 2), v8, *(int16x4_t *)v4.i8, 1);
  *(int16x4_t *)v8.i8 = vrshrn_n_s32(v14, 0xDuLL);
  v16 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v10.i8, v4, 5), *(int16x4_t *)v11.i8, v4, 4);
  v17 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v10, v4, 5), v11, v4, 4);
  v18 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v10.i8, v4, 6), *(int16x4_t *)v11.i8, v4, 5);
  v19 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v10, v4, 6), v11, v4, 5);
  *(int16x4_t *)v11.i8 = vrshrn_n_s32(v17, 0xDuLL);
  *(int16x4_t *)v17.i8 = vdup_n_s16(0x16A1u);
  *a2 = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v12, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  a2[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v13, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  v20 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v20 = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v16, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  v20[1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v17.i8), 0xCuLL);
  v21 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v21 = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v17.i8), 0xCuLL);
  v21[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v15, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  result = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v18, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  v23 = (int32x4_t *)((char *)a2 + 12 * a3);
  *v23 = result;
  v23[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v19, 0xDuLL), *(int16x4_t *)v17.i8), 0xCuLL);
  return result;
}

int32x4_t fadst8x4_row_rect_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x4_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t v18;
  int32x4_t *v19;
  int32x4_t *v20;
  int32x4_t result;
  int32x4_t *v22;

  v4 = av1_sinpi_arr_q13_data[a4 - 10];
  v5 = a1[1];
  v6 = vqaddq_s16(*a1, v5);
  v8 = a1[2];
  v7 = a1[3];
  v9 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)a1->i8, v4, 0), *(int16x4_t *)v5.i8, v4, 1), *(int16x4_t *)v7.i8, v4, 3), *(int16x4_t *)v8.i8, v4, 2);
  v10 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(*a1, v4, 0), v5, v4, 1), v7, v4, 3), v8, v4, 2);
  v11 = vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)a1->i8, v4, 3), *(int16x4_t *)v8.i8, v4, 2), *(int16x4_t *)v5.i8, v4, 0), *(int16x4_t *)v7.i8, v4, 1);
  v12 = vmlal_high_lane_s16(vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmull_high_lane_s16(*a1, v4, 3), v8, v4, 2), v5, v4, 0), v7, v4, 1);
  v13 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v6.i8, v4, 2), *(int16x4_t *)v7.i8, v4, 2);
  v14 = vmlsl_high_lane_s16(vmull_high_lane_s16(v6, v4, 2), v7, v4, 2);
  v15 = vmul_s16(v4, (int16x4_t)0x3000300030003);
  v16 = vmlal_lane_s16(vsubq_s32(v11, v9), *(int16x4_t *)v8.i8, v15, 2);
  v17 = vmlal_high_lane_s16(vsubq_s32(v12, v10), v8, v15, 2);
  v18 = vrshrn_n_s32(v9, 0xDuLL);
  *(int16x4_t *)v9.i8 = vrshrn_n_s32(v10, 0xDuLL);
  *(int16x4_t *)v10.i8 = vrshrn_n_s32(v13, 0xDuLL);
  *(int16x4_t *)v13.i8 = vdup_n_s16(0x16A1u);
  *a2 = vrshrq_n_s32(vmull_s16(v18, *(int16x4_t *)v13.i8), 0xCuLL);
  a2[1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v13.i8), 0xCuLL);
  v19 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v19 = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v13.i8), 0xCuLL);
  v19[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v14, 0xDuLL), *(int16x4_t *)v13.i8), 0xCuLL);
  v20 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v20 = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v11, 0xDuLL), *(int16x4_t *)v13.i8), 0xCuLL);
  v20[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v12, 0xDuLL), *(int16x4_t *)v13.i8), 0xCuLL);
  result = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v16, 0xDuLL), *(int16x4_t *)v13.i8), 0xCuLL);
  v22 = (int32x4_t *)((char *)a2 + 12 * a3);
  *v22 = result;
  v22[1] = vrshrq_n_s32(vmull_s16(vrshrn_n_s32(v17, 0xDuLL), *(int16x4_t *)v13.i8), 0xCuLL);
  return result;
}

int32x4_t fidentity8x4_row_rect_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int32x4_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t v10;
  int32x4_t *v11;
  int32x4_t result;

  v3 = vdupq_n_s16(0x16A1u);
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_high_s16(*a1, v3), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  *a2 = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  a2[1] = v7;
  v8 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v8 = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v3.i8), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  v8[1] = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_high_s16(v4, v3), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  v9 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v9 = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v3.i8), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  v9[1] = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_high_s16(v5, v3), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  v10 = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v3.i8), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  v11 = (int32x4_t *)((char *)a2 + 12 * a3);
  result = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmull_high_s16(v6, v3), 0xCuLL), *(int16x4_t *)v3.i8), 0xCuLL);
  *v11 = v10;
  v11[1] = result;
  return result;
}

int16x8_t fdct8x4_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x4_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v9 = vqaddq_s16(v4, v7);
  v10 = vqaddq_s16(v5, v6);
  v11 = vqsubq_s16(v5, v6);
  v12 = vqsubq_s16(v4, v7);
  v13 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v8, 1), *(int16x4_t *)v9.i8, *v8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v8, 1), v9, *v8, 0), 0xDuLL);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v8, 2), *(int16x4_t *)v9.i8, *v8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v8, 2), v9, *v8, 1), 0xDuLL);
  v15 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v11.i8, *(int16x8_t *)v8->i8, 5), *(int16x4_t *)v12.i8, *(int16x8_t *)v8->i8, 4);
  v16 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v11, *(int16x8_t *)v8->i8, 5), v12, *(int16x8_t *)v8->i8, 4);
  v17 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v11.i8, *(int16x8_t *)v8->i8, 6), *(int16x4_t *)v12.i8, *(int16x8_t *)v8->i8, 5);
  v18 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v11, *(int16x8_t *)v8->i8, 6), v12, *(int16x8_t *)v8->i8, 5);
  result = vrshrn_high_n_s32(vrshrn_n_s32(v15, 0xDuLL), v16, 0xDuLL);
  *a2 = v13;
  a2[1] = result;
  a2[2] = v14;
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xDuLL), v18, 0xDuLL);
  return result;
}

int16x8_t fadst8x4_col_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x4_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t result;

  v4 = vshlq_n_s16(*a1, 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v8 = av1_sinpi_arr_q13_data[a4 - 10];
  v9 = vqaddq_s16(v4, v5);
  v10 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v4.i8, v8, 0), *(int16x4_t *)v5.i8, v8, 1), *(int16x4_t *)v7.i8, v8, 3), *(int16x4_t *)v6.i8, v8, 2);
  v11 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(v4, v8, 0), v5, v8, 1), v7, v8, 3), v6, v8, 2);
  v12 = vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v4.i8, v8, 3), *(int16x4_t *)v6.i8, v8, 2), *(int16x4_t *)v5.i8, v8, 0), *(int16x4_t *)v7.i8, v8, 1);
  v13 = vmlal_high_lane_s16(vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmull_high_lane_s16(v4, v8, 3), v6, v8, 2), v5, v8, 0), v7, v8, 1);
  v14 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v9.i8, v8, 2), *(int16x4_t *)v7.i8, v8, 2);
  v15 = vmlsl_high_lane_s16(vmull_high_lane_s16(v9, v8, 2), v7, v8, 2);
  v16 = vmul_s16(v8, (int16x4_t)0x3000300030003);
  v17 = vmlal_lane_s16(vsubq_s32(v12, v10), *(int16x4_t *)v6.i8, v16, 2);
  v18 = vmlal_high_lane_s16(vsubq_s32(v13, v11), v6, v16, 2);
  *a2 = vrshrn_high_n_s32(vrshrn_n_s32(v10, 0xDuLL), v11, 0xDuLL);
  a2[1] = vrshrn_high_n_s32(vrshrn_n_s32(v14, 0xDuLL), v15, 0xDuLL);
  result = vrshrn_high_n_s32(vrshrn_n_s32(v12, 0xDuLL), v13, 0xDuLL);
  a2[2] = result;
  a2[3] = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xDuLL), v18, 0xDuLL);
  return result;
}

int16x8_t fidentity8x4_col_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t result;

  v3 = vshlq_n_s16(*a1, 2uLL);
  v4 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
  v5 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
  v6 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
  v7 = vdupq_n_s16(0x16A1u);
  *a2 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v3, v7), 0xCuLL);
  a2[1] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v4, v7), 0xCuLL);
  result = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v5, v7), 0xCuLL);
  a2[2] = result;
  a2[3] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v6, v7), 0xCuLL);
  return result;
}

int32x4_t fdct4x8_row_rect_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x4_t *v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x4_t v30;
  int32x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t result;

  v4 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v5 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v6 = a1[1];
  v8 = a1[6];
  v7 = a1[7];
  v9 = vqadd_s16(*a1, v7);
  v10 = vqadd_s16(v6, v8);
  v11 = a1[2];
  v12 = a1[3];
  v14 = a1[4];
  v13 = a1[5];
  v15 = vqadd_s16(v11, v13);
  v16 = vqadd_s16(v12, v14);
  v17 = vqsub_s16(v12, v14);
  v18 = vqsub_s16(v11, v13);
  v19 = vqsub_s16(v6, v8);
  v20 = vqsub_s16(*a1, v7);
  v21 = vqadd_s16(v9, v16);
  v22 = vqadd_s16(v10, v15);
  v23 = vqsub_s16(v10, v15);
  v24 = vqsub_s16(v9, v16);
  v25 = vmlal_lane_s16(vmull_lane_s16(v18, *v4, 1), v19, *v4, 0);
  v26 = vmlal_lane_s16(vmull_lane_s16(v18, *v4, 2), v19, *v4, 1);
  v27 = vqrshrn_n_s32(v25, 0xDuLL);
  *(int16x4_t *)v26.i8 = vqrshrn_n_s32(v26, 0xDuLL);
  v28 = vmlal_lane_s16(vmull_lane_s16(v22, *v4, 1), v21, *v4, 0);
  v29 = vmlal_lane_s16(vmull_lane_s16(v22, *v4, 2), v21, *v4, 1);
  v30 = vqrshrn_n_s32(v28, 0xDuLL);
  v31 = vmlal_laneq_s16(vmull_laneq_s16(v23, *(int16x8_t *)v4->i8, 5), v24, *(int16x8_t *)v4->i8, 4);
  v32 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v23, *(int16x8_t *)v4->i8, 6), v24, *(int16x8_t *)v4->i8, 5), 0xDuLL);
  v33 = vqadd_s16(v17, *(int16x4_t *)v26.i8);
  *(int16x4_t *)v26.i8 = vqsub_s16(v17, *(int16x4_t *)v26.i8);
  v34 = vqsub_s16(v20, v27);
  v35 = vqadd_s16(v20, v27);
  v36 = vmlal_lane_s16(vmull_lane_s16(v33, *(int16x4_t *)v5.i8, 1), v35, *(int16x4_t *)v5.i8, 0);
  v37 = vmlal_lane_s16(vmull_lane_s16(v33, *(int16x4_t *)v5.i8, 2), v35, *(int16x4_t *)v5.i8, 1);
  v38 = vqrshrn_n_s32(v36, 0xDuLL);
  *(int16x4_t *)v36.i8 = vqrshrn_n_s32(v37, 0xDuLL);
  v39 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v26.i8, v5, 4), v34, v5, 5);
  v40 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v26.i8, v5, 7), v34, v5, 4);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v39, 0xDuLL);
  *(int16x4_t *)v39.i8 = vdup_n_s16(0x16A1u);
  *a2 = vrshrq_n_s32(vmull_s16(v30, *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 4 * a3) = vrshrq_n_s32(vmull_s16(v38, *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 8 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v31, 0xDuLL), *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 12 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v40, 0xDuLL), *(int16x4_t *)v39.i8), 0xCuLL);
  a2[a3] = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v29, 0xDuLL), *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 20 * a3) = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 24 * a3) = vrshrq_n_s32(vmull_s16(v32, *(int16x4_t *)v39.i8), 0xCuLL);
  result = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v39.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 28 * a3) = result;
  return result;
}

int32x4_t fadst4x8_row_rect_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t result;

  v4 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v5 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v8 = a1[2];
  v7 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  v11 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v4.i8, 3), v9, *(int16x4_t *)v4.i8, 0), 0xDuLL);
  v12 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v7, *(int16x4_t *)v4.i8, 2), v9, *(int16x4_t *)v4.i8, 3), 0xDuLL);
  v13 = vmlal_lane_s16(vmull_lane_s16(v10, *(int16x4_t *)v4.i8, 1), v8, *(int16x4_t *)v4.i8, 0);
  v14 = vmlal_lane_s16(vmull_lane_s16(v10, *(int16x4_t *)v4.i8, 2), v8, *(int16x4_t *)v4.i8, 1);
  v15 = vqrshrn_n_s32(v13, 0xDuLL);
  *(int16x4_t *)v13.i8 = vqrshrn_n_s32(v14, 0xDuLL);
  v16 = a1[1];
  v17 = vqadd_s16(*a1, v11);
  v19 = a1[6];
  v18 = a1[7];
  v20 = vqsub_s16(v12, v18);
  v21 = vqsub_s16(*a1, v11);
  v22 = vqadd_s16(v18, v12);
  *(int16x4_t *)v14.i8 = vqsub_s16(*(int16x4_t *)v13.i8, v16);
  v23 = vqadd_s16(v19, v15);
  *(int16x4_t *)v13.i8 = vqadd_s16(v16, *(int16x4_t *)v13.i8);
  v24 = vqsub_s16(v19, v15);
  v25 = vmlal_laneq_s16(vmull_laneq_s16(v23, v4, 5), *(int16x4_t *)v14.i8, v4, 4);
  v26 = vmlal_laneq_s16(vmull_laneq_s16(v23, v4, 6), *(int16x4_t *)v14.i8, v4, 5);
  *(int16x4_t *)v14.i8 = vqrshrn_n_s32(v25, 0xDuLL);
  *(int16x4_t *)v25.i8 = vqrshrn_n_s32(v26, 0xDuLL);
  v27 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v13.i8, v4, 5), v24, v4, 4);
  v28 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v13.i8, v4, 6), v24, v4, 5);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v27, 0xDuLL);
  v29 = vqrshrn_n_s32(v28, 0xDuLL);
  *(int16x4_t *)v28.i8 = vqadd_s16(v17, *(int16x4_t *)v14.i8);
  *(int16x4_t *)v27.i8 = vqadd_s16(v20, *(int16x4_t *)v25.i8);
  v30 = vqadd_s16(v21, *(int16x4_t *)v4.i8);
  v31 = vqsub_s16(v29, v22);
  *(int16x4_t *)v14.i8 = vqsub_s16(v17, *(int16x4_t *)v14.i8);
  *(int16x4_t *)v25.i8 = vqsub_s16(v20, *(int16x4_t *)v25.i8);
  *(int16x4_t *)v4.i8 = vqsub_s16(v21, *(int16x4_t *)v4.i8);
  v32 = vqadd_s16(v22, v29);
  v33 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v5.i8, 1), *(int16x4_t *)v28.i8, *(int16x4_t *)v5.i8, 0), 0xDuLL);
  v34 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v5.i8, 2), *(int16x4_t *)v28.i8, *(int16x4_t *)v5.i8, 1), 0xDuLL);
  v35 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, v6, 4), *(int16x4_t *)v14.i8, v6, 5);
  *(int16x4_t *)v14.i8 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, v6, 7), *(int16x4_t *)v14.i8, v6, 4), 0xDuLL);
  v36 = vmlal_laneq_s16(vmull_laneq_s16(v32, v5, 5), *(int16x4_t *)v4.i8, v5, 4);
  v37 = vmlal_laneq_s16(vmull_laneq_s16(v32, v5, 6), *(int16x4_t *)v4.i8, v5, 5);
  *(int16x4_t *)v4.i8 = vdup_n_s16(0x16A1u);
  *a2 = vrshrq_n_s32(vmull_s16(v34, *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 4 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v37, 0xDuLL), *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 8 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v31, *(int16x4_t *)v6.i8, 2), v30, *(int16x4_t *)v6.i8, 1), 0xDuLL), *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 12 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v35, 0xDuLL), *(int16x4_t *)v4.i8), 0xCuLL);
  a2[a3] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 20 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v31, *(int16x4_t *)v6.i8, 1), v30, *(int16x4_t *)v6.i8, 0), 0xDuLL), *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 24 * a3) = vrshrq_n_s32(vmull_s16(vqrshrn_n_s32(v36, 0xDuLL), *(int16x4_t *)v4.i8), 0xCuLL);
  result = vrshrq_n_s32(vmull_s16(v33, *(int16x4_t *)v4.i8), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 28 * a3) = result;
  return result;
}

int32x4_t fidentity4x8_row_rect_neon(int16x4_t *a1, int32x4_t *a2, int a3)
{
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int32x4_t result;

  v3 = vadd_s16(a1[1], a1[1]);
  v4 = vadd_s16(a1[2], a1[2]);
  v5 = vadd_s16(a1[3], a1[3]);
  v6 = vadd_s16(a1[4], a1[4]);
  v7 = vadd_s16(a1[5], a1[5]);
  v8 = vadd_s16(a1[6], a1[6]);
  v9 = vdup_n_s16(0x16A1u);
  v10 = vadd_s16(a1[7], a1[7]);
  *a2 = vrshrq_n_s32(vmull_s16(vadd_s16(*a1, *a1), v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 4 * a3) = vrshrq_n_s32(vmull_s16(v3, v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 8 * a3) = vrshrq_n_s32(vmull_s16(v4, v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 12 * a3) = vrshrq_n_s32(vmull_s16(v5, v9), 0xCuLL);
  a2[a3] = vrshrq_n_s32(vmull_s16(v6, v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 20 * a3) = vrshrq_n_s32(vmull_s16(v7, v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 24 * a3) = vrshrq_n_s32(vmull_s16(v8, v9), 0xCuLL);
  result = vrshrq_n_s32(vmull_s16(v10, v9), 0xCuLL);
  *(int32x4_t *)((char *)a2 + 28 * a3) = result;
  return result;
}

int32x4_t fdct8x8_row_rect_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t *v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t result;
  _OWORD v45[8];
  uint64_t v46;

  v4 = 0;
  v46 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v7 = a1[1];
  v9 = a1[6];
  v8 = a1[7];
  v10 = vqaddq_s16(*a1, v8);
  v11 = vqaddq_s16(v7, v9);
  v13 = a1[2];
  v12 = a1[3];
  v15 = a1[4];
  v14 = a1[5];
  v16 = vqaddq_s16(v13, v14);
  v17 = vqaddq_s16(v12, v15);
  v18 = vqsubq_s16(v12, v15);
  v19 = vqsubq_s16(v13, v14);
  v20 = vqsubq_s16(v7, v9);
  v21 = vqsubq_s16(*a1, v8);
  v22 = vqaddq_s16(v10, v17);
  v23 = vqaddq_s16(v11, v16);
  v24 = vqsubq_s16(v11, v16);
  v25 = vqsubq_s16(v10, v17);
  v26 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v5, 1), *(int16x4_t *)v20.i8, *v5, 0);
  v27 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v5, 1), v20, *v5, 0);
  v28 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v19.i8, *v5, 2), *(int16x4_t *)v20.i8, *v5, 1);
  v29 = vmlal_high_lane_s16(vmull_high_lane_s16(v19, *v5, 2), v20, *v5, 1);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xDuLL), v27, 0xDuLL);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xDuLL), v29, 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v5, 1), *(int16x4_t *)v22.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v5, 1), v22, *v5, 0), 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v23.i8, *v5, 2), *(int16x4_t *)v22.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v23, *v5, 2), v22, *v5, 1), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 5), v25, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 6), v25, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v36 = vqaddq_s16(v18, v31);
  v37 = vqsubq_s16(v18, v31);
  v38 = vqsubq_s16(v21, v30);
  v39 = vqaddq_s16(v21, v30);
  v45[0] = v32;
  v45[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v39.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 1), v39, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v45[6] = v35;
  v45[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v39.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 2), v39, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v45[4] = v33;
  v45[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v6, 4), *(int16x4_t *)v38.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v37, v6, 4), v38, v6, 5), 0xDuLL);
  v45[2] = v34;
  v45[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v37.i8, v6, 7), *(int16x4_t *)v38.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v37, v6, 7), v38, v6, 4), 0xDuLL);
  v40 = a2 + 1;
  do
  {
    v41 = (int16x8_t)v45[v4];
    v42 = vdupq_n_s16(0x16A1u);
    v43 = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v42.i8), 0xCuLL);
    result = vrshrq_n_s32(vmull_high_s16(v41, v42), 0xCuLL);
    v40[-1] = v43;
    *v40 = result;
    ++v4;
    v40 = (int32x4_t *)((char *)v40 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

int32x4_t fadst8x8_row_rect_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t *v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t result;
  _OWORD v48[8];
  uint64_t v49;

  v4 = 0;
  v49 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v7 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *v5, 3), *(int16x4_t *)v10.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v8, *v5, 3), v10, *v5, 0), 0xDuLL);
  v13 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *v5, 2), *(int16x4_t *)v10.i8, *v5, 3), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v8, *v5, 2), v10, *v5, 3), 0xDuLL);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v5, 1), *(int16x4_t *)v9.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v5, 1), v9, *v5, 0), 0xDuLL);
  v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v11.i8, *v5, 2), *(int16x4_t *)v9.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v11, *v5, 2), v9, *v5, 1), 0xDuLL);
  v16 = a1[1];
  v17 = vqaddq_s16(*a1, v12);
  v19 = a1[6];
  v18 = a1[7];
  v20 = vqsubq_s16(v13, v18);
  v21 = vqsubq_s16(*a1, v12);
  v22 = vqaddq_s16(v18, v13);
  v23 = vqsubq_s16(v15, v16);
  v24 = vqaddq_s16(v19, v14);
  v25 = vqaddq_s16(v16, v15);
  v26 = vqsubq_s16(v19, v14);
  v27 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v23.i8, *(int16x8_t *)v5->i8, 4);
  v28 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 5), v23, *(int16x8_t *)v5->i8, 4);
  v29 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v24.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v23.i8, *(int16x8_t *)v5->i8, 5);
  v30 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v24, *(int16x8_t *)v5->i8, 6), v23, *(int16x8_t *)v5->i8, 5);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(v27, 0xDuLL), v28, 0xDuLL);
  v32 = vrshrn_high_n_s32(vrshrn_n_s32(v29, 0xDuLL), v30, 0xDuLL);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v26.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v25, *(int16x8_t *)v5->i8, 5), v26, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v25.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v26.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v25, *(int16x8_t *)v5->i8, 6), v26, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v35 = vqaddq_s16(v17, v31);
  v36 = vqaddq_s16(v20, v32);
  v37 = vqaddq_s16(v21, v33);
  v38 = vqsubq_s16(v34, v22);
  v39 = vqsubq_s16(v17, v31);
  v40 = vqsubq_s16(v20, v32);
  v41 = vqsubq_s16(v21, v33);
  v42 = vqaddq_s16(v22, v34);
  v48[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v7.i8, 2), *(int16x4_t *)v37.i8, *(int16x4_t *)v7.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v7.i8, 2), v37, *(int16x4_t *)v7.i8, 1), 0xDuLL);
  v48[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v7, 4), *(int16x4_t *)v39.i8, v7, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v7, 4), v39, v7, 5), 0xDuLL);
  v48[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v40.i8, v7, 7), *(int16x4_t *)v39.i8, v7, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v40, v7, 7), v39, v7, 4), 0xDuLL);
  v48[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v7.i8, 1), *(int16x4_t *)v37.i8, *(int16x4_t *)v7.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v7.i8, 1), v37, *(int16x4_t *)v7.i8, 0), 0xDuLL);
  v48[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v6, 5), *(int16x4_t *)v41.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v6, 5), v41, v6, 4), 0xDuLL);
  v48[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v35.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 1), v35, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v48[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v35.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v36, *(int16x4_t *)v6.i8, 2), v35, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v48[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v42.i8, v6, 6), *(int16x4_t *)v41.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v42, v6, 6), v41, v6, 5), 0xDuLL);
  v43 = a2 + 1;
  do
  {
    v44 = (int16x8_t)v48[v4];
    v45 = vdupq_n_s16(0x16A1u);
    v46 = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v45.i8), 0xCuLL);
    result = vrshrq_n_s32(vmull_high_s16(v44, v45), 0xCuLL);
    v43[-1] = v46;
    *v43 = result;
    ++v4;
    v43 = (int32x4_t *)((char *)v43 + 4 * a3);
  }
  while (v4 != 8);
  return result;
}

int16x8_t *fidentity8x8_row_rect_neon(int16x8_t *result, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int32x4_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  _OWORD v11[8];
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = vaddq_s16(result[1], result[1]);
  v11[0] = vaddq_s16(*result, *result);
  v11[1] = v4;
  v5 = vaddq_s16(result[3], result[3]);
  v11[2] = vaddq_s16(result[2], result[2]);
  v11[3] = v5;
  v6 = vaddq_s16(result[5], result[5]);
  v11[4] = vaddq_s16(result[4], result[4]);
  v11[5] = v6;
  v7 = vaddq_s16(result[7], result[7]);
  v11[6] = vaddq_s16(result[6], result[6]);
  v11[7] = v7;
  v8 = a2 + 1;
  v9 = vdupq_n_s16(0x16A1u);
  do
  {
    v10 = (int16x8_t)v11[v3];
    v8[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v9.i8), 0xCuLL);
    *v8 = vrshrq_n_s32(vmull_high_s16(v10, v9), 0xCuLL);
    ++v3;
    v8 = (int32x4_t *)((char *)v8 + 4 * a3);
  }
  while (v3 != 8);
  return result;
}

int16x8_t *fdct8x16_row_rect_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x4_t *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t *v100;
  int16x8_t v101;
  int16x8_t v102;
  _OWORD v103[16];
  uint64_t v104;

  v4 = 0;
  v104 = *MEMORY[0x24BDAC8D0];
  v5 = result[1];
  v7 = result[14];
  v6 = result[15];
  v8 = vqaddq_s16(*result, v6);
  v9 = vqaddq_s16(v5, v7);
  v10 = result[2];
  v11 = result[3];
  v13 = result[12];
  v12 = result[13];
  v14 = vqaddq_s16(v10, v12);
  v15 = vqaddq_s16(v11, v13);
  v16 = result[4];
  v17 = result[5];
  v19 = result[10];
  v18 = result[11];
  v20 = vqaddq_s16(v16, v18);
  v21 = vqaddq_s16(v17, v19);
  v23 = result[6];
  v22 = result[7];
  v25 = result[8];
  v24 = result[9];
  v26 = vqaddq_s16(v23, v24);
  v27 = vqaddq_s16(v22, v25);
  v28 = vqsubq_s16(v22, v25);
  v29 = vqsubq_s16(v23, v24);
  v30 = vqsubq_s16(v17, v19);
  v31 = vqsubq_s16(v16, v18);
  v32 = vqsubq_s16(v11, v13);
  v33 = vqsubq_s16(v10, v12);
  v34 = vqsubq_s16(v5, v7);
  v35 = vqsubq_s16(*result, v6);
  v36 = vqaddq_s16(v8, v27);
  v37 = vqaddq_s16(v9, v26);
  v38 = vqaddq_s16(v14, v21);
  v39 = vqaddq_s16(v15, v20);
  v40 = vqsubq_s16(v15, v20);
  v41 = vqsubq_s16(v14, v21);
  v42 = vqsubq_s16(v9, v26);
  v43 = vqsubq_s16(v8, v27);
  v44 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v45 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v46 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v47 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v48 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 1), *(int16x4_t *)v33.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 1), v33, *v44, 0), 0xDuLL);
  v49 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v30.i8, *v44, 2), *(int16x4_t *)v33.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v30, *v44, 2), v33, *v44, 1), 0xDuLL);
  v50 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 1), *(int16x4_t *)v32.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 1), v32, *v44, 0), 0xDuLL);
  v51 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v31.i8, *v44, 2), *(int16x4_t *)v32.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v31, *v44, 2), v32, *v44, 1), 0xDuLL);
  v52 = vqaddq_s16(v36, v39);
  v53 = vqaddq_s16(v37, v38);
  v54 = vqsubq_s16(v37, v38);
  v55 = vqsubq_s16(v36, v39);
  v56 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 2), *(int16x4_t *)v42.i8, *v44, 1);
  v57 = vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 2), v42, *v44, 1);
  v58 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v41.i8, *v44, 1), *(int16x4_t *)v42.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v41, *v44, 1), v42, *v44, 0), 0xDuLL);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(v56, 0xDuLL), v57, 0xDuLL);
  v60 = vqaddq_s16(v28, v51);
  v61 = vqaddq_s16(v29, v49);
  v62 = vqsubq_s16(v29, v49);
  v63 = vqsubq_s16(v28, v51);
  v64 = vqsubq_s16(v35, v50);
  v65 = vqsubq_s16(v34, v48);
  v66 = vqaddq_s16(v34, v48);
  v67 = vqaddq_s16(v35, v50);
  v68 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *v44, 1), *(int16x4_t *)v52.i8, *v44, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v53, *v44, 1), v52, *v44, 0), 0xDuLL);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *v44, 2), *(int16x4_t *)v52.i8, *v44, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v53, *v44, 2), v52, *v44, 1), 0xDuLL);
  v70 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v54.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v55.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v54, *(int16x8_t *)v44->i8, 5), v55, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v54.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v55.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v54, *(int16x8_t *)v44->i8, 6), v55, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v72 = vqaddq_s16(v40, v59);
  v73 = vqsubq_s16(v40, v59);
  v74 = vqsubq_s16(v43, v58);
  v75 = vqaddq_s16(v43, v58);
  v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v61.i8, *(int16x8_t *)v44->i8, 5), *(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v61, *(int16x8_t *)v44->i8, 5), v66, *(int16x8_t *)v44->i8, 4), 0xDuLL);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v61.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v66.i8, *(int16x8_t *)v44->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v61, *(int16x8_t *)v44->i8, 6), v66, *(int16x8_t *)v44->i8, 5), 0xDuLL);
  v78 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v62.i8, *(int16x8_t *)v44->i8, 6), *(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 5);
  v79 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v62, *(int16x8_t *)v44->i8, 6), v65, *(int16x8_t *)v44->i8, 5);
  v80 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v62.i8, *(int16x8_t *)v44->i8, 7), *(int16x4_t *)v65.i8, *(int16x8_t *)v44->i8, 6);
  v81 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v62, *(int16x8_t *)v44->i8, 7), v65, *(int16x8_t *)v44->i8, 6);
  v82 = vrshrn_high_n_s32(vrshrn_n_s32(v78, 0xDuLL), v79, 0xDuLL);
  v83 = vrshrn_high_n_s32(vrshrn_n_s32(v80, 0xDuLL), v81, 0xDuLL);
  v84 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v45.i8, 1), *(int16x4_t *)v75.i8, *(int16x4_t *)v45.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v45.i8, 1), v75, *(int16x4_t *)v45.i8, 0), 0xDuLL);
  v85 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v45.i8, 2), *(int16x4_t *)v75.i8, *(int16x4_t *)v45.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v72, *(int16x4_t *)v45.i8, 2), v75, *(int16x4_t *)v45.i8, 1), 0xDuLL);
  v86 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v73.i8, v45, 4), *(int16x4_t *)v74.i8, v45, 5);
  v87 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v73, v45, 4), v74, v45, 5);
  v88 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v73.i8, v45, 7), *(int16x4_t *)v74.i8, v45, 4);
  v89 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v73, v45, 7), v74, v45, 4);
  v90 = vrshrn_high_n_s32(vrshrn_n_s32(v86, 0xDuLL), v87, 0xDuLL);
  v91 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xDuLL), v89, 0xDuLL);
  v92 = vqaddq_s16(v60, v77);
  v93 = vqsubq_s16(v60, v77);
  v94 = vqsubq_s16(v63, v83);
  v95 = vqaddq_s16(v63, v83);
  v96 = vqaddq_s16(v64, v82);
  v97 = vqsubq_s16(v64, v82);
  v98 = vqsubq_s16(v67, v76);
  v99 = vqaddq_s16(v67, v76);
  v103[0] = v68;
  v103[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v46.i8, 1), *(int16x4_t *)v99.i8, *(int16x4_t *)v46.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v92, *(int16x4_t *)v46.i8, 1), v99, *(int16x4_t *)v46.i8, 0), 0xDuLL);
  v103[14] = v85;
  v103[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v46.i8, 2), *(int16x4_t *)v99.i8, *(int16x4_t *)v46.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v92, *(int16x4_t *)v46.i8, 2), v99, *(int16x4_t *)v46.i8, 1), 0xDuLL);
  v103[8] = v69;
  v103[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v47, 4), *(int16x4_t *)v98.i8, v47, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v93, v47, 4), v98, v47, 5), 0xDuLL);
  v103[6] = v91;
  v103[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v93.i8, v47, 7), *(int16x4_t *)v98.i8, v47, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v93, v47, 7), v98, v47, 4), 0xDuLL);
  v103[4] = v70;
  v103[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v47.i8, 1), *(int16x4_t *)v97.i8, *(int16x4_t *)v47.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v94, *(int16x4_t *)v47.i8, 1), v97, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v103[10] = v90;
  v103[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v47.i8, 2), *(int16x4_t *)v97.i8, *(int16x4_t *)v47.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v94, *(int16x4_t *)v47.i8, 2), v97, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  v103[12] = v71;
  v103[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v46, 4), *(int16x4_t *)v96.i8, v46, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v46, 4), v96, v46, 5), 0xDuLL);
  v103[2] = v84;
  v103[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v95.i8, v46, 7), *(int16x4_t *)v96.i8, v46, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v95, v46, 7), v96, v46, 4), 0xDuLL);
  v100 = a2 + 1;
  do
  {
    v101 = (int16x8_t)v103[v4];
    v102 = vdupq_n_s16(0x16A1u);
    v100[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v102.i8), 0xCuLL);
    *v100 = vrshrq_n_s32(vmull_high_s16(v101, v102), 0xCuLL);
    ++v4;
    v100 = (int32x4_t *)((char *)v100 + 4 * a3);
  }
  while (v4 != 16);
  return result;
}

int16x8_t *fadst8x16_row_rect_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int16x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int32x4_t *v116;
  int16x8_t v117;
  int16x8_t v118;
  _OWORD v119[16];
  uint64_t v120;

  v4 = 0;
  v120 = *MEMORY[0x24BDAC8D0];
  v5 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v6 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v8 = result[6];
  v7 = result[7];
  v9 = result[8];
  v10 = result[9];
  v11 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v5, 3), *(int16x4_t *)v9.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v5, 3), v9, *v5, 0), 0xDuLL);
  v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v7.i8, *v5, 2), *(int16x4_t *)v9.i8, *v5, 3), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v7, *v5, 2), v9, *v5, 3), 0xDuLL);
  v14 = result[10];
  v13 = result[11];
  v15 = result[4];
  v16 = result[5];
  v17 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v5, 1), *(int16x4_t *)v15.i8, *v5, 0);
  v18 = vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v5, 1), v15, *v5, 0);
  v19 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v13.i8, *v5, 2), *(int16x4_t *)v15.i8, *v5, 1);
  v20 = vmlal_high_lane_s16(vmull_high_lane_s16(v13, *v5, 2), v15, *v5, 1);
  v21 = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xDuLL), v18, 0xDuLL);
  v22 = vrshrn_high_n_s32(vrshrn_n_s32(v19, 0xDuLL), v20, 0xDuLL);
  v23 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v5, 1), *(int16x4_t *)v8.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v5, 1), v8, *v5, 0), 0xDuLL);
  v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v10.i8, *v5, 2), *(int16x4_t *)v8.i8, *v5, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v10, *v5, 2), v8, *v5, 1), 0xDuLL);
  v25 = vmlal_high_lane_s16(vmull_high_lane_s16(v16, *v5, 2), v14, *v5, 3);
  v26 = vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *v5, 2), *(int16x4_t *)v14.i8, *v5, 3), 0xDuLL);
  v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v16.i8, *v5, 3), *(int16x4_t *)v14.i8, *v5, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v16, *v5, 3), v14, *v5, 0), 0xDuLL);
  v28 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v29 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v30 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v31 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v32 = vrshrn_high_n_s32(v26, v25, 0xDuLL);
  v33 = result[1];
  v34 = vqaddq_s16(*result, v11);
  v36 = result[14];
  v35 = result[15];
  v37 = vqsubq_s16(v12, v35);
  v38 = vqsubq_s16(*result, v11);
  v39 = vqaddq_s16(v35, v12);
  v41 = result[2];
  v40 = result[3];
  v42 = vqsubq_s16(v22, v40);
  v43 = result[12];
  v44 = result[13];
  v45 = vqaddq_s16(v43, v21);
  v46 = vqaddq_s16(v40, v22);
  v47 = vqsubq_s16(v43, v21);
  v48 = vqsubq_s16(v24, v33);
  v49 = vqaddq_s16(v36, v23);
  v50 = vqaddq_s16(v33, v24);
  v51 = vqsubq_s16(v36, v23);
  v52 = vqaddq_s16(v41, v27);
  v53 = vqsubq_s16(v32, v44);
  v54 = vqsubq_s16(v41, v27);
  v55 = vqaddq_s16(v44, v32);
  v56 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v45.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v42.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v45, *(int16x8_t *)v5->i8, 5), v42, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v57 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v45.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v42.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v45, *(int16x8_t *)v5->i8, 6), v42, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v58 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v46.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v47.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v46, *(int16x8_t *)v5->i8, 5), v47, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v46.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v47.i8, *(int16x8_t *)v5->i8, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v46, *(int16x8_t *)v5->i8, 6), v47, *(int16x8_t *)v5->i8, 5), 0xDuLL);
  v60 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v5->i8, 5), *(int16x4_t *)v52.i8, *(int16x8_t *)v5->i8, 4);
  v61 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v5->i8, 5), v52, *(int16x8_t *)v5->i8, 4);
  v62 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v53.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v52.i8, *(int16x8_t *)v5->i8, 5);
  v63 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v53, *(int16x8_t *)v5->i8, 6), v52, *(int16x8_t *)v5->i8, 5);
  v64 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xDuLL), v61, 0xDuLL);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(v62, 0xDuLL), v63, 0xDuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v5->i8, 7), *(int16x4_t *)v54.i8, *(int16x8_t *)v5->i8, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v5->i8, 7), v54, *(int16x8_t *)v5->i8, 4), 0xDuLL);
  v67 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v55.i8, *(int16x8_t *)v5->i8, 6), *(int16x4_t *)v54.i8, *(int16x8_t *)v5->i8, 7), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v55, *(int16x8_t *)v5->i8, 6), v54, *(int16x8_t *)v5->i8, 7), 0xDuLL);
  v68 = vqaddq_s16(v34, v56);
  v69 = vqaddq_s16(v37, v57);
  v70 = vqaddq_s16(v38, v58);
  v71 = vqsubq_s16(v59, v39);
  v72 = vqsubq_s16(v34, v56);
  v73 = vqsubq_s16(v37, v57);
  v74 = vqsubq_s16(v38, v58);
  v75 = vqaddq_s16(v39, v59);
  v76 = vqaddq_s16(v48, v64);
  v77 = vqaddq_s16(v49, v65);
  v78 = vqsubq_s16(v67, v50);
  v79 = vqaddq_s16(v51, v66);
  v80 = vqsubq_s16(v48, v64);
  v81 = vqsubq_s16(v49, v65);
  v82 = vqaddq_s16(v50, v67);
  v83 = vqsubq_s16(v51, v66);
  v84 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v6.i8, 1), *(int16x4_t *)v76.i8, *(int16x4_t *)v6.i8, 0);
  v85 = vmlal_high_lane_s16(vmull_high_lane_s16(v77, *(int16x4_t *)v6.i8, 1), v76, *(int16x4_t *)v6.i8, 0);
  v86 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v6.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v6.i8, 1);
  v87 = vmlal_high_lane_s16(vmull_high_lane_s16(v77, *(int16x4_t *)v6.i8, 2), v76, *(int16x4_t *)v6.i8, 1);
  v88 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xDuLL), v85, 0xDuLL);
  v89 = vrshrn_high_n_s32(vrshrn_n_s32(v86, 0xDuLL), v87, 0xDuLL);
  v90 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v6, 4), *(int16x4_t *)v78.i8, v6, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v6, 4), v78, v6, 5), 0xDuLL);
  v91 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v6, 7), *(int16x4_t *)v78.i8, v6, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v6, 7), v78, v6, 4), 0xDuLL);
  v92 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v6.i8, 0), *(int16x4_t *)v81.i8, *(int16x4_t *)v6.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v80, *(int16x4_t *)v6.i8, 0), v81, *(int16x4_t *)v6.i8, 1), 0xDuLL);
  v93 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v6.i8, 3), *(int16x4_t *)v81.i8, *(int16x4_t *)v6.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v80, *(int16x4_t *)v6.i8, 3), v81, *(int16x4_t *)v6.i8, 0), 0xDuLL);
  v94 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v6, 4), *(int16x4_t *)v83.i8, v6, 5);
  v95 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v6, 4), v83, v6, 5);
  v96 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v6, 7), *(int16x4_t *)v83.i8, v6, 4);
  v97 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v6, 7), v83, v6, 4);
  v98 = vrshrn_high_n_s32(vrshrn_n_s32(v94, 0xDuLL), v95, 0xDuLL);
  v99 = vrshrn_high_n_s32(vrshrn_n_s32(v96, 0xDuLL), v97, 0xDuLL);
  v100 = vqaddq_s16(v68, v88);
  v101 = vqaddq_s16(v69, v89);
  v102 = vqaddq_s16(v70, v90);
  v103 = vqaddq_s16(v71, v91);
  v104 = vqaddq_s16(v72, v93);
  v105 = vqaddq_s16(v73, v92);
  v106 = vqaddq_s16(v74, v98);
  v107 = vqsubq_s16(v99, v75);
  v108 = vqsubq_s16(v68, v88);
  v109 = vqsubq_s16(v69, v89);
  v110 = vqsubq_s16(v70, v90);
  v111 = vqsubq_s16(v71, v91);
  v112 = vqsubq_s16(v72, v93);
  v113 = vqsubq_s16(v73, v92);
  v114 = vqsubq_s16(v74, v98);
  v115 = vqaddq_s16(v75, v99);
  v119[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v31.i8, 2), *(int16x4_t *)v106.i8, *(int16x4_t *)v31.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v31.i8, 2), v106, *(int16x4_t *)v31.i8, 1), 0xDuLL);
  v119[7] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v109.i8, v31, 4), *(int16x4_t *)v108.i8, v31, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v109, v31, 4), v108, v31, 5), 0xDuLL);
  v119[8] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v109.i8, v31, 7), *(int16x4_t *)v108.i8, v31, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v109, v31, 7), v108, v31, 4), 0xDuLL);
  v119[9] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v31.i8, 1), *(int16x4_t *)v106.i8, *(int16x4_t *)v31.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v107, *(int16x4_t *)v31.i8, 1), v106, *(int16x4_t *)v31.i8, 0), 0xDuLL);
  v119[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v30.i8, 2), *(int16x4_t *)v104.i8, *(int16x4_t *)v30.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v30.i8, 2), v104, *(int16x4_t *)v30.i8, 1), 0xDuLL);
  v119[5] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v111.i8, v30, 4), *(int16x4_t *)v110.i8, v30, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v111, v30, 4), v110, v30, 5), 0xDuLL);
  v119[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v111.i8, v30, 7), *(int16x4_t *)v110.i8, v30, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v111, v30, 7), v110, v30, 4), 0xDuLL);
  v119[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v30.i8, 1), *(int16x4_t *)v104.i8, *(int16x4_t *)v30.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v105, *(int16x4_t *)v30.i8, 1), v104, *(int16x4_t *)v30.i8, 0), 0xDuLL);
  v119[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v29.i8, 2), *(int16x4_t *)v102.i8, *(int16x4_t *)v29.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v103, *(int16x4_t *)v29.i8, 2), v102, *(int16x4_t *)v29.i8, 1), 0xDuLL);
  v119[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v29, 4), *(int16x4_t *)v112.i8, v29, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v29, 4), v112, v29, 5), 0xDuLL);
  v119[12] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v113.i8, v29, 7), *(int16x4_t *)v112.i8, v29, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v113, v29, 7), v112, v29, 4), 0xDuLL);
  v119[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v29.i8, 1), *(int16x4_t *)v102.i8, *(int16x4_t *)v29.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v103, *(int16x4_t *)v29.i8, 1), v102, *(int16x4_t *)v29.i8, 0), 0xDuLL);
  v119[14] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v28, 5), *(int16x4_t *)v114.i8, v28, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v28, 5), v114, v28, 4), 0xDuLL);
  v119[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v28.i8, 1), *(int16x4_t *)v100.i8, *(int16x4_t *)v28.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)v28.i8, 1), v100, *(int16x4_t *)v28.i8, 0), 0xDuLL);
  v119[0] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v28.i8, 2), *(int16x4_t *)v100.i8, *(int16x4_t *)v28.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v101, *(int16x4_t *)v28.i8, 2), v100, *(int16x4_t *)v28.i8, 1), 0xDuLL);
  v119[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v115.i8, v28, 6), *(int16x4_t *)v114.i8, v28, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v115, v28, 6), v114, v28, 5), 0xDuLL);
  v116 = a2 + 1;
  do
  {
    v117 = (int16x8_t)v119[v4];
    v118 = vdupq_n_s16(0x16A1u);
    v116[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v118.i8), 0xCuLL);
    *v116 = vrshrq_n_s32(vmull_high_s16(v117, v118), 0xCuLL);
    ++v4;
    v116 = (int32x4_t *)((char *)v116 + 4 * a3);
  }
  while (v4 != 16);
  return result;
}

uint64_t fidentity8x16_row_rect_neon(uint64_t result, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  uint64_t v5;
  int32x4_t *v6;
  int16x8_t v7;
  int16x8_t v8;
  _BYTE v9[264];
  uint64_t v10;

  v3 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  v4 = vdupq_n_s16(0x2D42u);
  do
  {
    *(int16x8_t *)&v9[v3] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)(result + v3), *(int16x4_t *)v4.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)(result + v3), v4), 0xCuLL);
    v3 += 16;
  }
  while (v3 != 256);
  v5 = 0;
  v6 = a2 + 1;
  v7 = vdupq_n_s16(0x16A1u);
  do
  {
    v8 = *(int16x8_t *)&v9[v5];
    v6[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v7.i8), 0xCuLL);
    *v6 = vrshrq_n_s32(vmull_high_s16(v8, v7), 0xCuLL);
    v5 += 16;
    v6 = (int32x4_t *)((char *)v6 + 4 * a3);
  }
  while (v5 != 256);
  return result;
}

int16x8_t *fdct8x32_row_rect_neon(int16x8_t *result, int32x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int32x4_t *v250;
  int16x8_t v251;
  int16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int16x8_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int16x8_t v296;
  int32x4_t v297;
  int16x8_t v298;
  int32x4_t v299;
  int16x8_t v300;
  int32x4_t v301;
  int16x8_t v302;
  int32x4_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int16x8_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int16x8_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int16x8_t v327;
  int32x4_t v328;
  int16x8_t v329;
  int32x4_t v330;
  int16x8_t v331;
  int32x4_t v332;
  _OWORD v333[32];
  uint64_t v334;

  v4 = 0;
  v334 = *MEMORY[0x24BDAC8D0];
  v300 = result[1];
  v5 = result[29];
  v309 = result[30];
  v6 = vqaddq_s16(v300, v309);
  v7 = result[2];
  v8 = result[3];
  v10 = result[27];
  v9 = result[28];
  v11 = vqaddq_s16(v7, v5);
  v12 = vqaddq_s16(v8, v9);
  v13 = result[4];
  v14 = result[5];
  v15 = result[26];
  v16 = vqaddq_s16(v13, v10);
  v17 = vqaddq_s16(v14, v15);
  v18 = result[8];
  v19 = result[9];
  v21 = result[22];
  v20 = result[23];
  v329 = vqaddq_s16(v18, v20);
  v22 = vqaddq_s16(v19, v21);
  v23 = result[10];
  v24 = result[11];
  v26 = result[20];
  v25 = result[21];
  v27 = vqaddq_s16(v23, v25);
  v28 = vqaddq_s16(v24, v26);
  v30 = result[12];
  v29 = result[13];
  v32 = result[18];
  v31 = result[19];
  v33 = vqaddq_s16(v29, v32);
  v34 = vqsubq_s16(v29, v32);
  v35 = vqaddq_s16(v30, v31);
  v36 = vqsubq_s16(v30, v31);
  v37 = vqsubq_s16(v24, v26);
  v38 = vqsubq_s16(v23, v25);
  v39 = vqsubq_s16(v19, v21);
  v40 = vqsubq_s16(v18, v20);
  v41 = result[6];
  v42 = result[7];
  v44 = result[24];
  v43 = result[25];
  v331 = vqaddq_s16(v42, v44);
  v45 = vqsubq_s16(v42, v44);
  v46 = vqaddq_s16(v41, v43);
  v47 = vqsubq_s16(v41, v43);
  v48 = vqsubq_s16(v14, v15);
  v49 = vqsubq_s16(v13, v10);
  v50 = vqsubq_s16(v8, v9);
  v51 = vqsubq_s16(v7, v5);
  v52 = vqaddq_s16(v11, v33);
  v265 = vqaddq_s16(v12, v35);
  v327 = vqaddq_s16(v16, v28);
  v53 = vqaddq_s16(v17, v27);
  v54 = vqaddq_s16(v46, v22);
  v55 = vqsubq_s16(v46, v22);
  v56 = vqsubq_s16(v17, v27);
  v57 = vqsubq_s16(v16, v28);
  v58 = vqsubq_s16(v12, v35);
  v59 = vqsubq_s16(v11, v33);
  v296 = result[17];
  v298 = result[14];
  v302 = result[16];
  v304 = result[15];
  v60 = vqaddq_s16(v298, v296);
  v61 = vqaddq_s16(v6, v60);
  v62 = vqsubq_s16(v6, v60);
  v64 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v63 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v49.i8, *(int16x4_t *)v64.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v37, *(int16x4_t *)v64.i8, 1), v49, *(int16x4_t *)v64.i8, 0), 0xDuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v49.i8, *(int16x4_t *)v64.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v37, *(int16x4_t *)v64.i8, 2), v49, *(int16x4_t *)v64.i8, 1), 0xDuLL);
  v67 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v48.i8, *(int16x4_t *)v64.i8, 0);
  v68 = vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v64.i8, 1), v48, *(int16x4_t *)v64.i8, 0);
  v69 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v48.i8, *(int16x4_t *)v64.i8, 1);
  v70 = vmlal_high_lane_s16(vmull_high_lane_s16(v38, *(int16x4_t *)v64.i8, 2), v48, *(int16x4_t *)v64.i8, 1);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(v67, 0xDuLL), v68, 0xDuLL);
  v72 = vrshrn_high_n_s32(vrshrn_n_s32(v69, 0xDuLL), v70, 0xDuLL);
  v294 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v47.i8, *(int16x4_t *)v64.i8, 0);
  v292 = vmlal_high_lane_s16(vmull_high_lane_s16(v39, *(int16x4_t *)v64.i8, 1), v47, *(int16x4_t *)v64.i8, 0);
  v290 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v47.i8, *(int16x4_t *)v64.i8, 1);
  v267 = vmlal_high_lane_s16(vmull_high_lane_s16(v39, *(int16x4_t *)v64.i8, 2), v47, *(int16x4_t *)v64.i8, 1);
  v325 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v45.i8, *(int16x4_t *)v64.i8, 0);
  v323 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v64.i8, 1), v45, *(int16x4_t *)v64.i8, 0);
  v321 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v45.i8, *(int16x4_t *)v64.i8, 1);
  v319 = vmlal_high_lane_s16(vmull_high_lane_s16(v40, *(int16x4_t *)v64.i8, 2), v45, *(int16x4_t *)v64.i8, 1);
  v73 = vqaddq_s16(v52, v53);
  v74 = vqsubq_s16(v52, v53);
  v75 = vqaddq_s16(v61, v54);
  v76 = vqsubq_s16(v61, v54);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v59.i8, *(int16x4_t *)v64.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v64.i8, 1), v59, *(int16x4_t *)v64.i8, 0), 0xDuLL);
  v78 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v59.i8, *(int16x4_t *)v64.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v56, *(int16x4_t *)v64.i8, 2), v59, *(int16x4_t *)v64.i8, 1), 0xDuLL);
  v288 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v58.i8, *(int16x4_t *)v64.i8, 0);
  v282 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v64.i8, 1), v58, *(int16x4_t *)v64.i8, 0);
  v279 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v58.i8, *(int16x4_t *)v64.i8, 1);
  v277 = vmlal_high_lane_s16(vmull_high_lane_s16(v57, *(int16x4_t *)v64.i8, 2), v58, *(int16x4_t *)v64.i8, 1);
  v79 = vqaddq_s16(v36, v66);
  v80 = vqsubq_s16(v36, v66);
  v81 = vqaddq_s16(v34, v72);
  v82 = vqsubq_s16(v34, v72);
  v83 = vqsubq_s16(v50, v65);
  v84 = vqaddq_s16(v50, v65);
  v85 = vqsubq_s16(v51, v71);
  v86 = vqaddq_s16(v51, v71);
  v87 = vqaddq_s16(v75, v73);
  v88 = vqsubq_s16(v75, v73);
  v306 = result[31];
  v269 = vqaddq_s16(v304, v302);
  v271 = vqaddq_s16(*result, v306);
  v89 = vqaddq_s16(v271, v269);
  v90 = vqaddq_s16(v331, v329);
  v91 = vqaddq_s16(v89, v90);
  v92 = vqaddq_s16(v265, v327);
  v93 = vqaddq_s16(v91, v92);
  v94 = vqsubq_s16(v91, v92);
  v95 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v76.i8, *(int16x4_t *)v64.i8, 0);
  v96 = vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v64.i8, 1), v76, *(int16x4_t *)v64.i8, 0);
  v97 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v76.i8, *(int16x4_t *)v64.i8, 1);
  v98 = vmlal_high_lane_s16(vmull_high_lane_s16(v74, *(int16x4_t *)v64.i8, 2), v76, *(int16x4_t *)v64.i8, 1);
  v99 = vqaddq_s16(v55, v78);
  v100 = vqsubq_s16(v55, v78);
  v101 = vqsubq_s16(v62, v77);
  v102 = vqaddq_s16(v62, v77);
  v103 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v64, 5), *(int16x4_t *)v86.i8, v64, 4);
  v104 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v64, 5), v86, v64, 4);
  v105 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v81.i8, v64, 6), *(int16x4_t *)v86.i8, v64, 5);
  v106 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v81, v64, 6), v86, v64, 5);
  v285 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v64, 5), v84, v64, 4);
  v286 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v64, 5), *(int16x4_t *)v84.i8, v64, 4);
  v284 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v64, 6), *(int16x4_t *)v84.i8, v64, 5);
  v281 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v79, v64, 6), v84, v64, 5);
  v275 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v80, v64, 6), v83, v64, 5);
  v276 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v80.i8, v64, 6), *(int16x4_t *)v83.i8, v64, 5);
  v273 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v80, v64, 7), v83, v64, 6);
  v274 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v80.i8, v64, 7), *(int16x4_t *)v83.i8, v64, 6);
  v107 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v64, 6), *(int16x4_t *)v85.i8, v64, 5);
  v108 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v64, 6), v85, v64, 5);
  v109 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v82.i8, v64, 7), *(int16x4_t *)v85.i8, v64, 6);
  v110 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v82, v64, 7), v85, v64, 6);
  v317 = vmlal_high_lane_s16(vmull_high_lane_s16(v87, *(int16x4_t *)v64.i8, 1), v93, *(int16x4_t *)v64.i8, 0);
  v318 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v64.i8, 1), *(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8, 0);
  v315 = vmlal_high_lane_s16(vmull_high_lane_s16(v87, *(int16x4_t *)v64.i8, 2), v93, *(int16x4_t *)v64.i8, 1);
  v316 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v64.i8, 2), *(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8, 1);
  v313 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v88, v64, 5), v94, v64, 4);
  v314 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v88.i8, v64, 5), *(int16x4_t *)v94.i8, v64, 4);
  v311 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v88, v64, 6), v94, v64, 5);
  v312 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v88.i8, v64, 6), *(int16x4_t *)v94.i8, v64, 5);
  v111 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v64, 5), *(int16x4_t *)v102.i8, v64, 4);
  v112 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v64, 5), v102, v64, 4);
  v113 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v99.i8, v64, 6), *(int16x4_t *)v102.i8, v64, 5);
  v114 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v99, v64, 6), v102, v64, 5);
  v115 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v100.i8, v64, 6), *(int16x4_t *)v101.i8, v64, 5);
  v116 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v100, v64, 6), v101, v64, 5);
  v117 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v100.i8, v64, 7), *(int16x4_t *)v101.i8, v64, 6);
  v118 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v100, v64, 7), v101, v64, 6);
  v119 = vqsubq_s16(v298, v296);
  v120 = vqsubq_s16(v300, v309);
  v121 = vrshrn_high_n_s32(vrshrn_n_s32(v294, 0xDuLL), v292, 0xDuLL);
  v122 = vrshrn_high_n_s32(vrshrn_n_s32(v290, 0xDuLL), v267, 0xDuLL);
  v123 = vqsubq_s16(v265, v327);
  v124 = vqsubq_s16(v89, v90);
  v125 = vqaddq_s16(v119, v122);
  v126 = vqsubq_s16(v119, v122);
  v127 = vqsubq_s16(v120, v121);
  v128 = vqaddq_s16(v120, v121);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(v95, 0xDuLL), v96, 0xDuLL);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(v97, 0xDuLL), v98, 0xDuLL);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(v103, 0xDuLL), v104, 0xDuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(v105, 0xDuLL), v106, 0xDuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xDuLL), v108, 0xDuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xDuLL), v110, 0xDuLL);
  v135 = vqaddq_s16(v123, v130);
  v136 = vqsubq_s16(v123, v130);
  v137 = vqsubq_s16(v124, v129);
  v138 = vqaddq_s16(v124, v129);
  v139 = vqaddq_s16(v125, v132);
  v140 = vqsubq_s16(v125, v132);
  v141 = vqsubq_s16(v126, v134);
  v142 = vqaddq_s16(v126, v134);
  v143 = vqaddq_s16(v127, v133);
  v144 = vqsubq_s16(v127, v133);
  v145 = vqsubq_s16(v128, v131);
  v146 = vqaddq_s16(v128, v131);
  v299 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v63.i8, 1), v138, *(int16x4_t *)v63.i8, 0);
  v301 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v138.i8, *(int16x4_t *)v63.i8, 0);
  v328 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v138.i8, *(int16x4_t *)v63.i8, 1);
  v310 = vmlal_high_lane_s16(vmull_high_lane_s16(v135, *(int16x4_t *)v63.i8, 2), v138, *(int16x4_t *)v63.i8, 1);
  v295 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v136, v63, 4), v137, v63, 5);
  v297 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v136.i8, v63, 4), *(int16x4_t *)v137.i8, v63, 5);
  v291 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v136, v63, 7), v137, v63, 4);
  v293 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v136.i8, v63, 7), *(int16x4_t *)v137.i8, v63, 4);
  v147 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v146.i8, *(int16x4_t *)v63.i8, 0);
  v148 = vmlal_high_lane_s16(vmull_high_lane_s16(v139, *(int16x4_t *)v63.i8, 1), v146, *(int16x4_t *)v63.i8, 0);
  v266 = vmlal_high_lane_s16(vmull_high_lane_s16(v139, *(int16x4_t *)v63.i8, 2), v146, *(int16x4_t *)v63.i8, 1);
  v268 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v146.i8, *(int16x4_t *)v63.i8, 1);
  v149 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v145.i8, *(int16x4_t *)v63.i8, 1);
  v150 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v63.i8, 2), v145, *(int16x4_t *)v63.i8, 1);
  v151 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v63.i8, 3), *(int16x4_t *)v145.i8, *(int16x4_t *)v63.i8, 2);
  v152 = vmlal_high_lane_s16(vmull_high_lane_s16(v140, *(int16x4_t *)v63.i8, 3), v145, *(int16x4_t *)v63.i8, 2);
  v153 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v141.i8, v63, 4), *(int16x4_t *)v144.i8, v63, 5);
  v154 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v141, v63, 4), v144, v63, 5);
  v155 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v141.i8, v63, 7), *(int16x4_t *)v144.i8, v63, 4);
  v156 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v141, v63, 7), v144, v63, 4);
  v264 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v142.i8, v63, 7), *(int16x4_t *)v143.i8, v63, 4);
  v263 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v142, v63, 7), v143, v63, 4);
  v261 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v142, v63, 6), v143, v63, 7);
  v262 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v142.i8, v63, 6), *(int16x4_t *)v143.i8, v63, 7);
  v157 = vqsubq_s16(v331, v329);
  v158 = vqsubq_s16(v271, v269);
  v159 = vrshrn_high_n_s32(vrshrn_n_s32(v288, 0xDuLL), v282, 0xDuLL);
  v160 = vrshrn_high_n_s32(vrshrn_n_s32(v279, 0xDuLL), v277, 0xDuLL);
  v161 = vqaddq_s16(v157, v160);
  v162 = vqsubq_s16(v157, v160);
  v163 = vqsubq_s16(v158, v159);
  v164 = vqaddq_s16(v158, v159);
  v165 = vrshrn_high_n_s32(vrshrn_n_s32(v111, 0xDuLL), v112, 0xDuLL);
  v166 = vrshrn_high_n_s32(vrshrn_n_s32(v113, 0xDuLL), v114, 0xDuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(v115, 0xDuLL), v116, 0xDuLL);
  v168 = vrshrn_high_n_s32(vrshrn_n_s32(v117, 0xDuLL), v118, 0xDuLL);
  v169 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v170 = vqsubq_s16(v161, v166);
  v171 = vmull_laneq_s16(*(int16x4_t *)v170.i8, v169, 4);
  v172 = vmull_high_laneq_s16(v170, v169, 4);
  v173 = vmull_laneq_s16(*(int16x4_t *)v170.i8, v169, 7);
  v174 = vmull_high_laneq_s16(v170, v169, 7);
  v175 = vqsubq_s16(v164, v165);
  v330 = vmlal_high_laneq_s16(v172, v175, v169, 5);
  v332 = vmlal_laneq_s16(v171, *(int16x4_t *)v175.i8, v169, 5);
  v270 = vmlal_high_laneq_s16(v174, v175, v169, 4);
  v272 = vmlal_laneq_s16(v173, *(int16x4_t *)v175.i8, v169, 4);
  v176 = vqsubq_s16(v162, v168);
  v177 = vqsubq_s16(v163, v167);
  v280 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v169.i8, 1), *(int16x4_t *)v177.i8, *(int16x4_t *)v169.i8, 0);
  v278 = vmlal_high_lane_s16(vmull_high_lane_s16(v176, *(int16x4_t *)v169.i8, 1), v177, *(int16x4_t *)v169.i8, 0);
  v259 = vmlal_high_lane_s16(vmull_high_lane_s16(v176, *(int16x4_t *)v169.i8, 2), v177, *(int16x4_t *)v169.i8, 1);
  v260 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v169.i8, 2), *(int16x4_t *)v177.i8, *(int16x4_t *)v169.i8, 1);
  v178 = vqaddq_s16(v161, v166);
  v179 = vqaddq_s16(v162, v168);
  v180 = vqaddq_s16(v163, v167);
  v181 = vqaddq_s16(v164, v165);
  v182 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v289 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v182.i8, 1), *(int16x4_t *)v181.i8, *(int16x4_t *)v182.i8, 0);
  v283 = vmlal_high_lane_s16(vmull_high_lane_s16(v178, *(int16x4_t *)v182.i8, 1), v181, *(int16x4_t *)v182.i8, 0);
  v253 = vmlal_high_lane_s16(vmull_high_lane_s16(v178, *(int16x4_t *)v182.i8, 2), v181, *(int16x4_t *)v182.i8, 1);
  v254 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v182.i8, 2), *(int16x4_t *)v181.i8, *(int16x4_t *)v182.i8, 1);
  v258 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v179.i8, v182, 4), *(int16x4_t *)v180.i8, v182, 5);
  v257 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v179, v182, 4), v180, v182, 5);
  v256 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v179.i8, v182, 7), *(int16x4_t *)v180.i8, v182, 4);
  v255 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v179, v182, 7), v180, v182, 4);
  v183 = vqsubq_s16(v304, v302);
  v184 = vqsubq_s16(*result, v306);
  v185 = vrshrn_high_n_s32(vrshrn_n_s32(v325, 0xDuLL), v323, 0xDuLL);
  v186 = vrshrn_high_n_s32(vrshrn_n_s32(v321, 0xDuLL), v319, 0xDuLL);
  v187 = vqaddq_s16(v183, v186);
  v188 = vqsubq_s16(v183, v186);
  v189 = vqsubq_s16(v184, v185);
  v190 = vqaddq_s16(v184, v185);
  v191 = vrshrn_high_n_s32(vrshrn_n_s32(v286, 0xDuLL), v285, 0xDuLL);
  v192 = vrshrn_high_n_s32(vrshrn_n_s32(v284, 0xDuLL), v281, 0xDuLL);
  v193 = vrshrn_high_n_s32(vrshrn_n_s32(v276, 0xDuLL), v275, 0xDuLL);
  v194 = vrshrn_high_n_s32(vrshrn_n_s32(v274, 0xDuLL), v273, 0xDuLL);
  v195 = vrshrn_high_n_s32(vrshrn_n_s32(v149, 0xDuLL), v150, 0xDuLL);
  v196 = vrshrn_high_n_s32(vrshrn_n_s32(v151, 0xDuLL), v152, 0xDuLL);
  v197 = vrshrn_high_n_s32(vrshrn_n_s32(v153, 0xDuLL), v154, 0xDuLL);
  v198 = vrshrn_high_n_s32(vrshrn_n_s32(v155, 0xDuLL), v156, 0xDuLL);
  v199 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v200 = vqsubq_s16(v187, v192);
  v201 = vqaddq_s16(v200, v196);
  v202 = vqsubq_s16(v190, v191);
  v203 = vqaddq_s16(v202, v195);
  v320 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v201, v199, 4), v203, v199, 5);
  v322 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v201.i8, v199, 4), *(int16x4_t *)v203.i8, v199, 5);
  v324 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v201, v199, 7), v203, v199, 4);
  v326 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v201.i8, v199, 7), *(int16x4_t *)v203.i8, v199, 4);
  v204 = vqsubq_s16(v188, v194);
  v205 = vqsubq_s16(v189, v193);
  v206 = vqaddq_s16(v204, v198);
  v207 = vqaddq_s16(v205, v197);
  v308 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v199.i8, 1), *(int16x4_t *)v207.i8, *(int16x4_t *)v199.i8, 0);
  v307 = vmlal_high_lane_s16(vmull_high_lane_s16(v206, *(int16x4_t *)v199.i8, 1), v207, *(int16x4_t *)v199.i8, 0);
  v303 = vmlal_high_lane_s16(vmull_high_lane_s16(v206, *(int16x4_t *)v199.i8, 2), v207, *(int16x4_t *)v199.i8, 1);
  v305 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v199.i8, 2), *(int16x4_t *)v207.i8, *(int16x4_t *)v199.i8, 1);
  v208 = vqsubq_s16(v200, v196);
  v209 = vqsubq_s16(v204, v198);
  v210 = vqsubq_s16(v205, v197);
  v211 = vqsubq_s16(v202, v195);
  v213 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v212 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v214 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v213.i8, 1), *(int16x4_t *)v211.i8, *(int16x4_t *)v213.i8, 0);
  v215 = vmlal_high_lane_s16(vmull_high_lane_s16(v208, *(int16x4_t *)v213.i8, 1), v211, *(int16x4_t *)v213.i8, 0);
  v216 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v213.i8, 2), *(int16x4_t *)v211.i8, *(int16x4_t *)v213.i8, 1);
  v217 = vmlal_high_lane_s16(vmull_high_lane_s16(v208, *(int16x4_t *)v213.i8, 2), v211, *(int16x4_t *)v213.i8, 1);
  v287 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v209.i8, v213, 4), *(int16x4_t *)v210.i8, v213, 5);
  v218 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v209, v213, 4), v210, v213, 5);
  v219 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v209.i8, v213, 7), *(int16x4_t *)v210.i8, v213, 4);
  v220 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v209, v213, 7), v210, v213, 4);
  v221 = vqaddq_s16(v187, v192);
  v222 = vqaddq_s16(v188, v194);
  v223 = vqaddq_s16(v189, v193);
  v224 = vqaddq_s16(v190, v191);
  v225 = vrshrn_high_n_s32(vrshrn_n_s32(v147, 0xDuLL), v148, 0xDuLL);
  v226 = vrshrn_high_n_s32(vrshrn_n_s32(v268, 0xDuLL), v266, 0xDuLL);
  v227 = vrshrn_high_n_s32(vrshrn_n_s32(v264, 0xDuLL), v263, 0xDuLL);
  v228 = vrshrn_high_n_s32(vrshrn_n_s32(v262, 0xDuLL), v261, 0xDuLL);
  v229 = vqsubq_s16(v221, v226);
  v230 = vmull_laneq_s16(*(int16x4_t *)v229.i8, v212, 4);
  v231 = vmull_high_laneq_s16(v229, v212, 4);
  v232 = vmull_laneq_s16(*(int16x4_t *)v229.i8, v212, 7);
  v233 = vmull_high_laneq_s16(v229, v212, 7);
  v234 = vqsubq_s16(v224, v225);
  v235 = vmlal_laneq_s16(v230, *(int16x4_t *)v234.i8, v212, 5);
  v236 = vmlal_high_laneq_s16(v231, v234, v212, 5);
  v237 = vmlal_laneq_s16(v232, *(int16x4_t *)v234.i8, v212, 4);
  v238 = vmlal_high_laneq_s16(v233, v234, v212, 4);
  v239 = vqsubq_s16(v222, v228);
  v240 = vqsubq_s16(v223, v227);
  v241 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v239.i8, *(int16x4_t *)v212.i8, 1), *(int16x4_t *)v240.i8, *(int16x4_t *)v212.i8, 0);
  v242 = vmlal_high_lane_s16(vmull_high_lane_s16(v239, *(int16x4_t *)v212.i8, 1), v240, *(int16x4_t *)v212.i8, 0);
  v243 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v239.i8, *(int16x4_t *)v212.i8, 2), *(int16x4_t *)v240.i8, *(int16x4_t *)v212.i8, 1);
  v244 = vmlal_high_lane_s16(vmull_high_lane_s16(v239, *(int16x4_t *)v212.i8, 2), v240, *(int16x4_t *)v212.i8, 1);
  v245 = vqaddq_s16(v221, v226);
  v246 = vqaddq_s16(v222, v228);
  v247 = vqaddq_s16(v223, v227);
  v248 = vqaddq_s16(v224, v225);
  v249 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v333[0] = vrshrn_high_n_s32(vrshrn_n_s32(v318, 0xDuLL), v317, 0xDuLL);
  v333[1] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v249.i8, 1), *(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8, 0), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v245, *(int16x4_t *)v249.i8, 1), v248, *(int16x4_t *)v249.i8, 0), 0xDuLL);
  v333[30] = vrshrn_high_n_s32(vrshrn_n_s32(v254, 0xDuLL), v253, 0xDuLL);
  v333[31] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v249.i8, 2), *(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8, 1), 0xDuLL), vmlal_high_lane_s16(vmull_high_lane_s16(v245, *(int16x4_t *)v249.i8, 2), v248, *(int16x4_t *)v249.i8, 1), 0xDuLL);
  v333[16] = vrshrn_high_n_s32(vrshrn_n_s32(v316, 0xDuLL), v315, 0xDuLL);
  v333[17] = vrshrn_high_n_s32(vrshrn_n_s32(v235, 0xDuLL), v236, 0xDuLL);
  v333[14] = vrshrn_high_n_s32(vrshrn_n_s32(v272, 0xDuLL), v270, 0xDuLL);
  v333[15] = vrshrn_high_n_s32(vrshrn_n_s32(v237, 0xDuLL), v238, 0xDuLL);
  v333[8] = vrshrn_high_n_s32(vrshrn_n_s32(v314, 0xDuLL), v313, 0xDuLL);
  v333[9] = vrshrn_high_n_s32(vrshrn_n_s32(v214, 0xDuLL), v215, 0xDuLL);
  v333[22] = vrshrn_high_n_s32(vrshrn_n_s32(v260, 0xDuLL), v259, 0xDuLL);
  v333[23] = vrshrn_high_n_s32(vrshrn_n_s32(v216, 0xDuLL), v217, 0xDuLL);
  v333[24] = vrshrn_high_n_s32(vrshrn_n_s32(v312, 0xDuLL), v311, 0xDuLL);
  v333[25] = vrshrn_high_n_s32(vrshrn_n_s32(v322, 0xDuLL), v320, 0xDuLL);
  v333[6] = vrshrn_high_n_s32(vrshrn_n_s32(v256, 0xDuLL), v255, 0xDuLL);
  v333[7] = vrshrn_high_n_s32(vrshrn_n_s32(v326, 0xDuLL), v324, 0xDuLL);
  v333[4] = vrshrn_high_n_s32(vrshrn_n_s32(v301, 0xDuLL), v299, 0xDuLL);
  v333[5] = vrshrn_high_n_s32(vrshrn_n_s32(v308, 0xDuLL), v307, 0xDuLL);
  v333[26] = vrshrn_high_n_s32(vrshrn_n_s32(v258, 0xDuLL), v257, 0xDuLL);
  v333[27] = vrshrn_high_n_s32(vrshrn_n_s32(v305, 0xDuLL), v303, 0xDuLL);
  v333[20] = vrshrn_high_n_s32(vrshrn_n_s32(v297, 0xDuLL), v295, 0xDuLL);
  v333[21] = vrshrn_high_n_s32(vrshrn_n_s32(v287, 0xDuLL), v218, 0xDuLL);
  v333[10] = vrshrn_high_n_s32(vrshrn_n_s32(v280, 0xDuLL), v278, 0xDuLL);
  v333[11] = vrshrn_high_n_s32(vrshrn_n_s32(v219, 0xDuLL), v220, 0xDuLL);
  v333[12] = vrshrn_high_n_s32(vrshrn_n_s32(v293, 0xDuLL), v291, 0xDuLL);
  v333[13] = vrshrn_high_n_s32(vrshrn_n_s32(v241, 0xDuLL), v242, 0xDuLL);
  v333[18] = vrshrn_high_n_s32(vrshrn_n_s32(v332, 0xDuLL), v330, 0xDuLL);
  v333[19] = vrshrn_high_n_s32(vrshrn_n_s32(v243, 0xDuLL), v244, 0xDuLL);
  v333[28] = vrshrn_high_n_s32(vrshrn_n_s32(v328, 0xDuLL), v310, 0xDuLL);
  v333[29] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v246.i8, v249, 4), *(int16x4_t *)v247.i8, v249, 5), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v246, v249, 4), v247, v249, 5), 0xDuLL);
  v333[2] = vrshrn_high_n_s32(vrshrn_n_s32(v289, 0xDuLL), v283, 0xDuLL);
  v333[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v246.i8, v249, 7), *(int16x4_t *)v247.i8, v249, 4), 0xDuLL), vmlal_high_laneq_s16(vmull_high_laneq_s16(v246, v249, 7), v247, v249, 4), 0xDuLL);
  v250 = a2 + 1;
  do
  {
    v251 = (int16x8_t)v333[v4];
    v252 = vdupq_n_s16(0x16A1u);
    v250[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v251.i8, *(int16x4_t *)v252.i8), 0xCuLL);
    *v250 = vrshrq_n_s32(vmull_high_s16(v251, v252), 0xCuLL);
    ++v4;
    v250 = (int32x4_t *)((char *)v250 + 4 * a3);
  }
  while (v4 != 32);
  return result;
}

int16x8_t *fidentity8x32_row_rect_neon(int16x8_t *result, int32x4_t *a2, int a3)
{
  uint64_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int32x4_t *v20;
  int16x8_t v21;
  int16x8_t v22;
  _OWORD v23[32];
  uint64_t v24;

  v3 = 0;
  v24 = *MEMORY[0x24BDAC8D0];
  v4 = vshlq_n_s16(result[1], 2uLL);
  v23[0] = vshlq_n_s16(*result, 2uLL);
  v23[1] = v4;
  v5 = vshlq_n_s16(result[3], 2uLL);
  v23[2] = vshlq_n_s16(result[2], 2uLL);
  v23[3] = v5;
  v6 = vshlq_n_s16(result[5], 2uLL);
  v23[4] = vshlq_n_s16(result[4], 2uLL);
  v23[5] = v6;
  v7 = vshlq_n_s16(result[7], 2uLL);
  v23[6] = vshlq_n_s16(result[6], 2uLL);
  v23[7] = v7;
  v8 = vshlq_n_s16(result[9], 2uLL);
  v23[8] = vshlq_n_s16(result[8], 2uLL);
  v23[9] = v8;
  v9 = vshlq_n_s16(result[11], 2uLL);
  v23[10] = vshlq_n_s16(result[10], 2uLL);
  v23[11] = v9;
  v10 = vshlq_n_s16(result[13], 2uLL);
  v23[12] = vshlq_n_s16(result[12], 2uLL);
  v23[13] = v10;
  v11 = vshlq_n_s16(result[15], 2uLL);
  v23[14] = vshlq_n_s16(result[14], 2uLL);
  v23[15] = v11;
  v12 = vshlq_n_s16(result[17], 2uLL);
  v23[16] = vshlq_n_s16(result[16], 2uLL);
  v23[17] = v12;
  v13 = vshlq_n_s16(result[19], 2uLL);
  v23[18] = vshlq_n_s16(result[18], 2uLL);
  v23[19] = v13;
  v14 = vshlq_n_s16(result[21], 2uLL);
  v23[20] = vshlq_n_s16(result[20], 2uLL);
  v23[21] = v14;
  v15 = vshlq_n_s16(result[23], 2uLL);
  v23[22] = vshlq_n_s16(result[22], 2uLL);
  v23[23] = v15;
  v16 = vshlq_n_s16(result[25], 2uLL);
  v23[24] = vshlq_n_s16(result[24], 2uLL);
  v23[25] = v16;
  v17 = vshlq_n_s16(result[27], 2uLL);
  v23[26] = vshlq_n_s16(result[26], 2uLL);
  v23[27] = v17;
  v18 = vshlq_n_s16(result[29], 2uLL);
  v23[28] = vshlq_n_s16(result[28], 2uLL);
  v23[29] = v18;
  v19 = vshlq_n_s16(result[31], 2uLL);
  v20 = a2 + 1;
  v23[30] = vshlq_n_s16(result[30], 2uLL);
  v23[31] = v19;
  v21 = vdupq_n_s16(0x16A1u);
  do
  {
    v22 = (int16x8_t)v23[v3];
    v20[-1] = vrshrq_n_s32(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v21.i8), 0xCuLL);
    *v20 = vrshrq_n_s32(vmull_high_s16(v22, v21), 0xCuLL);
    ++v3;
    v20 = (int32x4_t *)((char *)v20 + 4 * a3);
  }
  while (v3 != 32);
  return result;
}

int32x4_t fdct32_neon(int32x4_t *a1, int32x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t result;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;

  v267 = a1[1];
  v2 = a1[29];
  v271 = a1[30];
  v3 = vqaddq_s32(v267, v271);
  v4 = a1[2];
  v5 = a1[3];
  v7 = a1[27];
  v6 = a1[28];
  v8 = vqaddq_s32(v4, v2);
  v279 = vqaddq_s32(v5, v6);
  v9 = a1[4];
  v10 = a1[5];
  v11 = a1[26];
  v258 = vqaddq_s32(v9, v7);
  v12 = vqaddq_s32(v10, v11);
  v263 = a1[25];
  v265 = a1[6];
  v281 = a1[7];
  v282 = a1[24];
  v13 = vqaddq_s32(v265, v263);
  v14 = a1[21];
  v261 = a1[9];
  v262 = a1[22];
  v15 = vqaddq_s32(v261, v262);
  v16 = a1[12];
  v17 = a1[13];
  v19 = a1[18];
  v18 = a1[19];
  v20 = vqaddq_s32(v16, v18);
  v21 = vqaddq_s32(v17, v19);
  v22 = vqsubq_s32(v17, v19);
  v23 = vqsubq_s32(v16, v18);
  v24 = a1[10];
  v25 = a1[11];
  v26 = a1[20];
  v246 = vqaddq_s32(v25, v26);
  v27 = vqsubq_s32(v25, v26);
  v28 = vqaddq_s32(v24, v14);
  v29 = vqsubq_s32(v24, v14);
  v30 = vqsubq_s32(v10, v11);
  v31 = vqsubq_s32(v9, v7);
  v32 = vqsubq_s32(v5, v6);
  v33 = vqsubq_s32(v4, v2);
  v251 = vqaddq_s32(v8, v21);
  v252 = vqaddq_s32(v12, v28);
  v250 = vqaddq_s32(v13, v15);
  v34 = vqsubq_s32(v13, v15);
  v35 = vqsubq_s32(v12, v28);
  v36 = vqsubq_s32(v8, v21);
  v37 = a1[14];
  v38 = a1[17];
  v255 = a1[16];
  v256 = a1[15];
  v39 = vqaddq_s32(v37, v38);
  v249 = vqaddq_s32(v3, v39);
  v40 = vqsubq_s32(v3, v39);
  v41 = vaddq_s32(v31, v27);
  v42 = vdupq_n_s32(0xFFFFE960);
  v43 = vdupq_n_s32(0x16A0u);
  v44 = vmlaq_s32(vmulq_s32(v27, v42), v31, v43);
  v45 = vaddq_s32(v30, v29);
  v46 = vaddq_s32(v36, v35);
  v47 = vmlaq_s32(vmulq_s32(v35, v42), v36, v43);
  v48 = vrshrq_n_s32(v44, 0xDuLL);
  v49 = vqaddq_s32(v23, v48);
  v50 = vqsubq_s32(v23, v48);
  v51 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v29, v42), v30, v43), 0xDuLL);
  v52 = vqaddq_s32(v22, v51);
  v53 = vqsubq_s32(v22, v51);
  v54 = vrshrq_n_s32(vmulq_s32(v41, v43), 0xDuLL);
  v55 = vqsubq_s32(v32, v54);
  v56 = vqaddq_s32(v32, v54);
  v57 = vrshrq_n_s32(vmulq_s32(v45, v43), 0xDuLL);
  v58 = vqsubq_s32(v33, v57);
  v59 = vqaddq_s32(v33, v57);
  v60 = vrshrq_n_s32(v47, 0xDuLL);
  v61 = vqaddq_s32(v34, v60);
  v62 = vqsubq_s32(v34, v60);
  v63 = vrshrq_n_s32(vmulq_s32(v46, v43), 0xDuLL);
  v64 = vqsubq_s32(v40, v63);
  v65 = vqaddq_s32(v40, v63);
  v66 = vdupq_n_s32(0x1D90u);
  v67 = vdupq_n_s32(0xC40u);
  v68 = vdupq_n_s32(0xFFFFE270);
  v69 = vmlaq_s32(vmulq_s32(v52, v67), v59, v66);
  v70 = vmlaq_s32(vmulq_s32(v52, v68), v59, v67);
  v260 = vmlaq_s32(vmulq_s32(v49, v67), v56, v66);
  v259 = vmlaq_s32(vmulq_s32(v49, v68), v56, v67);
  v270 = vmlaq_s32(vmulq_s32(v50, v68), v55, v67);
  v71 = vdupq_n_s32(0xFFFFF3C0);
  v269 = vmlaq_s32(vmulq_s32(v50, v71), v55, v68);
  v72 = vmlaq_s32(vmulq_s32(v53, v68), v58, v67);
  v73 = vmlaq_s32(vmulq_s32(v53, v71), v58, v68);
  v257 = a1[31];
  v253 = a1[23];
  v254 = a1[8];
  v244 = vqaddq_s32(v254, v253);
  v245 = vqaddq_s32(v281, v282);
  v247 = vqaddq_s32(v256, v255);
  v248 = vqaddq_s32(*a1, v257);
  v74 = vqaddq_s32(v248, v247);
  v75 = vqaddq_s32(v279, v20);
  v76 = vqaddq_s32(v258, v246);
  v77 = vqaddq_s32(v245, v244);
  v78 = vqaddq_s32(v249, v250);
  v274 = vqaddq_s32(v74, v77);
  v275 = vqaddq_s32(v251, v252);
  v273 = vqaddq_s32(v75, v76);
  v79 = vqsubq_s32(v78, v275);
  v80 = vqsubq_s32(v274, v273);
  v276 = v78;
  v277 = vmlaq_s32(vmulq_s32(v79, v67), v80, v66);
  v278 = vmlaq_s32(vmulq_s32(v79, v68), v80, v67);
  v81 = vmlaq_s32(vmulq_s32(v61, v67), v65, v66);
  v82 = vmlaq_s32(vmulq_s32(v61, v68), v65, v67);
  v83 = vmlaq_s32(vmulq_s32(v62, v68), v64, v67);
  v84 = vmlaq_s32(vmulq_s32(v62, v71), v64, v68);
  v85 = vqsubq_s32(v37, v38);
  v86 = vqsubq_s32(v261, v262);
  v87 = vqsubq_s32(v265, v263);
  v88 = vqsubq_s32(v267, v271);
  v89 = vaddq_s32(v87, v86);
  v90 = vmlaq_s32(vmulq_s32(v86, v42), v87, v43);
  v91 = vqsubq_s32(v75, v76);
  v92 = vqsubq_s32(v251, v252);
  v93 = vqsubq_s32(v249, v250);
  v94 = vqsubq_s32(v74, v77);
  v95 = vaddq_s32(v93, v92);
  v96 = vmlaq_s32(vmulq_s32(v92, v42), v93, v43);
  v97 = vrshrq_n_s32(v90, 0xDuLL);
  v98 = vrshrq_n_s32(v70, 0xDuLL);
  v99 = vqaddq_s32(v85, v97);
  v100 = vqaddq_s32(v99, v98);
  v101 = vqsubq_s32(v99, v98);
  v102 = vrshrq_n_s32(vmulq_s32(v89, v43), 0xDuLL);
  v103 = vrshrq_n_s32(v69, 0xDuLL);
  v104 = vqaddq_s32(v88, v102);
  v105 = vqsubq_s32(v104, v103);
  v106 = vqaddq_s32(v104, v103);
  v107 = vrshrq_n_s32(vmulq_s32(v95, v43), 0xDuLL);
  v108 = vrshrq_n_s32(v96, 0xDuLL);
  v109 = vqaddq_s32(v91, v108);
  v110 = vqaddq_s32(v94, v107);
  v111 = vdupq_n_s32(0x1F64u);
  v112 = vdupq_n_s32(0x640u);
  v268 = vmlaq_s32(vmulq_s32(v109, v112), v110, v111);
  v113 = vdupq_n_s32(0xFFFFE09C);
  v272 = vmlaq_s32(vmulq_s32(v109, v113), v110, v112);
  v114 = vmlaq_s32(vmulq_s32(v100, v112), v106, v111);
  v115 = vmlaq_s32(vmulq_s32(v100, v113), v106, v112);
  v116 = vmlaq_s32(vmulq_s32(v101, v113), v105, v112);
  v117 = vmlaq_s32(vmulq_s32(v101, vdupq_n_s32(0xFFFFF9C0)), v105, v113);
  v118 = vqsubq_s32(v85, v97);
  v119 = vqsubq_s32(v88, v102);
  v120 = vqsubq_s32(v91, v108);
  v121 = vqsubq_s32(v94, v107);
  v122 = vrshrq_n_s32(v73, 0xDuLL);
  v123 = vqsubq_s32(v118, v122);
  v124 = vqaddq_s32(v118, v122);
  v125 = vrshrq_n_s32(v72, 0xDuLL);
  v126 = vqaddq_s32(v119, v125);
  v127 = vqsubq_s32(v119, v125);
  v128 = vdupq_n_s32(0x11C8u);
  v129 = vdupq_n_s32(0x1A9Cu);
  v266 = vmlaq_s32(vmulq_s32(v120, v129), v121, v128);
  v130 = vdupq_n_s32(0xFFFFEE38);
  v264 = vmlaq_s32(vmulq_s32(v120, v130), v121, v129);
  v131 = vmlaq_s32(vmulq_s32(v123, v129), v127, v128);
  v132 = vmlaq_s32(vmulq_s32(v123, v130), v127, v129);
  v133 = vmlaq_s32(vmulq_s32(v124, v130), v126, v129);
  v134 = vmlaq_s32(vmulq_s32(v124, vdupq_n_s32(0xFFFFE564)), v126, v130);
  v135 = vqsubq_s32(v245, v244);
  v136 = vqsubq_s32(v258, v246);
  v137 = vqsubq_s32(v279, v20);
  v138 = vqsubq_s32(v248, v247);
  v139 = vaddq_s32(v137, v136);
  v140 = v42;
  v141 = vmlaq_s32(vmulq_s32(v136, v42), v137, v43);
  v142 = vrshrq_n_s32(vmulq_s32(v139, v43), 0xDuLL);
  v143 = vrshrq_n_s32(v141, 0xDuLL);
  v144 = vrshrq_n_s32(v81, 0xDuLL);
  v145 = vrshrq_n_s32(v82, 0xDuLL);
  v146 = vqaddq_s32(v135, v143);
  v147 = vqaddq_s32(v138, v142);
  v148 = vqaddq_s32(v146, v145);
  v149 = vqaddq_s32(v147, v144);
  v150 = vdupq_n_s32(0x324u);
  v151 = vmlaq_s32(vmulq_s32(v148, v150), v149, vdupq_n_s32(0x1FD8u));
  v280 = vmlaq_s32(vmulq_s32(v148, vdupq_n_s32(0xFFFFE028)), v149, v150);
  v152 = vqsubq_s32(v146, v145);
  v153 = vqsubq_s32(v147, v144);
  v154 = vdupq_n_s32(0x18BCu);
  v155 = vmlaq_s32(vmulq_s32(v152, v154), v153, vdupq_n_s32(0x144Cu));
  v156 = vmlaq_s32(vmulq_s32(v152, vdupq_n_s32(0xFFFFEBB4)), v153, v154);
  v157 = vqsubq_s32(v135, v143);
  v158 = vqsubq_s32(v138, v142);
  v159 = vrshrq_n_s32(v83, 0xDuLL);
  v160 = vrshrq_n_s32(v84, 0xDuLL);
  v161 = vqsubq_s32(v157, v160);
  v162 = vqsubq_s32(v158, v159);
  v163 = vdupq_n_s32(0xF14u);
  v164 = vmlaq_s32(vmulq_s32(v161, v163), v162, vdupq_n_s32(0x1C38u));
  v165 = vmlaq_s32(vmulq_s32(v161, vdupq_n_s32(0xFFFFE3C8)), v162, v163);
  v166 = vqaddq_s32(v157, v160);
  v167 = vqaddq_s32(v158, v159);
  v168 = vdupq_n_s32(0x1EA0u);
  v169 = vmlaq_s32(vmulq_s32(v166, v168), v167, vdupq_n_s32(0x94Cu));
  v170 = vmlaq_s32(vmulq_s32(v166, vdupq_n_s32(0xFFFFF6B4)), v167, v168);
  v171 = vqsubq_s32(v256, v255);
  v172 = vqsubq_s32(v254, v253);
  v173 = vqsubq_s32(v281, v282);
  v174 = vqsubq_s32(*a1, v257);
  v175 = vrshrq_n_s32(vmulq_s32(vaddq_s32(v173, v172), v43), 0xDuLL);
  v176 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v172, v42), v173, v43), 0xDuLL);
  v177 = vrshrq_n_s32(v260, 0xDuLL);
  v178 = vrshrq_n_s32(v259, 0xDuLL);
  v179 = vrshrq_n_s32(v114, 0xDuLL);
  v180 = vrshrq_n_s32(v115, 0xDuLL);
  v181 = vqaddq_s32(v171, v176);
  v182 = vqaddq_s32(v174, v175);
  v183 = vqaddq_s32(v181, v178);
  v184 = vqaddq_s32(v182, v177);
  v185 = vqaddq_s32(v183, v180);
  v186 = vqaddq_s32(v184, v179);
  v187 = vdupq_n_s32(0x190u);
  v188 = vmlaq_s32(vmulq_s32(v185, v187), v186, vdupq_n_s32(0x1FF8u));
  v189 = vmlaq_s32(vmulq_s32(v185, vdupq_n_s32(0xFFFFE008)), v186, v187);
  v190 = vqsubq_s32(v183, v180);
  v191 = vqsubq_s32(v184, v179);
  v192 = vdupq_n_s32(0x17B4u);
  v193 = vmlaq_s32(vmulq_s32(v190, v192), v191, vdupq_n_s32(0x157Cu));
  v194 = vmlaq_s32(vmulq_s32(v190, vdupq_n_s32(0xFFFFEA84)), v191, v192);
  v195 = vqsubq_s32(v181, v178);
  v196 = vqsubq_s32(v182, v177);
  v197 = vrshrq_n_s32(v116, 0xDuLL);
  v198 = vrshrq_n_s32(v117, 0xDuLL);
  v199 = vqsubq_s32(v195, v198);
  v200 = vqsubq_s32(v196, v197);
  v201 = vdupq_n_s32(0xDB0u);
  v202 = vmlaq_s32(vmulq_s32(v199, v201), v200, vdupq_n_s32(0x1CECu));
  v203 = vmlaq_s32(vmulq_s32(v199, vdupq_n_s32(0xFFFFE314)), v200, v201);
  v204 = vqaddq_s32(v195, v198);
  v205 = vdupq_n_s32(0x1E20u);
  v206 = vqaddq_s32(v196, v197);
  v207 = vmlaq_s32(vmulq_s32(v204, v205), v206, vdupq_n_s32(0xAC8u));
  v208 = vmlaq_s32(vmulq_s32(v204, vdupq_n_s32(0xFFFFF538)), v206, v205);
  v209 = vqsubq_s32(v171, v176);
  v210 = vqsubq_s32(v174, v175);
  v211 = vrshrq_n_s32(v270, 0xDuLL);
  v212 = vrshrq_n_s32(v269, 0xDuLL);
  v213 = vrshrq_n_s32(v131, 0xDuLL);
  v214 = vrshrq_n_s32(v132, 0xDuLL);
  v215 = vqsubq_s32(v209, v212);
  v216 = vqsubq_s32(v210, v211);
  v217 = vqaddq_s32(v215, v214);
  v218 = vqaddq_s32(v216, v213);
  v219 = vdupq_n_s32(0x7C8u);
  v220 = vmlaq_s32(vmulq_s32(v217, v219), v218, vdupq_n_s32(0x1F0Cu));
  v221 = vmlaq_s32(vmulq_s32(v217, vdupq_n_s32(0xFFFFE0F4)), v218, v219);
  v222 = vqsubq_s32(v215, v214);
  v223 = vqsubq_s32(v216, v213);
  v224 = vdupq_n_s32(0x1B74u);
  v225 = vmlaq_s32(vmulq_s32(v222, v224), v223, vdupq_n_s32(0x1074u));
  v226 = vmlaq_s32(vmulq_s32(v222, vdupq_n_s32(0xFFFFEF8C)), v223, v224);
  v227 = vqaddq_s32(v209, v212);
  v228 = vqaddq_s32(v210, v211);
  v229 = vrshrq_n_s32(v133, 0xDuLL);
  v230 = vrshrq_n_s32(v134, 0xDuLL);
  v231 = vqsubq_s32(v227, v230);
  v232 = vqsubq_s32(v228, v229);
  v233 = vdupq_n_s32(0x1310u);
  v234 = vmlaq_s32(vmulq_s32(v231, v233), v232, vdupq_n_s32(0x19B4u));
  v235 = vmlaq_s32(vmulq_s32(v231, vdupq_n_s32(0xFFFFE64C)), v232, v233);
  v236 = vqaddq_s32(v227, v230);
  v237 = vdupq_n_s32(0x1FA8u);
  v238 = vqaddq_s32(v228, v229);
  v239 = vmlaq_s32(vmulq_s32(v236, v237), v238, vdupq_n_s32(0x4B4u));
  v240 = vmlaq_s32(vmulq_s32(v236, vdupq_n_s32(0xFFFFFB4C)), v238, v237);
  v241 = vqaddq_s32(v274, v273);
  v242 = vqaddq_s32(v276, v275);
  *a2 = vrshrq_n_s32(vmulq_s32(vaddq_s32(v242, v241), v43), 0xDuLL);
  a2[1] = vrshrq_n_s32(v188, 0xDuLL);
  a2[2] = vrshrq_n_s32(v151, 0xDuLL);
  a2[3] = vrshrq_n_s32(v240, 0xDuLL);
  a2[4] = vrshrq_n_s32(v268, 0xDuLL);
  a2[5] = vrshrq_n_s32(v220, 0xDuLL);
  a2[6] = vrshrq_n_s32(v170, 0xDuLL);
  a2[7] = vrshrq_n_s32(v208, 0xDuLL);
  a2[8] = vrshrq_n_s32(v277, 0xDuLL);
  a2[9] = vrshrq_n_s32(v202, 0xDuLL);
  a2[10] = vrshrq_n_s32(v164, 0xDuLL);
  a2[11] = vrshrq_n_s32(v226, 0xDuLL);
  a2[12] = vrshrq_n_s32(v264, 0xDuLL);
  a2[13] = vrshrq_n_s32(v234, 0xDuLL);
  a2[14] = vrshrq_n_s32(v156, 0xDuLL);
  a2[15] = vrshrq_n_s32(v194, 0xDuLL);
  a2[16] = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v241, v43), v242, v140), 0xDuLL);
  a2[17] = vrshrq_n_s32(v193, 0xDuLL);
  a2[18] = vrshrq_n_s32(v155, 0xDuLL);
  a2[19] = vrshrq_n_s32(v235, 0xDuLL);
  a2[20] = vrshrq_n_s32(v266, 0xDuLL);
  a2[21] = vrshrq_n_s32(v225, 0xDuLL);
  a2[22] = vrshrq_n_s32(v165, 0xDuLL);
  a2[23] = vrshrq_n_s32(v203, 0xDuLL);
  a2[24] = vrshrq_n_s32(v278, 0xDuLL);
  a2[25] = vrshrq_n_s32(v207, 0xDuLL);
  a2[26] = vrshrq_n_s32(v169, 0xDuLL);
  a2[27] = vrshrq_n_s32(v221, 0xDuLL);
  a2[28] = vrshrq_n_s32(v272, 0xDuLL);
  a2[29] = vrshrq_n_s32(v239, 0xDuLL);
  result = vrshrq_n_s32(v280, 0xDuLL);
  a2[30] = result;
  a2[31] = vrshrq_n_s32(v189, 0xDuLL);
  return result;
}

int16x4_t fdct4x16_col_neon(int16x4_t *a1, int16x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x4_t v6;
  int16x4_t *v7;
  int16x4_t v8;
  int16x4_t *v9;
  int16x4_t v10;
  int16x4_t *v11;
  int16x4_t v12;
  int16x4_t *v13;
  int16x4_t v14;
  int16x4_t *v15;
  int16x4_t v16;
  int16x4_t *v17;
  int16x4_t v18;
  int16x4_t *v19;
  int16x4_t v20;
  int16x4_t *v21;
  int16x4_t v22;
  int16x4_t *v23;
  int16x4_t v24;
  int16x4_t *v25;
  int16x4_t v26;
  int16x4_t *v27;
  int16x4_t v28;
  int16x4_t *v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x4_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  int16x4_t v100;
  int32x4_t v101;
  int16x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int16x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  int16x4_t v110;
  int16x4_t v111;
  int16x4_t v112;
  int16x4_t v113;
  int16x4_t v114;
  int16x4_t result;

  v4 = 2 * a3;
  v5 = (int16x4_t *)((char *)a1 + v4 + v4);
  v6 = *v5;
  v7 = (int16x4_t *)((char *)v5 + v4);
  v8 = *v7;
  v9 = (int16x4_t *)((char *)v7 + v4);
  v10 = *v9;
  v11 = (int16x4_t *)((char *)v9 + v4);
  v12 = *v11;
  v13 = (int16x4_t *)((char *)v11 + v4);
  v14 = *v13;
  v15 = (int16x4_t *)((char *)v13 + v4);
  v16 = *v15;
  v17 = (int16x4_t *)((char *)v15 + v4);
  v18 = *v17;
  v19 = (int16x4_t *)((char *)v17 + v4);
  v20 = *v19;
  v21 = (int16x4_t *)((char *)v19 + v4);
  v22 = *v21;
  v23 = (int16x4_t *)((char *)v21 + v4);
  v24 = *v23;
  v25 = (int16x4_t *)((char *)v23 + v4);
  v26 = *v25;
  v27 = (int16x4_t *)((char *)v25 + v4);
  v28 = *v27;
  v29 = (int16x4_t *)((char *)v27 + v4);
  v30 = vshl_n_s16(*a1, 2uLL);
  v31 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v4), 2uLL);
  v32 = vshl_n_s16(v6, 2uLL);
  v33 = vshl_n_s16(v8, 2uLL);
  v34 = vshl_n_s16(v10, 2uLL);
  v35 = vshl_n_s16(v12, 2uLL);
  v36 = vshl_n_s16(v14, 2uLL);
  v37 = vshl_n_s16(v16, 2uLL);
  v38 = vshl_n_s16(v18, 2uLL);
  v39 = vshl_n_s16(v20, 2uLL);
  v40 = vshl_n_s16(v22, 2uLL);
  v41 = vshl_n_s16(v24, 2uLL);
  v42 = vshl_n_s16(v26, 2uLL);
  v43 = vshl_n_s16(v28, 2uLL);
  v44 = vshl_n_s16(*v29, 2uLL);
  v45 = vshl_n_s16(*(int16x4_t *)((char *)v29 + v4), 2uLL);
  v47 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v46 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v48 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v49 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v50 = vqadd_s16(v30, v45);
  v51 = vqadd_s16(v31, v44);
  v52 = vqadd_s16(v32, v43);
  v53 = vqadd_s16(v33, v42);
  v54 = vqadd_s16(v34, v41);
  v55 = vqadd_s16(v35, v40);
  v56 = vqadd_s16(v36, v39);
  v57 = vqadd_s16(v37, v38);
  v58 = vqsub_s16(v37, v38);
  v59 = vqsub_s16(v36, v39);
  v60 = vqsub_s16(v35, v40);
  v61 = vqsub_s16(v34, v41);
  v62 = vqsub_s16(v33, v42);
  v63 = vqsub_s16(v32, v43);
  v64 = vqsub_s16(v31, v44);
  v65 = vqsub_s16(v30, v45);
  v66 = vqadd_s16(v50, v57);
  v67 = vqadd_s16(v51, v56);
  v68 = vqadd_s16(v52, v55);
  v69 = vqadd_s16(v53, v54);
  v70 = vqsub_s16(v53, v54);
  v71 = vqsub_s16(v52, v55);
  v72 = vqsub_s16(v51, v56);
  v73 = vqsub_s16(v50, v57);
  v74 = vmlal_lane_s16(vmull_lane_s16(v60, *(int16x4_t *)v47.i8, 1), v63, *(int16x4_t *)v47.i8, 0);
  v75 = vmlal_lane_s16(vmull_lane_s16(v60, *(int16x4_t *)v47.i8, 2), v63, *(int16x4_t *)v47.i8, 1);
  v76 = vqrshrn_n_s32(v74, 0xDuLL);
  *(int16x4_t *)v75.i8 = vqrshrn_n_s32(v75, 0xDuLL);
  *(int16x4_t *)v74.i8 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v61, *(int16x4_t *)v47.i8, 1), v62, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v77 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v61, *(int16x4_t *)v47.i8, 2), v62, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  v78 = vqadd_s16(v66, v69);
  v79 = vqadd_s16(v67, v68);
  v80 = vqsub_s16(v67, v68);
  v81 = vqsub_s16(v66, v69);
  v82 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v71, *(int16x4_t *)v47.i8, 1), v72, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v83 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v71, *(int16x4_t *)v47.i8, 2), v72, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  v84 = vqadd_s16(v58, v77);
  v85 = vqadd_s16(v59, *(int16x4_t *)v75.i8);
  v86 = vqsub_s16(v59, *(int16x4_t *)v75.i8);
  v87 = vqsub_s16(v58, v77);
  v88 = vqsub_s16(v65, *(int16x4_t *)v74.i8);
  v89 = vqsub_s16(v64, v76);
  v90 = vqadd_s16(v64, v76);
  v91 = vqadd_s16(v65, *(int16x4_t *)v74.i8);
  v92 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v79, *(int16x4_t *)v47.i8, 1), v78, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v93 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v79, *(int16x4_t *)v47.i8, 2), v78, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  *(int16x4_t *)v75.i8 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v80, v47, 5), v81, v47, 4), 0xDuLL);
  v94 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v80, v47, 6), v81, v47, 5), 0xDuLL);
  v95 = vqadd_s16(v70, v83);
  v96 = vqsub_s16(v70, v83);
  v97 = vqsub_s16(v73, v82);
  v98 = vqadd_s16(v73, v82);
  v99 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v85, v47, 5), v90, v47, 4), 0xDuLL);
  v100 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v85, v47, 6), v90, v47, 5), 0xDuLL);
  v101 = vmlal_laneq_s16(vmull_laneq_s16(v86, v47, 7), v89, v47, 6);
  *(int16x4_t *)v47.i8 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v86, v47, 6), v89, v47, 5), 0xDuLL);
  v102 = vqrshrn_n_s32(v101, 0xDuLL);
  v103 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v46.i8, 1), v98, *(int16x4_t *)v46.i8, 0);
  v104 = vmlal_lane_s16(vmull_lane_s16(v95, *(int16x4_t *)v46.i8, 2), v98, *(int16x4_t *)v46.i8, 1);
  v105 = vqrshrn_n_s32(v103, 0xDuLL);
  v106 = vmlal_laneq_s16(vmull_laneq_s16(v96, v46, 4), v97, v46, 5);
  v107 = vmlal_laneq_s16(vmull_laneq_s16(v96, v46, 7), v97, v46, 4);
  v108 = vqadd_s16(v84, v100);
  v109 = vqsub_s16(v84, v100);
  v110 = vqsub_s16(v87, v102);
  v111 = vqadd_s16(v87, v102);
  v112 = vqadd_s16(v88, *(int16x4_t *)v47.i8);
  *(int16x4_t *)v47.i8 = vqsub_s16(v88, *(int16x4_t *)v47.i8);
  v113 = vqsub_s16(v91, v99);
  v114 = vqadd_s16(v91, v99);
  *a2 = v92;
  a2[1] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v108, *(int16x4_t *)v48.i8, 1), v114, *(int16x4_t *)v48.i8, 0), 0xDuLL);
  a2[14] = vqrshrn_n_s32(v104, 0xDuLL);
  a2[15] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v108, *(int16x4_t *)v48.i8, 2), v114, *(int16x4_t *)v48.i8, 1), 0xDuLL);
  a2[8] = v93;
  a2[9] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v109, v49, 4), v113, v49, 5), 0xDuLL);
  a2[6] = vqrshrn_n_s32(v107, 0xDuLL);
  a2[7] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v109, v49, 7), v113, v49, 4), 0xDuLL);
  a2[4] = *(int16x4_t *)v75.i8;
  a2[5] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v110, *(int16x4_t *)v49.i8, 1), *(int16x4_t *)v47.i8, *(int16x4_t *)v49.i8, 0), 0xDuLL);
  a2[10] = vqrshrn_n_s32(v106, 0xDuLL);
  a2[11] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v110, *(int16x4_t *)v49.i8, 2), *(int16x4_t *)v47.i8, *(int16x4_t *)v49.i8, 1), 0xDuLL);
  a2[12] = v94;
  a2[13] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v111, v48, 4), v112, v48, 5), 0xDuLL);
  result = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v111, v48, 7), v112, v48, 4), 0xDuLL);
  a2[2] = v105;
  a2[3] = result;
  return result;
}

int16x4_t fadst4x16_col_neon(int16x4_t *a1, int16x4_t *a2, int a3, int a4)
{
  uint64_t v4;
  int16x4_t *v5;
  int16x4_t v6;
  int16x4_t *v7;
  int16x4_t v8;
  int16x4_t *v9;
  int16x4_t v10;
  int16x4_t *v11;
  int16x4_t v12;
  int16x4_t *v13;
  int16x4_t v14;
  int16x4_t *v15;
  int16x4_t v16;
  int16x4_t *v17;
  int16x4_t v18;
  int16x4_t *v19;
  int16x4_t v20;
  int16x4_t *v21;
  int16x4_t v22;
  int16x4_t *v23;
  int16x4_t v24;
  int16x4_t *v25;
  int16x4_t v26;
  int16x4_t *v27;
  int16x4_t v28;
  int16x4_t *v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int16x4_t v92;
  int16x4_t v93;
  int16x4_t v94;
  int16x4_t v95;
  int16x4_t v96;
  int16x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x4_t v102;
  int16x4_t v103;
  int16x4_t v104;
  int16x4_t v105;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v108;
  int16x4_t v109;
  int16x4_t v110;
  int32x4_t v111;
  int16x4_t result;

  v4 = 2 * a3;
  v5 = (int16x4_t *)((char *)a1 + v4 + v4);
  v6 = *v5;
  v7 = (int16x4_t *)((char *)v5 + v4);
  v8 = *v7;
  v9 = (int16x4_t *)((char *)v7 + v4);
  v10 = *v9;
  v11 = (int16x4_t *)((char *)v9 + v4);
  v12 = *v11;
  v13 = (int16x4_t *)((char *)v11 + v4);
  v14 = *v13;
  v15 = (int16x4_t *)((char *)v13 + v4);
  v16 = *v15;
  v17 = (int16x4_t *)((char *)v15 + v4);
  v18 = *v17;
  v19 = (int16x4_t *)((char *)v17 + v4);
  v20 = *v19;
  v21 = (int16x4_t *)((char *)v19 + v4);
  v22 = *v21;
  v23 = (int16x4_t *)((char *)v21 + v4);
  v24 = *v23;
  v25 = (int16x4_t *)((char *)v23 + v4);
  v26 = *v25;
  v27 = (int16x4_t *)((char *)v25 + v4);
  v28 = *v27;
  v29 = (int16x4_t *)((char *)v27 + v4);
  v30 = vshl_n_s16(*a1, 2uLL);
  v31 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v4), 2uLL);
  v32 = vshl_n_s16(v6, 2uLL);
  v33 = vshl_n_s16(v8, 2uLL);
  v34 = vshl_n_s16(v10, 2uLL);
  v35 = vshl_n_s16(v12, 2uLL);
  v36 = vshl_n_s16(v14, 2uLL);
  v37 = vshl_n_s16(v16, 2uLL);
  v38 = vshl_n_s16(v18, 2uLL);
  v39 = vshl_n_s16(v20, 2uLL);
  v40 = vshl_n_s16(v22, 2uLL);
  v41 = vshl_n_s16(v24, 2uLL);
  v42 = vshl_n_s16(v26, 2uLL);
  v43 = vshl_n_s16(v28, 2uLL);
  v44 = vshl_n_s16(*v29, 2uLL);
  v45 = vshl_n_s16(*(int16x4_t *)((char *)v29 + v4), 2uLL);
  v47 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v46 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v48 = vmlal_lane_s16(vmull_lane_s16(v37, *(int16x4_t *)v47.i8, 3), v38, *(int16x4_t *)v47.i8, 0);
  v49 = vmlal_lane_s16(vmull_lane_s16(v37, *(int16x4_t *)v47.i8, 2), v38, *(int16x4_t *)v47.i8, 3);
  v50 = vqrshrn_n_s32(v48, 0xDuLL);
  *(int16x4_t *)v49.i8 = vqrshrn_n_s32(v49, 0xDuLL);
  *(int16x4_t *)v48.i8 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v41, *(int16x4_t *)v47.i8, 1), v34, *(int16x4_t *)v47.i8, 0), 0xDuLL);
  v51 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v41, *(int16x4_t *)v47.i8, 2), v34, *(int16x4_t *)v47.i8, 1), 0xDuLL);
  v52 = vmlal_lane_s16(vmull_lane_s16(v39, *(int16x4_t *)v47.i8, 1), v36, *(int16x4_t *)v47.i8, 0);
  v53 = vmlal_lane_s16(vmull_lane_s16(v39, *(int16x4_t *)v47.i8, 2), v36, *(int16x4_t *)v47.i8, 1);
  v54 = vqrshrn_n_s32(v52, 0xDuLL);
  *(int16x4_t *)v53.i8 = vqrshrn_n_s32(v53, 0xDuLL);
  v55 = vmlal_lane_s16(vmull_lane_s16(v35, *(int16x4_t *)v47.i8, 3), v40, *(int16x4_t *)v47.i8, 0);
  v56 = vmlal_lane_s16(vmull_lane_s16(v35, *(int16x4_t *)v47.i8, 2), v40, *(int16x4_t *)v47.i8, 3);
  v57 = vqrshrn_n_s32(v55, 0xDuLL);
  v58 = vqrshrn_n_s32(v56, 0xDuLL);
  v59 = vqadd_s16(v30, v50);
  v60 = vqsub_s16(*(int16x4_t *)v49.i8, v45);
  v61 = vqsub_s16(v30, v50);
  *(int16x4_t *)v49.i8 = vqadd_s16(v45, *(int16x4_t *)v49.i8);
  v62 = vqsub_s16(v51, v33);
  v63 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v64 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v65 = vqadd_s16(v42, *(int16x4_t *)v48.i8);
  v66 = vqadd_s16(v33, v51);
  v67 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v68 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v69 = vqsub_s16(v42, *(int16x4_t *)v48.i8);
  *(int16x4_t *)v48.i8 = vqsub_s16(*(int16x4_t *)v53.i8, v31);
  v70 = vqadd_s16(v44, v54);
  v71 = vqadd_s16(v31, *(int16x4_t *)v53.i8);
  v72 = vqsub_s16(v44, v54);
  *(int16x4_t *)v53.i8 = vqadd_s16(v32, v57);
  v73 = vqsub_s16(v58, v43);
  v74 = vqsub_s16(v32, v57);
  v75 = vqadd_s16(v43, v58);
  v76 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v65, v47, 5), v62, v47, 4), 0xDuLL);
  v77 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v65, v47, 6), v62, v47, 5), 0xDuLL);
  v78 = vmlal_laneq_s16(vmull_laneq_s16(v66, v47, 5), v69, v47, 4);
  v79 = vmlal_laneq_s16(vmull_laneq_s16(v66, v47, 6), v69, v47, 5);
  v80 = vqrshrn_n_s32(v78, 0xDuLL);
  *(int16x4_t *)v79.i8 = vqrshrn_n_s32(v79, 0xDuLL);
  v81 = vmlal_laneq_s16(vmull_laneq_s16(v73, v47, 5), *(int16x4_t *)v53.i8, v47, 4);
  v82 = vmlal_laneq_s16(vmull_laneq_s16(v73, v47, 6), *(int16x4_t *)v53.i8, v47, 5);
  *(int16x4_t *)v53.i8 = vqrshrn_n_s32(v81, 0xDuLL);
  *(int16x4_t *)v82.i8 = vqrshrn_n_s32(v82, 0xDuLL);
  v83 = vmlal_laneq_s16(vmull_laneq_s16(v75, v47, 7), v74, v47, 4);
  v84 = vmlal_laneq_s16(vmull_laneq_s16(v75, v47, 6), v74, v47, 7);
  *(int16x4_t *)v47.i8 = vqrshrn_n_s32(v83, 0xDuLL);
  v85 = vqrshrn_n_s32(v84, 0xDuLL);
  *(int16x4_t *)v84.i8 = vqadd_s16(v59, v76);
  *(int16x4_t *)v83.i8 = vqadd_s16(v60, v77);
  v86 = vqadd_s16(v61, v80);
  v87 = vqsub_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v49.i8);
  v88 = vqsub_s16(v59, v76);
  v89 = vqsub_s16(v60, v77);
  v90 = vqsub_s16(v61, v80);
  *(int16x4_t *)v79.i8 = vqadd_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v79.i8);
  *(int16x4_t *)v49.i8 = vqadd_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v53.i8);
  v91 = vqadd_s16(v70, *(int16x4_t *)v82.i8);
  v92 = vqsub_s16(v85, v71);
  v93 = vqadd_s16(v72, *(int16x4_t *)v47.i8);
  *(int16x4_t *)v53.i8 = vqsub_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v53.i8);
  *(int16x4_t *)v82.i8 = vqsub_s16(v70, *(int16x4_t *)v82.i8);
  v94 = vqadd_s16(v71, v85);
  *(int16x4_t *)v47.i8 = vqsub_s16(v72, *(int16x4_t *)v47.i8);
  v95 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v91, *(int16x4_t *)v46.i8, 1), *(int16x4_t *)v49.i8, *(int16x4_t *)v46.i8, 0), 0xDuLL);
  v96 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v91, *(int16x4_t *)v46.i8, 2), *(int16x4_t *)v49.i8, *(int16x4_t *)v46.i8, 1), 0xDuLL);
  *(int16x4_t *)v49.i8 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v93, v46, 4), v92, v46, 5), 0xDuLL);
  v97 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v93, v46, 7), v92, v46, 4), 0xDuLL);
  v98 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v46.i8, 0), *(int16x4_t *)v82.i8, *(int16x4_t *)v46.i8, 1);
  v99 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v46.i8, 3), *(int16x4_t *)v82.i8, *(int16x4_t *)v46.i8, 0);
  *(int16x4_t *)v82.i8 = vqrshrn_n_s32(v98, 0xDuLL);
  *(int16x4_t *)v99.i8 = vqrshrn_n_s32(v99, 0xDuLL);
  v100 = vmlal_laneq_s16(vmull_laneq_s16(v94, v46, 4), *(int16x4_t *)v47.i8, v46, 5);
  v101 = vmlal_laneq_s16(vmull_laneq_s16(v94, v46, 7), *(int16x4_t *)v47.i8, v46, 4);
  *(int16x4_t *)v46.i8 = vqrshrn_n_s32(v100, 0xDuLL);
  *(int16x4_t *)v47.i8 = vqrshrn_n_s32(v101, 0xDuLL);
  *(int16x4_t *)v101.i8 = vqadd_s16(*(int16x4_t *)v84.i8, v95);
  *(int16x4_t *)v100.i8 = vqadd_s16(*(int16x4_t *)v83.i8, v96);
  v102 = vqadd_s16(v86, *(int16x4_t *)v49.i8);
  v103 = vqadd_s16(v87, v97);
  v104 = vqadd_s16(v88, *(int16x4_t *)v99.i8);
  v105 = vqadd_s16(v89, *(int16x4_t *)v82.i8);
  v106 = vqadd_s16(v90, *(int16x4_t *)v46.i8);
  v107 = vqsub_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v79.i8);
  *(int16x4_t *)v84.i8 = vqsub_s16(*(int16x4_t *)v84.i8, v95);
  *(int16x4_t *)v83.i8 = vqsub_s16(*(int16x4_t *)v83.i8, v96);
  v108 = vqsub_s16(v86, *(int16x4_t *)v49.i8);
  v109 = vqsub_s16(v87, v97);
  v110 = vqsub_s16(v88, *(int16x4_t *)v99.i8);
  *(int16x4_t *)v49.i8 = vqsub_s16(v89, *(int16x4_t *)v82.i8);
  *(int16x4_t *)v46.i8 = vqsub_s16(v90, *(int16x4_t *)v46.i8);
  *(int16x4_t *)v47.i8 = vqadd_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v47.i8);
  v111 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v63.i8, 2), *(int16x4_t *)v101.i8, *(int16x4_t *)v63.i8, 1);
  a2[6] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v107, *(int16x4_t *)v68.i8, 2), v106, *(int16x4_t *)v68.i8, 1), 0xDuLL);
  a2[7] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v83.i8, v68, 4), *(int16x4_t *)v84.i8, v68, 5), 0xDuLL);
  a2[8] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v83.i8, v68, 7), *(int16x4_t *)v84.i8, v68, 4), 0xDuLL);
  a2[9] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v107, *(int16x4_t *)v68.i8, 1), v106, *(int16x4_t *)v68.i8, 0), 0xDuLL);
  a2[4] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v105, *(int16x4_t *)v67.i8, 2), v104, *(int16x4_t *)v67.i8, 1), 0xDuLL);
  a2[5] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v109, v67, 4), v108, v67, 5), 0xDuLL);
  a2[10] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v109, v67, 7), v108, v67, 4), 0xDuLL);
  a2[11] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v105, *(int16x4_t *)v67.i8, 1), v104, *(int16x4_t *)v67.i8, 0), 0xDuLL);
  a2[2] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v103, *(int16x4_t *)v64.i8, 2), v102, *(int16x4_t *)v64.i8, 1), 0xDuLL);
  a2[3] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v49.i8, v64, 4), v110, v64, 5), 0xDuLL);
  a2[12] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v49.i8, v64, 7), v110, v64, 4), 0xDuLL);
  a2[13] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v103, *(int16x4_t *)v64.i8, 1), v102, *(int16x4_t *)v64.i8, 0), 0xDuLL);
  a2[14] = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v47.i8, v63, 5), *(int16x4_t *)v46.i8, v63, 4), 0xDuLL);
  a2[15] = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v63.i8, 1), *(int16x4_t *)v101.i8, *(int16x4_t *)v63.i8, 0), 0xDuLL);
  result = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v47.i8, v63, 6), *(int16x4_t *)v46.i8, v63, 5), 0xDuLL);
  *a2 = vqrshrn_n_s32(v111, 0xDuLL);
  a2[1] = result;
  return result;
}

int16x4_t fidentity4x16_col_neon(int16x4_t *a1, int16x4_t *a2, int a3)
{
  uint64_t v3;
  int16x4_t *v4;
  int16x4_t v5;
  int16x4_t *v6;
  int16x4_t v7;
  int16x4_t *v8;
  int16x4_t v9;
  int16x4_t *v10;
  int16x4_t v11;
  int16x4_t *v12;
  int16x4_t v13;
  int16x4_t *v14;
  int16x4_t v15;
  int16x4_t *v16;
  int16x4_t v17;
  int16x4_t *v18;
  int16x4_t v19;
  int16x4_t *v20;
  int16x4_t v21;
  int16x4_t *v22;
  int16x4_t v23;
  int16x4_t *v24;
  int16x4_t v25;
  int16x4_t *v26;
  int16x4_t v27;
  int16x4_t *v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t result;

  v3 = 2 * a3;
  v4 = (int16x4_t *)((char *)a1 + v3 + v3);
  v5 = *v4;
  v6 = (int16x4_t *)((char *)v4 + v3);
  v7 = *v6;
  v8 = (int16x4_t *)((char *)v6 + v3);
  v9 = *v8;
  v10 = (int16x4_t *)((char *)v8 + v3);
  v11 = *v10;
  v12 = (int16x4_t *)((char *)v10 + v3);
  v13 = *v12;
  v14 = (int16x4_t *)((char *)v12 + v3);
  v15 = *v14;
  v16 = (int16x4_t *)((char *)v14 + v3);
  v17 = *v16;
  v18 = (int16x4_t *)((char *)v16 + v3);
  v19 = *v18;
  v20 = (int16x4_t *)((char *)v18 + v3);
  v21 = *v20;
  v22 = (int16x4_t *)((char *)v20 + v3);
  v23 = *v22;
  v24 = (int16x4_t *)((char *)v22 + v3);
  v25 = *v24;
  v26 = (int16x4_t *)((char *)v24 + v3);
  v27 = *v26;
  v28 = (int16x4_t *)((char *)v26 + v3);
  v29 = vshl_n_s16(*(int16x4_t *)((char *)a1 + v3), 2uLL);
  v30 = vshl_n_s16(*v28, 2uLL);
  v31 = vshl_n_s16(*(int16x4_t *)((char *)v28 + v3), 2uLL);
  v32 = vdup_n_s16(0x2D42u);
  *a2 = vqrshrn_n_s32(vmull_s16(vshl_n_s16(*a1, 2uLL), v32), 0xCuLL);
  a2[1] = vqrshrn_n_s32(vmull_s16(v29, v32), 0xCuLL);
  a2[2] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v5, 2uLL), v32), 0xCuLL);
  a2[3] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v7, 2uLL), v32), 0xCuLL);
  a2[4] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v9, 2uLL), v32), 0xCuLL);
  a2[5] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v11, 2uLL), v32), 0xCuLL);
  a2[6] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v13, 2uLL), v32), 0xCuLL);
  a2[7] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v15, 2uLL), v32), 0xCuLL);
  a2[8] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v17, 2uLL), v32), 0xCuLL);
  a2[9] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v19, 2uLL), v32), 0xCuLL);
  a2[10] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v21, 2uLL), v32), 0xCuLL);
  a2[11] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v23, 2uLL), v32), 0xCuLL);
  a2[12] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v25, 2uLL), v32), 0xCuLL);
  a2[13] = vqrshrn_n_s32(vmull_s16(vshl_n_s16(v27, 2uLL), v32), 0xCuLL);
  result = vqrshrn_n_s32(vmull_s16(v30, v32), 0xCuLL);
  a2[14] = result;
  a2[15] = vqrshrn_n_s32(vmull_s16(v31, v32), 0xCuLL);
  return result;
}

int32x4_t fdct8x4_row_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int32x4_t *v21;
  int32x4_t result;
  int32x4_t *v23;

  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = vqaddq_s16(*a1, v5);
  v8 = vqaddq_s16(v4, v6);
  v9 = vqsubq_s16(v4, v6);
  v10 = vqsubq_s16(*a1, v5);
  v11 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v12 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v11.i8, 1), *(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8, 0);
  v13 = vmlal_high_lane_s16(vmull_high_lane_s16(v8, *(int16x4_t *)v11.i8, 1), v7, *(int16x4_t *)v11.i8, 0);
  v14 = vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v11.i8, 2), *(int16x4_t *)v7.i8, *(int16x4_t *)v11.i8, 1);
  v15 = vmlal_high_lane_s16(vmull_high_lane_s16(v8, *(int16x4_t *)v11.i8, 2), v7, *(int16x4_t *)v11.i8, 1);
  v7.i64[0] = 0x100000001000;
  v7.i64[1] = 0x100000001000;
  v16 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v9.i8, v11, 5), *(int16x4_t *)v10.i8, v11, 4);
  v17 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v9, v11, 5), v10, v11, 4);
  v18 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v9.i8, v11, 6), *(int16x4_t *)v10.i8, v11, 5);
  v19 = vmlal_high_laneq_s16(vmull_high_laneq_s16(v9, v11, 6), v10, v11, 5);
  *a2 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v12, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  a2[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v13, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  v20 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v20 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v16, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  v20[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v17, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  v21 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v21 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v14, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  v21[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v15, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  result = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v18, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  v23 = (int32x4_t *)((char *)a2 + 12 * a3);
  *v23 = result;
  v23[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v19, (int32x4_t)v7), 0xDuLL), 0x10uLL), 0x10uLL);
  return result;
}

int32x4_t fadst8x4_row_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x4_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t *v20;
  int32x4_t *v21;
  int32x4_t *v22;
  int32x4_t result;

  v4 = av1_sinpi_arr_q13_data[a4 - 10];
  v5 = a1[1];
  v6 = vqaddq_s16(*a1, v5);
  v8 = a1[2];
  v7 = a1[3];
  v9 = vmlal_lane_s16(vmlal_lane_s16(vmlal_lane_s16(vmull_lane_s16(*(int16x4_t *)a1->i8, v4, 0), *(int16x4_t *)v5.i8, v4, 1), *(int16x4_t *)v7.i8, v4, 3), *(int16x4_t *)v8.i8, v4, 2);
  v10 = vmlal_high_lane_s16(vmlal_high_lane_s16(vmlal_high_lane_s16(vmull_high_lane_s16(*a1, v4, 0), v5, v4, 1), v7, v4, 3), v8, v4, 2);
  v11 = vmlal_lane_s16(vmlsl_lane_s16(vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)a1->i8, v4, 3), *(int16x4_t *)v8.i8, v4, 2), *(int16x4_t *)v5.i8, v4, 0), *(int16x4_t *)v7.i8, v4, 1);
  v12 = vmlal_high_lane_s16(vmlsl_high_lane_s16(vmlsl_high_lane_s16(vmull_high_lane_s16(*a1, v4, 3), v8, v4, 2), v5, v4, 0), v7, v4, 1);
  v13 = vmlsl_lane_s16(vmull_lane_s16(*(int16x4_t *)v6.i8, v4, 2), *(int16x4_t *)v7.i8, v4, 2);
  v14 = vmlsl_high_lane_s16(vmull_high_lane_s16(v6, v4, 2), v7, v4, 2);
  v15 = vmul_s16(v4, (int16x4_t)0x3000300030003);
  v16 = vmlal_lane_s16(vsubq_s32(v11, v9), *(int16x4_t *)v8.i8, v15, 2);
  v17 = vmlal_high_lane_s16(vsubq_s32(v12, v10), v8, v15, 2);
  v18.i64[0] = 0x100000001000;
  v18.i64[1] = 0x100000001000;
  v19 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v16, v18), 0xDuLL);
  *a2 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v9, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  a2[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v10, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  v20 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v20 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v13, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  v20[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v14, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  v21 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v21 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v11, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  v21[1] = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v12, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  v22 = (int32x4_t *)((char *)a2 + 12 * a3);
  result = vshrq_n_s32(vshlq_n_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v17, v18), 0xDuLL), 0x10uLL), 0x10uLL);
  *v22 = vshrq_n_s32(vshlq_n_s32(v19, 0x10uLL), 0x10uLL);
  v22[1] = result;
  return result;
}

int32x4_t fidentity8x4_row_neon(int16x8_t *a1, int32x4_t *a2, int a3)
{
  int16x8_t v3;
  int16x8_t v4;
  int16x4_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x4_t v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  int32x4_t result;

  v3 = vdupq_n_s16(0x16A1u);
  v4 = a1[1];
  v5 = vqrshrn_n_s32(vmull_high_s16(*a1, v3), 0xCuLL);
  v6 = a1[2];
  v7 = a1[3];
  v8 = vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v3.i8), 0xCuLL);
  *a2 = vmovl_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v3.i8), 0xCuLL));
  a2[1] = vmovl_s16(v5);
  v9 = (int32x4_t *)((char *)a2 + 4 * a3);
  *v9 = vmovl_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v3.i8), 0xCuLL));
  v9[1] = vmovl_s16(vqrshrn_n_s32(vmull_high_s16(v4, v3), 0xCuLL));
  v10 = (int32x4_t *)((char *)a2 + 8 * a3);
  *v10 = vmovl_s16(vqrshrn_n_s32(vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v3.i8), 0xCuLL));
  v10[1] = vmovl_s16(vqrshrn_n_s32(vmull_high_s16(v6, v3), 0xCuLL));
  v11 = (int32x4_t *)((char *)a2 + 12 * a3);
  result = vmovl_s16(vqrshrn_n_s32(vmull_high_s16(v7, v3), 0xCuLL));
  *v11 = vmovl_s16(v8);
  v11[1] = result;
  return result;
}

int32x4_t fdct4x16_row_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x4_t *v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x8_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x4_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int32x4_t result;

  v4 = (int16x4_t *)&av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v5 = a1[1];
  v7 = a1[14];
  v6 = a1[15];
  v8 = vqadd_s16(*a1, v6);
  v9 = vqadd_s16(v5, v7);
  v10 = a1[2];
  v11 = a1[3];
  v13 = a1[12];
  v12 = a1[13];
  v14 = vqadd_s16(v10, v12);
  v15 = vqadd_s16(v11, v13);
  v16 = a1[4];
  v17 = a1[5];
  v19 = a1[10];
  v18 = a1[11];
  v20 = vqadd_s16(v16, v18);
  v21 = vqadd_s16(v17, v19);
  v22 = a1[6];
  v23 = a1[7];
  v25 = a1[8];
  v24 = a1[9];
  v26 = vqadd_s16(v22, v24);
  v27 = vqadd_s16(v23, v25);
  v28 = vqsub_s16(v23, v25);
  v29 = vqsub_s16(v22, v24);
  v30 = vqsub_s16(v17, v19);
  v31 = vqsub_s16(v16, v18);
  v32 = vqsub_s16(v11, v13);
  v33 = vqsub_s16(v10, v12);
  v34 = vqsub_s16(v5, v7);
  v35 = vqsub_s16(*a1, v6);
  v36 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v37 = vqadd_s16(v8, v27);
  v38 = vqadd_s16(v9, v26);
  v39 = vqadd_s16(v14, v21);
  v40 = vqadd_s16(v15, v20);
  v41 = vqsub_s16(v15, v20);
  v42 = vqsub_s16(v14, v21);
  v43 = vqsub_s16(v9, v26);
  v44 = vqsub_s16(v8, v27);
  v45 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v30, *v4, 1), v33, *v4, 0), 0xDuLL);
  v46 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v30, *v4, 2), v33, *v4, 1), 0xDuLL);
  v47 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 158];
  v48 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 157];
  v49 = vmlal_lane_s16(vmull_lane_s16(v31, *v4, 1), v32, *v4, 0);
  v50 = vmlal_lane_s16(vmull_lane_s16(v31, *v4, 2), v32, *v4, 1);
  v51 = vqrshrn_n_s32(v49, 0xDuLL);
  *(int16x4_t *)v50.i8 = vqrshrn_n_s32(v50, 0xDuLL);
  *(int16x4_t *)v49.i8 = vqadd_s16(v37, v40);
  v52 = vqadd_s16(v38, v39);
  v53 = vqsub_s16(v38, v39);
  v54 = vqsub_s16(v37, v40);
  v55 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v42, *v4, 1), v43, *v4, 0), 0xDuLL);
  v56 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v42, *v4, 2), v43, *v4, 1), 0xDuLL);
  v57 = vqadd_s16(v28, *(int16x4_t *)v50.i8);
  v58 = vqadd_s16(v29, v46);
  v59 = vqsub_s16(v29, v46);
  *(int16x4_t *)v50.i8 = vqsub_s16(v28, *(int16x4_t *)v50.i8);
  v60 = vqsub_s16(v35, v51);
  v61 = vqsub_s16(v34, v45);
  v62 = vqadd_s16(v34, v45);
  v63 = vqadd_s16(v35, v51);
  v64 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v52, *v4, 1), *(int16x4_t *)v49.i8, *v4, 0), 0xDuLL);
  v65 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v52, *v4, 2), *(int16x4_t *)v49.i8, *v4, 1), 0xDuLL);
  v66 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v53, *(int16x8_t *)v4->i8, 5), v54, *(int16x8_t *)v4->i8, 4), 0xDuLL);
  v67 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v53, *(int16x8_t *)v4->i8, 6), v54, *(int16x8_t *)v4->i8, 5), 0xDuLL);
  v68 = vqadd_s16(v41, v56);
  v69 = vqsub_s16(v41, v56);
  v70 = vqsub_s16(v44, v55);
  *(int16x4_t *)v49.i8 = vqadd_s16(v44, v55);
  v71 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v58, *(int16x8_t *)v4->i8, 5), v62, *(int16x8_t *)v4->i8, 4), 0xDuLL);
  v72 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v58, *(int16x8_t *)v4->i8, 6), v62, *(int16x8_t *)v4->i8, 5), 0xDuLL);
  v73 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v59, *(int16x8_t *)v4->i8, 6), v61, *(int16x8_t *)v4->i8, 5), 0xDuLL);
  v74 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v59, *(int16x8_t *)v4->i8, 7), v61, *(int16x8_t *)v4->i8, 6), 0xDuLL);
  v75 = vmlal_lane_s16(vmull_lane_s16(v68, *(int16x4_t *)v36.i8, 1), *(int16x4_t *)v49.i8, *(int16x4_t *)v36.i8, 0);
  v76 = vmlal_lane_s16(vmull_lane_s16(v68, *(int16x4_t *)v36.i8, 2), *(int16x4_t *)v49.i8, *(int16x4_t *)v36.i8, 1);
  *(int16x4_t *)v49.i8 = vqrshrn_n_s32(v75, 0xDuLL);
  *(int16x4_t *)v75.i8 = vqrshrn_n_s32(v76, 0xDuLL);
  v77 = vmlal_laneq_s16(vmull_laneq_s16(v69, v36, 7), v70, v36, 4);
  v78 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v69, v36, 4), v70, v36, 5), 0xDuLL);
  v79 = vqadd_s16(v57, v72);
  v80 = vqsub_s16(v57, v72);
  v81 = vqsub_s16(*(int16x4_t *)v50.i8, v74);
  v82 = vqadd_s16(*(int16x4_t *)v50.i8, v74);
  *(int16x4_t *)v76.i8 = vqadd_s16(v60, v73);
  *(int16x4_t *)v50.i8 = vqsub_s16(v60, v73);
  v83 = vqsub_s16(v63, v71);
  *(int16x4_t *)v36.i8 = vqadd_s16(v63, v71);
  *a2 = vmovl_s16(v64);
  *(int32x4_t *)((char *)a2 + 4 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v79, *(int16x4_t *)v47.i8, 1), *(int16x4_t *)v36.i8, *(int16x4_t *)v47.i8, 0), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 8 * a3) = vmovl_s16(*(int16x4_t *)v49.i8);
  *(int32x4_t *)((char *)a2 + 12 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v82, v47, 7), *(int16x4_t *)v76.i8, v47, 4), 0xDuLL));
  a2[a3] = vmovl_s16(v66);
  *(int32x4_t *)((char *)a2 + 20 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v81, *(int16x4_t *)v48.i8, 1), *(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8, 0), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 24 * a3) = vmovl_s16(vqrshrn_n_s32(v77, 0xDuLL));
  *(int32x4_t *)((char *)a2 + 28 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v80, v48, 7), v83, v48, 4), 0xDuLL));
  a2[2 * a3] = vmovl_s16(v65);
  *(int32x4_t *)((char *)a2 + 36 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v80, v48, 4), v83, v48, 5), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 40 * a3) = vmovl_s16(v78);
  *(int32x4_t *)((char *)a2 + 44 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v81, *(int16x4_t *)v48.i8, 2), *(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8, 1), 0xDuLL));
  a2[3 * a3] = vmovl_s16(v67);
  *(int32x4_t *)((char *)a2 + 52 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v82, v47, 4), *(int16x4_t *)v76.i8, v47, 5), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 56 * a3) = vmovl_s16(*(int16x4_t *)v75.i8);
  result = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v79, *(int16x4_t *)v47.i8, 2), *(int16x4_t *)v36.i8, *(int16x4_t *)v47.i8, 1), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 60 * a3) = result;
  return result;
}

int32x4_t fadst4x16_row_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int16x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int32x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int16x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int16x4_t v91;
  int32x4_t result;

  v5 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 160];
  v4 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 159];
  v7 = a1[6];
  v6 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v6, *(int16x4_t *)v5.i8, 3), v8, *(int16x4_t *)v5.i8, 0), 0xDuLL);
  v11 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v6, *(int16x4_t *)v5.i8, 2), v8, *(int16x4_t *)v5.i8, 3), 0xDuLL);
  v13 = a1[10];
  v12 = a1[11];
  v14 = a1[4];
  v15 = a1[5];
  v16 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v5.i8, 1), v14, *(int16x4_t *)v5.i8, 0), 0xDuLL);
  v17 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v12, *(int16x4_t *)v5.i8, 2), v14, *(int16x4_t *)v5.i8, 1), 0xDuLL);
  v18 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v9, *(int16x4_t *)v5.i8, 1), v7, *(int16x4_t *)v5.i8, 0), 0xDuLL);
  v19 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v9, *(int16x4_t *)v5.i8, 2), v7, *(int16x4_t *)v5.i8, 1), 0xDuLL);
  v20 = vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v5.i8, 3), v13, *(int16x4_t *)v5.i8, 0);
  v21 = vmlal_lane_s16(vmull_lane_s16(v15, *(int16x4_t *)v5.i8, 2), v13, *(int16x4_t *)v5.i8, 3);
  v22 = vqrshrn_n_s32(v20, 0xDuLL);
  *(int16x4_t *)v21.i8 = vqrshrn_n_s32(v21, 0xDuLL);
  v23 = a1[1];
  v24 = vqadd_s16(*a1, v10);
  v26 = a1[14];
  v25 = a1[15];
  v27 = vqsub_s16(v11, v25);
  v28 = vqsub_s16(*a1, v10);
  v29 = vqadd_s16(v25, v11);
  v31 = a1[2];
  v30 = a1[3];
  v32 = vqsub_s16(v17, v30);
  v33 = a1[12];
  v34 = a1[13];
  v35 = vqadd_s16(v33, v16);
  v36 = vqadd_s16(v30, v17);
  v37 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 156];
  v38 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 155];
  v39 = vqsub_s16(v33, v16);
  v40 = vqsub_s16(v19, v23);
  v41 = vqadd_s16(v26, v18);
  v42 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 154];
  v43 = av1_cospi_arr_q13_data[16 * (uint64_t)a4 - 153];
  v44 = vqadd_s16(v23, v19);
  v45 = vqsub_s16(v26, v18);
  v46 = vqadd_s16(v31, v22);
  v47 = vqsub_s16(*(int16x4_t *)v21.i8, v34);
  v48 = vqsub_s16(v31, v22);
  *(int16x4_t *)v21.i8 = vqadd_s16(v34, *(int16x4_t *)v21.i8);
  v49 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v35, v5, 5), v32, v5, 4), 0xDuLL);
  v50 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v35, v5, 6), v32, v5, 5), 0xDuLL);
  v51 = vmlal_laneq_s16(vmull_laneq_s16(v36, v5, 6), v39, v5, 5);
  v52 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v36, v5, 5), v39, v5, 4), 0xDuLL);
  v53 = vqrshrn_n_s32(v51, 0xDuLL);
  v54 = vmlal_laneq_s16(vmull_laneq_s16(v47, v5, 5), v46, v5, 4);
  v55 = vmlal_laneq_s16(vmull_laneq_s16(v47, v5, 6), v46, v5, 5);
  v56 = vqrshrn_n_s32(v54, 0xDuLL);
  *(int16x4_t *)v55.i8 = vqrshrn_n_s32(v55, 0xDuLL);
  v57 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v21.i8, v5, 7), v48, v5, 4);
  v58 = vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v21.i8, v5, 6), v48, v5, 7);
  *(int16x4_t *)v5.i8 = vqrshrn_n_s32(v57, 0xDuLL);
  v59 = vqrshrn_n_s32(v58, 0xDuLL);
  *(int16x4_t *)v58.i8 = vqadd_s16(v24, v49);
  *(int16x4_t *)v57.i8 = vqadd_s16(v27, v50);
  v60 = vqadd_s16(v28, v52);
  v61 = vqsub_s16(v53, v29);
  v62 = vqsub_s16(v24, v49);
  v63 = vqsub_s16(v27, v50);
  v64 = vqsub_s16(v28, v52);
  v65 = vqadd_s16(v29, v53);
  v66 = vqadd_s16(v40, v56);
  v67 = vqadd_s16(v41, *(int16x4_t *)v55.i8);
  v68 = vqsub_s16(v59, v44);
  v69 = vqadd_s16(v45, *(int16x4_t *)v5.i8);
  v70 = vqsub_s16(v40, v56);
  *(int16x4_t *)v55.i8 = vqsub_s16(v41, *(int16x4_t *)v55.i8);
  v71 = vqadd_s16(v44, v59);
  *(int16x4_t *)v5.i8 = vqsub_s16(v45, *(int16x4_t *)v5.i8);
  v72 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v67, *(int16x4_t *)v4.i8, 1), v66, *(int16x4_t *)v4.i8, 0), 0xDuLL);
  v73 = vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v67, *(int16x4_t *)v4.i8, 2), v66, *(int16x4_t *)v4.i8, 1), 0xDuLL);
  v74 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v69, v4, 4), v68, v4, 5), 0xDuLL);
  v75 = vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v69, v4, 7), v68, v4, 4), 0xDuLL);
  v76 = vmlal_lane_s16(vmull_lane_s16(v70, *(int16x4_t *)v4.i8, 0), *(int16x4_t *)v55.i8, *(int16x4_t *)v4.i8, 1);
  v77 = vmlal_lane_s16(vmull_lane_s16(v70, *(int16x4_t *)v4.i8, 3), *(int16x4_t *)v55.i8, *(int16x4_t *)v4.i8, 0);
  *(int16x4_t *)v55.i8 = vqrshrn_n_s32(v76, 0xDuLL);
  *(int16x4_t *)v77.i8 = vqrshrn_n_s32(v77, 0xDuLL);
  v78 = vmlal_laneq_s16(vmull_laneq_s16(v71, v4, 4), *(int16x4_t *)v5.i8, v4, 5);
  v79 = vmlal_laneq_s16(vmull_laneq_s16(v71, v4, 7), *(int16x4_t *)v5.i8, v4, 4);
  *(int16x4_t *)v4.i8 = vqrshrn_n_s32(v78, 0xDuLL);
  *(int16x4_t *)v79.i8 = vqrshrn_n_s32(v79, 0xDuLL);
  *(int16x4_t *)v78.i8 = vqadd_s16(*(int16x4_t *)v58.i8, v72);
  v80 = vqadd_s16(*(int16x4_t *)v57.i8, v73);
  v81 = vqadd_s16(v60, v74);
  v82 = vqadd_s16(v61, v75);
  v83 = vqadd_s16(v62, *(int16x4_t *)v77.i8);
  v84 = vqadd_s16(v63, *(int16x4_t *)v55.i8);
  v85 = vqadd_s16(v64, *(int16x4_t *)v4.i8);
  v86 = vqsub_s16(*(int16x4_t *)v79.i8, v65);
  v87 = vqsub_s16(*(int16x4_t *)v58.i8, v72);
  *(int16x4_t *)v57.i8 = vqsub_s16(*(int16x4_t *)v57.i8, v73);
  v88 = vqsub_s16(v60, v74);
  v89 = vqsub_s16(v61, v75);
  v90 = vqsub_s16(v62, *(int16x4_t *)v77.i8);
  v91 = vqsub_s16(v63, *(int16x4_t *)v55.i8);
  *(int16x4_t *)v5.i8 = vqsub_s16(v64, *(int16x4_t *)v4.i8);
  *(int16x4_t *)v79.i8 = vqadd_s16(v65, *(int16x4_t *)v79.i8);
  *a2 = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v80, *(int16x4_t *)v37.i8, 2), *(int16x4_t *)v78.i8, *(int16x4_t *)v37.i8, 1), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 4 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v37, 6), *(int16x4_t *)v5.i8, v37, 5), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 8 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v82, *(int16x4_t *)v38.i8, 2), v81, *(int16x4_t *)v38.i8, 1), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 12 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v91, v38, 4), v90, v38, 5), 0xDuLL));
  a2[a3] = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v84, *(int16x4_t *)v42.i8, 2), v83, *(int16x4_t *)v42.i8, 1), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 20 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v89, v42, 4), v88, v42, 5), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 24 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v86, *(int16x4_t *)v43.i8, 2), v85, *(int16x4_t *)v43.i8, 1), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 28 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v57.i8, v43, 4), v87, v43, 5), 0xDuLL));
  a2[2 * a3] = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v57.i8, v43, 7), v87, v43, 4), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 36 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v86, *(int16x4_t *)v43.i8, 1), v85, *(int16x4_t *)v43.i8, 0), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 40 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v89, v42, 7), v88, v42, 4), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 44 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v84, *(int16x4_t *)v42.i8, 1), v83, *(int16x4_t *)v42.i8, 0), 0xDuLL));
  a2[3 * a3] = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(v91, v38, 7), v90, v38, 4), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 52 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v82, *(int16x4_t *)v38.i8, 1), v81, *(int16x4_t *)v38.i8, 0), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 56 * a3) = vmovl_s16(vqrshrn_n_s32(vmlal_laneq_s16(vmull_laneq_s16(*(int16x4_t *)v79.i8, v37, 5), *(int16x4_t *)v5.i8, v37, 4), 0xDuLL));
  result = vmovl_s16(vqrshrn_n_s32(vmlal_lane_s16(vmull_lane_s16(v80, *(int16x4_t *)v37.i8, 1), *(int16x4_t *)v78.i8, *(int16x4_t *)v37.i8, 0), 0xDuLL));
  *(int32x4_t *)((char *)a2 + 60 * a3) = result;
  return result;
}

int32x4_t fidentity4x16_row_neon(int16x4_t *a1, int32x4_t *a2, int a3)
{
  int16x4_t v3;
  int16x4_t v4;
  int16x4_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int32x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int32x4_t result;

  v3 = vdup_n_s16(0x2D42u);
  v4 = vqrshrn_n_s32(vmull_s16(a1[1], v3), 0xCuLL);
  v5 = vqrshrn_n_s32(vmull_s16(a1[2], v3), 0xCuLL);
  v6 = vqrshrn_n_s32(vmull_s16(a1[3], v3), 0xCuLL);
  v7 = vqrshrn_n_s32(vmull_s16(a1[4], v3), 0xCuLL);
  v8 = vqrshrn_n_s32(vmull_s16(a1[5], v3), 0xCuLL);
  v9 = vqrshrn_n_s32(vmull_s16(a1[6], v3), 0xCuLL);
  v10 = vqrshrn_n_s32(vmull_s16(a1[7], v3), 0xCuLL);
  v11 = vqrshrn_n_s32(vmull_s16(a1[8], v3), 0xCuLL);
  v12 = vqrshrn_n_s32(vmull_s16(a1[9], v3), 0xCuLL);
  v13 = vqrshrn_n_s32(vmull_s16(a1[10], v3), 0xCuLL);
  v14 = vqrshrn_n_s32(vmull_s16(a1[11], v3), 0xCuLL);
  v15 = a1[13];
  v16 = vmull_s16(a1[12], v3);
  v17 = a1[14];
  v18 = a1[15];
  *a2 = vmovl_s16(vqrshrn_n_s32(vmull_s16(*a1, v3), 0xCuLL));
  *(int32x4_t *)((char *)a2 + 4 * a3) = vmovl_s16(v4);
  *(int32x4_t *)((char *)a2 + 8 * a3) = vmovl_s16(v5);
  *(int32x4_t *)((char *)a2 + 12 * a3) = vmovl_s16(v6);
  a2[a3] = vmovl_s16(v7);
  *(int32x4_t *)((char *)a2 + 20 * a3) = vmovl_s16(v8);
  *(int32x4_t *)((char *)a2 + 24 * a3) = vmovl_s16(v9);
  *(int32x4_t *)((char *)a2 + 28 * a3) = vmovl_s16(v10);
  a2[2 * a3] = vmovl_s16(v11);
  *(int32x4_t *)((char *)a2 + 36 * a3) = vmovl_s16(v12);
  *(int32x4_t *)((char *)a2 + 40 * a3) = vmovl_s16(v13);
  *(int32x4_t *)((char *)a2 + 44 * a3) = vmovl_s16(v14);
  a2[3 * a3] = vmovl_s16(vqrshrn_n_s32(v16, 0xCuLL));
  *(int32x4_t *)((char *)a2 + 52 * a3) = vmovl_s16(vqrshrn_n_s32(vmull_s16(v15, v3), 0xCuLL));
  *(int32x4_t *)((char *)a2 + 56 * a3) = vmovl_s16(vqrshrn_n_s32(vmull_s16(v17, v3), 0xCuLL));
  result = vmovl_s16(vqrshrn_n_s32(vmull_s16(v18, v3), 0xCuLL));
  *(int32x4_t *)((char *)a2 + 60 * a3) = result;
  return result;
}

int *av1_idct4(int *result, int *a2, int a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *result;
  *a2 = *result;
  v5 = result[2];
  a2[1] = v5;
  v6 = result[1];
  a2[2] = v6;
  v7 = result[3];
  a2[3] = v7;
  v8 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v9 = 1 << (a3 - 1);
  v10 = v9 + v8 * v4;
  v11 = (v10 + v8 * v5) >> a3;
  v12 = (v10 + -(v8 * v5)) >> a3;
  v13 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v14 = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v15 = (v9 + v13 * v6 + -(v7 * v14)) >> a3;
  v16 = (v9 + v13 * v7 + v14 * v6) >> a3;
  v17 = v16 + v11;
  v18 = 1 << (*(_BYTE *)(a4 + 3) - 1);
  v19 = v18 - 1;
  v20 = -v18;
  if ((int)v16 + (int)v11 < v19)
    LODWORD(v19) = v16 + v11;
  if (v17 >= v20)
    LODWORD(v20) = v19;
  if (*(char *)(a4 + 3) >= 1)
    v17 = v20;
  *a2 = v17;
  v21 = v15 + v12;
  v22 = 1 << (*(_BYTE *)(a4 + 3) - 1);
  v23 = v22 - 1;
  v24 = -v22;
  if ((int)v15 + (int)v12 < v23)
    LODWORD(v23) = v15 + v12;
  if (v21 >= v24)
    LODWORD(v24) = v23;
  if (*(char *)(a4 + 3) >= 1)
    v21 = v24;
  a2[1] = v21;
  v25 = v12 - v15;
  v26 = 1 << (*(_BYTE *)(a4 + 3) - 1);
  v27 = v26 - 1;
  v28 = -v26;
  if (v25 < v27)
    LODWORD(v27) = v25;
  if (v25 >= v28)
    LODWORD(v28) = v27;
  if (*(char *)(a4 + 3) >= 1)
    v25 = v28;
  a2[2] = v25;
  v29 = v11 - v16;
  v30 = 1 << (*(_BYTE *)(a4 + 3) - 1);
  v31 = v30 - 1;
  v32 = -v30;
  if (v29 < v31)
    LODWORD(v31) = v29;
  if (v29 >= v32)
    LODWORD(v32) = v31;
  if (*(char *)(a4 + 3) >= 1)
    v29 = v32;
  a2[3] = v29;
  return result;
}

uint64_t av1_idct8(int *a1, int *a2, int a3, char *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v4 = *a1;
  *a2 = *a1;
  v5 = a1[4];
  a2[1] = v5;
  v6 = a1[2];
  a2[2] = v6;
  v7 = a1[6];
  a2[3] = v7;
  v8 = a1[1];
  a2[4] = v8;
  v9 = a1[5];
  a2[5] = v9;
  v10 = a1[3];
  a2[6] = v10;
  v11 = a1[7];
  a2[7] = v11;
  v12 = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v13 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v14 = 1 << (a3 - 1);
  v15 = (v14 + v12 * v8 + -(v11 * v13)) >> a3;
  v16 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v17 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v18 = (v14 + v16 * v9 + -(v10 * v17)) >> a3;
  v19 = (v14 + v16 * v10 + v17 * v9) >> a3;
  v20 = (v14 + v12 * v11 + v13 * v8) >> a3;
  v21 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v22 = v14 + v21 * v4;
  v23 = (v22 + v21 * v5) >> a3;
  v24 = (v22 + -(v21 * v5)) >> a3;
  *a2 = v23;
  a2[1] = v24;
  v25 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  LODWORD(v22) = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v26 = (v14 + v25 * v6 + -(v7 * (_DWORD)v22)) >> a3;
  v27 = (v14 + v25 * v7 + (int)v22 * v6) >> a3;
  a2[2] = v26;
  a2[3] = v27;
  v28 = v18 + v15;
  v29 = a4[3];
  if (v29 >= 1)
  {
    v30 = 1 << (v29 - 1);
    v31 = v30 - 1;
    v32 = -v30;
    if (v28 < v31)
      LODWORD(v31) = v18 + v15;
    if (v28 >= v32)
      v28 = v31;
    else
      v28 = v32;
  }
  a2[4] = v28;
  result = (v15 - v18);
  v34 = a4[3];
  if (v34 >= 1)
  {
    v35 = 1 << (v34 - 1);
    v36 = v35 - 1;
    v37 = -v35;
    if ((int)result < v36)
      LODWORD(v36) = result;
    if ((int)result >= v37)
      result = v36;
    else
      result = v37;
  }
  a2[5] = result;
  v38 = 1 << (a4[3] - 1);
  v39 = v38 - 1;
  v40 = -v38;
  if ((int)v20 - (int)v19 < v39)
    LODWORD(v39) = v20 - v19;
  if ((int)v20 - (int)v19 >= v40)
    LODWORD(v40) = v39;
  if (a4[3] >= 1)
    v41 = v40;
  else
    v41 = v20 - v19;
  a2[6] = v41;
  v42 = v19 + v20;
  v43 = a4[3];
  if (v43 >= 1)
  {
    v44 = 1 << (v43 - 1);
    v45 = v44 - 1;
    v46 = -v44;
    if (v42 < v45)
      LODWORD(v45) = v42;
    if (v42 >= v46)
      v42 = v45;
    else
      v42 = v46;
  }
  a2[7] = v42;
  v47 = v27 + v23;
  v48 = a4[4];
  if (v48 <= 0)
  {
    v55 = v26 + v24;
    v58 = v24 - v26;
    v60 = v23 - v27;
  }
  else
  {
    v49 = 1 << (v48 - 1);
    v50 = v49 - 1;
    v51 = -v49;
    if (v47 >= v49 - 1)
      v52 = v49 - 1;
    else
      v52 = v27 + v23;
    if (v47 >= v51)
      v47 = v52;
    else
      v47 = v51;
    v53 = (int)v26 + (int)v24;
    if (v53 >= v50)
      v54 = v50;
    else
      v54 = v26 + v24;
    if (v53 >= v51)
      v55 = v54;
    else
      v55 = v51;
    v56 = (int)v24 - (int)v26;
    if (v56 >= v50)
      v57 = v50;
    else
      v57 = v56;
    if (v56 >= v51)
      v58 = v57;
    else
      v58 = v51;
    v59 = (int)v23 - (int)v27;
    if (v59 >= v50)
      v60 = v50;
    else
      v60 = v59;
    if (v59 < v51)
      v60 = v51;
  }
  v61 = v14 + v41 * v21;
  v62 = (v61 + (int)result * -v21) >> a3;
  v63 = (v61 + (int)result * v21) >> a3;
  v64 = v47 + v42;
  v65 = a4[5];
  if (v65 >= 1)
  {
    v66 = 1 << (v65 - 1);
    result = v66 - 1;
    v67 = -v66;
    if (v64 < result)
      result = v64;
    if (v64 >= v67)
      v64 = result;
    else
      v64 = v67;
  }
  *a2 = v64;
  v68 = v55 + v63;
  v69 = a4[5];
  if (v69 >= 1)
  {
    v70 = 1 << (v69 - 1);
    result = v70 - 1;
    v71 = -v70;
    if (v68 < result)
      result = v68;
    if (v68 >= v71)
      v68 = result;
    else
      v68 = v71;
  }
  a2[1] = v68;
  v72 = v58 + v62;
  v73 = a4[5];
  if (v73 >= 1)
  {
    v74 = 1 << (v73 - 1);
    result = v74 - 1;
    v75 = -v74;
    if (v72 < result)
      result = v72;
    if (v72 >= v75)
      v72 = result;
    else
      v72 = v75;
  }
  a2[2] = v72;
  v76 = v60 + v28;
  v77 = a4[5];
  if (v77 >= 1)
  {
    v78 = 1 << (v77 - 1);
    result = v78 - 1;
    v79 = -v78;
    if (v76 < result)
      result = v76;
    if (v76 >= v79)
      v76 = result;
    else
      v76 = v79;
  }
  a2[3] = v76;
  v80 = v60 - v28;
  v81 = a4[5];
  if (v81 >= 1)
  {
    v82 = 1 << (v81 - 1);
    v83 = v82 - 1;
    v84 = -v82;
    if (v80 < v83)
      LODWORD(v83) = v80;
    if (v80 >= v84)
      v80 = v83;
    else
      v80 = v84;
  }
  a2[4] = v80;
  v85 = v58 - v62;
  v86 = a4[5];
  if (v86 >= 1)
  {
    v87 = 1 << (v86 - 1);
    v88 = v87 - 1;
    v89 = -v87;
    if (v85 < v88)
      LODWORD(v88) = v85;
    if (v85 >= v89)
      v85 = v88;
    else
      v85 = v89;
  }
  a2[5] = v85;
  v90 = v55 - v63;
  v91 = a4[5];
  if (v91 >= 1)
  {
    v92 = 1 << (v91 - 1);
    v93 = v92 - 1;
    v94 = -v92;
    if (v90 < v93)
      LODWORD(v93) = v90;
    if (v90 >= v94)
      v90 = v93;
    else
      v90 = v94;
  }
  a2[6] = v90;
  v95 = v47 - v42;
  v96 = a4[5];
  if (v96 >= 1)
  {
    v97 = 1 << (v96 - 1);
    v98 = v97 - 1;
    v99 = -v97;
    if (v95 < v98)
      LODWORD(v98) = v95;
    if (v95 >= v99)
      v95 = v98;
    else
      v95 = v99;
  }
  a2[7] = v95;
  return result;
}

uint64_t av1_idct16(int *a1, int *a2, int a3, char *a4)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  int v272;
  uint64_t result;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  int v319;
  int v320;
  int v321;
  int v322;

  v4 = &av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v5 = *a1;
  *a2 = *a1;
  v6 = a1[8];
  a2[1] = v6;
  v7 = a1[4];
  a2[2] = v7;
  v8 = a1[12];
  a2[3] = v8;
  v9 = a1[2];
  a2[4] = v9;
  v10 = a1[10];
  a2[5] = v10;
  v11 = a1[6];
  a2[6] = v11;
  v12 = a1[14];
  a2[7] = v12;
  v13 = a1[1];
  a2[8] = v13;
  v14 = a1[9];
  a2[9] = v14;
  v15 = a1[5];
  a2[10] = v15;
  v16 = a1[13];
  a2[11] = v16;
  v17 = a1[3];
  a2[12] = v17;
  v18 = a1[11];
  a2[13] = v18;
  v19 = a1[7];
  a2[14] = v19;
  v20 = a1[15];
  a2[15] = v20;
  v317 = v13;
  v321 = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v21 = v321 * v13;
  v312 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v313 = v14;
  v22 = 1 << (a3 - 1);
  v23 = v22 + v21 + -(v20 * v312);
  v24 = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v311 = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v25 = v22 + v24 * v14 + -(v19 * v311);
  v26 = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v27 = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v28 = v22 + v26 * v15 + -(v18 * v27);
  v29 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v30 = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v31 = v22 + v29 * v16 + -(v17 * v30);
  v32 = v30 * v16;
  v33 = v29 * v17;
  v34 = v27 * v15;
  v35 = v26 * v18;
  v314 = v5;
  v315 = v6;
  *a2 = v5;
  a2[1] = v6;
  v319 = v7;
  a2[2] = v7;
  a2[3] = v8;
  v316 = v8;
  v36 = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v37 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v38 = (v22 + v36 * v9 + -(v12 * v37)) >> a3;
  a2[4] = v38;
  v39 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v40 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v41 = v22 + v39 * v10 + -(v11 * v40);
  v42 = v22 + v39 * v11 + v40 * v10;
  v43 = v23 >> a3;
  v44 = v25 >> a3;
  v45 = v28 >> a3;
  v46 = v31 >> a3;
  v47 = v22 + v33;
  v48 = v41 >> a3;
  v49 = v42 >> a3;
  a2[5] = v41 >> a3;
  a2[6] = v42 >> a3;
  v50 = (v22 + v36 * v12 + v37 * v9) >> a3;
  a2[7] = v50;
  v51 = v44 + v43;
  v52 = a4[3];
  if (v52 >= 1)
  {
    v53 = 1 << (v52 - 1);
    v54 = v53 - 1;
    v55 = -v53;
    if (v51 < v54)
      LODWORD(v54) = v44 + v43;
    if (v51 >= v55)
      v51 = v54;
    else
      v51 = v55;
  }
  v56 = v24 * v19;
  v57 = v321 * v20;
  a2[8] = v51;
  v58 = v43 - v44;
  v59 = a4[3];
  v60 = v38;
  if (v59 >= 1)
  {
    v61 = 1 << (v59 - 1);
    v62 = v61 - 1;
    v63 = -v61;
    if (v58 < v62)
      LODWORD(v62) = v43 - v44;
    if (v58 >= v63)
      v58 = v62;
    else
      v58 = v63;
  }
  v322 = v51;
  v64 = v22 + v57;
  v65 = (v47 + v32) >> a3;
  v66 = (v22 + v35 + v34) >> a3;
  a2[9] = v58;
  v67 = v46 - v45;
  v68 = a4[3];
  if (v68 >= 1)
  {
    v69 = 1 << (v68 - 1);
    v70 = v69 - 1;
    v71 = -v69;
    if (v67 < v70)
      LODWORD(v70) = v46 - v45;
    if (v67 >= v71)
      v67 = v70;
    else
      v67 = v71;
  }
  a2[10] = v67;
  v72 = v46 + v45;
  v73 = a4[3];
  if (v73 >= 1)
  {
    v74 = 1 << (v73 - 1);
    v75 = v74 - 1;
    v76 = -v74;
    if (v72 < v75)
      LODWORD(v75) = v72;
    if (v72 >= v76)
      v72 = v75;
    else
      v72 = v76;
  }
  v77 = (v22 + v56 + v311 * v313) >> a3;
  v78 = (v64 + v312 * v317) >> a3;
  a2[11] = v72;
  v79 = v65 + v66;
  v80 = a4[3];
  if (v80 >= 1)
  {
    v81 = 1 << (v80 - 1);
    v82 = v81 - 1;
    v83 = -v81;
    if (v79 < v82)
      LODWORD(v82) = v65 + v66;
    if (v79 >= v83)
      v79 = v82;
    else
      v79 = v83;
  }
  a2[12] = v79;
  v84 = v65 - v66;
  v85 = a4[3];
  if (v85 >= 1)
  {
    v86 = 1 << (v85 - 1);
    v87 = v86 - 1;
    v88 = -v86;
    if (v84 < v87)
      LODWORD(v87) = v84;
    if (v84 >= v88)
      v84 = v87;
    else
      v84 = v88;
  }
  v89 = a3;
  a2[13] = v84;
  v90 = v78 - v77;
  v91 = a4[3];
  if (v91 >= 1)
  {
    v92 = 1 << (v91 - 1);
    v93 = v92 - 1;
    v94 = -v92;
    if (v90 < v93)
      LODWORD(v93) = v78 - v77;
    if (v90 >= v94)
      v90 = v93;
    else
      v90 = v94;
  }
  a2[14] = v90;
  v95 = v77 + v78;
  v96 = a4[3];
  if (v96 >= 1)
  {
    v97 = 1 << (v96 - 1);
    v98 = v97 - 1;
    v99 = -v97;
    if (v95 < v98)
      LODWORD(v98) = v95;
    if (v95 >= v99)
      v95 = v98;
    else
      v95 = v99;
  }
  v318 = v79;
  a2[15] = v95;
  v100 = v4[32];
  v101 = v22 + v100 * v314;
  v102 = (v101 + v100 * v315) >> v89;
  v103 = (v101 + -(v100 * v315)) >> v89;
  v104 = v4[48];
  v105 = v4[16];
  v106 = (v22 + v104 * v319 + -(v105 * v316)) >> v89;
  v107 = (v22 + v104 * v316 + v105 * v319) >> v89;
  v108 = v48 + v60;
  v109 = a4[4];
  if (v109 <= 0)
  {
    v116 = v60 - v48;
    v119 = v50 - v49;
    v121 = v49 + v50;
  }
  else
  {
    v110 = 1 << (v109 - 1);
    v111 = v110 - 1;
    v112 = -v110;
    if (v108 >= v111)
      v113 = v111;
    else
      v113 = v48 + v60;
    if (v108 >= v112)
      v108 = v113;
    else
      v108 = v112;
    v114 = v60 - (int)v48;
    if (v114 >= v111)
      v115 = v111;
    else
      v115 = v114;
    if (v114 >= v112)
      v116 = v115;
    else
      v116 = v112;
    v117 = (int)v50 - (int)v49;
    if (v117 >= v111)
      v118 = v111;
    else
      v118 = v50 - v49;
    if (v117 >= v112)
      v119 = v118;
    else
      v119 = v112;
    v120 = (int)v49 + (int)v50;
    if (v120 < v111)
      LODWORD(v111) = v120;
    if (v120 >= v112)
      v121 = v111;
    else
      v121 = v112;
  }
  v122 = -v105;
  v123 = v107 + v102;
  v124 = a4[5];
  if (v124 >= 1)
  {
    v125 = 1 << (v124 - 1);
    v126 = v125 - 1;
    v127 = -v125;
    if (v123 < v126)
      LODWORD(v126) = v107 + v102;
    if (v123 >= v127)
      v123 = v126;
    else
      v123 = v127;
  }
  v320 = v108;
  *a2 = v123;
  v128 = v106 + v103;
  v129 = a4[5];
  if (v129 >= 1)
  {
    v130 = 1 << (v129 - 1);
    v131 = v130 - 1;
    v132 = -v130;
    if (v128 < v131)
      LODWORD(v131) = v106 + v103;
    if (v128 >= v132)
      v128 = v131;
    else
      v128 = v132;
  }
  a2[1] = v128;
  v133 = v103 - v106;
  v134 = a4[5];
  if (v134 >= 1)
  {
    v135 = 1 << (v134 - 1);
    v136 = v135 - 1;
    v137 = -v135;
    if (v133 < v136)
      LODWORD(v136) = v103 - v106;
    if (v133 >= v137)
      v133 = v136;
    else
      v133 = v137;
  }
  v138 = (v22 + v104 * v90 + v58 * v122) >> v89;
  v139 = (v22 + -(v67 * v104) + v84 * v122) >> v89;
  v140 = -v100;
  a2[2] = v133;
  v141 = v102 - v107;
  v142 = a4[5];
  if (v142 >= 1)
  {
    v143 = 1 << (v142 - 1);
    v144 = v143 - 1;
    v145 = -v143;
    if (v141 < v144)
      LODWORD(v144) = v102 - v107;
    if (v141 >= v145)
      v141 = v144;
    else
      v141 = v145;
  }
  v146 = v104 * v84;
  v147 = v104 * v58;
  a2[3] = v141;
  a2[4] = v320;
  v148 = v22 + v119 * v100;
  v149 = (v148 + v116 * v140) >> v89;
  v150 = (v148 + v116 * v100) >> v89;
  a2[5] = v149;
  a2[6] = v150;
  a2[7] = v121;
  v151 = v72 + v322;
  v152 = a4[5];
  if (v152 >= 1)
  {
    v153 = 1 << (v152 - 1);
    v154 = v153 - 1;
    v155 = -v153;
    if (v151 < v154)
      LODWORD(v154) = v72 + v322;
    if (v151 >= v155)
      v151 = v154;
    else
      v151 = v155;
  }
  v156 = v67 * v122;
  v157 = v105 * v90;
  a2[8] = v151;
  v158 = v138 + v139;
  v159 = a4[5];
  if (v159 >= 1)
  {
    v160 = 1 << (v159 - 1);
    v161 = v160 - 1;
    v162 = -v160;
    if (v158 < v161)
      LODWORD(v161) = v138 + v139;
    if (v158 >= v162)
      v158 = v161;
    else
      v158 = v162;
  }
  v163 = v22 + v146 + v156;
  v164 = v22 + v147 + v157;
  a2[9] = v158;
  v165 = v138 - v139;
  v166 = a4[5];
  if (v166 >= 1)
  {
    v167 = 1 << (v166 - 1);
    v168 = v167 - 1;
    v169 = -v167;
    if (v165 < v168)
      LODWORD(v168) = v138 - v139;
    if (v165 >= v169)
      v165 = v168;
    else
      v165 = v169;
  }
  v170 = v121;
  v171 = v163 >> v89;
  v172 = v164 >> v89;
  a2[10] = v165;
  v173 = v322 - v72;
  v174 = a4[5];
  if (v174 >= 1)
  {
    v175 = 1 << (v174 - 1);
    v176 = v175 - 1;
    v177 = -v175;
    if (v173 < v176)
      LODWORD(v176) = v322 - v72;
    if (v173 >= v177)
      v173 = v176;
    else
      v173 = v177;
  }
  a2[11] = v173;
  v178 = v95 - v318;
  v179 = a4[5];
  if (v179 >= 1)
  {
    v180 = 1 << (v179 - 1);
    v181 = v180 - 1;
    v182 = -v180;
    if (v178 < v181)
      LODWORD(v181) = v95 - v318;
    if (v178 >= v182)
      v178 = v181;
    else
      v178 = v182;
  }
  a2[12] = v178;
  v183 = v172 - v171;
  v184 = a4[5];
  if (v184 >= 1)
  {
    v185 = 1 << (v184 - 1);
    v186 = v185 - 1;
    v187 = -v185;
    if (v183 < v186)
      LODWORD(v186) = v172 - v171;
    if (v183 >= v187)
      v183 = v186;
    else
      v183 = v187;
  }
  a2[13] = v183;
  v188 = v171 + v172;
  v189 = a4[5];
  if (v189 >= 1)
  {
    v190 = 1 << (v189 - 1);
    v191 = v190 - 1;
    v192 = -v190;
    if (v188 < v191)
      LODWORD(v191) = v171 + v172;
    if (v188 >= v192)
      v188 = v191;
    else
      v188 = v192;
  }
  a2[14] = v188;
  v193 = v95 + v318;
  v194 = a4[5];
  if (v194 >= 1)
  {
    v195 = 1 << (v194 - 1);
    v196 = v195 - 1;
    v197 = -v195;
    if (v193 < v196)
      LODWORD(v196) = v193;
    if (v193 >= v197)
      v193 = v196;
    else
      v193 = v197;
  }
  a2[15] = v193;
  v198 = v123 + v121;
  v199 = a4[6];
  if (v199 <= 0)
  {
    v206 = v128 + v150;
    v208 = v133 + v149;
    v210 = v141 + v320;
    v213 = v141 - v320;
    v215 = v133 - v149;
    v217 = v128 - v150;
    v220 = v123 - v170;
  }
  else
  {
    v200 = 1 << (v199 - 1);
    v201 = v200 - 1;
    v202 = -v200;
    if (v198 >= v200 - 1)
      v203 = v200 - 1;
    else
      v203 = v123 + v121;
    if (v198 >= v202)
      v198 = v203;
    else
      v198 = v202;
    v204 = v128 + (int)v150;
    if (v204 >= v201)
      v205 = v201;
    else
      v205 = v128 + v150;
    if (v204 >= v202)
      v206 = v205;
    else
      v206 = v202;
    v207 = v133 + (int)v149;
    if (v207 >= v201)
      v208 = v201;
    else
      v208 = v133 + v149;
    if (v207 < v202)
      v208 = v202;
    v209 = v141 + v320;
    if (v209 >= v201)
      v210 = v201;
    else
      v210 = v141 + v320;
    if (v209 < v202)
      v210 = v202;
    v211 = v141 - v320;
    if (v211 >= v201)
      v212 = v201;
    else
      v212 = v141 - v320;
    if (v211 >= v202)
      v213 = v212;
    else
      v213 = v202;
    v214 = v133 - (int)v149;
    if (v214 >= v201)
      v215 = v201;
    else
      v215 = v133 - v149;
    if (v214 < v202)
      v215 = v202;
    v216 = v128 - (int)v150;
    if (v216 >= v201)
      v217 = v201;
    else
      v217 = v128 - v150;
    if (v216 < v202)
      v217 = v202;
    v218 = v123 - v170;
    if (v218 >= v201)
      v219 = v201;
    else
      v219 = v123 - v170;
    if (v218 >= v202)
      v220 = v219;
    else
      v220 = v202;
  }
  v221 = v22 + v183 * v100;
  v222 = v173 * v140;
  v223 = v22 + v178 * v100;
  v224 = v223 + v173 * v100;
  v225 = (v221 + v165 * v100) >> v89;
  v226 = v198 + v193;
  v227 = a4[7];
  if (v227 >= 1)
  {
    v228 = 1 << (v227 - 1);
    v229 = v228 - 1;
    v230 = -v228;
    if (v226 < v229)
      LODWORD(v229) = v198 + v193;
    if (v226 >= v230)
      v226 = v229;
    else
      v226 = v230;
  }
  v231 = v165 * v140;
  v232 = v223 + v222;
  v233 = v224 >> v89;
  *a2 = v226;
  v234 = v206 + v188;
  v235 = a4[7];
  if (v235 >= 1)
  {
    v236 = 1 << (v235 - 1);
    v237 = v236 - 1;
    v238 = -v236;
    if (v234 < v237)
      LODWORD(v237) = v206 + v188;
    if (v234 >= v238)
      v234 = v237;
    else
      v234 = v238;
  }
  v239 = v221 + v231;
  v240 = v232 >> v89;
  a2[1] = v234;
  v241 = v208 + v225;
  v242 = a4[7];
  if (v242 >= 1)
  {
    v243 = 1 << (v242 - 1);
    v244 = v243 - 1;
    v245 = -v243;
    if (v241 < v244)
      LODWORD(v244) = v208 + v225;
    if (v241 >= v245)
      v241 = v244;
    else
      v241 = v245;
  }
  v246 = v239 >> v89;
  a2[2] = v241;
  v247 = v210 + v233;
  v248 = a4[7];
  if (v248 >= 1)
  {
    v249 = 1 << (v248 - 1);
    v250 = v249 - 1;
    v251 = -v249;
    if (v247 < v250)
      LODWORD(v250) = v210 + v233;
    if (v247 >= v251)
      v247 = v250;
    else
      v247 = v251;
  }
  a2[3] = v247;
  v252 = v213 + v240;
  v253 = a4[7];
  if (v253 >= 1)
  {
    v254 = 1 << (v253 - 1);
    v255 = v254 - 1;
    v256 = -v254;
    if (v252 < v255)
      LODWORD(v255) = v213 + v240;
    if (v252 >= v256)
      v252 = v255;
    else
      v252 = v256;
  }
  a2[4] = v252;
  v257 = v215 + v246;
  v258 = a4[7];
  if (v258 >= 1)
  {
    v259 = 1 << (v258 - 1);
    v260 = v259 - 1;
    v261 = -v259;
    if (v257 < v260)
      LODWORD(v260) = v215 + v246;
    if (v257 >= v261)
      v257 = v260;
    else
      v257 = v261;
  }
  a2[5] = v257;
  v262 = v217 + v158;
  v263 = a4[7];
  if (v263 >= 1)
  {
    v264 = 1 << (v263 - 1);
    v265 = v264 - 1;
    v266 = -v264;
    if (v262 < v265)
      LODWORD(v265) = v217 + v158;
    if (v262 >= v266)
      v262 = v265;
    else
      v262 = v266;
  }
  a2[6] = v262;
  v267 = v220 + v151;
  v268 = a4[7];
  if (v268 >= 1)
  {
    v269 = 1 << (v268 - 1);
    v270 = v269 - 1;
    v271 = -v269;
    if (v267 < v270)
      LODWORD(v270) = v220 + v151;
    if (v267 >= v271)
      v267 = v270;
    else
      v267 = v271;
  }
  a2[7] = v267;
  v272 = v220 - v151;
  result = a4[7];
  if ((int)result >= 1)
  {
    v274 = 1 << (a4[7] - 1);
    v275 = v274 - 1;
    result = -v274;
    if (v272 < v275)
      LODWORD(v275) = v272;
    if (v272 >= result)
      v272 = v275;
    else
      v272 = result;
  }
  a2[8] = v272;
  v276 = v217 - v158;
  v277 = a4[7];
  if (v277 >= 1)
  {
    v278 = 1 << (v277 - 1);
    result = v278 - 1;
    v279 = -v278;
    if (v276 < result)
      result = v276;
    if (v276 >= v279)
      v276 = result;
    else
      v276 = v279;
  }
  a2[9] = v276;
  v280 = v215 - v246;
  v281 = a4[7];
  if (v281 >= 1)
  {
    v282 = 1 << (v281 - 1);
    v283 = v282 - 1;
    v284 = -v282;
    if (v280 < v283)
      LODWORD(v283) = v280;
    if (v280 >= v284)
      v280 = v283;
    else
      v280 = v284;
  }
  a2[10] = v280;
  v285 = v213 - v240;
  v286 = a4[7];
  if (v286 >= 1)
  {
    v287 = 1 << (v286 - 1);
    v288 = v287 - 1;
    v289 = -v287;
    if (v285 < v288)
      LODWORD(v288) = v213 - v240;
    if (v285 >= v289)
      v285 = v288;
    else
      v285 = v289;
  }
  a2[11] = v285;
  v290 = v210 - v233;
  v291 = a4[7];
  if (v291 >= 1)
  {
    v292 = 1 << (v291 - 1);
    v293 = v292 - 1;
    v294 = -v292;
    if (v290 < v293)
      LODWORD(v293) = v290;
    if (v290 >= v294)
      v290 = v293;
    else
      v290 = v294;
  }
  a2[12] = v290;
  v295 = v208 - v225;
  v296 = a4[7];
  if (v296 >= 1)
  {
    v297 = 1 << (v296 - 1);
    v298 = v297 - 1;
    v299 = -v297;
    if (v295 < v298)
      LODWORD(v298) = v295;
    if (v295 >= v299)
      v295 = v298;
    else
      v295 = v299;
  }
  a2[13] = v295;
  v300 = v206 - v188;
  v301 = a4[7];
  if (v301 >= 1)
  {
    v302 = 1 << (v301 - 1);
    v303 = v302 - 1;
    v304 = -v302;
    if (v300 < v303)
      LODWORD(v303) = v206 - v188;
    if (v300 >= v304)
      v300 = v303;
    else
      v300 = v304;
  }
  a2[14] = v300;
  v305 = v198 - v193;
  v306 = a4[7];
  if (v306 >= 1)
  {
    v307 = 1 << (v306 - 1);
    v308 = v307 - 1;
    v309 = -v307;
    if (v305 < v308)
      LODWORD(v308) = v198 - v193;
    if (v305 >= v309)
      v305 = v308;
    else
      v305 = v309;
  }
  a2[15] = v305;
  return result;
}

uint64_t av1_idct32(int *a1, int *a2, int a3, char *a4)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  int v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  char v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  int v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  int v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t v360;
  int v361;
  int v362;
  uint64_t v363;
  int v364;
  uint64_t v365;
  int v366;
  int v367;
  uint64_t v368;
  int v369;
  uint64_t v370;
  int v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  int v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  int v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  int v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  int v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  int v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  int v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  int v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  int v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  int v459;
  int v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  int v465;
  uint64_t v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  int v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  int v480;
  int v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  int v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  int v512;
  int v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  int v517;
  int v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  int v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  uint64_t v530;
  int v531;
  int v532;
  uint64_t v533;
  int v534;
  int v535;
  uint64_t v536;
  int v537;
  int v538;
  uint64_t v539;
  int v540;
  int v541;
  uint64_t v542;
  int v543;
  int v544;
  uint64_t v545;
  int v546;
  int v547;
  uint64_t v548;
  int v549;
  int v550;
  uint64_t v551;
  int v552;
  int v553;
  uint64_t v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  uint64_t v560;
  int v561;
  int v562;
  uint64_t v563;
  int v564;
  int v565;
  uint64_t v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  uint64_t v572;
  int v573;
  int v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  int v586;
  int v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  int v593;
  int v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  int v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  int v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  int v614;
  int v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  int v621;
  int v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  int v628;
  int v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  int v634;
  int v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  int v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  int v644;
  int v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  int v649;
  int v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  int v654;
  int v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  int v659;
  int v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  int v664;
  int v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  int v669;
  int v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  int v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t result;
  int v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  int v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  int v690;
  int v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  int v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  int v700;
  int v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  int v705;
  int v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  int v710;
  int v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  int v720;
  int v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  int v725;
  int v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  int v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  int v735;
  int v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  int v740;
  int v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  int v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  _DWORD *v751;
  int v752;
  int v753;
  int v754;
  int v755;
  int v756;
  int v757;
  int v758;
  int v759;
  uint64_t v760;
  int v761;
  int v762;
  int v763;
  int v764;
  int v765;
  int v766;
  int v767;
  int v768;
  int v769;
  int v770;
  int v771;
  uint64_t v772;
  int v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  int v777;
  int v778;
  int v779;
  uint64_t v780;
  int v781;
  int v782;
  uint64_t v783;
  int v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  int v788;
  int v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  int v794;
  uint64_t v795;
  int v796;
  int v797;
  int v798;
  int v799;
  int v800;
  int v801;
  int v802;
  int v803;
  int v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  int v810;
  int v811;
  int v812;
  uint64_t v813;
  int v814;
  int v815;
  int v816;
  int v817;
  uint64_t v818;
  int v819;
  int v820;
  int v821;
  int v822;
  int v823;
  int v824;
  int v825;
  int v826;
  int v827;
  int v828;
  int v829;
  int v830;
  int v831;
  int v832;
  int v833;
  int v834;
  uint64_t v835;
  int v836;
  int v837;
  int v838;
  int v839;
  int v840;
  int v841;
  int v842;
  int v843;
  int v844;
  int v845;
  int v846;
  int v847;
  int v848;
  int v849;
  int v850;
  int v851;
  int v852;
  int v853;
  int v854;
  int v855;
  int v856;
  int v857;
  int v858;
  int v859;
  int v860;
  int v861;
  uint64_t v862;
  int v863;
  int v864;
  int v865;
  int v866;
  int v867;
  int v868;
  int v869;
  int v870;
  int v871;
  int v872;
  int v873;
  int v874;
  int v875;
  int v876;

  v4 = *a1;
  *a2 = *a1;
  v5 = a1[16];
  a2[1] = v5;
  v6 = a1[8];
  a2[2] = v6;
  v7 = a1[24];
  a2[3] = v7;
  v8 = a1[4];
  a2[4] = v8;
  v9 = a1[20];
  a2[5] = v9;
  v10 = a1[12];
  a2[6] = v10;
  v11 = a1[28];
  a2[7] = v11;
  v859 = a1[2];
  a2[8] = v859;
  v12 = a1[18];
  a2[9] = v12;
  v13 = v12;
  v876 = a1[10];
  a2[10] = v876;
  v14 = a1[26];
  a2[11] = v14;
  v15 = a1[6];
  a2[12] = v15;
  v867 = a1[22];
  a2[13] = v867;
  v16 = a1[14];
  a2[14] = v16;
  v17 = v16;
  v18 = a1[30];
  a2[15] = v18;
  v19 = v18;
  v20 = a1[1];
  a2[16] = v20;
  v21 = a1[17];
  a2[17] = v21;
  v22 = a1[9];
  a2[18] = v22;
  v23 = a1[25];
  a2[19] = v23;
  v24 = a1[5];
  a2[20] = v24;
  v874 = a1[21];
  a2[21] = v874;
  v847 = a1[13];
  a2[22] = v847;
  v843 = a1[29];
  a2[23] = v843;
  v25 = 1 << (a3 - 1);
  v753 = a1[3];
  a2[24] = v753;
  v754 = a1[19];
  a2[25] = v754;
  v750 = a1[11];
  a2[26] = v750;
  v26 = a1[27];
  a2[27] = v26;
  v27 = a1[7];
  a2[28] = v27;
  v28 = a1[23];
  a2[29] = v28;
  v29 = a1[15];
  a2[30] = v29;
  v30 = a1[31];
  a2[31] = v30;
  v828 = v20;
  v773 = av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v801 = av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v776 = v30;
  v791 = v25 + v773 * v20 + -(v30 * v801);
  v820 = v21;
  v771 = av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v798 = av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v779 = v29;
  v31 = v25 + v771 * v21 + -(v29 * v798);
  v784 = v22;
  v762 = av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v768 = av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v764 = v28;
  v787 = v25 + v762 * v22 + -(v28 * v768);
  v781 = v23;
  v761 = av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v758 = av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v32 = av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v33 = av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v34 = av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v35 = av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v863 = av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v755 = av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v855 = av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v871 = av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v804 = v4;
  *a2 = v4;
  a2[1] = v5;
  v807 = v5;
  v817 = v6;
  a2[2] = v6;
  a2[3] = v7;
  v810 = v7;
  v851 = v8;
  a2[4] = v8;
  a2[5] = v9;
  v832 = v9;
  v824 = v10;
  a2[6] = v10;
  a2[7] = v11;
  v839 = v11;
  v36 = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v37 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v795 = (v25 + v36 * v859 + -(v19 * v37)) >> a3;
  a2[8] = v795;
  v38 = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v39 = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v835 = (v25 + v38 * v13 + -(v17 * v39)) >> a3;
  a2[9] = v835;
  v40 = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v41 = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v813 = (v25 + v40 * v876 + -(v867 * v41)) >> a3;
  a2[10] = v813;
  v42 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v751 = &av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v43 = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v44 = v25 + v38 * v17 + v39 * v13;
  v45 = v25 + v36 * v19 + v37 * v859;
  v46 = v791 >> a3;
  v47 = v31 >> a3;
  v48 = v787 >> a3;
  v49 = (v25 + v761 * v23 + -(v27 * v758)) >> a3;
  v752 = v32;
  v756 = v24;
  v757 = v33;
  v50 = v34;
  v51 = v25 + v34 * v874;
  v52 = (v25 + v42 * v14 + -(v15 * v43)) >> a3;
  v53 = (v25 + v42 * v15 + v43 * v14) >> a3;
  a2[11] = v52;
  a2[12] = v53;
  v54 = v44 >> a3;
  v788 = v52;
  v792 = (v25 + v40 * v867 + v41 * v876) >> a3;
  a2[13] = v792;
  a2[14] = v54;
  v763 = v54;
  v759 = v53;
  v760 = v45 >> a3;
  a2[15] = v45 >> a3;
  v55 = v26;
  v56 = -(v26 * v33);
  v57 = v35;
  v58 = -(v750 * v35);
  v59 = v47 + v46;
  v60 = a4[3];
  if (v60 >= 1)
  {
    v61 = 1 << (v60 - 1);
    v62 = v61 - 1;
    v63 = -v61;
    if (v59 < v62)
      LODWORD(v62) = v47 + v46;
    if (v59 >= v63)
      v59 = v62;
    else
      v59 = v63;
  }
  v64 = v51 + v58;
  v860 = v59;
  a2[16] = v59;
  v65 = v46 - v47;
  v66 = a4[3];
  if (v66 >= 1)
  {
    v67 = 1 << (v66 - 1);
    v68 = v67 - 1;
    v69 = -v67;
    if (v65 < v68)
      LODWORD(v68) = v65;
    if (v65 >= v69)
      v65 = v68;
    else
      v65 = v69;
  }
  v70 = (v25 + v32 * v756 + v56) >> a3;
  v71 = v64 >> a3;
  v868 = v65;
  a2[17] = v65;
  v72 = v49 - v48;
  v73 = a4[3];
  if (v73 >= 1)
  {
    v74 = 1 << (v73 - 1);
    v75 = v74 - 1;
    v76 = -v74;
    if (v72 < v75)
      LODWORD(v75) = v49 - v48;
    if (v72 >= v76)
      v72 = v75;
    else
      v72 = v76;
  }
  a2[18] = v72;
  v77 = v49 + v48;
  v78 = a4[3];
  if (v78 >= 1)
  {
    v79 = 1 << (v78 - 1);
    v80 = v79 - 1;
    v81 = -v79;
    if (v77 < v80)
      LODWORD(v80) = v77;
    if (v77 >= v81)
      v77 = v80;
    else
      v77 = v81;
  }
  v82 = v25 + v863 * v754;
  v83 = (v25 + v863 * v847 + -(v754 * v755)) >> a3;
  v84 = (v25 + v855 * v843 + -(v753 * v871)) >> a3;
  v864 = v77;
  a2[19] = v77;
  v85 = v71 + v70;
  v86 = a4[3];
  if (v86 >= 1)
  {
    v87 = 1 << (v86 - 1);
    v88 = v87 - 1;
    v89 = -v87;
    if (v85 < v88)
      LODWORD(v88) = v71 + v70;
    if (v85 >= v89)
      v85 = v88;
    else
      v85 = v89;
  }
  a2[20] = v85;
  v90 = v70 - v71;
  v91 = a4[3];
  if (v91 >= 1)
  {
    v92 = 1 << (v91 - 1);
    v93 = v92 - 1;
    v94 = -v92;
    if (v90 < v93)
      LODWORD(v93) = v90;
    if (v90 >= v94)
      v90 = v93;
    else
      v90 = v94;
  }
  v95 = (v25 + v855 * v753 + v871 * v843) >> a3;
  v96 = (v82 + v755 * v847) >> a3;
  v848 = v90;
  a2[21] = v90;
  v97 = v84 - v83;
  v98 = a4[3];
  if (v98 >= 1)
  {
    v99 = 1 << (v98 - 1);
    v100 = v99 - 1;
    v101 = -v99;
    if (v97 < v100)
      LODWORD(v100) = v84 - v83;
    if (v97 >= v101)
      v97 = v100;
    else
      v97 = v101;
  }
  a2[22] = v97;
  v102 = v84 + v83;
  v103 = a4[3];
  if (v103 >= 1)
  {
    v104 = 1 << (v103 - 1);
    v105 = v104 - 1;
    v106 = -v104;
    if (v102 < v105)
      LODWORD(v105) = v102;
    if (v102 >= v106)
      v102 = v105;
    else
      v102 = v106;
  }
  v107 = (v25 + v50 * v750 + v57 * v874) >> a3;
  v108 = (v25 + v752 * v55 + v757 * v756) >> a3;
  a2[23] = v102;
  v109 = v95 + v96;
  v110 = a4[3];
  v844 = v97;
  if (v110 >= 1)
  {
    v111 = 1 << (v110 - 1);
    v112 = v111 - 1;
    v113 = -v111;
    if (v109 < v112)
      LODWORD(v112) = v95 + v96;
    if (v109 >= v113)
      v109 = v112;
    else
      v109 = v113;
  }
  a2[24] = v109;
  v114 = v95 - v96;
  v115 = a4[3];
  if (v115 >= 1)
  {
    v116 = 1 << (v115 - 1);
    v117 = v116 - 1;
    v118 = -v116;
    if (v114 < v117)
      LODWORD(v117) = v114;
    if (v114 >= v118)
      v114 = v117;
    else
      v114 = v118;
  }
  v119 = (v25 + v761 * v27 + v758 * v781) >> a3;
  v120 = (v25 + v762 * v764 + v768 * v784) >> a3;
  a2[25] = v114;
  v121 = v108 - v107;
  v122 = a4[3];
  if (v122 >= 1)
  {
    v123 = 1 << (v122 - 1);
    v124 = v123 - 1;
    v125 = -v123;
    if (v121 < v124)
      LODWORD(v124) = v108 - v107;
    if (v121 >= v125)
      v121 = v124;
    else
      v121 = v125;
  }
  v126 = v835;
  v836 = v121;
  a2[26] = v121;
  v127 = v107 + v108;
  v128 = a4[3];
  if (v128 >= 1)
  {
    v129 = 1 << (v128 - 1);
    v130 = v129 - 1;
    v131 = -v129;
    if (v127 < v130)
      LODWORD(v130) = v127;
    if (v127 >= v131)
      v127 = v130;
    else
      v127 = v131;
  }
  v132 = (v25 + v771 * v779 + v798 * v820) >> a3;
  v133 = (v25 + v773 * v776 + v801 * v828) >> a3;
  a2[27] = v127;
  v134 = v119 + v120;
  v135 = a4[3];
  if (v135 >= 1)
  {
    v136 = 1 << (v135 - 1);
    v137 = v136 - 1;
    v138 = -v136;
    if (v134 < v137)
      LODWORD(v137) = v119 + v120;
    if (v134 >= v138)
      v134 = v137;
    else
      v134 = v138;
  }
  a2[28] = v134;
  v139 = v119 - v120;
  v140 = a4[3];
  if (v140 >= 1)
  {
    v141 = 1 << (v140 - 1);
    v142 = v141 - 1;
    v143 = -v141;
    if (v139 < v142)
      LODWORD(v142) = v139;
    if (v139 >= v143)
      v139 = v142;
    else
      v139 = v143;
  }
  v144 = a3;
  a2[29] = v139;
  v145 = v133 - v132;
  v146 = a4[3];
  if (v146 >= 1)
  {
    v147 = 1 << (v146 - 1);
    v148 = v147 - 1;
    v149 = -v147;
    if (v145 < v148)
      LODWORD(v148) = v133 - v132;
    if (v145 >= v149)
      v145 = v148;
    else
      v145 = v149;
  }
  a2[30] = v145;
  v150 = v132 + v133;
  v151 = a4[3];
  v821 = v134;
  if (v151 >= 1)
  {
    v152 = 1 << (v151 - 1);
    v153 = v152 - 1;
    v154 = -v152;
    if (v150 < v153)
      LODWORD(v153) = v132 + v133;
    if (v150 >= v154)
      v150 = v153;
    else
      v150 = v154;
  }
  v766 = v139;
  v799 = v150;
  v802 = v127;
  v856 = v102;
  v829 = v109;
  a2[31] = v150;
  v155 = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v156 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v157 = (v25 + v155 * v851 + -(v156 * v839)) >> a3;
  v158 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v159 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v160 = (v25 + v158 * v832 + -(v159 * v824)) >> a3;
  v161 = v159;
  v162 = v25 + v158 * v824 + v159 * v832;
  v163 = v25 + v155 * v839 + v156 * v851;
  v164 = v126 + v795;
  v165 = a4[4];
  v166 = v114;
  if (v165 <= 0)
  {
    v852 = v126 + v795;
    v167 = v85;
    v174 = v795 - v126;
    v176 = v788 - v813;
    v825 = v788 + v813;
    v840 = v759 + v792;
    v184 = v759 - v792;
    v189 = v72;
    v188 = v760 - v763;
    LODWORD(v170) = v763 + v760;
  }
  else
  {
    v167 = v85;
    v168 = 1 << (v165 - 1);
    v169 = v168 - 1;
    v170 = -v168;
    v171 = v164;
    if (v164 >= v169)
      v164 = v169;
    if (v171 >= v170)
      v172 = v164;
    else
      v172 = v170;
    v852 = v172;
    v173 = (int)v795 - v126;
    if (v173 >= v169)
      v174 = v169;
    else
      v174 = v795 - v126;
    if (v173 < v170)
      v174 = v170;
    v175 = v788 - (int)v813;
    if (v175 >= v169)
      v176 = v169;
    else
      v176 = v788 - v813;
    if (v175 < v170)
      v176 = v170;
    v177 = v788 + (int)v813;
    if (v177 >= v169)
      v178 = v169;
    else
      v178 = v788 + v813;
    if (v177 >= v170)
      v179 = v178;
    else
      v179 = v170;
    v825 = v179;
    v180 = v759 + (int)v792;
    if (v180 >= v169)
      v181 = v169;
    else
      v181 = v759 + v792;
    if (v180 >= v170)
      v182 = v181;
    else
      v182 = v170;
    v840 = v182;
    v183 = v759 - (int)v792;
    if (v183 >= v169)
      v184 = v169;
    else
      v184 = v759 - v792;
    if (v183 < v170)
      v184 = v170;
    v185 = (int)v760 - v763;
    v186 = v72;
    if (v185 >= v169)
      v187 = v169;
    else
      v187 = v760 - v763;
    if (v185 >= v170)
      v188 = v187;
    else
      v188 = v170;
    v189 = v186;
    v190 = v763 + (int)v760;
    if (v190 < v169)
      LODWORD(v169) = v763 + v760;
    if (v190 >= v170)
      LODWORD(v170) = v169;
  }
  v814 = v170;
  v769 = v751[8];
  v191 = -v156;
  v192 = v162 >> v144;
  v193 = v163 >> v144;
  v789 = v145;
  v194 = v155 * v145;
  v833 = v189;
  v195 = -(v189 * v155);
  v196 = v751[32];
  v197 = v25 + v196 * v804;
  v198 = (v197 + v196 * v807) >> v144;
  v875 = v196;
  v199 = (v197 + -(v196 * v807)) >> v144;
  v805 = v198;
  *a2 = v198;
  a2[1] = v199;
  v796 = v199;
  v200 = v751[48];
  v872 = v751[16];
  v793 = (v25 + v200 * v817 + -(v872 * v810)) >> v144;
  a2[2] = v793;
  a2[3] = (v25 + v200 * v810 + v872 * v817) >> v144;
  v818 = (v25 + v200 * v810 + v872 * v817) >> v144;
  v201 = v160 + v157;
  v202 = a4[5];
  if (v202 >= 1)
  {
    v203 = 1 << (v202 - 1);
    v204 = v203 - 1;
    v205 = -v203;
    if (v201 < v204)
      LODWORD(v204) = v160 + v157;
    if (v201 >= v205)
      v201 = v204;
    else
      v201 = v205;
  }
  v206 = v864;
  v207 = v161;
  v208 = v25 + v194;
  v209 = v25 + v195;
  v808 = v201;
  a2[4] = v201;
  v210 = v157 - v160;
  v211 = a4[5];
  if (v211 >= 1)
  {
    v212 = 1 << (v211 - 1);
    v213 = v212 - 1;
    v214 = -v212;
    if (v210 < v213)
      LODWORD(v213) = v210;
    if (v210 >= v214)
      v210 = v213;
    else
      v210 = v214;
  }
  v215 = v167;
  v216 = v209 + v766 * v191;
  a2[5] = v210;
  v217 = v193 - v192;
  v218 = a4[5];
  if (v218 >= 1)
  {
    v219 = 1 << (v218 - 1);
    v220 = v219 - 1;
    v221 = -v219;
    if (v217 < v220)
      LODWORD(v220) = v193 - v192;
    if (v217 >= v221)
      v217 = v220;
    else
      v217 = v221;
  }
  v222 = (v208 + v868 * v191) >> v144;
  v223 = v216 >> v144;
  v224 = -v872;
  a2[6] = v217;
  v225 = v192 + v193;
  v226 = a4[5];
  v782 = v217;
  if (v226 >= 1)
  {
    v227 = 1 << (v226 - 1);
    v228 = v227 - 1;
    v229 = -v227;
    if (v225 < v228)
      LODWORD(v228) = v225;
    if (v225 >= v229)
      v225 = v228;
    else
      v225 = v229;
  }
  v230 = -v161;
  v865 = v225;
  a2[7] = v225;
  a2[8] = v852;
  v772 = (v25 + -(v200 * v176) + v184 * v224) >> v144;
  v774 = (v25 + v200 * v188 + v174 * v224) >> v144;
  a2[9] = v774;
  a2[10] = v772;
  a2[11] = v825;
  a2[12] = v840;
  v785 = (v25 + v200 * v184 + v176 * v224) >> v144;
  a2[13] = v785;
  a2[14] = (v25 + v200 * v174 + v872 * v188) >> v144;
  v780 = (v25 + v200 * v174 + v872 * v188) >> v144;
  a2[15] = v814;
  v231 = v206 + v860;
  v232 = a4[5];
  if (v232 >= 1)
  {
    v233 = 1 << (v232 - 1);
    v234 = v233 - 1;
    v235 = -v233;
    if (v231 < v234)
      LODWORD(v234) = v206 + v860;
    if (v231 >= v235)
      v231 = v234;
    else
      v231 = v235;
  }
  v236 = v856;
  v857 = v231;
  a2[16] = v231;
  v237 = v222 + v223;
  v238 = a4[5];
  if (v238 >= 1)
  {
    v239 = 1 << (v238 - 1);
    v240 = v239 - 1;
    v241 = -v239;
    if (v237 < v240)
      LODWORD(v240) = v222 + v223;
    if (v237 >= v241)
      v237 = v240;
    else
      v237 = v241;
  }
  a2[17] = v237;
  v242 = v222 - v223;
  v243 = a4[5];
  if (v243 >= 1)
  {
    v244 = 1 << (v243 - 1);
    v245 = v244 - 1;
    v246 = -v244;
    if (v242 < v245)
      LODWORD(v245) = v242;
    if (v242 >= v246)
      v242 = v245;
    else
      v242 = v246;
  }
  v247 = (v25 + v158 * v836 + v848 * v230) >> v144;
  v248 = (v25 + -(v844 * v158) + v166 * v230) >> v144;
  a2[18] = v242;
  v249 = v860 - v206;
  v250 = a4[5];
  if (v250 >= 1)
  {
    v251 = 1 << (v250 - 1);
    v252 = v251 - 1;
    v253 = -v251;
    if (v249 < v252)
      LODWORD(v252) = v860 - v206;
    if (v249 >= v253)
      v249 = v252;
    else
      v249 = v253;
  }
  v254 = v158 * v848;
  v849 = v249;
  a2[19] = v249;
  v255 = v236 - v215;
  v256 = a4[5];
  if (v256 >= 1)
  {
    v257 = 1 << (v256 - 1);
    v258 = v257 - 1;
    v259 = -v257;
    if (v255 < v258)
      LODWORD(v258) = v236 - v215;
    if (v255 >= v259)
      v255 = v258;
    else
      v255 = v259;
  }
  v260 = v844 * v230;
  v261 = v25 + v254;
  v845 = v255;
  a2[20] = v255;
  v262 = v248 - v247;
  v263 = a4[5];
  if (v263 >= 1)
  {
    v264 = 1 << (v263 - 1);
    v265 = v264 - 1;
    v266 = -v264;
    if (v262 < v265)
      LODWORD(v265) = v248 - v247;
    if (v262 >= v266)
      v262 = v265;
    else
      v262 = v266;
  }
  v267 = v833;
  v268 = v261 + v207 * v836;
  a2[21] = v262;
  v269 = v247 + v248;
  v270 = a4[5];
  if (v270 >= 1)
  {
    v271 = 1 << (v270 - 1);
    v272 = v271 - 1;
    v273 = -v271;
    if (v269 < v272)
      LODWORD(v272) = v269;
    if (v269 >= v273)
      v269 = v272;
    else
      v269 = v273;
  }
  v274 = (v25 + v158 * v166 + v260) >> v144;
  v275 = v268 >> v144;
  v834 = v269;
  a2[22] = v269;
  v276 = v236 + v215;
  v277 = a4[5];
  if (v277 >= 1)
  {
    v278 = 1 << (v277 - 1);
    v279 = v278 - 1;
    v280 = -v278;
    if (v276 < v279)
      LODWORD(v279) = v236 + v215;
    if (v276 >= v280)
      v276 = v279;
    else
      v276 = v280;
  }
  v281 = v852;
  v282 = v155 * v766;
  v283 = v155 * v868;
  v837 = v276;
  a2[23] = v276;
  v284 = v802 + v829;
  v285 = a4[5];
  v777 = v242;
  if (v285 >= 1)
  {
    v286 = 1 << (v285 - 1);
    v287 = v286 - 1;
    v288 = -v286;
    if (v284 < v287)
      LODWORD(v287) = v802 + v829;
    if (v284 >= v288)
      v284 = v287;
    else
      v284 = v288;
  }
  v289 = v267 * v191;
  v290 = v25 + v282;
  v291 = v25 + v283;
  a2[24] = v284;
  v292 = v274 + v275;
  v293 = a4[5];
  if (v293 >= 1)
  {
    v294 = 1 << (v293 - 1);
    v295 = v294 - 1;
    v296 = -v294;
    if (v292 < v295)
      LODWORD(v295) = v274 + v275;
    if (v292 >= v296)
      v292 = v295;
    else
      v292 = v296;
  }
  v297 = v290 + v289;
  v298 = v291 + v769 * v789;
  a2[25] = v292;
  v299 = v274 - v275;
  v300 = a4[5];
  if (v300 >= 1)
  {
    v301 = 1 << (v300 - 1);
    v302 = v301 - 1;
    v303 = -v301;
    if (v299 < v302)
      LODWORD(v302) = v299;
    if (v299 >= v303)
      v299 = v302;
    else
      v299 = v303;
  }
  v304 = v297 >> v144;
  v305 = v298 >> v144;
  v811 = v299;
  a2[26] = v299;
  v306 = v829 - v802;
  v307 = a4[5];
  if (v307 >= 1)
  {
    v308 = 1 << (v307 - 1);
    v309 = v308 - 1;
    v310 = -v308;
    if (v306 < v309)
      LODWORD(v309) = v829 - v802;
    if (v306 >= v310)
      v306 = v309;
    else
      v306 = v310;
  }
  v869 = v306;
  a2[27] = v306;
  v311 = v799 - v821;
  v312 = a4[5];
  if (v312 >= 1)
  {
    v313 = 1 << (v312 - 1);
    v314 = v313 - 1;
    v315 = -v313;
    if (v311 < v314)
      LODWORD(v314) = v799 - v821;
    if (v311 >= v315)
      v311 = v314;
    else
      v311 = v315;
  }
  a2[28] = v311;
  v316 = v305 - v304;
  v317 = a4[5];
  if (v317 >= 1)
  {
    v318 = 1 << (v317 - 1);
    v319 = v318 - 1;
    v320 = -v318;
    if (v316 < v319)
      LODWORD(v319) = v305 - v304;
    if (v316 >= v320)
      v316 = v319;
    else
      v316 = v320;
  }
  a2[29] = v316;
  v321 = v304 + v305;
  v322 = a4[5];
  if (v322 >= 1)
  {
    v323 = 1 << (v322 - 1);
    v324 = v323 - 1;
    v325 = -v323;
    if (v321 < v324)
      LODWORD(v324) = v321;
    if (v321 >= v325)
      v321 = v324;
    else
      v321 = v325;
  }
  a2[30] = v321;
  v326 = v799 + v821;
  v327 = a4[5];
  if (v327 >= 1)
  {
    v328 = 1 << (v327 - 1);
    v329 = v328 - 1;
    v330 = -v328;
    if (v326 < v329)
      LODWORD(v329) = v799 + v821;
    if (v326 >= v330)
      v326 = v329;
    else
      v326 = v330;
  }
  v331 = v825;
  v853 = v292;
  v826 = v326;
  v830 = v321;
  a2[31] = v326;
  v332 = v818 + v805;
  v333 = a4[6];
  if (v333 <= 0)
  {
    v340 = v793 + v796;
    v342 = v796 - v793;
    LODWORD(v335) = v805 - v818;
  }
  else
  {
    v334 = 1 << (v333 - 1);
    v335 = v334 - 1;
    v336 = -v334;
    if (v332 >= v335)
      v337 = v335;
    else
      v337 = v818 + v805;
    if (v332 >= v336)
      v332 = v337;
    else
      v332 = v336;
    v338 = (int)v793 + v796;
    if (v338 >= v335)
      v339 = v335;
    else
      v339 = v793 + v796;
    if (v338 >= v336)
      v340 = v339;
    else
      v340 = v336;
    v341 = v796 - (int)v793;
    if (v341 >= v335)
      v342 = v335;
    else
      v342 = v796 - v793;
    if (v341 < v336)
      v342 = v336;
    v343 = v805 - (int)v818;
    if (v343 < v335)
      LODWORD(v335) = v805 - v818;
    if (v343 < v336)
      LODWORD(v335) = v336;
  }
  v822 = v262;
  v344 = v25 + v782 * v875;
  v345 = v344 + v210 * -v875;
  v346 = (v344 + v210 * v875) >> v144;
  v347 = v281 + v331;
  if (v333 <= 0)
  {
    v819 = v774 + v772;
    v356 = v774 - v772;
    v359 = v281 - v331;
    v861 = v814 - v840;
    v364 = v780 - v785;
    v806 = v785 + v780;
    v369 = v814 + v840;
  }
  else
  {
    v348 = 1 << (v333 - 1);
    v349 = v348 - 1;
    v350 = -v348;
    if (v347 >= v348 - 1)
      v351 = v348 - 1;
    else
      v351 = v281 + v331;
    if (v347 >= v350)
      v347 = v351;
    else
      v347 = -(int)v348;
    v352 = (int)v774 + (int)v772;
    if (v352 >= v349)
      v353 = v349;
    else
      v353 = v774 + v772;
    if (v352 >= v350)
      v354 = v353;
    else
      v354 = v350;
    v819 = v354;
    v355 = (int)v774 - (int)v772;
    if (v355 >= v349)
      v356 = v349;
    else
      v356 = v774 - v772;
    if (v355 < v350)
      v356 = v350;
    v357 = v281 - v331;
    if (v357 >= v349)
      v358 = v349;
    else
      v358 = v281 - v331;
    if (v357 >= v350)
      v359 = v358;
    else
      v359 = v350;
    v360 = v814 - v840;
    if (v360 >= v349)
      v361 = v349;
    else
      v361 = v814 - v840;
    if (v360 >= v350)
      v362 = v361;
    else
      v362 = v350;
    v861 = v362;
    v363 = (int)v780 - (int)v785;
    if (v363 >= v349)
      v364 = v349;
    else
      v364 = v780 - v785;
    if (v363 < v350)
      v364 = v350;
    v365 = (int)v785 + (int)v780;
    if (v365 >= v349)
      v366 = v349;
    else
      v366 = v785 + v780;
    if (v365 >= v350)
      v367 = v366;
    else
      v367 = v350;
    v806 = v367;
    v368 = v814 + v840;
    if (v368 < v349)
      LODWORD(v349) = v814 + v840;
    if (v368 >= v350)
      v369 = v349;
    else
      v369 = v350;
  }
  v370 = v345 >> v144;
  v371 = v332 + v865;
  v372 = a4[7];
  if (v372 >= 1)
  {
    v373 = 1 << (v372 - 1);
    v374 = v373 - 1;
    v375 = -v373;
    if (v371 < v374)
      LODWORD(v374) = v332 + v865;
    if (v371 >= v375)
      v371 = v374;
    else
      v371 = v375;
  }
  v376 = v311;
  v803 = v371;
  *a2 = v371;
  v377 = v340 + v346;
  v378 = a4[7];
  if (v378 >= 1)
  {
    v379 = 1 << (v378 - 1);
    v380 = v379 - 1;
    v381 = -v379;
    if (v377 < v380)
      LODWORD(v380) = v340 + v346;
    if (v377 >= v381)
      v377 = v380;
    else
      v377 = v381;
  }
  v800 = v377;
  a2[1] = v377;
  v382 = v342 + v370;
  v383 = a4[7];
  if (v383 >= 1)
  {
    v384 = 1 << (v383 - 1);
    v385 = v384 - 1;
    v386 = -v384;
    if (v382 < v385)
      LODWORD(v385) = v342 + v370;
    if (v382 >= v386)
      v382 = v385;
    else
      v382 = v386;
  }
  v797 = v382;
  a2[2] = v382;
  v387 = v335 + v808;
  v388 = a4[7];
  if (v388 >= 1)
  {
    v389 = 1 << (v388 - 1);
    v390 = v389 - 1;
    v391 = -v389;
    if (v387 < v390)
      LODWORD(v390) = v335 + v808;
    if (v387 >= v391)
      v387 = v390;
    else
      v387 = v391;
  }
  v392 = v869;
  v393 = -v200;
  a2[3] = v387;
  v394 = v335 - v808;
  v395 = a4[7];
  v870 = -v875;
  v815 = v284;
  v841 = v347;
  if (v395 >= 1)
  {
    v396 = 1 << (v395 - 1);
    v397 = v396 - 1;
    v398 = -v396;
    if (v394 < v397)
      LODWORD(v397) = v394;
    if (v394 >= v398)
      v394 = v397;
    else
      v394 = v398;
  }
  a2[4] = v394;
  v399 = v342 - v370;
  v400 = a4[7];
  v794 = v387;
  if (v400 >= 1)
  {
    v401 = 1 << (v400 - 1);
    v402 = v401 - 1;
    v403 = -v401;
    if (v399 < v402)
      LODWORD(v402) = v399;
    if (v399 >= v403)
      v399 = v402;
    else
      v399 = v403;
  }
  a2[5] = v399;
  v404 = v340 - v346;
  v405 = a4[7];
  if (v405 >= 1)
  {
    v406 = 1 << (v405 - 1);
    v407 = v406 - 1;
    v408 = -v406;
    if (v404 < v407)
      LODWORD(v407) = v404;
    if (v404 >= v408)
      v404 = v407;
    else
      v404 = v408;
  }
  a2[6] = v404;
  v409 = v332 - v865;
  v410 = a4[7];
  if (v410 >= 1)
  {
    v411 = 1 << (v410 - 1);
    v412 = v411 - 1;
    v413 = -v411;
    if (v409 < v412)
      LODWORD(v412) = v409;
    if (v409 >= v413)
      v409 = v412;
    else
      v409 = v413;
  }
  v414 = v25 + v845 * v393 + v392 * v224;
  v415 = (v25 + v777 * v224 + v316 * v200) >> v144;
  v416 = (v25 + v822 * v393 + v811 * v224) >> v144;
  a2[7] = v409;
  a2[8] = v347;
  v417 = v25 + v364 * v875;
  a2[9] = v819;
  a2[10] = (v417 + v356 * v870) >> v144;
  v775 = (v417 + v356 * v870) >> v144;
  v418 = v25 + v861 * v875;
  v783 = (v418 + v359 * v870) >> v144;
  v786 = (v418 + v359 * v875) >> v144;
  a2[11] = v783;
  a2[12] = v786;
  v790 = (v417 + v356 * v875) >> v144;
  a2[13] = v790;
  a2[14] = v806;
  v419 = v369;
  a2[15] = v369;
  v420 = v837 + v857;
  v421 = a4[7];
  if (v421 >= 1)
  {
    v422 = 1 << (v421 - 1);
    v423 = v422 - 1;
    v424 = -v422;
    if (v420 < v423)
      LODWORD(v423) = v837 + v857;
    if (v420 >= v424)
      v420 = v423;
    else
      v420 = v424;
  }
  v425 = (v25 + v849 * v224 + v376 * v200) >> v144;
  v426 = v414 >> v144;
  a2[16] = v420;
  v427 = v834 + v237;
  v428 = a4[7];
  if (v428 >= 1)
  {
    v429 = 1 << (v428 - 1);
    v430 = v429 - 1;
    v431 = -v429;
    if (v427 < v430)
      LODWORD(v430) = v834 + v237;
    if (v427 >= v431)
      v427 = v430;
    else
      v427 = v431;
  }
  v809 = v427;
  a2[17] = v427;
  v432 = v415 + v416;
  v433 = a4[7];
  if (v433 >= 1)
  {
    v434 = 1 << (v433 - 1);
    v435 = v434 - 1;
    v436 = -v434;
    if (v432 < v435)
      LODWORD(v435) = v415 + v416;
    if (v432 >= v436)
      v432 = v435;
    else
      v432 = v436;
  }
  v866 = v432;
  a2[18] = v432;
  v437 = (v425 + v426);
  v438 = a4[7];
  if (v438 >= 1)
  {
    v439 = 1 << (v438 - 1);
    v440 = v439 - 1;
    v441 = -v439;
    if ((int)v437 < v440)
      LODWORD(v440) = v425 + v426;
    if ((int)v437 >= v441)
      v437 = v440;
    else
      v437 = v441;
  }
  a2[19] = v437;
  v442 = v425 - v426;
  v443 = a4[7];
  v862 = v437;
  if (v443 >= 1)
  {
    v444 = 1 << (v443 - 1);
    v445 = v444 - 1;
    v446 = -v444;
    if (v442 < v445)
      LODWORD(v445) = v442;
    if (v442 >= v446)
      v442 = v445;
    else
      v442 = v446;
  }
  v447 = v822 * v224;
  a2[20] = v442;
  v448 = v415 - v416;
  v449 = a4[7];
  if (v449 >= 1)
  {
    v450 = 1 << (v449 - 1);
    v451 = v450 - 1;
    v452 = -v450;
    if (v448 < v451)
      LODWORD(v451) = v415 - v416;
    if (v448 >= v452)
      v448 = v451;
    else
      v448 = v452;
  }
  v823 = v420;
  v453 = v845 * v224;
  v454 = v849 * v200;
  v455 = v811 * v200;
  v456 = v25 + v447;
  v457 = v316 * v872;
  v458 = v25 + v777 * v200;
  a2[21] = v448;
  v459 = v237 - v834;
  v460 = a4[7];
  if (v460 >= 1)
  {
    v461 = 1 << (v460 - 1);
    v462 = v461 - 1;
    v463 = -v461;
    if (v459 < v462)
      LODWORD(v462) = v237 - v834;
    if (v459 >= v463)
      v459 = v462;
    else
      v459 = v463;
  }
  v464 = v815;
  v465 = v392 * v200;
  v466 = v25 + v453;
  v467 = v376 * v872;
  v468 = v25 + v454;
  v469 = v456 + v455;
  v470 = v458 + v457;
  a2[22] = v459;
  v471 = v857 - v837;
  v472 = a4[7];
  if (v472 >= 1)
  {
    v473 = 1 << (v472 - 1);
    v474 = v473 - 1;
    v475 = -v473;
    if (v471 < v474)
      LODWORD(v474) = v857 - v837;
    if (v471 >= v475)
      v471 = v474;
    else
      v471 = v475;
  }
  v476 = v466 + v465;
  v477 = v468 + v467;
  v478 = v469 >> v144;
  v479 = v470 >> v144;
  a2[23] = v471;
  v480 = v826 - v815;
  v481 = a4[7];
  if (v481 >= 1)
  {
    v482 = 1 << (v481 - 1);
    v483 = v482 - 1;
    v484 = -v482;
    if (v480 < v483)
      LODWORD(v483) = v826 - v815;
    if (v480 >= v484)
      v480 = v483;
    else
      v480 = v484;
  }
  v485 = v476 >> v144;
  v486 = v477 >> v144;
  v770 = v480;
  a2[24] = v480;
  v487 = v830 - v853;
  v488 = a4[7];
  if (v488 >= 1)
  {
    v489 = 1 << (v488 - 1);
    v490 = v489 - 1;
    v491 = -v489;
    if (v487 < v490)
      LODWORD(v490) = v830 - v853;
    if (v487 >= v491)
      v487 = v490;
    else
      v487 = v491;
  }
  a2[25] = v487;
  v492 = v479 - v478;
  v493 = a4[7];
  if (v493 >= 1)
  {
    v494 = 1 << (v493 - 1);
    v495 = v494 - 1;
    v496 = -v494;
    if (v492 < v495)
      LODWORD(v495) = v479 - v478;
    if (v492 >= v496)
      v492 = v495;
    else
      v492 = v496;
  }
  a2[26] = v492;
  v497 = v486 - v485;
  v498 = a4[7];
  if (v498 >= 1)
  {
    v499 = 1 << (v498 - 1);
    v500 = v499 - 1;
    v501 = -v499;
    if (v497 < v500)
      LODWORD(v500) = v486 - v485;
    if (v497 >= v501)
      v497 = v500;
    else
      v497 = v501;
    v464 = v815;
  }
  a2[27] = v497;
  v502 = v486 + v485;
  v503 = a4[7];
  if (v503 >= 1)
  {
    v504 = 1 << (v503 - 1);
    v505 = v504 - 1;
    v506 = -v504;
    if (v502 < v505)
      LODWORD(v505) = v502;
    if (v502 >= v506)
      v502 = v505;
    else
      v502 = v506;
  }
  a2[28] = v502;
  v507 = v479 + v478;
  v508 = a4[7];
  v765 = v497;
  if (v508 >= 1)
  {
    v509 = 1 << (v508 - 1);
    v510 = v509 - 1;
    v511 = -v509;
    if (v507 < v510)
      LODWORD(v510) = v507;
    if (v507 >= v511)
      v507 = v510;
    else
      v507 = v511;
  }
  v858 = v507;
  a2[29] = v507;
  v512 = v830 + v853;
  v513 = a4[7];
  if (v513 >= 1)
  {
    v514 = 1 << (v513 - 1);
    v515 = v514 - 1;
    v516 = -v514;
    if (v512 < v515)
      LODWORD(v515) = v830 + v853;
    if (v512 >= v516)
      v512 = v515;
    else
      v512 = v516;
  }
  a2[30] = v512;
  v517 = v826 + v464;
  v518 = a4[7];
  if (v518 >= 1)
  {
    v519 = 1 << (v518 - 1);
    v520 = v519 - 1;
    v521 = -v519;
    if (v517 < v520)
      LODWORD(v520) = v826 + v464;
    if (v517 >= v521)
      v517 = v520;
    else
      v517 = v521;
  }
  v767 = v492;
  v873 = v502;
  a2[31] = v517;
  v522 = v803 + v419;
  v523 = a4[8];
  if (v523 <= 0)
  {
    v854 = v800 + v806;
    v850 = v797 + v790;
    v846 = v794 + v786;
    v838 = v394 + v783;
    v816 = v399 + v775;
    v812 = v404 + v819;
    v778 = v409 + v841;
    v831 = v409 - v841;
    v827 = v404 - v819;
    v559 = v399 - v775;
    v562 = v394 - v783;
    v565 = v794 - v786;
    v567 = v797 - v790;
    v569 = v800 - v806;
    v571 = v803 - v419;
  }
  else
  {
    v524 = 1 << (v523 - 1);
    v525 = v524 - 1;
    v526 = -v524;
    v527 = v522;
    if (v522 >= v525)
      v522 = v525;
    v528 = v512;
    if (v527 >= v526)
      v529 = v522;
    else
      v529 = v526;
    v530 = v800 + v806;
    if (v530 >= v525)
      v531 = v525;
    else
      v531 = v800 + v806;
    if (v530 >= v526)
      v532 = v531;
    else
      v532 = v526;
    v854 = v532;
    v533 = v797 + (int)v790;
    if (v533 >= v525)
      v534 = v525;
    else
      v534 = v797 + v790;
    if (v533 >= v526)
      v535 = v534;
    else
      v535 = v526;
    v850 = v535;
    v536 = v794 + (int)v786;
    if (v536 >= v525)
      v537 = v525;
    else
      v537 = v794 + v786;
    if (v536 >= v526)
      v538 = v537;
    else
      v538 = v526;
    v846 = v538;
    v539 = v394 + (int)v783;
    if (v539 >= v525)
      v540 = v525;
    else
      v540 = v394 + v783;
    if (v539 >= v526)
      v541 = v540;
    else
      v541 = v526;
    v838 = v541;
    v542 = v399 + (int)v775;
    if (v542 >= v525)
      v543 = v525;
    else
      v543 = v399 + v775;
    if (v542 >= v526)
      v544 = v543;
    else
      v544 = v526;
    v816 = v544;
    v545 = v404 + v819;
    if (v545 >= v525)
      v546 = v525;
    else
      v546 = v404 + v819;
    if (v545 >= v526)
      v547 = v546;
    else
      v547 = v526;
    v812 = v547;
    v548 = v409 + v841;
    if (v548 >= v525)
      v549 = v525;
    else
      v549 = v409 + v841;
    if (v548 >= v526)
      v550 = v549;
    else
      v550 = v526;
    v778 = v550;
    v522 = v529;
    v512 = v528;
    v551 = v409 - v841;
    if (v551 >= v525)
      v552 = v525;
    else
      v552 = v409 - v841;
    if (v551 >= v526)
      v553 = v552;
    else
      v553 = v526;
    v831 = v553;
    v554 = v404 - v819;
    if (v554 >= v525)
      v555 = v525;
    else
      v555 = v404 - v819;
    if (v554 >= v526)
      v556 = v555;
    else
      v556 = v526;
    v827 = v556;
    v557 = v399 - v775;
    if (v399 - (int)v775 >= v525)
      v558 = v525;
    else
      v558 = v399 - v775;
    if (v557 >= v526)
      v559 = v558;
    else
      v559 = v526;
    v560 = v394 - (int)v783;
    if (v560 >= v525)
      v561 = v525;
    else
      v561 = v394 - v783;
    if (v560 >= v526)
      v562 = v561;
    else
      v562 = v526;
    v563 = v794 - (int)v786;
    if (v563 >= v525)
      v564 = v525;
    else
      v564 = v794 - v786;
    if (v563 >= v526)
      v565 = v564;
    else
      v565 = v526;
    v566 = v797 - (int)v790;
    if (v566 >= v525)
      v567 = v525;
    else
      v567 = v797 - v790;
    if (v566 < v526)
      v567 = v526;
    if (v800 - v806 >= v525)
      v568 = v525;
    else
      v568 = v800 - v806;
    if (v800 - v806 >= v526)
      v569 = v568;
    else
      v569 = v526;
    if (v803 - v419 >= v525)
      v570 = v525;
    else
      v570 = v803 - v419;
    if (v803 - v419 >= v526)
      v571 = v570;
    else
      v571 = v526;
  }
  v572 = v25 + v765 * v875;
  v842 = v522;
  v573 = v522 + v517;
  v574 = a4[9];
  if (v574 >= 1)
  {
    v575 = 1 << (v574 - 1);
    v576 = v575 - 1;
    v577 = -v575;
    if (v573 < v576)
      LODWORD(v576) = v573;
    if (v573 >= v577)
      v573 = v576;
    else
      v573 = v577;
  }
  v578 = v25 + v767 * v875;
  *a2 = v573;
  v579 = v854 + v512;
  v580 = a4[9];
  if (v580 >= 1)
  {
    v581 = 1 << (v580 - 1);
    v582 = v581 - 1;
    v583 = -v581;
    if (v579 < v582)
      LODWORD(v582) = v854 + v512;
    if (v579 >= v583)
      v579 = v582;
    else
      v579 = v583;
  }
  v584 = v25 + v487 * v875;
  v585 = (v572 + v442 * v875) >> v144;
  a2[1] = v579;
  v586 = v850 + v858;
  v587 = a4[9];
  if (v587 >= 1)
  {
    v588 = 1 << (v587 - 1);
    v589 = v588 - 1;
    v590 = -v588;
    if (v586 < v589)
      LODWORD(v589) = v850 + v858;
    if (v586 >= v590)
      v586 = v589;
    else
      v586 = v590;
  }
  v591 = v25 + v770 * v875;
  v592 = (v578 + v448 * v875) >> v144;
  a2[2] = v586;
  v593 = v846 + v873;
  v594 = a4[9];
  if (v594 >= 1)
  {
    v595 = 1 << (v594 - 1);
    v596 = v595 - 1;
    v597 = -v595;
    if (v593 < v596)
      LODWORD(v596) = v846 + v873;
    if (v593 >= v597)
      v593 = v596;
    else
      v593 = v597;
  }
  v598 = (v584 + v459 * v875) >> v144;
  a2[3] = v593;
  v599 = v838 + v585;
  v600 = a4[9];
  if (v600 >= 1)
  {
    v601 = 1 << (v600 - 1);
    v602 = v601 - 1;
    v603 = -v601;
    if (v599 < v602)
      LODWORD(v602) = v838 + v585;
    if (v599 >= v603)
      v599 = v602;
    else
      v599 = v603;
  }
  v604 = v459 * v870;
  v605 = v591 + v471 * v870;
  v606 = (v591 + v471 * v875) >> v144;
  a2[4] = v599;
  v607 = v816 + v592;
  v608 = a4[9];
  if (v608 >= 1)
  {
    v609 = 1 << (v608 - 1);
    v610 = v609 - 1;
    v611 = -v609;
    if (v607 < v610)
      LODWORD(v610) = v816 + v592;
    if (v607 >= v611)
      v607 = v610;
    else
      v607 = v611;
  }
  v612 = v584 + v604;
  v613 = v605 >> v144;
  a2[5] = v607;
  v614 = v812 + v598;
  v615 = a4[9];
  if (v615 >= 1)
  {
    v616 = 1 << (v615 - 1);
    v617 = v616 - 1;
    v618 = -v616;
    if (v614 < v617)
      LODWORD(v617) = v812 + v598;
    if (v614 >= v618)
      v614 = v617;
    else
      v614 = v618;
  }
  v619 = v578 + v448 * v870;
  v620 = v612 >> v144;
  a2[6] = v614;
  v621 = v778 + v606;
  v622 = a4[9];
  if (v622 >= 1)
  {
    v623 = 1 << (v622 - 1);
    v624 = v623 - 1;
    v625 = -v623;
    if (v621 < v624)
      LODWORD(v624) = v778 + v606;
    if (v621 >= v625)
      v621 = v624;
    else
      v621 = v625;
  }
  v626 = v572 + v442 * v870;
  v627 = v619 >> v144;
  a2[7] = v621;
  v628 = v831 + v613;
  v629 = a4[9];
  if (v629 >= 1)
  {
    v630 = 1 << (v629 - 1);
    v631 = v630 - 1;
    v632 = -v630;
    if (v628 < v631)
      LODWORD(v631) = v831 + v613;
    if (v628 >= v632)
      v628 = v631;
    else
      v628 = v632;
  }
  v633 = v626 >> v144;
  a2[8] = v628;
  v634 = v827 + v620;
  v635 = a4[9];
  if (v635 >= 1)
  {
    v636 = 1 << (v635 - 1);
    v637 = v636 - 1;
    v638 = -v636;
    if (v634 < v637)
      LODWORD(v637) = v827 + v620;
    if (v634 >= v638)
      v634 = v637;
    else
      v634 = v638;
  }
  a2[9] = v634;
  v639 = v559 + v627;
  v640 = a4[9];
  if (v640 >= 1)
  {
    v641 = 1 << (v640 - 1);
    v642 = v641 - 1;
    v643 = -v641;
    if (v639 < v642)
      LODWORD(v642) = v559 + v627;
    if (v639 >= v643)
      v639 = v642;
    else
      v639 = v643;
  }
  a2[10] = v639;
  v644 = v562 + v633;
  v645 = a4[9];
  if (v645 >= 1)
  {
    v646 = 1 << (v645 - 1);
    v647 = v646 - 1;
    v648 = -v646;
    if (v644 < v647)
      LODWORD(v647) = v562 + v633;
    if (v644 >= v648)
      v644 = v647;
    else
      v644 = v648;
  }
  a2[11] = v644;
  v649 = v565 + v862;
  v650 = a4[9];
  if (v650 >= 1)
  {
    v651 = 1 << (v650 - 1);
    v652 = v651 - 1;
    v653 = -v651;
    if (v649 < v652)
      LODWORD(v652) = v565 + v862;
    if (v649 >= v653)
      v649 = v652;
    else
      v649 = v653;
  }
  a2[12] = v649;
  v654 = v567 + v866;
  v655 = a4[9];
  if (v655 >= 1)
  {
    v656 = 1 << (v655 - 1);
    v657 = v656 - 1;
    v658 = -v656;
    if (v654 < v657)
      LODWORD(v657) = v567 + v866;
    if (v654 >= v658)
      v654 = v657;
    else
      v654 = v658;
  }
  a2[13] = v654;
  v659 = v569 + v809;
  v660 = a4[9];
  if (v660 >= 1)
  {
    v661 = 1 << (v660 - 1);
    v662 = v661 - 1;
    v663 = -v661;
    if (v659 < v662)
      LODWORD(v662) = v569 + v809;
    if (v659 >= v663)
      v659 = v662;
    else
      v659 = v663;
  }
  a2[14] = v659;
  v664 = v571 + v823;
  v665 = a4[9];
  if (v665 >= 1)
  {
    v666 = 1 << (v665 - 1);
    v667 = v666 - 1;
    v668 = -v666;
    if (v664 < v667)
      LODWORD(v667) = v571 + v823;
    if (v664 >= v668)
      v664 = v667;
    else
      v664 = v668;
  }
  a2[15] = v664;
  v669 = v571 - v823;
  v670 = a4[9];
  if (v670 >= 1)
  {
    v671 = 1 << (v670 - 1);
    v672 = v671 - 1;
    v673 = -v671;
    if (v669 < v672)
      LODWORD(v672) = v571 - v823;
    if (v669 >= v673)
      v669 = v672;
    else
      v669 = v673;
  }
  a2[16] = v669;
  v674 = v569 - v809;
  v675 = a4[9];
  if (v675 >= 1)
  {
    v676 = 1 << (v675 - 1);
    v677 = v676 - 1;
    v678 = -v676;
    if (v674 < v677)
      LODWORD(v677) = v569 - v809;
    if (v674 >= v678)
      v674 = v677;
    else
      v674 = v678;
  }
  result = v862;
  a2[17] = v674;
  v680 = v567 - v866;
  v681 = a4[9];
  if (v681 >= 1)
  {
    v682 = 1 << (v681 - 1);
    v683 = v682 - 1;
    v684 = -v682;
    if (v680 < v683)
      LODWORD(v683) = v680;
    if (v680 >= v684)
      v680 = v683;
    else
      v680 = v684;
  }
  a2[18] = v680;
  v685 = v565 - v862;
  v686 = a4[9];
  if (v686 >= 1)
  {
    v687 = 1 << (v686 - 1);
    v688 = v687 - 1;
    v689 = -v687;
    if (v685 < v688)
      LODWORD(v688) = v565 - v862;
    if (v685 >= v689)
      v685 = v688;
    else
      v685 = v689;
  }
  a2[19] = v685;
  v690 = v562 - v633;
  v691 = a4[9];
  if (v691 >= 1)
  {
    v692 = 1 << (v691 - 1);
    v693 = v692 - 1;
    v694 = -v692;
    if (v690 < v693)
      LODWORD(v693) = v690;
    if (v690 >= v694)
      v690 = v693;
    else
      v690 = v694;
  }
  a2[20] = v690;
  v695 = v559 - v627;
  v696 = a4[9];
  if (v696 >= 1)
  {
    v697 = 1 << (v696 - 1);
    v698 = v697 - 1;
    v699 = -v697;
    if (v695 < v698)
      LODWORD(v698) = v559 - v627;
    if (v695 >= v699)
      v695 = v698;
    else
      v695 = v699;
  }
  a2[21] = v695;
  v700 = v827 - v620;
  v701 = a4[9];
  if (v701 >= 1)
  {
    v702 = 1 << (v701 - 1);
    v703 = v702 - 1;
    v704 = -v702;
    if (v700 < v703)
      LODWORD(v703) = v700;
    if (v700 >= v704)
      v700 = v703;
    else
      v700 = v704;
  }
  a2[22] = v700;
  v705 = v831 - v613;
  v706 = a4[9];
  if (v706 >= 1)
  {
    v707 = 1 << (v706 - 1);
    v708 = v707 - 1;
    v709 = -v707;
    if (v705 < v708)
      LODWORD(v708) = v831 - v613;
    if (v705 >= v709)
      v705 = v708;
    else
      v705 = v709;
  }
  a2[23] = v705;
  v710 = v778 - v606;
  v711 = a4[9];
  if (v711 >= 1)
  {
    v712 = 1 << (v711 - 1);
    v713 = v712 - 1;
    v714 = -v712;
    if (v710 < v713)
      LODWORD(v713) = v778 - v606;
    if (v710 >= v714)
      v710 = v713;
    else
      v710 = v714;
  }
  a2[24] = v710;
  v715 = v812 - v598;
  v716 = a4[9];
  if (v716 >= 1)
  {
    v717 = 1 << (v716 - 1);
    v718 = v717 - 1;
    v719 = -v717;
    if (v715 < v718)
      LODWORD(v718) = v715;
    if (v715 >= v719)
      v715 = v718;
    else
      v715 = v719;
  }
  a2[25] = v715;
  v720 = v816 - v592;
  v721 = a4[9];
  if (v721 >= 1)
  {
    v722 = 1 << (v721 - 1);
    v723 = v722 - 1;
    v724 = -v722;
    if (v720 < v723)
      LODWORD(v723) = v720;
    if (v720 >= v724)
      v720 = v723;
    else
      v720 = v724;
  }
  a2[26] = v720;
  v725 = v838 - v585;
  v726 = a4[9];
  if (v726 >= 1)
  {
    v727 = 1 << (v726 - 1);
    v728 = v727 - 1;
    v729 = -v727;
    if (v725 < v728)
      LODWORD(v728) = v838 - v585;
    if (v725 >= v729)
      v725 = v728;
    else
      v725 = v729;
  }
  a2[27] = v725;
  v730 = v846 - v873;
  v731 = a4[9];
  if (v731 >= 1)
  {
    v732 = 1 << (v731 - 1);
    v733 = v732 - 1;
    v734 = -v732;
    if (v730 < v733)
      LODWORD(v733) = v846 - v873;
    if (v730 >= v734)
      v730 = v733;
    else
      v730 = v734;
  }
  a2[28] = v730;
  v735 = v850 - v858;
  v736 = a4[9];
  if (v736 >= 1)
  {
    v737 = 1 << (v736 - 1);
    v738 = v737 - 1;
    v739 = -v737;
    if (v735 < v738)
      LODWORD(v738) = v850 - v858;
    if (v735 >= v739)
      v735 = v738;
    else
      v735 = v739;
  }
  a2[29] = v735;
  v740 = v854 - v512;
  v741 = a4[9];
  if (v741 >= 1)
  {
    v742 = 1 << (v741 - 1);
    v743 = v742 - 1;
    v744 = -v742;
    if (v740 < v743)
      LODWORD(v743) = v854 - v512;
    if (v740 >= v744)
      v740 = v743;
    else
      v740 = v744;
  }
  a2[30] = v740;
  v745 = v842 - v517;
  v746 = a4[9];
  if (v746 >= 1)
  {
    v747 = 1 << (v746 - 1);
    v748 = v747 - 1;
    v749 = -v747;
    if (v745 < v748)
      LODWORD(v748) = v842 - v517;
    if (v745 >= v749)
      v745 = v748;
    else
      v745 = v749;
  }
  a2[31] = v745;
  return result;
}

int *av1_iadst4(int *result, _DWORD *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v3 = *result;
  v4 = result[1];
  v5 = result[2];
  v6 = result[3];
  if (v4 | *result | v5 | v6)
  {
    v7 = (char *)&av1_sinpi_arr_data + 20 * a3;
    v8 = *((_DWORD *)v7 - 49);
    v9 = *((_DWORD *)v7 - 48);
    v10 = *((_DWORD *)v7 - 47);
    LODWORD(v7) = *((_DWORD *)v7 - 46);
    v11 = v10 * v4;
    v12 = v10 * (v3 - v5 + v6);
    v13 = v8 * v3 + v9 * v6 + (_DWORD)v7 * v5;
    v14 = v9 * v3 - (_DWORD)v7 * v6;
    v15 = 1 << (a3 - 1);
    v16 = v14 - v8 * v5;
    a2[2] = (v15 + v12) >> a3;
    a2[3] = (v15 + v16 - v11 + v13) >> a3;
    *a2 = (v15 + v13 + v11) >> a3;
    a2[1] = (v15 + v16 + v11) >> a3;
  }
  else
  {
    a2[2] = 0;
    a2[3] = 0;
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t av1_iadst8(int *a1, _DWORD *a2, int a3, uint64_t a4)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t result;
  uint64_t v136;

  v4 = &av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v5 = a1[7];
  *a2 = v5;
  v6 = *a1;
  a2[1] = *a1;
  v7 = a1[5];
  a2[2] = v7;
  v8 = a1[2];
  a2[3] = v8;
  v9 = a1[3];
  a2[4] = v9;
  v10 = a1[4];
  a2[5] = v10;
  v11 = a1[1];
  v12 = 1 << (a3 - 1);
  a2[6] = v11;
  v13 = a1[6];
  a2[7] = v13;
  v14 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v15 = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v16 = (v12 + v14 * v5 + v15 * v6) >> a3;
  v17 = (v12 + -(v6 * v14) + v15 * v5) >> a3;
  v18 = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v19 = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v20 = (v12 + v18 * v7 + v19 * v8) >> a3;
  v21 = v12 + -(v8 * v18) + v19 * v7;
  v22 = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v23 = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v24 = (v12 + v22 * v9 + v23 * v10) >> a3;
  v25 = (v12 + -(v10 * v22) + v23 * v9) >> a3;
  v26 = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v27 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v28 = (v12 + v26 * v11 + v27 * v13) >> a3;
  v29 = v12 + -(v13 * v26) + v27 * v11;
  v30 = v24 + v16;
  v31 = *(char *)(a4 + 3);
  if (v31 >= 1)
  {
    v32 = 1 << (v31 - 1);
    v33 = v32 - 1;
    v34 = -v32;
    if (v30 < v33)
      LODWORD(v33) = v24 + v16;
    if (v30 >= v34)
      v30 = v33;
    else
      v30 = v34;
  }
  v35 = v21 >> a3;
  v36 = v29 >> a3;
  *a2 = v30;
  v37 = v25 + v17;
  v38 = *(char *)(a4 + 3);
  if (v38 >= 1)
  {
    v39 = 1 << (v38 - 1);
    v40 = v39 - 1;
    v41 = -v39;
    if (v37 < v40)
      LODWORD(v40) = v25 + v17;
    if (v37 >= v41)
      v37 = v40;
    else
      v37 = v41;
  }
  a2[1] = v37;
  v42 = v28 + v20;
  v43 = *(char *)(a4 + 3);
  if (v43 >= 1)
  {
    v44 = 1 << (v43 - 1);
    v45 = v44 - 1;
    v46 = -v44;
    if (v42 < v45)
      LODWORD(v45) = v28 + v20;
    if (v42 >= v46)
      v42 = v45;
    else
      v42 = v46;
  }
  a2[2] = v42;
  v47 = v36 + v35;
  v48 = *(char *)(a4 + 3);
  if (v48 >= 1)
  {
    v49 = 1 << (v48 - 1);
    v50 = v49 - 1;
    v51 = -v49;
    if (v47 < v50)
      LODWORD(v50) = v36 + v35;
    if (v47 >= v51)
      v47 = v50;
    else
      v47 = v51;
  }
  a2[3] = v47;
  v52 = v16 - v24;
  v53 = *(char *)(a4 + 3);
  if (v53 >= 1)
  {
    v54 = 1 << (v53 - 1);
    v55 = v54 - 1;
    v56 = -v54;
    if (v52 < v55)
      LODWORD(v55) = v52;
    if (v52 >= v56)
      v52 = v55;
    else
      v52 = v56;
  }
  a2[4] = v52;
  v57 = v17 - v25;
  v58 = *(char *)(a4 + 3);
  if (v58 >= 1)
  {
    v59 = 1 << (v58 - 1);
    v60 = v59 - 1;
    v61 = -v59;
    if (v57 < v60)
      LODWORD(v60) = v57;
    if (v57 >= v61)
      v57 = v60;
    else
      v57 = v61;
  }
  a2[5] = v57;
  v62 = v20 - v28;
  v63 = *(char *)(a4 + 3);
  if (v63 >= 1)
  {
    v64 = 1 << (v63 - 1);
    v65 = v64 - 1;
    v66 = -v64;
    if (v62 < v65)
      LODWORD(v65) = v62;
    if (v62 >= v66)
      v62 = v65;
    else
      v62 = v66;
  }
  a2[6] = v62;
  v67 = v35 - v36;
  v68 = *(char *)(a4 + 3);
  if (v68 >= 1)
  {
    v69 = 1 << (v68 - 1);
    v70 = v69 - 1;
    v71 = -v69;
    if (v67 < v70)
      LODWORD(v70) = v67;
    if (v67 >= v71)
      v67 = v70;
    else
      v67 = v71;
  }
  v72 = a3;
  a2[7] = v67;
  v73 = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v74 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v75 = v74 * v57;
  v76 = v12 + v73 * v52;
  v77 = -(v57 * v73);
  v78 = -(v62 * v74);
  v79 = v12 + v73 * v67;
  v80 = v73 * v62;
  v81 = v42 + v30;
  v82 = *(char *)(a4 + 5);
  if (v82 >= 1)
  {
    v83 = 1 << (v82 - 1);
    v84 = v83 - 1;
    v85 = -v83;
    if (v81 < v84)
      LODWORD(v84) = v42 + v30;
    if (v81 >= v85)
      v81 = v84;
    else
      v81 = v85;
  }
  v86 = v74 * v52;
  v87 = v12 + v77;
  v88 = v74 * v67;
  v89 = v12 + v80;
  v90 = v76 + v75;
  v91 = v79 + v78;
  *a2 = v81;
  v92 = v47 + v37;
  v93 = *(char *)(a4 + 5);
  if (v93 >= 1)
  {
    v94 = 1 << (v93 - 1);
    v95 = v94 - 1;
    v96 = -v94;
    if (v92 < v95)
      LODWORD(v95) = v47 + v37;
    if (v92 >= v96)
      v92 = v95;
    else
      v92 = v96;
  }
  v97 = v87 + v86;
  v98 = v89 + v88;
  v99 = v90 >> v72;
  v100 = v91 >> v72;
  a2[1] = v92;
  v101 = v30 - v42;
  v102 = *(char *)(a4 + 5);
  if (v102 >= 1)
  {
    v103 = 1 << (v102 - 1);
    v104 = v103 - 1;
    v105 = -v103;
    if (v101 < v104)
      LODWORD(v104) = v101;
    if (v101 >= v105)
      v101 = v104;
    else
      v101 = v105;
  }
  v106 = v97 >> v72;
  v107 = v98 >> v72;
  a2[2] = v101;
  v108 = v37 - v47;
  v109 = *(char *)(a4 + 5);
  if (v109 >= 1)
  {
    v110 = 1 << (v109 - 1);
    v111 = v110 - 1;
    v112 = -v110;
    if (v108 < v111)
      LODWORD(v111) = v108;
    if (v108 >= v112)
      v108 = v111;
    else
      v108 = v112;
  }
  a2[3] = v108;
  v113 = v100 + v99;
  v114 = *(char *)(a4 + 5);
  if (v114 >= 1)
  {
    v115 = 1 << (v114 - 1);
    v116 = v115 - 1;
    v117 = -v115;
    if (v113 < v116)
      LODWORD(v116) = v100 + v99;
    if (v113 >= v117)
      v113 = v116;
    else
      v113 = v117;
  }
  a2[4] = v113;
  v118 = v106 + v107;
  v119 = *(char *)(a4 + 5);
  if (v119 >= 1)
  {
    v120 = 1 << (v119 - 1);
    v121 = v120 - 1;
    v122 = -v120;
    if (v118 < v121)
      LODWORD(v121) = v106 + v107;
    if (v118 >= v122)
      v118 = v121;
    else
      v118 = v122;
  }
  a2[5] = v118;
  v123 = v99 - v100;
  v124 = *(char *)(a4 + 5);
  if (v124 >= 1)
  {
    v125 = 1 << (v124 - 1);
    v126 = v125 - 1;
    v127 = -v125;
    if (v123 < v126)
      LODWORD(v126) = v123;
    if (v123 >= v127)
      v123 = v126;
    else
      v123 = v127;
  }
  a2[6] = v123;
  v128 = v106 - v107;
  v129 = *(char *)(a4 + 5);
  if (v129 >= 1)
  {
    v130 = 1 << (v129 - 1);
    v131 = v130 - 1;
    v132 = -v130;
    if (v128 < v131)
      LODWORD(v131) = v128;
    if (v128 >= v132)
      v128 = v131;
    else
      v128 = v132;
  }
  v133 = v4[32];
  v134 = v12 + v133 * v101;
  result = (v134 + v133 * v108) >> v72;
  v136 = v12 + v133 * v123;
  *a2 = v81;
  a2[1] = -v113;
  a2[2] = (v136 + v133 * v128) >> v72;
  a2[3] = -(int)result;
  a2[4] = (v134 + -(v133 * v108)) >> v72;
  a2[5] = -(int)((v136 + -(v133 * v128)) >> v72);
  a2[6] = v118;
  a2[7] = -v92;
  return result;
}

uint64_t av1_iadst16(int *a1, _DWORD *a2, int a3, char *a4)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  char v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  int v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t result;
  int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  int v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  int v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  int v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  int v402;
  int v403;
  int v404;
  uint64_t v405;
  int v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  int v413;
  int v414;
  int v415;

  v4 = &av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v5 = a1[15];
  *a2 = v5;
  v6 = *a1;
  a2[1] = *a1;
  v7 = a1[13];
  a2[2] = v7;
  v8 = a1[2];
  a2[3] = v8;
  v9 = a1[11];
  a2[4] = v9;
  v10 = a1[4];
  a2[5] = v10;
  v11 = a1[9];
  a2[6] = v11;
  v12 = a1[6];
  a2[7] = v12;
  v13 = a1[7];
  a2[8] = v13;
  v14 = a1[8];
  a2[9] = v14;
  v15 = a1[5];
  a2[10] = v15;
  v16 = a1[10];
  a2[11] = v16;
  v17 = a1[3];
  a2[12] = v17;
  v18 = a1[12];
  a2[13] = v18;
  v19 = a1[1];
  a2[14] = v19;
  v20 = a1[14];
  a2[15] = v20;
  v21 = av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v22 = av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v23 = 1 << (a3 - 1);
  v24 = (v23 + v21 * v5 + v22 * v6) >> a3;
  v25 = v23 + -(v6 * v21);
  v26 = av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v27 = v25 + v22 * v5;
  LODWORD(v25) = av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v409 = v27 >> a3;
  v411 = (v23 + v26 * v7 + (int)v25 * v8) >> a3;
  v28 = v23 + -(v8 * v26) + (int)v25 * v7;
  LODWORD(v27) = av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v29 = av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v30 = v29 * v10;
  v31 = v23 + (int)v27 * v9;
  v32 = -(v10 * v27);
  v33 = av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v34 = av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  LODWORD(v25) = av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v35 = av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v36 = (v23 + (int)v25 * v13 + v35 * v14) >> a3;
  v405 = (v23 + -(v14 * (_DWORD)v25) + v35 * v13) >> a3;
  LODWORD(v25) = av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v37 = av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v407 = (v23 + (int)v25 * v15 + v37 * v16) >> a3;
  v38 = v23 + -(v16 * (_DWORD)v25) + v37 * v15;
  v39 = av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v40 = av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v41 = v40 * v18;
  v42 = v23 + v39 * v17;
  v43 = -(v18 * v39);
  v44 = av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v45 = av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v403 = v24;
  v46 = v36 + v24;
  v47 = a4[3];
  if (v47 >= 1)
  {
    v48 = 1 << (v47 - 1);
    v49 = v48 - 1;
    v50 = -v48;
    if (v46 < v49)
      LODWORD(v49) = v46;
    if (v46 >= v50)
      v46 = v49;
    else
      v46 = v50;
  }
  v51 = v33 * v11;
  v52 = v44 * v19;
  v53 = v29 * v9;
  v54 = v23 + v32;
  v55 = v40 * v17;
  v56 = v23 + v43;
  v57 = v31 + v30;
  v58 = v42 + v41;
  v59 = v28 >> a3;
  v60 = v38 >> a3;
  v414 = v46;
  *a2 = v46;
  v61 = v405 + v409;
  v62 = a4[3];
  if (v62 >= 1)
  {
    v63 = 1 << (v62 - 1);
    v64 = v63 - 1;
    v65 = -v63;
    if (v61 < v64)
      LODWORD(v64) = v405 + v409;
    if (v61 >= v65)
      v61 = v64;
    else
      v61 = v65;
  }
  v66 = -(v12 * v33);
  v67 = -(v20 * v44);
  v68 = v34 * v12;
  v69 = v45 * v20;
  v70 = v23 + v52;
  v71 = v54 + v53;
  v72 = v56 + v55;
  v73 = v57 >> a3;
  v74 = v58 >> a3;
  a2[1] = v61;
  v75 = v407 + v411;
  v76 = a4[3];
  if (v76 >= 1)
  {
    v77 = 1 << (v76 - 1);
    v78 = v77 - 1;
    v79 = -v77;
    if (v75 < v78)
      LODWORD(v78) = v407 + v411;
    if (v75 >= v79)
      v75 = v78;
    else
      v75 = v79;
  }
  v80 = v34 * v11;
  v81 = v45 * v19;
  v82 = v70 + v69;
  v83 = v71 >> a3;
  v84 = v72 >> a3;
  a2[2] = v75;
  v85 = v60 + v59;
  v86 = a4[3];
  if (v86 < 1)
  {
    LODWORD(v89) = v60 + v59;
  }
  else
  {
    v87 = 1 << (v86 - 1);
    v88 = v87 - 1;
    v89 = -v87;
    if (v85 < v88)
      LODWORD(v88) = v60 + v59;
    if (v85 >= v89)
      LODWORD(v89) = v88;
  }
  v90 = v23 + v66 + v80;
  v91 = v23 + v67 + v81;
  v92 = (v23 + v51 + v68) >> a3;
  v93 = v82 >> a3;
  a2[3] = v89;
  v94 = v74 + v73;
  v95 = a4[3];
  if (v95 >= 1)
  {
    v96 = 1 << (v95 - 1);
    v97 = v96 - 1;
    v98 = -v96;
    if (v94 < v97)
      LODWORD(v97) = v74 + v73;
    if (v94 >= v98)
      v94 = v97;
    else
      v94 = v98;
  }
  v99 = v90 >> a3;
  v100 = v91 >> a3;
  a2[4] = v94;
  v101 = v84 + v83;
  v102 = a4[3];
  if (v102 >= 1)
  {
    v103 = 1 << (v102 - 1);
    v104 = v103 - 1;
    v105 = -v103;
    if (v101 < v104)
      LODWORD(v104) = v84 + v83;
    if (v101 >= v105)
      v101 = v104;
    else
      v101 = v105;
  }
  a2[5] = v101;
  v106 = v93 + v92;
  v107 = a4[3];
  if (v107 >= 1)
  {
    v108 = 1 << (v107 - 1);
    v109 = v108 - 1;
    v110 = -v108;
    if (v106 < v109)
      LODWORD(v109) = v93 + v92;
    if (v106 >= v110)
      v106 = v109;
    else
      v106 = v110;
  }
  a2[6] = v106;
  v111 = v100 + v99;
  v112 = a4[3];
  if (v112 >= 1)
  {
    v113 = 1 << (v112 - 1);
    v114 = v113 - 1;
    v115 = -v113;
    if (v111 < v114)
      LODWORD(v114) = v100 + v99;
    if (v111 >= v115)
      v111 = v114;
    else
      v111 = v115;
  }
  a2[7] = v111;
  v116 = v403 - v36;
  v117 = a4[3];
  v118 = v73;
  if (v117 >= 1)
  {
    v119 = 1 << (v117 - 1);
    v120 = v119 - 1;
    v121 = -v119;
    if (v116 < v120)
      LODWORD(v120) = v116;
    if (v116 >= v121)
      v116 = v120;
    else
      v116 = v121;
  }
  a2[8] = v116;
  v122 = v409 - v405;
  v123 = a4[3];
  if (v123 >= 1)
  {
    v124 = 1 << (v123 - 1);
    v125 = v124 - 1;
    v126 = -v124;
    if (v122 < v125)
      LODWORD(v125) = v409 - v405;
    if (v122 >= v126)
      v122 = v125;
    else
      v122 = v126;
  }
  a2[9] = v122;
  v127 = v411 - v407;
  v128 = a4[3];
  v413 = v61;
  if (v128 >= 1)
  {
    v129 = 1 << (v128 - 1);
    v130 = v129 - 1;
    v131 = -v129;
    if (v127 < v130)
      LODWORD(v130) = v411 - v407;
    if (v127 >= v131)
      v127 = v130;
    else
      v127 = v131;
  }
  a2[10] = v127;
  v132 = v59 - v60;
  v133 = a4[3];
  if (v133 >= 1)
  {
    v134 = 1 << (v133 - 1);
    v135 = v134 - 1;
    v136 = -v134;
    if (v132 < v135)
      LODWORD(v135) = v59 - v60;
    if (v132 >= v136)
      v132 = v135;
    else
      v132 = v136;
  }
  a2[11] = v132;
  v137 = v118 - v74;
  v138 = a4[3];
  if (v138 >= 1)
  {
    v139 = 1 << (v138 - 1);
    v140 = v139 - 1;
    v141 = -v139;
    if (v137 < v140)
      LODWORD(v140) = v118 - v74;
    if (v137 >= v141)
      v137 = v140;
    else
      v137 = v141;
  }
  a2[12] = v137;
  v142 = v83 - v84;
  v143 = a4[3];
  if (v143 >= 1)
  {
    v144 = 1 << (v143 - 1);
    v145 = v144 - 1;
    v146 = -v144;
    if (v142 < v145)
      LODWORD(v145) = v142;
    if (v142 >= v146)
      v142 = v145;
    else
      v142 = v146;
  }
  a2[13] = v142;
  v147 = v92 - v93;
  v148 = a4[3];
  if (v148 >= 1)
  {
    v149 = 1 << (v148 - 1);
    v150 = v149 - 1;
    v151 = -v149;
    if (v147 < v150)
      LODWORD(v150) = v92 - v93;
    if (v147 >= v151)
      v147 = v150;
    else
      v147 = v151;
  }
  a2[14] = v147;
  v152 = v99 - v100;
  v153 = a4[3];
  v402 = v127;
  if (v153 >= 1)
  {
    v154 = 1 << (v153 - 1);
    v155 = v154 - 1;
    v156 = -v154;
    if (v152 < v155)
      LODWORD(v155) = v152;
    if (v152 >= v156)
      v152 = v155;
    else
      v152 = v156;
  }
  a2[15] = v152;
  v157 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v158 = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v159 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v160 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v161 = v94;
  v162 = v94 + v414;
  v163 = a4[5];
  if (v163 >= 1)
  {
    v164 = 1 << (v163 - 1);
    v165 = v164 - 1;
    v166 = -v164;
    if (v162 < v165)
      LODWORD(v165) = v162;
    if (v162 >= v166)
      v162 = v165;
    else
      v162 = v166;
  }
  *a2 = v162;
  v167 = v101;
  v168 = v101 + v413;
  v169 = a4[5];
  if (v169 >= 1)
  {
    v170 = 1 << (v169 - 1);
    v171 = v170 - 1;
    v172 = -v170;
    if (v168 < v171)
      LODWORD(v171) = v168;
    if (v168 >= v172)
      v168 = v171;
    else
      v168 = v172;
  }
  a2[1] = v168;
  v173 = v106 + v75;
  v174 = a4[5];
  if (v174 >= 1)
  {
    v175 = 1 << (v174 - 1);
    v176 = v175 - 1;
    v177 = -v175;
    if (v173 < v176)
      LODWORD(v176) = v106 + v75;
    if (v173 >= v177)
      v173 = v176;
    else
      v173 = v177;
  }
  v178 = v157 * v116;
  v179 = v157 * v142;
  v410 = v168;
  v412 = v173;
  a2[2] = v173;
  v406 = v111;
  v408 = v89;
  v180 = v111 + v89;
  v181 = a4[5];
  v182 = v75;
  if (v181 >= 1)
  {
    v183 = 1 << (v181 - 1);
    v184 = v183 - 1;
    v185 = -v183;
    if (v180 < v184)
      LODWORD(v184) = v180;
    if (v180 >= v185)
      v180 = v184;
    else
      v180 = v185;
  }
  v186 = -(v122 * v157);
  v187 = v157 * v137;
  v188 = a3;
  v189 = v158 * v122;
  v190 = v23 + v178;
  v191 = -(v137 * v158);
  v192 = v23 + v179;
  v404 = v180;
  a2[3] = v180;
  v193 = v414 - v161;
  v194 = a4[5];
  if (v194 >= 1)
  {
    v195 = 1 << (v194 - 1);
    v196 = v195 - 1;
    v197 = -v195;
    if (v193 < v196)
      LODWORD(v196) = v414 - v161;
    if (v193 >= v197)
      v193 = v196;
    else
      v193 = v197;
  }
  v198 = v159 * v402;
  v199 = v159 * v152;
  v200 = v158 * v116;
  v201 = v23 + v186;
  v202 = v158 * v142;
  v203 = v23 + v187;
  v204 = v190 + v189;
  v205 = v192 + v191;
  a2[4] = v193;
  v206 = v413 - v167;
  v207 = a4[5];
  if (v207 >= 1)
  {
    v208 = 1 << (v207 - 1);
    v209 = v208 - 1;
    v210 = -v208;
    if (v206 < v209)
      LODWORD(v209) = v206;
    if (v206 >= v210)
      v206 = v209;
    else
      v206 = v210;
  }
  v211 = -(v132 * v159);
  v212 = v159 * v147;
  v213 = v160 * v132;
  v214 = v23 + v198;
  v215 = -(v147 * v160);
  v216 = v23 + v199;
  v217 = v201 + v200;
  v218 = v203 + v202;
  v219 = v204 >> v188;
  v220 = v205 >> v188;
  a2[5] = v206;
  v221 = v182 - v106;
  v222 = a4[5];
  if (v222 >= 1)
  {
    v223 = 1 << (v222 - 1);
    v224 = v223 - 1;
    v225 = -v223;
    if (v221 < v224)
      LODWORD(v224) = v182 - v106;
    if (v221 >= v225)
      v221 = v224;
    else
      v221 = v225;
  }
  v226 = v162;
  v227 = v214 + v213;
  v228 = v217 >> v188;
  v229 = v218 >> v188;
  a2[6] = v221;
  v230 = v408 - v406;
  v231 = a4[5];
  if (v231 >= 1)
  {
    v232 = 1 << (v231 - 1);
    v233 = v232 - 1;
    v234 = -v232;
    if (v230 < v233)
      LODWORD(v233) = v408 - v406;
    if (v230 >= v234)
      v230 = v233;
    else
      v230 = v234;
  }
  v235 = v23 + v212 + v160 * v152;
  v236 = v227 >> v188;
  v237 = (v216 + v215) >> v188;
  a2[7] = v230;
  v238 = v220 + v219;
  v239 = a4[5];
  if (v239 >= 1)
  {
    v240 = 1 << (v239 - 1);
    v241 = v240 - 1;
    v242 = -v240;
    if (v238 < v241)
      LODWORD(v241) = v220 + v219;
    if (v238 >= v242)
      v238 = v241;
    else
      v238 = v242;
  }
  v243 = (v23 + v211 + v160 * v402) >> v188;
  v244 = v235 >> v188;
  a2[8] = v238;
  v245 = v228 + v229;
  v246 = a4[5];
  v415 = v238;
  if (v246 >= 1)
  {
    v247 = 1 << (v246 - 1);
    v248 = v247 - 1;
    v249 = -v247;
    if (v245 < v248)
      LODWORD(v248) = v228 + v229;
    if (v245 >= v249)
      v245 = v248;
    else
      v245 = v249;
  }
  a2[9] = v245;
  v250 = v237 + v236;
  v251 = a4[5];
  if (v251 >= 1)
  {
    v252 = 1 << (v251 - 1);
    v253 = v252 - 1;
    v254 = -v252;
    if (v250 < v253)
      LODWORD(v253) = v237 + v236;
    if (v250 >= v254)
      v250 = v253;
    else
      v250 = v254;
  }
  a2[10] = v250;
  v255 = v243 + v244;
  v256 = a4[5];
  if (v256 >= 1)
  {
    v257 = 1 << (v256 - 1);
    v258 = v257 - 1;
    v259 = -v257;
    if (v255 < v258)
      LODWORD(v258) = v243 + v244;
    if (v255 >= v259)
      v255 = v258;
    else
      v255 = v259;
  }
  a2[11] = v255;
  v260 = v219 - v220;
  v261 = a4[5];
  if (v261 >= 1)
  {
    v262 = 1 << (v261 - 1);
    v263 = v262 - 1;
    v264 = -v262;
    if (v260 < v263)
      LODWORD(v263) = v219 - v220;
    if (v260 >= v264)
      v260 = v263;
    else
      v260 = v264;
  }
  a2[12] = v260;
  v265 = v228 - v229;
  v266 = a4[5];
  if (v266 >= 1)
  {
    v267 = 1 << (v266 - 1);
    v268 = v267 - 1;
    v269 = -v267;
    if (v265 < v268)
      LODWORD(v268) = v265;
    if (v265 >= v269)
      v265 = v268;
    else
      v265 = v269;
  }
  a2[13] = v265;
  v270 = v236 - v237;
  v271 = a4[5];
  if (v271 >= 1)
  {
    v272 = 1 << (v271 - 1);
    v273 = v272 - 1;
    v274 = -v272;
    if (v270 < v273)
      LODWORD(v273) = v236 - v237;
    if (v270 >= v274)
      v270 = v273;
    else
      v270 = v274;
  }
  a2[14] = v270;
  v275 = v243 - v244;
  v276 = a4[5];
  if (v276 >= 1)
  {
    v277 = 1 << (v276 - 1);
    v278 = v277 - 1;
    v279 = -v277;
    if (v275 < v278)
      LODWORD(v278) = v243 - v244;
    if (v275 >= v279)
      v275 = v278;
    else
      v275 = v279;
  }
  a2[15] = v275;
  v280 = v4[16];
  v281 = v4[48];
  v282 = v281 * v206;
  v283 = -(v280 * v206);
  v284 = -(v281 * v221);
  v285 = v280 * v221;
  v286 = v412 + v226;
  v287 = a4[7];
  if (v287 >= 1)
  {
    v288 = 1 << (v287 - 1);
    v289 = v288 - 1;
    v290 = -v288;
    if (v286 < v289)
      LODWORD(v289) = v412 + v226;
    if (v286 >= v290)
      v286 = v289;
    else
      v286 = v290;
  }
  v291 = v23 + v283;
  v292 = v281 * v230;
  v293 = v23 + v285;
  v294 = v23 + v280 * v193 + v282;
  v295 = v23 + v280 * v230 + v284;
  *a2 = v286;
  v296 = v404 + v410;
  v297 = a4[7];
  if (v297 >= 1)
  {
    v298 = 1 << (v297 - 1);
    v299 = v298 - 1;
    v300 = -v298;
    if (v296 < v299)
      LODWORD(v299) = v404 + v410;
    if (v296 >= v300)
      v296 = v299;
    else
      v296 = v300;
  }
  v301 = v293 + v292;
  v302 = v294 >> v188;
  v303 = v295 >> v188;
  a2[1] = v296;
  v304 = v226 - v412;
  v305 = a4[7];
  if (v305 >= 1)
  {
    v306 = 1 << (v305 - 1);
    v307 = v306 - 1;
    v308 = -v306;
    if (v304 < v307)
      LODWORD(v307) = v304;
    if (v304 >= v308)
      v304 = v307;
    else
      v304 = v308;
  }
  v309 = (v291 + v281 * v193) >> v188;
  v310 = v301 >> v188;
  a2[2] = v304;
  v311 = v410 - v404;
  v312 = a4[7];
  if (v312 >= 1)
  {
    v313 = 1 << (v312 - 1);
    v314 = v313 - 1;
    v315 = -v313;
    if (v311 < v314)
      LODWORD(v314) = v410 - v404;
    if (v311 >= v315)
      v311 = v314;
    else
      v311 = v315;
  }
  a2[3] = v311;
  v316 = v303 + v302;
  v317 = a4[7];
  if (v317 >= 1)
  {
    v318 = 1 << (v317 - 1);
    v319 = v318 - 1;
    v320 = -v318;
    if (v316 < v319)
      LODWORD(v319) = v303 + v302;
    if (v316 >= v320)
      v316 = v319;
    else
      v316 = v320;
  }
  a2[4] = v316;
  result = (v309 + v310);
  v322 = a4[7];
  if (v322 >= 1)
  {
    v323 = 1 << (v322 - 1);
    v324 = v323 - 1;
    v325 = -v323;
    if ((int)result < v324)
      LODWORD(v324) = v309 + v310;
    if ((int)result >= v325)
      result = v324;
    else
      result = v325;
  }
  a2[5] = result;
  v326 = v302 - v303;
  v327 = a4[7];
  if (v327 >= 1)
  {
    v328 = 1 << (v327 - 1);
    v329 = v328 - 1;
    v330 = -v328;
    if (v326 < v329)
      LODWORD(v329) = v326;
    if (v326 >= v330)
      v326 = v329;
    else
      v326 = v330;
  }
  v331 = v280 * v260;
  v332 = v280 * v275;
  a2[6] = v326;
  v333 = v309 - v310;
  v334 = a4[7];
  if (v334 >= 1)
  {
    v335 = 1 << (v334 - 1);
    v336 = v335 - 1;
    v337 = -v335;
    if (v333 < v336)
      LODWORD(v336) = v333;
    if (v333 >= v337)
      v333 = v336;
    else
      v333 = v337;
  }
  v338 = -(v280 * v265);
  v339 = v280 * v270;
  v340 = v281 * v265;
  v341 = v23 + v331;
  v342 = -(v281 * v270);
  v343 = v23 + v332;
  a2[7] = v333;
  v344 = v250 + v415;
  v345 = a4[7];
  if (v345 >= 1)
  {
    v346 = 1 << (v345 - 1);
    v347 = v346 - 1;
    v348 = -v346;
    if (v344 < v347)
      LODWORD(v347) = v250 + v415;
    if (v344 >= v348)
      v344 = v347;
    else
      v344 = v348;
  }
  v349 = v281 * v260;
  v350 = v23 + v338;
  v351 = v281 * v275;
  v352 = v23 + v339;
  v353 = v341 + v340;
  v354 = v343 + v342;
  a2[8] = v344;
  v355 = v255 + v245;
  v356 = a4[7];
  if (v356 >= 1)
  {
    v357 = 1 << (v356 - 1);
    v358 = v357 - 1;
    v359 = -v357;
    if (v355 < v358)
      LODWORD(v358) = v255 + v245;
    if (v355 >= v359)
      v355 = v358;
    else
      v355 = v359;
  }
  v360 = v352 + v351;
  v361 = v353 >> v188;
  v362 = v354 >> v188;
  a2[9] = v355;
  v363 = v415 - v250;
  v364 = a4[7];
  if (v364 >= 1)
  {
    v365 = 1 << (v364 - 1);
    v366 = v365 - 1;
    v367 = -v365;
    if (v363 < v366)
      LODWORD(v366) = v363;
    if (v363 >= v367)
      v363 = v366;
    else
      v363 = v367;
  }
  v368 = (v350 + v349) >> v188;
  v369 = v360 >> v188;
  a2[10] = v363;
  v370 = v245 - v255;
  v371 = a4[7];
  if (v371 >= 1)
  {
    v372 = 1 << (v371 - 1);
    v373 = v372 - 1;
    v374 = -v372;
    if (v370 < v373)
      LODWORD(v373) = v370;
    if (v370 >= v374)
      v370 = v373;
    else
      v370 = v374;
  }
  a2[11] = v370;
  v375 = v362 + v361;
  v376 = a4[7];
  if (v376 >= 1)
  {
    v377 = 1 << (v376 - 1);
    v378 = v377 - 1;
    v379 = -v377;
    if (v375 < v378)
      LODWORD(v378) = v362 + v361;
    if (v375 >= v379)
      v375 = v378;
    else
      v375 = v379;
  }
  a2[12] = v375;
  v380 = v368 + v369;
  v381 = a4[7];
  if (v381 >= 1)
  {
    v382 = 1 << (v381 - 1);
    v383 = v382 - 1;
    v384 = -v382;
    if (v380 < v383)
      LODWORD(v383) = v368 + v369;
    if (v380 >= v384)
      v380 = v383;
    else
      v380 = v384;
  }
  a2[13] = v380;
  v385 = v361 - v362;
  v386 = a4[7];
  if (v386 >= 1)
  {
    v387 = 1 << (v386 - 1);
    v388 = v387 - 1;
    v389 = -v387;
    if (v385 < v388)
      LODWORD(v388) = v385;
    if (v385 >= v389)
      v385 = v388;
    else
      v385 = v389;
  }
  a2[14] = v385;
  v390 = v368 - v369;
  v391 = a4[7];
  if (v391 >= 1)
  {
    v392 = 1 << (v391 - 1);
    v393 = v392 - 1;
    v394 = -v392;
    if (v390 < v393)
      LODWORD(v393) = v390;
    if (v390 >= v394)
      v390 = v393;
    else
      v390 = v394;
  }
  v395 = v4[32];
  v396 = v23 + v395 * v304;
  v397 = (v396 + v395 * v311) >> v188;
  v398 = (v396 + -(v395 * v311)) >> v188;
  v399 = v23 + v395 * v326;
  v400 = v23 + v395 * v363;
  v401 = v23 + v395 * v385;
  *a2 = v286;
  a2[1] = -v344;
  a2[2] = v375;
  a2[3] = -v316;
  a2[4] = (v399 + v395 * v333) >> v188;
  a2[5] = -(int)((v401 + v395 * v390) >> v188);
  a2[6] = (v400 + v395 * v370) >> v188;
  a2[7] = -(int)v397;
  a2[8] = v398;
  a2[9] = -(int)((v400 + -(v395 * v370)) >> v188);
  a2[10] = (v401 + -(v395 * v390)) >> v188;
  a2[11] = -(int)((v399 + -(v395 * v333)) >> v188);
  a2[12] = result;
  a2[13] = -v380;
  a2[14] = v355;
  a2[15] = -v296;
  return result;
}

int *av1_iidentity4_c(int *result, _DWORD *a2)
{
  *a2 = (unint64_t)(5793 * *result + 2048) >> 12;
  a2[1] = (unint64_t)(5793 * result[1] + 2048) >> 12;
  a2[2] = (unint64_t)(5793 * result[2] + 2048) >> 12;
  a2[3] = (unint64_t)(5793 * result[3] + 2048) >> 12;
  return result;
}

_DWORD *av1_iidentity8_c(_DWORD *result, _DWORD *a2)
{
  *a2 = 2 * *result;
  a2[1] = 2 * result[1];
  a2[2] = 2 * result[2];
  a2[3] = 2 * result[3];
  a2[4] = 2 * result[4];
  a2[5] = 2 * result[5];
  a2[6] = 2 * result[6];
  a2[7] = 2 * result[7];
  return result;
}

int *av1_iidentity16_c(int *result, _DWORD *a2)
{
  *a2 = (unint64_t)(11586 * *result + 2048) >> 12;
  a2[1] = (unint64_t)(11586 * result[1] + 2048) >> 12;
  a2[2] = (unint64_t)(11586 * result[2] + 2048) >> 12;
  a2[3] = (unint64_t)(11586 * result[3] + 2048) >> 12;
  a2[4] = (unint64_t)(11586 * result[4] + 2048) >> 12;
  a2[5] = (unint64_t)(11586 * result[5] + 2048) >> 12;
  a2[6] = (unint64_t)(11586 * result[6] + 2048) >> 12;
  a2[7] = (unint64_t)(11586 * result[7] + 2048) >> 12;
  a2[8] = (unint64_t)(11586 * result[8] + 2048) >> 12;
  a2[9] = (unint64_t)(11586 * result[9] + 2048) >> 12;
  a2[10] = (unint64_t)(11586 * result[10] + 2048) >> 12;
  a2[11] = (unint64_t)(11586 * result[11] + 2048) >> 12;
  a2[12] = (unint64_t)(11586 * result[12] + 2048) >> 12;
  a2[13] = (unint64_t)(11586 * result[13] + 2048) >> 12;
  a2[14] = (unint64_t)(11586 * result[14] + 2048) >> 12;
  a2[15] = (unint64_t)(11586 * result[15] + 2048) >> 12;
  return result;
}

uint64_t av1_idct64(int *a1, int *a2, int a3, char *a4)
{
  char v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  char v242;
  int v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  int v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  int v279;
  int v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  int v285;
  int v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  int v294;
  int v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  int v300;
  int v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  int v306;
  int v307;
  uint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  int v332;
  int v333;
  int v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  int v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  int v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  int v356;
  int v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  int v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v384;
  int v385;
  uint64_t v386;
  int v387;
  int v388;
  int v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  int v395;
  int v396;
  int v397;
  int v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  uint64_t v406;
  int v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  int v419;
  int v420;
  int v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  int v425;
  int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  int v442;
  int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  int v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  int v471;
  uint64_t v472;
  int v473;
  int v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  int v495;
  int v496;
  int v497;
  int v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  int v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  int v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  int v514;
  int v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  int v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  int v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  int v542;
  int v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  int v559;
  int v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  int v564;
  int v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  int v569;
  int v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  int v574;
  int v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  int v584;
  uint64_t v585;
  uint64_t v586;
  int v587;
  char v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  int v592;
  uint64_t v593;
  int v594;
  int v595;
  uint64_t v596;
  int v597;
  int v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  int v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  int v609;
  int v610;
  uint64_t v611;
  int v612;
  int v613;
  uint64_t v614;
  int v615;
  int v616;
  uint64_t v617;
  int v618;
  int v619;
  uint64_t v620;
  int v621;
  int v622;
  uint64_t v623;
  int v624;
  int v625;
  uint64_t v626;
  int v627;
  int v628;
  uint64_t v629;
  int v630;
  int v631;
  uint64_t v632;
  int v633;
  int v634;
  uint64_t v635;
  int v636;
  int v637;
  uint64_t v638;
  int v639;
  int v640;
  uint64_t v641;
  int v642;
  uint64_t v643;
  int v644;
  int v645;
  uint64_t v646;
  int v647;
  int v648;
  uint64_t v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  int v660;
  int v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  int v666;
  int v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int v673;
  int v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  int v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  int v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  int v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  int v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  int v702;
  int v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  int v707;
  int v708;
  int v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  int v713;
  uint64_t v714;
  int v715;
  int v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  int v722;
  int v723;
  int v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  int v738;
  int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  int v745;
  int v746;
  int v747;
  uint64_t v748;
  uint64_t v749;
  int v750;
  int v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  int v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  int v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  int v765;
  int v766;
  int v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  int v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  int v776;
  int v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  int v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  int v789;
  int v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  int v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  int v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  int v811;
  int v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  int v816;
  int v817;
  int v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  int v822;
  int v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  int v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  int v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  int v843;
  int v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t v849;
  int v850;
  int v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  int v855;
  int v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  int v860;
  int v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  int v865;
  int v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  int v870;
  int v871;
  uint64_t v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  int v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  int v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  int v887;
  int v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  int v894;
  int v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  int v899;
  int v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  int v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint64_t v908;
  int v909;
  int v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t v913;
  int v914;
  int v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  int v919;
  int v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  int v924;
  int v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  int v929;
  char v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  int v934;
  int v935;
  uint64_t v936;
  int v937;
  int v938;
  uint64_t v939;
  int v940;
  int v941;
  uint64_t v942;
  int v943;
  int v944;
  uint64_t v945;
  int v946;
  uint64_t v947;
  int v948;
  int v949;
  uint64_t v950;
  int v951;
  int v952;
  uint64_t v953;
  int v954;
  uint64_t v955;
  uint64_t v956;
  int v957;
  int v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  int v963;
  uint64_t v964;
  int v965;
  int v966;
  uint64_t v967;
  int v968;
  int v969;
  uint64_t v970;
  int v971;
  int v972;
  uint64_t v973;
  int v974;
  int v975;
  uint64_t v976;
  int v977;
  int v978;
  uint64_t v979;
  int v980;
  int v981;
  uint64_t v982;
  int v983;
  int v984;
  uint64_t v985;
  int v986;
  int v987;
  uint64_t v988;
  int v989;
  int v990;
  uint64_t v991;
  int v992;
  int v993;
  uint64_t v994;
  int v995;
  int v996;
  uint64_t v997;
  int v998;
  int v999;
  uint64_t v1000;
  int v1001;
  int v1002;
  uint64_t v1003;
  int v1004;
  int v1005;
  uint64_t v1006;
  int v1007;
  uint64_t v1008;
  int v1009;
  int v1010;
  int v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  int v1015;
  uint64_t v1016;
  uint64_t v1017;
  int v1018;
  int v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  int v1024;
  int v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  int v1030;
  int v1031;
  uint64_t v1032;
  uint64_t v1033;
  uint64_t v1034;
  int v1035;
  int v1036;
  uint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  int v1040;
  int v1041;
  uint64_t v1042;
  uint64_t v1043;
  uint64_t v1044;
  int v1045;
  int v1046;
  uint64_t v1047;
  uint64_t v1048;
  uint64_t v1049;
  int v1050;
  int v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  int v1057;
  uint64_t v1058;
  uint64_t v1059;
  uint64_t v1060;
  int v1061;
  int v1062;
  uint64_t v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  int v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  int v1076;
  int v1077;
  uint64_t v1078;
  uint64_t v1079;
  uint64_t v1080;
  int v1081;
  int v1082;
  int v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  int v1087;
  int v1088;
  int v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  int v1093;
  int v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  int v1102;
  int v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  int v1107;
  int v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  int v1114;
  int v1115;
  uint64_t v1116;
  uint64_t v1117;
  uint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  int v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  int v1128;
  int v1129;
  uint64_t v1130;
  uint64_t v1131;
  uint64_t v1132;
  uint64_t v1133;
  uint64_t v1134;
  int v1135;
  int v1136;
  uint64_t v1137;
  uint64_t v1138;
  uint64_t v1139;
  int v1140;
  int v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  int v1145;
  int v1146;
  uint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  int v1150;
  int v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  int v1155;
  int v1156;
  uint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  int v1160;
  int v1161;
  uint64_t v1162;
  uint64_t v1163;
  uint64_t v1164;
  int v1165;
  int v1166;
  uint64_t v1167;
  uint64_t v1168;
  uint64_t v1169;
  int v1170;
  int v1171;
  int v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  int v1176;
  int v1177;
  uint64_t v1178;
  uint64_t v1179;
  uint64_t v1180;
  int v1181;
  int v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  int v1186;
  int v1187;
  uint64_t v1188;
  uint64_t v1189;
  uint64_t v1190;
  int v1191;
  int v1192;
  uint64_t v1193;
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  int v1197;
  int v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  int v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  int v1207;
  int v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  int v1212;
  uint64_t v1213;
  uint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  int v1219;
  uint64_t v1220;
  uint64_t v1221;
  uint64_t v1222;
  int v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  uint64_t v1227;
  int v1228;
  int v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  int v1235;
  int v1236;
  uint64_t v1237;
  uint64_t v1238;
  uint64_t v1239;
  int v1240;
  int v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  int v1245;
  int v1246;
  uint64_t v1247;
  uint64_t v1248;
  uint64_t v1249;
  int v1250;
  int v1251;
  uint64_t v1252;
  uint64_t v1253;
  uint64_t v1254;
  uint64_t v1255;
  int v1256;
  int v1257;
  uint64_t v1258;
  uint64_t v1259;
  uint64_t v1260;
  int v1261;
  int v1262;
  uint64_t v1263;
  uint64_t v1264;
  uint64_t v1265;
  int v1266;
  int v1267;
  uint64_t v1268;
  uint64_t v1269;
  uint64_t v1270;
  int v1271;
  int v1272;
  uint64_t v1273;
  uint64_t v1274;
  uint64_t v1275;
  int v1276;
  int v1277;
  uint64_t v1278;
  uint64_t v1279;
  uint64_t v1280;
  int v1281;
  int v1282;
  int v1283;
  uint64_t v1284;
  uint64_t v1285;
  uint64_t v1286;
  int v1287;
  int v1288;
  uint64_t v1289;
  uint64_t v1290;
  uint64_t v1291;
  int v1292;
  int v1293;
  uint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  int v1297;
  uint64_t v1298;
  int v1299;
  int v1300;
  uint64_t v1301;
  int v1302;
  int v1303;
  uint64_t v1304;
  int v1305;
  int v1306;
  uint64_t v1307;
  int v1308;
  int v1309;
  uint64_t v1310;
  int v1311;
  int v1312;
  uint64_t v1313;
  int v1314;
  int v1315;
  uint64_t v1316;
  int v1317;
  int v1318;
  uint64_t v1319;
  int v1320;
  int v1321;
  uint64_t v1322;
  int v1323;
  int v1324;
  uint64_t v1325;
  int v1326;
  int v1327;
  uint64_t v1328;
  int v1329;
  int v1330;
  uint64_t v1331;
  int v1332;
  int v1333;
  uint64_t v1334;
  int v1335;
  int v1336;
  uint64_t v1337;
  int v1338;
  int v1339;
  uint64_t v1340;
  int v1341;
  BOOL v1342;
  int v1343;
  int v1344;
  int v1345;
  int v1346;
  int v1347;
  int v1348;
  int v1349;
  int v1350;
  int v1351;
  int v1352;
  int v1353;
  int v1354;
  int v1355;
  int v1356;
  int v1357;
  int v1358;
  int v1359;
  int v1360;
  int v1361;
  int v1362;
  int v1363;
  int v1364;
  int v1365;
  int v1366;
  int v1367;
  int v1368;
  int v1369;
  int v1370;
  int v1371;
  int v1372;
  int v1373;
  int v1374;
  int v1375;
  int v1376;
  int v1377;
  int v1378;
  int v1379;
  int v1380;
  int v1381;
  int v1382;
  int v1383;
  int v1384;
  int v1385;
  int v1386;
  int v1387;
  int v1388;
  uint64_t v1389;
  uint64_t v1390;
  uint64_t v1391;
  int v1392;
  int v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  int v1397;
  int v1398;
  uint64_t v1399;
  uint64_t v1400;
  uint64_t v1401;
  int v1402;
  int v1403;
  int v1404;
  int v1405;
  uint64_t v1406;
  uint64_t v1407;
  uint64_t v1408;
  uint64_t v1409;
  int v1410;
  int v1411;
  uint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  uint64_t v1415;
  int v1416;
  int v1417;
  uint64_t v1418;
  uint64_t v1419;
  uint64_t v1420;
  uint64_t v1421;
  int v1422;
  int v1423;
  uint64_t v1424;
  uint64_t v1425;
  uint64_t v1426;
  uint64_t v1427;
  uint64_t v1428;
  int v1429;
  int v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  int v1436;
  int v1437;
  int v1438;
  uint64_t v1439;
  uint64_t v1440;
  uint64_t v1441;
  uint64_t v1442;
  uint64_t v1443;
  int v1444;
  int v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t result;
  int v1451;
  int v1452;
  uint64_t v1453;
  uint64_t v1454;
  uint64_t v1455;
  uint64_t v1456;
  uint64_t v1457;
  int v1458;
  int v1459;
  uint64_t v1460;
  uint64_t v1461;
  uint64_t v1462;
  int v1463;
  uint64_t v1464;
  uint64_t v1465;
  int v1466;
  int v1467;
  uint64_t v1468;
  uint64_t v1469;
  uint64_t v1470;
  uint64_t v1471;
  uint64_t v1472;
  int v1473;
  int v1474;
  uint64_t v1475;
  uint64_t v1476;
  uint64_t v1477;
  uint64_t v1478;
  uint64_t v1479;
  int v1480;
  int v1481;
  uint64_t v1482;
  uint64_t v1483;
  uint64_t v1484;
  uint64_t v1485;
  uint64_t v1486;
  int v1487;
  int v1488;
  uint64_t v1489;
  uint64_t v1490;
  uint64_t v1491;
  uint64_t v1492;
  uint64_t v1493;
  int v1494;
  int v1495;
  uint64_t v1496;
  uint64_t v1497;
  uint64_t v1498;
  uint64_t v1499;
  uint64_t v1500;
  int v1501;
  int v1502;
  uint64_t v1503;
  uint64_t v1504;
  uint64_t v1505;
  uint64_t v1506;
  uint64_t v1507;
  int v1508;
  int v1509;
  uint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  int v1515;
  int v1516;
  uint64_t v1517;
  uint64_t v1518;
  uint64_t v1519;
  uint64_t v1520;
  uint64_t v1521;
  int v1522;
  int v1523;
  uint64_t v1524;
  uint64_t v1525;
  uint64_t v1526;
  uint64_t v1527;
  int v1528;
  int v1529;
  uint64_t v1530;
  uint64_t v1531;
  uint64_t v1532;
  int v1533;
  int v1534;
  uint64_t v1535;
  uint64_t v1536;
  uint64_t v1537;
  int v1538;
  int v1539;
  uint64_t v1540;
  uint64_t v1541;
  uint64_t v1542;
  int v1543;
  int v1544;
  uint64_t v1545;
  uint64_t v1546;
  uint64_t v1547;
  int v1548;
  int v1549;
  uint64_t v1550;
  uint64_t v1551;
  uint64_t v1552;
  int v1553;
  int v1554;
  uint64_t v1555;
  uint64_t v1556;
  uint64_t v1557;
  int v1558;
  int v1559;
  uint64_t v1560;
  uint64_t v1561;
  uint64_t v1562;
  int v1563;
  int v1564;
  uint64_t v1565;
  uint64_t v1566;
  uint64_t v1567;
  int v1568;
  int v1569;
  uint64_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  int v1573;
  int v1574;
  uint64_t v1575;
  uint64_t v1576;
  uint64_t v1577;
  int v1578;
  int v1579;
  uint64_t v1580;
  uint64_t v1581;
  uint64_t v1582;
  int v1583;
  int v1584;
  uint64_t v1585;
  uint64_t v1586;
  uint64_t v1587;
  int v1588;
  int v1589;
  uint64_t v1590;
  uint64_t v1591;
  uint64_t v1592;
  int v1593;
  int v1594;
  uint64_t v1595;
  uint64_t v1596;
  uint64_t v1597;
  int v1598;
  int v1599;
  uint64_t v1600;
  uint64_t v1601;
  uint64_t v1602;
  int v1603;
  int v1604;
  uint64_t v1605;
  uint64_t v1606;
  uint64_t v1607;
  int v1608;
  int v1609;
  uint64_t v1610;
  uint64_t v1611;
  uint64_t v1612;
  int v1613;
  int v1614;
  uint64_t v1615;
  uint64_t v1616;
  uint64_t v1617;
  int v1618;
  int v1619;
  uint64_t v1620;
  uint64_t v1621;
  uint64_t v1622;
  int v1623;
  int v1624;
  uint64_t v1625;
  uint64_t v1626;
  uint64_t v1627;
  int v1628;
  int v1629;
  uint64_t v1630;
  uint64_t v1631;
  uint64_t v1632;
  int v1633;
  int v1634;
  uint64_t v1635;
  uint64_t v1636;
  uint64_t v1637;
  int v1638;
  int v1639;
  uint64_t v1640;
  uint64_t v1641;
  uint64_t v1642;
  int v1643;
  int v1644;
  uint64_t v1645;
  uint64_t v1646;
  uint64_t v1647;
  int v1648;
  int v1649;
  uint64_t v1650;
  uint64_t v1651;
  uint64_t v1652;
  int v1653;
  int v1654;
  uint64_t v1655;
  uint64_t v1656;
  uint64_t v1657;
  int v1658;
  int v1659;
  uint64_t v1660;
  uint64_t v1661;
  uint64_t v1662;
  int v1663;
  int v1664;
  uint64_t v1665;
  uint64_t v1666;
  uint64_t v1667;
  int v1668;
  int v1669;
  uint64_t v1670;
  uint64_t v1671;
  uint64_t v1672;
  int v1673;
  int v1674;
  uint64_t v1675;
  uint64_t v1676;
  uint64_t v1677;
  int v1678;
  int v1679;
  uint64_t v1680;
  uint64_t v1681;
  uint64_t v1682;
  int v1683;
  int v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  int v1688;
  int v1689;
  uint64_t v1690;
  uint64_t v1691;
  uint64_t v1692;
  int v1693;
  int v1694;
  uint64_t v1695;
  uint64_t v1696;
  uint64_t v1697;
  int v1698;
  int v1699;
  uint64_t v1700;
  uint64_t v1701;
  uint64_t v1702;
  int v1703;
  int v1704;
  uint64_t v1705;
  uint64_t v1706;
  uint64_t v1707;
  int v1708;
  int v1709;
  uint64_t v1710;
  uint64_t v1711;
  uint64_t v1712;
  int v1713;
  int v1714;
  uint64_t v1715;
  uint64_t v1716;
  uint64_t v1717;
  int v1718;
  int v1719;
  uint64_t v1720;
  uint64_t v1721;
  uint64_t v1722;
  int v1723;
  int v1724;
  uint64_t v1725;
  uint64_t v1726;
  uint64_t v1727;
  int v1728;
  int v1729;
  uint64_t v1730;
  uint64_t v1731;
  uint64_t v1732;
  int v1733;
  int v1734;
  uint64_t v1735;
  uint64_t v1736;
  uint64_t v1737;
  int v1738;
  int v1739;
  uint64_t v1740;
  uint64_t v1741;
  uint64_t v1742;
  uint64_t v1743;
  uint64_t v1744;
  uint64_t v1745;
  uint64_t v1746;
  int v1747;
  int v1748;
  int v1749;
  int v1750;
  int v1751;
  int v1752;
  int v1753;
  int v1754;
  int v1755;
  int v1756;
  int v1757;
  int v1758;
  int v1759;
  int v1760;
  int v1761;
  int v1762;
  int v1763;
  int v1764;
  int v1765;
  int v1766;
  int v1767;
  int v1768;
  int v1769;
  int v1770;
  int v1771;
  int v1772;
  int v1773;
  int v1774;
  uint64_t v1775;
  int v1776;
  uint64_t v1777;
  int v1778;
  int v1779;
  int v1780;
  uint64_t v1781;
  int v1782;
  uint64_t v1783;
  int v1784;
  int v1785;
  uint64_t v1786;
  uint64_t v1787;
  int v1788;
  uint64_t v1789;
  int v1790;
  uint64_t v1791;
  int v1792;
  uint64_t v1793;
  uint64_t v1794;
  int v1795;
  int v1796;
  int v1797;
  uint64_t v1798;
  uint64_t v1799;
  uint64_t v1800;
  uint64_t v1801;
  uint64_t v1802;
  uint64_t v1803;
  int v1804;
  uint64_t v1805;
  uint64_t v1806;
  uint64_t v1807;
  uint64_t v1808;
  uint64_t v1809;
  uint64_t v1810;
  int v1811;
  uint64_t v1812;
  int v1813;
  int v1814;
  uint64_t v1815;
  uint64_t v1816;
  uint64_t v1817;
  uint64_t v1818;
  uint64_t v1819;
  int v1820;
  uint64_t v1821;
  uint64_t v1822;
  uint64_t v1823;
  uint64_t v1824;
  uint64_t v1825;
  int v1826;
  int v1827;
  uint64_t v1828;
  int v1829;
  int v1830;
  int v1831;
  uint64_t v1832;
  int v1833;
  int v1834;
  uint64_t v1835;
  int v1836;
  int v1837;
  int v1838;
  int v1839;
  int v1840;
  int v1841;
  int v1842;
  int v1843;
  uint64_t v1844;
  int v1845;
  int v1846;
  int v1847;
  int v1848;
  int v1849;
  int v1850;
  int v1851;
  int v1852;
  int v1853;
  int v1854;
  int v1855;
  int v1856;
  int v1857;
  int v1858;
  int v1859;
  int v1860;
  int v1861;
  int v1862;
  int v1863;
  int v1864;
  int v1865;
  int v1866;
  int v1867;
  int v1868;
  int v1869;
  int v1870;
  int v1871;
  int v1872;
  int v1873;
  int v1874;
  int v1875;
  int v1876;
  int v1877;
  int v1878;
  int v1879;
  int v1880;
  int v1881;
  int v1882;
  int v1883;
  int v1884;
  int v1885;
  int v1886;
  int v1887;
  int v1888;
  int v1889;
  int v1890;
  int v1891;
  uint64_t v1892;
  int v1893;
  int v1894;
  int v1895;
  int v1896;
  uint64_t v1897;
  int v1898;
  int v1899;
  int v1900;
  int v1901;
  uint64_t v1902;
  int v1903;
  int v1904;
  int v1905;
  int v1906;
  int v1907;
  int v1908;
  int v1909;
  int v1910;
  int v1911;
  int v1912;
  int v1913;
  int v1914;
  int v1915;
  int v1916;
  int v1917;
  int v1918;
  uint64_t v1919;
  int v1920;
  int v1921;
  int v1922;
  int v1923;
  int v1924;
  uint64_t v1925;
  int v1926;
  int v1927;
  int v1928;
  int v1929;
  int v1930;
  int v1931;
  int v1932;
  int v1933;
  int v1934;
  int v1935;
  int v1936;
  int v1937;
  int v1938;
  int v1939;
  int v1940;
  int v1941;
  int v1942;
  int v1943;
  int v1944;
  int v1945;
  int v1946;
  int v1947;
  int v1948;
  int v1949;
  int v1950;
  int v1951;
  int v1952;
  int v1953;
  int v1954;
  int v1955;
  int v1956;
  int v1957;
  int v1958;
  int v1959;
  int v1960;
  int v1961;
  int v1962;
  int v1963;
  int v1964;
  int v1965;
  int v1966;
  int v1967;
  int v1968;
  int v1969;
  int v1970;
  int v1971;
  int v1972;
  int v1973;
  int v1974;
  int v1975;
  int v1976;
  int v1977;
  int v1978;
  int v1979;
  int v1980;
  int v1981;
  int v1982;
  int v1983;
  int v1984;
  int v1985;
  int v1986;
  int v1987;
  int v1988;
  int v1989;
  int v1990;
  int v1991;
  int v1992;
  int v1993;
  int v1994;
  int v1995;
  int v1996;
  int v1997;
  int v1998;
  int v1999;
  int v2000;
  int v2001;
  int v2002;
  int v2003;
  int v2004;
  int v2005;
  int v2006;
  int v2007;
  int v2008;
  int v2009;
  int v2010;
  int v2011;
  int v2012;
  int v2013;
  int v2014;
  int v2015;
  int v2016;
  int v2017;
  int v2018;
  int v2019;
  int v2020;
  int v2021;
  int v2022;
  int v2023;
  int v2024;
  int v2025;
  int v2026;
  int v2027;
  int v2028;
  int v2029;
  int v2030;
  int v2031;
  int v2032;
  int v2033;
  int v2034;
  int v2035;
  int v2036;
  int v2037;
  int v2038;
  int v2039;
  int v2040;
  int v2041;
  int v2042;
  int v2043;
  int v2044;
  int v2045;
  int v2046;
  int v2047;
  int v2048;
  int v2049;
  int v2050;
  int v2051;
  int v2052;
  int v2053;
  int v2054;
  int v2055;
  int v2056;
  int v2057;
  int v2058;
  int v2059;
  int v2060;
  int v2061;
  int v2062;
  int v2063;
  int v2064;
  int v2065;
  int v2066;
  int v2067;
  int v2068;
  int v2069;
  int v2070;
  int v2071;
  int v2072;
  int v2073;
  int v2074;
  int v2075;
  int v2076;
  int v2077;
  int v2078;
  int v2079;
  int v2080;
  int v2081;
  int v2082;
  int v2083;
  int v2084;
  int v2085;
  int v2086;
  int v2087;
  int v2088;
  int v2089;
  int v2090;
  int v2091;
  int v2092;
  int v2093;
  int v2094;
  int v2095;
  int v2096;
  int v2097;
  int v2098;
  int v2099;
  int v2100;
  int v2101;
  int v2102;
  int v2103;
  int v2104;
  int v2105;
  int v2106;
  int v2107;
  int v2108;
  int v2109;
  int v2110;
  int v2111;
  int v2112;
  int v2113;
  int v2114;
  int v2115;
  int v2116;
  int v2117;
  int v2118;
  int v2119;
  int v2120;
  int v2121;
  int v2122;
  int v2123;
  int v2124;
  int v2125;
  int v2126;
  int v2127;
  int v2128;
  int v2129;
  _DWORD *v2130;
  int v2131;
  int v2132;
  uint64_t v2133;
  int v2134;

  v4 = a3;
  v5 = &av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v2134 = *a1;
  *a2 = *a1;
  v6 = a1[32];
  a2[1] = v6;
  v2122 = a1[16];
  a2[2] = v2122;
  v2118 = a1[48];
  a2[3] = v2118;
  v2126 = a1[8];
  a2[4] = v2126;
  v7 = a1[40];
  a2[5] = v7;
  v8 = a1[24];
  a2[6] = v8;
  v9 = a1[56];
  a2[7] = v9;
  v10 = a1[4];
  a2[8] = v10;
  v11 = a1[36];
  a2[9] = v11;
  v12 = a1[20];
  a2[10] = v12;
  v13 = a1[52];
  a2[11] = v13;
  v14 = a1[12];
  a2[12] = v14;
  v15 = a1[44];
  a2[13] = v15;
  v16 = a1[28];
  a2[14] = v16;
  v17 = a1[60];
  a2[15] = v17;
  v2078 = a1[2];
  a2[16] = v2078;
  v1856 = a1[34];
  a2[17] = v1856;
  v1865 = a1[18];
  a2[18] = v1865;
  v1878 = a1[50];
  a2[19] = v1878;
  v1888 = a1[10];
  a2[20] = v1888;
  v1893 = a1[42];
  a2[21] = v1893;
  v2050 = a1[26];
  a2[22] = v2050;
  v2073 = a1[58];
  a2[23] = v2073;
  v18 = 1 << (a3 - 1);
  v19 = a1[6];
  a2[24] = v19;
  v1796 = a1[38];
  a2[25] = v1796;
  v1785 = a1[22];
  a2[26] = v1785;
  v1779 = a1[54];
  a2[27] = v1779;
  v1776 = a1[14];
  a2[28] = v1776;
  v1774 = a1[46];
  a2[29] = v1774;
  v20 = a1[30];
  a2[30] = v20;
  v21 = a1[62];
  a2[31] = v21;
  v22 = a1[1];
  a2[32] = v22;
  v23 = a1[33];
  a2[33] = v23;
  v24 = a1[17];
  a2[34] = v24;
  v25 = a1[49];
  a2[35] = v25;
  v2110 = a1[9];
  a2[36] = v2110;
  v2106 = a1[41];
  a2[37] = v2106;
  v2086 = a1[25];
  a2[38] = v2086;
  v2082 = a1[57];
  a2[39] = v2082;
  v1756 = a1[5];
  a2[40] = v1756;
  v2018 = a1[37];
  a2[41] = v2018;
  v1983 = a1[21];
  a2[42] = v1983;
  v1978 = a1[53];
  a2[43] = v1978;
  v2005 = a1[13];
  a2[44] = v2005;
  v1955 = a1[45];
  a2[45] = v1955;
  v1753 = a1[29];
  a2[46] = v1753;
  v1926 = a1[61];
  a2[47] = v1926;
  v1752 = a1[3];
  a2[48] = v1752;
  v2040 = a1[35];
  a2[49] = v2040;
  v2035 = a1[19];
  a2[50] = v2035;
  v1941 = a1[51];
  a2[51] = v1941;
  v1754 = a1[11];
  a2[52] = v1754;
  v1996 = a1[43];
  a2[53] = v1996;
  v1755 = a1[27];
  a2[54] = v1755;
  v1988 = a1[59];
  a2[55] = v1988;
  v2028 = a1[7];
  a2[56] = v2028;
  v2023 = a1[39];
  a2[57] = v2023;
  v1751 = a1[23];
  a2[58] = v1751;
  v2093 = a1[55];
  a2[59] = v2093;
  v26 = a1[15];
  a2[60] = v26;
  v27 = a1[47];
  a2[61] = v27;
  v28 = a1[31];
  a2[62] = v28;
  v29 = a1[63];
  a2[63] = v29;
  v1772 = v22;
  v1764 = v5[63];
  v1765 = v29;
  v1768 = v5[1];
  v1822 = v18 + v1764 * v22 + -(v29 * v1768);
  v1770 = v23;
  v1763 = v5[31];
  v1766 = v28;
  v1767 = v5[33];
  v1816 = v18 + v1763 * v23 + -(v28 * v1767);
  v1852 = v24;
  v1758 = v5[47];
  v1759 = v27;
  v1762 = v5[17];
  v1839 = v25;
  v1757 = v5[15];
  v1760 = v26;
  v1761 = v5[49];
  v1801 = v18 + v1757 * v25 + -(v26 * v1761);
  v2059 = v5[55];
  v2102 = v5[9];
  v2055 = v5[23];
  v2098 = v5[41];
  v2014 = v5[39];
  v2045 = v5[25];
  v2010 = v5[7];
  v2032 = v5[57];
  v1973 = v5[59];
  v2001 = v5[5];
  v1969 = v5[27];
  v1992 = v5[37];
  v1951 = v5[43];
  v1964 = v5[21];
  v1946 = v5[11];
  v1959 = v5[53];
  v1920 = v5[51];
  v1936 = v5[13];
  v1915 = v5[19];
  v1931 = v5[45];
  v1903 = v5[35];
  v1911 = v5[29];
  v1898 = v5[3];
  v1907 = v5[61];
  *a2 = v2134;
  a2[1] = v6;
  v2089 = v6;
  a2[2] = v2122;
  a2[3] = v2118;
  a2[4] = v2126;
  a2[5] = v7;
  v1870 = v7;
  v1843 = v8;
  a2[6] = v8;
  a2[7] = v9;
  v1874 = v9;
  v2114 = v10;
  a2[8] = v10;
  a2[9] = v11;
  v2068 = v11;
  v1861 = v12;
  a2[10] = v12;
  a2[11] = v13;
  v1848 = v13;
  v1831 = v14;
  a2[12] = v14;
  a2[13] = v15;
  v1827 = v15;
  v1883 = v16;
  a2[14] = v16;
  a2[15] = v17;
  v2064 = v17;
  v1750 = v5[62];
  v30 = v5[2];
  v1791 = (v18 + v1750 * v2078 + -(v21 * v30)) >> v4;
  a2[16] = v1791;
  v1748 = v5[30];
  v1749 = v30;
  v31 = v5[34];
  v1835 = (v18 + v1748 * v1856 + -(v20 * v31)) >> v4;
  a2[17] = v1835;
  v1747 = v5[46];
  v32 = v5[18];
  v1746 = (v18 + v1747 * v1865 + -(v1774 * v32)) >> v4;
  a2[18] = v1746;
  v33 = v5[14];
  v34 = v5[50];
  v1745 = (v18 + v33 * v1878 + -(v1776 * v34)) >> v4;
  a2[19] = v1745;
  v35 = v5[54];
  v36 = v5[10];
  v1744 = (v18 + v35 * v1888 + -(v1779 * v36)) >> v4;
  a2[20] = v1744;
  v37 = v5[22];
  v38 = v5[42];
  v1743 = (v18 + v37 * v1893 + -(v1785 * v38)) >> v4;
  a2[21] = v1743;
  v39 = v5[38];
  v40 = v5[26];
  v1810 = (v18 + v39 * v2050 + -(v1796 * v40)) >> v4;
  a2[22] = v1810;
  v41 = v5[6];
  v2130 = v5;
  v42 = v5[58];
  v43 = v18 + v41 * v2073 + -(v19 * v42);
  v44 = v18 + v41 * v19 + v42 * v2073;
  v45 = v18 + v39 * v1796 + v40 * v2050;
  v46 = v18 + v37 * v1785 + v38 * v1893;
  v47 = v18 + v35 * v1779 + v36 * v1888;
  v48 = v18 + v33 * v1776 + v34 * v1878;
  v49 = v18 + v1747 * v1774 + v32 * v1865;
  v50 = v18 + v1748 * v20 + v31 * v1856;
  v51 = v1822 >> v4;
  v52 = v1816 >> v4;
  v53 = (v18 + v1758 * v24 + -(v27 * v1762)) >> v4;
  v54 = v1801 >> v4;
  v55 = v44 >> v4;
  a2[23] = v43 >> v4;
  a2[24] = v55;
  v56 = v46 >> v4;
  v1775 = v43 >> v4;
  v1777 = v45 >> v4;
  a2[25] = v45 >> v4;
  a2[26] = v56;
  v1797 = v56;
  v1780 = v55;
  v1786 = v47 >> v4;
  a2[27] = v47 >> v4;
  a2[28] = v48 >> v4;
  v1806 = v48 >> v4;
  v1802 = v49 >> v4;
  a2[29] = v49 >> v4;
  a2[30] = v50 >> v4;
  v1823 = v50 >> v4;
  v1817 = (v18 + v1750 * v21 + v1749 * v2078) >> v4;
  a2[31] = v1817;
  v57 = v52 + v51;
  v58 = a4[3];
  if (v58 >= 1)
  {
    v59 = 1 << (v58 - 1);
    v60 = v59 - 1;
    v61 = -v59;
    if (v57 < v60)
      LODWORD(v60) = v52 + v51;
    if (v57 >= v61)
      v57 = v60;
    else
      v57 = v61;
  }
  a2[32] = v57;
  v62 = v51 - v52;
  v63 = a4[3];
  v1879 = v57;
  if (v63 >= 1)
  {
    v64 = 1 << (v63 - 1);
    v65 = v64 - 1;
    v66 = -v64;
    if (v62 < v65)
      LODWORD(v65) = v62;
    if (v62 >= v66)
      v62 = v65;
    else
      v62 = v66;
  }
  v67 = (v18 + v2059 * v2110 + -(v2093 * v2102)) >> v4;
  v68 = (v18 + v2055 * v2106 + -(v1751 * v2098)) >> v4;
  v2079 = v62;
  a2[33] = v62;
  v69 = v54 - v53;
  v70 = a4[3];
  if (v70 >= 1)
  {
    v71 = 1 << (v70 - 1);
    v72 = v71 - 1;
    v73 = -v71;
    if (v69 < v72)
      LODWORD(v72) = v54 - v53;
    if (v69 >= v73)
      v69 = v72;
    else
      v69 = v73;
  }
  a2[34] = v69;
  v74 = v54 + v53;
  v75 = a4[3];
  if (v75 >= 1)
  {
    v76 = 1 << (v75 - 1);
    v77 = v76 - 1;
    v78 = -v76;
    if (v74 < v77)
      LODWORD(v77) = v74;
    if (v74 >= v78)
      v74 = v77;
    else
      v74 = v78;
  }
  v79 = (v18 + v2014 * v2086 + -(v2023 * v2045)) >> v4;
  v80 = (v18 + v2010 * v2082 + -(v2028 * v2032)) >> v4;
  a2[35] = v74;
  v81 = v68 + v67;
  v82 = a4[3];
  v2074 = v69;
  if (v82 >= 1)
  {
    v83 = 1 << (v82 - 1);
    v84 = v83 - 1;
    v85 = -v83;
    if (v81 < v84)
      LODWORD(v84) = v68 + v67;
    if (v81 >= v85)
      v81 = v84;
    else
      v81 = v85;
  }
  a2[36] = v81;
  v86 = v67 - v68;
  v87 = a4[3];
  if (v87 >= 1)
  {
    v88 = 1 << (v87 - 1);
    v89 = v88 - 1;
    v90 = -v88;
    if (v86 < v89)
      LODWORD(v89) = v86;
    if (v86 >= v90)
      v86 = v89;
    else
      v86 = v90;
  }
  v91 = (v18 + v1973 * v1756 + -(v1988 * v2001)) >> v4;
  v92 = (v18 + v1969 * v2018 + -(v1755 * v1992)) >> v4;
  a2[37] = v86;
  v93 = v80 - v79;
  v94 = a4[3];
  if (v94 >= 1)
  {
    v95 = 1 << (v94 - 1);
    v96 = v95 - 1;
    v97 = -v95;
    if (v93 < v96)
      LODWORD(v96) = v80 - v79;
    if (v93 >= v97)
      v93 = v96;
    else
      v93 = v97;
  }
  a2[38] = v93;
  v98 = v80 + v79;
  v99 = a4[3];
  if (v99 >= 1)
  {
    v100 = 1 << (v99 - 1);
    v101 = v100 - 1;
    v102 = -v100;
    if (v98 < v101)
      LODWORD(v101) = v98;
    if (v98 >= v102)
      v98 = v101;
    else
      v98 = v102;
  }
  v103 = (v18 + v1951 * v1983 + -(v1996 * v1964)) >> v4;
  v104 = (v18 + v1946 * v1978 + -(v1754 * v1959)) >> v4;
  a2[39] = v98;
  v105 = v92 + v91;
  v106 = a4[3];
  v2051 = v98;
  if (v106 >= 1)
  {
    v107 = 1 << (v106 - 1);
    v108 = v107 - 1;
    v109 = -v107;
    if (v105 < v108)
      LODWORD(v108) = v92 + v91;
    if (v105 >= v109)
      v105 = v108;
    else
      v105 = v109;
  }
  a2[40] = v105;
  v110 = v91 - v92;
  v111 = a4[3];
  if (v111 >= 1)
  {
    v112 = 1 << (v111 - 1);
    v113 = v112 - 1;
    v114 = -v112;
    if (v110 < v113)
      LODWORD(v113) = v110;
    if (v110 >= v114)
      v110 = v113;
    else
      v110 = v114;
  }
  v115 = (v18 + v1920 * v2005 + -(v1941 * v1936)) >> v4;
  v116 = (v18 + v1915 * v1955 + -(v2035 * v1931)) >> v4;
  a2[41] = v110;
  v117 = v104 - v103;
  v118 = a4[3];
  if (v118 >= 1)
  {
    v119 = 1 << (v118 - 1);
    v120 = v119 - 1;
    v121 = -v119;
    if (v117 < v120)
      LODWORD(v120) = v104 - v103;
    if (v117 >= v121)
      v117 = v120;
    else
      v117 = v121;
  }
  a2[42] = v117;
  v122 = v104 + v103;
  v123 = a4[3];
  if (v123 >= 1)
  {
    v124 = 1 << (v123 - 1);
    v125 = v124 - 1;
    v126 = -v124;
    if (v122 < v125)
      LODWORD(v125) = v122;
    if (v122 >= v126)
      v122 = v125;
    else
      v122 = v126;
  }
  v127 = (v18 + v1903 * v1753 + -(v2040 * v1911)) >> v4;
  v128 = (v18 + v1898 * v1926 + -(v1752 * v1907)) >> v4;
  a2[43] = v122;
  v129 = v116 + v115;
  v130 = a4[3];
  if (v130 >= 1)
  {
    v131 = 1 << (v130 - 1);
    v132 = v131 - 1;
    v133 = -v131;
    if (v129 < v132)
      LODWORD(v132) = v116 + v115;
    if (v129 >= v133)
      v129 = v132;
    else
      v129 = v133;
  }
  v134 = v1915 * v2035;
  v135 = v18 + v1903 * v2040 + v1911 * v1753;
  a2[44] = v129;
  v136 = v115 - v116;
  v137 = a4[3];
  v2041 = v122;
  if (v137 >= 1)
  {
    v138 = 1 << (v137 - 1);
    v139 = v138 - 1;
    v140 = -v138;
    if (v136 < v139)
      LODWORD(v139) = v136;
    if (v136 >= v140)
      v136 = v139;
    else
      v136 = v140;
  }
  v141 = v1936 * v2005;
  v142 = (v18 + v1898 * v1752 + v1907 * v1926) >> v4;
  v143 = v135 >> v4;
  a2[45] = v136;
  v144 = v128 - v127;
  v145 = a4[3];
  v2036 = v136;
  if (v145 >= 1)
  {
    v146 = 1 << (v145 - 1);
    v147 = v146 - 1;
    v148 = -v146;
    if (v144 < v147)
      LODWORD(v147) = v128 - v127;
    if (v144 >= v148)
      v144 = v147;
    else
      v144 = v148;
  }
  a2[46] = v144;
  v149 = v128 + v127;
  v150 = a4[3];
  v1857 = v74;
  v2006 = v144;
  if (v150 >= 1)
  {
    v151 = 1 << (v150 - 1);
    v152 = v151 - 1;
    v153 = -v151;
    if (v149 < v152)
      LODWORD(v152) = v149;
    if (v149 >= v153)
      v149 = v152;
    else
      v149 = v153;
  }
  v154 = (v18 + v134 + v1931 * v1955) >> v4;
  v155 = (v18 + v1920 * v1941 + v141) >> v4;
  a2[47] = v149;
  v156 = v142 + v143;
  v157 = a4[3];
  if (v157 >= 1)
  {
    v158 = 1 << (v157 - 1);
    v159 = v158 - 1;
    v160 = -v158;
    if (v156 < v159)
      LODWORD(v159) = v142 + v143;
    if (v156 >= v160)
      v156 = v159;
    else
      v156 = v160;
  }
  a2[48] = v156;
  v161 = v142 - v143;
  v162 = a4[3];
  if (v162 >= 1)
  {
    v163 = 1 << (v162 - 1);
    v164 = v163 - 1;
    v165 = -v163;
    if (v161 < v164)
      LODWORD(v164) = v161;
    if (v161 >= v165)
      v161 = v164;
    else
      v161 = v165;
  }
  v166 = (v18 + v1946 * v1754 + v1959 * v1978) >> v4;
  v167 = (v18 + v1951 * v1996 + v1964 * v1983) >> v4;
  a2[49] = v161;
  v168 = v155 - v154;
  v169 = a4[3];
  if (v169 >= 1)
  {
    v170 = 1 << (v169 - 1);
    v171 = v170 - 1;
    v172 = -v170;
    if (v168 < v171)
      LODWORD(v171) = v155 - v154;
    if (v168 >= v172)
      v168 = v171;
    else
      v168 = v172;
  }
  a2[50] = v168;
  v173 = v154 + v155;
  v174 = a4[3];
  v1997 = v149;
  if (v174 < 1)
  {
    LODWORD(v176) = v173;
  }
  else
  {
    v175 = 1 << (v174 - 1);
    v176 = v175 - 1;
    v177 = -v175;
    if (v173 < v176)
      LODWORD(v176) = v173;
    if (v173 < v177)
      LODWORD(v176) = v177;
  }
  v178 = v2045 * v2086;
  v179 = (v18 + v1969 * v1755 + v1992 * v2018) >> v4;
  v180 = (v18 + v1973 * v1988 + v2001 * v1756) >> v4;
  v2046 = v176;
  a2[51] = v176;
  v181 = v166 + v167;
  v182 = a4[3];
  if (v182 >= 1)
  {
    v183 = 1 << (v182 - 1);
    v184 = v183 - 1;
    v185 = -v183;
    if (v181 < v184)
      LODWORD(v184) = v166 + v167;
    if (v181 >= v185)
      v181 = v184;
    else
      v181 = v185;
  }
  a2[52] = v181;
  v186 = v166 - v167;
  v187 = a4[3];
  if (v187 >= 1)
  {
    v188 = 1 << (v187 - 1);
    v189 = v188 - 1;
    v190 = -v188;
    if (v186 < v189)
      LODWORD(v189) = v186;
    if (v186 >= v190)
      v186 = v189;
    else
      v186 = v190;
  }
  v191 = (v18 + v2010 * v2028 + v2032 * v2082) >> v4;
  v192 = (v18 + v2014 * v2023 + v178) >> v4;
  a2[53] = v186;
  LODWORD(v193) = v180 - v179;
  v194 = a4[3];
  v1979 = v161;
  if (v194 >= 1)
  {
    v195 = 1 << (v194 - 1);
    v193 = v195 - 1;
    v196 = -v195;
    if ((int)v180 - (int)v179 < v193)
      LODWORD(v193) = v180 - v179;
    if ((int)v180 - (int)v179 < v196)
      LODWORD(v193) = v196;
  }
  v1947 = v193;
  a2[54] = v193;
  v197 = v179 + v180;
  v198 = a4[3];
  if (v198 >= 1)
  {
    v199 = 1 << (v198 - 1);
    v200 = v199 - 1;
    v201 = -v199;
    if (v197 < v200)
      LODWORD(v200) = v197;
    if (v197 >= v201)
      v197 = v200;
    else
      v197 = v201;
  }
  v202 = v1761 * v1839;
  v203 = (v18 + v2055 * v1751 + v2098 * v2106) >> v4;
  v204 = (v18 + v2059 * v2093 + v2102 * v2110) >> v4;
  v1840 = v197;
  a2[55] = v197;
  v205 = v191 + v192;
  v206 = a4[3];
  if (v206 >= 1)
  {
    v207 = 1 << (v206 - 1);
    v208 = v207 - 1;
    v209 = -v207;
    if (v205 < v208)
      LODWORD(v208) = v191 + v192;
    if (v205 >= v209)
      v205 = v208;
    else
      v205 = v209;
  }
  a2[56] = v205;
  LODWORD(v210) = v191 - v192;
  v211 = a4[3];
  if (v211 >= 1)
  {
    v212 = v210;
    v213 = 1 << (v211 - 1);
    v210 = v213 - 1;
    v214 = -v213;
    if (v212 < v210)
      LODWORD(v210) = v212;
    if (v212 < v214)
      LODWORD(v210) = v214;
  }
  v215 = v1848;
  v216 = (v18 + v1757 * v1760 + v202) >> v4;
  v217 = (v18 + v1758 * v1759 + v1762 * v1852) >> v4;
  v1932 = v210;
  a2[57] = v210;
  v218 = v204 - v203;
  v219 = a4[3];
  if (v219 >= 1)
  {
    v220 = 1 << (v219 - 1);
    v221 = v220 - 1;
    v222 = -v220;
    if (v218 < v221)
      LODWORD(v221) = v204 - v203;
    if (v218 >= v222)
      v218 = v221;
    else
      v218 = v222;
  }
  a2[58] = v218;
  v223 = v203 + v204;
  v224 = a4[3];
  if (v224 >= 1)
  {
    v225 = 1 << (v224 - 1);
    v226 = v225 - 1;
    v227 = -v225;
    if (v223 < v226)
      LODWORD(v226) = v223;
    if (v223 >= v227)
      v223 = v226;
    else
      v223 = v227;
  }
  v228 = v1883;
  v229 = v1861;
  v230 = (v18 + v1763 * v1766 + v1767 * v1770) >> v4;
  v231 = (v18 + v1764 * v1765 + v1768 * v1772) >> v4;
  a2[59] = v223;
  v232 = v216 + v217;
  v233 = a4[3];
  if (v233 >= 1)
  {
    v234 = 1 << (v233 - 1);
    v235 = v234 - 1;
    v236 = -v234;
    if (v232 < v235)
      LODWORD(v235) = v216 + v217;
    if (v232 >= v236)
      v232 = v235;
    else
      v232 = v236;
  }
  a2[60] = v232;
  v237 = v216 - v217;
  v238 = a4[3];
  if (v238 >= 1)
  {
    v239 = 1 << (v238 - 1);
    v240 = v239 - 1;
    v241 = -v239;
    if (v237 < v240)
      LODWORD(v240) = v237;
    if (v237 >= v241)
      v237 = v240;
    else
      v237 = v241;
  }
  v242 = v4;
  v1908 = v237;
  a2[61] = v237;
  v243 = v231 - v230;
  v244 = a4[3];
  if (v244 >= 1)
  {
    v245 = 1 << (v244 - 1);
    v246 = v245 - 1;
    v247 = -v245;
    if (v243 < v246)
      LODWORD(v246) = v231 - v230;
    if (v243 >= v247)
      v243 = v246;
    else
      v243 = v247;
  }
  v1942 = v243;
  a2[62] = v243;
  v248 = v230 + v231;
  v249 = a4[3];
  v1894 = v86;
  v1866 = v105;
  v1904 = v129;
  v1916 = v156;
  v1921 = v218;
  v1849 = v232;
  v1853 = v205;
  v1965 = v186;
  if (v249 >= 1)
  {
    v250 = 1 << (v249 - 1);
    v251 = v250 - 1;
    v252 = -v250;
    if (v248 < v251)
      LODWORD(v251) = v230 + v231;
    if (v248 >= v252)
      v248 = v251;
    else
      v248 = v252;
  }
  v253 = v1835;
  v1862 = v181;
  v2019 = v81;
  v2024 = v117;
  v2060 = v110;
  a2[63] = v248;
  v2107 = v2130[60];
  v2111 = v2130[4];
  v254 = (v18 + v2107 * v2114 + -(v2111 * v2064)) >> v4;
  v2099 = v2130[28];
  v2103 = v2130[36];
  v255 = (v18 + v2099 * v2068 + -(v2103 * v1883)) >> v4;
  v256 = v2130[44];
  v257 = v2130[20];
  v258 = v18 + v256 * v229 + -(v257 * v1827);
  v259 = v2130[12];
  v2094 = v2130[52];
  v1937 = v256;
  v260 = v256 * v1827;
  v261 = v1835 + v1791;
  v262 = a4[4];
  v1899 = v223;
  v1889 = v93;
  v1836 = v248;
  v1974 = v168;
  if (v262 <= 0)
  {
    v2033 = v253 + v1791;
    v1960 = v1791 - v253;
    v1884 = v1745 - v1746;
    v278 = v1745 + v1746;
    v2002 = v1743 + v1744;
    v1773 = v1744 - v1743;
    v1792 = v1775 - v1810;
    v1989 = v1775 + v1810;
    v1984 = v1780 + v1777;
    v298 = v1780 - v1777;
    v301 = v1786 - v1797;
    v1956 = v1797 + v1786;
    v1970 = v1806 + v1802;
    v1811 = v1806 - v1802;
    v313 = v1817 - v1823;
    v315 = v1823 + v1817;
  }
  else
  {
    v263 = 1 << (v262 - 1);
    v264 = v263 - 1;
    v265 = -v263;
    v266 = v261;
    if (v261 >= v264)
      v261 = v264;
    if (v266 >= v265)
      v267 = v261;
    else
      v267 = v265;
    v2033 = v267;
    v268 = (int)v1791 - v253;
    if (v268 >= v264)
      v269 = v264;
    else
      v269 = v1791 - v253;
    if (v268 >= v265)
      v270 = v269;
    else
      v270 = v265;
    v1960 = v270;
    v271 = a2[18];
    v272 = a2[19];
    v273 = v272 - v271;
    if (v273 >= v264)
      v274 = v264;
    else
      v274 = v272 - v271;
    if (v273 >= v265)
      v275 = v274;
    else
      v275 = v265;
    v1884 = v275;
    v276 = v272 + v271;
    if (v276 >= v264)
      v277 = v264;
    else
      v277 = v276;
    if (v276 >= v265)
      v278 = v277;
    else
      v278 = v265;
    v279 = a2[20];
    v280 = a2[21];
    v281 = v280 + v279;
    if (v281 >= v264)
      v282 = v264;
    else
      v282 = v280 + v279;
    if (v281 >= v265)
      v283 = v282;
    else
      v283 = v265;
    v2002 = v283;
    v284 = v279 - v280;
    if (v284 >= v264)
      v285 = v264;
    else
      v285 = v284;
    if (v284 >= v265)
      v286 = v285;
    else
      v286 = v265;
    v1773 = v286;
    v287 = (int)v1775 - (int)v1810;
    if (v287 >= v264)
      v288 = v264;
    else
      v288 = v1775 - v1810;
    if (v287 >= v265)
      v289 = v288;
    else
      v289 = v265;
    v1792 = v289;
    v290 = (int)v1775 + (int)v1810;
    if (v290 >= v264)
      v291 = v264;
    else
      v291 = v1775 + v1810;
    if (v290 >= v265)
      v292 = v291;
    else
      v292 = v265;
    v1989 = v292;
    v293 = (int)v1777 + v1780;
    if (v293 >= v264)
      v294 = v264;
    else
      v294 = v1777 + v1780;
    if (v293 >= v265)
      v295 = v294;
    else
      v295 = v265;
    v1984 = v295;
    v296 = v1780 - (int)v1777;
    if (v296 >= v264)
      v297 = v264;
    else
      v297 = v1780 - v1777;
    if (v296 >= v265)
      v298 = v297;
    else
      v298 = v265;
    v299 = (int)v1786 - v1797;
    if (v299 >= v264)
      v300 = v264;
    else
      v300 = v1786 - v1797;
    if (v299 >= v265)
      v301 = v300;
    else
      v301 = v265;
    v302 = (int)v1786 + v1797;
    if (v302 >= v264)
      v303 = v264;
    else
      v303 = v1786 + v1797;
    if (v302 >= v265)
      v304 = v303;
    else
      v304 = v265;
    v1956 = v304;
    v305 = (int)v1802 + (int)v1806;
    if (v305 >= v264)
      v306 = v264;
    else
      v306 = v1802 + v1806;
    if (v305 >= v265)
      v307 = v306;
    else
      v307 = v265;
    v1970 = v307;
    v308 = (int)v1806 - (int)v1802;
    if (v308 >= v264)
      v309 = v264;
    else
      v309 = v1806 - v1802;
    if (v308 >= v265)
      v310 = v309;
    else
      v310 = v265;
    v1811 = v310;
    v311 = (int)v1817 - (int)v1823;
    if (v311 >= v264)
      v312 = v264;
    else
      v312 = v1817 - v1823;
    if (v311 >= v265)
      v313 = v312;
    else
      v313 = v265;
    v257 = v2130[20];
    if ((int)v1817 + (int)v1823 >= v264)
      v314 = v264;
    else
      v314 = v1817 + v1823;
    if ((int)v1817 + (int)v1823 >= v265)
      v315 = v314;
    else
      v315 = v265;
  }
  v1952 = v315;
  v1993 = v278;
  v316 = v18 + v259 * v1831;
  v317 = v257;
  v318 = v18 + v260;
  v319 = v258 >> v4;
  v320 = (v18 + v259 * v215 + -(v2094 * v1831)) >> v4;
  *a2 = v2134;
  a2[1] = v2089;
  a2[2] = v2122;
  a2[3] = v2118;
  v321 = v2130[56];
  v322 = v2130[8];
  v323 = v2126;
  v1828 = (v18 + v321 * v2126 + -(v322 * v1874)) >> v4;
  a2[4] = v1828;
  v324 = v2130[24];
  v2083 = v2130[40];
  v1824 = (v18 + v324 * v1870 + -(v2083 * v1843)) >> v4;
  a2[5] = v1824;
  a2[6] = (v18 + v324 * v1843 + v2083 * v1870) >> v4;
  v1844 = (v18 + v324 * v1843 + v2083 * v1870) >> v4;
  v2127 = v321;
  v1832 = (v18 + v321 * v1874 + v322 * v323) >> v4;
  a2[7] = v1832;
  v325 = v255 + v254;
  v326 = a4[5];
  if (v326 >= 1)
  {
    v327 = 1 << (v326 - 1);
    v328 = v327 - 1;
    v329 = -v327;
    if (v325 < v328)
      LODWORD(v328) = v255 + v254;
    if (v325 >= v329)
      v325 = v328;
    else
      v325 = v329;
  }
  v330 = v2099 * v228;
  v331 = v318 + v257 * v229;
  a2[8] = v325;
  v332 = v254 - v255;
  v333 = a4[5];
  v334 = v324;
  if (v333 >= 1)
  {
    v335 = 1 << (v333 - 1);
    v336 = v335 - 1;
    v337 = -v335;
    if (v332 < v336)
      LODWORD(v336) = v332;
    if (v332 >= v337)
      v332 = v336;
    else
      v332 = v337;
  }
  v338 = v2046;
  v339 = v18 + v330;
  v340 = (v316 + v2094 * v215) >> v4;
  v341 = v331 >> v4;
  v2011 = v332;
  a2[9] = v332;
  v342 = v320 - v319;
  v343 = a4[5];
  if (v343 >= 1)
  {
    v344 = 1 << (v343 - 1);
    v345 = v344 - 1;
    v346 = -v344;
    if (v342 < v345)
      LODWORD(v345) = v320 - v319;
    if (v342 >= v346)
      v342 = v345;
    else
      v342 = v346;
  }
  v2047 = v325;
  v347 = v339 + v2103 * v2068;
  a2[10] = v342;
  v348 = v320 + v319;
  v349 = a4[5];
  if (v349 >= 1)
  {
    v350 = 1 << (v349 - 1);
    v351 = v350 - 1;
    v352 = -v350;
    if (v348 < v351)
      LODWORD(v351) = v348;
    if (v348 >= v352)
      v348 = v351;
    else
      v348 = v352;
  }
  v353 = -v2111;
  v354 = v347 >> v4;
  v355 = (v18 + v2107 * v2064 + v2111 * v2114) >> v4;
  v1871 = v348;
  a2[11] = v348;
  v356 = v340 + v341;
  v357 = a4[5];
  if (v357 >= 1)
  {
    v358 = 1 << (v357 - 1);
    v359 = v358 - 1;
    v360 = -v358;
    if (v356 < v359)
      LODWORD(v359) = v340 + v341;
    if (v356 >= v360)
      v356 = v359;
    else
      v356 = v360;
  }
  v361 = v2079 * v353;
  v362 = v1908 * v353;
  a2[12] = v356;
  v363 = v340 - v341;
  v364 = a4[5];
  if (v364 >= 1)
  {
    v365 = 1 << (v364 - 1);
    v366 = v365 - 1;
    v367 = -v365;
    if (v363 < v366)
      LODWORD(v366) = v363;
    if (v363 >= v367)
      v363 = v366;
    else
      v363 = v367;
  }
  v368 = v18 + v2107 * v1942 + v361;
  v1912 = v363;
  a2[13] = v363;
  v369 = v355 - v354;
  v370 = a4[5];
  v2015 = v342;
  v1771 = v259;
  if (v370 >= 1)
  {
    v371 = 1 << (v370 - 1);
    v372 = v371 - 1;
    v373 = -v371;
    if (v369 < v372)
      LODWORD(v372) = v355 - v354;
    if (v369 >= v373)
      v369 = v372;
    else
      v369 = v373;
  }
  v2069 = v317;
  v374 = v368 >> v4;
  v375 = (v18 + -(v2074 * v2107) + v362) >> v4;
  v376 = -v322;
  v2056 = -v2083;
  a2[14] = v369;
  v377 = v354 + v355;
  v378 = a4[5];
  v1927 = v369;
  if (v378 >= 1)
  {
    v379 = 1 << (v378 - 1);
    v380 = v379 - 1;
    v381 = -v379;
    if (v377 < v380)
      LODWORD(v380) = v354 + v355;
    if (v377 >= v381)
      v377 = v380;
    else
      v377 = v381;
  }
  v382 = v18 + v2127 * v313 + v1960 * v376;
  v383 = v313;
  v384 = v1811;
  v385 = v1792;
  v386 = v18 + -(v334 * v1792) + v298 * v2056;
  v387 = v298;
  v388 = -v2103;
  v2029 = v377;
  a2[15] = v377;
  v1781 = (v18 + -(v2127 * v1884) + v1811 * v376) >> v4;
  v1787 = v382 >> v4;
  a2[16] = v2033;
  a2[17] = v382 >> v4;
  a2[18] = v1781;
  a2[19] = v1993;
  a2[20] = v2002;
  v1793 = v386 >> v4;
  v1798 = (v18 + v334 * v301 + v1773 * v2056) >> v4;
  a2[21] = v1798;
  a2[22] = v386 >> v4;
  a2[23] = v1989;
  a2[24] = v1984;
  v1803 = (v18 + v334 * v1773 + v2083 * v301) >> v4;
  v1807 = (v18 + v334 * v387 + v385 * v2056) >> v4;
  a2[25] = v1807;
  a2[26] = v1803;
  a2[27] = v1956;
  a2[28] = v1970;
  v2115 = -v322;
  v1812 = (v18 + v2127 * v1960 + v322 * v383) >> v4;
  v1818 = (v18 + v2127 * v384 + v1884 * v376) >> v4;
  a2[29] = v1818;
  a2[30] = v1812;
  a2[31] = v1952;
  v389 = v1857 + v1879;
  v390 = a4[5];
  if (v390 >= 1)
  {
    v391 = 1 << (v390 - 1);
    v392 = v391 - 1;
    v393 = -v391;
    if (v389 < v392)
      LODWORD(v392) = v1857 + v1879;
    if (v389 >= v393)
      v389 = v392;
    else
      v389 = v393;
  }
  v394 = v2060;
  v395 = v2024;
  v396 = v1894 * v388;
  v397 = v1932 * v388;
  a2[32] = v389;
  v398 = v374 + v375;
  v399 = a4[5];
  v400 = v356;
  v401 = v338;
  if (v399 >= 1)
  {
    v402 = 1 << (v399 - 1);
    v403 = v402 - 1;
    v404 = -v402;
    if (v398 < v403)
      LODWORD(v403) = v374 + v375;
    if (v398 >= v404)
      v398 = v403;
    else
      v398 = v404;
  }
  v405 = v2069;
  v406 = v18 + v2099 * v1921 + v396;
  a2[33] = v398;
  v407 = v374 - v375;
  v408 = a4[5];
  if (v408 >= 1)
  {
    v409 = 1 << (v408 - 1);
    v410 = v409 - 1;
    v411 = -v409;
    if (v407 < v410)
      LODWORD(v410) = v407;
    if (v407 >= v411)
      v407 = v410;
    else
      v407 = v411;
  }
  v412 = v406 >> v4;
  v413 = (v18 + -(v1889 * v2099) + v397) >> v4;
  a2[34] = v407;
  v414 = v1879 - v1857;
  v415 = a4[5];
  v2070 = v407;
  if (v415 >= 1)
  {
    v416 = 1 << (v415 - 1);
    v417 = v416 - 1;
    v418 = -v416;
    if (v414 < v417)
      LODWORD(v417) = v1879 - v1857;
    if (v414 >= v418)
      v414 = v417;
    else
      v414 = v418;
  }
  v419 = -v405;
  v2065 = v414;
  a2[35] = v414;
  v420 = v2051 - v2019;
  v421 = a4[5];
  if (v421 >= 1)
  {
    v422 = 1 << (v421 - 1);
    v423 = v422 - 1;
    v424 = -v422;
    if (v420 < v423)
      LODWORD(v423) = v2051 - v2019;
    if (v420 >= v424)
      v420 = v423;
    else
      v420 = v424;
  }
  v2061 = v420;
  a2[36] = v420;
  v425 = v413 - v412;
  v426 = a4[5];
  if (v426 >= 1)
  {
    v427 = 1 << (v426 - 1);
    v428 = v427 - 1;
    v429 = -v427;
    if (v425 < v428)
      LODWORD(v428) = v413 - v412;
    if (v425 >= v429)
      v425 = v428;
    else
      v425 = v429;
  }
  a2[37] = v425;
  v430 = v412 + v413;
  v431 = a4[5];
  if (v431 >= 1)
  {
    v432 = 1 << (v431 - 1);
    v433 = v432 - 1;
    v434 = -v432;
    if (v430 < v433)
      LODWORD(v433) = v430;
    if (v430 >= v434)
      v430 = v433;
    else
      v430 = v434;
  }
  v435 = (v18 + v1937 * v1947 + v394 * v419) >> v4;
  v436 = (v18 + -(v2024 * v1937) + v1965 * v419) >> v4;
  a2[38] = v430;
  v437 = v2051 + v2019;
  v438 = a4[5];
  v1875 = v398;
  v2020 = v430;
  if (v438 >= 1)
  {
    v439 = 1 << (v438 - 1);
    v440 = v439 - 1;
    v441 = -v439;
    if (v437 < v440)
      LODWORD(v440) = v437;
    if (v437 >= v441)
      v437 = v440;
    else
      v437 = v441;
  }
  v442 = -v2094;
  v2025 = v437;
  a2[39] = v437;
  v443 = v2041 + v1866;
  v444 = a4[5];
  if (v444 >= 1)
  {
    v445 = 1 << (v444 - 1);
    v446 = v445 - 1;
    v447 = -v445;
    if (v443 < v446)
      LODWORD(v446) = v2041 + v1866;
    if (v443 >= v447)
      v443 = v446;
    else
      v443 = v447;
  }
  v2052 = v425;
  a2[40] = v443;
  v448 = v435 + v436;
  v449 = a4[5];
  if (v449 >= 1)
  {
    v450 = 1 << (v449 - 1);
    v451 = v450 - 1;
    v452 = -v450;
    if (v448 < v451)
      LODWORD(v451) = v435 + v436;
    if (v448 >= v452)
      v448 = v451;
    else
      v448 = v452;
  }
  a2[41] = v448;
  v453 = v435 - v436;
  v454 = a4[5];
  if (v454 >= 1)
  {
    v455 = 1 << (v454 - 1);
    v456 = v455 - 1;
    v457 = -v455;
    if (v453 < v456)
      LODWORD(v456) = v453;
    if (v453 >= v457)
      v453 = v456;
    else
      v453 = v457;
  }
  v458 = (v18 + v1771 * v1974 + v2036 * v442) >> v4;
  v459 = (v18 + -(v2006 * v1771) + v1979 * v442) >> v4;
  a2[42] = v453;
  v460 = v1866 - v2041;
  v461 = a4[5];
  if (v461 >= 1)
  {
    v462 = 1 << (v461 - 1);
    v463 = v462 - 1;
    v464 = -v462;
    if (v460 < v463)
      LODWORD(v463) = v1866 - v2041;
    if (v460 >= v464)
      v460 = v463;
    else
      v460 = v464;
  }
  v2042 = v453;
  v465 = v1771 * v2036;
  a2[43] = v460;
  v466 = v1997 - v1904;
  v467 = a4[5];
  if (v467 >= 1)
  {
    v468 = 1 << (v467 - 1);
    v469 = v468 - 1;
    v470 = -v468;
    if (v466 < v469)
      LODWORD(v469) = v1997 - v1904;
    if (v466 >= v470)
      v466 = v469;
    else
      v466 = v470;
  }
  v2037 = v460;
  v471 = v2006 * v442;
  v472 = v18 + v465;
  a2[44] = v466;
  v473 = v459 - v458;
  v474 = a4[5];
  if (v474 >= 1)
  {
    v475 = 1 << (v474 - 1);
    v476 = v475 - 1;
    v477 = -v475;
    if (v473 < v476)
      LODWORD(v476) = v459 - v458;
    if (v473 >= v477)
      v473 = v476;
    else
      v473 = v477;
  }
  a2[45] = v473;
  v478 = v458 + v459;
  v479 = a4[5];
  if (v479 >= 1)
  {
    v480 = 1 << (v479 - 1);
    v481 = v480 - 1;
    v482 = -v480;
    if (v478 < v481)
      LODWORD(v481) = v478;
    if (v478 >= v482)
      v478 = v481;
    else
      v478 = v482;
  }
  v483 = (v18 + v1771 * v1979 + v471) >> v4;
  v484 = (v472 + v2094 * v1974) >> v4;
  v1961 = v478;
  a2[46] = v478;
  v485 = v1997 + v1904;
  v486 = a4[5];
  v2007 = v473;
  if (v486 >= 1)
  {
    v487 = 1 << (v486 - 1);
    v488 = v487 - 1;
    v489 = -v487;
    if (v485 < v488)
      LODWORD(v488) = v1997 + v1904;
    if (v485 >= v489)
      v485 = v488;
    else
      v485 = v489;
  }
  v1998 = v485;
  a2[47] = v485;
  v490 = v401 + v1916;
  v491 = a4[5];
  if (v491 >= 1)
  {
    v492 = 1 << (v491 - 1);
    v493 = v492 - 1;
    v494 = -v492;
    if (v490 < v493)
      LODWORD(v493) = v401 + v1916;
    if (v490 >= v494)
      v490 = v493;
    else
      v490 = v494;
  }
  v495 = v395 * v419;
  v496 = v405 * v1947;
  a2[48] = v490;
  v497 = v483 + v484;
  v498 = a4[5];
  if (v498 >= 1)
  {
    v499 = 1 << (v498 - 1);
    v500 = v499 - 1;
    v501 = -v499;
    if (v497 < v500)
      LODWORD(v500) = v483 + v484;
    if (v497 >= v501)
      v497 = v500;
    else
      v497 = v501;
  }
  a2[49] = v497;
  v502 = v483 - v484;
  v503 = a4[5];
  if (v503 >= 1)
  {
    v504 = 1 << (v503 - 1);
    v505 = v504 - 1;
    v506 = -v504;
    if (v502 < v505)
      LODWORD(v505) = v502;
    if (v502 >= v506)
      v502 = v505;
    else
      v502 = v506;
  }
  v507 = (v18 + v1937 * v1965 + v495) >> v4;
  v508 = (v18 + v1937 * v394 + v496) >> v4;
  v1938 = v502;
  a2[50] = v502;
  v509 = v1916 - v401;
  v510 = a4[5];
  if (v510 >= 1)
  {
    v511 = 1 << (v510 - 1);
    v512 = v511 - 1;
    v513 = -v511;
    if (v509 < v512)
      LODWORD(v512) = v1916 - v401;
    if (v509 >= v513)
      v509 = v512;
    else
      v509 = v513;
  }
  v1948 = v509;
  a2[51] = v509;
  v514 = v1840 - v1862;
  v515 = a4[5];
  if (v515 >= 1)
  {
    v516 = 1 << (v515 - 1);
    v517 = v516 - 1;
    v518 = -v516;
    if (v514 < v517)
      LODWORD(v517) = v1840 - v1862;
    if (v514 >= v518)
      v514 = v517;
    else
      v514 = v518;
  }
  v1917 = v514;
  a2[52] = v514;
  v519 = v508 - v507;
  v520 = a4[5];
  if (v520 >= 1)
  {
    v521 = 1 << (v520 - 1);
    v522 = v521 - 1;
    v523 = -v521;
    if (v519 < v522)
      LODWORD(v522) = v508 - v507;
    if (v519 >= v523)
      v519 = v522;
    else
      v519 = v523;
  }
  v524 = v1899;
  a2[53] = v519;
  v525 = v507 + v508;
  v526 = a4[5];
  v1905 = v519;
  if (v526 >= 1)
  {
    v527 = 1 << (v526 - 1);
    v528 = v527 - 1;
    v529 = -v527;
    if (v525 < v528)
      LODWORD(v528) = v525;
    if (v525 >= v529)
      v525 = v528;
    else
      v525 = v529;
  }
  v530 = (v18 + v2099 * v1932 + v1889 * -v2103) >> v4;
  v531 = (v18 + v2099 * v1894 + v2103 * v1921) >> v4;
  a2[54] = v525;
  v532 = v1840 + v1862;
  v533 = a4[5];
  if (v533 >= 1)
  {
    v534 = 1 << (v533 - 1);
    v535 = v534 - 1;
    v536 = -v534;
    if (v532 < v535)
      LODWORD(v535) = v1840 + v1862;
    if (v532 >= v536)
      v532 = v535;
    else
      v532 = v536;
  }
  a2[55] = v532;
  v537 = v1899 + v1853;
  v538 = a4[5];
  if (v538 >= 1)
  {
    v539 = 1 << (v538 - 1);
    v540 = v539 - 1;
    v541 = -v539;
    if (v537 < v540)
      LODWORD(v540) = v1899 + v1853;
    if (v537 >= v541)
      v537 = v540;
    else
      v537 = v541;
  }
  a2[56] = v537;
  v542 = v530 + v531;
  v543 = a4[5];
  if (v543 >= 1)
  {
    v544 = 1 << (v543 - 1);
    v545 = v544 - 1;
    v546 = -v544;
    if (v542 < v545)
      LODWORD(v545) = v530 + v531;
    v524 = v1899;
    if (v542 >= v546)
      v542 = v545;
    else
      v542 = v546;
  }
  a2[57] = v542;
  v547 = v530 - v531;
  v548 = a4[5];
  if (v548 >= 1)
  {
    v549 = 1 << (v548 - 1);
    v550 = v549 - 1;
    v551 = -v549;
    if (v547 < v550)
      LODWORD(v550) = v547;
    if (v547 >= v551)
      v547 = v550;
    else
      v547 = v551;
  }
  v552 = (v18 + v2107 * v1908 + v2074 * -v2111) >> v4;
  v553 = (v18 + v2107 * v2079 + v2111 * v1942) >> v4;
  a2[58] = v547;
  v554 = v1853 - v524;
  v555 = a4[5];
  if (v555 >= 1)
  {
    v556 = 1 << (v555 - 1);
    v557 = v556 - 1;
    v558 = -v556;
    if (v554 < v557)
      LODWORD(v557) = v1853 - v524;
    if (v554 >= v558)
      v554 = v557;
    else
      v554 = v558;
  }
  v1943 = v554;
  a2[59] = v554;
  v559 = v1836 - v1849;
  v560 = a4[5];
  if (v560 >= 1)
  {
    v561 = 1 << (v560 - 1);
    v562 = v561 - 1;
    v563 = -v561;
    if (v559 < v562)
      LODWORD(v562) = v1836 - v1849;
    if (v559 >= v563)
      v559 = v562;
    else
      v559 = v563;
  }
  v1922 = v559;
  a2[60] = v559;
  v564 = v553 - v552;
  v565 = a4[5];
  if (v565 >= 1)
  {
    v566 = 1 << (v565 - 1);
    v567 = v566 - 1;
    v568 = -v566;
    if (v564 < v567)
      LODWORD(v567) = v553 - v552;
    if (v564 >= v568)
      v564 = v567;
    else
      v564 = v568;
  }
  a2[61] = v564;
  v569 = v552 + v553;
  v570 = a4[5];
  if (v570 >= 1)
  {
    v571 = 1 << (v570 - 1);
    v572 = v571 - 1;
    v573 = -v571;
    if (v569 < v572)
      LODWORD(v572) = v569;
    if (v569 >= v573)
      v569 = v572;
    else
      v569 = v573;
  }
  a2[62] = v569;
  v574 = v1836 + v1849;
  v575 = a4[5];
  v1880 = v490;
  v1867 = v532;
  v1854 = v569;
  v1933 = v547;
  v1909 = v564;
  if (v575 >= 1)
  {
    v576 = 1 << (v575 - 1);
    v577 = v576 - 1;
    v578 = -v576;
    if (v574 < v577)
      LODWORD(v577) = v1836 + v1849;
    if (v574 >= v578)
      v574 = v577;
    else
      v574 = v578;
  }
  v1900 = v537;
  v1850 = v574;
  a2[63] = v574;
  v579 = v2130[32];
  v580 = v18 + v579 * v2134;
  v581 = (v580 + v579 * v2089) >> v4;
  v582 = v580 + -(v579 * v2089);
  v583 = v2130[48];
  v584 = v2130[16];
  v585 = v18 + v583 * v2122 + -(v584 * v2118);
  v2131 = v584;
  v586 = (v18 + v583 * v2118 + v584 * v2122) >> v4;
  v587 = v1824 + v1828;
  v588 = a4[6];
  if (v588 <= 0)
  {
    v595 = v1828 - v1824;
    v598 = v1832 - v1844;
    LODWORD(v591) = v1844 + v1832;
  }
  else
  {
    v589 = 1 << (v588 - 1);
    v590 = v589 - 1;
    v591 = -v589;
    if (v587 >= v590)
      v592 = v590;
    else
      v592 = v1824 + v1828;
    if (v587 >= v591)
      v587 = v592;
    else
      v587 = v591;
    v593 = (int)v1828 - (int)v1824;
    if (v593 >= v590)
      v594 = v590;
    else
      v594 = v1828 - v1824;
    if (v593 >= v591)
      v595 = v594;
    else
      v595 = v591;
    v596 = (int)v1832 - (int)v1844;
    if (v596 >= v590)
      v597 = v590;
    else
      v597 = v1832 - v1844;
    if (v596 >= v591)
      v598 = v597;
    else
      v598 = v591;
    v599 = (int)v1832 + (int)v1844;
    if (v599 < v590)
      LODWORD(v590) = v1832 + v1844;
    if (v599 >= v591)
      LODWORD(v591) = v590;
  }
  v1966 = v591;
  v2090 = v466;
  v1890 = v542;
  v1895 = v497;
  v2095 = v443;
  v600 = v582 >> v4;
  v601 = v585 >> v4;
  v602 = v2033 + v1993;
  v1858 = v525;
  if (v588 <= 0)
  {
    v2123 = v2033 + v1993;
    v2119 = v1787 + v1781;
    v2075 = v1787 - v1781;
    v1845 = v2033 - v1993;
    v1788 = v1989 - v2002;
    v1782 = v1793 - v1798;
    v1975 = v1798 + v1793;
    v1980 = v2002 + v1989;
    v1994 = v1984 + v1956;
    v1990 = v1807 + v1803;
    v637 = v1807 - v1803;
    v640 = v1984 - v1956;
    v642 = v1952 - v1970;
    v645 = v1812 - v1818;
    v1985 = v1818 + v1812;
    v651 = v1952 + v1970;
  }
  else
  {
    v603 = 1 << (v588 - 1);
    v604 = v603 - 1;
    v605 = -v603;
    v606 = v602;
    if (v602 >= v604)
      v602 = v604;
    if (v606 >= v605)
      v607 = v602;
    else
      v607 = v605;
    v2123 = v607;
    v608 = (int)v1787 + (int)v1781;
    if (v608 >= v604)
      v609 = v604;
    else
      v609 = v1787 + v1781;
    if (v608 >= v605)
      v610 = v609;
    else
      v610 = v605;
    v2119 = v610;
    v611 = (int)v1787 - (int)v1781;
    if (v611 >= v604)
      v612 = v604;
    else
      v612 = v1787 - v1781;
    if (v611 >= v605)
      v613 = v612;
    else
      v613 = v605;
    v2075 = v613;
    v614 = v2033 - v1993;
    if (v614 >= v604)
      v615 = v604;
    else
      v615 = v2033 - v1993;
    if (v614 >= v605)
      v616 = v615;
    else
      v616 = v605;
    v1845 = v616;
    v617 = v1989 - v2002;
    if (v617 >= v604)
      v618 = v604;
    else
      v618 = v1989 - v2002;
    if (v617 >= v605)
      v619 = v618;
    else
      v619 = v605;
    v1788 = v619;
    v620 = (int)v1793 - (int)v1798;
    if (v620 >= v604)
      v621 = v604;
    else
      v621 = v1793 - v1798;
    if (v620 >= v605)
      v622 = v621;
    else
      v622 = v605;
    v1782 = v622;
    v623 = (int)v1798 + (int)v1793;
    if (v623 >= v604)
      v624 = v604;
    else
      v624 = v1798 + v1793;
    if (v623 >= v605)
      v625 = v624;
    else
      v625 = v605;
    v1975 = v625;
    v626 = v1989 + v2002;
    if (v626 >= v604)
      v627 = v604;
    else
      v627 = v1989 + v2002;
    if (v626 >= v605)
      v628 = v627;
    else
      v628 = v605;
    v1980 = v628;
    v629 = v1956 + v1984;
    if (v629 >= v604)
      v630 = v604;
    else
      v630 = v1956 + v1984;
    if (v629 >= v605)
      v631 = v630;
    else
      v631 = v605;
    v1994 = v631;
    v632 = (int)v1807 + (int)v1803;
    if (v632 >= v604)
      v633 = v604;
    else
      v633 = v1807 + v1803;
    if (v632 >= v605)
      v634 = v633;
    else
      v634 = v605;
    v1990 = v634;
    v635 = (int)v1807 - (int)v1803;
    if (v635 >= v604)
      v636 = v604;
    else
      v636 = v1807 - v1803;
    if (v635 >= v605)
      v637 = v636;
    else
      v637 = v605;
    v638 = v1984 - v1956;
    if (v638 >= v604)
      v639 = v604;
    else
      v639 = v1984 - v1956;
    if (v638 >= v605)
      v640 = v639;
    else
      v640 = v605;
    v641 = v1952 - v1970;
    if (v641 >= v604)
      v642 = v604;
    else
      v642 = v1952 - v1970;
    if (v641 < v605)
      v642 = v605;
    v643 = (int)v1812 - (int)v1818;
    if (v643 >= v604)
      v644 = v604;
    else
      v644 = v1812 - v1818;
    if (v643 >= v605)
      v645 = v644;
    else
      v645 = v605;
    v646 = (int)v1818 + (int)v1812;
    if (v646 >= v604)
      v647 = v604;
    else
      v647 = v1818 + v1812;
    if (v646 >= v605)
      v648 = v647;
    else
      v648 = v605;
    v1985 = v648;
    v649 = v1952 + v1970;
    if (v649 >= v604)
      v650 = v604;
    else
      v650 = v1952 + v1970;
    if (v649 >= v605)
      v651 = v650;
    else
      v651 = v605;
  }
  v1971 = v651;
  v652 = -v2131;
  v653 = v586 + v581;
  v654 = a4[7];
  v2133 = v18;
  v1885 = v389;
  if (v654 >= 1)
  {
    v655 = 1 << (v654 - 1);
    v656 = v655 - 1;
    v657 = -v655;
    if (v653 < v656)
      LODWORD(v656) = v586 + v581;
    if (v653 >= v657)
      v653 = v656;
    else
      v653 = v657;
  }
  v658 = v18 + v583 * v1927;
  v659 = v18 + -(v583 * v2015);
  v1841 = v653;
  *a2 = v653;
  v660 = v601 + v600;
  v661 = a4[7];
  if (v661 >= 1)
  {
    v662 = 1 << (v661 - 1);
    v663 = v662 - 1;
    v664 = -v662;
    if (v660 < v663)
      LODWORD(v663) = v601 + v600;
    if (v660 >= v664)
      v660 = v663;
    else
      v660 = v664;
  }
  v665 = v659 + v1912 * v652;
  a2[1] = v660;
  v666 = v600 - v601;
  v667 = a4[7];
  if (v667 >= 1)
  {
    v668 = 1 << (v667 - 1);
    v669 = v668 - 1;
    v670 = -v668;
    if (v666 < v669)
      LODWORD(v669) = v666;
    if (v666 >= v670)
      v666 = v669;
    else
      v666 = v670;
  }
  v671 = (v658 + v2011 * v652) >> v4;
  v672 = v665 >> v4;
  a2[2] = v666;
  v673 = v581 - v586;
  v674 = a4[7];
  v1833 = v666;
  v1837 = v660;
  if (v674 >= 1)
  {
    v675 = 1 << (v674 - 1);
    v676 = v675 - 1;
    v677 = -v675;
    if (v673 < v676)
      LODWORD(v676) = v673;
    if (v673 >= v677)
      v673 = v676;
    else
      v673 = v677;
  }
  v1829 = v673;
  a2[3] = v673;
  a2[4] = v587;
  v678 = v2133 + v598 * v579;
  v1819 = (v678 + v595 * -v579) >> v4;
  v1825 = (v678 + v595 * v579) >> v4;
  a2[5] = v1819;
  a2[6] = v1825;
  a2[7] = v1966;
  v679 = v1871 + v2047;
  v680 = a4[7];
  v1863 = v587;
  if (v680 >= 1)
  {
    v681 = 1 << (v680 - 1);
    v682 = v681 - 1;
    v683 = -v681;
    if (v679 < v682)
      LODWORD(v682) = v1871 + v2047;
    if (v679 >= v683)
      v679 = v682;
    else
      v679 = v683;
  }
  v2108 = v679;
  a2[8] = v679;
  v684 = v671 + v672;
  v685 = a4[7];
  if (v685 >= 1)
  {
    v686 = 1 << (v685 - 1);
    v687 = v686 - 1;
    v688 = -v686;
    if (v684 < v687)
      LODWORD(v687) = v671 + v672;
    if (v684 >= v688)
      v684 = v687;
    else
      v684 = v688;
  }
  a2[9] = v684;
  v689 = v671 - v672;
  v690 = a4[7];
  if (v690 >= 1)
  {
    v691 = 1 << (v690 - 1);
    v692 = v691 - 1;
    v693 = -v691;
    if (v689 < v692)
      LODWORD(v692) = v689;
    if (v689 >= v693)
      v689 = v692;
    else
      v689 = v693;
  }
  v694 = (v2133 + v583 * v1912 + v2015 * v652) >> v4;
  v695 = (v2133 + v583 * v2011 + v2131 * v1927) >> v4;
  a2[10] = v689;
  v696 = v2047 - v1871;
  v697 = a4[7];
  if (v697 >= 1)
  {
    v698 = 1 << (v697 - 1);
    v699 = v698 - 1;
    v700 = -v698;
    if (v696 < v699)
      LODWORD(v699) = v2047 - v1871;
    if (v696 >= v700)
      v696 = v699;
    else
      v696 = v700;
  }
  v1928 = v689;
  v701 = -v2127;
  a2[11] = v696;
  v702 = v2029 - v400;
  v703 = a4[7];
  if (v703 >= 1)
  {
    v704 = 1 << (v703 - 1);
    v705 = v704 - 1;
    v706 = -v704;
    if (v702 < v705)
      LODWORD(v705) = v2029 - v400;
    if (v702 >= v706)
      v702 = v705;
    else
      v702 = v706;
  }
  v707 = v2052 * v701;
  v1813 = v702;
  a2[12] = v702;
  v708 = v695 - v694;
  v709 = a4[7];
  v1913 = v696;
  if (v709 >= 1)
  {
    v710 = 1 << (v709 - 1);
    v711 = v710 - 1;
    v712 = -v710;
    if (v708 < v711)
      LODWORD(v711) = v695 - v694;
    if (v708 >= v712)
      v708 = v711;
    else
      v708 = v712;
  }
  v713 = v2061 * v701;
  v714 = v2133 + v707;
  v1804 = v708;
  a2[13] = v708;
  v715 = v694 + v695;
  v716 = a4[7];
  if (v716 >= 1)
  {
    v717 = 1 << (v716 - 1);
    v718 = v717 - 1;
    v719 = -v717;
    if (v715 < v718)
      LODWORD(v718) = v715;
    if (v715 >= v719)
      v715 = v718;
    else
      v715 = v719;
  }
  v2104 = v684;
  v720 = v2133 + v713;
  v721 = v714 + v1933 * v2115;
  v722 = -v583;
  v2100 = v715;
  a2[14] = v715;
  v723 = v2029 + v400;
  v724 = a4[7];
  v2034 = -v579;
  if (v724 >= 1)
  {
    v725 = 1 << (v724 - 1);
    v726 = v725 - 1;
    v727 = -v725;
    if (v723 < v726)
      LODWORD(v726) = v723;
    if (v723 >= v727)
      v723 = v726;
    else
      v723 = v727;
  }
  v728 = v2133 + v645 * v583 + v2075 * v652;
  v729 = v2133 + v640 * v652 + v1788 * v722;
  v2112 = -v583;
  v730 = v2133 + v637 * v652 + v1782 * v722;
  v731 = v2133 + v637 * v583 + v1782 * v652;
  v732 = v2133 + v640 * v583 + v1788 * v652;
  v733 = v2133 + v645 * v2131 + v2075 * v583;
  v2003 = v723;
  a2[15] = v723;
  a2[16] = v2123;
  a2[17] = v2119;
  a2[18] = v728 >> v4;
  v1783 = v728 >> v4;
  v734 = (v2133 + v642 * v583 + v1845 * v652) >> v4;
  v735 = v729 >> v4;
  a2[19] = v734;
  a2[20] = v729 >> v4;
  v736 = v730 >> v4;
  a2[21] = v730 >> v4;
  a2[22] = v1975;
  a2[23] = v1980;
  a2[24] = v1994;
  a2[25] = v1990;
  a2[26] = v731 >> v4;
  v1808 = v731 >> v4;
  v1789 = (v2133 + v642 * v2131 + v1845 * v583) >> v4;
  v1794 = v732 >> v4;
  a2[27] = v732 >> v4;
  a2[28] = v1789;
  v737 = v720 + v1943 * v2115;
  v1799 = v733 >> v4;
  a2[29] = v733 >> v4;
  a2[30] = v1985;
  a2[31] = v1971;
  v738 = v2025 + v1885;
  v739 = a4[7];
  v740 = (v2133 + v2070 * v2115 + v1909 * v2127) >> v4;
  v741 = v721 >> v4;
  if (v739 >= 1)
  {
    v742 = 1 << (v739 - 1);
    v743 = v742 - 1;
    v744 = -v742;
    if (v738 < v743)
      LODWORD(v743) = v2025 + v1885;
    if (v738 >= v744)
      v738 = v743;
    else
      v738 = v744;
  }
  v745 = v2083;
  v746 = -v2083;
  v747 = v2095;
  v748 = (v2133 + v2065 * v2115 + v1922 * v2127) >> v4;
  v749 = v737 >> v4;
  a2[32] = v738;
  v750 = v2020 + v1875;
  v751 = a4[7];
  if (v751 >= 1)
  {
    v752 = 1 << (v751 - 1);
    v753 = v752 - 1;
    v754 = -v752;
    if (v750 < v753)
      LODWORD(v753) = v2020 + v1875;
    if (v750 >= v754)
      v750 = v753;
    else
      v750 = v754;
  }
  v2096 = v750;
  a2[33] = v750;
  v755 = v740 + v741;
  v756 = a4[7];
  if (v756 >= 1)
  {
    v757 = 1 << (v756 - 1);
    v758 = v757 - 1;
    v759 = -v757;
    if (v755 < v758)
      LODWORD(v758) = v740 + v741;
    if (v755 >= v759)
      v755 = v758;
    else
      v755 = v759;
  }
  v2076 = v755;
  a2[34] = v755;
  v760 = v748 + v749;
  v761 = a4[7];
  if (v761 >= 1)
  {
    v762 = 1 << (v761 - 1);
    v763 = v762 - 1;
    v764 = -v762;
    if (v760 < v763)
      LODWORD(v763) = v748 + v749;
    if (v760 >= v764)
      v760 = v763;
    else
      v760 = v764;
  }
  v765 = -v334;
  v2030 = v760;
  a2[35] = v760;
  v766 = v748 - v749;
  v767 = a4[7];
  if (v767 >= 1)
  {
    v768 = 1 << (v767 - 1);
    v769 = v768 - 1;
    v770 = -v768;
    if (v766 < v769)
      LODWORD(v769) = v766;
    if (v766 >= v770)
      v766 = v769;
    else
      v766 = v770;
  }
  v2057 = v766;
  a2[36] = v766;
  v771 = v740 - v741;
  v772 = a4[7];
  v2084 = v738;
  if (v772 >= 1)
  {
    v773 = 1 << (v772 - 1);
    v774 = v773 - 1;
    v775 = -v773;
    if (v771 < v774)
      LODWORD(v774) = v771;
    if (v771 >= v775)
      v771 = v774;
    else
      v771 = v775;
  }
  v2048 = v771;
  a2[37] = v771;
  v776 = v1875 - v2020;
  v777 = a4[7];
  if (v777 >= 1)
  {
    v778 = 1 << (v777 - 1);
    v779 = v778 - 1;
    v780 = -v778;
    if (v776 < v779)
      LODWORD(v779) = v1875 - v2020;
    if (v776 >= v780)
      v776 = v779;
    else
      v776 = v780;
  }
  v781 = v2133 + v2090 * v765;
  a2[38] = v776;
  v782 = v1885 - v2025;
  v783 = a4[7];
  if (v783 >= 1)
  {
    v784 = 1 << (v783 - 1);
    v785 = v784 - 1;
    v786 = -v784;
    if (v782 < v785)
      LODWORD(v785) = v1885 - v2025;
    if (v782 >= v786)
      v782 = v785;
    else
      v782 = v786;
  }
  v787 = (v2133 + v2042 * v746 + v1905 * v334) >> v4;
  v788 = (v2133 + v2007 * v765 + v1938 * v746) >> v4;
  v2080 = v782;
  a2[39] = v782;
  v789 = v1998 - v747;
  v790 = a4[7];
  if (v790 >= 1)
  {
    v791 = 1 << (v790 - 1);
    v792 = v791 - 1;
    v793 = -v791;
    if (v789 < v792)
      LODWORD(v792) = v1998 - v747;
    if (v789 >= v793)
      v789 = v792;
    else
      v789 = v793;
  }
  v794 = (v2133 + v2037 * v746 + v1917 * v334) >> v4;
  v795 = (v781 + v1948 * v746) >> v4;
  a2[40] = v789;
  v796 = v1961 - v448;
  v797 = a4[7];
  if (v797 >= 1)
  {
    v798 = 1 << (v797 - 1);
    v799 = v798 - 1;
    v800 = -v798;
    if (v796 < v799)
      LODWORD(v799) = v1961 - v448;
    if (v796 >= v800)
      v796 = v799;
    else
      v796 = v800;
  }
  v2021 = v796;
  a2[41] = v796;
  v801 = v788 - v787;
  v802 = a4[7];
  if (v802 >= 1)
  {
    v803 = 1 << (v802 - 1);
    v804 = v803 - 1;
    v805 = -v803;
    if (v801 < v804)
      LODWORD(v804) = v788 - v787;
    if (v801 >= v805)
      v801 = v804;
    else
      v801 = v805;
  }
  v2016 = v801;
  a2[42] = v801;
  v806 = v795 - v794;
  v807 = a4[7];
  if (v807 >= 1)
  {
    v808 = 1 << (v807 - 1);
    v809 = v808 - 1;
    v810 = -v808;
    if (v806 < v809)
      LODWORD(v809) = v795 - v794;
    if (v806 >= v810)
      v806 = v809;
    else
      v806 = v810;
  }
  a2[43] = v806;
  v811 = v794 + v795;
  v812 = a4[7];
  v1846 = v789;
  if (v812 >= 1)
  {
    v813 = 1 << (v812 - 1);
    v814 = v813 - 1;
    v815 = -v813;
    if (v811 < v814)
      LODWORD(v814) = v811;
    if (v811 >= v815)
      v811 = v814;
    else
      v811 = v815;
  }
  v2012 = v806;
  v816 = v2042 * v334;
  a2[44] = v811;
  v817 = v787 + v788;
  v818 = a4[7];
  if (v818 >= 1)
  {
    v819 = 1 << (v818 - 1);
    v820 = v819 - 1;
    v821 = -v819;
    if (v817 < v820)
      LODWORD(v820) = v787 + v788;
    if (v817 >= v821)
      v817 = v820;
    else
      v817 = v821;
  }
  v2043 = v776;
  v822 = v2037 * v334;
  v823 = v1938 * v334;
  v824 = v2133 + v2007 * v746;
  v825 = v2133 + v816;
  v2008 = v817;
  a2[45] = v817;
  v826 = v1961 + v448;
  v827 = a4[7];
  if (v827 >= 1)
  {
    v828 = 1 << (v827 - 1);
    v829 = v828 - 1;
    v830 = -v828;
    if (v826 < v829)
      LODWORD(v829) = v1961 + v448;
    if (v826 >= v830)
      v826 = v829;
    else
      v826 = v830;
  }
  v1886 = v811;
  v831 = v1948 * v334;
  v832 = v2133 + v822;
  v833 = v824 + v823;
  v834 = v825 + v1905 * v745;
  a2[46] = v826;
  v835 = v1998 + v747;
  v836 = a4[7];
  if (v836 >= 1)
  {
    v837 = 1 << (v836 - 1);
    v838 = v837 - 1;
    v839 = -v837;
    if (v835 < v838)
      LODWORD(v838) = v1998 + v747;
    if (v835 >= v839)
      v835 = v838;
    else
      v835 = v839;
  }
  v840 = v2133 + v2090 * v746 + v831;
  v841 = v833 >> v4;
  v842 = v834 >> v4;
  v1999 = v835;
  a2[47] = v835;
  v843 = v1867 + v1880;
  v844 = a4[7];
  if (v844 >= 1)
  {
    v845 = 1 << (v844 - 1);
    v846 = v845 - 1;
    v847 = -v845;
    if (v843 < v846)
      LODWORD(v846) = v1867 + v1880;
    if (v843 >= v847)
      v843 = v846;
    else
      v843 = v847;
  }
  v848 = v840 >> v4;
  v849 = (v832 + v1917 * v745) >> v4;
  a2[48] = v843;
  v850 = v1858 + v1895;
  v851 = a4[7];
  if (v851 >= 1)
  {
    v852 = 1 << (v851 - 1);
    v853 = v852 - 1;
    v854 = -v852;
    if (v850 < v853)
      LODWORD(v853) = v1858 + v1895;
    if (v850 >= v854)
      v850 = v853;
    else
      v850 = v854;
  }
  v2087 = v850;
  a2[49] = v850;
  v855 = v842 + v841;
  v856 = a4[7];
  if (v856 >= 1)
  {
    v857 = 1 << (v856 - 1);
    v858 = v857 - 1;
    v859 = -v857;
    if (v855 < v858)
      LODWORD(v858) = v842 + v841;
    if (v855 >= v859)
      v855 = v858;
    else
      v855 = v859;
  }
  v2038 = v855;
  a2[50] = v855;
  v860 = v849 + v848;
  v861 = a4[7];
  if (v861 >= 1)
  {
    v862 = 1 << (v861 - 1);
    v863 = v862 - 1;
    v864 = -v862;
    if (v860 < v863)
      LODWORD(v863) = v849 + v848;
    if (v860 >= v864)
      v860 = v863;
    else
      v860 = v864;
  }
  a2[51] = v860;
  v865 = v848 - v849;
  v866 = a4[7];
  if (v866 >= 1)
  {
    v867 = 1 << (v866 - 1);
    v868 = v867 - 1;
    v869 = -v867;
    if (v865 < v868)
      LODWORD(v868) = v865;
    if (v865 >= v869)
      v865 = v868;
    else
      v865 = v869;
  }
  v2026 = v860;
  a2[52] = v865;
  v870 = v841 - v842;
  v871 = a4[7];
  v2091 = v843;
  if (v871 >= 1)
  {
    v872 = 1 << (v871 - 1);
    v873 = v872 - 1;
    v874 = -v872;
    if (v870 < v873)
      LODWORD(v873) = v870;
    if (v870 >= v874)
      v870 = v873;
    else
      v870 = v874;
  }
  v1953 = v870;
  a2[53] = v870;
  v875 = v1895 - v1858;
  v876 = a4[7];
  if (v876 >= 1)
  {
    v877 = 1 << (v876 - 1);
    v878 = v877 - 1;
    v879 = -v877;
    if (v875 < v878)
      LODWORD(v878) = v1895 - v1858;
    if (v875 >= v879)
      v875 = v878;
    else
      v875 = v879;
  }
  a2[54] = v875;
  v880 = v1880 - v1867;
  v881 = a4[7];
  if (v881 >= 1)
  {
    v882 = 1 << (v881 - 1);
    v883 = v882 - 1;
    v884 = -v882;
    if (v880 < v883)
      LODWORD(v883) = v1880 - v1867;
    if (v880 >= v884)
      v880 = v883;
    else
      v880 = v884;
  }
  v885 = (v2133 + v2052 * v2115 + v1933 * v2127) >> v4;
  v886 = (v2133 + v2070 * v2127 + v1909 * v2087) >> v4;
  v1962 = v880;
  a2[55] = v880;
  v887 = v1850 - v1900;
  v888 = a4[7];
  if (v888 >= 1)
  {
    v889 = 1 << (v888 - 1);
    v890 = v889 - 1;
    v891 = -v889;
    if (v887 < v890)
      LODWORD(v890) = v1850 - v1900;
    if (v887 >= v891)
      v887 = v890;
    else
      v887 = v891;
  }
  v892 = (v2133 + v2061 * v2115 + v1943 * v2127) >> v4;
  v893 = (v2133 + v2065 * v2127 + v1922 * v2087) >> v4;
  v1949 = v887;
  a2[56] = v887;
  v894 = v1854 - v1890;
  v895 = a4[7];
  if (v895 >= 1)
  {
    v896 = 1 << (v895 - 1);
    v897 = v896 - 1;
    v898 = -v896;
    if (v894 < v897)
      LODWORD(v897) = v1854 - v1890;
    if (v894 >= v898)
      v894 = v897;
    else
      v894 = v898;
  }
  v1944 = v894;
  a2[57] = v894;
  v899 = v886 - v885;
  v900 = a4[7];
  if (v900 >= 1)
  {
    v901 = 1 << (v900 - 1);
    v902 = v901 - 1;
    v903 = -v901;
    if (v899 < v902)
      LODWORD(v902) = v886 - v885;
    if (v899 >= v903)
      v899 = v902;
    else
      v899 = v903;
  }
  v1939 = v899;
  a2[58] = v899;
  v904 = v893 - v892;
  v905 = a4[7];
  if (v905 >= 1)
  {
    v906 = 1 << (v905 - 1);
    v907 = v906 - 1;
    v908 = -v906;
    if (v904 < v907)
      LODWORD(v907) = v893 - v892;
    if (v904 >= v908)
      v904 = v907;
    else
      v904 = v908;
  }
  a2[59] = v904;
  v909 = v893 + v892;
  v910 = a4[7];
  if (v910 >= 1)
  {
    v911 = 1 << (v910 - 1);
    v912 = v911 - 1;
    v913 = -v911;
    if (v909 < v912)
      LODWORD(v912) = v909;
    if (v909 >= v913)
      v909 = v912;
    else
      v909 = v913;
  }
  a2[60] = v909;
  v914 = v886 + v885;
  v915 = a4[7];
  v1934 = v904;
  if (v915 >= 1)
  {
    v916 = 1 << (v915 - 1);
    v917 = v916 - 1;
    v918 = -v916;
    if (v914 < v917)
      LODWORD(v917) = v914;
    if (v914 >= v918)
      v914 = v917;
    else
      v914 = v918;
  }
  a2[61] = v914;
  v919 = v1854 + v1890;
  v920 = a4[7];
  if (v920 >= 1)
  {
    v921 = 1 << (v920 - 1);
    v922 = v921 - 1;
    v923 = -v921;
    if (v919 < v922)
      LODWORD(v922) = v1854 + v1890;
    if (v919 >= v923)
      v919 = v922;
    else
      v919 = v923;
  }
  a2[62] = v919;
  v924 = v1850 + v1900;
  v925 = a4[7];
  if (v925 >= 1)
  {
    v926 = 1 << (v925 - 1);
    v927 = v926 - 1;
    v928 = -v926;
    if (v924 < v927)
      LODWORD(v927) = v1850 + v1900;
    if (v924 >= v928)
      v924 = v927;
    else
      v924 = v928;
  }
  v2066 = v924;
  a2[63] = v924;
  v929 = v1841 + v1966;
  v930 = a4[8];
  v1868 = v914;
  v1872 = v909;
  v2071 = v919;
  v1957 = v875;
  if (v930 <= 0)
  {
    v1891 = v1841 + v1966;
    v1778 = v1837 + v1825;
    v1923 = v1833 + v1819;
    v944 = v1829 + v1863;
    v946 = v1829 - v1863;
    v949 = v1833 - v1819;
    v952 = v1837 - v1825;
    v954 = v1841 - v1966;
  }
  else
  {
    v931 = 1 << (v930 - 1);
    v932 = v931 - 1;
    v933 = -v931;
    if (v929 >= v932)
      v934 = v932;
    else
      v934 = v1841 + v1966;
    if (v929 >= v933)
      v935 = v934;
    else
      v935 = v933;
    v1891 = v935;
    v936 = v1837 + (int)v1825;
    if (v936 >= v932)
      v937 = v932;
    else
      v937 = v1837 + v1825;
    if (v936 >= v933)
      v938 = v937;
    else
      v938 = v933;
    v1778 = v938;
    v939 = v1833 + (int)v1819;
    if (v939 >= v932)
      v940 = v932;
    else
      v940 = v1833 + v1819;
    if (v939 >= v933)
      v941 = v940;
    else
      v941 = v933;
    v1923 = v941;
    v942 = v1829 + v1863;
    if (v942 >= v932)
      v943 = v932;
    else
      v943 = v1829 + v1863;
    if (v942 >= v933)
      v944 = v943;
    else
      v944 = v933;
    v945 = v1829 - v1863;
    if (v945 >= v932)
      v946 = v932;
    else
      v946 = v1829 - v1863;
    if (v945 < v933)
      v946 = v933;
    v947 = v1833 - (int)v1819;
    if (v947 >= v932)
      v948 = v932;
    else
      v948 = v1833 - v1819;
    if (v947 >= v933)
      v949 = v948;
    else
      v949 = v933;
    v950 = v1837 - (int)v1825;
    if (v950 >= v932)
      v951 = v932;
    else
      v951 = v1837 - v1825;
    if (v950 >= v933)
      v952 = v951;
    else
      v952 = v933;
    v953 = v1841 - v1966;
    if (v953 < v932)
      LODWORD(v932) = v1841 - v1966;
    if (v953 >= v933)
      v954 = v932;
    else
      v954 = v933;
  }
  v1967 = v865;
  v2062 = v826;
  v955 = v2133 + v1804 * v579;
  v956 = v2133 + v1813 * v579;
  v957 = v1913;
  v958 = v2123 + v1980;
  if (v930 <= 0)
  {
    v2053 = v2123 + v1980;
    v2128 = v2119 + v1975;
    v1901 = v1783 + v736;
    v1896 = v734 + v735;
    v1881 = v734 - v735;
    v1876 = v1783 - v736;
    v1976 = v2119 - v1975;
    v984 = v2123 - v1980;
    v1981 = v1971 - v1994;
    v1820 = v1985 - v1990;
    v1814 = v1799 - v1808;
    v996 = v1789 - v1794;
    v2116 = v1789 + v1794;
    v2120 = v1799 + v1808;
    v2124 = v1990 + v1985;
    v1007 = v1971 + v1994;
  }
  else
  {
    v959 = 1 << (v930 - 1);
    v960 = v959 - 1;
    v961 = -v959;
    v962 = v958;
    if (v958 >= v960)
      v958 = v960;
    if (v962 >= v961)
      v963 = v958;
    else
      v963 = v961;
    v2053 = v963;
    v964 = v2119 + v1975;
    if (v964 >= v960)
      v965 = v960;
    else
      v965 = v2119 + v1975;
    if (v964 >= v961)
      v966 = v965;
    else
      v966 = v961;
    v2128 = v966;
    v967 = (int)v736 + (int)v1783;
    if (v967 >= v960)
      v968 = v960;
    else
      v968 = v736 + v1783;
    if (v967 >= v961)
      v969 = v968;
    else
      v969 = v961;
    v1901 = v969;
    v970 = (int)v734 + (int)v735;
    if (v970 >= v960)
      v971 = v960;
    else
      v971 = v734 + v735;
    if (v970 >= v961)
      v972 = v971;
    else
      v972 = v961;
    v1896 = v972;
    v973 = (int)v734 - (int)v735;
    if (v973 >= v960)
      v974 = v960;
    else
      v974 = v734 - v735;
    if (v973 >= v961)
      v975 = v974;
    else
      v975 = v961;
    v1881 = v975;
    v976 = (int)v1783 - (int)v736;
    if (v976 >= v960)
      v977 = v960;
    else
      v977 = v1783 - v736;
    if (v976 >= v961)
      v978 = v977;
    else
      v978 = v961;
    v1876 = v978;
    v979 = v2119 - v1975;
    if (v979 >= v960)
      v980 = v960;
    else
      v980 = v2119 - v1975;
    if (v979 >= v961)
      v981 = v980;
    else
      v981 = v961;
    v1976 = v981;
    v982 = v2123 - v1980;
    if (v982 >= v960)
      v983 = v960;
    else
      v983 = v2123 - v1980;
    if (v982 >= v961)
      v984 = v983;
    else
      v984 = v961;
    v985 = v1971 - v1994;
    if (v985 >= v960)
      v986 = v960;
    else
      v986 = v1971 - v1994;
    if (v985 >= v961)
      v987 = v986;
    else
      v987 = v961;
    v1981 = v987;
    v988 = v1985 - v1990;
    if (v988 >= v960)
      v989 = v960;
    else
      v989 = v1985 - v1990;
    if (v988 >= v961)
      v990 = v989;
    else
      v990 = v961;
    v1820 = v990;
    v991 = (int)v1799 - (int)v1808;
    if (v991 >= v960)
      v992 = v960;
    else
      v992 = v1799 - v1808;
    if (v991 >= v961)
      v993 = v992;
    else
      v993 = v961;
    v1814 = v993;
    v994 = (int)v1789 - (int)v1794;
    if (v994 >= v960)
      v995 = v960;
    else
      v995 = v1789 - v1794;
    if (v994 >= v961)
      v996 = v995;
    else
      v996 = v961;
    v997 = (int)v1794 + (int)v1789;
    if (v997 >= v960)
      v998 = v960;
    else
      v998 = v1794 + v1789;
    if (v997 >= v961)
      v999 = v998;
    else
      v999 = v961;
    v2116 = v999;
    v1000 = (int)v1799 + (int)v1808;
    if (v1000 >= v960)
      v1001 = v960;
    else
      v1001 = v1799 + v1808;
    if (v1000 >= v961)
      v1002 = v1001;
    else
      v1002 = v961;
    v2120 = v1002;
    v1003 = v1990 + v1985;
    if (v1003 >= v960)
      v1004 = v960;
    else
      v1004 = v1990 + v1985;
    if (v1003 >= v961)
      v1005 = v1004;
    else
      v1005 = v961;
    v2124 = v1005;
    v1006 = v1971 + v1994;
    if (v1006 < v960)
      LODWORD(v960) = v1971 + v1994;
    if (v1006 >= v961)
      v1007 = v960;
    else
      v1007 = v961;
    v957 = v1913;
  }
  v1986 = v1007;
  v1008 = (v955 + v1928 * v579) >> v4;
  v1009 = v1891 + v723;
  v1010 = a4[9];
  v1011 = v944;
  if (v1010 >= 1)
  {
    v1012 = 1 << (v1010 - 1);
    v1013 = v1012 - 1;
    v1014 = -v1012;
    if (v1009 < v1013)
      LODWORD(v1013) = v1891 + v723;
    if (v1009 >= v1014)
      v1009 = v1013;
    else
      v1009 = v1014;
  }
  v1015 = v1923;
  v1016 = v956 + v957 * v2034;
  v1017 = (v956 + v1913 * v579) >> v4;
  v1859 = v1009;
  *a2 = v1009;
  v1018 = v1778 + v2100;
  v1019 = a4[9];
  if (v1019 >= 1)
  {
    v1020 = 1 << (v1019 - 1);
    v1021 = v1020 - 1;
    v1022 = -v1020;
    if (v1018 < v1021)
      LODWORD(v1021) = v1778 + v2100;
    if (v1018 >= v1022)
      v1018 = v1021;
    else
      v1018 = v1022;
  }
  v1023 = v1016 >> v4;
  a2[1] = v1018;
  v1024 = v1923 + v1008;
  v1025 = a4[9];
  if (v1025 >= 1)
  {
    v1026 = 1 << (v1025 - 1);
    v1027 = v1026 - 1;
    v1028 = -v1026;
    if (v1024 < v1027)
      LODWORD(v1027) = v1923 + v1008;
    if (v1024 >= v1028)
      v1024 = v1027;
    else
      v1024 = v1028;
  }
  v1029 = (v955 + v1928 * v2034) >> v4;
  a2[2] = v1024;
  v1030 = v1011 + v1017;
  v1031 = a4[9];
  if (v1031 >= 1)
  {
    v1032 = 1 << (v1031 - 1);
    v1033 = v1032 - 1;
    v1034 = -v1032;
    if (v1030 < v1033)
      LODWORD(v1033) = v1011 + v1017;
    if (v1030 >= v1034)
      v1030 = v1033;
    else
      v1030 = v1034;
  }
  a2[3] = v1030;
  v1035 = v946 + v1023;
  v1036 = a4[9];
  if (v1036 >= 1)
  {
    v1037 = 1 << (v1036 - 1);
    v1038 = v1037 - 1;
    v1039 = -v1037;
    if (v1035 < v1038)
      LODWORD(v1038) = v946 + v1023;
    if (v1035 >= v1039)
      v1035 = v1038;
    else
      v1035 = v1039;
  }
  v1914 = v1035;
  a2[4] = v1035;
  v1040 = v949 + v1029;
  v1041 = a4[9];
  if (v1041 >= 1)
  {
    v1042 = 1 << (v1041 - 1);
    v1043 = v1042 - 1;
    v1044 = -v1042;
    if (v1040 < v1043)
      LODWORD(v1043) = v949 + v1029;
    if (v1040 >= v1044)
      v1040 = v1043;
    else
      v1040 = v1044;
  }
  v1910 = v1040;
  a2[5] = v1040;
  v1045 = v952 + v2104;
  v1046 = a4[9];
  if (v1046 >= 1)
  {
    v1047 = 1 << (v1046 - 1);
    v1048 = v1047 - 1;
    v1049 = -v1047;
    if (v1045 < v1048)
      LODWORD(v1048) = v952 + v2104;
    if (v1045 >= v1049)
      v1045 = v1048;
    else
      v1045 = v1049;
  }
  v1906 = v1045;
  a2[6] = v1045;
  v1050 = v954 + v2108;
  v1051 = a4[9];
  if (v1051 >= 1)
  {
    v1052 = 1 << (v1051 - 1);
    v1053 = v1052 - 1;
    v1054 = -v1052;
    if (v1050 < v1053)
      LODWORD(v1053) = v954 + v2108;
    if (v1050 >= v1054)
      v1050 = v1053;
    else
      v1050 = v1054;
  }
  v1055 = v2133;
  a2[7] = v1050;
  v1056 = v954 - v2108;
  v1057 = a4[9];
  if (v1057 >= 1)
  {
    v1058 = 1 << (v1057 - 1);
    v1059 = v1058 - 1;
    v1060 = -v1058;
    if (v1056 < v1059)
      LODWORD(v1059) = v1056;
    if (v1056 >= v1060)
      v1056 = v1059;
    else
      v1056 = v1060;
  }
  a2[8] = v1056;
  v1061 = v952 - v2104;
  v1062 = a4[9];
  if (v1062 >= 1)
  {
    v1063 = 1 << (v1062 - 1);
    v1064 = v1063 - 1;
    v1065 = -v1063;
    if (v1061 < v1064)
      LODWORD(v1064) = v1061;
    if (v1061 >= v1065)
      v1061 = v1064;
    else
      v1061 = v1065;
  }
  v1851 = v1061;
  a2[9] = v1061;
  v1066 = v949 - v1029;
  v1067 = a4[9];
  v1918 = v1030;
  if (v1067 >= 1)
  {
    v1068 = 1 << (v1067 - 1);
    v1069 = v1068 - 1;
    v1070 = -v1068;
    if (v1066 < v1069)
      LODWORD(v1069) = v1066;
    if (v1066 >= v1070)
      v1066 = v1069;
    else
      v1066 = v1070;
  }
  a2[10] = v1066;
  v1071 = v946 - v1023;
  v1072 = a4[9];
  if (v1072 >= 1)
  {
    v1073 = 1 << (v1072 - 1);
    v1074 = v1073 - 1;
    v1075 = -v1073;
    if (v1071 < v1074)
      LODWORD(v1074) = v1071;
    if (v1071 >= v1075)
      v1071 = v1074;
    else
      v1071 = v1075;
  }
  v1924 = v1024;
  v1838 = v1071;
  a2[11] = v1071;
  v1076 = v1011 - v1017;
  v1077 = a4[9];
  if (v1077 >= 1)
  {
    v1078 = 1 << (v1077 - 1);
    v1079 = v1078 - 1;
    v1080 = -v1078;
    if (v1076 < v1079)
      LODWORD(v1079) = v1011 - v1017;
    if (v1076 >= v1080)
      v1076 = v1079;
    else
      v1076 = v1080;
  }
  v1081 = v1901;
  v1864 = v1050;
  v1834 = v1076;
  a2[12] = v1076;
  v1082 = v1015 - v1008;
  v1083 = a4[9];
  if (v1083 >= 1)
  {
    v1084 = 1 << (v1083 - 1);
    v1085 = v1084 - 1;
    v1086 = -v1084;
    if (v1082 < v1085)
      LODWORD(v1085) = v1015 - v1008;
    if (v1082 >= v1086)
      v1082 = v1085;
    else
      v1082 = v1086;
  }
  v1087 = v1896;
  v1830 = v1082;
  a2[13] = v1082;
  v1088 = v1778 - v2100;
  v1089 = a4[9];
  if (v1089 >= 1)
  {
    v1090 = 1 << (v1089 - 1);
    v1091 = v1090 - 1;
    v1092 = -v1090;
    if (v1088 < v1091)
      LODWORD(v1091) = v1778 - v2100;
    if (v1088 >= v1092)
      v1088 = v1091;
    else
      v1088 = v1092;
  }
  v1929 = v1018;
  a2[14] = v1088;
  v1093 = v1891 - v2003;
  v1094 = a4[9];
  v1855 = v1056;
  v1842 = v1066;
  v1826 = v1088;
  if (v1094 >= 1)
  {
    v1095 = 1 << (v1094 - 1);
    v1096 = v1095 - 1;
    v1097 = -v1095;
    if (v1093 < v1096)
      LODWORD(v1096) = v1891 - v2003;
    if (v1093 >= v1097)
      v1093 = v1096;
    else
      v1093 = v1097;
  }
  v1098 = v2133 + v996 * v579;
  v1795 = v1093;
  v1800 = (v1098 + v1881 * v2034) >> v4;
  a2[15] = v1093;
  a2[16] = v2053;
  a2[17] = v2128;
  a2[18] = v1901;
  a2[19] = v1896;
  a2[20] = v1800;
  v1099 = v2133 + v1814 * v579;
  v1100 = v2133 + v1820 * v579;
  v1805 = (v1099 + v1876 * v2034) >> v4;
  v1809 = (v1100 + v1976 * v2034) >> v4;
  a2[21] = v1805;
  a2[22] = v1809;
  v1101 = v2133 + v1981 * v579;
  v1815 = (v1101 + v984 * v2034) >> v4;
  v1821 = (v1101 + v984 * v579) >> v4;
  a2[23] = v1815;
  a2[24] = v1821;
  v1892 = (v1100 + v1976 * v579) >> v4;
  v1897 = (v1099 + v1876 * v579) >> v4;
  a2[25] = v1892;
  a2[26] = v1897;
  v1902 = (v1098 + v1881 * v579) >> v4;
  a2[27] = v1902;
  a2[28] = v2116;
  a2[29] = v2120;
  a2[30] = v2124;
  a2[31] = v1007;
  v1102 = v1999 + v2084;
  v1103 = a4[9];
  if (v1103 >= 1)
  {
    v1104 = 1 << (v1103 - 1);
    v1105 = v1104 - 1;
    v1106 = -v1104;
    if (v1102 < v1105)
      LODWORD(v1105) = v1999 + v2084;
    if (v1102 >= v1106)
      v1102 = v1105;
    else
      v1102 = v1106;
  }
  a2[32] = v1102;
  v1107 = v2062 + v2096;
  v1108 = a4[9];
  if (v1108 >= 1)
  {
    v1109 = 1 << (v1108 - 1);
    v1110 = v1109 - 1;
    v1111 = -v1109;
    if (v1107 < v1110)
      LODWORD(v1110) = v2062 + v2096;
    if (v1107 >= v1111)
      v1107 = v1110;
    else
      v1107 = v1111;
  }
  v1112 = (v2133 + v2057 * v652 + v1934 * v583) >> v4;
  v1113 = (v2133 + v2012 * v2112 + v1967 * v652) >> v4;
  a2[33] = v1107;
  v1114 = v2008 + v2076;
  v1115 = a4[9];
  if (v1115 >= 1)
  {
    v1116 = 1 << (v1115 - 1);
    v1117 = v1116 - 1;
    v1118 = -v1116;
    if (v1114 < v1117)
      LODWORD(v1117) = v2008 + v2076;
    v1055 = v2133;
    if (v1114 >= v1118)
      v1114 = v1117;
    else
      v1114 = v1118;
  }
  v1119 = (v2133 + v2048 * v652 + v1939 * v583) >> v4;
  v1120 = (v2133 + v2016 * v2112 + v1953 * v652) >> v4;
  v1877 = v1114;
  a2[34] = v1114;
  v1121 = v1886 + v2030;
  v1122 = a4[9];
  if (v1122 >= 1)
  {
    v1123 = 1 << (v1122 - 1);
    v1124 = v1123 - 1;
    v1125 = -v1123;
    if (v1121 < v1124)
      LODWORD(v1124) = v1886 + v2030;
    if (v1121 >= v1125)
      v1121 = v1124;
    else
      v1121 = v1125;
  }
  v1126 = (v2133 + v2043 * v652 + v1944 * v583) >> v4;
  v1127 = (v2133 + v2021 * v2112 + v1957 * v652) >> v4;
  a2[35] = v1121;
  v1128 = v1112 + v1113;
  v1129 = a4[9];
  if (v1129 >= 1)
  {
    v1130 = 1 << (v1129 - 1);
    v1131 = v1130 - 1;
    v1132 = -v1130;
    if (v1128 < v1131)
      LODWORD(v1131) = v1112 + v1113;
    if (v1128 >= v1132)
      v1128 = v1131;
    else
      v1128 = v1132;
  }
  v1133 = (v1055 + v2080 * v652 + v1949 * v583) >> v4;
  v1134 = (v1055 + v1846 * v2112 + v1962 * v652) >> v4;
  v2109 = v1128;
  a2[36] = v1128;
  v1135 = v1119 + v1120;
  v1136 = a4[9];
  if (v1136 >= 1)
  {
    v1137 = 1 << (v1136 - 1);
    v1138 = v1137 - 1;
    v1139 = -v1137;
    if (v1135 < v1138)
      LODWORD(v1138) = v1119 + v1120;
    if (v1135 >= v1139)
      v1135 = v1138;
    else
      v1135 = v1139;
  }
  v2105 = v1135;
  a2[37] = v1135;
  v1140 = v1126 + v1127;
  v1141 = a4[9];
  if (v1141 >= 1)
  {
    v1142 = 1 << (v1141 - 1);
    v1143 = v1142 - 1;
    v1144 = -v1142;
    if (v1140 < v1143)
      LODWORD(v1143) = v1126 + v1127;
    if (v1140 >= v1144)
      v1140 = v1143;
    else
      v1140 = v1144;
  }
  v2101 = v1140;
  a2[38] = v1140;
  v1145 = v1133 + v1134;
  v1146 = a4[9];
  if (v1146 >= 1)
  {
    v1147 = 1 << (v1146 - 1);
    v1148 = v1147 - 1;
    v1149 = -v1147;
    if (v1145 < v1148)
      LODWORD(v1148) = v1133 + v1134;
    if (v1145 >= v1149)
      v1145 = v1148;
    else
      v1145 = v1149;
  }
  a2[39] = v1145;
  v1150 = v1133 - v1134;
  v1151 = a4[9];
  if (v1151 >= 1)
  {
    v1152 = 1 << (v1151 - 1);
    v1153 = v1152 - 1;
    v1154 = -v1152;
    if (v1150 < v1153)
      LODWORD(v1153) = v1150;
    if (v1150 >= v1154)
      v1150 = v1153;
    else
      v1150 = v1154;
  }
  v2004 = v1150;
  a2[40] = v1150;
  v1155 = v1126 - v1127;
  v1156 = a4[9];
  if (v1156 >= 1)
  {
    v1157 = 1 << (v1156 - 1);
    v1158 = v1157 - 1;
    v1159 = -v1157;
    if (v1155 < v1158)
      LODWORD(v1158) = v1126 - v1127;
    if (v1155 >= v1159)
      v1155 = v1158;
    else
      v1155 = v1159;
  }
  v1995 = v1155;
  a2[41] = v1155;
  v1160 = v1119 - v1120;
  v1161 = a4[9];
  if (v1161 >= 1)
  {
    v1162 = 1 << (v1161 - 1);
    v1163 = v1162 - 1;
    v1164 = -v1162;
    if (v1160 < v1163)
      LODWORD(v1163) = v1119 - v1120;
    if (v1160 >= v1164)
      v1160 = v1163;
    else
      v1160 = v1164;
  }
  a2[42] = v1160;
  v1165 = v1112 - v1113;
  v1166 = a4[9];
  if (v1166 >= 1)
  {
    v1167 = 1 << (v1166 - 1);
    v1168 = v1167 - 1;
    v1169 = -v1167;
    if (v1165 < v1168)
      LODWORD(v1168) = v1165;
    if (v1165 >= v1169)
      v1165 = v1168;
    else
      v1165 = v1169;
  }
  v1170 = v1953;
  v1982 = v1165;
  a2[43] = v1165;
  v1171 = v2030 - v1886;
  v1172 = a4[9];
  if (v1172 >= 1)
  {
    v1173 = 1 << (v1172 - 1);
    v1174 = v1173 - 1;
    v1175 = -v1173;
    if (v1171 < v1174)
      LODWORD(v1174) = v2030 - v1886;
    if (v1171 >= v1175)
      v1171 = v1174;
    else
      v1171 = v1175;
  }
  v1977 = v1171;
  a2[44] = v1171;
  v1176 = v2076 - v2008;
  v1177 = a4[9];
  if (v1177 >= 1)
  {
    v1178 = 1 << (v1177 - 1);
    v1179 = v1178 - 1;
    v1180 = -v1178;
    if (v1176 < v1179)
      LODWORD(v1179) = v2076 - v2008;
    if (v1176 >= v1180)
      v1176 = v1179;
    else
      v1176 = v1180;
  }
  v1972 = v1176;
  a2[45] = v1176;
  v1181 = v2096 - v2062;
  v1182 = a4[9];
  v1991 = v1160;
  if (v1182 >= 1)
  {
    v1183 = 1 << (v1182 - 1);
    v1184 = v1183 - 1;
    v1185 = -v1183;
    if (v1181 < v1184)
      LODWORD(v1184) = v2096 - v2062;
    if (v1181 >= v1185)
      v1181 = v1184;
    else
      v1181 = v1185;
  }
  v1954 = v1181;
  a2[46] = v1181;
  v1186 = v2084 - v1999;
  v1187 = a4[9];
  v2097 = v1145;
  if (v1187 >= 1)
  {
    v1188 = 1 << (v1187 - 1);
    v1189 = v1188 - 1;
    v1190 = -v1188;
    if (v1186 < v1189)
      LODWORD(v1189) = v2084 - v1999;
    if (v1186 >= v1190)
      v1186 = v1189;
    else
      v1186 = v1190;
  }
  a2[47] = v1186;
  v1191 = v2066 - v2091;
  v1192 = a4[9];
  v1887 = v1102;
  v2113 = v1121;
  if (v1192 >= 1)
  {
    v1193 = 1 << (v1192 - 1);
    v1194 = v1193 - 1;
    v1195 = -v1193;
    if (v1191 < v1194)
      LODWORD(v1194) = v2066 - v2091;
    if (v1191 >= v1195)
      v1191 = v1194;
    else
      v1191 = v1195;
  }
  v1196 = v1170 * v583;
  a2[48] = v1191;
  v1197 = v2071 - v2087;
  v1198 = a4[9];
  v1882 = v1107;
  if (v1198 >= 1)
  {
    v1199 = 1 << (v1198 - 1);
    v1200 = v1199 - 1;
    v1201 = -v1199;
    if (v1197 < v1200)
      LODWORD(v1200) = v2071 - v2087;
    if (v1197 >= v1201)
      v1197 = v1200;
    else
      v1197 = v1201;
  }
  v1202 = v1846 * v652;
  v1203 = v1055 + v2021 * v652;
  v1204 = v1055 + v2016 * v652 + v1196;
  v1205 = (v1055 + v2012 * v652 + v1967 * v583) >> v4;
  v1206 = (v1055 + v2057 * v583 + v1934 * v2131) >> v4;
  v1847 = v1197;
  a2[49] = v1197;
  v1207 = v1868 - v2038;
  v1208 = a4[9];
  if (v1208 >= 1)
  {
    v1209 = 1 << (v1208 - 1);
    v1210 = v1209 - 1;
    v1211 = -v1209;
    if (v1207 < v1210)
      LODWORD(v1210) = v1868 - v2038;
    if (v1207 >= v1211)
      v1207 = v1210;
    else
      v1207 = v1211;
  }
  v1212 = v1962 * v583;
  v1213 = v1055 + v2080 * v583;
  v1214 = v1203 + v1957 * v583;
  v1215 = v1055 + v2043 * v583 + v1944 * v2131;
  v1216 = v1204 >> v4;
  v1217 = (v1055 + v2048 * v583 + v1939 * v2131) >> v4;
  a2[50] = v1207;
  v1218 = v1872 - v2026;
  v1219 = a4[9];
  if (v1219 >= 1)
  {
    v1220 = 1 << (v1219 - 1);
    v1221 = v1220 - 1;
    v1222 = -v1220;
    if (v1218 < v1221)
      LODWORD(v1221) = v1872 - v2026;
    if (v1218 >= v1222)
      v1218 = v1221;
    else
      v1218 = v1222;
  }
  v1223 = v1859;
  v1224 = v1055 + v1202 + v1212;
  v1225 = v1213 + v1949 * v2131;
  v1226 = v1214 >> v4;
  v1227 = v1215 >> v4;
  a2[51] = v1218;
  v1228 = v1206 - v1205;
  v1229 = a4[9];
  if (v1229 >= 1)
  {
    v1230 = 1 << (v1229 - 1);
    v1231 = v1230 - 1;
    v1232 = -v1230;
    if (v1228 < v1231)
      LODWORD(v1231) = v1206 - v1205;
    if (v1228 >= v1232)
      v1228 = v1231;
    else
      v1228 = v1232;
  }
  v1233 = v1224 >> v4;
  v1234 = v1225 >> v4;
  a2[52] = v1228;
  v1235 = v1217 - v1216;
  v1236 = a4[9];
  if (v1236 >= 1)
  {
    v1237 = 1 << (v1236 - 1);
    v1238 = v1237 - 1;
    v1239 = -v1237;
    if (v1235 < v1238)
      LODWORD(v1238) = v1217 - v1216;
    if (v1235 >= v1239)
      v1235 = v1238;
    else
      v1235 = v1239;
  }
  a2[53] = v1235;
  v1240 = v1227 - v1226;
  v1241 = a4[9];
  if (v1241 >= 1)
  {
    v1242 = 1 << (v1241 - 1);
    v1243 = v1242 - 1;
    v1244 = -v1242;
    if (v1240 < v1243)
      LODWORD(v1243) = v1227 - v1226;
    if (v1240 >= v1244)
      v1240 = v1243;
    else
      v1240 = v1244;
  }
  a2[54] = v1240;
  v1245 = v1234 - v1233;
  v1246 = a4[9];
  v1784 = v1240;
  if (v1246 >= 1)
  {
    v1247 = 1 << (v1246 - 1);
    v1248 = v1247 - 1;
    v1249 = -v1247;
    if (v1245 < v1248)
      LODWORD(v1248) = v1234 - v1233;
    if (v1245 >= v1249)
      v1245 = v1248;
    else
      v1245 = v1249;
  }
  a2[55] = v1245;
  v1250 = v1234 + v1233;
  v1251 = a4[9];
  if (v1251 >= 1)
  {
    v1252 = 1 << (v1251 - 1);
    v1253 = v1252 - 1;
    v1254 = -v1252;
    if (v1250 < v1253)
      LODWORD(v1253) = v1250;
    if (v1250 >= v1254)
      v1250 = v1253;
    else
      v1250 = v1254;
  }
  v1255 = v2133;
  a2[56] = v1250;
  v1256 = v1227 + v1226;
  v1257 = a4[9];
  if (v1257 >= 1)
  {
    v1258 = 1 << (v1257 - 1);
    v1259 = v1258 - 1;
    v1260 = -v1258;
    if (v1256 < v1259)
      LODWORD(v1259) = v1256;
    if (v1256 >= v1260)
      v1256 = v1259;
    else
      v1256 = v1260;
  }
  a2[57] = v1256;
  v1261 = v1217 + v1216;
  v1262 = a4[9];
  if (v1262 >= 1)
  {
    v1263 = 1 << (v1262 - 1);
    v1264 = v1263 - 1;
    v1265 = -v1263;
    if (v1261 < v1264)
      LODWORD(v1264) = v1261;
    if (v1261 >= v1265)
      v1261 = v1264;
    else
      v1261 = v1265;
  }
  a2[58] = v1261;
  v1266 = v1206 + v1205;
  v1267 = a4[9];
  v1790 = v1228;
  if (v1267 >= 1)
  {
    v1268 = 1 << (v1267 - 1);
    v1269 = v1268 - 1;
    v1270 = -v1268;
    if (v1266 < v1269)
      LODWORD(v1269) = v1206 + v1205;
    if (v1266 >= v1270)
      v1266 = v1269;
    else
      v1266 = v1270;
  }
  a2[59] = v1266;
  v1271 = v1872 + v2026;
  v1272 = a4[9];
  if (v1272 >= 1)
  {
    v1273 = 1 << (v1272 - 1);
    v1274 = v1273 - 1;
    v1275 = -v1273;
    if (v1271 < v1274)
      LODWORD(v1274) = v1872 + v2026;
    if (v1271 >= v1275)
      v1271 = v1274;
    else
      v1271 = v1275;
  }
  a2[60] = v1271;
  v1276 = v1868 + v2038;
  v1277 = a4[9];
  if (v1277 >= 1)
  {
    v1278 = 1 << (v1277 - 1);
    v1279 = v1278 - 1;
    v1280 = -v1278;
    if (v1276 < v1279)
      LODWORD(v1279) = v1868 + v2038;
    if (v1276 >= v1280)
      v1276 = v1279;
    else
      v1276 = v1280;
  }
  v1281 = v2128;
  v2129 = v1276;
  a2[61] = v1276;
  v1282 = v2071 + v2087;
  v1283 = a4[9];
  if (v1283 >= 1)
  {
    v1284 = 1 << (v1283 - 1);
    v1285 = v1284 - 1;
    v1286 = -v1284;
    if (v1282 < v1285)
      LODWORD(v1285) = v2071 + v2087;
    if (v1282 >= v1286)
      v1282 = v1285;
    else
      v1282 = v1286;
  }
  v2088 = v1282;
  a2[62] = v1282;
  v1287 = v2066 + v2091;
  v1288 = a4[9];
  if (v1288 >= 1)
  {
    v1289 = 1 << (v1288 - 1);
    v1290 = v1289 - 1;
    v1291 = -v1289;
    if (v1287 < v1290)
      LODWORD(v1290) = v2066 + v2091;
    if (v1287 >= v1291)
      v1287 = v1290;
    else
      v1287 = v1291;
  }
  v1935 = v1271;
  v1940 = v1250;
  v1860 = v1207;
  v1869 = v1191;
  v2092 = v1287;
  a2[63] = v1287;
  v1292 = v1223 + v1986;
  v1293 = a4[10];
  if (v1293 <= 0)
  {
    LODWORD(v1296) = v1223 - v1986;
    v2017 = v1795 + v2053;
    v2054 = v1795 - v2053;
    v2022 = v1826 + v1281;
    v2013 = v1826 - v1281;
    v2027 = v1830 + v1081;
    v2009 = v1830 - v1081;
    v2031 = v1834 + v1087;
    v2000 = v1834 - v1087;
    v2039 = v1838 + v1800;
    v1873 = v1838 - v1800;
    v2044 = v1842 + v1805;
    v1987 = v1842 - v1805;
    v2049 = v1851 + v1809;
    v1968 = v1851 - v1809;
    v2058 = v1855 + v1815;
    v1963 = v1855 - v1815;
    v2063 = v1864 + v1821;
    v1958 = v1864 - v1821;
    v2067 = v1906 + v1892;
    v1950 = v1906 - v1892;
    v2072 = v1910 + v1897;
    v1945 = v1910 - v1897;
    v2077 = v1914 + v1902;
    v1377 = v1914 - v1902;
    v2081 = v1918 + v2116;
    v2117 = v1918 - v2116;
    v2085 = v1924 + v2120;
    v1383 = v1924 - v2120;
    v2132 = v1929 + v2124;
    v1385 = v1929 - v2124;
  }
  else
  {
    v1769 = v1223 - v1986;
    v1294 = 1 << (v1293 - 1);
    v1295 = v1294 - 1;
    v1296 = -v1294;
    if (v1292 >= v1294 - 1)
      v1297 = v1294 - 1;
    else
      v1297 = v1223 + v1986;
    if (v1292 >= v1296)
      v1292 = v1297;
    else
      v1292 = -(int)v1294;
    v1298 = v1929 + v2124;
    if (v1298 >= v1295)
      v1299 = v1295;
    else
      v1299 = v1929 + v2124;
    if (v1298 >= v1296)
      v1300 = v1299;
    else
      v1300 = v1296;
    v2132 = v1300;
    v1301 = v2120 + v1924;
    if (v1301 >= v1295)
      v1302 = v1295;
    else
      v1302 = v2120 + v1924;
    if (v1301 >= v1296)
      v1303 = v1302;
    else
      v1303 = v1296;
    v2085 = v1303;
    v1304 = v1918 + v2116;
    if (v1304 >= v1295)
      v1305 = v1295;
    else
      v1305 = v1918 + v2116;
    if (v1304 >= v1296)
      v1306 = v1305;
    else
      v1306 = v1296;
    v2081 = v1306;
    v1307 = v1914 + (int)v1902;
    if (v1307 >= v1295)
      v1308 = v1295;
    else
      v1308 = v1914 + v1902;
    if (v1307 >= v1296)
      v1309 = v1308;
    else
      v1309 = v1296;
    v2077 = v1309;
    v1310 = v1910 + (int)v1897;
    if (v1310 >= v1295)
      v1311 = v1295;
    else
      v1311 = v1910 + v1897;
    if (v1310 >= v1296)
      v1312 = v1311;
    else
      v1312 = v1296;
    v2072 = v1312;
    v1313 = v1906 + (int)v1892;
    if (v1313 >= v1295)
      v1314 = v1295;
    else
      v1314 = v1906 + v1892;
    if (v1313 >= v1296)
      v1315 = v1314;
    else
      v1315 = v1296;
    v2067 = v1315;
    v1316 = v1864 + (int)v1821;
    if (v1316 >= v1295)
      v1317 = v1295;
    else
      v1317 = v1864 + v1821;
    if (v1316 >= v1296)
      v1318 = v1317;
    else
      v1318 = v1296;
    v2063 = v1318;
    v1319 = v1855 + (int)v1815;
    if (v1319 >= v1295)
      v1320 = v1295;
    else
      v1320 = v1855 + v1815;
    if (v1319 >= v1296)
      v1321 = v1320;
    else
      v1321 = v1296;
    v2058 = v1321;
    v1322 = v1851 + (int)v1809;
    if (v1322 >= v1295)
      v1323 = v1295;
    else
      v1323 = v1851 + v1809;
    if (v1322 >= v1296)
      v1324 = v1323;
    else
      v1324 = v1296;
    v2049 = v1324;
    v1325 = v1842 + (int)v1805;
    if (v1325 >= v1295)
      v1326 = v1295;
    else
      v1326 = v1842 + v1805;
    if (v1325 >= v1296)
      v1327 = v1326;
    else
      v1327 = v1296;
    v2044 = v1327;
    v1328 = v1838 + (int)v1800;
    if (v1328 >= v1295)
      v1329 = v1295;
    else
      v1329 = v1838 + v1800;
    if (v1328 >= v1296)
      v1330 = v1329;
    else
      v1330 = v1296;
    v2039 = v1330;
    v1331 = v1087 + v1834;
    if (v1331 >= v1295)
      v1332 = v1295;
    else
      v1332 = v1087 + v1834;
    if (v1331 >= v1296)
      v1333 = v1332;
    else
      v1333 = v1296;
    v2031 = v1333;
    v1334 = v1830 + v1081;
    if (v1334 >= v1295)
      v1335 = v1295;
    else
      v1335 = v1830 + v1081;
    if (v1334 >= v1296)
      v1336 = v1335;
    else
      v1336 = v1296;
    v2027 = v1336;
    v1337 = v1281 + v1826;
    if (v1337 >= v1295)
      v1338 = v1295;
    else
      v1338 = v1281 + v1826;
    if (v1337 >= v1296)
      v1339 = v1338;
    else
      v1339 = v1296;
    v2022 = v1339;
    v1340 = v1795 + v2053;
    if (v1340 >= v1295)
      v1341 = v1295;
    else
      v1341 = v1795 + v2053;
    v1342 = v1340 < v1296;
    v1343 = v1795 - v2053;
    v242 = v4;
    if (v1342)
      v1341 = v1296;
    v2017 = v1341;
    if (v1343 >= v1295)
      v1344 = v1295;
    else
      v1344 = v1795 - v2053;
    v1342 = v1343 < v1296;
    v1345 = v1826 - v1281;
    if (v1342)
      v1344 = v1296;
    v2054 = v1344;
    if (v1345 >= v1295)
      v1346 = v1295;
    else
      v1346 = v1826 - v1281;
    v1342 = v1345 < v1296;
    v1347 = v1830 - v1081;
    if (v1342)
      v1346 = v1296;
    v2013 = v1346;
    if (v1347 >= v1295)
      v1348 = v1295;
    else
      v1348 = v1830 - v1081;
    v1342 = v1347 < v1296;
    v1349 = v1834 - v1087;
    if (v1342)
      v1350 = v1296;
    else
      v1350 = v1348;
    v2009 = v1350;
    if (v1349 >= v1295)
      v1351 = v1295;
    else
      v1351 = v1834 - v1087;
    v1342 = v1349 < v1296;
    v1352 = v1838 - v1800;
    if (v1342)
      v1353 = v1296;
    else
      v1353 = v1351;
    v2000 = v1353;
    if (v1352 >= v1295)
      v1354 = v1295;
    else
      v1354 = v1838 - v1800;
    v1342 = v1352 < v1296;
    v1355 = v1842 - v1805;
    if (v1342)
      v1356 = v1296;
    else
      v1356 = v1354;
    v1873 = v1356;
    if (v1355 >= v1295)
      v1357 = v1295;
    else
      v1357 = v1842 - v1805;
    v1342 = v1355 < v1296;
    v1358 = v1851 - v1809;
    if (v1342)
      v1359 = v1296;
    else
      v1359 = v1357;
    v1987 = v1359;
    if (v1358 >= v1295)
      v1360 = v1295;
    else
      v1360 = v1851 - v1809;
    v1342 = v1358 < v1296;
    v1361 = v1855 - v1815;
    if (v1342)
      v1362 = v1296;
    else
      v1362 = v1360;
    v1968 = v1362;
    if (v1361 >= v1295)
      v1363 = v1295;
    else
      v1363 = v1855 - v1815;
    v1342 = v1361 < v1296;
    v1364 = v1864 - v1821;
    v1255 = v2133;
    if (v1342)
      v1365 = v1296;
    else
      v1365 = v1363;
    v1963 = v1365;
    if (v1364 >= v1295)
      v1366 = v1295;
    else
      v1366 = v1864 - v1821;
    v1342 = v1364 < v1296;
    v1367 = v1906 - v1892;
    if (v1342)
      v1368 = v1296;
    else
      v1368 = v1366;
    v1958 = v1368;
    if (v1367 >= v1295)
      v1369 = v1295;
    else
      v1369 = v1906 - v1892;
    v1342 = v1367 < v1296;
    v1370 = v1910 - v1897;
    if (v1342)
      v1371 = v1296;
    else
      v1371 = v1369;
    v1950 = v1371;
    if (v1370 >= v1295)
      v1372 = v1295;
    else
      v1372 = v1910 - v1897;
    v1342 = v1370 < v1296;
    v1373 = v1914 - v1902;
    if (v1342)
      v1374 = v1296;
    else
      v1374 = v1372;
    v1945 = v1374;
    if (v1373 >= v1295)
      v1375 = v1295;
    else
      v1375 = v1914 - v1902;
    v1342 = v1373 < v1296;
    v1376 = v1918 - v2116;
    if (v1342)
      v1377 = v1296;
    else
      v1377 = v1375;
    if (v1376 >= v1295)
      v1378 = v1295;
    else
      v1378 = v1918 - v2116;
    v1342 = v1376 < v1296;
    v1379 = v1924 - v2120;
    if (v1342)
      v1380 = v1296;
    else
      v1380 = v1378;
    v2117 = v1380;
    if (v1379 >= v1295)
      v1381 = v1295;
    else
      v1381 = v1924 - v2120;
    v1342 = v1379 < v1296;
    v1382 = v1929 - v2124;
    if (v1342)
      v1383 = v1296;
    else
      v1383 = v1381;
    if (v1382 >= v1295)
      v1384 = v1295;
    else
      v1384 = v1929 - v2124;
    if (v1382 >= v1296)
      v1385 = v1384;
    else
      v1385 = v1296;
    if (v1769 >= v1295)
      v1386 = v1295;
    else
      v1386 = v1769;
    v1271 = v1935;
    if (v1769 >= v1296)
      LODWORD(v1296) = v1386;
  }
  v1930 = v1292;
  v1387 = v1292 + v1287;
  v1388 = a4[11];
  if (v1388 >= 1)
  {
    v1389 = 1 << (v1388 - 1);
    v1390 = v1389 - 1;
    v1391 = -v1389;
    if (v1387 < v1390)
      LODWORD(v1390) = v1292 + v1287;
    if (v1387 >= v1391)
      v1387 = v1390;
    else
      v1387 = v1391;
  }
  *a2 = v1387;
  v1392 = v2132 + v2088;
  v1393 = a4[11];
  if (v1393 >= 1)
  {
    v1394 = 1 << (v1393 - 1);
    v1395 = v1394 - 1;
    v1396 = -v1394;
    if (v1392 < v1395)
      LODWORD(v1395) = v2132 + v2088;
    if (v1392 >= v1396)
      v1392 = v1395;
    else
      v1392 = v1396;
  }
  a2[1] = v1392;
  v1397 = v2085 + v2129;
  v1398 = a4[11];
  if (v1398 >= 1)
  {
    v1399 = 1 << (v1398 - 1);
    v1400 = v1399 - 1;
    v1401 = -v1399;
    if (v1397 < v1400)
      LODWORD(v1400) = v2085 + v2129;
    if (v1397 >= v1401)
      v1397 = v1400;
    else
      v1397 = v1401;
  }
  v1402 = v1245 * v579;
  a2[2] = v1397;
  v1403 = v2081 + v1271;
  v1404 = a4[11];
  v1405 = v1256;
  if (v1404 >= 1)
  {
    v1406 = 1 << (v1404 - 1);
    v1407 = v1406 - 1;
    v1408 = -v1406;
    if (v1403 < v1407)
      LODWORD(v1407) = v2081 + v1271;
    if (v1403 >= v1408)
      v1403 = v1407;
    else
      v1403 = v1408;
  }
  v1409 = v1255 + v1402;
  a2[3] = v1403;
  v2121 = v1266;
  v1410 = v2077 + v1266;
  v1411 = a4[11];
  if (v1411 >= 1)
  {
    v1412 = 1 << (v1411 - 1);
    v1413 = v1412 - 1;
    v1414 = -v1412;
    if (v1410 < v1413)
      LODWORD(v1413) = v1410;
    if (v1410 >= v1414)
      v1410 = v1413;
    else
      v1410 = v1414;
  }
  v1415 = v1255 + v1784 * v579;
  a2[4] = v1410;
  v1416 = v2072 + v1261;
  v1417 = a4[11];
  if (v1417 >= 1)
  {
    v1418 = 1 << (v1417 - 1);
    v1419 = v1418 - 1;
    v1420 = -v1418;
    if (v1416 < v1419)
      LODWORD(v1419) = v2072 + v1261;
    if (v1416 >= v1420)
      v1416 = v1419;
    else
      v1416 = v1420;
  }
  v1421 = v1255 + v1235 * v579;
  a2[5] = v1416;
  v1422 = v2067 + v1405;
  v1423 = a4[11];
  if (v1423 >= 1)
  {
    v1424 = 1 << (v1423 - 1);
    v1425 = v1424 - 1;
    v1426 = -v1424;
    if (v1422 < v1425)
      LODWORD(v1425) = v2067 + v1405;
    if (v1422 >= v1426)
      v1422 = v1425;
    else
      v1422 = v1426;
  }
  v1427 = v1255 + v1790 * v579;
  v1428 = (v1415 + v1995 * v579) >> v242;
  a2[6] = v1422;
  v1429 = v2063 + v1940;
  v1430 = a4[11];
  if (v1430 >= 1)
  {
    v1431 = 1 << (v1430 - 1);
    v1432 = v1431 - 1;
    v1433 = -v1431;
    if (v1429 < v1432)
      LODWORD(v1432) = v2063 + v1940;
    if (v1429 >= v1433)
      v1429 = v1432;
    else
      v1429 = v1433;
  }
  v2125 = v1261;
  v1434 = v1255 + v1218 * v579;
  v1435 = (v1421 + v1991 * v579) >> v242;
  a2[7] = v1429;
  v1925 = (v1409 + v2004 * v579) >> v242;
  v1436 = v2058 + v1925;
  v1437 = a4[11];
  if (v1437 < 1)
  {
    v1438 = v1940;
  }
  else
  {
    v1438 = v1940;
    v1439 = 1 << (v1437 - 1);
    v1440 = v1439 - 1;
    v1441 = -v1439;
    if (v1436 < v1440)
      LODWORD(v1440) = v2058 + ((v1409 + v2004 * v579) >> v242);
    if (v1436 >= v1441)
      v1436 = v1440;
    else
      v1436 = v1441;
  }
  v1442 = v1255 + v1860 * v579;
  v1443 = (v1427 + v1982 * v579) >> v242;
  a2[8] = v1436;
  v1444 = v2049 + v1428;
  v1445 = a4[11];
  if (v1445 >= 1)
  {
    v1446 = 1 << (v1445 - 1);
    v1447 = v1446 - 1;
    v1448 = -v1446;
    if (v1444 < v1447)
      LODWORD(v1447) = v2049 + v1428;
    v1255 = v2133;
    if (v1444 >= v1448)
      v1444 = v1447;
    else
      v1444 = v1448;
  }
  v1449 = v1255 + v1847 * v579;
  result = (v1434 + v1977 * v579) >> v242;
  a2[9] = v1444;
  v1451 = v2044 + v1435;
  v1452 = a4[11];
  v1919 = (v1421 + v1991 * v579) >> v242;
  if (v1452 >= 1)
  {
    v1453 = 1 << (v1452 - 1);
    v1454 = v1453 - 1;
    v1455 = -v1453;
    if (v1451 < v1454)
      LODWORD(v1454) = v2044 + v1435;
    if (v1451 >= v1455)
      v1451 = v1454;
    else
      v1451 = v1455;
    v1255 = v2133;
  }
  v1456 = v1255 + v1869 * v579;
  v1457 = (v1442 + v1972 * v579) >> v242;
  a2[10] = v1451;
  v1458 = v2039 + v1443;
  v1459 = a4[11];
  if (v1459 >= 1)
  {
    v1460 = 1 << (v1459 - 1);
    v1461 = v1460 - 1;
    v1462 = -v1460;
    if (v1458 < v1461)
      LODWORD(v1461) = v2039 + v1443;
    if (v1458 >= v1462)
      v1458 = v1461;
    else
      v1458 = v1462;
  }
  v1463 = v1186 * v2034;
  v1464 = v1456 + v1186 * v579;
  v1465 = (v1449 + v1954 * v579) >> v242;
  a2[11] = v1458;
  v1466 = v2031 + result;
  v1467 = a4[11];
  if (v1467 >= 1)
  {
    v1468 = 1 << (v1467 - 1);
    v1469 = v1468 - 1;
    v1470 = -v1468;
    if (v1466 < v1469)
      LODWORD(v1469) = v2031 + result;
    if (v1466 >= v1470)
      v1466 = v1469;
    else
      v1466 = v1470;
  }
  v1471 = v1456 + v1463;
  v1472 = v1464 >> v242;
  a2[12] = v1466;
  v1473 = v2027 + v1457;
  v1474 = a4[11];
  if (v1474 >= 1)
  {
    v1475 = 1 << (v1474 - 1);
    v1476 = v1475 - 1;
    v1477 = -v1475;
    if (v1473 < v1476)
      LODWORD(v1476) = v2027 + v1457;
    if (v1473 >= v1477)
      v1473 = v1476;
    else
      v1473 = v1477;
  }
  v1478 = v1449 + v1954 * v2034;
  v1479 = v1471 >> v242;
  a2[13] = v1473;
  v1480 = v2022 + v1465;
  v1481 = a4[11];
  if (v1481 >= 1)
  {
    v1482 = 1 << (v1481 - 1);
    v1483 = v1482 - 1;
    v1484 = -v1482;
    if (v1480 < v1483)
      LODWORD(v1483) = v2022 + v1465;
    if (v1480 >= v1484)
      v1480 = v1483;
    else
      v1480 = v1484;
  }
  v1485 = v1442 + v1972 * v2034;
  v1486 = v1478 >> v242;
  a2[14] = v1480;
  v1487 = v2017 + v1472;
  v1488 = a4[11];
  if (v1488 >= 1)
  {
    v1489 = 1 << (v1488 - 1);
    v1490 = v1489 - 1;
    v1491 = -v1489;
    if (v1487 < v1490)
      LODWORD(v1490) = v2017 + v1472;
    if (v1487 >= v1491)
      v1487 = v1490;
    else
      v1487 = v1491;
  }
  v1492 = v1434 + v1977 * v2034;
  v1493 = v1485 >> v242;
  a2[15] = v1487;
  v1494 = v2054 + v1479;
  v1495 = a4[11];
  if (v1495 >= 1)
  {
    v1496 = 1 << (v1495 - 1);
    v1497 = v1496 - 1;
    v1498 = -v1496;
    if (v1494 < v1497)
      LODWORD(v1497) = v2054 + v1479;
    if (v1494 >= v1498)
      v1494 = v1497;
    else
      v1494 = v1498;
  }
  v1499 = v1427 + v1982 * v2034;
  v1500 = v1492 >> v242;
  a2[16] = v1494;
  v1501 = v2013 + v1486;
  v1502 = a4[11];
  if (v1502 >= 1)
  {
    v1503 = 1 << (v1502 - 1);
    v1504 = v1503 - 1;
    v1505 = -v1503;
    if (v1501 < v1504)
      LODWORD(v1504) = v2013 + v1486;
    if (v1501 >= v1505)
      v1501 = v1504;
    else
      v1501 = v1505;
  }
  v1506 = v1421 + v1991 * v2034;
  v1507 = v1499 >> v242;
  a2[17] = v1501;
  v1508 = v2009 + v1493;
  v1509 = a4[11];
  if (v1509 >= 1)
  {
    v1510 = 1 << (v1509 - 1);
    v1511 = v1510 - 1;
    v1512 = -v1510;
    if (v1508 < v1511)
      LODWORD(v1511) = v2009 + v1493;
    if (v1508 >= v1512)
      v1508 = v1511;
    else
      v1508 = v1512;
  }
  v1513 = v1415 + v1995 * v2034;
  v1514 = v1506 >> v242;
  a2[18] = v1508;
  v1515 = v2000 + v1500;
  v1516 = a4[11];
  if (v1516 >= 1)
  {
    v1517 = 1 << (v1516 - 1);
    v1518 = v1517 - 1;
    v1519 = -v1517;
    if (v1515 < v1518)
      LODWORD(v1518) = v2000 + v1500;
    if (v1515 >= v1519)
      v1515 = v1518;
    else
      v1515 = v1519;
  }
  v1520 = v1409 + v2004 * v2034;
  v1521 = v1513 >> v242;
  a2[19] = v1515;
  v1522 = v1873 + v1507;
  v1523 = a4[11];
  if (v1523 >= 1)
  {
    v1524 = 1 << (v1523 - 1);
    v1525 = v1524 - 1;
    v1526 = -v1524;
    if (v1522 < v1525)
      LODWORD(v1525) = v1873 + v1507;
    if (v1522 >= v1526)
      v1522 = v1525;
    else
      v1522 = v1526;
  }
  v1527 = v1520 >> v242;
  a2[20] = v1522;
  v1528 = v1987 + v1514;
  v1529 = a4[11];
  if (v1529 >= 1)
  {
    v1530 = 1 << (v1529 - 1);
    v1531 = v1530 - 1;
    v1532 = -v1530;
    if (v1528 < v1531)
      LODWORD(v1531) = v1987 + v1514;
    if (v1528 >= v1532)
      v1528 = v1531;
    else
      v1528 = v1532;
  }
  a2[21] = v1528;
  v1533 = v1968 + v1521;
  v1534 = a4[11];
  if (v1534 >= 1)
  {
    v1535 = 1 << (v1534 - 1);
    v1536 = v1535 - 1;
    v1537 = -v1535;
    if (v1533 < v1536)
      LODWORD(v1536) = v1968 + v1521;
    if (v1533 >= v1537)
      v1533 = v1536;
    else
      v1533 = v1537;
  }
  a2[22] = v1533;
  v1538 = v1963 + v1527;
  v1539 = a4[11];
  if (v1539 >= 1)
  {
    v1540 = 1 << (v1539 - 1);
    v1541 = v1540 - 1;
    v1542 = -v1540;
    if (v1538 < v1541)
      LODWORD(v1541) = v1963 + v1527;
    if (v1538 >= v1542)
      v1538 = v1541;
    else
      v1538 = v1542;
  }
  a2[23] = v1538;
  v1543 = v1958 + v2097;
  v1544 = a4[11];
  if (v1544 >= 1)
  {
    v1545 = 1 << (v1544 - 1);
    v1546 = v1545 - 1;
    v1547 = -v1545;
    if (v1543 < v1546)
      LODWORD(v1546) = v1958 + v2097;
    if (v1543 >= v1547)
      v1543 = v1546;
    else
      v1543 = v1547;
  }
  a2[24] = v1543;
  v1548 = v1950 + v2101;
  v1549 = a4[11];
  if (v1549 >= 1)
  {
    v1550 = 1 << (v1549 - 1);
    v1551 = v1550 - 1;
    v1552 = -v1550;
    if (v1548 < v1551)
      LODWORD(v1551) = v1950 + v2101;
    if (v1548 >= v1552)
      v1548 = v1551;
    else
      v1548 = v1552;
  }
  a2[25] = v1548;
  v1553 = v1945 + v2105;
  v1554 = a4[11];
  if (v1554 >= 1)
  {
    v1555 = 1 << (v1554 - 1);
    v1556 = v1555 - 1;
    v1557 = -v1555;
    if (v1553 < v1556)
      LODWORD(v1556) = v1945 + v2105;
    if (v1553 >= v1557)
      v1553 = v1556;
    else
      v1553 = v1557;
  }
  a2[26] = v1553;
  v1558 = v1377 + v2109;
  v1559 = a4[11];
  if (v1559 >= 1)
  {
    v1560 = 1 << (v1559 - 1);
    v1561 = v1560 - 1;
    v1562 = -v1560;
    if (v1558 < v1561)
      LODWORD(v1561) = v1377 + v2109;
    if (v1558 >= v1562)
      v1558 = v1561;
    else
      v1558 = v1562;
  }
  a2[27] = v1558;
  v1563 = v2117 + v2113;
  v1564 = a4[11];
  if (v1564 >= 1)
  {
    v1565 = 1 << (v1564 - 1);
    v1566 = v1565 - 1;
    v1567 = -v1565;
    if (v1563 < v1566)
      LODWORD(v1566) = v2117 + v2113;
    if (v1563 >= v1567)
      v1563 = v1566;
    else
      v1563 = v1567;
  }
  a2[28] = v1563;
  v1568 = v1383 + v1877;
  v1569 = a4[11];
  if (v1569 >= 1)
  {
    v1570 = 1 << (v1569 - 1);
    v1571 = v1570 - 1;
    v1572 = -v1570;
    if (v1568 < v1571)
      LODWORD(v1571) = v1383 + v1877;
    if (v1568 >= v1572)
      v1568 = v1571;
    else
      v1568 = v1572;
  }
  a2[29] = v1568;
  v1573 = v1385 + v1882;
  v1574 = a4[11];
  if (v1574 >= 1)
  {
    v1575 = 1 << (v1574 - 1);
    v1576 = v1575 - 1;
    v1577 = -v1575;
    if (v1573 < v1576)
      LODWORD(v1576) = v1385 + v1882;
    if (v1573 >= v1577)
      v1573 = v1576;
    else
      v1573 = v1577;
  }
  a2[30] = v1573;
  v1578 = v1296 + v1887;
  v1579 = a4[11];
  if (v1579 >= 1)
  {
    v1580 = 1 << (v1579 - 1);
    v1581 = v1580 - 1;
    v1582 = -v1580;
    if (v1578 < v1581)
      LODWORD(v1581) = v1296 + v1887;
    if (v1578 >= v1582)
      v1578 = v1581;
    else
      v1578 = v1582;
  }
  a2[31] = v1578;
  v1583 = v1296 - v1887;
  v1584 = a4[11];
  if (v1584 >= 1)
  {
    v1585 = 1 << (v1584 - 1);
    v1586 = v1585 - 1;
    v1587 = -v1585;
    if (v1583 < v1586)
      LODWORD(v1586) = v1296 - v1887;
    if (v1583 >= v1587)
      v1583 = v1586;
    else
      v1583 = v1587;
  }
  a2[32] = v1583;
  v1588 = v1385 - v1882;
  v1589 = a4[11];
  if (v1589 >= 1)
  {
    v1590 = 1 << (v1589 - 1);
    v1591 = v1590 - 1;
    v1592 = -v1590;
    if (v1588 < v1591)
      LODWORD(v1591) = v1588;
    if (v1588 >= v1592)
      v1588 = v1591;
    else
      v1588 = v1592;
  }
  a2[33] = v1588;
  v1593 = v1383 - v1877;
  v1594 = a4[11];
  if (v1594 >= 1)
  {
    v1595 = 1 << (v1594 - 1);
    v1596 = v1595 - 1;
    v1597 = -v1595;
    if (v1593 < v1596)
      LODWORD(v1596) = v1383 - v1877;
    if (v1593 >= v1597)
      v1593 = v1596;
    else
      v1593 = v1597;
  }
  a2[34] = v1593;
  v1598 = v2117 - v2113;
  v1599 = a4[11];
  if (v1599 >= 1)
  {
    v1600 = 1 << (v1599 - 1);
    v1601 = v1600 - 1;
    v1602 = -v1600;
    if (v1598 < v1601)
      LODWORD(v1601) = v2117 - v2113;
    if (v1598 >= v1602)
      v1598 = v1601;
    else
      v1598 = v1602;
  }
  a2[35] = v1598;
  v1603 = v1377 - v2109;
  v1604 = a4[11];
  if (v1604 >= 1)
  {
    v1605 = 1 << (v1604 - 1);
    v1606 = v1605 - 1;
    v1607 = -v1605;
    if (v1603 < v1606)
      LODWORD(v1606) = v1377 - v2109;
    if (v1603 >= v1607)
      v1603 = v1606;
    else
      v1603 = v1607;
  }
  a2[36] = v1603;
  v1608 = v1945 - v2105;
  v1609 = a4[11];
  if (v1609 >= 1)
  {
    v1610 = 1 << (v1609 - 1);
    v1611 = v1610 - 1;
    v1612 = -v1610;
    if (v1608 < v1611)
      LODWORD(v1611) = v1945 - v2105;
    if (v1608 >= v1612)
      v1608 = v1611;
    else
      v1608 = v1612;
  }
  a2[37] = v1608;
  v1613 = v1950 - v2101;
  v1614 = a4[11];
  if (v1614 >= 1)
  {
    v1615 = 1 << (v1614 - 1);
    v1616 = v1615 - 1;
    v1617 = -v1615;
    if (v1613 < v1616)
      LODWORD(v1616) = v1950 - v2101;
    if (v1613 >= v1617)
      v1613 = v1616;
    else
      v1613 = v1617;
  }
  a2[38] = v1613;
  v1618 = v1958 - v2097;
  v1619 = a4[11];
  if (v1619 >= 1)
  {
    v1620 = 1 << (v1619 - 1);
    v1621 = v1620 - 1;
    v1622 = -v1620;
    if (v1618 < v1621)
      LODWORD(v1621) = v1958 - v2097;
    if (v1618 >= v1622)
      v1618 = v1621;
    else
      v1618 = v1622;
  }
  a2[39] = v1618;
  v1623 = v1963 - v1527;
  v1624 = a4[11];
  if (v1624 >= 1)
  {
    v1625 = 1 << (v1624 - 1);
    v1626 = v1625 - 1;
    v1627 = -v1625;
    if (v1623 < v1626)
      LODWORD(v1626) = v1623;
    if (v1623 >= v1627)
      v1623 = v1626;
    else
      v1623 = v1627;
  }
  a2[40] = v1623;
  v1628 = v1968 - v1521;
  v1629 = a4[11];
  if (v1629 >= 1)
  {
    v1630 = 1 << (v1629 - 1);
    v1631 = v1630 - 1;
    v1632 = -v1630;
    if (v1628 < v1631)
      LODWORD(v1631) = v1968 - v1521;
    if (v1628 >= v1632)
      v1628 = v1631;
    else
      v1628 = v1632;
  }
  a2[41] = v1628;
  v1633 = v1987 - v1514;
  v1634 = a4[11];
  if (v1634 >= 1)
  {
    v1635 = 1 << (v1634 - 1);
    v1636 = v1635 - 1;
    v1637 = -v1635;
    if (v1633 < v1636)
      LODWORD(v1636) = v1633;
    if (v1633 >= v1637)
      v1633 = v1636;
    else
      v1633 = v1637;
  }
  a2[42] = v1633;
  v1638 = v1873 - v1507;
  v1639 = a4[11];
  if (v1639 >= 1)
  {
    v1640 = 1 << (v1639 - 1);
    v1641 = v1640 - 1;
    v1642 = -v1640;
    if (v1638 < v1641)
      LODWORD(v1641) = v1873 - v1507;
    if (v1638 >= v1642)
      v1638 = v1641;
    else
      v1638 = v1642;
  }
  a2[43] = v1638;
  v1643 = v2000 - v1500;
  v1644 = a4[11];
  if (v1644 >= 1)
  {
    v1645 = 1 << (v1644 - 1);
    v1646 = v1645 - 1;
    v1647 = -v1645;
    if (v1643 < v1646)
      LODWORD(v1646) = v2000 - v1500;
    if (v1643 >= v1647)
      v1643 = v1646;
    else
      v1643 = v1647;
  }
  a2[44] = v1643;
  v1648 = v2009 - v1493;
  v1649 = a4[11];
  if (v1649 >= 1)
  {
    v1650 = 1 << (v1649 - 1);
    v1651 = v1650 - 1;
    v1652 = -v1650;
    if (v1648 < v1651)
      LODWORD(v1651) = v2009 - v1493;
    if (v1648 >= v1652)
      v1648 = v1651;
    else
      v1648 = v1652;
  }
  a2[45] = v1648;
  v1653 = v2013 - v1486;
  v1654 = a4[11];
  if (v1654 >= 1)
  {
    v1655 = 1 << (v1654 - 1);
    v1656 = v1655 - 1;
    v1657 = -v1655;
    if (v1653 < v1656)
      LODWORD(v1656) = v2013 - v1486;
    if (v1653 >= v1657)
      v1653 = v1656;
    else
      v1653 = v1657;
  }
  a2[46] = v1653;
  v1658 = v2054 - v1479;
  v1659 = a4[11];
  if (v1659 >= 1)
  {
    v1660 = 1 << (v1659 - 1);
    v1661 = v1660 - 1;
    v1662 = -v1660;
    if (v1658 < v1661)
      LODWORD(v1661) = v2054 - v1479;
    if (v1658 >= v1662)
      v1658 = v1661;
    else
      v1658 = v1662;
  }
  a2[47] = v1658;
  v1663 = v2017 - v1472;
  v1664 = a4[11];
  if (v1664 >= 1)
  {
    v1665 = 1 << (v1664 - 1);
    v1666 = v1665 - 1;
    v1667 = -v1665;
    if (v1663 < v1666)
      LODWORD(v1666) = v2017 - v1472;
    if (v1663 >= v1667)
      v1663 = v1666;
    else
      v1663 = v1667;
  }
  a2[48] = v1663;
  v1668 = v2022 - v1465;
  v1669 = a4[11];
  if (v1669 >= 1)
  {
    v1670 = 1 << (v1669 - 1);
    v1671 = v1670 - 1;
    v1672 = -v1670;
    if (v1668 < v1671)
      LODWORD(v1671) = v1668;
    if (v1668 >= v1672)
      v1668 = v1671;
    else
      v1668 = v1672;
  }
  a2[49] = v1668;
  v1673 = v2027 - v1457;
  v1674 = a4[11];
  if (v1674 >= 1)
  {
    v1675 = 1 << (v1674 - 1);
    v1676 = v1675 - 1;
    v1677 = -v1675;
    if (v1673 < v1676)
      LODWORD(v1676) = v1673;
    if (v1673 >= v1677)
      v1673 = v1676;
    else
      v1673 = v1677;
  }
  a2[50] = v1673;
  v1678 = v2031 - result;
  v1679 = a4[11];
  if (v1679 >= 1)
  {
    v1680 = 1 << (v1679 - 1);
    v1681 = v1680 - 1;
    v1682 = -v1680;
    if (v1678 < v1681)
      LODWORD(v1681) = v2031 - result;
    if (v1678 >= v1682)
      v1678 = v1681;
    else
      v1678 = v1682;
  }
  a2[51] = v1678;
  v1683 = v2039 - v1443;
  v1684 = a4[11];
  if (v1684 >= 1)
  {
    v1685 = 1 << (v1684 - 1);
    v1686 = v1685 - 1;
    v1687 = -v1685;
    if (v1683 < v1686)
      LODWORD(v1686) = v2039 - v1443;
    if (v1683 >= v1687)
      v1683 = v1686;
    else
      v1683 = v1687;
  }
  a2[52] = v1683;
  v1688 = v2044 - v1919;
  v1689 = a4[11];
  if (v1689 >= 1)
  {
    v1690 = 1 << (v1689 - 1);
    v1691 = v1690 - 1;
    v1692 = -v1690;
    if (v1688 < v1691)
      LODWORD(v1691) = v2044 - v1919;
    if (v1688 >= v1692)
      v1688 = v1691;
    else
      v1688 = v1692;
  }
  a2[53] = v1688;
  v1693 = v2049 - v1428;
  v1694 = a4[11];
  if (v1694 >= 1)
  {
    v1695 = 1 << (v1694 - 1);
    v1696 = v1695 - 1;
    v1697 = -v1695;
    if (v1693 < v1696)
      LODWORD(v1696) = v2049 - v1428;
    if (v1693 >= v1697)
      v1693 = v1696;
    else
      v1693 = v1697;
  }
  a2[54] = v1693;
  v1698 = v2058 - v1925;
  v1699 = a4[11];
  if (v1699 >= 1)
  {
    v1700 = 1 << (v1699 - 1);
    v1701 = v1700 - 1;
    v1702 = -v1700;
    if (v1698 < v1701)
      LODWORD(v1701) = v2058 - v1925;
    if (v1698 >= v1702)
      v1698 = v1701;
    else
      v1698 = v1702;
  }
  a2[55] = v1698;
  v1703 = v2063 - v1438;
  v1704 = a4[11];
  if (v1704 >= 1)
  {
    v1705 = 1 << (v1704 - 1);
    v1706 = v1705 - 1;
    v1707 = -v1705;
    if (v1703 < v1706)
      LODWORD(v1706) = v2063 - v1438;
    if (v1703 >= v1707)
      v1703 = v1706;
    else
      v1703 = v1707;
  }
  a2[56] = v1703;
  v1708 = v2067 - v1405;
  v1709 = a4[11];
  if (v1709 >= 1)
  {
    v1710 = 1 << (v1709 - 1);
    v1711 = v1710 - 1;
    v1712 = -v1710;
    if (v1708 < v1711)
      LODWORD(v1711) = v2067 - v1405;
    if (v1708 >= v1712)
      v1708 = v1711;
    else
      v1708 = v1712;
  }
  a2[57] = v1708;
  v1713 = v2072 - v2125;
  v1714 = a4[11];
  if (v1714 >= 1)
  {
    v1715 = 1 << (v1714 - 1);
    v1716 = v1715 - 1;
    v1717 = -v1715;
    if (v1713 < v1716)
      LODWORD(v1716) = v2072 - v2125;
    if (v1713 >= v1717)
      v1713 = v1716;
    else
      v1713 = v1717;
  }
  a2[58] = v1713;
  v1718 = v2077 - v2121;
  v1719 = a4[11];
  if (v1719 >= 1)
  {
    v1720 = 1 << (v1719 - 1);
    v1721 = v1720 - 1;
    v1722 = -v1720;
    if (v1718 < v1721)
      LODWORD(v1721) = v2077 - v2121;
    if (v1718 >= v1722)
      v1718 = v1721;
    else
      v1718 = v1722;
  }
  a2[59] = v1718;
  v1723 = v2081 - v1935;
  v1724 = a4[11];
  if (v1724 >= 1)
  {
    v1725 = 1 << (v1724 - 1);
    v1726 = v1725 - 1;
    v1727 = -v1725;
    if (v1723 < v1726)
      LODWORD(v1726) = v2081 - v1935;
    if (v1723 >= v1727)
      v1723 = v1726;
    else
      v1723 = v1727;
  }
  a2[60] = v1723;
  v1728 = v2085 - v2129;
  v1729 = a4[11];
  if (v1729 >= 1)
  {
    v1730 = 1 << (v1729 - 1);
    v1731 = v1730 - 1;
    v1732 = -v1730;
    if (v1728 < v1731)
      LODWORD(v1731) = v2085 - v2129;
    if (v1728 >= v1732)
      v1728 = v1731;
    else
      v1728 = v1732;
  }
  a2[61] = v1728;
  v1733 = v2132 - v2088;
  v1734 = a4[11];
  if (v1734 >= 1)
  {
    v1735 = 1 << (v1734 - 1);
    v1736 = v1735 - 1;
    v1737 = -v1735;
    if (v1733 < v1736)
      LODWORD(v1736) = v2132 - v2088;
    if (v1733 >= v1737)
      v1733 = v1736;
    else
      v1733 = v1737;
  }
  a2[62] = v1733;
  v1738 = v1930 - v2092;
  v1739 = a4[11];
  if (v1739 >= 1)
  {
    v1740 = 1 << (v1739 - 1);
    v1741 = v1740 - 1;
    v1742 = -v1740;
    if (v1738 < v1741)
      LODWORD(v1741) = v1930 - v2092;
    if (v1738 >= v1742)
      v1738 = v1741;
    else
      v1738 = v1742;
  }
  a2[63] = v1738;
  return result;
}

_WORD *av1_highbd_iwht4x4_16_add_c(int *a1, uint64_t a2, int a3, int a4)
{
  unsigned __int16 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  _WORD *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _WORD *result;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  _WORD *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _WORD *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _WORD *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  _WORD *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  _WORD *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  _WORD *v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  _WORD *v163;
  int v164;
  int v165;
  int v166;
  int v167;
  _WORD *v168;
  int v169;

  v4 = (unsigned __int16 *)(2 * a2);
  v5 = a1[4] >> 2;
  v6 = v5 + (*a1 >> 2);
  v7 = a1[12] >> 2;
  v8 = (a1[8] >> 2) - v7;
  v9 = (v6 - v8) >> 1;
  v10 = v9 - v7;
  v11 = v9 - v5;
  v12 = v6 - v10;
  v13 = v9 - v5 + v8;
  v14 = a1[5] >> 2;
  v15 = a1[13] >> 2;
  v16 = v14 + (a1[1] >> 2);
  v17 = (a1[9] >> 2) - v15;
  v18 = (v16 - v17) >> 1;
  v19 = v18 - v15;
  v20 = v18 - v14;
  v21 = v16 - v19;
  v22 = v18 - v14 + v17;
  v23 = a1[6] >> 2;
  v24 = a1[14] >> 2;
  v25 = v23 + (a1[2] >> 2);
  v26 = (a1[10] >> 2) - v24;
  v27 = (v25 - v26) >> 1;
  v28 = v27 - v24;
  v29 = v27 - v23;
  v30 = v25 - v28;
  v31 = v27 - v23 + v26;
  v32 = a1[7] >> 2;
  v33 = a1[15] >> 2;
  v34 = v32 + (a1[3] >> 2);
  v35 = (a1[11] >> 2) - v33;
  v36 = (v34 - v35) >> 1;
  v37 = v36 - v33;
  v38 = v36 - v32;
  v39 = v34 - v37;
  v40 = v38 + v35;
  v41 = a3;
  v42 = 2 * a3;
  v43 = 3 * a3;
  v44 = v21 + v12;
  v45 = v30 - v39;
  if (a4 == 12)
  {
    v88 = (v44 - v45) >> 1;
    v89 = v88 - v39;
    v90 = v88 - v21;
    v91 = v44 - v89 + *v4;
    if (v91 >= 4095)
      v91 = 4095;
    *v4 = v91 & ~(unsigned __int16)(v91 >> 31);
    v92 = v41;
    v93 = v89 + v4[v41];
    if (v93 >= 4095)
      v93 = 4095;
    v4[v92] = v93 & ~(unsigned __int16)(v93 >> 31);
    v94 = v42;
    v95 = v90 + v4[v94];
    if (v95 >= 4095)
      v95 = 4095;
    v4[v94] = v95 & ~(unsigned __int16)(v95 >> 31);
    v96 = v43;
    v97 = v90 + v45 + v4[v96];
    if (v97 >= 4095)
      v97 = 4095;
    v4[v96] = v97 & ~(unsigned __int16)(v97 >> 31);
    v98 = v19 + v10;
    v99 = v28 - v37;
    v100 = (v98 - v99) >> 1;
    v101 = v100 - v37;
    v102 = v100 - v19;
    v103 = v4 + 1;
    v104 = v98 - v101 + v4[1];
    if (v104 >= 4095)
      v104 = 4095;
    *v103 = v104 & ~(unsigned __int16)(v104 >> 31);
    v105 = v101 + (unsigned __int16)v103[v92];
    if (v105 >= 4095)
      v105 = 4095;
    v103[v92] = v105 & ~(unsigned __int16)(v105 >> 31);
    v106 = v102 + (unsigned __int16)v103[v94];
    if (v106 >= 4095)
      v106 = 4095;
    v103[v94] = v106 & ~(unsigned __int16)(v106 >> 31);
    v107 = v102 + v99 + (unsigned __int16)v103[v96];
    if (v107 >= 4095)
      v107 = 4095;
    v103[v96] = v107 & ~(unsigned __int16)(v107 >> 31);
    v108 = v20 + v11;
    v109 = v29 - v38;
    v110 = (v108 - v109) >> 1;
    v111 = v110 - v38;
    result = v4 + 2;
    v112 = v108 - v111 + v4[2];
    if (v112 >= 4095)
      v112 = 4095;
    *result = v112 & ~(unsigned __int16)(v112 >> 31);
    v113 = v111 + (unsigned __int16)result[v92];
    if (v113 >= 4095)
      v113 = 4095;
    result[v92] = v113 & ~(unsigned __int16)(v113 >> 31);
    v114 = v110 - v20;
    v115 = v114 + (unsigned __int16)result[v94];
    if (v115 >= 4095)
      v115 = 4095;
    result[v94] = v115 & ~(unsigned __int16)(v115 >> 31);
    v116 = v114 + v109 + (unsigned __int16)result[v96];
    if (v116 >= 4095)
      v116 = 4095;
    result[v96] = v116 & ~(unsigned __int16)(v116 >> 31);
    v117 = v22 + v13;
    v118 = v31 - v40;
    v119 = (v117 - v118) >> 1;
    v120 = v119 - v40;
    v121 = v119 - v22;
    v123 = v4[3];
    v122 = v4 + 3;
    v124 = v117 - v120 + v123;
    if (v124 >= 4095)
      v124 = 4095;
    *v122 = v124 & ~(unsigned __int16)(v124 >> 31);
    v125 = v120 + (unsigned __int16)v122[v92];
    if (v125 >= 4095)
      v125 = 4095;
    v122[v92] = v125 & ~(unsigned __int16)(v125 >> 31);
    v126 = v121 + (unsigned __int16)v122[v94];
    if (v126 >= 4095)
      v126 = 4095;
    v122[v94] = v126 & ~(unsigned __int16)(v126 >> 31);
    v127 = &v122[v96];
    v128 = v121 + v118 + (unsigned __int16)*v127;
    if (v128 >= 4095)
      v128 = 4095;
    *v127 = v128 & ~(unsigned __int16)(v128 >> 31);
  }
  else if (a4 == 10)
  {
    v46 = (v44 - v45) >> 1;
    v47 = v46 - v39;
    v48 = v46 - v21;
    v49 = v44 - v47 + *v4;
    if (v49 >= 1023)
      v49 = 1023;
    *v4 = v49 & ~(unsigned __int16)(v49 >> 31);
    v50 = v41;
    v51 = v47 + v4[v41];
    if (v51 >= 1023)
      v51 = 1023;
    v4[v50] = v51 & ~(unsigned __int16)(v51 >> 31);
    v52 = v42;
    v53 = v48 + v4[v52];
    if (v53 >= 1023)
      v53 = 1023;
    v4[v52] = v53 & ~(unsigned __int16)(v53 >> 31);
    v54 = v43;
    v55 = v48 + v45 + v4[v54];
    if (v55 >= 1023)
      v55 = 1023;
    v4[v54] = v55 & ~(unsigned __int16)(v55 >> 31);
    v56 = v19 + v10;
    v57 = v28 - v37;
    v58 = (v56 - v57) >> 1;
    v59 = v58 - v37;
    v60 = v58 - v19;
    v61 = v4 + 1;
    v62 = v56 - v59 + v4[1];
    if (v62 >= 1023)
      v62 = 1023;
    *v61 = v62 & ~(unsigned __int16)(v62 >> 31);
    v63 = v59 + (unsigned __int16)v61[v50];
    if (v63 >= 1023)
      v63 = 1023;
    v61[v50] = v63 & ~(unsigned __int16)(v63 >> 31);
    v64 = v60 + (unsigned __int16)v61[v52];
    if (v64 >= 1023)
      v64 = 1023;
    v61[v52] = v64 & ~(unsigned __int16)(v64 >> 31);
    v65 = v60 + v57 + (unsigned __int16)v61[v54];
    if (v65 >= 1023)
      v65 = 1023;
    v61[v54] = v65 & ~(unsigned __int16)(v65 >> 31);
    v66 = v20 + v11;
    v67 = v29 - v38;
    v68 = (v66 - v67) >> 1;
    v69 = v68 - v38;
    result = v4 + 2;
    v71 = v66 - v69 + v4[2];
    if (v71 >= 1023)
      v71 = 1023;
    *result = v71 & ~(unsigned __int16)(v71 >> 31);
    v72 = v69 + (unsigned __int16)result[v50];
    if (v72 >= 1023)
      v72 = 1023;
    result[v50] = v72 & ~(unsigned __int16)(v72 >> 31);
    v73 = v68 - v20;
    v74 = v73 + (unsigned __int16)result[v52];
    if (v74 >= 1023)
      v74 = 1023;
    result[v52] = v74 & ~(unsigned __int16)(v74 >> 31);
    v75 = v73 + v67 + (unsigned __int16)result[v54];
    if (v75 >= 1023)
      v75 = 1023;
    result[v54] = v75 & ~(unsigned __int16)(v75 >> 31);
    v76 = v22 + v13;
    v77 = v31 - v40;
    v78 = (v76 - v77) >> 1;
    v79 = v78 - v40;
    v80 = v78 - v22;
    v82 = v4[3];
    v81 = v4 + 3;
    v83 = v76 - v79 + v82;
    if (v83 >= 1023)
      v83 = 1023;
    *v81 = v83 & ~(unsigned __int16)(v83 >> 31);
    v84 = v79 + (unsigned __int16)v81[v50];
    if (v84 >= 1023)
      v84 = 1023;
    v81[v50] = v84 & ~(unsigned __int16)(v84 >> 31);
    v85 = v80 + (unsigned __int16)v81[v52];
    if (v85 >= 1023)
      v85 = 1023;
    v81[v52] = v85 & ~(unsigned __int16)(v85 >> 31);
    v86 = &v81[v54];
    v87 = v80 + v77 + (unsigned __int16)*v86;
    if (v87 >= 1023)
      v87 = 1023;
    *v86 = v87 & ~(unsigned __int16)(v87 >> 31);
  }
  else
  {
    v129 = (v44 - v45) >> 1;
    v130 = v129 - v39;
    v131 = v129 - v21;
    v132 = v44 - v130 + *v4;
    if (v132 >= 255)
      v132 = 255;
    *v4 = v132 & ~(unsigned __int16)(v132 >> 31);
    v133 = v41;
    v134 = v130 + v4[v41];
    if (v134 >= 255)
      v134 = 255;
    v4[v133] = v134 & ~(unsigned __int16)(v134 >> 31);
    v135 = v42;
    v136 = v131 + v4[v135];
    if (v136 >= 255)
      v136 = 255;
    v4[v135] = v136 & ~(unsigned __int16)(v136 >> 31);
    v137 = v43;
    v138 = v131 + v45 + v4[v137];
    if (v138 >= 255)
      v138 = 255;
    v4[v137] = v138 & ~(unsigned __int16)(v138 >> 31);
    v139 = v19 + v10;
    v140 = v28 - v37;
    v141 = (v139 - v140) >> 1;
    v142 = v141 - v37;
    v143 = v141 - v19;
    v144 = v4 + 1;
    v145 = v139 - v142 + v4[1];
    if (v145 >= 255)
      v145 = 255;
    *v144 = v145 & ~(unsigned __int16)(v145 >> 31);
    v146 = v142 + (unsigned __int16)v144[v133];
    if (v146 >= 255)
      v146 = 255;
    v144[v133] = v146 & ~(unsigned __int16)(v146 >> 31);
    v147 = v143 + (unsigned __int16)v144[v135];
    if (v147 >= 255)
      v147 = 255;
    v144[v135] = v147 & ~(unsigned __int16)(v147 >> 31);
    v148 = v143 + v140 + (unsigned __int16)v144[v137];
    if (v148 >= 255)
      v148 = 255;
    v144[v137] = v148 & ~(unsigned __int16)(v148 >> 31);
    v149 = v20 + v11;
    v150 = v29 - v38;
    v151 = (v149 - v150) >> 1;
    v152 = v151 - v38;
    result = v4 + 2;
    v153 = v149 - v152 + v4[2];
    if (v153 >= 255)
      v153 = 255;
    *result = v153 & ~(unsigned __int16)(v153 >> 31);
    v154 = v152 + (unsigned __int16)result[v133];
    if (v154 >= 255)
      v154 = 255;
    result[v133] = v154 & ~(unsigned __int16)(v154 >> 31);
    v155 = v151 - v20;
    v156 = v155 + (unsigned __int16)result[v135];
    if (v156 >= 255)
      v156 = 255;
    result[v135] = v156 & ~(unsigned __int16)(v156 >> 31);
    v157 = v155 + v150 + (unsigned __int16)result[v137];
    if (v157 >= 255)
      v157 = 255;
    result[v137] = v157 & ~(unsigned __int16)(v157 >> 31);
    v158 = v22 + v13;
    v159 = v31 - v40;
    v160 = (v158 - v159) >> 1;
    v161 = v160 - v40;
    v162 = v160 - v22;
    v164 = v4[3];
    v163 = v4 + 3;
    v165 = v158 - v161 + v164;
    if (v165 >= 255)
      v165 = 255;
    *v163 = v165 & ~(unsigned __int16)(v165 >> 31);
    v166 = v161 + (unsigned __int16)v163[v133];
    if (v166 >= 255)
      v166 = 255;
    v163[v133] = v166 & ~(unsigned __int16)(v166 >> 31);
    v167 = v162 + (unsigned __int16)v163[v135];
    if (v167 >= 255)
      v167 = 255;
    v163[v135] = v167 & ~(unsigned __int16)(v167 >> 31);
    v168 = &v163[v137];
    v169 = v162 + v159 + (unsigned __int16)*v168;
    if (v169 >= 255)
      v169 = 255;
    *v168 = v169 & ~(unsigned __int16)(v169 >> 31);
  }
  return result;
}

int *av1_highbd_iwht4x4_1_add_c(int *result, uint64_t a2, int a3, int a4)
{
  _WORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  _WORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _WORD *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _WORD *v27;
  int v28;
  int v29;
  int v30;
  _WORD *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  _WORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  _WORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  _WORD *v50;
  int v51;
  int v52;
  int v53;
  _WORD *v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  _WORD *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _WORD *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  _WORD *v73;
  int v74;
  int v75;
  int v76;
  _WORD *v77;
  int v78;

  v4 = (_WORD *)(2 * a2);
  v5 = *result;
  v6 = *result >> 3;
  v7 = (*result >> 2) - v6;
  v8 = v7 >> 1;
  v9 = v7 - (v7 >> 1);
  if (a4 == 12)
  {
    v33 = v9 + (unsigned __int16)*v4;
    if (v33 >= 4095)
      v33 = 4095;
    *v4 = v33 & ~(unsigned __int16)(v33 >> 31);
    v34 = v8 + (unsigned __int16)v4[a3];
    if (v34 >= 4095)
      v34 = 4095;
    v4[a3] = v34 & ~(unsigned __int16)(v34 >> 31);
    v35 = v8 + (unsigned __int16)v4[2 * a3];
    if (v35 >= 4095)
      v35 = 4095;
    v4[2 * a3] = v35 & ~(unsigned __int16)(v35 >> 31);
    v36 = 3 * a3;
    v37 = v8 + (unsigned __int16)v4[v36];
    if (v37 >= 4095)
      v37 = 4095;
    v4[3 * a3] = v37 & ~(unsigned __int16)(v37 >> 31);
    v38 = v5 >> 4;
    v39 = v6 - v38;
    v40 = v4 + 1;
    v41 = v39 + *(unsigned __int16 *)(2 * a2 + 2);
    if (v41 >= 4095)
      v41 = 4095;
    *v40 = v41 & ~(unsigned __int16)(v41 >> 31);
    v42 = v38 + (unsigned __int16)v40[a3];
    if (v42 >= 4095)
      v42 = 4095;
    v40[a3] = v42 & ~(unsigned __int16)(v42 >> 31);
    v43 = v38 + (unsigned __int16)v40[2 * a3];
    if (v43 >= 4095)
      v43 = 4095;
    v40[2 * a3] = v43 & ~(unsigned __int16)(v43 >> 31);
    v44 = v38 + (unsigned __int16)v40[3 * a3];
    if (v44 >= 4095)
      v44 = 4095;
    v40[3 * a3] = v44 & ~(unsigned __int16)(v44 >> 31);
    v45 = v4 + 2;
    v46 = v39 + *(unsigned __int16 *)(2 * a2 + 4);
    if (v46 >= 4095)
      v46 = 4095;
    *v45 = v46 & ~(unsigned __int16)(v46 >> 31);
    v47 = v38 + (unsigned __int16)v45[a3];
    if (v47 >= 4095)
      v47 = 4095;
    v45[a3] = v47 & ~(unsigned __int16)(v47 >> 31);
    v48 = v38 + (unsigned __int16)v45[2 * a3];
    if (v48 >= 4095)
      v48 = 4095;
    v45[2 * a3] = v48 & ~(unsigned __int16)(v48 >> 31);
    v49 = v38 + (unsigned __int16)v45[3 * a3];
    if (v49 >= 4095)
      v49 = 4095;
    v45[3 * a3] = v49 & ~(unsigned __int16)(v49 >> 31);
    v50 = v4 + 3;
    v51 = v39 + *(unsigned __int16 *)(2 * a2 + 6);
    if (v51 >= 4095)
      v51 = 4095;
    *v50 = v51 & ~(unsigned __int16)(v51 >> 31);
    v52 = v38 + (unsigned __int16)v50[a3];
    if (v52 >= 4095)
      v52 = 4095;
    v50[a3] = v52 & ~(unsigned __int16)(v52 >> 31);
    v53 = v38 + (unsigned __int16)v50[2 * a3];
    if (v53 >= 4095)
      v53 = 4095;
    v50[2 * a3] = v53 & ~(unsigned __int16)(v53 >> 31);
    v54 = &v50[v36];
    v55 = v38 + (unsigned __int16)*v54;
    if (v55 >= 4095)
      v55 = 4095;
    *v54 = v55 & ~(unsigned __int16)(v55 >> 31);
  }
  else if (a4 == 10)
  {
    v10 = v9 + (unsigned __int16)*v4;
    if (v10 >= 1023)
      v10 = 1023;
    *v4 = v10 & ~(unsigned __int16)(v10 >> 31);
    v11 = v8 + (unsigned __int16)v4[a3];
    if (v11 >= 1023)
      v11 = 1023;
    v4[a3] = v11 & ~(unsigned __int16)(v11 >> 31);
    v12 = v8 + (unsigned __int16)v4[2 * a3];
    if (v12 >= 1023)
      v12 = 1023;
    v4[2 * a3] = v12 & ~(unsigned __int16)(v12 >> 31);
    v13 = 3 * a3;
    v14 = v8 + (unsigned __int16)v4[v13];
    if (v14 >= 1023)
      v14 = 1023;
    v4[3 * a3] = v14 & ~(unsigned __int16)(v14 >> 31);
    v15 = v5 >> 4;
    v16 = v6 - v15;
    v17 = v4 + 1;
    v18 = v16 + *(unsigned __int16 *)(2 * a2 + 2);
    if (v18 >= 1023)
      v18 = 1023;
    *v17 = v18 & ~(unsigned __int16)(v18 >> 31);
    v19 = v15 + (unsigned __int16)v17[a3];
    if (v19 >= 1023)
      v19 = 1023;
    v17[a3] = v19 & ~(unsigned __int16)(v19 >> 31);
    v20 = v15 + (unsigned __int16)v17[2 * a3];
    if (v20 >= 1023)
      v20 = 1023;
    v17[2 * a3] = v20 & ~(unsigned __int16)(v20 >> 31);
    v21 = v15 + (unsigned __int16)v17[3 * a3];
    if (v21 >= 1023)
      v21 = 1023;
    v17[3 * a3] = v21 & ~(unsigned __int16)(v21 >> 31);
    v22 = v4 + 2;
    v23 = v16 + *(unsigned __int16 *)(2 * a2 + 4);
    if (v23 >= 1023)
      v23 = 1023;
    *v22 = v23 & ~(unsigned __int16)(v23 >> 31);
    v24 = v15 + (unsigned __int16)v22[a3];
    if (v24 >= 1023)
      v24 = 1023;
    v22[a3] = v24 & ~(unsigned __int16)(v24 >> 31);
    v25 = v15 + (unsigned __int16)v22[2 * a3];
    if (v25 >= 1023)
      v25 = 1023;
    v22[2 * a3] = v25 & ~(unsigned __int16)(v25 >> 31);
    v26 = v15 + (unsigned __int16)v22[3 * a3];
    if (v26 >= 1023)
      v26 = 1023;
    v22[3 * a3] = v26 & ~(unsigned __int16)(v26 >> 31);
    v27 = v4 + 3;
    v28 = v16 + *(unsigned __int16 *)(2 * a2 + 6);
    if (v28 >= 1023)
      v28 = 1023;
    *v27 = v28 & ~(unsigned __int16)(v28 >> 31);
    v29 = v15 + (unsigned __int16)v27[a3];
    if (v29 >= 1023)
      v29 = 1023;
    v27[a3] = v29 & ~(unsigned __int16)(v29 >> 31);
    v30 = v15 + (unsigned __int16)v27[2 * a3];
    if (v30 >= 1023)
      v30 = 1023;
    v27[2 * a3] = v30 & ~(unsigned __int16)(v30 >> 31);
    v31 = &v27[v13];
    v32 = v15 + (unsigned __int16)*v31;
    if (v32 >= 1023)
      v32 = 1023;
    *v31 = v32 & ~(unsigned __int16)(v32 >> 31);
  }
  else
  {
    v56 = v9 + (unsigned __int16)*v4;
    if (v56 >= 255)
      v56 = 255;
    *v4 = v56 & ~(unsigned __int16)(v56 >> 31);
    v57 = v8 + (unsigned __int16)v4[a3];
    if (v57 >= 255)
      v57 = 255;
    v4[a3] = v57 & ~(unsigned __int16)(v57 >> 31);
    v58 = v8 + (unsigned __int16)v4[2 * a3];
    if (v58 >= 255)
      v58 = 255;
    v4[2 * a3] = v58 & ~(unsigned __int16)(v58 >> 31);
    v59 = 3 * a3;
    v60 = v8 + (unsigned __int16)v4[v59];
    if (v60 >= 255)
      v60 = 255;
    v4[3 * a3] = v60 & ~(unsigned __int16)(v60 >> 31);
    v61 = v5 >> 4;
    v62 = v6 - v61;
    v63 = v4 + 1;
    v64 = v62 + *(unsigned __int16 *)(2 * a2 + 2);
    if (v64 >= 255)
      v64 = 255;
    *v63 = v64 & ~(unsigned __int16)(v64 >> 31);
    v65 = v61 + (unsigned __int16)v63[a3];
    if (v65 >= 255)
      v65 = 255;
    v63[a3] = v65 & ~(unsigned __int16)(v65 >> 31);
    v66 = v61 + (unsigned __int16)v63[2 * a3];
    if (v66 >= 255)
      v66 = 255;
    v63[2 * a3] = v66 & ~(unsigned __int16)(v66 >> 31);
    v67 = v61 + (unsigned __int16)v63[3 * a3];
    if (v67 >= 255)
      v67 = 255;
    v63[3 * a3] = v67 & ~(unsigned __int16)(v67 >> 31);
    v68 = v4 + 2;
    v69 = v62 + *(unsigned __int16 *)(2 * a2 + 4);
    if (v69 >= 255)
      v69 = 255;
    *v68 = v69 & ~(unsigned __int16)(v69 >> 31);
    v70 = v61 + (unsigned __int16)v68[a3];
    if (v70 >= 255)
      v70 = 255;
    v68[a3] = v70 & ~(unsigned __int16)(v70 >> 31);
    v71 = v61 + (unsigned __int16)v68[2 * a3];
    if (v71 >= 255)
      v71 = 255;
    v68[2 * a3] = v71 & ~(unsigned __int16)(v71 >> 31);
    v72 = v61 + (unsigned __int16)v68[3 * a3];
    if (v72 >= 255)
      v72 = 255;
    v68[3 * a3] = v72 & ~(unsigned __int16)(v72 >> 31);
    v73 = v4 + 3;
    v74 = v62 + *(unsigned __int16 *)(2 * a2 + 6);
    if (v74 >= 255)
      v74 = 255;
    *v73 = v74 & ~(unsigned __int16)(v74 >> 31);
    v75 = v61 + (unsigned __int16)v73[a3];
    if (v75 >= 255)
      v75 = 255;
    v73[a3] = v75 & ~(unsigned __int16)(v75 >> 31);
    v76 = v61 + (unsigned __int16)v73[2 * a3];
    if (v76 >= 255)
      v76 = 255;
    v73[2 * a3] = v76 & ~(unsigned __int16)(v76 >> 31);
    v77 = &v73[v59];
    v78 = v61 + (unsigned __int16)*v77;
    if (v78 >= 255)
      v78 = 255;
    *v77 = v78 & ~(unsigned __int16)(v78 >> 31);
  }
  return result;
}

void av1_lowbd_inv_txfm2d_add_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  int16x8_t *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  __n128 v32;
  int16x8_t v33;
  uint64_t v34;
  uint8x8_t *v35;
  int16x8_t *v36;
  uint64_t v37;
  uint64_t (*v38)();
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  char *v47;
  uint64_t (*v48)();
  unsigned int v49;
  int v50;
  char *v51;
  uint64_t (*v52)();
  unsigned int v53;
  unsigned int v54;
  char *v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  uint64_t (*v59)();
  unsigned int v60;
  unsigned int v61;
  uint64_t (*v62)();
  int v63;
  int v64;
  __int32 v65;
  __int32 v66;
  __int32 v67;
  __int32 v68;
  __int32 v69;
  __int32 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  int32x4_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  __int32 v89;
  int32x4_t v90;
  int32x4_t v91;
  uint64_t (*v92)();
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t *v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  _BYTE *v116;
  int v117;
  _BYTE *v118;
  int v119;
  _BYTE *v120;
  int v121;
  _BYTE *v122;
  int v123;
  _BYTE *v124;
  int v125;
  _BYTE *v126;
  int v127;
  _BYTE *v128;
  int v129;
  int v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  __int32 v140;
  int32x2_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint64_t (*v144)();
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _BYTE *v164;
  _BYTE *v165;
  _BYTE *v166;
  unint64_t *v167;
  int32x4_t v168;
  int v169;
  int v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  __int32 v178;
  int32x4_t v179;
  int32x4_t v180;
  uint64_t (*v181)();
  uint64_t v182;
  __int32 v183;
  __int32 v184;
  uint64_t v185;
  unint64_t *v186;
  unint64_t *v187;
  int32x4_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int32x4_t v192;
  int8x16_t v193;
  __int32 v194;
  __int32 v195;
  int8x16_t v196;
  _BYTE *v197;
  int v198;
  _BYTE *v199;
  int v200;
  _BYTE *v201;
  int v202;
  _BYTE *v203;
  int v204;
  _BYTE *v205;
  int v206;
  _BYTE *v207;
  int v208;
  _BYTE *v209;
  int v210;
  _BYTE *v211;
  int v212;
  _BYTE *v213;
  int v214;
  _BYTE *v215;
  int v216;
  _BYTE *v217;
  int v218;
  int v219;
  _BYTE *v220;
  int v221;
  _BYTE *v222;
  int v223;
  _BYTE *v224;
  int v225;
  _BYTE *v226;
  int v227;
  int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int32x2_t v245;
  unsigned int v246;
  __int32 v247;
  int32x2_t v248;
  int32x4_t v249;
  int32x4_t v250;
  uint64_t (*v251)();
  int v252;
  int v253;
  int v254;
  int v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  __int32 v264;
  __int32 v265;
  __int32 v266;
  __int32 v267;
  __int32 v268;
  __int32 v269;
  __int32 v270;
  __int32 v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  __int32 v276;
  __int32 v277;
  __int32 v278;
  __int32 v279;
  __int32 v280;
  __int32 v281;
  __int32 v282;
  __int32 v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  __int32 v288;
  __int32 v289;
  __int32 v290;
  __int32 v291;
  __int32 v292;
  __int32 v293;
  __int32 v294;
  __int32 v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  _BYTE *v305;
  _BYTE *v306;
  unint64_t *v307;
  int32x4_t v308;
  int v309;
  int v310;
  int v311;
  int v312;
  unsigned int v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  __int32 v318;
  int32x4_t v319;
  int32x4_t v320;
  uint64_t v321;
  _BYTE *v322;
  _BYTE *v323;
  _BYTE *v324;
  unint64_t *v325;
  int32x4_t v326;
  int v327;
  int v328;
  int v329;
  int v330;
  unsigned int v331;
  unsigned int v332;
  __int32 v333;
  int32x4_t v334;
  int32x4_t v335;
  uint64_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int v340;
  _BYTE *v341;
  int v342;
  _BYTE *v343;
  int v344;
  _BYTE *v345;
  int v346;
  _BYTE *v347;
  int v348;
  _BYTE *v349;
  int v350;
  _BYTE *v351;
  int v352;
  int v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v359;
  __int32 v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  uint64_t v365;
  _BYTE *v366;
  _BYTE *v367;
  _BYTE *v368;
  unint64_t *v369;
  int32x4_t v370;
  int v371;
  int v372;
  int v373;
  int v374;
  unsigned int v375;
  unsigned int v376;
  __int32 v377;
  int32x4_t v378;
  int32x4_t v379;
  uint8x8_t *v380;
  uint64_t v381;
  int32x4_t v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  __int32 v386;
  __int32 v387;
  int8x16_t v388;
  int8x16_t v389;
  int v390;
  _BYTE *v391;
  int v392;
  _BYTE *v393;
  int v394;
  _BYTE *v395;
  int v396;
  _BYTE *v397;
  int v398;
  _BYTE *v399;
  int v400;
  _BYTE *v401;
  int v402;
  _BYTE *v403;
  int v404;
  _BYTE *v405;
  int v406;
  _BYTE *v407;
  int v408;
  _BYTE *v409;
  int v410;
  _BYTE *v411;
  int v412;
  _BYTE *v413;
  int v414;
  _BYTE *v415;
  int v416;
  _BYTE *v417;
  int v418;
  int v419;
  unsigned int v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  unsigned int v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned int v431;
  unsigned int v432;
  unsigned int v433;
  __int32 v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  uint64_t v440;
  _BYTE *v441;
  _BYTE *v442;
  _BYTE *v443;
  unint64_t *v444;
  int32x4_t v445;
  int v446;
  int v447;
  int v448;
  int v449;
  unsigned int v450;
  unsigned int v451;
  __int32 v452;
  int32x4_t v453;
  int32x4_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  int v458;
  uint64_t i;
  int32x4_t v460;
  int v461;
  int v462;
  int v463;
  int v464;
  unsigned int v465;
  unsigned int v466;
  __int32 v467;
  int32x4_t v468;
  int32x4_t v469;
  uint64_t j;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int v474;
  _BYTE *v475;
  int v476;
  _BYTE *v477;
  int v478;
  _BYTE *v479;
  int v480;
  _BYTE *v481;
  int v482;
  _BYTE *v483;
  int v484;
  _BYTE *v485;
  int v486;
  int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  __int32 v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  uint64_t k;
  int32x4_t v500;
  int v501;
  int v502;
  int v503;
  int v504;
  unsigned int v505;
  unsigned int v506;
  __int32 v507;
  int32x4_t v508;
  int32x4_t v509;
  uint64_t m;
  int32x4_t v511;
  int8x16_t v512;
  int8x16_t v513;
  int8x16_t v514;
  __int32 v515;
  __int32 v516;
  int8x16_t v517;
  int8x16_t v518;
  int v519;
  _BYTE *v520;
  int v521;
  _BYTE *v522;
  int v523;
  _BYTE *v524;
  int v525;
  _BYTE *v526;
  int v527;
  _BYTE *v528;
  int v529;
  _BYTE *v530;
  int v531;
  _BYTE *v532;
  int v533;
  _BYTE *v534;
  int v535;
  _BYTE *v536;
  int v537;
  _BYTE *v538;
  int v539;
  _BYTE *v540;
  int v541;
  _BYTE *v542;
  int v543;
  _BYTE *v544;
  int v545;
  _BYTE *v546;
  int v547;
  int v548;
  unsigned int v549;
  unsigned int v550;
  unsigned int v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unsigned int v557;
  unsigned int v558;
  unsigned int v559;
  unsigned int v560;
  unsigned int v561;
  unsigned int v562;
  __int32 v563;
  int32x4_t v564;
  int32x4_t v565;
  int32x4_t v566;
  int32x4_t v567;
  int32x4_t v568;
  uint64_t n;
  int32x4_t v570;
  int v571;
  int v572;
  int v573;
  int v574;
  unsigned int v575;
  unsigned int v576;
  __int32 v577;
  int32x4_t v578;
  int32x4_t v579;
  int v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unsigned int v585;
  uint64_t v586;
  int v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  unint64_t v591;
  unsigned int v592;
  int16x8_t *v593;
  unint64_t v594;
  int64x2_t *v595;
  int64x2_t *v596;
  unint64_t *v597;
  int16x8_t *v598;
  int16x8_t *v599;
  uint64_t v600;
  uint64_t v601;
  int16x8_t v602;
  uint64_t v603;
  uint64_t v604;
  int16x8_t v605;
  int16x8_t *v606;
  uint64_t v607;
  unint64_t v608;
  int64x2_t *v609;
  int16x8_t *v610;
  int16x8_t v611;
  int16x8_t v612;
  int16x8_t v613;
  int16x8_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int32x4_t v619;
  int32x4_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  int64x2_t v627;
  int64x2_t v628;
  int64x2_t v629;
  int64x2_t v630;
  int64x2_t v631;
  int64x2_t v632;
  int64x2_t v633;
  int64x2_t v634;
  int64x2_t v635;
  int64x2_t v636;
  int64x2_t v637;
  int64x2_t v638;
  int64x2_t v639;
  unint64_t v640;
  int64x2_t *v641;
  int16x8_t v642;
  int16x8_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int16x8_t v646;
  int16x8_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int16x8_t v650;
  int16x8_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int16x8_t v654;
  int16x8_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int64x2_t v661;
  int64x2_t v662;
  int64x2_t v663;
  int64x2_t v664;
  int64x2_t v665;
  uint8x8_t *v666;
  uint64_t v667;
  char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unsigned int v672;
  int v673;
  int v674;
  uint64_t v675;
  int v676;
  signed int v677;
  void (*v678)(uint64_t *, uint64_t *, uint64_t, int16x8_t *, int64x2_t *, __n128, __n128);
  unint64_t v679;
  unsigned __int8 v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  int16x8_t *v684;
  __n128 v685;
  int64x2_t *v686;
  uint64_t v687;
  int16x4_t *v688;
  int16x8_t *v689;
  int16x8_t *v690;
  uint64_t v691;
  int16x4_t *v692;
  uint64_t v693;
  int32x4_t v694;
  uint64_t v695;
  int16x8_t *v696;
  int64x2_t *v697;
  uint64_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int32x4_t v701;
  int32x4_t v702;
  int16x8_t v703;
  int16x8_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int16x8_t v707;
  int32x4_t v708;
  int32x4_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int32x4_t v712;
  int32x4_t v713;
  int64x2_t v714;
  int64x2_t v715;
  int64x2_t v716;
  int64x2_t v717;
  int64x2_t v718;
  int64x2_t v719;
  int64x2_t v720;
  int64x2_t v721;
  uint64_t v722;
  uint64_t *v723;
  int16x8_t *v724;
  uint64_t v725;
  uint8x8_t *v726;
  uint64_t v727;
  uint64_t v728;
  uint16x8_t *v729;
  uint8x8_t *v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t *v736;
  uint8x8_t *v737;
  uint64_t v738;
  uint64_t v739;
  int32x4_t v740;
  uint64_t v741;
  uint64_t *v742;
  int16x4_t *v743;
  uint64_t v744;
  uint16x8_t *v745;
  uint16x8_t v746;
  int v747;
  uint64_t v748;
  uint64_t v749;
  uint16x8_t *v750;
  uint8x8_t *v751;
  uint64_t v752;
  int v753;
  int v754;
  int v755;
  char *v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  size_t v762;
  int v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  int v767;
  int32x4_t v768;
  unint64_t v769;
  unsigned int v770;
  int16x8_t *v771;
  unint64_t v772;
  int64x2_t *v773;
  int16x8_t v774;
  unint64_t *v775;
  int16x8_t *v776;
  int16x8_t *v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  unint64_t v781;
  int64x2_t *v782;
  int16x8_t v783;
  int16x8_t v784;
  int32x4_t v785;
  int32x4_t v786;
  int16x8_t v787;
  int16x8_t v788;
  int32x4_t v789;
  int32x4_t v790;
  int16x8_t v791;
  int16x8_t v792;
  int32x4_t v793;
  int32x4_t v794;
  int16x8_t v795;
  int16x8_t v796;
  int32x4_t v797;
  int32x4_t v798;
  int64x2_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int64x2_t v806;
  int v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  int v812;
  int v813;
  unsigned int v814;
  uint64_t v815;
  int v816;
  unint64_t v817;
  uint64_t v818;
  uint64_t v819;
  int v820;
  unint64_t v821;
  unsigned int v822;
  int16x8_t *v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  int64x2_t *v827;
  uint64_t v828;
  int64x2_t *v829;
  uint64_t v830;
  int16x8_t v831;
  unint64_t *v832;
  int16x8_t *v833;
  int16x8_t *v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  unint64_t v838;
  uint64_t v839;
  int16x8_t v840;
  int64x2_t *v841;
  int16x8_t *v842;
  int64x2_t *v843;
  unint64_t v844;
  int64x2_t *v845;
  int16x8_t *v846;
  int16x8_t v847;
  int16x8_t v848;
  int16x8_t v849;
  int16x8_t v850;
  int16x8_t v851;
  int16x8_t v852;
  int16x8_t v853;
  int16x8_t v854;
  int32x4_t v855;
  int32x4_t v856;
  int32x4_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int32x4_t v862;
  int64x2_t v863;
  int64x2_t v864;
  int64x2_t v865;
  int64x2_t v866;
  int64x2_t v867;
  int64x2_t v868;
  int64x2_t v869;
  int64x2_t v870;
  unint64_t v871;
  int64x2_t *v872;
  int16x8_t v873;
  int16x8_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int16x8_t v877;
  int16x8_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int16x8_t v881;
  int16x8_t v882;
  int32x4_t v883;
  int32x4_t v884;
  int16x8_t v885;
  int16x8_t v886;
  int32x4_t v887;
  int32x4_t v888;
  int64x2_t v889;
  int64x2_t v890;
  int64x2_t v891;
  int64x2_t v892;
  int64x2_t v893;
  int64x2_t v894;
  int64x2_t v895;
  int64x2_t v896;
  uint8x8_t *v897;
  uint64_t v898;
  int32x4_t v899;
  uint64_t *v900;
  int16x4_t *v901;
  uint64_t v902;
  uint16x8_t *v903;
  uint16x8_t v904;
  int v905;
  uint64_t v906;
  uint64_t v907;
  uint16x8_t *v908;
  uint8x8_t *v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  uint64_t *v913;
  int16x8_t v914;
  int16x8_t *v915;
  uint64_t v916;
  uint8x8_t *v917;
  uint64_t v918;
  uint64_t v919;
  uint16x8_t *v920;
  uint8x8_t *v921;
  int v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t *v927;
  uint8x8_t *v928;
  uint64_t v929;
  unsigned int v930;
  uint64_t v931;
  uint64_t v932;
  char v933;
  char v934;
  char v935;
  int v936;
  int16x8_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t vars0;
  uint64_t vars0a;
  uint64_t vars0b;
  uint64_t vars0c;
  uint64_t vars0d;
  int vars8_4;
  int vars8_4a;
  void (*v948)(unint64_t *, unint64_t *, uint64_t);
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  signed int v953;
  unsigned int v954;
  void (*v955)(unint64_t *, unint64_t *, uint64_t);
  void (*v956)(uint64_t *, uint64_t *, uint64_t);
  unsigned int v957;
  int64x2_t *v958;
  char *v959;
  int64x2_t *v960;
  uint64_t (*v961)();
  uint64_t v962;
  int16x8_t *v963;
  _BYTE *v964;
  unsigned int v965;
  unsigned int v966;
  unsigned int v967;
  int v968;
  int16x8_t *v969;
  unsigned int v970;
  char *v971;
  uint8x8_t *v972;

  v27 = (int16x8_t *)MEMORY[0x24BDAC7A8](a1, a2);
  v34 = v28;
  v972 = v35;
  v36 = v27;
  STACK[0x40D8] = *MEMORY[0x24BDAC8D0];
  v37 = v30;
  switch(v30)
  {
    case 0u:
      v964 = av1_inv_txfm_shift_ls;
      a19 = 0x10101010101010;
      v38 = lowbd_txfm_all_1d_arr[hitx_1d_tab[v29]];
      a20 = 0;
      if (v29 > 0xF)
      {
        v39 = 1;
        v40 = 1;
      }
      else
      {
        v39 = (0xBEAFu >> v29) & 1;
        v40 = (0x7F1Fu >> v29) & 1;
      }
      v62 = lowbd_txfm_all_1d_arr[vitx_1d_tab[v29]];
      v63 = v27[1].i32[0];
      LODWORD(STACK[0x20C0]) = v27->i32[0];
      LODWORD(STACK[0x20C4]) = v63;
      v64 = v27[3].i32[0];
      LODWORD(STACK[0x20C8]) = v27[2].i32[0];
      LODWORD(STACK[0x20CC]) = v64;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v38)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
      v65 = v36[1].i32[1];
      LODWORD(STACK[0x20C0]) = v36->i32[1];
      LODWORD(STACK[0x20C4]) = v65;
      v66 = v36[3].i32[1];
      LODWORD(STACK[0x20C8]) = v36[2].i32[1];
      LODWORD(STACK[0x20CC]) = v66;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v38)(&STACK[0x20C0], &STACK[0x20F0], 12, &a19);
      v67 = v36[1].i32[2];
      LODWORD(STACK[0x20C0]) = v36->i32[2];
      LODWORD(STACK[0x20C4]) = v67;
      v68 = v36[3].i32[2];
      LODWORD(STACK[0x20C8]) = v36[2].i32[2];
      LODWORD(STACK[0x20CC]) = v68;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v38)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
      v69 = v36[1].i32[3];
      LODWORD(STACK[0x20C0]) = v36->i32[3];
      LODWORD(STACK[0x20C4]) = v69;
      v70 = v36[3].i32[3];
      LODWORD(STACK[0x20C8]) = v36[2].i32[3];
      LODWORD(STACK[0x20CC]) = v70;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v38)(&STACK[0x20C0], &STACK[0x2110], 12, &a19);
      v71 = (int)v34;
      v72 = 2 * (int)v34;
      v73 = 3 * (int)v34;
      if (v39)
      {
        v74 = 0;
        v75 = 0;
        v76 = (char *)v972 + v73;
        v77 = (char *)v972 + v72;
        v78 = (char *)v972 + v71;
        do
        {
          if (v40)
          {
            v84 = *((_DWORD *)&STACK[0x20C0] + v75 + 8);
            LODWORD(STACK[0x20C0]) = v84;
            v85 = v75 + 4;
            v86 = v75 + 8;
            v87 = v75 + 12;
          }
          else
          {
            v84 = *((_DWORD *)&STACK[0x20EC] + v74);
            LODWORD(STACK[0x20C0]) = v84;
            v85 = v74 + 7;
            v86 = v74 + 11;
            v87 = v74 + 15;
          }
          v88 = *((_DWORD *)&STACK[0x20E0] + v85);
          LODWORD(STACK[0x20C4]) = v88;
          v89 = *((_DWORD *)&STACK[0x20E0] + v86);
          LODWORD(STACK[0x20C8]) = v89;
          v90.i64[0] = __PAIR64__(v88, v84);
          v90.i32[2] = v89;
          v90.i32[3] = *((_DWORD *)&STACK[0x20E0] + v87);
          v91.i64[0] = 0x7F0000007FLL;
          v91.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v90, v91), v91);
          ((void (*)(unint64_t *, unint64_t, uint64_t, uint64_t *))v62)(&STACK[0x20C0], (unint64_t)&STACK[0x20C0] | 0x10, 12, &a19);
          if (v964[1])
          {
            v79 = vrshlq_s32(*(int32x4_t *)&STACK[0x20D0], vdupq_n_s32((char)v964[1]));
            *(int32x4_t *)&STACK[0x20D0] = v79;
          }
          else
          {
            v79 = *(int32x4_t *)&STACK[0x20D0];
          }
          v80 = (v79.i32[0] + v972->u8[v75]) & ~((v79.i32[0] + v972->u8[v75]) >> 31);
          if (v80 >= 255)
            LOBYTE(v80) = -1;
          v972->i8[v75] = v80;
          v81 = (v79.i32[1] + v78[v75]) & ~((v79.i32[1] + v78[v75]) >> 31);
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          v78[v75] = v81;
          v82 = (v79.i32[2] + v77[v75]) & ~((v79.i32[2] + v77[v75]) >> 31);
          if (v82 >= 255)
            LOBYTE(v82) = -1;
          v77[v75] = v82;
          v83 = (v79.i32[3] + v76[v75]) & ~((v79.i32[3] + v76[v75]) >> 31);
          if (v83 >= 255)
            LOBYTE(v83) = -1;
          v76[v75++] = v83;
          --v74;
        }
        while (v75 != 4);
      }
      else if ((v40 & 1) != 0)
      {
        v321 = 0;
        v322 = (char *)v972 + v73;
        v323 = (char *)v972 + v72;
        v324 = (char *)v972 + v71;
        v325 = &STACK[0x20F0];
        do
        {
          v331 = *((_DWORD *)v325 - 4);
          LODWORD(STACK[0x20C0]) = v331;
          v332 = *(_DWORD *)v325;
          LODWORD(STACK[0x20C4]) = *(_DWORD *)v325;
          v333 = *((_DWORD *)v325 + 4);
          LODWORD(STACK[0x20C8]) = v333;
          v334.i64[0] = __PAIR64__(v332, v331);
          v334.i32[2] = v333;
          v334.i32[3] = *((_DWORD *)v325 + 8);
          v335.i64[0] = 0x7F0000007FLL;
          v335.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v334, v335), v335);
          ((void (*)(unint64_t *, unint64_t, uint64_t, uint64_t *))v62)(&STACK[0x20C0], (unint64_t)&STACK[0x20C0] | 0x10, 12, &a19);
          if (v964[1])
          {
            v326 = vrshlq_s32(*(int32x4_t *)&STACK[0x20D0], vdupq_n_s32((char)v964[1]));
            *(int32x4_t *)&STACK[0x20D0] = v326;
          }
          else
          {
            v326 = *(int32x4_t *)&STACK[0x20D0];
          }
          v327 = (v326.i32[3] + v972->u8[v321]) & ~((v326.i32[3] + v972->u8[v321]) >> 31);
          if (v327 >= 255)
            LOBYTE(v327) = -1;
          v972->i8[v321] = v327;
          v328 = (v326.i32[2] + v324[v321]) & ~((v326.i32[2] + v324[v321]) >> 31);
          if (v328 >= 255)
            LOBYTE(v328) = -1;
          v324[v321] = v328;
          v329 = (v326.i32[1] + v323[v321]) & ~((v326.i32[1] + v323[v321]) >> 31);
          if (v329 >= 255)
            LOBYTE(v329) = -1;
          v323[v321] = v329;
          v325 = (unint64_t *)((char *)v325 + 4);
          v330 = (v326.i32[0] + v322[v321]) & ~((v326.i32[0] + v322[v321]) >> 31);
          if (v330 >= 255)
            LOBYTE(v330) = -1;
          v322[v321++] = v330;
        }
        while (v321 != 4);
      }
      else
      {
        for (i = 60; i != 44; i -= 4)
        {
          v465 = *(_DWORD *)((char *)&STACK[0x20C0] + i - 16);
          LODWORD(STACK[0x20C0]) = v465;
          v466 = *(_DWORD *)((char *)&STACK[0x20C0] + i);
          LODWORD(STACK[0x20C4]) = v466;
          v467 = *(_DWORD *)((char *)&STACK[0x20C0] + i + 16);
          LODWORD(STACK[0x20C8]) = v467;
          v468.i64[0] = __PAIR64__(v466, v465);
          v468.i32[2] = v467;
          v468.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + i + 32);
          v469.i64[0] = 0x7F0000007FLL;
          v469.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v468, v469), v469);
          ((void (*)(unint64_t *, unint64_t, uint64_t, uint64_t *))v62)(&STACK[0x20C0], (unint64_t)&STACK[0x20C0] | 0x10, 12, &a19);
          if (v964[1])
          {
            v460 = vrshlq_s32(*(int32x4_t *)&STACK[0x20D0], vdupq_n_s32((char)v964[1]));
            *(int32x4_t *)&STACK[0x20D0] = v460;
          }
          else
          {
            v460 = *(int32x4_t *)&STACK[0x20D0];
          }
          v461 = (v460.i32[3] + v972->u8[0]) & ~((v460.i32[3] + v972->u8[0]) >> 31);
          if (v461 >= 255)
            LOBYTE(v461) = -1;
          v972->i8[0] = v461;
          v462 = (v460.i32[2] + v972->u8[v71]) & ~((v460.i32[2] + v972->u8[v71]) >> 31);
          if (v462 >= 255)
            LOBYTE(v462) = -1;
          v972->i8[v71] = v462;
          v463 = (v460.i32[1] + v972->u8[v72]) & ~((v460.i32[1] + v972->u8[v72]) >> 31);
          if (v463 >= 255)
            LOBYTE(v463) = -1;
          v972->i8[v72] = v463;
          v464 = (v460.i32[0] + v972->u8[v73]) & ~((v460.i32[0] + v972->u8[v73]) >> 31);
          if (v464 >= 255)
            LOBYTE(v464) = -1;
          v972->i8[v73] = v464;
          v972 = (uint8x8_t *)((char *)v972 + 1);
        }
      }
      return;
    case 5u:
      v46 = v28;
      v47 = off_25453EAC0[0];
      a20 = 0;
      a19 = 0x1010101010101010;
      v48 = lowbd_txfm_all_1d_arr[hitx_1d_tab[v29]];
      if (v29 > 0xF)
      {
        v965 = 1;
        v49 = 1;
      }
      else
      {
        v965 = (0xBEAFu >> v29) & 1;
        v49 = (0x7F1Fu >> v29) & 1;
      }
      v92 = lowbd_txfm_all_1d_arr[vitx_1d_tab[v29] + 3];
      v93 = (unint64_t)(2896 * v27[2].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v27->i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v93;
      v94 = (unint64_t)(2896 * v27[6].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v27[4].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v94;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
      v95 = (unint64_t)(2896 * v36[2].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v95;
      v96 = (unint64_t)(2896 * v36[6].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[4].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v96;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2110], 12, &a19);
      v97 = (unint64_t)(2896 * v36[2].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v97;
      v98 = (unint64_t)(2896 * v36[6].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[4].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v98;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2120], 12, &a19);
      v99 = (unint64_t)(2896 * v36[2].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v99;
      v100 = (unint64_t)(2896 * v36[6].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[4].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v100;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2130], 12, &a19);
      v101 = (unint64_t)(2896 * v36[3].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36[1].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v101;
      v102 = (unint64_t)(2896 * v36[7].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[5].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v102;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2140], 12, &a19);
      v103 = (unint64_t)(2896 * v36[3].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36[1].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v103;
      v104 = (unint64_t)(2896 * v36[7].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[5].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v104;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2150], 12, &a19);
      v105 = (unint64_t)(2896 * v36[3].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36[1].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v105;
      v106 = (unint64_t)(2896 * v36[7].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[5].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v106;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2160], 12, &a19);
      v107 = (unint64_t)(2896 * v36[3].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36[1].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v107;
      v108 = (unint64_t)(2896 * v36[7].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[5].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v108;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v48)(&STACK[0x20C0], &STACK[0x2170], 12, &a19);
      v109 = v46;
      if (v965)
      {
        v110 = 0;
        v111 = &STACK[0x214C];
        v112 = &STACK[0x2140];
        do
        {
          if (v49)
          {
            v131 = *((_DWORD *)v112 - 16);
            LODWORD(STACK[0x20C0]) = v131;
            v132 = *((_DWORD *)v112 - 12);
            LODWORD(STACK[0x20C4]) = v132;
            v133 = *((_DWORD *)v112 - 8);
            LODWORD(STACK[0x20C8]) = v133;
            v134 = *((_DWORD *)v112 - 4);
            LODWORD(STACK[0x20CC]) = v134;
            v135 = *(_DWORD *)v112;
            LODWORD(STACK[0x20D0]) = *(_DWORD *)v112;
            v136 = v110 + 20;
            v137 = v110 + 24;
            v138 = v110 + 28;
          }
          else
          {
            v131 = *((_DWORD *)v111 - 16);
            LODWORD(STACK[0x20C0]) = v131;
            v132 = *((_DWORD *)v111 - 12);
            LODWORD(STACK[0x20C4]) = v132;
            v133 = *((_DWORD *)v111 - 8);
            LODWORD(STACK[0x20C8]) = v133;
            v134 = *((_DWORD *)v111 - 4);
            LODWORD(STACK[0x20CC]) = v134;
            v135 = *(_DWORD *)v111;
            LODWORD(STACK[0x20D0]) = *(_DWORD *)v111;
            v136 = 23 - v110;
            v137 = 27 - v110;
            v138 = 31 - v110;
          }
          v139 = *((_DWORD *)&STACK[0x2100] + v136);
          LODWORD(STACK[0x20D4]) = v139;
          v140 = *((_DWORD *)&STACK[0x2100] + v137);
          LODWORD(STACK[0x20D8]) = v140;
          v141.i32[0] = v140;
          v141.i32[1] = *((_DWORD *)&STACK[0x2100] + v138);
          v142.i64[0] = __PAIR64__(v134, v133);
          v142.i64[1] = __PAIR64__(v139, v135);
          v143.i64[0] = 0x7F0000007FLL;
          v143.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C8] = vmaxq_s32(vminq_s32(v142, v143), v143);
          STACK[0x20C0] = (unint64_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v132, v131), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          STACK[0x20D8] = (unint64_t)vmax_s32(vmin_s32(v141, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v92)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v47[1])
          {
            v113 = vdupq_n_s32(v47[1]);
            v114 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], v113);
            v115 = vrshlq_s32(*(int32x4_t *)&STACK[0x20F0], v113);
            *(int32x4_t *)&STACK[0x20E0] = v114;
            *(int32x4_t *)&STACK[0x20F0] = v115;
          }
          else
          {
            v115 = *(int32x4_t *)&STACK[0x20F0];
            v114 = *(int32x4_t *)&STACK[0x20E0];
          }
          v116 = (char *)v972 + v110;
          v117 = (v114.i32[0] + v972->u8[v110]) & ~((v114.i32[0] + v972->u8[v110]) >> 31);
          if (v117 >= 255)
            LOBYTE(v117) = -1;
          *v116 = v117;
          v118 = &v116[v109];
          v119 = (v114.i32[1] + *v118) & ~((v114.i32[1] + *v118) >> 31);
          if (v119 >= 255)
            LOBYTE(v119) = -1;
          *v118 = v119;
          v120 = &v118[v109];
          v121 = (v114.i32[2] + *v120) & ~((v114.i32[2] + *v120) >> 31);
          if (v121 >= 255)
            LOBYTE(v121) = -1;
          *v120 = v121;
          v122 = &v120[v109];
          v123 = (v114.i32[3] + *v122) & ~((v114.i32[3] + *v122) >> 31);
          if (v123 >= 255)
            LOBYTE(v123) = -1;
          *v122 = v123;
          v124 = &v122[v109];
          v125 = (v115.i32[0] + *v124) & ~((v115.i32[0] + *v124) >> 31);
          if (v125 >= 255)
            LOBYTE(v125) = -1;
          *v124 = v125;
          v126 = &v124[v109];
          v127 = (v115.i32[1] + *v126) & ~((v115.i32[1] + *v126) >> 31);
          if (v127 >= 255)
            LOBYTE(v127) = -1;
          *v126 = v127;
          v128 = &v126[v109];
          v129 = (v115.i32[2] + *v128) & ~((v115.i32[2] + *v128) >> 31);
          if (v129 >= 255)
            LOBYTE(v129) = -1;
          *v128 = v129;
          v130 = (v115.i32[3] + v128[v109]) & ~((v115.i32[3] + v128[v109]) >> 31);
          if (v130 >= 255)
            LOBYTE(v130) = -1;
          v128[v109] = v130;
          ++v110;
          v111 = (unint64_t *)((char *)v111 - 4);
          v112 = (unint64_t *)((char *)v112 + 4);
        }
        while (v110 != 4);
      }
      else if ((v49 & 1) != 0)
      {
        v336 = -16;
        do
        {
          v354 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 80);
          LODWORD(STACK[0x20C0]) = v354;
          v355 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 96);
          LODWORD(STACK[0x20C4]) = v355;
          v356 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 112);
          LODWORD(STACK[0x20C8]) = v356;
          v357 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 128);
          LODWORD(STACK[0x20CC]) = v357;
          v358 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 144);
          LODWORD(STACK[0x20D0]) = v358;
          v359 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 160);
          LODWORD(STACK[0x20D4]) = v359;
          v360 = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 176);
          LODWORD(STACK[0x20D8]) = v360;
          v361.i64[0] = __PAIR64__(v355, v354);
          v361.i64[1] = __PAIR64__(v357, v356);
          v362.i64[0] = 0x7F0000007FLL;
          v362.i64[1] = 0x7F0000007FLL;
          v363.i64[0] = 0x7F0000007FLL;
          v363.i64[1] = 0x7F0000007FLL;
          v364.i64[0] = __PAIR64__(v359, v358);
          v364.i32[2] = v360;
          v364.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + v336 + 192);
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v361, v362), v363);
          *(int32x4_t *)&STACK[0x20D0] = vmaxq_s32(vminq_s32(v364, v362), v363);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v92)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v47[1])
          {
            v337 = vdupq_n_s32(v47[1]);
            v338 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], v337);
            v339 = vrshlq_s32(*(int32x4_t *)&STACK[0x20F0], v337);
            *(int32x4_t *)&STACK[0x20E0] = v338;
            *(int32x4_t *)&STACK[0x20F0] = v339;
          }
          else
          {
            v339 = *(int32x4_t *)&STACK[0x20F0];
            v338 = *(int32x4_t *)&STACK[0x20E0];
          }
          v340 = (v339.i32[3] + v972->u8[0]) & ~((v339.i32[3] + v972->u8[0]) >> 31);
          if (v340 >= 255)
            LOBYTE(v340) = -1;
          v972->i8[0] = v340;
          v341 = (char *)v972 + v109;
          v342 = (v339.i32[2] + v972->u8[v109]) & ~((v339.i32[2] + v972->u8[v109]) >> 31);
          if (v342 >= 255)
            LOBYTE(v342) = -1;
          *v341 = v342;
          v343 = &v341[v109];
          v344 = (v339.i32[1] + *v343) & ~((v339.i32[1] + *v343) >> 31);
          if (v344 >= 255)
            LOBYTE(v344) = -1;
          *v343 = v344;
          v345 = &v343[v109];
          v346 = (v339.i32[0] + *v345) & ~((v339.i32[0] + *v345) >> 31);
          if (v346 >= 255)
            LOBYTE(v346) = -1;
          *v345 = v346;
          v347 = &v345[v109];
          v348 = (v338.i32[3] + *v347) & ~((v338.i32[3] + *v347) >> 31);
          if (v348 >= 255)
            LOBYTE(v348) = -1;
          *v347 = v348;
          v349 = &v347[v109];
          v350 = (v338.i32[2] + *v349) & ~((v338.i32[2] + *v349) >> 31);
          if (v350 >= 255)
            LOBYTE(v350) = -1;
          *v349 = v350;
          v351 = &v349[v109];
          v352 = (v338.i32[1] + *v351) & ~((v338.i32[1] + *v351) >> 31);
          if (v352 >= 255)
            LOBYTE(v352) = -1;
          *v351 = v352;
          v353 = (v338.i32[0] + v351[v109]) & ~((v338.i32[0] + v351[v109]) >> 31);
          if (v353 >= 255)
            LOBYTE(v353) = -1;
          v351[v109] = v353;
          v972 = (uint8x8_t *)((char *)v972 + 1);
          v336 += 4;
        }
        while (v336);
      }
      else
      {
        for (j = 108; j != 92; j -= 4)
        {
          v488 = *(_DWORD *)((char *)&STACK[0x20C0] + j - 32);
          LODWORD(STACK[0x20C0]) = v488;
          v489 = *(_DWORD *)((char *)&STACK[0x20C0] + j - 16);
          LODWORD(STACK[0x20C4]) = v489;
          v490 = *(_DWORD *)((char *)&STACK[0x20C0] + j);
          LODWORD(STACK[0x20C8]) = v490;
          v491 = *(_DWORD *)((char *)&STACK[0x20C0] + j + 16);
          LODWORD(STACK[0x20CC]) = v491;
          v492 = *(_DWORD *)((char *)&STACK[0x20C0] + j + 32);
          LODWORD(STACK[0x20D0]) = v492;
          v493 = *(_DWORD *)((char *)&STACK[0x20C0] + j + 48);
          LODWORD(STACK[0x20D4]) = v493;
          v494 = *(_DWORD *)((char *)&STACK[0x20C0] + j + 64);
          LODWORD(STACK[0x20D8]) = v494;
          v495.i64[0] = __PAIR64__(v489, v488);
          v495.i64[1] = __PAIR64__(v491, v490);
          v496.i64[0] = 0x7F0000007FLL;
          v496.i64[1] = 0x7F0000007FLL;
          v497.i64[0] = 0x7F0000007FLL;
          v497.i64[1] = 0x7F0000007FLL;
          v498.i64[0] = __PAIR64__(v493, v492);
          v498.i32[2] = v494;
          v498.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + j + 80);
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v495, v496), v497);
          *(int32x4_t *)&STACK[0x20D0] = vmaxq_s32(vminq_s32(v498, v496), v497);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v92)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v47[1])
          {
            v471 = vdupq_n_s32(v47[1]);
            v472 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], v471);
            v473 = vrshlq_s32(*(int32x4_t *)&STACK[0x20F0], v471);
            *(int32x4_t *)&STACK[0x20E0] = v472;
            *(int32x4_t *)&STACK[0x20F0] = v473;
          }
          else
          {
            v473 = *(int32x4_t *)&STACK[0x20F0];
            v472 = *(int32x4_t *)&STACK[0x20E0];
          }
          v474 = (v473.i32[3] + v972->u8[0]) & ~((v473.i32[3] + v972->u8[0]) >> 31);
          if (v474 >= 255)
            LOBYTE(v474) = -1;
          v972->i8[0] = v474;
          v475 = (char *)v972 + v109;
          v476 = (v473.i32[2] + v972->u8[v109]) & ~((v473.i32[2] + v972->u8[v109]) >> 31);
          if (v476 >= 255)
            LOBYTE(v476) = -1;
          *v475 = v476;
          v477 = &v475[v109];
          v478 = (v473.i32[1] + *v477) & ~((v473.i32[1] + *v477) >> 31);
          if (v478 >= 255)
            LOBYTE(v478) = -1;
          *v477 = v478;
          v479 = &v477[v109];
          v480 = (v473.i32[0] + *v479) & ~((v473.i32[0] + *v479) >> 31);
          if (v480 >= 255)
            LOBYTE(v480) = -1;
          *v479 = v480;
          v481 = &v479[v109];
          v482 = (v472.i32[3] + *v481) & ~((v472.i32[3] + *v481) >> 31);
          if (v482 >= 255)
            LOBYTE(v482) = -1;
          *v481 = v482;
          v483 = &v481[v109];
          v484 = (v472.i32[2] + *v483) & ~((v472.i32[2] + *v483) >> 31);
          if (v484 >= 255)
            LOBYTE(v484) = -1;
          *v483 = v484;
          v485 = &v483[v109];
          v486 = (v472.i32[1] + *v485) & ~((v472.i32[1] + *v485) >> 31);
          if (v486 >= 255)
            LOBYTE(v486) = -1;
          *v485 = v486;
          v487 = (v472.i32[0] + v485[v109]) & ~((v472.i32[0] + v485[v109]) >> 31);
          if (v487 >= 255)
            LOBYTE(v487) = -1;
          v485[v109] = v487;
          v972 = (uint8x8_t *)((char *)v972 + 1);
        }
      }
      return;
    case 6u:
      v50 = v28;
      v51 = off_25453EAC8;
      a20 = 0;
      a19 = 0x1010101010101010;
      v52 = lowbd_txfm_all_1d_arr[hitx_1d_tab[v29] + 3];
      if (v29 > 0xF)
      {
        v53 = 1;
        v54 = 1;
      }
      else
      {
        v53 = (0xBEAFu >> v29) & 1;
        v54 = (0x7F1Fu >> v29) & 1;
      }
      v966 = v54;
      v144 = lowbd_txfm_all_1d_arr[vitx_1d_tab[v29]];
      v145 = (unint64_t)(2896 * v27[1].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v27->i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v145;
      v146 = (unint64_t)(2896 * v27[3].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v27[2].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v146;
      v147 = (unint64_t)(2896 * v27[5].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20D0]) = (unint64_t)(2896 * v27[4].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20D4]) = v147;
      v148 = (unint64_t)(2896 * v27[7].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20D8]) = (unint64_t)(2896 * v27[6].i32[0] + 2048) >> 12;
      LODWORD(STACK[0x20DC]) = v148;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v52)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
      v149 = (unint64_t)(2896 * v36[1].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v149;
      v150 = (unint64_t)(2896 * v36[3].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[2].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v150;
      v151 = (unint64_t)(2896 * v36[5].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20D0]) = (unint64_t)(2896 * v36[4].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20D4]) = v151;
      v152 = (unint64_t)(2896 * v36[7].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20D8]) = (unint64_t)(2896 * v36[6].i32[1] + 2048) >> 12;
      LODWORD(STACK[0x20DC]) = v152;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v52)(&STACK[0x20C0], &STACK[0x2120], 12, &a19);
      v153 = (unint64_t)(2896 * v36[1].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v153;
      v154 = (unint64_t)(2896 * v36[3].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[2].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v154;
      v155 = (unint64_t)(2896 * v36[5].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20D0]) = (unint64_t)(2896 * v36[4].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20D4]) = v155;
      v156 = (unint64_t)(2896 * v36[7].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20D8]) = (unint64_t)(2896 * v36[6].i32[2] + 2048) >> 12;
      LODWORD(STACK[0x20DC]) = v156;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v52)(&STACK[0x20C0], &STACK[0x2140], 12, &a19);
      v157 = (unint64_t)(2896 * v36[1].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C0]) = (unint64_t)(2896 * v36->i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C4]) = v157;
      v158 = (unint64_t)(2896 * v36[3].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20C8]) = (unint64_t)(2896 * v36[2].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20CC]) = v158;
      v159 = (unint64_t)(2896 * v36[5].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20D0]) = (unint64_t)(2896 * v36[4].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20D4]) = v159;
      v160 = (unint64_t)(2896 * v36[7].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20D8]) = (unint64_t)(2896 * v36[6].i32[3] + 2048) >> 12;
      LODWORD(STACK[0x20DC]) = v160;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v52)(&STACK[0x20C0], &STACK[0x2160], 12, &a19);
      v161 = 2 * v50;
      v162 = 3 * v50;
      if (v53)
      {
        v163 = 0;
        v164 = (char *)v972 + v162;
        v165 = (char *)v972 + v161;
        v166 = (char *)v972 + v50;
        v167 = &STACK[0x211C];
        do
        {
          if (v966)
          {
            v173 = *((_DWORD *)&STACK[0x2100] + v163);
            LODWORD(STACK[0x20C0]) = v173;
            v174 = v163 + 8;
            v175 = v163 + 16;
            v176 = v163 + 24;
          }
          else
          {
            v173 = *(_DWORD *)v167;
            LODWORD(STACK[0x20C0]) = *(_DWORD *)v167;
            v174 = 15 - v163;
            v175 = 23 - v163;
            v176 = 31 - v163;
          }
          v177 = *((_DWORD *)&STACK[0x2100] + v174);
          LODWORD(STACK[0x20C4]) = v177;
          v178 = *((_DWORD *)&STACK[0x2100] + v175);
          LODWORD(STACK[0x20C8]) = v178;
          v179.i64[0] = __PAIR64__(v177, v173);
          v179.i32[2] = v178;
          v179.i32[3] = *((_DWORD *)&STACK[0x2100] + v176);
          v180.i64[0] = 0x7F0000007FLL;
          v180.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v179, v180), v180);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v144)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v51[1])
          {
            v168 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], vdupq_n_s32(v51[1]));
            *(int32x4_t *)&STACK[0x20E0] = v168;
          }
          else
          {
            v168 = *(int32x4_t *)&STACK[0x20E0];
          }
          v169 = (v168.i32[0] + v972->u8[v163]) & ~((v168.i32[0] + v972->u8[v163]) >> 31);
          if (v169 >= 255)
            LOBYTE(v169) = -1;
          v972->i8[v163] = v169;
          v170 = (v168.i32[1] + v166[v163]) & ~((v168.i32[1] + v166[v163]) >> 31);
          if (v170 >= 255)
            LOBYTE(v170) = -1;
          v166[v163] = v170;
          v171 = (v168.i32[2] + v165[v163]) & ~((v168.i32[2] + v165[v163]) >> 31);
          if (v171 >= 255)
            LOBYTE(v171) = -1;
          v165[v163] = v171;
          v172 = (v168.i32[3] + v164[v163]) & ~((v168.i32[3] + v164[v163]) >> 31);
          if (v172 >= 255)
            LOBYTE(v172) = -1;
          v164[v163++] = v172;
          v167 = (unint64_t *)((char *)v167 - 4);
        }
        while (v163 != 8);
      }
      else if ((v966 & 1) != 0)
      {
        v365 = 0;
        v366 = (char *)v972 + v162;
        v367 = (char *)v972 + v161;
        v368 = (char *)v972 + v50;
        v369 = &STACK[0x2120];
        do
        {
          v375 = *((_DWORD *)v369 - 8);
          LODWORD(STACK[0x20C0]) = v375;
          v376 = *(_DWORD *)v369;
          LODWORD(STACK[0x20C4]) = *(_DWORD *)v369;
          v377 = *((_DWORD *)v369 + 8);
          LODWORD(STACK[0x20C8]) = v377;
          v378.i64[0] = __PAIR64__(v376, v375);
          v378.i32[2] = v377;
          v378.i32[3] = *((_DWORD *)v369 + 16);
          v379.i64[0] = 0x7F0000007FLL;
          v379.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v378, v379), v379);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v144)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v51[1])
          {
            v370 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], vdupq_n_s32(v51[1]));
            *(int32x4_t *)&STACK[0x20E0] = v370;
          }
          else
          {
            v370 = *(int32x4_t *)&STACK[0x20E0];
          }
          v371 = (v370.i32[3] + v972->u8[v365]) & ~((v370.i32[3] + v972->u8[v365]) >> 31);
          if (v371 >= 255)
            LOBYTE(v371) = -1;
          v972->i8[v365] = v371;
          v372 = (v370.i32[2] + v368[v365]) & ~((v370.i32[2] + v368[v365]) >> 31);
          if (v372 >= 255)
            LOBYTE(v372) = -1;
          v368[v365] = v372;
          v373 = (v370.i32[1] + v367[v365]) & ~((v370.i32[1] + v367[v365]) >> 31);
          if (v373 >= 255)
            LOBYTE(v373) = -1;
          v367[v365] = v373;
          v369 = (unint64_t *)((char *)v369 + 4);
          v374 = (v370.i32[0] + v366[v365]) & ~((v370.i32[0] + v366[v365]) >> 31);
          if (v374 >= 255)
            LOBYTE(v374) = -1;
          v366[v365++] = v374;
        }
        while (v365 != 8);
      }
      else
      {
        for (k = 124; k != 92; k -= 4)
        {
          v505 = *(_DWORD *)((char *)&STACK[0x20C0] + k - 32);
          LODWORD(STACK[0x20C0]) = v505;
          v506 = *(_DWORD *)((char *)&STACK[0x20C0] + k);
          LODWORD(STACK[0x20C4]) = v506;
          v507 = *(_DWORD *)((char *)&STACK[0x20C0] + k + 32);
          LODWORD(STACK[0x20C8]) = v507;
          v508.i64[0] = __PAIR64__(v506, v505);
          v508.i32[2] = v507;
          v508.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + k + 64);
          v509.i64[0] = 0x7F0000007FLL;
          v509.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v508, v509), v509);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v144)(&STACK[0x20C0], &STACK[0x20E0], 12, &a19);
          if (v51[1])
          {
            v500 = vrshlq_s32(*(int32x4_t *)&STACK[0x20E0], vdupq_n_s32(v51[1]));
            *(int32x4_t *)&STACK[0x20E0] = v500;
          }
          else
          {
            v500 = *(int32x4_t *)&STACK[0x20E0];
          }
          v501 = (v500.i32[3] + v972->u8[0]) & ~((v500.i32[3] + v972->u8[0]) >> 31);
          if (v501 >= 255)
            LOBYTE(v501) = -1;
          v972->i8[0] = v501;
          v502 = (v500.i32[2] + v972->u8[v50]) & ~((v500.i32[2] + v972->u8[v50]) >> 31);
          if (v502 >= 255)
            LOBYTE(v502) = -1;
          v972->i8[v50] = v502;
          v503 = (v500.i32[1] + v972->u8[2 * v50]) & ~((v500.i32[1] + v972->u8[2 * v50]) >> 31);
          if (v503 >= 255)
            LOBYTE(v503) = -1;
          v972->i8[2 * v50] = v503;
          v504 = (v500.i32[0] + v972->u8[3 * v50]) & ~((v500.i32[0] + v972->u8[3 * v50]) >> 31);
          if (v504 >= 255)
            LOBYTE(v504) = -1;
          v972->i8[3 * v50] = v504;
          v972 = (uint8x8_t *)((char *)v972 + 1);
        }
      }
      return;
    case 0xDu:
      vars0 = v28;
      v55 = off_25453EB00[0];
      a20 = 4112;
      a19 = 0x1010101010101010;
      if (v29 > 0xF)
      {
        v56 = 1;
        v57 = 1;
      }
      else
      {
        v56 = (0xBEAFu >> v29) & 1;
        v57 = (0x7F1Fu >> v29) & 1;
      }
      v181 = lowbd_txfm_all_1d_arr[hitx_1d_tab[v29]];
      v961 = lowbd_txfm_all_1d_arr[vitx_1d_tab[v29] + 6];
      v182 = 128;
      do
      {
        v183 = v36[4].i32[0];
        LODWORD(STACK[0x20C0]) = v36->i32[0];
        LODWORD(STACK[0x20C4]) = v183;
        v184 = v36[12].i32[0];
        LODWORD(STACK[0x20C8]) = v36[8].i32[0];
        LODWORD(STACK[0x20CC]) = v184;
        ((void (*)(unint64_t *, char *, uint64_t, uint64_t *))v181)(&STACK[0x20C0], (char *)&STACK[0x20C0] + v182, 12, &a19);
        if (*v55)
          *(int32x4_t *)((char *)&STACK[0x20C0] + v182) = vrshlq_s32(*(int32x4_t *)((char *)&STACK[0x20C0] + v182), vdupq_n_s32(*v55));
        v182 += 16;
        v36 = (int16x8_t *)((char *)v36 + 4);
      }
      while ((_DWORD)v182 != 384);
      if (v56)
      {
        v185 = 0;
        v186 = &STACK[0x216C];
        v187 = &STACK[0x2160];
        do
        {
          if (v57)
          {
            v229 = *((_DWORD *)v187 - 8);
            LODWORD(STACK[0x20C0]) = v229;
            v230 = *((_DWORD *)v187 - 4);
            LODWORD(STACK[0x20C4]) = v230;
            v231 = *(_DWORD *)v187;
            LODWORD(STACK[0x20C8]) = *(_DWORD *)v187;
            v232 = *((_DWORD *)v187 + 4);
            LODWORD(STACK[0x20CC]) = v232;
            v233 = *((_DWORD *)v187 + 8);
            LODWORD(STACK[0x20D0]) = v233;
            v234 = *((_DWORD *)v187 + 12);
            LODWORD(STACK[0x20D4]) = v234;
            v235 = *((_DWORD *)v187 + 16);
            LODWORD(STACK[0x20D8]) = v235;
            v236 = *((_DWORD *)v187 + 20);
            LODWORD(STACK[0x20DC]) = v236;
            v237 = *((_DWORD *)v187 + 24);
            LODWORD(STACK[0x20E0]) = v237;
            v238 = *((_DWORD *)v187 + 28);
            LODWORD(STACK[0x20E4]) = v238;
            v239 = *((_DWORD *)v187 + 32);
            LODWORD(STACK[0x20E8]) = v239;
            v240 = *((_DWORD *)v187 + 36);
            LODWORD(STACK[0x20EC]) = v240;
            v241 = *((_DWORD *)v187 + 40);
            LODWORD(STACK[0x20F0]) = v241;
            v242 = v185 + 52;
            v243 = v185 + 56;
            v244 = v185 + 60;
          }
          else
          {
            v229 = *((_DWORD *)v186 - 8);
            LODWORD(STACK[0x20C0]) = v229;
            v230 = *((_DWORD *)v186 - 4);
            LODWORD(STACK[0x20C4]) = v230;
            v231 = *(_DWORD *)v186;
            LODWORD(STACK[0x20C8]) = *(_DWORD *)v186;
            v232 = *((_DWORD *)v186 + 4);
            LODWORD(STACK[0x20CC]) = v232;
            v233 = *((_DWORD *)v186 + 8);
            LODWORD(STACK[0x20D0]) = v233;
            v234 = *((_DWORD *)v186 + 12);
            LODWORD(STACK[0x20D4]) = v234;
            v235 = *((_DWORD *)v186 + 16);
            LODWORD(STACK[0x20D8]) = v235;
            v236 = *((_DWORD *)v186 + 20);
            LODWORD(STACK[0x20DC]) = v236;
            v237 = *((_DWORD *)v186 + 24);
            LODWORD(STACK[0x20E0]) = v237;
            v238 = *((_DWORD *)v186 + 28);
            LODWORD(STACK[0x20E4]) = v238;
            v239 = *((_DWORD *)v186 + 32);
            LODWORD(STACK[0x20E8]) = v239;
            v240 = *((_DWORD *)v186 + 36);
            LODWORD(STACK[0x20EC]) = v240;
            v241 = *((_DWORD *)v186 + 40);
            LODWORD(STACK[0x20F0]) = v241;
            v242 = 55 - v185;
            v243 = 59 - v185;
            v244 = 63 - v185;
          }
          v245 = (int32x2_t)__PAIR64__(v230, v229);
          v246 = *((_DWORD *)&STACK[0x2140] + v242);
          LODWORD(STACK[0x20F4]) = v246;
          v247 = *((_DWORD *)&STACK[0x2140] + v243);
          LODWORD(STACK[0x20F8]) = v247;
          v248.i32[0] = v247;
          v248.i32[1] = *((_DWORD *)&STACK[0x2140] + v244);
          STACK[0x20C0] = (unint64_t)vmax_s32(vmin_s32(v245, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          STACK[0x20C8] = (unint64_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v232, v231), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          STACK[0x20D0] = (unint64_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v234, v233), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          STACK[0x20D8] = (unint64_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v236, v235), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          v249.i64[0] = __PAIR64__(v240, v239);
          v249.i64[1] = __PAIR64__(v246, v241);
          v250.i64[0] = 0x7F0000007FLL;
          v250.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20E8] = vmaxq_s32(vminq_s32(v249, v250), v250);
          STACK[0x20E0] = (unint64_t)vmax_s32(vmin_s32((int32x2_t)__PAIR64__(v238, v237), (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          STACK[0x20F8] = (unint64_t)vmax_s32(vmin_s32(v248, (int32x2_t)0x7F0000007FLL), (int32x2_t)0x7F0000007FLL);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v961)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
          if (v55[1])
          {
            v188 = vdupq_n_s32(v55[1]);
            v189 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2100], v188);
            v190 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2110], v188);
            *(int8x16_t *)&STACK[0x2100] = v189;
            *(int8x16_t *)&STACK[0x2110] = v190;
            v191 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2120], v188);
            v192 = vrshlq_s32(*(int32x4_t *)&STACK[0x2130], v188);
            *(int8x16_t *)&STACK[0x2120] = v191;
            *(int32x4_t *)&STACK[0x2130] = v192;
            v193 = vextq_s8(v189, v190, 4uLL);
            v194 = v189.i32[0];
            v195 = v191.i32[1];
            v196 = vextq_s8(v190, v191, 4uLL);
          }
          else
          {
            v196 = *(int8x16_t *)&STACK[0x2114];
            v193 = *(int8x16_t *)&STACK[0x2104];
            v194 = STACK[0x2100];
            v195 = STACK[0x2124];
          }
          v197 = (char *)v972 + v185;
          v198 = (v194 + v972->u8[v185]) & ~((v194 + v972->u8[v185]) >> 31);
          if (v198 >= 255)
            LOBYTE(v198) = -1;
          *v197 = v198;
          v199 = &v197[(int)vars0];
          v200 = (v193.i32[0] + *v199) & ~((v193.i32[0] + *v199) >> 31);
          if (v200 >= 255)
            LOBYTE(v200) = -1;
          *v199 = v200;
          v201 = &v199[(int)vars0];
          v202 = (v193.i32[1] + *v201) & ~((v193.i32[1] + *v201) >> 31);
          if (v202 >= 255)
            LOBYTE(v202) = -1;
          *v201 = v202;
          v203 = &v201[(int)vars0];
          v204 = (v193.i32[2] + *v203) & ~((v193.i32[2] + *v203) >> 31);
          if (v204 >= 255)
            LOBYTE(v204) = -1;
          *v203 = v204;
          v205 = &v203[(int)vars0];
          v206 = (v193.i32[3] + *v205) & ~((v193.i32[3] + *v205) >> 31);
          if (v206 >= 255)
            LOBYTE(v206) = -1;
          *v205 = v206;
          v207 = &v205[(int)vars0];
          v208 = (v196.i32[0] + *v207) & ~((v196.i32[0] + *v207) >> 31);
          if (v208 >= 255)
            LOBYTE(v208) = -1;
          *v207 = v208;
          v209 = &v207[(int)vars0];
          v210 = (v196.i32[1] + *v209) & ~((v196.i32[1] + *v209) >> 31);
          if (v210 >= 255)
            LOBYTE(v210) = -1;
          *v209 = v210;
          v211 = &v209[(int)vars0];
          v212 = (v196.i32[2] + *v211) & ~((v196.i32[2] + *v211) >> 31);
          if (v212 >= 255)
            LOBYTE(v212) = -1;
          *v211 = v212;
          v213 = &v211[(int)vars0];
          v214 = (v196.i32[3] + *v213) & ~((v196.i32[3] + *v213) >> 31);
          if (v214 >= 255)
            LOBYTE(v214) = -1;
          *v213 = v214;
          v215 = &v213[(int)vars0];
          v216 = (v195 + *v215) & ~((v195 + *v215) >> 31);
          if (v216 >= 255)
            LOBYTE(v216) = -1;
          *v215 = v216;
          v217 = &v215[(int)vars0];
          v218 = STACK[0x212C];
          v219 = (LODWORD(STACK[0x2128]) + *v217) & ~((LODWORD(STACK[0x2128]) + *v217) >> 31);
          if (v219 >= 255)
            LOBYTE(v219) = -1;
          *v217 = v219;
          v220 = &v217[(int)vars0];
          v221 = (v218 + *v220) & ~((v218 + *v220) >> 31);
          if (v221 >= 255)
            LOBYTE(v221) = -1;
          *v220 = v221;
          v222 = &v220[(int)vars0];
          v223 = (LODWORD(STACK[0x2130]) + *v222) & ~((LODWORD(STACK[0x2130]) + *v222) >> 31);
          if (v223 >= 255)
            LOBYTE(v223) = -1;
          *v222 = v223;
          v224 = &v222[(int)vars0];
          v225 = (LODWORD(STACK[0x2134]) + *v224) & ~((LODWORD(STACK[0x2134]) + *v224) >> 31);
          if (v225 >= 255)
            LOBYTE(v225) = -1;
          *v224 = v225;
          v226 = &v224[(int)vars0];
          v227 = (LODWORD(STACK[0x2138]) + *v226) & ~((LODWORD(STACK[0x2138]) + *v226) >> 31);
          if (v227 >= 255)
            LOBYTE(v227) = -1;
          *v226 = v227;
          v228 = (LODWORD(STACK[0x213C]) + v226[(int)vars0]) & ~((LODWORD(STACK[0x213C])
                                                                                 + v226[(int)vars0]) >> 31);
          if (v228 >= 255)
            LOBYTE(v228) = -1;
          v226[(int)vars0] = v228;
          ++v185;
          v186 = (unint64_t *)((char *)v186 - 4);
          v187 = (unint64_t *)((char *)v187 + 4);
        }
        while (v185 != 4);
      }
      else
      {
        v380 = v972;
        if ((v57 & 1) != 0)
        {
          v381 = -16;
          do
          {
            v420 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 144);
            LODWORD(STACK[0x20C0]) = v420;
            v421 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 160);
            LODWORD(STACK[0x20C4]) = v421;
            v422 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 176);
            LODWORD(STACK[0x20C8]) = v422;
            v423 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 192);
            LODWORD(STACK[0x20CC]) = v423;
            v424 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 208);
            LODWORD(STACK[0x20D0]) = v424;
            v425 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 224);
            LODWORD(STACK[0x20D4]) = v425;
            v426 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 240);
            LODWORD(STACK[0x20D8]) = v426;
            v427 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 256);
            LODWORD(STACK[0x20DC]) = v427;
            v428 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 272);
            LODWORD(STACK[0x20E0]) = v428;
            v429 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 288);
            LODWORD(STACK[0x20E4]) = v429;
            v430 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 304);
            LODWORD(STACK[0x20E8]) = v430;
            v431 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 320);
            LODWORD(STACK[0x20EC]) = v431;
            v432 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 336);
            LODWORD(STACK[0x20F0]) = v432;
            v433 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 352);
            LODWORD(STACK[0x20F4]) = v433;
            v434 = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 368);
            LODWORD(STACK[0x20F8]) = v434;
            v435.i64[0] = __PAIR64__(v421, v420);
            v435.i64[1] = __PAIR64__(v423, v422);
            v436.i64[0] = __PAIR64__(v433, v432);
            v437.i64[0] = 0x7F0000007FLL;
            v437.i64[1] = 0x7F0000007FLL;
            v436.i32[2] = v434;
            v436.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + v381 + 384);
            v438.i64[0] = __PAIR64__(v425, v424);
            v438.i64[1] = __PAIR64__(v427, v426);
            v439.i64[0] = 0x7F0000007FLL;
            v439.i64[1] = 0x7F0000007FLL;
            *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v435, v437), v439);
            *(int32x4_t *)&STACK[0x20D0] = vmaxq_s32(vminq_s32(v438, v437), v439);
            v435.i64[0] = __PAIR64__(v429, v428);
            v435.i64[1] = __PAIR64__(v431, v430);
            *(int32x4_t *)&STACK[0x20E0] = vmaxq_s32(vminq_s32(v435, v437), v439);
            *(int32x4_t *)&STACK[0x20F0] = vmaxq_s32(vminq_s32(v436, v437), v439);
            ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v961)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
            if (v55[1])
            {
              v382 = vdupq_n_s32(v55[1]);
              v383 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2110], v382);
              *(int32x4_t *)&STACK[0x2100] = vrshlq_s32(*(int32x4_t *)&STACK[0x2100], v382);
              *(int8x16_t *)&STACK[0x2110] = v383;
              v384 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2120], v382);
              v385 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2130], v382);
              *(int8x16_t *)&STACK[0x2120] = v384;
              *(int8x16_t *)&STACK[0x2130] = v385;
              v386 = v385.i32[3];
              v387 = v383.i32[2];
              v388 = vextq_s8(v384, v385, 0xCuLL);
              v389 = vextq_s8(v383, v384, 0xCuLL);
            }
            else
            {
              v388 = *(int8x16_t *)&STACK[0x212C];
              v389 = *(int8x16_t *)&STACK[0x211C];
              v386 = STACK[0x213C];
              v387 = STACK[0x2118];
            }
            v390 = (v386 + v380->u8[0]) & ~((v386 + v380->u8[0]) >> 31);
            if (v390 >= 255)
              LOBYTE(v390) = -1;
            v380->i8[0] = v390;
            v391 = (char *)v380 + (int)vars0;
            v392 = (v388.i32[3] + *v391) & ~((v388.i32[3] + *v391) >> 31);
            if (v392 >= 255)
              LOBYTE(v392) = -1;
            *v391 = v392;
            v393 = &v391[(int)vars0];
            v394 = (v388.i32[2] + *v393) & ~((v388.i32[2] + *v393) >> 31);
            if (v394 >= 255)
              LOBYTE(v394) = -1;
            *v393 = v394;
            v395 = &v393[(int)vars0];
            v396 = (v388.i32[1] + *v395) & ~((v388.i32[1] + *v395) >> 31);
            if (v396 >= 255)
              LOBYTE(v396) = -1;
            *v395 = v396;
            v397 = &v395[(int)vars0];
            v398 = (v388.i32[0] + *v397) & ~((v388.i32[0] + *v397) >> 31);
            if (v398 >= 255)
              LOBYTE(v398) = -1;
            *v397 = v398;
            v399 = &v397[(int)vars0];
            v400 = (v389.i32[3] + *v399) & ~((v389.i32[3] + *v399) >> 31);
            if (v400 >= 255)
              LOBYTE(v400) = -1;
            *v399 = v400;
            v401 = &v399[(int)vars0];
            v402 = (v389.i32[2] + *v401) & ~((v389.i32[2] + *v401) >> 31);
            if (v402 >= 255)
              LOBYTE(v402) = -1;
            *v401 = v402;
            v403 = &v401[(int)vars0];
            v404 = (v389.i32[1] + *v403) & ~((v389.i32[1] + *v403) >> 31);
            if (v404 >= 255)
              LOBYTE(v404) = -1;
            *v403 = v404;
            v405 = &v403[(int)vars0];
            v406 = (v389.i32[0] + *v405) & ~((v389.i32[0] + *v405) >> 31);
            if (v406 >= 255)
              LOBYTE(v406) = -1;
            *v405 = v406;
            v407 = &v405[(int)vars0];
            v408 = (v387 + *v407) & ~((v387 + *v407) >> 31);
            if (v408 >= 255)
              LOBYTE(v408) = -1;
            *v407 = v408;
            v409 = &v407[(int)vars0];
            v410 = (LODWORD(STACK[0x2114]) + *v409) & ~((LODWORD(STACK[0x2114]) + *v409) >> 31);
            if (v410 >= 255)
              LOBYTE(v410) = -1;
            *v409 = v410;
            v411 = &v409[(int)vars0];
            v412 = (LODWORD(STACK[0x2110]) + *v411) & ~((LODWORD(STACK[0x2110]) + *v411) >> 31);
            if (v412 >= 255)
              LOBYTE(v412) = -1;
            *v411 = v412;
            v413 = &v411[(int)vars0];
            v414 = (LODWORD(STACK[0x210C]) + *v413) & ~((LODWORD(STACK[0x210C]) + *v413) >> 31);
            if (v414 >= 255)
              LOBYTE(v414) = -1;
            *v413 = v414;
            v415 = &v413[(int)vars0];
            v416 = (LODWORD(STACK[0x2108]) + *v415) & ~((LODWORD(STACK[0x2108]) + *v415) >> 31);
            if (v416 >= 255)
              LOBYTE(v416) = -1;
            *v415 = v416;
            v417 = &v415[(int)vars0];
            v418 = (LODWORD(STACK[0x2104]) + *v417) & ~((LODWORD(STACK[0x2104]) + *v417) >> 31);
            if (v418 >= 255)
              LOBYTE(v418) = -1;
            *v417 = v418;
            v419 = (LODWORD(STACK[0x2100]) + v417[(int)vars0]) & ~((LODWORD(STACK[0x2100])
                                                                                   + v417[(int)vars0]) >> 31);
            if (v419 >= 255)
              LOBYTE(v419) = -1;
            v417[(int)vars0] = v419;
            v380 = (uint8x8_t *)((char *)v380 + 1);
            v381 += 4;
          }
          while (v381);
        }
        else
        {
          for (m = 204; m != 188; m -= 4)
          {
            v549 = *(_DWORD *)((char *)&STACK[0x20C0] + m - 64);
            LODWORD(STACK[0x20C0]) = v549;
            v550 = *(_DWORD *)((char *)&STACK[0x20C0] + m - 48);
            LODWORD(STACK[0x20C4]) = v550;
            v551 = *(_DWORD *)((char *)&STACK[0x20C0] + m - 32);
            LODWORD(STACK[0x20C8]) = v551;
            v552 = *(_DWORD *)((char *)&STACK[0x20C0] + m - 16);
            LODWORD(STACK[0x20CC]) = v552;
            v553 = *(_DWORD *)((char *)&STACK[0x20C0] + m);
            LODWORD(STACK[0x20D0]) = v553;
            v554 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 16);
            LODWORD(STACK[0x20D4]) = v554;
            v555 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 32);
            LODWORD(STACK[0x20D8]) = v555;
            v556 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 48);
            LODWORD(STACK[0x20DC]) = v556;
            v557 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 64);
            LODWORD(STACK[0x20E0]) = v557;
            v558 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 80);
            LODWORD(STACK[0x20E4]) = v558;
            v559 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 96);
            LODWORD(STACK[0x20E8]) = v559;
            v560 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 112);
            LODWORD(STACK[0x20EC]) = v560;
            v561 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 128);
            LODWORD(STACK[0x20F0]) = v561;
            v562 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 144);
            LODWORD(STACK[0x20F4]) = v562;
            v563 = *(_DWORD *)((char *)&STACK[0x20C0] + m + 160);
            LODWORD(STACK[0x20F8]) = v563;
            v564.i64[0] = __PAIR64__(v550, v549);
            v564.i64[1] = __PAIR64__(v552, v551);
            v565.i64[0] = __PAIR64__(v562, v561);
            v566.i64[0] = 0x7F0000007FLL;
            v566.i64[1] = 0x7F0000007FLL;
            v565.i32[2] = v563;
            v565.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + m + 176);
            v567.i64[0] = __PAIR64__(v554, v553);
            v567.i64[1] = __PAIR64__(v556, v555);
            v568.i64[0] = 0x7F0000007FLL;
            v568.i64[1] = 0x7F0000007FLL;
            *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v564, v566), v568);
            *(int32x4_t *)&STACK[0x20D0] = vmaxq_s32(vminq_s32(v567, v566), v568);
            v564.i64[0] = __PAIR64__(v558, v557);
            v564.i64[1] = __PAIR64__(v560, v559);
            *(int32x4_t *)&STACK[0x20E0] = vmaxq_s32(vminq_s32(v564, v566), v568);
            *(int32x4_t *)&STACK[0x20F0] = vmaxq_s32(vminq_s32(v565, v566), v568);
            ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v961)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
            if (v55[1])
            {
              v511 = vdupq_n_s32(v55[1]);
              v512 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2110], v511);
              *(int32x4_t *)&STACK[0x2100] = vrshlq_s32(*(int32x4_t *)&STACK[0x2100], v511);
              *(int8x16_t *)&STACK[0x2110] = v512;
              v513 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2120], v511);
              v514 = (int8x16_t)vrshlq_s32(*(int32x4_t *)&STACK[0x2130], v511);
              *(int8x16_t *)&STACK[0x2120] = v513;
              *(int8x16_t *)&STACK[0x2130] = v514;
              v515 = v514.i32[3];
              v516 = v512.i32[2];
              v517 = vextq_s8(v513, v514, 0xCuLL);
              v518 = vextq_s8(v512, v513, 0xCuLL);
            }
            else
            {
              v517 = *(int8x16_t *)&STACK[0x212C];
              v518 = *(int8x16_t *)&STACK[0x211C];
              v515 = STACK[0x213C];
              v516 = STACK[0x2118];
            }
            v519 = (v515 + v380->u8[0]) & ~((v515 + v380->u8[0]) >> 31);
            if (v519 >= 255)
              LOBYTE(v519) = -1;
            v380->i8[0] = v519;
            v520 = (char *)v380 + (int)vars0;
            v521 = (v517.i32[3] + *v520) & ~((v517.i32[3] + *v520) >> 31);
            if (v521 >= 255)
              LOBYTE(v521) = -1;
            *v520 = v521;
            v522 = &v520[(int)vars0];
            v523 = (v517.i32[2] + *v522) & ~((v517.i32[2] + *v522) >> 31);
            if (v523 >= 255)
              LOBYTE(v523) = -1;
            *v522 = v523;
            v524 = &v522[(int)vars0];
            v525 = (v517.i32[1] + *v524) & ~((v517.i32[1] + *v524) >> 31);
            if (v525 >= 255)
              LOBYTE(v525) = -1;
            *v524 = v525;
            v526 = &v524[(int)vars0];
            v527 = (v517.i32[0] + *v526) & ~((v517.i32[0] + *v526) >> 31);
            if (v527 >= 255)
              LOBYTE(v527) = -1;
            *v526 = v527;
            v528 = &v526[(int)vars0];
            v529 = (v518.i32[3] + *v528) & ~((v518.i32[3] + *v528) >> 31);
            if (v529 >= 255)
              LOBYTE(v529) = -1;
            *v528 = v529;
            v530 = &v528[(int)vars0];
            v531 = (v518.i32[2] + *v530) & ~((v518.i32[2] + *v530) >> 31);
            if (v531 >= 255)
              LOBYTE(v531) = -1;
            *v530 = v531;
            v532 = &v530[(int)vars0];
            v533 = (v518.i32[1] + *v532) & ~((v518.i32[1] + *v532) >> 31);
            if (v533 >= 255)
              LOBYTE(v533) = -1;
            *v532 = v533;
            v534 = &v532[(int)vars0];
            v535 = (v518.i32[0] + *v534) & ~((v518.i32[0] + *v534) >> 31);
            if (v535 >= 255)
              LOBYTE(v535) = -1;
            *v534 = v535;
            v536 = &v534[(int)vars0];
            v537 = (v516 + *v536) & ~((v516 + *v536) >> 31);
            if (v537 >= 255)
              LOBYTE(v537) = -1;
            *v536 = v537;
            v538 = &v536[(int)vars0];
            v539 = (LODWORD(STACK[0x2114]) + *v538) & ~((LODWORD(STACK[0x2114]) + *v538) >> 31);
            if (v539 >= 255)
              LOBYTE(v539) = -1;
            *v538 = v539;
            v540 = &v538[(int)vars0];
            v541 = (LODWORD(STACK[0x2110]) + *v540) & ~((LODWORD(STACK[0x2110]) + *v540) >> 31);
            if (v541 >= 255)
              LOBYTE(v541) = -1;
            *v540 = v541;
            v542 = &v540[(int)vars0];
            v543 = (LODWORD(STACK[0x210C]) + *v542) & ~((LODWORD(STACK[0x210C]) + *v542) >> 31);
            if (v543 >= 255)
              LOBYTE(v543) = -1;
            *v542 = v543;
            v544 = &v542[(int)vars0];
            v545 = (LODWORD(STACK[0x2108]) + *v544) & ~((LODWORD(STACK[0x2108]) + *v544) >> 31);
            if (v545 >= 255)
              LOBYTE(v545) = -1;
            *v544 = v545;
            v546 = &v544[(int)vars0];
            v547 = (LODWORD(STACK[0x2104]) + *v546) & ~((LODWORD(STACK[0x2104]) + *v546) >> 31);
            if (v547 >= 255)
              LOBYTE(v547) = -1;
            *v546 = v547;
            v548 = (LODWORD(STACK[0x2100]) + v546[(int)vars0]) & ~((LODWORD(STACK[0x2100])
                                                                                   + v546[(int)vars0]) >> 31);
            if (v548 >= 255)
              LOBYTE(v548) = -1;
            v546[(int)vars0] = v548;
            v380 = (uint8x8_t *)((char *)v380 + 1);
          }
        }
      }
      return;
    case 0xEu:
      v58 = off_25453EB08;
      a20 = 4112;
      a19 = 0x1010101010101010;
      v59 = lowbd_txfm_all_1d_arr[hitx_1d_tab[v29] + 6];
      if (v29 > 0xF)
      {
        v60 = 1;
        v61 = 1;
      }
      else
      {
        v60 = (0xBEAFu >> v29) & 1;
        v61 = (0x7F1Fu >> v29) & 1;
      }
      v967 = v61;
      v251 = lowbd_txfm_all_1d_arr[vitx_1d_tab[v29]];
      v252 = v27[1].i32[0];
      LODWORD(STACK[0x20C0]) = v27->i32[0];
      LODWORD(STACK[0x20C4]) = v252;
      v253 = v27[3].i32[0];
      LODWORD(STACK[0x20C8]) = v27[2].i32[0];
      LODWORD(STACK[0x20CC]) = v253;
      v254 = v27[5].i32[0];
      LODWORD(STACK[0x20D0]) = v27[4].i32[0];
      LODWORD(STACK[0x20D4]) = v254;
      v255 = v27[7].i32[0];
      LODWORD(STACK[0x20D8]) = v27[6].i32[0];
      LODWORD(STACK[0x20DC]) = v255;
      v256 = v27[9].i32[0];
      LODWORD(STACK[0x20E0]) = v27[8].i32[0];
      LODWORD(STACK[0x20E4]) = v256;
      v257 = v27[11].i32[0];
      LODWORD(STACK[0x20E8]) = v27[10].i32[0];
      LODWORD(STACK[0x20EC]) = v257;
      v258 = v27[13].i32[0];
      LODWORD(STACK[0x20F0]) = v27[12].i32[0];
      LODWORD(STACK[0x20F4]) = v258;
      v259 = v27[15].i32[0];
      LODWORD(STACK[0x20F8]) = v27[14].i32[0];
      LODWORD(STACK[0x20FC]) = v259;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v59)(&STACK[0x20C0], &STACK[0x2140], 12, &a19);
      if (*v58)
      {
        v260 = vdupq_n_s32(*v58);
        v261 = vrshlq_s32(*(int32x4_t *)&STACK[0x2150], v260);
        *(int32x4_t *)&STACK[0x2140] = vrshlq_s32(*(int32x4_t *)&STACK[0x2140], v260);
        *(int32x4_t *)&STACK[0x2150] = v261;
        v262 = vrshlq_s32(*(int32x4_t *)&STACK[0x2160], v260);
        v263 = vrshlq_s32(*(int32x4_t *)&STACK[0x2170], v260);
        *(int32x4_t *)&STACK[0x2160] = v262;
        *(int32x4_t *)&STACK[0x2170] = v263;
      }
      v264 = v36[1].i32[1];
      LODWORD(STACK[0x20C0]) = v36->i32[1];
      LODWORD(STACK[0x20C4]) = v264;
      v265 = v36[3].i32[1];
      LODWORD(STACK[0x20C8]) = v36[2].i32[1];
      LODWORD(STACK[0x20CC]) = v265;
      v266 = v36[5].i32[1];
      LODWORD(STACK[0x20D0]) = v36[4].i32[1];
      LODWORD(STACK[0x20D4]) = v266;
      v267 = v36[7].i32[1];
      LODWORD(STACK[0x20D8]) = v36[6].i32[1];
      LODWORD(STACK[0x20DC]) = v267;
      v268 = v36[9].i32[1];
      LODWORD(STACK[0x20E0]) = v36[8].i32[1];
      LODWORD(STACK[0x20E4]) = v268;
      v269 = v36[11].i32[1];
      LODWORD(STACK[0x20E8]) = v36[10].i32[1];
      LODWORD(STACK[0x20EC]) = v269;
      v270 = v36[13].i32[1];
      LODWORD(STACK[0x20F0]) = v36[12].i32[1];
      LODWORD(STACK[0x20F4]) = v270;
      v271 = v36[15].i32[1];
      LODWORD(STACK[0x20F8]) = v36[14].i32[1];
      LODWORD(STACK[0x20FC]) = v271;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v59)(&STACK[0x20C0], &STACK[0x2180], 12, &a19);
      if (*v58)
      {
        v272 = vdupq_n_s32(*v58);
        v273 = vrshlq_s32(*(int32x4_t *)&STACK[0x2190], v272);
        *(int32x4_t *)&STACK[0x2180] = vrshlq_s32(*(int32x4_t *)&STACK[0x2180], v272);
        *(int32x4_t *)&STACK[0x2190] = v273;
        v274 = vrshlq_s32(*(int32x4_t *)&STACK[0x21A0], v272);
        v275 = vrshlq_s32(*(int32x4_t *)&STACK[0x21B0], v272);
        *(int32x4_t *)&STACK[0x21A0] = v274;
        *(int32x4_t *)&STACK[0x21B0] = v275;
      }
      v276 = v36[1].i32[2];
      LODWORD(STACK[0x20C0]) = v36->i32[2];
      LODWORD(STACK[0x20C4]) = v276;
      v277 = v36[3].i32[2];
      LODWORD(STACK[0x20C8]) = v36[2].i32[2];
      LODWORD(STACK[0x20CC]) = v277;
      v278 = v36[5].i32[2];
      LODWORD(STACK[0x20D0]) = v36[4].i32[2];
      LODWORD(STACK[0x20D4]) = v278;
      v279 = v36[7].i32[2];
      LODWORD(STACK[0x20D8]) = v36[6].i32[2];
      LODWORD(STACK[0x20DC]) = v279;
      v280 = v36[9].i32[2];
      LODWORD(STACK[0x20E0]) = v36[8].i32[2];
      LODWORD(STACK[0x20E4]) = v280;
      v281 = v36[11].i32[2];
      LODWORD(STACK[0x20E8]) = v36[10].i32[2];
      LODWORD(STACK[0x20EC]) = v281;
      v282 = v36[13].i32[2];
      LODWORD(STACK[0x20F0]) = v36[12].i32[2];
      LODWORD(STACK[0x20F4]) = v282;
      v283 = v36[15].i32[2];
      LODWORD(STACK[0x20F8]) = v36[14].i32[2];
      LODWORD(STACK[0x20FC]) = v283;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v59)(&STACK[0x20C0], &STACK[0x21C0], 12, &a19);
      if (*v58)
      {
        v284 = vdupq_n_s32(*v58);
        v285 = vrshlq_s32(*(int32x4_t *)&STACK[0x21D0], v284);
        *(int32x4_t *)&STACK[0x21C0] = vrshlq_s32(*(int32x4_t *)&STACK[0x21C0], v284);
        *(int32x4_t *)&STACK[0x21D0] = v285;
        v286 = vrshlq_s32(*(int32x4_t *)&STACK[0x21E0], v284);
        v287 = vrshlq_s32(*(int32x4_t *)&STACK[0x21F0], v284);
        *(int32x4_t *)&STACK[0x21E0] = v286;
        *(int32x4_t *)&STACK[0x21F0] = v287;
      }
      v288 = v36[1].i32[3];
      LODWORD(STACK[0x20C0]) = v36->i32[3];
      LODWORD(STACK[0x20C4]) = v288;
      v289 = v36[3].i32[3];
      LODWORD(STACK[0x20C8]) = v36[2].i32[3];
      LODWORD(STACK[0x20CC]) = v289;
      v290 = v36[5].i32[3];
      LODWORD(STACK[0x20D0]) = v36[4].i32[3];
      LODWORD(STACK[0x20D4]) = v290;
      v291 = v36[7].i32[3];
      LODWORD(STACK[0x20D8]) = v36[6].i32[3];
      LODWORD(STACK[0x20DC]) = v291;
      v292 = v36[9].i32[3];
      LODWORD(STACK[0x20E0]) = v36[8].i32[3];
      LODWORD(STACK[0x20E4]) = v292;
      v293 = v36[11].i32[3];
      LODWORD(STACK[0x20E8]) = v36[10].i32[3];
      LODWORD(STACK[0x20EC]) = v293;
      v294 = v36[13].i32[3];
      LODWORD(STACK[0x20F0]) = v36[12].i32[3];
      LODWORD(STACK[0x20F4]) = v294;
      v295 = v36[15].i32[3];
      LODWORD(STACK[0x20F8]) = v36[14].i32[3];
      LODWORD(STACK[0x20FC]) = v295;
      ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v59)(&STACK[0x20C0], &STACK[0x2200], 12, &a19);
      if (*v58)
      {
        v296 = vdupq_n_s32(*v58);
        v297 = vrshlq_s32(*(int32x4_t *)&STACK[0x2210], v296);
        *(int32x4_t *)&STACK[0x2200] = vrshlq_s32(*(int32x4_t *)&STACK[0x2200], v296);
        *(int32x4_t *)&STACK[0x2210] = v297;
        v298 = vrshlq_s32(*(int32x4_t *)&STACK[0x2220], v296);
        v299 = vrshlq_s32(*(int32x4_t *)&STACK[0x2230], v296);
        *(int32x4_t *)&STACK[0x2220] = v298;
        *(int32x4_t *)&STACK[0x2230] = v299;
      }
      v300 = (int)v34;
      v301 = 2 * (int)v34;
      v302 = 3 * (int)v34;
      if (v60)
      {
        v303 = 0;
        v304 = (char *)v972 + v302;
        v305 = (char *)v972 + v301;
        v306 = (char *)v972 + v300;
        v307 = &STACK[0x217C];
        do
        {
          if (v967)
          {
            v313 = *((_DWORD *)&STACK[0x2140] + v303);
            LODWORD(STACK[0x20C0]) = v313;
            v314 = v303 + 16;
            v315 = v303 + 32;
            v316 = v303 + 48;
          }
          else
          {
            v313 = *(_DWORD *)v307;
            LODWORD(STACK[0x20C0]) = *(_DWORD *)v307;
            v314 = 31 - v303;
            v315 = 47 - v303;
            v316 = 63 - v303;
          }
          v317 = *((_DWORD *)&STACK[0x2140] + v314);
          LODWORD(STACK[0x20C4]) = v317;
          v318 = *((_DWORD *)&STACK[0x2140] + v315);
          LODWORD(STACK[0x20C8]) = v318;
          v319.i64[0] = __PAIR64__(v317, v313);
          v319.i32[2] = v318;
          v319.i32[3] = *((_DWORD *)&STACK[0x2140] + v316);
          v320.i64[0] = 0x7F0000007FLL;
          v320.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v319, v320), v320);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v251)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
          if (v58[1])
          {
            v308 = vrshlq_s32(*(int32x4_t *)&STACK[0x2100], vdupq_n_s32(v58[1]));
            *(int32x4_t *)&STACK[0x2100] = v308;
          }
          else
          {
            v308 = *(int32x4_t *)&STACK[0x2100];
          }
          v309 = (v308.i32[0] + v972->u8[v303]) & ~((v308.i32[0] + v972->u8[v303]) >> 31);
          if (v309 >= 255)
            LOBYTE(v309) = -1;
          v972->i8[v303] = v309;
          v310 = (v308.i32[1] + v306[v303]) & ~((v308.i32[1] + v306[v303]) >> 31);
          if (v310 >= 255)
            LOBYTE(v310) = -1;
          v306[v303] = v310;
          v311 = (v308.i32[2] + v305[v303]) & ~((v308.i32[2] + v305[v303]) >> 31);
          if (v311 >= 255)
            LOBYTE(v311) = -1;
          v305[v303] = v311;
          v312 = (v308.i32[3] + v304[v303]) & ~((v308.i32[3] + v304[v303]) >> 31);
          if (v312 >= 255)
            LOBYTE(v312) = -1;
          v304[v303++] = v312;
          v307 = (unint64_t *)((char *)v307 - 4);
        }
        while (v303 != 16);
      }
      else if ((v967 & 1) != 0)
      {
        v440 = 0;
        v441 = (char *)v972 + v302;
        v442 = (char *)v972 + v301;
        v443 = (char *)v972 + v300;
        v444 = &STACK[0x2180];
        do
        {
          v450 = *((_DWORD *)v444 - 16);
          LODWORD(STACK[0x20C0]) = v450;
          v451 = *(_DWORD *)v444;
          LODWORD(STACK[0x20C4]) = *(_DWORD *)v444;
          v452 = *((_DWORD *)v444 + 16);
          LODWORD(STACK[0x20C8]) = v452;
          v453.i64[0] = __PAIR64__(v451, v450);
          v453.i32[2] = v452;
          v453.i32[3] = *((_DWORD *)v444 + 32);
          v454.i64[0] = 0x7F0000007FLL;
          v454.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v453, v454), v454);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v251)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
          if (v58[1])
          {
            v445 = vrshlq_s32(*(int32x4_t *)&STACK[0x2100], vdupq_n_s32(v58[1]));
            *(int32x4_t *)&STACK[0x2100] = v445;
          }
          else
          {
            v445 = *(int32x4_t *)&STACK[0x2100];
          }
          v446 = (v445.i32[3] + v972->u8[v440]) & ~((v445.i32[3] + v972->u8[v440]) >> 31);
          if (v446 >= 255)
            LOBYTE(v446) = -1;
          v972->i8[v440] = v446;
          v447 = (v445.i32[2] + v443[v440]) & ~((v445.i32[2] + v443[v440]) >> 31);
          if (v447 >= 255)
            LOBYTE(v447) = -1;
          v443[v440] = v447;
          v448 = (v445.i32[1] + v442[v440]) & ~((v445.i32[1] + v442[v440]) >> 31);
          if (v448 >= 255)
            LOBYTE(v448) = -1;
          v442[v440] = v448;
          v444 = (unint64_t *)((char *)v444 + 4);
          v449 = (v445.i32[0] + v441[v440]) & ~((v445.i32[0] + v441[v440]) >> 31);
          if (v449 >= 255)
            LOBYTE(v449) = -1;
          v441[v440++] = v449;
        }
        while (v440 != 16);
      }
      else
      {
        for (n = 252; n != 188; n -= 4)
        {
          v575 = *(_DWORD *)((char *)&STACK[0x20C0] + n - 64);
          LODWORD(STACK[0x20C0]) = v575;
          v576 = *(_DWORD *)((char *)&STACK[0x20C0] + n);
          LODWORD(STACK[0x20C4]) = v576;
          v577 = *(_DWORD *)((char *)&STACK[0x20C0] + n + 64);
          LODWORD(STACK[0x20C8]) = v577;
          v578.i64[0] = __PAIR64__(v576, v575);
          v578.i32[2] = v577;
          v578.i32[3] = *(_DWORD *)((char *)&STACK[0x20C0] + n + 128);
          v579.i64[0] = 0x7F0000007FLL;
          v579.i64[1] = 0x7F0000007FLL;
          *(int32x4_t *)&STACK[0x20C0] = vmaxq_s32(vminq_s32(v578, v579), v579);
          ((void (*)(unint64_t *, unint64_t *, uint64_t, uint64_t *))v251)(&STACK[0x20C0], &STACK[0x2100], 12, &a19);
          if (v58[1])
          {
            v570 = vrshlq_s32(*(int32x4_t *)&STACK[0x2100], vdupq_n_s32(v58[1]));
            *(int32x4_t *)&STACK[0x2100] = v570;
          }
          else
          {
            v570 = *(int32x4_t *)&STACK[0x2100];
          }
          v571 = (v570.i32[3] + v972->u8[0]) & ~((v570.i32[3] + v972->u8[0]) >> 31);
          if (v571 >= 255)
            LOBYTE(v571) = -1;
          v972->i8[0] = v571;
          v572 = (v570.i32[2] + v972->u8[v300]) & ~((v570.i32[2] + v972->u8[v300]) >> 31);
          if (v572 >= 255)
            LOBYTE(v572) = -1;
          v972->i8[v300] = v572;
          v573 = (v570.i32[1] + v972->u8[v301]) & ~((v570.i32[1] + v972->u8[v301]) >> 31);
          if (v573 >= 255)
            LOBYTE(v573) = -1;
          v972->i8[v301] = v573;
          v574 = (v570.i32[0] + v972->u8[v302]) & ~((v570.i32[0] + v972->u8[v302]) >> 31);
          if (v574 >= 255)
            LOBYTE(v574) = -1;
          v972->i8[v302] = v574;
          v972 = (uint8x8_t *)((char *)v972 + 1);
        }
      }
      return;
    default:
      if (v29 > 0xF)
        goto LABEL_477;
      if (((1 << v29) & 0x5400) == 0)
      {
        if (((1 << v29) & 0xA800) != 0)
        {
          v41 = (int)tx_size_high_0[v30];
          v42 = v31 - 1;
          v43 = tx_size_high_0[v30];
          v939 = v41;
          if ((int)v41 >= 32)
            v44 = 32;
          else
            v44 = v41;
          if (v44 <= v31)
            v45 = v44 - 1;
          else
            v45 = eob_fill[v42];
          v959 = (char *)*(&av1_inv_txfm_shift_ls + v37);
          v582 = tx_size_wide_log2_0[v37];
          v938 = tx_size_high_log2_0[v37];
          v583 = tx_size_wide_1[v37];
          v584 = (int)v583;
          if ((int)v583 * (int)v43 >= 8)
          {
            v968 = v45;
            v585 = v29;
            v586 = v43;
            bzero(&a19, 16 * ((v583 * v43) >> 3));
            v45 = v968;
            v584 = (int)v583;
            v43 = v586;
            v29 = v585;
          }
          if ((_DWORD)v584 == (_DWORD)v939)
            goto LABEL_365;
          if ((int)v584 <= (int)v43)
          {
            if ((_DWORD)v939 == 2 * (_DWORD)v584)
            {
              v587 = -1;
              goto LABEL_366;
            }
            if ((_DWORD)v43 == 4 * (_DWORD)v584)
            {
              v587 = -2;
LABEL_366:
              v588 = (int)v584 >> 3;
              if (v45 < 0)
              {
                v666 = v972;
                if (((0x7DFDEuLL >> v37) & 1) == 0)
                {
LABEL_464:
                  if (((0x75F1CuLL >> v37) & 1) != 0)
                  {
                    if (((0xA0E3uLL >> v37) & 1) == 0)
                    {
                      v747 = 0;
                      v748 = 0;
                      LODWORD(v749) = v583 >> 4;
                      if (v583 >> 4 <= 1)
                        v749 = 1;
                      else
                        v749 = v749;
                      do
                      {
                        v750 = (uint16x8_t *)(&a19 + 2 * v747);
                        v751 = v666;
                        v752 = v43;
                        do
                        {
                          *(int8x16_t *)v751->i8 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*v750, *v751)), (int16x8_t)vaddw_high_u8(v750[v43], *(uint8x16_t *)v751->i8));
                          ++v750;
                          v751 = (uint8x8_t *)((char *)v751 + (int)v34);
                          --v752;
                        }
                        while (v752);
                        ++v748;
                        v747 += 2 * v939;
                        v666 += 2;
                      }
                      while (v748 != v749);
                    }
                  }
                  else if (((0x80C2uLL >> v37) & 1) != 0)
                  {
                    v745 = (uint16x8_t *)&a19;
                    do
                    {
                      v746 = *v745++;
                      *v666 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v746, *v666));
                      v666 = (uint8x8_t *)((char *)v666 + (int)v34);
                      --v43;
                    }
                    while (v43);
                  }
                  return;
                }
              }
              else
              {
                v931 = v43;
                vars0c = v34;
                v589 = 0;
                v955 = (void (*)(unint64_t *, unint64_t *, uint64_t))lowbd_txfm_all_1d_zeros_w_arr[12 * v582 - 24 + 4 * hitx_1d_tab[v29] + lowbd_txfm_all_1d_zeros_idx[(int)v42 / v44]];
                v953 = ((int)v42 / v44) & 0xFFFFFFF8;
                v590 = (v953 + 8);
                v951 = (v45 + 8) >> 3;
                if (v587 < 0)
                  v587 = -v587;
                vars8_4 = v587;
                v591 = (0x7DFDEuLL >> v37) & 1;
                if (v588 <= 1)
                  v592 = 1;
                else
                  v592 = (int)v584 >> 3;
                v936 = (int)v584 >> 3;
                v949 = 16 * v584;
                v593 = v36 + 1;
                v594 = (unint64_t)v592 << 7;
                v595 = (int64x2_t *)&a27;
                v596 = (int64x2_t *)(&a27 + 2 * (v588 - 1) * (uint64_t)(int)v939);
                v597 = &STACK[0x20C0];
                v957 = v29;
                do
                {
                  if (v953 >= -7)
                  {
                    v598 = v593;
                    v599 = (int16x8_t *)v597;
                    v600 = v590;
                    do
                    {
                      *v599++ = vuzp1q_s16(v598[-1], *v598);
                      v598 = (int16x8_t *)((char *)v598 + 4 * v939);
                      --v600;
                    }
                    while (v600);
                    if (vars8_4 == 1)
                    {
                      v601 = 0;
                      do
                      {
                        v602 = vdupq_n_s16(0xB50u);
                        *(int16x8_t *)&v597[2 * v601] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16((int16x4_t)v597[2 * v601], *(int16x4_t *)v602.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)&v597[2 * v601], v602), 0xCuLL);
                        ++v601;
                      }
                      while (v590 != v601);
                    }
                  }
                  v962 = v589;
                  v969 = v593;
                  v603 = v584;
                  v955(&STACK[0x20C0] + 2 * v589 * v584, &STACK[0x20C0] + 2 * v589 * v584, 12);
                  if (*v959)
                  {
                    v604 = 0;
                    v605 = vdupq_n_s16(*v959);
                    do
                    {
                      v33 = vrshlq_s16(*(int16x8_t *)&v597[2 * v604], v605);
                      *(int16x8_t *)&v597[2 * v604++] = v33;
                    }
                    while (v583 != v604);
                  }
                  v584 = v603;
                  if (v957 == 15)
                  {
                    v607 = v962;
                    v606 = v969;
                    v590 = (v953 + 8);
                    if (v591)
                    {
                      v608 = 0;
                      v609 = v596;
                      do
                      {
                        v610 = (int16x8_t *)&v597[v608 / 8];
                        v612 = *(int16x8_t *)&v597[v608 / 8 + 12];
                        v611 = *(int16x8_t *)&v597[v608 / 8 + 14];
                        v614 = *(int16x8_t *)&v597[v608 / 8 + 8];
                        v613 = *(int16x8_t *)&v597[v608 / 8 + 10];
                        v616 = *(int16x8_t *)&v597[v608 / 8 + 4];
                        v615 = *(int16x8_t *)&v597[v608 / 8 + 6];
                        v618 = *(int16x8_t *)&v597[v608 / 8];
                        v617 = *(int16x8_t *)&v597[v608 / 8 + 2];
                        v619 = (int32x4_t)vtrn1q_s16(v611, v612);
                        v620 = (int32x4_t)vtrn2q_s16(v611, v612);
                        v621 = (int32x4_t)vtrn1q_s16(v613, v614);
                        *v610 = v611;
                        v610[1] = v612;
                        v610[2] = v613;
                        v610[3] = v614;
                        v610[4] = v615;
                        v610[5] = v616;
                        v622 = (int32x4_t)vtrn2q_s16(v613, v614);
                        v623 = (int32x4_t)vtrn1q_s16(v615, v616);
                        v624 = (int32x4_t)vtrn2q_s16(v615, v616);
                        v625 = (int32x4_t)vtrn1q_s16(v617, v618);
                        v626 = (int32x4_t)vtrn2q_s16(v617, v618);
                        v610[6] = v617;
                        v610[7] = v618;
                        v627 = (int64x2_t)vtrn1q_s32(v619, v621);
                        v628 = (int64x2_t)vtrn2q_s32(v619, v621);
                        v629 = (int64x2_t)vtrn1q_s32(v620, v622);
                        v630 = (int64x2_t)vtrn2q_s32(v620, v622);
                        v631 = (int64x2_t)vtrn1q_s32(v623, v625);
                        v632 = (int64x2_t)vtrn2q_s32(v623, v625);
                        v633 = (int64x2_t)vtrn1q_s32(v624, v626);
                        v634 = (int64x2_t)vtrn2q_s32(v624, v626);
                        v635 = vzip1q_s64(v627, v631);
                        v636 = vzip2q_s64(v627, v631);
                        v637 = vzip1q_s64(v629, v633);
                        v638 = vzip2q_s64(v629, v633);
                        v639 = vzip1q_s64(v628, v632);
                        v33 = (int16x8_t)vzip2q_s64(v628, v632);
                        v609[-4] = v635;
                        v609[-3] = v637;
                        v609[-2] = v639;
                        v609[-1] = vzip1q_s64(v630, v634);
                        *v609 = v636;
                        v609[1] = v638;
                        v609[2] = (int64x2_t)v33;
                        v609[3] = vzip2q_s64(v630, v634);
                        v608 += 128;
                        v609 -= v939;
                      }
                      while (v594 != v608);
                    }
                  }
                  else
                  {
                    v607 = v962;
                    v606 = v969;
                    v590 = (v953 + 8);
                    if (v591)
                    {
                      v640 = 0;
                      v641 = v595;
                      do
                      {
                        v642 = *(int16x8_t *)&v597[v640 / 8];
                        v643 = *(int16x8_t *)&v597[v640 / 8 + 2];
                        v644 = (int32x4_t)vtrn1q_s16(v642, v643);
                        v645 = (int32x4_t)vtrn2q_s16(v642, v643);
                        v646 = *(int16x8_t *)&v597[v640 / 8 + 4];
                        v647 = *(int16x8_t *)&v597[v640 / 8 + 6];
                        v648 = (int32x4_t)vtrn1q_s16(v646, v647);
                        v649 = (int32x4_t)vtrn2q_s16(v646, v647);
                        v650 = *(int16x8_t *)&v597[v640 / 8 + 8];
                        v651 = *(int16x8_t *)&v597[v640 / 8 + 10];
                        v652 = (int32x4_t)vtrn1q_s16(v650, v651);
                        v653 = (int32x4_t)vtrn2q_s16(v650, v651);
                        v654 = *(int16x8_t *)&v597[v640 / 8 + 12];
                        v655 = *(int16x8_t *)&v597[v640 / 8 + 14];
                        v656 = (int32x4_t)vtrn1q_s16(v654, v655);
                        v657 = (int32x4_t)vtrn2q_s16(v654, v655);
                        v658 = (int64x2_t)vtrn1q_s32(v644, v648);
                        v659 = (int64x2_t)vtrn2q_s32(v644, v648);
                        v660 = (int64x2_t)vtrn1q_s32(v645, v649);
                        v661 = (int64x2_t)vtrn2q_s32(v645, v649);
                        v662 = (int64x2_t)vtrn1q_s32(v652, v656);
                        v663 = (int64x2_t)vtrn2q_s32(v652, v656);
                        v664 = (int64x2_t)vtrn1q_s32(v653, v657);
                        v641[-4] = vzip1q_s64(v658, v662);
                        v641[-3] = vzip1q_s64(v660, v664);
                        v665 = (int64x2_t)vtrn2q_s32(v653, v657);
                        v33 = (int16x8_t)vzip2q_s64(v658, v662);
                        v641[-2] = vzip1q_s64(v659, v663);
                        v641[-1] = vzip1q_s64(v661, v665);
                        *v641 = (int64x2_t)v33;
                        v641[1] = vzip2q_s64(v660, v664);
                        v641[2] = vzip2q_s64(v659, v663);
                        v641[3] = vzip2q_s64(v661, v665);
                        v640 += 128;
                        v641 += v939;
                      }
                      while (v594 != v640);
                    }
                  }
                  v589 = v607 + 1;
                  v597 = (unint64_t *)((char *)v597 + v949);
                  v593 = v606 + 2;
                  v595 += 8;
                  v596 += 8;
                }
                while (v589 != v951);
                LODWORD(v34) = vars0c;
                v588 = v936;
                v43 = v931;
                v666 = v972;
                if (!v591)
                  goto LABEL_464;
              }
              if ((char)v43 >= 1)
              {
                v739 = 0;
                v740 = vdupq_n_s32(v959[1]);
                v33.i16[0] = sqrt_2_list[v938 - 2];
                if (v588 <= 1)
                  v741 = 1;
                else
                  v741 = v588;
                v742 = &a19;
                do
                {
                  v743 = (int16x4_t *)v742;
                  v744 = v43;
                  do
                  {
                    *(int16x8_t *)v743->i8 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vrshrq_n_s32(vmull_lane_s16(*v743, *(int16x4_t *)v33.i8, 0), 0xCuLL), v740)), vrshlq_s32(vrshrq_n_s32(vmull_high_lane_s16(*(int16x8_t *)v743->i8, *(int16x4_t *)v33.i8, 0), 0xCuLL), v740));
                    v743 += 2;
                    --v744;
                  }
                  while (v744);
                  ++v739;
                  v742 += 2 * v939;
                }
                while (v739 != v741);
              }
              goto LABEL_464;
            }
          }
          else
          {
            if ((_DWORD)v583 == 2 * (_DWORD)v43)
            {
              v587 = 1;
              goto LABEL_366;
            }
            if ((_DWORD)v583 == 4 * (_DWORD)v43)
            {
              v587 = 2;
              goto LABEL_366;
            }
          }
LABEL_365:
          v587 = 0;
          goto LABEL_366;
        }
        if (v29 == 9)
        {
          vars0b = v28;
          if (v31 == 1)
          {
            v580 = 0;
            v581 = 8;
          }
          else
          {
            v755 = *(__int16 *)(av1_eob_to_eobxy_default[v30] + 2 * ((v31 - 1) >> tx_size_wide_log2_eob[v30]));
            v580 = v755 >> 8;
            v581 = (v755 & 0xF8) + 8;
          }
          v756 = (char *)*(&av1_inv_txfm_shift_ls + v30);
          v934 = v30;
          v757 = tx_size_wide_log2_0[v30];
          v758 = tx_size_high_log2_0[v30];
          v759 = (int)tx_size_wide_1[v30];
          v760 = (int)tx_size_high_0[v30];
          v761 = tx_size_high_0[v30];
          if ((int)v760 * (int)v759 >= 8)
          {
            v762 = 16 * ((v760 * v759) >> 3);
            bzero(&STACK[0x20C0], v762);
            bzero(&a19, v762);
          }
          if ((_DWORD)v759 != (_DWORD)v760)
          {
            if ((int)v759 <= (int)v761)
            {
              if ((_DWORD)v760 == 2 * (_DWORD)v759)
              {
                v763 = -1;
                goto LABEL_488;
              }
              if ((_DWORD)v761 == 4 * (_DWORD)v759)
              {
                v763 = -2;
                goto LABEL_488;
              }
            }
            else
            {
              if ((_DWORD)v759 == 2 * (_DWORD)v761)
              {
                v763 = 1;
                goto LABEL_488;
              }
              if ((_DWORD)v759 == 4 * (_DWORD)v761)
              {
                v763 = 2;
                goto LABEL_488;
              }
            }
          }
          v763 = 0;
LABEL_488:
          LODWORD(v764) = (int)v759 >> 3;
          if (v580 < 0)
          {
            v769 = (0x7DFDEuLL >> v934) & 1;
          }
          else
          {
            v765 = 0;
            v766 = (v580 + 8) >> 3;
            if (v763 >= 0)
              v767 = v763;
            else
              v767 = -v763;
            v768 = vdupq_n_s32(*v756);
            v33.i16[0] = sqrt_2_list[v757 - 2];
            v769 = (0x7DFDEuLL >> v934) & 1;
            if ((int)v764 <= 1)
              v770 = 1;
            else
              v770 = (int)v759 >> 3;
            v771 = v36 + 1;
            v772 = (unint64_t)v770 << 7;
            v773 = (int64x2_t *)&a27;
            v774 = vdupq_n_s16(0xB50u);
            v775 = &STACK[0x20C0];
            do
            {
              v776 = v771;
              v777 = (int16x8_t *)v775;
              v778 = v581;
              do
              {
                *v777++ = vuzp1q_s16(v776[-1], *v776);
                v776 = (int16x8_t *)((char *)v776 + 4 * v760);
                --v778;
              }
              while (v778);
              if (v767 == 1)
              {
                v779 = 0;
                do
                {
                  *(int16x8_t *)&v775[v779] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16((int16x4_t)v775[v779], *(int16x4_t *)v774.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)&v775[v779], v774), 0xCuLL);
                  v779 += 2;
                }
                while (2 * v581 != v779);
              }
              if ((char)v581 >= 1)
              {
                v780 = 0;
                do
                {
                  *(int16x8_t *)&v775[2 * v780] = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vrshrq_n_s32(vmull_lane_s16((int16x4_t)v775[2 * v780], *(int16x4_t *)v33.i8, 0), 0xCuLL), v768)), vrshlq_s32(vrshrq_n_s32(vmull_high_lane_s16(*(int16x8_t *)&v775[2 * v780], *(int16x4_t *)v33.i8, 0), 0xCuLL), v768));
                  ++v780;
                }
                while ((v581 & 0xF8) != v780);
              }
              if (v769)
              {
                v781 = 0;
                v782 = v773;
                do
                {
                  v783 = *(int16x8_t *)&v775[v781 / 8];
                  v784 = *(int16x8_t *)&v775[v781 / 8 + 2];
                  v785 = (int32x4_t)vtrn1q_s16(v783, v784);
                  v786 = (int32x4_t)vtrn2q_s16(v783, v784);
                  v787 = *(int16x8_t *)&v775[v781 / 8 + 4];
                  v788 = *(int16x8_t *)&v775[v781 / 8 + 6];
                  v789 = (int32x4_t)vtrn1q_s16(v787, v788);
                  v790 = (int32x4_t)vtrn2q_s16(v787, v788);
                  v791 = *(int16x8_t *)&v775[v781 / 8 + 8];
                  v792 = *(int16x8_t *)&v775[v781 / 8 + 10];
                  v793 = (int32x4_t)vtrn1q_s16(v791, v792);
                  v794 = (int32x4_t)vtrn2q_s16(v791, v792);
                  v795 = *(int16x8_t *)&v775[v781 / 8 + 12];
                  v796 = *(int16x8_t *)&v775[v781 / 8 + 14];
                  v797 = (int32x4_t)vtrn1q_s16(v795, v796);
                  v798 = (int32x4_t)vtrn2q_s16(v795, v796);
                  v799 = (int64x2_t)vtrn1q_s32(v785, v789);
                  v800 = (int64x2_t)vtrn2q_s32(v785, v789);
                  v801 = (int64x2_t)vtrn1q_s32(v786, v790);
                  v802 = (int64x2_t)vtrn2q_s32(v786, v790);
                  v803 = (int64x2_t)vtrn1q_s32(v793, v797);
                  v804 = (int64x2_t)vtrn2q_s32(v793, v797);
                  v805 = (int64x2_t)vtrn1q_s32(v794, v798);
                  v782[-4] = vzip1q_s64(v799, v803);
                  v782[-3] = vzip1q_s64(v801, v805);
                  v806 = (int64x2_t)vtrn2q_s32(v794, v798);
                  v782[-2] = vzip1q_s64(v800, v804);
                  v782[-1] = vzip1q_s64(v802, v806);
                  *v782 = vzip2q_s64(v799, v803);
                  v782[1] = vzip2q_s64(v801, v805);
                  v782[2] = vzip2q_s64(v800, v804);
                  v782[3] = vzip2q_s64(v802, v806);
                  v781 += 128;
                  v782 += v760;
                }
                while (v772 != v781);
              }
              ++v765;
              v775 += 2 * v759;
              v771 += 2;
              v773 += 8;
            }
            while (v765 != v766);
          }
          v897 = v972;
          if (v769 && (char)v761 >= 1)
          {
            v898 = 0;
            v899 = vdupq_n_s32(v756[1]);
            v33.i16[0] = sqrt_2_list[v758 - 2];
            if ((int)v764 <= 1)
              v764 = 1;
            else
              v764 = v764;
            v900 = &a19;
            do
            {
              v901 = (int16x4_t *)v900;
              v902 = v761;
              do
              {
                *(int16x8_t *)v901->i8 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vrshrq_n_s32(vmull_lane_s16(*v901, *(int16x4_t *)v33.i8, 0), 0xCuLL), v899)), vrshlq_s32(vrshrq_n_s32(vmull_high_lane_s16(*(int16x8_t *)v901->i8, *(int16x4_t *)v33.i8, 0), 0xCuLL), v899));
                v901 += 2;
                --v902;
              }
              while (v902);
              ++v898;
              v900 += 2 * v760;
            }
            while (v898 != v764);
          }
          if (((0x75F1CuLL >> v934) & 1) != 0)
          {
            if (((0xA0E3uLL >> v934) & 1) == 0)
            {
              v905 = 0;
              v906 = 0;
              LODWORD(v907) = v759 >> 4;
              if (v759 >> 4 <= 1)
                v907 = 1;
              else
                v907 = v907;
              do
              {
                v908 = (uint16x8_t *)(&a19 + 2 * v905);
                v909 = v897;
                v910 = v761;
                do
                {
                  *(int8x16_t *)v909->i8 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*v908, *v909)), (int16x8_t)vaddw_high_u8(v908[v761], *(uint8x16_t *)v909->i8));
                  ++v908;
                  v909 = (uint8x8_t *)((char *)v909 + (int)vars0b);
                  --v910;
                }
                while (v910);
                ++v906;
                v905 += 2 * v760;
                v897 += 2;
              }
              while (v906 != v907);
            }
          }
          else if (((0x80C2uLL >> v934) & 1) != 0)
          {
            v903 = (uint16x8_t *)&a19;
            do
            {
              v904 = *v903++;
              *v897 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v904, *v897));
              v897 = (uint8x8_t *)((char *)v897 + (int)vars0b);
              --v761;
            }
            while (v761);
          }
          return;
        }
LABEL_477:
        v753 = v31 - 1;
        vars0d = v28;
        if (v31 == 1)
        {
          v754 = 0;
        }
        else
        {
          v807 = *(__int16 *)(av1_eob_to_eobxy_default[v30] + 2 * (v753 >> tx_size_wide_log2_eob[v30]));
          v753 = *(_WORD *)(av1_eob_to_eobxy_default[v30] + 2 * (v753 >> tx_size_wide_log2_eob[v30]));
          v754 = v807 >> 8;
        }
        v808 = v30;
        v809 = tx_size_wide_1[v808];
        v810 = (int)v809;
        v811 = tx_size_high_0[v37];
        if ((_DWORD)v809 != (_DWORD)v811)
        {
          if ((int)v809 <= (int)v811)
          {
            if ((_DWORD)v811 == 2 * (_DWORD)v809)
            {
              v812 = -1;
              goto LABEL_512;
            }
            if ((_DWORD)v811 == 4 * (_DWORD)v809)
            {
              v812 = -2;
              goto LABEL_512;
            }
          }
          else
          {
            if ((_DWORD)v809 == 2 * (_DWORD)v811)
            {
              v812 = 1;
              goto LABEL_512;
            }
            if ((_DWORD)v809 == 4 * (_DWORD)v811)
            {
              v812 = 2;
              goto LABEL_512;
            }
          }
        }
        v812 = 0;
LABEL_512:
        v971 = (char *)*(&av1_inv_txfm_shift_ls + v37);
        if ((int)v811 >= 32)
          v813 = 32;
        else
          v813 = tx_size_high_0[v37];
        if (v29 > 0xF)
        {
          LOBYTE(v954) = 0;
          v814 = 1;
        }
        else
        {
          v814 = (0xFEAFu >> v29) & 1;
          v954 = (0x80E0u >> v29) & 1;
        }
        v815 = (int)v811;
        v816 = (int)v809 >> 3;
        v956 = (void (*)(uint64_t *, uint64_t *, uint64_t))lowbd_txfm_all_1d_zeros_w_arr[12
                                                                                               * tx_size_high_log2_0[v808]
                                                                                               - 24
                                                                                               + 4 * vitx_1d_tab[v29]
                                                                                               + lowbd_txfm_all_1d_zeros_idx[v754]];
        v817 = 0x7DFDEuLL >> v37;
        if (v754 < 0)
        {
          v821 = (0x7DFDEuLL >> v37) & 1;
        }
        else
        {
          v930 = v814;
          v932 = tx_size_high_0[v37];
          v935 = v37;
          v818 = 0;
          LODWORD(v819) = (v754 + 8) >> 3;
          v948 = (void (*)(unint64_t *, unint64_t *, uint64_t))lowbd_txfm_all_1d_zeros_w_arr[12 * tx_size_wide_log2_0[v808] - 24 + 4 * hitx_1d_tab[v29] + lowbd_txfm_all_1d_zeros_idx[v753]];
          v950 = (v753 & 0xF8u) + 8;
          if (v812 >= 0)
            v820 = v812;
          else
            v820 = -v812;
          vars8_4a = v820;
          v821 = v817 & 1;
          if (v816 <= 1)
            v822 = 1;
          else
            v822 = (int)v809 >> 3;
          if ((int)v819 <= 1)
            v819 = 1;
          else
            v819 = v819;
          v940 = v819;
          v823 = v27 + 1;
          v824 = 4 * v813;
          v825 = ((16 * v753) & 0xF80) + 128;
          v826 = (unint64_t)v822 << 7;
          v827 = (int64x2_t *)&a27;
          v828 = 16 * v815;
          v829 = (int64x2_t *)(&a27 + 2 * (v816 - 1) * (uint64_t)(int)v815);
          v830 = -16 * v815;
          v831 = vdupq_n_s16(0xB50u);
          v832 = &STACK[0x20C0];
          v952 = v815;
          v937 = v831;
          do
          {
            v958 = v829;
            v960 = v827;
            v963 = v823;
            v833 = v823;
            v834 = (int16x8_t *)v832;
            v835 = v950;
            do
            {
              *v834++ = vuzp1q_s16(v833[-1], *v833);
              v833 = (int16x8_t *)((char *)v833 + v824);
              --v835;
            }
            while (v835);
            v836 = v821;
            v837 = v810;
            if (vars8_4a == 1)
            {
              v838 = 0;
              do
              {
                *(int16x8_t *)&v832[v838 / 8] = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16((int16x4_t)v832[v838 / 8], *(int16x4_t *)v831.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)&v832[v838 / 8], v831), 0xCuLL);
                v838 += 16;
              }
              while (v825 != v838);
            }
            v948(&STACK[0x20C0] + 2 * v818 * v810, &STACK[0x20C0] + 2 * v818 * v810, 12);
            if (*v971)
            {
              v839 = 0;
              v840 = vdupq_n_s16(*v971);
              do
              {
                *(int16x8_t *)&v832[2 * v839] = vrshlq_s16(*(int16x8_t *)&v832[2 * v839], v840);
                ++v839;
              }
              while (v809 != v839);
            }
            v821 = v836;
            v810 = v837;
            if ((v954 & 1) != 0)
            {
              v841 = v960;
              v842 = v963;
              v843 = v958;
              v831 = v937;
              if (v836)
              {
                v844 = 0;
                v845 = v958;
                do
                {
                  v846 = (int16x8_t *)&v832[v844 / 8];
                  v848 = *(int16x8_t *)&v832[v844 / 8 + 12];
                  v847 = *(int16x8_t *)&v832[v844 / 8 + 14];
                  v850 = *(int16x8_t *)&v832[v844 / 8 + 8];
                  v849 = *(int16x8_t *)&v832[v844 / 8 + 10];
                  v852 = *(int16x8_t *)&v832[v844 / 8 + 4];
                  v851 = *(int16x8_t *)&v832[v844 / 8 + 6];
                  v854 = *(int16x8_t *)&v832[v844 / 8];
                  v853 = *(int16x8_t *)&v832[v844 / 8 + 2];
                  v855 = (int32x4_t)vtrn1q_s16(v847, v848);
                  v856 = (int32x4_t)vtrn2q_s16(v847, v848);
                  v857 = (int32x4_t)vtrn1q_s16(v849, v850);
                  *v846 = v847;
                  v846[1] = v848;
                  v846[2] = v849;
                  v846[3] = v850;
                  v846[4] = v851;
                  v846[5] = v852;
                  v858 = (int32x4_t)vtrn2q_s16(v849, v850);
                  v859 = (int32x4_t)vtrn1q_s16(v851, v852);
                  v860 = (int32x4_t)vtrn2q_s16(v851, v852);
                  v861 = (int32x4_t)vtrn1q_s16(v853, v854);
                  v862 = (int32x4_t)vtrn2q_s16(v853, v854);
                  v846[6] = v853;
                  v846[7] = v854;
                  v863 = (int64x2_t)vtrn1q_s32(v855, v857);
                  v864 = (int64x2_t)vtrn2q_s32(v855, v857);
                  v865 = (int64x2_t)vtrn1q_s32(v856, v858);
                  v866 = (int64x2_t)vtrn2q_s32(v856, v858);
                  v867 = (int64x2_t)vtrn1q_s32(v859, v861);
                  v868 = (int64x2_t)vtrn2q_s32(v859, v861);
                  v869 = (int64x2_t)vtrn1q_s32(v860, v862);
                  v870 = (int64x2_t)vtrn2q_s32(v860, v862);
                  v845[-4] = vzip1q_s64(v863, v867);
                  v845[-3] = vzip1q_s64(v865, v869);
                  v845[-2] = vzip1q_s64(v864, v868);
                  v845[-1] = vzip1q_s64(v866, v870);
                  *v845 = vzip2q_s64(v863, v867);
                  v845[1] = vzip2q_s64(v865, v869);
                  v845[2] = vzip2q_s64(v864, v868);
                  v845[3] = vzip2q_s64(v866, v870);
                  v844 += 128;
                  v845 = (int64x2_t *)((char *)v845 + v830);
                }
                while (v826 != v844);
              }
            }
            else
            {
              v841 = v960;
              v842 = v963;
              v843 = v958;
              v831 = v937;
              if (v836)
              {
                v871 = 0;
                v872 = v960;
                do
                {
                  v873 = *(int16x8_t *)&v832[v871 / 8];
                  v874 = *(int16x8_t *)&v832[v871 / 8 + 2];
                  v875 = (int32x4_t)vtrn1q_s16(v873, v874);
                  v876 = (int32x4_t)vtrn2q_s16(v873, v874);
                  v877 = *(int16x8_t *)&v832[v871 / 8 + 4];
                  v878 = *(int16x8_t *)&v832[v871 / 8 + 6];
                  v879 = (int32x4_t)vtrn1q_s16(v877, v878);
                  v880 = (int32x4_t)vtrn2q_s16(v877, v878);
                  v881 = *(int16x8_t *)&v832[v871 / 8 + 8];
                  v882 = *(int16x8_t *)&v832[v871 / 8 + 10];
                  v883 = (int32x4_t)vtrn1q_s16(v881, v882);
                  v884 = (int32x4_t)vtrn2q_s16(v881, v882);
                  v885 = *(int16x8_t *)&v832[v871 / 8 + 12];
                  v886 = *(int16x8_t *)&v832[v871 / 8 + 14];
                  v887 = (int32x4_t)vtrn1q_s16(v885, v886);
                  v888 = (int32x4_t)vtrn2q_s16(v885, v886);
                  v889 = (int64x2_t)vtrn1q_s32(v875, v879);
                  v890 = (int64x2_t)vtrn2q_s32(v875, v879);
                  v891 = (int64x2_t)vtrn1q_s32(v876, v880);
                  v892 = (int64x2_t)vtrn2q_s32(v876, v880);
                  v893 = (int64x2_t)vtrn1q_s32(v883, v887);
                  v894 = (int64x2_t)vtrn2q_s32(v883, v887);
                  v895 = (int64x2_t)vtrn1q_s32(v884, v888);
                  v872[-4] = vzip1q_s64(v889, v893);
                  v872[-3] = vzip1q_s64(v891, v895);
                  v896 = (int64x2_t)vtrn2q_s32(v884, v888);
                  v872[-2] = vzip1q_s64(v890, v894);
                  v872[-1] = vzip1q_s64(v892, v896);
                  *v872 = vzip2q_s64(v889, v893);
                  v872[1] = vzip2q_s64(v891, v895);
                  v872[2] = vzip2q_s64(v890, v894);
                  v872[3] = vzip2q_s64(v892, v896);
                  v871 += 128;
                  v872 = (int64x2_t *)((char *)v872 + v828);
                }
                while (v826 != v871);
              }
            }
            ++v818;
            v832 += 2 * (int)v809;
            v823 = v842 + 2;
            v827 = v841 + 8;
            v829 = v843 + 8;
            v815 = v952;
          }
          while (v818 != v940);
          v811 = v932;
          LOBYTE(v37) = v935;
          v814 = v930;
          v816 = (int)v809 >> 3;
        }
        if (v821)
        {
          v911 = 0;
          if (v816 <= 1)
            v912 = 1;
          else
            v912 = v816;
          v913 = &a19;
          do
          {
            v956(&a19 + 2 * v911 * v815, &a19 + 2 * v911 * v815, 12);
            if (v971[1])
            {
              v914 = vdupq_n_s16(v971[1]);
              v915 = (int16x8_t *)v913;
              v916 = v811;
              do
              {
                *v915 = vrshlq_s16(*v915, v914);
                ++v915;
                --v916;
              }
              while (v916);
            }
            ++v911;
            v913 += 2 * v815;
          }
          while (v911 != v912);
        }
        if (((0x75F1CuLL >> v37) & 1) != 0)
        {
          v921 = v972;
          if (((0xA0E3uLL >> v37) & 1) == 0)
          {
            v922 = 0;
            v923 = 0;
            LODWORD(v924) = v809 >> 4;
            v925 = (v811 - 1);
            v926 = 16;
            if (v814)
              v925 = 0;
            else
              v926 = -16;
            if (v924 <= 1)
              v924 = 1;
            else
              v924 = v924;
            do
            {
              v927 = &a19 + 2 * v922;
              v928 = v921;
              v929 = v811;
              do
              {
                *(int8x16_t *)v928->i8 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)&v927[2 * v925], *v928)), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)&v927[2 * v925 + 2 * v811], *(uint8x16_t *)v928->i8));
                v928 = (uint8x8_t *)((char *)v928 + (int)vars0d);
                v927 = (uint64_t *)((char *)v927 + v926);
                --v929;
              }
              while (v929);
              ++v923;
              v921 += 2;
              v922 += 2 * v811;
            }
            while (v923 != v924);
          }
        }
        else
        {
          v917 = v972;
          if (((0x80C2uLL >> v37) & 1) != 0)
          {
            v918 = (v811 - 1);
            v919 = 16;
            if (v814)
              v918 = 0;
            else
              v919 = -16;
            v920 = (uint16x8_t *)(&a19 + 2 * v918);
            do
            {
              *v917 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(*v920, *v917));
              v917 = (uint8x8_t *)((char *)v917 + (int)vars0d);
              v920 = (uint16x8_t *)((char *)v920 + v919);
              LODWORD(v811) = v811 - 1;
            }
            while ((_DWORD)v811);
          }
        }
        return;
      }
      vars0a = v28;
      v455 = v31 - 1;
      v456 = (int)tx_size_wide_1[v30];
      if ((int)v456 >= 32)
        v457 = 32;
      else
        v457 = tx_size_wide_1[v30];
      if (v457 <= v31)
        v458 = v457 - 1;
      else
        v458 = eob_fill[v455];
      v667 = eob_fill[(int)v455 / v457];
      v668 = (char *)*(&av1_inv_txfm_shift_ls + v30);
      v933 = v30;
      v669 = tx_size_wide_log2_0[v30];
      v670 = tx_size_high_log2_0[v30];
      v671 = tx_size_high_0[v30];
      if ((int)v671 * (int)v456 >= 8)
      {
        v672 = v29;
        bzero(&STACK[0x20C0], 16 * ((v671 * v456) >> 3));
        v29 = v672;
      }
      v673 = (int)v456 >> 3;
      if ((_DWORD)v456 == (_DWORD)v671)
        goto LABEL_398;
      if ((int)v456 <= (int)v671)
      {
        if ((_DWORD)v671 == 2 * (_DWORD)v456)
        {
          v674 = -1;
          goto LABEL_399;
        }
        if ((_DWORD)v671 == 4 * (_DWORD)v456)
        {
          v674 = -2;
          goto LABEL_399;
        }
LABEL_398:
        v674 = 0;
        goto LABEL_399;
      }
      if ((_DWORD)v456 != 2 * (_DWORD)v671)
      {
        if ((_DWORD)v456 == 4 * (_DWORD)v671)
        {
          v674 = 2;
          goto LABEL_399;
        }
        goto LABEL_398;
      }
      v674 = 1;
LABEL_399:
      v675 = 0;
      v676 = ((int)v667 + 8) >> 3;
      v677 = v458 & 0xFFFFFFF8;
      v678 = (void (*)(uint64_t *, uint64_t *, uint64_t, int16x8_t *, int64x2_t *, __n128, __n128))lowbd_txfm_all_1d_zeros_w_arr[12 * v670 - 24 + 4 * vitx_1d_tab[v29] + lowbd_txfm_all_1d_zeros_idx[v667]];
      HIDWORD(v679) = v29;
      LODWORD(v679) = (v29 << 24) - 0x4000000;
      v680 = (v458 & 0xF8) + 8;
      v970 = ((v679 >> 25) > 5u) | (0x18u >> (v679 >> 25));
      v32.n128_u16[0] = sqrt_2_list[v669 - 2];
      if (v674 >= 0)
        v681 = v674;
      else
        v681 = -v674;
      if (v673 <= 1)
        v682 = 1;
      else
        v682 = v673;
      if (v676 <= 1)
        v683 = 1;
      else
        v683 = v676;
      v684 = v36 + 1;
      v685 = (__n128)vdupq_n_s16(0xB50u);
      v686 = (int64x2_t *)&a27;
      v687 = 16 * (int)v671;
      while (1)
      {
        v688 = (int16x4_t *)(&STACK[0x20C0] + 2 * v675 * v456);
        if (v677 >= -7)
        {
          v689 = v684;
          v690 = (int16x8_t *)(&STACK[0x20C0] + 2 * v675 * v456);
          v691 = (v677 + 8);
          do
          {
            *v690++ = vuzp1q_s16(v689[-1], *v689);
            v689 = (int16x8_t *)((char *)v689 + 4 * (int)v671);
            --v691;
          }
          while (v691);
          if (v681 == 1)
          {
            v692 = (int16x4_t *)(&STACK[0x20C0] + 2 * v675 * v456);
            v693 = (v677 + 8);
            do
            {
              *(int16x8_t *)v692->i8 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmull_s16(*v692, (int16x4_t)v685.n128_u64[0]), 0xCuLL), vmull_high_s16(*(int16x8_t *)v692->i8, (int16x8_t)v685), 0xCuLL);
              v692 += 2;
              --v693;
            }
            while (v693);
          }
        }
        if ((char)v680 >= 1)
        {
          v694 = vdupq_n_s32(*v668);
          v695 = v680 & 0xF8;
          do
          {
            *(int16x8_t *)v688->i8 = vqmovn_high_s32(vqmovn_s32(vrshlq_s32(vrshrq_n_s32(vmull_lane_s16(*v688, (int16x4_t)v32.n128_u64[0], 0), 0xCuLL), v694)), vrshlq_s32(vrshrq_n_s32(vmull_high_lane_s16(*(int16x8_t *)v688->i8, (int16x4_t)v32.n128_u64[0], 0), 0xCuLL), v694));
            v688 += 2;
            --v695;
          }
          while (v695);
        }
        if (((0x7DFDEuLL >> v933) & 1) != 0)
          break;
        if (++v675 == v683)
          goto LABEL_430;
LABEL_410:
        v684 += 2;
        v686 += 8;
      }
      v696 = (int16x8_t *)((char *)&STACK[0x2100] + 16 * v456 * v675);
      v697 = v686;
      v698 = v682;
      do
      {
        v699 = v696[-4];
        v700 = v696[-3];
        v701 = (int32x4_t)vtrn1q_s16(v699, v700);
        v702 = (int32x4_t)vtrn2q_s16(v699, v700);
        v703 = v696[-2];
        v704 = v696[-1];
        v705 = (int32x4_t)vtrn1q_s16(v703, v704);
        v706 = (int32x4_t)vtrn2q_s16(v703, v704);
        v707 = v696[1];
        v708 = (int32x4_t)vtrn1q_s16(*v696, v707);
        v709 = (int32x4_t)vtrn2q_s16(*v696, v707);
        v710 = v696[2];
        v711 = v696[3];
        v712 = (int32x4_t)vtrn1q_s16(v710, v711);
        v713 = (int32x4_t)vtrn2q_s16(v710, v711);
        v714 = (int64x2_t)vtrn1q_s32(v701, v705);
        v715 = (int64x2_t)vtrn2q_s32(v701, v705);
        v716 = (int64x2_t)vtrn1q_s32(v702, v706);
        v717 = (int64x2_t)vtrn2q_s32(v702, v706);
        v718 = (int64x2_t)vtrn1q_s32(v708, v712);
        v719 = (int64x2_t)vtrn2q_s32(v708, v712);
        v720 = (int64x2_t)vtrn1q_s32(v709, v713);
        v697[-4] = vzip1q_s64(v714, v718);
        v697[-3] = vzip1q_s64(v716, v720);
        v721 = (int64x2_t)vtrn2q_s32(v709, v713);
        v697[-2] = vzip1q_s64(v715, v719);
        v697[-1] = vzip1q_s64(v717, v721);
        *v697 = vzip2q_s64(v714, v718);
        v697[1] = vzip2q_s64(v716, v720);
        v697[2] = vzip2q_s64(v715, v719);
        v697[3] = vzip2q_s64(v717, v721);
        v696 += 8;
        v697 = (int64x2_t *)((char *)v697 + v687);
        --v698;
      }
      while (v698);
      if (++v675 != v683)
        goto LABEL_410;
      v722 = 0;
      v723 = &a19;
      do
      {
        v678(&a19 + 2 * v722 * (int)v671, &a19 + 2 * v722 * (int)v671, 12, v696, v697, v32, v685);
        if (v668[1])
        {
          v32 = (__n128)vdupq_n_s16(v668[1]);
          v724 = (int16x8_t *)v723;
          v725 = v671;
          do
          {
            v685 = (__n128)vrshlq_s16(*v724, (int16x8_t)v32);
            *v724++ = (int16x8_t)v685;
            --v725;
          }
          while (v725);
        }
        ++v722;
        v723 = (uint64_t *)((char *)v723 + v687);
      }
      while (v722 != v682);
LABEL_430:
      if (((0x75F1CuLL >> v933) & 1) != 0)
      {
        v730 = v972;
        if (((0xA0E3uLL >> v933) & 1) == 0)
        {
          v731 = 0;
          v732 = 0;
          LODWORD(v733) = v456 >> 4;
          v734 = (v671 - 1);
          v735 = 16;
          if ((v970 & 1) != 0)
            v734 = 0;
          else
            v735 = -16;
          if (v733 <= 1)
            v733 = 1;
          else
            v733 = v733;
          do
          {
            v736 = &a19 + 2 * v731;
            v737 = v730;
            v738 = v671;
            do
            {
              *(int8x16_t *)v737->i8 = vqmovun_high_s16(vqmovun_s16((int16x8_t)vaddw_u8(*(uint16x8_t *)&v736[2 * v734], *v737)), (int16x8_t)vaddw_high_u8(*(uint16x8_t *)&v736[2 * v734 + 2 * v671], *(uint8x16_t *)v737->i8));
              v737 = (uint8x8_t *)((char *)v737 + (int)vars0a);
              v736 = (uint64_t *)((char *)v736 + v735);
              --v738;
            }
            while (v738);
            ++v732;
            v730 += 2;
            v731 += 2 * v671;
          }
          while (v732 != v733);
        }
      }
      else
      {
        v726 = v972;
        if (((0x80C2uLL >> v933) & 1) != 0)
        {
          v727 = (v671 - 1);
          v728 = 16;
          if ((v970 & 1) != 0)
            v727 = 0;
          else
            v728 = -16;
          v729 = (uint16x8_t *)(&a19 + 2 * v727);
          do
          {
            *v726 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(*v729, *v726));
            v726 = (uint8x8_t *)((char *)v726 + (int)vars0a);
            v729 = (uint16x8_t *)((char *)v729 + v728);
            LODWORD(v671) = v671 - 1;
          }
          while ((_DWORD)v671);
        }
      }
      return;
  }
}

int32x4_t idct8_low1_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int32x4_t result;
  int16x8_t v6;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v4 = vld1q_dup_s16(v3);
  result = vmull_high_s16(*a1, v4);
  v6 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v4.i8), 0xCuLL), result, 0xCuLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6;
  a2[3] = v6;
  a2[4] = v6;
  a2[5] = v6;
  a2[6] = v6;
  a2[7] = v6;
  return result;
}

int16x8_t idct8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  const __int16 *v4;
  const __int16 *v5;
  const __int16 *v6;
  const __int16 *v7;
  const __int16 *v8;
  const __int16 *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v7 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v8 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v9 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v10 = vld1q_dup_s16(v3);
  v11 = vld1q_dup_s16(v4);
  v12 = *(int16x8_t *)(a1 + 16);
  v14 = *(int16x8_t *)(a1 + 96);
  v13 = *(int16x8_t *)(a1 + 112);
  v15 = vmlsl_s16(vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v10.i8);
  v16 = vmlsl_high_s16(vmull_high_s16(v12, v11), v13, v10);
  v17 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v11.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v10.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v13, v11), v12, v10), 0xCuLL);
  v18 = vrshrn_high_n_s32(vrshrn_n_s32(v15, 0xCuLL), v16, 0xCuLL);
  v19 = vld1q_dup_s16(v5);
  v20 = vld1q_dup_s16(v6);
  v22 = *(int16x8_t *)(a1 + 64);
  v21 = *(int16x8_t *)(a1 + 80);
  v24 = *(int16x8_t *)(a1 + 32);
  v23 = *(int16x8_t *)(a1 + 48);
  v25 = vmlsl_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v20.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v19.i8);
  v26 = vmlsl_high_s16(vmull_high_s16(v21, v20), v23, v19);
  v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v20.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v19.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v23, v20), v21, v19), 0xCuLL);
  v28 = vrshrn_high_n_s32(vrshrn_n_s32(v25, 0xCuLL), v26, 0xCuLL);
  v29 = vld1q_dup_s16(v7);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)a1, *(int16x4_t *)v29.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v22, v29), *(int16x8_t *)a1, v29), 0xCuLL);
  v31 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v29.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v29.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(*(int16x8_t *)a1, v29), v22, v29), 0xCuLL);
  v32 = vld1q_dup_s16(v8);
  v33 = vld1q_dup_s16(v9);
  v34 = vmlsl_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v33.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v32.i8);
  v35 = vmlsl_high_s16(vmull_high_s16(v24, v33), v14, v32);
  v36 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v33.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v32.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v14, v33), v24, v32), 0xCuLL);
  v37 = vrshrn_high_n_s32(vrshrn_n_s32(v34, 0xCuLL), v35, 0xCuLL);
  v38 = vqaddq_s16(v18, v28);
  v39 = vqsubq_s16(v18, v28);
  v40 = vqsubq_s16(v17, v27);
  v41 = vqaddq_s16(v17, v27);
  v42 = vqaddq_s16(v30, v36);
  v43 = vqaddq_s16(v31, v37);
  v44 = vqsubq_s16(v31, v37);
  v45 = vqsubq_s16(v30, v36);
  v46 = vmlsl_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v39.i8, *(int16x4_t *)v29.i8);
  v47 = vmlsl_high_s16(vmull_high_s16(v40, v29), v39, v29);
  v48 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v29.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v39, v29), v40, v29), 0xCuLL);
  v49 = vrshrn_high_n_s32(vrshrn_n_s32(v46, 0xCuLL), v47, 0xCuLL);
  *a2 = vqaddq_s16(v42, v41);
  a2[1] = vqaddq_s16(v43, v48);
  a2[2] = vqaddq_s16(v44, v49);
  a2[3] = vqaddq_s16(v45, v38);
  a2[4] = vqsubq_s16(v45, v38);
  a2[5] = vqsubq_s16(v44, v49);
  result = vqsubq_s16(v42, v41);
  a2[6] = vqsubq_s16(v43, v48);
  a2[7] = result;
  return result;
}

int16x8_t iadst8_low1_neon(int16x4_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  const __int16 *v4;
  const __int16 *v5;
  const __int16 *v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int32x4_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v7 = vld1q_dup_s16(v6);
  v8 = vmull_s16(*a1, *(int16x4_t *)v7.i8);
  v9 = vmull_high_s16(*(int16x8_t *)a1->i8, v7);
  v10 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 636]));
  v11 = vmull_s16(*a1, *(int16x4_t *)v10.i8);
  v12 = vmull_high_s16(*(int16x8_t *)a1->i8, v10);
  *(int16x4_t *)v8.i8 = vrshrn_n_s32(v8, 0xCuLL);
  v13 = vrshrn_n_s32(v9, 0xCuLL);
  *(int16x4_t *)v11.i8 = vrshrn_n_s32(v11, 0xCuLL);
  v14 = vrshrn_n_s32(v12, 0xCuLL);
  v15 = vld1_dup_s16(v4);
  v16 = vld1_dup_s16(v5);
  v17 = vmull_s16(*(int16x4_t *)v8.i8, v16);
  v18 = vld1_dup_s16(v3);
  v19 = vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, v16), *(int16x4_t *)v8.i8, v15);
  v20 = vmull_s16(*(int16x4_t *)v8.i8, v18);
  v21 = vmlal_s16(vmull_s16(*(int16x4_t *)v11.i8, v18), *(int16x4_t *)v8.i8, v18);
  v22 = vrshrn_high_n_s32(*(int16x4_t *)v8.i8, v9, 0xCuLL);
  v23 = vmlsl_s16(v17, *(int16x4_t *)v11.i8, v15);
  v24 = vmlsl_s16(v20, *(int16x4_t *)v11.i8, v18);
  v25 = vrshrn_high_n_s32(*(int16x4_t *)v11.i8, v12, 0xCuLL);
  v26 = vmlal_s16(vmull_s16(v14, v16), v13, v15);
  v27 = vmlsl_s16(vmull_s16(v13, v16), v14, v15);
  v28 = vrshrn_n_s32(v19, 0xCuLL);
  v29 = vrshrn_n_s32(v26, 0xCuLL);
  *(int16x4_t *)v23.i8 = vrshrn_n_s32(v23, 0xCuLL);
  *(int16x4_t *)v19.i8 = vrshrn_n_s32(v27, 0xCuLL);
  *a2 = v22;
  a2[1] = vqnegq_s16(vrshrn_high_n_s32(v28, v26, 0xCuLL));
  a2[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v23.i8, v18), v28, v18), 0xCuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, v18), v29, v18), 0xCuLL);
  a2[3] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v21, 0xCuLL), vmlal_s16(vmull_s16(v14, v18), v13, v18), 0xCuLL));
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(v24, 0xCuLL), vmlsl_s16(vmull_s16(v13, v18), v14, v18), 0xCuLL);
  a2[5] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v28, v18), *(int16x4_t *)v23.i8, v18), 0xCuLL), vmlsl_s16(vmull_s16(v29, v18), *(int16x4_t *)v19.i8, v18), 0xCuLL));
  result = vqnegq_s16(v25);
  a2[6] = vrshrn_high_n_s32(*(int16x4_t *)v23.i8, v27, 0xCuLL);
  a2[7] = result;
  return result;
}

int16x8_t iadst8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  const __int16 *v4;
  const __int16 *v5;
  const __int16 *v6;
  const __int16 *v7;
  const __int16 *v8;
  const __int16 *v9;
  const __int16 *v10;
  const __int16 *v11;
  const __int16 *v12;
  const __int16 *v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v7 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v8 = v3 + 72;
  v9 = v3 + 56;
  v10 = v3 + 104;
  v11 = v3 + 24;
  v12 = v3 + 64;
  v13 = v3 + 32;
  v3 += 96;
  v15 = *(int16x8_t *)(a1 + 32);
  v14 = *(int16x8_t *)(a1 + 48);
  v16 = *(int16x8_t *)(a1 + 64);
  v17 = *(int16x8_t *)(a1 + 80);
  v18 = *(int16x8_t *)(a1 + 16);
  v19 = *(int16x8_t *)(a1 + 96);
  v20 = *(int16x8_t *)(a1 + 112);
  v21 = vld1q_dup_s16(v4);
  v22 = vld1q_dup_s16(v5);
  v23 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v22.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v21.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(*(int16x8_t *)a1, v22), v20, v21), 0xCuLL);
  v24 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)a1, *(int16x4_t *)v21.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v20, v22), *(int16x8_t *)a1, v21), 0xCuLL);
  v25 = vld1q_dup_s16(v6);
  v26 = vld1q_dup_s16(v7);
  v27 = vmlsl_s16(vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v26.i8), *(int16x4_t *)v15.i8, *(int16x4_t *)v25.i8);
  v28 = vmlsl_high_s16(vmull_high_s16(v17, v26), v15, v25);
  v29 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v26.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v25.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v15, v26), v17, v25), 0xCuLL);
  v30 = vrshrn_high_n_s32(vrshrn_n_s32(v27, 0xCuLL), v28, 0xCuLL);
  v31 = vld1q_dup_s16(v8);
  v32 = vld1q_dup_s16(v9);
  v33 = vmlsl_s16(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v31.i8);
  v34 = vmlsl_high_s16(vmull_high_s16(v14, v32), v16, v31);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v32.i8), *(int16x4_t *)v14.i8, *(int16x4_t *)v31.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v16, v32), v14, v31), 0xCuLL);
  v36 = vrshrn_high_n_s32(vrshrn_n_s32(v33, 0xCuLL), v34, 0xCuLL);
  v37 = vld1q_dup_s16(v10);
  v38 = vld1q_dup_s16(v11);
  v39 = vmlsl_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v37.i8);
  v40 = vmlsl_high_s16(vmull_high_s16(v18, v38), v19, v37);
  v41 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v37.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v19, v38), v18, v37), 0xCuLL);
  v42 = vrshrn_high_n_s32(vrshrn_n_s32(v39, 0xCuLL), v40, 0xCuLL);
  v43 = vqaddq_s16(v23, v35);
  v44 = vqaddq_s16(v24, v36);
  v45 = vqaddq_s16(v29, v41);
  v46 = vqaddq_s16(v30, v42);
  v47 = vqsubq_s16(v23, v35);
  v48 = vqsubq_s16(v24, v36);
  v49 = vqsubq_s16(v29, v41);
  v50 = vqsubq_s16(v30, v42);
  v51 = vld1q_dup_s16(v13);
  v52 = vld1q_dup_s16(v3);
  v53 = vmlsl_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v52.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v51.i8);
  v54 = vmlsl_high_s16(vmull_high_s16(v47, v52), v48, v51);
  v55 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v52.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v51.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v48, v52), v47, v51), 0xCuLL);
  v56 = vrshrn_high_n_s32(vrshrn_n_s32(v53, 0xCuLL), v54, 0xCuLL);
  v57 = vmlsl_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v52.i8);
  v58 = vmlsl_high_s16(vmull_high_s16(v50, v51), v49, v52);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v52.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v49, v51), v50, v52), 0xCuLL);
  v60 = vrshrn_high_n_s32(vrshrn_n_s32(v57, 0xCuLL), v58, 0xCuLL);
  v61 = vqaddq_s16(v43, v45);
  v62 = vqaddq_s16(v44, v46);
  v63 = vqsubq_s16(v43, v45);
  v64 = vqsubq_s16(v44, v46);
  v65 = vqaddq_s16(v55, v60);
  v66 = vqaddq_s16(v56, v59);
  v67 = vqsubq_s16(v55, v60);
  v68 = vqsubq_s16(v56, v59);
  v69 = vld1q_dup_s16(v12);
  *a2 = v61;
  a2[1] = vqnegq_s16(v65);
  a2[2] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v69.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v68, v69), v67, v69), 0xCuLL);
  a2[3] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v69.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v64, v69), v63, v69), 0xCuLL));
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v69.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v63, v69), v64, v69), 0xCuLL);
  a2[5] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v69.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v69.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v67, v69), v68, v69), 0xCuLL));
  result = vqnegq_s16(v62);
  a2[6] = v66;
  a2[7] = result;
  return result;
}

int32x4_t idct16_low1_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int32x4_t result;
  int16x8_t v6;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v4 = vld1q_dup_s16(v3);
  result = vmull_high_s16(*a1, v4);
  v6 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v4.i8), 0xCuLL), result, 0xCuLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6;
  a2[3] = v6;
  a2[4] = v6;
  a2[5] = v6;
  a2[6] = v6;
  a2[7] = v6;
  a2[8] = v6;
  a2[9] = v6;
  a2[10] = v6;
  a2[11] = v6;
  a2[12] = v6;
  a2[13] = v6;
  a2[14] = v6;
  a2[15] = v6;
  return result;
}

int16x8_t idct16_low8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  int16x8_t v3;
  const __int16 *v4;
  const __int16 *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  const __int16 *v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  const __int16 *v23;
  const __int16 *v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  const __int16 *v31;
  int16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int16x8_t v35;
  int32x4_t v36;
  const __int16 *v37;
  int32x4_t v38;
  unsigned int v39;
  unsigned int v40;
  int16x8_t v41;
  int16x8_t v42;
  const __int16 *v43;
  const __int16 *v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  const __int16 *v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t result;

  v3 = *(int16x8_t *)(a1 + 16);
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v6 = vld1q_dup_s16(v4);
  v7 = vld1q_dup_s16(v5);
  v8 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v6.i8), 0xCuLL), vmull_high_s16(v3, v6), 0xCuLL);
  v9 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v3, v7), 0xCuLL);
  v10 = *(int16x8_t *)(a1 + 96);
  v11 = *(int16x8_t *)(a1 + 112);
  v12 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v13 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 604]));
  v14 = vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v13.i8);
  v15 = vmull_high_s16(v11, v13);
  v16 = vld1q_dup_s16(v12);
  v17 = vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v16.i8);
  v18 = vmull_high_s16(v11, v16);
  v19 = vrshrn_high_n_s32(vrshrn_n_s32(v14, 0xCuLL), v15, 0xCuLL);
  v20 = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xCuLL), v18, 0xCuLL);
  v22 = *(int16x8_t *)(a1 + 64);
  v21 = *(int16x8_t *)(a1 + 80);
  v23 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v24 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v25 = vld1q_dup_s16(v23);
  v26 = vld1q_dup_s16(v24);
  v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v25.i8), 0xCuLL), vmull_high_s16(v21, v25), 0xCuLL);
  v28 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v26.i8), 0xCuLL), vmull_high_s16(v21, v26), 0xCuLL);
  v29 = *(int16x8_t *)(a1 + 32);
  v30 = *(int16x8_t *)(a1 + 48);
  v31 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v32 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]));
  v33 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v32.i8);
  v34 = vmull_high_s16(v30, v32);
  v35 = vld1q_dup_s16(v31);
  v36 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v35.i8);
  v37 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v38 = vmull_high_s16(v30, v35);
  v39 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v40 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v41 = vrshrn_high_n_s32(vrshrn_n_s32(v33, 0xCuLL), v34, 0xCuLL);
  v42 = vrshrn_high_n_s32(vrshrn_n_s32(v36, 0xCuLL), v38, 0xCuLL);
  v43 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v44 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v45 = vld1q_dup_s16(v43);
  v46 = vld1q_dup_s16(v44);
  v47 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v45.i8), 0xCuLL), vmull_high_s16(v29, v45), 0xCuLL);
  v48 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v46.i8), 0xCuLL), vmull_high_s16(v29, v46), 0xCuLL);
  v49 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v50 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]));
  v51 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v50.i8);
  v52 = vmull_high_s16(v10, v50);
  v53 = vld1q_dup_s16(v49);
  v54 = vrshrn_high_n_s32(vrshrn_n_s32(v51, 0xCuLL), v52, 0xCuLL);
  v55 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v53.i8), 0xCuLL), vmull_high_s16(v10, v53), 0xCuLL);
  v56 = vqaddq_s16(v8, v19);
  v57 = vqsubq_s16(v8, v19);
  v58 = vqsubq_s16(v41, v27);
  v59 = vqaddq_s16(v41, v27);
  v60 = vqaddq_s16(v42, v28);
  v61 = vqsubq_s16(v42, v28);
  v62 = vqsubq_s16(v9, v20);
  v63 = vqaddq_s16(v9, v20);
  v64 = vld1q_dup_s16(v37);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v64.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v64), 0xCuLL);
  v66 = vdupq_n_s16(v40);
  v67 = vdupq_n_s16(v39);
  v68 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v66.i8), 0xCuLL), vmull_high_s16(v22, v66), 0xCuLL);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v67.i8), 0xCuLL), vmull_high_s16(v22, v67), 0xCuLL);
  v70 = vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v67.i8);
  v71 = vmlsl_high_s16(vmull_high_s16(v62, v66), v57, v67);
  v72 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v67.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v57, v66), v62, v67), 0xCuLL);
  v73 = vrshrn_high_n_s32(vrshrn_n_s32(v70, 0xCuLL), v71, 0xCuLL);
  v74 = vdupq_n_s16(-v40);
  v75 = vdupq_n_s16(-v39);
  v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v74.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v61, v75), v58, v74), 0xCuLL);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v74.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v58, v75), v61, v74), 0xCuLL);
  v78 = vqaddq_s16(v47, v54);
  v79 = vqsubq_s16(v47, v54);
  v80 = vqsubq_s16(v48, v55);
  v81 = vqaddq_s16(v48, v55);
  v82 = vmlsl_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v79.i8, *(int16x4_t *)v64.i8);
  v83 = vmlsl_high_s16(vmull_high_s16(v80, v64), v79, v64);
  v84 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v64.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v79, v64), v80, v64), 0xCuLL);
  v85 = vrshrn_high_n_s32(vrshrn_n_s32(v82, 0xCuLL), v83, 0xCuLL);
  v86 = vqaddq_s16(v65, v69);
  v87 = vqaddq_s16(v65, v68);
  v88 = vqsubq_s16(v65, v68);
  v89 = vqsubq_s16(v65, v69);
  v90 = vqaddq_s16(v56, v59);
  v91 = vqaddq_s16(v73, v76);
  v92 = vqsubq_s16(v73, v76);
  v93 = vqsubq_s16(v56, v59);
  v94 = vqsubq_s16(v63, v60);
  v95 = vqsubq_s16(v72, v77);
  v96 = vqaddq_s16(v72, v77);
  v97 = vqaddq_s16(v63, v60);
  v98 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v95.i8, *(int16x4_t *)v64.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v92, v64), v95, v64), 0xCuLL);
  v99 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v64.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v95, v64), v92, v64), 0xCuLL);
  v100 = vmlal_high_s16(vmull_high_s16(v93, v64), v94, v64);
  v101 = vmlsl_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8);
  v102 = vmlsl_high_s16(vmull_high_s16(v94, v64), v93, v64);
  *(int16x4_t *)v64.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v64.i8), 0xCuLL);
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(v101, 0xCuLL);
  v103 = vrshrn_high_n_s32(*(int16x4_t *)v64.i8, v100, 0xCuLL);
  v104 = vqaddq_s16(v86, v81);
  v105 = vqaddq_s16(v87, v84);
  *a2 = vqaddq_s16(v104, v97);
  a2[1] = vqaddq_s16(v105, v96);
  v106 = vrshrn_high_n_s32(*(int16x4_t *)v93.i8, v102, 0xCuLL);
  v107 = vqaddq_s16(v88, v85);
  v108 = vqaddq_s16(v89, v78);
  v109 = vqsubq_s16(v89, v78);
  v110 = vqsubq_s16(v88, v85);
  v111 = vqsubq_s16(v87, v84);
  a2[2] = vqaddq_s16(v107, v98);
  a2[3] = vqaddq_s16(v108, v103);
  a2[4] = vqaddq_s16(v109, v106);
  a2[5] = vqaddq_s16(v110, v99);
  v112 = vqsubq_s16(v86, v81);
  a2[6] = vqaddq_s16(v111, v91);
  a2[7] = vqaddq_s16(v112, v90);
  a2[8] = vqsubq_s16(v112, v90);
  a2[9] = vqsubq_s16(v111, v91);
  a2[10] = vqsubq_s16(v110, v99);
  a2[11] = vqsubq_s16(v109, v106);
  a2[12] = vqsubq_s16(v108, v103);
  a2[13] = vqsubq_s16(v107, v98);
  result = vqsubq_s16(v105, v96);
  a2[14] = result;
  a2[15] = vqsubq_s16(v104, v97);
  return result;
}

int16x8_t idct16_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  const __int16 *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  const __int16 *v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  const __int16 *v24;
  const __int16 *v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  const __int16 *v32;
  int16x8_t v33;
  int16x8_t v34;
  const __int16 *v35;
  const __int16 *v36;
  const __int16 *v37;
  const __int16 *v38;
  const __int16 *v39;
  const __int16 *v40;
  int32x4_t v41;
  int16x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v4 = vld1q_dup_s16(v3);
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v6 = vld1q_dup_s16(v5);
  v7 = *(int16x8_t *)(a1 + 16);
  v9 = *(int16x8_t *)(a1 + 224);
  v8 = *(int16x8_t *)(a1 + 240);
  v10 = vmlsl_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v11 = vmlsl_high_s16(vmull_high_s16(v7, v6), v8, v4);
  v12 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v7.i8, *(int16x4_t *)v4.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v8, v6), v7, v4), 0xCuLL);
  v13 = vrshrn_high_n_s32(vrshrn_n_s32(v10, 0xCuLL), v11, 0xCuLL);
  v14 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v15 = vld1q_dup_s16(v14);
  v16 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v17 = vld1q_dup_s16(v16);
  v19 = *(int16x8_t *)(a1 + 128);
  v18 = *(int16x8_t *)(a1 + 144);
  v21 = *(int16x8_t *)(a1 + 96);
  v20 = *(int16x8_t *)(a1 + 112);
  v22 = vmlsl_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v17.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v15.i8);
  v23 = vmlsl_high_s16(vmull_high_s16(v18, v17), v20, v15);
  v24 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v25 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v26 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v17.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v15.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v20, v17), v18, v15), 0xCuLL);
  v27 = vld1q_dup_s16(v24);
  v28 = vrshrn_high_n_s32(vrshrn_n_s32(v22, 0xCuLL), v23, 0xCuLL);
  v29 = vld1q_dup_s16(v25);
  v31 = *(int16x8_t *)(a1 + 64);
  v30 = *(int16x8_t *)(a1 + 80);
  v32 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v34 = *(int16x8_t *)(a1 + 160);
  v33 = *(int16x8_t *)(a1 + 176);
  v35 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v36 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v37 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v38 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v39 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v40 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  LODWORD(v25) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v41 = vmlsl_high_s16(vmull_high_s16(v30, v29), v33, v27);
  v42 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v27.i8), 0xCuLL);
  v43 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v29.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v27.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v33, v29), v30, v27), 0xCuLL);
  v44 = vld1q_dup_s16(v32);
  v45 = vld1q_dup_s16(v35);
  v46 = vrshrn_high_n_s32(v42, v41, 0xCuLL);
  v48 = *(int16x8_t *)(a1 + 192);
  v47 = *(int16x8_t *)(a1 + 208);
  v50 = *(int16x8_t *)(a1 + 32);
  v49 = *(int16x8_t *)(a1 + 48);
  LODWORD(v35) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v51 = vmlsl_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v45.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v44.i8);
  v52 = vmlsl_high_s16(vmull_high_s16(v47, v45), v49, v44);
  v53 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v45.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v44.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v49, v45), v47, v44), 0xCuLL);
  v54 = vrshrn_high_n_s32(vrshrn_n_s32(v51, 0xCuLL), v52, 0xCuLL);
  v55 = vld1q_dup_s16(v36);
  v56 = vld1q_dup_s16(v37);
  v57 = vmlsl_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v55.i8);
  v58 = vmlsl_high_s16(vmull_high_s16(v50, v56), v9, v55);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v55.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v9, v56), v50, v55), 0xCuLL);
  v60 = vrshrn_high_n_s32(vrshrn_n_s32(v57, 0xCuLL), v58, 0xCuLL);
  v61 = vld1q_dup_s16(v38);
  v62 = vld1q_dup_s16(v39);
  v63 = vmlsl_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v61.i8);
  v64 = vmlsl_high_s16(vmull_high_s16(v34, v62), v21, v61);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v62.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v61.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v21, v62), v34, v61), 0xCuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(v63, 0xCuLL), v64, 0xCuLL);
  v67 = vqaddq_s16(v13, v28);
  v68 = vqsubq_s16(v13, v28);
  v69 = vqsubq_s16(v54, v46);
  v70 = vqaddq_s16(v54, v46);
  v71 = vqaddq_s16(v53, v43);
  v72 = vqsubq_s16(v53, v43);
  v73 = vqsubq_s16(v12, v26);
  v74 = vqaddq_s16(v12, v26);
  v75 = vld1q_dup_s16(v40);
  v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)a1, *(int16x4_t *)v75.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v19, v75), *(int16x8_t *)a1, v75), 0xCuLL);
  v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v75.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v75.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(*(int16x8_t *)a1, v75), v19, v75), 0xCuLL);
  v78 = vdupq_n_s16(v25);
  v79 = vdupq_n_s16(v35);
  v80 = vmlsl_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v78.i8);
  v81 = vmlsl_high_s16(vmull_high_s16(v31, v79), v48, v78);
  v82 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v78.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v48, v79), v31, v78), 0xCuLL);
  v83 = vrshrn_high_n_s32(vrshrn_n_s32(v80, 0xCuLL), v81, 0xCuLL);
  v84 = vmlsl_s16(vmull_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v78.i8);
  v85 = vmlsl_high_s16(vmull_high_s16(v73, v79), v68, v78);
  v86 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v79.i8), *(int16x4_t *)v73.i8, *(int16x4_t *)v78.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v68, v79), v73, v78), 0xCuLL);
  v87 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xCuLL), v85, 0xCuLL);
  v88 = vdupq_n_s16(-(int)v35);
  v89 = vdupq_n_s16(-(int)v25);
  v90 = vmlsl_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v89.i8), *(int16x4_t *)v72.i8, *(int16x4_t *)v88.i8);
  v91 = vmlsl_high_s16(vmull_high_s16(v69, v89), v72, v88);
  v92 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v72.i8, *(int16x4_t *)v89.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v88.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v72, v89), v69, v88), 0xCuLL);
  v93 = vrshrn_high_n_s32(vrshrn_n_s32(v90, 0xCuLL), v91, 0xCuLL);
  v94 = vqaddq_s16(v60, v66);
  v95 = vqsubq_s16(v60, v66);
  v96 = vqsubq_s16(v59, v65);
  v97 = vqaddq_s16(v59, v65);
  v98 = vmlsl_s16(vmull_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v95.i8, *(int16x4_t *)v75.i8);
  v99 = vmlsl_high_s16(vmull_high_s16(v96, v75), v95, v75);
  v100 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v75.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v95, v75), v96, v75), 0xCuLL);
  v101 = vrshrn_high_n_s32(vrshrn_n_s32(v98, 0xCuLL), v99, 0xCuLL);
  v102 = vqaddq_s16(v76, v82);
  v103 = vqaddq_s16(v77, v83);
  v104 = vqsubq_s16(v77, v83);
  v105 = vqsubq_s16(v76, v82);
  v106 = vqaddq_s16(v67, v70);
  v107 = vqaddq_s16(v87, v92);
  v108 = vqsubq_s16(v87, v92);
  v109 = vqsubq_s16(v67, v70);
  v110 = vqsubq_s16(v74, v71);
  v111 = vqsubq_s16(v86, v93);
  v112 = vqaddq_s16(v86, v93);
  v113 = vqaddq_s16(v74, v71);
  v114 = vmlsl_s16(vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v75.i8);
  v115 = vmlsl_high_s16(vmull_high_s16(v111, v75), v108, v75);
  v116 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v111.i8, *(int16x4_t *)v75.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v108, v75), v111, v75), 0xCuLL);
  v117 = vrshrn_high_n_s32(vrshrn_n_s32(v114, 0xCuLL), v115, 0xCuLL);
  v118 = vmlal_high_s16(vmull_high_s16(v109, v75), v110, v75);
  v119 = vmlsl_s16(vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v75.i8);
  v120 = vmlsl_high_s16(vmull_high_s16(v110, v75), v109, v75);
  *(int16x4_t *)v75.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v75.i8), 0xCuLL);
  *(int16x4_t *)v109.i8 = vrshrn_n_s32(v119, 0xCuLL);
  v121 = vrshrn_high_n_s32(*(int16x4_t *)v75.i8, v118, 0xCuLL);
  v122 = vqaddq_s16(v102, v97);
  v123 = vqaddq_s16(v103, v100);
  *a2 = vqaddq_s16(v122, v113);
  a2[1] = vqaddq_s16(v123, v112);
  v124 = vrshrn_high_n_s32(*(int16x4_t *)v109.i8, v120, 0xCuLL);
  v125 = vqaddq_s16(v104, v101);
  v126 = vqaddq_s16(v105, v94);
  v127 = vqsubq_s16(v105, v94);
  v128 = vqsubq_s16(v104, v101);
  v129 = vqsubq_s16(v103, v100);
  a2[2] = vqaddq_s16(v125, v116);
  a2[3] = vqaddq_s16(v126, v121);
  a2[4] = vqaddq_s16(v127, v124);
  a2[5] = vqaddq_s16(v128, v117);
  v130 = vqsubq_s16(v102, v97);
  a2[6] = vqaddq_s16(v129, v107);
  a2[7] = vqaddq_s16(v130, v106);
  a2[8] = vqsubq_s16(v130, v106);
  a2[9] = vqsubq_s16(v129, v107);
  a2[10] = vqsubq_s16(v128, v117);
  a2[11] = vqsubq_s16(v127, v124);
  a2[12] = vqsubq_s16(v126, v121);
  a2[13] = vqsubq_s16(v125, v116);
  result = vqsubq_s16(v123, v112);
  a2[14] = result;
  a2[15] = vqsubq_s16(v122, v113);
  return result;
}

int16x8_t iadst16_low1_neon(int16x4_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  const __int16 *v4;
  const __int16 *v5;
  const __int16 *v6;
  const __int16 *v7;
  const __int16 *v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int16x4_t v14;
  int16x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int16x8_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v7 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v8 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v9 = vld1q_dup_s16(v8);
  v10 = vmull_s16(*a1, *(int16x4_t *)v9.i8);
  v11 = vmull_high_s16(*(int16x8_t *)a1->i8, v9);
  v12 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 638]));
  v13 = vmull_high_s16(*(int16x8_t *)a1->i8, v12);
  v14 = vrshrn_n_s32(v10, 0xCuLL);
  v15 = vrshrn_n_s32(v11, 0xCuLL);
  v16 = vrshrn_n_s32(vmull_s16(*a1, *(int16x4_t *)v12.i8), 0xCuLL);
  *(int16x4_t *)v12.i8 = vrshrn_n_s32(v13, 0xCuLL);
  v17 = vld1_dup_s16(v3);
  v18 = vld1_dup_s16(v4);
  v19 = vmull_s16(v14, v18);
  *(int16x4_t *)v10.i8 = vld1_dup_s16(v6);
  v20 = vmlal_s16(vmull_s16(v16, v18), v14, v17);
  v21 = vld1_dup_s16(v7);
  v22 = vmull_s16(v14, v21);
  v23 = vmlal_s16(vmull_s16(v16, v21), v14, *(int16x4_t *)v10.i8);
  v24 = vld1_dup_s16(v5);
  v25 = vmull_s16(v14, v24);
  v26 = vmlal_s16(vmull_s16(v16, v24), v14, v24);
  v27 = vrshrn_high_n_s32(v14, v11, 0xCuLL);
  v28 = vmlsl_s16(v19, v16, v17);
  v29 = vmlsl_s16(v22, v16, *(int16x4_t *)v10.i8);
  v30 = vmlsl_s16(v25, v16, v24);
  v31 = vrshrn_high_n_s32(v16, v13, 0xCuLL);
  v32 = vmull_s16(v15, v18);
  v33 = vmlal_s16(vmull_s16(*(int16x4_t *)v12.i8, v18), v15, v17);
  v34 = vmlsl_s16(v32, *(int16x4_t *)v12.i8, v17);
  v35 = vrshrn_n_s32(v20, 0xCuLL);
  *(int16x4_t *)v13.i8 = vrshrn_n_s32(v33, 0xCuLL);
  *(int16x4_t *)v28.i8 = vrshrn_n_s32(v28, 0xCuLL);
  v36 = vrshrn_n_s32(v34, 0xCuLL);
  v37 = vmull_s16(v35, v21);
  v38 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, v21), v35, *(int16x4_t *)v10.i8);
  v39 = vmull_s16(v35, v24);
  v40 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, v24), v35, v24);
  v41 = vrshrn_high_n_s32(v35, v33, 0xCuLL);
  v42 = vmlsl_s16(v37, *(int16x4_t *)v28.i8, *(int16x4_t *)v10.i8);
  v43 = vmlsl_s16(v39, *(int16x4_t *)v28.i8, v24);
  v44 = vrshrn_high_n_s32(*(int16x4_t *)v28.i8, v34, 0xCuLL);
  v45 = vmlal_s16(vmull_s16(*(int16x4_t *)v12.i8, v21), v15, *(int16x4_t *)v10.i8);
  v46 = vmlsl_s16(vmull_s16(v15, v21), *(int16x4_t *)v12.i8, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v23.i8 = vrshrn_n_s32(v23, 0xCuLL);
  v47 = vrshrn_n_s32(v45, 0xCuLL);
  *(int16x4_t *)v29.i8 = vrshrn_n_s32(v29, 0xCuLL);
  v48 = vrshrn_n_s32(v46, 0xCuLL);
  v49 = vmull_s16(*(int16x4_t *)v23.i8, v24);
  v50 = vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, v24), *(int16x4_t *)v23.i8, v24);
  v51 = vrshrn_high_n_s32(*(int16x4_t *)v23.i8, v45, 0xCuLL);
  v52 = vmlsl_s16(v49, *(int16x4_t *)v29.i8, v24);
  v53 = vrshrn_high_n_s32(*(int16x4_t *)v29.i8, v46, 0xCuLL);
  v54 = vmull_s16(*(int16x4_t *)v13.i8, v21);
  v55 = vmlal_s16(vmull_s16(v36, v21), *(int16x4_t *)v13.i8, *(int16x4_t *)v10.i8);
  v56 = vmlsl_s16(v54, v36, *(int16x4_t *)v10.i8);
  *(int16x4_t *)v10.i8 = vrshrn_n_s32(v38, 0xCuLL);
  *(int16x4_t *)v45.i8 = vrshrn_n_s32(v55, 0xCuLL);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(v42, 0xCuLL);
  *(int16x4_t *)v38.i8 = vrshrn_n_s32(v56, 0xCuLL);
  *a2 = v27;
  a2[1] = vqnegq_s16(v41);
  a2[2] = vrshrn_high_n_s32(*(int16x4_t *)v10.i8, v55, 0xCuLL);
  a2[3] = vqnegq_s16(v51);
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(v50, 0xCuLL), vmlal_s16(vmull_s16(v48, v24), v47, v24), 0xCuLL);
  a2[5] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v42.i8, v24), *(int16x4_t *)v10.i8, v24), 0xCuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v38.i8, v24), *(int16x4_t *)v45.i8, v24), 0xCuLL));
  a2[6] = vrshrn_high_n_s32(vrshrn_n_s32(v40, 0xCuLL), vmlal_s16(vmull_s16(v36, v24), *(int16x4_t *)v13.i8, v24), 0xCuLL);
  a2[7] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xCuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v12.i8, v24), v15, v24), 0xCuLL));
  a2[8] = vrshrn_high_n_s32(vrshrn_n_s32(v30, 0xCuLL), vmlsl_s16(vmull_s16(v15, v24), *(int16x4_t *)v12.i8, v24), 0xCuLL);
  a2[9] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v43, 0xCuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v13.i8, v24), v36, v24), 0xCuLL));
  a2[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v10.i8, v24), *(int16x4_t *)v42.i8, v24), 0xCuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v45.i8, v24), *(int16x4_t *)v38.i8, v24), 0xCuLL);
  a2[11] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v52, 0xCuLL), vmlsl_s16(vmull_s16(v47, v24), v48, v24), 0xCuLL));
  a2[12] = v53;
  a2[13] = vqnegq_s16(vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v56, 0xCuLL));
  result = vqnegq_s16(v31);
  a2[14] = v44;
  a2[15] = result;
  return result;
}

int16x8_t iadst16_low8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x8_t v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int16x8_t v23;
  const __int16 *v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  int16x8_t v34;
  const __int16 *v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  const __int16 *v40;
  const __int16 *v41;
  int16x8_t v42;
  int16x8_t v43;
  const __int16 *v44;
  int16x8_t v45;
  const __int16 *v46;
  const __int16 *v47;
  int16x8_t v48;
  const __int16 *v49;
  const __int16 *v50;
  const __int16 *v51;
  const __int16 *v52;
  int16x8_t v53;
  int16x8_t v54;
  const __int16 *v55;
  const __int16 *v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  const __int16 *v61;
  const __int16 *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  const __int16 *v67;
  const __int16 *v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 16);
  v6 = vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v4.i8);
  v7 = vmull_high_s16(*(int16x8_t *)a1, v4);
  v8 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 638]));
  v9 = vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v8.i8);
  v10 = vmull_high_s16(*(int16x8_t *)a1, v8);
  v11 = vrshrn_high_n_s32(vrshrn_n_s32(v6, 0xCuLL), v7, 0xCuLL);
  v12 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v13 = vld1q_dup_s16(v12);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(v9, 0xCuLL), v10, 0xCuLL);
  v15 = *(int16x8_t *)(a1 + 32);
  v16 = *(int16x8_t *)(a1 + 48);
  v17 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v13.i8);
  v18 = vmull_high_s16(v15, v13);
  v19 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 630]));
  v20 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v19.i8);
  v21 = vmull_high_s16(v15, v19);
  v22 = vrshrn_high_n_s32(vrshrn_n_s32(v17, 0xCuLL), v18, 0xCuLL);
  v23 = vrshrn_high_n_s32(vrshrn_n_s32(v20, 0xCuLL), v21, 0xCuLL);
  v24 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v25 = vld1q_dup_s16(v24);
  v26 = *(int16x8_t *)(a1 + 64);
  v27 = *(int16x8_t *)(a1 + 80);
  v28 = vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v25.i8);
  v29 = vmull_high_s16(v26, v25);
  v30 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 622]));
  v31 = vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v30.i8);
  v32 = vmull_high_s16(v26, v30);
  v33 = vrshrn_high_n_s32(vrshrn_n_s32(v28, 0xCuLL), v29, 0xCuLL);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(v31, 0xCuLL), v32, 0xCuLL);
  v35 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v36 = vld1q_dup_s16(v35);
  v37 = *(int16x8_t *)(a1 + 96);
  v38 = *(int16x8_t *)(a1 + 112);
  v39 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 614]));
  v40 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v41 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v42 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v36.i8), 0xCuLL), vmull_high_s16(v37, v36), 0xCuLL);
  v43 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v39.i8), 0xCuLL), vmull_high_s16(v37, v39), 0xCuLL);
  v44 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v45 = vld1q_dup_s16(v44);
  v46 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v47 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v48 = vld1q_dup_s16(v47);
  v49 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v50 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v51 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v52 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v53 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v45.i8), 0xCuLL), vmull_high_s16(v38, v45), 0xCuLL);
  v54 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v48.i8), 0xCuLL), vmull_high_s16(v38, v48), 0xCuLL);
  v55 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v56 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v57 = vld1q_dup_s16(v55);
  v58 = vld1q_dup_s16(v56);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v57.i8), 0xCuLL), vmull_high_s16(v27, v57), 0xCuLL);
  v60 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v58.i8), 0xCuLL), vmull_high_s16(v27, v58), 0xCuLL);
  v61 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v62 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v63 = vld1q_dup_s16(v61);
  v64 = vld1q_dup_s16(v62);
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v63.i8), 0xCuLL), vmull_high_s16(v16, v63), 0xCuLL);
  v66 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v64.i8), 0xCuLL), vmull_high_s16(v16, v64), 0xCuLL);
  v67 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v68 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v69 = vld1q_dup_s16(v67);
  v70 = vld1q_dup_s16(v68);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v69.i8), 0xCuLL), vmull_high_s16(v5, v69), 0xCuLL);
  v72 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v70.i8), 0xCuLL), vmull_high_s16(v5, v70), 0xCuLL);
  v73 = vqaddq_s16(v11, v53);
  v74 = vqaddq_s16(v14, v54);
  v75 = vqaddq_s16(v22, v59);
  v76 = vqaddq_s16(v23, v60);
  v77 = vqaddq_s16(v33, v65);
  v78 = vqaddq_s16(v34, v66);
  v79 = vqaddq_s16(v42, v71);
  v80 = vqaddq_s16(v43, v72);
  v81 = vqsubq_s16(v11, v53);
  v82 = vqsubq_s16(v14, v54);
  v83 = vqsubq_s16(v22, v59);
  v84 = vqsubq_s16(v23, v60);
  v85 = vqsubq_s16(v33, v65);
  v86 = vqsubq_s16(v34, v66);
  v87 = vqsubq_s16(v42, v71);
  v88 = vqsubq_s16(v43, v72);
  v89 = vld1q_dup_s16(v40);
  v90 = vld1q_dup_s16(v41);
  v91 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v90.i8), *(int16x4_t *)v81.i8, *(int16x4_t *)v89.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v82, v90), v81, v89), 0xCuLL);
  v92 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v90.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v89.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v81, v90), v82, v89), 0xCuLL);
  v93 = vld1q_dup_s16(v46);
  v94 = vld1q_dup_s16(v49);
  v95 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v83.i8, *(int16x4_t *)v93.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v84, v94), v83, v93), 0xCuLL);
  v96 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v83.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v84.i8, *(int16x4_t *)v93.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v83, v94), v84, v93), 0xCuLL);
  v97 = vmull_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v89.i8);
  v98 = vmull_high_s16(v86, v89);
  v99 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v89.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v90.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v85, v89), v86, v90), 0xCuLL);
  v100 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(v97, *(int16x4_t *)v85.i8, *(int16x4_t *)v90.i8), 0xCuLL), vmlsl_high_s16(v98, v85, v90), 0xCuLL);
  v101 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v93.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v94.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v87, v93), v88, v94), 0xCuLL);
  v102 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v93.i8), *(int16x4_t *)v87.i8, *(int16x4_t *)v94.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v88, v93), v87, v94), 0xCuLL);
  v103 = vqaddq_s16(v73, v77);
  v104 = vqaddq_s16(v74, v78);
  v105 = vqaddq_s16(v75, v79);
  v106 = vqaddq_s16(v76, v80);
  v107 = vqsubq_s16(v73, v77);
  v108 = vqsubq_s16(v74, v78);
  v109 = vqsubq_s16(v75, v79);
  v110 = vqsubq_s16(v76, v80);
  v111 = vqaddq_s16(v91, v100);
  v112 = vqaddq_s16(v92, v99);
  v113 = vqaddq_s16(v95, v102);
  v114 = vqaddq_s16(v96, v101);
  v115 = vqsubq_s16(v91, v100);
  v116 = vqsubq_s16(v92, v99);
  v117 = vqsubq_s16(v95, v102);
  v118 = vqsubq_s16(v96, v101);
  v119 = vld1q_dup_s16(v51);
  v120 = vld1q_dup_s16(v52);
  v121 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v120.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v119.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v108, v120), v107, v119), 0xCuLL);
  v122 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v120.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v119.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v107, v120), v108, v119), 0xCuLL);
  v123 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v120.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v109, v119), v110, v120), 0xCuLL);
  v124 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v120.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v110, v119), v109, v120), 0xCuLL);
  v125 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v120.i8), *(int16x4_t *)v115.i8, *(int16x4_t *)v119.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v116, v120), v115, v119), 0xCuLL);
  v126 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v120.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v119.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v115, v120), v116, v119), 0xCuLL);
  v127 = vmlsl_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v117.i8, *(int16x4_t *)v120.i8);
  v128 = vmlsl_high_s16(vmull_high_s16(v118, v119), v117, v120);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v120.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v117, v119), v118, v120), 0xCuLL);
  v130 = vrshrn_high_n_s32(vrshrn_n_s32(v127, 0xCuLL), v128, 0xCuLL);
  v131 = vqaddq_s16(v103, v105);
  v132 = vqsubq_s16(v103, v105);
  v133 = vqsubq_s16(v104, v106);
  v134 = vqaddq_s16(v121, v124);
  v135 = vqsubq_s16(v121, v124);
  v136 = vqsubq_s16(v122, v123);
  v137 = vqaddq_s16(v111, v113);
  v138 = vqsubq_s16(v111, v113);
  v139 = vqsubq_s16(v112, v114);
  v140 = vqsubq_s16(v125, v130);
  v141 = vqsubq_s16(v126, v129);
  v142 = vld1q_dup_s16(v50);
  *a2 = v131;
  a2[1] = vqnegq_s16(v137);
  a2[2] = vqaddq_s16(v125, v130);
  a2[3] = vqnegq_s16(v134);
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v136.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v136, v142), v135, v142), 0xCuLL);
  a2[5] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v140.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v141, v142), v140, v142), 0xCuLL));
  a2[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v139, v142), v138, v142), 0xCuLL);
  a2[7] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v132.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v133, v142), v132, v142), 0xCuLL));
  a2[8] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v132, v142), v133, v142), 0xCuLL);
  a2[9] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v138.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v138, v142), v139, v142), 0xCuLL));
  a2[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v140, v142), v141, v142), 0xCuLL);
  a2[11] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v142.i8), *(int16x4_t *)v136.i8, *(int16x4_t *)v142.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v135, v142), v136, v142), 0xCuLL));
  a2[12] = vqaddq_s16(v122, v123);
  a2[13] = vqnegq_s16(vqaddq_s16(v126, v129));
  result = vqnegq_s16(vqaddq_s16(v104, v106));
  a2[14] = vqaddq_s16(v112, v114);
  a2[15] = result;
  return result;
}

int16x8_t iadst16_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  const __int16 *v4;
  int16x8_t v5;
  const __int16 *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  const __int16 *v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  const __int16 *v26;
  const __int16 *v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  const __int16 *v36;
  const __int16 *v37;
  const __int16 *v38;
  const __int16 *v39;
  int32x4_t v40;
  const __int16 *v41;
  int32x4_t v42;
  const __int16 *v43;
  const __int16 *v44;
  const __int16 *v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  const __int16 *v54;
  const __int16 *v55;
  const __int16 *v56;
  const __int16 *v57;
  int32x4_t v58;
  const __int16 *v59;
  int32x4_t v60;
  const __int16 *v61;
  const __int16 *v62;
  const __int16 *v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 640];
  v4 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v5 = vld1q_dup_s16(v4);
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v7 = vld1q_dup_s16(v6);
  v8 = *(int16x8_t *)(a1 + 224);
  v9 = *(int16x8_t *)(a1 + 240);
  v10 = *(int16x8_t *)(a1 + 16);
  v11 = vmlsl_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v7.i8), *(int16x4_t *)a1, *(int16x4_t *)v5.i8);
  v12 = vmlsl_high_s16(vmull_high_s16(v9, v7), *(int16x8_t *)a1, v5);
  v13 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v7.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v5.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(*(int16x8_t *)a1, v7), v9, v5), 0xCuLL);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(v11, 0xCuLL), v12, 0xCuLL);
  v15 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v16 = vld1q_dup_s16(v15);
  v17 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v18 = vld1q_dup_s16(v17);
  v20 = *(int16x8_t *)(a1 + 192);
  v19 = *(int16x8_t *)(a1 + 208);
  v22 = *(int16x8_t *)(a1 + 32);
  v21 = *(int16x8_t *)(a1 + 48);
  v23 = vmlal_high_s16(vmull_high_s16(v22, v18), v19, v16);
  v24 = vmlsl_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v18.i8), *(int16x4_t *)v22.i8, *(int16x4_t *)v16.i8);
  v25 = vmlsl_high_s16(vmull_high_s16(v19, v18), v22, v16);
  *(int16x4_t *)v16.i8 = vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v18.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v16.i8), 0xCuLL);
  v26 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  *(int16x4_t *)v18.i8 = vrshrn_n_s32(v24, 0xCuLL);
  v27 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v28 = vrshrn_high_n_s32(*(int16x4_t *)v16.i8, v23, 0xCuLL);
  v29 = vld1q_dup_s16(v26);
  v30 = vld1q_dup_s16(v27);
  v31 = vrshrn_high_n_s32(*(int16x4_t *)v18.i8, v25, 0xCuLL);
  v33 = *(int16x8_t *)(a1 + 160);
  v32 = *(int16x8_t *)(a1 + 176);
  v35 = *(int16x8_t *)(a1 + 64);
  v34 = *(int16x8_t *)(a1 + 80);
  v36 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v37 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v38 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v39 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v40 = vmlsl_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v29.i8);
  v41 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v42 = vmlsl_high_s16(vmull_high_s16(v32, v30), v35, v29);
  v43 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v44 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v45 = v3 + 28;
  v46 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v29.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v35, v30), v32, v29), 0xCuLL);
  v47 = vrshrn_high_n_s32(vrshrn_n_s32(v40, 0xCuLL), v42, 0xCuLL);
  v48 = vld1q_dup_s16(v36);
  v49 = vld1q_dup_s16(v37);
  v51 = *(int16x8_t *)(a1 + 128);
  v50 = *(int16x8_t *)(a1 + 144);
  v52 = *(int16x8_t *)(a1 + 96);
  v53 = *(int16x8_t *)(a1 + 112);
  v54 = v3 + 116;
  v55 = v3 + 12;
  v56 = v3 + 16;
  v57 = v3 + 112;
  v58 = vmlsl_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v49.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v48.i8);
  v59 = v3 + 80;
  v60 = vmlsl_high_s16(vmull_high_s16(v50, v49), v52, v48);
  v61 = v3 + 48;
  v62 = v3 + 64;
  v63 = v3 + 32;
  v64 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v49.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v52, v49), v50, v48), 0xCuLL);
  v3 += 96;
  v65 = vrshrn_high_n_s32(vrshrn_n_s32(v58, 0xCuLL), v60, 0xCuLL);
  v66 = vld1q_dup_s16(v38);
  v67 = vld1q_dup_s16(v39);
  v68 = vmlsl_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v66.i8);
  v69 = vmlsl_high_s16(vmull_high_s16(v53, v67), v51, v66);
  v70 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v67.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v66.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v51, v67), v53, v66), 0xCuLL);
  v71 = vrshrn_high_n_s32(vrshrn_n_s32(v68, 0xCuLL), v69, 0xCuLL);
  v72 = vld1q_dup_s16(v41);
  v73 = vld1q_dup_s16(v43);
  v74 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v72.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v33, v73), v34, v72), 0xCuLL);
  v75 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v73.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v72.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v34, v73), v33, v72), 0xCuLL);
  v76 = vld1q_dup_s16(v44);
  v77 = vld1q_dup_s16(v45);
  v78 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v77.i8), *(int16x4_t *)v21.i8, *(int16x4_t *)v76.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v20, v77), v21, v76), 0xCuLL);
  v79 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v77.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v76.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v21, v77), v20, v76), 0xCuLL);
  v80 = vld1q_dup_s16(v54);
  v81 = vld1q_dup_s16(v55);
  v82 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v10.i8, *(int16x4_t *)v80.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v8, v81), v10, v80), 0xCuLL);
  v83 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v81.i8), *(int16x4_t *)v8.i8, *(int16x4_t *)v80.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v10, v81), v8, v80), 0xCuLL);
  v84 = vqaddq_s16(v13, v70);
  v85 = vqaddq_s16(v14, v71);
  v86 = vqaddq_s16(v28, v74);
  v87 = vqaddq_s16(v31, v75);
  v88 = vqaddq_s16(v46, v78);
  v89 = vqaddq_s16(v47, v79);
  v90 = vqaddq_s16(v64, v82);
  v91 = vqaddq_s16(v65, v83);
  v92 = vqsubq_s16(v13, v70);
  v93 = vqsubq_s16(v14, v71);
  v94 = vqsubq_s16(v28, v74);
  v95 = vqsubq_s16(v31, v75);
  v96 = vqsubq_s16(v46, v78);
  v97 = vqsubq_s16(v47, v79);
  v98 = vqsubq_s16(v64, v82);
  v99 = vqsubq_s16(v65, v83);
  v100 = vld1q_dup_s16(v56);
  v101 = vld1q_dup_s16(v57);
  v102 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v100.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v93, v101), v92, v100), 0xCuLL);
  v103 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v100.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v92, v101), v93, v100), 0xCuLL);
  v104 = vld1q_dup_s16(v59);
  v105 = vld1q_dup_s16(v61);
  v106 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v104.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v95, v105), v94, v104), 0xCuLL);
  v107 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v95.i8, *(int16x4_t *)v104.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v94, v105), v95, v104), 0xCuLL);
  v108 = vmlsl_s16(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v100.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v101.i8);
  v109 = vmlsl_high_s16(vmull_high_s16(v97, v100), v96, v101);
  v110 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v100.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v101.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v96, v100), v97, v101), 0xCuLL);
  v111 = vrshrn_high_n_s32(vrshrn_n_s32(v108, 0xCuLL), v109, 0xCuLL);
  v112 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v104.i8), *(int16x4_t *)v99.i8, *(int16x4_t *)v105.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v98, v104), v99, v105), 0xCuLL);
  v113 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v104.i8), *(int16x4_t *)v98.i8, *(int16x4_t *)v105.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v99, v104), v98, v105), 0xCuLL);
  v114 = vqaddq_s16(v84, v88);
  v115 = vqaddq_s16(v85, v89);
  v116 = vqaddq_s16(v86, v90);
  v117 = vqaddq_s16(v87, v91);
  v118 = vqsubq_s16(v84, v88);
  v119 = vqsubq_s16(v85, v89);
  v120 = vqsubq_s16(v86, v90);
  v121 = vqsubq_s16(v87, v91);
  v122 = vqaddq_s16(v102, v111);
  v123 = vqaddq_s16(v103, v110);
  v124 = vqaddq_s16(v106, v113);
  v125 = vqaddq_s16(v107, v112);
  v126 = vqsubq_s16(v102, v111);
  v127 = vqsubq_s16(v103, v110);
  v128 = vqsubq_s16(v106, v113);
  v129 = vqsubq_s16(v107, v112);
  v130 = vld1q_dup_s16(v63);
  v131 = vld1q_dup_s16(v3);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v130.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v119, v131), v118, v130), 0xCuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v119.i8, *(int16x4_t *)v130.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v118, v131), v119, v130), 0xCuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v130.i8), *(int16x4_t *)v121.i8, *(int16x4_t *)v131.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v120, v130), v121, v131), 0xCuLL);
  v135 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v130.i8), *(int16x4_t *)v120.i8, *(int16x4_t *)v131.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v121, v130), v120, v131), 0xCuLL);
  v136 = vmlsl_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v127.i8, *(int16x4_t *)v130.i8);
  v137 = vmlsl_high_s16(vmull_high_s16(v126, v131), v127, v130);
  v138 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v131.i8), *(int16x4_t *)v126.i8, *(int16x4_t *)v130.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v127, v131), v126, v130), 0xCuLL);
  v139 = vrshrn_high_n_s32(vrshrn_n_s32(v136, 0xCuLL), v137, 0xCuLL);
  v140 = vmlsl_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v130.i8), *(int16x4_t *)v128.i8, *(int16x4_t *)v131.i8);
  v141 = vmlsl_high_s16(vmull_high_s16(v129, v130), v128, v131);
  v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v130.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v131.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v128, v130), v129, v131), 0xCuLL);
  v143 = vrshrn_high_n_s32(vrshrn_n_s32(v140, 0xCuLL), v141, 0xCuLL);
  v144 = vqaddq_s16(v114, v116);
  v145 = vqsubq_s16(v114, v116);
  v146 = vqsubq_s16(v115, v117);
  v147 = vqsubq_s16(v132, v135);
  v148 = vqsubq_s16(v133, v134);
  v149 = vqaddq_s16(v122, v124);
  v150 = vqsubq_s16(v122, v124);
  v151 = vqsubq_s16(v123, v125);
  v152 = vqsubq_s16(v138, v143);
  v153 = vqsubq_s16(v139, v142);
  v154 = vld1q_dup_s16(v62);
  *a2 = v144;
  a2[1] = vqnegq_s16(v149);
  a2[2] = vqaddq_s16(v138, v143);
  a2[3] = vqnegq_s16(vqaddq_s16(v132, v135));
  a2[4] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v147.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v148, v154), v147, v154), 0xCuLL);
  a2[5] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v153, v154), v152, v154), 0xCuLL));
  a2[6] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v150.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v151, v154), v150, v154), 0xCuLL);
  a2[7] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v146.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v145.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v146, v154), v145, v154), 0xCuLL));
  a2[8] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v145.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v146.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v145, v154), v146, v154), 0xCuLL);
  a2[9] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v150.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v151.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v150, v154), v151, v154), 0xCuLL));
  a2[10] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v152, v154), v153, v154), 0xCuLL);
  a2[11] = vqnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v147, v154), v148, v154), 0xCuLL));
  a2[12] = vqaddq_s16(v133, v134);
  a2[13] = vqnegq_s16(vqaddq_s16(v139, v142));
  result = vqnegq_s16(vqaddq_s16(v115, v117));
  a2[14] = vqaddq_s16(v123, v125);
  a2[15] = result;
  return result;
}

int32x4_t idct32_low1_neon(int16x8_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int32x4_t result;
  int16x8_t v6;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v4 = vld1q_dup_s16(v3);
  result = vmull_high_s16(*a1, v4);
  v6 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1->i8, *(int16x4_t *)v4.i8), 0xCuLL), result, 0xCuLL);
  *a2 = v6;
  a2[1] = v6;
  a2[2] = v6;
  a2[3] = v6;
  a2[4] = v6;
  a2[5] = v6;
  a2[6] = v6;
  a2[7] = v6;
  a2[8] = v6;
  a2[9] = v6;
  a2[10] = v6;
  a2[11] = v6;
  a2[12] = v6;
  a2[13] = v6;
  a2[14] = v6;
  a2[15] = v6;
  a2[16] = v6;
  a2[17] = v6;
  a2[18] = v6;
  a2[19] = v6;
  a2[20] = v6;
  a2[21] = v6;
  a2[22] = v6;
  a2[23] = v6;
  a2[24] = v6;
  a2[25] = v6;
  a2[26] = v6;
  a2[27] = v6;
  a2[28] = v6;
  a2[29] = v6;
  a2[30] = v6;
  a2[31] = v6;
  return result;
}

int16x8_t idct32_low8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  int32x4_t v6;
  const __int16 *v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int16x4_t v12;
  int16x8_t v13;
  unsigned int v14;
  int16x8_t v15;
  int16x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int32x4_t v23;
  const __int16 *v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  unsigned int v34;
  int32x4_t v35;
  int32x4_t v36;
  const __int16 *v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  const __int16 *v41;
  int32x4_t v42;
  int16x8_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  const __int16 *v49;
  int32x4_t v50;
  int16x8_t v51;
  int32x4_t v52;
  int32x4_t v53;
  const __int16 *v54;
  int16x8_t v55;
  int32x4_t v56;
  const __int16 *v57;
  int32x4_t v58;
  int16x8_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x4_t v65;
  int16x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x4_t v71;
  int32x4_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int16x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  const __int16 *v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  const __int16 *v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t result;
  int16x8_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int16x8_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int32x4_t v225;
  int16x8_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int16x8_t v232;
  int32x4_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int32x4_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int32x4_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int32x4_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int16x8_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 16);
  v6 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
  v7 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v8 = vld1q_dup_s16(v7);
  v9 = vmull_high_s16(v5, v4);
  v10 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v8.i8);
  v11 = vmull_high_s16(v5, v8);
  v12 = vrshrn_n_s32(v6, 0xCuLL);
  *(int16x4_t *)v4.i8 = vrshrn_n_s32(v9, 0xCuLL);
  *(int16x4_t *)v6.i8 = vrshrn_n_s32(v10, 0xCuLL);
  LODWORD(v7) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  v13 = vdupq_n_s16(v7);
  v14 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  v15 = vdupq_n_s16(v14);
  v16 = vrshrn_n_s32(v11, 0xCuLL);
  v17 = vmull_s16(v12, *(int16x4_t *)v13.i8);
  v18 = vmlsl_s16(vmull_s16(*(int16x4_t *)v6.i8, *(int16x4_t *)v13.i8), v12, *(int16x4_t *)v15.i8);
  v19 = vrshrn_high_n_s32(v12, v9, 0xCuLL);
  v20 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 590]));
  v21 = vmlal_s16(v17, *(int16x4_t *)v6.i8, *(int16x4_t *)v15.i8);
  v267 = v19;
  v269 = vrshrn_high_n_s32(*(int16x4_t *)v6.i8, v11, 0xCuLL);
  v22 = *(int16x8_t *)(a1 + 112);
  v23 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v20.i8);
  v24 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v25 = vld1q_dup_s16(v24);
  v26 = vmull_high_s16(v22, v20);
  v27 = vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v25.i8);
  v28 = vmull_high_s16(v22, v25);
  *(int16x4_t *)v23.i8 = vrshrn_n_s32(v23, 0xCuLL);
  v29 = vrshrn_n_s32(v26, 0xCuLL);
  v30 = vrshrn_n_s32(v27, 0xCuLL);
  v31 = vdup_n_s16(-(int)v7);
  v32 = vdup_n_s16(-v14);
  v33 = vrshrn_n_s32(v28, 0xCuLL);
  LODWORD(v24) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  v34 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  LODWORD(v7) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v35 = vmlal_s16(vmull_s16(v30, v32), *(int16x4_t *)v23.i8, v31);
  v36 = vmlsl_s16(vmull_s16(*(int16x4_t *)v23.i8, v32), v30, v31);
  v262 = vrshrn_high_n_s32(v30, v28, 0xCuLL);
  v265 = vrshrn_high_n_s32(*(int16x4_t *)v23.i8, v26, 0xCuLL);
  v37 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v38 = vld1q_dup_s16(v37);
  v39 = *(int16x8_t *)(a1 + 80);
  v40 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v38.i8);
  v41 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v42 = vmull_high_s16(v39, v38);
  v43 = vld1q_dup_s16(v41);
  v44 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v43.i8);
  v45 = vmull_high_s16(v39, v43);
  *(int16x4_t *)v19.i8 = vrshrn_n_s32(v40, 0xCuLL);
  *(int16x4_t *)v43.i8 = vrshrn_n_s32(v44, 0xCuLL);
  v46 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 582]));
  v47 = *(int16x8_t *)(a1 + 32);
  v48 = *(int16x8_t *)(a1 + 48);
  v49 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v50 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v46.i8);
  v51 = vld1q_dup_s16(v49);
  LODWORD(v49) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v52 = vmull_high_s16(v48, v46);
  v53 = vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v51.i8);
  v54 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v55 = vld1q_dup_s16(v54);
  v56 = vmull_high_s16(v48, v51);
  v57 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v58 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v55.i8);
  v59 = vld1q_dup_s16(v57);
  v60 = vmull_high_s16(v47, v55);
  v61 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v59.i8);
  v62 = vmull_high_s16(v47, v59);
  v255 = v15;
  v257 = v13;
  v63 = vmlal_s16(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v13.i8), v16, *(int16x4_t *)v15.i8);
  v64 = vmlsl_s16(vmull_s16(v16, *(int16x4_t *)v13.i8), *(int16x4_t *)v4.i8, *(int16x4_t *)v15.i8);
  v65 = vdup_n_s16(v24);
  v66 = vdup_n_s16(v34);
  v67 = vmlsl_s16(vmull_s16(*(int16x4_t *)v43.i8, v66), *(int16x4_t *)v19.i8, v65);
  v242 = vrshrn_high_n_s32(*(int16x4_t *)v19.i8, v42, 0xCuLL);
  *(int16x4_t *)v42.i8 = vrshrn_n_s32(v42, 0xCuLL);
  v68 = vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, v66), *(int16x4_t *)v43.i8, v65);
  v226 = vrshrn_high_n_s32(*(int16x4_t *)v43.i8, v45, 0xCuLL);
  *(int16x4_t *)v45.i8 = vrshrn_n_s32(v45, 0xCuLL);
  *(int16x4_t *)v4.i8 = vrshrn_n_s32(v50, 0xCuLL);
  *(int16x4_t *)v50.i8 = vrshrn_n_s32(v53, 0xCuLL);
  v237 = vrshrn_high_n_s32(vrshrn_n_s32(v21, 0xCuLL), v63, 0xCuLL);
  v247 = vrshrn_high_n_s32(vrshrn_n_s32(v18, 0xCuLL), v64, 0xCuLL);
  v69 = vmlal_s16(vmull_s16(v33, v32), v29, v31);
  v70 = vmlsl_s16(vmull_s16(v29, v32), v33, v31);
  v71 = vdup_n_s16(-v34);
  *(int16x4_t *)v63.i8 = vdup_n_s16(-(int)v24);
  v72 = vmlal_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v4.i8, v71);
  v73 = vrshrn_high_n_s32(*(int16x4_t *)v4.i8, v52, 0xCuLL);
  *(int16x4_t *)v52.i8 = vrshrn_n_s32(v52, 0xCuLL);
  v74 = vmlsl_s16(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v50.i8, v71);
  v253 = vrshrn_high_n_s32(*(int16x4_t *)v50.i8, v56, 0xCuLL);
  *(int16x4_t *)v50.i8 = vrshrn_n_s32(v56, 0xCuLL);
  *(int16x4_t *)v13.i8 = vrshrn_n_s32(v58, 0xCuLL);
  v250 = vrshrn_high_n_s32(vrshrn_n_s32(v35, 0xCuLL), v69, 0xCuLL);
  v260 = vrshrn_high_n_s32(*(int16x4_t *)v13.i8, v60, 0xCuLL);
  v75 = vrshrn_n_s32(v60, 0xCuLL);
  v244 = vrshrn_high_n_s32(vrshrn_n_s32(v36, 0xCuLL), v70, 0xCuLL);
  v76 = vmull_s16(*(int16x4_t *)v45.i8, v66);
  v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v42.i8, v66), *(int16x4_t *)v45.i8, v65);
  *(int16x4_t *)v45.i8 = vrshrn_n_s32(v62, 0xCuLL);
  v78 = v62;
  v79 = vmlsl_s16(v76, *(int16x4_t *)v42.i8, v65);
  v80 = vmlal_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v52.i8, v71);
  v81 = vmlsl_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v63.i8), *(int16x4_t *)v50.i8, v71);
  v82 = vdupq_n_s16(v7);
  v83 = vdupq_n_s16(v49);
  v84 = vmlal_s16(vmull_s16(v75, *(int16x4_t *)v83.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v82.i8);
  v85 = vmlsl_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v83.i8), v75, *(int16x4_t *)v82.i8);
  v86 = vqsubq_s16(v247, v250);
  v87 = vqsubq_s16(v237, v244);
  v233 = vmlal_s16(vmull_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v87.i8, *(int16x4_t *)v82.i8);
  v235 = vmlal_high_s16(vmull_high_s16(v86, v83), v87, v82);
  v228 = vmlsl_s16(vmull_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v86.i8, *(int16x4_t *)v82.i8);
  v230 = vmlsl_high_s16(vmull_high_s16(v87, v83), v86, v82);
  *(int16x4_t *)v87.i8 = vrshrn_n_s32(v61, 0xCuLL);
  v88 = vmlsl_s16(vmull_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v82.i8);
  v89 = vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v83.i8);
  v90 = vqsubq_s16(v267, v265);
  v91 = vqsubq_s16(v269, v262);
  v92 = vmlal_s16(vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v91.i8, *(int16x4_t *)v82.i8);
  v93 = vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v83.i8);
  v94 = vmull_high_s16(v91, v83);
  v95 = vmlal_high_s16(vmull_high_s16(v90, v83), v91, v82);
  v96 = vmlsl_s16(v93, *(int16x4_t *)v90.i8, *(int16x4_t *)v82.i8);
  v97 = vmlsl_high_s16(v94, v90, v82);
  v98 = vmlal_s16(v89, *(int16x4_t *)v87.i8, *(int16x4_t *)v82.i8);
  v220 = vrshrn_high_n_s32(*(int16x4_t *)v87.i8, v78, 0xCuLL);
  v99 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v100 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]));
  v101 = *(int16x8_t *)(a1 + 96);
  v102 = vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v100.i8);
  v103 = vmull_high_s16(v101, v100);
  v104 = vld1q_dup_s16(v99);
  v105 = vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v104.i8);
  v106 = vmull_high_s16(v101, v104);
  v107 = vrshrn_high_n_s32(vrshrn_n_s32(v68, 0xCuLL), v77, 0xCuLL);
  v108 = vrshrn_high_n_s32(vrshrn_n_s32(v67, 0xCuLL), v79, 0xCuLL);
  v109 = vrshrn_high_n_s32(vrshrn_n_s32(v72, 0xCuLL), v80, 0xCuLL);
  v110 = vrshrn_high_n_s32(vrshrn_n_s32(v74, 0xCuLL), v81, 0xCuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(v102, 0xCuLL);
  v215 = vrshrn_high_n_s32(*(int16x4_t *)v102.i8, v103, 0xCuLL);
  *(int16x4_t *)v103.i8 = vrshrn_n_s32(v103, 0xCuLL);
  *(int16x4_t *)v81.i8 = vrshrn_n_s32(v106, 0xCuLL);
  v111 = vdupq_n_s16(-(int)v49);
  v112 = vdupq_n_s16(-(int)v7);
  v113 = vmlal_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v111.i8);
  v114 = vmlsl_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v81.i8, *(int16x4_t *)v111.i8);
  v115 = vqsubq_s16(v73, v242);
  v116 = vqsubq_s16(v253, v226);
  v117 = vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v115.i8, *(int16x4_t *)v111.i8);
  v118 = vmlal_high_s16(vmull_high_s16(v116, v112), v115, v111);
  v119 = vmlsl_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v111.i8);
  v120 = vmlsl_high_s16(vmull_high_s16(v115, v112), v116, v111);
  *(int16x4_t *)v105.i8 = vrshrn_n_s32(v105, 0xCuLL);
  v121 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v111.i8);
  v122 = vqsubq_s16(v109, v108);
  v123 = vqsubq_s16(v110, v107);
  v124 = vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v111.i8);
  v125 = vmlal_high_s16(vmull_high_s16(v123, v112), v122, v111);
  v126 = vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v123.i8, *(int16x4_t *)v111.i8);
  v127 = vmlsl_high_s16(vmull_high_s16(v122, v112), v123, v111);
  v128 = vmlsl_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v112.i8), *(int16x4_t *)v105.i8, *(int16x4_t *)v111.i8);
  v129 = vrshrn_high_n_s32(*(int16x4_t *)v105.i8, v106, 0xCuLL);
  v130 = *(int16x8_t *)(a1 + 64);
  v131 = vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v257.i8);
  v132 = vmull_high_s16(v130, v257);
  v133 = vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v255.i8);
  v134 = vmull_high_s16(v130, v255);
  v232 = vrshrn_high_n_s32(vrshrn_n_s32(v98, 0xCuLL), v84, 0xCuLL);
  v239 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xCuLL), v85, 0xCuLL);
  v135 = vrshrn_high_n_s32(vrshrn_n_s32(v121, 0xCuLL), v113, 0xCuLL);
  v211 = vrshrn_high_n_s32(vrshrn_n_s32(v128, 0xCuLL), v114, 0xCuLL);
  v268 = vqaddq_s16(v267, v265);
  v222 = vqaddq_s16(v247, v250);
  v223 = vqaddq_s16(v109, v108);
  v266 = vqaddq_s16(v73, v242);
  v243 = vqaddq_s16(v253, v226);
  v208 = vqaddq_s16(v110, v107);
  v224 = vqaddq_s16(v237, v244);
  v238 = vqaddq_s16(v269, v262);
  v136 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  *(int16x4_t *)v108.i8 = vrshrn_n_s32(v131, 0xCuLL);
  *(int16x4_t *)v88.i8 = vrshrn_n_s32(v133, 0xCuLL);
  v137 = vld1q_dup_s16(v136);
  v258 = vmlsl_s16(vmull_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v137.i8);
  v263 = vrshrn_high_n_s32(*(int16x4_t *)v108.i8, v132, 0xCuLL);
  *(int16x4_t *)v133.i8 = vrshrn_n_s32(v132, 0xCuLL);
  v251 = vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v88.i8, *(int16x4_t *)v137.i8);
  v270 = vrshrn_high_n_s32(*(int16x4_t *)v88.i8, v134, 0xCuLL);
  *(int16x4_t *)v134.i8 = vrshrn_n_s32(v134, 0xCuLL);
  v245 = vmlsl_s16(vmull_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v133.i8, *(int16x4_t *)v137.i8);
  v248 = vmlal_s16(vmull_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v134.i8, *(int16x4_t *)v137.i8);
  v216 = vrshrn_high_n_s32(vrshrn_n_s32(v233, 0xCuLL), v235, 0xCuLL);
  v234 = vrshrn_high_n_s32(vrshrn_n_s32(v228, 0xCuLL), v230, 0xCuLL);
  v221 = vrshrn_high_n_s32(vrshrn_n_s32(v92, 0xCuLL), v95, 0xCuLL);
  v254 = vrshrn_high_n_s32(vrshrn_n_s32(v96, 0xCuLL), v97, 0xCuLL);
  v256 = vrshrn_high_n_s32(vrshrn_n_s32(v117, 0xCuLL), v118, 0xCuLL);
  v219 = vrshrn_high_n_s32(vrshrn_n_s32(v119, 0xCuLL), v120, 0xCuLL);
  v236 = vrshrn_high_n_s32(vrshrn_n_s32(v124, 0xCuLL), v125, 0xCuLL);
  v214 = vrshrn_high_n_s32(vrshrn_n_s32(v126, 0xCuLL), v127, 0xCuLL);
  v138 = vqsubq_s16(v239, v135);
  v139 = vqsubq_s16(v232, v211);
  v231 = vmlal_s16(vmull_s16(*(int16x4_t *)v138.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v137.i8);
  v229 = vmlal_high_s16(vmull_high_s16(v138, v137), v139, v137);
  v225 = vmlsl_high_s16(vmull_high_s16(v139, v137), v138, v137);
  v227 = vmlsl_s16(vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v137.i8);
  v140 = vqsubq_s16(v260, v215);
  v141 = v129;
  v142 = vqsubq_s16(v220, v129);
  v143 = vmlal_s16(vmull_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v142.i8, *(int16x4_t *)v137.i8);
  v144 = vmlal_high_s16(vmull_high_s16(v140, v137), v142, v137);
  v145 = vmlsl_s16(vmull_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v140.i8, *(int16x4_t *)v137.i8);
  v146 = vmlsl_high_s16(vmull_high_s16(v142, v137), v140, v137);
  v147 = vqsubq_s16(v254, v256);
  v148 = vqsubq_s16(v221, v219);
  v213 = vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v137.i8);
  v212 = vmlal_high_s16(vmull_high_s16(v147, v137), v148, v137);
  v209 = vmlsl_s16(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v147.i8, *(int16x4_t *)v137.i8);
  v210 = vmlsl_high_s16(vmull_high_s16(v148, v137), v147, v137);
  v149 = vqsubq_s16(v234, v236);
  v150 = vqsubq_s16(v216, v214);
  v151 = vmlal_s16(vmull_s16(*(int16x4_t *)v149.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v150.i8, *(int16x4_t *)v137.i8);
  v152 = vmlal_high_s16(vmull_high_s16(v149, v137), v150, v137);
  v217 = vmlsl_high_s16(vmull_high_s16(v150, v137), v149, v137);
  v218 = vmlsl_s16(vmull_s16(*(int16x4_t *)v150.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v149.i8, *(int16x4_t *)v137.i8);
  v153 = vqsubq_s16(v222, v223);
  v154 = vqsubq_s16(v224, v208);
  v155 = vmlal_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v154.i8, *(int16x4_t *)v137.i8);
  v156 = vmlal_high_s16(vmull_high_s16(v153, v137), v154, v137);
  v157 = vmlsl_s16(vmull_s16(*(int16x4_t *)v154.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v137.i8);
  v158 = vmlsl_high_s16(vmull_high_s16(v154, v137), v153, v137);
  v159 = vqsubq_s16(v268, v266);
  v160 = vqsubq_s16(v238, v243);
  v161 = vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v137.i8);
  v162 = vmlal_high_s16(vmull_high_s16(v159, v137), v160, v137);
  v163 = vmlsl_s16(vmull_s16(*(int16x4_t *)v160.i8, *(int16x4_t *)v137.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v137.i8);
  v164 = vmlsl_high_s16(vmull_high_s16(v160, v137), v159, v137);
  v165 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v137.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v137), 0xCuLL);
  v166 = vrshrn_high_n_s32(vrshrn_n_s32(v251, 0xCuLL), v248, 0xCuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(v258, 0xCuLL), v245, 0xCuLL);
  v168 = vqaddq_s16(v260, v215);
  v169 = vqaddq_s16(v239, v135);
  v170 = vqaddq_s16(v232, v211);
  v246 = vqaddq_s16(v220, v141);
  v171 = vrshrn_high_n_s32(vrshrn_n_s32(v231, 0xCuLL), v229, 0xCuLL);
  v172 = vrshrn_high_n_s32(vrshrn_n_s32(v227, 0xCuLL), v225, 0xCuLL);
  v173 = vrshrn_high_n_s32(vrshrn_n_s32(v143, 0xCuLL), v144, 0xCuLL);
  v174 = vrshrn_high_n_s32(vrshrn_n_s32(v145, 0xCuLL), v146, 0xCuLL);
  v241 = vqaddq_s16(v165, v263);
  v175 = vqsubq_s16(v165, v263);
  v240 = vqaddq_s16(v165, v167);
  v176 = vqsubq_s16(v165, v167);
  v177 = vqsubq_s16(v165, v166);
  v249 = vqaddq_s16(v165, v166);
  v252 = vqaddq_s16(v165, v270);
  v178 = vqsubq_s16(v165, v270);
  v179 = vqaddq_s16(v214, v216);
  v259 = vqaddq_s16(v208, v224);
  v264 = vqaddq_s16(v243, v238);
  v180 = vrshrn_high_n_s32(vrshrn_n_s32(v213, 0xCuLL), v212, 0xCuLL);
  v181 = vrshrn_high_n_s32(vrshrn_n_s32(v209, 0xCuLL), v210, 0xCuLL);
  v182 = vrshrn_high_n_s32(vrshrn_n_s32(v151, 0xCuLL), v152, 0xCuLL);
  v183 = vrshrn_high_n_s32(vrshrn_n_s32(v155, 0xCuLL), v156, 0xCuLL);
  v184 = vrshrn_high_n_s32(vrshrn_n_s32(v157, 0xCuLL), v158, 0xCuLL);
  v185 = vrshrn_high_n_s32(vrshrn_n_s32(v161, 0xCuLL), v162, 0xCuLL);
  v186 = vrshrn_high_n_s32(vrshrn_n_s32(v163, 0xCuLL), v164, 0xCuLL);
  v187 = vqaddq_s16(v178, v168);
  v188 = vqsubq_s16(v178, v168);
  v271 = vqaddq_s16(v252, v246);
  v261 = vqaddq_s16(v249, v170);
  *a2 = vqaddq_s16(v271, v264);
  a2[1] = vqaddq_s16(v261, v259);
  v189 = vqaddq_s16(v240, v171);
  v190 = vqaddq_s16(v241, v173);
  v191 = vqaddq_s16(v219, v221);
  a2[2] = vqaddq_s16(v189, v179);
  a2[3] = vqaddq_s16(v190, v191);
  v192 = vqaddq_s16(v175, v174);
  v193 = vqaddq_s16(v176, v172);
  a2[4] = vqaddq_s16(v192, v180);
  a2[5] = vqaddq_s16(v193, v182);
  v194 = vqaddq_s16(v177, v169);
  a2[6] = vqaddq_s16(v194, v183);
  a2[7] = vqaddq_s16(v187, v185);
  v195 = vqsubq_s16(v177, v169);
  a2[8] = vqaddq_s16(v188, v186);
  a2[9] = vqaddq_s16(v195, v184);
  v196 = vrshrn_high_n_s32(vrshrn_n_s32(v218, 0xCuLL), v217, 0xCuLL);
  v197 = vqsubq_s16(v176, v172);
  v198 = vqsubq_s16(v175, v174);
  a2[10] = vqaddq_s16(v197, v196);
  a2[11] = vqaddq_s16(v198, v181);
  v199 = vqaddq_s16(v234, v236);
  v200 = vqaddq_s16(v254, v256);
  v201 = vqsubq_s16(v241, v173);
  v202 = vqsubq_s16(v240, v171);
  a2[12] = vqaddq_s16(v201, v200);
  a2[13] = vqaddq_s16(v202, v199);
  v203 = vqaddq_s16(v268, v266);
  v204 = vqaddq_s16(v222, v223);
  v205 = vqsubq_s16(v249, v170);
  v206 = vqsubq_s16(v252, v246);
  a2[14] = vqaddq_s16(v205, v204);
  a2[15] = vqaddq_s16(v206, v203);
  a2[16] = vqsubq_s16(v206, v203);
  a2[17] = vqsubq_s16(v205, v204);
  a2[18] = vqsubq_s16(v202, v199);
  a2[19] = vqsubq_s16(v201, v200);
  a2[20] = vqsubq_s16(v198, v181);
  a2[21] = vqsubq_s16(v197, v196);
  a2[22] = vqsubq_s16(v195, v184);
  a2[23] = vqsubq_s16(v188, v186);
  a2[24] = vqsubq_s16(v187, v185);
  a2[25] = vqsubq_s16(v194, v183);
  a2[26] = vqsubq_s16(v193, v182);
  a2[27] = vqsubq_s16(v192, v180);
  a2[28] = vqsubq_s16(v190, v191);
  a2[29] = vqsubq_s16(v189, v179);
  result = vqsubq_s16(v261, v259);
  a2[30] = result;
  a2[31] = vqsubq_s16(v271, v264);
  return result;
}

int16x8_t idct32_low16_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  const __int16 *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  const __int16 *v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  const __int16 *v28;
  int16x8_t v29;
  int32x4_t v30;
  unsigned int v31;
  int32x4_t v32;
  unsigned int v33;
  unsigned int v34;
  int16x8_t v35;
  int16x8_t v36;
  const __int16 *v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  const __int16 *v41;
  int32x4_t v42;
  int16x8_t v43;
  unsigned int v44;
  int32x4_t v45;
  int32x4_t v46;
  unsigned int v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  const __int16 *v54;
  int32x4_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  const __int16 *v61;
  int16x8_t v62;
  int32x4_t v63;
  const __int16 *v64;
  int32x4_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  const __int16 *v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  const __int16 *v105;
  int16x8_t v106;
  const __int16 *v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  const __int16 *v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int16x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int16x8_t v122;
  const __int16 *v123;
  const __int16 *v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  const __int16 *v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  const __int16 *v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t result;
  int32x4_t v239;
  int32x4_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int32x4_t v247;
  int16x8_t v248;
  int32x4_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int32x4_t v280;
  int16x8_t v281;
  int32x4_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int32x4_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int32x4_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int32x4_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 144);
  v300 = *(int16x8_t *)(a1 + 128);
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v7 = vld1q_dup_s16(v6);
  v295 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8), 0xCuLL), vmull_high_s16(v5, v4), 0xCuLL);
  v8 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v5, v7), 0xCuLL);
  v9 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 590]));
  v10 = *(int16x8_t *)(a1 + 96);
  v11 = *(int16x8_t *)(a1 + 112);
  v12 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v13 = vld1q_dup_s16(v12);
  v14 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v9.i8), 0xCuLL), vmull_high_s16(v11, v9), 0xCuLL);
  v15 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v13.i8), 0xCuLL), vmull_high_s16(v11, v13), 0xCuLL);
  v16 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v17 = vld1q_dup_s16(v16);
  v18 = *(int16x8_t *)(a1 + 80);
  v311 = *(int16x8_t *)(a1 + 64);
  v19 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v20 = vld1q_dup_s16(v19);
  v21 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v17.i8), 0xCuLL), vmull_high_s16(v18, v17), 0xCuLL);
  v22 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v20.i8), 0xCuLL), vmull_high_s16(v18, v20), 0xCuLL);
  v23 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 598]));
  v25 = *(int16x8_t *)(a1 + 160);
  v24 = *(int16x8_t *)(a1 + 176);
  v26 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v23.i8);
  v27 = vmull_high_s16(v24, v23);
  v28 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v29 = vld1q_dup_s16(v28);
  v30 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v29.i8);
  v31 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  v32 = vmull_high_s16(v24, v29);
  v33 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  v34 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(v26, 0xCuLL), v27, 0xCuLL);
  v36 = vrshrn_high_n_s32(vrshrn_n_s32(v30, 0xCuLL), v32, 0xCuLL);
  v37 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v38 = vld1q_dup_s16(v37);
  v39 = *(int16x8_t *)(a1 + 208);
  v309 = *(int16x8_t *)(a1 + 192);
  v40 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v38.i8);
  v41 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v42 = vmull_high_s16(v39, v38);
  v43 = vld1q_dup_s16(v41);
  v44 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  v45 = vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v43.i8);
  LODWORD(v41) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v46 = vmull_high_s16(v39, v43);
  v47 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v48 = vrshrn_high_n_s32(vrshrn_n_s32(v40, 0xCuLL), v42, 0xCuLL);
  v49 = vrshrn_high_n_s32(vrshrn_n_s32(v45, 0xCuLL), v46, 0xCuLL);
  v50 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 582]));
  v52 = *(int16x8_t *)(a1 + 32);
  v51 = *(int16x8_t *)(a1 + 48);
  v53 = vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v50.i8);
  v54 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v55 = vmull_high_s16(v51, v50);
  v56 = vld1q_dup_s16(v54);
  v57 = vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v56.i8);
  v58 = vmull_high_s16(v51, v56);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(v53, 0xCuLL), v55, 0xCuLL);
  v60 = vrshrn_high_n_s32(vrshrn_n_s32(v57, 0xCuLL), v58, 0xCuLL);
  v61 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v62 = vld1q_dup_s16(v61);
  v63 = vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v62.i8);
  v64 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v65 = vmull_high_s16(v25, v62);
  v66 = vld1q_dup_s16(v64);
  v67 = vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v66.i8);
  v68 = vmull_high_s16(v25, v66);
  v69 = vrshrn_high_n_s32(vrshrn_n_s32(v63, 0xCuLL), v65, 0xCuLL);
  v284 = vrshrn_high_n_s32(vrshrn_n_s32(v67, 0xCuLL), v68, 0xCuLL);
  v70 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]));
  v71 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v72 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v70.i8);
  v73 = vmull_high_s16(v10, v70);
  v74 = vld1q_dup_s16(v71);
  v290 = v69;
  v292 = vrshrn_high_n_s32(vrshrn_n_s32(v72, 0xCuLL), v73, 0xCuLL);
  v287 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v74.i8), 0xCuLL), vmull_high_s16(v10, v74), 0xCuLL);
  v75 = vqsubq_s16(v14, v295);
  v76 = v14;
  v77 = vqaddq_s16(v21, v35);
  v78 = vqsubq_s16(v21, v35);
  v79 = vqsubq_s16(v59, v48);
  v273 = v77;
  v275 = vqaddq_s16(v59, v48);
  v80 = vqsubq_s16(v60, v49);
  v81 = vqsubq_s16(v22, v36);
  v269 = vqaddq_s16(v60, v49);
  v271 = vqaddq_s16(v22, v36);
  v82 = vdupq_n_s16(-v34);
  v83 = vdupq_n_s16(v44);
  v84 = vqsubq_s16(v15, v8);
  v85 = v8;
  v86 = vdupq_n_s16(-v33);
  v87 = vdupq_n_s16(-v31);
  v88 = vmlal_s16(vmull_s16(*(int16x4_t *)v84.i8, *(int16x4_t *)v87.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v86.i8);
  v305 = vmlal_high_s16(vmull_high_s16(v84, v87), v75, v86);
  v302 = vmlsl_s16(vmull_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v87.i8), *(int16x4_t *)v84.i8, *(int16x4_t *)v86.i8);
  v89 = vmlsl_high_s16(vmull_high_s16(v75, v87), v84, v86);
  v90 = vdupq_n_s16(v34);
  v244 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v78.i8, *(int16x4_t *)v90.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v81, v83), v78, v90), 0xCuLL);
  v246 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v78.i8, *(int16x4_t *)v83.i8), *(int16x4_t *)v81.i8, *(int16x4_t *)v90.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v78, v83), v81, v90), 0xCuLL);
  v91 = vdupq_n_s16(-v44);
  v252 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v79.i8, *(int16x4_t *)v91.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v80, v82), v79, v91), 0xCuLL);
  v248 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v91.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v79, v82), v80, v91), 0xCuLL);
  v92 = vqsubq_s16(v292, v69);
  v93 = vqsubq_s16(v287, v284);
  v94 = vdupq_n_s16(-v47);
  v95 = vdupq_n_s16(-(int)v41);
  v282 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v94.i8);
  v280 = vmlal_high_s16(vmull_high_s16(v93, v95), v92, v94);
  v267 = vmlsl_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v94.i8);
  v278 = vmlsl_high_s16(vmull_high_s16(v92, v95), v93, v94);
  v96 = vqsubq_s16(v275, v77);
  v97 = vqsubq_s16(v269, v271);
  v265 = vmlal_s16(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v96.i8, *(int16x4_t *)v94.i8);
  v258 = vmlal_high_s16(vmull_high_s16(v97, v95), v96, v94);
  v98 = vmlsl_s16(vmull_s16(*(int16x4_t *)v96.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v97.i8, *(int16x4_t *)v94.i8);
  v260 = vmlsl_high_s16(vmull_high_s16(v96, v95), v97, v94);
  v99 = vqsubq_s16(v252, v244);
  v100 = vqsubq_s16(v248, v246);
  v101 = vmlal_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v99.i8, *(int16x4_t *)v94.i8);
  v102 = vmlal_high_s16(vmull_high_s16(v100, v95), v99, v94);
  v103 = vmlsl_s16(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v95.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v94.i8);
  v104 = vmlsl_high_s16(vmull_high_s16(v99, v95), v100, v94);
  v105 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v106 = vld1q_dup_s16(v105);
  v107 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v108 = *(int16x8_t *)(a1 + 16);
  v109 = vld1q_dup_s16(v107);
  v110 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v106.i8), 0xCuLL), vmull_high_s16(v108, v106), 0xCuLL);
  v111 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v109.i8), 0xCuLL), vmull_high_s16(v108, v109), 0xCuLL);
  v112 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v113 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 606]));
  v115 = *(int16x8_t *)(a1 + 224);
  v114 = *(int16x8_t *)(a1 + 240);
  v116 = vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v113.i8);
  v117 = vmull_high_s16(v114, v113);
  v118 = vld1q_dup_s16(v112);
  v119 = vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v118.i8);
  v120 = vmull_high_s16(v114, v118);
  v121 = vrshrn_high_n_s32(vrshrn_n_s32(v116, 0xCuLL), v117, 0xCuLL);
  v122 = vrshrn_high_n_s32(vrshrn_n_s32(v119, 0xCuLL), v120, 0xCuLL);
  v123 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v124 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v125 = vld1q_dup_s16(v123);
  v126 = vld1q_dup_s16(v124);
  v127 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v125.i8), 0xCuLL), vmull_high_s16(v52, v125), 0xCuLL);
  v128 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v126.i8), 0xCuLL), vmull_high_s16(v52, v126), 0xCuLL);
  v129 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 604]));
  v130 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v131 = vld1q_dup_s16(v130);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v129.i8), 0xCuLL), vmull_high_s16(v115, v129), 0xCuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v131.i8), 0xCuLL), vmull_high_s16(v115, v131), 0xCuLL);
  v134 = vqaddq_s16(v110, v121);
  v135 = vqsubq_s16(v110, v121);
  v136 = vqaddq_s16(v76, v295);
  v137 = vqaddq_s16(v15, v85);
  v138 = vqsubq_s16(v111, v122);
  v139 = vdupq_n_s16(v33);
  v140 = vqaddq_s16(v111, v122);
  v141 = vdupq_n_s16(v31);
  v296 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v311.i8, *(int16x4_t *)v139.i8), 0xCuLL), vmull_high_s16(v311, v139), 0xCuLL);
  v263 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v311.i8, *(int16x4_t *)v141.i8), 0xCuLL), vmull_high_s16(v311, v141), 0xCuLL);
  v262 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v82.i8), 0xCuLL), vmull_high_s16(v309, v82), 0xCuLL);
  v264 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v309.i8, *(int16x4_t *)v83.i8), 0xCuLL), vmull_high_s16(v309, v83), 0xCuLL);
  v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v135.i8, *(int16x4_t *)v139.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v141.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v135, v139), v138, v141), 0xCuLL);
  v143 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v138.i8, *(int16x4_t *)v139.i8), *(int16x4_t *)v135.i8, *(int16x4_t *)v141.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v138, v139), v135, v141), 0xCuLL);
  v144 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xCuLL), v305, 0xCuLL);
  v145 = vrshrn_high_n_s32(vrshrn_n_s32(v302, 0xCuLL), v89, 0xCuLL);
  v146 = vqaddq_s16(v127, v132);
  v147 = vqsubq_s16(v127, v132);
  v250 = vqaddq_s16(v292, v290);
  v251 = vqaddq_s16(v287, v284);
  v148 = vqsubq_s16(v128, v133);
  v149 = vdupq_n_s16(v47);
  v150 = vdupq_n_s16(v41);
  v254 = vqaddq_s16(v128, v133);
  v255 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v147, v149), v148, v150), 0xCuLL);
  v256 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v147.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v148, v149), v147, v150), 0xCuLL);
  v257 = vrshrn_high_n_s32(vrshrn_n_s32(v282, 0xCuLL), v280, 0xCuLL);
  v268 = vrshrn_high_n_s32(vrshrn_n_s32(v267, 0xCuLL), v278, 0xCuLL);
  v308 = vqaddq_s16(v143, v144);
  v151 = vqsubq_s16(v143, v144);
  v312 = vqaddq_s16(v134, v136);
  v152 = vqsubq_s16(v134, v136);
  v253 = vqaddq_s16(v252, v244);
  v310 = vqaddq_s16(v275, v273);
  v281 = vqaddq_s16(v269, v271);
  v306 = vqaddq_s16(v248, v246);
  v153 = vqsubq_s16(v142, v145);
  v303 = vqaddq_s16(v142, v145);
  v154 = vqsubq_s16(v140, v137);
  v279 = vqaddq_s16(v140, v137);
  v155 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v156 = vld1q_dup_s16(v155);
  v157 = vqsubq_s16(v296, v262);
  v158 = vqsubq_s16(v263, v264);
  v298 = vmlal_s16(vmull_s16(*(int16x4_t *)v157.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v158.i8, *(int16x4_t *)v156.i8);
  v293 = vmlal_high_s16(vmull_high_s16(v157, v156), v158, v156);
  v285 = vmlsl_high_s16(vmull_high_s16(v158, v156), v157, v156);
  v288 = vmlsl_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v157.i8, *(int16x4_t *)v156.i8);
  v241 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v151, v149), v153, v150), 0xCuLL);
  v274 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v151.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v153, v149), v151, v150), 0xCuLL);
  v243 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v154.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v152, v149), v154, v150), 0xCuLL);
  v283 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v154.i8, *(int16x4_t *)v149.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v154, v149), v152, v150), 0xCuLL);
  v291 = vrshrn_high_n_s32(vrshrn_n_s32(v265, 0xCuLL), v258, 0xCuLL);
  v245 = vrshrn_high_n_s32(vrshrn_n_s32(v98, 0xCuLL), v260, 0xCuLL);
  v276 = vrshrn_high_n_s32(vrshrn_n_s32(v101, 0xCuLL), v102, 0xCuLL);
  v242 = vrshrn_high_n_s32(vrshrn_n_s32(v103, 0xCuLL), v104, 0xCuLL);
  v159 = vqsubq_s16(v256, v257);
  v160 = vqsubq_s16(v255, v268);
  v272 = vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v156.i8);
  v270 = vmlal_high_s16(vmull_high_s16(v159, v156), v160, v156);
  v266 = vmlsl_s16(vmull_s16(*(int16x4_t *)v160.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v156.i8);
  v261 = vmlsl_high_s16(vmull_high_s16(v160, v156), v159, v156);
  v161 = vqsubq_s16(v146, v250);
  v162 = v146;
  v163 = vqsubq_s16(v254, v251);
  v259 = vmlal_s16(vmull_s16(*(int16x4_t *)v161.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v163.i8, *(int16x4_t *)v156.i8);
  v164 = vmlal_high_s16(vmull_high_s16(v161, v156), v163, v156);
  v165 = vmlsl_s16(vmull_s16(*(int16x4_t *)v163.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v161.i8, *(int16x4_t *)v156.i8);
  v166 = vmlsl_high_s16(vmull_high_s16(v163, v156), v161, v156);
  v167 = vqsubq_s16(v283, v291);
  v168 = vqsubq_s16(v243, v245);
  v169 = vmlal_s16(vmull_s16(*(int16x4_t *)v167.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v168.i8, *(int16x4_t *)v156.i8);
  v240 = vmlal_high_s16(vmull_high_s16(v167, v156), v168, v156);
  v239 = vmlsl_s16(vmull_s16(*(int16x4_t *)v168.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v167.i8, *(int16x4_t *)v156.i8);
  v170 = vmlsl_high_s16(vmull_high_s16(v168, v156), v167, v156);
  v171 = vqsubq_s16(v274, v276);
  v172 = vqsubq_s16(v241, v242);
  v173 = vmlal_s16(vmull_s16(*(int16x4_t *)v171.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v172.i8, *(int16x4_t *)v156.i8);
  v174 = vmlal_high_s16(vmull_high_s16(v171, v156), v172, v156);
  v247 = vmlsl_high_s16(vmull_high_s16(v172, v156), v171, v156);
  v249 = vmlsl_s16(vmull_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v171.i8, *(int16x4_t *)v156.i8);
  v175 = vqsubq_s16(v308, v253);
  v176 = vqsubq_s16(v303, v306);
  v177 = vmlal_s16(vmull_s16(*(int16x4_t *)v175.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v176.i8, *(int16x4_t *)v156.i8);
  v178 = vmlal_high_s16(vmull_high_s16(v175, v156), v176, v156);
  v179 = vmlsl_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v175.i8, *(int16x4_t *)v156.i8);
  v180 = vmlsl_high_s16(vmull_high_s16(v176, v156), v175, v156);
  v181 = vqsubq_s16(v312, v310);
  v182 = vqsubq_s16(v279, v281);
  v183 = vmlal_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v182.i8, *(int16x4_t *)v156.i8);
  v184 = vmlal_high_s16(vmull_high_s16(v181, v156), v182, v156);
  v185 = vmlsl_s16(vmull_s16(*(int16x4_t *)v182.i8, *(int16x4_t *)v156.i8), *(int16x4_t *)v181.i8, *(int16x4_t *)v156.i8);
  v186 = vmlsl_high_s16(vmull_high_s16(v182, v156), v181, v156);
  v187 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v156.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v156), 0xCuLL);
  v188 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v300.i8, *(int16x4_t *)v149.i8), 0xCuLL), vmull_high_s16(v300, v149), 0xCuLL);
  v189 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v300.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmull_high_s16(v300, v150), 0xCuLL);
  v190 = vqaddq_s16(v296, v262);
  v191 = vqaddq_s16(v263, v264);
  v192 = vrshrn_high_n_s32(vrshrn_n_s32(v298, 0xCuLL), v293, 0xCuLL);
  v193 = vrshrn_high_n_s32(vrshrn_n_s32(v288, 0xCuLL), v285, 0xCuLL);
  v194 = vqaddq_s16(v187, v188);
  v195 = vqsubq_s16(v187, v188);
  v196 = vqaddq_s16(v187, v189);
  v197 = vqsubq_s16(v187, v189);
  v198 = vqaddq_s16(v162, v250);
  v199 = vqaddq_s16(v256, v257);
  v200 = vrshrn_high_n_s32(vrshrn_n_s32(v272, 0xCuLL), v270, 0xCuLL);
  v201 = vrshrn_high_n_s32(vrshrn_n_s32(v266, 0xCuLL), v261, 0xCuLL);
  v202 = vrshrn_high_n_s32(vrshrn_n_s32(v259, 0xCuLL), v164, 0xCuLL);
  v203 = vrshrn_high_n_s32(vrshrn_n_s32(v165, 0xCuLL), v166, 0xCuLL);
  v286 = vqaddq_s16(v197, v190);
  v289 = vqaddq_s16(v254, v251);
  v204 = vqsubq_s16(v197, v190);
  v277 = vqaddq_s16(v195, v193);
  v205 = vqsubq_s16(v195, v193);
  v206 = vqaddq_s16(v194, v192);
  v207 = vqsubq_s16(v194, v192);
  v208 = vqsubq_s16(v196, v191);
  v294 = vqaddq_s16(v196, v191);
  v297 = vqaddq_s16(v245, v243);
  v299 = vqaddq_s16(v242, v241);
  v304 = vqaddq_s16(v306, v303);
  v307 = vqaddq_s16(v281, v279);
  v209 = vrshrn_high_n_s32(vrshrn_n_s32(v169, 0xCuLL), v240, 0xCuLL);
  v210 = vrshrn_high_n_s32(vrshrn_n_s32(v239, 0xCuLL), v170, 0xCuLL);
  v211 = vrshrn_high_n_s32(vrshrn_n_s32(v173, 0xCuLL), v174, 0xCuLL);
  v212 = vrshrn_high_n_s32(vrshrn_n_s32(v177, 0xCuLL), v178, 0xCuLL);
  v213 = vrshrn_high_n_s32(vrshrn_n_s32(v179, 0xCuLL), v180, 0xCuLL);
  v214 = vrshrn_high_n_s32(vrshrn_n_s32(v183, 0xCuLL), v184, 0xCuLL);
  v215 = vrshrn_high_n_s32(vrshrn_n_s32(v185, 0xCuLL), v186, 0xCuLL);
  v216 = vqaddq_s16(v208, v198);
  v217 = vqsubq_s16(v208, v198);
  v301 = vqaddq_s16(v294, v289);
  v218 = vqaddq_s16(v255, v268);
  v219 = vqaddq_s16(v206, v218);
  v220 = v206;
  *a2 = vqaddq_s16(v301, v307);
  a2[1] = vqaddq_s16(v219, v304);
  v221 = vqaddq_s16(v277, v200);
  v222 = vqaddq_s16(v286, v202);
  a2[2] = vqaddq_s16(v221, v299);
  a2[3] = vqaddq_s16(v222, v297);
  v223 = vqaddq_s16(v204, v203);
  v224 = vqaddq_s16(v205, v201);
  a2[4] = vqaddq_s16(v223, v209);
  a2[5] = vqaddq_s16(v224, v211);
  v225 = vqaddq_s16(v207, v199);
  a2[6] = vqaddq_s16(v225, v212);
  a2[7] = vqaddq_s16(v216, v214);
  v226 = vqsubq_s16(v207, v199);
  a2[8] = vqaddq_s16(v217, v215);
  a2[9] = vqaddq_s16(v226, v213);
  v227 = vrshrn_high_n_s32(vrshrn_n_s32(v249, 0xCuLL), v247, 0xCuLL);
  v228 = vqsubq_s16(v205, v201);
  v229 = vqsubq_s16(v204, v203);
  a2[10] = vqaddq_s16(v228, v227);
  a2[11] = vqaddq_s16(v229, v210);
  v230 = vqaddq_s16(v274, v276);
  v231 = vqaddq_s16(v283, v291);
  v232 = vqsubq_s16(v286, v202);
  v233 = vqsubq_s16(v277, v200);
  a2[12] = vqaddq_s16(v232, v231);
  a2[13] = vqaddq_s16(v233, v230);
  v234 = vqaddq_s16(v312, v310);
  v235 = vqaddq_s16(v308, v253);
  v236 = vqsubq_s16(v220, v218);
  v237 = vqsubq_s16(v294, v289);
  a2[14] = vqaddq_s16(v236, v235);
  a2[15] = vqaddq_s16(v237, v234);
  a2[16] = vqsubq_s16(v237, v234);
  a2[17] = vqsubq_s16(v236, v235);
  a2[18] = vqsubq_s16(v233, v230);
  a2[19] = vqsubq_s16(v232, v231);
  a2[20] = vqsubq_s16(v229, v210);
  a2[21] = vqsubq_s16(v228, v227);
  a2[22] = vqsubq_s16(v226, v213);
  a2[23] = vqsubq_s16(v217, v215);
  a2[24] = vqsubq_s16(v216, v214);
  a2[25] = vqsubq_s16(v225, v212);
  a2[26] = vqsubq_s16(v224, v211);
  a2[27] = vqsubq_s16(v223, v209);
  a2[28] = vqsubq_s16(v222, v297);
  a2[29] = vqsubq_s16(v221, v299);
  result = vqsubq_s16(v219, v304);
  a2[30] = result;
  a2[31] = vqsubq_s16(v301, v307);
  return result;
}

int16x8_t idct32_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  const __int16 *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  const __int16 *v14;
  int16x8_t v15;
  const __int16 *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  const __int16 *v25;
  int16x8_t v26;
  const __int16 *v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  const __int16 *v34;
  int16x8_t v35;
  const __int16 *v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  const __int16 *v45;
  int16x8_t v46;
  const __int16 *v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  const __int16 *v53;
  int16x8_t v54;
  const __int16 *v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  const __int16 *v61;
  int16x8_t v62;
  const __int16 *v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  const __int16 *v69;
  int16x8_t v70;
  const __int16 *v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  const __int16 *v77;
  int16x8_t v78;
  const __int16 *v79;
  int16x8_t v80;
  const __int16 *v81;
  const __int16 *v82;
  int16x8_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  const __int16 *v87;
  const __int16 *v88;
  int16x8_t v89;
  int16x8_t v90;
  const __int16 *v91;
  int16x8_t v92;
  const __int16 *v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int32x4_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  const __int16 *v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int32x4_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int32x4_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t result;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int16x8_t v269;
  int32x4_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int32x4_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int32x4_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int16x8_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int16x8_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int32x4_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int32x4_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int16x8_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int16x8_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int16x8_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int16x8_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int16x8_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int16x8_t v331;
  int32x4_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int16x8_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int16x8_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int16x8_t v351;
  int32x4_t v352;
  int16x8_t v353;
  int32x4_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int32x4_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int32x4_t v360;
  int16x8_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int16x8_t v364;
  int32x4_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int16x8_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int16x8_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int16x8_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int32x4_t v385;
  int16x8_t v386;
  int32x4_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v4 = vld1q_dup_s16(v3);
  v5 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v6 = vld1q_dup_s16(v5);
  v7 = *(int16x8_t *)(a1 + 16);
  v9 = *(int16x8_t *)(a1 + 480);
  v8 = *(int16x8_t *)(a1 + 496);
  v10 = vmlal_s16(vmull_s16(*(int16x4_t *)v8.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v7.i8, *(int16x4_t *)v4.i8);
  v11 = vmlal_high_s16(vmull_high_s16(v8, v6), v7, v4);
  v12 = vmlsl_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v6.i8), *(int16x4_t *)v8.i8, *(int16x4_t *)v4.i8);
  v13 = vmlsl_high_s16(vmull_high_s16(v7, v6), v8, v4);
  v14 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v15 = vld1q_dup_s16(v14);
  v16 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v17 = vld1q_dup_s16(v16);
  v18 = *(int16x8_t *)(a1 + 272);
  v389 = *(int16x8_t *)(a1 + 256);
  v20 = *(int16x8_t *)(a1 + 224);
  v19 = *(int16x8_t *)(a1 + 240);
  v21 = vmlal_s16(vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)v17.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v15.i8);
  v22 = vmlal_high_s16(vmull_high_s16(v19, v17), v18, v15);
  v23 = vmlsl_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v17.i8), *(int16x4_t *)v19.i8, *(int16x4_t *)v15.i8);
  v24 = vmlsl_high_s16(vmull_high_s16(v18, v17), v19, v15);
  v25 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v26 = vld1q_dup_s16(v25);
  v27 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v28 = vld1q_dup_s16(v27);
  v29 = *(int16x8_t *)(a1 + 144);
  v31 = *(int16x8_t *)(a1 + 352);
  v30 = *(int16x8_t *)(a1 + 368);
  v32 = vmlal_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v28.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v26.i8);
  v33 = vmlal_high_s16(vmull_high_s16(v30, v28), v29, v26);
  v329 = vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v28.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v26.i8);
  v338 = vmlsl_high_s16(vmull_high_s16(v29, v28), v30, v26);
  v34 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v35 = vld1q_dup_s16(v34);
  v36 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v37 = vld1q_dup_s16(v36);
  v38 = *(int16x8_t *)(a1 + 400);
  v356 = *(int16x8_t *)(a1 + 384);
  v359 = *(int16x8_t *)(a1 + 128);
  v40 = *(int16x8_t *)(a1 + 96);
  v39 = *(int16x8_t *)(a1 + 112);
  v41 = vmlal_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v35.i8);
  v42 = vmlal_high_s16(vmull_high_s16(v39, v37), v38, v35);
  v43 = vmlsl_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v39.i8, *(int16x4_t *)v35.i8);
  v44 = vmlsl_high_s16(vmull_high_s16(v38, v37), v39, v35);
  v45 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v46 = vld1q_dup_s16(v45);
  v47 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v48 = vld1q_dup_s16(v47);
  v49 = *(int16x8_t *)(a1 + 64);
  v50 = *(int16x8_t *)(a1 + 80);
  v51 = *(int16x8_t *)(a1 + 416);
  v52 = *(int16x8_t *)(a1 + 432);
  v341 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v48.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v46.i8);
  v332 = vmlsl_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v48.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v46.i8);
  v335 = vmlal_high_s16(vmull_high_s16(v52, v48), v50, v46);
  v344 = vmlsl_high_s16(vmull_high_s16(v50, v48), v52, v46);
  v53 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v54 = vld1q_dup_s16(v53);
  v55 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v56 = vld1q_dup_s16(v55);
  v57 = *(int16x8_t *)(a1 + 160);
  v58 = *(int16x8_t *)(a1 + 176);
  v60 = *(int16x8_t *)(a1 + 320);
  v59 = *(int16x8_t *)(a1 + 336);
  v326 = vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v54.i8);
  v279 = vmlal_high_s16(vmull_high_s16(v58, v56), v59, v54);
  v320 = vmlsl_high_s16(vmull_high_s16(v59, v56), v58, v54);
  v323 = vmlsl_s16(vmull_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v54.i8);
  v61 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v62 = vld1q_dup_s16(v61);
  v63 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v64 = vld1q_dup_s16(v63);
  v65 = *(int16x8_t *)(a1 + 288);
  v66 = *(int16x8_t *)(a1 + 304);
  v68 = *(int16x8_t *)(a1 + 192);
  v67 = *(int16x8_t *)(a1 + 208);
  v317 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v62.i8);
  v314 = vmlsl_s16(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v64.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v62.i8);
  v309 = vmlal_high_s16(vmull_high_s16(v66, v64), v67, v62);
  v312 = vmlsl_high_s16(vmull_high_s16(v67, v64), v66, v62);
  v69 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v70 = vld1q_dup_s16(v69);
  v71 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v72 = vld1q_dup_s16(v71);
  v73 = *(int16x8_t *)(a1 + 32);
  v74 = *(int16x8_t *)(a1 + 48);
  v76 = *(int16x8_t *)(a1 + 448);
  v75 = *(int16x8_t *)(a1 + 464);
  v300 = vmlal_s16(vmull_s16(*(int16x4_t *)v74.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v70.i8);
  v294 = vmlsl_s16(vmull_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v74.i8, *(int16x4_t *)v70.i8);
  v285 = vmlal_high_s16(vmull_high_s16(v74, v72), v75, v70);
  v288 = vmlsl_high_s16(vmull_high_s16(v75, v72), v74, v70);
  v77 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v78 = vld1q_dup_s16(v77);
  v79 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v80 = vld1q_dup_s16(v79);
  v377 = vmlal_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v80.i8), *(int16x4_t *)v73.i8, *(int16x4_t *)v78.i8);
  v362 = vmlsl_s16(vmull_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v80.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v78.i8);
  v303 = vmlal_high_s16(vmull_high_s16(v9, v80), v73, v78);
  v306 = vmlsl_high_s16(vmull_high_s16(v73, v80), v9, v78);
  v81 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v82 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  v83 = vld1q_dup_s16(v81);
  v84 = vld1q_dup_s16(v82);
  v297 = vmlal_s16(vmull_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v84.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v83.i8);
  v85 = vmull_high_s16(v65, v84);
  v86 = vmlal_high_s16(vmull_high_s16(v20, v84), v65, v83);
  v282 = vmlsl_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v84.i8), *(int16x4_t *)v20.i8, *(int16x4_t *)v83.i8);
  v87 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v88 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v89 = vld1q_dup_s16(v87);
  v90 = vld1q_dup_s16(v88);
  v276 = vmlsl_high_s16(v85, v20, v83);
  v382 = vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v90.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v89.i8);
  v368 = vmlsl_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v90.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v89.i8);
  v371 = vmlal_high_s16(vmull_high_s16(v31, v90), v57, v89);
  v365 = vmlsl_high_s16(vmull_high_s16(v57, v90), v31, v89);
  v91 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v92 = vld1q_dup_s16(v91);
  v93 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v94 = vld1q_dup_s16(v93);
  v354 = vmlal_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v92.i8);
  v350 = vmlsl_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v92.i8);
  v352 = vmlal_high_s16(vmull_high_s16(v40, v94), v51, v92);
  v347 = vmlsl_high_s16(vmull_high_s16(v51, v94), v40, v92);
  v95 = vrshrn_high_n_s32(vrshrn_n_s32(v10, 0xCuLL), v11, 0xCuLL);
  v96 = vrshrn_high_n_s32(vrshrn_n_s32(v12, 0xCuLL), v13, 0xCuLL);
  v97 = vrshrn_high_n_s32(vrshrn_n_s32(v21, 0xCuLL), v22, 0xCuLL);
  LODWORD(v93) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  LODWORD(v88) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  v98 = vdupq_n_s16(v93);
  v99 = vdupq_n_s16(v88);
  v100 = vrshrn_high_n_s32(vrshrn_n_s32(v23, 0xCuLL), v24, 0xCuLL);
  v387 = vmlal_s16(vmull_s16(*(int16x4_t *)v76.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v98.i8);
  v385 = vmlal_high_s16(vmull_high_s16(v76, v99), v49, v98);
  v379 = vmlsl_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v76.i8, *(int16x4_t *)v98.i8);
  v374 = vmlsl_high_s16(vmull_high_s16(v49, v99), v76, v98);
  v101 = vqsubq_s16(v96, v100);
  v102 = vqsubq_s16(v95, v97);
  v103 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v98.i8);
  v104 = vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v99.i8);
  v105 = vmull_high_s16(v102, v99);
  v106 = vmlal_high_s16(vmull_high_s16(v101, v99), v102, v98);
  v107 = vmlsl_s16(v104, *(int16x4_t *)v101.i8, *(int16x4_t *)v98.i8);
  v108 = vmlsl_high_s16(v105, v101, v98);
  v109 = vrshrn_high_n_s32(vrshrn_n_s32(v32, 0xCuLL), v33, 0xCuLL);
  v110 = vrshrn_high_n_s32(vrshrn_n_s32(v329, 0xCuLL), v338, 0xCuLL);
  v111 = vrshrn_high_n_s32(vrshrn_n_s32(v41, 0xCuLL), v42, 0xCuLL);
  v112 = vrshrn_high_n_s32(vrshrn_n_s32(v43, 0xCuLL), v44, 0xCuLL);
  v113 = vqsubq_s16(v112, v110);
  v114 = vqsubq_s16(v111, v109);
  v115 = vdupq_n_s16(-(int)v88);
  v116 = vdupq_n_s16(-(int)v93);
  v117 = vmlal_s16(vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v116.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v115.i8);
  v118 = vmlal_high_s16(vmull_high_s16(v114, v116), v113, v115);
  v119 = vmlsl_s16(vmull_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v116.i8), *(int16x4_t *)v114.i8, *(int16x4_t *)v115.i8);
  v120 = vmlsl_high_s16(vmull_high_s16(v113, v116), v114, v115);
  v291 = vrshrn_high_n_s32(vrshrn_n_s32(v341, 0xCuLL), v335, 0xCuLL);
  v273 = vrshrn_high_n_s32(vrshrn_n_s32(v332, 0xCuLL), v344, 0xCuLL);
  v333 = vrshrn_high_n_s32(vrshrn_n_s32(v326, 0xCuLL), v279, 0xCuLL);
  v121 = vrshrn_high_n_s32(vrshrn_n_s32(v323, 0xCuLL), v320, 0xCuLL);
  LODWORD(v93) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  v122 = vdupq_n_s16(v93);
  LODWORD(v88) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  v123 = vdupq_n_s16(v88);
  v345 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v122.i8);
  v342 = vmlal_high_s16(vmull_high_s16(v68, v123), v60, v122);
  v336 = vmlsl_high_s16(vmull_high_s16(v60, v123), v68, v122);
  v339 = vmlsl_s16(vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v122.i8);
  v124 = vqsubq_s16(v273, v121);
  v125 = vqsubq_s16(v291, v333);
  v330 = vmlal_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v122.i8);
  v324 = vmlsl_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v123.i8), *(int16x4_t *)v124.i8, *(int16x4_t *)v122.i8);
  v327 = vmlal_high_s16(vmull_high_s16(v124, v123), v125, v122);
  v321 = vmlsl_high_s16(vmull_high_s16(v125, v123), v124, v122);
  v126 = vrshrn_high_n_s32(vrshrn_n_s32(v317, 0xCuLL), v309, 0xCuLL);
  v127 = vrshrn_high_n_s32(vrshrn_n_s32(v314, 0xCuLL), v312, 0xCuLL);
  v128 = vrshrn_high_n_s32(vrshrn_n_s32(v300, 0xCuLL), v285, 0xCuLL);
  v129 = vrshrn_high_n_s32(vrshrn_n_s32(v294, 0xCuLL), v288, 0xCuLL);
  v130 = vqsubq_s16(v129, v127);
  v131 = vdupq_n_s16(-(int)v88);
  v132 = vdupq_n_s16(-(int)v93);
  v133 = vqsubq_s16(v128, v126);
  v318 = vmlal_s16(vmull_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v131.i8);
  v134 = vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v132.i8);
  v315 = vmlal_high_s16(vmull_high_s16(v133, v132), v130, v131);
  v310 = vmlsl_high_s16(vmull_high_s16(v130, v132), v133, v131);
  v304 = vrshrn_high_n_s32(vrshrn_n_s32(v377, 0xCuLL), v303, 0xCuLL);
  v301 = vrshrn_high_n_s32(vrshrn_n_s32(v362, 0xCuLL), v306, 0xCuLL);
  v307 = vrshrn_high_n_s32(vrshrn_n_s32(v297, 0xCuLL), v86, 0xCuLL);
  v298 = vrshrn_high_n_s32(vrshrn_n_s32(v282, 0xCuLL), v276, 0xCuLL);
  v256 = vqaddq_s16(v96, v100);
  v257 = vqaddq_s16(v112, v110);
  v259 = vqaddq_s16(v95, v97);
  v260 = vqaddq_s16(v111, v109);
  v277 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xCuLL), v108, 0xCuLL);
  v280 = vrshrn_high_n_s32(vrshrn_n_s32(v117, 0xCuLL), v118, 0xCuLL);
  v269 = vrshrn_high_n_s32(vrshrn_n_s32(v103, 0xCuLL), v106, 0xCuLL);
  v271 = vrshrn_high_n_s32(vrshrn_n_s32(v119, 0xCuLL), v120, 0xCuLL);
  LODWORD(v93) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  LODWORD(v88) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v135 = vdupq_n_s16(v93);
  v136 = vdupq_n_s16(v88);
  v378 = vmlal_s16(vmull_s16(*(int16x4_t *)v356.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v359.i8, *(int16x4_t *)v135.i8);
  v363 = vmlal_high_s16(vmull_high_s16(v356, v136), v359, v135);
  v137 = vmlsl_s16(vmull_s16(*(int16x4_t *)v359.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v135.i8);
  v357 = vmlsl_high_s16(vmull_high_s16(v359, v136), v356, v135);
  v360 = v137;
  v138 = vqsubq_s16(v301, v298);
  v139 = vqsubq_s16(v304, v307);
  v295 = vmlal_s16(vmull_s16(*(int16x4_t *)v138.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v139.i8, *(int16x4_t *)v135.i8);
  v289 = vmlal_high_s16(vmull_high_s16(v138, v136), v139, v135);
  v283 = vmlsl_high_s16(vmull_high_s16(v139, v136), v138, v135);
  v286 = vmlsl_s16(vmull_s16(*(int16x4_t *)v139.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v138.i8, *(int16x4_t *)v135.i8);
  v140 = vqsubq_s16(v277, v280);
  v141 = vqsubq_s16(v269, v271);
  v267 = vmlal_s16(vmull_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v135.i8);
  v264 = vmlal_high_s16(vmull_high_s16(v140, v136), v141, v135);
  v262 = vmlsl_s16(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v140.i8, *(int16x4_t *)v135.i8);
  v263 = vmlsl_high_s16(vmull_high_s16(v141, v136), v140, v135);
  v142 = vqsubq_s16(v256, v257);
  v143 = vqsubq_s16(v259, v260);
  v261 = vmlal_s16(vmull_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v143.i8, *(int16x4_t *)v135.i8);
  v144 = vmlal_high_s16(vmull_high_s16(v142, v136), v143, v135);
  v145 = vmlsl_s16(vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v136.i8), *(int16x4_t *)v142.i8, *(int16x4_t *)v135.i8);
  v265 = vmlsl_high_s16(vmull_high_s16(v143, v136), v142, v135);
  v146 = vrshrn_high_n_s32(vrshrn_n_s32(v382, 0xCuLL), v371, 0xCuLL);
  v147 = vrshrn_high_n_s32(vrshrn_n_s32(v368, 0xCuLL), v365, 0xCuLL);
  v148 = vrshrn_high_n_s32(vrshrn_n_s32(v354, 0xCuLL), v352, 0xCuLL);
  v149 = vrshrn_high_n_s32(vrshrn_n_s32(v350, 0xCuLL), v347, 0xCuLL);
  v274 = vqaddq_s16(v273, v121);
  v383 = vqaddq_s16(v129, v127);
  v348 = vqaddq_s16(v128, v126);
  v292 = vqaddq_s16(v291, v333);
  v150 = vrshrn_high_n_s32(vrshrn_n_s32(v330, 0xCuLL), v327, 0xCuLL);
  v151 = vrshrn_high_n_s32(vrshrn_n_s32(v324, 0xCuLL), v321, 0xCuLL);
  v152 = vrshrn_high_n_s32(vrshrn_n_s32(v318, 0xCuLL), v315, 0xCuLL);
  v153 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(v134, *(int16x4_t *)v133.i8, *(int16x4_t *)v131.i8), 0xCuLL), v310, 0xCuLL);
  v154 = vdupq_n_s16(-(int)v88);
  v155 = vdupq_n_s16(-(int)v93);
  v156 = vqsubq_s16(v149, v147);
  v157 = vqsubq_s16(v148, v146);
  v158 = vmlal_s16(vmull_s16(*(int16x4_t *)v157.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v156.i8, *(int16x4_t *)v154.i8);
  v159 = vmlal_high_s16(vmull_high_s16(v157, v155), v156, v154);
  v160 = vmlsl_s16(vmull_s16(*(int16x4_t *)v156.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v157.i8, *(int16x4_t *)v154.i8);
  v161 = vmlsl_high_s16(vmull_high_s16(v156, v155), v157, v154);
  v162 = vqsubq_s16(v383, v274);
  v163 = vqsubq_s16(v348, v292);
  v164 = vmlal_s16(vmull_s16(*(int16x4_t *)v163.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v162.i8, *(int16x4_t *)v154.i8);
  v165 = vmlal_high_s16(vmull_high_s16(v163, v155), v162, v154);
  v166 = vmlsl_s16(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v163.i8, *(int16x4_t *)v154.i8);
  v167 = vmlsl_high_s16(vmull_high_s16(v162, v155), v163, v154);
  v168 = vqsubq_s16(v152, v151);
  v169 = vqsubq_s16(v153, v150);
  v366 = vrshrn_high_n_s32(vrshrn_n_s32(v387, 0xCuLL), v385, 0xCuLL);
  v170 = vrshrn_high_n_s32(vrshrn_n_s32(v379, 0xCuLL), v374, 0xCuLL);
  v351 = vrshrn_high_n_s32(vrshrn_n_s32(v345, 0xCuLL), v342, 0xCuLL);
  v353 = vrshrn_high_n_s32(vrshrn_n_s32(v339, 0xCuLL), v336, 0xCuLL);
  v255 = vqaddq_s16(v301, v298);
  v299 = vqaddq_s16(v148, v146);
  v302 = vqaddq_s16(v149, v147);
  v311 = vqaddq_s16(v304, v307);
  v171 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v172 = vld1q_dup_s16(v171);
  v380 = vmlal_s16(vmull_s16(*(int16x4_t *)v389.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)a1, *(int16x4_t *)v172.i8);
  v375 = vmlal_high_s16(vmull_high_s16(v389, v172), *(int16x8_t *)a1, v172);
  v369 = vmlsl_high_s16(vmull_high_s16(*(int16x8_t *)a1, v172), v389, v172);
  v372 = vmlsl_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v172.i8), *(int16x4_t *)v389.i8, *(int16x4_t *)v172.i8);
  v331 = vrshrn_high_n_s32(vrshrn_n_s32(v158, 0xCuLL), v159, 0xCuLL);
  v334 = vrshrn_high_n_s32(vrshrn_n_s32(v286, 0xCuLL), v283, 0xCuLL);
  v322 = vrshrn_high_n_s32(vrshrn_n_s32(v160, 0xCuLL), v161, 0xCuLL);
  v325 = vrshrn_high_n_s32(vrshrn_n_s32(v295, 0xCuLL), v289, 0xCuLL);
  v391 = vqaddq_s16(v256, v257);
  v390 = vqaddq_s16(v277, v280);
  v319 = vqaddq_s16(v152, v151);
  v388 = vqaddq_s16(v383, v274);
  v258 = vqaddq_s16(v348, v292);
  v272 = vqaddq_s16(v269, v271);
  v275 = vqaddq_s16(v153, v150);
  v328 = vqaddq_s16(v259, v260);
  v173 = vqsubq_s16(v170, v353);
  v174 = vqsubq_s16(v366, v351);
  v349 = vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v172.i8);
  v346 = vmlal_high_s16(vmull_high_s16(v173, v172), v174, v172);
  v175 = vmlsl_s16(vmull_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v173.i8, *(int16x4_t *)v172.i8);
  v343 = vmlsl_high_s16(vmull_high_s16(v174, v172), v173, v172);
  v281 = vrshrn_high_n_s32(vrshrn_n_s32(v267, 0xCuLL), v264, 0xCuLL);
  v337 = vrshrn_high_n_s32(vrshrn_n_s32(v262, 0xCuLL), v263, 0xCuLL);
  v287 = vrshrn_high_n_s32(vrshrn_n_s32(v261, 0xCuLL), v144, 0xCuLL);
  v384 = vrshrn_high_n_s32(vrshrn_n_s32(v145, 0xCuLL), v265, 0xCuLL);
  v386 = vrshrn_high_n_s32(vrshrn_n_s32(v164, 0xCuLL), v165, 0xCuLL);
  v284 = vrshrn_high_n_s32(vrshrn_n_s32(v166, 0xCuLL), v167, 0xCuLL);
  v340 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v169.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v168.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v169, v155), v168, v154), 0xCuLL);
  v278 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v168.i8, *(int16x4_t *)v155.i8), *(int16x4_t *)v169.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v168, v155), v169, v154), 0xCuLL);
  v176 = vqsubq_s16(v334, v331);
  v177 = vqsubq_s16(v325, v322);
  v178 = vmlal_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v177.i8, *(int16x4_t *)v172.i8);
  v313 = vmlal_high_s16(vmull_high_s16(v176, v172), v177, v172);
  v179 = vmlsl_s16(vmull_s16(*(int16x4_t *)v177.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v176.i8, *(int16x4_t *)v172.i8);
  v316 = vmlsl_high_s16(vmull_high_s16(v177, v172), v176, v172);
  v180 = vqsubq_s16(v255, v302);
  v181 = vqsubq_s16(v311, v299);
  v308 = vmlal_s16(vmull_s16(*(int16x4_t *)v180.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v181.i8, *(int16x4_t *)v172.i8);
  v296 = vmlal_high_s16(vmull_high_s16(v180, v172), v181, v172);
  v182 = vmlsl_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v172.i8);
  v183 = vmlsl_high_s16(vmull_high_s16(v181, v172), v180, v172);
  v184 = vqsubq_s16(v384, v386);
  v185 = vqsubq_s16(v287, v284);
  v290 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v185.i8, *(int16x4_t *)v172.i8);
  v268 = vmlal_high_s16(vmull_high_s16(v184, v172), v185, v172);
  v270 = v182;
  v186 = vmlsl_s16(vmull_s16(*(int16x4_t *)v185.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v184.i8, *(int16x4_t *)v172.i8);
  v266 = vmlsl_high_s16(vmull_high_s16(v185, v172), v184, v172);
  v187 = vqsubq_s16(v337, v340);
  v188 = vqsubq_s16(v281, v278);
  v189 = vmlal_s16(vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v188.i8, *(int16x4_t *)v172.i8);
  v190 = vmlal_high_s16(vmull_high_s16(v187, v172), v188, v172);
  v305 = vmlsl_s16(vmull_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v172.i8);
  v293 = vmlsl_high_s16(vmull_high_s16(v188, v172), v187, v172);
  v191 = vqsubq_s16(v390, v319);
  v192 = vqsubq_s16(v272, v275);
  v193 = vmlal_s16(vmull_s16(*(int16x4_t *)v191.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v192.i8, *(int16x4_t *)v172.i8);
  v194 = vmlal_high_s16(vmull_high_s16(v191, v172), v192, v172);
  v195 = vmlsl_s16(vmull_s16(*(int16x4_t *)v192.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v191.i8, *(int16x4_t *)v172.i8);
  v196 = vmlsl_high_s16(vmull_high_s16(v192, v172), v191, v172);
  v197 = vqsubq_s16(v391, v388);
  v198 = vqsubq_s16(v328, v258);
  v199 = vmlal_s16(vmull_s16(*(int16x4_t *)v197.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v198.i8, *(int16x4_t *)v172.i8);
  v200 = vmlal_high_s16(vmull_high_s16(v197, v172), v198, v172);
  v201 = vmlsl_s16(vmull_s16(*(int16x4_t *)v198.i8, *(int16x4_t *)v172.i8), *(int16x4_t *)v197.i8, *(int16x4_t *)v172.i8);
  v202 = vmlsl_high_s16(vmull_high_s16(v198, v172), v197, v172);
  v203 = vrshrn_high_n_s32(vrshrn_n_s32(v380, 0xCuLL), v375, 0xCuLL);
  v204 = vrshrn_high_n_s32(vrshrn_n_s32(v372, 0xCuLL), v369, 0xCuLL);
  v205 = vrshrn_high_n_s32(vrshrn_n_s32(v378, 0xCuLL), v363, 0xCuLL);
  v206 = vrshrn_high_n_s32(vrshrn_n_s32(v360, 0xCuLL), v357, 0xCuLL);
  v207 = vqaddq_s16(v170, v353);
  v208 = vqaddq_s16(v366, v351);
  v209 = vrshrn_high_n_s32(vrshrn_n_s32(v349, 0xCuLL), v346, 0xCuLL);
  v210 = vrshrn_high_n_s32(vrshrn_n_s32(v175, 0xCuLL), v343, 0xCuLL);
  v211 = vqaddq_s16(v204, v206);
  v212 = vqsubq_s16(v204, v206);
  v213 = vqaddq_s16(v203, v205);
  v214 = vqsubq_s16(v203, v205);
  v215 = vqaddq_s16(v255, v302);
  v216 = vrshrn_high_n_s32(vrshrn_n_s32(v178, 0xCuLL), v313, 0xCuLL);
  v217 = vrshrn_high_n_s32(vrshrn_n_s32(v179, 0xCuLL), v316, 0xCuLL);
  v218 = vrshrn_high_n_s32(vrshrn_n_s32(v308, 0xCuLL), v296, 0xCuLL);
  v219 = vrshrn_high_n_s32(vrshrn_n_s32(v270, 0xCuLL), v183, 0xCuLL);
  v355 = vqaddq_s16(v214, v207);
  v358 = vqaddq_s16(v325, v322);
  v367 = vqsubq_s16(v214, v207);
  v370 = vqaddq_s16(v311, v299);
  v220 = vqaddq_s16(v212, v210);
  v221 = vqsubq_s16(v212, v210);
  v222 = vqsubq_s16(v211, v209);
  v361 = vqaddq_s16(v211, v209);
  v364 = vqaddq_s16(v213, v208);
  v223 = vqsubq_s16(v213, v208);
  v373 = vqaddq_s16(v278, v281);
  v376 = vqaddq_s16(v275, v272);
  v381 = vqaddq_s16(v258, v328);
  v224 = vrshrn_high_n_s32(vrshrn_n_s32(v290, 0xCuLL), v268, 0xCuLL);
  v225 = vrshrn_high_n_s32(vrshrn_n_s32(v186, 0xCuLL), v266, 0xCuLL);
  v226 = vrshrn_high_n_s32(vrshrn_n_s32(v189, 0xCuLL), v190, 0xCuLL);
  v227 = vrshrn_high_n_s32(vrshrn_n_s32(v193, 0xCuLL), v194, 0xCuLL);
  v228 = vrshrn_high_n_s32(vrshrn_n_s32(v195, 0xCuLL), v196, 0xCuLL);
  v229 = vrshrn_high_n_s32(vrshrn_n_s32(v199, 0xCuLL), v200, 0xCuLL);
  v230 = vrshrn_high_n_s32(vrshrn_n_s32(v201, 0xCuLL), v202, 0xCuLL);
  v231 = vqaddq_s16(v223, v215);
  v232 = vqsubq_s16(v223, v215);
  v233 = vqaddq_s16(v364, v370);
  v234 = vqaddq_s16(v361, v358);
  *a2 = vqaddq_s16(v233, v381);
  a2[1] = vqaddq_s16(v234, v376);
  v235 = vqaddq_s16(v220, v216);
  v236 = vqaddq_s16(v355, v218);
  v237 = vqaddq_s16(v284, v287);
  a2[2] = vqaddq_s16(v235, v373);
  a2[3] = vqaddq_s16(v236, v237);
  v238 = vqaddq_s16(v367, v219);
  v239 = vqaddq_s16(v221, v217);
  a2[4] = vqaddq_s16(v238, v224);
  a2[5] = vqaddq_s16(v239, v226);
  v240 = vqaddq_s16(v334, v331);
  v241 = vqaddq_s16(v222, v240);
  a2[6] = vqaddq_s16(v241, v227);
  a2[7] = vqaddq_s16(v231, v229);
  v242 = vqsubq_s16(v222, v240);
  a2[8] = vqaddq_s16(v232, v230);
  a2[9] = vqaddq_s16(v242, v228);
  v243 = vrshrn_high_n_s32(vrshrn_n_s32(v305, 0xCuLL), v293, 0xCuLL);
  v244 = vqsubq_s16(v221, v217);
  v245 = vqsubq_s16(v367, v219);
  a2[10] = vqaddq_s16(v244, v243);
  a2[11] = vqaddq_s16(v245, v225);
  v246 = vqaddq_s16(v337, v340);
  v247 = vqaddq_s16(v384, v386);
  v248 = vqsubq_s16(v355, v218);
  v249 = vqsubq_s16(v220, v216);
  a2[12] = vqaddq_s16(v248, v247);
  a2[13] = vqaddq_s16(v249, v246);
  v250 = vqaddq_s16(v391, v388);
  v251 = vqaddq_s16(v390, v319);
  v252 = vqsubq_s16(v361, v358);
  v253 = vqsubq_s16(v364, v370);
  a2[14] = vqaddq_s16(v252, v251);
  a2[15] = vqaddq_s16(v253, v250);
  a2[16] = vqsubq_s16(v253, v250);
  a2[17] = vqsubq_s16(v252, v251);
  a2[18] = vqsubq_s16(v249, v246);
  a2[19] = vqsubq_s16(v248, v247);
  a2[20] = vqsubq_s16(v245, v225);
  a2[21] = vqsubq_s16(v244, v243);
  a2[22] = vqsubq_s16(v242, v228);
  a2[23] = vqsubq_s16(v232, v230);
  a2[24] = vqsubq_s16(v231, v229);
  a2[25] = vqsubq_s16(v241, v227);
  a2[26] = vqsubq_s16(v239, v226);
  a2[27] = vqsubq_s16(v238, v224);
  a2[28] = vqsubq_s16(v236, v237);
  a2[29] = vqsubq_s16(v235, v373);
  result = vqsubq_s16(v234, v376);
  a2[30] = result;
  a2[31] = vqsubq_s16(v233, v381);
  return result;
}

int16x8_t idct64_low1_neon(int16x4_t *a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t result;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v4 = vld1q_dup_s16(v3);
  result = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*a1, *(int16x4_t *)v4.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1->i8, v4), 0xCuLL);
  *a2 = result;
  a2[1] = result;
  a2[2] = result;
  a2[3] = result;
  a2[4] = result;
  a2[5] = result;
  a2[6] = result;
  a2[7] = result;
  a2[8] = result;
  a2[9] = result;
  a2[10] = result;
  a2[11] = result;
  a2[12] = result;
  a2[13] = result;
  a2[14] = result;
  a2[15] = result;
  a2[16] = result;
  a2[17] = result;
  a2[18] = result;
  a2[19] = result;
  a2[20] = result;
  a2[21] = result;
  a2[22] = result;
  a2[23] = result;
  a2[24] = result;
  a2[25] = result;
  a2[26] = result;
  a2[27] = result;
  a2[28] = result;
  a2[29] = result;
  a2[30] = result;
  a2[31] = result;
  a2[32] = result;
  a2[33] = result;
  a2[34] = result;
  a2[35] = result;
  a2[36] = result;
  a2[37] = result;
  a2[38] = result;
  a2[39] = result;
  a2[40] = result;
  a2[41] = result;
  a2[42] = result;
  a2[43] = result;
  a2[44] = result;
  a2[45] = result;
  a2[46] = result;
  a2[47] = result;
  a2[48] = result;
  a2[49] = result;
  a2[50] = result;
  a2[51] = result;
  a2[52] = result;
  a2[53] = result;
  a2[54] = result;
  a2[55] = result;
  a2[56] = result;
  a2[57] = result;
  a2[58] = result;
  a2[59] = result;
  a2[60] = result;
  a2[61] = result;
  a2[62] = result;
  a2[63] = result;
  return result;
}

int16x8_t idct64_low8_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  int32x4_t v6;
  int32x4_t v7;
  const __int16 *v8;
  int16x8_t v9;
  int32x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  const __int16 *v18;
  int16x8_t v19;
  int32x4_t v20;
  int32x4_t v21;
  const __int16 *v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  const __int16 *v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  const __int16 *v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  const __int16 *v40;
  int16x8_t v41;
  const __int16 *v42;
  int16x8_t v43;
  int32x4_t v44;
  int16x8_t v45;
  const __int16 *v46;
  int16x8_t v47;
  const __int16 *v48;
  int16x8_t v49;
  const __int16 *v50;
  int16x8_t v51;
  int32x4_t v52;
  int16x4_t v53;
  unsigned int v54;
  int16x4_t v55;
  int32x4_t v56;
  int16x4_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  const __int16 *v71;
  const __int16 *v72;
  unsigned int v73;
  unsigned int v74;
  int32x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int32x4_t v91;
  int16x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int16x4_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int16x4_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int16x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  const __int16 *v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int32x4_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int32x4_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int16x8_t v190;
  int16x8_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int16x8_t v194;
  int16x8_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t result;
  int16x8_t v255;
  int16x8_t v256;
  int32x4_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int16x8_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int32x4_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int32x4_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int32x4_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int32x4_t v311;
  int16x8_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int16x8_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int16x8_t v318;
  int32x4_t v319;
  int32x4_t v320;
  int16x8_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int16x8_t v324;
  int32x4_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int32x4_t v328;
  int16x8_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int16x8_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int16x8_t v335;
  int32x4_t v336;
  int16x8_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int16x8_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int16x8_t v355;
  int32x4_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int16x8_t v361;
  int16x4_t v362;
  int32x4_t v363;
  int16x8_t v364;
  int16x4_t v365;
  int16x8_t v366;
  int16x8_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int16x8_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int16x8_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int16x8_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int16x8_t v385;
  int32x4_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int16x8_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int16x8_t v394;
  int32x4_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int16x8_t v399;
  int32x4_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int16x8_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int16x8_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int16x8_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int16x8_t v414;
  int32x4_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int16x8_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int16x8_t v423;
  int32x4_t v424;
  int16x8_t v425;
  int16x8_t v426;
  int32x4_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int32x4_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int32x4_t v435;
  int16x8_t v436;
  int16x8_t v437;
  int32x4_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int32x4_t v441;
  int16x8_t v442;
  int16x8_t v443;
  int32x4_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int32x4_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int32x4_t v450;
  int16x8_t v451;
  int32x4_t v452;
  int16x8_t v453;
  int16x8_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int32x4_t v457;
  int16x8_t v458;
  int32x4_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int32x4_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int32x4_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int16x8_t v469;
  int32x4_t v470;
  int16x8_t v471;
  int16x8_t v472;
  int32x4_t v473;
  int16x8_t v474;
  int16x8_t v475;
  int16x8_t v476;
  int16x8_t v477;
  int16x8_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int32x4_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 577];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 16);
  v6 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
  v7 = vmull_high_s16(v5, v4);
  v8 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 639];
  v9 = vld1q_dup_s16(v8);
  v10 = vmull_high_s16(v5, v9);
  v11 = vrshrn_n_s32(v6, 0xCuLL);
  v12 = vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v9.i8), 0xCuLL);
  v13 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 583]));
  v15 = *(int16x8_t *)(a1 + 96);
  v14 = *(int16x8_t *)(a1 + 112);
  v16 = vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v13.i8);
  v17 = vmull_high_s16(v14, v13);
  v18 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 633];
  v19 = vld1q_dup_s16(v18);
  v20 = vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v19.i8);
  v21 = vmull_high_s16(v14, v19);
  v22 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 581];
  v23 = vld1q_dup_s16(v22);
  v24 = *(int16x8_t *)(a1 + 80);
  v25 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v23.i8);
  v26 = vmull_high_s16(v24, v23);
  v27 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 635];
  v28 = vld1q_dup_s16(v27);
  v29 = vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v28.i8);
  v30 = vmull_high_s16(v24, v28);
  v31 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 579]));
  v32 = *(int16x8_t *)(a1 + 32);
  v33 = *(int16x8_t *)(a1 + 48);
  v34 = vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v31.i8);
  v35 = vmull_high_s16(v33, v31);
  v36 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 637];
  v37 = vld1q_dup_s16(v36);
  v38 = vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v37.i8);
  v39 = vmull_high_s16(v33, v37);
  v40 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v41 = vld1q_dup_s16(v40);
  v473 = vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v41.i8);
  v470 = vmull_high_s16(v32, v41);
  v42 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v43 = vld1q_dup_s16(v42);
  v400 = vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v43.i8);
  v44 = vmull_high_s16(v32, v43);
  v45 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 582]));
  v435 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v45.i8);
  v462 = vmull_high_s16(v15, v45);
  v46 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v47 = vld1q_dup_s16(v46);
  v415 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v47.i8);
  v459 = vmull_high_s16(v15, v47);
  v48 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v49 = vld1q_dup_s16(v48);
  v50 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v51 = vld1q_dup_s16(v50);
  v52 = vmlsl_s16(vmull_s16(v12, *(int16x4_t *)v49.i8), v11, *(int16x4_t *)v51.i8);
  LODWORD(v50) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  v53 = vdup_n_s16(v50);
  v54 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  v55 = vdup_n_s16(v54);
  v441 = vmlsl_s16(vmull_s16(v12, v55), v11, v53);
  v433 = vrshrn_high_n_s32(v11, v7, 0xCuLL);
  *(int16x4_t *)v7.i8 = vrshrn_n_s32(v7, 0xCuLL);
  v56 = vmlal_s16(vmull_s16(v11, *(int16x4_t *)v49.i8), v12, *(int16x4_t *)v51.i8);
  v438 = vmlal_s16(vmull_s16(v11, v55), v12, v53);
  v492 = vrshrn_high_n_s32(v12, v10, 0xCuLL);
  v57 = vrshrn_n_s32(v10, 0xCuLL);
  v58 = *(int16x8_t *)(a1 + 64);
  v447 = vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v49.i8);
  v450 = vmull_high_s16(v58, v49);
  v444 = vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v51.i8);
  v452 = vmull_high_s16(v58, v51);
  v59 = vmull_s16(v57, *(int16x4_t *)v49.i8);
  v60 = vmlal_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v49.i8), v57, *(int16x4_t *)v51.i8);
  v61 = vmlsl_s16(v59, *(int16x4_t *)v7.i8, *(int16x4_t *)v51.i8);
  *(int16x4_t *)v58.i8 = vrshrn_n_s32(v16, 0xCuLL);
  *(int16x4_t *)v16.i8 = vrshrn_n_s32(v20, 0xCuLL);
  *(int16x4_t *)v20.i8 = vdup_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 612]));
  *(int16x4_t *)v51.i8 = vdup_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 604]));
  v62 = vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v20.i8);
  v63 = vdup_n_s16(-v54);
  v64 = vdup_n_s16(-(int)v50);
  v427 = vmlal_s16(vmull_s16(*(int16x4_t *)v16.i8, v64), *(int16x4_t *)v58.i8, v63);
  v65 = vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v51.i8);
  v66 = vmull_s16(*(int16x4_t *)v58.i8, v64);
  v430 = vrshrn_high_n_s32(*(int16x4_t *)v58.i8, v17, 0xCuLL);
  *(int16x4_t *)v58.i8 = vrshrn_n_s32(v17, 0xCuLL);
  v67 = vmlsl_s16(v65, *(int16x4_t *)v16.i8, *(int16x4_t *)v20.i8);
  v424 = vmlsl_s16(v66, *(int16x4_t *)v16.i8, v63);
  v489 = vrshrn_high_n_s32(*(int16x4_t *)v16.i8, v21, 0xCuLL);
  *(int16x4_t *)v17.i8 = vrshrn_n_s32(v21, 0xCuLL);
  v68 = vmlal_s16(vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v20.i8);
  v69 = vmlsl_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v51.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v20.i8);
  v421 = vmlal_s16(vmull_s16(*(int16x4_t *)v17.i8, v64), *(int16x4_t *)v58.i8, v63);
  v418 = vmlsl_s16(vmull_s16(*(int16x4_t *)v58.i8, v64), *(int16x4_t *)v17.i8, v63);
  *(int16x4_t *)v58.i8 = vrshrn_n_s32(v62, 0xCuLL);
  *(int16x4_t *)v17.i8 = vrshrn_n_s32(v67, 0xCuLL);
  v412 = vmlal_s16(vmull_s16(*(int16x4_t *)v17.i8, v64), *(int16x4_t *)v58.i8, v63);
  v70 = vmull_s16(*(int16x4_t *)v58.i8, v64);
  v487 = vrshrn_high_n_s32(*(int16x4_t *)v58.i8, v68, 0xCuLL);
  *(int16x4_t *)v58.i8 = vrshrn_n_s32(v68, 0xCuLL);
  *(int16x4_t *)v68.i8 = vrshrn_n_s32(v69, 0xCuLL);
  v403 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, v64), *(int16x4_t *)v58.i8, v63);
  v409 = vmlsl_s16(vmull_s16(*(int16x4_t *)v58.i8, v64), *(int16x4_t *)v68.i8, v63);
  v406 = vmlsl_s16(v70, *(int16x4_t *)v17.i8, v63);
  v485 = vrshrn_high_n_s32(*(int16x4_t *)v17.i8, v69, 0xCuLL);
  v71 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v72 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v73 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  v74 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  *(int16x4_t *)v25.i8 = vrshrn_n_s32(v25, 0xCuLL);
  *(int16x4_t *)v29.i8 = vrshrn_n_s32(v29, 0xCuLL);
  *(int16x4_t *)v69.i8 = vld1_dup_s16(v71);
  *(int16x4_t *)v68.i8 = vld1_dup_s16(v72);
  v75 = vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v69.i8);
  v76 = vdup_n_s16(v73);
  v77 = vdup_n_s16(v74);
  v353 = vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, v77), *(int16x4_t *)v25.i8, v76);
  v482 = vrshrn_high_n_s32(*(int16x4_t *)v25.i8, v26, 0xCuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v26, 0xCuLL);
  v78 = vmlal_s16(vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v69.i8);
  v79 = vmlal_s16(vmull_s16(*(int16x4_t *)v25.i8, v77), *(int16x4_t *)v29.i8, v76);
  v479 = vrshrn_high_n_s32(*(int16x4_t *)v29.i8, v30, 0xCuLL);
  *(int16x4_t *)v30.i8 = vrshrn_n_s32(v30, 0xCuLL);
  v80 = vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v69.i8);
  v81 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v68.i8), *(int16x4_t *)v26.i8, *(int16x4_t *)v69.i8);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v78, 0xCuLL);
  v476 = vrshrn_high_n_s32(*(int16x4_t *)v69.i8, v80, 0xCuLL);
  *(int16x4_t *)v29.i8 = vrshrn_n_s32(v80, 0xCuLL);
  *(int16x4_t *)v68.i8 = vrshrn_n_s32(v81, 0xCuLL);
  v82 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, v77), *(int16x4_t *)v29.i8, v76);
  v83 = vmlsl_s16(vmull_s16(*(int16x4_t *)v29.i8, v77), *(int16x4_t *)v68.i8, v76);
  *(int16x4_t *)v75.i8 = vrshrn_n_s32(v75, 0xCuLL);
  v84 = vmlal_s16(vmull_s16(*(int16x4_t *)v75.i8, v77), *(int16x4_t *)v69.i8, v76);
  v85 = vmull_s16(*(int16x4_t *)v69.i8, v77);
  v86 = vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, v77), *(int16x4_t *)v30.i8, v76);
  v87 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, v77), *(int16x4_t *)v26.i8, v76);
  v88 = vmlsl_s16(v85, *(int16x4_t *)v75.i8, v76);
  v468 = vrshrn_high_n_s32(*(int16x4_t *)v75.i8, v81, 0xCuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v34, 0xCuLL);
  v89 = vrshrn_n_s32(v38, 0xCuLL);
  *(int16x4_t *)v81.i8 = vdup_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 628]));
  v90 = vdup_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]));
  v91 = vmlal_s16(vmull_s16(v89, v90), *(int16x4_t *)v26.i8, *(int16x4_t *)v81.i8);
  v92 = vdup_n_s16(-v74);
  *(int16x4_t *)v75.i8 = vdup_n_s16(-v73);
  v93 = vmlal_s16(vmull_s16(v89, *(int16x4_t *)v75.i8), *(int16x4_t *)v26.i8, v92);
  v465 = vrshrn_high_n_s32(*(int16x4_t *)v26.i8, v35, 0xCuLL);
  *(int16x4_t *)v70.i8 = vrshrn_n_s32(v35, 0xCuLL);
  v94 = vmlsl_s16(vmull_s16(*(int16x4_t *)v26.i8, v90), v89, *(int16x4_t *)v81.i8);
  v95 = vmlsl_s16(vmull_s16(*(int16x4_t *)v26.i8, *(int16x4_t *)v75.i8), v89, v92);
  v96 = vrshrn_high_n_s32(v89, v39, 0xCuLL);
  *(int16x4_t *)v35.i8 = vrshrn_n_s32(v39, 0xCuLL);
  v97 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, v90), *(int16x4_t *)v70.i8, *(int16x4_t *)v81.i8);
  v98 = vmlsl_s16(vmull_s16(*(int16x4_t *)v70.i8, v90), *(int16x4_t *)v35.i8, *(int16x4_t *)v81.i8);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v56, 0xCuLL);
  *(int16x4_t *)v52.i8 = vrshrn_n_s32(v52, 0xCuLL);
  v389 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, v55), *(int16x4_t *)v26.i8, v53);
  v99 = vmull_s16(*(int16x4_t *)v26.i8, v55);
  v456 = vrshrn_high_n_s32(*(int16x4_t *)v26.i8, v60, 0xCuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v60, 0xCuLL);
  v386 = vmlsl_s16(v99, *(int16x4_t *)v52.i8, v53);
  v454 = vrshrn_high_n_s32(*(int16x4_t *)v52.i8, v61, 0xCuLL);
  *(int16x4_t *)v61.i8 = vrshrn_n_s32(v61, 0xCuLL);
  v372 = vmlsl_s16(vmull_s16(*(int16x4_t *)v26.i8, v55), *(int16x4_t *)v61.i8, v53);
  v376 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, v55), *(int16x4_t *)v26.i8, v53);
  v379 = vmlal_s16(vmull_s16(*(int16x4_t *)v7.i8, v55), v57, v53);
  v383 = vmlsl_s16(vmull_s16(v57, v55), *(int16x4_t *)v7.i8, v53);
  LODWORD(v71) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  LODWORD(v72) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  *(int16x4_t *)v7.i8 = vrshrn_n_s32(v473, 0xCuLL);
  v100 = vrshrn_n_s32(v400, 0xCuLL);
  v392 = vmlsl_s16(vmull_s16(v100, v55), *(int16x4_t *)v7.i8, v53);
  v101 = vdupq_n_s16(v71);
  v102 = vdupq_n_s16(v72);
  v398 = vmlsl_s16(vmull_s16(v100, *(int16x4_t *)v102.i8), *(int16x4_t *)v7.i8, *(int16x4_t *)v101.i8);
  v474 = vrshrn_high_n_s32(*(int16x4_t *)v7.i8, v470, 0xCuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v470, 0xCuLL);
  v395 = vmlal_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v102.i8), v100, *(int16x4_t *)v101.i8);
  v471 = vrshrn_high_n_s32(v100, v44, 0xCuLL);
  v365 = vrshrn_n_s32(v44, 0xCuLL);
  v362 = *(int16x4_t *)v26.i8;
  v103 = vmlal_s16(vmull_s16(*(int16x4_t *)v26.i8, v55), v365, v53);
  v356 = vmlsl_s16(vmull_s16(v365, v55), *(int16x4_t *)v26.i8, v53);
  v359 = vmlal_s16(vmull_s16(*(int16x4_t *)v7.i8, v55), v100, v53);
  v104 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v70.i8, v92);
  v105 = vmlsl_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v35.i8, v92);
  *(int16x4_t *)v81.i8 = vrshrn_n_s32(v91, 0xCuLL);
  v106 = vrshrn_n_s32(v94, 0xCuLL);
  v107 = vmlal_s16(vmull_s16(v106, *(int16x4_t *)v75.i8), *(int16x4_t *)v81.i8, v92);
  *(int16x4_t *)v35.i8 = vrshrn_n_s32(v97, 0xCuLL);
  v108 = vmlsl_s16(vmull_s16(*(int16x4_t *)v81.i8, *(int16x4_t *)v75.i8), v106, v92);
  v324 = vrshrn_high_n_s32(*(int16x4_t *)v81.i8, v97, 0xCuLL);
  v327 = vrshrn_high_n_s32(v106, v98, 0xCuLL);
  *(int16x4_t *)v70.i8 = vrshrn_n_s32(v98, 0xCuLL);
  v109 = vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v35.i8, v92);
  v110 = vmlsl_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v75.i8), *(int16x4_t *)v70.i8, v92);
  *(int16x4_t *)v56.i8 = vrshrn_n_s32(v435, 0xCuLL);
  v111 = vrshrn_n_s32(v415, 0xCuLL);
  v112 = vmlal_s16(vmull_s16(v111, *(int16x4_t *)v75.i8), *(int16x4_t *)v56.i8, v92);
  v113 = vdupq_n_s16(-(int)v72);
  v114 = vdupq_n_s16(-(int)v71);
  v370 = vmlal_s16(vmull_s16(v111, *(int16x4_t *)v114.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v113.i8);
  v115 = vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v75.i8);
  v116 = vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v114.i8);
  v416 = vrshrn_high_n_s32(*(int16x4_t *)v56.i8, v462, 0xCuLL);
  *(int16x4_t *)v56.i8 = vrshrn_n_s32(v462, 0xCuLL);
  v117 = vmlsl_s16(v115, v111, v92);
  v368 = vmlsl_s16(v116, v111, *(int16x4_t *)v113.i8);
  v463 = vrshrn_high_n_s32(v111, v459, 0xCuLL);
  v118 = vrshrn_n_s32(v459, 0xCuLL);
  v119 = vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v75.i8);
  v120 = vmlal_s16(vmull_s16(v118, *(int16x4_t *)v75.i8), *(int16x4_t *)v56.i8, v92);
  v121 = vmlsl_s16(v119, v118, v92);
  v310 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xCuLL), v82, 0xCuLL);
  v301 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xCuLL), v83, 0xCuLL);
  v298 = vrshrn_high_n_s32(vrshrn_n_s32(v79, 0xCuLL), v86, 0xCuLL);
  v288 = vrshrn_high_n_s32(vrshrn_n_s32(v353, 0xCuLL), v87, 0xCuLL);
  v274 = vrshrn_high_n_s32(vrshrn_n_s32(v93, 0xCuLL), v104, 0xCuLL);
  v290 = vrshrn_high_n_s32(vrshrn_n_s32(v95, 0xCuLL), v105, 0xCuLL);
  v304 = vrshrn_high_n_s32(vrshrn_n_s32(v107, 0xCuLL), v109, 0xCuLL);
  v307 = vrshrn_high_n_s32(vrshrn_n_s32(v108, 0xCuLL), v110, 0xCuLL);
  v354 = vmlal_s16(vmull_s16(v118, *(int16x4_t *)v114.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v113.i8);
  v351 = vmlsl_s16(vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v114.i8), v118, *(int16x4_t *)v113.i8);
  *(int16x4_t *)v35.i8 = vrshrn_n_s32(v112, 0xCuLL);
  v460 = vrshrn_high_n_s32(*(int16x4_t *)v35.i8, v120, 0xCuLL);
  *(int16x4_t *)v104.i8 = vrshrn_n_s32(v120, 0xCuLL);
  *(int16x4_t *)v116.i8 = vrshrn_n_s32(v121, 0xCuLL);
  v349 = vmlal_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v113.i8);
  v347 = vmlsl_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v113.i8);
  v122 = vqsubq_s16(v465, v482);
  v123 = vqsubq_s16(v96, v479);
  v338 = vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v113.i8);
  v336 = vmlal_high_s16(vmull_high_s16(v123, v114), v122, v113);
  v330 = vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v123.i8, *(int16x4_t *)v113.i8);
  v333 = vmlsl_high_s16(vmull_high_s16(v122, v114), v123, v113);
  v124 = vqsubq_s16(v324, v468);
  v125 = vqsubq_s16(v327, v476);
  v322 = vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v124.i8, *(int16x4_t *)v113.i8);
  v319 = vmlal_high_s16(vmull_high_s16(v125, v114), v124, v113);
  v313 = vmlsl_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v113.i8);
  v316 = vmlsl_high_s16(vmull_high_s16(v124, v114), v125, v113);
  v126 = vqsubq_s16(v304, v301);
  v127 = vqsubq_s16(v307, v310);
  v295 = vmlal_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v126.i8, *(int16x4_t *)v113.i8);
  v292 = vmlal_high_s16(vmull_high_s16(v127, v114), v126, v113);
  v284 = vmlsl_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v127.i8, *(int16x4_t *)v113.i8);
  v286 = vmlsl_high_s16(vmull_high_s16(v126, v114), v127, v113);
  *(int16x4_t *)v126.i8 = vrshrn_n_s32(v117, 0xCuLL);
  v272 = vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v113.i8);
  v128 = vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v114.i8);
  v129 = vqsubq_s16(v274, v288);
  v130 = vqsubq_s16(v290, v298);
  v278 = vmlal_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v113.i8);
  v276 = vmlal_high_s16(vmull_high_s16(v130, v114), v129, v113);
  v280 = vmlsl_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v114.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v113.i8);
  v282 = vmlsl_high_s16(vmull_high_s16(v129, v114), v130, v113);
  v266 = vmlsl_s16(v128, *(int16x4_t *)v126.i8, *(int16x4_t *)v113.i8);
  v436 = vrshrn_high_n_s32(*(int16x4_t *)v126.i8, v121, 0xCuLL);
  v131 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v132 = vld1q_dup_s16(v131);
  v401 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v132.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v132), 0xCuLL);
  v133 = vrshrn_high_n_s32(vrshrn_n_s32(v389, 0xCuLL), v376, 0xCuLL);
  v134 = vrshrn_high_n_s32(vrshrn_n_s32(v386, 0xCuLL), v372, 0xCuLL);
  v135 = vrshrn_high_n_s32(vrshrn_n_s32(v438, 0xCuLL), v379, 0xCuLL);
  v136 = vrshrn_high_n_s32(vrshrn_n_s32(v441, 0xCuLL), v383, 0xCuLL);
  v137 = vrshrn_high_n_s32(vrshrn_n_s32(v427, 0xCuLL), v421, 0xCuLL);
  v138 = vrshrn_high_n_s32(vrshrn_n_s32(v424, 0xCuLL), v418, 0xCuLL);
  v139 = vrshrn_high_n_s32(vrshrn_n_s32(v412, 0xCuLL), v403, 0xCuLL);
  v140 = vrshrn_high_n_s32(vrshrn_n_s32(v406, 0xCuLL), v409, 0xCuLL);
  *(int16x4_t *)v130.i8 = vrshrn_n_s32(v359, 0xCuLL);
  *(int16x4_t *)v114.i8 = vrshrn_n_s32(v392, 0xCuLL);
  v141 = vmlal_s16(vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v101.i8);
  v142 = vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v102.i8);
  v270 = vrshrn_high_n_s32(*(int16x4_t *)v130.i8, v103, 0xCuLL);
  *(int16x4_t *)v130.i8 = vrshrn_n_s32(v103, 0xCuLL);
  v143 = vmlsl_s16(v142, *(int16x4_t *)v114.i8, *(int16x4_t *)v101.i8);
  v268 = vrshrn_high_n_s32(*(int16x4_t *)v114.i8, v356, 0xCuLL);
  *(int16x4_t *)v114.i8 = vrshrn_n_s32(v356, 0xCuLL);
  v144 = vmlal_s16(vmull_s16(*(int16x4_t *)v114.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v101.i8);
  v145 = vmlsl_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v114.i8, *(int16x4_t *)v101.i8);
  v146 = vmlal_s16(vmull_s16(v362, *(int16x4_t *)v102.i8), v365, *(int16x4_t *)v101.i8);
  v147 = vmlsl_s16(vmull_s16(v365, *(int16x4_t *)v102.i8), v362, *(int16x4_t *)v101.i8);
  v148 = vqsubq_s16(v136, v137);
  v149 = vqsubq_s16(v135, v138);
  v390 = vmlal_s16(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v149.i8, *(int16x4_t *)v101.i8);
  v384 = vmlal_high_s16(vmull_high_s16(v148, v102), v149, v101);
  v377 = vmlsl_high_s16(vmull_high_s16(v149, v102), v148, v101);
  v380 = vmlsl_s16(vmull_s16(*(int16x4_t *)v149.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v148.i8, *(int16x4_t *)v101.i8);
  v150 = vqsubq_s16(v134, v139);
  v151 = vqsubq_s16(v133, v140);
  v373 = vmlal_s16(vmull_s16(*(int16x4_t *)v150.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v151.i8, *(int16x4_t *)v101.i8);
  v404 = vmlal_high_s16(vmull_high_s16(v150, v102), v151, v101);
  v410 = vmlsl_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v150.i8, *(int16x4_t *)v101.i8);
  v407 = vmlsl_high_s16(vmull_high_s16(v151, v102), v150, v101);
  v152 = vqsubq_s16(v454, v487);
  v153 = vqsubq_s16(v456, v485);
  v154 = vmlal_s16(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v101.i8);
  v155 = vmlal_high_s16(vmull_high_s16(v152, v102), v153, v101);
  v156 = vmlsl_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v101.i8);
  v157 = vmlsl_high_s16(vmull_high_s16(v153, v102), v152, v101);
  v158 = vqsubq_s16(v433, v430);
  v159 = vqsubq_s16(v492, v489);
  v160 = vmlal_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v101.i8);
  v161 = vmlal_high_s16(vmull_high_s16(v158, v102), v159, v101);
  v162 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v158.i8, *(int16x4_t *)v101.i8);
  v163 = vmlsl_high_s16(vmull_high_s16(v159, v102), v158, v101);
  *(int16x4_t *)v158.i8 = vrshrn_n_s32(v447, 0xCuLL);
  *(int16x4_t *)v159.i8 = vrshrn_n_s32(v444, 0xCuLL);
  v419 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v158.i8, *(int16x4_t *)v101.i8);
  v422 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v158.i8, *(int16x4_t *)v132.i8);
  v425 = vrshrn_high_n_s32(*(int16x4_t *)v158.i8, v450, 0xCuLL);
  *(int16x4_t *)v109.i8 = vrshrn_n_s32(v450, 0xCuLL);
  v164 = vmlal_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v101.i8);
  v413 = vmlal_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v132.i8);
  v428 = vrshrn_high_n_s32(*(int16x4_t *)v159.i8, v452, 0xCuLL);
  *(int16x4_t *)v159.i8 = vrshrn_n_s32(v452, 0xCuLL);
  v165 = vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v102.i8);
  v166 = vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v102.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v101.i8);
  v393 = vmlsl_s16(v165, *(int16x4_t *)v109.i8, *(int16x4_t *)v101.i8);
  v448 = vrshrn_high_n_s32(vrshrn_n_s32(v141, 0xCuLL), v144, 0xCuLL);
  v445 = vrshrn_high_n_s32(vrshrn_n_s32(v143, 0xCuLL), v145, 0xCuLL);
  v341 = vrshrn_high_n_s32(vrshrn_n_s32(v395, 0xCuLL), v146, 0xCuLL);
  v343 = vrshrn_high_n_s32(vrshrn_n_s32(v398, 0xCuLL), v147, 0xCuLL);
  v366 = vrshrn_high_n_s32(vrshrn_n_s32(v370, 0xCuLL), v354, 0xCuLL);
  v357 = vrshrn_high_n_s32(vrshrn_n_s32(v368, 0xCuLL), v351, 0xCuLL);
  v439 = vrshrn_high_n_s32(vrshrn_n_s32(v272, 0xCuLL), v349, 0xCuLL);
  v442 = vrshrn_high_n_s32(vrshrn_n_s32(v266, 0xCuLL), v347, 0xCuLL);
  v453 = vqaddq_s16(v433, v430);
  v455 = vqaddq_s16(v454, v487);
  v451 = vqaddq_s16(v134, v139);
  v352 = vqaddq_s16(v136, v137);
  v355 = vqaddq_s16(v288, v274);
  v434 = vqaddq_s16(v301, v304);
  v469 = vqaddq_s16(v468, v324);
  v488 = vqaddq_s16(v482, v465);
  v396 = vqaddq_s16(v96, v479);
  v477 = vqaddq_s16(v327, v476);
  v483 = vqaddq_s16(v307, v310);
  v480 = vqaddq_s16(v290, v298);
  v259 = vqaddq_s16(v138, v135);
  v256 = vqaddq_s16(v140, v133);
  v345 = vqaddq_s16(v485, v456);
  v387 = vqaddq_s16(v489, v492);
  *(int16x4_t *)v485.i8 = vrshrn_n_s32(v164, 0xCuLL);
  v493 = vrshrn_high_n_s32(*(int16x4_t *)v485.i8, v166, 0xCuLL);
  *(int16x4_t *)v126.i8 = vrshrn_n_s32(v166, 0xCuLL);
  *(int16x4_t *)v147.i8 = vrshrn_n_s32(v393, 0xCuLL);
  v457 = vmlal_s16(vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v126.i8, *(int16x4_t *)v132.i8);
  v431 = vmlsl_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v147.i8, *(int16x4_t *)v132.i8);
  v466 = vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v132.i8);
  v490 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v132.i8);
  v263 = vrshrn_high_n_s32(vrshrn_n_s32(v390, 0xCuLL), v384, 0xCuLL);
  v371 = vrshrn_high_n_s32(vrshrn_n_s32(v380, 0xCuLL), v377, 0xCuLL);
  v273 = vrshrn_high_n_s32(vrshrn_n_s32(v373, 0xCuLL), v404, 0xCuLL);
  v399 = vrshrn_high_n_s32(vrshrn_n_s32(v410, 0xCuLL), v407, 0xCuLL);
  v289 = vrshrn_high_n_s32(vrshrn_n_s32(v154, 0xCuLL), v155, 0xCuLL);
  v405 = vrshrn_high_n_s32(vrshrn_n_s32(v156, 0xCuLL), v157, 0xCuLL);
  v299 = vrshrn_high_n_s32(vrshrn_n_s32(v160, 0xCuLL), v161, 0xCuLL);
  v411 = vrshrn_high_n_s32(vrshrn_n_s32(v162, 0xCuLL), v163, 0xCuLL);
  v408 = vrshrn_high_n_s32(vrshrn_n_s32(v338, 0xCuLL), v336, 0xCuLL);
  v302 = vrshrn_high_n_s32(vrshrn_n_s32(v330, 0xCuLL), v333, 0xCuLL);
  v391 = vrshrn_high_n_s32(vrshrn_n_s32(v322, 0xCuLL), v319, 0xCuLL);
  v291 = vrshrn_high_n_s32(vrshrn_n_s32(v313, 0xCuLL), v316, 0xCuLL);
  v385 = vrshrn_high_n_s32(vrshrn_n_s32(v295, 0xCuLL), v292, 0xCuLL);
  v258 = vrshrn_high_n_s32(vrshrn_n_s32(v284, 0xCuLL), v286, 0xCuLL);
  v337 = vrshrn_high_n_s32(vrshrn_n_s32(v278, 0xCuLL), v276, 0xCuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(v280, 0xCuLL), v282, 0xCuLL);
  v168 = vqsubq_s16(v343, v366);
  v169 = vqsubq_s16(v341, v357);
  v381 = vmlal_s16(vmull_s16(*(int16x4_t *)v168.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v169.i8, *(int16x4_t *)v132.i8);
  v374 = vmlal_high_s16(vmull_high_s16(v168, v132), v169, v132);
  v360 = vmlsl_high_s16(vmull_high_s16(v169, v132), v168, v132);
  v363 = vmlsl_s16(vmull_s16(*(int16x4_t *)v169.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v168.i8, *(int16x4_t *)v132.i8);
  v170 = vqsubq_s16(v445, v439);
  v171 = vqsubq_s16(v448, v442);
  v339 = vmlal_s16(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v171.i8, *(int16x4_t *)v132.i8);
  v334 = vmlal_high_s16(vmull_high_s16(v170, v132), v171, v132);
  v328 = vmlsl_high_s16(vmull_high_s16(v171, v132), v170, v132);
  v331 = vmlsl_s16(vmull_s16(*(int16x4_t *)v171.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v170.i8, *(int16x4_t *)v132.i8);
  v172 = vqsubq_s16(v268, v460);
  v173 = vqsubq_s16(v270, v436);
  v325 = vmlal_s16(vmull_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v173.i8, *(int16x4_t *)v132.i8);
  v174 = vmlsl_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v172.i8, *(int16x4_t *)v132.i8);
  v320 = vmlsl_high_s16(vmull_high_s16(v173, v132), v172, v132);
  v323 = vmlal_high_s16(vmull_high_s16(v172, v132), v173, v132);
  v175 = vqsubq_s16(v474, v416);
  v176 = vqsubq_s16(v471, v463);
  v317 = vmlal_s16(vmull_s16(*(int16x4_t *)v175.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v176.i8, *(int16x4_t *)v132.i8);
  v177 = vmlsl_s16(vmull_s16(*(int16x4_t *)v176.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v175.i8, *(int16x4_t *)v132.i8);
  v311 = vmlsl_high_s16(vmull_high_s16(v176, v132), v175, v132);
  v314 = vmlal_high_s16(vmull_high_s16(v175, v132), v176, v132);
  v178 = vqsubq_s16(v411, v408);
  v179 = vqsubq_s16(v299, v302);
  v305 = vmlal_s16(vmull_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v179.i8, *(int16x4_t *)v132.i8);
  v308 = vmlal_high_s16(vmull_high_s16(v178, v132), v179, v132);
  v378 = vmlsl_s16(vmull_s16(*(int16x4_t *)v179.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v178.i8, *(int16x4_t *)v132.i8);
  v369 = vmlsl_high_s16(vmull_high_s16(v179, v132), v178, v132);
  v180 = vqsubq_s16(v405, v391);
  v181 = vqsubq_s16(v289, v291);
  v296 = vmlal_s16(vmull_s16(*(int16x4_t *)v180.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v181.i8, *(int16x4_t *)v132.i8);
  v293 = vmlal_high_s16(vmull_high_s16(v180, v132), v181, v132);
  v348 = vmlsl_high_s16(vmull_high_s16(v181, v132), v180, v132);
  v350 = vmlsl_s16(vmull_s16(*(int16x4_t *)v181.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v180.i8, *(int16x4_t *)v132.i8);
  v182 = vqsubq_s16(v399, v385);
  v183 = vqsubq_s16(v273, v258);
  v281 = vmlal_s16(vmull_s16(*(int16x4_t *)v182.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v183.i8, *(int16x4_t *)v132.i8);
  v287 = vmlal_high_s16(vmull_high_s16(v182, v132), v183, v132);
  v283 = vmlsl_high_s16(vmull_high_s16(v183, v132), v182, v132);
  v285 = vmlsl_s16(vmull_s16(*(int16x4_t *)v183.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v182.i8, *(int16x4_t *)v132.i8);
  v184 = vqsubq_s16(v371, v337);
  v185 = vqsubq_s16(v263, v167);
  v186 = v167;
  v265 = vmlal_s16(vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v185.i8, *(int16x4_t *)v132.i8);
  v275 = vmlal_high_s16(vmull_high_s16(v184, v132), v185, v132);
  v277 = vmlsl_high_s16(vmull_high_s16(v185, v132), v184, v132);
  v279 = vmlsl_s16(vmull_s16(*(int16x4_t *)v185.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v184.i8, *(int16x4_t *)v132.i8);
  v187 = vqsubq_s16(v352, v355);
  v188 = vqsubq_s16(v259, v480);
  v267 = vmlal_s16(vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v188.i8, *(int16x4_t *)v132.i8);
  v264 = vmlal_high_s16(vmull_high_s16(v187, v132), v188, v132);
  v189 = vmlsl_s16(vmull_s16(*(int16x4_t *)v188.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v132.i8);
  v262 = vmlsl_high_s16(vmull_high_s16(v188, v132), v187, v132);
  v190 = vqsubq_s16(v451, v434);
  v191 = vqsubq_s16(v256, v483);
  v257 = vmlal_s16(vmull_s16(*(int16x4_t *)v190.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v191.i8, *(int16x4_t *)v132.i8);
  v260 = v189;
  v261 = vmlal_high_s16(vmull_high_s16(v190, v132), v191, v132);
  v192 = vmlsl_s16(vmull_s16(*(int16x4_t *)v191.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v190.i8, *(int16x4_t *)v132.i8);
  v193 = vmlsl_high_s16(vmull_high_s16(v191, v132), v190, v132);
  v194 = vqsubq_s16(v455, v469);
  v195 = vqsubq_s16(v345, v477);
  v196 = vmlal_s16(vmull_s16(*(int16x4_t *)v194.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v132.i8);
  v197 = vmlal_high_s16(vmull_high_s16(v194, v132), v195, v132);
  v198 = vmlsl_s16(vmull_s16(*(int16x4_t *)v195.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v194.i8, *(int16x4_t *)v132.i8);
  v199 = vmlsl_high_s16(vmull_high_s16(v195, v132), v194, v132);
  v200 = vqsubq_s16(v453, v488);
  v201 = vqsubq_s16(v387, v396);
  v202 = vmlal_s16(vmull_s16(*(int16x4_t *)v200.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v201.i8, *(int16x4_t *)v132.i8);
  v203 = vmlal_high_s16(vmull_high_s16(v200, v132), v201, v132);
  v204 = vmlsl_s16(vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v132.i8);
  v205 = vmlsl_high_s16(vmull_high_s16(v201, v132), v200, v132);
  *(int16x4_t *)v189.i8 = vrshrn_n_s32(v419, 0xCuLL);
  v206 = vmlal_s16(vmull_s16(*(int16x4_t *)v189.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v485.i8, *(int16x4_t *)v132.i8);
  v207 = vmlsl_s16(vmull_s16(*(int16x4_t *)v485.i8, *(int16x4_t *)v132.i8), *(int16x4_t *)v189.i8, *(int16x4_t *)v132.i8);
  v208 = vrshrn_high_n_s32(*(int16x4_t *)v189.i8, v393, 0xCuLL);
  v209 = vrshrn_high_n_s32(vrshrn_n_s32(v206, 0xCuLL), v457, 0xCuLL);
  v210 = vrshrn_high_n_s32(vrshrn_n_s32(v207, 0xCuLL), v431, 0xCuLL);
  v211 = vrshrn_high_n_s32(vrshrn_n_s32(v413, 0xCuLL), v466, 0xCuLL);
  v212 = vrshrn_high_n_s32(vrshrn_n_s32(v422, 0xCuLL), v490, 0xCuLL);
  v213 = vqaddq_s16(v474, v416);
  v214 = vqaddq_s16(v268, v460);
  v269 = vqaddq_s16(v445, v439);
  v344 = vqaddq_s16(v343, v366);
  v446 = vqaddq_s16(v341, v357);
  v449 = vqaddq_s16(v448, v442);
  v458 = vqaddq_s16(v270, v436);
  v461 = vqaddq_s16(v471, v463);
  v215 = vrshrn_high_n_s32(vrshrn_n_s32(v381, 0xCuLL), v374, 0xCuLL);
  v216 = vrshrn_high_n_s32(vrshrn_n_s32(v363, 0xCuLL), v360, 0xCuLL);
  v217 = vrshrn_high_n_s32(vrshrn_n_s32(v339, 0xCuLL), v334, 0xCuLL);
  v218 = vrshrn_high_n_s32(vrshrn_n_s32(v331, 0xCuLL), v328, 0xCuLL);
  v219 = vrshrn_high_n_s32(vrshrn_n_s32(v325, 0xCuLL), v323, 0xCuLL);
  v220 = vrshrn_high_n_s32(vrshrn_n_s32(v174, 0xCuLL), v320, 0xCuLL);
  v221 = vrshrn_high_n_s32(vrshrn_n_s32(v317, 0xCuLL), v314, 0xCuLL);
  v222 = vrshrn_high_n_s32(vrshrn_n_s32(v177, 0xCuLL), v311, 0xCuLL);
  v382 = vqaddq_s16(v401, v425);
  v361 = vqsubq_s16(v401, v425);
  v375 = vqaddq_s16(v401, v208);
  v342 = vqsubq_s16(v401, v208);
  v364 = vqaddq_s16(v401, v210);
  v335 = vqsubq_s16(v401, v210);
  v358 = vqaddq_s16(v401, v212);
  v321 = vqsubq_s16(v401, v212);
  v437 = vqaddq_s16(v401, v211);
  v271 = vqsubq_s16(v401, v211);
  v440 = vqaddq_s16(v401, v209);
  v255 = vqsubq_s16(v401, v209);
  v467 = vqaddq_s16(v401, v493);
  v223 = vqsubq_s16(v401, v493);
  v464 = vqaddq_s16(v401, v428);
  v224 = vqsubq_s16(v401, v428);
  v486 = vqaddq_s16(v299, v302);
  v491 = vqaddq_s16(v289, v291);
  v494 = vqaddq_s16(v273, v258);
  v402 = vqaddq_s16(v263, v186);
  v414 = vqaddq_s16(v259, v480);
  v417 = vqaddq_s16(v256, v483);
  v420 = vqaddq_s16(v345, v477);
  v426 = vqaddq_s16(v387, v396);
  v443 = vrshrn_high_n_s32(vrshrn_n_s32(v305, 0xCuLL), v308, 0xCuLL);
  v484 = vrshrn_high_n_s32(vrshrn_n_s32(v296, 0xCuLL), v293, 0xCuLL);
  v481 = vrshrn_high_n_s32(vrshrn_n_s32(v281, 0xCuLL), v287, 0xCuLL);
  v478 = vrshrn_high_n_s32(vrshrn_n_s32(v265, 0xCuLL), v275, 0xCuLL);
  v475 = vrshrn_high_n_s32(vrshrn_n_s32(v279, 0xCuLL), v277, 0xCuLL);
  v326 = vrshrn_high_n_s32(vrshrn_n_s32(v267, 0xCuLL), v264, 0xCuLL);
  v225 = vrshrn_high_n_s32(vrshrn_n_s32(v260, 0xCuLL), v262, 0xCuLL);
  v226 = vrshrn_high_n_s32(vrshrn_n_s32(v192, 0xCuLL), v193, 0xCuLL);
  v472 = vrshrn_high_n_s32(vrshrn_n_s32(v196, 0xCuLL), v197, 0xCuLL);
  v227 = vrshrn_high_n_s32(vrshrn_n_s32(v198, 0xCuLL), v199, 0xCuLL);
  v228 = vrshrn_high_n_s32(vrshrn_n_s32(v202, 0xCuLL), v203, 0xCuLL);
  v229 = vrshrn_high_n_s32(vrshrn_n_s32(v204, 0xCuLL), v205, 0xCuLL);
  v303 = vqsubq_s16(v224, v213);
  v306 = vqaddq_s16(v224, v213);
  v315 = vqaddq_s16(v223, v214);
  v318 = vrshrn_high_n_s32(vrshrn_n_s32(v257, 0xCuLL), v261, 0xCuLL);
  v432 = vqsubq_s16(v223, v214);
  v429 = vqaddq_s16(v464, v461);
  v423 = vqaddq_s16(v467, v458);
  *a2 = vqaddq_s16(v429, v426);
  a2[1] = vqaddq_s16(v423, v420);
  v394 = vqaddq_s16(v437, v446);
  v397 = vqaddq_s16(v440, v449);
  a2[2] = vqaddq_s16(v397, v417);
  a2[3] = vqaddq_s16(v394, v414);
  v388 = vqaddq_s16(v358, v215);
  v367 = vqaddq_s16(v364, v217);
  a2[4] = vqaddq_s16(v388, v402);
  a2[5] = vqaddq_s16(v367, v494);
  v346 = vqaddq_s16(v375, v219);
  v340 = vqaddq_s16(v382, v221);
  a2[6] = vqaddq_s16(v346, v491);
  a2[7] = vqaddq_s16(v340, v486);
  v329 = vqaddq_s16(v342, v220);
  v332 = vqaddq_s16(v361, v222);
  a2[8] = vqaddq_s16(v332, v443);
  a2[9] = vqaddq_s16(v329, v484);
  v309 = vqaddq_s16(v321, v216);
  v312 = vqaddq_s16(v335, v218);
  a2[10] = vqaddq_s16(v312, v481);
  a2[11] = vqaddq_s16(v309, v478);
  v297 = vqaddq_s16(v255, v269);
  v300 = vqaddq_s16(v271, v344);
  a2[12] = vqaddq_s16(v300, v326);
  a2[13] = vqaddq_s16(v297, v318);
  v294 = vqsubq_s16(v255, v269);
  a2[14] = vqaddq_s16(v315, v472);
  a2[15] = vqaddq_s16(v306, v228);
  v230 = vqsubq_s16(v271, v344);
  a2[16] = vqaddq_s16(v303, v229);
  a2[17] = vqaddq_s16(v432, v227);
  v231 = vqsubq_s16(v321, v216);
  a2[18] = vqaddq_s16(v294, v226);
  a2[19] = vqaddq_s16(v230, v225);
  v232 = vqsubq_s16(v335, v218);
  v233 = vrshrn_high_n_s32(vrshrn_n_s32(v285, 0xCuLL), v283, 0xCuLL);
  a2[20] = vqaddq_s16(v231, v475);
  a2[21] = vqaddq_s16(v232, v233);
  v234 = vrshrn_high_n_s32(vrshrn_n_s32(v378, 0xCuLL), v369, 0xCuLL);
  v235 = vrshrn_high_n_s32(vrshrn_n_s32(v350, 0xCuLL), v348, 0xCuLL);
  v236 = vqsubq_s16(v342, v220);
  v237 = vqsubq_s16(v361, v222);
  a2[22] = vqaddq_s16(v236, v235);
  a2[23] = vqaddq_s16(v237, v234);
  v238 = vqaddq_s16(v405, v391);
  v239 = vqaddq_s16(v411, v408);
  v240 = vqsubq_s16(v382, v221);
  v241 = vqsubq_s16(v375, v219);
  a2[24] = vqaddq_s16(v240, v239);
  a2[25] = vqaddq_s16(v241, v238);
  v242 = vqaddq_s16(v371, v337);
  v243 = vqaddq_s16(v399, v385);
  v244 = vqsubq_s16(v364, v217);
  v245 = vqsubq_s16(v358, v215);
  a2[26] = vqaddq_s16(v244, v243);
  a2[27] = vqaddq_s16(v245, v242);
  v246 = vqaddq_s16(v451, v434);
  v247 = vqaddq_s16(v352, v355);
  v248 = vqsubq_s16(v437, v446);
  v249 = vqsubq_s16(v440, v449);
  a2[28] = vqaddq_s16(v248, v247);
  a2[29] = vqaddq_s16(v249, v246);
  v250 = vqaddq_s16(v453, v488);
  v251 = vqaddq_s16(v455, v469);
  v252 = vqsubq_s16(v467, v458);
  v253 = vqsubq_s16(v464, v461);
  a2[30] = vqaddq_s16(v252, v251);
  a2[31] = vqaddq_s16(v253, v250);
  a2[32] = vqsubq_s16(v253, v250);
  a2[33] = vqsubq_s16(v252, v251);
  a2[34] = vqsubq_s16(v249, v246);
  a2[35] = vqsubq_s16(v248, v247);
  a2[36] = vqsubq_s16(v245, v242);
  a2[37] = vqsubq_s16(v244, v243);
  a2[38] = vqsubq_s16(v241, v238);
  a2[39] = vqsubq_s16(v240, v239);
  a2[40] = vqsubq_s16(v237, v234);
  a2[41] = vqsubq_s16(v236, v235);
  a2[42] = vqsubq_s16(v232, v233);
  a2[43] = vqsubq_s16(v231, v475);
  a2[44] = vqsubq_s16(v230, v225);
  a2[45] = vqsubq_s16(v294, v226);
  a2[46] = vqsubq_s16(v432, v227);
  a2[47] = vqsubq_s16(v303, v229);
  a2[48] = vqsubq_s16(v306, v228);
  a2[49] = vqsubq_s16(v315, v472);
  a2[50] = vqsubq_s16(v297, v318);
  a2[51] = vqsubq_s16(v300, v326);
  a2[52] = vqsubq_s16(v309, v478);
  a2[53] = vqsubq_s16(v312, v481);
  a2[54] = vqsubq_s16(v329, v484);
  a2[55] = vqsubq_s16(v332, v443);
  a2[56] = vqsubq_s16(v340, v486);
  a2[57] = vqsubq_s16(v346, v491);
  a2[58] = vqsubq_s16(v367, v494);
  a2[59] = vqsubq_s16(v388, v402);
  a2[60] = vqsubq_s16(v394, v414);
  a2[61] = vqsubq_s16(v397, v417);
  result = vqsubq_s16(v423, v420);
  a2[62] = result;
  a2[63] = vqsubq_s16(v429, v426);
  return result;
}

int16x8_t idct64_low16_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  const __int16 *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int32x4_t v10;
  int32x4_t v11;
  const __int16 *v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x4_t v16;
  unsigned int v17;
  int16x4_t v18;
  const __int16 *v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  const __int16 *v24;
  int16x8_t v25;
  int32x4_t v26;
  int32x4_t v27;
  unsigned int v28;
  int16x4_t v29;
  int16x4_t v30;
  unsigned int v31;
  int16x4_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t v35;
  const __int16 *v36;
  int32x4_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  const __int16 *v41;
  int16x8_t v42;
  const __int16 *v43;
  int16x8_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  const __int16 *v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  const __int16 *v80;
  const __int16 *v81;
  int16x8_t v82;
  int16x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int16x8_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int16x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int16x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  const __int16 *v96;
  int16x8_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int16x4_t v104;
  int16x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  const __int16 *v110;
  const __int16 *v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  const __int16 *v115;
  const __int16 *v116;
  int16x8_t v117;
  int16x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int16x8_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int32x4_t v128;
  int16x8_t v129;
  int16x8_t v130;
  const __int16 *v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int16x8_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int16x8_t v144;
  int16x8_t v145;
  const __int16 *v146;
  int16x8_t v147;
  int16x8_t v148;
  int32x4_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int32x4_t v178;
  int16x8_t v179;
  int32x4_t v180;
  int16x8_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int16x8_t v184;
  int32x4_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x4_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int16x4_t v195;
  int32x4_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  unsigned int v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int32x4_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int32x4_t v218;
  int16x8_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  int16x8_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int16x8_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int16x8_t v263;
  int16x8_t v264;
  const __int16 *v265;
  int16x8_t v266;
  int32x4_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int32x4_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int32x4_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int16x8_t v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int16x8_t v363;
  int16x8_t v364;
  int16x8_t v365;
  int16x8_t result;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int16x8_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int32x4_t v403;
  int16x8_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int16x8_t v416;
  int32x4_t v417;
  int16x8_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int16x8_t v426;
  int32x4_t v427;
  int16x8_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int32x4_t v433;
  int16x8_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int32x4_t v440;
  int16x8_t v441;
  int16x8_t v442;
  int32x4_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int32x4_t v446;
  int16x8_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int16x8_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int16x8_t v454;
  int16x8_t v455;
  int16x8_t v456;
  int16x8_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int16x8_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int16x8_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int32x4_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int16x8_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int16x8_t v478;
  int32x4_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int32x4_t v482;
  int16x8_t v483;
  int32x4_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int32x4_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int16x8_t v495;
  int16x8_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int16x8_t v500;
  int32x4_t v501;
  int16x8_t v502;
  int32x4_t v503;
  int32x4_t v504;
  int32x4_t v505;
  int16x8_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int16x8_t v510;
  int32x4_t v511;
  int16x8_t v512;
  int16x8_t v513;
  int32x4_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int16x8_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int16x8_t v525;
  int16x8_t v526;
  int32x4_t v527;
  int16x8_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int16x8_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int16x8_t v539;
  int16x8_t v540;
  int16x8_t v541;
  int32x4_t v542;
  int16x8_t v543;
  int16x8_t v544;
  int32x4_t v545;
  int16x8_t v546;
  int16x8_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int16x8_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int16x8_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int16x8_t v559;
  int32x4_t v560;
  int16x8_t v561;
  int16x8_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int16x8_t v565;
  int32x4_t v566;
  int16x8_t v567;
  int32x4_t v568;
  int16x8_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int16x8_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int16x8_t v575;
  int32x4_t v576;
  int16x8_t v577;
  int16x8_t v578;
  int16x8_t v579;
  int16x8_t v580;
  int16x8_t v581;
  int16x8_t v582;
  int16x8_t v583;
  int16x8_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int16x8_t v589;
  int16x8_t v590;
  int16x8_t v591;
  int16x8_t v592;
  int16x8_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int32x4_t v598;
  int16x8_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int16x8_t v604;
  int16x8_t v605;
  int16x8_t v606;
  int32x4_t v607;
  int16x8_t v608;
  int16x8_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int16x8_t v612;
  int32x4_t v613;
  int16x8_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int32x4_t v617;
  int16x8_t v618;
  int16x8_t v619;
  int32x4_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int16x8_t v623;
  int16x8_t v624;
  int16x8_t v625;
  int32x4_t v626;
  int16x8_t v627;
  int16x8_t v628;
  int32x4_t v629;
  int16x8_t v630;
  int16x8_t v631;
  int32x4_t v632;
  int16x8_t v633;
  int16x8_t v634;
  int32x4_t v635;
  int16x8_t v636;
  int16x8_t v637;
  int16x8_t v638;
  int32x4_t v639;
  int16x8_t v640;
  int16x8_t v641;
  int32x4_t v642;
  int16x8_t v643;
  int16x8_t v644;
  int16x8_t v645;
  int16x8_t v646;
  int16x8_t v647;
  int16x8_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int16x8_t v651;
  int16x8_t v652;
  int16x8_t v653;
  int16x8_t v654;
  int32x4_t v655;
  int16x8_t v656;
  int16x8_t v657;
  int16x8_t v658;
  int16x8_t v659;
  int16x8_t v660;
  int16x8_t v661;
  int16x8_t v662;
  int16x8_t v663;
  int16x8_t v664;
  int16x8_t v665;
  int16x8_t v666;
  int16x8_t v667;
  int16x8_t v668;
  int16x8_t v669;
  int16x8_t v670;
  int16x8_t v671;
  int16x8_t v672;
  int16x8_t v673;
  int16x8_t v674;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 577];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 16);
  v635 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8);
  v629 = vmull_high_s16(v5, v4);
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 639];
  v7 = vld1q_dup_s16(v6);
  v632 = vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v7.i8);
  v620 = vmull_high_s16(v5, v7);
  v8 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 591]));
  v9 = *(int16x8_t *)(a1 + 240);
  v10 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8);
  v11 = vmull_high_s16(v9, v8);
  v12 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 625];
  v13 = vld1q_dup_s16(v12);
  v14 = vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v13.i8);
  v15 = vmull_high_s16(v9, v13);
  v16 = vrshrn_n_s32(v10, 0xCuLL);
  *(int16x4_t *)v9.i8 = vrshrn_n_s32(v11, 0xCuLL);
  *(int16x4_t *)v10.i8 = vrshrn_n_s32(v14, 0xCuLL);
  *(int16x4_t *)v13.i8 = vrshrn_n_s32(v15, 0xCuLL);
  LODWORD(v12) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 580]);
  *(int16x4_t *)v14.i8 = vdup_n_s16(-(int)v12);
  v17 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 636]);
  v18 = vdup_n_s16(-v17);
  v598 = vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, v18), v16, *(int16x4_t *)v14.i8);
  v606 = vrshrn_high_n_s32(v16, v11, 0xCuLL);
  v594 = vmlsl_s16(vmull_s16(v16, v18), *(int16x4_t *)v10.i8, *(int16x4_t *)v14.i8);
  v602 = vrshrn_high_n_s32(*(int16x4_t *)v10.i8, v15, 0xCuLL);
  v19 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 585];
  v20 = vld1q_dup_s16(v19);
  v21 = *(int16x8_t *)(a1 + 144);
  v22 = vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v20.i8);
  v23 = vmull_high_s16(v21, v20);
  v24 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 631];
  v25 = vld1q_dup_s16(v24);
  v26 = vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v25.i8);
  v27 = vmull_high_s16(v21, v25);
  *(int16x4_t *)v22.i8 = vrshrn_n_s32(v22, 0xCuLL);
  *(int16x4_t *)v25.i8 = vrshrn_n_s32(v23, 0xCuLL);
  *(int16x4_t *)v26.i8 = vrshrn_n_s32(v26, 0xCuLL);
  v28 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 604]);
  v29 = vrshrn_n_s32(v27, 0xCuLL);
  v30 = vdup_n_s16(v28);
  v31 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 612]);
  v32 = vdup_n_s16(v31);
  LODWORD(v24) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 620]);
  v642 = vmlsl_s16(vmull_s16(*(int16x4_t *)v26.i8, v32), *(int16x4_t *)v22.i8, v30);
  v664 = vrshrn_high_n_s32(*(int16x4_t *)v22.i8, v23, 0xCuLL);
  v639 = vmlal_s16(vmull_s16(*(int16x4_t *)v22.i8, v32), *(int16x4_t *)v26.i8, v30);
  v661 = vrshrn_high_n_s32(*(int16x4_t *)v26.i8, v27, 0xCuLL);
  v33 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 583]));
  v34 = *(int16x8_t *)(a1 + 112);
  v35 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v33.i8);
  v36 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 633];
  v37 = vmull_high_s16(v34, v33);
  v38 = vld1q_dup_s16(v36);
  v39 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v38.i8);
  v40 = vmull_high_s16(v34, v38);
  v41 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 581];
  v42 = vld1q_dup_s16(v41);
  v43 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 635];
  v44 = vld1q_dup_s16(v43);
  LODWORD(v43) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 596]);
  v45 = vrshrn_n_s32(v35, 0xCuLL);
  v46 = vrshrn_n_s32(v39, 0xCuLL);
  v47 = *(int16x8_t *)(a1 + 80);
  v48 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v42.i8);
  v49 = vmull_high_s16(v47, v42);
  v50 = vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v44.i8);
  v51 = vmull_high_s16(v47, v44);
  v52 = vmull_s16(*(int16x4_t *)v9.i8, v18);
  v576 = vmlal_s16(vmull_s16(*(int16x4_t *)v13.i8, v18), *(int16x4_t *)v9.i8, *(int16x4_t *)v14.i8);
  *(int16x4_t *)v9.i8 = vdup_n_s16(-v31);
  v53 = vdup_n_s16(-v28);
  v570 = vmlal_s16(vmull_s16(v46, v53), v45, *(int16x4_t *)v9.i8);
  v657 = vrshrn_high_n_s32(v45, v37, 0xCuLL);
  *(int16x4_t *)v37.i8 = vrshrn_n_s32(v37, 0xCuLL);
  v566 = vmlsl_s16(vmull_s16(v45, v53), v46, *(int16x4_t *)v9.i8);
  v654 = vrshrn_high_n_s32(v46, v40, 0xCuLL);
  *(int16x4_t *)v40.i8 = vrshrn_n_s32(v40, 0xCuLL);
  v54 = vrshrn_n_s32(v48, 0xCuLL);
  v55 = vrshrn_n_s32(v50, 0xCuLL);
  v573 = vmlsl_s16(v52, *(int16x4_t *)v13.i8, *(int16x4_t *)v14.i8);
  v56 = vmlal_s16(vmull_s16(*(int16x4_t *)v25.i8, v32), v29, v30);
  v57 = vmlsl_s16(vmull_s16(v29, v32), *(int16x4_t *)v25.i8, v30);
  v58 = vmull_s16(*(int16x4_t *)v37.i8, v53);
  v59 = vmlal_s16(vmull_s16(*(int16x4_t *)v40.i8, v53), *(int16x4_t *)v37.i8, *(int16x4_t *)v9.i8);
  *(int16x4_t *)v13.i8 = vdup_n_s16(v24);
  *(int16x4_t *)v37.i8 = vdup_n_s16(v43);
  v60 = vmlsl_s16(vmull_s16(v55, *(int16x4_t *)v37.i8), v54, *(int16x4_t *)v13.i8);
  v667 = vrshrn_high_n_s32(v54, v49, 0xCuLL);
  *(int16x4_t *)v14.i8 = vrshrn_n_s32(v49, 0xCuLL);
  v61 = vmlal_s16(vmull_s16(v54, *(int16x4_t *)v37.i8), v55, *(int16x4_t *)v13.i8);
  v540 = vrshrn_high_n_s32(v55, v51, 0xCuLL);
  *(int16x4_t *)v51.i8 = vrshrn_n_s32(v51, 0xCuLL);
  v62 = vmlsl_s16(v58, *(int16x4_t *)v40.i8, *(int16x4_t *)v9.i8);
  v63 = *(int16x8_t *)(a1 + 176);
  v64 = vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v37.i8);
  v65 = vmlal_s16(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v37.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v13.i8);
  v66 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 587]));
  v67 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 629];
  v68 = vmlsl_s16(v64, *(int16x4_t *)v14.i8, *(int16x4_t *)v13.i8);
  v69 = vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v66.i8);
  v70 = vmull_high_s16(v63, v66);
  v71 = vld1q_dup_s16(v67);
  v72 = vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v71.i8);
  v73 = vmull_high_s16(v63, v71);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v69, 0xCuLL);
  v74 = vrshrn_n_s32(v72, 0xCuLL);
  *(int16x4_t *)v72.i8 = vdup_n_s16(-(int)v43);
  *(int16x4_t *)v14.i8 = vdup_n_s16(-(int)v24);
  v75 = vmlal_s16(vmull_s16(v74, *(int16x4_t *)v14.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v72.i8);
  v76 = vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v14.i8);
  v525 = vrshrn_high_n_s32(*(int16x4_t *)v69.i8, v70, 0xCuLL);
  *(int16x4_t *)v69.i8 = vrshrn_n_s32(v70, 0xCuLL);
  *(int16x4_t *)v70.i8 = vrshrn_n_s32(v73, 0xCuLL);
  v77 = vmlal_s16(vmull_s16(*(int16x4_t *)v70.i8, *(int16x4_t *)v14.i8), *(int16x4_t *)v69.i8, *(int16x4_t *)v72.i8);
  v78 = vmlsl_s16(vmull_s16(*(int16x4_t *)v69.i8, *(int16x4_t *)v14.i8), *(int16x4_t *)v70.i8, *(int16x4_t *)v72.i8);
  v79 = vmlsl_s16(v76, v74, *(int16x4_t *)v72.i8);
  v537 = vrshrn_high_n_s32(v74, v73, 0xCuLL);
  v80 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 589];
  v81 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 627];
  v82 = *(int16x8_t *)(a1 + 208);
  v83 = vld1q_dup_s16(v80);
  v84 = vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v83.i8);
  v85 = vmull_high_s16(v82, v83);
  v86 = vld1q_dup_s16(v81);
  v87 = vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v86.i8);
  v88 = vmull_high_s16(v82, v86);
  LODWORD(v80) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]);
  LODWORD(v81) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 628]);
  *(int16x4_t *)v82.i8 = vrshrn_n_s32(v84, 0xCuLL);
  v670 = vrshrn_high_n_s32(*(int16x4_t *)v82.i8, v85, 0xCuLL);
  *(int16x4_t *)v85.i8 = vrshrn_n_s32(v85, 0xCuLL);
  *(int16x4_t *)v86.i8 = vrshrn_n_s32(v88, 0xCuLL);
  v625 = vdupq_n_s16(v81);
  v89 = vdup_n_s16(v80);
  v90 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v625.i8), *(int16x4_t *)v86.i8, v89);
  v91 = vmlsl_s16(vmull_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v625.i8), *(int16x4_t *)v85.i8, v89);
  v92 = vrshrn_n_s32(v87, 0xCuLL);
  v93 = vmlsl_s16(vmull_s16(v92, *(int16x4_t *)v625.i8), *(int16x4_t *)v82.i8, v89);
  v94 = vmlal_s16(vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v625.i8), v92, v89);
  v95 = vrshrn_high_n_s32(v92, v88, 0xCuLL);
  v96 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 637];
  v97 = *(int16x8_t *)(a1 + 48);
  v98 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 579]));
  v99 = vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v98.i8);
  v100 = vld1q_dup_s16(v96);
  v101 = vmull_high_s16(v97, v98);
  v102 = vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v100.i8);
  v103 = vmull_high_s16(v97, v100);
  v104 = vrshrn_n_s32(v99, 0xCuLL);
  v492 = vrshrn_high_n_s32(v104, v101, 0xCuLL);
  v495 = v95;
  *(int16x4_t *)v97.i8 = vrshrn_n_s32(v101, 0xCuLL);
  *(int16x4_t *)v101.i8 = vrshrn_n_s32(v103, 0xCuLL);
  v616 = vdupq_n_s16(-(int)v80);
  v105 = vdup_n_s16(-(int)v81);
  v106 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v616.i8), *(int16x4_t *)v97.i8, v105);
  v107 = vmlsl_s16(vmull_s16(*(int16x4_t *)v97.i8, *(int16x4_t *)v616.i8), *(int16x4_t *)v101.i8, v105);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(v102, 0xCuLL);
  v108 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v616.i8), v104, v105);
  v109 = vmlsl_s16(vmull_s16(v104, *(int16x4_t *)v616.i8), *(int16x4_t *)v102.i8, v105);
  v489 = vrshrn_high_n_s32(*(int16x4_t *)v102.i8, v103, 0xCuLL);
  v110 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v111 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v112 = *(int16x8_t *)(a1 + 32);
  v113 = vld1q_dup_s16(v110);
  v563 = vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v113.i8);
  v557 = vmull_high_s16(v112, v113);
  v114 = vld1q_dup_s16(v111);
  v553 = vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v114.i8);
  v560 = vmull_high_s16(v112, v114);
  v115 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v116 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v117 = *(int16x8_t *)(a1 + 160);
  v118 = vld1q_dup_s16(v115);
  v119 = vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v118.i8);
  v120 = vmull_high_s16(v117, v118);
  v121 = vld1q_dup_s16(v116);
  v122 = vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v121.i8);
  v123 = vmull_high_s16(v117, v121);
  v580 = vrshrn_high_n_s32(vrshrn_n_s32(v61, 0xCuLL), v65, 0xCuLL);
  v586 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xCuLL), v68, 0xCuLL);
  v590 = vrshrn_high_n_s32(vrshrn_n_s32(v75, 0xCuLL), v77, 0xCuLL);
  v583 = vrshrn_high_n_s32(vrshrn_n_s32(v79, 0xCuLL), v78, 0xCuLL);
  LODWORD(v115) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  LODWORD(v116) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  *(int16x4_t *)v60.i8 = vrshrn_n_s32(v119, 0xCuLL);
  v673 = vrshrn_high_n_s32(*(int16x4_t *)v60.i8, v120, 0xCuLL);
  *(int16x4_t *)v65.i8 = vrshrn_n_s32(v120, 0xCuLL);
  *(int16x4_t *)v75.i8 = vrshrn_n_s32(v123, 0xCuLL);
  v124 = vdupq_n_s16(v115);
  v125 = vdupq_n_s16(v116);
  v613 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v75.i8, *(int16x4_t *)v124.i8);
  v610 = vmlsl_s16(vmull_s16(*(int16x4_t *)v75.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v124.i8);
  v126 = vqsubq_s16(v586, v590);
  v127 = vqsubq_s16(v580, v583);
  v550 = vmlal_s16(vmull_s16(*(int16x4_t *)v126.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v127.i8, *(int16x4_t *)v124.i8);
  v548 = vmlal_high_s16(vmull_high_s16(v126, v125), v127, v124);
  v545 = vmlsl_s16(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v126.i8, *(int16x4_t *)v124.i8);
  v542 = vmlsl_high_s16(vmull_high_s16(v127, v125), v126, v124);
  *(int16x4_t *)v122.i8 = vrshrn_n_s32(v122, 0xCuLL);
  v514 = vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v60.i8, *(int16x4_t *)v124.i8);
  v128 = vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v125.i8);
  v129 = vqsubq_s16(v667, v525);
  v130 = vqsubq_s16(v540, v537);
  v533 = vmlal_s16(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v130.i8, *(int16x4_t *)v124.i8);
  v521 = vmlal_high_s16(vmull_high_s16(v129, v125), v130, v124);
  v529 = vmlsl_s16(vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v125.i8), *(int16x4_t *)v129.i8, *(int16x4_t *)v124.i8);
  v517 = vmlsl_high_s16(vmull_high_s16(v130, v125), v129, v124);
  v511 = vmlal_s16(v128, *(int16x4_t *)v122.i8, *(int16x4_t *)v124.i8);
  v652 = vrshrn_high_n_s32(*(int16x4_t *)v122.i8, v123, 0xCuLL);
  v131 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v132 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 582]));
  v133 = *(int16x8_t *)(a1 + 96);
  v134 = vmull_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v132.i8);
  v135 = vmull_high_s16(v133, v132);
  v136 = vld1q_dup_s16(v131);
  v137 = vmull_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v136.i8);
  v138 = vmull_high_s16(v133, v136);
  v454 = vrshrn_high_n_s32(vrshrn_n_s32(v94, 0xCuLL), v90, 0xCuLL);
  v465 = vrshrn_high_n_s32(vrshrn_n_s32(v93, 0xCuLL), v91, 0xCuLL);
  v457 = vrshrn_high_n_s32(vrshrn_n_s32(v108, 0xCuLL), v106, 0xCuLL);
  v468 = vrshrn_high_n_s32(vrshrn_n_s32(v109, 0xCuLL), v107, 0xCuLL);
  *(int16x4_t *)v82.i8 = vrshrn_n_s32(v134, 0xCuLL);
  v649 = vrshrn_high_n_s32(*(int16x4_t *)v82.i8, v135, 0xCuLL);
  *(int16x4_t *)v94.i8 = vrshrn_n_s32(v135, 0xCuLL);
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(v138, 0xCuLL);
  v139 = vdupq_n_s16(-(int)v116);
  v140 = vdupq_n_s16(-(int)v115);
  v484 = vmlsl_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v139.i8);
  v487 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v139.i8);
  v141 = vqsubq_s16(v492, v670);
  v142 = vqsubq_s16(v489, v95);
  v507 = vmlal_s16(vmull_s16(*(int16x4_t *)v142.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v141.i8, *(int16x4_t *)v139.i8);
  v503 = vmlal_high_s16(vmull_high_s16(v142, v140), v141, v139);
  v498 = vmlsl_high_s16(vmull_high_s16(v141, v140), v142, v139);
  v501 = vmlsl_s16(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v142.i8, *(int16x4_t *)v139.i8);
  *(int16x4_t *)v141.i8 = vrshrn_n_s32(v137, 0xCuLL);
  v461 = vmlal_s16(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v82.i8, *(int16x4_t *)v139.i8);
  v143 = vmull_s16(*(int16x4_t *)v82.i8, *(int16x4_t *)v140.i8);
  v144 = vqsubq_s16(v457, v465);
  v145 = vqsubq_s16(v468, v454);
  v482 = vmlal_s16(vmull_s16(*(int16x4_t *)v145.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v144.i8, *(int16x4_t *)v139.i8);
  v479 = vmlsl_s16(vmull_s16(*(int16x4_t *)v144.i8, *(int16x4_t *)v140.i8), *(int16x4_t *)v145.i8, *(int16x4_t *)v139.i8);
  v471 = vmlal_high_s16(vmull_high_s16(v145, v140), v144, v139);
  v475 = vmlsl_high_s16(vmull_high_s16(v144, v140), v145, v139);
  v451 = vmlsl_s16(v143, *(int16x4_t *)v141.i8, *(int16x4_t *)v139.i8);
  v646 = vrshrn_high_n_s32(*(int16x4_t *)v141.i8, v138, 0xCuLL);
  v146 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v147 = *(int16x8_t *)(a1 + 224);
  v148 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 590]));
  v149 = vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v148.i8);
  v150 = vld1q_dup_s16(v146);
  v151 = vmull_high_s16(v147, v148);
  v152 = vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v150.i8);
  v153 = vmull_high_s16(v147, v150);
  v154 = vrshrn_high_n_s32(vrshrn_n_s32(v639, 0xCuLL), v56, 0xCuLL);
  v155 = vrshrn_high_n_s32(vrshrn_n_s32(v642, 0xCuLL), v57, 0xCuLL);
  v156 = vrshrn_high_n_s32(vrshrn_n_s32(v570, 0xCuLL), v59, 0xCuLL);
  v157 = vrshrn_high_n_s32(vrshrn_n_s32(v566, 0xCuLL), v62, 0xCuLL);
  LODWORD(v115) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  LODWORD(v146) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  *(int16x4_t *)v149.i8 = vrshrn_n_s32(v149, 0xCuLL);
  v643 = vrshrn_high_n_s32(*(int16x4_t *)v149.i8, v151, 0xCuLL);
  *(int16x4_t *)v151.i8 = vrshrn_n_s32(v151, 0xCuLL);
  v158 = vdupq_n_s16(-(int)v146);
  v159 = vdupq_n_s16(-(int)v115);
  *(int16x4_t *)v150.i8 = vrshrn_n_s32(v153, 0xCuLL);
  v160 = vmlal_s16(vmull_s16(*(int16x4_t *)v150.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v151.i8, *(int16x4_t *)v158.i8);
  v161 = vmlsl_s16(vmull_s16(*(int16x4_t *)v151.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v150.i8, *(int16x4_t *)v158.i8);
  v162 = vqsubq_s16(v657, v664);
  v163 = vqsubq_s16(v654, v661);
  v164 = vmlal_s16(vmull_s16(*(int16x4_t *)v163.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v162.i8, *(int16x4_t *)v158.i8);
  v165 = vmlal_high_s16(vmull_high_s16(v163, v159), v162, v158);
  v166 = vmlsl_s16(vmull_s16(*(int16x4_t *)v162.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v163.i8, *(int16x4_t *)v158.i8);
  v167 = vmlsl_high_s16(vmull_high_s16(v162, v159), v163, v158);
  *(int16x4_t *)v152.i8 = vrshrn_n_s32(v152, 0xCuLL);
  v168 = vmlal_s16(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v149.i8, *(int16x4_t *)v158.i8);
  v169 = vqsubq_s16(v156, v155);
  v170 = vqsubq_s16(v157, v154);
  v171 = vmlal_s16(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v169.i8, *(int16x4_t *)v158.i8);
  v172 = vmlal_high_s16(vmull_high_s16(v170, v159), v169, v158);
  v173 = vmlsl_s16(vmull_s16(*(int16x4_t *)v169.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v170.i8, *(int16x4_t *)v158.i8);
  v174 = vmlsl_high_s16(vmull_high_s16(v169, v159), v170, v158);
  v175 = vmlsl_s16(vmull_s16(*(int16x4_t *)v149.i8, *(int16x4_t *)v159.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v158.i8);
  v640 = vrshrn_high_n_s32(*(int16x4_t *)v152.i8, v153, 0xCuLL);
  *(int16x4_t *)v153.i8 = vrshrn_n_s32(v635, 0xCuLL);
  v176 = vdupq_n_s16(v12);
  v177 = vdupq_n_s16(v17);
  *(int16x4_t *)v159.i8 = vrshrn_n_s32(v632, 0xCuLL);
  v178 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v176.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v177.i8);
  v179 = vrshrn_high_n_s32(*(int16x4_t *)v153.i8, v629, 0xCuLL);
  *(int16x4_t *)v119.i8 = vrshrn_n_s32(v629, 0xCuLL);
  v180 = vmlal_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v176.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v177.i8);
  v181 = vrshrn_high_n_s32(*(int16x4_t *)v159.i8, v620, 0xCuLL);
  *(int16x4_t *)v159.i8 = vrshrn_n_s32(v620, 0xCuLL);
  v182 = vmlal_s16(vmull_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v176.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v177.i8);
  v183 = vmlsl_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v176.i8), *(int16x4_t *)v119.i8, *(int16x4_t *)v177.i8);
  v184 = *(int16x8_t *)(a1 + 64);
  v621 = vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v176.i8);
  v185 = vmull_high_s16(v184, v176);
  v435 = vmull_s16(*(int16x4_t *)v184.i8, *(int16x4_t *)v177.i8);
  v378 = vmull_high_s16(v184, v177);
  v186 = vrshrn_high_n_s32(vrshrn_n_s32(v180, 0xCuLL), v182, 0xCuLL);
  v187 = vrshrn_high_n_s32(vrshrn_n_s32(v178, 0xCuLL), v183, 0xCuLL);
  v188 = vrshrn_high_n_s32(vrshrn_n_s32(v598, 0xCuLL), v576, 0xCuLL);
  v189 = vrshrn_high_n_s32(vrshrn_n_s32(v594, 0xCuLL), v573, 0xCuLL);
  v190 = vrshrn_n_s32(v563, 0xCuLL);
  *(int16x4_t *)v95.i8 = vrshrn_n_s32(v553, 0xCuLL);
  v191 = vdupq_n_s16(v146);
  v192 = vdupq_n_s16(v115);
  v193 = vmlsl_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v191.i8), v190, *(int16x4_t *)v192.i8);
  v194 = vmull_s16(v190, *(int16x4_t *)v191.i8);
  v636 = vrshrn_high_n_s32(v190, v557, 0xCuLL);
  v195 = vrshrn_n_s32(v557, 0xCuLL);
  v196 = vmlal_s16(v194, *(int16x4_t *)v95.i8, *(int16x4_t *)v192.i8);
  v630 = vrshrn_high_n_s32(*(int16x4_t *)v95.i8, v560, 0xCuLL);
  *(int16x4_t *)v95.i8 = vrshrn_n_s32(v560, 0xCuLL);
  v577 = vrshrn_high_n_s32(vrshrn_n_s32(v196, 0xCuLL), vmlal_s16(vmull_s16(v195, *(int16x4_t *)v191.i8), *(int16x4_t *)v95.i8, *(int16x4_t *)v192.i8), 0xCuLL);
  v561 = vrshrn_high_n_s32(vrshrn_n_s32(v193, 0xCuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v191.i8), v195, *(int16x4_t *)v192.i8), 0xCuLL);
  v599 = vrshrn_high_n_s32(vrshrn_n_s32(v168, 0xCuLL), v160, 0xCuLL);
  v567 = vrshrn_high_n_s32(vrshrn_n_s32(v175, 0xCuLL), v161, 0xCuLL);
  v197 = vqsubq_s16(v187, v188);
  v633 = vqaddq_s16(v179, v606);
  v198 = vqsubq_s16(v179, v606);
  v398 = vqaddq_s16(v187, v188);
  v400 = vqaddq_s16(v156, v155);
  v658 = vqaddq_s16(v657, v664);
  v199 = vqaddq_s16(v157, v154);
  v200 = vqsubq_s16(v186, v189);
  v402 = vqaddq_s16(v186, v189);
  v404 = v199;
  v201 = vqsubq_s16(v181, v602);
  v386 = vqaddq_s16(v181, v602);
  v388 = vqaddq_s16(v654, v661);
  LODWORD(v12) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v202 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  *(int16x4_t *)v175.i8 = vrshrn_n_s32(v621, 0xCuLL);
  v665 = vrshrn_high_n_s32(*(int16x4_t *)v175.i8, v185, 0xCuLL);
  *(int16x4_t *)v185.i8 = vrshrn_n_s32(v185, 0xCuLL);
  v203 = vdupq_n_s16(v12);
  v204 = vdupq_n_s16(v202);
  *(int16x4_t *)v155.i8 = vrshrn_n_s32(v378, 0xCuLL);
  v622 = vmlal_s16(vmull_s16(*(int16x4_t *)v185.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v155.i8, *(int16x4_t *)v203.i8);
  v655 = vmlsl_s16(vmull_s16(*(int16x4_t *)v155.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v185.i8, *(int16x4_t *)v203.i8);
  v416 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v197.i8, *(int16x4_t *)v191.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v192.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v197, v191), v200, v192), 0xCuLL);
  v412 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v200.i8, *(int16x4_t *)v191.i8), *(int16x4_t *)v197.i8, *(int16x4_t *)v192.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v200, v191), v197, v192), 0xCuLL);
  v432 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v198.i8, *(int16x4_t *)v191.i8), *(int16x4_t *)v201.i8, *(int16x4_t *)v192.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v198, v191), v201, v192), 0xCuLL);
  v442 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v191.i8), *(int16x4_t *)v198.i8, *(int16x4_t *)v192.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v201, v191), v198, v192), 0xCuLL);
  v445 = vrshrn_high_n_s32(vrshrn_n_s32(v164, 0xCuLL), v165, 0xCuLL);
  v439 = vrshrn_high_n_s32(vrshrn_n_s32(v166, 0xCuLL), v167, 0xCuLL);
  v418 = vrshrn_high_n_s32(vrshrn_n_s32(v171, 0xCuLL), v172, 0xCuLL);
  v426 = vrshrn_high_n_s32(vrshrn_n_s32(v173, 0xCuLL), v174, 0xCuLL);
  v205 = vqsubq_s16(v561, v599);
  v206 = vqsubq_s16(v577, v567);
  v607 = vmlal_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v206.i8, *(int16x4_t *)v203.i8);
  v595 = vmlal_high_s16(vmull_high_s16(v205, v204), v206, v203);
  v574 = vmlsl_s16(vmull_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v205.i8, *(int16x4_t *)v203.i8);
  v571 = vmlsl_high_s16(vmull_high_s16(v206, v204), v205, v203);
  v207 = vqsubq_s16(v636, v643);
  v208 = vqsubq_s16(v630, v640);
  v564 = vmlal_s16(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v208.i8, *(int16x4_t *)v203.i8);
  v558 = vmlal_high_s16(vmull_high_s16(v207, v204), v208, v203);
  v554 = vmlsl_s16(vmull_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v207.i8, *(int16x4_t *)v203.i8);
  v448 = vmlsl_high_s16(vmull_high_s16(v208, v204), v207, v203);
  v209 = vqsubq_s16(v442, v445);
  v210 = vqsubq_s16(v432, v439);
  v429 = vmlal_s16(vmull_s16(*(int16x4_t *)v209.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v203.i8);
  v424 = vmlal_high_s16(vmull_high_s16(v209, v204), v210, v203);
  v420 = vmlsl_s16(vmull_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v209.i8, *(int16x4_t *)v203.i8);
  v422 = vmlsl_high_s16(vmull_high_s16(v210, v204), v209, v203);
  v211 = vqsubq_s16(v412, v418);
  v212 = vqsubq_s16(v416, v426);
  v414 = vmlal_s16(vmull_s16(*(int16x4_t *)v211.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v212.i8, *(int16x4_t *)v203.i8);
  v410 = vmlal_high_s16(vmull_high_s16(v211, v204), v212, v203);
  v406 = vmlsl_s16(vmull_s16(*(int16x4_t *)v212.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v211.i8, *(int16x4_t *)v203.i8);
  v408 = vmlsl_high_s16(vmull_high_s16(v212, v204), v211, v203);
  v213 = vqsubq_s16(v398, v400);
  v214 = vqsubq_s16(v402, v199);
  v396 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v214.i8, *(int16x4_t *)v203.i8);
  v394 = vmlal_high_s16(vmull_high_s16(v213, v204), v214, v203);
  v390 = vmlsl_s16(vmull_s16(*(int16x4_t *)v214.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v213.i8, *(int16x4_t *)v203.i8);
  v392 = vmlsl_high_s16(vmull_high_s16(v214, v204), v213, v203);
  *(int16x4_t *)v213.i8 = vrshrn_n_s32(v435, 0xCuLL);
  v603 = vmlsl_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v175.i8, *(int16x4_t *)v203.i8);
  v215 = vmull_s16(*(int16x4_t *)v175.i8, *(int16x4_t *)v204.i8);
  v216 = vqsubq_s16(v633, v658);
  v217 = vqsubq_s16(v386, v388);
  v436 = vmlal_s16(vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v217.i8, *(int16x4_t *)v203.i8);
  v380 = vmlal_high_s16(vmull_high_s16(v216, v204), v217, v203);
  v382 = vmlsl_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v204.i8), *(int16x4_t *)v216.i8, *(int16x4_t *)v203.i8);
  v384 = vmlsl_high_s16(vmull_high_s16(v217, v204), v216, v203);
  v218 = vmlal_s16(v215, *(int16x4_t *)v213.i8, *(int16x4_t *)v203.i8);
  v662 = vrshrn_high_n_s32(*(int16x4_t *)v213.i8, v378, 0xCuLL);
  v219 = *(int16x8_t *)(a1 + 192);
  v220 = vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v616.i8);
  v221 = vmull_high_s16(v219, v616);
  v617 = vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v625.i8);
  v626 = vmull_high_s16(v219, v625);
  v222 = vrshrn_high_n_s32(vrshrn_n_s32(v511, 0xCuLL), v613, 0xCuLL);
  v223 = vrshrn_high_n_s32(vrshrn_n_s32(v514, 0xCuLL), v610, 0xCuLL);
  v224 = vrshrn_high_n_s32(vrshrn_n_s32(v461, 0xCuLL), v487, 0xCuLL);
  v225 = vrshrn_high_n_s32(vrshrn_n_s32(v451, 0xCuLL), v484, 0xCuLL);
  v668 = vqaddq_s16(v667, v525);
  v512 = vqaddq_s16(v586, v590);
  v515 = vqaddq_s16(v457, v465);
  v591 = vqaddq_s16(v492, v670);
  v587 = vqaddq_s16(v489, v495);
  v526 = vqaddq_s16(v468, v454);
  v584 = vqaddq_s16(v580, v583);
  v496 = vqaddq_s16(v540, v537);
  *(int16x4_t *)v185.i8 = vrshrn_n_s32(v220, 0xCuLL);
  v671 = vrshrn_high_n_s32(*(int16x4_t *)v185.i8, v221, 0xCuLL);
  v226 = vdupq_n_s16(-v202);
  *(int16x4_t *)v221.i8 = vrshrn_n_s32(v221, 0xCuLL);
  v227 = vdupq_n_s16(-(int)v12);
  *(int16x4_t *)v217.i8 = vrshrn_n_s32(v626, 0xCuLL);
  v228 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v226.i8);
  v229 = vmlsl_s16(vmull_s16(*(int16x4_t *)v221.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v217.i8, *(int16x4_t *)v226.i8);
  v230 = vrshrn_high_n_s32(vrshrn_n_s32(v550, 0xCuLL), v548, 0xCuLL);
  v231 = vrshrn_high_n_s32(vrshrn_n_s32(v545, 0xCuLL), v542, 0xCuLL);
  v232 = vrshrn_high_n_s32(vrshrn_n_s32(v533, 0xCuLL), v521, 0xCuLL);
  v233 = vrshrn_high_n_s32(vrshrn_n_s32(v529, 0xCuLL), v517, 0xCuLL);
  v234 = vrshrn_high_n_s32(vrshrn_n_s32(v507, 0xCuLL), v503, 0xCuLL);
  v235 = vrshrn_high_n_s32(vrshrn_n_s32(v501, 0xCuLL), v498, 0xCuLL);
  v236 = vrshrn_high_n_s32(vrshrn_n_s32(v482, 0xCuLL), v471, 0xCuLL);
  v237 = vrshrn_high_n_s32(vrshrn_n_s32(v479, 0xCuLL), v475, 0xCuLL);
  v238 = vqsubq_s16(v649, v673);
  v239 = vqsubq_s16(v646, v652);
  v534 = vmlal_s16(vmull_s16(*(int16x4_t *)v239.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v238.i8, *(int16x4_t *)v226.i8);
  v530 = vmlal_high_s16(vmull_high_s16(v239, v227), v238, v226);
  v522 = vmlsl_s16(vmull_s16(*(int16x4_t *)v238.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v239.i8, *(int16x4_t *)v226.i8);
  v518 = vmlsl_high_s16(vmull_high_s16(v238, v227), v239, v226);
  v240 = vqsubq_s16(v224, v223);
  v241 = vqsubq_s16(v225, v222);
  v508 = vmlal_s16(vmull_s16(*(int16x4_t *)v241.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v240.i8, *(int16x4_t *)v226.i8);
  v504 = vmlal_high_s16(vmull_high_s16(v241, v227), v240, v226);
  v452 = vmlsl_s16(vmull_s16(*(int16x4_t *)v240.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v241.i8, *(int16x4_t *)v226.i8);
  v611 = vmlsl_high_s16(vmull_high_s16(v240, v227), v241, v226);
  v242 = vqsubq_s16(v591, v668);
  v243 = vqsubq_s16(v587, v496);
  v499 = vmlal_s16(vmull_s16(*(int16x4_t *)v243.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v242.i8, *(int16x4_t *)v226.i8);
  v490 = vmlal_high_s16(vmull_high_s16(v243, v227), v242, v226);
  v472 = vmlsl_high_s16(vmull_high_s16(v242, v227), v243, v226);
  v476 = vmlsl_s16(vmull_s16(*(int16x4_t *)v242.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v226.i8);
  v244 = vqsubq_s16(v515, v512);
  v245 = vqsubq_s16(v526, v584);
  v469 = vmlal_s16(vmull_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v244.i8, *(int16x4_t *)v226.i8);
  v466 = vmlal_high_s16(vmull_high_s16(v245, v227), v244, v226);
  v458 = vmlsl_high_s16(vmull_high_s16(v244, v227), v245, v226);
  v462 = vmlsl_s16(vmull_s16(*(int16x4_t *)v244.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v245.i8, *(int16x4_t *)v226.i8);
  v246 = vqsubq_s16(v236, v231);
  v247 = vqsubq_s16(v237, v230);
  v248 = vmlal_s16(vmull_s16(*(int16x4_t *)v247.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v246.i8, *(int16x4_t *)v226.i8);
  v249 = vmlal_high_s16(vmull_high_s16(v247, v227), v246, v226);
  v250 = vmlsl_s16(vmull_s16(*(int16x4_t *)v246.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v247.i8, *(int16x4_t *)v226.i8);
  v251 = vmlsl_high_s16(vmull_high_s16(v246, v227), v247, v226);
  *(int16x4_t *)v247.i8 = vrshrn_n_s32(v617, 0xCuLL);
  v252 = vmlal_s16(vmull_s16(*(int16x4_t *)v247.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v185.i8, *(int16x4_t *)v226.i8);
  v253 = vqsubq_s16(v234, v233);
  v254 = vqsubq_s16(v235, v232);
  v255 = vmlal_s16(vmull_s16(*(int16x4_t *)v254.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v253.i8, *(int16x4_t *)v226.i8);
  v256 = vmlal_high_s16(vmull_high_s16(v254, v227), v253, v226);
  v257 = vmlsl_s16(vmull_s16(*(int16x4_t *)v253.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v254.i8, *(int16x4_t *)v226.i8);
  v258 = vmlsl_high_s16(vmull_high_s16(v253, v227), v254, v226);
  v259 = vmlsl_s16(vmull_s16(*(int16x4_t *)v185.i8, *(int16x4_t *)v227.i8), *(int16x4_t *)v247.i8, *(int16x4_t *)v226.i8);
  v627 = vrshrn_high_n_s32(*(int16x4_t *)v247.i8, v626, 0xCuLL);
  v260 = *(int16x8_t *)(a1 + 128);
  v261 = vmull_high_s16(v260, v191);
  v262 = vmull_high_s16(v260, v192);
  v541 = vrshrn_high_n_s32(vrshrn_n_s32(v218, 0xCuLL), v622, 0xCuLL);
  v538 = vrshrn_high_n_s32(vrshrn_n_s32(v603, 0xCuLL), v655, 0xCuLL);
  v546 = vrshrn_high_n_s32(vrshrn_n_s32(v252, 0xCuLL), v228, 0xCuLL);
  v543 = vrshrn_high_n_s32(vrshrn_n_s32(v259, 0xCuLL), v229, 0xCuLL);
  v623 = vqaddq_s16(v636, v643);
  v604 = vqaddq_s16(v561, v599);
  v614 = vqaddq_s16(v224, v223);
  v618 = vqaddq_s16(v649, v673);
  v637 = vqaddq_s16(v646, v652);
  v263 = vqaddq_s16(v225, v222);
  v264 = vqaddq_s16(v577, v567);
  v600 = vqaddq_s16(v630, v640);
  v265 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  *(int16x4_t *)v226.i8 = vrshrn_n_s32(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v191.i8), 0xCuLL);
  *(int16x4_t *)v254.i8 = vrshrn_n_s32(vmull_s16(*(int16x4_t *)v260.i8, *(int16x4_t *)v192.i8), 0xCuLL);
  v266 = vld1q_dup_s16(v265);
  v568 = vmlsl_s16(vmull_s16(*(int16x4_t *)v254.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v226.i8, *(int16x4_t *)v266.i8);
  v267 = vmull_s16(*(int16x4_t *)v226.i8, *(int16x4_t *)v266.i8);
  v578 = vrshrn_high_n_s32(*(int16x4_t *)v226.i8, v261, 0xCuLL);
  *(int16x4_t *)v226.i8 = vrshrn_n_s32(v261, 0xCuLL);
  v581 = vrshrn_high_n_s32(*(int16x4_t *)v254.i8, v262, 0xCuLL);
  *(int16x4_t *)v261.i8 = vrshrn_n_s32(v262, 0xCuLL);
  v551 = vmlal_s16(vmull_s16(*(int16x4_t *)v226.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v261.i8, *(int16x4_t *)v266.i8);
  v549 = vmlsl_s16(vmull_s16(*(int16x4_t *)v261.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v226.i8, *(int16x4_t *)v266.i8);
  v455 = vrshrn_high_n_s32(vrshrn_n_s32(v607, 0xCuLL), v595, 0xCuLL);
  v485 = vrshrn_high_n_s32(vrshrn_n_s32(v554, 0xCuLL), v448, 0xCuLL);
  v488 = vrshrn_high_n_s32(vrshrn_n_s32(v574, 0xCuLL), v571, 0xCuLL);
  v493 = vrshrn_high_n_s32(vrshrn_n_s32(v534, 0xCuLL), v530, 0xCuLL);
  v480 = vrshrn_high_n_s32(vrshrn_n_s32(v564, 0xCuLL), v558, 0xCuLL);
  v483 = vrshrn_high_n_s32(vrshrn_n_s32(v522, 0xCuLL), v518, 0xCuLL);
  v371 = vrshrn_high_n_s32(vrshrn_n_s32(v508, 0xCuLL), v504, 0xCuLL);
  v370 = vrshrn_high_n_s32(vrshrn_n_s32(v452, 0xCuLL), v611, 0xCuLL);
  v674 = vqaddq_s16(v633, v658);
  v656 = vqaddq_s16(v398, v400);
  v641 = vqaddq_s16(v412, v418);
  v631 = vqaddq_s16(v442, v445);
  v612 = vqaddq_s16(v233, v234);
  v634 = vqaddq_s16(v231, v236);
  v653 = vqaddq_s16(v512, v515);
  v669 = vqaddq_s16(v668, v591);
  v659 = vqaddq_s16(v587, v496);
  v650 = vqaddq_s16(v526, v584);
  v608 = vqaddq_s16(v237, v230);
  v596 = vqaddq_s16(v235, v232);
  v588 = vqaddq_s16(v439, v432);
  v647 = vqaddq_s16(v426, v416);
  v644 = vqaddq_s16(v404, v402);
  v592 = vqaddq_s16(v388, v386);
  v268 = vqsubq_s16(v538, v546);
  v269 = vqsubq_s16(v541, v543);
  v555 = vmlal_s16(vmull_s16(*(int16x4_t *)v268.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v269.i8, *(int16x4_t *)v266.i8);
  v535 = vmlal_high_s16(vmull_high_s16(v268, v266), v269, v266);
  v531 = vmlsl_s16(vmull_s16(*(int16x4_t *)v269.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v268.i8, *(int16x4_t *)v266.i8);
  v527 = vmlsl_high_s16(vmull_high_s16(v269, v266), v268, v266);
  v270 = vqsubq_s16(v665, v671);
  v271 = vqsubq_s16(v662, v627);
  v523 = vmlal_s16(vmull_s16(*(int16x4_t *)v270.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v271.i8, *(int16x4_t *)v266.i8);
  v519 = vmlal_high_s16(vmull_high_s16(v270, v266), v271, v266);
  v505 = vmlsl_high_s16(vmull_high_s16(v271, v266), v270, v266);
  v509 = vmlsl_s16(vmull_s16(*(int16x4_t *)v271.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v270.i8, *(int16x4_t *)v266.i8);
  v379 = vrshrn_high_n_s32(vrshrn_n_s32(v429, 0xCuLL), v424, 0xCuLL);
  v585 = vrshrn_high_n_s32(vrshrn_n_s32(v420, 0xCuLL), v422, 0xCuLL);
  v387 = vrshrn_high_n_s32(vrshrn_n_s32(v414, 0xCuLL), v410, 0xCuLL);
  v513 = vrshrn_high_n_s32(vrshrn_n_s32(v406, 0xCuLL), v408, 0xCuLL);
  v399 = vrshrn_high_n_s32(vrshrn_n_s32(v396, 0xCuLL), v394, 0xCuLL);
  v559 = vrshrn_high_n_s32(vrshrn_n_s32(v390, 0xCuLL), v392, 0xCuLL);
  v575 = vrshrn_high_n_s32(vrshrn_n_s32(v382, 0xCuLL), v384, 0xCuLL);
  v572 = vrshrn_high_n_s32(vrshrn_n_s32(v499, 0xCuLL), v490, 0xCuLL);
  v411 = vrshrn_high_n_s32(vrshrn_n_s32(v436, 0xCuLL), v380, 0xCuLL);
  v413 = vrshrn_high_n_s32(vrshrn_n_s32(v476, 0xCuLL), v472, 0xCuLL);
  v565 = vrshrn_high_n_s32(vrshrn_n_s32(v469, 0xCuLL), v466, 0xCuLL);
  v401 = vrshrn_high_n_s32(vrshrn_n_s32(v462, 0xCuLL), v458, 0xCuLL);
  v516 = vrshrn_high_n_s32(vrshrn_n_s32(v248, 0xCuLL), v249, 0xCuLL);
  v395 = vrshrn_high_n_s32(vrshrn_n_s32(v250, 0xCuLL), v251, 0xCuLL);
  v500 = vrshrn_high_n_s32(vrshrn_n_s32(v255, 0xCuLL), v256, 0xCuLL);
  v385 = vrshrn_high_n_s32(vrshrn_n_s32(v257, 0xCuLL), v258, 0xCuLL);
  v272 = vqsubq_s16(v485, v493);
  v273 = vqsubq_s16(v480, v483);
  v477 = vmlal_s16(vmull_s16(*(int16x4_t *)v272.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v273.i8, *(int16x4_t *)v266.i8);
  v473 = vmlal_high_s16(vmull_high_s16(v272, v266), v273, v266);
  v459 = vmlsl_high_s16(vmull_high_s16(v273, v266), v272, v266);
  v463 = vmlsl_s16(vmull_s16(*(int16x4_t *)v273.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v272.i8, *(int16x4_t *)v266.i8);
  v274 = vqsubq_s16(v488, v371);
  v275 = vqsubq_s16(v455, v370);
  v453 = vmlal_s16(vmull_s16(*(int16x4_t *)v274.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v275.i8, *(int16x4_t *)v266.i8);
  v449 = vmlal_high_s16(vmull_high_s16(v274, v266), v275, v266);
  v443 = vmlsl_high_s16(vmull_high_s16(v275, v266), v274, v266);
  v446 = vmlsl_s16(vmull_s16(*(int16x4_t *)v275.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v274.i8, *(int16x4_t *)v266.i8);
  v276 = vqsubq_s16(v604, v614);
  v277 = vqsubq_s16(v264, v263);
  v278 = vmlal_s16(vmull_s16(*(int16x4_t *)v276.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v277.i8, *(int16x4_t *)v266.i8);
  v440 = vmlal_high_s16(vmull_high_s16(v276, v266), v277, v266);
  v433 = vmlsl_high_s16(vmull_high_s16(v277, v266), v276, v266);
  v437 = vmlsl_s16(vmull_s16(*(int16x4_t *)v277.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v276.i8, *(int16x4_t *)v266.i8);
  v279 = vqsubq_s16(v623, v618);
  v280 = vqsubq_s16(v600, v637);
  v430 = vmlal_s16(vmull_s16(*(int16x4_t *)v279.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v266.i8);
  v427 = vmlal_high_s16(vmull_high_s16(v279, v266), v280, v266);
  v423 = vmlsl_high_s16(vmull_high_s16(v280, v266), v279, v266);
  v425 = vmlsl_s16(vmull_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v279.i8, *(int16x4_t *)v266.i8);
  v281 = vqsubq_s16(v575, v572);
  v282 = vqsubq_s16(v411, v413);
  v421 = vmlal_s16(vmull_s16(*(int16x4_t *)v281.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v282.i8, *(int16x4_t *)v266.i8);
  v419 = vmlal_high_s16(vmull_high_s16(v281, v266), v282, v266);
  v497 = vmlsl_s16(vmull_s16(*(int16x4_t *)v282.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v281.i8, *(int16x4_t *)v266.i8);
  v491 = vmlsl_high_s16(vmull_high_s16(v282, v266), v281, v266);
  v283 = vqsubq_s16(v559, v565);
  v284 = vqsubq_s16(v399, v401);
  v417 = vmlal_s16(vmull_s16(*(int16x4_t *)v283.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v284.i8, *(int16x4_t *)v266.i8);
  v415 = vmlal_high_s16(vmull_high_s16(v283, v266), v284, v266);
  v467 = vmlsl_high_s16(vmull_high_s16(v284, v266), v283, v266);
  v470 = vmlsl_s16(vmull_s16(*(int16x4_t *)v284.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v283.i8, *(int16x4_t *)v266.i8);
  v285 = vqsubq_s16(v513, v516);
  v286 = vqsubq_s16(v387, v395);
  v409 = vmlal_s16(vmull_s16(*(int16x4_t *)v285.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v286.i8, *(int16x4_t *)v266.i8);
  v407 = vmlal_high_s16(vmull_high_s16(v285, v266), v286, v266);
  v403 = vmlsl_s16(vmull_s16(*(int16x4_t *)v286.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v285.i8, *(int16x4_t *)v266.i8);
  v405 = vmlsl_high_s16(vmull_high_s16(v286, v266), v285, v266);
  v287 = vqsubq_s16(v585, v500);
  v288 = vqsubq_s16(v379, v385);
  v397 = vmlal_s16(vmull_s16(*(int16x4_t *)v287.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v266.i8);
  v393 = vmlal_high_s16(vmull_high_s16(v287, v266), v288, v266);
  v389 = vmlsl_s16(vmull_s16(*(int16x4_t *)v288.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v287.i8, *(int16x4_t *)v266.i8);
  v391 = vmlsl_high_s16(vmull_high_s16(v288, v266), v287, v266);
  v289 = vqsubq_s16(v631, v612);
  v290 = vqsubq_s16(v588, v596);
  v383 = vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v266.i8);
  v381 = vmlal_high_s16(vmull_high_s16(v289, v266), v290, v266);
  v376 = vmlsl_s16(vmull_s16(*(int16x4_t *)v290.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v289.i8, *(int16x4_t *)v266.i8);
  v377 = vmlsl_high_s16(vmull_high_s16(v290, v266), v289, v266);
  v291 = vqsubq_s16(v641, v634);
  v292 = vqsubq_s16(v647, v608);
  v375 = vmlal_s16(vmull_s16(*(int16x4_t *)v291.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v292.i8, *(int16x4_t *)v266.i8);
  v374 = vmlal_high_s16(vmull_high_s16(v291, v266), v292, v266);
  v372 = vmlsl_s16(vmull_s16(*(int16x4_t *)v292.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v291.i8, *(int16x4_t *)v266.i8);
  v373 = vmlsl_high_s16(vmull_high_s16(v292, v266), v291, v266);
  v293 = vqsubq_s16(v656, v653);
  v294 = vqsubq_s16(v644, v650);
  v369 = vmlal_s16(vmull_s16(*(int16x4_t *)v293.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v294.i8, *(int16x4_t *)v266.i8);
  v368 = vmlal_high_s16(vmull_high_s16(v293, v266), v294, v266);
  v295 = vmlsl_s16(vmull_s16(*(int16x4_t *)v294.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v293.i8, *(int16x4_t *)v266.i8);
  v367 = vmlsl_high_s16(vmull_high_s16(v294, v266), v293, v266);
  v296 = vqsubq_s16(v674, v669);
  v297 = vqsubq_s16(v592, v659);
  v298 = vmlal_s16(vmull_s16(*(int16x4_t *)v296.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v297.i8, *(int16x4_t *)v266.i8);
  v299 = vmlal_high_s16(vmull_high_s16(v296, v266), v297, v266);
  v300 = vmlsl_s16(vmull_s16(*(int16x4_t *)v297.i8, *(int16x4_t *)v266.i8), *(int16x4_t *)v296.i8, *(int16x4_t *)v266.i8);
  v301 = vmlsl_high_s16(vmull_high_s16(v297, v266), v296, v266);
  v302 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v266.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v266), 0xCuLL);
  v303 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(v267, *(int16x4_t *)v254.i8, *(int16x4_t *)v266.i8), 0xCuLL), v551, 0xCuLL);
  v304 = vrshrn_high_n_s32(vrshrn_n_s32(v568, 0xCuLL), v549, 0xCuLL);
  v305 = vqaddq_s16(v665, v671);
  v306 = vqaddq_s16(v538, v546);
  v307 = vqaddq_s16(v541, v543);
  v308 = vqaddq_s16(v662, v627);
  v309 = vrshrn_high_n_s32(vrshrn_n_s32(v555, 0xCuLL), v535, 0xCuLL);
  v310 = vrshrn_high_n_s32(vrshrn_n_s32(v531, 0xCuLL), v527, 0xCuLL);
  v311 = vrshrn_high_n_s32(vrshrn_n_s32(v523, 0xCuLL), v519, 0xCuLL);
  v312 = vrshrn_high_n_s32(vrshrn_n_s32(v509, 0xCuLL), v505, 0xCuLL);
  v313 = vqaddq_s16(v302, v578);
  v314 = vqsubq_s16(v302, v578);
  v315 = vqaddq_s16(v302, v304);
  v316 = vqsubq_s16(v302, v304);
  v317 = vqaddq_s16(v302, v303);
  v318 = vqsubq_s16(v302, v303);
  v319 = vqaddq_s16(v302, v581);
  v320 = vqsubq_s16(v302, v581);
  v321 = vqaddq_s16(v623, v618);
  v322 = vqaddq_s16(v604, v614);
  v506 = vqaddq_s16(v488, v371);
  v524 = vqaddq_s16(v485, v493);
  v582 = vqaddq_s16(v480, v483);
  v579 = vqaddq_s16(v455, v370);
  v672 = vqaddq_s16(v264, v263);
  v666 = vqaddq_s16(v600, v637);
  v323 = vrshrn_high_n_s32(vrshrn_n_s32(v477, 0xCuLL), v473, 0xCuLL);
  v324 = vrshrn_high_n_s32(vrshrn_n_s32(v463, 0xCuLL), v459, 0xCuLL);
  v325 = vrshrn_high_n_s32(vrshrn_n_s32(v453, 0xCuLL), v449, 0xCuLL);
  v326 = vrshrn_high_n_s32(vrshrn_n_s32(v446, 0xCuLL), v443, 0xCuLL);
  v327 = vrshrn_high_n_s32(vrshrn_n_s32(v278, 0xCuLL), v440, 0xCuLL);
  v328 = vrshrn_high_n_s32(vrshrn_n_s32(v437, 0xCuLL), v433, 0xCuLL);
  v329 = vrshrn_high_n_s32(vrshrn_n_s32(v430, 0xCuLL), v427, 0xCuLL);
  v330 = vrshrn_high_n_s32(vrshrn_n_s32(v425, 0xCuLL), v423, 0xCuLL);
  v547 = vqaddq_s16(v320, v305);
  v532 = vqsubq_s16(v320, v305);
  v520 = vqsubq_s16(v318, v306);
  v481 = vqsubq_s16(v316, v310);
  v605 = vqaddq_s16(v314, v312);
  v624 = vqaddq_s16(v313, v311);
  v434 = vqsubq_s16(v313, v311);
  v619 = vqaddq_s16(v315, v309);
  v544 = vqsubq_s16(v315, v309);
  v638 = vqaddq_s16(v317, v307);
  v331 = vqsubq_s16(v317, v307);
  v628 = vqaddq_s16(v319, v308);
  v332 = vqsubq_s16(v319, v308);
  v663 = vqaddq_s16(v411, v413);
  v615 = vqaddq_s16(v399, v401);
  v556 = vqaddq_s16(v387, v395);
  v562 = vqaddq_s16(v379, v385);
  v569 = vqaddq_s16(v588, v596);
  v589 = vqaddq_s16(v647, v608);
  v601 = vqaddq_s16(v644, v650);
  v645 = vqaddq_s16(v592, v659);
  v528 = vrshrn_high_n_s32(vrshrn_n_s32(v421, 0xCuLL), v419, 0xCuLL);
  v510 = vrshrn_high_n_s32(vrshrn_n_s32(v417, 0xCuLL), v415, 0xCuLL);
  v486 = vrshrn_high_n_s32(vrshrn_n_s32(v409, 0xCuLL), v407, 0xCuLL);
  v478 = vrshrn_high_n_s32(vrshrn_n_s32(v397, 0xCuLL), v393, 0xCuLL);
  v450 = vrshrn_high_n_s32(vrshrn_n_s32(v383, 0xCuLL), v381, 0xCuLL);
  v660 = vrshrn_high_n_s32(vrshrn_n_s32(v376, 0xCuLL), v377, 0xCuLL);
  v333 = vrshrn_high_n_s32(vrshrn_n_s32(v372, 0xCuLL), v373, 0xCuLL);
  v428 = vrshrn_high_n_s32(vrshrn_n_s32(v369, 0xCuLL), v368, 0xCuLL);
  v334 = vrshrn_high_n_s32(vrshrn_n_s32(v295, 0xCuLL), v367, 0xCuLL);
  v335 = vrshrn_high_n_s32(vrshrn_n_s32(v298, 0xCuLL), v299, 0xCuLL);
  v336 = vrshrn_high_n_s32(vrshrn_n_s32(v300, 0xCuLL), v301, 0xCuLL);
  v441 = vqaddq_s16(v332, v321);
  v444 = vrshrn_high_n_s32(vrshrn_n_s32(v375, 0xCuLL), v374, 0xCuLL);
  v651 = vqsubq_s16(v332, v321);
  v447 = vqaddq_s16(v331, v322);
  v648 = vqsubq_s16(v331, v322);
  v609 = vqaddq_s16(v628, v666);
  v597 = vqaddq_s16(v638, v672);
  *a2 = vqaddq_s16(v609, v645);
  a2[1] = vqaddq_s16(v597, v601);
  v593 = vqaddq_s16(v619, v579);
  v552 = vqaddq_s16(v624, v582);
  a2[2] = vqaddq_s16(v593, v589);
  a2[3] = vqaddq_s16(v552, v569);
  v539 = vqaddq_s16(v605, v323);
  v337 = vqaddq_s16(v316, v310);
  v536 = vqaddq_s16(v337, v325);
  a2[4] = vqaddq_s16(v539, v562);
  a2[5] = vqaddq_s16(v536, v556);
  v338 = vqaddq_s16(v318, v306);
  v502 = vqaddq_s16(v338, v327);
  v494 = vqaddq_s16(v547, v329);
  a2[6] = vqaddq_s16(v502, v615);
  a2[7] = vqaddq_s16(v494, v663);
  v474 = vqaddq_s16(v532, v330);
  v456 = vqaddq_s16(v520, v328);
  a2[8] = vqaddq_s16(v474, v528);
  a2[9] = vqaddq_s16(v456, v510);
  v438 = vqaddq_s16(v481, v326);
  v339 = vqsubq_s16(v314, v312);
  v431 = vqaddq_s16(v339, v324);
  a2[10] = vqaddq_s16(v438, v486);
  a2[11] = vqaddq_s16(v431, v478);
  v460 = vqaddq_s16(v544, v506);
  v464 = vqaddq_s16(v434, v524);
  a2[12] = vqaddq_s16(v464, v450);
  a2[13] = vqaddq_s16(v460, v444);
  v340 = vqsubq_s16(v544, v506);
  a2[14] = vqaddq_s16(v447, v428);
  a2[15] = vqaddq_s16(v441, v335);
  v341 = vqsubq_s16(v434, v524);
  a2[16] = vqaddq_s16(v651, v336);
  a2[17] = vqaddq_s16(v648, v334);
  v342 = vqsubq_s16(v339, v324);
  a2[18] = vqaddq_s16(v340, v333);
  a2[19] = vqaddq_s16(v341, v660);
  v343 = vqsubq_s16(v481, v326);
  v344 = vrshrn_high_n_s32(vrshrn_n_s32(v389, 0xCuLL), v391, 0xCuLL);
  v345 = vrshrn_high_n_s32(vrshrn_n_s32(v403, 0xCuLL), v405, 0xCuLL);
  a2[20] = vqaddq_s16(v342, v344);
  a2[21] = vqaddq_s16(v343, v345);
  v346 = vrshrn_high_n_s32(vrshrn_n_s32(v497, 0xCuLL), v491, 0xCuLL);
  v347 = vrshrn_high_n_s32(vrshrn_n_s32(v470, 0xCuLL), v467, 0xCuLL);
  v348 = vqsubq_s16(v520, v328);
  v349 = vqsubq_s16(v532, v330);
  a2[22] = vqaddq_s16(v348, v347);
  a2[23] = vqaddq_s16(v349, v346);
  v350 = vqaddq_s16(v559, v565);
  v351 = vqaddq_s16(v575, v572);
  v352 = vqsubq_s16(v547, v329);
  v353 = vqsubq_s16(v338, v327);
  a2[24] = vqaddq_s16(v352, v351);
  a2[25] = vqaddq_s16(v353, v350);
  v354 = vqaddq_s16(v585, v500);
  v355 = vqaddq_s16(v513, v516);
  v356 = vqsubq_s16(v337, v325);
  v357 = vqsubq_s16(v605, v323);
  a2[26] = vqaddq_s16(v356, v355);
  a2[27] = vqaddq_s16(v357, v354);
  v358 = vqaddq_s16(v641, v634);
  v359 = vqaddq_s16(v631, v612);
  v360 = vqsubq_s16(v624, v582);
  v361 = vqsubq_s16(v619, v579);
  a2[28] = vqaddq_s16(v360, v359);
  a2[29] = vqaddq_s16(v361, v358);
  v362 = vqaddq_s16(v674, v669);
  v363 = vqaddq_s16(v656, v653);
  v364 = vqsubq_s16(v638, v672);
  v365 = vqsubq_s16(v628, v666);
  a2[30] = vqaddq_s16(v364, v363);
  a2[31] = vqaddq_s16(v365, v362);
  a2[32] = vqsubq_s16(v365, v362);
  a2[33] = vqsubq_s16(v364, v363);
  a2[34] = vqsubq_s16(v361, v358);
  a2[35] = vqsubq_s16(v360, v359);
  a2[36] = vqsubq_s16(v357, v354);
  a2[37] = vqsubq_s16(v356, v355);
  a2[38] = vqsubq_s16(v353, v350);
  a2[39] = vqsubq_s16(v352, v351);
  a2[40] = vqsubq_s16(v349, v346);
  a2[41] = vqsubq_s16(v348, v347);
  a2[42] = vqsubq_s16(v343, v345);
  a2[43] = vqsubq_s16(v342, v344);
  a2[44] = vqsubq_s16(v341, v660);
  a2[45] = vqsubq_s16(v340, v333);
  a2[46] = vqsubq_s16(v648, v334);
  a2[47] = vqsubq_s16(v651, v336);
  a2[48] = vqsubq_s16(v441, v335);
  a2[49] = vqsubq_s16(v447, v428);
  a2[50] = vqsubq_s16(v460, v444);
  a2[51] = vqsubq_s16(v464, v450);
  a2[52] = vqsubq_s16(v431, v478);
  a2[53] = vqsubq_s16(v438, v486);
  a2[54] = vqsubq_s16(v456, v510);
  a2[55] = vqsubq_s16(v474, v528);
  a2[56] = vqsubq_s16(v494, v663);
  a2[57] = vqsubq_s16(v502, v615);
  a2[58] = vqsubq_s16(v536, v556);
  a2[59] = vqsubq_s16(v539, v562);
  a2[60] = vqsubq_s16(v552, v569);
  a2[61] = vqsubq_s16(v593, v589);
  result = vqsubq_s16(v597, v601);
  a2[62] = result;
  a2[63] = vqsubq_s16(v609, v645);
  return result;
}

int16x8_t idct64_low32_neon(uint64_t a1, int16x8_t *a2, int a3)
{
  const __int16 *v3;
  int16x8_t v4;
  int16x8_t v5;
  const __int16 *v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  const __int16 *v10;
  int16x8_t v11;
  const __int16 *v12;
  int16x8_t v13;
  int16x8_t v14;
  const __int16 *v15;
  int16x8_t v16;
  unsigned int v17;
  unsigned int v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  const __int16 *v23;
  int16x8_t v24;
  unsigned int v25;
  unsigned int v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  const __int16 *v30;
  int16x8_t v31;
  const __int16 *v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  const __int16 *v38;
  int32x4_t v39;
  int32x4_t v40;
  int16x8_t v41;
  const __int16 *v42;
  int16x8_t v43;
  const __int16 *v44;
  int16x8_t v45;
  int16x8_t v46;
  const __int16 *v47;
  int16x8_t v48;
  int32x4_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int16x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int32x4_t v83;
  int32x4_t v84;
  const __int16 *v85;
  const __int16 *v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  const __int16 *v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  const __int16 *v97;
  const __int16 *v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  const __int16 *v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  const __int16 *v109;
  const __int16 *v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  const __int16 *v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  const __int16 *v126;
  const __int16 *v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  const __int16 *v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  const __int16 *v139;
  const __int16 *v140;
  int16x8_t v141;
  int16x8_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int16x8_t v145;
  int16x8_t v146;
  const __int16 *v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  unsigned int v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int32x4_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  const __int16 *v168;
  const __int16 *v169;
  int16x8_t v170;
  int16x8_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  const __int16 *v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int16x8_t v186;
  int16x8_t v187;
  int16x8_t v188;
  int16x8_t v189;
  int16x8_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int16x8_t v195;
  int16x8_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int16x8_t v207;
  int16x8_t v208;
  unsigned int v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  const __int16 *v226;
  const __int16 *v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  const __int16 *v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  const __int16 *v239;
  const __int16 *v240;
  int16x8_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  const __int16 *v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int16x8_t v254;
  int16x8_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int16x8_t v262;
  int16x8_t v263;
  int16x8_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int16x8_t v272;
  int16x8_t v273;
  int16x8_t v274;
  int16x8_t v275;
  int16x8_t v276;
  int16x8_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  int16x8_t v297;
  int16x8_t v298;
  int16x8_t v299;
  int16x8_t v300;
  int16x8_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int16x8_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int16x8_t v318;
  int16x8_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  const __int16 *v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int16x8_t v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int16x8_t v341;
  int16x8_t v342;
  int16x8_t v343;
  int16x8_t v344;
  int16x8_t v345;
  int16x8_t v346;
  int16x8_t v347;
  int16x8_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int16x8_t v363;
  int16x8_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int16x8_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int16x8_t v391;
  int16x8_t v392;
  int16x8_t v393;
  int16x8_t v394;
  int16x8_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int16x8_t v398;
  int16x8_t v399;
  int16x8_t v400;
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int16x8_t v409;
  int16x8_t v410;
  int16x8_t v411;
  int16x8_t v412;
  int16x8_t v413;
  int16x8_t v414;
  int16x8_t v415;
  int16x8_t v416;
  int16x8_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int16x8_t v423;
  int16x8_t v424;
  int16x8_t v425;
  int16x8_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int16x8_t v435;
  int16x8_t v436;
  int16x8_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int16x8_t v441;
  int16x8_t v442;
  int16x8_t v443;
  int16x8_t v444;
  int16x8_t v445;
  int16x8_t v446;
  int16x8_t result;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int16x8_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int16x8_t v469;
  int16x8_t v470;
  int16x8_t v471;
  int16x8_t v472;
  int32x4_t v473;
  int16x8_t v474;
  int32x4_t v475;
  int16x8_t v476;
  int16x8_t v477;
  int32x4_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int16x8_t v488;
  int16x8_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int16x8_t v500;
  int16x8_t v501;
  int16x8_t v502;
  int16x8_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  int32x4_t v510;
  int32x4_t v511;
  int32x4_t v512;
  int16x8_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int16x8_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int16x8_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int16x8_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int16x8_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int16x8_t v539;
  int32x4_t v540;
  int16x8_t v541;
  int16x8_t v542;
  int16x8_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int16x8_t v546;
  int32x4_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int16x8_t v552;
  int16x8_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int16x8_t v556;
  int32x4_t v557;
  int32x4_t v558;
  int16x8_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int16x8_t v562;
  int32x4_t v563;
  int16x8_t v564;
  int16x8_t v565;
  int16x8_t v566;
  int16x8_t v567;
  int16x8_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int16x8_t v575;
  int32x4_t v576;
  int32x4_t v577;
  int16x8_t v578;
  int32x4_t v579;
  int16x8_t v580;
  int32x4_t v581;
  int32x4_t v582;
  int16x8_t v583;
  int32x4_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int32x4_t v588;
  int16x8_t v589;
  int16x8_t v590;
  int32x4_t v591;
  int16x8_t v592;
  int16x8_t v593;
  int16x8_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int16x8_t v598;
  int32x4_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int16x8_t v602;
  int32x4_t v603;
  int16x8_t v604;
  int16x8_t v605;
  int16x8_t v606;
  int16x8_t v607;
  int32x4_t v608;
  int16x8_t v609;
  int16x8_t v610;
  int16x8_t v611;
  int32x4_t v612;
  int16x8_t v613;
  int32x4_t v614;
  int16x8_t v615;
  int32x4_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int16x8_t v619;
  int32x4_t v620;
  int16x8_t v621;
  int16x8_t v622;
  int16x8_t v623;
  int16x8_t v624;
  int16x8_t v625;
  int32x4_t v626;
  int16x8_t v627;
  int32x4_t v628;
  int16x8_t v629;
  int32x4_t v630;
  int16x8_t v631;
  int32x4_t v632;
  int16x8_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int16x8_t v636;
  int16x8_t v637;
  int32x4_t v638;
  int16x8_t v639;
  int16x8_t v640;
  int32x4_t v641;
  int32x4_t v642;
  int16x8_t v643;
  int16x8_t v644;
  int16x8_t v645;
  int16x8_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int16x8_t v649;
  int16x8_t v650;
  int16x8_t v651;
  int16x8_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int16x8_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int16x8_t v658;
  int32x4_t v659;
  int32x4_t v660;
  int16x8_t v661;
  int32x4_t v662;
  int32x4_t v663;
  int16x8_t v664;
  int32x4_t v665;
  int16x8_t v666;
  int16x8_t v667;
  int16x8_t v668;
  int32x4_t v669;
  int16x8_t v670;
  int16x8_t v671;
  int16x8_t v672;
  int16x8_t v673;
  int16x8_t v674;
  int16x8_t v675;
  int16x8_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int16x8_t v681;
  int16x8_t v682;
  int32x4_t v683;
  int16x8_t v684;
  int16x8_t v685;
  int32x4_t v686;
  int16x8_t v687;
  int32x4_t v688;
  int16x8_t v689;
  int32x4_t v690;
  int16x8_t v691;
  int16x8_t v692;
  int16x8_t v693;
  int16x8_t v694;
  int16x8_t v695;
  int16x8_t v696;
  int16x8_t v697;
  int16x8_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int16x8_t v701;
  int16x8_t v702;
  int16x8_t v703;
  int16x8_t v704;
  int16x8_t v705;
  int16x8_t v706;
  int16x8_t v707;
  int16x8_t v708;
  int16x8_t v709;
  int16x8_t v710;
  int16x8_t v711;
  int16x8_t v712;
  int16x8_t v713;
  int16x8_t v714;
  int16x8_t v715;
  int16x8_t v716;
  int16x8_t v717;
  int16x8_t v718;
  int16x8_t v719;
  int16x8_t v720;
  int16x8_t v721;
  int32x4_t v722;
  int16x8_t v723;
  int16x8_t v724;
  int32x4_t v725;
  int16x8_t v726;
  int16x8_t v727;
  int32x4_t v728;
  int16x8_t v729;
  int16x8_t v730;
  int32x4_t v731;
  int16x8_t v732;
  int16x8_t v733;
  int32x4_t v734;
  int16x8_t v735;
  int16x8_t v736;
  int16x8_t v737;
  int32x4_t v738;
  int16x8_t v739;
  int16x8_t v740;
  int16x8_t v741;
  int16x8_t v742;
  int16x8_t v743;
  int16x8_t v744;
  int16x8_t v745;
  int16x8_t v746;
  int16x8_t v747;
  int16x8_t v748;
  int16x8_t v749;
  int16x8_t v750;
  int16x8_t v751;
  int16x8_t v752;

  v3 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 593];
  v4 = vld1q_dup_s16(v3);
  v5 = *(int16x8_t *)(a1 + 272);
  v6 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 623];
  v7 = vld1q_dup_s16(v6);
  v719 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v4.i8), 0xCuLL), vmull_high_s16(v5, v4), 0xCuLL);
  v711 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v7.i8), 0xCuLL), vmull_high_s16(v5, v7), 0xCuLL);
  v8 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 591]));
  v9 = *(int16x8_t *)(a1 + 240);
  v10 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 625];
  v11 = vld1q_dup_s16(v10);
  v715 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v8.i8), 0xCuLL), vmull_high_s16(v9, v8), 0xCuLL);
  v707 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v11.i8), 0xCuLL), vmull_high_s16(v9, v11), 0xCuLL);
  v12 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 585];
  v13 = vld1q_dup_s16(v12);
  v14 = *(int16x8_t *)(a1 + 144);
  v15 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 631];
  v16 = vld1q_dup_s16(v15);
  LODWORD(v15) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 636]);
  v17 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 580]);
  v18 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 604]);
  v19 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v13.i8), 0xCuLL), vmull_high_s16(v14, v13), 0xCuLL);
  v20 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v16.i8), 0xCuLL), vmull_high_s16(v14, v16), 0xCuLL);
  v21 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 599]));
  v22 = *(int16x8_t *)(a1 + 368);
  v23 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 617];
  v24 = vld1q_dup_s16(v23);
  v25 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 612]);
  LODWORD(v23) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 620]);
  v26 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 596]);
  v27 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v21.i8), 0xCuLL), vmull_high_s16(v22, v21), 0xCuLL);
  v28 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v24.i8), 0xCuLL), vmull_high_s16(v22, v24), 0xCuLL);
  v29 = *(int16x8_t *)(a1 + 400);
  v30 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 601];
  v31 = vld1q_dup_s16(v30);
  v32 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 615];
  v33 = vld1q_dup_s16(v32);
  v34 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v31.i8), 0xCuLL), vmull_high_s16(v29, v31), 0xCuLL);
  v35 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v33.i8), 0xCuLL), vmull_high_s16(v29, v33), 0xCuLL);
  v36 = *(int16x8_t *)(a1 + 112);
  v37 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 583]));
  v38 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 633];
  v39 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v37.i8);
  v40 = vmull_high_s16(v36, v37);
  v41 = vld1q_dup_s16(v38);
  v42 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 597];
  v43 = vld1q_dup_s16(v42);
  v44 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 619];
  v45 = vld1q_dup_s16(v44);
  v46 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 587]));
  v47 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 629];
  v48 = vld1q_dup_s16(v47);
  v49 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v41.i8);
  v50 = vdupq_n_s16(-v18);
  v51 = vmull_high_s16(v36, v41);
  v52 = vrshrn_n_s32(v39, 0xCuLL);
  v53 = vdupq_n_s16(-v17);
  *(int16x4_t *)v39.i8 = vrshrn_n_s32(v49, 0xCuLL);
  v54 = vdupq_n_s16(-(int)v15);
  v55 = vrshrn_high_n_s32(v52, v40, 0xCuLL);
  v56 = vrshrn_high_n_s32(*(int16x4_t *)v39.i8, v51, 0xCuLL);
  v57 = *(int16x8_t *)(a1 + 336);
  v58 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v43.i8), 0xCuLL), vmull_high_s16(v57, v43), 0xCuLL);
  v59 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v45.i8), 0xCuLL), vmull_high_s16(v57, v45), 0xCuLL);
  v60 = *(int16x8_t *)(a1 + 176);
  v61 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v46.i8), 0xCuLL), vmull_high_s16(v60, v46), 0xCuLL);
  v62 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v48.i8), 0xCuLL), vmull_high_s16(v60, v48), 0xCuLL);
  v63 = vqsubq_s16(v715, v719);
  v64 = vqsubq_s16(v19, v27);
  v65 = vqsubq_s16(v55, v34);
  v66 = vqsubq_s16(v56, v35);
  v67 = vqsubq_s16(v20, v28);
  v68 = vqsubq_s16(v707, v711);
  v731 = vmlal_s16(vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v53.i8);
  v728 = vmlal_high_s16(vmull_high_s16(v68, v54), v63, v53);
  v725 = vmlsl_s16(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v54.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v53.i8);
  v722 = vmlsl_high_s16(vmull_high_s16(v63, v54), v68, v53);
  v69 = vdupq_n_s16(v18);
  v705 = vdupq_n_s16(v25);
  v70 = vmlal_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v705.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v69.i8);
  v71 = vmlal_high_s16(vmull_high_s16(v64, v705), v67, v69);
  v72 = vmlsl_s16(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v705.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v69.i8);
  v73 = vmlsl_high_s16(vmull_high_s16(v67, v705), v64, v69);
  v74 = vdupq_n_s16(-v25);
  v75 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v50.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v74.i8);
  v703 = v50;
  v76 = vmlal_high_s16(vmull_high_s16(v66, v50), v65, v74);
  v77 = vmlsl_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v50.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v74.i8);
  v78 = vmlsl_high_s16(vmull_high_s16(v65, v50), v66, v74);
  v79 = vqsubq_s16(v61, v58);
  v80 = vqsubq_s16(v62, v59);
  v81 = vdupq_n_s16(-v26);
  v82 = vdupq_n_s16(-(int)v23);
  v665 = vmlal_s16(vmull_s16(*(int16x4_t *)v80.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v79.i8, *(int16x4_t *)v81.i8);
  v83 = vmlal_high_s16(vmull_high_s16(v80, v82), v79, v81);
  v84 = vmlsl_s16(vmull_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v82.i8), *(int16x4_t *)v80.i8, *(int16x4_t *)v81.i8);
  v614 = vmlsl_high_s16(vmull_high_s16(v79, v82), v80, v81);
  v85 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 589];
  v86 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 627];
  v87 = *(int16x8_t *)(a1 + 208);
  v88 = vld1q_dup_s16(v85);
  v89 = vld1q_dup_s16(v86);
  v610 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v88.i8), 0xCuLL), vmull_high_s16(v87, v88), 0xCuLL);
  v602 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v89.i8), 0xCuLL), vmull_high_s16(v87, v89), 0xCuLL);
  v90 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 621];
  v91 = *(int16x8_t *)(a1 + 304);
  v92 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 595]));
  v93 = vld1q_dup_s16(v90);
  v594 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v92.i8), 0xCuLL), vmull_high_s16(v91, v92), 0xCuLL);
  v742 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v93.i8), 0xCuLL), vmull_high_s16(v91, v93), 0xCuLL);
  LODWORD(v85) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 588]);
  LODWORD(v90) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 628]);
  v94 = vqsubq_s16(v610, v594);
  v95 = vqsubq_s16(v602, v742);
  v750 = vdupq_n_s16(v90);
  v96 = vdupq_n_s16(v85);
  v738 = vmlal_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v750.i8), *(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8);
  v734 = vmlal_high_s16(vmull_high_s16(v94, v750), v95, v96);
  v630 = vmlsl_s16(vmull_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v750.i8), *(int16x4_t *)v94.i8, *(int16x4_t *)v96.i8);
  v626 = vmlsl_high_s16(vmull_high_s16(v95, v750), v94, v96);
  v97 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 605];
  v98 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 611];
  v99 = *(int16x8_t *)(a1 + 464);
  v100 = vld1q_dup_s16(v97);
  v101 = vld1q_dup_s16(v98);
  v622 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v100.i8), 0xCuLL), vmull_high_s16(v99, v100), 0xCuLL);
  v606 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v101.i8), 0xCuLL), vmull_high_s16(v99, v101), 0xCuLL);
  v102 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 637];
  v103 = *(int16x8_t *)(a1 + 48);
  v104 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 579]));
  v105 = vld1q_dup_s16(v102);
  v618 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v104.i8), 0xCuLL), vmull_high_s16(v103, v104), 0xCuLL);
  v598 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v105.i8), 0xCuLL), vmull_high_s16(v103, v105), 0xCuLL);
  v106 = vqsubq_s16(v618, v622);
  v746 = vdupq_n_s16(-(int)v85);
  v107 = vqsubq_s16(v598, v606);
  v108 = vdupq_n_s16(-(int)v90);
  v591 = vmlal_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v106.i8, *(int16x4_t *)v108.i8);
  v588 = vmlal_high_s16(vmull_high_s16(v107, v746), v106, v108);
  v581 = vmlsl_high_s16(vmull_high_s16(v106, v746), v107, v108);
  v584 = vmlsl_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v746.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v108.i8);
  v109 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v110 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v111 = *(int16x8_t *)(a1 + 288);
  v112 = vld1q_dup_s16(v109);
  v113 = vld1q_dup_s16(v110);
  v700 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v112.i8), 0xCuLL), vmull_high_s16(v111, v112), 0xCuLL);
  v694 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v113.i8), 0xCuLL), vmull_high_s16(v111, v113), 0xCuLL);
  v114 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v115 = *(int16x8_t *)(a1 + 224);
  v116 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 590]));
  v117 = vld1q_dup_s16(v114);
  v697 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v116.i8), 0xCuLL), vmull_high_s16(v115, v116), 0xCuLL);
  v692 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v117.i8), 0xCuLL), vmull_high_s16(v115, v117), 0xCuLL);
  v677 = vqaddq_s16(v19, v27);
  v680 = vqaddq_s16(v55, v34);
  v672 = vqaddq_s16(v56, v35);
  v674 = vqaddq_s16(v20, v28);
  v650 = vrshrn_high_n_s32(vrshrn_n_s32(v70, 0xCuLL), v71, 0xCuLL);
  v637 = vrshrn_high_n_s32(vrshrn_n_s32(v72, 0xCuLL), v73, 0xCuLL);
  v640 = vrshrn_high_n_s32(vrshrn_n_s32(v75, 0xCuLL), v76, 0xCuLL);
  v644 = vrshrn_high_n_s32(vrshrn_n_s32(v77, 0xCuLL), v78, 0xCuLL);
  LODWORD(v109) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 632]);
  LODWORD(v114) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 584]);
  v118 = vqsubq_s16(v697, v700);
  v119 = vqsubq_s16(v692, v694);
  v120 = vdupq_n_s16(-(int)v114);
  v121 = vdupq_n_s16(-(int)v109);
  v690 = vmlal_s16(vmull_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v120.i8);
  v688 = vmlal_high_s16(vmull_high_s16(v119, v121), v118, v120);
  v683 = vmlsl_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v119.i8, *(int16x4_t *)v120.i8);
  v686 = vmlsl_high_s16(vmull_high_s16(v118, v121), v119, v120);
  v122 = vqsubq_s16(v680, v677);
  v123 = vqsubq_s16(v672, v674);
  v669 = vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v120.i8);
  v662 = vmlal_high_s16(vmull_high_s16(v123, v121), v122, v120);
  v656 = vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v123.i8, *(int16x4_t *)v120.i8);
  v659 = vmlsl_high_s16(vmull_high_s16(v122, v121), v123, v120);
  v124 = vqsubq_s16(v640, v637);
  v125 = vqsubq_s16(v644, v650);
  v653 = vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v124.i8, *(int16x4_t *)v120.i8);
  v634 = vmlal_high_s16(vmull_high_s16(v125, v121), v124, v120);
  v647 = vmlsl_s16(vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v121.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v120.i8);
  v641 = vmlsl_high_s16(vmull_high_s16(v124, v121), v125, v120);
  v126 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 581];
  v127 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 635];
  v128 = vld1q_dup_s16(v126);
  v129 = *(int16x8_t *)(a1 + 80);
  v130 = vld1q_dup_s16(v127);
  v131 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v128.i8), 0xCuLL), vmull_high_s16(v129, v128), 0xCuLL);
  v132 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v130.i8), 0xCuLL), vmull_high_s16(v129, v130), 0xCuLL);
  v133 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 613];
  v134 = *(int16x8_t *)(a1 + 432);
  v135 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 603]));
  v136 = vld1q_dup_s16(v133);
  v137 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v135.i8), 0xCuLL), vmull_high_s16(v134, v135), 0xCuLL);
  v138 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v136.i8), 0xCuLL), vmull_high_s16(v134, v136), 0xCuLL);
  v139 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v140 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  v141 = *(int16x8_t *)(a1 + 160);
  v142 = vld1q_dup_s16(v139);
  v143 = vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v142.i8);
  v144 = vmull_high_s16(v141, v142);
  v145 = vld1q_dup_s16(v140);
  v566 = vrshrn_high_n_s32(vrshrn_n_s32(v143, 0xCuLL), v144, 0xCuLL);
  v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v141.i8, *(int16x4_t *)v145.i8), 0xCuLL), vmull_high_s16(v141, v145), 0xCuLL);
  v147 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v148 = *(int16x8_t *)(a1 + 352);
  v149 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 598]));
  v150 = vld1q_dup_s16(v147);
  v569 = v146;
  v572 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v149.i8), 0xCuLL), vmull_high_s16(v148, v149), 0xCuLL);
  v575 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v150.i8), 0xCuLL), vmull_high_s16(v148, v150), 0xCuLL);
  v151 = vqaddq_s16(v131, v137);
  v152 = vqsubq_s16(v131, v137);
  v553 = v151;
  v556 = vqaddq_s16(v61, v58);
  v549 = vqaddq_s16(v62, v59);
  v153 = vqsubq_s16(v132, v138);
  v559 = vqaddq_s16(v132, v138);
  v154 = vdupq_n_s16(v26);
  v155 = vdupq_n_s16(v23);
  v578 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v152.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v153.i8, *(int16x4_t *)v155.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v152, v154), v153, v155), 0xCuLL);
  v156 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v153.i8, *(int16x4_t *)v154.i8), *(int16x4_t *)v152.i8, *(int16x4_t *)v155.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v153, v154), v152, v155), 0xCuLL);
  v157 = vrshrn_high_n_s32(vrshrn_n_s32(v665, 0xCuLL), v83, 0xCuLL);
  v158 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xCuLL), v614, 0xCuLL);
  LODWORD(v23) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 600]);
  v159 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 616]);
  v160 = vqsubq_s16(v566, v572);
  v161 = vqsubq_s16(v146, v575);
  v666 = vdupq_n_s16(v159);
  v162 = vdupq_n_s16(v23);
  v563 = vmlal_s16(vmull_s16(*(int16x4_t *)v160.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v161.i8, *(int16x4_t *)v162.i8);
  v545 = vmlal_high_s16(vmull_high_s16(v160, v666), v161, v162);
  v163 = vmlsl_s16(vmull_s16(*(int16x4_t *)v161.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v160.i8, *(int16x4_t *)v162.i8);
  v525 = vmlsl_high_s16(vmull_high_s16(v161, v666), v160, v162);
  v164 = vqsubq_s16(v156, v157);
  v165 = vqsubq_s16(v578, v158);
  v540 = vmlal_s16(vmull_s16(*(int16x4_t *)v164.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v165.i8, *(int16x4_t *)v162.i8);
  v537 = vmlal_high_s16(vmull_high_s16(v164, v666), v165, v162);
  v529 = vmlsl_high_s16(vmull_high_s16(v165, v666), v164, v162);
  v533 = vmlsl_s16(vmull_s16(*(int16x4_t *)v165.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v164.i8, *(int16x4_t *)v162.i8);
  v166 = vqsubq_s16(v151, v556);
  v167 = vqsubq_s16(v559, v549);
  v521 = vmlal_s16(vmull_s16(*(int16x4_t *)v166.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v167.i8, *(int16x4_t *)v162.i8);
  v517 = vmlal_high_s16(vmull_high_s16(v166, v666), v167, v162);
  v510 = vmlsl_high_s16(vmull_high_s16(v167, v666), v166, v162);
  v514 = vmlsl_s16(vmull_s16(*(int16x4_t *)v167.i8, *(int16x4_t *)v666.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v162.i8);
  v168 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v169 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v170 = *(int16x8_t *)(a1 + 416);
  v171 = vld1q_dup_s16(v168);
  v172 = vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v171.i8);
  v173 = vmull_high_s16(v170, v171);
  v174 = vld1q_dup_s16(v169);
  v175 = vrshrn_high_n_s32(vrshrn_n_s32(v172, 0xCuLL), v173, 0xCuLL);
  v176 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v174.i8), 0xCuLL), vmull_high_s16(v170, v174), 0xCuLL);
  v177 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v178 = *(int16x8_t *)(a1 + 96);
  v179 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 582]));
  v180 = vld1q_dup_s16(v177);
  v181 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v179.i8), 0xCuLL), vmull_high_s16(v178, v179), 0xCuLL);
  v182 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v178.i8, *(int16x4_t *)v180.i8), 0xCuLL), vmull_high_s16(v178, v180), 0xCuLL);
  v504 = vqaddq_s16(v610, v594);
  v507 = vqaddq_s16(v618, v622);
  v607 = vqaddq_s16(v598, v606);
  v611 = vqaddq_s16(v602, v742);
  v183 = vrshrn_high_n_s32(vrshrn_n_s32(v738, 0xCuLL), v734, 0xCuLL);
  v184 = vrshrn_high_n_s32(vrshrn_n_s32(v630, 0xCuLL), v626, 0xCuLL);
  v185 = vrshrn_high_n_s32(vrshrn_n_s32(v591, 0xCuLL), v588, 0xCuLL);
  v186 = vrshrn_high_n_s32(vrshrn_n_s32(v584, 0xCuLL), v581, 0xCuLL);
  v187 = vqsubq_s16(v181, v175);
  v188 = vdupq_n_s16(-(int)v23);
  v189 = vqsubq_s16(v182, v176);
  v190 = vdupq_n_s16(-v159);
  v191 = vmlal_s16(vmull_s16(*(int16x4_t *)v189.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v187.i8, *(int16x4_t *)v190.i8);
  v192 = vmlal_high_s16(vmull_high_s16(v189, v188), v187, v190);
  v193 = vmlsl_s16(vmull_s16(*(int16x4_t *)v187.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v189.i8, *(int16x4_t *)v190.i8);
  v194 = vmlsl_high_s16(vmull_high_s16(v187, v188), v189, v190);
  v195 = vqsubq_s16(v507, v504);
  v196 = vqsubq_s16(v607, v611);
  v197 = vmlal_s16(vmull_s16(*(int16x4_t *)v196.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v195.i8, *(int16x4_t *)v190.i8);
  v198 = vmlal_high_s16(vmull_high_s16(v196, v188), v195, v190);
  v199 = vmlsl_s16(vmull_s16(*(int16x4_t *)v195.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v196.i8, *(int16x4_t *)v190.i8);
  v200 = vmlsl_high_s16(vmull_high_s16(v195, v188), v196, v190);
  v201 = vqsubq_s16(v185, v184);
  v202 = vqsubq_s16(v186, v183);
  v203 = vmlal_s16(vmull_s16(*(int16x4_t *)v202.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v201.i8, *(int16x4_t *)v190.i8);
  v204 = vmlal_high_s16(vmull_high_s16(v202, v188), v201, v190);
  v623 = v188;
  v205 = vmlsl_s16(vmull_s16(*(int16x4_t *)v201.i8, *(int16x4_t *)v188.i8), *(int16x4_t *)v202.i8, *(int16x4_t *)v190.i8);
  v206 = vmlsl_high_s16(vmull_high_s16(v201, v188), v202, v190);
  v207 = *(int16x8_t *)(a1 + 320);
  v592 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v155.i8), 0xCuLL), vmull_high_s16(v207, v155), 0xCuLL);
  v595 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v154.i8), 0xCuLL), vmull_high_s16(v207, v154), 0xCuLL);
  v208 = *(int16x8_t *)(a1 + 192);
  v585 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v750.i8), 0xCuLL), vmull_high_s16(v208, v750), 0xCuLL);
  v589 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v746.i8), 0xCuLL), vmull_high_s16(v208, v746), 0xCuLL);
  v631 = vqaddq_s16(v566, v572);
  v627 = vqaddq_s16(v181, v175);
  v619 = vqaddq_s16(v182, v176);
  v615 = vqaddq_s16(v569, v575);
  v735 = vrshrn_high_n_s32(vrshrn_n_s32(v563, 0xCuLL), v545, 0xCuLL);
  v751 = vrshrn_high_n_s32(vrshrn_n_s32(v163, 0xCuLL), v525, 0xCuLL);
  v743 = vrshrn_high_n_s32(vrshrn_n_s32(v191, 0xCuLL), v192, 0xCuLL);
  v564 = vrshrn_high_n_s32(vrshrn_n_s32(v193, 0xCuLL), v194, 0xCuLL);
  v567 = vqaddq_s16(v553, v556);
  v739 = vqaddq_s16(v156, v157);
  v570 = vqaddq_s16(v507, v504);
  v508 = vqaddq_s16(v186, v183);
  v501 = vqaddq_s16(v185, v184);
  v505 = vqaddq_s16(v578, v158);
  v543 = vqaddq_s16(v607, v611);
  v546 = vqaddq_s16(v559, v549);
  LODWORD(v23) = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 624]);
  v209 = LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 592]);
  v210 = vqsubq_s16(v589, v595);
  v211 = vdupq_n_s16(-v209);
  v212 = vdupq_n_s16(-(int)v23);
  v213 = vqsubq_s16(v585, v592);
  v612 = vmlal_s16(vmull_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v211.i8);
  v608 = vmlal_high_s16(vmull_high_s16(v213, v212), v210, v211);
  v603 = vmlsl_s16(vmull_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v213.i8, *(int16x4_t *)v211.i8);
  v599 = vmlsl_high_s16(vmull_high_s16(v210, v212), v213, v211);
  v488 = vrshrn_high_n_s32(vrshrn_n_s32(v540, 0xCuLL), v537, 0xCuLL);
  v476 = vrshrn_high_n_s32(vrshrn_n_s32(v533, 0xCuLL), v529, 0xCuLL);
  v747 = vrshrn_high_n_s32(vrshrn_n_s32(v521, 0xCuLL), v517, 0xCuLL);
  v470 = vrshrn_high_n_s32(vrshrn_n_s32(v514, 0xCuLL), v510, 0xCuLL);
  v472 = vrshrn_high_n_s32(vrshrn_n_s32(v197, 0xCuLL), v198, 0xCuLL);
  v474 = vrshrn_high_n_s32(vrshrn_n_s32(v199, 0xCuLL), v200, 0xCuLL);
  v480 = vrshrn_high_n_s32(vrshrn_n_s32(v203, 0xCuLL), v204, 0xCuLL);
  v486 = vrshrn_high_n_s32(vrshrn_n_s32(v205, 0xCuLL), v206, 0xCuLL);
  v214 = vqsubq_s16(v627, v631);
  v215 = vqsubq_s16(v619, v615);
  v582 = vmlal_s16(vmull_s16(*(int16x4_t *)v215.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v214.i8, *(int16x4_t *)v211.i8);
  v579 = vmlal_high_s16(vmull_high_s16(v215, v212), v214, v211);
  v573 = vmlsl_high_s16(vmull_high_s16(v214, v212), v215, v211);
  v576 = vmlsl_s16(vmull_s16(*(int16x4_t *)v214.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v215.i8, *(int16x4_t *)v211.i8);
  v216 = vqsubq_s16(v743, v751);
  v217 = vqsubq_s16(v564, v735);
  v560 = vmlal_s16(vmull_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v216.i8, *(int16x4_t *)v211.i8);
  v557 = vmlal_high_s16(vmull_high_s16(v217, v212), v216, v211);
  v550 = vmlsl_high_s16(vmull_high_s16(v216, v212), v217, v211);
  v554 = vmlsl_s16(vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v217.i8, *(int16x4_t *)v211.i8);
  v218 = vqsubq_s16(v570, v567);
  v219 = vqsubq_s16(v543, v546);
  v538 = vmlal_s16(vmull_s16(*(int16x4_t *)v219.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v218.i8, *(int16x4_t *)v211.i8);
  v534 = vmlal_high_s16(vmull_high_s16(v219, v212), v218, v211);
  v526 = vmlsl_s16(vmull_s16(*(int16x4_t *)v218.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v219.i8, *(int16x4_t *)v211.i8);
  v530 = vmlsl_high_s16(vmull_high_s16(v218, v212), v219, v211);
  v220 = vqsubq_s16(v501, v739);
  v221 = vqsubq_s16(v508, v505);
  v522 = vmlal_s16(vmull_s16(*(int16x4_t *)v221.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v220.i8, *(int16x4_t *)v211.i8);
  v518 = vmlal_high_s16(vmull_high_s16(v221, v212), v220, v211);
  v511 = vmlsl_s16(vmull_s16(*(int16x4_t *)v220.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v221.i8, *(int16x4_t *)v211.i8);
  v515 = vmlsl_high_s16(vmull_high_s16(v220, v212), v221, v211);
  v222 = vqsubq_s16(v480, v476);
  v223 = vqsubq_s16(v486, v488);
  v498 = vmlal_s16(vmull_s16(*(int16x4_t *)v223.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v222.i8, *(int16x4_t *)v211.i8);
  v496 = vmlal_high_s16(vmull_high_s16(v223, v212), v222, v211);
  v492 = vmlsl_s16(vmull_s16(*(int16x4_t *)v222.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v223.i8, *(int16x4_t *)v211.i8);
  v494 = vmlsl_high_s16(vmull_high_s16(v222, v212), v223, v211);
  v224 = vqsubq_s16(v472, v470);
  v225 = vqsubq_s16(v474, v747);
  v482 = vmlal_s16(vmull_s16(*(int16x4_t *)v225.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v224.i8, *(int16x4_t *)v211.i8);
  v478 = vmlal_high_s16(vmull_high_s16(v225, v212), v224, v211);
  v484 = vmlsl_s16(vmull_s16(*(int16x4_t *)v224.i8, *(int16x4_t *)v212.i8), *(int16x4_t *)v225.i8, *(int16x4_t *)v211.i8);
  v490 = vmlsl_high_s16(vmull_high_s16(v224, v212), v225, v211);
  v226 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 577];
  v227 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 639];
  v228 = *(int16x8_t *)(a1 + 16);
  v229 = vld1q_dup_s16(v226);
  v230 = vld1q_dup_s16(v227);
  v231 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v228.i8, *(int16x4_t *)v229.i8), 0xCuLL), vmull_high_s16(v228, v229), 0xCuLL);
  v232 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v228.i8, *(int16x4_t *)v230.i8), 0xCuLL), vmull_high_s16(v228, v230), 0xCuLL);
  v233 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 609];
  v234 = *(int16x8_t *)(a1 + 496);
  v235 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 607]));
  v236 = vld1q_dup_s16(v233);
  v237 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v234.i8, *(int16x4_t *)v235.i8), 0xCuLL), vmull_high_s16(v234, v235), 0xCuLL);
  v238 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v234.i8, *(int16x4_t *)v236.i8), 0xCuLL), vmull_high_s16(v234, v236), 0xCuLL);
  v239 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v240 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v241 = vld1q_dup_s16(v239);
  v242 = *(int16x8_t *)(a1 + 32);
  v243 = vld1q_dup_s16(v240);
  v244 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v242.i8, *(int16x4_t *)v241.i8), 0xCuLL), vmull_high_s16(v242, v241), 0xCuLL);
  v245 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v242.i8, *(int16x4_t *)v243.i8), 0xCuLL), vmull_high_s16(v242, v243), 0xCuLL);
  v246 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v247 = vdupq_n_s16(-LOWORD(av1_cospi_arr_data[64 * (uint64_t)a3 - 606]));
  v248 = *(int16x8_t *)(a1 + 480);
  v249 = vld1q_dup_s16(v246);
  v250 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v248.i8, *(int16x4_t *)v247.i8), 0xCuLL), vmull_high_s16(v248, v247), 0xCuLL);
  v251 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v248.i8, *(int16x4_t *)v249.i8), 0xCuLL), vmull_high_s16(v248, v249), 0xCuLL);
  v252 = vqaddq_s16(v231, v237);
  v253 = vqsubq_s16(v231, v237);
  v254 = vqaddq_s16(v715, v719);
  v716 = vqaddq_s16(v707, v711);
  v255 = vdupq_n_s16(v17);
  v256 = vdupq_n_s16(v15);
  v257 = vqsubq_s16(v232, v238);
  v468 = vqaddq_s16(v232, v238);
  v258 = vmlal_s16(vmull_s16(*(int16x4_t *)v253.i8, *(int16x4_t *)v255.i8), *(int16x4_t *)v257.i8, *(int16x4_t *)v256.i8);
  v259 = vmlal_high_s16(vmull_high_s16(v253, v255), v257, v256);
  v260 = vmlsl_s16(vmull_s16(*(int16x4_t *)v257.i8, *(int16x4_t *)v255.i8), *(int16x4_t *)v253.i8, *(int16x4_t *)v256.i8);
  v261 = vmlsl_high_s16(vmull_high_s16(v257, v255), v253, v256);
  v262 = *(int16x8_t *)(a1 + 64);
  v263 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v255.i8), 0xCuLL), vmull_high_s16(v262, v255), 0xCuLL);
  v264 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v256.i8), 0xCuLL), vmull_high_s16(v262, v256), 0xCuLL);
  v265 = *(int16x8_t *)(a1 + 448);
  v266 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v265.i8, *(int16x4_t *)v703.i8), 0xCuLL), vmull_high_s16(v265, v703), 0xCuLL);
  v267 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v265.i8, *(int16x4_t *)v705.i8), 0xCuLL), vmull_high_s16(v265, v705), 0xCuLL);
  v268 = vrshrn_high_n_s32(vrshrn_n_s32(v258, 0xCuLL), v259, 0xCuLL);
  v269 = vrshrn_high_n_s32(vrshrn_n_s32(v260, 0xCuLL), v261, 0xCuLL);
  v270 = vrshrn_high_n_s32(vrshrn_n_s32(v731, 0xCuLL), v728, 0xCuLL);
  v271 = vrshrn_high_n_s32(vrshrn_n_s32(v725, 0xCuLL), v722, 0xCuLL);
  v272 = vqaddq_s16(v244, v250);
  v273 = vqsubq_s16(v244, v250);
  v274 = vqaddq_s16(v697, v700);
  v712 = vqaddq_s16(v692, v694);
  v275 = vdupq_n_s16(v114);
  v276 = vqsubq_s16(v245, v251);
  v708 = vqaddq_s16(v245, v251);
  v277 = vdupq_n_s16(v109);
  v278 = vmlal_s16(vmull_s16(*(int16x4_t *)v273.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v276.i8, *(int16x4_t *)v277.i8);
  v279 = vmlal_high_s16(vmull_high_s16(v273, v275), v276, v277);
  v280 = vmlsl_s16(vmull_s16(*(int16x4_t *)v276.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v273.i8, *(int16x4_t *)v277.i8);
  v281 = vmlsl_high_s16(vmull_high_s16(v276, v275), v273, v277);
  v282 = vqsubq_s16(v269, v270);
  v283 = vqsubq_s16(v268, v271);
  v284 = vmlal_s16(vmull_s16(*(int16x4_t *)v282.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v283.i8, *(int16x4_t *)v277.i8);
  v285 = vmlal_high_s16(vmull_high_s16(v282, v275), v283, v277);
  v286 = vmlsl_s16(vmull_s16(*(int16x4_t *)v283.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v282.i8, *(int16x4_t *)v277.i8);
  v287 = vmlsl_high_s16(vmull_high_s16(v283, v275), v282, v277);
  v288 = vqsubq_s16(v252, v254);
  v289 = vqsubq_s16(v468, v716);
  v290 = vmlal_s16(vmull_s16(*(int16x4_t *)v288.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v289.i8, *(int16x4_t *)v277.i8);
  v291 = vmlal_high_s16(vmull_high_s16(v288, v275), v289, v277);
  v292 = vmlsl_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v275.i8), *(int16x4_t *)v288.i8, *(int16x4_t *)v277.i8);
  v293 = vmlsl_high_s16(vmull_high_s16(v289, v275), v288, v277);
  v294 = *(int16x8_t *)(a1 + 128);
  v729 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v294.i8, *(int16x4_t *)v275.i8), 0xCuLL), vmull_high_s16(v294, v275), 0xCuLL);
  v732 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v294.i8, *(int16x4_t *)v277.i8), 0xCuLL), vmull_high_s16(v294, v277), 0xCuLL);
  v295 = *(int16x8_t *)(a1 + 384);
  v624 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v295.i8, *(int16x4_t *)v623.i8), 0xCuLL), vmull_high_s16(v295, v623), 0xCuLL);
  v541 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v295.i8, *(int16x4_t *)v666.i8), 0xCuLL), vmull_high_s16(v295, v666), 0xCuLL);
  v296 = vrshrn_high_n_s32(vrshrn_n_s32(v278, 0xCuLL), v279, 0xCuLL);
  v297 = vrshrn_high_n_s32(vrshrn_n_s32(v280, 0xCuLL), v281, 0xCuLL);
  v298 = vrshrn_high_n_s32(vrshrn_n_s32(v690, 0xCuLL), v688, 0xCuLL);
  v299 = vrshrn_high_n_s32(vrshrn_n_s32(v683, 0xCuLL), v686, 0xCuLL);
  v667 = vqaddq_s16(v263, v266);
  v300 = vqsubq_s16(v263, v266);
  v698 = vqaddq_s16(v589, v595);
  v720 = vqaddq_s16(v585, v592);
  v301 = vqsubq_s16(v264, v267);
  v726 = vqaddq_s16(v264, v267);
  v302 = vqaddq_s16(v252, v254);
  v303 = vqaddq_s16(v269, v270);
  v304 = vqaddq_s16(v640, v637);
  v305 = vqaddq_s16(v680, v677);
  v306 = vqaddq_s16(v672, v674);
  v307 = vqaddq_s16(v644, v650);
  v308 = vqaddq_s16(v268, v271);
  v309 = vdupq_n_s16(v209);
  v310 = vqaddq_s16(v468, v716);
  v311 = vdupq_n_s16(v23);
  v723 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v300.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v301.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v300, v309), v301, v311), 0xCuLL);
  v312 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v301.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v300.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v301, v309), v300, v311), 0xCuLL);
  v645 = vrshrn_high_n_s32(vrshrn_n_s32(v612, 0xCuLL), v608, 0xCuLL);
  v651 = vrshrn_high_n_s32(vrshrn_n_s32(v603, 0xCuLL), v599, 0xCuLL);
  v313 = vrshrn_high_n_s32(vrshrn_n_s32(v284, 0xCuLL), v285, 0xCuLL);
  v314 = vrshrn_high_n_s32(vrshrn_n_s32(v286, 0xCuLL), v287, 0xCuLL);
  v315 = vrshrn_high_n_s32(vrshrn_n_s32(v290, 0xCuLL), v291, 0xCuLL);
  v316 = vrshrn_high_n_s32(vrshrn_n_s32(v292, 0xCuLL), v293, 0xCuLL);
  v317 = vrshrn_high_n_s32(vrshrn_n_s32(v669, 0xCuLL), v662, 0xCuLL);
  v318 = vrshrn_high_n_s32(vrshrn_n_s32(v656, 0xCuLL), v659, 0xCuLL);
  v319 = vrshrn_high_n_s32(vrshrn_n_s32(v653, 0xCuLL), v634, 0xCuLL);
  v320 = vrshrn_high_n_s32(vrshrn_n_s32(v647, 0xCuLL), v641, 0xCuLL);
  v466 = vqaddq_s16(v297, v298);
  v321 = vqsubq_s16(v297, v298);
  v469 = vqaddq_s16(v272, v274);
  v322 = vqsubq_s16(v272, v274);
  v717 = vqaddq_s16(v743, v751);
  v467 = vqaddq_s16(v627, v631);
  v744 = vqaddq_s16(v619, v615);
  v684 = vqaddq_s16(v564, v735);
  v323 = vqsubq_s16(v296, v299);
  v736 = vqaddq_s16(v296, v299);
  v324 = vqsubq_s16(v708, v712);
  v713 = vqaddq_s16(v708, v712);
  v325 = (const __int16 *)&av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v326 = vld1q_dup_s16(v325);
  v327 = vqsubq_s16(v729, v624);
  v328 = vqsubq_s16(v732, v541);
  v663 = vmlal_s16(vmull_s16(*(int16x4_t *)v327.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v328.i8, *(int16x4_t *)v326.i8);
  v660 = vmlal_high_s16(vmull_high_s16(v327, v326), v328, v326);
  v657 = vmlsl_s16(vmull_s16(*(int16x4_t *)v328.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v327.i8, *(int16x4_t *)v326.i8);
  v654 = vmlsl_high_s16(vmull_high_s16(v328, v326), v327, v326);
  v681 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v321.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v323.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v321, v309), v323, v311), 0xCuLL);
  v329 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v323.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v321.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v323, v309), v321, v311), 0xCuLL);
  v593 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v322.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v324.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v322, v309), v324, v311), 0xCuLL);
  v596 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v324.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v322.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v324, v309), v322, v311), 0xCuLL);
  v604 = vrshrn_high_n_s32(vrshrn_n_s32(v582, 0xCuLL), v579, 0xCuLL);
  v600 = vrshrn_high_n_s32(vrshrn_n_s32(v576, 0xCuLL), v573, 0xCuLL);
  v330 = vrshrn_high_n_s32(vrshrn_n_s32(v560, 0xCuLL), v557, 0xCuLL);
  v586 = vrshrn_high_n_s32(vrshrn_n_s32(v554, 0xCuLL), v550, 0xCuLL);
  v687 = vqaddq_s16(v316, v317);
  v331 = vqsubq_s16(v316, v317);
  v691 = vqaddq_s16(v314, v319);
  v332 = vqsubq_s16(v314, v319);
  v704 = vqaddq_s16(v303, v304);
  v333 = vqsubq_s16(v303, v304);
  v752 = vqaddq_s16(v302, v305);
  v334 = vqsubq_s16(v302, v305);
  v673 = vqaddq_s16(v470, v472);
  v689 = vqaddq_s16(v476, v480);
  v693 = vqaddq_s16(v739, v501);
  v706 = vqaddq_s16(v567, v570);
  v740 = vqaddq_s16(v543, v546);
  v709 = vqaddq_s16(v508, v505);
  v701 = vqaddq_s16(v486, v488);
  v678 = vqaddq_s16(v474, v747);
  v335 = vqsubq_s16(v315, v318);
  v675 = vqaddq_s16(v318, v315);
  v336 = vqsubq_s16(v313, v320);
  v670 = vqaddq_s16(v320, v313);
  v337 = vqsubq_s16(v308, v307);
  v748 = vqaddq_s16(v307, v308);
  v338 = vqsubq_s16(v310, v306);
  v695 = vqaddq_s16(v306, v310);
  v339 = vqsubq_s16(v312, v645);
  v340 = vqsubq_s16(v723, v651);
  v648 = vmlal_s16(vmull_s16(*(int16x4_t *)v339.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v340.i8, *(int16x4_t *)v326.i8);
  v642 = vmlal_high_s16(vmull_high_s16(v339, v326), v340, v326);
  v638 = vmlsl_s16(vmull_s16(*(int16x4_t *)v340.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v339.i8, *(int16x4_t *)v326.i8);
  v635 = vmlsl_high_s16(vmull_high_s16(v340, v326), v339, v326);
  v341 = vqsubq_s16(v667, v698);
  v342 = vqsubq_s16(v726, v720);
  v632 = vmlal_s16(vmull_s16(*(int16x4_t *)v341.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v342.i8, *(int16x4_t *)v326.i8);
  v628 = vmlal_high_s16(vmull_high_s16(v341, v326), v342, v326);
  v620 = vmlsl_s16(vmull_s16(*(int16x4_t *)v342.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v341.i8, *(int16x4_t *)v326.i8);
  v616 = vmlsl_high_s16(vmull_high_s16(v342, v326), v341, v326);
  v471 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v331.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v335.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v331, v309), v335, v311), 0xCuLL);
  v509 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v335.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v331.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v335, v309), v331, v311), 0xCuLL);
  v477 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v332.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v336.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v332, v309), v336, v311), 0xCuLL);
  v568 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v336.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v332.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v336, v309), v332, v311), 0xCuLL);
  v487 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v333.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v337.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v333, v309), v337, v311), 0xCuLL);
  v580 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v337.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v333.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v337, v309), v333, v311), 0xCuLL);
  v609 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v338.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v334.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlsl_high_s16(vmull_high_s16(v338, v309), v334, v311), 0xCuLL);
  v613 = vrshrn_high_n_s32(vrshrn_n_s32(v538, 0xCuLL), v534, 0xCuLL);
  v502 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v334.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v338.i8, *(int16x4_t *)v311.i8), 0xCuLL), vmlal_high_s16(vmull_high_s16(v334, v309), v338, v311), 0xCuLL);
  v506 = vrshrn_high_n_s32(vrshrn_n_s32(v526, 0xCuLL), v530, 0xCuLL);
  v590 = vrshrn_high_n_s32(vrshrn_n_s32(v522, 0xCuLL), v518, 0xCuLL);
  v489 = vrshrn_high_n_s32(vrshrn_n_s32(v511, 0xCuLL), v515, 0xCuLL);
  v571 = vrshrn_high_n_s32(vrshrn_n_s32(v498, 0xCuLL), v496, 0xCuLL);
  v539 = vrshrn_high_n_s32(vrshrn_n_s32(v482, 0xCuLL), v478, 0xCuLL);
  v479 = vrshrn_high_n_s32(vrshrn_n_s32(v484, 0xCuLL), v490, 0xCuLL);
  v481 = vrshrn_high_n_s32(vrshrn_n_s32(v492, 0xCuLL), v494, 0xCuLL);
  v343 = vqsubq_s16(v596, v604);
  v344 = vqsubq_s16(v593, v600);
  v561 = vmlal_s16(vmull_s16(*(int16x4_t *)v343.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v344.i8, *(int16x4_t *)v326.i8);
  v551 = vmlal_high_s16(vmull_high_s16(v343, v326), v344, v326);
  v544 = vmlsl_high_s16(vmull_high_s16(v344, v326), v343, v326);
  v547 = vmlsl_s16(vmull_s16(*(int16x4_t *)v344.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v343.i8, *(int16x4_t *)v326.i8);
  v345 = vqsubq_s16(v329, v330);
  v346 = vqsubq_s16(v681, v586);
  v535 = vmlal_s16(vmull_s16(*(int16x4_t *)v345.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v346.i8, *(int16x4_t *)v326.i8);
  v531 = vmlal_high_s16(vmull_high_s16(v345, v326), v346, v326);
  v523 = vmlsl_high_s16(vmull_high_s16(v346, v326), v345, v326);
  v527 = vmlsl_s16(vmull_s16(*(int16x4_t *)v346.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v345.i8, *(int16x4_t *)v326.i8);
  v347 = vqsubq_s16(v466, v717);
  v348 = vqsubq_s16(v736, v684);
  v519 = vmlal_s16(vmull_s16(*(int16x4_t *)v347.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v348.i8, *(int16x4_t *)v326.i8);
  v516 = vmlal_high_s16(vmull_high_s16(v347, v326), v348, v326);
  v512 = vmlsl_s16(vmull_s16(*(int16x4_t *)v348.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v347.i8, *(int16x4_t *)v326.i8);
  v349 = vqsubq_s16(v469, v467);
  v350 = vqsubq_s16(v713, v744);
  v497 = vmlal_s16(vmull_s16(*(int16x4_t *)v349.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v350.i8, *(int16x4_t *)v326.i8);
  v499 = vmlsl_high_s16(vmull_high_s16(v348, v326), v347, v326);
  v495 = vmlal_high_s16(vmull_high_s16(v349, v326), v350, v326);
  v491 = vmlsl_high_s16(vmull_high_s16(v350, v326), v349, v326);
  v493 = vmlsl_s16(vmull_s16(*(int16x4_t *)v350.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v349.i8, *(int16x4_t *)v326.i8);
  v351 = vqsubq_s16(v609, v613);
  v352 = vqsubq_s16(v502, v506);
  v485 = vmlal_s16(vmull_s16(*(int16x4_t *)v351.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v352.i8, *(int16x4_t *)v326.i8);
  v483 = vmlal_high_s16(vmull_high_s16(v351, v326), v352, v326);
  v574 = vmlsl_high_s16(vmull_high_s16(v352, v326), v351, v326);
  v577 = vmlsl_s16(vmull_s16(*(int16x4_t *)v352.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v351.i8, *(int16x4_t *)v326.i8);
  v353 = vqsubq_s16(v580, v590);
  v354 = vqsubq_s16(v487, v489);
  v475 = vmlal_s16(vmull_s16(*(int16x4_t *)v353.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v354.i8, *(int16x4_t *)v326.i8);
  v473 = vmlal_high_s16(vmull_high_s16(v353, v326), v354, v326);
  v555 = vmlsl_high_s16(vmull_high_s16(v354, v326), v353, v326);
  v558 = vmlsl_s16(vmull_s16(*(int16x4_t *)v354.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v353.i8, *(int16x4_t *)v326.i8);
  v355 = vqsubq_s16(v568, v571);
  v356 = vqsubq_s16(v477, v481);
  v465 = vmlal_s16(vmull_s16(*(int16x4_t *)v355.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v356.i8, *(int16x4_t *)v326.i8);
  v464 = vmlal_high_s16(vmull_high_s16(v355, v326), v356, v326);
  v462 = vmlsl_high_s16(vmull_high_s16(v356, v326), v355, v326);
  v463 = vmlsl_s16(vmull_s16(*(int16x4_t *)v356.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v355.i8, *(int16x4_t *)v326.i8);
  v357 = vqsubq_s16(v509, v539);
  v358 = vqsubq_s16(v471, v479);
  v461 = vmlal_s16(vmull_s16(*(int16x4_t *)v357.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v358.i8, *(int16x4_t *)v326.i8);
  v459 = vmlal_high_s16(vmull_high_s16(v357, v326), v358, v326);
  v457 = vmlsl_high_s16(vmull_high_s16(v358, v326), v357, v326);
  v458 = vmlsl_s16(vmull_s16(*(int16x4_t *)v358.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v357.i8, *(int16x4_t *)v326.i8);
  v359 = vqsubq_s16(v687, v673);
  v360 = vqsubq_s16(v675, v678);
  v456 = vmlal_s16(vmull_s16(*(int16x4_t *)v359.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v360.i8, *(int16x4_t *)v326.i8);
  v455 = vmlal_high_s16(vmull_high_s16(v359, v326), v360, v326);
  v453 = vmlsl_high_s16(vmull_high_s16(v360, v326), v359, v326);
  v454 = vmlsl_s16(vmull_s16(*(int16x4_t *)v360.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v359.i8, *(int16x4_t *)v326.i8);
  v361 = vqsubq_s16(v691, v689);
  v362 = vqsubq_s16(v670, v701);
  v452 = vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v326.i8);
  v451 = vmlal_high_s16(vmull_high_s16(v361, v326), v362, v326);
  v449 = vmlsl_high_s16(vmull_high_s16(v362, v326), v361, v326);
  v450 = vmlsl_s16(vmull_s16(*(int16x4_t *)v362.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v361.i8, *(int16x4_t *)v326.i8);
  v363 = vqsubq_s16(v704, v693);
  v364 = vqsubq_s16(v748, v709);
  v448 = vmlal_s16(vmull_s16(*(int16x4_t *)v363.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v364.i8, *(int16x4_t *)v326.i8);
  v460 = vmlal_high_s16(vmull_high_s16(v363, v326), v364, v326);
  v365 = vmlsl_s16(vmull_s16(*(int16x4_t *)v364.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v363.i8, *(int16x4_t *)v326.i8);
  v366 = vmlsl_high_s16(vmull_high_s16(v364, v326), v363, v326);
  v367 = vqsubq_s16(v752, v706);
  v368 = vqsubq_s16(v695, v740);
  v369 = vmlal_s16(vmull_s16(*(int16x4_t *)v367.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v368.i8, *(int16x4_t *)v326.i8);
  v370 = vmlal_high_s16(vmull_high_s16(v367, v326), v368, v326);
  v371 = vmlsl_s16(vmull_s16(*(int16x4_t *)v368.i8, *(int16x4_t *)v326.i8), *(int16x4_t *)v367.i8, *(int16x4_t *)v326.i8);
  v372 = vmlsl_high_s16(vmull_high_s16(v368, v326), v367, v326);
  v373 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v326.i8), 0xCuLL), vmull_high_s16(*(int16x8_t *)a1, v326), 0xCuLL);
  v374 = *(int16x8_t *)(a1 + 256);
  v375 = vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v309.i8);
  v376 = vmull_high_s16(v374, v309);
  v377 = vmull_s16(*(int16x4_t *)v374.i8, *(int16x4_t *)v311.i8);
  v378 = vmull_high_s16(v374, v311);
  v379 = vrshrn_high_n_s32(vrshrn_n_s32(v375, 0xCuLL), v376, 0xCuLL);
  v380 = vrshrn_high_n_s32(vrshrn_n_s32(v377, 0xCuLL), v378, 0xCuLL);
  v381 = vqaddq_s16(v729, v624);
  v382 = vqaddq_s16(v732, v541);
  v383 = vrshrn_high_n_s32(vrshrn_n_s32(v663, 0xCuLL), v660, 0xCuLL);
  v384 = vrshrn_high_n_s32(vrshrn_n_s32(v657, 0xCuLL), v654, 0xCuLL);
  v385 = vqaddq_s16(v373, v379);
  v386 = vqsubq_s16(v373, v379);
  v387 = vqaddq_s16(v373, v380);
  v388 = vqsubq_s16(v373, v380);
  v389 = vqaddq_s16(v667, v698);
  v390 = vqaddq_s16(v312, v645);
  v391 = vqaddq_s16(v723, v651);
  v392 = vqaddq_s16(v726, v720);
  v393 = vrshrn_high_n_s32(vrshrn_n_s32(v648, 0xCuLL), v642, 0xCuLL);
  v394 = vrshrn_high_n_s32(vrshrn_n_s32(v638, 0xCuLL), v635, 0xCuLL);
  v395 = vrshrn_high_n_s32(vrshrn_n_s32(v632, 0xCuLL), v628, 0xCuLL);
  v396 = vrshrn_high_n_s32(vrshrn_n_s32(v620, 0xCuLL), v616, 0xCuLL);
  v397 = vqaddq_s16(v388, v381);
  v398 = vqsubq_s16(v388, v381);
  v399 = vqaddq_s16(v386, v384);
  v400 = vqsubq_s16(v386, v384);
  v401 = vqaddq_s16(v385, v383);
  v402 = vqsubq_s16(v385, v383);
  v403 = vqaddq_s16(v387, v382);
  v404 = vqsubq_s16(v387, v382);
  v405 = vqaddq_s16(v469, v467);
  v406 = vqaddq_s16(v466, v717);
  v583 = vqaddq_s16(v329, v330);
  v629 = vqaddq_s16(v596, v604);
  v699 = vqaddq_s16(v593, v600);
  v730 = vqaddq_s16(v681, v586);
  v737 = vqaddq_s16(v736, v684);
  v745 = vqaddq_s16(v713, v744);
  v655 = vrshrn_high_n_s32(vrshrn_n_s32(v561, 0xCuLL), v551, 0xCuLL);
  v407 = vrshrn_high_n_s32(vrshrn_n_s32(v547, 0xCuLL), v544, 0xCuLL);
  v408 = vrshrn_high_n_s32(vrshrn_n_s32(v535, 0xCuLL), v531, 0xCuLL);
  v409 = vrshrn_high_n_s32(vrshrn_n_s32(v527, 0xCuLL), v523, 0xCuLL);
  v410 = vrshrn_high_n_s32(vrshrn_n_s32(v519, 0xCuLL), v516, 0xCuLL);
  v411 = vrshrn_high_n_s32(vrshrn_n_s32(v512, 0xCuLL), v499, 0xCuLL);
  v412 = vrshrn_high_n_s32(vrshrn_n_s32(v497, 0xCuLL), v495, 0xCuLL);
  v413 = vrshrn_high_n_s32(vrshrn_n_s32(v493, 0xCuLL), v491, 0xCuLL);
  v652 = vqaddq_s16(v404, v389);
  v636 = vqsubq_s16(v404, v389);
  v649 = vqaddq_s16(v402, v390);
  v625 = vqsubq_s16(v402, v390);
  v565 = vqsubq_s16(v400, v394);
  v685 = vqaddq_s16(v398, v396);
  v532 = vqsubq_s16(v398, v396);
  v721 = vqaddq_s16(v397, v395);
  v500 = vqsubq_s16(v397, v395);
  v718 = vqaddq_s16(v399, v393);
  v646 = vqsubq_s16(v399, v393);
  v727 = vqaddq_s16(v401, v391);
  v414 = vqsubq_s16(v401, v391);
  v724 = vqaddq_s16(v403, v392);
  v415 = vqsubq_s16(v403, v392);
  v733 = vqaddq_s16(v502, v506);
  v714 = vqaddq_s16(v487, v489);
  v661 = vqaddq_s16(v477, v481);
  v664 = vqaddq_s16(v471, v479);
  v668 = vqaddq_s16(v675, v678);
  v676 = vqaddq_s16(v670, v701);
  v682 = vqaddq_s16(v748, v709);
  v702 = vqaddq_s16(v695, v740);
  v633 = vrshrn_high_n_s32(vrshrn_n_s32(v485, 0xCuLL), v483, 0xCuLL);
  v621 = vrshrn_high_n_s32(vrshrn_n_s32(v475, 0xCuLL), v473, 0xCuLL);
  v587 = vrshrn_high_n_s32(vrshrn_n_s32(v465, 0xCuLL), v464, 0xCuLL);
  v562 = vrshrn_high_n_s32(vrshrn_n_s32(v461, 0xCuLL), v459, 0xCuLL);
  v520 = vrshrn_high_n_s32(vrshrn_n_s32(v452, 0xCuLL), v451, 0xCuLL);
  v524 = vrshrn_high_n_s32(vrshrn_n_s32(v456, 0xCuLL), v455, 0xCuLL);
  v749 = vrshrn_high_n_s32(vrshrn_n_s32(v448, 0xCuLL), v460, 0xCuLL);
  v741 = vrshrn_high_n_s32(vrshrn_n_s32(v365, 0xCuLL), v366, 0xCuLL);
  v416 = vrshrn_high_n_s32(vrshrn_n_s32(v369, 0xCuLL), v370, 0xCuLL);
  v417 = vrshrn_high_n_s32(vrshrn_n_s32(v371, 0xCuLL), v372, 0xCuLL);
  v513 = vqaddq_s16(v415, v405);
  v503 = vqsubq_s16(v415, v405);
  v528 = vqaddq_s16(v414, v406);
  v710 = vqsubq_s16(v414, v406);
  v696 = vqaddq_s16(v724, v745);
  v679 = vqaddq_s16(v727, v737);
  *a2 = vqaddq_s16(v696, v702);
  a2[1] = vqaddq_s16(v679, v682);
  v671 = vqaddq_s16(v718, v730);
  v658 = vqaddq_s16(v721, v699);
  a2[2] = vqaddq_s16(v671, v676);
  a2[3] = vqaddq_s16(v658, v668);
  v643 = vqaddq_s16(v685, v655);
  v418 = vqaddq_s16(v400, v394);
  v639 = vqaddq_s16(v418, v408);
  a2[4] = vqaddq_s16(v643, v664);
  a2[5] = vqaddq_s16(v639, v661);
  v605 = vqaddq_s16(v649, v410);
  v597 = vqaddq_s16(v652, v412);
  a2[6] = vqaddq_s16(v605, v714);
  a2[7] = vqaddq_s16(v597, v733);
  v552 = vqaddq_s16(v636, v413);
  v542 = vqaddq_s16(v625, v411);
  a2[8] = vqaddq_s16(v552, v633);
  a2[9] = vqaddq_s16(v542, v621);
  v617 = vqaddq_s16(v565, v409);
  v601 = vqaddq_s16(v532, v407);
  a2[10] = vqaddq_s16(v617, v587);
  a2[11] = vqaddq_s16(v601, v562);
  v548 = vqaddq_s16(v500, v629);
  v536 = vqaddq_s16(v646, v583);
  a2[12] = vqaddq_s16(v548, v524);
  a2[13] = vqaddq_s16(v536, v520);
  v419 = vqsubq_s16(v646, v583);
  a2[14] = vqaddq_s16(v528, v749);
  a2[15] = vqaddq_s16(v513, v416);
  v420 = vqsubq_s16(v500, v629);
  a2[16] = vqaddq_s16(v503, v417);
  a2[17] = vqaddq_s16(v710, v741);
  v421 = vqsubq_s16(v532, v407);
  v422 = vrshrn_high_n_s32(vrshrn_n_s32(v450, 0xCuLL), v449, 0xCuLL);
  v423 = vrshrn_high_n_s32(vrshrn_n_s32(v454, 0xCuLL), v453, 0xCuLL);
  a2[18] = vqaddq_s16(v419, v422);
  a2[19] = vqaddq_s16(v420, v423);
  v424 = vqsubq_s16(v565, v409);
  v425 = vrshrn_high_n_s32(vrshrn_n_s32(v458, 0xCuLL), v457, 0xCuLL);
  v426 = vrshrn_high_n_s32(vrshrn_n_s32(v463, 0xCuLL), v462, 0xCuLL);
  a2[20] = vqaddq_s16(v421, v425);
  a2[21] = vqaddq_s16(v424, v426);
  v427 = vrshrn_high_n_s32(vrshrn_n_s32(v577, 0xCuLL), v574, 0xCuLL);
  v428 = vrshrn_high_n_s32(vrshrn_n_s32(v558, 0xCuLL), v555, 0xCuLL);
  v429 = vqsubq_s16(v625, v411);
  v430 = vqsubq_s16(v636, v413);
  a2[22] = vqaddq_s16(v429, v428);
  a2[23] = vqaddq_s16(v430, v427);
  v431 = vqaddq_s16(v580, v590);
  v432 = vqaddq_s16(v609, v613);
  v433 = vqsubq_s16(v652, v412);
  v434 = vqsubq_s16(v649, v410);
  a2[24] = vqaddq_s16(v433, v432);
  a2[25] = vqaddq_s16(v434, v431);
  v435 = vqaddq_s16(v509, v539);
  v436 = vqaddq_s16(v568, v571);
  v437 = vqsubq_s16(v418, v408);
  v438 = vqsubq_s16(v685, v655);
  a2[26] = vqaddq_s16(v437, v436);
  a2[27] = vqaddq_s16(v438, v435);
  v439 = vqaddq_s16(v691, v689);
  v440 = vqaddq_s16(v687, v673);
  v441 = vqsubq_s16(v721, v699);
  v442 = vqsubq_s16(v718, v730);
  a2[28] = vqaddq_s16(v441, v440);
  a2[29] = vqaddq_s16(v442, v439);
  v443 = vqaddq_s16(v752, v706);
  v444 = vqaddq_s16(v704, v693);
  v445 = vqsubq_s16(v727, v737);
  v446 = vqsubq_s16(v724, v745);
  a2[30] = vqaddq_s16(v445, v444);
  a2[31] = vqaddq_s16(v446, v443);
  a2[32] = vqsubq_s16(v446, v443);
  a2[33] = vqsubq_s16(v445, v444);
  a2[34] = vqsubq_s16(v442, v439);
  a2[35] = vqsubq_s16(v441, v440);
  a2[36] = vqsubq_s16(v438, v435);
  a2[37] = vqsubq_s16(v437, v436);
  a2[38] = vqsubq_s16(v434, v431);
  a2[39] = vqsubq_s16(v433, v432);
  a2[40] = vqsubq_s16(v430, v427);
  a2[41] = vqsubq_s16(v429, v428);
  a2[42] = vqsubq_s16(v424, v426);
  a2[43] = vqsubq_s16(v421, v425);
  a2[44] = vqsubq_s16(v420, v423);
  a2[45] = vqsubq_s16(v419, v422);
  a2[46] = vqsubq_s16(v710, v741);
  a2[47] = vqsubq_s16(v503, v417);
  a2[48] = vqsubq_s16(v513, v416);
  a2[49] = vqsubq_s16(v528, v749);
  a2[50] = vqsubq_s16(v536, v520);
  a2[51] = vqsubq_s16(v548, v524);
  a2[52] = vqsubq_s16(v601, v562);
  a2[53] = vqsubq_s16(v617, v587);
  a2[54] = vqsubq_s16(v542, v621);
  a2[55] = vqsubq_s16(v552, v633);
  a2[56] = vqsubq_s16(v597, v733);
  a2[57] = vqsubq_s16(v605, v714);
  a2[58] = vqsubq_s16(v639, v661);
  a2[59] = vqsubq_s16(v643, v664);
  a2[60] = vqsubq_s16(v658, v668);
  a2[61] = vqsubq_s16(v671, v676);
  result = vqsubq_s16(v679, v682);
  a2[62] = result;
  a2[63] = vqsubq_s16(v696, v702);
  return result;
}

void av1_calc_indices_dim1_neon(int16x8_t *a1, const __int16 *a2, int8x8_t *a3, _QWORD *a4, int a5, int a6)
{
  int16x8_t *v6;
  uint64_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int v10;
  int64x2_t v11;
  int16x8_t v12;
  int8x16_t v13;
  uint64_t i;
  int16x8_t v15;
  int8x16_t v16;
  int j;
  int16x8_t v18;
  int8x16_t v19;
  uint64_t k;
  int16x8_t v21;
  int8x16_t v22;
  int16x8_t v23[8];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (a6 >= 1)
  {
    v6 = v23;
    v7 = a6;
    do
    {
      v8 = vld1q_dup_s16(a2++);
      *v6++ = v8;
      --v7;
    }
    while (v7);
  }
  if (a5 >= 1)
  {
    v9 = v23[0];
    if (a4)
    {
      v10 = 0;
      v11 = 0uLL;
      do
      {
        v12 = vabdq_s16(*a1, v9);
        v13 = 0uLL;
        if (a6 >= 2)
        {
          for (i = 1; i != a6; v13 = vbslq_s8(v16, (int8x16_t)vdupq_n_s16(i++), v13))
          {
            v15 = vabdq_s16(*a1, v23[i]);
            v16 = (int8x16_t)vcgtq_s16(v12, v15);
            v12 = vminq_s16(v12, v15);
          }
        }
        v11 = vpadalq_s32(v11, vmlal_high_s16(vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v12.i8), v12, v12));
        *a3++ = vmovn_s16((int16x8_t)v13);
        ++a1;
        v10 += 8;
      }
      while (v10 < a5);
      goto LABEL_18;
    }
    if (a6 <= 1)
    {
      bzero(a3, ((a5 - 1) & 0xFFFFFFF8) + 8);
      return;
    }
    for (j = 0; j < a5; j += 8)
    {
      v18 = vabdq_s16(*a1, v9);
      v19 = 0uLL;
      for (k = 1; k != a6; v19 = vbslq_s8(v22, (int8x16_t)vdupq_n_s16(k++), v19))
      {
        v21 = vabdq_s16(*a1, v23[k]);
        v22 = (int8x16_t)vcgtq_s16(v18, v21);
        v18 = vminq_s16(v18, v21);
      }
      *a3++ = vmovn_s16((int16x8_t)v19);
      ++a1;
    }
  }
  v11 = 0uLL;
LABEL_18:
  if (a4)
    *a4 = vaddvq_s64(v11);
}

double av1_calc_indices_dim2_neon(int16x8_t *a1, unsigned __int16 *a2, int8x8_t *a3, _QWORD *a4, int a5, int a6, double a7, __n128 a8)
{
  __n128 *v8;
  uint64_t v9;
  int v10;
  int16x8_t v11;
  int64x2_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int8x16_t v15;
  uint64_t i;
  int16x8_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int8x16_t v23;
  uint64_t j;
  int16x8_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int16x8_t v29[8];
  uint64_t v30;
  int8x16x2_t v31;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a6 >= 1)
  {
    v8 = (__n128 *)v29;
    v9 = a6;
    do
    {
      a8.n128_u16[0] = *a2;
      a8.n128_u16[2] = a2[1];
      v31.val[1] = (int8x16_t)vdupq_lane_s16((int16x4_t)a8.n128_u64[0], 2);
      v31.val[0] = (int8x16_t)vdupq_lane_s16((int16x4_t)a8.n128_u64[0], 0);
      a8 = (__n128)vqtbl2q_s8(v31, (int8x16_t)xmmword_208F53310);
      *v8++ = a8;
      a2 += 2;
      --v9;
    }
    while (v9);
  }
  if (a5 < 1)
  {
    v12 = 0uLL;
  }
  else
  {
    v10 = 0;
    v11 = v29[0];
    v12 = 0uLL;
    do
    {
      v13 = vsubq_s16(*a1, v11);
      v14 = vpaddq_s32(vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v13.i8), vmull_high_s16(v13, v13));
      v15 = 0uLL;
      if (a6 >= 2)
      {
        for (i = 1; i != a6; v15 = vbslq_s8(v19, (int8x16_t)vdupq_n_s32(i++), v15))
        {
          v17 = vsubq_s16(*a1, v29[i]);
          v18 = vpaddq_s32(vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v17.i8), vmull_high_s16(v17, v17));
          v19 = (int8x16_t)vcgtq_s32(v14, v18);
          v14 = vminq_s32(v14, v18);
        }
      }
      if (a4)
        v12 = vpadalq_s32(v12, v14);
      v20 = a1[1];
      v21 = vsubq_s16(v20, v11);
      v22 = vpaddq_s32(vmull_s16(*(int16x4_t *)v21.i8, *(int16x4_t *)v21.i8), vmull_high_s16(v21, v21));
      v23 = 0uLL;
      if (a6 >= 2)
      {
        for (j = 1; j != a6; v23 = vbslq_s8(v27, (int8x16_t)vdupq_n_s32(j++), v23))
        {
          v25 = vsubq_s16(v20, v29[j]);
          v26 = vpaddq_s32(vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v25.i8), vmull_high_s16(v25, v25));
          v27 = (int8x16_t)vcgtq_s32(v22, v26);
          v22 = vminq_s32(v22, v26);
        }
      }
      if (a4)
        v12 = vpadalq_s32(v12, v22);
      a1 += 2;
      *a3++ = vmovn_s16(vuzp1q_s16((int16x8_t)v15, (int16x8_t)v23));
      v10 += 8;
    }
    while (v10 < a5);
  }
  if (a4)
  {
    v12.i64[0] = vaddvq_s64(v12);
    *a4 = v12.i64[0];
  }
  return *(double *)v12.i64;
}

uint64_t av1_get_filter_level(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _BYTE *a5)
{
  uint64_t v5;
  char *v6;
  unsigned int v7;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  v5 = a5[167] & 7;
  if (!*(_DWORD *)(a1 + 24376))
  {
    LOBYTE(v7) = *(_BYTE *)(a2
                          + ((uint64_t)a4 << 8)
                          + 32 * v5
                          + 16 * a3
                          + 2 * (char)a5[16]
                          + mode_lf_lut_0[a5[2]]
                          + 3072);
    return v7;
  }
  if (*(_DWORD *)(a1 + 24384))
    v6 = &a5[delta_lf_id_lut[2 * a4 + a3] + 163];
  else
    v6 = a5 + 162;
  v9 = *v6;
  v10 = (_DWORD *)(a1 + 23032);
  v11 = a1 + 23036;
  if (!a4)
    v11 = a1 + 4 * a3 + 23024;
  if (a4 != 1)
    v10 = (_DWORD *)v11;
  v12 = *v10 + v9;
  if (v12 >= 63)
    v12 = 63;
  v7 = v12 & ~(v12 >> 31);
  if (*(_BYTE *)(a1 + 18992)
    && ((*(_DWORD *)(a1 + 4 * (a5[167] & 7) + 19124) >> seg_lvl_lf_lut[2 * a4 + a3]) & 1) != 0)
  {
    v13 = v7 + *(__int16 *)(a1 + 16 * v5 + 2 * seg_lvl_lf_lut[2 * a4 + a3] + 18996);
    if (v13 >= 63)
      v13 = 63;
    v7 = v13 & ~(v13 >> 31);
  }
  if (!*(_BYTE *)(a1 + 23044))
    return v7;
  v14 = (char)a5[16];
  v15 = *(char *)(a1 + v14 + 23046);
  if (v14 >= 1)
    v15 += *(char *)(a1 + mode_lf_lut_0[a5[2]] + 23054);
  v16 = (v15 << (v7 >> 5)) + v7;
  if (v16 >= 63)
    v16 = 63;
  return (v16 & ~(v16 >> 31));
}

uint64_t av1_loop_filter_frame_init(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  int16x8_t v8;
  int32x4_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int32x4_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  BOOL v20;
  uint64_t v21;
  signed int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  signed int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  int v36;
  unsigned int v37;
  int v38;
  _BYTE *v39;
  uint32x4_t v40;
  int32x4_t v41;
  int8x16_t v42;
  int32x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int v46;
  int v47;
  int32x2_t v48;
  signed int v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  _BYTE *v55;
  uint32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x2_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int v62;
  int v63;
  int32x2_t v64;
  int v65;
  int v66;
  _DWORD v67[3];
  _DWORD v68[3];
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v6 = a1 + 18992;
  result = update_sharpness(a1 + 19184, *(_DWORD *)(a1 + 23040));
  v10 = *(_DWORD *)(v6 + 4040);
  v66 = *(_DWORD *)(v6 + 4032);
  v68[0] = v66;
  v68[1] = v10;
  v11 = *(_DWORD *)(v6 + 4044);
  v68[2] = v11;
  v65 = *(_DWORD *)(v6 + 4036);
  v67[0] = v65;
  v67[1] = v10;
  v67[2] = v11;
  if (a2 < a3)
  {
    v12 = 0;
    v13 = (char *)(a1 + 23046);
    v14 = a2;
    v15 = a1 + 18996;
    v16.i64[0] = 0x3F0000003FLL;
    v16.i64[1] = 0x3F0000003FLL;
    v17 = a1 + 18996 + ((uint64_t)a2 << 8);
    while (1)
    {
      if (!v14 && !v66 && !v65)
        return result;
      v18 = v14 == 2 && v11 == 0;
      v19 = !v18;
      v20 = !v10 && v14 == 1;
      if (!v20 && v19)
        break;
LABEL_3:
      ++v14;
      v12 += 256;
      if ((_DWORD)v14 == a3)
        return result;
    }
    v21 = 0;
    v22 = v68[v14];
    v23 = &seg_lvl_lf_lut[2 * v14];
    v24 = *v23;
    v25 = v67[v14];
    v26 = 1 << v24;
    v27 = v23[1];
    v28 = 1 << v27;
    v29 = 2 * v27;
    v30 = 2 * v24;
    v31 = v12;
    while (1)
    {
      v34 = v15 + 4 * v21;
      v35 = v22;
      if (*(_BYTE *)v6)
      {
        v35 = v22;
        if ((*(_DWORD *)(v34 + 128) & v26) != 0)
        {
          v36 = v22 + *(__int16 *)(v15 + v30);
          if (v36 >= 63)
            v36 = 63;
          v35 = v36 & ~(v36 >> 31);
        }
      }
      if (*(_BYTE *)(v6 + 4052))
        break;
      v50 = (uint64_t *)(v17 + v31 + 3260);
      v51 = 0x101010101010101 * v35;
      *v50 = v51;
      v50[1] = v51;
      v49 = v25;
      if (*(_BYTE *)v6)
        goto LABEL_35;
LABEL_39:
      if (*(_BYTE *)(v6 + 4052))
      {
        v53 = v49 >> 5;
        v54 = (*v13 << (v49 >> 5)) + v49;
        if (v54 >= 63)
          v54 = 63;
        v55 = (_BYTE *)(v17 + v31);
        v55[3276] = v54 & ~(v54 >> 31);
        result = v13[4];
        v56 = (uint32x4_t)vdupq_n_s32(v53);
        v57 = vdupq_n_s32(v49);
        v8.i32[0] = v13[8];
        v8.i32[1] = v13[9];
        v58 = (int8x16_t)vuzp2q_s32((int32x4_t)v8, vdupq_n_s32(result));
        v8.i32[2] = v8.i32[0];
        v59 = *(int32x2_t *)v8.i8;
        v60 = (int32x4_t)v8;
        v60.i32[3] = v13[4];
        v8.i32[3] = v8.i32[1];
        v61 = (int32x4_t)vextq_s8(v58, v58, 4uLL);
        v9.i32[0] = v13[1];
        v9.i32[2] = v13[2];
        v61.i32[0] = v13[3];
        v61.i32[1] = v61.i32[0];
        v9 = vtrn1q_s32(v9, v9);
        v8 = (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v8, v9), v56), v57), v16), (int32x4_t)0);
        *(int8x8_t *)v61.i8 = vmovn_s16(vuzp1q_s16(v8, (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vaddq_s32(v60, v61), v56), v57), v16), (int32x4_t)0)));
        *(int32x2_t *)v8.i8 = vmax_s32(vmin_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v13[5]), v59), *(uint32x2_t *)v56.i8), *(int32x2_t *)v57.i8), (int32x2_t)0x3F0000003FLL), 0);
        *(_QWORD *)(v17 + v31 + 3278) = v61.i64[0];
        v55[3286] = v8.i8[0];
        v55[3287] = v8.i8[4];
        v62 = ((v59.i32[0] + v13[6]) << v53) + v49;
        if (v62 >= 63)
          v62 = 63;
        v55[3288] = v62 & ~(v62 >> 31);
        v63 = ((v59.i32[1] + v13[6]) << v53) + v49;
        if (v63 >= 63)
          v63 = 63;
        v55[3289] = v63 & ~(v63 >> 31);
        v64 = vmax_s32(vmin_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v13[7]), v59), *(uint32x2_t *)v56.i8), *(int32x2_t *)v57.i8), (int32x2_t)0x3F0000003FLL), 0);
        v55[3291] = v64.i8[4];
        v55[3290] = v64.i8[0];
        ++v21;
        v31 += 32;
        v29 += 16;
        v30 += 16;
        if (v21 == 8)
          goto LABEL_3;
      }
      else
      {
        v32 = (uint64_t *)(v17 + v31 + 3276);
        v33 = 0x101010101010101 * v49;
        *v32 = v33;
        v32[1] = v33;
        ++v21;
        v31 += 32;
        v29 += 16;
        v30 += 16;
        if (v21 == 8)
          goto LABEL_3;
      }
    }
    v37 = v35 >> 5;
    v38 = (*v13 << (v35 >> 5)) + v35;
    if (v38 >= 63)
      v38 = 63;
    v39 = (_BYTE *)(v17 + v31);
    v39[3260] = v38 & ~(v38 >> 31);
    result = v13[1];
    v40 = (uint32x4_t)vdupq_n_s32(v37);
    v41 = vdupq_n_s32(v35);
    v8.i32[0] = v13[8];
    v8.i32[1] = v13[9];
    v42 = (int8x16_t)vuzp2q_s32((int32x4_t)v8, vdupq_n_s32(v13[4]));
    v8.i32[2] = v8.i32[0];
    v43 = *(int32x2_t *)v8.i8;
    v44 = (int32x4_t)v8;
    v44.i32[3] = v13[4];
    v8.i32[3] = v8.i32[1];
    v45 = (int32x4_t)vextq_s8(v42, v42, 4uLL);
    v9.i32[0] = v13[1];
    v9.i32[2] = v13[2];
    v45.i32[0] = v13[3];
    v45.i32[1] = v45.i32[0];
    v9 = vtrn1q_s32(v9, v9);
    v8 = (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v8, v9), v40), v41), v16), (int32x4_t)0);
    *(int8x8_t *)v45.i8 = vmovn_s16(vuzp1q_s16(v8, (int16x8_t)vmaxq_s32(vminq_s32(vaddq_s32((int32x4_t)vshlq_u32((uint32x4_t)vaddq_s32(v44, v45), v40), v41), v16), (int32x4_t)0)));
    *(int32x2_t *)v8.i8 = vmax_s32(vmin_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v13[5]), v43), *(uint32x2_t *)v40.i8), *(int32x2_t *)v41.i8), (int32x2_t)0x3F0000003FLL), 0);
    *(_QWORD *)(v17 + v31 + 3262) = v45.i64[0];
    v39[3270] = v8.i8[0];
    v39[3271] = v8.i8[4];
    v46 = ((v43.i32[0] + v13[6]) << v37) + v35;
    if (v46 >= 63)
      v46 = 63;
    v39[3272] = v46 & ~(v46 >> 31);
    v47 = ((v43.i32[1] + v13[6]) << v37) + v35;
    if (v47 >= 63)
      v47 = 63;
    v39[3273] = v47 & ~(v47 >> 31);
    v48 = vmax_s32(vmin_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32(v13[7]), v43), *(uint32x2_t *)v40.i8), *(int32x2_t *)v41.i8), (int32x2_t)0x3F0000003FLL), 0);
    v39[3275] = v48.i8[4];
    v39[3274] = v48.i8[0];
    v49 = v25;
    if (!*(_BYTE *)v6)
      goto LABEL_39;
LABEL_35:
    v49 = v25;
    if ((*(_DWORD *)(v34 + 128) & v28) != 0)
    {
      v52 = v25 + *(__int16 *)(v15 + v29);
      if (v52 >= 63)
        v52 = 63;
      v49 = v52 & ~(v52 >> 31);
    }
    goto LABEL_39;
  }
  return result;
}

void av1_filter_block_plane_vert(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  signed int v11;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  unsigned __int8 *v34;

  v6 = *(_DWORD *)(a4 + 4);
  v7 = *(_DWORD *)(a4 + 8);
  v9 = ((*(_DWORD *)(a1 + 532) + (1 << v7 >> 1)) >> v7) - (a5 >> v7);
  LODWORD(v10) = 0x20u >> v7;
  if (v9 >= (int)(0x20u >> v7))
    v10 = v10;
  else
    v10 = v9;
  v8 = (*(_DWORD *)(a1 + 536) + (1 << v6 >> 1)) >> v6;
  if ((int)(v8 - (a6 >> v6)) >= (int)(0x20u >> v6))
    v11 = 0x20u >> v6;
  else
    v11 = v8 - (a6 >> v6);
  v29 = v10;
  if ((int)v10 >= 1 && v11 >= 1)
  {
    v15 = 0;
    v28 = *(_QWORD *)(a4 + 16);
    v16 = (4 * a6) >> v6;
    v17 = *(int *)(a4 + 40);
    v27 = (4 * a5) >> v7;
    v18 = 1 << v6;
    do
    {
      v19 = 0;
      v30 = v15;
      v20 = v28 + 4 * v15 * v17;
      v21 = v27 + 4 * v15;
      do
      {
        v33 = 0;
        v34 = 0;
        v23 = set_lpf_parameters((uint64_t)&v33, v18, a1, a2, 0, v16 + 4 * v19, v21, a3, (_DWORD *)a4);
        v24 = v33;
        if (v23 == 255)
        {
          v24 = 0;
          v25 = 0;
        }
        else
        {
          v25 = v23;
        }
        HIDWORD(v26) = v24;
        LODWORD(v26) = v24 - 4;
        switch((v26 >> 1))
        {
          case 0u:
            aom_lpf_vertical_4_neon(v20, v17, v34, (const char *)v34 + 16, (const char *)v34 + 32);
            break;
          case 1u:
            aom_lpf_vertical_6_neon(v20, v17, v34, (const char *)v34 + 16, (const char *)v34 + 32);
            break;
          case 2u:
            aom_lpf_vertical_8_neon(v20, v17, v34, (const char *)v34 + 16, (const char *)v34 + 32);
            break;
          case 5u:
            aom_lpf_vertical_14_neon(v20, v17, v34, v34 + 16, v34 + 32);
            break;
          default:
            break;
        }
        v22 = tx_size_wide_unit[v25];
        v19 += v22;
        v20 += (4 * v22);
      }
      while (v19 < v11);
      v15 = v30 + 1;
    }
    while (v30 + 1 != v29);
  }
}

uint64_t set_lpf_parameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, int a8, _DWORD *a9)
{
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int filter_level;
  _BOOL4 v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned int v31;
  int max_uv_txsize;
  uint64_t v33;
  uint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  _DWORD *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  _BOOL4 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;

  v9 = 0;
  *(_BYTE *)a1 = 0;
  if (a9[8] <= a6)
    return v9;
  if (a9[9] <= a7)
    return 0;
  v12 = a9[1];
  v11 = a9[2];
  v13 = v11 | (a7 << v11 >> 2);
  v14 = v12 | (a6 << v12 >> 2);
  v15 = (unsigned __int8 **)(*(_QWORD *)(a3 + 568) + 8 * v13 * *(_DWORD *)(a3 + 580) + 8 * v14);
  v16 = *v15;
  if (!*v15)
    return 255;
  v22 = v11;
  if (a4 && *(_DWORD *)(a4 + 4 * (*(_WORD *)(v16 + 167) & 7) + 10692))
  {
    v9 = 0;
  }
  else if (a8)
  {
    v9 = 3;
    switch((unint64_t)av1_ss_size_lookup[4 * *v16 + 2 * v12 + v11])
    {
      case 0xAuLL:
      case 0xBuLL:
      case 0xCuLL:
      case 0xDuLL:
      case 0xEuLL:
      case 0xFuLL:
      case 0x58uLL:
      case 0x5CuLL:
      case 0x60uLL:
      case 0x64uLL:
      case 0x68uLL:
      case 0x6CuLL:
      case 0x70uLL:
      case 0x74uLL:
      case 0x78uLL:
      case 0x7CuLL:
      case 0x80uLL:
      case 0x84uLL:
      case 0x88uLL:
      case 0x8CuLL:
      case 0x90uLL:
      case 0x94uLL:
      case 0x98uLL:
      case 0x9CuLL:
      case 0xA0uLL:
      case 0xA4uLL:
      case 0xB8uLL:
      case 0xD8uLL:
      case 0xF0uLL:
      case 0x104uLL:
      case 0x124uLL:
      case 0x13CuLL:
      case 0x150uLL:
      case 0x170uLL:
      case 0x188uLL:
      case 0x19CuLL:
      case 0x1BCuLL:
      case 0x1D4uLL:
      case 0x1D8uLL:
      case 0x1DCuLL:
      case 0x1E0uLL:
      case 0x1E4uLL:
      case 0x1E8uLL:
      case 0x1ECuLL:
      case 0x1F0uLL:
      case 0x1F4uLL:
      case 0x1F8uLL:
      case 0x1FCuLL:
      case 0x200uLL:
      case 0x204uLL:
      case 0x208uLL:
      case 0x20CuLL:
      case 0x210uLL:
      case 0x214uLL:
      case 0x218uLL:
      case 0x21CuLL:
      case 0x220uLL:
      case 0x234uLL:
      case 0x254uLL:
      case 0x26CuLL:
      case 0x280uLL:
      case 0x2A0uLL:
      case 0x2B8uLL:
      case 0x2CCuLL:
      case 0x2ECuLL:
      case 0x304uLL:
      case 0x318uLL:
      case 0x338uLL:
      case 0x350uLL:
      case 0x364uLL:
      case 0x384uLL:
      case 0x39CuLL:
      case 0x3B0uLL:
      case 0x3D0uLL:
      case 0x3E8uLL:
      case 0x3FCuLL:
      case 0x41CuLL:
      case 0x434uLL:
      case 0x438uLL:
      case 0x43CuLL:
      case 0x440uLL:
      case 0x444uLL:
      case 0x448uLL:
      case 0x44CuLL:
      case 0x450uLL:
      case 0x454uLL:
      case 0x458uLL:
      case 0x45CuLL:
      case 0x460uLL:
      case 0x464uLL:
      case 0x468uLL:
      case 0x46CuLL:
      case 0x470uLL:
      case 0x474uLL:
      case 0x478uLL:
      case 0x47CuLL:
      case 0x480uLL:
      case 0x494uLL:
      case 0x4B4uLL:
      case 0x4CCuLL:
      case 0x4E0uLL:
      case 0x500uLL:
      case 0x518uLL:
      case 0x52CuLL:
      case 0x54CuLL:
      case 0x564uLL:
      case 0x578uLL:
      case 0x598uLL:
      case 0x5B0uLL:
      case 0x5C4uLL:
      case 0x5E4uLL:
      case 0x5FCuLL:
      case 0x600uLL:
      case 0x604uLL:
      case 0x608uLL:
      case 0x60CuLL:
      case 0x610uLL:
      case 0x614uLL:
      case 0x618uLL:
      case 0x61CuLL:
      case 0x620uLL:
      case 0x624uLL:
      case 0x628uLL:
      case 0x62CuLL:
      case 0x630uLL:
      case 0x634uLL:
      case 0x638uLL:
      case 0x63CuLL:
      case 0x640uLL:
      case 0x644uLL:
      case 0x648uLL:
      case 0x660uLL:
      case 0x680uLL:
      case 0x694uLL:
      case 0x6ACuLL:
      case 0x6CCuLL:
      case 0x6E0uLL:
      case 0x6F8uLL:
      case 0x718uLL:
      case 0x72CuLL:
      case 0x744uLL:
      case 0x764uLL:
      case 0x778uLL:
      case 0x790uLL:
      case 0x7B0uLL:
      case 0x7C4uLL:
      case 0x7C8uLL:
      case 0x7CCuLL:
      case 0x7D0uLL:
      case 0x7D4uLL:
      case 0x7D8uLL:
      case 0x7DCuLL:
      case 0x7E0uLL:
      case 0x7E4uLL:
      case 0x7E8uLL:
      case 0x7ECuLL:
      case 0x7F0uLL:
      case 0x7F4uLL:
      case 0x7F8uLL:
      case 0x7FCuLL:
      case 0x800uLL:
      case 0x804uLL:
      case 0x808uLL:
      case 0x80CuLL:
      case 0x810uLL:
      case 0x828uLL:
      case 0x848uLL:
      case 0x85CuLL:
      case 0x874uLL:
      case 0x894uLL:
      case 0x8A8uLL:
      case 0x8C0uLL:
      case 0x8E0uLL:
      case 0x8F4uLL:
      case 0x90CuLL:
      case 0x92CuLL:
      case 0x940uLL:
      case 0x958uLL:
      case 0x978uLL:
      case 0x98CuLL:
      case 0x9A4uLL:
      case 0x9C4uLL:
      case 0x9D8uLL:
      case 0x9F0uLL:
      case 0xA10uLL:
      case 0xA24uLL:
      case 0xA28uLL:
      case 0xA2CuLL:
      case 0xA30uLL:
      case 0xA34uLL:
      case 0xA38uLL:
      case 0xA3CuLL:
      case 0xA40uLL:
      case 0xA44uLL:
      case 0xA48uLL:
      case 0xA4CuLL:
      case 0xA50uLL:
      case 0xA54uLL:
      case 0xA58uLL:
      case 0xA5CuLL:
      case 0xA60uLL:
      case 0xA64uLL:
      case 0xA68uLL:
      case 0xA6CuLL:
      case 0xA70uLL:
      case 0xA88uLL:
      case 0xAA8uLL:
      case 0xABCuLL:
      case 0xAD4uLL:
      case 0xAF4uLL:
      case 0xB08uLL:
      case 0xB20uLL:
      case 0xB40uLL:
      case 0xB54uLL:
      case 0xB6CuLL:
      case 0xB8CuLL:
      case 0xBA0uLL:
      case 0xBA4uLL:
      case 0xBA8uLL:
      case 0xBACuLL:
      case 0xBB0uLL:
      case 0xBB4uLL:
      case 0xBB8uLL:
      case 0xBBCuLL:
      case 0xBC0uLL:
      case 0xBC4uLL:
      case 0xBC8uLL:
      case 0xBCCuLL:
      case 0xBD0uLL:
      case 0xBD4uLL:
      case 0xBD8uLL:
      case 0xBDCuLL:
      case 0xBE0uLL:
      case 0xBE4uLL:
      case 0xBE8uLL:
      case 0xBECuLL:
      case 0xC00uLL:
      case 0xC20uLL:
      case 0xC38uLL:
      case 0xC4CuLL:
      case 0xC6CuLL:
      case 0xC84uLL:
      case 0xC98uLL:
      case 0xCB8uLL:
      case 0xCD0uLL:
      case 0xCE4uLL:
      case 0xD04uLL:
      case 0xD1CuLL:
      case 0xD20uLL:
      case 0xD24uLL:
      case 0xD28uLL:
      case 0xD2CuLL:
      case 0xD30uLL:
      case 0xD34uLL:
      case 0xD38uLL:
      case 0xD3CuLL:
      case 0xD40uLL:
      case 0xD44uLL:
      case 0xD48uLL:
      case 0xD4CuLL:
      case 0xD50uLL:
      case 0xD54uLL:
      case 0xD58uLL:
      case 0xD5CuLL:
      case 0xD60uLL:
      case 0xD64uLL:
      case 0xD68uLL:
      case 0xD7CuLL:
      case 0xD9CuLL:
      case 0xDB4uLL:
      case 0xDC8uLL:
      case 0xDE8uLL:
      case 0xE00uLL:
      case 0xE14uLL:
      case 0xE34uLL:
      case 0xE4CuLL:
      case 0xE60uLL:
      case 0xE80uLL:
      case 0xE98uLL:
      case 0xEACuLL:
      case 0xECCuLL:
      case 0xEE4uLL:
      case 0xEF8uLL:
      case 0xF18uLL:
      case 0xF30uLL:
      case 0xF44uLL:
      case 0xF64uLL:
      case 0xF7CuLL:
      case 0xF80uLL:
      case 0xF84uLL:
      case 0xF88uLL:
      case 0xF8CuLL:
      case 0xF90uLL:
      case 0xF94uLL:
      case 0xF98uLL:
      case 0xF9CuLL:
      case 0xFA0uLL:
      case 0xFA4uLL:
      case 0xFA8uLL:
      case 0xFACuLL:
      case 0xFB0uLL:
      case 0xFB4uLL:
      case 0xFB8uLL:
      case 0xFBCuLL:
      case 0xFC0uLL:
      case 0xFC4uLL:
      case 0xFC8uLL:
      case 0xFDCuLL:
      case 0xFFCuLL:
      case 0x1014uLL:
      case 0x1028uLL:
      case 0x1048uLL:
      case 0x1060uLL:
      case 0x1074uLL:
      case 0x1094uLL:
      case 0x10ACuLL:
      case 0x10C0uLL:
      case 0x10E0uLL:
      case 0x10F8uLL:
      case 0x110CuLL:
      case 0x112CuLL:
      case 0x1144uLL:
      case 0x1148uLL:
      case 0x114CuLL:
      case 0x1150uLL:
      case 0x1154uLL:
      case 0x1158uLL:
      case 0x115CuLL:
      case 0x1160uLL:
      case 0x1164uLL:
      case 0x1168uLL:
      case 0x116CuLL:
      case 0x1170uLL:
      case 0x1174uLL:
      case 0x1178uLL:
      case 0x117CuLL:
      case 0x1180uLL:
      case 0x1184uLL:
      case 0x1188uLL:
      case 0x118CuLL:
      case 0x1190uLL:
      case 0x11A8uLL:
      case 0x11C8uLL:
      case 0x11DCuLL:
      case 0x11F4uLL:
      case 0x1214uLL:
      case 0x1228uLL:
      case 0x1240uLL:
      case 0x1260uLL:
      case 0x1274uLL:
      case 0x128CuLL:
      case 0x12ACuLL:
      case 0x12C0uLL:
      case 0x12D8uLL:
      case 0x12F8uLL:
      case 0x130CuLL:
      case 0x1310uLL:
      case 0x1314uLL:
      case 0x1318uLL:
      case 0x131CuLL:
      case 0x1320uLL:
      case 0x1324uLL:
      case 0x1328uLL:
      case 0x132CuLL:
      case 0x1330uLL:
      case 0x1334uLL:
      case 0x1338uLL:
      case 0x133CuLL:
      case 0x1340uLL:
      case 0x1344uLL:
      case 0x1348uLL:
      case 0x134CuLL:
      case 0x1350uLL:
      case 0x1354uLL:
      case 0x1358uLL:
      case 0x1370uLL:
      case 0x1390uLL:
      case 0x13A4uLL:
      case 0x13BCuLL:
      case 0x13DCuLL:
      case 0x13F0uLL:
      case 0x1408uLL:
      case 0x1428uLL:
      case 0x143CuLL:
      case 0x1454uLL:
      case 0x1474uLL:
      case 0x1488uLL:
      case 0x14A0uLL:
      case 0x14C0uLL:
      case 0x14D4uLL:
      case 0x14ECuLL:
      case 0x150CuLL:
      case 0x1520uLL:
      case 0x1538uLL:
      case 0x1558uLL:
      case 0x156CuLL:
      case 0x1570uLL:
      case 0x1574uLL:
      case 0x1578uLL:
      case 0x157CuLL:
      case 0x1580uLL:
      case 0x1584uLL:
      case 0x1588uLL:
      case 0x158CuLL:
      case 0x1590uLL:
      case 0x1594uLL:
      case 0x1598uLL:
      case 0x159CuLL:
      case 0x15A0uLL:
      case 0x15A4uLL:
      case 0x15A8uLL:
      case 0x15ACuLL:
      case 0x15B0uLL:
      case 0x15B4uLL:
      case 0x15B8uLL:
      case 0x15D0uLL:
      case 0x15F0uLL:
      case 0x1604uLL:
      case 0x161CuLL:
      case 0x163CuLL:
      case 0x1650uLL:
      case 0x1668uLL:
      case 0x1688uLL:
      case 0x169CuLL:
      case 0x16B4uLL:
      case 0x16D4uLL:
        break;
      case 0x14uLL:
        v9 = 9;
        break;
      case 0x15uLL:
        v9 = 10;
        break;
      default:
        v9 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v16 + 2 * v12 + v11]];
        break;
    }
  }
  else
  {
    v9 = v16[145];
    if (((*(_WORD *)(v16 + 167) & 0x80) != 0 || (char)v16[16] >= 1) && !v16[144])
    {
      v23 = *v16;
      v9 = v16[(((mi_size_wide_4[v23] - 1) & v14) >> av1_get_txb_size_index_tw_w_log2_table[v23])
             + 146
             + (((mi_size_high_3[v23] - 1) & v13) >> av1_get_txb_size_index_tw_h_log2_table[v23] << av1_get_txb_size_index_stride_log2_table[v23])];
    }
  }
  v24 = &tx_size_high_1;
  if (a5)
    v25 = a7;
  else
    v25 = a6;
  if (!a5)
    v24 = &tx_size_wide_2;
  if (((v24[v9] - 1) & v25) == 0)
  {
    v51 = v25;
    v48 = v13;
    v52 = v12;
    v49 = a3 + 19184;
    v50 = v22;
    filter_level = av1_get_filter_level(a3, a3 + 19184, a5, a8, v16);
    if (v16[144])
      v27 = (*(_WORD *)(v16 + 167) & 0x80) != 0 || (char)v16[16] > 0;
    else
      v27 = 0;
    if (v51)
    {
      v28 = v15[-a2];
      if (v28)
      {
        v29 = -1 << v50;
        if (!a5)
          v29 = 0;
        v30 = -1 << v52;
        if (a5)
          v30 = 0;
        v47 = v27;
        if (a4 && *(_DWORD *)(a4 + 4 * (*(_WORD *)(v28 + 167) & 7) + 10692))
        {
          v31 = filter_level;
          max_uv_txsize = 0;
          v33 = v49;
        }
        else
        {
          v31 = filter_level;
          if (a8)
          {
            max_uv_txsize = av1_get_max_uv_txsize(*v28, v52, v50);
            v33 = v49;
          }
          else
          {
            max_uv_txsize = v28[145];
            v33 = v49;
            if (((*(_WORD *)(v28 + 167) & 0x80) != 0 || (char)v28[16] >= 1) && !v28[144])
            {
              v35 = *v28;
              max_uv_txsize = v28[(((mi_size_wide_4[v35] - 1) & (v14 + v30)) >> av1_get_txb_size_index_tw_w_log2_table[v35])
                                + 146
                                + (((mi_size_high_3[v35] - 1) & (v48 + v29)) >> av1_get_txb_size_index_tw_h_log2_table[v35] << av1_get_txb_size_index_stride_log2_table[v35])];
            }
          }
        }
        v36 = max_uv_txsize;
        v37 = av1_get_filter_level(a3, v33, a5, a8, v28);
        v38 = v28[144];
        if (v28[144])
        {
          v39 = v50;
          v38 = (*(_WORD *)(v28 + 167) & 0x80) != 0 || (char)v28[16] > 0;
          v40 = v52;
        }
        else
        {
          v40 = v52;
          v39 = v50;
        }
        if (v31 | v37)
        {
          v41 = (unsigned __int8 *)&block_size_high;
          if (!a5)
            v41 = (unsigned __int8 *)&block_size_wide_0;
          if ((v38 & v47) != 1 || ((v41[av1_ss_size_lookup[4 * *v16 + 2 * v40 + v39]] - 1) & v51) == 0)
          {
            v42 = &tx_size_high_unit_log2;
            if (!a5)
              v42 = &tx_size_wide_unit_log2;
            v43 = v42[v9];
            v44 = v42[v36];
            if (v43 >= v44)
              v43 = v44;
            if (a8)
            {
              if (v43)
                LOBYTE(v45) = 6;
              else
                LOBYTE(v45) = 4;
            }
            else
            {
              v45 = tx_dim_to_filter_length[v43];
            }
            *(_BYTE *)a1 = v45;
            if ((_BYTE)v45)
            {
              if (v31)
                v46 = v31;
              else
                v46 = v37;
              *(_QWORD *)(a1 + 8) = v33 + 48 * v46;
            }
          }
        }
        return v9;
      }
      return 255;
    }
  }
  return v9;
}

int8x8_t filter_vert(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  const char *v9;
  const char *v10;
  unsigned __int8 *v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  int8x8_t result;
  unint64_t v16;
  unsigned __int8 *v17;
  const char *v18;
  const char *v19;
  unsigned __int8 *v20;
  const char *v21;
  const char *v22;
  unsigned __int8 *v23;
  const char *v24;
  const char *v25;
  unsigned __int8 *v26;
  const char *v27;
  const char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;

  v4 = a2;
  v5 = a1;
  v6 = *((_QWORD *)a3 + 1);
  if (a4 == 1)
  {
    HIDWORD(v14) = *a3;
    LODWORD(v14) = HIDWORD(v14) - 4;
    switch((v14 >> 1))
    {
      case 0u:
        v9 = (const char *)(v6 + 16);
        v10 = (const char *)(v6 + 32);
        v8 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v11 = (unsigned __int8 *)v6;
        v12 = (const char *)(v6 + 16);
        v13 = (const char *)(v6 + 32);
LABEL_5:
        result = aom_lpf_vertical_4_dual_neon(a1, a2, v8, v9, v10, v11, v12, v13);
        break;
      case 1u:
        v18 = (const char *)(v6 + 16);
        v19 = (const char *)(v6 + 32);
        v17 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v20 = (unsigned __int8 *)v6;
        v21 = (const char *)(v6 + 16);
        v22 = (const char *)(v6 + 32);
LABEL_11:
        result = (int8x8_t)aom_lpf_vertical_6_dual_neon(a1, a2, v17, v18, v19, v20, v21, v22);
        break;
      case 2u:
        v24 = (const char *)(v6 + 16);
        v25 = (const char *)(v6 + 32);
        v23 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v26 = (unsigned __int8 *)v6;
        v27 = (const char *)(v6 + 16);
        v28 = (const char *)(v6 + 32);
LABEL_13:
        result = (int8x8_t)aom_lpf_vertical_8_dual_neon(a1, a2, v23, v24, v25, v26, v27, v28);
        break;
      case 5u:
        v30 = (unsigned __int8 *)(v6 + 16);
        v31 = (unsigned __int8 *)(v6 + 32);
        v29 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v32 = (unsigned __int8 *)v6;
        v33 = (unsigned __int8 *)(v6 + 16);
        v34 = (unsigned __int8 *)(v6 + 32);
LABEL_15:
        result = (int8x8_t)aom_lpf_vertical_14_dual_neon(a1, a2, v29, v30, v31, v32, v33, v34);
        break;
      default:
        return result;
    }
  }
  else if (a4 == 2)
  {
    HIDWORD(v7) = *a3;
    LODWORD(v7) = HIDWORD(v7) - 4;
    switch((v7 >> 1))
    {
      case 0u:
        aom_lpf_vertical_4_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32), (unsigned __int8 *)v6, (const char *)(v6 + 16), (const char *)(v6 + 32));
        a1 = v5 + 8 * v4;
        a2 = v4;
        v8 = (unsigned __int8 *)v6;
        v9 = (const char *)(v6 + 16);
        v10 = (const char *)(v6 + 32);
        v11 = (unsigned __int8 *)v6;
        v12 = (const char *)(v6 + 16);
        v13 = (const char *)(v6 + 32);
        goto LABEL_5;
      case 1u:
        aom_lpf_vertical_6_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32), (unsigned __int8 *)v6, (const char *)(v6 + 16), (const char *)(v6 + 32));
        a1 = v5 + 8 * v4;
        a2 = v4;
        v17 = (unsigned __int8 *)v6;
        v18 = (const char *)(v6 + 16);
        v19 = (const char *)(v6 + 32);
        v20 = (unsigned __int8 *)v6;
        v21 = (const char *)(v6 + 16);
        v22 = (const char *)(v6 + 32);
        goto LABEL_11;
      case 2u:
        aom_lpf_vertical_8_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32), (unsigned __int8 *)v6, (const char *)(v6 + 16), (const char *)(v6 + 32));
        a1 = v5 + 8 * v4;
        a2 = v4;
        v23 = (unsigned __int8 *)v6;
        v24 = (const char *)(v6 + 16);
        v25 = (const char *)(v6 + 32);
        v26 = (unsigned __int8 *)v6;
        v27 = (const char *)(v6 + 16);
        v28 = (const char *)(v6 + 32);
        goto LABEL_13;
      case 5u:
        aom_lpf_vertical_14_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (unsigned __int8 *)(v6 + 16), (unsigned __int8 *)(v6 + 32), (unsigned __int8 *)v6, (unsigned __int8 *)(v6 + 16), (unsigned __int8 *)(v6 + 32));
        a1 = v5 + 8 * v4;
        a2 = v4;
        v29 = (unsigned __int8 *)v6;
        v30 = (unsigned __int8 *)(v6 + 16);
        v31 = (unsigned __int8 *)(v6 + 32);
        v32 = (unsigned __int8 *)v6;
        v33 = (unsigned __int8 *)(v6 + 16);
        v34 = (unsigned __int8 *)(v6 + 32);
        goto LABEL_15;
      default:
        return result;
    }
  }
  else
  {
    HIDWORD(v16) = *a3;
    LODWORD(v16) = HIDWORD(v16) - 4;
    switch((v16 >> 1))
    {
      case 0u:
        result = aom_lpf_vertical_4_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32));
        break;
      case 1u:
        result = (int8x8_t)aom_lpf_vertical_6_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32));
        break;
      case 2u:
        result = (int8x8_t)aom_lpf_vertical_8_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)(v6 + 16), (const char *)(v6 + 32));
        break;
      case 5u:
        result = (int8x8_t)aom_lpf_vertical_14_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (unsigned __int8 *)(v6 + 16), (unsigned __int8 *)(v6 + 32));
        break;
      default:
        return result;
    }
  }
  return result;
}

void av1_filter_block_plane_vert_opt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6, _BYTE *a7, char a8)
{
  int v8;
  int v9;
  int v10;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  __int16 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 **v55;
  unsigned __int8 *v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  _BOOL4 v80;
  _BOOL4 v81;
  unsigned __int8 v82;
  int v83;
  int v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  int v94;
  unsigned int v96;
  _BYTE *v97;
  int v98;
  int v100;

  v8 = (*(_DWORD *)(a3 + 32) + 3) >> 2;
  if (((*(_DWORD *)(a3 + 36) + 3) >> 2) - a4 >= 1 << a8)
    v9 = 1 << a8;
  else
    v9 = ((*(_DWORD *)(a3 + 36) + 3) >> 2) - a4;
  v94 = v8 - a5;
  if ((int)(v8 - a5) >= 32)
    v10 = 32;
  else
    v10 = v8 - a5;
  v100 = v10;
  if (v9 >= 1)
  {
    v13 = 0;
    v14 = a1 + 18992;
    v90 = *(_QWORD *)(a3 + 16);
    v15 = v100 + a5;
    v16 = *(_DWORD *)(a3 + 40);
    v17 = a1 + 19184;
    v89 = a5 - 1;
    v97 = a7;
    v98 = v9;
    v93 = v100 + a5;
    v91 = a1 + 19184;
    v92 = a5;
    v96 = a5;
    while (1)
    {
      v18 = v13 + a4;
      *(_BYTE *)a6 = 0;
      v19 = (unsigned __int8 **)(*(_QWORD *)(a1 + 568)
                               + 8 * (*(_DWORD *)(a1 + 580) * (v13 + a4))
                               + 8 * v92);
      v20 = *v19;
      if (!a2)
        break;
      v21 = *(_WORD *)(v20 + 167);
      if (!*(_DWORD *)(a2 + 4 * (v21 & 7) + 10692))
        goto LABEL_15;
      v22 = 0;
      if (!a5)
        goto LABEL_50;
      v23 = *(v19 - 1);
LABEL_20:
      if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(v23 + 167) & 7) + 10692))
      {
        v24 = 0;
        v25 = block_size_high[*v23];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
          goto LABEL_22;
        goto LABEL_29;
      }
LABEL_25:
      v24 = v23[145];
      if (((*(_WORD *)(v23 + 167) & 0x80) != 0 || (char)v23[16] >= 1) && !v23[144])
      {
        v47 = *v23;
        v24 = v23[((int)((mi_size_wide_4[v47] - 1) & v89) >> av1_get_txb_size_index_tw_w_log2_table[v47])
                + 146
                + (((mi_size_high_3[v47] - 1) & v18) >> av1_get_txb_size_index_tw_h_log2_table[v47] << av1_get_txb_size_index_stride_log2_table[v47])];
        v25 = block_size_high[v47];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
        {
LABEL_22:
          v27 = a1 + 32 * v26 + 2 * (char)v20[16] + mode_lf_lut_0[v20[2]];
          v28 = *(unsigned __int8 *)(v27 + 22256);
          if (!*(_BYTE *)(v27 + 22256))
          {
            v28 = *(unsigned __int8 *)(a1
                                     + 32 * (*(_WORD *)(v23 + 167) & 7)
                                     + 2 * (char)v23[16]
                                     + mode_lf_lut_0[v23[2]]
                                     + 22256);
            if (v23 != v20)
              goto LABEL_47;
            goto LABEL_68;
          }
LABEL_46:
          if (v23 != v20)
            goto LABEL_47;
          goto LABEL_68;
        }
      }
      else
      {
        v25 = block_size_high[*v23];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
          goto LABEL_22;
      }
LABEL_29:
      v29 = *(_DWORD *)(v14 + 5392);
      if (v29)
        v30 = 163;
      else
        v30 = 162;
      v31 = (char)v20[v30];
      v32 = *(_DWORD *)(v14 + 4032);
      v33 = v32 + v31;
      if (v33 >= 63)
        v33 = 63;
      v28 = v33 & ~(v33 >> 31);
      if (*(_BYTE *)v14 && (*(_DWORD *)(a1 + 4 * v26 + 19124) & 2) != 0)
      {
        v34 = v28 + *(__int16 *)(a1 + 16 * v26 + 18998);
        if (v34 >= 63)
          v34 = 63;
        v28 = v34 & ~(v34 >> 31);
      }
      if (*(_BYTE *)(v14 + 4052))
      {
        v35 = (char)v20[16];
        v36 = *(char *)(a1 + v35 + 23046);
        if (v35 >= 1)
          v36 += *(char *)(a1 + mode_lf_lut_0[v20[2]] + 23054);
        v37 = (v36 << (v28 >> 5)) + v28;
        if (v37 >= 63)
          v37 = 63;
        v28 = v37 & ~(v37 >> 31);
      }
      v28 = v28;
      if ((_BYTE)v28)
        goto LABEL_46;
      if (v29)
        v39 = 163;
      else
        v39 = 162;
      v40 = v32 + (char)v23[v39];
      if (v40 >= 63)
        v40 = 63;
      v41 = v40 & ~(v40 >> 31);
      if (*(_BYTE *)v14)
      {
        v42 = *(_WORD *)(v23 + 167) & 7;
        if ((*(_DWORD *)(a1 + 4 * v42 + 19124) & 2) != 0)
        {
          v43 = v41 + *(__int16 *)(a1 + 16 * v42 + 18998);
          if (v43 >= 63)
            v43 = 63;
          v41 = v43 & ~(v43 >> 31);
        }
      }
      if (*(_BYTE *)(v14 + 4052))
      {
        v44 = (char)v23[16];
        v45 = *(char *)(a1 + v44 + 23046);
        if (v44 >= 1)
          v45 += *(char *)(a1 + mode_lf_lut_0[v23[2]] + 23054);
        v46 = (v45 << (v41 >> 5)) + v41;
        if (v46 >= 63)
          v46 = 63;
        v41 = v46 & ~(v46 >> 31);
      }
      v28 = v41;
      if (v23 != v20)
      {
LABEL_47:
        a5 = v96;
        if (v28)
          goto LABEL_76;
        goto LABEL_77;
      }
LABEL_68:
      if (!v20[144])
      {
        a5 = v96;
LABEL_75:
        if (!v28)
          goto LABEL_77;
LABEL_76:
        *(_BYTE *)a6 = vert_filter_length_luma[19 * v22 + v24];
        *(_QWORD *)(a6 + 8) = v17 + 48 * v28;
        goto LABEL_77;
      }
      a5 = v96;
      if ((v21 & 0x80) == 0 && (char)v20[16] <= 0)
        goto LABEL_75;
LABEL_77:
      v48 = block_size_high[*v20];
      if (v25 < v48)
        v48 = v25;
      *a7 = v22;
      v49 = (int)tx_size_wide_unit[v22];
      v50 = v49 + a5;
      if (v49 + a5 < v15)
      {
        v51 = &a7[v49];
        v52 = a6 + 16 * v49;
        do
        {
          v54 = v22;
          *(_BYTE *)v52 = 0;
          v55 = (unsigned __int8 **)(*(_QWORD *)(a1 + 568)
                                   + 8 * (*(_DWORD *)(a1 + 580) * v18)
                                   + 8 * v50);
          v56 = *v55;
          if (a2)
          {
            v57 = *(_WORD *)(v56 + 167);
            if (*(_DWORD *)(a2 + 4 * (v57 & 7) + 10692))
            {
              v22 = 0;
              v58 = (uint64_t)*(v55 - 1);
              v59 = v57 & 7;
              if (!*(_DWORD *)(v14 + 5384))
                goto LABEL_87;
              goto LABEL_95;
            }
          }
          else
          {
            v57 = *(_WORD *)(v56 + 167);
          }
          v22 = v56[145];
          if (((v57 & 0x80) != 0 || (char)v56[16] >= 1) && !v56[144])
          {
            v79 = *v56;
            v22 = v56[((int)((mi_size_wide_4[v79] - 1) & v50) >> av1_get_txb_size_index_tw_w_log2_table[v79])
                    + 146
                    + (((mi_size_high_3[v79] - 1) & v18) >> av1_get_txb_size_index_tw_h_log2_table[v79] << av1_get_txb_size_index_stride_log2_table[v79])];
            v58 = (uint64_t)*(v55 - 1);
            v59 = v57 & 7;
            if (!*(_DWORD *)(v14 + 5384))
            {
LABEL_87:
              v60 = a1 + 32 * v59 + 2 * (char)v56[16] + mode_lf_lut_0[v56[2]];
              v61 = *(unsigned __int8 *)(v60 + 22256);
              if (!*(_BYTE *)(v60 + 22256))
              {
                v61 = *(unsigned __int8 *)(a1
                                         + 32 * (*(_WORD *)(v58 + 167) & 7)
                                         + 2 * *(char *)(v58 + 16)
                                         + mode_lf_lut_0[*(unsigned __int8 *)(v58 + 2)]
                                         + 22256);
                if ((unsigned __int8 *)v58 != v56)
                  goto LABEL_113;
                goto LABEL_132;
              }
LABEL_112:
              if ((unsigned __int8 *)v58 != v56)
                goto LABEL_113;
              goto LABEL_132;
            }
          }
          else
          {
            v58 = (uint64_t)*(v55 - 1);
            v59 = v57 & 7;
            if (!*(_DWORD *)(v14 + 5384))
              goto LABEL_87;
          }
LABEL_95:
          v62 = *(_DWORD *)(v14 + 5392);
          if (v62)
            v63 = 163;
          else
            v63 = 162;
          v64 = (char)v56[v63];
          v65 = *(_DWORD *)(v14 + 4032);
          v66 = v65 + v64;
          if (v66 >= 63)
            v66 = 63;
          v61 = v66 & ~(v66 >> 31);
          if (*(_BYTE *)v14 && (*(_DWORD *)(a1 + 4 * v59 + 19124) & 2) != 0)
          {
            v67 = v61 + *(__int16 *)(a1 + 16 * v59 + 18998);
            if (v67 >= 63)
              v67 = 63;
            v61 = v67 & ~(v67 >> 31);
          }
          if (*(_BYTE *)(v14 + 4052))
          {
            v68 = (char)v56[16];
            v69 = *(char *)(a1 + v68 + 23046);
            if (v68 >= 1)
              v69 += *(char *)(a1 + mode_lf_lut_0[v56[2]] + 23054);
            v70 = (v69 << (v61 >> 5)) + v61;
            if (v70 >= 63)
              v70 = 63;
            v61 = v70 & ~(v70 >> 31);
          }
          v61 = v61;
          if ((_BYTE)v61)
            goto LABEL_112;
          if (v62)
            v71 = 163;
          else
            v71 = 162;
          v72 = v65 + *(char *)(v58 + v71);
          if (v72 >= 63)
            v72 = 63;
          v73 = v72 & ~(v72 >> 31);
          if (*(_BYTE *)v14)
          {
            v74 = *(_WORD *)(v58 + 167) & 7;
            if ((*(_DWORD *)(a1 + 4 * v74 + 19124) & 2) != 0)
            {
              v75 = v73 + *(__int16 *)(a1 + 16 * v74 + 18998);
              if (v75 >= 63)
                v75 = 63;
              v73 = v75 & ~(v75 >> 31);
            }
          }
          if (*(_BYTE *)(v14 + 4052))
          {
            v76 = *(char *)(v58 + 16);
            v77 = *(char *)(a1 + v76 + 23046);
            if (v76 >= 1)
              v77 += *(char *)(a1 + mode_lf_lut_0[*(unsigned __int8 *)(v58 + 2)] + 23054);
            v78 = (v77 << (v73 >> 5)) + v73;
            if (v78 >= 63)
              v78 = 63;
            v73 = v78 & ~(v78 >> 31);
          }
          v61 = v73;
          if ((unsigned __int8 *)v58 != v56)
          {
LABEL_113:
            if (v61)
            {
              *(_BYTE *)v52 = vert_filter_length_luma[19 * v22 + v54];
              *(_QWORD *)(v52 + 8) = v17 + 48 * v61;
            }
            goto LABEL_81;
          }
LABEL_132:
          if (!v56[144] || (v57 & 0x80) == 0 && (char)v56[16] <= 0)
            goto LABEL_113;
LABEL_81:
          if (v48 >= block_size_high[*v56])
            v48 = block_size_high[*v56];
          *v51 = v22;
          v53 = (int)tx_size_wide_unit[v22];
          v50 += v53;
          v52 += 16 * v53;
          v51 += v53;
        }
        while (v50 < v15);
      }
      if ((v13 & 3) != 0 || (v83 = v13 + 3, v13 + 3 >= v98) || v48 <= 15)
      {
        v80 = v13 + 1 < v98;
        v81 = v48 > 7;
        v82 = v80 && v81;
        if (v80 && v81)
          v83 = v13 + 1;
        else
          v83 = v13;
        if (v94 >= 1)
        {
LABEL_144:
          v84 = 0;
          v85 = v90 + 4 * v16 * v13;
          v86 = v97;
          v87 = (unsigned __int8 *)a6;
          do
          {
            if (*v86 == 255)
            {
              *v87 = 0;
              *v86 = 0;
            }
            filter_vert(v85, v16, v87, v82);
            v88 = tx_size_wide_unit[*v86];
            v84 += v88;
            v85 += (4 * v88);
            v87 += 16 * v88;
            v86 += v88;
          }
          while (v84 < v100);
        }
      }
      else
      {
        v82 = 2;
        if (v94 >= 1)
          goto LABEL_144;
      }
      v13 = v83 + 1;
      a7 = v97;
      a5 = v96;
      v15 = v93;
      v17 = v91;
      if (v83 + 1 >= v98)
        return;
    }
    v21 = *(_WORD *)(v20 + 167);
LABEL_15:
    v22 = v20[145];
    if (((v21 & 0x80) != 0 || (char)v20[16] >= 1) && !v20[144])
    {
      v38 = *v20;
      v22 = v20[((int)((mi_size_wide_4[v38] - 1) & a5) >> av1_get_txb_size_index_tw_w_log2_table[v38])
              + 146
              + (((mi_size_high_3[v38] - 1) & v18) >> av1_get_txb_size_index_tw_h_log2_table[v38] << av1_get_txb_size_index_stride_log2_table[v38])];
      if (!a5)
      {
LABEL_50:
        v25 = 128;
        goto LABEL_77;
      }
    }
    else if (!a5)
    {
      goto LABEL_50;
    }
    v23 = *(v19 - 1);
    if (!a2)
      goto LABEL_25;
    goto LABEL_20;
  }
}

void av1_filter_block_plane_vert_opt_chroma(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned __int8 *a6, _BYTE *a7, int a8, char a9, __int16 a10, char a11)
{
  int v11;
  int v12;
  int v13;
  signed int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int filter_level;
  unsigned __int8 v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 v53;
  int v54;
  unsigned __int8 *v55;
  _DWORD *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  BOOL v63;
  BOOL v64;
  uint64_t v65;
  unsigned __int8 *v66;
  _DWORD *v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v77;
  int v78;
  int v79;
  int v80;
  unsigned __int8 *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  int v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  int v97;
  const char *v98;
  const char *v99;
  const char *v100;
  const char *v101;
  int v102;
  unsigned __int8 *v103;
  _BYTE *v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v123;
  _DWORD *v124;
  uint64_t v125;
  uint64_t v127;
  int v128;
  int *v129;
  _DWORD *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  _DWORD *v133;
  int v134;

  v12 = a3[1];
  v11 = a3[2];
  v13 = (((((a3[9] << v11) + 3) >> 2) + (1 << v11 >> 1)) >> v11) - (a4 >> v11);
  if (v13 >= 1 << a11 >> v11)
    v13 = 1 << a11 >> v11;
  v14 = (((((a3[8] << v12) + 3) >> 2) + (1 << v12 >> 1)) >> v12) - (a5 >> v12);
  v114 = a3[1];
  if (v14 >= (int)(0x20u >> v12))
    v14 = 0x20u >> v12;
  v128 = v14;
  v117 = v13;
  if (v13 >= 1)
  {
    v15 = a8;
    v16 = a5;
    v17 = a3;
    v18 = a2;
    v19 = a1;
    v20 = 0;
    v21 = v11;
    v22 = (int)a3[10];
    v116 = -1 << v12;
    v109 = (v14 << v12) + a5;
    v115 = v12 | a5;
    v106 = (-1 << v12) + v115;
    v131 = a1 + 19184;
    v125 = a8;
    v129 = &delta_lf_id_lut[2 * a8];
    v130 = (_DWORD *)(a1 + 23032);
    v133 = (_DWORD *)(a1 + 23024);
    v108 = a1 + 18992;
    v124 = (_DWORD *)(a1 + 23036);
    v132 = &seg_lvl_lf_lut[2 * a8];
    v107 = 4 * v22;
    v134 = a3[10];
    v119 = 8 * v22;
    v127 = v11;
    do
    {
      *a6 = 0;
      v23 = ((v20 << v21) + a4) | v21;
      v24 = (unsigned __int8 **)(*(_QWORD *)(v19 + 568) + 8 * (*(_DWORD *)(v19 + 580) * v23) + 8 * v115);
      v25 = *v24;
      v123 = v20;
      if (v18 && *(_DWORD *)(v18 + 4 * (*(_WORD *)(v25 + 167) & 7) + 10692))
      {
        *a7 = 0;
        v26 = 0;
        if (!v16)
        {
          v29 = 0;
          v30 = 64;
LABEL_33:
          v33 = v114;
          v34 = v108;
          v35 = v114;
          goto LABEL_57;
        }
        v27 = v24[v116];
      }
      else
      {
        if (v15)
        {
          v26 = 3;
          switch((unint64_t)av1_ss_size_lookup[4 * *v25 + 2 * v114 + v21])
          {
            case 1uLL:
            case 2uLL:
            case 4uLL:
            case 5uLL:
            case 7uLL:
            case 8uLL:
            case 0x10uLL:
            case 0x11uLL:
            case 0x12uLL:
            case 0x13uLL:
            case 0xA8uLL:
            case 0xACuLL:
            case 0xB0uLL:
            case 0xB4uLL:
            case 0xBCuLL:
            case 0xC0uLL:
            case 0xC4uLL:
            case 0xC8uLL:
            case 0xCCuLL:
            case 0xD0uLL:
            case 0xD4uLL:
            case 0xDCuLL:
            case 0xE0uLL:
            case 0xE4uLL:
            case 0xE8uLL:
            case 0xECuLL:
            case 0xF4uLL:
            case 0xF8uLL:
            case 0xFCuLL:
            case 0x100uLL:
            case 0x108uLL:
            case 0x10CuLL:
            case 0x110uLL:
            case 0x114uLL:
            case 0x118uLL:
            case 0x11CuLL:
            case 0x120uLL:
            case 0x128uLL:
            case 0x12CuLL:
            case 0x130uLL:
            case 0x134uLL:
            case 0x138uLL:
            case 0x140uLL:
            case 0x144uLL:
            case 0x148uLL:
            case 0x14CuLL:
            case 0x154uLL:
            case 0x158uLL:
            case 0x15CuLL:
            case 0x160uLL:
            case 0x164uLL:
            case 0x168uLL:
            case 0x16CuLL:
            case 0x174uLL:
            case 0x178uLL:
            case 0x17CuLL:
            case 0x180uLL:
            case 0x184uLL:
            case 0x18CuLL:
            case 0x190uLL:
            case 0x194uLL:
            case 0x198uLL:
            case 0x1A0uLL:
            case 0x1A4uLL:
            case 0x1A8uLL:
            case 0x1ACuLL:
            case 0x1B0uLL:
            case 0x1B4uLL:
            case 0x1B8uLL:
            case 0x1C0uLL:
            case 0x1C4uLL:
            case 0x1C8uLL:
            case 0x1CCuLL:
            case 0x1D0uLL:
            case 0x224uLL:
            case 0x228uLL:
            case 0x22CuLL:
            case 0x230uLL:
            case 0x238uLL:
            case 0x23CuLL:
            case 0x240uLL:
            case 0x244uLL:
            case 0x248uLL:
            case 0x24CuLL:
            case 0x250uLL:
            case 0x258uLL:
            case 0x25CuLL:
            case 0x260uLL:
            case 0x264uLL:
            case 0x268uLL:
            case 0x270uLL:
            case 0x274uLL:
            case 0x278uLL:
            case 0x27CuLL:
            case 0x284uLL:
            case 0x288uLL:
            case 0x28CuLL:
            case 0x290uLL:
            case 0x294uLL:
            case 0x298uLL:
            case 0x29CuLL:
            case 0x2A4uLL:
            case 0x2A8uLL:
            case 0x2ACuLL:
            case 0x2B0uLL:
            case 0x2B4uLL:
            case 0x2BCuLL:
            case 0x2C0uLL:
            case 0x2C4uLL:
            case 0x2C8uLL:
            case 0x2D0uLL:
            case 0x2D4uLL:
            case 0x2D8uLL:
            case 0x2DCuLL:
            case 0x2E0uLL:
            case 0x2E4uLL:
            case 0x2E8uLL:
            case 0x2F0uLL:
            case 0x2F4uLL:
            case 0x2F8uLL:
            case 0x2FCuLL:
            case 0x300uLL:
            case 0x308uLL:
            case 0x30CuLL:
            case 0x310uLL:
            case 0x314uLL:
            case 0x31CuLL:
            case 0x320uLL:
            case 0x324uLL:
            case 0x328uLL:
            case 0x32CuLL:
            case 0x330uLL:
            case 0x334uLL:
            case 0x33CuLL:
            case 0x340uLL:
            case 0x344uLL:
            case 0x348uLL:
            case 0x34CuLL:
            case 0x354uLL:
            case 0x358uLL:
            case 0x35CuLL:
            case 0x360uLL:
            case 0x368uLL:
            case 0x36CuLL:
            case 0x370uLL:
            case 0x374uLL:
            case 0x378uLL:
            case 0x37CuLL:
            case 0x380uLL:
            case 0x388uLL:
            case 0x38CuLL:
            case 0x390uLL:
            case 0x394uLL:
            case 0x398uLL:
            case 0x3A0uLL:
            case 0x3A4uLL:
            case 0x3A8uLL:
            case 0x3ACuLL:
            case 0x3B4uLL:
            case 0x3B8uLL:
            case 0x3BCuLL:
            case 0x3C0uLL:
            case 0x3C4uLL:
            case 0x3C8uLL:
            case 0x3CCuLL:
            case 0x3D4uLL:
            case 0x3D8uLL:
            case 0x3DCuLL:
            case 0x3E0uLL:
            case 0x3E4uLL:
            case 0x3ECuLL:
            case 0x3F0uLL:
            case 0x3F4uLL:
            case 0x3F8uLL:
            case 0x400uLL:
            case 0x404uLL:
            case 0x408uLL:
            case 0x40CuLL:
            case 0x410uLL:
            case 0x414uLL:
            case 0x418uLL:
            case 0x420uLL:
            case 0x424uLL:
            case 0x428uLL:
            case 0x42CuLL:
            case 0x430uLL:
            case 0x484uLL:
            case 0x488uLL:
            case 0x48CuLL:
            case 0x490uLL:
            case 0x498uLL:
            case 0x49CuLL:
            case 0x4A0uLL:
            case 0x4A4uLL:
            case 0x4A8uLL:
            case 0x4ACuLL:
            case 0x4B0uLL:
            case 0x4B8uLL:
            case 0x4BCuLL:
            case 0x4C0uLL:
            case 0x4C4uLL:
            case 0x4C8uLL:
            case 0x4D0uLL:
            case 0x4D4uLL:
            case 0x4D8uLL:
            case 0x4DCuLL:
            case 0x4E4uLL:
            case 0x4E8uLL:
            case 0x4ECuLL:
            case 0x4F0uLL:
            case 0x4F4uLL:
            case 0x4F8uLL:
            case 0x4FCuLL:
            case 0x504uLL:
            case 0x508uLL:
            case 0x50CuLL:
            case 0x510uLL:
            case 0x514uLL:
            case 0x51CuLL:
            case 0x520uLL:
            case 0x524uLL:
            case 0x528uLL:
            case 0x530uLL:
            case 0x534uLL:
            case 0x538uLL:
            case 0x53CuLL:
            case 0x540uLL:
            case 0x544uLL:
            case 0x548uLL:
            case 0x550uLL:
            case 0x554uLL:
            case 0x558uLL:
            case 0x55CuLL:
            case 0x560uLL:
            case 0x568uLL:
            case 0x56CuLL:
            case 0x570uLL:
            case 0x574uLL:
            case 0x57CuLL:
            case 0x580uLL:
            case 0x584uLL:
            case 0x588uLL:
            case 0x58CuLL:
            case 0x590uLL:
            case 0x594uLL:
            case 0x59CuLL:
            case 0x5A0uLL:
            case 0x5A4uLL:
            case 0x5A8uLL:
            case 0x5ACuLL:
            case 0x5B4uLL:
            case 0x5B8uLL:
            case 0x5BCuLL:
            case 0x5C0uLL:
            case 0x5C8uLL:
            case 0x5CCuLL:
            case 0x5D0uLL:
            case 0x5D4uLL:
            case 0x5D8uLL:
            case 0x5DCuLL:
            case 0x5E0uLL:
            case 0x5E8uLL:
            case 0x5ECuLL:
            case 0x5F0uLL:
            case 0x5F4uLL:
            case 0x5F8uLL:
            case 0x64CuLL:
            case 0x650uLL:
            case 0x654uLL:
            case 0x658uLL:
            case 0x65CuLL:
            case 0x664uLL:
            case 0x668uLL:
            case 0x66CuLL:
            case 0x670uLL:
            case 0x674uLL:
            case 0x678uLL:
            case 0x67CuLL:
            case 0x684uLL:
            case 0x688uLL:
            case 0x68CuLL:
            case 0x690uLL:
            case 0x698uLL:
            case 0x69CuLL:
            case 0x6A0uLL:
            case 0x6A4uLL:
            case 0x6A8uLL:
            case 0x6B0uLL:
            case 0x6B4uLL:
            case 0x6B8uLL:
            case 0x6BCuLL:
            case 0x6C0uLL:
            case 0x6C4uLL:
            case 0x6C8uLL:
            case 0x6D0uLL:
            case 0x6D4uLL:
            case 0x6D8uLL:
            case 0x6DCuLL:
            case 0x6E4uLL:
            case 0x6E8uLL:
            case 0x6ECuLL:
            case 0x6F0uLL:
            case 0x6F4uLL:
            case 0x6FCuLL:
            case 0x700uLL:
            case 0x704uLL:
            case 0x708uLL:
            case 0x70CuLL:
            case 0x710uLL:
            case 0x714uLL:
            case 0x71CuLL:
            case 0x720uLL:
            case 0x724uLL:
            case 0x728uLL:
            case 0x730uLL:
            case 0x734uLL:
            case 0x738uLL:
            case 0x73CuLL:
            case 0x740uLL:
            case 0x748uLL:
            case 0x74CuLL:
            case 0x750uLL:
            case 0x754uLL:
            case 0x758uLL:
            case 0x75CuLL:
            case 0x760uLL:
            case 0x768uLL:
            case 0x76CuLL:
            case 0x770uLL:
            case 0x774uLL:
            case 0x77CuLL:
            case 0x780uLL:
            case 0x784uLL:
            case 0x788uLL:
            case 0x78CuLL:
            case 0x794uLL:
            case 0x798uLL:
            case 0x79CuLL:
            case 0x7A0uLL:
            case 0x7A4uLL:
            case 0x7A8uLL:
            case 0x7ACuLL:
            case 0x7B4uLL:
            case 0x7B8uLL:
            case 0x7BCuLL:
            case 0x7C0uLL:
            case 0x814uLL:
            case 0x818uLL:
            case 0x81CuLL:
            case 0x820uLL:
            case 0x824uLL:
            case 0x82CuLL:
            case 0x830uLL:
            case 0x834uLL:
            case 0x838uLL:
            case 0x83CuLL:
            case 0x840uLL:
            case 0x844uLL:
            case 0x84CuLL:
            case 0x850uLL:
            case 0x854uLL:
            case 0x858uLL:
            case 0x860uLL:
            case 0x864uLL:
            case 0x868uLL:
            case 0x86CuLL:
            case 0x870uLL:
            case 0x878uLL:
            case 0x87CuLL:
            case 0x880uLL:
            case 0x884uLL:
            case 0x888uLL:
            case 0x88CuLL:
            case 0x890uLL:
            case 0x898uLL:
            case 0x89CuLL:
            case 0x8A0uLL:
            case 0x8A4uLL:
            case 0x8ACuLL:
            case 0x8B0uLL:
            case 0x8B4uLL:
            case 0x8B8uLL:
            case 0x8BCuLL:
            case 0x8C4uLL:
            case 0x8C8uLL:
            case 0x8CCuLL:
            case 0x8D0uLL:
            case 0x8D4uLL:
            case 0x8D8uLL:
            case 0x8DCuLL:
            case 0x8E4uLL:
            case 0x8E8uLL:
            case 0x8ECuLL:
            case 0x8F0uLL:
            case 0x8F8uLL:
            case 0x8FCuLL:
            case 0x900uLL:
            case 0x904uLL:
            case 0x908uLL:
            case 0x910uLL:
            case 0x914uLL:
            case 0x918uLL:
            case 0x91CuLL:
            case 0x920uLL:
            case 0x924uLL:
            case 0x928uLL:
            case 0x930uLL:
            case 0x934uLL:
            case 0x938uLL:
            case 0x93CuLL:
            case 0x944uLL:
            case 0x948uLL:
            case 0x94CuLL:
            case 0x950uLL:
            case 0x954uLL:
            case 0x95CuLL:
            case 0x960uLL:
            case 0x964uLL:
            case 0x968uLL:
            case 0x96CuLL:
            case 0x970uLL:
            case 0x974uLL:
            case 0x97CuLL:
            case 0x980uLL:
            case 0x984uLL:
            case 0x988uLL:
            case 0x990uLL:
            case 0x994uLL:
            case 0x998uLL:
            case 0x99CuLL:
            case 0x9A0uLL:
            case 0x9A8uLL:
            case 0x9ACuLL:
            case 0x9B0uLL:
            case 0x9B4uLL:
            case 0x9B8uLL:
            case 0x9BCuLL:
            case 0x9C0uLL:
            case 0x9C8uLL:
            case 0x9CCuLL:
            case 0x9D0uLL:
            case 0x9D4uLL:
            case 0x9DCuLL:
            case 0x9E0uLL:
            case 0x9E4uLL:
            case 0x9E8uLL:
            case 0x9ECuLL:
            case 0x9F4uLL:
            case 0x9F8uLL:
            case 0x9FCuLL:
            case 0xA00uLL:
            case 0xA04uLL:
            case 0xA08uLL:
            case 0xA0CuLL:
            case 0xA14uLL:
            case 0xA18uLL:
            case 0xA1CuLL:
            case 0xA20uLL:
            case 0xA74uLL:
            case 0xA78uLL:
            case 0xA7CuLL:
            case 0xA80uLL:
            case 0xA84uLL:
            case 0xA8CuLL:
            case 0xA90uLL:
            case 0xA94uLL:
            case 0xA98uLL:
            case 0xA9CuLL:
            case 0xAA0uLL:
            case 0xAA4uLL:
            case 0xAACuLL:
            case 0xAB0uLL:
            case 0xAB4uLL:
            case 0xAB8uLL:
            case 0xAC0uLL:
            case 0xAC4uLL:
            case 0xAC8uLL:
            case 0xACCuLL:
            case 0xAD0uLL:
            case 0xAD8uLL:
            case 0xADCuLL:
            case 0xAE0uLL:
            case 0xAE4uLL:
            case 0xAE8uLL:
            case 0xAECuLL:
            case 0xAF0uLL:
            case 0xAF8uLL:
            case 0xAFCuLL:
            case 0xB00uLL:
            case 0xB04uLL:
            case 0xB0CuLL:
            case 0xB10uLL:
            case 0xB14uLL:
            case 0xB18uLL:
            case 0xB1CuLL:
            case 0xB24uLL:
            case 0xB28uLL:
            case 0xB2CuLL:
            case 0xB30uLL:
            case 0xB34uLL:
            case 0xB38uLL:
            case 0xB3CuLL:
            case 0xB44uLL:
            case 0xB48uLL:
            case 0xB4CuLL:
            case 0xB50uLL:
            case 0xB58uLL:
            case 0xB5CuLL:
            case 0xB60uLL:
            case 0xB64uLL:
            case 0xB68uLL:
            case 0xB70uLL:
            case 0xB74uLL:
            case 0xB78uLL:
            case 0xB7CuLL:
            case 0xB80uLL:
            case 0xB84uLL:
            case 0xB88uLL:
            case 0xB90uLL:
            case 0xB94uLL:
            case 0xB98uLL:
            case 0xB9CuLL:
            case 0xBF0uLL:
            case 0xBF4uLL:
            case 0xBF8uLL:
            case 0xBFCuLL:
            case 0xC04uLL:
            case 0xC08uLL:
            case 0xC0CuLL:
            case 0xC10uLL:
            case 0xC14uLL:
            case 0xC18uLL:
            case 0xC1CuLL:
            case 0xC24uLL:
            case 0xC28uLL:
            case 0xC2CuLL:
            case 0xC30uLL:
            case 0xC34uLL:
            case 0xC3CuLL:
            case 0xC40uLL:
            case 0xC44uLL:
            case 0xC48uLL:
            case 0xC50uLL:
            case 0xC54uLL:
            case 0xC58uLL:
            case 0xC5CuLL:
            case 0xC60uLL:
            case 0xC64uLL:
            case 0xC68uLL:
            case 0xC70uLL:
            case 0xC74uLL:
            case 0xC78uLL:
            case 0xC7CuLL:
            case 0xC80uLL:
            case 0xC88uLL:
            case 0xC8CuLL:
            case 0xC90uLL:
            case 0xC94uLL:
            case 0xC9CuLL:
            case 0xCA0uLL:
            case 0xCA4uLL:
            case 0xCA8uLL:
            case 0xCACuLL:
            case 0xCB0uLL:
            case 0xCB4uLL:
            case 0xCBCuLL:
            case 0xCC0uLL:
            case 0xCC4uLL:
            case 0xCC8uLL:
            case 0xCCCuLL:
            case 0xCD4uLL:
            case 0xCD8uLL:
            case 0xCDCuLL:
            case 0xCE0uLL:
            case 0xCE8uLL:
            case 0xCECuLL:
            case 0xCF0uLL:
            case 0xCF4uLL:
            case 0xCF8uLL:
            case 0xCFCuLL:
            case 0xD00uLL:
            case 0xD08uLL:
            case 0xD0CuLL:
            case 0xD10uLL:
            case 0xD14uLL:
            case 0xD18uLL:
            case 0xD6CuLL:
            case 0xD70uLL:
            case 0xD74uLL:
            case 0xD78uLL:
            case 0xD80uLL:
            case 0xD84uLL:
            case 0xD88uLL:
            case 0xD8CuLL:
            case 0xD90uLL:
            case 0xD94uLL:
            case 0xD98uLL:
            case 0xDA0uLL:
            case 0xDA4uLL:
            case 0xDA8uLL:
            case 0xDACuLL:
            case 0xDB0uLL:
            case 0xDB8uLL:
            case 0xDBCuLL:
            case 0xDC0uLL:
            case 0xDC4uLL:
            case 0xDCCuLL:
            case 0xDD0uLL:
            case 0xDD4uLL:
            case 0xDD8uLL:
            case 0xDDCuLL:
            case 0xDE0uLL:
            case 0xDE4uLL:
            case 0xDECuLL:
            case 0xDF0uLL:
            case 0xDF4uLL:
            case 0xDF8uLL:
            case 0xDFCuLL:
            case 0xE04uLL:
            case 0xE08uLL:
            case 0xE0CuLL:
            case 0xE10uLL:
            case 0xE18uLL:
            case 0xE1CuLL:
            case 0xE20uLL:
            case 0xE24uLL:
            case 0xE28uLL:
            case 0xE2CuLL:
            case 0xE30uLL:
            case 0xE38uLL:
            case 0xE3CuLL:
            case 0xE40uLL:
            case 0xE44uLL:
            case 0xE48uLL:
            case 0xE50uLL:
            case 0xE54uLL:
            case 0xE58uLL:
            case 0xE5CuLL:
            case 0xE64uLL:
            case 0xE68uLL:
            case 0xE6CuLL:
            case 0xE70uLL:
            case 0xE74uLL:
            case 0xE78uLL:
            case 0xE7CuLL:
            case 0xE84uLL:
            case 0xE88uLL:
            case 0xE8CuLL:
            case 0xE90uLL:
            case 0xE94uLL:
            case 0xE9CuLL:
            case 0xEA0uLL:
            case 0xEA4uLL:
            case 0xEA8uLL:
            case 0xEB0uLL:
            case 0xEB4uLL:
            case 0xEB8uLL:
            case 0xEBCuLL:
            case 0xEC0uLL:
            case 0xEC4uLL:
            case 0xEC8uLL:
            case 0xED0uLL:
            case 0xED4uLL:
            case 0xED8uLL:
            case 0xEDCuLL:
            case 0xEE0uLL:
            case 0xEE8uLL:
            case 0xEECuLL:
            case 0xEF0uLL:
            case 0xEF4uLL:
            case 0xEFCuLL:
            case 0xF00uLL:
            case 0xF04uLL:
            case 0xF08uLL:
            case 0xF0CuLL:
            case 0xF10uLL:
            case 0xF14uLL:
            case 0xF1CuLL:
            case 0xF20uLL:
            case 0xF24uLL:
            case 0xF28uLL:
            case 0xF2CuLL:
            case 0xF34uLL:
            case 0xF38uLL:
            case 0xF3CuLL:
            case 0xF40uLL:
            case 0xF48uLL:
            case 0xF4CuLL:
            case 0xF50uLL:
            case 0xF54uLL:
            case 0xF58uLL:
            case 0xF5CuLL:
            case 0xF60uLL:
            case 0xF68uLL:
            case 0xF6CuLL:
            case 0xF70uLL:
            case 0xF74uLL:
            case 0xF78uLL:
            case 0xFCCuLL:
            case 0xFD0uLL:
            case 0xFD4uLL:
            case 0xFD8uLL:
            case 0xFE0uLL:
            case 0xFE4uLL:
            case 0xFE8uLL:
            case 0xFECuLL:
            case 0xFF0uLL:
            case 0xFF4uLL:
            case 0xFF8uLL:
            case 0x1000uLL:
            case 0x1004uLL:
            case 0x1008uLL:
            case 0x100CuLL:
            case 0x1010uLL:
            case 0x1018uLL:
            case 0x101CuLL:
            case 0x1020uLL:
            case 0x1024uLL:
            case 0x102CuLL:
            case 0x1030uLL:
            case 0x1034uLL:
            case 0x1038uLL:
            case 0x103CuLL:
            case 0x1040uLL:
            case 0x1044uLL:
            case 0x104CuLL:
            case 0x1050uLL:
            case 0x1054uLL:
            case 0x1058uLL:
            case 0x105CuLL:
            case 0x1064uLL:
            case 0x1068uLL:
            case 0x106CuLL:
            case 0x1070uLL:
            case 0x1078uLL:
            case 0x107CuLL:
            case 0x1080uLL:
            case 0x1084uLL:
            case 0x1088uLL:
            case 0x108CuLL:
            case 0x1090uLL:
            case 0x1098uLL:
            case 0x109CuLL:
            case 0x10A0uLL:
            case 0x10A4uLL:
            case 0x10A8uLL:
            case 0x10B0uLL:
            case 0x10B4uLL:
            case 0x10B8uLL:
            case 0x10BCuLL:
            case 0x10C4uLL:
            case 0x10C8uLL:
            case 0x10CCuLL:
            case 0x10D0uLL:
            case 0x10D4uLL:
            case 0x10D8uLL:
            case 0x10DCuLL:
            case 0x10E4uLL:
            case 0x10E8uLL:
            case 0x10ECuLL:
            case 0x10F0uLL:
            case 0x10F4uLL:
            case 0x10FCuLL:
            case 0x1100uLL:
            case 0x1104uLL:
            case 0x1108uLL:
            case 0x1110uLL:
            case 0x1114uLL:
            case 0x1118uLL:
            case 0x111CuLL:
            case 0x1120uLL:
            case 0x1124uLL:
            case 0x1128uLL:
            case 0x1130uLL:
            case 0x1134uLL:
            case 0x1138uLL:
            case 0x113CuLL:
            case 0x1140uLL:
            case 0x1194uLL:
            case 0x1198uLL:
            case 0x119CuLL:
            case 0x11A0uLL:
            case 0x11A4uLL:
            case 0x11ACuLL:
            case 0x11B0uLL:
            case 0x11B4uLL:
            case 0x11B8uLL:
            case 0x11BCuLL:
            case 0x11C0uLL:
            case 0x11C4uLL:
            case 0x11CCuLL:
            case 0x11D0uLL:
            case 0x11D4uLL:
            case 0x11D8uLL:
            case 0x11E0uLL:
            case 0x11E4uLL:
            case 0x11E8uLL:
            case 0x11ECuLL:
            case 0x11F0uLL:
            case 0x11F8uLL:
            case 0x11FCuLL:
            case 0x1200uLL:
            case 0x1204uLL:
            case 0x1208uLL:
            case 0x120CuLL:
            case 0x1210uLL:
            case 0x1218uLL:
            case 0x121CuLL:
            case 0x1220uLL:
            case 0x1224uLL:
            case 0x122CuLL:
            case 0x1230uLL:
            case 0x1234uLL:
            case 0x1238uLL:
            case 0x123CuLL:
            case 0x1244uLL:
            case 0x1248uLL:
            case 0x124CuLL:
            case 0x1250uLL:
            case 0x1254uLL:
            case 0x1258uLL:
            case 0x125CuLL:
            case 0x1264uLL:
            case 0x1268uLL:
            case 0x126CuLL:
            case 0x1270uLL:
            case 0x1278uLL:
            case 0x127CuLL:
            case 0x1280uLL:
            case 0x1284uLL:
            case 0x1288uLL:
            case 0x1290uLL:
            case 0x1294uLL:
            case 0x1298uLL:
            case 0x129CuLL:
            case 0x12A0uLL:
            case 0x12A4uLL:
            case 0x12A8uLL:
            case 0x12B0uLL:
            case 0x12B4uLL:
            case 0x12B8uLL:
            case 0x12BCuLL:
            case 0x12C4uLL:
            case 0x12C8uLL:
            case 0x12CCuLL:
            case 0x12D0uLL:
            case 0x12D4uLL:
            case 0x12DCuLL:
            case 0x12E0uLL:
            case 0x12E4uLL:
            case 0x12E8uLL:
            case 0x12ECuLL:
            case 0x12F0uLL:
            case 0x12F4uLL:
            case 0x12FCuLL:
            case 0x1300uLL:
            case 0x1304uLL:
            case 0x1308uLL:
            case 0x135CuLL:
            case 0x1360uLL:
            case 0x1364uLL:
            case 0x1368uLL:
            case 0x136CuLL:
            case 0x1374uLL:
            case 0x1378uLL:
            case 0x137CuLL:
            case 0x1380uLL:
            case 0x1384uLL:
            case 0x1388uLL:
            case 0x138CuLL:
            case 0x1394uLL:
            case 0x1398uLL:
            case 0x139CuLL:
            case 0x13A0uLL:
            case 0x13A8uLL:
            case 0x13ACuLL:
            case 0x13B0uLL:
            case 0x13B4uLL:
            case 0x13B8uLL:
            case 0x13C0uLL:
            case 0x13C4uLL:
            case 0x13C8uLL:
            case 0x13CCuLL:
            case 0x13D0uLL:
            case 0x13D4uLL:
            case 0x13D8uLL:
            case 0x13E0uLL:
            case 0x13E4uLL:
            case 0x13E8uLL:
            case 0x13ECuLL:
            case 0x13F4uLL:
            case 0x13F8uLL:
            case 0x13FCuLL:
            case 0x1400uLL:
            case 0x1404uLL:
            case 0x140CuLL:
            case 0x1410uLL:
            case 0x1414uLL:
            case 0x1418uLL:
            case 0x141CuLL:
            case 0x1420uLL:
            case 0x1424uLL:
            case 0x142CuLL:
            case 0x1430uLL:
            case 0x1434uLL:
            case 0x1438uLL:
            case 0x1440uLL:
            case 0x1444uLL:
            case 0x1448uLL:
            case 0x144CuLL:
            case 0x1450uLL:
            case 0x1458uLL:
            case 0x145CuLL:
            case 0x1460uLL:
            case 0x1464uLL:
            case 0x1468uLL:
            case 0x146CuLL:
            case 0x1470uLL:
            case 0x1478uLL:
            case 0x147CuLL:
            case 0x1480uLL:
            case 0x1484uLL:
            case 0x148CuLL:
            case 0x1490uLL:
            case 0x1494uLL:
            case 0x1498uLL:
            case 0x149CuLL:
            case 0x14A4uLL:
            case 0x14A8uLL:
            case 0x14ACuLL:
            case 0x14B0uLL:
            case 0x14B4uLL:
            case 0x14B8uLL:
            case 0x14BCuLL:
            case 0x14C4uLL:
            case 0x14C8uLL:
            case 0x14CCuLL:
            case 0x14D0uLL:
            case 0x14D8uLL:
            case 0x14DCuLL:
            case 0x14E0uLL:
            case 0x14E4uLL:
            case 0x14E8uLL:
            case 0x14F0uLL:
            case 0x14F4uLL:
            case 0x14F8uLL:
            case 0x14FCuLL:
            case 0x1500uLL:
            case 0x1504uLL:
            case 0x1508uLL:
            case 0x1510uLL:
            case 0x1514uLL:
            case 0x1518uLL:
            case 0x151CuLL:
            case 0x1524uLL:
            case 0x1528uLL:
            case 0x152CuLL:
            case 0x1530uLL:
            case 0x1534uLL:
            case 0x153CuLL:
            case 0x1540uLL:
            case 0x1544uLL:
            case 0x1548uLL:
            case 0x154CuLL:
            case 0x1550uLL:
            case 0x1554uLL:
            case 0x155CuLL:
            case 0x1560uLL:
            case 0x1564uLL:
            case 0x1568uLL:
            case 0x15BCuLL:
            case 0x15C0uLL:
            case 0x15C4uLL:
            case 0x15C8uLL:
            case 0x15CCuLL:
            case 0x15D4uLL:
            case 0x15D8uLL:
            case 0x15DCuLL:
            case 0x15E0uLL:
            case 0x15E4uLL:
            case 0x15E8uLL:
            case 0x15ECuLL:
            case 0x15F4uLL:
            case 0x15F8uLL:
            case 0x15FCuLL:
            case 0x1600uLL:
            case 0x1608uLL:
            case 0x160CuLL:
            case 0x1610uLL:
            case 0x1614uLL:
            case 0x1618uLL:
            case 0x1620uLL:
            case 0x1624uLL:
            case 0x1628uLL:
            case 0x162CuLL:
            case 0x1630uLL:
            case 0x1634uLL:
            case 0x1638uLL:
            case 0x1640uLL:
            case 0x1644uLL:
            case 0x1648uLL:
            case 0x164CuLL:
            case 0x1654uLL:
            case 0x1658uLL:
            case 0x165CuLL:
            case 0x1660uLL:
            case 0x1664uLL:
            case 0x166CuLL:
            case 0x1670uLL:
            case 0x1674uLL:
            case 0x1678uLL:
            case 0x167CuLL:
            case 0x1680uLL:
            case 0x1684uLL:
            case 0x168CuLL:
            case 0x1690uLL:
            case 0x1694uLL:
            case 0x1698uLL:
            case 0x16A0uLL:
            case 0x16A4uLL:
            case 0x16A8uLL:
            case 0x16ACuLL:
            case 0x16B0uLL:
            case 0x16B8uLL:
            case 0x16BCuLL:
            case 0x16C0uLL:
            case 0x16C4uLL:
            case 0x16C8uLL:
            case 0x16CCuLL:
            case 0x16D0uLL:
            case 0x16D8uLL:
            case 0x16DCuLL:
            case 0x16E0uLL:
            case 0x16E4uLL:
              v26 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v25 + 2 * v114 + v21]];
              *a7 = v26;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            case 0xAuLL:
            case 0xBuLL:
            case 0xCuLL:
            case 0xDuLL:
            case 0xEuLL:
            case 0xFuLL:
            case 0x58uLL:
            case 0x5CuLL:
            case 0x60uLL:
            case 0x64uLL:
            case 0x68uLL:
            case 0x6CuLL:
            case 0x70uLL:
            case 0x74uLL:
            case 0x78uLL:
            case 0x7CuLL:
            case 0x80uLL:
            case 0x84uLL:
            case 0x88uLL:
            case 0x8CuLL:
            case 0x90uLL:
            case 0x94uLL:
            case 0x98uLL:
            case 0x9CuLL:
            case 0xA0uLL:
            case 0xA4uLL:
            case 0xB8uLL:
            case 0xD8uLL:
            case 0xF0uLL:
            case 0x104uLL:
            case 0x124uLL:
            case 0x13CuLL:
            case 0x150uLL:
            case 0x170uLL:
            case 0x188uLL:
            case 0x19CuLL:
            case 0x1BCuLL:
            case 0x1D4uLL:
            case 0x1D8uLL:
            case 0x1DCuLL:
            case 0x1E0uLL:
            case 0x1E4uLL:
            case 0x1E8uLL:
            case 0x1ECuLL:
            case 0x1F0uLL:
            case 0x1F4uLL:
            case 0x1F8uLL:
            case 0x1FCuLL:
            case 0x200uLL:
            case 0x204uLL:
            case 0x208uLL:
            case 0x20CuLL:
            case 0x210uLL:
            case 0x214uLL:
            case 0x218uLL:
            case 0x21CuLL:
            case 0x220uLL:
            case 0x234uLL:
            case 0x254uLL:
            case 0x26CuLL:
            case 0x280uLL:
            case 0x2A0uLL:
            case 0x2B8uLL:
            case 0x2CCuLL:
            case 0x2ECuLL:
            case 0x304uLL:
            case 0x318uLL:
            case 0x338uLL:
            case 0x350uLL:
            case 0x364uLL:
            case 0x384uLL:
            case 0x39CuLL:
            case 0x3B0uLL:
            case 0x3D0uLL:
            case 0x3E8uLL:
            case 0x3FCuLL:
            case 0x41CuLL:
            case 0x434uLL:
            case 0x438uLL:
            case 0x43CuLL:
            case 0x440uLL:
            case 0x444uLL:
            case 0x448uLL:
            case 0x44CuLL:
            case 0x450uLL:
            case 0x454uLL:
            case 0x458uLL:
            case 0x45CuLL:
            case 0x460uLL:
            case 0x464uLL:
            case 0x468uLL:
            case 0x46CuLL:
            case 0x470uLL:
            case 0x474uLL:
            case 0x478uLL:
            case 0x47CuLL:
            case 0x480uLL:
            case 0x494uLL:
            case 0x4B4uLL:
            case 0x4CCuLL:
            case 0x4E0uLL:
            case 0x500uLL:
            case 0x518uLL:
            case 0x52CuLL:
            case 0x54CuLL:
            case 0x564uLL:
            case 0x578uLL:
            case 0x598uLL:
            case 0x5B0uLL:
            case 0x5C4uLL:
            case 0x5E4uLL:
            case 0x5FCuLL:
            case 0x600uLL:
            case 0x604uLL:
            case 0x608uLL:
            case 0x60CuLL:
            case 0x610uLL:
            case 0x614uLL:
            case 0x618uLL:
            case 0x61CuLL:
            case 0x620uLL:
            case 0x624uLL:
            case 0x628uLL:
            case 0x62CuLL:
            case 0x630uLL:
            case 0x634uLL:
            case 0x638uLL:
            case 0x63CuLL:
            case 0x640uLL:
            case 0x644uLL:
            case 0x648uLL:
            case 0x660uLL:
            case 0x680uLL:
            case 0x694uLL:
            case 0x6ACuLL:
            case 0x6CCuLL:
            case 0x6E0uLL:
            case 0x6F8uLL:
            case 0x718uLL:
            case 0x72CuLL:
            case 0x744uLL:
            case 0x764uLL:
            case 0x778uLL:
            case 0x790uLL:
            case 0x7B0uLL:
            case 0x7C4uLL:
            case 0x7C8uLL:
            case 0x7CCuLL:
            case 0x7D0uLL:
            case 0x7D4uLL:
            case 0x7D8uLL:
            case 0x7DCuLL:
            case 0x7E0uLL:
            case 0x7E4uLL:
            case 0x7E8uLL:
            case 0x7ECuLL:
            case 0x7F0uLL:
            case 0x7F4uLL:
            case 0x7F8uLL:
            case 0x7FCuLL:
            case 0x800uLL:
            case 0x804uLL:
            case 0x808uLL:
            case 0x80CuLL:
            case 0x810uLL:
            case 0x828uLL:
            case 0x848uLL:
            case 0x85CuLL:
            case 0x874uLL:
            case 0x894uLL:
            case 0x8A8uLL:
            case 0x8C0uLL:
            case 0x8E0uLL:
            case 0x8F4uLL:
            case 0x90CuLL:
            case 0x92CuLL:
            case 0x940uLL:
            case 0x958uLL:
            case 0x978uLL:
            case 0x98CuLL:
            case 0x9A4uLL:
            case 0x9C4uLL:
            case 0x9D8uLL:
            case 0x9F0uLL:
            case 0xA10uLL:
            case 0xA24uLL:
            case 0xA28uLL:
            case 0xA2CuLL:
            case 0xA30uLL:
            case 0xA34uLL:
            case 0xA38uLL:
            case 0xA3CuLL:
            case 0xA40uLL:
            case 0xA44uLL:
            case 0xA48uLL:
            case 0xA4CuLL:
            case 0xA50uLL:
            case 0xA54uLL:
            case 0xA58uLL:
            case 0xA5CuLL:
            case 0xA60uLL:
            case 0xA64uLL:
            case 0xA68uLL:
            case 0xA6CuLL:
            case 0xA70uLL:
            case 0xA88uLL:
            case 0xAA8uLL:
            case 0xABCuLL:
            case 0xAD4uLL:
            case 0xAF4uLL:
            case 0xB08uLL:
            case 0xB20uLL:
            case 0xB40uLL:
            case 0xB54uLL:
            case 0xB6CuLL:
            case 0xB8CuLL:
            case 0xBA0uLL:
            case 0xBA4uLL:
            case 0xBA8uLL:
            case 0xBACuLL:
            case 0xBB0uLL:
            case 0xBB4uLL:
            case 0xBB8uLL:
            case 0xBBCuLL:
            case 0xBC0uLL:
            case 0xBC4uLL:
            case 0xBC8uLL:
            case 0xBCCuLL:
            case 0xBD0uLL:
            case 0xBD4uLL:
            case 0xBD8uLL:
            case 0xBDCuLL:
            case 0xBE0uLL:
            case 0xBE4uLL:
            case 0xBE8uLL:
            case 0xBECuLL:
            case 0xC00uLL:
            case 0xC20uLL:
            case 0xC38uLL:
            case 0xC4CuLL:
            case 0xC6CuLL:
            case 0xC84uLL:
            case 0xC98uLL:
            case 0xCB8uLL:
            case 0xCD0uLL:
            case 0xCE4uLL:
            case 0xD04uLL:
            case 0xD1CuLL:
            case 0xD20uLL:
            case 0xD24uLL:
            case 0xD28uLL:
            case 0xD2CuLL:
            case 0xD30uLL:
            case 0xD34uLL:
            case 0xD38uLL:
            case 0xD3CuLL:
            case 0xD40uLL:
            case 0xD44uLL:
            case 0xD48uLL:
            case 0xD4CuLL:
            case 0xD50uLL:
            case 0xD54uLL:
            case 0xD58uLL:
            case 0xD5CuLL:
            case 0xD60uLL:
            case 0xD64uLL:
            case 0xD68uLL:
            case 0xD7CuLL:
            case 0xD9CuLL:
            case 0xDB4uLL:
            case 0xDC8uLL:
            case 0xDE8uLL:
            case 0xE00uLL:
            case 0xE14uLL:
            case 0xE34uLL:
            case 0xE4CuLL:
            case 0xE60uLL:
            case 0xE80uLL:
            case 0xE98uLL:
            case 0xEACuLL:
            case 0xECCuLL:
            case 0xEE4uLL:
            case 0xEF8uLL:
            case 0xF18uLL:
            case 0xF30uLL:
            case 0xF44uLL:
            case 0xF64uLL:
            case 0xF7CuLL:
            case 0xF80uLL:
            case 0xF84uLL:
            case 0xF88uLL:
            case 0xF8CuLL:
            case 0xF90uLL:
            case 0xF94uLL:
            case 0xF98uLL:
            case 0xF9CuLL:
            case 0xFA0uLL:
            case 0xFA4uLL:
            case 0xFA8uLL:
            case 0xFACuLL:
            case 0xFB0uLL:
            case 0xFB4uLL:
            case 0xFB8uLL:
            case 0xFBCuLL:
            case 0xFC0uLL:
            case 0xFC4uLL:
            case 0xFC8uLL:
            case 0xFDCuLL:
            case 0xFFCuLL:
            case 0x1014uLL:
            case 0x1028uLL:
            case 0x1048uLL:
            case 0x1060uLL:
            case 0x1074uLL:
            case 0x1094uLL:
            case 0x10ACuLL:
            case 0x10C0uLL:
            case 0x10E0uLL:
            case 0x10F8uLL:
            case 0x110CuLL:
            case 0x112CuLL:
            case 0x1144uLL:
            case 0x1148uLL:
            case 0x114CuLL:
            case 0x1150uLL:
            case 0x1154uLL:
            case 0x1158uLL:
            case 0x115CuLL:
            case 0x1160uLL:
            case 0x1164uLL:
            case 0x1168uLL:
            case 0x116CuLL:
            case 0x1170uLL:
            case 0x1174uLL:
            case 0x1178uLL:
            case 0x117CuLL:
            case 0x1180uLL:
            case 0x1184uLL:
            case 0x1188uLL:
            case 0x118CuLL:
            case 0x1190uLL:
            case 0x11A8uLL:
            case 0x11C8uLL:
            case 0x11DCuLL:
            case 0x11F4uLL:
            case 0x1214uLL:
            case 0x1228uLL:
            case 0x1240uLL:
            case 0x1260uLL:
            case 0x1274uLL:
            case 0x128CuLL:
            case 0x12ACuLL:
            case 0x12C0uLL:
            case 0x12D8uLL:
            case 0x12F8uLL:
            case 0x130CuLL:
            case 0x1310uLL:
            case 0x1314uLL:
            case 0x1318uLL:
            case 0x131CuLL:
            case 0x1320uLL:
            case 0x1324uLL:
            case 0x1328uLL:
            case 0x132CuLL:
            case 0x1330uLL:
            case 0x1334uLL:
            case 0x1338uLL:
            case 0x133CuLL:
            case 0x1340uLL:
            case 0x1344uLL:
            case 0x1348uLL:
            case 0x134CuLL:
            case 0x1350uLL:
            case 0x1354uLL:
            case 0x1358uLL:
            case 0x1370uLL:
            case 0x1390uLL:
            case 0x13A4uLL:
            case 0x13BCuLL:
            case 0x13DCuLL:
            case 0x13F0uLL:
            case 0x1408uLL:
            case 0x1428uLL:
            case 0x143CuLL:
            case 0x1454uLL:
            case 0x1474uLL:
            case 0x1488uLL:
            case 0x14A0uLL:
            case 0x14C0uLL:
            case 0x14D4uLL:
            case 0x14ECuLL:
            case 0x150CuLL:
            case 0x1520uLL:
            case 0x1538uLL:
            case 0x1558uLL:
            case 0x156CuLL:
            case 0x1570uLL:
            case 0x1574uLL:
            case 0x1578uLL:
            case 0x157CuLL:
            case 0x1580uLL:
            case 0x1584uLL:
            case 0x1588uLL:
            case 0x158CuLL:
            case 0x1590uLL:
            case 0x1594uLL:
            case 0x1598uLL:
            case 0x159CuLL:
            case 0x15A0uLL:
            case 0x15A4uLL:
            case 0x15A8uLL:
            case 0x15ACuLL:
            case 0x15B0uLL:
            case 0x15B4uLL:
            case 0x15B8uLL:
            case 0x15D0uLL:
            case 0x15F0uLL:
            case 0x1604uLL:
            case 0x161CuLL:
            case 0x163CuLL:
            case 0x1650uLL:
            case 0x1668uLL:
            case 0x1688uLL:
            case 0x169CuLL:
            case 0x16B4uLL:
            case 0x16D4uLL:
              goto LABEL_19;
            case 0x14uLL:
              v26 = 9;
              *a7 = 9;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            case 0x15uLL:
              v26 = 10;
              *a7 = 10;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            default:
              v26 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v25 + 2 * v114 + v21]];
              *a7 = v26;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
          }
        }
        v26 = v25[145];
        if (((*(_WORD *)(v25 + 167) & 0x80) != 0 || (char)v25[16] >= 1) && !v25[144])
        {
          v32 = *v25;
          v26 = v25[((int)((mi_size_wide_4[v32] - 1) & v115) >> av1_get_txb_size_index_tw_w_log2_table[v32])
                  + 146
                  + (((mi_size_high_3[v32] - 1) & v23) >> av1_get_txb_size_index_tw_h_log2_table[v32] << av1_get_txb_size_index_stride_log2_table[v32])];
          *a7 = v26;
          if (!v16)
          {
LABEL_32:
            v30 = 64;
            v29 = v26;
            goto LABEL_33;
          }
        }
        else
        {
LABEL_19:
          *a7 = v26;
          if (!v16)
            goto LABEL_32;
        }
LABEL_20:
        v27 = v24[v116];
        if (!v18)
          goto LABEL_23;
      }
      if (*(_DWORD *)(v18 + 4 * (*(_WORD *)(v27 + 167) & 7) + 10692))
      {
        v28 = 0;
        goto LABEL_42;
      }
LABEL_23:
      if (v15)
      {
        v28 = 3;
        switch((unint64_t)av1_ss_size_lookup[4 * *v27 + 2 * v114 + v21])
        {
          case 0xAuLL:
          case 0xBuLL:
          case 0xCuLL:
          case 0xDuLL:
          case 0xEuLL:
          case 0xFuLL:
          case 0x58uLL:
          case 0x5CuLL:
          case 0x60uLL:
          case 0x64uLL:
          case 0x68uLL:
          case 0x6CuLL:
          case 0x70uLL:
          case 0x74uLL:
          case 0x78uLL:
          case 0x7CuLL:
          case 0x80uLL:
          case 0x84uLL:
          case 0x88uLL:
          case 0x8CuLL:
          case 0x90uLL:
          case 0x94uLL:
          case 0x98uLL:
          case 0x9CuLL:
          case 0xA0uLL:
          case 0xA4uLL:
          case 0xB8uLL:
          case 0xD8uLL:
          case 0xF0uLL:
          case 0x104uLL:
          case 0x124uLL:
          case 0x13CuLL:
          case 0x150uLL:
          case 0x170uLL:
          case 0x188uLL:
          case 0x19CuLL:
          case 0x1BCuLL:
          case 0x1D4uLL:
          case 0x1D8uLL:
          case 0x1DCuLL:
          case 0x1E0uLL:
          case 0x1E4uLL:
          case 0x1E8uLL:
          case 0x1ECuLL:
          case 0x1F0uLL:
          case 0x1F4uLL:
          case 0x1F8uLL:
          case 0x1FCuLL:
          case 0x200uLL:
          case 0x204uLL:
          case 0x208uLL:
          case 0x20CuLL:
          case 0x210uLL:
          case 0x214uLL:
          case 0x218uLL:
          case 0x21CuLL:
          case 0x220uLL:
          case 0x234uLL:
          case 0x254uLL:
          case 0x26CuLL:
          case 0x280uLL:
          case 0x2A0uLL:
          case 0x2B8uLL:
          case 0x2CCuLL:
          case 0x2ECuLL:
          case 0x304uLL:
          case 0x318uLL:
          case 0x338uLL:
          case 0x350uLL:
          case 0x364uLL:
          case 0x384uLL:
          case 0x39CuLL:
          case 0x3B0uLL:
          case 0x3D0uLL:
          case 0x3E8uLL:
          case 0x3FCuLL:
          case 0x41CuLL:
          case 0x434uLL:
          case 0x438uLL:
          case 0x43CuLL:
          case 0x440uLL:
          case 0x444uLL:
          case 0x448uLL:
          case 0x44CuLL:
          case 0x450uLL:
          case 0x454uLL:
          case 0x458uLL:
          case 0x45CuLL:
          case 0x460uLL:
          case 0x464uLL:
          case 0x468uLL:
          case 0x46CuLL:
          case 0x470uLL:
          case 0x474uLL:
          case 0x478uLL:
          case 0x47CuLL:
          case 0x480uLL:
          case 0x494uLL:
          case 0x4B4uLL:
          case 0x4CCuLL:
          case 0x4E0uLL:
          case 0x500uLL:
          case 0x518uLL:
          case 0x52CuLL:
          case 0x54CuLL:
          case 0x564uLL:
          case 0x578uLL:
          case 0x598uLL:
          case 0x5B0uLL:
          case 0x5C4uLL:
          case 0x5E4uLL:
          case 0x5FCuLL:
          case 0x600uLL:
          case 0x604uLL:
          case 0x608uLL:
          case 0x60CuLL:
          case 0x610uLL:
          case 0x614uLL:
          case 0x618uLL:
          case 0x61CuLL:
          case 0x620uLL:
          case 0x624uLL:
          case 0x628uLL:
          case 0x62CuLL:
          case 0x630uLL:
          case 0x634uLL:
          case 0x638uLL:
          case 0x63CuLL:
          case 0x640uLL:
          case 0x644uLL:
          case 0x648uLL:
          case 0x660uLL:
          case 0x680uLL:
          case 0x694uLL:
          case 0x6ACuLL:
          case 0x6CCuLL:
          case 0x6E0uLL:
          case 0x6F8uLL:
          case 0x718uLL:
          case 0x72CuLL:
          case 0x744uLL:
          case 0x764uLL:
          case 0x778uLL:
          case 0x790uLL:
          case 0x7B0uLL:
          case 0x7C4uLL:
          case 0x7C8uLL:
          case 0x7CCuLL:
          case 0x7D0uLL:
          case 0x7D4uLL:
          case 0x7D8uLL:
          case 0x7DCuLL:
          case 0x7E0uLL:
          case 0x7E4uLL:
          case 0x7E8uLL:
          case 0x7ECuLL:
          case 0x7F0uLL:
          case 0x7F4uLL:
          case 0x7F8uLL:
          case 0x7FCuLL:
          case 0x800uLL:
          case 0x804uLL:
          case 0x808uLL:
          case 0x80CuLL:
          case 0x810uLL:
          case 0x828uLL:
          case 0x848uLL:
          case 0x85CuLL:
          case 0x874uLL:
          case 0x894uLL:
          case 0x8A8uLL:
          case 0x8C0uLL:
          case 0x8E0uLL:
          case 0x8F4uLL:
          case 0x90CuLL:
          case 0x92CuLL:
          case 0x940uLL:
          case 0x958uLL:
          case 0x978uLL:
          case 0x98CuLL:
          case 0x9A4uLL:
          case 0x9C4uLL:
          case 0x9D8uLL:
          case 0x9F0uLL:
          case 0xA10uLL:
          case 0xA24uLL:
          case 0xA28uLL:
          case 0xA2CuLL:
          case 0xA30uLL:
          case 0xA34uLL:
          case 0xA38uLL:
          case 0xA3CuLL:
          case 0xA40uLL:
          case 0xA44uLL:
          case 0xA48uLL:
          case 0xA4CuLL:
          case 0xA50uLL:
          case 0xA54uLL:
          case 0xA58uLL:
          case 0xA5CuLL:
          case 0xA60uLL:
          case 0xA64uLL:
          case 0xA68uLL:
          case 0xA6CuLL:
          case 0xA70uLL:
          case 0xA88uLL:
          case 0xAA8uLL:
          case 0xABCuLL:
          case 0xAD4uLL:
          case 0xAF4uLL:
          case 0xB08uLL:
          case 0xB20uLL:
          case 0xB40uLL:
          case 0xB54uLL:
          case 0xB6CuLL:
          case 0xB8CuLL:
          case 0xBA0uLL:
          case 0xBA4uLL:
          case 0xBA8uLL:
          case 0xBACuLL:
          case 0xBB0uLL:
          case 0xBB4uLL:
          case 0xBB8uLL:
          case 0xBBCuLL:
          case 0xBC0uLL:
          case 0xBC4uLL:
          case 0xBC8uLL:
          case 0xBCCuLL:
          case 0xBD0uLL:
          case 0xBD4uLL:
          case 0xBD8uLL:
          case 0xBDCuLL:
          case 0xBE0uLL:
          case 0xBE4uLL:
          case 0xBE8uLL:
          case 0xBECuLL:
          case 0xC00uLL:
          case 0xC20uLL:
          case 0xC38uLL:
          case 0xC4CuLL:
          case 0xC6CuLL:
          case 0xC84uLL:
          case 0xC98uLL:
          case 0xCB8uLL:
          case 0xCD0uLL:
          case 0xCE4uLL:
          case 0xD04uLL:
          case 0xD1CuLL:
          case 0xD20uLL:
          case 0xD24uLL:
          case 0xD28uLL:
          case 0xD2CuLL:
          case 0xD30uLL:
          case 0xD34uLL:
          case 0xD38uLL:
          case 0xD3CuLL:
          case 0xD40uLL:
          case 0xD44uLL:
          case 0xD48uLL:
          case 0xD4CuLL:
          case 0xD50uLL:
          case 0xD54uLL:
          case 0xD58uLL:
          case 0xD5CuLL:
          case 0xD60uLL:
          case 0xD64uLL:
          case 0xD68uLL:
          case 0xD7CuLL:
          case 0xD9CuLL:
          case 0xDB4uLL:
          case 0xDC8uLL:
          case 0xDE8uLL:
          case 0xE00uLL:
          case 0xE14uLL:
          case 0xE34uLL:
          case 0xE4CuLL:
          case 0xE60uLL:
          case 0xE80uLL:
          case 0xE98uLL:
          case 0xEACuLL:
          case 0xECCuLL:
          case 0xEE4uLL:
          case 0xEF8uLL:
          case 0xF18uLL:
          case 0xF30uLL:
          case 0xF44uLL:
          case 0xF64uLL:
          case 0xF7CuLL:
          case 0xF80uLL:
          case 0xF84uLL:
          case 0xF88uLL:
          case 0xF8CuLL:
          case 0xF90uLL:
          case 0xF94uLL:
          case 0xF98uLL:
          case 0xF9CuLL:
          case 0xFA0uLL:
          case 0xFA4uLL:
          case 0xFA8uLL:
          case 0xFACuLL:
          case 0xFB0uLL:
          case 0xFB4uLL:
          case 0xFB8uLL:
          case 0xFBCuLL:
          case 0xFC0uLL:
          case 0xFC4uLL:
          case 0xFC8uLL:
          case 0xFDCuLL:
          case 0xFFCuLL:
          case 0x1014uLL:
          case 0x1028uLL:
          case 0x1048uLL:
          case 0x1060uLL:
          case 0x1074uLL:
          case 0x1094uLL:
          case 0x10ACuLL:
          case 0x10C0uLL:
          case 0x10E0uLL:
          case 0x10F8uLL:
          case 0x110CuLL:
          case 0x112CuLL:
          case 0x1144uLL:
          case 0x1148uLL:
          case 0x114CuLL:
          case 0x1150uLL:
          case 0x1154uLL:
          case 0x1158uLL:
          case 0x115CuLL:
          case 0x1160uLL:
          case 0x1164uLL:
          case 0x1168uLL:
          case 0x116CuLL:
          case 0x1170uLL:
          case 0x1174uLL:
          case 0x1178uLL:
          case 0x117CuLL:
          case 0x1180uLL:
          case 0x1184uLL:
          case 0x1188uLL:
          case 0x118CuLL:
          case 0x1190uLL:
          case 0x11A8uLL:
          case 0x11C8uLL:
          case 0x11DCuLL:
          case 0x11F4uLL:
          case 0x1214uLL:
          case 0x1228uLL:
          case 0x1240uLL:
          case 0x1260uLL:
          case 0x1274uLL:
          case 0x128CuLL:
          case 0x12ACuLL:
          case 0x12C0uLL:
          case 0x12D8uLL:
          case 0x12F8uLL:
          case 0x130CuLL:
          case 0x1310uLL:
          case 0x1314uLL:
          case 0x1318uLL:
          case 0x131CuLL:
          case 0x1320uLL:
          case 0x1324uLL:
          case 0x1328uLL:
          case 0x132CuLL:
          case 0x1330uLL:
          case 0x1334uLL:
          case 0x1338uLL:
          case 0x133CuLL:
          case 0x1340uLL:
          case 0x1344uLL:
          case 0x1348uLL:
          case 0x134CuLL:
          case 0x1350uLL:
          case 0x1354uLL:
          case 0x1358uLL:
          case 0x1370uLL:
          case 0x1390uLL:
          case 0x13A4uLL:
          case 0x13BCuLL:
          case 0x13DCuLL:
          case 0x13F0uLL:
          case 0x1408uLL:
          case 0x1428uLL:
          case 0x143CuLL:
          case 0x1454uLL:
          case 0x1474uLL:
          case 0x1488uLL:
          case 0x14A0uLL:
          case 0x14C0uLL:
          case 0x14D4uLL:
          case 0x14ECuLL:
          case 0x150CuLL:
          case 0x1520uLL:
          case 0x1538uLL:
          case 0x1558uLL:
          case 0x156CuLL:
          case 0x1570uLL:
          case 0x1574uLL:
          case 0x1578uLL:
          case 0x157CuLL:
          case 0x1580uLL:
          case 0x1584uLL:
          case 0x1588uLL:
          case 0x158CuLL:
          case 0x1590uLL:
          case 0x1594uLL:
          case 0x1598uLL:
          case 0x159CuLL:
          case 0x15A0uLL:
          case 0x15A4uLL:
          case 0x15A8uLL:
          case 0x15ACuLL:
          case 0x15B0uLL:
          case 0x15B4uLL:
          case 0x15B8uLL:
          case 0x15D0uLL:
          case 0x15F0uLL:
          case 0x1604uLL:
          case 0x161CuLL:
          case 0x163CuLL:
          case 0x1650uLL:
          case 0x1668uLL:
          case 0x1688uLL:
          case 0x169CuLL:
          case 0x16B4uLL:
          case 0x16D4uLL:
            break;
          case 0x14uLL:
            v28 = 9;
            break;
          case 0x15uLL:
            v28 = 10;
            break;
          default:
            v28 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v27 + 2 * v114 + v21]];
            break;
        }
      }
      else
      {
        v28 = v27[145];
        if (((*(_WORD *)(v27 + 167) & 0x80) != 0 || (char)v27[16] >= 1) && !v27[144])
        {
          v31 = *v27;
          v28 = v27[(((mi_size_wide_4[v31] - 1) & v106) >> av1_get_txb_size_index_tw_w_log2_table[v31])
                  + 146
                  + (((mi_size_high_3[v31] - 1) & v23) >> av1_get_txb_size_index_tw_h_log2_table[v31] << av1_get_txb_size_index_stride_log2_table[v31])];
        }
      }
LABEL_42:
      v30 = tx_size_high_1[v28];
      filter_level = av1_get_filter_level(a1, v131, 0, v15, v25);
      if (filter_level)
      {
        if (v27 == v25)
          goto LABEL_51;
      }
      else
      {
        filter_level = av1_get_filter_level(a1, v131, 0, v15, v27);
        if (v27 == v25)
        {
LABEL_51:
          v37 = v25[144];
          if (v37)
            v37 = (*(_WORD *)(v25 + 167) & 0x80) != 0 || (char)v25[16] > 0;
          goto LABEL_45;
        }
      }
      v37 = 0;
LABEL_45:
      if (v27 != v25)
        v37 = 0;
      if ((v37 & 1) != 0)
      {
        v29 = v26;
        v19 = a1;
        v33 = v114;
        v34 = v108;
        v35 = v114;
      }
      else
      {
        v33 = v114;
        v34 = v108;
        v35 = v114;
        if (filter_level)
        {
          *a6 = vert_filter_length_chroma[19 * v26 + v28];
          *((_QWORD *)a6 + 1) = v131 + 48 * filter_level;
          v29 = *a7;
        }
        else
        {
          v29 = v26;
        }
        v19 = a1;
      }
LABEL_57:
      v38 = tx_size_high_1[v26];
      if (v30 < v38)
        v38 = v30;
      v39 = (int)tx_size_wide_unit[v29];
      v40 = ((_DWORD)v39 << v33) + v16;
      if (v40 < v109)
      {
        v41 = &a7[v39];
        v42 = &a6[16 * v39];
        do
        {
          *v42 = 0;
          v44 = (unsigned __int8 **)(*(_QWORD *)(v19 + 568)
                                   + 8 * (*(_DWORD *)(v19 + 580) * v23)
                                   + 8 * (v40 | v35));
          v45 = *v44;
          if (v18 && *(_DWORD *)(v18 + 4 * (*(_WORD *)(v45 + 167) & 7) + 10692))
          {
            v46 = 0;
            *v41 = 0;
            v47 = v44[v116];
            v48 = *(_WORD *)(v45 + 167);
            v49 = v48 & 7;
            if (!*(_DWORD *)(v34 + 5384))
              goto LABEL_67;
          }
          else
          {
            if (v15)
            {
              v53 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v45 + 2 * v35 + v127]];
              v46 = 3;
              switch((unint64_t)av1_ss_size_lookup[4 * *v45 + 2 * v35 + v127])
              {
                case 1uLL:
                case 2uLL:
                case 4uLL:
                case 5uLL:
                case 7uLL:
                case 8uLL:
                case 0x10uLL:
                case 0x11uLL:
                case 0x12uLL:
                case 0x13uLL:
                case 0xA8uLL:
                case 0xACuLL:
                case 0xB0uLL:
                case 0xB4uLL:
                case 0xBCuLL:
                case 0xC0uLL:
                case 0xC4uLL:
                case 0xC8uLL:
                case 0xCCuLL:
                case 0xD0uLL:
                case 0xD4uLL:
                case 0xDCuLL:
                case 0xE0uLL:
                case 0xE4uLL:
                case 0xE8uLL:
                case 0xECuLL:
                case 0xF4uLL:
                case 0xF8uLL:
                case 0xFCuLL:
                case 0x100uLL:
                case 0x108uLL:
                case 0x10CuLL:
                case 0x110uLL:
                case 0x114uLL:
                case 0x118uLL:
                case 0x11CuLL:
                case 0x120uLL:
                case 0x128uLL:
                case 0x12CuLL:
                case 0x130uLL:
                case 0x134uLL:
                case 0x138uLL:
                case 0x140uLL:
                case 0x144uLL:
                case 0x148uLL:
                case 0x14CuLL:
                case 0x154uLL:
                case 0x158uLL:
                case 0x15CuLL:
                case 0x160uLL:
                case 0x164uLL:
                case 0x168uLL:
                case 0x16CuLL:
                case 0x174uLL:
                case 0x178uLL:
                case 0x17CuLL:
                case 0x180uLL:
                case 0x184uLL:
                case 0x18CuLL:
                case 0x190uLL:
                case 0x194uLL:
                case 0x198uLL:
                case 0x1A0uLL:
                case 0x1A4uLL:
                case 0x1A8uLL:
                case 0x1ACuLL:
                case 0x1B0uLL:
                case 0x1B4uLL:
                case 0x1B8uLL:
                case 0x1C0uLL:
                case 0x1C4uLL:
                case 0x1C8uLL:
                case 0x1CCuLL:
                case 0x1D0uLL:
                case 0x224uLL:
                case 0x228uLL:
                case 0x22CuLL:
                case 0x230uLL:
                case 0x238uLL:
                case 0x23CuLL:
                case 0x240uLL:
                case 0x244uLL:
                case 0x248uLL:
                case 0x24CuLL:
                case 0x250uLL:
                case 0x258uLL:
                case 0x25CuLL:
                case 0x260uLL:
                case 0x264uLL:
                case 0x268uLL:
                case 0x270uLL:
                case 0x274uLL:
                case 0x278uLL:
                case 0x27CuLL:
                case 0x284uLL:
                case 0x288uLL:
                case 0x28CuLL:
                case 0x290uLL:
                case 0x294uLL:
                case 0x298uLL:
                case 0x29CuLL:
                case 0x2A4uLL:
                case 0x2A8uLL:
                case 0x2ACuLL:
                case 0x2B0uLL:
                case 0x2B4uLL:
                case 0x2BCuLL:
                case 0x2C0uLL:
                case 0x2C4uLL:
                case 0x2C8uLL:
                case 0x2D0uLL:
                case 0x2D4uLL:
                case 0x2D8uLL:
                case 0x2DCuLL:
                case 0x2E0uLL:
                case 0x2E4uLL:
                case 0x2E8uLL:
                case 0x2F0uLL:
                case 0x2F4uLL:
                case 0x2F8uLL:
                case 0x2FCuLL:
                case 0x300uLL:
                case 0x308uLL:
                case 0x30CuLL:
                case 0x310uLL:
                case 0x314uLL:
                case 0x31CuLL:
                case 0x320uLL:
                case 0x324uLL:
                case 0x328uLL:
                case 0x32CuLL:
                case 0x330uLL:
                case 0x334uLL:
                case 0x33CuLL:
                case 0x340uLL:
                case 0x344uLL:
                case 0x348uLL:
                case 0x34CuLL:
                case 0x354uLL:
                case 0x358uLL:
                case 0x35CuLL:
                case 0x360uLL:
                case 0x368uLL:
                case 0x36CuLL:
                case 0x370uLL:
                case 0x374uLL:
                case 0x378uLL:
                case 0x37CuLL:
                case 0x380uLL:
                case 0x388uLL:
                case 0x38CuLL:
                case 0x390uLL:
                case 0x394uLL:
                case 0x398uLL:
                case 0x3A0uLL:
                case 0x3A4uLL:
                case 0x3A8uLL:
                case 0x3ACuLL:
                case 0x3B4uLL:
                case 0x3B8uLL:
                case 0x3BCuLL:
                case 0x3C0uLL:
                case 0x3C4uLL:
                case 0x3C8uLL:
                case 0x3CCuLL:
                case 0x3D4uLL:
                case 0x3D8uLL:
                case 0x3DCuLL:
                case 0x3E0uLL:
                case 0x3E4uLL:
                case 0x3ECuLL:
                case 0x3F0uLL:
                case 0x3F4uLL:
                case 0x3F8uLL:
                case 0x400uLL:
                case 0x404uLL:
                case 0x408uLL:
                case 0x40CuLL:
                case 0x410uLL:
                case 0x414uLL:
                case 0x418uLL:
                case 0x420uLL:
                case 0x424uLL:
                case 0x428uLL:
                case 0x42CuLL:
                case 0x430uLL:
                case 0x484uLL:
                case 0x488uLL:
                case 0x48CuLL:
                case 0x490uLL:
                case 0x498uLL:
                case 0x49CuLL:
                case 0x4A0uLL:
                case 0x4A4uLL:
                case 0x4A8uLL:
                case 0x4ACuLL:
                case 0x4B0uLL:
                case 0x4B8uLL:
                case 0x4BCuLL:
                case 0x4C0uLL:
                case 0x4C4uLL:
                case 0x4C8uLL:
                case 0x4D0uLL:
                case 0x4D4uLL:
                case 0x4D8uLL:
                case 0x4DCuLL:
                case 0x4E4uLL:
                case 0x4E8uLL:
                case 0x4ECuLL:
                case 0x4F0uLL:
                case 0x4F4uLL:
                case 0x4F8uLL:
                case 0x4FCuLL:
                case 0x504uLL:
                case 0x508uLL:
                case 0x50CuLL:
                case 0x510uLL:
                case 0x514uLL:
                case 0x51CuLL:
                case 0x520uLL:
                case 0x524uLL:
                case 0x528uLL:
                case 0x530uLL:
                case 0x534uLL:
                case 0x538uLL:
                case 0x53CuLL:
                case 0x540uLL:
                case 0x544uLL:
                case 0x548uLL:
                case 0x550uLL:
                case 0x554uLL:
                case 0x558uLL:
                case 0x55CuLL:
                case 0x560uLL:
                case 0x568uLL:
                case 0x56CuLL:
                case 0x570uLL:
                case 0x574uLL:
                case 0x57CuLL:
                case 0x580uLL:
                case 0x584uLL:
                case 0x588uLL:
                case 0x58CuLL:
                case 0x590uLL:
                case 0x594uLL:
                case 0x59CuLL:
                case 0x5A0uLL:
                case 0x5A4uLL:
                case 0x5A8uLL:
                case 0x5ACuLL:
                case 0x5B4uLL:
                case 0x5B8uLL:
                case 0x5BCuLL:
                case 0x5C0uLL:
                case 0x5C8uLL:
                case 0x5CCuLL:
                case 0x5D0uLL:
                case 0x5D4uLL:
                case 0x5D8uLL:
                case 0x5DCuLL:
                case 0x5E0uLL:
                case 0x5E8uLL:
                case 0x5ECuLL:
                case 0x5F0uLL:
                case 0x5F4uLL:
                case 0x5F8uLL:
                case 0x64CuLL:
                case 0x650uLL:
                case 0x654uLL:
                case 0x658uLL:
                case 0x65CuLL:
                case 0x664uLL:
                case 0x668uLL:
                case 0x66CuLL:
                case 0x670uLL:
                case 0x674uLL:
                case 0x678uLL:
                case 0x67CuLL:
                case 0x684uLL:
                case 0x688uLL:
                case 0x68CuLL:
                case 0x690uLL:
                case 0x698uLL:
                case 0x69CuLL:
                case 0x6A0uLL:
                case 0x6A4uLL:
                case 0x6A8uLL:
                case 0x6B0uLL:
                case 0x6B4uLL:
                case 0x6B8uLL:
                case 0x6BCuLL:
                case 0x6C0uLL:
                case 0x6C4uLL:
                case 0x6C8uLL:
                case 0x6D0uLL:
                case 0x6D4uLL:
                case 0x6D8uLL:
                case 0x6DCuLL:
                case 0x6E4uLL:
                case 0x6E8uLL:
                case 0x6ECuLL:
                case 0x6F0uLL:
                case 0x6F4uLL:
                case 0x6FCuLL:
                case 0x700uLL:
                case 0x704uLL:
                case 0x708uLL:
                case 0x70CuLL:
                case 0x710uLL:
                case 0x714uLL:
                case 0x71CuLL:
                case 0x720uLL:
                case 0x724uLL:
                case 0x728uLL:
                case 0x730uLL:
                case 0x734uLL:
                case 0x738uLL:
                case 0x73CuLL:
                case 0x740uLL:
                case 0x748uLL:
                case 0x74CuLL:
                case 0x750uLL:
                case 0x754uLL:
                case 0x758uLL:
                case 0x75CuLL:
                case 0x760uLL:
                case 0x768uLL:
                case 0x76CuLL:
                case 0x770uLL:
                case 0x774uLL:
                case 0x77CuLL:
                case 0x780uLL:
                case 0x784uLL:
                case 0x788uLL:
                case 0x78CuLL:
                case 0x794uLL:
                case 0x798uLL:
                case 0x79CuLL:
                case 0x7A0uLL:
                case 0x7A4uLL:
                case 0x7A8uLL:
                case 0x7ACuLL:
                case 0x7B4uLL:
                case 0x7B8uLL:
                case 0x7BCuLL:
                case 0x7C0uLL:
                case 0x814uLL:
                case 0x818uLL:
                case 0x81CuLL:
                case 0x820uLL:
                case 0x824uLL:
                case 0x82CuLL:
                case 0x830uLL:
                case 0x834uLL:
                case 0x838uLL:
                case 0x83CuLL:
                case 0x840uLL:
                case 0x844uLL:
                case 0x84CuLL:
                case 0x850uLL:
                case 0x854uLL:
                case 0x858uLL:
                case 0x860uLL:
                case 0x864uLL:
                case 0x868uLL:
                case 0x86CuLL:
                case 0x870uLL:
                case 0x878uLL:
                case 0x87CuLL:
                case 0x880uLL:
                case 0x884uLL:
                case 0x888uLL:
                case 0x88CuLL:
                case 0x890uLL:
                case 0x898uLL:
                case 0x89CuLL:
                case 0x8A0uLL:
                case 0x8A4uLL:
                case 0x8ACuLL:
                case 0x8B0uLL:
                case 0x8B4uLL:
                case 0x8B8uLL:
                case 0x8BCuLL:
                case 0x8C4uLL:
                case 0x8C8uLL:
                case 0x8CCuLL:
                case 0x8D0uLL:
                case 0x8D4uLL:
                case 0x8D8uLL:
                case 0x8DCuLL:
                case 0x8E4uLL:
                case 0x8E8uLL:
                case 0x8ECuLL:
                case 0x8F0uLL:
                case 0x8F8uLL:
                case 0x8FCuLL:
                case 0x900uLL:
                case 0x904uLL:
                case 0x908uLL:
                case 0x910uLL:
                case 0x914uLL:
                case 0x918uLL:
                case 0x91CuLL:
                case 0x920uLL:
                case 0x924uLL:
                case 0x928uLL:
                case 0x930uLL:
                case 0x934uLL:
                case 0x938uLL:
                case 0x93CuLL:
                case 0x944uLL:
                case 0x948uLL:
                case 0x94CuLL:
                case 0x950uLL:
                case 0x954uLL:
                case 0x95CuLL:
                case 0x960uLL:
                case 0x964uLL:
                case 0x968uLL:
                case 0x96CuLL:
                case 0x970uLL:
                case 0x974uLL:
                case 0x97CuLL:
                case 0x980uLL:
                case 0x984uLL:
                case 0x988uLL:
                case 0x990uLL:
                case 0x994uLL:
                case 0x998uLL:
                case 0x99CuLL:
                case 0x9A0uLL:
                case 0x9A8uLL:
                case 0x9ACuLL:
                case 0x9B0uLL:
                case 0x9B4uLL:
                case 0x9B8uLL:
                case 0x9BCuLL:
                case 0x9C0uLL:
                case 0x9C8uLL:
                case 0x9CCuLL:
                case 0x9D0uLL:
                case 0x9D4uLL:
                case 0x9DCuLL:
                case 0x9E0uLL:
                case 0x9E4uLL:
                case 0x9E8uLL:
                case 0x9ECuLL:
                case 0x9F4uLL:
                case 0x9F8uLL:
                case 0x9FCuLL:
                case 0xA00uLL:
                case 0xA04uLL:
                case 0xA08uLL:
                case 0xA0CuLL:
                case 0xA14uLL:
                case 0xA18uLL:
                case 0xA1CuLL:
                case 0xA20uLL:
                case 0xA74uLL:
                case 0xA78uLL:
                case 0xA7CuLL:
                case 0xA80uLL:
                case 0xA84uLL:
                case 0xA8CuLL:
                case 0xA90uLL:
                case 0xA94uLL:
                case 0xA98uLL:
                case 0xA9CuLL:
                case 0xAA0uLL:
                case 0xAA4uLL:
                case 0xAACuLL:
                case 0xAB0uLL:
                case 0xAB4uLL:
                case 0xAB8uLL:
                case 0xAC0uLL:
                case 0xAC4uLL:
                case 0xAC8uLL:
                case 0xACCuLL:
                case 0xAD0uLL:
                case 0xAD8uLL:
                case 0xADCuLL:
                case 0xAE0uLL:
                case 0xAE4uLL:
                case 0xAE8uLL:
                case 0xAECuLL:
                case 0xAF0uLL:
                case 0xAF8uLL:
                case 0xAFCuLL:
                case 0xB00uLL:
                case 0xB04uLL:
                case 0xB0CuLL:
                case 0xB10uLL:
                case 0xB14uLL:
                case 0xB18uLL:
                case 0xB1CuLL:
                case 0xB24uLL:
                case 0xB28uLL:
                case 0xB2CuLL:
                case 0xB30uLL:
                case 0xB34uLL:
                case 0xB38uLL:
                case 0xB3CuLL:
                case 0xB44uLL:
                case 0xB48uLL:
                case 0xB4CuLL:
                case 0xB50uLL:
                case 0xB58uLL:
                case 0xB5CuLL:
                case 0xB60uLL:
                case 0xB64uLL:
                case 0xB68uLL:
                case 0xB70uLL:
                case 0xB74uLL:
                case 0xB78uLL:
                case 0xB7CuLL:
                case 0xB80uLL:
                case 0xB84uLL:
                case 0xB88uLL:
                case 0xB90uLL:
                case 0xB94uLL:
                case 0xB98uLL:
                case 0xB9CuLL:
                case 0xBF0uLL:
                case 0xBF4uLL:
                case 0xBF8uLL:
                case 0xBFCuLL:
                case 0xC04uLL:
                case 0xC08uLL:
                case 0xC0CuLL:
                case 0xC10uLL:
                case 0xC14uLL:
                case 0xC18uLL:
                case 0xC1CuLL:
                case 0xC24uLL:
                case 0xC28uLL:
                case 0xC2CuLL:
                case 0xC30uLL:
                case 0xC34uLL:
                case 0xC3CuLL:
                case 0xC40uLL:
                case 0xC44uLL:
                case 0xC48uLL:
                case 0xC50uLL:
                case 0xC54uLL:
                case 0xC58uLL:
                case 0xC5CuLL:
                case 0xC60uLL:
                case 0xC64uLL:
                case 0xC68uLL:
                case 0xC70uLL:
                case 0xC74uLL:
                case 0xC78uLL:
                case 0xC7CuLL:
                case 0xC80uLL:
                case 0xC88uLL:
                case 0xC8CuLL:
                case 0xC90uLL:
                case 0xC94uLL:
                case 0xC9CuLL:
                case 0xCA0uLL:
                case 0xCA4uLL:
                case 0xCA8uLL:
                case 0xCACuLL:
                case 0xCB0uLL:
                case 0xCB4uLL:
                case 0xCBCuLL:
                case 0xCC0uLL:
                case 0xCC4uLL:
                case 0xCC8uLL:
                case 0xCCCuLL:
                case 0xCD4uLL:
                case 0xCD8uLL:
                case 0xCDCuLL:
                case 0xCE0uLL:
                case 0xCE8uLL:
                case 0xCECuLL:
                case 0xCF0uLL:
                case 0xCF4uLL:
                case 0xCF8uLL:
                case 0xCFCuLL:
                case 0xD00uLL:
                case 0xD08uLL:
                case 0xD0CuLL:
                case 0xD10uLL:
                case 0xD14uLL:
                case 0xD18uLL:
                case 0xD6CuLL:
                case 0xD70uLL:
                case 0xD74uLL:
                case 0xD78uLL:
                case 0xD80uLL:
                case 0xD84uLL:
                case 0xD88uLL:
                case 0xD8CuLL:
                case 0xD90uLL:
                case 0xD94uLL:
                case 0xD98uLL:
                case 0xDA0uLL:
                case 0xDA4uLL:
                case 0xDA8uLL:
                case 0xDACuLL:
                case 0xDB0uLL:
                case 0xDB8uLL:
                case 0xDBCuLL:
                case 0xDC0uLL:
                case 0xDC4uLL:
                case 0xDCCuLL:
                case 0xDD0uLL:
                case 0xDD4uLL:
                case 0xDD8uLL:
                case 0xDDCuLL:
                case 0xDE0uLL:
                case 0xDE4uLL:
                case 0xDECuLL:
                case 0xDF0uLL:
                case 0xDF4uLL:
                case 0xDF8uLL:
                case 0xDFCuLL:
                case 0xE04uLL:
                case 0xE08uLL:
                case 0xE0CuLL:
                case 0xE10uLL:
                case 0xE18uLL:
                case 0xE1CuLL:
                case 0xE20uLL:
                case 0xE24uLL:
                case 0xE28uLL:
                case 0xE2CuLL:
                case 0xE30uLL:
                case 0xE38uLL:
                case 0xE3CuLL:
                case 0xE40uLL:
                case 0xE44uLL:
                case 0xE48uLL:
                case 0xE50uLL:
                case 0xE54uLL:
                case 0xE58uLL:
                case 0xE5CuLL:
                case 0xE64uLL:
                case 0xE68uLL:
                case 0xE6CuLL:
                case 0xE70uLL:
                case 0xE74uLL:
                case 0xE78uLL:
                case 0xE7CuLL:
                case 0xE84uLL:
                case 0xE88uLL:
                case 0xE8CuLL:
                case 0xE90uLL:
                case 0xE94uLL:
                case 0xE9CuLL:
                case 0xEA0uLL:
                case 0xEA4uLL:
                case 0xEA8uLL:
                case 0xEB0uLL:
                case 0xEB4uLL:
                case 0xEB8uLL:
                case 0xEBCuLL:
                case 0xEC0uLL:
                case 0xEC4uLL:
                case 0xEC8uLL:
                case 0xED0uLL:
                case 0xED4uLL:
                case 0xED8uLL:
                case 0xEDCuLL:
                case 0xEE0uLL:
                case 0xEE8uLL:
                case 0xEECuLL:
                case 0xEF0uLL:
                case 0xEF4uLL:
                case 0xEFCuLL:
                case 0xF00uLL:
                case 0xF04uLL:
                case 0xF08uLL:
                case 0xF0CuLL:
                case 0xF10uLL:
                case 0xF14uLL:
                case 0xF1CuLL:
                case 0xF20uLL:
                case 0xF24uLL:
                case 0xF28uLL:
                case 0xF2CuLL:
                case 0xF34uLL:
                case 0xF38uLL:
                case 0xF3CuLL:
                case 0xF40uLL:
                case 0xF48uLL:
                case 0xF4CuLL:
                case 0xF50uLL:
                case 0xF54uLL:
                case 0xF58uLL:
                case 0xF5CuLL:
                case 0xF60uLL:
                case 0xF68uLL:
                case 0xF6CuLL:
                case 0xF70uLL:
                case 0xF74uLL:
                case 0xF78uLL:
                case 0xFCCuLL:
                case 0xFD0uLL:
                case 0xFD4uLL:
                case 0xFD8uLL:
                case 0xFE0uLL:
                case 0xFE4uLL:
                case 0xFE8uLL:
                case 0xFECuLL:
                case 0xFF0uLL:
                case 0xFF4uLL:
                case 0xFF8uLL:
                case 0x1000uLL:
                case 0x1004uLL:
                case 0x1008uLL:
                case 0x100CuLL:
                case 0x1010uLL:
                case 0x1018uLL:
                case 0x101CuLL:
                case 0x1020uLL:
                case 0x1024uLL:
                case 0x102CuLL:
                case 0x1030uLL:
                case 0x1034uLL:
                case 0x1038uLL:
                case 0x103CuLL:
                case 0x1040uLL:
                case 0x1044uLL:
                case 0x104CuLL:
                case 0x1050uLL:
                case 0x1054uLL:
                case 0x1058uLL:
                case 0x105CuLL:
                case 0x1064uLL:
                case 0x1068uLL:
                case 0x106CuLL:
                case 0x1070uLL:
                case 0x1078uLL:
                case 0x107CuLL:
                case 0x1080uLL:
                case 0x1084uLL:
                case 0x1088uLL:
                case 0x108CuLL:
                case 0x1090uLL:
                case 0x1098uLL:
                case 0x109CuLL:
                case 0x10A0uLL:
                case 0x10A4uLL:
                case 0x10A8uLL:
                case 0x10B0uLL:
                case 0x10B4uLL:
                case 0x10B8uLL:
                case 0x10BCuLL:
                case 0x10C4uLL:
                case 0x10C8uLL:
                case 0x10CCuLL:
                case 0x10D0uLL:
                case 0x10D4uLL:
                case 0x10D8uLL:
                case 0x10DCuLL:
                case 0x10E4uLL:
                case 0x10E8uLL:
                case 0x10ECuLL:
                case 0x10F0uLL:
                case 0x10F4uLL:
                case 0x10FCuLL:
                case 0x1100uLL:
                case 0x1104uLL:
                case 0x1108uLL:
                case 0x1110uLL:
                case 0x1114uLL:
                case 0x1118uLL:
                case 0x111CuLL:
                case 0x1120uLL:
                case 0x1124uLL:
                case 0x1128uLL:
                case 0x1130uLL:
                case 0x1134uLL:
                case 0x1138uLL:
                case 0x113CuLL:
                case 0x1140uLL:
                case 0x1194uLL:
                case 0x1198uLL:
                case 0x119CuLL:
                case 0x11A0uLL:
                case 0x11A4uLL:
                case 0x11ACuLL:
                case 0x11B0uLL:
                case 0x11B4uLL:
                case 0x11B8uLL:
                case 0x11BCuLL:
                case 0x11C0uLL:
                case 0x11C4uLL:
                case 0x11CCuLL:
                case 0x11D0uLL:
                case 0x11D4uLL:
                case 0x11D8uLL:
                case 0x11E0uLL:
                case 0x11E4uLL:
                case 0x11E8uLL:
                case 0x11ECuLL:
                case 0x11F0uLL:
                case 0x11F8uLL:
                case 0x11FCuLL:
                case 0x1200uLL:
                case 0x1204uLL:
                case 0x1208uLL:
                case 0x120CuLL:
                case 0x1210uLL:
                case 0x1218uLL:
                case 0x121CuLL:
                case 0x1220uLL:
                case 0x1224uLL:
                case 0x122CuLL:
                case 0x1230uLL:
                case 0x1234uLL:
                case 0x1238uLL:
                case 0x123CuLL:
                case 0x1244uLL:
                case 0x1248uLL:
                case 0x124CuLL:
                case 0x1250uLL:
                case 0x1254uLL:
                case 0x1258uLL:
                case 0x125CuLL:
                case 0x1264uLL:
                case 0x1268uLL:
                case 0x126CuLL:
                case 0x1270uLL:
                case 0x1278uLL:
                case 0x127CuLL:
                case 0x1280uLL:
                case 0x1284uLL:
                case 0x1288uLL:
                case 0x1290uLL:
                case 0x1294uLL:
                case 0x1298uLL:
                case 0x129CuLL:
                case 0x12A0uLL:
                case 0x12A4uLL:
                case 0x12A8uLL:
                case 0x12B0uLL:
                case 0x12B4uLL:
                case 0x12B8uLL:
                case 0x12BCuLL:
                case 0x12C4uLL:
                case 0x12C8uLL:
                case 0x12CCuLL:
                case 0x12D0uLL:
                case 0x12D4uLL:
                case 0x12DCuLL:
                case 0x12E0uLL:
                case 0x12E4uLL:
                case 0x12E8uLL:
                case 0x12ECuLL:
                case 0x12F0uLL:
                case 0x12F4uLL:
                case 0x12FCuLL:
                case 0x1300uLL:
                case 0x1304uLL:
                case 0x1308uLL:
                case 0x135CuLL:
                case 0x1360uLL:
                case 0x1364uLL:
                case 0x1368uLL:
                case 0x136CuLL:
                case 0x1374uLL:
                case 0x1378uLL:
                case 0x137CuLL:
                case 0x1380uLL:
                case 0x1384uLL:
                case 0x1388uLL:
                case 0x138CuLL:
                case 0x1394uLL:
                case 0x1398uLL:
                case 0x139CuLL:
                case 0x13A0uLL:
                case 0x13A8uLL:
                case 0x13ACuLL:
                case 0x13B0uLL:
                case 0x13B4uLL:
                case 0x13B8uLL:
                case 0x13C0uLL:
                case 0x13C4uLL:
                case 0x13C8uLL:
                case 0x13CCuLL:
                case 0x13D0uLL:
                case 0x13D4uLL:
                case 0x13D8uLL:
                case 0x13E0uLL:
                case 0x13E4uLL:
                case 0x13E8uLL:
                case 0x13ECuLL:
                case 0x13F4uLL:
                case 0x13F8uLL:
                case 0x13FCuLL:
                case 0x1400uLL:
                case 0x1404uLL:
                case 0x140CuLL:
                case 0x1410uLL:
                case 0x1414uLL:
                case 0x1418uLL:
                case 0x141CuLL:
                case 0x1420uLL:
                case 0x1424uLL:
                case 0x142CuLL:
                case 0x1430uLL:
                case 0x1434uLL:
                case 0x1438uLL:
                case 0x1440uLL:
                case 0x1444uLL:
                case 0x1448uLL:
                case 0x144CuLL:
                case 0x1450uLL:
                case 0x1458uLL:
                case 0x145CuLL:
                case 0x1460uLL:
                case 0x1464uLL:
                case 0x1468uLL:
                case 0x146CuLL:
                case 0x1470uLL:
                case 0x1478uLL:
                case 0x147CuLL:
                case 0x1480uLL:
                case 0x1484uLL:
                case 0x148CuLL:
                case 0x1490uLL:
                case 0x1494uLL:
                case 0x1498uLL:
                case 0x149CuLL:
                case 0x14A4uLL:
                case 0x14A8uLL:
                case 0x14ACuLL:
                case 0x14B0uLL:
                case 0x14B4uLL:
                case 0x14B8uLL:
                case 0x14BCuLL:
                case 0x14C4uLL:
                case 0x14C8uLL:
                case 0x14CCuLL:
                case 0x14D0uLL:
                case 0x14D8uLL:
                case 0x14DCuLL:
                case 0x14E0uLL:
                case 0x14E4uLL:
                case 0x14E8uLL:
                case 0x14F0uLL:
                case 0x14F4uLL:
                case 0x14F8uLL:
                case 0x14FCuLL:
                case 0x1500uLL:
                case 0x1504uLL:
                case 0x1508uLL:
                case 0x1510uLL:
                case 0x1514uLL:
                case 0x1518uLL:
                case 0x151CuLL:
                case 0x1524uLL:
                case 0x1528uLL:
                case 0x152CuLL:
                case 0x1530uLL:
                case 0x1534uLL:
                case 0x153CuLL:
                case 0x1540uLL:
                case 0x1544uLL:
                case 0x1548uLL:
                case 0x154CuLL:
                case 0x1550uLL:
                case 0x1554uLL:
                case 0x155CuLL:
                case 0x1560uLL:
                case 0x1564uLL:
                case 0x1568uLL:
                case 0x15BCuLL:
                case 0x15C0uLL:
                case 0x15C4uLL:
                case 0x15C8uLL:
                case 0x15CCuLL:
                case 0x15D4uLL:
                case 0x15D8uLL:
                case 0x15DCuLL:
                case 0x15E0uLL:
                case 0x15E4uLL:
                case 0x15E8uLL:
                case 0x15ECuLL:
                case 0x15F4uLL:
                case 0x15F8uLL:
                case 0x15FCuLL:
                case 0x1600uLL:
                case 0x1608uLL:
                case 0x160CuLL:
                case 0x1610uLL:
                case 0x1614uLL:
                case 0x1618uLL:
                case 0x1620uLL:
                case 0x1624uLL:
                case 0x1628uLL:
                case 0x162CuLL:
                case 0x1630uLL:
                case 0x1634uLL:
                case 0x1638uLL:
                case 0x1640uLL:
                case 0x1644uLL:
                case 0x1648uLL:
                case 0x164CuLL:
                case 0x1654uLL:
                case 0x1658uLL:
                case 0x165CuLL:
                case 0x1660uLL:
                case 0x1664uLL:
                case 0x166CuLL:
                case 0x1670uLL:
                case 0x1674uLL:
                case 0x1678uLL:
                case 0x167CuLL:
                case 0x1680uLL:
                case 0x1684uLL:
                case 0x168CuLL:
                case 0x1690uLL:
                case 0x1694uLL:
                case 0x1698uLL:
                case 0x16A0uLL:
                case 0x16A4uLL:
                case 0x16A8uLL:
                case 0x16ACuLL:
                case 0x16B0uLL:
                case 0x16B8uLL:
                case 0x16BCuLL:
                case 0x16C0uLL:
                case 0x16C4uLL:
                case 0x16C8uLL:
                case 0x16CCuLL:
                case 0x16D0uLL:
                case 0x16D8uLL:
                case 0x16DCuLL:
                case 0x16E0uLL:
                case 0x16E4uLL:
                  v46 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v45 + 2 * v35 + v127]];
                  *v41 = v53;
                  v47 = v44[v116];
                  v48 = *(_WORD *)(v45 + 167);
                  v49 = v48 & 7;
                  if (!*(_DWORD *)(v34 + 5384))
                    goto LABEL_67;
                  goto LABEL_78;
                case 0xAuLL:
                case 0xBuLL:
                case 0xCuLL:
                case 0xDuLL:
                case 0xEuLL:
                case 0xFuLL:
                case 0x58uLL:
                case 0x5CuLL:
                case 0x60uLL:
                case 0x64uLL:
                case 0x68uLL:
                case 0x6CuLL:
                case 0x70uLL:
                case 0x74uLL:
                case 0x78uLL:
                case 0x7CuLL:
                case 0x80uLL:
                case 0x84uLL:
                case 0x88uLL:
                case 0x8CuLL:
                case 0x90uLL:
                case 0x94uLL:
                case 0x98uLL:
                case 0x9CuLL:
                case 0xA0uLL:
                case 0xA4uLL:
                case 0xB8uLL:
                case 0xD8uLL:
                case 0xF0uLL:
                case 0x104uLL:
                case 0x124uLL:
                case 0x13CuLL:
                case 0x150uLL:
                case 0x170uLL:
                case 0x188uLL:
                case 0x19CuLL:
                case 0x1BCuLL:
                case 0x1D4uLL:
                case 0x1D8uLL:
                case 0x1DCuLL:
                case 0x1E0uLL:
                case 0x1E4uLL:
                case 0x1E8uLL:
                case 0x1ECuLL:
                case 0x1F0uLL:
                case 0x1F4uLL:
                case 0x1F8uLL:
                case 0x1FCuLL:
                case 0x200uLL:
                case 0x204uLL:
                case 0x208uLL:
                case 0x20CuLL:
                case 0x210uLL:
                case 0x214uLL:
                case 0x218uLL:
                case 0x21CuLL:
                case 0x220uLL:
                case 0x234uLL:
                case 0x254uLL:
                case 0x26CuLL:
                case 0x280uLL:
                case 0x2A0uLL:
                case 0x2B8uLL:
                case 0x2CCuLL:
                case 0x2ECuLL:
                case 0x304uLL:
                case 0x318uLL:
                case 0x338uLL:
                case 0x350uLL:
                case 0x364uLL:
                case 0x384uLL:
                case 0x39CuLL:
                case 0x3B0uLL:
                case 0x3D0uLL:
                case 0x3E8uLL:
                case 0x3FCuLL:
                case 0x41CuLL:
                case 0x434uLL:
                case 0x438uLL:
                case 0x43CuLL:
                case 0x440uLL:
                case 0x444uLL:
                case 0x448uLL:
                case 0x44CuLL:
                case 0x450uLL:
                case 0x454uLL:
                case 0x458uLL:
                case 0x45CuLL:
                case 0x460uLL:
                case 0x464uLL:
                case 0x468uLL:
                case 0x46CuLL:
                case 0x470uLL:
                case 0x474uLL:
                case 0x478uLL:
                case 0x47CuLL:
                case 0x480uLL:
                case 0x494uLL:
                case 0x4B4uLL:
                case 0x4CCuLL:
                case 0x4E0uLL:
                case 0x500uLL:
                case 0x518uLL:
                case 0x52CuLL:
                case 0x54CuLL:
                case 0x564uLL:
                case 0x578uLL:
                case 0x598uLL:
                case 0x5B0uLL:
                case 0x5C4uLL:
                case 0x5E4uLL:
                case 0x5FCuLL:
                case 0x600uLL:
                case 0x604uLL:
                case 0x608uLL:
                case 0x60CuLL:
                case 0x610uLL:
                case 0x614uLL:
                case 0x618uLL:
                case 0x61CuLL:
                case 0x620uLL:
                case 0x624uLL:
                case 0x628uLL:
                case 0x62CuLL:
                case 0x630uLL:
                case 0x634uLL:
                case 0x638uLL:
                case 0x63CuLL:
                case 0x640uLL:
                case 0x644uLL:
                case 0x648uLL:
                case 0x660uLL:
                case 0x680uLL:
                case 0x694uLL:
                case 0x6ACuLL:
                case 0x6CCuLL:
                case 0x6E0uLL:
                case 0x6F8uLL:
                case 0x718uLL:
                case 0x72CuLL:
                case 0x744uLL:
                case 0x764uLL:
                case 0x778uLL:
                case 0x790uLL:
                case 0x7B0uLL:
                case 0x7C4uLL:
                case 0x7C8uLL:
                case 0x7CCuLL:
                case 0x7D0uLL:
                case 0x7D4uLL:
                case 0x7D8uLL:
                case 0x7DCuLL:
                case 0x7E0uLL:
                case 0x7E4uLL:
                case 0x7E8uLL:
                case 0x7ECuLL:
                case 0x7F0uLL:
                case 0x7F4uLL:
                case 0x7F8uLL:
                case 0x7FCuLL:
                case 0x800uLL:
                case 0x804uLL:
                case 0x808uLL:
                case 0x80CuLL:
                case 0x810uLL:
                case 0x828uLL:
                case 0x848uLL:
                case 0x85CuLL:
                case 0x874uLL:
                case 0x894uLL:
                case 0x8A8uLL:
                case 0x8C0uLL:
                case 0x8E0uLL:
                case 0x8F4uLL:
                case 0x90CuLL:
                case 0x92CuLL:
                case 0x940uLL:
                case 0x958uLL:
                case 0x978uLL:
                case 0x98CuLL:
                case 0x9A4uLL:
                case 0x9C4uLL:
                case 0x9D8uLL:
                case 0x9F0uLL:
                case 0xA10uLL:
                case 0xA24uLL:
                case 0xA28uLL:
                case 0xA2CuLL:
                case 0xA30uLL:
                case 0xA34uLL:
                case 0xA38uLL:
                case 0xA3CuLL:
                case 0xA40uLL:
                case 0xA44uLL:
                case 0xA48uLL:
                case 0xA4CuLL:
                case 0xA50uLL:
                case 0xA54uLL:
                case 0xA58uLL:
                case 0xA5CuLL:
                case 0xA60uLL:
                case 0xA64uLL:
                case 0xA68uLL:
                case 0xA6CuLL:
                case 0xA70uLL:
                case 0xA88uLL:
                case 0xAA8uLL:
                case 0xABCuLL:
                case 0xAD4uLL:
                case 0xAF4uLL:
                case 0xB08uLL:
                case 0xB20uLL:
                case 0xB40uLL:
                case 0xB54uLL:
                case 0xB6CuLL:
                case 0xB8CuLL:
                case 0xBA0uLL:
                case 0xBA4uLL:
                case 0xBA8uLL:
                case 0xBACuLL:
                case 0xBB0uLL:
                case 0xBB4uLL:
                case 0xBB8uLL:
                case 0xBBCuLL:
                case 0xBC0uLL:
                case 0xBC4uLL:
                case 0xBC8uLL:
                case 0xBCCuLL:
                case 0xBD0uLL:
                case 0xBD4uLL:
                case 0xBD8uLL:
                case 0xBDCuLL:
                case 0xBE0uLL:
                case 0xBE4uLL:
                case 0xBE8uLL:
                case 0xBECuLL:
                case 0xC00uLL:
                case 0xC20uLL:
                case 0xC38uLL:
                case 0xC4CuLL:
                case 0xC6CuLL:
                case 0xC84uLL:
                case 0xC98uLL:
                case 0xCB8uLL:
                case 0xCD0uLL:
                case 0xCE4uLL:
                case 0xD04uLL:
                case 0xD1CuLL:
                case 0xD20uLL:
                case 0xD24uLL:
                case 0xD28uLL:
                case 0xD2CuLL:
                case 0xD30uLL:
                case 0xD34uLL:
                case 0xD38uLL:
                case 0xD3CuLL:
                case 0xD40uLL:
                case 0xD44uLL:
                case 0xD48uLL:
                case 0xD4CuLL:
                case 0xD50uLL:
                case 0xD54uLL:
                case 0xD58uLL:
                case 0xD5CuLL:
                case 0xD60uLL:
                case 0xD64uLL:
                case 0xD68uLL:
                case 0xD7CuLL:
                case 0xD9CuLL:
                case 0xDB4uLL:
                case 0xDC8uLL:
                case 0xDE8uLL:
                case 0xE00uLL:
                case 0xE14uLL:
                case 0xE34uLL:
                case 0xE4CuLL:
                case 0xE60uLL:
                case 0xE80uLL:
                case 0xE98uLL:
                case 0xEACuLL:
                case 0xECCuLL:
                case 0xEE4uLL:
                case 0xEF8uLL:
                case 0xF18uLL:
                case 0xF30uLL:
                case 0xF44uLL:
                case 0xF64uLL:
                case 0xF7CuLL:
                case 0xF80uLL:
                case 0xF84uLL:
                case 0xF88uLL:
                case 0xF8CuLL:
                case 0xF90uLL:
                case 0xF94uLL:
                case 0xF98uLL:
                case 0xF9CuLL:
                case 0xFA0uLL:
                case 0xFA4uLL:
                case 0xFA8uLL:
                case 0xFACuLL:
                case 0xFB0uLL:
                case 0xFB4uLL:
                case 0xFB8uLL:
                case 0xFBCuLL:
                case 0xFC0uLL:
                case 0xFC4uLL:
                case 0xFC8uLL:
                case 0xFDCuLL:
                case 0xFFCuLL:
                case 0x1014uLL:
                case 0x1028uLL:
                case 0x1048uLL:
                case 0x1060uLL:
                case 0x1074uLL:
                case 0x1094uLL:
                case 0x10ACuLL:
                case 0x10C0uLL:
                case 0x10E0uLL:
                case 0x10F8uLL:
                case 0x110CuLL:
                case 0x112CuLL:
                case 0x1144uLL:
                case 0x1148uLL:
                case 0x114CuLL:
                case 0x1150uLL:
                case 0x1154uLL:
                case 0x1158uLL:
                case 0x115CuLL:
                case 0x1160uLL:
                case 0x1164uLL:
                case 0x1168uLL:
                case 0x116CuLL:
                case 0x1170uLL:
                case 0x1174uLL:
                case 0x1178uLL:
                case 0x117CuLL:
                case 0x1180uLL:
                case 0x1184uLL:
                case 0x1188uLL:
                case 0x118CuLL:
                case 0x1190uLL:
                case 0x11A8uLL:
                case 0x11C8uLL:
                case 0x11DCuLL:
                case 0x11F4uLL:
                case 0x1214uLL:
                case 0x1228uLL:
                case 0x1240uLL:
                case 0x1260uLL:
                case 0x1274uLL:
                case 0x128CuLL:
                case 0x12ACuLL:
                case 0x12C0uLL:
                case 0x12D8uLL:
                case 0x12F8uLL:
                case 0x130CuLL:
                case 0x1310uLL:
                case 0x1314uLL:
                case 0x1318uLL:
                case 0x131CuLL:
                case 0x1320uLL:
                case 0x1324uLL:
                case 0x1328uLL:
                case 0x132CuLL:
                case 0x1330uLL:
                case 0x1334uLL:
                case 0x1338uLL:
                case 0x133CuLL:
                case 0x1340uLL:
                case 0x1344uLL:
                case 0x1348uLL:
                case 0x134CuLL:
                case 0x1350uLL:
                case 0x1354uLL:
                case 0x1358uLL:
                case 0x1370uLL:
                case 0x1390uLL:
                case 0x13A4uLL:
                case 0x13BCuLL:
                case 0x13DCuLL:
                case 0x13F0uLL:
                case 0x1408uLL:
                case 0x1428uLL:
                case 0x143CuLL:
                case 0x1454uLL:
                case 0x1474uLL:
                case 0x1488uLL:
                case 0x14A0uLL:
                case 0x14C0uLL:
                case 0x14D4uLL:
                case 0x14ECuLL:
                case 0x150CuLL:
                case 0x1520uLL:
                case 0x1538uLL:
                case 0x1558uLL:
                case 0x156CuLL:
                case 0x1570uLL:
                case 0x1574uLL:
                case 0x1578uLL:
                case 0x157CuLL:
                case 0x1580uLL:
                case 0x1584uLL:
                case 0x1588uLL:
                case 0x158CuLL:
                case 0x1590uLL:
                case 0x1594uLL:
                case 0x1598uLL:
                case 0x159CuLL:
                case 0x15A0uLL:
                case 0x15A4uLL:
                case 0x15A8uLL:
                case 0x15ACuLL:
                case 0x15B0uLL:
                case 0x15B4uLL:
                case 0x15B8uLL:
                case 0x15D0uLL:
                case 0x15F0uLL:
                case 0x1604uLL:
                case 0x161CuLL:
                case 0x163CuLL:
                case 0x1650uLL:
                case 0x1668uLL:
                case 0x1688uLL:
                case 0x169CuLL:
                case 0x16B4uLL:
                case 0x16D4uLL:
                  goto LABEL_77;
                case 0x14uLL:
                  v46 = 9;
                  *v41 = 9;
                  v47 = v44[v116];
                  v48 = *(_WORD *)(v45 + 167);
                  v49 = v48 & 7;
                  if (!*(_DWORD *)(v34 + 5384))
                    goto LABEL_67;
                  goto LABEL_78;
                case 0x15uLL:
                  v46 = 10;
                  *v41 = 10;
                  v47 = v44[v116];
                  v48 = *(_WORD *)(v45 + 167);
                  v49 = v48 & 7;
                  if (!*(_DWORD *)(v34 + 5384))
                    goto LABEL_67;
                  goto LABEL_78;
                default:
                  v46 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v45 + 2 * v35 + v127]];
                  *v41 = v53;
                  v47 = v44[v116];
                  v48 = *(_WORD *)(v45 + 167);
                  v49 = v48 & 7;
                  if (!*(_DWORD *)(v34 + 5384))
                    goto LABEL_67;
                  goto LABEL_78;
              }
            }
            v46 = v45[145];
            if (((*(_WORD *)(v45 + 167) & 0x80) != 0 || (char)v45[16] >= 1) && !v45[144])
            {
              v75 = *v45;
              v46 = v45[((int)((mi_size_wide_4[v75] - 1) & (v40 | v35)) >> av1_get_txb_size_index_tw_w_log2_table[v75])
                      + 146
                      + (((mi_size_high_3[v75] - 1) & v23) >> av1_get_txb_size_index_tw_h_log2_table[v75] << av1_get_txb_size_index_stride_log2_table[v75])];
              *v41 = v46;
              v47 = v44[v116];
              v48 = *(_WORD *)(v45 + 167);
              v49 = v48 & 7;
              if (!*(_DWORD *)(v34 + 5384))
              {
LABEL_67:
                v50 = v19 + (v125 << 8);
                v51 = v50 + 32 * v49 + 2 * (char)v45[16] + mode_lf_lut_0[v45[2]];
                v52 = *(unsigned __int8 *)(v51 + 22256);
                if (!*(_BYTE *)(v51 + 22256))
                {
                  v52 = *(unsigned __int8 *)(v50
                                           + 32 * (*(_WORD *)(v47 + 167) & 7)
                                           + 2 * (char)v47[16]
                                           + mode_lf_lut_0[v47[2]]
                                           + 22256);
                  if (v47 != v45)
                    goto LABEL_99;
                  goto LABEL_126;
                }
LABEL_98:
                if (v47 != v45)
                  goto LABEL_99;
                goto LABEL_126;
              }
            }
            else
            {
LABEL_77:
              *v41 = v46;
              v47 = v44[v116];
              v48 = *(_WORD *)(v45 + 167);
              v49 = v48 & 7;
              if (!*(_DWORD *)(v34 + 5384))
                goto LABEL_67;
            }
          }
LABEL_78:
          v54 = *(_DWORD *)(v34 + 5392);
          if (v54)
          {
            v55 = &v45[*v129 + 163];
            v56 = v133;
            if (!v15)
              goto LABEL_84;
          }
          else
          {
            v55 = v45 + 162;
            v56 = v133;
            if (!v15)
              goto LABEL_84;
          }
          v56 = v130;
          if (v15 != 1)
            v56 = v124;
LABEL_84:
          v57 = *v56 + (char)*v55;
          if (v57 >= 63)
            v57 = 63;
          v52 = v57 & ~(v57 >> 31);
          v58 = *v132;
          if (*(_BYTE *)v34 && ((*(_DWORD *)(v19 + 4 * v49 + 19124) >> v58) & 1) != 0)
          {
            v59 = v52 + *(__int16 *)(v19 + 16 * v49 + 2 * v58 + 18996);
            if (v59 >= 63)
              v59 = 63;
            v52 = v59 & ~(v59 >> 31);
          }
          if (*(_BYTE *)(v34 + 4052))
          {
            v60 = (char)v45[16];
            v61 = *(char *)(v19 + v60 + 23046);
            if (v60 >= 1)
              v61 += *(char *)(v19 + mode_lf_lut_0[v45[2]] + 23054);
            v62 = (v61 << (v52 >> 5)) + v52;
            if (v62 >= 63)
              v62 = 63;
            v52 = v62 & ~(v62 >> 31);
          }
          v52 = v52;
          if ((_BYTE)v52)
            goto LABEL_98;
          if (v54)
          {
            v66 = &v47[*v129 + 163];
            v67 = v133;
            if (!v15)
              goto LABEL_112;
          }
          else
          {
            v66 = v47 + 162;
            v67 = v133;
            if (!v15)
              goto LABEL_112;
          }
          v67 = v130;
          if (v15 != 1)
            v67 = v124;
LABEL_112:
          v68 = *v67 + (char)*v66;
          if (v68 >= 63)
            v68 = 63;
          v69 = v68 & ~(v68 >> 31);
          if (*(_BYTE *)v34)
          {
            v70 = *(_WORD *)(v47 + 167) & 7;
            if (((*(_DWORD *)(v19 + 4 * v70 + 19124) >> v58) & 1) != 0)
            {
              v71 = v69 + *(__int16 *)(v19 + 16 * v70 + 2 * *v132 + 18996);
              if (v71 >= 63)
                v71 = 63;
              v69 = v71 & ~(v71 >> 31);
            }
          }
          if (*(_BYTE *)(v34 + 4052))
          {
            v72 = (char)v47[16];
            v73 = *(char *)(v19 + v72 + 23046);
            if (v72 >= 1)
              v73 += *(char *)(v19 + mode_lf_lut_0[v47[2]] + 23054);
            v74 = (v73 << (v69 >> 5)) + v69;
            if (v74 >= 63)
              v74 = 63;
            v69 = v74 & ~(v74 >> 31);
          }
          v52 = v69;
          if (v47 != v45)
          {
LABEL_99:
            v63 = 0;
            goto LABEL_100;
          }
LABEL_126:
          if (!v45[144])
            goto LABEL_99;
          v63 = (v48 & 0x80) != 0 || (char)v45[16] > 0;
LABEL_100:
          v64 = v47 == v45 && v63;
          v65 = v46;
          if (!v64)
          {
            v65 = v46;
            if (v52)
            {
              *v42 = vert_filter_length_chroma[19 * v46 + v29];
              *((_QWORD *)v42 + 1) = v131 + 48 * v52;
              v65 = *v41;
            }
          }
          if (v38 >= tx_size_high_1[v46])
            v38 = tx_size_high_1[v46];
          v43 = (int)tx_size_wide_unit[v65];
          v40 += (_DWORD)v43 << v33;
          v42 += 16 * v43;
          v41 += v43;
          v29 = v65;
        }
        while (v40 < v109);
      }
      if ((v123 & 3) != 0 || v123 + 3 >= v117 || v38 <= 15)
      {
        if ((v123 & 1) != 0)
        {
          v77 = 0;
          v118 = 0;
          v78 = v128;
          if (v128 < 1)
            goto LABEL_7;
        }
        else
        {
          v77 = v123 + 1 < v117 && v38 > 7;
          v118 = v77;
          v78 = v128;
          if (v128 < 1)
            goto LABEL_7;
        }
      }
      else
      {
        v118 = 3;
        v77 = 2;
        v78 = v128;
        if (v128 < 1)
          goto LABEL_7;
      }
      v79 = v123 * v107;
      if ((a9 & 1) != 0)
      {
        v80 = 0;
        v81 = a6;
        v82 = a7;
        while (1)
        {
          if (*v82 == 255)
          {
            *v81 = 0;
            *v82 = 0;
          }
          v84 = 4 * v80 + v79;
          v85 = *((_QWORD *)v17 + 2) + v84;
          v86 = *((_QWORD *)v17 + 328) + v84;
          v87 = *((_QWORD *)v81 + 1);
          if (v77 == 2)
          {
            HIDWORD(v91) = *v81;
            LODWORD(v91) = HIDWORD(v91) - 4;
            v90 = v91 >> 1;
            if (v90)
            {
              if (v90 == 1)
              {
                aom_lpf_vertical_6_dual_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32), *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
                aom_lpf_vertical_6_dual_neon(v85 + v119, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
                aom_lpf_vertical_6_dual_neon(v86, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
                v79 = v123 * v107;
                v78 = v128;
                v17 = a3;
                aom_lpf_vertical_6_dual_neon(v86 + v119, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
              }
              goto LABEL_156;
            }
            v94 = (const char *)(v87 + 16);
            v95 = (const char *)(v87 + 32);
            aom_lpf_vertical_4_dual_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32), *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
            aom_lpf_vertical_4_dual_neon(v85 + v119, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
            aom_lpf_vertical_4_dual_neon(v86, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
            v96 = v86 + v119;
            v97 = v134;
            v79 = v123 * v107;
          }
          else
          {
            if (v77 != 1)
            {
              HIDWORD(v93) = *v81;
              LODWORD(v93) = HIDWORD(v93) - 4;
              v92 = v93 >> 1;
              if (v92)
              {
                if (v92 == 1)
                {
                  aom_lpf_vertical_6_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
                  v78 = v128;
                  v17 = a3;
                  aom_lpf_vertical_6_neon(v86, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
                }
              }
              else
              {
                aom_lpf_vertical_4_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
                v78 = v128;
                v17 = a3;
                aom_lpf_vertical_4_neon(v86, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
              }
              goto LABEL_156;
            }
            HIDWORD(v89) = *v81;
            LODWORD(v89) = HIDWORD(v89) - 4;
            v88 = v89 >> 1;
            if (v88)
            {
              if (v88 == 1)
              {
                aom_lpf_vertical_6_dual_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32), *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
                v17 = a3;
                v78 = v128;
                aom_lpf_vertical_6_dual_neon(v86, v134, (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32), (unsigned __int8 *)v87, (const char *)(v87 + 16), (const char *)(v87 + 32));
              }
              goto LABEL_156;
            }
            v94 = (const char *)(v87 + 16);
            v95 = (const char *)(v87 + 32);
            aom_lpf_vertical_4_dual_neon(v85, v134, *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32), *((unsigned __int8 **)v81 + 1), (const char *)(v87 + 16), (const char *)(v87 + 32));
            v96 = v86;
            v97 = v134;
          }
          v98 = v94;
          v99 = v95;
          v100 = v94;
          v78 = v128;
          v101 = v95;
          v17 = a3;
          aom_lpf_vertical_4_dual_neon(v96, v97, (unsigned __int8 *)v87, v98, v99, (unsigned __int8 *)v87, v100, v101);
LABEL_156:
          v83 = tx_size_wide_unit[*v82];
          v80 += v83;
          v81 += 16 * v83;
          v82 += v83;
          if (v80 >= v78)
            goto LABEL_7;
        }
      }
      v102 = 0;
      v103 = a6;
      v104 = a7;
      do
      {
        if (*v104 == 255)
        {
          *v103 = 0;
          *v104 = 0;
        }
        filter_vert(*((_QWORD *)v17 + 2) + 4 * v102 + v79, v134, v103, v77);
        v105 = tx_size_wide_unit[*v104];
        v102 += v105;
        v103 += 16 * v105;
        v104 += v105;
      }
      while (v102 < v78);
LABEL_7:
      v20 = v123 + v118 + 1;
      v15 = a8;
      v16 = a5;
      v18 = a2;
      v19 = a1;
      v21 = v127;
    }
    while (v20 < v117);
  }
}

void av1_filter_block_plane_horz(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  int v6;
  int v7;
  signed int v8;
  uint64_t v9;
  uint64_t v13;
  unsigned int v14;
  signed int v15;
  __int32 *v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v30;
  unsigned __int8 *v31;

  v6 = *(_DWORD *)(a4 + 4);
  v7 = *(_DWORD *)(a4 + 8);
  if ((int)(((a1[133] + (1 << v7 >> 1)) >> v7) - (a5 >> v7)) >= (int)(0x20u >> v7))
    v8 = 0x20u >> v7;
  else
    v8 = ((a1[133] + (1 << v7 >> 1)) >> v7) - (a5 >> v7);
  LODWORD(v9) = ((a1[134] + (1 << v6 >> 1)) >> v6) - (a6 >> v6);
  if ((int)v9 >= (int)(0x20u >> v6))
    v9 = 0x20u >> v6;
  else
    v9 = v9;
  v25 = v9;
  if ((int)v9 >= 1 && v8 >= 1)
  {
    v13 = 0;
    v24 = *(_QWORD *)(a4 + 16);
    v23 = (4 * a6) >> v6;
    v14 = (4 * a5) >> v7;
    v27 = *(_DWORD *)(a4 + 40);
    do
    {
      v15 = 0;
      v26 = v13;
      v16 = (__int32 *)(v24 + 4 * v13);
      v17 = v23 + 4 * v13;
      do
      {
        v30 = 0;
        v31 = 0;
        v19 = set_lpf_parameters((uint64_t)&v30, (int)(a1[145] << v7), (uint64_t)a1, a2, 1u, v17, v14 + 4 * v15, a3, (_DWORD *)a4);
        v20 = v30;
        if (v19 == 255)
        {
          v20 = 0;
          v21 = 0;
        }
        else
        {
          v21 = v19;
        }
        HIDWORD(v22) = v20;
        LODWORD(v22) = v20 - 4;
        switch((v22 >> 1))
        {
          case 0u:
            aom_lpf_horizontal_4_neon(v16, v27, v31, (const char *)v31 + 16, (const char *)v31 + 32);
            break;
          case 1u:
            aom_lpf_horizontal_6_neon(v16, v27, v31, (const char *)v31 + 16, (const char *)v31 + 32);
            break;
          case 2u:
            aom_lpf_horizontal_8_neon(v16, v27, v31, (const char *)v31 + 16, (const char *)v31 + 32);
            break;
          case 5u:
            aom_lpf_horizontal_14_neon(v16, v27, v31, v31 + 16, v31 + 32);
            break;
          default:
            break;
        }
        v18 = tx_size_high_unit[v21];
        v15 += v18;
        v16 = (__int32 *)((char *)v16 + (4 * v27 * v18));
      }
      while (v15 < v8);
      v13 = v26 + 1;
    }
    while (v26 + 1 != v25);
  }
}

int8x8_t filter_horz(__int32 *a1, int a2, unsigned __int8 *a3, int a4)
{
  int v4;
  __int32 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  const char *v9;
  const char *v10;
  unsigned __int8 *v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  int8x8_t result;
  unint64_t v16;
  unsigned __int8 *v17;
  const char *v18;
  const char *v19;
  unsigned __int8 *v20;
  const char *v21;
  const char *v22;
  unsigned __int8 *v23;
  const char *v24;
  const char *v25;
  unsigned __int8 *v26;
  const char *v27;
  const char *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;

  v4 = a2;
  v5 = a1;
  v6 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
  if (a4 == 1)
  {
    HIDWORD(v14) = *a3;
    LODWORD(v14) = HIDWORD(v14) - 4;
    switch((v14 >> 1))
    {
      case 0u:
        v9 = (const char *)(v6 + 16);
        v10 = (const char *)(v6 + 32);
        v8 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v11 = v6;
        v12 = (const char *)(v6 + 16);
        v13 = (const char *)(v6 + 32);
LABEL_5:
        result = aom_lpf_horizontal_4_dual_neon(a1, a2, v8, v9, v10, v11, v12, v13);
        break;
      case 1u:
        v18 = (const char *)(v6 + 16);
        v19 = (const char *)(v6 + 32);
        v17 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v20 = v6;
        v21 = (const char *)(v6 + 16);
        v22 = (const char *)(v6 + 32);
LABEL_11:
        result = aom_lpf_horizontal_6_dual_neon(a1, a2, v17, v18, v19, v20, v21, v22);
        break;
      case 2u:
        v24 = (const char *)(v6 + 16);
        v25 = (const char *)(v6 + 32);
        v23 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        v26 = v6;
        v27 = (const char *)(v6 + 16);
        v28 = (const char *)(v6 + 32);
LABEL_13:
        result = aom_lpf_horizontal_8_dual_neon(a1, a2, v23, v24, v25, v26, v27, v28);
        break;
      case 5u:
        v29 = v6 + 16;
        v30 = v6 + 32;
        aom_lpf_horizontal_14_neon(a1, a2, *((unsigned __int8 **)a3 + 1), v6 + 16, v6 + 32);
        a1 = v5 + 1;
LABEL_18:
        a2 = v4;
        v31 = v6;
        v32 = v29;
        v33 = v30;
LABEL_19:
        *(double *)&result = aom_lpf_horizontal_14_neon(a1, a2, v31, v32, v33);
        break;
      default:
        return result;
    }
  }
  else if (a4 == 2)
  {
    HIDWORD(v7) = *a3;
    LODWORD(v7) = HIDWORD(v7) - 4;
    switch((v7 >> 1))
    {
      case 0u:
        aom_lpf_horizontal_4_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32, v6, (const char *)v6 + 16, (const char *)v6 + 32);
        a1 = v5 + 2;
        a2 = v4;
        v8 = v6;
        v9 = (const char *)(v6 + 16);
        v10 = (const char *)(v6 + 32);
        v11 = v6;
        v12 = (const char *)(v6 + 16);
        v13 = (const char *)(v6 + 32);
        goto LABEL_5;
      case 1u:
        aom_lpf_horizontal_6_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32, v6, (const char *)v6 + 16, (const char *)v6 + 32);
        a1 = v5 + 2;
        a2 = v4;
        v17 = v6;
        v18 = (const char *)(v6 + 16);
        v19 = (const char *)(v6 + 32);
        v20 = v6;
        v21 = (const char *)(v6 + 16);
        v22 = (const char *)(v6 + 32);
        goto LABEL_11;
      case 2u:
        aom_lpf_horizontal_8_dual_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32, v6, (const char *)v6 + 16, (const char *)v6 + 32);
        a1 = v5 + 2;
        a2 = v4;
        v23 = v6;
        v24 = (const char *)(v6 + 16);
        v25 = (const char *)(v6 + 32);
        v26 = v6;
        v27 = (const char *)(v6 + 16);
        v28 = (const char *)(v6 + 32);
        goto LABEL_13;
      case 5u:
        v29 = v6 + 16;
        v30 = v6 + 32;
        aom_lpf_horizontal_14_neon(a1, a2, *((unsigned __int8 **)a3 + 1), v6 + 16, v6 + 32);
        aom_lpf_horizontal_14_neon(v5 + 1, v4, v6, v6 + 16, v6 + 32);
        aom_lpf_horizontal_14_neon(v5 + 2, v4, v6, v6 + 16, v6 + 32);
        a1 = v5 + 3;
        goto LABEL_18;
      default:
        return result;
    }
  }
  else
  {
    HIDWORD(v16) = *a3;
    LODWORD(v16) = HIDWORD(v16) - 4;
    switch((v16 >> 1))
    {
      case 0u:
        result = aom_lpf_horizontal_4_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32);
        break;
      case 1u:
        result = aom_lpf_horizontal_6_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32);
        break;
      case 2u:
        result = aom_lpf_horizontal_8_neon(a1, a2, *((unsigned __int8 **)a3 + 1), (const char *)v6 + 16, (const char *)v6 + 32);
        break;
      case 5u:
        v32 = v6 + 16;
        v33 = v6 + 32;
        v31 = (unsigned __int8 *)*((_QWORD *)a3 + 1);
        goto LABEL_19;
      default:
        return result;
    }
  }
  return result;
}

void av1_filter_block_plane_horz_opt(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, _BYTE *a7, char a8)
{
  int v8;
  int v9;
  int v10;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  unsigned __int8 *v20;
  __int16 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 **v56;
  unsigned __int8 *v57;
  __int16 v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  _BOOL4 v81;
  _BOOL4 v82;
  unsigned __int8 v83;
  int v84;
  int v85;
  __int32 *v86;
  _BYTE *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int v96;
  _BYTE *v97;
  int v98;
  int v100;
  int v101;

  if (((*(_DWORD *)(a3 + 36) + 3) >> 2) - a4 >= 1 << a8)
    v8 = 1 << a8;
  else
    v8 = ((*(_DWORD *)(a3 + 36) + 3) >> 2) - a4;
  v9 = ((*(_DWORD *)(a3 + 32) + 3) >> 2) - a5;
  if (v9 >= 32)
    v10 = 32;
  else
    v10 = ((*(_DWORD *)(a3 + 32) + 3) >> 2) - a5;
  if (v9 >= 1)
  {
    v13 = 0;
    v14 = a1 + 18992;
    v91 = *(_QWORD *)(a3 + 16);
    v15 = v8 + a4;
    v16 = -(uint64_t)*(int *)(a1 + 580);
    v90 = a4 - 1;
    v17 = a1 + 19184;
    v100 = 4 * *(_DWORD *)(a3 + 40);
    v101 = *(_DWORD *)(a3 + 40);
    v97 = a7;
    v98 = v10;
    v92 = a1 + 19184;
    v93 = v16;
    v96 = a4;
    v94 = v8 + a4;
    while (1)
    {
      v18 = (v13 + a5);
      *(_BYTE *)a6 = 0;
      v19 = (unsigned __int8 **)(*(_QWORD *)(a1 + 568)
                               + 8 * (*(_DWORD *)(a1 + 580) * a4)
                               + 8 * v18);
      v20 = *v19;
      if (!a2)
        break;
      v21 = *(_WORD *)(v20 + 167);
      if (!*(_DWORD *)(a2 + 4 * (v21 & 7) + 10692))
        goto LABEL_15;
      v22 = 0;
      if (!a4)
        goto LABEL_49;
      v23 = v19[v16];
LABEL_20:
      if (*(_DWORD *)(a2 + 4 * (*(_WORD *)(v23 + 167) & 7) + 10692))
      {
        v24 = 0;
        v25 = block_size_wide_0[*v23];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
          goto LABEL_22;
        goto LABEL_29;
      }
LABEL_25:
      v24 = v23[145];
      if (((*(_WORD *)(v23 + 167) & 0x80) != 0 || (char)v23[16] >= 1) && !v23[144])
      {
        v48 = *v23;
        v24 = v23[((int)((mi_size_wide_4[v48] - 1) & v18) >> av1_get_txb_size_index_tw_w_log2_table[v48])
                + 146
                + (((mi_size_high_3[v48] - 1) & v90) >> av1_get_txb_size_index_tw_h_log2_table[v48] << av1_get_txb_size_index_stride_log2_table[v48])];
        v25 = block_size_wide_0[v48];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
        {
LABEL_22:
          v27 = a1 + 32 * v26 + 2 * (char)v20[16] + mode_lf_lut_0[v20[2]];
          v28 = *(unsigned __int8 *)(v27 + 22272);
          if (!*(_BYTE *)(v27 + 22272))
          {
            v28 = *(unsigned __int8 *)(a1
                                     + 32 * (*(_WORD *)(v23 + 167) & 7)
                                     + 2 * (char)v23[16]
                                     + mode_lf_lut_0[v23[2]]
                                     + 22272);
            if (v23 != v20)
              goto LABEL_46;
            goto LABEL_66;
          }
LABEL_45:
          if (v23 != v20)
            goto LABEL_46;
          goto LABEL_66;
        }
      }
      else
      {
        v25 = block_size_wide_0[*v23];
        v26 = v21 & 7;
        if (!*(_DWORD *)(v14 + 5384))
          goto LABEL_22;
      }
LABEL_29:
      v29 = *(_DWORD *)(v14 + 5392);
      v30 = 162;
      if (v29)
        v30 = 164;
      v31 = (char)v20[v30];
      v32 = *(_DWORD *)(v14 + 4036);
      v33 = v32 + v31;
      if (v33 >= 63)
        v33 = 63;
      v28 = v33 & ~(v33 >> 31);
      if (*(_BYTE *)v14 && (*(_DWORD *)(a1 + 4 * v26 + 19124) & 4) != 0)
      {
        v34 = v28 + *(__int16 *)(a1 + 16 * v26 + 19000);
        if (v34 >= 63)
          v34 = 63;
        v28 = v34 & ~(v34 >> 31);
      }
      if (*(_BYTE *)(v14 + 4052))
      {
        v35 = (char)v20[16];
        v36 = *(char *)(a1 + v35 + 23046);
        if (v35 >= 1)
          v36 += *(char *)(a1 + mode_lf_lut_0[v20[2]] + 23054);
        v37 = (v36 << (v28 >> 5)) + v28;
        if (v37 >= 63)
          v37 = 63;
        v28 = v37 & ~(v37 >> 31);
      }
      v28 = v28;
      if ((_BYTE)v28)
        goto LABEL_45;
      v39 = v29 == 0;
      v40 = 162;
      if (!v39)
        v40 = 164;
      v41 = v32 + (char)v23[v40];
      if (v41 >= 63)
        v41 = 63;
      v42 = v41 & ~(v41 >> 31);
      if (*(_BYTE *)v14)
      {
        v43 = *(_WORD *)(v23 + 167) & 7;
        if ((*(_DWORD *)(a1 + 4 * v43 + 19124) & 4) != 0)
        {
          v44 = v42 + *(__int16 *)(a1 + 16 * v43 + 19000);
          if (v44 >= 63)
            v44 = 63;
          v42 = v44 & ~(v44 >> 31);
        }
      }
      if (*(_BYTE *)(v14 + 4052))
      {
        v45 = (char)v23[16];
        v46 = *(char *)(a1 + v45 + 23046);
        if (v45 >= 1)
          v46 += *(char *)(a1 + mode_lf_lut_0[v23[2]] + 23054);
        v47 = (v46 << (v42 >> 5)) + v42;
        if (v47 >= 63)
          v47 = 63;
        v42 = v47 & ~(v47 >> 31);
      }
      v28 = v42;
      if (v23 != v20)
      {
LABEL_46:
        a4 = v96;
        if (v28)
          goto LABEL_74;
        goto LABEL_75;
      }
LABEL_66:
      if (!v20[144])
      {
        a4 = v96;
LABEL_73:
        if (!v28)
          goto LABEL_75;
LABEL_74:
        *(_BYTE *)a6 = horz_filter_length_luma[19 * v22 + v24];
        *(_QWORD *)(a6 + 8) = v17 + 48 * v28;
        goto LABEL_75;
      }
      a4 = v96;
      if ((v21 & 0x80) == 0 && (char)v20[16] <= 0)
        goto LABEL_73;
LABEL_75:
      v49 = block_size_wide_0[*v20];
      if (v25 < v49)
        v49 = v25;
      *a7 = v22;
      v50 = (int)tx_size_high_unit[v22];
      v51 = v50 + a4;
      if ((int)v50 + a4 < v15)
      {
        v52 = &a7[v50];
        v53 = a6 + 16 * v50;
        do
        {
          v55 = v22;
          *(_BYTE *)v53 = 0;
          v56 = (unsigned __int8 **)(*(_QWORD *)(a1 + 568) + 8 * *(_DWORD *)(a1 + 580) * v51 + 8 * v18);
          v57 = *v56;
          if (a2)
          {
            v58 = *(_WORD *)(v57 + 167);
            if (*(_DWORD *)(a2 + 4 * (v58 & 7) + 10692))
            {
              v22 = 0;
              v59 = v56[v16];
              v60 = v58 & 7;
              if (!*(_DWORD *)(v14 + 5384))
                goto LABEL_85;
              goto LABEL_93;
            }
          }
          else
          {
            v58 = *(_WORD *)(v57 + 167);
          }
          v22 = v57[145];
          if (((v58 & 0x80) != 0 || (char)v57[16] >= 1) && !v57[144])
          {
            v80 = *v57;
            v22 = v57[((int)((mi_size_wide_4[v80] - 1) & v18) >> av1_get_txb_size_index_tw_w_log2_table[v80])
                    + 146
                    + ((int)((mi_size_high_3[v80] - 1) & v51) >> av1_get_txb_size_index_tw_h_log2_table[v80] << av1_get_txb_size_index_stride_log2_table[v80])];
            v59 = v56[v16];
            v60 = v58 & 7;
            if (!*(_DWORD *)(v14 + 5384))
            {
LABEL_85:
              v61 = a1 + 32 * v60 + 2 * (char)v57[16] + mode_lf_lut_0[v57[2]];
              v62 = *(unsigned __int8 *)(v61 + 22272);
              if (!*(_BYTE *)(v61 + 22272))
              {
                v62 = *(unsigned __int8 *)(a1
                                         + 32 * (*(_WORD *)(v59 + 167) & 7)
                                         + 2 * (char)v59[16]
                                         + mode_lf_lut_0[v59[2]]
                                         + 22272);
                if (v59 != v57)
                  goto LABEL_110;
                goto LABEL_128;
              }
LABEL_109:
              if (v59 != v57)
                goto LABEL_110;
              goto LABEL_128;
            }
          }
          else
          {
            v59 = v56[v16];
            v60 = v58 & 7;
            if (!*(_DWORD *)(v14 + 5384))
              goto LABEL_85;
          }
LABEL_93:
          v63 = *(_DWORD *)(v14 + 5392);
          v64 = 162;
          if (v63)
            v64 = 164;
          v65 = (char)v57[v64];
          v66 = *(_DWORD *)(v14 + 4036);
          v67 = v66 + v65;
          if (v67 >= 63)
            v67 = 63;
          v62 = v67 & ~(v67 >> 31);
          if (*(_BYTE *)v14 && (*(_DWORD *)(a1 + 4 * v60 + 19124) & 4) != 0)
          {
            v68 = v62 + *(__int16 *)(a1 + 16 * v60 + 19000);
            if (v68 >= 63)
              v68 = 63;
            v62 = v68 & ~(v68 >> 31);
          }
          if (*(_BYTE *)(v14 + 4052))
          {
            v69 = (char)v57[16];
            v70 = *(char *)(a1 + v69 + 23046);
            if (v69 >= 1)
              v70 += *(char *)(a1 + mode_lf_lut_0[v57[2]] + 23054);
            v71 = (v70 << (v62 >> 5)) + v62;
            if (v71 >= 63)
              v71 = 63;
            v62 = v71 & ~(v71 >> 31);
          }
          v62 = v62;
          if ((_BYTE)v62)
            goto LABEL_109;
          v39 = v63 == 0;
          v72 = 162;
          if (!v39)
            v72 = 164;
          v73 = v66 + (char)v59[v72];
          if (v73 >= 63)
            v73 = 63;
          v74 = v73 & ~(v73 >> 31);
          if (*(_BYTE *)v14)
          {
            v75 = *(_WORD *)(v59 + 167) & 7;
            if ((*(_DWORD *)(a1 + 4 * v75 + 19124) & 4) != 0)
            {
              v76 = v74 + *(__int16 *)(a1 + 16 * v75 + 19000);
              if (v76 >= 63)
                v76 = 63;
              v74 = v76 & ~(v76 >> 31);
            }
          }
          if (*(_BYTE *)(v14 + 4052))
          {
            v77 = (char)v59[16];
            v78 = *(char *)(a1 + v77 + 23046);
            if (v77 >= 1)
              v78 += *(char *)(a1 + mode_lf_lut_0[v59[2]] + 23054);
            v79 = (v78 << (v74 >> 5)) + v74;
            if (v79 >= 63)
              v79 = 63;
            v74 = v79 & ~(v79 >> 31);
          }
          v62 = v74;
          if (v59 != v57)
          {
LABEL_110:
            if (v62)
            {
              *(_BYTE *)v53 = horz_filter_length_luma[19 * v22 + v55];
              *(_QWORD *)(v53 + 8) = v17 + 48 * v62;
            }
            goto LABEL_79;
          }
LABEL_128:
          if (!v57[144] || (v58 & 0x80) == 0 && (char)v57[16] <= 0)
            goto LABEL_110;
LABEL_79:
          if (v49 >= block_size_wide_0[*v57])
            v49 = block_size_wide_0[*v57];
          *v52 = v22;
          v54 = (int)tx_size_high_unit[v22];
          v51 += v54;
          v53 += 16 * v54;
          v52 += v54;
        }
        while (v51 < v15);
      }
      if ((v13 & 3) != 0 || (v84 = v13 + 3, v13 + 3 >= v98) || v49 <= 15)
      {
        v81 = v13 + 1 < v98;
        v82 = v49 > 7;
        v83 = v81 && v82;
        if (v81 && v82)
          v84 = v13 + 1;
        else
          v84 = v13;
        if (v8 >= 1)
        {
LABEL_140:
          v85 = 0;
          v86 = (__int32 *)(v91 + 4 * v13);
          v87 = v97;
          v88 = (unsigned __int8 *)a6;
          do
          {
            if (*v87 == 255)
            {
              *v88 = 0;
              *v87 = 0;
            }
            filter_horz(v86, v101, v88, v83);
            v89 = tx_size_high_unit[*v87];
            v85 += v89;
            v86 = (__int32 *)((char *)v86 + (v100 * v89));
            v88 += 16 * v89;
            v87 += v89;
          }
          while (v85 < v8);
        }
      }
      else
      {
        v83 = 2;
        if (v8 >= 1)
          goto LABEL_140;
      }
      v13 = v84 + 1;
      a7 = v97;
      a4 = v96;
      v15 = v94;
      v17 = v92;
      v16 = v93;
      if (v13 >= v98)
        return;
    }
    v21 = *(_WORD *)(v20 + 167);
LABEL_15:
    v22 = v20[145];
    if (((v21 & 0x80) != 0 || (char)v20[16] >= 1) && !v20[144])
    {
      v38 = *v20;
      v22 = v20[((int)((mi_size_wide_4[v38] - 1) & v18) >> av1_get_txb_size_index_tw_w_log2_table[v38])
              + 146
              + (((mi_size_high_3[v38] - 1) & a4) >> av1_get_txb_size_index_tw_h_log2_table[v38] << av1_get_txb_size_index_stride_log2_table[v38])];
      if (!a4)
      {
LABEL_49:
        v25 = 128;
        goto LABEL_75;
      }
    }
    else if (!a4)
    {
      goto LABEL_49;
    }
    v23 = v19[v16];
    if (!a2)
      goto LABEL_25;
    goto LABEL_20;
  }
}

void av1_filter_block_plane_horz_opt_chroma(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5, unsigned __int8 *a6, _BYTE *a7, int a8, char a9, __int16 a10, char a11)
{
  int v11;
  int v12;
  int v13;
  signed int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int filter_level;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 **v43;
  unsigned __int8 *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 v52;
  int v53;
  unsigned __int8 *v54;
  _DWORD *v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  unsigned __int8 *v65;
  _DWORD *v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned __int8 *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  __int32 *v84;
  __int32 *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  const char *v93;
  const char *v94;
  __int32 *v95;
  int v96;
  const char *v97;
  const char *v98;
  const char *v99;
  const char *v100;
  int v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  signed int v116;
  uint64_t v117;
  int v118;
  int v122;
  _DWORD *v123;
  uint64_t v124;
  int v126;
  int *v127;
  _DWORD *v128;
  unsigned __int8 *v129;
  _DWORD *v130;
  int v131;
  uint64_t v132;

  v11 = a3[1];
  v12 = a3[2];
  v13 = 1 << a11 >> v12;
  if ((int)((((((a3[9] << v12) + 3) >> 2) + (1 << v12 >> 1)) >> v12) - (a4 >> v12)) < v13)
    v13 = (((((a3[9] << v12) + 3) >> 2) + (1 << v12 >> 1)) >> v12) - (a4 >> v12);
  v126 = v13;
  v14 = (((((a3[8] << v11) + 3) >> 2) + (1 << v11 >> 1)) >> v11) - (a5 >> v11);
  if (v14 >= (int)(0x20u >> v11))
    v14 = 0x20u >> v11;
  v116 = v14;
  if (v14 >= 1)
  {
    v15 = a8;
    v16 = a4;
    v17 = a3;
    v18 = a2;
    v19 = a1;
    v20 = 0;
    v21 = v11;
    v22 = v12;
    v107 = (v126 << v12) + a4;
    v113 = -(uint64_t)(int)(*(_DWORD *)(a1 + 580) << v12);
    v112 = v12 | a4;
    v105 = (-1 << v12) + (v12 | a4);
    v115 = a1 + 19184;
    v124 = a8;
    v127 = &delta_lf_id_lut[2 * a8 + 1];
    v128 = (_DWORD *)(a1 + 23032);
    v130 = (_DWORD *)(a1 + 23028);
    v106 = a1 + 18992;
    v123 = (_DWORD *)(a1 + 23036);
    v129 = &seg_lvl_lf_lut[2 * a8 + 1];
    v131 = a3[10];
    v114 = v11;
    v117 = v12;
    do
    {
      *a6 = 0;
      v23 = ((v20 << v21) + a5) | v21;
      v24 = (unsigned __int8 **)(*(_QWORD *)(v19 + 568)
                               + 8 * (*(_DWORD *)(v19 + 580) * v112)
                               + 8 * v23);
      v25 = *v24;
      v122 = v20;
      if (v18 && *(_DWORD *)(v18 + 4 * (*(_WORD *)(v25 + 167) & 7) + 10692))
      {
        *a7 = 0;
        v26 = 0;
        if (!v16)
        {
          v30 = 0;
          v31 = 64;
          v32 = v106;
          goto LABEL_56;
        }
        v27 = v24[v113];
      }
      else
      {
        if (v15)
        {
          v26 = 3;
          switch((unint64_t)av1_ss_size_lookup[4 * *v25 + 2 * v21 + v22])
          {
            case 1uLL:
            case 2uLL:
            case 4uLL:
            case 5uLL:
            case 7uLL:
            case 8uLL:
            case 0x10uLL:
            case 0x11uLL:
            case 0x12uLL:
            case 0x13uLL:
            case 0xA8uLL:
            case 0xACuLL:
            case 0xB0uLL:
            case 0xB4uLL:
            case 0xBCuLL:
            case 0xC0uLL:
            case 0xC4uLL:
            case 0xC8uLL:
            case 0xCCuLL:
            case 0xD0uLL:
            case 0xD4uLL:
            case 0xDCuLL:
            case 0xE0uLL:
            case 0xE4uLL:
            case 0xE8uLL:
            case 0xECuLL:
            case 0xF4uLL:
            case 0xF8uLL:
            case 0xFCuLL:
            case 0x100uLL:
            case 0x108uLL:
            case 0x10CuLL:
            case 0x110uLL:
            case 0x114uLL:
            case 0x118uLL:
            case 0x11CuLL:
            case 0x120uLL:
            case 0x128uLL:
            case 0x12CuLL:
            case 0x130uLL:
            case 0x134uLL:
            case 0x138uLL:
            case 0x140uLL:
            case 0x144uLL:
            case 0x148uLL:
            case 0x14CuLL:
            case 0x154uLL:
            case 0x158uLL:
            case 0x15CuLL:
            case 0x160uLL:
            case 0x164uLL:
            case 0x168uLL:
            case 0x16CuLL:
            case 0x174uLL:
            case 0x178uLL:
            case 0x17CuLL:
            case 0x180uLL:
            case 0x184uLL:
            case 0x18CuLL:
            case 0x190uLL:
            case 0x194uLL:
            case 0x198uLL:
            case 0x1A0uLL:
            case 0x1A4uLL:
            case 0x1A8uLL:
            case 0x1ACuLL:
            case 0x1B0uLL:
            case 0x1B4uLL:
            case 0x1B8uLL:
            case 0x1C0uLL:
            case 0x1C4uLL:
            case 0x1C8uLL:
            case 0x1CCuLL:
            case 0x1D0uLL:
            case 0x224uLL:
            case 0x228uLL:
            case 0x22CuLL:
            case 0x230uLL:
            case 0x238uLL:
            case 0x23CuLL:
            case 0x240uLL:
            case 0x244uLL:
            case 0x248uLL:
            case 0x24CuLL:
            case 0x250uLL:
            case 0x258uLL:
            case 0x25CuLL:
            case 0x260uLL:
            case 0x264uLL:
            case 0x268uLL:
            case 0x270uLL:
            case 0x274uLL:
            case 0x278uLL:
            case 0x27CuLL:
            case 0x284uLL:
            case 0x288uLL:
            case 0x28CuLL:
            case 0x290uLL:
            case 0x294uLL:
            case 0x298uLL:
            case 0x29CuLL:
            case 0x2A4uLL:
            case 0x2A8uLL:
            case 0x2ACuLL:
            case 0x2B0uLL:
            case 0x2B4uLL:
            case 0x2BCuLL:
            case 0x2C0uLL:
            case 0x2C4uLL:
            case 0x2C8uLL:
            case 0x2D0uLL:
            case 0x2D4uLL:
            case 0x2D8uLL:
            case 0x2DCuLL:
            case 0x2E0uLL:
            case 0x2E4uLL:
            case 0x2E8uLL:
            case 0x2F0uLL:
            case 0x2F4uLL:
            case 0x2F8uLL:
            case 0x2FCuLL:
            case 0x300uLL:
            case 0x308uLL:
            case 0x30CuLL:
            case 0x310uLL:
            case 0x314uLL:
            case 0x31CuLL:
            case 0x320uLL:
            case 0x324uLL:
            case 0x328uLL:
            case 0x32CuLL:
            case 0x330uLL:
            case 0x334uLL:
            case 0x33CuLL:
            case 0x340uLL:
            case 0x344uLL:
            case 0x348uLL:
            case 0x34CuLL:
            case 0x354uLL:
            case 0x358uLL:
            case 0x35CuLL:
            case 0x360uLL:
            case 0x368uLL:
            case 0x36CuLL:
            case 0x370uLL:
            case 0x374uLL:
            case 0x378uLL:
            case 0x37CuLL:
            case 0x380uLL:
            case 0x388uLL:
            case 0x38CuLL:
            case 0x390uLL:
            case 0x394uLL:
            case 0x398uLL:
            case 0x3A0uLL:
            case 0x3A4uLL:
            case 0x3A8uLL:
            case 0x3ACuLL:
            case 0x3B4uLL:
            case 0x3B8uLL:
            case 0x3BCuLL:
            case 0x3C0uLL:
            case 0x3C4uLL:
            case 0x3C8uLL:
            case 0x3CCuLL:
            case 0x3D4uLL:
            case 0x3D8uLL:
            case 0x3DCuLL:
            case 0x3E0uLL:
            case 0x3E4uLL:
            case 0x3ECuLL:
            case 0x3F0uLL:
            case 0x3F4uLL:
            case 0x3F8uLL:
            case 0x400uLL:
            case 0x404uLL:
            case 0x408uLL:
            case 0x40CuLL:
            case 0x410uLL:
            case 0x414uLL:
            case 0x418uLL:
            case 0x420uLL:
            case 0x424uLL:
            case 0x428uLL:
            case 0x42CuLL:
            case 0x430uLL:
            case 0x484uLL:
            case 0x488uLL:
            case 0x48CuLL:
            case 0x490uLL:
            case 0x498uLL:
            case 0x49CuLL:
            case 0x4A0uLL:
            case 0x4A4uLL:
            case 0x4A8uLL:
            case 0x4ACuLL:
            case 0x4B0uLL:
            case 0x4B8uLL:
            case 0x4BCuLL:
            case 0x4C0uLL:
            case 0x4C4uLL:
            case 0x4C8uLL:
            case 0x4D0uLL:
            case 0x4D4uLL:
            case 0x4D8uLL:
            case 0x4DCuLL:
            case 0x4E4uLL:
            case 0x4E8uLL:
            case 0x4ECuLL:
            case 0x4F0uLL:
            case 0x4F4uLL:
            case 0x4F8uLL:
            case 0x4FCuLL:
            case 0x504uLL:
            case 0x508uLL:
            case 0x50CuLL:
            case 0x510uLL:
            case 0x514uLL:
            case 0x51CuLL:
            case 0x520uLL:
            case 0x524uLL:
            case 0x528uLL:
            case 0x530uLL:
            case 0x534uLL:
            case 0x538uLL:
            case 0x53CuLL:
            case 0x540uLL:
            case 0x544uLL:
            case 0x548uLL:
            case 0x550uLL:
            case 0x554uLL:
            case 0x558uLL:
            case 0x55CuLL:
            case 0x560uLL:
            case 0x568uLL:
            case 0x56CuLL:
            case 0x570uLL:
            case 0x574uLL:
            case 0x57CuLL:
            case 0x580uLL:
            case 0x584uLL:
            case 0x588uLL:
            case 0x58CuLL:
            case 0x590uLL:
            case 0x594uLL:
            case 0x59CuLL:
            case 0x5A0uLL:
            case 0x5A4uLL:
            case 0x5A8uLL:
            case 0x5ACuLL:
            case 0x5B4uLL:
            case 0x5B8uLL:
            case 0x5BCuLL:
            case 0x5C0uLL:
            case 0x5C8uLL:
            case 0x5CCuLL:
            case 0x5D0uLL:
            case 0x5D4uLL:
            case 0x5D8uLL:
            case 0x5DCuLL:
            case 0x5E0uLL:
            case 0x5E8uLL:
            case 0x5ECuLL:
            case 0x5F0uLL:
            case 0x5F4uLL:
            case 0x5F8uLL:
            case 0x64CuLL:
            case 0x650uLL:
            case 0x654uLL:
            case 0x658uLL:
            case 0x65CuLL:
            case 0x664uLL:
            case 0x668uLL:
            case 0x66CuLL:
            case 0x670uLL:
            case 0x674uLL:
            case 0x678uLL:
            case 0x67CuLL:
            case 0x684uLL:
            case 0x688uLL:
            case 0x68CuLL:
            case 0x690uLL:
            case 0x698uLL:
            case 0x69CuLL:
            case 0x6A0uLL:
            case 0x6A4uLL:
            case 0x6A8uLL:
            case 0x6B0uLL:
            case 0x6B4uLL:
            case 0x6B8uLL:
            case 0x6BCuLL:
            case 0x6C0uLL:
            case 0x6C4uLL:
            case 0x6C8uLL:
            case 0x6D0uLL:
            case 0x6D4uLL:
            case 0x6D8uLL:
            case 0x6DCuLL:
            case 0x6E4uLL:
            case 0x6E8uLL:
            case 0x6ECuLL:
            case 0x6F0uLL:
            case 0x6F4uLL:
            case 0x6FCuLL:
            case 0x700uLL:
            case 0x704uLL:
            case 0x708uLL:
            case 0x70CuLL:
            case 0x710uLL:
            case 0x714uLL:
            case 0x71CuLL:
            case 0x720uLL:
            case 0x724uLL:
            case 0x728uLL:
            case 0x730uLL:
            case 0x734uLL:
            case 0x738uLL:
            case 0x73CuLL:
            case 0x740uLL:
            case 0x748uLL:
            case 0x74CuLL:
            case 0x750uLL:
            case 0x754uLL:
            case 0x758uLL:
            case 0x75CuLL:
            case 0x760uLL:
            case 0x768uLL:
            case 0x76CuLL:
            case 0x770uLL:
            case 0x774uLL:
            case 0x77CuLL:
            case 0x780uLL:
            case 0x784uLL:
            case 0x788uLL:
            case 0x78CuLL:
            case 0x794uLL:
            case 0x798uLL:
            case 0x79CuLL:
            case 0x7A0uLL:
            case 0x7A4uLL:
            case 0x7A8uLL:
            case 0x7ACuLL:
            case 0x7B4uLL:
            case 0x7B8uLL:
            case 0x7BCuLL:
            case 0x7C0uLL:
            case 0x814uLL:
            case 0x818uLL:
            case 0x81CuLL:
            case 0x820uLL:
            case 0x824uLL:
            case 0x82CuLL:
            case 0x830uLL:
            case 0x834uLL:
            case 0x838uLL:
            case 0x83CuLL:
            case 0x840uLL:
            case 0x844uLL:
            case 0x84CuLL:
            case 0x850uLL:
            case 0x854uLL:
            case 0x858uLL:
            case 0x860uLL:
            case 0x864uLL:
            case 0x868uLL:
            case 0x86CuLL:
            case 0x870uLL:
            case 0x878uLL:
            case 0x87CuLL:
            case 0x880uLL:
            case 0x884uLL:
            case 0x888uLL:
            case 0x88CuLL:
            case 0x890uLL:
            case 0x898uLL:
            case 0x89CuLL:
            case 0x8A0uLL:
            case 0x8A4uLL:
            case 0x8ACuLL:
            case 0x8B0uLL:
            case 0x8B4uLL:
            case 0x8B8uLL:
            case 0x8BCuLL:
            case 0x8C4uLL:
            case 0x8C8uLL:
            case 0x8CCuLL:
            case 0x8D0uLL:
            case 0x8D4uLL:
            case 0x8D8uLL:
            case 0x8DCuLL:
            case 0x8E4uLL:
            case 0x8E8uLL:
            case 0x8ECuLL:
            case 0x8F0uLL:
            case 0x8F8uLL:
            case 0x8FCuLL:
            case 0x900uLL:
            case 0x904uLL:
            case 0x908uLL:
            case 0x910uLL:
            case 0x914uLL:
            case 0x918uLL:
            case 0x91CuLL:
            case 0x920uLL:
            case 0x924uLL:
            case 0x928uLL:
            case 0x930uLL:
            case 0x934uLL:
            case 0x938uLL:
            case 0x93CuLL:
            case 0x944uLL:
            case 0x948uLL:
            case 0x94CuLL:
            case 0x950uLL:
            case 0x954uLL:
            case 0x95CuLL:
            case 0x960uLL:
            case 0x964uLL:
            case 0x968uLL:
            case 0x96CuLL:
            case 0x970uLL:
            case 0x974uLL:
            case 0x97CuLL:
            case 0x980uLL:
            case 0x984uLL:
            case 0x988uLL:
            case 0x990uLL:
            case 0x994uLL:
            case 0x998uLL:
            case 0x99CuLL:
            case 0x9A0uLL:
            case 0x9A8uLL:
            case 0x9ACuLL:
            case 0x9B0uLL:
            case 0x9B4uLL:
            case 0x9B8uLL:
            case 0x9BCuLL:
            case 0x9C0uLL:
            case 0x9C8uLL:
            case 0x9CCuLL:
            case 0x9D0uLL:
            case 0x9D4uLL:
            case 0x9DCuLL:
            case 0x9E0uLL:
            case 0x9E4uLL:
            case 0x9E8uLL:
            case 0x9ECuLL:
            case 0x9F4uLL:
            case 0x9F8uLL:
            case 0x9FCuLL:
            case 0xA00uLL:
            case 0xA04uLL:
            case 0xA08uLL:
            case 0xA0CuLL:
            case 0xA14uLL:
            case 0xA18uLL:
            case 0xA1CuLL:
            case 0xA20uLL:
            case 0xA74uLL:
            case 0xA78uLL:
            case 0xA7CuLL:
            case 0xA80uLL:
            case 0xA84uLL:
            case 0xA8CuLL:
            case 0xA90uLL:
            case 0xA94uLL:
            case 0xA98uLL:
            case 0xA9CuLL:
            case 0xAA0uLL:
            case 0xAA4uLL:
            case 0xAACuLL:
            case 0xAB0uLL:
            case 0xAB4uLL:
            case 0xAB8uLL:
            case 0xAC0uLL:
            case 0xAC4uLL:
            case 0xAC8uLL:
            case 0xACCuLL:
            case 0xAD0uLL:
            case 0xAD8uLL:
            case 0xADCuLL:
            case 0xAE0uLL:
            case 0xAE4uLL:
            case 0xAE8uLL:
            case 0xAECuLL:
            case 0xAF0uLL:
            case 0xAF8uLL:
            case 0xAFCuLL:
            case 0xB00uLL:
            case 0xB04uLL:
            case 0xB0CuLL:
            case 0xB10uLL:
            case 0xB14uLL:
            case 0xB18uLL:
            case 0xB1CuLL:
            case 0xB24uLL:
            case 0xB28uLL:
            case 0xB2CuLL:
            case 0xB30uLL:
            case 0xB34uLL:
            case 0xB38uLL:
            case 0xB3CuLL:
            case 0xB44uLL:
            case 0xB48uLL:
            case 0xB4CuLL:
            case 0xB50uLL:
            case 0xB58uLL:
            case 0xB5CuLL:
            case 0xB60uLL:
            case 0xB64uLL:
            case 0xB68uLL:
            case 0xB70uLL:
            case 0xB74uLL:
            case 0xB78uLL:
            case 0xB7CuLL:
            case 0xB80uLL:
            case 0xB84uLL:
            case 0xB88uLL:
            case 0xB90uLL:
            case 0xB94uLL:
            case 0xB98uLL:
            case 0xB9CuLL:
            case 0xBF0uLL:
            case 0xBF4uLL:
            case 0xBF8uLL:
            case 0xBFCuLL:
            case 0xC04uLL:
            case 0xC08uLL:
            case 0xC0CuLL:
            case 0xC10uLL:
            case 0xC14uLL:
            case 0xC18uLL:
            case 0xC1CuLL:
            case 0xC24uLL:
            case 0xC28uLL:
            case 0xC2CuLL:
            case 0xC30uLL:
            case 0xC34uLL:
            case 0xC3CuLL:
            case 0xC40uLL:
            case 0xC44uLL:
            case 0xC48uLL:
            case 0xC50uLL:
            case 0xC54uLL:
            case 0xC58uLL:
            case 0xC5CuLL:
            case 0xC60uLL:
            case 0xC64uLL:
            case 0xC68uLL:
            case 0xC70uLL:
            case 0xC74uLL:
            case 0xC78uLL:
            case 0xC7CuLL:
            case 0xC80uLL:
            case 0xC88uLL:
            case 0xC8CuLL:
            case 0xC90uLL:
            case 0xC94uLL:
            case 0xC9CuLL:
            case 0xCA0uLL:
            case 0xCA4uLL:
            case 0xCA8uLL:
            case 0xCACuLL:
            case 0xCB0uLL:
            case 0xCB4uLL:
            case 0xCBCuLL:
            case 0xCC0uLL:
            case 0xCC4uLL:
            case 0xCC8uLL:
            case 0xCCCuLL:
            case 0xCD4uLL:
            case 0xCD8uLL:
            case 0xCDCuLL:
            case 0xCE0uLL:
            case 0xCE8uLL:
            case 0xCECuLL:
            case 0xCF0uLL:
            case 0xCF4uLL:
            case 0xCF8uLL:
            case 0xCFCuLL:
            case 0xD00uLL:
            case 0xD08uLL:
            case 0xD0CuLL:
            case 0xD10uLL:
            case 0xD14uLL:
            case 0xD18uLL:
            case 0xD6CuLL:
            case 0xD70uLL:
            case 0xD74uLL:
            case 0xD78uLL:
            case 0xD80uLL:
            case 0xD84uLL:
            case 0xD88uLL:
            case 0xD8CuLL:
            case 0xD90uLL:
            case 0xD94uLL:
            case 0xD98uLL:
            case 0xDA0uLL:
            case 0xDA4uLL:
            case 0xDA8uLL:
            case 0xDACuLL:
            case 0xDB0uLL:
            case 0xDB8uLL:
            case 0xDBCuLL:
            case 0xDC0uLL:
            case 0xDC4uLL:
            case 0xDCCuLL:
            case 0xDD0uLL:
            case 0xDD4uLL:
            case 0xDD8uLL:
            case 0xDDCuLL:
            case 0xDE0uLL:
            case 0xDE4uLL:
            case 0xDECuLL:
            case 0xDF0uLL:
            case 0xDF4uLL:
            case 0xDF8uLL:
            case 0xDFCuLL:
            case 0xE04uLL:
            case 0xE08uLL:
            case 0xE0CuLL:
            case 0xE10uLL:
            case 0xE18uLL:
            case 0xE1CuLL:
            case 0xE20uLL:
            case 0xE24uLL:
            case 0xE28uLL:
            case 0xE2CuLL:
            case 0xE30uLL:
            case 0xE38uLL:
            case 0xE3CuLL:
            case 0xE40uLL:
            case 0xE44uLL:
            case 0xE48uLL:
            case 0xE50uLL:
            case 0xE54uLL:
            case 0xE58uLL:
            case 0xE5CuLL:
            case 0xE64uLL:
            case 0xE68uLL:
            case 0xE6CuLL:
            case 0xE70uLL:
            case 0xE74uLL:
            case 0xE78uLL:
            case 0xE7CuLL:
            case 0xE84uLL:
            case 0xE88uLL:
            case 0xE8CuLL:
            case 0xE90uLL:
            case 0xE94uLL:
            case 0xE9CuLL:
            case 0xEA0uLL:
            case 0xEA4uLL:
            case 0xEA8uLL:
            case 0xEB0uLL:
            case 0xEB4uLL:
            case 0xEB8uLL:
            case 0xEBCuLL:
            case 0xEC0uLL:
            case 0xEC4uLL:
            case 0xEC8uLL:
            case 0xED0uLL:
            case 0xED4uLL:
            case 0xED8uLL:
            case 0xEDCuLL:
            case 0xEE0uLL:
            case 0xEE8uLL:
            case 0xEECuLL:
            case 0xEF0uLL:
            case 0xEF4uLL:
            case 0xEFCuLL:
            case 0xF00uLL:
            case 0xF04uLL:
            case 0xF08uLL:
            case 0xF0CuLL:
            case 0xF10uLL:
            case 0xF14uLL:
            case 0xF1CuLL:
            case 0xF20uLL:
            case 0xF24uLL:
            case 0xF28uLL:
            case 0xF2CuLL:
            case 0xF34uLL:
            case 0xF38uLL:
            case 0xF3CuLL:
            case 0xF40uLL:
            case 0xF48uLL:
            case 0xF4CuLL:
            case 0xF50uLL:
            case 0xF54uLL:
            case 0xF58uLL:
            case 0xF5CuLL:
            case 0xF60uLL:
            case 0xF68uLL:
            case 0xF6CuLL:
            case 0xF70uLL:
            case 0xF74uLL:
            case 0xF78uLL:
            case 0xFCCuLL:
            case 0xFD0uLL:
            case 0xFD4uLL:
            case 0xFD8uLL:
            case 0xFE0uLL:
            case 0xFE4uLL:
            case 0xFE8uLL:
            case 0xFECuLL:
            case 0xFF0uLL:
            case 0xFF4uLL:
            case 0xFF8uLL:
            case 0x1000uLL:
            case 0x1004uLL:
            case 0x1008uLL:
            case 0x100CuLL:
            case 0x1010uLL:
            case 0x1018uLL:
            case 0x101CuLL:
            case 0x1020uLL:
            case 0x1024uLL:
            case 0x102CuLL:
            case 0x1030uLL:
            case 0x1034uLL:
            case 0x1038uLL:
            case 0x103CuLL:
            case 0x1040uLL:
            case 0x1044uLL:
            case 0x104CuLL:
            case 0x1050uLL:
            case 0x1054uLL:
            case 0x1058uLL:
            case 0x105CuLL:
            case 0x1064uLL:
            case 0x1068uLL:
            case 0x106CuLL:
            case 0x1070uLL:
            case 0x1078uLL:
            case 0x107CuLL:
            case 0x1080uLL:
            case 0x1084uLL:
            case 0x1088uLL:
            case 0x108CuLL:
            case 0x1090uLL:
            case 0x1098uLL:
            case 0x109CuLL:
            case 0x10A0uLL:
            case 0x10A4uLL:
            case 0x10A8uLL:
            case 0x10B0uLL:
            case 0x10B4uLL:
            case 0x10B8uLL:
            case 0x10BCuLL:
            case 0x10C4uLL:
            case 0x10C8uLL:
            case 0x10CCuLL:
            case 0x10D0uLL:
            case 0x10D4uLL:
            case 0x10D8uLL:
            case 0x10DCuLL:
            case 0x10E4uLL:
            case 0x10E8uLL:
            case 0x10ECuLL:
            case 0x10F0uLL:
            case 0x10F4uLL:
            case 0x10FCuLL:
            case 0x1100uLL:
            case 0x1104uLL:
            case 0x1108uLL:
            case 0x1110uLL:
            case 0x1114uLL:
            case 0x1118uLL:
            case 0x111CuLL:
            case 0x1120uLL:
            case 0x1124uLL:
            case 0x1128uLL:
            case 0x1130uLL:
            case 0x1134uLL:
            case 0x1138uLL:
            case 0x113CuLL:
            case 0x1140uLL:
            case 0x1194uLL:
            case 0x1198uLL:
            case 0x119CuLL:
            case 0x11A0uLL:
            case 0x11A4uLL:
            case 0x11ACuLL:
            case 0x11B0uLL:
            case 0x11B4uLL:
            case 0x11B8uLL:
            case 0x11BCuLL:
            case 0x11C0uLL:
            case 0x11C4uLL:
            case 0x11CCuLL:
            case 0x11D0uLL:
            case 0x11D4uLL:
            case 0x11D8uLL:
            case 0x11E0uLL:
            case 0x11E4uLL:
            case 0x11E8uLL:
            case 0x11ECuLL:
            case 0x11F0uLL:
            case 0x11F8uLL:
            case 0x11FCuLL:
            case 0x1200uLL:
            case 0x1204uLL:
            case 0x1208uLL:
            case 0x120CuLL:
            case 0x1210uLL:
            case 0x1218uLL:
            case 0x121CuLL:
            case 0x1220uLL:
            case 0x1224uLL:
            case 0x122CuLL:
            case 0x1230uLL:
            case 0x1234uLL:
            case 0x1238uLL:
            case 0x123CuLL:
            case 0x1244uLL:
            case 0x1248uLL:
            case 0x124CuLL:
            case 0x1250uLL:
            case 0x1254uLL:
            case 0x1258uLL:
            case 0x125CuLL:
            case 0x1264uLL:
            case 0x1268uLL:
            case 0x126CuLL:
            case 0x1270uLL:
            case 0x1278uLL:
            case 0x127CuLL:
            case 0x1280uLL:
            case 0x1284uLL:
            case 0x1288uLL:
            case 0x1290uLL:
            case 0x1294uLL:
            case 0x1298uLL:
            case 0x129CuLL:
            case 0x12A0uLL:
            case 0x12A4uLL:
            case 0x12A8uLL:
            case 0x12B0uLL:
            case 0x12B4uLL:
            case 0x12B8uLL:
            case 0x12BCuLL:
            case 0x12C4uLL:
            case 0x12C8uLL:
            case 0x12CCuLL:
            case 0x12D0uLL:
            case 0x12D4uLL:
            case 0x12DCuLL:
            case 0x12E0uLL:
            case 0x12E4uLL:
            case 0x12E8uLL:
            case 0x12ECuLL:
            case 0x12F0uLL:
            case 0x12F4uLL:
            case 0x12FCuLL:
            case 0x1300uLL:
            case 0x1304uLL:
            case 0x1308uLL:
            case 0x135CuLL:
            case 0x1360uLL:
            case 0x1364uLL:
            case 0x1368uLL:
            case 0x136CuLL:
            case 0x1374uLL:
            case 0x1378uLL:
            case 0x137CuLL:
            case 0x1380uLL:
            case 0x1384uLL:
            case 0x1388uLL:
            case 0x138CuLL:
            case 0x1394uLL:
            case 0x1398uLL:
            case 0x139CuLL:
            case 0x13A0uLL:
            case 0x13A8uLL:
            case 0x13ACuLL:
            case 0x13B0uLL:
            case 0x13B4uLL:
            case 0x13B8uLL:
            case 0x13C0uLL:
            case 0x13C4uLL:
            case 0x13C8uLL:
            case 0x13CCuLL:
            case 0x13D0uLL:
            case 0x13D4uLL:
            case 0x13D8uLL:
            case 0x13E0uLL:
            case 0x13E4uLL:
            case 0x13E8uLL:
            case 0x13ECuLL:
            case 0x13F4uLL:
            case 0x13F8uLL:
            case 0x13FCuLL:
            case 0x1400uLL:
            case 0x1404uLL:
            case 0x140CuLL:
            case 0x1410uLL:
            case 0x1414uLL:
            case 0x1418uLL:
            case 0x141CuLL:
            case 0x1420uLL:
            case 0x1424uLL:
            case 0x142CuLL:
            case 0x1430uLL:
            case 0x1434uLL:
            case 0x1438uLL:
            case 0x1440uLL:
            case 0x1444uLL:
            case 0x1448uLL:
            case 0x144CuLL:
            case 0x1450uLL:
            case 0x1458uLL:
            case 0x145CuLL:
            case 0x1460uLL:
            case 0x1464uLL:
            case 0x1468uLL:
            case 0x146CuLL:
            case 0x1470uLL:
            case 0x1478uLL:
            case 0x147CuLL:
            case 0x1480uLL:
            case 0x1484uLL:
            case 0x148CuLL:
            case 0x1490uLL:
            case 0x1494uLL:
            case 0x1498uLL:
            case 0x149CuLL:
            case 0x14A4uLL:
            case 0x14A8uLL:
            case 0x14ACuLL:
            case 0x14B0uLL:
            case 0x14B4uLL:
            case 0x14B8uLL:
            case 0x14BCuLL:
            case 0x14C4uLL:
            case 0x14C8uLL:
            case 0x14CCuLL:
            case 0x14D0uLL:
            case 0x14D8uLL:
            case 0x14DCuLL:
            case 0x14E0uLL:
            case 0x14E4uLL:
            case 0x14E8uLL:
            case 0x14F0uLL:
            case 0x14F4uLL:
            case 0x14F8uLL:
            case 0x14FCuLL:
            case 0x1500uLL:
            case 0x1504uLL:
            case 0x1508uLL:
            case 0x1510uLL:
            case 0x1514uLL:
            case 0x1518uLL:
            case 0x151CuLL:
            case 0x1524uLL:
            case 0x1528uLL:
            case 0x152CuLL:
            case 0x1530uLL:
            case 0x1534uLL:
            case 0x153CuLL:
            case 0x1540uLL:
            case 0x1544uLL:
            case 0x1548uLL:
            case 0x154CuLL:
            case 0x1550uLL:
            case 0x1554uLL:
            case 0x155CuLL:
            case 0x1560uLL:
            case 0x1564uLL:
            case 0x1568uLL:
            case 0x15BCuLL:
            case 0x15C0uLL:
            case 0x15C4uLL:
            case 0x15C8uLL:
            case 0x15CCuLL:
            case 0x15D4uLL:
            case 0x15D8uLL:
            case 0x15DCuLL:
            case 0x15E0uLL:
            case 0x15E4uLL:
            case 0x15E8uLL:
            case 0x15ECuLL:
            case 0x15F4uLL:
            case 0x15F8uLL:
            case 0x15FCuLL:
            case 0x1600uLL:
            case 0x1608uLL:
            case 0x160CuLL:
            case 0x1610uLL:
            case 0x1614uLL:
            case 0x1618uLL:
            case 0x1620uLL:
            case 0x1624uLL:
            case 0x1628uLL:
            case 0x162CuLL:
            case 0x1630uLL:
            case 0x1634uLL:
            case 0x1638uLL:
            case 0x1640uLL:
            case 0x1644uLL:
            case 0x1648uLL:
            case 0x164CuLL:
            case 0x1654uLL:
            case 0x1658uLL:
            case 0x165CuLL:
            case 0x1660uLL:
            case 0x1664uLL:
            case 0x166CuLL:
            case 0x1670uLL:
            case 0x1674uLL:
            case 0x1678uLL:
            case 0x167CuLL:
            case 0x1680uLL:
            case 0x1684uLL:
            case 0x168CuLL:
            case 0x1690uLL:
            case 0x1694uLL:
            case 0x1698uLL:
            case 0x16A0uLL:
            case 0x16A4uLL:
            case 0x16A8uLL:
            case 0x16ACuLL:
            case 0x16B0uLL:
            case 0x16B8uLL:
            case 0x16BCuLL:
            case 0x16C0uLL:
            case 0x16C4uLL:
            case 0x16C8uLL:
            case 0x16CCuLL:
            case 0x16D0uLL:
            case 0x16D8uLL:
            case 0x16DCuLL:
            case 0x16E0uLL:
            case 0x16E4uLL:
              v26 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v25 + 2 * v21 + v22]];
              *a7 = v26;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            case 0xAuLL:
            case 0xBuLL:
            case 0xCuLL:
            case 0xDuLL:
            case 0xEuLL:
            case 0xFuLL:
            case 0x58uLL:
            case 0x5CuLL:
            case 0x60uLL:
            case 0x64uLL:
            case 0x68uLL:
            case 0x6CuLL:
            case 0x70uLL:
            case 0x74uLL:
            case 0x78uLL:
            case 0x7CuLL:
            case 0x80uLL:
            case 0x84uLL:
            case 0x88uLL:
            case 0x8CuLL:
            case 0x90uLL:
            case 0x94uLL:
            case 0x98uLL:
            case 0x9CuLL:
            case 0xA0uLL:
            case 0xA4uLL:
            case 0xB8uLL:
            case 0xD8uLL:
            case 0xF0uLL:
            case 0x104uLL:
            case 0x124uLL:
            case 0x13CuLL:
            case 0x150uLL:
            case 0x170uLL:
            case 0x188uLL:
            case 0x19CuLL:
            case 0x1BCuLL:
            case 0x1D4uLL:
            case 0x1D8uLL:
            case 0x1DCuLL:
            case 0x1E0uLL:
            case 0x1E4uLL:
            case 0x1E8uLL:
            case 0x1ECuLL:
            case 0x1F0uLL:
            case 0x1F4uLL:
            case 0x1F8uLL:
            case 0x1FCuLL:
            case 0x200uLL:
            case 0x204uLL:
            case 0x208uLL:
            case 0x20CuLL:
            case 0x210uLL:
            case 0x214uLL:
            case 0x218uLL:
            case 0x21CuLL:
            case 0x220uLL:
            case 0x234uLL:
            case 0x254uLL:
            case 0x26CuLL:
            case 0x280uLL:
            case 0x2A0uLL:
            case 0x2B8uLL:
            case 0x2CCuLL:
            case 0x2ECuLL:
            case 0x304uLL:
            case 0x318uLL:
            case 0x338uLL:
            case 0x350uLL:
            case 0x364uLL:
            case 0x384uLL:
            case 0x39CuLL:
            case 0x3B0uLL:
            case 0x3D0uLL:
            case 0x3E8uLL:
            case 0x3FCuLL:
            case 0x41CuLL:
            case 0x434uLL:
            case 0x438uLL:
            case 0x43CuLL:
            case 0x440uLL:
            case 0x444uLL:
            case 0x448uLL:
            case 0x44CuLL:
            case 0x450uLL:
            case 0x454uLL:
            case 0x458uLL:
            case 0x45CuLL:
            case 0x460uLL:
            case 0x464uLL:
            case 0x468uLL:
            case 0x46CuLL:
            case 0x470uLL:
            case 0x474uLL:
            case 0x478uLL:
            case 0x47CuLL:
            case 0x480uLL:
            case 0x494uLL:
            case 0x4B4uLL:
            case 0x4CCuLL:
            case 0x4E0uLL:
            case 0x500uLL:
            case 0x518uLL:
            case 0x52CuLL:
            case 0x54CuLL:
            case 0x564uLL:
            case 0x578uLL:
            case 0x598uLL:
            case 0x5B0uLL:
            case 0x5C4uLL:
            case 0x5E4uLL:
            case 0x5FCuLL:
            case 0x600uLL:
            case 0x604uLL:
            case 0x608uLL:
            case 0x60CuLL:
            case 0x610uLL:
            case 0x614uLL:
            case 0x618uLL:
            case 0x61CuLL:
            case 0x620uLL:
            case 0x624uLL:
            case 0x628uLL:
            case 0x62CuLL:
            case 0x630uLL:
            case 0x634uLL:
            case 0x638uLL:
            case 0x63CuLL:
            case 0x640uLL:
            case 0x644uLL:
            case 0x648uLL:
            case 0x660uLL:
            case 0x680uLL:
            case 0x694uLL:
            case 0x6ACuLL:
            case 0x6CCuLL:
            case 0x6E0uLL:
            case 0x6F8uLL:
            case 0x718uLL:
            case 0x72CuLL:
            case 0x744uLL:
            case 0x764uLL:
            case 0x778uLL:
            case 0x790uLL:
            case 0x7B0uLL:
            case 0x7C4uLL:
            case 0x7C8uLL:
            case 0x7CCuLL:
            case 0x7D0uLL:
            case 0x7D4uLL:
            case 0x7D8uLL:
            case 0x7DCuLL:
            case 0x7E0uLL:
            case 0x7E4uLL:
            case 0x7E8uLL:
            case 0x7ECuLL:
            case 0x7F0uLL:
            case 0x7F4uLL:
            case 0x7F8uLL:
            case 0x7FCuLL:
            case 0x800uLL:
            case 0x804uLL:
            case 0x808uLL:
            case 0x80CuLL:
            case 0x810uLL:
            case 0x828uLL:
            case 0x848uLL:
            case 0x85CuLL:
            case 0x874uLL:
            case 0x894uLL:
            case 0x8A8uLL:
            case 0x8C0uLL:
            case 0x8E0uLL:
            case 0x8F4uLL:
            case 0x90CuLL:
            case 0x92CuLL:
            case 0x940uLL:
            case 0x958uLL:
            case 0x978uLL:
            case 0x98CuLL:
            case 0x9A4uLL:
            case 0x9C4uLL:
            case 0x9D8uLL:
            case 0x9F0uLL:
            case 0xA10uLL:
            case 0xA24uLL:
            case 0xA28uLL:
            case 0xA2CuLL:
            case 0xA30uLL:
            case 0xA34uLL:
            case 0xA38uLL:
            case 0xA3CuLL:
            case 0xA40uLL:
            case 0xA44uLL:
            case 0xA48uLL:
            case 0xA4CuLL:
            case 0xA50uLL:
            case 0xA54uLL:
            case 0xA58uLL:
            case 0xA5CuLL:
            case 0xA60uLL:
            case 0xA64uLL:
            case 0xA68uLL:
            case 0xA6CuLL:
            case 0xA70uLL:
            case 0xA88uLL:
            case 0xAA8uLL:
            case 0xABCuLL:
            case 0xAD4uLL:
            case 0xAF4uLL:
            case 0xB08uLL:
            case 0xB20uLL:
            case 0xB40uLL:
            case 0xB54uLL:
            case 0xB6CuLL:
            case 0xB8CuLL:
            case 0xBA0uLL:
            case 0xBA4uLL:
            case 0xBA8uLL:
            case 0xBACuLL:
            case 0xBB0uLL:
            case 0xBB4uLL:
            case 0xBB8uLL:
            case 0xBBCuLL:
            case 0xBC0uLL:
            case 0xBC4uLL:
            case 0xBC8uLL:
            case 0xBCCuLL:
            case 0xBD0uLL:
            case 0xBD4uLL:
            case 0xBD8uLL:
            case 0xBDCuLL:
            case 0xBE0uLL:
            case 0xBE4uLL:
            case 0xBE8uLL:
            case 0xBECuLL:
            case 0xC00uLL:
            case 0xC20uLL:
            case 0xC38uLL:
            case 0xC4CuLL:
            case 0xC6CuLL:
            case 0xC84uLL:
            case 0xC98uLL:
            case 0xCB8uLL:
            case 0xCD0uLL:
            case 0xCE4uLL:
            case 0xD04uLL:
            case 0xD1CuLL:
            case 0xD20uLL:
            case 0xD24uLL:
            case 0xD28uLL:
            case 0xD2CuLL:
            case 0xD30uLL:
            case 0xD34uLL:
            case 0xD38uLL:
            case 0xD3CuLL:
            case 0xD40uLL:
            case 0xD44uLL:
            case 0xD48uLL:
            case 0xD4CuLL:
            case 0xD50uLL:
            case 0xD54uLL:
            case 0xD58uLL:
            case 0xD5CuLL:
            case 0xD60uLL:
            case 0xD64uLL:
            case 0xD68uLL:
            case 0xD7CuLL:
            case 0xD9CuLL:
            case 0xDB4uLL:
            case 0xDC8uLL:
            case 0xDE8uLL:
            case 0xE00uLL:
            case 0xE14uLL:
            case 0xE34uLL:
            case 0xE4CuLL:
            case 0xE60uLL:
            case 0xE80uLL:
            case 0xE98uLL:
            case 0xEACuLL:
            case 0xECCuLL:
            case 0xEE4uLL:
            case 0xEF8uLL:
            case 0xF18uLL:
            case 0xF30uLL:
            case 0xF44uLL:
            case 0xF64uLL:
            case 0xF7CuLL:
            case 0xF80uLL:
            case 0xF84uLL:
            case 0xF88uLL:
            case 0xF8CuLL:
            case 0xF90uLL:
            case 0xF94uLL:
            case 0xF98uLL:
            case 0xF9CuLL:
            case 0xFA0uLL:
            case 0xFA4uLL:
            case 0xFA8uLL:
            case 0xFACuLL:
            case 0xFB0uLL:
            case 0xFB4uLL:
            case 0xFB8uLL:
            case 0xFBCuLL:
            case 0xFC0uLL:
            case 0xFC4uLL:
            case 0xFC8uLL:
            case 0xFDCuLL:
            case 0xFFCuLL:
            case 0x1014uLL:
            case 0x1028uLL:
            case 0x1048uLL:
            case 0x1060uLL:
            case 0x1074uLL:
            case 0x1094uLL:
            case 0x10ACuLL:
            case 0x10C0uLL:
            case 0x10E0uLL:
            case 0x10F8uLL:
            case 0x110CuLL:
            case 0x112CuLL:
            case 0x1144uLL:
            case 0x1148uLL:
            case 0x114CuLL:
            case 0x1150uLL:
            case 0x1154uLL:
            case 0x1158uLL:
            case 0x115CuLL:
            case 0x1160uLL:
            case 0x1164uLL:
            case 0x1168uLL:
            case 0x116CuLL:
            case 0x1170uLL:
            case 0x1174uLL:
            case 0x1178uLL:
            case 0x117CuLL:
            case 0x1180uLL:
            case 0x1184uLL:
            case 0x1188uLL:
            case 0x118CuLL:
            case 0x1190uLL:
            case 0x11A8uLL:
            case 0x11C8uLL:
            case 0x11DCuLL:
            case 0x11F4uLL:
            case 0x1214uLL:
            case 0x1228uLL:
            case 0x1240uLL:
            case 0x1260uLL:
            case 0x1274uLL:
            case 0x128CuLL:
            case 0x12ACuLL:
            case 0x12C0uLL:
            case 0x12D8uLL:
            case 0x12F8uLL:
            case 0x130CuLL:
            case 0x1310uLL:
            case 0x1314uLL:
            case 0x1318uLL:
            case 0x131CuLL:
            case 0x1320uLL:
            case 0x1324uLL:
            case 0x1328uLL:
            case 0x132CuLL:
            case 0x1330uLL:
            case 0x1334uLL:
            case 0x1338uLL:
            case 0x133CuLL:
            case 0x1340uLL:
            case 0x1344uLL:
            case 0x1348uLL:
            case 0x134CuLL:
            case 0x1350uLL:
            case 0x1354uLL:
            case 0x1358uLL:
            case 0x1370uLL:
            case 0x1390uLL:
            case 0x13A4uLL:
            case 0x13BCuLL:
            case 0x13DCuLL:
            case 0x13F0uLL:
            case 0x1408uLL:
            case 0x1428uLL:
            case 0x143CuLL:
            case 0x1454uLL:
            case 0x1474uLL:
            case 0x1488uLL:
            case 0x14A0uLL:
            case 0x14C0uLL:
            case 0x14D4uLL:
            case 0x14ECuLL:
            case 0x150CuLL:
            case 0x1520uLL:
            case 0x1538uLL:
            case 0x1558uLL:
            case 0x156CuLL:
            case 0x1570uLL:
            case 0x1574uLL:
            case 0x1578uLL:
            case 0x157CuLL:
            case 0x1580uLL:
            case 0x1584uLL:
            case 0x1588uLL:
            case 0x158CuLL:
            case 0x1590uLL:
            case 0x1594uLL:
            case 0x1598uLL:
            case 0x159CuLL:
            case 0x15A0uLL:
            case 0x15A4uLL:
            case 0x15A8uLL:
            case 0x15ACuLL:
            case 0x15B0uLL:
            case 0x15B4uLL:
            case 0x15B8uLL:
            case 0x15D0uLL:
            case 0x15F0uLL:
            case 0x1604uLL:
            case 0x161CuLL:
            case 0x163CuLL:
            case 0x1650uLL:
            case 0x1668uLL:
            case 0x1688uLL:
            case 0x169CuLL:
            case 0x16B4uLL:
            case 0x16D4uLL:
              goto LABEL_19;
            case 0x14uLL:
              v26 = 9;
              *a7 = 9;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            case 0x15uLL:
              v26 = 10;
              *a7 = 10;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
            default:
              v26 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v25 + 2 * v21 + v22]];
              *a7 = v26;
              if (!v16)
                goto LABEL_32;
              goto LABEL_20;
          }
        }
        v26 = v25[145];
        if (((*(_WORD *)(v25 + 167) & 0x80) != 0 || (char)v25[16] >= 1) && !v25[144])
        {
          v34 = *v25;
          v26 = v25[((int)((mi_size_wide_4[v34] - 1) & v23) >> av1_get_txb_size_index_tw_w_log2_table[v34])
                  + 146
                  + (((mi_size_high_3[v34] - 1) & v112) >> av1_get_txb_size_index_tw_h_log2_table[v34] << av1_get_txb_size_index_stride_log2_table[v34])];
          *a7 = v26;
          if (!v16)
          {
LABEL_32:
            v31 = 64;
            v30 = v26;
            v32 = v106;
            goto LABEL_56;
          }
        }
        else
        {
LABEL_19:
          *a7 = v26;
          if (!v16)
            goto LABEL_32;
        }
LABEL_20:
        v27 = v24[v113];
        if (!v18)
          goto LABEL_23;
      }
      if (*(_DWORD *)(v18 + 4 * (*(_WORD *)(v27 + 167) & 7) + 10692))
      {
        v28 = 0;
        goto LABEL_41;
      }
LABEL_23:
      if (v15)
      {
        v29 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v27 + 2 * v21 + v117]];
        v28 = 3;
        switch(v29)
        {
          case 4:
          case 11:
          case 12:
            break;
          case 17:
            v28 = 9;
            break;
          case 18:
            v28 = 10;
            break;
          default:
            v28 = v29;
            break;
        }
      }
      else
      {
        v28 = v27[145];
        if (((*(_WORD *)(v27 + 167) & 0x80) != 0 || (char)v27[16] >= 1) && !v27[144])
        {
          v33 = *v27;
          v28 = v27[((int)((mi_size_wide_4[v33] - 1) & v23) >> av1_get_txb_size_index_tw_w_log2_table[v33])
                  + 146
                  + (((mi_size_high_3[v33] - 1) & v105) >> av1_get_txb_size_index_tw_h_log2_table[v33] << av1_get_txb_size_index_stride_log2_table[v33])];
        }
      }
LABEL_41:
      v31 = tx_size_wide_2[v28];
      filter_level = av1_get_filter_level(a1, v115, 1u, v15, v25);
      if (filter_level)
      {
        if (v27 == v25)
          goto LABEL_50;
      }
      else
      {
        filter_level = av1_get_filter_level(a1, v115, 1u, v15, v27);
        if (v27 == v25)
        {
LABEL_50:
          v36 = v25[144];
          if (v36)
            v36 = (*(_WORD *)(v25 + 167) & 0x80) != 0 || (char)v25[16] > 0;
          goto LABEL_44;
        }
      }
      v36 = 0;
LABEL_44:
      if (v27 != v25)
        v36 = 0;
      if ((v36 & 1) != 0)
      {
        v30 = v26;
        v19 = a1;
        v32 = v106;
        v21 = v114;
        v22 = v117;
      }
      else
      {
        v19 = a1;
        v32 = v106;
        v22 = v117;
        if (filter_level)
        {
          *a6 = horz_filter_length_chroma[19 * v26 + v28];
          *((_QWORD *)a6 + 1) = v115 + 48 * filter_level;
          v30 = *a7;
        }
        else
        {
          v30 = v26;
        }
        v21 = v114;
      }
LABEL_56:
      v37 = tx_size_wide_2[v26];
      if (v31 < v37)
        v37 = v31;
      v38 = (int)tx_size_high_unit[v30];
      v39 = ((_DWORD)v38 << v22) + v16;
      if (v39 < v107)
      {
        v40 = &a7[v38];
        v41 = &a6[16 * v38];
        do
        {
          *v41 = 0;
          v43 = (unsigned __int8 **)(*(_QWORD *)(v19 + 568)
                                   + 8 * *(_DWORD *)(v19 + 580) * (v39 | v22)
                                   + 8 * v23);
          v44 = *v43;
          if (v18 && *(_DWORD *)(v18 + 4 * (*(_WORD *)(v44 + 167) & 7) + 10692))
          {
            v45 = 0;
            *v40 = 0;
            v46 = v43[v113];
            v47 = *(_WORD *)(v44 + 167);
            v48 = v47 & 7;
            if (!*(_DWORD *)(v32 + 5384))
              goto LABEL_66;
          }
          else
          {
            if (v15)
            {
              v52 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v44 + 2 * v21 + v22]];
              v45 = 3;
              switch((unint64_t)av1_ss_size_lookup[4 * *v44 + 2 * v21 + v22])
              {
                case 1uLL:
                case 2uLL:
                case 4uLL:
                case 5uLL:
                case 7uLL:
                case 8uLL:
                case 0x10uLL:
                case 0x11uLL:
                case 0x12uLL:
                case 0x13uLL:
                case 0xA8uLL:
                case 0xACuLL:
                case 0xB0uLL:
                case 0xB4uLL:
                case 0xBCuLL:
                case 0xC0uLL:
                case 0xC4uLL:
                case 0xC8uLL:
                case 0xCCuLL:
                case 0xD0uLL:
                case 0xD4uLL:
                case 0xDCuLL:
                case 0xE0uLL:
                case 0xE4uLL:
                case 0xE8uLL:
                case 0xECuLL:
                case 0xF4uLL:
                case 0xF8uLL:
                case 0xFCuLL:
                case 0x100uLL:
                case 0x108uLL:
                case 0x10CuLL:
                case 0x110uLL:
                case 0x114uLL:
                case 0x118uLL:
                case 0x11CuLL:
                case 0x120uLL:
                case 0x128uLL:
                case 0x12CuLL:
                case 0x130uLL:
                case 0x134uLL:
                case 0x138uLL:
                case 0x140uLL:
                case 0x144uLL:
                case 0x148uLL:
                case 0x14CuLL:
                case 0x154uLL:
                case 0x158uLL:
                case 0x15CuLL:
                case 0x160uLL:
                case 0x164uLL:
                case 0x168uLL:
                case 0x16CuLL:
                case 0x174uLL:
                case 0x178uLL:
                case 0x17CuLL:
                case 0x180uLL:
                case 0x184uLL:
                case 0x18CuLL:
                case 0x190uLL:
                case 0x194uLL:
                case 0x198uLL:
                case 0x1A0uLL:
                case 0x1A4uLL:
                case 0x1A8uLL:
                case 0x1ACuLL:
                case 0x1B0uLL:
                case 0x1B4uLL:
                case 0x1B8uLL:
                case 0x1C0uLL:
                case 0x1C4uLL:
                case 0x1C8uLL:
                case 0x1CCuLL:
                case 0x1D0uLL:
                case 0x224uLL:
                case 0x228uLL:
                case 0x22CuLL:
                case 0x230uLL:
                case 0x238uLL:
                case 0x23CuLL:
                case 0x240uLL:
                case 0x244uLL:
                case 0x248uLL:
                case 0x24CuLL:
                case 0x250uLL:
                case 0x258uLL:
                case 0x25CuLL:
                case 0x260uLL:
                case 0x264uLL:
                case 0x268uLL:
                case 0x270uLL:
                case 0x274uLL:
                case 0x278uLL:
                case 0x27CuLL:
                case 0x284uLL:
                case 0x288uLL:
                case 0x28CuLL:
                case 0x290uLL:
                case 0x294uLL:
                case 0x298uLL:
                case 0x29CuLL:
                case 0x2A4uLL:
                case 0x2A8uLL:
                case 0x2ACuLL:
                case 0x2B0uLL:
                case 0x2B4uLL:
                case 0x2BCuLL:
                case 0x2C0uLL:
                case 0x2C4uLL:
                case 0x2C8uLL:
                case 0x2D0uLL:
                case 0x2D4uLL:
                case 0x2D8uLL:
                case 0x2DCuLL:
                case 0x2E0uLL:
                case 0x2E4uLL:
                case 0x2E8uLL:
                case 0x2F0uLL:
                case 0x2F4uLL:
                case 0x2F8uLL:
                case 0x2FCuLL:
                case 0x300uLL:
                case 0x308uLL:
                case 0x30CuLL:
                case 0x310uLL:
                case 0x314uLL:
                case 0x31CuLL:
                case 0x320uLL:
                case 0x324uLL:
                case 0x328uLL:
                case 0x32CuLL:
                case 0x330uLL:
                case 0x334uLL:
                case 0x33CuLL:
                case 0x340uLL:
                case 0x344uLL:
                case 0x348uLL:
                case 0x34CuLL:
                case 0x354uLL:
                case 0x358uLL:
                case 0x35CuLL:
                case 0x360uLL:
                case 0x368uLL:
                case 0x36CuLL:
                case 0x370uLL:
                case 0x374uLL:
                case 0x378uLL:
                case 0x37CuLL:
                case 0x380uLL:
                case 0x388uLL:
                case 0x38CuLL:
                case 0x390uLL:
                case 0x394uLL:
                case 0x398uLL:
                case 0x3A0uLL:
                case 0x3A4uLL:
                case 0x3A8uLL:
                case 0x3ACuLL:
                case 0x3B4uLL:
                case 0x3B8uLL:
                case 0x3BCuLL:
                case 0x3C0uLL:
                case 0x3C4uLL:
                case 0x3C8uLL:
                case 0x3CCuLL:
                case 0x3D4uLL:
                case 0x3D8uLL:
                case 0x3DCuLL:
                case 0x3E0uLL:
                case 0x3E4uLL:
                case 0x3ECuLL:
                case 0x3F0uLL:
                case 0x3F4uLL:
                case 0x3F8uLL:
                case 0x400uLL:
                case 0x404uLL:
                case 0x408uLL:
                case 0x40CuLL:
                case 0x410uLL:
                case 0x414uLL:
                case 0x418uLL:
                case 0x420uLL:
                case 0x424uLL:
                case 0x428uLL:
                case 0x42CuLL:
                case 0x430uLL:
                case 0x484uLL:
                case 0x488uLL:
                case 0x48CuLL:
                case 0x490uLL:
                case 0x498uLL:
                case 0x49CuLL:
                case 0x4A0uLL:
                case 0x4A4uLL:
                case 0x4A8uLL:
                case 0x4ACuLL:
                case 0x4B0uLL:
                case 0x4B8uLL:
                case 0x4BCuLL:
                case 0x4C0uLL:
                case 0x4C4uLL:
                case 0x4C8uLL:
                case 0x4D0uLL:
                case 0x4D4uLL:
                case 0x4D8uLL:
                case 0x4DCuLL:
                case 0x4E4uLL:
                case 0x4E8uLL:
                case 0x4ECuLL:
                case 0x4F0uLL:
                case 0x4F4uLL:
                case 0x4F8uLL:
                case 0x4FCuLL:
                case 0x504uLL:
                case 0x508uLL:
                case 0x50CuLL:
                case 0x510uLL:
                case 0x514uLL:
                case 0x51CuLL:
                case 0x520uLL:
                case 0x524uLL:
                case 0x528uLL:
                case 0x530uLL:
                case 0x534uLL:
                case 0x538uLL:
                case 0x53CuLL:
                case 0x540uLL:
                case 0x544uLL:
                case 0x548uLL:
                case 0x550uLL:
                case 0x554uLL:
                case 0x558uLL:
                case 0x55CuLL:
                case 0x560uLL:
                case 0x568uLL:
                case 0x56CuLL:
                case 0x570uLL:
                case 0x574uLL:
                case 0x57CuLL:
                case 0x580uLL:
                case 0x584uLL:
                case 0x588uLL:
                case 0x58CuLL:
                case 0x590uLL:
                case 0x594uLL:
                case 0x59CuLL:
                case 0x5A0uLL:
                case 0x5A4uLL:
                case 0x5A8uLL:
                case 0x5ACuLL:
                case 0x5B4uLL:
                case 0x5B8uLL:
                case 0x5BCuLL:
                case 0x5C0uLL:
                case 0x5C8uLL:
                case 0x5CCuLL:
                case 0x5D0uLL:
                case 0x5D4uLL:
                case 0x5D8uLL:
                case 0x5DCuLL:
                case 0x5E0uLL:
                case 0x5E8uLL:
                case 0x5ECuLL:
                case 0x5F0uLL:
                case 0x5F4uLL:
                case 0x5F8uLL:
                case 0x64CuLL:
                case 0x650uLL:
                case 0x654uLL:
                case 0x658uLL:
                case 0x65CuLL:
                case 0x664uLL:
                case 0x668uLL:
                case 0x66CuLL:
                case 0x670uLL:
                case 0x674uLL:
                case 0x678uLL:
                case 0x67CuLL:
                case 0x684uLL:
                case 0x688uLL:
                case 0x68CuLL:
                case 0x690uLL:
                case 0x698uLL:
                case 0x69CuLL:
                case 0x6A0uLL:
                case 0x6A4uLL:
                case 0x6A8uLL:
                case 0x6B0uLL:
                case 0x6B4uLL:
                case 0x6B8uLL:
                case 0x6BCuLL:
                case 0x6C0uLL:
                case 0x6C4uLL:
                case 0x6C8uLL:
                case 0x6D0uLL:
                case 0x6D4uLL:
                case 0x6D8uLL:
                case 0x6DCuLL:
                case 0x6E4uLL:
                case 0x6E8uLL:
                case 0x6ECuLL:
                case 0x6F0uLL:
                case 0x6F4uLL:
                case 0x6FCuLL:
                case 0x700uLL:
                case 0x704uLL:
                case 0x708uLL:
                case 0x70CuLL:
                case 0x710uLL:
                case 0x714uLL:
                case 0x71CuLL:
                case 0x720uLL:
                case 0x724uLL:
                case 0x728uLL:
                case 0x730uLL:
                case 0x734uLL:
                case 0x738uLL:
                case 0x73CuLL:
                case 0x740uLL:
                case 0x748uLL:
                case 0x74CuLL:
                case 0x750uLL:
                case 0x754uLL:
                case 0x758uLL:
                case 0x75CuLL:
                case 0x760uLL:
                case 0x768uLL:
                case 0x76CuLL:
                case 0x770uLL:
                case 0x774uLL:
                case 0x77CuLL:
                case 0x780uLL:
                case 0x784uLL:
                case 0x788uLL:
                case 0x78CuLL:
                case 0x794uLL:
                case 0x798uLL:
                case 0x79CuLL:
                case 0x7A0uLL:
                case 0x7A4uLL:
                case 0x7A8uLL:
                case 0x7ACuLL:
                case 0x7B4uLL:
                case 0x7B8uLL:
                case 0x7BCuLL:
                case 0x7C0uLL:
                case 0x814uLL:
                case 0x818uLL:
                case 0x81CuLL:
                case 0x820uLL:
                case 0x824uLL:
                case 0x82CuLL:
                case 0x830uLL:
                case 0x834uLL:
                case 0x838uLL:
                case 0x83CuLL:
                case 0x840uLL:
                case 0x844uLL:
                case 0x84CuLL:
                case 0x850uLL:
                case 0x854uLL:
                case 0x858uLL:
                case 0x860uLL:
                case 0x864uLL:
                case 0x868uLL:
                case 0x86CuLL:
                case 0x870uLL:
                case 0x878uLL:
                case 0x87CuLL:
                case 0x880uLL:
                case 0x884uLL:
                case 0x888uLL:
                case 0x88CuLL:
                case 0x890uLL:
                case 0x898uLL:
                case 0x89CuLL:
                case 0x8A0uLL:
                case 0x8A4uLL:
                case 0x8ACuLL:
                case 0x8B0uLL:
                case 0x8B4uLL:
                case 0x8B8uLL:
                case 0x8BCuLL:
                case 0x8C4uLL:
                case 0x8C8uLL:
                case 0x8CCuLL:
                case 0x8D0uLL:
                case 0x8D4uLL:
                case 0x8D8uLL:
                case 0x8DCuLL:
                case 0x8E4uLL:
                case 0x8E8uLL:
                case 0x8ECuLL:
                case 0x8F0uLL:
                case 0x8F8uLL:
                case 0x8FCuLL:
                case 0x900uLL:
                case 0x904uLL:
                case 0x908uLL:
                case 0x910uLL:
                case 0x914uLL:
                case 0x918uLL:
                case 0x91CuLL:
                case 0x920uLL:
                case 0x924uLL:
                case 0x928uLL:
                case 0x930uLL:
                case 0x934uLL:
                case 0x938uLL:
                case 0x93CuLL:
                case 0x944uLL:
                case 0x948uLL:
                case 0x94CuLL:
                case 0x950uLL:
                case 0x954uLL:
                case 0x95CuLL:
                case 0x960uLL:
                case 0x964uLL:
                case 0x968uLL:
                case 0x96CuLL:
                case 0x970uLL:
                case 0x974uLL:
                case 0x97CuLL:
                case 0x980uLL:
                case 0x984uLL:
                case 0x988uLL:
                case 0x990uLL:
                case 0x994uLL:
                case 0x998uLL:
                case 0x99CuLL:
                case 0x9A0uLL:
                case 0x9A8uLL:
                case 0x9ACuLL:
                case 0x9B0uLL:
                case 0x9B4uLL:
                case 0x9B8uLL:
                case 0x9BCuLL:
                case 0x9C0uLL:
                case 0x9C8uLL:
                case 0x9CCuLL:
                case 0x9D0uLL:
                case 0x9D4uLL:
                case 0x9DCuLL:
                case 0x9E0uLL:
                case 0x9E4uLL:
                case 0x9E8uLL:
                case 0x9ECuLL:
                case 0x9F4uLL:
                case 0x9F8uLL:
                case 0x9FCuLL:
                case 0xA00uLL:
                case 0xA04uLL:
                case 0xA08uLL:
                case 0xA0CuLL:
                case 0xA14uLL:
                case 0xA18uLL:
                case 0xA1CuLL:
                case 0xA20uLL:
                case 0xA74uLL:
                case 0xA78uLL:
                case 0xA7CuLL:
                case 0xA80uLL:
                case 0xA84uLL:
                case 0xA8CuLL:
                case 0xA90uLL:
                case 0xA94uLL:
                case 0xA98uLL:
                case 0xA9CuLL:
                case 0xAA0uLL:
                case 0xAA4uLL:
                case 0xAACuLL:
                case 0xAB0uLL:
                case 0xAB4uLL:
                case 0xAB8uLL:
                case 0xAC0uLL:
                case 0xAC4uLL:
                case 0xAC8uLL:
                case 0xACCuLL:
                case 0xAD0uLL:
                case 0xAD8uLL:
                case 0xADCuLL:
                case 0xAE0uLL:
                case 0xAE4uLL:
                case 0xAE8uLL:
                case 0xAECuLL:
                case 0xAF0uLL:
                case 0xAF8uLL:
                case 0xAFCuLL:
                case 0xB00uLL:
                case 0xB04uLL:
                case 0xB0CuLL:
                case 0xB10uLL:
                case 0xB14uLL:
                case 0xB18uLL:
                case 0xB1CuLL:
                case 0xB24uLL:
                case 0xB28uLL:
                case 0xB2CuLL:
                case 0xB30uLL:
                case 0xB34uLL:
                case 0xB38uLL:
                case 0xB3CuLL:
                case 0xB44uLL:
                case 0xB48uLL:
                case 0xB4CuLL:
                case 0xB50uLL:
                case 0xB58uLL:
                case 0xB5CuLL:
                case 0xB60uLL:
                case 0xB64uLL:
                case 0xB68uLL:
                case 0xB70uLL:
                case 0xB74uLL:
                case 0xB78uLL:
                case 0xB7CuLL:
                case 0xB80uLL:
                case 0xB84uLL:
                case 0xB88uLL:
                case 0xB90uLL:
                case 0xB94uLL:
                case 0xB98uLL:
                case 0xB9CuLL:
                case 0xBF0uLL:
                case 0xBF4uLL:
                case 0xBF8uLL:
                case 0xBFCuLL:
                case 0xC04uLL:
                case 0xC08uLL:
                case 0xC0CuLL:
                case 0xC10uLL:
                case 0xC14uLL:
                case 0xC18uLL:
                case 0xC1CuLL:
                case 0xC24uLL:
                case 0xC28uLL:
                case 0xC2CuLL:
                case 0xC30uLL:
                case 0xC34uLL:
                case 0xC3CuLL:
                case 0xC40uLL:
                case 0xC44uLL:
                case 0xC48uLL:
                case 0xC50uLL:
                case 0xC54uLL:
                case 0xC58uLL:
                case 0xC5CuLL:
                case 0xC60uLL:
                case 0xC64uLL:
                case 0xC68uLL:
                case 0xC70uLL:
                case 0xC74uLL:
                case 0xC78uLL:
                case 0xC7CuLL:
                case 0xC80uLL:
                case 0xC88uLL:
                case 0xC8CuLL:
                case 0xC90uLL:
                case 0xC94uLL:
                case 0xC9CuLL:
                case 0xCA0uLL:
                case 0xCA4uLL:
                case 0xCA8uLL:
                case 0xCACuLL:
                case 0xCB0uLL:
                case 0xCB4uLL:
                case 0xCBCuLL:
                case 0xCC0uLL:
                case 0xCC4uLL:
                case 0xCC8uLL:
                case 0xCCCuLL:
                case 0xCD4uLL:
                case 0xCD8uLL:
                case 0xCDCuLL:
                case 0xCE0uLL:
                case 0xCE8uLL:
                case 0xCECuLL:
                case 0xCF0uLL:
                case 0xCF4uLL:
                case 0xCF8uLL:
                case 0xCFCuLL:
                case 0xD00uLL:
                case 0xD08uLL:
                case 0xD0CuLL:
                case 0xD10uLL:
                case 0xD14uLL:
                case 0xD18uLL:
                case 0xD6CuLL:
                case 0xD70uLL:
                case 0xD74uLL:
                case 0xD78uLL:
                case 0xD80uLL:
                case 0xD84uLL:
                case 0xD88uLL:
                case 0xD8CuLL:
                case 0xD90uLL:
                case 0xD94uLL:
                case 0xD98uLL:
                case 0xDA0uLL:
                case 0xDA4uLL:
                case 0xDA8uLL:
                case 0xDACuLL:
                case 0xDB0uLL:
                case 0xDB8uLL:
                case 0xDBCuLL:
                case 0xDC0uLL:
                case 0xDC4uLL:
                case 0xDCCuLL:
                case 0xDD0uLL:
                case 0xDD4uLL:
                case 0xDD8uLL:
                case 0xDDCuLL:
                case 0xDE0uLL:
                case 0xDE4uLL:
                case 0xDECuLL:
                case 0xDF0uLL:
                case 0xDF4uLL:
                case 0xDF8uLL:
                case 0xDFCuLL:
                case 0xE04uLL:
                case 0xE08uLL:
                case 0xE0CuLL:
                case 0xE10uLL:
                case 0xE18uLL:
                case 0xE1CuLL:
                case 0xE20uLL:
                case 0xE24uLL:
                case 0xE28uLL:
                case 0xE2CuLL:
                case 0xE30uLL:
                case 0xE38uLL:
                case 0xE3CuLL:
                case 0xE40uLL:
                case 0xE44uLL:
                case 0xE48uLL:
                case 0xE50uLL:
                case 0xE54uLL:
                case 0xE58uLL:
                case 0xE5CuLL:
                case 0xE64uLL:
                case 0xE68uLL:
                case 0xE6CuLL:
                case 0xE70uLL:
                case 0xE74uLL:
                case 0xE78uLL:
                case 0xE7CuLL:
                case 0xE84uLL:
                case 0xE88uLL:
                case 0xE8CuLL:
                case 0xE90uLL:
                case 0xE94uLL:
                case 0xE9CuLL:
                case 0xEA0uLL:
                case 0xEA4uLL:
                case 0xEA8uLL:
                case 0xEB0uLL:
                case 0xEB4uLL:
                case 0xEB8uLL:
                case 0xEBCuLL:
                case 0xEC0uLL:
                case 0xEC4uLL:
                case 0xEC8uLL:
                case 0xED0uLL:
                case 0xED4uLL:
                case 0xED8uLL:
                case 0xEDCuLL:
                case 0xEE0uLL:
                case 0xEE8uLL:
                case 0xEECuLL:
                case 0xEF0uLL:
                case 0xEF4uLL:
                case 0xEFCuLL:
                case 0xF00uLL:
                case 0xF04uLL:
                case 0xF08uLL:
                case 0xF0CuLL:
                case 0xF10uLL:
                case 0xF14uLL:
                case 0xF1CuLL:
                case 0xF20uLL:
                case 0xF24uLL:
                case 0xF28uLL:
                case 0xF2CuLL:
                case 0xF34uLL:
                case 0xF38uLL:
                case 0xF3CuLL:
                case 0xF40uLL:
                case 0xF48uLL:
                case 0xF4CuLL:
                case 0xF50uLL:
                case 0xF54uLL:
                case 0xF58uLL:
                case 0xF5CuLL:
                case 0xF60uLL:
                case 0xF68uLL:
                case 0xF6CuLL:
                case 0xF70uLL:
                case 0xF74uLL:
                case 0xF78uLL:
                case 0xFCCuLL:
                case 0xFD0uLL:
                case 0xFD4uLL:
                case 0xFD8uLL:
                case 0xFE0uLL:
                case 0xFE4uLL:
                case 0xFE8uLL:
                case 0xFECuLL:
                case 0xFF0uLL:
                case 0xFF4uLL:
                case 0xFF8uLL:
                case 0x1000uLL:
                case 0x1004uLL:
                case 0x1008uLL:
                case 0x100CuLL:
                case 0x1010uLL:
                case 0x1018uLL:
                case 0x101CuLL:
                case 0x1020uLL:
                case 0x1024uLL:
                case 0x102CuLL:
                case 0x1030uLL:
                case 0x1034uLL:
                case 0x1038uLL:
                case 0x103CuLL:
                case 0x1040uLL:
                case 0x1044uLL:
                case 0x104CuLL:
                case 0x1050uLL:
                case 0x1054uLL:
                case 0x1058uLL:
                case 0x105CuLL:
                case 0x1064uLL:
                case 0x1068uLL:
                case 0x106CuLL:
                case 0x1070uLL:
                case 0x1078uLL:
                case 0x107CuLL:
                case 0x1080uLL:
                case 0x1084uLL:
                case 0x1088uLL:
                case 0x108CuLL:
                case 0x1090uLL:
                case 0x1098uLL:
                case 0x109CuLL:
                case 0x10A0uLL:
                case 0x10A4uLL:
                case 0x10A8uLL:
                case 0x10B0uLL:
                case 0x10B4uLL:
                case 0x10B8uLL:
                case 0x10BCuLL:
                case 0x10C4uLL:
                case 0x10C8uLL:
                case 0x10CCuLL:
                case 0x10D0uLL:
                case 0x10D4uLL:
                case 0x10D8uLL:
                case 0x10DCuLL:
                case 0x10E4uLL:
                case 0x10E8uLL:
                case 0x10ECuLL:
                case 0x10F0uLL:
                case 0x10F4uLL:
                case 0x10FCuLL:
                case 0x1100uLL:
                case 0x1104uLL:
                case 0x1108uLL:
                case 0x1110uLL:
                case 0x1114uLL:
                case 0x1118uLL:
                case 0x111CuLL:
                case 0x1120uLL:
                case 0x1124uLL:
                case 0x1128uLL:
                case 0x1130uLL:
                case 0x1134uLL:
                case 0x1138uLL:
                case 0x113CuLL:
                case 0x1140uLL:
                case 0x1194uLL:
                case 0x1198uLL:
                case 0x119CuLL:
                case 0x11A0uLL:
                case 0x11A4uLL:
                case 0x11ACuLL:
                case 0x11B0uLL:
                case 0x11B4uLL:
                case 0x11B8uLL:
                case 0x11BCuLL:
                case 0x11C0uLL:
                case 0x11C4uLL:
                case 0x11CCuLL:
                case 0x11D0uLL:
                case 0x11D4uLL:
                case 0x11D8uLL:
                case 0x11E0uLL:
                case 0x11E4uLL:
                case 0x11E8uLL:
                case 0x11ECuLL:
                case 0x11F0uLL:
                case 0x11F8uLL:
                case 0x11FCuLL:
                case 0x1200uLL:
                case 0x1204uLL:
                case 0x1208uLL:
                case 0x120CuLL:
                case 0x1210uLL:
                case 0x1218uLL:
                case 0x121CuLL:
                case 0x1220uLL:
                case 0x1224uLL:
                case 0x122CuLL:
                case 0x1230uLL:
                case 0x1234uLL:
                case 0x1238uLL:
                case 0x123CuLL:
                case 0x1244uLL:
                case 0x1248uLL:
                case 0x124CuLL:
                case 0x1250uLL:
                case 0x1254uLL:
                case 0x1258uLL:
                case 0x125CuLL:
                case 0x1264uLL:
                case 0x1268uLL:
                case 0x126CuLL:
                case 0x1270uLL:
                case 0x1278uLL:
                case 0x127CuLL:
                case 0x1280uLL:
                case 0x1284uLL:
                case 0x1288uLL:
                case 0x1290uLL:
                case 0x1294uLL:
                case 0x1298uLL:
                case 0x129CuLL:
                case 0x12A0uLL:
                case 0x12A4uLL:
                case 0x12A8uLL:
                case 0x12B0uLL:
                case 0x12B4uLL:
                case 0x12B8uLL:
                case 0x12BCuLL:
                case 0x12C4uLL:
                case 0x12C8uLL:
                case 0x12CCuLL:
                case 0x12D0uLL:
                case 0x12D4uLL:
                case 0x12DCuLL:
                case 0x12E0uLL:
                case 0x12E4uLL:
                case 0x12E8uLL:
                case 0x12ECuLL:
                case 0x12F0uLL:
                case 0x12F4uLL:
                case 0x12FCuLL:
                case 0x1300uLL:
                case 0x1304uLL:
                case 0x1308uLL:
                case 0x135CuLL:
                case 0x1360uLL:
                case 0x1364uLL:
                case 0x1368uLL:
                case 0x136CuLL:
                case 0x1374uLL:
                case 0x1378uLL:
                case 0x137CuLL:
                case 0x1380uLL:
                case 0x1384uLL:
                case 0x1388uLL:
                case 0x138CuLL:
                case 0x1394uLL:
                case 0x1398uLL:
                case 0x139CuLL:
                case 0x13A0uLL:
                case 0x13A8uLL:
                case 0x13ACuLL:
                case 0x13B0uLL:
                case 0x13B4uLL:
                case 0x13B8uLL:
                case 0x13C0uLL:
                case 0x13C4uLL:
                case 0x13C8uLL:
                case 0x13CCuLL:
                case 0x13D0uLL:
                case 0x13D4uLL:
                case 0x13D8uLL:
                case 0x13E0uLL:
                case 0x13E4uLL:
                case 0x13E8uLL:
                case 0x13ECuLL:
                case 0x13F4uLL:
                case 0x13F8uLL:
                case 0x13FCuLL:
                case 0x1400uLL:
                case 0x1404uLL:
                case 0x140CuLL:
                case 0x1410uLL:
                case 0x1414uLL:
                case 0x1418uLL:
                case 0x141CuLL:
                case 0x1420uLL:
                case 0x1424uLL:
                case 0x142CuLL:
                case 0x1430uLL:
                case 0x1434uLL:
                case 0x1438uLL:
                case 0x1440uLL:
                case 0x1444uLL:
                case 0x1448uLL:
                case 0x144CuLL:
                case 0x1450uLL:
                case 0x1458uLL:
                case 0x145CuLL:
                case 0x1460uLL:
                case 0x1464uLL:
                case 0x1468uLL:
                case 0x146CuLL:
                case 0x1470uLL:
                case 0x1478uLL:
                case 0x147CuLL:
                case 0x1480uLL:
                case 0x1484uLL:
                case 0x148CuLL:
                case 0x1490uLL:
                case 0x1494uLL:
                case 0x1498uLL:
                case 0x149CuLL:
                case 0x14A4uLL:
                case 0x14A8uLL:
                case 0x14ACuLL:
                case 0x14B0uLL:
                case 0x14B4uLL:
                case 0x14B8uLL:
                case 0x14BCuLL:
                case 0x14C4uLL:
                case 0x14C8uLL:
                case 0x14CCuLL:
                case 0x14D0uLL:
                case 0x14D8uLL:
                case 0x14DCuLL:
                case 0x14E0uLL:
                case 0x14E4uLL:
                case 0x14E8uLL:
                case 0x14F0uLL:
                case 0x14F4uLL:
                case 0x14F8uLL:
                case 0x14FCuLL:
                case 0x1500uLL:
                case 0x1504uLL:
                case 0x1508uLL:
                case 0x1510uLL:
                case 0x1514uLL:
                case 0x1518uLL:
                case 0x151CuLL:
                case 0x1524uLL:
                case 0x1528uLL:
                case 0x152CuLL:
                case 0x1530uLL:
                case 0x1534uLL:
                case 0x153CuLL:
                case 0x1540uLL:
                case 0x1544uLL:
                case 0x1548uLL:
                case 0x154CuLL:
                case 0x1550uLL:
                case 0x1554uLL:
                case 0x155CuLL:
                case 0x1560uLL:
                case 0x1564uLL:
                case 0x1568uLL:
                case 0x15BCuLL:
                case 0x15C0uLL:
                case 0x15C4uLL:
                case 0x15C8uLL:
                case 0x15CCuLL:
                case 0x15D4uLL:
                case 0x15D8uLL:
                case 0x15DCuLL:
                case 0x15E0uLL:
                case 0x15E4uLL:
                case 0x15E8uLL:
                case 0x15ECuLL:
                case 0x15F4uLL:
                case 0x15F8uLL:
                case 0x15FCuLL:
                case 0x1600uLL:
                case 0x1608uLL:
                case 0x160CuLL:
                case 0x1610uLL:
                case 0x1614uLL:
                case 0x1618uLL:
                case 0x1620uLL:
                case 0x1624uLL:
                case 0x1628uLL:
                case 0x162CuLL:
                case 0x1630uLL:
                case 0x1634uLL:
                case 0x1638uLL:
                case 0x1640uLL:
                case 0x1644uLL:
                case 0x1648uLL:
                case 0x164CuLL:
                case 0x1654uLL:
                case 0x1658uLL:
                case 0x165CuLL:
                case 0x1660uLL:
                case 0x1664uLL:
                case 0x166CuLL:
                case 0x1670uLL:
                case 0x1674uLL:
                case 0x1678uLL:
                case 0x167CuLL:
                case 0x1680uLL:
                case 0x1684uLL:
                case 0x168CuLL:
                case 0x1690uLL:
                case 0x1694uLL:
                case 0x1698uLL:
                case 0x16A0uLL:
                case 0x16A4uLL:
                case 0x16A8uLL:
                case 0x16ACuLL:
                case 0x16B0uLL:
                case 0x16B8uLL:
                case 0x16BCuLL:
                case 0x16C0uLL:
                case 0x16C4uLL:
                case 0x16C8uLL:
                case 0x16CCuLL:
                case 0x16D0uLL:
                case 0x16D8uLL:
                case 0x16DCuLL:
                case 0x16E0uLL:
                case 0x16E4uLL:
                  v45 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v44 + 2 * v21 + v22]];
                  *v40 = v52;
                  v46 = v43[v113];
                  v47 = *(_WORD *)(v44 + 167);
                  v48 = v47 & 7;
                  if (!*(_DWORD *)(v32 + 5384))
                    goto LABEL_66;
                  goto LABEL_77;
                case 0xAuLL:
                case 0xBuLL:
                case 0xCuLL:
                case 0xDuLL:
                case 0xEuLL:
                case 0xFuLL:
                case 0x58uLL:
                case 0x5CuLL:
                case 0x60uLL:
                case 0x64uLL:
                case 0x68uLL:
                case 0x6CuLL:
                case 0x70uLL:
                case 0x74uLL:
                case 0x78uLL:
                case 0x7CuLL:
                case 0x80uLL:
                case 0x84uLL:
                case 0x88uLL:
                case 0x8CuLL:
                case 0x90uLL:
                case 0x94uLL:
                case 0x98uLL:
                case 0x9CuLL:
                case 0xA0uLL:
                case 0xA4uLL:
                case 0xB8uLL:
                case 0xD8uLL:
                case 0xF0uLL:
                case 0x104uLL:
                case 0x124uLL:
                case 0x13CuLL:
                case 0x150uLL:
                case 0x170uLL:
                case 0x188uLL:
                case 0x19CuLL:
                case 0x1BCuLL:
                case 0x1D4uLL:
                case 0x1D8uLL:
                case 0x1DCuLL:
                case 0x1E0uLL:
                case 0x1E4uLL:
                case 0x1E8uLL:
                case 0x1ECuLL:
                case 0x1F0uLL:
                case 0x1F4uLL:
                case 0x1F8uLL:
                case 0x1FCuLL:
                case 0x200uLL:
                case 0x204uLL:
                case 0x208uLL:
                case 0x20CuLL:
                case 0x210uLL:
                case 0x214uLL:
                case 0x218uLL:
                case 0x21CuLL:
                case 0x220uLL:
                case 0x234uLL:
                case 0x254uLL:
                case 0x26CuLL:
                case 0x280uLL:
                case 0x2A0uLL:
                case 0x2B8uLL:
                case 0x2CCuLL:
                case 0x2ECuLL:
                case 0x304uLL:
                case 0x318uLL:
                case 0x338uLL:
                case 0x350uLL:
                case 0x364uLL:
                case 0x384uLL:
                case 0x39CuLL:
                case 0x3B0uLL:
                case 0x3D0uLL:
                case 0x3E8uLL:
                case 0x3FCuLL:
                case 0x41CuLL:
                case 0x434uLL:
                case 0x438uLL:
                case 0x43CuLL:
                case 0x440uLL:
                case 0x444uLL:
                case 0x448uLL:
                case 0x44CuLL:
                case 0x450uLL:
                case 0x454uLL:
                case 0x458uLL:
                case 0x45CuLL:
                case 0x460uLL:
                case 0x464uLL:
                case 0x468uLL:
                case 0x46CuLL:
                case 0x470uLL:
                case 0x474uLL:
                case 0x478uLL:
                case 0x47CuLL:
                case 0x480uLL:
                case 0x494uLL:
                case 0x4B4uLL:
                case 0x4CCuLL:
                case 0x4E0uLL:
                case 0x500uLL:
                case 0x518uLL:
                case 0x52CuLL:
                case 0x54CuLL:
                case 0x564uLL:
                case 0x578uLL:
                case 0x598uLL:
                case 0x5B0uLL:
                case 0x5C4uLL:
                case 0x5E4uLL:
                case 0x5FCuLL:
                case 0x600uLL:
                case 0x604uLL:
                case 0x608uLL:
                case 0x60CuLL:
                case 0x610uLL:
                case 0x614uLL:
                case 0x618uLL:
                case 0x61CuLL:
                case 0x620uLL:
                case 0x624uLL:
                case 0x628uLL:
                case 0x62CuLL:
                case 0x630uLL:
                case 0x634uLL:
                case 0x638uLL:
                case 0x63CuLL:
                case 0x640uLL:
                case 0x644uLL:
                case 0x648uLL:
                case 0x660uLL:
                case 0x680uLL:
                case 0x694uLL:
                case 0x6ACuLL:
                case 0x6CCuLL:
                case 0x6E0uLL:
                case 0x6F8uLL:
                case 0x718uLL:
                case 0x72CuLL:
                case 0x744uLL:
                case 0x764uLL:
                case 0x778uLL:
                case 0x790uLL:
                case 0x7B0uLL:
                case 0x7C4uLL:
                case 0x7C8uLL:
                case 0x7CCuLL:
                case 0x7D0uLL:
                case 0x7D4uLL:
                case 0x7D8uLL:
                case 0x7DCuLL:
                case 0x7E0uLL:
                case 0x7E4uLL:
                case 0x7E8uLL:
                case 0x7ECuLL:
                case 0x7F0uLL:
                case 0x7F4uLL:
                case 0x7F8uLL:
                case 0x7FCuLL:
                case 0x800uLL:
                case 0x804uLL:
                case 0x808uLL:
                case 0x80CuLL:
                case 0x810uLL:
                case 0x828uLL:
                case 0x848uLL:
                case 0x85CuLL:
                case 0x874uLL:
                case 0x894uLL:
                case 0x8A8uLL:
                case 0x8C0uLL:
                case 0x8E0uLL:
                case 0x8F4uLL:
                case 0x90CuLL:
                case 0x92CuLL:
                case 0x940uLL:
                case 0x958uLL:
                case 0x978uLL:
                case 0x98CuLL:
                case 0x9A4uLL:
                case 0x9C4uLL:
                case 0x9D8uLL:
                case 0x9F0uLL:
                case 0xA10uLL:
                case 0xA24uLL:
                case 0xA28uLL:
                case 0xA2CuLL:
                case 0xA30uLL:
                case 0xA34uLL:
                case 0xA38uLL:
                case 0xA3CuLL:
                case 0xA40uLL:
                case 0xA44uLL:
                case 0xA48uLL:
                case 0xA4CuLL:
                case 0xA50uLL:
                case 0xA54uLL:
                case 0xA58uLL:
                case 0xA5CuLL:
                case 0xA60uLL:
                case 0xA64uLL:
                case 0xA68uLL:
                case 0xA6CuLL:
                case 0xA70uLL:
                case 0xA88uLL:
                case 0xAA8uLL:
                case 0xABCuLL:
                case 0xAD4uLL:
                case 0xAF4uLL:
                case 0xB08uLL:
                case 0xB20uLL:
                case 0xB40uLL:
                case 0xB54uLL:
                case 0xB6CuLL:
                case 0xB8CuLL:
                case 0xBA0uLL:
                case 0xBA4uLL:
                case 0xBA8uLL:
                case 0xBACuLL:
                case 0xBB0uLL:
                case 0xBB4uLL:
                case 0xBB8uLL:
                case 0xBBCuLL:
                case 0xBC0uLL:
                case 0xBC4uLL:
                case 0xBC8uLL:
                case 0xBCCuLL:
                case 0xBD0uLL:
                case 0xBD4uLL:
                case 0xBD8uLL:
                case 0xBDCuLL:
                case 0xBE0uLL:
                case 0xBE4uLL:
                case 0xBE8uLL:
                case 0xBECuLL:
                case 0xC00uLL:
                case 0xC20uLL:
                case 0xC38uLL:
                case 0xC4CuLL:
                case 0xC6CuLL:
                case 0xC84uLL:
                case 0xC98uLL:
                case 0xCB8uLL:
                case 0xCD0uLL:
                case 0xCE4uLL:
                case 0xD04uLL:
                case 0xD1CuLL:
                case 0xD20uLL:
                case 0xD24uLL:
                case 0xD28uLL:
                case 0xD2CuLL:
                case 0xD30uLL:
                case 0xD34uLL:
                case 0xD38uLL:
                case 0xD3CuLL:
                case 0xD40uLL:
                case 0xD44uLL:
                case 0xD48uLL:
                case 0xD4CuLL:
                case 0xD50uLL:
                case 0xD54uLL:
                case 0xD58uLL:
                case 0xD5CuLL:
                case 0xD60uLL:
                case 0xD64uLL:
                case 0xD68uLL:
                case 0xD7CuLL:
                case 0xD9CuLL:
                case 0xDB4uLL:
                case 0xDC8uLL:
                case 0xDE8uLL:
                case 0xE00uLL:
                case 0xE14uLL:
                case 0xE34uLL:
                case 0xE4CuLL:
                case 0xE60uLL:
                case 0xE80uLL:
                case 0xE98uLL:
                case 0xEACuLL:
                case 0xECCuLL:
                case 0xEE4uLL:
                case 0xEF8uLL:
                case 0xF18uLL:
                case 0xF30uLL:
                case 0xF44uLL:
                case 0xF64uLL:
                case 0xF7CuLL:
                case 0xF80uLL:
                case 0xF84uLL:
                case 0xF88uLL:
                case 0xF8CuLL:
                case 0xF90uLL:
                case 0xF94uLL:
                case 0xF98uLL:
                case 0xF9CuLL:
                case 0xFA0uLL:
                case 0xFA4uLL:
                case 0xFA8uLL:
                case 0xFACuLL:
                case 0xFB0uLL:
                case 0xFB4uLL:
                case 0xFB8uLL:
                case 0xFBCuLL:
                case 0xFC0uLL:
                case 0xFC4uLL:
                case 0xFC8uLL:
                case 0xFDCuLL:
                case 0xFFCuLL:
                case 0x1014uLL:
                case 0x1028uLL:
                case 0x1048uLL:
                case 0x1060uLL:
                case 0x1074uLL:
                case 0x1094uLL:
                case 0x10ACuLL:
                case 0x10C0uLL:
                case 0x10E0uLL:
                case 0x10F8uLL:
                case 0x110CuLL:
                case 0x112CuLL:
                case 0x1144uLL:
                case 0x1148uLL:
                case 0x114CuLL:
                case 0x1150uLL:
                case 0x1154uLL:
                case 0x1158uLL:
                case 0x115CuLL:
                case 0x1160uLL:
                case 0x1164uLL:
                case 0x1168uLL:
                case 0x116CuLL:
                case 0x1170uLL:
                case 0x1174uLL:
                case 0x1178uLL:
                case 0x117CuLL:
                case 0x1180uLL:
                case 0x1184uLL:
                case 0x1188uLL:
                case 0x118CuLL:
                case 0x1190uLL:
                case 0x11A8uLL:
                case 0x11C8uLL:
                case 0x11DCuLL:
                case 0x11F4uLL:
                case 0x1214uLL:
                case 0x1228uLL:
                case 0x1240uLL:
                case 0x1260uLL:
                case 0x1274uLL:
                case 0x128CuLL:
                case 0x12ACuLL:
                case 0x12C0uLL:
                case 0x12D8uLL:
                case 0x12F8uLL:
                case 0x130CuLL:
                case 0x1310uLL:
                case 0x1314uLL:
                case 0x1318uLL:
                case 0x131CuLL:
                case 0x1320uLL:
                case 0x1324uLL:
                case 0x1328uLL:
                case 0x132CuLL:
                case 0x1330uLL:
                case 0x1334uLL:
                case 0x1338uLL:
                case 0x133CuLL:
                case 0x1340uLL:
                case 0x1344uLL:
                case 0x1348uLL:
                case 0x134CuLL:
                case 0x1350uLL:
                case 0x1354uLL:
                case 0x1358uLL:
                case 0x1370uLL:
                case 0x1390uLL:
                case 0x13A4uLL:
                case 0x13BCuLL:
                case 0x13DCuLL:
                case 0x13F0uLL:
                case 0x1408uLL:
                case 0x1428uLL:
                case 0x143CuLL:
                case 0x1454uLL:
                case 0x1474uLL:
                case 0x1488uLL:
                case 0x14A0uLL:
                case 0x14C0uLL:
                case 0x14D4uLL:
                case 0x14ECuLL:
                case 0x150CuLL:
                case 0x1520uLL:
                case 0x1538uLL:
                case 0x1558uLL:
                case 0x156CuLL:
                case 0x1570uLL:
                case 0x1574uLL:
                case 0x1578uLL:
                case 0x157CuLL:
                case 0x1580uLL:
                case 0x1584uLL:
                case 0x1588uLL:
                case 0x158CuLL:
                case 0x1590uLL:
                case 0x1594uLL:
                case 0x1598uLL:
                case 0x159CuLL:
                case 0x15A0uLL:
                case 0x15A4uLL:
                case 0x15A8uLL:
                case 0x15ACuLL:
                case 0x15B0uLL:
                case 0x15B4uLL:
                case 0x15B8uLL:
                case 0x15D0uLL:
                case 0x15F0uLL:
                case 0x1604uLL:
                case 0x161CuLL:
                case 0x163CuLL:
                case 0x1650uLL:
                case 0x1668uLL:
                case 0x1688uLL:
                case 0x169CuLL:
                case 0x16B4uLL:
                case 0x16D4uLL:
                  goto LABEL_76;
                case 0x14uLL:
                  v45 = 9;
                  *v40 = 9;
                  v46 = v43[v113];
                  v47 = *(_WORD *)(v44 + 167);
                  v48 = v47 & 7;
                  if (!*(_DWORD *)(v32 + 5384))
                    goto LABEL_66;
                  goto LABEL_77;
                case 0x15uLL:
                  v45 = 10;
                  *v40 = 10;
                  v46 = v43[v113];
                  v47 = *(_WORD *)(v44 + 167);
                  v48 = v47 & 7;
                  if (!*(_DWORD *)(v32 + 5384))
                    goto LABEL_66;
                  goto LABEL_77;
                default:
                  v45 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * *v44 + 2 * v21 + v22]];
                  *v40 = v52;
                  v46 = v43[v113];
                  v47 = *(_WORD *)(v44 + 167);
                  v48 = v47 & 7;
                  if (!*(_DWORD *)(v32 + 5384))
                    goto LABEL_66;
                  goto LABEL_77;
              }
            }
            v45 = v44[145];
            if (((*(_WORD *)(v44 + 167) & 0x80) != 0 || (char)v44[16] >= 1) && !v44[144])
            {
              v74 = *v44;
              v45 = v44[((int)((mi_size_wide_4[v74] - 1) & v23) >> av1_get_txb_size_index_tw_w_log2_table[v74])
                      + 146
                      + ((int)((mi_size_high_3[v74] - 1) & (v39 | v22)) >> av1_get_txb_size_index_tw_h_log2_table[v74] << av1_get_txb_size_index_stride_log2_table[v74])];
              *v40 = v45;
              v46 = v43[v113];
              v47 = *(_WORD *)(v44 + 167);
              v48 = v47 & 7;
              if (!*(_DWORD *)(v32 + 5384))
              {
LABEL_66:
                v49 = v19 + (v124 << 8);
                v50 = v49 + 32 * v48 + 2 * (char)v44[16] + mode_lf_lut_0[v44[2]];
                v51 = *(unsigned __int8 *)(v50 + 22272);
                if (!*(_BYTE *)(v50 + 22272))
                {
                  v51 = *(unsigned __int8 *)(v49
                                           + 32 * (*(_WORD *)(v46 + 167) & 7)
                                           + 2 * (char)v46[16]
                                           + mode_lf_lut_0[v46[2]]
                                           + 22272);
                  if (v46 != v44)
                    goto LABEL_98;
                  goto LABEL_125;
                }
LABEL_97:
                if (v46 != v44)
                  goto LABEL_98;
                goto LABEL_125;
              }
            }
            else
            {
LABEL_76:
              *v40 = v45;
              v46 = v43[v113];
              v47 = *(_WORD *)(v44 + 167);
              v48 = v47 & 7;
              if (!*(_DWORD *)(v32 + 5384))
                goto LABEL_66;
            }
          }
LABEL_77:
          v53 = *(_DWORD *)(v32 + 5392);
          if (v53)
          {
            v54 = &v44[*v127 + 163];
            v55 = v130;
            if (!v15)
              goto LABEL_83;
          }
          else
          {
            v54 = v44 + 162;
            v55 = v130;
            if (!v15)
              goto LABEL_83;
          }
          v55 = v128;
          if (v15 != 1)
            v55 = v123;
LABEL_83:
          v56 = *v55 + (char)*v54;
          if (v56 >= 63)
            v56 = 63;
          v51 = v56 & ~(v56 >> 31);
          v57 = *v129;
          if (*(_BYTE *)v32 && ((*(_DWORD *)(v19 + 4 * v48 + 19124) >> v57) & 1) != 0)
          {
            v58 = v51 + *(__int16 *)(v19 + 16 * v48 + 2 * v57 + 18996);
            if (v58 >= 63)
              v58 = 63;
            v51 = v58 & ~(v58 >> 31);
          }
          if (*(_BYTE *)(v32 + 4052))
          {
            v59 = (char)v44[16];
            v60 = *(char *)(v19 + v59 + 23046);
            if (v59 >= 1)
              v60 += *(char *)(v19 + mode_lf_lut_0[v44[2]] + 23054);
            v61 = (v60 << (v51 >> 5)) + v51;
            if (v61 >= 63)
              v61 = 63;
            v51 = v61 & ~(v61 >> 31);
          }
          v51 = v51;
          if ((_BYTE)v51)
            goto LABEL_97;
          if (v53)
          {
            v65 = &v46[*v127 + 163];
            v66 = v130;
            if (!v15)
              goto LABEL_111;
          }
          else
          {
            v65 = v46 + 162;
            v66 = v130;
            if (!v15)
              goto LABEL_111;
          }
          v66 = v128;
          if (v15 != 1)
            v66 = v123;
LABEL_111:
          v67 = *v66 + (char)*v65;
          if (v67 >= 63)
            v67 = 63;
          v68 = v67 & ~(v67 >> 31);
          if (*(_BYTE *)v32)
          {
            v69 = *(_WORD *)(v46 + 167) & 7;
            if (((*(_DWORD *)(v19 + 4 * v69 + 19124) >> v57) & 1) != 0)
            {
              v70 = v68 + *(__int16 *)(v19 + 16 * v69 + 2 * *v129 + 18996);
              if (v70 >= 63)
                v70 = 63;
              v68 = v70 & ~(v70 >> 31);
            }
          }
          if (*(_BYTE *)(v32 + 4052))
          {
            v71 = (char)v46[16];
            v72 = *(char *)(v19 + v71 + 23046);
            if (v71 >= 1)
              v72 += *(char *)(v19 + mode_lf_lut_0[v46[2]] + 23054);
            v73 = (v72 << (v68 >> 5)) + v68;
            if (v73 >= 63)
              v73 = 63;
            v68 = v73 & ~(v73 >> 31);
          }
          v51 = v68;
          if (v46 != v44)
          {
LABEL_98:
            v62 = 0;
            goto LABEL_99;
          }
LABEL_125:
          if (!v44[144])
            goto LABEL_98;
          v62 = (v47 & 0x80) != 0 || (char)v44[16] > 0;
LABEL_99:
          v63 = v46 == v44 && v62;
          v64 = v45;
          if (!v63)
          {
            v64 = v45;
            if (v51)
            {
              *v41 = horz_filter_length_chroma[19 * v45 + v30];
              *((_QWORD *)v41 + 1) = v115 + 48 * v51;
              v64 = *v40;
            }
          }
          if (v37 >= tx_size_wide_2[v45])
            v37 = tx_size_wide_2[v45];
          v42 = (int)tx_size_high_unit[v64];
          v39 += (_DWORD)v42 << v22;
          v41 += 16 * v42;
          v40 += v42;
          v30 = v64;
        }
        while (v39 < v107);
      }
      if ((v122 & 3) != 0 || v122 + 3 >= v116 || v37 <= 15)
      {
        if ((v122 & 1) != 0)
        {
          v76 = 0;
          v118 = 0;
          v77 = v126;
          v78 = 4 * v131;
          if (v126 < 1)
            goto LABEL_7;
        }
        else
        {
          v76 = v122 + 1 < v116 && v37 > 7;
          v118 = v76;
          v77 = v126;
          v78 = 4 * v131;
          if (v126 < 1)
            goto LABEL_7;
        }
      }
      else
      {
        v118 = 3;
        v76 = 2;
        v77 = v126;
        v78 = 4 * v131;
        if (v126 < 1)
          goto LABEL_7;
      }
      v132 = 4 * v122;
      if ((a9 & 1) != 0)
      {
        v79 = 0;
        v80 = a6;
        v81 = a7;
        while (1)
        {
          if (*v81 == 255)
          {
            *v80 = 0;
            *v81 = 0;
          }
          v83 = v79 * v78 + (uint64_t)(int)v132;
          v84 = (__int32 *)(*((_QWORD *)v17 + 2) + v83);
          v85 = (__int32 *)(*((_QWORD *)v17 + 328) + v83);
          v86 = *((_QWORD *)v80 + 1);
          if (v76 == 2)
          {
            HIDWORD(v90) = *v80;
            LODWORD(v90) = HIDWORD(v90) - 4;
            v89 = v90 >> 1;
            if (v89)
            {
              if (v89 == 1)
              {
                aom_lpf_horizontal_6_dual_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32), *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
                aom_lpf_horizontal_6_dual_neon(v84 + 2, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
                aom_lpf_horizontal_6_dual_neon(v85, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
                v78 = 4 * v131;
                v77 = v126;
                v17 = a3;
                aom_lpf_horizontal_6_dual_neon(v85 + 2, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
              }
              goto LABEL_155;
            }
            v93 = (const char *)(v86 + 16);
            v94 = (const char *)(v86 + 32);
            aom_lpf_horizontal_4_dual_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32), *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
            aom_lpf_horizontal_4_dual_neon(v84 + 2, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
            aom_lpf_horizontal_4_dual_neon(v85, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
            v95 = v85 + 2;
            v96 = v131;
            v78 = 4 * v131;
          }
          else
          {
            if (v76 != 1)
            {
              HIDWORD(v92) = *v80;
              LODWORD(v92) = HIDWORD(v92) - 4;
              v91 = v92 >> 1;
              if (v91)
              {
                if (v91 == 1)
                {
                  aom_lpf_horizontal_6_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
                  v78 = 4 * v131;
                  v77 = v126;
                  v17 = a3;
                  aom_lpf_horizontal_6_neon(v85, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
                }
              }
              else
              {
                aom_lpf_horizontal_4_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
                v78 = 4 * v131;
                v77 = v126;
                v17 = a3;
                aom_lpf_horizontal_4_neon(v85, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
              }
              goto LABEL_155;
            }
            HIDWORD(v88) = *v80;
            LODWORD(v88) = HIDWORD(v88) - 4;
            v87 = v88 >> 1;
            if (v87)
            {
              if (v87 == 1)
              {
                aom_lpf_horizontal_6_dual_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32), *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
                v17 = a3;
                v77 = v126;
                aom_lpf_horizontal_6_dual_neon(v85, v131, (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32), (unsigned __int8 *)v86, (const char *)(v86 + 16), (const char *)(v86 + 32));
              }
              goto LABEL_155;
            }
            v93 = (const char *)(v86 + 16);
            v94 = (const char *)(v86 + 32);
            aom_lpf_horizontal_4_dual_neon(v84, v131, *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32), *((unsigned __int8 **)v80 + 1), (const char *)(v86 + 16), (const char *)(v86 + 32));
            v95 = v85;
            v96 = v131;
          }
          v97 = v93;
          v98 = v94;
          v99 = v93;
          v77 = v126;
          v100 = v94;
          v17 = a3;
          aom_lpf_horizontal_4_dual_neon(v95, v96, (unsigned __int8 *)v86, v97, v98, (unsigned __int8 *)v86, v99, v100);
LABEL_155:
          v82 = (int)tx_size_high_unit[*v81];
          v79 += v82;
          v80 += 16 * v82;
          v81 += v82;
          if (v79 >= v77)
            goto LABEL_7;
        }
      }
      v101 = 0;
      v102 = a6;
      v103 = a7;
      do
      {
        if (*v103 == 255)
        {
          *v102 = 0;
          *v103 = 0;
        }
        filter_horz((__int32 *)(*((_QWORD *)v17 + 2) + v132 + v101 * v78), v131, v102, v76);
        v104 = (int)tx_size_high_unit[*v103];
        v101 += v104;
        v102 += 16 * v104;
        v103 += v104;
      }
      while (v101 < v77);
LABEL_7:
      v19 = a1;
      v20 = v122 + v118 + 1;
      v15 = a8;
      v16 = a4;
      v18 = a2;
      v21 = v114;
      v22 = v117;
    }
    while (v20 < v116);
  }
}

uint64_t av1_get_max_uv_txsize(int a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t result;

  v3 = max_txsize_rect_lookup[av1_ss_size_lookup[4 * a1 + 2 * a2 + a3]];
  result = 3;
  switch((int)v3)
  {
    case 4:
    case 11:
    case 12:
      return result;
    case 17:
      result = 9;
      break;
    case 18:
      result = 10;
      break;
    default:
      result = v3;
      break;
  }
  return result;
}

int *av1_update_noise_estimate(int *result)
{
  int *v1;
  int *v2;
  uint64_t *v3;
  int *v4;
  int *v5;
  int v6;
  _BOOL4 v7;
  int *v8;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  char v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  int v21;
  __n128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint8x16_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint8x16_t *v35;
  __n128 v36;
  __n128 v37;
  uint8x16_t *v38;
  unint64_t v39;
  unint64_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unint64_t v43;
  uint8x16_t *v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint8x16_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint16x8_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned __int32 v62;
  unsigned __int32 v63;
  int v64;
  int v65;
  int v66;
  __int8 *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  __int32 v82;
  __int32 v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned __int32 v88;
  unsigned int v89;
  unsigned int v90;
  signed int v91;
  int v92;
  signed int v93;
  int v94;
  _BOOL4 v95;
  int v96;
  uint64_t v97;
  char *v98;
  char *v99;
  int *v100;
  int *v101;
  uint64_t *v102;
  int *v103;
  _DWORD v104[20];
  uint32x4_t v105[4];
  __int128 v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  v1 = result + 159258;
  v2 = result + 114193;
  v3 = (uint64_t *)(result + 66418);
  v4 = result + 66175;
  v5 = result + 59764;
  v6 = result[59774];
  if (v6 > 352)
  {
    v7 = 0;
    v8 = (int *)*((_QWORD *)result + 33210);
    v9 = result[66384];
    if (v9 < 1)
      goto LABEL_8;
  }
  else
  {
    v7 = result[59775] < 289;
    v8 = (int *)*((_QWORD *)result + 33210);
    v9 = result[66384];
    if (v9 < 1)
      goto LABEL_8;
  }
  if (!*(_DWORD *)(*(_QWORD *)result + 50960))
  {
    v8 = result + 159376;
    v10 = result + 159362;
    v11 = *v2;
    if (!*v2)
      goto LABEL_16;
    goto LABEL_9;
  }
  if (*v1 == result[159260] - 1)
    v8 = result + 159376;
LABEL_8:
  v10 = result + 159362;
  v11 = *v2;
  if (!*v2)
    goto LABEL_16;
LABEL_9:
  v12 = result[114194];
  if (v12)
  {
    if (v6 == v11)
    {
      v11 = result[59775] != v12;
      v13 = *v5;
      if (v9 < 1)
        goto LABEL_26;
    }
    else
    {
      v11 = 1;
      v13 = *v5;
      if (v9 < 1)
        goto LABEL_26;
    }
    goto LABEL_17;
  }
  v11 = 0;
LABEL_16:
  v13 = *v5;
  if (v9 < 1)
    goto LABEL_26;
LABEL_17:
  if (!*(_DWORD *)(*(_QWORD *)result + 50960))
  {
    if (v6 < 320)
      goto LABEL_26;
LABEL_22:
    if (result[59775] > 179)
      goto LABEL_23;
    goto LABEL_26;
  }
  if (v6 >= 320 && *v1 == result[159260] - 1)
    goto LABEL_22;
LABEL_26:
  if (result[66398]
    || *v4 != 1
    || *((_BYTE *)result + 264736) != 3
    || result[66388] < 5
    || v11
    || *(_DWORD *)(*(_QWORD *)result + 50960)
    || result[66351] == 1
    || result[59775] * v6 <= 230399)
  {
    v14 = 1;
    *v10 = 0;
    v15 = result[159260];
    if (v15 < 2)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_23:
  v14 = 0;
  *v10 = 1;
  v15 = result[159260];
  if (v15 >= 2)
LABEL_35:
    v13 = result[159268];
LABEL_36:
  if ((v14 & 1) != 0 || (v13 & 7) != 0 || !v8 || v15 == 1 && (v10[6] != v6 || v10[7] != result[59775]))
  {
    if (v9 >= 1 && (!*(_DWORD *)(*(_QWORD *)result + 50960) || *v1 == v15 - 1) && v10[16] >= 1)
    {
      v16 = 0;
      v17 = *v3;
      v18 = (char *)*((_QWORD *)v10 + 12);
      v19 = *(char **)(*v3 + 40);
      do
      {
        result = (int *)memcpy(v18, v19, v10[14]);
        v18 += v10[22];
        v19 += *(int *)(v17 + 32);
        ++v16;
      }
      while (v16 < v10[16]);
    }
    if (v8)
      *((_QWORD *)v10 + 3) = *((_QWORD *)v5 + 5);
    return result;
  }
  v20 = result + 97098;
  if (v13 >= 61 && result[159288] > 1 && *v20 > v15 && *v1 == v15 - 1)
  {
    v21 = v7 ? 60 : 40;
    if (result[97129] < v21)
    {
      v10[1] = 0;
      v10[5] = 0;
      v10[8] = 10;
      if (v9 >= 1 && result[159268] >= 2)
      {
        v10[63] = 0;
        v10[68] = 0;
        v10[67] = 0;
        return copy_frame_0(result + 159376, *v3);
      }
      return result;
    }
  }
  v22.n128_u64[1] = 0;
  v106 = 0u;
  memset(v105, 0, sizeof(v105));
  v23 = result[59893];
  if ((int)v23 < 1 || (v24 = result[59894], (int)v24 < 1))
  {
    v62 = 0;
    v63 = 0;
    v64 = result[59775];
    v10[6] = v6;
    v10[7] = v64;
LABEL_115:
    v83 = v105[0].i32[1];
    v82 = v105[0].i32[2];
    goto LABEL_116;
  }
  v101 = result + 159258;
  v102 = (uint64_t *)(result + 66418);
  v25 = 0;
  v26 = 0;
  v27 = *(_QWORD *)(*v3 + 40);
  v28 = *(unsigned int *)(*v3 + 32);
  v29 = *((_QWORD *)v8 + 5);
  v30 = v8[8];
  v31 = v24 >> 1;
  v32 = (uint8x16_t *)*((_QWORD *)v10 + 35);
  v33 = ((v24 - 1) >> 1) + 1;
  v34 = v33 & 0xFFFFFFFFFFFFFFF8;
  v35 = v32 + 1;
  v22.n128_u64[0] = 0x202020202020202;
  v36.n128_u64[0] = 0x100000001;
  v36.n128_u64[1] = 0x100000001;
  v37.n128_u64[0] = 0x202020202020202;
  v37.n128_u64[1] = 0x202020202020202;
  v38 = v32;
  do
  {
    if (v24 >= 0xF)
    {
      if (v24 < 0x3F)
      {
        v40 = 0;
LABEL_74:
        v57 = 0uLL;
        v58 = (int32x4_t)v26;
        do
        {
          v59 = vmovl_u8(vcgt_u8(*(uint8x8_t *)&v32->i8[(v40 & 0x7FFFFFFFFFFFFFF8) + (v25 >> 1) * v31], (uint8x8_t)0x202020202020202));
          v57 = vaddq_s32(v57, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v59), (int8x16_t)v36));
          v58 = vaddq_s32(v58, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v59.i8), (int8x16_t)v36));
          v40 += 8;
        }
        while (v34 != v40);
        v26 = vaddvq_s32(vaddq_s32(v58, v57));
        v39 = 2 * (v33 & 0xFFFFFFFFFFFFFFF8);
        if (v33 == v34)
          goto LABEL_65;
        goto LABEL_77;
      }
      v41 = 0uLL;
      v42 = (int32x4_t)v26;
      v43 = v33 & 0xFFFFFFFFFFFFFFE0;
      v44 = v35;
      v45 = 0uLL;
      v46 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      do
      {
        v51 = vcgtq_u8(v44[-1], (uint8x16_t)v37);
        v52 = vmovl_u8(*(uint8x8_t *)v51.i8);
        v53 = vmovl_high_u8(v51);
        v54 = vcgtq_u8(*v44, (uint8x16_t)v37);
        v55 = vmovl_u8(*(uint8x8_t *)v54.i8);
        v56 = vmovl_high_u8(v54);
        v46 = vaddq_s32(v46, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v53), (int8x16_t)v36));
        v45 = vaddq_s32(v45, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8), (int8x16_t)v36));
        v41 = vaddq_s32(v41, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v52), (int8x16_t)v36));
        v42 = vaddq_s32(v42, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8), (int8x16_t)v36));
        v50 = vaddq_s32(v50, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v56), (int8x16_t)v36));
        v49 = vaddq_s32(v49, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v56.i8), (int8x16_t)v36));
        v48 = vaddq_s32(v48, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v55), (int8x16_t)v36));
        v47 = vaddq_s32(v47, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8), (int8x16_t)v36));
        v44 += 2;
        v43 -= 32;
      }
      while (v43);
      v26 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v47, v42), vaddq_s32(v49, v45)), vaddq_s32(vaddq_s32(v48, v41), vaddq_s32(v50, v46))));
      if (v33 == (v33 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_65;
      v40 = v33 & 0xFFFFFFFFFFFFFFE0;
      v39 = 2 * (v33 & 0xFFFFFFFFFFFFFFE0);
      if ((v33 & 0x18) != 0)
        goto LABEL_74;
    }
    else
    {
      v39 = 0;
    }
LABEL_77:
    v60 = &v38->u8[v39 >> 1];
    do
    {
      v61 = *v60++;
      if (v61 > 2)
        ++v26;
      v39 += 2;
    }
    while (v39 < v24);
LABEL_65:
    v25 += 2;
    v35 = (uint8x16_t *)((char *)v35 + v31);
    v38 = (uint8x16_t *)((char *)v38 + v31);
  }
  while (v25 < v23);
  if ((int)v26 >= (3 * (int)v23 * (int)v24) >> 5)
  {
    v100 = result + 66175;
    v65 = 0;
    v103 = result + 97098;
    while ((int)v24 < 1)
    {
LABEL_86:
      v27 += 4 * ((int)v28 - (int)v24);
      v29 += 4 * ((int)v30 - (int)v24);
      if (++v65 >= (int)v23)
      {
        v6 = v5[10];
        v63 = v105[0].i32[0];
        v62 = HIDWORD(v106);
        v3 = v102;
        v4 = v100;
        goto LABEL_112;
      }
    }
    v66 = 0;
    while (2)
    {
      if (((v66 | v65) & 7) == 0 && v65 < v5[129] - 3 && v66 < (int)v24 - 3)
      {
        v69 = (v66 >> 1) + (uint64_t)(int)(((int)v24 >> 1) * (v65 >> 1));
        v70 = v69 + ((int)v24 >> 1);
        v71 = *((_QWORD *)v10 + 35);
        v72 = v71 + (int)v70;
        v73 = (unsigned __int8 *)(v71 + v69);
        v74 = *v73;
        v75 = v73[1];
        v76 = *(unsigned __int8 *)(v71 + v70);
        if (v76 >= *(unsigned __int8 *)(v72 + 1))
          v76 = *(unsigned __int8 *)(v72 + 1);
        if (v75 < v76)
          v76 = v75;
        if (v76 >= v74)
          v76 = v74;
        if (v76 >= 3 && !v20[4])
        {
          v77 = result;
          v78 = v28;
          v79 = v30;
          v80 = (*(uint64_t (**)(uint64_t, __n128, __n128, __n128))(*(_QWORD *)result + 52176))(v27, v22, v36, v37);
          if (v80 < 0x7D0)
          {
            v67 = &v105[0].i8[4 * ((unsigned __int16)v80 / 0x64u)];
          }
          else
          {
            v67 = (char *)&v106 + 12;
            if (v80 >= 0xBB8)
            {
LABEL_91:
              LODWORD(v24) = v5[130];
              v28 = v78;
              v20 = v103;
              v30 = v79;
              result = v77;
              goto LABEL_92;
            }
          }
          ++*(_DWORD *)v67;
          goto LABEL_91;
        }
      }
LABEL_92:
      v27 += 4;
      v29 += 4;
      if (++v66 >= (int)v24)
      {
        LODWORD(v23) = v5[129];
        goto LABEL_86;
      }
      continue;
    }
  }
  v62 = 0;
  v63 = 0;
  v3 = (uint64_t *)(result + 66418);
LABEL_112:
  v1 = v101;
  v81 = v5[11];
  v10[6] = v6;
  v10[7] = v81;
  if (v63 < 0xB || v62 <= v63 >> 2)
    goto LABEL_115;
  v63 = 0;
  v105[0].i32[0] = 0;
  *(uint32x4_t *)((char *)v105 + 4) = vshlq_u32(*(uint32x4_t *)((char *)v105 + 4), (uint32x4_t)xmmword_208F4A680);
  v105[1].i32[1] = (unsigned __int32)v105[1].i32[1] >> 1;
  v105[1].i32[2] = (3 * v105[1].i32[2]) >> 1;
  v62 >>= 1;
  HIDWORD(v106) = v62;
  v82 = v105[0].i32[2];
  v83 = v105[0].i32[1];
LABEL_116:
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = (DWORD1(v106) + (v62 >> 1) + 2 * DWORD2(v106) + 2) >> 2;
  v88 = v62 >> 2;
  v89 = (v83 + v63 + v82) / 3;
  do
  {
    if ((_DWORD)v84 == 19)
    {
      v104[19] = v88;
    }
    else if ((_DWORD)v84 == 18)
    {
      v104[18] = v87;
    }
    else if ((_DWORD)v84)
    {
      v104[v84] = (v105[0].i32[(v84 - 1)] + 2 * v105[0].i32[v84] + v105[0].i32[v84 + 1] + 2) >> 2;
    }
    else
    {
      v104[0] = v89;
    }
    if (v104[v84] > v85)
    {
      v86 = v84;
      v85 = v104[v84];
    }
    ++v84;
  }
  while (v84 != 20);
  v90 = v10[1];
  v91 = (3 * v10[2] + 40 * v86) >> 2;
  v10[2] = v91;
  if (v90 <= 1 && v91 > v10[4] || (v92 = v10[5] + 1, v10[5] = v92, v92 == v10[8]))
  {
    v10[8] = 30;
    v10[5] = 0;
    v93 = v10[3];
    if (v91 <= 2 * v93)
    {
      if (v91 <= v93)
        v94 = v91 > v93 >> 1;
      else
        v94 = 2;
    }
    else
    {
      v94 = 3;
    }
    v10[1] = v94;
    if (v4[209] > 0)
    {
      if (!*(_DWORD *)(*(_QWORD *)result + 50960) || *v1 == v1[2] - 1)
      {
        v10[67] = v94;
        v95 = v94 && !v10[68];
        v10[63] = v95;
        v10[68] = v94;
      }
LABEL_145:
      if ((!*(_DWORD *)(*(_QWORD *)result + 50960) || *v1 == v1[2] - 1) && v10[16] >= 1)
      {
        v96 = 0;
        v97 = *v3;
        v98 = (char *)*((_QWORD *)v10 + 12);
        v99 = *(char **)(*v3 + 40);
        do
        {
          result = (int *)memcpy(v98, v99, v10[14]);
          v98 += v10[22];
          v99 += *(int *)(v97 + 32);
          ++v96;
        }
        while (v96 < v10[16]);
      }
    }
  }
  else if (v4[209] >= 1)
  {
    goto LABEL_145;
  }
  return result;
}

int *copy_frame_0(int *result, uint64_t a2)
{
  int *v3;
  int v4;
  char *v5;
  char *v6;

  if (result[2] >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = (char *)*((_QWORD *)result + 5);
    v6 = *(char **)(a2 + 40);
    do
    {
      result = (int *)memcpy(v5, v6, *v3);
      v5 += v3[8];
      v6 += *(int *)(a2 + 32);
      ++v4;
    }
    while (v4 < v3[2]);
  }
  return result;
}

void av1_quantize_skip(uint64_t a1, void *a2, void *a3, _WORD *a4)
{
  size_t v6;

  v6 = 4 * a1;
  bzero(a2, 4 * a1);
  bzero(a3, v6);
  *a4 = 0;
}

double av1_quantize_fp_facade(int16x8_t *a1, uint64_t a2, uint64_t a3, int32x4_t *a4, int32x4_t *a5, __int16 *a6, uint64_t a7, int *a8, int16x8_t a9)
{
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int16x8_t *v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t *v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t *v31;
  int32x4_t *v32;
  uint64_t v33;
  int16x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  __int16 v50;
  __int16 *v51;
  uint64_t v52;
  _BOOL8 v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD v65[2];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v12 = *((_QWORD *)a8 + 1);
  v13 = *((_QWORD *)a8 + 2);
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
  {
    v15 = *a8;
    if (*a8 == 2)
    {
      a9.i64[0] = av1_quantize_fp_64x64_neon(a1, a2, *(_QWORD *)(a3 + 120), *(int16x8_t **)(a3 + 88), *(int16x8_t **)(a3 + 80), *(_QWORD *)(a3 + 112), a4, a5, *(int16x8_t **)(a3 + 128), a6, *(_QWORD *)a7, *(int16x8_t **)(a7 + 8));
    }
    else if (v15 == 1)
    {
      a9.i64[0] = av1_quantize_fp_32x32_neon(a1, a2, *(_QWORD *)(a3 + 120), *(int16x8_t **)(a3 + 88), *(int16x8_t **)(a3 + 80), *(_QWORD *)(a3 + 112), a4, a5, *(int16x8_t **)(a3 + 128), a6, *(_QWORD *)a7, *(int16x8_t **)(a7 + 8));
    }
    else if (!v15)
    {
      v16 = *(int16x8_t **)(a7 + 8);
      a9 = *(int16x8_t *)*(_QWORD *)(a3 + 80);
      v17 = *(int16x8_t *)*(_QWORD *)(a3 + 128);
      v18 = *(int16x8_t *)*(_QWORD *)(a3 + 88);
      v19 = vuzp1q_s16(*a1, a1[1]);
      v20 = (int8x16_t)vcltzq_s16(v19);
      v21 = vqdmulhq_s16(vqaddq_s16(vabsq_s16(v19), v18), a9);
      v22.i64[0] = 0x1000100010001;
      v22.i64[1] = 0x1000100010001;
      v23 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(v21, 1uLL), v20), (int16x8_t)v20);
      v24 = vmulq_s16(v23, v17);
      *a4 = vmovl_s16(*(int16x4_t *)v23.i8);
      a4[1] = vmovl_high_s16(v23);
      *a5 = vmovl_s16(*(int16x4_t *)v24.i8);
      a5[1] = vmovl_high_s16(v24);
      v26 = *v16;
      v25 = v16 + 1;
      v27 = (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v26, v22), (int8x16_t)vcgtq_s16(v21, v22));
      v21.i64[0] = -1;
      v21.i64[1] = -1;
      v28 = vmaxq_s16(v27, v21);
      v29 = vdupq_lane_s16(*(int16x4_t *)v17.i8, 1);
      v30 = vdupq_lane_s16(*(int16x4_t *)v18.i8, 1);
      v31 = a5 + 3;
      v32 = a4 + 3;
      v33 = a2 + 8;
      v34 = a1 + 3;
      do
      {
        v35 = vuzp1q_s16(v34[-1], *v34);
        v36 = vqaddq_s16(vabsq_s16(v35), v30);
        v37 = (int8x16_t)vcltzq_s16(v35);
        v38 = vqdmulhq_lane_s16(v36, *(int16x4_t *)a9.i8, 1);
        v39 = vsubq_s16((int16x8_t)veorq_s8((int8x16_t)vshrq_n_s16(v38, 1uLL), v37), (int16x8_t)v37);
        v40 = vmulq_s16(v39, v29);
        v32[-1] = vmovl_s16(*(int16x4_t *)v39.i8);
        *v32 = vmovl_high_s16(v39);
        v31[-1] = vmovl_s16(*(int16x4_t *)v40.i8);
        *v31 = vmovl_high_s16(v40);
        v41 = *v25++;
        v28 = vmaxq_s16(v28, (int16x8_t)vandq_s8((int8x16_t)vaddq_s16(v41, v22), (int8x16_t)vcgtq_s16(v38, v22)));
        v31 += 2;
        v32 += 2;
        v33 -= 8;
        v34 += 2;
      }
      while (v33 > 16);
      a9.i16[0] = vmaxvq_s16(v28);
      *a6 = a9.i16[0];
    }
  }
  else
  {
    v43 = *(_QWORD *)(a3 + 80);
    v42 = *(__int16 **)(a3 + 88);
    v44 = *(_QWORD *)(a3 + 128);
    v45 = *(_QWORD *)a7;
    v46 = *a8;
    v47 = 1 << *a8 >> 1;
    v48 = (v47 + *v42) >> *a8;
    LODWORD(v42) = (v47 + v42[1]) >> *a8;
    v65[0] = v48;
    v65[1] = (_DWORD)v42;
    bzero(a4, 4 * a2);
    bzero(a5, 4 * a2);
    if (a2 < 1)
    {
      v50 = -1;
      v51 = a6;
    }
    else
    {
      v49 = 0;
      v50 = -1;
      v51 = a6;
      do
      {
        v52 = *(__int16 *)(v45 + 2 * v49);
        v53 = *(_WORD *)(v45 + 2 * v49) != 0;
        v54 = a1->i32[v52];
        v55 = *(__int16 *)(v44 + 2 * v53);
        if (v54 >= 0)
          v56 = a1->i32[v52];
        else
          v56 = -v54;
        if (*(unsigned __int8 *)(v12 + v52) * (uint64_t)v56 >= v55 << (4 - v46))
        {
          v57 = v54 >> 31;
          v58 = (*(unsigned __int8 *)(v13 + v52) * v55 + 16) >> 5;
          v59 = (int)v65[v53] + (uint64_t)v56;
          if (v59 >= 0x7FFF)
            v59 = 0x7FFFLL;
          if (v59 <= -32768)
            v59 = -32768;
          v60 = (uint64_t)(*(__int16 *)(v43 + 2 * v53) * (unint64_t)*(unsigned __int8 *)(v12 + v52) * v59) >> (21 - v46);
          v61 = v52;
          a4->i32[v61] = (v57 ^ v60) - v57;
          a5->i32[v61] = (((v58 * (int)v60) >> v46) ^ v57) - v57;
          if ((_DWORD)v60)
            v50 = v49;
        }
        ++v49;
      }
      while (a2 != v49);
    }
    *v51 = v50 + 1;
  }
  return *(double *)a9.i64;
}

double av1_quantize_b_facade(int16x8_t *a1, uint64_t a2, uint64_t a3, int16x8_t *a4, int16x8_t *a5, _WORD *a6, uint64_t a7, int *a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v14;

  v9 = *((_QWORD *)a8 + 1);
  v10 = *((_QWORD *)a8 + 2);
  if (v9)
    v11 = v10 == 0;
  else
    v11 = 1;
  if (v11)
  {
    v12 = *a8;
    if (*a8 == 2)
    {
      a9.n128_u64[0] = aom_quantize_b_helper_neon(a1, a2, (__int16 *)*(_QWORD *)(a3 + 120), (__int16 *)*(_QWORD *)(a3 + 104), (_WORD *)*(_QWORD *)(a3 + 96), (_WORD *)*(_QWORD *)(a3 + 112), a4, a5, a9, (_WORD *)*(_QWORD *)(a3 + 128), a6, v14, (int16x8_t *)*(_QWORD *)(a7 + 8), 0, 0, 2).n128_u64[0];
    }
    else if (v12 == 1)
    {
      a9.n128_u64[0] = aom_quantize_b_helper_neon(a1, a2, (__int16 *)*(_QWORD *)(a3 + 120), (__int16 *)*(_QWORD *)(a3 + 104), (_WORD *)*(_QWORD *)(a3 + 96), (_WORD *)*(_QWORD *)(a3 + 112), a4, a5, a9, (_WORD *)*(_QWORD *)(a3 + 128), a6, v14, (int16x8_t *)*(_QWORD *)(a7 + 8), 0, 0, 1).n128_u64[0];
    }
    else if (!v12)
    {
      a9.n128_u64[0] = aom_quantize_b_neon(a1, a2, *(__int16 **)(a3 + 120), *(_WORD **)(a3 + 104), *(_WORD **)(a3 + 96), *(_WORD **)(a3 + 112), a4, a5, *(_WORD **)(a3 + 128), a6, *(_QWORD *)a7, *(int16x8_t **)(a7 + 8));
    }
  }
  else
  {
    aom_quantize_b_helper_c((uint64_t)a1, a2, *(__int16 **)(a3 + 120), *(_QWORD *)(a3 + 104), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 112), a4, a5, *(_QWORD *)(a3 + 128), a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), v9, v10, *a8);
  }
  return a9.n128_f64[0];
}

void av1_quantize_dc_facade(int *a1, int a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _WORD *a6, uint64_t a7, int *a8)
{
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int16 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  v10 = (unsigned __int8 *)*((_QWORD *)a8 + 1);
  v11 = (unsigned __int8 *)*((_QWORD *)a8 + 2);
  v12 = *(__int16 **)(a3 + 104);
  v13 = **(__int16 **)(a3 + 80);
  v14 = **(__int16 **)(a3 + 128);
  v15 = *a8;
  v16 = *a1;
  v17 = 4 * a2;
  bzero(a4, v17);
  bzero(a5, v17);
  if (v10)
  {
    v18 = *v10;
    if (v11)
    {
LABEL_3:
      v19 = *v11;
      goto LABEL_6;
    }
  }
  else
  {
    v18 = 32;
    if (v11)
      goto LABEL_3;
  }
  v19 = 32;
LABEL_6:
  v20 = v16 >> 31;
  v21 = ((v16 >> 31) ^ v16) + (v16 >> 31) + ((*v12 + (1 << v15 >> 1)) >> v15);
  if (v21 >= 0x7FFF)
    v21 = 0x7FFF;
  if (v21 <= -32768)
    v21 = -32768;
  v22 = (v18 * v13 * (uint64_t)v21) >> (21 - v15);
  *a4 = (v20 ^ v22) - v20;
  *a5 = (((((v19 * v14 + 16) >> 5) * (int)v22) >> v15) ^ v20) - v20;
  *a6 = (_DWORD)v22 != 0;
}

uint64_t av1_build_quantizer(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  __int16 v14;
  int v15;
  _WORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  _WORD *v23;
  char v24;
  int v25;
  _WORD *v26;
  __int16 v27;
  char v28;
  _WORD *v29;
  int v30;
  _WORD *v31;
  __int16 v32;
  char v33;
  _WORD *v34;
  _WORD *v35;
  __int16 v36;
  char v37;
  _WORD *v38;
  int v39;
  _WORD *v40;
  __int16 v41;
  char v42;
  int v43;
  _WORD *v44;
  __int16 v45;
  uint64_t v46;
  _WORD *v47;
  _WORD *v48;
  char v49;
  _WORD *v50;
  _WORD *v51;
  _WORD *v52;
  _WORD *v53;
  _WORD *v54;
  __int16 *v55;
  uint64_t v56;
  uint64_t v57;
  _WORD *v58;
  _WORD *v59;
  unsigned int v61;
  uint64_t v63;
  _WORD *v64;
  _WORD *v65;
  _WORD *v66;
  _WORD *v67;
  _WORD *v68;
  _WORD *v69;
  _WORD *v70;
  _WORD *v71;
  _WORD *v72;
  _WORD *v73;
  unsigned int v74;
  _WORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v8 = a8;
  v9 = 0;
  v78 = a8 + 4100;
  v79 = a7;
  v10 = a8;
  v61 = result;
  v63 = a7;
  do
  {
    if ((int)v9 >= 255)
      v11 = 255;
    else
      v11 = v9;
    v12 = v11 & ~(v11 >> 31);
    switch((_DWORD)result)
    {
      case 8:
        v13 = &dc_qlookup_QTX;
        break;
      case 0xC:
        v13 = &dc_qlookup_12_QTX;
        break;
      case 0xA:
        v13 = &dc_qlookup_10_QTX;
        break;
      default:
        v14 = -1;
        v76 = v10;
        v74 = v12;
        goto LABEL_12;
    }
    v14 = v13[v12];
    v76 = v10;
    v74 = v12;
    if ((_DWORD)result == 8)
    {
      v15 = 148;
      v16 = &dc_qlookup_QTX;
      goto LABEL_18;
    }
LABEL_12:
    if ((_DWORD)result == 12)
    {
      v15 = 2368;
      v16 = &dc_qlookup_12_QTX;
    }
    else
    {
      if ((_DWORD)result != 10)
      {
        if (v9)
          v19 = 48;
        else
          v19 = 64;
        v21 = -1;
        v18 = -1;
        goto LABEL_34;
      }
      v15 = 592;
      v16 = &dc_qlookup_10_QTX;
    }
LABEL_18:
    if (v15 <= v14)
      v17 = 80;
    else
      v17 = 84;
    if (v9)
      v18 = v17;
    else
      v18 = 64;
    if (v9)
      v19 = 48;
    else
      v19 = 64;
    v20 = v9 + a2;
    if ((int)v9 + a2 >= 255)
      v20 = 255;
    v21 = v16[v20 & ~(v20 >> 31)];
LABEL_34:
    v22 = 16 * v9;
    v23 = (_WORD *)(a7 + 16 * v9);
    v24 = __clz(v21) ^ 0x1F;
    *v23 = (0x10000 << v24) / v21 + 1;
    v23[2048] = 1 << (16 - v24);
    v23[0x2000] = 0x10000 / v21;
    v23[14336] = v21 >> 1;
    v23[4096] = (v18 * v21 + 64) >> 7;
    v23[6144] = (v19 * v21) >> 7;
    *(_WORD *)(v8 + 16 * v9) = v21;
    v25 = v9 + a3;
    if ((int)v9 + a3 >= 255)
      v25 = 255;
    switch((_DWORD)result)
    {
      case 8:
        v26 = &dc_qlookup_QTX;
        goto LABEL_42;
      case 0xC:
        v26 = &dc_qlookup_12_QTX;
        goto LABEL_42;
      case 0xA:
        v26 = &dc_qlookup_10_QTX;
LABEL_42:
        v27 = v26[v25 & ~(v25 >> 31)];
        goto LABEL_44;
    }
    v27 = -1;
LABEL_44:
    v28 = __clz(v27) ^ 0x1F;
    v29 = (_WORD *)(a7 + v22);
    v29[20480] = (0x10000 << v28) / v27 + 1;
    v29[24576] = 1 << (16 - v28);
    v29[10240] = 0x10000 / v27;
    v29[0x4000] = v27 >> 1;
    v29[28672] = (v18 * v27 + 64) >> 7;
    v29[0x8000] = (v19 * v27) >> 7;
    *(_WORD *)(v8 + v22 + 4096) = v27;
    v30 = v9 + a5;
    if ((int)v9 + a5 >= 255)
      v30 = 255;
    switch((_DWORD)result)
    {
      case 8:
        v31 = &dc_qlookup_QTX;
        goto LABEL_52;
      case 0xC:
        v31 = &dc_qlookup_12_QTX;
        goto LABEL_52;
      case 0xA:
        v31 = &dc_qlookup_10_QTX;
LABEL_52:
        v32 = v31[v30 & ~(v30 >> 31)];
        goto LABEL_54;
    }
    v32 = -1;
LABEL_54:
    v33 = __clz(v32) ^ 0x1F;
    v34 = (_WORD *)(a7 + v22);
    v34[22528] = (0x10000 << v33) / v32 + 1;
    v34[26624] = 1 << (16 - v33);
    v34[12288] = 0x10000 / v32;
    v34[18432] = v32 >> 1;
    v34[30720] = (v18 * v32 + 64) >> 7;
    *(_WORD *)(a7 + v22 + 69632) = (v19 * v32) >> 7;
    *(_WORD *)(v8 + v22 + 0x2000) = v32;
    switch((_DWORD)result)
    {
      case 8:
        v35 = &ac_qlookup_QTX;
        goto LABEL_60;
      case 0xC:
        v35 = &ac_qlookup_12_QTX;
        goto LABEL_60;
      case 0xA:
        v35 = &ac_qlookup_10_QTX;
LABEL_60:
        v36 = v35[v74];
        goto LABEL_62;
    }
    v36 = -1;
LABEL_62:
    v37 = __clz(v36) ^ 0x1F;
    *(_WORD *)(a7 + v22 + 2) = (0x10000 << v37) / v36 + 1;
    v38 = (_WORD *)(a7 + v22 + 2);
    *(_WORD *)(a7 + v22 + 4098) = 1 << (16 - v37);
    *(_WORD *)(a7 + v22 + 16386) = 0x10000 / v36;
    *(_WORD *)(a7 + v22 + 28674) = v36 >> 1;
    *(_WORD *)(a7 + v22 + 8194) = (v18 * v36 + 64) >> 7;
    *(_WORD *)(a7 + v22 + 12290) = (v19 * v36) >> 7;
    *(_WORD *)(v8 + v22 + 2) = v36;
    v39 = v9 + a4;
    if ((int)v9 + a4 >= 255)
      v39 = 255;
    v73 = (_WORD *)(a7 + v22 + 28674);
    v75 = (_WORD *)(a7 + v22 + 16386);
    v70 = (_WORD *)(v8 + v22 + 2);
    v71 = (_WORD *)(a7 + v22 + 12290);
    switch((_DWORD)result)
    {
      case 8:
        v40 = &ac_qlookup_QTX;
        goto LABEL_70;
      case 0xC:
        v40 = &ac_qlookup_12_QTX;
        goto LABEL_70;
      case 0xA:
        v40 = &ac_qlookup_10_QTX;
LABEL_70:
        v41 = v40[v39 & ~(v39 >> 31)];
        goto LABEL_72;
    }
    v41 = -1;
LABEL_72:
    v42 = __clz(v41) ^ 0x1F;
    *(_WORD *)(a7 + v22 + 40962) = (0x10000 << v42) / v41 + 1;
    *(_WORD *)(a7 + v22 + 49154) = 1 << (16 - v42);
    *(_WORD *)(a7 + v22 + 20482) = 0x10000 / v41;
    *(_WORD *)(a7 + v22 + 32770) = v41 >> 1;
    *(_WORD *)(a7 + v22 + 57346) = (v18 * v41 + 64) >> 7;
    *(_WORD *)(a7 + v22 + 65538) = (v19 * v41) >> 7;
    *(_WORD *)(v8 + v22 + 4098) = v41;
    v43 = v9 + a6;
    if ((int)v9 + a6 >= 255)
      v43 = 255;
    v77 = v9;
    v72 = (_WORD *)(a7 + v22 + 8194);
    v68 = (_WORD *)(a7 + v22 + 49154);
    v69 = (_WORD *)(a7 + v22 + 40962);
    v66 = (_WORD *)(a7 + v22 + 32770);
    v67 = (_WORD *)(a7 + v22 + 20482);
    v64 = (_WORD *)(a7 + v22 + 65538);
    v65 = (_WORD *)(a7 + v22 + 57346);
    switch((_DWORD)result)
    {
      case 8:
        v44 = &ac_qlookup_QTX;
        break;
      case 0xC:
        v44 = &ac_qlookup_12_QTX;
        break;
      case 0xA:
        v44 = &ac_qlookup_10_QTX;
        break;
      default:
        v45 = -1;
        goto LABEL_82;
    }
    v45 = v44[v43 & ~(v43 >> 31)];
LABEL_82:
    v46 = 0;
    v47 = (_WORD *)(a7 + v22 + 45058);
    v48 = (_WORD *)(a7 + v22 + 53250);
    v49 = __clz(v45) ^ 0x1F;
    *v47 = (0x10000 << v49) / v45 + 1;
    *v48 = 1 << (16 - v49);
    v50 = (_WORD *)(a7 + v22 + 24578);
    *v50 = 0x10000 / v45;
    v51 = (_WORD *)(a7 + v22 + 36866);
    *v51 = v45 >> 1;
    v52 = (_WORD *)(v8 + v22 + 4098);
    v53 = (_WORD *)(a7 + v22 + 61442);
    *v53 = (v18 * v45 + 64) >> 7;
    v54 = (_WORD *)(a7 + v22 + 69634);
    *v54 = (v19 * v45) >> 7;
    v55 = (__int16 *)(v8 + v22 + 8194);
    *v55 = v45;
    v56 = v79;
    do
    {
      v57 = v56 + v46;
      *(_WORD *)(v57 + 4) = *v38;
      v58 = (_WORD *)(v79 + 4100 + v46);
      v58[6144] = *v75;
      v58[12288] = *v73;
      *(_WORD *)(v57 + 4100) = v38[2048];
      v58[2048] = *v72;
      v58[4096] = *v71;
      *(_WORD *)(v76 + v46 + 4) = *v70;
      v58[18432] = *v69;
      v58[0x2000] = *v67;
      v58[14336] = *v66;
      v58[22528] = *v68;
      v58[26624] = *v65;
      v58[30720] = *v64;
      v59 = (_WORD *)(v78 + v46);
      *v59 = *v52;
      v58[20480] = *v47;
      v58[10240] = *v50;
      v58[0x4000] = *v51;
      v58[24576] = *v48;
      v58[28672] = *v53;
      v58[0x8000] = *v54;
      v56 = v79;
      v59[2048] = *v55;
      v46 += 2;
    }
    while (v46 != 12);
    v9 = v77 + 1;
    v78 += 16;
    v79 += 16;
    v10 = v76 + 16;
    a7 = v63;
    v8 = a8;
    result = v61;
  }
  while (v77 != 255);
  return result;
}

uint64_t *av1_init_plane_quantizers(uint64_t *result, uint64_t a2, int a3, int a4)
{
  unsigned int *v4;
  _DWORD *v5;
  unsigned __int8 *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  _BOOL4 v25;
  int v26;
  unsigned int v27;
  double v28;
  double v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  int v90;
  int v91;
  int v92;
  _DWORD *v93;

  v4 = (unsigned int *)(a2 + 16904);
  v5 = result + 32926;
  v6 = (unsigned __int8 *)(result + 32252);
  v7 = (int *)(result + 29957);
  v8 = *result;
  v9 = *(_DWORD *)(*result + 35636);
  if (v9 <= 1599)
    v10 = v9 / 100;
  else
    v10 = 15;
  v11 = *((unsigned __int8 *)result + 456696);
  if (*(int *)(v8 + 4 * v11 + 1152) >= 6)
    v12 = 6;
  else
    v12 = *(_DWORD *)(v8 + 4 * v11 + 1152);
  v13 = *v7;
  v14 = *v7;
  if (*v5)
    v14 = *(_DWORD *)(a2 + 16908) + v13;
  v15 = v14 & ~(v14 >> 31);
  if (v15 >= 255)
    v16 = 255;
  else
    v16 = v15;
  v17 = *((unsigned __int8 *)result + 258032);
  if (*((_BYTE *)result + 258032) && (*((_DWORD *)result + a3 + 64541) & 1) != 0)
  {
    v18 = v16 + SWORD2(result[2 * a3 + 32254]);
    if (v18 >= 255)
      v18 = 255;
    v16 = v18 & ~(v18 >> 31);
  }
  v19 = v16;
  if (*((_DWORD *)result + 66414))
  {
    if (*v5)
      v13 += *(_DWORD *)(a2 + 16912);
    v19 = v13 & ~(v13 >> 31);
    if (v19 >= 255)
      v19 = 255;
    if (*((_BYTE *)result + 258032) && (*((_DWORD *)result + a3 + 64541) & 1) != 0)
    {
      v20 = v19 + SWORD2(result[2 * a3 + 32254]);
      if (v20 >= 255)
        v20 = 255;
      v19 = v20 & ~(v20 >> 31);
    }
  }
  v21 = *((_DWORD *)result + 59915) + v19;
  v22 = *(_DWORD *)(result[32965] + 72);
  v23 = *(unsigned __int8 *)(v8 + v11 + 400);
  v24 = *((_DWORD *)result + 66398);
  if (v24 > 1)
    v25 = 1;
  else
    v25 = !v24 && !*((_BYTE *)result + 637416) && *(_DWORD *)(*result + 23172) != 0;
  if (v21 >= 255)
    v21 = 255;
  switch(v22)
  {
    case 8:
      v26 = dc_qlookup_QTX[v21 & ~(v21 >> 31)];
      v27 = v26 * v26;
      if (!v23)
        goto LABEL_48;
      break;
    case 12:
      v26 = dc_qlookup_12_QTX[v21 & ~(v21 >> 31)];
      v27 = v26 * v26;
      if (!v23)
        goto LABEL_48;
      break;
    case 10:
      v26 = dc_qlookup_10_QTX[v21 & ~(v21 >> 31)];
      v27 = v26 * v26;
      if (v23)
        break;
LABEL_48:
      v30 = *((unsigned __int8 *)result + 239040);
      v31 = (uint64_t)(((double)v26 * 0.0015 + 3.3) * (double)v27);
      if (v22 == 8)
        goto LABEL_53;
      goto LABEL_49;
    default:
      v26 = -1;
      v27 = 1;
      if (!v23)
        goto LABEL_48;
      break;
  }
  v28 = (double)v26;
  v29 = (double)v27;
  if ((v23 & 0xFE) == 2)
  {
    v30 = *((unsigned __int8 *)result + 239040);
    v31 = (uint64_t)((v28 * 0.0015 + 3.25) * v29);
    if (v22 == 8)
      goto LABEL_53;
  }
  else
  {
    v30 = *((unsigned __int8 *)result + 239040);
    v31 = (uint64_t)((v28 * 0.0015 + 3.2) * v29);
    if (v22 == 8)
      goto LABEL_53;
  }
LABEL_49:
  if (v22 == 12)
  {
    v31 = (v31 + 128) >> 8;
  }
  else
  {
    if (v22 != 10)
    {
      v32 = -1;
      v33 = (int *)(a2 + 86568);
      if (!v30)
        goto LABEL_63;
      goto LABEL_60;
    }
    v31 = (v31 + 8) >> 4;
  }
LABEL_53:
  v32 = 0x7FFFFFFF;
  if (v31 < 0x7FFFFFFF)
    v32 = v31;
  if (v31 <= 0)
    v32 = 1;
  v33 = (int *)(a2 + 86568);
  if (v30)
  {
LABEL_60:
    if (!*((_DWORD *)result + 66180) && v25)
    {
      v34 = (rd_layer_depth_factor[v12] * (uint64_t)v32) >> 7;
      v32 = ((unint64_t)(v34 * rd_boost_factor_0[v10]) >> 7) + v34;
    }
  }
LABEL_63:
  if (!a4 && *v4 == v16)
  {
    v35 = *v6;
    if (v33[8] == a3)
      goto LABEL_66;
LABEL_70:
    v36 = a3;
    if (!v35)
      goto LABEL_72;
    goto LABEL_71;
  }
  *v4 = v16;
  v37 = &result[2 * v16];
  v33[2] = 0;
  *(_QWORD *)(a2 + 80) = v37 + 2050;
  *(_QWORD *)(a2 + 88) = v37 + 3586;
  *(_QWORD *)(a2 + 112) = v37 + 514;
  *(_QWORD *)(a2 + 120) = v37 + 1026;
  *(_QWORD *)(a2 + 96) = v37 + 2;
  *(_QWORD *)(a2 + 104) = v37 + 1538;
  *(_QWORD *)(a2 + 128) = v37 + 9218;
  *(_QWORD *)(a2 + 216) = v37 + 2562;
  *(_QWORD *)(a2 + 224) = v37 + 4098;
  *(_QWORD *)(a2 + 248) = v37 + 6146;
  *(_QWORD *)(a2 + 256) = v37 + 7170;
  *(_QWORD *)(a2 + 232) = v37 + 5122;
  *(_QWORD *)(a2 + 240) = v37 + 8194;
  *(_QWORD *)(a2 + 264) = v37 + 9730;
  *(_QWORD *)(a2 + 352) = v37 + 3074;
  *(_QWORD *)(a2 + 360) = v37 + 4610;
  *(_QWORD *)(a2 + 384) = v37 + 6658;
  *(_QWORD *)(a2 + 392) = v37 + 7682;
  *(_QWORD *)(a2 + 368) = v37 + 5634;
  *(_QWORD *)(a2 + 376) = v37 + 8706;
  *(_QWORD *)(a2 + 400) = v37 + 10242;
  v35 = *v6;
  if (v33[8] != a3)
    goto LABEL_70;
LABEL_66:
  if (!v35 || *(_DWORD *)(a2 + 4 * a3 + 11108))
    goto LABEL_75;
  v36 = a3;
LABEL_71:
  if (!*(_DWORD *)(a2 + 4 * v36 + 11108))
  {
    v39 = *((_DWORD *)result + 64505);
    v38 = *((_DWORD *)result + 64506);
    v40 = *((_DWORD *)result + 64507);
    goto LABEL_74;
  }
LABEL_72:
  v38 = 15;
  v39 = 15;
  v40 = 15;
LABEL_74:
  v41 = (uint64_t)&result[57 * v39 + 30884];
  v42 = *(_OWORD *)v41;
  v43 = a2 + 152 * (int)v36;
  *(_OWORD *)(v43 + 1840) = *(_OWORD *)(v41 + 16);
  *(_OWORD *)(v43 + 1824) = v42;
  v44 = *(_OWORD *)(v41 + 32);
  v45 = *(_OWORD *)(v41 + 48);
  v46 = *(_OWORD *)(v41 + 64);
  *(_OWORD *)(v43 + 1904) = *(_OWORD *)(v41 + 80);
  *(_OWORD *)(v43 + 1888) = v46;
  *(_OWORD *)(v43 + 1872) = v45;
  *(_OWORD *)(v43 + 1856) = v44;
  v47 = *(_OWORD *)(v41 + 96);
  v48 = *(_OWORD *)(v41 + 112);
  v49 = *(_OWORD *)(v41 + 128);
  *(_QWORD *)(v43 + 1968) = *(_QWORD *)(v41 + 144);
  *(_OWORD *)(v43 + 1952) = v49;
  *(_OWORD *)(v43 + 1936) = v48;
  *(_OWORD *)(v43 + 1920) = v47;
  v50 = (uint64_t)&result[57 * v39 + 29972];
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)(v43 + 608) = *(_OWORD *)v50;
  *(_OWORD *)(v43 + 624) = v51;
  v52 = *(_OWORD *)(v50 + 32);
  v53 = *(_OWORD *)(v50 + 48);
  v54 = *(_OWORD *)(v50 + 80);
  *(_OWORD *)(v43 + 672) = *(_OWORD *)(v50 + 64);
  *(_OWORD *)(v43 + 688) = v54;
  *(_OWORD *)(v43 + 640) = v52;
  *(_OWORD *)(v43 + 656) = v53;
  v55 = *(_OWORD *)(v50 + 96);
  v56 = *(_OWORD *)(v50 + 112);
  v57 = *(_OWORD *)(v50 + 128);
  *(_QWORD *)(v43 + 752) = *(_QWORD *)(v50 + 144);
  *(_OWORD *)(v43 + 720) = v56;
  *(_OWORD *)(v43 + 736) = v57;
  *(_OWORD *)(v43 + 704) = v55;
  v58 = (uint64_t)&result[57 * v38 + 30884];
  v59 = *(_OWORD *)(v58 + 152);
  *(_OWORD *)(v43 + 4448) = *(_OWORD *)(v58 + 168);
  *(_OWORD *)(v43 + 4432) = v59;
  v60 = *(_OWORD *)(v58 + 184);
  v61 = *(_OWORD *)(v58 + 200);
  v62 = *(_OWORD *)(v58 + 216);
  *(_OWORD *)(v43 + 4512) = *(_OWORD *)(v58 + 232);
  *(_OWORD *)(v43 + 4496) = v62;
  *(_OWORD *)(v43 + 4480) = v61;
  *(_OWORD *)(v43 + 4464) = v60;
  v63 = *(_OWORD *)(v58 + 248);
  v64 = *(_OWORD *)(v58 + 264);
  v65 = *(_OWORD *)(v58 + 280);
  *(_QWORD *)(v43 + 4576) = *(_QWORD *)(v58 + 296);
  *(_OWORD *)(v43 + 4560) = v65;
  *(_OWORD *)(v43 + 4544) = v64;
  *(_OWORD *)(v43 + 4528) = v63;
  v66 = (uint64_t)&result[57 * v38 + 29972];
  v67 = *(_OWORD *)(v66 + 152);
  *(_OWORD *)(v43 + 3232) = *(_OWORD *)(v66 + 168);
  *(_OWORD *)(v43 + 3216) = v67;
  v68 = *(_OWORD *)(v66 + 184);
  v69 = *(_OWORD *)(v66 + 200);
  v70 = *(_OWORD *)(v66 + 216);
  *(_OWORD *)(v43 + 3296) = *(_OWORD *)(v66 + 232);
  *(_OWORD *)(v43 + 3280) = v70;
  *(_OWORD *)(v43 + 3264) = v69;
  *(_OWORD *)(v43 + 3248) = v68;
  v71 = *(_OWORD *)(v66 + 248);
  v72 = *(_OWORD *)(v66 + 264);
  v73 = *(_OWORD *)(v66 + 280);
  *(_QWORD *)(v43 + 3360) = *(_QWORD *)(v66 + 296);
  *(_OWORD *)(v43 + 3344) = v73;
  *(_OWORD *)(v43 + 3328) = v72;
  *(_OWORD *)(v43 + 3312) = v71;
  v74 = (uint64_t)&result[57 * v40 + 30884];
  v75 = *(_OWORD *)(v74 + 304);
  *(_OWORD *)(v43 + 7056) = *(_OWORD *)(v74 + 320);
  *(_OWORD *)(v43 + 7040) = v75;
  v76 = *(_OWORD *)(v74 + 336);
  v77 = *(_OWORD *)(v74 + 352);
  v78 = *(_OWORD *)(v74 + 368);
  *(_OWORD *)(v43 + 7120) = *(_OWORD *)(v74 + 384);
  *(_OWORD *)(v43 + 7104) = v78;
  *(_OWORD *)(v43 + 7088) = v77;
  *(_OWORD *)(v43 + 7072) = v76;
  v79 = *(_OWORD *)(v74 + 400);
  v80 = *(_OWORD *)(v74 + 416);
  v81 = *(_OWORD *)(v74 + 432);
  *(_QWORD *)(v43 + 7184) = *(_QWORD *)(v74 + 448);
  *(_OWORD *)(v43 + 7168) = v81;
  *(_OWORD *)(v43 + 7152) = v80;
  *(_OWORD *)(v43 + 7136) = v79;
  v82 = (uint64_t)&result[57 * v40 + 29972];
  v83 = *(_OWORD *)(v82 + 304);
  *(_OWORD *)(v43 + 5840) = *(_OWORD *)(v82 + 320);
  *(_OWORD *)(v43 + 5824) = v83;
  v84 = *(_OWORD *)(v82 + 336);
  v85 = *(_OWORD *)(v82 + 352);
  v86 = *(_OWORD *)(v82 + 368);
  *(_OWORD *)(v43 + 5904) = *(_OWORD *)(v82 + 384);
  *(_OWORD *)(v43 + 5888) = v86;
  *(_OWORD *)(v43 + 5872) = v85;
  *(_OWORD *)(v43 + 5856) = v84;
  v87 = *(_OWORD *)(v82 + 400);
  v88 = *(_OWORD *)(v82 + 416);
  v89 = *(_OWORD *)(v82 + 432);
  *(_QWORD *)(v43 + 5968) = *(_QWORD *)(v82 + 448);
  *(_OWORD *)(v43 + 5952) = v89;
  *(_OWORD *)(v43 + 5936) = v88;
  *(_OWORD *)(v43 + 5920) = v87;
  v17 = *((unsigned __int8 *)result + 258032);
LABEL_75:
  if (v17)
    v90 = (*((_DWORD *)result + a3 + 64541) >> 6) & 1;
  else
    v90 = 0;
  v33[2] = v90;
  v91 = v32 >> 6;
  if (v32 >> 6 <= 1)
    v91 = 1;
  *v33 = v91;
  v92 = *(_DWORD *)(result[32965] + 72);
  switch(v92)
  {
    case 8:
      v93 = &sad_per_bit_lut_8;
      goto LABEL_86;
    case 12:
      v93 = &sad_per_bit_lut_12;
      goto LABEL_86;
    case 10:
      v93 = &sad_per_bit_lut_10;
LABEL_86:
      v33[1] = v93[v19];
      break;
  }
  v33[8] = a3;
  return result;
}

uint64_t setup_rtcd_internal_5()
{
  uint64_t result;

  result = aom_arm_cpu_caps();
  av1_convolve_2d_sr = (uint64_t)av1_convolve_2d_sr_neon;
  av1_convolve_x_sr = (uint64_t)av1_convolve_x_sr_neon;
  av1_convolve_y_sr = av1_convolve_y_sr_neon;
  av1_dist_wtd_convolve_2d = (uint64_t)av1_dist_wtd_convolve_2d_neon;
  av1_dist_wtd_convolve_x = (uint64_t)av1_dist_wtd_convolve_x_neon;
  av1_get_crc32c_value = av1_get_crc32c_value_c;
  av1_warp_affine = av1_warp_affine_neon;
  return result;
}

_WORD *av1_denoiser_denoise(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, int *a7, int a8)
{
  _QWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  __int128 *v36;
  int v37;
  _WORD *result;
  char v39;
  int v40;
  unsigned int v41;
  int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  _QWORD *v53;
  unsigned int v54;
  int v55;
  int *v56;
  int v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  _BOOL4 v64;
  int v65;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;

  v12 = (_QWORD *)(a1 + 637488);
  v13 = *(_DWORD *)(a1 + 637040);
  v14 = *(_DWORD *)(a1 + 637032);
  v15 = v13 - v14;
  if (v13 - v14 == 2)
    v16 = *(_DWORD *)(a1 + 637704);
  else
    v16 = 0;
  v17 = 0;
  v18 = *v12 + 192 * v16;
  v19 = *(int *)(v18 + 32);
  v20 = *(_QWORD *)(v18 + 40);
  v21 = 4 * a3;
  v22 = v20 + (int)v19 * 4 * a3;
  v23 = 4 * a4;
  v24 = (_WORD *)(v22 + v23);
  v25 = *(_WORD **)(a2 + 48);
  v26 = *(int *)(a2 + 72);
  v27 = *(_DWORD *)(a1 + 637716);
  if ((*(_BYTE *)(a1 + 388632) & 1) == 0)
  {
    v28 = 0;
    goto LABEL_18;
  }
  v28 = 0;
  if (!v27)
  {
LABEL_18:
    result = aom_convolve_copy_neon(v25, v26, v24, v19, block_size_wide_1[a5], block_size_high_0[a5]);
    v39 = 0;
    goto LABEL_19;
  }
  if (*(_DWORD *)(a6 + 508))
  {
    v17 = 0;
    v28 = 0;
    goto LABEL_18;
  }
  v29 = *(_QWORD *)(a1 + 637496) + 192 * (v13 + ~v14);
  v30 = *(_QWORD *)(a6 + 472);
  v64 = v27 == 3;
  if (v30 == 0xFFFFFFFFLL)
    v31 = 0;
  else
    v31 = *(_DWORD *)(a6 + 480) - v30;
  v65 = *(_DWORD *)(v29 + 32);
  v32 = *(_QWORD *)(v29 + 40);
  v33 = *(_DWORD *)(*(_QWORD *)a1 + 84892);
  v34 = *(_DWORD *)(*(_QWORD *)a1 + 84904);
  v35 = *(_DWORD *)(*(_QWORD *)a1 + 50960);
  v36 = **(__int128 ***)(a2 + 8280);
  v37 = *(char *)(a6 + 504);
  v87 = v36[8];
  v88 = v36[9];
  v89 = v36[10];
  v83 = v36[4];
  v84 = v36[5];
  v85 = v36[6];
  v86 = v36[7];
  v79 = *v36;
  v80 = v36[1];
  v81 = v36[2];
  v82 = v36[3];
  if (a5 - 3 < 3 || a5 == 6 && **(int **)(a1 + 265672) >= 481 && v27 < 2)
  {
    v28 = 0;
LABEL_17:
    v17 = 0;
    goto LABEL_18;
  }
  v41 = *(__int16 *)(a6 + 502) * *(__int16 *)(a6 + 502) + *(__int16 *)(a6 + 500) * *(__int16 *)(a6 + 500);
  LOBYTE(v42) = *(_BYTE *)(a6 + 504);
  v63 = v41;
  if (v42 > 7u || ((1 << v37) & 0x91) == 0)
  {
    if (v41 < 0x272 || v27 == 3)
    {
      v50 = v41 >= 0x272 ? 4 : 16;
      v48 = v50 << num_pels_log2_lookup_1[a5];
    }
    else
    {
      v48 = 0;
    }
    if (v31 > v48)
    {
      v51 = *(__int16 *)(a6 + 502) * *(__int16 *)(a6 + 502) + *(__int16 *)(a6 + 500) * *(__int16 *)(a6 + 500);
      v28 = 0;
      *((_BYTE *)v36 + 16) = v37;
      *((_BYTE *)v36 + 2) = *(_BYTE *)(a6 + 496);
      *((_DWORD *)v36 + 2) = *(_DWORD *)(a6 + 500);
      v47 = v51;
      if (!v35)
        goto LABEL_60;
LABEL_43:
      if (v37 == 4)
      {
        v37 = v34 + 1;
      }
      else if (v37 == 1)
      {
        v37 = v33 + 1;
      }
      if (v15 == 2)
        v37 += *(_DWORD *)(a1 + 637704);
      v49 = v15 - 1;
      if (!*(_QWORD *)(*v12 + 192 * v37 + 96))
        goto LABEL_71;
      goto LABEL_61;
    }
  }
  v42 = *(unsigned __int8 *)(a6 + 505);
  v43 = a8 != 0;
  v44 = v13 < 2 || a8 != 0;
  v45 = *(_QWORD *)(a6 + 480);
  *(_QWORD *)(a6 + 472) = v45;
  if (v42 != 4)
    v43 = 0;
  if (!v44 || v42 == 7 || v43)
  {
    v46 = *(_QWORD *)(a6 + 488);
  }
  else
  {
    v42 = (char)v42;
    if ((char)v42 == 1)
      goto LABEL_39;
    v46 = *(_QWORD *)(a6 + 488);
    if (v46 >= (5 * v45) >> 2 && v27 < 3)
      goto LABEL_39;
  }
  *(_QWORD *)(a6 + 472) = v46;
  v42 = 1;
LABEL_39:
  *((_BYTE *)v36 + 16) = v42;
  *((_BYTE *)v36 + 2) = 15;
  *((_DWORD *)v36 + 2) = 0;
  *(_BYTE *)(a6 + 496) = 15;
  *(_DWORD *)(a6 + 500) = 0;
  if (*(_DWORD *)(a1 + 637716) <= 2u)
    v47 = v41;
  else
    v47 = 0;
  v28 = 1;
  v37 = v42;
  if (v35)
    goto LABEL_43;
LABEL_60:
  v49 = 0;
  if (!*(_QWORD *)(*v12 + 192 * v37 + 96))
  {
LABEL_71:
    v36[8] = v87;
    v36[9] = v88;
    v36[10] = v89;
    v36[4] = v83;
    v36[5] = v84;
    v36[6] = v85;
    v36[7] = v86;
    *v36 = v79;
    v36[1] = v80;
    v36[2] = v81;
    v36[3] = v82;
    goto LABEL_17;
  }
LABEL_61:
  if (v27 == 3)
    v52 = 80;
  else
    v52 = 40;
  if (*(_QWORD *)(a6 + 472) > (uint64_t)(v52 << num_pels_log2_lookup_1[a5]) || v47 > 5000)
    goto LABEL_71;
  v53 = (_QWORD *)(v32 + v65 * v21 + v23);
  v62 = a2 + 416;
  v67 = *(_OWORD *)(a2 + 480);
  v68 = *(_OWORD *)(a2 + 496);
  v73 = *(_OWORD *)(a2 + 448);
  v74 = *(_OWORD *)(a2 + 464);
  v69 = *(_OWORD *)(a2 + 3088);
  v70 = *(_OWORD *)(a2 + 3104);
  v75 = *(_OWORD *)(a2 + 3056);
  v76 = *(_OWORD *)(a2 + 3072);
  v71 = *(_OWORD *)(a2 + 5696);
  v72 = *(_OWORD *)(a2 + 5712);
  v54 = (char)v42;
  if ((char)v42 <= 1)
    v54 = 1;
  v77 = *(_OWORD *)(a2 + 5664);
  v78 = *(_OWORD *)(a2 + 5680);
  v60 = v53;
  v61 = v24;
  v59 = v49;
  if (v54 > 8 || (v55 = *(_DWORD *)(a1 + 239040 + 4 * (v54 - 1) + 240), v55 == -1))
    v56 = 0;
  else
    v56 = (int *)(a1 + 239040 + 16 * v55 + 288);
  *(_QWORD *)(a2 + 8360) = v56;
  v57 = *(_DWORD *)(a1 + 239280);
  if (v57 == -1)
    v58 = 0;
  else
    v58 = a1 + 16 * v57 + 239328;
  *(_QWORD *)(a2 + 8368) = v58;
  av1_setup_pre_planes(v62, 0, *v12 + 192 * v37, a3, a4, v56, 1);
  av1_setup_dst_planes(a2 + 432, a5, v12[1] + 192 * v59, a3, a4, 0, 1);
  av1_enc_build_inter_predictor_y(v62, a3, a4);
  v36[4] = v83;
  v36[5] = v84;
  v36[9] = v88;
  v36[10] = v89;
  v36[6] = v85;
  v36[7] = v86;
  v36[8] = v87;
  *v36 = v79;
  v36[1] = v80;
  v36[2] = v81;
  v36[3] = v82;
  *(_OWORD *)(a2 + 480) = v67;
  *(_OWORD *)(a2 + 496) = v68;
  *(_OWORD *)(a2 + 448) = v73;
  *(_OWORD *)(a2 + 464) = v74;
  *(_OWORD *)(a2 + 3088) = v69;
  *(_OWORD *)(a2 + 3104) = v70;
  *(_OWORD *)(a2 + 3056) = v75;
  *(_OWORD *)(a2 + 3072) = v76;
  *(_OWORD *)(a2 + 5696) = v71;
  *(_OWORD *)(a2 + 5712) = v72;
  *(_OWORD *)(a2 + 5664) = v77;
  *(_OWORD *)(a2 + 5680) = v78;
  v17 = av1_denoiser_filter_neon(v25, v26, v60, v65, v61, v19, v64, a5, v63);
  if (!v17)
  {
    v24 = v61;
    goto LABEL_18;
  }
  result = aom_convolve_copy_neon(v61, v19, v25, v26, block_size_wide_1[a5], block_size_high_0[a5]);
  v39 = 1;
LABEL_19:
  if ((v39 & (v28 != 0)) != 0)
    v40 = 2;
  else
    v40 = v17;
  *a7 = v40;
  return result;
}

int *av1_denoiser_update_frame_info(int *result, uint64_t a2, uint64_t a3, int *a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14)
{
  int v19;
  int v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int *v48;
  int *v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int *v57;
  int *v58;
  uint64_t v59;
  int *v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int *v66;
  int *v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  int *v75;
  int *v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  int *v84;
  int *v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  int *v93;
  int *v94;
  uint64_t v95;
  int *v96;
  int v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  int *v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  int *v106;
  int v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  int *v112;
  int *v113;
  uint64_t v114;
  uint64_t v115;
  int *v116;
  int v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  int *v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  int v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  int *v132;
  int *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int *v143;
  int *v144;

  if (a14)
  {
    v19 = result[54];
    if (!a5)
      goto LABEL_7;
  }
  else
  {
    v19 = 0;
    if (!a5)
    {
LABEL_7:
      v20 = result[54];
      if (v20 >= 2)
      {
        for (i = 1; i < v20; ++i)
        {
          v22 = *(_QWORD *)result;
          v23 = i + v19;
          if (*(_QWORD *)(*(_QWORD *)result + 192 * v23 + 96))
          {
            v24 = (int *)(v22 + 192 * v23);
            if (v24[2] >= 1)
            {
              v25 = result;
              v26 = 0;
              v27 = v22 + 192 * v23;
              v28 = *(char **)(v27 + 40);
              v29 = *(char **)(a2 + 40);
              v30 = (int *)(v27 + 32);
              do
              {
                memcpy(v28, v29, *v24);
                v28 += *v30;
                v29 += *(int *)(a2 + 32);
                ++v26;
              }
              while (v26 < v24[2]);
              result = v25;
              v20 = v25[54];
            }
          }
        }
      }
      result[53] = 0;
      return result;
    }
  }
  if (a12 || result[53] | a13)
    goto LABEL_7;
  if (*(_DWORD *)(a3 + 88))
  {
    v143 = result;
    v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)result;
      v33 = (int *)(*(_QWORD *)result + 192 * (v19 + 1));
      if (v33[2] >= 1)
      {
        v34 = 0;
        v35 = v32 + 192 * (v19 + 1);
        v36 = *(char **)(v35 + 40);
        v37 = v32 + 192 * v19;
        v38 = *(char **)(v37 + 40);
        v39 = (int *)(v35 + 32);
        v40 = (int *)(v37 + 32);
        do
        {
          memcpy(v36, v38, *v33);
          v36 += *v39;
          v38 += *v40;
          ++v34;
        }
        while (v34 < v33[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 2) != 0)
    {
      v41 = *(_QWORD *)result;
      v42 = (int *)(*(_QWORD *)result + 192 * (v19 + 2));
      if (v42[2] >= 1)
      {
        v43 = 0;
        v44 = v41 + 192 * (v19 + 2);
        v45 = *(char **)(v44 + 40);
        v46 = v41 + 192 * v19;
        v47 = *(char **)(v46 + 40);
        v48 = (int *)(v44 + 32);
        v49 = (int *)(v46 + 32);
        do
        {
          memcpy(v45, v47, *v42);
          v45 += *v48;
          v47 += *v49;
          ++v43;
        }
        while (v43 < v42[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 4) != 0)
    {
      v50 = *(_QWORD *)result;
      v51 = (int *)(*(_QWORD *)result + 192 * (v19 + 3));
      if (v51[2] >= 1)
      {
        v52 = 0;
        v53 = v50 + 192 * (v19 + 3);
        v54 = *(char **)(v53 + 40);
        v55 = v50 + 192 * v19;
        v56 = *(char **)(v55 + 40);
        v57 = (int *)(v53 + 32);
        v58 = (int *)(v55 + 32);
        do
        {
          memcpy(v54, v56, *v51);
          v54 += *v57;
          v56 += *v58;
          ++v52;
        }
        while (v52 < v51[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 8) != 0)
    {
      v59 = *(_QWORD *)result;
      v60 = (int *)(*(_QWORD *)result + 192 * (v19 + 4));
      if (v60[2] >= 1)
      {
        v61 = 0;
        v62 = v59 + 192 * (v19 + 4);
        v63 = *(char **)(v62 + 40);
        v64 = v59 + 192 * v19;
        v65 = *(char **)(v64 + 40);
        v66 = (int *)(v62 + 32);
        v67 = (int *)(v64 + 32);
        do
        {
          memcpy(v63, v65, *v60);
          v63 += *v66;
          v65 += *v67;
          ++v61;
        }
        while (v61 < v60[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 0x10) != 0)
    {
      v68 = *(_QWORD *)result;
      v69 = (int *)(*(_QWORD *)result + 192 * (v19 + 5));
      if (v69[2] >= 1)
      {
        v70 = 0;
        v71 = v68 + 192 * (v19 + 5);
        v72 = *(char **)(v71 + 40);
        v73 = v68 + 192 * v19;
        v74 = *(char **)(v73 + 40);
        v75 = (int *)(v71 + 32);
        v76 = (int *)(v73 + 32);
        do
        {
          memcpy(v72, v74, *v69);
          v72 += *v75;
          v74 += *v76;
          ++v70;
        }
        while (v70 < v69[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 0x20) != 0)
    {
      v77 = *(_QWORD *)result;
      v78 = (int *)(*(_QWORD *)result + 192 * (v19 + 6));
      if (v78[2] >= 1)
      {
        v79 = 0;
        v80 = v77 + 192 * (v19 + 6);
        v81 = *(char **)(v80 + 40);
        v82 = v77 + 192 * v19;
        v83 = *(char **)(v82 + 40);
        v84 = (int *)(v80 + 32);
        v85 = (int *)(v82 + 32);
        do
        {
          memcpy(v81, v83, *v78);
          v81 += *v84;
          v83 += *v85;
          ++v79;
        }
        while (v79 < v78[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 0x40) != 0)
    {
      v86 = *(_QWORD *)result;
      v87 = (int *)(*(_QWORD *)result + 192 * (v19 + 7));
      if (v87[2] >= 1)
      {
        v88 = 0;
        v89 = v86 + 192 * (v19 + 7);
        v90 = *(char **)(v89 + 40);
        v91 = v86 + 192 * v19;
        v92 = *(char **)(v91 + 40);
        v93 = (int *)(v89 + 32);
        v94 = (int *)(v91 + 32);
        do
        {
          memcpy(v90, v92, *v87);
          v90 += *v93;
          v92 += *v94;
          ++v88;
        }
        while (v88 < v87[2]);
        v31 = *(_DWORD *)(a3 + 4 * *a4 + 56);
        result = v143;
      }
    }
    if ((v31 & 0x80) != 0)
    {
      v95 = *(_QWORD *)result;
      v96 = (int *)(*(_QWORD *)result + 192 * (v19 + 8));
      if (v96[2] >= 1)
      {
        v97 = 0;
        v98 = v95 + 192 * (v19 + 8);
        v99 = *(char **)(v98 + 40);
        v100 = v95 + 192 * v19;
        v101 = *(char **)(v100 + 40);
        v102 = (int *)(v98 + 32);
        v103 = (int *)(v100 + 32);
        do
        {
          result = (int *)memcpy(v99, v101, *v96);
          v99 += *v102;
          v101 += *v103;
          ++v97;
        }
        while (v97 < v96[2]);
      }
    }
  }
  else if (a7 + a6 + a8 < 2)
  {
    if (a6)
    {
      v134 = *(_QWORD *)result + 192 * (a9 + (uint64_t)v19);
      v135 = *(_QWORD *)(v134 + 232);
      v136 = *(_QWORD *)result + 192 * v19;
      *(_QWORD *)(v134 + 232) = *(_QWORD *)(v136 + 40);
      *(_QWORD *)(v136 + 40) = v135;
    }
    if (a7)
    {
      v137 = *(_QWORD *)result + 192 * (a10 + (uint64_t)v19);
      v138 = *(_QWORD *)(v137 + 232);
      v139 = *(_QWORD *)result + 192 * v19;
      *(_QWORD *)(v137 + 232) = *(_QWORD *)(v139 + 40);
      *(_QWORD *)(v139 + 40) = v138;
    }
    if (a8)
    {
      v140 = *(_QWORD *)result + 192 * (a11 + (uint64_t)v19);
      v141 = *(_QWORD *)(v140 + 232);
      v142 = *(_QWORD *)result + 192 * v19;
      *(_QWORD *)(v140 + 232) = *(_QWORD *)(v142 + 40);
      *(_QWORD *)(v142 + 40) = v141;
    }
  }
  else
  {
    v144 = result;
    if (a6)
    {
      v104 = *(_QWORD *)result;
      v105 = v19 + (uint64_t)a9 + 1;
      v106 = (int *)(*(_QWORD *)result + 192 * v105);
      if (v106[2] >= 1)
      {
        v107 = 0;
        v108 = v104 + 192 * v105;
        v109 = *(char **)(v108 + 40);
        v110 = v104 + 192 * v19;
        v111 = *(char **)(v110 + 40);
        v112 = (int *)(v108 + 32);
        v113 = (int *)(v110 + 32);
        do
        {
          result = (int *)memcpy(v109, v111, *v106);
          v109 += *v112;
          v111 += *v113;
          ++v107;
        }
        while (v107 < v106[2]);
      }
    }
    if (a7)
    {
      v114 = *(_QWORD *)v144;
      v115 = v19 + (uint64_t)a10 + 1;
      v116 = (int *)(*(_QWORD *)v144 + 192 * v115);
      if (v116[2] >= 1)
      {
        v117 = 0;
        v118 = v114 + 192 * v115;
        v119 = *(char **)(v118 + 40);
        v120 = v114 + 192 * v19;
        v121 = *(char **)(v120 + 40);
        v122 = (int *)(v118 + 32);
        v123 = (int *)(v120 + 32);
        do
        {
          result = (int *)memcpy(v119, v121, *v116);
          v119 += *v122;
          v121 += *v123;
          ++v117;
        }
        while (v117 < v116[2]);
      }
    }
    if (a8)
    {
      v124 = *(_QWORD *)v144;
      v125 = v19 + (uint64_t)a11 + 1;
      v126 = (int *)(*(_QWORD *)v144 + 192 * v125);
      if (v126[2] >= 1)
      {
        v127 = 0;
        v128 = v124 + 192 * v125;
        v129 = *(char **)(v128 + 40);
        v130 = v124 + 192 * v19;
        v131 = *(char **)(v130 + 40);
        v132 = (int *)(v128 + 32);
        v133 = (int *)(v130 + 32);
        do
        {
          result = (int *)memcpy(v129, v131, *v126);
          v129 += *v132;
          v131 += *v133;
          ++v127;
        }
        while (v127 < v126[2]);
      }
    }
  }
  return result;
}

double av1_denoiser_alloc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  size_t v31;
  void *v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  void *v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  double result;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  int v59;
  int v60;

  if (!a4)
  {
    v29 = 1;
    v59 = a7;
    v60 = a6;
    *(_DWORD *)(a3 + 216) = 7;
    *(_DWORD *)(a3 + 220) = 1;
    v30 = 7;
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(a2 + 328) + 13144 * (*(_DWORD *)(a2 + 4) + *(_DWORD *)(a2 + 12) * *(_DWORD *)a2);
  v15 = *(_DWORD *)(v14 + 13060);
  v59 = a7;
  v60 = a6;
  if (v15)
  {
    v16 = *(_DWORD *)(v14 + 13056);
    v17 = v16 == 1 && v15 == 1;
    v59 = a7;
    v60 = a6;
    if (!v17)
    {
      v18 = v16 * a6 / v15;
      v19 = v16 * a7;
      v20 = v18 & 1;
      if (v18 < 0)
        v20 = -v20;
      v21 = v20 + v18;
      v22 = v19 / v15;
      v23 = v22 & 1;
      if (v22 < 0)
        v23 = -v23;
      v59 = v23 + v22;
      v60 = v21;
    }
  }
  v24 = *(_DWORD *)(a2 + 8);
  if (a5 <= 1)
    v25 = 1;
  else
    v25 = 2;
  if (a5 > 1)
    v26 = -2;
  else
    v26 = -1;
  v27 = v24 + v26;
  if (v24 <= v25)
    v28 = 0;
  else
    v28 = v27;
  *(_DWORD *)(a2 + 124) = v28;
  v29 = v24 - v28;
  *(_DWORD *)(a3 + 216) = 9;
  *(_DWORD *)(a3 + 220) = v24 - v28;
  v30 = 9 * (v24 - v28);
  if (v29)
  {
LABEL_24:
    if (v30 > 0x2AAAAAA)
      goto LABEL_30;
  }
  v31 = 192 * v30;
  if (v31 <= 0x1FFFFFFE9)
  {
    v32 = malloc_type_malloc(v31 | 0x17, 0x70F2D1FBuLL);
    if (v32)
    {
      v33 = ((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v33 - 8) = v32;
      if (v33)
      {
        bzero((void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0), v31);
        *(_QWORD *)a3 = v33;
        v35 = a10;
        v34 = a11;
        v36 = a9;
        if (v29 > 0x2AAAAAA)
          goto LABEL_35;
        goto LABEL_31;
      }
    }
  }
LABEL_30:
  *(_QWORD *)a3 = 0;
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate denoiser->running_avg_y");
  v35 = a10;
  v34 = a11;
  v36 = a9;
  if (v29 > 0x2AAAAAA)
    goto LABEL_35;
LABEL_31:
  v37 = malloc_type_malloc((192 * v29) | 0x17, 0x70F2D1FBuLL);
  if (v37)
  {
    v38 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v38 - 8) = v37;
    if (v38)
    {
      bzero((void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0), 192 * v29);
      *(_QWORD *)(a3 + 8) = v38;
      v55 = (_QWORD *)(a3 + 8);
      v39 = a6;
      v40 = a7;
      if ((int)v29 >= 1)
        goto LABEL_36;
      goto LABEL_54;
    }
  }
LABEL_35:
  *(_QWORD *)(a3 + 8) = 0;
  v55 = (_QWORD *)(a3 + 8);
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate denoiser->mc_running_avg_y");
  v39 = a6;
  v40 = a7;
  if ((int)v29 >= 1)
  {
LABEL_36:
    v41 = 0;
    v42 = 0;
    v54 = 192 * v29;
    while (1)
    {
      v43 = v42 ? v60 : v39;
      v44 = v42 ? v59 : v40;
      LOBYTE(v46) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41, v43, v44, a8, v36, v35, v34, 0, v46, 0))break;
      LOBYTE(v47) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 192, v43, v44, a8, v36, v35, v34, 0, v47, 0))break;
      LOBYTE(v48) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 384, v43, v44, a8, v36, v35, v34, 0, v48, 0))break;
      LOBYTE(v49) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 576, v43, v44, a8, v36, v35, v34, 0, v49, 0))break;
      LOBYTE(v50) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 768, v43, v44, a8, v36, v35, v34, 0, v50, 0))break;
      LOBYTE(v51) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 960, v43, v44, a8, v36, v35, v34, 0, v51, 0))break;
      LOBYTE(v52) = 0;
      if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 1152, v43, v44, a8, v36, v35, v34, 0, v52, 0))break;
      if (a4)
      {
        LOBYTE(v53) = 0;
        if (aom_alloc_frame_buffer(*(_QWORD *)a3 + 192 * *(int *)(a3 + 216) * (uint64_t)v41 + 1344, v43, v44, a8, v36, v35, v34, 0, v53, 0))break;
      }
      LOBYTE(v53) = 0;
      if (aom_alloc_frame_buffer(*v55 + v42, v43, v44, a8, v36, v35, v34, 0, v53, 0))
        break;
      v42 += 192;
      ++v41;
      v39 = a6;
      v40 = a7;
      if (v54 == v42)
        goto LABEL_54;
    }
    return av1_denoiser_free(a3);
  }
LABEL_54:
  LOBYTE(v46) = 0;
  if (aom_alloc_frame_buffer(a3 + 16, v39, v40, a8, v36, v35, v34, 0, v46, 0))
    return av1_denoiser_free(a3);
  *(_DWORD *)(a3 + 232) = 2;
  *(_QWORD *)(a3 + 208) = 1;
  *(_QWORD *)&result = 0x200000000;
  *(_QWORD *)(a3 + 224) = 0x200000000;
  return result;
}

double av1_denoiser_free(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if (a1)
  {
    *(_DWORD *)(a1 + 208) = 0;
    v2 = *(_DWORD *)(a1 + 220);
    if (v2 * *(_DWORD *)(a1 + 216) >= 1)
    {
      v3 = 0;
      v4 = 0;
      do
      {
        aom_free_frame_buffer(*(_QWORD *)a1 + v3);
        ++v4;
        v2 = *(_DWORD *)(a1 + 220);
        v3 += 192;
      }
      while (v4 < v2 * (uint64_t)*(int *)(a1 + 216));
    }
    if (*(_QWORD *)a1)
    {
      free(*(void **)(*(_QWORD *)a1 - 8));
      v2 = *(_DWORD *)(a1 + 220);
    }
    *(_QWORD *)a1 = 0;
    if (v2 >= 1)
    {
      v5 = 0;
      v6 = 0;
      do
      {
        aom_free_frame_buffer(*(_QWORD *)(a1 + 8) + v5);
        ++v6;
        v5 += 192;
      }
      while (v6 < *(int *)(a1 + 220));
    }
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
      free(*(void **)(v7 - 8));
    *(_QWORD *)(a1 + 8) = 0;
    return aom_free_frame_buffer(a1 + 16);
  }
  return result;
}

int *av1_denoiser_update_ref_frame(int *result)
{
  int *v1;
  int *v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  _OWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[12];

  v1 = result + 66384;
  if (result[66384] >= 1)
  {
    v2 = result + 159258;
    v3 = *(_QWORD *)result;
    if (!*(_DWORD *)(*(_QWORD *)result + 50960) || *v2 >= result[159289])
    {
      if (result[159429])
      {
        v4 = result + 114193;
        v5 = (unsigned __int8 *)(result + 66778);
        v6 = (unsigned __int8 *)(result + 59760);
        v7 = (int *)(v3 + 84892);
        v8 = v3 + 84864;
        v9 = result + 159372;
        if (*v6 == 2)
          v10 = 0;
        else
          v10 = *v6;
        ++v2[170];
        if (*v4)
        {
          v11 = v4[1];
          if (v11)
            v11 = *((_DWORD *)v6 + 14) != *v4 || *((_DWORD *)v6 + 15) != v11;
        }
        else
        {
          v11 = 0;
        }
        v12 = (_OWORD *)*((_QWORD *)v1 + 17);
        v13 = v5[2];
        v14 = *v5;
        v15 = v7[6];
        v16 = v7[3];
        v17 = *v7;
        v18 = v12[9];
        v24[8] = v12[8];
        v24[9] = v18;
        v19 = v12[11];
        v24[10] = v12[10];
        v24[11] = v19;
        v20 = v12[5];
        v24[4] = v12[4];
        v24[5] = v20;
        v21 = v12[7];
        v24[6] = v12[6];
        v24[7] = v21;
        v22 = v12[1];
        v24[0] = *v12;
        v24[1] = v22;
        v23 = v12[3];
        v24[2] = v12[2];
        v24[3] = v23;
        return av1_denoiser_update_frame_info(v9, (uint64_t)v24, v8, v2, v10, v13, v14, 1, v15, v16, v17, v11, 0, 0);
      }
    }
  }
  return result;
}

BOOL av1_denoiser_filter_neon(_QWORD *a1, int a2, _QWORD *a3, int a4, _QWORD *a5, int a6, int a7, unsigned int a8, int a9)
{
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int8x16_t v39;
  uint8x16_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8x16_t v46;
  uint8x16_t v47;
  int8x16_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int8x16_t *v53;
  int8x16_t *v54;
  int8x16_t v55;
  uint8x16_t v56;
  uint8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  _BOOL4 v63;
  uint64_t v64;
  int8x16_t v65;
  uint64_t v66;
  BOOL v67;
  unsigned int v68;
  unsigned int v69;
  int8x16_t v70;
  unsigned int v71;
  uint8x16_t v72;
  uint64_t v73;
  uint64_t v74;
  int8x16_t v75;
  uint8x16_t v76;
  uint8x16_t v77;
  int8x16_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint8x16_t v83;
  uint8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int v90;
  char v91;
  int v92;
  int v93;
  int v94;
  BOOL v95;
  int v96;
  int v97;
  uint8x16_t v98;
  _QWORD *v99;
  uint8x16_t *v100;
  uint8x16_t *v101;
  uint8x16_t *v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int8x16_t *v114;
  BOOL v115;
  _BOOL4 v116;
  uint64_t v117;
  int8x16_t v118;
  char v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint8x16_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  int8x16_t *v134;
  int8x16_t *v135;
  int8x16_t v136;
  uint8x16_t v137;
  uint8x16_t v138;
  uint8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  _BOOL4 v146;
  uint64_t v147;
  int8x16_t v148;
  int v150;
  int v151;
  _BYTE v152[16];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE v160[128];
  _BYTE v161[128];
  uint64_t v162;

  v9 = a3;
  v10 = a1;
  v162 = *MEMORY[0x24BDAC8D0];
  if (a8 - 5 > 0xA)
  {
    if (a8 - 3 > 1)
      return 0;
    v66 = 0;
    v67 = a9 >= 25 || a7 == 0;
    v68 = v67 ? 4 : 5;
    v69 = a9 >= 25 ? 3 : v68;
    v70 = vdupq_n_s8(v69);
    v71 = block_size_high_1[a8] >> 1;
    v72 = (uint8x16_t)vdupq_n_s8(v68);
    v73 = 2 * a6;
    v74 = v71 <= 1 ? 1 : v71;
    v75 = 0uLL;
    v76.i64[0] = 0x707070707070707;
    v76.i64[1] = 0x707070707070707;
    v77.i64[0] = 0x1010101010101010;
    v77.i64[1] = 0x1010101010101010;
    v78.i64[0] = 0x202020202020202;
    v78.i64[1] = 0x202020202020202;
    do
    {
      v79 = &v152[v66];
      v80 = *(_QWORD *)((char *)v10 + a2);
      *v79 = *v10;
      v79[1] = v80;
      v81 = &v161[v66];
      v82 = *(_QWORD *)((char *)v9 + a4);
      *v81 = *v9;
      v81[1] = v82;
      v83 = *(uint8x16_t *)&v152[v66];
      v84 = *(uint8x16_t *)&v161[v66];
      v85 = (int8x16_t)vabdq_u8(v83, v84);
      v86 = vbslq_s8((int8x16_t)vcgtq_u8(v72, (uint8x16_t)v85), v85, vaddq_s8(vsubq_s8(v70, (int8x16_t)vcgtq_u8((uint8x16_t)v85, v76)), vbicq_s8(v78, (int8x16_t)vcgtq_u8(v77, (uint8x16_t)v85))));
      v87 = vandq_s8(v86, (int8x16_t)vcgtq_u8(v84, v83));
      v88 = vandq_s8(v86, (int8x16_t)vcgtq_u8(v83, v84));
      v89 = (int8x16_t)vqsubq_u8(vqaddq_u8(v83, (uint8x16_t)v87), (uint8x16_t)v88);
      *(int8x16_t *)&v160[v66] = v89;
      *a5 = v89.i64[0];
      *(_QWORD *)((char *)a5 + a6) = vextq_s8(v89, v89, 8uLL).u64[0];
      v75 = vaddq_s8(vqsubq_s8(v87, v88), v75);
      v10 = (_QWORD *)((char *)v10 + 2 * a2);
      v9 = (_QWORD *)((char *)v9 + 2 * a4);
      a5 = (_QWORD *)((char *)a5 + v73);
      v66 += 16;
    }
    while (16 * v74 != v66);
    v90 = vaddlvq_s8(v75);
    v91 = num_pels_log2_lookup_2[a8];
    v92 = a7 ? 3 : 2;
    v93 = v92 << v91;
    v94 = v90 >= 0 ? v90 : -v90;
    v95 = __OFSUB__(v94, v93);
    v96 = v94 - v93;
    if (!((v96 < 0) ^ v95 | (v96 == 0)))
    {
      v97 = v96 >> v91;
      if (v97 > 2)
        return 0;
      v98 = (uint8x16_t)vdupq_n_s8(v97 + 1);
      v99 = (_QWORD *)((char *)a5 - (int)(v73 * v71));
      v100 = (uint8x16_t *)v160;
      v101 = (uint8x16_t *)v161;
      v102 = (uint8x16_t *)v152;
      do
      {
        v103 = *v102++;
        v104 = v103;
        v105 = *v101++;
        v106 = (int8x16_t)vminq_u8(vabdq_u8(v104, v105), v98);
        v107 = vandq_s8(v106, (int8x16_t)vcgtq_u8(v105, v104));
        v108 = vandq_s8(v106, (int8x16_t)vcgtq_u8(v104, v105));
        v109 = (int8x16_t)vqaddq_u8(vqsubq_u8(*v100, (uint8x16_t)v107), (uint8x16_t)v108);
        *v100++ = (uint8x16_t)v109;
        v75 = vaddq_s8(vqsubq_s8(v108, v107), v75);
        *v99 = v109.i64[0];
        *(_QWORD *)((char *)v99 + a6) = vextq_s8(v109, v109, 8uLL).u64[0];
        v99 = (_QWORD *)((char *)v99 + v73);
        --v74;
      }
      while (v74);
      v110 = vaddlvq_s8(v75);
      if (v110 < 0)
        v110 = -v110;
      if (v110 > v93)
        return 0;
    }
    return 1;
  }
  if (a9 >= 25 || a7 == 0)
    v12 = 4;
  else
    v12 = 5;
  v13 = block_size_wide_2[a8];
  if (a9 >= 25)
    v14 = 3;
  else
    v14 = v12;
  LODWORD(v15) = v13 >> 4;
  v16 = 0x5001FuLL >> a8;
  if (((0x5001FuLL >> a8) & 1) == 0)
  {
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    v18 = v152;
    v19 = v17;
    do
    {
      *v18 = 0uLL;
      v18 += 8;
      --v19;
    }
    while (v19);
    v20 = &v153;
    v21 = v17;
    do
    {
      *(_OWORD *)v20 = 0uLL;
      v20 += 16;
      --v21;
    }
    while (v21);
    v22 = &v154;
    v23 = v17;
    do
    {
      *(_OWORD *)v22 = 0uLL;
      v22 += 16;
      --v23;
    }
    while (v23);
    v24 = &v155;
    v25 = v17;
    do
    {
      *(_OWORD *)v24 = 0uLL;
      v24 += 16;
      --v25;
    }
    while (v25);
    v26 = &v156;
    v27 = v17;
    do
    {
      *(_OWORD *)v26 = 0uLL;
      v26 += 16;
      --v27;
    }
    while (v27);
    v28 = &v157;
    v29 = v17;
    do
    {
      *(_OWORD *)v28 = 0uLL;
      v28 += 16;
      --v29;
    }
    while (v29);
    v30 = &v158;
    v31 = v17;
    do
    {
      *(_OWORD *)v30 = 0uLL;
      v30 += 16;
      --v31;
    }
    while (v31);
    v32 = &v159;
    do
    {
      *(_OWORD *)v32 = 0uLL;
      v32 += 16;
      --v17;
    }
    while (v17);
  }
  v33 = block_size_high_1[a8];
  v34 = 0x3AFFE0uLL >> a8;
  v35 = a2;
  v36 = a6;
  if ((v16 & 1) != 0)
  {
    if (v33 <= 1)
      v111 = 1;
    else
      v111 = block_size_high_1[a8];
    if ((v34 & 1) == 0)
    {
      v38 = 0;
      v10 = (_QWORD *)((char *)a1 + (a2 - v13) * v111);
      v9 = (_QWORD *)((char *)a3 + (a4 - v13) * v111);
      a5 = (_QWORD *)((char *)a5 + (a6 - v13) * v111);
      goto LABEL_103;
    }
    v112 = 0;
    v38 = 0;
    if (v15 <= 1)
      v113 = 1;
    else
      v113 = v15;
    while (1)
    {
      v114 = (int8x16_t *)&v152[v112 & 0xFFFFFFFFFFFFFFF0];
      v115 = a8 == 5 && (_DWORD)v112 == 7;
      v116 = v115;
      if ((~(_DWORD)v112 & 0xF) == 0)
        break;
      v117 = v113;
      if (v116)
        goto LABEL_99;
LABEL_88:
      v10 = (_QWORD *)((char *)v10 + a2 - v13);
      v9 = (_QWORD *)((char *)v9 + a4 - v13);
      a5 = (_QWORD *)((char *)a5 + a6 - v13);
      if ((_DWORD)++v112 == (_DWORD)v111)
        goto LABEL_103;
    }
    v117 = v113;
    do
    {
LABEL_99:
      v118 = *v114;
      v114 += 8;
      v38 += vaddlvq_s8(v118);
      --v117;
    }
    while (v117);
    goto LABEL_88;
  }
  v151 = a6;
  v37 = 0;
  v38 = 0;
  v39 = vdupq_n_s8(v14);
  v40 = (uint8x16_t)vdupq_n_s8(v12);
  if (v15 <= 1)
    v41 = 1;
  else
    v41 = v15;
  if (v33 <= 1)
    v42 = 1;
  else
    v42 = block_size_high_1[a8];
  v43 = a2 - v13;
  v44 = a4 - v13;
  v45 = a6 - v13;
  v46.i64[0] = 0x707070707070707;
  v46.i64[1] = 0x707070707070707;
  v47.i64[0] = 0x1010101010101010;
  v47.i64[1] = 0x1010101010101010;
  v48.i64[0] = 0x202020202020202;
  v48.i64[1] = 0x202020202020202;
  do
  {
    v49 = 0;
    v50 = a5;
    v51 = v9;
    v52 = v10;
    v53 = (int8x16_t *)&v152[v37 & 0xFFFFFFFFFFFFFFF0];
    v54 = v53;
    do
    {
      v55 = *v54;
      v56 = *(uint8x16_t *)&v10[v49];
      v57 = *(uint8x16_t *)&v51[v49];
      v58 = (int8x16_t)vabdq_u8(v56, v57);
      v59 = vbslq_s8((int8x16_t)vcgtq_u8(v40, (uint8x16_t)v58), v58, vaddq_s8(vsubq_s8(v39, (int8x16_t)vcgtq_u8((uint8x16_t)v58, v46)), vbicq_s8(v48, (int8x16_t)vcgtq_u8(v47, (uint8x16_t)v58))));
      v60 = vandq_s8(v59, (int8x16_t)vcgtq_u8(v57, v56));
      v61 = vandq_s8(v59, (int8x16_t)vcgtq_u8(v56, v57));
      *(uint8x16_t *)&v50[v49] = vqsubq_u8(vqaddq_u8(v56, (uint8x16_t)v60), (uint8x16_t)v61);
      *v54 = vaddq_s8(vqsubq_s8(v60, v61), v55);
      v54 += 8;
      v49 += 2;
    }
    while (2 * v41 != v49);
    v63 = a8 == 5 && (_DWORD)v37 == 7 || (~(_DWORD)v37 & 0xF) == 0;
    if ((v34 & 1) != 0)
    {
      v64 = v41;
      if (v63)
      {
        do
        {
          v65 = *v53;
          v53 += 8;
          v38 += vaddlvq_s8(v65);
          --v64;
        }
        while (v64);
      }
    }
    v10 = (_QWORD *)((char *)v10 + v43 + v49 * 8);
    v9 = (_QWORD *)((char *)v51 + v44 + v49 * 8);
    a5 = (_QWORD *)((char *)v50 + v45 + v49 * 8);
    ++v37;
  }
  while ((_DWORD)v37 != v42);
  v10 = (_QWORD *)((char *)&v52[v49] + v43);
  v9 = (_QWORD *)((char *)&v51[v49] + v44);
  a5 = (_QWORD *)((char *)&v50[v49] + v45);
  a6 = v151;
LABEL_103:
  v119 = num_pels_log2_lookup_2[a8];
  if (a7)
    v120 = 3;
  else
    v120 = 2;
  v121 = v120 << v119;
  if (v38 < 0)
    v38 = -v38;
  v95 = __OFSUB__(v38, v121);
  v122 = v38 - v121;
  if ((v122 < 0) ^ v95 | (v122 == 0))
    return 1;
  v123 = v122 >> v119;
  if (v122 >> v119 > 2)
    return 0;
  if (v15 <= 1)
    v15 = 1;
  else
    v15 = v15;
  if (v33 <= 1)
    v124 = 1;
  else
    v124 = v33;
  if ((v16 & 1) != 0)
  {
    v126 = 0;
  }
  else
  {
    v125 = 0;
    v126 = 0;
    v127 = (uint8x16_t)vdupq_n_s8(v123 + 1);
    v128 = (char *)v10 - (int)v33 * (uint64_t)a2;
    v129 = (char *)v9 - (int)v33 * (uint64_t)a4;
    v130 = v35 - v13;
    v131 = a4 - v13;
    v132 = (char *)a5 - (int)v33 * (uint64_t)a6;
    do
    {
      v133 = 0;
      v134 = (int8x16_t *)&v152[v125 & 0xFFFFFFFFFFFFFFF0];
      v135 = v134;
      do
      {
        v136 = *v135;
        v137 = *(uint8x16_t *)&v128[v133];
        v138 = *(uint8x16_t *)&v129[v133];
        v139 = vabdq_u8(v137, v138);
        v140 = (int8x16_t)vcgtq_u8(v138, v137);
        v141 = (int8x16_t)vcgtq_u8(v137, v138);
        v142 = (int8x16_t)vminq_u8(v139, v127);
        v143 = vandq_s8(v142, v140);
        v144 = vandq_s8(v142, v141);
        *(uint8x16_t *)&v132[v133] = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)&v132[v133], (uint8x16_t)v143), (uint8x16_t)v144);
        *v135 = vaddq_s8(vqsubq_s8(v144, v143), v136);
        v135 += 8;
        v133 += 16;
      }
      while (16 * v15 != v133);
      v146 = a8 == 5 && (_DWORD)v125 == 7;
      if ((~(_DWORD)v125 & 0xF) == 0 || v146)
      {
        v147 = v15;
        do
        {
          v148 = *v134;
          v134 += 8;
          v126 += vaddlvq_s8(v148);
          --v147;
        }
        while (v147);
      }
      v128 += v130 + v133;
      v129 += v131 + v133;
      v132 += v36 - v13 + v133;
      ++v125;
    }
    while ((_DWORD)v125 != v124);
  }
  if (v126 >= 0)
    v150 = v126;
  else
    v150 = -v126;
  return v150 <= v121;
}

float aom_avg_8x8_quad_neon(uint64_t a1, int a2, int a3, int a4, unsigned int *a5)
{
  uint64_t v5;
  uint8x8_t *v6;
  uint8x8_t v7;
  uint8x8_t *v8;
  uint16x8_t v9;
  uint8x8_t *v10;
  uint16x8_t v11;
  uint8x8_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint8x8_t *v15;
  uint16x8_t v16;
  uint8x8_t *v17;
  uint16x8_t v18;
  uint8x8_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint8x8_t *v22;
  uint16x8_t v23;
  uint8x8_t *v24;
  uint16x8_t v25;
  uint8x8_t *v26;
  uint64_t *v27;
  uint8x8_t *v28;
  uint16x8_t v29;
  uint8x8_t *v30;
  uint16x8_t v31;
  uint8x8_t *v32;
  float result;

  v5 = a1 + a4 * (uint64_t)a2;
  v6 = (uint8x8_t *)(v5 + a3);
  v7 = *v6;
  v8 = (uint8x8_t *)((char *)v6 + a2);
  v9 = vaddl_u8(*v8, v7);
  v10 = (uint8x8_t *)((char *)v8 + a2);
  v11 = vaddw_u8(v9, *v10);
  v12 = (uint8x8_t *)((char *)v10 + a2);
  *a5 = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v11, *v12), *(uint8x8_t *)((char *)v12 + a2)), *(uint8x8_t *)((char *)v12 + a2 + a2)), *(uint8x8_t *)((char *)v12 + a2 + a2 + a2)), *(uint8x8_t *)((char *)v12 + a2 + a2 + a2 + a2)))+ 32) >> 6;
  v13 = a3 + 8;
  v14 = (uint64_t *)(v5 + v13);
  v11.i64[0] = *v14;
  v15 = (uint8x8_t *)((char *)v14 + a2);
  v16 = vaddl_u8(*v15, *(uint8x8_t *)v11.i8);
  v17 = (uint8x8_t *)((char *)v15 + a2);
  v18 = vaddw_u8(v16, *v17);
  v19 = (uint8x8_t *)((char *)v17 + a2);
  a5[1] = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v18, *v19), *(uint8x8_t *)((char *)v19 + a2)), *(uint8x8_t *)((char *)v19 + a2 + a2)), *(uint8x8_t *)((char *)v19 + a2 + a2 + a2)), *(uint8x8_t *)((char *)v19 + a2 + a2 + a2 + a2)))+ 32) >> 6;
  v20 = a1 + (a4 + 8) * a2;
  v21 = (uint64_t *)(v20 + a3);
  v18.i64[0] = *v21;
  v22 = (uint8x8_t *)((char *)v21 + a2);
  v23 = vaddl_u8(*v22, *(uint8x8_t *)v18.i8);
  v24 = (uint8x8_t *)((char *)v22 + a2);
  v25 = vaddw_u8(v23, *v24);
  v26 = (uint8x8_t *)((char *)v24 + a2);
  a5[2] = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v25, *v26), *(uint8x8_t *)((char *)v26 + a2)), *(uint8x8_t *)((char *)v26 + a2 + a2)), *(uint8x8_t *)((char *)v26 + a2 + a2 + a2)), *(uint8x8_t *)((char *)v26 + a2 + a2 + a2 + a2)))+ 32) >> 6;
  v27 = (uint64_t *)(v20 + v13);
  v25.i64[0] = *v27;
  v28 = (uint8x8_t *)((char *)v27 + a2);
  v29 = vaddl_u8(*v28, *(uint8x8_t *)v25.i8);
  v30 = (uint8x8_t *)((char *)v28 + a2);
  v31 = vaddw_u8(v29, *v30);
  v32 = (uint8x8_t *)((char *)v30 + a2);
  result = COERCE_FLOAT(vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v31, *v32), *(uint8x8_t *)((char *)v32 + a2)), *(uint8x8_t *)((char *)v32 + a2 + a2)), *(uint8x8_t *)((char *)v32 + a2 + a2 + a2)), *(uint8x8_t *)((char *)v32 + a2 + a2 + a2 + a2))));
  a5[3] = (LODWORD(result) + 32) >> 6;
  return result;
}

uint64_t aom_int_pro_row_neon(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int16x8_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t *v17;
  uint8x16_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint64_t v26;
  int i;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;
  uint8x16_t v31;

  v6 = 0;
  v7 = vdupq_n_s16(-a6);
  v8 = a3;
  v9 = 2 * a3;
  v10 = 3 * a3;
  v11 = 4 * a3;
  v12 = a5 - 4;
  v13 = a4;
  v14 = a3;
  v15 = v9;
  v16 = v10;
  do
  {
    v18 = *(uint8x16_t *)(a2 + v6);
    v19 = *(uint8x16_t *)(a2 + v6 + v8);
    v20 = *(uint8x16_t *)(a2 + v6 + v9);
    v21 = *(uint8x16_t *)(a2 + v6 + v10);
    v22 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)v18.i8);
    v23 = (int16x8_t)vaddl_high_u8(v19, v18);
    v24 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)v20.i8);
    v25 = (int16x8_t)vaddl_high_u8(v21, v20);
    v26 = a2 + v11;
    for (i = v12; i; i -= 4)
    {
      v28 = *(uint8x16_t *)(v26 + v6);
      v29 = *(uint8x16_t *)(v26 + v14);
      v30 = *(uint8x16_t *)(v26 + v15);
      v31 = *(uint8x16_t *)(v26 + v16);
      v22 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v22, *(uint8x8_t *)v28.i8), *(uint8x8_t *)v29.i8);
      v23 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v23, v28), v29);
      v24 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v24, *(uint8x8_t *)v30.i8), *(uint8x8_t *)v31.i8);
      v25 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v25, v30), v31);
      v26 += v11;
    }
    v17 = (int16x8_t *)(result + 2 * v6);
    v6 += 16;
    *v17 = vshlq_s16(vaddq_s16(v24, v22), v7);
    v17[1] = vshlq_s16(vaddq_s16(v25, v23), v7);
    v16 += 16;
    v15 += 16;
    v14 += 16;
  }
  while (v6 < v13);
  return result;
}

int8x8_t *aom_comp_mask_pred_neon(int8x8_t *result, uint8x8_t *a2, int a3, int a4, uint8x8_t *a5, int a6, int8x8_t *a7, int a8, int a9)
{
  uint8x8_t *v9;
  uint8x8_t *v10;
  int v11;
  int v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  int8x16_t v16;
  uint8x16_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  uint8x8_t v25;
  int8x8_t v26;

  if (a9)
    v9 = a2;
  else
    v9 = a5;
  if (a9)
    v10 = a5;
  else
    v10 = a2;
  if (a9)
    v11 = a3;
  else
    v11 = a6;
  if (a9)
    v12 = a6;
  else
    v12 = a3;
  if (a3 < 9)
  {
    if (a3 == 8)
    {
      do
      {
        *result++ = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, *a7), *v10), (uint8x8_t)*a7, *v9), 6uLL);
        v9 = (uint8x8_t *)((char *)v9 + v11);
        v10 = (uint8x8_t *)((char *)v10 + v12);
        a7 = (int8x8_t *)((char *)a7 + a8);
        --a4;
      }
      while (a4);
    }
    else
    {
      if (a4 >= 0)
        v18 = a4;
      else
        v18 = a4 + 1;
      v19 = v18 >> 1;
      v20 = v11;
      v21 = v12;
      v22 = 2 * v11;
      v23 = 2 * v12;
      do
      {
        v24.i32[0] = v9->i32[0];
        v24.i32[1] = *(__int32 *)((char *)v9->i32 + v20);
        v25.i32[0] = v10->i32[0];
        v25.i32[1] = *(__int32 *)((char *)v10->i32 + v21);
        v26.i32[0] = a7->i32[0];
        v26.i32[1] = *(__int32 *)((char *)a7->i32 + a8);
        *result++ = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vsub_s8((int8x8_t)0x4040404040404040, v26), v25), (uint8x8_t)v26, v24), 6uLL);
        v9 = (uint8x8_t *)((char *)v9 + v22);
        v10 = (uint8x8_t *)((char *)v10 + v23);
        a7 = (int8x8_t *)((char *)a7 + 2 * a8);
        --v19;
      }
      while (v19);
    }
  }
  else
  {
    v13 = v11;
    v14.i64[0] = 0x4040404040404040;
    v14.i64[1] = 0x4040404040404040;
    do
    {
      v15 = 0;
      do
      {
        v16 = *(int8x16_t *)a7[v15].i8;
        v17 = (uint8x16_t)vsubq_s8(v14, v16);
        *(int8x16_t *)result[v15].i8 = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v17.i8, v10[v15]), *(uint8x8_t *)v16.i8, v9[v15]), 6uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v17, *(uint8x16_t *)v10[v15].i8), (uint8x16_t)v16, *(uint8x16_t *)v9[v15].i8), 6uLL);
        v15 += 2;
      }
      while (a3 != (_DWORD)(v15 * 8));
      v9 = (uint8x8_t *)((char *)v9 + v13);
      v10 = (uint8x8_t *)((char *)v10 + v12);
      a7 = (int8x8_t *)((char *)a7 + a8);
      result = (int8x8_t *)((char *)result + a3);
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t aom_read_primitive_subexpfin_(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v15;
  signed int v16;
  signed int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;

  if (3 << a3 < a2)
  {
    v6 = 0;
    v7 = 0;
    v8 = a1 + 16;
    v9 = a3;
    v10 = a3;
    do
    {
      if (!od_ec_decode_BOOL_q15(a1 + 16, 0x4000u))
      {
        if (v10 < 1)
        {
          LOWORD(v19) = 0;
        }
        else
        {
          v19 = 0;
          v20 = v10 + 1;
          do
            v19 |= od_ec_decode_BOOL_q15(v8, 0x4000u) << (v20-- - 2);
          while (v20 > 1);
        }
        return (unsigned __int16)(v19 + v6);
      }
      v11 = 1 << v10;
      v10 = v7 + a3;
      ++v7;
      v6 += v11;
      v12 = (3 << v9++) + v6;
    }
    while (v12 < a2);
    v13 = (unsigned __int16)(a2 - v6);
    if (v13 >= 2)
      goto LABEL_8;
    return (unsigned __int16)v6;
  }
  LOWORD(v6) = 0;
  v13 = (unsigned __int16)a2;
  if ((unsigned __int16)a2 < 2u)
    return (unsigned __int16)v6;
LABEL_8:
  v15 = __clz(v13) ^ 0x1F;
  v16 = (2 << v15) - v13;
  v17 = 0;
  if (v15)
  {
    v18 = v15 + 1;
    do
      v17 |= od_ec_decode_BOOL_q15(a1 + 16, 0x4000u) << (v18-- - 2);
    while (v18 > 1);
  }
  if (v17 >= v16)
    v17 = od_ec_decode_BOOL_q15(a1 + 16, 0x4000u) - v16 + 2 * v17;
  return (unsigned __int16)(v17 + v6);
}

void (*aom_rb_read_bit(uint64_t a1))(_QWORD)
{
  unint64_t v1;
  unsigned __int8 *v2;
  void (*v3)(_QWORD);

  v1 = *(unsigned int *)(a1 + 16);
  v2 = (unsigned __int8 *)(*(_QWORD *)a1 + (v1 >> 3));
  if ((unint64_t)v2 < *(_QWORD *)(a1 + 8))
  {
    v3 = (void (*)(_QWORD))((*v2 >> (~(_BYTE)v1 & 7)) & 1);
    *(_DWORD *)(a1 + 16) = v1 + 1;
    return v3;
  }
  v3 = *(void (**)(_QWORD))(a1 + 32);
  if (!v3)
    return v3;
  v3(*(_QWORD *)(a1 + 24));
  return 0;
}

uint64_t aom_rb_read_literal(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned __int8 *v7;
  void (*v8)(_QWORD);

  if (a2 < 1)
    return 0;
  LODWORD(v3) = 0;
  v4 = a2 + 1;
  do
  {
    while (1)
    {
      v6 = *(unsigned int *)(a1 + 16);
      v7 = (unsigned __int8 *)(*(_QWORD *)a1 + (v6 >> 3));
      if ((unint64_t)v7 >= *(_QWORD *)(a1 + 8))
        break;
      v5 = (*v7 >> (~(_BYTE)v6 & 7)) & 1;
      *(_DWORD *)(a1 + 16) = v6 + 1;
      v3 = (v5 << (v4-- - 2)) | v3;
      if (v4 <= 1)
        return v3;
    }
    v8 = *(void (**)(_QWORD))(a1 + 32);
    if (v8)
      v8(*(_QWORD *)(a1 + 24));
    v3 = v3;
    --v4;
  }
  while (v4 > 1);
  return v3;
}

uint64_t aom_rb_read_signed_primitive_refsubexpfin(uint64_t *a1, int a2, int a3, int a4)
{
  __int16 v4;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  char v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  signed int v23;
  signed int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  void (*v29)(uint64_t);
  unint64_t v30;
  unsigned __int8 *v31;
  int v32;
  void (*v33)(uint64_t);
  unsigned int v34;
  int v35;
  unint64_t v36;
  unsigned __int8 *v37;
  void (*v38)(uint64_t);
  __int16 v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  __int16 v46;
  unsigned int v47;
  void (*v49)(uint64_t);

  v4 = a2;
  v6 = a2 + a4 - 1;
  v7 = 2 * a2;
  v8 = (unsigned __int16)(2 * a2 - 1);
  if (3 << a3 >= v8)
  {
    v9 = 0;
    v21 = (unsigned __int16)v8;
    if ((unsigned __int16)v8 < 2u)
    {
LABEL_29:
      v24 = 0;
    }
    else
    {
LABEL_9:
      v22 = __clz(v21) ^ 0x1F;
      v23 = (2 << v22) - v21;
      v24 = 0;
      if (v22)
      {
        v25 = v22 + 1;
        do
        {
          while (1)
          {
            v27 = *((unsigned int *)a1 + 4);
            v28 = (unsigned __int8 *)(*a1 + (v27 >> 3));
            if ((unint64_t)v28 >= a1[1])
              break;
            v26 = (*v28 >> (~(_BYTE)v27 & 7)) & 1;
            *((_DWORD *)a1 + 4) = v27 + 1;
            v24 |= v26 << (v25-- - 2);
            if (v25 <= 1)
              goto LABEL_16;
          }
          v29 = (void (*)(uint64_t))a1[4];
          if (v29)
            v29(a1[3]);
          --v25;
        }
        while (v25 > 1);
      }
LABEL_16:
      if (v24 >= v23)
      {
        v24 = 2 * v24 - v23;
        v30 = *((unsigned int *)a1 + 4);
        v31 = (unsigned __int8 *)(*a1 + (v30 >> 3));
        if ((unint64_t)v31 >= a1[1])
        {
          v49 = (void (*)(uint64_t))a1[4];
          if (v49)
            v49(a1[3]);
        }
        else
        {
          v32 = (*v31 >> (~(_BYTE)v30 & 7)) & 1;
          *((_DWORD *)a1 + 4) = v30 + 1;
          v24 += v32;
        }
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = *a1;
    v12 = a1[1];
    v13 = a3;
    v14 = *((_DWORD *)a1 + 4);
    v15 = a3;
    while (1)
    {
      v16 = (unsigned __int8 *)(v11 + (v14 >> 3));
      if ((unint64_t)v16 >= v12)
        break;
      v17 = ~(_BYTE)v14 & 7;
      v18 = *v16;
      *((_DWORD *)a1 + 4) = ++v14;
      if (((v18 >> v17) & 1) == 0)
        goto LABEL_21;
      v19 = 1 << v15;
      v15 = v10 + a3;
      ++v10;
      v9 += v19;
      v20 = (3 << v13++) + v9;
      if (v20 >= v8)
      {
        v21 = (unsigned __int16)(v8 - v9);
        if (v21 >= 2)
          goto LABEL_9;
        goto LABEL_29;
      }
    }
    v33 = (void (*)(uint64_t))a1[4];
    if (v33)
      v33(a1[3]);
LABEL_21:
    if (v15 < 1)
      goto LABEL_29;
    v24 = 0;
    v34 = v15 + 1;
    do
    {
      while (1)
      {
        v36 = *((unsigned int *)a1 + 4);
        v37 = (unsigned __int8 *)(*a1 + (v36 >> 3));
        if ((unint64_t)v37 >= a1[1])
          break;
        v35 = (*v37 >> (~(_BYTE)v36 & 7)) & 1;
        *((_DWORD *)a1 + 4) = v36 + 1;
        v24 |= v35 << (v34-- - 2);
        if (v34 <= 1)
          goto LABEL_30;
      }
      v38 = (void (*)(uint64_t))a1[4];
      if (v38)
        v38(a1[3]);
      --v34;
    }
    while (v34 > 1);
  }
LABEL_30:
  v39 = v24 + v9;
  v40 = 2 * (unsigned __int16)v6;
  v41 = v7 - 2 - v6;
  v42 = (unsigned __int16)(v24 + v9);
  v43 = v41 - ((v42 + 1) >> 1);
  v44 = (v24 + v9) & 0xFFFE;
  if ((((_BYTE)v24 + (_BYTE)v9) & 1) == 0)
    v43 = v41 + (v44 >> 1);
  if (v42 <= 2 * (unsigned __int16)v41)
    v45 = v43;
  else
    v45 = v24 + v9;
  v46 = v7 - 2 - v45;
  v47 = v6 - ((v42 + 1) >> 1);
  if ((((_BYTE)v24 + (_BYTE)v9) & 1) == 0)
    v47 = v6 + (v44 >> 1);
  if (v40 >= v42)
    v39 = v47;
  if (v40 > v8)
    v39 = v46;
  return (__int16)(v39 - v4 + 1);
}

unint64_t av1_write_tx_type(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v6;
  __int16 v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t *v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned __int16 *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  int64x2_t v40;
  uint64_t v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  int64x2_t v69;
  uint64_t v70;
  _WORD *v71;
  unsigned int v72;
  unsigned int v73;
  __int16 v74;
  BOOL v75;
  unsigned __int16 v76;

  v6 = **(_QWORD **)(a2 + 7864);
  v7 = *(_WORD *)(v6 + 167);
  if ((v7 & 0x80) != 0)
  {
    v8 = 1;
    if (((0x61810uLL >> a4) & 1) != 0)
      return result;
  }
  else
  {
    v8 = *(char *)(v6 + 16) > 0;
    if (((0x61810uLL >> a4) & 1) != 0)
      return result;
  }
  if (((0x18608uLL >> a4) & 1) != 0)
  {
    if (!v8)
      return result;
  }
  else if (!*(_BYTE *)(result + 501) && !av1_ext_tx_set_lookup[2 * v8 + ((0x60604uLL >> a4) & 1)])
  {
    return result;
  }
  if (*(_BYTE *)(result + 18992))
  {
    v9 = v7 & 7;
    if (*(int *)(a2 + 4 * v9 + 10660) <= 0
      || *(_BYTE *)(v6 + 144)
      || (*(_DWORD *)(result + 4 * v9 + 19124) & 0x40) != 0)
    {
      return result;
    }
  }
  else if (*(int *)(result + 616) <= 0 || *(_BYTE *)(v6 + 144))
  {
    return result;
  }
  v10 = txsize_sqr_map[a4];
  if (((0x18608uLL >> a4) & 1) != 0)
  {
    v11 = v8;
  }
  else if (*(_BYTE *)(result + 501))
  {
    if (v8)
      v11 = 1;
    else
      v11 = 2;
  }
  else
  {
    v11 = av1_ext_tx_set_lookup[2 * v8 + ((0x60604uLL >> a4) & 1)];
  }
  v12 = *(_QWORD *)(a2 + 10648);
  v13 = v11;
  v14 = ext_tx_set_index[6 * v8 + v11];
  if (!v8)
  {
    if (*(_BYTE *)(v6 + 91))
      v26 = (unsigned __int8 *)&fimode_to_intradir + *(unsigned __int8 *)(v6 + 90);
    else
      v26 = (unsigned __int8 *)(v6 + 2);
    v46 = *v26;
    v47 = (int)av1_ext_tx_ind[16 * (unint64_t)v11 + a3];
    v48 = av1_ext_tx_ind[16 * (unint64_t)v11 + a3];
    v49 = (int16x8_t *)(v12 + 1768 * v14 + 442 * txsize_sqr_map[a4] + 34 * v46 + 15170);
    v50 = av1_num_ext_tx_set[v11];
    if ((int)v47 <= 0)
    {
      v51 = v49->u16[v47];
      v52 = *(_QWORD *)(a5 + 32);
      v53 = *(unsigned __int16 *)(a5 + 40);
      v54 = v50 - 1;
      v55 = v53 >> 8;
    }
    else
    {
      v51 = v49->u16[v48];
      v52 = *(_QWORD *)(a5 + 32);
      v53 = *(unsigned __int16 *)(a5 + 40);
      v54 = v50 - 1;
      v55 = v53 >> 8;
      if ((v49->i16[(v48 - 1)] & 0x80000000) == 0)
      {
        v56 = ((v55 * (v49->u16[(v48 - 1)] >> 6)) >> 1) + 4 * (v50 - v48);
        v52 += v53 - v56;
        v57 = v56 - ((v55 * (v51 >> 6)) >> 1) + 4 * (v47 - v54);
        goto LABEL_54;
      }
    }
    v57 = v53 + 4 * (v48 - v54) - (((v51 >> 6) * v55) >> 1);
LABEL_54:
    result = (unint64_t)od_ec_enc_normalize((_DWORD *)(a5 + 16), v52, v57);
    if (!*(_BYTE *)(a5 + 48))
      return result;
    v27 = (unsigned __int16 *)v49 + v50;
    v28 = *v27;
    v58 = v28 >> 4;
    if (v13 > 1)
      ++v58;
    v59 = v58 + 4;
    LODWORD(v60) = v50 - 1;
    if ((int)v50 - 1 <= 1)
      v60 = 1;
    else
      v60 = v60;
    if (v60 >= 8)
    {
      v61 = v60 & 0x7FFFFFF8;
      v62 = vdupq_n_s64((char)v48);
      v63 = (int64x2_t)xmmword_208F30F00;
      v64 = (int64x2_t)xmmword_208F30F10;
      v65 = (int64x2_t)xmmword_208F08AD0;
      v66 = (int64x2_t)xmmword_208F05120;
      v67 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v59));
      v68.i64[0] = 0x800000008000;
      v68.i64[1] = 0x800000008000;
      v69 = vdupq_n_s64(8uLL);
      v70 = v61;
      do
      {
        *v49 = vaddq_s16(*v49, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v62, v66), (int32x4_t)vcgtq_s64(v62, v65)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v62, v64), (int32x4_t)vcgtq_s64(v62, v63))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v68, *(uint16x4_t *)v49->i8), (int32x4_t)v67), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v68, *(uint16x8_t *)v49), (int32x4_t)v67)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v49->i8), v67),
                                             (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v49), v67)))));
        ++v49;
        v64 = vaddq_s64(v64, v69);
        v65 = vaddq_s64(v65, v69);
        v66 = vaddq_s64(v66, v69);
        v63 = vaddq_s64(v63, v69);
        v70 -= 8;
      }
      while (v70);
      if (v61 == v60)
        goto LABEL_69;
    }
    else
    {
      v61 = 0;
    }
    v71 = (_WORD *)(1768 * v14 + 442 * v10 + 34 * v46 + 2 * v61 + v12 + 15170);
    do
    {
      v72 = (unsigned __int16)*v71;
      v73 = v72 - (v72 >> v59);
      result = ((int)(0x8000 - v72) >> v59);
      v74 = v72 + result;
      if (v61 >= (char)v48)
        v74 = v73;
      *v71++ = v74;
      ++v61;
    }
    while (v60 != v61);
    goto LABEL_69;
  }
  v15 = (int)av1_ext_tx_ind[16 * (unint64_t)v11 + a3];
  v16 = av1_ext_tx_ind[16 * (unint64_t)v11 + a3];
  v17 = (int16x8_t *)(v12 + 136 * v14 + 34 * txsize_sqr_map[a4] + 20474);
  v18 = av1_num_ext_tx_set[v11];
  if ((int)v15 <= 0)
  {
    v19 = v17->u16[v15];
    v20 = *(_QWORD *)(a5 + 32);
    v21 = *(unsigned __int16 *)(a5 + 40);
    v22 = v18 - 1;
    v23 = v21 >> 8;
    goto LABEL_31;
  }
  v19 = v17->u16[v16];
  v20 = *(_QWORD *)(a5 + 32);
  v21 = *(unsigned __int16 *)(a5 + 40);
  v22 = v18 - 1;
  v23 = v21 >> 8;
  if (v17->i16[(v16 - 1)] < 0)
  {
LABEL_31:
    v25 = v21 + 4 * (v16 - v22) - (((v19 >> 6) * v23) >> 1);
    goto LABEL_32;
  }
  v24 = ((v23 * (v17->u16[(v16 - 1)] >> 6)) >> 1) + 4 * (v18 - v16);
  v20 += v21 - v24;
  v25 = v24 - ((v23 * (v19 >> 6)) >> 1) + 4 * (v15 - v22);
LABEL_32:
  result = (unint64_t)od_ec_enc_normalize((_DWORD *)(a5 + 16), v20, v25);
  if (!*(_BYTE *)(a5 + 48))
    return result;
  v27 = (unsigned __int16 *)v17 + v18;
  v28 = *v27;
  v29 = v28 >> 4;
  if (v13 > 1)
    ++v29;
  v30 = v29 + 4;
  LODWORD(v31) = v18 - 1;
  if ((int)v18 - 1 <= 1)
    v31 = 1;
  else
    v31 = v31;
  if (v31 < 8)
  {
    v32 = 0;
    goto LABEL_43;
  }
  v32 = v31 & 0x7FFFFFF8;
  v33 = vdupq_n_s64((char)v16);
  v34 = (int64x2_t)xmmword_208F30F00;
  v35 = (int64x2_t)xmmword_208F30F10;
  v36 = (int64x2_t)xmmword_208F08AD0;
  v37 = (int64x2_t)xmmword_208F05120;
  v38 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v30));
  v39.i64[0] = 0x800000008000;
  v39.i64[1] = 0x800000008000;
  v40 = vdupq_n_s64(8uLL);
  v41 = v32;
  do
  {
    *v17 = vaddq_s16(*v17, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v33, v37), (int32x4_t)vcgtq_s64(v33, v36)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v33, v35), (int32x4_t)vcgtq_s64(v33, v34))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v39, *(uint16x4_t *)v17->i8), (int32x4_t)v38), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v39, *(uint16x8_t *)v17), (int32x4_t)v38)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v17->i8), v38),
                                         (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v17), v38)))));
    ++v17;
    v35 = vaddq_s64(v35, v40);
    v36 = vaddq_s64(v36, v40);
    v37 = vaddq_s64(v37, v40);
    v34 = vaddq_s64(v34, v40);
    v41 -= 8;
  }
  while (v41);
  if (v32 != v31)
  {
LABEL_43:
    v42 = (_WORD *)(136 * v14 + 34 * v10 + 2 * v32 + v12 + 20474);
    do
    {
      v43 = (unsigned __int16)*v42;
      v44 = v43 - (v43 >> v30);
      result = ((int)(0x8000 - v43) >> v30);
      v45 = v43 + result;
      if (v32 >= (char)v16)
        v45 = v44;
      *v42++ = v45;
      ++v32;
    }
    while (v31 != v32);
  }
LABEL_69:
  v75 = v28 >= 0x20;
  v76 = *v27;
  if (!v75)
    ++v76;
  *v27 = v76;
  return result;
}

uint64_t av1_write_uleb_obu_size(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v3 = 0;
  v4 = a2;
  v5 = a2;
  do
  {
    ++v3;
    v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  v7 = 1;
  if ((unint64_t)(v3 - 1) <= 7 && a3 && (unint64_t)(v3 - 1) <= 3)
  {
    v8 = 0;
    do
    {
      v9 = v4 > 0x7F;
      v10 = v4 & 0x7F;
      v4 >>= 7;
      *(_BYTE *)(a3 + a1 + v8++) = v10 | (v9 << 7);
    }
    while (v3 != v8);
    return 0;
  }
  return v7;
}

uint64_t av1_write_sequence_header_obu(int *a1, _BYTE *a2)
{
  char v2;
  char v3;
  char v4;
  unsigned __int8 v5;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t i;
  int v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  char v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  _BYTE *v91;
  int v92;
  char v93;
  _BYTE *v94;
  int v95;
  _BYTE *v96;
  char v97;
  char v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unsigned int v131;
  int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unsigned int v142;
  char v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  int v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unsigned int v180;
  int v181;
  int v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  unsigned int v194;
  int v195;
  int v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  int v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  unsigned int v209;
  int v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  unsigned int v214;
  int v215;
  int v216;
  int v217;
  unsigned int v218;
  uint64_t v219;
  unsigned int v220;
  int v221;
  int v222;
  unsigned int v223;
  uint64_t v224;
  unsigned int v225;
  int v226;
  int v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  int v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  unsigned int v235;
  int v236;
  int v237;
  unsigned int v238;
  uint64_t v239;
  unsigned int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  char v245;
  int v246;
  int v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int v250;
  int v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  unsigned int v255;
  int v256;
  unsigned int v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  int v267;
  int v268;
  unsigned int v269;
  uint64_t v270;
  unsigned int v271;
  int v272;
  unsigned int v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unsigned int v277;
  int v278;
  int v279;
  unsigned int v280;
  uint64_t v281;
  unsigned int v282;
  int v283;
  int v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  int v289;
  unsigned int v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  int v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  int v298;
  int v299;
  unsigned int v300;
  uint64_t v301;
  unsigned int v302;
  int v303;
  int v304;
  unsigned int v305;
  uint64_t v306;
  int v307;
  int v308;
  int v309;
  unsigned int v310;
  uint64_t v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  uint64_t v316;
  unsigned int v317;
  int v318;
  int v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  int v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  unsigned int v327;
  int v328;
  int v329;
  unsigned int v330;
  uint64_t v331;
  unsigned int v332;
  int v333;
  int v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int v337;
  int v338;
  int v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int v342;
  int v343;
  int v344;
  unsigned int v345;
  uint64_t v346;
  unsigned int v347;
  int v348;
  int v349;
  int v350;
  unsigned int v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  int v359;
  int v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int v363;
  int v364;
  int v365;
  unsigned int v366;
  uint64_t v367;
  unsigned int v368;
  int v369;
  int v370;
  unsigned int v371;
  uint64_t v372;
  unsigned int v373;
  int v374;
  int v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int v378;
  int v379;
  int v380;
  unsigned int v381;
  uint64_t v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int v388;
  int v389;
  char v390;
  int v391;
  unsigned int v392;
  uint64_t v393;
  unsigned int v394;
  int v395;
  int v396;
  int v397;
  unsigned int v398;
  uint64_t v399;
  unsigned int v400;
  uint64_t v401;
  unint64_t v402;
  BOOL v403;
  unsigned int v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  unsigned int v408;
  int v409;
  uint64_t v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int v417;
  int v418;
  int v419;
  unsigned int v420;
  uint64_t v421;
  unsigned int v422;
  int v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int v427;
  int v428;
  int v429;
  unsigned int v430;
  uint64_t v431;
  unsigned int v432;
  int v433;
  int v434;
  int v435;
  unsigned int v436;
  uint64_t v437;
  unsigned int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  int v442;
  int v443;
  int v444;
  unsigned int v445;
  uint64_t v446;
  unsigned int v447;
  unsigned int v448;
  int v449;
  unsigned int v450;
  uint64_t v451;
  unsigned int v452;
  int v453;
  int v454;
  unsigned int v455;
  uint64_t v456;
  unsigned int v457;
  int v458;
  int v459;
  unsigned int v460;
  uint64_t v461;
  unsigned int v462;
  int v463;
  int v464;
  unsigned int v465;
  uint64_t v466;
  unsigned int v467;
  int v468;
  int v469;
  int v470;
  unsigned int v471;
  uint64_t v472;
  unsigned int v473;
  unsigned int v474;
  int v475;
  unsigned int v476;
  uint64_t v477;
  unsigned int v478;
  int v479;
  int v480;
  unsigned int v481;
  uint64_t v482;
  int v483;
  int v484;
  unsigned int v485;
  uint64_t v486;
  unsigned int v487;
  int v488;
  int v489;
  unsigned int v490;
  unsigned int v491;
  int v492;
  int v493;
  unsigned int v494;
  uint64_t v495;
  unsigned int v496;
  int v497;
  unsigned int v498;
  int v499;
  unsigned int v500;
  uint64_t v501;
  unsigned int v502;
  int v503;
  int v504;
  unsigned int v505;
  uint64_t v506;
  unsigned int v507;
  int v508;
  int v509;
  unsigned int v510;
  uint64_t v511;
  unsigned int v512;
  int v513;
  int v514;
  unsigned int v515;
  uint64_t v516;
  unsigned int v517;
  int v518;
  char v519;
  int v520;
  unsigned int v521;
  uint64_t v522;
  unsigned int v523;
  uint64_t v524;
  unsigned int v525;
  unsigned int v526;
  int v527;
  int v528;
  int v529;
  unsigned int v530;
  uint64_t v531;
  unsigned int v532;
  uint64_t v533;
  unsigned int v534;
  int v535;
  unsigned int v536;
  uint64_t v537;
  unsigned int v538;
  int v539;
  int v540;
  unsigned int v541;
  uint64_t v542;
  unsigned int v543;
  int v544;
  int v545;
  unsigned int v546;
  uint64_t v547;
  unsigned int v548;
  int v549;
  int v550;
  unsigned int v551;
  uint64_t v552;
  unsigned int v553;
  int v554;
  char v555;
  int v556;
  unsigned int v557;
  uint64_t v558;
  unsigned int v559;
  int v560;
  int v561;
  unsigned int v562;
  uint64_t v563;
  unsigned int v564;
  int v565;
  int *v566;
  int v567;
  int v568;
  unsigned int v569;
  uint64_t v570;
  unsigned int v571;
  int v572;
  int v573;
  unsigned int v574;
  int v575;
  unsigned int v576;
  unsigned int v577;
  int v578;
  int v579;
  unsigned int v580;
  uint64_t v581;
  unsigned int v582;
  int v583;
  int v584;
  int v585;
  unsigned int v586;
  uint64_t v587;
  int v588;
  int v589;
  unsigned int v590;
  uint64_t v591;
  unsigned int v592;
  int *v593;
  int v594;
  int v595;
  unsigned int v596;
  uint64_t v597;
  unsigned int v598;
  int v599;
  _DWORD *v600;
  int v601;
  _DWORD *v602;
  unsigned int v603;
  int v604;
  unsigned int v605;
  uint64_t v606;
  unsigned int v607;
  int v608;
  int v609;
  unsigned int v610;
  uint64_t v611;
  unsigned int v612;
  int v613;
  int v614;
  unsigned int v615;
  uint64_t v616;
  unsigned int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  unsigned int v622;
  uint64_t v623;
  unsigned int v624;
  int v625;
  int v626;
  unsigned int v627;
  uint64_t v628;
  unsigned int v629;
  int v630;
  unsigned int v631;
  int v632;
  unsigned int v633;
  uint64_t v634;
  unsigned int v635;
  int v636;
  int v637;
  int v638;
  unsigned int v639;
  uint64_t v640;
  unsigned int v641;
  int v642;
  unsigned int v643;
  uint64_t v644;
  unsigned int v645;
  int v646;
  int v647;
  unsigned int v648;
  uint64_t v649;
  unsigned int v650;
  int v651;
  int v652;
  unsigned int v653;
  uint64_t v654;
  int v655;
  int v656;
  unsigned int v657;
  unsigned int v658;
  int v660;
  unsigned int v661;
  uint64_t v662;
  int v663;
  int v664;
  unsigned int v665;
  uint64_t v666;
  int v667;
  int v668;
  unsigned int v669;
  uint64_t v670;
  int v671;
  int v672;
  unsigned int v673;
  uint64_t v674;
  int v675;
  int v676;
  unsigned int v677;
  uint64_t v678;
  int v679;
  int v680;
  unsigned int v681;
  uint64_t v682;
  int v683;
  int v684;
  unsigned int v685;
  uint64_t v686;
  int v687;
  unsigned int v688;
  unsigned int v689;

  v2 = 32 * *((_BYTE *)a1 + 69);
  *a2 = v2;
  v3 = v2 | (16 * *((_BYTE *)a1 + 57));
  *a2 = v3;
  v4 = v3 | (8 * *((_BYTE *)a1 + 58));
  *a2 = v4;
  if (*((_BYTE *)a1 + 58))
  {
    v5 = *((_BYTE *)a1 + 285);
    *a2 = (v5 >> 2) & 7 | v4;
    a2[1] = v5 << 6;
    v6 = 10;
    goto LABEL_3;
  }
  *a2 = v4 | (4 * *((_BYTE *)a1 + 244));
  if (!a1[61])
  {
    v91 = a1 + 71;
    v92 = *((unsigned __int8 *)a1 + 284);
    v93 = 6;
    v94 = a2;
    v95 = 6;
LABEL_501:
    v92 = *v94 & ~(1 << (7 - v93)) | (v92 << (7 - v93));
    goto LABEL_503;
  }
  v13 = a1[62];
  v14 = 31;
  for (i = 6; i != 38; ++i)
  {
    while (1)
    {
      v16 = (v13 >> v14) & 1;
      v17 = i >> 3;
      if ((i & 7) == 0)
        break;
      a2[v17] = a2[v17] & ~(1 << (i & 7 ^ 7)) | ((_BYTE)v16 << (i & 7 ^ 7));
      ++i;
      --v14;
      if (i == 38)
        goto LABEL_12;
    }
    a2[v17] = (_BYTE)v16 << 7;
    --v14;
  }
LABEL_12:
  v18 = a1[63];
  v19 = 31;
  do
  {
    while (1)
    {
      v20 = (v18 >> v19) & 1;
      v21 = i >> 3;
      if ((i & 7) == 0)
        break;
      a2[v21] = a2[v21] & ~(1 << (i & 7 ^ 7)) | ((_BYTE)v20 << (i & 7 ^ 7));
      ++i;
      --v19;
      if (i == 70)
        goto LABEL_16;
    }
    a2[v21] = (_BYTE)v20 << 7;
    ++i;
    --v19;
  }
  while (i != 70);
LABEL_16:
  v22 = a2 + 8;
  a2[8] = a2[8] & 0xFD | (2 * *((_BYTE *)a1 + 256));
  if (!a1[64])
  {
    v96 = a1 + 66;
    v97 = *((_BYTE *)a1 + 264);
    v98 = 7;
    LODWORD(v99) = 71;
    goto LABEL_414;
  }
  v23 = a1[65];
  if (v23 >= 2)
  {
    v401 = 0;
    v402 = a1[65];
    do
    {
      ++v401;
      v403 = v402 > 3;
      v402 >>= 1;
    }
    while (v403);
    v24 = v401 + 71;
    v404 = 71;
    v405 = v401;
    do
    {
      v406 = v404 >> 3;
      LOBYTE(v407) = v404 & 7;
      if ((v404 & 7) != 0)
        v407 = a2[v406] & ~(1 << (v407 ^ 7));
      a2[v406] = v407;
      ++v404;
      --v405;
    }
    while (v405);
    v25 = v401 + 1;
  }
  else
  {
    v24 = 71;
    v25 = 1;
  }
  v99 = v24;
  v408 = v25 + 1;
  do
  {
    while (1)
    {
      v409 = (v23 >> (v408 - 2)) & 1;
      v410 = v99 >> 3;
      if ((v99 & 7) == 0)
        break;
      a2[v410] = a2[v410] & ~(1 << (v99 & 7 ^ 7)) | ((_BYTE)v409 << (v99 & 7 ^ 7));
      ++v99;
      if (--v408 <= 1)
        goto LABEL_413;
    }
    a2[v410] = (_BYTE)v409 << 7;
    ++v99;
    --v408;
  }
  while (v408 > 1);
LABEL_413:
  v96 = a1 + 66;
  v97 = *((_BYTE *)a1 + 264);
  v411 = v23 & 0xFFFFFFF8;
  v22 = &a2[(int)v99 / 8];
  v98 = v99 - v411;
  if ((_DWORD)v99 != v411)
  {
LABEL_414:
    *v22 = *v22 & ~(1 << (7 - v98)) | (v97 << (7 - v98));
    v412 = v99 + 1;
    if (*v96)
      goto LABEL_415;
LABEL_420:
    v95 = v412;
    goto LABEL_500;
  }
  *v22 = v97 << 7;
  v412 = v99 + 1;
  if (!*v96)
    goto LABEL_420;
LABEL_415:
  v413 = a1[68] - 1;
  v414 = v412 + 7;
  if (v412 >= 0)
    v414 = v412;
  v415 = v414 & 0xFFFFFFF8;
  v416 = (uint64_t)v414 >> 3;
  v417 = v412 - v415;
  if (v417)
    v418 = a2[v416] & ~(1 << (7 - v417)) | (((v413 >> 4) & 1) << (7 - v417));
  else
    LOBYTE(v418) = ((v413 & 0x10) != 0) << 7;
  a2[v416] = v418;
  v419 = v412 + 8;
  if (v412 + 1 >= 0)
    v419 = v412 + 1;
  v420 = v419 & 0xFFFFFFF8;
  v421 = (uint64_t)v419 >> 3;
  v422 = v412 + 1 - v420;
  if (v422)
    v423 = a2[v421] & ~(1 << (7 - v422)) | (((v413 >> 3) & 1) << (7 - v422));
  else
    LOBYTE(v423) = ((v413 & 8) != 0) << 7;
  a2[v421] = v423;
  v424 = v412 + 9;
  if (v412 + 2 >= 0)
    v424 = v412 + 2;
  v425 = v424 & 0xFFFFFFF8;
  v426 = (uint64_t)v424 >> 3;
  v427 = v412 + 2 - v425;
  if (v427)
    v428 = a2[v426] & ~(1 << (7 - v427)) | (((v413 >> 2) & 1) << (7 - v427));
  else
    LOBYTE(v428) = ((v413 & 4) != 0) << 7;
  a2[v426] = v428;
  v429 = v412 + 10;
  if (v412 + 3 >= 0)
    v429 = v412 + 3;
  v430 = v429 & 0xFFFFFFF8;
  v431 = (uint64_t)v429 >> 3;
  v432 = v412 + 3 - v430;
  if (v432)
    v433 = a2[v431] & ~(1 << (7 - v432)) | (((v413 >> 1) & 1) << (7 - v432));
  else
    LOBYTE(v433) = ((v413 & 2) != 0) << 7;
  a2[v431] = v433;
  v434 = v413 & 1;
  v435 = v412 + 11;
  if (v412 + 4 >= 0)
    v435 = v412 + 4;
  v436 = v435 & 0xFFFFFFF8;
  v437 = (uint64_t)v435 >> 3;
  v438 = v412 + 4 - v436;
  if (v438)
    v434 = a2[v437] & ~(1 << (7 - v438)) | (v434 << (7 - v438));
  else
    LOBYTE(v434) = (_BYTE)v434 << 7;
  a2[v437] = v434;
  v439 = v412 + 5;
  v440 = a1[67];
  v441 = 32;
  do
  {
    while (1)
    {
      v442 = v439;
      v443 = (v440 >> (v441 - 1)) & 1;
      v444 = v439 + 7;
      if (v442 >= 0)
        v444 = v442;
      v445 = v444 & 0xFFFFFFF8;
      v446 = (uint64_t)v444 >> 3;
      v447 = v442 - v445;
      if (!v447)
        break;
      a2[v446] = a2[v446] & ~(1 << (7 - v447)) | ((_BYTE)v443 << (7 - v447));
      v439 = v442 + 1;
      v403 = v441-- > 1;
      if (!v403)
        goto LABEL_449;
    }
    a2[v446] = (_BYTE)v443 << 7;
    v439 = v442 + 1;
    v403 = v441-- > 1;
  }
  while (v403);
LABEL_449:
  v448 = a1[69] - 1;
  v449 = v439 + 7;
  if (v439 >= 0)
    v449 = v439;
  v450 = v449 & 0xFFFFFFF8;
  v451 = (uint64_t)v449 >> 3;
  v452 = v439 - v450;
  if (v452)
    v453 = a2[v451] & ~(1 << (7 - v452)) | (((v448 >> 4) & 1) << (7 - v452));
  else
    LOBYTE(v453) = ((v448 & 0x10) != 0) << 7;
  a2[v451] = v453;
  v454 = v442 + 9;
  if (v442 + 2 >= 0)
    v454 = v442 + 2;
  v455 = v454 & 0xFFFFFFF8;
  v456 = (uint64_t)v454 >> 3;
  v457 = v442 + 2 - v455;
  if (v457)
    v458 = a2[v456] & ~(1 << (7 - v457)) | (((v448 >> 3) & 1) << (7 - v457));
  else
    LOBYTE(v458) = ((v448 & 8) != 0) << 7;
  a2[v456] = v458;
  v459 = v442 + 10;
  if (v442 + 3 >= 0)
    v459 = v442 + 3;
  v460 = v459 & 0xFFFFFFF8;
  v461 = (uint64_t)v459 >> 3;
  v462 = v442 + 3 - v460;
  if (v462)
    v463 = a2[v461] & ~(1 << (7 - v462)) | (((v448 >> 2) & 1) << (7 - v462));
  else
    LOBYTE(v463) = ((v448 & 4) != 0) << 7;
  a2[v461] = v463;
  v464 = v442 + 11;
  if (v442 + 4 >= 0)
    v464 = v442 + 4;
  v465 = v464 & 0xFFFFFFF8;
  v466 = (uint64_t)v464 >> 3;
  v467 = v442 + 4 - v465;
  if (v467)
    v468 = a2[v466] & ~(1 << (7 - v467)) | (((v448 >> 1) & 1) << (7 - v467));
  else
    LOBYTE(v468) = ((v448 & 2) != 0) << 7;
  a2[v466] = v468;
  v469 = v448 & 1;
  v470 = v442 + 12;
  if (v442 + 5 >= 0)
    v470 = v442 + 5;
  v471 = v470 & 0xFFFFFFF8;
  v472 = (uint64_t)v470 >> 3;
  v473 = v442 + 5 - v471;
  if (v473)
    v469 = a2[v472] & ~(1 << (7 - v473)) | (v469 << (7 - v473));
  else
    LOBYTE(v469) = (_BYTE)v469 << 7;
  a2[v472] = v469;
  v474 = a1[70] - 1;
  v475 = v442 + 13;
  if (v442 + 6 >= 0)
    v475 = v442 + 6;
  v476 = v475 & 0xFFFFFFF8;
  v477 = (uint64_t)v475 >> 3;
  v478 = v442 + 6 - v476;
  if (v478)
    v479 = a2[v477] & ~(1 << (7 - v478)) | (((v474 >> 4) & 1) << (7 - v478));
  else
    LOBYTE(v479) = ((v474 & 0x10) != 0) << 7;
  a2[v477] = v479;
  v480 = v442 + 14;
  if (v442 + 7 >= 0)
    v480 = v442 + 7;
  v481 = v480 & 0xFFFFFFF8;
  v482 = (uint64_t)v480 >> 3;
  if (v442 + 7 == v481)
    LOBYTE(v483) = ((v474 & 8) != 0) << 7;
  else
    v483 = a2[v482] & ~(1 << (v481 - v442)) | (((v474 >> 3) & 1) << (v481 - v442));
  a2[v482] = v483;
  v484 = v442 + 15;
  if (v442 + 8 >= 0)
    v484 = v442 + 8;
  v485 = v484 & 0xFFFFFFF8;
  v486 = (uint64_t)v484 >> 3;
  v487 = v442 + 8 - v485;
  if (v487)
    v488 = a2[v486] & ~(1 << (7 - v487)) | (((v474 >> 2) & 1) << (7 - v487));
  else
    LOBYTE(v488) = ((v474 & 4) != 0) << 7;
  a2[v486] = v488;
  v489 = v442 + 16;
  if (v442 + 9 >= 0)
    v489 = v442 + 9;
  v490 = v489 & 0xFFFFFFF8;
  v99 = (uint64_t)v489 >> 3;
  v491 = v442 + 9 - v490;
  if (v491)
    v492 = a2[v99] & ~(1 << (7 - v491)) | (((v474 >> 1) & 1) << (7 - v491));
  else
    LOBYTE(v492) = ((v474 & 2) != 0) << 7;
  a2[v99] = v492;
  LODWORD(v99) = v474 & 1;
  v493 = v442 + 17;
  if (v442 + 10 >= 0)
    v493 = v442 + 10;
  v494 = v493 & 0xFFFFFFF8;
  v495 = (uint64_t)v493 >> 3;
  v496 = v442 + 10 - v494;
  if (v496)
    LODWORD(v99) = a2[v495] & ~(1 << (7 - v496)) | ((_DWORD)v99 << (7 - v496));
  else
    LOBYTE(v99) = (_BYTE)v99 << 7;
  a2[v495] = v99;
  v95 = v442 + 11;
LABEL_500:
  v91 = a1 + 71;
  v92 = *((unsigned __int8 *)a1 + 284);
  v497 = v99 & 0xFFFFFFF8;
  v94 = &a2[v95 / 8];
  v93 = v95 - v497;
  if (v95 != v497)
    goto LABEL_501;
  LOBYTE(v92) = (_BYTE)v92 << 7;
LABEL_503:
  *v94 = v92;
  v498 = a1[28];
  v499 = v95 + 8;
  if (v95 + 1 >= 0)
    v499 = v95 + 1;
  v500 = v499 & 0xFFFFFFF8;
  v501 = (uint64_t)v499 >> 3;
  v502 = v95 + 1 - v500;
  if (v502)
    v503 = a2[v501] & ~(1 << (7 - v502)) | (((v498 >> 4) & 1) << (7 - v502));
  else
    LOBYTE(v503) = ((a1[28] & 0x10) != 0) << 7;
  a2[v501] = v503;
  v504 = v95 + 9;
  if (v95 + 2 >= 0)
    v504 = v95 + 2;
  v505 = v504 & 0xFFFFFFF8;
  v506 = (uint64_t)v504 >> 3;
  v507 = v95 + 2 - v505;
  if (v507)
    v508 = a2[v506] & ~(1 << (7 - v507)) | (((v498 >> 3) & 1) << (7 - v507));
  else
    LOBYTE(v508) = ((v498 & 8) != 0) << 7;
  a2[v506] = v508;
  v509 = v95 + 10;
  if (v95 + 3 >= 0)
    v509 = v95 + 3;
  v510 = v509 & 0xFFFFFFF8;
  v511 = (uint64_t)v509 >> 3;
  v512 = v95 + 3 - v510;
  if (v512)
    v513 = a2[v511] & ~(1 << (7 - v512)) | (((v498 >> 2) & 1) << (7 - v512));
  else
    LOBYTE(v513) = ((v498 & 4) != 0) << 7;
  a2[v511] = v513;
  v514 = v95 + 11;
  if (v95 + 4 >= 0)
    v514 = v95 + 4;
  v515 = v514 & 0xFFFFFFF8;
  v516 = (uint64_t)v514 >> 3;
  v517 = v95 + 4 - v515;
  if (v517)
    v518 = a2[v516] & ~(1 << (7 - v517)) | (((v498 >> 1) & 1) << (7 - v517));
  else
    LOBYTE(v518) = ((v498 & 2) != 0) << 7;
  a2[v516] = v518;
  v519 = v498 & 1;
  v520 = v95 + 12;
  if (v95 + 5 >= 0)
    v520 = v95 + 5;
  v521 = v520 & 0xFFFFFFF8;
  v522 = (uint64_t)v520 >> 3;
  v523 = v95 + 5 - v521;
  if (!v523)
  {
    a2[v522] = v519 << 7;
    v6 = v95 + 6;
    if (a1[28] < 0)
      goto LABEL_3;
    goto LABEL_529;
  }
  a2[v522] = a2[v522] & ~(1 << (7 - v523)) | (v519 << (7 - v523));
  v6 = v95 + 6;
  if ((a1[28] & 0x80000000) == 0)
  {
LABEL_529:
    v524 = 0;
    do
    {
      v525 = a1[v524 + 29];
      v526 = 12;
      do
      {
        while (1)
        {
          v527 = v6;
          v528 = (v525 >> (v526 - 1)) & 1;
          v529 = v6 + 7;
          if (v527 >= 0)
            v529 = v527;
          v530 = v529 & 0xFFFFFFF8;
          v531 = (uint64_t)v529 >> 3;
          v532 = v527 - v530;
          if (!v532)
            break;
          a2[v531] = a2[v531] & ~(1 << (7 - v532)) | ((_BYTE)v528 << (7 - v532));
          v6 = v527 + 1;
          v403 = v526-- > 1;
          if (!v403)
            goto LABEL_540;
        }
        a2[v531] = (_BYTE)v528 << 7;
        v6 = v527 + 1;
        v403 = v526-- > 1;
      }
      while (v403);
LABEL_540:
      v533 = (uint64_t)a1 + v524;
      v534 = *((unsigned __int8 *)a1 + v524 + 285);
      v535 = v6 + 7;
      if (v6 >= 0)
        v535 = v6;
      v536 = v535 & 0xFFFFFFF8;
      v537 = (uint64_t)v535 >> 3;
      v538 = v6 - v536;
      if (v538)
        v539 = a2[v537] & ~(1 << (7 - v538)) | (((v534 >> 4) & 1) << (7 - v538));
      else
        LOBYTE(v539) = ((v534 & 0x10) != 0) << 7;
      a2[v537] = v539;
      v540 = v527 + 9;
      if (v527 + 2 >= 0)
        v540 = v527 + 2;
      v541 = v540 & 0xFFFFFFF8;
      v542 = (uint64_t)v540 >> 3;
      v543 = v527 + 2 - v541;
      if (v543)
        v544 = a2[v542] & ~(1 << (7 - v543)) | (((v534 >> 3) & 1) << (7 - v543));
      else
        LOBYTE(v544) = ((v534 & 8) != 0) << 7;
      a2[v542] = v544;
      v545 = v527 + 10;
      if (v527 + 3 >= 0)
        v545 = v527 + 3;
      v546 = v545 & 0xFFFFFFF8;
      v547 = (uint64_t)v545 >> 3;
      v548 = v527 + 3 - v546;
      if (v548)
        v549 = a2[v547] & ~(1 << (7 - v548)) | (((v534 >> 2) & 1) << (7 - v548));
      else
        LOBYTE(v549) = ((v534 & 4) != 0) << 7;
      a2[v547] = v549;
      v550 = v527 + 11;
      if (v527 + 4 >= 0)
        v550 = v527 + 4;
      v551 = v550 & 0xFFFFFFF8;
      v552 = (uint64_t)v550 >> 3;
      v553 = v527 + 4 - v551;
      if (v553)
        v554 = a2[v552] & ~(1 << (7 - v553)) | (((v534 >> 1) & 1) << (7 - v553));
      else
        LOBYTE(v554) = ((v534 & 2) != 0) << 7;
      a2[v552] = v554;
      v555 = v534 & 1;
      v556 = v527 + 12;
      if (v527 + 5 >= 0)
        v556 = v527 + 5;
      v557 = v556 & 0xFFFFFFF8;
      v558 = (uint64_t)v556 >> 3;
      v559 = v527 + 5 - v557;
      if (v559)
      {
        a2[v558] = a2[v558] & ~(1 << (7 - v559)) | (v555 << (7 - v559));
        v6 = v527 + 6;
        if (*(unsigned __int8 *)(v533 + 285) < 8u)
          goto LABEL_572;
      }
      else
      {
        a2[v558] = v555 << 7;
        v6 = v527 + 6;
        if (*(unsigned __int8 *)(v533 + 285) < 8u)
          goto LABEL_572;
      }
      v560 = *((unsigned __int8 *)a1 + v524 + 317);
      v561 = v6 + 7;
      if (v6 >= 0)
        v561 = v6;
      v562 = v561 & 0xFFFFFFF8;
      v563 = (uint64_t)v561 >> 3;
      v564 = v6 - v562;
      if (v564)
        v565 = a2[v563] & ~(1 << (7 - v564)) | (v560 << (7 - v564));
      else
        LOBYTE(v565) = (_BYTE)v560 << 7;
      a2[v563] = v565;
      v6 = v527 + 7;
LABEL_572:
      if (!*((_BYTE *)a1 + 264))
        goto LABEL_598;
      v566 = &a1[12 * v524];
      v567 = v566[88];
      v568 = v6 + 7;
      if (v6 >= 0)
        v568 = v6;
      v569 = v568 & 0xFFFFFFF8;
      v570 = (uint64_t)v568 >> 3;
      v571 = v6 - v569;
      if (v571)
      {
        a2[v570] = a2[v570] & ~(1 << (7 - v571)) | ((_BYTE)v567 << (7 - v571));
        v572 = ++v6;
        if (!v566[88])
          goto LABEL_598;
      }
      else
      {
        a2[v570] = (_BYTE)v567 << 7;
        v572 = ++v6;
        if (!v566[88])
          goto LABEL_598;
      }
      v573 = a1[68];
      if (v573 >= 1)
      {
        v574 = a1[12 * v524 + 94];
        v575 = 7 - v572;
        v576 = v573 + 1;
        v577 = v576;
        do
        {
          while (1)
          {
            v578 = (v574 >> (v577 - 2)) & 1;
            v579 = v572 + 7;
            if (v572 >= 0)
              v579 = v572;
            v580 = v579 & 0xFFFFFFF8;
            v581 = (uint64_t)v579 >> 3;
            if (v580 == v572)
              break;
            a2[v581] = a2[v581] & ~(1 << (v575 + v580)) | ((_BYTE)v578 << (v575 + v580));
            ++v572;
            --v575;
            if (--v577 <= 1)
              goto LABEL_586;
          }
          a2[v581] = (_BYTE)v578 << 7;
          ++v572;
          --v575;
          --v577;
        }
        while (v577 > 1);
LABEL_586:
        v582 = a1[12 * v524 + 95];
        v583 = 7 - v572;
        v6 = v572;
        do
        {
          while (1)
          {
            v584 = (v582 >> (v576 - 2)) & 1;
            v585 = v6 + 7;
            if (v6 >= 0)
              v585 = v6;
            v586 = v585 & 0xFFFFFFF8;
            v587 = (uint64_t)v585 >> 3;
            if (v586 == v6)
              break;
            a2[v587] = a2[v587] & ~(1 << (v583 + v586)) | ((_BYTE)v584 << (v583 + v586));
            ++v6;
            --v583;
            if (--v576 <= 1)
              goto LABEL_592;
          }
          a2[v587] = (_BYTE)v584 << 7;
          ++v6;
          --v583;
          --v576;
        }
        while (v576 > 1);
      }
LABEL_592:
      v588 = a1[12 * v524 + 96];
      v589 = v6 + 7;
      if (v6 >= 0)
        v589 = v6;
      v590 = v589 & 0xFFFFFFF8;
      v591 = (uint64_t)v589 >> 3;
      v592 = v6 - v590;
      if (v592)
        v588 = a2[v591] & ~(1 << (7 - v592)) | (v588 << (7 - v592));
      else
        LOBYTE(v588) = (_BYTE)v588 << 7;
      a2[v591] = v588;
      ++v6;
LABEL_598:
      if (*v91)
      {
        v593 = &a1[12 * v524];
        v594 = v593[97];
        v595 = v6 + 7;
        if (v6 >= 0)
          v595 = v6;
        v596 = v595 & 0xFFFFFFF8;
        v597 = (uint64_t)v595 >> 3;
        v598 = v6 - v596;
        if (v598)
        {
          v599 = a2[v597] & ~(1 << (7 - v598)) | (v594 << (7 - v598));
          v600 = v593 + 97;
          a2[v597] = v599;
          v601 = v6 + 1;
          if (*v600)
            goto LABEL_605;
        }
        else
        {
          v602 = v593 + 97;
          a2[v597] = (_BYTE)v594 << 7;
          v601 = v6 + 1;
          if (*v602)
          {
LABEL_605:
            v603 = a1[12 * v524 + 98] - 1;
            v604 = v601 + 7;
            if (v601 >= 0)
              v604 = v601;
            v605 = v604 & 0xFFFFFFF8;
            v606 = (uint64_t)v604 >> 3;
            v607 = v601 - v605;
            if (v607)
              v608 = a2[v606] & ~(1 << (7 - v607)) | (((v603 >> 3) & 1) << (7 - v607));
            else
              LOBYTE(v608) = ((v603 & 8) != 0) << 7;
            a2[v606] = v608;
            v609 = v601 + 8;
            if (v601 + 1 >= 0)
              v609 = v601 + 1;
            v610 = v609 & 0xFFFFFFF8;
            v611 = (uint64_t)v609 >> 3;
            v612 = v601 + 1 - v610;
            if (v612)
              v613 = a2[v611] & ~(1 << (7 - v612)) | (((v603 >> 2) & 1) << (7 - v612));
            else
              LOBYTE(v613) = ((v603 & 4) != 0) << 7;
            a2[v611] = v613;
            v614 = v601 + 9;
            if (v601 + 2 >= 0)
              v614 = v601 + 2;
            v615 = v614 & 0xFFFFFFF8;
            v616 = (uint64_t)v614 >> 3;
            v617 = v601 + 2 - v615;
            if (v617)
              v618 = a2[v616] & ~(1 << (7 - v617)) | (((v603 >> 1) & 1) << (7 - v617));
            else
              LOBYTE(v618) = ((v603 & 2) != 0) << 7;
            a2[v616] = v618;
            v619 = v601 + 3;
            v620 = v603 & 1;
            v621 = v601 + 10;
            if (v619 >= 0)
              v621 = v619;
            v622 = v621 & 0xFFFFFFF8;
            v623 = (uint64_t)v621 >> 3;
            v624 = v619 - v622;
            if (v624)
              v620 = a2[v623] & ~(1 << (7 - v624)) | (v620 << (7 - v624));
            else
              LOBYTE(v620) = (_BYTE)v620 << 7;
            a2[v623] = v620;
            v6 += 5;
            goto LABEL_531;
          }
        }
        v6 = v601;
      }
LABEL_531:
      v403 = v524++ < a1[28];
    }
    while (v403);
  }
LABEL_3:
  v7 = *a1 - 1;
  v8 = v6 + 7;
  if (v6 >= 0)
    v8 = v6;
  v9 = v8 & 0xFFFFFFF8;
  v10 = (uint64_t)v8 >> 3;
  v11 = v6 - v9;
  if (v11)
    v12 = a2[v10] & ~(1 << (7 - v11)) | (((v7 >> 3) & 1) << (7 - v11));
  else
    LOBYTE(v12) = ((v7 & 8) != 0) << 7;
  a2[v10] = v12;
  v26 = v6 + 8;
  if (v6 + 1 >= 0)
    v26 = v6 + 1;
  v27 = v26 & 0xFFFFFFF8;
  v28 = (uint64_t)v26 >> 3;
  v29 = v6 + 1 - v27;
  if (v29)
    v30 = a2[v28] & ~(1 << (7 - v29)) | (((v7 >> 2) & 1) << (7 - v29));
  else
    LOBYTE(v30) = ((v7 & 4) != 0) << 7;
  a2[v28] = v30;
  v31 = v6 + 9;
  if (v6 + 2 >= 0)
    v31 = v6 + 2;
  v32 = v31 & 0xFFFFFFF8;
  v33 = (uint64_t)v31 >> 3;
  v34 = v6 + 2 - v32;
  if (v34)
    v35 = a2[v33] & ~(1 << (7 - v34)) | (((v7 >> 1) & 1) << (7 - v34));
  else
    LOBYTE(v35) = ((v7 & 2) != 0) << 7;
  a2[v33] = v35;
  v36 = v7 & 1;
  v37 = v6 + 10;
  if (v6 + 3 >= 0)
    v37 = v6 + 3;
  v38 = v37 & 0xFFFFFFF8;
  v39 = (uint64_t)v37 >> 3;
  v40 = v6 + 3 - v38;
  if (v40)
    v36 = a2[v39] & ~(1 << (7 - v40)) | (v36 << (7 - v40));
  else
    LOBYTE(v36) = (_BYTE)v36 << 7;
  a2[v39] = v36;
  v41 = a1[1] - 1;
  v42 = v6 + 11;
  if (v6 + 4 >= 0)
    v42 = v6 + 4;
  v43 = v42 & 0xFFFFFFF8;
  v44 = (uint64_t)v42 >> 3;
  v45 = v6 + 4 - v43;
  if (v45)
    v46 = a2[v44] & ~(1 << (7 - v45)) | (((v41 >> 3) & 1) << (7 - v45));
  else
    LOBYTE(v46) = ((v41 & 8) != 0) << 7;
  a2[v44] = v46;
  v47 = v6 + 12;
  if (v6 + 5 >= 0)
    v47 = v6 + 5;
  v48 = v47 & 0xFFFFFFF8;
  v49 = (uint64_t)v47 >> 3;
  v50 = v6 + 5 - v48;
  if (v50)
    v51 = a2[v49] & ~(1 << (7 - v50)) | (((v41 >> 2) & 1) << (7 - v50));
  else
    LOBYTE(v51) = ((v41 & 4) != 0) << 7;
  a2[v49] = v51;
  v52 = v6 + 13;
  if (v6 + 6 >= 0)
    v52 = v6 + 6;
  v53 = v52 & 0xFFFFFFF8;
  v54 = (uint64_t)v52 >> 3;
  v55 = v6 + 6 - v53;
  if (v55)
    v56 = a2[v54] & ~(1 << (7 - v55)) | (((v41 >> 1) & 1) << (7 - v55));
  else
    LOBYTE(v56) = ((v41 & 2) != 0) << 7;
  a2[v54] = v56;
  v57 = v41 & 1;
  v58 = v6 + 14;
  if (v6 + 7 >= 0)
    v58 = v6 + 7;
  v59 = v58 & 0xFFFFFFF8;
  v60 = (uint64_t)v58 >> 3;
  if (v6 + 7 == v59)
  {
    a2[v60] = v57 << 7;
    v61 = v6 + 8;
    v62 = *a1;
    if (*a1 < 1)
      goto LABEL_62;
  }
  else
  {
    a2[v60] = a2[v60] & ~(1 << (v59 - v6)) | (v57 << (v59 - v6));
    v61 = v6 + 8;
    v62 = *a1;
    if (*a1 < 1)
      goto LABEL_62;
  }
  v63 = a1[2] - 1;
  v64 = 7 - v61;
  v65 = v62 + 1;
  do
  {
    while (1)
    {
      v66 = (v63 >> (v65 - 2)) & 1;
      v67 = v61 + 7;
      if (v61 >= 0)
        v67 = v61;
      v68 = v67 & 0xFFFFFFF8;
      v69 = (uint64_t)v67 >> 3;
      if (v68 == v61)
        break;
      a2[v69] = a2[v69] & ~(1 << (v64 + v68)) | ((_BYTE)v66 << (v64 + v68));
      ++v61;
      --v64;
      if (--v65 <= 1)
        goto LABEL_62;
    }
    a2[v69] = (_BYTE)v66 << 7;
    ++v61;
    --v64;
    --v65;
  }
  while (v65 > 1);
LABEL_62:
  v70 = a1[1];
  if (v70 >= 1)
  {
    v71 = a1[3] - 1;
    v72 = 7 - v61;
    v73 = v70 + 1;
    do
    {
      while (1)
      {
        v74 = (v71 >> (v73 - 2)) & 1;
        v75 = v61 + 7;
        if (v61 >= 0)
          v75 = v61;
        v76 = v75 & 0xFFFFFFF8;
        v77 = (uint64_t)v75 >> 3;
        if (v76 == v61)
          break;
        a2[v77] = a2[v77] & ~(1 << (v72 + v76)) | ((_BYTE)v74 << (v72 + v76));
        ++v61;
        --v72;
        if (--v73 <= 1)
          goto LABEL_69;
      }
      a2[v77] = (_BYTE)v74 << 7;
      ++v61;
      --v72;
      --v73;
    }
    while (v73 > 1);
  }
LABEL_69:
  if (!*((_BYTE *)a1 + 58))
  {
    v78 = *((unsigned __int8 *)a1 + 16);
    v79 = v61 + 7;
    if (v61 >= 0)
      v79 = v61;
    v80 = v79 & 0xFFFFFFF8;
    v81 = (uint64_t)v79 >> 3;
    v82 = v61 - v80;
    if (v82)
    {
      a2[v81] = a2[v81] & ~(1 << (7 - v82)) | (v78 << (7 - v82));
      v83 = v61 + 1;
      if (*((_BYTE *)a1 + 16))
      {
LABEL_74:
        v84 = a1[6];
        v85 = v84 - 2;
        v86 = v83 + 7;
        if (v83 >= 0)
          v86 = v83;
        v87 = v86 & 0xFFFFFFF8;
        v88 = (uint64_t)v86 >> 3;
        v89 = v83 - v87;
        if (v89)
          v90 = a2[v88] & ~(1 << (7 - v89)) | ((((v84 - 2) >> 3) & 1) << (7 - v89));
        else
          LOBYTE(v90) = (((v84 - 2) & 8) != 0) << 7;
        a2[v88] = v90;
        v100 = v83 + 8;
        if (v83 + 1 >= 0)
          v100 = v83 + 1;
        v101 = v100 & 0xFFFFFFF8;
        v102 = (uint64_t)v100 >> 3;
        v103 = v83 + 1 - v101;
        if (v103)
          v104 = a2[v102] & ~(1 << (7 - v103)) | (((v85 >> 2) & 1) << (7 - v103));
        else
          LOBYTE(v104) = ((v85 & 4) != 0) << 7;
        a2[v102] = v104;
        v105 = (v85 >> 1) & 1;
        v106 = v83 + 9;
        if (v83 + 2 >= 0)
          v106 = v83 + 2;
        v107 = v106 & 0xFFFFFFF8;
        v108 = (uint64_t)v106 >> 3;
        v109 = v83 + 2 - v107;
        if (v109)
          v105 = a2[v108] & ~(1 << (7 - v109)) | (v105 << (7 - v109));
        else
          LOBYTE(v105) = (_BYTE)v105 << 7;
        a2[v108] = v105;
        v110 = v84 & 1;
        v111 = v83 + 10;
        if (v83 + 3 >= 0)
          v111 = v83 + 3;
        v112 = v111 & 0xFFFFFFF8;
        v113 = (uint64_t)v111 >> 3;
        v114 = v83 + 3 - v112;
        if (v114)
          v110 = a2[v113] & ~(1 << (7 - v114)) | (v110 << (7 - v114));
        else
          LOBYTE(v110) = (_BYTE)v110 << 7;
        a2[v113] = v110;
        v115 = a1[5] + ~a1[6];
        v116 = v83 + 11;
        if (v83 + 4 >= 0)
          v116 = v83 + 4;
        v117 = v116 & 0xFFFFFFF8;
        v118 = (uint64_t)v116 >> 3;
        v119 = v83 + 4 - v117;
        if (v119)
          v120 = a2[v118] & ~(1 << (7 - v119)) | (((v115 >> 2) & 1) << (7 - v119));
        else
          LOBYTE(v120) = ((v115 & 4) != 0) << 7;
        a2[v118] = v120;
        v121 = v83 + 12;
        if (v83 + 5 >= 0)
          v121 = v83 + 5;
        v122 = v121 & 0xFFFFFFF8;
        v123 = (uint64_t)v121 >> 3;
        v124 = v83 + 5 - v122;
        if (v124)
          v125 = a2[v123] & ~(1 << (7 - v124)) | (((v115 >> 1) & 1) << (7 - v124));
        else
          LOBYTE(v125) = ((v115 & 2) != 0) << 7;
        a2[v123] = v125;
        v126 = v83 + 6;
        v127 = v115 & 1;
        v128 = v83 + 13;
        if (v126 >= 0)
          v128 = v126;
        v129 = v128 & 0xFFFFFFF8;
        v130 = (uint64_t)v128 >> 3;
        v131 = v126 - v129;
        if (v131)
          v127 = a2[v130] & ~(1 << (7 - v131)) | (v127 << (7 - v131));
        else
          LOBYTE(v127) = (_BYTE)v127 << 7;
        a2[v130] = v127;
        v61 += 8;
        goto LABEL_114;
      }
    }
    else
    {
      a2[v81] = (_BYTE)v78 << 7;
      v83 = v61 + 1;
      if (*((_BYTE *)a1 + 16))
        goto LABEL_74;
    }
    v61 = v83;
  }
LABEL_114:
  v132 = *((unsigned __int8 *)a1 + 28);
  v133 = v61 + 7;
  if (v61 >= 0)
    v133 = v61;
  v134 = v133 & 0xFFFFFFF8;
  v135 = (uint64_t)v133 >> 3;
  v136 = v61 - v134;
  if (v136)
  {
    v137 = a2[v135] & ~(1 << (7 - v136)) | ((v132 == 15) << (7 - v136));
  }
  else if (v132 == 15)
  {
    LOBYTE(v137) = 0x80;
  }
  else
  {
    LOBYTE(v137) = 0;
  }
  a2[v135] = v137;
  v138 = *((unsigned __int8 *)a1 + 60);
  v139 = v61 + 8;
  if (v61 + 1 >= 0)
    v139 = v61 + 1;
  v140 = v139 & 0xFFFFFFF8;
  v141 = (uint64_t)v139 >> 3;
  v142 = v61 + 1 - v140;
  if (v142)
    v138 = a2[v141] & ~(1 << (7 - v142)) | (v138 << (7 - v142));
  else
    LOBYTE(v138) = (_BYTE)v138 << 7;
  a2[v141] = v138;
  v143 = *((_BYTE *)a1 + 61);
  v144 = v61 + 9;
  if (v61 + 2 >= 0)
    v144 = v61 + 2;
  v145 = v144 & 0xFFFFFFF8;
  v146 = (uint64_t)v144 >> 3;
  v147 = v61 + 2 - v145;
  if (v147)
  {
    a2[v146] = a2[v146] & ~(1 << (7 - v147)) | (v143 << (7 - v147));
    v148 = v61 + 3;
    if (*((_BYTE *)a1 + 58))
    {
LABEL_130:
      v149 = v148;
      goto LABEL_211;
    }
  }
  else
  {
    a2[v146] = v143 << 7;
    v148 = v61 + 3;
    if (*((_BYTE *)a1 + 58))
      goto LABEL_130;
  }
  v150 = *((unsigned __int8 *)a1 + 62);
  v151 = v148 + 7;
  if (v148 >= 0)
    v151 = v148;
  v152 = v151 & 0xFFFFFFF8;
  v153 = (uint64_t)v151 >> 3;
  v154 = v148 - v152;
  if (v154)
    v150 = a2[v153] & ~(1 << (7 - v154)) | (v150 << (7 - v154));
  else
    LOBYTE(v150) = (_BYTE)v150 << 7;
  a2[v153] = v150;
  v155 = *((unsigned __int8 *)a1 + 63);
  v156 = v61 + 11;
  if (v61 + 4 >= 0)
    v156 = v61 + 4;
  v157 = v156 & 0xFFFFFFF8;
  v158 = (uint64_t)v156 >> 3;
  v159 = v61 + 4 - v157;
  if (v159)
    v155 = a2[v158] & ~(1 << (7 - v159)) | (v155 << (7 - v159));
  else
    LOBYTE(v155) = (_BYTE)v155 << 7;
  a2[v158] = v155;
  v160 = *((unsigned __int8 *)a1 + 65);
  v161 = v61 + 12;
  if (v61 + 5 >= 0)
    v161 = v61 + 5;
  v162 = v161 & 0xFFFFFFF8;
  v163 = (uint64_t)v161 >> 3;
  v164 = v61 + 5 - v162;
  if (v164)
    v160 = a2[v163] & ~(1 << (7 - v164)) | (v160 << (7 - v164));
  else
    LOBYTE(v160) = (_BYTE)v160 << 7;
  a2[v163] = v160;
  v165 = *((unsigned __int8 *)a1 + 64);
  v166 = v61 + 13;
  if (v61 + 6 >= 0)
    v166 = v61 + 6;
  v167 = v166 & 0xFFFFFFF8;
  v168 = (uint64_t)v166 >> 3;
  v169 = v61 + 6 - v167;
  if (v169)
    v165 = a2[v168] & ~(1 << (7 - v169)) | (v165 << (7 - v169));
  else
    LOBYTE(v165) = (_BYTE)v165 << 7;
  a2[v168] = v165;
  v170 = a1[10];
  v171 = v61 + 14;
  if (v61 + 7 >= 0)
    v171 = v61 + 7;
  v172 = v171 & 0xFFFFFFF8;
  v173 = (uint64_t)v171 >> 3;
  if (v61 + 7 != v172)
  {
    a2[v173] = a2[v173] & ~(1 << (v172 - v61)) | (v170 << (v172 - v61));
    v174 = v61 + 8;
    if (!a1[10])
      goto LABEL_156;
LABEL_159:
    v176 = a1[12];
    v177 = v174 + 7;
    if (v174 >= 0)
      v177 = v174;
    v178 = v177 & 0xFFFFFFF8;
    v179 = (uint64_t)v177 >> 3;
    v180 = v174 - v178;
    if (v180)
      v181 = a2[v179] & ~(1 << (7 - v180)) | (v176 << (7 - v180));
    else
      LOBYTE(v181) = (_BYTE)v176 << 7;
    a2[v179] = v181;
    v182 = a1[13];
    v183 = v61 + 16;
    if (v61 + 9 >= 0)
      v183 = v61 + 9;
    v184 = v183 & 0xFFFFFFF8;
    v185 = (uint64_t)v183 >> 3;
    v186 = v61 + 9 - v184;
    if (v186)
    {
      a2[v185] = a2[v185] & ~(1 << (7 - v186)) | (v182 << (7 - v186));
      v174 = v61 + 10;
      if (*((_BYTE *)a1 + 56) == 2)
        goto LABEL_157;
    }
    else
    {
      a2[v185] = (_BYTE)v182 << 7;
      v174 = v61 + 10;
      if (*((_BYTE *)a1 + 56) == 2)
        goto LABEL_157;
    }
    goto LABEL_170;
  }
  a2[v173] = (_BYTE)v170 << 7;
  v174 = v61 + 8;
  if (a1[10])
    goto LABEL_159;
LABEL_156:
  if (*((_BYTE *)a1 + 56) == 2)
  {
LABEL_157:
    v175 = 1;
    goto LABEL_175;
  }
LABEL_170:
  v187 = v174 + 7;
  if (v174 >= 0)
    v187 = v174;
  v188 = v187 & 0xFFFFFFF8;
  v189 = (uint64_t)v187 >> 3;
  v190 = v174 - v188;
  if (v190)
    v190 = a2[v189] & ~(1 << (7 - v190));
  a2[v189] = v190;
  ++v174;
  v175 = *((unsigned __int8 *)a1 + 56);
LABEL_175:
  v191 = v174 + 7;
  if (v174 >= 0)
    v191 = v174;
  v192 = v191 & 0xFFFFFFF8;
  v193 = (uint64_t)v191 >> 3;
  v194 = v174 - v192;
  if (!v194)
  {
    a2[v193] = (_BYTE)v175 << 7;
    v195 = v174 + 1;
    v149 = v174 + 1;
    if (!*((_BYTE *)a1 + 56))
      goto LABEL_194;
LABEL_181:
    if (*((_BYTE *)a1 + 59) == 2)
    {
      v196 = 1;
    }
    else
    {
      v197 = v195 + 7;
      if (v195 >= 0)
        v197 = v195;
      v198 = v197 & 0xFFFFFFF8;
      v199 = (uint64_t)v197 >> 3;
      v200 = v195 - v198;
      if (v200)
        v200 = a2[v199] & ~(1 << (7 - v200));
      a2[v199] = v200;
      v149 = v174 + 2;
      v196 = *((unsigned __int8 *)a1 + 59);
    }
    v201 = v149 + 7;
    if (v149 >= 0)
      v201 = v149;
    v202 = v201 & 0xFFFFFFF8;
    v203 = (uint64_t)v201 >> 3;
    v204 = v149 - v202;
    if (v204)
      v196 = a2[v203] & ~(1 << (7 - v204)) | (v196 << (7 - v204));
    else
      LOBYTE(v196) = (_BYTE)v196 << 7;
    a2[v203] = v196;
    ++v149;
    goto LABEL_194;
  }
  a2[v193] = a2[v193] & ~(1 << (7 - v194)) | (v175 << (7 - v194));
  v195 = v174 + 1;
  v149 = v174 + 1;
  if (*((_BYTE *)a1 + 56))
    goto LABEL_181;
LABEL_194:
  if (a1[10])
  {
    v205 = a1[11];
    v206 = v149 + 7;
    if (v149 >= 0)
      v206 = v149;
    v207 = v206 & 0xFFFFFFF8;
    v208 = (uint64_t)v206 >> 3;
    v209 = v149 - v207;
    if (v209)
      v210 = a2[v208] & ~(1 << (7 - v209)) | (((v205 >> 2) & 1) << (7 - v209));
    else
      LOBYTE(v210) = ((a1[11] & 4) != 0) << 7;
    a2[v208] = v210;
    v211 = v149 + 8;
    if (v149 + 1 >= 0)
      v211 = v149 + 1;
    v212 = v211 & 0xFFFFFFF8;
    v213 = (uint64_t)v211 >> 3;
    v214 = v149 + 1 - v212;
    if (v214)
      v215 = a2[v213] & ~(1 << (7 - v214)) | (((v205 >> 1) & 1) << (7 - v214));
    else
      LOBYTE(v215) = ((v205 & 2) != 0) << 7;
    a2[v213] = v215;
    v216 = v205 & 1;
    v217 = v149 + 9;
    if (v149 + 2 >= 0)
      v217 = v149 + 2;
    v218 = v217 & 0xFFFFFFF8;
    v219 = (uint64_t)v217 >> 3;
    v220 = v149 + 2 - v218;
    if (v220)
      v216 = a2[v219] & ~(1 << (7 - v220)) | (v216 << (7 - v220));
    else
      LOBYTE(v216) = (_BYTE)v216 << 7;
    a2[v219] = v216;
    v149 += 3;
  }
LABEL_211:
  v221 = *((unsigned __int8 *)a1 + 66);
  v222 = v149 + 7;
  if (v149 >= 0)
    v222 = v149;
  v223 = v222 & 0xFFFFFFF8;
  v224 = (uint64_t)v222 >> 3;
  v225 = v149 - v223;
  if (v225)
    v221 = a2[v224] & ~(1 << (7 - v225)) | (v221 << (7 - v225));
  else
    LOBYTE(v221) = (_BYTE)v221 << 7;
  a2[v224] = v221;
  v226 = *((unsigned __int8 *)a1 + 67);
  v227 = v149 + 8;
  if (v149 + 1 >= 0)
    v227 = v149 + 1;
  v228 = v227 & 0xFFFFFFF8;
  v229 = (uint64_t)v227 >> 3;
  v230 = v149 + 1 - v228;
  if (v230)
    v226 = a2[v229] & ~(1 << (7 - v230)) | (v226 << (7 - v230));
  else
    LOBYTE(v226) = (_BYTE)v226 << 7;
  a2[v229] = v226;
  v231 = *((unsigned __int8 *)a1 + 68);
  v232 = v149 + 9;
  if (v149 + 2 >= 0)
    v232 = v149 + 2;
  v233 = v232 & 0xFFFFFFF8;
  v234 = (uint64_t)v232 >> 3;
  v235 = v149 + 2 - v233;
  if (v235)
    v231 = a2[v234] & ~(1 << (7 - v235)) | (v231 << (7 - v235));
  else
    LOBYTE(v231) = (_BYTE)v231 << 7;
  a2[v234] = v231;
  v236 = a1[18];
  v237 = v149 + 10;
  if (v149 + 3 >= 0)
    v237 = v149 + 3;
  v238 = v237 & 0xFFFFFFF8;
  v239 = (uint64_t)v237 >> 3;
  v240 = v149 + 3 - v238;
  if (v240)
  {
    a2[v239] = a2[v239] & ~(1 << (7 - v240)) | ((v236 != 8) << (7 - v240));
    v241 = v149 + 4;
    v242 = v149 + 4;
    v243 = *((unsigned __int8 *)a1 + 69);
    if (v243 != 2)
      goto LABEL_230;
  }
  else
  {
    if (v236 == 8)
      v245 = 0;
    else
      v245 = 0x80;
    a2[v239] = v245;
    v241 = v149 + 4;
    v242 = v149 + 4;
    v243 = *((unsigned __int8 *)a1 + 69);
    if (v243 != 2)
    {
LABEL_230:
      v244 = *((unsigned __int8 *)a1 + 77);
      if (v243 == 1)
        goto LABEL_231;
      goto LABEL_247;
    }
  }
  v246 = a1[18];
  if (v246 == 8)
  {
    v244 = *((unsigned __int8 *)a1 + 77);
  }
  else
  {
    v247 = v241 + 7;
    if (v241 >= 0)
      v247 = v241;
    v248 = v247 & 0xFFFFFFF8;
    v249 = (uint64_t)v247 >> 3;
    v250 = v241 - v248;
    if (v250)
    {
      v251 = a2[v249] & ~(1 << (7 - v250)) | ((v246 != 10) << (7 - v250));
    }
    else if (v246 == 10)
    {
      LOBYTE(v251) = 0;
    }
    else
    {
      LOBYTE(v251) = 0x80;
    }
    a2[v249] = v251;
    v242 = v149 + 5;
    v244 = *((unsigned __int8 *)a1 + 77);
    if (*((_BYTE *)a1 + 69) == 1)
    {
LABEL_231:
      if (a1[20] != 2)
        goto LABEL_268;
      goto LABEL_253;
    }
  }
LABEL_247:
  v252 = v242 + 7;
  if (v242 >= 0)
    v252 = v242;
  v253 = v252 & 0xFFFFFFF8;
  v254 = (uint64_t)v252 >> 3;
  v255 = v242 - v253;
  if (v255)
  {
    a2[v254] = a2[v254] & ~(1 << (7 - v255)) | ((_BYTE)v244 << (7 - v255));
    ++v242;
    if (a1[20] != 2)
      goto LABEL_268;
  }
  else
  {
    a2[v254] = (_BYTE)v244 << 7;
    ++v242;
    if (a1[20] != 2)
      goto LABEL_268;
  }
LABEL_253:
  if (a1[21] == 2 && a1[22] == 2)
  {
    v256 = v242 + 7;
    if (v242 >= 0)
      v256 = v242;
    v257 = v256 & 0xFFFFFFF8;
    v258 = (uint64_t)v256 >> 3;
    v259 = v242 - v257;
    if (v259)
      v259 = a2[v258] & ~(1 << (7 - v259));
    a2[v258] = v259;
    v260 = v242 + 1;
    v261 = v242 + 1;
    if (v244)
      goto LABEL_394;
    goto LABEL_260;
  }
LABEL_268:
  v268 = v242 + 7;
  if (v242 >= 0)
    v268 = v242;
  v269 = v268 & 0xFFFFFFF8;
  v270 = (uint64_t)v268 >> 3;
  v271 = v242 - v269;
  if (v271)
    v272 = a2[v270] | (1 << (7 - v271));
  else
    LOBYTE(v272) = 0x80;
  a2[v270] = v272;
  v273 = a1[20];
  v274 = v242 + 8;
  if (v242 + 1 >= 0)
    v274 = v242 + 1;
  v275 = v274 & 0xFFFFFFF8;
  v276 = (uint64_t)v274 >> 3;
  v277 = v242 + 1 - v275;
  if (v277)
    v278 = a2[v276] & ~(1 << (7 - v277)) | (((v273 >> 7) & 1) << (7 - v277));
  else
    LOBYTE(v278) = ((a1[20] & 0x80) != 0) << 7;
  a2[v276] = v278;
  v279 = v242 + 9;
  if (v242 + 2 >= 0)
    v279 = v242 + 2;
  v280 = v279 & 0xFFFFFFF8;
  v281 = (uint64_t)v279 >> 3;
  v282 = v242 + 2 - v280;
  if (v282)
    v283 = a2[v281] & ~(1 << (7 - v282)) | (((v273 >> 6) & 1) << (7 - v282));
  else
    LOBYTE(v283) = ((v273 & 0x40) != 0) << 7;
  a2[v281] = v283;
  v284 = v242 + 10;
  if (v242 + 3 >= 0)
    v284 = v242 + 3;
  v285 = v284 & 0xFFFFFFF8;
  v286 = (uint64_t)v284 >> 3;
  v287 = v242 + 3 - v285;
  if (v287)
    v288 = a2[v286] & ~(1 << (7 - v287)) | (((v273 >> 5) & 1) << (7 - v287));
  else
    LOBYTE(v288) = ((v273 & 0x20) != 0) << 7;
  a2[v286] = v288;
  v289 = v242 + 11;
  if (v242 + 4 >= 0)
    v289 = v242 + 4;
  v290 = v289 & 0xFFFFFFF8;
  v291 = (uint64_t)v289 >> 3;
  v292 = v242 + 4 - v290;
  if (v292)
    v293 = a2[v291] & ~(1 << (7 - v292)) | (((v273 >> 4) & 1) << (7 - v292));
  else
    LOBYTE(v293) = ((v273 & 0x10) != 0) << 7;
  a2[v291] = v293;
  v294 = v242 + 12;
  if (v242 + 5 >= 0)
    v294 = v242 + 5;
  v295 = v294 & 0xFFFFFFF8;
  v296 = (uint64_t)v294 >> 3;
  v297 = v242 + 5 - v295;
  if (v297)
    v298 = a2[v296] & ~(1 << (7 - v297)) | (((v273 >> 3) & 1) << (7 - v297));
  else
    LOBYTE(v298) = ((v273 & 8) != 0) << 7;
  a2[v296] = v298;
  v299 = v242 + 13;
  if (v242 + 6 >= 0)
    v299 = v242 + 6;
  v300 = v299 & 0xFFFFFFF8;
  v301 = (uint64_t)v299 >> 3;
  v302 = v242 + 6 - v300;
  if (v302)
    v303 = a2[v301] & ~(1 << (7 - v302)) | (((v273 >> 2) & 1) << (7 - v302));
  else
    LOBYTE(v303) = ((v273 & 4) != 0) << 7;
  a2[v301] = v303;
  v304 = v242 + 14;
  if (v242 + 7 >= 0)
    v304 = v242 + 7;
  v305 = v304 & 0xFFFFFFF8;
  v306 = (uint64_t)v304 >> 3;
  if (v242 + 7 == v305)
    LOBYTE(v307) = ((v273 & 2) != 0) << 7;
  else
    v307 = a2[v306] & ~(1 << (v305 - v242)) | (((v273 >> 1) & 1) << (v305 - v242));
  a2[v306] = v307;
  v308 = v273 & 1;
  v309 = v242 + 15;
  if (v242 + 8 >= 0)
    v309 = v242 + 8;
  v310 = v309 & 0xFFFFFFF8;
  v311 = (uint64_t)v309 >> 3;
  v312 = v242 + 8 - v310;
  if (v312)
    v308 = a2[v311] & ~(1 << (7 - v312)) | (v308 << (7 - v312));
  else
    LOBYTE(v308) = (_BYTE)v308 << 7;
  a2[v311] = v308;
  v313 = a1[21];
  v314 = v242 + 16;
  if (v242 + 9 >= 0)
    v314 = v242 + 9;
  v315 = v314 & 0xFFFFFFF8;
  v316 = (uint64_t)v314 >> 3;
  v317 = v242 + 9 - v315;
  if (v317)
    v318 = a2[v316] & ~(1 << (7 - v317)) | (((v313 >> 7) & 1) << (7 - v317));
  else
    LOBYTE(v318) = ((a1[21] & 0x80) != 0) << 7;
  a2[v316] = v318;
  v319 = v242 + 17;
  if (v242 + 10 >= 0)
    v319 = v242 + 10;
  v320 = v319 & 0xFFFFFFF8;
  v321 = (uint64_t)v319 >> 3;
  v322 = v242 + 10 - v320;
  if (v322)
    v323 = a2[v321] & ~(1 << (7 - v322)) | (((v313 >> 6) & 1) << (7 - v322));
  else
    LOBYTE(v323) = ((v313 & 0x40) != 0) << 7;
  a2[v321] = v323;
  v324 = v242 + 18;
  if (v242 + 11 >= 0)
    v324 = v242 + 11;
  v325 = v324 & 0xFFFFFFF8;
  v326 = (uint64_t)v324 >> 3;
  v327 = v242 + 11 - v325;
  if (v327)
    v328 = a2[v326] & ~(1 << (7 - v327)) | (((v313 >> 5) & 1) << (7 - v327));
  else
    LOBYTE(v328) = ((v313 & 0x20) != 0) << 7;
  a2[v326] = v328;
  v329 = v242 + 19;
  if (v242 + 12 >= 0)
    v329 = v242 + 12;
  v330 = v329 & 0xFFFFFFF8;
  v331 = (uint64_t)v329 >> 3;
  v332 = v242 + 12 - v330;
  if (v332)
    v333 = a2[v331] & ~(1 << (7 - v332)) | (((v313 >> 4) & 1) << (7 - v332));
  else
    LOBYTE(v333) = ((v313 & 0x10) != 0) << 7;
  a2[v331] = v333;
  v334 = v242 + 20;
  if (v242 + 13 >= 0)
    v334 = v242 + 13;
  v335 = v334 & 0xFFFFFFF8;
  v336 = (uint64_t)v334 >> 3;
  v337 = v242 + 13 - v335;
  if (v337)
    v338 = a2[v336] & ~(1 << (7 - v337)) | (((v313 >> 3) & 1) << (7 - v337));
  else
    LOBYTE(v338) = ((v313 & 8) != 0) << 7;
  a2[v336] = v338;
  v339 = v242 + 21;
  if (v242 + 14 >= 0)
    v339 = v242 + 14;
  v340 = v339 & 0xFFFFFFF8;
  v341 = (uint64_t)v339 >> 3;
  v342 = v242 + 14 - v340;
  if (v342)
    v343 = a2[v341] & ~(1 << (7 - v342)) | (((v313 >> 2) & 1) << (7 - v342));
  else
    LOBYTE(v343) = ((v313 & 4) != 0) << 7;
  a2[v341] = v343;
  v344 = v242 + 22;
  if (v242 + 15 >= 0)
    v344 = v242 + 15;
  v345 = v344 & 0xFFFFFFF8;
  v346 = (uint64_t)v344 >> 3;
  v347 = v242 + 15 - v345;
  if (v347)
    v348 = a2[v346] & ~(1 << (7 - v347)) | (((v313 >> 1) & 1) << (7 - v347));
  else
    LOBYTE(v348) = ((v313 & 2) != 0) << 7;
  a2[v346] = v348;
  v349 = v313 & 1;
  v350 = v242 + 23;
  if (v242 + 16 >= 0)
    v350 = v242 + 16;
  v351 = v350 & 0xFFFFFFF8;
  v352 = (uint64_t)v350 >> 3;
  v353 = v242 + 16 - v351;
  if (v353)
    v349 = a2[v352] & ~(1 << (7 - v353)) | (v349 << (7 - v353));
  else
    LOBYTE(v349) = (_BYTE)v349 << 7;
  a2[v352] = v349;
  v354 = a1[22];
  v355 = v242 + 24;
  if (v242 + 17 >= 0)
    v355 = v242 + 17;
  v356 = v355 & 0xFFFFFFF8;
  v357 = (uint64_t)v355 >> 3;
  v358 = v242 + 17 - v356;
  if (v358)
    v359 = a2[v357] & ~(1 << (7 - v358)) | (((v354 >> 7) & 1) << (7 - v358));
  else
    LOBYTE(v359) = ((a1[22] & 0x80) != 0) << 7;
  a2[v357] = v359;
  v360 = v242 + 25;
  if (v242 + 18 >= 0)
    v360 = v242 + 18;
  v361 = v360 & 0xFFFFFFF8;
  v362 = (uint64_t)v360 >> 3;
  v363 = v242 + 18 - v361;
  if (v363)
    v364 = a2[v362] & ~(1 << (7 - v363)) | (((v354 >> 6) & 1) << (7 - v363));
  else
    LOBYTE(v364) = ((v354 & 0x40) != 0) << 7;
  a2[v362] = v364;
  v365 = v242 + 26;
  if (v242 + 19 >= 0)
    v365 = v242 + 19;
  v366 = v365 & 0xFFFFFFF8;
  v367 = (uint64_t)v365 >> 3;
  v368 = v242 + 19 - v366;
  if (v368)
    v369 = a2[v367] & ~(1 << (7 - v368)) | (((v354 >> 5) & 1) << (7 - v368));
  else
    LOBYTE(v369) = ((v354 & 0x20) != 0) << 7;
  a2[v367] = v369;
  v370 = v242 + 27;
  if (v242 + 20 >= 0)
    v370 = v242 + 20;
  v371 = v370 & 0xFFFFFFF8;
  v372 = (uint64_t)v370 >> 3;
  v373 = v242 + 20 - v371;
  if (v373)
    v374 = a2[v372] & ~(1 << (7 - v373)) | (((v354 >> 4) & 1) << (7 - v373));
  else
    LOBYTE(v374) = ((v354 & 0x10) != 0) << 7;
  a2[v372] = v374;
  v375 = v242 + 28;
  if (v242 + 21 >= 0)
    v375 = v242 + 21;
  v376 = v375 & 0xFFFFFFF8;
  v377 = (uint64_t)v375 >> 3;
  v378 = v242 + 21 - v376;
  if (v378)
    v379 = a2[v377] & ~(1 << (7 - v378)) | (((v354 >> 3) & 1) << (7 - v378));
  else
    LOBYTE(v379) = ((v354 & 8) != 0) << 7;
  a2[v377] = v379;
  v380 = v242 + 29;
  if (v242 + 22 >= 0)
    v380 = v242 + 22;
  v381 = v380 & 0xFFFFFFF8;
  v382 = (uint64_t)v380 >> 3;
  v383 = v242 + 22 - v381;
  if (v383)
    v384 = a2[v382] & ~(1 << (7 - v383)) | (((v354 >> 2) & 1) << (7 - v383));
  else
    LOBYTE(v384) = ((v354 & 4) != 0) << 7;
  a2[v382] = v384;
  v385 = v242 + 30;
  if (v242 + 23 >= 0)
    v385 = v242 + 23;
  v386 = v385 & 0xFFFFFFF8;
  v387 = (uint64_t)v385 >> 3;
  v388 = v242 + 23 - v386;
  if (v388)
    v389 = a2[v387] & ~(1 << (7 - v388)) | (((v354 >> 1) & 1) << (7 - v388));
  else
    LOBYTE(v389) = ((v354 & 2) != 0) << 7;
  a2[v387] = v389;
  v390 = v354 & 1;
  v391 = v242 + 31;
  if (v242 + 24 >= 0)
    v391 = v242 + 24;
  v392 = v391 & 0xFFFFFFF8;
  v393 = (uint64_t)v391 >> 3;
  v394 = v242 + 24 - v392;
  if (v394)
  {
    a2[v393] = a2[v393] & ~(1 << (7 - v394)) | (v390 << (7 - v394));
    v260 = v242 + 25;
    v261 = v242 + 25;
    if (!v244)
      goto LABEL_260;
LABEL_394:
    v395 = a1[23];
    goto LABEL_647;
  }
  a2[v393] = v390 << 7;
  v260 = v242 + 25;
  v261 = v242 + 25;
  if (v244)
    goto LABEL_394;
LABEL_260:
  if (a1[20] != 1 || a1[21] != 13 || a1[22])
  {
    v262 = a1[23];
    v263 = v260 + 7;
    if (v260 >= 0)
      v263 = v260;
    v264 = v263 & 0xFFFFFFF8;
    v265 = (uint64_t)v263 >> 3;
    v266 = v260 - v264;
    if (v266)
    {
      a2[v265] = a2[v265] & ~(1 << (7 - v266)) | (v262 << (7 - v266));
      v267 = v261 + 1;
      if (*((_BYTE *)a1 + 69) != 2)
        goto LABEL_633;
    }
    else
    {
      a2[v265] = (_BYTE)v262 << 7;
      v267 = v261 + 1;
      if (*((_BYTE *)a1 + 69) != 2)
        goto LABEL_633;
    }
    if (a1[18] == 12)
    {
      v396 = a1[24];
      v397 = v267 + 7;
      if (v267 >= 0)
        v397 = v267;
      v398 = v397 & 0xFFFFFFF8;
      v399 = (uint64_t)v397 >> 3;
      v400 = v267 - v398;
      if (v400)
      {
        a2[v399] = a2[v399] & ~(1 << (7 - v400)) | (v396 << (7 - v400));
        v267 = v261 + 2;
        if (!a1[24])
          goto LABEL_633;
LABEL_627:
        v625 = a1[25];
        v626 = v267 + 7;
        if (v267 >= 0)
          v626 = v267;
        v627 = v626 & 0xFFFFFFF8;
        v628 = (uint64_t)v626 >> 3;
        v629 = v267 - v627;
        if (v629)
          v630 = a2[v628] & ~(1 << (7 - v629)) | (v625 << (7 - v629));
        else
          LOBYTE(v630) = (_BYTE)v625 << 7;
        a2[v628] = v630;
        v267 = v261 + 3;
        goto LABEL_633;
      }
      a2[v399] = (_BYTE)v396 << 7;
      v267 = v261 + 2;
      if (a1[24])
        goto LABEL_627;
    }
LABEL_633:
    v261 = v267;
    if (a1[24] == 1 && a1[25] == 1)
    {
      v631 = a1[26];
      v632 = v267 + 7;
      if (v267 >= 0)
        v632 = v267;
      v633 = v632 & 0xFFFFFFF8;
      v634 = (uint64_t)v632 >> 3;
      v635 = v267 - v633;
      if (v635)
        v636 = a2[v634] & ~(1 << (7 - v635)) | (((v631 >> 1) & 1) << (7 - v635));
      else
        LOBYTE(v636) = ((a1[26] & 2) != 0) << 7;
      a2[v634] = v636;
      v637 = v631 & 1;
      v638 = v267 + 8;
      if (v267 + 1 >= 0)
        v638 = v267 + 1;
      v639 = v638 & 0xFFFFFFF8;
      v640 = (uint64_t)v638 >> 3;
      v641 = v267 + 1 - v639;
      if (v641)
        v637 = a2[v640] & ~(1 << (7 - v641)) | (v637 << (7 - v641));
      else
        LOBYTE(v637) = (_BYTE)v637 << 7;
      a2[v640] = v637;
      v261 = v267 + 2;
    }
  }
  v395 = *((unsigned __int8 *)a1 + 108);
LABEL_647:
  v642 = v261 + 7;
  if (v261 >= 0)
    v642 = v261;
  v643 = v642 & 0xFFFFFFF8;
  v644 = (uint64_t)v642 >> 3;
  v645 = v261 - v643;
  if (v645)
    v395 = a2[v644] & ~(1 << (7 - v645)) | (v395 << (7 - v645));
  else
    LOBYTE(v395) = (_BYTE)v395 << 7;
  a2[v644] = v395;
  v646 = *((unsigned __int8 *)a1 + 109);
  v647 = v261 + 8;
  if (v261 + 1 >= 0)
    v647 = v261 + 1;
  v648 = v647 & 0xFFFFFFF8;
  v649 = (uint64_t)v647 >> 3;
  v650 = v261 + 1 - v648;
  if (v650)
    v646 = a2[v649] & ~(1 << (7 - v650)) | (v646 << (7 - v650));
  else
    LOBYTE(v646) = (_BYTE)v646 << 7;
  a2[v649] = v646;
  v651 = v261 + 2;
  v652 = v261 + 9;
  if (v261 + 2 >= 0)
    v652 = v261 + 2;
  v653 = v651 - (v652 & 0xFFFFFFF8);
  v654 = (uint64_t)v652 >> 3;
  if ((v651 & 7) != 0)
  {
    if (v653)
      v655 = a2[v654] | (1 << (7 - v653));
    else
      LOBYTE(v655) = 0x80;
    a2[v654] = v655;
    v657 = v261 + 3;
    v658 = v657 >> 3;
    if ((v657 & 7) != 0)
      return v658 + 1;
    else
      return v658;
  }
  else
  {
    if (v653)
      v656 = a2[v654] | (1 << (7 - v653));
    else
      LOBYTE(v656) = 0x80;
    a2[v654] = v656;
    v660 = v261 + 10;
    if (v261 + 3 >= 0)
      v660 = v261 + 3;
    v661 = v660 & 0xFFFFFFF8;
    v662 = (uint64_t)v660 >> 3;
    v663 = v261 + 3 - v661;
    if (v663)
      v663 = a2[v662] & ~(1 << (7 - v663));
    a2[v662] = v663;
    v664 = v261 + 11;
    if (v261 + 4 >= 0)
      v664 = v261 + 4;
    v665 = v664 & 0xFFFFFFF8;
    v666 = (uint64_t)v664 >> 3;
    v667 = v261 + 4 - v665;
    if (v667)
      v667 = a2[v666] & ~(1 << (7 - v667));
    a2[v666] = v667;
    v668 = v261 + 12;
    if (v261 + 5 >= 0)
      v668 = v261 + 5;
    v669 = v668 & 0xFFFFFFF8;
    v670 = (uint64_t)v668 >> 3;
    v671 = v261 + 5 - v669;
    if (v671)
      v671 = a2[v670] & ~(1 << (7 - v671));
    a2[v670] = v671;
    v672 = v261 + 13;
    if (v261 + 6 >= 0)
      v672 = v261 + 6;
    v673 = v672 & 0xFFFFFFF8;
    v674 = (uint64_t)v672 >> 3;
    v675 = v261 + 6 - v673;
    if (v675)
      v675 = a2[v674] & ~(1 << (7 - v675));
    a2[v674] = v675;
    v676 = v261 + 14;
    if (v261 + 7 >= 0)
      v676 = v261 + 7;
    v677 = v676 & 0xFFFFFFF8;
    v678 = (uint64_t)v676 >> 3;
    v679 = v261 + 7 - v677;
    if (v679)
      v679 = a2[v678] & ~(1 << (v677 - v261));
    a2[v678] = v679;
    v680 = v261 + 15;
    if (v261 + 8 >= 0)
      v680 = v261 + 8;
    v681 = v680 & 0xFFFFFFF8;
    v682 = (uint64_t)v680 >> 3;
    v683 = v261 + 8 - v681;
    if (v683)
      v683 = a2[v682] & ~(1 << (7 - v683));
    a2[v682] = v683;
    v684 = v261 + 16;
    if (v261 + 9 >= 0)
      v684 = v261 + 9;
    v685 = v684 & 0xFFFFFFF8;
    v686 = (uint64_t)v684 >> 3;
    v687 = v261 + 9 - v685;
    if (v687)
      v687 = a2[v686] & ~(1 << (7 - v687));
    a2[v686] = v687;
    v688 = v261 + 10;
    v689 = v688 >> 3;
    if ((v688 & 7) != 0)
      return v689 + 1;
    else
      return v689;
  }
}

uint64_t av1_write_obu_tg_tile_headers(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  _BYTE *v11;
  int v12;
  char v13;
  unsigned int v14;
  int v15;
  int v16;
  _OWORD *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BYTE *v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;

  v6 = (_DWORD *)(result + 636984);
  v7 = (_DWORD *)(result + 263744);
  v8 = *(_DWORD *)(result + 637420);
  v9 = v8 + *(_DWORD *)(result + 263744) * *(_DWORD *)(result + 263748);
  v10 = *(unsigned __int8 *)(a3 + 56);
  v11 = *(_BYTE **)(a3 + 40);
  if (v8 == 1 && *(_DWORD *)(*(_QWORD *)result + 23208))
    ++*v6;
  v12 = v9 - 1;
  if (v8 == 1)
    v13 = 50;
  else
    v13 = 34;
  *v11 = v13 | (4 * (v10 != 0));
  if (v10)
  {
    v11[1] = v10;
    v14 = 2;
    *(_DWORD *)(a3 + 60) = 2;
    *(_DWORD *)(a3 + 64) = 2;
    v15 = *(_DWORD *)(result + 637420);
    v16 = v12 / v8;
    if (v15 != 1)
      goto LABEL_12;
  }
  else
  {
    v14 = 1;
    *(_DWORD *)(a3 + 60) = 1;
    *(_DWORD *)(a3 + 64) = 1;
    v15 = *(_DWORD *)(result + 637420);
    v16 = v12 / v8;
    if (v15 != 1)
      goto LABEL_12;
  }
  v17 = *(_OWORD **)a3;
  v34 = *(_QWORD *)(a3 + 40) + v14;
  v35 = 0;
  result = write_uncompressed_header_obu(result, a2, v17, (uint64_t)&v34);
  v14 = *(_DWORD *)(a3 + 64) + (v35 >> 3);
  if ((v35 & 7) != 0)
    ++v14;
  *(_DWORD *)(a3 + 64) = v14;
  v15 = v6[109];
LABEL_12:
  v18 = v7[1] * *v7;
  if ((int)(v16 + a4) < v18)
    v18 = v16 + a4;
  v20 = v7[6];
  v19 = v7[7];
  v21 = v20 + v19;
  if (v20 + v19)
  {
    v22 = (_BYTE *)(*(_QWORD *)(a3 + 40) + (int)v14);
    *v22 = (v15 > 1) << 7;
    v23 = 1;
    if (v15 >= 2 && v21 >= 1)
    {
      v24 = 0;
      v25 = -1;
      do
      {
        while (1)
        {
          v26 = (a4 >> (v21 + v25)) & 1;
          v27 = (unint64_t)(v24 + 1) >> 3;
          if ((((_BYTE)v24 + 1) & 7) == 0)
            break;
          v22[v27] = v22[v27] & ~(1 << ((v24 + 1) & 7 ^ 7)) | ((_BYTE)v26 << ((v24 + 1) & 7 ^ 7));
          --v25;
          if (v21 == ++v24)
            goto LABEL_21;
        }
        v22[v27] = (_BYTE)v26 << 7;
        --v25;
        ++v24;
      }
      while (v21 != v24);
LABEL_21:
      v28 = 0;
      v29 = v20 + v19 - 1;
      v23 = v21 - v25;
      do
      {
        while (1)
        {
          v30 = ((v18 - 1) >> v29) & 1;
          v31 = (unint64_t)(v21 + 1 + v28) >> 3;
          result = ((_BYTE)v21 + 1 + (_BYTE)v28) & 7;
          if ((((_BYTE)v21 + 1 + (_BYTE)v28) & 7) == 0)
            break;
          result = result ^ 7;
          v22[v31] = v22[v31] & ~(1 << result) | ((_BYTE)v30 << result);
          ++v28;
          --v29;
          if (v24 == v28)
            goto LABEL_25;
        }
        v22[v31] = (_BYTE)v30 << 7;
        ++v28;
        --v29;
      }
      while (v24 != v28);
    }
LABEL_25:
    if ((v23 & 7) != 0)
      v32 = (v23 >> 3) + 1;
    else
      v32 = v23 >> 3;
    v14 = *(_DWORD *)(a3 + 64);
  }
  else
  {
    v32 = 0;
  }
  v33 = v32 + v14;
  *(_DWORD *)(a3 + 64) = v33;
  **(_DWORD **)(a3 + 24) += v33;
  return result;
}

void av1_pack_tile_info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  int v19;
  int v20;
  int v21[6];
  void *__dst[2];
  void *v23[2];
  __int128 v24;
  uint64_t v25;
  unsigned int v26;

  v25 = 0;
  *(_OWORD *)v23 = 0u;
  v24 = 0u;
  *(_OWORD *)__dst = 0u;
  v6 = *(int *)(a3 + 72);
  v7 = *(int *)(a3 + 76);
  v8 = *(_QWORD *)(a1 + 263720);
  v9 = *(_DWORD *)(v8 + 36);
  v11 = *(_DWORD *)(a1 + 239572);
  v10 = *(_DWORD *)(a1 + 239576);
  if (*(_DWORD *)(a1 + 263804 + 4 * ((int)v7 + 1)) << v9 < v10)
    v10 = *(_DWORD *)(a1 + 263804 + 4 * ((int)v7 + 1)) << v9;
  v12 = *(_DWORD **)(a3 + 24);
  v21[2] = *(_DWORD *)(a1 + 263804 + 4 * v7) << v9;
  v21[3] = v10;
  v13 = *(_DWORD *)(a1 + 264064 + 4 * v6) << v9;
  v14 = *(_DWORD *)(a1 + 264064 + 4 * ((int)v6 + 1)) << v9;
  v21[4] = v6;
  v21[5] = v7;
  if (v14 >= v11)
    v14 = v11;
  v21[0] = v13;
  v21[1] = v14;
  LOBYTE(v25) = *(_BYTE *)(a1 + 239532) ^ 1;
  v15 = *(unsigned __int8 *)(v8 + 77);
  *(_QWORD *)(a2 + 8608) = 0xFFEA000FFFF90003;
  *(_QWORD *)(a2 + 8592) = 0xFFEA000FFFF90003;
  *(_WORD *)(a2 + 8616) = 15;
  *(_WORD *)(a2 + 8600) = 15;
  *(_WORD *)(a2 + 8618) = -7;
  *(_WORD *)(a2 + 8602) = -7;
  *(_WORD *)(a2 + 8620) = 3;
  *(_WORD *)(a2 + 8604) = 3;
  *(_QWORD *)(a2 + 8692) = 0x1FFFFFFFE0;
  if (v15)
  {
    v16 = *(_QWORD *)(a3 + 32);
    v17 = *v12;
    *(_QWORD *)(a3 + 8) = v16 + v17;
    if (*(_DWORD *)(a3 + 80))
      goto LABEL_7;
  }
  else
  {
    *(_QWORD *)(a2 + 8640) = 0xFFEA000FFFF90003;
    *(_QWORD *)(a2 + 8624) = 0xFFEA000FFFF90003;
    *(_WORD *)(a2 + 8648) = 15;
    *(_WORD *)(a2 + 8632) = 15;
    *(_DWORD *)(a2 + 8650) = 262137;
    *(_DWORD *)(a2 + 8634) = 262137;
    *(_QWORD *)(a2 + 8704) = 0x1FFFFFFFE0;
    *(_QWORD *)(a2 + 8672) = 0xFFEA000FFFF90003;
    *(_QWORD *)(a2 + 8656) = 0xFFEA000FFFF90003;
    *(_WORD *)(a2 + 8680) = 15;
    *(_WORD *)(a2 + 8664) = 15;
    *(_DWORD *)(a2 + 8682) = 262137;
    *(_DWORD *)(a2 + 8666) = 262137;
    *(_QWORD *)(a2 + 8716) = 0x1FFFFFFFE0;
    v16 = *(_QWORD *)(a3 + 32);
    v17 = *v12;
    *(_QWORD *)(a3 + 8) = v16 + v17;
    if (*(_DWORD *)(a3 + 80))
      goto LABEL_7;
  }
  v17 = (v17 + 4);
  *v12 = v17;
LABEL_7:
  LODWORD(__dst[0]) = 0;
  __dst[1] = (void *)(v16 + v17);
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = 4294410240;
  v23[0] = malloc_type_malloc(0xF249uLL, 0x100004077774924uLL);
  v23[1] = (void *)62025;
  if (!v23[0])
  {
    LODWORD(v23[1]) = 0;
    HIDWORD(v24) = -1;
  }
  write_modes(a1, a2, v21, (uint64_t)__dst, v6, v7);
  v26 = 0;
  v18 = od_ec_enc_done((uint64_t)v23, &v26);
  if (v18)
  {
    v19 = SWORD5(v24) + 8 * HIDWORD(v23[1]) + 10;
    memcpy(__dst[1], v18, v26);
    LODWORD(__dst[0]) = v26;
    free(v23[0]);
    if ((v19 & 0x80000000) == 0)
    {
      v20 = (int)__dst[0];
      *(_QWORD *)(a3 + 16) = LODWORD(__dst[0]);
      if (*(_DWORD *)(a3 + 80))
        return;
LABEL_17:
      **(_DWORD **)(a3 + 8) = v20 - 1;
      return;
    }
  }
  else
  {
    free(v23[0]);
  }
  aom_internal_error(*(_QWORD *)(a2 + 11152), 1, "Error writing modes");
  v20 = (int)__dst[0];
  *(_QWORD *)(a3 + 16) = LODWORD(__dst[0]);
  if (!*(_DWORD *)(a3 + 80))
    goto LABEL_17;
}

void write_modes(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  _QWORD *v36;
  size_t v37;
  uint64_t v38;
  int v40;
  int v41;
  uint64_t v43;
  _BYTE *v44;

  v8 = (_QWORD *)(a1 + 264344);
  v9 = *a3;
  v10 = a3[2];
  v43 = a1 + 263408;
  v11 = *(_QWORD *)(a1 + 263720);
  v12 = *(unsigned __int8 *)(v11 + 77);
  v13 = a3[4];
  v40 = a3[3];
  v41 = a3[1];
  v14 = (v40 - (int)v10 + ~(-1 << *(_DWORD *)(v11 + 36))) & (unint64_t)(-1 << *(_DWORD *)(v11 + 36));
  v15 = *(_DWORD *)(v11 + 96);
  bzero((void *)(*(_QWORD *)(*(_QWORD *)(a1 + 264352) + 8 * v13) + (int)v10), v14);
  if (!v12)
  {
    v16 = *(_QWORD *)(v8[2] + 8 * v13);
    if (v16 && *(_QWORD *)(v8[3] + 8 * v13))
    {
      v17 = (int)v14 >> v15;
      v18 = (int)v10 >> v15;
      v37 = v17;
      bzero((void *)(v16 + v18), v17);
      bzero((void *)(*(_QWORD *)(v8[3] + 8 * v13) + v18), v37);
    }
    else
    {
      aom_internal_error(*(_QWORD *)(a2 + 11152), 7, "Invalid value of planes");
    }
  }
  v19 = 8 * v13;
  bzero((void *)(*(_QWORD *)(*v8 + v19) + (int)v10), v14);
  memset((void *)(*(_QWORD *)(v8[4] + v19) + (int)v10), 64, v14);
  v20 = a3[4];
  *(_QWORD *)(a2 + 8384) = *(_QWORD *)(v8[1] + 8 * v20);
  v21 = 8 * v20;
  if (!v12)
  {
    *(_QWORD *)(a2 + 8392) = *(_QWORD *)(v8[2] + v21);
    *(_QWORD *)(a2 + 8400) = *(_QWORD *)(v8[3] + v21);
  }
  *(_QWORD *)(a2 + 8504) = *(_QWORD *)(*v8 + v21);
  *(_QWORD *)(a2 + 8544) = *(_QWORD *)(v8[4] + v21);
  v22 = v43;
  if (*(_DWORD *)v43)
  {
    *(_DWORD *)(a2 + 11140) = *(_DWORD *)(a1 + 239656);
    if (*(_DWORD *)(v43 + 8))
    {
      *(_BYTE *)(a2 + 11168) = 0;
      if (v12)
        v23 = 2;
      else
        v23 = 4;
      bzero((void *)(a2 + 11169), v23);
      v22 = v43;
    }
  }
  if ((int)v9 < v41)
  {
    v24 = (_OWORD *)(a2 + 8408);
    v25 = (_OWORD *)(a2 + 8512);
    v26 = (_OWORD *)(a2 + 8560);
    if (v40 <= (int)v10)
    {
      *(_QWORD *)&v33 = 0x4040404040404040;
      *((_QWORD *)&v33 + 1) = 0x4040404040404040;
      do
      {
        *(_OWORD *)(a2 + 8472) = 0uLL;
        *(_OWORD *)(a2 + 8488) = 0uLL;
        *(_OWORD *)(a2 + 8440) = 0uLL;
        *(_OWORD *)(a2 + 8456) = 0uLL;
        *v24 = 0uLL;
        *(_OWORD *)(a2 + 8424) = 0uLL;
        *v25 = 0uLL;
        *(_OWORD *)(a2 + 8528) = 0uLL;
        *v26 = v33;
        *(_OWORD *)(a2 + 8576) = v33;
        LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(v22 + 312) + 32) + v9;
      }
      while ((int)v9 < v41);
    }
    else
    {
      v36 = (_QWORD *)(a1 + ((uint64_t)a5 << 9) + 8 * a6 + 489576);
      v27 = *(_QWORD *)(v22 + 312);
      v38 = v10;
      do
      {
        v28 = *a3;
        v29 = *(_DWORD *)(v27 + 36);
        v44 = 0;
        if (*(_QWORD *)(a1 + 456808) && *(_QWORD *)(a1 + 489576))
          v44 = *(_BYTE **)(*v36 + 16 * (((int)v9 - v28) >> v29));
        v24[4] = 0u;
        v24[5] = 0u;
        v24[2] = 0u;
        v24[3] = 0u;
        *v24 = 0u;
        v24[1] = 0u;
        *v25 = 0u;
        v25[1] = 0u;
        *(_QWORD *)&v30 = 0x4040404040404040;
        *((_QWORD *)&v30 + 1) = 0x4040404040404040;
        *v26 = v30;
        v26[1] = v30;
        v31 = v10;
        v27 = *(_QWORD *)(v22 + 312);
        do
        {
          *(_QWORD *)(a2 + 16784) = *(_QWORD *)(a1 + 239008)
                                  + 72
                                  * (((int)v31 >> *(_DWORD *)(v27 + 36))
                                   + ((*(_DWORD *)(a1 + 239576) + ~(-1 << *(_DWORD *)(v27 + 36))) >> *(_DWORD *)(v27 + 36))
                                   * ((int)v9 >> *(_DWORD *)(v27 + 36)));
          write_modes_sb_0(a1, a2, a3, a4, &v44, v9, v31, *(unsigned __int8 *)(v27 + 28));
          v22 = v43;
          v27 = *(_QWORD *)(v43 + 312);
          v32 = *(_DWORD *)(v27 + 32);
          v31 = (v32 + v31);
        }
        while ((int)v31 < v40);
        v9 = (v32 + v9);
        v24 = (_OWORD *)(a2 + 8408);
        v10 = v38;
        v26 = (_OWORD *)(a2 + 8560);
        v25 = (_OWORD *)(a2 + 8512);
      }
      while ((int)v9 < v41);
    }
  }
}

void *av1_write_last_tile_info(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4, char *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8, _DWORD *a9, int a10, char a11)
{
  uint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  void *result;
  uint64_t v22;
  unint64_t v23;
  BOOL v25;
  uint64_t v26;
  char v27;
  char v28;
  size_t v29;
  char *v30;
  char v31;
  _BYTE *v34;

  v16 = 0;
  v17 = (_DWORD *)(a1 + 637420);
  v34 = (_BYTE *)(a1 + 239542);
  v18 = (*a4 - a10);
  v19 = v18;
  do
  {
    ++v16;
    v25 = v19 > 0x7F;
    v19 >>= 7;
  }
  while (v25);
  v20 = &a5[a10];
  result = memmove(&v20[v16], v20, (*a4 - a10));
  v22 = 0;
  v23 = v18;
  do
  {
    ++v22;
    v25 = v23 > 0x7F;
    v23 >>= 7;
  }
  while (v25);
  v25 = (unint64_t)(v22 - 1) > 7 || a5 == 0 || (unint64_t)(v22 - 1) > 3;
  if (!v25)
  {
    v26 = 0;
    do
    {
      v27 = v18 > 0x7F;
      v28 = v18 & 0x7F;
      v18 >>= 7;
      v20[v26++] = v28 | (v27 << 7);
    }
    while (v22 != v26);
  }
  v29 = *(_QWORD *)a4 + v16;
  *(_QWORD *)a4 = v29;
  *a6 += v16;
  *a7 += v16;
  if (*v17 == 1)
    *a3 += v16;
  if (!*a9 && *v34)
  {
    memmove(&a5[*(_QWORD *)(a2 + 16)], a5, v29);
    result = memcpy(a5, *(const void **)a2, *(_QWORD *)(a2 + 16));
    *a8 = 0;
    v30 = &a5[*(_QWORD *)(a2 + 8)];
    if (a11)
      v31 = 62;
    else
      v31 = 58;
    *v30 = v31;
    if (a11)
      v30[1] = a11;
    *(_QWORD *)a4 += *(int *)(a2 + 16);
    *a6 += *(_DWORD *)(a2 + 16);
  }
  *a9 = 0;
  return result;
}

uint64_t av1_pack_bitstream(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned int *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  _BYTE *v11;
  const void *v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  char v37;
  char v38;
  size_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  char v50;
  char *v51;
  unsigned int v52;
  int v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;
  char v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  size_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  BOOL v106;
  uint64_t result;
  uint64_t v108;
  int v109;
  int v110;
  char *v111;
  unsigned int v112;
  size_t v113;
  unsigned int v114;
  FILE *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  BOOL v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  unsigned int v127;
  signed int v128;
  uint64_t v129;
  char *v130;
  void *v131;
  int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  unsigned int v143;
  size_t v144;
  unsigned int v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  signed int v149;
  unsigned int *v150;
  BOOL v151;
  void *v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  __int128 *v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  BOOL v165;
  int v166;
  _DWORD *v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  uint64_t v177;
  char v178;
  int v179;
  int v180;
  int v181;
  char v182;
  int v183;
  int v184;
  char v185;
  int v186;
  float v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  unsigned int v194;
  float v195;
  float v196;
  float v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  _BOOL4 v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  unsigned int v207;
  uint64_t v208;
  int v210;
  char *v211;
  int v212;
  int v213;
  char v214;
  unsigned int v215;
  int v216;
  unsigned int v217;
  int v218;
  int v219;
  int v220;
  int v221;
  char *v222;
  unsigned int v223;
  int v224;
  char *v225;
  int v226;
  unsigned int v227;
  unsigned int v228;
  int v229;
  int v230;
  int v231;
  unint64_t v232;
  int v233;
  char v234;
  int v235;
  unint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  int v240;
  unsigned int v241;
  signed int v242;
  int v243;
  BOOL v244;
  uint64_t v245;
  char *v246;
  unsigned int v247;
  uint64_t v248;
  void *v249;
  int v250;
  unsigned int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  unsigned int v259;
  signed int v260;
  int v261;
  uint64_t v262;
  void *v263;
  int v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  BOOL v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char v280;
  char *v281;
  int v282;
  uint64_t v283;
  int v284;
  _DWORD *v285;
  unsigned int v286;
  uint64_t v287;
  uint64_t v288;
  int v289;
  int v290;
  unsigned int v291;
  int v292;
  int v293;
  unsigned int v294;
  int v295;
  char v296;
  uint64_t v297;
  unint64_t v298;
  char v299;
  int v300;
  unsigned int v301;
  int v302;
  char v303;
  uint64_t v304;
  int v305;
  int v306;
  char v307;
  uint64_t v308;
  char *v309;
  unint64_t v310;
  uint64_t v311;
  size_t v312;
  int v313;
  int v314;
  int v315;
  int v316;
  int v317;
  int v318;
  unsigned int v319;
  int *v320;
  size_t v321;
  _DWORD *v322;
  _BYTE *v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  _BYTE *v331;
  unsigned int v332;
  char v333;
  unsigned int v334;
  unsigned int v335;
  uint64_t v336;
  unsigned int v337;
  char v338;
  uint64_t v339;
  char v340;
  _QWORD *v341;
  uint64_t v342;
  int v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  _DWORD *v350;
  uint64_t v351;
  _DWORD *v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  uint64_t v356;
  unsigned __int8 *v357;
  unsigned int *v358;
  uint64_t v359;
  int v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  unsigned __int8 v364;
  unsigned int v365;
  char *v366;
  char *v367;
  int *v368;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  uint64_t v373;
  uint64_t v374;
  __int128 v375;
  void *__src;
  uint64_t v377;
  size_t v378;
  __int128 __ptr;
  void *v380[2];
  __int128 v381;
  uint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  int v386;
  int v387;
  uint64_t v388;
  unsigned int v389;
  unsigned int __n;
  __int128 __n_4;
  __int128 v392;
  __int128 v393;
  uint64_t v394;
  _QWORD v395[8067];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v358 = v4;
  v325 = v5;
  v331 = v3;
  v395[8064] = *MEMORY[0x24BDAC8D0];
  v357 = (unsigned __int8 *)(v2 + 239040);
  v374 = v2;
  v6 = *(_QWORD *)v2;
  __src = 0;
  v377 = 0;
  v378 = 0;
  v7 = *(_DWORD *)(v2 + 264492);
  v353 = v2 + 264064;
  v8 = *(_DWORD *)(v2 + 264496);
  v370 = v2 + 263408;
  v9 = v2 + 627624;
  if (*(_DWORD *)(v2 + 263408) && !*(_DWORD *)(v2 + 636988))
    *(_DWORD *)v370 = 0;
  *(_DWORD *)(v2 + 636984) = 0;
  v10 = v3;
  v371 = v2 + 627624;
  if ((*v357 | 2) == 2)
  {
    v11 = v3;
    *v3 = 10;
    v12 = v3 + 1;
    v13 = av1_write_sequence_header_obu(*(int **)(v2 + 263720), v3 + 1);
    v14 = v13;
    do
    {
      ++v11;
      v276 = v14 > 0x7F;
      v14 >>= 7;
    }
    while (v276);
    memmove(v11 + 1, v12, v13);
    v15 = 0;
    v16 = v13;
    do
    {
      ++v15;
      v276 = v16 > 0x7F;
      v16 >>= 7;
    }
    while (v276);
    if ((unint64_t)(v15 - 1) > 3)
      return 1;
    v17 = 0;
    v18 = v13;
    do
    {
      v19 = v18 > 0x7F;
      v20 = v18 & 0x7F;
      v18 >>= 7;
      *((_BYTE *)v12 + v17++) = v20 | (v19 << 7);
    }
    while (v15 != v17);
    v10 = &v11[(v13 + 1)];
    v9 = v371;
  }
  v361 = v8;
  v21 = 8 * v8;
  v22 = v374 + 239532;
  if (*((_DWORD *)v357 + 120))
  {
    v23 = *(_QWORD *)(v353 + 1608);
    v364 = 8 * v8;
    v373 = v6;
    if (v23)
    {
      v24 = *(_QWORD **)(v23 + 184);
      if (v24)
      {
        if (*v24)
        {
          v25 = 0;
          v26 = 0;
          v27 = v10;
          v28 = v10;
          while (1)
          {
            v29 = *(unsigned int **)(v24[1] + 8 * v25);
            if (!v29 || !*((_QWORD *)v29 + 1))
              goto LABEL_21;
            v30 = v29[6];
            if (*v357)
            {
              if ((v30 | 2) == 2)
                goto LABEL_28;
            }
            else if (v30 - 1 < 2)
            {
LABEL_28:
              *v27 = 42;
              v31 = *v29;
              v32 = 1;
              v33 = v31;
              do
              {
                v34 = v32++;
                v276 = v33 > 0x7F;
                v33 >>= 7;
              }
              while (v276);
              v35 = v27 + 1;
              if ((unint64_t)(v32 - 2) > 7)
              {
                v39 = 0;
              }
              else
              {
                v36 = 0;
                do
                {
                  v37 = v31 > 0x7F;
                  v38 = v31 & 0x7F;
                  v31 >>= 7;
                  v35[v36++] = v38 | (v37 << 7);
                }
                while (v34 != v36);
                memcpy(&v27[v32], *((const void **)v29 + 1), *((_QWORD *)v29 + 2));
                v27[v32 + *((_QWORD *)v29 + 2)] = 0x80;
                v39 = v29[4] + v32;
              }
              v40 = 1;
              v41 = v39;
              do
              {
                ++v40;
                v276 = v41 > 0x7F;
                v41 >>= 7;
              }
              while (v276);
              memmove(&v27[v40], v27 + 1, v39);
              v42 = 0;
              v43 = v39;
              do
              {
                v44 = v42++;
                v276 = v43 > 0x7F;
                v43 >>= 7;
              }
              while (v276);
              if ((unint64_t)(v42 - 1) > 3)
              {
                aom_internal_error(*((_QWORD *)v357 + 6), 1, "Error writing metadata OBU size");
              }
              else
              {
                v45 = 0;
                v46 = v44 + 1;
                v47 = v39;
                do
                {
                  v48 = v47 > 0x7F;
                  v49 = v47 & 0x7F;
                  v47 >>= 7;
                  v35[v45++] = v49 | (v48 << 7);
                }
                while (v46 != v45);
                v27 += v39 + v40;
                v26 += v39 + v40;
              }
              v10 = v28;
            }
            v9 = v371;
LABEL_21:
            if ((unint64_t)++v25 >= *v24)
              goto LABEL_44;
          }
        }
      }
    }
    v26 = 0;
LABEL_44:
    v10 += v26;
    v22 = v374 + 239532;
    v21 = v364;
    v6 = v373;
  }
  v340 = v21 | (32 * v7);
  if (*(int *)(v9 + 9796) > 1)
    goto LABEL_46;
  if (*((_DWORD *)v357 + 122))
  {
    if (*(_BYTE *)(v22 + 10))
    {
      v53 = *v357;
      v375 = 0uLL;
      if (v53)
      {
LABEL_120:
        v22 = v374 + 239532;
        goto LABEL_121;
      }
      goto LABEL_47;
    }
LABEL_46:
    v375 = 0uLL;
LABEL_47:
    __src = v10;
    if (*(_DWORD *)(v6 + 23208))
      ++*(_DWORD *)(v371 + 9360);
    if (v21 & 0xF8 | (32 * v7))
      v50 = 30;
    else
      v50 = 26;
    *v10 = v50;
    if (v21 & 0xF8 | (32 * v7))
    {
      v10[1] = v340;
      v51 = v10;
      v52 = 2;
    }
    else
    {
      v51 = v10;
      v52 = 1;
    }
    v54 = v51;
    v55 = &v51[v52];
    __n_4 = (unint64_t)v55;
    write_uncompressed_header_obu(v374, v374 + 86480, &v375, (uint64_t)&__n_4);
    v56 = DWORD2(__n_4);
    v57 = DWORD2(__n_4) + 7;
    if ((SDWORD2(__n_4) & 0x80000000) == 0)
      v57 = DWORD2(__n_4);
    v58 = DWORD2(__n_4) - (v57 & 0xFFFFFFF8);
    v59 = __n_4;
    v60 = (uint64_t)v57 >> 3;
    if ((BYTE8(__n_4) & 7) != 0)
    {
      if (v58)
      {
        v61 = 7 - v58;
        v62 = 1;
        v63 = 1 << v61;
        *(_BYTE *)(__n_4 + v60) &= ~(_BYTE)v63;
        *(_BYTE *)(__n_4 + v60) |= v63;
      }
      else
      {
        *(_BYTE *)(__n_4 + v60) = 0x80;
        v62 = 1;
      }
    }
    else
    {
      if (v58)
      {
        v64 = 1 << (7 - v58);
        *(_BYTE *)(__n_4 + v60) &= ~(_BYTE)v64;
        v59 = __n_4;
        v65 = *(_BYTE *)(__n_4 + v60) | v64;
      }
      else
      {
        v65 = 0x80;
      }
      *(_BYTE *)(v59 + v60) = v65;
      DWORD2(__n_4) = v56 + 1;
      if (v56 >= -1)
        v66 = v56 + 1;
      else
        v66 = v56 + 8;
      v67 = v66 & 0xFFFFFFF8;
      v68 = (uint64_t)v66 >> 3;
      v69 = v56 + 1 - v67;
      if (v69)
        v69 = *(unsigned __int8 *)(__n_4 + v68) & ~(1 << (7 - v69));
      *(_BYTE *)(__n_4 + v68) = v69;
      DWORD2(__n_4) = v56 + 2;
      if (v56 >= -2)
        v70 = v56 + 2;
      else
        v70 = v56 + 9;
      v71 = v70 & 0xFFFFFFF8;
      v72 = (uint64_t)v70 >> 3;
      v73 = v56 + 2 - v71;
      if (v73)
        v73 = *(unsigned __int8 *)(__n_4 + v72) & ~(1 << (7 - v73));
      *(_BYTE *)(__n_4 + v72) = v73;
      DWORD2(__n_4) = v56 + 3;
      if (v56 >= -3)
        v74 = v56 + 3;
      else
        v74 = v56 + 10;
      v75 = v74 & 0xFFFFFFF8;
      v76 = (uint64_t)v74 >> 3;
      v77 = v56 + 3 - v75;
      if (v77)
        v77 = *(unsigned __int8 *)(__n_4 + v76) & ~(1 << (7 - v77));
      *(_BYTE *)(__n_4 + v76) = v77;
      DWORD2(__n_4) = v56 + 4;
      if (v56 >= -4)
        v78 = v56 + 4;
      else
        v78 = v56 + 11;
      v79 = v78 & 0xFFFFFFF8;
      v80 = (uint64_t)v78 >> 3;
      v81 = v56 + 4 - v79;
      if (v81)
        v81 = *(unsigned __int8 *)(__n_4 + v80) & ~(1 << (7 - v81));
      *(_BYTE *)(__n_4 + v80) = v81;
      DWORD2(__n_4) = v56 + 5;
      if (v56 >= -5)
        v82 = v56 + 5;
      else
        v82 = v56 + 12;
      v83 = v82 & 0xFFFFFFF8;
      v84 = (uint64_t)v82 >> 3;
      v85 = v56 + 5 - v83;
      if (v85)
        v85 = *(unsigned __int8 *)(__n_4 + v84) & ~(1 << (7 - v85));
      *(_BYTE *)(__n_4 + v84) = v85;
      DWORD2(__n_4) = v56 + 6;
      if (v56 >= -6)
        v86 = v56 + 6;
      else
        v86 = v56 + 13;
      v87 = v86 & 0xFFFFFFF8;
      v88 = (uint64_t)v86 >> 3;
      v89 = v56 + 6 - v87;
      if (v89)
        v89 = *(unsigned __int8 *)(__n_4 + v88) & ~(1 << (7 - v89));
      *(_BYTE *)(__n_4 + v88) = v89;
      DWORD2(__n_4) = v56 + 7;
      if (v56 >= -7)
        v90 = v56 + 7;
      else
        v90 = v56 + 14;
      v91 = v90 & 0xFFFFFFF8;
      v92 = (uint64_t)v90 >> 3;
      v93 = v56 + 7 - v91;
      if (v93)
        v93 = *(unsigned __int8 *)(__n_4 + v92) & ~(1 << (v91 - v56));
      *(_BYTE *)(__n_4 + v92) = v93;
      v62 = 8;
    }
    v94 = 0;
    v95 = v56 + v62;
    v96 = v95 >> 3;
    if ((v95 & 7) != 0)
      v97 = v96 + 1;
    else
      v97 = v96;
    v98 = v97;
    do
    {
      ++v94;
      v276 = v98 > 0x7F;
      v98 >>= 7;
    }
    while (v276);
    memmove(&v55[v94], v55, v97);
    v99 = 0;
    v100 = v97;
    do
    {
      ++v99;
      v276 = v100 > 0x7F;
      v100 >>= 7;
    }
    while (v276);
    if ((unint64_t)(v99 - 1) <= 3)
    {
      v101 = 0;
      v102 = v97;
      do
      {
        v103 = v102 > 0x7F;
        v104 = v102 & 0x7F;
        v102 >>= 7;
        v55[v101++] = v104 | (v103 << 7);
      }
      while (v99 != v101);
      v377 = 0;
      v378 = v97 + v52 + v94;
      v10 = &v54[v378];
      if (*((_DWORD *)v357 + 122) && (!*(_BYTE *)(v374 + 239542) || !*v357))
      {
        v108 = 0;
        goto LABEL_408;
      }
      if ((_QWORD)v375)
        *(_QWORD *)&v375 = v375 + v94;
      goto LABEL_120;
    }
    return 1;
  }
  v375 = 0uLL;
LABEL_121:
  v320 = (int *)(v374 + 389936);
  v322 = (_DWORD *)(v374 + 388356);
  v323 = (_BYTE *)(v374 + 637928);
  v368 = (int *)(v374 + 263744);
  v369 = (uint64_t *)(v374 + 456784);
  v324 = (_QWORD *)(v374 + 234448);
  *v358 = 0;
  v105 = v374 + 94656;
  if (*(_BYTE *)(v374 + 258032) && *(_BYTE *)(v374 + 258033))
  {
    v106 = *(_DWORD *)(v22 + 16) != 7 && *(_QWORD *)(v374 + 234168) >= *(_QWORD *)(v374 + 234176);
    *(_BYTE *)(v374 + 258035) = v106;
  }
  v367 = v10;
  if (*(_DWORD *)(v353 + 260))
  {
    if (*(_DWORD *)(*(_QWORD *)v374 + 23208))
      ++*(_DWORD *)(v371 + 9360);
    v109 = *v368;
    v110 = *(_DWORD *)(v374 + 263748);
    *v367 = 50;
    v111 = v367 + 1;
    __n_4 = (unint64_t)(v367 + 1);
    write_uncompressed_header_obu(v374, v374 + 86480, &v375, (uint64_t)&__n_4);
    v112 = DWORD2(__n_4) >> 3;
    if ((BYTE8(__n_4) & 7) != 0)
      v113 = v112 + 1;
    else
      v113 = v112;
    if (*(_BYTE *)(v353 + 1314))
    {
      __n_4 = *(_OWORD *)"./fh";
      LODWORD(v392) = 0;
      v114 = *((_DWORD *)v357 + 4);
      BYTE4(__n_4) = v114 / 0x64 + 48;
      BYTE5(__n_4) = (v114 % 0x64 / 0xA) | 0x30;
      WORD3(__n_4) = (v114 % 0xA) | 0x30;
      v115 = fopen((const char *)&__n_4, "w");
      fwrite(v111, v113, 1uLL, v115);
      LOBYTE(__ptr) = 0;
      fseek(v115, 1, 0);
      fwrite(&__ptr, 1uLL, 1uLL, v115);
      fclose(v115);
    }
    v321 = v113;
    v116 = *v368;
    v117 = *(unsigned int *)(v374 + 263748);
    v118 = v110 * v109;
    *(_QWORD *)(v374 + 234440) = 0;
    *v324 = 0;
    *(_QWORD *)(v374 + 234456) = 0;
    v359 = v116;
    v119 = (v116 - 1);
    if ((int)v116 < 1)
    {
      v365 = 0;
      v332 = 0;
      v134 = v113;
      v10 = v367;
    }
    else
    {
      v10 = v367;
      if ((int)v117 > 0)
      {
        v365 = 0;
        v332 = 0;
        v120 = 0;
        v372 = 4 * (v118 > 1);
        v351 = v374 + 86064;
        v341 = v395;
        v346 = 23824 * v116;
        v347 = v117 - 1;
        v339 = v346 + 32;
        v326 = v374 + 263804;
        v327 = v117;
        v344 = v374 + 264064;
        v337 = v116;
        v121 = v113;
        v355 = v118;
        v329 = (v116 - 1);
        while (1)
        {
          v122 = 0;
          v123 = *(_DWORD *)(*(_QWORD *)(v370 + 312) + 36);
          v124 = *(_DWORD *)(v326 + (((v120 << 32) + 0x100000000) >> 30)) << v123;
          v125 = *(_DWORD *)(v22 + 40);
          if (v124 >= *(_DWORD *)(v22 + 44))
            v124 = *(_DWORD *)(v22 + 44);
          v384 = *(_DWORD *)(v326 + 4 * (int)v120) << v123;
          v385 = v124;
          v334 = v121;
          if (v120 == v119)
            v126 = v121;
          else
            v126 = v121 + 4;
          v127 = *(_DWORD *)v353 << v123;
          v128 = *(_DWORD *)(v353 + 4) << v123;
          if (v128 >= v125)
            v128 = v125;
          v129 = *v369;
          v387 = v120;
          v386 = 0;
          v383 = __PAIR64__(v128, v127);
          v382 = 0;
          *(_OWORD *)v380 = 0u;
          v381 = 0u;
          __ptr = 0u;
          v130 = &v111[v126];
          v342 = v120;
          *((_QWORD *)&__n_4 + 2 * v120) = &v111[v126];
          *(_QWORD *)(v105 + 2472) = v129 + 23824 * v120 + 32;
          if (!*(_DWORD *)(v353 + 260))
            v122 = *(_BYTE *)v22 == 0;
          LOBYTE(v382) = v122;
          *((_QWORD *)&__ptr + 1) = &v130[v372];
          HIDWORD(v380[1]) = 0;
          DWORD2(v381) = -557056;
          v380[0] = malloc_type_malloc(0xF249uLL, 0x100004077774924uLL);
          LODWORD(v380[1]) = 62025;
          if (!v380[0])
          {
            LODWORD(v380[1]) = 0;
            HIDWORD(v381) = -1;
          }
          write_modes(v374, v351, (int *)&v383, (uint64_t)&__ptr, 0, v120);
          __n = 0;
          v131 = od_ec_enc_done((uint64_t)v380, &__n);
          if (v131)
          {
            v132 = SWORD5(v381) + 8 * HIDWORD(v380[1]) + 10;
            memcpy(*((void **)&__ptr + 1), v131, __n);
            LODWORD(__ptr) = __n;
            free(v380[0]);
            if ((v132 & 0x80000000) == 0)
              goto LABEL_157;
          }
          else
          {
            free(v380[0]);
          }
          aom_internal_error(*((_QWORD *)v357 + 6), 1, "Error writing modes");
LABEL_157:
          v133 = __ptr;
          *((_QWORD *)&__n_4 + 2 * v120 + 1) = __ptr;
          if (v133 <= v365)
          {
            if (v355 >= 2)
            {
LABEL_159:
              *(_DWORD *)v130 = v133 - 1;
              v362 = v120;
              v134 = v126 + v372 + v133;
              if ((_DWORD)v117 != 1)
                goto LABEL_167;
              goto LABEL_163;
            }
          }
          else
          {
            *v358 = v120;
            v365 = v133;
            if (v355 >= 2)
              goto LABEL_159;
          }
          v362 = v120;
          v134 = v126 + v372 + v133;
          if ((_DWORD)v117 != 1)
          {
LABEL_167:
            v137 = 0;
            v138 = 0x200000000;
            v139 = 0x100000000;
            v141 = v339;
            v140 = v341;
            v142 = v337;
            do
            {
              v146 = *v369;
              v147 = *(_DWORD *)(*(_QWORD *)(v370 + 312) + 36);
              v148 = *(_DWORD *)(v344 + (v139 >> 30)) << v147;
              v149 = *(_DWORD *)(v344 + (v138 >> 30)) << v147;
              v386 = v137 + 1;
              if (v149 >= *(_DWORD *)(v22 + 40))
                v149 = *(_DWORD *)(v22 + 40);
              v383 = __PAIR64__(v149, v148);
              v382 = 0;
              *(_OWORD *)v380 = 0u;
              v381 = 0u;
              __ptr = 0u;
              v150 = (unsigned int *)&v111[v134];
              *(v140 - 1) = v150;
              *(_QWORD *)(v374 + 97128) = v146 + v141;
              if (*(_DWORD *)(v353 + 260))
                v151 = 0;
              else
                v151 = *(_BYTE *)v22 == 0;
              LOBYTE(v382) = v151;
              *((_QWORD *)&__ptr + 1) = &v150[v372 / 4];
              HIDWORD(v380[1]) = 0;
              DWORD2(v381) = -557056;
              v380[0] = malloc_type_malloc(0xF249uLL, 0x100004077774924uLL);
              LODWORD(v380[1]) = 62025;
              if (!v380[0])
              {
                LODWORD(v380[1]) = 0;
                HIDWORD(v381) = -1;
              }
              write_modes(v374, v351, (int *)&v383, (uint64_t)&__ptr, v137 + 1, v362);
              __n = 0;
              v152 = od_ec_enc_done((uint64_t)v380, &__n);
              if (v152)
              {
                v153 = SWORD5(v381) + 8 * HIDWORD(v380[1]) + 10;
                memcpy(*((void **)&__ptr + 1), v152, __n);
                LODWORD(__ptr) = __n;
                free(v380[0]);
                if ((v153 & 0x80000000) == 0)
                {
                  v144 = __ptr;
                  *v140 = __ptr;
                  if (v144 > v365)
                    goto LABEL_183;
                  goto LABEL_187;
                }
              }
              else
              {
                free(v380[0]);
              }
              aom_internal_error(*((_QWORD *)v357 + 6), 1, "Error writing modes");
              v144 = __ptr;
              *v140 = __ptr;
              if (v144 > v365)
              {
LABEL_183:
                *v358 = v142;
                v365 = v144;
                v154 = v134;
                if (v355 >= 2)
                  goto LABEL_188;
                goto LABEL_172;
              }
LABEL_187:
              v154 = v134;
              if (v355 >= 2)
              {
LABEL_188:
                v145 = v144 - 1;
                v155 = *(_DWORD *)(v374 + 263776);
                if (v155 <= *(_DWORD *)(v374 + 263780))
                  v155 = *(_DWORD *)(v374 + 263780);
                if (*v357 && 4 * v155 <= 256)
                {
                  v156 = **(_DWORD **)((char *)&__n_4 + 1024 * (unint64_t)v137 + v342 * 16);
                  v157 = HIBYTE(v156) & 0x7F;
                  if (v156 < 0)
                    v143 = v157 + 1;
                  else
                    v143 = 1;
                  if (v156 < 0)
                    v158 = v137 - v157;
                  else
                    v158 = v137;
                  if (v143 > 0x7F
                    || (v159 = &__n_4 + 64 * (uint64_t)v158, *((_QWORD *)&v159[v362] + 1) != v144)
                    || (v335 = v154,
                        v160 = memcmp((const void *)(*(_QWORD *)&v159[v342] + 4), v150 + 1, v144),
                        v154 = v335,
                        v160))
                  {
                    v143 = 0;
                  }
                  if (v143)
                  {
                    LODWORD(v144) = 0;
                    v145 = (v143 << 24) | 0x80000000;
                  }
                }
                *v150 = v145;
                v22 = v374 + 239532;
              }
LABEL_172:
              v134 = v154 + v372 + v144;
              v138 += 0x100000000;
              v139 += 0x100000000;
              ++v137;
              v140 += 128;
              v142 += v359;
              v141 += v346;
              v111 = v367 + 1;
            }
            while (v347 != v137);
          }
LABEL_163:
          v119 = v329;
          if (v362 != v329)
          {
            v135 = v134 - v334 - 4;
            *(_DWORD *)&v111[v334] = v135;
            v136 = v332;
            if (v332 <= v135)
              v136 = v134 - v334 - 4;
            v332 = v136;
          }
          v10 = v367;
          v105 = v374 + 94656;
          v118 = v355;
          LODWORD(v117) = v327;
          v120 = v362 + 1;
          ++v337;
          v339 += 23824;
          v341 += 2;
          v121 = v134;
          if (v362 + 1 == v359)
            goto LABEL_212;
        }
      }
      v134 = v113;
      do
      {
        if (v119)
        {
          *(_DWORD *)&v111[v134] = 0;
          v134 += 4;
        }
        --v119;
        --v359;
      }
      while (v359);
      v365 = 0;
      v332 = 0;
    }
LABEL_212:
    *v322 += *(_DWORD *)(v374 + 234440);
    if (*v323)
      v165 = *(_DWORD *)(v374 + 388936) == 0;
    else
      v165 = 1;
    if (!v165)
    {
      v166 = *v320;
      if (*v320 <= *(_DWORD *)(v374 + 234444))
        v166 = *(_DWORD *)(v374 + 234444);
      *v320 = v166;
    }
    v167 = (_DWORD *)*((_QWORD *)v357 + 29);
    v167[363] += *(_DWORD *)v324;
    v167[364] += *(_DWORD *)(v374 + 234452);
    v167[365] += *(_DWORD *)(v374 + 234456);
    v167[366] += *(_DWORD *)(v374 + 234460);
    LODWORD(__n_4) = 0;
    LODWORD(__ptr) = 0;
    v168 = v118;
    if (v118 >= 2)
      v134 = remux_tiles(v368, (uint64_t)&v111[v321], v134 - v321, v365, v332, (int *)&__n_4, (int *)&__ptr)+ v321;
    v169 = 0;
    v170 = v134;
    do
    {
      ++v169;
      v276 = v170 > 0x7F;
      v170 >>= 7;
    }
    while (v276);
    memmove(&v111[v169], v111, v134);
    v172 = 0;
    v173 = v134;
    do
    {
      ++v172;
      v276 = v173 > 0x7F;
      v173 >>= 7;
    }
    while (v276);
    if ((unint64_t)(v172 - 1) <= 3)
    {
      v174 = 0;
      v175 = v134;
      do
      {
        v176 = v175 > 0x7F;
        v171 = v175 & 0x7F;
        v175 >>= 7;
        v111[v174++] = v171 | (v176 << 7);
      }
      while (v172 != v174);
    }
    if (v168 >= 2)
    {
      v177 = v375;
      v178 = __ptr - 1;
      v179 = DWORD2(v375);
      *(_BYTE *)(v375 + SDWORD2(v375) / 8 + v169) = *(_BYTE *)(v375 + SDWORD2(v375) / 8 + v169) & ~(1 << ((v171 & 0xF8) - BYTE8(v375) + 7)) | ((((__ptr - 1) >> 1) & 1) << ((v171 & 0xF8) - BYTE8(v375) + 7));
      v180 = v178 & 1;
      v181 = v179 + 8;
      if (v179 + 1 >= 0)
        v181 = v179 + 1;
      *(_BYTE *)(v177 + (v181 >> 3) + v169) = *(_BYTE *)(v177 + (v181 >> 3) + v169) & ~(1 << ((v181 & 0xF8) - (v179 + 1) + 7)) | (v180 << ((v181 & 0xF8) - (v179 + 1) + 7));
      v182 = __n_4 - 1;
      v183 = v179 + 9;
      if (v179 + 2 >= 0)
        v183 = v179 + 2;
      *(_BYTE *)(v177 + (v183 >> 3) + v169) = *(_BYTE *)(v177 + (v183 >> 3) + v169) & ~(1 << ((v183 & 0xF8) - (v179 + 2) + 7)) | ((((__n_4 - 1) >> 1) & 1) << ((v183 & 0xF8) - (v179 + 2) + 7));
      v184 = v179 + 3;
      v185 = v182 & 1;
      v186 = v179 + 10;
      if (v184 >= 0)
        v186 = v184;
      *(_BYTE *)(v177 + (v186 >> 3) + v169) = *(_BYTE *)(v177 + (v186 >> 3) + v169) & ~(1 << ((v186 & 0xF8) - v184 + 7)) | (v185 << ((v186 & 0xF8) - v184 + 7));
    }
    LODWORD(v108) = v134 + v169 + 1;
    goto LABEL_407;
  }
  v389 = 0;
  v388 = 0;
  v383 = (unint64_t)v10;
  v356 = *v368;
  v330 = *(unsigned int *)(v374 + 263748);
  v161 = (v330 * v356);
  if (!*(_BYTE *)(v371 + 33))
    goto LABEL_251;
  v162 = *(_DWORD *)v371;
  if ((int)v161 >= 1)
  {
    if ((_DWORD)v161 == 1)
    {
      v163 = 0;
      v164 = 0;
    }
    else
    {
      v188 = 0;
      v189 = 0;
      v163 = v161 & 0xFFFFFFFE;
      v190 = v163;
      v191 = *v369;
      do
      {
        v188 += *(_QWORD *)(v191 + 21288);
        v189 += *(_QWORD *)(v191 + 45112);
        v191 += 47648;
        v190 -= 2;
      }
      while (v190);
      v164 = v189 + v188;
      if (v163 == v161)
      {
LABEL_244:
        v187 = (float)v164;
        if (v162 > 1)
          goto LABEL_245;
        goto LABEL_251;
      }
    }
    v192 = v161 - v163;
    v193 = (_QWORD *)(*v369 + 23824 * v163 + 21288);
    do
    {
      v164 += *v193;
      v193 += 2978;
      --v192;
    }
    while (v192);
    goto LABEL_244;
  }
  v187 = 0.0;
  if (v162 > 1)
  {
LABEL_245:
    v194 = 1;
    v195 = 0.0;
    do
    {
      v196 = (float)v162 * -5.0;
      v197 = (float)(int)v161 / (float)v162;
      if ((float)((float)((float)(v187 * (float)((float)(v162 - 1) / (float)v162)) + v196) - v197) > v195)
      {
        v194 = v162;
        v195 = (float)((float)(v187 * (float)((float)(v162 - 1) / (float)v162)) + v196) - v197;
      }
      v276 = v162-- > 2;
    }
    while (v276);
    if (v194 >= 2)
    {
      av1_write_tile_obu_mt(v374, (uint64_t)v10, (uint64_t)&v389, (uint64_t)&v375, (v21 | (32 * v7)), (uint64_t)&__src, (uint64_t)v358, (uint64_t)&v388 + 4, (int *)&v388, &v383, v194);
      goto LABEL_380;
    }
  }
LABEL_251:
  v198 = *(_DWORD *)(v371 + 9796);
  *(_QWORD *)(v374 + 234440) = 0;
  *v324 = 0;
  *(_QWORD *)(v374 + 234456) = 0;
  if ((int)v330 < 1 || (int)v356 < 1)
  {
    v282 = 0;
    v283 = v374 + 234168;
    goto LABEL_374;
  }
  v199 = 0;
  v200 = 0;
  v360 = 0;
  v201 = 0;
  v349 = v374 + 86064;
  v348 = v161 - 1;
  v338 = v21 & 0xE0 | (32 * v7) | v21 & 0x10 | (8 * (v361 & 1));
  if (v21 | (32 * v7))
    v202 = 62;
  else
    v202 = 58;
  v333 = v202;
  v328 = v374 + 264064;
  v336 = v374 + 263804;
  v345 = (v198 + (int)v161 - 1) / v198;
  v203 = 1;
  v204 = v10;
  v343 = 1;
  v205 = v371;
  while (2)
  {
    v206 = 0;
    v354 = v200 * v356;
    v363 = v200;
    v352 = (_DWORD *)(v328 + 4 * (int)v200);
    v350 = (_DWORD *)(v328 + (((v200 << 32) + 0x100000000) >> 30));
    do
    {
      v207 = v206 + v354;
      *(_QWORD *)(v105 + 2472) = *v369 + 23824 * (v206 + v354) + 32;
      v208 = v206 << 32;
      if (v203)
      {
        v203 = v345 == 1 || v348 == v207;
        v210 = *(_DWORD *)(v205 + 9796);
        if (v210 == 1 && *(_DWORD *)(*(_QWORD *)v374 + 23208))
          ++*(_DWORD *)(v205 + 9360);
        v211 = &v10[v199];
        v212 = *v368;
        v213 = *(_DWORD *)(v374 + 263748);
        if (v210 == 1)
          v214 = 48;
        else
          v214 = 32;
        *v211 = v214 | (4 * (v340 != 0)) | 2;
        if (v340)
        {
          v211[1] = v338;
          v215 = 2;
          v216 = *(_DWORD *)(v205 + 9796);
          v217 = 2;
          v366 = v211;
          if (v216 != 1)
            goto LABEL_279;
        }
        else
        {
          v215 = 1;
          v216 = *(_DWORD *)(v205 + 9796);
          v217 = 1;
          v366 = v211;
          if (v216 != 1)
            goto LABEL_279;
        }
        __n_4 = (unint64_t)&v211[v215];
        write_uncompressed_header_obu(v374, v374 + 86480, &v375, (uint64_t)&__n_4);
        v211 = v366;
        v217 = v215 + (DWORD2(__n_4) >> 3);
        if ((BYTE8(__n_4) & 7) != 0)
          ++v217;
        v216 = *(_DWORD *)(v371 + 9796);
LABEL_279:
        v218 = *(_DWORD *)(v374 + 263748) * *(_DWORD *)(v374 + 263744);
        if ((int)((v210 + v212 * v213 - 1) / v210 + v207) < v218)
          v218 = (v210 + v212 * v213 - 1) / v210 + v207;
        v220 = *(_DWORD *)(v374 + 263768);
        v219 = *(_DWORD *)(v374 + 263772);
        v221 = v220 + v219;
        if (v220 + v219)
        {
          v222 = &v211[v217];
          *v222 = (v216 > 1) << 7;
          v223 = 1;
          v224 = v363;
          if (v216 < 2)
          {
            v225 = v367;
            v22 = v374 + 239532;
          }
          else
          {
            v225 = v367;
            v22 = v374 + 239532;
            if (v221 >= 1)
            {
              v226 = 0;
              v227 = v218 - 1;
              v228 = v219 + v220 + 1;
              v229 = -1;
              do
              {
                while (1)
                {
                  v230 = v229;
                  v231 = (v207 >> (v221 + v229)) & 1;
                  v232 = (unint64_t)(v226 + 1) >> 3;
                  if ((((_BYTE)v226 + 1) & 7) != 0)
                    break;
                  v222[v232] = (_BYTE)v231 << 7;
                  v229 = v230 - 1;
                  if (v221 == ++v226)
                    goto LABEL_288;
                }
                v222[v232] = v222[v232] & ~(1 << ((v226 + 1) & 7 ^ 7)) | (v231 << ((v226 + 1) & 7 ^ 7));
                v229 = v230 - 1;
                ++v226;
              }
              while (v221 != v226);
LABEL_288:
              v233 = 0;
              v223 = v221 - v229;
              v234 = v219 + v220 - 1;
              do
              {
                while (1)
                {
                  v235 = (v227 >> (v234 + v233)) & 1;
                  v236 = (unint64_t)v228 >> 3;
                  if ((v228 & 7) != 0)
                    break;
                  v222[v236] = (_BYTE)v235 << 7;
                  ++v228;
                  if (v230 == --v233)
                    goto LABEL_325;
                }
                v222[v236] = v222[v236] & ~(1 << (v228 & 7 ^ 7)) | ((_BYTE)v235 << (v228 & 7 ^ 7));
                ++v228;
                --v233;
              }
              while (v230 != v233);
            }
          }
LABEL_325:
          v247 = v223 >> 3;
          if ((v223 & 7) != 0)
            ++v247;
        }
        else
        {
          v247 = 0;
          v225 = v367;
          v22 = v374 + 239532;
          v224 = v363;
        }
        v201 = v247 + v217;
        v394 = 0;
        v253 = *(_DWORD *)(v374 + 263804 + 4 * (int)v206);
        v392 = 0u;
        v393 = 0u;
        v254 = *(_QWORD *)(v370 + 312);
        v255 = *(_DWORD *)(v254 + 36);
        v256 = *(_DWORD *)(v374 + 263804 + ((v208 + 0x100000000) >> 30)) << v255;
        v257 = *(_DWORD *)(v22 + 40);
        if (v256 >= *(_DWORD *)(v22 + 44))
          v256 = *(_DWORD *)(v22 + 44);
        v258 = v201 + v199;
        v389 = v201 + v199;
        __n_4 = 0uLL;
        DWORD2(__ptr) = v253 << v255;
        HIDWORD(__ptr) = v256;
        v259 = *v352 << v255;
        v260 = *v350 << v255;
        v380[0] = (void *)__PAIR64__(v206, v224);
        if (v260 >= v257)
          v260 = v257;
        *(_QWORD *)&__ptr = __PAIR64__(v260, v259);
        LOBYTE(v394) = *(_BYTE *)v22 ^ 1;
        v261 = *(unsigned __int8 *)(v254 + 77);
        *(_QWORD *)(v374 + 94672) = 0xFFEA000FFFF90003;
        *(_QWORD *)(v374 + 94656) = 0xFFEA000FFFF90003;
        *(_WORD *)(v374 + 94680) = 15;
        *(_WORD *)(v374 + 94664) = 15;
        *(_WORD *)(v374 + 94682) = -7;
        *(_WORD *)(v374 + 94666) = -7;
        *(_WORD *)(v374 + 94684) = 3;
        *(_WORD *)(v374 + 94668) = 3;
        *(_QWORD *)(v374 + 94756) = 0x1FFFFFFFE0;
        if (v261)
        {
          v199 += v201;
          v262 = v258;
          if (v203)
            goto LABEL_334;
        }
        else
        {
          *(_QWORD *)(v374 + 94704) = 0xFFEA000FFFF90003;
          *(_QWORD *)(v374 + 94688) = 0xFFEA000FFFF90003;
          *(_WORD *)(v374 + 94712) = 15;
          *(_WORD *)(v374 + 94696) = 15;
          *(_DWORD *)(v374 + 94714) = 262137;
          *(_DWORD *)(v374 + 94698) = 262137;
          *(_QWORD *)(v374 + 94768) = 0x1FFFFFFFE0;
          *(_QWORD *)(v374 + 94736) = 0xFFEA000FFFF90003;
          *(_QWORD *)(v374 + 94720) = 0xFFEA000FFFF90003;
          *(_WORD *)(v374 + 94744) = 15;
          *(_WORD *)(v374 + 94728) = 15;
          *(_DWORD *)(v374 + 94746) = 262137;
          *(_DWORD *)(v374 + 94730) = 262137;
          *(_QWORD *)(v374 + 94780) = 0x1FFFFFFFE0;
          v199 += v201;
          v262 = v258;
          if (v203)
          {
LABEL_334:
            *((_QWORD *)&__n_4 + 1) = &v225[v262];
            LODWORD(__n_4) = 0;
            HIDWORD(v392) = 0;
            *(_QWORD *)&v393 = 0;
            *((_QWORD *)&v393 + 1) = 4294410240;
            *(_QWORD *)&v392 = malloc_type_malloc(0xF249uLL, 0x100004077774924uLL);
            DWORD2(v392) = 62025;
            if (!(_QWORD)v392)
            {
              DWORD2(v392) = 0;
              HIDWORD(v393) = -1;
            }
            write_modes(v374, v349, (int *)&__ptr, (uint64_t)&__n_4, v224, v206);
            __n = 0;
            v263 = od_ec_enc_done((uint64_t)&v392, &__n);
            if (v263)
            {
              v264 = SWORD5(v393) + 8 * HIDWORD(v392) + 10;
              memcpy(*((void **)&__n_4 + 1), v263, __n);
              LODWORD(__n_4) = __n;
              free((void *)v392);
              if ((v264 & 0x80000000) == 0)
              {
                v251 = __n_4;
                v10 = v367;
                if (v203)
                  goto LABEL_340;
                goto LABEL_339;
              }
            }
            else
            {
              free((void *)v392);
            }
            aom_internal_error(*(_QWORD *)(v374 + 97216), 1, "Error writing modes");
            v251 = __n_4;
            v10 = v367;
            if (v203)
            {
LABEL_340:
              v383 += v201;
              LODWORD(v388) = v215;
              v360 = 1;
              v204 = v366;
              v252 = 4;
              if (v203)
                v252 = 0;
              if (v251 > HIDWORD(v388))
                goto LABEL_343;
              goto LABEL_344;
            }
LABEL_339:
            *(_DWORD *)&v10[v258] = v251 - 1;
            goto LABEL_340;
          }
        }
        v199 = v258 + 4;
        v389 = v258 + 4;
        v262 = (v258 + 4);
        goto LABEL_334;
      }
      v394 = 0;
      v393 = 0u;
      v237 = *(_QWORD *)(v370 + 312);
      v238 = *(_DWORD *)(v237 + 36);
      v239 = *(_DWORD *)(v336 + ((v208 + 0x100000000) >> 30)) << v238;
      v240 = *(_DWORD *)(v22 + 40);
      if (v239 >= *(_DWORD *)(v22 + 44))
        v239 = *(_DWORD *)(v22 + 44);
      DWORD2(__ptr) = *(_DWORD *)(v336 + 4 * (int)v206) << v238;
      HIDWORD(__ptr) = v239;
      v241 = *v352 << v238;
      v242 = *v350 << v238;
      __n_4 = 0uLL;
      v392 = 0uLL;
      v380[0] = (void *)__PAIR64__(v206, v363);
      if (v242 >= v240)
        v242 = v240;
      *(_QWORD *)&__ptr = __PAIR64__(v242, v241);
      LOBYTE(v394) = *(_BYTE *)v22 ^ 1;
      v243 = *(unsigned __int8 *)(v237 + 77);
      *(_QWORD *)(v105 + 16) = 0xFFEA000FFFF90003;
      *(_QWORD *)v105 = 0xFFEA000FFFF90003;
      *(_WORD *)(v105 + 24) = 15;
      *(_WORD *)(v105 + 8) = 15;
      *(_WORD *)(v105 + 26) = -7;
      *(_WORD *)(v105 + 10) = -7;
      *(_WORD *)(v105 + 28) = 3;
      *(_WORD *)(v105 + 12) = 3;
      *(_QWORD *)(v105 + 100) = 0x1FFFFFFFE0;
      if (!v243)
      {
        *(_QWORD *)(v105 + 48) = 0xFFEA000FFFF90003;
        *(_QWORD *)(v105 + 32) = 0xFFEA000FFFF90003;
        *(_WORD *)(v105 + 56) = 15;
        *(_WORD *)(v105 + 40) = 15;
        *(_DWORD *)(v105 + 58) = 262137;
        *(_DWORD *)(v105 + 42) = 262137;
        *(_QWORD *)(v105 + 112) = 0x1FFFFFFFE0;
        *(_QWORD *)(v105 + 80) = 0xFFEA000FFFF90003;
        *(_QWORD *)(v105 + 64) = 0xFFEA000FFFF90003;
        *(_WORD *)(v105 + 88) = 15;
        *(_WORD *)(v105 + 72) = 15;
        *(_DWORD *)(v105 + 90) = 262137;
        *(_DWORD *)(v105 + 74) = 262137;
        *(_QWORD *)(v105 + 124) = 0x1FFFFFFFE0;
      }
      v244 = ++v360 == v345 || v348 == v207;
      v203 = v244;
      v245 = v199;
      v246 = v204;
      if (v244)
      {
        v248 = v199;
      }
      else
      {
        v248 = v199 + 4;
        v389 = v199 + 4;
        v199 += 4;
      }
      *((_QWORD *)&__n_4 + 1) = &v10[v248];
      LODWORD(__n_4) = 0;
      HIDWORD(v392) = 0;
      *(_QWORD *)&v393 = 0;
      *((_QWORD *)&v393 + 1) = 4294410240;
      *(_QWORD *)&v392 = malloc_type_malloc(0xF249uLL, 0x100004077774924uLL);
      DWORD2(v392) = 62025;
      if (!(_QWORD)v392)
      {
        DWORD2(v392) = 0;
        HIDWORD(v393) = -1;
      }
      write_modes(v374, v349, (int *)&__ptr, (uint64_t)&__n_4, v363, v206);
      __n = 0;
      v249 = od_ec_enc_done((uint64_t)&v392, &__n);
      if (v249)
      {
        v250 = SWORD5(v393) + 8 * HIDWORD(v392) + 10;
        memcpy(*((void **)&__n_4 + 1), v249, __n);
        LODWORD(__n_4) = __n;
        free((void *)v392);
        if ((v250 & 0x80000000) == 0)
        {
          v251 = __n_4;
          v10 = v367;
          if (v203)
            goto LABEL_317;
LABEL_316:
          *(_DWORD *)&v10[v245] = v251 - 1;
          goto LABEL_317;
        }
      }
      else
      {
        free((void *)v392);
      }
      aom_internal_error(*(_QWORD *)(v105 + 2560), 1, "Error writing modes");
      v251 = __n_4;
      v10 = v367;
      if (!v203)
        goto LABEL_316;
LABEL_317:
      v204 = v246;
      v252 = 4;
      if (v203)
        v252 = 0;
      if (v251 > HIDWORD(v388))
      {
LABEL_343:
        *v358 = v207;
        HIDWORD(v388) = v251;
      }
LABEL_344:
      v201 += v252 + v251;
      if (v203)
      {
        v265 = v10;
        v266 = 0;
        v267 = (v201 - v388);
        v268 = v267;
        do
        {
          ++v266;
          v276 = v268 > 0x7F;
          v268 >>= 7;
        }
        while (v276);
        v269 = v204;
        v270 = &v204[v388];
        memmove(&v270[v266], v270, (v201 - v388));
        v271 = 0;
        v272 = v267;
        do
        {
          v273 = v271++;
          v276 = v272 > 0x7F;
          v272 >>= 7;
        }
        while (v276);
        v274 = v271 - 1;
        v204 = v269;
        v276 = v274 > 7 || v269 == 0 || v274 > 3;
        if (!v276)
        {
          v277 = 0;
          v278 = v273 + 1;
          do
          {
            v279 = v267 > 0x7F;
            v280 = v267 & 0x7F;
            v267 >>= 7;
            v270[v277++] = v280 | (v279 << 7);
          }
          while (v278 != v277);
        }
        v199 = v389 + v266;
        v389 += v266;
        v383 += v266;
        v205 = v371;
        if (*(_DWORD *)(v371 + 9796) == 1)
          *(_QWORD *)&v375 = v375 + v266;
        if (v343 || !*(_BYTE *)(v22 + 10))
        {
          v343 = 0;
          v201 += v266;
        }
        else
        {
          memmove(&v269[v378], v269, v201 + v266);
          memcpy(v269, __src, v378);
          v204 = v269;
          *v358 = 0;
          v281 = &v269[v377];
          v269[v377] = v333;
          if (v340)
            v281[1] = v338;
          v343 = 0;
          v201 += (int)v378 + v266;
          v199 = v389 + v378;
          v205 = v371;
        }
        v10 = v265;
      }
      else
      {
        v205 = v371;
      }
      v199 += v251;
      v389 = v199;
      ++v206;
      v105 = v374 + 94656;
    }
    while (v206 != v356);
    v200 = v363 + 1;
    if (v363 + 1 != v330)
      continue;
    break;
  }
  v283 = v374 + 234168;
  v282 = *(_DWORD *)(v374 + 234440);
  LODWORD(v161) = v330 * v356;
LABEL_374:
  *v322 += v282;
  if (*v323 && *(_DWORD *)(v374 + 388936))
  {
    v284 = *v320;
    if (*v320 <= *(_DWORD *)(v283 + 276))
      v284 = *(_DWORD *)(v283 + 276);
    *v320 = v284;
  }
  v285 = (_DWORD *)*((_QWORD *)v357 + 29);
  v285[363] += *(_DWORD *)v324;
  v285[364] += *(_DWORD *)(v374 + 234452);
  v285[365] += *(_DWORD *)(v374 + 234456);
  v285[366] += *(_DWORD *)(v374 + 234460);
LABEL_380:
  if ((int)v161 >= 2)
  {
    v286 = HIDWORD(v388);
    v287 = v388;
    v288 = v383;
    v289 = *(_DWORD *)(v374 + 263768);
    v290 = *(_DWORD *)(v374 + 263772);
    if (v290 + v289 >= 1)
    {
      v291 = *v358;
      v292 = DWORD2(v375);
      v293 = 7 - DWORD2(v375);
      v294 = v289 + v290 + 1;
      do
      {
        v295 = v292 + 7;
        if (v292 >= 0)
          v295 = v292;
        v296 = v293 + (v295 & 0xF8);
        v297 = (uint64_t)v295 >> 3;
        *(_BYTE *)(v375 + v297) &= ~(1 << v296);
        *(_BYTE *)(v375 + v297) |= ((v291 >> (v294 - 2)) & 1) << v296;
        DWORD2(v375) = ++v292;
        --v293;
        --v294;
      }
      while (v294 > 1);
    }
    if (*(_DWORD *)(v371 + 9796) == 1)
    {
      LODWORD(__ptr) = 4;
      v298 = (unint64_t)v367;
      v389 = remux_tiles(v368, v288, v389 - ((_DWORD)v288 - (_DWORD)v367), v286, 0, (int *)&__ptr, (int *)&__n)
           + v288
           - (_DWORD)v367;
      v299 = __ptr - 1;
      v300 = DWORD2(v375);
      v301 = ((__ptr - 1) >> 1) & 1;
      v302 = DWORD2(v375) + 7;
      if ((SDWORD2(v375) & 0x80000000) == 0)
        v302 = DWORD2(v375);
      v303 = (v302 & 0xF8) - BYTE8(v375) + 7;
      v304 = (uint64_t)v302 >> 3;
      *(_BYTE *)(v375 + v304) &= ~(1 << v303);
      *(_BYTE *)(v375 + v304) |= v301 << v303;
      DWORD2(v375) = v300 + 1;
      v305 = v299 & 1;
      v306 = v300 + 8;
      if (v300 >= -1)
        v306 = v300 + 1;
      v307 = (v306 & 0xF8) - (v300 + 1) + 7;
      v308 = (uint64_t)v306 >> 3;
      *(_BYTE *)(v375 + v308) &= ~(1 << v307);
      *(_BYTE *)(v375 + v308) |= v305 << v307;
      DWORD2(v375) = v300 + 2;
      v309 = &v367[v287];
      v310 = v389 - v287;
      if (v367)
      {
        v311 = 8;
        if (v310 < 8)
          v311 = v389 - v287;
        if (v311)
        {
          v312 = *v309 & 0x7F;
          if ((*v309 & 0x80) == 0)
          {
            v298 = 1;
            goto LABEL_403;
          }
          if (v311 == 1)
          {
LABEL_400:
            v298 = 0;
          }
          else
          {
            v313 = v309[1];
            v312 |= (unint64_t)(v313 & 0x7F) << 7;
            if (v313 < 0)
            {
              if (v311 == 2)
                goto LABEL_400;
              v314 = v309[2];
              v312 |= (unint64_t)(v314 & 0x7F) << 14;
              if (v314 < 0)
              {
                if (v311 == 3)
                  goto LABEL_400;
                v315 = v309[3];
                v312 |= (unint64_t)(v315 & 0x7F) << 21;
                if (v315 < 0)
                {
                  if (v311 == 4)
                    goto LABEL_400;
                  v316 = v309[4];
                  v312 |= (unint64_t)(v316 & 0x7F) << 28;
                  if (v316 < 0)
                  {
                    if (v311 == 5)
                      goto LABEL_400;
                    v317 = v309[5];
                    v312 |= (unint64_t)(v317 & 0x7F) << 35;
                    if (v317 < 0)
                    {
                      if (v311 == 6)
                        goto LABEL_400;
                      v318 = v309[6];
                      v312 |= (unint64_t)(v318 & 0x7F) << 42;
                      if (v318 < 0)
                      {
                        if (v311 == 7)
                          goto LABEL_400;
                        v319 = v309[7];
                        v312 |= (unint64_t)(v319 & 0x7F) << 49;
                        v298 = 8 * ((v319 >> 7) ^ 1);
                      }
                      else
                      {
                        v298 = 7;
                      }
                    }
                    else
                    {
                      v298 = 6;
                    }
                  }
                  else
                  {
                    v298 = 5;
                  }
                }
                else
                {
                  v298 = 4;
                }
              }
              else
              {
                v298 = 3;
              }
            }
            else
            {
              v298 = 2;
            }
          }
        }
        else
        {
          v298 = 0;
          v312 = 0;
        }
      }
      else
      {
        v312 = 0;
      }
LABEL_403:
      if (v310 - v298 != v312)
      {
        *(_QWORD *)&__n_4 = 0;
        aom_uleb_encode(v310 - v298, v298, (uint64_t)v309, &__n_4);
        if ((unint64_t)__n_4 < v298)
        {
          memmove(&v367[__n_4 + v287], &v367[v298 + v287], v312);
          v389 += __n_4 - v298;
        }
      }
    }
  }
  LODWORD(v108) = v389;
  v10 = v367;
LABEL_407:
  v108 = v108;
LABEL_408:
  result = 0;
  *v325 = &v10[v108] - v331;
  return result;
}

uint64_t write_uncompressed_header_obu(uint64_t result, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  char v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char v42;
  int v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  char v49;
  unsigned int *v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  char v58;
  _DWORD *v59;
  int v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  char v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  char v84;
  int v85;
  unsigned int v86;
  char v87;
  unsigned int v88;
  char v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  char v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  char v108;
  char v109;
  int v110;
  unsigned int v111;
  int v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  char v128;
  int v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  char v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  char v144;
  int v145;
  int v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  char v152;
  int v153;
  int v154;
  unsigned int v155;
  char v156;
  unsigned int v157;
  char v158;
  uint64_t v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  unsigned int v165;
  char v166;
  unsigned int v167;
  char v168;
  int v169;
  uint64_t v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  int v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int v180;
  char v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  char v187;
  int v188;
  int v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  char v195;
  int v196;
  int v197;
  int v198;
  unsigned int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  char v203;
  uint64_t v204;
  unsigned int v205;
  unsigned int *v206;
  unsigned int v207;
  int v208;
  int v209;
  int v210;
  unsigned int v211;
  char v212;
  uint64_t v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  int *v220;
  unsigned int v221;
  uint64_t v222;
  unsigned int v223;
  int v224;
  int v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  unsigned int v229;
  char v230;
  int v231;
  int v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  char v237;
  int v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  char v244;
  int v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  unsigned int v250;
  char v251;
  int v252;
  int v253;
  unsigned int v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  char v258;
  int v259;
  int v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  char v265;
  int v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  char v272;
  int v273;
  char v274;
  int v275;
  unsigned int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  unsigned int v280;
  unsigned int v281;
  int v282;
  int v283;
  int v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  unsigned int v288;
  char v289;
  int v290;
  int v291;
  unsigned int v292;
  int v293;
  char v294;
  uint64_t v295;
  int v296;
  int v297;
  unsigned int v298;
  uint64_t v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  char v304;
  uint64_t v305;
  int v306;
  int v307;
  unsigned int v308;
  uint64_t v309;
  int v310;
  unsigned int v311;
  char v312;
  char v313;
  uint64_t v314;
  int v315;
  unsigned int v316;
  int v317;
  unsigned int v318;
  uint64_t v319;
  int v320;
  unsigned int v321;
  unsigned int v322;
  int v323;
  int v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  unsigned int v328;
  char v329;
  int v330;
  int v331;
  unsigned int v332;
  int v333;
  char v334;
  uint64_t v335;
  int v336;
  int v337;
  unsigned int v338;
  uint64_t v339;
  int v340;
  int v341;
  unsigned int v342;
  int v343;
  char v344;
  uint64_t v345;
  int v346;
  int v347;
  unsigned int v348;
  uint64_t v349;
  int v350;
  unsigned int v351;
  char v352;
  char v353;
  uint64_t v354;
  int v355;
  unsigned int v356;
  int v357;
  unsigned int v358;
  uint64_t v359;
  int v360;
  int v361;
  int v362;
  unsigned int v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  char v367;
  int v368;
  char v369;
  int v370;
  uint64_t v371;
  int v372;
  int v373;
  BOOL v374;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  int v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  unsigned int v419;
  char v420;
  unsigned int v421;
  int v422;
  int v423;
  unsigned int v424;
  uint64_t v425;
  uint64_t v426;
  unsigned int v427;
  char v428;
  int v429;
  int v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  char v435;
  int v436;
  int v437;
  int v438;
  unsigned int v439;
  uint64_t v440;
  uint64_t v441;
  unsigned int v442;
  char v443;
  unsigned int v444;
  int v445;
  unsigned int v446;
  uint64_t v447;
  uint64_t v448;
  unsigned int v449;
  char v450;
  int v451;
  int v452;
  unsigned int v453;
  uint64_t v454;
  uint64_t v455;
  unsigned int v456;
  char v457;
  int v458;
  int v459;
  int v460;
  unsigned int v461;
  uint64_t v462;
  uint64_t v463;
  unsigned int v464;
  char v465;
  uint64_t i;
  int v467;
  int v468;
  unsigned int v469;
  int v471;
  int v472;
  unsigned int v473;
  char v474;
  uint64_t v475;
  int v476;
  int v477;
  unsigned int v478;
  uint64_t v479;
  unsigned int v480;
  int v481;
  int v482;
  unsigned int v483;
  uint64_t v484;
  uint64_t v485;
  unsigned int v486;
  char v487;
  int v488;
  int v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  unsigned int v493;
  char v494;
  int v495;
  char v496;
  int v497;
  unsigned int v498;
  uint64_t v499;
  uint64_t v500;
  unsigned int v501;
  char v502;
  uint64_t v503;
  _DWORD *v504;
  int v505;
  int v506;
  int v507;
  unsigned int v508;
  uint64_t v509;
  uint64_t v510;
  int v511;
  int v512;
  uint64_t v513;
  _DWORD *v514;
  _BOOL4 v515;
  int v516;
  unsigned int v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  int v521;
  uint64_t v522;
  _DWORD *v523;
  _BOOL4 v524;
  int v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  int v530;
  uint64_t v531;
  _DWORD *v532;
  _BOOL4 v533;
  int v534;
  unsigned int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  int v539;
  uint64_t v540;
  _DWORD *v541;
  _BOOL4 v542;
  int v543;
  unsigned int v544;
  uint64_t v545;
  uint64_t v546;
  int v547;
  int v548;
  uint64_t v549;
  _DWORD *v550;
  _BOOL4 v551;
  int v552;
  unsigned int v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  int v557;
  uint64_t v558;
  _DWORD *v559;
  _BOOL4 v560;
  int v561;
  int v562;
  int v563;
  unsigned int v564;
  uint64_t v565;
  uint64_t v566;
  unsigned int v567;
  char v568;
  int v569;
  int v570;
  unsigned int v571;
  uint64_t v572;
  uint64_t v573;
  unsigned int v574;
  char v575;
  int v576;
  int v577;
  unsigned int v578;
  uint64_t v579;
  uint64_t v580;
  unsigned int v581;
  char v582;
  int v583;
  int v584;
  unsigned int v585;
  uint64_t v586;
  uint64_t v587;
  unsigned int v588;
  char v589;
  int v590;
  int v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  char v596;
  int v597;
  int v598;
  unsigned int v599;
  uint64_t v600;
  uint64_t v601;
  unsigned int v602;
  char v603;
  int v604;
  int v605;
  unsigned int v606;
  uint64_t v607;
  uint64_t v608;
  unsigned int v609;
  char v610;
  int v611;
  int v612;
  unsigned int v613;
  uint64_t v614;
  uint64_t v615;
  int v616;
  char v617;
  char v618;
  char v619;
  char v620;
  char v621;
  char v622;
  int v623;
  int v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  unsigned int v628;
  int v629;
  unsigned int v630;
  uint64_t v631;
  uint64_t v632;
  unsigned int v633;
  char v634;
  int v635;
  int v636;
  unsigned int v637;
  uint64_t v638;
  uint64_t v639;
  unsigned int v640;
  char v641;
  int v642;
  int v643;
  unsigned int v644;
  uint64_t v645;
  uint64_t v646;
  unsigned int v647;
  char v648;
  int v649;
  int v650;
  unsigned int v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  char v655;
  int v656;
  int v657;
  int v658;
  unsigned int v659;
  uint64_t v660;
  uint64_t v661;
  unsigned int v662;
  char v663;
  int v664;
  char v665;
  int v666;
  int v667;
  int v668;
  unsigned int v669;
  uint64_t v670;
  uint64_t v671;
  unsigned int v672;
  char v673;
  int *v674;
  int v675;
  int v676;
  int v677;
  int v678;
  int v679;
  unsigned int v680;
  uint64_t v681;
  uint64_t v682;
  unsigned int v683;
  char v684;
  int v685;
  int *v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  BOOL v692;
  int v693;
  unsigned int v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  unsigned int v698;
  uint64_t v699;
  uint64_t v700;
  int v701;
  int v702;
  int v703;
  int v704;
  int v705;
  int v706;
  int v707;
  unsigned int v708;
  uint64_t v709;
  uint64_t v710;
  int v711;
  unsigned int v712;
  uint64_t v713;
  uint64_t v714;
  int v715;
  int v716;
  uint64_t v717;
  int v718;
  uint64_t v719;
  int v720;
  int v721;
  unsigned int v722;
  uint64_t v723;
  uint64_t v724;
  unsigned int v725;
  char v726;
  int v727;
  signed int v728;
  unsigned int v729;
  unsigned int v730;
  int v731;
  int v732;
  int v733;
  unsigned int v734;
  signed int v735;
  int v736;
  unsigned int v737;
  char v738;
  unsigned int v739;
  char v740;
  uint64_t v741;
  int v742;
  int v743;
  unsigned int v744;
  uint64_t v745;
  char v746;
  unsigned int v747;
  char v748;
  uint64_t v749;
  int v750;
  int v751;
  unsigned int v752;
  uint64_t v753;
  uint64_t v754;
  int v755;
  uint64_t v756;
  int v757;
  int v758;
  unsigned int v759;
  uint64_t v760;
  uint64_t v761;
  unsigned int v762;
  char v763;
  int v764;
  signed int v765;
  unsigned int v766;
  unsigned int v767;
  int v768;
  int v769;
  int v770;
  unsigned int v771;
  signed int v772;
  int v773;
  unsigned int v774;
  char v775;
  unsigned int v776;
  char v777;
  uint64_t v778;
  int v779;
  int v780;
  unsigned int v781;
  uint64_t v782;
  char v783;
  unsigned int v784;
  char v785;
  uint64_t v786;
  int v787;
  int v788;
  unsigned int v789;
  uint64_t v790;
  int v791;
  int v792;
  int v793;
  _DWORD *v794;
  char v795;
  unsigned int v796;
  int v797;
  int v798;
  unsigned int v799;
  uint64_t v800;
  uint64_t v801;
  int v802;
  unsigned int v803;
  uint64_t v804;
  uint64_t v805;
  unsigned int v806;
  int v807;
  char v808;
  int v809;
  unsigned int v810;
  uint64_t v811;
  uint64_t v812;
  unsigned int v813;
  int v814;
  char v815;
  int v816;
  int v817;
  unsigned int v818;
  int v819;
  unsigned int v820;
  uint64_t v821;
  uint64_t v822;
  unsigned int v823;
  char v824;
  int v825;
  int v826;
  unsigned int v827;
  uint64_t v828;
  uint64_t v829;
  unsigned int v830;
  char v831;
  int v832;
  int v833;
  unsigned int v834;
  uint64_t v835;
  uint64_t v836;
  unsigned int v837;
  char v838;
  int v839;
  int v840;
  unsigned int v841;
  uint64_t v842;
  uint64_t v843;
  unsigned int v844;
  char v845;
  int v846;
  int v847;
  unsigned int v848;
  uint64_t v849;
  uint64_t v850;
  unsigned int v851;
  char v852;
  int v853;
  int v854;
  unsigned int v855;
  uint64_t v856;
  uint64_t v857;
  unsigned int v858;
  char v859;
  int v860;
  int v861;
  unsigned int v862;
  uint64_t v863;
  uint64_t v864;
  unsigned int v865;
  char v866;
  int v867;
  int v868;
  int v869;
  unsigned int v870;
  uint64_t v871;
  uint64_t v872;
  _BYTE *v873;
  unsigned int v874;
  int v875;
  unsigned int v876;
  uint64_t v877;
  uint64_t v878;
  int v879;
  char v880;
  int v881;
  int v882;
  unsigned int v883;
  uint64_t v884;
  uint64_t v885;
  unsigned int v886;
  char v887;
  int v888;
  int v889;
  unsigned int v890;
  uint64_t v891;
  uint64_t v892;
  unsigned int v893;
  char v894;
  int v895;
  int v896;
  unsigned int v897;
  uint64_t v898;
  uint64_t v899;
  unsigned int v900;
  char v901;
  int v902;
  int v903;
  unsigned int v904;
  uint64_t v905;
  uint64_t v906;
  unsigned int v907;
  char v908;
  int v909;
  int v910;
  unsigned int v911;
  uint64_t v912;
  uint64_t v913;
  unsigned int v914;
  char v915;
  int v916;
  int v917;
  unsigned int v918;
  uint64_t v919;
  uint64_t v920;
  unsigned int v921;
  char v922;
  int v923;
  int v924;
  int v925;
  unsigned int v926;
  uint64_t v927;
  uint64_t v928;
  unsigned int v929;
  char v930;
  unsigned int v931;
  int v932;
  int v933;
  unsigned int v934;
  uint64_t v935;
  uint64_t v936;
  unsigned int v937;
  char v938;
  char v939;
  int v940;
  unsigned int v941;
  uint64_t v942;
  uint64_t v943;
  int v944;
  char v945;
  int v946;
  int v947;
  unsigned int v948;
  uint64_t v949;
  uint64_t v950;
  unsigned int v951;
  char v952;
  int v953;
  int v954;
  unsigned int v955;
  uint64_t v956;
  uint64_t v957;
  unsigned int v958;
  char v959;
  int v960;
  int v961;
  unsigned int v962;
  uint64_t v963;
  uint64_t v964;
  unsigned int v965;
  char v966;
  int v967;
  int v968;
  unsigned int v969;
  uint64_t v970;
  uint64_t v971;
  unsigned int v972;
  char v973;
  int v974;
  int v975;
  unsigned int v976;
  uint64_t v977;
  uint64_t v978;
  unsigned int v979;
  char v980;
  int v981;
  int v982;
  unsigned int v983;
  uint64_t v984;
  uint64_t v985;
  unsigned int v986;
  char v987;
  int v988;
  int v989;
  int v990;
  unsigned int v991;
  uint64_t v992;
  uint64_t v993;
  int v994;
  BOOL v995;
  int v996;
  unsigned int v997;
  int v998;
  unsigned int v999;
  uint64_t v1000;
  uint64_t v1001;
  int v1002;
  char v1003;
  int v1004;
  unsigned int v1005;
  uint64_t v1006;
  uint64_t v1007;
  unsigned int v1008;
  char v1009;
  int v1010;
  int v1011;
  unsigned int v1012;
  uint64_t v1013;
  uint64_t v1014;
  unsigned int v1015;
  char v1016;
  int v1017;
  int v1018;
  unsigned int v1019;
  uint64_t v1020;
  uint64_t v1021;
  unsigned int v1022;
  char v1023;
  int v1024;
  int v1025;
  unsigned int v1026;
  uint64_t v1027;
  uint64_t v1028;
  unsigned int v1029;
  char v1030;
  int v1031;
  int v1032;
  unsigned int v1033;
  uint64_t v1034;
  uint64_t v1035;
  unsigned int v1036;
  char v1037;
  int v1038;
  int v1039;
  unsigned int v1040;
  uint64_t v1041;
  uint64_t v1042;
  unsigned int v1043;
  char v1044;
  int v1045;
  int v1046;
  int v1047;
  unsigned int v1048;
  uint64_t v1049;
  uint64_t v1050;
  unsigned int v1051;
  int v1052;
  unsigned int v1053;
  uint64_t v1054;
  uint64_t v1055;
  int v1056;
  char v1057;
  int v1058;
  int v1059;
  unsigned int v1060;
  uint64_t v1061;
  uint64_t v1062;
  unsigned int v1063;
  char v1064;
  int v1065;
  int v1066;
  unsigned int v1067;
  uint64_t v1068;
  uint64_t v1069;
  unsigned int v1070;
  char v1071;
  int v1072;
  int v1073;
  unsigned int v1074;
  uint64_t v1075;
  uint64_t v1076;
  unsigned int v1077;
  char v1078;
  int v1079;
  int v1080;
  unsigned int v1081;
  uint64_t v1082;
  uint64_t v1083;
  unsigned int v1084;
  char v1085;
  int v1086;
  int v1087;
  unsigned int v1088;
  uint64_t v1089;
  uint64_t v1090;
  unsigned int v1091;
  char v1092;
  int v1093;
  int v1094;
  unsigned int v1095;
  uint64_t v1096;
  uint64_t v1097;
  unsigned int v1098;
  char v1099;
  int v1100;
  int v1101;
  int v1102;
  unsigned int v1103;
  uint64_t v1104;
  uint64_t v1105;
  int v1106;
  int v1107;
  unsigned int v1108;
  int v1109;
  unsigned int v1110;
  uint64_t v1111;
  uint64_t v1112;
  int v1113;
  char v1114;
  int v1115;
  int v1116;
  unsigned int v1117;
  uint64_t v1118;
  uint64_t v1119;
  unsigned int v1120;
  char v1121;
  int v1122;
  int v1123;
  unsigned int v1124;
  uint64_t v1125;
  uint64_t v1126;
  unsigned int v1127;
  char v1128;
  int v1129;
  int v1130;
  unsigned int v1131;
  uint64_t v1132;
  uint64_t v1133;
  unsigned int v1134;
  char v1135;
  int v1136;
  int v1137;
  unsigned int v1138;
  uint64_t v1139;
  uint64_t v1140;
  unsigned int v1141;
  char v1142;
  int v1143;
  int v1144;
  unsigned int v1145;
  uint64_t v1146;
  uint64_t v1147;
  unsigned int v1148;
  char v1149;
  int v1150;
  int v1151;
  unsigned int v1152;
  uint64_t v1153;
  uint64_t v1154;
  unsigned int v1155;
  char v1156;
  int v1157;
  int v1158;
  int v1159;
  unsigned int v1160;
  uint64_t v1161;
  uint64_t v1162;
  int v1163;
  int v1164;
  int v1165;
  unsigned int v1166;
  uint64_t v1167;
  uint64_t v1168;
  unsigned int v1169;
  char v1170;
  int v1171;
  unsigned int v1172;
  int v1173;
  unsigned int v1174;
  uint64_t v1175;
  uint64_t v1176;
  unsigned int v1177;
  char v1178;
  int v1179;
  unsigned int v1180;
  uint64_t v1181;
  uint64_t v1182;
  unsigned int v1183;
  char v1184;
  int v1185;
  int v1186;
  unsigned int v1187;
  uint64_t v1188;
  uint64_t v1189;
  unsigned int v1190;
  char v1191;
  int v1192;
  int v1193;
  int v1194;
  unsigned int v1195;
  uint64_t v1196;
  uint64_t v1197;
  unsigned int v1198;
  char v1199;
  unsigned int v1200;
  int v1201;
  unsigned int v1202;
  uint64_t v1203;
  uint64_t v1204;
  unsigned int v1205;
  char v1206;
  int v1207;
  int v1208;
  unsigned int v1209;
  uint64_t v1210;
  uint64_t v1211;
  unsigned int v1212;
  char v1213;
  int v1214;
  int v1215;
  unsigned int v1216;
  uint64_t v1217;
  uint64_t v1218;
  int v1219;
  int v1220;
  int v1221;
  unsigned int v1222;
  uint64_t v1223;
  uint64_t v1224;
  unsigned int v1225;
  char v1226;
  unsigned int v1227;
  int v1228;
  unsigned int v1229;
  uint64_t v1230;
  uint64_t v1231;
  unsigned int v1232;
  char v1233;
  int v1234;
  unsigned int v1235;
  uint64_t v1236;
  uint64_t v1237;
  unsigned int v1238;
  char v1239;
  int v1240;
  int v1241;
  unsigned int v1242;
  uint64_t v1243;
  uint64_t v1244;
  unsigned int v1245;
  char v1246;
  int v1247;
  int v1248;
  int v1249;
  unsigned int v1250;
  uint64_t v1251;
  uint64_t v1252;
  unsigned int v1253;
  char v1254;
  int v1255;
  int v1256;
  unsigned int v1257;
  uint64_t v1258;
  uint64_t v1259;
  unsigned int v1260;
  char v1261;
  int v1262;
  int v1263;
  int v1264;
  unsigned int v1265;
  uint64_t v1266;
  uint64_t v1267;
  unsigned int v1268;
  char v1269;
  int v1270;
  int v1271;
  int v1272;
  unsigned int v1273;
  uint64_t v1274;
  uint64_t v1275;
  unsigned int v1276;
  char v1277;
  int v1278;
  int v1279;
  unsigned int v1280;
  uint64_t v1281;
  uint64_t v1282;
  unsigned int v1283;
  char v1284;
  uint64_t v1285;
  uint64_t v1286;
  int v1287;
  int v1288;
  unsigned int v1289;
  uint64_t v1290;
  uint64_t v1291;
  unsigned int v1292;
  char v1293;
  int v1294;
  unsigned int v1295;
  uint64_t v1296;
  uint64_t v1297;
  int v1298;
  signed int v1299;
  uint64_t v1300;
  unsigned int v1301;
  int v1302;
  unsigned int v1303;
  unsigned int v1304;
  char v1305;
  char v1306;
  uint64_t v1307;
  int v1308;
  unsigned int v1309;
  int v1310;
  unsigned int v1311;
  uint64_t v1312;
  int v1313;
  int v1314;
  char v1315;
  unsigned int v1316;
  char v1317;
  uint64_t v1318;
  int v1319;
  int v1320;
  unsigned int v1321;
  uint64_t v1322;
  _DWORD *v1323;
  int v1324;
  int v1325;
  unsigned int v1326;
  uint64_t v1327;
  uint64_t v1328;
  unsigned int v1329;
  char v1330;
  int v1331;
  unsigned int v1332;
  int v1333;
  unsigned int v1334;
  uint64_t v1335;
  uint64_t v1336;
  unsigned int v1337;
  char v1338;
  int v1339;
  int v1340;
  unsigned int v1341;
  uint64_t v1342;
  uint64_t v1343;
  unsigned int v1344;
  char v1345;
  int v1346;
  int v1347;
  int v1348;
  unsigned int v1349;
  uint64_t v1350;
  uint64_t v1351;
  unsigned int v1352;
  char v1353;
  unsigned int v1354;
  int v1355;
  unsigned int v1356;
  uint64_t v1357;
  uint64_t v1358;
  unsigned int v1359;
  char v1360;
  int v1361;
  int v1362;
  int v1363;
  unsigned int v1364;
  uint64_t v1365;
  uint64_t v1366;
  unsigned int v1367;
  char v1368;
  int v1369;
  int v1370;
  unsigned int v1371;
  uint64_t v1372;
  uint64_t v1373;
  unsigned int v1374;
  char v1375;
  int v1376;
  size_t v1377;
  int v1378;
  int v1379;
  int v1380;
  unsigned int v1381;
  uint64_t v1382;
  uint64_t v1383;
  unsigned int v1384;
  char v1385;
  unsigned int *v1386;
  uint64_t v1387;
  char v1388;
  int v1389;
  uint64_t v1390;
  int v1391;
  int v1392;
  _BOOL4 v1393;
  int v1394;
  int v1395;
  unsigned int v1396;
  uint64_t v1397;
  uint64_t v1398;
  unsigned int v1399;
  char v1400;
  int v1401;
  int v1402;
  int v1403;
  unsigned int v1404;
  uint64_t v1405;
  uint64_t v1406;
  unsigned int v1407;
  char v1408;
  int v1409;
  int v1410;
  int v1411;
  unsigned int v1412;
  uint64_t v1413;
  uint64_t v1414;
  unsigned int v1415;
  char v1416;
  char v1417;
  int v1418;
  int v1419;
  unsigned int v1420;
  uint64_t v1421;
  uint64_t v1422;
  unsigned int v1423;
  char v1424;
  int v1425;
  int v1426;
  int v1427;
  unsigned int v1428;
  uint64_t v1429;
  uint64_t v1430;
  unsigned int v1431;
  char v1432;
  uint64_t v1433;
  uint64_t v1434;
  char v1435;
  __int16 v1436;
  char v1437;
  __int16 v1438;
  uint64_t v1439;
  int *v1440;
  int v1441;
  unsigned int v1442;
  int v1443;
  int v1444;
  unsigned int v1445;
  uint64_t v1446;
  uint64_t v1447;
  unsigned int v1448;
  char v1449;
  int v1450;
  int v1451;
  unsigned int v1452;
  uint64_t v1453;
  uint64_t v1454;
  unsigned int v1455;
  char v1456;
  int v1457;
  int v1458;
  unsigned int v1459;
  uint64_t v1460;
  uint64_t v1461;
  unsigned int v1462;
  char v1463;
  int *v1464;
  uint64_t v1465;
  int v1466;
  int v1467;
  int v1468;
  unsigned int v1469;
  uint64_t v1470;
  uint64_t v1471;
  unsigned int v1472;
  char v1473;
  int v1474;
  unsigned int v1475;
  unsigned int v1476;
  int v1477;
  char v1478;
  int v1479;
  int v1480;
  unsigned int v1481;
  uint64_t v1482;
  uint64_t v1483;
  int v1484;
  int v1485;
  unsigned int v1486;
  uint64_t v1487;
  uint64_t v1488;
  int v1489;
  unsigned int v1490;
  int v1491;
  int v1492;
  int v1493;
  unsigned int v1494;
  uint64_t v1495;
  uint64_t v1496;
  unsigned int v1497;
  char v1498;
  int v1499;
  char v1500;
  unsigned int v1501;
  int v1502;
  unsigned int v1503;
  uint64_t v1504;
  uint64_t v1505;
  unsigned int v1506;
  char v1507;
  int v1508;
  uint64_t v1509;
  unint64_t v1510;
  uint64_t v1511;
  uint64_t v1512;
  uint64_t v1513;
  uint64_t v1514;
  uint64_t v1515;
  int v1516;
  int v1517;
  unsigned int v1518;
  uint64_t v1519;
  uint64_t v1520;
  unsigned int v1521;
  char v1522;
  unsigned int v1523;
  int v1524;
  unsigned int v1525;
  uint64_t v1526;
  uint64_t v1527;
  unsigned int v1528;
  char v1529;
  int v1530;
  int v1531;
  unsigned int v1532;
  uint64_t v1533;
  uint64_t v1534;
  unsigned int v1535;
  char v1536;
  int v1537;
  int v1538;
  int v1539;
  unsigned int v1540;
  uint64_t v1541;
  uint64_t v1542;
  unsigned int v1543;
  char v1544;
  int v1545;
  uint64_t v1546;
  char v1547;
  unsigned int *v1548;
  char v1549;
  int v1550;
  unsigned int v1551;
  int v1552;
  unsigned int v1553;
  uint64_t v1554;
  uint64_t v1555;
  int v1556;
  char v1557;
  int v1558;
  unsigned int v1559;
  uint64_t v1560;
  uint64_t v1561;
  unsigned int v1562;
  char v1563;
  int v1564;
  int v1565;
  unsigned int v1566;
  uint64_t v1567;
  uint64_t v1568;
  unsigned int v1569;
  char v1570;
  int v1571;
  int v1572;
  unsigned int v1573;
  uint64_t v1574;
  uint64_t v1575;
  unsigned int v1576;
  char v1577;
  int v1578;
  int v1579;
  unsigned int v1580;
  uint64_t v1581;
  uint64_t v1582;
  unsigned int v1583;
  char v1584;
  int v1585;
  int v1586;
  unsigned int v1587;
  uint64_t v1588;
  uint64_t v1589;
  unsigned int v1590;
  char v1591;
  int v1592;
  int v1593;
  unsigned int v1594;
  uint64_t v1595;
  uint64_t v1596;
  unsigned int v1597;
  char v1598;
  int v1599;
  int v1600;
  int v1601;
  unsigned int v1602;
  uint64_t v1603;
  uint64_t v1604;
  unsigned int v1605;
  char v1606;
  unsigned int v1607;
  int v1608;
  int v1609;
  unsigned int v1610;
  uint64_t v1611;
  uint64_t v1612;
  unsigned int v1613;
  char v1614;
  int v1615;
  int v1616;
  unsigned int v1617;
  uint64_t v1618;
  uint64_t v1619;
  unsigned int v1620;
  char v1621;
  int v1622;
  int v1623;
  unsigned int v1624;
  uint64_t v1625;
  uint64_t v1626;
  unsigned int v1627;
  char v1628;
  int v1629;
  int v1630;
  unsigned int v1631;
  uint64_t v1632;
  uint64_t v1633;
  unsigned int v1634;
  char v1635;
  int v1636;
  int v1637;
  unsigned int v1638;
  uint64_t v1639;
  uint64_t v1640;
  unsigned int v1641;
  char v1642;
  int v1643;
  int v1644;
  unsigned int v1645;
  uint64_t v1646;
  uint64_t v1647;
  unsigned int v1648;
  char v1649;
  int v1650;
  int v1651;
  unsigned int v1652;
  uint64_t v1653;
  uint64_t v1654;
  unsigned int v1655;
  char v1656;
  int v1657;
  int v1658;
  int v1659;
  unsigned int v1660;
  uint64_t v1661;
  uint64_t v1662;
  char v1663;
  int v1664;
  int v1665;
  int v1666;
  unsigned int v1667;
  uint64_t v1668;
  uint64_t v1669;
  unsigned int v1670;
  char v1671;
  uint64_t v1672;
  int v1673;
  unsigned int v1674;
  uint64_t v1675;
  uint64_t v1676;
  unsigned int v1677;
  char v1678;
  unsigned int v1679;
  int v1680;
  int v1681;
  unsigned int v1682;
  uint64_t v1683;
  uint64_t v1684;
  unsigned int v1685;
  char v1686;
  int v1687;
  uint64_t v1688;
  int v1689;
  int v1690;
  int v1691;
  int v1692;
  unsigned int v1693;
  uint64_t v1694;
  uint64_t v1695;
  unsigned int v1696;
  char v1697;
  unsigned int v1698;
  int v1699;
  unsigned int v1700;
  uint64_t v1701;
  uint64_t v1702;
  unsigned int v1703;
  char v1704;
  int v1705;
  int v1706;
  int v1707;
  unsigned int v1708;
  uint64_t v1709;
  uint64_t v1710;
  unsigned int v1711;
  char v1712;
  unsigned int v1713;
  int v1714;
  unsigned int v1715;
  uint64_t v1716;
  uint64_t v1717;
  unsigned int v1718;
  char v1719;
  int v1720;
  int v1721;
  int v1722;
  unsigned int v1723;
  uint64_t v1724;
  uint64_t v1725;
  unsigned int v1726;
  char v1727;
  int v1728;
  int v1729;
  int v1730;
  BOOL v1731;
  uint64_t v1732;
  int v1733;
  unsigned int *v1734;
  int v1735;
  unsigned int v1736;
  unsigned int v1737;
  unsigned int v1738;
  int v1739;
  unsigned int v1740;
  uint64_t v1741;
  uint64_t v1742;
  char v1743;
  int v1744;
  unsigned int v1745;
  uint64_t v1746;
  uint64_t v1747;
  unsigned int v1748;
  char v1749;
  int v1750;
  int v1751;
  unsigned int v1752;
  uint64_t v1753;
  uint64_t v1754;
  unsigned int v1755;
  char v1756;
  int v1757;
  int v1758;
  unsigned int v1759;
  uint64_t v1760;
  uint64_t v1761;
  unsigned int v1762;
  char v1763;
  int v1764;
  int v1765;
  unsigned int v1766;
  uint64_t v1767;
  uint64_t v1768;
  unsigned int v1769;
  char v1770;
  int v1771;
  int v1772;
  unsigned int v1773;
  uint64_t v1774;
  uint64_t v1775;
  unsigned int v1776;
  char v1777;
  int v1778;
  int v1779;
  unsigned int v1780;
  uint64_t v1781;
  uint64_t v1782;
  unsigned int v1783;
  char v1784;
  int v1785;
  int v1786;
  int v1787;
  unsigned int v1788;
  uint64_t v1789;
  unsigned int v1790;
  char v1791;
  uint64_t v1792;
  int v1793;
  unsigned int *v1794;
  uint64_t v1795;
  int v1796;
  unsigned int v1797;
  unsigned int v1798;
  unsigned int v1799;
  int v1800;
  unsigned int v1801;
  uint64_t v1802;
  uint64_t v1803;
  char v1804;
  int v1805;
  unsigned int v1806;
  uint64_t v1807;
  uint64_t v1808;
  unsigned int v1809;
  char v1810;
  int v1811;
  int v1812;
  unsigned int v1813;
  uint64_t v1814;
  uint64_t v1815;
  unsigned int v1816;
  char v1817;
  int v1818;
  int v1819;
  unsigned int v1820;
  uint64_t v1821;
  uint64_t v1822;
  unsigned int v1823;
  char v1824;
  int v1825;
  int v1826;
  unsigned int v1827;
  uint64_t v1828;
  uint64_t v1829;
  unsigned int v1830;
  char v1831;
  int v1832;
  int v1833;
  unsigned int v1834;
  uint64_t v1835;
  uint64_t v1836;
  unsigned int v1837;
  char v1838;
  int v1839;
  int v1840;
  unsigned int v1841;
  uint64_t v1842;
  uint64_t v1843;
  unsigned int v1844;
  char v1845;
  int v1846;
  int v1847;
  int v1848;
  unsigned int v1849;
  uint64_t v1850;
  unsigned int v1851;
  char v1852;
  int v1853;
  unsigned int *v1854;
  int v1855;
  unsigned int v1856;
  unsigned int v1857;
  unsigned int v1858;
  int v1859;
  unsigned int v1860;
  uint64_t v1861;
  uint64_t v1862;
  char v1863;
  int v1864;
  unsigned int v1865;
  uint64_t v1866;
  uint64_t v1867;
  unsigned int v1868;
  char v1869;
  int v1870;
  int v1871;
  unsigned int v1872;
  uint64_t v1873;
  uint64_t v1874;
  unsigned int v1875;
  char v1876;
  int v1877;
  int v1878;
  unsigned int v1879;
  uint64_t v1880;
  uint64_t v1881;
  unsigned int v1882;
  char v1883;
  int v1884;
  int v1885;
  unsigned int v1886;
  uint64_t v1887;
  uint64_t v1888;
  unsigned int v1889;
  char v1890;
  int v1891;
  int v1892;
  unsigned int v1893;
  uint64_t v1894;
  uint64_t v1895;
  unsigned int v1896;
  char v1897;
  int v1898;
  int v1899;
  unsigned int v1900;
  uint64_t v1901;
  uint64_t v1902;
  unsigned int v1903;
  char v1904;
  int v1905;
  int v1906;
  int v1907;
  unsigned int v1908;
  uint64_t v1909;
  uint64_t v1910;
  char v1911;
  int v1912;
  int v1913;
  int v1914;
  unsigned int v1915;
  uint64_t v1916;
  uint64_t v1917;
  unsigned int v1918;
  char v1919;
  unsigned int v1920;
  int v1921;
  int v1922;
  unsigned int v1923;
  uint64_t v1924;
  uint64_t v1925;
  unsigned int v1926;
  char v1927;
  unsigned int v1928;
  int v1929;
  unsigned int v1930;
  uint64_t v1931;
  uint64_t v1932;
  unsigned int v1933;
  char v1934;
  int v1935;
  int v1936;
  int v1937;
  unsigned int v1938;
  uint64_t v1939;
  uint64_t v1940;
  unsigned int v1941;
  char v1942;
  int v1943;
  unsigned int v1944;
  int v1945;
  unsigned int v1946;
  uint64_t v1947;
  uint64_t v1948;
  unsigned int v1949;
  char v1950;
  int v1951;
  unsigned int v1952;
  uint64_t v1953;
  uint64_t v1954;
  unsigned int v1955;
  char v1956;
  int v1957;
  int v1958;
  unsigned int v1959;
  uint64_t v1960;
  uint64_t v1961;
  unsigned int v1962;
  char v1963;
  int v1964;
  int v1965;
  unsigned int v1966;
  uint64_t v1967;
  uint64_t v1968;
  int v1969;
  int v1970;
  unsigned int v1971;
  uint64_t v1972;
  uint64_t v1973;
  unsigned int v1974;
  char v1975;
  int v1976;
  int v1977;
  unsigned int v1978;
  uint64_t v1979;
  uint64_t v1980;
  unsigned int v1981;
  char v1982;
  int v1983;
  int v1984;
  unsigned int v1985;
  uint64_t v1986;
  uint64_t v1987;
  unsigned int v1988;
  char v1989;
  int v1990;
  int v1991;
  int v1992;
  unsigned int v1993;
  uint64_t v1994;
  uint64_t v1995;
  unsigned int v1996;
  char v1997;
  unsigned int v1998;
  int v1999;
  unsigned int v2000;
  uint64_t v2001;
  uint64_t v2002;
  unsigned int v2003;
  char v2004;
  int v2005;
  int v2006;
  unsigned int v2007;
  uint64_t v2008;
  uint64_t v2009;
  unsigned int v2010;
  char v2011;
  int v2012;
  int v2013;
  unsigned int v2014;
  uint64_t v2015;
  uint64_t v2016;
  unsigned int v2017;
  char v2018;
  int v2019;
  int v2020;
  unsigned int v2021;
  uint64_t v2022;
  uint64_t v2023;
  unsigned int v2024;
  char v2025;
  int v2026;
  int v2027;
  unsigned int v2028;
  uint64_t v2029;
  uint64_t v2030;
  unsigned int v2031;
  char v2032;
  int v2033;
  int v2034;
  unsigned int v2035;
  uint64_t v2036;
  uint64_t v2037;
  unsigned int v2038;
  char v2039;
  int v2040;
  int v2041;
  unsigned int v2042;
  uint64_t v2043;
  uint64_t v2044;
  unsigned int v2045;
  char v2046;
  int v2047;
  int v2048;
  int v2049;
  unsigned int v2050;
  uint64_t v2051;
  uint64_t v2052;
  unsigned int v2053;
  char v2054;
  unsigned int v2055;
  int v2056;
  int v2057;
  unsigned int v2058;
  uint64_t v2059;
  uint64_t v2060;
  unsigned int v2061;
  char v2062;
  int v2063;
  unsigned int v2064;
  uint64_t v2065;
  uint64_t v2066;
  unsigned int v2067;
  char v2068;
  int v2069;
  int v2070;
  unsigned int v2071;
  uint64_t v2072;
  uint64_t v2073;
  unsigned int v2074;
  char v2075;
  int v2076;
  int v2077;
  unsigned int v2078;
  uint64_t v2079;
  uint64_t v2080;
  unsigned int v2081;
  char v2082;
  int v2083;
  int v2084;
  unsigned int v2085;
  uint64_t v2086;
  uint64_t v2087;
  unsigned int v2088;
  char v2089;
  int v2090;
  int v2091;
  unsigned int v2092;
  uint64_t v2093;
  uint64_t v2094;
  unsigned int v2095;
  char v2096;
  int v2097;
  int v2098;
  unsigned int v2099;
  uint64_t v2100;
  uint64_t v2101;
  unsigned int v2102;
  char v2103;
  int v2104;
  int v2105;
  unsigned int v2106;
  uint64_t v2107;
  uint64_t v2108;
  unsigned int v2109;
  char v2110;
  int v2111;
  int v2112;
  int v2113;
  unsigned int v2114;
  uint64_t v2115;
  uint64_t v2116;
  unsigned int v2117;
  char v2118;
  unsigned int v2119;
  int v2120;
  unsigned int v2121;
  uint64_t v2122;
  uint64_t v2123;
  unsigned int v2124;
  char v2125;
  int v2126;
  int v2127;
  unsigned int v2128;
  uint64_t v2129;
  uint64_t v2130;
  unsigned int v2131;
  char v2132;
  int v2133;
  int v2134;
  unsigned int v2135;
  uint64_t v2136;
  uint64_t v2137;
  unsigned int v2138;
  char v2139;
  int v2140;
  int v2141;
  unsigned int v2142;
  uint64_t v2143;
  uint64_t v2144;
  unsigned int v2145;
  char v2146;
  int v2147;
  int v2148;
  unsigned int v2149;
  uint64_t v2150;
  uint64_t v2151;
  unsigned int v2152;
  char v2153;
  int v2154;
  int v2155;
  unsigned int v2156;
  uint64_t v2157;
  uint64_t v2158;
  unsigned int v2159;
  char v2160;
  int v2161;
  int v2162;
  unsigned int v2163;
  uint64_t v2164;
  uint64_t v2165;
  unsigned int v2166;
  char v2167;
  int v2168;
  int v2169;
  int v2170;
  unsigned int v2171;
  uint64_t v2172;
  uint64_t v2173;
  unsigned int v2174;
  int v2175;
  unsigned int v2176;
  uint64_t v2177;
  uint64_t v2178;
  unsigned int v2179;
  char v2180;
  int v2181;
  int v2182;
  unsigned int v2183;
  uint64_t v2184;
  uint64_t v2185;
  unsigned int v2186;
  char v2187;
  int v2188;
  int v2189;
  unsigned int v2190;
  uint64_t v2191;
  uint64_t v2192;
  unsigned int v2193;
  char v2194;
  int v2195;
  int v2196;
  unsigned int v2197;
  uint64_t v2198;
  uint64_t v2199;
  unsigned int v2200;
  char v2201;
  int v2202;
  int v2203;
  unsigned int v2204;
  uint64_t v2205;
  uint64_t v2206;
  unsigned int v2207;
  char v2208;
  int v2209;
  int v2210;
  unsigned int v2211;
  uint64_t v2212;
  uint64_t v2213;
  unsigned int v2214;
  char v2215;
  int v2216;
  int v2217;
  unsigned int v2218;
  uint64_t v2219;
  uint64_t v2220;
  unsigned int v2221;
  char v2222;
  int v2223;
  int v2224;
  int v2225;
  unsigned int v2226;
  uint64_t v2227;
  uint64_t v2228;
  unsigned int v2229;
  char v2230;
  unsigned int v2231;
  int v2232;
  int v2233;
  unsigned int v2234;
  uint64_t v2235;
  uint64_t v2236;
  unsigned int v2237;
  char v2238;
  int v2239;
  unsigned int v2240;
  uint64_t v2241;
  uint64_t v2242;
  unsigned int v2243;
  char v2244;
  int v2245;
  int v2246;
  unsigned int v2247;
  uint64_t v2248;
  uint64_t v2249;
  unsigned int v2250;
  char v2251;
  int v2252;
  int v2253;
  unsigned int v2254;
  uint64_t v2255;
  uint64_t v2256;
  unsigned int v2257;
  char v2258;
  int v2259;
  int v2260;
  unsigned int v2261;
  uint64_t v2262;
  uint64_t v2263;
  unsigned int v2264;
  char v2265;
  int v2266;
  int v2267;
  unsigned int v2268;
  uint64_t v2269;
  uint64_t v2270;
  unsigned int v2271;
  char v2272;
  int v2273;
  int v2274;
  unsigned int v2275;
  uint64_t v2276;
  uint64_t v2277;
  unsigned int v2278;
  char v2279;
  int v2280;
  int v2281;
  unsigned int v2282;
  uint64_t v2283;
  uint64_t v2284;
  unsigned int v2285;
  char v2286;
  int v2287;
  int v2288;
  int v2289;
  unsigned int v2290;
  uint64_t v2291;
  uint64_t v2292;
  unsigned int v2293;
  char v2294;
  int v2295;
  int v2296;
  unsigned int v2297;
  uint64_t v2298;
  uint64_t v2299;
  unsigned int v2300;
  char v2301;
  int v2302;
  int v2303;
  unsigned int v2304;
  uint64_t v2305;
  uint64_t v2306;
  unsigned int v2307;
  char v2308;
  int v2309;
  int v2310;
  int v2311;
  unsigned int v2312;
  uint64_t v2313;
  uint64_t v2314;
  int v2315;
  int v2316;
  int v2317;
  unsigned int v2318;
  uint64_t v2319;
  uint64_t v2320;
  int v2321;
  int v2322;
  int v2323;
  unsigned int v2324;
  uint64_t v2325;
  uint64_t v2326;
  int v2327;
  int v2328;
  int v2329;
  unsigned int v2330;
  uint64_t v2331;
  uint64_t v2332;
  int v2333;
  int v2334;
  int v2335;
  unsigned int v2336;
  uint64_t v2337;
  uint64_t v2338;
  int v2339;
  int v2340;
  int v2341;
  unsigned int v2342;
  uint64_t v2343;
  uint64_t v2344;
  int v2345;
  int v2346;
  int v2347;
  unsigned int v2348;
  uint64_t v2349;
  uint64_t v2350;
  int v2351;
  int v2352;
  int v2353;
  unsigned int v2354;
  uint64_t v2355;
  uint64_t v2356;
  int v2357;
  int v2358;
  int v2359;
  unsigned int v2360;
  uint64_t v2361;
  uint64_t v2362;
  int v2363;
  int v2364;
  unsigned int v2365;
  uint64_t v2366;
  uint64_t v2367;
  int v2368;
  int v2369;
  unsigned int v2370;
  uint64_t v2371;
  uint64_t v2372;
  int v2373;
  int v2374;
  unsigned int v2375;
  uint64_t v2376;
  uint64_t v2377;
  int v2378;
  int v2379;
  unsigned int v2380;
  uint64_t v2381;
  uint64_t v2382;
  unsigned int v2383;
  char v2384;
  int v2385;
  int v2386;
  int v2387;
  unsigned int v2388;
  uint64_t v2389;
  uint64_t v2390;
  unsigned int v2391;
  char v2392;
  int v2393;
  unsigned int v2394;
  uint64_t v2395;
  uint64_t v2396;
  unsigned int v2397;
  char v2398;
  int v2399;
  int v2400;
  unsigned int v2401;
  uint64_t v2402;
  uint64_t v2403;
  unsigned int v2404;
  char v2405;
  int v2406;
  int v2407;
  unsigned int v2408;
  uint64_t v2409;
  uint64_t v2410;
  unsigned int v2411;
  char v2412;
  int v2413;
  int v2414;
  unsigned int v2415;
  uint64_t v2416;
  uint64_t v2417;
  unsigned int v2418;
  char v2419;
  int v2420;
  int v2421;
  int v2422;
  unsigned int v2423;
  uint64_t v2424;
  uint64_t v2425;
  unsigned int v2426;
  char v2427;
  unsigned int v2428;
  int v2429;
  unsigned int v2430;
  uint64_t v2431;
  uint64_t v2432;
  unsigned int v2433;
  char v2434;
  int v2435;
  int v2436;
  unsigned int v2437;
  uint64_t v2438;
  uint64_t v2439;
  int v2440;
  int v2441;
  unsigned int v2442;
  uint64_t v2443;
  uint64_t v2444;
  unsigned int v2445;
  char v2446;
  int v2447;
  int v2448;
  unsigned int v2449;
  uint64_t v2450;
  uint64_t v2451;
  unsigned int v2452;
  char v2453;
  int v2454;
  int v2455;
  unsigned int v2456;
  uint64_t v2457;
  uint64_t v2458;
  unsigned int v2459;
  char v2460;
  int v2461;
  char v2462;
  int v2463;
  unsigned int v2464;
  uint64_t v2465;
  uint64_t v2466;
  unsigned int v2467;
  char v2468;
  int v2469;
  unsigned int v2470;
  int v2471;
  unsigned int v2472;
  uint64_t v2473;
  uint64_t v2474;
  unsigned int v2475;
  char v2476;
  int v2477;
  int v2478;
  unsigned int v2479;
  uint64_t v2480;
  uint64_t v2481;
  unsigned int v2482;
  char v2483;
  int v2484;
  int v2485;
  int v2486;
  unsigned int v2487;
  uint64_t v2488;
  uint64_t v2489;
  unsigned int v2490;
  char v2491;
  int v2492;
  int v2493;
  unsigned int v2494;
  uint64_t v2495;
  uint64_t v2496;
  unsigned int v2497;
  char v2498;
  int v2499;
  unint64_t v2500;
  int v2501;
  unint64_t v2502;
  unint64_t v2503;
  unint64_t v2504;
  unint64_t v2505;
  unint64_t v2506;
  unint64_t v2507;
  unsigned int v2508;
  uint64_t v2509;
  uint64_t v2510;
  int v2511;
  int v2512;
  int v2513;
  unsigned int v2514;
  uint64_t v2515;
  uint64_t v2516;
  unsigned int v2517;
  char v2518;
  int v2519;
  unsigned int v2520;
  int v2521;
  unsigned int v2522;
  uint64_t v2523;
  uint64_t v2524;
  unsigned int v2525;
  char v2526;
  int v2527;
  int v2528;
  unsigned int v2529;
  uint64_t v2530;
  uint64_t v2531;
  unsigned int v2532;
  char v2533;
  int v2534;
  int v2535;
  int v2536;
  unsigned int v2537;
  uint64_t v2538;
  uint64_t v2539;
  unsigned int v2540;
  char v2541;
  uint64_t v2542;
  int v2543;
  int v2544;
  unsigned int *v2545;
  char v2546;
  uint64_t v2547;
  int v2548;
  unsigned int v2549;
  int v2550;
  unsigned int v2551;
  uint64_t v2552;
  uint64_t v2553;
  int v2554;
  char v2555;
  int v2556;
  int v2557;
  unsigned int v2558;
  uint64_t v2559;
  uint64_t v2560;
  unsigned int v2561;
  char v2562;
  int v2563;
  int v2564;
  int v2565;
  unsigned int v2566;
  uint64_t v2567;
  uint64_t v2568;
  unsigned int v2569;
  char v2570;
  int v2571;
  int v2572;
  int v2573;
  unsigned int v2574;
  uint64_t v2575;
  uint64_t v2576;
  unsigned int v2577;
  char v2578;
  int v2579;
  int v2580;
  int v2581;
  unsigned int v2582;
  uint64_t v2583;
  uint64_t v2584;
  unsigned int v2585;
  char v2586;
  int v2587;
  int v2588;
  int v2589;
  unsigned int v2590;
  uint64_t v2591;
  uint64_t v2592;
  unsigned int v2593;
  char v2594;
  int v2595;
  int v2596;
  int v2597;
  unsigned int v2598;
  uint64_t v2599;
  uint64_t v2600;
  unsigned int v2601;
  char v2602;
  int v2603;
  int v2604;
  int v2605;
  int v2606;
  unsigned int v2607;
  uint64_t v2608;
  uint64_t v2609;
  unsigned int v2610;
  char v2611;
  int v2612;
  unsigned int v2613;
  int v2614;
  int v2615;
  unsigned int v2616;
  uint64_t v2617;
  uint64_t v2618;
  unsigned int v2619;
  char v2620;
  int v2621;
  int v2622;
  int v2623;
  unsigned int v2624;
  uint64_t v2625;
  uint64_t v2626;
  unsigned int v2627;
  char v2628;
  int v2629;
  int v2630;
  int v2631;
  unsigned int v2632;
  uint64_t v2633;
  uint64_t v2634;
  unsigned int v2635;
  char v2636;
  int v2637;
  int v2638;
  int v2639;
  unsigned int v2640;
  uint64_t v2641;
  uint64_t v2642;
  unsigned int v2643;
  char v2644;
  int v2645;
  int v2646;
  int v2647;
  unsigned int v2648;
  uint64_t v2649;
  uint64_t v2650;
  unsigned int v2651;
  char v2652;
  int v2653;
  int v2654;
  int v2655;
  unsigned int v2656;
  uint64_t v2657;
  uint64_t v2658;
  unsigned int v2659;
  char v2660;
  int v2661;
  int v2662;
  int v2663;
  unsigned int v2664;
  uint64_t v2665;
  uint64_t v2666;
  unsigned int v2667;
  char v2668;
  int v2669;
  int v2670;
  int v2671;
  unsigned int v2672;
  uint64_t v2673;
  unsigned int v2674;
  uint64_t v2675;
  char v2676;
  unsigned int *v2677;
  int v2678;
  char v2679;
  int v2680;
  uint64_t v2681;
  char v2682;
  unsigned int v2683;
  int v2684;
  unsigned int v2685;
  uint64_t v2686;
  uint64_t v2687;
  int v2688;
  char v2689;
  int v2690;
  unsigned int v2691;
  uint64_t v2692;
  uint64_t v2693;
  unsigned int v2694;
  char v2695;
  int v2696;
  int v2697;
  unsigned int v2698;
  uint64_t v2699;
  uint64_t v2700;
  unsigned int v2701;
  char v2702;
  int v2703;
  int v2704;
  unsigned int v2705;
  uint64_t v2706;
  uint64_t v2707;
  unsigned int v2708;
  char v2709;
  int v2710;
  int v2711;
  unsigned int v2712;
  uint64_t v2713;
  uint64_t v2714;
  unsigned int v2715;
  char v2716;
  int v2717;
  int v2718;
  unsigned int v2719;
  uint64_t v2720;
  uint64_t v2721;
  unsigned int v2722;
  char v2723;
  int v2724;
  int v2725;
  unsigned int v2726;
  uint64_t v2727;
  uint64_t v2728;
  unsigned int v2729;
  char v2730;
  int v2731;
  int v2732;
  int v2733;
  unsigned int v2734;
  uint64_t v2735;
  uint64_t v2736;
  unsigned int v2737;
  char v2738;
  unsigned int v2739;
  int v2740;
  int v2741;
  unsigned int v2742;
  uint64_t v2743;
  uint64_t v2744;
  unsigned int v2745;
  char v2746;
  int v2747;
  int v2748;
  unsigned int v2749;
  uint64_t v2750;
  uint64_t v2751;
  unsigned int v2752;
  char v2753;
  int v2754;
  int v2755;
  unsigned int v2756;
  uint64_t v2757;
  uint64_t v2758;
  unsigned int v2759;
  char v2760;
  int v2761;
  int v2762;
  unsigned int v2763;
  uint64_t v2764;
  uint64_t v2765;
  unsigned int v2766;
  char v2767;
  int v2768;
  int v2769;
  unsigned int v2770;
  uint64_t v2771;
  uint64_t v2772;
  unsigned int v2773;
  char v2774;
  int v2775;
  int v2776;
  unsigned int v2777;
  uint64_t v2778;
  uint64_t v2779;
  unsigned int v2780;
  char v2781;
  int v2782;
  int v2783;
  unsigned int v2784;
  uint64_t v2785;
  uint64_t v2786;
  unsigned int v2787;
  char v2788;
  int v2789;
  int v2790;
  int v2791;
  int v2792;
  unsigned int v2793;
  uint64_t v2794;
  int v2795;
  unsigned int v2796;
  uint64_t v2797;
  uint64_t v2798;
  unsigned int v2799;
  char v2800;
  uint64_t v2801;
  int v2802;
  int v2803;
  int v2804;
  int v2805;
  int v2806;
  unsigned int v2807;
  uint64_t v2808;
  uint64_t v2809;
  unsigned int v2810;
  char v2811;
  int v2812;
  unsigned int v2813;
  uint64_t v2814;
  uint64_t v2815;
  unsigned int v2816;
  char v2817;
  int v2818;
  int v2819;
  unsigned int v2820;
  uint64_t v2821;
  uint64_t v2822;
  unsigned int v2823;
  int v2824;
  char v2825;
  unint64_t v2826;
  int v2827;
  unint64_t v2828;
  unint64_t v2829;
  unint64_t v2830;
  unint64_t v2831;
  unint64_t v2832;
  unsigned int v2833;
  unsigned int v2834;
  uint64_t v2835;
  uint64_t v2836;
  unsigned int v2837;
  int v2838;
  int v2839;
  unsigned int v2840;
  uint64_t v2841;
  uint64_t v2842;
  unsigned int v2843;
  char v2844;
  int v2845;
  unsigned int v2846;
  int v2847;
  unsigned int v2848;
  uint64_t v2849;
  uint64_t v2850;
  unsigned int v2851;
  char v2852;
  int v2853;
  unsigned int v2854;
  int v2855;
  unsigned int v2856;
  uint64_t v2857;
  uint64_t v2858;
  unsigned int v2859;
  char v2860;
  int v2861;
  unsigned int v2862;
  int v2863;
  unsigned int v2864;
  uint64_t v2865;
  uint64_t v2866;
  unsigned int v2867;
  char v2868;
  int v2869;
  unsigned int v2870;
  int v2871;
  unsigned int v2872;
  uint64_t v2873;
  uint64_t v2874;
  unsigned int v2875;
  char v2876;
  unsigned __int8 v2877;
  int v2878;
  unsigned int v2879;
  int v2880;
  unsigned int v2881;
  uint64_t v2882;
  uint64_t v2883;
  unsigned int v2884;
  char v2885;
  int v2886;
  unsigned int v2887;
  int v2888;
  unsigned int v2889;
  uint64_t v2890;
  uint64_t v2891;
  unsigned int v2892;
  char v2893;
  int v2894;
  unsigned int v2895;
  int v2896;
  unsigned int v2897;
  uint64_t v2898;
  uint64_t v2899;
  unsigned int v2900;
  char v2901;
  int v2902;
  unsigned int v2903;
  int v2904;
  unsigned int v2905;
  uint64_t v2906;
  uint64_t v2907;
  unsigned int v2908;
  char v2909;
  int v2910;
  unsigned int v2911;
  int v2912;
  unsigned int v2913;
  uint64_t v2914;
  uint64_t v2915;
  unsigned int v2916;
  char v2917;
  int v2918;
  unsigned int v2919;
  int v2920;
  int v2921;
  unsigned int v2922;
  uint64_t v2923;
  uint64_t v2924;
  unsigned int v2925;
  char v2926;
  int v2927;
  int v2928;
  int v2929;
  unsigned int v2930;
  uint64_t v2931;
  uint64_t v2932;
  unsigned int v2933;
  char v2934;
  unsigned int v2935;
  int v2936;
  unsigned int v2937;
  uint64_t v2938;
  uint64_t v2939;
  unsigned int v2940;
  char v2941;
  int v2942;
  int v2943;
  int v2944;
  unsigned int v2945;
  uint64_t v2946;
  uint64_t v2947;
  unsigned int v2948;
  char v2949;
  int v2950;
  uint64_t v2951;
  char v2952;
  char v2953;
  uint64_t v2954;
  int v2955;
  unsigned int v2956;
  int v2957;
  unsigned int v2958;
  uint64_t v2959;
  uint64_t v2960;
  int v2961;
  char v2962;
  int v2963;
  int v2964;
  unsigned int v2965;
  uint64_t v2966;
  uint64_t v2967;
  unsigned int v2968;
  char v2969;
  int v2970;
  int v2971;
  int v2972;
  unsigned int v2973;
  uint64_t v2974;
  uint64_t v2975;
  unsigned int v2976;
  char v2977;
  int v2978;
  int v2979;
  int v2980;
  unsigned int v2981;
  uint64_t v2982;
  uint64_t v2983;
  unsigned int v2984;
  char v2985;
  int v2986;
  int v2987;
  int v2988;
  unsigned int v2989;
  uint64_t v2990;
  uint64_t v2991;
  unsigned int v2992;
  char v2993;
  int v2994;
  int v2995;
  int v2996;
  unsigned int v2997;
  uint64_t v2998;
  unsigned int v2999;
  uint64_t v3000;
  char v3001;
  int v3002;
  unsigned int v3003;
  int v3004;
  unsigned int v3005;
  uint64_t v3006;
  uint64_t v3007;
  int v3008;
  char v3009;
  int v3010;
  int v3011;
  unsigned int v3012;
  uint64_t v3013;
  uint64_t v3014;
  unsigned int v3015;
  char v3016;
  int v3017;
  int v3018;
  int v3019;
  unsigned int v3020;
  uint64_t v3021;
  uint64_t v3022;
  unsigned int v3023;
  char v3024;
  int v3025;
  int v3026;
  int v3027;
  unsigned int v3028;
  uint64_t v3029;
  uint64_t v3030;
  unsigned int v3031;
  char v3032;
  int v3033;
  int v3034;
  int v3035;
  unsigned int v3036;
  uint64_t v3037;
  uint64_t v3038;
  unsigned int v3039;
  char v3040;
  int v3041;
  int v3042;
  int v3043;
  int v3044;
  unsigned int v3045;
  uint64_t v3046;
  uint64_t v3047;
  unsigned int v3048;
  char v3049;
  int v3050;
  unsigned int v3051;
  int v3052;
  unsigned int v3053;
  uint64_t v3054;
  uint64_t v3055;
  unsigned int v3056;
  char v3057;
  int v3058;
  int v3059;
  int v3060;
  unsigned int v3061;
  uint64_t v3062;
  uint64_t v3063;
  unsigned int v3064;
  char v3065;
  int v3066;
  int v3067;
  int v3068;
  unsigned int v3069;
  uint64_t v3070;
  uint64_t v3071;
  unsigned int v3072;
  char v3073;
  int v3074;
  int v3075;
  int v3076;
  unsigned int v3077;
  uint64_t v3078;
  uint64_t v3079;
  unsigned int v3080;
  char v3081;
  int v3082;
  int v3083;
  int v3084;
  unsigned int v3085;
  uint64_t v3086;
  uint64_t v3087;
  unsigned int v3088;
  char v3089;
  int v3090;
  int v3091;
  int v3092;
  unsigned int v3093;
  uint64_t v3094;
  uint64_t v3095;
  unsigned int v3096;
  char v3097;
  uint64_t v3098;
  uint64_t v3099;
  uint64_t v3100;
  uint64_t v3101;
  uint64_t __n;
  int v3103;
  unsigned __int8 v3104;
  void *v3106;
  uint64_t v3107;
  _DWORD *v3108;
  _BYTE *v3110;
  uint64_t v3111;
  void *v3112;
  int *v3113;
  _DWORD *__s1;
  void *__s1a;
  int v3116;
  int v3117;
  int v3118;
  int v3119;
  int v3120;
  int v3121;
  int v3122;
  __int128 v3123;
  __int128 v3124;
  __int128 v3125;
  uint64_t v3126;
  uint64_t v3127;

  v5 = result;
  v3127 = *MEMORY[0x24BDAC8D0];
  v6 = (_BYTE *)(result + 389925);
  v7 = result + 263720;
  v8 = (unsigned __int8 *)(result + 239532);
  v9 = (unsigned __int8 *)(result + 239040);
  v10 = *(int **)(result + 263720);
  v11 = *(unsigned __int8 *)(result + 389925);
  if (*(_BYTE *)(result + 389925))
  {
    v11 = v10[10];
    if (v11)
      v11 = v10[13] == 0;
  }
  *(_DWORD *)(result + 239080) = v11;
  if (*((_BYTE *)v10 + 58))
  {
    v12 = *(_DWORD *)(a4 + 8);
    goto LABEL_6;
  }
  if (*(_DWORD *)(result + 239528) && (!*(_BYTE *)(result + 239542) || !*v9))
  {
    v50 = (unsigned int *)(result + 636712);
    v51 = *(_DWORD *)(a4 + 8);
    v52 = v51 + 7;
    if (v51 >= 0)
      v52 = *(_DWORD *)(a4 + 8);
    v53 = v52 & 0xFFFFFFF8;
    v54 = *(_QWORD *)a4;
    v55 = (uint64_t)v52 >> 3;
    v56 = v51 - v53;
    if (v56)
    {
      v57 = 1 << (7 - v56);
      *(_BYTE *)(v54 + v55) &= ~(_BYTE)v57;
      v54 = *(_QWORD *)a4;
      v58 = *(_BYTE *)(*(_QWORD *)a4 + v55) | v57;
    }
    else
    {
      v58 = 0x80;
    }
    *(_BYTE *)(v54 + v55) = v58;
    *(_DWORD *)(a4 + 8) = v51 + 1;
    v130 = *v50;
    v131 = (*v50 >> 2) & 1;
    v132 = v51 + 8;
    if (v51 >= -1)
      v132 = v51 + 1;
    v133 = v132 & 0xFFFFFFF8;
    v134 = *(_QWORD *)a4;
    v135 = (uint64_t)v132 >> 3;
    v136 = v51 + 1 - v133;
    if (v136)
    {
      v137 = 7 - v136;
      *(_BYTE *)(v134 + v135) &= ~(1 << v137);
      v134 = *(_QWORD *)a4;
      v138 = *(unsigned __int8 *)(*(_QWORD *)a4 + v135) | (v131 << v137);
    }
    else
    {
      LOBYTE(v138) = ((*v50 & 4) != 0) << 7;
    }
    *(_BYTE *)(v134 + v135) = v138;
    *(_DWORD *)(a4 + 8) = v51 + 2;
    v139 = v51 + 9;
    if (v51 >= -2)
      v139 = v51 + 2;
    v140 = v139 & 0xFFFFFFF8;
    v141 = *(_QWORD *)a4;
    v142 = (uint64_t)v139 >> 3;
    v143 = v51 + 2 - v140;
    if (v143)
    {
      v144 = 7 - v143;
      *(_BYTE *)(v141 + v142) &= ~(1 << v144);
      v141 = *(_QWORD *)a4;
      v145 = *(unsigned __int8 *)(*(_QWORD *)a4 + v142) | (((v130 >> 1) & 1) << v144);
    }
    else
    {
      LOBYTE(v145) = ((v130 & 2) != 0) << 7;
    }
    *(_BYTE *)(v141 + v142) = v145;
    *(_DWORD *)(a4 + 8) = v51 + 3;
    v146 = v130 & 1;
    v147 = v51 + 10;
    if (v51 >= -3)
      v147 = v51 + 3;
    v148 = v147 & 0xFFFFFFF8;
    v149 = *(_QWORD *)a4;
    v150 = (uint64_t)v147 >> 3;
    v151 = v51 + 3 - v148;
    if (v151)
    {
      v152 = 7 - v151;
      *(_BYTE *)(v149 + v150) &= ~(1 << v152);
      *(_BYTE *)(*(_QWORD *)a4 + v150) |= v146 << v152;
      v153 = v51 + 4;
      *(_DWORD *)(a4 + 8) = v153;
      if (!*((_BYTE *)v10 + 264))
        goto LABEL_128;
    }
    else
    {
      *(_BYTE *)(v149 + v150) = (_BYTE)v146 << 7;
      v153 = v51 + 4;
      *(_DWORD *)(a4 + 8) = v153;
      if (!*((_BYTE *)v10 + 264))
      {
LABEL_128:
        if (*((_BYTE *)v10 + 16))
        {
          v154 = v10[5];
          if (v154 >= 1)
          {
            v155 = *(_DWORD *)(v5 + 4 * (int)*v50 + 264404);
            v156 = 7 - v153;
            v157 = v154 + 1;
            do
            {
              v160 = (v155 >> (v157 - 2)) & 1;
              v161 = v153 + 7;
              if (v153 >= 0)
                v161 = v153;
              v162 = v161 & 0xFFFFFFF8;
              v159 = *(_QWORD *)a4;
              v163 = (uint64_t)v161 >> 3;
              if (v162 == v153)
              {
                LOBYTE(v160) = (_BYTE)v160 << 7;
              }
              else
              {
                v158 = v156 + v162;
                result = *(unsigned __int8 *)(v159 + v163);
                *(_BYTE *)(v159 + v163) = result & ~(1 << v158);
                v159 = *(_QWORD *)a4;
                v160 = *(unsigned __int8 *)(*(_QWORD *)a4 + v163) | (v160 << v158);
              }
              *(_BYTE *)(v159 + v163) = v160;
              *(_DWORD *)(a4 + 8) = ++v153;
              --v156;
              --v157;
            }
            while (v157 > 1);
          }
        }
        return result;
      }
    }
    if (!v10[64])
    {
      v164 = *(_DWORD *)(*(_QWORD *)v7 + 280);
      if (v164 >= 1)
      {
        v165 = *(_DWORD *)(result + 239256);
        v166 = 7 - v153;
        v167 = v164 + 1;
        do
        {
          v171 = (v165 >> (v167 - 2)) & 1;
          v172 = v153 + 7;
          if (v153 >= 0)
            v172 = v153;
          v173 = v172 & 0xFFFFFFF8;
          v170 = *(_QWORD *)a4;
          v174 = (uint64_t)v172 >> 3;
          if (v173 == v153)
          {
            LOBYTE(v171) = (_BYTE)v171 << 7;
          }
          else
          {
            v168 = v166 + v173;
            v169 = *(unsigned __int8 *)(v170 + v174);
            result = v169 & ~(1 << v168);
            *(_BYTE *)(v170 + v174) = v169 & ~(1 << v168);
            v170 = *(_QWORD *)a4;
            v171 = *(unsigned __int8 *)(*(_QWORD *)a4 + v174) | (v171 << v168);
          }
          *(_BYTE *)(v170 + v174) = v171;
          *(_DWORD *)(a4 + 8) = ++v153;
          --v166;
          --v167;
        }
        while (v167 > 1);
      }
    }
    goto LABEL_128;
  }
  v22 = *(_DWORD *)(a4 + 8);
  if (v22 >= 0)
    v23 = *(_DWORD *)(a4 + 8);
  else
    v23 = v22 + 7;
  v24 = v23 & 0xFFFFFFF8;
  v25 = *(_QWORD *)a4;
  v26 = (uint64_t)v23 >> 3;
  v27 = v22 - v24;
  if (v27)
    v27 = *(unsigned __int8 *)(v25 + v26) & ~(1 << (7 - v27));
  *(_BYTE *)(v25 + v26) = v27;
  *(_DWORD *)(a4 + 8) = v22 + 1;
  v28 = *v9;
  v29 = v22 + 8;
  if (v22 >= -1)
    v29 = v22 + 1;
  v30 = v29 & 0xFFFFFFF8;
  v31 = *(_QWORD *)a4;
  v32 = (uint64_t)v29 >> 3;
  v33 = v22 + 1 - v30;
  if (v33)
  {
    v34 = 7 - v33;
    *(_BYTE *)(v31 + v32) &= ~(1 << v34);
    v31 = *(_QWORD *)a4;
    v35 = *(unsigned __int8 *)(*(_QWORD *)a4 + v32) | (((v28 >> 1) & 1) << v34);
  }
  else
  {
    LOBYTE(v35) = ((v28 & 2) != 0) << 7;
  }
  *(_BYTE *)(v31 + v32) = v35;
  *(_DWORD *)(a4 + 8) = v22 + 2;
  v71 = v28 & 1;
  v72 = v22 + 9;
  if (v22 >= -2)
    v72 = v22 + 2;
  v73 = v72 & 0xFFFFFFF8;
  v74 = *(_QWORD *)a4;
  v75 = (uint64_t)v72 >> 3;
  v76 = v22 + 2 - v73;
  if (v76)
  {
    v77 = 7 - v76;
    *(_BYTE *)(v74 + v75) &= ~(1 << v77);
    v74 = *(_QWORD *)a4;
    v71 = *(unsigned __int8 *)(*(_QWORD *)a4 + v75) | (v71 << v77);
  }
  else
  {
    LOBYTE(v71) = (_BYTE)v71 << 7;
  }
  *(_BYTE *)(v74 + v75) = v71;
  *(_DWORD *)(a4 + 8) = v22 + 3;
  v78 = *(_DWORD *)(result + 239520);
  v79 = v22 + 10;
  if (v22 >= -3)
    v79 = v22 + 3;
  v80 = v79 & 0xFFFFFFF8;
  v81 = *(_QWORD *)a4;
  v82 = (uint64_t)v79 >> 3;
  v83 = v22 + 3 - v80;
  if (!v83)
  {
    *(_BYTE *)(v81 + v82) = (_BYTE)v78 << 7;
    v12 = v22 + 4;
    *(_DWORD *)(a4 + 8) = v22 + 4;
    if (*(_DWORD *)(result + 239520))
      goto LABEL_71;
LABEL_82:
    v95 = *(_DWORD *)(result + 239524);
    v96 = v12 + 7;
    if (v12 >= 0)
      v96 = v12;
    v97 = v96 & 0xFFFFFFF8;
    v98 = *(_QWORD *)a4;
    v99 = (uint64_t)v96 >> 3;
    v100 = v12 - v97;
    if (v100)
    {
      v101 = 7 - v100;
      *(_BYTE *)(v98 + v99) &= ~(1 << v101);
      *(_BYTE *)(*(_QWORD *)a4 + v99) |= v95 << v101;
    }
    else
    {
      *(_BYTE *)(v98 + v99) = (_BYTE)v95 << 7;
    }
    v12 = v22 + 5;
    *(_DWORD *)(a4 + 8) = v22 + 5;
    goto LABEL_147;
  }
  v84 = 7 - v83;
  *(_BYTE *)(v81 + v82) &= ~(1 << v84);
  *(_BYTE *)(*(_QWORD *)a4 + v82) |= v78 << v84;
  v12 = v22 + 4;
  *(_DWORD *)(a4 + 8) = v22 + 4;
  if (!*(_DWORD *)(result + 239520))
    goto LABEL_82;
LABEL_71:
  if (*((_BYTE *)v10 + 264))
  {
    if (!v10[64])
    {
      v85 = *(_DWORD *)(*(_QWORD *)v7 + 280);
      if (v85 >= 1)
      {
        v86 = *(_DWORD *)(result + 239256);
        v87 = 7 - v12;
        v88 = v85 + 1;
        do
        {
          v91 = (v86 >> (v88 - 2)) & 1;
          v92 = v12 + 7;
          if (v12 >= 0)
            v92 = v12;
          v93 = v92 & 0xFFFFFFF8;
          v90 = *(_QWORD *)a4;
          v94 = (uint64_t)v92 >> 3;
          if (v93 == v12)
          {
            LOBYTE(v91) = (_BYTE)v91 << 7;
          }
          else
          {
            v89 = v87 + v93;
            *(_BYTE *)(v90 + v94) &= ~(1 << v89);
            v90 = *(_QWORD *)a4;
            v91 = *(unsigned __int8 *)(*(_QWORD *)a4 + v94) | (v91 << v89);
          }
          *(_BYTE *)(v90 + v94) = v91;
          *(_DWORD *)(a4 + 8) = ++v12;
          --v87;
          --v88;
        }
        while (v88 > 1);
      }
    }
  }
LABEL_147:
  if (*v9 != 3 && (*v9 || !*(_DWORD *)(result + 239520)))
  {
    v175 = *(unsigned __int8 *)(result + 239542);
    v176 = v12 + 7;
    if (v12 >= 0)
      v176 = v12;
    v177 = v176 & 0xFFFFFFF8;
    v178 = *(_QWORD *)a4;
    v179 = (uint64_t)v176 >> 3;
    v180 = v12 - v177;
    if (v180)
    {
      v181 = 7 - v180;
      *(_BYTE *)(v178 + v179) &= ~(1 << v181);
      v178 = *(_QWORD *)a4;
      v175 = *(unsigned __int8 *)(*(_QWORD *)a4 + v179) | (v175 << v181);
    }
    else
    {
      LOBYTE(v175) = (_BYTE)v175 << 7;
    }
    *(_BYTE *)(v178 + v179) = v175;
    *(_DWORD *)(a4 + 8) = ++v12;
  }
LABEL_6:
  v13 = *v8;
  v15 = (int *)(a4 + 8);
  v14 = *(_QWORD *)a4;
  v16 = v12 + 7;
  if (v12 >= 0)
    v16 = v12;
  v17 = v16 & 0xFFFFFFF8;
  v18 = (uint64_t)v16 >> 3;
  v19 = v12 - v17;
  if (v19)
  {
    v20 = 7 - v19;
    *(_BYTE *)(v14 + v18) &= ~(1 << v20);
    *(_BYTE *)(*(_QWORD *)a4 + v18) |= v13 << v20;
    v21 = v12 + 1;
    *v15 = v12 + 1;
    if (*((_BYTE *)v10 + 56) != 2)
      goto LABEL_30;
  }
  else
  {
    *(_BYTE *)(v14 + v18) = (_BYTE)v13 << 7;
    v21 = v12 + 1;
    *v15 = v12 + 1;
    if (*((_BYTE *)v10 + 56) != 2)
      goto LABEL_30;
  }
  v36 = *(unsigned __int8 *)(result + 239535);
  v37 = v21 + 7;
  if (v21 >= 0)
    v37 = v21;
  v38 = v37 & 0xFFFFFFF8;
  v39 = *(_QWORD *)a4;
  v40 = (uint64_t)v37 >> 3;
  v41 = v21 - v38;
  if (v41)
  {
    v42 = 7 - v41;
    *(_BYTE *)(v39 + v40) &= ~(1 << v42);
    *(_BYTE *)(*(_QWORD *)a4 + v40) |= v36 << v42;
  }
  else
  {
    *(_BYTE *)(v39 + v40) = (_BYTE)v36 << 7;
  }
  v21 = v12 + 2;
  *v15 = v12 + 2;
LABEL_30:
  if (*(_BYTE *)(result + 239535) && *((_BYTE *)v10 + 59) == 2)
  {
    v43 = *(unsigned __int8 *)(result + 239534);
    v44 = v21 + 7;
    if (v21 >= 0)
      v44 = v21;
    v45 = v44 & 0xFFFFFFF8;
    v46 = *(_QWORD *)a4;
    v47 = (uint64_t)v44 >> 3;
    v48 = v21 - v45;
    if (v48)
    {
      v49 = 7 - v48;
      *(_BYTE *)(v46 + v47) &= ~(1 << v49);
      v46 = *(_QWORD *)a4;
      v43 = *(unsigned __int8 *)(*(_QWORD *)a4 + v47) | (v43 << v49);
    }
    else
    {
      LOBYTE(v43) = (_BYTE)v43 << 7;
    }
    *(_BYTE *)(v46 + v47) = v43;
    *v15 = ++v21;
  }
  v59 = (_DWORD *)(result + 239044);
  v3110 = (_BYTE *)(result + 239040);
  v3113 = v10;
  __s1 = (_DWORD *)(result + 239044);
  if (*((_BYTE *)v10 + 58))
  {
    v3103 = 0;
    goto LABEL_168;
  }
  if (*((_BYTE *)v10 + 16))
  {
    v60 = v10[5];
    if (v60 >= 1)
    {
      v61 = *(_DWORD *)(result + 264400);
      v62 = 7 - v21;
      v63 = v60 + 1;
      do
      {
        v66 = (v61 >> (v63 - 2)) & 1;
        v67 = v21 + 7;
        if (v21 >= 0)
          v67 = v21;
        v68 = v67 & 0xFFFFFFF8;
        v65 = *(_QWORD *)a4;
        v69 = (uint64_t)v67 >> 3;
        if (v68 == v21)
        {
          LOBYTE(v66) = (_BYTE)v66 << 7;
        }
        else
        {
          v64 = v62 + v68;
          *(_BYTE *)(v65 + v69) &= ~(1 << v64);
          v65 = *(_QWORD *)a4;
          v66 = *(unsigned __int8 *)(*(_QWORD *)a4 + v69) | (v66 << v64);
        }
        *(_BYTE *)(v65 + v69) = v66;
        *v15 = ++v21;
        --v62;
        --v63;
      }
      while (v63 > 1);
    }
  }
  if (*(_DWORD *)(result + 239112) > v10[2] || *(_DWORD *)(result + 239116) > v10[3])
  {
    aom_internal_error(*(_QWORD *)(result + 239088), 5, "Frame dimensions are larger than the maximum values");
    v59 = __s1;
  }
  if (*v9 == 3)
  {
    v70 = 1;
    if (!v10[10])
      goto LABEL_104;
LABEL_96:
    v110 = v10[11];
    if ((v110 & 0x80000000) == 0)
    {
      v111 = *((_DWORD *)v9 + 1);
      v112 = *v15;
      v113 = 7 - *v15;
      do
      {
        v116 = (v111 >> v110) & 1;
        v118 = v112 + 7;
        if (v112 >= 0)
          v118 = v112;
        v119 = v118 & 0xFFFFFFF8;
        v115 = *(_QWORD *)a4;
        v120 = (uint64_t)v118 >> 3;
        if (v119 == v112)
        {
          LOBYTE(v116) = (_BYTE)v116 << 7;
        }
        else
        {
          v114 = v113 + v119;
          *(_BYTE *)(v115 + v120) &= ~(1 << v114);
          v115 = *(_QWORD *)a4;
          v116 = *(unsigned __int8 *)(*(_QWORD *)a4 + v120) | (v116 << v114);
        }
        *(_BYTE *)(v115 + v120) = v116;
        *v15 = ++v112;
        LOBYTE(v113) = v113 - 1;
        v117 = v110-- + 1;
      }
      while (v117 > 1);
    }
    goto LABEL_104;
  }
  v70 = *((_DWORD *)v9 + 18) != v10[2] || *((_DWORD *)v9 + 19) != v10[3];
  v102 = *(_DWORD *)(a4 + 8);
  v103 = v102 + 7;
  if (v102 >= 0)
    v103 = *(_DWORD *)(a4 + 8);
  v104 = v103 & 0xFFFFFFF8;
  v105 = *(_QWORD *)a4;
  v106 = (uint64_t)v103 >> 3;
  v107 = v102 - v104;
  if (v107)
  {
    v108 = 7 - v107;
    *(_BYTE *)(v105 + v106) &= ~(1 << v108);
    *(_BYTE *)(*(_QWORD *)a4 + v106) |= v70 << v108;
    *v15 = v102 + 1;
    if (!v10[10])
      goto LABEL_104;
    goto LABEL_96;
  }
  if (v70)
    v109 = 0x80;
  else
    v109 = 0;
  *(_BYTE *)(v105 + v106) = v109;
  *v15 = v102 + 1;
  if (v10[10])
    goto LABEL_96;
LABEL_104:
  v3103 = v70;
  if (!v8[10] && (*v9 & 0xFD) != 0)
  {
    v121 = *((_DWORD *)v8 + 4);
    v122 = *(_DWORD *)(a4 + 8);
    v123 = v122 + 7;
    if (v122 >= 0)
      v123 = *(_DWORD *)(a4 + 8);
    v124 = v123 & 0xFFFFFFF8;
    v125 = *(_QWORD *)a4;
    v126 = (uint64_t)v123 >> 3;
    v127 = v122 - v124;
    if (v127)
    {
      v128 = 7 - v127;
      *(_BYTE *)(v125 + v126) &= ~(1 << v128);
      v125 = *(_QWORD *)a4;
      v129 = *(unsigned __int8 *)(*(_QWORD *)a4 + v126) | (((v121 >> 2) & 1) << v128);
    }
    else
    {
      LOBYTE(v129) = ((*((_DWORD *)v8 + 4) & 4) != 0) << 7;
    }
    *(_BYTE *)(v125 + v126) = v129;
    *(_DWORD *)(a4 + 8) = v122 + 1;
    v182 = v122 + 8;
    if (v122 >= -1)
      v182 = v122 + 1;
    v183 = v182 & 0xFFFFFFF8;
    v184 = *(_QWORD *)a4;
    v185 = (uint64_t)v182 >> 3;
    v186 = v122 + 1 - v183;
    if (v186)
    {
      v187 = 7 - v186;
      *(_BYTE *)(v184 + v185) &= ~(1 << v187);
      v184 = *(_QWORD *)a4;
      v188 = *(unsigned __int8 *)(*(_QWORD *)a4 + v185) | (((v121 >> 1) & 1) << v187);
    }
    else
    {
      LOBYTE(v188) = ((v121 & 2) != 0) << 7;
    }
    *(_BYTE *)(v184 + v185) = v188;
    *(_DWORD *)(a4 + 8) = v122 + 2;
    v189 = v121 & 1;
    v190 = v122 + 9;
    if (v122 >= -2)
      v190 = v122 + 2;
    v191 = v190 & 0xFFFFFFF8;
    v192 = *(_QWORD *)a4;
    v193 = (uint64_t)v190 >> 3;
    v194 = v122 + 2 - v191;
    if (v194)
    {
      v195 = 7 - v194;
      *(_BYTE *)(v192 + v193) &= ~(1 << v195);
      v192 = *(_QWORD *)a4;
      v189 = *(unsigned __int8 *)(*(_QWORD *)a4 + v193) | (v189 << v195);
    }
    else
    {
      LOBYTE(v189) = (_BYTE)v189 << 7;
    }
    *(_BYTE *)(v192 + v193) = v189;
    *v15 = v122 + 3;
  }
LABEL_168:
  v3111 = v5;
  v3107 = v5 + 239456;
  if (*((_BYTE *)v10 + 264))
  {
    v196 = *(unsigned __int8 *)(*(_QWORD *)v5 + 50964);
    v197 = *(_DWORD *)(a4 + 8);
    v198 = v197 + 7;
    if (v197 >= 0)
      v198 = *(_DWORD *)(a4 + 8);
    v199 = v198 & 0xFFFFFFF8;
    v200 = *(_QWORD *)a4;
    v201 = (uint64_t)v198 >> 3;
    v202 = v197 - v199;
    if (v202)
    {
      v203 = 7 - v202;
      *(_BYTE *)(v200 + v201) &= ~(1 << v203);
      v200 = *(_QWORD *)a4;
      v196 = *(unsigned __int8 *)(*(_QWORD *)a4 + v201) | (v196 << v203);
    }
    else
    {
      LOBYTE(v196) = (_BYTE)v196 << 7;
    }
    *(_BYTE *)(v200 + v201) = v196;
    *v15 = v197 + 1;
    if (*(_BYTE *)(*(_QWORD *)v5 + 50964) && (v10[28] & 0x80000000) == 0)
    {
      v204 = 0;
      do
      {
        if (v10[12 * v204 + 88])
        {
          v205 = v10[v204 + 29];
          if (!v205 || ((v205 >> *(_DWORD *)(v7 + 772)) & 1) != 0 && ((v205 >> (*(_BYTE *)(v7 + 776) + 8)) & 1) != 0)
          {
            v206 = (unsigned int *)(v3111 + 4 * v204 + 239124);
            v207 = *v206;
            v208 = v10[69];
            if (v208 >= 1)
            {
              v209 = *v15;
              v210 = 7 - *v15;
              v211 = v208 + 1;
              do
              {
                v214 = (v207 >> (v211 - 2)) & 1;
                v215 = v209 + 7;
                if (v209 >= 0)
                  v215 = v209;
                v216 = v215 & 0xFFFFFFF8;
                v213 = *(_QWORD *)a4;
                v217 = (uint64_t)v215 >> 3;
                if (v216 == v209)
                {
                  LOBYTE(v214) = (_BYTE)v214 << 7;
                }
                else
                {
                  v212 = v210 + v216;
                  *(_BYTE *)(v213 + v217) &= ~(1 << v212);
                  v213 = *(_QWORD *)a4;
                  v214 = *(unsigned __int8 *)(*(_QWORD *)a4 + v217) | (v214 << v212);
                }
                *(_BYTE *)(v213 + v217) = v214;
                *v15 = ++v209;
                LOBYTE(v210) = v210 - 1;
                --v211;
              }
              while (v211 > 1);
              v207 = *v206;
            }
            *v206 = v207 + 1;
            if (v207 == -1)
            {
              aom_internal_error(*(_QWORD *)(v59 + 11), 5, "buffer_removal_time overflowed");
              v10 = v3113;
              v59 = __s1;
            }
          }
        }
        v374 = v204++ < v10[28];
      }
      while (v374);
    }
  }
  v219 = v9;
  v218 = v3111;
  v220 = (int *)(v3111 + 263764);
  v221 = *v9;
  if (*v9)
  {
    v222 = v3107;
    if (v221 > 2)
    {
      if ((v221 & 0xFFFFFFFD) == 0)
        goto LABEL_242;
LABEL_243:
      if (*(_BYTE *)(v222 + 86) && v10[10])
      {
        v279 = v10[11];
        if ((v279 & 0x80000000) == 0)
        {
          v280 = *(_DWORD *)(*(_QWORD *)v222 + 4);
          v281 = v279 + 1;
          v282 = *v15;
          do
          {
            while (1)
            {
              v283 = (v280 >> (v281 - 1)) & 1;
              v284 = v282 + 7;
              if (v282 >= 0)
                v284 = v282;
              v285 = v284 & 0xFFFFFFF8;
              v286 = *(_QWORD *)a4;
              v287 = (uint64_t)v284 >> 3;
              v288 = v282 - v285;
              if (v288)
                break;
              *(_BYTE *)(v286 + v287) = (_BYTE)v283 << 7;
              *v15 = ++v282;
              v374 = v281-- > 1;
              if (!v374)
                goto LABEL_253;
            }
            v289 = 7 - v288;
            *(_BYTE *)(v286 + v287) &= ~(1 << v289);
            *(_BYTE *)(*(_QWORD *)a4 + v287) |= (_BYTE)v283 << v289;
            *v15 = ++v282;
            v374 = v281-- > 1;
          }
          while (v374);
LABEL_253:
          v290 = v10[11];
          if ((v290 & 0x80000000) == 0)
          {
            v291 = 0;
            v292 = *(_DWORD *)(*(_QWORD *)(v222 + 8) + 4);
            v293 = v282;
            do
            {
              v296 = (v292 >> (v290 + v291)) & 1;
              v297 = v293 + 7;
              if (v293 >= 0)
                v297 = v293;
              v298 = v297 & 0xFFFFFFF8;
              v295 = *(_QWORD *)a4;
              v299 = (uint64_t)v297 >> 3;
              if (v291 - v282 + v298)
              {
                v294 = v291 - v282 + v298 + 7;
                *(_BYTE *)(v295 + v299) &= ~(1 << v294);
                v295 = *(_QWORD *)a4;
                v296 = *(unsigned __int8 *)(*(_QWORD *)a4 + v299) | (v296 << v294);
              }
              else
              {
                LOBYTE(v296) = (_BYTE)v296 << 7;
              }
              *(_BYTE *)(v295 + v299) = v296;
              *v15 = ++v293;
              --v291;
            }
            while ((v290 + v291 + 2) > 1);
            v300 = v10[11];
            if ((v300 & 0x80000000) == 0)
            {
              v301 = 0;
              v302 = *(_DWORD *)(*(_QWORD *)(v222 + 16) + 4);
              v303 = v291 - v282;
              do
              {
                v306 = (v302 >> (v300 + v301)) & 1;
                v307 = v293 + 7;
                if (v293 >= 0)
                  v307 = v293;
                v308 = v307 & 0xFFFFFFF8;
                v305 = *(_QWORD *)a4;
                v309 = (uint64_t)v307 >> 3;
                if (v303 + v301 + v308)
                {
                  v304 = v303 + v301 + v308 + 7;
                  *(_BYTE *)(v305 + v309) &= ~(1 << v304);
                  v305 = *(_QWORD *)a4;
                  v306 = *(unsigned __int8 *)(*(_QWORD *)a4 + v309) | (v306 << v304);
                }
                else
                {
                  LOBYTE(v306) = (_BYTE)v306 << 7;
                }
                *(_BYTE *)(v305 + v309) = v306;
                *v15 = ++v293;
                --v301;
              }
              while ((v300 + v301 + 2) > 1);
              v310 = v10[11];
              if ((v310 & 0x80000000) == 0)
              {
                v311 = *(_DWORD *)(*(_QWORD *)(v222 + 24) + 4);
                v312 = v303 + v301 + 7;
                do
                {
                  v315 = (v311 >> v310) & 1;
                  v317 = v293 + 7;
                  if (v293 >= 0)
                    v317 = v293;
                  v318 = v317 & 0xFFFFFFF8;
                  v314 = *(_QWORD *)a4;
                  v319 = (uint64_t)v317 >> 3;
                  if (v318 == v293)
                  {
                    LOBYTE(v315) = (_BYTE)v315 << 7;
                  }
                  else
                  {
                    v313 = v312 + v318;
                    *(_BYTE *)(v314 + v319) &= ~(1 << v313);
                    v314 = *(_QWORD *)a4;
                    v315 = *(unsigned __int8 *)(*(_QWORD *)a4 + v319) | (v315 << v313);
                  }
                  *(_BYTE *)(v314 + v319) = v315;
                  *v15 = ++v293;
                  --v312;
                  v316 = v310-- + 1;
                }
                while (v316 > 1);
                v320 = v10[11];
                if ((v320 & 0x80000000) == 0)
                {
                  v321 = *(_DWORD *)(*(_QWORD *)(v222 + 32) + 4);
                  v322 = v320 + 1;
                  do
                  {
                    while (1)
                    {
                      v323 = (v321 >> (v322 - 1)) & 1;
                      v324 = v293 + 7;
                      if (v293 >= 0)
                        v324 = v293;
                      v325 = v324 & 0xFFFFFFF8;
                      v326 = *(_QWORD *)a4;
                      v327 = (uint64_t)v324 >> 3;
                      v328 = v293 - v325;
                      if (v328)
                        break;
                      *(_BYTE *)(v326 + v327) = (_BYTE)v323 << 7;
                      *v15 = ++v293;
                      v374 = v322-- > 1;
                      if (!v374)
                        goto LABEL_285;
                    }
                    v329 = 7 - v328;
                    *(_BYTE *)(v326 + v327) &= ~(1 << v329);
                    *(_BYTE *)(*(_QWORD *)a4 + v327) |= (_BYTE)v323 << v329;
                    *v15 = ++v293;
                    v374 = v322-- > 1;
                  }
                  while (v374);
LABEL_285:
                  v330 = v10[11];
                  if ((v330 & 0x80000000) == 0)
                  {
                    v331 = 0;
                    v332 = *(_DWORD *)(*(_QWORD *)(v222 + 40) + 4);
                    v333 = v293;
                    do
                    {
                      v336 = (v332 >> (v330 + v331)) & 1;
                      v337 = v333 + 7;
                      if (v333 >= 0)
                        v337 = v333;
                      v338 = v337 & 0xFFFFFFF8;
                      v335 = *(_QWORD *)a4;
                      v339 = (uint64_t)v337 >> 3;
                      if (v331 - v293 + v338)
                      {
                        v334 = v331 - v293 + v338 + 7;
                        *(_BYTE *)(v335 + v339) &= ~(1 << v334);
                        v335 = *(_QWORD *)a4;
                        v336 = *(unsigned __int8 *)(*(_QWORD *)a4 + v339) | (v336 << v334);
                      }
                      else
                      {
                        LOBYTE(v336) = (_BYTE)v336 << 7;
                      }
                      *(_BYTE *)(v335 + v339) = v336;
                      *v15 = ++v333;
                      --v331;
                    }
                    while ((v330 + v331 + 2) > 1);
                    v340 = v10[11];
                    if ((v340 & 0x80000000) == 0)
                    {
                      v341 = 0;
                      v342 = *(_DWORD *)(*(_QWORD *)(v222 + 48) + 4);
                      v343 = v331 - v293;
                      do
                      {
                        v346 = (v342 >> (v340 + v341)) & 1;
                        v347 = v333 + 7;
                        if (v333 >= 0)
                          v347 = v333;
                        v348 = v347 & 0xFFFFFFF8;
                        v345 = *(_QWORD *)a4;
                        v349 = (uint64_t)v347 >> 3;
                        if (v343 + v341 + v348)
                        {
                          v344 = v343 + v341 + v348 + 7;
                          *(_BYTE *)(v345 + v349) &= ~(1 << v344);
                          v345 = *(_QWORD *)a4;
                          v346 = *(unsigned __int8 *)(*(_QWORD *)a4 + v349) | (v346 << v344);
                        }
                        else
                        {
                          LOBYTE(v346) = (_BYTE)v346 << 7;
                        }
                        *(_BYTE *)(v345 + v349) = v346;
                        *v15 = ++v333;
                        --v341;
                      }
                      while ((v340 + v341 + 2) > 1);
                      v350 = v10[11];
                      if ((v350 & 0x80000000) == 0)
                      {
                        v351 = *(_DWORD *)(*(_QWORD *)(v222 + 56) + 4);
                        v352 = v343 + v341 + 7;
                        do
                        {
                          v355 = (v351 >> v350) & 1;
                          v357 = v333 + 7;
                          if (v333 >= 0)
                            v357 = v333;
                          v358 = v357 & 0xFFFFFFF8;
                          v354 = *(_QWORD *)a4;
                          v359 = (uint64_t)v357 >> 3;
                          if (v358 == v333)
                          {
                            LOBYTE(v355) = (_BYTE)v355 << 7;
                          }
                          else
                          {
                            v353 = v352 + v358;
                            *(_BYTE *)(v354 + v359) &= ~(1 << v353);
                            v354 = *(_QWORD *)a4;
                            v355 = *(unsigned __int8 *)(*(_QWORD *)a4 + v359) | (v355 << v353);
                          }
                          *(_BYTE *)(v354 + v359) = v355;
                          *v15 = ++v333;
                          --v352;
                          v356 = v350-- + 1;
                        }
                        while (v356 > 1);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v221 = *v9;
      }
      goto LABEL_310;
    }
  }
  else
  {
    v222 = v3107;
    if (*(_DWORD *)(v3107 + 64))
    {
      v221 = 0;
      if (v59[8] == 255)
        goto LABEL_310;
      goto LABEL_243;
    }
  }
  v223 = v59[8];
  v224 = *(_DWORD *)(a4 + 8);
  v225 = v224 + 7;
  if (v224 >= 0)
    v225 = *(_DWORD *)(a4 + 8);
  v226 = v225 & 0xFFFFFFF8;
  v227 = *(_QWORD *)a4;
  v228 = (uint64_t)v225 >> 3;
  v229 = v224 - v226;
  if (v229)
  {
    v230 = 7 - v229;
    *(_BYTE *)(v227 + v228) &= ~(1 << v230);
    v227 = *(_QWORD *)a4;
    v231 = *(unsigned __int8 *)(*(_QWORD *)a4 + v228) | (((v223 >> 7) & 1) << v230);
  }
  else
  {
    LOBYTE(v231) = ((v59[8] & 0x80) != 0) << 7;
  }
  *(_BYTE *)(v227 + v228) = v231;
  *(_DWORD *)(a4 + 8) = v224 + 1;
  v232 = v224 + 8;
  if (v224 >= -1)
    v232 = v224 + 1;
  v233 = v232 & 0xFFFFFFF8;
  v234 = *(_QWORD *)a4;
  v235 = (uint64_t)v232 >> 3;
  v236 = v224 + 1 - v233;
  if (v236)
  {
    v237 = 7 - v236;
    *(_BYTE *)(v234 + v235) &= ~(1 << v237);
    v234 = *(_QWORD *)a4;
    v238 = *(unsigned __int8 *)(*(_QWORD *)a4 + v235) | (((v223 >> 6) & 1) << v237);
  }
  else
  {
    LOBYTE(v238) = ((v223 & 0x40) != 0) << 7;
  }
  *(_BYTE *)(v234 + v235) = v238;
  *(_DWORD *)(a4 + 8) = v224 + 2;
  v239 = v224 + 9;
  if (v224 >= -2)
    v239 = v224 + 2;
  v240 = v239 & 0xFFFFFFF8;
  v241 = *(_QWORD *)a4;
  v242 = (uint64_t)v239 >> 3;
  v243 = v224 + 2 - v240;
  if (v243)
  {
    v244 = 7 - v243;
    *(_BYTE *)(v241 + v242) &= ~(1 << v244);
    v241 = *(_QWORD *)a4;
    v245 = *(unsigned __int8 *)(*(_QWORD *)a4 + v242) | (((v223 >> 5) & 1) << v244);
  }
  else
  {
    LOBYTE(v245) = ((v223 & 0x20) != 0) << 7;
  }
  *(_BYTE *)(v241 + v242) = v245;
  *(_DWORD *)(a4 + 8) = v224 + 3;
  v246 = v224 + 10;
  if (v224 >= -3)
    v246 = v224 + 3;
  v247 = v246 & 0xFFFFFFF8;
  v248 = *(_QWORD *)a4;
  v249 = (uint64_t)v246 >> 3;
  v250 = v224 + 3 - v247;
  if (v250)
  {
    v251 = 7 - v250;
    *(_BYTE *)(v248 + v249) &= ~(1 << v251);
    v248 = *(_QWORD *)a4;
    v252 = *(unsigned __int8 *)(*(_QWORD *)a4 + v249) | (((v223 >> 4) & 1) << v251);
  }
  else
  {
    LOBYTE(v252) = ((v223 & 0x10) != 0) << 7;
  }
  *(_BYTE *)(v248 + v249) = v252;
  *(_DWORD *)(a4 + 8) = v224 + 4;
  v253 = v224 + 11;
  if (v224 >= -4)
    v253 = v224 + 4;
  v254 = v253 & 0xFFFFFFF8;
  v255 = *(_QWORD *)a4;
  v256 = (uint64_t)v253 >> 3;
  v257 = v224 + 4 - v254;
  if (v257)
  {
    v258 = 7 - v257;
    *(_BYTE *)(v255 + v256) &= ~(1 << v258);
    v255 = *(_QWORD *)a4;
    v259 = *(unsigned __int8 *)(*(_QWORD *)a4 + v256) | (((v223 >> 3) & 1) << v258);
  }
  else
  {
    LOBYTE(v259) = ((v223 & 8) != 0) << 7;
  }
  *(_BYTE *)(v255 + v256) = v259;
  *(_DWORD *)(a4 + 8) = v224 + 5;
  v260 = v224 + 12;
  if (v224 >= -5)
    v260 = v224 + 5;
  v261 = v260 & 0xFFFFFFF8;
  v262 = *(_QWORD *)a4;
  v263 = (uint64_t)v260 >> 3;
  v264 = v224 + 5 - v261;
  if (v264)
  {
    v265 = 7 - v264;
    *(_BYTE *)(v262 + v263) &= ~(1 << v265);
    v262 = *(_QWORD *)a4;
    v266 = *(unsigned __int8 *)(*(_QWORD *)a4 + v263) | (((v223 >> 2) & 1) << v265);
  }
  else
  {
    LOBYTE(v266) = ((v223 & 4) != 0) << 7;
  }
  *(_BYTE *)(v262 + v263) = v266;
  *(_DWORD *)(a4 + 8) = v224 + 6;
  v267 = v224 + 13;
  if (v224 >= -6)
    v267 = v224 + 6;
  v268 = v267 & 0xFFFFFFF8;
  v269 = *(_QWORD *)a4;
  v270 = (uint64_t)v267 >> 3;
  v271 = v224 + 6 - v268;
  if (v271)
  {
    v272 = 7 - v271;
    *(_BYTE *)(v269 + v270) &= ~(1 << v272);
    v269 = *(_QWORD *)a4;
    v273 = *(unsigned __int8 *)(*(_QWORD *)a4 + v270) | (((v223 >> 1) & 1) << v272);
  }
  else
  {
    LOBYTE(v273) = ((v223 & 2) != 0) << 7;
  }
  *(_BYTE *)(v269 + v270) = v273;
  *(_DWORD *)(a4 + 8) = v224 + 7;
  v274 = v223 & 1;
  v275 = v224 + 14;
  if (v224 >= -7)
    v275 = v224 + 7;
  v276 = v275 & 0xFFFFFFF8;
  v277 = *(_QWORD *)a4;
  v278 = (uint64_t)v275 >> 3;
  if (v224 + 7 == v276)
  {
    *(_BYTE *)(v277 + v278) = v274 << 7;
    *v15 = v224 + 8;
    v221 = *v9;
    if ((v221 & 0xFFFFFFFD) == 0)
      goto LABEL_242;
    goto LABEL_243;
  }
  *(_BYTE *)(v277 + v278) &= ~(1 << (v276 - v224));
  *(_BYTE *)(*(_QWORD *)a4 + v278) |= v274 << (v276 - v224);
  *v15 = v224 + 8;
  v221 = *v9;
  if ((v221 & 0xFFFFFFFD) != 0)
    goto LABEL_243;
LABEL_242:
  if (v59[8] != 255)
    goto LABEL_243;
LABEL_310:
  v3101 = v7;
  switch(v221)
  {
    case 0u:
    case 2u:
      write_frame_size_0((uint64_t)v9, v3103, (uint64_t *)a4);
      v10 = v3113;
      v220 = (int *)(v3111 + 263764);
      if (v8[3] && __s1[13] == __s1[17])
      {
        v360 = *(unsigned __int8 *)(v222 + 80);
        v361 = *(_DWORD *)(a4 + 8);
        v362 = v361 + 7;
        if (v361 >= 0)
          v362 = *(_DWORD *)(a4 + 8);
        v363 = v362 & 0xFFFFFFF8;
        v364 = *(_QWORD *)a4;
        v365 = (uint64_t)v362 >> 3;
        v366 = v361 - v363;
        if (v366)
        {
          v367 = 7 - v366;
          *(_BYTE *)(v364 + v365) &= ~(1 << v367);
          v364 = *(_QWORD *)a4;
          v360 = *(unsigned __int8 *)(*(_QWORD *)a4 + v365) | (v360 << v367);
        }
        else
        {
          LOBYTE(v360) = (_BYTE)v360 << 7;
        }
        *(_BYTE *)(v364 + v365) = v360;
        v380 = v361 + 1;
        goto LABEL_733;
      }
      goto LABEL_734;
    case 1u:
    case 3u:
      v368 = *((_DWORD *)v9 + 10);
      if (!v368)
        goto LABEL_447;
      if (*v6)
      {
        v369 = *(_DWORD *)(*(_QWORD *)v7 + 44) + 1;
        v370 = v59[1] >> v369;
        v371 = *(_QWORD *)(v3111 + 8 * (int)v59[62] + 239456);
        v372 = *(_DWORD *)(v371 + 36) >> v369;
        v373 = *v59 - *(_DWORD *)(v371 + 4);
        v374 = v370 != v372 || v373 < 0;
        v368 = !v374 && v373 < 65;
        goto LABEL_446;
      }
      v3126 = 0;
      v3124 = 0u;
      v3125 = 0u;
      v3123 = 0u;
      v376 = (int)v59[59];
      if ((_DWORD)v376 == -1)
      {
        v378 = 0;
      }
      else
      {
        v377 = v3111 + 8 * v376;
        v378 = *(_QWORD *)(v377 + 239456);
        if (v378)
        {
          *(_QWORD *)&v3123 = *(_QWORD *)(v377 + 239456);
          v379 = 1;
          goto LABEL_335;
        }
      }
      v379 = 0;
LABEL_335:
      v381 = (int)v59[60];
      if ((_DWORD)v381 != -1)
      {
        v382 = *(_QWORD *)(v3111 + 8 * v381 + 239456);
        v383 = v378 == v382 ? v379 : 0;
        if (v382 && (v383 & 1) == 0)
        {
          v384 = v379++;
          *(_QWORD *)((unint64_t)&v3123 | (8 * v384)) = v382;
        }
      }
      v385 = (int)v59[61];
      if ((_DWORD)v385 == -1)
        goto LABEL_351;
      v386 = *(_QWORD *)(v3111 + 8 * v385 + 239456);
      if (!v386)
        goto LABEL_351;
      if (!v379)
      {
        v387 = 0;
LABEL_350:
        ++v379;
        *((_QWORD *)&v3123 + v387) = v386;
        goto LABEL_351;
      }
      if ((_QWORD)v3123 != v386)
      {
        v387 = v379;
        if (v379 == 1 || *((_QWORD *)&v3123 + 1) != v386)
          goto LABEL_350;
      }
LABEL_351:
      v388 = (int)v59[62];
      if ((_DWORD)v388 != -1)
      {
        v389 = *(_QWORD *)(v3111 + 8 * v388 + 239456);
        if (v389)
        {
          if (v379 < 1
            || (_QWORD)v3123 != v389
            && (v379 == 1 || *((_QWORD *)&v3123 + 1) != v389 && (v379 == 2 || (_QWORD)v3124 != v389)))
          {
            v390 = v379++;
            *((_QWORD *)&v3123 + v390) = v389;
          }
        }
      }
      v391 = (int)v59[63];
      if ((_DWORD)v391 != -1)
      {
        v392 = *(_QWORD *)(v3111 + 8 * v391 + 239456);
        if (v392)
        {
          if (v379 < 1
            || (_QWORD)v3123 != v392
            && (v379 == 1
             || *((_QWORD *)&v3123 + 1) != v392
             && (v379 == 2 || (_QWORD)v3124 != v392 && (v379 == 3 || *((_QWORD *)&v3124 + 1) != v392))))
          {
            *((_QWORD *)&v3123 + v379++) = v392;
          }
        }
      }
      v393 = (int)v59[64];
      if ((_DWORD)v393 != -1)
      {
        v394 = *(_QWORD *)(v3111 + 8 * v393 + 239456);
        if (v394)
        {
          if (v379 < 1
            || (_QWORD)v3123 != v394
            && (v379 == 1
             || *((_QWORD *)&v3123 + 1) != v394
             && (v379 == 2
              || (_QWORD)v3124 != v394
              && (v379 == 3 || *((_QWORD *)&v3124 + 1) != v394 && (v379 == 4 || (_QWORD)v3125 != v394)))))
          {
            *((_QWORD *)&v3123 + v379++) = v394;
          }
        }
      }
      v395 = (int)v59[65];
      if ((_DWORD)v395 != -1)
      {
        v396 = *(_QWORD *)(v3111 + 8 * v395 + 239456);
        if (v396)
        {
          if (v379 < 1
            || (_QWORD)v3123 != v396
            && (v379 == 1
             || *((_QWORD *)&v3123 + 1) != v396
             && (v379 == 2
              || (_QWORD)v3124 != v396
              && (v379 == 3
               || *((_QWORD *)&v3124 + 1) != v396
               && (v379 == 4 || (_QWORD)v3125 != v396 && (v379 == 5 || *((_QWORD *)&v3125 + 1) != v396))))))
          {
            ++v379;
          }
        }
      }
      if (v379 < 7)
        goto LABEL_445;
      av1_set_frame_refs((uint64_t)v9, &v3116, v376, v388);
      if (v3116 != -1)
      {
        v397 = *(_QWORD *)(v3111 + 8 * v3116 + 239456);
        v10 = v3113;
        v59 = __s1;
        v398 = (int)__s1[59];
        v220 = (int *)(v3111 + 263764);
        if ((_DWORD)v398 != -1)
          goto LABEL_390;
LABEL_393:
        if (!v397)
          goto LABEL_394;
LABEL_445:
        v368 = 0;
        goto LABEL_446;
      }
      v397 = 0;
      v10 = v3113;
      v59 = __s1;
      v398 = (int)__s1[59];
      v220 = (int *)(v3111 + 263764);
      if ((_DWORD)v398 == -1)
        goto LABEL_393;
LABEL_390:
      if (*(_QWORD *)(v3111 + 8 * v398 + 239456) != v397)
        goto LABEL_445;
LABEL_394:
      if (v3117 == -1)
        v399 = 0;
      else
        v399 = *(_QWORD *)(v3111 + 8 * v3117 + 239456);
      v400 = (int)v59[60];
      if ((_DWORD)v400 == -1)
        v401 = 0;
      else
        v401 = *(_QWORD *)(v3111 + 8 * v400 + 239456);
      if (v401 != v399)
        goto LABEL_445;
      v402 = v3118 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v3118 + 239456);
      v403 = (int)v59[61];
      v404 = (_DWORD)v403 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v403 + 239456);
      if (v404 != v402)
        goto LABEL_445;
      v405 = v3119 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v3119 + 239456);
      v406 = (int)v59[62];
      v407 = (_DWORD)v406 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v406 + 239456);
      if (v407 != v405)
        goto LABEL_445;
      v408 = v3120 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v3120 + 239456);
      v409 = (int)v59[63];
      v410 = (_DWORD)v409 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v409 + 239456);
      if (v410 != v408)
        goto LABEL_445;
      v411 = v3121 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v3121 + 239456);
      v412 = (int)v59[64];
      v413 = (_DWORD)v412 == -1 ? 0 : *(_QWORD *)(v3111 + 8 * v412 + 239456);
      if (v413 != v411)
        goto LABEL_445;
      if (v3122 == -1)
        v3098 = 0;
      else
        v3098 = *(_QWORD *)(v3111 + 8 * v3122 + 239456);
      v3099 = (int)__s1[65];
      if ((_DWORD)v3099 == -1)
      {
        v3100 = 0;
        v218 = v3111;
      }
      else
      {
        v218 = v3111;
        v3100 = *(_QWORD *)(v3111 + 8 * v3099 + 239456);
      }
      v368 = v3100 == v3098;
      v219 = v9;
      v220 = (int *)(v3111 + 263764);
      v10 = v3113;
      v59 = __s1;
LABEL_446:
      *((_DWORD *)v219 + 10) = v368;
LABEL_447:
      if (v10[10])
      {
        v414 = *(_DWORD *)(a4 + 8);
        v415 = v414 + 7;
        if (v414 >= 0)
          v415 = *(_DWORD *)(a4 + 8);
        v416 = v415 & 0xFFFFFFF8;
        v417 = *(_QWORD *)a4;
        v418 = (uint64_t)v415 >> 3;
        v419 = v414 - v416;
        if (v419)
        {
          v420 = 7 - v419;
          *(_BYTE *)(v417 + v418) &= ~(1 << v420);
          v417 = *(_QWORD *)a4;
          v368 = *(unsigned __int8 *)(*(_QWORD *)a4 + v418) | (v368 << v420);
        }
        else
        {
          LOBYTE(v368) = (_BYTE)v368 << 7;
        }
        *(_BYTE *)(v417 + v418) = v368;
        *v15 = v414 + 1;
        v368 = *((_DWORD *)v219 + 10);
      }
      if (v368)
      {
        v421 = v59[59];
        v422 = *(_DWORD *)(a4 + 8);
        v423 = v422 + 7;
        if (v422 >= 0)
          v423 = *(_DWORD *)(a4 + 8);
        v424 = v423 & 0xFFFFFFF8;
        v425 = *(_QWORD *)a4;
        v426 = (uint64_t)v423 >> 3;
        v427 = v422 - v424;
        if (v427)
        {
          v428 = 7 - v427;
          *(_BYTE *)(v425 + v426) &= ~(1 << v428);
          v425 = *(_QWORD *)a4;
          v429 = *(unsigned __int8 *)(*(_QWORD *)a4 + v426) | (((v421 >> 2) & 1) << v428);
        }
        else
        {
          LOBYTE(v429) = ((v59[59] & 4) != 0) << 7;
        }
        *(_BYTE *)(v425 + v426) = v429;
        *(_DWORD *)(a4 + 8) = v422 + 1;
        v430 = v422 + 8;
        if (v422 >= -1)
          v430 = v422 + 1;
        v431 = v430 & 0xFFFFFFF8;
        v432 = *(_QWORD *)a4;
        v433 = (uint64_t)v430 >> 3;
        v434 = v422 + 1 - v431;
        if (v434)
        {
          v435 = 7 - v434;
          *(_BYTE *)(v432 + v433) &= ~(1 << v435);
          v432 = *(_QWORD *)a4;
          v436 = *(unsigned __int8 *)(*(_QWORD *)a4 + v433) | (((v421 >> 1) & 1) << v435);
        }
        else
        {
          LOBYTE(v436) = ((v421 & 2) != 0) << 7;
        }
        *(_BYTE *)(v432 + v433) = v436;
        *(_DWORD *)(a4 + 8) = v422 + 2;
        v437 = v421 & 1;
        v438 = v422 + 9;
        if (v422 >= -2)
          v438 = v422 + 2;
        v439 = v438 & 0xFFFFFFF8;
        v440 = *(_QWORD *)a4;
        v441 = (uint64_t)v438 >> 3;
        v442 = v422 + 2 - v439;
        if (v442)
        {
          v443 = 7 - v442;
          *(_BYTE *)(v440 + v441) &= ~(1 << v443);
          v440 = *(_QWORD *)a4;
          v437 = *(unsigned __int8 *)(*(_QWORD *)a4 + v441) | (v437 << v443);
        }
        else
        {
          LOBYTE(v437) = (_BYTE)v437 << 7;
        }
        *(_BYTE *)(v440 + v441) = v437;
        *(_DWORD *)(a4 + 8) = v422 + 3;
        v444 = v59[62];
        v445 = v422 + 10;
        if (v422 >= -3)
          v445 = v422 + 3;
        v446 = v445 & 0xFFFFFFF8;
        v447 = *(_QWORD *)a4;
        v448 = (uint64_t)v445 >> 3;
        v449 = v422 + 3 - v446;
        if (v449)
        {
          v450 = 7 - v449;
          *(_BYTE *)(v447 + v448) &= ~(1 << v450);
          v447 = *(_QWORD *)a4;
          v451 = *(unsigned __int8 *)(*(_QWORD *)a4 + v448) | (((v444 >> 2) & 1) << v450);
        }
        else
        {
          LOBYTE(v451) = ((v59[62] & 4) != 0) << 7;
        }
        *(_BYTE *)(v447 + v448) = v451;
        *(_DWORD *)(a4 + 8) = v422 + 4;
        v452 = v422 + 11;
        if (v422 >= -4)
          v452 = v422 + 4;
        v453 = v452 & 0xFFFFFFF8;
        v454 = *(_QWORD *)a4;
        v455 = (uint64_t)v452 >> 3;
        v456 = v422 + 4 - v453;
        if (v456)
        {
          v457 = 7 - v456;
          *(_BYTE *)(v454 + v455) &= ~(1 << v457);
          v454 = *(_QWORD *)a4;
          v458 = *(unsigned __int8 *)(*(_QWORD *)a4 + v455) | (((v444 >> 1) & 1) << v457);
        }
        else
        {
          LOBYTE(v458) = ((v444 & 2) != 0) << 7;
        }
        *(_BYTE *)(v454 + v455) = v458;
        *(_DWORD *)(a4 + 8) = v422 + 5;
        v459 = v444 & 1;
        v460 = v422 + 12;
        if (v422 >= -5)
          v460 = v422 + 5;
        v461 = v460 & 0xFFFFFFF8;
        v462 = *(_QWORD *)a4;
        v463 = (uint64_t)v460 >> 3;
        v464 = v422 + 5 - v461;
        if (v464)
        {
          v465 = 7 - v464;
          *(_BYTE *)(v462 + v463) &= ~(1 << v465);
          v462 = *(_QWORD *)a4;
          v459 = *(unsigned __int8 *)(*(_QWORD *)a4 + v463) | (v459 << v465);
        }
        else
        {
          LOBYTE(v459) = (_BYTE)v459 << 7;
        }
        *(_BYTE *)(v462 + v463) = v459;
        *v15 = v422 + 6;
      }
      for (i = 1; i != 8; ++i)
      {
        if (*((_DWORD *)v219 + 10))
        {
          if (!*((_BYTE *)v10 + 16))
            goto LABEL_487;
        }
        else
        {
          v480 = *(_DWORD *)(v3111 + 4 * (i - 1) + 239280);
          v481 = *(_DWORD *)(a4 + 8);
          v482 = v481 + 7;
          if (v481 >= 0)
            v482 = *(_DWORD *)(a4 + 8);
          v483 = v482 & 0xFFFFFFF8;
          v484 = *(_QWORD *)a4;
          v485 = (uint64_t)v482 >> 3;
          v486 = v481 - v483;
          if (v486)
          {
            v487 = 7 - v486;
            *(_BYTE *)(v484 + v485) &= ~(1 << v487);
            v484 = *(_QWORD *)a4;
            v488 = *(unsigned __int8 *)(*(_QWORD *)a4 + v485) | (((v480 >> 2) & 1) << v487);
          }
          else
          {
            LOBYTE(v488) = ((*(_DWORD *)(v3111 + 4 * (i - 1) + 239280) & 4) != 0) << 7;
          }
          *(_BYTE *)(v484 + v485) = v488;
          *(_DWORD *)(a4 + 8) = v481 + 1;
          v489 = v481 + 8;
          if (v481 >= -1)
            v489 = v481 + 1;
          v490 = v489 & 0xFFFFFFF8;
          v491 = *(_QWORD *)a4;
          v492 = (uint64_t)v489 >> 3;
          v493 = v481 + 1 - v490;
          if (v493)
          {
            v494 = 7 - v493;
            *(_BYTE *)(v491 + v492) &= ~(1 << v494);
            v491 = *(_QWORD *)a4;
            v495 = *(unsigned __int8 *)(*(_QWORD *)a4 + v492) | (((v480 >> 1) & 1) << v494);
          }
          else
          {
            LOBYTE(v495) = ((v480 & 2) != 0) << 7;
          }
          *(_BYTE *)(v491 + v492) = v495;
          *(_DWORD *)(a4 + 8) = v481 + 2;
          v496 = v480 & 1;
          v497 = v481 + 9;
          if (v481 >= -2)
            v497 = v481 + 2;
          v498 = v497 & 0xFFFFFFF8;
          v499 = *(_QWORD *)a4;
          v500 = (uint64_t)v497 >> 3;
          v501 = v481 + 2 - v498;
          if (v501)
          {
            v502 = 7 - v501;
            *(_BYTE *)(v499 + v500) &= ~(1 << v502);
            *(_BYTE *)(*(_QWORD *)a4 + v500) |= v496 << v502;
            *v15 = v481 + 3;
            if (!*((_BYTE *)v10 + 16))
              goto LABEL_487;
          }
          else
          {
            *(_BYTE *)(v499 + v500) = v496 << 7;
            *v15 = v481 + 3;
            if (!*((_BYTE *)v10 + 16))
              goto LABEL_487;
          }
        }
        v467 = v10[6];
        v468 = (v220[159]
              + (1 << v10[5])
              - *(_DWORD *)(v218 + 239040 + 4 * *(int *)(v218 + 239040 + 4 * (i - 1) + 240) + 25364))
             % (1 << v10[5]);
        v469 = v468 - 1;
        if (v468 < 1 || v468 > 1 << v467)
        {
          aom_internal_error(*(_QWORD *)(v59 + 11), 1, "Invalid delta_frame_id_minus_1");
          v10 = v3113;
          v59 = __s1;
          v220 = (int *)(v3111 + 263764);
        }
        if (v467 >= 1)
        {
          v471 = *v15;
          v472 = 7 - *v15;
          v473 = v467 + 1;
          do
          {
            v476 = (v469 >> (v473 - 2)) & 1;
            v477 = v471 + 7;
            if (v471 >= 0)
              v477 = v471;
            v478 = v477 & 0xFFFFFFF8;
            v475 = *(_QWORD *)a4;
            v479 = (uint64_t)v477 >> 3;
            if (v478 == v471)
            {
              LOBYTE(v476) = (_BYTE)v476 << 7;
            }
            else
            {
              v474 = v472 + v478;
              *(_BYTE *)(v475 + v479) &= ~(1 << v474);
              v475 = *(_QWORD *)a4;
              v476 = *(unsigned __int8 *)(*(_QWORD *)a4 + v479) | (v476 << v474);
            }
            *(_BYTE *)(v475 + v479) = v476;
            *v15 = ++v471;
            LOBYTE(v472) = v472 - 1;
            --v473;
          }
          while (v473 > 1);
        }
LABEL_487:
        v219 = v9;
      }
      v222 = v3107;
      if (!v3103 || *(_BYTE *)(v3107 + 86))
      {
        write_frame_size_0((uint64_t)v9, v3103, (uint64_t *)a4);
        v218 = v3111;
        v561 = *v15;
        if (*(_BYTE *)(v3107 + 78))
          goto LABEL_698;
        goto LABEL_587;
      }
      v503 = (int)v59[59];
      v218 = v3111;
      if ((_DWORD)v503 == -1)
        goto LABEL_526;
      v504 = *(_DWORD **)(v3111 + 8 * v503 + 239456);
      if (!v504)
        goto LABEL_526;
      if (v59[17] != v504[316])
      {
        v505 = 0;
        if (v59[15] == v504[353])
          goto LABEL_594;
LABEL_526:
        v506 = *(_DWORD *)(a4 + 8);
        if (v506 >= 0)
          v507 = *(_DWORD *)(a4 + 8);
        else
          v507 = v506 + 7;
        v508 = v507 & 0xFFFFFFF8;
        v509 = *(_QWORD *)a4;
        v510 = (uint64_t)v507 >> 3;
        v511 = v506 - v508;
        if (v511)
          v511 = *(unsigned __int8 *)(v509 + v510) & ~(1 << (7 - v511));
        *(_BYTE *)(v509 + v510) = v511;
        v512 = v506 + 1;
        *v15 = v512;
LABEL_532:
        v513 = (int)v59[60];
        if ((_DWORD)v513 != -1)
        {
          v514 = *(_DWORD **)(v3111 + 8 * v513 + 239456);
          if (v514)
          {
            if (v59[17] == v514[316])
            {
              v515 = v59[18] == v514[318];
              if (v59[15] != v514[353])
                goto LABEL_536;
            }
            else
            {
              v515 = 0;
              if (v59[15] != v514[353])
                goto LABEL_536;
            }
            v576 = v59[16] == v514[354] && v515;
            v577 = v512 + 7;
            if (v512 >= 0)
              v577 = v512;
            v578 = v577 & 0xFFFFFFF8;
            v579 = *(_QWORD *)a4;
            v580 = (uint64_t)v577 >> 3;
            v581 = v512 - v578;
            if (v581)
            {
              v582 = 7 - v581;
              *(_BYTE *)(v579 + v580) &= ~(1 << v582);
              *(_BYTE *)(*(_QWORD *)a4 + v580) |= v576 << v582;
            }
            else
            {
              if (v576)
                v618 = 0x80;
              else
                v618 = 0;
              *(_BYTE *)(v579 + v580) = v618;
            }
            v521 = v512 + 1;
            *v15 = v521;
            if ((v576 & 1) != 0)
              goto LABEL_690;
LABEL_542:
            v522 = (int)v59[61];
            if ((_DWORD)v522 != -1)
            {
              v523 = *(_DWORD **)(v3111 + 8 * v522 + 239456);
              if (v523)
              {
                if (v59[17] == v523[316])
                {
                  v524 = v59[18] == v523[318];
                  if (v59[15] != v523[353])
                    goto LABEL_546;
                }
                else
                {
                  v524 = 0;
                  if (v59[15] != v523[353])
                    goto LABEL_546;
                }
                v583 = v59[16] == v523[354] && v524;
                v584 = v521 + 7;
                if (v521 >= 0)
                  v584 = v521;
                v585 = v584 & 0xFFFFFFF8;
                v586 = *(_QWORD *)a4;
                v587 = (uint64_t)v584 >> 3;
                v588 = v521 - v585;
                if (v588)
                {
                  v589 = 7 - v588;
                  *(_BYTE *)(v586 + v587) &= ~(1 << v589);
                  *(_BYTE *)(*(_QWORD *)a4 + v587) |= v583 << v589;
                }
                else
                {
                  if (v583)
                    v619 = 0x80;
                  else
                    v619 = 0;
                  *(_BYTE *)(v586 + v587) = v619;
                }
                v530 = v521 + 1;
                *v15 = v530;
                if ((v583 & 1) != 0)
                  goto LABEL_690;
LABEL_552:
                v531 = (int)v59[62];
                if ((_DWORD)v531 != -1)
                {
                  v532 = *(_DWORD **)(v3111 + 8 * v531 + 239456);
                  if (v532)
                  {
                    if (v59[17] == v532[316])
                    {
                      v533 = v59[18] == v532[318];
                      if (v59[15] != v532[353])
                        goto LABEL_556;
                    }
                    else
                    {
                      v533 = 0;
                      if (v59[15] != v532[353])
                        goto LABEL_556;
                    }
                    v590 = v59[16] == v532[354] && v533;
                    v591 = v530 + 7;
                    if (v530 >= 0)
                      v591 = v530;
                    v592 = v591 & 0xFFFFFFF8;
                    v593 = *(_QWORD *)a4;
                    v594 = (uint64_t)v591 >> 3;
                    v595 = v530 - v592;
                    if (v595)
                    {
                      v596 = 7 - v595;
                      *(_BYTE *)(v593 + v594) &= ~(1 << v596);
                      *(_BYTE *)(*(_QWORD *)a4 + v594) |= v590 << v596;
                    }
                    else
                    {
                      if (v590)
                        v620 = 0x80;
                      else
                        v620 = 0;
                      *(_BYTE *)(v593 + v594) = v620;
                    }
                    v539 = v530 + 1;
                    *v15 = v539;
                    if ((v590 & 1) != 0)
                      goto LABEL_690;
LABEL_562:
                    v540 = (int)v59[63];
                    if ((_DWORD)v540 != -1)
                    {
                      v541 = *(_DWORD **)(v3111 + 8 * v540 + 239456);
                      if (v541)
                      {
                        if (v59[17] == v541[316])
                        {
                          v542 = v59[18] == v541[318];
                          if (v59[15] != v541[353])
                            goto LABEL_566;
                        }
                        else
                        {
                          v542 = 0;
                          if (v59[15] != v541[353])
                            goto LABEL_566;
                        }
                        v597 = v59[16] == v541[354] && v542;
                        v598 = v539 + 7;
                        if (v539 >= 0)
                          v598 = v539;
                        v599 = v598 & 0xFFFFFFF8;
                        v600 = *(_QWORD *)a4;
                        v601 = (uint64_t)v598 >> 3;
                        v602 = v539 - v599;
                        if (v602)
                        {
                          v603 = 7 - v602;
                          *(_BYTE *)(v600 + v601) &= ~(1 << v603);
                          *(_BYTE *)(*(_QWORD *)a4 + v601) |= v597 << v603;
                        }
                        else
                        {
                          if (v597)
                            v621 = 0x80;
                          else
                            v621 = 0;
                          *(_BYTE *)(v600 + v601) = v621;
                        }
                        v548 = v539 + 1;
                        *v15 = v548;
                        if ((v597 & 1) != 0)
                          goto LABEL_690;
LABEL_572:
                        v549 = (int)v59[64];
                        if ((_DWORD)v549 != -1)
                        {
                          v550 = *(_DWORD **)(v3111 + 8 * v549 + 239456);
                          if (v550)
                          {
                            if (v59[17] == v550[316])
                            {
                              v551 = v59[18] == v550[318];
                              if (v59[15] != v550[353])
                                goto LABEL_576;
                            }
                            else
                            {
                              v551 = 0;
                              if (v59[15] != v550[353])
                                goto LABEL_576;
                            }
                            v604 = v59[16] == v550[354] && v551;
                            v605 = v548 + 7;
                            if (v548 >= 0)
                              v605 = v548;
                            v606 = v605 & 0xFFFFFFF8;
                            v607 = *(_QWORD *)a4;
                            v608 = (uint64_t)v605 >> 3;
                            v609 = v548 - v606;
                            if (v609)
                            {
                              v610 = 7 - v609;
                              *(_BYTE *)(v607 + v608) &= ~(1 << v610);
                              *(_BYTE *)(*(_QWORD *)a4 + v608) |= v604 << v610;
                            }
                            else
                            {
                              if (v604)
                                v622 = 0x80;
                              else
                                v622 = 0;
                              *(_BYTE *)(v607 + v608) = v622;
                            }
                            v557 = v548 + 1;
                            *v15 = v557;
                            if ((v604 & 1) != 0)
                              goto LABEL_690;
LABEL_582:
                            v558 = (int)v59[65];
                            if ((_DWORD)v558 != -1
                              && (v559 = *(_DWORD **)(v3111 + 8 * v558 + 239456)) != 0
                              && (v59[17] != v559[316] ? (v560 = 0) : (v560 = v59[18] == v559[318]), v59[15] == v559[353]))
                            {
                              v611 = v59[16] == v559[354] && v560;
                              aom_wb_write_bit((uint64_t *)a4, v611);
                              v59 = __s1;
                              if ((v611 & 1) != 0)
                                goto LABEL_690;
                            }
                            else
                            {
                              if (v557 >= 0)
                                v612 = v557;
                              else
                                v612 = v557 + 7;
                              v613 = v612 & 0xFFFFFFF8;
                              v614 = *(_QWORD *)a4;
                              v615 = (uint64_t)v612 >> 3;
                              v616 = v557 - v613;
                              if (v616)
                                v616 = *(unsigned __int8 *)(v614 + v615) & ~(1 << (7 - v616));
                              *(_BYTE *)(v614 + v615) = v616;
                              *v15 = v557 + 1;
                            }
                            write_frame_size_0((uint64_t)v9, 1, (uint64_t *)a4);
                            v561 = *v15;
                            if (*(_BYTE *)(v3107 + 78))
                              goto LABEL_698;
                            goto LABEL_587;
                          }
                        }
LABEL_576:
                        if (v548 >= 0)
                          v552 = v548;
                        else
                          v552 = v548 + 7;
                        v553 = v552 & 0xFFFFFFF8;
                        v554 = *(_QWORD *)a4;
                        v555 = (uint64_t)v552 >> 3;
                        v556 = v548 - v553;
                        if (v556)
                          v556 = *(unsigned __int8 *)(v554 + v555) & ~(1 << (7 - v556));
                        *(_BYTE *)(v554 + v555) = v556;
                        v557 = v548 + 1;
                        *v15 = v557;
                        goto LABEL_582;
                      }
                    }
LABEL_566:
                    if (v539 >= 0)
                      v543 = v539;
                    else
                      v543 = v539 + 7;
                    v544 = v543 & 0xFFFFFFF8;
                    v545 = *(_QWORD *)a4;
                    v546 = (uint64_t)v543 >> 3;
                    v547 = v539 - v544;
                    if (v547)
                      v547 = *(unsigned __int8 *)(v545 + v546) & ~(1 << (7 - v547));
                    *(_BYTE *)(v545 + v546) = v547;
                    v548 = v539 + 1;
                    *v15 = v548;
                    goto LABEL_572;
                  }
                }
LABEL_556:
                if (v530 >= 0)
                  v534 = v530;
                else
                  v534 = v530 + 7;
                v535 = v534 & 0xFFFFFFF8;
                v536 = *(_QWORD *)a4;
                v537 = (uint64_t)v534 >> 3;
                v538 = v530 - v535;
                if (v538)
                  v538 = *(unsigned __int8 *)(v536 + v537) & ~(1 << (7 - v538));
                *(_BYTE *)(v536 + v537) = v538;
                v539 = v530 + 1;
                *v15 = v539;
                goto LABEL_562;
              }
            }
LABEL_546:
            if (v521 >= 0)
              v525 = v521;
            else
              v525 = v521 + 7;
            v526 = v525 & 0xFFFFFFF8;
            v527 = *(_QWORD *)a4;
            v528 = (uint64_t)v525 >> 3;
            v529 = v521 - v526;
            if (v529)
              v529 = *(unsigned __int8 *)(v527 + v528) & ~(1 << (7 - v529));
            *(_BYTE *)(v527 + v528) = v529;
            v530 = v521 + 1;
            *v15 = v530;
            goto LABEL_552;
          }
        }
LABEL_536:
        if (v512 >= 0)
          v516 = v512;
        else
          v516 = v512 + 7;
        v517 = v516 & 0xFFFFFFF8;
        v518 = *(_QWORD *)a4;
        v519 = (uint64_t)v516 >> 3;
        v520 = v512 - v517;
        if (v520)
          v520 = *(unsigned __int8 *)(v518 + v519) & ~(1 << (7 - v520));
        *(_BYTE *)(v518 + v519) = v520;
        v521 = v512 + 1;
        *v15 = v521;
        goto LABEL_542;
      }
      v505 = v59[18] == v504[318];
      if (v59[15] != v504[353])
        goto LABEL_526;
LABEL_594:
      if (v59[16] != v504[354])
        v505 = 0;
      v569 = *(_DWORD *)(a4 + 8);
      v570 = v569 + 7;
      if (v569 >= 0)
        v570 = *(_DWORD *)(a4 + 8);
      v571 = v570 & 0xFFFFFFF8;
      v572 = *(_QWORD *)a4;
      v573 = (uint64_t)v570 >> 3;
      v574 = v569 - v571;
      if (v574)
      {
        v575 = 7 - v574;
        *(_BYTE *)(v572 + v573) &= ~(1 << v575);
        *(_BYTE *)(*(_QWORD *)a4 + v573) |= v505 << v575;
      }
      else
      {
        if (v505)
          v617 = 0x80;
        else
          v617 = 0;
        *(_BYTE *)(v572 + v573) = v617;
      }
      v512 = v569 + 1;
      *v15 = v512;
      if (!v505)
        goto LABEL_532;
LABEL_690:
      if (!*(_BYTE *)(*(_QWORD *)v7 + 66))
        goto LABEL_697;
      v623 = *(_DWORD *)(a4 + 8);
      v624 = v623 + 7;
      if (v623 >= 0)
        v624 = *(_DWORD *)(a4 + 8);
      v625 = v623 - (v624 & 0xFFFFFFF8);
      v626 = *(_QWORD *)a4;
      v627 = (uint64_t)v624 >> 3;
      if (*((_BYTE *)v59 + 76) == 8)
      {
        if (v625)
          v625 = *(unsigned __int8 *)(v626 + v627) & ~(1 << (7 - v625));
        *(_BYTE *)(v626 + v627) = v625;
        *v15 = v623 + 1;
LABEL_697:
        v561 = *v15;
        if (*(_BYTE *)(v3107 + 78))
        {
LABEL_698:
          v220 = (int *)(v3111 + 263764);
          v10 = v3113;
          goto LABEL_699;
        }
      }
      else
      {
        if (v625)
        {
          v664 = 1 << (7 - v625);
          *(_BYTE *)(v626 + v627) &= ~(_BYTE)v664;
          v626 = *(_QWORD *)a4;
          v665 = *(_BYTE *)(*(_QWORD *)a4 + v627) | v664;
        }
        else
        {
          v665 = 0x80;
        }
        *(_BYTE *)(v626 + v627) = v665;
        *(_DWORD *)(a4 + 8) = v623 + 1;
        v2520 = *((unsigned __int8 *)v59 + 76) - 9;
        v2521 = v623 + 8;
        if (v623 >= -1)
          v2521 = v623 + 1;
        v2522 = v2521 & 0xFFFFFFF8;
        v2523 = *(_QWORD *)a4;
        v2524 = (uint64_t)v2521 >> 3;
        v2525 = v623 + 1 - v2522;
        if (v2525)
        {
          v2526 = 7 - v2525;
          *(_BYTE *)(v2523 + v2524) &= ~(1 << v2526);
          v2523 = *(_QWORD *)a4;
          v2527 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2524) | (((v2520 >> 2) & 1) << v2526);
        }
        else
        {
          LOBYTE(v2527) = ((v2520 & 4) != 0) << 7;
        }
        *(_BYTE *)(v2523 + v2524) = v2527;
        *(_DWORD *)(a4 + 8) = v623 + 2;
        v2528 = v623 + 9;
        if (v623 >= -2)
          v2528 = v623 + 2;
        v2529 = v2528 & 0xFFFFFFF8;
        v2530 = *(_QWORD *)a4;
        v2531 = (uint64_t)v2528 >> 3;
        v2532 = v623 + 2 - v2529;
        if (v2532)
        {
          v2533 = 7 - v2532;
          *(_BYTE *)(v2530 + v2531) &= ~(1 << v2533);
          v2530 = *(_QWORD *)a4;
          v2534 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2531) | (((v2520 >> 1) & 1) << v2533);
        }
        else
        {
          LOBYTE(v2534) = ((v2520 & 2) != 0) << 7;
        }
        *(_BYTE *)(v2530 + v2531) = v2534;
        *(_DWORD *)(a4 + 8) = v623 + 3;
        v2535 = v2520 & 1;
        v2536 = v623 + 10;
        if (v623 >= -3)
          v2536 = v623 + 3;
        v2537 = v2536 & 0xFFFFFFF8;
        v2538 = *(_QWORD *)a4;
        v2539 = (uint64_t)v2536 >> 3;
        v2540 = v623 + 3 - v2537;
        if (v2540)
        {
          v2541 = 7 - v2540;
          *(_BYTE *)(v2538 + v2539) &= ~(1 << v2541);
          v2538 = *(_QWORD *)a4;
          v2535 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2539) | (v2535 << v2541);
        }
        else
        {
          LOBYTE(v2535) = (_BYTE)v2535 << 7;
        }
        *(_BYTE *)(v2538 + v2539) = v2535;
        v561 = v623 + 4;
        *v15 = v561;
        if (*(_BYTE *)(v3107 + 78))
          goto LABEL_698;
      }
LABEL_587:
      v562 = *(unsigned __int8 *)(v3107 + 77);
      v563 = v561 + 7;
      if (v561 >= 0)
        v563 = v561;
      v564 = v563 & 0xFFFFFFF8;
      v565 = *(_QWORD *)a4;
      v566 = (uint64_t)v563 >> 3;
      v567 = v561 - v564;
      v220 = (int *)(v3111 + 263764);
      v10 = v3113;
      if (v567)
      {
        v568 = 7 - v567;
        *(_BYTE *)(v565 + v566) &= ~(1 << v568);
        v565 = *(_QWORD *)a4;
        v562 = *(unsigned __int8 *)(*(_QWORD *)a4 + v566) | (v562 << v568);
      }
      else
      {
        LOBYTE(v562) = (_BYTE)v562 << 7;
      }
      *(_BYTE *)(v565 + v566) = v562;
      *v15 = ++v561;
LABEL_699:
      v628 = *(unsigned __int8 *)(v3107 + 89);
      v629 = v561 + 7;
      if (v561 >= 0)
        v629 = v561;
      v630 = v629 & 0xFFFFFFF8;
      v631 = *(_QWORD *)a4;
      v632 = (uint64_t)v629 >> 3;
      v633 = v561 - v630;
      if (v633)
      {
        v634 = 7 - v633;
        *(_BYTE *)(v631 + v632) &= ~(1 << v634);
        *(_BYTE *)(*(_QWORD *)a4 + v632) |= (v628 == 4) << v634;
        v635 = v561 + 1;
        *v15 = v561 + 1;
        if (v628 == 4)
          goto LABEL_716;
      }
      else
      {
        *(_BYTE *)(v631 + v632) = (v628 == 4) << 7;
        v635 = v561 + 1;
        *v15 = v561 + 1;
        if (v628 == 4)
          goto LABEL_716;
      }
      v636 = v635 + 7;
      if (v635 >= 0)
        v636 = v635;
      v637 = v636 & 0xFFFFFFF8;
      v638 = *(_QWORD *)a4;
      v639 = (uint64_t)v636 >> 3;
      v640 = v635 - v637;
      if (v640)
      {
        v641 = 7 - v640;
        *(_BYTE *)(v638 + v639) &= ~(1 << v641);
        *(_BYTE *)(*(_QWORD *)a4 + v639) |= ((v628 >> 1) & 1) << v641;
      }
      else
      {
        *(_BYTE *)(v638 + v639) = ((v628 & 2) != 0) << 7;
      }
      *(_DWORD *)(a4 + 8) = v561 + 2;
      v642 = v628 & 1;
      v643 = v561 + 9;
      if (v561 >= -2)
        v643 = v561 + 2;
      v644 = v643 & 0xFFFFFFF8;
      v645 = *(_QWORD *)a4;
      v646 = (uint64_t)v643 >> 3;
      v647 = v561 + 2 - v644;
      if (v647)
      {
        v648 = 7 - v647;
        *(_BYTE *)(v645 + v646) &= ~(1 << v648);
        v645 = *(_QWORD *)a4;
        v642 = *(unsigned __int8 *)(*(_QWORD *)a4 + v646) | (v642 << v648);
      }
      else
      {
        LOBYTE(v642) = (_BYTE)v642 << 7;
      }
      *(_BYTE *)(v645 + v646) = v642;
      v635 = v561 + 3;
      *v15 = v561 + 3;
LABEL_716:
      v649 = *(unsigned __int8 *)(v3107 + 87);
      v650 = v635 + 7;
      if (v635 >= 0)
        v650 = v635;
      v651 = v650 & 0xFFFFFFF8;
      v652 = *(_QWORD *)a4;
      v653 = (uint64_t)v650 >> 3;
      v654 = v635 - v651;
      if (v654)
      {
        v655 = 7 - v654;
        *(_BYTE *)(v652 + v653) &= ~(1 << v655);
        *(_BYTE *)(*(_QWORD *)a4 + v653) |= v649 << v655;
        v656 = v635 + 1;
        *v15 = v635 + 1;
        if (!*(_BYTE *)(v3107 + 86))
        {
LABEL_722:
          if (*(_DWORD *)(*(_QWORD *)v7 + 52) && *(_DWORD *)(*(_QWORD *)v7 + 40) && (*v9 & 0xFD) != 0)
          {
            v657 = *(unsigned __int8 *)(v3107 + 82);
            v658 = v656 + 7;
            if (v656 >= 0)
              v658 = v656;
            v659 = v658 & 0xFFFFFFF8;
            v660 = *(_QWORD *)a4;
            v661 = (uint64_t)v658 >> 3;
            v662 = v656 - v659;
            if (v662)
            {
              v663 = 7 - v662;
              *(_BYTE *)(v660 + v661) &= ~(1 << v663);
              *(_BYTE *)(*(_QWORD *)a4 + v661) |= v657 << v663;
            }
            else
            {
              *(_BYTE *)(v660 + v661) = (_BYTE)v657 << 7;
            }
            v380 = v635 + 2;
LABEL_733:
            *v15 = v380;
          }
        }
      }
      else
      {
        *(_BYTE *)(v652 + v653) = (_BYTE)v649 << 7;
        v656 = v635 + 1;
        *v15 = v635 + 1;
        if (!*(_BYTE *)(v3107 + 86))
          goto LABEL_722;
      }
LABEL_734:
      if (*((_BYTE *)v10 + 58))
      {
        v666 = *v15;
      }
      else
      {
        v666 = *v15;
        if (!*v8)
        {
          v667 = *(unsigned __int8 *)(v222 + 100);
          v668 = v666 + 7;
          if (v666 >= 0)
            v668 = *v15;
          v669 = v668 & 0xFFFFFFF8;
          v670 = *(_QWORD *)a4;
          v671 = (uint64_t)v668 >> 3;
          v672 = v666 - v669;
          if (v672)
          {
            v673 = 7 - v672;
            *(_BYTE *)(v670 + v671) &= ~(1 << v673);
            *(_BYTE *)(*(_QWORD *)a4 + v671) |= (v667 == 0) << v673;
          }
          else
          {
            *(_BYTE *)(v670 + v671) = (v667 == 0) << 7;
          }
          *v15 = ++v666;
        }
      }
      v674 = (int *)(v218 + 263744);
      v675 = *(_DWORD *)(*(_QWORD *)v7 + 36);
      v676 = *(_DWORD *)(v222 + 116);
      v677 = *(_DWORD *)(v222 + 120);
      v678 = *v220;
      v679 = v666 + 7;
      if (v666 >= 0)
        v679 = v666;
      v680 = v679 & 0xFFFFFFF8;
      v681 = *(_QWORD *)a4;
      v682 = (uint64_t)v679 >> 3;
      v683 = v666 - v680;
      if (v683)
      {
        v684 = 7 - v683;
        *(_BYTE *)(v681 + v682) &= ~(1 << v684);
        v681 = *(_QWORD *)a4;
        v678 = *(unsigned __int8 *)(*(_QWORD *)a4 + v682) | (v678 << v684);
      }
      else
      {
        LOBYTE(v678) = (_BYTE)v678 << 7;
      }
      *(_BYTE *)(v681 + v682) = v678;
      v3112 = (void *)(v218 + 239520);
      v685 = v666 + 1;
      *v15 = v685;
      if (*v220)
      {
        v686 = (int *)(v218 + 263772);
        v687 = v220[1];
        v688 = v220[5];
        if (v687 != v688)
        {
          v689 = 7 - v685;
          v690 = v688 - v687;
          do
          {
            while (1)
            {
              v693 = v685 + 7;
              if (v685 >= 0)
                v693 = v685;
              v694 = v693 & 0xFFFFFFF8;
              v695 = *(_QWORD *)a4;
              v696 = (uint64_t)v693 >> 3;
              if (v694 == v685)
                break;
              v691 = 1 << (v689 + v694);
              *(_BYTE *)(v695 + v696) &= ~(_BYTE)v691;
              *(_BYTE *)(*(_QWORD *)a4 + v696) |= v691;
              *v15 = ++v685;
              --v689;
              v692 = __CFADD__(v690++, 1);
              if (v692)
                goto LABEL_757;
            }
            *(_BYTE *)(v695 + v696) = 0x80;
            *v15 = ++v685;
            --v689;
            v692 = __CFADD__(v690++, 1);
          }
          while (!v692);
LABEL_757:
          v687 = v220[1];
        }
        if (v687 < *(_DWORD *)(v218 + 263792))
        {
          if (v685 >= 0)
            v697 = v685;
          else
            v697 = v685 + 7;
          v698 = v697 & 0xFFFFFFF8;
          v699 = *(_QWORD *)a4;
          v700 = (uint64_t)v697 >> 3;
          v701 = v685 - v698;
          if (v701)
            v701 = *(unsigned __int8 *)(v699 + v700) & ~(1 << (7 - v701));
          *(_BYTE *)(v699 + v700) = v701;
          *v15 = ++v685;
        }
        v702 = *v686;
        v703 = *(_DWORD *)(v218 + 263788);
        if (*v686 != v703)
        {
          v704 = 7 - v685;
          v705 = v703 - v702;
          do
          {
            while (1)
            {
              v707 = v685 + 7;
              if (v685 >= 0)
                v707 = v685;
              v708 = v707 & 0xFFFFFFF8;
              v709 = *(_QWORD *)a4;
              v710 = (uint64_t)v707 >> 3;
              if (v708 == v685)
                break;
              v706 = 1 << (v704 + v708);
              *(_BYTE *)(v709 + v710) &= ~(_BYTE)v706;
              *(_BYTE *)(*(_QWORD *)a4 + v710) |= v706;
              *v15 = ++v685;
              --v704;
              v692 = __CFADD__(v705++, 1);
              if (v692)
                goto LABEL_773;
            }
            *(_BYTE *)(v709 + v710) = 0x80;
            *v15 = ++v685;
            --v704;
            v692 = __CFADD__(v705++, 1);
          }
          while (!v692);
LABEL_773:
          v702 = *v686;
        }
        if (v702 < *(_DWORD *)(v218 + 263796))
        {
          if (v685 >= 0)
            v711 = v685;
          else
            v711 = v685 + 7;
          v712 = v711 & 0xFFFFFFF8;
          v713 = *(_QWORD *)a4;
          v714 = (uint64_t)v711 >> 3;
          v715 = v685 - v712;
          if (v715)
            v715 = *(unsigned __int8 *)(v713 + v714) & ~(1 << (7 - v715));
          *(_BYTE *)(v713 + v714) = v715;
          *v15 = v685 + 1;
        }
      }
      else
      {
        v716 = ~(-1 << v675);
        if (*v674 >= 1)
        {
          v717 = 0;
          v718 = (v677 + v716) >> v675;
          v719 = v218 + 263804;
          do
          {
            v727 = *(_DWORD *)(v719 + 4 * v717++);
            v728 = *(_DWORD *)(v719 + 4 * v717) - v727;
            if (v718 >= *(_DWORD *)(v218 + 263752))
              v729 = *(_DWORD *)(v218 + 263752);
            else
              v729 = v718;
            v730 = __clz(v729);
            v731 = v730 ^ 0x1F;
            v732 = 2 << (v730 ^ 0x1F);
            if (v729)
              v733 = v732;
            else
              v733 = 1;
            if (v729)
            {
              v734 = v728 - 1;
              v735 = v733 - v729;
              if (v735 >= v728)
              {
                if (v731)
                {
                  v746 = 7 - v685;
                  v747 = v731 + 1;
                  do
                  {
                    v750 = (v734 >> (v747 - 2)) & 1;
                    v751 = v685 + 7;
                    if (v685 >= 0)
                      v751 = v685;
                    v752 = v751 & 0xFFFFFFF8;
                    v749 = *(_QWORD *)a4;
                    v753 = (uint64_t)v751 >> 3;
                    if (v752 == v685)
                    {
                      LOBYTE(v750) = (_BYTE)v750 << 7;
                    }
                    else
                    {
                      v748 = v746 + v752;
                      *(_BYTE *)(v749 + v753) &= ~(1 << v748);
                      v749 = *(_QWORD *)a4;
                      v750 = *(unsigned __int8 *)(*(_QWORD *)a4 + v753) | (v750 << v748);
                    }
                    *(_BYTE *)(v749 + v753) = v750;
                    *v15 = ++v685;
                    --v746;
                    --v747;
                  }
                  while (v747 > 1);
                }
              }
              else
              {
                v736 = v734 - v735;
                if (v731)
                {
                  v737 = v735 + (v736 >> 1);
                  v738 = 7 - v685;
                  v739 = v731 + 1;
                  do
                  {
                    v742 = (v737 >> (v739 - 2)) & 1;
                    v743 = v685 + 7;
                    if (v685 >= 0)
                      v743 = v685;
                    v744 = v743 & 0xFFFFFFF8;
                    v741 = *(_QWORD *)a4;
                    v745 = (uint64_t)v743 >> 3;
                    if (v744 == v685)
                    {
                      LOBYTE(v742) = (_BYTE)v742 << 7;
                    }
                    else
                    {
                      v740 = v738 + v744;
                      *(_BYTE *)(v741 + v745) &= ~(1 << v740);
                      v741 = *(_QWORD *)a4;
                      v742 = *(unsigned __int8 *)(*(_QWORD *)a4 + v745) | (v742 << v740);
                    }
                    *(_BYTE *)(v741 + v745) = v742;
                    *v15 = ++v685;
                    --v738;
                    --v739;
                  }
                  while (v739 > 1);
                }
                v720 = v736 & 1;
                v721 = v685 + 7;
                if (v685 >= 0)
                  v721 = v685;
                v722 = v721 & 0xFFFFFFF8;
                v723 = *(_QWORD *)a4;
                v724 = (uint64_t)v721 >> 3;
                v725 = v685 - v722;
                if (v725)
                {
                  v726 = 7 - v725;
                  *(_BYTE *)(v723 + v724) &= ~(1 << v726);
                  v723 = *(_QWORD *)a4;
                  v720 = *(unsigned __int8 *)(*(_QWORD *)a4 + v724) | (v720 << v726);
                }
                else
                {
                  LOBYTE(v720) = (_BYTE)v720 << 7;
                }
                *(_BYTE *)(v723 + v724) = v720;
                *v15 = ++v685;
              }
            }
            v718 -= v728;
          }
          while (v717 < *v674);
        }
        if (*(int *)(v218 + 263748) >= 1)
        {
          v754 = 0;
          v755 = (v676 + v716) >> v675;
          v756 = v218 + 264064;
          do
          {
            v764 = *(_DWORD *)(v756 + 4 * v754++);
            v765 = *(_DWORD *)(v756 + 4 * v754) - v764;
            if (v755 >= *(_DWORD *)(v218 + 263756))
              v766 = *(_DWORD *)(v218 + 263756);
            else
              v766 = v755;
            v767 = __clz(v766);
            v768 = v767 ^ 0x1F;
            v769 = 2 << (v767 ^ 0x1F);
            if (v766)
              v770 = v769;
            else
              v770 = 1;
            if (v766)
            {
              v771 = v765 - 1;
              v772 = v770 - v766;
              if (v772 >= v765)
              {
                if (v768)
                {
                  v783 = 7 - v685;
                  v784 = v768 + 1;
                  do
                  {
                    v787 = (v771 >> (v784 - 2)) & 1;
                    v788 = v685 + 7;
                    if (v685 >= 0)
                      v788 = v685;
                    v789 = v788 & 0xFFFFFFF8;
                    v786 = *(_QWORD *)a4;
                    v790 = (uint64_t)v788 >> 3;
                    if (v789 == v685)
                    {
                      LOBYTE(v787) = (_BYTE)v787 << 7;
                    }
                    else
                    {
                      v785 = v783 + v789;
                      *(_BYTE *)(v786 + v790) &= ~(1 << v785);
                      v786 = *(_QWORD *)a4;
                      v787 = *(unsigned __int8 *)(*(_QWORD *)a4 + v790) | (v787 << v785);
                    }
                    *(_BYTE *)(v786 + v790) = v787;
                    *v15 = ++v685;
                    --v783;
                    --v784;
                  }
                  while (v784 > 1);
                }
              }
              else
              {
                v773 = v771 - v772;
                if (v768)
                {
                  v774 = v772 + (v773 >> 1);
                  v775 = 7 - v685;
                  v776 = v768 + 1;
                  do
                  {
                    v779 = (v774 >> (v776 - 2)) & 1;
                    v780 = v685 + 7;
                    if (v685 >= 0)
                      v780 = v685;
                    v781 = v780 & 0xFFFFFFF8;
                    v778 = *(_QWORD *)a4;
                    v782 = (uint64_t)v780 >> 3;
                    if (v781 == v685)
                    {
                      LOBYTE(v779) = (_BYTE)v779 << 7;
                    }
                    else
                    {
                      v777 = v775 + v781;
                      *(_BYTE *)(v778 + v782) &= ~(1 << v777);
                      v778 = *(_QWORD *)a4;
                      v779 = *(unsigned __int8 *)(*(_QWORD *)a4 + v782) | (v779 << v777);
                    }
                    *(_BYTE *)(v778 + v782) = v779;
                    *v15 = ++v685;
                    --v775;
                    --v776;
                  }
                  while (v776 > 1);
                }
                v757 = v773 & 1;
                v758 = v685 + 7;
                if (v685 >= 0)
                  v758 = v685;
                v759 = v758 & 0xFFFFFFF8;
                v760 = *(_QWORD *)a4;
                v761 = (uint64_t)v758 >> 3;
                v762 = v685 - v759;
                if (v762)
                {
                  v763 = 7 - v762;
                  *(_BYTE *)(v760 + v761) &= ~(1 << v763);
                  v760 = *(_QWORD *)a4;
                  v757 = *(unsigned __int8 *)(*(_QWORD *)a4 + v761) | (v757 << v763);
                }
                else
                {
                  LOBYTE(v757) = (_BYTE)v757 << 7;
                }
                *(_BYTE *)(v760 + v761) = v757;
                *v15 = ++v685;
              }
            }
            v755 -= v765;
          }
          while (v754 < *(int *)(v218 + 263748));
        }
      }
      *a3 = *(_OWORD *)a4;
      v791 = *(_DWORD *)(a4 + 8);
      if (*(_DWORD *)(v218 + 263744) * *(_DWORD *)(v218 + 263748) <= 1)
      {
        v794 = (_DWORD *)(v218 + 239520);
      }
      else
      {
        v792 = *(_DWORD *)(v218 + 263768);
        v793 = *(_DWORD *)(v218 + 263772);
        v794 = (_DWORD *)(v218 + 239520);
        if (v793 + v792 >= 1)
        {
          v795 = 7 - v791;
          v796 = v792 + v793 + 1;
          do
          {
            if (v791 >= 0)
              v798 = v791;
            else
              v798 = v791 + 7;
            v799 = v798 & 0xFFFFFFF8;
            v800 = *(_QWORD *)a4;
            v801 = (uint64_t)v798 >> 3;
            if (v799 == v791)
              LOBYTE(v797) = 0;
            else
              v797 = *(unsigned __int8 *)(v800 + v801) & ~(1 << (v795 + v799));
            *(_BYTE *)(v800 + v801) = v797;
            *v15 = ++v791;
            --v795;
            --v796;
          }
          while (v796 > 1);
        }
        v802 = v791 + 7;
        if (v791 >= 0)
          v802 = v791;
        v803 = v802 & 0xFFFFFFF8;
        v804 = *(_QWORD *)a4;
        v805 = (uint64_t)v802 >> 3;
        v806 = v791 - v803;
        if (v806)
        {
          v807 = 1 << (7 - v806);
          *(_BYTE *)(v804 + v805) &= ~(_BYTE)v807;
          v804 = *(_QWORD *)a4;
          v808 = *(_BYTE *)(*(_QWORD *)a4 + v805) | v807;
        }
        else
        {
          v808 = 0x80;
        }
        *(_BYTE *)(v804 + v805) = v808;
        *(_DWORD *)(a4 + 8) = v791 + 1;
        v809 = v791 + 8;
        if (v791 >= -1)
          v809 = v791 + 1;
        v810 = v809 & 0xFFFFFFF8;
        v811 = *(_QWORD *)a4;
        v812 = (uint64_t)v809 >> 3;
        v813 = v791 + 1 - v810;
        if (v813)
        {
          v814 = 1 << (7 - v813);
          *(_BYTE *)(v811 + v812) &= ~(_BYTE)v814;
          v811 = *(_QWORD *)a4;
          v815 = *(_BYTE *)(*(_QWORD *)a4 + v812) | v814;
        }
        else
        {
          v815 = 0x80;
        }
        *(_BYTE *)(v811 + v812) = v815;
        v791 += 2;
        *v15 = v791;
      }
      v816 = *(unsigned __int8 *)(*(_QWORD *)v7 + 77);
      v817 = *(unsigned __int8 *)(*(_QWORD *)v7 + 108);
      v818 = v794[34];
      v819 = v791 + 7;
      if (v791 >= 0)
        v819 = v791;
      v820 = v819 & 0xFFFFFFF8;
      v821 = *(_QWORD *)a4;
      v822 = (uint64_t)v819 >> 3;
      v823 = v791 - v820;
      if (v823)
      {
        v824 = 7 - v823;
        *(_BYTE *)(v821 + v822) &= ~(1 << v824);
        v821 = *(_QWORD *)a4;
        v825 = *(unsigned __int8 *)(*(_QWORD *)a4 + v822) | (((v818 >> 7) & 1) << v824);
      }
      else
      {
        LOBYTE(v825) = ((v794[34] & 0x80) != 0) << 7;
      }
      *(_BYTE *)(v821 + v822) = v825;
      *(_DWORD *)(a4 + 8) = v791 + 1;
      v826 = v791 + 8;
      if (v791 >= -1)
        v826 = v791 + 1;
      v827 = v826 & 0xFFFFFFF8;
      v828 = *(_QWORD *)a4;
      v829 = (uint64_t)v826 >> 3;
      v830 = v791 + 1 - v827;
      if (v830)
      {
        v831 = 7 - v830;
        *(_BYTE *)(v828 + v829) &= ~(1 << v831);
        v828 = *(_QWORD *)a4;
        v832 = *(unsigned __int8 *)(*(_QWORD *)a4 + v829) | (((v818 >> 6) & 1) << v831);
      }
      else
      {
        LOBYTE(v832) = ((v818 & 0x40) != 0) << 7;
      }
      *(_BYTE *)(v828 + v829) = v832;
      *(_DWORD *)(a4 + 8) = v791 + 2;
      v833 = v791 + 9;
      if (v791 >= -2)
        v833 = v791 + 2;
      v834 = v833 & 0xFFFFFFF8;
      v835 = *(_QWORD *)a4;
      v836 = (uint64_t)v833 >> 3;
      v837 = v791 + 2 - v834;
      if (v837)
      {
        v838 = 7 - v837;
        *(_BYTE *)(v835 + v836) &= ~(1 << v838);
        v835 = *(_QWORD *)a4;
        v839 = *(unsigned __int8 *)(*(_QWORD *)a4 + v836) | (((v818 >> 5) & 1) << v838);
      }
      else
      {
        LOBYTE(v839) = ((v818 & 0x20) != 0) << 7;
      }
      *(_BYTE *)(v835 + v836) = v839;
      *(_DWORD *)(a4 + 8) = v791 + 3;
      v840 = v791 + 10;
      if (v791 >= -3)
        v840 = v791 + 3;
      v841 = v840 & 0xFFFFFFF8;
      v842 = *(_QWORD *)a4;
      v843 = (uint64_t)v840 >> 3;
      v844 = v791 + 3 - v841;
      if (v844)
      {
        v845 = 7 - v844;
        *(_BYTE *)(v842 + v843) &= ~(1 << v845);
        v842 = *(_QWORD *)a4;
        v846 = *(unsigned __int8 *)(*(_QWORD *)a4 + v843) | (((v818 >> 4) & 1) << v845);
      }
      else
      {
        LOBYTE(v846) = ((v818 & 0x10) != 0) << 7;
      }
      *(_BYTE *)(v842 + v843) = v846;
      *(_DWORD *)(a4 + 8) = v791 + 4;
      v847 = v791 + 11;
      if (v791 >= -4)
        v847 = v791 + 4;
      v848 = v847 & 0xFFFFFFF8;
      v849 = *(_QWORD *)a4;
      v850 = (uint64_t)v847 >> 3;
      v851 = v791 + 4 - v848;
      if (v851)
      {
        v852 = 7 - v851;
        *(_BYTE *)(v849 + v850) &= ~(1 << v852);
        v849 = *(_QWORD *)a4;
        v853 = *(unsigned __int8 *)(*(_QWORD *)a4 + v850) | (((v818 >> 3) & 1) << v852);
      }
      else
      {
        LOBYTE(v853) = ((v818 & 8) != 0) << 7;
      }
      *(_BYTE *)(v849 + v850) = v853;
      *(_DWORD *)(a4 + 8) = v791 + 5;
      v854 = v791 + 12;
      if (v791 >= -5)
        v854 = v791 + 5;
      v855 = v854 & 0xFFFFFFF8;
      v856 = *(_QWORD *)a4;
      v857 = (uint64_t)v854 >> 3;
      v858 = v791 + 5 - v855;
      if (v858)
      {
        v859 = 7 - v858;
        *(_BYTE *)(v856 + v857) &= ~(1 << v859);
        v856 = *(_QWORD *)a4;
        v860 = *(unsigned __int8 *)(*(_QWORD *)a4 + v857) | (((v818 >> 2) & 1) << v859);
      }
      else
      {
        LOBYTE(v860) = ((v818 & 4) != 0) << 7;
      }
      *(_BYTE *)(v856 + v857) = v860;
      *(_DWORD *)(a4 + 8) = v791 + 6;
      v861 = v791 + 13;
      if (v791 >= -6)
        v861 = v791 + 6;
      v862 = v861 & 0xFFFFFFF8;
      v863 = *(_QWORD *)a4;
      v864 = (uint64_t)v861 >> 3;
      v865 = v791 + 6 - v862;
      if (v865)
      {
        v866 = 7 - v865;
        *(_BYTE *)(v863 + v864) &= ~(1 << v866);
        v863 = *(_QWORD *)a4;
        v867 = *(unsigned __int8 *)(*(_QWORD *)a4 + v864) | (((v818 >> 1) & 1) << v866);
      }
      else
      {
        LOBYTE(v867) = ((v818 & 2) != 0) << 7;
      }
      *(_BYTE *)(v863 + v864) = v867;
      *(_DWORD *)(a4 + 8) = v791 + 7;
      v868 = v818 & 1;
      v869 = v791 + 14;
      if (v791 >= -7)
        v869 = v791 + 7;
      v870 = v869 & 0xFFFFFFF8;
      v871 = *(_QWORD *)a4;
      v872 = (uint64_t)v869 >> 3;
      if (v791 + 7 == v870)
      {
        LOBYTE(v868) = (_BYTE)v868 << 7;
      }
      else
      {
        *(_BYTE *)(v871 + v872) &= ~(1 << (v870 - v791));
        v871 = *(_QWORD *)a4;
        v868 = *(unsigned __int8 *)(*(_QWORD *)a4 + v872) | (v868 << (v870 - v791));
      }
      *(_BYTE *)(v871 + v872) = v868;
      v873 = (_BYTE *)(v218 + 258016);
      *(_DWORD *)(a4 + 8) = v791 + 8;
      v874 = v794[35];
      if (v791 >= -8)
        v875 = v791 + 8;
      else
        v875 = v791 + 15;
      v876 = v791 + 8 - (v875 & 0xFFFFFFF8);
      v877 = *(_QWORD *)a4;
      v878 = (uint64_t)v875 >> 3;
      if (!v874)
      {
        if (v876)
        {
          *(_BYTE *)(v877 + v878) &= ~(1 << (7 - v876));
          v881 = v791 + 9;
          *v15 = v881;
          if (!v816)
            goto LABEL_957;
        }
        else
        {
          *(_BYTE *)(v877 + v878) = 0;
          v881 = v791 + 9;
          *v15 = v881;
          if (!v816)
            goto LABEL_957;
        }
        goto LABEL_1156;
      }
      if (v876)
      {
        v879 = 1 << (7 - v876);
        *(_BYTE *)(v877 + v878) &= ~(_BYTE)v879;
        v877 = *(_QWORD *)a4;
        v880 = *(_BYTE *)(*(_QWORD *)a4 + v878) | v879;
      }
      else
      {
        v880 = 0x80;
      }
      *(_BYTE *)(v877 + v878) = v880;
      *(_DWORD *)(a4 + 8) = v791 + 9;
      v882 = v791 + 16;
      if (v791 >= -9)
        v882 = v791 + 9;
      v883 = v882 & 0xFFFFFFF8;
      v884 = *(_QWORD *)a4;
      v885 = (uint64_t)v882 >> 3;
      v886 = v791 + 9 - v883;
      if (v886)
      {
        v887 = 7 - v886;
        *(_BYTE *)(v884 + v885) &= ~(1 << v887);
        v884 = *(_QWORD *)a4;
        v888 = *(unsigned __int8 *)(*(_QWORD *)a4 + v885) | (((v874 >> 6) & 1) << v887);
      }
      else
      {
        LOBYTE(v888) = ((v874 & 0x40) != 0) << 7;
      }
      *(_BYTE *)(v884 + v885) = v888;
      *(_DWORD *)(a4 + 8) = v791 + 10;
      v889 = v791 + 17;
      if (v791 >= -10)
        v889 = v791 + 10;
      v890 = v889 & 0xFFFFFFF8;
      v891 = *(_QWORD *)a4;
      v892 = (uint64_t)v889 >> 3;
      v893 = v791 + 10 - v890;
      if (v893)
      {
        v894 = 7 - v893;
        *(_BYTE *)(v891 + v892) &= ~(1 << v894);
        v891 = *(_QWORD *)a4;
        v895 = *(unsigned __int8 *)(*(_QWORD *)a4 + v892) | (((v874 >> 5) & 1) << v894);
      }
      else
      {
        LOBYTE(v895) = ((v874 & 0x20) != 0) << 7;
      }
      *(_BYTE *)(v891 + v892) = v895;
      *(_DWORD *)(a4 + 8) = v791 + 11;
      v896 = v791 + 18;
      if (v791 >= -11)
        v896 = v791 + 11;
      v897 = v896 & 0xFFFFFFF8;
      v898 = *(_QWORD *)a4;
      v899 = (uint64_t)v896 >> 3;
      v900 = v791 + 11 - v897;
      if (v900)
      {
        v901 = 7 - v900;
        *(_BYTE *)(v898 + v899) &= ~(1 << v901);
        v898 = *(_QWORD *)a4;
        v902 = *(unsigned __int8 *)(*(_QWORD *)a4 + v899) | (((v874 >> 4) & 1) << v901);
      }
      else
      {
        LOBYTE(v902) = ((v874 & 0x10) != 0) << 7;
      }
      *(_BYTE *)(v898 + v899) = v902;
      *(_DWORD *)(a4 + 8) = v791 + 12;
      v903 = v791 + 19;
      if (v791 >= -12)
        v903 = v791 + 12;
      v904 = v903 & 0xFFFFFFF8;
      v905 = *(_QWORD *)a4;
      v906 = (uint64_t)v903 >> 3;
      v907 = v791 + 12 - v904;
      if (v907)
      {
        v908 = 7 - v907;
        *(_BYTE *)(v905 + v906) &= ~(1 << v908);
        v905 = *(_QWORD *)a4;
        v909 = *(unsigned __int8 *)(*(_QWORD *)a4 + v906) | (((v874 >> 3) & 1) << v908);
      }
      else
      {
        LOBYTE(v909) = ((v874 & 8) != 0) << 7;
      }
      *(_BYTE *)(v905 + v906) = v909;
      *(_DWORD *)(a4 + 8) = v791 + 13;
      v910 = v791 + 20;
      if (v791 >= -13)
        v910 = v791 + 13;
      v911 = v910 & 0xFFFFFFF8;
      v912 = *(_QWORD *)a4;
      v913 = (uint64_t)v910 >> 3;
      v914 = v791 + 13 - v911;
      if (v914)
      {
        v915 = 7 - v914;
        *(_BYTE *)(v912 + v913) &= ~(1 << v915);
        v912 = *(_QWORD *)a4;
        v916 = *(unsigned __int8 *)(*(_QWORD *)a4 + v913) | (((v874 >> 2) & 1) << v915);
      }
      else
      {
        LOBYTE(v916) = ((v874 & 4) != 0) << 7;
      }
      *(_BYTE *)(v912 + v913) = v916;
      *(_DWORD *)(a4 + 8) = v791 + 14;
      v917 = v791 + 21;
      if (v791 >= -14)
        v917 = v791 + 14;
      v918 = v917 & 0xFFFFFFF8;
      v919 = *(_QWORD *)a4;
      v920 = (uint64_t)v917 >> 3;
      v921 = v791 + 14 - v918;
      if (v921)
      {
        v922 = 7 - v921;
        *(_BYTE *)(v919 + v920) &= ~(1 << v922);
        v919 = *(_QWORD *)a4;
        v923 = *(unsigned __int8 *)(*(_QWORD *)a4 + v920) | (((v874 >> 1) & 1) << v922);
      }
      else
      {
        LOBYTE(v923) = ((v874 & 2) != 0) << 7;
      }
      *(_BYTE *)(v919 + v920) = v923;
      v794 = (_DWORD *)(v218 + 239520);
      *(_DWORD *)(a4 + 8) = v791 + 15;
      v924 = v874 & 1;
      v925 = v791 + 22;
      if (v791 >= -15)
        v925 = v791 + 15;
      v926 = v925 & 0xFFFFFFF8;
      v927 = *(_QWORD *)a4;
      v928 = (uint64_t)v925 >> 3;
      v929 = v791 + 15 - v926;
      if (v929)
      {
        v930 = 7 - v929;
        *(_BYTE *)(v927 + v928) &= ~(1 << v930);
        *(_BYTE *)(*(_QWORD *)a4 + v928) |= v924 << v930;
        v881 = v791 + 16;
        *v15 = v881;
        if (!v816)
          goto LABEL_957;
        goto LABEL_1156;
      }
      *(_BYTE *)(v927 + v928) = (_BYTE)v924 << 7;
      v881 = v791 + 16;
      *v15 = v881;
      if (v816)
        goto LABEL_1156;
LABEL_957:
      v931 = v794[36];
      if (v931 == v794[37])
      {
        v932 = v794[38] != v794[39];
        if (!v817)
          goto LABEL_970;
LABEL_961:
        v933 = v881 + 7;
        if (v881 >= 0)
          v933 = v881;
        v934 = v933 & 0xFFFFFFF8;
        v935 = *(_QWORD *)a4;
        v936 = (uint64_t)v933 >> 3;
        v937 = v881 - v934;
        if (v937)
        {
          v938 = 7 - v937;
          *(_BYTE *)(v935 + v936) &= ~(1 << v938);
          *(_BYTE *)(*(_QWORD *)a4 + v936) |= v932 << v938;
        }
        else
        {
          if (v932)
            v939 = 0x80;
          else
            v939 = 0;
          *(_BYTE *)(v935 + v936) = v939;
        }
        *v15 = ++v881;
        v931 = v794[36];
        goto LABEL_970;
      }
      v932 = 1;
      if (v817)
        goto LABEL_961;
LABEL_970:
      v940 = v881 + 7;
      if (v881 >= 0)
        v940 = v881;
      v941 = v881 - (v940 & 0xFFFFFFF8);
      v942 = *(_QWORD *)a4;
      v943 = (uint64_t)v940 >> 3;
      if (v931)
      {
        if (v941)
        {
          v944 = 1 << (7 - v941);
          *(_BYTE *)(v942 + v943) &= ~(_BYTE)v944;
          v942 = *(_QWORD *)a4;
          v945 = *(_BYTE *)(*(_QWORD *)a4 + v943) | v944;
        }
        else
        {
          v945 = 0x80;
        }
        *(_BYTE *)(v942 + v943) = v945;
        *(_DWORD *)(a4 + 8) = v881 + 1;
        v947 = v881 + 8;
        if (v881 >= -1)
          v947 = v881 + 1;
        v948 = v947 & 0xFFFFFFF8;
        v949 = *(_QWORD *)a4;
        v950 = (uint64_t)v947 >> 3;
        v951 = v881 + 1 - v948;
        if (v951)
        {
          v952 = 7 - v951;
          *(_BYTE *)(v949 + v950) &= ~(1 << v952);
          v949 = *(_QWORD *)a4;
          v953 = *(unsigned __int8 *)(*(_QWORD *)a4 + v950) | (((v931 >> 6) & 1) << v952);
        }
        else
        {
          LOBYTE(v953) = ((v931 & 0x40) != 0) << 7;
        }
        *(_BYTE *)(v949 + v950) = v953;
        *(_DWORD *)(a4 + 8) = v881 + 2;
        v954 = v881 + 9;
        if (v881 >= -2)
          v954 = v881 + 2;
        v955 = v954 & 0xFFFFFFF8;
        v956 = *(_QWORD *)a4;
        v957 = (uint64_t)v954 >> 3;
        v958 = v881 + 2 - v955;
        if (v958)
        {
          v959 = 7 - v958;
          *(_BYTE *)(v956 + v957) &= ~(1 << v959);
          v956 = *(_QWORD *)a4;
          v960 = *(unsigned __int8 *)(*(_QWORD *)a4 + v957) | (((v931 >> 5) & 1) << v959);
        }
        else
        {
          LOBYTE(v960) = ((v931 & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v956 + v957) = v960;
        *(_DWORD *)(a4 + 8) = v881 + 3;
        v961 = v881 + 10;
        if (v881 >= -3)
          v961 = v881 + 3;
        v962 = v961 & 0xFFFFFFF8;
        v963 = *(_QWORD *)a4;
        v964 = (uint64_t)v961 >> 3;
        v965 = v881 + 3 - v962;
        if (v965)
        {
          v966 = 7 - v965;
          *(_BYTE *)(v963 + v964) &= ~(1 << v966);
          v963 = *(_QWORD *)a4;
          v967 = *(unsigned __int8 *)(*(_QWORD *)a4 + v964) | (((v931 >> 4) & 1) << v966);
        }
        else
        {
          LOBYTE(v967) = ((v931 & 0x10) != 0) << 7;
        }
        *(_BYTE *)(v963 + v964) = v967;
        *(_DWORD *)(a4 + 8) = v881 + 4;
        v968 = v881 + 11;
        if (v881 >= -4)
          v968 = v881 + 4;
        v969 = v968 & 0xFFFFFFF8;
        v970 = *(_QWORD *)a4;
        v971 = (uint64_t)v968 >> 3;
        v972 = v881 + 4 - v969;
        if (v972)
        {
          v973 = 7 - v972;
          *(_BYTE *)(v970 + v971) &= ~(1 << v973);
          v970 = *(_QWORD *)a4;
          v974 = *(unsigned __int8 *)(*(_QWORD *)a4 + v971) | (((v931 >> 3) & 1) << v973);
        }
        else
        {
          LOBYTE(v974) = ((v931 & 8) != 0) << 7;
        }
        *(_BYTE *)(v970 + v971) = v974;
        *(_DWORD *)(a4 + 8) = v881 + 5;
        v975 = v881 + 12;
        if (v881 >= -5)
          v975 = v881 + 5;
        v976 = v975 & 0xFFFFFFF8;
        v977 = *(_QWORD *)a4;
        v978 = (uint64_t)v975 >> 3;
        v979 = v881 + 5 - v976;
        if (v979)
        {
          v980 = 7 - v979;
          *(_BYTE *)(v977 + v978) &= ~(1 << v980);
          v977 = *(_QWORD *)a4;
          v981 = *(unsigned __int8 *)(*(_QWORD *)a4 + v978) | (((v931 >> 2) & 1) << v980);
        }
        else
        {
          LOBYTE(v981) = ((v931 & 4) != 0) << 7;
        }
        *(_BYTE *)(v977 + v978) = v981;
        *(_DWORD *)(a4 + 8) = v881 + 6;
        v982 = v881 + 13;
        if (v881 >= -6)
          v982 = v881 + 6;
        v983 = v982 & 0xFFFFFFF8;
        v984 = *(_QWORD *)a4;
        v985 = (uint64_t)v982 >> 3;
        v986 = v881 + 6 - v983;
        if (v986)
        {
          v987 = 7 - v986;
          *(_BYTE *)(v984 + v985) &= ~(1 << v987);
          v984 = *(_QWORD *)a4;
          v988 = *(unsigned __int8 *)(*(_QWORD *)a4 + v985) | (((v931 >> 1) & 1) << v987);
        }
        else
        {
          LOBYTE(v988) = ((v931 & 2) != 0) << 7;
        }
        *(_BYTE *)(v984 + v985) = v988;
        v794 = (_DWORD *)(v218 + 239520);
        *(_DWORD *)(a4 + 8) = v881 + 7;
        v989 = v931 & 1;
        v990 = v881 + 14;
        if (v881 >= -7)
          v990 = v881 + 7;
        v991 = v990 & 0xFFFFFFF8;
        v992 = *(_QWORD *)a4;
        v993 = (uint64_t)v990 >> 3;
        if (v881 + 7 == v991)
        {
          LOBYTE(v989) = (_BYTE)v989 << 7;
        }
        else
        {
          *(_BYTE *)(v992 + v993) &= ~(1 << (v991 - v881));
          v992 = *(_QWORD *)a4;
          v989 = *(unsigned __int8 *)(*(_QWORD *)a4 + v993) | (v989 << (v991 - v881));
        }
        *(_BYTE *)(v992 + v993) = v989;
        v994 = 8;
      }
      else
      {
        if (v941)
          v946 = *(unsigned __int8 *)(v942 + v943) & ~(1 << (7 - v941));
        else
          LOBYTE(v946) = 0;
        *(_BYTE *)(v942 + v943) = v946;
        v994 = 1;
      }
      v995 = __OFADD__(v881, v994);
      v996 = v881 + v994;
      *(_DWORD *)(a4 + 8) = v996;
      v997 = v794[38];
      v998 = v996 + 7;
      if (v996 < 0 == v995)
        v998 = v996;
      v999 = v996 - (v998 & 0xFFFFFFF8);
      v1000 = *(_QWORD *)a4;
      v1001 = (uint64_t)v998 >> 3;
      if (v997)
      {
        if (v999)
        {
          v1002 = 1 << (7 - v999);
          *(_BYTE *)(v1000 + v1001) &= ~(_BYTE)v1002;
          v1000 = *(_QWORD *)a4;
          v1003 = *(_BYTE *)(*(_QWORD *)a4 + v1001) | v1002;
        }
        else
        {
          v1003 = 0x80;
        }
        *(_BYTE *)(v1000 + v1001) = v1003;
        *(_DWORD *)(a4 + 8) = v996 + 1;
        v1004 = v996 + 8;
        if (v996 >= -1)
          v1004 = v996 + 1;
        v1005 = v1004 & 0xFFFFFFF8;
        v1006 = *(_QWORD *)a4;
        v1007 = (uint64_t)v1004 >> 3;
        v1008 = v996 + 1 - v1005;
        if (v1008)
        {
          v1009 = 7 - v1008;
          *(_BYTE *)(v1006 + v1007) &= ~(1 << v1009);
          v1006 = *(_QWORD *)a4;
          v1010 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1007) | (((v997 >> 6) & 1) << v1009);
        }
        else
        {
          LOBYTE(v1010) = ((v997 & 0x40) != 0) << 7;
        }
        *(_BYTE *)(v1006 + v1007) = v1010;
        *(_DWORD *)(a4 + 8) = v996 + 2;
        v1011 = v996 + 9;
        if (v996 >= -2)
          v1011 = v996 + 2;
        v1012 = v1011 & 0xFFFFFFF8;
        v1013 = *(_QWORD *)a4;
        v1014 = (uint64_t)v1011 >> 3;
        v1015 = v996 + 2 - v1012;
        if (v1015)
        {
          v1016 = 7 - v1015;
          *(_BYTE *)(v1013 + v1014) &= ~(1 << v1016);
          v1013 = *(_QWORD *)a4;
          v1017 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1014) | (((v997 >> 5) & 1) << v1016);
        }
        else
        {
          LOBYTE(v1017) = ((v997 & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v1013 + v1014) = v1017;
        *(_DWORD *)(a4 + 8) = v996 + 3;
        v1018 = v996 + 10;
        if (v996 >= -3)
          v1018 = v996 + 3;
        v1019 = v1018 & 0xFFFFFFF8;
        v1020 = *(_QWORD *)a4;
        v1021 = (uint64_t)v1018 >> 3;
        v1022 = v996 + 3 - v1019;
        if (v1022)
        {
          v1023 = 7 - v1022;
          *(_BYTE *)(v1020 + v1021) &= ~(1 << v1023);
          v1020 = *(_QWORD *)a4;
          v1024 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1021) | (((v997 >> 4) & 1) << v1023);
        }
        else
        {
          LOBYTE(v1024) = ((v997 & 0x10) != 0) << 7;
        }
        *(_BYTE *)(v1020 + v1021) = v1024;
        *(_DWORD *)(a4 + 8) = v996 + 4;
        v1025 = v996 + 11;
        if (v996 >= -4)
          v1025 = v996 + 4;
        v1026 = v1025 & 0xFFFFFFF8;
        v1027 = *(_QWORD *)a4;
        v1028 = (uint64_t)v1025 >> 3;
        v1029 = v996 + 4 - v1026;
        if (v1029)
        {
          v1030 = 7 - v1029;
          *(_BYTE *)(v1027 + v1028) &= ~(1 << v1030);
          v1027 = *(_QWORD *)a4;
          v1031 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1028) | (((v997 >> 3) & 1) << v1030);
        }
        else
        {
          LOBYTE(v1031) = ((v997 & 8) != 0) << 7;
        }
        *(_BYTE *)(v1027 + v1028) = v1031;
        *(_DWORD *)(a4 + 8) = v996 + 5;
        v1032 = v996 + 12;
        if (v996 >= -5)
          v1032 = v996 + 5;
        v1033 = v1032 & 0xFFFFFFF8;
        v1034 = *(_QWORD *)a4;
        v1035 = (uint64_t)v1032 >> 3;
        v1036 = v996 + 5 - v1033;
        if (v1036)
        {
          v1037 = 7 - v1036;
          *(_BYTE *)(v1034 + v1035) &= ~(1 << v1037);
          v1034 = *(_QWORD *)a4;
          v1038 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1035) | (((v997 >> 2) & 1) << v1037);
        }
        else
        {
          LOBYTE(v1038) = ((v997 & 4) != 0) << 7;
        }
        *(_BYTE *)(v1034 + v1035) = v1038;
        *(_DWORD *)(a4 + 8) = v996 + 6;
        v1039 = v996 + 13;
        if (v996 >= -6)
          v1039 = v996 + 6;
        v1040 = v1039 & 0xFFFFFFF8;
        v1041 = *(_QWORD *)a4;
        v1042 = (uint64_t)v1039 >> 3;
        v1043 = v996 + 6 - v1040;
        if (v1043)
        {
          v1044 = 7 - v1043;
          *(_BYTE *)(v1041 + v1042) &= ~(1 << v1044);
          v1041 = *(_QWORD *)a4;
          v1045 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1042) | (((v997 >> 1) & 1) << v1044);
        }
        else
        {
          LOBYTE(v1045) = ((v997 & 2) != 0) << 7;
        }
        *(_BYTE *)(v1041 + v1042) = v1045;
        v794 = (_DWORD *)(v218 + 239520);
        *(_DWORD *)(a4 + 8) = v996 + 7;
        v1046 = v997 & 1;
        v1047 = v996 + 14;
        if (v996 >= -7)
          v1047 = v996 + 7;
        v1048 = v1047 & 0xFFFFFFF8;
        v1049 = *(_QWORD *)a4;
        v1050 = (uint64_t)v1047 >> 3;
        if (v996 + 7 == v1048)
        {
          *(_BYTE *)(v1049 + v1050) = (_BYTE)v1046 << 7;
          v881 = v996 + 8;
          *v15 = v881;
          if (!v932)
            goto LABEL_1156;
        }
        else
        {
          *(_BYTE *)(v1049 + v1050) &= ~(1 << (v1048 - v996));
          *(_BYTE *)(*(_QWORD *)a4 + v1050) |= v1046 << (v1048 - v996);
          v881 = v996 + 8;
          *v15 = v881;
          if (!v932)
            goto LABEL_1156;
        }
      }
      else if (v999)
      {
        *(_BYTE *)(v1000 + v1001) &= ~(1 << (7 - v999));
        v881 = v996 + 1;
        *v15 = v881;
        if (!v932)
          goto LABEL_1156;
      }
      else
      {
        *(_BYTE *)(v1000 + v1001) = 0;
        v881 = v996 + 1;
        *v15 = v881;
        if (!v932)
          goto LABEL_1156;
      }
      v1051 = v794[37];
      v1052 = v881 + 7;
      if (v881 >= 0)
        v1052 = v881;
      v1053 = v881 - (v1052 & 0xFFFFFFF8);
      v1054 = *(_QWORD *)a4;
      v1055 = (uint64_t)v1052 >> 3;
      if (v1051)
      {
        if (v1053)
        {
          v1056 = 1 << (7 - v1053);
          *(_BYTE *)(v1054 + v1055) &= ~(_BYTE)v1056;
          v1054 = *(_QWORD *)a4;
          v1057 = *(_BYTE *)(*(_QWORD *)a4 + v1055) | v1056;
        }
        else
        {
          v1057 = 0x80;
        }
        *(_BYTE *)(v1054 + v1055) = v1057;
        *(_DWORD *)(a4 + 8) = v881 + 1;
        v1059 = v881 + 8;
        if (v881 >= -1)
          v1059 = v881 + 1;
        v1060 = v1059 & 0xFFFFFFF8;
        v1061 = *(_QWORD *)a4;
        v1062 = (uint64_t)v1059 >> 3;
        v1063 = v881 + 1 - v1060;
        if (v1063)
        {
          v1064 = 7 - v1063;
          *(_BYTE *)(v1061 + v1062) &= ~(1 << v1064);
          v1061 = *(_QWORD *)a4;
          v1065 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1062) | (((v1051 >> 6) & 1) << v1064);
        }
        else
        {
          LOBYTE(v1065) = ((v1051 & 0x40) != 0) << 7;
        }
        *(_BYTE *)(v1061 + v1062) = v1065;
        *(_DWORD *)(a4 + 8) = v881 + 2;
        v1066 = v881 + 9;
        if (v881 >= -2)
          v1066 = v881 + 2;
        v1067 = v1066 & 0xFFFFFFF8;
        v1068 = *(_QWORD *)a4;
        v1069 = (uint64_t)v1066 >> 3;
        v1070 = v881 + 2 - v1067;
        if (v1070)
        {
          v1071 = 7 - v1070;
          *(_BYTE *)(v1068 + v1069) &= ~(1 << v1071);
          v1068 = *(_QWORD *)a4;
          v1072 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1069) | (((v1051 >> 5) & 1) << v1071);
        }
        else
        {
          LOBYTE(v1072) = ((v1051 & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v1068 + v1069) = v1072;
        *(_DWORD *)(a4 + 8) = v881 + 3;
        v1073 = v881 + 10;
        if (v881 >= -3)
          v1073 = v881 + 3;
        v1074 = v1073 & 0xFFFFFFF8;
        v1075 = *(_QWORD *)a4;
        v1076 = (uint64_t)v1073 >> 3;
        v1077 = v881 + 3 - v1074;
        if (v1077)
        {
          v1078 = 7 - v1077;
          *(_BYTE *)(v1075 + v1076) &= ~(1 << v1078);
          v1075 = *(_QWORD *)a4;
          v1079 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1076) | (((v1051 >> 4) & 1) << v1078);
        }
        else
        {
          LOBYTE(v1079) = ((v1051 & 0x10) != 0) << 7;
        }
        *(_BYTE *)(v1075 + v1076) = v1079;
        *(_DWORD *)(a4 + 8) = v881 + 4;
        v1080 = v881 + 11;
        if (v881 >= -4)
          v1080 = v881 + 4;
        v1081 = v1080 & 0xFFFFFFF8;
        v1082 = *(_QWORD *)a4;
        v1083 = (uint64_t)v1080 >> 3;
        v1084 = v881 + 4 - v1081;
        if (v1084)
        {
          v1085 = 7 - v1084;
          *(_BYTE *)(v1082 + v1083) &= ~(1 << v1085);
          v1082 = *(_QWORD *)a4;
          v1086 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1083) | (((v1051 >> 3) & 1) << v1085);
        }
        else
        {
          LOBYTE(v1086) = ((v1051 & 8) != 0) << 7;
        }
        *(_BYTE *)(v1082 + v1083) = v1086;
        *(_DWORD *)(a4 + 8) = v881 + 5;
        v1087 = v881 + 12;
        if (v881 >= -5)
          v1087 = v881 + 5;
        v1088 = v1087 & 0xFFFFFFF8;
        v1089 = *(_QWORD *)a4;
        v1090 = (uint64_t)v1087 >> 3;
        v1091 = v881 + 5 - v1088;
        if (v1091)
        {
          v1092 = 7 - v1091;
          *(_BYTE *)(v1089 + v1090) &= ~(1 << v1092);
          v1089 = *(_QWORD *)a4;
          v1093 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1090) | (((v1051 >> 2) & 1) << v1092);
        }
        else
        {
          LOBYTE(v1093) = ((v1051 & 4) != 0) << 7;
        }
        *(_BYTE *)(v1089 + v1090) = v1093;
        *(_DWORD *)(a4 + 8) = v881 + 6;
        v1094 = v881 + 13;
        if (v881 >= -6)
          v1094 = v881 + 6;
        v1095 = v1094 & 0xFFFFFFF8;
        v1096 = *(_QWORD *)a4;
        v1097 = (uint64_t)v1094 >> 3;
        v1098 = v881 + 6 - v1095;
        if (v1098)
        {
          v1099 = 7 - v1098;
          *(_BYTE *)(v1096 + v1097) &= ~(1 << v1099);
          v1096 = *(_QWORD *)a4;
          v1100 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1097) | (((v1051 >> 1) & 1) << v1099);
        }
        else
        {
          LOBYTE(v1100) = ((v1051 & 2) != 0) << 7;
        }
        *(_BYTE *)(v1096 + v1097) = v1100;
        *(_DWORD *)(a4 + 8) = v881 + 7;
        v1101 = v1051 & 1;
        v1102 = v881 + 14;
        if (v881 >= -7)
          v1102 = v881 + 7;
        v1103 = v1102 & 0xFFFFFFF8;
        v1104 = *(_QWORD *)a4;
        v1105 = (uint64_t)v1102 >> 3;
        if (v881 + 7 == v1103)
        {
          LOBYTE(v1101) = (_BYTE)v1101 << 7;
        }
        else
        {
          *(_BYTE *)(v1104 + v1105) &= ~(1 << (v1103 - v881));
          v1104 = *(_QWORD *)a4;
          v1101 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1105) | (v1101 << (v1103 - v881));
        }
        *(_BYTE *)(v1104 + v1105) = v1101;
        v1106 = 8;
      }
      else
      {
        if (v1053)
          v1058 = *(unsigned __int8 *)(v1054 + v1055) & ~(1 << (7 - v1053));
        else
          LOBYTE(v1058) = 0;
        *(_BYTE *)(v1054 + v1055) = v1058;
        v1106 = 1;
      }
      v995 = __OFADD__(v881, v1106);
      v1107 = v881 + v1106;
      *(_DWORD *)(a4 + 8) = v1107;
      v1108 = v794[39];
      v1109 = v1107 + 7;
      if (v1107 < 0 == v995)
        v1109 = v1107;
      v1110 = v1107 - (v1109 & 0xFFFFFFF8);
      v1111 = *(_QWORD *)a4;
      v1112 = (uint64_t)v1109 >> 3;
      if (v1108)
      {
        if (v1110)
        {
          v1113 = 1 << (7 - v1110);
          *(_BYTE *)(v1111 + v1112) &= ~(_BYTE)v1113;
          v1111 = *(_QWORD *)a4;
          v1114 = *(_BYTE *)(*(_QWORD *)a4 + v1112) | v1113;
        }
        else
        {
          v1114 = 0x80;
        }
        *(_BYTE *)(v1111 + v1112) = v1114;
        *(_DWORD *)(a4 + 8) = v1107 + 1;
        v1116 = v1107 + 8;
        if (v1107 >= -1)
          v1116 = v1107 + 1;
        v1117 = v1116 & 0xFFFFFFF8;
        v1118 = *(_QWORD *)a4;
        v1119 = (uint64_t)v1116 >> 3;
        v1120 = v1107 + 1 - v1117;
        if (v1120)
        {
          v1121 = 7 - v1120;
          *(_BYTE *)(v1118 + v1119) &= ~(1 << v1121);
          v1118 = *(_QWORD *)a4;
          v1122 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1119) | (((v1108 >> 6) & 1) << v1121);
        }
        else
        {
          LOBYTE(v1122) = ((v1108 & 0x40) != 0) << 7;
        }
        *(_BYTE *)(v1118 + v1119) = v1122;
        *(_DWORD *)(a4 + 8) = v1107 + 2;
        v1123 = v1107 + 9;
        if (v1107 >= -2)
          v1123 = v1107 + 2;
        v1124 = v1123 & 0xFFFFFFF8;
        v1125 = *(_QWORD *)a4;
        v1126 = (uint64_t)v1123 >> 3;
        v1127 = v1107 + 2 - v1124;
        if (v1127)
        {
          v1128 = 7 - v1127;
          *(_BYTE *)(v1125 + v1126) &= ~(1 << v1128);
          v1125 = *(_QWORD *)a4;
          v1129 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1126) | (((v1108 >> 5) & 1) << v1128);
        }
        else
        {
          LOBYTE(v1129) = ((v1108 & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v1125 + v1126) = v1129;
        *(_DWORD *)(a4 + 8) = v1107 + 3;
        v1130 = v1107 + 10;
        if (v1107 >= -3)
          v1130 = v1107 + 3;
        v1131 = v1130 & 0xFFFFFFF8;
        v1132 = *(_QWORD *)a4;
        v1133 = (uint64_t)v1130 >> 3;
        v1134 = v1107 + 3 - v1131;
        if (v1134)
        {
          v1135 = 7 - v1134;
          *(_BYTE *)(v1132 + v1133) &= ~(1 << v1135);
          v1132 = *(_QWORD *)a4;
          v1136 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1133) | (((v1108 >> 4) & 1) << v1135);
        }
        else
        {
          LOBYTE(v1136) = ((v1108 & 0x10) != 0) << 7;
        }
        *(_BYTE *)(v1132 + v1133) = v1136;
        *(_DWORD *)(a4 + 8) = v1107 + 4;
        v1137 = v1107 + 11;
        if (v1107 >= -4)
          v1137 = v1107 + 4;
        v1138 = v1137 & 0xFFFFFFF8;
        v1139 = *(_QWORD *)a4;
        v1140 = (uint64_t)v1137 >> 3;
        v1141 = v1107 + 4 - v1138;
        if (v1141)
        {
          v1142 = 7 - v1141;
          *(_BYTE *)(v1139 + v1140) &= ~(1 << v1142);
          v1139 = *(_QWORD *)a4;
          v1143 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1140) | (((v1108 >> 3) & 1) << v1142);
        }
        else
        {
          LOBYTE(v1143) = ((v1108 & 8) != 0) << 7;
        }
        *(_BYTE *)(v1139 + v1140) = v1143;
        *(_DWORD *)(a4 + 8) = v1107 + 5;
        v1144 = v1107 + 12;
        if (v1107 >= -5)
          v1144 = v1107 + 5;
        v1145 = v1144 & 0xFFFFFFF8;
        v1146 = *(_QWORD *)a4;
        v1147 = (uint64_t)v1144 >> 3;
        v1148 = v1107 + 5 - v1145;
        if (v1148)
        {
          v1149 = 7 - v1148;
          *(_BYTE *)(v1146 + v1147) &= ~(1 << v1149);
          v1146 = *(_QWORD *)a4;
          v1150 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1147) | (((v1108 >> 2) & 1) << v1149);
        }
        else
        {
          LOBYTE(v1150) = ((v1108 & 4) != 0) << 7;
        }
        *(_BYTE *)(v1146 + v1147) = v1150;
        *(_DWORD *)(a4 + 8) = v1107 + 6;
        v1151 = v1107 + 13;
        if (v1107 >= -6)
          v1151 = v1107 + 6;
        v1152 = v1151 & 0xFFFFFFF8;
        v1153 = *(_QWORD *)a4;
        v1154 = (uint64_t)v1151 >> 3;
        v1155 = v1107 + 6 - v1152;
        if (v1155)
        {
          v1156 = 7 - v1155;
          *(_BYTE *)(v1153 + v1154) &= ~(1 << v1156);
          v1153 = *(_QWORD *)a4;
          v1157 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1154) | (((v1108 >> 1) & 1) << v1156);
        }
        else
        {
          LOBYTE(v1157) = ((v1108 & 2) != 0) << 7;
        }
        *(_BYTE *)(v1153 + v1154) = v1157;
        *(_DWORD *)(a4 + 8) = v1107 + 7;
        v1158 = v1108 & 1;
        v1159 = v1107 + 14;
        if (v1107 >= -7)
          v1159 = v1107 + 7;
        v1160 = v1159 & 0xFFFFFFF8;
        v1161 = *(_QWORD *)a4;
        v1162 = (uint64_t)v1159 >> 3;
        if (v1107 + 7 == v1160)
        {
          LOBYTE(v1158) = (_BYTE)v1158 << 7;
        }
        else
        {
          *(_BYTE *)(v1161 + v1162) &= ~(1 << (v1160 - v1107));
          v1161 = *(_QWORD *)a4;
          v1158 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1162) | (v1158 << (v1160 - v1107));
        }
        *(_BYTE *)(v1161 + v1162) = v1158;
        v1163 = 8;
      }
      else
      {
        if (v1110)
          v1115 = *(unsigned __int8 *)(v1111 + v1112) & ~(1 << (7 - v1110));
        else
          LOBYTE(v1115) = 0;
        *(_BYTE *)(v1111 + v1112) = v1115;
        v1163 = 1;
      }
      v881 = v1107 + v1163;
      *v15 = v881;
LABEL_1156:
      v1164 = *v873;
      v1165 = v881 + 7;
      if (v881 >= 0)
        v1165 = v881;
      v1166 = v1165 & 0xFFFFFFF8;
      v1167 = *(_QWORD *)a4;
      v1168 = (uint64_t)v1165 >> 3;
      v1169 = v881 - v1166;
      if (v1169)
      {
        v1170 = 7 - v1169;
        *(_BYTE *)(v1167 + v1168) &= ~(1 << v1170);
        *(_BYTE *)(*(_QWORD *)a4 + v1168) |= v1164 << v1170;
        v1171 = v881 + 1;
        *v15 = v881 + 1;
        if (!*v873)
          goto LABEL_1224;
      }
      else
      {
        *(_BYTE *)(v1167 + v1168) = (_BYTE)v1164 << 7;
        v1171 = v881 + 1;
        *v15 = v881 + 1;
        if (!*v873)
          goto LABEL_1224;
      }
      v1172 = *(_DWORD *)(v218 + 258020);
      v1173 = v1171 + 7;
      if (v1171 >= 0)
        v1173 = v1171;
      v1174 = v1173 & 0xFFFFFFF8;
      v1175 = *(_QWORD *)a4;
      v1176 = (uint64_t)v1173 >> 3;
      v1177 = v1171 - v1174;
      if (v1177)
      {
        v1178 = 7 - v1177;
        *(_BYTE *)(v1175 + v1176) &= ~(1 << v1178);
        *(_BYTE *)(*(_QWORD *)a4 + v1176) |= ((v1172 >> 3) & 1) << v1178;
      }
      else
      {
        *(_BYTE *)(v1175 + v1176) = ((*(_DWORD *)(v218 + 258020) & 8) != 0) << 7;
      }
      *(_DWORD *)(a4 + 8) = v881 + 2;
      v1179 = v881 + 9;
      if (v881 >= -2)
        v1179 = v881 + 2;
      v1180 = v1179 & 0xFFFFFFF8;
      v1181 = *(_QWORD *)a4;
      v1182 = (uint64_t)v1179 >> 3;
      v1183 = v881 + 2 - v1180;
      if (v1183)
      {
        v1184 = 7 - v1183;
        *(_BYTE *)(v1181 + v1182) &= ~(1 << v1184);
        v1181 = *(_QWORD *)a4;
        v1185 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1182) | (((v1172 >> 2) & 1) << v1184);
      }
      else
      {
        LOBYTE(v1185) = ((v1172 & 4) != 0) << 7;
      }
      *(_BYTE *)(v1181 + v1182) = v1185;
      *(_DWORD *)(a4 + 8) = v881 + 3;
      v1186 = v881 + 10;
      if (v881 >= -3)
        v1186 = v881 + 3;
      v1187 = v1186 & 0xFFFFFFF8;
      v1188 = *(_QWORD *)a4;
      v1189 = (uint64_t)v1186 >> 3;
      v1190 = v881 + 3 - v1187;
      if (v1190)
      {
        v1191 = 7 - v1190;
        *(_BYTE *)(v1188 + v1189) &= ~(1 << v1191);
        v1188 = *(_QWORD *)a4;
        v1192 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1189) | (((v1172 >> 1) & 1) << v1191);
      }
      else
      {
        LOBYTE(v1192) = ((v1172 & 2) != 0) << 7;
      }
      *(_BYTE *)(v1188 + v1189) = v1192;
      *(_DWORD *)(a4 + 8) = v881 + 4;
      v1193 = v1172 & 1;
      v1194 = v881 + 11;
      if (v881 >= -4)
        v1194 = v881 + 4;
      v1195 = v1194 & 0xFFFFFFF8;
      v1196 = *(_QWORD *)a4;
      v1197 = (uint64_t)v1194 >> 3;
      v1198 = v881 + 4 - v1195;
      if (v1198)
      {
        v1199 = 7 - v1198;
        *(_BYTE *)(v1196 + v1197) &= ~(1 << v1199);
        v1196 = *(_QWORD *)a4;
        v1193 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1197) | (v1193 << v1199);
      }
      else
      {
        LOBYTE(v1193) = (_BYTE)v1193 << 7;
      }
      *(_BYTE *)(v1196 + v1197) = v1193;
      *(_DWORD *)(a4 + 8) = v881 + 5;
      v1200 = *(_DWORD *)(v218 + 258024);
      v1201 = v881 + 12;
      if (v881 >= -5)
        v1201 = v881 + 5;
      v1202 = v1201 & 0xFFFFFFF8;
      v1203 = *(_QWORD *)a4;
      v1204 = (uint64_t)v1201 >> 3;
      v1205 = v881 + 5 - v1202;
      if (v1205)
      {
        v1206 = 7 - v1205;
        *(_BYTE *)(v1203 + v1204) &= ~(1 << v1206);
        v1203 = *(_QWORD *)a4;
        v1207 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1204) | (((v1200 >> 3) & 1) << v1206);
      }
      else
      {
        LOBYTE(v1207) = ((*(_DWORD *)(v218 + 258024) & 8) != 0) << 7;
      }
      *(_BYTE *)(v1203 + v1204) = v1207;
      *(_DWORD *)(a4 + 8) = v881 + 6;
      v1208 = v881 + 13;
      if (v881 >= -6)
        v1208 = v881 + 6;
      v1209 = v1208 & 0xFFFFFFF8;
      v1210 = *(_QWORD *)a4;
      v1211 = (uint64_t)v1208 >> 3;
      v1212 = v881 + 6 - v1209;
      if (v1212)
      {
        v1213 = 7 - v1212;
        *(_BYTE *)(v1210 + v1211) &= ~(1 << v1213);
        v1210 = *(_QWORD *)a4;
        v1214 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1211) | (((v1200 >> 2) & 1) << v1213);
      }
      else
      {
        LOBYTE(v1214) = ((v1200 & 4) != 0) << 7;
      }
      *(_BYTE *)(v1210 + v1211) = v1214;
      *(_DWORD *)(a4 + 8) = v881 + 7;
      v1215 = v881 + 14;
      if (v881 >= -7)
        v1215 = v881 + 7;
      v1216 = v1215 & 0xFFFFFFF8;
      v1217 = *(_QWORD *)a4;
      v1218 = (uint64_t)v1215 >> 3;
      if (v881 + 7 == v1216)
      {
        LOBYTE(v1219) = ((v1200 & 2) != 0) << 7;
      }
      else
      {
        *(_BYTE *)(v1217 + v1218) &= ~(1 << (v1216 - v881));
        v1217 = *(_QWORD *)a4;
        v1219 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1218) | (((v1200 >> 1) & 1) << (v1216 - v881));
      }
      *(_BYTE *)(v1217 + v1218) = v1219;
      *(_DWORD *)(a4 + 8) = v881 + 8;
      v1220 = v1200 & 1;
      v1221 = v881 + 15;
      if (v881 >= -8)
        v1221 = v881 + 8;
      v1222 = v1221 & 0xFFFFFFF8;
      v1223 = *(_QWORD *)a4;
      v1224 = (uint64_t)v1221 >> 3;
      v1225 = v881 + 8 - v1222;
      if (v1225)
      {
        v1226 = 7 - v1225;
        *(_BYTE *)(v1223 + v1224) &= ~(1 << v1226);
        *(_BYTE *)(*(_QWORD *)a4 + v1224) |= v1220 << v1226;
        v1171 = v881 + 9;
        *v15 = v881 + 9;
        if (!v817)
          goto LABEL_1224;
      }
      else
      {
        *(_BYTE *)(v1223 + v1224) = (_BYTE)v1220 << 7;
        v1171 = v881 + 9;
        *v15 = v881 + 9;
        if (!v817)
          goto LABEL_1224;
      }
      v1227 = *(_DWORD *)(v218 + 258028);
      v1228 = v1171 + 7;
      if (v1171 >= 0)
        v1228 = v1171;
      v1229 = v1228 & 0xFFFFFFF8;
      v1230 = *(_QWORD *)a4;
      v1231 = (uint64_t)v1228 >> 3;
      v1232 = v1171 - v1229;
      if (v1232)
      {
        v1233 = 7 - v1232;
        *(_BYTE *)(v1230 + v1231) &= ~(1 << v1233);
        *(_BYTE *)(*(_QWORD *)a4 + v1231) |= ((v1227 >> 3) & 1) << v1233;
      }
      else
      {
        *(_BYTE *)(v1230 + v1231) = ((*(_DWORD *)(v218 + 258028) & 8) != 0) << 7;
      }
      *(_DWORD *)(a4 + 8) = v881 + 10;
      v1234 = v881 + 17;
      if (v881 >= -10)
        v1234 = v881 + 10;
      v1235 = v1234 & 0xFFFFFFF8;
      v1236 = *(_QWORD *)a4;
      v1237 = (uint64_t)v1234 >> 3;
      v1238 = v881 + 10 - v1235;
      if (v1238)
      {
        v1239 = 7 - v1238;
        *(_BYTE *)(v1236 + v1237) &= ~(1 << v1239);
        v1236 = *(_QWORD *)a4;
        v1240 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1237) | (((v1227 >> 2) & 1) << v1239);
      }
      else
      {
        LOBYTE(v1240) = ((v1227 & 4) != 0) << 7;
      }
      *(_BYTE *)(v1236 + v1237) = v1240;
      *(_DWORD *)(a4 + 8) = v881 + 11;
      v1241 = v881 + 18;
      if (v881 >= -11)
        v1241 = v881 + 11;
      v1242 = v1241 & 0xFFFFFFF8;
      v1243 = *(_QWORD *)a4;
      v1244 = (uint64_t)v1241 >> 3;
      v1245 = v881 + 11 - v1242;
      if (v1245)
      {
        v1246 = 7 - v1245;
        *(_BYTE *)(v1243 + v1244) &= ~(1 << v1246);
        v1243 = *(_QWORD *)a4;
        v1247 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1244) | (((v1227 >> 1) & 1) << v1246);
      }
      else
      {
        LOBYTE(v1247) = ((v1227 & 2) != 0) << 7;
      }
      *(_BYTE *)(v1243 + v1244) = v1247;
      *(_DWORD *)(a4 + 8) = v881 + 12;
      v1248 = v1227 & 1;
      v1249 = v881 + 19;
      if (v881 >= -12)
        v1249 = v881 + 12;
      v1250 = v1249 & 0xFFFFFFF8;
      v1251 = *(_QWORD *)a4;
      v1252 = (uint64_t)v1249 >> 3;
      v1253 = v881 + 12 - v1250;
      if (v1253)
      {
        v1254 = 7 - v1253;
        *(_BYTE *)(v1251 + v1252) &= ~(1 << v1254);
        v1251 = *(_QWORD *)a4;
        v1248 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1252) | (v1248 << v1254);
      }
      else
      {
        LOBYTE(v1248) = (_BYTE)v1248 << 7;
      }
      *(_BYTE *)(v1251 + v1252) = v1248;
      v1171 = v881 + 13;
      *v15 = v881 + 13;
LABEL_1224:
      v1255 = *(unsigned __int8 *)(v218 + 258032);
      v1256 = v1171 + 7;
      if (v1171 >= 0)
        v1256 = v1171;
      v1257 = v1256 & 0xFFFFFFF8;
      v1258 = *(_QWORD *)a4;
      v1259 = (uint64_t)v1256 >> 3;
      v1260 = v1171 - v1257;
      if (!v1260)
      {
        *(_BYTE *)(v1258 + v1259) = (_BYTE)v1255 << 7;
        v1262 = v1171 + 1;
        *v15 = v1171 + 1;
        if (!*(_BYTE *)(v218 + 258032))
          goto LABEL_1292;
LABEL_1230:
        if (v794[7] == 7)
          goto LABEL_1249;
        v1263 = *(unsigned __int8 *)(v218 + 258033);
        v1264 = v1262 + 7;
        if (v1262 >= 0)
          v1264 = v1262;
        v1265 = v1264 & 0xFFFFFFF8;
        v1266 = *(_QWORD *)a4;
        v1267 = (uint64_t)v1264 >> 3;
        v1268 = v1262 - v1265;
        if (v1268)
        {
          v1269 = 7 - v1268;
          *(_BYTE *)(v1266 + v1267) &= ~(1 << v1269);
          *(_BYTE *)(*(_QWORD *)a4 + v1267) |= v1263 << v1269;
          v1270 = v1171 + 2;
          *v15 = v1171 + 2;
          if (!*(_BYTE *)(v218 + 258033))
            goto LABEL_1243;
        }
        else
        {
          *(_BYTE *)(v1266 + v1267) = (_BYTE)v1263 << 7;
          v1270 = v1171 + 2;
          *v15 = v1171 + 2;
          if (!*(_BYTE *)(v218 + 258033))
          {
LABEL_1243:
            v1278 = *(unsigned __int8 *)(v218 + 258034);
            v1279 = v1270 + 7;
            if (v1270 >= 0)
              v1279 = v1270;
            v1280 = v1279 & 0xFFFFFFF8;
            v1281 = *(_QWORD *)a4;
            v1282 = (uint64_t)v1279 >> 3;
            v1283 = v1270 - v1280;
            if (v1283)
            {
              v1284 = 7 - v1283;
              *(_BYTE *)(v1281 + v1282) &= ~(1 << v1284);
              v1281 = *(_QWORD *)a4;
              v1278 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1282) | (v1278 << v1284);
            }
            else
            {
              LOBYTE(v1278) = (_BYTE)v1278 << 7;
            }
            *(_BYTE *)(v1281 + v1282) = v1278;
            v1262 = v1270 + 1;
            *v15 = v1262;
LABEL_1249:
            if (!*(_BYTE *)(v218 + 258034))
              goto LABEL_1292;
            v1285 = 0;
LABEL_1252:
            v1286 = 0;
            while (1)
            {
              if (!*(_BYTE *)(v218 + 258032))
              {
                if (v1262 >= 0)
                  v1294 = v1262;
                else
                  v1294 = v1262 + 7;
                v1295 = v1294 & 0xFFFFFFF8;
                v1296 = *(_QWORD *)a4;
                v1297 = (uint64_t)v1294 >> 3;
                v1298 = v1262 - v1295;
                if (v1298)
                  v1298 = *(unsigned __int8 *)(v1296 + v1297) & ~(1 << (7 - v1298));
                *(_BYTE *)(v1296 + v1297) = v1298;
                *v15 = ++v1262;
                goto LABEL_1254;
              }
              v1287 = (*(_DWORD *)(v218 + 4 * v1285 + 258164) >> v1286) & 1;
              v1288 = v1262 + 7;
              if (v1262 >= 0)
                v1288 = v1262;
              v1289 = v1288 & 0xFFFFFFF8;
              v1290 = *(_QWORD *)a4;
              v1291 = (uint64_t)v1288 >> 3;
              v1292 = v1262 - v1289;
              if (v1292)
              {
                v1293 = 7 - v1292;
                *(_BYTE *)(v1290 + v1291) &= ~(1 << v1293);
                *(_BYTE *)(*(_QWORD *)a4 + v1291) |= v1287 << v1293;
                *v15 = ++v1262;
                if (v1287)
                  goto LABEL_1267;
              }
              else
              {
                *(_BYTE *)(v1290 + v1291) = (_BYTE)v1287 << 7;
                *v15 = ++v1262;
                if (v1287)
                {
LABEL_1267:
                  v1299 = seg_feature_data_max[v1286];
                  v1300 = v1286 & 0xFE;
                  v1301 = __clz(v1299) ^ 0x1F;
                  v1302 = *(__int16 *)(v218 + 16 * v1285 + 2 * v1286 + 258036);
                  if (v1302 >= v1299)
                    v1303 = seg_feature_data_max[v1286];
                  else
                    v1303 = *(__int16 *)(v218 + 16 * v1285 + 2 * v1286 + 258036);
                  if (v1302 < -v1299)
                    v1304 = -v1299;
                  else
                    v1304 = v1303;
                  if ((unint64_t)(v1286 - 5) >= 3)
                  {
                    v1313 = v1301 + 2;
                    if (v1300 == 6)
                      v1314 = 1;
                    else
                      v1314 = v1313;
                    v1315 = 7 - v1262;
                    v1316 = v1314 + 1;
                    do
                    {
                      v1319 = (v1304 >> (v1316 - 2)) & 1;
                      v1320 = v1262 + 7;
                      if (v1262 >= 0)
                        v1320 = v1262;
                      v1321 = v1320 & 0xFFFFFFF8;
                      v1318 = *(_QWORD *)a4;
                      v1322 = (uint64_t)v1320 >> 3;
                      if (v1321 == v1262)
                      {
                        LOBYTE(v1319) = (_BYTE)v1319 << 7;
                      }
                      else
                      {
                        v1317 = v1315 + v1321;
                        *(_BYTE *)(v1318 + v1322) &= ~(1 << v1317);
                        v1318 = *(_QWORD *)a4;
                        v1319 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1322) | (v1319 << v1317);
                      }
                      *(_BYTE *)(v1318 + v1322) = v1319;
                      *v15 = ++v1262;
                      --v1315;
                      --v1316;
                    }
                    while (v1316 > 1);
                  }
                  else if (v1300 != 6)
                  {
                    v1305 = 7 - v1262;
                    do
                    {
                      v1308 = (v1304 >> v1301) & 1;
                      v1310 = v1262 + 7;
                      if (v1262 >= 0)
                        v1310 = v1262;
                      v1311 = v1310 & 0xFFFFFFF8;
                      v1307 = *(_QWORD *)a4;
                      v1312 = (uint64_t)v1310 >> 3;
                      if (v1311 == v1262)
                      {
                        LOBYTE(v1308) = (_BYTE)v1308 << 7;
                      }
                      else
                      {
                        v1306 = v1305 + v1311;
                        *(_BYTE *)(v1307 + v1312) &= ~(1 << v1306);
                        v1307 = *(_QWORD *)a4;
                        v1308 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1312) | (v1308 << v1306);
                      }
                      *(_BYTE *)(v1307 + v1312) = v1308;
                      *v15 = ++v1262;
                      --v1305;
                      v1309 = v1301-- + 1;
                    }
                    while (v1309 > 1);
                  }
                }
              }
LABEL_1254:
              if (++v1286 == 8)
              {
                if (++v1285 == 8)
                  goto LABEL_1292;
                goto LABEL_1252;
              }
            }
          }
        }
        v1271 = *(unsigned __int8 *)(v218 + 258035);
        v1272 = v1270 + 7;
        if (v1270 >= 0)
          v1272 = v1270;
        v1273 = v1272 & 0xFFFFFFF8;
        v1274 = *(_QWORD *)a4;
        v1275 = (uint64_t)v1272 >> 3;
        v1276 = v1270 - v1273;
        if (v1276)
        {
          v1277 = 7 - v1276;
          *(_BYTE *)(v1274 + v1275) &= ~(1 << v1277);
          *(_BYTE *)(*(_QWORD *)a4 + v1275) |= v1271 << v1277;
        }
        else
        {
          *(_BYTE *)(v1274 + v1275) = (_BYTE)v1271 << 7;
        }
        v1270 = v1171 + 3;
        *v15 = v1171 + 3;
        goto LABEL_1243;
      }
      v1261 = 7 - v1260;
      *(_BYTE *)(v1258 + v1259) &= ~(1 << v1261);
      *(_BYTE *)(*(_QWORD *)a4 + v1259) |= v1255 << v1261;
      v1262 = v1171 + 1;
      *v15 = v1171 + 1;
      if (*(_BYTE *)(v218 + 258032))
        goto LABEL_1230;
LABEL_1292:
      result = v218 + 239520;
      if (*(int *)(v218 + 239656) < 1)
        goto LABEL_1336;
      v1323 = (_DWORD *)(v218 + 263408);
      v1324 = *(_DWORD *)(v218 + 263408);
      v1325 = v1262 + 7;
      if (v1262 >= 0)
        v1325 = v1262;
      v1326 = v1325 & 0xFFFFFFF8;
      v1327 = *(_QWORD *)a4;
      v1328 = (uint64_t)v1325 >> 3;
      v1329 = v1262 - v1326;
      if (v1329)
      {
        v1330 = 7 - v1329;
        *(_BYTE *)(v1327 + v1328) &= ~(1 << v1330);
        *(_BYTE *)(*(_QWORD *)a4 + v1328) |= v1324 << v1330;
        v1331 = v1262 + 1;
        *v15 = v1262 + 1;
        if (!*v1323)
          goto LABEL_1336;
      }
      else
      {
        *(_BYTE *)(v1327 + v1328) = (_BYTE)v1324 << 7;
        v1331 = v1262 + 1;
        *v15 = v1262 + 1;
        if (!*v1323)
          goto LABEL_1336;
      }
      v1332 = __clz(*(_DWORD *)(v218 + 263412)) ^ 0x1F;
      v1333 = v1331 + 7;
      if (v1331 >= 0)
        v1333 = v1331;
      v1334 = v1333 & 0xFFFFFFF8;
      v1335 = *(_QWORD *)a4;
      v1336 = (uint64_t)v1333 >> 3;
      v1337 = v1331 - v1334;
      if (v1337)
      {
        v1338 = 7 - v1337;
        *(_BYTE *)(v1335 + v1336) &= ~(1 << v1338);
        *(_BYTE *)(*(_QWORD *)a4 + v1336) |= ((v1332 >> 1) & 1) << v1338;
      }
      else
      {
        *(_BYTE *)(v1335 + v1336) = ((v1332 & 2) != 0) << 7;
      }
      *(_DWORD *)(a4 + 8) = v1262 + 2;
      v1339 = v1332 & 1;
      v1340 = v1262 + 9;
      if (v1262 >= -2)
        v1340 = v1262 + 2;
      v1341 = v1340 & 0xFFFFFFF8;
      v1342 = *(_QWORD *)a4;
      v1343 = (uint64_t)v1340 >> 3;
      v1344 = v1262 + 2 - v1341;
      if (v1344)
      {
        v1345 = 7 - v1344;
        *(_BYTE *)(v1342 + v1343) &= ~(1 << v1345);
        v1342 = *(_QWORD *)a4;
        v1339 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1343) | (v1339 << v1345);
      }
      else
      {
        LOBYTE(v1339) = (_BYTE)v1339 << 7;
      }
      *(_BYTE *)(v1342 + v1343) = v1339;
      v1346 = v1262 + 3;
      *v15 = v1262 + 3;
      *(_DWORD *)(a2 + 10724) = *(_DWORD *)(v218 + 239656);
      if (!*(_BYTE *)(v218 + 239536))
      {
        v1347 = *(_DWORD *)(v218 + 263416);
        v1348 = v1262 + 10;
        if (v1346 >= 0)
          v1348 = v1262 + 3;
        v1349 = v1348 & 0xFFFFFFF8;
        v1350 = *(_QWORD *)a4;
        v1351 = (uint64_t)v1348 >> 3;
        v1352 = v1346 - v1349;
        if (v1352)
        {
          v1353 = 7 - v1352;
          *(_BYTE *)(v1350 + v1351) &= ~(1 << v1353);
          *(_BYTE *)(*(_QWORD *)a4 + v1351) |= v1347 << v1353;
        }
        else
        {
          *(_BYTE *)(v1350 + v1351) = (_BYTE)v1347 << 7;
        }
        v1346 = v1262 + 4;
        *v15 = v1262 + 4;
      }
      if (*(_DWORD *)(v218 + 263416))
      {
        v1354 = __clz(*(_DWORD *)(v218 + 263420)) ^ 0x1F;
        v1355 = v1346 + 7;
        if (v1346 >= 0)
          v1355 = v1346;
        v1356 = v1355 & 0xFFFFFFF8;
        v1357 = *(_QWORD *)a4;
        v1358 = (uint64_t)v1355 >> 3;
        v1359 = v1346 - v1356;
        if (v1359)
        {
          v1360 = 7 - v1359;
          *(_BYTE *)(v1357 + v1358) &= ~(1 << v1360);
          v1357 = *(_QWORD *)a4;
          v1361 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1358) | (((v1354 >> 1) & 1) << v1360);
        }
        else
        {
          LOBYTE(v1361) = ((v1354 & 2) != 0) << 7;
        }
        *(_BYTE *)(v1357 + v1358) = v1361;
        *(_DWORD *)(a4 + 8) = v1346 + 1;
        v1362 = v1354 & 1;
        v1363 = v1346 + 8;
        if (v1346 >= -1)
          v1363 = v1346 + 1;
        v1364 = v1363 & 0xFFFFFFF8;
        v1365 = *(_QWORD *)a4;
        v1366 = (uint64_t)v1363 >> 3;
        v1367 = v1346 + 1 - v1364;
        if (v1367)
        {
          v1368 = 7 - v1367;
          *(_BYTE *)(v1365 + v1366) &= ~(1 << v1368);
          v1365 = *(_QWORD *)a4;
          v1362 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1366) | (v1362 << v1368);
        }
        else
        {
          LOBYTE(v1362) = (_BYTE)v1362 << 7;
        }
        *(_BYTE *)(v1365 + v1366) = v1362;
        *(_DWORD *)(a4 + 8) = v1346 + 2;
        v1369 = *(_DWORD *)(v218 + 263424);
        v1370 = v1346 + 9;
        if (v1346 >= -2)
          v1370 = v1346 + 2;
        v1371 = v1370 & 0xFFFFFFF8;
        v1372 = *(_QWORD *)a4;
        v1373 = (uint64_t)v1370 >> 3;
        v1374 = v1346 + 2 - v1371;
        if (v1374)
        {
          v1375 = 7 - v1374;
          *(_BYTE *)(v1372 + v1373) &= ~(1 << v1375);
          v1372 = *(_QWORD *)a4;
          v1369 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1373) | (v1369 << v1375);
        }
        else
        {
          LOBYTE(v1369) = (_BYTE)v1369 << 7;
        }
        *(_BYTE *)(v1372 + v1373) = v1369;
        *v15 = v1346 + 3;
        v1376 = *(unsigned __int8 *)(*(_QWORD *)v7 + 77);
        *(_BYTE *)(a2 + 10752) = 0;
        if (v1376)
          v1377 = 2;
        else
          v1377 = 4;
        bzero((void *)(a2 + 10753), v1377);
        result = v218 + 239520;
        v10 = v3113;
      }
LABEL_1336:
      v3108 = (_DWORD *)(v218 + 263744);
      if (!*(_BYTE *)(result + 20))
      {
        v1386 = (unsigned int *)(v3111 + 262064);
        if (*(_BYTE *)(result + 19))
          goto LABEL_1343;
        if (*(_BYTE *)(result + 16))
        {
LABEL_2554:
          if (*(_BYTE *)(*(_QWORD *)v7 + 67) && !*(_BYTE *)(result + 16))
          {
            v2918 = *(unsigned __int8 *)(*(_QWORD *)v7 + 77);
            v2919 = *(_DWORD *)(v3111 + 262608) - 3;
            v2920 = *(_DWORD *)(a4 + 8);
            v2921 = v2920 + 7;
            if (v2920 >= 0)
              v2921 = *(_DWORD *)(a4 + 8);
            v2922 = v2921 & 0xFFFFFFF8;
            v2923 = *(_QWORD *)a4;
            v2924 = (uint64_t)v2921 >> 3;
            v2925 = v2920 - v2922;
            if (v2925)
            {
              v2926 = 7 - v2925;
              *(_BYTE *)(v2923 + v2924) &= ~(1 << v2926);
              v2923 = *(_QWORD *)a4;
              v2927 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2924) | (((v2919 >> 1) & 1) << v2926);
            }
            else
            {
              LOBYTE(v2927) = ((v2919 & 2) != 0) << 7;
            }
            *(_BYTE *)(v2923 + v2924) = v2927;
            *(_DWORD *)(a4 + 8) = v2920 + 1;
            v2928 = v2919 & 1;
            v2929 = v2920 + 8;
            if (v2920 >= -1)
              v2929 = v2920 + 1;
            v2930 = v2929 & 0xFFFFFFF8;
            v2931 = *(_QWORD *)a4;
            v2932 = (uint64_t)v2929 >> 3;
            v2933 = v2920 + 1 - v2930;
            if (v2933)
            {
              v2934 = 7 - v2933;
              *(_BYTE *)(v2931 + v2932) &= ~(1 << v2934);
              v2931 = *(_QWORD *)a4;
              v2928 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2932) | (v2928 << v2934);
            }
            else
            {
              LOBYTE(v2928) = (_BYTE)v2928 << 7;
            }
            *(_BYTE *)(v2931 + v2932) = v2928;
            *(_DWORD *)(a4 + 8) = v2920 + 2;
            v2935 = *(_DWORD *)(v3111 + 262744);
            v2936 = v2920 + 9;
            if (v2920 >= -2)
              v2936 = v2920 + 2;
            v2937 = v2936 & 0xFFFFFFF8;
            v2938 = *(_QWORD *)a4;
            v2939 = (uint64_t)v2936 >> 3;
            v2940 = v2920 + 2 - v2937;
            if (v2940)
            {
              v2941 = 7 - v2940;
              *(_BYTE *)(v2938 + v2939) &= ~(1 << v2941);
              v2938 = *(_QWORD *)a4;
              v2942 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2939) | (((v2935 >> 1) & 1) << v2941);
            }
            else
            {
              LOBYTE(v2942) = ((*(_DWORD *)(v3111 + 262744) & 2) != 0) << 7;
            }
            *(_BYTE *)(v2938 + v2939) = v2942;
            *(_DWORD *)(a4 + 8) = v2920 + 3;
            v2943 = v2935 & 1;
            v2944 = v2920 + 10;
            if (v2920 >= -3)
              v2944 = v2920 + 3;
            v2945 = v2944 & 0xFFFFFFF8;
            v2946 = *(_QWORD *)a4;
            v2947 = (uint64_t)v2944 >> 3;
            v2948 = v2920 + 3 - v2945;
            if (v2948)
            {
              v2949 = 7 - v2948;
              *(_BYTE *)(v2946 + v2947) &= ~(1 << v2949);
              v2946 = *(_QWORD *)a4;
              v2943 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2947) | (v2943 << v2949);
            }
            else
            {
              LOBYTE(v2943) = (_BYTE)v2943 << 7;
            }
            *(_BYTE *)(v2946 + v2947) = v2943;
            v2950 = v2920 + 4;
            *v15 = v2920 + 4;
            if (*(int *)(v3111 + 262612) >= 1)
            {
              if (v2918)
              {
                v2951 = 0;
                v2952 = 3 - v2920;
                do
                {
                  v2956 = *(_DWORD *)(v3111 + 262616 + 4 * v2951);
                  v2957 = v2950 + 7;
                  if (v2950 >= 0)
                    v2957 = v2950;
                  v2958 = v2957 & 0xFFFFFFF8;
                  v2959 = *(_QWORD *)a4;
                  v2960 = (uint64_t)v2957 >> 3;
                  if (v2958 == v2950)
                  {
                    LOBYTE(v2961) = ((*(_DWORD *)(v3111 + 262616 + 4 * v2951) & 0x20) != 0) << 7;
                  }
                  else
                  {
                    v2962 = v2952 + v2958;
                    *(_BYTE *)(v2959 + v2960) &= ~(1 << v2962);
                    v2959 = *(_QWORD *)a4;
                    v2961 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2960) | (((v2956 >> 5) & 1) << v2962);
                  }
                  *(_BYTE *)(v2959 + v2960) = v2961;
                  v2963 = v2950 + 1;
                  *(_DWORD *)(a4 + 8) = v2950 + 1;
                  v2964 = v2950 + 8;
                  if (v2950 + 1 >= 0)
                    v2964 = v2950 + 1;
                  v2965 = v2964 & 0xFFFFFFF8;
                  v2966 = *(_QWORD *)a4;
                  v2967 = (uint64_t)v2964 >> 3;
                  v2968 = v2963 - v2965;
                  if (v2968)
                  {
                    v2969 = 7 - v2968;
                    *(_BYTE *)(v2966 + v2967) &= ~(1 << v2969);
                    v2966 = *(_QWORD *)a4;
                    v2970 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2967) | (((v2956 >> 4) & 1) << v2969);
                  }
                  else
                  {
                    LOBYTE(v2970) = ((v2956 & 0x10) != 0) << 7;
                  }
                  *(_BYTE *)(v2966 + v2967) = v2970;
                  v2971 = v2963 + 1;
                  *(_DWORD *)(a4 + 8) = v2971;
                  v2972 = v2971 + 7;
                  if (v2971 >= 0)
                    v2972 = v2971;
                  v2973 = v2972 & 0xFFFFFFF8;
                  v2974 = *(_QWORD *)a4;
                  v2975 = (uint64_t)v2972 >> 3;
                  v2976 = v2971 - v2973;
                  if (v2976)
                  {
                    v2977 = 7 - v2976;
                    *(_BYTE *)(v2974 + v2975) &= ~(1 << v2977);
                    v2974 = *(_QWORD *)a4;
                    v2978 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2975) | (((v2956 >> 3) & 1) << v2977);
                  }
                  else
                  {
                    LOBYTE(v2978) = ((v2956 & 8) != 0) << 7;
                  }
                  *(_BYTE *)(v2974 + v2975) = v2978;
                  v2979 = v2971 + 1;
                  *(_DWORD *)(a4 + 8) = v2979;
                  v2980 = v2979 + 7;
                  if (v2979 >= 0)
                    v2980 = v2979;
                  v2981 = v2980 & 0xFFFFFFF8;
                  v2982 = *(_QWORD *)a4;
                  v2983 = (uint64_t)v2980 >> 3;
                  v2984 = v2979 - v2981;
                  if (v2984)
                  {
                    v2985 = 7 - v2984;
                    *(_BYTE *)(v2982 + v2983) &= ~(1 << v2985);
                    v2982 = *(_QWORD *)a4;
                    v2986 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2983) | (((v2956 >> 2) & 1) << v2985);
                  }
                  else
                  {
                    LOBYTE(v2986) = ((v2956 & 4) != 0) << 7;
                  }
                  *(_BYTE *)(v2982 + v2983) = v2986;
                  v2987 = v2979 + 1;
                  *(_DWORD *)(a4 + 8) = v2987;
                  v2988 = v2987 + 7;
                  if (v2987 >= 0)
                    v2988 = v2987;
                  v2989 = v2988 & 0xFFFFFFF8;
                  v2990 = *(_QWORD *)a4;
                  v2991 = (uint64_t)v2988 >> 3;
                  v2992 = v2987 - v2989;
                  if (v2992)
                  {
                    v2993 = 7 - v2992;
                    *(_BYTE *)(v2990 + v2991) &= ~(1 << v2993);
                    v2990 = *(_QWORD *)a4;
                    v2994 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2991) | (((v2956 >> 1) & 1) << v2993);
                  }
                  else
                  {
                    LOBYTE(v2994) = ((v2956 & 2) != 0) << 7;
                  }
                  *(_BYTE *)(v2990 + v2991) = v2994;
                  v2995 = v2987 + 1;
                  *(_DWORD *)(a4 + 8) = v2995;
                  v2955 = v2956 & 1;
                  v2996 = v2995 + 7;
                  if (v2995 >= 0)
                    v2996 = v2995;
                  v2997 = v2996 & 0xFFFFFFF8;
                  v2954 = *(_QWORD *)a4;
                  v2998 = (uint64_t)v2996 >> 3;
                  v2999 = v2995 - v2997;
                  if (v2999)
                  {
                    v2953 = 7 - v2999;
                    *(_BYTE *)(v2954 + v2998) &= ~(1 << v2953);
                    v2954 = *(_QWORD *)a4;
                    v2955 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2998) | (v2955 << v2953);
                  }
                  else
                  {
                    LOBYTE(v2955) = (_BYTE)v2955 << 7;
                  }
                  *(_BYTE *)(v2954 + v2998) = v2955;
                  result = (uint64_t)v3112;
                  v2950 = v2995 + 1;
                  *v15 = v2995 + 1;
                  ++v2951;
                  v2952 -= 6;
                }
                while (v2951 < *(int *)(v3111 + 262612));
              }
              else
              {
                v3000 = 0;
                v3001 = 3 - v2920;
                do
                {
                  v3003 = *(_DWORD *)(v3111 + 262616 + 4 * v3000);
                  v3004 = v2950 + 7;
                  if (v2950 >= 0)
                    v3004 = v2950;
                  v3005 = v3004 & 0xFFFFFFF8;
                  v3006 = *(_QWORD *)a4;
                  v3007 = (uint64_t)v3004 >> 3;
                  if (v3005 == v2950)
                  {
                    LOBYTE(v3008) = ((*(_DWORD *)(v3111 + 262616 + 4 * v3000) & 0x20) != 0) << 7;
                  }
                  else
                  {
                    v3009 = v3001 + v3005;
                    *(_BYTE *)(v3006 + v3007) &= ~(1 << v3009);
                    v3006 = *(_QWORD *)a4;
                    v3008 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3007) | (((v3003 >> 5) & 1) << v3009);
                  }
                  *(_BYTE *)(v3006 + v3007) = v3008;
                  v3010 = v2950 + 1;
                  *(_DWORD *)(a4 + 8) = v3010;
                  v3011 = v3010 + 7;
                  if (v3010 >= 0)
                    v3011 = v3010;
                  v3012 = v3011 & 0xFFFFFFF8;
                  v3013 = *(_QWORD *)a4;
                  v3014 = (uint64_t)v3011 >> 3;
                  v3015 = v3010 - v3012;
                  if (v3015)
                  {
                    v3016 = 7 - v3015;
                    *(_BYTE *)(v3013 + v3014) &= ~(1 << v3016);
                    v3013 = *(_QWORD *)a4;
                    v3017 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3014) | (((v3003 >> 4) & 1) << v3016);
                  }
                  else
                  {
                    LOBYTE(v3017) = ((v3003 & 0x10) != 0) << 7;
                  }
                  *(_BYTE *)(v3013 + v3014) = v3017;
                  v3018 = v3010 + 1;
                  *(_DWORD *)(a4 + 8) = v3018;
                  v3019 = v3018 + 7;
                  if (v3018 >= 0)
                    v3019 = v3018;
                  v3020 = v3019 & 0xFFFFFFF8;
                  v3021 = *(_QWORD *)a4;
                  v3022 = (uint64_t)v3019 >> 3;
                  v3023 = v3018 - v3020;
                  if (v3023)
                  {
                    v3024 = 7 - v3023;
                    *(_BYTE *)(v3021 + v3022) &= ~(1 << v3024);
                    v3021 = *(_QWORD *)a4;
                    v3025 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3022) | (((v3003 >> 3) & 1) << v3024);
                  }
                  else
                  {
                    LOBYTE(v3025) = ((v3003 & 8) != 0) << 7;
                  }
                  *(_BYTE *)(v3021 + v3022) = v3025;
                  v3026 = v3018 + 1;
                  *(_DWORD *)(a4 + 8) = v3026;
                  v3027 = v3026 + 7;
                  if (v3026 >= 0)
                    v3027 = v3026;
                  v3028 = v3027 & 0xFFFFFFF8;
                  v3029 = *(_QWORD *)a4;
                  v3030 = (uint64_t)v3027 >> 3;
                  v3031 = v3026 - v3028;
                  if (v3031)
                  {
                    v3032 = 7 - v3031;
                    *(_BYTE *)(v3029 + v3030) &= ~(1 << v3032);
                    v3029 = *(_QWORD *)a4;
                    v3033 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3030) | (((v3003 >> 2) & 1) << v3032);
                  }
                  else
                  {
                    LOBYTE(v3033) = ((v3003 & 4) != 0) << 7;
                  }
                  *(_BYTE *)(v3029 + v3030) = v3033;
                  v3034 = v3026 + 1;
                  *(_DWORD *)(a4 + 8) = v3034;
                  v3035 = v3034 + 7;
                  if (v3034 >= 0)
                    v3035 = v3034;
                  v3036 = v3035 & 0xFFFFFFF8;
                  v3037 = *(_QWORD *)a4;
                  v3038 = (uint64_t)v3035 >> 3;
                  v3039 = v3034 - v3036;
                  if (v3039)
                  {
                    v3040 = 7 - v3039;
                    *(_BYTE *)(v3037 + v3038) &= ~(1 << v3040);
                    v3037 = *(_QWORD *)a4;
                    v3041 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3038) | (((v3003 >> 1) & 1) << v3040);
                  }
                  else
                  {
                    LOBYTE(v3041) = ((v3003 & 2) != 0) << 7;
                  }
                  *(_BYTE *)(v3037 + v3038) = v3041;
                  v3042 = v3034 + 1;
                  *(_DWORD *)(a4 + 8) = v3042;
                  v3043 = v3003 & 1;
                  v3044 = v3042 + 7;
                  if (v3042 >= 0)
                    v3044 = v3042;
                  v3045 = v3044 & 0xFFFFFFF8;
                  v3046 = *(_QWORD *)a4;
                  v3047 = (uint64_t)v3044 >> 3;
                  v3048 = v3042 - v3045;
                  if (v3048)
                  {
                    v3049 = 7 - v3048;
                    *(_BYTE *)(v3046 + v3047) &= ~(1 << v3049);
                    v3046 = *(_QWORD *)a4;
                    v3043 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3047) | (v3043 << v3049);
                  }
                  else
                  {
                    LOBYTE(v3043) = (_BYTE)v3043 << 7;
                  }
                  *(_BYTE *)(v3046 + v3047) = v3043;
                  v3050 = v3042 + 1;
                  *(_DWORD *)(a4 + 8) = v3050;
                  v3051 = *(_DWORD *)(v3111 + 262680 + 4 * v3000);
                  v3052 = v3050 + 7;
                  if (v3050 >= 0)
                    v3052 = v3050;
                  v3053 = v3052 & 0xFFFFFFF8;
                  v3054 = *(_QWORD *)a4;
                  v3055 = (uint64_t)v3052 >> 3;
                  v3056 = v3050 - v3053;
                  if (v3056)
                  {
                    v3057 = 7 - v3056;
                    *(_BYTE *)(v3054 + v3055) &= ~(1 << v3057);
                    v3054 = *(_QWORD *)a4;
                    v3058 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3055) | (((v3051 >> 5) & 1) << v3057);
                  }
                  else
                  {
                    LOBYTE(v3058) = ((*(_DWORD *)(v3111 + 262680 + 4 * v3000) & 0x20) != 0) << 7;
                  }
                  *(_BYTE *)(v3054 + v3055) = v3058;
                  v3059 = v3050 + 1;
                  *(_DWORD *)(a4 + 8) = v3059;
                  v3060 = v3059 + 7;
                  if (v3059 >= 0)
                    v3060 = v3059;
                  v3061 = v3060 & 0xFFFFFFF8;
                  v3062 = *(_QWORD *)a4;
                  v3063 = (uint64_t)v3060 >> 3;
                  v3064 = v3059 - v3061;
                  if (v3064)
                  {
                    v3065 = 7 - v3064;
                    *(_BYTE *)(v3062 + v3063) &= ~(1 << v3065);
                    v3062 = *(_QWORD *)a4;
                    v3066 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3063) | (((v3051 >> 4) & 1) << v3065);
                  }
                  else
                  {
                    LOBYTE(v3066) = ((v3051 & 0x10) != 0) << 7;
                  }
                  *(_BYTE *)(v3062 + v3063) = v3066;
                  v3067 = v3059 + 1;
                  *(_DWORD *)(a4 + 8) = v3067;
                  v3068 = v3067 + 7;
                  if (v3067 >= 0)
                    v3068 = v3067;
                  v3069 = v3068 & 0xFFFFFFF8;
                  v3070 = *(_QWORD *)a4;
                  v3071 = (uint64_t)v3068 >> 3;
                  v3072 = v3067 - v3069;
                  if (v3072)
                  {
                    v3073 = 7 - v3072;
                    *(_BYTE *)(v3070 + v3071) &= ~(1 << v3073);
                    v3070 = *(_QWORD *)a4;
                    v3074 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3071) | (((v3051 >> 3) & 1) << v3073);
                  }
                  else
                  {
                    LOBYTE(v3074) = ((v3051 & 8) != 0) << 7;
                  }
                  *(_BYTE *)(v3070 + v3071) = v3074;
                  v3075 = v3067 + 1;
                  *(_DWORD *)(a4 + 8) = v3075;
                  v3076 = v3075 + 7;
                  if (v3075 >= 0)
                    v3076 = v3075;
                  v3077 = v3076 & 0xFFFFFFF8;
                  v3078 = *(_QWORD *)a4;
                  v3079 = (uint64_t)v3076 >> 3;
                  v3080 = v3075 - v3077;
                  if (v3080)
                  {
                    v3081 = 7 - v3080;
                    *(_BYTE *)(v3078 + v3079) &= ~(1 << v3081);
                    v3078 = *(_QWORD *)a4;
                    v3082 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3079) | (((v3051 >> 2) & 1) << v3081);
                  }
                  else
                  {
                    LOBYTE(v3082) = ((v3051 & 4) != 0) << 7;
                  }
                  *(_BYTE *)(v3078 + v3079) = v3082;
                  v3083 = v3075 + 1;
                  *(_DWORD *)(a4 + 8) = v3083;
                  v3084 = v3083 + 7;
                  if (v3083 >= 0)
                    v3084 = v3083;
                  v3085 = v3084 & 0xFFFFFFF8;
                  v3086 = *(_QWORD *)a4;
                  v3087 = (uint64_t)v3084 >> 3;
                  v3088 = v3083 - v3085;
                  if (v3088)
                  {
                    v3089 = 7 - v3088;
                    *(_BYTE *)(v3086 + v3087) &= ~(1 << v3089);
                    v3086 = *(_QWORD *)a4;
                    v3090 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3087) | (((v3051 >> 1) & 1) << v3089);
                  }
                  else
                  {
                    LOBYTE(v3090) = ((v3051 & 2) != 0) << 7;
                  }
                  *(_BYTE *)(v3086 + v3087) = v3090;
                  v3091 = v3083 + 1;
                  *(_DWORD *)(a4 + 8) = v3091;
                  v3002 = v3051 & 1;
                  v3092 = v3091 + 7;
                  if (v3091 >= 0)
                    v3092 = v3091;
                  v3093 = v3092 & 0xFFFFFFF8;
                  v3094 = *(_QWORD *)a4;
                  v3095 = (uint64_t)v3092 >> 3;
                  v3096 = v3091 - v3093;
                  if (v3096)
                  {
                    v3097 = 7 - v3096;
                    *(_BYTE *)(v3094 + v3095) &= ~(1 << v3097);
                    v3094 = *(_QWORD *)a4;
                    v3002 = *(unsigned __int8 *)(*(_QWORD *)a4 + v3095) | (v3002 << v3097);
                  }
                  else
                  {
                    LOBYTE(v3002) = (_BYTE)v3002 << 7;
                  }
                  *(_BYTE *)(v3094 + v3095) = v3002;
                  result = (uint64_t)v3112;
                  v2950 = v3091 + 1;
                  *v15 = v2950;
                  ++v3000;
                  v3001 -= 12;
                }
                while (v3000 < *(int *)(v3111 + 262612));
              }
            }
          }
LABEL_1343:
          v1387 = *(_QWORD *)v7;
          if (!*(_BYTE *)(*(_QWORD *)v7 + 68) || *(_BYTE *)(result + 16))
            goto LABEL_1337;
          v1388 = *(_BYTE *)(v1387 + 77);
          v1389 = *(_DWORD *)(v3111 + 262096);
          if (v1388)
          {
            if (v1389 > 3)
            {
              v1393 = 1;
              goto LABEL_2140;
            }
            v1390 = v1389;
            v1391 = dword_208F55BC0[v1390];
            v1392 = *(_DWORD *)((char *)&xmmword_208F1AD80 + v1390 * 4);
            v1393 = 1;
LABEL_1348:
            v1394 = *(_DWORD *)(a4 + 8);
            v1395 = v1394 + 7;
            if (v1394 >= 0)
              v1395 = *(_DWORD *)(a4 + 8);
            v1396 = v1395 & 0xFFFFFFF8;
            v1397 = *(_QWORD *)a4;
            v1398 = (uint64_t)v1395 >> 3;
            v1399 = v1394 - v1396;
            if (v1399)
            {
              v1400 = 7 - v1399;
              *(_BYTE *)(v1397 + v1398) &= ~(1 << v1400);
              v1397 = *(_QWORD *)a4;
              v1391 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1398) | (v1391 << v1400);
            }
            else
            {
              LOBYTE(v1391) = (_BYTE)v1391 << 7;
            }
            *(_BYTE *)(v1397 + v1398) = v1391;
            *(_DWORD *)(a4 + 8) = v1394 + 1;
            v2379 = v1394 + 8;
            if (v1394 >= -1)
              v2379 = v1394 + 1;
            v2380 = v2379 & 0xFFFFFFF8;
            v2381 = *(_QWORD *)a4;
            v2382 = (uint64_t)v2379 >> 3;
            v2383 = v1394 + 1 - v2380;
            if (v2383)
            {
              v2384 = 7 - v2383;
              *(_BYTE *)(v2381 + v2382) &= ~(1 << v2384);
              v2381 = *(_QWORD *)a4;
              v1392 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2382) | (v1392 << v2384);
            }
            else
            {
              LOBYTE(v1392) = (_BYTE)v1392 << 7;
            }
            *(_BYTE *)(v2381 + v2382) = v1392;
            result = (uint64_t)v3112;
            *v15 = v1394 + 2;
          }
          else
          {
            if (v1389 < 4)
            {
              v1688 = v1389;
              v1689 = dword_208F55BC0[v1688];
              v1690 = *(_DWORD *)((char *)&xmmword_208F1AD80 + v1688 * 4);
              v1691 = *(_DWORD *)(a4 + 8);
              v1692 = v1691 + 7;
              if (v1691 >= 0)
                v1692 = *(_DWORD *)(a4 + 8);
              v1693 = v1692 & 0xFFFFFFF8;
              v1694 = *(_QWORD *)a4;
              v1695 = (uint64_t)v1692 >> 3;
              v1696 = v1691 - v1693;
              if (v1696)
              {
                v1697 = 7 - v1696;
                *(_BYTE *)(v1694 + v1695) &= ~(1 << v1697);
                v1694 = *(_QWORD *)a4;
                v1689 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1695) | (v1689 << v1697);
              }
              else
              {
                LOBYTE(v1689) = (_BYTE)v1689 << 7;
              }
              *(_BYTE *)(v1694 + v1695) = v1689;
              *(_DWORD *)(a4 + 8) = v1691 + 1;
              v2795 = v1691 + 8;
              if (v1691 >= -1)
                v2795 = v1691 + 1;
              v2796 = v2795 & 0xFFFFFFF8;
              v2797 = *(_QWORD *)a4;
              v2798 = (uint64_t)v2795 >> 3;
              v2799 = v1691 + 1 - v2796;
              if (v2799)
              {
                v2800 = 7 - v2799;
                *(_BYTE *)(v2797 + v2798) &= ~(1 << v2800);
                v2797 = *(_QWORD *)a4;
                v1690 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2798) | (v1690 << v2800);
              }
              else
              {
                LOBYTE(v1690) = (_BYTE)v1690 << 7;
              }
              *(_BYTE *)(v2797 + v2798) = v1690;
              *v15 = v1691 + 2;
            }
            v2801 = *(int *)(v3111 + 262160);
            v2802 = v2801 | v1389;
            if (v2801 <= 3)
            {
              v2803 = dword_208F55BC0[v2801];
              v2804 = *((_DWORD *)&xmmword_208F1AD80 + v2801);
              v2805 = *(_DWORD *)(a4 + 8);
              v2806 = v2805 + 7;
              if (v2805 >= 0)
                v2806 = *(_DWORD *)(a4 + 8);
              v2807 = v2806 & 0xFFFFFFF8;
              v2808 = *(_QWORD *)a4;
              v2809 = (uint64_t)v2806 >> 3;
              v2810 = v2805 - v2807;
              if (v2810)
              {
                v2811 = 7 - v2810;
                *(_BYTE *)(v2808 + v2809) &= ~(1 << v2811);
                v2808 = *(_QWORD *)a4;
                v2803 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2809) | (v2803 << v2811);
              }
              else
              {
                LOBYTE(v2803) = (_BYTE)v2803 << 7;
              }
              *(_BYTE *)(v2808 + v2809) = v2803;
              *(_DWORD *)(a4 + 8) = v2805 + 1;
              v2812 = v2805 + 8;
              if (v2805 >= -1)
                v2812 = v2805 + 1;
              v2813 = v2812 & 0xFFFFFFF8;
              v2814 = *(_QWORD *)a4;
              v2815 = (uint64_t)v2812 >> 3;
              v2816 = v2805 + 1 - v2813;
              if (v2816)
              {
                v2817 = 7 - v2816;
                *(_BYTE *)(v2814 + v2815) &= ~(1 << v2817);
                v2814 = *(_QWORD *)a4;
                v2804 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2815) | (v2804 << v2817);
              }
              else
              {
                LOBYTE(v2804) = (_BYTE)v2804 << 7;
              }
              *(_BYTE *)(v2814 + v2815) = v2804;
              result = (uint64_t)v3112;
              *v15 = v2805 + 2;
            }
            v1391 = *(_DWORD *)(v3111 + 262224);
            v1389 = v2802 | v1391;
            v1393 = (v1391 | v2801) == 0;
            v1392 = v1391;
            switch(v1391)
            {
              case 0:
                goto LABEL_1348;
              case 1:
                v1392 = 0;
                v1391 = 1;
                goto LABEL_1348;
              case 2:
                v1391 = 1;
                v1392 = 1;
                goto LABEL_1348;
              case 3:
                v1391 = 0;
                v1392 = 1;
                goto LABEL_1348;
              default:
                break;
            }
          }
          if (!v1389)
          {
LABEL_2240:
            if (!v1388)
            {
              v2519 = *(_DWORD *)(*(_QWORD *)v7 + 100);
              if (*(_DWORD *)(*(_QWORD *)v7 + 96) < v2519)
                v2519 = *(_DWORD *)(*(_QWORD *)v7 + 96);
              if (!v1393 && v2519)
              {
                aom_wb_write_bit((uint64_t *)a4, *(_DWORD *)(v3111 + 262164) != *(_DWORD *)(v3111 + 262100));
                result = (uint64_t)v3112;
                v10 = v3113;
              }
            }
            goto LABEL_1337;
          }
          v1387 = *(_QWORD *)v7;
LABEL_2140:
          if (*(_BYTE *)(v1387 + 28) != 15)
          {
            v2385 = *(_DWORD *)(v3111 + 262100);
            v2386 = *(_DWORD *)(a4 + 8);
            v2387 = v2386 + 7;
            if (v2386 >= 0)
              v2387 = *(_DWORD *)(a4 + 8);
            v2388 = v2387 & 0xFFFFFFF8;
            v2389 = *(_QWORD *)a4;
            v2390 = (uint64_t)v2387 >> 3;
            v2391 = v2386 - v2388;
            if (v2391)
            {
              v2392 = 7 - v2391;
              *(_BYTE *)(v2389 + v2390) &= ~(1 << v2392);
              *(_BYTE *)(*(_QWORD *)a4 + v2390) |= (v2385 > 64) << v2392;
            }
            else
            {
              *(_BYTE *)(v2389 + v2390) = (v2385 > 64) << 7;
            }
            *v15 = v2386 + 1;
          }
          v2511 = *(_DWORD *)(v3111 + 262100);
          if (v2511 >= 65)
          {
            v2512 = *(_DWORD *)(a4 + 8);
            v2513 = v2512 + 7;
            if (v2512 >= 0)
              v2513 = *(_DWORD *)(a4 + 8);
            v2514 = v2513 & 0xFFFFFFF8;
            v2515 = *(_QWORD *)a4;
            v2516 = (uint64_t)v2513 >> 3;
            v2517 = v2512 - v2514;
            if (v2517)
            {
              v2518 = 7 - v2517;
              *(_BYTE *)(v2515 + v2516) &= ~(1 << v2518);
              *(_BYTE *)(*(_QWORD *)a4 + v2516) |= (v2511 > 0x80) << v2518;
            }
            else
            {
              *(_BYTE *)(v2515 + v2516) = (v2511 > 0x80) << 7;
            }
            *v15 = v2512 + 1;
          }
          goto LABEL_2240;
        }
        v1489 = *(unsigned __int8 *)(*(_QWORD *)v7 + 77);
        v1490 = *v1386;
        v1491 = *(_DWORD *)(a4 + 8);
        v1492 = (*v1386 >> 5) & 1;
        v1493 = v1491 + 7;
        if (v1491 >= 0)
          v1493 = *(_DWORD *)(a4 + 8);
        v1494 = v1493 & 0xFFFFFFF8;
        v1495 = *(_QWORD *)a4;
        v1496 = (uint64_t)v1493 >> 3;
        v1497 = v1491 - v1494;
        if (v1497)
        {
          v1498 = 7 - v1497;
          *(_BYTE *)(v1495 + v1496) &= ~(1 << v1498);
          v1495 = *(_QWORD *)a4;
          v1499 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1496) | (v1492 << v1498);
        }
        else
        {
          LOBYTE(v1499) = ((*v1386 & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v1495 + v1496) = v1499;
        *(_DWORD *)(a4 + 8) = v1491 + 1;
        v2393 = v1491 + 8;
        if (v1491 >= -1)
          v2393 = v1491 + 1;
        v2394 = v2393 & 0xFFFFFFF8;
        v2395 = *(_QWORD *)a4;
        v2396 = (uint64_t)v2393 >> 3;
        v2397 = v1491 + 1 - v2394;
        if (v2397)
        {
          v2398 = 7 - v2397;
          *(_BYTE *)(v2395 + v2396) &= ~(1 << v2398);
          v2395 = *(_QWORD *)a4;
          v2399 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2396) | (((v1490 >> 4) & 1) << v2398);
        }
        else
        {
          LOBYTE(v2399) = ((v1490 & 0x10) != 0) << 7;
        }
        *(_BYTE *)(v2395 + v2396) = v2399;
        *(_DWORD *)(a4 + 8) = v1491 + 2;
        v2400 = v1491 + 9;
        if (v1491 >= -2)
          v2400 = v1491 + 2;
        v2401 = v2400 & 0xFFFFFFF8;
        v2402 = *(_QWORD *)a4;
        v2403 = (uint64_t)v2400 >> 3;
        v2404 = v1491 + 2 - v2401;
        if (v2404)
        {
          v2405 = 7 - v2404;
          *(_BYTE *)(v2402 + v2403) &= ~(1 << v2405);
          v2402 = *(_QWORD *)a4;
          v2406 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2403) | (((v1490 >> 3) & 1) << v2405);
        }
        else
        {
          LOBYTE(v2406) = ((v1490 & 8) != 0) << 7;
        }
        *(_BYTE *)(v2402 + v2403) = v2406;
        *(_DWORD *)(a4 + 8) = v1491 + 3;
        v2407 = v1491 + 10;
        if (v1491 >= -3)
          v2407 = v1491 + 3;
        v2408 = v2407 & 0xFFFFFFF8;
        v2409 = *(_QWORD *)a4;
        v2410 = (uint64_t)v2407 >> 3;
        v2411 = v1491 + 3 - v2408;
        if (v2411)
        {
          v2412 = 7 - v2411;
          *(_BYTE *)(v2409 + v2410) &= ~(1 << v2412);
          v2409 = *(_QWORD *)a4;
          v2413 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2410) | (((v1490 >> 2) & 1) << v2412);
        }
        else
        {
          LOBYTE(v2413) = ((v1490 & 4) != 0) << 7;
        }
        *(_BYTE *)(v2409 + v2410) = v2413;
        *(_DWORD *)(a4 + 8) = v1491 + 4;
        v2414 = v1491 + 11;
        if (v1491 >= -4)
          v2414 = v1491 + 4;
        v2415 = v2414 & 0xFFFFFFF8;
        v2416 = *(_QWORD *)a4;
        v2417 = (uint64_t)v2414 >> 3;
        v2418 = v1491 + 4 - v2415;
        if (v2418)
        {
          v2419 = 7 - v2418;
          *(_BYTE *)(v2416 + v2417) &= ~(1 << v2419);
          v2416 = *(_QWORD *)a4;
          v2420 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2417) | (((v1490 >> 1) & 1) << v2419);
        }
        else
        {
          LOBYTE(v2420) = ((v1490 & 2) != 0) << 7;
        }
        *(_BYTE *)(v2416 + v2417) = v2420;
        *(_DWORD *)(a4 + 8) = v1491 + 5;
        v2421 = v1490 & 1;
        v2422 = v1491 + 12;
        if (v1491 >= -5)
          v2422 = v1491 + 5;
        v2423 = v2422 & 0xFFFFFFF8;
        v2424 = *(_QWORD *)a4;
        v2425 = (uint64_t)v2422 >> 3;
        v2426 = v1491 + 5 - v2423;
        if (v2426)
        {
          v2427 = 7 - v2426;
          *(_BYTE *)(v2424 + v2425) &= ~(1 << v2427);
          v2424 = *(_QWORD *)a4;
          v2421 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2425) | (v2421 << v2427);
        }
        else
        {
          LOBYTE(v2421) = (_BYTE)v2421 << 7;
        }
        *(_BYTE *)(v2424 + v2425) = v2421;
        *(_DWORD *)(a4 + 8) = v1491 + 6;
        v2428 = *(_DWORD *)(v3111 + 262068);
        v2429 = v1491 + 13;
        if (v1491 >= -6)
          v2429 = v1491 + 6;
        v2430 = v2429 & 0xFFFFFFF8;
        v2431 = *(_QWORD *)a4;
        v2432 = (uint64_t)v2429 >> 3;
        v2433 = v1491 + 6 - v2430;
        if (v2433)
        {
          v2434 = 7 - v2433;
          *(_BYTE *)(v2431 + v2432) &= ~(1 << v2434);
          v2431 = *(_QWORD *)a4;
          v2435 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2432) | (((v2428 >> 5) & 1) << v2434);
        }
        else
        {
          LOBYTE(v2435) = ((*(_DWORD *)(v3111 + 262068) & 0x20) != 0) << 7;
        }
        *(_BYTE *)(v2431 + v2432) = v2435;
        *(_DWORD *)(a4 + 8) = v1491 + 7;
        v2436 = v1491 + 14;
        if (v1491 >= -7)
          v2436 = v1491 + 7;
        v2437 = v2436 & 0xFFFFFFF8;
        v2438 = *(_QWORD *)a4;
        v2439 = (uint64_t)v2436 >> 3;
        if (v1491 + 7 == v2437)
        {
          LOBYTE(v2440) = ((v2428 & 0x10) != 0) << 7;
        }
        else
        {
          *(_BYTE *)(v2438 + v2439) &= ~(1 << (v2437 - v1491));
          v2438 = *(_QWORD *)a4;
          v2440 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2439) | (((v2428 >> 4) & 1) << (v2437 - v1491));
        }
        *(_BYTE *)(v2438 + v2439) = v2440;
        *(_DWORD *)(a4 + 8) = v1491 + 8;
        v2441 = v1491 + 15;
        if (v1491 >= -8)
          v2441 = v1491 + 8;
        v2442 = v2441 & 0xFFFFFFF8;
        v2443 = *(_QWORD *)a4;
        v2444 = (uint64_t)v2441 >> 3;
        v2445 = v1491 + 8 - v2442;
        if (v2445)
        {
          v2446 = 7 - v2445;
          *(_BYTE *)(v2443 + v2444) &= ~(1 << v2446);
          v2443 = *(_QWORD *)a4;
          v2447 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2444) | (((v2428 >> 3) & 1) << v2446);
        }
        else
        {
          LOBYTE(v2447) = ((v2428 & 8) != 0) << 7;
        }
        *(_BYTE *)(v2443 + v2444) = v2447;
        *(_DWORD *)(a4 + 8) = v1491 + 9;
        v2448 = v1491 + 16;
        if (v1491 >= -9)
          v2448 = v1491 + 9;
        v2449 = v2448 & 0xFFFFFFF8;
        v2450 = *(_QWORD *)a4;
        v2451 = (uint64_t)v2448 >> 3;
        v2452 = v1491 + 9 - v2449;
        if (v2452)
        {
          v2453 = 7 - v2452;
          *(_BYTE *)(v2450 + v2451) &= ~(1 << v2453);
          v2450 = *(_QWORD *)a4;
          v2454 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2451) | (((v2428 >> 2) & 1) << v2453);
        }
        else
        {
          LOBYTE(v2454) = ((v2428 & 4) != 0) << 7;
        }
        *(_BYTE *)(v2450 + v2451) = v2454;
        *(_DWORD *)(a4 + 8) = v1491 + 10;
        v2455 = v1491 + 17;
        if (v1491 >= -10)
          v2455 = v1491 + 10;
        v2456 = v2455 & 0xFFFFFFF8;
        v2457 = *(_QWORD *)a4;
        v2458 = (uint64_t)v2455 >> 3;
        v2459 = v1491 + 10 - v2456;
        if (v2459)
        {
          v2460 = 7 - v2459;
          *(_BYTE *)(v2457 + v2458) &= ~(1 << v2460);
          v2457 = *(_QWORD *)a4;
          v2461 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2458) | (((v2428 >> 1) & 1) << v2460);
        }
        else
        {
          LOBYTE(v2461) = ((v2428 & 2) != 0) << 7;
        }
        *(_BYTE *)(v2457 + v2458) = v2461;
        *(_DWORD *)(a4 + 8) = v1491 + 11;
        v2462 = v2428 & 1;
        v2463 = v1491 + 18;
        if (v1491 >= -11)
          v2463 = v1491 + 11;
        v2464 = v2463 & 0xFFFFFFF8;
        v2465 = *(_QWORD *)a4;
        v2466 = (uint64_t)v2463 >> 3;
        v2467 = v1491 + 11 - v2464;
        if (v2467)
        {
          v2468 = 7 - v2467;
          *(_BYTE *)(v2465 + v2466) &= ~(1 << v2468);
          *(_BYTE *)(*(_QWORD *)a4 + v2466) |= v2462 << v2468;
          v2469 = v1491 + 12;
          *v15 = v2469;
          if (v1489)
            goto LABEL_2205;
        }
        else
        {
          *(_BYTE *)(v2465 + v2466) = v2462 << 7;
          v2469 = v1491 + 12;
          *v15 = v2469;
          if (v1489)
            goto LABEL_2205;
        }
        if (*v1386 || *(_DWORD *)(v3111 + 262068))
        {
          aom_wb_write_literal((uint64_t *)a4, *(_DWORD *)(v3111 + 262072), 6);
          aom_wb_write_literal((uint64_t *)a4, *(_DWORD *)(v3111 + 262076), 6);
          result = (uint64_t)v3112;
          v10 = v3113;
          v2469 = *(_DWORD *)(a4 + 8);
        }
LABEL_2205:
        v2470 = *(_DWORD *)(v3111 + 262080);
        v2471 = v2469 + 7;
        if (v2469 >= 0)
          v2471 = v2469;
        v2472 = v2471 & 0xFFFFFFF8;
        v2473 = *(_QWORD *)a4;
        v2474 = (uint64_t)v2471 >> 3;
        v2475 = v2469 - v2472;
        if (v2475)
        {
          v2476 = 7 - v2475;
          *(_BYTE *)(v2473 + v2474) &= ~(1 << v2476);
          v2473 = *(_QWORD *)a4;
          v2477 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2474) | (((v2470 >> 2) & 1) << v2476);
        }
        else
        {
          LOBYTE(v2477) = ((*(_DWORD *)(v3111 + 262080) & 4) != 0) << 7;
        }
        *(_BYTE *)(v2473 + v2474) = v2477;
        *(_DWORD *)(a4 + 8) = v2469 + 1;
        v2478 = v2469 + 8;
        if (v2469 >= -1)
          v2478 = v2469 + 1;
        v2479 = v2478 & 0xFFFFFFF8;
        v2480 = *(_QWORD *)a4;
        v2481 = (uint64_t)v2478 >> 3;
        v2482 = v2469 + 1 - v2479;
        if (v2482)
        {
          v2483 = 7 - v2482;
          *(_BYTE *)(v2480 + v2481) &= ~(1 << v2483);
          v2480 = *(_QWORD *)a4;
          v2484 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2481) | (((v2470 >> 1) & 1) << v2483);
        }
        else
        {
          LOBYTE(v2484) = ((v2470 & 2) != 0) << 7;
        }
        *(_BYTE *)(v2480 + v2481) = v2484;
        *(_DWORD *)(a4 + 8) = v2469 + 2;
        v2485 = v2470 & 1;
        v2486 = v2469 + 9;
        if (v2469 >= -2)
          v2486 = v2469 + 2;
        v2487 = v2486 & 0xFFFFFFF8;
        v2488 = *(_QWORD *)a4;
        v2489 = (uint64_t)v2486 >> 3;
        v2490 = v2469 + 2 - v2487;
        if (v2490)
        {
          v2491 = 7 - v2490;
          *(_BYTE *)(v2488 + v2489) &= ~(1 << v2491);
          v2488 = *(_QWORD *)a4;
          v2485 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2489) | (v2485 << v2491);
        }
        else
        {
          LOBYTE(v2485) = (_BYTE)v2485 << 7;
        }
        *(_BYTE *)(v2488 + v2489) = v2485;
        *(_DWORD *)(a4 + 8) = v2469 + 3;
        v2492 = *(unsigned __int8 *)(v3111 + 262084);
        v2493 = v2469 + 10;
        if (v2469 >= -3)
          v2493 = v2469 + 3;
        v2494 = v2493 & 0xFFFFFFF8;
        v2495 = *(_QWORD *)a4;
        v2496 = (uint64_t)v2493 >> 3;
        v2497 = v2469 + 3 - v2494;
        if (v2497)
        {
          v2498 = 7 - v2497;
          *(_BYTE *)(v2495 + v2496) &= ~(1 << v2498);
          *(_BYTE *)(*(_QWORD *)a4 + v2496) |= v2492 << v2498;
          v2499 = v2469 + 4;
          *v15 = v2469 + 4;
          if (*(_BYTE *)(v3111 + 262085))
          {
LABEL_2224:
            LOBYTE(v2500) = 0;
            v2501 = *(_DWORD *)(result + 28);
            LOBYTE(v2502) = 1;
            LODWORD(v2503) = 255;
            LOBYTE(v2504) = -1;
            LOBYTE(result) = -1;
            LOBYTE(v2505) = 0;
            LOBYTE(v2506) = 0;
            LOBYTE(v2507) = 0;
            v2508 = 0;
            LOBYTE(v2509) = 0;
            if (v2501 == 7 || (v2501 & 0xF8) != 0)
              goto LABEL_2459;
            v2510 = *(int *)(v3111 + 4 * v2501 + 239280);
            if ((_DWORD)v2510 == -1)
            {
              LOBYTE(v2500) = 0;
              LOBYTE(v2505) = 0;
              LOBYTE(v2506) = 0;
              LOBYTE(v2507) = 0;
              v2508 = 0;
              LOBYTE(v2509) = 0;
            }
            else
            {
              v2509 = *(_QWORD *)(v3111 + 8 * v2510 + 239456);
              if (v2509)
              {
                v2502 = *(_QWORD *)(v2509 + 1468);
                v2507 = v2502 >> 8;
                v2506 = v2502 >> 16;
                v2505 = v2502 >> 24;
                result = HIDWORD(v2502);
                v2500 = v2502 >> 40;
                v2504 = HIWORD(v2502);
                v2503 = HIBYTE(v2502);
                LODWORD(v2509) = *(unsigned __int16 *)(v2509 + 1476);
                v2508 = v2509 >> 8;
                goto LABEL_2459;
              }
              LOBYTE(v2500) = 0;
              LOBYTE(v2505) = 0;
              LOBYTE(v2506) = 0;
              LOBYTE(v2507) = 0;
              v2508 = 0;
            }
            LOBYTE(v2502) = 1;
            LODWORD(v2503) = 255;
            LOBYTE(v2504) = -1;
            LOBYTE(result) = -1;
LABEL_2459:
            if (*(unsigned __int8 *)(v3111 + 262086) == v2502
              && *(unsigned __int8 *)(v3111 + 262087) == v2507
              && *(unsigned __int8 *)(v3111 + 262088) == v2506
              && *(unsigned __int8 *)(v3111 + 262089) == v2505
              && *(unsigned __int8 *)(v3111 + 262090) == result
              && *(unsigned __int8 *)(v3111 + 262091) == v2500
              && *(unsigned __int8 *)(v3111 + 262092) == v2504
              && *(unsigned __int8 *)(v3111 + 262093) == (_DWORD)v2503
              && *(unsigned __int8 *)(v3111 + 262094) == v2509)
            {
              v2818 = *(unsigned __int8 *)(v3111 + 262095);
              aom_wb_write_bit((uint64_t *)a4, v2818 != v2508);
              result = (uint64_t)v3112;
              v10 = v3113;
              if (v2818 == v2508)
                goto LABEL_2554;
            }
            else
            {
              v2819 = v2499 + 7;
              if (v2499 >= 0)
                v2819 = v2499;
              v2820 = v2819 & 0xFFFFFFF8;
              v2821 = *(_QWORD *)a4;
              v2822 = (uint64_t)v2819 >> 3;
              v2823 = v2499 - v2820;
              if (v2823)
              {
                v2824 = 1 << (7 - v2823);
                *(_BYTE *)(v2821 + v2822) &= ~(_BYTE)v2824;
                v2821 = *(_QWORD *)a4;
                v2825 = *(_BYTE *)(*(_QWORD *)a4 + v2822) | v2824;
              }
              else
              {
                v2825 = 0x80;
              }
              *(_BYTE *)(v2821 + v2822) = v2825;
              result = (uint64_t)v3112;
              *v15 = v2469 + 5;
            }
            LOBYTE(v2826) = 0;
            v2827 = *(_DWORD *)(result + 28);
            LOBYTE(v2828) = 1;
            LODWORD(__s1a) = 255;
            if (v2827 == 7)
            {
              LOBYTE(v3106) = -1;
              LOBYTE(v2829) = -1;
              LOBYTE(v2830) = 0;
              LOBYTE(v2831) = 0;
              LOBYTE(v2832) = 0;
              v2833 = 0;
              LOBYTE(v2834) = 0;
            }
            else
            {
              LOBYTE(v2829) = -1;
              LOBYTE(v3106) = -1;
              LOBYTE(v2830) = 0;
              LOBYTE(v2831) = 0;
              LOBYTE(v2832) = 0;
              v2833 = 0;
              LOBYTE(v2834) = 0;
              if ((v2827 & 0xF8) == 0)
              {
                v2835 = *(int *)(v3111 + 4 * v2827 + 239280);
                if ((_DWORD)v2835 == -1 || (v2836 = *(_QWORD *)(v3111 + 8 * v2835 + 239456)) == 0)
                {
                  LOBYTE(v2826) = 0;
                  LOBYTE(v2830) = 0;
                  LOBYTE(v2831) = 0;
                  LOBYTE(v2832) = 0;
                  v2833 = 0;
                  LOBYTE(v2834) = 0;
                  LOBYTE(v2828) = 1;
                  LODWORD(__s1a) = 255;
                  LOBYTE(v3106) = -1;
                  LOBYTE(v2829) = -1;
                }
                else
                {
                  v2828 = *(_QWORD *)(v2836 + 1468);
                  v2832 = v2828 >> 8;
                  v2831 = v2828 >> 16;
                  v2830 = v2828 >> 24;
                  v2829 = HIDWORD(v2828);
                  v2826 = v2828 >> 40;
                  v3106 = (void *)HIWORD(v2828);
                  __s1a = (void *)HIBYTE(v2828);
                  v2834 = *(unsigned __int16 *)(v2836 + 1476);
                  v2833 = v2834 >> 8;
                }
              }
            }
            v3104 = v2829;
            v2837 = *(char *)(v3111 + 262086);
            v2838 = *(_DWORD *)(a4 + 8);
            v2839 = v2838 + 7;
            if (v2838 >= 0)
              v2839 = *(_DWORD *)(a4 + 8);
            v2840 = v2839 & 0xFFFFFFF8;
            v2841 = *(_QWORD *)a4;
            v2842 = (uint64_t)v2839 >> 3;
            v2843 = v2838 - v2840;
            if (v2843)
            {
              v2844 = 7 - v2843;
              *(_BYTE *)(v2841 + v2842) &= ~(1 << v2844);
              *(_BYTE *)(*(_QWORD *)a4 + v2842) |= (v2837 != v2828) << v2844;
            }
            else
            {
              *(_BYTE *)(v2841 + v2842) = (*(unsigned __int8 *)(v3111 + 262086) != v2828) << 7;
            }
            v2845 = v2838 + 1;
            *v15 = v2845;
            if (v2837 != v2828)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2837, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2845 = *(_DWORD *)(a4 + 8);
            }
            v2846 = *(char *)(v3111 + 262087);
            v2847 = v2845 + 7;
            if (v2845 >= 0)
              v2847 = v2845;
            v2848 = v2847 & 0xFFFFFFF8;
            v2849 = *(_QWORD *)a4;
            v2850 = (uint64_t)v2847 >> 3;
            v2851 = v2845 - v2848;
            if (v2851)
            {
              v2852 = 7 - v2851;
              *(_BYTE *)(v2849 + v2850) &= ~(1 << v2852);
              *(_BYTE *)(*(_QWORD *)a4 + v2850) |= (v2846 != v2832) << v2852;
            }
            else
            {
              *(_BYTE *)(v2849 + v2850) = (*(unsigned __int8 *)(v3111 + 262087) != v2832) << 7;
            }
            v2853 = v2845 + 1;
            *v15 = v2845 + 1;
            if (v2846 != v2832)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2846, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2853 = *(_DWORD *)(a4 + 8);
            }
            v2854 = *(char *)(v3111 + 262088);
            v2855 = v2853 + 7;
            if (v2853 >= 0)
              v2855 = v2853;
            v2856 = v2855 & 0xFFFFFFF8;
            v2857 = *(_QWORD *)a4;
            v2858 = (uint64_t)v2855 >> 3;
            v2859 = v2853 - v2856;
            if (v2859)
            {
              v2860 = 7 - v2859;
              *(_BYTE *)(v2857 + v2858) &= ~(1 << v2860);
              *(_BYTE *)(*(_QWORD *)a4 + v2858) |= (v2854 != v2831) << v2860;
            }
            else
            {
              *(_BYTE *)(v2857 + v2858) = (*(unsigned __int8 *)(v3111 + 262088) != v2831) << 7;
            }
            v2861 = v2853 + 1;
            *v15 = v2861;
            if (v2854 != v2831)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2854, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2861 = *(_DWORD *)(a4 + 8);
            }
            v2862 = *(char *)(v3111 + 262089);
            v2863 = v2861 + 7;
            if (v2861 >= 0)
              v2863 = v2861;
            v2864 = v2863 & 0xFFFFFFF8;
            v2865 = *(_QWORD *)a4;
            v2866 = (uint64_t)v2863 >> 3;
            v2867 = v2861 - v2864;
            if (v2867)
            {
              v2868 = 7 - v2867;
              *(_BYTE *)(v2865 + v2866) &= ~(1 << v2868);
              *(_BYTE *)(*(_QWORD *)a4 + v2866) |= (v2862 != v2830) << v2868;
            }
            else
            {
              *(_BYTE *)(v2865 + v2866) = (*(unsigned __int8 *)(v3111 + 262089) != v2830) << 7;
            }
            v2869 = v2861 + 1;
            *v15 = v2869;
            if (v2862 != v2830)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2862, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2869 = *(_DWORD *)(a4 + 8);
            }
            v2870 = *(char *)(v3111 + 262090);
            v2871 = v2869 + 7;
            if (v2869 >= 0)
              v2871 = v2869;
            v2872 = v2871 & 0xFFFFFFF8;
            v2873 = *(_QWORD *)a4;
            v2874 = (uint64_t)v2871 >> 3;
            v2875 = v2869 - v2872;
            v219 = v3110;
            if (v2875)
            {
              v2876 = 7 - v2875;
              *(_BYTE *)(v2873 + v2874) &= ~(1 << v2876);
              v2877 = v3104;
              *(_BYTE *)(*(_QWORD *)a4 + v2874) |= (v2870 != v3104) << v2876;
            }
            else
            {
              v2877 = v3104;
              *(_BYTE *)(v2873 + v2874) = (*(unsigned __int8 *)(v3111 + 262090) != v3104) << 7;
            }
            v2878 = v2869 + 1;
            *v15 = v2878;
            if (v2870 != v2877)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2870, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2878 = *(_DWORD *)(a4 + 8);
            }
            v2879 = *(char *)(v3111 + 262091);
            v2880 = v2878 + 7;
            if (v2878 >= 0)
              v2880 = v2878;
            v2881 = v2880 & 0xFFFFFFF8;
            v2882 = *(_QWORD *)a4;
            v2883 = (uint64_t)v2880 >> 3;
            v2884 = v2878 - v2881;
            if (v2884)
            {
              v2885 = 7 - v2884;
              *(_BYTE *)(v2882 + v2883) &= ~(1 << v2885);
              *(_BYTE *)(*(_QWORD *)a4 + v2883) |= (v2879 != v2826) << v2885;
            }
            else
            {
              *(_BYTE *)(v2882 + v2883) = (*(unsigned __int8 *)(v3111 + 262091) != v2826) << 7;
            }
            v2886 = v2878 + 1;
            *v15 = v2886;
            if (v2879 != v2826)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2879, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2886 = *(_DWORD *)(a4 + 8);
            }
            v2887 = *(char *)(v3111 + 262092);
            v2888 = v2886 + 7;
            if (v2886 >= 0)
              v2888 = v2886;
            v2889 = v2888 & 0xFFFFFFF8;
            v2890 = *(_QWORD *)a4;
            v2891 = (uint64_t)v2888 >> 3;
            v2892 = v2886 - v2889;
            if (v2892)
            {
              v2893 = 7 - v2892;
              *(_BYTE *)(v2890 + v2891) &= ~(1 << v2893);
              *(_BYTE *)(*(_QWORD *)a4 + v2891) |= (v2887 != v3106) << v2893;
            }
            else
            {
              *(_BYTE *)(v2890 + v2891) = (*(unsigned __int8 *)(v3111 + 262092) != v3106) << 7;
            }
            v2894 = v2886 + 1;
            *v15 = v2894;
            if (v2887 != v3106)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2887, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2894 = *(_DWORD *)(a4 + 8);
            }
            v2895 = *(char *)(v3111 + 262093);
            v2896 = v2894 + 7;
            if (v2894 >= 0)
              v2896 = v2894;
            v2897 = v2896 & 0xFFFFFFF8;
            v2898 = *(_QWORD *)a4;
            v2899 = (uint64_t)v2896 >> 3;
            v2900 = v2894 - v2897;
            if (v2900)
            {
              v2901 = 7 - v2900;
              *(_BYTE *)(v2898 + v2899) &= ~(1 << v2901);
              *(_BYTE *)(*(_QWORD *)a4 + v2899) |= ((_DWORD)__s1a != v2895) << v2901;
            }
            else
            {
              *(_BYTE *)(v2898 + v2899) = ((_DWORD)__s1a != v2895) << 7;
            }
            v2902 = v2894 + 1;
            *v15 = v2902;
            if ((_DWORD)__s1a != v2895)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2895, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2902 = *(_DWORD *)(a4 + 8);
            }
            v2903 = *(char *)(v3111 + 262094);
            v2904 = v2902 + 7;
            if (v2902 >= 0)
              v2904 = v2902;
            v2905 = v2904 & 0xFFFFFFF8;
            v2906 = *(_QWORD *)a4;
            v2907 = (uint64_t)v2904 >> 3;
            v2908 = v2902 - v2905;
            if (v2908)
            {
              v2909 = 7 - v2908;
              *(_BYTE *)(v2906 + v2907) &= ~(1 << v2909);
              *(_BYTE *)(*(_QWORD *)a4 + v2907) |= (v2903 != v2834) << v2909;
            }
            else
            {
              *(_BYTE *)(v2906 + v2907) = (*(unsigned __int8 *)(v3111 + 262094) != v2834) << 7;
            }
            v2910 = v2902 + 1;
            *v15 = v2910;
            if (v2903 != v2834)
            {
              aom_wb_write_inv_signed_literal((uint64_t *)a4, v2903, 6);
              result = (uint64_t)v3112;
              v10 = v3113;
              v2910 = *(_DWORD *)(a4 + 8);
            }
            v2911 = *(char *)(v3111 + 262095);
            v2912 = v2910 + 7;
            if (v2910 >= 0)
              v2912 = v2910;
            v2913 = v2912 & 0xFFFFFFF8;
            v2914 = *(_QWORD *)a4;
            v2915 = (uint64_t)v2912 >> 3;
            v2916 = v2910 - v2913;
            if (v2916)
            {
              v2917 = 7 - v2916;
              *(_BYTE *)(v2914 + v2915) &= ~(1 << v2917);
              *(_BYTE *)(*(_QWORD *)a4 + v2915) |= (v2833 != v2911) << v2917;
            }
            else
            {
              *(_BYTE *)(v2914 + v2915) = (v2833 != v2911) << 7;
            }
            *v15 = v2910 + 1;
            if (v2833 == v2911)
              goto LABEL_2554;
            aom_wb_write_inv_signed_literal((uint64_t *)a4, v2911, 6);
            goto LABEL_2553;
          }
        }
        else
        {
          *(_BYTE *)(v2495 + v2496) = (_BYTE)v2492 << 7;
          v2499 = v2469 + 4;
          *v15 = v2469 + 4;
          if (*(_BYTE *)(v3111 + 262085))
            goto LABEL_2224;
        }
        aom_wb_write_bit((uint64_t *)a4, 0);
LABEL_2553:
        result = (uint64_t)v3112;
        v10 = v3113;
        goto LABEL_2554;
      }
LABEL_1337:
      if (!*(_BYTE *)(result + 19))
      {
        v1378 = *(unsigned __int8 *)(result + 24);
        v1379 = *(_DWORD *)(a4 + 8);
        v1380 = v1379 + 7;
        if (v1379 >= 0)
          v1380 = *(_DWORD *)(a4 + 8);
        v1381 = v1380 & 0xFFFFFFF8;
        v1382 = *(_QWORD *)a4;
        v1383 = (uint64_t)v1380 >> 3;
        v1384 = v1379 - v1381;
        if (v1384)
        {
          v1385 = 7 - v1384;
          *(_BYTE *)(v1382 + v1383) &= ~(1 << v1385);
          *(_BYTE *)(*(_QWORD *)a4 + v1383) |= (v1378 == 2) << v1385;
        }
        else
        {
          *(_BYTE *)(v1382 + v1383) = (v1378 == 2) << 7;
        }
        *v15 = v1379 + 1;
      }
      if ((*v219 & 0xFD) != 0)
      {
        v1401 = *(unsigned __int8 *)(v3111 + 239041);
        v1402 = *(_DWORD *)(a4 + 8);
        v1403 = v1402 + 7;
        if (v1402 >= 0)
          v1403 = *(_DWORD *)(a4 + 8);
        v1404 = v1403 & 0xFFFFFFF8;
        v1405 = *(_QWORD *)a4;
        v1406 = (uint64_t)v1403 >> 3;
        v1407 = v1402 - v1404;
        if (v1407)
        {
          v1408 = 7 - v1407;
          *(_BYTE *)(v1405 + v1406) &= ~(1 << v1408);
          *(_BYTE *)(*(_QWORD *)a4 + v1406) |= (v1401 == 2) << v1408;
        }
        else
        {
          *(_BYTE *)(v1405 + v1406) = (v1401 == 2) << 7;
        }
        *v15 = v1402 + 1;
      }
      if (*(_DWORD *)(v3111 + 239060))
      {
        v1409 = *(_DWORD *)(v3111 + 239064);
        v1410 = *(_DWORD *)(a4 + 8);
        v1411 = v1410 + 7;
        if (v1410 >= 0)
          v1411 = *(_DWORD *)(a4 + 8);
        v1412 = v1411 & 0xFFFFFFF8;
        v1413 = *(_QWORD *)a4;
        v1414 = (uint64_t)v1411 >> 3;
        v1415 = v1410 - v1412;
        if (v1415)
        {
          v1416 = 7 - v1415;
          *(_BYTE *)(v1413 + v1414) &= ~(1 << v1416);
          v1413 = *(_QWORD *)a4;
          v1409 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1414) | (v1409 << v1416);
        }
        else
        {
          LOBYTE(v1409) = (_BYTE)v1409 << 7;
        }
        *(_BYTE *)(v1413 + v1414) = v1409;
        *v15 = v1410 + 1;
      }
      if (!*(_BYTE *)(result + 22) && (*v219 & 0xFD) != 0 && *(_BYTE *)(*(_QWORD *)v7 + 65))
      {
        v1425 = *(unsigned __int8 *)(result + 17);
        v1426 = *(_DWORD *)(a4 + 8);
        v1427 = v1426 + 7;
        if (v1426 >= 0)
          v1427 = *(_DWORD *)(a4 + 8);
        v1428 = v1427 & 0xFFFFFFF8;
        v1429 = *(_QWORD *)a4;
        v1430 = (uint64_t)v1427 >> 3;
        v1431 = v1426 - v1428;
        if (v1431)
        {
          v1432 = 7 - v1431;
          *(_BYTE *)(v1429 + v1430) &= ~(1 << v1432);
          v1429 = *(_QWORD *)a4;
          v1425 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1430) | (v1425 << v1432);
        }
        else
        {
          LOBYTE(v1425) = (_BYTE)v1425 << 7;
        }
        *(_BYTE *)(v1429 + v1430) = v1425;
        *v15 = v1426 + 1;
      }
      v1417 = *(_BYTE *)(result + 21);
      v1418 = *(_DWORD *)(a4 + 8);
      v1419 = v1418 + 7;
      if (v1418 >= 0)
        v1419 = *(_DWORD *)(a4 + 8);
      v1420 = v1419 & 0xFFFFFFF8;
      v1421 = *(_QWORD *)a4;
      v1422 = (uint64_t)v1419 >> 3;
      v1423 = v1418 - v1420;
      if (v1423)
      {
        v1424 = 7 - v1423;
        *(_BYTE *)(v1421 + v1422) &= ~(1 << v1424);
        *(_BYTE *)(*(_QWORD *)a4 + v1422) |= v1417 << v1424;
        *v15 = v1418 + 1;
        if ((*v219 & 0xFD) == 0)
          goto LABEL_1419;
LABEL_1381:
        v1433 = 0;
        v1434 = v3111 + 263480;
        while (2)
        {
          v1439 = *(_QWORD *)(v3111 + 239264);
          if (v1439)
            v1440 = (int *)(v1439 + v1433 + 312);
          else
            v1440 = (int *)&default_warp_params;
          v1441 = *(unsigned __int8 *)(result + 13);
          v1442 = *(unsigned __int8 *)(v3111 + 263496 + v1433);
          v1443 = *(_DWORD *)(a4 + 8);
          v1444 = v1443 + 7;
          if (v1443 >= 0)
            v1444 = *(_DWORD *)(a4 + 8);
          v1445 = v1444 & 0xFFFFFFF8;
          v1446 = *(_QWORD *)a4;
          v1447 = (uint64_t)v1444 >> 3;
          v1448 = v1443 - v1445;
          if (v1448)
          {
            v1449 = 7 - v1448;
            *(_BYTE *)(v1446 + v1447) &= ~(1 << v1449);
            *(_BYTE *)(*(_QWORD *)a4 + v1447) |= (v1442 != 0) << v1449;
            v1450 = v1443 + 1;
            *v15 = v1443 + 1;
            if (!v1442)
              goto LABEL_1395;
          }
          else
          {
            *(_BYTE *)(v1446 + v1447) = (v1442 != 0) << 7;
            v1450 = v1443 + 1;
            *v15 = v1443 + 1;
            if (!v1442)
              goto LABEL_1395;
          }
          v1451 = v1450 + 7;
          if (v1450 >= 0)
            v1451 = v1450;
          v1452 = v1451 & 0xFFFFFFF8;
          v1453 = *(_QWORD *)a4;
          v1454 = (uint64_t)v1451 >> 3;
          v1455 = v1450 - v1452;
          if (v1455)
          {
            v1456 = 7 - v1455;
            *(_BYTE *)(v1453 + v1454) &= ~(1 << v1456);
            *(_BYTE *)(*(_QWORD *)a4 + v1454) |= (v1442 == 2) << v1456;
            v1457 = v1443 + 2;
            *v15 = v1443 + 2;
            if (v1442 == 2)
              break;
LABEL_1411:
            v1458 = v1457 + 7;
            if (v1457 >= 0)
              v1458 = v1457;
            v1459 = v1458 & 0xFFFFFFF8;
            v1460 = *(_QWORD *)a4;
            v1461 = (uint64_t)v1458 >> 3;
            v1462 = v1457 - v1459;
            if (v1462)
            {
              v1463 = 7 - v1462;
              *(_BYTE *)(v1460 + v1461) &= ~(1 << v1463);
              *(_BYTE *)(*(_QWORD *)a4 + v1461) |= (v1442 == 1) << v1463;
              *v15 = v1443 + 3;
              if (v1442 >= 2)
                break;
LABEL_1382:
              if (v1441)
                v1435 = 13;
              else
                v1435 = 14;
              if (v1441)
                v1436 = 513;
              else
                v1436 = 257;
              if (v1442 == 1)
                v1437 = v1435;
              else
                v1437 = 10;
              if (v1442 == 1)
                v1438 = v1436;
              else
                v1438 = 4097;
              aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, v1438, 3, *v1440 >> v1437, *(int *)(v1434 + v1433 - 16) >> v1437);
              aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, v1438, 3, v1440[1] >> v1437, *(int *)(v1434 + v1433 - 12) >> v1437);
              result = (uint64_t)v3112;
              v10 = v3113;
LABEL_1395:
              v1433 += 36;
              if (v1433 == 252)
                goto LABEL_1419;
              continue;
            }
            *(_BYTE *)(v1460 + v1461) = (v1442 == 1) << 7;
            *v15 = v1443 + 3;
            if (v1442 < 2)
              goto LABEL_1382;
          }
          else
          {
            *(_BYTE *)(v1453 + v1454) = (v1442 == 2) << 7;
            v1457 = v1443 + 2;
            *v15 = v1443 + 2;
            if (v1442 != 2)
              goto LABEL_1411;
          }
          break;
        }
        v1464 = (int *)(v1434 + v1433);
        aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, 4097, 3, (v1440[2] >> 1) ^ 0x8000, (*(_DWORD *)(v1434 + v1433 - 8) >> 1) ^ 0x8000);
        aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, 4097, 3, v1440[3] >> 1, *(int *)(v1434 + v1433 - 4) >> 1);
        if (v1442 >= 3)
        {
          aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, 4097, 3, v1440[4] >> 1, *v1464 >> 1);
          aom_wb_write_signed_primitive_refsubexpfin((uint64_t *)a4, 4097, 3, (v1440[5] >> 1) ^ 0x8000, (v1464[1] >> 1) ^ 0x8000);
        }
        goto LABEL_1382;
      }
      *(_BYTE *)(v1421 + v1422) = v1417 << 7;
      *v15 = v1418 + 1;
      if ((*v219 & 0xFD) != 0)
        goto LABEL_1381;
LABEL_1419:
      if (*((_BYTE *)v10 + 109) && (*(_DWORD *)result || *(_DWORD *)(result + 4)))
      {
        v1465 = *(_QWORD *)(v3111 + 239272);
        v1466 = *(_DWORD *)(v1465 + 572);
        v1467 = *(_DWORD *)(a4 + 8);
        v1468 = v1467 + 7;
        if (v1467 >= 0)
          v1468 = *(_DWORD *)(a4 + 8);
        v1469 = v1468 & 0xFFFFFFF8;
        v1470 = *(_QWORD *)a4;
        v1471 = (uint64_t)v1468 >> 3;
        v1472 = v1467 - v1469;
        if (v1472)
        {
          v1473 = 7 - v1472;
          *(_BYTE *)(v1470 + v1471) &= ~(1 << v1473);
          *(_BYTE *)(*(_QWORD *)a4 + v1471) |= v1466 << v1473;
          v1474 = v1467 + 1;
          *v15 = v1474;
          if (!*(_DWORD *)(v1465 + 572))
            goto LABEL_2057;
LABEL_1428:
          v1475 = *(unsigned __int16 *)(v1465 + 1216);
          v1476 = 17;
          v1477 = v1474;
          do
          {
            while (1)
            {
              v1479 = (v1475 >> (v1476 - 2)) & 1;
              v1480 = v1477 + 7;
              if (v1477 >= 0)
                v1480 = v1477;
              v1481 = v1476 - v1474 + (v1480 & 0xFFFFFFF8);
              v1482 = *(_QWORD *)a4;
              v1483 = (uint64_t)v1480 >> 3;
              if (v1481 == 17)
                break;
              v1478 = v1481 - 10;
              result = *(unsigned __int8 *)(v1482 + v1483);
              *(_BYTE *)(v1482 + v1483) = result & ~(1 << v1478);
              *(_BYTE *)(*(_QWORD *)a4 + v1483) |= (_BYTE)v1479 << v1478;
              *v15 = ++v1477;
              if (--v1476 <= 1)
                goto LABEL_1434;
            }
            *(_BYTE *)(v1482 + v1483) = (_BYTE)v1479 << 7;
            *v15 = ++v1477;
            --v1476;
          }
          while (v1476 > 1);
LABEL_1434:
          if (*v3110 == 1)
          {
            v1484 = *(_DWORD *)(v1465 + 576);
            if (v1477 >= 0)
              v1485 = v1477;
            else
              v1485 = v1477 + 7;
            v1486 = (v1485 & 0xFFFFFFF8) - v1474 + v1476;
            v1487 = *(_QWORD *)a4;
            v1488 = (uint64_t)v1485 >> 3;
            if (v1486 == 17)
            {
              *(_BYTE *)(v1487 + v1488) = (_BYTE)v1484 << 7;
            }
            else
            {
              v1500 = v1486 - 10;
              *(_BYTE *)(v1487 + v1488) &= ~(1 << v1500);
              *(_BYTE *)(*(_QWORD *)a4 + v1488) |= v1484 << v1500;
            }
            *v15 = ++v1477;
          }
          if (*(_DWORD *)(v1465 + 576))
          {
            v1501 = *(_DWORD *)(v1465 + 692);
            v1502 = v1477 + 7;
            if (v1477 >= 0)
              v1502 = v1477;
            v1503 = v1502 & 0xFFFFFFF8;
            v1504 = *(_QWORD *)a4;
            v1505 = (uint64_t)v1502 >> 3;
            v1506 = v1477 - v1503;
            if (v1506)
            {
              v1507 = 7 - v1506;
              *(_BYTE *)(v1504 + v1505) &= ~(1 << v1507);
              v1504 = *(_QWORD *)a4;
              v1508 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1505) | (((v1501 >> 3) & 1) << v1507);
            }
            else
            {
              LOBYTE(v1508) = ((*(_DWORD *)(v1465 + 692) & 8) != 0) << 7;
            }
            *(_BYTE *)(v1504 + v1505) = v1508;
            *(_DWORD *)(a4 + 8) = v1477 + 1;
            v1524 = v1477 + 8;
            if (v1477 >= -1)
              v1524 = v1477 + 1;
            v1525 = v1524 & 0xFFFFFFF8;
            v1526 = *(_QWORD *)a4;
            v1527 = (uint64_t)v1524 >> 3;
            v1528 = v1477 + 1 - v1525;
            if (v1528)
            {
              v1529 = 7 - v1528;
              *(_BYTE *)(v1526 + v1527) &= ~(1 << v1529);
              v1526 = *(_QWORD *)a4;
              v1530 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1527) | (((v1501 >> 2) & 1) << v1529);
            }
            else
            {
              LOBYTE(v1530) = ((v1501 & 4) != 0) << 7;
            }
            *(_BYTE *)(v1526 + v1527) = v1530;
            *(_DWORD *)(a4 + 8) = v1477 + 2;
            v1531 = v1477 + 9;
            if (v1477 >= -2)
              v1531 = v1477 + 2;
            v1532 = v1531 & 0xFFFFFFF8;
            v1533 = *(_QWORD *)a4;
            v1534 = (uint64_t)v1531 >> 3;
            v1535 = v1477 + 2 - v1532;
            if (v1535)
            {
              v1536 = 7 - v1535;
              *(_BYTE *)(v1533 + v1534) &= ~(1 << v1536);
              v1533 = *(_QWORD *)a4;
              v1537 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1534) | (((v1501 >> 1) & 1) << v1536);
            }
            else
            {
              LOBYTE(v1537) = ((v1501 & 2) != 0) << 7;
            }
            *(_BYTE *)(v1533 + v1534) = v1537;
            *(_DWORD *)(a4 + 8) = v1477 + 3;
            v1538 = v1501 & 1;
            v1539 = v1477 + 10;
            if (v1477 >= -3)
              v1539 = v1477 + 3;
            v1540 = v1539 & 0xFFFFFFF8;
            v1541 = *(_QWORD *)a4;
            v1542 = (uint64_t)v1539 >> 3;
            v1543 = v1477 + 3 - v1540;
            if (v1543)
            {
              v1544 = 7 - v1543;
              *(_BYTE *)(v1541 + v1542) &= ~(1 << v1544);
              *(_BYTE *)(*(_QWORD *)a4 + v1542) |= v1538 << v1544;
              v1545 = v1477 + 4;
              *v15 = v1477 + 4;
              if (*(int *)(v1465 + 692) < 1)
                goto LABEL_1501;
LABEL_1504:
              v1546 = 0;
              v1547 = 7 - v1545;
              v1548 = (unsigned int *)(v1465 + 584);
              do
              {
                v1550 = v1545;
                v1551 = *(v1548 - 1);
                v1552 = v1550 + 7;
                if (v1550 >= 0)
                  v1552 = v1550;
                v1553 = v1552 & 0xFFFFFFF8;
                v1554 = *(_QWORD *)a4;
                v1555 = (uint64_t)v1552 >> 3;
                if (v1553 == v1550)
                {
                  LOBYTE(v1556) = ((*(v1548 - 1) & 0x80) != 0) << 7;
                }
                else
                {
                  v1557 = v1547 + v1553;
                  *(_BYTE *)(v1554 + v1555) &= ~(1 << v1557);
                  v1554 = *(_QWORD *)a4;
                  v1556 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1555) | (((v1551 >> 7) & 1) << v1557);
                }
                *(_BYTE *)(v1554 + v1555) = v1556;
                *(_DWORD *)(a4 + 8) = v1550 + 1;
                v1558 = v1550 + 8;
                if (v1550 + 1 >= 0)
                  v1558 = v1550 + 1;
                v1559 = v1558 & 0xFFFFFFF8;
                v1560 = *(_QWORD *)a4;
                v1561 = (uint64_t)v1558 >> 3;
                v1562 = v1550 + 1 - v1559;
                if (v1562)
                {
                  v1563 = 7 - v1562;
                  *(_BYTE *)(v1560 + v1561) &= ~(1 << v1563);
                  v1560 = *(_QWORD *)a4;
                  v1564 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1561) | (((v1551 >> 6) & 1) << v1563);
                }
                else
                {
                  LOBYTE(v1564) = ((v1551 & 0x40) != 0) << 7;
                }
                *(_BYTE *)(v1560 + v1561) = v1564;
                *(_DWORD *)(a4 + 8) = v1550 + 2;
                v1565 = v1550 + 9;
                if (v1550 + 2 >= 0)
                  v1565 = v1550 + 2;
                v1566 = v1565 & 0xFFFFFFF8;
                v1567 = *(_QWORD *)a4;
                v1568 = (uint64_t)v1565 >> 3;
                v1569 = v1550 + 2 - v1566;
                if (v1569)
                {
                  v1570 = 7 - v1569;
                  *(_BYTE *)(v1567 + v1568) &= ~(1 << v1570);
                  v1567 = *(_QWORD *)a4;
                  v1571 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1568) | (((v1551 >> 5) & 1) << v1570);
                }
                else
                {
                  LOBYTE(v1571) = ((v1551 & 0x20) != 0) << 7;
                }
                *(_BYTE *)(v1567 + v1568) = v1571;
                *(_DWORD *)(a4 + 8) = v1550 + 3;
                v1572 = v1550 + 10;
                if (v1550 + 3 >= 0)
                  v1572 = v1550 + 3;
                v1573 = v1572 & 0xFFFFFFF8;
                v1574 = *(_QWORD *)a4;
                v1575 = (uint64_t)v1572 >> 3;
                v1576 = v1550 + 3 - v1573;
                if (v1576)
                {
                  v1577 = 7 - v1576;
                  *(_BYTE *)(v1574 + v1575) &= ~(1 << v1577);
                  v1574 = *(_QWORD *)a4;
                  v1578 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1575) | (((v1551 >> 4) & 1) << v1577);
                }
                else
                {
                  LOBYTE(v1578) = ((v1551 & 0x10) != 0) << 7;
                }
                *(_BYTE *)(v1574 + v1575) = v1578;
                *(_DWORD *)(a4 + 8) = v1550 + 4;
                v1579 = v1550 + 11;
                if (v1550 + 4 >= 0)
                  v1579 = v1550 + 4;
                v1580 = v1579 & 0xFFFFFFF8;
                v1581 = *(_QWORD *)a4;
                v1582 = (uint64_t)v1579 >> 3;
                v1583 = v1550 + 4 - v1580;
                if (v1583)
                {
                  v1584 = 7 - v1583;
                  *(_BYTE *)(v1581 + v1582) &= ~(1 << v1584);
                  v1581 = *(_QWORD *)a4;
                  v1585 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1582) | (((v1551 >> 3) & 1) << v1584);
                }
                else
                {
                  LOBYTE(v1585) = ((v1551 & 8) != 0) << 7;
                }
                *(_BYTE *)(v1581 + v1582) = v1585;
                *(_DWORD *)(a4 + 8) = v1550 + 5;
                v1586 = v1550 + 12;
                if (v1550 + 5 >= 0)
                  v1586 = v1550 + 5;
                v1587 = v1586 & 0xFFFFFFF8;
                v1588 = *(_QWORD *)a4;
                v1589 = (uint64_t)v1586 >> 3;
                v1590 = v1550 + 5 - v1587;
                if (v1590)
                {
                  v1591 = 7 - v1590;
                  *(_BYTE *)(v1588 + v1589) &= ~(1 << v1591);
                  v1588 = *(_QWORD *)a4;
                  v1592 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1589) | (((v1551 >> 2) & 1) << v1591);
                }
                else
                {
                  LOBYTE(v1592) = ((v1551 & 4) != 0) << 7;
                }
                *(_BYTE *)(v1588 + v1589) = v1592;
                *(_DWORD *)(a4 + 8) = v1550 + 6;
                v1593 = v1550 + 13;
                if (v1550 + 6 >= 0)
                  v1593 = v1550 + 6;
                v1594 = v1593 & 0xFFFFFFF8;
                v1595 = *(_QWORD *)a4;
                v1596 = (uint64_t)v1593 >> 3;
                v1597 = v1550 + 6 - v1594;
                if (v1597)
                {
                  v1598 = 7 - v1597;
                  *(_BYTE *)(v1595 + v1596) &= ~(1 << v1598);
                  v1595 = *(_QWORD *)a4;
                  v1599 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1596) | (((v1551 >> 1) & 1) << v1598);
                }
                else
                {
                  LOBYTE(v1599) = ((v1551 & 2) != 0) << 7;
                }
                *(_BYTE *)(v1595 + v1596) = v1599;
                *(_DWORD *)(a4 + 8) = v1550 + 7;
                v1600 = v1551 & 1;
                v1601 = v1550 + 14;
                if (v1550 + 7 >= 0)
                  v1601 = v1550 + 7;
                v1602 = v1601 & 0xFFFFFFF8;
                v1603 = *(_QWORD *)a4;
                v1604 = (uint64_t)v1601 >> 3;
                v1605 = v1550 + 7 - v1602;
                if (v1605)
                {
                  v1606 = 7 - v1605;
                  *(_BYTE *)(v1603 + v1604) &= ~(1 << v1606);
                  v1603 = *(_QWORD *)a4;
                  v1600 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1604) | (v1600 << v1606);
                }
                else
                {
                  LOBYTE(v1600) = (_BYTE)v1600 << 7;
                }
                *(_BYTE *)(v1603 + v1604) = v1600;
                *(_DWORD *)(a4 + 8) = v1550 + 8;
                v1607 = *v1548;
                v1608 = (*v1548 >> 7) & 1;
                v1609 = v1550 + 15;
                if (v1550 + 8 >= 0)
                  v1609 = v1550 + 8;
                v1610 = v1609 & 0xFFFFFFF8;
                v1611 = *(_QWORD *)a4;
                v1612 = (uint64_t)v1609 >> 3;
                v1613 = v1550 + 8 - v1610;
                if (v1613)
                {
                  v1614 = 7 - v1613;
                  *(_BYTE *)(v1611 + v1612) &= ~(1 << v1614);
                  v1611 = *(_QWORD *)a4;
                  v1615 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1612) | (v1608 << v1614);
                }
                else
                {
                  LOBYTE(v1615) = ((*v1548 & 0x80) != 0) << 7;
                }
                *(_BYTE *)(v1611 + v1612) = v1615;
                *(_DWORD *)(a4 + 8) = v1550 + 9;
                v1616 = v1550 + 16;
                if (v1550 + 9 >= 0)
                  v1616 = v1550 + 9;
                v1617 = v1616 & 0xFFFFFFF8;
                v1618 = *(_QWORD *)a4;
                v1619 = (uint64_t)v1616 >> 3;
                v1620 = v1550 + 9 - v1617;
                if (v1620)
                {
                  v1621 = 7 - v1620;
                  *(_BYTE *)(v1618 + v1619) &= ~(1 << v1621);
                  v1618 = *(_QWORD *)a4;
                  v1622 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1619) | (((v1607 >> 6) & 1) << v1621);
                }
                else
                {
                  LOBYTE(v1622) = ((v1607 & 0x40) != 0) << 7;
                }
                *(_BYTE *)(v1618 + v1619) = v1622;
                *(_DWORD *)(a4 + 8) = v1550 + 10;
                v1623 = v1550 + 17;
                if (v1550 + 10 >= 0)
                  v1623 = v1550 + 10;
                v1624 = v1623 & 0xFFFFFFF8;
                v1625 = *(_QWORD *)a4;
                v1626 = (uint64_t)v1623 >> 3;
                v1627 = v1550 + 10 - v1624;
                if (v1627)
                {
                  v1628 = 7 - v1627;
                  *(_BYTE *)(v1625 + v1626) &= ~(1 << v1628);
                  v1625 = *(_QWORD *)a4;
                  v1629 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1626) | (((v1607 >> 5) & 1) << v1628);
                }
                else
                {
                  LOBYTE(v1629) = ((v1607 & 0x20) != 0) << 7;
                }
                *(_BYTE *)(v1625 + v1626) = v1629;
                *(_DWORD *)(a4 + 8) = v1550 + 11;
                v1630 = v1550 + 18;
                if (v1550 + 11 >= 0)
                  v1630 = v1550 + 11;
                v1631 = v1630 & 0xFFFFFFF8;
                v1632 = *(_QWORD *)a4;
                v1633 = (uint64_t)v1630 >> 3;
                v1634 = v1550 + 11 - v1631;
                if (v1634)
                {
                  v1635 = 7 - v1634;
                  *(_BYTE *)(v1632 + v1633) &= ~(1 << v1635);
                  v1632 = *(_QWORD *)a4;
                  v1636 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1633) | (((v1607 >> 4) & 1) << v1635);
                }
                else
                {
                  LOBYTE(v1636) = ((v1607 & 0x10) != 0) << 7;
                }
                *(_BYTE *)(v1632 + v1633) = v1636;
                *(_DWORD *)(a4 + 8) = v1550 + 12;
                v1637 = v1550 + 19;
                if (v1550 + 12 >= 0)
                  v1637 = v1550 + 12;
                v1638 = v1637 & 0xFFFFFFF8;
                v1639 = *(_QWORD *)a4;
                v1640 = (uint64_t)v1637 >> 3;
                v1641 = v1550 + 12 - v1638;
                if (v1641)
                {
                  v1642 = 7 - v1641;
                  *(_BYTE *)(v1639 + v1640) &= ~(1 << v1642);
                  v1639 = *(_QWORD *)a4;
                  v1643 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1640) | (((v1607 >> 3) & 1) << v1642);
                }
                else
                {
                  LOBYTE(v1643) = ((v1607 & 8) != 0) << 7;
                }
                *(_BYTE *)(v1639 + v1640) = v1643;
                *(_DWORD *)(a4 + 8) = v1550 + 13;
                v1644 = v1550 + 20;
                if (v1550 + 13 >= 0)
                  v1644 = v1550 + 13;
                v1645 = v1644 & 0xFFFFFFF8;
                v1646 = *(_QWORD *)a4;
                v1647 = (uint64_t)v1644 >> 3;
                v1648 = v1550 + 13 - v1645;
                if (v1648)
                {
                  v1649 = 7 - v1648;
                  *(_BYTE *)(v1646 + v1647) &= ~(1 << v1649);
                  v1646 = *(_QWORD *)a4;
                  v1650 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1647) | (((v1607 >> 2) & 1) << v1649);
                }
                else
                {
                  LOBYTE(v1650) = ((v1607 & 4) != 0) << 7;
                }
                *(_BYTE *)(v1646 + v1647) = v1650;
                *(_DWORD *)(a4 + 8) = v1550 + 14;
                v1651 = v1550 + 21;
                if (v1550 + 14 >= 0)
                  v1651 = v1550 + 14;
                v1652 = v1651 & 0xFFFFFFF8;
                v1653 = *(_QWORD *)a4;
                v1654 = (uint64_t)v1651 >> 3;
                v1655 = v1550 + 14 - v1652;
                if (v1655)
                {
                  v1656 = 7 - v1655;
                  *(_BYTE *)(v1653 + v1654) &= ~(1 << v1656);
                  v1653 = *(_QWORD *)a4;
                  v1657 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1654) | (((v1607 >> 1) & 1) << v1656);
                }
                else
                {
                  LOBYTE(v1657) = ((v1607 & 2) != 0) << 7;
                }
                *(_BYTE *)(v1653 + v1654) = v1657;
                *(_DWORD *)(a4 + 8) = v1550 + 15;
                v1658 = v1607 & 1;
                v1659 = v1550 + 22;
                if (v1550 + 15 >= 0)
                  v1659 = v1550 + 15;
                v1660 = v1659 & 0xFFFFFFF8;
                v1661 = *(_QWORD *)a4;
                v1662 = (uint64_t)v1659 >> 3;
                result = v1550 + 15 - v1660;
                if ((_DWORD)result)
                {
                  v1663 = 7 - result;
                  *(_BYTE *)(v1661 + v1662) &= ~(1 << v1663);
                  v1664 = v1658 << v1663;
                  v1661 = *(_QWORD *)a4;
                  result = *(unsigned __int8 *)(*(_QWORD *)a4 + v1662);
                  v1549 = result | v1664;
                }
                else
                {
                  v1549 = (_BYTE)v1658 << 7;
                }
                *(_BYTE *)(v1661 + v1662) = v1549;
                v1545 = v1550 + 16;
                *v15 = v1550 + 16;
                ++v1546;
                v1547 -= 16;
                v1548 += 2;
              }
              while (v1546 < *(int *)(v1465 + 692));
              v1545 = v1550 + 16;
              if (!*(_BYTE *)(*(_QWORD *)v3101 + 77))
                goto LABEL_1587;
            }
            else
            {
              *(_BYTE *)(v1541 + v1542) = (_BYTE)v1538 << 7;
              v1545 = v1477 + 4;
              *v15 = v1477 + 4;
              if (*(int *)(v1465 + 692) >= 1)
                goto LABEL_1504;
LABEL_1501:
              if (!*(_BYTE *)(*(_QWORD *)v3101 + 77))
              {
LABEL_1587:
                v1665 = *(_DWORD *)(v1465 + 1208);
                v1666 = v1545 + 7;
                if (v1545 >= 0)
                  v1666 = v1545;
                v1667 = v1666 & 0xFFFFFFF8;
                v1668 = *(_QWORD *)a4;
                v1669 = (uint64_t)v1666 >> 3;
                v1670 = v1545 - v1667;
                if (v1670)
                {
                  v1671 = 7 - v1670;
                  *(_BYTE *)(v1668 + v1669) &= ~(1 << v1671);
                  *(_BYTE *)(*(_QWORD *)a4 + v1669) |= v1665 << v1671;
                  *v15 = ++v1545;
                  v1672 = *(_QWORD *)v3101;
                  if (*(_BYTE *)(*(_QWORD *)v3101 + 77))
                    goto LABEL_1613;
                }
                else
                {
                  *(_BYTE *)(v1668 + v1669) = (_BYTE)v1665 << 7;
                  *v15 = ++v1545;
                  v1672 = *(_QWORD *)v3101;
                  if (*(_BYTE *)(*(_QWORD *)v3101 + 77))
                    goto LABEL_1613;
                }
                if (!*(_DWORD *)(v1465 + 1208)
                  && (*(_DWORD *)(v1672 + 96) != 1 || *(_DWORD *)(v1672 + 100) != 1 || *(_DWORD *)(v1465 + 692)))
                {
                  aom_wb_write_literal((uint64_t *)a4, *(_DWORD *)(v1465 + 776), 4);
                  if (*(int *)(v1465 + 776) >= 1)
                  {
                    v2542 = 0;
                    v2543 = *v15;
                    v2544 = 7 - *v15;
                    v2545 = (unsigned int *)(v1465 + 700);
                    do
                    {
                      v2549 = *(v2545 - 1);
                      v2550 = v2543 + 7;
                      if (v2543 >= 0)
                        v2550 = v2543;
                      v2551 = v2550 & 0xFFFFFFF8;
                      v2552 = *(_QWORD *)a4;
                      v2553 = (uint64_t)v2550 >> 3;
                      if (v2551 == v2543)
                      {
                        LOBYTE(v2554) = ((*(v2545 - 1) & 0x80) != 0) << 7;
                      }
                      else
                      {
                        v2555 = v2544 + v2551;
                        *(_BYTE *)(v2552 + v2553) &= ~(1 << v2555);
                        v2552 = *(_QWORD *)a4;
                        v2554 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2553) | (((v2549 >> 7) & 1) << v2555);
                      }
                      *(_BYTE *)(v2552 + v2553) = v2554;
                      v2556 = v2543 + 1;
                      *(_DWORD *)(a4 + 8) = v2556;
                      v2557 = v2556 + 7;
                      if (v2556 >= 0)
                        v2557 = v2556;
                      v2558 = v2557 & 0xFFFFFFF8;
                      v2559 = *(_QWORD *)a4;
                      v2560 = (uint64_t)v2557 >> 3;
                      v2561 = v2556 - v2558;
                      if (v2561)
                      {
                        v2562 = 7 - v2561;
                        *(_BYTE *)(v2559 + v2560) &= ~(1 << v2562);
                        v2559 = *(_QWORD *)a4;
                        v2563 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2560) | (((v2549 >> 6) & 1) << v2562);
                      }
                      else
                      {
                        LOBYTE(v2563) = ((v2549 & 0x40) != 0) << 7;
                      }
                      *(_BYTE *)(v2559 + v2560) = v2563;
                      v2564 = v2556 + 1;
                      *(_DWORD *)(a4 + 8) = v2564;
                      v2565 = v2564 + 7;
                      if (v2564 >= 0)
                        v2565 = v2564;
                      v2566 = v2565 & 0xFFFFFFF8;
                      v2567 = *(_QWORD *)a4;
                      v2568 = (uint64_t)v2565 >> 3;
                      v2569 = v2564 - v2566;
                      if (v2569)
                      {
                        v2570 = 7 - v2569;
                        *(_BYTE *)(v2567 + v2568) &= ~(1 << v2570);
                        v2567 = *(_QWORD *)a4;
                        v2571 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2568) | (((v2549 >> 5) & 1) << v2570);
                      }
                      else
                      {
                        LOBYTE(v2571) = ((v2549 & 0x20) != 0) << 7;
                      }
                      *(_BYTE *)(v2567 + v2568) = v2571;
                      v2572 = v2564 + 1;
                      *(_DWORD *)(a4 + 8) = v2572;
                      v2573 = v2572 + 7;
                      if (v2572 >= 0)
                        v2573 = v2572;
                      v2574 = v2573 & 0xFFFFFFF8;
                      v2575 = *(_QWORD *)a4;
                      v2576 = (uint64_t)v2573 >> 3;
                      v2577 = v2572 - v2574;
                      if (v2577)
                      {
                        v2578 = 7 - v2577;
                        *(_BYTE *)(v2575 + v2576) &= ~(1 << v2578);
                        v2575 = *(_QWORD *)a4;
                        v2579 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2576) | (((v2549 >> 4) & 1) << v2578);
                      }
                      else
                      {
                        LOBYTE(v2579) = ((v2549 & 0x10) != 0) << 7;
                      }
                      *(_BYTE *)(v2575 + v2576) = v2579;
                      v2580 = v2572 + 1;
                      *(_DWORD *)(a4 + 8) = v2580;
                      v2581 = v2580 + 7;
                      if (v2580 >= 0)
                        v2581 = v2580;
                      v2582 = v2581 & 0xFFFFFFF8;
                      v2583 = *(_QWORD *)a4;
                      v2584 = (uint64_t)v2581 >> 3;
                      v2585 = v2580 - v2582;
                      if (v2585)
                      {
                        v2586 = 7 - v2585;
                        *(_BYTE *)(v2583 + v2584) &= ~(1 << v2586);
                        v2583 = *(_QWORD *)a4;
                        v2587 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2584) | (((v2549 >> 3) & 1) << v2586);
                      }
                      else
                      {
                        LOBYTE(v2587) = ((v2549 & 8) != 0) << 7;
                      }
                      *(_BYTE *)(v2583 + v2584) = v2587;
                      v2588 = v2580 + 1;
                      *(_DWORD *)(a4 + 8) = v2588;
                      v2589 = v2588 + 7;
                      if (v2588 >= 0)
                        v2589 = v2588;
                      v2590 = v2589 & 0xFFFFFFF8;
                      v2591 = *(_QWORD *)a4;
                      v2592 = (uint64_t)v2589 >> 3;
                      v2593 = v2588 - v2590;
                      if (v2593)
                      {
                        v2594 = 7 - v2593;
                        *(_BYTE *)(v2591 + v2592) &= ~(1 << v2594);
                        v2591 = *(_QWORD *)a4;
                        v2595 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2592) | (((v2549 >> 2) & 1) << v2594);
                      }
                      else
                      {
                        LOBYTE(v2595) = ((v2549 & 4) != 0) << 7;
                      }
                      *(_BYTE *)(v2591 + v2592) = v2595;
                      v2596 = v2588 + 1;
                      *(_DWORD *)(a4 + 8) = v2596;
                      v2597 = v2596 + 7;
                      if (v2596 >= 0)
                        v2597 = v2596;
                      v2598 = v2597 & 0xFFFFFFF8;
                      v2599 = *(_QWORD *)a4;
                      v2600 = (uint64_t)v2597 >> 3;
                      v2601 = v2596 - v2598;
                      if (v2601)
                      {
                        v2602 = 7 - v2601;
                        *(_BYTE *)(v2599 + v2600) &= ~(1 << v2602);
                        v2599 = *(_QWORD *)a4;
                        v2603 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2600) | (((v2549 >> 1) & 1) << v2602);
                      }
                      else
                      {
                        LOBYTE(v2603) = ((v2549 & 2) != 0) << 7;
                      }
                      *(_BYTE *)(v2599 + v2600) = v2603;
                      v2604 = v2596 + 1;
                      *(_DWORD *)(a4 + 8) = v2604;
                      v2605 = v2549 & 1;
                      v2606 = v2604 + 7;
                      if (v2604 >= 0)
                        v2606 = v2604;
                      v2607 = v2606 & 0xFFFFFFF8;
                      v2608 = *(_QWORD *)a4;
                      v2609 = (uint64_t)v2606 >> 3;
                      v2610 = v2604 - v2607;
                      if (v2610)
                      {
                        v2611 = 7 - v2610;
                        *(_BYTE *)(v2608 + v2609) &= ~(1 << v2611);
                        v2608 = *(_QWORD *)a4;
                        v2605 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2609) | (v2605 << v2611);
                      }
                      else
                      {
                        LOBYTE(v2605) = (_BYTE)v2605 << 7;
                      }
                      *(_BYTE *)(v2608 + v2609) = v2605;
                      v2612 = v2604 + 1;
                      *(_DWORD *)(a4 + 8) = v2612;
                      v2613 = *v2545;
                      v2614 = (*v2545 >> 7) & 1;
                      v2615 = v2612 + 7;
                      if (v2612 >= 0)
                        v2615 = v2612;
                      v2616 = v2615 & 0xFFFFFFF8;
                      v2617 = *(_QWORD *)a4;
                      v2618 = (uint64_t)v2615 >> 3;
                      v2619 = v2612 - v2616;
                      if (v2619)
                      {
                        v2620 = 7 - v2619;
                        *(_BYTE *)(v2617 + v2618) &= ~(1 << v2620);
                        v2617 = *(_QWORD *)a4;
                        v2621 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2618) | (v2614 << v2620);
                      }
                      else
                      {
                        LOBYTE(v2621) = ((*v2545 & 0x80) != 0) << 7;
                      }
                      *(_BYTE *)(v2617 + v2618) = v2621;
                      v2622 = v2612 + 1;
                      *(_DWORD *)(a4 + 8) = v2622;
                      v2623 = v2622 + 7;
                      if (v2622 >= 0)
                        v2623 = v2622;
                      v2624 = v2623 & 0xFFFFFFF8;
                      v2625 = *(_QWORD *)a4;
                      v2626 = (uint64_t)v2623 >> 3;
                      v2627 = v2622 - v2624;
                      if (v2627)
                      {
                        v2628 = 7 - v2627;
                        *(_BYTE *)(v2625 + v2626) &= ~(1 << v2628);
                        v2625 = *(_QWORD *)a4;
                        v2629 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2626) | (((v2613 >> 6) & 1) << v2628);
                      }
                      else
                      {
                        LOBYTE(v2629) = ((v2613 & 0x40) != 0) << 7;
                      }
                      *(_BYTE *)(v2625 + v2626) = v2629;
                      v2630 = v2622 + 1;
                      *(_DWORD *)(a4 + 8) = v2630;
                      v2631 = v2630 + 7;
                      if (v2630 >= 0)
                        v2631 = v2630;
                      v2632 = v2631 & 0xFFFFFFF8;
                      v2633 = *(_QWORD *)a4;
                      v2634 = (uint64_t)v2631 >> 3;
                      v2635 = v2630 - v2632;
                      if (v2635)
                      {
                        v2636 = 7 - v2635;
                        *(_BYTE *)(v2633 + v2634) &= ~(1 << v2636);
                        v2633 = *(_QWORD *)a4;
                        v2637 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2634) | (((v2613 >> 5) & 1) << v2636);
                      }
                      else
                      {
                        LOBYTE(v2637) = ((v2613 & 0x20) != 0) << 7;
                      }
                      *(_BYTE *)(v2633 + v2634) = v2637;
                      v2638 = v2630 + 1;
                      *(_DWORD *)(a4 + 8) = v2638;
                      v2639 = v2638 + 7;
                      if (v2638 >= 0)
                        v2639 = v2638;
                      v2640 = v2639 & 0xFFFFFFF8;
                      v2641 = *(_QWORD *)a4;
                      v2642 = (uint64_t)v2639 >> 3;
                      v2643 = v2638 - v2640;
                      if (v2643)
                      {
                        v2644 = 7 - v2643;
                        *(_BYTE *)(v2641 + v2642) &= ~(1 << v2644);
                        v2641 = *(_QWORD *)a4;
                        v2645 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2642) | (((v2613 >> 4) & 1) << v2644);
                      }
                      else
                      {
                        LOBYTE(v2645) = ((v2613 & 0x10) != 0) << 7;
                      }
                      *(_BYTE *)(v2641 + v2642) = v2645;
                      v2646 = v2638 + 1;
                      *(_DWORD *)(a4 + 8) = v2646;
                      v2647 = v2646 + 7;
                      if (v2646 >= 0)
                        v2647 = v2646;
                      v2648 = v2647 & 0xFFFFFFF8;
                      v2649 = *(_QWORD *)a4;
                      v2650 = (uint64_t)v2647 >> 3;
                      v2651 = v2646 - v2648;
                      if (v2651)
                      {
                        v2652 = 7 - v2651;
                        *(_BYTE *)(v2649 + v2650) &= ~(1 << v2652);
                        v2649 = *(_QWORD *)a4;
                        v2653 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2650) | (((v2613 >> 3) & 1) << v2652);
                      }
                      else
                      {
                        LOBYTE(v2653) = ((v2613 & 8) != 0) << 7;
                      }
                      *(_BYTE *)(v2649 + v2650) = v2653;
                      v2654 = v2646 + 1;
                      *(_DWORD *)(a4 + 8) = v2654;
                      v2655 = v2654 + 7;
                      if (v2654 >= 0)
                        v2655 = v2654;
                      v2656 = v2655 & 0xFFFFFFF8;
                      v2657 = *(_QWORD *)a4;
                      v2658 = (uint64_t)v2655 >> 3;
                      v2659 = v2654 - v2656;
                      if (v2659)
                      {
                        v2660 = 7 - v2659;
                        *(_BYTE *)(v2657 + v2658) &= ~(1 << v2660);
                        v2657 = *(_QWORD *)a4;
                        v2661 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2658) | (((v2613 >> 2) & 1) << v2660);
                      }
                      else
                      {
                        LOBYTE(v2661) = ((v2613 & 4) != 0) << 7;
                      }
                      *(_BYTE *)(v2657 + v2658) = v2661;
                      v2662 = v2654 + 1;
                      *(_DWORD *)(a4 + 8) = v2662;
                      v2663 = v2662 + 7;
                      if (v2662 >= 0)
                        v2663 = v2662;
                      v2664 = v2663 & 0xFFFFFFF8;
                      v2665 = *(_QWORD *)a4;
                      v2666 = (uint64_t)v2663 >> 3;
                      v2667 = v2662 - v2664;
                      if (v2667)
                      {
                        v2668 = 7 - v2667;
                        *(_BYTE *)(v2665 + v2666) &= ~(1 << v2668);
                        v2665 = *(_QWORD *)a4;
                        v2669 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2666) | (((v2613 >> 1) & 1) << v2668);
                      }
                      else
                      {
                        LOBYTE(v2669) = ((v2613 & 2) != 0) << 7;
                      }
                      *(_BYTE *)(v2665 + v2666) = v2669;
                      v2670 = v2662 + 1;
                      *(_DWORD *)(a4 + 8) = v2670;
                      v2548 = v2613 & 1;
                      v2671 = v2670 + 7;
                      if (v2670 >= 0)
                        v2671 = v2670;
                      v2672 = v2671 & 0xFFFFFFF8;
                      v2547 = *(_QWORD *)a4;
                      v2673 = (uint64_t)v2671 >> 3;
                      v2674 = v2670 - v2672;
                      if (v2674)
                      {
                        v2546 = 7 - v2674;
                        *(_BYTE *)(v2547 + v2673) &= ~(1 << v2546);
                        v2547 = *(_QWORD *)a4;
                        v2548 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2673) | (v2548 << v2546);
                      }
                      else
                      {
                        LOBYTE(v2548) = (_BYTE)v2548 << 7;
                      }
                      *(_BYTE *)(v2547 + v2673) = v2548;
                      v2543 = v2670 + 1;
                      *v15 = v2543;
                      ++v2542;
                      LOBYTE(v2544) = v2544 - 16;
                      v2545 += 2;
                    }
                    while (v2542 < *(int *)(v1465 + 776));
                  }
                  result = (uint64_t)aom_wb_write_literal((uint64_t *)a4, *(_DWORD *)(v1465 + 860), 4);
                  v1545 = *(_DWORD *)(a4 + 8);
                  if (*(int *)(v1465 + 860) >= 1)
                  {
                    v2675 = 0;
                    v2676 = 7 - v1545;
                    v2677 = (unsigned int *)(v1465 + 784);
                    v2678 = *(_DWORD *)(a4 + 8);
                    do
                    {
                      v2683 = *(v2677 - 1);
                      v2684 = v2678 + 7;
                      if (v2678 >= 0)
                        v2684 = v2678;
                      v2685 = v2684 & 0xFFFFFFF8;
                      v2686 = *(_QWORD *)a4;
                      v2687 = (uint64_t)v2684 >> 3;
                      if (v2685 == v2678)
                      {
                        LOBYTE(v2688) = ((*(v2677 - 1) & 0x80) != 0) << 7;
                      }
                      else
                      {
                        v2689 = v2676 + v2685;
                        *(_BYTE *)(v2686 + v2687) &= ~(1 << v2689);
                        v2686 = *(_QWORD *)a4;
                        v2688 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2687) | (((v2683 >> 7) & 1) << v2689);
                      }
                      *(_BYTE *)(v2686 + v2687) = v2688;
                      *(_DWORD *)(a4 + 8) = v2678 + 1;
                      v2690 = v2678 + 8;
                      if (v2678 + 1 >= 0)
                        v2690 = v2678 + 1;
                      v2691 = v2690 & 0xFFFFFFF8;
                      v2692 = *(_QWORD *)a4;
                      v2693 = (uint64_t)v2690 >> 3;
                      v2694 = v2678 + 1 - v2691;
                      if (v2694)
                      {
                        v2695 = 7 - v2694;
                        *(_BYTE *)(v2692 + v2693) &= ~(1 << v2695);
                        v2692 = *(_QWORD *)a4;
                        v2696 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2693) | (((v2683 >> 6) & 1) << v2695);
                      }
                      else
                      {
                        LOBYTE(v2696) = ((v2683 & 0x40) != 0) << 7;
                      }
                      *(_BYTE *)(v2692 + v2693) = v2696;
                      *(_DWORD *)(a4 + 8) = v2678 + 2;
                      v2697 = v2678 + 9;
                      if (v2678 + 2 >= 0)
                        v2697 = v2678 + 2;
                      v2698 = v2697 & 0xFFFFFFF8;
                      v2699 = *(_QWORD *)a4;
                      v2700 = (uint64_t)v2697 >> 3;
                      v2701 = v2678 + 2 - v2698;
                      if (v2701)
                      {
                        v2702 = 7 - v2701;
                        *(_BYTE *)(v2699 + v2700) &= ~(1 << v2702);
                        v2699 = *(_QWORD *)a4;
                        v2703 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2700) | (((v2683 >> 5) & 1) << v2702);
                      }
                      else
                      {
                        LOBYTE(v2703) = ((v2683 & 0x20) != 0) << 7;
                      }
                      *(_BYTE *)(v2699 + v2700) = v2703;
                      *(_DWORD *)(a4 + 8) = v2678 + 3;
                      v2704 = v2678 + 10;
                      if (v2678 + 3 >= 0)
                        v2704 = v2678 + 3;
                      v2705 = v2704 & 0xFFFFFFF8;
                      v2706 = *(_QWORD *)a4;
                      v2707 = (uint64_t)v2704 >> 3;
                      v2708 = v2678 + 3 - v2705;
                      if (v2708)
                      {
                        v2709 = 7 - v2708;
                        *(_BYTE *)(v2706 + v2707) &= ~(1 << v2709);
                        v2706 = *(_QWORD *)a4;
                        v2710 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2707) | (((v2683 >> 4) & 1) << v2709);
                      }
                      else
                      {
                        LOBYTE(v2710) = ((v2683 & 0x10) != 0) << 7;
                      }
                      *(_BYTE *)(v2706 + v2707) = v2710;
                      *(_DWORD *)(a4 + 8) = v2678 + 4;
                      v2711 = v2678 + 11;
                      if (v2678 + 4 >= 0)
                        v2711 = v2678 + 4;
                      v2712 = v2711 & 0xFFFFFFF8;
                      v2713 = *(_QWORD *)a4;
                      v2714 = (uint64_t)v2711 >> 3;
                      v2715 = v2678 + 4 - v2712;
                      if (v2715)
                      {
                        v2716 = 7 - v2715;
                        *(_BYTE *)(v2713 + v2714) &= ~(1 << v2716);
                        v2713 = *(_QWORD *)a4;
                        v2717 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2714) | (((v2683 >> 3) & 1) << v2716);
                      }
                      else
                      {
                        LOBYTE(v2717) = ((v2683 & 8) != 0) << 7;
                      }
                      *(_BYTE *)(v2713 + v2714) = v2717;
                      *(_DWORD *)(a4 + 8) = v2678 + 5;
                      v2718 = v2678 + 12;
                      if (v2678 + 5 >= 0)
                        v2718 = v2678 + 5;
                      v2719 = v2718 & 0xFFFFFFF8;
                      v2720 = *(_QWORD *)a4;
                      v2721 = (uint64_t)v2718 >> 3;
                      v2722 = v2678 + 5 - v2719;
                      if (v2722)
                      {
                        v2723 = 7 - v2722;
                        *(_BYTE *)(v2720 + v2721) &= ~(1 << v2723);
                        v2720 = *(_QWORD *)a4;
                        v2724 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2721) | (((v2683 >> 2) & 1) << v2723);
                      }
                      else
                      {
                        LOBYTE(v2724) = ((v2683 & 4) != 0) << 7;
                      }
                      *(_BYTE *)(v2720 + v2721) = v2724;
                      *(_DWORD *)(a4 + 8) = v2678 + 6;
                      v2725 = v2678 + 13;
                      if (v2678 + 6 >= 0)
                        v2725 = v2678 + 6;
                      v2726 = v2725 & 0xFFFFFFF8;
                      v2727 = *(_QWORD *)a4;
                      v2728 = (uint64_t)v2725 >> 3;
                      v2729 = v2678 + 6 - v2726;
                      if (v2729)
                      {
                        v2730 = 7 - v2729;
                        *(_BYTE *)(v2727 + v2728) &= ~(1 << v2730);
                        v2727 = *(_QWORD *)a4;
                        v2731 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2728) | (((v2683 >> 1) & 1) << v2730);
                      }
                      else
                      {
                        LOBYTE(v2731) = ((v2683 & 2) != 0) << 7;
                      }
                      *(_BYTE *)(v2727 + v2728) = v2731;
                      *(_DWORD *)(a4 + 8) = v2678 + 7;
                      v2732 = v2683 & 1;
                      v2733 = v2678 + 14;
                      if (v2678 + 7 >= 0)
                        v2733 = v2678 + 7;
                      v2734 = v2733 & 0xFFFFFFF8;
                      v2735 = *(_QWORD *)a4;
                      v2736 = (uint64_t)v2733 >> 3;
                      v2737 = v2678 + 7 - v2734;
                      if (v2737)
                      {
                        v2738 = 7 - v2737;
                        *(_BYTE *)(v2735 + v2736) &= ~(1 << v2738);
                        v2735 = *(_QWORD *)a4;
                        v2732 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2736) | (v2732 << v2738);
                      }
                      else
                      {
                        LOBYTE(v2732) = (_BYTE)v2732 << 7;
                      }
                      *(_BYTE *)(v2735 + v2736) = v2732;
                      *(_DWORD *)(a4 + 8) = v2678 + 8;
                      v2739 = *v2677;
                      v2740 = (*v2677 >> 7) & 1;
                      v2741 = v2678 + 15;
                      if (v2678 + 8 >= 0)
                        v2741 = v2678 + 8;
                      v2742 = v2741 & 0xFFFFFFF8;
                      v2743 = *(_QWORD *)a4;
                      v2744 = (uint64_t)v2741 >> 3;
                      v2745 = v2678 + 8 - v2742;
                      if (v2745)
                      {
                        v2746 = 7 - v2745;
                        *(_BYTE *)(v2743 + v2744) &= ~(1 << v2746);
                        v2743 = *(_QWORD *)a4;
                        v2747 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2744) | (v2740 << v2746);
                      }
                      else
                      {
                        LOBYTE(v2747) = ((*v2677 & 0x80) != 0) << 7;
                      }
                      *(_BYTE *)(v2743 + v2744) = v2747;
                      *(_DWORD *)(a4 + 8) = v2678 + 9;
                      v2748 = v2678 + 16;
                      if (v2678 + 9 >= 0)
                        v2748 = v2678 + 9;
                      v2749 = v2748 & 0xFFFFFFF8;
                      v2750 = *(_QWORD *)a4;
                      v2751 = (uint64_t)v2748 >> 3;
                      v2752 = v2678 + 9 - v2749;
                      if (v2752)
                      {
                        v2753 = 7 - v2752;
                        *(_BYTE *)(v2750 + v2751) &= ~(1 << v2753);
                        v2750 = *(_QWORD *)a4;
                        v2754 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2751) | (((v2739 >> 6) & 1) << v2753);
                      }
                      else
                      {
                        LOBYTE(v2754) = ((v2739 & 0x40) != 0) << 7;
                      }
                      *(_BYTE *)(v2750 + v2751) = v2754;
                      *(_DWORD *)(a4 + 8) = v2678 + 10;
                      v2755 = v2678 + 17;
                      if (v2678 + 10 >= 0)
                        v2755 = v2678 + 10;
                      v2756 = v2755 & 0xFFFFFFF8;
                      v2757 = *(_QWORD *)a4;
                      v2758 = (uint64_t)v2755 >> 3;
                      v2759 = v2678 + 10 - v2756;
                      if (v2759)
                      {
                        v2760 = 7 - v2759;
                        *(_BYTE *)(v2757 + v2758) &= ~(1 << v2760);
                        v2757 = *(_QWORD *)a4;
                        v2761 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2758) | (((v2739 >> 5) & 1) << v2760);
                      }
                      else
                      {
                        LOBYTE(v2761) = ((v2739 & 0x20) != 0) << 7;
                      }
                      *(_BYTE *)(v2757 + v2758) = v2761;
                      *(_DWORD *)(a4 + 8) = v2678 + 11;
                      v2762 = v2678 + 18;
                      if (v2678 + 11 >= 0)
                        v2762 = v2678 + 11;
                      v2763 = v2762 & 0xFFFFFFF8;
                      v2764 = *(_QWORD *)a4;
                      v2765 = (uint64_t)v2762 >> 3;
                      v2766 = v2678 + 11 - v2763;
                      if (v2766)
                      {
                        v2767 = 7 - v2766;
                        *(_BYTE *)(v2764 + v2765) &= ~(1 << v2767);
                        v2764 = *(_QWORD *)a4;
                        v2768 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2765) | (((v2739 >> 4) & 1) << v2767);
                      }
                      else
                      {
                        LOBYTE(v2768) = ((v2739 & 0x10) != 0) << 7;
                      }
                      *(_BYTE *)(v2764 + v2765) = v2768;
                      *(_DWORD *)(a4 + 8) = v2678 + 12;
                      v2769 = v2678 + 19;
                      if (v2678 + 12 >= 0)
                        v2769 = v2678 + 12;
                      v2770 = v2769 & 0xFFFFFFF8;
                      v2771 = *(_QWORD *)a4;
                      v2772 = (uint64_t)v2769 >> 3;
                      v2773 = v2678 + 12 - v2770;
                      if (v2773)
                      {
                        v2774 = 7 - v2773;
                        *(_BYTE *)(v2771 + v2772) &= ~(1 << v2774);
                        v2771 = *(_QWORD *)a4;
                        v2775 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2772) | (((v2739 >> 3) & 1) << v2774);
                      }
                      else
                      {
                        LOBYTE(v2775) = ((v2739 & 8) != 0) << 7;
                      }
                      *(_BYTE *)(v2771 + v2772) = v2775;
                      *(_DWORD *)(a4 + 8) = v2678 + 13;
                      v2776 = v2678 + 20;
                      if (v2678 + 13 >= 0)
                        v2776 = v2678 + 13;
                      v2777 = v2776 & 0xFFFFFFF8;
                      v2778 = *(_QWORD *)a4;
                      v2779 = (uint64_t)v2776 >> 3;
                      v2780 = v2678 + 13 - v2777;
                      if (v2780)
                      {
                        v2781 = 7 - v2780;
                        *(_BYTE *)(v2778 + v2779) &= ~(1 << v2781);
                        v2778 = *(_QWORD *)a4;
                        v2782 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2779) | (((v2739 >> 2) & 1) << v2781);
                      }
                      else
                      {
                        LOBYTE(v2782) = ((v2739 & 4) != 0) << 7;
                      }
                      *(_BYTE *)(v2778 + v2779) = v2782;
                      *(_DWORD *)(a4 + 8) = v2678 + 14;
                      v2783 = v2678 + 21;
                      if (v2678 + 14 >= 0)
                        v2783 = v2678 + 14;
                      v2784 = v2783 & 0xFFFFFFF8;
                      v2785 = *(_QWORD *)a4;
                      v2786 = (uint64_t)v2783 >> 3;
                      v2787 = v2678 + 14 - v2784;
                      if (v2787)
                      {
                        v2788 = 7 - v2787;
                        *(_BYTE *)(v2785 + v2786) &= ~(1 << v2788);
                        v2785 = *(_QWORD *)a4;
                        v2789 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2786) | (((v2739 >> 1) & 1) << v2788);
                      }
                      else
                      {
                        LOBYTE(v2789) = ((v2739 & 2) != 0) << 7;
                      }
                      *(_BYTE *)(v2785 + v2786) = v2789;
                      v2790 = v2678 + 15;
                      *(_DWORD *)(a4 + 8) = v2678 + 15;
                      v2791 = v2739 & 1;
                      v2792 = v2678 + 22;
                      if (v2678 + 15 >= 0)
                        v2792 = v2678 + 15;
                      v2793 = v2792 & 0xFFFFFFF8;
                      v2681 = *(_QWORD *)a4;
                      v2794 = (uint64_t)v2792 >> 3;
                      result = v2790 - v2793;
                      if ((_DWORD)result)
                      {
                        v2679 = 7 - result;
                        *(_BYTE *)(v2681 + v2794) &= ~(1 << v2679);
                        v2680 = v2791 << v2679;
                        v2681 = *(_QWORD *)a4;
                        result = *(unsigned __int8 *)(*(_QWORD *)a4 + v2794);
                        v2682 = result | v2680;
                      }
                      else
                      {
                        v2682 = (_BYTE)v2791 << 7;
                      }
                      *(_BYTE *)(v2681 + v2794) = v2682;
                      v1545 = v2678 + 16;
                      v2678 += 16;
                      *v15 = v2790 + 1;
                      ++v2675;
                      v2676 -= 16;
                      v2677 += 2;
                    }
                    while (v2675 < *(int *)(v1465 + 860));
                  }
                }
              }
            }
LABEL_1613:
            v1698 = *(_DWORD *)(v1465 + 864);
            v1699 = v1545 + 7;
            if (v1545 >= 0)
              v1699 = v1545;
            v1700 = v1699 & 0xFFFFFFF8;
            v1701 = *(_QWORD *)a4;
            v1702 = (uint64_t)v1699 >> 3;
            v1703 = v1545 - v1700;
            if (v1703)
            {
              v1704 = 7 - v1703;
              *(_BYTE *)(v1701 + v1702) &= ~(1 << v1704);
              v1701 = *(_QWORD *)a4;
              v1705 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1702) | (((v1698 >> 1) & 1) << v1704);
            }
            else
            {
              LOBYTE(v1705) = ((*(_DWORD *)(v1465 + 864) & 2) != 0) << 7;
            }
            *(_BYTE *)(v1701 + v1702) = v1705;
            *(_DWORD *)(a4 + 8) = v1545 + 1;
            v1706 = v1698 & 1;
            v1707 = v1545 + 8;
            if (v1545 >= -1)
              v1707 = v1545 + 1;
            v1708 = v1707 & 0xFFFFFFF8;
            v1709 = *(_QWORD *)a4;
            v1710 = (uint64_t)v1707 >> 3;
            v1711 = v1545 + 1 - v1708;
            if (v1711)
            {
              v1712 = 7 - v1711;
              *(_BYTE *)(v1709 + v1710) &= ~(1 << v1712);
              v1709 = *(_QWORD *)a4;
              v1706 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1710) | (v1706 << v1712);
            }
            else
            {
              LOBYTE(v1706) = (_BYTE)v1706 << 7;
            }
            *(_BYTE *)(v1709 + v1710) = v1706;
            *(_DWORD *)(a4 + 8) = v1545 + 2;
            v1713 = *(_DWORD *)(v1465 + 868);
            v1714 = v1545 + 9;
            if (v1545 >= -2)
              v1714 = v1545 + 2;
            v1715 = v1714 & 0xFFFFFFF8;
            v1716 = *(_QWORD *)a4;
            v1717 = (uint64_t)v1714 >> 3;
            v1718 = v1545 + 2 - v1715;
            if (v1718)
            {
              v1719 = 7 - v1718;
              *(_BYTE *)(v1716 + v1717) &= ~(1 << v1719);
              v1716 = *(_QWORD *)a4;
              v1720 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1717) | (((v1713 >> 1) & 1) << v1719);
            }
            else
            {
              LOBYTE(v1720) = ((*(_DWORD *)(v1465 + 868) & 2) != 0) << 7;
            }
            *(_BYTE *)(v1716 + v1717) = v1720;
            *(_DWORD *)(a4 + 8) = v1545 + 3;
            v1721 = v1713 & 1;
            v1722 = v1545 + 10;
            if (v1545 >= -3)
              v1722 = v1545 + 3;
            v1723 = v1722 & 0xFFFFFFF8;
            v1724 = *(_QWORD *)a4;
            v1725 = (uint64_t)v1722 >> 3;
            v1726 = v1545 + 3 - v1723;
            if (v1726)
            {
              v1727 = 7 - v1726;
              *(_BYTE *)(v1724 + v1725) &= ~(1 << v1727);
              v1724 = *(_QWORD *)a4;
              v1721 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1725) | (v1721 << v1727);
            }
            else
            {
              LOBYTE(v1721) = (_BYTE)v1721 << 7;
            }
            *(_BYTE *)(v1724 + v1725) = v1721;
            v1728 = v1545 + 4;
            *v15 = v1545 + 4;
            v1729 = *(_DWORD *)(v1465 + 868) + *(_DWORD *)(v1465 + 868) * *(_DWORD *)(v1465 + 868);
            v1730 = *(_DWORD *)(v1465 + 692);
            v1731 = v1730 > 0;
            if (v1730)
            {
              v1732 = (2 * v1729);
              if ((int)v1732 >= 1)
              {
                v1733 = 3 - v1545;
                v1734 = (unsigned int *)(v1465 + 872);
                do
                {
                  while (1)
                  {
                    v1735 = v1728;
                    v1737 = *v1734++;
                    v1736 = v1737;
                    v1738 = ((v1737 + 128) >> 7) & 1;
                    v1739 = v1735 + 7;
                    if (v1735 >= 0)
                      v1739 = v1735;
                    v1740 = v1739 & 0xFFFFFFF8;
                    v1741 = *(_QWORD *)a4;
                    v1742 = (uint64_t)v1739 >> 3;
                    if (v1740 == v1735)
                    {
                      LOBYTE(v1738) = (_BYTE)v1738 << 7;
                    }
                    else
                    {
                      v1743 = v1733 + v1740;
                      *(_BYTE *)(v1741 + v1742) &= ~(1 << v1743);
                      v1741 = *(_QWORD *)a4;
                      v1738 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1742) | (v1738 << v1743);
                    }
                    *(_BYTE *)(v1741 + v1742) = v1738;
                    *(_DWORD *)(a4 + 8) = v1735 + 1;
                    v1744 = v1735 + 8;
                    if (v1735 + 1 >= 0)
                      v1744 = v1735 + 1;
                    v1745 = v1744 & 0xFFFFFFF8;
                    v1746 = *(_QWORD *)a4;
                    v1747 = (uint64_t)v1744 >> 3;
                    v1748 = v1735 + 1 - v1745;
                    if (v1748)
                    {
                      v1749 = 7 - v1748;
                      *(_BYTE *)(v1746 + v1747) &= ~(1 << v1749);
                      v1746 = *(_QWORD *)a4;
                      v1750 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1747) | (((v1736 >> 6) & 1) << v1749);
                    }
                    else
                    {
                      LOBYTE(v1750) = ((v1736 & 0x40) != 0) << 7;
                    }
                    *(_BYTE *)(v1746 + v1747) = v1750;
                    *(_DWORD *)(a4 + 8) = v1735 + 2;
                    v1751 = v1735 + 9;
                    if (v1735 + 2 >= 0)
                      v1751 = v1735 + 2;
                    v1752 = v1751 & 0xFFFFFFF8;
                    v1753 = *(_QWORD *)a4;
                    v1754 = (uint64_t)v1751 >> 3;
                    v1755 = v1735 + 2 - v1752;
                    if (v1755)
                    {
                      v1756 = 7 - v1755;
                      *(_BYTE *)(v1753 + v1754) &= ~(1 << v1756);
                      v1753 = *(_QWORD *)a4;
                      v1757 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1754) | (((v1736 >> 5) & 1) << v1756);
                    }
                    else
                    {
                      LOBYTE(v1757) = ((v1736 & 0x20) != 0) << 7;
                    }
                    *(_BYTE *)(v1753 + v1754) = v1757;
                    *(_DWORD *)(a4 + 8) = v1735 + 3;
                    v1758 = v1735 + 10;
                    if (v1735 + 3 >= 0)
                      v1758 = v1735 + 3;
                    v1759 = v1758 & 0xFFFFFFF8;
                    v1760 = *(_QWORD *)a4;
                    v1761 = (uint64_t)v1758 >> 3;
                    v1762 = v1735 + 3 - v1759;
                    if (v1762)
                    {
                      v1763 = 7 - v1762;
                      *(_BYTE *)(v1760 + v1761) &= ~(1 << v1763);
                      v1760 = *(_QWORD *)a4;
                      v1764 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1761) | (((v1736 >> 4) & 1) << v1763);
                    }
                    else
                    {
                      LOBYTE(v1764) = ((v1736 & 0x10) != 0) << 7;
                    }
                    *(_BYTE *)(v1760 + v1761) = v1764;
                    *(_DWORD *)(a4 + 8) = v1735 + 4;
                    v1765 = v1735 + 11;
                    if (v1735 + 4 >= 0)
                      v1765 = v1735 + 4;
                    v1766 = v1765 & 0xFFFFFFF8;
                    v1767 = *(_QWORD *)a4;
                    v1768 = (uint64_t)v1765 >> 3;
                    v1769 = v1735 + 4 - v1766;
                    if (v1769)
                    {
                      v1770 = 7 - v1769;
                      *(_BYTE *)(v1767 + v1768) &= ~(1 << v1770);
                      v1767 = *(_QWORD *)a4;
                      v1771 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1768) | (((v1736 >> 3) & 1) << v1770);
                    }
                    else
                    {
                      LOBYTE(v1771) = ((v1736 & 8) != 0) << 7;
                    }
                    *(_BYTE *)(v1767 + v1768) = v1771;
                    *(_DWORD *)(a4 + 8) = v1735 + 5;
                    v1772 = v1735 + 12;
                    if (v1735 + 5 >= 0)
                      v1772 = v1735 + 5;
                    v1773 = v1772 & 0xFFFFFFF8;
                    v1774 = *(_QWORD *)a4;
                    v1775 = (uint64_t)v1772 >> 3;
                    v1776 = v1735 + 5 - v1773;
                    if (v1776)
                    {
                      v1777 = 7 - v1776;
                      *(_BYTE *)(v1774 + v1775) &= ~(1 << v1777);
                      v1774 = *(_QWORD *)a4;
                      v1778 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1775) | (((v1736 >> 2) & 1) << v1777);
                    }
                    else
                    {
                      LOBYTE(v1778) = ((v1736 & 4) != 0) << 7;
                    }
                    *(_BYTE *)(v1774 + v1775) = v1778;
                    *(_DWORD *)(a4 + 8) = v1735 + 6;
                    v1779 = v1735 + 13;
                    if (v1735 + 6 >= 0)
                      v1779 = v1735 + 6;
                    v1780 = v1779 & 0xFFFFFFF8;
                    v1781 = *(_QWORD *)a4;
                    v1782 = (uint64_t)v1779 >> 3;
                    v1783 = v1735 + 6 - v1780;
                    if (v1783)
                    {
                      v1784 = 7 - v1783;
                      *(_BYTE *)(v1781 + v1782) &= ~(1 << v1784);
                      v1781 = *(_QWORD *)a4;
                      v1785 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1782) | (((v1736 >> 1) & 1) << v1784);
                    }
                    else
                    {
                      LOBYTE(v1785) = ((v1736 & 2) != 0) << 7;
                    }
                    *(_BYTE *)(v1781 + v1782) = v1785;
                    *(_DWORD *)(a4 + 8) = v1735 + 7;
                    v1786 = v1736 & 1;
                    v1787 = v1735 + 14;
                    if (v1735 + 7 >= 0)
                      v1787 = v1735 + 7;
                    v1788 = v1787 & 0xFFFFFFF8;
                    v1789 = *(_QWORD *)a4;
                    result = (uint64_t)v1787 >> 3;
                    v1790 = v1735 + 7 - v1788;
                    if (v1790)
                      break;
                    *(_BYTE *)(v1789 + result) = (_BYTE)v1786 << 7;
                    v1728 = v1735 + 8;
                    *v15 = v1735 + 8;
                    v1733 -= 8;
                    if (!--v1732)
                      goto LABEL_1676;
                  }
                  v1791 = 7 - v1790;
                  *(_BYTE *)(v1789 + result) &= ~(1 << v1791);
                  *(_BYTE *)(*(_QWORD *)a4 + result) |= v1786 << v1791;
                  v1728 = v1735 + 8;
                  *v15 = v1735 + 8;
                  v1733 -= 8;
                  --v1732;
                }
                while (v1732);
LABEL_1676:
                v1728 = v1735 + 8;
              }
            }
            v1792 = v1731 | (2 * v1729);
            if (*(_DWORD *)(v1465 + 776))
            {
              if ((int)v1792 < 1)
                goto LABEL_1724;
LABEL_1682:
              v1793 = 7 - v1728;
              v1794 = (unsigned int *)(v1465 + 968);
              v1795 = v1792;
              do
              {
                while (1)
                {
                  v1796 = v1728;
                  v1798 = *v1794++;
                  v1797 = v1798;
                  v1799 = ((v1798 + 128) >> 7) & 1;
                  v1800 = v1796 + 7;
                  if (v1796 >= 0)
                    v1800 = v1796;
                  v1801 = v1800 & 0xFFFFFFF8;
                  v1802 = *(_QWORD *)a4;
                  v1803 = (uint64_t)v1800 >> 3;
                  if (v1801 == v1796)
                  {
                    LOBYTE(v1799) = (_BYTE)v1799 << 7;
                  }
                  else
                  {
                    v1804 = v1793 + v1801;
                    *(_BYTE *)(v1802 + v1803) &= ~(1 << v1804);
                    v1802 = *(_QWORD *)a4;
                    v1799 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1803) | (v1799 << v1804);
                  }
                  *(_BYTE *)(v1802 + v1803) = v1799;
                  *(_DWORD *)(a4 + 8) = v1796 + 1;
                  v1805 = v1796 + 8;
                  if (v1796 + 1 >= 0)
                    v1805 = v1796 + 1;
                  v1806 = v1805 & 0xFFFFFFF8;
                  v1807 = *(_QWORD *)a4;
                  v1808 = (uint64_t)v1805 >> 3;
                  v1809 = v1796 + 1 - v1806;
                  if (v1809)
                  {
                    v1810 = 7 - v1809;
                    *(_BYTE *)(v1807 + v1808) &= ~(1 << v1810);
                    v1807 = *(_QWORD *)a4;
                    v1811 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1808) | (((v1797 >> 6) & 1) << v1810);
                  }
                  else
                  {
                    LOBYTE(v1811) = ((v1797 & 0x40) != 0) << 7;
                  }
                  *(_BYTE *)(v1807 + v1808) = v1811;
                  *(_DWORD *)(a4 + 8) = v1796 + 2;
                  v1812 = v1796 + 9;
                  if (v1796 + 2 >= 0)
                    v1812 = v1796 + 2;
                  v1813 = v1812 & 0xFFFFFFF8;
                  v1814 = *(_QWORD *)a4;
                  v1815 = (uint64_t)v1812 >> 3;
                  v1816 = v1796 + 2 - v1813;
                  if (v1816)
                  {
                    v1817 = 7 - v1816;
                    *(_BYTE *)(v1814 + v1815) &= ~(1 << v1817);
                    v1814 = *(_QWORD *)a4;
                    v1818 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1815) | (((v1797 >> 5) & 1) << v1817);
                  }
                  else
                  {
                    LOBYTE(v1818) = ((v1797 & 0x20) != 0) << 7;
                  }
                  *(_BYTE *)(v1814 + v1815) = v1818;
                  *(_DWORD *)(a4 + 8) = v1796 + 3;
                  v1819 = v1796 + 10;
                  if (v1796 + 3 >= 0)
                    v1819 = v1796 + 3;
                  v1820 = v1819 & 0xFFFFFFF8;
                  v1821 = *(_QWORD *)a4;
                  v1822 = (uint64_t)v1819 >> 3;
                  v1823 = v1796 + 3 - v1820;
                  if (v1823)
                  {
                    v1824 = 7 - v1823;
                    *(_BYTE *)(v1821 + v1822) &= ~(1 << v1824);
                    v1821 = *(_QWORD *)a4;
                    v1825 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1822) | (((v1797 >> 4) & 1) << v1824);
                  }
                  else
                  {
                    LOBYTE(v1825) = ((v1797 & 0x10) != 0) << 7;
                  }
                  *(_BYTE *)(v1821 + v1822) = v1825;
                  *(_DWORD *)(a4 + 8) = v1796 + 4;
                  v1826 = v1796 + 11;
                  if (v1796 + 4 >= 0)
                    v1826 = v1796 + 4;
                  v1827 = v1826 & 0xFFFFFFF8;
                  v1828 = *(_QWORD *)a4;
                  v1829 = (uint64_t)v1826 >> 3;
                  v1830 = v1796 + 4 - v1827;
                  if (v1830)
                  {
                    v1831 = 7 - v1830;
                    *(_BYTE *)(v1828 + v1829) &= ~(1 << v1831);
                    v1828 = *(_QWORD *)a4;
                    v1832 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1829) | (((v1797 >> 3) & 1) << v1831);
                  }
                  else
                  {
                    LOBYTE(v1832) = ((v1797 & 8) != 0) << 7;
                  }
                  *(_BYTE *)(v1828 + v1829) = v1832;
                  *(_DWORD *)(a4 + 8) = v1796 + 5;
                  v1833 = v1796 + 12;
                  if (v1796 + 5 >= 0)
                    v1833 = v1796 + 5;
                  v1834 = v1833 & 0xFFFFFFF8;
                  v1835 = *(_QWORD *)a4;
                  v1836 = (uint64_t)v1833 >> 3;
                  v1837 = v1796 + 5 - v1834;
                  if (v1837)
                  {
                    v1838 = 7 - v1837;
                    *(_BYTE *)(v1835 + v1836) &= ~(1 << v1838);
                    v1835 = *(_QWORD *)a4;
                    v1839 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1836) | (((v1797 >> 2) & 1) << v1838);
                  }
                  else
                  {
                    LOBYTE(v1839) = ((v1797 & 4) != 0) << 7;
                  }
                  *(_BYTE *)(v1835 + v1836) = v1839;
                  *(_DWORD *)(a4 + 8) = v1796 + 6;
                  v1840 = v1796 + 13;
                  if (v1796 + 6 >= 0)
                    v1840 = v1796 + 6;
                  v1841 = v1840 & 0xFFFFFFF8;
                  v1842 = *(_QWORD *)a4;
                  v1843 = (uint64_t)v1840 >> 3;
                  v1844 = v1796 + 6 - v1841;
                  if (v1844)
                  {
                    v1845 = 7 - v1844;
                    *(_BYTE *)(v1842 + v1843) &= ~(1 << v1845);
                    v1842 = *(_QWORD *)a4;
                    v1846 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1843) | (((v1797 >> 1) & 1) << v1845);
                  }
                  else
                  {
                    LOBYTE(v1846) = ((v1797 & 2) != 0) << 7;
                  }
                  *(_BYTE *)(v1842 + v1843) = v1846;
                  *(_DWORD *)(a4 + 8) = v1796 + 7;
                  v1847 = v1797 & 1;
                  v1848 = v1796 + 14;
                  if (v1796 + 7 >= 0)
                    v1848 = v1796 + 7;
                  v1849 = v1848 & 0xFFFFFFF8;
                  result = *(_QWORD *)a4;
                  v1850 = (uint64_t)v1848 >> 3;
                  v1851 = v1796 + 7 - v1849;
                  if (v1851)
                    break;
                  *(_BYTE *)(result + v1850) = (_BYTE)v1847 << 7;
                  v1728 = v1796 + 8;
                  *v15 = v1796 + 8;
                  v1793 -= 8;
                  if (!--v1795)
                    goto LABEL_1723;
                }
                v1852 = 7 - v1851;
                *(_BYTE *)(result + v1850) &= ~(1 << v1852);
                result = *(_QWORD *)a4;
                *(_BYTE *)(*(_QWORD *)a4 + v1850) |= v1847 << v1852;
                v1728 = v1796 + 8;
                *v15 = v1796 + 8;
                v1793 -= 8;
                --v1795;
              }
              while (v1795);
LABEL_1723:
              v1728 = v1796 + 8;
            }
            else if (*(_DWORD *)(v1465 + 1208) && (int)v1792 > 0)
            {
              goto LABEL_1682;
            }
LABEL_1724:
            if (*(_DWORD *)(v1465 + 860))
            {
              if ((int)v1792 < 1)
                goto LABEL_1771;
LABEL_1729:
              v1853 = 7 - v1728;
              v1854 = (unsigned int *)(v1465 + 1068);
              do
              {
                while (1)
                {
                  v1855 = v1728;
                  v1857 = *v1854++;
                  v1856 = v1857;
                  v1858 = ((v1857 + 128) >> 7) & 1;
                  v1859 = v1855 + 7;
                  if (v1855 >= 0)
                    v1859 = v1855;
                  v1860 = v1859 & 0xFFFFFFF8;
                  v1861 = *(_QWORD *)a4;
                  v1862 = (uint64_t)v1859 >> 3;
                  if (v1860 == v1855)
                  {
                    LOBYTE(v1858) = (_BYTE)v1858 << 7;
                  }
                  else
                  {
                    v1863 = v1853 + v1860;
                    *(_BYTE *)(v1861 + v1862) &= ~(1 << v1863);
                    v1861 = *(_QWORD *)a4;
                    v1858 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1862) | (v1858 << v1863);
                  }
                  *(_BYTE *)(v1861 + v1862) = v1858;
                  *(_DWORD *)(a4 + 8) = v1855 + 1;
                  v1864 = v1855 + 8;
                  if (v1855 + 1 >= 0)
                    v1864 = v1855 + 1;
                  v1865 = v1864 & 0xFFFFFFF8;
                  v1866 = *(_QWORD *)a4;
                  v1867 = (uint64_t)v1864 >> 3;
                  v1868 = v1855 + 1 - v1865;
                  if (v1868)
                  {
                    v1869 = 7 - v1868;
                    *(_BYTE *)(v1866 + v1867) &= ~(1 << v1869);
                    v1866 = *(_QWORD *)a4;
                    v1870 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1867) | (((v1856 >> 6) & 1) << v1869);
                  }
                  else
                  {
                    LOBYTE(v1870) = ((v1856 & 0x40) != 0) << 7;
                  }
                  *(_BYTE *)(v1866 + v1867) = v1870;
                  *(_DWORD *)(a4 + 8) = v1855 + 2;
                  v1871 = v1855 + 9;
                  if (v1855 + 2 >= 0)
                    v1871 = v1855 + 2;
                  v1872 = v1871 & 0xFFFFFFF8;
                  v1873 = *(_QWORD *)a4;
                  v1874 = (uint64_t)v1871 >> 3;
                  v1875 = v1855 + 2 - v1872;
                  if (v1875)
                  {
                    v1876 = 7 - v1875;
                    *(_BYTE *)(v1873 + v1874) &= ~(1 << v1876);
                    v1873 = *(_QWORD *)a4;
                    v1877 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1874) | (((v1856 >> 5) & 1) << v1876);
                  }
                  else
                  {
                    LOBYTE(v1877) = ((v1856 & 0x20) != 0) << 7;
                  }
                  *(_BYTE *)(v1873 + v1874) = v1877;
                  *(_DWORD *)(a4 + 8) = v1855 + 3;
                  v1878 = v1855 + 10;
                  if (v1855 + 3 >= 0)
                    v1878 = v1855 + 3;
                  v1879 = v1878 & 0xFFFFFFF8;
                  v1880 = *(_QWORD *)a4;
                  v1881 = (uint64_t)v1878 >> 3;
                  v1882 = v1855 + 3 - v1879;
                  if (v1882)
                  {
                    v1883 = 7 - v1882;
                    *(_BYTE *)(v1880 + v1881) &= ~(1 << v1883);
                    v1880 = *(_QWORD *)a4;
                    v1884 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1881) | (((v1856 >> 4) & 1) << v1883);
                  }
                  else
                  {
                    LOBYTE(v1884) = ((v1856 & 0x10) != 0) << 7;
                  }
                  *(_BYTE *)(v1880 + v1881) = v1884;
                  *(_DWORD *)(a4 + 8) = v1855 + 4;
                  v1885 = v1855 + 11;
                  if (v1855 + 4 >= 0)
                    v1885 = v1855 + 4;
                  v1886 = v1885 & 0xFFFFFFF8;
                  v1887 = *(_QWORD *)a4;
                  v1888 = (uint64_t)v1885 >> 3;
                  v1889 = v1855 + 4 - v1886;
                  if (v1889)
                  {
                    v1890 = 7 - v1889;
                    *(_BYTE *)(v1887 + v1888) &= ~(1 << v1890);
                    v1887 = *(_QWORD *)a4;
                    v1891 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1888) | (((v1856 >> 3) & 1) << v1890);
                  }
                  else
                  {
                    LOBYTE(v1891) = ((v1856 & 8) != 0) << 7;
                  }
                  *(_BYTE *)(v1887 + v1888) = v1891;
                  *(_DWORD *)(a4 + 8) = v1855 + 5;
                  v1892 = v1855 + 12;
                  if (v1855 + 5 >= 0)
                    v1892 = v1855 + 5;
                  v1893 = v1892 & 0xFFFFFFF8;
                  v1894 = *(_QWORD *)a4;
                  v1895 = (uint64_t)v1892 >> 3;
                  v1896 = v1855 + 5 - v1893;
                  if (v1896)
                  {
                    v1897 = 7 - v1896;
                    *(_BYTE *)(v1894 + v1895) &= ~(1 << v1897);
                    v1894 = *(_QWORD *)a4;
                    v1898 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1895) | (((v1856 >> 2) & 1) << v1897);
                  }
                  else
                  {
                    LOBYTE(v1898) = ((v1856 & 4) != 0) << 7;
                  }
                  *(_BYTE *)(v1894 + v1895) = v1898;
                  *(_DWORD *)(a4 + 8) = v1855 + 6;
                  v1899 = v1855 + 13;
                  if (v1855 + 6 >= 0)
                    v1899 = v1855 + 6;
                  v1900 = v1899 & 0xFFFFFFF8;
                  v1901 = *(_QWORD *)a4;
                  v1902 = (uint64_t)v1899 >> 3;
                  v1903 = v1855 + 6 - v1900;
                  if (v1903)
                  {
                    v1904 = 7 - v1903;
                    *(_BYTE *)(v1901 + v1902) &= ~(1 << v1904);
                    v1901 = *(_QWORD *)a4;
                    v1905 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1902) | (((v1856 >> 1) & 1) << v1904);
                  }
                  else
                  {
                    LOBYTE(v1905) = ((v1856 & 2) != 0) << 7;
                  }
                  *(_BYTE *)(v1901 + v1902) = v1905;
                  *(_DWORD *)(a4 + 8) = v1855 + 7;
                  v1906 = v1856 & 1;
                  v1907 = v1855 + 14;
                  if (v1855 + 7 >= 0)
                    v1907 = v1855 + 7;
                  v1908 = v1907 & 0xFFFFFFF8;
                  v1909 = *(_QWORD *)a4;
                  v1910 = (uint64_t)v1907 >> 3;
                  result = v1855 + 7 - v1908;
                  if ((_DWORD)result)
                    break;
                  *(_BYTE *)(v1909 + v1910) = (_BYTE)v1906 << 7;
                  v1728 = v1855 + 8;
                  *v15 = v1855 + 8;
                  v1853 -= 8;
                  if (!--v1792)
                    goto LABEL_1770;
                }
                v1911 = 7 - result;
                *(_BYTE *)(v1909 + v1910) &= ~(1 << v1911);
                v1912 = v1906 << v1911;
                result = *(unsigned __int8 *)(*(_QWORD *)a4 + v1910);
                *(_BYTE *)(*(_QWORD *)a4 + v1910) = result | v1912;
                v1728 = v1855 + 8;
                *v15 = v1855 + 8;
                v1853 -= 8;
                --v1792;
              }
              while (v1792);
LABEL_1770:
              v1728 = v1855 + 8;
            }
            else if (*(_DWORD *)(v1465 + 1208) && (int)v1792 > 0)
            {
              goto LABEL_1729;
            }
LABEL_1771:
            v1913 = *(_DWORD *)(v1465 + 1168);
            v1914 = v1728 + 7;
            if (v1728 >= 0)
              v1914 = v1728;
            v1915 = v1914 & 0xFFFFFFF8;
            v1916 = *(_QWORD *)a4;
            v1917 = (uint64_t)v1914 >> 3;
            v1918 = v1728 - v1915;
            if (v1918)
            {
              v1919 = 7 - v1918;
              *(_BYTE *)(v1916 + v1917) &= ~(1 << v1919);
              v1916 = *(_QWORD *)a4;
              v1920 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1917) | ((((v1913 + 2) >> 1) & 1) << v1919);
            }
            else
            {
              LOBYTE(v1920) = (((v1913 + 2) & 2) != 0) << 7;
            }
            *(_BYTE *)(v1916 + v1917) = v1920;
            *(_DWORD *)(a4 + 8) = v1728 + 1;
            v1921 = v1913 & 1;
            v1922 = v1728 + 8;
            if (v1728 >= -1)
              v1922 = v1728 + 1;
            v1923 = v1922 & 0xFFFFFFF8;
            v1924 = *(_QWORD *)a4;
            v1925 = (uint64_t)v1922 >> 3;
            v1926 = v1728 + 1 - v1923;
            if (v1926)
            {
              v1927 = 7 - v1926;
              *(_BYTE *)(v1924 + v1925) &= ~(1 << v1927);
              v1924 = *(_QWORD *)a4;
              v1921 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1925) | (v1921 << v1927);
            }
            else
            {
              LOBYTE(v1921) = (_BYTE)v1921 << 7;
            }
            *(_BYTE *)(v1924 + v1925) = v1921;
            *(_DWORD *)(a4 + 8) = v1728 + 2;
            v1928 = *(_DWORD *)(v1465 + 1212);
            v1929 = v1728 + 9;
            if (v1728 >= -2)
              v1929 = v1728 + 2;
            v1930 = v1929 & 0xFFFFFFF8;
            v1931 = *(_QWORD *)a4;
            v1932 = (uint64_t)v1929 >> 3;
            v1933 = v1728 + 2 - v1930;
            if (v1933)
            {
              v1934 = 7 - v1933;
              *(_BYTE *)(v1931 + v1932) &= ~(1 << v1934);
              v1931 = *(_QWORD *)a4;
              v1935 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1932) | (((v1928 >> 1) & 1) << v1934);
            }
            else
            {
              LOBYTE(v1935) = ((*(_DWORD *)(v1465 + 1212) & 2) != 0) << 7;
            }
            *(_BYTE *)(v1931 + v1932) = v1935;
            *(_DWORD *)(a4 + 8) = v1728 + 3;
            v1936 = v1928 & 1;
            v1937 = v1728 + 10;
            if (v1728 >= -3)
              v1937 = v1728 + 3;
            v1938 = v1937 & 0xFFFFFFF8;
            v1939 = *(_QWORD *)a4;
            v1940 = (uint64_t)v1937 >> 3;
            v1941 = v1728 + 3 - v1938;
            if (v1941)
            {
              v1942 = 7 - v1941;
              *(_BYTE *)(v1939 + v1940) &= ~(1 << v1942);
              *(_BYTE *)(*(_QWORD *)a4 + v1940) |= v1936 << v1942;
              v1943 = v1728 + 4;
              *v15 = v1728 + 4;
              if (!*(_DWORD *)(v1465 + 776))
                goto LABEL_1918;
            }
            else
            {
              *(_BYTE *)(v1939 + v1940) = (_BYTE)v1936 << 7;
              v1943 = v1728 + 4;
              *v15 = v1728 + 4;
              if (!*(_DWORD *)(v1465 + 776))
                goto LABEL_1918;
            }
            v1944 = *(_DWORD *)(v1465 + 1172);
            v1945 = v1943 + 7;
            if (v1943 >= 0)
              v1945 = v1943;
            v1946 = v1945 & 0xFFFFFFF8;
            v1947 = *(_QWORD *)a4;
            v1948 = (uint64_t)v1945 >> 3;
            v1949 = v1943 - v1946;
            if (v1949)
            {
              v1950 = 7 - v1949;
              *(_BYTE *)(v1947 + v1948) &= ~(1 << v1950);
              *(_BYTE *)(*(_QWORD *)a4 + v1948) |= ((v1944 >> 7) & 1) << v1950;
            }
            else
            {
              *(_BYTE *)(v1947 + v1948) = ((*(_DWORD *)(v1465 + 1172) & 0x80) != 0) << 7;
            }
            *(_DWORD *)(a4 + 8) = v1728 + 5;
            v1951 = v1728 + 12;
            if (v1728 >= -5)
              v1951 = v1728 + 5;
            v1952 = v1951 & 0xFFFFFFF8;
            v1953 = *(_QWORD *)a4;
            v1954 = (uint64_t)v1951 >> 3;
            v1955 = v1728 + 5 - v1952;
            if (v1955)
            {
              v1956 = 7 - v1955;
              *(_BYTE *)(v1953 + v1954) &= ~(1 << v1956);
              v1953 = *(_QWORD *)a4;
              v1957 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1954) | (((v1944 >> 6) & 1) << v1956);
            }
            else
            {
              LOBYTE(v1957) = ((v1944 & 0x40) != 0) << 7;
            }
            *(_BYTE *)(v1953 + v1954) = v1957;
            *(_DWORD *)(a4 + 8) = v1728 + 6;
            v1958 = v1728 + 13;
            if (v1728 >= -6)
              v1958 = v1728 + 6;
            v1959 = v1958 & 0xFFFFFFF8;
            v1960 = *(_QWORD *)a4;
            v1961 = (uint64_t)v1958 >> 3;
            v1962 = v1728 + 6 - v1959;
            if (v1962)
            {
              v1963 = 7 - v1962;
              *(_BYTE *)(v1960 + v1961) &= ~(1 << v1963);
              v1960 = *(_QWORD *)a4;
              v1964 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1961) | (((v1944 >> 5) & 1) << v1963);
            }
            else
            {
              LOBYTE(v1964) = ((v1944 & 0x20) != 0) << 7;
            }
            *(_BYTE *)(v1960 + v1961) = v1964;
            *(_DWORD *)(a4 + 8) = v1728 + 7;
            v1965 = v1728 + 14;
            if (v1728 >= -7)
              v1965 = v1728 + 7;
            v1966 = v1965 & 0xFFFFFFF8;
            v1967 = *(_QWORD *)a4;
            v1968 = (uint64_t)v1965 >> 3;
            if (v1728 + 7 == v1966)
            {
              LOBYTE(v1969) = ((v1944 & 0x10) != 0) << 7;
            }
            else
            {
              *(_BYTE *)(v1967 + v1968) &= ~(1 << (v1966 - v1728));
              v1967 = *(_QWORD *)a4;
              v1969 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1968) | (((v1944 >> 4) & 1) << (v1966 - v1728));
            }
            *(_BYTE *)(v1967 + v1968) = v1969;
            *(_DWORD *)(a4 + 8) = v1728 + 8;
            v1970 = v1728 + 15;
            if (v1728 >= -8)
              v1970 = v1728 + 8;
            v1971 = v1970 & 0xFFFFFFF8;
            v1972 = *(_QWORD *)a4;
            v1973 = (uint64_t)v1970 >> 3;
            v1974 = v1728 + 8 - v1971;
            if (v1974)
            {
              v1975 = 7 - v1974;
              *(_BYTE *)(v1972 + v1973) &= ~(1 << v1975);
              v1972 = *(_QWORD *)a4;
              v1976 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1973) | (((v1944 >> 3) & 1) << v1975);
            }
            else
            {
              LOBYTE(v1976) = ((v1944 & 8) != 0) << 7;
            }
            *(_BYTE *)(v1972 + v1973) = v1976;
            *(_DWORD *)(a4 + 8) = v1728 + 9;
            v1977 = v1728 + 16;
            if (v1728 >= -9)
              v1977 = v1728 + 9;
            v1978 = v1977 & 0xFFFFFFF8;
            v1979 = *(_QWORD *)a4;
            v1980 = (uint64_t)v1977 >> 3;
            v1981 = v1728 + 9 - v1978;
            if (v1981)
            {
              v1982 = 7 - v1981;
              *(_BYTE *)(v1979 + v1980) &= ~(1 << v1982);
              v1979 = *(_QWORD *)a4;
              v1983 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1980) | (((v1944 >> 2) & 1) << v1982);
            }
            else
            {
              LOBYTE(v1983) = ((v1944 & 4) != 0) << 7;
            }
            *(_BYTE *)(v1979 + v1980) = v1983;
            *(_DWORD *)(a4 + 8) = v1728 + 10;
            v1984 = v1728 + 17;
            if (v1728 >= -10)
              v1984 = v1728 + 10;
            v1985 = v1984 & 0xFFFFFFF8;
            v1986 = *(_QWORD *)a4;
            v1987 = (uint64_t)v1984 >> 3;
            v1988 = v1728 + 10 - v1985;
            if (v1988)
            {
              v1989 = 7 - v1988;
              *(_BYTE *)(v1986 + v1987) &= ~(1 << v1989);
              v1986 = *(_QWORD *)a4;
              v1990 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1987) | (((v1944 >> 1) & 1) << v1989);
            }
            else
            {
              LOBYTE(v1990) = ((v1944 & 2) != 0) << 7;
            }
            *(_BYTE *)(v1986 + v1987) = v1990;
            *(_DWORD *)(a4 + 8) = v1728 + 11;
            v1991 = v1944 & 1;
            v1992 = v1728 + 18;
            if (v1728 >= -11)
              v1992 = v1728 + 11;
            v1993 = v1992 & 0xFFFFFFF8;
            v1994 = *(_QWORD *)a4;
            v1995 = (uint64_t)v1992 >> 3;
            v1996 = v1728 + 11 - v1993;
            if (v1996)
            {
              v1997 = 7 - v1996;
              *(_BYTE *)(v1994 + v1995) &= ~(1 << v1997);
              v1994 = *(_QWORD *)a4;
              v1991 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1995) | (v1991 << v1997);
            }
            else
            {
              LOBYTE(v1991) = (_BYTE)v1991 << 7;
            }
            *(_BYTE *)(v1994 + v1995) = v1991;
            *(_DWORD *)(a4 + 8) = v1728 + 12;
            v1998 = *(_DWORD *)(v1465 + 1176);
            v1999 = v1728 + 19;
            if (v1728 >= -12)
              v1999 = v1728 + 12;
            v2000 = v1999 & 0xFFFFFFF8;
            v2001 = *(_QWORD *)a4;
            v2002 = (uint64_t)v1999 >> 3;
            v2003 = v1728 + 12 - v2000;
            if (v2003)
            {
              v2004 = 7 - v2003;
              *(_BYTE *)(v2001 + v2002) &= ~(1 << v2004);
              v2001 = *(_QWORD *)a4;
              v2005 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2002) | (((v1998 >> 7) & 1) << v2004);
            }
            else
            {
              LOBYTE(v2005) = ((*(_DWORD *)(v1465 + 1176) & 0x80) != 0) << 7;
            }
            *(_BYTE *)(v2001 + v2002) = v2005;
            *(_DWORD *)(a4 + 8) = v1728 + 13;
            v2006 = v1728 + 20;
            if (v1728 >= -13)
              v2006 = v1728 + 13;
            v2007 = v2006 & 0xFFFFFFF8;
            v2008 = *(_QWORD *)a4;
            v2009 = (uint64_t)v2006 >> 3;
            v2010 = v1728 + 13 - v2007;
            if (v2010)
            {
              v2011 = 7 - v2010;
              *(_BYTE *)(v2008 + v2009) &= ~(1 << v2011);
              v2008 = *(_QWORD *)a4;
              v2012 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2009) | (((v1998 >> 6) & 1) << v2011);
            }
            else
            {
              LOBYTE(v2012) = ((v1998 & 0x40) != 0) << 7;
            }
            *(_BYTE *)(v2008 + v2009) = v2012;
            *(_DWORD *)(a4 + 8) = v1728 + 14;
            v2013 = v1728 + 21;
            if (v1728 >= -14)
              v2013 = v1728 + 14;
            v2014 = v2013 & 0xFFFFFFF8;
            v2015 = *(_QWORD *)a4;
            v2016 = (uint64_t)v2013 >> 3;
            v2017 = v1728 + 14 - v2014;
            if (v2017)
            {
              v2018 = 7 - v2017;
              *(_BYTE *)(v2015 + v2016) &= ~(1 << v2018);
              v2015 = *(_QWORD *)a4;
              v2019 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2016) | (((v1998 >> 5) & 1) << v2018);
            }
            else
            {
              LOBYTE(v2019) = ((v1998 & 0x20) != 0) << 7;
            }
            *(_BYTE *)(v2015 + v2016) = v2019;
            *(_DWORD *)(a4 + 8) = v1728 + 15;
            v2020 = v1728 + 22;
            if (v1728 >= -15)
              v2020 = v1728 + 15;
            v2021 = v2020 & 0xFFFFFFF8;
            v2022 = *(_QWORD *)a4;
            v2023 = (uint64_t)v2020 >> 3;
            v2024 = v1728 + 15 - v2021;
            if (v2024)
            {
              v2025 = 7 - v2024;
              *(_BYTE *)(v2022 + v2023) &= ~(1 << v2025);
              v2022 = *(_QWORD *)a4;
              v2026 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2023) | (((v1998 >> 4) & 1) << v2025);
            }
            else
            {
              LOBYTE(v2026) = ((v1998 & 0x10) != 0) << 7;
            }
            *(_BYTE *)(v2022 + v2023) = v2026;
            *(_DWORD *)(a4 + 8) = v1728 + 16;
            v2027 = v1728 + 23;
            if (v1728 >= -16)
              v2027 = v1728 + 16;
            v2028 = v2027 & 0xFFFFFFF8;
            v2029 = *(_QWORD *)a4;
            v2030 = (uint64_t)v2027 >> 3;
            v2031 = v1728 + 16 - v2028;
            if (v2031)
            {
              v2032 = 7 - v2031;
              *(_BYTE *)(v2029 + v2030) &= ~(1 << v2032);
              v2029 = *(_QWORD *)a4;
              v2033 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2030) | (((v1998 >> 3) & 1) << v2032);
            }
            else
            {
              LOBYTE(v2033) = ((v1998 & 8) != 0) << 7;
            }
            *(_BYTE *)(v2029 + v2030) = v2033;
            *(_DWORD *)(a4 + 8) = v1728 + 17;
            v2034 = v1728 + 24;
            if (v1728 >= -17)
              v2034 = v1728 + 17;
            v2035 = v2034 & 0xFFFFFFF8;
            v2036 = *(_QWORD *)a4;
            v2037 = (uint64_t)v2034 >> 3;
            v2038 = v1728 + 17 - v2035;
            if (v2038)
            {
              v2039 = 7 - v2038;
              *(_BYTE *)(v2036 + v2037) &= ~(1 << v2039);
              v2036 = *(_QWORD *)a4;
              v2040 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2037) | (((v1998 >> 2) & 1) << v2039);
            }
            else
            {
              LOBYTE(v2040) = ((v1998 & 4) != 0) << 7;
            }
            *(_BYTE *)(v2036 + v2037) = v2040;
            *(_DWORD *)(a4 + 8) = v1728 + 18;
            v2041 = v1728 + 25;
            if (v1728 >= -18)
              v2041 = v1728 + 18;
            v2042 = v2041 & 0xFFFFFFF8;
            v2043 = *(_QWORD *)a4;
            v2044 = (uint64_t)v2041 >> 3;
            v2045 = v1728 + 18 - v2042;
            if (v2045)
            {
              v2046 = 7 - v2045;
              *(_BYTE *)(v2043 + v2044) &= ~(1 << v2046);
              v2043 = *(_QWORD *)a4;
              v2047 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2044) | (((v1998 >> 1) & 1) << v2046);
            }
            else
            {
              LOBYTE(v2047) = ((v1998 & 2) != 0) << 7;
            }
            *(_BYTE *)(v2043 + v2044) = v2047;
            *(_DWORD *)(a4 + 8) = v1728 + 19;
            v2048 = v1998 & 1;
            v2049 = v1728 + 26;
            if (v1728 >= -19)
              v2049 = v1728 + 19;
            v2050 = v2049 & 0xFFFFFFF8;
            v2051 = *(_QWORD *)a4;
            v2052 = (uint64_t)v2049 >> 3;
            v2053 = v1728 + 19 - v2050;
            if (v2053)
            {
              v2054 = 7 - v2053;
              *(_BYTE *)(v2051 + v2052) &= ~(1 << v2054);
              v2051 = *(_QWORD *)a4;
              v2048 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2052) | (v2048 << v2054);
            }
            else
            {
              LOBYTE(v2048) = (_BYTE)v2048 << 7;
            }
            *(_BYTE *)(v2051 + v2052) = v2048;
            *(_DWORD *)(a4 + 8) = v1728 + 20;
            v2055 = *(_DWORD *)(v1465 + 1180);
            v2056 = (v2055 >> 8) & 1;
            v2057 = v1728 + 27;
            if (v1728 >= -20)
              v2057 = v1728 + 20;
            v2058 = v2057 & 0xFFFFFFF8;
            v2059 = *(_QWORD *)a4;
            v2060 = (uint64_t)v2057 >> 3;
            v2061 = v1728 + 20 - v2058;
            if (v2061)
            {
              v2062 = 7 - v2061;
              *(_BYTE *)(v2059 + v2060) &= ~(1 << v2062);
              v2059 = *(_QWORD *)a4;
              v2056 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2060) | (v2056 << v2062);
            }
            else
            {
              LOBYTE(v2056) = (_BYTE)v2056 << 7;
            }
            *(_BYTE *)(v2059 + v2060) = v2056;
            *(_DWORD *)(a4 + 8) = v1728 + 21;
            v2063 = v1728 + 28;
            if (v1728 >= -21)
              v2063 = v1728 + 21;
            v2064 = v2063 & 0xFFFFFFF8;
            v2065 = *(_QWORD *)a4;
            v2066 = (uint64_t)v2063 >> 3;
            v2067 = v1728 + 21 - v2064;
            if (v2067)
            {
              v2068 = 7 - v2067;
              *(_BYTE *)(v2065 + v2066) &= ~(1 << v2068);
              v2065 = *(_QWORD *)a4;
              v2069 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2066) | (((v2055 >> 7) & 1) << v2068);
            }
            else
            {
              LOBYTE(v2069) = ((v2055 & 0x80) != 0) << 7;
            }
            *(_BYTE *)(v2065 + v2066) = v2069;
            *(_DWORD *)(a4 + 8) = v1728 + 22;
            v2070 = v1728 + 29;
            if (v1728 >= -22)
              v2070 = v1728 + 22;
            v2071 = v2070 & 0xFFFFFFF8;
            v2072 = *(_QWORD *)a4;
            v2073 = (uint64_t)v2070 >> 3;
            v2074 = v1728 + 22 - v2071;
            if (v2074)
            {
              v2075 = 7 - v2074;
              *(_BYTE *)(v2072 + v2073) &= ~(1 << v2075);
              v2072 = *(_QWORD *)a4;
              v2076 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2073) | (((v2055 >> 6) & 1) << v2075);
            }
            else
            {
              LOBYTE(v2076) = ((v2055 & 0x40) != 0) << 7;
            }
            *(_BYTE *)(v2072 + v2073) = v2076;
            *(_DWORD *)(a4 + 8) = v1728 + 23;
            v2077 = v1728 + 30;
            if (v1728 >= -23)
              v2077 = v1728 + 23;
            v2078 = v2077 & 0xFFFFFFF8;
            v2079 = *(_QWORD *)a4;
            v2080 = (uint64_t)v2077 >> 3;
            v2081 = v1728 + 23 - v2078;
            if (v2081)
            {
              v2082 = 7 - v2081;
              *(_BYTE *)(v2079 + v2080) &= ~(1 << v2082);
              v2079 = *(_QWORD *)a4;
              v2083 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2080) | (((v2055 >> 5) & 1) << v2082);
            }
            else
            {
              LOBYTE(v2083) = ((v2055 & 0x20) != 0) << 7;
            }
            *(_BYTE *)(v2079 + v2080) = v2083;
            *(_DWORD *)(a4 + 8) = v1728 + 24;
            v2084 = v1728 + 31;
            if (v1728 >= -24)
              v2084 = v1728 + 24;
            v2085 = v2084 & 0xFFFFFFF8;
            v2086 = *(_QWORD *)a4;
            v2087 = (uint64_t)v2084 >> 3;
            v2088 = v1728 + 24 - v2085;
            if (v2088)
            {
              v2089 = 7 - v2088;
              *(_BYTE *)(v2086 + v2087) &= ~(1 << v2089);
              v2086 = *(_QWORD *)a4;
              v2090 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2087) | (((v2055 >> 4) & 1) << v2089);
            }
            else
            {
              LOBYTE(v2090) = ((v2055 & 0x10) != 0) << 7;
            }
            *(_BYTE *)(v2086 + v2087) = v2090;
            *(_DWORD *)(a4 + 8) = v1728 + 25;
            v2091 = v1728 + 32;
            if (v1728 >= -25)
              v2091 = v1728 + 25;
            v2092 = v2091 & 0xFFFFFFF8;
            v2093 = *(_QWORD *)a4;
            v2094 = (uint64_t)v2091 >> 3;
            v2095 = v1728 + 25 - v2092;
            if (v2095)
            {
              v2096 = 7 - v2095;
              *(_BYTE *)(v2093 + v2094) &= ~(1 << v2096);
              v2093 = *(_QWORD *)a4;
              v2097 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2094) | (((v2055 >> 3) & 1) << v2096);
            }
            else
            {
              LOBYTE(v2097) = ((v2055 & 8) != 0) << 7;
            }
            *(_BYTE *)(v2093 + v2094) = v2097;
            *(_DWORD *)(a4 + 8) = v1728 + 26;
            v2098 = v1728 + 33;
            if (v1728 >= -26)
              v2098 = v1728 + 26;
            v2099 = v2098 & 0xFFFFFFF8;
            v2100 = *(_QWORD *)a4;
            v2101 = (uint64_t)v2098 >> 3;
            v2102 = v1728 + 26 - v2099;
            if (v2102)
            {
              v2103 = 7 - v2102;
              *(_BYTE *)(v2100 + v2101) &= ~(1 << v2103);
              v2100 = *(_QWORD *)a4;
              v2104 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2101) | (((v2055 >> 2) & 1) << v2103);
            }
            else
            {
              LOBYTE(v2104) = ((v2055 & 4) != 0) << 7;
            }
            *(_BYTE *)(v2100 + v2101) = v2104;
            *(_DWORD *)(a4 + 8) = v1728 + 27;
            v2105 = v1728 + 34;
            if (v1728 >= -27)
              v2105 = v1728 + 27;
            v2106 = v2105 & 0xFFFFFFF8;
            v2107 = *(_QWORD *)a4;
            v2108 = (uint64_t)v2105 >> 3;
            v2109 = v1728 + 27 - v2106;
            if (v2109)
            {
              v2110 = 7 - v2109;
              *(_BYTE *)(v2107 + v2108) &= ~(1 << v2110);
              v2107 = *(_QWORD *)a4;
              v2111 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2108) | (((v2055 >> 1) & 1) << v2110);
            }
            else
            {
              LOBYTE(v2111) = ((v2055 & 2) != 0) << 7;
            }
            *(_BYTE *)(v2107 + v2108) = v2111;
            *(_DWORD *)(a4 + 8) = v1728 + 28;
            v2112 = v2055 & 1;
            v2113 = v1728 + 35;
            if (v1728 >= -28)
              v2113 = v1728 + 28;
            v2114 = v2113 & 0xFFFFFFF8;
            v2115 = *(_QWORD *)a4;
            v2116 = (uint64_t)v2113 >> 3;
            v2117 = v1728 + 28 - v2114;
            if (v2117)
            {
              v2118 = 7 - v2117;
              *(_BYTE *)(v2115 + v2116) &= ~(1 << v2118);
              v2115 = *(_QWORD *)a4;
              v2112 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2116) | (v2112 << v2118);
            }
            else
            {
              LOBYTE(v2112) = (_BYTE)v2112 << 7;
            }
            *(_BYTE *)(v2115 + v2116) = v2112;
            v1943 = v1728 + 29;
            *v15 = v1728 + 29;
LABEL_1918:
            if (*(_DWORD *)(v1465 + 860))
            {
              v2119 = *(_DWORD *)(v1465 + 1184);
              v2120 = v1943 + 7;
              if (v1943 >= 0)
                v2120 = v1943;
              v2121 = v2120 & 0xFFFFFFF8;
              v2122 = *(_QWORD *)a4;
              v2123 = (uint64_t)v2120 >> 3;
              v2124 = v1943 - v2121;
              if (v2124)
              {
                v2125 = 7 - v2124;
                *(_BYTE *)(v2122 + v2123) &= ~(1 << v2125);
                v2122 = *(_QWORD *)a4;
                v2126 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2123) | (((v2119 >> 7) & 1) << v2125);
              }
              else
              {
                LOBYTE(v2126) = ((*(_DWORD *)(v1465 + 1184) & 0x80) != 0) << 7;
              }
              *(_BYTE *)(v2122 + v2123) = v2126;
              *(_DWORD *)(a4 + 8) = v1943 + 1;
              v2127 = v1943 + 8;
              if (v1943 >= -1)
                v2127 = v1943 + 1;
              v2128 = v2127 & 0xFFFFFFF8;
              v2129 = *(_QWORD *)a4;
              v2130 = (uint64_t)v2127 >> 3;
              v2131 = v1943 + 1 - v2128;
              if (v2131)
              {
                v2132 = 7 - v2131;
                *(_BYTE *)(v2129 + v2130) &= ~(1 << v2132);
                v2129 = *(_QWORD *)a4;
                v2133 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2130) | (((v2119 >> 6) & 1) << v2132);
              }
              else
              {
                LOBYTE(v2133) = ((v2119 & 0x40) != 0) << 7;
              }
              *(_BYTE *)(v2129 + v2130) = v2133;
              *(_DWORD *)(a4 + 8) = v1943 + 2;
              v2134 = v1943 + 9;
              if (v1943 >= -2)
                v2134 = v1943 + 2;
              v2135 = v2134 & 0xFFFFFFF8;
              v2136 = *(_QWORD *)a4;
              v2137 = (uint64_t)v2134 >> 3;
              v2138 = v1943 + 2 - v2135;
              if (v2138)
              {
                v2139 = 7 - v2138;
                *(_BYTE *)(v2136 + v2137) &= ~(1 << v2139);
                v2136 = *(_QWORD *)a4;
                v2140 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2137) | (((v2119 >> 5) & 1) << v2139);
              }
              else
              {
                LOBYTE(v2140) = ((v2119 & 0x20) != 0) << 7;
              }
              *(_BYTE *)(v2136 + v2137) = v2140;
              *(_DWORD *)(a4 + 8) = v1943 + 3;
              v2141 = v1943 + 10;
              if (v1943 >= -3)
                v2141 = v1943 + 3;
              v2142 = v2141 & 0xFFFFFFF8;
              v2143 = *(_QWORD *)a4;
              v2144 = (uint64_t)v2141 >> 3;
              v2145 = v1943 + 3 - v2142;
              if (v2145)
              {
                v2146 = 7 - v2145;
                *(_BYTE *)(v2143 + v2144) &= ~(1 << v2146);
                v2143 = *(_QWORD *)a4;
                v2147 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2144) | (((v2119 >> 4) & 1) << v2146);
              }
              else
              {
                LOBYTE(v2147) = ((v2119 & 0x10) != 0) << 7;
              }
              *(_BYTE *)(v2143 + v2144) = v2147;
              *(_DWORD *)(a4 + 8) = v1943 + 4;
              v2148 = v1943 + 11;
              if (v1943 >= -4)
                v2148 = v1943 + 4;
              v2149 = v2148 & 0xFFFFFFF8;
              v2150 = *(_QWORD *)a4;
              v2151 = (uint64_t)v2148 >> 3;
              v2152 = v1943 + 4 - v2149;
              if (v2152)
              {
                v2153 = 7 - v2152;
                *(_BYTE *)(v2150 + v2151) &= ~(1 << v2153);
                v2150 = *(_QWORD *)a4;
                v2154 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2151) | (((v2119 >> 3) & 1) << v2153);
              }
              else
              {
                LOBYTE(v2154) = ((v2119 & 8) != 0) << 7;
              }
              *(_BYTE *)(v2150 + v2151) = v2154;
              *(_DWORD *)(a4 + 8) = v1943 + 5;
              v2155 = v1943 + 12;
              if (v1943 >= -5)
                v2155 = v1943 + 5;
              v2156 = v2155 & 0xFFFFFFF8;
              v2157 = *(_QWORD *)a4;
              v2158 = (uint64_t)v2155 >> 3;
              v2159 = v1943 + 5 - v2156;
              if (v2159)
              {
                v2160 = 7 - v2159;
                *(_BYTE *)(v2157 + v2158) &= ~(1 << v2160);
                v2157 = *(_QWORD *)a4;
                v2161 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2158) | (((v2119 >> 2) & 1) << v2160);
              }
              else
              {
                LOBYTE(v2161) = ((v2119 & 4) != 0) << 7;
              }
              *(_BYTE *)(v2157 + v2158) = v2161;
              *(_DWORD *)(a4 + 8) = v1943 + 6;
              v2162 = v1943 + 13;
              if (v1943 >= -6)
                v2162 = v1943 + 6;
              v2163 = v2162 & 0xFFFFFFF8;
              v2164 = *(_QWORD *)a4;
              v2165 = (uint64_t)v2162 >> 3;
              v2166 = v1943 + 6 - v2163;
              if (v2166)
              {
                v2167 = 7 - v2166;
                *(_BYTE *)(v2164 + v2165) &= ~(1 << v2167);
                v2164 = *(_QWORD *)a4;
                v2168 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2165) | (((v2119 >> 1) & 1) << v2167);
              }
              else
              {
                LOBYTE(v2168) = ((v2119 & 2) != 0) << 7;
              }
              *(_BYTE *)(v2164 + v2165) = v2168;
              *(_DWORD *)(a4 + 8) = v1943 + 7;
              v2169 = v2119 & 1;
              v2170 = v1943 + 14;
              if (v1943 >= -7)
                v2170 = v1943 + 7;
              v2171 = v2170 & 0xFFFFFFF8;
              v2172 = *(_QWORD *)a4;
              v2173 = (uint64_t)v2170 >> 3;
              if (v1943 + 7 == v2171)
              {
                LOBYTE(v2169) = (_BYTE)v2169 << 7;
              }
              else
              {
                *(_BYTE *)(v2172 + v2173) &= ~(1 << (v2171 - v1943));
                v2172 = *(_QWORD *)a4;
                v2169 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2173) | (v2169 << (v2171 - v1943));
              }
              *(_BYTE *)(v2172 + v2173) = v2169;
              *(_DWORD *)(a4 + 8) = v1943 + 8;
              v2174 = *(_DWORD *)(v1465 + 1188);
              v2175 = v1943 + 15;
              if (v1943 >= -8)
                v2175 = v1943 + 8;
              v2176 = v2175 & 0xFFFFFFF8;
              v2177 = *(_QWORD *)a4;
              v2178 = (uint64_t)v2175 >> 3;
              v2179 = v1943 + 8 - v2176;
              if (v2179)
              {
                v2180 = 7 - v2179;
                *(_BYTE *)(v2177 + v2178) &= ~(1 << v2180);
                v2177 = *(_QWORD *)a4;
                v2181 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2178) | (((v2174 >> 7) & 1) << v2180);
              }
              else
              {
                LOBYTE(v2181) = ((*(_DWORD *)(v1465 + 1188) & 0x80) != 0) << 7;
              }
              *(_BYTE *)(v2177 + v2178) = v2181;
              *(_DWORD *)(a4 + 8) = v1943 + 9;
              v2182 = v1943 + 16;
              if (v1943 >= -9)
                v2182 = v1943 + 9;
              v2183 = v2182 & 0xFFFFFFF8;
              v2184 = *(_QWORD *)a4;
              v2185 = (uint64_t)v2182 >> 3;
              v2186 = v1943 + 9 - v2183;
              if (v2186)
              {
                v2187 = 7 - v2186;
                *(_BYTE *)(v2184 + v2185) &= ~(1 << v2187);
                v2184 = *(_QWORD *)a4;
                v2188 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2185) | (((v2174 >> 6) & 1) << v2187);
              }
              else
              {
                LOBYTE(v2188) = ((v2174 & 0x40) != 0) << 7;
              }
              *(_BYTE *)(v2184 + v2185) = v2188;
              *(_DWORD *)(a4 + 8) = v1943 + 10;
              v2189 = v1943 + 17;
              if (v1943 >= -10)
                v2189 = v1943 + 10;
              v2190 = v2189 & 0xFFFFFFF8;
              v2191 = *(_QWORD *)a4;
              v2192 = (uint64_t)v2189 >> 3;
              v2193 = v1943 + 10 - v2190;
              if (v2193)
              {
                v2194 = 7 - v2193;
                *(_BYTE *)(v2191 + v2192) &= ~(1 << v2194);
                v2191 = *(_QWORD *)a4;
                v2195 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2192) | (((v2174 >> 5) & 1) << v2194);
              }
              else
              {
                LOBYTE(v2195) = ((v2174 & 0x20) != 0) << 7;
              }
              *(_BYTE *)(v2191 + v2192) = v2195;
              *(_DWORD *)(a4 + 8) = v1943 + 11;
              v2196 = v1943 + 18;
              if (v1943 >= -11)
                v2196 = v1943 + 11;
              v2197 = v2196 & 0xFFFFFFF8;
              v2198 = *(_QWORD *)a4;
              v2199 = (uint64_t)v2196 >> 3;
              v2200 = v1943 + 11 - v2197;
              if (v2200)
              {
                v2201 = 7 - v2200;
                *(_BYTE *)(v2198 + v2199) &= ~(1 << v2201);
                v2198 = *(_QWORD *)a4;
                v2202 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2199) | (((v2174 >> 4) & 1) << v2201);
              }
              else
              {
                LOBYTE(v2202) = ((v2174 & 0x10) != 0) << 7;
              }
              *(_BYTE *)(v2198 + v2199) = v2202;
              *(_DWORD *)(a4 + 8) = v1943 + 12;
              v2203 = v1943 + 19;
              if (v1943 >= -12)
                v2203 = v1943 + 12;
              v2204 = v2203 & 0xFFFFFFF8;
              v2205 = *(_QWORD *)a4;
              v2206 = (uint64_t)v2203 >> 3;
              v2207 = v1943 + 12 - v2204;
              if (v2207)
              {
                v2208 = 7 - v2207;
                *(_BYTE *)(v2205 + v2206) &= ~(1 << v2208);
                v2205 = *(_QWORD *)a4;
                v2209 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2206) | (((v2174 >> 3) & 1) << v2208);
              }
              else
              {
                LOBYTE(v2209) = ((v2174 & 8) != 0) << 7;
              }
              *(_BYTE *)(v2205 + v2206) = v2209;
              *(_DWORD *)(a4 + 8) = v1943 + 13;
              v2210 = v1943 + 20;
              if (v1943 >= -13)
                v2210 = v1943 + 13;
              v2211 = v2210 & 0xFFFFFFF8;
              v2212 = *(_QWORD *)a4;
              v2213 = (uint64_t)v2210 >> 3;
              v2214 = v1943 + 13 - v2211;
              if (v2214)
              {
                v2215 = 7 - v2214;
                *(_BYTE *)(v2212 + v2213) &= ~(1 << v2215);
                v2212 = *(_QWORD *)a4;
                v2216 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2213) | (((v2174 >> 2) & 1) << v2215);
              }
              else
              {
                LOBYTE(v2216) = ((v2174 & 4) != 0) << 7;
              }
              *(_BYTE *)(v2212 + v2213) = v2216;
              *(_DWORD *)(a4 + 8) = v1943 + 14;
              v2217 = v1943 + 21;
              if (v1943 >= -14)
                v2217 = v1943 + 14;
              v2218 = v2217 & 0xFFFFFFF8;
              v2219 = *(_QWORD *)a4;
              v2220 = (uint64_t)v2217 >> 3;
              v2221 = v1943 + 14 - v2218;
              if (v2221)
              {
                v2222 = 7 - v2221;
                *(_BYTE *)(v2219 + v2220) &= ~(1 << v2222);
                v2219 = *(_QWORD *)a4;
                v2223 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2220) | (((v2174 >> 1) & 1) << v2222);
              }
              else
              {
                LOBYTE(v2223) = ((v2174 & 2) != 0) << 7;
              }
              *(_BYTE *)(v2219 + v2220) = v2223;
              *(_DWORD *)(a4 + 8) = v1943 + 15;
              v2224 = v2174 & 1;
              v2225 = v1943 + 22;
              if (v1943 >= -15)
                v2225 = v1943 + 15;
              v2226 = v2225 & 0xFFFFFFF8;
              v2227 = *(_QWORD *)a4;
              v2228 = (uint64_t)v2225 >> 3;
              v2229 = v1943 + 15 - v2226;
              if (v2229)
              {
                v2230 = 7 - v2229;
                *(_BYTE *)(v2227 + v2228) &= ~(1 << v2230);
                v2227 = *(_QWORD *)a4;
                v2224 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2228) | (v2224 << v2230);
              }
              else
              {
                LOBYTE(v2224) = (_BYTE)v2224 << 7;
              }
              *(_BYTE *)(v2227 + v2228) = v2224;
              *(_DWORD *)(a4 + 8) = v1943 + 16;
              v2231 = *(_DWORD *)(v1465 + 1192);
              v2232 = (v2231 >> 8) & 1;
              v2233 = v1943 + 23;
              if (v1943 >= -16)
                v2233 = v1943 + 16;
              v2234 = v2233 & 0xFFFFFFF8;
              v2235 = *(_QWORD *)a4;
              v2236 = (uint64_t)v2233 >> 3;
              v2237 = v1943 + 16 - v2234;
              if (v2237)
              {
                v2238 = 7 - v2237;
                *(_BYTE *)(v2235 + v2236) &= ~(1 << v2238);
                v2235 = *(_QWORD *)a4;
                v2232 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2236) | (v2232 << v2238);
              }
              else
              {
                LOBYTE(v2232) = (_BYTE)v2232 << 7;
              }
              *(_BYTE *)(v2235 + v2236) = v2232;
              *(_DWORD *)(a4 + 8) = v1943 + 17;
              v2239 = v1943 + 24;
              if (v1943 >= -17)
                v2239 = v1943 + 17;
              v2240 = v2239 & 0xFFFFFFF8;
              v2241 = *(_QWORD *)a4;
              v2242 = (uint64_t)v2239 >> 3;
              v2243 = v1943 + 17 - v2240;
              if (v2243)
              {
                v2244 = 7 - v2243;
                *(_BYTE *)(v2241 + v2242) &= ~(1 << v2244);
                v2241 = *(_QWORD *)a4;
                v2245 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2242) | (((v2231 >> 7) & 1) << v2244);
              }
              else
              {
                LOBYTE(v2245) = ((v2231 & 0x80) != 0) << 7;
              }
              *(_BYTE *)(v2241 + v2242) = v2245;
              *(_DWORD *)(a4 + 8) = v1943 + 18;
              v2246 = v1943 + 25;
              if (v1943 >= -18)
                v2246 = v1943 + 18;
              v2247 = v2246 & 0xFFFFFFF8;
              v2248 = *(_QWORD *)a4;
              v2249 = (uint64_t)v2246 >> 3;
              v2250 = v1943 + 18 - v2247;
              if (v2250)
              {
                v2251 = 7 - v2250;
                *(_BYTE *)(v2248 + v2249) &= ~(1 << v2251);
                v2248 = *(_QWORD *)a4;
                v2252 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2249) | (((v2231 >> 6) & 1) << v2251);
              }
              else
              {
                LOBYTE(v2252) = ((v2231 & 0x40) != 0) << 7;
              }
              *(_BYTE *)(v2248 + v2249) = v2252;
              *(_DWORD *)(a4 + 8) = v1943 + 19;
              v2253 = v1943 + 26;
              if (v1943 >= -19)
                v2253 = v1943 + 19;
              v2254 = v2253 & 0xFFFFFFF8;
              v2255 = *(_QWORD *)a4;
              v2256 = (uint64_t)v2253 >> 3;
              v2257 = v1943 + 19 - v2254;
              if (v2257)
              {
                v2258 = 7 - v2257;
                *(_BYTE *)(v2255 + v2256) &= ~(1 << v2258);
                v2255 = *(_QWORD *)a4;
                v2259 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2256) | (((v2231 >> 5) & 1) << v2258);
              }
              else
              {
                LOBYTE(v2259) = ((v2231 & 0x20) != 0) << 7;
              }
              *(_BYTE *)(v2255 + v2256) = v2259;
              *(_DWORD *)(a4 + 8) = v1943 + 20;
              v2260 = v1943 + 27;
              if (v1943 >= -20)
                v2260 = v1943 + 20;
              v2261 = v2260 & 0xFFFFFFF8;
              v2262 = *(_QWORD *)a4;
              v2263 = (uint64_t)v2260 >> 3;
              v2264 = v1943 + 20 - v2261;
              if (v2264)
              {
                v2265 = 7 - v2264;
                *(_BYTE *)(v2262 + v2263) &= ~(1 << v2265);
                v2262 = *(_QWORD *)a4;
                v2266 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2263) | (((v2231 >> 4) & 1) << v2265);
              }
              else
              {
                LOBYTE(v2266) = ((v2231 & 0x10) != 0) << 7;
              }
              *(_BYTE *)(v2262 + v2263) = v2266;
              *(_DWORD *)(a4 + 8) = v1943 + 21;
              v2267 = v1943 + 28;
              if (v1943 >= -21)
                v2267 = v1943 + 21;
              v2268 = v2267 & 0xFFFFFFF8;
              v2269 = *(_QWORD *)a4;
              v2270 = (uint64_t)v2267 >> 3;
              v2271 = v1943 + 21 - v2268;
              if (v2271)
              {
                v2272 = 7 - v2271;
                *(_BYTE *)(v2269 + v2270) &= ~(1 << v2272);
                v2269 = *(_QWORD *)a4;
                v2273 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2270) | (((v2231 >> 3) & 1) << v2272);
              }
              else
              {
                LOBYTE(v2273) = ((v2231 & 8) != 0) << 7;
              }
              *(_BYTE *)(v2269 + v2270) = v2273;
              *(_DWORD *)(a4 + 8) = v1943 + 22;
              v2274 = v1943 + 29;
              if (v1943 >= -22)
                v2274 = v1943 + 22;
              v2275 = v2274 & 0xFFFFFFF8;
              v2276 = *(_QWORD *)a4;
              v2277 = (uint64_t)v2274 >> 3;
              v2278 = v1943 + 22 - v2275;
              if (v2278)
              {
                v2279 = 7 - v2278;
                *(_BYTE *)(v2276 + v2277) &= ~(1 << v2279);
                v2276 = *(_QWORD *)a4;
                v2280 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2277) | (((v2231 >> 2) & 1) << v2279);
              }
              else
              {
                LOBYTE(v2280) = ((v2231 & 4) != 0) << 7;
              }
              *(_BYTE *)(v2276 + v2277) = v2280;
              *(_DWORD *)(a4 + 8) = v1943 + 23;
              v2281 = v1943 + 30;
              if (v1943 >= -23)
                v2281 = v1943 + 23;
              v2282 = v2281 & 0xFFFFFFF8;
              v2283 = *(_QWORD *)a4;
              v2284 = (uint64_t)v2281 >> 3;
              v2285 = v1943 + 23 - v2282;
              if (v2285)
              {
                v2286 = 7 - v2285;
                *(_BYTE *)(v2283 + v2284) &= ~(1 << v2286);
                v2283 = *(_QWORD *)a4;
                v2287 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2284) | (((v2231 >> 1) & 1) << v2286);
              }
              else
              {
                LOBYTE(v2287) = ((v2231 & 2) != 0) << 7;
              }
              *(_BYTE *)(v2283 + v2284) = v2287;
              *(_DWORD *)(a4 + 8) = v1943 + 24;
              v2288 = v2231 & 1;
              v2289 = v1943 + 31;
              if (v1943 >= -24)
                v2289 = v1943 + 24;
              v2290 = v2289 & 0xFFFFFFF8;
              v2291 = *(_QWORD *)a4;
              v2292 = (uint64_t)v2289 >> 3;
              v2293 = v1943 + 24 - v2290;
              if (v2293)
              {
                v2294 = 7 - v2293;
                *(_BYTE *)(v2291 + v2292) &= ~(1 << v2294);
                v2291 = *(_QWORD *)a4;
                v2288 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2292) | (v2288 << v2294);
              }
              else
              {
                LOBYTE(v2288) = (_BYTE)v2288 << 7;
              }
              *(_BYTE *)(v2291 + v2292) = v2288;
              v1943 += 25;
              *v15 = v1943;
            }
            v2295 = *(_DWORD *)(v1465 + 1196);
            v2296 = v1943 + 7;
            if (v1943 >= 0)
              v2296 = v1943;
            v2297 = v2296 & 0xFFFFFFF8;
            v2298 = *(_QWORD *)a4;
            v2299 = (uint64_t)v2296 >> 3;
            v2300 = v1943 - v2297;
            if (v2300)
            {
              v2301 = 7 - v2300;
              *(_BYTE *)(v2298 + v2299) &= ~(1 << v2301);
              v2298 = *(_QWORD *)a4;
              v2295 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2299) | (v2295 << v2301);
            }
            else
            {
              LOBYTE(v2295) = (_BYTE)v2295 << 7;
            }
            *(_BYTE *)(v2298 + v2299) = v2295;
            *(_DWORD *)(a4 + 8) = v1943 + 1;
            v2302 = *(_DWORD *)(v1465 + 1200);
            v2303 = v1943 + 8;
            if (v1943 >= -1)
              v2303 = v1943 + 1;
            v2304 = v2303 & 0xFFFFFFF8;
            v2305 = *(_QWORD *)a4;
            v2306 = (uint64_t)v2303 >> 3;
            v2307 = v1943 + 1 - v2304;
            if (v2307)
            {
              v2308 = 7 - v2307;
              *(_BYTE *)(v2305 + v2306) &= ~(1 << v2308);
              v2305 = *(_QWORD *)a4;
              v2302 = *(unsigned __int8 *)(*(_QWORD *)a4 + v2306) | (v2302 << v2308);
            }
            else
            {
              LOBYTE(v2302) = (_BYTE)v2302 << 7;
            }
            *(_BYTE *)(v2305 + v2306) = v2302;
            v1687 = v1943 + 2;
          }
          else
          {
            v1509 = 0;
            v1510 = 1;
            v1511 = *(int *)(v3111 + 239280);
            v1512 = *(_QWORD *)(v3111 + 8 * v1511 + 239456);
            if (*(_BYTE *)(v1512 + 568))
              goto LABEL_1455;
LABEL_1481:
            while (v1510 <= 6)
            {
              while (1)
              {
                v1510 = ++v1509 + 1;
                v1511 = *(int *)(v3111 + 239280 + 4 * v1509);
                v1512 = *(_QWORD *)(v3111 + 8 * v1511 + 239456);
                if (!*(_BYTE *)(v1512 + 568))
                  break;
LABEL_1455:
                if (*(_DWORD *)(v1465 + 572) != *(_DWORD *)(v1512 + 572))
                  goto LABEL_1481;
                v1513 = *(int *)(v1465 + 692);
                if ((_DWORD)v1513 != *(_DWORD *)(v1512 + 692))
                  goto LABEL_1481;
                result = memcmp((const void *)(v1465 + 580), (const void *)(v1512 + 580), 16 * v1513);
                if ((_DWORD)result)
                  goto LABEL_1481;
                v1514 = *(int *)(v1465 + 776);
                if ((_DWORD)v1514 != *(_DWORD *)(v1512 + 776))
                  goto LABEL_1481;
                result = memcmp((const void *)(v1465 + 696), (const void *)(v1512 + 696), 16 * v1514);
                if ((_DWORD)result)
                  goto LABEL_1481;
                v1515 = *(int *)(v1465 + 860);
                if ((_DWORD)v1515 != *(_DWORD *)(v1512 + 860))
                  goto LABEL_1481;
                result = memcmp((const void *)(v1465 + 780), (const void *)(v1512 + 780), 16 * v1515);
                if ((_DWORD)result)
                  goto LABEL_1481;
                if (*(_DWORD *)(v1465 + 864) != *(_DWORD *)(v1512 + 864))
                  goto LABEL_1481;
                v1516 = *(_DWORD *)(v1465 + 868);
                if (v1516 != *(_DWORD *)(v1512 + 868))
                  goto LABEL_1481;
                __n = 8 * (v1516 + v1516 * v1516);
                result = memcmp((const void *)(v1465 + 872), (const void *)(v1512 + 872), __n);
                if ((_DWORD)result)
                  goto LABEL_1481;
                result = memcmp((const void *)(v1465 + 968), (const void *)(v1512 + 968), __n);
                if ((_DWORD)result)
                  goto LABEL_1481;
                result = memcmp((const void *)(v1465 + 1068), (const void *)(v1512 + 1068), __n);
                if ((_DWORD)result
                  || *(_DWORD *)(v1465 + 1168) != *(_DWORD *)(v1512 + 1168)
                  || *(_DWORD *)(v1465 + 1172) != *(_DWORD *)(v1512 + 1172)
                  || *(_DWORD *)(v1465 + 1176) != *(_DWORD *)(v1512 + 1176)
                  || *(_DWORD *)(v1465 + 1180) != *(_DWORD *)(v1512 + 1180)
                  || *(_DWORD *)(v1465 + 1184) != *(_DWORD *)(v1512 + 1184)
                  || *(_DWORD *)(v1465 + 1188) != *(_DWORD *)(v1512 + 1188)
                  || *(_DWORD *)(v1465 + 1192) != *(_DWORD *)(v1512 + 1192)
                  || *(_DWORD *)(v1465 + 1196) != *(_DWORD *)(v1512 + 1196)
                  || *(_DWORD *)(v1465 + 1200) != *(_DWORD *)(v1512 + 1200)
                  || *(_DWORD *)(v1465 + 1204) != *(_DWORD *)(v1512 + 1204)
                  || *(_DWORD *)(v1465 + 1208) != *(_DWORD *)(v1512 + 1208))
                {
                  goto LABEL_1481;
                }
                if (v1510 > 6 || *(_DWORD *)(v1465 + 1212) == *(_DWORD *)(v1512 + 1212))
                  goto LABEL_1482;
              }
            }
LABEL_1482:
            v1517 = v1477 + 7;
            if (v1477 >= 0)
              v1517 = v1477;
            v1518 = v1517 & 0xFFFFFFF8;
            v1519 = *(_QWORD *)a4;
            v1520 = (uint64_t)v1517 >> 3;
            v1521 = v1477 - v1518;
            if (v1521)
            {
              v1522 = 7 - v1521;
              *(_BYTE *)(v1519 + v1520) &= ~(1 << v1522);
              v1519 = *(_QWORD *)a4;
              v1523 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1520) | (((v1511 >> 2) & 1) << v1522);
            }
            else
            {
              LOBYTE(v1523) = ((v1511 & 4) != 0) << 7;
            }
            *(_BYTE *)(v1519 + v1520) = v1523;
            *(_DWORD *)(a4 + 8) = v1477 + 1;
            v1673 = v1477 + 8;
            if (v1477 >= -1)
              v1673 = v1477 + 1;
            v1674 = v1673 & 0xFFFFFFF8;
            v1675 = *(_QWORD *)a4;
            v1676 = (uint64_t)v1673 >> 3;
            v1677 = v1477 + 1 - v1674;
            if (v1677)
            {
              v1678 = 7 - v1677;
              *(_BYTE *)(v1675 + v1676) &= ~(1 << v1678);
              v1675 = *(_QWORD *)a4;
              v1679 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1676) | (((v1511 >> 1) & 1) << v1678);
            }
            else
            {
              LOBYTE(v1679) = ((v1511 & 2) != 0) << 7;
            }
            *(_BYTE *)(v1675 + v1676) = v1679;
            *(_DWORD *)(a4 + 8) = v1477 + 2;
            v1680 = v1511 & 1;
            v1681 = v1477 + 9;
            if (v1477 >= -2)
              v1681 = v1477 + 2;
            v1682 = v1681 & 0xFFFFFFF8;
            v1683 = *(_QWORD *)a4;
            v1684 = (uint64_t)v1681 >> 3;
            v1685 = v1477 + 2 - v1682;
            if (v1685)
            {
              v1686 = 7 - v1685;
              *(_BYTE *)(v1683 + v1684) &= ~(1 << v1686);
              v1683 = *(_QWORD *)a4;
              v1680 = *(unsigned __int8 *)(*(_QWORD *)a4 + v1684) | (v1680 << v1686);
            }
            else
            {
              LOBYTE(v1680) = (_BYTE)v1680 << 7;
            }
            *(_BYTE *)(v1683 + v1684) = v1680;
            v1687 = v1477 + 3;
          }
          *v15 = v1687;
        }
        else
        {
          *(_BYTE *)(v1470 + v1471) = (_BYTE)v1466 << 7;
          v1474 = v1467 + 1;
          *v15 = v1474;
          if (*(_DWORD *)(v1465 + 572))
            goto LABEL_1428;
        }
      }
LABEL_2057:
      if (v3108[145])
      {
        v2309 = *v15;
        v2310 = *v15 & 7;
        if (v2310)
        {
          if (v2309 >= 0)
            v2311 = *v15;
          else
            v2311 = v2309 + 7;
          v2312 = v2311 & 0xFFFFFFF8;
          v2313 = *(_QWORD *)a4;
          v2314 = (uint64_t)v2311 >> 3;
          v2315 = v2309 - v2312;
          if (v2315)
            v2315 = *(unsigned __int8 *)(v2313 + v2314) & ~(1 << (7 - v2315));
          *(_BYTE *)(v2313 + v2314) = v2315;
          v2316 = v2309 + 1;
          *v15 = v2309 + 1;
          if (v2310 != 7)
          {
            if (v2316 >= 0)
              v2317 = v2309 + 1;
            else
              v2317 = v2309 + 8;
            v2318 = v2317 & 0xFFFFFFF8;
            v2319 = *(_QWORD *)a4;
            v2320 = (uint64_t)v2317 >> 3;
            v2321 = v2316 - v2318;
            if (v2321)
              v2321 = *(unsigned __int8 *)(v2319 + v2320) & ~(1 << (7 - v2321));
            *(_BYTE *)(v2319 + v2320) = v2321;
            v2322 = v2309 + 2;
            *v15 = v2309 + 2;
            if ((v2310 ^ 6u) >= 2)
            {
              if (v2322 >= 0)
                v2323 = v2309 + 2;
              else
                v2323 = v2309 + 9;
              v2324 = v2323 & 0xFFFFFFF8;
              v2325 = *(_QWORD *)a4;
              v2326 = (uint64_t)v2323 >> 3;
              v2327 = v2322 - v2324;
              if (v2327)
                v2327 = *(unsigned __int8 *)(v2325 + v2326) & ~(1 << (7 - v2327));
              *(_BYTE *)(v2325 + v2326) = v2327;
              v2328 = v2309 + 3;
              *v15 = v2309 + 3;
              if ((v2310 - 7) <= 0xFFFFFFFD)
              {
                if (v2328 >= 0)
                  v2329 = v2309 + 3;
                else
                  v2329 = v2309 + 10;
                v2330 = v2329 & 0xFFFFFFF8;
                v2331 = *(_QWORD *)a4;
                v2332 = (uint64_t)v2329 >> 3;
                v2333 = v2328 - v2330;
                if (v2333)
                  v2333 = *(unsigned __int8 *)(v2331 + v2332) & ~(1 << (7 - v2333));
                *(_BYTE *)(v2331 + v2332) = v2333;
                v2334 = v2309 + 4;
                *v15 = v2309 + 4;
                if ((v2309 & 6) != 4)
                {
                  if (v2334 >= 0)
                    v2335 = v2309 + 4;
                  else
                    v2335 = v2309 + 11;
                  v2336 = v2335 & 0xFFFFFFF8;
                  v2337 = *(_QWORD *)a4;
                  v2338 = (uint64_t)v2335 >> 3;
                  v2339 = v2334 - v2336;
                  if (v2339)
                    v2339 = *(unsigned __int8 *)(v2337 + v2338) & ~(1 << (7 - v2339));
                  *(_BYTE *)(v2337 + v2338) = v2339;
                  v2340 = v2309 + 5;
                  *v15 = v2309 + 5;
                  if ((v2310 - 5) <= 0xFFFFFFFD)
                  {
                    if (v2340 >= 0)
                      v2341 = v2309 + 5;
                    else
                      v2341 = v2309 + 12;
                    v2342 = v2341 & 0xFFFFFFF8;
                    v2343 = *(_QWORD *)a4;
                    v2344 = (uint64_t)v2341 >> 3;
                    v2345 = v2340 - v2342;
                    if (v2345)
                      v2345 = *(unsigned __int8 *)(v2343 + v2344) & ~(1 << (7 - v2345));
                    *(_BYTE *)(v2343 + v2344) = v2345;
                    v2346 = v2309 + 6;
                    *v15 = v2309 + 6;
                    if ((v2309 & 6) != 2)
                    {
                      if (v2346 >= 0)
                        v2347 = v2309 + 6;
                      else
                        v2347 = v2309 + 13;
                      v2348 = v2347 & 0xFFFFFFF8;
                      v2349 = *(_QWORD *)a4;
                      v2350 = (uint64_t)v2347 >> 3;
                      v2351 = v2346 - v2348;
                      if (v2351)
                        v2351 = *(unsigned __int8 *)(v2349 + v2350) & ~(1 << (7 - v2351));
                      *(_BYTE *)(v2349 + v2350) = v2351;
                      v2352 = v2309 + 7;
                      *v15 = v2309 + 7;
                      if ((v2310 - 3) <= 0xFFFFFFFD)
                      {
                        if (v2352 >= 0)
                          v2353 = v2309 + 7;
                        else
                          v2353 = v2309 + 14;
                        v2354 = v2353 & 0xFFFFFFF8;
                        v2355 = *(_QWORD *)a4;
                        v2356 = (uint64_t)v2353 >> 3;
                        v2357 = v2352 - v2354;
                        if (v2357)
                          v2357 = *(unsigned __int8 *)(v2355 + v2356) & ~(1 << (7 - v2357));
                        *(_BYTE *)(v2355 + v2356) = v2357;
                        *v15 = v2309 + 8;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        *a3 = *(_OWORD *)a4;
        if (*v3108 * v3108[1] >= 2)
        {
          v2358 = *(_DWORD *)(a4 + 8);
          if (v2358 >= 0)
            v2359 = *(_DWORD *)(a4 + 8);
          else
            v2359 = v2358 + 7;
          v2360 = v2359 & 0xFFFFFFF8;
          v2361 = *(_QWORD *)a4;
          v2362 = (uint64_t)v2359 >> 3;
          v2363 = v2358 - v2360;
          if (v2363)
            v2363 = *(unsigned __int8 *)(v2361 + v2362) & ~(1 << (7 - v2363));
          *(_BYTE *)(v2361 + v2362) = v2363;
          *(_DWORD *)(a4 + 8) = v2358 + 1;
          if (v2358 >= -1)
            v2364 = v2358 + 1;
          else
            v2364 = v2358 + 8;
          v2365 = v2364 & 0xFFFFFFF8;
          v2366 = *(_QWORD *)a4;
          v2367 = (uint64_t)v2364 >> 3;
          v2368 = v2358 + 1 - v2365;
          if (v2368)
            v2368 = *(unsigned __int8 *)(v2366 + v2367) & ~(1 << (7 - v2368));
          *(_BYTE *)(v2366 + v2367) = v2368;
          *(_DWORD *)(a4 + 8) = v2358 + 2;
          if (v2358 >= -2)
            v2369 = v2358 + 2;
          else
            v2369 = v2358 + 9;
          v2370 = v2369 & 0xFFFFFFF8;
          v2371 = *(_QWORD *)a4;
          v2372 = (uint64_t)v2369 >> 3;
          v2373 = v2358 + 2 - v2370;
          if (v2373)
            v2373 = *(unsigned __int8 *)(v2371 + v2372) & ~(1 << (7 - v2373));
          *(_BYTE *)(v2371 + v2372) = v2373;
          *(_DWORD *)(a4 + 8) = v2358 + 3;
          if (v2358 >= -3)
            v2374 = v2358 + 3;
          else
            v2374 = v2358 + 10;
          v2375 = v2374 & 0xFFFFFFF8;
          v2376 = *(_QWORD *)a4;
          v2377 = (uint64_t)v2374 >> 3;
          v2378 = v2358 + 3 - v2375;
          if (v2378)
            v2378 = *(unsigned __int8 *)(v2376 + v2377) & ~(1 << (7 - v2378));
          *(_BYTE *)(v2376 + v2377) = v2378;
          *v15 = v2358 + 4;
        }
      }
      return result;
    default:
      goto LABEL_734;
  }
}

uint64_t write_frame_size_0(uint64_t result, int a2, uint64_t *a3)
{
  int v3;
  int *v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int v73;
  char v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  char v78;
  int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  unsigned int v85;
  char v86;
  unsigned int i;
  char v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;

  if (a2)
  {
    v3 = *(_DWORD *)(result + 76);
    v4 = *(int **)(result + 24680);
    v6 = *v4;
    v5 = v4[1];
    if (v6 >= 1)
    {
      v7 = *(_DWORD *)(result + 72) - 1;
      v8 = *((_DWORD *)a3 + 2);
      v9 = 7 - v8;
      v10 = v6 + 1;
      do
      {
        v13 = (v7 >> (v10 - 2)) & 1;
        v14 = v8 + 7;
        if (v8 >= 0)
          v14 = v8;
        v15 = v14 & 0xFFFFFFF8;
        v12 = *a3;
        v16 = (uint64_t)v14 >> 3;
        if (v15 == v8)
        {
          LOBYTE(v13) = (_BYTE)v13 << 7;
        }
        else
        {
          v11 = v9 + v15;
          *(_BYTE *)(v12 + v16) &= ~(1 << v11);
          v12 = *a3;
          v13 = *(unsigned __int8 *)(*a3 + v16) | (v13 << v11);
        }
        *(_BYTE *)(v12 + v16) = v13;
        *((_DWORD *)a3 + 2) = ++v8;
        --v9;
        --v10;
      }
      while (v10 > 1);
    }
    if (v5 >= 1)
    {
      v17 = v3 - 1;
      v18 = *((_DWORD *)a3 + 2);
      v19 = 7 - v18;
      v20 = v5 + 1;
      do
      {
        v23 = (v17 >> (v20 - 2)) & 1;
        v24 = v18 + 7;
        if (v18 >= 0)
          v24 = v18;
        v25 = v24 & 0xFFFFFFF8;
        v22 = *a3;
        v26 = (uint64_t)v24 >> 3;
        if (v25 == v18)
        {
          LOBYTE(v23) = (_BYTE)v23 << 7;
        }
        else
        {
          v21 = v19 + v25;
          *(_BYTE *)(v22 + v26) &= ~(1 << v21);
          v22 = *a3;
          v23 = *(unsigned __int8 *)(*a3 + v26) | (v23 << v21);
        }
        *(_BYTE *)(v22 + v26) = v23;
        *((_DWORD *)a3 + 2) = ++v18;
        --v19;
        --v20;
      }
      while (v20 > 1);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)(result + 24680) + 66))
  {
    v27 = *((_DWORD *)a3 + 2);
    v28 = v27 + 7;
    if (v27 >= 0)
      v28 = *((_DWORD *)a3 + 2);
    v29 = v27 - (v28 & 0xFFFFFFF8);
    v30 = *a3;
    v31 = (uint64_t)v28 >> 3;
    if (*(_BYTE *)(result + 80) == 8)
    {
      if (v29)
        v29 = *(unsigned __int8 *)(v30 + v31) & ~(1 << (7 - v29));
      *(_BYTE *)(v30 + v31) = v29;
      v32 = 1;
    }
    else
    {
      if (v29)
      {
        v33 = 1 << (7 - v29);
        *(_BYTE *)(v30 + v31) &= ~(_BYTE)v33;
        v30 = *a3;
        v34 = *(_BYTE *)(*a3 + v31) | v33;
      }
      else
      {
        v34 = 0x80;
      }
      *(_BYTE *)(v30 + v31) = v34;
      *((_DWORD *)a3 + 2) = v27 + 1;
      v35 = *(unsigned __int8 *)(result + 80) - 9;
      v36 = v27 + 8;
      if (v27 >= -1)
        v36 = v27 + 1;
      v37 = v36 & 0xFFFFFFF8;
      v38 = *a3;
      v39 = (uint64_t)v36 >> 3;
      v40 = v27 + 1 - v37;
      if (v40)
      {
        v41 = 7 - v40;
        *(_BYTE *)(v38 + v39) &= ~(1 << v41);
        v38 = *a3;
        v42 = *(unsigned __int8 *)(*a3 + v39) | (((v35 >> 2) & 1) << v41);
      }
      else
      {
        LOBYTE(v42) = ((v35 & 4) != 0) << 7;
      }
      *(_BYTE *)(v38 + v39) = v42;
      *((_DWORD *)a3 + 2) = v27 + 2;
      v43 = v27 + 9;
      if (v27 >= -2)
        v43 = v27 + 2;
      v44 = v43 & 0xFFFFFFF8;
      v45 = *a3;
      v46 = (uint64_t)v43 >> 3;
      v47 = v27 + 2 - v44;
      if (v47)
      {
        v48 = 7 - v47;
        *(_BYTE *)(v45 + v46) &= ~(1 << v48);
        v45 = *a3;
        v49 = *(unsigned __int8 *)(*a3 + v46) | (((v35 >> 1) & 1) << v48);
      }
      else
      {
        LOBYTE(v49) = ((v35 & 2) != 0) << 7;
      }
      *(_BYTE *)(v45 + v46) = v49;
      *((_DWORD *)a3 + 2) = v27 + 3;
      v50 = v35 & 1;
      v51 = v27 + 10;
      if (v27 >= -3)
        v51 = v27 + 3;
      v52 = v51 & 0xFFFFFFF8;
      v53 = *a3;
      v54 = (uint64_t)v51 >> 3;
      v55 = v27 + 3 - v52;
      if (v55)
      {
        v56 = 7 - v55;
        *(_BYTE *)(v53 + v54) &= ~(1 << v56);
        v53 = *a3;
        v50 = *(unsigned __int8 *)(*a3 + v54) | (v50 << v56);
      }
      else
      {
        LOBYTE(v50) = (_BYTE)v50 << 7;
      }
      *(_BYTE *)(v53 + v54) = v50;
      v32 = 4;
    }
    *((_DWORD *)a3 + 2) = v27 + v32;
  }
  if (*(_DWORD *)(result + 72) == *(_DWORD *)(result + 64))
  {
    v57 = *(_DWORD *)(result + 76);
    v58 = *(_DWORD *)(result + 68);
    v59 = *((_DWORD *)a3 + 2);
    v60 = v59 + 7;
    if (v59 >= 0)
      v60 = *((_DWORD *)a3 + 2);
    v61 = v60 & 0xFFFFFFF8;
    v62 = *a3;
    v63 = (uint64_t)v60 >> 3;
    v64 = v59 - v61;
    if (v64)
    {
      v65 = 7 - v64;
      *(_BYTE *)(v62 + v63) &= ~(1 << v65);
      *(_BYTE *)(*a3 + v63) |= (v57 != v58) << v65;
      v66 = v59 + 1;
      *((_DWORD *)a3 + 2) = v66;
      if (v57 == v58)
        return result;
    }
    else
    {
      *(_BYTE *)(v62 + v63) = (v57 != v58) << 7;
      v66 = v59 + 1;
      *((_DWORD *)a3 + 2) = v66;
      if (v57 == v58)
        return result;
    }
  }
  else
  {
    v67 = *((_DWORD *)a3 + 2);
    v68 = v67 + 7;
    if (v67 >= 0)
      v68 = *((_DWORD *)a3 + 2);
    v69 = v68 & 0xFFFFFFF8;
    v70 = *a3;
    v71 = (uint64_t)v68 >> 3;
    v72 = v67 - v69;
    if (v72)
    {
      v73 = 1 << (7 - v72);
      *(_BYTE *)(v70 + v71) &= ~(_BYTE)v73;
      v70 = *a3;
      v74 = *(_BYTE *)(*a3 + v71) | v73;
    }
    else
    {
      v74 = 0x80;
    }
    *(_BYTE *)(v70 + v71) = v74;
    v66 = v67 + 1;
    *((_DWORD *)a3 + 2) = v67 + 1;
  }
  v75 = *(_DWORD *)(result + 64) - 1;
  v76 = 17;
  v77 = v66;
  do
  {
    while (1)
    {
      v79 = (v75 >> (v76 - 2)) & 1;
      v80 = v77 + 7;
      if (v77 >= 0)
        v80 = v77;
      v81 = v76 - v66 + (v80 & 0xFFFFFFF8);
      v82 = *a3;
      v83 = (uint64_t)v80 >> 3;
      if (v81 == 17)
        break;
      v78 = v81 - 10;
      *(_BYTE *)(v82 + v83) &= ~(1 << v78);
      *(_BYTE *)(*a3 + v83) |= (_BYTE)v79 << v78;
      *((_DWORD *)a3 + 2) = ++v77;
      if (--v76 <= 1)
        goto LABEL_65;
    }
    *(_BYTE *)(v82 + v83) = (_BYTE)v79 << 7;
    *((_DWORD *)a3 + 2) = ++v77;
    --v76;
  }
  while (v76 > 1);
LABEL_65:
  v84 = 0;
  v85 = *(_DWORD *)(result + 68) - 1;
  v86 = v76 - v66;
  for (i = 17; i > 1; --i)
  {
    v91 = (v85 >> (i - 2)) & 1;
    v92 = v77 + 7;
    if (v77 >= 0)
      v92 = v77;
    v93 = v92 & 0xFFFFFFF8;
    v90 = *a3;
    v94 = (uint64_t)v92 >> 3;
    if (v93 == v77)
    {
      LOBYTE(v91) = (_BYTE)v91 << 7;
    }
    else
    {
      v88 = v86 + v84 + v93 - 10;
      v89 = *(unsigned __int8 *)(v90 + v94);
      result = v89 & ~(1 << v88);
      *(_BYTE *)(v90 + v94) = v89 & ~(1 << v88);
      v90 = *a3;
      v91 = *(unsigned __int8 *)(*a3 + v94) | (v91 << v88);
    }
    *(_BYTE *)(v90 + v94) = v91;
    *((_DWORD *)a3 + 2) = ++v77;
    --v84;
  }
  return result;
}

uint64_t write_modes_sb_0(uint64_t result, uint64_t a2, int *a3, uint64_t a4, _BYTE **a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  int *v8;
  int v9;
  int v11;
  uint64_t v18;
  size_t v19;
  size_t v20;
  int v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  int v34;
  uint64_t v35;
  signed int v36;
  int16x8_t *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _WORD *v47;
  size_t v48;
  __int16 v49;
  _BOOL4 v50;
  uint64_t v51;
  _WORD *v52;
  unsigned __int8 *v53;
  __int16 v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  int64x2_t v66;
  uint64_t v67;
  int16x8_t *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned __int16 v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  _BYTE **v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int v93;
  void *v94;
  void *v95;
  size_t v96;
  unsigned __int8 *v97;
  size_t v98;
  size_t v99;
  unsigned __int8 *v100;
  void *v101;
  void *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  uint64_t v105;
  void *v106;
  void *v107;
  size_t v108;
  size_t v109;
  unsigned __int8 *v110;
  void *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  void *v114;
  unsigned __int8 *v115;
  unsigned int v117;
  size_t v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  size_t v123;
  _WORD v124[2];
  _WORD v125[2];

  v8 = (int *)(result + 239572);
  v9 = *(_DWORD *)(result + 239572);
  if (v9 <= (int)a6)
    return result;
  v11 = *(_DWORD *)(result + 239576);
  if (v11 <= (int)a7)
    return result;
  v18 = result;
  v19 = mi_size_wide_5[a8];
  v20 = v19 >> 1;
  v21 = *(_DWORD *)(result + 239620);
  v22 = (unsigned __int8 **)(*(_QWORD *)(result + 239608) + 8 * ((int)a7 + v21 * (int)a6));
  v23 = **v22;
  v121 = a8;
  if ((_DWORD)v23 == a8)
  {
    v24 = 0;
  }
  else
  {
    v25 = mi_size_high_4[a8];
    v26 = mi_size_high_4[v23];
    v27 = mi_size_wide_5[v23];
    if (a8 >= 4
      && ((result = (v25 >> 1) + a7, (int)v20 + (int)a6 < v9) ? (v28 = (int)result < v11) : (v28 = 0), v28))
    {
      v32 = v22[(v25 >> 1) * v21];
      if (v27 == (_DWORD)v19)
      {
        if (v25 == 4 * v26)
        {
          v24 = 8;
        }
        else if (*v32 == (_DWORD)v23)
        {
          v24 = 1;
        }
        else
        {
          v24 = 5;
        }
      }
      else
      {
        v53 = v22[v20];
        if (v26 == v25)
        {
          if ((_DWORD)v19 == 4 * v27)
          {
            v24 = 9;
          }
          else if (*v53 == (_DWORD)v23)
          {
            v24 = 2;
          }
          else
          {
            v24 = 7;
          }
        }
        else if ((_DWORD)v19 == 2 * v27 && 2 * v26 == v25)
        {
          if (mi_size_wide_5[*v32] == (_DWORD)v19)
          {
            v24 = 4;
          }
          else if (mi_size_high_4[*v53] == v25)
          {
            v24 = 6;
          }
          else
          {
            v24 = 3;
          }
        }
        else
        {
          v24 = 3;
        }
      }
    }
    else
    {
      v29 = (v26 < v25) | (2 * (v27 < v19));
      if (!v29)
      {
        v24 = 255;
        v30 = 255;
        goto LABEL_23;
      }
      v24 = get_partition_base_partitions[v29];
    }
  }
  v30 = 255;
  v31 = a8;
  switch(a8)
  {
    case 0u:
      goto LABEL_22;
    case 3u:
      v31 = 1;
      goto LABEL_22;
    case 6u:
      v31 = 2;
      goto LABEL_22;
    case 9u:
      v31 = 3;
      goto LABEL_22;
    case 0xCu:
      v31 = 4;
      goto LABEL_22;
    case 0xFu:
      v31 = 5;
LABEL_22:
      v30 = *((unsigned __int8 *)&subsize_lookup_0 + 6 * v24 + v31);
      break;
    default:
      break;
  }
LABEL_23:
  v119 = v30;
  v120 = v24;
  v123 = mi_size_wide_5[a8];
  if (a8 >= 3)
  {
    v33 = v20 + a6;
    v34 = v20 + a7;
    v35 = *(_QWORD *)(a2 + 11064);
    if ((int)v20 + (int)a6 < v9 || v34 < v11)
    {
      v36 = (*(char *)(*(_QWORD *)(a2 + 8504) + (int)a7) >> (mi_size_wide_log2_0[a8] - 1)) & 1 | (2 * ((*(char *)(a2 + (a6 & 0x1F) + 8512) >> (mi_size_wide_log2_0[a8] - 1)) & 1)) | (4 * (mi_size_wide_log2_0[a8] - 1));
      v118 = v19 >> 1;
      if (v33 >= v9 || v34 >= v11)
      {
        v47 = (_WORD *)(v35 + 22 * v36 + 13618);
        if (v33 < v9 || v34 >= v11)
        {
          v48 = mi_size_wide_5[a8];
          v54 = ((v47[1] - *v47) ^ 0x8000) - v47[2] + v47[6];
          if (a8 != 15)
            v54 = v54 - v47[7] + v47[8];
          v124[0] = 0x8000 - v54;
          v124[1] = 0;
          v50 = v24 == 3;
          v51 = a4 + 16;
          v52 = v124;
        }
        else
        {
          v48 = mi_size_wide_5[a8];
          v49 = v47[4] - v47[1] - v47[5] + v47[7] + 0x8000;
          if (a8 != 15)
            v49 = v49 - v47[8] + v47[9];
          v125[0] = 0x8000 - v49;
          v125[1] = 0;
          v50 = v24 == 3;
          v51 = a4 + 16;
          v52 = v125;
        }
        result = (uint64_t)od_ec_encode_cdf_q15(v51, v50, (uint64_t)v52, 2);
        v24 = v120;
        v19 = v48;
        LODWORD(v20) = v118;
        goto LABEL_62;
      }
      v37 = (int16x8_t *)(v35 + 22 * v36 + 13618);
      if (a8 == 15)
        v38 = 8;
      else
        v38 = 10;
      if (a8 >= 4)
        v39 = v38;
      else
        v39 = 4;
      v122 = v39;
      if (v24)
      {
        v40 = v37->u16[v24];
        v41 = *(_QWORD *)(a4 + 32);
        v42 = *(unsigned __int16 *)(a4 + 40);
        v43 = v39 - 1;
        v44 = v42 >> 8;
        if ((v37->i16[v24 - 1] & 0x80000000) == 0)
        {
          v45 = ((v44 * (v37->u16[v24 - 1] >> 6)) >> 1) + 4 * (v39 - v24);
          v41 += v42 - v45;
          v46 = v45 - ((v44 * (v40 >> 6)) >> 1) + 4 * (v24 - v43);
          goto LABEL_51;
        }
      }
      else
      {
        v40 = v37->u16[0];
        v41 = *(_QWORD *)(a4 + 32);
        v42 = *(unsigned __int16 *)(a4 + 40);
        v43 = v39 - 1;
        v44 = v42 >> 8;
      }
      v46 = v42 + 4 * (v24 - v43) - (((v40 >> 6) * v44) >> 1);
LABEL_51:
      result = (uint64_t)od_ec_enc_normalize((_DWORD *)(a4 + 16), v41, v46);
      v19 = v123;
      v24 = v120;
      LODWORD(v20) = v118;
      if (*(_BYTE *)(a4 + 48))
      {
        v55 = 0;
        result = v122;
        v56 = v37->u16[v122];
        v57 = (v56 >> 4) + 5;
        v58 = (v122 - 1);
        if (a8 >= 4 && a8 != 15)
        {
          v59 = vdupq_n_s64((char)v120);
          v55 = v58 & 0xFFFFFFF8;
          v60 = (int64x2_t)xmmword_208F30F00;
          v61 = (int64x2_t)xmmword_208F30F10;
          v62 = (int64x2_t)xmmword_208F08AD0;
          v63 = (int64x2_t)xmmword_208F05120;
          v64 = (uint32x4_t)vnegq_s32(vdupq_n_s32(v57));
          v65.i64[0] = 0x800000008000;
          v65.i64[1] = 0x800000008000;
          v66 = vdupq_n_s64(8uLL);
          v67 = v55;
          v68 = v37;
          do
          {
            *v68 = vaddq_s16(*v68, (int16x8_t)vbslq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v59, v63), (int32x4_t)vcgtq_s64(v59, v62)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_s64(v59, v61), (int32x4_t)vcgtq_s64(v59, v60))), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_s32((int32x4_t)vsubw_u16(v65, *(uint16x4_t *)v68->i8), (int32x4_t)v64), (int16x8_t)vshlq_s32((int32x4_t)vsubw_high_u16(v65, *(uint16x8_t *)v68), (int32x4_t)v64)), (int8x16_t)vnegq_s16(vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v68->i8), v64),
                                                 (int16x8_t)vshlq_u32(vmovl_high_u16(*(uint16x8_t *)v68), v64)))));
            ++v68;
            v61 = vaddq_s64(v61, v66);
            v62 = vaddq_s64(v62, v66);
            v63 = vaddq_s64(v63, v66);
            v60 = vaddq_s64(v60, v66);
            v67 -= 8;
          }
          while (v67);
        }
        do
        {
          v69 = v37->u16[v55];
          v70 = v69 - (v69 >> v57);
          v71 = v69 + ((int)(0x8000 - v69) >> v57);
          if (v55 >= (char)v120)
            LOWORD(v71) = v70;
          v37->i16[v55++] = v71;
        }
        while (v58 != v55);
        v72 = v37->u16[v122];
        if (v56 < 0x20)
          ++v72;
        v37->i16[v122] = v72;
      }
    }
  }
LABEL_62:
  v73 = v19 >> 2;
  switch(v24)
  {
    case 0u:
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
      v79 = a6;
      goto LABEL_70;
    case 1u:
      v80 = v20;
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      v79 = v80 + a6;
      v19 = v123;
      if (v80 + (int)a6 < *v8)
        goto LABEL_65;
      goto LABEL_77;
    case 2u:
      v82 = v20;
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      v81 = v82 + a7;
      v19 = v123;
      if (v82 + (int)a7 < v8[1])
        goto LABEL_73;
      goto LABEL_77;
    case 3u:
      v83 = v20;
      write_modes_sb_0(v18, a2, a3, a4, a5, a6, a7, v119);
      v117 = v83 + a7;
      write_modes_sb_0(v18, a2, a3, a4, a5, a6, (v83 + a7), v119);
      v84 = (v83 + a6);
      write_modes_sb_0(v18, a2, a3, a4, a5, v84, a7, v119);
      result = write_modes_sb_0(v18, a2, a3, a4, a5, v84, v117, v119);
      goto LABEL_76;
    case 4u:
      v85 = v20;
      write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      write_modes_b_0(v18, a2, a3, a4, a5, a6, v85 + a7);
      v79 = v85 + a6;
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
LABEL_70:
      v81 = a7;
      goto LABEL_75;
    case 5u:
      v86 = v20;
      write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      write_modes_b_0(v18, a2, a3, a4, a5, v86 + a6, a7);
      v81 = v86 + a7;
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
      v79 = v86 + a6;
      goto LABEL_75;
    case 6u:
      v87 = v20;
      write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      write_modes_b_0(v18, a2, a3, a4, a5, v87 + a6, a7);
      v81 = v87 + a7;
      goto LABEL_73;
    case 7u:
      v88 = v20;
      write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      write_modes_b_0(v18, a2, a3, a4, a5, a6, v88 + a7);
      v79 = v88 + a6;
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
      v81 = v88 + a7;
      goto LABEL_75;
    case 8u:
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      v19 = v123;
      if ((int)(v73 + a6) >= *v8)
        goto LABEL_77;
      result = write_modes_b_0(v18, a2, a3, a4, a5, v73 + a6, a7);
      v19 = v123;
      v91 = a6 + 2 * v73;
      if (v91 >= *v8)
        goto LABEL_77;
      result = write_modes_b_0(v18, a2, a3, a4, a5, v91, a7);
      v19 = v123;
      v79 = 3 * v73 + a6;
      if (v79 >= *v8)
        goto LABEL_77;
LABEL_65:
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
      v81 = a7;
      goto LABEL_75;
    case 9u:
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, a7);
      v19 = v123;
      if ((int)(v73 + a7) >= v8[1])
        goto LABEL_77;
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, v73 + a7);
      v19 = v123;
      v92 = a7 + 2 * v73;
      if (v92 >= v8[1])
        goto LABEL_77;
      result = write_modes_b_0(v18, a2, a3, a4, a5, a6, v92);
      v19 = v123;
      v81 = 3 * v73 + a7;
      if (v81 >= v8[1])
        goto LABEL_77;
LABEL_73:
      v74 = v18;
      v75 = a2;
      v76 = a3;
      v77 = a4;
      v78 = a5;
      v79 = a6;
LABEL_75:
      result = write_modes_b_0(v74, v75, v76, v77, v78, v79, v81);
LABEL_76:
      v19 = v123;
LABEL_77:
      while (2)
      {
        if (a8 >= 3)
        {
          v89 = 255;
          v90 = 1u;
          switch(a8)
          {
            case 3u:
              goto LABEL_91;
            case 4u:
            case 5u:
            case 7u:
            case 8u:
            case 0xAu:
            case 0xBu:
            case 0xDu:
            case 0xEu:
              goto LABEL_92;
            case 6u:
              v90 = 2u;
              goto LABEL_91;
            case 9u:
              v90 = 3u;
              goto LABEL_91;
            case 0xCu:
              v90 = 4u;
              goto LABEL_91;
            case 0xFu:
              v90 = 5u;
LABEL_91:
              v89 = *((unsigned __int8 *)&subsize_lookup_0 + v90 + 18);
LABEL_92:
              if (v120 <= 9)
                goto LABEL_93;
              return result;
            default:
              if (v120 > 9)
                return result;
LABEL_93:
              v93 = v19 >> 1;
              switch(v24)
              {
                case 0u:
                case 1u:
                case 2u:
                case 8u:
                case 9u:
                  goto LABEL_94;
                case 3u:
                  if (a8 != 3)
                    return result;
LABEL_94:
                  v94 = (void *)(*(_QWORD *)(a2 + 8504) + (int)a7);
                  v95 = (void *)(a2 + 8512 + (a6 & 0x1F));
                  v96 = mi_size_high_4[v121];
                  v97 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v119;
                  memset(v94, *v97, v19);
                  return (uint64_t)memset(v95, v97[1], v96);
                case 4u:
                  v98 = mi_size_wide_5[v119];
                  v99 = mi_size_high_4[v119];
                  v100 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v89;
                  memset((void *)(*(_QWORD *)(a2 + 8504) + (int)a7), *v100, v98);
                  memset((void *)(a2 + 8512 + (a6 & 0x1F)), v100[1], v99);
                  v101 = (void *)(*(_QWORD *)(a2 + 8504) + (int)a7);
                  v102 = (void *)(a2 + 8512 + (((_BYTE)v93 + (_BYTE)a6) & 0x1F));
                  v103 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v119;
                  goto LABEL_99;
                case 5u:
                  v98 = mi_size_wide_5[v119];
                  v99 = mi_size_high_4[v119];
                  v104 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v119;
                  memset((void *)(*(_QWORD *)(a2 + 8504) + (int)a7), *v104, v98);
                  memset((void *)(a2 + 8512 + (a6 & 0x1F)), v104[1], v99);
                  v101 = (void *)(*(_QWORD *)(a2 + 8504) + (int)a7);
                  v102 = (void *)(a2 + 8512 + (((_BYTE)v93 + (_BYTE)a6) & 0x1F));
                  v103 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v89;
LABEL_99:
                  memset(v101, *v103, v98);
                  return (uint64_t)memset(v102, v103[1], v99);
                case 6u:
                  v105 = (int)a7;
                  v106 = (void *)(*(_QWORD *)(a2 + 8504) + (int)a7);
                  v107 = (void *)(a2 + 8512 + (a6 & 0x1F));
                  v108 = mi_size_wide_5[v119];
                  v109 = mi_size_high_4[v119];
                  v110 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v89;
                  memset(v106, *v110, v108);
                  memset(v107, v110[1], v109);
                  v111 = (void *)(*(_QWORD *)(a2 + 8504) + v105 + v93);
                  v112 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v119;
                  goto LABEL_102;
                case 7u:
                  v113 = (int)a7;
                  v114 = (void *)(*(_QWORD *)(a2 + 8504) + (int)a7);
                  v107 = (void *)(a2 + 8512 + (a6 & 0x1F));
                  v108 = mi_size_wide_5[v119];
                  v109 = mi_size_high_4[v119];
                  v115 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v119;
                  memset(v114, *v115, v108);
                  memset(v107, v115[1], v109);
                  v111 = (void *)(*(_QWORD *)(a2 + 8504) + v113 + v93);
                  v112 = (unsigned __int8 *)&partition_context_lookup_0 + 2 * v89;
LABEL_102:
                  memset(v111, *v112, v108);
                  result = (uint64_t)memset(v107, v112[1], v109);
                  break;
                default:
                  continue;
              }
              break;
          }
        }
        break;
      }
      break;
    default:
      goto LABEL_77;
  }
  return result;
}

