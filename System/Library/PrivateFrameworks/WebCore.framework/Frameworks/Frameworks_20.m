uint64_t vp9_encode_mv(uint64_t a1, uint64_t a2, __int16 *a3, unsigned __int16 *a4, uint64_t a5, int a6, unsigned int *a7)
{
  char v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  __int16 v18;
  int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t result;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;

  v12 = 0;
  v13 = (unsigned __int16)*a3;
  v14 = *a4;
  LOWORD(v15) = *a4;
  v16 = (unsigned __int16)a3[1];
  v17 = a4[1];
  v18 = v16 - v17;
  if (v16 == v17)
    v19 = 2;
  else
    v19 = 3;
  if (v13 == v14)
    v20 = v16 != v17;
  else
    v20 = v19;
  if ((v14 & 0x8000u) != 0)
    v15 = -(__int16)v14;
  if ((v17 & 0x8000u) != 0)
    v17 = -(__int16)v17;
  v21 = (unsigned __int16)v17 < 0x40u;
  v22 = (unsigned __int16)v15 <= 0x3Fu && v21;
  if (a6)
    v23 = v22;
  else
    v23 = 0;
  v24 = (unsigned int *)((char *)&mv_joint_encodings + 8 * v20);
  v25 = *v24;
  v26 = v24[1];
  v29 = a2 + 4;
  v27 = *(_DWORD *)(a2 + 4);
  v28 = *(_DWORD *)(v29 + 4);
  v30 = *(_DWORD *)a2;
  do
  {
    --v26;
    v32 = ((v27 - 1) * *(unsigned __int8 *)(a5 + (v12 >> 1))) >> 8;
    v33 = v27 - (v32 + 1);
    result = (v25 >> v26) & 1;
    if (((v25 >> v26) & 1) == 0)
      v33 = v32 + 1;
    v31 = (((int)(v25 >> v26 << 31) >> 31) & (v32 + 1)) + v30;
    v35 = vpx_norm[v33];
    v36 = v28 + v35;
    if (v28 + v35 >= 0)
    {
      if (!*(_DWORD *)(a2 + 12))
      {
        LODWORD(v37) = *(_DWORD *)(a2 + 16);
        if (((v31 << ~(_BYTE)v28) & 0x80000000) != 0)
        {
          v38 = v37 - 1;
          if ((int)v37 >= 1)
          {
            while (1)
            {
              v37 = (v37 - 1);
              v39 = *(_QWORD *)(a2 + 24);
              if (*(unsigned __int8 *)(v39 + v37) != 255)
                break;
              *(_BYTE *)(v39 + v37) = 0;
              if ((int)v37 <= 0)
              {
                v38 = -1;
                goto LABEL_34;
              }
            }
            v38 = v37;
          }
LABEL_34:
          ++*(_BYTE *)(*(_QWORD *)(a2 + 24) + v38);
          LODWORD(v37) = *(_DWORD *)(a2 + 16);
          if (v37 < *(_DWORD *)(a2 + 20))
            goto LABEL_35;
        }
        else if (v37 < *(_DWORD *)(a2 + 20))
        {
LABEL_35:
          v40 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)(a2 + 16) = v37 + 1;
          *(_BYTE *)(v40 + v37) = v31 >> (v28 + 24);
          goto LABEL_19;
        }
        *(_DWORD *)(a2 + 12) = 1;
      }
LABEL_19:
      v31 = (v31 << -(char)v28) & 0xFFFFFF;
      v28 = v36 - 8;
      goto LABEL_20;
    }
    v28 += v35;
    LOBYTE(v36) = vpx_norm[v33];
LABEL_20:
    v27 = v33 << v35;
    v30 = v31 << v36;
    *(_DWORD *)(a2 + 4) = v27;
    *(_DWORD *)(a2 + 8) = v28;
    *(_DWORD *)a2 = v30;
    v12 = vp9_mv_joint_tree[(int)result + v12];
  }
  while (v26);
  if (v13 == v14)
  {
    if (!v20)
      goto LABEL_38;
LABEL_50:
    result = encode_mv_component(a2, v18, (unsigned __int8 *)(a5 + 36), v23);
    if (!*(_DWORD *)(a1 + 739536))
      return result;
LABEL_39:
    v41 = *a3;
    if (v41 < 0)
      v41 = -v41;
    v41 = (unsigned __int16)v41;
    v42 = a3[1];
    if (v42 < 0)
      v42 = -v42;
    if ((unsigned __int16)v41 <= (unsigned __int16)v42)
      v41 = (unsigned __int16)v42;
    v43 = v41 >> 3;
    if (*a7 > v43)
      v43 = *a7;
    *a7 = v43;
    return result;
  }
  result = encode_mv_component(a2, (__int16)(v13 - v14), (unsigned __int8 *)(a5 + 3), v23);
  if (v20)
    goto LABEL_50;
LABEL_38:
  if (*(_DWORD *)(a1 + 739536))
    goto LABEL_39;
  return result;
}

uint64_t encode_mv_component(uint64_t result, int a2, unsigned __int8 *a3, int a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;

  if (a2 >= 0)
    v4 = a2;
  else
    v4 = -a2;
  v5 = v4 - 1;
  if (v4 <= 0x2000)
    v6 = log_in_base_2[v5 >> 3];
  else
    v6 = 10;
  v7 = -8 << v6;
  if (!v6)
    v7 = 0;
  v8 = v7 + v5;
  v10 = *(_DWORD *)(result + 4);
  v9 = *(_DWORD *)(result + 8);
  v11 = ((v10 - 1) * *a3) >> 8;
  v12 = v10 - (v11 + 1);
  if (a2 >= 0)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (a2 < 0)
    v14 = v11 + 1;
  else
    v14 = 0;
  v15 = v14 + *(_DWORD *)result;
  v16 = vpx_norm[v13];
  v17 = v9 + v16;
  if (v9 + v16 >= 0)
  {
    if (*(_DWORD *)(result + 12))
    {
LABEL_28:
      v15 = (v15 << -(char)v9) & 0xFFFFFF;
      v20 = v17 - 8;
      goto LABEL_29;
    }
    if (((v15 << ~(_BYTE)v9) & 0x80000000) != 0)
    {
      LODWORD(v21) = *(_DWORD *)(result + 16);
      v22 = v21 - 1;
      if ((int)v21 >= 1)
      {
        while (1)
        {
          v21 = (v21 - 1);
          v23 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v23 + v21) != 255)
            break;
          *(_BYTE *)(v23 + v21) = 0;
          if ((int)v21 <= 0)
          {
            v22 = -1;
            goto LABEL_26;
          }
        }
        v22 = v21;
      }
LABEL_26:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v22);
      v18 = *(unsigned int *)(result + 16);
      if (v18 < *(_DWORD *)(result + 20))
        goto LABEL_19;
    }
    else
    {
      v18 = *(unsigned int *)(result + 16);
      if (v18 < *(_DWORD *)(result + 20))
      {
LABEL_19:
        v19 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v18 + 1;
        *(_BYTE *)(v19 + v18) = v15 >> (v9 + 24);
        goto LABEL_28;
      }
    }
    *(_DWORD *)(result + 12) = 1;
    goto LABEL_28;
  }
  v20 = v9 + v16;
  LOBYTE(v17) = vpx_norm[v13];
LABEL_29:
  v24 = 0;
  v25 = v8 >> 3;
  v26 = v13 << v16;
  v27 = v15 << v17;
  *(_DWORD *)(result + 4) = v26;
  *(_DWORD *)(result + 8) = v20;
  *(_DWORD *)result = v27;
  v28 = (unsigned int *)((char *)&mv_class_encodings + 8 * v6);
  v29 = *v28;
  v30 = v28[1];
  do
  {
    --v30;
    v32 = ((v26 - 1) * a3[(v24 >> 1) + 1]) >> 8;
    v33 = v26 - (v32 + 1);
    if (((v29 >> v30) & 1) == 0)
      v33 = v32 + 1;
    v31 = (((int)(v29 >> v30 << 31) >> 31) & (v32 + 1)) + v27;
    v34 = vpx_norm[v33];
    v35 = v20 + v34;
    if (v20 + v34 >= 0)
    {
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v36) = *(_DWORD *)(result + 16);
        if (((v31 << ~(_BYTE)v20) & 0x80000000) != 0)
        {
          v37 = v36 - 1;
          if ((int)v36 >= 1)
          {
            while (1)
            {
              v36 = (v36 - 1);
              v38 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v38 + v36) != 255)
                break;
              *(_BYTE *)(v38 + v36) = 0;
              if ((int)v36 <= 0)
              {
                v37 = -1;
                goto LABEL_46;
              }
            }
            v37 = v36;
          }
LABEL_46:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v37);
          LODWORD(v36) = *(_DWORD *)(result + 16);
          if (v36 < *(_DWORD *)(result + 20))
            goto LABEL_47;
        }
        else if (v36 < *(_DWORD *)(result + 20))
        {
LABEL_47:
          v39 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v36 + 1;
          *(_BYTE *)(v39 + v36) = v31 >> (v20 + 24);
          goto LABEL_31;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_31:
      v31 = (v31 << -(char)v20) & 0xFFFFFF;
      v20 = v35 - 8;
      goto LABEL_32;
    }
    v20 += v34;
    LOBYTE(v35) = vpx_norm[v33];
LABEL_32:
    v26 = v33 << v34;
    v27 = v31 << v35;
    *(_DWORD *)(result + 4) = v26;
    *(_DWORD *)(result + 8) = v20;
    *(_DWORD *)result = v27;
    v24 = vp9_mv_class_tree[((v29 >> v30) & 1) + v24];
  }
  while (v30);
  if (v6)
  {
    v40 = 0;
    while (1)
    {
      v42 = ((v26 - 1) * a3[v40 + 12]) >> 8;
      v43 = v26 - (v42 + 1);
      if (((1 << v40) & v25) != 0)
      {
        v44 = v42 + 1;
      }
      else
      {
        v43 = v42 + 1;
        v44 = 0;
      }
      v41 = v44 + v27;
      v45 = vpx_norm[v43];
      v46 = v20 + v45;
      if (v20 + v45 < 0)
      {
        v20 += v45;
        LOBYTE(v46) = vpx_norm[v43];
        goto LABEL_52;
      }
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v47) = *(_DWORD *)(result + 16);
        if (((v41 << ~(_BYTE)v20) & 0x80000000) != 0)
        {
          v48 = v47 - 1;
          if ((int)v47 >= 1)
          {
            while (1)
            {
              v47 = (v47 - 1);
              v49 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v49 + v47) != 255)
                break;
              *(_BYTE *)(v49 + v47) = 0;
              if ((int)v47 <= 0)
              {
                v48 = -1;
                goto LABEL_67;
              }
            }
            v48 = v47;
          }
LABEL_67:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v48);
          LODWORD(v47) = *(_DWORD *)(result + 16);
          if (v47 < *(_DWORD *)(result + 20))
          {
LABEL_68:
            v50 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v47 + 1;
            *(_BYTE *)(v50 + v47) = v41 >> (v20 + 24);
            goto LABEL_51;
          }
        }
        else if (v47 < *(_DWORD *)(result + 20))
        {
          goto LABEL_68;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_51:
      v41 = (v41 << -(char)v20) & 0xFFFFFF;
      v20 = v46 - 8;
LABEL_52:
      v26 = v43 << v45;
      v27 = v41 << v46;
      *(_DWORD *)(result + 4) = v26;
      *(_DWORD *)(result + 8) = v20;
      *(_DWORD *)result = v27;
      if (++v40 == v6)
        goto LABEL_90;
    }
  }
  v51 = ((v26 - 1) * a3[11]) >> 8;
  v52 = v26 - (v51 + 1);
  v53 = v8 >= 8;
  if (v8 < 8)
    v54 = v51 + 1;
  else
    v54 = v52;
  if (v53)
    v55 = v51 + 1;
  else
    v55 = 0;
  v56 = v55 + v27;
  v57 = vpx_norm[v54];
  v58 = v20 + v57;
  if (v20 + v57 < 0)
  {
    v20 += v57;
    LOBYTE(v58) = vpx_norm[v54];
  }
  else
  {
    if (!*(_DWORD *)(result + 12))
    {
      LODWORD(v59) = *(_DWORD *)(result + 16);
      if (((v56 << ~(_BYTE)v20) & 0x80000000) != 0)
      {
        v61 = v59 - 1;
        if ((int)v59 >= 1)
        {
          while (1)
          {
            v59 = (v59 - 1);
            v62 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v62 + v59) != 255)
              break;
            *(_BYTE *)(v62 + v59) = 0;
            if ((int)v59 <= 0)
            {
              v61 = -1;
              goto LABEL_86;
            }
          }
          v61 = v59;
        }
LABEL_86:
        ++*(_BYTE *)(*(_QWORD *)(result + 24) + v61);
        LODWORD(v59) = *(_DWORD *)(result + 16);
        if (v59 >= *(_DWORD *)(result + 20))
          goto LABEL_87;
LABEL_79:
        v60 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v59 + 1;
        *(_BYTE *)(v60 + v59) = v56 >> (v20 + 24);
      }
      else
      {
        if (v59 < *(_DWORD *)(result + 20))
          goto LABEL_79;
LABEL_87:
        *(_DWORD *)(result + 12) = 1;
      }
    }
    v56 = (v56 << -(char)v20) & 0xFFFFFF;
    v20 = v58 - 8;
  }
  v26 = v54 << v57;
  *(_DWORD *)(result + 4) = v26;
  *(_DWORD *)(result + 8) = v20;
  v27 = v56 << v58;
  *(_DWORD *)result = v27;
LABEL_90:
  v63 = 0;
  v64 = (uint64_t)&a3[3 * v25 + 22];
  if (v6)
    v64 = (uint64_t)(a3 + 28);
  v65 = (unsigned int *)((char *)&mv_fp_encodings + 8 * ((v5 >> 1) & 3));
  v66 = *v65;
  v67 = v65[1];
  while (2)
  {
    --v67;
    v69 = ((v26 - 1) * *(unsigned __int8 *)(v64 + (v63 >> 1))) >> 8;
    v70 = v26 - (v69 + 1);
    if (((v66 >> v67) & 1) == 0)
      v70 = v69 + 1;
    v68 = (((int)(v66 >> v67 << 31) >> 31) & (v69 + 1)) + v27;
    v71 = vpx_norm[v70];
    v72 = v20 + v71;
    if (v20 + v71 < 0)
    {
      v20 += v71;
      LOBYTE(v72) = vpx_norm[v70];
    }
    else
    {
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v73) = *(_DWORD *)(result + 16);
        if (((v68 << ~(_BYTE)v20) & 0x80000000) != 0)
        {
          v74 = v73 - 1;
          if ((int)v73 >= 1)
          {
            while (1)
            {
              v73 = (v73 - 1);
              v75 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v75 + v73) != 255)
                break;
              *(_BYTE *)(v75 + v73) = 0;
              if ((int)v73 <= 0)
              {
                v74 = -1;
                goto LABEL_109;
              }
            }
            v74 = v73;
          }
LABEL_109:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v74);
          LODWORD(v73) = *(_DWORD *)(result + 16);
          if (v73 >= *(_DWORD *)(result + 20))
            goto LABEL_93;
LABEL_110:
          v76 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v73 + 1;
          *(_BYTE *)(v76 + v73) = v68 >> (v20 + 24);
        }
        else
        {
          if (v73 < *(_DWORD *)(result + 20))
            goto LABEL_110;
LABEL_93:
          *(_DWORD *)(result + 12) = 1;
        }
      }
      v68 = (v68 << -(char)v20) & 0xFFFFFF;
      v20 = v72 - 8;
    }
    v26 = v70 << v71;
    v27 = v68 << v72;
    *(_DWORD *)(result + 4) = v26;
    *(_DWORD *)(result + 8) = v20;
    *(_DWORD *)result = v27;
    v63 = vp9_mv_fp_tree[((v66 >> v67) & 1) + v63];
    if (v67)
      continue;
    break;
  }
  if (a4)
  {
    v77 = v6 == 0;
    v78 = 31;
    if (!v77)
      v78 = 32;
    v79 = ((v26 - 1) * a3[v78]) >> 8;
    v80 = v5 << 31 >> 31;
    if ((v5 & 1) != 0)
      v81 = v26 - (v79 + 1);
    else
      v81 = v79 + 1;
    v82 = (v80 & (v79 + 1)) + v27;
    v83 = vpx_norm[v81];
    v84 = v20 + v83;
    if (v20 + v83 < 0)
    {
      v87 = v20 + v83;
      LOBYTE(v84) = vpx_norm[v81];
    }
    else
    {
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v85) = *(_DWORD *)(result + 16);
        if (((v82 << ~(_BYTE)v20) & 0x80000000) != 0)
        {
          v88 = v85 - 1;
          if ((int)v85 >= 1)
          {
            while (1)
            {
              v85 = (v85 - 1);
              v89 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v89 + v85) != 255)
                break;
              *(_BYTE *)(v89 + v85) = 0;
              if ((int)v85 <= 0)
              {
                v88 = -1;
                goto LABEL_128;
              }
            }
            v88 = v85;
          }
LABEL_128:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v88);
          LODWORD(v85) = *(_DWORD *)(result + 16);
          if (v85 >= *(_DWORD *)(result + 20))
            goto LABEL_129;
LABEL_121:
          v86 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v85 + 1;
          *(_BYTE *)(v86 + v85) = v82 >> (v20 + 24);
        }
        else
        {
          if (v85 < *(_DWORD *)(result + 20))
            goto LABEL_121;
LABEL_129:
          *(_DWORD *)(result + 12) = 1;
        }
      }
      v82 = (v82 << -(char)v20) & 0xFFFFFF;
      v87 = v84 - 8;
    }
    *(_DWORD *)(result + 4) = v81 << v83;
    *(_DWORD *)(result + 8) = v87;
    *(_DWORD *)result = v82 << v84;
  }
  return result;
}

uint64_t build_nmv_component_cost_table(_DWORD *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t result;
  int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  _DWORD *v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  int v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  unsigned int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  _DWORD v145[20];
  int v146;
  int v147;
  _DWORD v148[11];
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v7 = vp9_prob_cost[v6];
  v8 = vp9_prob_cost[256 - v6];
  cost_0((uint64_t)v148, (uint64_t)vp9_mv_class_tree, (uint64_t)(a2 + 1), 0, 0);
  cost_0((uint64_t)&v146, (uint64_t)&vp9_mv_class0_tree, (uint64_t)(a2 + 11), 0, 0);
  v9 = a2[12];
  v10 = vp9_prob_cost[v9];
  LODWORD(v9) = vp9_prob_cost[256 - v9];
  v145[0] = v10;
  v145[1] = v9;
  v11 = a2[13];
  v12 = vp9_prob_cost[v11];
  LODWORD(v11) = vp9_prob_cost[256 - v11];
  v13 = a2[14];
  v14 = vp9_prob_cost[v13];
  LODWORD(v13) = vp9_prob_cost[256 - v13];
  v145[2] = v12;
  v145[3] = v11;
  v145[4] = v14;
  v145[5] = v13;
  v15 = a2[15];
  v16 = vp9_prob_cost[v15];
  LODWORD(v15) = vp9_prob_cost[256 - v15];
  v145[6] = v16;
  v145[7] = v15;
  v17 = a2[16];
  v18 = vp9_prob_cost[v17];
  LODWORD(v17) = vp9_prob_cost[256 - v17];
  v19 = a2[17];
  v20 = vp9_prob_cost[v19];
  LODWORD(v19) = vp9_prob_cost[256 - v19];
  v145[8] = v18;
  v145[9] = v17;
  v145[10] = v20;
  v145[11] = v19;
  v21 = a2[18];
  v22 = vp9_prob_cost[v21];
  LODWORD(v21) = vp9_prob_cost[256 - v21];
  v145[12] = v22;
  v145[13] = v21;
  v23 = a2[19];
  v24 = vp9_prob_cost[v23];
  LODWORD(v23) = vp9_prob_cost[256 - v23];
  v25 = a2[20];
  v26 = vp9_prob_cost[v25];
  LODWORD(v25) = vp9_prob_cost[256 - v25];
  v145[14] = v24;
  v145[15] = v23;
  v145[16] = v26;
  v145[17] = v25;
  v27 = a2[21];
  v28 = vp9_prob_cost[v27];
  LODWORD(v27) = vp9_prob_cost[256 - v27];
  v145[18] = v28;
  v145[19] = v27;
  cost_0((uint64_t)&v137, (uint64_t)vp9_mv_fp_tree, (uint64_t)(a2 + 22), 0, 0);
  cost_0((uint64_t)&v141, (uint64_t)vp9_mv_fp_tree, (uint64_t)(a2 + 25), 0, 0);
  cost_0((uint64_t)&v133, (uint64_t)vp9_mv_fp_tree, (uint64_t)(a2 + 28), 0, 0);
  v29 = a2[31];
  v30 = vp9_prob_cost[v29];
  v31 = vp9_prob_cost[256 - v29];
  v32 = a2[32];
  v33 = vp9_prob_cost[v32];
  v34 = vp9_prob_cost[256 - v32];
  *a1 = 0;
  v35 = v148[0];
  if (a3)
  {
    v36 = v147;
    v37 = v146 + v148[0];
    v38 = v138;
    v39 = v146 + v148[0] + v137;
    v40 = v39 + v30 + v7;
    v41 = v39 + v30 + v8;
    v42 = v39 + v31;
    a1[1] = v40;
    a1[2] = v42 + v7;
    *(a1 - 2) = v42 + v8;
    *(a1 - 1) = v41;
    v43 = v38 + v37;
    v44 = v38 + v37 + v30;
    v45 = v43 + v31;
    a1[3] = v44 + v7;
    a1[4] = v45 + v7;
    *(a1 - 4) = v45 + v8;
    *(a1 - 3) = v44 + v8;
    v46 = v140;
    v47 = v139 + v37 + v30;
    v48 = v139 + v37 + v31;
    a1[5] = v47 + v7;
    a1[6] = v48 + v7;
    *(a1 - 6) = v48 + v8;
    *(a1 - 5) = v47 + v8;
    v49 = v46 + v37;
    v50 = v49 + v30 + v7;
    v51 = v49 + v30 + v8;
    v52 = v49 + v31;
    a1[7] = v50;
    a1[8] = v52 + v7;
    *(a1 - 8) = v52 + v8;
    *(a1 - 7) = v51;
    v53 = v36 + v35;
    v54 = v142;
    v55 = v53 + v141 + v30;
    v56 = v53 + v141 + v31;
    a1[9] = v55 + v7;
    a1[10] = v56 + v7;
    *(a1 - 10) = v56 + v8;
    *(a1 - 9) = v55 + v8;
    v57 = v54 + v53;
    v58 = v54 + v53 + v30;
    v59 = v57 + v31;
    a1[11] = v58 + v7;
    a1[12] = v59 + v7;
    *(a1 - 12) = v59 + v8;
    *(a1 - 11) = v58 + v8;
    v60 = v144;
    v61 = v143 + v53 + v30;
    v62 = v143 + v53 + v31;
    a1[13] = v61 + v7;
    a1[14] = v62 + v7;
    *(a1 - 14) = v62 + v8;
    *(a1 - 13) = v61 + v8;
    v63 = v60 + v53;
    v64 = v63 + v30;
    v65 = v63 + v31;
    a1[15] = v64 + v7;
    a1[16] = v65 + v7;
    *(a1 - 16) = v65 + v8;
    *(a1 - 15) = v64 + v8;
    v66 = v133;
    v67 = v134;
    v68 = 1;
    v70 = v135;
    result = v136;
    do
    {
      v71 = 0;
      v72 = v148[v68];
      do
      {
        v73 = 0;
        v74 = v145;
        v75 = v72;
        do
        {
          v75 += v74[(v71 >> v73++) & 1];
          v74 += 2;
        }
        while (v68 != v73);
        v76 = (8 << v68) + 8 * v71;
        v77 = (4 * v76) | 4;
        *(_DWORD *)((char *)a1 + v77) = v75 + v66 + v33 + v7;
        *(_DWORD *)((char *)a1 - v77) = v75 + v66 + v33 + v8;
        v78 = v76 | 2;
        if (v78 < 0x4000)
        {
          v79 = v75 + v66 + v34;
          a1[v78] = v79 + v7;
          a1[v76 ^ 0xFFFFFFFE] = v79 + v8;
          a1[v76 | 3] = v75 + v67 + v33 + v7;
          a1[-(v76 | 3)] = v75 + v67 + v33 + v8;
          if ((v76 | 4) < 0x4000)
          {
            v80 = v75 + v67 + v34;
            a1[v76 | 4] = v80 + v7;
            a1[v76 ^ 0x3FFFFFFFFFFFFFFCLL] = v80 + v8;
            a1[v76 | 5] = v75 + v70 + v33 + v7;
            a1[-(v76 | 5)] = v75 + v70 + v33 + v8;
            if ((v76 | 6) < 0x4000)
            {
              v81 = v75 + v70 + v34;
              a1[v76 | 6] = v81 + v7;
              a1[v76 ^ 0x3FFFFFFFFFFFFFFALL] = v81 + v8;
              v82 = v75 + result;
              a1[v76 | 7] = v82 + v33 + v7;
              a1[-(v76 | 7)] = v82 + v33 + v8;
              if (v76 <= 16375)
              {
                v83 = v82 + v34;
                a1[v76 + 8] = v83 + v7;
                a1[v76 ^ 0x3FFFFFFFFFFFFFF8] = v83 + v8;
              }
            }
          }
        }
        ++v71;
      }
      while (!(v71 >> v68));
      ++v68;
    }
    while (v68 != 11);
  }
  else
  {
    v84 = v147;
    v85 = v146 + v148[0];
    v86 = v138;
    v87 = v146 + v148[0] + v137;
    v88 = v87 + v7;
    v89 = v87 + v8;
    a1[1] = v88;
    a1[2] = v88;
    *(a1 - 2) = v89;
    *(a1 - 1) = v89;
    v90 = v86 + v85;
    v91 = v86 + v85 + v7;
    v92 = v90 + v8;
    a1[3] = v91;
    a1[4] = v91;
    *(a1 - 4) = v92;
    *(a1 - 3) = v92;
    v93 = v140;
    v94 = v139 + v85 + v7;
    v95 = v139 + v85 + v8;
    a1[5] = v94;
    a1[6] = v94;
    *(a1 - 6) = v95;
    *(a1 - 5) = v95;
    v96 = v93 + v85;
    v97 = v96 + v7;
    v98 = v96 + v8;
    a1[7] = v97;
    a1[8] = v97;
    *(a1 - 8) = v98;
    *(a1 - 7) = v98;
    v99 = v84 + v35;
    v100 = v142;
    v101 = v99 + v141 + v7;
    v102 = v99 + v141 + v8;
    a1[9] = v101;
    a1[10] = v101;
    *(a1 - 10) = v102;
    *(a1 - 9) = v102;
    v103 = v100 + v99;
    v104 = v100 + v99 + v7;
    v105 = v103 + v8;
    a1[11] = v104;
    a1[12] = v104;
    *(a1 - 12) = v105;
    *(a1 - 11) = v105;
    v106 = v144;
    v107 = v143 + v99 + v7;
    v108 = v143 + v99 + v8;
    a1[13] = v107;
    a1[14] = v107;
    *(a1 - 14) = v108;
    *(a1 - 13) = v108;
    v109 = v106 + v99;
    v110 = v109 + v7;
    v111 = v109 + v8;
    a1[15] = v110;
    a1[16] = v110;
    *(a1 - 16) = v111;
    *(a1 - 15) = v111;
    v112 = v133;
    v113 = v134;
    v114 = 1;
    v115 = v135;
    v116 = v136;
    do
    {
      v117 = 0;
      result = v148[v114];
      do
      {
        v118 = 0;
        v119 = v145;
        v120 = result;
        do
        {
          v120 += v119[(v117 >> v118++) & 1];
          v119 += 2;
        }
        while (v114 != v118);
        v121 = (8 << v114) + 8 * v117;
        v122 = v120 + v112 + v7;
        v123 = (4 * v121) | 4;
        *(_DWORD *)((char *)a1 + v123) = v122;
        v124 = v120 + v112 + v8;
        *(_DWORD *)((char *)a1 - v123) = v124;
        v125 = v121 | 2;
        if (v125 < 0x4000)
        {
          a1[v125] = v122;
          a1[v121 ^ 0xFFFFFFFE] = v124;
          v126 = v120 + v113 + v7;
          a1[v121 | 3] = v126;
          v127 = v120 + v113 + v8;
          a1[-(v121 | 3)] = v127;
          if ((v121 | 4) < 0x4000)
          {
            a1[v121 | 4] = v126;
            a1[v121 ^ 0x3FFFFFFFFFFFFFFCLL] = v127;
            v128 = v120 + v115 + v7;
            a1[v121 | 5] = v128;
            v129 = v120 + v115 + v8;
            a1[-(v121 | 5)] = v129;
            if ((v121 | 6) < 0x4000)
            {
              a1[v121 | 6] = v128;
              a1[v121 ^ 0x3FFFFFFFFFFFFFFALL] = v129;
              v130 = v120 + v116;
              v131 = v120 + v116 + v7;
              a1[v121 | 7] = v131;
              v132 = v130 + v8;
              a1[-(v121 | 7)] = v132;
              if (v121 <= 16375)
              {
                a1[v121 + 8] = v131;
                a1[v121 ^ 0x3FFFFFFFFFFFFFF8] = v132;
              }
            }
          }
        }
        ++v117;
      }
      while (!(v117 >> v114));
      ++v114;
    }
    while (v114 != 11);
  }
  return result;
}

unint64_t vp9_update_mv_count(unint64_t result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  __int16 v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;

  v1 = **(unsigned __int8 ***)(result + 25360);
  v2 = *(_QWORD *)(result + 25568);
  v3 = *v1;
  if (v3 > 2)
  {
    if (v1[1] == 13)
    {
      v14 = *(_QWORD *)(result + 114248) + 12800;
      v15 = (_WORD *)(v2 + 8 * (char)v1[8]);
      v23 = *((_WORD *)v1 + 6) - *v15;
      v24 = *((_WORD *)v1 + 7) - v15[1];
      result = vp9_inc_mv((unint64_t)&v23, v14);
      if ((char)v1[9] >= 1)
      {
        v16 = (_WORD *)(v2 + 8 * v1[9]);
        v17 = v16[1];
        v23 = *((_WORD *)v1 + 8) - *v16;
        v24 = *((_WORD *)v1 + 9) - v17;
        return vp9_inc_mv((unint64_t)&v23, v14);
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = num_4x4_blocks_wide_lookup[v3];
    v6 = (_QWORD *)(result + 114248);
    v7 = v1 + 30;
    v18 = 24 * num_4x4_blocks_high_lookup[v3];
    v19 = num_4x4_blocks_high_lookup[v3];
    do
    {
      v20 = v4;
      v8 = 0;
      v9 = v7;
      do
      {
        if (*(v9 - 10) == 13)
        {
          v10 = *v6 + 12800;
          v11 = (_WORD *)(v2 + 8 * (char)v1[8]);
          v21 = *((_WORD *)v9 - 3) - *v11;
          v22 = *((_WORD *)v9 - 2) - v11[1];
          result = vp9_inc_mv((unint64_t)&v21, v10);
          if ((char)v1[9] >= 1)
          {
            v12 = (_WORD *)(v2 + 8 * v1[9]);
            v13 = v12[1];
            v21 = *((_WORD *)v9 - 1) - *v12;
            v22 = *(_WORD *)v9 - v13;
            result = vp9_inc_mv((unint64_t)&v21, v10);
          }
        }
        v8 += v5;
        v9 += 12 * v5;
      }
      while (v8 < 2);
      v4 = v20 + v19;
      v7 += v18;
    }
    while ((unint64_t)(v20 + v19) < 2);
  }
  return result;
}

uint64_t vp9_set_roi_map(uint64_t a1, const void *a2, int a3, int a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v21;
  int v24;
  int v26;
  int v28;
  int v30;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t result;
  uint64_t v37;
  void *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  _BYTE *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;

  if (*(_DWORD *)(a1 + 173008) != a3)
    return 8;
  if (*(_DWORD *)(a1 + 173016) != a4)
    return 8;
  v8 = *a5;
  if ((*a5 - 64) < 0xFFFFFF81)
    return 8;
  v9 = a5[1];
  if ((v9 - 64) < 0xFFFFFF81)
    return 8;
  v10 = a5[2];
  if ((v10 - 64) < 0xFFFFFF81)
    return 8;
  v11 = a5[3];
  if ((v11 - 64) < 0xFFFFFF81)
    return 8;
  v12 = a5[4];
  if ((v12 - 64) < 0xFFFFFF81)
    return 8;
  v13 = a5[5];
  if ((v13 - 64) < 0xFFFFFF81)
    return 8;
  v14 = a5[6];
  if ((v14 - 64) < 0xFFFFFF81)
    return 8;
  v15 = a5[7];
  if ((v15 - 64) < 0xFFFFFF81)
    return 8;
  v16 = *a6;
  if ((*a6 - 64) < 0xFFFFFF81)
    return 8;
  v17 = a6[1];
  if ((v17 - 64) < 0xFFFFFF81)
    return 8;
  v18 = a6[2];
  if ((v18 - 64) < 0xFFFFFF81)
    return 8;
  v19 = a6[3];
  if ((v19 - 64) < 0xFFFFFF81)
    return 8;
  v21 = a6[4];
  if ((v21 - 64) < 0xFFFFFF81)
    return 8;
  v24 = a6[5];
  if ((v24 - 64) < 0xFFFFFF81)
    return 8;
  v26 = a6[6];
  if ((v26 - 64) < 0xFFFFFF81)
    return 8;
  v28 = a6[7];
  if ((v28 - 64) < 0xFFFFFF81)
    return 8;
  v30 = *a8;
  if ((*a8 - 4) < 0xFFFFFFF9)
    return 8;
  v32 = a8[1];
  if ((v32 - 4) < 0xFFFFFFF9)
    return 8;
  v33 = a8[2];
  if ((v33 - 4) < 0xFFFFFFF9)
    return 8;
  v34 = a8[3];
  if ((v34 - 4) < 0xFFFFFFF9)
    return 8;
  v35 = a8[4];
  if ((v35 - 4) < 0xFFFFFFF9)
    return 8;
  v53 = a8[5];
  if ((v53 - 4) < 0xFFFFFFF9)
    return 8;
  v52 = a8[6];
  if ((v52 - 4) < 0xFFFFFFF9)
    return 8;
  v51 = a8[7];
  if ((v51 - 4) < 0xFFFFFFF9)
    return 8;
  if ((*a7 - 2) < 0xFFFFFFFD)
    return 8;
  v50 = a7[1];
  if ((v50 - 2) < 0xFFFFFFFD)
    return 8;
  v49 = a7[2];
  if ((v49 - 2) < 0xFFFFFFFD)
    return 8;
  v48 = a7[3];
  if ((v48 - 2) < 0xFFFFFFFD)
    return 8;
  v47 = a7[4];
  if ((v47 - 2) < 0xFFFFFFFD)
    return 8;
  v46 = a7[5];
  if ((v46 - 2) < 0xFFFFFFFD)
    return 8;
  v45 = a7[6];
  if ((v45 - 2) < 0xFFFFFFFD)
    return 8;
  v43 = a7[7];
  if ((v43 - 2) < 0xFFFFFFFD)
    return 8;
  v44 = (_BYTE *)(a1 + 850440);
  if (a2
    && ((v32 & v30 & v33 & v34 & v35 & v53 & v52 & v51) != 0xFFFFFFFF
     || v9 | v8 | v10 | v11 | v12 | v13 | v14 | v15 | v16 | v17 | v18 | v19 | v21 | v24 | v26 | v28 | *a7 | v50 | v49 | v48 | v47 | v46 | v45 | v43))
  {
    v37 = *(_QWORD *)(a1 + 850448);
    if (v37)
    {
      free(*(void **)(v37 - 8));
      *(_QWORD *)(a1 + 850448) = 0;
    }
    v38 = (void *)vpx_malloc((a4 * a3));
    *(_QWORD *)(a1 + 850448) = v38;
    if (v38)
    {
      memcpy(v38, a2, (a4 * a3));
      result = 0;
      v39 = *(_OWORD *)a5;
      *(_OWORD *)(a1 + 850480) = *((_OWORD *)a5 + 1);
      *(_OWORD *)(a1 + 850464) = v39;
      v40 = *((_OWORD *)a6 + 1);
      *(_OWORD *)(a1 + 850496) = *(_OWORD *)a6;
      *(_OWORD *)(a1 + 850512) = v40;
      v41 = *((_OWORD *)a7 + 1);
      *(_OWORD *)(a1 + 850528) = *(_OWORD *)a7;
      *(_OWORD *)(a1 + 850544) = v41;
      v42 = *((_OWORD *)a8 + 1);
      *(_OWORD *)(a1 + 850560) = *(_OWORD *)a8;
      *(_OWORD *)(a1 + 850576) = v42;
      *v44 = 1;
      *(_DWORD *)(a1 + 850456) = a3;
      *(_DWORD *)(a1 + 850460) = a4;
    }
    else
    {
      return 2;
    }
  }
  else
  {
    result = 0;
    *(_WORD *)(a1 + 176472) = 0;
    *(_BYTE *)(a1 + 176474) = 0;
    *v44 = 0;
  }
  return result;
}

uint64_t initialize_enc_0()
{
  uint64_t v0;
  int32x4_t v1;
  int32x4_t v2;
  int32x4_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v11;
  float64x2_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int32x4_t v15;
  int64x2_t v16;
  int64x2_t v17;
  float64x2_t v18;
  int32x4_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  int32x4_t *v25;
  int32x4_t *v26;
  uint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  float64x2_t v41;
  int32x4_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  int32x4_t *v48;
  int32x4_t *v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int64x2_t v62;
  int64x2_t v63;
  float64x2_t v64;
  int32x4_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  int32x4_t *v71;
  int32x4_t *v72;

  pthread_once(&once_lock_6, (void (*)(void))setup_rtcd_internal_0);
  pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
  pthread_once(&once_lock_8, (void (*)(void))setup_rtcd_internal_2);
  pthread_once(&once_lock_5, vp9_init_intra_predictors_internal);
  v0 = 0;
  v1 = (int32x4_t)xmmword_208F08E20;
  v2 = (int32x4_t)xmmword_208F071C0;
  v3.i64[0] = 0xFF000000FFLL;
  v3.i64[1] = 0xFF000000FFLL;
  v4 = (float64x2_t)vdupq_n_s64(0x3FA566CF41F212D7uLL);
  v5 = (float64x2_t)vdupq_n_s64(0x4003491D14E3BCD3uLL);
  __asm { FMOV            V6.2D, #0.25 }
  v11 = (float64x2_t)vdupq_n_s64(0x3FB020C49BA5E354uLL);
  v12 = (float64x2_t)vdupq_n_s64(0x4005EF9DB22D0E56uLL);
  v13.i64[0] = 0x800000008;
  v13.i64[1] = 0x800000008;
  do
  {
    v14 = *(int16x8_t *)&ac_qlookup_0[vmaxq_s32(vminq_s32(v2, v3), (int32x4_t)0).u32[0]];
    v15 = vmovl_high_s16(v14);
    v16.i64[0] = v15.i32[0];
    v16.i64[1] = v15.i32[1];
    v17 = v16;
    v16.i64[0] = v15.i32[2];
    v16.i64[1] = v15.i32[3];
    v18 = vcvtq_f64_s64(v16);
    v19 = vmovl_s16(*(int16x4_t *)v14.i8);
    v16.i64[0] = v19.i32[0];
    v16.i64[1] = v19.i32[1];
    v20 = vcvtq_f64_s64(v16);
    v16.i64[0] = v19.i32[2];
    v16.i64[1] = v19.i32[3];
    v21 = vmulq_f64(vcvtq_f64_s64(v16), _Q6);
    v22 = vmulq_f64(v20, _Q6);
    v23 = vmulq_f64(v18, _Q6);
    v24 = vmulq_f64(vcvtq_f64_s64(v17), _Q6);
    v25 = (int32x4_t *)((char *)&sad_per_bit16lut_8 + v0);
    v26 = (int32x4_t *)((char *)&sad_per_bit4lut_8 + v0);
    *v25 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v5, v4, v22)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v5, v4, v21)));
    v25[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v5, v4, v24)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v5, v4, v23)));
    *v26 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v12, v11, v22)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v12, v11, v21)));
    v26[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v12, v11, v24)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v12, v11, v23)));
    v2 = vaddq_s32(v2, v13);
    v1 = vaddq_s32(v1, v13);
    v0 += 32;
  }
  while (v0 != 1024);
  v27 = 0;
  v28 = (int32x4_t)xmmword_208F08E20;
  v29 = (int32x4_t)xmmword_208F071C0;
  v30.i64[0] = 0xFF000000FFLL;
  v30.i64[1] = 0xFF000000FFLL;
  v31 = (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL);
  v32 = (float64x2_t)vdupq_n_s64(0x3FA566CF41F212D7uLL);
  v33 = (float64x2_t)vdupq_n_s64(0x4003491D14E3BCD3uLL);
  v34 = (float64x2_t)vdupq_n_s64(0x3FB020C49BA5E354uLL);
  v35 = (float64x2_t)vdupq_n_s64(0x4005EF9DB22D0E56uLL);
  v36.i64[0] = 0x800000008;
  v36.i64[1] = 0x800000008;
  do
  {
    v37 = *(int16x8_t *)&ac_qlookup_10[vmaxq_s32(vminq_s32(v29, v30), (int32x4_t)0).u32[0]];
    v38 = vmovl_high_s16(v37);
    v39.i64[0] = v38.i32[0];
    v39.i64[1] = v38.i32[1];
    v40 = v39;
    v39.i64[0] = v38.i32[2];
    v39.i64[1] = v38.i32[3];
    v41 = vcvtq_f64_s64(v39);
    v42 = vmovl_s16(*(int16x4_t *)v37.i8);
    v39.i64[0] = v42.i32[0];
    v39.i64[1] = v42.i32[1];
    v43 = vcvtq_f64_s64(v39);
    v39.i64[0] = v42.i32[2];
    v39.i64[1] = v42.i32[3];
    v44 = vmulq_f64(vcvtq_f64_s64(v39), v31);
    v45 = vmulq_f64(v43, v31);
    v46 = vmulq_f64(v41, v31);
    v47 = vmulq_f64(vcvtq_f64_s64(v40), v31);
    v48 = (int32x4_t *)((char *)&sad_per_bit16lut_10 + v27);
    v49 = (int32x4_t *)((char *)&sad_per_bit4lut_10 + v27);
    *v48 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v33, v32, v45)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v33, v32, v44)));
    v48[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v33, v32, v47)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v33, v32, v46)));
    *v49 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v35, v34, v45)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v35, v34, v44)));
    v49[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v35, v34, v47)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v35, v34, v46)));
    v29 = vaddq_s32(v29, v36);
    v28 = vaddq_s32(v28, v36);
    v27 += 32;
  }
  while (v27 != 1024);
  v50 = 0;
  v51 = (int32x4_t)xmmword_208F08E20;
  v52 = (int32x4_t)xmmword_208F071C0;
  v53.i64[0] = 0xFF000000FFLL;
  v53.i64[1] = 0xFF000000FFLL;
  v54 = (float64x2_t)vdupq_n_s64(0x3F90000000000000uLL);
  v55 = (float64x2_t)vdupq_n_s64(0x3FA566CF41F212D7uLL);
  v56 = (float64x2_t)vdupq_n_s64(0x4003491D14E3BCD3uLL);
  v57 = (float64x2_t)vdupq_n_s64(0x3FB020C49BA5E354uLL);
  v58 = (float64x2_t)vdupq_n_s64(0x4005EF9DB22D0E56uLL);
  v59.i64[0] = 0x800000008;
  v59.i64[1] = 0x800000008;
  do
  {
    v60 = *(int16x8_t *)&ac_qlookup_12[vmaxq_s32(vminq_s32(v52, v53), (int32x4_t)0).u32[0]];
    v61 = vmovl_high_s16(v60);
    v62.i64[0] = v61.i32[0];
    v62.i64[1] = v61.i32[1];
    v63 = v62;
    v62.i64[0] = v61.i32[2];
    v62.i64[1] = v61.i32[3];
    v64 = vcvtq_f64_s64(v62);
    v65 = vmovl_s16(*(int16x4_t *)v60.i8);
    v62.i64[0] = v65.i32[0];
    v62.i64[1] = v65.i32[1];
    v66 = vcvtq_f64_s64(v62);
    v62.i64[0] = v65.i32[2];
    v62.i64[1] = v65.i32[3];
    v67 = vmulq_f64(vcvtq_f64_s64(v62), v54);
    v68 = vmulq_f64(v66, v54);
    v69 = vmulq_f64(v64, v54);
    v70 = vmulq_f64(vcvtq_f64_s64(v63), v54);
    v71 = (int32x4_t *)((char *)&sad_per_bit16lut_12 + v50);
    v72 = (int32x4_t *)((char *)&sad_per_bit4lut_12 + v50);
    *v71 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v56, v55, v68)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v56, v55, v67)));
    v71[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v56, v55, v70)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v56, v55, v69)));
    *v72 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v58, v57, v68)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v58, v57, v67)));
    v72[1] = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmlaq_f64(v58, v57, v70)), (int32x4_t)vcvtq_s64_f64(vmlaq_f64(v58, v57, v69)));
    v52 = vaddq_s32(v52, v59);
    v51 = vaddq_s32(v51, v59);
    v50 += 32;
  }
  while (v50 != 1024);
  init_minq_luts((uint64_t)&kf_low_motion_minq_8, (uint64_t)&kf_high_motion_minq_8, (uint64_t)&arfgf_low_motion_minq_8, (uint64_t)&arfgf_high_motion_minq_8, (uint64_t)&inter_minq_8, (uint64_t)&rtc_minq_8, 8);
  init_minq_luts((uint64_t)&kf_low_motion_minq_10, (uint64_t)&kf_high_motion_minq_10, (uint64_t)&arfgf_low_motion_minq_10, (uint64_t)&arfgf_high_motion_minq_10, (uint64_t)&inter_minq_10, (uint64_t)&rtc_minq_10, 10);
  init_minq_luts((uint64_t)&kf_low_motion_minq_12, (uint64_t)&kf_high_motion_minq_12, (uint64_t)&arfgf_low_motion_minq_12, (uint64_t)&arfgf_high_motion_minq_12, (uint64_t)&inter_minq_12, (uint64_t)&rtc_minq_12, 12);
  tree2tok((uint64_t)&mv_joint_encodings, (uint64_t)&vp9_mv_joint_tree, 0, 0, 0);
  tree2tok((uint64_t)&mv_class_encodings, (uint64_t)vp9_mv_class_tree, 0, 0, 0);
  return tree2tok((uint64_t)&mv_fp_encodings, (uint64_t)vp9_mv_fp_tree, 0, 0, 0);
}

uint64_t (*vp9_change_config(uint64_t a1, _DWORD *a2))(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int8x16_t v25;
  double v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  size_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  size_t v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  int v68;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  signed int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  int *v90;
  uint64_t v91;
  signed int v92;
  uint64_t (*result)(uint64_t, int, uint64_t, int, uint64_t);
  unsigned int v94;
  int v95;
  char v96;
  int v97;
  int v98;
  unsigned int v99;
  void *v100;
  unint64_t v101;
  int v102;
  double *v103;
  uint64_t v104;
  int v105;

  v4 = a1 + 842096;
  v5 = a1 + 176456;
  v6 = a1 + 163488;
  v7 = a1 + 74736;
  v8 = (void *)(a1 + 189984);
  v105 = *(_DWORD *)(a1 + 189992);
  v102 = *(_DWORD *)(a1 + 189996);
  vp9_init_quantizer((_DWORD *)a1);
  if (*(_DWORD *)(v5 + 13396) != *a2)
    *(_DWORD *)(v5 + 13396) = *a2;
  v103 = (double *)(a1 + 739168);
  v9 = a2[1];
  *(_DWORD *)(v5 + 13400) = v9;
  *(_QWORD *)(v6 + 8492) = *(_QWORD *)(a2 + 101);
  v10 = a2[92];
  *(_DWORD *)(v4 + 28) = v10;
  *(_DWORD *)(v4 + 256) = v10 != 255;
  v11 = (_BYTE *)(v4 + 8304);
  v12 = v10 - 10;
  v13 = 0;
  switch(v12)
  {
    case 0:
      goto LABEL_18;
    case 1:
      v13 = 1;
      goto LABEL_18;
    case 10:
      v13 = 2;
      goto LABEL_18;
    case 11:
      v13 = 3;
      goto LABEL_18;
    case 20:
      v13 = 4;
      goto LABEL_18;
    case 21:
      v13 = 5;
      goto LABEL_18;
    case 30:
      v13 = 6;
      goto LABEL_18;
    case 31:
      v13 = 7;
      goto LABEL_18;
    case 40:
      v13 = 8;
      goto LABEL_18;
    case 41:
      v13 = 9;
      goto LABEL_18;
    case 42:
      v13 = 10;
      goto LABEL_18;
    case 50:
      v13 = 11;
      goto LABEL_18;
    case 51:
      v13 = 12;
      goto LABEL_18;
    case 52:
      v13 = 13;
LABEL_18:
      *v11 = v13;
      *(double *)(v4 + 8312) = *(double *)&vp9_level_defs[16 * (unint64_t)v13 + 8] * 1000.0;
      break;
    default:
      *v11 = -1;
      break;
  }
  memcpy(v8, a2, 0x1B8uLL);
  *(_DWORD *)v7 = v9;
  if (a2[23] || a2[27] != 3)
    v14 = 10;
  else
    v14 = 8;
  v15 = v105;
  *(_DWORD *)(a1 + 738556) = v14;
  *(_QWORD *)(a1 + 194556) = 1;
  *(_DWORD *)(a1 + 176400) = 1;
  *(_WORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 18) = 0;
  *(_DWORD *)(a1 + 176480) = -1;
  *(_DWORD *)(a1 + 176477) = -1;
  *(_OWORD *)(a1 + 176488) = 0u;
  *(_OWORD *)(a1 + 176504) = 0u;
  *(_OWORD *)(a1 + 176520) = 0u;
  *(_OWORD *)(a1 + 176536) = 0u;
  *(_OWORD *)(a1 + 176552) = 0u;
  *(_OWORD *)(a1 + 176568) = 0u;
  *(_DWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v6 + 9504) = 0;
  *(_QWORD *)(v7 + 240) = a1 + 74944;
  *(_QWORD *)(v7 + 296) = a1 + 75000;
  v16 = *(_DWORD *)(v5 + 13852);
  v17 = vdupq_n_s32(v16);
  *(int32x4_t *)(a1 + 740232) = v17;
  *(int32x4_t *)(a1 + 740248) = v17;
  *(_DWORD *)(a1 + 740208) = v16;
  v18 = *(_QWORD *)(v5 + 13584);
  v19 = *(_QWORD *)(v5 + 13656);
  v20 = *(_QWORD *)(v5 + 13664);
  *(_QWORD *)(a1 + 738736) = *(_QWORD *)(v5 + 13648) * v18 / 1000;
  if (v19)
  {
    v21 = (unsigned __int128)(v19 * v18 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
    v22 = v102;
    *(_QWORD *)(a1 + 738744) = (v21 >> 7) + ((unint64_t)v21 >> 63);
    if (v20)
    {
LABEL_25:
      v23 = (unsigned __int128)(v20 * v18 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
      v24 = (v23 >> 7) + ((unint64_t)v23 >> 63);
      goto LABEL_28;
    }
  }
  else
  {
    v22 = v102;
    *(_QWORD *)(a1 + 738744) = v18 / 8;
    if (v20)
      goto LABEL_25;
  }
  v24 = v18 / 8;
LABEL_28:
  *(_QWORD *)(a1 + 738752) = v24;
  v25 = (int8x16_t)vdupq_n_s64(v24);
  *(int8x16_t *)(a1 + 738640) = vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v25, *(int64x2_t *)(a1 + 738640)), *(int8x16_t *)(a1 + 738640), v25);
  v26 = *v103;
  if (*v103 < 0.1)
    v26 = 30.0;
  v27 = (int)fmin((double)v18 / v26, 2147483650.0);
  *v103 = v26;
  v28 = *(_DWORD *)(v5 + 13720) * v27;
  if (v28 <= 20099)
    v29 = 200;
  else
    v29 = v28 / 100;
  *(_DWORD *)(a1 + 738592) = v27;
  *(_DWORD *)(a1 + 738596) = v29;
  v30 = *(_DWORD *)(v5 + 13724);
  v31 = (unsigned __int128)(v30 * (uint64_t)v27 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64;
  v32 = ((v31 + v30 * (uint64_t)v27) >> 6) + ((unint64_t)(v31 + v30 * (uint64_t)v27) >> 63);
  if (v32 >= 0x7FFFFFFF)
    LODWORD(v32) = 0x7FFFFFFF;
  v33 = *(_DWORD *)(v6 + 9512);
  if (v33 <= 16000)
    v34 = 4000000;
  else
    v34 = 250 * v33;
  if (v34 > (int)v32)
    LODWORD(v32) = v34;
  *(_DWORD *)(a1 + 738600) = v32;
  vp9_rc_set_gf_interval_range(a1, a1 + 738448);
  *(_QWORD *)(a1 + 738728) = *(_QWORD *)(v5 + 13680);
  *(_BYTE *)(a1 + 173252) = *(_BYTE *)(a1 + 740016);
  v35 = *(_DWORD *)(v5 + 13940);
  if (v35 < 1 || (v36 = *(_DWORD *)(v5 + 13944), v36 < 1))
  {
    v37 = *(_DWORD *)(v5 + 13536);
    *(_DWORD *)(v6 + 8508) = v37;
    v38 = *(_DWORD *)(v5 + 13540);
    *(_DWORD *)(v6 + 8512) = v38;
    v39 = a1 + 171696;
    if (v105 != v37)
      goto LABEL_47;
  }
  else
  {
    *(_DWORD *)(v6 + 8508) = v35;
    *(_DWORD *)(v6 + 8512) = v36;
    v37 = *(_DWORD *)(v5 + 13536);
    v38 = *(_DWORD *)(v5 + 13540);
    v39 = a1 + 171696;
    if (v105 != v37)
      goto LABEL_47;
  }
  if (v22 == v38)
  {
    v40 = *(_DWORD *)(v6 + 8500);
    v41 = *(_DWORD *)(v6 + 8504);
    goto LABEL_48;
  }
LABEL_47:
  *(_DWORD *)(v6 + 8500) = v37;
  *(_DWORD *)(v6 + 8504) = v38;
  *(_DWORD *)v4 = 1;
  v41 = v38;
  v40 = v37;
LABEL_48:
  v42 = v41 + 7;
  v43 = (v40 + 7) >> 3;
  *(_DWORD *)(v6 + 9528) = v43;
  v44 = v42 >> 3;
  *(_DWORD *)(v6 + 9520) = v42 >> 3;
  *(_DWORD *)(v6 + 9532) = v43 + 8;
  v45 = (v43 + 1) >> 1;
  *(_DWORD *)(v6 + 9524) = v45;
  v46 = ((v42 >> 3) + 1) >> 1;
  *(_DWORD *)(v6 + 9516) = v46;
  *(_DWORD *)(v6 + 9512) = v45 * v46;
  v47 = ((v42 >> 3) + 8) * (v43 + 8);
  v48 = *(_DWORD *)(v6 + 9620);
  if (v48 >= v47)
  {
    if (v48 != v47 || v37 <= v105 && v38 <= v22)
      goto LABEL_56;
    if (*(_QWORD *)v5)
    {
      free(*(void **)(*(_QWORD *)v5 - 8));
      v43 = *(_DWORD *)(v6 + 9528);
      v44 = *(_DWORD *)(v6 + 9520);
    }
    v98 = (v43 + 7) >> 3;
    *(_DWORD *)(v5 + 8) = v98;
    v99 = ((v44 + 7) >> 3) * v98;
    if ((v99 & 0x80000000) == 0
      && (v104 = 160 * v99, (v100 = malloc_type_malloc(v104 | 0x17, 0x74AD08B5uLL)) != 0)
      && (v101 = ((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v101 - 8) = v100, v101))
    {
      bzero((void *)(((unint64_t)v100 + 23) & 0xFFFFFFFFFFFFFFF0), v104);
      *(_QWORD *)v5 = v101;
    }
    else
    {
      *(_QWORD *)v5 = 0;
      vpx_internal_error(v39, 2, "Failed to allocate loop filter data");
    }
  }
  else
  {
    vp9_free_context_buffers(v39);
    vp9_free_pc_tree(a1 + 49200);
    if (*(_QWORD *)v6)
      free(*(void **)(*(_QWORD *)v6 - 8));
    alloc_compressor_data(a1);
    realloc_segmentation_maps(a1);
    *(_QWORD *)(a1 + 747488) = 0;
    *(_DWORD *)v4 = 0;
  }
  v15 = v105;
LABEL_56:
  if (*(_DWORD *)(v5 + 13388) && v15 == *(_DWORD *)(v5 + 13536) && v22 == *(_DWORD *)(v5 + 13540))
    goto LABEL_94;
  update_frame_size(a1);
  if (v15 == *(_DWORD *)(v5 + 13536) && v22 == *(_DWORD *)(v5 + 13540))
    goto LABEL_94;
  v49 = *(_QWORD *)(v4 + 72);
  if (v49)
    free(*(void **)(v49 - 8));
  v50 = *(int *)(v6 + 9528) * (uint64_t)*(int *)(v6 + 9520);
  if ((_DWORD)v50)
  {
    if ((v50 & 0x80000000) != 0
      || v50 + 23 > 0x10000000000
      || (v51 = malloc_type_malloc(v50 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_72:
      *(_QWORD *)(v4 + 72) = 0;
      vpx_internal_error(v39, 2, "Failed to allocate cpi->consec_zero_mv");
      v53 = *(_QWORD *)(a1 + 740224);
      if (!v53)
        goto LABEL_74;
      goto LABEL_73;
    }
  }
  else
  {
    v51 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v51)
      goto LABEL_72;
  }
  v52 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v52 - 8) = v51;
  if (!v52)
    goto LABEL_72;
  bzero((void *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0), v50);
  *(_QWORD *)(v4 + 72) = v52;
  v53 = *(_QWORD *)(a1 + 740224);
  if (v53)
LABEL_73:
    free(*(void **)(v53 - 8));
LABEL_74:
  v54 = *(int *)(v6 + 9528) * (uint64_t)*(int *)(v6 + 9520);
  if ((_DWORD)v54)
  {
    if ((v54 & 0x80000000) != 0)
      goto LABEL_83;
    if (v54 + 23 > 0x10000000000)
      goto LABEL_83;
    v55 = malloc_type_malloc(v54 + 23, 0x74AD08B5uLL);
    if (!v55)
      goto LABEL_83;
  }
  else
  {
    v55 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v55)
      goto LABEL_83;
  }
  v56 = ((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v56 - 8) = v55;
  if (v56)
  {
    bzero((void *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF0), v54);
    *(_QWORD *)(a1 + 740224) = v56;
    v57 = *(_QWORD *)(v4 + 8248);
    if (!v57)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_83:
  *(_QWORD *)(a1 + 740224) = 0;
  vpx_internal_error(v39, 2, "Failed to allocate cpi->skin_map");
  v57 = *(_QWORD *)(v4 + 8248);
  if (v57)
LABEL_84:
    free(*(void **)(v57 - 8));
LABEL_85:
  *(_QWORD *)(v4 + 8248) = 0;
  v58 = *(_QWORD *)(v4 + 8256);
  if (v58)
    free(*(void **)(v58 - 8));
  *(_QWORD *)(v4 + 8256) = 0;
  v59 = *(_QWORD *)(v4 + 8264);
  if (v59)
    free(*(void **)(v59 - 8));
  *(_QWORD *)(v4 + 8264) = 0;
  v60 = *(_QWORD *)(v4 + 8272);
  if (v60)
    free(*(void **)(v60 - 8));
  *(_QWORD *)(v4 + 8272) = 0;
  alloc_copy_partition_data(a1);
  if (*(_DWORD *)(v5 + 13692) == 3)
  {
    v61 = *(_QWORD *)(a1 + 740264);
    bzero(*(void **)(v61 + 32), *(int *)(v6 + 9528) * (uint64_t)*(int *)(v6 + 9520));
    memset(*(void **)(v61 + 40), 255, *(int *)(v6 + 9528) * (uint64_t)*(int *)(v6 + 9520));
    *(_DWORD *)(v61 + 8) = 0;
    *(_QWORD *)(a1 + 194560) = 0x100000001;
    *(_DWORD *)(v61 + 124) = 0;
  }
  *(_DWORD *)(a1 + 738760) = 0;
  *(_DWORD *)(a1 + 738764) = 0;
LABEL_94:
  if (*(int *)(a1 + 747524) > 1 || (v62 = *(_DWORD *)(a1 + 747520), v62 >= 2) && *(_DWORD *)(v5 + 13620) != 1)
  {
    vp9_update_layer_context_change_config(a1, *(_DWORD *)(v5 + 13584));
    v62 = *(_DWORD *)(a1 + 747520);
  }
  if (*(_DWORD *)(v5 + 13388) > v62)
  {
    if (*(_DWORD *)(a1 + 747508))
    {
      if (v62 >= 1)
      {
        v63 = *(unsigned int *)(a1 + 747524);
        if ((int)v63 >= 1)
        {
          v64 = 0;
          v65 = 0;
          v66 = (_QWORD *)(a1 + 752096);
          do
          {
            v67 = *(_DWORD *)(a1 + 6880 * ((v63 - 1) + v65 * v63) + 752048);
            v68 = *(_DWORD *)(a1 + 6880 * ((v63 - 1) + v65 * v63) + 752232);
            if (v67 >= v68 >> 1 && v67 <= (3 * v68) >> 1)
              goto LABEL_103;
            if (v63 >= 2)
            {
              v71 = v66;
              v72 = v63 & 0xFFFFFFFE;
              do
              {
                v71[15] = 0;
                v71[875] = 0;
                v73 = v71[13];
                v74 = v71[873];
                v71[861] = v74;
                *v71 = v73;
                v71[1] = v73;
                v71[860] = v74;
                v71 += 1720;
                v72 -= 2;
              }
              while (v72);
              v70 = v63 & 0xFFFFFFFE;
              if (v70 == v63)
                goto LABEL_103;
            }
            else
            {
              v70 = 0;
            }
            v75 = v63 - v70;
            v76 = (_QWORD *)(a1 + 752216 + 6880 * (v70 + v64));
            do
            {
              *v76 = 0;
              v77 = *(v76 - 2);
              *(v76 - 15) = v77;
              *(v76 - 14) = v77;
              v76 += 860;
              --v75;
            }
            while (v75);
LABEL_103:
            ++v65;
            v66 += 860 * v63;
            v64 += v63;
          }
          while (v65 != v62);
        }
      }
    }
    else
    {
      v78 = *(_DWORD *)(a1 + 738592);
      v79 = *(_DWORD *)(a1 + 738776);
      if (v78 < v79 >> 1 || v78 > (3 * v79) >> 1)
      {
        *(_DWORD *)(a1 + 738760) = 0;
        *(_DWORD *)(a1 + 738764) = 0;
        v80 = *(_QWORD *)(a1 + 738744);
        *(_QWORD *)(a1 + 738648) = v80;
        *(_QWORD *)(a1 + 738640) = v80;
      }
    }
  }
  *(_QWORD *)(v5 + 13976) = 0;
  *(_DWORD *)(a1 + 738588) = 0;
  v81 = (*(_DWORD *)(v6 + 9528) + 7) >> 3;
  v82 = -1;
  do
    ++v82;
  while (64 << v82 < v81);
  v83 = -1;
  do
    v84 = v81 >> (v83++ + 2);
  while (v84 > 3);
  v85 = *(_DWORD *)(v5 + 13880);
  if (v85 < v83)
    v83 = *(_DWORD *)(v5 + 13880);
  if (v85 >= v82)
    v86 = v83;
  else
    v86 = v82;
  *(_DWORD *)(v5 + 13472) = v86;
  *(_DWORD *)(v5 + 13476) = *(_DWORD *)(v5 + 13884);
  if (*(_DWORD *)(v5 + 13896) == 1)
  {
    v87 = *(_DWORD *)(v6 + 8500);
    v88 = *(_DWORD *)(v6 + 8504);
    v89 = v88 * v87;
    if (v87 > v88)
      v88 = *(_DWORD *)(v6 + 8500);
    v90 = &dword_208F47570;
    v91 = 245;
    while (*v90 < v89 || v90[1] < v88)
    {
      v90 += 16;
      if (!--v91)
        goto LABEL_139;
    }
    v92 = __clz(*((unsigned __int8 *)v90 + 32)) ^ 0x1F;
    if (v86 > v92)
    {
      if (v92 > v82)
        v82 = v92;
      *(_DWORD *)(v5 + 13472) = v82;
    }
  }
LABEL_139:
  *(_DWORD *)(a1 + 194568) = 0;
  *(_DWORD *)(a1 + 194584) = 0;
  result = highbd_set_var_fns((uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))a1);
  *(_DWORD *)(v4 + 8240) = 0;
  v94 = *(_DWORD *)(v5 + 13616);
  if (v94 > 1)
  {
    if (v94 == 2 && *(int *)(v5 + 13600) >= 5 && *(_DWORD *)(v5 + 13952))
      goto LABEL_149;
LABEL_159:
    v97 = 0;
    goto LABEL_160;
  }
  if (*(int *)(v5 + 13600) > 4)
    goto LABEL_159;
  v95 = *(_DWORD *)(v5 + 13620);
  if (v95 != 1)
  {
    v96 = 1;
LABEL_157:
    if (v94)
      goto LABEL_158;
    goto LABEL_164;
  }
  if (*(_DWORD *)(v5 + 13952))
  {
    v96 = 1;
    if (!*(_DWORD *)(a1 + 747508))
    {
      *(_DWORD *)(v4 + 8240) = 1;
      v96 = 0;
      if (v94)
        goto LABEL_158;
      goto LABEL_164;
    }
    goto LABEL_157;
  }
  v96 = 1;
  if (v94)
    goto LABEL_158;
LABEL_164:
  if ((v95 | 2) != 2 || !*(_DWORD *)(v5 + 13952) || *(_DWORD *)(a1 + 747508))
  {
LABEL_158:
    if ((v96 & 1) == 0)
    {
      v97 = 1;
      goto LABEL_160;
    }
    goto LABEL_159;
  }
LABEL_149:
  v97 = 1;
  *(_DWORD *)(v4 + 8240) = 1;
LABEL_160:
  *(_DWORD *)(v4 + 8244) = v97;
  return result;
}

uint64_t alloc_compressor_data(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  unint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  unint64_t v18;

  v2 = (unint64_t *)(a1 + 194784);
  v3 = a1 + 163488;
  v4 = a1 + 171696;
  if (vp9_alloc_context_buffers(a1 + 171696, *(_DWORD *)(a1 + 171988), *(_DWORD *)(a1 + 171992)))
    vpx_internal_error(v4, 2, "Failed to allocate context buffers");
  v5 = *(_DWORD *)(v3 + 9520) * *(_DWORD *)(v3 + 9528);
  if ((v5 & 0x80000000) == 0)
  {
    v6 = 36 * v5;
    v7 = malloc_type_malloc(v6 + 23, 0x74AD08B5uLL);
    if (v7)
    {
      v8 = ((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v8 - 8) = v7;
      if (v8)
      {
        bzero((void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF0), v6);
        *(_QWORD *)v3 = v8;
        v9 = *v2;
        if (!*v2)
          goto LABEL_10;
        goto LABEL_9;
      }
    }
  }
  *(_QWORD *)v3 = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->mbmi_ext_base");
  v9 = *v2;
  if (*v2)
LABEL_9:
    free(*(void **)(v9 - 8));
LABEL_10:
  v10 = 772 * ((*(_DWORD *)(v3 + 9516) + 3) & 0xFFFFFFFC) * ((*(_DWORD *)(v3 + 9524) + 3) & 0xFFFFFFFC);
  v11 = malloc_type_malloc(((unint64_t)(v10 >> 6) << 10) | 0x17, 0x74AD08B5uLL);
  if (v11)
  {
    v12 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v12 - 8) = v11;
    if (v12)
    {
      bzero((void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), 16 * v10);
      *v2 = v12;
      v14 = *(_DWORD *)(v3 + 9520);
      v15 = v2[256];
      if (!v15)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  *v2 = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->tile_tok[0][0]");
  v14 = *(_DWORD *)(v3 + 9520);
  v15 = v2[256];
  if (v15)
LABEL_15:
    free(*(void **)(v15 - 8));
LABEL_16:
  if (32 * v14 + 224 < 0 == v13
    && (v16 = 24 * ((32 * v14 + 224) & 0xFFFFFF00), (v17 = malloc_type_malloc(v16 | 0x17, 0x74AD08B5uLL)) != 0)
    && (v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v18 - 8) = v17, v18))
  {
    bzero((void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0), v16);
    v2[256] = v18;
  }
  else
  {
    v2[256] = 0;
    vpx_internal_error(v4, 2, "Failed to allocate cpi->tplist[0][0]");
  }
  return vp9_setup_pc_tree(v4, a1 + 49200);
}

void realloc_segmentation_maps(uint64_t a1)
{
  unint64_t *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t refreshed;
  unint64_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  unint64_t v19;

  v1 = (unint64_t *)(a1 + 736296);
  v2 = (int *)(a1 + 173008);
  v3 = a1 + 171696;
  v4 = *(_QWORD *)(a1 + 740216);
  if (v4)
    free(*(void **)(v4 - 8));
  v5 = v2[2] * (uint64_t)*v2;
  if ((_DWORD)v5)
  {
    if ((v5 & 0x80000000) != 0)
      goto LABEL_12;
    if (v5 + 23 > 0x10000000000)
      goto LABEL_12;
    v6 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL);
    if (!v6)
      goto LABEL_12;
  }
  else
  {
    v6 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v6)
      goto LABEL_12;
  }
  v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 - 8) = v6;
  if (v7)
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
    v1[490] = v7;
    v8 = v1[496];
    if (!v8)
      goto LABEL_18;
    goto LABEL_13;
  }
LABEL_12:
  v1[490] = 0;
  vpx_internal_error(v3, 2, "Failed to allocate cpi->segmentation_map");
  v8 = v1[496];
  if (!v8)
    goto LABEL_18;
LABEL_13:
  v9 = *(_QWORD *)(v8 + 32);
  if (v9)
    free(*(void **)(v9 - 8));
  v10 = *(_QWORD *)(v8 + 40);
  if (v10)
    free(*(void **)(v10 - 8));
  free(*(void **)(v8 - 8));
LABEL_18:
  refreshed = vp9_cyclic_refresh_alloc(*v2, v2[2]);
  v1[496] = refreshed;
  if (refreshed)
  {
    v12 = v1[498];
    if (!v12)
      goto LABEL_21;
    goto LABEL_20;
  }
  vpx_internal_error(v3, 2, "Failed to allocate cpi->cyclic_refresh");
  v12 = v1[498];
  if (v12)
LABEL_20:
    free(*(void **)(v12 - 8));
LABEL_21:
  v13 = v2[2] * (uint64_t)*v2;
  if ((_DWORD)v13)
  {
    if ((v13 & 0x80000000) != 0
      || v13 + 23 > 0x10000000000
      || (v14 = malloc_type_malloc(v13 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_32:
      v1[498] = 0;
      vpx_internal_error(v3, 2, "Failed to allocate cpi->active_map.map");
      v16 = *v1;
      if (!*v1)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  else
  {
    v14 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v14)
      goto LABEL_32;
  }
  v15 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v15 - 8) = v14;
  if (!v15)
    goto LABEL_32;
  bzero((void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0), v13);
  v1[498] = v15;
  v16 = *v1;
  if (*v1)
LABEL_33:
    free(*(void **)(v16 - 8));
LABEL_34:
  v17 = v2[2] * (uint64_t)*v2;
  if ((_DWORD)v17)
  {
    if ((v17 & 0x80000000) != 0)
      goto LABEL_42;
    if (v17 + 23 > 0x10000000000)
      goto LABEL_42;
    v18 = malloc_type_malloc(v17 + 23, 0x74AD08B5uLL);
    if (!v18)
      goto LABEL_42;
  }
  else
  {
    v18 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v18)
      goto LABEL_42;
  }
  v19 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v19 - 8) = v18;
  if (v19)
  {
    bzero((void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0), v17);
    *v1 = v19;
    return;
  }
LABEL_42:
  *v1 = 0;
  vpx_internal_error(v3, 2, "Failed to allocate cpi->coding_context.last_frame_seg_map_copy");
}

void update_frame_size(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  signed int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int *v35;
  uint64_t v36;
  signed int v37;

  v2 = (uint64_t *)(a1 + 176600);
  v3 = a1 + 172988;
  v4 = a1 + 163488;
  v5 = (_QWORD *)(a1 + 74648);
  v6 = a1 + 74384;
  v7 = (_QWORD *)(a1 + 74112);
  v8 = a1 + 171696;
  v9 = (*(_DWORD *)(a1 + 171988) + 7) >> 3;
  v10 = (*(_DWORD *)(a1 + 171992) + 7) >> 3;
  *(_DWORD *)(a1 + 173016) = v9;
  *(_DWORD *)(a1 + 173020) = v9 + 8;
  v11 = (v9 + 1) >> 1;
  *(_DWORD *)(a1 + 173008) = v10;
  *(_DWORD *)(a1 + 173012) = v11;
  v12 = (v10 + 1) >> 1;
  *(_DWORD *)(a1 + 173000) = v12 * v11;
  *(_DWORD *)(a1 + 173004) = v12;
  (*(void (**)(uint64_t))(a1 + 173160))(a1 + 171696);
  v13 = *(void **)(v3 + 244);
  if (v13)
    bzero(v13, *(int *)(v3 + 28) * (uint64_t)*(int *)(v3 + 20));
  *v7 = 0;
  v14 = v2[1670];
  v15 = *(_OWORD *)(a1 + 173060);
  *(_OWORD *)(a1 + 74192) = *(_OWORD *)(a1 + 173044);
  *(_OWORD *)(a1 + 74208) = v15;
  v7[17] = 0;
  v16 = *(_DWORD *)(v3 + 32);
  v17 = *(int *)(v3 + 28);
  v18 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *v5 = v14;
  v5[1] = v14 + 2 * v18;
  v19 = *v2;
  v20 = *(_OWORD *)(a1 + 173076);
  v21 = *(_OWORD *)(a1 + 173092);
  *(_OWORD *)(a1 + 74328) = v20;
  *(_OWORD *)(a1 + 74344) = v21;
  *(_QWORD *)v6 = 0;
  v5[2] = v14 + 4 * v18;
  *(_OWORD *)(a1 + 74480) = v21;
  *(_OWORD *)(a1 + 74464) = v20;
  LODWORD(v14) = *(_DWORD *)(v4 + 9484);
  v22 = v2[1669];
  *(_QWORD *)(v6 + 232) = v19;
  v5[9] = v22;
  *(_DWORD *)(v6 + 168) = v16;
  v5[13] = v8;
  v23 = &vp9_kf_partition_probs;
  if ((_DWORD)v14)
  {
    v24 = (void *)(v19 + 126);
    if (!*(_BYTE *)v3)
      v23 = v24;
  }
  *(_QWORD *)(v6 + 208) = v23;
  v25 = *(void **)v4;
  v5[16] = *(_QWORD *)v4;
  bzero(v25, 36 * *(int *)(v3 + 20) * (uint64_t)(int)v17);
  v26 = (*(_DWORD *)(v3 + 28) + 7) >> 3;
  v27 = -1;
  do
    ++v27;
  while (64 << v27 < v26);
  v28 = -1;
  do
    v29 = v26 >> (v28++ + 2);
  while (v29 > 3);
  v30 = *((_DWORD *)v2 + 3434);
  if (v30 < v28)
    v28 = *((_DWORD *)v2 + 3434);
  if (v30 >= v27)
    v31 = v28;
  else
    v31 = v27;
  *((_DWORD *)v2 + 3332) = v31;
  *((_DWORD *)v2 + 3333) = *((_DWORD *)v2 + 3435);
  if (*((_DWORD *)v2 + 3438) == 1)
  {
    v32 = *(_DWORD *)(v4 + 8500);
    v33 = *(_DWORD *)(v4 + 8504);
    v34 = v33 * v32;
    if (v32 > v33)
      v33 = *(_DWORD *)(v4 + 8500);
    v35 = &dword_208F47570;
    v36 = 245;
    while (*v35 < v34 || v35[1] < v33)
    {
      v35 += 16;
      if (!--v36)
        return;
    }
    v37 = __clz(*((unsigned __int8 *)v35 + 32)) ^ 0x1F;
    if (v31 > v37)
    {
      if (v37 > v27)
        v27 = v37;
      *((_DWORD *)v2 + 3332) = v27;
    }
  }
}

void alloc_copy_partition_data(uint64_t a1)
{
  unint64_t *v1;
  int *v2;
  uint64_t v3;
  size_t v4;
  void *v5;
  unint64_t v6;
  int v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  int v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  int v15;
  size_t v16;
  void *v17;
  unint64_t v18;

  v1 = (unint64_t *)(a1 + 850344);
  v2 = (int *)(a1 + 173008);
  v3 = a1 + 171696;
  if (*(_QWORD *)(a1 + 850344))
  {
    if (*(_QWORD *)(a1 + 850352))
      goto LABEL_3;
LABEL_16:
    v7 = (v2[3] >> 3) + (v2[3] >> 3) * (*v2 >> 3);
    v8 = v7;
    if (v7)
    {
      if (v7 < 0)
        goto LABEL_25;
      if ((unint64_t)(v7 + 23) > 0x10000000000)
        goto LABEL_25;
      v9 = malloc_type_malloc(v7 + 23, 0x74AD08B5uLL);
      if (!v9)
        goto LABEL_25;
    }
    else
    {
      v9 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
      if (!v9)
        goto LABEL_25;
    }
    v10 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v10 - 8) = v9;
    if (v10)
    {
      bzero((void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), v8);
      v1[1] = v10;
      if (!v1[2])
        goto LABEL_26;
LABEL_4:
      if (v1[3])
        return;
LABEL_36:
      v15 = (v2[3] >> 3) + (v2[3] >> 3) * (*v2 >> 3);
      v16 = v15;
      if (v15)
      {
        if (v15 < 0)
          goto LABEL_44;
        if ((unint64_t)(v15 + 23) > 0x10000000000)
          goto LABEL_44;
        v17 = malloc_type_malloc(v15 + 23, 0x74AD08B5uLL);
        if (!v17)
          goto LABEL_44;
      }
      else
      {
        v17 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
        if (!v17)
        {
LABEL_44:
          v1[3] = 0;
          vpx_internal_error(v3, 2, "Failed to allocate cpi->copied_frame_cnt");
          return;
        }
      }
      v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v18 - 8) = v17;
      if (v18)
      {
        bzero((void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0), v16);
        v1[3] = v18;
        return;
      }
      goto LABEL_44;
    }
LABEL_25:
    v1[1] = 0;
    vpx_internal_error(v3, 2, "Failed to allocate cpi->prev_segment_id");
    if (!v1[2])
      goto LABEL_26;
    goto LABEL_4;
  }
  v4 = *v2 * (uint64_t)*(int *)(a1 + 173020);
  if ((_DWORD)v4)
  {
    if ((v4 & 0x80000000) != 0 || v4 + 23 > 0x10000000000 || (v5 = malloc_type_malloc(v4 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_15:
      *v1 = 0;
      vpx_internal_error(v3, 2, "Failed to allocate cpi->prev_partition");
      if (!v1[1])
        goto LABEL_16;
      goto LABEL_3;
    }
  }
  else
  {
    v5 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v5)
      goto LABEL_15;
  }
  v6 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 - 8) = v5;
  if (!v6)
    goto LABEL_15;
  bzero((void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0), v4);
  *v1 = v6;
  if (!v1[1])
    goto LABEL_16;
LABEL_3:
  if (v1[2])
    goto LABEL_4;
LABEL_26:
  v11 = 25 * ((v2[3] >> 3) + (v2[3] >> 3) * (*v2 >> 3));
  v12 = v11;
  if (v11)
  {
    if (v11 < 0
      || (unint64_t)(v11 + 23) > 0x10000000000
      || (v13 = malloc_type_malloc(v11 + 23, 0x74AD08B5uLL)) == 0)
    {
LABEL_35:
      v1[2] = 0;
      vpx_internal_error(v3, 2, "Failed to allocate cpi->prev_variance_low");
      if (!v1[3])
        goto LABEL_36;
      return;
    }
  }
  else
  {
    v13 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v13)
      goto LABEL_35;
  }
  v14 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v14 - 8) = v13;
  if (!v14)
    goto LABEL_35;
  bzero((void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0), v12);
  v1[2] = v14;
  if (!v1[3])
    goto LABEL_36;
}

uint64_t (*highbd_set_var_fns(uint64_t (*result)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)))(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t (**v1)(uint64_t, int, uint64_t, int);
  int v2;
  uint64_t (*v3)(uint64_t, int, uint64_t, int);
  uint64_t (*v4)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v5)(uint64_t, int, uint64_t, int);
  uint64_t (*v6)(uint64_t, int, uint64_t, int);
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)(uint64_t, int, uint64_t, int);
  uint64_t (*v12)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v13)(uint64_t, int, uint64_t, int);
  uint64_t (*v14)(uint64_t, int, uint64_t, int);
  uint64_t (*v15)();
  uint64_t (*v16)(uint64_t, int, uint64_t, int);
  uint64_t (*v17)(uint64_t, int, uint64_t, int);
  uint64_t (*v18)(uint64_t, int, uint64_t, int);
  uint64_t (*v19)(uint64_t, int, uint64_t, int);
  uint64_t (*v20)(uint64_t, int, uint64_t, int);
  uint64_t (*v21)(uint64_t, int, uint64_t, int);
  uint64_t (*v22)();
  uint64_t (*v23)();
  uint64_t (*v24)(uint64_t, int, uint64_t, int);
  uint64_t (*v25)(uint64_t, int, uint64_t, int);
  uint64_t (*v26)(uint64_t, int, uint64_t, int);
  uint64_t (*v27)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v28)(uint64_t, int, uint64_t, int);
  uint64_t (*v29)(uint64_t, int, uint64_t, int);
  uint64_t (*v30)(uint64_t, int, uint64_t, int);
  uint64_t (*v31)(uint64_t, int, uint64_t, int);
  uint64_t (*v32)();
  uint64_t (*v33)();
  uint64_t (*v34)(uint64_t, int, uint64_t, int);
  uint64_t (*v35)(uint64_t, int, uint64_t, int);
  uint64_t (*v36)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v37)(uint64_t, int, uint64_t, int);
  uint64_t (*v38)();
  uint64_t (*v39)();
  uint64_t (*v40)();
  uint64_t (*v41)();
  uint64_t (*v42)(uint64_t, int, uint64_t, int);
  uint64_t (*v43)(uint64_t, int, uint64_t, int);
  uint64_t (*v44)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v45)(uint64_t, int, uint64_t, int);
  uint64_t (*v46)();
  uint64_t (*v47)();
  uint64_t (*v48)();
  uint64_t (*v49)();
  uint64_t (*v50)(uint64_t, int, uint64_t, int);
  uint64_t (*v51)(uint64_t, int, uint64_t, int);
  uint64_t (*v52)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v53)(uint64_t, int, uint64_t, int);
  uint64_t (*v54)(uint64_t, int, uint64_t, int);
  uint64_t (*v55)(uint64_t, int, uint64_t, int);
  uint64_t (*v56)(uint64_t, int, uint64_t, int);
  uint64_t (*v57)();
  uint64_t (*v58)(uint64_t, int, uint64_t, int);
  uint64_t (*v59)(uint64_t, int, uint64_t, int);
  uint64_t (*v60)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v61)(uint64_t, int, uint64_t, int);
  uint64_t (*v62)(uint64_t, int, uint64_t, int);
  uint64_t (*v63)(uint64_t, int, uint64_t, int);
  uint64_t (*v64)();
  uint64_t (*v65)();
  uint64_t (*v66)(uint64_t, int, uint64_t, int);
  uint64_t (*v67)(uint64_t, int, uint64_t, int);
  uint64_t (*v68)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v69)(uint64_t, int, uint64_t, int);
  uint64_t (*v70)(uint64_t, int, uint64_t, int);
  uint64_t (*v71)(uint64_t, int, uint64_t, int);
  uint64_t (*v72)(uint64_t, int, uint64_t, int);
  uint64_t (*v73)();
  uint64_t (*v74)(uint64_t, int, uint64_t, int);
  uint64_t (*v75)(uint64_t, int, uint64_t, int);
  uint64_t (*v76)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v77)(uint64_t, int, uint64_t, int);
  uint64_t (*v78)(uint64_t, int, uint64_t, int);
  uint64_t (*v79)(uint64_t, int, uint64_t, int);
  uint64_t (*v80)();
  uint64_t (*v81)();
  uint64_t (*v82)(uint64_t, int, uint64_t, int);
  uint64_t (*v83)(uint64_t, int, uint64_t, int);
  uint64_t (*v84)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v85)(uint64_t, int, uint64_t, int);
  uint64_t (*v86)(uint64_t, int, uint64_t, int);
  uint64_t (*v87)(uint64_t, int, uint64_t, int);
  uint64_t (*v88)(uint64_t, int, uint64_t, int);
  uint64_t (*v89)(uint64_t, int, uint64_t, int);
  uint64_t (*v90)(uint64_t, int, uint64_t, int);
  uint64_t (*v91)(uint64_t, int, uint64_t, int);
  uint64_t (*v92)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v93)(uint64_t, int, uint64_t, int);
  uint64_t (*v94)(uint64_t, int, uint64_t, int);
  uint64_t (*v95)(uint64_t, int, uint64_t, int);
  uint64_t (*v96)();
  uint64_t (*v97)();
  uint64_t (*v98)(uint64_t, int, uint64_t, int);
  uint64_t (*v99)(uint64_t, int, uint64_t, int);
  uint64_t (*v100)(uint64_t, int, uint64_t, int, uint64_t);
  uint64_t (*v101)(uint64_t, int, uint64_t, int);
  uint64_t (*v102)(uint64_t, int, uint64_t, int);
  uint64_t (*v103)(uint64_t, int, uint64_t, int);
  uint64_t (*v104)();
  uint64_t (*v105)(uint64_t, int, uint64_t, int);

  if (*((_DWORD *)result + 43005))
  {
    v1 = (uint64_t (**)(uint64_t, int, uint64_t, int))((char *)result + 740464);
    v2 = *((_DWORD *)result + 47464);
    if (v2 == 8)
    {
      v105 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_4x4x4d_bits8;
      v104 = vpx_highbd_sad4x4x4d_bits8;
      v103 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance4x4_neon;
      v102 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance4x4_neon;
      v101 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance4x4_neon;
      v100 = vpx_highbd_sad4x4_avg_bits8;
      v99 = vpx_highbd_sad_skip_4x4_bits8;
      v98 = vpx_highbd_sad4x4_bits8;
      v97 = vpx_highbd_sad_skip_4x8x4d_bits8;
      v96 = vpx_highbd_sad4x8x4d_bits8;
      v95 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance4x8_neon;
      v94 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance4x8_neon;
      v93 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance4x8_neon;
      v91 = vpx_highbd_sad_skip_4x8_bits8;
      v92 = vpx_highbd_sad4x8_avg_bits8;
      v89 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_8x4x4d_bits8;
      v90 = vpx_highbd_sad4x8_bits8;
      v88 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x4x4d_bits8;
      v87 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance8x4_neon;
      v86 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance8x4_neon;
      v84 = vpx_highbd_sad8x4_avg_bits8;
      v85 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance8x4_neon;
      v82 = vpx_highbd_sad8x4_bits8;
      v83 = vpx_highbd_sad_skip_8x4_bits8;
      v80 = vpx_highbd_sad8x8x4d_bits8;
      v81 = vpx_highbd_sad_skip_8x8x4d_bits8;
      v79 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance8x8_neon;
      v78 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance8x8_neon;
      v76 = vpx_highbd_sad8x8_avg_bits8;
      v77 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance8x8_neon;
      v74 = vpx_highbd_sad8x8_bits8;
      v75 = vpx_highbd_sad_skip_8x8_bits8;
      v72 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x16x4d_bits8;
      v73 = vpx_highbd_sad_skip_8x16x4d_bits8;
      v71 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance8x16_neon;
      v70 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance8x16_neon;
      v68 = (uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))vpx_highbd_sad8x16_avg_bits8;
      v69 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance8x16_neon;
      v66 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x16_bits8;
      v67 = vpx_highbd_sad_skip_8x16_bits8;
      v64 = vpx_highbd_sad16x8x4d_bits8;
      v65 = vpx_highbd_sad_skip_16x8x4d_bits8;
      v63 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance16x8_neon;
      v62 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance16x8_neon;
      v60 = (uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))vpx_highbd_sad16x8_avg_bits8;
      v61 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance16x8_neon;
      v58 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x8_bits8;
      v59 = vpx_highbd_sad_skip_16x8_bits8;
      v56 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x16x4d_bits8;
      v57 = vpx_highbd_sad_skip_16x16x4d_bits8;
      v55 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance16x16_neon;
      v54 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance16x16_neon;
      v52 = (uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))vpx_highbd_sad16x16_avg_bits8;
      v53 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance16x16_neon;
      v50 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x16_bits8;
      v51 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_16x16_bits8;
      v48 = vpx_highbd_sad64x64x4d_bits8;
      v49 = vpx_highbd_sad_skip_64x64x4d_bits8;
      v47 = vpx_highbd_8_sub_pixel_avg_variance64x64_neon;
      v46 = vpx_highbd_8_sub_pixel_variance64x64_neon;
      v44 = (uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))vpx_highbd_sad64x64_avg_bits8;
      v45 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance64x64_neon;
      v42 = vpx_highbd_sad64x64_bits8;
      v43 = vpx_highbd_sad_skip_64x64_bits8;
      v40 = vpx_highbd_sad32x32x4d_bits8;
      v41 = vpx_highbd_sad_skip_32x32x4d_bits8;
      v39 = vpx_highbd_8_sub_pixel_avg_variance32x32_neon;
      v38 = vpx_highbd_8_sub_pixel_variance32x32_neon;
      v36 = vpx_highbd_sad32x32_avg_bits8;
      v37 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance32x32_neon;
      v34 = vpx_highbd_sad32x32_bits8;
      v35 = vpx_highbd_sad_skip_32x32_bits8;
      v32 = vpx_highbd_sad32x64x4d_bits8;
      v33 = vpx_highbd_sad_skip_32x64x4d_bits8;
      v31 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance32x64_neon;
      v30 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance32x64_neon;
      v3 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance32x64_neon;
      v4 = vpx_highbd_sad32x64_avg_bits8;
      v5 = vpx_highbd_sad_skip_32x64_bits8;
      v6 = vpx_highbd_sad32x64_bits8;
      v7 = vpx_highbd_sad_skip_64x32x4d_bits8;
      v8 = vpx_highbd_sad64x32x4d_bits8;
      v9 = vpx_highbd_8_sub_pixel_avg_variance64x32_neon;
      v10 = vpx_highbd_8_sub_pixel_variance64x32_neon;
      v11 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance64x32_neon;
      v12 = (uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))vpx_highbd_sad64x32_avg_bits8;
      v13 = vpx_highbd_sad_skip_64x32_bits8;
      v14 = vpx_highbd_sad64x32_bits8;
      v15 = vpx_highbd_sad_skip_16x32x4d_bits8;
      v16 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x32x4d_bits8;
      v17 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance16x32_neon;
      v18 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance16x32_neon;
      v19 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance16x32_neon;
      result = vpx_highbd_sad16x32_avg_bits8;
      v20 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_16x32_bits8;
      v21 = vpx_highbd_sad16x32_bits8;
      v22 = vpx_highbd_sad_skip_32x16x4d_bits8;
      v23 = vpx_highbd_sad32x16x4d_bits8;
      v24 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_avg_variance32x16_neon;
      v25 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_sub_pixel_variance32x16_neon;
      v26 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_8_variance32x16_neon;
      v27 = vpx_highbd_sad32x16_avg_bits8;
      v28 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_32x16_bits8;
      v29 = vpx_highbd_sad32x16_bits8;
    }
    else if (v2 == 10)
    {
      v105 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_4x4x4d_bits10;
      v104 = (uint64_t (*)())vpx_highbd_sad4x4x4d_bits10;
      v103 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance4x4_neon;
      v102 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance4x4_neon;
      v101 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance4x4_neon;
      v100 = vpx_highbd_sad4x4_avg_bits10;
      v99 = vpx_highbd_sad_skip_4x4_bits10;
      v98 = vpx_highbd_sad4x4_bits10;
      v97 = (uint64_t (*)())vpx_highbd_sad_skip_4x8x4d_bits10;
      v96 = (uint64_t (*)())vpx_highbd_sad4x8x4d_bits10;
      v95 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance4x8_neon;
      v94 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance4x8_neon;
      v93 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance4x8_neon;
      v91 = vpx_highbd_sad_skip_4x8_bits10;
      v92 = vpx_highbd_sad4x8_avg_bits10;
      v89 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_8x4x4d_bits10;
      v90 = vpx_highbd_sad4x8_bits10;
      v88 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x4x4d_bits10;
      v87 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance8x4_neon;
      v86 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance8x4_neon;
      v84 = vpx_highbd_sad8x4_avg_bits10;
      v85 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance8x4_neon;
      v82 = vpx_highbd_sad8x4_bits10;
      v83 = vpx_highbd_sad_skip_8x4_bits10;
      v80 = (uint64_t (*)())vpx_highbd_sad8x8x4d_bits10;
      v81 = (uint64_t (*)())vpx_highbd_sad_skip_8x8x4d_bits10;
      v79 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance8x8_neon;
      v78 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance8x8_neon;
      v76 = vpx_highbd_sad8x8_avg_bits10;
      v77 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance8x8_neon;
      v74 = vpx_highbd_sad8x8_bits10;
      v75 = vpx_highbd_sad_skip_8x8_bits10;
      v72 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x16x4d_bits10;
      v73 = (uint64_t (*)())vpx_highbd_sad_skip_8x16x4d_bits10;
      v71 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance8x16_neon;
      v70 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance8x16_neon;
      v68 = vpx_highbd_sad8x16_avg_bits10;
      v69 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance8x16_neon;
      v66 = vpx_highbd_sad8x16_bits10;
      v67 = vpx_highbd_sad_skip_8x16_bits10;
      v64 = (uint64_t (*)())vpx_highbd_sad16x8x4d_bits10;
      v65 = (uint64_t (*)())vpx_highbd_sad_skip_16x8x4d_bits10;
      v63 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance16x8_neon;
      v62 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance16x8_neon;
      v60 = vpx_highbd_sad16x8_avg_bits10;
      v61 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance16x8_neon;
      v58 = vpx_highbd_sad16x8_bits10;
      v59 = vpx_highbd_sad_skip_16x8_bits10;
      v56 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x16x4d_bits10;
      v57 = (uint64_t (*)())vpx_highbd_sad_skip_16x16x4d_bits10;
      v55 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance16x16_neon;
      v54 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance16x16_neon;
      v52 = vpx_highbd_sad16x16_avg_bits10;
      v53 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance16x16_neon;
      v50 = vpx_highbd_sad16x16_bits10;
      v51 = vpx_highbd_sad_skip_16x16_bits10;
      v48 = (uint64_t (*)())vpx_highbd_sad64x64x4d_bits10;
      v49 = (uint64_t (*)())vpx_highbd_sad_skip_64x64x4d_bits10;
      v47 = vpx_highbd_10_sub_pixel_avg_variance64x64_neon;
      v46 = vpx_highbd_10_sub_pixel_variance64x64_neon;
      v44 = vpx_highbd_sad64x64_avg_bits10;
      v45 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance64x64_neon;
      v42 = vpx_highbd_sad64x64_bits10;
      v43 = vpx_highbd_sad_skip_64x64_bits10;
      v40 = (uint64_t (*)())vpx_highbd_sad32x32x4d_bits10;
      v41 = (uint64_t (*)())vpx_highbd_sad_skip_32x32x4d_bits10;
      v39 = vpx_highbd_10_sub_pixel_avg_variance32x32_neon;
      v38 = vpx_highbd_10_sub_pixel_variance32x32_neon;
      v36 = vpx_highbd_sad32x32_avg_bits10;
      v37 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance32x32_neon;
      v34 = vpx_highbd_sad32x32_bits10;
      v35 = vpx_highbd_sad_skip_32x32_bits10;
      v32 = (uint64_t (*)())vpx_highbd_sad32x64x4d_bits10;
      v33 = (uint64_t (*)())vpx_highbd_sad_skip_32x64x4d_bits10;
      v31 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance32x64_neon;
      v30 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance32x64_neon;
      v3 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance32x64_neon;
      v4 = vpx_highbd_sad32x64_avg_bits10;
      v5 = vpx_highbd_sad_skip_32x64_bits10;
      v6 = vpx_highbd_sad32x64_bits10;
      v7 = (uint64_t (*)())vpx_highbd_sad_skip_64x32x4d_bits10;
      v8 = (uint64_t (*)())vpx_highbd_sad64x32x4d_bits10;
      v9 = vpx_highbd_10_sub_pixel_avg_variance64x32_neon;
      v10 = vpx_highbd_10_sub_pixel_variance64x32_neon;
      v11 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance64x32_neon;
      v12 = vpx_highbd_sad64x32_avg_bits10;
      v13 = vpx_highbd_sad_skip_64x32_bits10;
      v14 = vpx_highbd_sad64x32_bits10;
      v15 = (uint64_t (*)())vpx_highbd_sad_skip_16x32x4d_bits10;
      v16 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x32x4d_bits10;
      v17 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance16x32_neon;
      v18 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance16x32_neon;
      v19 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance16x32_neon;
      result = vpx_highbd_sad16x32_avg_bits10;
      v20 = vpx_highbd_sad_skip_16x32_bits10;
      v21 = vpx_highbd_sad16x32_bits10;
      v22 = (uint64_t (*)())vpx_highbd_sad_skip_32x16x4d_bits10;
      v23 = (uint64_t (*)())vpx_highbd_sad32x16x4d_bits10;
      v24 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_avg_variance32x16_neon;
      v25 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_sub_pixel_variance32x16_neon;
      v26 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_10_variance32x16_neon;
      v27 = vpx_highbd_sad32x16_avg_bits10;
      v28 = vpx_highbd_sad_skip_32x16_bits10;
      v29 = vpx_highbd_sad32x16_bits10;
    }
    else
    {
      v105 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_4x4x4d_bits12;
      v104 = (uint64_t (*)())vpx_highbd_sad4x4x4d_bits12;
      v103 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance4x4_neon;
      v102 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance4x4_neon;
      v101 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance4x4_neon;
      v100 = vpx_highbd_sad4x4_avg_bits12;
      v99 = vpx_highbd_sad_skip_4x4_bits12;
      v98 = vpx_highbd_sad4x4_bits12;
      v97 = (uint64_t (*)())vpx_highbd_sad_skip_4x8x4d_bits12;
      v96 = (uint64_t (*)())vpx_highbd_sad4x8x4d_bits12;
      v95 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance4x8_neon;
      v94 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance4x8_neon;
      v93 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance4x8_neon;
      v91 = vpx_highbd_sad_skip_4x8_bits12;
      v92 = vpx_highbd_sad4x8_avg_bits12;
      v89 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad_skip_8x4x4d_bits12;
      v90 = vpx_highbd_sad4x8_bits12;
      v88 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x4x4d_bits12;
      v87 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance8x4_neon;
      v86 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance8x4_neon;
      v84 = vpx_highbd_sad8x4_avg_bits12;
      v85 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance8x4_neon;
      v82 = vpx_highbd_sad8x4_bits12;
      v83 = vpx_highbd_sad_skip_8x4_bits12;
      v80 = (uint64_t (*)())vpx_highbd_sad8x8x4d_bits12;
      v81 = (uint64_t (*)())vpx_highbd_sad_skip_8x8x4d_bits12;
      v79 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance8x8_neon;
      v78 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance8x8_neon;
      v76 = vpx_highbd_sad8x8_avg_bits12;
      v77 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance8x8_neon;
      v74 = vpx_highbd_sad8x8_bits12;
      v75 = vpx_highbd_sad_skip_8x8_bits12;
      v72 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad8x16x4d_bits12;
      v73 = (uint64_t (*)())vpx_highbd_sad_skip_8x16x4d_bits12;
      v71 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance8x16_neon;
      v70 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance8x16_neon;
      v68 = vpx_highbd_sad8x16_avg_bits12;
      v69 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance8x16_neon;
      v66 = vpx_highbd_sad8x16_bits12;
      v67 = vpx_highbd_sad_skip_8x16_bits12;
      v64 = (uint64_t (*)())vpx_highbd_sad16x8x4d_bits12;
      v65 = (uint64_t (*)())vpx_highbd_sad_skip_16x8x4d_bits12;
      v63 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance16x8_neon;
      v62 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance16x8_neon;
      v60 = vpx_highbd_sad16x8_avg_bits12;
      v61 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance16x8_neon;
      v58 = vpx_highbd_sad16x8_bits12;
      v59 = vpx_highbd_sad_skip_16x8_bits12;
      v56 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x16x4d_bits12;
      v57 = (uint64_t (*)())vpx_highbd_sad_skip_16x16x4d_bits12;
      v55 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance16x16_neon;
      v54 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance16x16_neon;
      v52 = vpx_highbd_sad16x16_avg_bits12;
      v53 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance16x16_neon;
      v50 = vpx_highbd_sad16x16_bits12;
      v51 = vpx_highbd_sad_skip_16x16_bits12;
      v48 = (uint64_t (*)())vpx_highbd_sad64x64x4d_bits12;
      v49 = (uint64_t (*)())vpx_highbd_sad_skip_64x64x4d_bits12;
      v47 = vpx_highbd_12_sub_pixel_avg_variance64x64_neon;
      v46 = vpx_highbd_12_sub_pixel_variance64x64_neon;
      v44 = vpx_highbd_sad64x64_avg_bits12;
      v45 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance64x64_neon;
      v42 = vpx_highbd_sad64x64_bits12;
      v43 = vpx_highbd_sad_skip_64x64_bits12;
      v40 = (uint64_t (*)())vpx_highbd_sad32x32x4d_bits12;
      v41 = (uint64_t (*)())vpx_highbd_sad_skip_32x32x4d_bits12;
      v39 = vpx_highbd_12_sub_pixel_avg_variance32x32_neon;
      v38 = vpx_highbd_12_sub_pixel_variance32x32_neon;
      v36 = vpx_highbd_sad32x32_avg_bits12;
      v37 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance32x32_neon;
      v34 = vpx_highbd_sad32x32_bits12;
      v35 = vpx_highbd_sad_skip_32x32_bits12;
      v32 = (uint64_t (*)())vpx_highbd_sad32x64x4d_bits12;
      v33 = (uint64_t (*)())vpx_highbd_sad_skip_32x64x4d_bits12;
      v31 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance32x64_neon;
      v30 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance32x64_neon;
      v3 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance32x64_neon;
      v4 = vpx_highbd_sad32x64_avg_bits12;
      v5 = vpx_highbd_sad_skip_32x64_bits12;
      v6 = vpx_highbd_sad32x64_bits12;
      v7 = (uint64_t (*)())vpx_highbd_sad_skip_64x32x4d_bits12;
      v8 = (uint64_t (*)())vpx_highbd_sad64x32x4d_bits12;
      v9 = vpx_highbd_12_sub_pixel_avg_variance64x32_neon;
      v10 = vpx_highbd_12_sub_pixel_variance64x32_neon;
      v11 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance64x32_neon;
      v12 = vpx_highbd_sad64x32_avg_bits12;
      v13 = vpx_highbd_sad_skip_64x32_bits12;
      v14 = vpx_highbd_sad64x32_bits12;
      v15 = (uint64_t (*)())vpx_highbd_sad_skip_16x32x4d_bits12;
      v16 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_sad16x32x4d_bits12;
      v17 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance16x32_neon;
      v18 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance16x32_neon;
      v19 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance16x32_neon;
      result = vpx_highbd_sad16x32_avg_bits12;
      v20 = vpx_highbd_sad_skip_16x32_bits12;
      v21 = vpx_highbd_sad16x32_bits12;
      v22 = (uint64_t (*)())vpx_highbd_sad_skip_32x16x4d_bits12;
      v23 = (uint64_t (*)())vpx_highbd_sad32x16x4d_bits12;
      v24 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_avg_variance32x16_neon;
      v25 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_sub_pixel_variance32x16_neon;
      v26 = (uint64_t (*)(uint64_t, int, uint64_t, int))vpx_highbd_12_variance32x16_neon;
      v27 = vpx_highbd_sad32x16_avg_bits12;
      v28 = vpx_highbd_sad_skip_32x16_bits12;
      v29 = vpx_highbd_sad32x16_bits12;
    }
    v1[63] = (uint64_t (*)(uint64_t, int, uint64_t, int))v15;
    v1[64] = v29;
    v1[65] = v28;
    v1[66] = (uint64_t (*)(uint64_t, int, uint64_t, int))v27;
    v1[67] = v26;
    v1[68] = v25;
    v1[69] = v24;
    v1[70] = (uint64_t (*)(uint64_t, int, uint64_t, int))v23;
    v1[71] = (uint64_t (*)(uint64_t, int, uint64_t, int))v22;
    v1[56] = v21;
    v1[57] = v20;
    v1[58] = (uint64_t (*)(uint64_t, int, uint64_t, int))result;
    v1[59] = v19;
    v1[60] = v18;
    v1[61] = v17;
    v1[62] = v16;
    v1[88] = v14;
    v1[89] = v13;
    v1[90] = (uint64_t (*)(uint64_t, int, uint64_t, int))v12;
    v1[91] = v11;
    v1[92] = (uint64_t (*)(uint64_t, int, uint64_t, int))v10;
    v1[93] = (uint64_t (*)(uint64_t, int, uint64_t, int))v9;
    v1[94] = (uint64_t (*)(uint64_t, int, uint64_t, int))v8;
    v1[95] = (uint64_t (*)(uint64_t, int, uint64_t, int))v7;
    v1[80] = v6;
    v1[81] = v5;
    v1[82] = (uint64_t (*)(uint64_t, int, uint64_t, int))v4;
    v1[83] = v3;
    v1[84] = v30;
    v1[85] = v31;
    v1[86] = (uint64_t (*)(uint64_t, int, uint64_t, int))v32;
    v1[87] = (uint64_t (*)(uint64_t, int, uint64_t, int))v33;
    v1[72] = v34;
    v1[73] = v35;
    v1[74] = (uint64_t (*)(uint64_t, int, uint64_t, int))v36;
    v1[75] = v37;
    v1[76] = (uint64_t (*)(uint64_t, int, uint64_t, int))v38;
    v1[77] = (uint64_t (*)(uint64_t, int, uint64_t, int))v39;
    v1[78] = (uint64_t (*)(uint64_t, int, uint64_t, int))v40;
    v1[79] = (uint64_t (*)(uint64_t, int, uint64_t, int))v41;
    v1[96] = v42;
    v1[97] = v43;
    v1[98] = (uint64_t (*)(uint64_t, int, uint64_t, int))v44;
    v1[99] = v45;
    v1[100] = (uint64_t (*)(uint64_t, int, uint64_t, int))v46;
    v1[101] = (uint64_t (*)(uint64_t, int, uint64_t, int))v47;
    v1[102] = (uint64_t (*)(uint64_t, int, uint64_t, int))v48;
    v1[103] = (uint64_t (*)(uint64_t, int, uint64_t, int))v49;
    v1[48] = v50;
    v1[49] = v51;
    v1[50] = (uint64_t (*)(uint64_t, int, uint64_t, int))v52;
    v1[51] = v53;
    v1[52] = v54;
    v1[53] = v55;
    v1[54] = v56;
    v1[55] = (uint64_t (*)(uint64_t, int, uint64_t, int))v57;
    v1[40] = v58;
    v1[41] = v59;
    v1[42] = (uint64_t (*)(uint64_t, int, uint64_t, int))v60;
    v1[43] = v61;
    v1[44] = v62;
    v1[45] = v63;
    v1[46] = (uint64_t (*)(uint64_t, int, uint64_t, int))v64;
    v1[47] = (uint64_t (*)(uint64_t, int, uint64_t, int))v65;
    v1[32] = v66;
    v1[33] = v67;
    v1[34] = (uint64_t (*)(uint64_t, int, uint64_t, int))v68;
    v1[35] = v69;
    v1[36] = v70;
    v1[37] = v71;
    v1[38] = v72;
    v1[39] = (uint64_t (*)(uint64_t, int, uint64_t, int))v73;
    v1[24] = v74;
    v1[25] = v75;
    v1[26] = (uint64_t (*)(uint64_t, int, uint64_t, int))v76;
    v1[27] = v77;
    v1[28] = v78;
    v1[29] = v79;
    v1[30] = (uint64_t (*)(uint64_t, int, uint64_t, int))v80;
    v1[31] = (uint64_t (*)(uint64_t, int, uint64_t, int))v81;
    v1[16] = v82;
    v1[17] = v83;
    v1[18] = (uint64_t (*)(uint64_t, int, uint64_t, int))v84;
    v1[19] = v85;
    v1[20] = v86;
    v1[21] = v87;
    v1[22] = v88;
    v1[23] = v89;
    v1[8] = v90;
    v1[9] = v91;
    v1[10] = (uint64_t (*)(uint64_t, int, uint64_t, int))v92;
    v1[11] = v93;
    v1[12] = v94;
    v1[13] = v95;
    v1[14] = (uint64_t (*)(uint64_t, int, uint64_t, int))v96;
    v1[15] = (uint64_t (*)(uint64_t, int, uint64_t, int))v97;
    *v1 = v98;
    v1[1] = v99;
    v1[2] = (uint64_t (*)(uint64_t, int, uint64_t, int))v100;
    v1[3] = v101;
    v1[4] = v102;
    v1[5] = v103;
    v1[6] = (uint64_t (*)(uint64_t, int, uint64_t, int))v104;
    v1[7] = v105;
  }
  return result;
}

uint64_t alloc_raw_frame_buffers(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = a1 + 189936;
  v3 = (int *)(a1 + 172012);
  v4 = a1 + 171696;
  if (!*(_QWORD *)(a1 + 190424))
  {
    v5 = vp9_lookahead_init(*(_DWORD *)(a1 + 189992), *(_DWORD *)(a1 + 189996), *(_DWORD *)(a1 + 172012), *(_DWORD *)(a1 + 172016), *(_DWORD *)(a1 + 172020), *(_DWORD *)(a1 + 190088));
    *(_QWORD *)(v2 + 488) = v5;
    if (!v5)
      vpx_internal_error(v4, 2, "Failed to allocate lag buffers");
  }
  result = vpx_realloc_frame_buffer(a1 + 747312, *(_DWORD *)(v2 + 56), *(_DWORD *)(v2 + 60), *v3, v3[1], v3[2], 160, *(_DWORD *)v2, 0, 0, 0);
  if ((_DWORD)result)
    return vpx_internal_error(v4, 2, "Failed to allocate altref buffer");
  return result;
}

_DWORD *vp9_create_compressor(_QWORD *a1, uint64_t a2)
{
  void *v4;
  double v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _DWORD *v16;
  __int128 v17;
  int v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  size_t v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  size_t v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  void *v74;
  void *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  void *v89;
  void *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t i;
  uint64_t v95;
  size_t v96;
  BOOL v97;
  size_t v98;
  void *v99;
  void *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  long double v113;
  unsigned int v114;
  _DWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  long double v123;
  unsigned int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  uint64_t v131;
  void *v132;
  void *v133;
  void *v134;
  size_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  size_t v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  void *v144;
  _DWORD *__src;
  int *__attribute__((__org_typedef(jmp_buf))) v146;
  _DWORD *v147;

  v4 = malloc_type_malloc(0xCFBA7uLL, 0x74AD08B5uLL);
  if (!v4)
    return 0;
  *(_QWORD *)((((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v4;
  v147 = (_DWORD *)(((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFE0);
  if (!v147)
    return 0;
  v146 = v147 + 42924;
  if (v147 == (_DWORD *)-171696)
    return 0;
  bzero(v147, 0xCFB80uLL);
  if (setjmp(v147 + 42947))
  {
    v147[42946] = 0;
    vp9_remove_compressor((uint64_t)v147, v5);
    return 0;
  }
  v147[42946] = 1;
  *((_QWORD *)v147 + 21643) = vp9_enc_alloc_mi;
  *((_QWORD *)v147 + 21644) = vp9_enc_free_mi;
  *((_QWORD *)v147 + 21645) = vp9_enc_setup_mi;
  v7 = malloc_type_malloc(0x813uLL, 0x74AD08B5uLL);
  if (v7 && (v8 = v7, v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v9 - 1) = v8, v9))
  {
    v10 = v9;
    bzero(v9, 0x7FCuLL);
    *((_QWORD *)v147 + 22075) = v10;
    if (!*((_QWORD *)v147 + 22075))
      goto LABEL_12;
  }
  else
  {
    *((_QWORD *)v147 + 22075) = 0;
    if (!*((_QWORD *)v147 + 22075))
LABEL_12:
      vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cm->fc");
  }
  v11 = malloc_type_malloc(0x2007uLL, 0x74AD08B5uLL);
  if (v11
    && (v12 = v11, v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v13 - 1) = v12, v13))
  {
    v14 = v13;
    bzero(v13, 0x1FF0uLL);
    v15 = v14;
  }
  else
  {
    v15 = 0;
  }
  __src = a1;
  *((_QWORD *)v147 + 22076) = v15;
  if (!*((_QWORD *)v147 + 22076))
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cm->frame_contexts");
  v147[212599] = 1;
  v147[186877] = 0;
  v147[210523] = 0;
  v147[210524] = 0;
  v147[210527] = 0;
  v147[210528] = 0;
  v147[210530] = 0;
  *((_QWORD *)v147 + 23743) = a2;
  v16 = (_DWORD *)*((_QWORD *)v147 + 23743);
  v147[43160] = -1;
  *(_QWORD *)&v17 = -1;
  *((_QWORD *)&v17 + 1) = -1;
  *((_OWORD *)v147 + 10753) = v17;
  *((_OWORD *)v147 + 10754) = v17;
  v16[6] = 0;
  v16[62] = 0;
  v16[118] = 0;
  v16[174] = 0;
  v16[230] = 0;
  v16[286] = 0;
  v16[342] = 0;
  v16[398] = 0;
  v16[454] = 0;
  v16[510] = 0;
  v16[566] = 0;
  v16[622] = 0;
  *((_BYTE *)v147 + 747304) = 0;
  memcpy(v147 + 47496, a1, 0x1B8uLL);
  *((_QWORD *)v147 + 92396) = a1[3];
  *(_QWORD *)(v147 + 47463) = *a1;
  v147[43005] = *((_DWORD *)a1 + 100);
  *(_QWORD *)(v147 + 42995) = *(_QWORD *)((char *)a1 + 404);
  v18 = *((_DWORD *)a1 + 92);
  v147[210531] = v18;
  v147[210588] = v18 != 255;
  v19 = v147 + 212600;
  v21 = v18 - 10;
  v20 = 0;
  switch(v21)
  {
    case 0:
      goto LABEL_33;
    case 1:
      v20 = 1;
      goto LABEL_33;
    case 10:
      v20 = 2;
      goto LABEL_33;
    case 11:
      v20 = 3;
      goto LABEL_33;
    case 20:
      v20 = 4;
      goto LABEL_33;
    case 21:
      v20 = 5;
      goto LABEL_33;
    case 30:
      v20 = 6;
      goto LABEL_33;
    case 31:
      v20 = 7;
      goto LABEL_33;
    case 40:
      v20 = 8;
      goto LABEL_33;
    case 41:
      v20 = 9;
      goto LABEL_33;
    case 42:
      v20 = 10;
      goto LABEL_33;
    case 50:
      v20 = 11;
      goto LABEL_33;
    case 51:
      v20 = 12;
      goto LABEL_33;
    case 52:
      v20 = 13;
LABEL_33:
      *v19 = v20;
      *((double *)v147 + 106301) = *(double *)&vp9_level_defs[16 * (unint64_t)v20 + 8] * 1000.0;
      break;
    default:
      *v19 = -1;
      break;
  }
  *(_QWORD *)(v147 + 42997) = a1[1];
  alloc_compressor_data((uint64_t)v147);
  v147[208616] = *((_DWORD *)a1 + 105);
  *((_QWORD *)v147 + 20431) = v147 + 44155;
  v22 = *((_DWORD *)a1 + 51);
  v147[186880] = v22;
  v23 = *((_DWORD *)a1 + 52);
  v147[186881] = v23;
  if (v23 > 1 || v22 >= 2 && v147[47519] != 1)
    vp9_init_layer_context((uint64_t)v147);
  vp9_change_config((uint64_t)v147, a1);
  *(_QWORD *)(v147 + 184879) = 0;
  *((_OWORD *)v147 + 12158) = xmmword_208F471F0;
  *((_QWORD *)v147 + 24318) = 0x600000005;
  v147[48638] = 7;
  *((_OWORD *)v147 + 12157) = xmmword_208F1ADD0;
  v24 = v147[42998] * v147[42997];
  if (v24 <= 2073599)
    v25 = 140;
  else
    v25 = 200;
  if (v24 <= 2073599)
    v26 = 210;
  else
    v26 = 300;
  *((_QWORD *)v147 + 105267) = 0x5A00000000;
  *(_QWORD *)(v147 + 210537) = 0;
  v147[210539] = 0;
  v147[210532] = 0;
  v147[210533] = v24 >= 921600;
  if (v24 >= 921600)
  {
    v27 = v25;
    v28 = v26;
LABEL_48:
    v147[210535] = v27;
    v29 = v28;
    goto LABEL_50;
  }
  if (v24 >= 230400)
  {
    v28 = 172;
    v27 = 115;
    goto LABEL_48;
  }
  v29 = 135;
LABEL_50:
  v147[210540] = 15;
  v147[210536] = v29;
  v147[212698] = 0;
  v31 = *((_DWORD *)a1 + 2);
  v30 = *((_DWORD *)a1 + 3);
  v32 = *((_DWORD *)a1 + 1);
  v33 = (v31 + 7) >> 3;
  v34 = (v30 + 7) >> 3;
  v35 = (v33 + 1) >> 1;
  v36 = (v34 + 1) >> 1;
  *v147 = v31;
  v147[1] = v30;
  v147[2] = v31;
  v147[3] = v30;
  v147[4] = v34;
  v147[5] = v33;
  v147[6] = v36;
  v147[7] = v35;
  v147[8] = v36 * v35;
  v147[9] = v32;
  vp9_rc_init((uint64_t)(v147 + 47496), *((_DWORD *)a1 + 23), (uint64_t)(v147 + 184612));
  if (!v147[186801])
  {
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(v147 + 49722) = _Q0;
    *((_QWORD *)v147 + 24863) = 0x3FF0000000000000;
  }
  *(_QWORD *)(v147 + 47461) = 0;
  *((_QWORD *)v147 + 24311) = 0;
  realloc_segmentation_maps((uint64_t)v147);
  v42 = (int)v147[43254] * (uint64_t)(int)v147[43252];
  if (!(_DWORD)v42)
  {
    v44 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v44)
    {
LABEL_60:
      v43 = 0;
      goto LABEL_61;
    }
LABEL_58:
    v45 = v44;
    v46 = (_QWORD *)(((unint64_t)v44 + 23) & 0xFFFFFFFFFFFFFFF0);
    *(v46 - 1) = v45;
    if (v46)
    {
      v47 = v46;
      bzero(v46, v42);
      v43 = v47;
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  v43 = 0;
  if ((v42 & 0x80000000) == 0 && v42 + 23 <= 0x10000000000)
  {
    v44 = malloc_type_malloc(v42 + 23, 0x74AD08B5uLL);
    if (!v44)
      goto LABEL_60;
    goto LABEL_58;
  }
LABEL_61:
  *((_QWORD *)v147 + 92528) = v43;
  if (!*((_QWORD *)v147 + 92528))
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->skin_map");
    v48 = (int)v147[43254] * (uint64_t)(int)v147[43252];
    if ((_DWORD)v48)
      goto LABEL_63;
LABEL_68:
    v50 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
    if (!v50)
    {
LABEL_71:
      v49 = 0;
      goto LABEL_72;
    }
LABEL_69:
    v51 = v50;
    v52 = (_QWORD *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0);
    *(v52 - 1) = v51;
    if (v52)
    {
      v53 = v52;
      bzero(v52, v48);
      v49 = v53;
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  v48 = (int)v147[43254] * (uint64_t)(int)v147[43252];
  if (!(_DWORD)v48)
    goto LABEL_68;
LABEL_63:
  v49 = 0;
  if ((v48 & 0x80000000) == 0 && v48 + 23 <= 0x10000000000)
  {
    v50 = malloc_type_malloc(v48 + 23, 0x74AD08B5uLL);
    if (!v50)
      goto LABEL_71;
    goto LABEL_69;
  }
LABEL_72:
  *((_QWORD *)v147 + 105271) = v49;
  if (!*((_QWORD *)v147 + 105271))
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->consec_zero_mv");
  v54 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
  if (v54
    && (v55 = v54, v56 = (void *)(((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v56 - 1) = v55, v56))
  {
    v57 = v56;
    bzero(v56, 0x1FFFCuLL);
    v58 = v57;
  }
  else
  {
    v58 = 0;
  }
  *((_QWORD *)v147 + 92295) = v58;
  if (*((_QWORD *)v147 + 92295))
  {
    v59 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v59)
      goto LABEL_84;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvcosts[0]");
    v59 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v59)
      goto LABEL_84;
  }
  v60 = v59;
  v61 = (_QWORD *)(((unint64_t)v59 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v61 - 1) = v60;
  if (v61)
  {
    v62 = v61;
    bzero(v61, 0x1FFFCuLL);
    v63 = v62;
    goto LABEL_85;
  }
LABEL_84:
  v63 = 0;
LABEL_85:
  *((_QWORD *)v147 + 92296) = v63;
  if (*((_QWORD *)v147 + 92296))
  {
    v64 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v64)
      goto LABEL_91;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvcosts[1]");
    v64 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v64)
      goto LABEL_91;
  }
  v65 = v64;
  v66 = (_QWORD *)(((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v66 - 1) = v65;
  if (v66)
  {
    v67 = v66;
    bzero(v66, 0x1FFFCuLL);
    v68 = v67;
    goto LABEL_92;
  }
LABEL_91:
  v68 = 0;
LABEL_92:
  *((_QWORD *)v147 + 92297) = v68;
  if (*((_QWORD *)v147 + 92297))
  {
    v69 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v69)
      goto LABEL_98;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvcosts_hp[0]");
    v69 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v69)
      goto LABEL_98;
  }
  v70 = v69;
  v71 = (_QWORD *)(((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v71 - 1) = v70;
  if (v71)
  {
    v72 = v71;
    bzero(v71, 0x1FFFCuLL);
    v73 = v72;
    goto LABEL_99;
  }
LABEL_98:
  v73 = 0;
LABEL_99:
  *((_QWORD *)v147 + 92298) = v73;
  if (*((_QWORD *)v147 + 92298))
  {
    v74 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v74)
      goto LABEL_105;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvcosts_hp[1]");
    v74 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v74)
      goto LABEL_105;
  }
  v75 = v74;
  v76 = (_QWORD *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v76 - 1) = v75;
  if (v76)
  {
    v77 = v76;
    bzero(v76, 0x1FFFCuLL);
    v78 = v77;
    goto LABEL_106;
  }
LABEL_105:
  v78 = 0;
LABEL_106:
  *((_QWORD *)v147 + 92299) = v78;
  if (*((_QWORD *)v147 + 92299))
  {
    v79 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v79)
      goto LABEL_112;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvsadcosts[0]");
    v79 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v79)
      goto LABEL_112;
  }
  v80 = v79;
  v81 = (_QWORD *)(((unint64_t)v79 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v81 - 1) = v80;
  if (v81)
  {
    v82 = v81;
    bzero(v81, 0x1FFFCuLL);
    v83 = v82;
    goto LABEL_113;
  }
LABEL_112:
  v83 = 0;
LABEL_113:
  *((_QWORD *)v147 + 92300) = v83;
  if (*((_QWORD *)v147 + 92300))
  {
    v84 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v84)
      goto LABEL_119;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvsadcosts[1]");
    v84 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v84)
      goto LABEL_119;
  }
  v85 = v84;
  v86 = (_QWORD *)(((unint64_t)v84 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v86 - 1) = v85;
  if (v86)
  {
    v87 = v86;
    bzero(v86, 0x1FFFCuLL);
    v88 = v87;
    goto LABEL_120;
  }
LABEL_119:
  v88 = 0;
LABEL_120:
  *((_QWORD *)v147 + 92301) = v88;
  if (*((_QWORD *)v147 + 92301))
  {
    v89 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v89)
      goto LABEL_126;
  }
  else
  {
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvsadcosts_hp[0]");
    v89 = malloc_type_malloc(0x20013uLL, 0x74AD08B5uLL);
    if (!v89)
    {
LABEL_126:
      v93 = 0;
      goto LABEL_127;
    }
  }
  v90 = v89;
  v91 = (_QWORD *)(((unint64_t)v89 + 23) & 0xFFFFFFFFFFFFFFF0);
  *(v91 - 1) = v90;
  if (!v91)
    goto LABEL_126;
  v92 = v91;
  bzero(v91, 0x1FFFCuLL);
  v93 = v92;
LABEL_127:
  *((_QWORD *)v147 + 92302) = v93;
  if (!*((_QWORD *)v147 + 92302))
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->nmvsadcosts_hp[1]");
  for (i = 0; i != 50; i += 2)
  {
    v95 = (int)v147[43250];
    v96 = 32 * v95;
    if ((_DWORD)v95)
    {
      v97 = v96 > 0x10000000000 || (v96 | 0x17) > 0x10000000000;
      v98 = v96 | 0x17;
      if (v97)
        goto LABEL_142;
    }
    else
    {
      v98 = 23;
    }
    v99 = malloc_type_malloc(v98, 0x74AD08B5uLL);
    if (v99)
    {
      v100 = v99;
      v101 = (_QWORD *)(((unint64_t)v99 + 23) & 0xFFFFFFFFFFFFFFF0);
      *(v101 - 1) = v100;
      if (v101)
      {
        v102 = v101;
        bzero(v101, v96);
        v103 = v102;
        goto LABEL_143;
      }
    }
LABEL_142:
    v103 = 0;
LABEL_143:
    *(_QWORD *)&v147[i + 184828] = v103;
    if (!*(_QWORD *)&v147[i + 184828])
      vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->mbgraph_stats[i].mb_stats");
  }
  v147[48641] = 0;
  v147[186870] = 0;
  bzero(v147 + 210590, 0x830uLL);
  *(_OWORD *)(v147 + 211122) = 0u;
  *(_OWORD *)(v147 + 211126) = 0u;
  *(_OWORD *)(v147 + 211114) = 0u;
  *(_OWORD *)(v147 + 211118) = 0u;
  v147[211114] = 0;
  v147[211127] = 0x7FFFFFFF;
  *((_WORD *)v147 + 425200) = 255;
  *((_QWORD *)v147 + 106301) = 0x41DFFFFFFFC00000;
  v147[212601] = 0x7FFFFFFF;
  *((_QWORD *)v147 + 92305) = 0x7FFFFFFFFFFFFFFFLL;
  *(_OWORD *)(v147 + 18746) = xmmword_208F47200;
  *((_QWORD *)v147 + 9368) = *((_QWORD *)v147 + 92295) + 65532;
  *((_QWORD *)v147 + 9369) = *((_QWORD *)v147 + 92296) + 65532;
  *((_QWORD *)v147 + 9375) = *((_QWORD *)v147 + 92299) + 65532;
  *((_QWORD *)v147 + 9376) = *((_QWORD *)v147 + 92300) + 65532;
  v105 = (_DWORD *)*((_QWORD *)v147 + 9375);
  v104 = (_DWORD *)*((_QWORD *)v147 + 9376);
  *v105 = 0;
  *v104 = 0;
  v106 = v104;
  v107 = -4;
  v108 = 8;
  v109 = 4;
  do
  {
    v110 = v109;
    v111 = v107;
    v112 = v108;
    v113 = log((double)v108);
    v114 = vcvtd_n_s64_f64(v113 / 0.693147182 + 0.6 + v113 / 0.693147182 + 0.6, 8uLL);
    *(_DWORD *)((char *)v105 + v110) = v114;
    *(_DWORD *)((char *)v106 + v110) = v114;
    *(_DWORD *)((char *)v105 + v111) = v114;
    *(_DWORD *)((char *)v106 + v111) = v114;
    v109 = v110 + 4;
    v107 = v111 - 4;
    v108 = v112 + 8;
  }
  while (v110 != 65532);
  *((_QWORD *)v147 + 9370) = *((_QWORD *)v147 + 92297) + 65532;
  *((_QWORD *)v147 + 9371) = *((_QWORD *)v147 + 92298) + 65532;
  *((_QWORD *)v147 + 9377) = *((_QWORD *)v147 + 92301) + 65532;
  *((_QWORD *)v147 + 9378) = *((_QWORD *)v147 + 92302) + 65532;
  v115 = (_DWORD *)*((_QWORD *)v147 + 9377);
  v116 = (_DWORD *)*((_QWORD *)v147 + 9378);
  *v115 = 0;
  *v116 = 0;
  v117 = -4;
  v118 = 8;
  v119 = 4;
  do
  {
    v120 = v119;
    v121 = v117;
    v122 = v118;
    v123 = log((double)v118);
    v124 = vcvtd_n_s64_f64(v123 / 0.693147182 + 0.6 + v123 / 0.693147182 + 0.6, 8uLL);
    *(_DWORD *)((char *)v115 + v120) = v124;
    *(_DWORD *)((char *)v116 + v120) = v124;
    *(_DWORD *)((char *)v115 + v121) = v124;
    *(_DWORD *)((char *)v116 + v121) = v124;
    v119 = v120 + 4;
    v117 = v121 - 4;
    v118 = v122 + 8;
  }
  while (v120 != 65532);
  v147[185051] = 1;
  *(_OWORD *)(v147 + 212690) = 0u;
  *(_OWORD *)(v147 + 212694) = 0u;
  *(_OWORD *)(v147 + 212682) = 0u;
  *(_OWORD *)(v147 + 212686) = 0u;
  *(_OWORD *)(v147 + 212674) = 0u;
  *(_OWORD *)(v147 + 212678) = 0u;
  *(_OWORD *)(v147 + 212666) = 0u;
  *(_OWORD *)(v147 + 212670) = 0u;
  *(_OWORD *)(v147 + 212658) = 0u;
  *(_OWORD *)(v147 + 212662) = 0u;
  *(_OWORD *)(v147 + 212654) = 0u;
  v147[48653] = 0;
  v147[48652] = 0;
  *((_QWORD *)v147 + 24325) = 0;
  vp9_set_speed_features_framesize_independent((uint64_t)v147, __src[18]);
  vp9_set_speed_features_framesize_dependent((uint64_t)v147, __src[18]);
  v125 = v147[43254];
  if (v125 + 1 >= 0)
    v126 = v125 + 1;
  else
    v126 = v125 + 2;
  v127 = v126 >> 1;
  v128 = v147[43252];
  if (v128 + 1 >= 0)
    v129 = v128 + 1;
  else
    v129 = v128 + 2;
  v130 = (v129 >> 1) * v127;
  if ((v130 & 0x80000000) != 0)
  {
    v137 = 0;
  }
  else
  {
    v131 = 8 * v130;
    v132 = malloc_type_malloc(v131 + 23, 0x74AD08B5uLL);
    if (v132
      && (v133 = v132,
          v134 = (void *)(((unint64_t)v132 + 23) & 0xFFFFFFFFFFFFFFF0),
          *((_QWORD *)v134 - 1) = v133,
          v134))
    {
      v135 = v131;
      v136 = v134;
      bzero(v134, v135);
      v137 = v136;
    }
    else
    {
      v137 = 0;
    }
  }
  *((_QWORD *)v147 + 24327) = v137;
  if (!*((_QWORD *)v147 + 24327))
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->mi_ssim_rdmult_scaling_factors");
  v147[48574] = 0;
  *((_QWORD *)v147 + 23852) = 0;
  *((_QWORD *)v147 + 23857) = 0;
  *((_QWORD *)v147 + 23862) = 0;
  *((_QWORD *)v147 + 23867) = 0;
  *((_QWORD *)v147 + 23872) = 0;
  *((_QWORD *)v147 + 23877) = 0;
  *((_QWORD *)v147 + 23882) = 0;
  *((_QWORD *)v147 + 23887) = 0;
  *((_QWORD *)v147 + 23892) = 0;
  *((_QWORD *)v147 + 23897) = 0;
  *((_QWORD *)v147 + 23902) = 0;
  *((_QWORD *)v147 + 23907) = 0;
  *((_QWORD *)v147 + 23912) = 0;
  *((_QWORD *)v147 + 23917) = 0;
  *((_QWORD *)v147 + 23922) = 0;
  *((_QWORD *)v147 + 23927) = 0;
  *((_QWORD *)v147 + 23932) = 0;
  *((_QWORD *)v147 + 23937) = 0;
  *((_QWORD *)v147 + 23942) = 0;
  *((_QWORD *)v147 + 23947) = 0;
  *((_QWORD *)v147 + 23952) = 0;
  *((_QWORD *)v147 + 23957) = 0;
  *((_QWORD *)v147 + 23962) = 0;
  *((_QWORD *)v147 + 23967) = 0;
  *((_QWORD *)v147 + 23972) = 0;
  *((_QWORD *)v147 + 23977) = 0;
  *((_QWORD *)v147 + 23982) = 0;
  *((_QWORD *)v147 + 23987) = 0;
  *((_QWORD *)v147 + 23992) = 0;
  *((_QWORD *)v147 + 23997) = 0;
  *((_QWORD *)v147 + 24002) = 0;
  *((_QWORD *)v147 + 24007) = 0;
  *((_QWORD *)v147 + 24012) = 0;
  *((_QWORD *)v147 + 24017) = 0;
  *((_QWORD *)v147 + 24022) = 0;
  *((_QWORD *)v147 + 24027) = 0;
  *((_QWORD *)v147 + 24032) = 0;
  *((_QWORD *)v147 + 24037) = 0;
  *((_QWORD *)v147 + 24042) = 0;
  *((_QWORD *)v147 + 24047) = 0;
  *((_QWORD *)v147 + 24052) = 0;
  *((_QWORD *)v147 + 24057) = 0;
  *((_QWORD *)v147 + 24062) = 0;
  *((_QWORD *)v147 + 24067) = 0;
  *((_QWORD *)v147 + 24072) = 0;
  *((_QWORD *)v147 + 24077) = 0;
  *((_QWORD *)v147 + 24082) = 0;
  *((_QWORD *)v147 + 24087) = 0;
  *((_QWORD *)v147 + 24092) = 0;
  *((_QWORD *)v147 + 24097) = 0;
  v138 = v147[43250];
  if ((v138 & 0x80000000) == 0
    && (v139 = 8 * v138, (v140 = malloc_type_malloc(8 * v138 + 23, 0x74AD08B5uLL)) != 0)
    && (v141 = v140,
        v142 = (void *)(((unint64_t)v140 + 23) & 0xFFFFFFFFFFFFFFF0),
        *((_QWORD *)v142 - 1) = v141,
        v142))
  {
    v143 = v142;
    bzero(v142, v139);
    v144 = v143;
  }
  else
  {
    v144 = 0;
  }
  *((_QWORD *)v147 + 104430) = v144;
  if (!*((_QWORD *)v147 + 104430))
    vpx_internal_error((uint64_t)v146, 2, "Failed to allocate cpi->source_diff_var");
  v147[208862] = 0;
  v147[208863] = 0;
  *((_QWORD *)v147 + 92622) = vpx_sad32x16;
  *((_QWORD *)v147 + 92623) = vpx_sad_skip_32x16;
  *((_QWORD *)v147 + 92624) = vpx_sad32x16_avg;
  *((_QWORD *)v147 + 92625) = vpx_variance32x16;
  *((_QWORD *)v147 + 92626) = vpx_sub_pixel_variance32x16_neon;
  *((_QWORD *)v147 + 92627) = vpx_sub_pixel_avg_variance32x16_neon;
  *((_QWORD *)v147 + 92628) = vpx_sad32x16x4d;
  *((_QWORD *)v147 + 92629) = vpx_sad_skip_32x16x4d;
  *((_QWORD *)v147 + 92614) = vpx_sad16x32;
  *((_QWORD *)v147 + 92615) = vpx_sad_skip_16x32;
  *((_QWORD *)v147 + 92616) = vpx_sad16x32_avg;
  *((_QWORD *)v147 + 92617) = vpx_variance16x32;
  *((_QWORD *)v147 + 92618) = vpx_sub_pixel_variance16x32_neon;
  *((_QWORD *)v147 + 92619) = vpx_sub_pixel_avg_variance16x32_neon;
  *((_QWORD *)v147 + 92620) = vpx_sad16x32x4d;
  *((_QWORD *)v147 + 92621) = vpx_sad_skip_16x32x4d;
  *((_QWORD *)v147 + 92646) = vpx_sad64x32;
  *((_QWORD *)v147 + 92647) = vpx_sad_skip_64x32;
  *((_QWORD *)v147 + 92648) = vpx_sad64x32_avg;
  *((_QWORD *)v147 + 92649) = vpx_variance64x32;
  *((_QWORD *)v147 + 92650) = vpx_sub_pixel_variance64x32_neon;
  *((_QWORD *)v147 + 92651) = vpx_sub_pixel_avg_variance64x32_neon;
  *((_QWORD *)v147 + 92652) = vpx_sad64x32x4d;
  *((_QWORD *)v147 + 92653) = vpx_sad_skip_64x32x4d;
  *((_QWORD *)v147 + 92638) = vpx_sad32x64;
  *((_QWORD *)v147 + 92639) = vpx_sad_skip_32x64;
  *((_QWORD *)v147 + 92640) = vpx_sad32x64_avg;
  *((_QWORD *)v147 + 92641) = vpx_variance32x64;
  *((_QWORD *)v147 + 92642) = vpx_sub_pixel_variance32x64_neon;
  *((_QWORD *)v147 + 92643) = vpx_sub_pixel_avg_variance32x64_neon;
  *((_QWORD *)v147 + 92644) = vpx_sad32x64x4d;
  *((_QWORD *)v147 + 92645) = vpx_sad_skip_32x64x4d;
  *((_QWORD *)v147 + 92630) = vpx_sad32x32;
  *((_QWORD *)v147 + 92631) = vpx_sad_skip_32x32;
  *((_QWORD *)v147 + 92632) = vpx_sad32x32_avg;
  *((_QWORD *)v147 + 92633) = vpx_variance32x32;
  *((_QWORD *)v147 + 92634) = vpx_sub_pixel_variance32x32_neon;
  *((_QWORD *)v147 + 92635) = vpx_sub_pixel_avg_variance32x32_neon;
  *((_QWORD *)v147 + 92636) = vpx_sad32x32x4d;
  *((_QWORD *)v147 + 92637) = vpx_sad_skip_32x32x4d;
  *((_QWORD *)v147 + 92654) = vpx_sad64x64;
  *((_QWORD *)v147 + 92655) = vpx_sad_skip_64x64;
  *((_QWORD *)v147 + 92656) = vpx_sad64x64_avg;
  *((_QWORD *)v147 + 92657) = vpx_variance64x64;
  *((_QWORD *)v147 + 92658) = vpx_sub_pixel_variance64x64_neon;
  *((_QWORD *)v147 + 92659) = vpx_sub_pixel_avg_variance64x64_neon;
  *((_QWORD *)v147 + 92660) = vpx_sad64x64x4d;
  *((_QWORD *)v147 + 92661) = vpx_sad_skip_64x64x4d;
  *((_QWORD *)v147 + 92606) = vpx_sad16x16;
  *((_QWORD *)v147 + 92607) = vpx_sad_skip_16x16;
  *((_QWORD *)v147 + 92608) = vpx_sad16x16_avg;
  *((_QWORD *)v147 + 92609) = vpx_variance16x16;
  *((_QWORD *)v147 + 92610) = vpx_sub_pixel_variance16x16_neon;
  *((_QWORD *)v147 + 92611) = vpx_sub_pixel_avg_variance16x16_neon;
  *((_QWORD *)v147 + 92612) = vpx_sad16x16x4d;
  *((_QWORD *)v147 + 92613) = vpx_sad_skip_16x16x4d;
  *((_QWORD *)v147 + 92598) = vpx_sad16x8;
  *((_QWORD *)v147 + 92599) = vpx_sad_skip_16x8;
  *((_QWORD *)v147 + 92600) = vpx_sad16x8_avg;
  *((_QWORD *)v147 + 92601) = vpx_variance16x8;
  *((_QWORD *)v147 + 92602) = vpx_sub_pixel_variance16x8_neon;
  *((_QWORD *)v147 + 92603) = vpx_sub_pixel_avg_variance16x8_neon;
  *((_QWORD *)v147 + 92604) = vpx_sad16x8x4d;
  *((_QWORD *)v147 + 92605) = vpx_sad_skip_16x8x4d;
  *((_QWORD *)v147 + 92590) = vpx_sad8x16_neon;
  *((_QWORD *)v147 + 92591) = vpx_sad_skip_8x16_neon;
  *((_QWORD *)v147 + 92592) = vpx_sad8x16_avg_neon;
  *((_QWORD *)v147 + 92593) = vpx_variance8x16;
  *((_QWORD *)v147 + 92594) = vpx_sub_pixel_variance8x16_neon;
  *((_QWORD *)v147 + 92595) = vpx_sub_pixel_avg_variance8x16_neon;
  *((_QWORD *)v147 + 92596) = vpx_sad8x16x4d_neon;
  *((_QWORD *)v147 + 92597) = vpx_sad_skip_8x16x4d_neon;
  *((_QWORD *)v147 + 92582) = vpx_sad8x8_neon;
  *((_QWORD *)v147 + 92583) = vpx_sad_skip_8x8_neon;
  *((_QWORD *)v147 + 92584) = vpx_sad8x8_avg_neon;
  *((_QWORD *)v147 + 92585) = vpx_variance8x8;
  *((_QWORD *)v147 + 92586) = vpx_sub_pixel_variance8x8_neon;
  *((_QWORD *)v147 + 92587) = vpx_sub_pixel_avg_variance8x8_neon;
  *((_QWORD *)v147 + 92588) = vpx_sad8x8x4d_neon;
  *((_QWORD *)v147 + 92589) = vpx_sad_skip_8x8x4d_neon;
  *((_QWORD *)v147 + 92574) = vpx_sad8x4_neon;
  *((_QWORD *)v147 + 92575) = vpx_sad_skip_8x4_neon;
  *((_QWORD *)v147 + 92576) = vpx_sad8x4_avg_neon;
  *((_QWORD *)v147 + 92577) = vpx_variance8x4;
  *((_QWORD *)v147 + 92578) = vpx_sub_pixel_variance8x4_neon;
  *((_QWORD *)v147 + 92579) = vpx_sub_pixel_avg_variance8x4_neon;
  *((_QWORD *)v147 + 92580) = vpx_sad8x4x4d_neon;
  *((_QWORD *)v147 + 92581) = vpx_sad_skip_8x4x4d_neon;
  *((_QWORD *)v147 + 92566) = vpx_sad4x8_neon;
  *((_QWORD *)v147 + 92567) = vpx_sad_skip_4x8_neon;
  *((_QWORD *)v147 + 92568) = vpx_sad4x8_avg_neon;
  *((_QWORD *)v147 + 92569) = vpx_variance4x8;
  *((_QWORD *)v147 + 92570) = vpx_sub_pixel_variance4x8_neon;
  *((_QWORD *)v147 + 92571) = vpx_sub_pixel_avg_variance4x8_neon;
  *((_QWORD *)v147 + 92572) = vpx_sad4x8x4d_neon;
  *((_QWORD *)v147 + 92573) = vpx_sad_skip_4x8x4d_neon;
  *((_QWORD *)v147 + 92558) = vpx_sad4x4_neon;
  *((_QWORD *)v147 + 92559) = vpx_sad_skip_4x4_neon;
  *((_QWORD *)v147 + 92560) = vpx_sad4x4_avg_neon;
  *((_QWORD *)v147 + 92561) = vpx_variance4x4;
  *((_QWORD *)v147 + 92562) = vpx_sub_pixel_variance4x4_neon;
  *((_QWORD *)v147 + 92563) = vpx_sub_pixel_avg_variance4x4_neon;
  *((_QWORD *)v147 + 92564) = vpx_sad4x4x4d_neon;
  *((_QWORD *)v147 + 92565) = vpx_sad_skip_4x4x4d_neon;
  highbd_set_var_fns((uint64_t (*)(uint64_t, int, uint64_t, int, uint64_t))v147);
  vp9_init_quantizer(v147);
  update_sharpness((uint64_t)(v147 + 43316), v147[44108]);
  v147[44109] = v147[44108];
  *((_QWORD *)v147 + 21663) = 0;
  *((_QWORD *)v147 + 21662) = 0;
  *((_QWORD *)v147 + 21669) = 0;
  *((_QWORD *)v147 + 21668) = 0;
  *((_QWORD *)v147 + 21675) = 0;
  *((_QWORD *)v147 + 21674) = 0;
  *((_QWORD *)v147 + 21681) = 0;
  *((_QWORD *)v147 + 21680) = 0;
  *((_QWORD *)v147 + 21687) = 0;
  *((_QWORD *)v147 + 21686) = 0;
  *((_QWORD *)v147 + 21693) = 0;
  *((_QWORD *)v147 + 21692) = 0;
  *((_QWORD *)v147 + 21699) = 0;
  *((_QWORD *)v147 + 21698) = 0;
  *((_QWORD *)v147 + 21704) = 0;
  *((_QWORD *)v147 + 21705) = 0;
  *((_QWORD *)v147 + 21710) = 0;
  *((_QWORD *)v147 + 21711) = 0;
  *((_QWORD *)v147 + 21717) = 0;
  *((_QWORD *)v147 + 21716) = 0;
  *((_QWORD *)v147 + 21722) = 0;
  *((_QWORD *)v147 + 21723) = 0;
  *((_QWORD *)v147 + 21728) = 0;
  *((_QWORD *)v147 + 21729) = 0;
  *((_QWORD *)v147 + 21734) = 0;
  *((_QWORD *)v147 + 21735) = 0;
  *((_QWORD *)v147 + 21740) = 0;
  *((_QWORD *)v147 + 21741) = 0;
  *((_QWORD *)v147 + 21746) = 0;
  *((_QWORD *)v147 + 21747) = 0;
  *((_QWORD *)v147 + 21752) = 0;
  *((_QWORD *)v147 + 21753) = 0;
  *((_QWORD *)v147 + 21758) = 0x101010101010101;
  *((_QWORD *)v147 + 21759) = 0x101010101010101;
  *((_QWORD *)v147 + 21765) = 0x101010101010101;
  *((_QWORD *)v147 + 21764) = 0x101010101010101;
  *((_QWORD *)v147 + 21771) = 0x101010101010101;
  *((_QWORD *)v147 + 21770) = 0x101010101010101;
  *((_QWORD *)v147 + 21777) = 0x101010101010101;
  *((_QWORD *)v147 + 21776) = 0x101010101010101;
  *((_QWORD *)v147 + 21783) = 0x101010101010101;
  *((_QWORD *)v147 + 21782) = 0x101010101010101;
  *((_QWORD *)v147 + 21789) = 0x101010101010101;
  *((_QWORD *)v147 + 21788) = 0x101010101010101;
  *((_QWORD *)v147 + 21795) = 0x101010101010101;
  *((_QWORD *)v147 + 21794) = 0x101010101010101;
  *((_QWORD *)v147 + 21801) = 0x101010101010101;
  *((_QWORD *)v147 + 21800) = 0x101010101010101;
  *((_QWORD *)v147 + 21807) = 0x101010101010101;
  *((_QWORD *)v147 + 21806) = 0x101010101010101;
  *((_QWORD *)v147 + 21813) = 0x101010101010101;
  *((_QWORD *)v147 + 21812) = 0x101010101010101;
  *((_QWORD *)v147 + 21819) = 0x101010101010101;
  *((_QWORD *)v147 + 21818) = 0x101010101010101;
  *((_QWORD *)v147 + 21825) = 0x101010101010101;
  *((_QWORD *)v147 + 21824) = 0x101010101010101;
  *((_QWORD *)v147 + 21831) = 0x101010101010101;
  *((_QWORD *)v147 + 21830) = 0x101010101010101;
  *((_QWORD *)v147 + 21837) = 0x101010101010101;
  *((_QWORD *)v147 + 21836) = 0x101010101010101;
  *((_QWORD *)v147 + 21843) = 0x101010101010101;
  *((_QWORD *)v147 + 21842) = 0x101010101010101;
  *((_QWORD *)v147 + 21849) = 0x101010101010101;
  *((_QWORD *)v147 + 21848) = 0x101010101010101;
  *((_QWORD *)v147 + 21855) = 0x202020202020202;
  *((_QWORD *)v147 + 21854) = 0x202020202020202;
  *((_QWORD *)v147 + 21861) = 0x202020202020202;
  *((_QWORD *)v147 + 21860) = 0x202020202020202;
  *((_QWORD *)v147 + 21867) = 0x202020202020202;
  *((_QWORD *)v147 + 21866) = 0x202020202020202;
  *((_QWORD *)v147 + 21873) = 0x202020202020202;
  *((_QWORD *)v147 + 21872) = 0x202020202020202;
  *((_QWORD *)v147 + 21879) = 0x202020202020202;
  *((_QWORD *)v147 + 21878) = 0x202020202020202;
  *((_QWORD *)v147 + 21885) = 0x202020202020202;
  *((_QWORD *)v147 + 21884) = 0x202020202020202;
  *((_QWORD *)v147 + 21891) = 0x202020202020202;
  *((_QWORD *)v147 + 21890) = 0x202020202020202;
  *((_QWORD *)v147 + 21897) = 0x202020202020202;
  *((_QWORD *)v147 + 21896) = 0x202020202020202;
  *((_QWORD *)v147 + 21903) = 0x202020202020202;
  *((_QWORD *)v147 + 21902) = 0x202020202020202;
  *((_QWORD *)v147 + 21909) = 0x202020202020202;
  *((_QWORD *)v147 + 21908) = 0x202020202020202;
  *((_QWORD *)v147 + 21915) = 0x202020202020202;
  *((_QWORD *)v147 + 21914) = 0x202020202020202;
  *((_QWORD *)v147 + 21921) = 0x202020202020202;
  *((_QWORD *)v147 + 21920) = 0x202020202020202;
  *((_QWORD *)v147 + 21927) = 0x202020202020202;
  *((_QWORD *)v147 + 21926) = 0x202020202020202;
  *((_QWORD *)v147 + 21933) = 0x202020202020202;
  *((_QWORD *)v147 + 21932) = 0x202020202020202;
  *((_QWORD *)v147 + 21939) = 0x202020202020202;
  *((_QWORD *)v147 + 21938) = 0x202020202020202;
  *((_QWORD *)v147 + 21945) = 0x202020202020202;
  *((_QWORD *)v147 + 21944) = 0x202020202020202;
  *((_QWORD *)v147 + 21951) = 0x303030303030303;
  *((_QWORD *)v147 + 21950) = 0x303030303030303;
  *((_QWORD *)v147 + 21957) = 0x303030303030303;
  *((_QWORD *)v147 + 21956) = 0x303030303030303;
  *((_QWORD *)v147 + 21963) = 0x303030303030303;
  *((_QWORD *)v147 + 21962) = 0x303030303030303;
  *((_QWORD *)v147 + 21969) = 0x303030303030303;
  *((_QWORD *)v147 + 21968) = 0x303030303030303;
  *((_QWORD *)v147 + 21975) = 0x303030303030303;
  *((_QWORD *)v147 + 21974) = 0x303030303030303;
  *((_QWORD *)v147 + 21981) = 0x303030303030303;
  *((_QWORD *)v147 + 21980) = 0x303030303030303;
  *((_QWORD *)v147 + 21987) = 0x303030303030303;
  *((_QWORD *)v147 + 21986) = 0x303030303030303;
  *((_QWORD *)v147 + 21993) = 0x303030303030303;
  *((_QWORD *)v147 + 21992) = 0x303030303030303;
  *((_QWORD *)v147 + 21999) = 0x303030303030303;
  *((_QWORD *)v147 + 21998) = 0x303030303030303;
  *((_QWORD *)v147 + 22005) = 0x303030303030303;
  *((_QWORD *)v147 + 22004) = 0x303030303030303;
  *((_QWORD *)v147 + 22011) = 0x303030303030303;
  *((_QWORD *)v147 + 22010) = 0x303030303030303;
  *((_QWORD *)v147 + 22017) = 0x303030303030303;
  *((_QWORD *)v147 + 22016) = 0x303030303030303;
  *((_QWORD *)v147 + 22023) = 0x303030303030303;
  *((_QWORD *)v147 + 22022) = 0x303030303030303;
  *((_QWORD *)v147 + 22029) = 0x303030303030303;
  *((_QWORD *)v147 + 22028) = 0x303030303030303;
  *((_QWORD *)v147 + 22035) = 0x303030303030303;
  *((_QWORD *)v147 + 22034) = 0x303030303030303;
  *((_QWORD *)v147 + 22041) = 0x303030303030303;
  *((_QWORD *)v147 + 22040) = 0x303030303030303;
  vp9_setup_scale_factors_for_frame((uint64_t)(v147 + 185074), v147[42997], v147[42998], v147[42997], v147[42998], v147[43005]);
  *((_QWORD *)v147 + 16966) = v147 + 185074;
  v147[42946] = 0;
  return v147;
}

void vp9_remove_compressor(uint64_t a1, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  int i;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  FILE *v137;
  uint64_t v138;
  __int128 v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;

  if (a1)
  {
    v3 = a1 + 834736;
    v4 = (_QWORD *)(a1 + 758648);
    v5 = a1 + 736296;
    v6 = (_QWORD *)(a1 + 194784);
    v7 = a1 + 189944;
    v140 = (_BYTE *)(a1 + 171783);
    v141 = a1 + 850616;
    v8 = (_QWORD *)(a1 + 163488);
    v142 = a1 + 171696;
    vp9_denoiser_free((uint64_t *)(a1 + 841880), a2);
    if (*(_DWORD *)(v7 + 4352))
    {
      pthread_mutex_destroy((pthread_mutex_t *)(a1 + 194232));
      v9 = *(_QWORD *)(v7 + 4360);
      if (v9)
        free(*(void **)(v9 - 8));
    }
    v10 = (_QWORD *)(v7 + 872);
    v11 = 50;
    do
    {
      if (*v10)
        free(*(void **)(*v10 - 8));
      *((_BYTE *)v10 - 8) = 0;
      v10 += 5;
      --v11;
    }
    while (v11);
    v12 = *(_DWORD *)(v7 + 2864);
    if (v12 >= 1)
    {
      v13 = 0;
      v14 = 16;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v7 + 2872) + v14);
        if (v15)
        {
          free(*(void **)(v15 - 8));
          v12 = *(_DWORD *)(v7 + 2864);
        }
        ++v13;
        v14 += 24;
      }
      while (v13 < v12);
    }
    v16 = *(_QWORD *)(v7 + 2872);
    if (v16)
      free(*(void **)(v16 - 8));
    vp9_loop_filter_dealloc((int *)(a1 + 842256));
    v17 = *(_QWORD *)(v3 + 7608);
    if (v17)
    {
      v18 = *(_DWORD *)(v3 + 7500);
      if (v18 < 2)
        goto LABEL_24;
      v19 = 1;
      v20 = 736;
      do
      {
        v21 = *(_QWORD *)(*(_QWORD *)(v3 + 7608) + v20);
        if (v21)
        {
          free(*(void **)(v21 - 8));
          v18 = *(_DWORD *)(v3 + 7500);
        }
        ++v19;
        v20 += 736;
      }
      while (v19 < v18);
      v17 = *(_QWORD *)(v3 + 7608);
      if (v17)
LABEL_24:
        free(*(void **)(v17 - 8));
      *(_QWORD *)(v3 + 7608) = 0;
    }
    vp9_row_mt_mem_dealloc(a1);
    vp9_encode_free_mt_data(a1);
    if (*v8)
      free(*(void **)(*v8 - 8));
    *v8 = 0;
    v22 = *(_QWORD *)(v7 + 4544);
    if (v22)
      free(*(void **)(v22 - 8));
    *(_QWORD *)(v7 + 4544) = 0;
    v23 = *(_QWORD *)(v5 + 3920);
    if (v23)
      free(*(void **)(v23 - 8));
    *(_QWORD *)(v5 + 3920) = 0;
    if (*(_QWORD *)v5)
      free(*(void **)(*(_QWORD *)v5 - 8));
    *(_QWORD *)v5 = 0;
    v24 = *(_QWORD *)(v5 + 2064);
    if (v24)
      free(*(void **)(v24 - 8));
    v25 = *(_QWORD *)(v5 + 2072);
    if (v25)
      free(*(void **)(v25 - 8));
    *(_QWORD *)(v5 + 2064) = 0;
    *(_QWORD *)(v5 + 2072) = 0;
    v26 = *(_QWORD *)(v5 + 2080);
    if (v26)
      free(*(void **)(v26 - 8));
    v27 = *(_QWORD *)(v5 + 2088);
    if (v27)
      free(*(void **)(v27 - 8));
    *(_QWORD *)(v5 + 2080) = 0;
    *(_QWORD *)(v5 + 2088) = 0;
    v28 = *(_QWORD *)(v5 + 2096);
    if (v28)
      free(*(void **)(v28 - 8));
    v29 = *(_QWORD *)(v5 + 2104);
    if (v29)
      free(*(void **)(v29 - 8));
    *(_QWORD *)(v5 + 2096) = 0;
    *(_QWORD *)(v5 + 2104) = 0;
    v30 = *(_QWORD *)(v5 + 2112);
    if (v30)
      free(*(void **)(v30 - 8));
    v31 = *(_QWORD *)(v5 + 2120);
    if (v31)
      free(*(void **)(v31 - 8));
    *(_QWORD *)(v5 + 2112) = 0;
    *(_QWORD *)(v5 + 2120) = 0;
    v32 = *(_QWORD *)(v5 + 3928);
    if (v32)
      free(*(void **)(v32 - 8));
    *(_QWORD *)(v5 + 3928) = 0;
    v33 = *(_QWORD *)(v3 + 15608);
    if (v33)
      free(*(void **)(v33 - 8));
    *(_QWORD *)(v3 + 15608) = 0;
    if (*(_QWORD *)v3)
      free(*(void **)(*(_QWORD *)v3 - 8));
    *(_QWORD *)v3 = 0;
    v34 = *(_QWORD *)(v3 + 15616);
    if (v34)
      free(*(void **)(v34 - 8));
    *(_QWORD *)(v3 + 15616) = 0;
    v35 = *(_QWORD *)(v3 + 15624);
    if (v35)
      free(*(void **)(v35 - 8));
    *(_QWORD *)(v3 + 15624) = 0;
    v36 = *(_QWORD *)(v3 + 15632);
    if (v36)
      free(*(void **)(v36 - 8));
    *(_QWORD *)(v3 + 15632) = 0;
    v37 = *(_QWORD *)(v3 + 15648);
    if (v37)
      free(*(void **)(v37 - 8));
    *(_QWORD *)(v3 + 15648) = 0;
    v38 = *(_QWORD *)(v3 + 15680);
    if (v38)
      free(*(void **)(v38 - 8));
    *(_QWORD *)(v3 + 15680) = 0;
    v39 = *(_QWORD *)(v3 + 15688);
    if (v39)
      free(*(void **)(v39 - 8));
    *(_QWORD *)(v3 + 15688) = 0;
    v40 = *(_QWORD *)(v5 + 3968);
    if (v40)
    {
      v41 = *(_QWORD *)(v40 + 32);
      if (v41)
        free(*(void **)(v41 - 8));
      v42 = *(_QWORD *)(v40 + 40);
      if (v42)
        free(*(void **)(v42 - 8));
      free(*(void **)(v40 - 8));
    }
    *(_QWORD *)(v5 + 3968) = 0;
    v43 = *(_QWORD *)(v5 + 3984);
    if (v43)
      free(*(void **)(v43 - 8));
    *(_QWORD *)(v5 + 3984) = 0;
    v44 = *(_QWORD *)(v3 + 15712);
    if (v44)
      free(*(void **)(v44 - 8));
    *(_QWORD *)(v3 + 15712) = 0;
    v45 = *(_QWORD *)(v3 + 7432);
    if (v45)
      free(*(void **)(v45 - 8));
    *(_QWORD *)(v3 + 7432) = 0;
    v46 = *(_QWORD *)(v7 + 4656);
    if (v46)
      free(*(void **)(v46 - 8));
    *(_QWORD *)(v7 + 4656) = 0;
    v47 = *(_QWORD *)(v7 + 4672);
    if (v47)
      free(*(void **)(v47 - 8));
    *(_QWORD *)(v7 + 4672) = 0;
    vp9_free_ref_frame_buffers(*(_QWORD *)v7);
    vp9_free_postproc_buffers(v142);
    vp9_free_context_buffers(v142);
    if (*(_QWORD *)(v7 + 4776))
    {
      v48 = *(_QWORD *)(v7 + 4768);
      if (v48)
        free(*(void **)(v48 - 8));
    }
    v49 = 0uLL;
    *(_OWORD *)(a1 + 194752) = 0u;
    *(_OWORD *)(a1 + 194768) = 0u;
    *(_OWORD *)(a1 + 194720) = 0u;
    *(_OWORD *)(a1 + 194736) = 0u;
    *(_OWORD *)(a1 + 194688) = 0u;
    *(_OWORD *)(a1 + 194704) = 0u;
    *(_OWORD *)(a1 + 194656) = 0u;
    *(_OWORD *)(a1 + 194672) = 0u;
    *(_OWORD *)(a1 + 194624) = 0u;
    *(_OWORD *)(a1 + 194640) = 0u;
    if (*(_QWORD *)(v7 + 616))
    {
      v50 = *(_QWORD *)(v7 + 608);
      if (v50)
      {
        free(*(void **)(v50 - 8));
        v49 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 190592) = v49;
    *(_OWORD *)(a1 + 190608) = v49;
    *(_OWORD *)(a1 + 190560) = v49;
    *(_OWORD *)(a1 + 190576) = v49;
    *(_OWORD *)(a1 + 190528) = v49;
    *(_OWORD *)(a1 + 190544) = v49;
    *(_OWORD *)(a1 + 190496) = v49;
    *(_OWORD *)(a1 + 190512) = v49;
    *(_OWORD *)(a1 + 190464) = v49;
    *(_OWORD *)(a1 + 190480) = v49;
    if (*(_QWORD *)(v7 + 784))
    {
      v51 = *(_QWORD *)(v7 + 776);
      if (v51)
        free(*(void **)(v51 - 8));
    }
    v52 = 0uLL;
    *(_OWORD *)(a1 + 190760) = 0u;
    *(_OWORD *)(a1 + 190776) = 0u;
    *(_OWORD *)(a1 + 190728) = 0u;
    *(_OWORD *)(a1 + 190744) = 0u;
    *(_OWORD *)(a1 + 190696) = 0u;
    *(_OWORD *)(a1 + 190712) = 0u;
    *(_OWORD *)(a1 + 190664) = 0u;
    *(_OWORD *)(a1 + 190680) = 0u;
    *(_OWORD *)(a1 + 190632) = 0u;
    *(_OWORD *)(a1 + 190648) = 0u;
    if (*(_QWORD *)(v5 + 11112))
    {
      v53 = *(_QWORD *)(v5 + 11104);
      if (v53)
      {
        free(*(void **)(v53 - 8));
        v52 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 747440) = v52;
    *(_OWORD *)(a1 + 747456) = v52;
    *(_OWORD *)(a1 + 747408) = v52;
    *(_OWORD *)(a1 + 747424) = v52;
    *(_OWORD *)(a1 + 747376) = v52;
    *(_OWORD *)(a1 + 747392) = v52;
    *(_OWORD *)(a1 + 747344) = v52;
    *(_OWORD *)(a1 + 747360) = v52;
    *(_OWORD *)(a1 + 747312) = v52;
    *(_OWORD *)(a1 + 747328) = v52;
    v54 = *(_QWORD **)(v7 + 480);
    if (v54)
    {
      v55 = (char *)v54[3];
      if (v55)
      {
        v56 = *(_DWORD *)v54;
        if (*(int *)v54 >= 1)
        {
          v57 = 0;
          v58 = 0;
          do
          {
            if (v55)
            {
              v59 = &v55[v57];
              if (*(_QWORD *)&v55[v57 + 96])
              {
                v60 = *(_QWORD *)&v55[v57 + 88];
                if (v60)
                {
                  free(*(void **)(v60 - 8));
                  v52 = 0uLL;
                }
              }
              *((_OWORD *)v59 + 8) = v52;
              *((_OWORD *)v59 + 9) = v52;
              *((_OWORD *)v59 + 6) = v52;
              *((_OWORD *)v59 + 7) = v52;
              *((_OWORD *)v59 + 4) = v52;
              *((_OWORD *)v59 + 5) = v52;
              *((_OWORD *)v59 + 2) = v52;
              *((_OWORD *)v59 + 3) = v52;
              *(_OWORD *)v59 = v52;
              *((_OWORD *)v59 + 1) = v52;
              v56 = *(_DWORD *)v54;
            }
            ++v58;
            v55 = (char *)v54[3];
            v57 += 192;
          }
          while (v58 < v56);
        }
        free(v55);
      }
      free(v54);
    }
    if (*v6)
      free(*(void **)(*v6 - 8));
    *v6 = 0;
    v61 = v6[256];
    if (v61)
      free(*(void **)(v61 - 8));
    v6[256] = 0;
    vp9_free_pc_tree(a1 + 49200);
    v62 = *(_DWORD *)(v5 + 11224);
    if (v62 >= 1)
    {
      v63 = 0;
      do
      {
        if (*v4)
        {
          free(*(void **)(*v4 - 8));
          v62 = *(_DWORD *)(v5 + 11224);
        }
        ++v63;
        *v4 = 0;
        v4[1] = 0;
        v4 += 860;
      }
      while (v63 < v62);
    }
    v64 = *(_QWORD *)(v3 + 704);
    if (v64)
    {
      free(*(void **)(v64 - 8));
      *(_QWORD *)(v3 + 704) = 0;
    }
    if (*(_QWORD *)(v5 + 11536))
    {
      v65 = *(_QWORD *)(v5 + 11528);
      if (v65)
        free(*(void **)(v65 - 8));
    }
    v66 = 0uLL;
    *(_OWORD *)(a1 + 747864) = 0u;
    *(_OWORD *)(a1 + 747880) = 0u;
    *(_OWORD *)(a1 + 747832) = 0u;
    *(_OWORD *)(a1 + 747848) = 0u;
    *(_OWORD *)(a1 + 747800) = 0u;
    *(_OWORD *)(a1 + 747816) = 0u;
    *(_OWORD *)(a1 + 747768) = 0u;
    *(_OWORD *)(a1 + 747784) = 0u;
    *(_OWORD *)(a1 + 747736) = 0u;
    *(_OWORD *)(a1 + 747752) = 0u;
    if (*(_QWORD *)(v5 + 11696))
    {
      v67 = *(_QWORD *)(v5 + 11688);
      if (v67)
      {
        free(*(void **)(v67 - 8));
        v66 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 748024) = v66;
    *(_OWORD *)(a1 + 748040) = v66;
    *(_OWORD *)(a1 + 747992) = v66;
    *(_OWORD *)(a1 + 748008) = v66;
    *(_OWORD *)(a1 + 747960) = v66;
    *(_OWORD *)(a1 + 747976) = v66;
    *(_OWORD *)(a1 + 747928) = v66;
    *(_OWORD *)(a1 + 747944) = v66;
    *(_OWORD *)(a1 + 747896) = v66;
    *(_OWORD *)(a1 + 747912) = v66;
    if (*(_QWORD *)(v5 + 11856))
    {
      v68 = *(_QWORD *)(v5 + 11848);
      if (v68)
        free(*(void **)(v68 - 8));
    }
    v69 = 0uLL;
    *(_OWORD *)(a1 + 748184) = 0u;
    *(_OWORD *)(a1 + 748200) = 0u;
    *(_OWORD *)(a1 + 748152) = 0u;
    *(_OWORD *)(a1 + 748168) = 0u;
    *(_OWORD *)(a1 + 748120) = 0u;
    *(_OWORD *)(a1 + 748136) = 0u;
    *(_OWORD *)(a1 + 748088) = 0u;
    *(_OWORD *)(a1 + 748104) = 0u;
    *(_OWORD *)(a1 + 748056) = 0u;
    *(_OWORD *)(a1 + 748072) = 0u;
    if (*(_QWORD *)(v5 + 12016))
    {
      v70 = *(_QWORD *)(v5 + 12008);
      if (v70)
      {
        free(*(void **)(v70 - 8));
        v69 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 748344) = v69;
    *(_OWORD *)(a1 + 748360) = v69;
    *(_OWORD *)(a1 + 748312) = v69;
    *(_OWORD *)(a1 + 748328) = v69;
    *(_OWORD *)(a1 + 748280) = v69;
    *(_OWORD *)(a1 + 748296) = v69;
    *(_OWORD *)(a1 + 748248) = v69;
    *(_OWORD *)(a1 + 748264) = v69;
    *(_OWORD *)(a1 + 748216) = v69;
    *(_OWORD *)(a1 + 748232) = v69;
    if (*(_QWORD *)(v5 + 12176))
    {
      v71 = *(_QWORD *)(v5 + 12168);
      if (v71)
        free(*(void **)(v71 - 8));
    }
    v72 = 0uLL;
    *(_OWORD *)(a1 + 748504) = 0u;
    *(_OWORD *)(a1 + 748520) = 0u;
    *(_OWORD *)(a1 + 748472) = 0u;
    *(_OWORD *)(a1 + 748488) = 0u;
    *(_OWORD *)(a1 + 748440) = 0u;
    *(_OWORD *)(a1 + 748456) = 0u;
    *(_OWORD *)(a1 + 748408) = 0u;
    *(_OWORD *)(a1 + 748424) = 0u;
    *(_OWORD *)(a1 + 748376) = 0u;
    *(_OWORD *)(a1 + 748392) = 0u;
    if (*(_QWORD *)(v5 + 12336))
    {
      v73 = *(_QWORD *)(v5 + 12328);
      if (v73)
      {
        free(*(void **)(v73 - 8));
        v72 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 748664) = v72;
    *(_OWORD *)(a1 + 748680) = v72;
    *(_OWORD *)(a1 + 748632) = v72;
    *(_OWORD *)(a1 + 748648) = v72;
    *(_OWORD *)(a1 + 748600) = v72;
    *(_OWORD *)(a1 + 748616) = v72;
    *(_OWORD *)(a1 + 748568) = v72;
    *(_OWORD *)(a1 + 748584) = v72;
    *(_OWORD *)(a1 + 748536) = v72;
    *(_OWORD *)(a1 + 748552) = v72;
    if (*(_QWORD *)(v5 + 12496))
    {
      v74 = *(_QWORD *)(v5 + 12488);
      if (v74)
        free(*(void **)(v74 - 8));
    }
    v75 = 0uLL;
    *(_OWORD *)(a1 + 748824) = 0u;
    *(_OWORD *)(a1 + 748840) = 0u;
    *(_OWORD *)(a1 + 748792) = 0u;
    *(_OWORD *)(a1 + 748808) = 0u;
    *(_OWORD *)(a1 + 748760) = 0u;
    *(_OWORD *)(a1 + 748776) = 0u;
    *(_OWORD *)(a1 + 748728) = 0u;
    *(_OWORD *)(a1 + 748744) = 0u;
    *(_OWORD *)(a1 + 748696) = 0u;
    *(_OWORD *)(a1 + 748712) = 0u;
    if (*(_QWORD *)(v5 + 12656))
    {
      v76 = *(_QWORD *)(v5 + 12648);
      if (v76)
      {
        free(*(void **)(v76 - 8));
        v75 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 748984) = v75;
    *(_OWORD *)(a1 + 749000) = v75;
    *(_OWORD *)(a1 + 748952) = v75;
    *(_OWORD *)(a1 + 748968) = v75;
    *(_OWORD *)(a1 + 748920) = v75;
    *(_OWORD *)(a1 + 748936) = v75;
    *(_OWORD *)(a1 + 748888) = v75;
    *(_OWORD *)(a1 + 748904) = v75;
    *(_OWORD *)(a1 + 748856) = v75;
    *(_OWORD *)(a1 + 748872) = v75;
    if (*(_QWORD *)(v5 + 12816))
    {
      v77 = *(_QWORD *)(v5 + 12808);
      if (v77)
        free(*(void **)(v77 - 8));
    }
    v78 = 0uLL;
    *(_OWORD *)(a1 + 749144) = 0u;
    *(_OWORD *)(a1 + 749160) = 0u;
    *(_OWORD *)(a1 + 749112) = 0u;
    *(_OWORD *)(a1 + 749128) = 0u;
    *(_OWORD *)(a1 + 749080) = 0u;
    *(_OWORD *)(a1 + 749096) = 0u;
    *(_OWORD *)(a1 + 749048) = 0u;
    *(_OWORD *)(a1 + 749064) = 0u;
    *(_OWORD *)(a1 + 749016) = 0u;
    *(_OWORD *)(a1 + 749032) = 0u;
    if (*(_QWORD *)(v5 + 12976))
    {
      v79 = *(_QWORD *)(v5 + 12968);
      if (v79)
      {
        free(*(void **)(v79 - 8));
        v78 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 749304) = v78;
    *(_OWORD *)(a1 + 749320) = v78;
    *(_OWORD *)(a1 + 749272) = v78;
    *(_OWORD *)(a1 + 749288) = v78;
    *(_OWORD *)(a1 + 749240) = v78;
    *(_OWORD *)(a1 + 749256) = v78;
    *(_OWORD *)(a1 + 749208) = v78;
    *(_OWORD *)(a1 + 749224) = v78;
    *(_OWORD *)(a1 + 749176) = v78;
    *(_OWORD *)(a1 + 749192) = v78;
    if (*(_QWORD *)(v5 + 13136))
    {
      v80 = *(_QWORD *)(v5 + 13128);
      if (v80)
        free(*(void **)(v80 - 8));
    }
    v81 = 0uLL;
    *(_OWORD *)(a1 + 749464) = 0u;
    *(_OWORD *)(a1 + 749480) = 0u;
    *(_OWORD *)(a1 + 749432) = 0u;
    *(_OWORD *)(a1 + 749448) = 0u;
    *(_OWORD *)(a1 + 749400) = 0u;
    *(_OWORD *)(a1 + 749416) = 0u;
    *(_OWORD *)(a1 + 749368) = 0u;
    *(_OWORD *)(a1 + 749384) = 0u;
    *(_OWORD *)(a1 + 749336) = 0u;
    *(_OWORD *)(a1 + 749352) = 0u;
    if (*(_QWORD *)(v5 + 13296))
    {
      v82 = *(_QWORD *)(v5 + 13288);
      if (v82)
      {
        free(*(void **)(v82 - 8));
        v81 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 749624) = v81;
    *(_OWORD *)(a1 + 749640) = v81;
    *(_OWORD *)(a1 + 749592) = v81;
    *(_OWORD *)(a1 + 749608) = v81;
    *(_OWORD *)(a1 + 749560) = v81;
    *(_OWORD *)(a1 + 749576) = v81;
    *(_OWORD *)(a1 + 749528) = v81;
    *(_OWORD *)(a1 + 749544) = v81;
    *(_OWORD *)(a1 + 749496) = v81;
    *(_OWORD *)(a1 + 749512) = v81;
    if (*(_QWORD *)(v5 + 13456))
    {
      v83 = *(_QWORD *)(v5 + 13448);
      if (v83)
        free(*(void **)(v83 - 8));
    }
    v84 = 0uLL;
    *(_OWORD *)(a1 + 749784) = 0u;
    *(_OWORD *)(a1 + 749800) = 0u;
    *(_OWORD *)(a1 + 749752) = 0u;
    *(_OWORD *)(a1 + 749768) = 0u;
    *(_OWORD *)(a1 + 749720) = 0u;
    *(_OWORD *)(a1 + 749736) = 0u;
    *(_OWORD *)(a1 + 749688) = 0u;
    *(_OWORD *)(a1 + 749704) = 0u;
    *(_OWORD *)(a1 + 749656) = 0u;
    *(_OWORD *)(a1 + 749672) = 0u;
    if (*(_QWORD *)(v5 + 13616))
    {
      v85 = *(_QWORD *)(v5 + 13608);
      if (v85)
      {
        free(*(void **)(v85 - 8));
        v84 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 749944) = v84;
    *(_OWORD *)(a1 + 749960) = v84;
    *(_OWORD *)(a1 + 749912) = v84;
    *(_OWORD *)(a1 + 749928) = v84;
    *(_OWORD *)(a1 + 749880) = v84;
    *(_OWORD *)(a1 + 749896) = v84;
    *(_OWORD *)(a1 + 749848) = v84;
    *(_OWORD *)(a1 + 749864) = v84;
    *(_OWORD *)(a1 + 749816) = v84;
    *(_OWORD *)(a1 + 749832) = v84;
    if (*(_QWORD *)(v5 + 13776))
    {
      v86 = *(_QWORD *)(v5 + 13768);
      if (v86)
        free(*(void **)(v86 - 8));
    }
    v87 = 0uLL;
    *(_OWORD *)(a1 + 750104) = 0u;
    *(_OWORD *)(a1 + 750120) = 0u;
    *(_OWORD *)(a1 + 750072) = 0u;
    *(_OWORD *)(a1 + 750088) = 0u;
    *(_OWORD *)(a1 + 750040) = 0u;
    *(_OWORD *)(a1 + 750056) = 0u;
    *(_OWORD *)(a1 + 750008) = 0u;
    *(_OWORD *)(a1 + 750024) = 0u;
    *(_OWORD *)(a1 + 749976) = 0u;
    *(_OWORD *)(a1 + 749992) = 0u;
    if (*(_QWORD *)(v5 + 13936))
    {
      v88 = *(_QWORD *)(v5 + 13928);
      if (v88)
      {
        free(*(void **)(v88 - 8));
        v87 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 750264) = v87;
    *(_OWORD *)(a1 + 750280) = v87;
    *(_OWORD *)(a1 + 750232) = v87;
    *(_OWORD *)(a1 + 750248) = v87;
    *(_OWORD *)(a1 + 750200) = v87;
    *(_OWORD *)(a1 + 750216) = v87;
    *(_OWORD *)(a1 + 750168) = v87;
    *(_OWORD *)(a1 + 750184) = v87;
    *(_OWORD *)(a1 + 750136) = v87;
    *(_OWORD *)(a1 + 750152) = v87;
    if (*(_QWORD *)(v5 + 14096))
    {
      v89 = *(_QWORD *)(v5 + 14088);
      if (v89)
        free(*(void **)(v89 - 8));
    }
    v90 = 0uLL;
    *(_OWORD *)(a1 + 750424) = 0u;
    *(_OWORD *)(a1 + 750440) = 0u;
    *(_OWORD *)(a1 + 750392) = 0u;
    *(_OWORD *)(a1 + 750408) = 0u;
    *(_OWORD *)(a1 + 750360) = 0u;
    *(_OWORD *)(a1 + 750376) = 0u;
    *(_OWORD *)(a1 + 750328) = 0u;
    *(_OWORD *)(a1 + 750344) = 0u;
    *(_OWORD *)(a1 + 750296) = 0u;
    *(_OWORD *)(a1 + 750312) = 0u;
    if (*(_QWORD *)(v5 + 14256))
    {
      v91 = *(_QWORD *)(v5 + 14248);
      if (v91)
      {
        free(*(void **)(v91 - 8));
        v90 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 750584) = v90;
    *(_OWORD *)(a1 + 750600) = v90;
    *(_OWORD *)(a1 + 750552) = v90;
    *(_OWORD *)(a1 + 750568) = v90;
    *(_OWORD *)(a1 + 750520) = v90;
    *(_OWORD *)(a1 + 750536) = v90;
    *(_OWORD *)(a1 + 750488) = v90;
    *(_OWORD *)(a1 + 750504) = v90;
    *(_OWORD *)(a1 + 750456) = v90;
    *(_OWORD *)(a1 + 750472) = v90;
    if (*(_QWORD *)(v5 + 14416))
    {
      v92 = *(_QWORD *)(v5 + 14408);
      if (v92)
        free(*(void **)(v92 - 8));
    }
    v93 = 0uLL;
    *(_OWORD *)(a1 + 750744) = 0u;
    *(_OWORD *)(a1 + 750760) = 0u;
    *(_OWORD *)(a1 + 750712) = 0u;
    *(_OWORD *)(a1 + 750728) = 0u;
    *(_OWORD *)(a1 + 750680) = 0u;
    *(_OWORD *)(a1 + 750696) = 0u;
    *(_OWORD *)(a1 + 750648) = 0u;
    *(_OWORD *)(a1 + 750664) = 0u;
    *(_OWORD *)(a1 + 750616) = 0u;
    *(_OWORD *)(a1 + 750632) = 0u;
    if (*(_QWORD *)(v5 + 14576))
    {
      v94 = *(_QWORD *)(v5 + 14568);
      if (v94)
      {
        free(*(void **)(v94 - 8));
        v93 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 750904) = v93;
    *(_OWORD *)(a1 + 750920) = v93;
    *(_OWORD *)(a1 + 750872) = v93;
    *(_OWORD *)(a1 + 750888) = v93;
    *(_OWORD *)(a1 + 750840) = v93;
    *(_OWORD *)(a1 + 750856) = v93;
    *(_OWORD *)(a1 + 750808) = v93;
    *(_OWORD *)(a1 + 750824) = v93;
    *(_OWORD *)(a1 + 750776) = v93;
    *(_OWORD *)(a1 + 750792) = v93;
    if (*(_QWORD *)(v5 + 14736))
    {
      v95 = *(_QWORD *)(v5 + 14728);
      if (v95)
        free(*(void **)(v95 - 8));
    }
    v96 = 0uLL;
    *(_OWORD *)(a1 + 751064) = 0u;
    *(_OWORD *)(a1 + 751080) = 0u;
    *(_OWORD *)(a1 + 751032) = 0u;
    *(_OWORD *)(a1 + 751048) = 0u;
    *(_OWORD *)(a1 + 751000) = 0u;
    *(_OWORD *)(a1 + 751016) = 0u;
    *(_OWORD *)(a1 + 750968) = 0u;
    *(_OWORD *)(a1 + 750984) = 0u;
    *(_OWORD *)(a1 + 750936) = 0u;
    *(_OWORD *)(a1 + 750952) = 0u;
    if (*(_QWORD *)(v5 + 14896))
    {
      v97 = *(_QWORD *)(v5 + 14888);
      if (v97)
      {
        free(*(void **)(v97 - 8));
        v96 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 751224) = v96;
    *(_OWORD *)(a1 + 751240) = v96;
    *(_OWORD *)(a1 + 751192) = v96;
    *(_OWORD *)(a1 + 751208) = v96;
    *(_OWORD *)(a1 + 751160) = v96;
    *(_OWORD *)(a1 + 751176) = v96;
    *(_OWORD *)(a1 + 751128) = v96;
    *(_OWORD *)(a1 + 751144) = v96;
    *(_OWORD *)(a1 + 751096) = v96;
    *(_OWORD *)(a1 + 751112) = v96;
    if (*(_QWORD *)(v5 + 15056))
    {
      v98 = *(_QWORD *)(v5 + 15048);
      if (v98)
        free(*(void **)(v98 - 8));
    }
    v99 = 0uLL;
    *(_OWORD *)(a1 + 751384) = 0u;
    *(_OWORD *)(a1 + 751400) = 0u;
    *(_OWORD *)(a1 + 751352) = 0u;
    *(_OWORD *)(a1 + 751368) = 0u;
    *(_OWORD *)(a1 + 751320) = 0u;
    *(_OWORD *)(a1 + 751336) = 0u;
    *(_OWORD *)(a1 + 751288) = 0u;
    *(_OWORD *)(a1 + 751304) = 0u;
    *(_OWORD *)(a1 + 751256) = 0u;
    *(_OWORD *)(a1 + 751272) = 0u;
    if (*(_QWORD *)(v5 + 15216))
    {
      v100 = *(_QWORD *)(v5 + 15208);
      if (v100)
      {
        free(*(void **)(v100 - 8));
        v99 = 0uLL;
      }
    }
    *(_OWORD *)(a1 + 751544) = v99;
    *(_OWORD *)(a1 + 751560) = v99;
    *(_OWORD *)(a1 + 751512) = v99;
    *(_OWORD *)(a1 + 751528) = v99;
    *(_OWORD *)(a1 + 751480) = v99;
    *(_OWORD *)(a1 + 751496) = v99;
    *(_OWORD *)(a1 + 751448) = v99;
    *(_OWORD *)(a1 + 751464) = v99;
    *(_OWORD *)(a1 + 751416) = v99;
    *(_OWORD *)(a1 + 751432) = v99;
    if (*(_QWORD *)(v5 + 15376))
    {
      v101 = *(_QWORD *)(v5 + 15368);
      if (v101)
        free(*(void **)(v101 - 8));
    }
    *(_OWORD *)(a1 + 751704) = 0u;
    *(_OWORD *)(a1 + 751720) = 0u;
    *(_OWORD *)(a1 + 751672) = 0u;
    *(_OWORD *)(a1 + 751688) = 0u;
    *(_OWORD *)(a1 + 751640) = 0u;
    *(_OWORD *)(a1 + 751656) = 0u;
    *(_OWORD *)(a1 + 751608) = 0u;
    *(_OWORD *)(a1 + 751624) = 0u;
    *(_OWORD *)(a1 + 751576) = 0u;
    *(_OWORD *)(a1 + 751592) = 0u;
    bzero((void *)(a1 + 747736), 0xFA0uLL);
    if (*(_QWORD *)(v5 + 15536))
    {
      v102 = *(_QWORD *)(v5 + 15528);
      if (v102)
        free(*(void **)(v102 - 8));
    }
    *(_OWORD *)(a1 + 751864) = 0u;
    *(_OWORD *)(a1 + 751880) = 0u;
    *(_OWORD *)(a1 + 751832) = 0u;
    *(_OWORD *)(a1 + 751848) = 0u;
    *(_OWORD *)(a1 + 751800) = 0u;
    *(_OWORD *)(a1 + 751816) = 0u;
    *(_OWORD *)(a1 + 751768) = 0u;
    *(_OWORD *)(a1 + 751784) = 0u;
    *(_OWORD *)(a1 + 751736) = 0u;
    *(_OWORD *)(a1 + 751752) = 0u;
    if (*(_QWORD *)(v5 + 11336))
    {
      v103 = *(_QWORD *)(v5 + 11328);
      if (v103)
        free(*(void **)(v103 - 8));
    }
    *(_OWORD *)(a1 + 747664) = 0u;
    *(_OWORD *)(a1 + 747680) = 0u;
    *(_OWORD *)(a1 + 747632) = 0u;
    *(_OWORD *)(a1 + 747648) = 0u;
    *(_OWORD *)(a1 + 747600) = 0u;
    *(_OWORD *)(a1 + 747616) = 0u;
    *(_OWORD *)(a1 + 747568) = 0u;
    *(_OWORD *)(a1 + 747584) = 0u;
    *(_OWORD *)(a1 + 747536) = 0u;
    *(_OWORD *)(a1 + 747552) = 0u;
    *(_OWORD *)(a1 + 747696) = 0u;
    *(_OWORD *)(a1 + 747712) = 0u;
    v104 = *(_DWORD *)(v7 + 244);
    if (v104 >= 1)
    {
      v105 = *(_DWORD *)(v7 + 248);
      if (v105 >= 1)
      {
        for (i = 0; i < v104; ++i)
        {
          if (v105 >= 1)
          {
            v107 = 0;
            do
            {
              v108 = v107 + i * v105;
              v109 = *(_QWORD *)(a1 + 6880 * v108 + 758720);
              if (v109)
                free(*(void **)(v109 - 8));
              v110 = *(_QWORD *)(a1 + 6880 * v108 + 758728);
              if (v110)
                free(*(void **)(v110 - 8));
              v111 = *(_QWORD *)(a1 + 6880 * v108 + 758736);
              if (v111)
                free(*(void **)(v111 - 8));
              v105 = *(_DWORD *)(v7 + 248);
              ++v107;
            }
            while ((int)v107 < v105);
            v104 = *(_DWORD *)(v7 + 244);
          }
        }
      }
    }
    v112 = *(_QWORD *)(v5 + 3016);
    if (v112)
      free(*(void **)(v112 - 8));
    v113 = *(_QWORD *)(v5 + 3024);
    if (v113)
      free(*(void **)(v113 - 8));
    v114 = *(_QWORD *)(v5 + 3032);
    if (v114)
      free(*(void **)(v114 - 8));
    v115 = *(_QWORD *)(v5 + 3040);
    if (v115)
      free(*(void **)(v115 - 8));
    v116 = *(_QWORD *)(v5 + 3048);
    if (v116)
      free(*(void **)(v116 - 8));
    v117 = *(_QWORD *)(v5 + 3056);
    if (v117)
      free(*(void **)(v117 - 8));
    v118 = *(_QWORD *)(v5 + 3064);
    if (v118)
      free(*(void **)(v118 - 8));
    v119 = *(_QWORD *)(v5 + 3072);
    if (v119)
      free(*(void **)(v119 - 8));
    v120 = *(_QWORD *)(v5 + 3080);
    if (v120)
      free(*(void **)(v120 - 8));
    v121 = *(_QWORD *)(v5 + 3088);
    if (v121)
      free(*(void **)(v121 - 8));
    v122 = *(_QWORD *)(v5 + 3096);
    if (v122)
      free(*(void **)(v122 - 8));
    v123 = *(_QWORD *)(v5 + 3104);
    if (v123)
      free(*(void **)(v123 - 8));
    v124 = *(_QWORD *)(v5 + 3112);
    if (v124)
      free(*(void **)(v124 - 8));
    v125 = *(_QWORD *)(v5 + 3120);
    if (v125)
      free(*(void **)(v125 - 8));
    v126 = *(_QWORD *)(v5 + 3128);
    if (v126)
      free(*(void **)(v126 - 8));
    v127 = *(_QWORD *)(v5 + 3136);
    if (v127)
      free(*(void **)(v127 - 8));
    v128 = *(_QWORD *)(v5 + 3144);
    if (v128)
      free(*(void **)(v128 - 8));
    v129 = *(_QWORD *)(v5 + 3152);
    if (v129)
      free(*(void **)(v129 - 8));
    v130 = *(_QWORD *)(v5 + 3160);
    if (v130)
      free(*(void **)(v130 - 8));
    v131 = *(_QWORD *)(v5 + 3168);
    if (v131)
      free(*(void **)(v131 - 8));
    v132 = *(_QWORD *)(v5 + 3176);
    if (v132)
      free(*(void **)(v132 - 8));
    v133 = *(_QWORD *)(v5 + 3184);
    if (v133)
      free(*(void **)(v133 - 8));
    v134 = *(_QWORD *)(v5 + 3192);
    if (v134)
      free(*(void **)(v134 - 8));
    v135 = *(_QWORD *)(v5 + 3200);
    if (v135)
      free(*(void **)(v135 - 8));
    v136 = *(_QWORD *)(v5 + 3208);
    if (v136)
      free(*(void **)(v136 - 8));
    if (*(_DWORD *)v141)
    {
      v137 = *(FILE **)(v141 + 168);
      if (v137)
        fclose(v137);
      if ((*(unsigned int (**)(_QWORD))(v141 + 80))(*(_QWORD *)(v141 + 8)) == 1)
        goto LABEL_271;
      v138 = *(_QWORD *)(v141 + 152);
      if (v138)
        free(*(void **)(v138 - 8));
    }
    *(_OWORD *)(v141 + 144) = 0u;
    *(_OWORD *)(v141 + 160) = 0u;
    *(_OWORD *)(v141 + 112) = 0u;
    *(_OWORD *)(v141 + 128) = 0u;
    *(_OWORD *)(v141 + 80) = 0u;
    *(_OWORD *)(v141 + 96) = 0u;
    *(_OWORD *)(v141 + 48) = 0u;
    *(_OWORD *)(v141 + 64) = 0u;
    *(_OWORD *)(v141 + 16) = 0u;
    *(_OWORD *)(v141 + 32) = 0u;
    *(_OWORD *)v141 = 0u;
LABEL_271:
    *(_QWORD *)&v139 = 0x4141414141414141;
    *((_QWORD *)&v139 + 1) = 0x4141414141414141;
    *(_OWORD *)(a1 + 171767) = v139;
    *(_OWORD *)(a1 + 171752) = v139;
    *(_OWORD *)(a1 + 171736) = v139;
    *(_OWORD *)(a1 + 171720) = v139;
    *(_OWORD *)(a1 + 171704) = v139;
    *v140 = 0;
    vp9_remove_common(v142);
    vp9_free_ref_frame_buffers(*(_QWORD *)v7);
    vp9_free_postproc_buffers(v142);
    free(*(void **)(a1 - 8));
  }
}

BOOL vp9_enc_alloc_mi(uint64_t a1, int a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;

  if ((a2 & 0x80000000) == 0
    && (v4 = a2, v5 = 68 * a2, v5 + 23 <= 0x10000000000)
    && (v6 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL)) != 0
    && (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, v7))
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
    *(_QWORD *)(a1 + 1416) = v7;
    v8 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL);
    if (v8 && (v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v9 - 8) = v8, v9))
    {
      bzero((void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
      *(_QWORD *)(a1 + 1432) = v9;
      *(_DWORD *)(a1 + 1412) = a2;
      if ((unint64_t)(8 * v4 + 23) <= 0x10000000000
        && (v10 = malloc_type_malloc(8 * v4 + 23, 0x74AD08B5uLL)) != 0
        && (v11 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v11 - 8) = v10, v11))
      {
        bzero((void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0), 8 * v4);
        *(_QWORD *)(a1 + 1472) = v11;
        v12 = malloc_type_malloc(8 * v4 + 23, 0x74AD08B5uLL);
        if (v12)
        {
          v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v13 - 8) = v12;
          if (v13)
            bzero((void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0), 8 * v4);
        }
        else
        {
          v13 = 0;
        }
        *(_QWORD *)(a1 + 1488) = v13;
        return v13 == 0;
      }
      else
      {
        *(_QWORD *)(a1 + 1472) = 0;
        return 1;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 1432) = 0;
      return 1;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1416) = 0;
    return 1;
  }
}

void vp9_enc_free_mi(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 1416);
  if (v2)
    free(*(void **)(v2 - 8));
  *(_QWORD *)(a1 + 1416) = 0;
  v3 = *(_QWORD *)(a1 + 1432);
  if (v3)
    free(*(void **)(v3 - 8));
  *(_QWORD *)(a1 + 1432) = 0;
  v4 = *(_QWORD *)(a1 + 1472);
  if (v4)
    free(*(void **)(v4 - 8));
  *(_QWORD *)(a1 + 1472) = 0;
  v5 = *(_QWORD *)(a1 + 1488);
  if (v5)
    free(*(void **)(v5 - 8));
  *(_QWORD *)(a1 + 1488) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
}

void vp9_enc_setup_mi(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v2 = *(char **)(a1 + 1416);
  v3 = 68 * *(int *)(a1 + 1324);
  *(_QWORD *)(a1 + 1424) = &v2[v3 + 68];
  bzero(v2, v3 + v3 * *(int *)(a1 + 1312));
  v4 = *(char **)(a1 + 1432);
  v5 = 68 * *(int *)(a1 + 1324);
  *(_QWORD *)(a1 + 1440) = &v4[v5 + 68];
  bzero(v4, v5);
  v6 = *(_DWORD *)(a1 + 1312);
  if (v6 >= 1)
  {
    v7 = 0;
    do
    {
      ++v7;
      v8 = *(_QWORD *)(a1 + 1432) + 68 * *(_DWORD *)(a1 + 1324) * v7;
      *(_DWORD *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 32) = 0uLL;
      *(_OWORD *)(v8 + 48) = 0uLL;
      *(_OWORD *)v8 = 0uLL;
      *(_OWORD *)(v8 + 16) = 0uLL;
      v6 = *(_DWORD *)(a1 + 1312);
    }
    while (v7 < v6);
  }
  v9 = *(char **)(a1 + 1472);
  v10 = *(int *)(a1 + 1324);
  *(_QWORD *)(a1 + 1480) = &v9[8 * v10 + 8];
  *(_QWORD *)(a1 + 1496) = *(_QWORD *)(a1 + 1488) + 8 * v10 + 8;
  bzero(v9, 8 * ((int)v10 + (int)v10 * v6));
}

unsigned __int8 *vp9_scale_and_extend_frame_nonnormative(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;

  v6 = *(unsigned __int8 **)(a1 + 56);
  v7 = *(unsigned __int8 **)(a1 + 64);
  v8 = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 16);
  v11 = *(_DWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 36);
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)(a1 + 28);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  v24 = *(unsigned __int8 **)(a1 + 72);
  v16 = *(_DWORD *)(a2 + 12);
  v17 = *(_DWORD *)(a2 + 16);
  v18 = *(_DWORD *)(a2 + 32);
  v19 = *(_DWORD *)(a2 + 36);
  v20 = *(_DWORD *)(a2 + 8);
  v21 = *(_DWORD *)(a2 + 28);
  v25 = a3;
  if ((*(_BYTE *)(a1 + 152) & 8) == 0)
  {
    vp9_resize_plane(v6, v8, v12, v9, v14, v16, v20, v17);
    if ((*(_BYTE *)(a1 + 152) & 8) != 0)
      goto LABEL_3;
LABEL_6:
    vp9_resize_plane(v7, v11, v13, v10, v15, v18, v21, v19);
    if ((*(_BYTE *)(a1 + 152) & 8) != 0)
      goto LABEL_4;
LABEL_7:
    vp9_resize_plane(v24, v11, v13, v10, v23, v18, v21, v19);
    return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
  }
  vp9_highbd_resize_plane((uint64_t)v6, v8, v12, v9, v14, v16, v20, v17, a3);
  if ((*(_BYTE *)(a1 + 152) & 8) == 0)
    goto LABEL_6;
LABEL_3:
  vp9_highbd_resize_plane((uint64_t)v7, v11, v13, v10, v15, v18, v21, v19, v25);
  if ((*(_BYTE *)(a1 + 152) & 8) == 0)
    goto LABEL_7;
LABEL_4:
  vp9_highbd_resize_plane((uint64_t)v24, v11, v13, v10, v23, v18, v21, v19, v25);
  return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
}

int *vp9_scale_references(int *result)
{
  uint64_t v1;
  _DWORD *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _QWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int *v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  unsigned int v33;
  size_t v34;
  void *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int *__attribute__((__org_typedef(jmp_buf))) v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;

  v1 = 0;
  v2 = result + 184880;
  v3 = result + 47464;
  v4 = result + 42997;
  v5 = result + 48629;
  v6 = result + 48628;
  v7 = result + 48630;
  v8 = result + 48625;
  v42 = result + 48629;
  v43 = result;
  v41 = result + 48628;
  v39 = result + 42924;
  v40 = result + 48630;
  do
  {
    if ((dword_208F472D0[v1] & *v2) == 0)
    {
      if (!v3[55] && !v2[1997])
        goto LABEL_4;
LABEL_3:
      v8[v1] = -1;
      goto LABEL_4;
    }
    v9 = (v1 + 1);
    if (v9 == 2)
      v10 = v5;
    else
      v10 = v7;
    if (v9 == 1)
      v11 = v6;
    else
      v11 = v10;
    v12 = *v11;
    if ((_DWORD)v12 == -1)
      goto LABEL_3;
    v13 = result[v12 + 43012];
    if (v13 == -1)
      goto LABEL_3;
    v14 = (_DWORD *)*((_QWORD *)v3 + 11);
    v15 = &v14[56 * v13];
    v17 = v15[24];
    v16 = v15 + 24;
    v18 = *v4;
    if (v17 == *v4 && v14[56 * v13 + 25] == v4[1])
    {
      if (!v3[55] && !v2[1997])
      {
        v19 = v8[v1];
        if (v19 != -1)
        {
          --v14[56 * v19 + 6];
          v8[v1] = -1;
        }
      }
      v20 = (v1 + 1);
      v21 = v6;
      if (v20 != 1)
      {
        v21 = v5;
        if (v20 != 2)
          v21 = v7;
      }
      v22 = *v21;
      if ((_DWORD)v22 != -1)
        LODWORD(v22) = result[v22 + 43012];
      v23 = &v14[56 * (int)v22];
      *((_QWORD *)v23 + 12) = *v16;
      v8[v1] = v22;
      ++v23[6];
      goto LABEL_4;
    }
    v24 = v8[v1];
    if (v24 != -1)
    {
      v25 = v8[v1];
      v26 = v4[1];
      if (v14[56 * v24 + 24] == v18 && v14[56 * v24 + 25] == v26)
        goto LABEL_4;
      goto LABEL_57;
    }
    if (!v14[6])
    {
      v24 = 0;
      goto LABEL_56;
    }
    if (!v14[62])
    {
      v24 = 1;
      goto LABEL_56;
    }
    if (!v14[118])
    {
      v24 = 2;
      goto LABEL_56;
    }
    if (!v14[174])
    {
      v24 = 3;
      goto LABEL_56;
    }
    if (!v14[230])
    {
      v24 = 4;
      goto LABEL_56;
    }
    if (!v14[286])
    {
      v24 = 5;
      goto LABEL_56;
    }
    if (!v14[342])
    {
      v24 = 6;
      goto LABEL_56;
    }
    if (!v14[398])
    {
      v24 = 7;
      goto LABEL_56;
    }
    if (!v14[454])
    {
      v24 = 8;
      goto LABEL_56;
    }
    if (!v14[510])
    {
      v24 = 9;
      goto LABEL_56;
    }
    if (!v14[566])
    {
      v24 = 10;
      goto LABEL_56;
    }
    if (v14[622])
      break;
    v24 = 11;
LABEL_56:
    v25 = v24;
    v14[56 * v24 + 6] = 1;
    v26 = v4[1];
LABEL_57:
    v27 = (uint64_t)&v14[56 * v25 + 22];
    if (vpx_realloc_frame_buffer(v27, v18, v26, v4[6], v4[7], v4[8], 160, v3[20], 0, 0, 0))
      vpx_internal_error((uint64_t)v39, 2, "Failed to allocate frame buffer");
    scale_and_extend_frame((uint64_t)(v16 - 1), v27, *v3, 0, 0);
    v8[v1] = v24;
    v28 = *((_QWORD *)v3 + 11);
    v29 = v28 + 224 * v25;
    v32 = *(_QWORD *)(v29 + 32);
    v31 = (unint64_t *)(v29 + 32);
    v30 = v32;
    if (!v32)
      goto LABEL_63;
    v5 = v42;
    result = v43;
    v7 = v40;
    v6 = v41;
    if (*(_DWORD *)(v28 + 224 * v25 + 40) < v4[255] || *(_DWORD *)(v28 + 224 * v25 + 44) < v4[257])
    {
      free(*(void **)(v30 - 8));
LABEL_63:
      v33 = v4[257] * v4[255];
      if ((v33 & 0x80000000) == 0
        && (v34 = 12 * v33, (v35 = malloc_type_malloc(v34 + 23, 0x74AD08B5uLL)) != 0)
        && (v36 = ((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v36 - 8) = v35, v36))
      {
        bzero((void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0), v34);
        *v31 = v36;
      }
      else
      {
        *v31 = 0;
        vpx_internal_error((uint64_t)v39, 2, "Failed to allocate new_fb_ptr->mvs");
      }
      v37 = v4[257];
      v38 = v28 + 224 * v25;
      *(_DWORD *)(v38 + 40) = v4[255];
      *(_DWORD *)(v38 + 44) = v37;
      v5 = v42;
      result = v43;
      v7 = v40;
      v6 = v41;
    }
LABEL_4:
    ++v1;
  }
  while (v1 != 3);
  return result;
}

unsigned __int8 *scale_and_extend_frame(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;

  v5 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  v63 = 16 * v5;
  v8 = (16 * v5 / v7);
  v57 = *(_DWORD *)(a1 + 12);
  v71 = 16 * v57 / v6;
  if (a3 == 8)
  {
    if ((int)v8 > 64 || v71 > 64)
      return vp9_scale_and_extend_frame_nonnormative(a1, a2, a3);
  }
  else if (a3 >= 10 && ((int)v8 > 32 || v71 >= 33))
  {
    return vp9_scale_and_extend_frame_nonnormative(a1, a2, a3);
  }
  if (v7 >= 1 && v6 >= 1)
  {
    v9 = 0;
    v47 = *(_QWORD *)(a1 + 56);
    v48 = *(_QWORD *)(a1 + 64);
    v49 = *(_QWORD *)(a1 + 72);
    v67 = *(int *)(a1 + 16);
    v70 = *(int *)(a1 + 36);
    v50 = *(_QWORD *)(a2 + 64);
    v51 = *(_QWORD *)(a2 + 72);
    v10 = *(int *)(a2 + 16);
    v58 = *(_QWORD *)(a2 + 56);
    v61 = v10;
    v11 = 2 * v58;
    v12 = (uint64_t)*(&vp9_filter_kernels + a4);
    v45 = 32 * v10;
    v46 = 16 * v10;
    v43 = *(_DWORD *)(a1 + 8);
    v13 = v5 << 8;
    v69 = *(int *)(a2 + 36);
    v56 = *(unsigned int *)(a2 + 12);
    do
    {
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v53 = v9;
      v17 = v47 + v57 * (int)v9 / v6 * (int)v67;
      v18 = (16 * v57 * (int)v9 / v6 + a5) & 0xF;
      v52 = v11;
      do
      {
        v19 = v15 / v7 + a5;
        v20 = v17 + v14 / v7;
        if ((*(_BYTE *)(a1 + 152) & 8) != 0)
          vpx_highbd_convolve8_neon(2 * v20, v67, v11, v61, v12, v19 & 0xF, v8, v18, v71, 0x10u, 0x10u, a3);
        else
          vpx_scaled_2d_neon(v20, v67, v58 + v16, v61, v12, v19 & 0xF, v8, v18, v71, 16, 16);
        v16 += 16;
        v11 += 32;
        v15 += v13;
        v14 += v63;
      }
      while (v7 > (int)v16);
      v9 = v53 + 16;
      v58 += v46;
      v11 = v52 + v45;
      v6 = v56;
    }
    while (v53 + 16 < v56);
    v22 = 0;
    v23 = 0;
    v62 = 8 * v57;
    v68 = 8 * v43;
    v24 = v43 << 7;
    do
    {
      v25 = 0;
      v26 = 0;
      v27 = 0;
      v28 = v50 + v22;
      v59 = v22;
      v64 = 2 * v50 + 2 * v22;
      v54 = v23;
      v29 = v48 + (int)v70 * (uint64_t)((int)(v57 * (v23 >> 1)) / v6);
      v30 = (v62 * (int)v23 / v6 + a5) & 0xF;
      do
      {
        v31 = v25 / v7 + a5;
        v32 = v29 + v26 / v7;
        if ((*(_BYTE *)(a1 + 152) & 8) != 0)
          vpx_highbd_convolve8_neon(2 * v32, v70, v64 + v27, v69, v12, v31 & 0xF, v8, v30, v71, 8u, 8u, a3);
        else
          vpx_scaled_2d_neon(v32, v70, v28, v69, v12, v31 & 0xF, v8, v30, v71, 8, 8);
        v27 += 16;
        v28 += 8;
        v26 += v68;
        v25 += v24;
      }
      while (v7 > (int)v27);
      v6 = v56;
      v23 = v54 + 16;
      v22 = v59 + 8 * v69;
    }
    while (v54 + 16 < v56);
    v33 = 0;
    v34 = 0;
    do
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v38 = v51 + v33;
      v60 = v33;
      v65 = 2 * v51 + 2 * v33;
      v55 = v34;
      v39 = v49 + (int)(v57 * (v34 >> 1)) / v6 * (int)v70;
      v40 = (v62 * (int)v34 / v6 + a5) & 0xF;
      do
      {
        v41 = v35 / v7 + a5;
        v42 = v39 + v36 / v7;
        if ((*(_BYTE *)(a1 + 152) & 8) != 0)
          vpx_highbd_convolve8_neon(2 * v42, v70, v65 + v37, v69, v12, v41 & 0xF, v8, v40, v71, 8u, 8u, a3);
        else
          vpx_scaled_2d_neon(v42, v70, v38, v69, v12, v41 & 0xF, v8, v40, v71, 8, 8);
        v37 += 16;
        v38 += 8;
        v36 += v68;
        v35 += v24;
      }
      while (v7 > (int)v37);
      v6 = v56;
      v34 = v55 + 16;
      v33 = v60 + 8 * v69;
    }
    while (v55 + 16 < v56);
  }
  return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
}

uint64_t vp9_receive_raw_frame(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int **v9;
  int *v10;
  unsigned int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  double v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int *v24;
  timeval v25;
  unsigned __int128 v26;

  v8 = a1 + 741296;
  v9 = (int **)(a1 + 190424);
  v10 = (int *)(a1 + 189852);
  v11 = (unsigned int *)(a1 + 171988);
  v24 = (int *)(a1 + 171696);
  v12 = a3[30];
  v13 = a3[31];
  v14 = (a3[38] >> 3) & 1;
  if (!*(_DWORD *)(a1 + 747488)
    || *(_DWORD *)(a1 + 172020) != v14
    || *(_DWORD *)(a1 + 172012) != v12
    || *(_DWORD *)(a1 + 172016) != v13)
  {
    *(_DWORD *)(a1 + 172012) = v12;
    *(_DWORD *)(a1 + 172016) = v13;
    *(_DWORD *)(a1 + 172020) = v14;
    alloc_util_frame_buffers((int *)a1);
    *(_QWORD *)(v8 + 6192) = *(_QWORD *)v11;
    *(_DWORD *)(v8 + 6200) = v11[253];
  }
  v15 = v10[49];
  if (v15 >= 1 && !*(_DWORD *)(a1 + 842056))
  {
    v16 = vp9_denoiser_alloc(v24, (int *)(a1 + 747512), (unint64_t *)(a1 + 841880), *(_DWORD *)(v8 + 6212), v15, *v11, v11[1], v11[6], v11[7], v11[8], 160);
    if (v17)
      vpx_internal_error((uint64_t)v24, 2, "Failed to allocate denoiser", v16);
  }
  v25 = (timeval)0;
  v26 = 0u;
  alloc_raw_frame_buffers(a1);
  gettimeofday(&v25, 0);
  if (vp9_lookahead_push(*v9, (uint64_t)a3, a4, a5, v14, a2))
    v18 = 0xFFFFFFFFLL;
  else
    v18 = 0;
  gettimeofday((timeval *)&v26, 0);
  v19 = DWORD2(v26) - v25.tv_usec + 1000000;
  if (SDWORD2(v26) >= v25.tv_usec)
    v19 = DWORD2(v26) - v25.tv_usec;
  *(_QWORD *)v8 += v19 + 1000000 * (v26 - v25.tv_sec + ((DWORD2(v26) - v25.tv_usec) >> 31));
  v20 = *v10;
  if ((*v10 | 2) != 2 || v12 == 1 && v13 == 1)
  {
    if (v20 == 1)
    {
LABEL_19:
      if (v12 != 1 || v13 != 1)
        return v18;
LABEL_26:
      vpx_internal_error((uint64_t)v24, 8, "4:2:0 color format requires profile 0 or 2");
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    vpx_internal_error((uint64_t)v24, 8, "Non-4:2:0 color format requires profile 1 or 3");
    v20 = *v10;
    v18 = 0xFFFFFFFFLL;
    if (*v10 == 1)
      goto LABEL_19;
  }
  if (v13 == 1 && v12 == 1 && v20 == 3)
    goto LABEL_26;
  return v18;
}

uint64_t vp9_get_compressed_data(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, int a8)
{
  char *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  _DWORD *v30;
  int *v31;
  __int128 v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _DWORD *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int64_t v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  int *v60;
  int *v61;
  int v62;
  int v63;
  BOOL v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t result;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  BOOL v78;
  int v79;
  double v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int64_t v87;
  int v88;
  int v89;
  int v90;
  _DWORD *v91;
  _DWORD *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  double v98;
  unsigned int v99;
  unsigned int v100;
  void *v101;
  unint64_t v102;
  double inited;
  double v104;
  double v105;
  double v106;
  _DWORD *v107;
  _BOOL4 v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  char v118;
  uint64_t v119;
  unsigned int v120;
  int8x16_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  double v126;
  double v127;
  unsigned int v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  unint64_t *v136;
  int v137;
  unsigned int v138;
  int v139;
  double v140;
  int v141;
  double v142;
  int v143;
  double v144;
  unsigned int v145;
  BOOL v146;
  int v147;
  int v148;
  double v149;
  double v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int *v154;
  double v155;
  int *v156;
  double v157;
  int *v158;
  double v159;
  double v160;
  char *v161;
  unsigned int v162;
  double v163;
  int v164;
  int v165;
  double v166;
  int v167;
  int v168;
  int v169;
  uint64_t v170;
  uint64_t v172;
  int *__attribute__((__org_typedef(jmp_buf))) v173;
  int *__attribute__((__org_typedef(jmp_buf))) v174;
  char *v176;
  int v178;
  uint64_t v179;
  timeval v180;
  unsigned __int128 v181;

  v11 = (char *)(a1 + 850400);
  v12 = (_DWORD *)(a1 + 742180);
  v13 = a1 + 189844;
  v14 = a1 + 171988;
  v173 = *(int **)(a1 + 189944);
  v178 = *(unsigned __int8 *)(a1 + 742180);
  v15 = (_QWORD *)(a1 + 74976);
  if (*(_DWORD *)(a1 + 747508) && !*(_DWORD *)(a1 + 190076))
    vp9_one_pass_svc_start_layer(a1);
  v16 = a1 + 190424;
  v180 = (timeval)0;
  v181 = 0u;
  gettimeofday(&v180, 0);
  *(_DWORD *)(v14 + 1004) = 1;
  *v15 = a1 + 74960;
  v15[7] = a1 + 75016;
  v17 = *(_DWORD *)(v13 + 232);
  v18 = v12[1332];
  if (v17 != 2 || v18 || *(int *)(v13 + 460) <= 1)
  {
    v20 = 0;
    v19 = v12[1332];
  }
  else
  {
    v19 = 0;
    v20 = 1;
  }
  v21 = (_QWORD *)(a1 + 738424);
  *((_DWORD *)v11 + 8) = v20;
  *(_DWORD *)(v14 + 1008) = 0;
  *(_DWORD *)(v14 + 4412) = 1;
  if (v17 || !v19)
  {
    *(_QWORD *)(a1 + 194556) = 1;
    *(_DWORD *)(a1 + 194564) = 0;
    if (*(_DWORD *)(v13 + 228) != 2)
      goto LABEL_15;
  }
  else if (*(_DWORD *)(v13 + 228) != 2)
  {
    goto LABEL_15;
  }
  if (*(_DWORD *)(v13 + 248) == 1)
    goto LABEL_33;
LABEL_15:
  if (*(int *)(v13 + 244) < 4 || !*(_DWORD *)(v13 + 460))
    goto LABEL_33;
  if (v17 == 2)
  {
    v22 = *(unsigned __int8 *)v12;
    if (*(_DWORD *)(a1 + 4 * v22 + 743192) == 3)
    {
      v23 = a1 + v22;
      v24 = *(unsigned __int8 *)(v23 + 744200);
      if (!*(_BYTE *)(v23 + 744200))
        goto LABEL_34;
      goto LABEL_23;
    }
LABEL_33:
    v24 = 0;
    goto LABEL_34;
  }
  if (!*(_DWORD *)(a1 + 738580))
    goto LABEL_33;
  v24 = *(_DWORD *)(a1 + 738540);
  if (!v24)
    goto LABEL_34;
LABEL_23:
  if ((v24 & 0x80000000) == 0)
  {
    v25 = 0;
    v26 = *(int **)v16;
    do
    {
      if ((*(_DWORD *)(*(_QWORD *)v16 + 4) & ~(*(int *)(*(_QWORD *)v16 + 4) >> 31)) == v25)
        break;
      v27 = *((_QWORD *)v26 + 3);
      if (!v27)
        break;
      v28 = v26[2];
      if (v25 + v28 >= *v26)
        v29 = *v26;
      else
        v29 = 0;
      if (*(_QWORD *)(v27 + 192 * (v25 + v28 - v29) + 184) == 1)
      {
        v24 = 0;
        a8 = 1;
        break;
      }
      ++v25;
    }
    while (v24 + 1 != v25);
  }
LABEL_34:
  v30 = (_DWORD *)(a1 + 834696);
  v31 = (int *)(a1 + 747512);
  if (v178 == 1)
  {
    *(_QWORD *)(a1 + 747172) = -1;
    *(_QWORD *)&v32 = -1;
    *((_QWORD *)&v32 + 1) = -1;
    *(_OWORD *)(a1 + 747156) = v32;
    *(_OWORD *)(a1 + 747140) = v32;
    *(_OWORD *)(a1 + 747124) = v32;
    *(_OWORD *)(a1 + 747108) = v32;
    *(_OWORD *)(a1 + 747092) = v32;
    *(_OWORD *)(a1 + 747076) = v32;
    *(_OWORD *)(a1 + 747060) = v32;
    *(_OWORD *)(a1 + 747044) = v32;
    *(_OWORD *)(a1 + 747028) = v32;
    *(_OWORD *)(a1 + 747012) = v32;
    *(_OWORD *)(a1 + 746996) = v32;
    *(_OWORD *)(a1 + 746980) = v32;
    v12[1251] = 0;
  }
  v176 = v11;
  if (v24)
  {
    v33 = *(int **)v16;
    if (v24 < 0)
    {
      if (v24 == -1)
      {
        v37 = v33[2];
        v36 = v37 - 1;
        if (v37 <= 0)
          v36 += *v33;
LABEL_45:
        v38 = *((_QWORD *)v33 + 3);
        if (v38)
        {
          v39 = 0;
          v40 = (_QWORD *)(v38 + 192 * v36);
          *(_QWORD *)(a1 + 190432) = v40;
          *(_DWORD *)(v14 + 988) = 0;
          *(_BYTE *)(v14 + 1000) = 0;
          *(_DWORD *)(a1 + 194564) = 1;
          *(_QWORD *)(a1 + 194556) = 0;
          *(_DWORD *)(a1 + 738588) = 0;
          v41 = (_DWORD *)(a1 + 738580);
          v42 = a3;
          v43 = a6;
LABEL_47:
          *v41 = 0;
          goto LABEL_48;
        }
      }
    }
    else if (v33[1] > v24)
    {
      v34 = v33[2] + v24;
      v35 = *v33;
      if (v34 < *v33)
        v35 = 0;
      v36 = v34 - v35;
      goto LABEL_45;
    }
    *(_DWORD *)(a1 + 738580) = 0;
  }
  if (*(_DWORD *)v13)
  {
    v56 = *(int **)v16;
    v57 = *(_DWORD *)(*(_QWORD *)v16 + 8);
    v58 = v57 - 1;
    if (v57 <= 0)
    {
      v58 += *v56;
      v59 = *((_QWORD *)v56 + 3);
      if (!v59)
        return 0xFFFFFFFFLL;
    }
    else
    {
      v59 = *((_QWORD *)v56 + 3);
      if (!v59)
        return 0xFFFFFFFFLL;
    }
    v39 = v59 + 192 * v58;
    if (v18)
      goto LABEL_77;
  }
  else
  {
    v39 = 0;
    if (v18)
      goto LABEL_77;
  }
  if (!*(_BYTE *)(a1 + 835288))
  {
    v60 = *(int **)v16;
    if (!*(_QWORD *)v16)
      goto LABEL_115;
    v61 = v60 + 1;
    v62 = v60[1];
    if (!v62)
      goto LABEL_115;
    v72 = *v60;
    if (!a8 && v62 != v72 - 1)
      goto LABEL_115;
    v73 = v60[2];
    if (v73 + 1 < v72)
      v72 = 0;
    v69 = v73 + 1 - v72;
    v40 = (_QWORD *)(*((_QWORD *)v60 + 3) + 192 * v73);
    goto LABEL_106;
  }
LABEL_77:
  v60 = *(int **)v16;
  v61 = (int *)(*(_QWORD *)v16 + 4);
  v62 = *v61;
  if (!*v61)
    goto LABEL_115;
  if (a8)
  {
    if (v62 >= 1)
    {
      v63 = *v60;
      goto LABEL_86;
    }
LABEL_115:
    *a3 = 0;
    return 0xFFFFFFFFLL;
  }
  v63 = *v60;
  v64 = v62 >= 1 && v62 == *v60 - 1;
  if (!v64)
    goto LABEL_115;
LABEL_86:
  v65 = v60[2];
  if (v65 >= v63)
    v66 = v63;
  else
    v66 = 0;
  v67 = *((_QWORD *)v60 + 3);
  if (!v67)
    goto LABEL_115;
  v40 = (_QWORD *)(v67 + 192 * (v65 - v66));
  if (*v31 == *(_DWORD *)(a1 + 747520) - 1 && (a8 || v62 == v63 - 1))
  {
    v68 = v65 + 1;
    if (v68 < v63)
      v63 = 0;
    v69 = v68 - v63;
LABEL_106:
    v60[2] = v69;
    *v61 = v62 - 1;
  }
  if (!v40)
    goto LABEL_115;
  *(_DWORD *)(v14 + 988) = 1;
  *(_BYTE *)(v14 + 1000) = 0;
  if ((v40[23] & 1) != 0 && v12[1332] && *v31 > *(_DWORD *)(a1 + 835324))
    v40[23] &= 0xFFFFFFFEuLL;
  if (*(_DWORD *)(v13 + 232) != 2)
  {
    v77 = *(_QWORD **)(a1 + 190432);
    if (v77)
      v78 = v77 == v40;
    else
      v78 = 0;
    v79 = v78;
    *(_DWORD *)(a1 + 738588) = v79;
    v43 = a6;
    if (!v78)
      goto LABEL_114;
LABEL_128:
    *(_QWORD *)(a1 + 190432) = 0;
    v41 = (_DWORD *)(a1 + 194556);
    v42 = a3;
    goto LABEL_47;
  }
  v64 = *(_DWORD *)(a1 + 4 * *(unsigned __int8 *)v12 + 743192) == 4;
  *(_DWORD *)(a1 + 738588) = v64;
  v43 = a6;
  if (v64)
    goto LABEL_128;
LABEL_114:
  v42 = a3;
LABEL_48:
  *(_QWORD *)(a1 + 190440) = v40;
  *(_QWORD *)(a1 + 190456) = v40;
  *(_QWORD *)(a1 + 190624) = v39;
  *v43 = v40[20];
  *a7 = v40[21];
  *a2 = v40[23] & 1;
  v44 = v40[20];
  v45 = *(_QWORD *)(a1 + 738440);
  if (v44 < v45)
  {
    *(_QWORD *)(a1 + 738432) = v44;
    *(_QWORD *)(a1 + 738440) = v44;
    v45 = v44;
  }
  v172 = a1 + 747512;
  if (*(_DWORD *)(v14 + 988))
  {
    if (v12[1332])
    {
      if (*(_DWORD *)(a1 + 835300))
      {
        v46 = *(_QWORD *)(a1 + 8 * *v31 + 835328);
        if (v46 >= 1)
        {
          v47 = 10000000.0 / (double)(*(_QWORD *)(a1 + 835368) * v46);
          if (v47 < 0.1)
            v47 = 30.0;
          v48 = (int)fmin((double)*(uint64_t *)(v13 + 196) / v47, 2147483650.0);
          *(double *)(a1 + 739168) = v47;
          v49 = *(_DWORD *)(v13 + 332) * v48;
          if (v49 <= 20099)
            v50 = 200;
          else
            v50 = v49 / 100;
          *(_DWORD *)(a1 + 738592) = v48;
          *(_DWORD *)(a1 + 738596) = v50;
          v51 = *(_DWORD *)(v13 + 336);
          v52 = (unsigned __int128)(v51 * (uint64_t)v48 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64;
          v53 = ((v52 + v51 * (uint64_t)v48) >> 6) + ((unint64_t)(v52 + v51 * (uint64_t)v48) >> 63);
          if (v53 >= 0x7FFFFFFF)
            LODWORD(v53) = 0x7FFFFFFF;
          v54 = *(_DWORD *)(v14 + 1012);
          if (v54 <= 16000)
            v55 = 4000000;
          else
            v55 = 250 * v54;
          if (v55 > (int)v53)
            LODWORD(v53) = v55;
          *(_DWORD *)(a1 + 738600) = v53;
          vp9_rc_set_gf_interval_range(a1, a1 + 738448);
          v30 = (_DWORD *)(a1 + 834696);
          v31 = (int *)(a1 + 747512);
          goto LABEL_149;
        }
      }
    }
    if (v44 == v45)
    {
      v70 = v40[21];
      v71 = v70 - v44;
      if (v70 == v44)
        goto LABEL_148;
LABEL_131:
      v80 = 10000000.0 / (double)v71;
LABEL_135:
      if (v80 < 0.1)
        v80 = 30.0;
      *(double *)(a1 + 739168) = v80;
      v82 = (int)fmin((double)*(uint64_t *)(v13 + 196) / v80, 2147483650.0);
      v83 = *(_DWORD *)(v13 + 332) * v82;
      if (v83 <= 20099)
        v84 = 200;
      else
        v84 = v83 / 100;
      *(_DWORD *)(a1 + 738592) = v82;
      *(_DWORD *)(a1 + 738596) = v84;
      v85 = *(_DWORD *)(v13 + 336);
      v86 = (unsigned __int128)(v85 * (uint64_t)v82 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64;
      v87 = ((v86 + v85 * (uint64_t)v82) >> 6) + ((unint64_t)(v86 + v85 * (uint64_t)v82) >> 63);
      if (v87 >= 0x7FFFFFFF)
        LODWORD(v87) = 0x7FFFFFFF;
      v88 = *(_DWORD *)(v14 + 1012);
      if (v88 <= 16000)
        v89 = 4000000;
      else
        v89 = 250 * v88;
      if (v89 > (int)v87)
        LODWORD(v87) = v89;
      *(_DWORD *)(a1 + 738600) = v87;
      vp9_rc_set_gf_interval_range(a1, a1 + 738448);
      v44 = v40[20];
      v70 = v40[21];
      v31 = (int *)(a1 + 747512);
      v30 = (_DWORD *)(a1 + 834696);
      goto LABEL_148;
    }
    v75 = *(_QWORD *)(a1 + 738432);
    v70 = v40[21];
    v71 = v70 - v75;
    v76 = v75 - *v21;
    if (v76)
    {
      if (!v71)
      {
LABEL_148:
        *v21 = v44;
        *(_QWORD *)(a1 + 738432) = v70;
        goto LABEL_149;
      }
      if ((10 * (v71 - v76) / v76))
        goto LABEL_131;
    }
    else if (!v71)
    {
      goto LABEL_148;
    }
    v81 = v70 - v45;
    if (v70 - v45 >= 10000000)
      v81 = 10000000;
    v80 = 10000000.0
        / (10000000.0
         / *(double *)(a1 + 739168)
         * ((double)v81 - 10000000.0 / *(double *)(a1 + 739168) + (double)v71)
         / (double)v81);
    goto LABEL_135;
  }
LABEL_149:
  if (v12[1332] && !*(_DWORD *)(v13 + 232))
  {
    vp9_update_temporal_layer_framerate(a1);
    vp9_restore_layer_context((_DWORD *)a1);
    v30 = (_DWORD *)(a1 + 834696);
    v31 = (int *)(a1 + 747512);
  }
  v90 = *(_DWORD *)(v14 + 652);
  if (v90 != -1)
    --v173[56 * v90 + 6];
  v91 = *(_DWORD **)(v13 + 100);
  v92 = v91 + 6;
  if (v91[6])
  {
    if (v91[62])
    {
      if (v91[118])
      {
        if (v91[174])
        {
          if (v91[230])
          {
            if (v91[286])
            {
              if (v91[342])
              {
                if (v91[398])
                {
                  if (v91[454])
                  {
                    if (v91[510])
                    {
                      if (v91[566])
                      {
                        if (v91[622])
                        {
                          result = 0xFFFFFFFFLL;
                          *(_DWORD *)(v14 + 652) = -1;
                          return result;
                        }
                        v93 = 11;
                      }
                      else
                      {
                        v93 = 10;
                      }
                    }
                    else
                    {
                      v93 = 9;
                    }
                  }
                  else
                  {
                    v93 = 8;
                  }
                }
                else
                {
                  v93 = 7;
                }
              }
              else
              {
                v93 = 6;
              }
            }
            else
            {
              v93 = 5;
            }
          }
          else
          {
            v93 = 4;
          }
        }
        else
        {
          v93 = 3;
        }
      }
      else
      {
        v93 = 2;
      }
    }
    else
    {
      v93 = 1;
    }
  }
  else
  {
    v93 = 0;
  }
  v94 = 56 * v93;
  v92[v94] = 1;
  *(_DWORD *)(v14 + 652) = v93;
  v95 = (uint64_t)&v173[v94 + 6];
  *(_QWORD *)(v14 + 52) = v95;
  if (*v31 >= 1 && v95 == *(_QWORD *)(v14 + 44))
    *v30 = 0;
  v174 = (int *)(a1 + 171696);
  *v42 = 0;
  v30[190] = *a2;
  v96 = *(_DWORD *)(v13 + 232);
  if (v96 == 1)
    goto LABEL_196;
  if ((*v176 & 0x80000000) == 0 && !v176[1])
  {
    v97 = *(_DWORD *)(a1 + 738600);
    v98 = 0.5;
    if (*(_DWORD *)(v14 + 984) && !*(_BYTE *)(v14 + 1000))
      v98 = dbl_208F47210[v24 > 0];
    if (v97 >= *((_DWORD *)v176 + 1))
      v97 = *((_DWORD *)v176 + 1);
    if (v97 >= (int)(*((double *)v176 + 1) * v98))
      v97 = (int)(*((double *)v176 + 1) * v98);
    *(_DWORD *)(a1 + 738600) = v97;
  }
  if (v96 || v12[1332] || !*(_DWORD *)(v14 + 984) || *(_BYTE *)(v14 + 1000))
  {
LABEL_196:
    *(_DWORD *)(a1 + 194508) = -1;
    *(_QWORD *)(a1 + 194500) = -1;
  }
  if (!*(_DWORD *)(a1 + 194296))
  {
    v99 = (*(_DWORD *)(v14 + 1028) + 7) & 0xFFFFFFF8;
    v100 = (*(_DWORD *)(v14 + 1020) + 7) & 0xFFFFFFF8;
    pthread_mutex_init((pthread_mutex_t *)(a1 + 194232), 0);
    if (((v100 * v99) & 0x80000000) == 0
      && (v170 = 16 * v100 * v99, (v101 = malloc_type_malloc(v170 | 0x17, 0x74AD08B5uLL)) != 0)
      && (v102 = ((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v102 - 8) = v101, v102))
    {
      bzero((void *)(((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF0), v170);
      *(_QWORD *)(a1 + 194304) = v102;
    }
    else
    {
      *(_QWORD *)(a1 + 194304) = 0;
      vpx_internal_error((uint64_t)v174, 2, "Failed to allocate cpi->kmeans_data_arr");
    }
    *(_DWORD *)(a1 + 194316) = v99;
    *(_DWORD *)(a1 + 194296) = 1;
    v42 = a3;
  }
  if (v178 == 1 && v12[254] == 3 && *(_DWORD *)(a1 + 739644))
  {
    inited = vp9_init_tpl_buffer(a1);
    vp9_estimate_tpl_qp_gop(a1, inited, v104, v105, v106);
    vp9_setup_tpl_stats(a1);
  }
  *(_DWORD *)(a1 + 131420) = 0;
  if (v12[1332])
  {
    vp9_rc_get_svc_params(a1);
  }
  else if (*(_DWORD *)(v13 + 248) == 1)
  {
    vp9_rc_get_one_pass_cbr_params(a1);
  }
  else
  {
    vp9_rc_get_one_pass_vbr_params(a1);
  }
  encode_frame_to_data_rate(a1, (uint64_t)v42);
  if (*(_DWORD *)(v14 + 988))
    *(_DWORD *)(v14 + 656) = *(_DWORD *)(v14 + 652);
  if (*(_DWORD *)(v14 + 4412))
    memcpy((void *)(*(_QWORD *)(a1 + 176608) + 2044 * *(unsigned int *)(a1 + 176616)), *(const void **)(a1 + 176600), 0x7FCuLL);
  v107 = (_DWORD *)(a1 + 747512);
  if (*v42
    || *(_DWORD *)(v14 + 984)
    && !*(_BYTE *)(v14 + 1000)
    && (release_scaled_references((_DWORD *)a1), v107 = (_DWORD *)(a1 + 747512), *v42))
  {
    v108 = !*(_DWORD *)(v14 + 984)
        || *(_DWORD *)(a1 + 194556)
        || *(_DWORD *)(a1 + 194560)
        || *(_DWORD *)(a1 + 194564)
        || *(_DWORD *)(v14 + 4412)
        || *(_BYTE *)(a1 + 176441)
        || *(_BYTE *)(a1 + 176473)
        || *(_BYTE *)(a1 + 176474) != 0;
    v12[1326] = !v108;
  }
  if (v12[1332] && !*(_DWORD *)(v13 + 232) || ((int)v107[3] > 1 || (int)v107[2] >= 2) && *(_DWORD *)(v13 + 232) == 2)
  {
    vp9_save_layer_context(a1);
    v107 = (_DWORD *)(a1 + 747512);
  }
  if (*v107 == v107[2] - 1)
    *((_DWORD *)v176 + 98) = 0;
  gettimeofday((timeval *)&v181, 0);
  v109 = DWORD2(v181) - v180.tv_usec + 1000000;
  if (SDWORD2(v181) >= v180.tv_usec)
    v109 = DWORD2(v181) - v180.tv_usec;
  *(_QWORD *)(a1 + 741304) += v109 + 1000000 * (v181 - v180.tv_sec + ((DWORD2(v181) - v180.tv_usec) >> 31));
  if (*(_DWORD *)(a1 + 842352) && *(_DWORD *)(v13 + 232) != 1)
  {
    v110 = a1 + 842360;
    v111 = *v42;
    v112 = *(_DWORD *)(v14 + 4);
    v113 = v112 * *(_DWORD *)v14;
    if (*(_DWORD *)v14 <= v112)
      v114 = *(_DWORD *)(v14 + 4);
    else
      v114 = *(_DWORD *)v14;
    v179 = *v176;
    *(_QWORD *)(a1 + 842368) += v111;
    if (*(_DWORD *)(v14 + 988))
    {
      *(_QWORD *)(a1 + 842376) += v113 + 2 * (v113 >> (*(_DWORD *)(v14 + 28) + *(_DWORD *)(v14 + 24)));
      *(double *)(a1 + 842384) = (double)(uint64_t)(*(_QWORD *)(a1 + 738432) - *(_QWORD *)(a1 + 738440)) / 10000000.0;
    }
    if (v24 < 1)
    {
      ++*(_DWORD *)(a1 + 842364);
      v116 = a1 + 842392;
      v117 = *(unsigned __int8 *)(a1 + 844441);
      if (v117 <= 0x7E)
        goto LABEL_249;
    }
    else if (*(_BYTE *)v110)
    {
      v115 = *(_DWORD *)(a1 + 842364);
      if (v115 < *(_DWORD *)(a1 + 844508))
        *(_DWORD *)(a1 + 844508) = v115;
      *(_DWORD *)(a1 + 842364) = 0;
      v116 = a1 + 842392;
      v117 = *(unsigned __int8 *)(a1 + 844441);
      if (v117 <= 0x7E)
      {
LABEL_249:
        v118 = *(_BYTE *)(a1 + 844440);
        *(_BYTE *)(a1 + 844441) = v117 + 1;
        v119 = v116 + 16 * ((v118 + (_BYTE)v117) & 0x7F);
        *(_QWORD *)v119 = *v21;
        *(_DWORD *)(v119 + 8) = v113;
        *(_DWORD *)(v119 + 12) = v111;
        if (*(_DWORD *)(v14 + 984))
        {
LABEL_250:
          v120 = *(_DWORD *)(a1 + 844448) | vp9_get_refresh_mask((_DWORD *)a1);
          *(_DWORD *)(a1 + 844448) = v120;
          if (!*(_BYTE *)(v14 + 1000))
          {
            v120 |= (1 << *(_DWORD *)(a1 + 194512)) | (1 << *(_DWORD *)(a1 + 194516)) | (1 << *(_DWORD *)(a1 + 194520));
            *(_DWORD *)(a1 + 844448) = v120;
          }
          v121.i64[0] = 0x100000001;
          v121.i64[1] = 0x100000001;
          v122 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v120), (uint32x4_t)xmmword_208F47220), v121))+ (v120 & 1)+ ((v120 >> 5) & 1)+ ((v120 >> 6) & 1)+ ((v120 >> 7) & 1);
          if (v122 > *(unsigned __int8 *)(a1 + 844512))
            *(_BYTE *)(a1 + 844512) = v122;
LABEL_261:
          v125 = (double)*(unint64_t *)(a1 + 842368);
          v126 = *(double *)(a1 + 842384);
          v127 = v125 / 125.0 / v126;
          *(double *)(a1 + 844480) = v127;
          v128 = *(unsigned __int8 *)(a1 + 844441);
          if (*(_BYTE *)(a1 + 844441))
          {
            v129 = *(unsigned __int8 *)(a1 + 844440);
            v130 = v116
                 + 16
                 * (int)(v128 + v129 - 1 - ((v128 + v129 - 1 + (((v128 + v129 - 1) & 0xFE00) >> 9)) & 0xFFFFFF80));
            v131 = *(unsigned int *)(v130 + 8);
            if (v128 != 1)
            {
              v132 = *(_QWORD *)v130;
              v133 = v129 - 2;
              v134 = *(unsigned __int8 *)(a1 + 844441);
              do
              {
                if (v133 + v134 <= 0)
                  v135 = -(-(v133 + v134) & 0x7F);
                else
                  v135 = (v133 + v134) & 0x7F;
                if ((unint64_t)(v132 - *(_QWORD *)(v116 + 16 * v135)) > 0x98967F)
                  break;
                v131 += *(unsigned int *)(v116 + 16 * v135 + 8);
                --v134;
              }
              while (v134 != 1);
            }
            v136 = (unint64_t *)(a1 + 844464);
            if (v131 > *(_QWORD *)(v110 + 2104))
              *v136 = v131;
          }
          else
          {
            v136 = (unint64_t *)(a1 + 844464);
          }
          if (v128 >= 4)
            v137 = 4;
          else
            v137 = v128;
          if (v137)
          {
            v138 = *(unsigned __int8 *)(v110 + 2080) + v128;
            if ((int)(1 - v138) >= 0)
              v139 = -((1 - v138) & 0x7F);
            else
              v139 = (v138 - 1) & 0x7F;
            LODWORD(v127) = *(_DWORD *)(v116 + 16 * v139 + 12);
            v140 = (double)*(unint64_t *)&v127;
            if (v137 != 1)
            {
              v141 = (v138 - 2) & 0x7F;
              if ((int)(2 - v138) >= 0)
                v141 = -((2 - v138) & 0x7F);
              LODWORD(v126) = *(_DWORD *)(v116 + 16 * v141 + 12);
              v142 = (double)*(unint64_t *)&v126;
              v140 = v140 + v142;
              if (v137 != 2)
              {
                v143 = (v138 - 3) & 0x7F;
                if ((int)(3 - v138) >= 0)
                  v143 = -((3 - v138) & 0x7F);
                LODWORD(v142) = *(_DWORD *)(v116 + 16 * v143 + 12);
                v144 = (double)*(unint64_t *)&v142;
                v140 = v140 + v144;
                if (v137 != 3)
                {
                  v145 = v138 - 4;
                  v146 = (-v145 & 0x80000000) != 0;
                  v147 = -v145 & 0x7F;
                  v148 = v145 & 0x7F;
                  if (!v146)
                    v148 = -v147;
                  LODWORD(v144) = *(_DWORD *)(v116 + 16 * v148 + 12);
                  v140 = v140 + (double)*(unint64_t *)&v144;
                }
              }
            }
          }
          else
          {
            v140 = 0.0;
          }
          v149 = v140 / 125.0;
          v150 = *(double *)(v110 + 2128);
          if (v149 <= v150)
          {
            v151 = *(_DWORD *)(v110 + 2112);
            if (v113 <= v151)
            {
LABEL_292:
              v152 = *(_DWORD *)(v110 + 2116);
              if (v114 <= v152)
                goto LABEL_294;
              goto LABEL_293;
            }
          }
          else
          {
            *(double *)(v110 + 2128) = v149;
            v151 = *(_DWORD *)(v110 + 2112);
            if (v113 <= v151)
              goto LABEL_292;
          }
          *(_DWORD *)(v110 + 2112) = v113;
          v151 = v113;
          v152 = *(_DWORD *)(v110 + 2116);
          if (v114 <= v152)
          {
LABEL_294:
            LODWORD(v150) = *(_DWORD *)(v13 + 12);
            *(double *)(v110 + 2136) = (double)*(unint64_t *)(v110 + 16)
                                     * (double)*(unint64_t *)&v150
                                     / v125
                                     * 0.125;
            v153 = 1 << *(_DWORD *)(v13 + 84);
            if (v153 > *(unsigned __int8 *)(v110 + 2144))
              *(_BYTE *)(v110 + 2144) = v153;
            if ((v179 & 0x80) != 0 || v176[1])
              goto LABEL_324;
            v154 = &vp9_level_defs[16 * v179];
            if (v151 > v154[4])
            {
              v176[1] = 2;
              vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "The picture size is too large.");
              v152 = *(_DWORD *)(v110 + 2116);
            }
            if (v152 > v154[5])
            {
              v176[1] |= 4u;
              vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "The picture width/height is too large.");
            }
            v155 = (double)*v136;
            v156 = &vp9_level_defs[16 * v179];
            v157 = (double)*((unint64_t *)v156 + 1) * 1.015;
            if (v157 >= v155)
            {
              if (*(unsigned __int8 *)(v110 + 2144) <= *((unsigned __int8 *)v156 + 48))
              {
LABEL_304:
                v158 = &vp9_level_defs[16 * v179];
                if (*(_DWORD *)(v110 + 2148) < v158[13])
                  goto LABEL_305;
                goto LABEL_316;
              }
            }
            else
            {
              v176[1] |= 8u;
              vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "The luma sample rate is too large.");
              if (*(unsigned __int8 *)(v110 + 2144) <= *((unsigned __int8 *)v156 + 48))
                goto LABEL_304;
            }
            v176[1] |= 0x40u;
            vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "Too many column tiles are used.");
            v158 = &vp9_level_defs[16 * v179];
            if (*(_DWORD *)(v110 + 2148) < v158[13])
            {
LABEL_305:
              v176[1] |= 0x80u;
              vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "The alt-ref distance is too small.");
              if (*(unsigned __int8 *)(v110 + 2152) <= *((unsigned __int8 *)v158 + 56))
                goto LABEL_306;
              goto LABEL_317;
            }
LABEL_316:
            if (*(unsigned __int8 *)(v110 + 2152) <= *((unsigned __int8 *)v158 + 56))
            {
LABEL_306:
              v159 = *(double *)(v110 + 2128);
              v160 = *(double *)&vp9_level_defs[16 * v179 + 8];
              v161 = v176;
              if (v159 > v160)
                goto LABEL_307;
              goto LABEL_318;
            }
LABEL_317:
            vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "Too many reference buffers are used.");
            v159 = *(double *)(v110 + 2128);
            v160 = *(double *)&vp9_level_defs[16 * v179 + 8];
            v161 = v176;
            if (v159 > v160)
            {
LABEL_307:
              v161[1] |= 0x10u;
              vpx_internal_error((uint64_t)v174, 1, "Failed to encode to the target level %d. %s", *v154, "The CPB size is too large.");
              v162 = *(unsigned __int8 *)(v110 + 2081);
              if (!*(_BYTE *)(v110 + 2081))
              {
LABEL_308:
                v163 = 0.0;
LABEL_322:
                v167 = (int)((v160 + v163 / -125.0) * 1000.0);
                *((_DWORD *)v161 + 1) = v167;
                if (v162 <= 2)
                  *((_DWORD *)v161 + 1) = v167 >> 1;
                goto LABEL_324;
              }
LABEL_319:
              v164 = *(unsigned __int8 *)(v110 + 2080);
              v165 = v162 + v164;
              LODWORD(v159) = *(_DWORD *)(v116
                                        + 16
                                        * (int)(v165 - 1 - ((v165 - 1 + (((v165 - 1) & 0xFE00u) >> 9)) & 0xFFFFFF80))
                                        + 12);
              v163 = (double)*(unint64_t *)&v159;
              if (v162 != 1)
              {
                LODWORD(v157) = *(_DWORD *)(v116
                                          + 16
                                          * (int)(v165
                                                - 2
                                                - ((v165 - 2 + (((v165 - 2) >> 24) & 0x7F)) & 0xFFFFFF80))
                                          + 12);
                v166 = (double)*(unint64_t *)&v157;
                v163 = v163 + v166;
                if (v162 != 2)
                {
                  LODWORD(v166) = *(_DWORD *)(v116
                                            + 16
                                            * (int)(v162
                                                  + v164
                                                  - 3
                                                  - ((v162 + v164 - 3 + (((v162 + v164 - 3) >> 24) & 0x7F)) & 0xFFFFFF80))
                                            + 12);
                  v163 = v163 + (double)*(unint64_t *)&v166;
                }
              }
              goto LABEL_322;
            }
LABEL_318:
            v162 = *(unsigned __int8 *)(v110 + 2081);
            if (!*(_BYTE *)(v110 + 2081))
              goto LABEL_308;
            goto LABEL_319;
          }
LABEL_293:
          *(_DWORD *)(v110 + 2116) = v114;
          v152 = v114;
          goto LABEL_294;
        }
LABEL_260:
        *(_DWORD *)(a1 + 844448) = 0;
        goto LABEL_261;
      }
    }
    else
    {
      *(_BYTE *)v110 = 1;
      *(_DWORD *)(a1 + 842364) = 0;
      v116 = a1 + 842392;
      v117 = *(unsigned __int8 *)(a1 + 844441);
      if (v117 <= 0x7E)
        goto LABEL_249;
    }
    v123 = *(unsigned __int8 *)(a1 + 844440);
    *(_BYTE *)(a1 + 844440) = (v123 + 1) & 0x7F;
    v124 = v116 + 16 * v123;
    *(_QWORD *)v124 = *v21;
    *(_DWORD *)(v124 + 8) = v113;
    *(_DWORD *)(v124 + 12) = v111;
    if (*(_DWORD *)(v14 + 984))
      goto LABEL_250;
    goto LABEL_260;
  }
LABEL_324:
  if (!v12[1332] || *(_DWORD *)(v13 + 232) || !*(_DWORD *)(v14 + 988))
    return 0;
  result = 0;
  v168 = *(_DWORD *)(v172 + 16);
  if (v168 + 1 < *(_DWORD *)(v172 + 8))
    v169 = v168 + 1;
  else
    v169 = 0;
  *(_DWORD *)(v172 + 16) = v169;
  return result;
}

_DWORD *release_scaled_references(_DWORD *result)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  _DWORD *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v1 = (uint64_t *)(result + 47486);
  if (result[47519] || result[186877])
  {
    v2 = result[48625];
    if (v2 != -1)
    {
      --*(_DWORD *)(*v1 + 224 * v2 + 24);
      result[48625] = -1;
    }
    v3 = result[48626];
    if (v3 != -1)
    {
      --*(_DWORD *)(*v1 + 224 * v3 + 24);
      result[48626] = -1;
    }
    v4 = result[48627];
    if (v4 != -1)
    {
      v5 = result + 48627;
      v6 = (_DWORD *)(*v1 + 224 * v4 + 24);
LABEL_9:
      --*v6;
      *v5 = -1;
      return result;
    }
    return result;
  }
  v7 = result[48640];
  v8 = result[48641];
  v9 = result[48625];
  if (v9 != -1)
  {
    v10 = result[48639];
    v11 = *v1;
    v12 = (int)result[48628];
    if ((_DWORD)v12 == -1)
    {
      v15 = 0;
      if (v10)
      {
LABEL_20:
        --*(_DWORD *)(v11 + 224 * v9 + 24);
        result[48625] = -1;
        goto LABEL_21;
      }
    }
    else
    {
      v13 = result[v12 + 43012];
      v14 = v13 == -1;
      v15 = v11 + 224 * v13 + 88;
      if (v14)
        v15 = 0;
      if (v10)
        goto LABEL_20;
    }
    if (*(_DWORD *)(v11 + 224 * v9 + 96) == *(_DWORD *)(v15 + 8)
      && *(_DWORD *)(v11 + 224 * v9 + 100) == *(_DWORD *)(v15 + 12))
    {
      goto LABEL_20;
    }
  }
LABEL_21:
  v16 = result[48626];
  if (v16 == -1)
    goto LABEL_31;
  v17 = *v1;
  v18 = (int)result[48629];
  if ((_DWORD)v18 == -1)
  {
    v20 = 0;
    if (v7)
    {
LABEL_30:
      --*(_DWORD *)(v17 + 224 * v16 + 24);
      result[48626] = -1;
      goto LABEL_31;
    }
  }
  else
  {
    v19 = result[v18 + 43012];
    v14 = v19 == -1;
    v20 = v17 + 224 * v19 + 88;
    if (v14)
      v20 = 0;
    if (v7)
      goto LABEL_30;
  }
  if (*(_DWORD *)(v17 + 224 * v16 + 96) == *(_DWORD *)(v20 + 8)
    && *(_DWORD *)(v17 + 224 * v16 + 100) == *(_DWORD *)(v20 + 12))
  {
    goto LABEL_30;
  }
LABEL_31:
  v21 = result[48627];
  if (v21 != -1)
  {
    v5 = result + 48627;
    v22 = *v1;
    v6 = (_DWORD *)(*v1 + 224 * v21 + 24);
    v23 = (int)result[48630];
    if ((_DWORD)v23 == -1)
    {
      v25 = 0;
      if (v8)
        goto LABEL_9;
    }
    else
    {
      v24 = result[v23 + 43012];
      v14 = v24 == -1;
      v25 = v22 + 224 * v24 + 88;
      if (v14)
        v25 = 0;
      if (v8)
        goto LABEL_9;
    }
    if (*(_DWORD *)(v22 + 224 * v21 + 96) == *(_DWORD *)(v25 + 8)
      && *(_DWORD *)(v22 + 224 * v21 + 100) == *(_DWORD *)(v25 + 12))
    {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t vp9_set_size_literal(uint64_t a1, signed int a2, signed int a3)
{
  uint64_t v6;
  int *v7;
  unsigned int *v8;
  double v9;
  int v10;
  unsigned int v11;
  signed int v12;

  v6 = a1 + 747488;
  v7 = (int *)(a1 + 190048);
  v8 = (unsigned int *)(a1 + 171988);
  if (!*(_DWORD *)(a1 + 747488))
  {
    alloc_util_frame_buffers((int *)a1);
    *(_QWORD *)v6 = *(_QWORD *)v8;
    *(_DWORD *)(v6 + 8) = v8[253];
  }
  if (*v7 >= 1 && !*(_DWORD *)(a1 + 842056))
  {
    v9 = vp9_denoiser_alloc((int *)(a1 + 171696), (int *)(a1 + 747512), (unint64_t *)(a1 + 841880), *(_DWORD *)(v6 + 20), *v7, *v8, v8[1], v8[6], v8[7], v8[8], 160);
    if (v10)
      vpx_internal_error(a1 + 171696, 2, "Failed to allocate denoiser", v9);
  }
  alloc_raw_frame_buffers(a1);
  if (a2)
  {
    *v8 = a2;
    v11 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 < a2)
    {
      *v8 = v11;
      printf("Warning: Desired width too large, changed to %d\n", v11);
    }
  }
  if (a3)
  {
    v8[1] = a3;
    v12 = *(_DWORD *)(v6 + 4);
    if (v12 < a3)
    {
      v8[1] = v12;
      printf("Warning: Desired height too large, changed to %d\n", v12);
    }
  }
  update_frame_size(a1);
  return 0;
}

double vp9_apply_encoding_flags(uint64_t a1, int a2)
{
  int v2;
  unsigned int v3;
  double result;

  if ((*(_QWORD *)&a2 & 0x230000) != 0)
  {
    if ((*(_QWORD *)&a2 & 0x10000) != 0)
      v2 = 6;
    else
      v2 = 7;
    if ((*(_QWORD *)&a2 & 0x20000) != 0)
      v2 &= 5u;
    if ((*(_QWORD *)&a2 & 0x200000) != 0)
      v2 &= 3u;
    *(_DWORD *)(a1 + 739520) = v2;
  }
  if ((a2 & 0x1CC0000) != 0)
  {
    if ((*(_QWORD *)&a2 & 0x40000) != 0)
      v3 = 6;
    else
      v3 = 7;
    if ((*(_QWORD *)&a2 & 0x400000) != 0)
      v3 &= 5u;
    if ((*(_QWORD *)&a2 & 0x800000) != 0)
      v3 &= 3u;
    *(_DWORD *)(a1 + 194576) = (v3 >> 1) & 1;
    *(_DWORD *)(a1 + 194580) = v3 >> 2;
    *(_DWORD *)(a1 + 194568) = 1;
    *(_DWORD *)(a1 + 194572) = v3 & 1;
  }
  if ((a2 & 0x100000) != 0)
  {
    *(_QWORD *)&result = 1;
    *(_QWORD *)(a1 + 194584) = 1;
  }
  return result;
}

uint64_t vpx_highbd_sad32x16_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10)));
}

uint64_t vpx_highbd_sad32x16_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12)));
}

uint64_t vpx_highbd_sad16x32_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;

  v4 = (uint16x8_t *)(2 * a3 + 16);
  v5 = (uint16x8_t *)(2 * a1 + 16);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v5[-1], v4[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v5, *v4));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a4);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a2);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(v8, v6));
}

uint64_t vpx_highbd_sad16x32_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a3 + 16);
  v8 = (uint16x8_t *)(2 * a1 + 16);
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v8[-1], vrhaddq_u16(v7[-1], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(*v8, vrhaddq_u16(*v7, *(uint16x8_t *)(v6 + v5 + 16))));
    v5 += 32;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a4);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a2);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(v10, v9));
}

int32x4_t vpx_highbd_sad16x32x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 32;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18)));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad64x32_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10)));
}

uint64_t vpx_highbd_sad_skip_64x32_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (2 * vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))));
}

uint64_t vpx_highbd_sad32x64_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10)));
}

uint64_t vpx_highbd_sad_skip_32x64_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (2 * vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))));
}

uint64_t vpx_highbd_sad32x64_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 4096);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12)));
}

uint64_t vpx_highbd_sad32x32_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10)));
}

uint64_t vpx_highbd_sad_skip_32x32_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (2 * vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))));
}

uint64_t vpx_highbd_sad32x32_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 2048);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12)));
}

uint64_t vpx_highbd_sad64x64_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10)));
}

uint64_t vpx_highbd_sad_skip_64x64_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (2 * vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))));
}

int32x4_t vpx_highbd_sad16x16x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  int32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 16;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18)));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad_skip_16x8_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabdq_u16(*v5, *v7);
  v9 = vabdq_u16(v5[1], v7[1]);
  v10 = (uint16x8_t *)((char *)v5 + v4);
  v11 = (uint16x8_t *)((char *)v7 + v6);
  return (2
                      * vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 0x10), *(uint16x8_t *)(2 * a3 + 0x10))), vabdq_u16(*(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3))), v8), v9), vabdq_u16(*v10, *v11)), vabdq_u16(v10[1], v11[1])), vabdq_u16(*(uint16x8_t *)((char *)v10 + v4), *(uint16x8_t *)((char *)v11 + v6))), vabdq_u16(
                                                  *(uint16x8_t *)((char *)&v10[1] + v4),
                                                  *(uint16x8_t *)((char *)&v11[1] + v6)))));
}

uint64_t vpx_highbd_sad_skip_8x16_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return 2
       * vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6)));
}

int32x4_t vpx_highbd_sad8x16x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint16x8_t v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  int32x4_t result;

  v5 = 0;
  v6 = (uint16x8_t *)(2 * a1);
  v7 = 0uLL;
  v8 = 16;
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  do
  {
    v7 = vabaq_u16(v7, *v6, *(uint16x8_t *)(2 * *a3 + v5));
    v9 = vabaq_u16(v9, *v6, *(uint16x8_t *)(2 * a3[1] + v5));
    v10 = vabaq_u16(v10, *v6, *(uint16x8_t *)(2 * a3[2] + v5));
    v11 = vabaq_u16(v11, *v6, *(uint16x8_t *)(2 * a3[3] + v5));
    v5 += 2 * a4;
    v6 = (uint16x8_t *)((char *)v6 + 2 * a2);
    --v8;
  }
  while (v8);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(v7), (int32x4_t)vpaddlq_u16(v9)), vpaddq_s32((int32x4_t)vpaddlq_u16(v10), (int32x4_t)vpaddlq_u16(v11)));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x8_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6)));
}

uint64_t vpx_highbd_sad_skip_8x8_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return 2
       * vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5)));
}

uint64_t vpx_highbd_sad8x8_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;
  uint32x4_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;
  uint32x4_t v12;
  uint16x8_t *v13;
  uint16x8_t *v14;
  uint32x4_t v15;
  uint16x8_t *v16;
  uint16x8_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  v9 = vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5))));
  v10 = (uint16x8_t *)((char *)v6 + v5);
  v11 = (uint16x8_t *)((char *)v8 + v7);
  v12 = vpadalq_u16(v9, vabdq_u16(*v10, vrhaddq_u16(*v11, *(uint16x8_t *)(2 * a5 + 0x20))));
  v13 = (uint16x8_t *)((char *)v10 + v5);
  v14 = (uint16x8_t *)((char *)v11 + v7);
  v15 = vpadalq_u16(v12, vabdq_u16(*v13, vrhaddq_u16(*v14, *(uint16x8_t *)(2 * a5 + 0x30))));
  v16 = (uint16x8_t *)((char *)v13 + v5);
  v17 = (uint16x8_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v15, vabdq_u16(*v16, vrhaddq_u16(*v17, *(uint16x8_t *)(2 * a5 + 0x40)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7), *(uint16x8_t *)(2 * a5 + 0x50)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x60)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7 + v7),
                                                   *(uint16x8_t *)(2 * a5 + 0x70)))));
}

uint64_t vpx_highbd_sad8x4_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5)));
}

uint64_t vpx_highbd_sad_skip_8x4_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return 2
       * vaddlvq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 4 * a2), *(uint16x8_t *)(2 * a3 + 4 * a4)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)));
}

uint64_t vpx_highbd_sad8x4_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7), *(uint16x8_t *)(2 * a5 + 0x20)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x30)))));
}

int32x4_t vpx_highbd_sad8x4x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint16x8_t *v5;
  uint16x8_t *v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  int32x4_t result;

  v5 = (uint16x8_t *)(2 * *a3);
  v6 = (uint16x8_t *)(2 * a3[1]);
  v7 = (uint16x8_t *)(2 * a3[2]);
  v8 = (uint16x8_t *)(2 * a3[3]);
  v9 = *(uint16x8_t *)(2 * a1);
  v10 = *(uint16x8_t *)(2 * a1 + 2 * a2);
  v11 = 2 * a4;
  v12 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v5 + v11)), v9, *v5);
  v13 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v6 + v11)), v9, *v6);
  v14 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v7 + v11)), v9, *v7);
  v15 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v8 + v11)), v9, *v8);
  v16 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v17 = 4 * a4;
  v18 = vabaq_u16(v12, v16, *(uint16x8_t *)((char *)v5 + v17));
  v19 = vabaq_u16(v13, v16, *(uint16x8_t *)((char *)v6 + v17));
  v20 = vabaq_u16(v14, v16, *(uint16x8_t *)((char *)v7 + v17));
  v21 = vabaq_u16(v15, v16, *(uint16x8_t *)((char *)v8 + v17));
  v22 = *(uint16x8_t *)(2 * a1 + 6 * a2);
  result = vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(v18, v22, *(uint16x8_t *)((char *)v5 + 6 * a4))), (int32x4_t)vpaddlq_u16(vabaq_u16(v19, v22, *(uint16x8_t *)((char *)v6 + 6 * a4)))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(v20, v22, *(uint16x8_t *)((char *)v7 + 6 * a4))), (int32x4_t)vpaddlq_u16(vabaq_u16(v21, v22, *(uint16x8_t *)((char *)v8 + 6 * a4)))));
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_8x4x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint16x8_t v5;
  uint16x8_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t result;

  v5 = *(uint16x8_t *)(2 * a1);
  v6 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  v8 = vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * *a3 + v7)), v5, *(uint16x8_t *)(2 * *a3))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[1] + v7)), v5, *(uint16x8_t *)(2 * a3[1])))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[2] + v7)), v5, *(uint16x8_t *)(2 * a3[2]))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[3] + v7)), v5, *(uint16x8_t *)(2 * a3[3])))));
  result = vaddq_s32(v8, v8);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad4x8_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x4_t *v5;
  uint64_t v6;
  uint16x4_t *v7;
  uint32x4_t v8;
  uint16x4_t *v9;
  uint16x4_t *v10;
  uint32x4_t v11;
  uint16x4_t *v12;
  uint16x4_t *v13;
  uint32x4_t v14;
  uint16x4_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x4_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x4_t *)(2 * a3 + v6);
  v8 = vabal_u16(vabdl_u16(*v5, *v7), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3));
  v9 = (uint16x4_t *)((char *)v5 + v4);
  v10 = (uint16x4_t *)((char *)v7 + v6);
  v11 = vabal_u16(v8, *v9, *v10);
  v12 = (uint16x4_t *)((char *)v9 + v4);
  v13 = (uint16x4_t *)((char *)v10 + v6);
  v14 = vabal_u16(v11, *v12, *v13);
  v15 = (uint16x4_t *)((char *)v12 + v4);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v14, *v15, *(uint16x4_t *)((char *)v13 + v6)), *(uint16x4_t *)((char *)v15 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6 + v6)));
}

uint64_t vpx_highbd_sad_skip_4x8_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return (2
                      * vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5))));
}

uint64_t vpx_highbd_sad4x8_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;
  uint32x4_t v9;
  uint16x4_t *v10;
  uint16x4_t *v11;
  uint32x4_t v12;
  uint16x4_t *v13;
  uint16x4_t *v14;
  uint32x4_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  v9 = vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5)));
  v10 = (uint16x4_t *)((char *)v6 + v5);
  v11 = (uint16x4_t *)((char *)v8 + v7);
  v12 = vabal_u16(v9, *v10, vrhadd_u16(*v11, *(uint16x4_t *)(2 * a5 + 0x10)));
  v13 = (uint16x4_t *)((char *)v10 + v5);
  v14 = (uint16x4_t *)((char *)v11 + v7);
  v15 = vabal_u16(v12, *v13, vrhadd_u16(*v14, *(uint16x4_t *)(2 * a5 + 0x18)));
  v16 = (uint16x4_t *)((char *)v13 + v5);
  v17 = (uint16x4_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v15, *v16, vrhadd_u16(*v17, *(uint16x4_t *)(2 * a5 + 0x20))), *(uint16x4_t *)((char *)v16 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7), *(uint16x4_t *)(2 * a5 + 0x28))), *(uint16x4_t *)((char *)v16 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x30))), *(uint16x4_t *)((char *)v16 + v5 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x38))));
}

uint64_t vpx_highbd_sad4x4_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5)));
}

uint64_t vpx_highbd_sad_skip_4x4_bits8(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (2
                      * vaddvq_s32((int32x4_t)vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + 4 * a2), *(uint16x4_t *)(2 * a3 + 4 * a4)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3))));
}

uint64_t vpx_highbd_sad4x4_avg_bits8(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5))), *(uint16x4_t *)((char *)v6 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7), *(uint16x4_t *)(2 * a5 + 0x10))), *(uint16x4_t *)((char *)v6 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x18))));
}

int32x4_t vpx_highbd_sad_skip_4x4x4d_bits8(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  uint16x4_t v5;
  uint16x4_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t result;

  v5 = *(uint16x4_t *)(2 * a1);
  v6 = *(uint16x4_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  v8 = vpaddq_s32(vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * *a3 + v7)), v5, *(uint16x4_t *)(2 * *a3)), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[1] + v7)), v5, *(uint16x4_t *)(2 * a3[1]))), vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[2] + v7)), v5, *(uint16x4_t *)(2 * a3[2])), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[3] + v7)), v5, *(uint16x4_t *)(2 * a3[3]))));
  result = vaddq_s32(v8, v8);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 2;
}

uint64_t vpx_highbd_sad_skip_32x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_32x16_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad32x16_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 2;
}

int32x4_t vpx_highbd_sad32x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;

  v4 = (uint16x8_t *)(2 * a3 + 16);
  v5 = (uint16x8_t *)(2 * a1 + 16);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v5[-1], v4[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v5, *v4));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a4);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a2);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(v8, v6)) >> 2;
}

uint64_t vpx_highbd_sad_skip_16x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_16x32_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad16x32_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a3 + 16);
  v8 = (uint16x8_t *)(2 * a1 + 16);
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v8[-1], vrhaddq_u16(v7[-1], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(*v8, vrhaddq_u16(*v7, *(uint16x8_t *)(v6 + v5 + 16))));
    v5 += 32;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a4);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a2);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(v10, v9)) >> 2;
}

uint32x4_t vpx_highbd_sad16x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 32;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18))), 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad64x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 2;
}

uint64_t vpx_highbd_sad_skip_64x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad64x32_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad64x32_avg_neon(a1, a2, a3, a4, a5) >> 2;
}

int32x4_t vpx_highbd_sad64x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad64x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_64x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_64x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x64_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 2;
}

uint64_t vpx_highbd_sad_skip_32x64_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad32x64_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 4096);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 2;
}

int32x4_t vpx_highbd_sad32x64x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x64x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 2;
}

uint64_t vpx_highbd_sad_skip_32x32_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad32x32_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 2048);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 2;
}

int32x4_t vpx_highbd_sad32x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x32x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad64x64_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 2;
}

uint64_t vpx_highbd_sad_skip_64x64_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad64x64_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad64x64_avg_neon(a1, a2, a3, a4, a5) >> 2;
}

int32x4_t vpx_highbd_sad64x64x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad64x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_64x64x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_64x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad16x16_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad_skip_16x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_16x16_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad16x16_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad16x16_avg_neon(a1, a2, a3, a4, a5) >> 2;
}

uint32x4_t vpx_highbd_sad16x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 16;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18))), 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad16x8_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad_skip_16x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabdq_u16(*v5, *v7);
  v9 = vabdq_u16(v5[1], v7[1]);
  v10 = (uint16x8_t *)((char *)v5 + v4);
  v11 = (uint16x8_t *)((char *)v7 + v6);
  return (vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 0x10), *(uint16x8_t *)(2 * a3 + 0x10))), vabdq_u16(*(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3))), v8), v9), vabdq_u16(*v10, *v11)), vabdq_u16(v10[1], v11[1])), vabdq_u16(*(uint16x8_t *)((char *)v10 + v4), *(uint16x8_t *)((char *)v11 + v6))), vabdq_u16(
                                                  *(uint16x8_t *)((char *)&v10[1] + v4),
                                                  *(uint16x8_t *)((char *)&v11[1] + v6)))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad16x8_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad16x8_avg_neon(a1, a2, a3, a4, a5) >> 2;
}

int32x4_t vpx_highbd_sad16x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad16x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad8x16_neon(a1, a2, a3, a4) >> 2;
}

uint64_t vpx_highbd_sad_skip_8x16_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return (vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad8x16_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad8x16_avg_neon(a1, a2, a3, a4, a5) >> 2;
}

uint32x4_t vpx_highbd_sad8x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint16x8_t v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint32x4_t result;

  v5 = 0;
  v6 = (uint16x8_t *)(2 * a1);
  v7 = 0uLL;
  v8 = 16;
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  do
  {
    v7 = vabaq_u16(v7, *v6, *(uint16x8_t *)(2 * *a3 + v5));
    v9 = vabaq_u16(v9, *v6, *(uint16x8_t *)(2 * a3[1] + v5));
    v10 = vabaq_u16(v10, *v6, *(uint16x8_t *)(2 * a3[2] + v5));
    v11 = vabaq_u16(v11, *v6, *(uint16x8_t *)(2 * a3[3] + v5));
    v5 += 2 * a4;
    v6 = (uint16x8_t *)((char *)v6 + 2 * a2);
    --v8;
  }
  while (v8);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(v7), (int32x4_t)vpaddlq_u16(v9)), vpaddq_s32((int32x4_t)vpaddlq_u16(v10), (int32x4_t)vpaddlq_u16(v11))), 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_8x16x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_8x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 2;
}

uint64_t vpx_highbd_sad_skip_8x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return (vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad8x8_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;
  uint32x4_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;
  uint32x4_t v12;
  uint16x8_t *v13;
  uint16x8_t *v14;
  uint32x4_t v15;
  uint16x8_t *v16;
  uint16x8_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  v9 = vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5))));
  v10 = (uint16x8_t *)((char *)v6 + v5);
  v11 = (uint16x8_t *)((char *)v8 + v7);
  v12 = vpadalq_u16(v9, vabdq_u16(*v10, vrhaddq_u16(*v11, *(uint16x8_t *)(2 * a5 + 0x20))));
  v13 = (uint16x8_t *)((char *)v10 + v5);
  v14 = (uint16x8_t *)((char *)v11 + v7);
  v15 = vpadalq_u16(v12, vabdq_u16(*v13, vrhaddq_u16(*v14, *(uint16x8_t *)(2 * a5 + 0x30))));
  v16 = (uint16x8_t *)((char *)v13 + v5);
  v17 = (uint16x8_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v15, vabdq_u16(*v16, vrhaddq_u16(*v17, *(uint16x8_t *)(2 * a5 + 0x40)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7), *(uint16x8_t *)(2 * a5 + 0x50)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x60)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7 + v7),
                                                   *(uint16x8_t *)(2 * a5 + 0x70))))) >> 2;
}

int32x4_t vpx_highbd_sad8x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad8x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_8x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_8x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x4_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5))) >> 2;
}

uint64_t vpx_highbd_sad_skip_8x4_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (vaddlvq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 4 * a2), *(uint16x8_t *)(2 * a3 + 4 * a4)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad8x4_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7), *(uint16x8_t *)(2 * a5 + 0x20)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x30))))) >> 2;
}

uint32x4_t vpx_highbd_sad8x4x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint16x8_t *v5;
  uint16x8_t *v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint64_t v19;
  uint32x4_t result;

  v5 = (uint16x8_t *)(2 * *a3);
  v6 = (uint16x8_t *)(2 * a3[1]);
  v7 = (uint16x8_t *)(2 * a3[2]);
  v8 = (uint16x8_t *)(2 * a3[3]);
  v9 = *(uint16x8_t *)(2 * a1);
  v10 = *(uint16x8_t *)(2 * a1 + 2 * a2);
  v11 = 2 * a4;
  v12 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v5 + v11)), v9, *v5);
  v13 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v6 + v11)), v9, *v6);
  v14 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v7 + v11)), v9, *v7);
  v15 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v8 + v11)), v9, *v8);
  v16 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v17 = 4 * a4;
  v18 = *(uint16x8_t *)(2 * a1 + 6 * a2);
  v19 = 6 * a4;
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v12, v16, *(uint16x8_t *)((char *)v5 + v17)), v18, *(uint16x8_t *)((char *)v5 + v19))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v13, v16, *(uint16x8_t *)((char *)v6 + v17)), v18, *(uint16x8_t *)((char *)v6 + v19)))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v14, v16, *(uint16x8_t *)((char *)v7 + v17)), v18, *(uint16x8_t *)((char *)v7 + v19))), (int32x4_t)vpaddlq_u16(
                                          vabaq_u16(vabaq_u16(v15, v16, *(uint16x8_t *)((char *)v8 + v17)), v18, *(uint16x8_t *)((char *)v8 + v19))))), 2uLL);
  *a5 = result;
  return result;
}

__n128 vpx_highbd_sad_skip_8x4x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, __n128 *a5)
{
  uint16x8_t v5;
  uint16x8_t v6;
  uint64_t v7;
  __n128 result;

  v5 = *(uint16x8_t *)(2 * a1);
  v6 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  result = (__n128)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * *a3 + v7)), v5, *(uint16x8_t *)(2 * *a3))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[1] + v7)), v5, *(uint16x8_t *)(2 * a3[1])))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[2] + v7)), v5, *(uint16x8_t *)(2 * a3[2]))), (int32x4_t)vpaddlq_u16(
                                                               vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[3] + v7)), v5, *(uint16x8_t *)(2 * a3[3]))))), 1uLL) & __PAIR128__(0xBFFFFFFFBFFFFFFFLL, 0xBFFFFFFFBFFFFFFFLL));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad4x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x4_t *v5;
  uint64_t v6;
  uint16x4_t *v7;
  uint32x4_t v8;
  uint16x4_t *v9;
  uint16x4_t *v10;
  uint32x4_t v11;
  uint16x4_t *v12;
  uint16x4_t *v13;
  uint32x4_t v14;
  uint16x4_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x4_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x4_t *)(2 * a3 + v6);
  v8 = vabal_u16(vabdl_u16(*v5, *v7), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3));
  v9 = (uint16x4_t *)((char *)v5 + v4);
  v10 = (uint16x4_t *)((char *)v7 + v6);
  v11 = vabal_u16(v8, *v9, *v10);
  v12 = (uint16x4_t *)((char *)v9 + v4);
  v13 = (uint16x4_t *)((char *)v10 + v6);
  v14 = vabal_u16(v11, *v12, *v13);
  v15 = (uint16x4_t *)((char *)v12 + v4);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v14, *v15, *(uint16x4_t *)((char *)v13 + v6)), *(uint16x4_t *)((char *)v15 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 2;
}

uint64_t vpx_highbd_sad_skip_4x8_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return (vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad4x8_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;
  uint32x4_t v9;
  uint16x4_t *v10;
  uint16x4_t *v11;
  uint32x4_t v12;
  uint16x4_t *v13;
  uint16x4_t *v14;
  uint32x4_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  v9 = vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5)));
  v10 = (uint16x4_t *)((char *)v6 + v5);
  v11 = (uint16x4_t *)((char *)v8 + v7);
  v12 = vabal_u16(v9, *v10, vrhadd_u16(*v11, *(uint16x4_t *)(2 * a5 + 0x10)));
  v13 = (uint16x4_t *)((char *)v10 + v5);
  v14 = (uint16x4_t *)((char *)v11 + v7);
  v15 = vabal_u16(v12, *v13, vrhadd_u16(*v14, *(uint16x4_t *)(2 * a5 + 0x18)));
  v16 = (uint16x4_t *)((char *)v13 + v5);
  v17 = (uint16x4_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v15, *v16, vrhadd_u16(*v17, *(uint16x4_t *)(2 * a5 + 0x20))), *(uint16x4_t *)((char *)v16 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7), *(uint16x4_t *)(2 * a5 + 0x28))), *(uint16x4_t *)((char *)v16 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x30))), *(uint16x4_t *)((char *)v16 + v5 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x38)))) >> 2;
}

int32x4_t vpx_highbd_sad4x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad4x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_4x8x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_4x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad4x4_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5))) >> 2;
}

uint64_t vpx_highbd_sad_skip_4x4_bits10(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (vaddvq_s32((int32x4_t)vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + 4 * a2), *(uint16x4_t *)(2 * a3 + 4 * a4)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3))) >> 1) & 0x3FFFFFFF;
}

uint64_t vpx_highbd_sad4x4_avg_bits10(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5))), *(uint16x4_t *)((char *)v6 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7), *(uint16x4_t *)(2 * a5 + 0x10))), *(uint16x4_t *)((char *)v6 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x18)))) >> 2;
}

int32x4_t vpx_highbd_sad4x4x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad4x4x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 2uLL);
  *a5 = result;
  return result;
}

__n128 vpx_highbd_sad_skip_4x4x4d_bits10(uint64_t a1, int a2, _QWORD *a3, int a4, __n128 *a5)
{
  uint16x4_t v5;
  uint16x4_t v6;
  uint64_t v7;
  __n128 result;

  v5 = *(uint16x4_t *)(2 * a1);
  v6 = *(uint16x4_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  result = (__n128)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * *a3 + v7)), v5, *(uint16x4_t *)(2 * *a3)), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[1] + v7)), v5, *(uint16x4_t *)(2 * a3[1]))), vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[2] + v7)), v5, *(uint16x4_t *)(2 * a3[2])), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[3] + v7)), v5, *(uint16x4_t *)(2 * a3[3])))),
                                  1uLL) & __PAIR128__(0xBFFFFFFFBFFFFFFFLL, 0xBFFFFFFFBFFFFFFFLL));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -16;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 4;
}

uint64_t vpx_highbd_sad_skip_32x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_32x16_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad32x16_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 4;
}

int32x4_t vpx_highbd_sad32x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;

  v4 = (uint16x8_t *)(2 * a3 + 16);
  v5 = (uint16x8_t *)(2 * a1 + 16);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v5[-1], v4[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v5, *v4));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a4);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a2);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(v8, v6)) >> 4;
}

uint64_t vpx_highbd_sad_skip_16x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_16x32_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad16x32_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a3 + 16);
  v8 = (uint16x8_t *)(2 * a1 + 16);
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v8[-1], vrhaddq_u16(v7[-1], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(*v8, vrhaddq_u16(*v7, *(uint16x8_t *)(v6 + v5 + 16))));
    v5 += 32;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a4);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a2);
  }
  while ((_DWORD)v5 != 1024);
  return vaddvq_s32(vaddq_s32(v10, v9)) >> 4;
}

uint32x4_t vpx_highbd_sad16x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 32;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18))), 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad64x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 4;
}

uint64_t vpx_highbd_sad_skip_64x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad64x32_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad64x32_avg_neon(a1, a2, a3, a4, a5) >> 4;
}

int32x4_t vpx_highbd_sad64x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad64x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_64x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_64x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x64_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 4;
}

uint64_t vpx_highbd_sad_skip_32x64_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad32x64_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 4096);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 4;
}

int32x4_t vpx_highbd_sad32x64x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x64x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad32x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = -32;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-1], v5[-1]));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v4, *v5));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 4;
}

uint64_t vpx_highbd_sad_skip_32x32_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 32);
  v5 = (uint16x8_t *)(2 * a3 + 32);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -16;
  do
  {
    v6 = (int32x4_t)vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-2], v5[-2]));
    v7 = (int32x4_t)vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-1], v5[-1]));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v4, *v5));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[1], v5[1]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad32x32_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;

  v5 = 0;
  v6 = 2 * a5;
  v7 = (uint16x8_t *)(2 * a1 + 32);
  v8 = (uint16x8_t *)(2 * a3 + 32);
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  v12 = 0uLL;
  do
  {
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(v7[-2], vrhaddq_u16(v8[-2], *(uint16x8_t *)(v6 + v5))));
    v10 = (int32x4_t)vpadalq_u16((uint32x4_t)v10, vabdq_u16(v7[-1], vrhaddq_u16(v8[-1], *(uint16x8_t *)(v6 + v5 + 16))));
    v11 = (int32x4_t)vpadalq_u16((uint32x4_t)v11, vabdq_u16(*v7, vrhaddq_u16(*v8, *(uint16x8_t *)(v6 + v5 + 32))));
    v12 = (int32x4_t)vpadalq_u16((uint32x4_t)v12, vabdq_u16(v7[1], vrhaddq_u16(v8[1], *(uint16x8_t *)(v6 + v5 + 48))));
    v5 += 64;
    v7 = (uint16x8_t *)((char *)v7 + 2 * a2);
    v8 = (uint16x8_t *)((char *)v8 + 2 * a4);
  }
  while ((_DWORD)v5 != 2048);
  return vaddvq_s32(vaddq_s32(vaddq_s32(v10, v9), vaddq_s32(v11, v12))) >> 4;
}

int32x4_t vpx_highbd_sad32x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad32x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_32x32x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_32x32x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad64x64_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = -64;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 0uLL;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v10 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v10, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 2 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 2 * a4);
  }
  while (!__CFADD__(v7++, 1));
  return vaddvq_s32(vaddq_s32(vaddq_s32(v8, v6), vaddq_s32(v9, v10))) >> 4;
}

uint64_t vpx_highbd_sad_skip_64x64_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint16x8_t *v4;
  uint16x8_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int v10;

  v4 = (uint16x8_t *)(2 * a1 + 64);
  v5 = (uint16x8_t *)(2 * a3 + 64);
  v6 = 0uLL;
  v7 = 0uLL;
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = -32;
  do
  {
    v6 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v6, vabdq_u16(v4[-4], v5[-4])), vabdq_u16(*v4, *v5));
    v7 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v7, vabdq_u16(v4[-3], v5[-3])), vabdq_u16(v4[1], v5[1]));
    v8 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v8, vabdq_u16(v4[-2], v5[-2])), vabdq_u16(v4[2], v5[2]));
    v9 = (int32x4_t)vpadalq_u16(vpadalq_u16((uint32x4_t)v9, vabdq_u16(v4[-1], v5[-1])), vabdq_u16(v4[3], v5[3]));
    v4 = (uint16x8_t *)((char *)v4 + 4 * a2);
    v5 = (uint16x8_t *)((char *)v5 + 4 * a4);
  }
  while (!__CFADD__(v10++, 1));
  return (vaddvq_s32(vaddq_s32(vaddq_s32(v7, v6), vaddq_s32(v8, v9))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad64x64_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad64x64_avg_neon(a1, a2, a3, a4, a5) >> 4;
}

int32x4_t vpx_highbd_sad64x64x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad64x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_64x64x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_64x64x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad16x16_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad_skip_16x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad_skip_16x16_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad16x16_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad16x16_avg_neon(a1, a2, a3, a4, a5) >> 4;
}

uint32x4_t vpx_highbd_sad16x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v10;
  uint16x8_t *v11;
  uint64_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  uint16x8_t v19;
  uint32x4_t result;

  v5 = 0;
  v6 = 2 * a3[1];
  v7 = 2 * a3[2];
  v8 = 0uLL;
  v9 = 0uLL;
  v10 = 2 * a3[3];
  v11 = (uint16x8_t *)(2 * a1 + 16);
  v12 = 16;
  v13 = 0uLL;
  v14 = 0uLL;
  v15 = 0uLL;
  v16 = 0uLL;
  v17 = 0uLL;
  v18 = 0uLL;
  do
  {
    v19 = v11[-1];
    v15 = (int32x4_t)vpadalq_u16((uint32x4_t)v15, vabdq_u16(v19, *(uint16x8_t *)(2 * *a3 + v5)));
    v16 = (int32x4_t)vpadalq_u16((uint32x4_t)v16, vabdq_u16(v19, *(uint16x8_t *)(v6 + v5)));
    v17 = (int32x4_t)vpadalq_u16((uint32x4_t)v17, vabdq_u16(v19, *(uint16x8_t *)(v7 + v5)));
    v18 = (int32x4_t)vpadalq_u16((uint32x4_t)v18, vabdq_u16(v19, *(uint16x8_t *)(v10 + v5)));
    v14 = (int32x4_t)vpadalq_u16((uint32x4_t)v14, vabdq_u16(*v11, *(uint16x8_t *)(2 * *a3 + 16 + v5)));
    v13 = (int32x4_t)vpadalq_u16((uint32x4_t)v13, vabdq_u16(*v11, *(uint16x8_t *)(v6 + v5 + 16)));
    v9 = (int32x4_t)vpadalq_u16((uint32x4_t)v9, vabdq_u16(*v11, *(uint16x8_t *)(v7 + v5 + 16)));
    v8 = (int32x4_t)vpadalq_u16((uint32x4_t)v8, vabdq_u16(*v11, *(uint16x8_t *)(v10 + v5 + 16)));
    v11 = (uint16x8_t *)((char *)v11 + 2 * a2);
    v5 += 2 * a4;
    --v12;
  }
  while (v12);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32(vaddq_s32(v14, v15), vaddq_s32(v13, v16)), vpaddq_s32(vaddq_s32(v9, v17), vaddq_s32(v8, v18))), 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad16x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad16x8_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad_skip_16x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabdq_u16(*v5, *v7);
  v9 = vabdq_u16(v5[1], v7[1]);
  v10 = (uint16x8_t *)((char *)v5 + v4);
  v11 = (uint16x8_t *)((char *)v7 + v6);
  return (vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 0x10), *(uint16x8_t *)(2 * a3 + 0x10))), vabdq_u16(*(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3))), v8), v9), vabdq_u16(*v10, *v11)), vabdq_u16(v10[1], v11[1])), vabdq_u16(*(uint16x8_t *)((char *)v10 + v4), *(uint16x8_t *)((char *)v11 + v6))), vabdq_u16(
                                                  *(uint16x8_t *)((char *)&v10[1] + v4),
                                                  *(uint16x8_t *)((char *)&v11[1] + v6)))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad16x8_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad16x8_avg_neon(a1, a2, a3, a4, a5) >> 4;
}

int32x4_t vpx_highbd_sad16x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad16x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_16x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_16x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return vpx_highbd_sad8x16_neon(a1, a2, a3, a4) >> 4;
}

uint64_t vpx_highbd_sad_skip_8x16_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 4 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 4 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return (vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad8x16_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  return vpx_highbd_sad8x16_avg_neon(a1, a2, a3, a4, a5) >> 4;
}

uint32x4_t vpx_highbd_sad8x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint16x8_t v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint32x4_t result;

  v5 = 0;
  v6 = (uint16x8_t *)(2 * a1);
  v7 = 0uLL;
  v8 = 16;
  v9 = 0uLL;
  v10 = 0uLL;
  v11 = 0uLL;
  do
  {
    v7 = vabaq_u16(v7, *v6, *(uint16x8_t *)(2 * *a3 + v5));
    v9 = vabaq_u16(v9, *v6, *(uint16x8_t *)(2 * a3[1] + v5));
    v10 = vabaq_u16(v10, *v6, *(uint16x8_t *)(2 * a3[2] + v5));
    v11 = vabaq_u16(v11, *v6, *(uint16x8_t *)(2 * a3[3] + v5));
    v5 += 2 * a4;
    v6 = (uint16x8_t *)((char *)v6 + 2 * a2);
    --v8;
  }
  while (v8);
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(v7), (int32x4_t)vpaddlq_u16(v9)), vpaddq_s32((int32x4_t)vpaddlq_u16(v10), (int32x4_t)vpaddlq_u16(v11))), 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_8x16x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_8x16x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x8_t *v5;
  uint64_t v6;
  uint16x8_t *v7;
  uint16x8_t v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint16x8_t v11;
  uint16x8_t *v12;
  uint16x8_t *v13;
  uint16x8_t v14;
  uint16x8_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x8_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x8_t *)(2 * a3 + v6);
  v8 = vabaq_u16(vabdq_u16(*v5, *v7), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3));
  v9 = (uint16x8_t *)((char *)v5 + v4);
  v10 = (uint16x8_t *)((char *)v7 + v6);
  v11 = vabaq_u16(v8, *v9, *v10);
  v12 = (uint16x8_t *)((char *)v9 + v4);
  v13 = (uint16x8_t *)((char *)v10 + v6);
  v14 = vabaq_u16(v11, *v12, *v13);
  v15 = (uint16x8_t *)((char *)v12 + v4);
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabaq_u16(v14, *v15, *(uint16x8_t *)((char *)v13 + v6)), *(uint16x8_t *)((char *)v15 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x8_t *)((char *)v15 + v4 + v4 + v4), *(uint16x8_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 4;
}

uint64_t vpx_highbd_sad_skip_8x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return (vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad8x8_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;
  uint32x4_t v9;
  uint16x8_t *v10;
  uint16x8_t *v11;
  uint32x4_t v12;
  uint16x8_t *v13;
  uint16x8_t *v14;
  uint32x4_t v15;
  uint16x8_t *v16;
  uint16x8_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  v9 = vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5))));
  v10 = (uint16x8_t *)((char *)v6 + v5);
  v11 = (uint16x8_t *)((char *)v8 + v7);
  v12 = vpadalq_u16(v9, vabdq_u16(*v10, vrhaddq_u16(*v11, *(uint16x8_t *)(2 * a5 + 0x20))));
  v13 = (uint16x8_t *)((char *)v10 + v5);
  v14 = (uint16x8_t *)((char *)v11 + v7);
  v15 = vpadalq_u16(v12, vabdq_u16(*v13, vrhaddq_u16(*v14, *(uint16x8_t *)(2 * a5 + 0x30))));
  v16 = (uint16x8_t *)((char *)v13 + v5);
  v17 = (uint16x8_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpadalq_u16(v15, vabdq_u16(*v16, vrhaddq_u16(*v17, *(uint16x8_t *)(2 * a5 + 0x40)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7), *(uint16x8_t *)(2 * a5 + 0x50)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x60)))), vabdq_u16(*(uint16x8_t *)((char *)v16 + v5 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v17 + v7 + v7 + v7),
                                                   *(uint16x8_t *)(2 * a5 + 0x70))))) >> 4;
}

int32x4_t vpx_highbd_sad8x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad8x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_8x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_8x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad8x4_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddlvq_u16(vabaq_u16(vabaq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + v4), *(uint16x8_t *)(2 * a3 + v5)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3)), *(uint16x8_t *)(2 * a1 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5)), *(uint16x8_t *)(2 * a1 + v4 + v4 + v4), *(uint16x8_t *)(2 * a3 + v5 + v5 + v5))) >> 4;
}

uint64_t vpx_highbd_sad_skip_8x4_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (vaddlvq_u16(vabaq_u16(vabdq_u16(*(uint16x8_t *)(2 * a1 + 4 * a2), *(uint16x8_t *)(2 * a3 + 4 * a4)), *(uint16x8_t *)(2 * a1), *(uint16x8_t *)(2 * a3))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad8x4_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x8_t *v6;
  uint64_t v7;
  uint16x8_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x8_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x8_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vpadalq_u16(vpadalq_u16(vpadalq_u16(vpaddlq_u16(vabdq_u16(*v6, vrhaddq_u16(*v8, *(uint16x8_t *)(2 * a5 + 0x10)))), vabdq_u16(*(uint16x8_t *)(2 * a1), vrhaddq_u16(*(uint16x8_t *)(2 * a3), *(uint16x8_t *)(2 * a5)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7), *(uint16x8_t *)(2 * a5 + 0x20)))), vabdq_u16(*(uint16x8_t *)((char *)v6 + v5 + v5), vrhaddq_u16(*(uint16x8_t *)((char *)v8 + v7 + v7), *(uint16x8_t *)(2 * a5 + 0x30))))) >> 4;
}

uint32x4_t vpx_highbd_sad8x4x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, uint32x4_t *a5)
{
  uint16x8_t *v5;
  uint16x8_t *v6;
  uint16x8_t *v7;
  uint16x8_t *v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint16x8_t v16;
  uint64_t v17;
  uint16x8_t v18;
  uint64_t v19;
  uint32x4_t result;

  v5 = (uint16x8_t *)(2 * *a3);
  v6 = (uint16x8_t *)(2 * a3[1]);
  v7 = (uint16x8_t *)(2 * a3[2]);
  v8 = (uint16x8_t *)(2 * a3[3]);
  v9 = *(uint16x8_t *)(2 * a1);
  v10 = *(uint16x8_t *)(2 * a1 + 2 * a2);
  v11 = 2 * a4;
  v12 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v5 + v11)), v9, *v5);
  v13 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v6 + v11)), v9, *v6);
  v14 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v7 + v11)), v9, *v7);
  v15 = vabaq_u16(vabdq_u16(v10, *(uint16x8_t *)((char *)v8 + v11)), v9, *v8);
  v16 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v17 = 4 * a4;
  v18 = *(uint16x8_t *)(2 * a1 + 6 * a2);
  v19 = 6 * a4;
  result = vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v12, v16, *(uint16x8_t *)((char *)v5 + v17)), v18, *(uint16x8_t *)((char *)v5 + v19))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v13, v16, *(uint16x8_t *)((char *)v6 + v17)), v18, *(uint16x8_t *)((char *)v6 + v19)))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabaq_u16(v14, v16, *(uint16x8_t *)((char *)v7 + v17)), v18, *(uint16x8_t *)((char *)v7 + v19))), (int32x4_t)vpaddlq_u16(
                                          vabaq_u16(vabaq_u16(v15, v16, *(uint16x8_t *)((char *)v8 + v17)), v18, *(uint16x8_t *)((char *)v8 + v19))))), 4uLL);
  *a5 = result;
  return result;
}

__n128 vpx_highbd_sad_skip_8x4x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, __n128 *a5)
{
  uint16x8_t v5;
  uint16x8_t v6;
  uint64_t v7;
  __n128 result;

  v5 = *(uint16x8_t *)(2 * a1);
  v6 = *(uint16x8_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  result = (__n128)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * *a3 + v7)), v5, *(uint16x8_t *)(2 * *a3))), (int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[1] + v7)), v5, *(uint16x8_t *)(2 * a3[1])))), vpaddq_s32((int32x4_t)vpaddlq_u16(vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[2] + v7)), v5, *(uint16x8_t *)(2 * a3[2]))), (int32x4_t)vpaddlq_u16(
                                                               vabaq_u16(vabdq_u16(v6, *(uint16x8_t *)(2 * a3[3] + v7)), v5, *(uint16x8_t *)(2 * a3[3]))))), 3uLL) & __PAIR128__(0xEFFFFFFFEFFFFFFFLL, 0xEFFFFFFFEFFFFFFFLL));
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad4x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint16x4_t *v5;
  uint64_t v6;
  uint16x4_t *v7;
  uint32x4_t v8;
  uint16x4_t *v9;
  uint16x4_t *v10;
  uint32x4_t v11;
  uint16x4_t *v12;
  uint16x4_t *v13;
  uint32x4_t v14;
  uint16x4_t *v15;

  v4 = 2 * a2;
  v5 = (uint16x4_t *)(2 * a1 + v4);
  v6 = 2 * a4;
  v7 = (uint16x4_t *)(2 * a3 + v6);
  v8 = vabal_u16(vabdl_u16(*v5, *v7), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3));
  v9 = (uint16x4_t *)((char *)v5 + v4);
  v10 = (uint16x4_t *)((char *)v7 + v6);
  v11 = vabal_u16(v8, *v9, *v10);
  v12 = (uint16x4_t *)((char *)v9 + v4);
  v13 = (uint16x4_t *)((char *)v10 + v6);
  v14 = vabal_u16(v11, *v12, *v13);
  v15 = (uint16x4_t *)((char *)v12 + v4);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v14, *v15, *(uint16x4_t *)((char *)v13 + v6)), *(uint16x4_t *)((char *)v15 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6)), *(uint16x4_t *)((char *)v15 + v4 + v4 + v4), *(uint16x4_t *)((char *)v13 + v6 + v6 + v6 + v6))) >> 4;
}

uint64_t vpx_highbd_sad_skip_4x8_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 4 * a2;
  v5 = 4 * a4;
  return (vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad4x8_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;
  uint32x4_t v9;
  uint16x4_t *v10;
  uint16x4_t *v11;
  uint32x4_t v12;
  uint16x4_t *v13;
  uint16x4_t *v14;
  uint32x4_t v15;
  uint16x4_t *v16;
  uint16x4_t *v17;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  v9 = vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5)));
  v10 = (uint16x4_t *)((char *)v6 + v5);
  v11 = (uint16x4_t *)((char *)v8 + v7);
  v12 = vabal_u16(v9, *v10, vrhadd_u16(*v11, *(uint16x4_t *)(2 * a5 + 0x10)));
  v13 = (uint16x4_t *)((char *)v10 + v5);
  v14 = (uint16x4_t *)((char *)v11 + v7);
  v15 = vabal_u16(v12, *v13, vrhadd_u16(*v14, *(uint16x4_t *)(2 * a5 + 0x18)));
  v16 = (uint16x4_t *)((char *)v13 + v5);
  v17 = (uint16x4_t *)((char *)v14 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabal_u16(v15, *v16, vrhadd_u16(*v17, *(uint16x4_t *)(2 * a5 + 0x20))), *(uint16x4_t *)((char *)v16 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7), *(uint16x4_t *)(2 * a5 + 0x28))), *(uint16x4_t *)((char *)v16 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x30))), *(uint16x4_t *)((char *)v16 + v5 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v17 + v7 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x38)))) >> 4;
}

int32x4_t vpx_highbd_sad4x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad4x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

int32x4_t vpx_highbd_sad_skip_4x8x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad_skip_4x8x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

uint64_t vpx_highbd_sad4x4_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 2 * a2;
  v5 = 2 * a4;
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + v4), *(uint16x4_t *)(2 * a3 + v5)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3)), *(uint16x4_t *)(2 * a1 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5)), *(uint16x4_t *)(2 * a1 + v4 + v4 + v4), *(uint16x4_t *)(2 * a3 + v5 + v5 + v5))) >> 4;
}

uint64_t vpx_highbd_sad_skip_4x4_bits12(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (vaddvq_s32((int32x4_t)vabal_u16(vabdl_u16(*(uint16x4_t *)(2 * a1 + 4 * a2), *(uint16x4_t *)(2 * a3 + 4 * a4)), *(uint16x4_t *)(2 * a1), *(uint16x4_t *)(2 * a3))) >> 3) & 0xFFFFFFF;
}

uint64_t vpx_highbd_sad4x4_avg_bits12(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint16x4_t *v6;
  uint64_t v7;
  uint16x4_t *v8;

  v5 = 2 * a2;
  v6 = (uint16x4_t *)(2 * a1 + v5);
  v7 = 2 * a4;
  v8 = (uint16x4_t *)(2 * a3 + v7);
  return vaddvq_s32((int32x4_t)vabal_u16(vabal_u16(vabal_u16(vabdl_u16(*v6, vrhadd_u16(*v8, *(uint16x4_t *)(2 * a5 + 8))), *(uint16x4_t *)(2 * a1), vrhadd_u16(*(uint16x4_t *)(2 * a3), *(uint16x4_t *)(2 * a5))), *(uint16x4_t *)((char *)v6 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7), *(uint16x4_t *)(2 * a5 + 0x10))), *(uint16x4_t *)((char *)v6 + v5 + v5), vrhadd_u16(*(uint16x4_t *)((char *)v8 + v7 + v7), *(uint16x4_t *)(2 * a5 + 0x18)))) >> 4;
}

int32x4_t vpx_highbd_sad4x4x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, int32x4_t *a5)
{
  int32x4_t result;

  vpx_highbd_sad4x4x4d_neon(a1, a2, a3, a4, a5);
  result = (int32x4_t)vshrq_n_u32(*(uint32x4_t *)a5, 4uLL);
  *a5 = result;
  return result;
}

__n128 vpx_highbd_sad_skip_4x4x4d_bits12(uint64_t a1, int a2, _QWORD *a3, int a4, __n128 *a5)
{
  uint16x4_t v5;
  uint16x4_t v6;
  uint64_t v7;
  __n128 result;

  v5 = *(uint16x4_t *)(2 * a1);
  v6 = *(uint16x4_t *)(2 * a1 + 4 * a2);
  v7 = 4 * a4;
  result = (__n128)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)vpaddq_s32(vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * *a3 + v7)), v5, *(uint16x4_t *)(2 * *a3)), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[1] + v7)), v5, *(uint16x4_t *)(2 * a3[1]))), vpaddq_s32((int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[2] + v7)), v5, *(uint16x4_t *)(2 * a3[2])), (int32x4_t)vabal_u16(vabdl_u16(v6, *(uint16x4_t *)(2 * a3[3] + v7)), v5, *(uint16x4_t *)(2 * a3[3])))),
                                  3uLL) & __PAIR128__(0xEFFFFFFFEFFFFFFFLL, 0xEFFFFFFFEFFFFFFFLL));
  *a5 = result;
  return result;
}

uint64_t alloc_util_frame_buffers(int *a1)
{
  _DWORD *v2;
  signed int *v3;
  int *v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1 + 186877;
  v3 = a1 + 47484;
  v4 = a1 + 42997;
  v5 = (uint64_t)(a1 + 42924);
  if (vpx_realloc_frame_buffer((uint64_t)(a1 + 48656), a1[42997], a1[42998], a1[43003], a1[43004], a1[43005], 160, a1[47484], 0, 0, 0))vpx_internal_error(v5, 2, "Failed to allocate last frame buffer");
  if (vpx_realloc_frame_buffer((uint64_t)(a1 + 47616), *v4, v4[1], v4[6], v4[7], v4[8], 160, *v3, 0, 0, 0))vpx_internal_error(v5, 2, "Failed to allocate scaled source buffer");
  if (*v2)
  {
    if (!v3[35] && !v2[1098] && (int)v2[3] >= 3)
    {
      v2[1098] = 1;
      if (vpx_realloc_frame_buffer((uint64_t)(a1 + 187934), *v4 >> 1, v4[1] >> 1, v4[6], v4[7], v4[8], 160, *v3, 0, 0, 0))vpx_internal_error(v5, 2, "Failed to allocate scaled_frame for svc ");
    }
  }
  result = vpx_realloc_frame_buffer((uint64_t)(a1 + 47658), *v4, v4[1], v4[6], v4[7], v4[8], 160, *v3, 0, 0, 0);
  if ((_DWORD)result)
    return vpx_internal_error(v5, 2, "Failed to allocate scaled last source buffer");
  return result;
}

void encode_frame_to_data_rate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  float64x2_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long double v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  double v54;
  double v55;
  long double v56;
  float64x2_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  int64x2_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  float64x2_t *v81;
  uint64_t v82;
  uint64_t v83;
  float64x2_t *v84;
  uint64_t v85;
  double *v86;
  unint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  size_t v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int64x2_t v111;
  int32x4_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int32x4_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int32x4_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int32x4_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int32x4_t v204;
  int64x2_t v205;
  int32x4_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int32x4_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int32x4_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int32x4_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int32x4_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int32x4_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int32x4_t v224;
  unint64_t v225;
  unint64_t v226;
  uint8x8_t *v227;
  int16x8_t v228;
  int16x8_t *v229;
  int16x8_t v230;
  int16x8_t *v231;
  int16x8_t v232;
  int16x8_t *v233;
  int16x8_t v234;
  int16x8_t *v235;
  int16x8_t v236;
  int16x8_t *v237;
  int16x8_t v238;
  int16x8_t *v239;
  int16x8_t v240;
  int16x8_t *v241;
  int16x8_t v242;
  int16x8_t *v243;
  int16x8_t v244;
  int16x8_t *v245;
  int16x8_t v246;
  int16x8_t *v247;
  int16x8_t v248;
  int16x8_t *v249;
  int16x8_t v250;
  int16x8_t *v251;
  int16x8_t v252;
  int16x8_t *v253;
  int16x8_t v254;
  int16x8_t *v255;
  int16x8_t *v256;
  int16x8_t v257;
  int16x8_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  __int128 v275;
  _DWORD *v276;
  uint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  unsigned int v289;
  int v291;
  uint64_t v292;
  uint64_t v293;
  _BOOL4 v294;
  uint64_t v295;
  uint64_t v296;
  int frame_rdmult;
  uint64_t v298;
  int v299;
  unsigned int v300;
  int *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  uint64_t sse;
  int v311;
  unsigned int v312;
  unsigned int v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  __int128 v318;
  _BOOL4 v319;
  int *v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int v325;
  uint64_t v326;
  int v327;
  int v328;
  int v329;
  uint64_t v330;
  _DWORD *v331;
  uint64_t v332;
  int v333;
  int v334;
  int v335;
  uint64_t v336;
  _DWORD *v337;
  int *v338;
  int v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unsigned int v343;
  int v344;
  int v345;
  signed int v346;
  signed int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  unsigned int v353;
  int v354;
  int v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  int v362;
  int v363;
  int v364;
  uint64_t v365;
  int v366;
  unsigned int v367;
  unint64_t v368;
  uint64_t v369;
  int v370;
  int *v371;
  uint64_t v372;
  int v373;
  _DWORD *v374;
  int *v375;
  __int128 v376;
  uint64_t v377;
  int v378;
  _DWORD *v379;
  int *v380;
  int v381;
  _DWORD *v382;
  int *v383;
  uint64_t v384;
  int v385;
  _DWORD *v386;
  int *v387;
  int v388;
  int v389;
  double v390;
  double v391;
  double v392;
  double v393;
  int *v394;
  uint64_t i;
  uint64_t v396;
  uint64_t v397;
  char v398;
  uint64_t v399;
  char v400;
  char v401;
  _DWORD *v402;
  _DWORD *v403;
  int v404;
  int v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  int v414;
  int v415;
  int v416;
  int v417;
  int v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int v435;
  int v436;
  int v437;
  int v438;
  int v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  int v474;
  int v475;
  int v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  int v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  int v517;
  int v518;
  int v519;
  int v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int v525;
  int v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  int v533;
  int v534;
  int v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int v546;
  int v547;
  int v548;
  int v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  int v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  int v569;
  int v570;
  int v571;
  int v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  int v581;
  int v582;
  int v583;
  int v584;
  int v585;
  int v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  int v597;
  int v598;
  int v599;
  int v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  int v606;
  int v607;
  int v608;
  int v609;
  int v610;
  int v611;
  int v612;
  int v613;
  int v614;
  int v615;
  int v616;
  int v617;
  int v618;
  int v619;
  int v620;
  int v621;
  int v622;
  int v623;
  int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  int v630;
  int v631;
  int v632;
  int v633;
  int v634;
  int v635;
  int v636;
  int v637;
  int v638;
  int v639;
  int v640;
  int v641;
  int v642;
  int v643;
  int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  int v650;
  int v651;
  int v652;
  int v653;
  int v654;
  int v655;
  int v656;
  int v657;
  int v658;
  int v659;
  int v660;
  int v661;
  int v662;
  int v663;
  int v664;
  int v665;
  int v666;
  int v667;
  char v668;
  int v669;
  int v670;
  int v671;
  int v672;
  BOOL v673;
  int v674;
  int v675;
  uint64_t v676;
  unsigned int v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  int v681;
  _DWORD *v682;
  int *v683;
  uint64_t v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  int v693;
  uint64_t v694;
  uint64_t v695;
  int v696;
  int v697;
  int v698;
  int v699;
  int v700;
  int v701;
  int v702;
  int v703;
  int v704;
  BOOL v705;
  int v706;
  int v707;
  int v708;
  BOOL v710;
  int v711;
  int v712;
  BOOL v713;
  uint64_t v714;
  _OWORD *v715;
  uint64_t v716;
  int *v717;
  __int128 v718;
  BOOL v719;
  int v720;
  BOOL v721;
  int v722;
  int v723;
  uint64_t v724;
  int v725;
  BOOL v726;
  BOOL v727;
  double v728;
  int v729;
  double v730;
  int v731;
  int v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  unint64_t *v737;
  uint64_t v738;
  unsigned int v739;
  size_t v740;
  void *v741;
  unint64_t v742;
  uint64_t v743;
  int *v744;
  int *v745;
  double inited;
  double v747;
  double v748;
  double v749;
  double v750;
  double v751;
  double v752;
  uint32x4_t v753;
  int v754;
  uint64_t v755;
  int v756;
  uint64_t v757;
  int *v758;
  int *v759;
  int v760;
  int v761;
  BOOL v762;
  uint64_t v763;
  unint64_t v764;
  int v765;
  uint64_t v766;
  int *v767;
  int *v768;
  int v769;
  int v770;
  uint64_t v771;
  int v772;
  uint64_t v773;
  uint64_t v774;
  int *v775;
  int *v776;
  int v777;
  int v778;
  char v779;
  int v780;
  int *v781;
  int v782;
  int v783;
  int v784;
  void *v785;
  _DWORD *v786;
  int v787;
  _DWORD *v788;
  _DWORD *v789;
  _DWORD *v790;
  int v791;
  double v792;
  int v793;
  int v794;
  int v795;
  int *v796;
  _BOOL4 v797;
  int v798;
  int v799;
  int v800;
  unsigned int v801;
  char *v802;
  double v803;
  double v804;
  double v805;
  double v806;
  int v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  int v811;
  unint64_t v812;
  int v813;
  int v814;
  int v815;
  int16x4_t v816;
  _BOOL4 v817;
  int v818;
  uint64_t v819;
  int v820;
  uint64_t v821;
  double v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  int v826;
  uint64_t v827;
  uint64_t v828;
  _BYTE *v829;
  uint64_t v830;
  unint64_t v831;
  int v832;
  int v833;
  uint64_t v834;
  _BYTE *v835;
  _DWORD *v836;
  uint64_t v837;
  int v838;
  int v839;
  int v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  int v844;
  int v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  _BYTE *v849;
  uint64_t v850;
  int8x8_t v851;
  uint64_t v852;
  uint64_t v853;
  _BYTE *v854;
  unsigned int *v855;
  uint64_t v856;
  uint64_t v857;
  int *v858;
  _DWORD *v859;
  unsigned __int8 *v860;
  uint64_t v861;
  unint64_t v862;
  uint64_t *v863;
  uint64_t v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  int64x2_t v868;
  uint64_t v869;
  double v870;
  uint64_t v871;
  long double v872;
  uint64_t v873;
  uint64_t v874;
  int v875;
  uint64_t v876;
  unsigned int v877;
  uint64_t v878;
  uint64_t v879;
  int v880;
  uint64_t v881;
  uint64_t v882;
  unsigned int v883;
  uint64_t v884;
  int v885;
  unsigned int v886;
  unint64_t v887;
  _DWORD *v888;
  unint64_t v889;
  unint64_t v890;
  unint64_t v891;
  unint64_t v892;
  uint64_t v893;
  int *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  _BYTE __base[84];
  int32x4_t v899;
  int32x4_t v900;
  int32x4_t v901;
  int32x4_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int32x4_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int32x4_t v920;
  int32x4_t v921;
  int32x4_t v922;
  int32x4_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int32x4_t v936;
  int32x4_t v937;
  int32x4_t v938;
  int32x4_t v939;
  int32x4_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  int32x4_t v944;
  int32x4_t v945;
  int32x4_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int32x4_t v949;
  int32x4_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int32x4_t v953;
  int32x4_t v954;
  int32x4_t v955;
  int v956;
  int v957;
  int v958;
  int v959;
  int v960;
  int v961;
  int v962;
  int16x8_t v963[128];
  __int128 v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  __int128 v981;
  __int128 v982;
  __int128 v983;
  __int128 v984;
  __int128 v985;
  __int128 v986;
  __int128 v987;
  __int128 v988;
  __int128 v989;
  __int128 v990;
  __int128 v991;
  __int128 v992;
  __int128 v993;
  __int128 v994;
  __int128 v995;
  uint64_t v996;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2;
  v996 = *MEMORY[0x24BDAC8D0];
  if (vp9_svc_check_skip_enhancement_layer(v2))
    return;
  if (*(_DWORD *)(v9 + 194584))
  {
    *(_DWORD *)(v9 + 176400) = *(_DWORD *)(v9 + 194588);
    *(_DWORD *)(v9 + 194584) = 0;
  }
  v860 = (unsigned __int8 *)(v9 + 742180);
  v14 = v9 + 176424;
  if (*(_DWORD *)(v9 + 194568))
  {
    *(_QWORD *)(v9 + 194556) = *(_QWORD *)(v9 + 194572);
    *(_DWORD *)(v9 + 194564) = *(_DWORD *)(v9 + 194580);
  }
  v861 = v9 + 850672;
  if (!*(_DWORD *)(v9 + 172984))
  {
    v16 = *(_DWORD *)(v9 + 172640);
    v17 = *(_QWORD *)(v9 + 189944);
    if (v16 == -1)
    {
      v18 = *(_DWORD *)(v17 - 172);
      v20 = *(int *)(v9 + 194512);
      if ((_DWORD)v20 == -1)
        goto LABEL_79;
    }
    else
    {
      v18 = *(_DWORD *)(v9 + 189844) + *(unsigned __int8 *)(v9 + *v860 + 744200);
      v19 = v17 + 224 * v16;
      *(_DWORD *)(v19 + 52) = v18;
      *(_DWORD *)(v19 + 56) = *(_DWORD *)(v9 + 189848);
      v20 = *(int *)(v9 + 194512);
      if ((_DWORD)v20 == -1)
      {
LABEL_79:
        v74 = *(int *)(v9 + 194516);
        if ((_DWORD)v74 != -1)
        {
          v75 = *(_DWORD *)(v9 + 4 * v74 + 172048);
          if (v75 != -1)
            *(_DWORD *)(v9 + 176412) = v18 < *(_DWORD *)(v17 + 224 * v75 + 52);
        }
        v76 = *(int *)(v9 + 194520);
        if ((_DWORD)v76 != -1)
        {
          v77 = *(_DWORD *)(v9 + 4 * v76 + 172048);
          if (v77 != -1)
            *(_DWORD *)(v9 + 176416) = v18 < *(_DWORD *)(v17 + 224 * v77 + 52);
        }
        goto LABEL_7;
      }
    }
    v73 = *(_DWORD *)(v9 + 4 * v20 + 172048);
    if (v73 != -1)
      *(_DWORD *)(v9 + 176408) = v18 < *(_DWORD *)(v17 + 224 * v73 + 52);
    goto LABEL_79;
  }
LABEL_7:
  v15 = v9 + 739528;
  if (*(_DWORD *)(v9 + 189844))
  {
    *(_BYTE *)(v9 + 176441) = 0;
    v864 = v9 + 739528;
    if (*(_DWORD *)(v9 + 190076) != 2)
      goto LABEL_20;
  }
  else
  {
    *(_DWORD *)(v9 + 850796) = *(_DWORD *)(v9 + 190072);
    *(_BYTE *)(v9 + 176441) = 0;
    v864 = v9 + 739528;
    if (*(_DWORD *)(v9 + 190076) != 2)
      goto LABEL_20;
  }
  if (*(_DWORD *)(v9 + 740024))
  {
    v21 = *(_DWORD *)(v9 + 172968);
    if (!v21)
    {
LABEL_19:
      *(_DWORD *)(v15 + 500) = v21;
      goto LABEL_20;
    }
    if (*(_DWORD *)(v9 + 194564)
      || (v22 = *(_DWORD *)(v9 + 739192),
          v23 = *(_DWORD *)(v9 + 739196),
          v24 = *(_DWORD *)(v9 + 739200),
          !(v23 + v22 + v24)))
    {
      v21 = 0;
      goto LABEL_19;
    }
    v696 = *(_DWORD *)(v9 + 739208);
    v697 = *(_DWORD *)(v9 + 739212);
    v698 = *(_DWORD *)(v9 + 739216);
    v699 = *(_DWORD *)(v9 + 739224);
    v700 = *(_DWORD *)(v9 + 739228);
    v701 = *(_DWORD *)(v9 + 739232);
    v702 = v700 + v699 + v701;
    v703 = v697 + v696 + v698;
    if (v703)
    {
      v704 = 50 * v696;
      if (v22)
        v705 = 0;
      else
        v705 = v704 < v703;
      v706 = v705;
      if (v702)
      {
        if (50 * v699 < v702)
          v707 = v706;
        else
          v707 = 0;
        v708 = 50 * v697;
        v710 = 50 * v700 < v702 && v708 < v703 && v23 == 0;
        v711 = v707 | 2;
        if (!v710)
          v711 = v707;
        v712 = 50 * v698;
        v713 = 50 * v701 < v702 && v712 < v703;
      }
      else
      {
        v726 = 50 * v697 < v703 && v23 == 0;
        v711 = v706 | 2;
        if (!v726)
          v711 = v706;
        v713 = 50 * v698 < v703;
      }
    }
    else
    {
      if (!v702)
      {
        v21 = (v22 == 0) | (2 * (v23 == 0)) | (4 * (v24 == 0));
LABEL_472:
        v15 = v864;
        goto LABEL_19;
      }
      if (v22)
        v719 = 0;
      else
        v719 = 50 * v699 < v702;
      v720 = v719;
      v721 = 50 * v700 < v702 && v23 == 0;
      v711 = v720 | 2;
      if (!v721)
        v711 = v720;
      v713 = 50 * v701 < v702;
    }
    v727 = v713 && v24 == 0;
    v21 = v711 | 4;
    if (!v727)
      v21 = v711;
    goto LABEL_472;
  }
LABEL_20:
  v897 = v9 + 740272;
  v895 = v9 + 74624;
  if (!*(_DWORD *)(v9 + 172972) || *(_BYTE *)(v9 + 172988))
  {
    *(_WORD *)(v9 + 176472) = 0;
    *(_BYTE *)(v9 + 176474) = 0;
    *(_DWORD *)(v9 + 176480) = -1;
    *(_DWORD *)(v9 + 176477) = -1;
    *(_OWORD *)(v9 + 176488) = 0u;
    *(_OWORD *)(v9 + 176504) = 0u;
    *(_OWORD *)(v9 + 176520) = 0u;
    *(_OWORD *)(v9 + 176536) = 0u;
    *(_OWORD *)(v9 + 176552) = 0u;
    *(_OWORD *)(v9 + 176568) = 0u;
    *(_DWORD *)(v9 + 176584) = 0;
    v25 = *(_QWORD *)(v9 + 190312);
    *(_QWORD *)(v9 + 189920) = v25;
    *(_DWORD *)(v9 + 738584) = 0;
    if ((_DWORD)v25)
    {
      *(_DWORD *)(v9 + 189924) = 1;
      *(_DWORD *)(v9 + 172996) = 0;
      *(_DWORD *)(v9 + 176400) = 0;
    }
    else if (*(_BYTE *)(v9 + 172988))
    {
      *(_DWORD *)(v9 + 172996) = 2;
    }
  }
  v856 = v6;
  v862 = v9;
  v863 = v8;
  v855 = v4;
  v896 = v9 + 172464;
  v857 = v9 + 198912;
  v858 = (int *)(v9 + 171696);
  v859 = (_DWORD *)(v9 + 738452);
  v893 = v9 + 176424;
  v884 = v9 + 190464;
  if (*(_DWORD *)(v9 + 190376) == 1)
  {
    v26 = *(_DWORD *)(v9 + 173016);
    v27 = v26 + 1;
    v28 = v26;
    v29 = (int)(v26 + 1) >= 0 ? v26 + 1 : v26 + 2;
    v30 = *(_DWORD *)(v896 + 544);
    v31 = v30 + 1 >= 0 ? v30 + 1 : v30 + 2;
    if (v30 + 1 >= 2)
    {
      v32 = *(_DWORD *)(v896 + 544);
      v872 = (1.0 - exp(NAN)) * 67.035434 + 17.492222;
      v33 = log(v872);
      if (v27 >= 2)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v37 = (v29 >> 1);
        v38 = (v31 >> 1);
        v39 = v37 & 0xFFFFFFFC;
        v40 = v872;
        v41 = vdupq_lane_s64(*(uint64_t *)&v872, 0);
        v42 = vdupq_lane_s64(*(uint64_t *)&v33, 0);
        v43 = 8 * v37;
        v44 = 0.0;
        v45 = 16;
        v46 = *(double *)&v42.i64[1];
        v880 = v28;
        v878 = v37;
        v871 = v38;
        v870 = v33;
        v869 = v39;
        v867 = v42.i64[0];
        v868 = v41;
        v866 = v43;
        while (1)
        {
          v879 = v28;
          v47 = v35;
          v48 = 2 * v35++;
          v882 = v48;
          if (2 * (int)v47 + 2 > v48)
          {
            v873 = v45;
            v874 = v35;
            v876 = v34;
            v49 = 0;
            v50 = 0;
            v51 = 0;
            v881 = v47 * v37;
            v877 = 2 * v35;
            v875 = v36;
            v52 = v36 | 1;
            v885 = v52;
            while (1)
            {
              if (v882 >= v32)
              {
                v53 = v50 + 1;
                v54 = 0.0;
                v55 = 0.0;
              }
              else
              {
                v58 = 2 * v50;
                v53 = v50 + 1;
                v54 = 0.0;
                if (2 * (int)v50 + 2 <= (2 * v50) || (v59 = v896, v58 >= v880))
                {
                  v55 = 0.0;
                  v14 = v893;
                }
                else
                {
                  v60 = v51 + 1;
                  v61 = 2 * v53;
                  v62 = v879;
                  v55 = 0.0;
                  if (v58 < (int)v879)
                  {
                    v63 = v49;
                    v64 = v51 + 1;
                    do
                    {
                      *(_DWORD *)__base = 0;
                      v54 = v54 + (double)(*(unsigned int (**)(void))(v897 + 408))();
                      v55 = v55 + 1.0;
                      v62 = *(int *)(v896 + 552);
                      v65 = v64 < v62 && v61 > v64;
                      ++v64;
                      v63 += 8;
                    }
                    while (v65);
                    v59 = v896;
                    v32 = *(_DWORD *)(v896 + 544);
                    v52 = v885;
                  }
                  if (v52 >= v32 || v877 <= v52)
                  {
                    v879 = v62;
                    v880 = v62;
                  }
                  else
                  {
                    if (v58 < (int)v62)
                    {
                      v66 = v49;
                      v14 = v893;
                      do
                      {
                        *(_DWORD *)__base = 0;
                        v54 = v54 + (double)(*(unsigned int (**)(void))(v897 + 408))();
                        v55 = v55 + 1.0;
                        v67 = v60 < *(int *)(v59 + 552) && v61 > v60;
                        ++v60;
                        v66 += 8;
                      }
                      while (v67);
                      v32 = *(_DWORD *)(v59 + 544);
                      v879 = *(int *)(v59 + 552);
                      v880 = *(_DWORD *)(v59 + 552);
                      v37 = v878;
                      goto LABEL_41;
                    }
                    v879 = v62;
                    v880 = v62;
                  }
                  v14 = v893;
                  v37 = v878;
                }
              }
LABEL_41:
              v56 = (1.0 - exp(v54 / v55 * 0.015625 * -0.0021489)) * 67.035434 + 17.492222;
              v57 = *(float64x2_t **)(v884 + 4152);
              v57->f64[v50 + v881] = v56;
              v44 = v44 + log(v56);
              v51 += 2;
              v49 += 16;
              v50 = v53;
              v52 = v885;
              if (v53 == v37)
              {
                v38 = v871;
                v40 = v872;
                v33 = v870;
                v34 = v876;
                v36 = v875;
                v39 = v869;
                v45 = v873;
                v35 = v874;
                v42.i64[0] = v867;
                v41 = v868;
                v43 = v866;
                goto LABEL_37;
              }
            }
          }
          v57 = *(float64x2_t **)(v884 + 4152);
          if (v37 >= 4)
          {
            v69 = (int64x2_t *)((char *)v57 + v45);
            v70 = v39;
            do
            {
              v69[-1] = v41;
              *v69 = v41;
              v44 = v44 + *(double *)v42.i64 + v46 + *(double *)v42.i64 + v46;
              v69 += 2;
              v70 -= 4;
            }
            while (v70);
            if (v39 == v37)
              goto LABEL_37;
            v68 = v39;
          }
          else
          {
            v68 = 0;
          }
          v71 = v37 - v68;
          v72 = v68 + v34;
          do
          {
            v57->f64[v72] = v40;
            v44 = v33 + v44;
            ++v72;
            --v71;
          }
          while (v71);
LABEL_37:
          v28 = v879;
          v36 += 2;
          v45 += v43;
          v34 += v37;
          if (v35 == v38)
          {
            v78 = exp(v44 / (double)((int)v38 * (int)v37));
            v79 = 0;
            v80 = 0;
            v10 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v78, 0);
            v81 = v57 + 1;
            while (1)
            {
              if (v37 >= 4)
              {
                v83 = v37 & 0xFFFFFFFC;
                v84 = v81;
                do
                {
                  v11 = (int32x4_t)vdivq_f64(v84[-1], v10);
                  v12 = (int32x4_t)vdivq_f64(*v84, v10);
                  v84[-1] = (float64x2_t)v11;
                  *v84 = (float64x2_t)v12;
                  v84 += 2;
                  v83 -= 4;
                }
                while (v83);
                v82 = v37 & 0xFFFFFFFC;
                if (v82 == v37)
                  goto LABEL_86;
              }
              else
              {
                v82 = 0;
              }
              v85 = v37 - v82;
              v86 = &v57->f64[v82 + v79];
              do
              {
                *(double *)v11.i64 = *v86 / v78;
                *v86++ = *(double *)v11.i64;
                --v85;
              }
              while (v85);
LABEL_86:
              ++v80;
              v81 = (float64x2_t *)((char *)v81 + 8 * v37);
              v79 += v37;
              if (v80 == v38)
                goto LABEL_95;
            }
          }
        }
      }
    }
  }
LABEL_95:
  v87 = v862;
  v88 = v863;
  v89 = v862 + 850377;
  v90 = v884;
  if (*(_DWORD *)(v14 + 13724) == 5)
  {
    v91 = *(_QWORD *)(v884 + 4136);
    if (v91)
    {
      v92 = *(_DWORD *)(v896 + 540);
      if (*(_DWORD *)(v884 + 4144) >= v92)
      {
        LODWORD(v93) = *(_DWORD *)(v896 + 548);
        if (*(_DWORD *)(v884 + 4148) >= (int)v93)
          goto LABEL_106;
      }
      free(*(void **)(v91 - 8));
    }
    *(_QWORD *)(v884 + 4136) = 0;
    v94 = *(_DWORD *)(v896 + 548);
    if (((v94 * *(_DWORD *)(v896 + 540)) & 0x80000000) == 0
      && (v95 = 8 * (v94 * *(_DWORD *)(v896 + 540)),
          (v96 = malloc_type_malloc(v95 + 23, 0x74AD08B5uLL)) != 0)
      && (v97 = ((unint64_t)v96 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v97 - 8) = v96, v97))
    {
      bzero((void *)(((unint64_t)v96 + 23) & 0xFFFFFFFFFFFFFFF0), v95);
      *(_QWORD *)(v884 + 4136) = v97;
    }
    else
    {
      *(_QWORD *)(v884 + 4136) = 0;
      vpx_internal_error((uint64_t)v858, 2, "Failed to allocate cpi->mb_wiener_variance");
    }
    v92 = *(_DWORD *)(v896 + 540);
    *(_DWORD *)(v884 + 4144) = v92;
    LODWORD(v93) = *(_DWORD *)(v896 + 548);
    *(_DWORD *)(v884 + 4148) = v93;
LABEL_106:
    v98 = *(_QWORD *)(v14 + 14016);
    v865 = *(_QWORD *)(v98 + 56);
    v99 = *(int *)(v98 + 16);
    *(_QWORD *)(v895 + 16) = v98;
    if ((*(_BYTE *)(v98 + 152) & 8) != 0)
    {
      v891 = (unint64_t)&v964 >> 1;
      v995 = 0u;
      v994 = 0u;
      v993 = 0u;
      v992 = 0u;
      v991 = 0u;
      v990 = 0u;
      v989 = 0u;
      v988 = 0u;
      v987 = 0u;
      v986 = 0u;
      v985 = 0u;
      v984 = 0u;
      v983 = 0u;
      v982 = 0u;
      v981 = 0u;
      v980 = 0u;
      v979 = 0u;
      v978 = 0u;
      v977 = 0u;
      v976 = 0u;
      v975 = 0u;
      v974 = 0u;
      v973 = 0u;
      v972 = 0u;
      v971 = 0u;
      v970 = 0u;
      v969 = 0u;
      v968 = 0u;
      v967 = 0u;
      v966 = 0u;
      v965 = 0u;
      v964 = 0u;
      v88 = v863;
      *(_QWORD *)(v884 + 4128) = 0;
      if (v92 < 1)
        goto LABEL_139;
    }
    else
    {
      v979 = 0u;
      v978 = 0u;
      v977 = 0u;
      v976 = 0u;
      v975 = 0u;
      v974 = 0u;
      v973 = 0u;
      v972 = 0u;
      v971 = 0u;
      v970 = 0u;
      v969 = 0u;
      v968 = 0u;
      v967 = 0u;
      v966 = 0u;
      v891 = (unint64_t)&v964;
      v965 = 0u;
      v964 = 0u;
      v88 = v863;
      *(_QWORD *)(v884 + 4128) = 0;
      if (v92 < 1)
        goto LABEL_139;
    }
    if ((int)v93 >= 1)
    {
      v100 = 0;
      v101 = 0;
      v102 = 0;
      do
      {
        if ((int)v93 >= 1)
        {
          v103 = 0;
          do
          {
            v227 = (uint8x8_t *)(v865 + 16 * (int)v99 * (int)v101 + (16 * v103));
            if ((*(_BYTE *)(*(_QWORD *)(v895 + 16) + 152) & 8) != 0)
            {
              v228 = vsubq_s16(*(int16x8_t *)(2 * (_QWORD)v227 + 0x10), *(int16x8_t *)(2 * v891 + 0x10));
              v963[0] = vsubq_s16(*(int16x8_t *)(2 * (_QWORD)v227), *(int16x8_t *)(2 * v891));
              v963[1] = v228;
              v229 = (int16x8_t *)(2 * (_QWORD)v227 + 2 * v99);
              v230 = vsubq_s16(v229[1], *(int16x8_t *)(2 * v891 + 0x30));
              v963[2] = vsubq_s16(*v229, *(int16x8_t *)(2 * v891 + 0x20));
              v963[3] = v230;
              v231 = (int16x8_t *)((char *)v229 + 2 * v99);
              v232 = vsubq_s16(v231[1], *(int16x8_t *)(2 * v891 + 0x50));
              v963[4] = vsubq_s16(*v231, *(int16x8_t *)(2 * v891 + 0x40));
              v963[5] = v232;
              v233 = (int16x8_t *)((char *)v231 + 2 * v99);
              v234 = vsubq_s16(v233[1], *(int16x8_t *)(2 * v891 + 0x70));
              v963[6] = vsubq_s16(*v233, *(int16x8_t *)(2 * v891 + 0x60));
              v963[7] = v234;
              v235 = (int16x8_t *)((char *)v233 + 2 * v99);
              v236 = vsubq_s16(v235[1], *(int16x8_t *)(2 * v891 + 0x90));
              v963[8] = vsubq_s16(*v235, *(int16x8_t *)(2 * v891 + 0x80));
              v963[9] = v236;
              v237 = (int16x8_t *)((char *)v235 + 2 * v99);
              v238 = vsubq_s16(v237[1], *(int16x8_t *)(2 * v891 + 0xB0));
              v963[10] = vsubq_s16(*v237, *(int16x8_t *)(2 * v891 + 0xA0));
              v963[11] = v238;
              v239 = (int16x8_t *)((char *)v237 + 2 * v99);
              v240 = vsubq_s16(v239[1], *(int16x8_t *)(2 * v891 + 0xD0));
              v963[12] = vsubq_s16(*v239, *(int16x8_t *)(2 * v891 + 0xC0));
              v963[13] = v240;
              v241 = (int16x8_t *)((char *)v239 + 2 * v99);
              v242 = vsubq_s16(v241[1], *(int16x8_t *)(2 * v891 + 0xF0));
              v963[14] = vsubq_s16(*v241, *(int16x8_t *)(2 * v891 + 0xE0));
              v963[15] = v242;
              v243 = (int16x8_t *)((char *)v241 + 2 * v99);
              v244 = vsubq_s16(v243[1], *(int16x8_t *)(2 * v891 + 0x110));
              v963[16] = vsubq_s16(*v243, *(int16x8_t *)(2 * v891 + 0x100));
              v963[17] = v244;
              v245 = (int16x8_t *)((char *)v243 + 2 * v99);
              v246 = vsubq_s16(v245[1], *(int16x8_t *)(2 * v891 + 0x130));
              v963[18] = vsubq_s16(*v245, *(int16x8_t *)(2 * v891 + 0x120));
              v963[19] = v246;
              v247 = (int16x8_t *)((char *)v245 + 2 * v99);
              v248 = vsubq_s16(v247[1], *(int16x8_t *)(2 * v891 + 0x150));
              v963[20] = vsubq_s16(*v247, *(int16x8_t *)(2 * v891 + 0x140));
              v963[21] = v248;
              v249 = (int16x8_t *)((char *)v247 + 2 * v99);
              v250 = vsubq_s16(v249[1], *(int16x8_t *)(2 * v891 + 0x170));
              v963[22] = vsubq_s16(*v249, *(int16x8_t *)(2 * v891 + 0x160));
              v963[23] = v250;
              v251 = (int16x8_t *)((char *)v249 + 2 * v99);
              v252 = vsubq_s16(v251[1], *(int16x8_t *)(2 * v891 + 0x190));
              v963[24] = vsubq_s16(*v251, *(int16x8_t *)(2 * v891 + 0x180));
              v963[25] = v252;
              v253 = (int16x8_t *)((char *)v251 + 2 * v99);
              v254 = vsubq_s16(v253[1], *(int16x8_t *)(2 * v891 + 0x1B0));
              v963[26] = vsubq_s16(*v253, *(int16x8_t *)(2 * v891 + 0x1A0));
              v963[27] = v254;
              v255 = (int16x8_t *)((char *)v253 + 2 * v99);
              v256 = (int16x8_t *)((char *)v255 + 2 * v99);
              v257 = vsubq_s16(v255[1], *(int16x8_t *)(2 * v891 + 0x1D0));
              v963[28] = vsubq_s16(*v255, *(int16x8_t *)(2 * v891 + 0x1C0));
              v963[29] = v257;
              v258 = vsubq_s16(v256[1], *(int16x8_t *)(2 * v891 + 0x1F0));
              v963[30] = vsubq_s16(*v256, *(int16x8_t *)(2 * v891 + 0x1E0));
              v963[31] = v258;
              vpx_highbd_hadamard_16x16_neon(v963, 16, (int32x4_t *)__base);
            }
            else
            {
              vpx_subtract_block_neon(16, 16, (uint16x8_t *)v963, 16, v227, v99, (uint8x8_t *)v891, 16);
              vpx_hadamard_16x16_neon(v963, 16, (uint64_t)__base);
            }
            *(_DWORD *)__base = 0;
            *(int32x4_t *)&__base[4] = vabsq_s32(*(int32x4_t *)&__base[4]);
            *(int32x4_t *)&__base[20] = vabsq_s32(*(int32x4_t *)&__base[20]);
            *(int32x4_t *)&__base[36] = vabsq_s32(*(int32x4_t *)&__base[36]);
            *(int32x4_t *)&__base[52] = vabsq_s32(*(int32x4_t *)&__base[52]);
            *(int32x4_t *)&__base[68] = vabsq_s32(*(int32x4_t *)&__base[68]);
            v899 = vabsq_s32(v899);
            v900 = vabsq_s32(v900);
            v901 = vabsq_s32(v901);
            v902 = vabsq_s32(v902);
            v903 = vabsq_s32(v903);
            v904 = vabsq_s32(v904);
            v905 = vabsq_s32(v905);
            v906 = vabsq_s32(v906);
            v907 = vabsq_s32(v907);
            v908 = vabsq_s32(v908);
            v909 = vabsq_s32(v909);
            v910 = vabsq_s32(v910);
            v911 = vabsq_s32(v911);
            v912 = vabsq_s32(v912);
            v913 = vabsq_s32(v913);
            v914 = vabsq_s32(v914);
            v915 = vabsq_s32(v915);
            v916 = vabsq_s32(v916);
            v917 = vabsq_s32(v917);
            v918 = vabsq_s32(v918);
            v919 = vabsq_s32(v919);
            v920 = vabsq_s32(v920);
            v921 = vabsq_s32(v921);
            v922 = vabsq_s32(v922);
            v923 = vabsq_s32(v923);
            v924 = vabsq_s32(v924);
            v925 = vabsq_s32(v925);
            v926 = vabsq_s32(v926);
            v927 = vabsq_s32(v927);
            v928 = vabsq_s32(v928);
            v929 = vabsq_s32(v929);
            v930 = vabsq_s32(v930);
            v931 = vabsq_s32(v931);
            v932 = vabsq_s32(v932);
            v933 = vabsq_s32(v933);
            v934 = vabsq_s32(v934);
            v935 = vabsq_s32(v935);
            v936 = vabsq_s32(v936);
            v937 = vabsq_s32(v937);
            v938 = vabsq_s32(v938);
            v939 = vabsq_s32(v939);
            v940 = vabsq_s32(v940);
            v941 = vabsq_s32(v941);
            v942 = vabsq_s32(v942);
            v943 = vabsq_s32(v943);
            v944 = vabsq_s32(v944);
            v945 = vabsq_s32(v945);
            v946 = vabsq_s32(v946);
            v947 = vabsq_s32(v947);
            v948 = vabsq_s32(v948);
            v949 = vabsq_s32(v949);
            v950 = vabsq_s32(v950);
            v951 = vabsq_s32(v951);
            v952 = vabsq_s32(v952);
            v953 = vabsq_s32(v953);
            v954 = vabsq_s32(v954);
            v955 = vabsq_s32(v955);
            v259 = v956;
            if (v956 < 0)
              v259 = -v956;
            v956 = v259;
            v260 = v957;
            if (v957 < 0)
              v260 = -v957;
            v957 = v260;
            v261 = v958;
            if (v958 < 0)
              v261 = -v958;
            v958 = v261;
            v262 = v959;
            if (v959 < 0)
              v262 = -v959;
            v959 = v262;
            v263 = v960;
            if (v960 < 0)
              v263 = -v960;
            v960 = v263;
            v264 = v961;
            if (v961 < 0)
              v264 = -v961;
            v961 = v264;
            v265 = v962;
            if (v962 < 0)
              v265 = -v962;
            v962 = v265;
            qsort(__base, 0xFFuLL, 4uLL, (int (__cdecl *)(const void *, const void *))qsort_comp);
            if (v925.i16[6])
            {
              v266 = 0;
              v267 = 0;
              v268 = 0;
              v269 = v925.i16[6] * (uint64_t)v925.i16[6];
              do
              {
                v270 = *(int *)&__base[v266 + 4]
                     * (uint64_t)*(int *)&__base[v266 + 4]
                     * *(int *)&__base[v266 + 4]
                     / (v269 + *(int *)&__base[v266 + 4] * (uint64_t)*(int *)&__base[v266 + 4]);
                v271 = *(int *)&__base[v266 + 8]
                     * (uint64_t)*(int *)&__base[v266 + 8]
                     * *(int *)&__base[v266 + 8]
                     / (v269 + *(int *)&__base[v266 + 8] * (uint64_t)*(int *)&__base[v266 + 8]);
                v267 += v270 * v270;
                v268 += v271 * v271;
                v266 += 8;
              }
              while (v266 != 1016);
              v272 = v962 * (uint64_t)v962 * v962 / (v269 + v962 * (uint64_t)v962);
              v225 = v268 + v267 + v272 * v272;
            }
            else
            {
              v104 = v909;
              v105 = v907;
              v106 = v905;
              v107 = v903;
              v108 = v901;
              v109 = v899;
              v110 = *(int32x4_t *)&__base[52];
              v111 = vmull_s32(*(int32x2_t *)v110.i8, *(int32x2_t *)v110.i8);
              v112 = *(int32x4_t *)&__base[20];
              v113 = vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v110, v110), v112, v112), v109, v109), v108, v108), v107, v107), v106, v106), v105, v105), v104, v104);
              v114 = vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(v111, *(int32x2_t *)v112.i8, *(int32x2_t *)v112.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v109.i8), *(int32x2_t *)v108.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v106.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v104.i8, *(int32x2_t *)v104.i8);
              v116 = v910;
              v115 = v911;
              v117 = vmlal_s32(v114, *(int32x2_t *)v115.i8, *(int32x2_t *)v115.i8);
              v118 = vmlal_high_s32(v113, v115, v115);
              v120 = v912;
              v119 = v913;
              v121 = vmlal_high_s32(v118, v119, v119);
              v122 = vmlal_s32(v117, *(int32x2_t *)v119.i8, *(int32x2_t *)v119.i8);
              v124 = v914;
              v123 = v915;
              v125 = vmlal_s32(v122, *(int32x2_t *)v123.i8, *(int32x2_t *)v123.i8);
              v126 = vmlal_high_s32(v121, v123, v123);
              v128 = v916;
              v127 = v917;
              v129 = vmlal_high_s32(v126, v127, v127);
              v130 = vmlal_s32(v125, *(int32x2_t *)v127.i8, *(int32x2_t *)v127.i8);
              v132 = v918;
              v131 = v919;
              v133 = vmlal_s32(v130, *(int32x2_t *)v131.i8, *(int32x2_t *)v131.i8);
              v134 = vmlal_high_s32(v129, v131, v131);
              v136 = v920;
              v135 = v921;
              v137 = vmlal_high_s32(v134, v135, v135);
              v138 = vmlal_s32(v133, *(int32x2_t *)v135.i8, *(int32x2_t *)v135.i8);
              v140 = v922;
              v139 = v923;
              v141 = vmlal_s32(v138, *(int32x2_t *)v139.i8, *(int32x2_t *)v139.i8);
              v142 = vmlal_high_s32(v137, v139, v139);
              v144 = v924;
              v143 = v925;
              v145 = vmlal_high_s32(v142, v143, v143);
              v146 = vmlal_s32(v141, *(int32x2_t *)v143.i8, *(int32x2_t *)v143.i8);
              v148 = v926;
              v147 = v927;
              v149 = vmlal_s32(v146, *(int32x2_t *)v147.i8, *(int32x2_t *)v147.i8);
              v150 = vmlal_high_s32(v145, v147, v147);
              v152 = v928;
              v151 = v929;
              v153 = vmlal_high_s32(v150, v151, v151);
              v154 = vmlal_s32(v149, *(int32x2_t *)v151.i8, *(int32x2_t *)v151.i8);
              v156 = v930;
              v155 = v931;
              v157 = vmlal_s32(v154, *(int32x2_t *)v155.i8, *(int32x2_t *)v155.i8);
              v158 = vmlal_high_s32(v153, v155, v155);
              v160 = v932;
              v159 = v933;
              v161 = vmlal_high_s32(v158, v159, v159);
              v162 = vmlal_s32(v157, *(int32x2_t *)v159.i8, *(int32x2_t *)v159.i8);
              v164 = v934;
              v163 = v935;
              v165 = vmlal_s32(v162, *(int32x2_t *)v163.i8, *(int32x2_t *)v163.i8);
              v166 = vmlal_high_s32(v161, v163, v163);
              v168 = v936;
              v167 = v937;
              v169 = vmlal_high_s32(v166, v167, v167);
              v170 = vmlal_s32(v165, *(int32x2_t *)v167.i8, *(int32x2_t *)v167.i8);
              v172 = v938;
              v171 = v939;
              v173 = vmlal_s32(v170, *(int32x2_t *)v171.i8, *(int32x2_t *)v171.i8);
              v174 = vmlal_high_s32(v169, v171, v171);
              v176 = v940;
              v175 = v941;
              v177 = vmlal_high_s32(v174, v175, v175);
              v178 = vmlal_s32(v173, *(int32x2_t *)v175.i8, *(int32x2_t *)v175.i8);
              v180 = v942;
              v179 = v943;
              v181 = vmlal_s32(v178, *(int32x2_t *)v179.i8, *(int32x2_t *)v179.i8);
              v182 = vmlal_high_s32(v177, v179, v179);
              v184 = v944;
              v183 = v945;
              v185 = vmlal_high_s32(v182, v183, v183);
              v186 = vmlal_s32(v181, *(int32x2_t *)v183.i8, *(int32x2_t *)v183.i8);
              v188 = v946;
              v187 = v947;
              v189 = vmlal_s32(v186, *(int32x2_t *)v187.i8, *(int32x2_t *)v187.i8);
              v190 = vmlal_high_s32(v185, v187, v187);
              v192 = v948;
              v191 = v949;
              v193 = vmlal_high_s32(v190, v191, v191);
              v194 = vmlal_s32(v189, *(int32x2_t *)v191.i8, *(int32x2_t *)v191.i8);
              v13 = v950;
              v195 = v951;
              v196 = vmlal_s32(v194, *(int32x2_t *)v195.i8, *(int32x2_t *)v195.i8);
              v197 = vmlal_high_s32(v193, v195, v195);
              v12 = v952;
              v198 = v953;
              v199 = vmlal_high_s32(v197, v198, v198);
              v200 = vmlal_s32(v196, *(int32x2_t *)v198.i8, *(int32x2_t *)v198.i8);
              v11 = v954;
              v201 = v955;
              v202 = vmlal_s32(v200, *(int32x2_t *)v201.i8, *(int32x2_t *)v201.i8);
              v203 = vmlal_high_s32(v199, v201, v201);
              v204 = *(int32x4_t *)&__base[36];
              v205 = vmull_s32(*(int32x2_t *)v204.i8, *(int32x2_t *)v204.i8);
              v206 = *(int32x4_t *)&__base[4];
              v207 = vmlal_high_s32(vmull_high_s32(v204, v204), v206, v206);
              v208 = vmlal_s32(v205, *(int32x2_t *)v206.i8, *(int32x2_t *)v206.i8);
              v209 = *(int32x4_t *)&__base[68];
              v210 = vmlal_s32(v208, *(int32x2_t *)v209.i8, *(int32x2_t *)v209.i8);
              v211 = vmlal_high_s32(v207, v209, v209);
              v212 = v900;
              v213 = vmlal_high_s32(v211, v212, v212);
              v214 = vmlal_s32(v210, *(int32x2_t *)v212.i8, *(int32x2_t *)v212.i8);
              v215 = v902;
              v216 = vmlal_s32(v214, *(int32x2_t *)v215.i8, *(int32x2_t *)v215.i8);
              v217 = vmlal_high_s32(v213, v215, v215);
              v218 = v904;
              v219 = vmlal_high_s32(v217, v218, v218);
              v220 = vmlal_s32(v216, *(int32x2_t *)v218.i8, *(int32x2_t *)v218.i8);
              v221 = v906;
              v222 = vmlal_s32(v220, *(int32x2_t *)v221.i8, *(int32x2_t *)v221.i8);
              v223 = vmlal_high_s32(v219, v221, v221);
              v224 = v908;
              v10 = (float64x2_t)vaddq_s64(v203, vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(
                                                                       vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(vmlal_high_s32(v223, v224, v224), v116, v116), v120, v120), v124, v124), v128, v128), v132, v132), v136, v136), v140, v140),
                                                                   v144,
                                                                   v144),
                                                                 v148,
                                                                 v148),
                                                               v152,
                                                               v152),
                                                             v156,
                                                             v156),
                                                           v160,
                                                           v160),
                                                         v164,
                                                         v164),
                                                       v168,
                                                       v168),
                                                     v172,
                                                     v172),
                                                   v176,
                                                   v176),
                                                 v180,
                                                 v180),
                                               v184,
                                               v184),
                                             v188,
                                             v188),
                                           v192,
                                           v192),
                                         v13,
                                         v13),
                                       v12,
                                       v12),
                                     v11,
                                     v11));
              v225 = vaddvq_s64(vaddq_s64(vaddq_s64(v202, vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(
                                                           vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(vmlal_s32(v222, *(int32x2_t *)v224.i8, *(int32x2_t *)v224.i8), *(int32x2_t *)v116.i8, *(int32x2_t *)v116.i8), *(int32x2_t *)v120.i8, *(int32x2_t *)v120.i8), *(int32x2_t *)v124.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v128.i8, *(int32x2_t *)v128.i8), *(int32x2_t *)v132.i8,
                                                                 *(int32x2_t *)v132.i8),
                                                               *(int32x2_t *)v136.i8,
                                                               *(int32x2_t *)v136.i8),
                                                             *(int32x2_t *)v140.i8,
                                                             *(int32x2_t *)v140.i8),
                                                           *(int32x2_t *)v144.i8,
                                                           *(int32x2_t *)v144.i8),
                                                         *(int32x2_t *)v148.i8,
                                                         *(int32x2_t *)v148.i8),
                                                       *(int32x2_t *)v152.i8,
                                                       *(int32x2_t *)v152.i8),
                                                     *(int32x2_t *)v156.i8,
                                                     *(int32x2_t *)v156.i8),
                                                   *(int32x2_t *)v160.i8,
                                                   *(int32x2_t *)v160.i8),
                                                 *(int32x2_t *)v164.i8,
                                                 *(int32x2_t *)v164.i8),
                                               *(int32x2_t *)v168.i8,
                                               *(int32x2_t *)v168.i8),
                                             *(int32x2_t *)v172.i8,
                                             *(int32x2_t *)v172.i8),
                                           *(int32x2_t *)v176.i8,
                                           *(int32x2_t *)v176.i8),
                                         *(int32x2_t *)v180.i8,
                                         *(int32x2_t *)v180.i8),
                                       *(int32x2_t *)v184.i8,
                                       *(int32x2_t *)v184.i8),
                                     *(int32x2_t *)v188.i8,
                                     *(int32x2_t *)v188.i8),
                                   *(int32x2_t *)v192.i8,
                                   *(int32x2_t *)v192.i8),
                                 *(int32x2_t *)v13.i8,
                                 *(int32x2_t *)v13.i8),
                               *(int32x2_t *)v12.i8,
                               *(int32x2_t *)v12.i8),
                             *(int32x2_t *)v11.i8,
                             *(int32x2_t *)v11.i8)),
                         (int64x2_t)v10))
                   + v956 * (uint64_t)v956
                   + v957 * (uint64_t)v957
                   + v958 * (uint64_t)v958
                   + v959 * (uint64_t)v959
                   + v960 * (uint64_t)v960
                   + v961 * (uint64_t)v961
                   + v962 * (uint64_t)v962;
            }
            v226 = v225 >> 8;
            v93 = *(int *)(v896 + 548);
            *(_QWORD *)(*(_QWORD *)(v884 + 4136) + 8 * ((int)v103 + (int)v93 * (int)v101)) = v226;
            v100 = *(_QWORD *)(v884 + 4128) + v226;
            *(_QWORD *)(v884 + 4128) = v100;
            ++v102;
            ++v103;
          }
          while (v103 < v93);
          v92 = *(_DWORD *)(v896 + 540);
          v14 = v893;
        }
        ++v101;
      }
      while (v101 < v92);
      v87 = v862;
      if (v102)
        v100 /= v102;
      v88 = v863;
      goto LABEL_143;
    }
LABEL_139:
    v100 = 0;
LABEL_143:
    if (v100 <= 1)
      v273 = 1;
    else
      v273 = v100;
    *(_QWORD *)(v884 + 4128) = v273;
  }
  v894 = (int *)(v87 + 747512);
  *(_OWORD *)(v857 + 12848) = *(_OWORD *)(v857 + 12624);
  v274 = (int *)(v87 + 746980);
  *(_OWORD *)(v857 + 12944) = *(_OWORD *)(v857 + 12720);
  *(_OWORD *)(v857 + 12960) = *(_OWORD *)(v857 + 12736);
  *(_OWORD *)(v857 + 12864) = *(_OWORD *)(v857 + 12640);
  *(_OWORD *)(v857 + 12880) = *(_OWORD *)(v857 + 12656);
  *(_OWORD *)(v857 + 12976) = *(_OWORD *)(v857 + 12752);
  *(_OWORD *)(v857 + 12992) = *(_OWORD *)(v857 + 12768);
  *(_OWORD *)(v857 + 12896) = *(_OWORD *)(v857 + 12672);
  *(_OWORD *)(v857 + 13008) = *(_OWORD *)(v857 + 12784);
  *(_OWORD *)(v857 + 13024) = *(_OWORD *)(v857 + 12800);
  *(_OWORD *)(v857 + 12912) = *(_OWORD *)(v857 + 12688);
  *(_OWORD *)(v857 + 12928) = *(_OWORD *)(v857 + 12704);
  *(_OWORD *)(v857 + 13040) = *(_OWORD *)(v857 + 12816);
  v275 = *(_OWORD *)(v857 + 12832);
  *(_OWORD *)(v857 + 13056) = v275;
  v276 = v859;
  if (*(int *)(v884 + 4032) >= 1)
  {
    v277 = 0;
    v278 = 1576;
    do
    {
      memcpy((void *)(*(_QWORD *)(v884 + 4024) + v278), (const void *)(*(_QWORD *)(v884 + 4024) + v278 - 1560), 0x618uLL);
      ++v277;
      v278 += 3720;
    }
    while (v277 < *(int *)(v884 + 4032));
  }
  v889 = v87 + 834900;
  v890 = v87 + 834464;
  v892 = v87 + 835376;
  v279 = v87 + 163448;
  v887 = v87 + 842128;
  v888 = (_DWORD *)(v862 + 850616);
  v280 = v896;
  if (*(_DWORD *)(v862 + 850616) && (*(_BYTE *)(v862 + 850632) & 4) != 0 && *(_QWORD *)(v861 + 16))
  {
    v281 = *v860;
    v282 = *(_DWORD *)(v87 + 4 * v281 + 743192);
    v283 = *(int *)(v884 + 4052);
    v284 = *(_DWORD *)(v87 + 172048 + 4 * v283);
    v285 = *(int *)(v884 + 4048);
    v286 = *(_DWORD *)(v87 + 172048 + 4 * v285);
    v287 = *(int *)(v884 + 4056);
    v288 = *(_DWORD *)(v87 + 172048 + 4 * v287);
    if (v284 == v286)
      v289 = 5;
    else
      v289 = 7;
    if (v859[22] == 0x7FFFFFFF && *(_DWORD *)(v87 + 747524) == 1 && *(_DWORD *)(v87 + 747520) == 1)
      v289 = 5;
    if (v288 == v286 || v284 == v288)
      v289 &= 3u;
    v291 = *(_DWORD *)(v896 + 176);
    if (v291 == -1)
      v292 = 0;
    else
      v292 = *(_QWORD *)(v14 + 13520) + 224 * v291 + 24;
    v293 = 0;
    v294 = *((_DWORD *)v860 + 254) == 3;
    LODWORD(v964) = -1;
    if ((_DWORD)v285 != -1 && v286 != -1)
      v293 = *(_QWORD *)(v14 + 13520) + 224 * v286 + 24;
    v295 = 0;
    *(_QWORD *)__base = v293;
    if ((_DWORD)v283 != -1 && v284 != -1)
      v295 = *(_QWORD *)(v14 + 13520) + 224 * v284 + 24;
    v296 = 0;
    *(_QWORD *)&__base[8] = v295;
    if ((_DWORD)v287 != -1 && v288 != -1)
      v296 = *(_QWORD *)(v14 + 13520) + 224 * v288 + 24;
    *(_QWORD *)&__base[16] = v296;
    frame_rdmult = vp9_extrc_get_frame_rdmult((uint64_t)v888, *(_DWORD *)(v292 + 28), *(_DWORD *)(v14 + 13424), v281, v282, *(_DWORD *)(v87 + 747188), v294, __base, v289, (uint64_t)&v964);
    if (frame_rdmult)
      vpx_internal_error((uint64_t)v858, frame_rdmult, "vp9_extrc_get_frame_rdmult() failed");
    *(_DWORD *)(v862 + 850620) = v964;
  }
  if (*(_DWORD *)(v864 + 52))
    goto LABEL_181;
  *(_DWORD *)__base = 0;
  LODWORD(v964) = 0;
  v963[0].i32[0] = 0;
  v311 = *(_DWORD *)(v87 + 747508);
  if (v311 && !*(_DWORD *)(v14 + 13652))
  {
    v340 = *v894;
    v312 = *(unsigned __int8 *)(v87 + 747512 + v340 + 87192);
    v313 = *(_DWORD *)(v87 + 747512 + 4 * v340 + 87200);
    if (*(_DWORD *)(v896 + 520))
      goto LABEL_193;
  }
  else
  {
    v312 = 0;
    v313 = 0;
    if (*(_DWORD *)(v896 + 520))
    {
LABEL_193:
      *v859 = 0;
      if (*(_DWORD *)(v87 + 747480) && *(_DWORD *)(v14 + 13652) != 1 && *(_DWORD *)(v896 + 512))
        *(_QWORD *)(v884 + 328) = *(_QWORD *)(v14 + 14016);
      goto LABEL_181;
    }
  }
  v883 = v313;
  *(_QWORD *)(v87 + 8 * *v894 + 835384) = *(_QWORD *)v892;
  *(_DWORD *)(v862 + 850392) = *(_DWORD *)(v14 + 13648) == 2;
  v341 = *(_DWORD *)(v14 + 13652);
  v342 = (uint64_t)v858;
  if (!v341)
  {
    if (*(_DWORD *)(v14 + 13668) == 1 && *(_DWORD *)(v14 + 13732) == 2 && *(_DWORD *)(v87 + 842088))
    {
      v343 = v312;
      if (!v311 || !*(_DWORD *)(v87 + 835436))
      {
        v344 = *(_DWORD *)(v87 + 842100);
        v345 = *(_DWORD *)(v87 + 842104);
        v346 = v344 * *(_DWORD *)(v14 + 13568) / v345;
        *(_DWORD *)(v14 + 13736) = v346;
        v347 = *(_DWORD *)(v14 + 13572) * v344 / v345;
        *(_DWORD *)(v14 + 13740) = v347;
        vp9_set_size_literal(v87, v346, v347);
      }
      v348 = *(_DWORD *)(v87 + 171988);
      v349 = *(_DWORD *)(v87 + 171992);
      if (v348 >= v349)
        v350 = *(_DWORD *)(v87 + 171992);
      else
        v350 = *(_DWORD *)(v87 + 171988);
      if (v350 <= 16)
        v351 = 16;
      else
        v351 = v350;
      v352 = -1;
      do
        ++v352;
      while (v351 << v352 < 1023);
      if (v352 >= 9)
        v352 = 9;
      *(_DWORD *)(v864 + 668) = v352;
      if (*(_DWORD *)(v864 + 8))
      {
        if (*(_DWORD *)(v896 + 508) && !*(_BYTE *)(v896 + 524))
        {
          if (*(_DWORD *)(v896 + 512))
          {
            if (v350 >= (2 * *(_DWORD *)(v864 + 664)))
              v350 = 2 * *(_DWORD *)(v864 + 664);
            if (v350 <= 16)
              v350 = 16;
            v353 = -1;
            do
              ++v353;
            while (v350 << v353 < 1023);
            v350 = 0;
            if (v353 >= 9)
              v353 = 9;
            *(_DWORD *)(v864 + 668) = v353;
          }
          else
          {
            v350 = 0;
          }
        }
        *(_DWORD *)(v864 + 664) = v350;
      }
      vp9_noise_estimate_init(v87 + 842128, v348, v349);
      v342 = (uint64_t)v858;
      v312 = v343;
      if (*(int *)(v14 + 13624) >= 1)
      {
        vp9_denoiser_free((uint64_t *)(v87 + 841880), v728);
        v729 = *(_DWORD *)(v14 + 13624);
        if (v729 >= 1 && !*(_DWORD *)(v87 + 842056))
        {
          v730 = vp9_denoiser_alloc(v858, v894, (unint64_t *)(v87 + 841880), *(_DWORD *)(v87 + 747508), v729, *(unsigned int *)(v87 + 171988), *(unsigned int *)(v87 + 171992), *(_DWORD *)(v87 + 172012), *(_DWORD *)(v87 + 172016), *(_DWORD *)(v87 + 172020), 160);
          if (v731)
            vpx_internal_error((uint64_t)v858, 2, "Failed to allocate denoiser", v730);
        }
        *(_DWORD *)(v884 + 4096) = 1;
        v342 = (uint64_t)v858;
        v312 = v343;
      }
    }
    v341 = *(_DWORD *)(v14 + 13652);
  }
  v886 = v312;
  if (v341 == 2 && !*(_DWORD *)(v87 + 747508))
  {
    vp9_set_target_rate(v87);
    v342 = (uint64_t)v858;
  }
  v732 = *(_DWORD *)(v896 + 176);
  v733 = v896;
  v734 = *(_QWORD *)(v14 + 13520);
  v735 = v734 + 224 * v732;
  v738 = *(_QWORD *)(v735 + 32);
  v737 = (unint64_t *)(v735 + 32);
  v736 = v738;
  if (v738)
  {
    if (*(_DWORD *)(v734 + 224 * v732 + 40) >= *(_DWORD *)(v896 + 544)
      && *(_DWORD *)(v734 + 224 * v732 + 44) >= *(_DWORD *)(v896 + 552))
    {
      v744 = (int *)v862;
      goto LABEL_498;
    }
    free(*(void **)(v736 - 8));
    v733 = v896;
    v342 = (uint64_t)v858;
  }
  v739 = *(_DWORD *)(v733 + 552) * *(_DWORD *)(v733 + 544);
  if ((v739 & 0x80000000) == 0
    && (v740 = 12 * v739, v741 = malloc_type_malloc(v740 + 23, 0x74AD08B5uLL), v342 = (uint64_t)v858, v741)
    && (v742 = ((unint64_t)v741 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v742 - 8) = v741, v742))
  {
    bzero((void *)(((unint64_t)v741 + 23) & 0xFFFFFFFFFFFFFFF0), v740);
    *v737 = v742;
  }
  else
  {
    *v737 = 0;
    vpx_internal_error(v342, 2, "Failed to allocate new_fb_ptr->mvs");
  }
  v743 = v734 + 224 * v732;
  *(_DWORD *)(v743 + 40) = *(_DWORD *)(v896 + 544);
  *(_DWORD *)(v743 + 44) = *(_DWORD *)(v896 + 552);
  v732 = *(_DWORD *)(v896 + 176);
  v734 = *(_QWORD *)(v14 + 13520);
  v744 = (int *)v862;
  v89 = v862 + 850377;
LABEL_498:
  if (vpx_realloc_frame_buffer(v734 + 224 * v732 + 88, *(_DWORD *)(v279 + 8540), *(_DWORD *)(v279 + 8544), *(_DWORD *)(v279 + 8564), *(_DWORD *)(v279 + 8568), *(_DWORD *)(v279 + 8572), 160, *(_DWORD *)(v14 + 13512), 0, 0, 0))vpx_internal_error((uint64_t)v858, 2, "Failed to allocate frame buffer");
  v745 = v744 + 43028;
  alloc_util_frame_buffers(v744);
  v754 = *(_DWORD *)(v884 + 16);
  if (*(_DWORD *)v864)
  {
    if (*(_DWORD *)v864 == 1)
      inited = vp9_init3smotion_compensation((uint64_t)(v744 + 208866), v754);
  }
  else
  {
    inited = vp9_init_dsmotion_compensation((uint64_t)(v744 + 208866), v754);
  }
  v755 = *(int *)(v884 + 4048);
  if ((_DWORD)v755 == -1)
  {
    *v745 = -1;
    goto LABEL_514;
  }
  v756 = v744[v755 + 43012];
  *v745 = v756;
  if (v756 == -1)
  {
LABEL_514:
    v762 = 0;
    *((_QWORD *)v745 + 1) = 0;
    goto LABEL_515;
  }
  v757 = *(_QWORD *)(v14 + 13520);
  v758 = (int *)(v757 + 224 * v756);
  v759 = v758 + 22;
  *((_QWORD *)v745 + 1) = v758 + 22;
  vp9_setup_scale_factors_for_frame((uint64_t)(v745 + 4), v758[24], v758[25], *(_DWORD *)(v279 + 8540), *(_DWORD *)(v279 + 8544), (v758[60] >> 3) & 1);
  v760 = v745[4];
  if (v760 == -1)
  {
    v762 = 0;
    v763 = *(int *)(v884 + 4052);
    v764 = v862;
    if ((_DWORD)v763 != -1)
      goto LABEL_516;
LABEL_512:
    v745[44] = v763;
LABEL_522:
    *((_QWORD *)v745 + 23) = 0;
    goto LABEL_523;
  }
  v761 = v745[5];
  v762 = v761 != -1;
  if (v761 == -1)
  {
LABEL_515:
    v763 = *(int *)(v884 + 4052);
    v764 = v862;
    if ((_DWORD)v763 != -1)
      goto LABEL_516;
    goto LABEL_512;
  }
  if (v760 != 0x4000 || v761 != 0x4000)
    extend_frame(v759, *(_DWORD *)(v757 + 224 * v756 + 192));
  v762 = 1;
  v763 = *(int *)(v884 + 4052);
  v764 = v862;
  if ((_DWORD)v763 == -1)
    goto LABEL_512;
LABEL_516:
  v765 = *(_DWORD *)(v764 + 4 * v763 + 172048);
  v745[44] = v765;
  if (v765 == -1)
    goto LABEL_522;
  v766 = *(_QWORD *)(v14 + 13520);
  v767 = (int *)(v766 + 224 * v765);
  v768 = v767 + 22;
  *((_QWORD *)v745 + 23) = v767 + 22;
  vp9_setup_scale_factors_for_frame((uint64_t)(v745 + 48), v767[24], v767[25], *(_DWORD *)(v279 + 8540), *(_DWORD *)(v279 + 8544), (v767[60] >> 3) & 1);
  v769 = v745[48];
  if (v769 != -1)
  {
    v770 = v745[49];
    if (v770 != -1)
    {
      v762 = 1;
      if (v769 != 0x4000 || v770 != 0x4000)
        extend_frame(v768, *(_DWORD *)(v766 + 224 * v765 + 192));
    }
  }
LABEL_523:
  v771 = *(int *)(v884 + 4056);
  if ((_DWORD)v771 == -1)
  {
    v773 = v896;
    *(_DWORD *)v896 = -1;
    goto LABEL_532;
  }
  v772 = *(_DWORD *)(v862 + 4 * v771 + 172048);
  v773 = v896;
  *(_DWORD *)v896 = v772;
  if (v772 == -1)
  {
LABEL_532:
    *(_QWORD *)(v773 + 8) = 0;
LABEL_533:
    v87 = v862;
    if (!*(_DWORD *)(v773 + 508))
      goto LABEL_539;
    goto LABEL_534;
  }
  v774 = *(_QWORD *)(v14 + 13520);
  v775 = (int *)(v774 + 224 * v772);
  v776 = v775 + 22;
  *(_QWORD *)(v896 + 8) = v775 + 22;
  vp9_setup_scale_factors_for_frame(v896 + 16, v775[24], v775[25], *(_DWORD *)(v279 + 8540), *(_DWORD *)(v279 + 8544), (v775[60] >> 3) & 1);
  v777 = *(_DWORD *)(v896 + 16);
  if (v777 == -1)
    goto LABEL_533;
  v778 = *(_DWORD *)(v896 + 20);
  if (v778 == -1 || (v762 = 1, v777 == 0x4000) && v778 == 0x4000)
  {
    v87 = v862;
    if (!*(_DWORD *)(v896 + 508))
      goto LABEL_539;
  }
  else
  {
    extend_frame(v776, *(_DWORD *)(v774 + 224 * v772 + 192));
    v87 = v862;
    if (!*(_DWORD *)(v896 + 508))
      goto LABEL_539;
  }
LABEL_534:
  if (*(_BYTE *)(v896 + 524))
    v779 = 1;
  else
    v779 = v762;
  if ((v779 & 1) == 0)
    vpx_internal_error((uint64_t)v858, 1, "Can't find at least one reference frame with valid size");
LABEL_539:
  v280 = v896;
  *(_QWORD *)v895 = v745;
  *(_QWORD *)(v895 + 8) = v745;
  v780 = *(_DWORD *)(v14 + 13652);
  v781 = *(int **)(v14 + 14032);
  v782 = *v781;
  v90 = v884;
  if (v274[132] && !v780)
  {
    v783 = *(_DWORD *)(v279 + 8540);
    if (v782 == 4 * v783)
    {
      v784 = *(_DWORD *)(v279 + 8544);
      if (v781[1] == 4 * v784 && *(_DWORD *)(v87 + 751736) == 2 * v783 && *(_DWORD *)(v87 + 751740) == 2 * v784)
      {
        v781 = svc_twostage_scale(v858, v781, v87 + 190464, v87 + 751736, v886, v883, *(unsigned __int8 *)(v890 + 241), *(unsigned int *)(v890 + 252), *(int8x8_t *)&inited, *(int8x8_t *)&v747);
        *(_QWORD *)(v14 + 14016) = v781;
        *(_DWORD *)(v87 + 751896) = 1;
        v276 = v859;
        goto LABEL_559;
      }
    }
    if (v782 == 2 * v783 && v781[1] == 2 * *(_DWORD *)(v279 + 8544) && *(_DWORD *)(v87 + 751896))
    {
      v781 = (int *)(v87 + 751736);
      *(_QWORD *)(v14 + 14016) = v87 + 751736;
      *(_DWORD *)(v87 + 751896) = 0;
      v276 = v859;
      goto LABEL_559;
    }
  }
  if (v782 == 8 * *(_DWORD *)(v896 + 552) && v781[1] == 8 * *(_DWORD *)(v896 + 544))
  {
    v276 = v859;
  }
  else
  {
    v276 = v859;
    if (v780 || v782 > 2 * *(_DWORD *)v884 || v781[1] > 2 * *(_DWORD *)(v884 + 4))
    {
      vp9_scale_and_extend_frame_nonnormative(*(_QWORD *)(v14 + 14032), v884, *(_DWORD *)(v14 + 13432));
    }
    else
    {
      v818 = *(_DWORD *)(v14 + 13432);
      v819 = *(_QWORD *)(v14 + 14032);
      if (v818 == 8)
        vp9_scale_and_extend_frame_neon(v819, v884, v886, v883, *(int8x8_t *)&inited, *(int8x8_t *)&v747);
      else
        scale_and_extend_frame(v819, v884, v818, v886, v883);
    }
    v781 = (int *)v884;
  }
  *(_QWORD *)(v14 + 14016) = v781;
LABEL_559:
  if (v274[125] && *(_DWORD *)(v14 + 13652) != 1 && *(_DWORD *)(v896 + 512))
    *(_QWORD *)(v884 + 328) = v781;
  v88 = v863;
  if (v274[132] && (*v894 < v894[2] - 1 || v894[1] < v894[3] - 1 || *(int *)(v890 + 224) < 1)
    || *(_DWORD *)(v892 + 6712)
    || *(_DWORD *)(v892 + 6716)
    || *(_DWORD *)(v892 + 6720))
  {
    *(_DWORD *)(v89 + 15) = 0;
    v785 = *(void **)(v89 + 7);
    if (v785)
      bzero(v785, (*(int *)(v896 + 556) >> 3) + (*(int *)(v896 + 556) >> 3) * (*(int *)(v896 + 544) >> 3));
  }
  v786 = *(_DWORD **)(v884 + 160);
  if (v786)
  {
    if ((v787 = *(_DWORD *)(v14 + 13652), *(_DWORD *)(v14 + 13956) == 1)
      || !v787 && !*(_DWORD *)(v14 + 13668) && *(_DWORD *)(v14 + 13648) == 2 && *(int *)(v14 + 13632) > 4
      || *(_DWORD *)(v864 + 160) == 4
      || *(_DWORD *)v887 && !*(_DWORD *)(v14 + 13624)
      || *(_DWORD *)(v89 + 15))
    {
      if (*v786 == 8 * *(_DWORD *)(v896 + 552) && v786[1] == 8 * *(_DWORD *)(v896 + 544))
      {
        v788 = *(_DWORD **)(v884 + 160);
      }
      else
      {
        v788 = (_DWORD *)(v884 + 168);
        if (v787 || *v786 > 2 * *v788 || v786[1] > 2 * *(_DWORD *)(v884 + 172))
        {
          vp9_scale_and_extend_frame_nonnormative((uint64_t)v786, v884 + 168, *(_DWORD *)(v14 + 13432));
        }
        else
        {
          v820 = *(_DWORD *)(v14 + 13432);
          v821 = v884 + 168;
          if (v820 == 8)
            vp9_scale_and_extend_frame_neon((uint64_t)v786, v821, 0, 0, *(int8x8_t *)&inited, *(int8x8_t *)&v747);
          else
            scale_and_extend_frame((uint64_t)v786, v821, v820, 0, 0);
        }
      }
      *(_QWORD *)(v14 + 14024) = v788;
      v88 = v863;
      v276 = v859;
    }
  }
  v789 = *(_DWORD **)(v14 + 14024);
  if (!v789 || (v790 = *(_DWORD **)(v14 + 14016), *v789 != *v790) || v789[1] != v790[1])
    *(_DWORD *)(v89 + 15) = 0;
  if (!*(_DWORD *)(v896 + 508) || *(_BYTE *)(v896 + 524) || *(_DWORD *)(v892 + 6712))
    bzero(*(void **)(v887 + 40), *(int *)(v896 + 552) * (uint64_t)*(int *)(v896 + 544));
  if (*(int *)(v14 + 13624) >= 1)
  {
    if (v274[132])
    {
      v791 = *v894;
      if (*v894 >= *(_DWORD *)(v890 + 424)
        && !*(_DWORD *)(v87 + 6880 * (v894[1] + v894[3] * (uint64_t)v791) + 758668)
        && !*(_DWORD *)(v892 + 6696))
      {
        *(_DWORD *)(v892 + 6684) = 1;
        if (*(_DWORD *)(v890 + 204))
        {
          *(_DWORD *)(v884 + 4056) = *(_DWORD *)(v87 + 8 * (v791 - (v894[2] == 3)) + 834672);
          *(_DWORD *)(v884 + 4100) = 1;
        }
      }
    }
  }
  v276[151] = 0;
  v792 = 0.0;
  *(_QWORD *)(v276 + 153) = 0;
  if (*(_DWORD *)(v896 + 512)
    && *(_DWORD *)(v14 + 13648) == 2
    && !*(_DWORD *)(v861 + 128)
    && (!*(_DWORD *)(v14 + 13668) || *(_DWORD *)(v14 + 13956) == 1 || (*(_DWORD *)(v14 + 13632) - 5) <= 2))
  {
    vp9_scene_detection_onepass(v87);
  }
  if (*v894 == *(_DWORD *)(v889 + 424))
  {
    v793 = v276[151];
    v794 = v276[148];
    *(_DWORD *)(v889 + 252) = v793;
    *(_DWORD *)(v889 + 256) = v794;
    if (v793)
    {
      if (v894[1] >= 1 && *(_DWORD *)v890 == 1)
      {
        vp9_svc_reset_temporal_layers(v87, *(_DWORD *)(v896 + 508) == 0);
        v276[151] = v793;
      }
    }
  }
  vp9_update_noise_estimate((int *)v87, v792, v747, v748, v749, v750, v751, v752, v753);
  if (v276[151] || (v795 = *(_DWORD *)(v889 + 252)) != 0)
  {
    v796 = v894;
    if (v276[163] && *(_DWORD *)v889)
    {
      LOBYTE(v795) = 0;
      if (*(_DWORD *)(v14 + 13652))
        goto LABEL_635;
    }
    else
    {
      LOBYTE(v795) = 1;
      if (*(_DWORD *)(v14 + 13652))
        goto LABEL_635;
    }
  }
  else
  {
    v796 = v894;
    if (*(_DWORD *)(v14 + 13652))
      goto LABEL_635;
  }
  if (*(_DWORD *)(v14 + 13668) == 1)
  {
    if (!*(_DWORD *)(v896 + 508))
      goto LABEL_642;
    if (*(_BYTE *)(v896 + 524))
      LOBYTE(v795) = 1;
    if ((v795 & 1) == 0
      && !*(_BYTE *)(v889 + 390)
      && (!v274[132] || !*(_DWORD *)(v87 + 6880 * v796[1] + 758668))
      && vp9_rc_drop_frame(v87))
    {
      return;
    }
  }
LABEL_635:
  if (*(_DWORD *)(v896 + 508)
    && !*(_BYTE *)(v896 + 524)
    && (*(_DWORD *)(v892 + 56) && *(_DWORD *)(v14 + 13732) == 2
     || !v274[132]
     || *(_DWORD *)(v14 + 13652)
     || !*(_DWORD *)(v890 + 196)))
  {
    vp9_scale_references((int *)v87);
  }
LABEL_642:
  vp9_set_speed_features_framesize_independent(v87, *(_DWORD *)(v14 + 13632));
  v797 = *(_DWORD *)(v14 + 13648) == 1;
  if (*(_DWORD *)(v14 + 13648) == 1)
    v798 = -500;
  else
    v798 = 0;
  if (*(_DWORD *)(v864 + 68))
    v799 = 300;
  else
    v799 = 0;
  *(_DWORD *)(v857 + 4) = v799;
  *(_DWORD *)(v857 + 8) = v799;
  *(_DWORD *)v857 = v799;
  *(int32x4_t *)(v857 + 12) = vdupq_n_s32(v798 + 1000);
  *(_DWORD *)(v857 + 28) = v798 + 1000;
  *(_DWORD *)(v857 + 32) = v798 + 1000;
  *(_DWORD *)(v857 + 52) = v798 + 1000;
  *(_DWORD *)(v857 + 56) = v798 + 1000;
  *(_DWORD *)(v857 + 60) = v798 + 1000;
  *(_DWORD *)(v857 + 64) = v798 + 1500;
  v800 = v798 + 2000;
  *(_DWORD *)(v857 + 68) = v798 + 2000;
  *(_DWORD *)(v857 + 72) = v798 + 1500;
  *(_DWORD *)(v857 + 36) = v798 + 1000;
  *(_DWORD *)(v857 + 40) = v798 + 2000;
  *(_DWORD *)(v857 + 44) = v798 + 2000;
  *(_DWORD *)(v857 + 48) = v798 + 2000;
  v801 = v798 + 2500;
  *(_DWORD *)(v857 + 76) = v800;
  *(_DWORD *)(v857 + 80) = v801;
  *(_DWORD *)(v857 + 84) = v801;
  *(_DWORD *)(v857 + 88) = v800;
  *(_DWORD *)(v857 + 92) = v800;
  *(_DWORD *)(v857 + 112) = v801;
  *(_DWORD *)(v857 + 116) = v801;
  *(int32x4_t *)(v857 + 96) = vdupq_n_s32(v801);
  v802 = (char *)&vp9_set_rd_speed_thresholds_sub8x8_thresh_mult + 24 * v797;
  *(_OWORD *)(v87 + 199032) = *(_OWORD *)v802;
  *(_QWORD *)(v87 + 199048) = *((_QWORD *)v802 + 2);
  *(_BYTE *)(v896 + 788) = *(_BYTE *)(v864 + 488);
  vp9_set_speed_features_framesize_dependent(v87, *(_DWORD *)(v14 + 13632));
  v807 = vp9_rc_pick_q_and_bounds(v87, (int *)&v964, v963[0].i32, v803, v804, v805, v806);
  *(_DWORD *)__base = v807;
  if (*(_DWORD *)(v14 + 13668) == 1 && v276[161])
  {
    v807 = v276[69];
    *(_DWORD *)__base = v807;
    v276[161] = 0;
  }
  v808 = v864;
  if (v274[132])
    *(_DWORD *)(v87 + 4 * *v796 + 835268) = v807;
  if (*(_DWORD *)(v896 + 508) && !*(_BYTE *)(v896 + 524))
  {
    *(_DWORD *)(v896 + 528) = v807 < 200;
    v809 = v87 + 74944;
    v810 = v87 + 75000;
    if (v807 < 200)
    {
      v809 = v87 + 74960;
      v810 = v87 + 75016;
    }
    *(_QWORD *)(v895 + 352) = v809;
    *(_QWORD *)(v895 + 408) = v810;
  }
  v811 = *(_DWORD *)(v884 + 16);
  if (*(_DWORD *)v864)
  {
    if (*(_DWORD *)v864 != 1)
      goto LABEL_663;
    vp9_init3smotion_compensation(v87 + 835464, v811);
  }
  else
  {
    vp9_init_dsmotion_compensation(v87 + 835464, v811);
  }
  v808 = v864;
LABEL_663:
  if (*(_DWORD *)(v808 + 584))
  {
    alloc_copy_partition_data(v87);
    v808 = v864;
  }
  if (*(_DWORD *)(v808 + 616))
  {
    if (*v796 == v796[2] - 2 && !*(_QWORD *)(v890 + 272))
    {
      v812 = vpx_calloc(*(int *)(v896 + 544) * (uint64_t)*(int *)(v896 + 556), 1uLL);
      *(_QWORD *)(v890 + 272) = v812;
      if (!v812)
        vpx_internal_error((uint64_t)v858, 2, "Failed to allocate svc->prev_partition_svc");
    }
  }
  if (*(_DWORD *)(v14 + 13432) == 8
    && *(int *)(v14 + 13632) >= 5
    && !*(_DWORD *)(v14 + 13652)
    && *(_DWORD *)(v14 + 13668) == 1
    && *(_DWORD *)(v14 + 13956) != 1
    && *(_DWORD *)(v14 + 13724) == 3)
  {
    *(_DWORD *)(v892 + 6744) = 1;
  }
  v813 = v276[164];
  if (v813)
    v813 = *(_DWORD *)(v14 + 13668) == 1 && *(_DWORD *)(v896 + 508) != 0;
  v276[163] = v813;
  v814 = *(_DWORD *)__base;
  *(_DWORD *)(v896 + 564) = *(_DWORD *)__base;
  *(_QWORD *)(v896 + 568) = 0;
  *(_DWORD *)(v896 + 576) = 0;
  v815 = *(_DWORD *)(v14 + 13992);
  if (v815)
  {
    *(_DWORD *)(v896 + 576) = v815;
    *(_DWORD *)(v896 + 572) = v815;
    vp9_init_quantizer((_DWORD *)v87);
    v814 = *(_DWORD *)__base;
  }
  vp9_set_variance_partition_thresholds((int64x2_t *)v87, v814, 0);
  if (!*(_DWORD *)(v896 + 508) || *(_BYTE *)(v896 + 524) || *(_DWORD *)(v14 + 13496))
  {
    vp9_setup_past_independence((uint64_t)v858);
  }
  else if (!v274[132])
  {
    *(_DWORD *)(v14 + 192) = *(_DWORD *)(v884 + 4100);
  }
  if (!*(_DWORD *)(v89 + 55) || v274[132])
  {
LABEL_707:
    if (*(_DWORD *)(v896 + 508))
      goto LABEL_708;
LABEL_723:
    *(_QWORD *)(v884 + 4096) = 0x100000001;
    v822 = 0.0;
    *(_OWORD *)(v87 + 739176) = 0u;
    *(_OWORD *)(v87 + 739192) = 0u;
    *(_OWORD *)(v87 + 739208) = 0u;
    *(_OWORD *)(v87 + 739224) = 0u;
    *(_OWORD *)(v87 + 739240) = 0u;
    *(_OWORD *)(v87 + 739256) = 0u;
    *(_OWORD *)(v87 + 739272) = 0u;
    *(_OWORD *)(v87 + 739288) = 0u;
    v823 = v864;
    v824 = *(_QWORD *)(v864 + 688);
    if (*(_DWORD *)v897)
      goto LABEL_725;
    goto LABEL_724;
  }
  if (v276[34])
  {
    v817 = 0;
  }
  else if (*(_DWORD *)(v884 + 4096))
  {
    v817 = 1;
  }
  else
  {
    v817 = *(_DWORD *)(v884 + 4100) != 0;
  }
  if (!*(_DWORD *)(v896 + 508) || *(_BYTE *)(v896 + 524))
  {
LABEL_706:
    *(_DWORD *)(v14 + 192) = 0;
    goto LABEL_707;
  }
  if (v817)
  {
    v825 = *v860;
    if (*(_DWORD *)(v87 + 4 * v825 + 742184) == 3)
      goto LABEL_706;
    if (*(unsigned __int8 *)(v87 + v825 + 744452) > 3u)
      v826 = 2;
    else
      v826 = 1;
  }
  else
  {
    v826 = 3;
  }
  *(_DWORD *)(v14 + 192) = v826;
  if (!*(_DWORD *)(v896 + 508))
    goto LABEL_723;
LABEL_708:
  memcpy(*(void **)(v14 + 176), (const void *)(*(_QWORD *)(v14 + 184) + 2044 * *(unsigned int *)(v14 + 192)), 0x7FCuLL);
  v822 = 0.0;
  *(_OWORD *)(v87 + 739176) = 0u;
  v823 = v864;
  v824 = *(_QWORD *)(v864 + 688);
  if (*(_DWORD *)v897)
    goto LABEL_725;
LABEL_724:
  if (!*(_DWORD *)(v897 + 4))
    goto LABEL_748;
LABEL_725:
  v827 = (*(_DWORD *)(v896 + 552) * *(_DWORD *)(v896 + 544));
  if ((int)v827 < 1)
    goto LABEL_748;
  if (v827 >= 8)
  {
    v828 = v827 & 0x7FFFFFF8;
    v829 = (_BYTE *)(v824 + 3);
    v822 = 8.313805e-275;
    v830 = v827 & 0xFFFFFFF8;
    while (1)
    {
      v816 = (int16x4_t)vceq_s8(*(int8x8_t *)(v829 - 3), (int8x8_t)0x707070707070707);
      if ((v816.i8[0] & 1) != 0)
      {
        *(v829 - 3) = 0;
        if ((v816.i8[1] & 1) == 0)
          goto LABEL_732;
      }
      else if ((v816.i8[1] & 1) == 0)
      {
LABEL_732:
        if ((v816.i8[2] & 1) != 0)
          goto LABEL_733;
        goto LABEL_741;
      }
      *(v829 - 2) = 0;
      if ((v816.i8[2] & 1) != 0)
      {
LABEL_733:
        *(v829 - 1) = 0;
        if ((v816.i8[3] & 1) == 0)
          goto LABEL_734;
        goto LABEL_742;
      }
LABEL_741:
      if ((v816.i8[3] & 1) == 0)
      {
LABEL_734:
        if ((v816.i8[4] & 1) != 0)
          goto LABEL_735;
        goto LABEL_743;
      }
LABEL_742:
      *v829 = 0;
      if ((v816.i8[4] & 1) != 0)
      {
LABEL_735:
        v829[1] = 0;
        if ((v816.i8[5] & 1) == 0)
          goto LABEL_736;
        goto LABEL_744;
      }
LABEL_743:
      if ((v816.i8[5] & 1) == 0)
      {
LABEL_736:
        if ((v816.i8[6] & 1) != 0)
          goto LABEL_737;
        goto LABEL_745;
      }
LABEL_744:
      v829[2] = 0;
      if ((v816.i8[6] & 1) != 0)
      {
LABEL_737:
        v829[3] = 0;
        if ((v816.i8[7] & 1) != 0)
          goto LABEL_746;
        goto LABEL_729;
      }
LABEL_745:
      if ((v816.i8[7] & 1) != 0)
LABEL_746:
        v829[4] = 0;
LABEL_729:
      v829 += 8;
      v830 -= 8;
      if (!v830)
      {
        if (v828 == v827)
          goto LABEL_748;
        goto LABEL_767;
      }
    }
  }
  v828 = 0;
LABEL_767:
  v834 = v827 - v828;
  v835 = (_BYTE *)(v824 + v828);
  do
  {
    if (*v835 == 7)
      *v835 = 0;
    ++v835;
    --v834;
  }
  while (v834);
LABEL_748:
  if (v274[132])
  {
    if (*v796 >= 1)
    {
      vp9_svc_constrain_inter_layer_pred(v87);
      v823 = v864;
    }
    if (*(_DWORD *)v890 == 1 || *(_DWORD *)(v889 + 248) || *(_DWORD *)(v889 + 244) == 1)
    {
      if (*(_DWORD *)(v890 + 204))
      {
        if (!*(_DWORD *)(v87 + 6880 * v796[1] + 758668))
        {
          v831 = v87 + *(int *)(v884 + 4052);
          if (*v796 != *(unsigned __int8 *)(v831 + 835232) || *(_BYTE *)(v831 + 835240))
            *(_DWORD *)(v890 + 204) = 0;
        }
      }
    }
  }
  if (v276[162])
  {
    v276[151] = 1;
    *(_DWORD *)(v889 + 252) = 1;
    *(_DWORD *)(v823 + 588) = 0;
    v276[162] = 0;
  }
  if (*(_DWORD *)(v823 + 620) == 1
    && (v276[151] || v274[132] && *(_DWORD *)(v889 + 252))
    && vp9_encodedframe_overshoot(v87, -1, (int *)__base))
  {
    v832 = *(_DWORD *)__base;
    *(_DWORD *)(v896 + 564) = *(_DWORD *)__base;
    *(_QWORD *)(v896 + 568) = 0;
    *(_DWORD *)(v896 + 576) = 0;
    v833 = *(_DWORD *)(v14 + 13992);
    if (v833)
    {
      *(_DWORD *)(v896 + 576) = v833;
      *(_DWORD *)(v896 + 572) = v833;
      vp9_init_quantizer((_DWORD *)v87);
      v832 = *(_DWORD *)__base;
    }
    vp9_set_variance_partition_thresholds((int64x2_t *)v87, v832, 0);
  }
  if (*(_BYTE *)(v89 + 63) && *(_DWORD *)(v896 + 508) && !*(_BYTE *)(v896 + 524))
  {
    if (!*(_DWORD *)(v89 + 163))
      goto LABEL_808;
    if (*(_DWORD *)(v14 + 13724) == 3)
      vp9_cyclic_refresh_setup(v87, v822, v816);
    if ((int)v276[29] >= 21)
LABEL_808:
      apply_roi_map((char *)v87);
  }
  else if (*(_DWORD *)(v14 + 13724) == 3)
  {
    vp9_cyclic_refresh_setup(v87, v822, v816);
  }
  if (*(_DWORD *)(v896 + 508) && !*(_BYTE *)(v896 + 524))
  {
    v836 = (_DWORD *)(v897 + 4);
    if (!*(_DWORD *)(v897 + 4))
      goto LABEL_784;
    if (*(_DWORD *)v897)
    {
      v844 = *(_DWORD *)(v896 + 544);
      v845 = *(_DWORD *)(v896 + 552);
      if (v845 * v844 >= 1)
      {
        v846 = 0;
        v847 = *(_QWORD *)(v864 + 688);
        v848 = *(_QWORD *)(v897 + 8);
        do
        {
          if (!*(_BYTE *)(v847 + v846))
          {
            *(_BYTE *)(v847 + v846) = *(_BYTE *)(v848 + v846);
            v844 = *(_DWORD *)(v896 + 544);
            v845 = *(_DWORD *)(v896 + 552);
          }
          ++v846;
        }
        while (v846 < v844 * v845);
      }
      *(_WORD *)(v14 + 48) = 257;
      *(_BYTE *)(v14 + 50) = 1;
      *(_DWORD *)(v14 + 156) |= 0xAu;
      *(_WORD *)(v14 + 122) = -63;
      goto LABEL_783;
    }
  }
  else
  {
    *(_QWORD *)v897 = 0x100000000;
    v836 = (_DWORD *)(v897 + 4);
  }
  *(_DWORD *)(v14 + 156) &= 0xFFFFFFF5;
  if (*(_BYTE *)(v14 + 48))
    *(_WORD *)(v14 + 49) = 257;
LABEL_783:
  *v836 = 0;
LABEL_784:
  vp9_encode_frame(v87);
  v837 = v864;
  if (*(_DWORD *)(v864 + 620) != 2 || !v276[151] && (!v274[132] || !*(_DWORD *)(v889 + 252)))
    goto LABEL_833;
  save_coding_context(v87);
  vp9_pack_bitstream(v87, v856);
  restore_coding_context(v87);
  v838 = vp9_encodedframe_overshoot(v87, 8 * *(_DWORD *)v88, (int *)__base);
  v837 = v864;
  if (!v838)
    goto LABEL_833;
  v839 = *(_DWORD *)__base;
  *(_DWORD *)(v896 + 564) = *(_DWORD *)__base;
  *(_QWORD *)(v896 + 568) = 0;
  *(_DWORD *)(v896 + 576) = 0;
  v840 = *(_DWORD *)(v14 + 13992);
  if (v840)
  {
    *(_DWORD *)(v896 + 576) = v840;
    *(_DWORD *)(v896 + 572) = v840;
    vp9_init_quantizer((_DWORD *)v87);
    v839 = *(_DWORD *)__base;
  }
  vp9_set_variance_partition_thresholds((int64x2_t *)v87, v839, 0);
  v841 = *(_QWORD *)(v864 + 688);
  if (!*(_DWORD *)v897 && !*(_DWORD *)(v897 + 4))
    goto LABEL_830;
  v842 = (*(_DWORD *)(v896 + 552) * *(_DWORD *)(v896 + 544));
  if ((int)v842 < 1)
    goto LABEL_830;
  if (v842 < 8)
  {
    v843 = 0;
    goto LABEL_839;
  }
  v843 = v842 & 0x7FFFFFF8;
  v849 = (_BYTE *)(v841 + 3);
  v850 = v842 & 0xFFFFFFF8;
  do
  {
    v851 = vceq_s8(*(int8x8_t *)(v849 - 3), (int8x8_t)0x707070707070707);
    if ((v851.i8[0] & 1) != 0)
    {
      *(v849 - 3) = 0;
      if ((v851.i8[1] & 1) == 0)
        goto LABEL_814;
    }
    else if ((v851.i8[1] & 1) == 0)
    {
LABEL_814:
      if ((v851.i8[2] & 1) != 0)
        goto LABEL_815;
      goto LABEL_823;
    }
    *(v849 - 2) = 0;
    if ((v851.i8[2] & 1) != 0)
    {
LABEL_815:
      *(v849 - 1) = 0;
      if ((v851.i8[3] & 1) == 0)
        goto LABEL_816;
      goto LABEL_824;
    }
LABEL_823:
    if ((v851.i8[3] & 1) == 0)
    {
LABEL_816:
      if ((v851.i8[4] & 1) != 0)
        goto LABEL_817;
      goto LABEL_825;
    }
LABEL_824:
    *v849 = 0;
    if ((v851.i8[4] & 1) != 0)
    {
LABEL_817:
      v849[1] = 0;
      if ((v851.i8[5] & 1) == 0)
        goto LABEL_818;
      goto LABEL_826;
    }
LABEL_825:
    if ((v851.i8[5] & 1) == 0)
    {
LABEL_818:
      if ((v851.i8[6] & 1) == 0)
        goto LABEL_827;
      goto LABEL_819;
    }
LABEL_826:
    v849[2] = 0;
    if ((v851.i8[6] & 1) == 0)
    {
LABEL_827:
      if ((v851.i8[7] & 1) == 0)
        goto LABEL_811;
      goto LABEL_828;
    }
LABEL_819:
    v849[3] = 0;
    if ((v851.i8[7] & 1) == 0)
      goto LABEL_811;
LABEL_828:
    v849[4] = 0;
LABEL_811:
    v849 += 8;
    v850 -= 8;
  }
  while (v850);
  if (v843 == v842)
    goto LABEL_830;
LABEL_839:
  v853 = v842 - v843;
  v854 = (_BYTE *)(v841 + v843);
  do
  {
    if (*v854 == 7)
      *v854 = 0;
    ++v854;
    --v853;
  }
  while (v853);
LABEL_830:
  if (*(_DWORD *)(v14 + 13724) == 3)
  {
    v852 = *(_QWORD *)(v864 + 736);
    bzero(*(void **)(v864 + 688), *(int *)(v896 + 552) * (uint64_t)*(int *)(v896 + 544));
    memset(*(void **)(v852 + 40), 255, *(int *)(v896 + 552) * (uint64_t)*(int *)(v896 + 544));
    *(_DWORD *)(v852 + 8) = 0;
    *(_WORD *)(v14 + 48) = 0;
    *(_BYTE *)(v14 + 50) = 0;
  }
  apply_active_map(v87);
  vp9_encode_frame(v87);
  v837 = v864;
LABEL_833:
  if (*(_DWORD *)(v14 + 13724) == 3
    && *(_BYTE *)(v14 + 48)
    && *(_DWORD *)(v896 + 508)
    && !*(_BYTE *)(v896 + 524)
    && *(_DWORD *)(*(_QWORD *)(v837 + 736) + 132))
  {
    vp9_cyclic_refresh_postencode(v87);
  }
LABEL_181:
  if (*(_DWORD *)(v280 + 520))
  {
    v298 = *(_QWORD *)(v14 + 13520) + 24;
    v299 = *(_DWORD *)(v87 + 4 * *(int *)(v90 + 4056) + 172048);
    v300 = *(_DWORD *)(v280 + 176);
    if ((v300 & 0x80000000) == 0)
    {
      v301 = (int *)(v298 + 224 * v300);
      if (*v301 >= 1)
        --*v301;
    }
    *(_DWORD *)(v280 + 176) = v299;
    ++*(_DWORD *)(v298 + 224 * v299);
  }
  if (v276[31] && v276[28] == 1)
  {
    v302 = *(_QWORD *)(v14 + 14016);
    v303 = *(_QWORD *)(v302 + 56);
    v305 = *(_DWORD *)(v302 + 12);
    v304 = *(unsigned int *)(v302 + 16);
    v306 = *(_QWORD *)(v14 + 13520) + 224 * *(int *)(v280 + 176);
    v307 = *(_QWORD *)(v306 + 144);
    v308 = *(unsigned int *)(v306 + 104);
    v309 = *(_DWORD *)(v302 + 8);
    if (*(_DWORD *)(v279 + 8572))
      sse = highbd_get_sse(v303, v304, v307, v308, v309, v305, *(double *)&v275, (int64x2_t)v10, (int64x2_t)v11, (int64x2_t)v12, (uint64x2_t)v13);
    else
      sse = get_sse(v303, v304, v307, v308, v309, v305);
    *(_QWORD *)(v90 + 8416) = sse;
  }
  v314 = *(_DWORD *)(v280 + 508);
  if (!v314)
    *(_DWORD *)(v90 + 4092) = 1;
  v315 = *(_DWORD *)(v280 + 176);
  v316 = *(_QWORD *)(v14 + 13520);
  v317 = v316 + 224 * v315;
  *(_QWORD *)(v279 + 8576) = v317 + 88;
  *(_QWORD *)&v318 = *(_QWORD *)(v279 + 8532);
  *((_QWORD *)&v318 + 1) = *(_QWORD *)(v279 + 8548);
  *(_OWORD *)(v317 + 220) = v318;
  if (!v314 || *(_DWORD *)(v90 + 4092) || *(_DWORD *)(v90 + 4096))
  {
    v319 = 1;
    if (v274[132])
    {
LABEL_205:
      if (*(_DWORD *)v890 == 1)
        v319 = *(_DWORD *)(v890 + 228) == 0;
    }
  }
  else
  {
    v319 = *(_DWORD *)(v90 + 4100) != 0;
    if (v274[132])
      goto LABEL_205;
  }
  if (!*(_DWORD *)(v280 + 520))
  {
    v327 = *(_DWORD *)(v89 + 231);
    if (v327 == 2 || !v319 && v327 == 1)
    {
      *(_DWORD *)v14 = 0;
      v328 = *(_DWORD *)(v316 + 224 * v315 + 192);
      if (v328 >= 96)
        v329 = 96;
      else
        v329 = v328;
      extend_frame((int *)(v317 + 88), v329);
      v320 = v894;
      if (!v276[163])
        goto LABEL_210;
    }
    else
    {
      if (*(_DWORD *)(v895 + 116))
      {
        *(_QWORD *)v14 = 0;
      }
      else
      {
        memset(__base, 0, 32);
        gettimeofday((timeval *)__base, 0);
        if (v276[34])
        {
          *(_DWORD *)v14 = 0;
        }
        else
        {
          if (!*(_DWORD *)(v280 + 508) && !v276[30])
            *(_DWORD *)(v14 + 4) = 0;
          vp9_pick_filter_level(*(_QWORD *)(v14 + 14016), v87, *(_DWORD *)(v864 + 396));
          *(_DWORD *)(v14 + 4) = *(_DWORD *)v14;
        }
        gettimeofday((timeval *)&__base[16], 0);
        v722 = *(_DWORD *)&__base[24] - *(_DWORD *)&__base[8] + 1000000;
        if (*(int *)&__base[24] >= *(int *)&__base[8])
          v722 = *(_DWORD *)&__base[24] - *(_DWORD *)&__base[8];
        *(_QWORD *)(v897 + 1040) += v722
                                  + 1000000
                                  * (*(_QWORD *)&__base[16]
                                   - *(_QWORD *)__base
                                   + ((*(_DWORD *)&__base[24] - *(_DWORD *)&__base[8]) >> 31));
        if (v319 && *(int *)v14 >= 1)
        {
          vp9_build_mask_frame((uint64_t)v858, *(_DWORD *)v14, 0);
          v723 = *(_DWORD *)(v887 + 108);
          v724 = *(_QWORD *)(v279 + 8576);
          v725 = *(_DWORD *)v14;
          if (v723 < 2)
          {
            if (v725)
              loop_filter_rows(v724, (uint64_t)v858, v87 + 74112, 0, *(_DWORD *)(v280 + 544), 0);
          }
          else
          {
            vp9_loop_filter_frame_mt(v724, v858, (const void *)(v87 + 74112), v725, 0, 0, *(_QWORD **)(v887 + 112), v723, v87 + 842256);
          }
        }
      }
      v338 = *(int **)(v279 + 8576);
      if (v338[26] >= 96)
        v339 = 96;
      else
        v339 = v338[26];
      extend_frame(v338, v339);
      v88 = v863;
      v276 = v859;
      v320 = v894;
      if (!v859[163])
        goto LABEL_210;
    }
LABEL_209:
    save_coding_context(v87);
    goto LABEL_210;
  }
  *(_DWORD *)v14 = 0;
  v320 = v894;
  if (v276[163])
    goto LABEL_209;
LABEL_210:
  vp9_pack_bitstream(v87, v856);
  if (*v888 && *(_QWORD *)v861)
  {
    v325 = *(_DWORD *)(v280 + 176);
    v326 = v325 == -1 ? 0 : *(_QWORD *)(v14 + 13520) + 224 * v325 + 24;
    v330 = 8 * *v88;
    v331 = *(_DWORD **)(v14 + 14016);
    v332 = v326 + 64;
    v333 = *(_DWORD *)(v14 + 13432);
    v334 = *(_DWORD *)(v14 + 13576);
    v335 = *(_DWORD *)(v280 + 564);
    memset(__base, 0, 80);
    *((_QWORD *)&v965 + 1) = 0;
    *((_QWORD *)&v964 + 1) = v330;
    *(_QWORD *)&v965 = v331[3] * v331[2] + 2 * v331[7] * v331[8];
    DWORD2(v965) = v335;
    vpx_calc_highbd_psnr((uint64_t)v331, v332, (uint64_t)__base, v333, v334, 0.0, v321, v322, v323, v324);
    *(_QWORD *)&v964 = *(_QWORD *)&__base[16];
    if ((*(unsigned int (**)(_QWORD, __int128 *))v861)(*(_QWORD *)(v89 + 247), &v964) == 1)
      vpx_internal_error((uint64_t)v858, 1, "vp9_extrc_update_encodeframe_result() failed");
  }
  if (v276[163] && *(_DWORD *)(v280 + 564) < v276[69] && !*v320 && post_encode_drop_cbr(v87, v88))
  {
    restore_coding_context(v87);
    return;
  }
  *(_BYTE *)v89 = 0;
  *(_DWORD *)(v87 + 4 * *v320 + 834900) = 0;
  v336 = *v320;
  if ((_DWORD)v336 == v320[2] - 1)
    ++*(_DWORD *)(v892 + 48);
  if (!v320[1])
  {
    if (*(_DWORD *)(v90 + 4092))
    {
      v337 = (_DWORD *)(v90 + 4048);
      goto LABEL_279;
    }
    if (*(_DWORD *)(v90 + 4096))
    {
      v337 = (_DWORD *)(v90 + 4052);
      goto LABEL_279;
    }
    if (*(_DWORD *)(v90 + 4100))
    {
      v337 = (_DWORD *)(v90 + 4056);
LABEL_279:
      *(_DWORD *)(v87 + 4 * v336 + 835212) = *v337;
    }
  }
  if (*(_BYTE *)(v14 + 49))
  {
    v354 = *(_DWORD *)(v280 + 544);
    if (v354 >= 1)
    {
      v355 = *(_DWORD *)(v280 + 552);
      if (v355 >= 1)
      {
        v356 = 0;
        v357 = *(_QWORD *)(v280 + 768);
        v358 = *(_QWORD *)(v280 + 712);
        do
        {
          if (v355 >= 1)
          {
            v359 = 0;
            do
            {
              *(_BYTE *)(v357 + v359) = *(_BYTE *)(*(_QWORD *)(v358 + 8 * v359) + 4);
              v355 = *(_DWORD *)(v280 + 552);
              ++v359;
            }
            while ((int)v359 < v355);
            v354 = *(_DWORD *)(v280 + 544);
          }
          v358 += 8 * *(int *)(v280 + 556);
          v357 += v355;
          ++v356;
        }
        while (v356 < v354);
      }
    }
  }
  if (*(_DWORD *)(v280 + 508) && !*(_BYTE *)(v280 + 524))
  {
    release_scaled_references((_DWORD *)v87);
    v360 = *(_QWORD *)(v14 + 13520);
    if (!v276[176])
      goto LABEL_294;
LABEL_292:
    *(int32x2_t *)(v90 + 4052) = vrev64_s32(*(int32x2_t *)(v90 + 4052));
  }
  else
  {
    v360 = *(_QWORD *)(v14 + 13520);
    if (v276[176])
      goto LABEL_292;
LABEL_294:
    if (*(_DWORD *)(v280 + 520))
    {
      *(_DWORD *)(v90 + 4048) = *(_DWORD *)(v90 + 4056);
      v361 = v274[51];
      v362 = *v274;
      if (v361 >= 2)
      {
        memmove(v274, (const void *)(v87 + 746984), 4 * (v361 - 1));
        v361 = v274[51];
      }
      *(_DWORD *)(v90 + 4056) = v362;
      v274[51] = v361 - 1;
      v280 = v896;
    }
  }
  if (*(_DWORD *)(v280 + 508))
  {
    v363 = *(_DWORD *)(v90 + 4096);
    if (v363 && v276[34] && !v274[132])
    {
      v680 = v360 + 24;
      v681 = *(_DWORD *)(v280 + 176);
      v682 = (_DWORD *)(v87 + 4 * *(int *)(v90 + 4056) + 172048);
      if ((*v682 & 0x80000000) == 0)
      {
        v683 = (int *)(v680 + 224 * *v682);
        if (*v683 >= 1)
          --*v683;
      }
      *v682 = v681;
      ++*(_DWORD *)(v680 + 224 * v681);
      *(int32x2_t *)(v90 + 4052) = vrev64_s32(*(int32x2_t *)(v90 + 4052));
      if (*(_DWORD *)(v90 + 4092))
        goto LABEL_329;
    }
    else
    {
      if (*(_DWORD *)(v90 + 4100))
      {
        v364 = v274[50];
        v365 = v274[51];
        v366 = *(_DWORD *)(v90 + 4056);
        v367 = v365 - 1;
        if ((int)v365 >= 1)
        {
          if (v365 < 0x34)
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          v678 = v365 - 1;
          v679 = 4 * (v365 - 1);
          if (v87 + 4 * v367 + 746980 - v679 > v87 + 4 * v367 + 746980)
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          if (4 * v365 + v87 + 746980 - v679 > 4 * v365 + v87 + 746980)
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          if (v367 < v678)
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          if (HIDWORD(v678))
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          if (4 * (unint64_t)v367 - 4 * v365 < 0x20)
          {
            v368 = v274[51];
            goto LABEL_306;
          }
          v368 = v365 & 7;
          v714 = v365 + 0xFFFFFFFFLL;
          v715 = (_OWORD *)(4 * v365 + 746980 + v87 - 12);
          v716 = v365 & 0xFFFFFFF8;
          do
          {
            v717 = &v274[v714];
            v718 = *(_OWORD *)(v717 - 3);
            *(v715 - 1) = *(_OWORD *)(v717 - 7);
            *v715 = v718;
            v714 -= 8;
            v715 -= 2;
            v716 -= 8;
          }
          while (v716);
          if ((v365 & 0x7FFFFFF8) != v365)
          {
            do
            {
LABEL_306:
              v65 = v368 > 1;
              v274[v368] = v274[(v368 - 1)];
              --v368;
            }
            while (v65);
          }
          LODWORD(v365) = v274[51];
        }
        *v274 = v366;
        v274[51] = v365 + 1;
        v369 = v360 + 24;
        v370 = *(_DWORD *)(v280 + 176);
        if ((*(_DWORD *)(v87 + 4 * v364 + 172048) & 0x80000000) == 0)
        {
          v371 = (int *)(v369 + 224 * *(unsigned int *)(v87 + 4 * v364 + 172048));
          if (*v371 >= 1)
            --*v371;
        }
        *(_DWORD *)(v87 + 4 * v364 + 172048) = v370;
        ++*(_DWORD *)(v369 + 224 * v370);
        *(_OWORD *)(v87 + 739224) = *(_OWORD *)(v87 + 739176);
        *(_DWORD *)(v90 + 4056) = v364;
        v363 = *(_DWORD *)(v90 + 4096);
      }
      if (v363)
      {
        v372 = v360 + 24;
        v373 = *(_DWORD *)(v280 + 176);
        v374 = (_DWORD *)(v87 + 4 * *(int *)(v90 + 4052) + 172048);
        if ((*v374 & 0x80000000) == 0)
        {
          v375 = (int *)(v372 + 224 * *v374);
          if (*v375 >= 1)
            --*v375;
        }
        *v374 = v373;
        ++*(_DWORD *)(v372 + 224 * v373);
        if (v276[34])
          v376 = *(_OWORD *)(v87 + 739224);
        else
          v376 = *(_OWORD *)(v87 + 739176);
        *(_OWORD *)(v87 + 739208) = v376;
      }
      if (*(_DWORD *)(v90 + 4092))
      {
LABEL_329:
        v384 = v360 + 24;
        v385 = *(_DWORD *)(v280 + 176);
        v386 = (_DWORD *)(v87 + 4 * *(int *)(v90 + 4048) + 172048);
        if ((*v386 & 0x80000000) == 0)
        {
          v387 = (int *)(v384 + 224 * *v386);
          if (*v387 >= 1)
            --*v387;
        }
        *v386 = v385;
        ++*(_DWORD *)(v384 + 224 * v385);
        if (!v276[34])
          *(_OWORD *)(v87 + 739192) = *(_OWORD *)(v87 + 739176);
      }
    }
  }
  else
  {
    v377 = v360 + 24;
    v378 = *(_DWORD *)(v280 + 176);
    v379 = (_DWORD *)(v87 + 4 * *(int *)(v90 + 4052) + 172048);
    if ((*v379 & 0x80000000) == 0)
    {
      v380 = (int *)(v377 + 224 * *v379);
      if (*v380 >= 1)
        --*v380;
    }
    *v379 = v378;
    ++*(_DWORD *)(v377 + 224 * v378);
    v381 = *(_DWORD *)(v280 + 176);
    v382 = (_DWORD *)(v87 + 4 * *(int *)(v90 + 4056) + 172048);
    if ((*v382 & 0x80000000) == 0)
    {
      v383 = (int *)(v377 + 224 * *v382);
      if (*v383 >= 1)
        --*v383;
    }
    *v382 = v381;
    ++*(_DWORD *)(v377 + 224 * v381);
    if (*(_DWORD *)(v90 + 4092))
      goto LABEL_329;
  }
  if (*(_DWORD *)(v87 + 4 * *v860 + 743192) == 5)
  {
    v388 = v274[51];
    v389 = *v274;
    if (v388 >= 2)
    {
      memmove(v274, (const void *)(v87 + 746984), 4 * (v388 - 1));
      v388 = v274[51];
    }
    *(_DWORD *)(v90 + 4056) = v389;
    v274[51] = v388 - 1;
  }
  vp9_denoiser_update_ref_frame(v87);
  v394 = v894;
  if (v274[132] && !*(_DWORD *)(v14 + 13652))
  {
    vp9_svc_update_ref_frame(v87);
    if (!*(_DWORD *)(v280 + 520))
    {
LABEL_341:
      for (i = 0; i != 4; ++i)
      {
        v396 = 0;
        v397 = *(_QWORD *)v279 + 2304 * i + 816;
        v398 = 1;
        do
        {
          v399 = 0;
          v400 = v398;
          v401 = 1;
          do
          {
            v402 = (_DWORD *)(v397 + 1152 * v396 + 576 * v399);
            v403 = (_DWORD *)(v87 + 135744 + 6912 * i + 3456 * v396 + 1728 * v399);
            *v402 = *v403;
            v402[1] = v403[1];
            v404 = v403[2];
            v402[2] = v404;
            v405 = v403[3] + v404;
            v402[2] = v405;
            v406 = v403[4] + v405;
            v402[2] = v406;
            v407 = v403[5] + v406;
            v402[2] = v407;
            v408 = v403[6] + v407;
            v402[2] = v408;
            v409 = v403[7] + v408;
            v402[2] = v409;
            v410 = v403[8] + v409;
            v402[2] = v410;
            v411 = v403[9] + v410;
            v402[2] = v411;
            v402[2] = v403[10] + v411;
            v402[3] = v403[11];
            v402[4] = v403[12];
            v402[5] = v403[13];
            v412 = v403[14];
            v402[6] = v412;
            v413 = v403[15] + v412;
            v402[6] = v413;
            v414 = v403[16] + v413;
            v402[6] = v414;
            v415 = v403[17] + v414;
            v402[6] = v415;
            v416 = v403[18] + v415;
            v402[6] = v416;
            v417 = v403[19] + v416;
            v402[6] = v417;
            v418 = v403[20] + v417;
            v402[6] = v418;
            v419 = v403[21] + v418;
            v402[6] = v419;
            v402[6] = v403[22] + v419;
            v402[7] = v403[23];
            v402[8] = v403[24];
            v402[9] = v403[25];
            v420 = v403[26];
            v402[10] = v420;
            v421 = v403[27] + v420;
            v402[10] = v421;
            v422 = v403[28] + v421;
            v402[10] = v422;
            v423 = v403[29] + v422;
            v402[10] = v423;
            v424 = v403[30] + v423;
            v402[10] = v424;
            v425 = v403[31] + v424;
            v402[10] = v425;
            v426 = v403[32] + v425;
            v402[10] = v426;
            v427 = v403[33] + v426;
            v402[10] = v427;
            v402[10] = v403[34] + v427;
            v402[11] = v403[35];
            v402[24] = v403[72];
            v402[25] = v403[73];
            v428 = v403[74];
            v402[26] = v428;
            v429 = v403[75] + v428;
            v402[26] = v429;
            v430 = v403[76] + v429;
            v402[26] = v430;
            v431 = v403[77] + v430;
            v402[26] = v431;
            v432 = v403[78] + v431;
            v402[26] = v432;
            v433 = v403[79] + v432;
            v402[26] = v433;
            v434 = v403[80] + v433;
            v402[26] = v434;
            v435 = v403[81] + v434;
            v402[26] = v435;
            v402[26] = v403[82] + v435;
            v402[27] = v403[83];
            v402[28] = v403[84];
            v402[29] = v403[85];
            v436 = v403[86];
            v402[30] = v436;
            v437 = v403[87] + v436;
            v402[30] = v437;
            v438 = v403[88] + v437;
            v402[30] = v438;
            v439 = v403[89] + v438;
            v402[30] = v439;
            v440 = v403[90] + v439;
            v402[30] = v440;
            v441 = v403[91] + v440;
            v402[30] = v441;
            v442 = v403[92] + v441;
            v402[30] = v442;
            v443 = v403[93] + v442;
            v402[30] = v443;
            v402[30] = v403[94] + v443;
            v402[31] = v403[95];
            v402[32] = v403[96];
            v402[33] = v403[97];
            v444 = v403[98];
            v402[34] = v444;
            v445 = v403[99] + v444;
            v402[34] = v445;
            v446 = v403[100] + v445;
            v402[34] = v446;
            v447 = v403[101] + v446;
            v402[34] = v447;
            v448 = v403[102] + v447;
            v402[34] = v448;
            v449 = v403[103] + v448;
            v402[34] = v449;
            v450 = v403[104] + v449;
            v402[34] = v450;
            v451 = v403[105] + v450;
            v402[34] = v451;
            v402[34] = v403[106] + v451;
            v402[35] = v403[107];
            v402[36] = v403[108];
            v402[37] = v403[109];
            v452 = v403[110];
            v402[38] = v452;
            v453 = v403[111] + v452;
            v402[38] = v453;
            v454 = v403[112] + v453;
            v402[38] = v454;
            v455 = v403[113] + v454;
            v402[38] = v455;
            v456 = v403[114] + v455;
            v402[38] = v456;
            v457 = v403[115] + v456;
            v402[38] = v457;
            v458 = v403[116] + v457;
            v402[38] = v458;
            v459 = v403[117] + v458;
            v402[38] = v459;
            v402[38] = v403[118] + v459;
            v402[39] = v403[119];
            v402[40] = v403[120];
            v402[41] = v403[121];
            v460 = v403[122];
            v402[42] = v460;
            v461 = v403[123] + v460;
            v402[42] = v461;
            v462 = v403[124] + v461;
            v402[42] = v462;
            v463 = v403[125] + v462;
            v402[42] = v463;
            v464 = v403[126] + v463;
            v402[42] = v464;
            v465 = v403[127] + v464;
            v402[42] = v465;
            v466 = v403[128] + v465;
            v402[42] = v466;
            v467 = v403[129] + v466;
            v402[42] = v467;
            v402[42] = v403[130] + v467;
            v402[43] = v403[131];
            v402[44] = v403[132];
            v402[45] = v403[133];
            v468 = v403[134];
            v402[46] = v468;
            v469 = v403[135] + v468;
            v402[46] = v469;
            v470 = v403[136] + v469;
            v402[46] = v470;
            v471 = v403[137] + v470;
            v402[46] = v471;
            v472 = v403[138] + v471;
            v402[46] = v472;
            v473 = v403[139] + v472;
            v402[46] = v473;
            v474 = v403[140] + v473;
            v402[46] = v474;
            v475 = v403[141] + v474;
            v402[46] = v475;
            v402[46] = v403[142] + v475;
            v402[47] = v403[143];
            v402[48] = v403[144];
            v402[49] = v403[145];
            v476 = v403[146];
            v402[50] = v476;
            v477 = v403[147] + v476;
            v402[50] = v477;
            v478 = v403[148] + v477;
            v402[50] = v478;
            v479 = v403[149] + v478;
            v402[50] = v479;
            v480 = v403[150] + v479;
            v402[50] = v480;
            v481 = v403[151] + v480;
            v402[50] = v481;
            v482 = v403[152] + v481;
            v402[50] = v482;
            v483 = v403[153] + v482;
            v402[50] = v483;
            v402[50] = v403[154] + v483;
            v402[51] = v403[155];
            v402[52] = v403[156];
            v402[53] = v403[157];
            v484 = v403[158];
            v402[54] = v484;
            v485 = v403[159] + v484;
            v402[54] = v485;
            v486 = v403[160] + v485;
            v402[54] = v486;
            v487 = v403[161] + v486;
            v402[54] = v487;
            v488 = v403[162] + v487;
            v402[54] = v488;
            v489 = v403[163] + v488;
            v402[54] = v489;
            v490 = v403[164] + v489;
            v402[54] = v490;
            v491 = v403[165] + v490;
            v402[54] = v491;
            v402[54] = v403[166] + v491;
            v402[55] = v403[167];
            v402[56] = v403[168];
            v402[57] = v403[169];
            v492 = v403[170];
            v402[58] = v492;
            v493 = v403[171] + v492;
            v402[58] = v493;
            v494 = v403[172] + v493;
            v402[58] = v494;
            v495 = v403[173] + v494;
            v402[58] = v495;
            v496 = v403[174] + v495;
            v402[58] = v496;
            v497 = v403[175] + v496;
            v402[58] = v497;
            v498 = v403[176] + v497;
            v402[58] = v498;
            v499 = v403[177] + v498;
            v402[58] = v499;
            v402[58] = v403[178] + v499;
            v402[59] = v403[179];
            v402[60] = v403[180];
            v402[61] = v403[181];
            v500 = v403[182];
            v402[62] = v500;
            v501 = v403[183] + v500;
            v402[62] = v501;
            v502 = v403[184] + v501;
            v402[62] = v502;
            v503 = v403[185] + v502;
            v402[62] = v503;
            v504 = v403[186] + v503;
            v402[62] = v504;
            v505 = v403[187] + v504;
            v402[62] = v505;
            v506 = v403[188] + v505;
            v402[62] = v506;
            v507 = v403[189] + v506;
            v402[62] = v507;
            v402[62] = v403[190] + v507;
            v402[63] = v403[191];
            v402[64] = v403[192];
            v402[65] = v403[193];
            v508 = v403[194];
            v402[66] = v508;
            v509 = v403[195] + v508;
            v402[66] = v509;
            v510 = v403[196] + v509;
            v402[66] = v510;
            v511 = v403[197] + v510;
            v402[66] = v511;
            v512 = v403[198] + v511;
            v402[66] = v512;
            v513 = v403[199] + v512;
            v402[66] = v513;
            v514 = v403[200] + v513;
            v402[66] = v514;
            v515 = v403[201] + v514;
            v402[66] = v515;
            v402[66] = v403[202] + v515;
            v402[67] = v403[203];
            v402[68] = v403[204];
            v402[69] = v403[205];
            v516 = v403[206];
            v402[70] = v516;
            v517 = v403[207] + v516;
            v402[70] = v517;
            v518 = v403[208] + v517;
            v402[70] = v518;
            v519 = v403[209] + v518;
            v402[70] = v519;
            v520 = v403[210] + v519;
            v402[70] = v520;
            v521 = v403[211] + v520;
            v402[70] = v521;
            v522 = v403[212] + v521;
            v402[70] = v522;
            v523 = v403[213] + v522;
            v402[70] = v523;
            v402[70] = v403[214] + v523;
            v402[71] = v403[215];
            v402[72] = v403[216];
            v402[73] = v403[217];
            v524 = v403[218];
            v402[74] = v524;
            v525 = v403[219] + v524;
            v402[74] = v525;
            v526 = v403[220] + v525;
            v402[74] = v526;
            v527 = v403[221] + v526;
            v402[74] = v527;
            v528 = v403[222] + v527;
            v402[74] = v528;
            v529 = v403[223] + v528;
            v402[74] = v529;
            v530 = v403[224] + v529;
            v402[74] = v530;
            v531 = v403[225] + v530;
            v402[74] = v531;
            v402[74] = v403[226] + v531;
            v402[75] = v403[227];
            v402[76] = v403[228];
            v402[77] = v403[229];
            v532 = v403[230];
            v402[78] = v532;
            v533 = v403[231] + v532;
            v402[78] = v533;
            v534 = v403[232] + v533;
            v402[78] = v534;
            v535 = v403[233] + v534;
            v402[78] = v535;
            v536 = v403[234] + v535;
            v402[78] = v536;
            v537 = v403[235] + v536;
            v402[78] = v537;
            v538 = v403[236] + v537;
            v402[78] = v538;
            v539 = v403[237] + v538;
            v402[78] = v539;
            v402[78] = v403[238] + v539;
            v402[79] = v403[239];
            v402[80] = v403[240];
            v402[81] = v403[241];
            v540 = v403[242];
            v402[82] = v540;
            v541 = v403[243] + v540;
            v402[82] = v541;
            v542 = v403[244] + v541;
            v402[82] = v542;
            v543 = v403[245] + v542;
            v402[82] = v543;
            v544 = v403[246] + v543;
            v402[82] = v544;
            v545 = v403[247] + v544;
            v402[82] = v545;
            v546 = v403[248] + v545;
            v402[82] = v546;
            v547 = v403[249] + v546;
            v402[82] = v547;
            v402[82] = v403[250] + v547;
            v402[83] = v403[251];
            v402[84] = v403[252];
            v402[85] = v403[253];
            v548 = v403[254];
            v402[86] = v548;
            v549 = v403[255] + v548;
            v402[86] = v549;
            v550 = v403[256] + v549;
            v402[86] = v550;
            v551 = v403[257] + v550;
            v402[86] = v551;
            v552 = v403[258] + v551;
            v402[86] = v552;
            v553 = v403[259] + v552;
            v402[86] = v553;
            v554 = v403[260] + v553;
            v402[86] = v554;
            v555 = v403[261] + v554;
            v402[86] = v555;
            v402[86] = v403[262] + v555;
            v402[87] = v403[263];
            v402[88] = v403[264];
            v402[89] = v403[265];
            v556 = v403[266];
            v402[90] = v556;
            v557 = v403[267] + v556;
            v402[90] = v557;
            v558 = v403[268] + v557;
            v402[90] = v558;
            v559 = v403[269] + v558;
            v402[90] = v559;
            v560 = v403[270] + v559;
            v402[90] = v560;
            v561 = v403[271] + v560;
            v402[90] = v561;
            v562 = v403[272] + v561;
            v402[90] = v562;
            v563 = v403[273] + v562;
            v402[90] = v563;
            v402[90] = v403[274] + v563;
            v402[91] = v403[275];
            v402[92] = v403[276];
            v402[93] = v403[277];
            v564 = v403[278];
            v402[94] = v564;
            v565 = v403[279] + v564;
            v402[94] = v565;
            v566 = v403[280] + v565;
            v402[94] = v566;
            v567 = v403[281] + v566;
            v402[94] = v567;
            v568 = v403[282] + v567;
            v402[94] = v568;
            v569 = v403[283] + v568;
            v402[94] = v569;
            v570 = v403[284] + v569;
            v402[94] = v570;
            v571 = v403[285] + v570;
            v402[94] = v571;
            v402[94] = v403[286] + v571;
            v402[95] = v403[287];
            v402[96] = v403[288];
            v402[97] = v403[289];
            v572 = v403[290];
            v402[98] = v572;
            v573 = v403[291] + v572;
            v402[98] = v573;
            v574 = v403[292] + v573;
            v402[98] = v574;
            v575 = v403[293] + v574;
            v402[98] = v575;
            v576 = v403[294] + v575;
            v402[98] = v576;
            v577 = v403[295] + v576;
            v402[98] = v577;
            v578 = v403[296] + v577;
            v402[98] = v578;
            v579 = v403[297] + v578;
            v402[98] = v579;
            v402[98] = v403[298] + v579;
            v402[99] = v403[299];
            v402[100] = v403[300];
            v402[101] = v403[301];
            v580 = v403[302];
            v402[102] = v580;
            v581 = v403[303] + v580;
            v402[102] = v581;
            v582 = v403[304] + v581;
            v402[102] = v582;
            v583 = v403[305] + v582;
            v402[102] = v583;
            v584 = v403[306] + v583;
            v402[102] = v584;
            v585 = v403[307] + v584;
            v402[102] = v585;
            v586 = v403[308] + v585;
            v402[102] = v586;
            v587 = v403[309] + v586;
            v402[102] = v587;
            v402[102] = v403[310] + v587;
            v402[103] = v403[311];
            v402[104] = v403[312];
            v402[105] = v403[313];
            v588 = v403[314];
            v402[106] = v588;
            v589 = v403[315] + v588;
            v402[106] = v589;
            v590 = v403[316] + v589;
            v402[106] = v590;
            v591 = v403[317] + v590;
            v402[106] = v591;
            v592 = v403[318] + v591;
            v402[106] = v592;
            v593 = v403[319] + v592;
            v402[106] = v593;
            v594 = v403[320] + v593;
            v402[106] = v594;
            v595 = v403[321] + v594;
            v402[106] = v595;
            v402[106] = v403[322] + v595;
            v402[107] = v403[323];
            v402[108] = v403[324];
            v402[109] = v403[325];
            v596 = v403[326];
            v402[110] = v596;
            v597 = v403[327] + v596;
            v402[110] = v597;
            v598 = v403[328] + v597;
            v402[110] = v598;
            v599 = v403[329] + v598;
            v402[110] = v599;
            v600 = v403[330] + v599;
            v402[110] = v600;
            v601 = v403[331] + v600;
            v402[110] = v601;
            v602 = v403[332] + v601;
            v402[110] = v602;
            v603 = v403[333] + v602;
            v402[110] = v603;
            v402[110] = v403[334] + v603;
            v402[111] = v403[335];
            v402[112] = v403[336];
            v402[113] = v403[337];
            v604 = v403[338];
            v402[114] = v604;
            v605 = v403[339] + v604;
            v402[114] = v605;
            v606 = v403[340] + v605;
            v402[114] = v606;
            v607 = v403[341] + v606;
            v402[114] = v607;
            v608 = v403[342] + v607;
            v402[114] = v608;
            v609 = v403[343] + v608;
            v402[114] = v609;
            v610 = v403[344] + v609;
            v402[114] = v610;
            v611 = v403[345] + v610;
            v402[114] = v611;
            v402[114] = v403[346] + v611;
            v402[115] = v403[347];
            v402[116] = v403[348];
            v402[117] = v403[349];
            v612 = v403[350];
            v402[118] = v612;
            v613 = v403[351] + v612;
            v402[118] = v613;
            v614 = v403[352] + v613;
            v402[118] = v614;
            v615 = v403[353] + v614;
            v402[118] = v615;
            v616 = v403[354] + v615;
            v402[118] = v616;
            v617 = v403[355] + v616;
            v402[118] = v617;
            v618 = v403[356] + v617;
            v402[118] = v618;
            v619 = v403[357] + v618;
            v402[118] = v619;
            v402[118] = v403[358] + v619;
            v402[119] = v403[359];
            v402[120] = v403[360];
            v402[121] = v403[361];
            v620 = v403[362];
            v402[122] = v620;
            v621 = v403[363] + v620;
            v402[122] = v621;
            v622 = v403[364] + v621;
            v402[122] = v622;
            v623 = v403[365] + v622;
            v402[122] = v623;
            v624 = v403[366] + v623;
            v402[122] = v624;
            v625 = v403[367] + v624;
            v402[122] = v625;
            v626 = v403[368] + v625;
            v402[122] = v626;
            v627 = v403[369] + v626;
            v402[122] = v627;
            v402[122] = v403[370] + v627;
            v402[123] = v403[371];
            v402[124] = v403[372];
            v402[125] = v403[373];
            v628 = v403[374];
            v402[126] = v628;
            v629 = v403[375] + v628;
            v402[126] = v629;
            v630 = v403[376] + v629;
            v402[126] = v630;
            v631 = v403[377] + v630;
            v402[126] = v631;
            v632 = v403[378] + v631;
            v402[126] = v632;
            v633 = v403[379] + v632;
            v402[126] = v633;
            v634 = v403[380] + v633;
            v402[126] = v634;
            v635 = v403[381] + v634;
            v402[126] = v635;
            v402[126] = v403[382] + v635;
            v402[127] = v403[383];
            v402[128] = v403[384];
            v402[129] = v403[385];
            v636 = v403[386];
            v402[130] = v636;
            v637 = v403[387] + v636;
            v402[130] = v637;
            v638 = v403[388] + v637;
            v402[130] = v638;
            v639 = v403[389] + v638;
            v402[130] = v639;
            v640 = v403[390] + v639;
            v402[130] = v640;
            v641 = v403[391] + v640;
            v402[130] = v641;
            v642 = v403[392] + v641;
            v402[130] = v642;
            v643 = v403[393] + v642;
            v402[130] = v643;
            v402[130] = v403[394] + v643;
            v402[131] = v403[395];
            v402[132] = v403[396];
            v402[133] = v403[397];
            v644 = v403[398];
            v402[134] = v644;
            v645 = v403[399] + v644;
            v402[134] = v645;
            v646 = v403[400] + v645;
            v402[134] = v646;
            v647 = v403[401] + v646;
            v402[134] = v647;
            v648 = v403[402] + v647;
            v402[134] = v648;
            v649 = v403[403] + v648;
            v402[134] = v649;
            v650 = v403[404] + v649;
            v402[134] = v650;
            v651 = v403[405] + v650;
            v402[134] = v651;
            v402[134] = v403[406] + v651;
            v402[135] = v403[407];
            v402[136] = v403[408];
            v402[137] = v403[409];
            v652 = v403[410];
            v402[138] = v652;
            v653 = v403[411] + v652;
            v402[138] = v653;
            v654 = v403[412] + v653;
            v402[138] = v654;
            v655 = v403[413] + v654;
            v402[138] = v655;
            v656 = v403[414] + v655;
            v402[138] = v656;
            v657 = v403[415] + v656;
            v402[138] = v657;
            v658 = v403[416] + v657;
            v402[138] = v658;
            v659 = v403[417] + v658;
            v402[138] = v659;
            v402[138] = v403[418] + v659;
            v402[139] = v403[419];
            v402[140] = v403[420];
            v402[141] = v403[421];
            v660 = v403[422];
            v402[142] = v660;
            v661 = v403[423] + v660;
            v402[142] = v661;
            v662 = v403[424] + v661;
            v402[142] = v662;
            v663 = v403[425] + v662;
            v402[142] = v663;
            v664 = v403[426] + v663;
            v402[142] = v664;
            v665 = v403[427] + v664;
            v402[142] = v665;
            v666 = v403[428] + v665;
            v402[142] = v666;
            v667 = v403[429] + v666;
            v402[142] = v667;
            v668 = v401;
            v402[142] = v403[430] + v667;
            v402[143] = v403[431];
            v399 = 1;
            v401 = 0;
          }
          while ((v668 & 1) != 0);
          v398 = 0;
          v396 = 1;
        }
        while ((v400 & 1) != 0);
      }
      if (!*(_DWORD *)(v14 + 13496) && !*(_DWORD *)(v14 + 13500))
      {
        if (*(_DWORD *)(v280 + 508) && !*(_BYTE *)(v280 + 524))
        {
          vp9_adapt_mode_probs((uint64_t)v858);
          v394 = v894;
          vp9_adapt_mv_probs((uint64_t)v858, *(_DWORD *)(v280 + 528));
        }
        vp9_adapt_coef_probs((uint64_t)v858);
      }
    }
  }
  else if (!*(_DWORD *)(v280 + 520))
  {
    goto LABEL_341;
  }
  *(_DWORD *)(v90 + 4104) = 0;
  *(_DWORD *)(v892 + 80) = *(_DWORD *)(v892 + 80) & 0xFFFFFFF9 | (2 * (*(_DWORD *)(v90 + 4096) == 1)) | (4 * (*(_DWORD *)(v90 + 4100) == 1));
  v669 = *(_DWORD *)(v87 + 172048 + 4 * *(int *)(v90 + 4052));
  v670 = *(_DWORD *)(v87 + 172048 + 4 * *(int *)(v90 + 4048));
  v671 = *(_DWORD *)(v87 + 172048 + 4 * *(int *)(v90 + 4056));
  if (v669 == v670)
    v672 = 5;
  else
    v672 = 7;
  if (v276[22] == 0x7FFFFFFF && v394[3] == 1 && v394[2] == 1)
    v672 = 5;
  v673 = v671 == v670 || v669 == v671;
  v674 = v672 & 3;
  if (!v673)
    v674 = v672;
  v276[267] = v674;
  *(_DWORD *)(v280 + 504) = *(_DWORD *)(v280 + 508);
  vp9_rc_postencode_update(v87, *v88, v390, v391, v392, v393);
  if (*(_DWORD *)(v89 + 19) && !*(_DWORD *)(v14 + 13652))
  {
    if (*(_DWORD *)(v280 + 508))
    {
      if (!*(_BYTE *)(v280 + 524)
        && (!v274[132] || !*(_DWORD *)(v87 + 6880 * v394[1] + 758668) && *v394 == v394[2] - 1))
      {
        vp9_compute_frame_low_motion(v87);
      }
      goto LABEL_368;
    }
    v684 = *v88;
    if ((unint64_t)*v88 <= 1)
      v684 = 1;
    *v88 = v684;
  }
  else
  {
LABEL_368:
    v675 = *(_DWORD *)(v280 + 508);
    v676 = *v88;
    if ((unint64_t)*v88 <= 1)
      v676 = 1;
    *v88 = v676;
    if (v675)
    {
      v677 = *(_DWORD *)(v892 + 80) & 0xFFFFFFFE;
      goto LABEL_393;
    }
  }
  v677 = *(_DWORD *)(v892 + 80) | 1;
LABEL_393:
  *v855 = v677;
  *(_WORD *)(v14 + 49) = 0;
  v685 = *(_QWORD *)(v279 + 8540);
  *(_BYTE *)(v14 + 17) = 0;
  *(_QWORD *)(v279 + 8556) = v685;
  v686 = *(_DWORD *)(v280 + 512);
  if (*(_DWORD *)(v280 + 520))
  {
    if (v686)
    {
      if (!v274[132])
        goto LABEL_401;
      goto LABEL_399;
    }
  }
  else
  {
    *(_DWORD *)(v280 + 516) = v686;
    *(_QWORD *)(v279 + 8584) = *(_QWORD *)(v279 + 8592);
    if (v686)
    {
      v687 = *(_QWORD *)(v280 + 664);
      v688 = *(_QWORD *)(v280 + 720);
      v689 = *(_QWORD *)(v280 + 648);
      *(_QWORD *)(v280 + 664) = v689;
      *(_QWORD *)(v280 + 648) = v687;
      v690 = *(int *)(v280 + 556);
      *(_QWORD *)(v280 + 656) = v687 + 68 * v690 + 68;
      *(_QWORD *)(v280 + 672) = v689 + 68 * v690 + 68;
      v691 = *(_QWORD *)(v280 + 704);
      *(_QWORD *)(v280 + 720) = v691;
      *(_QWORD *)(v280 + 704) = v688;
      *(_QWORD *)(v280 + 712) = v688 + 8 * v690 + 8;
      *(_QWORD *)(v280 + 728) = v691 + 8 * v690 + 8;
      if (!v274[132])
        goto LABEL_401;
LABEL_399:
      v692 = *v394;
      v693 = v394[2];
      v694 = v87 + 6880 * v394[3] * (uint64_t)*v394 + 751904;
      *(_DWORD *)(v694 + 6760) = *(_DWORD *)(v87 + 6880 * v394[3] * (uint64_t)*v394 + 758664) + 1;
      ++*(_DWORD *)(v694 + 6768);
      if (v692 == v693 - 1)
        ++*(_DWORD *)(v890 + 224);
LABEL_401:
      ++*(_DWORD *)(v14 + 13420);
    }
  }
  ++*(_DWORD *)(v14 + 13424);
  if (v274[132])
  {
    v695 = *v394;
    *(_DWORD *)(v87 + 747512 + 6880 * (v394[1] + v394[3] * (uint64_t)(int)v695) + 11164) = *(_DWORD *)(v280 + 508);
    *(_DWORD *)(v87 + 747512 + 4 * v695 + 87736) = 0;
  }
  *((_BYTE *)v274 + 324) = 0;
  *(_BYTE *)(v889 + 389) = *(_BYTE *)(v280 + 524);
  *(_BYTE *)(v889 + 388) = 0;
}

void *save_coding_context(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;

  v2 = a1 + 736296;
  v3 = a1 + 176446;
  v4 = (const void **)(a1 + 173008);
  *(_OWORD *)(a1 + 212000) = *(_OWORD *)(a1 + 74924);
  memcpy((void *)(a1 + 212016), *(const void **)(a1 + 738360), 0x1FFFCuLL);
  memcpy((void *)(a1 + 343084), *(const void **)(v2 + 2072), 0x1FFFCuLL);
  memcpy((void *)(a1 + 474152), *(const void **)(v2 + 2080), 0x1FFFCuLL);
  memcpy((void *)(a1 + 605220), *(const void **)(v2 + 2088), 0x1FFFCuLL);
  *(_WORD *)(a1 + 736288) = *(_WORD *)(a1 + 176484);
  *(_BYTE *)(a1 + 736290) = *(_BYTE *)(a1 + 176486);
  memcpy(*(void **)v2, v4[28], *((int *)v4 + 2) * (uint64_t)*(int *)v4);
  *(_DWORD *)(v2 + 8) = *(_DWORD *)v3;
  *(_WORD *)(v2 + 12) = *(_WORD *)(v3 + 6);
  return memcpy((void *)(a1 + 736312), *(const void **)(v3 + 154), 0x7FCuLL);
}

void *restore_coding_context(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = a1 + 736296;
  v3 = a1 + 176446;
  v4 = (void **)(a1 + 173008);
  *(_OWORD *)(a1 + 74924) = *(_OWORD *)(a1 + 212000);
  memcpy(*(void **)(a1 + 738360), (const void *)(a1 + 212016), 0x1FFFCuLL);
  memcpy(*(void **)(v2 + 2072), (const void *)(a1 + 343084), 0x1FFFCuLL);
  memcpy(*(void **)(v2 + 2080), (const void *)(a1 + 474152), 0x1FFFCuLL);
  memcpy(*(void **)(v2 + 2088), (const void *)(a1 + 605220), 0x1FFFCuLL);
  *(_WORD *)(a1 + 176484) = *(_WORD *)(a1 + 736288);
  *(_BYTE *)(a1 + 176486) = *(_BYTE *)(a1 + 736290);
  memcpy(v4[28], *(const void **)v2, *((int *)v4 + 2) * (uint64_t)*(int *)v4);
  *(_DWORD *)v3 = *(_DWORD *)(v2 + 8);
  *(_WORD *)(v3 + 6) = *(_WORD *)(v2 + 12);
  return memcpy(*(void **)(v3 + 154), (const void *)(a1 + 736312), 0x7FCuLL);
}

uint64_t qsort_comp(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

_DWORD *svc_twostage_scale(_DWORD *a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, int8x8_t a9, int8x8_t a10)
{
  int *v15;
  int v16;
  int8x8_t v17;
  int8x8_t v18;

  if (*a2 == 8 * a1[330] && a2[1] == 8 * a1[328])
    return a2;
  v15 = a1 + 4540;
  v16 = a1[4540];
  if (v16 == 8)
  {
    vp9_scale_and_extend_frame_neon((uint64_t)a2, a4, a7, a8, a9, a10);
    vp9_scale_and_extend_frame_neon(a4, a3, a5, a6, v17, v18);
  }
  else
  {
    scale_and_extend_frame((uint64_t)a2, a4, v16, a7, a8);
    scale_and_extend_frame(a4, a3, *v15, a5, a6);
  }
  return (_DWORD *)a3;
}

char *apply_roi_map(char *result)
{
  _DWORD *v1;
  char *v2;
  _BYTE *v3;
  _DWORD *v4;
  char *v5;
  __int128 v6;
  uint64_t v7;
  _WORD *v8;
  char *v9;
  char *v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  _OWORD v17[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = result + 176472;
  if (*((_DWORD *)result + 47518) == 2 && *((int *)result + 47514) >= 5)
  {
    v2 = result;
    v3 = result + 850440;
    if (result[850440])
    {
      v4 = result + 738536;
      v5 = result + 850528;
      v6 = *((_OWORD *)result + 53161);
      v17[0] = *((_OWORD *)result + 53160);
      v17[1] = v6;
      *(_OWORD *)(result + 176488) = 0u;
      *(_OWORD *)(result + 176504) = 0u;
      *(_OWORD *)(result + 176520) = 0u;
      *(_OWORD *)(result + 176536) = 0u;
      *(_OWORD *)(result + 176552) = 0u;
      *(_OWORD *)(result + 176568) = 0u;
      *((_DWORD *)result + 44146) = 0;
      *v1 = 65793;
      result = (char *)memcpy(*((void **)result + 92527), *((const void **)result + 106306), *((int *)result + 43254) * (uint64_t)*((int *)result + 43252));
      v7 = 0;
      v8 = (_WORD *)v1 + 11;
      v9 = v2 + 176552;
      while (1)
      {
        v10 = &v5[v7];
        v11 = *(_DWORD *)&v5[v7 - 64];
        v12 = v11 < 0;
        if (v11 < 0)
          v11 = -v11;
        v13 = quantizer_to_qindex[v11];
        if (v12)
          v14 = -v13;
        else
          v14 = v13;
        v15 = *(_DWORD *)&v9[v7] & 0xFFFFFFFC;
        *(_DWORD *)&v9[v7] = v15;
        if (v14)
        {
          v15 |= 1u;
          *(_DWORD *)&v9[v7] = v15;
          *(v8 - 3) = v14;
        }
        if (*((_DWORD *)v10 - 8))
        {
          v15 |= 2u;
          *(_DWORD *)&v9[v7] = v15;
          *(v8 - 2) = *((_DWORD *)v10 - 8);
        }
        if (*(_DWORD *)&v5[v7])
        {
          v15 |= 8u;
          *(_DWORD *)&v9[v7] = v15;
          *v8 = 0;
        }
        v16 = *(_DWORD *)((char *)v17 + v7);
        if (v16 < 0)
          goto LABEL_6;
        if (v16 == 2)
        {
          if (*v4)
          {
            LOWORD(v16) = 2;
            if ((*((_DWORD *)v2 + 184880) & 2) == 0)
              goto LABEL_6;
          }
          else
          {
            LOWORD(v16) = 1;
            *(_DWORD *)((char *)v17 + v7) = 1;
            if ((*((_DWORD *)v2 + 184880) & 2) == 0)
              goto LABEL_6;
          }
        }
        else if (v16 == 3)
        {
          if (*((_DWORD *)v2 + 184983))
            goto LABEL_6;
          LOWORD(v16) = 3;
        }
        *(_DWORD *)&v9[v7] = v15 | 4;
        *(v8 - 1) = v16;
LABEL_6:
        v7 += 4;
        v8 += 4;
        if (v7 == 32)
        {
          *v3 = 1;
          return result;
        }
      }
    }
  }
  return result;
}

uint64_t apply_active_map(uint64_t result)
{
  _WORD *v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (_WORD *)(result + 176472);
  if (!*(_DWORD *)(result + 172972) || *(_BYTE *)(result + 172988))
  {
    v2 = (_DWORD *)(result + 740276);
    *(_QWORD *)(result + 740272) = 0x100000000;
    goto LABEL_4;
  }
  v2 = (_DWORD *)(result + 740276);
  if (*(_DWORD *)(result + 740276))
  {
    if (*(_DWORD *)(result + 740272))
    {
      v3 = *(_DWORD *)(result + 173008);
      v4 = *(_DWORD *)(result + 173016);
      if (v4 * v3 >= 1)
      {
        v5 = 0;
        v6 = *(_QWORD *)(result + 740216);
        v7 = *(_QWORD *)(result + 740280);
        do
        {
          if (!*(_BYTE *)(v6 + v5))
          {
            *(_BYTE *)(v6 + v5) = *(_BYTE *)(v7 + v5);
            v3 = *(_DWORD *)(result + 173008);
            v4 = *(_DWORD *)(result + 173016);
          }
          ++v5;
        }
        while (v5 < v3 * v4);
      }
      *v1 = 257;
      *(_BYTE *)(result + 176474) = 1;
      *(_DWORD *)(result + 176580) |= 0xAu;
      *(_WORD *)(result + 176546) = -63;
      goto LABEL_6;
    }
LABEL_4:
    *(_DWORD *)(result + 176580) &= 0xFFFFFFF5;
    if (*(_BYTE *)v1)
      *(_WORD *)(result + 176473) = 257;
LABEL_6:
    *v2 = 0;
  }
  return result;
}

uint64_t vp9_adapt_coef_probs(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int16 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  unint64_t v57;
  __int16 v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __int16 v68;
  unint64_t v69;
  __int16 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  __int16 v80;
  unint64_t v81;
  __int16 v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int16 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int16 v92;
  unint64_t v93;
  __int16 v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  __int16 v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __int16 v110;
  int v111;
  unint64_t v112;
  __int16 v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  __int16 v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  __int16 v123;
  unint64_t v124;
  __int16 v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  __int16 v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  __int16 v135;
  int v136;
  unint64_t v137;
  __int16 v138;
  int v139;
  unint64_t v140;
  unint64_t v141;
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  __int16 v148;
  unint64_t v149;
  __int16 v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  __int16 v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __int16 v160;
  unint64_t v161;
  __int16 v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  __int16 v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  __int16 v172;
  unint64_t v173;
  __int16 v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;

  if (*(_DWORD *)(result + 1276))
  {
    v1 = 112;
    if (!*(_BYTE *)(result + 1292))
    {
      if (*(_DWORD *)(result + 1272))
        v1 = 112;
      else
        v1 = 128;
    }
  }
  else
  {
    v1 = 112;
  }
  v2 = 0;
  v3 = 0;
  v4 = result + 5848;
  v5 = result + 14980;
  v6 = result + 6424;
  v7 = result + 15124;
  v8 = 174;
  v9 = 282;
  v176 = result;
  do
  {
    v178 = v3;
    v179 = v2;
    v10 = 0;
    v11 = *(_QWORD *)(result + 4912);
    v12 = *(_QWORD *)(result + 4904) + v2;
    v13 = 2044 * *(unsigned int *)(result + 4920);
    v177 = v8;
    v180 = v11 + v9 + v13;
    v181 = v11 + v8 + v13;
    v14 = 1;
    do
    {
      v15 = 0;
      v16 = v14;
      v17 = v12 + 216 * v10;
      v18 = v181 + 216 * v10;
      v19 = 1152 * v10;
      v20 = v4 + 1152 * v10;
      v21 = 288 * v10;
      v22 = v5 + 288 * v10;
      do
      {
        v23 = *(unsigned int *)(v22 - 24);
        if ((_DWORD)v23)
        {
          v24 = (((unint64_t)*(unsigned int *)(v20 - 96) << 8) + (v23 >> 1)) / v23;
          v25 = (((_DWORD)v24 == 0) | ((255 - v24) >> 23) | v24);
        }
        else
        {
          v25 = 128;
        }
        v26 = *(unsigned int *)(v20 - 108);
        v27 = *(unsigned int *)(v20 - 104);
        v28 = (*(_DWORD *)(v20 - 100) + v27);
        if (v23 >= 0x18)
          LODWORD(v23) = 24;
        *(_BYTE *)(v17 + v15 + 174) = (unsigned __int16)(v25
                                                       * ((178956971 * (unint64_t)(v23 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v23 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15)
                                                       + 128) >> 8;
        v29 = (v28 + v26);
        if ((_DWORD)v28 + (_DWORD)v26)
        {
          v30 = ((unint64_t)(v29 >> 1) + (v26 << 8)) / v29;
          v31 = (((_DWORD)v30 == 0) | ((255 - v30) >> 23) | v30);
        }
        else
        {
          v31 = 128;
        }
        if (v29 >= 0x18)
          LODWORD(v29) = 24;
        *(_BYTE *)(v17 + v15 + 175) = (unsigned __int16)(v31
                                                       * ((178956971 * (unint64_t)(v29 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v29 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 1)
                                                       + 128) >> 8;
        if ((_DWORD)v28)
        {
          v32 = ((unint64_t)(v28 >> 1) + (v27 << 8)) / v28;
          v33 = (((_DWORD)v32 == 0) | ((255 - v32) >> 23) | v32);
        }
        else
        {
          v33 = 128;
        }
        if (v28 >= 0x18)
          v34 = 24;
        else
          v34 = v28;
        *(_BYTE *)(v17 + v15 + 176) = (unsigned __int16)(v33
                                                       * ((178956971 * (unint64_t)(v34 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v34 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 2)
                                                       + 128) >> 8;
        v35 = *(unsigned int *)(v20 - 92);
        v36 = *(unsigned int *)(v20 - 88);
        v37 = *(unsigned int *)(v22 - 20);
        if ((_DWORD)v37)
        {
          v38 = (((unint64_t)*(unsigned int *)(v20 - 80) << 8) + (v37 >> 1)) / v37;
          v39 = (((_DWORD)v38 == 0) | ((255 - v38) >> 23) | v38);
        }
        else
        {
          v39 = 128;
        }
        v40 = (*(_DWORD *)(v20 - 84) + v36);
        if (v37 >= 0x18)
          LODWORD(v37) = 24;
        *(_BYTE *)(v17 + v15 + 177) = (unsigned __int16)(v39
                                                       * ((178956971 * (unint64_t)(v37 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v37 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 3)
                                                       + 128) >> 8;
        v41 = (v40 + v35);
        if ((_DWORD)v40 + (_DWORD)v35)
        {
          v42 = ((unint64_t)(v41 >> 1) + (v35 << 8)) / v41;
          v43 = (((_DWORD)v42 == 0) | ((255 - v42) >> 23) | v42);
        }
        else
        {
          v43 = 128;
        }
        if (v41 >= 0x18)
          LODWORD(v41) = 24;
        *(_BYTE *)(v17 + v15 + 178) = (unsigned __int16)(v43
                                                       * ((178956971 * (unint64_t)(v41 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v41 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 4)
                                                       + 128) >> 8;
        if ((_DWORD)v40)
        {
          v44 = ((unint64_t)(v40 >> 1) + (v36 << 8)) / v40;
          v45 = (((_DWORD)v44 == 0) | ((255 - v44) >> 23) | v44);
        }
        else
        {
          v45 = 128;
        }
        if (v40 >= 0x18)
          v46 = 24;
        else
          v46 = v40;
        *(_BYTE *)(v17 + v15 + 179) = (unsigned __int16)(v45
                                                       * ((178956971 * (unint64_t)(v46 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v46 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 5)
                                                       + 128) >> 8;
        v47 = *(unsigned int *)(v20 - 76);
        v48 = *(unsigned int *)(v20 - 72);
        v49 = *(unsigned int *)(v22 - 16);
        if ((_DWORD)v49)
        {
          v50 = (((unint64_t)*(unsigned int *)(v20 - 64) << 8) + (v49 >> 1)) / v49;
          v51 = (((_DWORD)v50 == 0) | ((255 - v50) >> 23) | v50);
        }
        else
        {
          v51 = 128;
        }
        v52 = (*(_DWORD *)(v20 - 68) + v48);
        if (v49 >= 0x18)
          LODWORD(v49) = 24;
        *(_BYTE *)(v17 + v15 + 180) = (unsigned __int16)(v51
                                                       * ((178956971 * (unint64_t)(v49 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v49 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 6)
                                                       + 128) >> 8;
        v53 = (v52 + v47);
        if ((_DWORD)v52 + (_DWORD)v47)
        {
          v54 = ((unint64_t)(v53 >> 1) + (v47 << 8)) / v53;
          v55 = (((_DWORD)v54 == 0) | ((255 - v54) >> 23) | v54);
        }
        else
        {
          v55 = 128;
        }
        if (v53 >= 0x18)
          v56 = 24;
        else
          v56 = v53;
        *(_BYTE *)(v17 + v15 + 181) = (unsigned __int16)(v55
                                                       * ((178956971 * (unint64_t)(v56 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v56 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 7)
                                                       + 128) >> 8;
        if ((_DWORD)v52)
        {
          v57 = ((unint64_t)(v52 >> 1) + (v48 << 8)) / v52;
          v58 = (((_DWORD)v57 == 0) | ((255 - v57) >> 23) | v57);
        }
        else
        {
          v58 = 128;
        }
        if (v52 >= 0x18)
          v59 = 24;
        else
          v59 = v52;
        *(_BYTE *)(v17 + v15 + 182) = (unsigned __int16)(v58
                                                       * ((178956971 * (unint64_t)(v59 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v59 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v18 + v15 + 8)
                                                       + 128) >> 8;
        if (v15)
        {
          v60 = *(unsigned int *)(v22 - 12);
          if ((_DWORD)v60)
          {
            v61 = (((unint64_t)*(unsigned int *)(v20 - 48) << 8) + (v60 >> 1)) / v60;
            v62 = (((_DWORD)v61 == 0) | ((255 - v61) >> 23) | v61);
          }
          else
          {
            v62 = 128;
          }
          v63 = *(unsigned int *)(v20 - 60);
          v64 = *(unsigned int *)(v20 - 56);
          v65 = (*(_DWORD *)(v20 - 52) + v64);
          if (v60 >= 0x18)
            LODWORD(v60) = 24;
          *(_BYTE *)(v17 + v15 + 183) = (unsigned __int16)(v62
                                                         * ((178956971 * (unint64_t)(v60 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v60 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 9)
                                                         + 128) >> 8;
          v66 = (v65 + v63);
          if ((_DWORD)v65 + (_DWORD)v63)
          {
            v67 = ((unint64_t)(v66 >> 1) + (v63 << 8)) / v66;
            v68 = (((_DWORD)v67 == 0) | ((255 - v67) >> 23) | v67);
          }
          else
          {
            v68 = 128;
          }
          if (v66 >= 0x18)
            LODWORD(v66) = 24;
          *(_BYTE *)(v17 + v15 + 184) = (unsigned __int16)(v68
                                                         * ((178956971 * (unint64_t)(v66 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v66 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 10)
                                                         + 128) >> 8;
          if ((_DWORD)v65)
          {
            v69 = ((unint64_t)(v65 >> 1) + (v64 << 8)) / v65;
            v70 = (((_DWORD)v69 == 0) | ((255 - v69) >> 23) | v69);
          }
          else
          {
            v70 = 128;
          }
          if (v65 >= 0x18)
            v71 = 24;
          else
            v71 = v65;
          *(_BYTE *)(v17 + v15 + 185) = (unsigned __int16)(v70
                                                         * ((178956971 * (unint64_t)(v71 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v71 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 11)
                                                         + 128) >> 8;
          v72 = *(unsigned int *)(v20 - 44);
          v73 = *(unsigned int *)(v20 - 40);
          v74 = *(unsigned int *)(v22 - 8);
          if ((_DWORD)v74)
          {
            v75 = (((unint64_t)*(unsigned int *)(v20 - 32) << 8) + (v74 >> 1)) / v74;
            v76 = (((_DWORD)v75 == 0) | ((255 - v75) >> 23) | v75);
          }
          else
          {
            v76 = 128;
          }
          v77 = (*(_DWORD *)(v20 - 36) + v73);
          if (v74 >= 0x18)
            LODWORD(v74) = 24;
          *(_BYTE *)(v17 + v15 + 186) = (unsigned __int16)(v76
                                                         * ((178956971 * (unint64_t)(v74 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v74 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 12)
                                                         + 128) >> 8;
          v78 = (v77 + v72);
          if ((_DWORD)v77 + (_DWORD)v72)
          {
            v79 = ((unint64_t)(v78 >> 1) + (v72 << 8)) / v78;
            v80 = (((_DWORD)v79 == 0) | ((255 - v79) >> 23) | v79);
          }
          else
          {
            v80 = 128;
          }
          if (v78 >= 0x18)
            LODWORD(v78) = 24;
          *(_BYTE *)(v17 + v15 + 187) = (unsigned __int16)(v80
                                                         * ((178956971 * (unint64_t)(v78 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v78 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 13)
                                                         + 128) >> 8;
          if ((_DWORD)v77)
          {
            v81 = ((unint64_t)(v77 >> 1) + (v73 << 8)) / v77;
            v82 = (((_DWORD)v81 == 0) | ((255 - v81) >> 23) | v81);
          }
          else
          {
            v82 = 128;
          }
          if (v77 >= 0x18)
            v83 = 24;
          else
            v83 = v77;
          *(_BYTE *)(v17 + v15 + 188) = (unsigned __int16)(v82
                                                         * ((178956971 * (unint64_t)(v83 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v83 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 14)
                                                         + 128) >> 8;
          v84 = *(unsigned int *)(v20 - 28);
          v85 = *(unsigned int *)(v20 - 24);
          v86 = *(unsigned int *)(v22 - 4);
          if ((_DWORD)v86)
          {
            v87 = (((unint64_t)*(unsigned int *)(v20 - 16) << 8) + (v86 >> 1)) / v86;
            v88 = (((_DWORD)v87 == 0) | ((255 - v87) >> 23) | v87);
          }
          else
          {
            v88 = 128;
          }
          v89 = (*(_DWORD *)(v20 - 20) + v85);
          if (v86 >= 0x18)
            LODWORD(v86) = 24;
          *(_BYTE *)(v17 + v15 + 189) = (unsigned __int16)(v88
                                                         * ((178956971 * (unint64_t)(v86 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v86 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 15)
                                                         + 128) >> 8;
          v90 = (v89 + v84);
          if ((_DWORD)v89 + (_DWORD)v84)
          {
            v91 = ((unint64_t)(v90 >> 1) + (v84 << 8)) / v90;
            v92 = (((_DWORD)v91 == 0) | ((255 - v91) >> 23) | v91);
          }
          else
          {
            v92 = 128;
          }
          if (v90 >= 0x18)
            LODWORD(v90) = 24;
          *(_BYTE *)(v17 + v15 + 190) = (unsigned __int16)(v92
                                                         * ((178956971 * (unint64_t)(v90 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v90 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 16)
                                                         + 128) >> 8;
          if ((_DWORD)v89)
          {
            v93 = ((unint64_t)(v89 >> 1) + (v85 << 8)) / v89;
            v94 = (((_DWORD)v93 == 0) | ((255 - v93) >> 23) | v93);
          }
          else
          {
            v94 = 128;
          }
          if (v89 >= 0x18)
            v95 = 24;
          else
            v95 = v89;
          *(_BYTE *)(v17 + v15 + 191) = (unsigned __int16)(v94
                                                         * ((178956971 * (unint64_t)(v95 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v95 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v18 + v15 + 17)
                                                         + 128) >> 8;
        }
        v15 += 18;
        v20 += 96;
        v22 += 24;
      }
      while (v15 != 108);
      v96 = 0;
      v97 = 216 * v10;
      v98 = v12 + 216 * v10;
      v99 = v180 + v97;
      v100 = v6 + v19;
      v101 = v7 + v21;
      do
      {
        v102 = *(unsigned int *)(v100 - 108);
        v103 = *(unsigned int *)(v100 - 104);
        v104 = *(unsigned int *)(v101 - 24);
        if ((_DWORD)v104)
        {
          v105 = (((unint64_t)*(unsigned int *)(v100 - 96) << 8) + (v104 >> 1)) / v104;
          v106 = (((_DWORD)v105 == 0) | ((255 - v105) >> 23) | v105);
        }
        else
        {
          v106 = 128;
        }
        v107 = (*(_DWORD *)(v100 - 100) + v103);
        if (v104 >= 0x18)
          LODWORD(v104) = 24;
        *(_BYTE *)(v98 + v96 + 282) = (unsigned __int16)(v106
                                                       * ((178956971 * (unint64_t)(v104 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v104 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96)
                                                       + 128) >> 8;
        v108 = (v107 + v102);
        if ((_DWORD)v107 + (_DWORD)v102)
        {
          v109 = ((unint64_t)(v108 >> 1) + (v102 << 8)) / v108;
          v110 = (((_DWORD)v109 == 0) | ((255 - v109) >> 23) | v109);
        }
        else
        {
          v110 = 128;
        }
        if (v108 >= 0x18)
          v111 = 24;
        else
          v111 = v108;
        *(_BYTE *)(v98 + v96 + 283) = (unsigned __int16)(v110
                                                       * ((178956971 * (unint64_t)(v111 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v111 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 1)
                                                       + 128) >> 8;
        if ((_DWORD)v107)
        {
          v112 = ((unint64_t)(v107 >> 1) + (v103 << 8)) / v107;
          v113 = (((_DWORD)v112 == 0) | ((255 - v112) >> 23) | v112);
        }
        else
        {
          v113 = 128;
        }
        if (v107 >= 0x18)
          v114 = 24;
        else
          v114 = v107;
        *(_BYTE *)(v98 + v96 + 284) = (unsigned __int16)(v113
                                                       * ((178956971 * (unint64_t)(v114 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v114 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 2)
                                                       + 128) >> 8;
        v115 = *(unsigned int *)(v100 - 92);
        v116 = *(unsigned int *)(v100 - 88);
        v117 = *(unsigned int *)(v101 - 20);
        if ((_DWORD)v117)
        {
          v118 = (((unint64_t)*(unsigned int *)(v100 - 80) << 8) + (v117 >> 1)) / v117;
          v119 = (((_DWORD)v118 == 0) | ((255 - v118) >> 23) | v118);
        }
        else
        {
          v119 = 128;
        }
        v120 = (*(_DWORD *)(v100 - 84) + v116);
        if (v117 >= 0x18)
          LODWORD(v117) = 24;
        *(_BYTE *)(v98 + v96 + 285) = (unsigned __int16)(v119
                                                       * ((178956971 * (unint64_t)(v117 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v117 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 3)
                                                       + 128) >> 8;
        v121 = (v120 + v115);
        if ((_DWORD)v120 + (_DWORD)v115)
        {
          v122 = ((unint64_t)(v121 >> 1) + (v115 << 8)) / v121;
          v123 = (((_DWORD)v122 == 0) | ((255 - v122) >> 23) | v122);
        }
        else
        {
          v123 = 128;
        }
        if (v121 >= 0x18)
          LODWORD(v121) = 24;
        *(_BYTE *)(v98 + v96 + 286) = (unsigned __int16)(v123
                                                       * ((178956971 * (unint64_t)(v121 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v121 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 4)
                                                       + 128) >> 8;
        if ((_DWORD)v120)
        {
          v124 = ((unint64_t)(v120 >> 1) + (v116 << 8)) / v120;
          v125 = (((_DWORD)v124 == 0) | ((255 - v124) >> 23) | v124);
        }
        else
        {
          v125 = 128;
        }
        if (v120 >= 0x18)
          v126 = 24;
        else
          v126 = v120;
        *(_BYTE *)(v98 + v96 + 287) = (unsigned __int16)(v125
                                                       * ((178956971 * (unint64_t)(v126 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v126 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 5)
                                                       + 128) >> 8;
        v127 = *(unsigned int *)(v100 - 76);
        v128 = *(unsigned int *)(v100 - 72);
        v129 = *(unsigned int *)(v101 - 16);
        if ((_DWORD)v129)
        {
          v130 = (((unint64_t)*(unsigned int *)(v100 - 64) << 8) + (v129 >> 1)) / v129;
          v131 = (((_DWORD)v130 == 0) | ((255 - v130) >> 23) | v130);
        }
        else
        {
          v131 = 128;
        }
        v132 = (*(_DWORD *)(v100 - 68) + v128);
        if (v129 >= 0x18)
          LODWORD(v129) = 24;
        *(_BYTE *)(v98 + v96 + 288) = (unsigned __int16)(v131
                                                       * ((178956971 * (unint64_t)(v129 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v129 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 6)
                                                       + 128) >> 8;
        v133 = (v132 + v127);
        if ((_DWORD)v132 + (_DWORD)v127)
        {
          v134 = ((unint64_t)(v133 >> 1) + (v127 << 8)) / v133;
          v135 = (((_DWORD)v134 == 0) | ((255 - v134) >> 23) | v134);
        }
        else
        {
          v135 = 128;
        }
        if (v133 >= 0x18)
          v136 = 24;
        else
          v136 = v133;
        *(_BYTE *)(v98 + v96 + 289) = (unsigned __int16)(v135
                                                       * ((178956971 * (unint64_t)(v136 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v136 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 7)
                                                       + 128) >> 8;
        if ((_DWORD)v132)
        {
          v137 = ((unint64_t)(v132 >> 1) + (v128 << 8)) / v132;
          v138 = (((_DWORD)v137 == 0) | ((255 - v137) >> 23) | v137);
        }
        else
        {
          v138 = 128;
        }
        if (v132 >= 0x18)
          v139 = 24;
        else
          v139 = v132;
        *(_BYTE *)(v98 + v96 + 290) = (unsigned __int16)(v138
                                                       * ((178956971 * (unint64_t)(v139 * v1)) >> 32)
                                                       + (256
                                                        - ((178956971 * (unint64_t)(v139 * v1)) >> 32))
                                                       * *(unsigned __int8 *)(v99 + v96 + 8)
                                                       + 128) >> 8;
        if (v96)
        {
          v140 = *(unsigned int *)(v101 - 12);
          if ((_DWORD)v140)
          {
            v141 = (((unint64_t)*(unsigned int *)(v100 - 48) << 8) + (v140 >> 1)) / v140;
            v142 = (((_DWORD)v141 == 0) | ((255 - v141) >> 23) | v141);
          }
          else
          {
            v142 = 128;
          }
          v143 = *(unsigned int *)(v100 - 60);
          v144 = *(unsigned int *)(v100 - 56);
          v145 = (*(_DWORD *)(v100 - 52) + v144);
          if (v140 >= 0x18)
            LODWORD(v140) = 24;
          *(_BYTE *)(v98 + v96 + 291) = (unsigned __int16)(v142
                                                         * ((178956971 * (unint64_t)(v140 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v140 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 9)
                                                         + 128) >> 8;
          v146 = (v145 + v143);
          if ((_DWORD)v145 + (_DWORD)v143)
          {
            v147 = ((unint64_t)(v146 >> 1) + (v143 << 8)) / v146;
            v148 = (((_DWORD)v147 == 0) | ((255 - v147) >> 23) | v147);
          }
          else
          {
            v148 = 128;
          }
          if (v146 >= 0x18)
            LODWORD(v146) = 24;
          *(_BYTE *)(v98 + v96 + 292) = (unsigned __int16)(v148
                                                         * ((178956971 * (unint64_t)(v146 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v146 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 10)
                                                         + 128) >> 8;
          if ((_DWORD)v145)
          {
            v149 = ((unint64_t)(v145 >> 1) + (v144 << 8)) / v145;
            v150 = (((_DWORD)v149 == 0) | ((255 - v149) >> 23) | v149);
          }
          else
          {
            v150 = 128;
          }
          if (v145 >= 0x18)
            v151 = 24;
          else
            v151 = v145;
          *(_BYTE *)(v98 + v96 + 293) = (unsigned __int16)(v150
                                                         * ((178956971 * (unint64_t)(v151 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v151 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 11)
                                                         + 128) >> 8;
          v152 = *(unsigned int *)(v100 - 44);
          v153 = *(unsigned int *)(v100 - 40);
          v154 = *(unsigned int *)(v101 - 8);
          if ((_DWORD)v154)
          {
            v155 = (((unint64_t)*(unsigned int *)(v100 - 32) << 8) + (v154 >> 1)) / v154;
            v156 = (((_DWORD)v155 == 0) | ((255 - v155) >> 23) | v155);
          }
          else
          {
            v156 = 128;
          }
          v157 = (*(_DWORD *)(v100 - 36) + v153);
          if (v154 >= 0x18)
            LODWORD(v154) = 24;
          *(_BYTE *)(v98 + v96 + 294) = (unsigned __int16)(v156
                                                         * ((178956971 * (unint64_t)(v154 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v154 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 12)
                                                         + 128) >> 8;
          v158 = (v157 + v152);
          if ((_DWORD)v157 + (_DWORD)v152)
          {
            v159 = ((unint64_t)(v158 >> 1) + (v152 << 8)) / v158;
            v160 = (((_DWORD)v159 == 0) | ((255 - v159) >> 23) | v159);
          }
          else
          {
            v160 = 128;
          }
          if (v158 >= 0x18)
            LODWORD(v158) = 24;
          *(_BYTE *)(v98 + v96 + 295) = (unsigned __int16)(v160
                                                         * ((178956971 * (unint64_t)(v158 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v158 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 13)
                                                         + 128) >> 8;
          if ((_DWORD)v157)
          {
            v161 = ((unint64_t)(v157 >> 1) + (v153 << 8)) / v157;
            v162 = (((_DWORD)v161 == 0) | ((255 - v161) >> 23) | v161);
          }
          else
          {
            v162 = 128;
          }
          if (v157 >= 0x18)
            v163 = 24;
          else
            v163 = v157;
          *(_BYTE *)(v98 + v96 + 296) = (unsigned __int16)(v162
                                                         * ((178956971 * (unint64_t)(v163 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v163 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 14)
                                                         + 128) >> 8;
          v164 = *(unsigned int *)(v100 - 28);
          v165 = *(unsigned int *)(v100 - 24);
          v166 = *(unsigned int *)(v101 - 4);
          if ((_DWORD)v166)
          {
            v167 = (((unint64_t)*(unsigned int *)(v100 - 16) << 8) + (v166 >> 1)) / v166;
            v168 = (((_DWORD)v167 == 0) | ((255 - v167) >> 23) | v167);
          }
          else
          {
            v168 = 128;
          }
          v169 = (*(_DWORD *)(v100 - 20) + v165);
          if (v166 >= 0x18)
            LODWORD(v166) = 24;
          *(_BYTE *)(v98 + v96 + 297) = (unsigned __int16)(v168
                                                         * ((178956971 * (unint64_t)(v166 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v166 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 15)
                                                         + 128) >> 8;
          v170 = (v169 + v164);
          if ((_DWORD)v169 + (_DWORD)v164)
          {
            v171 = ((unint64_t)(v170 >> 1) + (v164 << 8)) / v170;
            v172 = (((_DWORD)v171 == 0) | ((255 - v171) >> 23) | v171);
          }
          else
          {
            v172 = 128;
          }
          if (v170 >= 0x18)
            LODWORD(v170) = 24;
          *(_BYTE *)(v98 + v96 + 298) = (unsigned __int16)(v172
                                                         * ((178956971 * (unint64_t)(v170 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v170 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 16)
                                                         + 128) >> 8;
          if ((_DWORD)v169)
          {
            v173 = ((unint64_t)(v169 >> 1) + (v165 << 8)) / v169;
            v174 = (((_DWORD)v173 == 0) | ((255 - v173) >> 23) | v173);
          }
          else
          {
            v174 = 128;
          }
          if (v169 >= 0x18)
            v175 = 24;
          else
            v175 = v169;
          *(_BYTE *)(v98 + v96 + 299) = (unsigned __int16)(v174
                                                         * ((178956971 * (unint64_t)(v175 * v1)) >> 32)
                                                         + (256
                                                          - ((178956971 * (unint64_t)(v175 * v1)) >> 32))
                                                         * *(unsigned __int8 *)(v99 + v96 + 17)
                                                         + 128) >> 8;
        }
        v96 += 18;
        v100 += 96;
        v101 += 24;
      }
      while (v96 != 108);
      v14 = 0;
      v10 = 1;
    }
    while ((v16 & 1) != 0);
    v3 = v178 + 1;
    v2 = v179 + 432;
    v8 = v177 + 432;
    v4 += 2304;
    v5 += 576;
    v9 += 432;
    v6 += 2304;
    v7 += 576;
    result = v176;
  }
  while (v178 != 3);
  return result;
}

unint64_t vp9_adapt_mode_probs(uint64_t a1)
{
  unsigned int *v2;
  _BYTE *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  unsigned int v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  unsigned int v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unint64_t v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unsigned int v141;
  unint64_t v142;
  unsigned __int8 *v143;
  unsigned int v144;
  unsigned int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  unsigned int v156;
  unsigned int v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t v164;
  unsigned int v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unsigned int v170;
  unint64_t v171;
  unsigned int v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned int v182;
  unint64_t v183;
  unsigned int v184;
  unint64_t v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unint64_t v191;
  unsigned int v192;
  uint64_t v193;
  unint64_t v194;
  unsigned int v195;
  unint64_t v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  unsigned int v200;
  unint64_t v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  unsigned int v205;
  unint64_t v206;

  v2 = (unsigned int *)(a1 + 17420);
  v3 = *(_BYTE **)(a1 + 4904);
  v4 = *(_QWORD *)(a1 + 4912);
  v5 = *(_DWORD *)(a1 + 4920);
  v6 = v4 + 2044 * v5;
  v7 = *(unsigned __int8 *)(v6 + 1931);
  v8 = *(unsigned int *)(a1 + 17420);
  v9 = (*(_DWORD *)(a1 + 17424) + v8);
  if ((_DWORD)v9)
  {
    if (v9 >= 0x14)
      v10 = 20;
    else
      v10 = *(_DWORD *)(a1 + 17424) + v8;
    v11 = ((unint64_t)(v9 >> 1) + (v8 << 8)) / v9;
    v7 = ((((_DWORD)v11 == 0) | ((255 - v11) >> 23) | v11)
        * count_to_update_factor_0[v10]
        + (256 - count_to_update_factor_0[v10]) * v7
        + 128) >> 8;
  }
  v3[1931] = v7;
  v12 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1932);
  v13 = *(unsigned int *)(a1 + 17428);
  v14 = (*(_DWORD *)(a1 + 17432) + v13);
  if ((_DWORD)v14)
  {
    if (v14 >= 0x14)
      v15 = 20;
    else
      v15 = *(_DWORD *)(a1 + 17432) + v13;
    v16 = ((unint64_t)(v14 >> 1) + (v13 << 8)) / v14;
    v12 = ((((_DWORD)v16 == 0) | ((255 - v16) >> 23) | v16)
         * count_to_update_factor_0[v15]
         + (256 - count_to_update_factor_0[v15]) * v12
         + 128) >> 8;
  }
  v3[1932] = v12;
  v17 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1933);
  v18 = *(unsigned int *)(a1 + 17436);
  v19 = (*(_DWORD *)(a1 + 17440) + v18);
  if ((_DWORD)v19)
  {
    if (v19 >= 0x14)
      v20 = 20;
    else
      v20 = *(_DWORD *)(a1 + 17440) + v18;
    v21 = ((unint64_t)(v19 >> 1) + (v18 << 8)) / v19;
    v17 = ((((_DWORD)v21 == 0) | ((255 - v21) >> 23) | v21)
         * count_to_update_factor_0[v20]
         + (256 - count_to_update_factor_0[v20]) * v17
         + 128) >> 8;
  }
  v3[1933] = v17;
  v22 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1934);
  v23 = *(unsigned int *)(a1 + 17444);
  v24 = (*(_DWORD *)(a1 + 17448) + v23);
  if ((_DWORD)v24)
  {
    if (v24 >= 0x14)
      v25 = 20;
    else
      v25 = *(_DWORD *)(a1 + 17448) + v23;
    v26 = ((unint64_t)(v24 >> 1) + (v23 << 8)) / v24;
    v22 = ((((_DWORD)v26 == 0) | ((255 - v26) >> 23) | v26)
         * count_to_update_factor_0[v25]
         + (256 - count_to_update_factor_0[v25]) * v22
         + 128) >> 8;
  }
  v3[1934] = v22;
  v27 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1935);
  v28 = *(unsigned int *)(a1 + 17452);
  v29 = (*(_DWORD *)(a1 + 17456) + v28);
  if ((_DWORD)v29)
  {
    if (v29 >= 0x14)
      v30 = 20;
    else
      v30 = *(_DWORD *)(a1 + 17456) + v28;
    v31 = ((unint64_t)(v29 >> 1) + (v28 << 8)) / v29;
    v27 = ((((_DWORD)v31 == 0) | ((255 - v31) >> 23) | v31)
         * count_to_update_factor_0[v30]
         + (256 - count_to_update_factor_0[v30]) * v27
         + 128) >> 8;
  }
  v3[1935] = v27;
  v32 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1936);
  v33 = *(unsigned int *)(a1 + 17460);
  v34 = (*(_DWORD *)(a1 + 17464) + v33);
  if ((_DWORD)v34)
  {
    if (v34 >= 0x14)
      v35 = 20;
    else
      v35 = *(_DWORD *)(a1 + 17464) + v33;
    v36 = ((unint64_t)(v34 >> 1) + (v33 << 8)) / v34;
    v32 = ((((_DWORD)v36 == 0) | ((255 - v36) >> 23) | v36)
         * count_to_update_factor_0[v35]
         + (256 - count_to_update_factor_0[v35]) * v32
         + 128) >> 8;
  }
  v3[1936] = v32;
  v37 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1937);
  v38 = *(unsigned int *)(a1 + 17468);
  v39 = (*(_DWORD *)(a1 + 17472) + v38);
  if ((_DWORD)v39)
  {
    if (v39 >= 0x14)
      v40 = 20;
    else
      v40 = *(_DWORD *)(a1 + 17472) + v38;
    v41 = ((unint64_t)(v39 >> 1) + (v38 << 8)) / v39;
    v37 = ((((_DWORD)v41 == 0) | ((255 - v41) >> 23) | v41)
         * count_to_update_factor_0[v40]
         + (256 - count_to_update_factor_0[v40]) * v37
         + 128) >> 8;
  }
  v3[1937] = v37;
  v42 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1938);
  v43 = *(unsigned int *)(a1 + 17476);
  v44 = (*(_DWORD *)(a1 + 17480) + v43);
  if ((_DWORD)v44)
  {
    if (v44 >= 0x14)
      v45 = 20;
    else
      v45 = *(_DWORD *)(a1 + 17480) + v43;
    v46 = ((unint64_t)(v44 >> 1) + (v43 << 8)) / v44;
    v42 = ((((_DWORD)v46 == 0) | ((255 - v46) >> 23) | v46)
         * count_to_update_factor_0[v45]
         + (256 - count_to_update_factor_0[v45]) * v42
         + 128) >> 8;
  }
  v3[1938] = v42;
  v47 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1939);
  v48 = *(unsigned int *)(a1 + 17484);
  v49 = (*(_DWORD *)(a1 + 17488) + v48);
  if ((_DWORD)v49)
  {
    if (v49 >= 0x14)
      v50 = 20;
    else
      v50 = *(_DWORD *)(a1 + 17488) + v48;
    v51 = ((unint64_t)(v49 >> 1) + (v48 << 8)) / v49;
    v47 = ((((_DWORD)v51 == 0) | ((255 - v51) >> 23) | v51)
         * count_to_update_factor_0[v50]
         + (256 - count_to_update_factor_0[v50]) * v47
         + 128) >> 8;
  }
  v3[1939] = v47;
  v52 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1950);
  v53 = *(unsigned int *)(a1 + 17572);
  v54 = (*(_DWORD *)(a1 + 17576) + v53);
  if ((_DWORD)v54)
  {
    if (v54 >= 0x14)
      v55 = 20;
    else
      v55 = *(_DWORD *)(a1 + 17576) + v53;
    v56 = ((unint64_t)(v54 >> 1) + (v53 << 8)) / v54;
    v52 = ((((_DWORD)v56 == 0) | ((255 - v56) >> 23) | v56)
         * count_to_update_factor_0[v55]
         + (256 - count_to_update_factor_0[v55]) * v52
         + 128) >> 8;
  }
  v3[1950] = v52;
  v57 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1951);
  v58 = *(unsigned int *)(a1 + 17580);
  v59 = (*(_DWORD *)(a1 + 17584) + v58);
  if ((_DWORD)v59)
  {
    if (v59 >= 0x14)
      v60 = 20;
    else
      v60 = *(_DWORD *)(a1 + 17584) + v58;
    v61 = ((unint64_t)(v59 >> 1) + (v58 << 8)) / v59;
    v57 = ((((_DWORD)v61 == 0) | ((255 - v61) >> 23) | v61)
         * count_to_update_factor_0[v60]
         + (256 - count_to_update_factor_0[v60]) * v57
         + 128) >> 8;
  }
  v3[1951] = v57;
  v62 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1952);
  v63 = *(unsigned int *)(a1 + 17588);
  v64 = (*(_DWORD *)(a1 + 17592) + v63);
  if ((_DWORD)v64)
  {
    if (v64 >= 0x14)
      v65 = 20;
    else
      v65 = *(_DWORD *)(a1 + 17592) + v63;
    v66 = ((unint64_t)(v64 >> 1) + (v63 << 8)) / v64;
    v62 = ((((_DWORD)v66 == 0) | ((255 - v66) >> 23) | v66)
         * count_to_update_factor_0[v65]
         + (256 - count_to_update_factor_0[v65]) * v62
         + 128) >> 8;
  }
  v3[1952] = v62;
  v67 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1953);
  v68 = *(unsigned int *)(a1 + 17596);
  v69 = (*(_DWORD *)(a1 + 17600) + v68);
  if ((_DWORD)v69)
  {
    if (v69 >= 0x14)
      v70 = 20;
    else
      v70 = *(_DWORD *)(a1 + 17600) + v68;
    v71 = ((unint64_t)(v69 >> 1) + (v68 << 8)) / v69;
    v67 = ((((_DWORD)v71 == 0) | ((255 - v71) >> 23) | v71)
         * count_to_update_factor_0[v70]
         + (256 - count_to_update_factor_0[v70]) * v67
         + 128) >> 8;
  }
  v3[1953] = v67;
  v72 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1954);
  v73 = *(unsigned int *)(a1 + 17604);
  v74 = (*(_DWORD *)(a1 + 17608) + v73);
  if ((_DWORD)v74)
  {
    if (v74 >= 0x14)
      v75 = 20;
    else
      v75 = *(_DWORD *)(a1 + 17608) + v73;
    v76 = ((unint64_t)(v74 >> 1) + (v73 << 8)) / v74;
    v72 = ((((_DWORD)v76 == 0) | ((255 - v76) >> 23) | v76)
         * count_to_update_factor_0[v75]
         + (256 - count_to_update_factor_0[v75]) * v72
         + 128) >> 8;
  }
  v3[1954] = v72;
  v77 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1940);
  v78 = *(unsigned int *)(a1 + 17492);
  v79 = (*(_DWORD *)(a1 + 17496) + v78);
  if ((_DWORD)v79)
  {
    if (v79 >= 0x14)
      v80 = 20;
    else
      v80 = *(_DWORD *)(a1 + 17496) + v78;
    v81 = ((unint64_t)(v79 >> 1) + (v78 << 8)) / v79;
    v77 = ((((_DWORD)v81 == 0) | ((255 - v81) >> 23) | v81)
         * count_to_update_factor_0[v80]
         + (256 - count_to_update_factor_0[v80]) * v77
         + 128) >> 8;
  }
  v3[1940] = v77;
  v82 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1941);
  v83 = *(unsigned int *)(a1 + 17500);
  v84 = (*(_DWORD *)(a1 + 17504) + v83);
  if ((_DWORD)v84)
  {
    if (v84 >= 0x14)
      v85 = 20;
    else
      v85 = *(_DWORD *)(a1 + 17504) + v83;
    v86 = ((unint64_t)(v84 >> 1) + (v83 << 8)) / v84;
    v82 = ((((_DWORD)v86 == 0) | ((255 - v86) >> 23) | v86)
         * count_to_update_factor_0[v85]
         + (256 - count_to_update_factor_0[v85]) * v82
         + 128) >> 8;
  }
  v3[1941] = v82;
  v87 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1942);
  v88 = *(unsigned int *)(a1 + 17508);
  v89 = (*(_DWORD *)(a1 + 17512) + v88);
  if ((_DWORD)v89)
  {
    if (v89 >= 0x14)
      v90 = 20;
    else
      v90 = *(_DWORD *)(a1 + 17512) + v88;
    v91 = ((unint64_t)(v89 >> 1) + (v88 << 8)) / v89;
    v87 = ((((_DWORD)v91 == 0) | ((255 - v91) >> 23) | v91)
         * count_to_update_factor_0[v90]
         + (256 - count_to_update_factor_0[v90]) * v87
         + 128) >> 8;
  }
  v3[1942] = v87;
  v92 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1943);
  v93 = *(unsigned int *)(a1 + 17516);
  v94 = (*(_DWORD *)(a1 + 17520) + v93);
  if ((_DWORD)v94)
  {
    if (v94 >= 0x14)
      v95 = 20;
    else
      v95 = *(_DWORD *)(a1 + 17520) + v93;
    v96 = ((unint64_t)(v94 >> 1) + (v93 << 8)) / v94;
    v92 = ((((_DWORD)v96 == 0) | ((255 - v96) >> 23) | v96)
         * count_to_update_factor_0[v95]
         + (256 - count_to_update_factor_0[v95]) * v92
         + 128) >> 8;
  }
  v3[1943] = v92;
  v97 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1944);
  v98 = *(unsigned int *)(a1 + 17524);
  v99 = (*(_DWORD *)(a1 + 17528) + v98);
  if ((_DWORD)v99)
  {
    if (v99 >= 0x14)
      v100 = 20;
    else
      v100 = *(_DWORD *)(a1 + 17528) + v98;
    v101 = ((unint64_t)(v99 >> 1) + (v98 << 8)) / v99;
    v97 = ((((_DWORD)v101 == 0) | ((255 - v101) >> 23) | v101)
         * count_to_update_factor_0[v100]
         + (256 - count_to_update_factor_0[v100]) * v97
         + 128) >> 8;
  }
  v3[1944] = v97;
  v102 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1945);
  v103 = *(unsigned int *)(a1 + 17532);
  v104 = (*(_DWORD *)(a1 + 17536) + v103);
  if ((_DWORD)v104)
  {
    if (v104 >= 0x14)
      v105 = 20;
    else
      v105 = *(_DWORD *)(a1 + 17536) + v103;
    v106 = ((unint64_t)(v104 >> 1) + (v103 << 8)) / v104;
    v102 = ((((_DWORD)v106 == 0) | ((255 - v106) >> 23) | v106)
          * count_to_update_factor_0[v105]
          + (256 - count_to_update_factor_0[v105]) * v102
          + 128) >> 8;
  }
  v3[1945] = v102;
  v107 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1946);
  v108 = *(unsigned int *)(a1 + 17540);
  v109 = (*(_DWORD *)(a1 + 17544) + v108);
  if ((_DWORD)v109)
  {
    if (v109 >= 0x14)
      v110 = 20;
    else
      v110 = *(_DWORD *)(a1 + 17544) + v108;
    v111 = ((unint64_t)(v109 >> 1) + (v108 << 8)) / v109;
    v107 = ((((_DWORD)v111 == 0) | ((255 - v111) >> 23) | v111)
          * count_to_update_factor_0[v110]
          + (256 - count_to_update_factor_0[v110]) * v107
          + 128) >> 8;
  }
  v3[1946] = v107;
  v112 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1947);
  v113 = *(unsigned int *)(a1 + 17548);
  v114 = (*(_DWORD *)(a1 + 17552) + v113);
  if ((_DWORD)v114)
  {
    if (v114 >= 0x14)
      v115 = 20;
    else
      v115 = *(_DWORD *)(a1 + 17552) + v113;
    v116 = ((unint64_t)(v114 >> 1) + (v113 << 8)) / v114;
    v112 = ((((_DWORD)v116 == 0) | ((255 - v116) >> 23) | v116)
          * count_to_update_factor_0[v115]
          + (256 - count_to_update_factor_0[v115]) * v112
          + 128) >> 8;
  }
  v3[1947] = v112;
  v117 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1948);
  v118 = *(unsigned int *)(a1 + 17556);
  v119 = (*(_DWORD *)(a1 + 17560) + v118);
  if ((_DWORD)v119)
  {
    if (v119 >= 0x14)
      v120 = 20;
    else
      v120 = *(_DWORD *)(a1 + 17560) + v118;
    v121 = ((unint64_t)(v119 >> 1) + (v118 << 8)) / v119;
    v117 = ((((_DWORD)v121 == 0) | ((255 - v121) >> 23) | v121)
          * count_to_update_factor_0[v120]
          + (256 - count_to_update_factor_0[v120]) * v117
          + 128) >> 8;
  }
  v3[1948] = v117;
  v122 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1949);
  v123 = *(unsigned int *)(a1 + 17564);
  v124 = (*(_DWORD *)(a1 + 17568) + v123);
  if ((_DWORD)v124)
  {
    if (v124 >= 0x14)
      v125 = 20;
    else
      v125 = *(_DWORD *)(a1 + 17568) + v123;
    v126 = ((unint64_t)(v124 >> 1) + (v123 << 8)) / v124;
    v122 = ((((_DWORD)v126 == 0) | ((255 - v126) >> 23) | v126)
          * count_to_update_factor_0[v125]
          + (256 - count_to_update_factor_0[v125]) * v122
          + 128) >> 8;
  }
  v3[1949] = v122;
  v127 = v4 + 2044 * v5;
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1910, a1 + 17308, (uint64_t)(v3 + 1910));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1913, a1 + 17324, (uint64_t)(v3 + 1913));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1916, a1 + 17340, (uint64_t)(v3 + 1916));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1919, a1 + 17356, (uint64_t)(v3 + 1919));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1922, a1 + 17372, (uint64_t)(v3 + 1922));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1925, a1 + 17388, (uint64_t)(v3 + 1925));
  tree_merge_probs_impl(0, (uint64_t)vp9_inter_mode_tree, v127 + 1928, a1 + 17404, (uint64_t)(v3 + 1928));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127, a1 + 4924, (uint64_t)v3);
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v6 + 9, a1 + 4964, (uint64_t)(v3 + 9));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v6 + 18, a1 + 5004, (uint64_t)(v3 + 18));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v6 + 27, a1 + 5044, (uint64_t)(v3 + 27));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 36, a1 + 5084, (uint64_t)(v3 + 36));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 45, a1 + 5124, (uint64_t)(v3 + 45));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 54, a1 + 5164, (uint64_t)(v3 + 54));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 63, a1 + 5204, (uint64_t)(v3 + 63));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 72, a1 + 5244, (uint64_t)(v3 + 72));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 81, a1 + 5284, (uint64_t)(v3 + 81));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 90, a1 + 5324, (uint64_t)(v3 + 90));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 99, a1 + 5364, (uint64_t)(v3 + 99));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 108, a1 + 5404, (uint64_t)(v3 + 108));
  tree_merge_probs_impl(0, (uint64_t)vp9_intra_mode_tree, v127 + 117, a1 + 5444, (uint64_t)(v3 + 117));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 126, a1 + 5484, (uint64_t)(v3 + 126));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 129, a1 + 5500, (uint64_t)(v3 + 129));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 132, a1 + 5516, (uint64_t)(v3 + 132));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 135, a1 + 5532, (uint64_t)(v3 + 135));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 138, a1 + 5548, (uint64_t)(v3 + 138));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 141, a1 + 5564, (uint64_t)(v3 + 141));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 144, a1 + 5580, (uint64_t)(v3 + 144));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 147, a1 + 5596, (uint64_t)(v3 + 147));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 150, a1 + 5612, (uint64_t)(v3 + 150));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 153, a1 + 5628, (uint64_t)(v3 + 153));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 156, a1 + 5644, (uint64_t)(v3 + 156));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 159, a1 + 5660, (uint64_t)(v3 + 159));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 162, a1 + 5676, (uint64_t)(v3 + 162));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 165, a1 + 5692, (uint64_t)(v3 + 165));
  tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 168, a1 + 5708, (uint64_t)(v3 + 168));
  result = tree_merge_probs_impl(0, (uint64_t)vp9_partition_tree, v127 + 171, a1 + 5724, (uint64_t)(v3 + 171));
  if (*(_BYTE *)(a1 + 1556) == 4)
  {
    v129 = v4 + 2044 * v5;
    tree_merge_probs_impl(0, (uint64_t)vp9_switchable_interp_tree, v129 + 1902, a1 + 17260, (uint64_t)(v3 + 1902));
    tree_merge_probs_impl(0, (uint64_t)vp9_switchable_interp_tree, v129 + 1904, a1 + 17272, (uint64_t)(v3 + 1904));
    tree_merge_probs_impl(0, (uint64_t)vp9_switchable_interp_tree, v129 + 1906, a1 + 17284, (uint64_t)(v3 + 1906));
    result = tree_merge_probs_impl(0, (uint64_t)vp9_switchable_interp_tree, v129 + 1908, a1 + 17296, (uint64_t)(v3 + 1908));
  }
  if (*(_DWORD *)(a1 + 1328) == 4)
  {
    v130 = v4 + 2044 * v5;
    v131 = v2[62];
    v132 = *(unsigned __int8 *)(v130 + 1965);
    v133 = v2[63] + v131;
    if ((_DWORD)v133)
    {
      if (v133 >= 0x14)
        v134 = 20;
      else
        v134 = v2[63] + v131;
      v135 = ((unint64_t)(v133 >> 1) + (v131 << 8)) / v133;
      v132 = ((((_DWORD)v135 == 0) | ((255 - v135) >> 23) | v135)
            * count_to_update_factor_0[v134]
            + (256 - count_to_update_factor_0[v134]) * v132
            + 128) >> 8;
    }
    v3[1965] = v132;
    v137 = v2[56];
    v136 = v2[57];
    v138 = v2[58] + v136;
    v139 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1961);
    v140 = (v138 + v137);
    if ((_DWORD)v138 + (_DWORD)v137)
    {
      if (v140 >= 0x14)
        v141 = 20;
      else
        v141 = v138 + v137;
      v142 = ((unint64_t)(v140 >> 1) + (v137 << 8)) / v140;
      v139 = ((((_DWORD)v142 == 0) | ((255 - v142) >> 23) | v142)
            * count_to_update_factor_0[v141]
            + (256 - count_to_update_factor_0[v141]) * v139
            + 128) >> 8;
    }
    v143 = (unsigned __int8 *)(v130 + 1955);
    v3[1961] = v139;
    v144 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1962);
    if ((_DWORD)v138)
    {
      if (v138 >= 0x14)
        v145 = 20;
      else
        v145 = v138;
      v146 = ((unint64_t)(v138 >> 1) + (v136 << 8)) / v138;
      v144 = ((((_DWORD)v146 == 0) | ((255 - v146) >> 23) | v146)
            * count_to_update_factor_0[v145]
            + (256 - count_to_update_factor_0[v145]) * v144
            + 128) >> 8;
    }
    v3[1962] = v144;
    v148 = v2[48];
    v147 = v2[49];
    v149 = v2[50];
    v150 = v2[51] + v149;
    v151 = (v150 + v147);
    v152 = *v143;
    v153 = (v151 + v148);
    if ((_DWORD)v151 + (_DWORD)v148)
    {
      if (v153 >= 0x14)
        v154 = 20;
      else
        v154 = v151 + v148;
      v155 = ((unint64_t)(v153 >> 1) + (v148 << 8)) / v153;
      v152 = ((((_DWORD)v155 == 0) | ((255 - v155) >> 23) | v155)
            * count_to_update_factor_0[v154]
            + (256 - count_to_update_factor_0[v154]) * v152
            + 128) >> 8;
    }
    v3[1955] = v152;
    v156 = v143[1];
    if ((_DWORD)v151)
    {
      if (v151 >= 0x14)
        v157 = 20;
      else
        v157 = v150 + v147;
      v158 = ((unint64_t)(v151 >> 1) + (v147 << 8)) / v151;
      v156 = ((((_DWORD)v158 == 0) | ((255 - v158) >> 23) | v158)
            * count_to_update_factor_0[v157]
            + (256 - count_to_update_factor_0[v157]) * v156
            + 128) >> 8;
    }
    v3[1956] = v156;
    v159 = v143[2];
    if ((_DWORD)v150)
    {
      if (v150 >= 0x14)
        v160 = 20;
      else
        v160 = v150;
      v161 = ((unint64_t)(v150 >> 1) + (v149 << 8)) / v150;
      v159 = ((((_DWORD)v161 == 0) | ((255 - v161) >> 23) | v161)
            * count_to_update_factor_0[v160]
            + (256 - count_to_update_factor_0[v160]) * v159
            + 128) >> 8;
    }
    v3[1957] = v159;
    v162 = v2[64];
    v163 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1966);
    v164 = v2[65] + v162;
    if ((_DWORD)v164)
    {
      if (v164 >= 0x14)
        v165 = 20;
      else
        v165 = v2[65] + v162;
      v166 = ((unint64_t)(v164 >> 1) + (v162 << 8)) / v164;
      v163 = ((((_DWORD)v166 == 0) | ((255 - v166) >> 23) | v166)
            * count_to_update_factor_0[v165]
            + (256 - count_to_update_factor_0[v165]) * v163
            + 128) >> 8;
    }
    v3[1966] = v163;
    v168 = v2[59];
    v167 = v2[60];
    v169 = v2[61] + v167;
    v170 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1963);
    v171 = (v169 + v168);
    if ((_DWORD)v169 + (_DWORD)v168)
    {
      if (v171 >= 0x14)
        v172 = 20;
      else
        v172 = v169 + v168;
      v173 = ((unint64_t)(v171 >> 1) + (v168 << 8)) / v171;
      v170 = ((((_DWORD)v173 == 0) | ((255 - v173) >> 23) | v173)
            * count_to_update_factor_0[v172]
            + (256 - count_to_update_factor_0[v172]) * v170
            + 128) >> 8;
    }
    v3[1963] = v170;
    v174 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1964);
    if ((_DWORD)v169)
    {
      if (v169 >= 0x14)
        v175 = 20;
      else
        v175 = v169;
      v176 = ((unint64_t)(v169 >> 1) + (v167 << 8)) / v169;
      v174 = ((((_DWORD)v176 == 0) | ((255 - v176) >> 23) | v176)
            * count_to_update_factor_0[v175]
            + (256 - count_to_update_factor_0[v175]) * v174
            + 128) >> 8;
    }
    v3[1964] = v174;
    v178 = v2[52];
    v177 = v2[53];
    v179 = v2[54];
    v180 = v2[55] + v179;
    v181 = (v180 + v177);
    v182 = v143[3];
    v183 = (v181 + v178);
    if ((_DWORD)v181 + (_DWORD)v178)
    {
      if (v183 >= 0x14)
        v184 = 20;
      else
        v184 = v181 + v178;
      v185 = ((unint64_t)(v183 >> 1) + (v178 << 8)) / v183;
      v182 = ((((_DWORD)v185 == 0) | ((255 - v185) >> 23) | v185)
            * count_to_update_factor_0[v184]
            + (256 - count_to_update_factor_0[v184]) * v182
            + 128) >> 8;
    }
    v3[1958] = v182;
    v186 = v143[4];
    if ((_DWORD)v181)
    {
      if (v181 >= 0x14)
        v187 = 20;
      else
        v187 = v180 + v177;
      v188 = ((unint64_t)(v181 >> 1) + (v177 << 8)) / v181;
      v186 = ((((_DWORD)v188 == 0) | ((255 - v188) >> 23) | v188)
            * count_to_update_factor_0[v187]
            + (256 - count_to_update_factor_0[v187]) * v186
            + 128) >> 8;
    }
    v3[1959] = v186;
    v189 = v143[5];
    if ((_DWORD)v180)
    {
      if (v180 >= 0x14)
        v190 = 20;
      else
        v190 = v180;
      v191 = ((unint64_t)(v180 >> 1) + (v179 << 8)) / v180;
      v189 = ((((_DWORD)v191 == 0) | ((255 - v191) >> 23) | v191)
            * count_to_update_factor_0[v190]
            + (256 - count_to_update_factor_0[v190]) * v189
            + 128) >> 8;
    }
    v3[1960] = v189;
  }
  v192 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1967);
  v193 = v2[70];
  v194 = v2[71] + v193;
  if ((_DWORD)v194)
  {
    if (v194 >= 0x14)
      v195 = 20;
    else
      v195 = v2[71] + v193;
    v196 = ((unint64_t)(v194 >> 1) + (v193 << 8)) / v194;
    v192 = ((((_DWORD)v196 == 0) | ((255 - v196) >> 23) | v196)
          * count_to_update_factor_0[v195]
          + (256 - count_to_update_factor_0[v195]) * v192
          + 128) >> 8;
  }
  v3[1967] = v192;
  v197 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1968);
  v198 = v2[72];
  v199 = v2[73] + v198;
  if ((_DWORD)v199)
  {
    if (v199 >= 0x14)
      v200 = 20;
    else
      v200 = v2[73] + v198;
    v201 = ((unint64_t)(v199 >> 1) + (v198 << 8)) / v199;
    v197 = ((((_DWORD)v201 == 0) | ((255 - v201) >> 23) | v201)
          * count_to_update_factor_0[v200]
          + (256 - count_to_update_factor_0[v200]) * v197
          + 128) >> 8;
  }
  v3[1968] = v197;
  v202 = *(unsigned __int8 *)(v4 + 2044 * v5 + 1969);
  v203 = v2[74];
  v204 = v2[75] + v203;
  if ((_DWORD)v204)
  {
    if (v204 >= 0x14)
      v205 = 20;
    else
      v205 = v2[75] + v203;
    v206 = ((unint64_t)(v204 >> 1) + (v203 << 8)) / v204;
    v202 = ((((_DWORD)v206 == 0) | ((255 - v206) >> 23) | v206)
          * count_to_update_factor_0[v205]
          + (256 - count_to_update_factor_0[v205]) * v202
          + 128) >> 8;
  }
  v3[1969] = v202;
  return result;
}

double vp9_setup_past_independence(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  void *v8;
  void *v9;
  double result;
  int v11;

  v2 = a1 + 4748;
  *(_OWORD *)(a1 + 4824) = 0u;
  *(_OWORD *)(a1 + 4840) = 0u;
  *(_OWORD *)(a1 + 4792) = 0u;
  *(_OWORD *)(a1 + 4808) = 0u;
  *(_OWORD *)(a1 + 4856) = 0u;
  *(_OWORD *)(a1 + 4872) = 0u;
  *(_DWORD *)(a1 + 4888) = 0;
  *(_BYTE *)(a1 + 4779) = 0;
  v3 = *(void **)(a1 + 1536);
  if (v3)
    bzero(v3, *(int *)(a1 + 1320) * (uint64_t)*(int *)(a1 + 1312));
  v4 = *(void **)(a1 + 1544);
  if (v4)
    bzero(v4, *(int *)(a1 + 1320) * (uint64_t)*(int *)(a1 + 1312));
  *(_DWORD *)(v2 + 2) = 0;
  *(_WORD *)(a1 + 4756) = 0;
  *(_DWORD *)(a1 + 4744) = 65793;
  *(_WORD *)v2 = -1;
  *(_WORD *)(v2 + 6) = 0;
  *(_DWORD *)(a1 + 4740) = -1;
  memcpy((void *)(*(_QWORD *)(a1 + 4904) + 174), &default_coef_probs_4x4, 0x1B0uLL);
  memcpy((void *)(*(_QWORD *)(a1 + 4904) + 606), &default_coef_probs_8x8, 0x1B0uLL);
  memcpy((void *)(*(_QWORD *)(a1 + 4904) + 1038), &default_coef_probs_16x16, 0x1B0uLL);
  memcpy((void *)(*(_QWORD *)(a1 + 4904) + 1470), &default_coef_probs_32x32, 0x1B0uLL);
  v5 = *(_QWORD *)(a1 + 4904);
  *(_OWORD *)(v5 + 52) = unk_208F48E68;
  *(_OWORD *)(v5 + 36) = default_if_uv_probs;
  *(_OWORD *)(v5 + 110) = *(__int128 *)((char *)&xmmword_208F48E98 + 10);
  *(_OWORD *)(v5 + 100) = xmmword_208F48E98;
  *(_OWORD *)(v5 + 84) = unk_208F48E88;
  *(_OWORD *)(v5 + 68) = xmmword_208F48E78;
  *(_DWORD *)(v5 + 32) = 492134521;
  *(_QWORD *)(v5 + 1902) = 0x90950322FF24A2EBLL;
  *(_OWORD *)v5 = default_if_y_probs;
  *(_OWORD *)(v5 + 16) = unk_208F48EC2;
  *(_OWORD *)(v5 + 126) = default_partition_probs;
  *(_OWORD *)(v5 + 142) = unk_208F48EE6;
  *(_OWORD *)(v5 + 158) = xmmword_208F48EF6;
  *(_QWORD *)(v5 + 1931) = 0x6077B7EFE1BB6609;
  *(_BYTE *)(v5 + 1939) = 41;
  *(_DWORD *)(v5 + 1950) = -579109326;
  *(_BYTE *)(v5 + 1954) = -30;
  *(_WORD *)(v5 + 1948) = -2066;
  *(_QWORD *)(v5 + 1940) = 0xAAAC8E8E4A4D1021;
  *(_DWORD *)(v5 + 1963) = 1113875727;
  *(_QWORD *)(v5 + 1955) = 0x98140D3405258803;
  *(_BYTE *)(v5 + 1969) = 64;
  *(_WORD *)(v5 + 1967) = -32576;
  v5 += 1910;
  *(_QWORD *)(v5 + 13) = 0x1E1D191F51112E40;
  *(_OWORD *)v5 = default_inter_mode_probs;
  v6 = *(_QWORD *)(a1 + 4904) + 1970;
  *(_OWORD *)(v6 + 32) = xmmword_208F4937B;
  *(_OWORD *)(v6 + 48) = unk_208F4938B;
  *(_QWORD *)(v6 + 61) = 0x80A0406040407060;
  *(_OWORD *)v6 = default_nmv_context;
  *(_OWORD *)(v6 + 16) = unk_208F4936B;
  v7 = *(_DWORD **)(a1 + 4904);
  v7[510] = 1;
  if (*(_DWORD *)(a1 + 1276) && !*(_DWORD *)(v2 + 13476))
  {
    v11 = *(_DWORD *)(a1 + 1300);
    if (v11 == 2)
    {
      v8 = (void *)(*(_QWORD *)(a1 + 4912) + 2044 * *(unsigned int *)(a1 + 4920));
      goto LABEL_8;
    }
    if (v11 != 3)
      goto LABEL_9;
  }
  memcpy(*(void **)(a1 + 4912), v7, 0x7FCuLL);
  memcpy((void *)(*(_QWORD *)(a1 + 4912) + 2044), *(const void **)(a1 + 4904), 0x7FCuLL);
  memcpy((void *)(*(_QWORD *)(a1 + 4912) + 4088), *(const void **)(a1 + 4904), 0x7FCuLL);
  v8 = (void *)(*(_QWORD *)(a1 + 4912) + 6132);
  v7 = *(_DWORD **)(a1 + 4904);
LABEL_8:
  memcpy(v8, v7, 0x7FCuLL);
LABEL_9:
  if (!*(_DWORD *)(a1 + 1276) || *(_BYTE *)(a1 + 1292))
  {
    v9 = *(void **)(a1 + 1432);
    if (v9)
      bzero(v9, 68 * (*(int *)(a1 + 1324) + *(int *)(a1 + 1324) * (uint64_t)*(int *)(a1 + 1312)));
  }
  result = 0.0;
  *(_OWORD *)(a1 + 4708) = 0u;
  *(_DWORD *)(a1 + 4920) = 0;
  return result;
}

unint64_t vp9_inc_mv(unint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;

  if (a2)
  {
    v2 = *(__int16 *)result;
    v3 = *(__int16 *)(result + 2);
    v4 = *(_WORD *)(result + 2) != 0;
    if (*(_WORD *)(result + 2))
      v5 = 3;
    else
      v5 = 2;
    if (*(_WORD *)result)
      v4 = v5;
    ++*(_DWORD *)(a2 + 4 * v4);
    if (v2)
    {
      v6 = a2 + 16;
      ++*(_DWORD *)(a2 + 16 + 4 * (v2 >> 31));
      if (v2 >= 0)
        v7 = v2;
      else
        v7 = -v2;
      v8 = v7 - 1;
      if (v7 <= 0x2000)
        v9 = log_in_base_2[v8 >> 3];
      else
        v9 = 10;
      v10 = -8 << v9;
      if (!v9)
        v10 = 0;
      ++*(_DWORD *)(v6 + 4 * v9 + 8);
      v11 = (v10 + v8) >> 3;
      v12 = (v8 >> 1) & 3;
      v13 = v8 & 1;
      if (v9)
      {
        v14 = 0;
        v15 = a2 + 76;
        do
        {
          v16 = 4 * ((v11 >> v14) & 1);
          result = (*(_DWORD *)(v15 + v16) + 1);
          *(_DWORD *)(v15 + v16) = result;
          ++v14;
          v15 += 8;
        }
        while (v9 != v14);
        ++*(_DWORD *)(v6 + 4 * v12 + 172);
        v17 = (_DWORD *)(v6 + 4 * v13 + 196);
      }
      else
      {
        ++*(_DWORD *)(v6 + 4 * v11 + 52);
        v18 = v6 + 16 * v11 + 4 * v12;
        ++*(_DWORD *)(v18 + 140);
        v17 = (_DWORD *)(v6 + 4 * v13 + 188);
      }
      ++*v17;
    }
    if (v4)
    {
      ++*(_DWORD *)(a2 + 4 * (v3 >> 31) + 220);
      if (v3 >= 0)
        v19 = v3;
      else
        v19 = -v3;
      v20 = v19 - 1;
      if (v19 <= 0x2000)
        v21 = log_in_base_2[v20 >> 3];
      else
        v21 = 10;
      v22 = -8 << v21;
      if (!v21)
        v22 = 0;
      ++*(_DWORD *)(a2 + 4 * v21 + 228);
      v23 = (v22 + v20) >> 3;
      v24 = (v20 >> 1) & 3;
      v25 = v20 & 1;
      if (v21)
      {
        v26 = 0;
        v27 = a2 + 280;
        do
        {
          ++*(_DWORD *)(v27 + 4 * ((v23 >> v26++) & 1));
          v27 += 8;
        }
        while (v21 != v26);
        ++*(_DWORD *)(a2 + 220 + 4 * v24 + 172);
        v28 = (_DWORD *)(a2 + 220 + 4 * v25 + 196);
      }
      else
      {
        ++*(_DWORD *)(a2 + 220 + 4 * v23 + 52);
        v29 = a2 + 220 + 16 * v23 + 4 * v24;
        ++*(_DWORD *)(v29 + 140);
        v28 = (_DWORD *)(a2 + 220 + 4 * v25 + 188);
      }
      ++*v28;
    }
  }
  return result;
}

_DWORD *vp9_adapt_mv_probs(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *result;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unint64_t v86;
  char v88;

  v3 = *(_QWORD *)(a1 + 4904);
  v4 = *(_QWORD *)(a1 + 4912);
  v5 = *(_DWORD *)(a1 + 4920);
  tree_merge_probs_impl(0, (uint64_t)vp9_mv_joint_tree, v4 + 2044 * v5 + 1970, a1 + 17724, v3 + 1970);
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = 33 * v6;
    v10 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1973);
    v11 = *(unsigned int *)(a1 + 204 * v6 + 17740);
    v12 = (*(_DWORD *)(a1 + 204 * v6 + 17744) + v11);
    v88 = v8;
    if ((_DWORD)v12)
    {
      if (v12 >= 0x14)
        v13 = 20;
      else
        v13 = *(_DWORD *)(a1 + 204 * v6 + 17744) + v11;
      v14 = ((unint64_t)(v12 >> 1) + (v11 << 8)) / v12;
      v10 = ((((_DWORD)v14 == 0) | ((255 - v14) >> 23) | v14)
           * count_to_update_factor_1[v13]
           + (256 - count_to_update_factor_1[v13]) * v10
           + 128) >> 8;
    }
    v15 = v3 + v9;
    *(_BYTE *)(v3 + v9 + 1973) = v10;
    v16 = v4 + 2044 * v5 + v9;
    v17 = a1 + 204 * v6;
    tree_merge_probs_impl(0, (uint64_t)vp9_mv_class_tree, v16 + 1974, v17 + 17748, v3 + v9 + 1974);
    tree_merge_probs_impl(0, (uint64_t)&vp9_mv_class0_tree, v16 + 1984, v17 + 17792, v15 + 1984);
    v18 = *(unsigned __int8 *)(v16 + 1985);
    v19 = *(unsigned int *)(v17 + 17800);
    v20 = (*(_DWORD *)(v17 + 17804) + v19);
    if ((_DWORD)v20)
    {
      if (v20 >= 0x14)
        v21 = 20;
      else
        v21 = *(_DWORD *)(v17 + 17804) + v19;
      v22 = ((unint64_t)(v20 >> 1) + (v19 << 8)) / v20;
      v18 = ((((_DWORD)v22 == 0) | ((255 - v22) >> 23) | v22)
           * count_to_update_factor_1[v21]
           + (256 - count_to_update_factor_1[v21]) * v18
           + 128) >> 8;
    }
    v23 = v3 + 33 * v6;
    *(_BYTE *)(v23 + 1985) = v18;
    v24 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1986);
    v25 = *(unsigned int *)(a1 + 204 * v6 + 17808);
    v26 = (*(_DWORD *)(a1 + 204 * v6 + 17812) + v25);
    if ((_DWORD)v26)
    {
      if (v26 >= 0x14)
        v27 = 20;
      else
        v27 = *(_DWORD *)(a1 + 204 * v6 + 17812) + v25;
      v28 = ((unint64_t)(v26 >> 1) + (v25 << 8)) / v26;
      v24 = ((((_DWORD)v28 == 0) | ((255 - v28) >> 23) | v28)
           * count_to_update_factor_1[v27]
           + (256 - count_to_update_factor_1[v27]) * v24
           + 128) >> 8;
    }
    *(_BYTE *)(v23 + 1986) = v24;
    v29 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1987);
    v30 = *(unsigned int *)(a1 + 204 * v6 + 17816);
    v31 = (*(_DWORD *)(a1 + 204 * v6 + 17820) + v30);
    if ((_DWORD)v31)
    {
      if (v31 >= 0x14)
        v32 = 20;
      else
        v32 = *(_DWORD *)(a1 + 204 * v6 + 17820) + v30;
      v33 = ((unint64_t)(v31 >> 1) + (v30 << 8)) / v31;
      v29 = ((((_DWORD)v33 == 0) | ((255 - v33) >> 23) | v33)
           * count_to_update_factor_1[v32]
           + (256 - count_to_update_factor_1[v32]) * v29
           + 128) >> 8;
    }
    v34 = v3 + 33 * v6;
    *(_BYTE *)(v34 + 1987) = v29;
    v35 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1988);
    v36 = *(unsigned int *)(a1 + 204 * v6 + 17824);
    v37 = (*(_DWORD *)(a1 + 204 * v6 + 17828) + v36);
    if ((_DWORD)v37)
    {
      if (v37 >= 0x14)
        v38 = 20;
      else
        v38 = *(_DWORD *)(a1 + 204 * v6 + 17828) + v36;
      v39 = ((unint64_t)(v37 >> 1) + (v36 << 8)) / v37;
      v35 = ((((_DWORD)v39 == 0) | ((255 - v39) >> 23) | v39)
           * count_to_update_factor_1[v38]
           + (256 - count_to_update_factor_1[v38]) * v35
           + 128) >> 8;
    }
    *(_BYTE *)(v34 + 1988) = v35;
    v40 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1989);
    v41 = *(unsigned int *)(a1 + 204 * v6 + 17832);
    v42 = (*(_DWORD *)(a1 + 204 * v6 + 17836) + v41);
    if ((_DWORD)v42)
    {
      if (v42 >= 0x14)
        v43 = 20;
      else
        v43 = *(_DWORD *)(a1 + 204 * v6 + 17836) + v41;
      v44 = ((unint64_t)(v42 >> 1) + (v41 << 8)) / v42;
      v40 = ((((_DWORD)v44 == 0) | ((255 - v44) >> 23) | v44)
           * count_to_update_factor_1[v43]
           + (256 - count_to_update_factor_1[v43]) * v40
           + 128) >> 8;
    }
    v45 = v3 + 33 * v6;
    *(_BYTE *)(v45 + 1989) = v40;
    v46 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1990);
    v47 = *(unsigned int *)(a1 + 204 * v6 + 17840);
    v48 = (*(_DWORD *)(a1 + 204 * v6 + 17844) + v47);
    if ((_DWORD)v48)
    {
      if (v48 >= 0x14)
        v49 = 20;
      else
        v49 = *(_DWORD *)(a1 + 204 * v6 + 17844) + v47;
      v50 = ((unint64_t)(v48 >> 1) + (v47 << 8)) / v48;
      v46 = ((((_DWORD)v50 == 0) | ((255 - v50) >> 23) | v50)
           * count_to_update_factor_1[v49]
           + (256 - count_to_update_factor_1[v49]) * v46
           + 128) >> 8;
    }
    *(_BYTE *)(v45 + 1990) = v46;
    v51 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1991);
    v52 = *(unsigned int *)(a1 + 204 * v6 + 17848);
    v53 = (*(_DWORD *)(a1 + 204 * v6 + 17852) + v52);
    if ((_DWORD)v53)
    {
      if (v53 >= 0x14)
        v54 = 20;
      else
        v54 = *(_DWORD *)(a1 + 204 * v6 + 17852) + v52;
      v55 = ((unint64_t)(v53 >> 1) + (v52 << 8)) / v53;
      v51 = ((((_DWORD)v55 == 0) | ((255 - v55) >> 23) | v55)
           * count_to_update_factor_1[v54]
           + (256 - count_to_update_factor_1[v54]) * v51
           + 128) >> 8;
    }
    v56 = v3 + 33 * v6;
    *(_BYTE *)(v56 + 1991) = v51;
    v57 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1992);
    v58 = *(unsigned int *)(a1 + 204 * v6 + 17856);
    v59 = (*(_DWORD *)(a1 + 204 * v6 + 17860) + v58);
    if ((_DWORD)v59)
    {
      if (v59 >= 0x14)
        v60 = 20;
      else
        v60 = *(_DWORD *)(a1 + 204 * v6 + 17860) + v58;
      v61 = ((unint64_t)(v59 >> 1) + (v58 << 8)) / v59;
      v57 = ((((_DWORD)v61 == 0) | ((255 - v61) >> 23) | v61)
           * count_to_update_factor_1[v60]
           + (256 - count_to_update_factor_1[v60]) * v57
           + 128) >> 8;
    }
    *(_BYTE *)(v56 + 1992) = v57;
    v62 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1993);
    v63 = *(unsigned int *)(a1 + 204 * v6 + 17864);
    v64 = (*(_DWORD *)(a1 + 204 * v6 + 17868) + v63);
    if ((_DWORD)v64)
    {
      if (v64 >= 0x14)
        v65 = 20;
      else
        v65 = *(_DWORD *)(a1 + 204 * v6 + 17868) + v63;
      v66 = ((unint64_t)(v64 >> 1) + (v63 << 8)) / v64;
      v62 = ((((_DWORD)v66 == 0) | ((255 - v66) >> 23) | v66)
           * count_to_update_factor_1[v65]
           + (256 - count_to_update_factor_1[v65]) * v62
           + 128) >> 8;
    }
    v67 = v3 + 33 * v6;
    *(_BYTE *)(v67 + 1993) = v62;
    v68 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 1994);
    v69 = *(unsigned int *)(a1 + 204 * v6 + 17872);
    v70 = (*(_DWORD *)(a1 + 204 * v6 + 17876) + v69);
    if ((_DWORD)v70)
    {
      if (v70 >= 0x14)
        v71 = 20;
      else
        v71 = *(_DWORD *)(a1 + 204 * v6 + 17876) + v69;
      v72 = ((unint64_t)(v70 >> 1) + (v69 << 8)) / v70;
      v68 = ((((_DWORD)v72 == 0) | ((255 - v72) >> 23) | v72)
           * count_to_update_factor_1[v71]
           + (256 - count_to_update_factor_1[v71]) * v68
           + 128) >> 8;
    }
    *(_BYTE *)(v67 + 1994) = v68;
    v73 = v4 + 2044 * v5 + 33 * v6;
    v74 = a1 + 204 * v6;
    tree_merge_probs_impl(0, (uint64_t)vp9_mv_fp_tree, v73 + 1995, v74 + 17880, v67 + 1995);
    tree_merge_probs_impl(0, (uint64_t)vp9_mv_fp_tree, v73 + 1998, v74 + 17896, v67 + 1998);
    tree_merge_probs_impl(0, (uint64_t)vp9_mv_fp_tree, v73 + 2001, v74 + 17912, v67 + 2001);
    result = count_to_update_factor_1;
    if (a2)
    {
      v76 = 33 * v6;
      v77 = *(unsigned __int8 *)(v4 + 2044 * v5 + 33 * v6 + 2004);
      v78 = *(unsigned int *)(a1 + 204 * v6 + 17928);
      v79 = (*(_DWORD *)(a1 + 204 * v6 + 17932) + v78);
      if ((_DWORD)v79)
      {
        if (v79 >= 0x14)
          v80 = 20;
        else
          v80 = *(_DWORD *)(a1 + 204 * v6 + 17932) + v78;
        v81 = ((unint64_t)(v79 >> 1) + (v78 << 8)) / v79;
        v77 = ((((_DWORD)v81 == 0) | ((255 - v81) >> 23) | v81)
             * count_to_update_factor_1[v80]
             + (256 - count_to_update_factor_1[v80]) * v77
             + 128) >> 8;
      }
      *(_BYTE *)(v3 + v76 + 2004) = v77;
      v82 = *(unsigned __int8 *)(v4 + 2044 * v5 + v76 + 2005);
      v83 = *(unsigned int *)(a1 + 204 * v6 + 17936);
      v84 = (*(_DWORD *)(a1 + 204 * v6 + 17940) + v83);
      if ((_DWORD)v84)
      {
        if (v84 >= 0x14)
          v85 = 20;
        else
          v85 = *(_DWORD *)(a1 + 204 * v6 + 17940) + v83;
        v86 = ((unint64_t)(v84 >> 1) + (v83 << 8)) / v84;
        v82 = ((((_DWORD)v86 == 0) | ((255 - v86) >> 23) | v86)
             * count_to_update_factor_1[v85]
             + (256 - count_to_update_factor_1[v85]) * v82
             + 128) >> 8;
      }
      *(_BYTE *)(v3 + 33 * v6 + 2005) = v82;
    }
    v7 = 0;
    v6 = 1;
  }
  while ((v88 & 1) != 0);
  return result;
}

uint64_t vp9_block_error_neon(int32x4_t *a1, int32x4_t *a2, uint64_t a3, _QWORD *a4)
{
  int64x2_t v4;
  int64x2_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  uint16x4_t v10;
  uint16x4_t v11;
  uint32x4_t v12;
  uint16x4_t v13;
  uint32x4_t v14;
  uint16x4_t v15;

  v4 = 0uLL;
  v5 = 0uLL;
  do
  {
    v6 = vmovn_s32(*a1);
    v7 = vmovn_s32(a1[1]);
    v8 = vmovn_s32(a1[2]);
    v9 = vmovn_s32(a1[3]);
    v10 = (uint16x4_t)vabd_s16(v6, vmovn_s32(*a2));
    v11 = (uint16x4_t)vabd_s16(v7, vmovn_s32(a2[1]));
    v12 = vmlal_u16(vmull_u16(v11, v11), v10, v10);
    v13 = (uint16x4_t)vabd_s16(v8, vmovn_s32(a2[2]));
    v14 = vmlal_u16(v12, v13, v13);
    v15 = (uint16x4_t)vabd_s16(v9, vmovn_s32(a2[3]));
    v5 = (int64x2_t)vpadalq_u32((uint64x2_t)v5, vmlal_u16(v14, v15, v15));
    v4 = vpadalq_s32(vpadalq_s32(v4, vmlal_s16(vmull_s16(v7, v7), v6, v6)), vmlal_s16(vmull_s16(v9, v9), v8, v8));
    a1 += 4;
    a2 += 4;
    a3 -= 16;
  }
  while (a3);
  *a4 = vaddvq_s64(v4);
  return vaddvq_s64(v5);
}

uint64_t vp9_block_error_fp_neon(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int64x2_t v3;
  int64x2_t v4;
  uint16x4_t v5;
  uint16x4_t v6;
  uint16x4_t v7;
  uint16x4_t v8;

  v3 = 0uLL;
  v4 = 0uLL;
  do
  {
    v5 = (uint16x4_t)vabd_s16(vmovn_s32(*a1), vmovn_s32(*a2));
    v6 = (uint16x4_t)vabd_s16(vmovn_s32(a1[1]), vmovn_s32(a2[1]));
    v3 = (int64x2_t)vpadalq_u32((uint64x2_t)v3, vmlal_u16(vmull_u16(v6, v6), v5, v5));
    v7 = (uint16x4_t)vabd_s16(vmovn_s32(a1[2]), vmovn_s32(a2[2]));
    v8 = (uint16x4_t)vabd_s16(vmovn_s32(a1[3]), vmovn_s32(a2[3]));
    v4 = (int64x2_t)vpadalq_u32((uint64x2_t)v4, vmlal_u16(vmull_u16(v8, v8), v7, v7));
    a1 += 4;
    a2 += 4;
    a3 -= 16;
  }
  while (a3);
  return vaddvq_s64(vaddq_s64(v4, v3));
}

void vp9_encode_free_mt_data(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)(a1 + 842236);
  if (*(int *)(a1 + 842236) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = 8;
    do
    {
      v6 = *(_QWORD *)(v1 + 3);
      ((void (__cdecl *)(std::__fs::filesystem::recursive_directory_iterator *__return_ptr __struct_ptr, std::__fs::filesystem::recursive_directory_iterator *__struct_ptr))off_253EA52B8[0])((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52B8[0], (std::__fs::filesystem::recursive_directory_iterator *)(*(_QWORD *)(v1 + 1) + v2));
      v5 = *v1;
      if (v3 < v5 - 1)
      {
        v7 = *(_QWORD *)(v6 + v4);
        v8 = *(_QWORD *)(v7 + 114248);
        if (v8)
        {
          free(*(void **)(v8 - 8));
          v7 = *(_QWORD *)(v6 + v4);
        }
        vp9_free_pc_tree(v7);
        v9 = *(_QWORD *)(v6 + v4);
        if (v9)
          free(*(void **)(v9 - 8));
        LODWORD(v5) = *v1;
      }
      ++v3;
      v4 += 280;
      v2 += 56;
    }
    while (v3 < (int)v5);
  }
  v10 = *(_QWORD *)(v1 + 3);
  if (v10)
    free(*(void **)(v10 - 8));
  *(_QWORD *)(v1 + 3) = 0;
  v11 = *(_QWORD *)(v1 + 1);
  if (v11)
    free(*(void **)(v11 - 8));
  *(_QWORD *)(v1 + 1) = 0;
  *v1 = 0;
}

void vp9_encode_tiles_mt(_DWORD *a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  _QWORD *v8;
  const void *v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = 1 << a1[47482];
  v3 = a1[47587];
  if (v3 >= v2)
    v4 = v2;
  else
    v4 = v3;
  vp9_init_tile_data((uint64_t)a1);
  create_enc_workers(a1, v4);
  if ((int)v4 < 1)
    return;
  v5 = 0;
  v6 = a1 + 210559;
  v7 = a1 + 184983;
  v8 = a1 + 12300;
  v9 = a1 + 33936;
  v10 = a1 + 44155;
  do
  {
    v11 = *(_QWORD *)(v6 + 3) + v5;
    v12 = *(_QWORD **)(v11 + 8);
    v13 = v8;
    if (v12 != v8)
    {
      memcpy(v12, v8, 0x15210uLL);
      memcpy((void *)(*(_QWORD *)(v11 + 8) + 86544), v9, 0x6C38uLL);
      v13 = *(_QWORD **)(v11 + 8);
    }
    v14 = (_DWORD *)v13[14281];
    if (v14 != v10)
      memcpy(v14, v10, 0x33A8uLL);
    if (*v7)
    {
      v15 = *(_QWORD **)(v11 + 8);
      v16 = (_QWORD *)v15[14284];
      v15[1025] = v16[52];
      v15[1024] = v16[61];
      v15[3114] = v16[70];
      v15[1026] = v16[79];
      v15[2063] = v16[55];
      v15[2062] = v16[64];
      v15[3131] = v16[73];
      v15[2064] = v16[82];
      v15[3101] = v16[58];
      v15[3100] = v16[67];
      v15[3148] = v16[76];
      v15[3102] = v16[85];
    }
    v5 += 280;
  }
  while (280 * v4 != v5);
  v17 = *(_QWORD *)(v6 + 1);
  v18 = *(_QWORD *)(v6 + 3);
  if (v4 < 2)
  {
    v19 = 0;
LABEL_18:
    v23 = v4 - v19;
    v24 = (_QWORD *)(v17 + 56 * v19 + 40);
    v25 = v18 + 280 * v19;
    do
    {
      *(v24 - 2) = enc_worker_hook;
      *(v24 - 1) = v25;
      *v24 = 0;
      v24 += 7;
      v25 += 280;
      --v23;
    }
    while (v23);
    goto LABEL_20;
  }
  v19 = v4 & 0xFFFFFFFE;
  v20 = (_QWORD *)(v17 + 96);
  v21 = *(_QWORD *)(v6 + 3);
  v22 = v19;
  do
  {
    *(v20 - 9) = enc_worker_hook;
    *(v20 - 8) = v21;
    *(v20 - 2) = enc_worker_hook;
    *(v20 - 1) = v21 + 280;
    v21 += 560;
    *(v20 - 7) = 0;
    *v20 = 0;
    v20 += 14;
    v22 -= 2;
  }
  while (v22);
  if (v19 != v4)
    goto LABEL_18;
LABEL_20:
  v26 = 0;
  v27 = 32;
  do
  {
    v28 = (uint64_t *)(*(_QWORD *)(v6 + 1) + v27);
    v30 = *v28;
    v29 = v28 - 4;
    *(_DWORD *)(v30 + 16) = v26;
    if (v26 == *v6 - 1)
      v31 = off_253EA52B0;
    else
      v31 = (uint64_t (**)())&off_253EA52A8;
    ((void (*)(uint64_t *))*v31)(v29);
    ++v26;
    v27 += 56;
  }
  while (v4 != v26);
  v32 = 0;
  v33 = v4;
  do
  {
    off_253EA52A0();
    v32 += 56;
    --v33;
  }
  while (v33);
  v34 = 0;
  v35 = 32;
  do
  {
    if (v34 < *v6 - 1)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(v6 + 1) + v35);
      vp9_accumulate_frame_counts(v10, *(const float **)(*(_QWORD *)(v36 + 8) + 114248), 0);
      accumulate_rd_opt(v8, *(_QWORD **)(v36 + 8));
    }
    ++v34;
    v35 += 56;
  }
  while (v4 != v34);
}

void create_enc_workers(_DWORD *a1, int a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  signed int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int *v20;
  uint64_t v21;
  signed int v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  size_t v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t i;
  _QWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  unint64_t v43;
  _DWORD *v44;

  v2 = a2;
  v3 = a1 + 210559;
  if (a1[186877] && !a1[212584])
  {
    v10 = a1 + 42997;
    v11 = (((a1[47498] + 7) >> 3) + 7) >> 3;
    v12 = -1;
    do
      ++v12;
    while (64 << v12 < v11);
    v13 = -1;
    do
      v14 = v11 >> (v13++ + 2);
    while (v14 > 3);
    v15 = a1[47584];
    if (v15 < v13)
      v13 = a1[47584];
    if (v15 >= v12)
      v16 = v13;
    else
      v16 = v12;
    if (a1[47588] == 1)
    {
      v17 = *v10;
      v18 = a1[42998];
      v19 = v18 * *v10;
      if (v17 <= v18)
        v17 = a1[42998];
      v20 = &dword_208F47570;
      v21 = 245;
      do
      {
        if (*v20 >= v19 && v20[1] >= v17)
        {
          v22 = __clz(*((unsigned __int8 *)v20 + 32)) ^ 0x1F;
          goto LABEL_59;
        }
        v20 += 16;
        --v21;
      }
      while (v21);
      v22 = 0x7FFFFFFF;
LABEL_59:
      if (v22 > v12)
        LOBYTE(v12) = v22;
      if (v16 > v22)
        LOBYTE(v16) = v12;
    }
    if (a1[47587] >= 1 << v16)
      v2 = 1 << v16;
    else
      v2 = a1[47587];
    if (v2 == *v3)
      return;
  }
  else if (a2 == *v3)
  {
    return;
  }
  v4 = (uint64_t)(a1 + 42924);
  vp9_loop_filter_dealloc(a1 + 210564);
  v5 = *(_QWORD *)(v3 + 27);
  if (v5)
  {
    v6 = *v3;
    if ((int)*v3 < 2)
      goto LABEL_28;
    v7 = 1;
    v8 = 736;
    do
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v3 + 27) + v8);
      if (v9)
      {
        free(*(void **)(v9 - 8));
        v6 = *v3;
      }
      ++v7;
      v8 += 736;
    }
    while (v7 < v6);
    v5 = *(_QWORD *)(v3 + 27);
    if (v5)
LABEL_28:
      free(*(void **)(v5 - 8));
    *(_QWORD *)(v3 + 27) = 0;
  }
  vp9_encode_free_mt_data((uint64_t)a1);
  v23 = 56 * v2 + 23;
  if (v23 > 0x10000000000 || (v24 = malloc_type_malloc(v23, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(v3 + 1) = 0;
LABEL_36:
    vpx_internal_error(v4, 2, "Failed to allocate cpi->workers");
    if (v2 < 0)
      goto LABEL_41;
    goto LABEL_37;
  }
  v25 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v25 - 8) = v24;
  *(_QWORD *)(v3 + 1) = v25;
  if (!v25)
    goto LABEL_36;
  if (v2 < 0)
    goto LABEL_41;
LABEL_37:
  v26 = 280 * v2 + 23;
  if (v26 <= 0x10000000000)
  {
    v27 = malloc_type_malloc(v26, 0x74AD08B5uLL);
    if (v27)
    {
      v28 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v28 - 8) = v27;
      if (v28)
      {
        bzero((void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0), 280 * v2);
        *(_QWORD *)(v3 + 3) = v28;
        goto LABEL_42;
      }
    }
  }
LABEL_41:
  *(_QWORD *)(v3 + 3) = 0;
  vpx_internal_error(v4, 2, "Failed to allocate cpi->tile_thr_data");
LABEL_42:
  v29 = (v2 - 1);
  if (v2 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v44 = a1 + 12300;
    v32 = 280 * v2;
    for (i = 16; ; i += 56)
    {
      v34 = (_QWORD *)(*(_QWORD *)(v3 + 1) + i);
      v35 = (unsigned int *)(v34 - 2);
      v36 = *(_QWORD *)(v3 + 3);
      ++*v3;
      g_worker_interface((uint64_t)(v34 - 2));
      *v34 = "vpx enc worker";
      *(_QWORD *)(v36 + v30) = a1;
      if (v31 >= v29)
      {
        *(_QWORD *)(v36 + v30 + 8) = v44;
        goto LABEL_45;
      }
      v37 = malloc_type_malloc(0x1BE97uLL, 0x74AD08B5uLL);
      if (!v37)
        break;
      v38 = v37;
      v39 = (_QWORD *)(((unint64_t)v37 + 39) & 0xFFFFFFFFFFFFFFE0);
      *(v39 - 1) = v38;
      *(_QWORD *)(v36 + v30 + 8) = v39;
      v40 = v36 + v30 + 8;
      if (!v39)
      {
        v40 = v36 + 280 * v31 + 8;
LABEL_51:
        vpx_internal_error(v4, 2, "Failed to allocate thread_data->td", v44);
        v39 = *(_QWORD **)v40;
      }
      bzero(v39, 0x1BE70uLL);
      v41 = *(_QWORD *)v40;
      *(_OWORD *)(v41 + 114256) = 0u;
      vp9_setup_pc_tree(v4, v41);
      v42 = malloc_type_malloc(0x33BFuLL, 0x74AD08B5uLL);
      if (v42 && (v43 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v43 - 8) = v42, v43))
      {
        bzero((void *)(((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF0), 0x33A8uLL);
        *(_QWORD *)(*(_QWORD *)v40 + 114248) = v43;
        if (!off_253EA5298(v35))
          goto LABEL_57;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v40 + 114248) = 0;
        vpx_internal_error(v4, 2, "Failed to allocate thread_data->td->counts", v44);
        if (!off_253EA5298(v35))
LABEL_57:
          vpx_internal_error(v4, 1, "Tile encoder thread creation failed", v44);
      }
LABEL_45:
      off_253EA52A0();
      ++v31;
      v30 += 280;
      if (v32 == v30)
        return;
    }
    *(_QWORD *)(v36 + v30 + 8) = 0;
    v40 = v36 + v30 + 8;
    goto LABEL_51;
  }
}

uint64_t enc_worker_hook(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)a1 + 189928;
  v3 = *(_DWORD *)(a1 + 16);
  v4 = 1 << *(_DWORD *)(*(_QWORD *)a1 + 189932) << *(_DWORD *)v2;
  if (v3 < v4)
  {
    v5 = 1 << *(_DWORD *)v2;
    do
    {
      v6 = (unsigned int *)(*(_QWORD *)(v2 + 4560) + 3720 * (((v3 / v5) << *(_DWORD *)v2) + v3 % v5));
      v7 = *v6;
      v8 = v6[1];
      if ((int)v7 < v8)
      {
        v9 = *(_QWORD *)(a1 + 8);
        do
        {
          vp9_encode_sb_row(v1, v9, v3 / v5, v3 % v5, v7);
          v7 = (v7 + 8);
        }
        while ((int)v7 < v8);
      }
      v3 += *(_DWORD *)(v1 + 842236);
    }
    while (v3 < v4);
  }
  return 1;
}

uint64_t accumulate_rd_opt(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t i;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t j;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;

  v2 = 0;
  v3 = a1[14275];
  a1[14274] += a2[14274];
  a1[14275] = v3 + a2[14275];
  v4 = a1[14277];
  a1[14276] += a2[14276];
  a1[14277] = v4 + a2[14277];
  v5 = a1[14279];
  a1[14278] += a2[14278];
  a1[14279] = v5 + a2[14279];
  v6 = a1 + 10821;
  a1[14280] += a2[14280];
  v7 = (char *)a2 + 86588;
  v8 = a1 + 11037;
  v9 = (char *)a2 + 88316;
  do
  {
    v10 = 0;
    LOBYTE(result) = 1;
    do
    {
      v12 = 0;
      v13 = result;
      v14 = 432 * v10;
      v15 = &v6[v14];
      v16 = &v7[v14 * 8];
      do
      {
        for (i = 0; i != 36; i += 6)
        {
          v18 = &v15[i];
          v19 = *((_DWORD *)&v15[i - 2] - 1);
          *(v18 - 6) = LODWORD(v15[i - 3]) + *(_DWORD *)&v16[i * 8 - 44];
          *(v18 - 5) = v19 + *(_DWORD *)&v16[i * 8 - 40];
          v20 = *((_DWORD *)&v15[i - 1] - 1);
          *(v18 - 4) = LODWORD(v15[i - 2]) + *(_DWORD *)&v16[i * 8 - 36];
          *(v18 - 3) = v20 + *(_DWORD *)&v16[i * 8 - 32];
          v21 = HIDWORD(v15[i - 1]);
          *(v18 - 2) = LODWORD(v15[i - 1]) + *(_DWORD *)&v16[i * 8 - 28];
          *(v18 - 1) = v21 + *(_DWORD *)&v16[i * 8 - 24];
          v22 = HIDWORD(v15[i]);
          *v18 = LODWORD(v15[i]) + *(_DWORD *)&v16[i * 8 - 20];
          v18[1] = v22 + *(_DWORD *)&v16[i * 8 - 16];
          v23 = HIDWORD(v15[i + 1]);
          v18[2] = LODWORD(v15[i + 1]) + *(_DWORD *)&v16[i * 8 - 12];
          v18[3] = v23 + *(_DWORD *)&v16[i * 8 - 8];
          v24 = HIDWORD(v15[i + 2]);
          v18[4] = LODWORD(v15[i + 2]) + *(_DWORD *)&v16[i * 8 - 4];
          v18[5] = v24 + *(_DWORD *)&v16[i * 8];
        }
        ++v12;
        v15 += 36;
        v16 += 288;
      }
      while (v12 != 6);
      v25 = 0;
      v26 = &v8[v14];
      v27 = &v9[v14 * 8];
      do
      {
        for (j = 0; j != 36; j += 6)
        {
          v29 = &v26[j];
          v30 = *((_DWORD *)&v26[j - 2] - 1);
          *(v29 - 6) = LODWORD(v26[j - 3]) + *(_DWORD *)&v27[j * 8 - 44];
          *(v29 - 5) = v30 + *(_DWORD *)&v27[j * 8 - 40];
          v31 = *((_DWORD *)&v26[j - 1] - 1);
          *(v29 - 4) = LODWORD(v26[j - 2]) + *(_DWORD *)&v27[j * 8 - 36];
          *(v29 - 3) = v31 + *(_DWORD *)&v27[j * 8 - 32];
          v32 = HIDWORD(v26[j - 1]);
          *(v29 - 2) = LODWORD(v26[j - 1]) + *(_DWORD *)&v27[j * 8 - 28];
          *(v29 - 1) = v32 + *(_DWORD *)&v27[j * 8 - 24];
          v33 = HIDWORD(v26[j]);
          *v29 = LODWORD(v26[j]) + *(_DWORD *)&v27[j * 8 - 20];
          v29[1] = v33 + *(_DWORD *)&v27[j * 8 - 16];
          v34 = HIDWORD(v26[j + 1]);
          v29[2] = LODWORD(v26[j + 1]) + *(_DWORD *)&v27[j * 8 - 12];
          v29[3] = v34 + *(_DWORD *)&v27[j * 8 - 8];
          v35 = HIDWORD(v26[j + 2]);
          v29[4] = LODWORD(v26[j + 2]) + *(_DWORD *)&v27[j * 8 - 4];
          v29[5] = v35 + *(_DWORD *)&v27[j * 8];
        }
        ++v25;
        v26 += 36;
        v27 += 288;
      }
      while (v25 != 6);
      result = 0;
      v10 = 1;
    }
    while ((v13 & 1) != 0);
    ++v2;
    v6 += 864;
    v7 += 6912;
    v8 += 864;
    v9 += 6912;
  }
  while (v2 != 4);
  return result;
}

uint64_t vp9_row_mt_sync_mem_alloc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  uint64_t result;
  unint64_t v19;

  *(_DWORD *)(a1 + 28) = a3;
  v6 = a3;
  v7 = ((uint64_t)a3 << 6) | 0x17;
  if (v7 > 0x10000000000 || (v8 = malloc_type_malloc(v7, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)a1 = 0;
LABEL_7:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_sync->mutex");
    v9 = *(_QWORD *)a1;
    if (a3 < 1)
      goto LABEL_11;
    goto LABEL_8;
  }
  v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 - 8) = v8;
  *(_QWORD *)a1 = v9;
  if (!v9)
    goto LABEL_7;
  if (a3 < 1)
    goto LABEL_11;
LABEL_8:
  if (v9)
  {
    v10 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)(*(_QWORD *)a1 + v10), 0);
      v10 += 64;
    }
    while ((unint64_t)a3 << 6 != v10);
  }
LABEL_11:
  v11 = 48 * (int)v6 + 23;
  if (v11 > 0x10000000000 || (v12 = malloc_type_malloc(v11, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v14 = (unint64_t *)(a1 + 8);
LABEL_17:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_sync->cond");
    v13 = *v14;
    if (a3 < 1)
      goto LABEL_21;
    goto LABEL_18;
  }
  v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v13 - 8) = v12;
  *(_QWORD *)(a1 + 8) = v13;
  v14 = (unint64_t *)(a1 + 8);
  if (!v13)
    goto LABEL_17;
  if (a3 < 1)
    goto LABEL_21;
LABEL_18:
  if (v13)
  {
    v15 = 0;
    v16 = 48 * a3;
    do
    {
      pthread_cond_init((pthread_cond_t *)(*v14 + v15), 0);
      v15 += 48;
    }
    while (v16 != v15);
  }
LABEL_21:
  v17 = 4 * v6 + 23;
  if (v17 > 0x10000000000 || (result = (uint64_t)malloc_type_malloc(v17, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(a1 + 16) = 0;
LABEL_26:
    result = vpx_internal_error(a2, 2, "Failed to allocate row_mt_sync->cur_col");
    goto LABEL_27;
  }
  v19 = (result + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v19 - 8) = result;
  *(_QWORD *)(a1 + 16) = v19;
  if (!v19)
    goto LABEL_26;
LABEL_27:
  *(_DWORD *)(a1 + 24) = 1;
  return result;
}

double vp9_row_mt_sync_mem_dealloc(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  if (a1)
  {
    v2 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (a1[7] < 1)
        goto LABEL_7;
      v3 = 0;
      v4 = 0;
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)(*(_QWORD *)a1 + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < a1[7]);
      v2 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
LABEL_7:
        free(*(void **)(v2 - 8));
    }
    v5 = *((_QWORD *)a1 + 1);
    if (v5)
    {
      if (a1[7] < 1)
        goto LABEL_13;
      v6 = 0;
      v7 = 0;
      do
      {
        pthread_cond_destroy((pthread_cond_t *)(*((_QWORD *)a1 + 1) + v6));
        ++v7;
        v6 += 48;
      }
      while (v7 < a1[7]);
      v5 = *((_QWORD *)a1 + 1);
      if (v5)
LABEL_13:
        free(*(void **)(v5 - 8));
    }
    v8 = *((_QWORD *)a1 + 2);
    if (v8)
      free(*(void **)(v8 - 8));
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t vp9_row_mt_sync_read(uint64_t result, int a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  int v9;

  if (a2)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 24);
    if (((v5 - 1) & a3) == 0)
    {
      v6 = a2 - 1;
      v7 = a2 - 1;
      v8 = (pthread_mutex_t *)(*(_QWORD *)result + (v7 << 6));
      pthread_mutex_lock(v8);
      v9 = 1 - v5;
      if (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 4 * v6) + v9 < a3)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)(v4 + 8) + 48 * (int)v7), v8);
        while (*(_DWORD *)(*(_QWORD *)(v4 + 16) + 4 * v7) + v9 < a3);
      }
      return pthread_mutex_unlock(v8);
    }
  }
  return result;
}

uint64_t vp9_row_mt_sync_write(uint64_t result, int a2, int a3, int a4)
{
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (_QWORD *)result;
  v6 = *(_DWORD *)(result + 24);
  if (a4 - 1 <= a3)
  {
    v7 = v6 + a4;
    goto LABEL_5;
  }
  v7 = a3;
  if (a3 % v6 == v6 - 1)
  {
LABEL_5:
    v8 = (uint64_t)a2 << 6;
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)result + v8));
    v9 = v5[1];
    *(_DWORD *)(v5[2] + 4 * a2) = v7;
    pthread_cond_signal((pthread_cond_t *)(v9 + 48 * a2));
    return pthread_mutex_unlock((pthread_mutex_t *)(*v5 + v8));
  }
  return result;
}

void vp9_encode_tiles_row_mt(_DWORD *a1)
{
  _DWORD *v2;
  unsigned int *v3;
  _DWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t (**v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  int *v47;

  v2 = a1 + 211130;
  v3 = a1 + 210559;
  v4 = a1 + 47482;
  v47 = a1 + 43251;
  v5 = 1 << a1[47482];
  v6 = a1[47587];
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  if (a1[211131] >= v5 && *v2 >= 1 << a1[47483] && a1[211132] >= *v47)
  {
    vp9_init_tile_data((uint64_t)a1);
    create_enc_workers(a1, v7);
    v8 = *v3;
    if ((int)v8 < 1)
      goto LABEL_13;
  }
  else
  {
    vp9_row_mt_mem_dealloc((uint64_t)a1);
    vp9_init_tile_data((uint64_t)a1);
    vp9_row_mt_mem_alloc(a1);
    create_enc_workers(a1, v7);
    v8 = *v3;
    if ((int)v8 < 1)
      goto LABEL_13;
  }
  v9 = 0;
  v10 = a1 + 212422;
  do
  {
    *v10++ = v9;
    if (v9 + 1 == v5)
      v9 = 0;
    else
      ++v9;
    --v8;
  }
  while (v8);
LABEL_13:
  v11 = a1 + 184983;
  v46 = a1;
  vp9_prepare_job_queue((uint64_t)a1, 1);
  if (*v4 != 31)
  {
    v24 = 0;
    v25 = (v47[1] + 7) >> 3;
    v26 = 1 << *v4;
    if (v26 <= 1)
      v26 = 1;
    v27 = 3720 * v26;
    do
    {
      v29 = v25;
      if (v4[37] == 1)
        v29 = *v47;
      v28 = *((_QWORD *)v4 + 570) + v24;
      memset(*(void **)(v28 + 3688), 255, 4 * v29);
      *(_OWORD *)(v28 + 3528) = 0u;
      *(_OWORD *)(v28 + 3544) = 0u;
      *(_OWORD *)(v28 + 3560) = 0u;
      *(_OWORD *)(v28 + 3576) = 0u;
      *(_OWORD *)(v28 + 3592) = 0u;
      *(_OWORD *)(v28 + 3608) = 0u;
      *(_OWORD *)(v28 + 3624) = 0u;
      *(_OWORD *)(v28 + 3640) = 0u;
      *(_OWORD *)(v28 + 3656) = 0u;
      v24 += 3720;
      *(_DWORD *)(v28 + 3612) = -1;
    }
    while (v27 != v24);
  }
  v12 = 0;
  v13 = v46 + 12300;
  v14 = v46 + 44155;
  do
  {
    v15 = *(_QWORD *)(v3 + 3) + v12;
    v16 = *(_QWORD **)(v15 + 8);
    v17 = v46 + 12300;
    if (v16 != v13)
    {
      memcpy(v16, v13, 0x15210uLL);
      memcpy((void *)(*(_QWORD *)(v15 + 8) + 86544), v46 + 33936, 0x6C38uLL);
      v17 = *(_DWORD **)(v15 + 8);
    }
    v18 = (_DWORD *)*((_QWORD *)v17 + 14281);
    if (v18 != v14)
      memcpy(v18, v14, 0x33A8uLL);
    if (*v11)
    {
      v19 = *(_QWORD **)(v15 + 8);
      v20 = (_QWORD *)v19[14284];
      v19[1025] = v20[52];
      v19[1024] = v20[61];
      v19[3114] = v20[70];
      v19[1026] = v20[79];
      v19[2063] = v20[55];
      v19[2062] = v20[64];
      v19[3131] = v20[73];
      v19[2064] = v20[82];
      v19[3101] = v20[58];
      v19[3100] = v20[67];
      v19[3148] = v20[76];
      v19[3102] = v20[85];
    }
    v12 += 280;
  }
  while (280 * v7 != v12);
  v21 = *(_QWORD *)(v3 + 1);
  v22 = *(_QWORD *)(v3 + 3);
  if (v7 >= 2)
  {
    v23 = v7 & 0x7FFFFFFE;
    v30 = (_QWORD *)(v21 + 96);
    v31 = *(_QWORD *)(v3 + 3);
    v32 = v23;
    do
    {
      *(v30 - 9) = enc_row_mt_worker_hook;
      *(v30 - 8) = v31;
      *(v30 - 2) = enc_row_mt_worker_hook;
      *(v30 - 1) = v31 + 280;
      v31 += 560;
      *(v30 - 7) = v2;
      *v30 = v2;
      v30 += 14;
      v32 -= 2;
    }
    while (v32);
    if (v23 == v7)
      goto LABEL_35;
  }
  else
  {
    v23 = 0;
  }
  v33 = v7 - v23;
  v34 = (_QWORD *)(v21 + 56 * v23 + 40);
  v35 = v22 + 280 * v23;
  do
  {
    *(v34 - 2) = enc_row_mt_worker_hook;
    *(v34 - 1) = v35;
    *v34 = v2;
    v34 += 7;
    v35 += 280;
    --v33;
  }
  while (v33);
LABEL_35:
  v36 = 0;
  v37 = 32;
  do
  {
    v38 = (uint64_t *)(*(_QWORD *)(v3 + 1) + v37);
    v40 = *v38;
    v39 = v38 - 4;
    *(_DWORD *)(v40 + 16) = v36;
    if (v36 == *v3 - 1)
      v41 = off_253EA52B0;
    else
      v41 = (uint64_t (**)())&off_253EA52A8;
    ((void (*)(uint64_t *))*v41)(v39);
    ++v36;
    v37 += 56;
  }
  while (v7 != v36);
  v42 = 0;
  do
  {
    off_253EA52A0();
    v42 += 56;
  }
  while (56 * v7 != v42);
  v43 = 0;
  v44 = 32;
  do
  {
    if (v43 < (int)*v3 - 1)
    {
      v45 = *(_QWORD *)(*(_QWORD *)(v3 + 1) + v44);
      vp9_accumulate_frame_counts(v14, *(const float **)(*(_QWORD *)(v45 + 8) + 114248), 0);
      accumulate_rd_opt(v13, *(_QWORD **)(v45 + 8));
    }
    ++v43;
    v44 += 56;
  }
  while (v7 != v43);
}

uint64_t enc_row_mt_worker_hook(uint64_t a1, pthread_mutex_t *a2)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  pthread_mutex_t *v14;
  char *v15;
  pthread_mutex_t *v16;
  uint64_t i;
  int v18;
  pthread_mutex_t *v19;
  pthread_mutex_t *v20;
  int v21;
  int v22;
  pthread_mutex_t *v23;

  v2 = a2;
  v3 = *(_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)a1 + 189928);
  v5 = *(_DWORD *)&a2[80].__opaque[4 * *(int *)(a1 + 20) + 40];
  v6 = a1 + 24;
  if (v4 == 31)
  {
    v7 = (pthread_mutex_t *)((char *)a2 + 80 * v5);
    v8 = v7 + 1;
    pthread_mutex_lock(v7 + 1);
    v11 = *(_QWORD *)&v7->__opaque[40];
    v9 = &v7->__opaque[40];
    v10 = v11;
    if (v11)
    {
      do
      {
        *(_QWORD *)v9 = *(_QWORD *)v10;
        ++*((_DWORD *)v9 + 2);
        pthread_mutex_unlock(v8);
        vp9_encode_sb_row(v3, *(_QWORD *)(a1 + 8), *(_DWORD *)(v10 + 16), *(_DWORD *)(v10 + 12), (8 * *(_DWORD *)(v10 + 8)));
        pthread_mutex_lock(v8);
        v10 = *(_QWORD *)v9;
      }
      while (*(_QWORD *)v9);
    }
    pthread_mutex_unlock(v8);
    *(_DWORD *)(v6 + 4 * v5) = 1;
  }
  else
  {
    v13 = (1 << v4);
    v23 = a2 + 1;
    do
    {
      v14 = (pthread_mutex_t *)((char *)v2 + 80 * v5);
      v15 = &v14->__opaque[40];
      v16 = v14 + 1;
      pthread_mutex_lock(v14 + 1);
      for (i = *(_QWORD *)v15; *(_QWORD *)v15; i = *(_QWORD *)v15)
      {
        *(_QWORD *)v15 = *(_QWORD *)i;
        ++*((_DWORD *)v15 + 2);
        pthread_mutex_unlock(v16);
        vp9_encode_sb_row(v3, *(_QWORD *)(a1 + 8), *(_DWORD *)(i + 16), *(_DWORD *)(i + 12), (8 * *(_DWORD *)(i + 8)));
        pthread_mutex_lock(v16);
      }
      pthread_mutex_unlock(v16);
      v18 = 0;
      *(_DWORD *)(v6 + 4 * v5) = 1;
      v5 = -1;
      v19 = v23;
      do
      {
        if (!*(_DWORD *)(v6 + 4 * i))
        {
          pthread_mutex_lock(v19);
          v20 = v2;
          v21 = *(_DWORD *)&v2->__opaque[32];
          v22 = *(_DWORD *)&v19[-1].__opaque[48];
          pthread_mutex_unlock(v19);
          if (v21 == v22)
            *(_DWORD *)(v6 + 4 * i) = 1;
          if (v21 - v22 > v18)
          {
            v5 = i;
            v18 = v21 - v22;
          }
          v2 = v20;
        }
        ++i;
        v19 = (pthread_mutex_t *)((char *)v19 + 80);
      }
      while (v13 != i);
    }
    while (v5 != -1);
  }
  return 1;
}

uint64_t vp9_extrc_create(uint64_t a1, __int128 *a2, uint64_t a3)
{
  FILE *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t result;
  int v15;
  size_t v16;
  void *v17;
  unint64_t v18;
  const char *v19;
  FILE *v20;

  if (!a3)
    return 8;
  if (!*(_DWORD *)a3)
    goto LABEL_8;
  v6 = *(FILE **)(a3 + 168);
  if (v6)
    fclose(v6);
  if ((*(unsigned int (**)(_QWORD))(a3 + 80))(*(_QWORD *)(a3 + 8)) != 1)
  {
    v7 = *(_QWORD *)(a3 + 152);
    if (v7)
      free(*(void **)(v7 - 8));
LABEL_8:
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v8;
  v9 = *(_OWORD *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a3 + 96) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = v10;
  *(_OWORD *)(a3 + 80) = v11;
  *(_OWORD *)(a3 + 48) = v9;
  v12 = *a2;
  v13 = a2[1];
  *(_OWORD *)(a3 + 136) = a2[2];
  *(_OWORD *)(a3 + 120) = v13;
  *(_OWORD *)(a3 + 104) = v12;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a3 + 24))(*(_QWORD *)(a3 + 96), a3 + 104, a3 + 8);
  if ((_DWORD)result != 1)
  {
    v15 = *((_DWORD *)a2 + 2);
    *(_DWORD *)(a3 + 160) = v15;
    v16 = 208 * v15 + 23;
    if (v16 <= 0x10000000000 && (v17 = malloc_type_malloc(v16, 0x74AD08B5uLL)) != 0)
    {
      v18 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v18 - 8) = v17;
      *(_QWORD *)(a3 + 152) = v18;
      if (v18)
      {
        v19 = *(const char **)(a1 + 72);
        if (v19)
        {
          v20 = fopen(v19, "w");
          *(_QWORD *)(a3 + 168) = v20;
          if (!v20)
            return 1;
        }
        else
        {
          *(_QWORD *)(a3 + 168) = 0;
        }
        result = 0;
        *(_DWORD *)a3 = 1;
      }
      else
      {
        return 2;
      }
    }
    else
    {
      *(_QWORD *)(a3 + 152) = 0;
      return 2;
    }
  }
  return result;
}

uint64_t vp9_extrc_get_frame_rdmult(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, _QWORD *a8, unsigned int a9, uint64_t a10)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  _DWORD v17[4];
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (!a1 || !*(_DWORD *)a1 || (*(_BYTE *)(a1 + 16) & 4) == 0)
    return 8;
  v17[1] = a2;
  v17[2] = a3;
  v17[3] = a4;
  v11 = 2;
  switch(a5)
  {
    case 0:
      v12 = 0;
      v17[0] = 0;
      v23 = a6;
      v24 = a7;
      v18 = -1;
      v20 = 0;
      v21 = 0;
      v13 = -1;
      goto LABEL_11;
    case 1:
      v11 = 1;
      goto LABEL_10;
    case 2:
      v11 = 4;
      goto LABEL_10;
    case 3:
      goto LABEL_10;
    case 4:
      v11 = 3;
LABEL_10:
      v23 = a6;
      v24 = a7;
      v14 = a8[1];
      v15 = *(_DWORD *)(*a8 + 32);
      v17[0] = v11;
      LODWORD(v18) = v15;
      v16 = *(_DWORD *)(v14 + 32);
      v20 = a9 & 1;
      HIDWORD(v18) = v16;
      v21 = (a9 >> 1) & 1;
      v13 = *(_DWORD *)(a8[2] + 32);
      v12 = (a9 >> 2) & 1;
LABEL_11:
      v19 = v13;
      v22 = v12;
      result = (*(unsigned int (**)(_QWORD, _DWORD *, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 8), v17, a10) == 1;
      break;
    default:
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Unsupported update_type %d\n", a5);
      abort();
  }
  return result;
}

void *vp9_copy_and_extend_frame(uint64_t a1, uint64_t a2)
{
  int v4;
  signed int v5;
  int v6;
  int v7;
  signed int v8;
  unsigned int v9;
  int v10;
  char v11;
  char v12;
  unsigned int v13;
  size_t v14;
  int v15;
  signed int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)a1 + 16;
  if (v5 <= (int)((*(_DWORD *)a1 + 63) & 0xFFFFFFC0))
    v5 = (*(_DWORD *)a1 + 63) & 0xFFFFFFC0;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  v8 = v5 - v6;
  v9 = v4 + 16;
  if (v4 + 16 <= (int)((v4 + 63) & 0xFFFFFFC0))
    v9 = (v4 + 63) & 0xFFFFFFC0;
  v10 = v9 - v7;
  v11 = *(_DWORD *)(a1 + 20) != *(_DWORD *)a1;
  v12 = *(_DWORD *)(a1 + 24) != v4;
  v13 = 0x10u >> v12;
  v14 = 0x10u >> v11;
  v15 = v10 >> v12;
  v16 = v8 >> v11;
  if ((*(_BYTE *)(a1 + 152) & 8) != 0)
  {
    highbd_copy_and_extend_plane(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 16), *(_QWORD *)(a2 + 56), *(_DWORD *)(a2 + 16), v6, v7, 16, 0x10u, v10, v8);
    highbd_copy_and_extend_plane(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 36), *(_QWORD *)(a2 + 64), *(_DWORD *)(a2 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v13, v14, v15, v16);
    return highbd_copy_and_extend_plane(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 36), *(_QWORD *)(a2 + 72), *(_DWORD *)(a2 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v13, v14, v15, v16);
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 64);
    v18 = *(unsigned __int8 **)(a1 + 56);
    if (*(_QWORD *)(a1 + 72) - v17 == 1)
      v19 = 2;
    else
      v19 = 1;
    copy_and_extend_plane_0(v18, *(_DWORD *)(a1 + 16), *(char **)(a2 + 56), *(_DWORD *)(a2 + 16), v6, v7, 16, 0x10uLL, v10, v8, 1);
    copy_and_extend_plane_0(*(unsigned __int8 **)(a1 + 64), *(_DWORD *)(a1 + 36), *(char **)(a2 + 64), *(_DWORD *)(a2 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v13, v14, v15, v16, v19);
    return copy_and_extend_plane_0(*(unsigned __int8 **)(a1 + 72), *(_DWORD *)(a1 + 36), *(char **)(a2 + 72), *(_DWORD *)(a2 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v13, v14, v15, v16, v19);
  }
}

void *highbd_copy_and_extend_plane(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, unsigned int a8, int a9, signed int a10)
{
  signed int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  _WORD *v33;
  uint64_t v34;
  int16x8_t v35;
  unint64_t v36;
  _OWORD *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int16x8_t v47;
  int16x8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  void *result;
  const void *v56;
  char *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;

  v12 = a9;
  v11 = a10;
  v13 = 2 * a3;
  v14 = a8;
  v15 = -(uint64_t)a8;
  v16 = (char *)(2 * a3 - 2 * a8);
  if (a6 <= 0)
  {
    v34 = a4;
    goto LABEL_34;
  }
  v62 = -(uint64_t)a8;
  v17 = (unsigned __int16 *)(2 * a1);
  v68 = 2 * a5;
  v67 = a2;
  v59 = a4;
  v60 = a5;
  v66 = a4;
  v61 = 2 * a3 - 2 * a8;
  v58 = 2 * a3;
  if (a10)
  {
    v18 = 0;
    v19 = 2 * a5;
    v20 = &v17[(unint64_t)v19 / 2 - 1];
    v21 = (_WORD *)(v13 + v19);
    v63 = a8 & 0xFFFFFFF0;
    v65 = a10 & 0xFFFFFFFFFFFFFFF0;
    v64 = 2 * a4;
    v22 = (2 * a8) & 0x1FFFFFFE0;
    v23 = v13 + v19 + 16;
    while (1)
    {
      v24 = *v17;
      if (a8 < 0x10)
        break;
      v27 = 0;
      v26 = &v16[2 * v63];
      v28 = vdupq_n_s16(v24);
      do
      {
        v29 = (int16x8_t *)&v16[v27];
        *v29 = v28;
        v29[1] = v28;
        v27 += 32;
      }
      while (v22 != v27);
      v25 = v63;
      if (v63 != v14)
        goto LABEL_10;
LABEL_12:
      memcpy(&v16[2 * v14], v17, v68);
      v31 = *v20;
      if (a10 >= 0x10)
      {
        v33 = &v21[v65];
        v35 = vdupq_n_s16(v31);
        v36 = a10 & 0xFFFFFFFFFFFFFFF0;
        v34 = v66;
        v37 = (_OWORD *)v23;
        do
        {
          *(v37 - 1) = v35;
          *v37 = v35;
          v37 += 2;
          v36 -= 16;
        }
        while (v36);
        v32 = a10 & 0xFFFFFFFFFFFFFFF0;
        if (v65 == a10)
          goto LABEL_4;
      }
      else
      {
        v32 = 0;
        v33 = v21;
        v34 = v66;
      }
      v38 = a10 - v32;
      do
      {
        *v33++ = v31;
        --v38;
      }
      while (v38);
LABEL_4:
      v17 += v67;
      v20 += v67;
      v16 += v64;
      v21 += v34;
      ++v18;
      v23 += v64;
      if (v18 == a6)
      {
        v16 = (char *)v61;
        v15 = v62;
        a4 = v59;
        a5 = v60;
        v11 = a10;
        goto LABEL_33;
      }
    }
    v25 = 0;
    v26 = v16;
LABEL_10:
    v30 = v14 - v25;
    do
    {
      *(_WORD *)v26 = v24;
      v26 += 2;
      --v30;
    }
    while (v30);
    goto LABEL_12;
  }
  v39 = 0;
  v40 = a8 & 0xFFFFFFF0;
  v41 = 2 * a4;
  v42 = (2 * a8) & 0x1FFFFFFE0;
  do
  {
    v43 = *v17;
    if (a8 < 0x10)
    {
      v44 = 0;
      v45 = v16;
LABEL_29:
      v49 = v14 - v44;
      do
      {
        *(_WORD *)v45 = v43;
        v45 += 2;
        --v49;
      }
      while (v49);
      goto LABEL_23;
    }
    v46 = 0;
    v45 = &v16[2 * (v14 & 0xFFFFFFF0)];
    v47 = vdupq_n_s16(v43);
    do
    {
      v48 = (int16x8_t *)&v16[v46];
      *v48 = v47;
      v48[1] = v47;
      v46 += 32;
    }
    while (v42 != v46);
    v44 = v14 & 0xFFFFFFF0;
    if (v40 != v14)
      goto LABEL_29;
LABEL_23:
    memcpy(&v16[2 * v14], v17, v68);
    v17 += v67;
    v16 += v41;
    ++v39;
  }
  while (v39 != a6);
  v16 = (char *)v61;
  v15 = v62;
  a4 = v59;
  a5 = v60;
  v34 = v66;
  v11 = a10;
LABEL_33:
  v13 = v58;
LABEL_34:
  v50 = v13 + 2 * (a6 - 1) * a4;
  v51 = v13 + 2 * a6 * a4;
  v52 = (char *)(v13 + 2 * -(a4 * a7) + 2 * v15);
  v53 = 2 * (int)(a8 + a5 + v11);
  v54 = 2 * v34;
  do
  {
    result = memcpy(v52, v16, v53);
    v52 += v54;
    --a7;
  }
  while (a7);
  if (a9 >= 1)
  {
    v56 = (const void *)(v50 + 2 * v15);
    v57 = (char *)(v51 + 2 * v15);
    do
    {
      result = memcpy(v57, v56, v53);
      v57 += v54;
      --v12;
    }
    while (v12);
  }
  return result;
}

void *copy_and_extend_plane_0(unsigned __int8 *a1, int a2, char *a3, int a4, int a5, int a6, int a7, size_t __len, int a9, int a10, int a11)
{
  int v12;
  int v13;
  size_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned __int8 *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int128 *v36;
  const char *v37;
  const char *v38;
  unsigned __int128 v39;
  unsigned __int128 v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  size_t v53;
  void *result;
  char *v55;
  unint64_t v56;
  int v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v65;
  int v67;
  unsigned __int8 *v68;
  unsigned __int128 *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;

  v13 = a9;
  v12 = a10;
  v14 = __len;
  v15 = -(uint64_t)__len;
  v16 = &a3[-__len];
  if (a6 > 0)
  {
    v17 = a1;
    v18 = a5;
    v19 = a2;
    v20 = a4;
    v65 = a5;
    v72 = a2;
    v73 = __len;
    v71 = -(uint64_t)__len;
    v59 = &a3[-__len];
    v58 = __len;
    v57 = a4;
    if (a11 == 1)
    {
      v21 = a6;
      v22 = a3;
      v23 = a5 - 1;
      do
      {
        memset(&v22[v71], *v17, v14);
        memcpy(v22, v17, v18);
        memset(&v22[v18], v17[v23], a10);
        v14 = v73;
        v17 += v72;
        v22 += v20;
        --v21;
      }
      while (v21);
LABEL_34:
      v16 = v59;
      LODWORD(__len) = v58;
      v12 = a10;
      a4 = v57;
      a5 = v65;
      v15 = v71;
      goto LABEL_35;
    }
    if (a5 <= 0)
    {
      v47 = a6;
      v48 = a3;
      v49 = (a5 - 1) * a11;
      do
      {
        memset(&v48[v71], *v17, v14);
        memset(&v48[v18], v17[v49], a10);
        v14 = v73;
        v17 += v19;
        v48 += v20;
        --v47;
      }
      while (v47);
      goto LABEL_34;
    }
    v24 = 0;
    v68 = &a1[(a5 - 1) * a11];
    v25 = a3;
    v26 = &a3[a5];
    v27 = a5;
    v28 = a5 & 0x1F;
    if (!v28)
      v28 = 32;
    v56 = v28;
    v62 = a5 - v28;
    v63 = 2 * a5 - 1;
    v29 = a5 & 7;
    if (!v29)
      v29 = 8;
    v61 = a5 - v29;
    v70 = (const char *)(a1 + 32);
    v69 = (unsigned __int128 *)(a3 + 16);
    v60 = v29 - a5;
    v30 = &a3[-__len];
    v31 = a1;
    while (1)
    {
      memset(v30, *v31, v14);
      if (v65 >= 9
        && (&a3[v24 * v20] < (char *)&v17[v63 + v24 * v72]
          ? (v32 = v31 >= (unsigned __int8 *)&a3[v27 + v24 * v20])
          : (v32 = 1),
            v32))
      {
        if (v65 >= 0x21)
        {
          v35 = v62;
          v36 = v69;
          v37 = v70;
          do
          {
            v38 = v37 - 32;
            v39 = (unsigned __int128)vld2q_s8(v38);
            v40 = (unsigned __int128)vld2q_s8(v37);
            *(v36 - 1) = v39;
            *v36 = v40;
            v37 += 64;
            v36 += 2;
            v35 -= 32;
          }
          while (v35);
          v34 = v62;
          v33 = v62;
          if (v56 < 9)
            goto LABEL_28;
        }
        else
        {
          v33 = 0;
        }
        v41 = 2 * v33;
        v42 = &v25[v33];
        v43 = v60 + v33;
        do
        {
          v44 = (const char *)&v31[v41];
          v45 = *(_OWORD *)vld2_s8(v44).val;
          *(_QWORD *)v42 = v45;
          v42 += 8;
          v41 += 16;
          v43 += 8;
        }
        while (v43);
        v34 = v61;
      }
      else
      {
        v34 = 0;
      }
LABEL_28:
      v67 = v24;
      v46 = 2 * v34;
      do
      {
        v25[v34++] = v31[v46];
        v46 += 2;
      }
      while (v27 != v34);
      memset(v26, *v68, a10);
      v31 += v72;
      v68 += v72;
      v30 += v20;
      v26 += v20;
      ++v24;
      v70 += v72;
      v69 = (unsigned __int128 *)((char *)v69 + v20);
      v25 += v20;
      v14 = v73;
      if (v67 + 1 == a6)
      {
        v15 = v71;
        v16 = v59;
        LODWORD(__len) = v58;
        v12 = a10;
        a4 = v57;
        a5 = v65;
        goto LABEL_35;
      }
    }
  }
  v20 = a4;
LABEL_35:
  v50 = &a3[(a6 - 1) * a4];
  v51 = &a3[a6 * (uint64_t)a4];
  v52 = &a3[v15 - a4 * a7];
  v53 = (int)__len + a5 + v12;
  do
  {
    result = memcpy(v52, v16, v53);
    v52 += v20;
    --a7;
  }
  while (a7);
  if (a9 >= 1)
  {
    v55 = &v51[v15];
    do
    {
      result = memcpy(v55, &v50[v15], v53);
      v55 += v20;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t vp9_alloc_internal_frame_buffers(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _OWORD *v8;
  uint64_t result;

  v2 = *(_DWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(int *)a1 >= 1)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + v4);
      if (v6)
      {
        free(*(void **)(v6 - 8));
        v3 = *(_QWORD *)(a1 + 8);
        v2 = *(_DWORD *)a1;
      }
      *(_QWORD *)(v3 + v4) = 0;
      ++v5;
      v4 += 24;
    }
    while (v5 < v2);
    goto LABEL_7;
  }
  if (v3)
LABEL_7:
    free(*(void **)(v3 - 8));
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)a1 = 0;
  v7 = malloc_type_malloc(0x197uLL, 0x74AD08B5uLL);
  if (v7 && (v8 = (_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v8 - 1) = v7, v8))
  {
    result = 0;
    v8[22] = 0u;
    v8[23] = 0u;
    v8[20] = 0u;
    v8[21] = 0u;
    v8[18] = 0u;
    v8[19] = 0u;
    v8[16] = 0u;
    v8[17] = 0u;
    v8[14] = 0u;
    v8[15] = 0u;
    v8[12] = 0u;
    v8[13] = 0u;
    v8[10] = 0u;
    v8[11] = 0u;
    v8[8] = 0u;
    v8[9] = 0u;
    v8[6] = 0u;
    v8[7] = 0u;
    v8[4] = 0u;
    v8[5] = 0u;
    v8[2] = 0u;
    v8[3] = 0u;
    *v8 = 0u;
    v8[1] = 0u;
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)a1 = 16;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t vp9_get_frame_buffer(unsigned int *a1, size_t a2, unint64_t *a3)
{
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;

  if (!a1)
    return 0xFFFFFFFFLL;
  v4 = a2;
  v6 = *a1;
  if ((int)v6 < 1)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = 0;
    v8 = (int *)(*((_QWORD *)a1 + 1) + 16);
    while (1)
    {
      v9 = *v8;
      v8 += 6;
      if (!v9)
        break;
      if (v6 == ++v7)
        return 0xFFFFFFFFLL;
    }
  }
  if ((_DWORD)v7 == (_DWORD)v6)
    return 0xFFFFFFFFLL;
  v11 = *((_QWORD *)a1 + 1);
  v12 = v7;
  v13 = (unint64_t *)(v11 + 24 * v7);
  v14 = *v13;
  if (v13[1] >= a2)
  {
    v4 = v13[1];
    goto LABEL_18;
  }
  if (v14)
    free(*(void **)(v14 - 8));
  if (v4 <= 0xFFFFFFFFE9)
  {
    v15 = malloc_type_malloc(v4 + 23, 0x74AD08B5uLL);
    if (v15)
    {
      v14 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v14 - 8) = v15;
      if (v14)
      {
        bzero((void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0), v4);
        v11 = *((_QWORD *)a1 + 1);
        v16 = (unint64_t *)(v11 + 24 * v12);
        *v16 = v14;
        v16[1] = v4;
LABEL_18:
        result = 0;
        v17 = v11 + 24 * v12;
        *a3 = v14;
        a3[1] = v4;
        *(_DWORD *)(v17 + 16) = 1;
        a3[2] = v17;
        return result;
      }
    }
  }
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 24 * v12) = 0;
  return 0xFFFFFFFFLL;
}

uint64_t vp9_release_frame_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
    *(_DWORD *)(v2 + 16) = 0;
  return 0;
}

unsigned __int8 *vp9_scale_and_extend_frame_c(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v63;
  int *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;

  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  v71 = *(_QWORD *)(a1 + 56);
  v72 = *(_QWORD *)(a1 + 64);
  v73 = *(_QWORD *)(a1 + 72);
  v6 = *(int *)(a1 + 16);
  v90 = *(int *)(a1 + 36);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_DWORD *)(a2 + 12);
  v9 = *(int *)(a2 + 16);
  v93 = *(int *)(a2 + 36);
  v92 = (uint64_t)*(&vp9_filter_kernels + a3);
  v10 = *(_DWORD *)(a2 + 8);
  v79 = v8;
  v91 = a4;
  v87 = v9;
  if (3 * v5 == 4 * v10 && 3 * v4 == 4 * v8)
  {
    v67 = *(_QWORD *)(a2 + 64);
    v69 = *(_QWORD *)(a2 + 72);
    v11 = *(_DWORD *)(a2 + 28);
    v64 = (int *)a2;
    v84 = *(unsigned int *)(a2 + 32);
    if (v8 >= 1 && v10 >= 1)
    {
      v13 = 0;
      v77 = 3 * v9;
      do
      {
        v14 = 0;
        v15 = 0;
        v80 = v13;
        v16 = v71 + (int)v6 * (uint64_t)(int)(4 * v13 / 3uLL);
        do
        {
          vpx_convolve8_c(v16 + v14 / 3, v6, v7 + v15, v87, v92, a4, 21, a4, 21, 3, 3);
          v15 += 3;
          v14 += 12;
        }
        while (v10 > (int)v15);
        v13 = v80 + 3;
        v7 += v77;
      }
      while (v80 + 3 < v79);
    }
    v17 = v90;
    v18 = v67;
    if ((int)v84 >= 1 && v11 >= 1)
    {
      for (i = 0; i < v84; i += 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = v72 + (int)(v17 * (4 * i / 3));
        do
        {
          vpx_convolve8_c(v22 + v20 / 3, v17, v18 + v21, v93, v92, v91, 21, v91, 21, 3, 3);
          v17 = v90;
          v21 += 3;
          v20 += 12;
        }
        while (v11 > (int)v21);
        v18 += 3 * v93;
      }
      v23 = 0;
      v24 = v69;
      do
      {
        v25 = 0;
        v26 = 0;
        v27 = v73 + (int)(v17 * (4 * v23 / 3));
        do
        {
          vpx_convolve8_c(v27 + v25 / 3, v17, v24 + v26, v93, v92, v91, 21, v91, 21, 3, 3);
          v17 = v90;
          v26 += 3;
          v25 += 12;
        }
        while (v11 > (int)v26);
        v23 += 3;
        v24 += 3 * v93;
      }
      while (v23 < v84);
    }
    return extend_frame(v64, v64[26]);
  }
  v28 = 16 * v5;
  v29 = (16 * v5 / v10);
  if ((int)v29 <= 64)
  {
    v66 = 16 * v4;
    v30 = (16 * v4 / v8);
    if ((int)v30 <= 64)
    {
      v64 = (int *)a2;
      if (v10 >= 1 && v8 >= 1)
      {
        v85 = *(int *)(a1 + 16);
        v68 = *(_QWORD *)(a2 + 64);
        v70 = *(_QWORD *)(a2 + 72);
        v31 = 0;
        v65 = 16 * v9;
        v63 = *(_DWORD *)(a1 + 8);
        v32 = (v5 << 8);
        v78 = *(_DWORD *)(a1 + 12);
        do
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          v74 = v31;
          v81 = v71 + v4 * (int)v31 / v8 * (int)v85;
          v36 = (v66 * (int)v31 / v8 + v91) & 0xF;
          do
          {
            v37 = v7 + v35;
            v38 = v29;
            v39 = v30;
            v40 = v7;
            v41 = v32;
            vpx_scaled_2d_neon(v81 + v33 / v10, v85, v37, v87, v92, (v34 / v10 + v91) & 0xF, v29, v36, v30, 16, 16);
            v32 = v41;
            v7 = v40;
            v30 = v39;
            v29 = v38;
            v35 += 16;
            v34 += v32;
            v33 += v28;
          }
          while (v10 > (int)v35);
          v31 = v74 + 16;
          v7 = v40 + v65;
          v8 = v79;
          v4 = v78;
        }
        while (v74 + 16 < v79);
        v42 = 0;
        v43 = 0;
        v86 = 8 * v78;
        v44 = (8 * v63);
        v45 = (v63 << 7);
        v46 = v90;
        do
        {
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v82 = v42;
          v50 = v68 + v42;
          v75 = v43;
          v88 = v72 + (int)(v4 * (v43 >> 1)) / v8 * (int)v46;
          v51 = (v86 * (int)v43 / v8 + v91) & 0xF;
          do
          {
            v52 = v44;
            v53 = v45;
            vpx_scaled_2d_neon(v88 + v48 / v10, v46, v50, v93, v92, (v47 / v10 + v91) & 0xF, v38, v51, v30, 8, 8);
            v45 = v53;
            v44 = v52;
            LODWORD(v30) = v39;
            v46 = v90;
            v49 += 16;
            v50 += 8;
            v48 += v52;
            v47 += v53;
          }
          while (v10 > v49);
          v43 = v75 + 16;
          v42 = v82 + 8 * v93;
          v8 = v79;
          v4 = v78;
        }
        while (v75 + 16 < v79);
        v54 = 0;
        v55 = 0;
        v56 = v70;
        do
        {
          v57 = 0;
          v58 = 0;
          v59 = 0;
          v83 = v54;
          v60 = v56 + v54;
          v76 = v55;
          v89 = v73 + (int)(v4 * (v55 >> 1)) / v8 * (int)v46;
          v61 = (v86 * (int)v55 / v8 + v91) & 0xF;
          do
          {
            vpx_scaled_2d_neon(v89 + v58 / v10, v46, v60, v93, v92, (v57 / v10 + v91) & 0xF, v38, v61, v30, 8, 8);
            LODWORD(v30) = v39;
            v46 = v90;
            v59 += 16;
            v60 += 8;
            v58 += v52;
            v57 += v53;
          }
          while (v10 > v59);
          v55 = v76 + 16;
          v54 = v83 + 8 * v93;
          v8 = v79;
          v56 = v70;
          v4 = v78;
        }
        while (v76 + 16 < v79);
      }
      return extend_frame(v64, v64[26]);
    }
  }
  return vp9_scale_and_extend_frame_nonnormative(a1, a2, 8);
}

unsigned __int8 *vp9_scale_and_extend_frame_neon(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int8x8_t a5, int8x8_t a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v17;
  int v19;
  uint8x8_t *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int8x16_t v28;
  int8x16_t v29;
  uint8x8_t *v30;
  _QWORD *v31;
  int v32;
  int8x8_t *v33;
  int v34;
  int8x8_t v35;
  int8x8_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  int8x16_t *v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  unint64_t v54;
  uint8x16_t v55;
  uint8x16_t v56;
  unsigned int v57;
  const char *v58;
  uint64_t v59;
  int8x16_t *v60;
  int v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  uint8x16_t v66;
  uint8x16_t v67;
  int v68;
  unsigned int v69;
  const char *v70;
  uint64_t v71;
  int8x16_t *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint8x16_t v77;
  uint8x16_t v78;
  unsigned int v79;
  char *v80;
  const char *v81;
  uint64_t v82;
  int8x16_t *v83;
  unint64_t v84;
  const char *v85;
  uint64_t v86;
  unint64_t v87;
  uint8x16_t v88;
  uint8x16_t v89;
  unsigned int v90;
  const char *v91;
  uint64_t v92;
  int8x16_t *v93;
  int v94;
  unint64_t v95;
  const char *v96;
  uint64_t v97;
  unint64_t v98;
  uint8x16_t v99;
  uint8x16_t v100;
  int v101;
  unsigned int v102;
  const char *v103;
  uint64_t v104;
  int8x16_t *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint8x16_t v110;
  uint8x16_t v111;
  unsigned int v112;
  const char *v113;
  unsigned __int128 *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unsigned int v118;
  unsigned __int128 v119;
  const char *v120;
  unsigned __int128 *v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unsigned int v127;
  unsigned __int128 v128;
  const char *v129;
  unsigned __int128 *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned __int128 v135;
  uint8x8_t *v136;
  uint64_t v137;
  uint64_t v138;
  const char *v139;
  unsigned __int128 *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unsigned __int128 v145;
  const char *v146;
  unsigned __int128 *v147;
  int v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  int v152;
  unsigned int v153;
  unsigned __int128 v154;
  const char *v155;
  unsigned __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned __int128 v161;
  uint8x8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  int8x16_t v173;
  int8x16_t v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  int8x16_t v181;
  int8x16_t v182;
  int8x16x2_t v183;
  int8x16x2_t v184;
  int8x16x2_t v185;
  int8x16x2_t v186;
  int8x16x2_t v187;
  int8x16x2_t v188;
  int8x16x4_t v189;
  int8x16x4_t v190;
  int8x16x4_t v191;
  int8x16x4_t v192;
  int8x16x4_t v193;
  int8x16x4_t v194;

  v11 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  v13 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 12);
  v15 = *(_DWORD *)(a2 + 28);
  v14 = *(_DWORD *)(a2 + 32);
  if (v11 == 2 * v13 && 2 * v12 == v10)
  {
    if (!(_DWORD)a4)
    {
      v113 = *(const char **)(a1 + 56);
      v114 = *(unsigned __int128 **)(a2 + 56);
      v115 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v116 = 2 * (*(_DWORD *)(a1 + 16) - (int)v115);
      v117 = *(int *)(a2 + 16) - v115;
      do
      {
        v118 = -((v13 + 15) & 0xFFFFFFF0);
        do
        {
          v119 = (unsigned __int128)vld2q_s8(v113);
          v113 += 32;
          *v114++ = v119;
          v118 += 16;
        }
        while (v118);
        v113 += v116;
        v114 = (unsigned __int128 *)((char *)v114 + v117);
        --v12;
      }
      while (v12);
      v120 = *(const char **)(a1 + 64);
      v121 = *(unsigned __int128 **)(a2 + 64);
      v122 = v15 + 15;
      v123 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v124 = 2 * (*(_DWORD *)(a1 + 36) - (int)v123);
      v125 = *(int *)(a2 + 36) - v123;
      v126 = v14;
      do
      {
        v127 = -(v122 & 0xFFFFFFF0);
        do
        {
          v128 = (unsigned __int128)vld2q_s8(v120);
          v120 += 32;
          *v121++ = v128;
          v127 += 16;
        }
        while (v127);
        v120 += v124;
        v121 = (unsigned __int128 *)((char *)v121 + v125);
        --v126;
      }
      while (v126);
      v129 = *(const char **)(a1 + 72);
      v130 = *(unsigned __int128 **)(a2 + 72);
      v131 = 2 * (*(_DWORD *)(a1 + 36) - (int)v123);
      v132 = *(int *)(a2 + 36) - (uint64_t)(int)v123;
      v133 = -(v122 & 0xFFFFFFF0);
      do
      {
        v134 = v133;
        do
        {
          v135 = (unsigned __int128)vld2q_s8(v129);
          v129 += 32;
          *v130++ = v135;
          v134 += 16;
        }
        while (v134);
        v129 += v131;
        v130 = (unsigned __int128 *)((char *)v130 + v132);
        --v14;
      }
      while (v14);
      return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
    }
    if (a3 == 3)
    {
      v47 = (char *)off_25453EA18 + 16 * (int)a4;
      v48 = *(const char **)(a1 + 56);
      v49 = *(int *)(a1 + 16);
      v50 = *(int8x16_t **)(a2 + 56);
      v51 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v52 = &v48[v49];
      a5.i8[0] = v47[6];
      a6.i8[0] = v47[8];
      v53 = 2 * ((int)v49 - (int)v51);
      v54 = *(int *)(a2 + 16) - v51;
      v55 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v56 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      do
      {
        v57 = -((v13 + 15) & 0xFFFFFFF0);
        do
        {
          v184 = vld2q_s8(v48);
          v48 += 32;
          v187 = vld2q_s8(v52);
          v52 += 32;
          *v50++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v187.val[1].i8, *(uint8x8_t *)v56.i8), *(uint8x8_t *)v187.val[0].i8, *(uint8x8_t *)v55.i8), 7uLL), *(uint8x8_t *)v56.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v184.val[1].i8, *(uint8x8_t *)v56.i8), *(uint8x8_t *)v184.val[0].i8, *(uint8x8_t *)v55.i8),
                                                 7uLL),
                                    *(uint8x8_t *)v55.i8),
                       7uLL),
                     (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v187.val[1], v56), (uint8x16_t)v187.val[0], v55), 7uLL), *(uint8x8_t *)v56.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v184.val[1], v56), (uint8x16_t)v184.val[0], v55), 7uLL), *(uint8x8_t *)v55.i8), 7uLL);
          v57 += 16;
        }
        while (v57);
        v48 += v53;
        v52 += v53;
        v50 = (int8x16_t *)((char *)v50 + v54);
        --v12;
      }
      while (v12);
      v58 = *(const char **)(a1 + 64);
      v59 = *(int *)(a1 + 36);
      v60 = *(int8x16_t **)(a2 + 64);
      v61 = v15 + 15;
      v62 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v63 = &v58[v59];
      v64 = 2 * ((int)v59 - (int)v62);
      v65 = *(int *)(a2 + 36) - v62;
      v66 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v67 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      v68 = v14;
      do
      {
        v69 = -(v61 & 0xFFFFFFF0);
        do
        {
          v185 = vld2q_s8(v58);
          v58 += 32;
          v188 = vld2q_s8(v63);
          v63 += 32;
          *v60++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v188.val[1].i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v188.val[0].i8, *(uint8x8_t *)v66.i8), 7uLL), *(uint8x8_t *)v67.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v185.val[1].i8, *(uint8x8_t *)v67.i8), *(uint8x8_t *)v185.val[0].i8, *(uint8x8_t *)v66.i8),
                                                 7uLL),
                                    *(uint8x8_t *)v66.i8),
                       7uLL),
                     (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v188.val[1], v67), (uint8x16_t)v188.val[0], v66), 7uLL), *(uint8x8_t *)v67.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v185.val[1], v67), (uint8x16_t)v185.val[0], v66), 7uLL), *(uint8x8_t *)v66.i8), 7uLL);
          v69 += 16;
        }
        while (v69);
        v58 += v64;
        v63 += v64;
        v60 = (int8x16_t *)((char *)v60 + v65);
        --v68;
      }
      while (v68);
      v70 = *(const char **)(a1 + 72);
      v71 = *(int *)(a1 + 36);
      v72 = *(int8x16_t **)(a2 + 72);
      v73 = &v70[v71];
      v74 = 2 * ((int)v71 - (int)v62);
      v75 = *(int *)(a2 + 36) - (uint64_t)(int)v62;
      v76 = -(v61 & 0xFFFFFFF0);
      v77 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v78 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      do
      {
        v79 = v76;
        do
        {
          v183 = vld2q_s8(v70);
          v70 += 32;
          v186 = vld2q_s8(v73);
          v73 += 32;
          *v72++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v186.val[1].i8, *(uint8x8_t *)v78.i8), *(uint8x8_t *)v186.val[0].i8, *(uint8x8_t *)v77.i8), 7uLL), *(uint8x8_t *)v78.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v183.val[1].i8, *(uint8x8_t *)v78.i8), *(uint8x8_t *)v183.val[0].i8, *(uint8x8_t *)v77.i8),
                                                 7uLL),
                                    *(uint8x8_t *)v77.i8),
                       7uLL),
                     (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v186.val[1], v78), (uint8x16_t)v186.val[0], v77), 7uLL), *(uint8x8_t *)v78.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v183.val[1], v78), (uint8x16_t)v183.val[0], v77), 7uLL), *(uint8x8_t *)v77.i8), 7uLL);
          v79 += 16;
        }
        while (v79);
        v70 += v74;
        v73 += v74;
        v72 = (int8x16_t *)((char *)v72 + v75);
        --v14;
      }
      while (v14);
      return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
    }
    v136 = (uint8x8_t *)malloc_type_malloc((int)(((v13 + 3) & 0xFFFFFFFC) * ((v10 + 13) & 0xFFFFFFF8)), 0xBAA3224CuLL);
    if (!v136)
      return vp9_scale_and_extend_frame_c(a1, a2, a3, a4);
    v30 = v136;
    v137 = 8 * a3;
    v138 = 16 * (int)a4;
    scale_plane_2_to_1_general(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 16), *(int8x8_t **)(a2 + 56), *(_DWORD *)(a2 + 16), v13, v12, v136, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v137) + v138));
    scale_plane_2_to_1_general(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 64), *(_DWORD *)(a2 + 36), v15, v14, v30, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v137) + v138));
    scale_plane_2_to_1_general(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 72), *(_DWORD *)(a2 + 36), v15, v14, v30, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v137) + v138));
  }
  else
  {
    v17 = 4 * v12;
    if (4 * v13 != v11 || v17 != v10)
    {
      v19 = 3 * v10;
      if (4 * v13 == 3 * v11 && v17 == v19)
      {
        v21 = (uint8x8_t *)malloc_type_malloc((int)(((v17 / 3 + 14) & 0xFFFFFFF8) * (6 * ((v13 + 5) / 6) + 2)), 0x39E68801uLL);
        if (v21)
        {
          v30 = v21;
          v31 = *(_QWORD **)(a1 + 56);
          v32 = *(_DWORD *)(a1 + 16);
          v33 = *(int8x8_t **)(a2 + 56);
          v34 = *(_DWORD *)(a2 + 16);
          if (a3 == 3)
          {
            scale_plane_4_to_3_bilinear(v31, v32, v33, v34, v13, v12, a4, v30, *(int8x8_t *)&v22, *(int8x8_t *)&v23, *(int8x8_t *)&v24, *(int8x8_t *)&v25, *(int8x8_t *)&v26, *(int8x8_t *)&v27);
            scale_plane_4_to_3_bilinear(*(_QWORD **)(a1 + 64), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 64), *(_DWORD *)(a2 + 36), v15, v14, a4, v30, v35, v36, v37, v38, v39, v40);
            scale_plane_4_to_3_bilinear(*(_QWORD **)(a1 + 72), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 72), *(_DWORD *)(a2 + 36), v15, v14, a4, v30, v41, v42, v43, v44, v45, v46);
          }
          else
          {
            v166 = 8 * a3;
            scale_plane_4_to_3_general((uint64_t)v31, v32, v33, v34, v13, v12, *(uint64_t *)((char *)&vp9_filter_kernels + v166), a4, v22, v23, v24, v25, v26, v27, v28, v29, v30);
            scale_plane_4_to_3_general(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 64), *(_DWORD *)(a2 + 36), v15, v14, *(uint64_t *)((char *)&vp9_filter_kernels + v166), a4, v167, v168, v169, v170, v171, v172, v173, v174, v30);
            scale_plane_4_to_3_general(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 72), *(_DWORD *)(a2 + 36), v15, v14, *(uint64_t *)((char *)&vp9_filter_kernels + v166), a4, v175, v176, v177, v178, v179, v180, v181, v182, v30);
          }
          goto LABEL_79;
        }
      }
      return vp9_scale_and_extend_frame_c(a1, a2, a3, a4);
    }
    if (!(_DWORD)a4)
    {
      v139 = *(const char **)(a1 + 56);
      v140 = *(unsigned __int128 **)(a2 + 56);
      v141 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v142 = 4 * (*(_DWORD *)(a1 + 16) - (int)v141);
      v143 = *(int *)(a2 + 16) - v141;
      do
      {
        v144 = -((v13 + 15) & 0xFFFFFFF0);
        do
        {
          v145 = (unsigned __int128)vld4q_s8(v139);
          v139 += 64;
          *v140++ = v145;
          v144 += 16;
        }
        while (v144);
        v139 += v142;
        v140 = (unsigned __int128 *)((char *)v140 + v143);
        --v12;
      }
      while (v12);
      v146 = *(const char **)(a1 + 64);
      v147 = *(unsigned __int128 **)(a2 + 64);
      v148 = v15 + 15;
      v149 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v150 = 4 * (*(_DWORD *)(a1 + 36) - (int)v149);
      v151 = *(int *)(a2 + 36) - v149;
      v152 = v14;
      do
      {
        v153 = -(v148 & 0xFFFFFFF0);
        do
        {
          v154 = (unsigned __int128)vld4q_s8(v146);
          v146 += 64;
          *v147++ = v154;
          v153 += 16;
        }
        while (v153);
        v146 += v150;
        v147 = (unsigned __int128 *)((char *)v147 + v151);
        --v152;
      }
      while (v152);
      v155 = *(const char **)(a1 + 72);
      v156 = *(unsigned __int128 **)(a2 + 72);
      v157 = 4 * (*(_DWORD *)(a1 + 36) - (int)v149);
      v158 = *(int *)(a2 + 36) - (uint64_t)(int)v149;
      v159 = -(v148 & 0xFFFFFFF0);
      do
      {
        v160 = v159;
        do
        {
          v161 = (unsigned __int128)vld4q_s8(v155);
          v155 += 64;
          *v156++ = v161;
          v160 += 16;
        }
        while (v160);
        v155 += v157;
        v156 = (unsigned __int128 *)((char *)v156 + v158);
        --v14;
      }
      while (v14);
      return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
    }
    if (a3 == 3)
    {
      v80 = (char *)off_25453EA18 + 16 * (int)a4;
      v81 = *(const char **)(a1 + 56);
      v82 = *(int *)(a1 + 16);
      v83 = *(int8x16_t **)(a2 + 56);
      v84 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
      v85 = &v81[v82];
      a5.i8[0] = v80[6];
      a6.i8[0] = v80[8];
      v86 = 4 * ((int)v82 - (int)v84);
      v87 = *(int *)(a2 + 16) - v84;
      v88 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v89 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      do
      {
        v90 = -((v13 + 15) & 0xFFFFFFF0);
        do
        {
          v190 = vld4q_s8(v81);
          v81 += 64;
          v192 = vld4q_s8(v85);
          v85 += 64;
          *v83++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v192.val[1].i8, *(uint8x8_t *)v89.i8), *(uint8x8_t *)v192.val[0].i8, *(uint8x8_t *)v88.i8), 7uLL), *(uint8x8_t *)v89.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v190.val[1].i8, *(uint8x8_t *)v89.i8), *(uint8x8_t *)v190.val[0].i8, *(uint8x8_t *)v88.i8),
                                                 7uLL),
                                    *(uint8x8_t *)v88.i8),
                       7uLL),
                     (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v192.val[1], v89), (uint8x16_t)v192.val[0], v88), 7uLL), *(uint8x8_t *)v89.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v190.val[1], v89), (uint8x16_t)v190.val[0], v88), 7uLL), *(uint8x8_t *)v88.i8), 7uLL);
          v90 += 16;
        }
        while (v90);
        v81 += v86;
        v85 += v86;
        v83 = (int8x16_t *)((char *)v83 + v87);
        --v12;
      }
      while (v12);
      v91 = *(const char **)(a1 + 64);
      v92 = *(int *)(a1 + 36);
      v93 = *(int8x16_t **)(a2 + 64);
      v94 = v15 + 15;
      v95 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
      v96 = &v91[v92];
      v97 = 4 * ((int)v92 - (int)v95);
      v98 = *(int *)(a2 + 36) - v95;
      v99 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v100 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      v101 = v14;
      do
      {
        v102 = -(v94 & 0xFFFFFFF0);
        do
        {
          v191 = vld4q_s8(v91);
          v91 += 64;
          v193 = vld4q_s8(v96);
          v96 += 64;
          *v93++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v193.val[1].i8, *(uint8x8_t *)v100.i8), *(uint8x8_t *)v193.val[0].i8, *(uint8x8_t *)v99.i8), 7uLL), *(uint8x8_t *)v100.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v191.val[1].i8, *(uint8x8_t *)v100.i8), *(uint8x8_t *)v191.val[0].i8, *(uint8x8_t *)v99.i8),
                                                 7uLL),
                                    *(uint8x8_t *)v99.i8),
                       7uLL),
                     (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v193.val[1], v100), (uint8x16_t)v193.val[0], v99), 7uLL), *(uint8x8_t *)v100.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v191.val[1], v100), (uint8x16_t)v191.val[0], v99), 7uLL), *(uint8x8_t *)v99.i8), 7uLL);
          v102 += 16;
        }
        while (v102);
        v91 += v97;
        v96 += v97;
        v93 = (int8x16_t *)((char *)v93 + v98);
        --v101;
      }
      while (v101);
      v103 = *(const char **)(a1 + 72);
      v104 = *(int *)(a1 + 36);
      v105 = *(int8x16_t **)(a2 + 72);
      v106 = &v103[v104];
      v107 = 4 * ((int)v104 - (int)v95);
      v108 = *(int *)(a2 + 36) - (uint64_t)(int)v95;
      v109 = -(v94 & 0xFFFFFFF0);
      v110 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v111 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      do
      {
        v112 = v109;
        do
        {
          v189 = vld4q_s8(v103);
          v103 += 64;
          v194 = vld4q_s8(v106);
          v106 += 64;
          *v105++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v194.val[1].i8, *(uint8x8_t *)v111.i8), *(uint8x8_t *)v194.val[0].i8, *(uint8x8_t *)v110.i8), 7uLL), *(uint8x8_t *)v111.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v189.val[1].i8, *(uint8x8_t *)v111.i8), *(uint8x8_t *)v189.val[0].i8, *(uint8x8_t *)v110.i8),
                                                  7uLL),
                                     *(uint8x8_t *)v110.i8),
                        7uLL),
                      (int16x8_t)vmlal_u8(vmull_u8((uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v194.val[1], v111), (uint8x16_t)v194.val[0], v110), 7uLL), *(uint8x8_t *)v111.i8), (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_high_u8(vmull_high_u8((uint8x16_t)v189.val[1], v111), (uint8x16_t)v189.val[0], v110), 7uLL), *(uint8x8_t *)v110.i8), 7uLL);
          v112 += 16;
        }
        while (v112);
        v103 += v107;
        v106 += v107;
        v105 = (int8x16_t *)((char *)v105 + v108);
        --v14;
      }
      while (v14);
      return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
    }
    v162 = (uint8x8_t *)malloc_type_malloc((int)(((v13 + 1) & 0xFFFFFFFE) * ((v10 + 13) & 0xFFFFFFF8)), 0xBD819BE9uLL);
    if (!v162)
      return vp9_scale_and_extend_frame_c(a1, a2, a3, a4);
    v30 = v162;
    v163 = 8 * a3;
    v164 = 16 * (int)a4;
    scale_plane_4_to_1_general(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 16), *(int8x8_t **)(a2 + 56), *(_DWORD *)(a2 + 16), v13, v12, v162, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v163) + v164));
    scale_plane_4_to_1_general(*(_QWORD *)(a1 + 64), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 64), *(_DWORD *)(a2 + 36), v15, v14, v30, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v163) + v164));
    scale_plane_4_to_1_general(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 36), *(int8x8_t **)(a2 + 72), *(_DWORD *)(a2 + 36), v15, v14, v30, *(int16x8_t *)(*(char **)((char *)&vp9_filter_kernels + v163) + v164));
  }
LABEL_79:
  free(v30);
  return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
}

uint64_t scale_plane_2_to_1_general(uint64_t a1, int a2, int8x8_t *a3, int a4, int a5, int a6, uint8x8_t *a7, int16x8_t a8)
{
  int8x16_t v8;
  int8x16_t v9;
  int16x8_t v10;
  int8x16_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8x8_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int8x16_t v59;
  int32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  uint8x8_t *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t result;
  int v78;
  int v79;
  uint64_t v80;
  uint8x8_t v81;
  uint8x8_t v82;
  uint8x8_t *v83;
  uint8x8_t v84;
  uint8x8_t *v85;
  uint8x8_t v86;
  uint8x8_t *v87;
  uint8x8_t v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  int v91;
  uint8x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;

  v22 = (a5 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v23 = (2 * a6 + 13) & 0xFFFFFFF8;
  v24 = a1 + -3 * a2 - 5;
  v25 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 0);
  v26 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 1);
  v27 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 2);
  v28 = vdupq_laneq_s16(a8, 5);
  v29 = vdupq_laneq_s16(a8, 6);
  v30 = vdupq_laneq_s16(a8, 7);
  v31 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 3);
  v32 = vdupq_laneq_s16(a8, 4);
  v33 = 6 * v22;
  v34 = 7 * v22;
  v35 = a7;
  do
  {
    v36 = 0;
    v8.i64[0] = *(_QWORD *)(v24 + 2);
    v37 = (uint64_t *)(v24 + 2 + a2);
    v9.i64[0] = *v37;
    v38 = (uint64_t *)((char *)v37 + a2);
    v10.i64[0] = *v38;
    v39 = (uint64_t *)((char *)v38 + a2);
    v11.i64[0] = *v39;
    v40 = (uint64_t *)((char *)v39 + a2);
    v12.i64[0] = *v40;
    v41 = (uint64_t *)((char *)v40 + a2);
    v13.i64[0] = *v41;
    v42 = (uint64_t *)((char *)v41 + a2);
    v14.i64[0] = *v42;
    v15.i64[0] = *(uint64_t *)((char *)v42 + a2);
    v43 = (int16x8_t)vzip1q_s8(v8, v9);
    v44 = (int16x8_t)vzip1q_s8((int8x16_t)v10, v11);
    v10 = (int16x8_t)vzip1q_s8((int8x16_t)v12, (int8x16_t)v13);
    v45 = (int16x8_t)vzip1q_s8((int8x16_t)v14, (int8x16_t)v15);
    v12 = (int32x4_t)vzip1q_s16(v43, v44);
    v13 = (int32x4_t)vzip2q_s16(v43, v44);
    v46 = (int32x4_t)vzip1q_s16(v10, v45);
    v8 = (int8x16_t)vzip1q_s32(v12, v46);
    v9 = (int8x16_t)vzip2q_s32(v12, v46);
    v11 = (int8x16_t)vzip1q_s32(v13, (int32x4_t)vzip2q_s16(v10, v45));
    v10.i64[0] = vextq_s8(v8, v8, 8uLL).u64[0];
    v12.i64[0] = vextq_s8(v9, v9, 8uLL).u64[0];
    v13.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
    do
    {
      v47 = *(_QWORD *)(v24 + 8);
      v24 += 8;
      v14.i64[0] = v47;
      v15.i64[0] = *(_QWORD *)(v24 + a2);
      v48 = (uint64_t *)(v24 + a2 + a2);
      v16.i64[0] = *v48;
      v17.i64[0] = *(uint64_t *)((char *)v48 + a2);
      v49 = (uint64_t *)((char *)v48 + a2 + a2);
      v18.i64[0] = *v49;
      v50 = (uint64_t *)((char *)v49 + a2);
      v19.i64[0] = *v50;
      v51 = (uint64_t *)((char *)v50 + a2);
      v20.i64[0] = *v51;
      v21.i64[0] = *(uint64_t *)((char *)v51 + a2);
      v52 = (int16x8_t)vzip1q_s8((int8x16_t)v14, (int8x16_t)v15);
      v53 = (int16x8_t)vzip1q_s8((int8x16_t)v16, (int8x16_t)v17);
      v54 = (int16x8_t)vzip1q_s8((int8x16_t)v18, (int8x16_t)v19);
      v55 = (int16x8_t)vzip1q_s8((int8x16_t)v20, (int8x16_t)v21);
      v56 = (int32x4_t)vzip1q_s16(v52, v53);
      v57 = (int32x4_t)vzip2q_s16(v52, v53);
      v58 = (int32x4_t)vzip1q_s16(v54, v55);
      v59 = (int8x16_t)vzip1q_s32(v56, v58);
      v60 = (int32x4_t)vzip2q_s16(v54, v55);
      v61 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
      v8 = (int8x16_t)vzip2q_s32(v56, v58);
      v62 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
      v9 = (int8x16_t)vzip1q_s32(v57, v60);
      v63 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
      v11 = (int8x16_t)vzip2q_s32(v57, v60);
      v57.i64[0] = vextq_s8(v59, v59, 8uLL).u64[0];
      v64 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
      v10 = (int16x8_t)vextq_s8(v8, v8, 8uLL);
      v65 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v12.i8);
      v66 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      v12 = (int32x4_t)vextq_s8(v9, v9, 8uLL);
      v13 = (int32x4_t)vextq_s8(v11, v11, 8uLL);
      v67 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8);
      v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v57.i8);
      v68 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v8.i8);
      v69 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
      v70 = vmlaq_s16(vmlaq_s16(vmulq_s16(v27, v63), v26, v65), v25, v62);
      v15 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v28, v66), v27, v62), v26, v64), v25, v61), v29, v67), v30, v14), vmulq_s16(v31, v65)), vmulq_s16(v32, v63));
      v71 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v70, v28, v14), v29, v68), v30, v69), vmulq_s16(v31, v66));
      v20 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
      v72 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v12.i8);
      *(int8x8_t *)v15.i8 = vqrshrun_n_s16(v15, 7uLL);
      v16 = vqaddq_s16(v71, vmulq_s16(v32, v67));
      v73 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v66), v25, v63), v27, v67), v28, v69), v29, v20), v30, v72), vmulq_s16(v31, v14)), vmulq_s16(v32, v68));
      v21 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      *(int8x8_t *)v16.i8 = vqrshrun_n_s16(v16, 7uLL);
      v19 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v25, v67), v26, v14), v27, v68), v28, v72), v29, (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8)), v30, v21);
      *(int8x8_t *)v14.i8 = vqrshrun_n_s16(v73, 7uLL);
      v18 = vmulq_s16(v32, v20);
      v17 = vqaddq_s16(vqaddq_s16(v19, vmulq_s16(v31, v69)), v18);
      *(int8x8_t *)v17.i8 = vqrshrun_n_s16(v17, 7uLL);
      *(int8x8_t *)v18.i8 = vtrn1_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v16.i8);
      *(int8x8_t *)v15.i8 = vtrn2_s8(*(int8x8_t *)v15.i8, *(int8x8_t *)v16.i8);
      *(int8x8_t *)v16.i8 = vtrn1_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v17.i8);
      *(int8x8_t *)v14.i8 = vtrn2_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v17.i8);
      *(int16x4_t *)v17.i8 = vtrn1_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v16.i8);
      *(int16x4_t *)v16.i8 = vtrn2_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v16.i8);
      *(int16x4_t *)v18.i8 = vtrn1_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v14.i8);
      v35->i32[v36 / 4] = v17.i32[0];
      *(__int32 *)((char *)v35->i32 + v22 + v36) = v18.i32[0];
      *(__int32 *)((char *)v35->i32 + 2 * v22 + v36) = v16.i32[0];
      *(int16x4_t *)v14.i8 = vtrn2_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v14.i8);
      *(__int32 *)((char *)v35->i32 + 3 * v22 + v36) = v14.i32[0];
      v35->i32[v22 + v36 / 4] = v17.i32[1];
      *(__int32 *)((char *)v35->i32 + 5 * v22 + v36) = v18.i32[1];
      *(__int32 *)((char *)v35->i32 + v33 + v36) = v16.i32[1];
      v74 = (uint8x8_t *)((char *)v35 + v34 + v36);
      v36 += 4;
      v74->i32[0] = v14.i32[1];
    }
    while (((a5 + 3) & 0xFFFFFFFC) != (_DWORD)v36);
    v24 += 8 * a2 - 2 * v22;
    v35 = (uint8x8_t *)((char *)v35 + v34 + v36);
    v23 -= 8;
  }
  while (v23);
  v75 = (a5 + 7) & 0xFFFFFFF8;
  v76 = (a6 + 3) & 0xFFFFFFFC;
  result = 4 * a4;
  v78 = v76 * a4;
  v79 = -v76;
  v80 = 8 - v78;
  do
  {
    v81 = *a7;
    v82 = *(uint8x8_t *)((char *)a7 + v22);
    v83 = (uint8x8_t *)((char *)a7 + v22 + v22);
    v84 = *v83;
    v85 = (uint8x8_t *)((char *)v83 + v22);
    v86 = *v85;
    v87 = (uint8x8_t *)((char *)v85 + v22);
    v88 = *v87;
    v89 = *(uint8x8_t *)((char *)v87 + v22);
    v90 = (uint8x8_t *)((char *)a7 + v33);
    v91 = v79;
    do
    {
      v92 = *(uint8x8_t *)((char *)v90 + v22);
      v93 = (int16x8_t)vmovl_u8(v81);
      v81 = *(uint8x8_t *)((char *)v90 + 2 * v22);
      v94 = (int16x8_t)vmovl_u8(v82);
      v82 = *(uint8x8_t *)((char *)v90 + 3 * v22);
      v95 = (int16x8_t)vmovl_u8(v84);
      v84 = *(uint8x8_t *)((char *)v90 + 4 * v22);
      v96 = (int16x8_t)vmovl_u8(v86);
      v86 = *(uint8x8_t *)((char *)v90 + 5 * v22);
      v97 = (int16x8_t)vmovl_u8(v88);
      v88 = *(uint8x8_t *)((char *)v90 + 6 * v22);
      v98 = (int16x8_t)vmovl_u8(v89);
      v89 = *(uint8x8_t *)((char *)v90 + 7 * v22);
      v99 = (int16x8_t)vmovl_u8(*v90);
      v90 += (int)v22;
      v100 = (int16x8_t)vmovl_u8(v92);
      v101 = (int16x8_t)vmovl_u8(v81);
      v102 = (int16x8_t)vmovl_u8(v82);
      v103 = (int16x8_t)vmovl_u8(v84);
      v104 = (int16x8_t)vmovl_u8(v86);
      *a3 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v28, v98), v27, v95), v26, v94), v25, v93), v29, v99), v30, v100), vmulq_s16(v31, v96)), vmulq_s16(v32, v97)), 7uLL);
      *(int8x8_t *)((char *)a3 + a4) = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v27, v97), v26, v96), v25, v95), v28, v100), v29, v101), v30, v102), vmulq_s16(v31, v98)), vmulq_s16(v32, v99)), 7uLL);
      *(int8x8_t *)((char *)a3 + 2 * a4) = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v26, v98), v25, v97), v27, v99), v28, v102), v29, v103), v30, v104), vmulq_s16(v31, v100)), vmulq_s16(v32, v101)), 7uLL);
      *(int8x8_t *)((char *)a3 + 3 * a4) = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v25, v99), v26, v100), v27, v101), v28, v104), v29, (int16x8_t)vmovl_u8(v88)), v30, (int16x8_t)vmovl_u8(v89)), vmulq_s16(v31, v102)), vmulq_s16(v32, v103)), 7uLL);
      a3 = (int8x8_t *)((char *)a3 + result);
      v91 += 4;
    }
    while (v91);
    a7 = (uint8x8_t *)((char *)v90 + 8 - ((2 * (a6 + 3)) | 6) * (int)v22);
    a3 = (int8x8_t *)((char *)a3 + v80);
    v75 -= 8;
  }
  while (v75);
  return result;
}

uint64_t scale_plane_4_to_1_general(uint64_t a1, int a2, int8x8_t *a3, int a4, int a5, int a6, uint8x8_t *a7, int16x8_t a8)
{
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int8x16_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint64_t v28;
  uint8x8_t *v29;
  unint64_t v30;
  int32x2_t *v31;
  int32x2_t v32;
  int32x2_t *v33;
  int32x2_t v34;
  int32x2_t *v35;
  int32x2_t v36;
  int32x2_t *v37;
  int32x2_t v38;
  int32x2_t *v39;
  int32x2_t v40;
  int32x2_t *v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x16_t v50;
  uint8x8_t v51;
  int8x16_t v52;
  uint8x8_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  uint8x8_t *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t result;
  int v86;
  uint64_t v87;
  uint8x8_t v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  uint8x8_t v91;
  uint8x8_t v92;
  uint8x8_t *v93;
  int v94;
  uint8x8_t v95;
  uint8x8_t v96;
  uint8x8_t v97;
  uint8x8_t v98;
  uint8x8_t v99;
  uint8x8_t v100;
  uint8x8_t v101;
  uint8x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;

  v16 = (a5 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = (4 * a6 + 13) & 0xFFFFFFF8;
  v18 = a1 + -3 * a2 - 7;
  v19 = 2 * v16;
  v20 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 0);
  v21 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 1);
  v22 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 2);
  v23 = vdupq_laneq_s16(a8, 5);
  v24 = vdupq_laneq_s16(a8, 6);
  v25 = vdupq_laneq_s16(a8, 7);
  v26 = vdupq_lane_s16(*(int16x4_t *)a8.i8, 3);
  v27 = vdupq_laneq_s16(a8, 4);
  v28 = 7 * v16;
  v29 = a7;
  do
  {
    v30 = 0;
    v31 = (int32x2_t *)(v18 + 4 + a2);
    v32 = *v31;
    v33 = (int32x2_t *)((char *)v31 + a2);
    v34 = *v33;
    v35 = (int32x2_t *)((char *)v33 + a2);
    v36 = *v35;
    v37 = (int32x2_t *)((char *)v35 + a2);
    v38 = *v37;
    v39 = (int32x2_t *)((char *)v37 + a2);
    v40 = *v39;
    v41 = (int32x2_t *)((char *)v39 + a2);
    v42 = (int16x4_t)vzip1_s32(*(int32x2_t *)(v18 + 4), v38);
    v43 = (int16x4_t)vzip1_s32(v32, v40);
    v44 = (int16x4_t)vzip1_s32(v34, *v41);
    v45 = (int16x4_t)vzip1_s32(v36, *(int32x2_t *)((char *)v41 + a2));
    v46 = (int8x8_t)vtrn1_s16(v42, v44);
    v47 = (int8x8_t)vtrn2_s16(v42, v44);
    v48 = (int8x8_t)vtrn1_s16(v43, v45);
    v49 = (int8x8_t)vtrn2_s16(v43, v45);
    *(int8x8_t *)v50.i8 = vtrn1_s8(v46, v48);
    v51 = (uint8x8_t)vtrn2_s8(v46, v48);
    *(int8x8_t *)v52.i8 = vtrn1_s8(v47, v49);
    v53 = (uint8x8_t)vtrn2_s8(v47, v49);
    do
    {
      v54 = *(_QWORD *)(v18 + 8);
      v18 += 8;
      v8.i64[0] = v54;
      v9.i64[0] = *(_QWORD *)(v18 + a2);
      v55 = (uint64_t *)(v18 + a2 + a2);
      v10.i64[0] = *v55;
      v56 = (uint64_t *)((char *)v55 + a2);
      v11.i64[0] = *v56;
      v57 = (uint64_t *)((char *)v56 + a2);
      v12.i64[0] = *v57;
      v58 = (uint64_t *)((char *)v57 + a2);
      v13.i64[0] = *v58;
      v59 = (uint64_t *)((char *)v58 + a2);
      v14.i64[0] = *v59;
      v15.i64[0] = *(uint64_t *)((char *)v59 + a2);
      v60 = (int16x8_t)vzip1q_s8((int8x16_t)v8, (int8x16_t)v9);
      v61 = (int16x8_t)vzip1q_s8((int8x16_t)v10, (int8x16_t)v11);
      v62 = (int16x8_t)vzip1q_s8((int8x16_t)v12, (int8x16_t)v13);
      v63 = (int16x8_t)vzip1q_s8((int8x16_t)v14, v15);
      v64 = (int32x4_t)vzip1q_s16(v60, v61);
      v65 = (int32x4_t)vzip2q_s16(v60, v61);
      v66 = (int32x4_t)vzip1q_s16(v62, v63);
      v67 = (int32x4_t)vzip2q_s16(v62, v63);
      v68 = (int8x16_t)vzip1q_s32(v64, v66);
      v69 = (int8x16_t)vzip2q_s32(v64, v66);
      v70 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
      v50 = (int8x16_t)vzip1q_s32(v65, v67);
      v71 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8);
      v52 = (int8x16_t)vzip2q_s32(v65, v67);
      v65.i64[0] = vextq_s8(v68, v68, 8uLL).u64[0];
      v67.i64[0] = vextq_s8(v69, v69, 8uLL).u64[0];
      v72 = (int16x8_t)vmovl_u8(v51);
      v51 = (uint8x8_t)vextq_s8(v50, v50, 8uLL).u64[0];
      v15 = vextq_s8(v52, v52, 8uLL);
      v73 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v68.i8);
      v74 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v65.i8);
      v75 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v69.i8);
      v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v67.i8);
      v76 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v22, v71), v21, v72), v20, v70), v23, v74), v24, v75), v25, v10), vmulq_s16(v26, (int16x8_t)vmovl_u8(v53)));
      v12 = vmulq_s16(v27, v73);
      v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v50.i8);
      v14 = (int16x8_t)vmovl_u8(v51);
      *(int8x8_t *)v76.i8 = vqrshrun_n_s16(vqaddq_s16(v76, v12), 7uLL);
      v11 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v73), v21, v74), v22, v75), v23, v14), v24, (int16x8_t)vmovl_u8(*(uint8x8_t *)v52.i8)), v25, (int16x8_t)vmovl_u8(*(uint8x8_t *)v15.i8));
      v9 = vmulq_s16(v27, v13);
      v8 = vqaddq_s16(vqaddq_s16(v11, vmulq_s16(v26, v10)), v9);
      *(int8x8_t *)v8.i8 = vqrshrun_n_s16(v8, 7uLL);
      *(int8x8_t *)v9.i8 = vtrn1_s8(*(int8x8_t *)v76.i8, *(int8x8_t *)v8.i8);
      *(int8x8_t *)v8.i8 = vtrn2_s8(*(int8x8_t *)v76.i8, *(int8x8_t *)v8.i8);
      v29->i16[v30 / 2] = v9.i16[0];
      *(__int16 *)((char *)v29->i16 + v16 + v30) = v8.i16[0];
      v29->i16[v16 + v30 / 2] = v9.i16[1];
      *(__int16 *)((char *)v29->i16 + 3 * v16 + v30) = v8.i16[1];
      v29->i16[v19 + v30 / 2] = v9.i16[2];
      *(__int16 *)((char *)v29->i16 + 5 * v16 + v30) = v8.i16[2];
      v29->i16[3 * v16 + v30 / 2] = v9.i16[3];
      v77 = (uint8x8_t *)((char *)v29 + v28 + v30);
      v53 = *(uint8x8_t *)v15.i8;
      v30 += 2;
      v77->i16[0] = v8.i16[3];
    }
    while (((a5 + 1) & 0xFFFFFFFE) != (_DWORD)v30);
    v18 += 8 * a2 - 4 * v16;
    v29 = (uint8x8_t *)((char *)v29 + v28 + v30);
    v17 -= 8;
  }
  while (v17);
  v78 = (a5 + 7) & 0xFFFFFFF8;
  v79 = (a6 + 1) & 0xFFFFFFFE;
  v80 = ((4 * (a6 + 1)) | 4) * v16;
  v81 = a4;
  v82 = 2 * a4;
  v83 = v79 * a4;
  v84 = 8 - v80;
  result = 6 * v16;
  v86 = -v79;
  v87 = 8 - v83;
  do
  {
    v88 = *a7;
    v89 = *(uint8x8_t *)((char *)a7 + v16);
    v90 = (uint8x8_t *)((char *)a7 + v16 + v16);
    v91 = *v90;
    v92 = *(uint8x8_t *)((char *)v90 + v16);
    v93 = (uint8x8_t *)((char *)a7 + v19 * 2);
    v94 = v86;
    do
    {
      v95 = *v93;
      v96 = *(uint8x8_t *)((char *)v93 + v16);
      v97 = *(uint8x8_t *)((char *)v93 + 2 * v16);
      v98 = *(uint8x8_t *)((char *)v93 + 3 * v16);
      v99 = *(uint8x8_t *)((char *)v93 + 4 * v16);
      v100 = *(uint8x8_t *)((char *)v93 + 5 * v16);
      v101 = *(uint8x8_t *)((char *)v93 + 6 * v16);
      v102 = *(uint8x8_t *)((char *)v93 + 7 * v16);
      v93 += (int)v16;
      v103 = (int16x8_t)vmovl_u8(v95);
      v104 = (int16x8_t)vmovl_u8(v96);
      v105 = (int16x8_t)vmovl_u8(v97);
      v106 = (int16x8_t)vmovl_u8(v98);
      *a3 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v22, (int16x8_t)vmovl_u8(v91)), v21, (int16x8_t)vmovl_u8(v89)), v20, (int16x8_t)vmovl_u8(v88)), v23, v104), v24, v105), v25, v106), vmulq_s16(v26, (int16x8_t)vmovl_u8(v92))), vmulq_s16(v27, v103)), 7uLL);
      *(int8x8_t *)((char *)a3 + v81) = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v20, v103), v21, v104), v22, v105), v23, (int16x8_t)vmovl_u8(v100)), v24, (int16x8_t)vmovl_u8(v101)), v25, (int16x8_t)vmovl_u8(v102)), vmulq_s16(v26, v106)), vmulq_s16(v27, (int16x8_t)vmovl_u8(v99))), 7uLL);
      a3 = (int8x8_t *)((char *)a3 + v82);
      v92 = v102;
      v91 = v101;
      v89 = v100;
      v88 = v99;
      v94 += 2;
    }
    while (v94);
    a7 = (uint8x8_t *)((char *)v93 + v84);
    a3 = (int8x8_t *)((char *)a3 + v87);
    v78 -= 8;
  }
  while (v78);
  return result;
}

uint64_t scale_plane_4_to_3_bilinear(_QWORD *a1, int a2, int8x8_t *a3, int a4, int a5, int a6, int a7, uint8x8_t *a8, int8x8_t a9, int8x8_t a10, int8x8_t a11, int8x8_t a12, int8x8_t a13, int8x8_t a14)
{
  int8x16_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint8x8_t *v31;
  uint8x8_t *v32;
  uint8x8_t *v33;
  uint8x8_t *v34;
  uint64_t v35;
  int8x16_t v36;
  uint8x8_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  uint8x8_t v41;
  uint8x8_t v42;
  int8x16_t v43;
  uint8x8_t *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int32x4_t v56;
  int32x4_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  unsigned int v84;
  uint64_t result;
  int v86;
  uint8x8_t v87;
  uint8x8_t v88;
  uint8x8_t v89;
  uint8x8_t v90;
  uint8x8_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint8x8_t *v94;
  uint8x8_t *v95;
  uint8x8_t *v96;
  uint8x8_t *v97;
  uint8x8_t *v98;
  uint8x8_t *v99;
  int v100;
  _QWORD *v101;
  uint8x8_t *v102;
  uint8x8_t *v103;
  uint8x8_t v104;
  uint8x8_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint8x8_t *v108;
  uint8x8_t *v109;
  int8x8_t v110;
  int8x8_t v111;
  int8x8_t v112;
  int8x8_t v113;
  int8x8_t v114;
  int v115;
  uint64_t v117;
  _BYTE v118[72];
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v23 = 6 * ((a5 + 5) / 6);
  v24 = v23 + 2;
  v25 = ((4 * a6 / 3) & 0xFFFFFFF8) + 8;
  v115 = a6 + 5;
  v26 = (char *)off_25453EA18 + 16 * a7;
  a9.i8[0] = v26[6];
  a10.i8[0] = v26[8];
  v27 = (char *)off_25453EA18 + 16 * ((a7 + 21) & 0xF);
  a11.i8[0] = v27[6];
  a12.i8[0] = v27[8];
  v28 = (char *)off_25453EA18 + 16 * ((a7 + 42) & 0xF);
  a13.i8[0] = v28[6];
  v29 = ((unint64_t)(34359738360 * ((a5 + 5) / 6)) >> 32) - 24 * ((a5 + 5) / 6);
  v30 = (int)((v29 >> 1) + (v29 >> 31) + 8 * a2 - 1);
  a14.i8[0] = v28[8];
  v31 = (uint8x8_t *)&v118[8 * ((a7 + 21) >> 4)];
  v32 = (uint8x8_t *)&v118[8 * ((a7 + 42) >> 4)];
  v33 = v31 + 4;
  v34 = v32 + 4;
  v117 = (int)v24;
  v35 = 7 * (int)v24;
  v36 = 0uLL;
  v37 = (uint8x8_t)vdup_lane_s8(a9, 0);
  v38 = (uint8x8_t)vdup_lane_s8(a10, 0);
  v39 = (uint8x8_t)vdup_lane_s8(a11, 0);
  v40 = (uint8x8_t)vdup_lane_s8(a12, 0);
  v41 = (uint8x8_t)vdup_lane_s8(a13, 0);
  v42 = (uint8x8_t)vdup_lane_s8(a14, 0);
  v43 = 0uLL;
  v44 = a8;
  do
  {
    v45 = 0;
    *(_QWORD *)v118 = *a1;
    v14.i64[0] = *(_QWORD *)v118;
    *(_QWORD *)&v118[8] = *(_QWORD *)((char *)a1 + a2);
    v15.i64[0] = *(_QWORD *)&v118[8];
    v46 = (_QWORD *)((char *)a1 + a2 + a2);
    *(_QWORD *)&v118[16] = *v46;
    v16.i64[0] = *(_QWORD *)&v118[16];
    v47 = (_QWORD *)((char *)v46 + a2);
    *(_QWORD *)&v118[24] = *v47;
    v17.i64[0] = *(_QWORD *)&v118[24];
    v48 = (_QWORD *)((char *)v47 + a2);
    *(_QWORD *)&v118[32] = *v48;
    v18.i64[0] = *(_QWORD *)&v118[32];
    v49 = (_QWORD *)((char *)v48 + a2);
    *(_QWORD *)&v118[40] = *v49;
    v19.i64[0] = *(_QWORD *)&v118[40];
    v50 = (_QWORD *)((char *)v49 + a2);
    *(_QWORD *)&v118[48] = *v50;
    v20.i64[0] = *(_QWORD *)&v118[48];
    v21.i64[0] = *(_QWORD *)((char *)v50 + a2);
    v51 = (_QWORD *)((char *)a1 + 1);
    v52 = (int16x8_t)vzip1q_s8(v14, v15);
    v53 = (int16x8_t)vzip1q_s8((int8x16_t)v16, v17);
    v54 = (int16x8_t)vzip1q_s8(v18, (int8x16_t)v19);
    v55 = (int16x8_t)vzip1q_s8((int8x16_t)v20, v21);
    v56 = (int32x4_t)vzip1q_s16(v52, v53);
    v57 = (int32x4_t)vzip2q_s16(v52, v53);
    v19 = (int32x4_t)vzip1q_s16(v54, v55);
    v16 = (int32x4_t)vzip2q_s16(v54, v55);
    v14 = (int8x16_t)vzip1q_s32(v56, v19);
    v17 = (int8x16_t)vzip2q_s32(v56, v19);
    v18 = (int8x16_t)vzip1q_s32(v57, v16);
    v15 = (int8x16_t)vzip2q_s32(v57, v16);
    *(int8x16_t *)v118 = v14;
    *(int8x16_t *)&v118[16] = v17;
    *(int8x16_t *)&v118[32] = v18;
    *(int8x16_t *)&v118[48] = v15;
    do
    {
      *(_QWORD *)&v118[8] = *v51;
      v15.i64[0] = *(_QWORD *)&v118[8];
      *(_QWORD *)&v118[16] = *(_QWORD *)((char *)v51 + a2);
      v16.i64[0] = *(_QWORD *)&v118[16];
      v58 = (_QWORD *)((char *)v51 + a2 + a2);
      *(_QWORD *)&v118[24] = *v58;
      v17.i64[0] = *(_QWORD *)&v118[24];
      v59 = (_QWORD *)((char *)v58 + a2);
      *(_QWORD *)&v118[32] = *v59;
      v18.i64[0] = *(_QWORD *)&v118[32];
      v60 = (_QWORD *)((char *)v59 + a2);
      *(_QWORD *)&v118[40] = *v60;
      v19.i64[0] = *(_QWORD *)&v118[40];
      v61 = (_QWORD *)((char *)v60 + a2);
      *(_QWORD *)&v118[48] = *v61;
      v20.i64[0] = *(_QWORD *)&v118[48];
      v62 = (_QWORD *)((char *)v61 + a2);
      *(_QWORD *)&v118[56] = *v62;
      v21.i64[0] = *(_QWORD *)&v118[56];
      v22.i64[0] = *(_QWORD *)((char *)v62 + a2);
      v63 = (int16x8_t)vzip1q_s8(v15, (int8x16_t)v16);
      v64 = (int16x8_t)vzip1q_s8(v17, v18);
      v65 = (int16x8_t)vzip1q_s8((int8x16_t)v19, (int8x16_t)v20);
      v66 = (int16x8_t)vzip1q_s8(v21, v22);
      v67 = (int32x4_t)vzip1q_s16(v63, v64);
      v68 = (int32x4_t)vzip2q_s16(v63, v64);
      v69 = (int32x4_t)vzip1q_s16(v65, v66);
      v70 = (int32x4_t)vzip2q_s16(v65, v66);
      *(int32x4_t *)&v118[8] = vzip1q_s32(v67, v69);
      *(int32x4_t *)&v118[24] = vzip2q_s32(v67, v69);
      *(int32x4_t *)&v118[40] = vzip1q_s32(v68, v70);
      *(int32x4_t *)&v118[56] = vzip2q_s32(v68, v70);
      v71 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v118[8], v38), *(uint8x8_t *)v14.i8, v37);
      *(int8x8_t *)v71.i8 = vrshrn_n_s16(v71, 7uLL);
      v72 = (int16x8_t)vmlal_u8(vmull_u8(v31[1], v40), *v31, v39);
      *(int8x8_t *)v72.i8 = vrshrn_n_s16(v72, 7uLL);
      v73 = (int16x8_t)vmlal_u8(vmull_u8(v32[1], v42), *v32, v41);
      v74 = (int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v118[40], v38), *(uint8x8_t *)&v118[32], v37);
      *(int8x8_t *)v14.i8 = vrshrn_n_s16(v73, 7uLL);
      *(int8x8_t *)v73.i8 = vrshrn_n_s16(v74, 7uLL);
      v75 = (int16x8_t)vmlal_u8(vmull_u8(v31[5], v40), *v33, v39);
      *(int8x8_t *)v74.i8 = vrshrn_n_s16(v75, 7uLL);
      v20 = (int16x8_t)vmlal_u8(vmull_u8(v32[5], v42), *v34, v41);
      *(int8x8_t *)v75.i8 = vrshrn_n_s16(v20, 7uLL);
      v76 = (int16x8_t)vzip1q_s8((int8x16_t)v71, (int8x16_t)v72);
      v77 = (int16x8_t)vzip1q_s8(v14, (int8x16_t)v73);
      v78 = (int16x8_t)vzip1q_s8((int8x16_t)v74, (int8x16_t)v75);
      v79 = (int16x8_t)vzip1q_s8(v36, v43);
      v80 = (int32x4_t)vzip1q_s16(v76, v77);
      v81 = (int32x4_t)vzip2q_s16(v76, v77);
      v82 = (int32x4_t)vzip1q_s16(v78, v79);
      v83 = (int32x4_t)vzip2q_s16(v78, v79);
      v16 = vzip1q_s32(v80, v82);
      v15 = (int8x16_t)vzip2q_s32(v80, v82);
      v17 = (int8x16_t)vzip1q_s32(v81, v83);
      v36 = (int8x16_t)vzip2q_s32(v81, v83);
      ++v51;
      v14 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
      v18 = vextq_s8(v15, v15, 8uLL);
      v19 = (int32x4_t)vextq_s8(v17, v17, 8uLL);
      v43 = vextq_s8(v36, v36, 8uLL);
      *(uint8x8_t *)((char *)v44 + v45) = *(uint8x8_t *)v16.i8;
      *(uint8x8_t *)((char *)v44 + v24 + v45) = *(uint8x8_t *)v14.i8;
      *(uint8x8_t *)((char *)v44 + 2 * v24 + v45) = *(uint8x8_t *)v15.i8;
      *(uint8x8_t *)((char *)v44 + 3 * (int)v24 + v45) = *(uint8x8_t *)v18.i8;
      *(uint8x8_t *)((char *)v44 + 4 * (int)v24 + v45) = *(uint8x8_t *)v17.i8;
      *(uint8x8_t *)((char *)v44 + 5 * (int)v24 + v45) = *(uint8x8_t *)v19.i8;
      *(uint8x8_t *)((char *)v44 + 6 * (int)v24 + v45) = *(uint8x8_t *)v36.i8;
      *(uint8x8_t *)((char *)v44 + v35 + v45) = *(uint8x8_t *)v43.i8;
      v14.i64[0] = *(_QWORD *)&v118[64];
      *(_QWORD *)v118 = *(_QWORD *)&v118[64];
      v45 += 6;
    }
    while (v23 != (_DWORD)v45);
    a1 = (_QWORD *)((char *)v51 + v30);
    v44 = (uint8x8_t *)((char *)v44 + (int)v35 + v45 + 2);
    v25 -= 8;
  }
  while (v25);
  v84 = (a5 + 7) & 0xFFFFFFF8;
  result = 4 * a4;
  v86 = v115 % 6 - a6 - 5;
  v87 = (uint8x8_t)vdup_lane_s8(a9, 0);
  v88 = (uint8x8_t)vdup_lane_s8(a10, 0);
  v89 = (uint8x8_t)vdup_lane_s8(a11, 0);
  v90 = (uint8x8_t)vdup_lane_s8(a12, 0);
  v91 = (uint8x8_t)vdup_lane_s8(a13, 0);
  v92 = (uint8x8_t)vdup_lane_s8(a14, 0);
  do
  {
    v93 = *a8;
    *(uint8x8_t *)v118 = *a8;
    v94 = (uint8x8_t *)((char *)a8 + v24);
    *(uint8x8_t *)&v118[8] = *(uint8x8_t *)((char *)a8 + v24);
    v95 = (uint8x8_t *)((char *)a8 + v24 + v24);
    *(uint8x8_t *)&v118[16] = *v95;
    v96 = (uint8x8_t *)((char *)v95 + v24);
    *(uint8x8_t *)&v118[24] = *v96;
    v97 = (uint8x8_t *)((char *)v96 + v24);
    *(uint8x8_t *)&v118[32] = *v97;
    v98 = (uint8x8_t *)((char *)v97 + v24);
    *(uint8x8_t *)&v118[40] = *v98;
    v99 = (uint8x8_t *)((char *)v98 + v24);
    *(uint8x8_t *)&v118[48] = *v99;
    *(uint8x8_t *)&v118[56] = *(uint8x8_t *)((char *)v99 + v24);
    v100 = v86;
    do
    {
      v101 = v94;
      *(uint8x8_t *)&v118[8] = *v94;
      v102 = (uint8x8_t *)((char *)v94 + v24 + v24);
      *(uint8x8_t *)&v118[16] = *(uint8x8_t *)((char *)v94 + v24);
      *(uint8x8_t *)&v118[24] = *v102;
      v103 = (uint8x8_t *)((char *)v102 + v24);
      v104 = *v103;
      v105 = (uint8x8_t *)((char *)v103 + v24);
      *(uint8x8_t *)&v118[32] = v104;
      *(uint8x8_t *)&v118[40] = *v105;
      v106 = (uint64_t *)((char *)v105 + v24);
      v107 = *v106;
      v108 = (uint8x8_t *)((char *)v106 + v24);
      *(_QWORD *)&v118[48] = v107;
      *(uint8x8_t *)&v118[56] = *v108;
      v109 = (uint8x8_t *)((char *)v108 + v24);
      *(uint8x8_t *)&v118[64] = *v109;
      v110 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v31[1], v90), *v31, v89), 7uLL);
      v111 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v118[40], v88), v104, v87), 7uLL);
      v112 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v32[1], v92), *v32, v91), 7uLL);
      v113 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v31[5], v90), *v33, v89), 7uLL);
      v114 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(v32[5], v92), *v34, v91), 7uLL);
      *a3 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)&v118[8], v88), v93, v87), 7uLL);
      *(int8x8_t *)((char *)a3 + a4) = v110;
      *(int8x8_t *)((char *)a3 + 2 * a4) = v112;
      *(int8x8_t *)((char *)a3 + 3 * a4) = v111;
      *(int8x8_t *)((char *)a3 + 4 * a4) = v113;
      *(int8x8_t *)((char *)a3 + 5 * a4) = v114;
      v93 = *(uint8x8_t *)&v118[64];
      *(_QWORD *)v118 = *(_QWORD *)&v118[64];
      a3 = (int8x8_t *)((char *)a3 + 6 * a4);
      v94 = (uint8x8_t *)((char *)v109 + v117 * 8 - 7 * v24);
      v100 += 6;
    }
    while (v100);
    a8 = (uint8x8_t *)((char *)&v101[v117] + 8 - ((int)v24 + (int)v24 * (24 * (v115 / 6) / 3)));
    a3 = (int8x8_t *)((char *)a3 + 8 - 6 * (v115 / 6) * a4);
    v84 -= 8;
  }
  while (v84);
  return result;
}

uint64_t scale_plane_4_to_3_general(uint64_t a1, int a2, int8x8_t *a3, int a4, int a5, int a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, int8x16_t a15, int8x16_t a16, uint8x8_t *a17)
{
  int8x16_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  uint8x8_t *v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int8x16_t v33;
  uint8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint8x8_t *v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint8x8_t *v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  unsigned int v102;
  uint64_t result;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  uint8x8_t v107;
  uint8x8_t v108;
  uint8x8_t *v109;
  uint8x8_t v110;
  uint8x8_t *v111;
  uint8x8_t v112;
  uint8x8_t *v113;
  uint8x8_t v114;
  uint8x8_t *v115;
  uint8x8_t v116;
  uint8x8_t *v117;
  uint8x8_t v118;
  uint8x8_t *v119;
  int v120;
  _QWORD *v121;
  uint8x8_t *v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  uint64_t *v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int v151;
  uint64_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int8x16_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  unsigned __int128 v180;
  unsigned __int128 v181;
  _BYTE v182[32];
  int8x16_t v183;
  int8x16_t v184;
  unint64_t v185;
  uint64_t v186;

  v21 = a17;
  v186 = *MEMORY[0x24BDAC8D0];
  v22 = 6 * ((a5 + 5) / 6);
  v23 = v22 + 2;
  v24 = (4 * a6 / 3 + 14) & 0xFFFFFFF8;
  v25 = *(int16x8_t *)(a7 + 16 * (a8 & 0xF));
  v151 = a6 + 5;
  v26 = *(int16x8_t *)(a7 + 16 * ((a8 + 21) & 0xF));
  v27 = *(int16x8_t *)(a7 + 16 * ((a8 + 42) & 0xF));
  v28 = a1 + -3 * a2 - 4;
  v29 = ((unint64_t)(34359738360 * ((a5 + 5) / 6)) >> 32) - 24 * ((a5 + 5) / 6);
  v173 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 1);
  v174 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 0);
  v30 = (int)((v29 >> 1) + (v29 >> 31) + 8 * a2);
  v31 = (int32x4_t)vdupq_lane_s16(*(int16x4_t *)v25.i8, 2);
  v32 = vdupq_laneq_s16(v25, 5);
  v164 = vdupq_laneq_s16(v25, 6);
  v165 = v32;
  v171 = vdupq_laneq_s16(v25, 7);
  v172 = (int16x8_t)v31;
  v169 = vdupq_laneq_s16(v25, 4);
  v170 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 3);
  v162 = vdupq_lane_s16(*(int16x4_t *)v26.i8, 1);
  v163 = vdupq_lane_s16(*(int16x4_t *)v26.i8, 0);
  v160 = vdupq_laneq_s16(v26, 5);
  v161 = vdupq_lane_s16(*(int16x4_t *)v26.i8, 2);
  v158 = vdupq_laneq_s16(v26, 7);
  v159 = vdupq_laneq_s16(v26, 6);
  v33 = (int8x16_t)vdupq_lane_s16(*(int16x4_t *)v26.i8, 3);
  v34 = (uint8x8_t *)&v179 + ((a8 + 21) >> 4);
  v35 = vdupq_laneq_s16(v26, 4);
  v156 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 0);
  v157 = (int16x8_t)v33;
  v36 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 1);
  v37 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 2);
  v154 = v37;
  v155 = v36;
  v38 = vdupq_laneq_s16(v27, 7);
  v39 = (uint8x8_t *)&v179 + ((a8 + 42) >> 4);
  v153 = (int)v23;
  v40 = 7 * (int)v23;
  v41 = 0uLL;
  v42 = 0uLL;
  v43 = a17;
  v168 = vdupq_laneq_s16(v27, 5);
  v177 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 3);
  v178 = v38;
  v175 = vdupq_laneq_s16(v27, 6);
  v176 = vdupq_laneq_s16(v27, 4);
  v44 = (int16x8_t)v33;
  v45 = v37;
  v46 = v36;
  do
  {
    v47 = 0;
    v179.i64[0] = *(_QWORD *)(v28 + 1);
    v37.i64[0] = v179.i64[0];
    v48 = (uint64_t *)(v28 + 1 + a2);
    v179.i64[1] = *v48;
    v36.i64[0] = v179.i64[1];
    v49 = (uint64_t *)((char *)v48 + a2);
    *(_QWORD *)&v180 = *v49;
    v27.i64[0] = v180;
    v50 = (_QWORD *)((char *)v49 + a2);
    *((_QWORD *)&v180 + 1) = *v50;
    v33.i64[0] = *((_QWORD *)&v180 + 1);
    v51 = (_QWORD *)((char *)v50 + a2);
    *(_QWORD *)&v181 = *v51;
    v31.i64[0] = v181;
    v52 = (_QWORD *)((char *)v51 + a2);
    *((_QWORD *)&v181 + 1) = *v52;
    v32.i64[0] = *((_QWORD *)&v181 + 1);
    v53 = (_QWORD *)((char *)v52 + a2);
    *(_QWORD *)v182 = *v53;
    a15.i64[0] = *(_QWORD *)v182;
    a16.i64[0] = *(_QWORD *)((char *)v53 + a2);
    v54 = (int16x8_t)vzip1q_s8((int8x16_t)v37, (int8x16_t)v36);
    v55 = (int16x8_t)vzip1q_s8((int8x16_t)v27, v33);
    v56 = (int16x8_t)vzip1q_s8((int8x16_t)v31, (int8x16_t)v32);
    v57 = (int16x8_t)vzip1q_s8(a15, a16);
    v31 = (int32x4_t)vzip1q_s16(v54, v55);
    v36 = vzip2q_s16(v54, v55);
    v32 = vzip1q_s16(v56, v57);
    v58 = (int32x4_t)vzip2q_s16(v56, v57);
    v37 = (int16x8_t)vzip1q_s32(v31, (int32x4_t)v32);
    v59 = vzip2q_s32(v31, (int32x4_t)v32);
    v27 = (int16x8_t)vzip1q_s32((int32x4_t)v36, v58);
    v33 = (int8x16_t)vzip2q_s32((int32x4_t)v36, v58);
    v36.i64[0] = v37.i64[1];
    v32.i64[0] = v59.i64[1];
    v179 = v37;
    v180 = (unsigned __int128)v59;
    v31.i64[0] = v27.i64[1];
    v181 = (unsigned __int128)v27;
    *(int8x16_t *)v182 = v33;
    do
    {
      v167 = v41;
      v60 = *(_QWORD *)(v28 + 8);
      v28 += 8;
      a15.i64[0] = v60;
      *(_QWORD *)&v182[8] = v60;
      v61 = (_QWORD *)(v28 + a2 + a2);
      *(_QWORD *)&v182[16] = *(_QWORD *)(v28 + a2);
      a16.i64[0] = *(_QWORD *)&v182[16];
      *(_QWORD *)&v182[24] = *v61;
      v41.i64[0] = *(_QWORD *)&v182[24];
      v62 = (_QWORD *)((char *)v61 + a2);
      v38.i64[0] = *v62;
      v63 = (uint64_t *)((char *)v62 + a2);
      v183.i64[0] = v38.i64[0];
      v183.i64[1] = *v63;
      v17.i64[0] = v183.i64[1];
      v64 = (uint64_t *)((char *)v63 + a2);
      v18.i64[0] = *v64;
      v65 = (uint64_t *)((char *)v64 + a2);
      v184.i64[0] = v18.i64[0];
      v184.i64[1] = *v65;
      v19.i64[0] = v184.i64[1];
      v20.i64[0] = *(uint64_t *)((char *)v65 + a2);
      v66 = (int16x8_t)vzip1q_s8(a15, a16);
      v67 = (int16x8_t)vzip1q_s8(v41, (int8x16_t)v38);
      v68 = (int16x8_t)vzip1q_s8(v17, (int8x16_t)v18);
      v69 = (int16x8_t)vzip1q_s8((int8x16_t)v19, (int8x16_t)v20);
      v70 = (int32x4_t)vzip1q_s16(v66, v67);
      v71 = (int32x4_t)vzip2q_s16(v66, v67);
      v72 = (int32x4_t)vzip1q_s16(v68, v69);
      v73 = (int32x4_t)vzip2q_s16(v68, v69);
      v74 = vzip1q_s32(v70, v72);
      v75 = (int8x16_t)vzip2q_s32(v70, v72);
      v76 = (int8x16_t)vzip1q_s32(v71, v73);
      v77 = (int8x16_t)vzip2q_s32(v71, v73);
      *(int32x4_t *)&v182[8] = v74;
      *(_QWORD *)&v182[24] = v75.i64[0];
      v183 = vextq_s8(v75, v76, 8uLL);
      v184 = vextq_s8(v76, v77, 8uLL);
      v185 = vextq_s8(v77, v77, 8uLL).u64[0];
      v18 = (int16x8_t)vmovl_u8(v34[4]);
      v78 = (int16x8_t)vmovl_u8(v34[5]);
      v166 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v164, (int16x8_t)vmovl_u8(*(uint8x8_t *)v33.i8)), v165, (int16x8_t)vmovl_u8(*(uint8x8_t *)v31.i8)), v172, (int16x8_t)vmovl_u8(*(uint8x8_t *)v59.i8)), v173, (int16x8_t)vmovl_u8(*(uint8x8_t *)v36.i8)), v174, (int16x8_t)vmovl_u8(*(uint8x8_t *)v37.i8)), v171, (int16x8_t)vmovl_u8(*(uint8x8_t *)v74.i8)), vmulq_s16(v170, (int16x8_t)vmovl_u8(*(uint8x8_t *)v32.i8))), vmulq_s16(v169, (int16x8_t)vmovl_u8(*(uint8x8_t *)v27.i8)));
      v20 = (int16x8_t)vmovl_u8(v34[6]);
      v79 = (int16x8_t)vmovl_u8(v34[7]);
      v36 = (int16x8_t)vmovl_u8(v39[1]);
      v17 = v42;
      v80 = (int16x8_t)vmovl_u8(v39[5]);
      v81 = vmlaq_s16(vmlaq_s16(vmulq_s16(v156, (int16x8_t)vmovl_u8(*v39)), v46, v36), v45, (int16x8_t)vmovl_u8(v39[2]));
      v36.i64[0] = *(_QWORD *)&v182[24];
      v59.i64[0] = v183.i64[0];
      v32 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v183.i8);
      v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v174, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v181)), v173, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v181 + 8))), v172, (int16x8_t)vmovl_u8(*(uint8x8_t *)v182)), v165, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v182[24])), v164, v32);
      v32.i64[0] = v183.i64[1];
      v37 = vmulq_s16(v170, (int16x8_t)vmovl_u8(*(uint8x8_t *)v74.i8));
      v83 = vqaddq_s16(vmlaq_s16(v82, v171, (int16x8_t)vmovl_u8((uint8x8_t)v183.u64[1])), v37);
      v37.i64[0] = v74.i64[1];
      v84 = vqaddq_s16(v83, vmulq_s16(v169, (int16x8_t)vmovl_u8((uint8x8_t)v74.u64[1])));
      v38 = (int16x8_t)vmovl_u8(v39[6]);
      v85 = (int16x8_t)vmovl_u8(v39[7]);
      v86 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v81, v168, v80), v175, v38), v178, v85), vmulq_s16(v177, (int16x8_t)vmovl_u8(v39[3])));
      v87 = (int16x8_t)vmovl_u8(v39[4]);
      v88 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v163, v18), v162, v78), v161, v20), v160, (int16x8_t)vmovl_u8(v34[9])), v159, (int16x8_t)vmovl_u8(v34[10])), v158, (int16x8_t)vmovl_u8(v34[11])), vmulq_s16(v44, v79));
      v89 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v163, (int16x8_t)vmovl_u8(*v34)), v162, (int16x8_t)vmovl_u8(v34[1])), v161, (int16x8_t)vmovl_u8(v34[2])), v160, v78), v159, v20), v158, v79), vmulq_s16(v44, (int16x8_t)vmovl_u8(v34[3]))), vmulq_s16(v35, v18));
      v90 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v156, v87), v46, v80), v45, v38), v168, (int16x8_t)vmovl_u8(v39[9])), v175, (int16x8_t)vmovl_u8(v39[10]));
      v38.i64[1] = v178.i64[1];
      v19 = vmlaq_s16(v90, v178, (int16x8_t)vmovl_u8(v39[11]));
      v91 = vqaddq_s16(v86, vmulq_s16(v176, v87));
      v92 = vqaddq_s16(v88, vmulq_s16(v35, (int16x8_t)vmovl_u8(v34[8])));
      v93 = vqaddq_s16(vqaddq_s16(v19, vmulq_s16(v177, v85)), vmulq_s16(v176, (int16x8_t)vmovl_u8(v39[8])));
      v88.i64[1] = v166.i64[1];
      *(int8x8_t *)v88.i8 = vqrshrun_n_s16(v166, 7uLL);
      *(int8x8_t *)v89.i8 = vqrshrun_n_s16(v89, 7uLL);
      v94 = (int16x8_t)vzip1q_s8((int8x16_t)v88, (int8x16_t)v89);
      *(int8x8_t *)v91.i8 = vqrshrun_n_s16(v91, 7uLL);
      *(int8x8_t *)v84.i8 = vqrshrun_n_s16(v84, 7uLL);
      v95 = (int16x8_t)vzip1q_s8((int8x16_t)v91, (int8x16_t)v84);
      *(int8x8_t *)v84.i8 = vqrshrun_n_s16(v92, 7uLL);
      *(int8x8_t *)v93.i8 = vqrshrun_n_s16(v93, 7uLL);
      v96 = (int16x8_t)vzip1q_s8((int8x16_t)v84, (int8x16_t)v93);
      a15 = vzip1q_s8(v17, v167);
      v97 = (int32x4_t)vzip1q_s16(v94, v95);
      v27 = vzip2q_s16(v94, v95);
      v98 = (int32x4_t)vzip1q_s16(v96, (int16x8_t)a15);
      v99 = (int8x16_t)vzip1q_s32(v97, v98);
      v100 = (int8x16_t)vzip2q_s32(v97, v98);
      *(uint8x8_t *)((char *)v43 + v47) = *(uint8x8_t *)v99.i8;
      a16 = vextq_s8(v99, v99, 8uLL);
      *(uint8x8_t *)((char *)v43 + v23 + v47) = *(uint8x8_t *)a16.i8;
      *(uint8x8_t *)((char *)v43 + 2 * v23 + v47) = *(uint8x8_t *)v100.i8;
      v31 = (int32x4_t)vzip2q_s16(v96, (int16x8_t)a15);
      *(uint8x8_t *)((char *)v43 + 3 * (int)v23 + v47) = (uint8x8_t)vextq_s8(v100, v100, 8uLL).u64[0];
      v101 = (int8x16_t)vzip1q_s32((int32x4_t)v27, v31);
      *(uint8x8_t *)((char *)v43 + 4 * (int)v23 + v47) = *(uint8x8_t *)v101.i8;
      v33 = vextq_s8(v101, v101, 8uLL);
      *(uint8x8_t *)((char *)v43 + 5 * (int)v23 + v47) = *(uint8x8_t *)v33.i8;
      v179.i64[0] = v37.i64[0];
      v179.i64[1] = v36.i64[0];
      v42 = (int8x16_t)vzip2q_s32((int32x4_t)v27, v31);
      v41 = vextq_s8(v42, v42, 8uLL);
      *(uint8x8_t *)((char *)v43 + 6 * (int)v23 + v47) = *(uint8x8_t *)v42.i8;
      v180 = __PAIR128__(v32.u64[0], v59.u64[0]);
      v31.i64[0] = v184.i64[1];
      v27.i64[0] = v184.i64[0];
      *(uint8x8_t *)((char *)v43 + v40 + v47) = *(uint8x8_t *)v41.i8;
      v181 = __PAIR128__(v31.u64[0], v27.u64[0]);
      v33.i64[0] = v185;
      *(_QWORD *)v182 = v185;
      v47 += 6;
    }
    while (v22 != (_DWORD)v47);
    v28 += v30;
    v43 = (uint8x8_t *)((char *)v43 + (int)v40 + v47 + 2);
    v24 -= 8;
  }
  while (v24);
  v102 = (a5 + 7) & 0xFFFFFFF8;
  result = 3 * a4;
  v105 = v160;
  v104 = v161;
  v106 = v159;
  do
  {
    v107 = *v21;
    *(uint8x8_t *)v179.i8 = *v21;
    v108 = *(uint8x8_t *)((char *)v21 + v23);
    v179.u64[1] = (unint64_t)v108;
    v109 = (uint8x8_t *)((char *)v21 + v23 + v23);
    v110 = *v109;
    *(uint8x8_t *)&v180 = *v109;
    v111 = (uint8x8_t *)((char *)v109 + v23);
    v112 = *v111;
    *((uint8x8_t *)&v180 + 1) = *v111;
    v113 = (uint8x8_t *)((char *)v111 + v23);
    v114 = *v113;
    *(uint8x8_t *)&v181 = *v113;
    v115 = (uint8x8_t *)((char *)v113 + v23);
    v116 = *v115;
    *((uint8x8_t *)&v181 + 1) = *v115;
    v117 = (uint8x8_t *)((char *)v115 + v23);
    v118 = *v117;
    *(uint8x8_t *)v182 = *v117;
    *(uint8x8_t *)&v182[8] = *(uint8x8_t *)((char *)v117 + v23);
    v119 = (uint8x8_t *)((char *)v21 + v40);
    v120 = v151 % 6 - a6 - 5;
    do
    {
      v121 = v119;
      *(uint8x8_t *)&v182[8] = *v119;
      *(uint8x8_t *)&v182[16] = *(uint8x8_t *)((char *)v119 + v23);
      v122 = (uint8x8_t *)((char *)v119 + v23 + v23);
      *(uint8x8_t *)&v182[24] = *v122;
      v123 = (uint64_t *)((char *)v122 + v23);
      v183.i64[0] = *v123;
      v124 = (uint64_t *)((char *)v123 + v23);
      v183.i64[1] = *v124;
      v125 = (uint64_t *)((char *)v124 + v23);
      v126 = v106;
      v127 = v105;
      v128 = v104;
      v184.i64[0] = *v125;
      v129 = (uint64_t *)((char *)v125 + v23);
      v184.i64[1] = *v129;
      v185 = *(uint64_t *)((char *)v129 + v23);
      v130 = (int16x8_t)vmovl_u8(v108);
      v131 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v182[8]);
      v132 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v164, (int16x8_t)vmovl_u8(v118)), v165, (int16x8_t)vmovl_u8(v116)), v172, (int16x8_t)vmovl_u8(v110)), v173, v130), v174, (int16x8_t)vmovl_u8(v107)), v171, v131), vmulq_s16(v170, (int16x8_t)vmovl_u8(v112))), vmulq_s16(v169, (int16x8_t)vmovl_u8(v114)));
      v133 = (int16x8_t)vmovl_u8(v34[5]);
      v134 = (int16x8_t)vmovl_u8(v34[6]);
      v135 = (int16x8_t)vmovl_u8(v34[7]);
      v136 = (int16x8_t)vmovl_u8(v39[5]);
      v137 = (int16x8_t)vmovl_u8(v39[6]);
      v138 = (int16x8_t)vmovl_u8(v39[7]);
      v139 = (int16x8_t)vmovl_u8(v34[4]);
      v140 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v165, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v182[24])), v164, (int16x8_t)vmovl_u8(*(uint8x8_t *)v183.i8)), v171, (int16x8_t)vmovl_u8((uint8x8_t)v183.u64[1])), v174, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v181)), v173, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)&v181 + 8))), v172, (int16x8_t)vmovl_u8(*(uint8x8_t *)v182)), vmulq_s16(v170, v131));
      v141 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v163, (int16x8_t)vmovl_u8(*v34)), v162, (int16x8_t)vmovl_u8(v34[1])), v128, (int16x8_t)vmovl_u8(v34[2])), v127, v133), v126, v134), v158, v135), vmulq_s16(v157, (int16x8_t)vmovl_u8(v34[3]))), vmulq_s16(v35, v139));
      v142 = vqaddq_s16(v140, vmulq_s16(v169, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v182[16])));
      v143 = (int16x8_t)vmovl_u8(v39[4]);
      v144 = vmulq_s16(v163, v139);
      v104 = v128;
      v105 = v127;
      v106 = v126;
      v145 = vmlaq_s16(v144, v162, v133);
      v146 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v156, (int16x8_t)vmovl_u8(*v39)), v155, (int16x8_t)vmovl_u8(v39[1])), v154, (int16x8_t)vmovl_u8(v39[2])), v168, v136), v175, v137), v178, v138), vmulq_s16(v177, (int16x8_t)vmovl_u8(v39[3]))), vmulq_s16(v176, v143));
      v147 = vmlaq_s16(vmulq_s16(v156, v143), v155, v136);
      v148 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v145, v104, v134), v105, (int16x8_t)vmovl_u8(v34[9])), v126, (int16x8_t)vmovl_u8(v34[10])), v158, (int16x8_t)vmovl_u8(v34[11])), vmulq_s16(v157, v135)), vmulq_s16(v35, (int16x8_t)vmovl_u8(v34[8])));
      v149 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v147, v154, v137), v168, (int16x8_t)vmovl_u8(v39[9])), v175, (int16x8_t)vmovl_u8(v39[10])), v178, (int16x8_t)vmovl_u8(v39[11])), vmulq_s16(v177, v138));
      v150 = vmulq_s16(v176, (int16x8_t)vmovl_u8(v39[8]));
      *a3 = vqrshrun_n_s16(v132, 7uLL);
      *(int8x8_t *)((char *)a3 + a4) = vqrshrun_n_s16(v141, 7uLL);
      *(int8x8_t *)((char *)a3 + 2 * a4) = vqrshrun_n_s16(v146, 7uLL);
      *(int8x8_t *)((char *)a3 + 3 * a4) = vqrshrun_n_s16(v142, 7uLL);
      *(int8x8_t *)((char *)a3 + 4 * a4) = vqrshrun_n_s16(v148, 7uLL);
      *(int8x8_t *)((char *)a3 + 5 * a4) = vqrshrun_n_s16(vqaddq_s16(v149, v150), 7uLL);
      v107 = *(uint8x8_t *)&v182[16];
      v108 = *(uint8x8_t *)&v182[24];
      v110 = *(uint8x8_t *)v183.i8;
      v179 = *(int16x8_t *)&v182[16];
      v112 = (uint8x8_t)v183.u64[1];
      v180 = (unsigned __int128)v183;
      v116 = (uint8x8_t)v184.u64[1];
      v114 = *(uint8x8_t *)v184.i8;
      v181 = (unsigned __int128)v184;
      v118 = (uint8x8_t)v185;
      *(_QWORD *)v182 = v185;
      a3 = (int8x8_t *)((char *)a3 + 6 * a4);
      v119 = (uint8x8_t *)((char *)v129 + v23 + v153 * 8 - 7 * v23);
      v120 += 6;
    }
    while (v120);
    v21 = (uint8x8_t *)((char *)&v121[v153] + 8 - (24 * (v151 / 6) / 3 + 7) * (int)v23);
    a3 = (int8x8_t *)((char *)a3 + 8 - 6 * (v151 / 6) * a4);
    v102 -= 8;
  }
  while (v102);
  return result;
}

int32x4_t *highbd_iadst16_neon(int32x4_t *result, int32x4_t *a2, int16x8_t *a3, int a4, char a5)
{
  int32x4_t v5;
  int32x4_t v6;
  int64x2_t v7;
  int32x4_t v8;
  int64x2_t v9;
  int32x4_t v10;
  int64x2_t v11;
  int32x4_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x4_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x4_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int64x2_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  uint64_t v195;
  int16x8_t *v196;
  int16x8_t *v197;
  int16x8_t *v198;
  int16x8_t *v199;
  int16x8_t *v200;
  int16x8_t *v201;
  int16x8_t *v202;
  int16x8_t *v203;
  int16x8_t *v204;
  int16x8_t *v205;
  int16x8_t *v206;
  int16x8_t *v207;
  int16x8_t *v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int64x2_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int32x4_t v288;
  int64x2_t v289;
  int32x4_t v290;
  int64x2_t v291;
  int32x4_t v292;
  int64x2_t v293;
  int32x4_t v294;
  int64x2_t v295;
  int32x4_t v296;
  int64x2_t v297;
  int32x4_t v298;
  int64x2_t v299;
  int32x4_t v300;
  int64x2_t v301;
  int32x4_t v302;
  int64x2_t v303;
  int32x4_t v304;
  int64x2_t v305;
  int32x4_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int32x4_t v309;
  int64x2_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int64x2_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int64x2_t v316;
  int64x2_t v317;
  int32x4_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int64x2_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int64x2_t v329;
  int64x2_t v330;
  int64x2_t v331;
  int32x4_t v332;
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int32x4_t v342;
  int64x2_t v343;
  int64x2_t v344;
  int32x4_t v345;
  int64x2_t v346;
  int64x2_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int32x4_t v355;
  int64x2_t v356;
  int64x2_t v357;
  int32x4_t v358;
  int64x2_t v359;
  int64x2_t v360;
  int32x4_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int32x4_t v364;
  int64x2_t v365;
  int32x4_t v366;
  int64x2_t v367;
  int64x2_t v368;
  int32x4_t v369;
  int64x2_t v370;
  int64x2_t v371;
  int32x4_t v372;
  int64x2_t v373;
  int64x2_t v374;
  int32x4_t v375;
  int64x2_t v376;
  int64x2_t v377;
  int32x4_t v378;
  int64x2_t v379;
  int64x2_t v380;
  int32x4_t v381;
  int64x2_t v382;
  int64x2_t v383;
  int32x4_t v384;

  v5 = result[1];
  v6 = result[5];
  v325 = result[4];
  v7 = (int64x2_t)vtrn1q_s32(*result, v325);
  v8 = result[9];
  v318 = result[8];
  v315 = result[12];
  v328 = result[13];
  v9 = (int64x2_t)vtrn1q_s32(v318, v315);
  v10 = result[17];
  v312 = result[16];
  v309 = result[20];
  v11 = (int64x2_t)vtrn1q_s32(v312, v309);
  v12 = (int32x4_t)vzip1q_s64(v7, v9);
  v304 = result[3];
  v306 = result[7];
  v13 = (int64x2_t)vtrn2q_s32(v304, v306);
  v302 = result[11];
  v300 = result[15];
  v14 = (int64x2_t)vtrn2q_s32(v302, v300);
  v15 = (int32x4_t)vzip2q_s64(v13, v14);
  v16 = vdupq_n_s32(0x3FECu);
  v17 = vdupq_n_s32(0x324u);
  v379 = vmlal_s32(vmull_s32(*(int32x2_t *)v12.i8, *(int32x2_t *)v17.i8), *(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8);
  v362 = vmlal_high_s32(vmull_high_s32(v12, v17), v15, v16);
  v18 = result[25];
  v288 = result[24];
  v294 = result[28];
  v332 = result[29];
  v19 = (int64x2_t)vtrn1q_s32(v288, v294);
  v20 = (int32x4_t)vzip1q_s64(v11, v19);
  v292 = result[19];
  v298 = result[23];
  v21 = (int64x2_t)vtrn2q_s32(v292, v298);
  v296 = result[27];
  v290 = result[31];
  v22 = (int64x2_t)vtrn2q_s32(v296, v290);
  v23 = (int32x4_t)vzip2q_s64(v21, v22);
  v365 = vmlal_s32(vmull_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v17.i8), *(int32x2_t *)v23.i8, *(int32x2_t *)v16.i8);
  v348 = vmlal_high_s32(vmull_high_s32(v20, v17), v23, v16);
  v376 = vmlsl_s32(vmull_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v17.i8), *(int32x2_t *)v12.i8, *(int32x2_t *)v16.i8);
  v367 = vmlsl_high_s32(vmull_high_s32(v15, v17), v12, v16);
  v370 = vmlsl_s32(vmull_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v17.i8), *(int32x2_t *)v20.i8, *(int32x2_t *)v16.i8);
  v346 = vmlsl_high_s32(vmull_high_s32(v23, v17), v20, v16);
  v24 = (int32x4_t)vzip2q_s64(v7, v9);
  v25 = (int32x4_t)vzip2q_s64(v11, v19);
  v26 = (int32x4_t)vzip1q_s64(v13, v14);
  v27 = (int32x4_t)vzip1q_s64(v21, v22);
  v28 = vdupq_n_s32(0x3E15u);
  v29 = vdupq_n_s32(0xF8Du);
  v382 = vmlal_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v29.i8), *(int32x2_t *)v26.i8, *(int32x2_t *)v28.i8);
  v269 = vmlal_high_s32(vmull_high_s32(v24, v29), v26, v28);
  v263 = vmlal_s32(vmull_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v29.i8), *(int32x2_t *)v27.i8, *(int32x2_t *)v28.i8);
  v373 = vmlsl_s32(vmull_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v29.i8), *(int32x2_t *)v24.i8, *(int32x2_t *)v28.i8);
  v259 = vmlsl_s32(vmull_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v29.i8), *(int32x2_t *)v25.i8, *(int32x2_t *)v28.i8);
  v261 = vmlsl_high_s32(vmull_high_s32(v26, v29), v24, v28);
  v265 = vmlsl_high_s32(vmull_high_s32(v27, v29), v25, v28);
  v267 = vmlal_high_s32(vmull_high_s32(v25, v29), v27, v28);
  v30 = result[2];
  v31 = result[6];
  v32 = result[10];
  v33 = result[14];
  v34 = vdupq_n_s32(0x39DBu);
  v35 = (int64x2_t)vtrn1q_s32(v5, v6);
  v36 = (int64x2_t)vtrn1q_s32(v8, v328);
  v37 = (int32x4_t)vzip1q_s64(v35, v36);
  v38 = (int64x2_t)vtrn2q_s32(v30, v31);
  v39 = (int64x2_t)vtrn2q_s32(v32, v33);
  v40 = (int32x4_t)vzip2q_s64(v38, v39);
  v41 = vdupq_n_s32(0x1B5Du);
  v359 = vmlal_s32(vmull_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v40.i8, *(int32x2_t *)v34.i8);
  v353 = vmlal_high_s32(vmull_high_s32(v37, v41), v40, v34);
  v42 = vmull_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v41.i8);
  v43 = vmull_high_s32(v40, v41);
  v44 = result[18];
  v45 = result[22];
  v46 = result[26];
  v47 = result[30];
  v48 = result[21];
  v49 = (int64x2_t)vtrn1q_s32(v10, v48);
  v50 = (int64x2_t)vtrn1q_s32(v18, v332);
  v51 = (int32x4_t)vzip1q_s64(v49, v50);
  v52 = (int64x2_t)vtrn2q_s32(v44, v45);
  v53 = (int64x2_t)vtrn2q_s32(v46, v47);
  v54 = (int32x4_t)vzip2q_s64(v52, v53);
  v356 = vmlal_s32(vmull_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v54.i8, *(int32x2_t *)v34.i8);
  v55 = vmull_s32(*(int32x2_t *)v54.i8, *(int32x2_t *)v41.i8);
  v56 = vmull_high_s32(v54, v41);
  v57 = vmlal_high_s32(vmull_high_s32(v51, v41), v54, v34);
  v339 = vmlsl_s32(v42, *(int32x2_t *)v37.i8, *(int32x2_t *)v34.i8);
  v343 = vmlsl_high_s32(v43, v37, v34);
  v336 = vmlsl_s32(v55, *(int32x2_t *)v51.i8, *(int32x2_t *)v34.i8);
  v341 = vmlsl_high_s32(v56, v51, v34);
  v58 = (int32x4_t)vzip2q_s64(v35, v36);
  v59 = (int32x4_t)vzip2q_s64(v49, v50);
  v60 = (int32x4_t)vzip1q_s64(v38, v39);
  v61 = (int32x4_t)vzip1q_s64(v52, v53);
  v62 = vdupq_n_s32(0x3368u);
  v63 = vdupq_n_s32(0x2620u);
  v257 = vmlal_s32(vmull_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v60.i8, *(int32x2_t *)v62.i8);
  v255 = vmlal_high_s32(vmull_high_s32(v58, v63), v60, v62);
  v253 = vmlal_s32(vmull_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v61.i8, *(int32x2_t *)v62.i8);
  v251 = vmlsl_s32(vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v58.i8, *(int32x2_t *)v62.i8);
  v252 = vmlal_high_s32(vmull_high_s32(v59, v63), v61, v62);
  v248 = vmlsl_s32(vmull_s32(*(int32x2_t *)v61.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v59.i8, *(int32x2_t *)v62.i8);
  v249 = vmlsl_high_s32(vmull_high_s32(v61, v63), v59, v62);
  v250 = vmlsl_high_s32(vmull_high_s32(v60, v63), v58, v62);
  v64 = (int64x2_t)vtrn2q_s32(v5, v6);
  v65 = (int64x2_t)vtrn2q_s32(v8, v328);
  v66 = (int64x2_t)vtrn2q_s32(v10, v48);
  v67 = (int64x2_t)vtrn2q_s32(v18, v332);
  v68 = (int64x2_t)vtrn1q_s32(v30, v31);
  v69 = (int64x2_t)vtrn1q_s32(v32, v33);
  v70 = (int64x2_t)vtrn1q_s32(v44, v45);
  v71 = (int64x2_t)vtrn1q_s32(v46, v47);
  v72 = (int32x4_t)vzip2q_s64(v64, v65);
  v73 = (int32x4_t)vzip1q_s64(v68, v69);
  v74 = vdupq_n_s32(0x2AFBu);
  v75 = vdupq_n_s32(0x2F6Cu);
  v231 = vmlal_s32(vmull_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v72.i8, *(int32x2_t *)v74.i8);
  v216 = vmlal_high_s32(vmull_high_s32(v73, v75), v72, v74);
  v76 = vmull_s32(*(int32x2_t *)v72.i8, *(int32x2_t *)v75.i8);
  v77 = vmull_high_s32(v72, v75);
  v78 = (int32x4_t)vzip2q_s64(v66, v67);
  v79 = (int32x4_t)vzip1q_s64(v70, v71);
  v228 = vmlal_s32(vmull_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v78.i8, *(int32x2_t *)v74.i8);
  v80 = vmlsl_s32(v76, *(int32x2_t *)v73.i8, *(int32x2_t *)v74.i8);
  v215 = vmlsl_high_s32(v77, v73, v74);
  v81 = vmlsl_s32(vmull_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v79.i8, *(int32x2_t *)v74.i8);
  v213 = vmlal_high_s32(vmull_high_s32(v79, v75), v78, v74);
  v214 = vmlsl_high_s32(vmull_high_s32(v78, v75), v79, v74);
  v82 = (int32x4_t)vzip1q_s64(v64, v65);
  v83 = (int32x4_t)vzip1q_s64(v66, v67);
  v84 = (int32x4_t)vzip2q_s64(v68, v69);
  v85 = (int32x4_t)vzip2q_s64(v70, v71);
  v86 = vdupq_n_s32(0x20E7u);
  v87 = vdupq_n_s32(0x36E5u);
  v271 = vmlal_s32(vmull_s32(*(int32x2_t *)v84.i8, *(int32x2_t *)v87.i8), *(int32x2_t *)v82.i8, *(int32x2_t *)v86.i8);
  v333 = vmlal_high_s32(vmull_high_s32(v84, v87), v82, v86);
  v321 = vmlal_s32(vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v87.i8), *(int32x2_t *)v83.i8, *(int32x2_t *)v86.i8);
  v212 = vmlsl_s32(vmull_s32(*(int32x2_t *)v82.i8, *(int32x2_t *)v87.i8), *(int32x2_t *)v84.i8, *(int32x2_t *)v86.i8);
  v210 = vmlsl_high_s32(vmull_high_s32(v82, v87), v84, v86);
  v329 = vmlsl_s32(vmull_s32(*(int32x2_t *)v83.i8, *(int32x2_t *)v87.i8), *(int32x2_t *)v85.i8, *(int32x2_t *)v86.i8);
  v244 = vmlsl_high_s32(vmull_high_s32(v83, v87), v85, v86);
  v246 = vmlal_high_s32(vmull_high_s32(v85, v87), v83, v86);
  v88 = (int64x2_t)vtrn2q_s32(*result, v325);
  v89 = (int64x2_t)vtrn2q_s32(v318, v315);
  v90 = (int64x2_t)vtrn2q_s32(v312, v309);
  v91 = (int64x2_t)vtrn2q_s32(v288, v294);
  v92 = (int64x2_t)vtrn1q_s32(v304, v306);
  v93 = (int64x2_t)vtrn1q_s32(v302, v300);
  v94 = (int64x2_t)vtrn1q_s32(v292, v298);
  v95 = (int64x2_t)vtrn1q_s32(v296, v290);
  v96 = (int32x4_t)vzip2q_s64(v88, v89);
  v97 = (int32x4_t)vzip1q_s64(v92, v93);
  v98 = vdupq_n_s32(0x1590u);
  v99 = vdupq_n_s32(0x3C42u);
  v226 = vmlal_s32(vmull_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v99.i8), *(int32x2_t *)v96.i8, *(int32x2_t *)v98.i8);
  v223 = vmlal_high_s32(vmull_high_s32(v97, v99), v96, v98);
  v100 = vmull_s32(*(int32x2_t *)v96.i8, *(int32x2_t *)v99.i8);
  v101 = vmull_high_s32(v96, v99);
  v102 = (int32x4_t)vzip2q_s64(v90, v91);
  v103 = (int32x4_t)vzip1q_s64(v94, v95);
  v224 = vmlal_s32(vmull_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v99.i8), *(int32x2_t *)v102.i8, *(int32x2_t *)v98.i8);
  v221 = vmlsl_s32(v100, *(int32x2_t *)v97.i8, *(int32x2_t *)v98.i8);
  v222 = vmlal_high_s32(vmull_high_s32(v103, v99), v102, v98);
  v219 = vmlsl_high_s32(v101, v97, v98);
  v220 = vmlsl_s32(vmull_s32(*(int32x2_t *)v102.i8, *(int32x2_t *)v99.i8), *(int32x2_t *)v103.i8, *(int32x2_t *)v98.i8);
  v218 = vmlsl_high_s32(vmull_high_s32(v102, v99), v103, v98);
  v104 = (int32x4_t)vzip1q_s64(v88, v89);
  v105 = (int32x4_t)vzip1q_s64(v90, v91);
  v106 = (int32x4_t)vzip2q_s64(v92, v93);
  v107 = (int32x4_t)vzip2q_s64(v94, v95);
  v108 = vdupq_n_s32(0x964u);
  v109 = vdupq_n_s32(0x3F4Fu);
  v211 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v109.i8), *(int32x2_t *)v104.i8, *(int32x2_t *)v108.i8);
  v209 = vmlal_high_s32(vmull_high_s32(v106, v109), v104, v108);
  v319 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v109.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  v316 = vmlal_high_s32(vmull_high_s32(v107, v109), v105, v108);
  v241 = vmlsl_s32(vmull_s32(*(int32x2_t *)v104.i8, *(int32x2_t *)v109.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v243 = vmlsl_high_s32(vmull_high_s32(v104, v109), v106, v108);
  v237 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v109.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8);
  v239 = vmlsl_high_s32(vmull_high_s32(v105, v109), v107, v108);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v379, v231), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v376, v80), 0xEuLL);
  *(int32x2_t *)v108.i8 = vdup_n_s32(0x3EC5u);
  *(int32x2_t *)v105.i8 = vdup_n_s32(0xC7Cu);
  v323 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8);
  v326 = vmlsl_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v365, v228), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v370, v81), 0xEuLL);
  v310 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v313 = vmlsl_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v362, v216), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v367, v215), 0xEuLL);
  v236 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v307 = vmlsl_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v348, v213), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v346, v214), 0xEuLL);
  v235 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v234 = vmlsl_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v105.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v359, v226), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v356, v224), 0xEuLL);
  *(int32x2_t *)v109.i8 = vrshrn_n_s64(vsubq_s64(v353, v223), 0xEuLL);
  *(int32x2_t *)v95.i8 = vrshrn_n_s64(vsubq_s64(v57, v222), 0xEuLL);
  *(int32x2_t *)v102.i8 = vrshrn_n_s64(vsubq_s64(v339, v221), 0xEuLL);
  *(int32x2_t *)v97.i8 = vrshrn_n_s64(vsubq_s64(v336, v220), 0xEuLL);
  *(int32x2_t *)v98.i8 = vrshrn_n_s64(vsubq_s64(v343, v219), 0xEuLL);
  *(int32x2_t *)v99.i8 = vrshrn_n_s64(vsubq_s64(v341, v218), 0xEuLL);
  v305 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v102.i8, *(int32x2_t *)v105.i8);
  v303 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v97.i8, *(int32x2_t *)v105.i8);
  v301 = vmlal_s32(vmull_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v98.i8, *(int32x2_t *)v105.i8);
  v299 = vmlsl_s32(vmull_s32(*(int32x2_t *)v102.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v105.i8);
  v295 = vmlsl_s32(vmull_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v105.i8);
  v297 = vmlal_s32(vmull_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v99.i8, *(int32x2_t *)v105.i8);
  v110 = vmlsl_s32(vmull_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v105.i8);
  v233 = vmlsl_s32(vmull_s32(*(int32x2_t *)v99.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v95.i8, *(int32x2_t *)v105.i8);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v382, v271), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v373, v212), 0xEuLL);
  *(int32x2_t *)v107.i8 = vdup_n_s32(0x238Eu);
  *(int32x2_t *)v108.i8 = vdup_n_s32(0x3537u);
  v289 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v107.i8);
  v291 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v107.i8);
  v293 = v110;
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v263, v321), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v259, v329), 0xEuLL);
  v286 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v107.i8);
  v287 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v107.i8);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v269, v333), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v261, v210), 0xEuLL);
  v284 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v107.i8);
  v285 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v107.i8);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v267, v246), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v265, v244), 0xEuLL);
  v282 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v107.i8);
  v283 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v107.i8);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v257, v211), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v253, v319), 0xEuLL);
  *(int32x2_t *)v109.i8 = vrshrn_n_s64(vsubq_s64(v255, v209), 0xEuLL);
  *(int32x2_t *)v95.i8 = vrshrn_n_s64(vsubq_s64(v252, v316), 0xEuLL);
  *(int32x2_t *)v102.i8 = vrshrn_n_s64(vsubq_s64(v251, v241), 0xEuLL);
  *(int32x2_t *)v97.i8 = vrshrn_n_s64(vsubq_s64(v248, v237), 0xEuLL);
  *(int32x2_t *)v98.i8 = vrshrn_n_s64(vsubq_s64(v250, v243), 0xEuLL);
  *(int32x2_t *)v99.i8 = vrshrn_n_s64(vsubq_s64(v249, v239), 0xEuLL);
  v281 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v102.i8, *(int32x2_t *)v108.i8);
  v280 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v97.i8, *(int32x2_t *)v108.i8);
  v279 = vmlal_s32(vmull_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v98.i8, *(int32x2_t *)v108.i8);
  v277 = vmlsl_s32(vmull_s32(*(int32x2_t *)v102.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  v278 = vmlal_s32(vmull_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v99.i8, *(int32x2_t *)v108.i8);
  v275 = vmlsl_s32(vmull_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v108.i8);
  v276 = vmlsl_s32(vmull_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v274 = vmlsl_s32(vmull_s32(*(int32x2_t *)v99.i8, *(int32x2_t *)v107.i8), *(int32x2_t *)v95.i8, *(int32x2_t *)v108.i8);
  v111 = vaddq_s64(v231, v379);
  v217 = vaddq_s64(v228, v365);
  v380 = vaddq_s64(v216, v362);
  v112 = vaddq_s64(v213, v348);
  v113 = vaddq_s64(v80, v376);
  v349 = vaddq_s64(v81, v370);
  v230 = vaddq_s64(v215, v367);
  v232 = v112;
  v229 = vaddq_s64(v214, v346);
  v272 = vaddq_s64(v271, v382);
  v114 = vaddq_s64(v333, v269);
  v115 = vaddq_s64(v246, v267);
  v334 = vaddq_s64(v212, v373);
  v363 = vaddq_s64(v329, v259);
  v225 = vaddq_s64(v210, v261);
  v245 = vaddq_s64(v244, v265);
  v116 = vaddq_s64(v226, v359);
  v383 = vaddq_s64(v223, v353);
  v368 = vaddq_s64(v222, v57);
  v371 = vaddq_s64(v219, v343);
  v344 = vaddq_s64(v218, v341);
  v247 = vaddq_s64(v209, v255);
  v227 = vaddq_s64(v316, v252);
  v117 = vaddq_s64(v241, v251);
  v118 = vaddq_s64(v237, v248);
  v238 = vaddq_s64(v243, v250);
  v240 = vaddq_s64(v239, v249);
  *(int32x2_t *)v110.i8 = vsub_s32(vrshrn_n_s64(v380, 0xEuLL), vrshrn_n_s64(v383, 0xEuLL));
  *(int32x2_t *)v77.i8 = vsub_s32(vrshrn_n_s64(v112, 0xEuLL), vrshrn_n_s64(v368, 0xEuLL));
  *(int32x2_t *)v80.i8 = vsub_s32(vrshrn_n_s64(v230, 0xEuLL), vrshrn_n_s64(v371, 0xEuLL));
  *(int32x2_t *)v15.i8 = vsub_s32(vrshrn_n_s64(v229, 0xEuLL), vrshrn_n_s64(v344, 0xEuLL));
  *(int32x2_t *)v103.i8 = vrshrn_n_s64(v111, 0xEuLL);
  *(int32x2_t *)v250.i8 = vrshrn_n_s64(v113, 0xEuLL);
  *(int32x2_t *)v251.i8 = vrshrn_n_s64(v116, 0xEuLL);
  *(int32x2_t *)v252.i8 = vrshrn_n_s64(vaddq_s64(v221, v339), 0xEuLL);
  *(int32x2_t *)v108.i8 = vdup_n_s32(0x3B21u);
  *(int32x2_t *)v95.i8 = vsub_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v251.i8);
  *(int32x2_t *)v104.i8 = vdup_n_s32(0x187Eu);
  *(int32x2_t *)v113.i8 = vsub_s32(*(int32x2_t *)v250.i8, *(int32x2_t *)v252.i8);
  v374 = vmlal_s32(vmull_s32(*(int32x2_t *)v113.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v95.i8, *(int32x2_t *)v108.i8);
  v377 = vmlsl_s32(vmull_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v113.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v116.i8 = vrshrn_n_s64(v217, 0xEuLL);
  *(int32x2_t *)v243.i8 = vrshrn_n_s64(v349, 0xEuLL);
  *(int32x2_t *)v248.i8 = vrshrn_n_s64(vaddq_s64(v224, v356), 0xEuLL);
  *(int32x2_t *)v249.i8 = vrshrn_n_s64(vaddq_s64(v220, v336), 0xEuLL);
  *(int32x2_t *)v106.i8 = vsub_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v248.i8);
  *(int32x2_t *)v109.i8 = vsub_s32(*(int32x2_t *)v243.i8, *(int32x2_t *)v249.i8);
  v354 = vmlal_s32(vmull_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8);
  v360 = vmlsl_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v108.i8);
  v350 = vmlal_s32(vmull_s32(*(int32x2_t *)v80.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v110.i8, *(int32x2_t *)v108.i8);
  v357 = vmlsl_s32(vmull_s32(*(int32x2_t *)v110.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v80.i8, *(int32x2_t *)v108.i8);
  v347 = vmlal_s32(vmull_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v77.i8, *(int32x2_t *)v108.i8);
  v351 = vmlsl_s32(vmull_s32(*(int32x2_t *)v77.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v15.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v106.i8 = vsub_s32(vrshrn_n_s64(v225, 0xEuLL), vrshrn_n_s64(v238, 0xEuLL));
  *(int32x2_t *)v109.i8 = vsub_s32(vrshrn_n_s64(v245, 0xEuLL), vrshrn_n_s64(v240, 0xEuLL));
  v119 = v114;
  *(int32x2_t *)v95.i8 = vsub_s32(vrshrn_n_s64(v114, 0xEuLL), vrshrn_n_s64(v247, 0xEuLL));
  v120 = v115;
  *(int32x2_t *)v114.i8 = vsub_s32(vrshrn_n_s64(v115, 0xEuLL), vrshrn_n_s64(v227, 0xEuLL));
  *(int32x2_t *)v112.i8 = vrshrn_n_s64(v272, 0xEuLL);
  *(int32x2_t *)v15.i8 = vrshrn_n_s64(v334, 0xEuLL);
  *(int32x2_t *)v224.i8 = vrshrn_n_s64(vaddq_s64(v211, v257), 0xEuLL);
  *(int32x2_t *)v32.i8 = vrshrn_n_s64(v117, 0xEuLL);
  *(int32x2_t *)v89.i8 = vsub_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v32.i8);
  *(int32x2_t *)v107.i8 = vsub_s32(*(int32x2_t *)v112.i8, *(int32x2_t *)v224.i8);
  v330 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8);
  v270 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v36.i8 = vrshrn_n_s64(vaddq_s64(v321, v263), 0xEuLL);
  *(int32x2_t *)v39.i8 = vrshrn_n_s64(v363, 0xEuLL);
  *(int32x2_t *)v80.i8 = vrshrn_n_s64(vaddq_s64(v319, v253), 0xEuLL);
  *(int32x2_t *)v117.i8 = vrshrn_n_s64(v118, 0xEuLL);
  *(int32x2_t *)v89.i8 = vsub_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v117.i8);
  *(int32x2_t *)v105.i8 = vsub_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v80.i8);
  v322 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8);
  v273 = vmlal_s32(vmull_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v104.i8);
  v242 = vmlsl_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v95.i8, *(int32x2_t *)v104.i8);
  v260 = vmlal_s32(vmull_s32(*(int32x2_t *)v114.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v104.i8);
  v264 = vmlsl_s32(vmull_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v114.i8, *(int32x2_t *)v104.i8);
  v266 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v89.i8 = vrshrn_n_s64(vsubq_s64(v323, v299), 0xEuLL);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v326, v305), 0xEuLL);
  v337 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8);
  v340 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v89.i8 = vrshrn_n_s64(vsubq_s64(v310, v295), 0xEuLL);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v313, v303), 0xEuLL);
  v320 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8);
  v335 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v89.i8 = vrshrn_n_s64(vsubq_s64(v236, v293), 0xEuLL);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v307, v301), 0xEuLL);
  v268 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8);
  v317 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v89.i8 = vrshrn_n_s64(vsubq_s64(v235, v233), 0xEuLL);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v234, v297), 0xEuLL);
  v254 = vmlal_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8);
  v256 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8);
  *(int32x2_t *)v113.i8 = vrshrn_n_s64(vsubq_s64(v289, v277), 0xEuLL);
  *(int32x2_t *)v111.i8 = vrshrn_n_s64(vsubq_s64(v286, v276), 0xEuLL);
  *(int32x2_t *)v106.i8 = vrshrn_n_s64(vsubq_s64(v284, v275), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v282, v274), 0xEuLL);
  *(int32x2_t *)v109.i8 = vrshrn_n_s64(vsubq_s64(v291, v281), 0xEuLL);
  *(int32x2_t *)v95.i8 = vrshrn_n_s64(vsubq_s64(v287, v280), 0xEuLL);
  *(int32x2_t *)v89.i8 = vrshrn_n_s64(vsubq_s64(v285, v279), 0xEuLL);
  *(int32x2_t *)v105.i8 = vrshrn_n_s64(vsubq_s64(v283, v278), 0xEuLL);
  v262 = vmlal_s32(vmull_s32(*(int32x2_t *)v113.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v109.i8, *(int32x2_t *)v104.i8);
  v258 = vmlal_s32(vmull_s32(*(int32x2_t *)v111.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v95.i8, *(int32x2_t *)v104.i8);
  v121 = vmlal_s32(vmull_s32(*(int32x2_t *)v106.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v104.i8);
  v122 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v105.i8, *(int32x2_t *)v104.i8);
  v123 = vmlsl_s32(vmull_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v113.i8, *(int32x2_t *)v104.i8);
  v124 = vmlsl_s32(vmull_s32(*(int32x2_t *)v95.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v111.i8, *(int32x2_t *)v104.i8);
  v125 = vmlsl_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v106.i8, *(int32x2_t *)v104.i8);
  v126 = vmlsl_s32(vmull_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v108.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8);
  v127 = vrshrn_high_n_s64(*(int32x2_t *)v112.i8, v119, 0xEuLL);
  v128 = vrshrn_high_n_s64(*(int32x2_t *)v15.i8, v225, 0xEuLL);
  v129 = vrshrn_high_n_s64(*(int32x2_t *)v80.i8, v227, 0xEuLL);
  v130 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v251.i8, v383, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v103.i8, v380, 0xEuLL));
  v131 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v248.i8, v368, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v116.i8, v232, 0xEuLL));
  v132 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v252.i8, v371, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v250.i8, v230, 0xEuLL));
  v133 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v249.i8, v344, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v243.i8, v229, 0xEuLL));
  v134 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v224.i8, v247, 0xEuLL), v127);
  v135 = vaddq_s32(v129, vrshrn_high_n_s64(*(int32x2_t *)v36.i8, v120, 0xEuLL));
  v136 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v32.i8, v238, 0xEuLL), v128);
  v137 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v117.i8, v240, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v39.i8, v245, 0xEuLL));
  v138 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v299, v323), 0xEuLL), vaddq_s64(v293, v236), 0xEuLL);
  v139 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v295, v310), 0xEuLL), vaddq_s64(v233, v235), 0xEuLL);
  v140 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v305, v326), 0xEuLL), vaddq_s64(v301, v307), 0xEuLL);
  v141 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v303, v313), 0xEuLL), vaddq_s64(v297, v234), 0xEuLL);
  v142 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v277, v289), 0xEuLL), vaddq_s64(v275, v284), 0xEuLL);
  v143 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v276, v286), 0xEuLL), vaddq_s64(v274, v282), 0xEuLL);
  v144 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v281, v291), 0xEuLL), vaddq_s64(v279, v285), 0xEuLL);
  v145 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v280, v287), 0xEuLL), vaddq_s64(v278, v283), 0xEuLL);
  v369 = vaddq_s32(v134, v130);
  v311 = vsubq_s32(v130, v134);
  v372 = vaddq_s32(v135, v131);
  v327 = vsubq_s32(v131, v135);
  v366 = vaddq_s32(v132, v136);
  v324 = vsubq_s32(v132, v136);
  v364 = vaddq_s32(v133, v137);
  v314 = vsubq_s32(v133, v137);
  v345 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v270, v374), 0xEuLL), vaddq_s64(v242, v350), 0xEuLL);
  v342 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v322, v354), 0xEuLL), vaddq_s64(v264, v347), 0xEuLL);
  v381 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v330, v377), 0xEuLL), vaddq_s64(v273, v357), 0xEuLL);
  v384 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v266, v360), 0xEuLL), vaddq_s64(v260, v351), 0xEuLL);
  v308 = vsubq_s64(v374, v270);
  v146 = vsubq_s64(v354, v322);
  v147 = vsubq_s64(v377, v330);
  v331 = vsubq_s64(v360, v266);
  v148 = vsubq_s64(v357, v273);
  v149 = vsubq_s64(v351, v260);
  v358 = vaddq_s32(v138, v142);
  v150 = vsubq_s32(v138, v142);
  v355 = vaddq_s32(v139, v143);
  v151 = vsubq_s32(v139, v143);
  v375 = vaddq_s32(v144, v140);
  v152 = vsubq_s32(v140, v144);
  v378 = vaddq_s32(v145, v141);
  v153 = vsubq_s32(v141, v145);
  v361 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v123, v337), 0xEuLL), vaddq_s64(v125, v268), 0xEuLL);
  v154 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v124, v320), 0xEuLL), vaddq_s64(v126, v254), 0xEuLL);
  v155 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v262, v340), 0xEuLL), vaddq_s64(v121, v317), 0xEuLL);
  v352 = vsubq_s64(v337, v123);
  v338 = vsubq_s64(v268, v125);
  v156 = vsubq_s64(v317, v121);
  v157 = vaddq_s32(v324, v311);
  v158 = vsubq_s32(v311, v324);
  v159 = vaddq_s32(v314, v327);
  v160 = vsubq_s32(v327, v314);
  v161 = vdupq_n_s32(0xFFFFD2BF);
  v162 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v157.i8, *(int32x2_t *)v161.i8), 0xEuLL), vmull_high_s32(v157, v161), 0xEuLL);
  v163 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v159.i8, *(int32x2_t *)v161.i8), 0xEuLL), vmull_high_s32(v159, v161), 0xEuLL);
  v164 = vdupq_n_s32(0x2D41u);
  v165 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v158.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v158, v164), 0xEuLL);
  v166 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v160.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v160, v164), 0xEuLL);
  *(int32x2_t *)v159.i8 = vrshrn_n_s64(v308, 0xEuLL);
  *(int32x2_t *)v138.i8 = vrshrn_n_s64(vsubq_s64(v350, v242), 0xEuLL);
  *(int32x2_t *)v139.i8 = vrshrn_n_s64(v147, 0xEuLL);
  *(int32x2_t *)v148.i8 = vrshrn_n_s64(v148, 0xEuLL);
  v167 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v159.i8), *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v148.i8, *(int32x2_t *)v138.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  *(int32x2_t *)v146.i8 = vrshrn_n_s64(v146, 0xEuLL);
  *(int32x2_t *)v101.i8 = vrshrn_n_s64(vsubq_s64(v347, v264), 0xEuLL);
  *(int32x2_t *)v125.i8 = vrshrn_n_s64(v331, 0xEuLL);
  *(int32x2_t *)v123.i8 = vrshrn_n_s64(v149, 0xEuLL);
  v168 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v146.i8), *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v123.i8, *(int32x2_t *)v101.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  *(int32x2_t *)v159.i8 = vsub_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v159.i8);
  *(int32x2_t *)v139.i8 = vsub_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v146.i8);
  v169 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v159.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v148.i8, *(int32x2_t *)v138.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  v170 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v123.i8, *(int32x2_t *)v101.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  v171 = vaddq_s32(v152, v150);
  v172 = vsubq_s32(v152, v150);
  v173 = vaddq_s32(v153, v151);
  v174 = vsubq_s32(v153, v151);
  v175 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v171.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v171, v164), 0xEuLL);
  v176 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v173.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v173, v164), 0xEuLL);
  v177 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v172.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v172, v164), 0xEuLL);
  v178 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v174.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_high_s32(v174, v164), 0xEuLL);
  *(int32x2_t *)v171.i8 = vrshrn_n_s64(v352, 0xEuLL);
  *(int32x2_t *)v139.i8 = vrshrn_n_s64(vsubq_s64(v320, v124), 0xEuLL);
  *(int32x2_t *)v125.i8 = vrshrn_n_s64(v338, 0xEuLL);
  *(int32x2_t *)v132.i8 = vrshrn_n_s64(vsubq_s64(v254, v126), 0xEuLL);
  *(int32x2_t *)v149.i8 = vrshrn_n_s64(vsubq_s64(v340, v262), 0xEuLL);
  *(int32x2_t *)v126.i8 = vrshrn_n_s64(vsubq_s64(v335, v258), 0xEuLL);
  *(int32x2_t *)v156.i8 = vrshrn_n_s64(v156, 0xEuLL);
  *(int32x2_t *)v117.i8 = vrshrn_n_s64(vsubq_s64(v256, v122), 0xEuLL);
  v179 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v149.i8, *(int32x2_t *)v171.i8), *(int32x2_t *)v161.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v125.i8), *(int32x2_t *)v161.i8), 0xEuLL);
  v180 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v126.i8, *(int32x2_t *)v139.i8), *(int32x2_t *)v161.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v117.i8, *(int32x2_t *)v132.i8), *(int32x2_t *)v161.i8), 0xEuLL);
  *(int32x2_t *)v161.i8 = vsub_s32(*(int32x2_t *)v139.i8, *(int32x2_t *)v126.i8);
  v181 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v171.i8, *(int32x2_t *)v149.i8), *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v125.i8, *(int32x2_t *)v156.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  v182 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v161.i8, *(int32x2_t *)v164.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v132.i8, *(int32x2_t *)v117.i8), *(int32x2_t *)v164.i8), 0xEuLL);
  v183 = vnegq_s32(v358);
  v184 = vnegq_s32(v355);
  v185 = vnegq_s32(v345);
  v186 = vnegq_s32(v342);
  v187 = vnegq_s32(v155);
  v188 = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v258, v335), 0xEuLL), vaddq_s64(v122, v256), 0xEuLL));
  v189 = vnegq_s32(v366);
  v190 = vnegq_s32(v364);
  if (a2)
  {
    *a2 = v369;
    a2[1] = v372;
    a2[4] = v183;
    a2[5] = v184;
    a2[8] = v361;
    a2[9] = v154;
    a2[12] = v185;
    a2[13] = v186;
    a2[16] = v167;
    a2[17] = v168;
    a2[20] = v179;
    a2[21] = v180;
    a2[24] = v175;
    a2[25] = v176;
    a2[28] = v162;
    a2[29] = v163;
    a2[32] = v165;
    a2[33] = v166;
    a2[36] = v177;
    a2[37] = v178;
    a2[40] = v181;
    a2[41] = v182;
    a2[44] = v169;
    a2[45] = v170;
    a2[48] = v381;
    a2[49] = v384;
    a2[52] = v187;
    a2[53] = v188;
    a2[56] = v375;
    a2[57] = v378;
    a2[60] = v189;
    a2[61] = v190;
  }
  else
  {
    v191 = vrshrn_high_n_s32(vrshrn_n_s32(v183, 6uLL), v184, 6uLL);
    v192 = vrshrn_high_n_s32(vrshrn_n_s32(v179, 6uLL), v180, 6uLL);
    v193 = vrshrn_high_n_s32(vrshrn_n_s32(v177, 6uLL), v178, 6uLL);
    v194 = vdupq_n_s16(~(-1 << a5));
    *a3 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v369, 6uLL), v372, 6uLL), *a3), v194), 0);
    v195 = 2 * a4;
    *(int16x8_t *)((char *)a3 + v195) = vqshluq_n_s16(vminq_s16(vqaddq_s16(v191, *(int16x8_t *)((char *)a3 + v195)), v194), 0);
    v196 = (int16x8_t *)((char *)a3 + v195 + v195);
    *v196 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v361, 6uLL), v154, 6uLL), *v196), v194), 0);
    v197 = (int16x8_t *)((char *)v196 + v195);
    *v197 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v185, 6uLL), v186, 6uLL), *v197), v194), 0);
    v198 = (int16x8_t *)((char *)v197 + v195);
    *v198 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v167, 6uLL), v168, 6uLL), *v198), v194), 0);
    v199 = (int16x8_t *)((char *)v198 + v195);
    *v199 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v192, *v199), v194), 0);
    v200 = (int16x8_t *)((char *)v199 + v195);
    *v200 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v175, 6uLL), v176, 6uLL), *v200), v194), 0);
    v201 = (int16x8_t *)((char *)v200 + v195);
    *v201 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v162, 6uLL), v163, 6uLL), *v201), v194), 0);
    v202 = (int16x8_t *)((char *)v201 + v195);
    *v202 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v165, 6uLL), v166, 6uLL), *v202), v194), 0);
    v203 = (int16x8_t *)((char *)v202 + v195);
    *v203 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v193, *v203), v194), 0);
    v204 = (int16x8_t *)((char *)v203 + v195);
    *v204 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v181, 6uLL), v182, 6uLL), *v204), v194), 0);
    v205 = (int16x8_t *)((char *)v204 + v195);
    *v205 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v169, 6uLL), v170, 6uLL), *v205), v194), 0);
    v206 = (int16x8_t *)((char *)v205 + v195);
    *v206 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v381, 6uLL), v384, 6uLL), *v206), v194), 0);
    v207 = (int16x8_t *)((char *)v206 + v195);
    *v207 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v187, 6uLL), v188, 6uLL), *v207), v194), 0);
    v208 = (int16x8_t *)((char *)v207 + v195);
    *v208 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v375, 6uLL), v378, 6uLL), *v208), v194), 0);
    *(int16x8_t *)((char *)v208 + v195) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v189, 6uLL), v190, 6uLL), *(int16x8_t *)((char *)v208 + v195)), v194), 0);
  }
  return result;
}

double vp9_highbd_iht4x4_16_add_neon(int16x8_t *a1, uint64_t *a2, int a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int16x8_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int32x4_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int32x4_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x4_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int16x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int16x4_t v112;
  int32x4_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x4_t v184;
  int16x8_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int64x2_t v194;
  int64x2_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int32x4_t v280;
  int64x2_t v281;
  int32x4_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int64x2_t v296;
  int64x2_t v297;
  int64x2_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  int64x2_t v308;
  int64x2_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int16x8_t v316;
  int16x8_t v317;
  uint64_t v318;
  int8x16_t v319;
  uint64_t *v320;
  int8x16_t v321;
  double result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  if (a5 == 8)
  {
    v9 = (int32x4_t)vuzp1q_s16(v5, v6);
    v10 = (int32x4_t)vuzp1q_s16(v7, v8);
    v11 = (int64x2_t)vtrn1q_s32(v9, v10);
    v12 = (int64x2_t)vtrn2q_s32(v9, v10);
    v13 = (int16x8_t)vzip1q_s64(v11, v12);
    v14 = (int16x8_t)vzip2q_s64(v11, v12);
    v15 = vtrn1q_s16(v13, v14);
    v16 = vtrn2q_s16(v13, v14);
    if (a4 != 2)
    {
      if (a4 == 1)
      {
        v104 = vdupq_n_s16(0x2D41u);
        v105 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v104.i8);
        v106 = vmlsl_high_s16(v105, v15, v104);
        v107 = vmlal_high_s16(v105, v15, v104);
        v108 = vdupq_n_s16(0x187Eu);
        v109 = vdupq_n_s16(0x3B21u);
        v110 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v108.i8), v16, v109);
        v111 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v109.i8), v16, v108);
        v112 = vrshrn_n_s32(v107, 0xEuLL);
        *(int16x4_t *)v107.i8 = vrshrn_n_s32(v111, 0xEuLL);
        *(int16x4_t *)v109.i8 = vsub_s16(v112, *(int16x4_t *)v107.i8);
        v113 = (int32x4_t)vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v107.i8, v110, 0xEuLL), vrshrn_high_n_s32(v112, v106, 0xEuLL));
        *(int16x4_t *)v108.i8 = vsub_s16(vrshrn_n_s32(v106, 0xEuLL), vrshrn_n_s32(v110, 0xEuLL));
        v108.i64[1] = v109.i64[0];
        v114 = (int64x2_t)vtrn1q_s32(v113, (int32x4_t)v108);
        v115 = (int64x2_t)vtrn2q_s32(v113, (int32x4_t)v108);
        v116 = (int16x8_t)vzip1q_s64(v114, v115);
        v117 = (int16x8_t)vzip2q_s64(v114, v115);
        v118 = vtrn1q_s16(v116, v117);
        v119 = vtrn2q_s16(v116, v117);
        v120 = vdupq_n_s16(0x14A3u);
        v121 = vdupq_n_s16(0x26C9u);
        *(int16x4_t *)v109.i8 = vdup_n_s16(0x3441u);
        v122 = vdupq_n_s16(0x3B6Cu);
        v123 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v120.i8), v118, v122), v119, v121);
        v124 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v121.i8), v118, v120), v119, v122);
        v125 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v118.i8), v118), v119), vdupq_n_s32(0x3441u));
        v126 = vmlal_s16(v123, *(int16x4_t *)v119.i8, *(int16x4_t *)v109.i8);
        v127 = vaddq_s32(vmlsl_s16(v123, *(int16x4_t *)v119.i8, *(int16x4_t *)v109.i8), v124);
        v102 = vrshrn_high_n_s32(vrshrn_n_s32(v126, 0xEuLL), vmlal_s16(v124, *(int16x4_t *)v119.i8, *(int16x4_t *)v109.i8), 0xEuLL);
      }
      else
      {
        if (!a4)
        {
          v17 = vdupq_n_s16(0x2D41u);
          v18 = vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v17.i8);
          v19 = vmlsl_high_s16(v18, v15, v17);
          v20 = vdupq_n_s16(0x187Eu);
          v21 = vmlal_high_s16(v18, v15, v17);
          v22 = vdupq_n_s16(0x3B21u);
          v23 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v20.i8), v16, v22);
          v24 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v22.i8), v16, v20);
          v25 = vrshrn_n_s32(v21, 0xEuLL);
          *(int16x4_t *)v24.i8 = vrshrn_n_s32(v24, 0xEuLL);
          v26 = vsub_s16(v25, *(int16x4_t *)v24.i8);
          v27 = (int32x4_t)vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v24.i8, v23, 0xEuLL), vrshrn_high_n_s32(v25, v19, 0xEuLL));
          *(int16x4_t *)v23.i8 = vsub_s16(vrshrn_n_s32(v19, 0xEuLL), vrshrn_n_s32(v23, 0xEuLL));
          v23.u64[1] = (unint64_t)v26;
          v28 = (int64x2_t)vtrn1q_s32(v27, v23);
          v29 = (int64x2_t)vtrn2q_s32(v27, v23);
          v30 = (int16x8_t)vzip1q_s64(v28, v29);
          v31 = (int16x8_t)vzip2q_s64(v28, v29);
          v32 = vtrn1q_s16(v30, v31);
          v33 = vtrn2q_s16(v30, v31);
          v34 = vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v17.i8);
          v35 = vmlsl_high_s16(v34, v32, v17);
          v36 = vmlal_high_s16(v34, v32, v17);
          v37 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v20.i8), v33, v22);
          v38 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v22.i8), v33, v20);
          v39 = vrshrn_n_s32(v36, 0xEuLL);
          v40 = vrshrn_n_s32(v35, 0xEuLL);
          v41 = vrshrn_n_s32(v38, 0xEuLL);
LABEL_12:
          v101 = vsub_s16(v39, v41);
          v102 = vaddq_s16(vrshrn_high_n_s32(v41, v37, 0xEuLL), vrshrn_high_n_s32(v39, v35, 0xEuLL));
          *(int16x4_t *)v103.i8 = vsub_s16(v40, vrshrn_n_s32(v37, 0xEuLL));
          v103.u64[1] = (unint64_t)v101;
LABEL_20:
          v202 = vrshrq_n_s16(v102, 4uLL);
          v203 = vrshrq_n_s16(v103, 4uLL);
          goto LABEL_27;
        }
        v182 = vdupq_n_s16(0x14A3u);
        v183 = vdupq_n_s16(0x26C9u);
        v184 = vdup_n_s16(0x3441u);
        v185 = vdupq_n_s16(0x3B6Cu);
        v186 = vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v15.i8), v15), v16);
        v187 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v182.i8), v15, v185), v16, v183);
        v188 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v183.i8), v15, v182), v16, v185);
        v189 = vdupq_n_s32(0x3441u);
        v190 = vmlal_s16(v187, *(int16x4_t *)v16.i8, v184);
        v191 = vaddq_s32(vmlsl_s16(v187, *(int16x4_t *)v16.i8, v184), v188);
        v192 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v190, 0xEuLL), vmlal_s16(v188, *(int16x4_t *)v16.i8, v184), 0xEuLL);
        v193 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(v186, v189), 0xEuLL), v191, 0xEuLL);
        v194 = (int64x2_t)vtrn1q_s32(v192, v193);
        v195 = (int64x2_t)vtrn2q_s32(v192, v193);
        v196 = (int16x8_t)vzip1q_s64(v194, v195);
        v197 = (int16x8_t)vzip2q_s64(v194, v195);
        v198 = vtrn1q_s16(v196, v197);
        v199 = vtrn2q_s16(v196, v197);
        v200 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v198.i8, *(int16x4_t *)v182.i8), v198, v185), v199, v183);
        v201 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v198.i8, *(int16x4_t *)v183.i8), v198, v182), v199, v185);
        v125 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v198.i8), v198), v199), v189);
        v127 = vaddq_s32(vmlsl_s16(v200, *(int16x4_t *)v199.i8, v184), v201);
        v102 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(v200, *(int16x4_t *)v199.i8, v184), 0xEuLL), vmlal_s16(v201, *(int16x4_t *)v199.i8, v184), 0xEuLL);
      }
      v103 = vrshrn_high_n_s32(vrshrn_n_s32(v125, 0xEuLL), v127, 0xEuLL);
      goto LABEL_20;
    }
    v78 = vdupq_n_s16(0x14A3u);
    v79 = vdupq_n_s16(0x26C9u);
    v80 = vdup_n_s16(0x3441u);
    v81 = vdupq_n_s16(0x3B6Cu);
    v82 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v78.i8), v15, v81), v16, v79);
    v83 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v79.i8), v15, v78), v16, v81);
    v84 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v15.i8), v15), v16), vdupq_n_s32(0x3441u));
    v85 = vmlal_s16(v82, *(int16x4_t *)v16.i8, v80);
    v86 = vaddq_s32(vmlsl_s16(v82, *(int16x4_t *)v16.i8, v80), v83);
    v87 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v85, 0xEuLL), vmlal_s16(v83, *(int16x4_t *)v16.i8, v80), 0xEuLL);
    v88 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xEuLL), v86, 0xEuLL);
    v89 = (int64x2_t)vtrn1q_s32(v87, v88);
    v90 = (int64x2_t)vtrn2q_s32(v87, v88);
    v91 = (int16x8_t)vzip1q_s64(v89, v90);
    v92 = (int16x8_t)vzip2q_s64(v89, v90);
    v93 = vtrn1q_s16(v91, v92);
    v94 = vtrn2q_s16(v91, v92);
    v95 = vdupq_n_s16(0x2D41u);
    v96 = vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v95.i8);
    v35 = vmlsl_high_s16(v96, v93, v95);
    v97 = vmlal_high_s16(v96, v93, v95);
    v98 = vdupq_n_s16(0x187Eu);
    v99 = vdupq_n_s16(0x3B21u);
    v37 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v98.i8), v94, v99);
    v100 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v94.i8, *(int16x4_t *)v99.i8), v94, v98);
    v39 = vrshrn_n_s32(v97, 0xEuLL);
    v40 = vrshrn_n_s32(v35, 0xEuLL);
    v41 = vrshrn_n_s32(v100, 0xEuLL);
    goto LABEL_12;
  }
  v42 = vtrn1q_s32((int32x4_t)v5, (int32x4_t)v6);
  v43 = (int64x2_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v6);
  if (a4 == 2)
  {
    v128 = (int64x2_t)vtrn1q_s32((int32x4_t)v7, (int32x4_t)v8);
    v129 = (int64x2_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
    v130 = (int32x4_t)vzip1q_s64((int64x2_t)v42, v128);
    v131 = (int32x4_t)vzip2q_s64((int64x2_t)v42, v128);
    v132 = (int32x4_t)vzip1q_s64(v43, v129);
    v133 = (int32x4_t)vzip2q_s64(v43, v129);
    v134 = vdupq_n_s32(0x14A3u);
    v135 = vdupq_n_s32(0x26C9u);
    v136 = vdupq_n_s32(0x3441u);
    v137 = vdupq_n_s32(0x3B6Cu);
    v138 = vaddq_s32(vsubq_s32(v130, v131), v133);
    v139 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v131.i8, *(int32x2_t *)v137.i8), *(int32x2_t *)v130.i8, *(int32x2_t *)v134.i8), *(int32x2_t *)v133.i8, *(int32x2_t *)v135.i8);
    v140 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v131, v137), v130, v134), v133, v135);
    v141 = vmlsl_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v130.i8, *(int32x2_t *)v135.i8), *(int32x2_t *)v131.i8, *(int32x2_t *)v134.i8), *(int32x2_t *)v133.i8, *(int32x2_t *)v137.i8);
    v142 = vmlsl_high_s32(vmlsl_high_s32(vmull_high_s32(v130, v135), v131, v134), v133, v137);
    v143 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v139, *(int32x2_t *)v132.i8, *(int32x2_t *)v136.i8), 0xEuLL), vmlal_high_s32(v140, v132, v136), 0xEuLL);
    v144 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v141, *(int32x2_t *)v132.i8, *(int32x2_t *)v136.i8), 0xEuLL), vmlal_high_s32(v142, v132, v136), 0xEuLL);
    v145 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v138.i8, *(int32x2_t *)v136.i8), 0xEuLL), vmull_high_s32(v138, v136), 0xEuLL);
    v146 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(vmlsl_s32(v139, *(int32x2_t *)v132.i8, *(int32x2_t *)v136.i8), v141), 0xEuLL), vaddq_s64(vmlsl_high_s32(v140, v132, v136), v142), 0xEuLL);
    v147 = vtrn1q_s32(v143, v144);
    v148 = (int64x2_t)vtrn2q_s32(v143, v144);
    v149 = (int64x2_t)vtrn1q_s32(v145, v146);
    v150 = (int64x2_t)vtrn2q_s32(v145, v146);
    v151 = (int32x4_t)vzip1q_s64(v148, v150);
    v152 = (int32x4_t)vzip2q_s64(v148, v150);
    v153 = (int32x4_t)vzip2q_s64((int64x2_t)v147, v149);
    v147.i64[1] = v149.i64[0];
    v154 = vaddq_s32(v147, v153);
    v155 = vsubq_s32(v147, v153);
    v156 = vdupq_n_s32(0x2D41u);
    if (a5 == 10)
    {
      v157 = vmulq_s32(v154, v156);
      v158 = vmulq_s32(v155, v156);
      v159 = vdupq_n_s32(0x187Eu);
      v160 = vmlaq_s32(vmulq_s32(v151, vdupq_n_s32(0x3B21u)), v152, v159);
      v161 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v151, v159), v152, vdupq_n_s32(0xFFFFC4DF)), 0xEuLL);
      v162 = vrshrq_n_s32(v160, 0xEuLL);
      v74 = vsubq_s32(vrshrq_n_s32(v158, 0xEuLL), v161);
      v75 = vrsraq_n_s32(v161, v158, 0xEuLL);
      v76 = vsubq_s32(vrshrq_n_s32(v157, 0xEuLL), v162);
      v77 = vrsraq_n_s32(v162, v157, 0xEuLL);
    }
    else
    {
      v250 = vdupq_n_s32(0x187Eu);
      v251 = vdupq_n_s32(0x3B21u);
      v252 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v154.i8, *(int32x2_t *)v156.i8), 0xEuLL), vmull_high_s32(v154, v156), 0xEuLL);
      v253 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v155.i8, *(int32x2_t *)v156.i8), 0xEuLL), vmull_high_s32(v155, v156), 0xEuLL);
      v254 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v151.i8, *(int32x2_t *)v250.i8), *(int32x2_t *)v152.i8, *(int32x2_t *)v251.i8), 0xEuLL), vmlsl_high_s32(vmull_high_s32(v151, v250), v152, v251), 0xEuLL);
      v255 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v250.i8), *(int32x2_t *)v151.i8, *(int32x2_t *)v251.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v152, v250), v151, v251), 0xEuLL);
      v77 = vaddq_s32(v255, v252);
      v75 = vaddq_s32(v254, v253);
      v74 = vsubq_s32(v253, v254);
      v76 = vsubq_s32(v252, v255);
    }
  }
  else if (a4 == 1)
  {
    v163 = (int64x2_t)vtrn1q_s32((int32x4_t)v7, (int32x4_t)v8);
    v164 = (int64x2_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
    v165 = (int32x4_t)vzip1q_s64(v43, v164);
    v166 = (int32x4_t)vzip2q_s64(v43, v164);
    v167 = (int32x4_t)vzip2q_s64((int64x2_t)v42, v163);
    v42.i64[1] = v163.i64[0];
    v168 = vaddq_s32(v42, v167);
    v169 = vsubq_s32(v42, v167);
    v170 = vdupq_n_s32(0x2D41u);
    if (a5 == 10)
    {
      v171 = vmulq_s32(v168, v170);
      v172 = vmulq_s32(v169, v170);
      v173 = vdupq_n_s32(0x187Eu);
      v174 = vmulq_s32(v165, v173);
      v175 = vmlaq_s32(vmulq_s32(v165, vdupq_n_s32(0x3B21u)), v166, v173);
      v176 = vrshrq_n_s32(vmlaq_s32(v174, v166, vdupq_n_s32(0xFFFFC4DF)), 0xEuLL);
      v177 = vrshrq_n_s32(v175, 0xEuLL);
      v178 = vsubq_s32(vrshrq_n_s32(v172, 0xEuLL), v176);
      v179 = vrsraq_n_s32(v176, v172, 0xEuLL);
      v180 = vsubq_s32(vrshrq_n_s32(v171, 0xEuLL), v177);
      v181 = vrsraq_n_s32(v177, v171, 0xEuLL);
    }
    else
    {
      v256 = vdupq_n_s32(0x187Eu);
      v257 = vdupq_n_s32(0x3B21u);
      v258 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v168.i8, *(int32x2_t *)v170.i8), 0xEuLL), vmull_high_s32(v168, v170), 0xEuLL);
      v259 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v169.i8, *(int32x2_t *)v170.i8), 0xEuLL), vmull_high_s32(v169, v170), 0xEuLL);
      v260 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v165.i8, *(int32x2_t *)v256.i8), *(int32x2_t *)v166.i8, *(int32x2_t *)v257.i8), 0xEuLL), vmlsl_high_s32(vmull_high_s32(v165, v256), v166, v257), 0xEuLL);
      v261 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v166.i8, *(int32x2_t *)v256.i8), *(int32x2_t *)v165.i8, *(int32x2_t *)v257.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v166, v256), v165, v257), 0xEuLL);
      v181 = vaddq_s32(v261, v258);
      v179 = vaddq_s32(v260, v259);
      v178 = vsubq_s32(v259, v260);
      v180 = vsubq_s32(v258, v261);
    }
    v262 = (int64x2_t)vtrn1q_s32(v181, v179);
    v263 = (int64x2_t)vtrn2q_s32(v181, v179);
    v264 = (int64x2_t)vtrn1q_s32(v178, v180);
    v265 = (int64x2_t)vtrn2q_s32(v178, v180);
    v266 = (int32x4_t)vzip1q_s64(v262, v264);
    v267 = (int32x4_t)vzip2q_s64(v262, v264);
    v268 = (int32x4_t)vzip1q_s64(v263, v265);
    v269 = (int32x4_t)vzip2q_s64(v263, v265);
    v270 = vdupq_n_s32(0x14A3u);
    v271 = vdupq_n_s32(0x26C9u);
    v272 = vdupq_n_s32(0x3441u);
    v273 = vdupq_n_s32(0x3B6Cu);
    v274 = vaddq_s32(vsubq_s32(v266, v267), v269);
    v275 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v267.i8, *(int32x2_t *)v273.i8), *(int32x2_t *)v266.i8, *(int32x2_t *)v270.i8), *(int32x2_t *)v269.i8, *(int32x2_t *)v271.i8);
    v276 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v267, v273), v266, v270), v269, v271);
    v277 = vmlsl_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v266.i8, *(int32x2_t *)v271.i8), *(int32x2_t *)v267.i8, *(int32x2_t *)v270.i8), *(int32x2_t *)v269.i8, *(int32x2_t *)v273.i8);
    v278 = vmlsl_high_s32(vmlsl_high_s32(vmull_high_s32(v266, v271), v267, v270), v269, v273);
    v77 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v275, *(int32x2_t *)v268.i8, *(int32x2_t *)v272.i8), 0xEuLL), vmlal_high_s32(v276, v268, v272), 0xEuLL);
    v75 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v277, *(int32x2_t *)v268.i8, *(int32x2_t *)v272.i8), 0xEuLL), vmlal_high_s32(v278, v268, v272), 0xEuLL);
    v74 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v274.i8, *(int32x2_t *)v272.i8), 0xEuLL), vmull_high_s32(v274, v272), 0xEuLL);
    v76 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(vmlsl_s32(v275, *(int32x2_t *)v268.i8, *(int32x2_t *)v272.i8), v277), 0xEuLL), vaddq_s64(vmlsl_high_s32(v276, v268, v272), v278), 0xEuLL);
  }
  else if (a4)
  {
    v204 = (int64x2_t)vtrn1q_s32((int32x4_t)v7, (int32x4_t)v8);
    v205 = (int64x2_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
    v206 = (int32x4_t)vzip1q_s64((int64x2_t)v42, v204);
    v207 = (int32x4_t)vzip2q_s64((int64x2_t)v42, v204);
    v208 = (int32x4_t)vzip1q_s64(v43, v205);
    v209 = vdupq_n_s32(0x14A3u);
    v210 = (int32x4_t)vzip2q_s64(v43, v205);
    v211 = vdupq_n_s32(0x26C9u);
    v212 = vdupq_n_s32(0x3441u);
    v213 = vdupq_n_s32(0x3B6Cu);
    v214 = vaddq_s32(vsubq_s32(v206, v207), v210);
    v215 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v207.i8, *(int32x2_t *)v213.i8), *(int32x2_t *)v206.i8, *(int32x2_t *)v209.i8), *(int32x2_t *)v210.i8, *(int32x2_t *)v211.i8);
    v216 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v207, v213), v206, v209), v210, v211);
    v217 = vmlsl_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v206.i8, *(int32x2_t *)v211.i8), *(int32x2_t *)v207.i8, *(int32x2_t *)v209.i8), *(int32x2_t *)v210.i8, *(int32x2_t *)v213.i8);
    v218 = vmlsl_high_s32(vmlsl_high_s32(vmull_high_s32(v206, v211), v207, v209), v210, v213);
    v219 = vmull_s32(*(int32x2_t *)v214.i8, *(int32x2_t *)v212.i8);
    v220 = vmull_high_s32(v214, v212);
    v221 = vmlal_s32(v215, *(int32x2_t *)v208.i8, *(int32x2_t *)v212.i8);
    v222 = vmlal_high_s32(v216, v208, v212);
    v223 = vaddq_s64(vmlsl_s32(v215, *(int32x2_t *)v208.i8, *(int32x2_t *)v212.i8), v217);
    v224 = vmlal_s32(v217, *(int32x2_t *)v208.i8, *(int32x2_t *)v212.i8);
    v225 = vaddq_s64(vmlsl_high_s32(v216, v208, v212), v218);
    v226 = vmlal_high_s32(v218, v208, v212);
    v227 = vrshrn_high_n_s64(vrshrn_n_s64(v221, 0xEuLL), v222, 0xEuLL);
    v228 = vrshrn_high_n_s64(vrshrn_n_s64(v224, 0xEuLL), v226, 0xEuLL);
    v229 = vrshrn_high_n_s64(vrshrn_n_s64(v219, 0xEuLL), v220, 0xEuLL);
    v230 = vrshrn_high_n_s64(vrshrn_n_s64(v223, 0xEuLL), v225, 0xEuLL);
    v231 = (int64x2_t)vtrn1q_s32(v227, v228);
    v232 = (int64x2_t)vtrn2q_s32(v227, v228);
    v233 = (int64x2_t)vtrn1q_s32(v229, v230);
    v234 = (int64x2_t)vtrn2q_s32(v229, v230);
    v235 = (int32x4_t)vzip1q_s64(v231, v233);
    v236 = (int32x4_t)vzip2q_s64(v231, v233);
    v237 = (int32x4_t)vzip1q_s64(v232, v234);
    v238 = (int32x4_t)vzip2q_s64(v232, v234);
    v239 = vaddq_s32(vsubq_s32(v235, v236), v238);
    v240 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v236.i8, *(int32x2_t *)v213.i8), *(int32x2_t *)v235.i8, *(int32x2_t *)v209.i8), *(int32x2_t *)v238.i8, *(int32x2_t *)v211.i8);
    v241 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v236, v213), v235, v209), v238, v211);
    v242 = vmlsl_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v235.i8, *(int32x2_t *)v211.i8), *(int32x2_t *)v236.i8, *(int32x2_t *)v209.i8), *(int32x2_t *)v238.i8, *(int32x2_t *)v213.i8);
    v243 = vmlsl_high_s32(vmlsl_high_s32(vmull_high_s32(v235, v211), v236, v209), v238, v213);
    v244 = vmull_s32(*(int32x2_t *)v239.i8, *(int32x2_t *)v212.i8);
    v245 = vmull_high_s32(v239, v212);
    v246 = vaddq_s64(vmlsl_s32(v240, *(int32x2_t *)v237.i8, *(int32x2_t *)v212.i8), v242);
    v247 = vmlal_s32(v242, *(int32x2_t *)v237.i8, *(int32x2_t *)v212.i8);
    v248 = vaddq_s64(vmlsl_high_s32(v241, v237, v212), v243);
    v249 = vmlal_high_s32(v243, v237, v212);
    v77 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v240, *(int32x2_t *)v237.i8, *(int32x2_t *)v212.i8), 0xEuLL), vmlal_high_s32(v241, v237, v212), 0xEuLL);
    v75 = vrshrn_high_n_s64(vrshrn_n_s64(v247, 0xEuLL), v249, 0xEuLL);
    v74 = vrshrn_high_n_s64(vrshrn_n_s64(v244, 0xEuLL), v245, 0xEuLL);
    v76 = vrshrn_high_n_s64(vrshrn_n_s64(v246, 0xEuLL), v248, 0xEuLL);
  }
  else
  {
    v44 = (int64x2_t)vtrn1q_s32((int32x4_t)v7, (int32x4_t)v8);
    v45 = (int64x2_t)vtrn2q_s32((int32x4_t)v7, (int32x4_t)v8);
    v46 = (int32x4_t)vzip1q_s64(v43, v45);
    v47 = (int32x4_t)vzip2q_s64(v43, v45);
    v48 = (int32x4_t)vzip2q_s64((int64x2_t)v42, v44);
    v49.i64[0] = v42.i64[0];
    v49.i64[1] = v44.i64[0];
    v50 = vaddq_s32(v49, v48);
    v51 = vsubq_s32(v49, v48);
    v52 = vdupq_n_s32(0x2D41u);
    if (a5 == 10)
    {
      v53 = vmulq_s32(v50, v52);
      v54 = vmulq_s32(v51, v52);
      v55 = vdupq_n_s32(0x187Eu);
      v56 = vdupq_n_s32(0x3B21u);
      v57 = vdupq_n_s32(0xFFFFC4DF);
      v58 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v46, v55), v47, v57), 0xEuLL);
      v59 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v46, v56), v47, v55), 0xEuLL);
      v60 = vsubq_s32(vrshrq_n_s32(v54, 0xEuLL), v58);
      v61 = vrsraq_n_s32(v58, v54, 0xEuLL);
      v62 = vsubq_s32(vrshrq_n_s32(v53, 0xEuLL), v59);
      v63 = vrsraq_n_s32(v59, v53, 0xEuLL);
      v64 = vtrn1q_s32(v63, v61);
      v65 = vtrn2q_s32(v63, v61);
      v66 = (int64x2_t)vtrn1q_s32(v60, v62);
      v67 = (int64x2_t)vtrn2q_s32(v60, v62);
      v68 = (int32x4_t)vzip2q_s64((int64x2_t)v64, v66);
      v64.i64[1] = v66.i64[0];
      v69 = vmulq_s32(vaddq_s32(v64, v68), v52);
      v70 = vmulq_s32(vsubq_s32(v64, v68), v52);
      v71 = (int32x4_t)vzip2q_s64((int64x2_t)v65, v67);
      v65.i64[1] = v67.i64[0];
      v72 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v65, v55), v71, v57), 0xEuLL);
      v73 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v65, v56), v71, v55), 0xEuLL);
      v74 = vsubq_s32(vrshrq_n_s32(v70, 0xEuLL), v72);
      v75 = vrsraq_n_s32(v72, v70, 0xEuLL);
      v76 = vsubq_s32(vrshrq_n_s32(v69, 0xEuLL), v73);
      v77 = vrsraq_n_s32(v73, v69, 0xEuLL);
    }
    else
    {
      v279 = vmull_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v52.i8);
      v280 = vdupq_n_s32(0x187Eu);
      v281 = vmull_high_s32(v51, v52);
      v282 = vdupq_n_s32(0x3B21u);
      v283 = vmlsl_s32(vmull_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v280.i8), *(int32x2_t *)v47.i8, *(int32x2_t *)v282.i8);
      v284 = vmlsl_high_s32(vmull_high_s32(v46, v280), v47, v282);
      v285 = vmlal_s32(vmull_s32(*(int32x2_t *)v47.i8, *(int32x2_t *)v280.i8), *(int32x2_t *)v46.i8, *(int32x2_t *)v282.i8);
      v286 = vmlal_high_s32(vmull_high_s32(v47, v280), v46, v282);
      v287 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v52.i8), 0xEuLL), vmull_high_s32(v50, v52), 0xEuLL);
      v288 = vrshrn_high_n_s64(vrshrn_n_s64(v279, 0xEuLL), v281, 0xEuLL);
      v289 = vrshrn_high_n_s64(vrshrn_n_s64(v283, 0xEuLL), v284, 0xEuLL);
      v290 = vrshrn_high_n_s64(vrshrn_n_s64(v285, 0xEuLL), v286, 0xEuLL);
      v291 = vaddq_s32(v290, v287);
      v292 = vaddq_s32(v289, v288);
      v293 = vsubq_s32(v288, v289);
      v294 = vsubq_s32(v287, v290);
      v295 = vtrn1q_s32(v291, v292);
      v296 = (int64x2_t)vtrn2q_s32(v291, v292);
      v297 = (int64x2_t)vtrn1q_s32(v293, v294);
      v298 = (int64x2_t)vtrn2q_s32(v293, v294);
      v299 = (int32x4_t)vzip1q_s64(v296, v298);
      v300 = (int32x4_t)vzip2q_s64(v296, v298);
      v301 = (int32x4_t)vzip2q_s64((int64x2_t)v295, v297);
      v295.i64[1] = v297.i64[0];
      v302 = vaddq_s32(v295, v301);
      v303 = vsubq_s32(v295, v301);
      v304 = vmull_s32(*(int32x2_t *)v302.i8, *(int32x2_t *)v52.i8);
      v305 = vmull_high_s32(v302, v52);
      v306 = vmull_s32(*(int32x2_t *)v303.i8, *(int32x2_t *)v52.i8);
      v307 = vmull_high_s32(v303, v52);
      v308 = vmlsl_s32(vmull_s32(*(int32x2_t *)v299.i8, *(int32x2_t *)v280.i8), *(int32x2_t *)v300.i8, *(int32x2_t *)v282.i8);
      v309 = vmlsl_high_s32(vmull_high_s32(v299, v280), v300, v282);
      v310 = vmlal_s32(vmull_s32(*(int32x2_t *)v300.i8, *(int32x2_t *)v280.i8), *(int32x2_t *)v299.i8, *(int32x2_t *)v282.i8);
      v311 = vmlal_high_s32(vmull_high_s32(v300, v280), v299, v282);
      v312 = vrshrn_high_n_s64(vrshrn_n_s64(v304, 0xEuLL), v305, 0xEuLL);
      v313 = vrshrn_high_n_s64(vrshrn_n_s64(v306, 0xEuLL), v307, 0xEuLL);
      v314 = vrshrn_high_n_s64(vrshrn_n_s64(v308, 0xEuLL), v309, 0xEuLL);
      v315 = vrshrn_high_n_s64(vrshrn_n_s64(v310, 0xEuLL), v311, 0xEuLL);
      v77 = vaddq_s32(v315, v312);
      v75 = vaddq_s32(v314, v313);
      v74 = vsubq_s32(v313, v314);
      v76 = vsubq_s32(v312, v315);
    }
  }
  v202 = vqrshrn_high_n_s32(vqrshrn_n_s32(v77, 4uLL), v75, 4uLL);
  v203 = vqrshrn_high_n_s32(vqrshrn_n_s32(v74, 4uLL), v76, 4uLL);
LABEL_27:
  v316 = vdupq_n_s16(~(-1 << a5));
  v317.i64[0] = *a2;
  v318 = 2 * a3;
  v317.i64[1] = *(uint64_t *)((char *)a2 + v318);
  v319 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v202, v317), v316), 0);
  *a2 = v319.i64[0];
  *(uint64_t *)((char *)a2 + v318) = vextq_s8(v319, v319, 8uLL).u64[0];
  v320 = (uint64_t *)((char *)a2 + v318 + v318);
  v319.i64[0] = *v320;
  v319.i64[1] = *(uint64_t *)((char *)v320 + v318);
  v321 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v203, (int16x8_t)v319), v316), 0);
  *v320 = v321.i64[0];
  *(_QWORD *)&result = vextq_s8(v321, v321, 8uLL).u64[0];
  *(double *)((char *)v320 + v318) = result;
  return result;
}

int16x8_t vp9_highbd_iht8x8_64_add_neon(int16x8_t *a1, int16x8_t *a2, int a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int16x4_t v64;
  int16x8_t v65;
  int16x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int32x4_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int32x4_t v310;
  int32x4_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int64x2_t v316;
  int64x2_t v317;
  int32x4_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  int32x4_t v330;
  int32x4_t v331;
  int32x4_t v332;
  int32x4_t v333;
  int32x4_t v334;
  int32x4_t v335;
  int32x4_t v336;
  int32x4_t v337;
  int32x4_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int64x2_t v362;
  int64x2_t v363;
  int64x2_t v364;
  int64x2_t v365;
  int64x2_t v366;
  int16x8_t v367;
  int16x8_t v368;
  int16x8_t v369;
  int16x8_t v370;
  int16x8_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int16x8_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int16x8_t v389;
  int16x8_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int16x8_t v396;
  int16x8_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int16x4_t v406;
  int16x4_t v407;
  int16x8_t v408;
  int32x4_t v409;
  int16x4_t v410;
  int16x4_t v411;
  int16x4_t v412;
  int16x8_t v413;
  int32x4_t v414;
  int16x4_t v415;
  int16x8_t v416;
  int32x4_t v417;
  int16x8_t v418;
  int16x8_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int16x8_t v430;
  int16x8_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int16x8_t v434;
  int32x4_t v435;
  int16x8_t v436;
  int16x8_t v437;
  int16x8_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int16x8_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int64x2_t v450;
  int64x2_t v451;
  int64x2_t v452;
  int64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int64x2_t v456;
  int64x2_t v457;
  int16x8_t v458;
  int16x8_t v459;
  int16x8_t v460;
  int16x8_t v461;
  int16x8_t v462;
  int16x8_t v463;
  int16x8_t v464;
  int16x8_t v465;
  int16x8_t v466;
  int16x8_t v467;
  int16x8_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int16x8_t v471;
  int32x4_t v472;
  int32x4_t v473;
  int32x4_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int32x4_t v479;
  int16x8_t v480;
  int16x8_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int16x8_t v494;
  int16x8_t v495;
  int16x8_t v496;
  int16x8_t v497;
  int16x8_t v498;
  int16x8_t v499;
  int16x8_t v500;
  int16x8_t v501;
  int32x4_t v502;
  int32x4_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int64x2_t v506;
  int64x2_t v507;
  int64x2_t v508;
  int64x2_t v509;
  int64x2_t v510;
  int16x8_t v511;
  int16x8_t v512;
  int16x8_t v513;
  int16x8_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int16x8_t v517;
  int16x8_t v518;
  int16x8_t v519;
  int16x8_t v520;
  int16x8_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int16x8_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int16x4_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int16x8_t v537;
  int16x8_t v538;
  int16x8_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int16x8_t v548;
  int16x8_t v549;
  int16x8_t v550;
  int16x8_t v551;
  int16x8_t v552;
  int16x8_t v553;
  int16x8_t v554;
  int16x8_t v555;
  int16x8_t v556;
  int16x8_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int16x8_t v560;
  int16x8_t v561;
  int16x8_t v562;
  int16x8_t v563;
  int16x8_t v564;
  int16x8_t v565;
  int16x8_t v566;
  int16x8_t v567;
  int32x4_t v568;
  int32x4_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  int64x2_t v576;
  int64x2_t v577;
  int64x2_t v578;
  int64x2_t v579;
  int64x2_t v580;
  int64x2_t v581;
  int64x2_t v582;
  int64x2_t v583;
  int16x8_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int16x8_t v589;
  int16x8_t v590;
  int16x8_t v591;
  int16x8_t v592;
  int16x8_t v593;
  int32x4_t v594;
  int32x4_t v595;
  int32x4_t v596;
  int32x4_t v597;
  int32x4_t v598;
  int32x4_t v599;
  int16x8_t v600;
  int16x8_t v601;
  int32x4_t v602;
  int32x4_t v603;
  int32x4_t v604;
  int32x4_t v605;
  int32x4_t v606;
  int16x8_t v607;
  int32x4_t v608;
  int16x8_t v609;
  int32x4_t v610;
  int32x4_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int32x4_t v614;
  int32x4_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int32x4_t v618;
  int32x4_t v619;
  int32x4_t v620;
  int32x4_t v621;
  int32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int16x4_t v625;
  int16x8_t v626;
  int32x4_t v627;
  int16x4_t v628;
  int16x4_t v629;
  int16x4_t v630;
  int16x8_t v631;
  int32x4_t v632;
  int16x4_t v633;
  int16x8_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  int32x4_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int32x4_t v642;
  int32x4_t v643;
  int32x4_t v644;
  int32x4_t v645;
  int16x8_t v646;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int16x8_t v650;
  int32x4_t v651;
  int16x8_t v652;
  int64x2_t v653;
  int64x2_t v654;
  int64x2_t v655;
  int64x2_t v656;
  int64x2_t v657;
  int64x2_t v658;
  int64x2_t v659;
  int64x2_t v660;
  int32x4_t v661;
  int32x4_t v662;
  int32x4_t v663;
  int32x4_t v664;
  int32x4_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int64x2_t v670;
  int64x2_t v671;
  int64x2_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int64x2_t v675;
  int64x2_t v676;
  int64x2_t v677;
  int64x2_t v678;
  int64x2_t v679;
  int32x4_t v680;
  int32x4_t v681;
  int64x2_t v682;
  int64x2_t v683;
  int64x2_t v684;
  int64x2_t v685;
  int32x4_t v686;
  int32x4_t v687;
  int64x2_t v688;
  int64x2_t v689;
  int64x2_t v690;
  int64x2_t v691;
  int32x4_t v692;
  int32x4_t v693;
  int32x4_t v694;
  int32x4_t v695;
  int32x2_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int64x2_t v699;
  int64x2_t v700;
  int64x2_t v701;
  int64x2_t v702;
  int64x2_t v703;
  int64x2_t v704;
  int64x2_t v705;
  int64x2_t v706;
  int32x4_t v707;
  int32x4_t v708;
  int32x4_t v709;
  int32x4_t v710;
  int64x2_t v711;
  int32x4_t v712;
  int32x4_t v713;
  int32x4_t v714;
  int32x4_t v715;
  int32x4_t v716;
  int64x2_t v717;
  int64x2_t v718;
  int64x2_t v719;
  int64x2_t v720;
  int64x2_t v721;
  int64x2_t v722;
  int64x2_t v723;
  int64x2_t v724;
  int32x4_t v725;
  int32x4_t v726;
  int32x4_t v727;
  int32x4_t v728;
  int32x4_t v729;
  int32x4_t v730;
  int32x4_t v731;
  int32x4_t v732;
  int64x2_t v733;
  int64x2_t v734;
  int64x2_t v735;
  int64x2_t v736;
  int64x2_t v737;
  int64x2_t v738;
  int64x2_t v739;
  int64x2_t v740;
  int64x2_t v741;
  int64x2_t v742;
  int64x2_t v743;
  int64x2_t v744;
  int64x2_t v745;
  int64x2_t v746;
  int64x2_t v747;
  int64x2_t v748;
  int64x2_t v749;
  int32x4_t v750;
  int32x4_t v751;
  int32x4_t v752;
  int32x4_t v753;
  int64x2_t v754;
  int64x2_t v755;
  int64x2_t v756;
  int64x2_t v757;
  int64x2_t v758;
  int64x2_t v759;
  int64x2_t v760;
  int64x2_t v761;
  int32x4_t v762;
  int32x4_t v763;
  int32x4_t v764;
  int32x4_t v765;
  int64x2_t v766;
  int32x4_t v767;
  int32x4_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int32x4_t v771;
  int32x4_t v772;
  int32x4_t v773;
  int32x4_t v774;
  int64x2_t v775;
  int64x2_t v776;
  int64x2_t v777;
  int64x2_t v778;
  int32x4_t v779;
  int32x4_t v780;
  int32x4_t v781;
  int32x4_t v782;
  int64x2_t v783;
  int64x2_t v784;
  int64x2_t v785;
  int32x4_t v786;
  int64x2_t v787;
  int32x4_t v788;
  int32x4_t v789;
  int32x4_t v790;
  int32x4_t v791;
  int32x4_t v792;
  int32x4_t v793;
  int64x2_t v794;
  int64x2_t v795;
  int64x2_t v796;
  int64x2_t v797;
  int32x4_t v798;
  int32x4_t v799;
  int64x2_t v800;
  int64x2_t v801;
  int64x2_t v802;
  int64x2_t v803;
  int64x2_t v804;
  int64x2_t v805;
  int32x4_t v806;
  int32x4_t v807;
  int64x2_t v808;
  int64x2_t v809;
  int64x2_t v810;
  int64x2_t v811;
  int32x4_t v812;
  int32x4_t v813;
  int64x2_t v814;
  int32x4_t v815;
  int32x4_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  int64x2_t v821;
  int64x2_t v822;
  int64x2_t v823;
  int64x2_t v824;
  int32x4_t v825;
  int32x4_t v826;
  int64x2_t v827;
  int64x2_t v828;
  int64x2_t v829;
  int64x2_t v830;
  int64x2_t v831;
  int64x2_t v832;
  int64x2_t v833;
  int64x2_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int32x4_t v837;
  int32x4_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int32x4_t v841;
  int32x4_t v842;
  int32x4_t v843;
  int32x4_t v844;
  int32x4_t v845;
  int32x4_t v846;
  int32x4_t v847;
  int32x4_t v848;
  int32x4_t v849;
  int32x4_t v850;
  int32x4_t v851;
  int32x4_t v852;
  int32x4_t v853;
  int32x4_t v854;
  int32x4_t v855;
  int32x4_t v856;
  int32x4_t v857;
  int32x4_t v858;
  int32x4_t v859;
  int32x4_t v860;
  int32x4_t v861;
  int64x2_t v862;
  int64x2_t v863;
  int64x2_t v864;
  int64x2_t v865;
  int64x2_t v866;
  int64x2_t v867;
  int64x2_t v868;
  int64x2_t v869;
  int32x4_t v870;
  int32x4_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int64x2_t v882;
  int64x2_t v883;
  int64x2_t v884;
  int64x2_t v885;
  int64x2_t v886;
  int64x2_t v887;
  int64x2_t v888;
  int32x2_t v889;
  int32x4_t v890;
  int64x2_t v891;
  int32x4_t v892;
  int64x2_t v893;
  int64x2_t v894;
  int64x2_t v895;
  int32x4_t v896;
  int64x2_t v897;
  int64x2_t v898;
  int64x2_t v899;
  int64x2_t v900;
  int64x2_t v901;
  int64x2_t v902;
  int32x4_t v903;
  int32x4_t v904;
  int32x4_t v905;
  int32x4_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int64x2_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int32x4_t v916;
  int32x4_t v917;
  int32x4_t v918;
  int32x4_t v919;
  int64x2_t v920;
  int64x2_t v921;
  int64x2_t v922;
  int64x2_t v923;
  int64x2_t v924;
  int64x2_t v925;
  int64x2_t v926;
  int64x2_t v927;
  int32x4_t v928;
  int32x4_t v929;
  int32x4_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int32x4_t v933;
  int32x4_t v934;
  int32x4_t v935;
  int64x2_t v936;
  int64x2_t v937;
  int64x2_t v938;
  int64x2_t v939;
  int64x2_t v940;
  int64x2_t v941;
  int64x2_t v942;
  int64x2_t v943;
  int64x2_t v944;
  int32x4_t v945;
  int32x4_t v946;
  int32x4_t v947;
  int32x4_t v948;
  int64x2_t v949;
  int64x2_t v950;
  int64x2_t v951;
  int64x2_t v952;
  int64x2_t v953;
  int64x2_t v954;
  int64x2_t v955;
  int64x2_t v956;
  int32x4_t v957;
  int32x4_t v958;
  int32x4_t v959;
  int32x4_t v960;
  int32x4_t v961;
  int32x4_t v962;
  int32x4_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  int32x4_t v967;
  int32x4_t v968;
  int32x4_t v969;
  int32x4_t v970;
  int32x4_t v971;
  int32x4_t v972;
  int64x2_t v973;
  int64x2_t v974;
  int64x2_t v975;
  int64x2_t v976;
  int64x2_t v977;
  int64x2_t v978;
  int64x2_t v979;
  int64x2_t v980;
  int32x4_t v981;
  int32x4_t v982;
  int32x4_t v983;
  int32x4_t v984;
  int32x4_t v985;
  int32x4_t v986;
  int32x4_t v987;
  int32x4_t v988;
  int32x4_t v989;
  int32x4_t v990;
  int64x2_t v991;
  int64x2_t v992;
  int64x2_t v993;
  int32x4_t v994;
  int64x2_t v995;
  int32x4_t v996;
  int64x2_t v997;
  int64x2_t v998;
  int64x2_t v999;
  int64x2_t v1000;
  int32x4_t v1001;
  int32x4_t v1002;
  int64x2_t v1003;
  int64x2_t v1004;
  int64x2_t v1005;
  int64x2_t v1006;
  int32x4_t v1007;
  int32x4_t v1008;
  int64x2_t v1009;
  int64x2_t v1010;
  int64x2_t v1011;
  int64x2_t v1012;
  int32x4_t v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int64x2_t v1017;
  int64x2_t v1018;
  int64x2_t v1019;
  int64x2_t v1020;
  int64x2_t v1021;
  int64x2_t v1022;
  int64x2_t v1023;
  int64x2_t v1024;
  int64x2_t v1025;
  int32x4_t v1026;
  int32x4_t v1027;
  int32x4_t v1028;
  int32x4_t v1029;
  int32x4_t v1030;
  int32x4_t v1031;
  int32x4_t v1032;
  int32x4_t v1033;
  int64x2_t v1034;
  int64x2_t v1035;
  int64x2_t v1036;
  int64x2_t v1037;
  int64x2_t v1038;
  int64x2_t v1039;
  int64x2_t v1040;
  int64x2_t v1041;
  int32x4_t v1042;
  int32x4_t v1043;
  int32x4_t v1044;
  int32x4_t v1045;
  int32x4_t v1046;
  int32x4_t v1047;
  int32x4_t v1048;
  int32x4_t v1049;
  int64x2_t v1050;
  int64x2_t v1051;
  int64x2_t v1052;
  int64x2_t v1053;
  int64x2_t v1054;
  int64x2_t v1055;
  int64x2_t v1056;
  int64x2_t v1057;
  int64x2_t v1058;
  int64x2_t v1059;
  int64x2_t v1060;
  int64x2_t v1061;
  int64x2_t v1062;
  int64x2_t v1063;
  int64x2_t v1064;
  int64x2_t v1065;
  int64x2_t v1066;
  int32x4_t v1067;
  int32x4_t v1068;
  int32x4_t v1069;
  int32x4_t v1070;
  int64x2_t v1071;
  int64x2_t v1072;
  int64x2_t v1073;
  int64x2_t v1074;
  int64x2_t v1075;
  int64x2_t v1076;
  int64x2_t v1077;
  int64x2_t v1078;
  int64x2_t v1079;
  int32x4_t v1080;
  int32x4_t v1081;
  int32x4_t v1082;
  int32x4_t v1083;
  int32x4_t v1084;
  int32x4_t v1085;
  int32x4_t v1086;
  int64x2_t v1087;
  int64x2_t v1088;
  int64x2_t v1089;
  int64x2_t v1090;
  int16x8_t v1091;
  int16x8_t v1092;
  int16x8_t v1093;
  int16x8_t v1094;
  int16x8_t v1095;
  int16x8_t v1096;
  int16x8_t v1097;
  int16x8_t v1098;
  int16x8_t v1099;
  int16x8_t v1100;
  int32x4_t v1101;
  int32x4_t v1102;
  int32x4_t v1103;
  int32x4_t v1104;
  int16x8_t v1105;
  int16x8_t v1106;
  int32x4_t v1107;
  int32x4_t v1108;
  int32x4_t v1109;
  int32x4_t v1110;
  int16x8_t v1111;
  int16x8_t v1112;
  int32x4_t v1113;
  int32x4_t v1114;
  int32x4_t v1115;
  int32x4_t v1116;
  int32x4_t v1117;
  int16x8_t v1118;
  int16x8_t v1119;
  int32x4_t v1120;
  int32x4_t v1121;
  int32x4_t v1122;
  int32x4_t v1123;
  int32x4_t v1124;
  int16x4_t v1125;
  int16x4_t v1126;
  int32x4_t v1127;
  int32x4_t v1128;
  int16x4_t v1129;
  int32x4_t v1130;
  int32x4_t v1131;
  int32x4_t v1132;
  int32x4_t v1133;
  int32x4_t v1134;
  int32x4_t v1135;
  int16x4_t v1136;
  int16x4_t v1137;
  int32x4_t v1138;
  int32x4_t v1139;
  int32x4_t v1140;
  int32x4_t v1141;
  int32x4_t v1142;
  int32x4_t v1143;
  int32x4_t v1144;
  int32x4_t v1145;
  int32x4_t v1146;
  int32x4_t v1147;
  int32x4_t v1148;
  int16x8_t v1149;
  int16x8_t v1150;
  int16x8_t v1151;
  int16x8_t v1152;
  int32x4_t v1153;
  int32x4_t v1154;
  int16x8_t v1155;
  int16x8_t v1156;
  int32x4_t v1157;
  int16x8_t v1158;
  int16x8_t v1159;
  int16x8_t v1160;
  int16x8_t v1161;
  int16x8_t v1162;
  int16x8_t v1163;
  int32x4_t v1164;
  int32x4_t v1165;
  int32x4_t v1166;
  int32x4_t v1167;
  int32x4_t v1168;
  int32x4_t v1169;
  int32x4_t v1170;
  int32x4_t v1171;
  int64x2_t v1172;
  int64x2_t v1173;
  int64x2_t v1174;
  int64x2_t v1175;
  int64x2_t v1176;
  int64x2_t v1177;
  int64x2_t v1178;
  int64x2_t v1179;
  int16x8_t v1180;
  int16x8_t v1181;
  int16x8_t v1182;
  int16x8_t v1183;
  int16x8_t v1184;
  int16x8_t v1185;
  int16x8_t v1186;
  int16x8_t v1187;
  int32x4_t v1188;
  int32x4_t v1189;
  int32x4_t v1190;
  int32x4_t v1191;
  int32x4_t v1192;
  int32x4_t v1193;
  int32x4_t v1194;
  int32x4_t v1195;
  int32x4_t v1196;
  int32x4_t v1197;
  int32x4_t v1198;
  int32x4_t v1199;
  int32x4_t v1200;
  int32x4_t v1201;
  int32x4_t v1202;
  int32x4_t v1203;
  int32x4_t v1204;
  int32x4_t v1205;
  int32x4_t v1206;
  int32x4_t v1207;
  int32x4_t v1208;
  int32x4_t v1209;
  int32x4_t v1210;
  int32x4_t v1211;
  int32x4_t v1212;
  int32x4_t v1213;
  int32x4_t v1214;
  int32x4_t v1215;
  int32x4_t v1216;
  int32x4_t v1217;
  int32x4_t v1218;
  int32x4_t v1219;
  int32x4_t v1220;
  int32x4_t v1221;
  int32x4_t v1222;
  int32x4_t v1223;
  int32x4_t v1224;
  int16x8_t v1225;
  int16x8_t v1226;
  int16x8_t v1227;
  int16x8_t v1228;
  int16x8_t v1229;
  int16x8_t v1230;
  int16x8_t v1231;
  int16x8_t v1232;
  int16x8_t v1233;
  int64x2_t v1234;
  int64x2_t v1235;
  int64x2_t v1236;
  int64x2_t v1237;
  int64x2_t v1238;
  int64x2_t v1239;
  int64x2_t v1240;
  int64x2_t v1241;
  int32x4_t v1242;
  int32x4_t v1243;
  int32x4_t v1244;
  int32x4_t v1245;
  int32x4_t v1246;
  int32x4_t v1247;
  int32x4_t v1248;
  int32x4_t v1249;
  int32x4_t v1250;
  int32x4_t v1251;
  int64x2_t v1252;
  int64x2_t v1253;
  int64x2_t v1254;
  int64x2_t v1255;
  int32x4_t v1256;
  int32x4_t v1257;
  int64x2_t v1258;
  int64x2_t v1259;
  int64x2_t v1260;
  int32x4_t v1261;
  int64x2_t v1262;
  int64x2_t v1263;
  int64x2_t v1264;
  int64x2_t v1265;
  int64x2_t v1266;
  int32x4_t v1267;
  int32x4_t v1268;
  int64x2_t v1269;
  int64x2_t v1270;
  int64x2_t v1271;
  int64x2_t v1272;
  int32x4_t v1273;
  int32x4_t v1274;
  int32x4_t v1275;
  int32x4_t v1276;
  int64x2_t v1277;
  int64x2_t v1278;
  int64x2_t v1279;
  int64x2_t v1280;
  int64x2_t v1281;
  int64x2_t v1282;
  int64x2_t v1283;
  int64x2_t v1284;
  int64x2_t v1285;
  int64x2_t v1286;
  int32x4_t v1287;
  int32x4_t v1288;
  int32x4_t v1289;
  int64x2_t v1290;
  int32x4_t v1291;
  int32x4_t v1292;
  int32x4_t v1293;
  int32x4_t v1294;
  int32x4_t v1295;
  int32x4_t v1296;
  int64x2_t v1297;
  int64x2_t v1298;
  int64x2_t v1299;
  int64x2_t v1300;
  int64x2_t v1301;
  int64x2_t v1302;
  int64x2_t v1303;
  int64x2_t v1304;
  int32x4_t v1305;
  int32x4_t v1306;
  int32x4_t v1307;
  int32x4_t v1308;
  int32x4_t v1309;
  int32x4_t v1310;
  int32x4_t v1311;
  int32x4_t v1312;
  int64x2_t v1313;
  int64x2_t v1314;
  int64x2_t v1315;
  int64x2_t v1316;
  int64x2_t v1317;
  int64x2_t v1318;
  int64x2_t v1319;
  int64x2_t v1320;
  int64x2_t v1321;
  int64x2_t v1322;
  int64x2_t v1323;
  int64x2_t v1324;
  int64x2_t v1325;
  int64x2_t v1326;
  int64x2_t v1327;
  int64x2_t v1328;
  int32x4_t v1329;
  int32x4_t v1330;
  int32x4_t v1331;
  int32x4_t v1332;
  int64x2_t v1333;
  int64x2_t v1334;
  int64x2_t v1335;
  int64x2_t v1336;
  int64x2_t v1337;
  int64x2_t v1338;
  int64x2_t v1339;
  int64x2_t v1340;
  int64x2_t v1341;
  int32x4_t v1342;
  int32x4_t v1343;
  int32x4_t v1344;
  int32x4_t v1345;
  int32x4_t v1346;
  int64x2_t v1347;
  int32x4_t v1348;
  int32x4_t v1349;
  int64x2_t v1350;
  int32x4_t v1351;
  int32x4_t v1352;
  int64x2_t v1353;
  int32x4_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  int32x4_t v1357;
  int32x4_t v1358;
  int64x2_t v1359;
  int64x2_t v1360;
  int64x2_t v1361;
  int64x2_t v1362;
  int64x2_t v1363;
  int64x2_t v1364;
  int64x2_t v1365;
  int64x2_t v1366;
  int32x4_t v1367;
  int32x4_t v1368;
  int32x4_t v1369;
  int32x4_t v1370;
  int32x4_t v1371;
  int32x4_t v1372;
  int32x4_t v1373;
  int32x4_t v1374;
  int64x2_t v1375;
  int64x2_t v1376;
  int64x2_t v1377;
  int64x2_t v1378;
  int64x2_t v1379;
  int64x2_t v1380;
  int64x2_t v1381;
  int64x2_t v1382;
  int64x2_t v1383;
  int64x2_t v1384;
  int64x2_t v1385;
  int64x2_t v1386;
  int64x2_t v1387;
  int64x2_t v1388;
  int64x2_t v1389;
  int64x2_t v1390;
  int32x4_t v1391;
  int32x4_t v1392;
  int32x4_t v1393;
  int32x4_t v1394;
  int64x2_t v1395;
  int64x2_t v1396;
  int64x2_t v1397;
  int64x2_t v1398;
  int64x2_t v1399;
  int64x2_t v1400;
  int64x2_t v1401;
  int64x2_t v1402;
  int32x4_t v1403;
  int32x4_t v1404;
  int32x4_t v1405;
  int32x4_t v1406;
  int32x4_t v1407;
  int32x4_t v1408;
  int32x4_t v1409;
  int32x4_t v1410;
  int32x4_t v1411;
  int64x2_t v1412;
  int32x4_t v1413;
  int32x4_t v1414;
  int32x4_t v1415;
  int32x4_t v1416;
  int64x2_t v1417;
  int64x2_t v1418;
  int64x2_t v1419;
  int64x2_t v1420;
  int64x2_t v1421;
  int64x2_t v1422;
  int64x2_t v1423;
  int64x2_t v1424;
  int32x4_t v1425;
  int32x4_t v1426;
  int32x4_t v1427;
  int32x4_t v1428;
  int32x4_t v1429;
  int32x4_t v1430;
  int32x4_t v1431;
  int32x4_t v1432;
  int64x2_t v1433;
  int64x2_t v1434;
  int64x2_t v1435;
  int64x2_t v1436;
  int64x2_t v1437;
  int64x2_t v1438;
  int64x2_t v1439;
  int64x2_t v1440;
  int64x2_t v1441;
  int64x2_t v1442;
  int64x2_t v1443;
  int64x2_t v1444;
  int64x2_t v1445;
  int64x2_t v1446;
  int64x2_t v1447;
  int64x2_t v1448;
  int64x2_t v1449;
  int64x2_t v1450;
  int32x4_t v1451;
  int32x4_t v1452;
  int32x4_t v1453;
  int32x4_t v1454;
  int64x2_t v1455;
  int64x2_t v1456;
  int64x2_t v1457;
  int64x2_t v1458;
  int64x2_t v1459;
  int64x2_t v1460;
  int64x2_t v1461;
  int64x2_t v1462;
  int64x2_t v1463;
  int64x2_t v1464;
  int64x2_t v1465;
  int32x4_t v1466;
  int32x4_t v1467;
  int32x4_t v1468;
  int32x4_t v1469;
  int32x4_t v1470;
  int32x4_t v1471;
  int32x4_t v1472;
  int64x2_t v1473;
  int64x2_t v1474;
  int32x4_t v1475;
  int32x4_t v1476;
  int32x4_t v1477;
  int32x4_t v1478;
  int64x2_t v1479;
  int64x2_t v1480;
  int64x2_t v1481;
  int64x2_t v1482;
  int64x2_t v1483;
  int64x2_t v1484;
  int64x2_t v1485;
  int32x4_t v1486;
  int64x2_t v1487;
  int64x2_t v1488;
  int32x4_t v1489;
  int64x2_t v1490;
  int64x2_t v1491;
  int32x4_t v1492;
  int64x2_t v1493;
  int64x2_t v1494;
  int64x2_t v1495;
  int64x2_t v1496;
  int64x2_t v1497;
  int64x2_t v1498;
  int32x2_t v1499;
  int32x4_t v1500;
  int32x4_t v1501;
  int32x4_t v1502;
  int32x4_t v1503;
  int32x4_t v1504;
  int32x4_t v1505;
  int32x4_t v1506;
  int32x4_t v1507;
  int32x4_t v1508;
  int32x4_t v1509;
  int64x2_t v1510;
  int64x2_t v1511;
  int64x2_t v1512;
  int32x4_t v1513;
  int32x4_t v1514;
  int32x4_t v1515;
  int32x4_t v1516;
  int64x2_t v1517;
  int64x2_t v1518;
  int64x2_t v1519;
  int64x2_t v1520;
  int64x2_t v1521;
  int64x2_t v1522;
  int64x2_t v1523;
  int64x2_t v1524;
  int32x4_t v1525;
  int32x4_t v1526;
  int32x4_t v1527;
  int32x4_t v1528;
  int32x4_t v1529;
  int32x4_t v1530;
  int32x4_t v1531;
  int32x4_t v1532;
  int32x4_t v1533;
  int64x2_t v1534;
  int64x2_t v1535;
  int64x2_t v1536;
  int64x2_t v1537;
  int64x2_t v1538;
  int64x2_t v1539;
  int64x2_t v1540;
  int64x2_t v1541;
  int64x2_t v1542;
  int64x2_t v1543;
  int64x2_t v1544;
  int64x2_t v1545;
  int64x2_t v1546;
  int64x2_t v1547;
  int64x2_t v1548;
  int64x2_t v1549;
  int32x4_t v1550;
  int32x4_t v1551;
  int32x4_t v1552;
  int32x4_t v1553;
  int32x4_t v1554;
  int32x4_t v1555;
  int32x4_t v1556;
  int32x4_t v1557;
  int32x4_t v1558;
  int32x4_t v1559;
  int64x2_t v1560;
  int32x4_t v1561;
  int32x4_t v1562;
  int32x4_t v1563;
  int32x4_t v1564;
  int32x4_t v1565;
  int32x4_t v1566;
  int32x4_t v1567;
  int32x4_t v1568;
  int32x4_t v1569;
  int32x4_t v1570;
  int64x2_t v1571;
  int64x2_t v1572;
  int64x2_t v1573;
  int64x2_t v1574;
  int32x4_t v1575;
  int32x4_t v1576;
  int64x2_t v1577;
  int64x2_t v1578;
  int64x2_t v1579;
  int64x2_t v1580;
  int32x4_t v1581;
  int32x4_t v1582;
  int32x4_t v1583;
  int32x4_t v1584;
  int64x2_t v1585;
  int64x2_t v1586;
  int64x2_t v1587;
  int64x2_t v1588;
  int32x4_t v1589;
  int32x4_t v1590;
  int64x2_t v1591;
  int64x2_t v1592;
  int64x2_t v1593;
  int64x2_t v1594;
  int64x2_t v1595;
  int64x2_t v1596;
  int32x4_t v1597;
  int32x4_t v1598;
  int64x2_t v1599;
  int64x2_t v1600;
  int64x2_t v1601;
  int64x2_t v1602;
  int32x4_t v1603;
  int32x4_t v1604;
  int64x2_t v1605;
  int32x4_t v1606;
  int32x4_t v1607;
  int64x2_t v1608;
  int64x2_t v1609;
  int64x2_t v1610;
  int64x2_t v1611;
  int64x2_t v1612;
  int64x2_t v1613;
  int64x2_t v1614;
  int64x2_t v1615;
  int32x4_t v1616;
  int32x4_t v1617;
  int64x2_t v1618;
  int64x2_t v1619;
  int64x2_t v1620;
  int64x2_t v1621;
  int64x2_t v1622;
  int64x2_t v1623;
  int64x2_t v1624;
  int64x2_t v1625;
  int32x4_t v1626;
  int32x4_t v1627;
  int32x4_t v1628;
  int32x4_t v1629;
  int32x4_t v1630;
  int32x4_t v1631;
  int32x4_t v1632;
  int32x4_t v1633;
  int32x4_t v1634;
  int32x4_t v1635;
  int32x4_t v1636;
  int32x4_t v1637;
  int32x4_t v1638;
  int32x4_t v1639;
  int32x4_t v1640;
  int32x4_t v1641;
  int32x4_t v1642;
  int16x8_t v1643;
  uint64_t v1644;
  int16x8_t *v1645;
  int16x8_t *v1646;
  int16x8_t *v1647;
  int16x8_t v1648;
  int16x8_t v1649;
  int16x8_t v1650;
  int16x8_t v1651;
  int16x8_t v1652;
  int16x8_t v1653;
  int16x8_t v1654;
  int16x8_t result;
  int64x2_t v1656;
  int64x2_t v1657;
  int64x2_t v1658;
  int64x2_t v1659;
  int64x2_t v1660;
  int64x2_t v1661;
  int64x2_t v1662;
  int64x2_t v1663;
  int64x2_t v1664;
  int64x2_t v1665;
  int64x2_t v1666;
  int64x2_t v1667;
  int32x4_t v1668;
  int64x2_t v1669;
  int32x4_t v1670;
  int64x2_t v1671;
  int32x4_t v1672;
  int64x2_t v1673;
  int32x4_t v1674;
  int32x4_t v1675;
  int64x2_t v1676;
  int32x4_t v1677;
  int64x2_t v1678;
  int32x4_t v1679;
  int32x4_t v1680;
  int64x2_t v1681;
  int32x4_t v1682;
  int64x2_t v1683;
  int32x4_t v1684;
  int32x4_t v1685;
  int32x4_t v1686;
  int32x4_t v1687;
  int64x2_t v1688;
  int32x4_t v1689;
  int64x2_t v1690;
  int32x4_t v1691;
  int32x4_t v1692;
  int64x2_t v1693;
  int32x4_t v1694;
  int64x2_t v1695;
  int32x4_t v1696;
  int32x4_t v1697;
  int32x4_t v1698;
  int32x4_t v1699;
  int64x2_t v1700;
  int32x4_t v1701;
  int32x4_t v1702;
  int64x2_t v1703;
  int32x4_t v1704;
  int64x2_t v1705;
  int32x4_t v1706;
  int32x4_t v1707;
  int32x4_t v1708;
  int64x2_t v1709;
  int32x4_t v1710;
  int64x2_t v1711;
  int32x4_t v1712;
  int32x4_t v1713;
  int32x4_t v1714;
  int64x2_t v1715;
  int32x4_t v1716;
  int32x4_t v1717;
  int64x2_t v1718;
  int32x4_t v1719;
  int32x4_t v1720;
  int32x4_t v1721;
  int64x2_t v1722;
  int32x4_t v1723;
  int32x4_t v1724;
  int64x2_t v1725;
  int32x4_t v1726;
  int32x4_t v1727;
  int32x4_t v1728;
  int32x4_t v1729;
  int64x2_t v1730;
  int32x4_t v1731;
  int32x4_t v1732;
  int64x2_t v1733;
  int32x4_t v1734;
  int32x4_t v1735;

  v5 = *a1;
  v6 = a1[1];
  v8 = a1[2];
  v7 = a1[3];
  v10 = a1[4];
  v9 = a1[5];
  v12 = a1[6];
  v11 = a1[7];
  v14 = a1[8];
  v13 = a1[9];
  v16 = a1[10];
  v15 = a1[11];
  v18 = a1[12];
  v17 = a1[13];
  v20 = a1[14];
  v19 = a1[15];
  if (a5 != 8)
  {
    if (a4 == 2)
    {
      v653 = (int64x2_t)vtrn1q_s32((int32x4_t)v5, (int32x4_t)v8);
      v654 = (int64x2_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v8);
      v655 = (int64x2_t)vtrn1q_s32((int32x4_t)v6, (int32x4_t)v7);
      v656 = (int64x2_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7);
      v657 = (int64x2_t)vtrn1q_s32((int32x4_t)v10, (int32x4_t)v12);
      v658 = (int64x2_t)vtrn2q_s32((int32x4_t)v10, (int32x4_t)v12);
      v659 = (int64x2_t)vtrn1q_s32((int32x4_t)v9, (int32x4_t)v11);
      v660 = (int64x2_t)vtrn2q_s32((int32x4_t)v9, (int32x4_t)v11);
      v661 = (int32x4_t)vzip1q_s64(v653, v657);
      v662 = (int32x4_t)vzip2q_s64(v653, v657);
      v663 = (int32x4_t)vzip1q_s64(v654, v658);
      v664 = (int32x4_t)vzip2q_s64(v654, v658);
      v665 = (int32x4_t)vzip1q_s64(v655, v659);
      v666 = (int32x4_t)vzip2q_s64(v655, v659);
      v667 = (int32x4_t)vzip1q_s64(v656, v660);
      v668 = (int32x4_t)vzip2q_s64(v656, v660);
      v1672 = vdupq_n_s32(0x3FB1u);
      v669 = vdupq_n_s32(0x646u);
      v670 = vmlal_s32(vmull_s32(*(int32x2_t *)v661.i8, *(int32x2_t *)v669.i8), *(int32x2_t *)v668.i8, *(int32x2_t *)v1672.i8);
      v671 = vmlsl_s32(vmull_s32(*(int32x2_t *)v668.i8, *(int32x2_t *)v669.i8), *(int32x2_t *)v661.i8, *(int32x2_t *)v1672.i8);
      v672 = vmlal_high_s32(vmull_high_s32(v661, v669), v668, v1672);
      v673 = vdupq_n_s32(0x3871u);
      v674 = vdupq_n_s32(0x1E2Bu);
      v675 = vmlsl_high_s32(vmull_high_s32(v668, v669), v661, v1672);
      v676 = vmlal_s32(vmull_s32(*(int32x2_t *)v662.i8, *(int32x2_t *)v674.i8), *(int32x2_t *)v667.i8, *(int32x2_t *)v673.i8);
      v677 = vmlsl_s32(vmull_s32(*(int32x2_t *)v667.i8, *(int32x2_t *)v674.i8), *(int32x2_t *)v662.i8, *(int32x2_t *)v673.i8);
      v678 = vmlal_high_s32(vmull_high_s32(v662, v674), v667, v673);
      v679 = vmlsl_high_s32(vmull_high_s32(v667, v674), v662, v673);
      v680 = vdupq_n_s32(0x289Au);
      v681 = vdupq_n_s32(0x3179u);
      v682 = vmlal_s32(vmull_s32(*(int32x2_t *)v665.i8, *(int32x2_t *)v681.i8), *(int32x2_t *)v664.i8, *(int32x2_t *)v680.i8);
      v683 = vmlsl_s32(vmull_s32(*(int32x2_t *)v664.i8, *(int32x2_t *)v681.i8), *(int32x2_t *)v665.i8, *(int32x2_t *)v680.i8);
      v684 = vmlal_high_s32(vmull_high_s32(v665, v681), v664, v680);
      v685 = vmlsl_high_s32(vmull_high_s32(v664, v681), v665, v680);
      v686 = vdupq_n_s32(0x1294u);
      v687 = vdupq_n_s32(0x3D3Fu);
      v688 = vmlal_s32(vmull_s32(*(int32x2_t *)v666.i8, *(int32x2_t *)v687.i8), *(int32x2_t *)v663.i8, *(int32x2_t *)v686.i8);
      v689 = vmlal_high_s32(vmull_high_s32(v666, v687), v663, v686);
      v1724 = (int32x4_t)a1[15];
      v1732 = (int32x4_t)a1[13];
      v690 = vmlsl_s32(vmull_s32(*(int32x2_t *)v663.i8, *(int32x2_t *)v687.i8), *(int32x2_t *)v666.i8, *(int32x2_t *)v686.i8);
      v691 = vmlsl_high_s32(vmull_high_s32(v663, v687), v666, v686);
      v692 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v682, v670), 0xEuLL), vaddq_s64(v684, v672), 0xEuLL);
      v1710 = (int32x4_t)a1[14];
      v1716 = (int32x4_t)a1[12];
      v693 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v683, v671), 0xEuLL), vaddq_s64(v685, v675), 0xEuLL);
      v694 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v688, v676), 0xEuLL), vaddq_s64(v689, v678), 0xEuLL);
      v1704 = (int32x4_t)a1[9];
      v695 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v690, v677), 0xEuLL), vaddq_s64(v691, v679), 0xEuLL);
      v696 = vrshrn_n_s64(vsubq_s64(v670, v682), 0xEuLL);
      *(int32x2_t *)v670.i8 = vrshrn_n_s64(vsubq_s64(v672, v684), 0xEuLL);
      *(int32x2_t *)v672.i8 = vrshrn_n_s64(vsubq_s64(v671, v683), 0xEuLL);
      *(int32x2_t *)v683.i8 = vrshrn_n_s64(vsubq_s64(v675, v685), 0xEuLL);
      *(int32x2_t *)v676.i8 = vrshrn_n_s64(vsubq_s64(v676, v688), 0xEuLL);
      *(int32x2_t *)v678.i8 = vrshrn_n_s64(vsubq_s64(v678, v689), 0xEuLL);
      *(int32x2_t *)v690.i8 = vrshrn_n_s64(vsubq_s64(v677, v690), 0xEuLL);
      *(int32x2_t *)v691.i8 = vrshrn_n_s64(vsubq_s64(v679, v691), 0xEuLL);
      v697 = vdupq_n_s32(0x3B21u);
      v698 = vdupq_n_s32(0x187Eu);
      v699 = vmlal_s32(vmull_s32(*(int32x2_t *)v672.i8, *(int32x2_t *)v698.i8), v696, *(int32x2_t *)v697.i8);
      v700 = vmlsl_s32(vmull_s32(v696, *(int32x2_t *)v698.i8), *(int32x2_t *)v672.i8, *(int32x2_t *)v697.i8);
      v701 = vmlal_s32(vmull_s32(*(int32x2_t *)v683.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v670.i8, *(int32x2_t *)v697.i8);
      v702 = vmlsl_s32(vmull_s32(*(int32x2_t *)v670.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v683.i8, *(int32x2_t *)v697.i8);
      v703 = vmlal_s32(vmull_s32(*(int32x2_t *)v676.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v690.i8, *(int32x2_t *)v698.i8);
      v704 = vmlsl_s32(vmull_s32(*(int32x2_t *)v690.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v676.i8, *(int32x2_t *)v698.i8);
      v705 = vmlal_s32(vmull_s32(*(int32x2_t *)v678.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v691.i8, *(int32x2_t *)v698.i8);
      v706 = vmlsl_s32(vmull_s32(*(int32x2_t *)v691.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v678.i8, *(int32x2_t *)v698.i8);
      v1682 = vaddq_s32(v694, v692);
      v707 = vaddq_s32(v693, v695);
      v708 = vsubq_s32(v692, v694);
      v709 = vsubq_s32(v693, v695);
      v710 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v704, v699), 0xEuLL), vaddq_s64(v706, v701), 0xEuLL);
      v1699 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v703, v700), 0xEuLL), vaddq_s64(v705, v702), 0xEuLL);
      v711 = vsubq_s64(v701, v706);
      *(int32x2_t *)v701.i8 = vrshrn_n_s64(vsubq_s64(v699, v704), 0xEuLL);
      *(int32x2_t *)v711.i8 = vrshrn_n_s64(v711, 0xEuLL);
      *(int32x2_t *)v692.i8 = vrshrn_n_s64(vsubq_s64(v700, v703), 0xEuLL);
      *(int32x2_t *)v702.i8 = vrshrn_n_s64(vsubq_s64(v702, v705), 0xEuLL);
      v712 = vaddq_s32(v709, v708);
      v713 = vsubq_s32(v708, v709);
      v714 = vdupq_n_s32(0x2D41u);
      v1694 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v713.i8, *(int32x2_t *)v714.i8), 0xEuLL), vmull_high_s32(v713, v714), 0xEuLL);
      v1668 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v692.i8, *(int32x2_t *)v701.i8), *(int32x2_t *)v714.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v702.i8, *(int32x2_t *)v711.i8), *(int32x2_t *)v714.i8), 0xEuLL);
      v715 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v701.i8, *(int32x2_t *)v692.i8), *(int32x2_t *)v714.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v711.i8, *(int32x2_t *)v702.i8), *(int32x2_t *)v714.i8), 0xEuLL);
      v1677 = vnegq_s32(v710);
      v716 = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v712.i8, *(int32x2_t *)v714.i8), 0xEuLL), vmull_high_s32(v712, v714), 0xEuLL));
      v1685 = vnegq_s32(v715);
      v1689 = vnegq_s32(v707);
      v717 = (int64x2_t)vtrn1q_s32((int32x4_t)v14, (int32x4_t)v16);
      v718 = (int64x2_t)vtrn2q_s32((int32x4_t)v14, (int32x4_t)v16);
      v719 = (int64x2_t)vtrn1q_s32(v1704, (int32x4_t)v15);
      v720 = (int64x2_t)vtrn2q_s32(v1704, (int32x4_t)v15);
      v721 = (int64x2_t)vtrn1q_s32(v1716, v1710);
      v722 = (int64x2_t)vtrn2q_s32(v1716, v1710);
      v723 = (int64x2_t)vtrn1q_s32(v1732, v1724);
      v724 = (int64x2_t)vtrn2q_s32(v1732, v1724);
      v725 = (int32x4_t)vzip1q_s64(v717, v721);
      v726 = (int32x4_t)vzip2q_s64(v717, v721);
      v727 = (int32x4_t)vzip1q_s64(v718, v722);
      v728 = (int32x4_t)vzip2q_s64(v718, v722);
      v729 = (int32x4_t)vzip1q_s64(v719, v723);
      v730 = (int32x4_t)vzip2q_s64(v719, v723);
      v731 = (int32x4_t)vzip1q_s64(v720, v724);
      v732 = (int32x4_t)vzip2q_s64(v720, v724);
      v733 = vmlal_s32(vmull_s32(*(int32x2_t *)v725.i8, *(int32x2_t *)v669.i8), *(int32x2_t *)v732.i8, *(int32x2_t *)v1672.i8);
      v734 = vmlsl_s32(vmull_s32(*(int32x2_t *)v732.i8, *(int32x2_t *)v669.i8), *(int32x2_t *)v725.i8, *(int32x2_t *)v1672.i8);
      v735 = vmlal_high_s32(vmull_high_s32(v725, v669), v732, v1672);
      v736 = vmlsl_high_s32(vmull_high_s32(v732, v669), v725, v1672);
      v737 = vmlal_s32(vmull_s32(*(int32x2_t *)v726.i8, *(int32x2_t *)v674.i8), *(int32x2_t *)v731.i8, *(int32x2_t *)v673.i8);
      v738 = vmlsl_s32(vmull_s32(*(int32x2_t *)v731.i8, *(int32x2_t *)v674.i8), *(int32x2_t *)v726.i8, *(int32x2_t *)v673.i8);
      v739 = vmlal_high_s32(vmull_high_s32(v726, v674), v731, v673);
      v740 = vmlsl_high_s32(vmull_high_s32(v731, v674), v726, v673);
      v741 = vmlal_s32(vmull_s32(*(int32x2_t *)v729.i8, *(int32x2_t *)v681.i8), *(int32x2_t *)v728.i8, *(int32x2_t *)v680.i8);
      v742 = vmlsl_s32(vmull_s32(*(int32x2_t *)v728.i8, *(int32x2_t *)v681.i8), *(int32x2_t *)v729.i8, *(int32x2_t *)v680.i8);
      v743 = vmlal_high_s32(vmull_high_s32(v729, v681), v728, v680);
      v744 = vmlsl_high_s32(vmull_high_s32(v728, v681), v729, v680);
      v745 = vmull_high_s32(v727, v687);
      v746 = vmlal_s32(vmull_s32(*(int32x2_t *)v730.i8, *(int32x2_t *)v687.i8), *(int32x2_t *)v727.i8, *(int32x2_t *)v686.i8);
      v747 = vmlsl_s32(vmull_s32(*(int32x2_t *)v727.i8, *(int32x2_t *)v687.i8), *(int32x2_t *)v730.i8, *(int32x2_t *)v686.i8);
      v748 = vmlal_high_s32(vmull_high_s32(v730, v687), v727, v686);
      v749 = vmlsl_high_s32(v745, v730, v686);
      v750 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v741, v733), 0xEuLL), vaddq_s64(v743, v735), 0xEuLL);
      v751 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v742, v734), 0xEuLL), vaddq_s64(v744, v736), 0xEuLL);
      v752 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v746, v737), 0xEuLL), vaddq_s64(v748, v739), 0xEuLL);
      v753 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v747, v738), 0xEuLL), vaddq_s64(v749, v740), 0xEuLL);
      *(int32x2_t *)v733.i8 = vrshrn_n_s64(vsubq_s64(v733, v741), 0xEuLL);
      *(int32x2_t *)v735.i8 = vrshrn_n_s64(vsubq_s64(v735, v743), 0xEuLL);
      *(int32x2_t *)v742.i8 = vrshrn_n_s64(vsubq_s64(v734, v742), 0xEuLL);
      *(int32x2_t *)v736.i8 = vrshrn_n_s64(vsubq_s64(v736, v744), 0xEuLL);
      *(int32x2_t *)v737.i8 = vrshrn_n_s64(vsubq_s64(v737, v746), 0xEuLL);
      *(int32x2_t *)v739.i8 = vrshrn_n_s64(vsubq_s64(v739, v748), 0xEuLL);
      *(int32x2_t *)v738.i8 = vrshrn_n_s64(vsubq_s64(v738, v747), 0xEuLL);
      *(int32x2_t *)v740.i8 = vrshrn_n_s64(vsubq_s64(v740, v749), 0xEuLL);
      v754 = vmlal_s32(vmull_s32(*(int32x2_t *)v742.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v733.i8, *(int32x2_t *)v697.i8);
      v755 = vmlsl_s32(vmull_s32(*(int32x2_t *)v733.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v742.i8, *(int32x2_t *)v697.i8);
      v756 = vmlal_s32(vmull_s32(*(int32x2_t *)v736.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v735.i8, *(int32x2_t *)v697.i8);
      v757 = vmlsl_s32(vmull_s32(*(int32x2_t *)v735.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v736.i8, *(int32x2_t *)v697.i8);
      v758 = vmlal_s32(vmull_s32(*(int32x2_t *)v737.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v738.i8, *(int32x2_t *)v698.i8);
      v759 = vmlsl_s32(vmull_s32(*(int32x2_t *)v738.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v737.i8, *(int32x2_t *)v698.i8);
      v760 = vmlal_s32(vmull_s32(*(int32x2_t *)v739.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v740.i8, *(int32x2_t *)v698.i8);
      v761 = vmlsl_s32(vmull_s32(*(int32x2_t *)v740.i8, *(int32x2_t *)v697.i8), *(int32x2_t *)v739.i8, *(int32x2_t *)v698.i8);
      v1717 = vaddq_s32(v752, v750);
      v762 = vsubq_s32(v750, v752);
      v763 = vsubq_s32(v751, v753);
      v764 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v759, v754), 0xEuLL), vaddq_s64(v761, v756), 0xEuLL);
      v765 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v758, v755), 0xEuLL), vaddq_s64(v760, v757), 0xEuLL);
      v766 = vsubq_s64(v756, v761);
      *(int32x2_t *)v761.i8 = vrshrn_n_s64(vsubq_s64(v754, v759), 0xEuLL);
      *(int32x2_t *)v766.i8 = vrshrn_n_s64(v766, 0xEuLL);
      *(int32x2_t *)v755.i8 = vrshrn_n_s64(vsubq_s64(v755, v758), 0xEuLL);
      *(int32x2_t *)v760.i8 = vrshrn_n_s64(vsubq_s64(v757, v760), 0xEuLL);
      v767 = vaddq_s32(v763, v762);
      v768 = vsubq_s32(v762, v763);
      v769 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v768.i8, *(int32x2_t *)v714.i8), 0xEuLL), vmull_high_s32(v768, v714), 0xEuLL);
      v770 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v755.i8, *(int32x2_t *)v761.i8), *(int32x2_t *)v714.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v760.i8, *(int32x2_t *)v766.i8), *(int32x2_t *)v714.i8), 0xEuLL);
      v771 = vnegq_s32(v764);
      v772 = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v767.i8, *(int32x2_t *)v714.i8), 0xEuLL), vmull_high_s32(v767, v714), 0xEuLL));
      v773 = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v761.i8, *(int32x2_t *)v755.i8), *(int32x2_t *)v714.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v766.i8, *(int32x2_t *)v760.i8), *(int32x2_t *)v714.i8), 0xEuLL));
      v774 = vnegq_s32(vaddq_s32(v751, v753));
      v775 = (int64x2_t)vtrn2q_s32(v1682, v1677);
      v776 = (int64x2_t)vtrn2q_s32(v1717, v771);
      v777 = (int64x2_t)vtrn2q_s32(v1668, v716);
      v778 = (int64x2_t)vtrn2q_s32(v770, v772);
      v779 = (int32x4_t)vzip2q_s64(v775, v777);
      v780 = (int32x4_t)vzip1q_s64(v776, v778);
      v781 = vdupq_n_s32(0xFFFFDC72);
      v782 = vdupq_n_s32(0x3537u);
      v1733 = vmlal_s32(vmull_s32(*(int32x2_t *)v780.i8, *(int32x2_t *)v782.i8), *(int32x2_t *)v779.i8, *(int32x2_t *)v781.i8);
      v1705 = vmlal_high_s32(vmull_high_s32(v780, v782), v779, v781);
      v1711 = vmlsl_s32(vmull_s32(*(int32x2_t *)v779.i8, *(int32x2_t *)v782.i8), *(int32x2_t *)v780.i8, *(int32x2_t *)v781.i8);
      v1658 = vmlsl_high_s32(vmull_high_s32(v779, v782), v780, v781);
      v783 = (int64x2_t)vtrn2q_s32(v1694, v1685);
      v784 = (int64x2_t)vtrn2q_s32(v769, v773);
      v785 = (int64x2_t)vtrn2q_s32(v1699, v1689);
      v786 = v774;
      v787 = (int64x2_t)vtrn2q_s32(v765, v774);
      v788 = (int32x4_t)vzip2q_s64(v783, v785);
      v789 = (int32x4_t)vzip1q_s64(v784, v787);
      v1673 = vmlal_s32(vmull_s32(*(int32x2_t *)v789.i8, *(int32x2_t *)v782.i8), *(int32x2_t *)v788.i8, *(int32x2_t *)v781.i8);
      v1664 = vmlal_high_s32(vmull_high_s32(v789, v782), v788, v781);
      v1666 = vmlsl_s32(vmull_s32(*(int32x2_t *)v788.i8, *(int32x2_t *)v782.i8), *(int32x2_t *)v789.i8, *(int32x2_t *)v781.i8);
      v1662 = vmlsl_high_s32(vmull_high_s32(v788, v782), v789, v781);
      v790 = (int32x4_t)vzip1q_s64(v775, v777);
      v791 = (int32x4_t)vzip2q_s64(v776, v778);
      v792 = vdupq_n_s32(0xC7Cu);
      v793 = vdupq_n_s32(0x3EC5u);
      v794 = vmlsl_s32(vmull_s32(*(int32x2_t *)v790.i8, *(int32x2_t *)v792.i8), *(int32x2_t *)v791.i8, *(int32x2_t *)v793.i8);
      v795 = vmlsl_high_s32(vmull_high_s32(v790, v792), v791, v793);
      v796 = vmlal_s32(vmull_s32(*(int32x2_t *)v791.i8, *(int32x2_t *)v792.i8), *(int32x2_t *)v790.i8, *(int32x2_t *)v793.i8);
      v797 = vmlal_high_s32(vmull_high_s32(v791, v792), v790, v793);
      v798 = (int32x4_t)vzip1q_s64(v783, v785);
      v799 = (int32x4_t)vzip2q_s64(v784, v787);
      v800 = vmlsl_s32(vmull_s32(*(int32x2_t *)v798.i8, *(int32x2_t *)v792.i8), *(int32x2_t *)v799.i8, *(int32x2_t *)v793.i8);
      v1725 = vmlsl_high_s32(vmull_high_s32(v798, v792), v799, v793);
      v801 = vmlal_s32(vmull_s32(*(int32x2_t *)v799.i8, *(int32x2_t *)v792.i8), *(int32x2_t *)v798.i8, *(int32x2_t *)v793.i8);
      v1660 = vmlal_high_s32(vmull_high_s32(v799, v792), v798, v793);
      v802 = (int64x2_t)vtrn1q_s32(v1682, v1677);
      v803 = (int64x2_t)vtrn1q_s32(v1717, v771);
      v804 = (int64x2_t)vtrn1q_s32(v1668, v716);
      v805 = (int64x2_t)vtrn1q_s32(v770, v772);
      v806 = (int32x4_t)vzip2q_s64(v802, v804);
      v807 = (int32x4_t)vzip2q_s64(v803, v805);
      v1718 = vmlsl_s32(vmull_s32(*(int32x2_t *)v806.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v807.i8, *(int32x2_t *)v697.i8);
      v1683 = vmlsl_high_s32(vmull_high_s32(v806, v698), v807, v697);
      v1678 = vmlal_s32(vmull_s32(*(int32x2_t *)v807.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v806.i8, *(int32x2_t *)v697.i8);
      v1669 = vmlal_high_s32(vmull_high_s32(v807, v698), v806, v697);
      v808 = (int64x2_t)vtrn1q_s32(v1694, v1685);
      v809 = (int64x2_t)vtrn1q_s32(v769, v773);
      v810 = (int64x2_t)vtrn1q_s32(v1699, v1689);
      v811 = (int64x2_t)vtrn1q_s32(v765, v786);
      v812 = (int32x4_t)vzip2q_s64(v808, v810);
      v813 = (int32x4_t)vzip2q_s64(v809, v811);
      v1700 = vmlsl_s32(vmull_s32(*(int32x2_t *)v812.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v813.i8, *(int32x2_t *)v697.i8);
      v1695 = vmlsl_high_s32(vmull_high_s32(v812, v698), v813, v697);
      v1690 = vmlal_s32(vmull_s32(*(int32x2_t *)v813.i8, *(int32x2_t *)v698.i8), *(int32x2_t *)v812.i8, *(int32x2_t *)v697.i8);
      v814 = vmlal_high_s32(vmull_high_s32(v813, v698), v812, v697);
      v815 = (int32x4_t)vzip1q_s64(v802, v804);
      v816 = (int32x4_t)vzip1q_s64(v803, v805);
      v817 = vmlal_s32(vmull_s32(*(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8);
      v818 = vmlal_high_s32(vmull_high_s32(v816, v714), v815, v714);
      v819 = vmlsl_s32(vmull_s32(*(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8);
      v820 = vmlsl_high_s32(vmull_high_s32(v815, v714), v816, v714);
      *(int32x2_t *)v760.i8 = vsub_s32(vrshrn_n_s64(v797, 0xEuLL), vrshrn_n_s64(v1658, 0xEuLL));
      *(int32x2_t *)v804.i8 = vsub_s32(vrshrn_n_s64(v795, 0xEuLL), vrshrn_n_s64(v1705, 0xEuLL));
      *(int32x2_t *)v805.i8 = vrshrn_n_s64(v794, 0xEuLL);
      *(int32x2_t *)v794.i8 = vrshrn_n_s64(v1733, 0xEuLL);
      *(int32x2_t *)v807.i8 = vrshrn_n_s64(v1711, 0xEuLL);
      *(int32x2_t *)v765.i8 = vrshrn_n_s64(v796, 0xEuLL);
      *(int32x2_t *)v816.i8 = vsub_s32(*(int32x2_t *)v765.i8, *(int32x2_t *)v807.i8);
      *(int32x2_t *)v815.i8 = vsub_s32(*(int32x2_t *)v805.i8, *(int32x2_t *)v794.i8);
      v821 = vmlsl_s32(vmull_s32(*(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8);
      v822 = vmlal_s32(vmull_s32(*(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8);
      v823 = vmlsl_s32(vmull_s32(*(int32x2_t *)v760.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v804.i8, *(int32x2_t *)v714.i8);
      v824 = vmlal_s32(vmull_s32(*(int32x2_t *)v804.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v760.i8, *(int32x2_t *)v714.i8);
      v825 = (int32x4_t)vzip1q_s64(v808, v810);
      v826 = (int32x4_t)vzip1q_s64(v809, v811);
      v827 = vmlal_s32(vmull_s32(*(int32x2_t *)v826.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v825.i8, *(int32x2_t *)v714.i8);
      v828 = vmlal_high_s32(vmull_high_s32(v826, v714), v825, v714);
      v829 = vmlsl_s32(vmull_s32(*(int32x2_t *)v825.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v826.i8, *(int32x2_t *)v714.i8);
      v830 = vmlsl_high_s32(vmull_high_s32(v825, v714), v826, v714);
      *(int32x2_t *)v826.i8 = vsub_s32(vrshrn_n_s64(v1660, 0xEuLL), vrshrn_n_s64(v1662, 0xEuLL));
      *(int32x2_t *)v796.i8 = vsub_s32(vrshrn_n_s64(v1725, 0xEuLL), vrshrn_n_s64(v1664, 0xEuLL));
      *(int32x2_t *)v800.i8 = vrshrn_n_s64(v800, 0xEuLL);
      *(int32x2_t *)v730.i8 = vrshrn_n_s64(v1673, 0xEuLL);
      *(int32x2_t *)v787.i8 = vrshrn_n_s64(v1666, 0xEuLL);
      *(int32x2_t *)v801.i8 = vrshrn_n_s64(v801, 0xEuLL);
      *(int32x2_t *)v816.i8 = vsub_s32(*(int32x2_t *)v801.i8, *(int32x2_t *)v787.i8);
      *(int32x2_t *)v815.i8 = vsub_s32(*(int32x2_t *)v800.i8, *(int32x2_t *)v730.i8);
      v831 = vmlsl_s32(vmull_s32(*(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8);
      v832 = vmlal_s32(vmull_s32(*(int32x2_t *)v815.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v816.i8, *(int32x2_t *)v714.i8);
      v833 = vmlsl_s32(vmull_s32(*(int32x2_t *)v826.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v796.i8, *(int32x2_t *)v714.i8);
      v834 = vmlal_s32(vmull_s32(*(int32x2_t *)v796.i8, *(int32x2_t *)v714.i8), *(int32x2_t *)v826.i8, *(int32x2_t *)v714.i8);
      v835 = vrshrn_high_n_s64(vrshrn_n_s64(v817, 0xEuLL), v818, 0xEuLL);
      v836 = vrshrn_high_n_s64(vrshrn_n_s64(v819, 0xEuLL), v820, 0xEuLL);
      v837 = vrshrn_high_n_s64(vrshrn_n_s64(v1718, 0xEuLL), v1683, 0xEuLL);
      v838 = vrshrn_high_n_s64(vrshrn_n_s64(v1678, 0xEuLL), v1669, 0xEuLL);
      v839 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v794.i8, v1705, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v805.i8, v795, 0xEuLL));
      v840 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v765.i8, v797, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v807.i8, v1658, 0xEuLL));
      v841 = vaddq_s32(v837, v836);
      v842 = vsubq_s32(v836, v837);
      v843 = vaddq_s32(v838, v835);
      v844 = vsubq_s32(v835, v838);
      v845 = vrshrn_high_n_s64(vrshrn_n_s64(v821, 0xEuLL), v823, 0xEuLL);
      v846 = vrshrn_high_n_s64(vrshrn_n_s64(v822, 0xEuLL), v824, 0xEuLL);
      v305 = vaddq_s32(v844, v839);
      v847 = vsubq_s32(v844, v839);
      v848 = vaddq_s32(v845, v842);
      v307 = vsubq_s32(v842, v845);
      v309 = vaddq_s32(v846, v841);
      v1731 = vsubq_s32(v841, v846);
      v849 = vaddq_s32(v843, v840);
      v310 = vsubq_s32(v843, v840);
      v850 = vrshrn_high_n_s64(vrshrn_n_s64(v827, 0xEuLL), v828, 0xEuLL);
      *(int32x2_t *)v844.i8 = vrshrn_n_s64(v829, 0xEuLL);
      v304 = v849;
      v851 = vrshrn_high_n_s64(*(int32x2_t *)v844.i8, v830, 0xEuLL);
      v852 = vrshrn_high_n_s64(vrshrn_n_s64(v1700, 0xEuLL), v1695, 0xEuLL);
      v853 = vrshrn_high_n_s64(vrshrn_n_s64(v1690, 0xEuLL), v814, 0xEuLL);
      v854 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v730.i8, v1664, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v800.i8, v1725, 0xEuLL));
      v321 = v848;
      v855 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v801.i8, v1660, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v787.i8, v1662, 0xEuLL));
      v856 = vaddq_s32(v852, v851);
      v857 = vsubq_s32(v851, v852);
      v858 = vaddq_s32(v853, v850);
      v859 = vsubq_s32(v850, v853);
      v860 = vrshrn_high_n_s64(vrshrn_n_s64(v831, 0xEuLL), v833, 0xEuLL);
      v861 = vrshrn_high_n_s64(vrshrn_n_s64(v832, 0xEuLL), v834, 0xEuLL);
      v311 = v847;
    }
    else
    {
      if (a4 == 1)
      {
        v862 = (int64x2_t)vtrn1q_s32((int32x4_t)v5, (int32x4_t)v8);
        v863 = (int64x2_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v8);
        v864 = (int64x2_t)vtrn1q_s32((int32x4_t)v6, (int32x4_t)v7);
        v865 = (int64x2_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7);
        v866 = (int64x2_t)vtrn1q_s32((int32x4_t)v10, (int32x4_t)v12);
        v867 = (int64x2_t)vtrn2q_s32((int32x4_t)v10, (int32x4_t)v12);
        v868 = (int64x2_t)vtrn1q_s32((int32x4_t)v9, (int32x4_t)v11);
        v869 = (int64x2_t)vtrn2q_s32((int32x4_t)v9, (int32x4_t)v11);
        v870 = (int32x4_t)vzip1q_s64(v862, v866);
        v871 = (int32x4_t)vzip2q_s64(v862, v866);
        v872 = (int32x4_t)vzip1q_s64(v863, v867);
        v873 = (int32x4_t)vzip2q_s64(v863, v867);
        v874 = (int32x4_t)vzip1q_s64(v864, v868);
        v875 = (int32x4_t)vzip2q_s64(v864, v868);
        v876 = (int32x4_t)vzip1q_s64(v865, v869);
        v877 = (int32x4_t)vzip2q_s64(v865, v869);
        v878 = vdupq_n_s32(0xC7Cu);
        v879 = vdupq_n_s32(0xFFFFDC72);
        v880 = vdupq_n_s32(0x3537u);
        v881 = vdupq_n_s32(0x3EC5u);
        v882 = vmlsl_high_s32(vmull_high_s32(v872, v878), v877, v881);
        v883 = vmlal_s32(vmull_s32(*(int32x2_t *)v876.i8, *(int32x2_t *)v880.i8), *(int32x2_t *)v873.i8, *(int32x2_t *)v879.i8);
        v884 = vmlal_high_s32(vmull_high_s32(v876, v880), v873, v879);
        v885 = vmlsl_s32(vmull_s32(*(int32x2_t *)v873.i8, *(int32x2_t *)v880.i8), *(int32x2_t *)v876.i8, *(int32x2_t *)v879.i8);
        v886 = vmlsl_high_s32(vmull_high_s32(v873, v880), v876, v879);
        v887 = vmlal_s32(vmull_s32(*(int32x2_t *)v877.i8, *(int32x2_t *)v878.i8), *(int32x2_t *)v872.i8, *(int32x2_t *)v881.i8);
        v888 = vmlal_high_s32(vmull_high_s32(v877, v878), v872, v881);
        *(int32x2_t *)v872.i8 = vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v872.i8, *(int32x2_t *)v878.i8), *(int32x2_t *)v877.i8, *(int32x2_t *)v881.i8), 0xEuLL);
        v889 = vrshrn_n_s64(v883, 0xEuLL);
        v890 = vdupq_n_s32(0x2D41u);
        v891 = vmull_s32(*(int32x2_t *)v870.i8, *(int32x2_t *)v890.i8);
        v892 = vdupq_n_s32(0x187Eu);
        v893 = vmull_high_s32(v870, v890);
        v894 = vmlal_s32(vmull_s32(*(int32x2_t *)v874.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v870.i8, *(int32x2_t *)v890.i8);
        v895 = vmlal_high_s32(vmull_high_s32(v874, v890), v870, v890);
        v896 = vdupq_n_s32(0x3B21u);
        v897 = vmlsl_s32(v891, *(int32x2_t *)v874.i8, *(int32x2_t *)v890.i8);
        v898 = vmlsl_high_s32(v893, v874, v890);
        v899 = vmlsl_s32(vmull_s32(*(int32x2_t *)v871.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v875.i8, *(int32x2_t *)v896.i8);
        v900 = vmlsl_high_s32(vmull_high_s32(v871, v892), v875, v896);
        v901 = vmlal_s32(vmull_s32(*(int32x2_t *)v875.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v871.i8, *(int32x2_t *)v896.i8);
        v902 = vmlal_high_s32(vmull_high_s32(v875, v892), v871, v896);
        *(int32x2_t *)v871.i8 = vsub_s32(*(int32x2_t *)v872.i8, v889);
        *(int32x2_t *)v885.i8 = vrshrn_n_s64(v885, 0xEuLL);
        *(int32x2_t *)v887.i8 = vrshrn_n_s64(v887, 0xEuLL);
        v903 = vrshrn_high_n_s64(vrshrn_n_s64(v894, 0xEuLL), v895, 0xEuLL);
        *(int32x2_t *)v895.i8 = vsub_s32(*(int32x2_t *)v887.i8, *(int32x2_t *)v885.i8);
        v904 = vrshrn_high_n_s64(vrshrn_n_s64(v897, 0xEuLL), v898, 0xEuLL);
        v905 = vrshrn_high_n_s64(vrshrn_n_s64(v899, 0xEuLL), v900, 0xEuLL);
        v906 = vrshrn_high_n_s64(vrshrn_n_s64(v901, 0xEuLL), v902, 0xEuLL);
        v907 = vaddq_s32(vrshrn_high_n_s64(v889, v884, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v872.i8, v882, 0xEuLL));
        v908 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v887.i8, v888, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v885.i8, v886, 0xEuLL));
        v909 = vaddq_s32(v906, v903);
        v910 = vaddq_s32(v905, v904);
        v911 = vsubq_s32(v904, v905);
        v912 = vsubq_s32(v903, v906);
        *(int32x2_t *)v886.i8 = vsub_s32(vrshrn_n_s64(v888, 0xEuLL), vrshrn_n_s64(v886, 0xEuLL));
        *(int32x2_t *)v882.i8 = vsub_s32(vrshrn_n_s64(v882, 0xEuLL), vrshrn_n_s64(v884, 0xEuLL));
        v913 = vmlal_s32(vmull_s32(*(int32x2_t *)v882.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v886.i8, *(int32x2_t *)v890.i8);
        v914 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v895.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v871.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmlsl_s32(vmull_s32(*(int32x2_t *)v886.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v882.i8, *(int32x2_t *)v890.i8), 0xEuLL);
        v915 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v871.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v895.i8, *(int32x2_t *)v890.i8), 0xEuLL), v913, 0xEuLL);
        v916 = vaddq_s32(v909, v908);
        v917 = vaddq_s32(v915, v910);
        v918 = vaddq_s32(v914, v911);
        v919 = vaddq_s32(v912, v907);
        v1706 = vsubq_s32(v911, v914);
        v1712 = vsubq_s32(v912, v907);
        v1719 = vsubq_s32(v909, v908);
        v1726 = vsubq_s32(v910, v915);
        v920 = (int64x2_t)vtrn1q_s32((int32x4_t)v14, (int32x4_t)v16);
        v921 = (int64x2_t)vtrn2q_s32((int32x4_t)v14, (int32x4_t)v16);
        v922 = (int64x2_t)vtrn1q_s32((int32x4_t)v13, (int32x4_t)v15);
        v923 = (int64x2_t)vtrn2q_s32((int32x4_t)v13, (int32x4_t)v15);
        v924 = (int64x2_t)vtrn1q_s32((int32x4_t)v18, (int32x4_t)v20);
        v925 = (int64x2_t)vtrn2q_s32((int32x4_t)v18, (int32x4_t)v20);
        v926 = (int64x2_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v19);
        v927 = (int64x2_t)vtrn2q_s32((int32x4_t)v17, (int32x4_t)v19);
        v928 = (int32x4_t)vzip1q_s64(v920, v924);
        v929 = (int32x4_t)vzip2q_s64(v920, v924);
        v930 = (int32x4_t)vzip1q_s64(v921, v925);
        v931 = (int32x4_t)vzip2q_s64(v921, v925);
        v932 = (int32x4_t)vzip1q_s64(v922, v926);
        v933 = (int32x4_t)vzip2q_s64(v922, v926);
        v934 = (int32x4_t)vzip1q_s64(v923, v927);
        v935 = (int32x4_t)vzip2q_s64(v923, v927);
        v936 = vmull_s32(*(int32x2_t *)v931.i8, *(int32x2_t *)v880.i8);
        v937 = vmull_high_s32(v931, v880);
        v938 = vmlsl_high_s32(vmull_high_s32(v930, v878), v935, v881);
        v939 = vmlal_s32(vmull_s32(*(int32x2_t *)v934.i8, *(int32x2_t *)v880.i8), *(int32x2_t *)v931.i8, *(int32x2_t *)v879.i8);
        v940 = vmlal_high_s32(vmull_high_s32(v934, v880), v931, v879);
        v941 = vmlsl_s32(v936, *(int32x2_t *)v934.i8, *(int32x2_t *)v879.i8);
        v942 = vmlsl_high_s32(v937, v934, v879);
        v943 = vmlal_s32(vmull_s32(*(int32x2_t *)v935.i8, *(int32x2_t *)v878.i8), *(int32x2_t *)v930.i8, *(int32x2_t *)v881.i8);
        v944 = vmlal_high_s32(vmull_high_s32(v935, v878), v930, v881);
        *(int32x2_t *)v935.i8 = vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v930.i8, *(int32x2_t *)v878.i8), *(int32x2_t *)v935.i8, *(int32x2_t *)v881.i8), 0xEuLL);
        *(int32x2_t *)v931.i8 = vrshrn_n_s64(v938, 0xEuLL);
        *(int32x2_t *)v927.i8 = vrshrn_n_s64(v939, 0xEuLL);
        *(int32x2_t *)v934.i8 = vrshrn_n_s64(v940, 0xEuLL);
        *(int32x2_t *)v941.i8 = vrshrn_n_s64(v941, 0xEuLL);
        *(int32x2_t *)v878.i8 = vrshrn_n_s64(v942, 0xEuLL);
        *(int32x2_t *)v939.i8 = vrshrn_n_s64(v943, 0xEuLL);
        *(int32x2_t *)v881.i8 = vrshrn_n_s64(v944, 0xEuLL);
        *(int32x2_t *)v930.i8 = vsub_s32(*(int32x2_t *)v935.i8, *(int32x2_t *)v927.i8);
        v945 = vrshrn_high_n_s64(*(int32x2_t *)v935.i8, v938, 0xEuLL);
        v946 = vrshrn_high_n_s64(*(int32x2_t *)v927.i8, v940, 0xEuLL);
        *(int32x2_t *)v938.i8 = vsub_s32(*(int32x2_t *)v939.i8, *(int32x2_t *)v941.i8);
        v947 = vrshrn_high_n_s64(*(int32x2_t *)v941.i8, v942, 0xEuLL);
        v948 = vrshrn_high_n_s64(*(int32x2_t *)v939.i8, v944, 0xEuLL);
        v949 = vmlal_s32(vmull_s32(*(int32x2_t *)v932.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v928.i8, *(int32x2_t *)v890.i8);
        v950 = vmlal_high_s32(vmull_high_s32(v932, v890), v928, v890);
        v951 = vmlsl_s32(vmull_s32(*(int32x2_t *)v928.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v932.i8, *(int32x2_t *)v890.i8);
        v952 = vmlsl_high_s32(vmull_high_s32(v928, v890), v932, v890);
        v953 = vmlsl_s32(vmull_s32(*(int32x2_t *)v929.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v933.i8, *(int32x2_t *)v896.i8);
        v954 = vmlsl_high_s32(vmull_high_s32(v929, v892), v933, v896);
        v955 = vmlal_s32(vmull_s32(*(int32x2_t *)v933.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v929.i8, *(int32x2_t *)v896.i8);
        v956 = vmlal_high_s32(vmull_high_s32(v933, v892), v929, v896);
        v957 = vrshrn_high_n_s64(vrshrn_n_s64(v949, 0xEuLL), v950, 0xEuLL);
        v958 = vrshrn_high_n_s64(vrshrn_n_s64(v951, 0xEuLL), v952, 0xEuLL);
        v959 = vrshrn_high_n_s64(vrshrn_n_s64(v953, 0xEuLL), v954, 0xEuLL);
        v960 = vrshrn_high_n_s64(vrshrn_n_s64(v955, 0xEuLL), v956, 0xEuLL);
        v961 = vaddq_s32(v946, v945);
        v962 = vaddq_s32(v948, v947);
        v963 = vaddq_s32(v960, v957);
        v964 = vaddq_s32(v959, v958);
        v965 = vsubq_s32(v958, v959);
        v966 = vsubq_s32(v957, v960);
        *(int32x2_t *)v959.i8 = vsub_s32(*(int32x2_t *)v881.i8, *(int32x2_t *)v878.i8);
        *(int32x2_t *)v931.i8 = vsub_s32(*(int32x2_t *)v931.i8, *(int32x2_t *)v934.i8);
        v967 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v938.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v930.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmlsl_s32(vmull_s32(*(int32x2_t *)v959.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v931.i8, *(int32x2_t *)v890.i8), 0xEuLL);
        v968 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v930.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v938.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmlal_s32(vmull_s32(*(int32x2_t *)v931.i8, *(int32x2_t *)v890.i8), *(int32x2_t *)v959.i8, *(int32x2_t *)v890.i8), 0xEuLL);
        v969 = vaddq_s32(v963, v962);
        v970 = vaddq_s32(v968, v964);
        v971 = vaddq_s32(v967, v965);
        v972 = vaddq_s32(v966, v961);
        v1691 = vsubq_s32(v966, v961);
        v1686 = vsubq_s32(v965, v967);
        v1696 = vsubq_s32(v963, v962);
        v1701 = vsubq_s32(v964, v968);
        v973 = (int64x2_t)vtrn1q_s32(v916, v917);
        v974 = (int64x2_t)vtrn2q_s32(v916, v917);
        v975 = (int64x2_t)vtrn1q_s32(v969, v970);
        v976 = (int64x2_t)vtrn2q_s32(v969, v970);
        v977 = (int64x2_t)vtrn1q_s32(v918, v919);
        v978 = (int64x2_t)vtrn2q_s32(v918, v919);
        v979 = (int64x2_t)vtrn1q_s32(v971, v972);
        v980 = (int64x2_t)vtrn2q_s32(v971, v972);
        v981 = (int32x4_t)vzip1q_s64(v973, v977);
        v982 = (int32x4_t)vzip2q_s64(v973, v977);
        v983 = (int32x4_t)vzip1q_s64(v974, v978);
        v984 = (int32x4_t)vzip2q_s64(v974, v978);
        v985 = (int32x4_t)vzip1q_s64(v975, v979);
        v986 = (int32x4_t)vzip2q_s64(v975, v979);
        v987 = (int32x4_t)vzip1q_s64(v976, v980);
        v988 = (int32x4_t)vzip2q_s64(v976, v980);
        v989 = vdupq_n_s32(0x3FB1u);
        v990 = vdupq_n_s32(0x646u);
        v991 = vmlal_s32(vmull_s32(*(int32x2_t *)v981.i8, *(int32x2_t *)v990.i8), *(int32x2_t *)v988.i8, *(int32x2_t *)v989.i8);
        v992 = vmlsl_s32(vmull_s32(*(int32x2_t *)v988.i8, *(int32x2_t *)v990.i8), *(int32x2_t *)v981.i8, *(int32x2_t *)v989.i8);
        v993 = vmlal_high_s32(vmull_high_s32(v981, v990), v988, v989);
        v994 = vdupq_n_s32(0x3871u);
        v995 = vmlsl_high_s32(vmull_high_s32(v988, v990), v981, v989);
        v996 = vdupq_n_s32(0x1E2Bu);
        v997 = vmlal_s32(vmull_s32(*(int32x2_t *)v982.i8, *(int32x2_t *)v996.i8), *(int32x2_t *)v987.i8, *(int32x2_t *)v994.i8);
        v998 = vmlsl_s32(vmull_s32(*(int32x2_t *)v987.i8, *(int32x2_t *)v996.i8), *(int32x2_t *)v982.i8, *(int32x2_t *)v994.i8);
        v999 = vmlal_high_s32(vmull_high_s32(v982, v996), v987, v994);
        v1000 = vmlsl_high_s32(vmull_high_s32(v987, v996), v982, v994);
        v1001 = vdupq_n_s32(0x289Au);
        v1002 = vdupq_n_s32(0x3179u);
        v1003 = vmlal_s32(vmull_s32(*(int32x2_t *)v985.i8, *(int32x2_t *)v1002.i8), *(int32x2_t *)v984.i8, *(int32x2_t *)v1001.i8);
        v1004 = vmlal_high_s32(vmull_high_s32(v985, v1002), v984, v1001);
        v1005 = vmlsl_s32(vmull_s32(*(int32x2_t *)v984.i8, *(int32x2_t *)v1002.i8), *(int32x2_t *)v985.i8, *(int32x2_t *)v1001.i8);
        v1006 = vmlsl_high_s32(vmull_high_s32(v984, v1002), v985, v1001);
        v1007 = vdupq_n_s32(0x1294u);
        v1008 = vdupq_n_s32(0x3D3Fu);
        v1009 = vmlal_s32(vmull_s32(*(int32x2_t *)v986.i8, *(int32x2_t *)v1008.i8), *(int32x2_t *)v983.i8, *(int32x2_t *)v1007.i8);
        v1010 = vmlal_high_s32(vmull_high_s32(v986, v1008), v983, v1007);
        v1011 = vmlsl_s32(vmull_s32(*(int32x2_t *)v983.i8, *(int32x2_t *)v1008.i8), *(int32x2_t *)v986.i8, *(int32x2_t *)v1007.i8);
        v1012 = vmlsl_high_s32(vmull_high_s32(v983, v1008), v986, v1007);
        v1013 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1003, v991), 0xEuLL), vaddq_s64(v1004, v993), 0xEuLL);
        v1014 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1005, v992), 0xEuLL), vaddq_s64(v1006, v995), 0xEuLL);
        v1015 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1009, v997), 0xEuLL), vaddq_s64(v1010, v999), 0xEuLL);
        v1016 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1011, v998), 0xEuLL), vaddq_s64(v1012, v1000), 0xEuLL);
        v1017 = vsubq_s64(v998, v1011);
        *(int32x2_t *)v991.i8 = vrshrn_n_s64(vsubq_s64(v991, v1003), 0xEuLL);
        *(int32x2_t *)v993.i8 = vrshrn_n_s64(vsubq_s64(v993, v1004), 0xEuLL);
        *(int32x2_t *)v998.i8 = vrshrn_n_s64(vsubq_s64(v992, v1005), 0xEuLL);
        *(int32x2_t *)v1006.i8 = vrshrn_n_s64(vsubq_s64(v995, v1006), 0xEuLL);
        *(int32x2_t *)v1009.i8 = vrshrn_n_s64(vsubq_s64(v997, v1009), 0xEuLL);
        *(int32x2_t *)v1010.i8 = vrshrn_n_s64(vsubq_s64(v999, v1010), 0xEuLL);
        *(int32x2_t *)v1017.i8 = vrshrn_n_s64(v1017, 0xEuLL);
        *(int32x2_t *)v1000.i8 = vrshrn_n_s64(vsubq_s64(v1000, v1012), 0xEuLL);
        v1018 = vmlal_s32(vmull_s32(*(int32x2_t *)v998.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v991.i8, *(int32x2_t *)v896.i8);
        v1019 = vmlsl_s32(vmull_s32(*(int32x2_t *)v991.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v998.i8, *(int32x2_t *)v896.i8);
        v1020 = vmlal_s32(vmull_s32(*(int32x2_t *)v1006.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v993.i8, *(int32x2_t *)v896.i8);
        v1021 = vmlsl_s32(vmull_s32(*(int32x2_t *)v993.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v1006.i8, *(int32x2_t *)v896.i8);
        v1022 = vmlal_s32(vmull_s32(*(int32x2_t *)v1009.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1017.i8, *(int32x2_t *)v892.i8);
        v1023 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1017.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1009.i8, *(int32x2_t *)v892.i8);
        v1024 = vmlal_s32(vmull_s32(*(int32x2_t *)v1010.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1000.i8, *(int32x2_t *)v892.i8);
        v1025 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1000.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1010.i8, *(int32x2_t *)v892.i8);
        v304 = vaddq_s32(v1015, v1013);
        v1026 = vsubq_s32(v1013, v1015);
        v1027 = vaddq_s32(v1014, v1016);
        v1028 = vsubq_s32(v1014, v1016);
        v1029 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1023, v1018), 0xEuLL), vaddq_s64(v1025, v1020), 0xEuLL);
        v1731 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1022, v1019), 0xEuLL), vaddq_s64(v1024, v1021), 0xEuLL);
        *(int32x2_t *)v1023.i8 = vrshrn_n_s64(vsubq_s64(v1018, v1023), 0xEuLL);
        *(int32x2_t *)v1025.i8 = vrshrn_n_s64(vsubq_s64(v1020, v1025), 0xEuLL);
        *(int32x2_t *)v1022.i8 = vrshrn_n_s64(vsubq_s64(v1019, v1022), 0xEuLL);
        *(int32x2_t *)v1024.i8 = vrshrn_n_s64(vsubq_s64(v1021, v1024), 0xEuLL);
        v1030 = vaddq_s32(v1028, v1026);
        v1031 = vsubq_s32(v1026, v1028);
        v1032 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1030.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmull_high_s32(v1030, v890), 0xEuLL);
        v311 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1031.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmull_high_s32(v1031, v890), 0xEuLL);
        v321 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1022.i8, *(int32x2_t *)v1023.i8), *(int32x2_t *)v890.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1024.i8, *(int32x2_t *)v1025.i8), *(int32x2_t *)v890.i8), 0xEuLL);
        v1033 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1023.i8, *(int32x2_t *)v1022.i8), *(int32x2_t *)v890.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1025.i8, *(int32x2_t *)v1024.i8), *(int32x2_t *)v890.i8), 0xEuLL);
        v1034 = (int64x2_t)vtrn1q_s32(v1712, v1706);
        v1035 = (int64x2_t)vtrn2q_s32(v1712, v1706);
        v1036 = (int64x2_t)vtrn1q_s32(v1691, v1686);
        v1037 = (int64x2_t)vtrn2q_s32(v1691, v1686);
        v1038 = (int64x2_t)vtrn1q_s32(v1726, v1719);
        v1039 = (int64x2_t)vtrn2q_s32(v1726, v1719);
        v1040 = (int64x2_t)vtrn1q_s32(v1701, v1696);
        v1041 = (int64x2_t)vtrn2q_s32(v1701, v1696);
        v1042 = (int32x4_t)vzip1q_s64(v1034, v1038);
        v1043 = (int32x4_t)vzip2q_s64(v1034, v1038);
        v1044 = (int32x4_t)vzip1q_s64(v1035, v1039);
        v1045 = (int32x4_t)vzip2q_s64(v1035, v1039);
        v1046 = (int32x4_t)vzip1q_s64(v1036, v1040);
        v1047 = (int32x4_t)vzip2q_s64(v1036, v1040);
        v1048 = (int32x4_t)vzip1q_s64(v1037, v1041);
        v1049 = (int32x4_t)vzip2q_s64(v1037, v1041);
        v1050 = vmull_high_s32(v1049, v990);
        v1051 = vmlal_s32(vmull_s32(*(int32x2_t *)v1042.i8, *(int32x2_t *)v990.i8), *(int32x2_t *)v1049.i8, *(int32x2_t *)v989.i8);
        v1052 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1049.i8, *(int32x2_t *)v990.i8), *(int32x2_t *)v1042.i8, *(int32x2_t *)v989.i8);
        v1053 = vmlal_high_s32(vmull_high_s32(v1042, v990), v1049, v989);
        v1054 = vmlsl_high_s32(v1050, v1042, v989);
        v1055 = vmlal_s32(vmull_s32(*(int32x2_t *)v1043.i8, *(int32x2_t *)v996.i8), *(int32x2_t *)v1048.i8, *(int32x2_t *)v994.i8);
        v1056 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1048.i8, *(int32x2_t *)v996.i8), *(int32x2_t *)v1043.i8, *(int32x2_t *)v994.i8);
        v1057 = vmlal_high_s32(vmull_high_s32(v1043, v996), v1048, v994);
        v1058 = vmlsl_high_s32(vmull_high_s32(v1048, v996), v1043, v994);
        v1059 = vmlal_s32(vmull_s32(*(int32x2_t *)v1046.i8, *(int32x2_t *)v1002.i8), *(int32x2_t *)v1045.i8, *(int32x2_t *)v1001.i8);
        v1060 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1045.i8, *(int32x2_t *)v1002.i8), *(int32x2_t *)v1046.i8, *(int32x2_t *)v1001.i8);
        v1061 = vmlal_high_s32(vmull_high_s32(v1046, v1002), v1045, v1001);
        v1062 = vmlsl_high_s32(vmull_high_s32(v1045, v1002), v1046, v1001);
        v1063 = vmlal_s32(vmull_s32(*(int32x2_t *)v1047.i8, *(int32x2_t *)v1008.i8), *(int32x2_t *)v1044.i8, *(int32x2_t *)v1007.i8);
        v1064 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1044.i8, *(int32x2_t *)v1008.i8), *(int32x2_t *)v1047.i8, *(int32x2_t *)v1007.i8);
        v1065 = vmlal_high_s32(vmull_high_s32(v1047, v1008), v1044, v1007);
        v1066 = vmlsl_high_s32(vmull_high_s32(v1044, v1008), v1047, v1007);
        v1067 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1059, v1051), 0xEuLL), vaddq_s64(v1061, v1053), 0xEuLL);
        v1068 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1060, v1052), 0xEuLL), vaddq_s64(v1062, v1054), 0xEuLL);
        v1069 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1063, v1055), 0xEuLL), vaddq_s64(v1065, v1057), 0xEuLL);
        v1070 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1064, v1056), 0xEuLL), vaddq_s64(v1066, v1058), 0xEuLL);
        v1071 = vsubq_s64(v1056, v1064);
        *(int32x2_t *)v1056.i8 = vrshrn_n_s64(vsubq_s64(v1051, v1059), 0xEuLL);
        *(int32x2_t *)v1051.i8 = vrshrn_n_s64(vsubq_s64(v1053, v1061), 0xEuLL);
        *(int32x2_t *)v1060.i8 = vrshrn_n_s64(vsubq_s64(v1052, v1060), 0xEuLL);
        *(int32x2_t *)v1062.i8 = vrshrn_n_s64(vsubq_s64(v1054, v1062), 0xEuLL);
        *(int32x2_t *)v1052.i8 = vrshrn_n_s64(vsubq_s64(v1055, v1063), 0xEuLL);
        *(int32x2_t *)v1054.i8 = vrshrn_n_s64(vsubq_s64(v1057, v1065), 0xEuLL);
        *(int32x2_t *)v1071.i8 = vrshrn_n_s64(v1071, 0xEuLL);
        *(int32x2_t *)v1058.i8 = vrshrn_n_s64(vsubq_s64(v1058, v1066), 0xEuLL);
        v1072 = vmlal_s32(vmull_s32(*(int32x2_t *)v1060.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v1056.i8, *(int32x2_t *)v896.i8);
        v1073 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1056.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v1060.i8, *(int32x2_t *)v896.i8);
        v1074 = vmlal_s32(vmull_s32(*(int32x2_t *)v1062.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v1051.i8, *(int32x2_t *)v896.i8);
        v1075 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1051.i8, *(int32x2_t *)v892.i8), *(int32x2_t *)v1062.i8, *(int32x2_t *)v896.i8);
        v1076 = vmlal_s32(vmull_s32(*(int32x2_t *)v1052.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1071.i8, *(int32x2_t *)v892.i8);
        v1077 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1071.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1052.i8, *(int32x2_t *)v892.i8);
        v1078 = vmlal_s32(vmull_s32(*(int32x2_t *)v1054.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1058.i8, *(int32x2_t *)v892.i8);
        v1079 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1058.i8, *(int32x2_t *)v896.i8), *(int32x2_t *)v1054.i8, *(int32x2_t *)v892.i8);
        v354 = vaddq_s32(v1069, v1067);
        v1080 = vsubq_s32(v1067, v1069);
        v1081 = vsubq_s32(v1068, v1070);
        v1082 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1077, v1072), 0xEuLL), vaddq_s64(v1079, v1074), 0xEuLL);
        v359 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1076, v1073), 0xEuLL), vaddq_s64(v1078, v1075), 0xEuLL);
        *(int32x2_t *)v1077.i8 = vrshrn_n_s64(vsubq_s64(v1072, v1077), 0xEuLL);
        *(int32x2_t *)v1074.i8 = vrshrn_n_s64(vsubq_s64(v1074, v1079), 0xEuLL);
        *(int32x2_t *)v1076.i8 = vrshrn_n_s64(vsubq_s64(v1073, v1076), 0xEuLL);
        *(int32x2_t *)v1072.i8 = vrshrn_n_s64(vsubq_s64(v1075, v1078), 0xEuLL);
        v1083 = vaddq_s32(v1081, v1080);
        v1084 = vsubq_s32(v1080, v1081);
        v1085 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1083.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmull_high_s32(v1083, v890), 0xEuLL);
        v356 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1084.i8, *(int32x2_t *)v890.i8), 0xEuLL), vmull_high_s32(v1084, v890), 0xEuLL);
        v358 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1076.i8, *(int32x2_t *)v1077.i8), *(int32x2_t *)v890.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1072.i8, *(int32x2_t *)v1074.i8), *(int32x2_t *)v890.i8), 0xEuLL);
        v1086 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1077.i8, *(int32x2_t *)v1076.i8), *(int32x2_t *)v890.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1074.i8, *(int32x2_t *)v1072.i8), *(int32x2_t *)v890.i8), 0xEuLL);
        v309 = vnegq_s32(v1029);
        v305 = vnegq_s32(v1032);
        v307 = vnegq_s32(v1033);
        v310 = vnegq_s32(v1027);
        v360 = vnegq_s32(v1082);
        v355 = vnegq_s32(v1085);
        v357 = vnegq_s32(v1086);
        v361 = vnegq_s32(vaddq_s32(v1068, v1070));
        goto LABEL_20;
      }
      if (a4)
      {
        v1727 = (int32x4_t)a1[15];
        v1734 = (int32x4_t)a1[13];
        v1234 = (int64x2_t)vtrn1q_s32((int32x4_t)v5, (int32x4_t)v8);
        v1235 = (int64x2_t)vtrn2q_s32((int32x4_t)v5, (int32x4_t)v8);
        v1713 = (int32x4_t)a1[14];
        v1720 = (int32x4_t)a1[12];
        v1236 = (int64x2_t)vtrn1q_s32((int32x4_t)v6, (int32x4_t)v7);
        v1237 = (int64x2_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7);
        v1707 = (int32x4_t)a1[9];
        v1238 = (int64x2_t)vtrn1q_s32((int32x4_t)v10, (int32x4_t)v12);
        v1239 = (int64x2_t)vtrn2q_s32((int32x4_t)v10, (int32x4_t)v12);
        v1240 = (int64x2_t)vtrn1q_s32((int32x4_t)v9, (int32x4_t)v11);
        v1241 = (int64x2_t)vtrn2q_s32((int32x4_t)v9, (int32x4_t)v11);
        v1242 = (int32x4_t)vzip1q_s64(v1234, v1238);
        v1243 = (int32x4_t)vzip2q_s64(v1234, v1238);
        v1244 = (int32x4_t)vzip1q_s64(v1235, v1239);
        v1245 = (int32x4_t)vzip2q_s64(v1235, v1239);
        v1246 = (int32x4_t)vzip1q_s64(v1236, v1240);
        v1247 = (int32x4_t)vzip2q_s64(v1236, v1240);
        v1248 = (int32x4_t)vzip1q_s64(v1237, v1241);
        v1249 = (int32x4_t)vzip2q_s64(v1237, v1241);
        v1250 = vdupq_n_s32(0x3FB1u);
        v1251 = vdupq_n_s32(0x646u);
        v1252 = vmlal_s32(vmull_s32(*(int32x2_t *)v1242.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1249.i8, *(int32x2_t *)v1250.i8);
        v1253 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1249.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1242.i8, *(int32x2_t *)v1250.i8);
        v1254 = vmlal_high_s32(vmull_high_s32(v1242, v1251), v1249, v1250);
        v1255 = vmlsl_high_s32(vmull_high_s32(v1249, v1251), v1242, v1250);
        v1256 = v1250;
        v1257 = vdupq_n_s32(0x3871u);
        v1702 = vdupq_n_s32(0x1E2Bu);
        v1258 = vmlal_s32(vmull_s32(*(int32x2_t *)v1243.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1248.i8, *(int32x2_t *)v1257.i8);
        v1259 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1248.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1243.i8, *(int32x2_t *)v1257.i8);
        v1260 = vmlal_high_s32(vmull_high_s32(v1243, v1702), v1248, v1257);
        v1261 = vdupq_n_s32(0x3179u);
        v1262 = vmlsl_high_s32(vmull_high_s32(v1248, v1702), v1243, v1257);
        v1692 = v1257;
        v1697 = vdupq_n_s32(0x289Au);
        v1263 = vmlal_s32(vmull_s32(*(int32x2_t *)v1246.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1245.i8, *(int32x2_t *)v1697.i8);
        v1264 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1245.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1246.i8, *(int32x2_t *)v1697.i8);
        v1265 = vmlal_high_s32(vmull_high_s32(v1246, v1261), v1245, v1697);
        v1266 = vmlsl_high_s32(vmull_high_s32(v1245, v1261), v1246, v1697);
        v1267 = vdupq_n_s32(0x1294u);
        v1268 = vdupq_n_s32(0x3D3Fu);
        v1269 = vmlal_s32(vmull_s32(*(int32x2_t *)v1247.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1244.i8, *(int32x2_t *)v1267.i8);
        v1270 = vmlal_high_s32(vmull_high_s32(v1247, v1268), v1244, v1267);
        v1271 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1244.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1247.i8, *(int32x2_t *)v1267.i8);
        v1272 = vmlsl_high_s32(vmull_high_s32(v1244, v1268), v1247, v1267);
        v1273 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1263, v1252), 0xEuLL), vaddq_s64(v1265, v1254), 0xEuLL);
        v1274 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1264, v1253), 0xEuLL), vaddq_s64(v1266, v1255), 0xEuLL);
        v1275 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1269, v1258), 0xEuLL), vaddq_s64(v1270, v1260), 0xEuLL);
        v1276 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1271, v1259), 0xEuLL), vaddq_s64(v1272, v1262), 0xEuLL);
        *(int32x2_t *)v1263.i8 = vrshrn_n_s64(vsubq_s64(v1252, v1263), 0xEuLL);
        *(int32x2_t *)v1252.i8 = vrshrn_n_s64(vsubq_s64(v1254, v1265), 0xEuLL);
        *(int32x2_t *)v1264.i8 = vrshrn_n_s64(vsubq_s64(v1253, v1264), 0xEuLL);
        *(int32x2_t *)v1266.i8 = vrshrn_n_s64(vsubq_s64(v1255, v1266), 0xEuLL);
        *(int32x2_t *)v1269.i8 = vrshrn_n_s64(vsubq_s64(v1258, v1269), 0xEuLL);
        *(int32x2_t *)v1270.i8 = vrshrn_n_s64(vsubq_s64(v1260, v1270), 0xEuLL);
        v1277 = vsubq_s64(v1259, v1271);
        v1278 = vsubq_s64(v1262, v1272);
        *(int32x2_t *)v1262.i8 = vrshrn_n_s64(v1277, 0xEuLL);
        *(int32x2_t *)v1253.i8 = vdup_n_s32(0x3B21u);
        *(int32x2_t *)v1277.i8 = vdup_n_s32(0x187Eu);
        *(int32x2_t *)v1278.i8 = vrshrn_n_s64(v1278, 0xEuLL);
        v1279 = vmlal_s32(vmull_s32(*(int32x2_t *)v1264.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1263.i8, *(int32x2_t *)v1253.i8);
        v1280 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1263.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1264.i8, *(int32x2_t *)v1253.i8);
        v1281 = vmlal_s32(vmull_s32(*(int32x2_t *)v1266.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1252.i8, *(int32x2_t *)v1253.i8);
        v1282 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1252.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1266.i8, *(int32x2_t *)v1253.i8);
        v1283 = vmlal_s32(vmull_s32(*(int32x2_t *)v1269.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1262.i8, *(int32x2_t *)v1277.i8);
        v1284 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1262.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1269.i8, *(int32x2_t *)v1277.i8);
        v1285 = vmlal_s32(vmull_s32(*(int32x2_t *)v1270.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1278.i8, *(int32x2_t *)v1277.i8);
        v1286 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1278.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1270.i8, *(int32x2_t *)v1277.i8);
        v1670 = vaddq_s32(v1275, v1273);
        v1679 = vaddq_s32(v1274, v1276);
        v1287 = vsubq_s32(v1273, v1275);
        v1288 = vsubq_s32(v1274, v1276);
        v1289 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1284, v1279), 0xEuLL), vaddq_s64(v1286, v1281), 0xEuLL);
        v1684 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1283, v1280), 0xEuLL), vaddq_s64(v1285, v1282), 0xEuLL);
        *(int32x2_t *)v1284.i8 = vrshrn_n_s64(vsubq_s64(v1279, v1284), 0xEuLL);
        *(int32x2_t *)v1281.i8 = vrshrn_n_s64(vsubq_s64(v1281, v1286), 0xEuLL);
        v1290 = vsubq_s64(v1282, v1285);
        *(int32x2_t *)v1282.i8 = vrshrn_n_s64(vsubq_s64(v1280, v1283), 0xEuLL);
        *(int32x2_t *)v1290.i8 = vrshrn_n_s64(v1290, 0xEuLL);
        v1291 = vaddq_s32(v1288, v1287);
        v1292 = vsubq_s32(v1287, v1288);
        v1293 = vdupq_n_s32(0x2D41u);
        v1294 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1291.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1291, v1293), 0xEuLL);
        v1295 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1292.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1292, v1293), 0xEuLL);
        v1296 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1282.i8, *(int32x2_t *)v1284.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1290.i8, *(int32x2_t *)v1281.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1674 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1284.i8, *(int32x2_t *)v1282.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1281.i8, *(int32x2_t *)v1290.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1297 = (int64x2_t)vtrn1q_s32((int32x4_t)v14, (int32x4_t)v16);
        v1298 = (int64x2_t)vtrn2q_s32((int32x4_t)v14, (int32x4_t)v16);
        v1299 = (int64x2_t)vtrn1q_s32(v1707, (int32x4_t)v15);
        v1300 = (int64x2_t)vtrn2q_s32(v1707, (int32x4_t)v15);
        v1301 = (int64x2_t)vtrn1q_s32(v1720, v1713);
        v1302 = (int64x2_t)vtrn2q_s32(v1720, v1713);
        v1303 = (int64x2_t)vtrn1q_s32(v1734, v1727);
        v1304 = (int64x2_t)vtrn2q_s32(v1734, v1727);
        v1305 = (int32x4_t)vzip1q_s64(v1297, v1301);
        v1306 = (int32x4_t)vzip2q_s64(v1297, v1301);
        v1307 = (int32x4_t)vzip1q_s64(v1298, v1302);
        v1308 = (int32x4_t)vzip2q_s64(v1298, v1302);
        v1309 = (int32x4_t)vzip1q_s64(v1299, v1303);
        v1310 = (int32x4_t)vzip2q_s64(v1299, v1303);
        v1311 = (int32x4_t)vzip1q_s64(v1300, v1304);
        v1312 = (int32x4_t)vzip2q_s64(v1300, v1304);
        v1687 = v1256;
        v1313 = vmlal_s32(vmull_s32(*(int32x2_t *)v1305.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1312.i8, *(int32x2_t *)v1256.i8);
        v1314 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1312.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1305.i8, *(int32x2_t *)v1256.i8);
        v1315 = vmlal_high_s32(vmull_high_s32(v1305, v1251), v1312, v1256);
        v1316 = vmlsl_high_s32(vmull_high_s32(v1312, v1251), v1305, v1256);
        v1317 = vmlal_s32(vmull_s32(*(int32x2_t *)v1306.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1311.i8, *(int32x2_t *)v1692.i8);
        v1318 = vmlal_high_s32(vmull_high_s32(v1306, v1702), v1311, v1692);
        v1319 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1311.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1306.i8, *(int32x2_t *)v1692.i8);
        v1320 = vmlsl_high_s32(vmull_high_s32(v1311, v1702), v1306, v1692);
        v1321 = vmlal_s32(vmull_s32(*(int32x2_t *)v1309.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1308.i8, *(int32x2_t *)v1697.i8);
        v1322 = vmlal_high_s32(vmull_high_s32(v1309, v1261), v1308, v1697);
        v1323 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1308.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1309.i8, *(int32x2_t *)v1697.i8);
        v1324 = vmlsl_high_s32(vmull_high_s32(v1308, v1261), v1309, v1697);
        v1325 = vmlal_s32(vmull_s32(*(int32x2_t *)v1310.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1307.i8, *(int32x2_t *)v1267.i8);
        v1326 = vmlal_high_s32(vmull_high_s32(v1310, v1268), v1307, v1267);
        v1327 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1307.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1310.i8, *(int32x2_t *)v1267.i8);
        v1328 = vmlsl_high_s32(vmull_high_s32(v1307, v1268), v1310, v1267);
        v1329 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1321, v1313), 0xEuLL), vaddq_s64(v1322, v1315), 0xEuLL);
        v1330 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1323, v1314), 0xEuLL), vaddq_s64(v1324, v1316), 0xEuLL);
        v1331 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1325, v1317), 0xEuLL), vaddq_s64(v1326, v1318), 0xEuLL);
        v1332 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1327, v1319), 0xEuLL), vaddq_s64(v1328, v1320), 0xEuLL);
        v1333 = vsubq_s64(v1318, v1326);
        *(int32x2_t *)v1318.i8 = vrshrn_n_s64(vsubq_s64(v1313, v1321), 0xEuLL);
        *(int32x2_t *)v1315.i8 = vrshrn_n_s64(vsubq_s64(v1315, v1322), 0xEuLL);
        *(int32x2_t *)v1323.i8 = vrshrn_n_s64(vsubq_s64(v1314, v1323), 0xEuLL);
        *(int32x2_t *)v1313.i8 = vrshrn_n_s64(vsubq_s64(v1316, v1324), 0xEuLL);
        *(int32x2_t *)v1317.i8 = vrshrn_n_s64(vsubq_s64(v1317, v1325), 0xEuLL);
        *(int32x2_t *)v1333.i8 = vrshrn_n_s64(v1333, 0xEuLL);
        *(int32x2_t *)v1327.i8 = vrshrn_n_s64(vsubq_s64(v1319, v1327), 0xEuLL);
        *(int32x2_t *)v1320.i8 = vrshrn_n_s64(vsubq_s64(v1320, v1328), 0xEuLL);
        v1334 = vmlal_s32(vmull_s32(*(int32x2_t *)v1323.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1318.i8, *(int32x2_t *)v1253.i8);
        v1335 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1318.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1323.i8, *(int32x2_t *)v1253.i8);
        v1336 = vmlal_s32(vmull_s32(*(int32x2_t *)v1313.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1315.i8, *(int32x2_t *)v1253.i8);
        v1337 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1315.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1313.i8, *(int32x2_t *)v1253.i8);
        v1338 = vmlal_s32(vmull_s32(*(int32x2_t *)v1317.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1327.i8, *(int32x2_t *)v1277.i8);
        v1339 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1327.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1317.i8, *(int32x2_t *)v1277.i8);
        v1340 = vmlal_s32(vmull_s32(*(int32x2_t *)v1333.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1320.i8, *(int32x2_t *)v1277.i8);
        v1341 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1320.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1333.i8, *(int32x2_t *)v1277.i8);
        v1342 = vaddq_s32(v1331, v1329);
        v1343 = vsubq_s32(v1329, v1331);
        v1728 = vaddq_s32(v1330, v1332);
        v1344 = vsubq_s32(v1330, v1332);
        v1345 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1339, v1334), 0xEuLL), vaddq_s64(v1341, v1336), 0xEuLL);
        v1346 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1338, v1335), 0xEuLL), vaddq_s64(v1340, v1337), 0xEuLL);
        v1347 = vsubq_s64(v1334, v1339);
        v1348 = vnegq_s32(v1289);
        v1349 = vnegq_s32(v1294);
        *(int32x2_t *)v1347.i8 = vrshrn_n_s64(v1347, 0xEuLL);
        *(int32x2_t *)v1336.i8 = vrshrn_n_s64(vsubq_s64(v1336, v1341), 0xEuLL);
        v1350 = vsubq_s64(v1337, v1340);
        *(int32x2_t *)v1340.i8 = vrshrn_n_s64(vsubq_s64(v1335, v1338), 0xEuLL);
        *(int32x2_t *)v1350.i8 = vrshrn_n_s64(v1350, 0xEuLL);
        v1351 = vaddq_s32(v1344, v1343);
        v1352 = vsubq_s32(v1343, v1344);
        v1353 = vmull_high_s32(v1351, v1293);
        *(int32x2_t *)v1338.i8 = vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1351.i8, *(int32x2_t *)v1293.i8), 0xEuLL);
        v1354 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1352.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1352, v1293), 0xEuLL);
        v1355 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1340.i8, *(int32x2_t *)v1347.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1350.i8, *(int32x2_t *)v1336.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1356 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1347.i8, *(int32x2_t *)v1340.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1336.i8, *(int32x2_t *)v1350.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1357 = vnegq_s32(v1345);
        v1358 = vnegq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1338.i8, v1353, 0xEuLL));
        v1359 = (int64x2_t)vtrn1q_s32(v1670, v1348);
        v1360 = (int64x2_t)vtrn2q_s32(v1670, v1348);
        v1361 = (int64x2_t)vtrn1q_s32(v1342, v1357);
        v1362 = (int64x2_t)vtrn2q_s32(v1342, v1357);
        v1363 = (int64x2_t)vtrn1q_s32(v1296, v1349);
        v1364 = (int64x2_t)vtrn2q_s32(v1296, v1349);
        v1365 = (int64x2_t)vtrn1q_s32(v1355, v1358);
        v1366 = (int64x2_t)vtrn2q_s32(v1355, v1358);
        v1367 = (int32x4_t)vzip1q_s64(v1359, v1363);
        v1368 = (int32x4_t)vzip2q_s64(v1359, v1363);
        v1369 = (int32x4_t)vzip1q_s64(v1360, v1364);
        v1370 = (int32x4_t)vzip2q_s64(v1360, v1364);
        v1371 = (int32x4_t)vzip1q_s64(v1361, v1365);
        v1372 = (int32x4_t)vzip2q_s64(v1361, v1365);
        v1373 = (int32x4_t)vzip1q_s64(v1362, v1366);
        v1374 = (int32x4_t)vzip2q_s64(v1362, v1366);
        v1375 = vmlal_s32(vmull_s32(*(int32x2_t *)v1367.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1374.i8, *(int32x2_t *)v1687.i8);
        v1376 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1374.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1367.i8, *(int32x2_t *)v1687.i8);
        v1377 = vmlal_high_s32(vmull_high_s32(v1367, v1251), v1374, v1687);
        v1378 = vmlsl_high_s32(vmull_high_s32(v1374, v1251), v1367, v1687);
        v1379 = vmlal_s32(vmull_s32(*(int32x2_t *)v1368.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1373.i8, *(int32x2_t *)v1692.i8);
        v1380 = vmlal_high_s32(vmull_high_s32(v1368, v1702), v1373, v1692);
        v1381 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1373.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1368.i8, *(int32x2_t *)v1692.i8);
        v1382 = vmlsl_high_s32(vmull_high_s32(v1373, v1702), v1368, v1692);
        v1383 = vmlal_s32(vmull_s32(*(int32x2_t *)v1371.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1370.i8, *(int32x2_t *)v1697.i8);
        v1384 = vmlal_high_s32(vmull_high_s32(v1371, v1261), v1370, v1697);
        v1385 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1370.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1371.i8, *(int32x2_t *)v1697.i8);
        v1386 = vmlsl_high_s32(vmull_high_s32(v1370, v1261), v1371, v1697);
        v1387 = vmlal_s32(vmull_s32(*(int32x2_t *)v1372.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1369.i8, *(int32x2_t *)v1267.i8);
        v1388 = vmlal_high_s32(vmull_high_s32(v1372, v1268), v1369, v1267);
        v1389 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1369.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1372.i8, *(int32x2_t *)v1267.i8);
        v1390 = vmlsl_high_s32(vmull_high_s32(v1369, v1268), v1372, v1267);
        v1391 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1383, v1375), 0xEuLL), vaddq_s64(v1384, v1377), 0xEuLL);
        v1392 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1385, v1376), 0xEuLL), vaddq_s64(v1386, v1378), 0xEuLL);
        v1393 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1387, v1379), 0xEuLL), vaddq_s64(v1388, v1380), 0xEuLL);
        v1394 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1389, v1381), 0xEuLL), vaddq_s64(v1390, v1382), 0xEuLL);
        *(int32x2_t *)v1323.i8 = vrshrn_n_s64(vsubq_s64(v1375, v1383), 0xEuLL);
        *(int32x2_t *)v1375.i8 = vrshrn_n_s64(vsubq_s64(v1377, v1384), 0xEuLL);
        *(int32x2_t *)v1376.i8 = vrshrn_n_s64(vsubq_s64(v1376, v1385), 0xEuLL);
        *(int32x2_t *)v1378.i8 = vrshrn_n_s64(vsubq_s64(v1378, v1386), 0xEuLL);
        *(int32x2_t *)v1383.i8 = vrshrn_n_s64(vsubq_s64(v1379, v1387), 0xEuLL);
        *(int32x2_t *)v1386.i8 = vrshrn_n_s64(vsubq_s64(v1380, v1388), 0xEuLL);
        *(int32x2_t *)v1381.i8 = vrshrn_n_s64(vsubq_s64(v1381, v1389), 0xEuLL);
        *(int32x2_t *)v1387.i8 = vrshrn_n_s64(vsubq_s64(v1382, v1390), 0xEuLL);
        v1395 = vmlal_s32(vmull_s32(*(int32x2_t *)v1376.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1323.i8, *(int32x2_t *)v1253.i8);
        v1396 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1323.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1376.i8, *(int32x2_t *)v1253.i8);
        v1397 = vmlal_s32(vmull_s32(*(int32x2_t *)v1378.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1375.i8, *(int32x2_t *)v1253.i8);
        v1398 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1375.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1378.i8, *(int32x2_t *)v1253.i8);
        v1399 = vmlal_s32(vmull_s32(*(int32x2_t *)v1383.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1381.i8, *(int32x2_t *)v1277.i8);
        v1400 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1381.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1383.i8, *(int32x2_t *)v1277.i8);
        v1401 = vmlal_s32(vmull_s32(*(int32x2_t *)v1386.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1387.i8, *(int32x2_t *)v1277.i8);
        v1402 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1387.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1386.i8, *(int32x2_t *)v1277.i8);
        v1403 = vaddq_s32(v1393, v1391);
        v1404 = vsubq_s32(v1391, v1393);
        v1405 = vaddq_s32(v1392, v1394);
        v1406 = vsubq_s32(v1392, v1394);
        v1407 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1400, v1395), 0xEuLL), vaddq_s64(v1402, v1397), 0xEuLL);
        v1731 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1399, v1396), 0xEuLL), vaddq_s64(v1401, v1398), 0xEuLL);
        v1408 = vnegq_s32(v1674);
        v1409 = vnegq_s32(v1679);
        v1410 = vnegq_s32(v1356);
        v1411 = vnegq_s32(v1728);
        v1412 = vsubq_s64(v1397, v1402);
        *(int32x2_t *)v1402.i8 = vrshrn_n_s64(vsubq_s64(v1395, v1400), 0xEuLL);
        *(int32x2_t *)v1412.i8 = vrshrn_n_s64(v1412, 0xEuLL);
        *(int32x2_t *)v1399.i8 = vrshrn_n_s64(vsubq_s64(v1396, v1399), 0xEuLL);
        *(int32x2_t *)v1396.i8 = vrshrn_n_s64(vsubq_s64(v1398, v1401), 0xEuLL);
        v1413 = vaddq_s32(v1406, v1404);
        v1414 = vsubq_s32(v1404, v1406);
        v1415 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1413.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1413, v1293), 0xEuLL);
        v311 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1414.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1414, v1293), 0xEuLL);
        v321 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1399.i8, *(int32x2_t *)v1402.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1396.i8, *(int32x2_t *)v1412.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1416 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1402.i8, *(int32x2_t *)v1399.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1412.i8, *(int32x2_t *)v1396.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1417 = (int64x2_t)vtrn1q_s32(v1295, v1408);
        v1418 = (int64x2_t)vtrn2q_s32(v1295, v1408);
        v1419 = (int64x2_t)vtrn1q_s32(v1354, v1410);
        v1420 = (int64x2_t)vtrn2q_s32(v1354, v1410);
        v1421 = (int64x2_t)vtrn1q_s32(v1684, v1409);
        v1422 = (int64x2_t)vtrn2q_s32(v1684, v1409);
        v1423 = (int64x2_t)vtrn1q_s32(v1346, v1411);
        v1424 = (int64x2_t)vtrn2q_s32(v1346, v1411);
        v1425 = (int32x4_t)vzip1q_s64(v1417, v1421);
        v1426 = (int32x4_t)vzip2q_s64(v1417, v1421);
        v1427 = (int32x4_t)vzip1q_s64(v1418, v1422);
        v1428 = (int32x4_t)vzip2q_s64(v1418, v1422);
        v1429 = (int32x4_t)vzip1q_s64(v1419, v1423);
        v1430 = (int32x4_t)vzip2q_s64(v1419, v1423);
        v1431 = (int32x4_t)vzip1q_s64(v1420, v1424);
        v1432 = (int32x4_t)vzip2q_s64(v1420, v1424);
        v1433 = vmlal_s32(vmull_s32(*(int32x2_t *)v1425.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1432.i8, *(int32x2_t *)v1687.i8);
        v1434 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1432.i8, *(int32x2_t *)v1251.i8), *(int32x2_t *)v1425.i8, *(int32x2_t *)v1687.i8);
        v1435 = vmlal_high_s32(vmull_high_s32(v1425, v1251), v1432, v1687);
        v1436 = vmlsl_high_s32(vmull_high_s32(v1432, v1251), v1425, v1687);
        v1437 = vmlal_s32(vmull_s32(*(int32x2_t *)v1426.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1431.i8, *(int32x2_t *)v1692.i8);
        v1438 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1431.i8, *(int32x2_t *)v1702.i8), *(int32x2_t *)v1426.i8, *(int32x2_t *)v1692.i8);
        v1439 = vmlal_high_s32(vmull_high_s32(v1426, v1702), v1431, v1692);
        v1440 = vmlsl_high_s32(vmull_high_s32(v1431, v1702), v1426, v1692);
        v1441 = vmull_high_s32(v1428, v1261);
        v1442 = vmlal_s32(vmull_s32(*(int32x2_t *)v1429.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1428.i8, *(int32x2_t *)v1697.i8);
        v1443 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1428.i8, *(int32x2_t *)v1261.i8), *(int32x2_t *)v1429.i8, *(int32x2_t *)v1697.i8);
        v1444 = vmlal_high_s32(vmull_high_s32(v1429, v1261), v1428, v1697);
        v1445 = vmlsl_high_s32(v1441, v1429, v1697);
        v1446 = vmull_high_s32(v1427, v1268);
        v1447 = vmlal_s32(vmull_s32(*(int32x2_t *)v1430.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1427.i8, *(int32x2_t *)v1267.i8);
        v1448 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1427.i8, *(int32x2_t *)v1268.i8), *(int32x2_t *)v1430.i8, *(int32x2_t *)v1267.i8);
        v1449 = vmlal_high_s32(vmull_high_s32(v1430, v1268), v1427, v1267);
        v1450 = vmlsl_high_s32(v1446, v1430, v1267);
        v1451 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1442, v1433), 0xEuLL), vaddq_s64(v1444, v1435), 0xEuLL);
        v1452 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1443, v1434), 0xEuLL), vaddq_s64(v1445, v1436), 0xEuLL);
        v1453 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1447, v1437), 0xEuLL), vaddq_s64(v1449, v1439), 0xEuLL);
        v1454 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1448, v1438), 0xEuLL), vaddq_s64(v1450, v1440), 0xEuLL);
        v304 = v1403;
        v1455 = vsubq_s64(v1436, v1445);
        v1456 = vsubq_s64(v1439, v1449);
        *(int32x2_t *)v1442.i8 = vrshrn_n_s64(vsubq_s64(v1433, v1442), 0xEuLL);
        *(int32x2_t *)v1439.i8 = vrshrn_n_s64(vsubq_s64(v1435, v1444), 0xEuLL);
        *(int32x2_t *)v1443.i8 = vrshrn_n_s64(vsubq_s64(v1434, v1443), 0xEuLL);
        *(int32x2_t *)v1455.i8 = vrshrn_n_s64(v1455, 0xEuLL);
        *(int32x2_t *)v1434.i8 = vrshrn_n_s64(vsubq_s64(v1437, v1447), 0xEuLL);
        *(int32x2_t *)v1456.i8 = vrshrn_n_s64(v1456, 0xEuLL);
        *(int32x2_t *)v1448.i8 = vrshrn_n_s64(vsubq_s64(v1438, v1448), 0xEuLL);
        *(int32x2_t *)v1450.i8 = vrshrn_n_s64(vsubq_s64(v1440, v1450), 0xEuLL);
        v1457 = vmlal_s32(vmull_s32(*(int32x2_t *)v1443.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1442.i8, *(int32x2_t *)v1253.i8);
        v1458 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1442.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1443.i8, *(int32x2_t *)v1253.i8);
        v1459 = vmlal_s32(vmull_s32(*(int32x2_t *)v1455.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1439.i8, *(int32x2_t *)v1253.i8);
        v1460 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1439.i8, *(int32x2_t *)v1277.i8), *(int32x2_t *)v1455.i8, *(int32x2_t *)v1253.i8);
        v1461 = vmlal_s32(vmull_s32(*(int32x2_t *)v1434.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1448.i8, *(int32x2_t *)v1277.i8);
        v1462 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1448.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1434.i8, *(int32x2_t *)v1277.i8);
        v1463 = vmull_s32(*(int32x2_t *)v1450.i8, *(int32x2_t *)v1253.i8);
        v1464 = vmlal_s32(vmull_s32(*(int32x2_t *)v1456.i8, *(int32x2_t *)v1253.i8), *(int32x2_t *)v1450.i8, *(int32x2_t *)v1277.i8);
        v1465 = vmlsl_s32(v1463, *(int32x2_t *)v1456.i8, *(int32x2_t *)v1277.i8);
        v354 = vaddq_s32(v1453, v1451);
        v1466 = vsubq_s32(v1451, v1453);
        v1467 = vsubq_s32(v1452, v1454);
        v1468 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1462, v1457), 0xEuLL), vaddq_s64(v1465, v1459), 0xEuLL);
        v359 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v1461, v1458), 0xEuLL), vaddq_s64(v1464, v1460), 0xEuLL);
        *(int32x2_t *)v1462.i8 = vrshrn_n_s64(vsubq_s64(v1457, v1462), 0xEuLL);
        *(int32x2_t *)v1459.i8 = vrshrn_n_s64(vsubq_s64(v1459, v1465), 0xEuLL);
        *(int32x2_t *)v1461.i8 = vrshrn_n_s64(vsubq_s64(v1458, v1461), 0xEuLL);
        *(int32x2_t *)v1465.i8 = vrshrn_n_s64(vsubq_s64(v1460, v1464), 0xEuLL);
        v1469 = vaddq_s32(v1467, v1466);
        v1470 = vsubq_s32(v1466, v1467);
        v1471 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1469.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1469, v1293), 0xEuLL);
        v356 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(*(int32x2_t *)v1470.i8, *(int32x2_t *)v1293.i8), 0xEuLL), vmull_high_s32(v1470, v1293), 0xEuLL);
        v358 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vadd_s32(*(int32x2_t *)v1461.i8, *(int32x2_t *)v1462.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vadd_s32(*(int32x2_t *)v1465.i8, *(int32x2_t *)v1459.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v1472 = vrshrn_high_n_s64(vrshrn_n_s64(vmull_s32(vsub_s32(*(int32x2_t *)v1462.i8, *(int32x2_t *)v1461.i8), *(int32x2_t *)v1293.i8), 0xEuLL), vmull_s32(vsub_s32(*(int32x2_t *)v1459.i8, *(int32x2_t *)v1465.i8), *(int32x2_t *)v1293.i8), 0xEuLL);
        v309 = vnegq_s32(v1407);
        v305 = vnegq_s32(v1415);
        v307 = vnegq_s32(v1416);
        v310 = vnegq_s32(v1405);
        v360 = vnegq_s32(v1468);
        v355 = vnegq_s32(v1471);
        v357 = vnegq_s32(v1472);
        v361 = vnegq_s32(vaddq_s32(v1452, v1454));
        goto LABEL_20;
      }
      v168 = (int64x2_t)vtrn1q_s32((int32x4_t)v5, (int32x4_t)v8);
      v182 = vtrn2q_s32((int32x4_t)v5, (int32x4_t)v8);
      v169 = (int64x2_t)vtrn1q_s32((int32x4_t)v6, (int32x4_t)v7);
      v170 = (int64x2_t)vtrn2q_s32((int32x4_t)v6, (int32x4_t)v7);
      v171 = (int64x2_t)vtrn1q_s32((int32x4_t)v10, (int32x4_t)v12);
      v172 = (int64x2_t)vtrn2q_s32((int32x4_t)v10, (int32x4_t)v12);
      v173 = (int64x2_t)vtrn1q_s32((int32x4_t)v9, (int32x4_t)v11);
      v174 = (int64x2_t)vtrn2q_s32((int32x4_t)v9, (int32x4_t)v11);
      v175 = (int32x4_t)vzip1q_s64(v168, v171);
      v176 = (int32x4_t)vzip2q_s64(v168, v171);
      v177 = (int32x4_t)vzip2q_s64((int64x2_t)v182, v172);
      v178 = (int32x4_t)vzip1q_s64(v169, v173);
      v179 = (int32x4_t)vzip2q_s64(v169, v173);
      v180 = (int32x4_t)vzip1q_s64(v170, v174);
      v181 = (int32x4_t)vzip2q_s64(v170, v174);
      v182.i64[1] = v172.i64[0];
      v183 = vdupq_n_s32(0xC7Cu);
      if (a5 == 10)
      {
        v184 = vdupq_n_s32(0xFFFFDC72);
        v185 = vmulq_s32(v177, v184);
        v186 = vdupq_n_s32(0x3537u);
        v187 = vdupq_n_s32(0x3EC5u);
        v188 = vdupq_n_s32(0xFFFFC13B);
        v189 = vmlaq_s32(vmulq_s32(v182, v183), v181, v188);
        v190 = vdupq_n_s32(0x238Eu);
        v191 = vmlaq_s32(vmulq_s32(v177, v186), v180, v190);
        v192 = vrshrq_n_s32(vmlaq_s32(v185, v180, v186), 0xEuLL);
        v193 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v182, v187), v181, v183), 0xEuLL);
        v194 = vdupq_n_s32(0x2D41u);
        v195 = vmulq_s32(v175, v194);
        v196 = vdupq_n_s32(0x187Eu);
        v197 = vdupq_n_s32(0x3B21u);
        v198 = vmulq_s32(v178, v194);
        v199 = vaddq_s32(v198, v195);
        v200 = vsubq_s32(v195, v198);
        v201 = vdupq_n_s32(0xFFFFC4DF);
        v202 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v176, v196), v179, v201), 0xEuLL);
        v203 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v176, v197), v179, v196), 0xEuLL);
        v204 = vsubq_s32(vrshrq_n_s32(v189, 0xEuLL), v192);
        v205 = vrsraq_n_s32(v192, v189, 0xEuLL);
        v206 = vsubq_s32(v193, vrshrq_n_s32(v191, 0xEuLL));
        v207 = vrsraq_n_s32(v193, v191, 0xEuLL);
        v208 = vsubq_s32(vrshrq_n_s32(v200, 0xEuLL), v202);
        v209 = vrsraq_n_s32(v202, v200, 0xEuLL);
        v210 = vsubq_s32(vrshrq_n_s32(v199, 0xEuLL), v203);
        v211 = vrsraq_n_s32(v203, v199, 0xEuLL);
        v212 = vmulq_s32(v206, v194);
        v213 = vmulq_s32(v204, v194);
        v214 = vsubq_s32(v212, v213);
        v215 = vaddq_s32(v212, v213);
        v216 = vaddq_s32(v211, v207);
        v217 = vaddq_s32(v210, v205);
        v218 = vsubq_s32(v210, v205);
        v219 = vsubq_s32(v208, vrshrq_n_s32(v214, 0xEuLL));
        v220 = vrsraq_n_s32(v208, v214, 0xEuLL);
        v1723 = vsubq_s32(v209, vrshrq_n_s32(v215, 0xEuLL));
        v221 = vrsraq_n_s32(v209, v215, 0xEuLL);
        v222 = vsubq_s32(v211, v207);
        v223 = vtrn1q_s32((int32x4_t)v14, (int32x4_t)v16);
        v224 = vtrn2q_s32((int32x4_t)v14, (int32x4_t)v16);
        v225 = vtrn1q_s32((int32x4_t)v13, (int32x4_t)v15);
        v226 = vtrn2q_s32((int32x4_t)v13, (int32x4_t)v15);
        v227 = (int64x2_t)vtrn1q_s32((int32x4_t)v18, (int32x4_t)v20);
        v228 = (int64x2_t)vtrn2q_s32((int32x4_t)v18, (int32x4_t)v20);
        v229 = (int64x2_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v19);
        v230 = (int64x2_t)vtrn2q_s32((int32x4_t)v17, (int32x4_t)v19);
        v231 = (int32x4_t)vzip2q_s64((int64x2_t)v224, v228);
        v224.i64[1] = v228.i64[0];
        v232 = vmulq_s32(v231, v184);
        v233 = (int32x4_t)vzip2q_s64((int64x2_t)v226, v230);
        v234 = vmlaq_s32(vmulq_s32(v224, v183), v233, v188);
        v226.i64[1] = v230.i64[0];
        v235 = vmlaq_s32(vmulq_s32(v231, v186), v226, v190);
        v236 = vrshrq_n_s32(vmlaq_s32(v232, v226, v186), 0xEuLL);
        v237 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v224, v187), v233, v183), 0xEuLL);
        v238 = (int32x4_t)vzip2q_s64((int64x2_t)v223, v227);
        v223.i64[1] = v227.i64[0];
        v239 = vmulq_s32(v223, v194);
        v240 = (int32x4_t)vzip2q_s64((int64x2_t)v225, v229);
        v225.i64[1] = v229.i64[0];
        v241 = vmulq_s32(v225, v194);
        v242 = vaddq_s32(v241, v239);
        v243 = vsubq_s32(v239, v241);
        v244 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v238, v196), v240, v201), 0xEuLL);
        v245 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v238, v197), v240, v196), 0xEuLL);
        v246 = vsubq_s32(vrshrq_n_s32(v234, 0xEuLL), v236);
        v247 = vrsraq_n_s32(v236, v234, 0xEuLL);
        v248 = vsubq_s32(v237, vrshrq_n_s32(v235, 0xEuLL));
        v249 = vrsraq_n_s32(v237, v235, 0xEuLL);
        v250 = vsubq_s32(vrshrq_n_s32(v243, 0xEuLL), v244);
        v251 = vrsraq_n_s32(v244, v243, 0xEuLL);
        v252 = vsubq_s32(vrshrq_n_s32(v242, 0xEuLL), v245);
        v253 = vrsraq_n_s32(v245, v242, 0xEuLL);
        v254 = vmulq_s32(v248, v194);
        v255 = vmulq_s32(v246, v194);
        v256 = vsubq_s32(v254, v255);
        v257 = vaddq_s32(v254, v255);
        v258 = vaddq_s32(v253, v249);
        v259 = vaddq_s32(v252, v247);
        v260 = vsubq_s32(v252, v247);
        v261 = vsubq_s32(v250, vrshrq_n_s32(v256, 0xEuLL));
        v262 = vrsraq_n_s32(v250, v256, 0xEuLL);
        v263 = vsubq_s32(v251, vrshrq_n_s32(v257, 0xEuLL));
        v264 = vrsraq_n_s32(v251, v257, 0xEuLL);
        v265 = vsubq_s32(v253, v249);
        v266 = vtrn1q_s32(v216, v221);
        v267 = vtrn2q_s32(v216, v221);
        v268 = vtrn1q_s32(v258, v264);
        v269 = vtrn2q_s32(v258, v264);
        v270 = (int64x2_t)vtrn1q_s32(v220, v217);
        v271 = (int64x2_t)vtrn2q_s32(v220, v217);
        v272 = (int64x2_t)vtrn1q_s32(v262, v259);
        v273 = (int64x2_t)vtrn2q_s32(v262, v259);
        v274 = (int32x4_t)vzip2q_s64((int64x2_t)v267, v271);
        v267.i64[1] = v271.i64[0];
        v275 = vmulq_s32(v274, v184);
        v276 = (int32x4_t)vzip2q_s64((int64x2_t)v269, v273);
        v277 = vmlaq_s32(vmulq_s32(v267, v183), v276, v188);
        v269.i64[1] = v273.i64[0];
        v278 = vmlaq_s32(vmulq_s32(v274, v186), v269, v190);
        v279 = vrshrq_n_s32(vmlaq_s32(v275, v269, v186), 0xEuLL);
        v280 = (int32x4_t)vzip2q_s64((int64x2_t)v266, v270);
        v266.i64[1] = v270.i64[0];
        v281 = vrshrq_n_s32(vmlaq_s32(vmulq_s32(v267, v187), v276, v183), 0xEuLL);
        v282 = vmulq_s32(v266, v194);
        v283 = vmulq_s32(v280, v196);
        v284 = vmulq_s32(v280, v197);
        v285 = (int32x4_t)vzip2q_s64((int64x2_t)v268, v272);
        v268.i64[1] = v272.i64[0];
        v286 = vmulq_s32(v268, v194);
        v287 = vaddq_s32(v286, v282);
        v288 = vsubq_s32(v282, v286);
        v289 = vmlaq_s32(v284, v285, v196);
        v290 = vrshrq_n_s32(vmlaq_s32(v283, v285, v201), 0xEuLL);
        v291 = vrshrq_n_s32(v289, 0xEuLL);
        v292 = vsubq_s32(vrshrq_n_s32(v277, 0xEuLL), v279);
        v293 = vrsraq_n_s32(v279, v277, 0xEuLL);
        v294 = vsubq_s32(v281, vrshrq_n_s32(v278, 0xEuLL));
        v295 = vrsraq_n_s32(v281, v278, 0xEuLL);
        v296 = vsubq_s32(vrshrq_n_s32(v288, 0xEuLL), v290);
        v297 = vrsraq_n_s32(v290, v288, 0xEuLL);
        v298 = vsubq_s32(vrshrq_n_s32(v287, 0xEuLL), v291);
        v299 = vrsraq_n_s32(v291, v287, 0xEuLL);
        v300 = vmulq_s32(v294, v194);
        v301 = vmulq_s32(v292, v194);
        v302 = vsubq_s32(v300, v301);
        v303 = vaddq_s32(v300, v301);
        v304 = vaddq_s32(v299, v295);
        v305 = vaddq_s32(v298, v293);
        v306 = vsubq_s32(v298, v293);
        v307 = vsubq_s32(v296, vrshrq_n_s32(v302, 0xEuLL));
        v308 = vrsraq_n_s32(v296, v302, 0xEuLL);
        v1731 = vsubq_s32(v297, vrshrq_n_s32(v303, 0xEuLL));
        v309 = vrsraq_n_s32(v297, v303, 0xEuLL);
        v310 = vsubq_s32(v299, v295);
        v311 = v306;
        v312 = vtrn1q_s32(v218, v219);
        v313 = vtrn2q_s32(v218, v219);
        v314 = vtrn1q_s32(v260, v261);
        v315 = vtrn2q_s32(v260, v261);
        v316 = (int64x2_t)vtrn1q_s32(v1723, v222);
        v317 = (int64x2_t)vtrn2q_s32(v1723, v222);
        v318 = v263;
        v319 = (int64x2_t)vtrn1q_s32(v263, v265);
        v320 = (int64x2_t)vtrn2q_s32(v318, v265);
        v321 = v308;
        v322 = (int32x4_t)vzip2q_s64((int64x2_t)v313, v317);
        v313.i64[1] = v317.i64[0];
        v323 = vmulq_s32(v313, v183);
        v324 = vmulq_s32(v322, v184);
        v325 = vmulq_s32(v313, v187);
        v326 = (int32x4_t)vzip2q_s64((int64x2_t)v315, v320);
        v327 = vmlaq_s32(v323, v326, v188);
        v315.i64[1] = v320.i64[0];
        v328 = vmlaq_s32(vmulq_s32(v322, v186), v315, v190);
        v329 = vrshrq_n_s32(vmlaq_s32(v324, v315, v186), 0xEuLL);
        v330 = vrshrq_n_s32(vmlaq_s32(v325, v326, v183), 0xEuLL);
        v331 = (int32x4_t)vzip2q_s64((int64x2_t)v312, v316);
        v312.i64[1] = v316.i64[0];
        v332 = vmulq_s32(v312, v194);
        v333 = vmulq_s32(v331, v196);
        v334 = vmulq_s32(v331, v197);
        v335 = (int32x4_t)vzip2q_s64((int64x2_t)v314, v319);
        v314.i64[1] = v319.i64[0];
        v336 = vmulq_s32(v314, v194);
        v337 = vaddq_s32(v336, v332);
        v338 = vsubq_s32(v332, v336);
        v339 = vmlaq_s32(v334, v335, v196);
        v340 = vrshrq_n_s32(vmlaq_s32(v333, v335, v201), 0xEuLL);
        v341 = vrshrq_n_s32(v339, 0xEuLL);
        v342 = vsubq_s32(vrshrq_n_s32(v327, 0xEuLL), v329);
        v343 = vrsraq_n_s32(v329, v327, 0xEuLL);
        v344 = vsubq_s32(v330, vrshrq_n_s32(v328, 0xEuLL));
        v345 = vrsraq_n_s32(v330, v328, 0xEuLL);
        v346 = vsubq_s32(vrshrq_n_s32(v338, 0xEuLL), v340);
        v347 = vrsraq_n_s32(v340, v338, 0xEuLL);
        v348 = vsubq_s32(vrshrq_n_s32(v337, 0xEuLL), v341);
        v349 = vrsraq_n_s32(v341, v337, 0xEuLL);
        v350 = vmulq_s32(v344, v194);
        v351 = vmulq_s32(v342, v194);
        v352 = vsubq_s32(v350, v351);
        v353 = vaddq_s32(v350, v351);
        v354 = vaddq_s32(v349, v345);
        v355 = vaddq_s32(v348, v343);
        v356 = vsubq_s32(v348, v343);
        v357 = vsubq_s32(v346, vrshrq_n_s32(v352, 0xEuLL));
        v358 = vrsraq_n_s32(v346, v352, 0xEuLL);
        v359 = vsubq_s32(v347, vrshrq_n_s32(v353, 0xEuLL));
        v360 = vrsraq_n_s32(v347, v353, 0xEuLL);
        v361 = vsubq_s32(v349, v345);
LABEL_20:
        v1226 = vrshrn_high_n_s32(vrshrn_n_s32(v304, 5uLL), v354, 5uLL);
        v1227 = vrshrn_high_n_s32(vrshrn_n_s32(v309, 5uLL), v360, 5uLL);
        v1228 = vrshrn_high_n_s32(vrshrn_n_s32(v321, 5uLL), v358, 5uLL);
        v1229 = vrshrn_high_n_s32(vrshrn_n_s32(v305, 5uLL), v355, 5uLL);
        v1230 = vrshrn_high_n_s32(vrshrn_n_s32(v311, 5uLL), v356, 5uLL);
        v1231 = vrshrn_high_n_s32(vrshrn_n_s32(v307, 5uLL), v357, 5uLL);
        v1232 = vrshrn_high_n_s32(vrshrn_n_s32(v1731, 5uLL), v359, 5uLL);
        v1233 = vrshrn_high_n_s32(vrshrn_n_s32(v310, 5uLL), v361, 5uLL);
        goto LABEL_21;
      }
      v1473 = vmull_s32(*(int32x2_t *)v182.i8, *(int32x2_t *)v183.i8);
      v1474 = vmull_high_s32(v182, v183);
      v1475 = v183;
      v1476 = vdupq_n_s32(0xFFFFDC72);
      v1477 = vdupq_n_s32(0x3537u);
      v1478 = vdupq_n_s32(0x3EC5u);
      v1479 = vmlsl_high_s32(v1474, v181, v1478);
      v1480 = vmlal_s32(vmull_s32(*(int32x2_t *)v180.i8, *(int32x2_t *)v1477.i8), *(int32x2_t *)v177.i8, *(int32x2_t *)v1476.i8);
      v1481 = vmlal_high_s32(vmull_high_s32(v180, v1477), v177, v1476);
      v1482 = vmlsl_s32(vmull_s32(*(int32x2_t *)v177.i8, *(int32x2_t *)v1477.i8), *(int32x2_t *)v180.i8, *(int32x2_t *)v1476.i8);
      v1483 = vmlsl_high_s32(vmull_high_s32(v177, v1477), v180, v1476);
      v1729 = v1475;
      v1484 = vmlal_s32(vmull_s32(*(int32x2_t *)v181.i8, *(int32x2_t *)v1475.i8), *(int32x2_t *)v182.i8, *(int32x2_t *)v1478.i8);
      v1485 = vmlal_high_s32(vmull_high_s32(v181, v1475), v182, v1478);
      *(int32x2_t *)v1473.i8 = vrshrn_n_s64(vmlsl_s32(v1473, *(int32x2_t *)v181.i8, *(int32x2_t *)v1478.i8), 0xEuLL);
      *(int32x2_t *)v1480.i8 = vrshrn_n_s64(v1480, 0xEuLL);
      v1486 = vdupq_n_s32(0x2D41u);
      v1487 = vmull_s32(*(int32x2_t *)v175.i8, *(int32x2_t *)v1486.i8);
      v1488 = vmull_high_s32(v175, v1486);
      v1489 = vdupq_n_s32(0x187Eu);
      v1490 = vmlal_s32(vmull_s32(*(int32x2_t *)v178.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v175.i8, *(int32x2_t *)v1486.i8);
      v1491 = vmlal_high_s32(vmull_high_s32(v178, v1486), v175, v1486);
      v1492 = vdupq_n_s32(0x3B21u);
      v1493 = vmlsl_s32(v1487, *(int32x2_t *)v178.i8, *(int32x2_t *)v1486.i8);
      v1494 = vmlsl_high_s32(v1488, v178, v1486);
      v1495 = vmlsl_s32(vmull_s32(*(int32x2_t *)v176.i8, *(int32x2_t *)v1489.i8), *(int32x2_t *)v179.i8, *(int32x2_t *)v1492.i8);
      v1496 = vmlsl_high_s32(vmull_high_s32(v176, v1489), v179, v1492);
      v1497 = vmlal_s32(vmull_s32(*(int32x2_t *)v179.i8, *(int32x2_t *)v1489.i8), *(int32x2_t *)v176.i8, *(int32x2_t *)v1492.i8);
      v1498 = vmlal_high_s32(vmull_high_s32(v179, v1489), v176, v1492);
      v1499 = vsub_s32(*(int32x2_t *)v1473.i8, *(int32x2_t *)v1480.i8);
      *(int32x2_t *)v1482.i8 = vrshrn_n_s64(v1482, 0xEuLL);
      *(int32x2_t *)v1484.i8 = vrshrn_n_s64(v1484, 0xEuLL);
      v1500 = vrshrn_high_n_s64(vrshrn_n_s64(v1490, 0xEuLL), v1491, 0xEuLL);
      *(int32x2_t *)v1491.i8 = vsub_s32(*(int32x2_t *)v1484.i8, *(int32x2_t *)v1482.i8);
      v1501 = vrshrn_high_n_s64(vrshrn_n_s64(v1493, 0xEuLL), v1494, 0xEuLL);
      v1502 = vrshrn_high_n_s64(vrshrn_n_s64(v1495, 0xEuLL), v1496, 0xEuLL);
      v1503 = vrshrn_high_n_s64(vrshrn_n_s64(v1497, 0xEuLL), v1498, 0xEuLL);
      v1504 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1480.i8, v1481, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1473.i8, v1479, 0xEuLL));
      v1505 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1484.i8, v1485, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1482.i8, v1483, 0xEuLL));
      v1506 = vaddq_s32(v1503, v1500);
      v1507 = vaddq_s32(v1502, v1501);
      v1508 = vsubq_s32(v1501, v1502);
      v1509 = vsubq_s32(v1500, v1503);
      *(int32x2_t *)v1483.i8 = vsub_s32(vrshrn_n_s64(v1485, 0xEuLL), vrshrn_n_s64(v1483, 0xEuLL));
      v1510 = vmull_s32(v1499, *(int32x2_t *)v1486.i8);
      v1511 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1491.i8, *(int32x2_t *)v1486.i8), v1499, *(int32x2_t *)v1486.i8);
      *(int32x2_t *)v1479.i8 = vsub_s32(vrshrn_n_s64(v1479, 0xEuLL), vrshrn_n_s64(v1481, 0xEuLL));
      v1512 = vmlal_s32(vmull_s32(*(int32x2_t *)v1479.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1483.i8, *(int32x2_t *)v1486.i8);
      v1513 = vrshrn_high_n_s64(vrshrn_n_s64(v1511, 0xEuLL), vmlsl_s32(vmull_s32(*(int32x2_t *)v1483.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1479.i8, *(int32x2_t *)v1486.i8), 0xEuLL);
      v1514 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v1510, *(int32x2_t *)v1491.i8, *(int32x2_t *)v1486.i8), 0xEuLL), v1512, 0xEuLL);
      v1675 = vaddq_s32(v1514, v1507);
      v1680 = vaddq_s32(v1506, v1505);
      v1515 = vaddq_s32(v1513, v1508);
      v1516 = vaddq_s32(v1509, v1504);
      v1708 = vsubq_s32(v1508, v1513);
      v1714 = vsubq_s32(v1509, v1504);
      v1735 = vsubq_s32(v1507, v1514);
      v1721 = vsubq_s32(v1506, v1505);
      v1517 = (int64x2_t)vtrn1q_s32((int32x4_t)v14, (int32x4_t)v16);
      v1518 = (int64x2_t)vtrn2q_s32((int32x4_t)v14, (int32x4_t)v16);
      v1519 = (int64x2_t)vtrn1q_s32((int32x4_t)v13, (int32x4_t)v15);
      v1520 = (int64x2_t)vtrn2q_s32((int32x4_t)v13, (int32x4_t)v15);
      v1521 = (int64x2_t)vtrn1q_s32((int32x4_t)v18, (int32x4_t)v20);
      v1522 = (int64x2_t)vtrn2q_s32((int32x4_t)v18, (int32x4_t)v20);
      v1523 = (int64x2_t)vtrn1q_s32((int32x4_t)v17, (int32x4_t)v19);
      v1524 = (int64x2_t)vtrn2q_s32((int32x4_t)v17, (int32x4_t)v19);
      v1525 = (int32x4_t)vzip1q_s64(v1517, v1521);
      v1526 = (int32x4_t)vzip2q_s64(v1517, v1521);
      v1527 = (int32x4_t)vzip1q_s64(v1518, v1522);
      v1528 = (int32x4_t)vzip2q_s64(v1518, v1522);
      v1529 = (int32x4_t)vzip1q_s64(v1519, v1523);
      v1530 = (int32x4_t)vzip2q_s64(v1519, v1523);
      v1531 = (int32x4_t)vzip1q_s64(v1520, v1524);
      v1532 = (int32x4_t)vzip2q_s64(v1520, v1524);
      v1533 = v1477;
      v1534 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1527.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1532.i8, *(int32x2_t *)v1478.i8);
      v1535 = vmlsl_high_s32(vmull_high_s32(v1527, v1729), v1532, v1478);
      v1536 = vmlal_s32(vmull_s32(*(int32x2_t *)v1531.i8, *(int32x2_t *)v1477.i8), *(int32x2_t *)v1528.i8, *(int32x2_t *)v1476.i8);
      v1537 = vmlal_high_s32(vmull_high_s32(v1531, v1477), v1528, v1476);
      v1538 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1528.i8, *(int32x2_t *)v1477.i8), *(int32x2_t *)v1531.i8, *(int32x2_t *)v1476.i8);
      v1539 = vmlsl_high_s32(vmull_high_s32(v1528, v1477), v1531, v1476);
      v1540 = vmlal_s32(vmull_s32(*(int32x2_t *)v1532.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1527.i8, *(int32x2_t *)v1478.i8);
      v1541 = vmlal_high_s32(vmull_high_s32(v1532, v1729), v1527, v1478);
      *(int32x2_t *)v1527.i8 = vrshrn_n_s64(v1534, 0xEuLL);
      *(int32x2_t *)v1531.i8 = vrshrn_n_s64(v1536, 0xEuLL);
      v1698 = v1489;
      v1542 = vmlal_s32(vmull_s32(*(int32x2_t *)v1529.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1525.i8, *(int32x2_t *)v1486.i8);
      v1543 = vmlal_high_s32(vmull_high_s32(v1529, v1486), v1525, v1486);
      v1544 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1525.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1529.i8, *(int32x2_t *)v1486.i8);
      v1545 = vmlsl_high_s32(vmull_high_s32(v1525, v1486), v1529, v1486);
      v1546 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1526.i8, *(int32x2_t *)v1489.i8), *(int32x2_t *)v1530.i8, *(int32x2_t *)v1492.i8);
      v1547 = vmlsl_high_s32(vmull_high_s32(v1526, v1489), v1530, v1492);
      v1548 = vmlal_s32(vmull_s32(*(int32x2_t *)v1530.i8, *(int32x2_t *)v1489.i8), *(int32x2_t *)v1526.i8, *(int32x2_t *)v1492.i8);
      v1549 = vmlal_high_s32(vmull_high_s32(v1530, v1489), v1526, v1492);
      *(int32x2_t *)v1526.i8 = vsub_s32(*(int32x2_t *)v1527.i8, *(int32x2_t *)v1531.i8);
      *(int32x2_t *)v1538.i8 = vrshrn_n_s64(v1538, 0xEuLL);
      *(int32x2_t *)v1540.i8 = vrshrn_n_s64(v1540, 0xEuLL);
      v1550 = vrshrn_high_n_s64(vrshrn_n_s64(v1542, 0xEuLL), v1543, 0xEuLL);
      *(int32x2_t *)v1543.i8 = vsub_s32(*(int32x2_t *)v1540.i8, *(int32x2_t *)v1538.i8);
      v1551 = vrshrn_high_n_s64(vrshrn_n_s64(v1544, 0xEuLL), v1545, 0xEuLL);
      v1552 = vrshrn_high_n_s64(vrshrn_n_s64(v1546, 0xEuLL), v1547, 0xEuLL);
      v1553 = vrshrn_high_n_s64(vrshrn_n_s64(v1548, 0xEuLL), v1549, 0xEuLL);
      v1554 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1531.i8, v1537, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1527.i8, v1535, 0xEuLL));
      v1555 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1540.i8, v1541, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1538.i8, v1539, 0xEuLL));
      v1556 = vaddq_s32(v1553, v1550);
      v1557 = vaddq_s32(v1552, v1551);
      v1558 = vsubq_s32(v1551, v1552);
      v1559 = vsubq_s32(v1550, v1553);
      *(int32x2_t *)v1539.i8 = vsub_s32(vrshrn_n_s64(v1541, 0xEuLL), vrshrn_n_s64(v1539, 0xEuLL));
      *(int32x2_t *)v1535.i8 = vsub_s32(vrshrn_n_s64(v1535, 0xEuLL), vrshrn_n_s64(v1537, 0xEuLL));
      v1560 = vmlal_s32(vmull_s32(*(int32x2_t *)v1535.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1539.i8, *(int32x2_t *)v1486.i8);
      v1561 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v1543.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1526.i8, *(int32x2_t *)v1486.i8), 0xEuLL), vmlsl_s32(vmull_s32(*(int32x2_t *)v1539.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1535.i8, *(int32x2_t *)v1486.i8), 0xEuLL);
      v1562 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v1526.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1543.i8, *(int32x2_t *)v1486.i8), 0xEuLL), v1560, 0xEuLL);
      v1563 = vaddq_s32(v1556, v1555);
      v1564 = vaddq_s32(v1562, v1557);
      v1565 = vaddq_s32(v1561, v1558);
      v1566 = vaddq_s32(v1559, v1554);
      v1567 = vsubq_s32(v1559, v1554);
      v1568 = vsubq_s32(v1558, v1561);
      v1569 = vsubq_s32(v1557, v1562);
      v1570 = vsubq_s32(v1556, v1555);
      v1571 = (int64x2_t)vtrn2q_s32(v1680, v1675);
      v1572 = (int64x2_t)vtrn2q_s32(v1563, v1564);
      v1573 = (int64x2_t)vtrn2q_s32(v1515, v1516);
      v1574 = (int64x2_t)vtrn2q_s32(v1565, v1566);
      v1575 = (int32x4_t)vzip2q_s64(v1571, v1573);
      v1576 = (int32x4_t)vzip1q_s64(v1572, v1574);
      v1703 = vmlal_s32(vmull_s32(*(int32x2_t *)v1576.i8, *(int32x2_t *)v1533.i8), *(int32x2_t *)v1575.i8, *(int32x2_t *)v1476.i8);
      v1688 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1575.i8, *(int32x2_t *)v1533.i8), *(int32x2_t *)v1576.i8, *(int32x2_t *)v1476.i8);
      v1693 = vmlal_high_s32(vmull_high_s32(v1576, v1533), v1575, v1476);
      v1656 = vmlsl_high_s32(vmull_high_s32(v1575, v1533), v1576, v1476);
      v1577 = (int64x2_t)vtrn2q_s32(v1714, v1708);
      v1578 = (int64x2_t)vtrn2q_s32(v1567, v1568);
      v1579 = (int64x2_t)vtrn2q_s32(v1735, v1721);
      v1580 = (int64x2_t)vtrn2q_s32(v1569, v1570);
      v1581 = (int32x4_t)vzip2q_s64(v1577, v1579);
      v1582 = (int32x4_t)vzip1q_s64(v1578, v1580);
      v1671 = vmlal_s32(vmull_s32(*(int32x2_t *)v1582.i8, *(int32x2_t *)v1533.i8), *(int32x2_t *)v1581.i8, *(int32x2_t *)v1476.i8);
      v1665 = vmlal_high_s32(vmull_high_s32(v1582, v1533), v1581, v1476);
      v1667 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1581.i8, *(int32x2_t *)v1533.i8), *(int32x2_t *)v1582.i8, *(int32x2_t *)v1476.i8);
      v1657 = vmlsl_high_s32(vmull_high_s32(v1581, v1533), v1582, v1476);
      v1583 = (int32x4_t)vzip1q_s64(v1571, v1573);
      v1584 = (int32x4_t)vzip2q_s64(v1572, v1574);
      v1585 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1583.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1584.i8, *(int32x2_t *)v1478.i8);
      v1586 = vmlsl_high_s32(vmull_high_s32(v1583, v1729), v1584, v1478);
      v1587 = vmlal_s32(vmull_s32(*(int32x2_t *)v1584.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1583.i8, *(int32x2_t *)v1478.i8);
      v1588 = vmlal_high_s32(vmull_high_s32(v1584, v1729), v1583, v1478);
      v1589 = (int32x4_t)vzip1q_s64(v1577, v1579);
      v1590 = (int32x4_t)vzip2q_s64(v1578, v1580);
      v1591 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1589.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1590.i8, *(int32x2_t *)v1478.i8);
      v1659 = vmlsl_high_s32(vmull_high_s32(v1589, v1729), v1590, v1478);
      v1592 = vmlal_s32(vmull_s32(*(int32x2_t *)v1590.i8, *(int32x2_t *)v1729.i8), *(int32x2_t *)v1589.i8, *(int32x2_t *)v1478.i8);
      v1730 = vmlal_high_s32(vmull_high_s32(v1590, v1729), v1589, v1478);
      v1593 = (int64x2_t)vtrn1q_s32(v1680, v1675);
      v1594 = (int64x2_t)vtrn1q_s32(v1563, v1564);
      v1595 = (int64x2_t)vtrn1q_s32(v1515, v1516);
      v1596 = (int64x2_t)vtrn1q_s32(v1565, v1566);
      v1597 = (int32x4_t)vzip2q_s64(v1593, v1595);
      v1598 = (int32x4_t)vzip2q_s64(v1594, v1596);
      v1681 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1597.i8, *(int32x2_t *)v1698.i8), *(int32x2_t *)v1598.i8, *(int32x2_t *)v1492.i8);
      v1676 = vmlsl_high_s32(vmull_high_s32(v1597, v1698), v1598, v1492);
      v1663 = vmlal_s32(vmull_s32(*(int32x2_t *)v1598.i8, *(int32x2_t *)v1698.i8), *(int32x2_t *)v1597.i8, *(int32x2_t *)v1492.i8);
      v1661 = vmlal_high_s32(vmull_high_s32(v1598, v1698), v1597, v1492);
      v1599 = (int64x2_t)vtrn1q_s32(v1714, v1708);
      v1600 = (int64x2_t)vtrn1q_s32(v1567, v1568);
      v1601 = (int64x2_t)vtrn1q_s32(v1735, v1721);
      v1602 = (int64x2_t)vtrn1q_s32(v1569, v1570);
      v1603 = (int32x4_t)vzip2q_s64(v1599, v1601);
      v1604 = (int32x4_t)vzip2q_s64(v1600, v1602);
      v1722 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1603.i8, *(int32x2_t *)v1698.i8), *(int32x2_t *)v1604.i8, *(int32x2_t *)v1492.i8);
      v1715 = vmlsl_high_s32(vmull_high_s32(v1603, v1698), v1604, v1492);
      v1709 = vmlal_s32(vmull_s32(*(int32x2_t *)v1604.i8, *(int32x2_t *)v1698.i8), *(int32x2_t *)v1603.i8, *(int32x2_t *)v1492.i8);
      v1605 = vmlal_high_s32(vmull_high_s32(v1604, v1698), v1603, v1492);
      v1606 = (int32x4_t)vzip1q_s64(v1593, v1595);
      v1607 = (int32x4_t)vzip1q_s64(v1594, v1596);
      v1608 = vmlal_s32(vmull_s32(*(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8);
      v1609 = vmlal_high_s32(vmull_high_s32(v1607, v1486), v1606, v1486);
      v1610 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8);
      v1611 = vmlsl_high_s32(vmull_high_s32(v1606, v1486), v1607, v1486);
      *(int32x2_t *)v1593.i8 = vsub_s32(vrshrn_n_s64(v1588, 0xEuLL), vrshrn_n_s64(v1656, 0xEuLL));
      *(int32x2_t *)v1596.i8 = vsub_s32(vrshrn_n_s64(v1586, 0xEuLL), vrshrn_n_s64(v1693, 0xEuLL));
      *(int32x2_t *)v1557.i8 = vrshrn_n_s64(v1585, 0xEuLL);
      *(int32x2_t *)v1585.i8 = vrshrn_n_s64(v1703, 0xEuLL);
      *(int32x2_t *)v1597.i8 = vrshrn_n_s64(v1688, 0xEuLL);
      *(int32x2_t *)v1587.i8 = vrshrn_n_s64(v1587, 0xEuLL);
      *(int32x2_t *)v1607.i8 = vsub_s32(*(int32x2_t *)v1587.i8, *(int32x2_t *)v1597.i8);
      *(int32x2_t *)v1606.i8 = vsub_s32(*(int32x2_t *)v1557.i8, *(int32x2_t *)v1585.i8);
      v1612 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8);
      v1613 = vmlal_s32(vmull_s32(*(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8);
      v1614 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1593.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1596.i8, *(int32x2_t *)v1486.i8);
      v1615 = vmlal_s32(vmull_s32(*(int32x2_t *)v1596.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1593.i8, *(int32x2_t *)v1486.i8);
      v1616 = (int32x4_t)vzip1q_s64(v1599, v1601);
      v1617 = (int32x4_t)vzip1q_s64(v1600, v1602);
      v1618 = vmlal_s32(vmull_s32(*(int32x2_t *)v1617.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1616.i8, *(int32x2_t *)v1486.i8);
      v1619 = vmlal_high_s32(vmull_high_s32(v1617, v1486), v1616, v1486);
      v1620 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1616.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1617.i8, *(int32x2_t *)v1486.i8);
      v1621 = vmlsl_high_s32(vmull_high_s32(v1616, v1486), v1617, v1486);
      *(int32x2_t *)v1617.i8 = vsub_s32(vrshrn_n_s64(v1730, 0xEuLL), vrshrn_n_s64(v1657, 0xEuLL));
      *(int32x2_t *)v1602.i8 = vsub_s32(vrshrn_n_s64(v1659, 0xEuLL), vrshrn_n_s64(v1665, 0xEuLL));
      *(int32x2_t *)v1591.i8 = vrshrn_n_s64(v1591, 0xEuLL);
      *(int32x2_t *)v1491.i8 = vrshrn_n_s64(v1671, 0xEuLL);
      *(int32x2_t *)v1594.i8 = vrshrn_n_s64(v1667, 0xEuLL);
      *(int32x2_t *)v1592.i8 = vrshrn_n_s64(v1592, 0xEuLL);
      *(int32x2_t *)v1607.i8 = vsub_s32(*(int32x2_t *)v1592.i8, *(int32x2_t *)v1594.i8);
      *(int32x2_t *)v1606.i8 = vsub_s32(*(int32x2_t *)v1591.i8, *(int32x2_t *)v1491.i8);
      v1622 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8);
      v1623 = vmlal_s32(vmull_s32(*(int32x2_t *)v1606.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1607.i8, *(int32x2_t *)v1486.i8);
      v1624 = vmlsl_s32(vmull_s32(*(int32x2_t *)v1617.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1602.i8, *(int32x2_t *)v1486.i8);
      v1625 = vmlal_s32(vmull_s32(*(int32x2_t *)v1602.i8, *(int32x2_t *)v1486.i8), *(int32x2_t *)v1617.i8, *(int32x2_t *)v1486.i8);
      v1626 = vrshrn_high_n_s64(vrshrn_n_s64(v1608, 0xEuLL), v1609, 0xEuLL);
      v1627 = vrshrn_high_n_s64(vrshrn_n_s64(v1610, 0xEuLL), v1611, 0xEuLL);
      v1628 = vrshrn_high_n_s64(vrshrn_n_s64(v1681, 0xEuLL), v1676, 0xEuLL);
      v1629 = vrshrn_high_n_s64(vrshrn_n_s64(v1663, 0xEuLL), v1661, 0xEuLL);
      v1630 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1585.i8, v1693, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1557.i8, v1586, 0xEuLL));
      v1631 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1587.i8, v1588, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1597.i8, v1656, 0xEuLL));
      v1632 = vaddq_s32(v1628, v1627);
      v1633 = vsubq_s32(v1627, v1628);
      v1634 = vaddq_s32(v1629, v1626);
      v1635 = vsubq_s32(v1626, v1629);
      v1636 = vrshrn_high_n_s64(vrshrn_n_s64(v1612, 0xEuLL), v1614, 0xEuLL);
      v1637 = vrshrn_high_n_s64(vrshrn_n_s64(v1613, 0xEuLL), v1615, 0xEuLL);
      v305 = vaddq_s32(v1635, v1630);
      v311 = vsubq_s32(v1635, v1630);
      v1638 = vaddq_s32(v1636, v1633);
      v307 = vsubq_s32(v1633, v1636);
      v309 = vaddq_s32(v1637, v1632);
      v1731 = vsubq_s32(v1632, v1637);
      v304 = vaddq_s32(v1634, v1631);
      v310 = vsubq_s32(v1634, v1631);
      v1639 = vrshrn_high_n_s64(vrshrn_n_s64(v1618, 0xEuLL), v1619, 0xEuLL);
      v1640 = vrshrn_high_n_s64(vrshrn_n_s64(v1620, 0xEuLL), v1621, 0xEuLL);
      v1641 = vrshrn_high_n_s64(vrshrn_n_s64(v1722, 0xEuLL), v1715, 0xEuLL);
      v1642 = vrshrn_high_n_s64(vrshrn_n_s64(v1709, 0xEuLL), v1605, 0xEuLL);
      v854 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1491.i8, v1665, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1591.i8, v1659, 0xEuLL));
      v321 = v1638;
      v855 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v1592.i8, v1730, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v1594.i8, v1657, 0xEuLL));
      v856 = vaddq_s32(v1641, v1640);
      v857 = vsubq_s32(v1640, v1641);
      v858 = vaddq_s32(v1642, v1639);
      v859 = vsubq_s32(v1639, v1642);
      v860 = vrshrn_high_n_s64(vrshrn_n_s64(v1622, 0xEuLL), v1624, 0xEuLL);
      v861 = vrshrn_high_n_s64(vrshrn_n_s64(v1623, 0xEuLL), v1625, 0xEuLL);
    }
    v355 = vaddq_s32(v859, v854);
    v356 = vsubq_s32(v859, v854);
    v358 = vaddq_s32(v860, v857);
    v357 = vsubq_s32(v857, v860);
    v360 = vaddq_s32(v861, v856);
    v359 = vsubq_s32(v856, v861);
    v354 = vaddq_s32(v858, v855);
    v361 = vsubq_s32(v858, v855);
    goto LABEL_20;
  }
  v21 = vuzp1q_s16(v5, v6);
  v22 = vuzp1q_s16(v8, v7);
  v23 = vuzp1q_s16(v10, v9);
  v24 = vuzp1q_s16(v12, v11);
  v25 = vuzp1q_s16(v14, v13);
  v26 = vuzp1q_s16(v16, v15);
  v27 = vuzp1q_s16(v18, v17);
  v28 = vuzp1q_s16(v20, v19);
  v29 = (int32x4_t)vtrn1q_s16(v21, v22);
  v30 = (int32x4_t)vtrn2q_s16(v21, v22);
  v31 = (int32x4_t)vtrn1q_s16(v23, v24);
  v32 = (int32x4_t)vtrn2q_s16(v23, v24);
  v33 = (int32x4_t)vtrn1q_s16(v25, v26);
  v34 = (int32x4_t)vtrn2q_s16(v25, v26);
  v35 = (int32x4_t)vtrn1q_s16(v27, v28);
  v36 = (int32x4_t)vtrn2q_s16(v27, v28);
  v37 = (int64x2_t)vtrn1q_s32(v29, v31);
  v38 = (int64x2_t)vtrn2q_s32(v29, v31);
  v39 = (int64x2_t)vtrn1q_s32(v30, v32);
  if (a4 == 2)
  {
    v362 = (int64x2_t)vtrn2q_s32(v30, v32);
    v363 = (int64x2_t)vtrn1q_s32(v33, v35);
    v364 = (int64x2_t)vtrn2q_s32(v33, v35);
    v365 = (int64x2_t)vtrn1q_s32(v34, v36);
    v366 = (int64x2_t)vtrn2q_s32(v34, v36);
    v367 = (int16x8_t)vzip1q_s64(v37, v363);
    v368 = (int16x8_t)vzip2q_s64(v37, v363);
    v369 = (int16x8_t)vzip1q_s64(v39, v365);
    v370 = (int16x8_t)vzip2q_s64(v39, v365);
    v371 = (int16x8_t)vzip1q_s64(v38, v364);
    v372 = (int16x8_t)vzip2q_s64(v38, v364);
    v373 = (int16x8_t)vzip1q_s64(v362, v366);
    v374 = vdupq_n_s16(0x3FB1u);
    v375 = vdupq_n_s16(0x646u);
    v376 = (int16x8_t)vzip2q_s64(v362, v366);
    v377 = vmlal_s16(vmull_s16(*(int16x4_t *)v367.i8, *(int16x4_t *)v375.i8), *(int16x4_t *)v376.i8, *(int16x4_t *)v374.i8);
    v378 = vmlal_high_s16(vmull_high_s16(v367, v375), v376, v374);
    v379 = vmlsl_s16(vmull_s16(*(int16x4_t *)v376.i8, *(int16x4_t *)v375.i8), *(int16x4_t *)v367.i8, *(int16x4_t *)v374.i8);
    v380 = vmlsl_high_s16(vmull_high_s16(v376, v375), v367, v374);
    v381 = vdupq_n_s16(0x3871u);
    v382 = vdupq_n_s16(0x1E2Bu);
    v383 = vmull_s16(*(int16x4_t *)v370.i8, *(int16x4_t *)v382.i8);
    v384 = vmull_high_s16(v370, v382);
    v385 = vmlal_s16(vmull_s16(*(int16x4_t *)v371.i8, *(int16x4_t *)v382.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v381.i8);
    v386 = vmlal_high_s16(vmull_high_s16(v371, v382), v370, v381);
    v387 = vmlsl_s16(v383, *(int16x4_t *)v371.i8, *(int16x4_t *)v381.i8);
    v388 = vmlsl_high_s16(v384, v371, v381);
    v389 = vdupq_n_s16(0x289Au);
    v390 = vdupq_n_s16(0x3179u);
    v391 = vmull_s16(*(int16x4_t *)v373.i8, *(int16x4_t *)v390.i8);
    v392 = vmull_high_s16(v373, v390);
    v393 = vmlal_s16(vmull_s16(*(int16x4_t *)v368.i8, *(int16x4_t *)v390.i8), *(int16x4_t *)v373.i8, *(int16x4_t *)v389.i8);
    v394 = vmlal_high_s16(vmull_high_s16(v368, v390), v373, v389);
    v395 = vmlsl_s16(v391, *(int16x4_t *)v368.i8, *(int16x4_t *)v389.i8);
    v396 = vdupq_n_s16(0x1294u);
    v397 = vdupq_n_s16(0x3D3Fu);
    v398 = vmlsl_high_s16(v392, v368, v389);
    v399 = vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v397.i8);
    v400 = vmull_high_s16(v369, v397);
    v401 = vmlal_s16(vmull_s16(*(int16x4_t *)v372.i8, *(int16x4_t *)v397.i8), *(int16x4_t *)v369.i8, *(int16x4_t *)v396.i8);
    v402 = vmlal_high_s16(vmull_high_s16(v372, v397), v369, v396);
    v403 = vmlsl_s16(v399, *(int16x4_t *)v372.i8, *(int16x4_t *)v396.i8);
    v404 = vmlsl_high_s16(v400, v372, v396);
    v405 = vaddq_s32(v394, v378);
    *(int16x4_t *)v396.i8 = vrshrn_n_s32(vaddq_s32(v393, v377), 0xEuLL);
    *(int16x4_t *)v372.i8 = vrshrn_n_s32(v405, 0xEuLL);
    v406 = vrshrn_n_s32(vaddq_s32(v401, v385), 0xEuLL);
    v407 = vsub_s16(*(int16x4_t *)v396.i8, v406);
    v408 = vrshrn_high_n_s32(*(int16x4_t *)v396.i8, v405, 0xEuLL);
    v409 = vaddq_s32(v398, v380);
    *(int16x4_t *)v405.i8 = vrshrn_n_s32(vaddq_s32(v395, v379), 0xEuLL);
    v410 = vrshrn_n_s32(v409, 0xEuLL);
    v411 = vrshrn_n_s32(vaddq_s32(v403, v387), 0xEuLL);
    v412 = vsub_s16(*(int16x4_t *)v405.i8, v411);
    v413 = vrshrn_high_n_s32(*(int16x4_t *)v405.i8, v409, 0xEuLL);
    v414 = vaddq_s32(v402, v386);
    v415 = vrshrn_n_s32(v414, 0xEuLL);
    v416 = vrshrn_high_n_s32(v406, v414, 0xEuLL);
    v417 = vaddq_s32(v404, v388);
    *(int16x4_t *)v377.i8 = vrshrn_n_s32(vsubq_s32(v377, v393), 0xEuLL);
    *(int16x4_t *)v378.i8 = vrshrn_n_s32(vsubq_s32(v378, v394), 0xEuLL);
    *(int16x4_t *)v395.i8 = vrshrn_n_s32(vsubq_s32(v379, v395), 0xEuLL);
    *(int16x4_t *)v398.i8 = vrshrn_n_s32(vsubq_s32(v380, v398), 0xEuLL);
    *(int16x4_t *)v385.i8 = vrshrn_n_s32(vsubq_s32(v385, v401), 0xEuLL);
    *(int16x4_t *)v386.i8 = vrshrn_n_s32(vsubq_s32(v386, v402), 0xEuLL);
    *(int16x4_t *)v387.i8 = vrshrn_n_s32(vsubq_s32(v387, v403), 0xEuLL);
    *(int16x4_t *)v388.i8 = vrshrn_n_s32(vsubq_s32(v388, v404), 0xEuLL);
    v418 = vdupq_n_s16(0x3B21u);
    v419 = vdupq_n_s16(0x187Eu);
    v420 = vmull_s16(*(int16x4_t *)v377.i8, *(int16x4_t *)v419.i8);
    v421 = vmlal_s16(vmull_s16(*(int16x4_t *)v395.i8, *(int16x4_t *)v419.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v418.i8);
    v422 = vmlal_s16(vmull_s16(*(int16x4_t *)v398.i8, *(int16x4_t *)v419.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v418.i8);
    v423 = vmlsl_s16(v420, *(int16x4_t *)v395.i8, *(int16x4_t *)v418.i8);
    v424 = vmlsl_s16(vmull_s16(*(int16x4_t *)v378.i8, *(int16x4_t *)v419.i8), *(int16x4_t *)v398.i8, *(int16x4_t *)v418.i8);
    v425 = vmull_s16(*(int16x4_t *)v387.i8, *(int16x4_t *)v418.i8);
    v426 = vmlal_s16(vmull_s16(*(int16x4_t *)v385.i8, *(int16x4_t *)v418.i8), *(int16x4_t *)v387.i8, *(int16x4_t *)v419.i8);
    v427 = vmlal_s16(vmull_s16(*(int16x4_t *)v386.i8, *(int16x4_t *)v418.i8), *(int16x4_t *)v388.i8, *(int16x4_t *)v419.i8);
    v428 = vmlsl_s16(v425, *(int16x4_t *)v385.i8, *(int16x4_t *)v419.i8);
    v429 = vmlsl_s16(vmull_s16(*(int16x4_t *)v388.i8, *(int16x4_t *)v418.i8), *(int16x4_t *)v386.i8, *(int16x4_t *)v419.i8);
    v430 = vaddq_s16(v416, v408);
    v431 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v428, v421), 0xEuLL), vaddq_s32(v429, v422), 0xEuLL);
    v432 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v426, v423), 0xEuLL), vaddq_s32(v427, v424), 0xEuLL);
    *(int16x4_t *)v428.i8 = vrshrn_n_s32(vsubq_s32(v421, v428), 0xEuLL);
    *(int16x4_t *)v429.i8 = vrshrn_n_s32(vsubq_s32(v422, v429), 0xEuLL);
    *(int16x4_t *)v426.i8 = vrshrn_n_s32(vsubq_s32(v423, v426), 0xEuLL);
    *(int16x4_t *)v427.i8 = vrshrn_n_s32(vsubq_s32(v424, v427), 0xEuLL);
    v433 = vdupq_n_s16(0x2D41u);
    *(int16x4_t *)v424.i8 = vsub_s16(*(int16x4_t *)v372.i8, v415);
    *(int16x4_t *)v401.i8 = vsub_s16(v410, vrshrn_n_s32(v417, 0xEuLL));
    v434 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v407, *(int16x4_t *)v433.i8), v412, *(int16x4_t *)v433.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v424.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v401.i8, *(int16x4_t *)v433.i8), 0xEuLL);
    v435 = vmlsl_s16(vmull_s16(*(int16x4_t *)v428.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v426.i8, *(int16x4_t *)v433.i8);
    v436 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v426.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v428.i8, *(int16x4_t *)v433.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v427.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v429.i8, *(int16x4_t *)v433.i8), 0xEuLL);
    v437 = vrshrn_high_n_s32(vrshrn_n_s32(v435, 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v429.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v427.i8, *(int16x4_t *)v433.i8), 0xEuLL);
    v438 = vnegq_s16(v431);
    v439 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v412, *(int16x4_t *)v433.i8), v407, *(int16x4_t *)v433.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v401.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v424.i8, *(int16x4_t *)v433.i8), 0xEuLL));
    v440 = vnegq_s16(v437);
    v441 = vnegq_s16(vaddq_s16(v413, vrshrn_high_n_s32(v411, v417, 0xEuLL)));
    v442 = (int32x4_t)vtrn1q_s16(v430, v438);
    v443 = (int32x4_t)vtrn2q_s16(v430, v438);
    v444 = (int32x4_t)vtrn1q_s16(v436, v439);
    v445 = (int32x4_t)vtrn2q_s16(v436, v439);
    v446 = (int32x4_t)vtrn1q_s16(v434, v440);
    v447 = (int32x4_t)vtrn2q_s16(v434, v440);
    v448 = (int32x4_t)vtrn1q_s16(v432, v441);
    v449 = (int32x4_t)vtrn2q_s16(v432, v441);
    v450 = (int64x2_t)vtrn1q_s32(v442, v444);
    v451 = (int64x2_t)vtrn2q_s32(v442, v444);
    v452 = (int64x2_t)vtrn1q_s32(v443, v445);
    v453 = (int64x2_t)vtrn2q_s32(v443, v445);
    v454 = (int64x2_t)vtrn1q_s32(v446, v448);
    v455 = (int64x2_t)vtrn2q_s32(v446, v448);
    v456 = (int64x2_t)vtrn1q_s32(v447, v449);
    v457 = (int64x2_t)vtrn2q_s32(v447, v449);
    v458 = (int16x8_t)vzip1q_s64(v450, v454);
    v459 = (int16x8_t)vzip2q_s64(v450, v454);
    v460 = (int16x8_t)vzip1q_s64(v452, v456);
    v461 = (int16x8_t)vzip2q_s64(v452, v456);
    v462 = (int16x8_t)vzip1q_s64(v451, v455);
    v463 = (int16x8_t)vzip2q_s64(v451, v455);
    v464 = (int16x8_t)vzip1q_s64(v453, v457);
    v465 = vdupq_n_s16(0xC7Cu);
    v466 = (int16x8_t)vzip2q_s64(v453, v457);
    v467 = vdupq_n_s16(0xDC72u);
    v468 = vdupq_n_s16(0x3537u);
    v469 = vmull_s16(*(int16x4_t *)v464.i8, *(int16x4_t *)v468.i8);
    v470 = vmull_high_s16(v464, v468);
    v471 = vdupq_n_s16(0x3EC5u);
    v472 = vmlsl_s16(vmull_s16(*(int16x4_t *)v460.i8, *(int16x4_t *)v465.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v471.i8);
    v473 = vmlsl_high_s16(vmull_high_s16(v460, v465), v466, v471);
    v474 = vmlal_s16(vmull_s16(*(int16x4_t *)v461.i8, *(int16x4_t *)v468.i8), *(int16x4_t *)v464.i8, *(int16x4_t *)v467.i8);
    v475 = vmlal_high_s16(vmull_high_s16(v461, v468), v464, v467);
    v476 = vmlsl_s16(v469, *(int16x4_t *)v461.i8, *(int16x4_t *)v467.i8);
    v477 = vmlsl_high_s16(v470, v461, v467);
    v478 = vmlal_s16(vmull_s16(*(int16x4_t *)v466.i8, *(int16x4_t *)v465.i8), *(int16x4_t *)v460.i8, *(int16x4_t *)v471.i8);
    v479 = vmlal_high_s16(vmull_high_s16(v466, v465), v460, v471);
    *(int16x4_t *)v460.i8 = vrshrn_n_s32(v472, 0xEuLL);
    *(int16x4_t *)v461.i8 = vrshrn_n_s32(v473, 0xEuLL);
    *(int16x4_t *)v464.i8 = vrshrn_n_s32(v474, 0xEuLL);
    *(int16x4_t *)v465.i8 = vsub_s16(*(int16x4_t *)v460.i8, *(int16x4_t *)v464.i8);
    v480 = vrshrn_high_n_s32(*(int16x4_t *)v460.i8, v473, 0xEuLL);
    *(int16x4_t *)v473.i8 = vrshrn_n_s32(v475, 0xEuLL);
    v481 = vrshrn_high_n_s32(*(int16x4_t *)v464.i8, v475, 0xEuLL);
    *(int16x4_t *)v476.i8 = vrshrn_n_s32(v476, 0xEuLL);
    *(int16x4_t *)v475.i8 = vrshrn_n_s32(v477, 0xEuLL);
    *(int16x4_t *)v478.i8 = vrshrn_n_s32(v478, 0xEuLL);
    *(int16x4_t *)v472.i8 = vsub_s16(*(int16x4_t *)v478.i8, *(int16x4_t *)v476.i8);
    v482 = vrshrn_high_n_s32(*(int16x4_t *)v476.i8, v477, 0xEuLL);
    *(int16x4_t *)v477.i8 = vrshrn_n_s32(v479, 0xEuLL);
    v483 = vrshrn_high_n_s32(*(int16x4_t *)v478.i8, v479, 0xEuLL);
    v484 = vmlal_s16(vmull_s16(*(int16x4_t *)v459.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v458.i8, *(int16x4_t *)v433.i8);
    v485 = vmlal_high_s16(vmull_high_s16(v459, v433), v458, v433);
    v486 = vmlsl_s16(vmull_s16(*(int16x4_t *)v458.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v459.i8, *(int16x4_t *)v433.i8);
    v487 = vmlsl_high_s16(vmull_high_s16(v458, v433), v459, v433);
    v488 = vmlsl_s16(vmull_s16(*(int16x4_t *)v462.i8, *(int16x4_t *)v419.i8), *(int16x4_t *)v463.i8, *(int16x4_t *)v418.i8);
    v489 = vmlsl_high_s16(vmull_high_s16(v462, v419), v463, v418);
    v490 = vmlal_s16(vmull_s16(*(int16x4_t *)v463.i8, *(int16x4_t *)v419.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v418.i8);
    v491 = vmlal_high_s16(vmull_high_s16(v463, v419), v462, v418);
    v492 = vrshrn_high_n_s32(vrshrn_n_s32(v484, 0xEuLL), v485, 0xEuLL);
    v493 = vrshrn_high_n_s32(vrshrn_n_s32(v486, 0xEuLL), v487, 0xEuLL);
    v494 = vrshrn_high_n_s32(vrshrn_n_s32(v488, 0xEuLL), v489, 0xEuLL);
    v495 = vrshrn_high_n_s32(vrshrn_n_s32(v490, 0xEuLL), v491, 0xEuLL);
    v496 = vaddq_s16(v481, v480);
    v497 = vaddq_s16(v483, v482);
    v498 = vaddq_s16(v495, v492);
    v499 = vaddq_s16(v494, v493);
    v500 = vsubq_s16(v493, v494);
    v501 = vsubq_s16(v492, v495);
    *(int16x4_t *)v493.i8 = vsub_s16(*(int16x4_t *)v477.i8, *(int16x4_t *)v475.i8);
    *(int16x4_t *)v458.i8 = vsub_s16(*(int16x4_t *)v461.i8, *(int16x4_t *)v473.i8);
    v502 = vmlal_s16(vmull_s16(*(int16x4_t *)v465.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v472.i8, *(int16x4_t *)v433.i8);
    v503 = vmlal_s16(vmull_s16(*(int16x4_t *)v458.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v493.i8, *(int16x4_t *)v433.i8);
    v504 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v472.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v465.i8, *(int16x4_t *)v433.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v493.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v458.i8, *(int16x4_t *)v433.i8), 0xEuLL);
    v505 = vrshrn_high_n_s32(vrshrn_n_s32(v502, 0xEuLL), v503, 0xEuLL);
    v160 = vaddq_s16(v498, v497);
    v161 = vaddq_s16(v505, v499);
    v162 = vaddq_s16(v504, v500);
    v163 = vaddq_s16(v501, v496);
    v164 = vsubq_s16(v501, v496);
    v165 = vsubq_s16(v500, v504);
    v166 = vsubq_s16(v499, v505);
    v167 = vsubq_s16(v498, v497);
  }
  else if (a4 == 1)
  {
    v506 = (int64x2_t)vtrn2q_s32(v30, v32);
    v507 = (int64x2_t)vtrn1q_s32(v33, v35);
    v508 = (int64x2_t)vtrn2q_s32(v33, v35);
    v509 = (int64x2_t)vtrn1q_s32(v34, v36);
    v510 = (int64x2_t)vtrn2q_s32(v34, v36);
    v511 = (int16x8_t)vzip1q_s64(v37, v507);
    v512 = (int16x8_t)vzip2q_s64(v37, v507);
    v513 = (int16x8_t)vzip1q_s64(v39, v509);
    v514 = (int16x8_t)vzip2q_s64(v39, v509);
    v515 = (int16x8_t)vzip1q_s64(v38, v508);
    v516 = (int16x8_t)vzip2q_s64(v38, v508);
    v517 = (int16x8_t)vzip1q_s64(v506, v510);
    v518 = (int16x8_t)vzip2q_s64(v506, v510);
    v519 = vdupq_n_s16(0xC7Cu);
    v520 = vdupq_n_s16(0xDC72u);
    v521 = vdupq_n_s16(0x3537u);
    v522 = vmull_s16(*(int16x4_t *)v517.i8, *(int16x4_t *)v521.i8);
    v523 = vmull_high_s16(v517, v521);
    v524 = vdupq_n_s16(0x3EC5u);
    v525 = vmlsl_high_s16(vmull_high_s16(v513, v519), v518, v524);
    v526 = vmlal_s16(vmull_s16(*(int16x4_t *)v514.i8, *(int16x4_t *)v521.i8), *(int16x4_t *)v517.i8, *(int16x4_t *)v520.i8);
    v527 = vmlal_high_s16(vmull_high_s16(v514, v521), v517, v520);
    v528 = vmlsl_s16(v522, *(int16x4_t *)v514.i8, *(int16x4_t *)v520.i8);
    v529 = vmlsl_high_s16(v523, v514, v520);
    v530 = vmlal_s16(vmull_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v519.i8), *(int16x4_t *)v513.i8, *(int16x4_t *)v524.i8);
    v531 = vmlal_high_s16(vmull_high_s16(v518, v519), v513, v524);
    *(int16x4_t *)v513.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v513.i8, *(int16x4_t *)v519.i8), *(int16x4_t *)v518.i8, *(int16x4_t *)v524.i8), 0xEuLL);
    *(int16x4_t *)v518.i8 = vrshrn_n_s32(v525, 0xEuLL);
    *(int16x4_t *)v519.i8 = vrshrn_n_s32(v526, 0xEuLL);
    v532 = vsub_s16(*(int16x4_t *)v513.i8, *(int16x4_t *)v519.i8);
    v533 = vrshrn_high_n_s32(*(int16x4_t *)v513.i8, v525, 0xEuLL);
    *(int16x4_t *)v520.i8 = vrshrn_n_s32(v527, 0xEuLL);
    v534 = vrshrn_high_n_s32(*(int16x4_t *)v519.i8, v527, 0xEuLL);
    *(int16x4_t *)v525.i8 = vrshrn_n_s32(v528, 0xEuLL);
    *(int16x4_t *)v527.i8 = vrshrn_n_s32(v529, 0xEuLL);
    *(int16x4_t *)v528.i8 = vrshrn_n_s32(v530, 0xEuLL);
    *(int16x4_t *)v530.i8 = vsub_s16(*(int16x4_t *)v528.i8, *(int16x4_t *)v525.i8);
    v535 = vrshrn_high_n_s32(*(int16x4_t *)v525.i8, v529, 0xEuLL);
    *(int16x4_t *)v526.i8 = vrshrn_n_s32(v531, 0xEuLL);
    v536 = vrshrn_high_n_s32(*(int16x4_t *)v528.i8, v531, 0xEuLL);
    v537 = vdupq_n_s16(0x2D41u);
    v538 = vdupq_n_s16(0x187Eu);
    v539 = vdupq_n_s16(0x3B21u);
    v540 = vmlal_s16(vmull_s16(*(int16x4_t *)v512.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v511.i8, *(int16x4_t *)v537.i8);
    v541 = vmlal_high_s16(vmull_high_s16(v512, v537), v511, v537);
    v542 = vmlsl_s16(vmull_s16(*(int16x4_t *)v511.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v512.i8, *(int16x4_t *)v537.i8);
    v543 = vmlsl_high_s16(vmull_high_s16(v511, v537), v512, v537);
    v544 = vmlsl_s16(vmull_s16(*(int16x4_t *)v515.i8, *(int16x4_t *)v538.i8), *(int16x4_t *)v516.i8, *(int16x4_t *)v539.i8);
    v545 = vmlsl_high_s16(vmull_high_s16(v515, v538), v516, v539);
    v546 = vmlal_s16(vmull_s16(*(int16x4_t *)v516.i8, *(int16x4_t *)v538.i8), *(int16x4_t *)v515.i8, *(int16x4_t *)v539.i8);
    v547 = vmlal_high_s16(vmull_high_s16(v516, v538), v515, v539);
    v548 = vrshrn_high_n_s32(vrshrn_n_s32(v540, 0xEuLL), v541, 0xEuLL);
    v549 = vrshrn_high_n_s32(vrshrn_n_s32(v542, 0xEuLL), v543, 0xEuLL);
    v550 = vrshrn_high_n_s32(vrshrn_n_s32(v544, 0xEuLL), v545, 0xEuLL);
    v551 = vrshrn_high_n_s32(vrshrn_n_s32(v546, 0xEuLL), v547, 0xEuLL);
    v552 = vaddq_s16(v534, v533);
    v553 = vaddq_s16(v536, v535);
    v554 = vaddq_s16(v551, v548);
    v555 = vaddq_s16(v550, v549);
    v556 = vsubq_s16(v549, v550);
    v557 = vsubq_s16(v548, v551);
    *(int16x4_t *)v527.i8 = vsub_s16(*(int16x4_t *)v526.i8, *(int16x4_t *)v527.i8);
    *(int16x4_t *)v518.i8 = vsub_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v520.i8);
    v558 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v530.i8, *(int16x4_t *)v537.i8), v532, *(int16x4_t *)v537.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v527.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v518.i8, *(int16x4_t *)v537.i8), 0xEuLL);
    v559 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v532, *(int16x4_t *)v537.i8), *(int16x4_t *)v530.i8, *(int16x4_t *)v537.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v518.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v527.i8, *(int16x4_t *)v537.i8), 0xEuLL);
    v560 = vaddq_s16(v554, v553);
    v561 = vaddq_s16(v559, v555);
    v562 = vaddq_s16(v558, v556);
    v563 = vaddq_s16(v557, v552);
    v564 = vsubq_s16(v557, v552);
    v565 = vsubq_s16(v556, v558);
    v566 = vsubq_s16(v555, v559);
    v567 = vsubq_s16(v554, v553);
    v568 = (int32x4_t)vtrn1q_s16(v560, v561);
    v569 = (int32x4_t)vtrn2q_s16(v560, v561);
    v570 = (int32x4_t)vtrn1q_s16(v562, v563);
    v571 = (int32x4_t)vtrn2q_s16(v562, v563);
    v572 = (int32x4_t)vtrn1q_s16(v564, v565);
    v573 = (int32x4_t)vtrn2q_s16(v564, v565);
    v574 = (int32x4_t)vtrn1q_s16(v566, v567);
    v575 = (int32x4_t)vtrn2q_s16(v566, v567);
    v576 = (int64x2_t)vtrn1q_s32(v568, v570);
    v577 = (int64x2_t)vtrn2q_s32(v568, v570);
    v578 = (int64x2_t)vtrn1q_s32(v569, v571);
    v579 = (int64x2_t)vtrn2q_s32(v569, v571);
    v580 = (int64x2_t)vtrn1q_s32(v572, v574);
    v581 = (int64x2_t)vtrn2q_s32(v572, v574);
    v582 = (int64x2_t)vtrn1q_s32(v573, v575);
    v583 = (int64x2_t)vtrn2q_s32(v573, v575);
    v584 = (int16x8_t)vzip1q_s64(v576, v580);
    v585 = (int16x8_t)vzip2q_s64(v576, v580);
    v586 = (int16x8_t)vzip1q_s64(v578, v582);
    v587 = (int16x8_t)vzip2q_s64(v578, v582);
    v588 = (int16x8_t)vzip1q_s64(v577, v581);
    v589 = (int16x8_t)vzip2q_s64(v577, v581);
    v590 = (int16x8_t)vzip1q_s64(v579, v583);
    v591 = (int16x8_t)vzip2q_s64(v579, v583);
    v592 = vdupq_n_s16(0x3FB1u);
    v593 = vdupq_n_s16(0x646u);
    v594 = vmull_s16(*(int16x4_t *)v591.i8, *(int16x4_t *)v593.i8);
    v595 = vmull_high_s16(v591, v593);
    v596 = vmlal_s16(vmull_s16(*(int16x4_t *)v584.i8, *(int16x4_t *)v593.i8), *(int16x4_t *)v591.i8, *(int16x4_t *)v592.i8);
    v597 = vmlal_high_s16(vmull_high_s16(v584, v593), v591, v592);
    v598 = vmlsl_s16(v594, *(int16x4_t *)v584.i8, *(int16x4_t *)v592.i8);
    v599 = vmlsl_high_s16(v595, v584, v592);
    v600 = vdupq_n_s16(0x3871u);
    v601 = vdupq_n_s16(0x1E2Bu);
    v602 = vmull_s16(*(int16x4_t *)v587.i8, *(int16x4_t *)v601.i8);
    v603 = vmull_high_s16(v587, v601);
    v604 = vmlal_s16(vmull_s16(*(int16x4_t *)v588.i8, *(int16x4_t *)v601.i8), *(int16x4_t *)v587.i8, *(int16x4_t *)v600.i8);
    v605 = vmlal_high_s16(vmull_high_s16(v588, v601), v587, v600);
    v606 = vmlsl_s16(v602, *(int16x4_t *)v588.i8, *(int16x4_t *)v600.i8);
    v607 = vdupq_n_s16(0x289Au);
    v608 = vmlsl_high_s16(v603, v588, v600);
    v609 = vdupq_n_s16(0x3179u);
    v610 = vmull_s16(*(int16x4_t *)v590.i8, *(int16x4_t *)v609.i8);
    v611 = vmull_high_s16(v590, v609);
    v612 = vmlal_s16(vmull_s16(*(int16x4_t *)v585.i8, *(int16x4_t *)v609.i8), *(int16x4_t *)v590.i8, *(int16x4_t *)v607.i8);
    v613 = vmlal_high_s16(vmull_high_s16(v585, v609), v590, v607);
    v614 = vmlsl_s16(v610, *(int16x4_t *)v585.i8, *(int16x4_t *)v607.i8);
    v615 = vmlsl_high_s16(v611, v585, v607);
    v616 = vdupq_n_s16(0x1294u);
    v617 = vdupq_n_s16(0x3D3Fu);
    v618 = vmull_s16(*(int16x4_t *)v586.i8, *(int16x4_t *)v617.i8);
    v619 = vmull_high_s16(v586, v617);
    v620 = vmlal_s16(vmull_s16(*(int16x4_t *)v589.i8, *(int16x4_t *)v617.i8), *(int16x4_t *)v586.i8, *(int16x4_t *)v616.i8);
    v621 = vmlal_high_s16(vmull_high_s16(v589, v617), v586, v616);
    v622 = vmlsl_s16(v618, *(int16x4_t *)v589.i8, *(int16x4_t *)v616.i8);
    v623 = vmlsl_high_s16(v619, v589, v616);
    v624 = vaddq_s32(v613, v597);
    *(int16x4_t *)v616.i8 = vrshrn_n_s32(vaddq_s32(v612, v596), 0xEuLL);
    *(int16x4_t *)v589.i8 = vrshrn_n_s32(v624, 0xEuLL);
    *(int16x4_t *)v541.i8 = vrshrn_n_s32(vaddq_s32(v620, v604), 0xEuLL);
    v625 = vsub_s16(*(int16x4_t *)v616.i8, *(int16x4_t *)v541.i8);
    v626 = vrshrn_high_n_s32(*(int16x4_t *)v616.i8, v624, 0xEuLL);
    v627 = vaddq_s32(v615, v599);
    *(int16x4_t *)v624.i8 = vrshrn_n_s32(vaddq_s32(v614, v598), 0xEuLL);
    v628 = vrshrn_n_s32(v627, 0xEuLL);
    v629 = vrshrn_n_s32(vaddq_s32(v622, v606), 0xEuLL);
    v630 = vsub_s16(*(int16x4_t *)v624.i8, v629);
    v631 = vrshrn_high_n_s32(*(int16x4_t *)v624.i8, v627, 0xEuLL);
    v632 = vaddq_s32(v621, v605);
    v633 = vrshrn_n_s32(v632, 0xEuLL);
    v634 = vrshrn_high_n_s32(*(int16x4_t *)v541.i8, v632, 0xEuLL);
    v635 = vaddq_s32(v623, v608);
    *(int16x4_t *)v596.i8 = vrshrn_n_s32(vsubq_s32(v596, v612), 0xEuLL);
    *(int16x4_t *)v597.i8 = vrshrn_n_s32(vsubq_s32(v597, v613), 0xEuLL);
    *(int16x4_t *)v598.i8 = vrshrn_n_s32(vsubq_s32(v598, v614), 0xEuLL);
    *(int16x4_t *)v599.i8 = vrshrn_n_s32(vsubq_s32(v599, v615), 0xEuLL);
    *(int16x4_t *)v604.i8 = vrshrn_n_s32(vsubq_s32(v604, v620), 0xEuLL);
    *(int16x4_t *)v605.i8 = vrshrn_n_s32(vsubq_s32(v605, v621), 0xEuLL);
    *(int16x4_t *)v606.i8 = vrshrn_n_s32(vsubq_s32(v606, v622), 0xEuLL);
    *(int16x4_t *)v608.i8 = vrshrn_n_s32(vsubq_s32(v608, v623), 0xEuLL);
    v636 = vmull_s16(*(int16x4_t *)v596.i8, *(int16x4_t *)v538.i8);
    v637 = vmlal_s16(vmull_s16(*(int16x4_t *)v598.i8, *(int16x4_t *)v538.i8), *(int16x4_t *)v596.i8, *(int16x4_t *)v539.i8);
    v638 = vmlal_s16(vmull_s16(*(int16x4_t *)v599.i8, *(int16x4_t *)v538.i8), *(int16x4_t *)v597.i8, *(int16x4_t *)v539.i8);
    v639 = vmlsl_s16(v636, *(int16x4_t *)v598.i8, *(int16x4_t *)v539.i8);
    v640 = vmlsl_s16(vmull_s16(*(int16x4_t *)v597.i8, *(int16x4_t *)v538.i8), *(int16x4_t *)v599.i8, *(int16x4_t *)v539.i8);
    v641 = vmull_s16(*(int16x4_t *)v606.i8, *(int16x4_t *)v539.i8);
    v642 = vmlal_s16(vmull_s16(*(int16x4_t *)v604.i8, *(int16x4_t *)v539.i8), *(int16x4_t *)v606.i8, *(int16x4_t *)v538.i8);
    v643 = vmlal_s16(vmull_s16(*(int16x4_t *)v605.i8, *(int16x4_t *)v539.i8), *(int16x4_t *)v608.i8, *(int16x4_t *)v538.i8);
    v644 = vmlsl_s16(v641, *(int16x4_t *)v604.i8, *(int16x4_t *)v538.i8);
    v645 = vmlsl_s16(vmull_s16(*(int16x4_t *)v608.i8, *(int16x4_t *)v539.i8), *(int16x4_t *)v605.i8, *(int16x4_t *)v538.i8);
    v160 = vaddq_s16(v634, v626);
    v646 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v644, v637), 0xEuLL), vaddq_s32(v645, v638), 0xEuLL);
    v166 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v642, v639), 0xEuLL), vaddq_s32(v643, v640), 0xEuLL);
    *(int16x4_t *)v644.i8 = vrshrn_n_s32(vsubq_s32(v637, v644), 0xEuLL);
    *(int16x4_t *)v645.i8 = vrshrn_n_s32(vsubq_s32(v638, v645), 0xEuLL);
    v647 = vsubq_s32(v639, v642);
    v648 = vsubq_s32(v640, v643);
    *(int16x4_t *)v643.i8 = vrshrn_n_s32(v647, 0xEuLL);
    *(int16x4_t *)v648.i8 = vrshrn_n_s32(v648, 0xEuLL);
    *(int16x4_t *)v604.i8 = vsub_s16(*(int16x4_t *)v589.i8, v633);
    *(int16x4_t *)v637.i8 = vsub_s16(v628, vrshrn_n_s32(v635, 0xEuLL));
    v649 = vmlsl_s16(vmull_s16(*(int16x4_t *)v604.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v637.i8, *(int16x4_t *)v537.i8);
    v650 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v630, *(int16x4_t *)v537.i8), v625, *(int16x4_t *)v537.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v637.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v604.i8, *(int16x4_t *)v537.i8), 0xEuLL);
    v164 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v625, *(int16x4_t *)v537.i8), v630, *(int16x4_t *)v537.i8), 0xEuLL), v649, 0xEuLL);
    v651 = vmlsl_s16(vmull_s16(*(int16x4_t *)v644.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v643.i8, *(int16x4_t *)v537.i8);
    v162 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v643.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v644.i8, *(int16x4_t *)v537.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v648.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v645.i8, *(int16x4_t *)v537.i8), 0xEuLL);
    v652 = vrshrn_high_n_s32(vrshrn_n_s32(v651, 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v645.i8, *(int16x4_t *)v537.i8), *(int16x4_t *)v648.i8, *(int16x4_t *)v537.i8), 0xEuLL);
    v161 = vnegq_s16(v646);
    v163 = vnegq_s16(v650);
    v165 = vnegq_s16(v652);
    v167 = vnegq_s16(vaddq_s16(v631, vrshrn_high_n_s32(v629, v635, 0xEuLL)));
  }
  else
  {
    v40 = (int64x2_t)vtrn2q_s32(v30, v32);
    if (a4)
    {
      v1087 = (int64x2_t)vtrn1q_s32(v33, v35);
      v1088 = (int64x2_t)vtrn2q_s32(v33, v35);
      v1089 = (int64x2_t)vtrn1q_s32(v34, v36);
      v1090 = (int64x2_t)vtrn2q_s32(v34, v36);
      v1091 = (int16x8_t)vzip1q_s64(v37, v1087);
      v1092 = (int16x8_t)vzip2q_s64(v37, v1087);
      v1093 = (int16x8_t)vzip1q_s64(v39, v1089);
      v1094 = (int16x8_t)vzip2q_s64(v39, v1089);
      v1095 = (int16x8_t)vzip1q_s64(v38, v1088);
      v1096 = (int16x8_t)vzip2q_s64(v38, v1088);
      v1097 = (int16x8_t)vzip1q_s64(v40, v1090);
      v1098 = (int16x8_t)vzip2q_s64(v40, v1090);
      v1099 = vdupq_n_s16(0x3FB1u);
      v1100 = vdupq_n_s16(0x646u);
      v1101 = vmlal_s16(vmull_s16(*(int16x4_t *)v1091.i8, *(int16x4_t *)v1100.i8), *(int16x4_t *)v1098.i8, *(int16x4_t *)v1099.i8);
      v1102 = vmlal_high_s16(vmull_high_s16(v1091, v1100), v1098, v1099);
      v1103 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1098.i8, *(int16x4_t *)v1100.i8), *(int16x4_t *)v1091.i8, *(int16x4_t *)v1099.i8);
      v1104 = vmlsl_high_s16(vmull_high_s16(v1098, v1100), v1091, v1099);
      v1105 = vdupq_n_s16(0x3871u);
      v1106 = vdupq_n_s16(0x1E2Bu);
      v1107 = vmull_high_s16(v1094, v1106);
      v1108 = vmlal_s16(vmull_s16(*(int16x4_t *)v1095.i8, *(int16x4_t *)v1106.i8), *(int16x4_t *)v1094.i8, *(int16x4_t *)v1105.i8);
      v1109 = vmlal_high_s16(vmull_high_s16(v1095, v1106), v1094, v1105);
      v1110 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1094.i8, *(int16x4_t *)v1106.i8), *(int16x4_t *)v1095.i8, *(int16x4_t *)v1105.i8);
      v1111 = vdupq_n_s16(0x289Au);
      v1112 = vdupq_n_s16(0x3179u);
      v1113 = vmlsl_high_s16(v1107, v1095, v1105);
      v1114 = vmlal_s16(vmull_s16(*(int16x4_t *)v1092.i8, *(int16x4_t *)v1112.i8), *(int16x4_t *)v1097.i8, *(int16x4_t *)v1111.i8);
      v1115 = vmlal_high_s16(vmull_high_s16(v1092, v1112), v1097, v1111);
      v1116 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1097.i8, *(int16x4_t *)v1112.i8), *(int16x4_t *)v1092.i8, *(int16x4_t *)v1111.i8);
      v1117 = vmlsl_high_s16(vmull_high_s16(v1097, v1112), v1092, v1111);
      v1118 = vdupq_n_s16(0x1294u);
      v1119 = vdupq_n_s16(0x3D3Fu);
      v1120 = vmlal_s16(vmull_s16(*(int16x4_t *)v1096.i8, *(int16x4_t *)v1119.i8), *(int16x4_t *)v1093.i8, *(int16x4_t *)v1118.i8);
      v1121 = vmlal_high_s16(vmull_high_s16(v1096, v1119), v1093, v1118);
      v1122 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1093.i8, *(int16x4_t *)v1119.i8), *(int16x4_t *)v1096.i8, *(int16x4_t *)v1118.i8);
      v1123 = vmlsl_high_s16(vmull_high_s16(v1093, v1119), v1096, v1118);
      v1124 = vaddq_s32(v1115, v1102);
      *(int16x4_t *)v1093.i8 = vrshrn_n_s32(vaddq_s32(v1114, v1101), 0xEuLL);
      v1125 = vrshrn_n_s32(vaddq_s32(v1120, v1108), 0xEuLL);
      v1126 = vsub_s16(*(int16x4_t *)v1093.i8, v1125);
      v1127 = vsubq_s32(v1101, v1114);
      v1128 = vaddq_s32(v1117, v1104);
      v1129 = vrshrn_n_s32(vaddq_s32(v1116, v1103), 0xEuLL);
      v1130 = vsubq_s32(v1102, v1115);
      *(int16x4_t *)v1115.i8 = vrshrn_n_s32(vaddq_s32(v1122, v1110), 0xEuLL);
      v1131 = vsubq_s32(v1103, v1116);
      *(int16x4_t *)v1116.i8 = vsub_s16(v1129, *(int16x4_t *)v1115.i8);
      v1132 = vsubq_s32(v1104, v1117);
      v1133 = vaddq_s32(v1121, v1109);
      v1134 = vsubq_s32(v1108, v1120);
      v1135 = vaddq_s32(v1123, v1113);
      v1136 = vrshrn_n_s32(v1127, 0xEuLL);
      *(int16x4_t *)v1130.i8 = vrshrn_n_s32(v1130, 0xEuLL);
      v1137 = vrshrn_n_s32(v1131, 0xEuLL);
      *(int16x4_t *)v1132.i8 = vrshrn_n_s32(v1132, 0xEuLL);
      v1138 = vsubq_s32(v1109, v1121);
      *(int16x4_t *)v1109.i8 = vrshrn_n_s32(v1134, 0xEuLL);
      *(int16x4_t *)v1134.i8 = vrshrn_n_s32(v1138, 0xEuLL);
      v1139 = vsubq_s32(v1110, v1122);
      v1140 = vsubq_s32(v1113, v1123);
      *(int16x4_t *)v1113.i8 = vrshrn_n_s32(v1139, 0xEuLL);
      *(int16x4_t *)v1127.i8 = vdup_n_s16(0x3B21u);
      *(int16x4_t *)v1139.i8 = vdup_n_s16(0x187Eu);
      *(int16x4_t *)v1140.i8 = vrshrn_n_s32(v1140, 0xEuLL);
      v1141 = vmlal_s16(vmull_s16(v1137, *(int16x4_t *)v1139.i8), v1136, *(int16x4_t *)v1127.i8);
      v1142 = vmlsl_s16(vmull_s16(v1136, *(int16x4_t *)v1139.i8), v1137, *(int16x4_t *)v1127.i8);
      v1143 = vmlal_s16(vmull_s16(*(int16x4_t *)v1132.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1130.i8, *(int16x4_t *)v1127.i8);
      v1144 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1130.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1132.i8, *(int16x4_t *)v1127.i8);
      v1145 = vmlal_s16(vmull_s16(*(int16x4_t *)v1109.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1113.i8, *(int16x4_t *)v1139.i8);
      v1146 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1113.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1109.i8, *(int16x4_t *)v1139.i8);
      v1147 = vmlal_s16(vmull_s16(*(int16x4_t *)v1134.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1140.i8, *(int16x4_t *)v1139.i8);
      v1148 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1140.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1134.i8, *(int16x4_t *)v1139.i8);
      v1149 = vaddq_s16(vrshrn_high_n_s32(v1125, v1133, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v1093.i8, v1124, 0xEuLL));
      v1150 = vaddq_s16(vrshrn_high_n_s32(v1129, v1128, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v1115.i8, v1135, 0xEuLL));
      v1151 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v1146, v1141), 0xEuLL), vaddq_s32(v1148, v1143), 0xEuLL);
      v1152 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v1145, v1142), 0xEuLL), vaddq_s32(v1147, v1144), 0xEuLL);
      *(int16x4_t *)v1146.i8 = vrshrn_n_s32(vsubq_s32(v1141, v1146), 0xEuLL);
      *(int16x4_t *)v1148.i8 = vrshrn_n_s32(vsubq_s32(v1143, v1148), 0xEuLL);
      v1153 = vsubq_s32(v1144, v1147);
      *(int16x4_t *)v1147.i8 = vrshrn_n_s32(vsubq_s32(v1142, v1145), 0xEuLL);
      *(int16x4_t *)v1153.i8 = vrshrn_n_s32(v1153, 0xEuLL);
      *(int16x4_t *)v1145.i8 = vdup_n_s16(0x2D41u);
      *(int16x4_t *)v1133.i8 = vsub_s16(vrshrn_n_s32(v1124, 0xEuLL), vrshrn_n_s32(v1133, 0xEuLL));
      *(int16x4_t *)v1128.i8 = vsub_s16(vrshrn_n_s32(v1128, 0xEuLL), vrshrn_n_s32(v1135, 0xEuLL));
      v1154 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1133.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1128.i8, *(int16x4_t *)v1145.i8);
      v1155 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v1116.i8, *(int16x4_t *)v1145.i8), v1126, *(int16x4_t *)v1145.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v1128.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1133.i8, *(int16x4_t *)v1145.i8), 0xEuLL);
      v1156 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v1126, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1116.i8, *(int16x4_t *)v1145.i8), 0xEuLL), v1154, 0xEuLL);
      v1157 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1148.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1153.i8, *(int16x4_t *)v1145.i8);
      v1158 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v1147.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1146.i8, *(int16x4_t *)v1145.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v1153.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1148.i8, *(int16x4_t *)v1145.i8), 0xEuLL);
      v1159 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v1146.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1147.i8, *(int16x4_t *)v1145.i8), 0xEuLL), v1157, 0xEuLL);
      v1160 = vnegq_s16(v1151);
      v1161 = vnegq_s16(v1155);
      v1162 = vnegq_s16(v1159);
      v1163 = vnegq_s16(v1150);
      v1164 = (int32x4_t)vtrn1q_s16(v1149, v1160);
      v1165 = (int32x4_t)vtrn2q_s16(v1149, v1160);
      v1166 = (int32x4_t)vtrn1q_s16(v1158, v1161);
      v1167 = (int32x4_t)vtrn2q_s16(v1158, v1161);
      v1168 = (int32x4_t)vtrn1q_s16(v1156, v1162);
      v1169 = (int32x4_t)vtrn2q_s16(v1156, v1162);
      v1170 = (int32x4_t)vtrn1q_s16(v1152, v1163);
      v1171 = (int32x4_t)vtrn2q_s16(v1152, v1163);
      v1172 = (int64x2_t)vtrn1q_s32(v1164, v1166);
      v1173 = (int64x2_t)vtrn2q_s32(v1164, v1166);
      v1174 = (int64x2_t)vtrn1q_s32(v1165, v1167);
      v1175 = (int64x2_t)vtrn2q_s32(v1165, v1167);
      v1176 = (int64x2_t)vtrn1q_s32(v1168, v1170);
      v1177 = (int64x2_t)vtrn2q_s32(v1168, v1170);
      v1178 = (int64x2_t)vtrn1q_s32(v1169, v1171);
      v1179 = (int64x2_t)vtrn2q_s32(v1169, v1171);
      v1180 = (int16x8_t)vzip1q_s64(v1172, v1176);
      v1181 = (int16x8_t)vzip2q_s64(v1172, v1176);
      v1182 = (int16x8_t)vzip1q_s64(v1174, v1178);
      v1183 = (int16x8_t)vzip2q_s64(v1174, v1178);
      v1184 = (int16x8_t)vzip1q_s64(v1173, v1177);
      v1185 = (int16x8_t)vzip2q_s64(v1173, v1177);
      v1186 = (int16x8_t)vzip1q_s64(v1175, v1179);
      v1187 = (int16x8_t)vzip2q_s64(v1175, v1179);
      v1188 = vmlal_s16(vmull_s16(*(int16x4_t *)v1180.i8, *(int16x4_t *)v1100.i8), *(int16x4_t *)v1187.i8, *(int16x4_t *)v1099.i8);
      v1189 = vmlal_high_s16(vmull_high_s16(v1180, v1100), v1187, v1099);
      v1190 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1187.i8, *(int16x4_t *)v1100.i8), *(int16x4_t *)v1180.i8, *(int16x4_t *)v1099.i8);
      v1191 = vmlsl_high_s16(vmull_high_s16(v1187, v1100), v1180, v1099);
      v1192 = vmlal_s16(vmull_s16(*(int16x4_t *)v1184.i8, *(int16x4_t *)v1106.i8), *(int16x4_t *)v1183.i8, *(int16x4_t *)v1105.i8);
      v1193 = vmlal_high_s16(vmull_high_s16(v1184, v1106), v1183, v1105);
      v1194 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1183.i8, *(int16x4_t *)v1106.i8), *(int16x4_t *)v1184.i8, *(int16x4_t *)v1105.i8);
      v1195 = vmlsl_high_s16(vmull_high_s16(v1183, v1106), v1184, v1105);
      v1196 = vmull_s16(*(int16x4_t *)v1186.i8, *(int16x4_t *)v1112.i8);
      v1197 = vmull_high_s16(v1186, v1112);
      v1198 = vmlal_s16(vmull_s16(*(int16x4_t *)v1181.i8, *(int16x4_t *)v1112.i8), *(int16x4_t *)v1186.i8, *(int16x4_t *)v1111.i8);
      v1199 = vmlal_high_s16(vmull_high_s16(v1181, v1112), v1186, v1111);
      v1200 = vmlsl_s16(v1196, *(int16x4_t *)v1181.i8, *(int16x4_t *)v1111.i8);
      v1201 = vmlsl_high_s16(v1197, v1181, v1111);
      v1202 = vmlal_s16(vmull_s16(*(int16x4_t *)v1185.i8, *(int16x4_t *)v1119.i8), *(int16x4_t *)v1182.i8, *(int16x4_t *)v1118.i8);
      v1203 = vmlal_high_s16(vmull_high_s16(v1185, v1119), v1182, v1118);
      v1204 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1182.i8, *(int16x4_t *)v1119.i8), *(int16x4_t *)v1185.i8, *(int16x4_t *)v1118.i8);
      v1205 = vmlsl_high_s16(vmull_high_s16(v1182, v1119), v1185, v1118);
      v1206 = vaddq_s32(v1199, v1189);
      *(int16x4_t *)v1105.i8 = vrshrn_n_s32(vaddq_s32(v1198, v1188), 0xEuLL);
      v1207 = vaddq_s32(v1201, v1191);
      *(int16x4_t *)v1111.i8 = vrshrn_n_s32(vaddq_s32(v1200, v1190), 0xEuLL);
      v1208 = vsubq_s32(v1188, v1198);
      v1209 = vaddq_s32(v1203, v1193);
      *(int16x4_t *)v1118.i8 = vrshrn_n_s32(vaddq_s32(v1202, v1192), 0xEuLL);
      v1210 = vsubq_s32(v1189, v1199);
      v1211 = vsubq_s32(v1191, v1201);
      v1212 = vaddq_s32(v1205, v1195);
      *(int16x4_t *)v1119.i8 = vrshrn_n_s32(vaddq_s32(v1204, v1194), 0xEuLL);
      v1213 = vsubq_s32(v1192, v1202);
      *(int16x4_t *)v1208.i8 = vrshrn_n_s32(v1208, 0xEuLL);
      *(int16x4_t *)v1210.i8 = vrshrn_n_s32(v1210, 0xEuLL);
      *(int16x4_t *)v1201.i8 = vrshrn_n_s32(vsubq_s32(v1190, v1200), 0xEuLL);
      *(int16x4_t *)v1202.i8 = vrshrn_n_s32(v1211, 0xEuLL);
      v1214 = vsubq_s32(v1193, v1203);
      *(int16x4_t *)v1193.i8 = vrshrn_n_s32(v1213, 0xEuLL);
      *(int16x4_t *)v1203.i8 = vrshrn_n_s32(v1214, 0xEuLL);
      *(int16x4_t *)v1204.i8 = vrshrn_n_s32(vsubq_s32(v1194, v1204), 0xEuLL);
      *(int16x4_t *)v1205.i8 = vrshrn_n_s32(vsubq_s32(v1195, v1205), 0xEuLL);
      v1215 = vmlal_s16(vmull_s16(*(int16x4_t *)v1201.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1208.i8, *(int16x4_t *)v1127.i8);
      v1216 = vmlal_s16(vmull_s16(*(int16x4_t *)v1202.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1210.i8, *(int16x4_t *)v1127.i8);
      v1217 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1208.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1201.i8, *(int16x4_t *)v1127.i8);
      v1218 = vmlsl_s16(vmull_s16(*(int16x4_t *)v1210.i8, *(int16x4_t *)v1139.i8), *(int16x4_t *)v1202.i8, *(int16x4_t *)v1127.i8);
      v1219 = vmull_s16(*(int16x4_t *)v1204.i8, *(int16x4_t *)v1127.i8);
      v1220 = vmull_s16(*(int16x4_t *)v1205.i8, *(int16x4_t *)v1127.i8);
      v1221 = vmlal_s16(vmull_s16(*(int16x4_t *)v1193.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1204.i8, *(int16x4_t *)v1139.i8);
      v1222 = vmlal_s16(vmull_s16(*(int16x4_t *)v1203.i8, *(int16x4_t *)v1127.i8), *(int16x4_t *)v1205.i8, *(int16x4_t *)v1139.i8);
      v1223 = vmlsl_s16(v1219, *(int16x4_t *)v1193.i8, *(int16x4_t *)v1139.i8);
      v1224 = vmlsl_s16(v1220, *(int16x4_t *)v1203.i8, *(int16x4_t *)v1139.i8);
      *(int16x4_t *)v1139.i8 = vrshrn_n_s32(vsubq_s32(v1215, v1223), 0xEuLL);
      *(int16x4_t *)v1193.i8 = vrshrn_n_s32(vsubq_s32(v1216, v1224), 0xEuLL);
      *(int16x4_t *)v1204.i8 = vrshrn_n_s32(vsubq_s32(v1217, v1221), 0xEuLL);
      *(int16x4_t *)v1201.i8 = vrshrn_n_s32(vsubq_s32(v1218, v1222), 0xEuLL);
      *(int16x4_t *)v1205.i8 = vsub_s16(*(int16x4_t *)v1105.i8, *(int16x4_t *)v1118.i8);
      *(int16x4_t *)v1187.i8 = vsub_s16(vrshrn_n_s32(v1206, 0xEuLL), vrshrn_n_s32(v1209, 0xEuLL));
      *(int16x4_t *)v1182.i8 = vsub_s16(*(int16x4_t *)v1111.i8, *(int16x4_t *)v1119.i8);
      *(int16x4_t *)v1185.i8 = vsub_s16(vrshrn_n_s32(v1207, 0xEuLL), vrshrn_n_s32(v1212, 0xEuLL));
      v160 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v1118.i8, v1209, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v1105.i8, v1206, 0xEuLL));
      v1225 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v1111.i8, v1207, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v1119.i8, v1212, 0xEuLL));
      v166 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v1221, v1217), 0xEuLL), vaddq_s32(v1222, v1218), 0xEuLL);
      v164 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v1205.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1182.i8, *(int16x4_t *)v1145.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v1187.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1185.i8, *(int16x4_t *)v1145.i8), 0xEuLL);
      v162 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v1204.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1139.i8, *(int16x4_t *)v1145.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v1201.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1193.i8, *(int16x4_t *)v1145.i8), 0xEuLL);
      v161 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v1223, v1215), 0xEuLL), vaddq_s32(v1224, v1216), 0xEuLL));
      v163 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v1182.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1205.i8, *(int16x4_t *)v1145.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v1185.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1187.i8, *(int16x4_t *)v1145.i8), 0xEuLL));
      v165 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v1139.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1204.i8, *(int16x4_t *)v1145.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v1193.i8, *(int16x4_t *)v1145.i8), *(int16x4_t *)v1201.i8, *(int16x4_t *)v1145.i8), 0xEuLL));
      v167 = vnegq_s16(v1225);
    }
    else
    {
      v41 = (int64x2_t)vtrn1q_s32(v33, v35);
      v42 = (int64x2_t)vtrn2q_s32(v33, v35);
      v43 = (int64x2_t)vtrn1q_s32(v34, v36);
      v44 = (int64x2_t)vtrn2q_s32(v34, v36);
      v45 = (int16x8_t)vzip1q_s64(v37, v41);
      v46 = (int16x8_t)vzip2q_s64(v37, v41);
      v47 = (int16x8_t)vzip1q_s64(v39, v43);
      v48 = (int16x8_t)vzip2q_s64(v39, v43);
      v49 = (int16x8_t)vzip1q_s64(v38, v42);
      v50 = (int16x8_t)vzip2q_s64(v38, v42);
      v51 = (int16x8_t)vzip1q_s64(v40, v44);
      v52 = (int16x8_t)vzip2q_s64(v40, v44);
      v53 = vdupq_n_s16(0xC7Cu);
      v54 = vdupq_n_s16(0xDC72u);
      v55 = vdupq_n_s16(0x3537u);
      v56 = vdupq_n_s16(0x3EC5u);
      v57 = vmlsl_high_s16(vmull_high_s16(v47, v53), v52, v56);
      v58 = vmlal_s16(vmull_s16(*(int16x4_t *)v48.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v51.i8, *(int16x4_t *)v54.i8);
      v59 = vmlal_high_s16(vmull_high_s16(v48, v55), v51, v54);
      v60 = vmlsl_s16(vmull_s16(*(int16x4_t *)v51.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v48.i8, *(int16x4_t *)v54.i8);
      v61 = vmlsl_high_s16(vmull_high_s16(v51, v55), v48, v54);
      v62 = vmlal_s16(vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v56.i8);
      v63 = vmlal_high_s16(vmull_high_s16(v52, v53), v47, v56);
      *(int16x4_t *)v52.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v52.i8, *(int16x4_t *)v56.i8), 0xEuLL);
      *(int16x4_t *)v47.i8 = vrshrn_n_s32(v57, 0xEuLL);
      v64 = vrshrn_n_s32(v58, 0xEuLL);
      *(int16x4_t *)v58.i8 = vsub_s16(*(int16x4_t *)v52.i8, v64);
      v65 = vrshrn_high_n_s32(*(int16x4_t *)v52.i8, v57, 0xEuLL);
      v66 = vrshrn_n_s32(v59, 0xEuLL);
      v67 = vrshrn_high_n_s32(v64, v59, 0xEuLL);
      *(int16x4_t *)v57.i8 = vrshrn_n_s32(v60, 0xEuLL);
      *(int16x4_t *)v59.i8 = vrshrn_n_s32(v61, 0xEuLL);
      *(int16x4_t *)v60.i8 = vrshrn_n_s32(v62, 0xEuLL);
      *(int16x4_t *)v62.i8 = vsub_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v57.i8);
      v68 = vrshrn_high_n_s32(*(int16x4_t *)v57.i8, v61, 0xEuLL);
      v69 = vrshrn_n_s32(v63, 0xEuLL);
      v70 = vrshrn_high_n_s32(*(int16x4_t *)v60.i8, v63, 0xEuLL);
      v71 = vdupq_n_s16(0x2D41u);
      v72 = vdupq_n_s16(0x187Eu);
      v73 = vdupq_n_s16(0x3B21u);
      v74 = vmlal_s16(vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v71.i8);
      v75 = vmlal_high_s16(vmull_high_s16(v46, v71), v45, v71);
      v76 = vmlsl_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v46.i8, *(int16x4_t *)v71.i8);
      v77 = vmlsl_high_s16(vmull_high_s16(v45, v71), v46, v71);
      v78 = vmlsl_s16(vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v50.i8, *(int16x4_t *)v73.i8);
      v79 = vmlsl_high_s16(vmull_high_s16(v49, v72), v50, v73);
      v80 = vmlal_s16(vmull_s16(*(int16x4_t *)v50.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v73.i8);
      v81 = vmlal_high_s16(vmull_high_s16(v50, v72), v49, v73);
      v82 = vrshrn_high_n_s32(vrshrn_n_s32(v74, 0xEuLL), v75, 0xEuLL);
      v83 = vrshrn_high_n_s32(vrshrn_n_s32(v76, 0xEuLL), v77, 0xEuLL);
      v84 = vrshrn_high_n_s32(vrshrn_n_s32(v78, 0xEuLL), v79, 0xEuLL);
      v85 = vrshrn_high_n_s32(vrshrn_n_s32(v80, 0xEuLL), v81, 0xEuLL);
      v86 = vaddq_s16(v67, v65);
      v87 = vaddq_s16(v70, v68);
      v88 = vaddq_s16(v85, v82);
      v89 = vaddq_s16(v84, v83);
      v90 = vsubq_s16(v83, v84);
      v91 = vsubq_s16(v82, v85);
      *(int16x4_t *)v59.i8 = vsub_s16(v69, *(int16x4_t *)v59.i8);
      *(int16x4_t *)v47.i8 = vsub_s16(*(int16x4_t *)v47.i8, v66);
      v92 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v71.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v59.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v71.i8), 0xEuLL);
      v93 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v71.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v59.i8, *(int16x4_t *)v71.i8), 0xEuLL);
      v94 = vaddq_s16(v88, v87);
      v95 = vaddq_s16(v93, v89);
      v96 = vaddq_s16(v92, v90);
      v97 = vaddq_s16(v91, v86);
      v98 = vsubq_s16(v91, v86);
      v99 = vsubq_s16(v90, v92);
      v100 = vsubq_s16(v89, v93);
      v101 = vsubq_s16(v88, v87);
      v102 = (int32x4_t)vtrn1q_s16(v94, v95);
      v103 = (int32x4_t)vtrn2q_s16(v94, v95);
      v104 = (int32x4_t)vtrn1q_s16(v96, v97);
      v105 = (int32x4_t)vtrn2q_s16(v96, v97);
      v106 = (int32x4_t)vtrn1q_s16(v98, v99);
      v107 = (int32x4_t)vtrn2q_s16(v98, v99);
      v108 = (int32x4_t)vtrn1q_s16(v100, v101);
      v109 = (int32x4_t)vtrn2q_s16(v100, v101);
      v110 = (int64x2_t)vtrn1q_s32(v102, v104);
      v111 = (int64x2_t)vtrn2q_s32(v102, v104);
      v112 = (int64x2_t)vtrn1q_s32(v103, v105);
      v113 = (int64x2_t)vtrn2q_s32(v103, v105);
      v114 = (int64x2_t)vtrn1q_s32(v106, v108);
      v115 = (int64x2_t)vtrn2q_s32(v106, v108);
      v116 = (int64x2_t)vtrn1q_s32(v107, v109);
      v117 = (int64x2_t)vtrn2q_s32(v107, v109);
      v118 = (int16x8_t)vzip1q_s64(v110, v114);
      v119 = (int16x8_t)vzip2q_s64(v110, v114);
      v120 = (int16x8_t)vzip1q_s64(v112, v116);
      v121 = (int16x8_t)vzip2q_s64(v112, v116);
      v122 = (int16x8_t)vzip1q_s64(v111, v115);
      v123 = (int16x8_t)vzip2q_s64(v111, v115);
      v124 = (int16x8_t)vzip1q_s64(v113, v117);
      v125 = (int16x8_t)vzip2q_s64(v113, v117);
      v126 = vmull_s16(*(int16x4_t *)v124.i8, *(int16x4_t *)v55.i8);
      v127 = vmull_high_s16(v124, v55);
      v128 = vmlsl_high_s16(vmull_high_s16(v120, v53), v125, v56);
      v129 = vmlal_s16(vmull_s16(*(int16x4_t *)v121.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v124.i8, *(int16x4_t *)v54.i8);
      v130 = vmlal_high_s16(vmull_high_s16(v121, v55), v124, v54);
      v131 = vmlsl_s16(v126, *(int16x4_t *)v121.i8, *(int16x4_t *)v54.i8);
      v132 = vmlsl_high_s16(v127, v121, v54);
      v133 = vmlal_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v120.i8, *(int16x4_t *)v56.i8);
      v134 = vmlal_high_s16(vmull_high_s16(v125, v53), v120, v56);
      *(int16x4_t *)v56.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v53.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v56.i8), 0xEuLL);
      *(int16x4_t *)v53.i8 = vrshrn_n_s32(v128, 0xEuLL);
      *(int16x4_t *)v124.i8 = vrshrn_n_s32(v129, 0xEuLL);
      *(int16x4_t *)v120.i8 = vsub_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v124.i8);
      v135 = vrshrn_high_n_s32(*(int16x4_t *)v56.i8, v128, 0xEuLL);
      *(int16x4_t *)v128.i8 = vrshrn_n_s32(v130, 0xEuLL);
      v136 = vrshrn_high_n_s32(*(int16x4_t *)v124.i8, v130, 0xEuLL);
      *(int16x4_t *)v130.i8 = vrshrn_n_s32(v131, 0xEuLL);
      *(int16x4_t *)v131.i8 = vrshrn_n_s32(v132, 0xEuLL);
      *(int16x4_t *)v133.i8 = vrshrn_n_s32(v133, 0xEuLL);
      *(int16x4_t *)v125.i8 = vsub_s16(*(int16x4_t *)v133.i8, *(int16x4_t *)v130.i8);
      v137 = vrshrn_high_n_s32(*(int16x4_t *)v130.i8, v132, 0xEuLL);
      *(int16x4_t *)v132.i8 = vrshrn_n_s32(v134, 0xEuLL);
      v138 = vrshrn_high_n_s32(*(int16x4_t *)v133.i8, v134, 0xEuLL);
      v139 = vmlal_s16(vmull_s16(*(int16x4_t *)v119.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v71.i8);
      v140 = vmlal_high_s16(vmull_high_s16(v119, v71), v118, v71);
      v141 = vmlsl_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v119.i8, *(int16x4_t *)v71.i8);
      v142 = vmlsl_high_s16(vmull_high_s16(v118, v71), v119, v71);
      v143 = vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v123.i8, *(int16x4_t *)v73.i8);
      v144 = vmlsl_high_s16(vmull_high_s16(v122, v72), v123, v73);
      v145 = vmlal_s16(vmull_s16(*(int16x4_t *)v123.i8, *(int16x4_t *)v72.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v73.i8);
      v146 = vmlal_high_s16(vmull_high_s16(v123, v72), v122, v73);
      v147 = vrshrn_high_n_s32(vrshrn_n_s32(v139, 0xEuLL), v140, 0xEuLL);
      v148 = vrshrn_high_n_s32(vrshrn_n_s32(v141, 0xEuLL), v142, 0xEuLL);
      v149 = vrshrn_high_n_s32(vrshrn_n_s32(v143, 0xEuLL), v144, 0xEuLL);
      v150 = vrshrn_high_n_s32(vrshrn_n_s32(v145, 0xEuLL), v146, 0xEuLL);
      v151 = vaddq_s16(v136, v135);
      v152 = vaddq_s16(v138, v137);
      v153 = vaddq_s16(v150, v147);
      v154 = vaddq_s16(v149, v148);
      v155 = vsubq_s16(v148, v149);
      v156 = vsubq_s16(v147, v150);
      *(int16x4_t *)v137.i8 = vsub_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v131.i8);
      *(int16x4_t *)v53.i8 = vsub_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v128.i8);
      v157 = vmlal_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v137.i8, *(int16x4_t *)v71.i8);
      v158 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v125.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v120.i8, *(int16x4_t *)v71.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v137.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v53.i8, *(int16x4_t *)v71.i8), 0xEuLL);
      v159 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v120.i8, *(int16x4_t *)v71.i8), *(int16x4_t *)v125.i8, *(int16x4_t *)v71.i8), 0xEuLL), v157, 0xEuLL);
      v160 = vaddq_s16(v153, v152);
      v161 = vaddq_s16(v159, v154);
      v162 = vaddq_s16(v158, v155);
      v163 = vaddq_s16(v156, v151);
      v164 = vsubq_s16(v156, v151);
      v165 = vsubq_s16(v155, v158);
      v166 = vsubq_s16(v154, v159);
      v167 = vsubq_s16(v153, v152);
    }
  }
  v1226 = vrshrq_n_s16(v160, 5uLL);
  v1227 = vrshrq_n_s16(v161, 5uLL);
  v1228 = vrshrq_n_s16(v162, 5uLL);
  v1229 = vrshrq_n_s16(v163, 5uLL);
  v1230 = vrshrq_n_s16(v164, 5uLL);
  v1231 = vrshrq_n_s16(v165, 5uLL);
  v1232 = vrshrq_n_s16(v166, 5uLL);
  v1233 = vrshrq_n_s16(v167, 5uLL);
LABEL_21:
  v1643 = vdupq_n_s16(~(-1 << a5));
  v1644 = 2 * a3;
  v1645 = (int16x8_t *)((char *)a2 + v1644 + v1644);
  v1646 = (int16x8_t *)((char *)v1645 + v1644 + v1644);
  v1647 = (int16x8_t *)((char *)v1646 + v1644 + v1644);
  v1648 = vqaddq_s16(v1233, *(int16x8_t *)((char *)v1647 + v1644));
  v1649 = vminq_s16(vqaddq_s16(v1228, *v1645), v1643);
  v1650 = vminq_s16(vqaddq_s16(v1229, *(int16x8_t *)((char *)v1645 + v1644)), v1643);
  v1651 = vminq_s16(vqaddq_s16(v1230, *v1646), v1643);
  v1652 = vminq_s16(vqaddq_s16(v1231, *(int16x8_t *)((char *)v1646 + v1644)), v1643);
  v1653 = vminq_s16(vqaddq_s16(v1232, *v1647), v1643);
  v1654 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v1227, *(int16x8_t *)((char *)a2 + v1644)), v1643), 0);
  *a2 = vqshluq_n_s16(vminq_s16(vqaddq_s16(v1226, *a2), v1643), 0);
  *(int16x8_t *)((char *)a2 + v1644) = v1654;
  *v1645 = vqshluq_n_s16(v1649, 0);
  *(int16x8_t *)((char *)v1645 + v1644) = vqshluq_n_s16(v1650, 0);
  *v1646 = vqshluq_n_s16(v1651, 0);
  *(int16x8_t *)((char *)v1646 + v1644) = vqshluq_n_s16(v1652, 0);
  result = vqshluq_n_s16(vminq_s16(v1648, v1643), 0);
  *v1647 = vqshluq_n_s16(v1653, 0);
  *(int16x8_t *)((char *)v1647 + v1644) = result;
  return result;
}

int8x8_t vp9_idct4x4_add(int16x8_t *a1, __int32 *a2, int a3, int a4)
{
  int8x8_t result;
  uint16x8_t v5;
  uint8x8_t v6;
  __int32 *v7;
  __int32 *v8;
  uint8x8_t v9;
  __int32 *v10;

  if (a4 >= 2)
    return vpx_idct4x4_16_add_neon(a1, a2, a3);
  v5 = (uint16x8_t)vdupq_n_s16((((46340 * ((46340 * a1->i16[0] + 0x8000) >> 16) + 0x8000) >> 16) + 8) >> 4);
  v6.i32[0] = *a2;
  v7 = (__int32 *)((char *)a2 + a3);
  v6.i32[1] = *v7;
  v8 = (__int32 *)((char *)v7 + a3);
  v9 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v5, v6));
  *a2 = v9.i32[0];
  *(__int32 *)((char *)a2 + a3) = v9.i32[1];
  v10 = (__int32 *)((char *)v8 + a3);
  v9.i32[0] = *v8;
  v9.i32[1] = *v10;
  result = vqmovun_s16((int16x8_t)vaddw_u8(v5, v9));
  *v8 = result.i32[0];
  *v10 = result.i32[1];
  return result;
}

int *vp9_iwht4x4_add(int *a1, unsigned __int8 *a2, int a3, int a4)
{
  if (a4 < 2)
    return vpx_iwht4x4_1_add_c(a1, a2, a3);
  else
    return (int *)vpx_iwht4x4_16_add_c(a1, a2, a3);
}

int8x8_t vp9_idct8x8_add(int32x4_t *a1, uint8x8_t *a2, int a3, int a4)
{
  signed int v4;
  unsigned int v5;
  uint8x8_t v6;
  uint8x8_t *v7;
  uint8x8_t *v8;
  uint8x8_t *v9;
  uint8x8_t *v10;
  uint8x8_t *v11;
  uint8x8_t *v12;
  int8x8_t result;
  uint8x8_t v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint8x8_t *v17;
  uint8x8_t *v18;
  uint8x8_t *v19;

  if (a4 == 1)
  {
    v4 = (46340 * ((46340 * a1->i16[0] + 0x8000) >> 16) + 0x8000) & 0xFFFF0000;
    v5 = (v4 >> 16) + 16;
    if (v4 < -1114111)
    {
      v14 = (uint8x8_t)vqmovun_s16(vdupq_n_s16(-(v5 >> 5)));
      *a2 = vqsub_u8(*a2, v14);
      v15 = (uint8x8_t *)((char *)a2 + a3);
      *v15 = vqsub_u8(*v15, v14);
      v16 = (uint8x8_t *)((char *)v15 + a3);
      *v16 = vqsub_u8(*v16, v14);
      v17 = (uint8x8_t *)((char *)v16 + a3);
      *v17 = vqsub_u8(*v17, v14);
      v18 = (uint8x8_t *)((char *)v17 + a3);
      *v18 = vqsub_u8(*v18, v14);
      v19 = (uint8x8_t *)((char *)v18 + a3);
      *v19 = vqsub_u8(*v19, v14);
      v12 = (uint8x8_t *)((char *)v19 + a3);
      *v12 = vqsub_u8(*v12, v14);
      result = (int8x8_t)vqsub_u8(*(uint8x8_t *)((char *)v12 + a3), v14);
    }
    else
    {
      v6 = (uint8x8_t)vqmovun_s16(vdupq_n_s16(v5 >> 5));
      *a2 = vqadd_u8(*a2, v6);
      v7 = (uint8x8_t *)((char *)a2 + a3);
      *v7 = vqadd_u8(*v7, v6);
      v8 = (uint8x8_t *)((char *)v7 + a3);
      *v8 = vqadd_u8(*v8, v6);
      v9 = (uint8x8_t *)((char *)v8 + a3);
      *v9 = vqadd_u8(*v9, v6);
      v10 = (uint8x8_t *)((char *)v9 + a3);
      *v10 = vqadd_u8(*v10, v6);
      v11 = (uint8x8_t *)((char *)v10 + a3);
      *v11 = vqadd_u8(*v11, v6);
      v12 = (uint8x8_t *)((char *)v11 + a3);
      *v12 = vqadd_u8(*v12, v6);
      result = (int8x8_t)vqadd_u8(*(uint8x8_t *)((char *)v12 + a3), v6);
    }
    *(int8x8_t *)((char *)v12 + a3) = result;
  }
  else if (a4 > 12)
  {
    return vpx_idct8x8_64_add_neon((int16x8_t *)a1, a2, a3);
  }
  else
  {
    return vpx_idct8x8_12_add_neon(a1, a2, a3);
  }
  return result;
}

void vp9_idct16x16_add(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v7;
  int16x8_t v8[15];
  int16x8_t v9[16];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a4 == 1)
  {
    vpx_idct16x16_1_add_neon(a1->i16, (uint8x16_t *)a2, a3);
  }
  else if (a4 > 10)
  {
    if (a4 > 0x26)
    {
      vpx_idct16x16_256_add_half1d(a1, &v7, (int16x8_t *)a2, a3, 0);
      vpx_idct16x16_256_add_half1d(a1 + 32, v8, (int16x8_t *)a2, a3, 0);
      vpx_idct16x16_256_add_half1d(&v7, 0, (int16x8_t *)a2, a3, 0);
      vpx_idct16x16_256_add_half1d(v9, 0, (int16x8_t *)(a2 + 8), a3, 0);
    }
    else
    {
      vpx_idct16x16_38_add_half1d(a1, &v7, (int16x8_t *)a2, a3, 0);
      vpx_idct16x16_38_add_half1d(&v7, 0, (int16x8_t *)a2, a3, 0);
      vpx_idct16x16_38_add_half1d(v9, 0, (int16x8_t *)(a2 + 8), a3, 0);
    }
  }
  else
  {
    vpx_idct16x16_10_add_neon((int32x4_t *)a1, a2, a3);
  }
}

void vp9_idct32x32_add(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int16x8_t v7;
  int16x8_t v8[7];
  int16x8_t v9[8];
  int16x8_t v10[8];
  int16x8_t v11[8];
  int16x8_t v12[16];
  int16x8_t v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a4 == 1)
  {
    vpx_idct32x32_1_add_neon(a1->i16, (uint8x16_t *)a2, a3);
  }
  else if (a4 > 34)
  {
    if (a4 > 0x87)
    {
      vpx_idct32_32_neon();
    }
    else
    {
      vpx_idct32_12_neon(a1, &v7);
      vpx_idct32_12_neon(a1 + 64, v8);
      vpx_idct32_16_neon(&v7, (int16x8_t *)a2, a3, 0);
      vpx_idct32_16_neon(v10, (int16x8_t *)(a2 + 8), a3, 0);
      vpx_idct32_16_neon(v12, (int16x8_t *)(a2 + 16), a3, 0);
      vpx_idct32_16_neon(v13, (int16x8_t *)(a2 + 24), a3, 0);
    }
  }
  else
  {
    vpx_idct32_6_neon(a1, &v7);
    vpx_idct32_8_neon(&v7, (int16x8_t *)a2, a3, 0);
    vpx_idct32_8_neon(v9, (int16x8_t *)(a2 + 8), a3, 0);
    vpx_idct32_8_neon(v10, (int16x8_t *)(a2 + 16), a3, 0);
    vpx_idct32_8_neon(v11, (int16x8_t *)(a2 + 24), a3, 0);
  }
}

void vp9_iht16x16_add(int a1, int16x8_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t (**v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  int16x8_t v11;
  int16x8_t v12[15];
  int16x8_t v13[16];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v8 = &vp9_iht16x16_256_add_neon_IHT_16[2 * a1];
    v9 = *v8;
    v10 = v8[1];
    ((void (*)(int16x8_t *, int16x8_t *, uint64_t, uint64_t, _QWORD))v10)(a2, &v11, a3, a4, 0);
    ((void (*)(int16x8_t *, int16x8_t *, uint64_t, uint64_t, _QWORD))v10)(&a2[32], v12, a3, a4, 0);
    ((void (*)(int16x8_t *, _QWORD, uint64_t, uint64_t, _QWORD))v9)(&v11, 0, a3, a4, 0);
    ((void (*)(int16x8_t *, _QWORD, uint64_t, uint64_t, _QWORD))v9)(v13, 0, a3 + 8, a4, 0);
  }
  else if (a5 == 1)
  {
    vpx_idct16x16_1_add_neon(a2->i16, (uint8x16_t *)a3, a4);
  }
  else if (a5 > 10)
  {
    if (a5 > 0x26)
    {
      vpx_idct16x16_256_add_half1d(a2, &v11, (int16x8_t *)a3, a4, 0);
      vpx_idct16x16_256_add_half1d(a2 + 32, v12, (int16x8_t *)a3, a4, 0);
      vpx_idct16x16_256_add_half1d(&v11, 0, (int16x8_t *)a3, a4, 0);
      vpx_idct16x16_256_add_half1d(v13, 0, (int16x8_t *)(a3 + 8), a4, 0);
    }
    else
    {
      vpx_idct16x16_38_add_half1d(a2, &v11, (int16x8_t *)a3, a4, 0);
      vpx_idct16x16_38_add_half1d(&v11, 0, (int16x8_t *)a3, a4, 0);
      vpx_idct16x16_38_add_half1d(v13, 0, (int16x8_t *)(a3 + 8), a4, 0);
    }
  }
  else
  {
    vpx_idct16x16_10_add_neon((int32x4_t *)a2, a3, a4);
  }
}

double vp9_highbd_idct4x4_add(int16x8_t *a1, uint64_t *a2, int a3, int a4, char a5)
{
  double result;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t *v11;
  int8x16_t v12;

  if (a4 < 2)
  {
    v6 = vdupq_n_s16(~(-1 << a5));
    v7 = vdupq_n_s16((((unint64_t)(11585
                                                      * (int)((unint64_t)(3036938240 * a1->i32[0] + 0x80000000) >> 32)
                                                      + 0x2000) >> 14)
                    + 8) >> 4);
    v8.i64[0] = *a2;
    v9 = 2 * a3;
    v8.i64[1] = *(uint64_t *)((char *)a2 + v9);
    v10 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v7, v8), v6), 0);
    *a2 = v10.i64[0];
    *(uint64_t *)((char *)a2 + v9) = vextq_s8(v10, v10, 8uLL).u64[0];
    v11 = (uint64_t *)((char *)a2 + v9 + v9);
    v10.i64[0] = *v11;
    v10.i64[1] = *(uint64_t *)((char *)v11 + v9);
    v12 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v7, (int16x8_t)v10), v6), 0);
    *v11 = v12.i64[0];
    *(_QWORD *)&result = vextq_s8(v12, v12, 8uLL).u64[0];
    *(double *)((char *)v11 + v9) = result;
  }
  else
  {
    *(_QWORD *)&result = vpx_highbd_idct4x4_16_add_neon(a1, a2, a3, a5).u64[0];
  }
  return result;
}

int *vp9_highbd_iwht4x4_add(int *a1, unsigned __int16 *a2, int a3, int a4, int a5)
{
  if (a4 < 2)
    return vpx_highbd_iwht4x4_1_add_c(a1, a2, a3, a5);
  else
    return (int *)vpx_highbd_iwht4x4_16_add_c(a1, a2, a3, a5);
}

double vp9_highbd_idct8x8_add(int16x8_t *a1, int16x8_t *a2, int a3, int a4, char a5)
{
  double result;

  if (a4 == 1)
  {
    vpx_highbd_idct8x8_1_add_neon(a1->i32, a2, a3, a5);
  }
  else if (a4 > 12)
  {
    *(_QWORD *)&result = vpx_highbd_idct8x8_64_add_neon(a1, a2, a3, a5).u64[0];
  }
  else
  {
    *(_QWORD *)&result = vpx_highbd_idct8x8_12_add_neon((int32x4_t *)a1, a2, a3, a5).u64[0];
  }
  return result;
}

void vp9_highbd_idct16x16_add(int16x8_t *a1, int16x8_t *a2, int a3, int a4, char a5)
{
  if (a4 == 1)
  {
    vpx_highbd_idct16x16_1_add_neon(a1->i32, a2, a3, a5);
  }
  else if (a4 > 10)
  {
    if (a4 > 0x26)
      vpx_highbd_idct16x16_256_add_neon(a1, a2, a3, a5);
    else
      vpx_highbd_idct16x16_38_add_neon(a1, a2, a3, a5);
  }
  else
  {
    vpx_highbd_idct16x16_10_add_neon((int32x4_t *)a1, a2, a3, a5);
  }
}

int16x8_t *vp9_highbd_idct32x32_add(int *a1, int16x8_t *a2, int a3, int a4, char a5)
{
  if (a4 == 1)
    return (int16x8_t *)vpx_highbd_idct32x32_1_add_neon(a1, a2, a3, a5);
  if (a4 <= 34)
    return vpx_highbd_idct32x32_34_add_neon((uint64_t)a1, a2, a3, a5);
  if (a4 > 0x87)
    return vpx_highbd_idct32x32_1024_add_neon((uint64_t)a1, (uint64_t)a2);
  return vpx_highbd_idct32x32_135_add_neon((uint64_t)a1, (uint64_t)a2);
}

void vp9_highbd_iht16x16_add(int a1, int16x8_t *a2, int16x8_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  int16x8_t *v9;
  uint64_t (**v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (**v13)();
  uint64_t (*v14)();
  uint64_t (*v15)();
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[65];

  v20[64] = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v9 = a2 + 32;
    if ((_DWORD)a6 == 8)
    {
      v10 = &vp9_highbd_iht16x16_256_add_neon_IHT_16[2 * a1];
      v11 = *v10;
      v12 = v10[1];
      ((void (*)(int16x8_t *, _BYTE *, int16x8_t *, uint64_t, uint64_t))v12)(a2, v16, a3, a4, 1);
      ((void (*)(int16x8_t *, uint64_t *, int16x8_t *, uint64_t, uint64_t))v12)(v9, &v17, a3, a4, 1);
      ((void (*)(_BYTE *, _QWORD, int16x8_t *, uint64_t, uint64_t))v11)(v16, 0, a3, a4, 1);
      ((void (*)(uint64_t *, _QWORD, int16x8_t *, uint64_t, uint64_t))v11)(&v19, 0, &a3[1], a4, 1);
    }
    else
    {
      v13 = &vp9_highbd_iht16x16_256_add_neon_IHT_16_1[2 * a1];
      v14 = *v13;
      v15 = v13[1];
      ((void (*)(int16x8_t *, _BYTE *, int16x8_t *, uint64_t, uint64_t))v15)(a2, v16, a3, a4, a6);
      ((void (*)(int16x8_t *, uint64_t *, int16x8_t *, uint64_t, uint64_t))v15)(v9, &v18, a3, a4, a6);
      ((void (*)(_BYTE *, _QWORD, int16x8_t *, uint64_t, uint64_t))v14)(v16, 0, a3, a4, a6);
      ((void (*)(_QWORD *, _QWORD, int16x8_t *, uint64_t, uint64_t))v14)(v20, 0, &a3[1], a4, a6);
    }
  }
  else if (a5 == 1)
  {
    vpx_highbd_idct16x16_1_add_neon(a2->i32, a3, a4, a6);
  }
  else if (a5 > 10)
  {
    if (a5 > 0x26)
      vpx_highbd_idct16x16_256_add_neon(a2, a3, a4, a6);
    else
      vpx_highbd_idct16x16_38_add_neon(a2, a3, a4, a6);
  }
  else
  {
    vpx_highbd_idct16x16_10_add_neon((int32x4_t *)a2, a3, a4, a6);
  }
}

uint64_t yuvconfig2image(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  uint64_t v12;

  v4 = *(_DWORD *)(a2 + 120);
  v3 = *(_DWORD *)(a2 + 124);
  if (v3)
  {
    if (v4)
      v5 = 258;
    else
      v5 = 263;
    if (v4)
      v6 = 2306;
    else
      v6 = 2311;
    v7 = 12;
    v8 = 16;
  }
  else
  {
    if (v4)
      v5 = 261;
    else
      v5 = 262;
    if (v4)
      v6 = 2309;
    else
      v6 = 2310;
    v7 = 16;
    v8 = 24;
  }
  if (!v4)
    v7 = v8;
  *(_DWORD *)result = v5;
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 132);
  *(_DWORD *)(result + 20) = 8;
  v9 = *(_DWORD *)(a2 + 16);
  v10 = (*(_DWORD *)(a2 + 4) + 327) & 0xFFFFFFF8;
  *(_DWORD *)(result + 12) = v9;
  *(_DWORD *)(result + 16) = v10;
  *(_QWORD *)&v11 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)&v11 + 1) = *(_QWORD *)(a2 + 140);
  *(_OWORD *)(result + 24) = v11;
  *(_DWORD *)(result + 40) = v4;
  *(_DWORD *)(result + 44) = v3;
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = v9;
  *(_DWORD *)(result + 84) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 92) = *(_DWORD *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 152) & 8) != 0)
  {
    *(_DWORD *)result = v6;
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 128);
    *(_QWORD *)(result + 48) = 2 * *(_QWORD *)(a2 + 56);
    *(_QWORD *)(result + 56) = 2 * *(_QWORD *)(a2 + 64);
    *(_QWORD *)(result + 64) = 2 * *(_QWORD *)(a2 + 72);
    *(_QWORD *)(result + 72) = 0;
    *(_DWORD *)(result + 80) = 2 * *(_DWORD *)(a2 + 16);
    *(_DWORD *)(result + 84) = 2 * *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + 88) = 2 * *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + 92) = 2 * *(_DWORD *)(a2 + 16);
  }
  *(_DWORD *)(result + 96) = v7;
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 104) = a3;
  *(_QWORD *)(result + 112) = v12;
  *(_QWORD *)(result + 120) = 0;
  return result;
}

uint64_t image2yuvconfig(int *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v2 = *((_QWORD *)a1 + 6);
  *(_QWORD *)(a2 + 56) = v2;
  v3 = *((_QWORD *)a1 + 7);
  *(_QWORD *)(a2 + 64) = v3;
  v4 = *((_QWORD *)a1 + 8);
  *(_QWORD *)(a2 + 72) = v4;
  v5 = a1[6];
  v6 = a1[7];
  *(_DWORD *)(a2 + 8) = v5;
  *(_DWORD *)(a2 + 12) = v6;
  *(_QWORD *)(a2 + 140) = *((_QWORD *)a1 + 4);
  *(_DWORD *)a2 = v5;
  *(_DWORD *)(a2 + 4) = v6;
  v7 = a1[10];
  if (v7 == 1 || *a1 == 265)
  {
    v8 = v5 + 2;
    if (v5 >= -1)
      v8 = v5 + 1;
    v5 = v8 >> 1;
  }
  *(_DWORD *)(a2 + 20) = v5;
  v9 = a1[11];
  if (v9 == 1)
  {
    if (v6 >= -1)
      v10 = v6 + 1;
    else
      v10 = v6 + 2;
    v6 = v10 >> 1;
  }
  *(_DWORD *)(a2 + 24) = v6;
  *(_DWORD *)(a2 + 28) = v5;
  *(_DWORD *)(a2 + 32) = v6;
  v11 = a1[20];
  *(_DWORD *)(a2 + 16) = v11;
  v12 = a1[21];
  *(_DWORD *)(a2 + 36) = v12;
  *(_QWORD *)(a2 + 132) = *(_QWORD *)(a1 + 1);
  v13 = *a1;
  if ((*a1 & 0x800) != 0)
  {
    *(_QWORD *)(a2 + 56) = v2 >> 1;
    *(_QWORD *)(a2 + 64) = v3 >> 1;
    *(_QWORD *)(a2 + 72) = v4 >> 1;
    v11 >>= 1;
    *(_DWORD *)(a2 + 16) = v11;
    *(_DWORD *)(a2 + 36) = v12 >> 1;
    v14 = 8;
  }
  else
  {
    v14 = 0;
  }
  *(_DWORD *)(a2 + 152) = v14;
  *(_DWORD *)(a2 + 104) = (v11 - a1[3]) >> 1;
  *(_DWORD *)(a2 + 120) = v7;
  *(_DWORD *)(a2 + 124) = v9;
  if (v13 == 265)
    *(_DWORD *)(a2 + 120) = 1;
  return 0;
}

int16x8_t *vpx_iadst16x16_256_add_half1d(int16x8_t *result, int16x8_t *a2, int16x8_t *a3, int a4, int a5)
{
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  uint64_t v162;
  int16x8_t *v163;
  int16x8_t *v164;
  int16x8_t *v165;
  int16x8_t *v166;
  int16x8_t *v167;
  int16x8_t *v168;
  int16x8_t *v169;
  int16x8_t *v170;
  int16x8_t *v171;
  int16x8_t *v172;
  int16x8_t *v173;
  int16x8_t *v174;
  int16x8_t *v175;
  uint8x8_t *v176;
  uint8x8_t *v177;
  uint8x8_t *v178;
  uint8x8_t *v179;
  uint8x8_t *v180;
  uint8x8_t *v181;
  uint8x8_t *v182;
  uint8x8_t *v183;
  uint8x8_t *v184;
  uint8x8_t *v185;
  uint8x8_t *v186;
  uint8x8_t *v187;
  uint8x8_t *v188;
  uint8x8_t *v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int16x4_t v202;
  int32x4_t v203;
  int16x4_t v204;
  int16x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int16x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int32x4_t v246;
  int32x4_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int16x8_t v250;
  int32x4_t v251;
  int32x4_t v252;

  if (a2)
  {
    v5 = vuzp1q_s16(*result, result[1]);
    v6 = vuzp1q_s16(result[2], result[3]);
    v7 = vuzp1q_s16(result[4], result[5]);
    v8 = vuzp1q_s16(result[6], result[7]);
    v9 = vuzp1q_s16(result[8], result[9]);
    v10 = vuzp1q_s16(result[10], result[11]);
    v11 = vuzp1q_s16(result[12], result[13]);
    v12 = vuzp1q_s16(result[14], result[15]);
    v13 = vuzp1q_s16(result[16], result[17]);
    v14 = vuzp1q_s16(result[18], result[19]);
    v15 = vuzp1q_s16(result[20], result[21]);
    v16 = vuzp1q_s16(result[22], result[23]);
    v17 = vuzp1q_s16(result[24], result[25]);
    v18 = vuzp1q_s16(result[26], result[27]);
    v19 = vuzp1q_s16(result[28], result[29]);
    v20 = vuzp1q_s16(result[30], result[31]);
  }
  else
  {
    v5 = *result;
    v6 = result[1];
    v7 = result[2];
    v8 = result[3];
    v9 = result[4];
    v10 = result[5];
    v11 = result[6];
    v12 = result[7];
    v13 = result[8];
    v14 = result[9];
    v15 = result[10];
    v16 = result[11];
    v17 = result[12];
    v18 = result[13];
    v19 = result[14];
    v20 = result[15];
  }
  v21 = (int32x4_t)vtrn1q_s16(v5, v7);
  v22 = (int32x4_t)vtrn2q_s16(v5, v7);
  v23 = (int32x4_t)vtrn1q_s16(v9, v11);
  v24 = (int32x4_t)vtrn2q_s16(v9, v11);
  v25 = (int32x4_t)vtrn1q_s16(v13, v15);
  v26 = (int32x4_t)vtrn2q_s16(v13, v15);
  v27 = (int32x4_t)vtrn1q_s16(v17, v19);
  v28 = (int32x4_t)vtrn2q_s16(v17, v19);
  v29 = (int64x2_t)vtrn1q_s32(v21, v23);
  v30 = (int64x2_t)vtrn2q_s32(v21, v23);
  v31 = (int64x2_t)vtrn1q_s32(v22, v24);
  v32 = (int64x2_t)vtrn2q_s32(v22, v24);
  v33 = (int64x2_t)vtrn1q_s32(v25, v27);
  v34 = (int64x2_t)vtrn2q_s32(v25, v27);
  v35 = (int64x2_t)vtrn1q_s32(v26, v28);
  v36 = (int64x2_t)vtrn2q_s32(v26, v28);
  v37 = (int16x8_t)vzip1q_s64(v29, v33);
  v38 = (int16x8_t)vzip2q_s64(v29, v33);
  v39 = (int16x8_t)vzip1q_s64(v31, v35);
  v40 = (int16x8_t)vzip2q_s64(v31, v35);
  v41 = (int16x8_t)vzip1q_s64(v30, v34);
  v42 = (int16x8_t)vzip2q_s64(v30, v34);
  v43 = (int16x8_t)vzip1q_s64(v32, v36);
  v44 = (int16x8_t)vzip2q_s64(v32, v36);
  v45 = (int32x4_t)vtrn1q_s16(v6, v8);
  v46 = (int32x4_t)vtrn2q_s16(v6, v8);
  v47 = (int32x4_t)vtrn1q_s16(v10, v12);
  v48 = (int32x4_t)vtrn2q_s16(v10, v12);
  v49 = (int32x4_t)vtrn1q_s16(v14, v16);
  v50 = (int32x4_t)vtrn2q_s16(v14, v16);
  v51 = (int32x4_t)vtrn1q_s16(v18, v20);
  v52 = (int32x4_t)vtrn2q_s16(v18, v20);
  v53 = (int64x2_t)vtrn1q_s32(v45, v47);
  v54 = (int64x2_t)vtrn2q_s32(v45, v47);
  v55 = (int64x2_t)vtrn1q_s32(v46, v48);
  v56 = (int64x2_t)vtrn2q_s32(v46, v48);
  v57 = (int64x2_t)vtrn1q_s32(v49, v51);
  v58 = (int64x2_t)vtrn2q_s32(v49, v51);
  v59 = (int64x2_t)vtrn1q_s32(v50, v52);
  v60 = (int64x2_t)vtrn2q_s32(v50, v52);
  v61 = (int16x8_t)vzip1q_s64(v53, v57);
  v62 = (int16x8_t)vzip2q_s64(v53, v57);
  v63 = (int16x8_t)vzip1q_s64(v55, v59);
  v64 = (int16x8_t)vzip2q_s64(v55, v59);
  v65 = (int16x8_t)vzip1q_s64(v54, v58);
  v66 = (int16x8_t)vzip2q_s64(v54, v58);
  v67 = (int16x8_t)vzip1q_s64(v56, v60);
  v68 = (int16x8_t)vzip2q_s64(v56, v60);
  v69 = vdupq_n_s16(0x3FECu);
  v70 = vdupq_n_s16(0x324u);
  v71 = vmull_s16(*(int16x4_t *)v68.i8, *(int16x4_t *)v70.i8);
  v72 = vmull_high_s16(v68, v70);
  v236 = vmlal_s16(vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v70.i8), *(int16x4_t *)v68.i8, *(int16x4_t *)v69.i8);
  v73 = vmlal_high_s16(vmull_high_s16(v37, v70), v68, v69);
  v232 = vmlsl_s16(v71, *(int16x4_t *)v37.i8, *(int16x4_t *)v69.i8);
  v74 = vmlsl_high_s16(v72, v37, v69);
  v75 = vdupq_n_s16(0x3E15u);
  v76 = vdupq_n_s16(0xF8Du);
  v77 = vmull_high_s16(v64, v76);
  v78 = vmlal_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v76.i8), *(int16x4_t *)v64.i8, *(int16x4_t *)v75.i8);
  v251 = vmlal_high_s16(vmull_high_s16(v41, v76), v64, v75);
  v239 = vmlsl_s16(vmull_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v76.i8), *(int16x4_t *)v41.i8, *(int16x4_t *)v75.i8);
  v79 = vdupq_n_s16(0x39DBu);
  v247 = vmlsl_high_s16(v77, v41, v75);
  v80 = vdupq_n_s16(0x1B5Du);
  v81 = vmlal_s16(vmull_s16(*(int16x4_t *)v38.i8, *(int16x4_t *)v80.i8), *(int16x4_t *)v67.i8, *(int16x4_t *)v79.i8);
  v82 = vmlal_high_s16(vmull_high_s16(v38, v80), v67, v79);
  v83 = vmlsl_s16(vmull_s16(*(int16x4_t *)v67.i8, *(int16x4_t *)v80.i8), *(int16x4_t *)v38.i8, *(int16x4_t *)v79.i8);
  v84 = vmlsl_high_s16(vmull_high_s16(v67, v80), v38, v79);
  v85 = vdupq_n_s16(0x3368u);
  v86 = vdupq_n_s16(0x2620u);
  v245 = vmlal_high_s16(vmull_high_s16(v42, v86), v63, v85);
  v246 = vmlal_s16(vmull_s16(*(int16x4_t *)v42.i8, *(int16x4_t *)v86.i8), *(int16x4_t *)v63.i8, *(int16x4_t *)v85.i8);
  v241 = vmlsl_high_s16(vmull_high_s16(v63, v86), v42, v85);
  v243 = vmlsl_s16(vmull_s16(*(int16x4_t *)v63.i8, *(int16x4_t *)v86.i8), *(int16x4_t *)v42.i8, *(int16x4_t *)v85.i8);
  v87 = vdupq_n_s16(0x2AFBu);
  v88 = vdupq_n_s16(0x2F6Cu);
  v89 = vmull_high_s16(v44, v88);
  v90 = vmlal_s16(vmull_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v88.i8), *(int16x4_t *)v44.i8, *(int16x4_t *)v87.i8);
  v91 = vmlal_high_s16(vmull_high_s16(v61, v88), v44, v87);
  v234 = vmlsl_s16(vmull_s16(*(int16x4_t *)v44.i8, *(int16x4_t *)v88.i8), *(int16x4_t *)v61.i8, *(int16x4_t *)v87.i8);
  v92 = vdupq_n_s16(0x20E7u);
  v93 = vmlsl_high_s16(v89, v61, v87);
  v94 = vdupq_n_s16(0x36E5u);
  v95 = vmlal_s16(vmull_s16(*(int16x4_t *)v65.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v40.i8, *(int16x4_t *)v92.i8);
  v96 = vmlal_high_s16(vmull_high_s16(v65, v94), v40, v92);
  v97 = vmlsl_s16(vmull_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v94.i8), *(int16x4_t *)v65.i8, *(int16x4_t *)v92.i8);
  v98 = vmlsl_high_s16(vmull_high_s16(v40, v94), v65, v92);
  v99 = vdupq_n_s16(0x1590u);
  v100 = vdupq_n_s16(0x3C42u);
  v231 = vmlal_s16(vmull_s16(*(int16x4_t *)v62.i8, *(int16x4_t *)v100.i8), *(int16x4_t *)v43.i8, *(int16x4_t *)v99.i8);
  v221 = vmlal_high_s16(vmull_high_s16(v62, v100), v43, v99);
  v226 = vmlsl_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v100.i8), *(int16x4_t *)v62.i8, *(int16x4_t *)v99.i8);
  v101 = vmlsl_high_s16(vmull_high_s16(v43, v100), v62, v99);
  v102 = vdupq_n_s16(0x964u);
  v103 = vdupq_n_s16(0x3F4Fu);
  v104 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v39.i8, *(int16x4_t *)v102.i8);
  v105 = vmlal_high_s16(vmull_high_s16(v66, v103), v39, v102);
  v106 = vmlsl_s16(vmull_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v102.i8);
  v107 = vmlsl_high_s16(vmull_high_s16(v39, v103), v66, v102);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(vsubq_s32(v236, v90), 0xEuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v232, v234), 0xEuLL);
  *(int16x4_t *)v103.i8 = vdup_n_s16(0x3EC5u);
  *(int16x4_t *)v99.i8 = vdup_n_s16(0xC7Cu);
  v219 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v103.i8);
  v222 = vmlsl_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(vsubq_s32(v73, v91), 0xEuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v74, v93), 0xEuLL);
  v229 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v103.i8);
  v224 = vmlsl_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8);
  *(int16x4_t *)v66.i8 = vrshrn_n_s32(vsubq_s32(v81, v231), 0xEuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v82, v221), 0xEuLL);
  v108 = v83;
  *(int16x4_t *)v100.i8 = vrshrn_n_s32(vsubq_s32(v83, v226), 0xEuLL);
  *(int16x4_t *)v92.i8 = vrshrn_n_s32(vsubq_s32(v84, v101), 0xEuLL);
  v203 = vmlal_s16(vmull_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v99.i8);
  v197 = vmlsl_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v66.i8, *(int16x4_t *)v99.i8);
  v208 = vmlsl_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v99.i8);
  v210 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v99.i8);
  *(int16x4_t *)v99.i8 = vrshrn_n_s32(vsubq_s32(v78, v95), 0xEuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v239, v97), 0xEuLL);
  *(int16x4_t *)v103.i8 = vdup_n_s16(0x238Eu);
  *(int16x4_t *)v66.i8 = vdup_n_s16(0x3537u);
  v206 = vmlsl_s16(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8);
  v207 = vmlal_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v99.i8, *(int16x4_t *)v103.i8);
  v109 = v96;
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v251, v96), 0xEuLL);
  *(int16x4_t *)v99.i8 = vrshrn_n_s32(vsubq_s32(v247, v98), 0xEuLL);
  v200 = vmlsl_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v99.i8, *(int16x4_t *)v103.i8);
  v201 = vmlal_s16(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8);
  v110 = v104;
  *(int16x4_t *)v104.i8 = vrshrn_n_s32(vsubq_s32(v246, v104), 0xEuLL);
  *(int16x4_t *)v99.i8 = vrshrn_n_s32(vsubq_s32(v245, v105), 0xEuLL);
  *(int16x4_t *)v100.i8 = vrshrn_n_s32(vsubq_s32(v243, v106), 0xEuLL);
  *(int16x4_t *)v102.i8 = vrshrn_n_s32(vsubq_s32(v241, v107), 0xEuLL);
  v192 = vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v66.i8);
  v199 = vmlal_s16(vmull_s16(*(int16x4_t *)v99.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v66.i8);
  v194 = vmlsl_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v66.i8);
  v111 = vmlsl_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v103.i8), *(int16x4_t *)v99.i8, *(int16x4_t *)v66.i8);
  v112 = vaddq_s32(v90, v236);
  v113 = vaddq_s32(v234, v232);
  v237 = vaddq_s32(v91, v73);
  v238 = vaddq_s32(v93, v74);
  v114 = vaddq_s32(v95, v78);
  v228 = vaddq_s32(v109, v251);
  v115 = vaddq_s32(v97, v239);
  v235 = vaddq_s32(v98, v247);
  v116 = vaddq_s32(v231, v81);
  v248 = vaddq_s32(v101, v84);
  v249 = vaddq_s32(v221, v82);
  v117 = vaddq_s32(v110, v246);
  v240 = vaddq_s32(v105, v245);
  v118 = vaddq_s32(v106, v243);
  *(int16x4_t *)v101.i8 = vsub_s16(vrshrn_n_s32(v237, 0xEuLL), vrshrn_n_s32(v249, 0xEuLL));
  *(int16x4_t *)v93.i8 = vsub_s16(vrshrn_n_s32(v238, 0xEuLL), vrshrn_n_s32(v248, 0xEuLL));
  *(int16x4_t *)v88.i8 = vrshrn_n_s32(v112, 0xEuLL);
  v244 = vaddq_s32(v107, v241);
  *(int16x4_t *)v231.i8 = vrshrn_n_s32(v113, 0xEuLL);
  *(int16x4_t *)v246.i8 = vrshrn_n_s32(v116, 0xEuLL);
  v202 = vrshrn_n_s32(vaddq_s32(v226, v108), 0xEuLL);
  *(int16x4_t *)v105.i8 = vdup_n_s16(0x3B21u);
  *(int16x4_t *)v112.i8 = vsub_s16(*(int16x4_t *)v88.i8, *(int16x4_t *)v246.i8);
  *(int16x4_t *)v99.i8 = vdup_n_s16(0x187Eu);
  *(int16x4_t *)v113.i8 = vsub_s16(*(int16x4_t *)v231.i8, v202);
  v215 = vmlal_s16(vmull_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v105.i8);
  v212 = vmlsl_s16(vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v105.i8);
  v193 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v105.i8);
  v252 = vmlsl_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v105.i8);
  *(int16x4_t *)v112.i8 = vsub_s16(vrshrn_n_s32(v235, 0xEuLL), vrshrn_n_s32(v244, 0xEuLL));
  *(int16x4_t *)v101.i8 = vsub_s16(vrshrn_n_s32(v228, 0xEuLL), vrshrn_n_s32(v240, 0xEuLL));
  v204 = vrshrn_n_s32(v114, 0xEuLL);
  v205 = vrshrn_n_s32(v115, 0xEuLL);
  *(int16x4_t *)v115.i8 = vrshrn_n_s32(v117, 0xEuLL);
  *(int16x4_t *)v221.i8 = vrshrn_n_s32(v118, 0xEuLL);
  *(int16x4_t *)v113.i8 = vsub_s16(v205, *(int16x4_t *)v221.i8);
  *(int16x4_t *)v118.i8 = vsub_s16(v204, *(int16x4_t *)v115.i8);
  v213 = vmlal_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v99.i8);
  v217 = vmlsl_s16(vmull_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v99.i8);
  v218 = *(int16x4_t *)v115.i8;
  v190 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v99.i8);
  v191 = vmlsl_s16(vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8);
  *(int16x4_t *)v118.i8 = vrshrn_n_s32(vsubq_s32(v219, v197), 0xEuLL);
  *(int16x4_t *)v101.i8 = vrshrn_n_s32(vsubq_s32(v222, v203), 0xEuLL);
  v227 = vmlal_s16(vmull_s16(*(int16x4_t *)v101.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v118.i8, *(int16x4_t *)v105.i8);
  v216 = vmlsl_s16(vmull_s16(*(int16x4_t *)v118.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v101.i8, *(int16x4_t *)v105.i8);
  *(int16x4_t *)v116.i8 = vrshrn_n_s32(vsubq_s32(v229, v208), 0xEuLL);
  *(int16x4_t *)v93.i8 = vrshrn_n_s32(vsubq_s32(v224, v210), 0xEuLL);
  v242 = vmlal_s16(vmull_s16(*(int16x4_t *)v93.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v116.i8, *(int16x4_t *)v105.i8);
  v233 = vmlsl_s16(vmull_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v99.i8), *(int16x4_t *)v93.i8, *(int16x4_t *)v105.i8);
  *(int16x4_t *)v115.i8 = vrshrn_n_s32(vsubq_s32(v207, v194), 0xEuLL);
  *(int16x4_t *)v113.i8 = vrshrn_n_s32(vsubq_s32(v201, v111), 0xEuLL);
  *(int16x4_t *)v106.i8 = vrshrn_n_s32(vsubq_s32(v206, v192), 0xEuLL);
  *(int16x4_t *)v112.i8 = vrshrn_n_s32(vsubq_s32(v200, v199), 0xEuLL);
  v195 = vmlal_s16(vmull_s16(*(int16x4_t *)v115.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v106.i8, *(int16x4_t *)v99.i8);
  v214 = vmlal_s16(vmull_s16(*(int16x4_t *)v113.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v112.i8, *(int16x4_t *)v99.i8);
  v119 = vmlsl_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v115.i8, *(int16x4_t *)v99.i8);
  v120 = vaddq_s32(v197, v219);
  v196 = vmlsl_s16(vmull_s16(*(int16x4_t *)v112.i8, *(int16x4_t *)v105.i8), *(int16x4_t *)v113.i8, *(int16x4_t *)v99.i8);
  v198 = vaddq_s32(v208, v229);
  v121 = vaddq_s32(v203, v222);
  v209 = vaddq_s32(v111, v201);
  v211 = vaddq_s32(v210, v224);
  v220 = vaddq_s32(v199, v200);
  *(int16x4_t *)v92.i8 = vrshrn_n_s32(vsubq_s32(v215, v217), 0xEuLL);
  *(int16x4_t *)v100.i8 = vrshrn_n_s32(vsubq_s32(v212, v213), 0xEuLL);
  *(int16x4_t *)v97.i8 = vdup_n_s16(0x2D41u);
  v230 = vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v100.i8, *(int16x4_t *)v97.i8);
  v225 = vmlsl_s16(vmull_s16(*(int16x4_t *)v100.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v97.i8);
  *(int16x4_t *)v85.i8 = vrshrn_n_s32(vsubq_s32(v193, v191), 0xEuLL);
  *(int16x4_t *)v117.i8 = vrshrn_n_s32(vsubq_s32(v252, v190), 0xEuLL);
  v223 = vmlal_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v117.i8, *(int16x4_t *)v97.i8);
  v122 = vmlsl_s16(vmull_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v85.i8, *(int16x4_t *)v97.i8);
  *(int16x4_t *)v85.i8 = vsub_s16(vrshrn_n_s32(v211, 0xEuLL), vrshrn_n_s32(v220, 0xEuLL));
  *(int16x4_t *)v90.i8 = vsub_s16(vrshrn_n_s32(v198, 0xEuLL), vrshrn_n_s32(v209, 0xEuLL));
  *(int16x4_t *)v79.i8 = vrshrn_n_s32(v120, 0xEuLL);
  *(int16x4_t *)v117.i8 = vrshrn_n_s32(v121, 0xEuLL);
  *(int16x4_t *)v120.i8 = vrshrn_n_s32(vaddq_s32(v194, v207), 0xEuLL);
  *(int16x4_t *)v91.i8 = vrshrn_n_s32(vaddq_s32(v192, v206), 0xEuLL);
  *(int16x4_t *)v73.i8 = vsub_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v91.i8);
  *(int16x4_t *)v71.i8 = vsub_s16(*(int16x4_t *)v79.i8, *(int16x4_t *)v120.i8);
  v123 = vmlal_s16(vmull_s16(*(int16x4_t *)v71.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v73.i8, *(int16x4_t *)v97.i8);
  v124 = vmlsl_s16(vmull_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v71.i8, *(int16x4_t *)v97.i8);
  v125 = vmlal_s16(vmull_s16(*(int16x4_t *)v90.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v85.i8, *(int16x4_t *)v97.i8);
  v126 = vmlsl_s16(vmull_s16(*(int16x4_t *)v85.i8, *(int16x4_t *)v97.i8), *(int16x4_t *)v90.i8, *(int16x4_t *)v97.i8);
  v127 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v246.i8, v249, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v88.i8, v237, 0xEuLL));
  v128 = vaddq_s16(vrshrn_high_n_s32(v202, v248, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v231.i8, v238, 0xEuLL));
  v129 = vaddq_s16(vrshrn_high_n_s32(v218, v240, 0xEuLL), vrshrn_high_n_s32(v204, v228, 0xEuLL));
  v130 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v221.i8, v244, 0xEuLL), vrshrn_high_n_s32(v205, v235, 0xEuLL));
  v131 = vsubq_s16(v127, v129);
  v132 = vsubq_s16(v128, v130);
  v133 = vdupq_n_s16(0xD2BFu);
  v134 = vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v132.i8, *(int16x4_t *)v133.i8);
  v135 = vmlal_high_s16(vmull_high_s16(v131, v133), v132, v133);
  v136 = vmlsl_s16(vmull_s16(*(int16x4_t *)v132.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8);
  v137 = vmlsl_high_s16(vmull_high_s16(v132, v133), v131, v133);
  *(int16x4_t *)v131.i8 = vrshrn_n_s32(vsubq_s32(v227, v119), 0xEuLL);
  *(int16x4_t *)v107.i8 = vrshrn_n_s32(vsubq_s32(v216, v195), 0xEuLL);
  v138 = vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v133.i8);
  v139 = vmlsl_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8);
  *(int16x4_t *)v131.i8 = vrshrn_n_s32(vsubq_s32(v242, v196), 0xEuLL);
  *(int16x4_t *)v98.i8 = vrshrn_n_s32(vsubq_s32(v233, v214), 0xEuLL);
  v140 = vmlal_s16(vmull_s16(*(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v98.i8, *(int16x4_t *)v133.i8);
  v141 = vmlsl_s16(vmull_s16(*(int16x4_t *)v98.i8, *(int16x4_t *)v133.i8), *(int16x4_t *)v131.i8, *(int16x4_t *)v133.i8);
  v142 = vrshrn_high_n_s32(*(int16x4_t *)v120.i8, v209, 0xEuLL);
  v143 = vrshrn_high_n_s32(*(int16x4_t *)v91.i8, v220, 0xEuLL);
  v250 = vaddq_s16(v129, v127);
  v144 = vaddq_s16(v128, v130);
  v145 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v213, v212), 0xEuLL), vaddq_s32(v190, v252), 0xEuLL);
  v146 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v79.i8, v198, 0xEuLL), v142);
  v147 = vaddq_s16(v143, vrshrn_high_n_s32(*(int16x4_t *)v117.i8, v211, 0xEuLL));
  v148 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v119, v227), 0xEuLL), vaddq_s32(v196, v242), 0xEuLL);
  v149 = vrshrn_high_n_s32(vrshrn_n_s32(v134, 0xEuLL), v135, 0xEuLL);
  v150 = vrshrn_high_n_s32(vrshrn_n_s32(v136, 0xEuLL), v137, 0xEuLL);
  v151 = vrshrn_high_n_s32(vrshrn_n_s32(v230, 0xEuLL), v223, 0xEuLL);
  v152 = vrshrn_high_n_s32(vrshrn_n_s32(v225, 0xEuLL), v122, 0xEuLL);
  v153 = vrshrn_high_n_s32(vrshrn_n_s32(v123, 0xEuLL), v125, 0xEuLL);
  v154 = vrshrn_high_n_s32(vrshrn_n_s32(v124, 0xEuLL), v126, 0xEuLL);
  v155 = vrshrn_high_n_s32(vrshrn_n_s32(v138, 0xEuLL), v140, 0xEuLL);
  v156 = vrshrn_high_n_s32(vrshrn_n_s32(v139, 0xEuLL), v141, 0xEuLL);
  v157 = vnegq_s16(v146);
  v158 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v217, v215), 0xEuLL), vaddq_s32(v191, v193), 0xEuLL));
  v159 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v195, v216), 0xEuLL), vaddq_s32(v214, v233), 0xEuLL));
  v160 = vnegq_s16(v144);
  if (a2)
  {
    *a2 = v250;
    a2[2] = v157;
    a2[4] = v148;
    a2[6] = v158;
    a2[8] = v151;
    a2[10] = v155;
    a2[12] = v153;
    a2[14] = v149;
    a2[16] = v150;
    a2[18] = v154;
    a2[20] = v156;
    a2[22] = v152;
    a2[24] = v145;
    a2[26] = v159;
    a2[28] = v147;
    a2[30] = v160;
  }
  else if (a5)
  {
    v161.i64[0] = 0xFF00FF00FF00FFLL;
    v161.i64[1] = 0xFF00FF00FF00FFLL;
    *a3 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v250, 6uLL), *a3), v161), 0);
    v162 = 2 * a4;
    *(int16x8_t *)((char *)a3 + v162) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v157, 6uLL), *(int16x8_t *)((char *)a3 + v162)), v161), 0);
    v163 = (int16x8_t *)((char *)a3 + v162 + v162);
    *v163 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v148, 6uLL), *v163), v161), 0);
    v164 = (int16x8_t *)((char *)v163 + v162);
    *v164 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v158, 6uLL), *v164), v161), 0);
    v165 = (int16x8_t *)((char *)v164 + v162);
    *v165 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v151, 6uLL), *v165), v161), 0);
    v166 = (int16x8_t *)((char *)v165 + v162);
    *v166 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v155, 6uLL), *v166), v161), 0);
    v167 = (int16x8_t *)((char *)v166 + v162);
    *v167 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v153, 6uLL), *v167), v161), 0);
    v168 = (int16x8_t *)((char *)v167 + v162);
    *v168 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v149, 6uLL), *v168), v161), 0);
    v169 = (int16x8_t *)((char *)v168 + v162);
    *v169 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v150, 6uLL), *v169), v161), 0);
    v170 = (int16x8_t *)((char *)v169 + v162);
    *v170 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v154, 6uLL), *v170), v161), 0);
    v171 = (int16x8_t *)((char *)v170 + v162);
    *v171 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v156, 6uLL), *v171), v161), 0);
    v172 = (int16x8_t *)((char *)v171 + v162);
    *v172 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v152, 6uLL), *v172), v161), 0);
    v173 = (int16x8_t *)((char *)v172 + v162);
    *v173 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v145, 6uLL), *v173), v161), 0);
    v174 = (int16x8_t *)((char *)v173 + v162);
    *v174 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v159, 6uLL), *v174), v161), 0);
    v175 = (int16x8_t *)((char *)v174 + v162);
    *v175 = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v147, 6uLL), *v175), v161), 0);
    *(int16x8_t *)((char *)v175 + v162) = vqshluq_n_s16(vminq_s16(vqaddq_s16(vrshrq_n_s16(v160, 6uLL), *(int16x8_t *)((char *)v175 + v162)), v161), 0);
  }
  else
  {
    *(int8x8_t *)a3->i8 = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)a3->i8), v250, 6uLL));
    v176 = (uint8x8_t *)&a3->i8[a4];
    *v176 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v176), v157, 6uLL));
    v177 = (uint8x8_t *)((char *)v176 + a4);
    *v177 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v177), v148, 6uLL));
    v178 = (uint8x8_t *)((char *)v177 + a4);
    *v178 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v178), v158, 6uLL));
    v179 = (uint8x8_t *)((char *)v178 + a4);
    *v179 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v179), v151, 6uLL));
    v180 = (uint8x8_t *)((char *)v179 + a4);
    *v180 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v180), v155, 6uLL));
    v181 = (uint8x8_t *)((char *)v180 + a4);
    *v181 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v181), v153, 6uLL));
    v182 = (uint8x8_t *)((char *)v181 + a4);
    *v182 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v182), v149, 6uLL));
    v183 = (uint8x8_t *)((char *)v182 + a4);
    *v183 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v183), v150, 6uLL));
    v184 = (uint8x8_t *)((char *)v183 + a4);
    *v184 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v184), v154, 6uLL));
    v185 = (uint8x8_t *)((char *)v184 + a4);
    *v185 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v185), v156, 6uLL));
    v186 = (uint8x8_t *)((char *)v185 + a4);
    *v186 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v186), v152, 6uLL));
    v187 = (uint8x8_t *)((char *)v186 + a4);
    *v187 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v187), v145, 6uLL));
    v188 = (uint8x8_t *)((char *)v187 + a4);
    *v188 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v188), v159, 6uLL));
    v189 = (uint8x8_t *)((char *)v188 + a4);
    *v189 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v189), v147, 6uLL));
    *(int8x8_t *)((char *)v189 + a4) = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v189 + a4)), v160, 6uLL));
  }
  return result;
}

int8x8_t vp9_iht4x4_16_add_neon(int16x8_t *a1, __int32 *a2, int a3, int a4)
{
  int32x4_t v4;
  int32x4_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int32x4_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x4_t v39;
  int16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int32x4_t v59;
  int16x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int16x4_t v71;
  int32x4_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x4_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  __int32 *v107;
  uint8x8_t v108;
  __int32 *v109;
  __int32 *v110;
  uint8x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int8x8_t v114;
  int8x8_t result;

  v4 = (int32x4_t)vuzp1q_s16(*a1, a1[1]);
  v5 = (int32x4_t)vuzp1q_s16(a1[2], a1[3]);
  v6 = (int64x2_t)vtrn1q_s32(v4, v5);
  v7 = (int64x2_t)vtrn2q_s32(v4, v5);
  v8 = (int16x8_t)vzip1q_s64(v6, v7);
  v9 = (int16x8_t)vzip2q_s64(v6, v7);
  v10 = vtrn1q_s16(v8, v9);
  v11 = vtrn2q_s16(v8, v9);
  if (a4 == 2)
  {
    v37 = vdupq_n_s16(0x14A3u);
    v38 = vdupq_n_s16(0x26C9u);
    v39 = vdup_n_s16(0x3441u);
    v40 = vdupq_n_s16(0x3B6Cu);
    v41 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v37.i8), v10, v40), v11, v38);
    v42 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v38.i8), v10, v37), v11, v40);
    v43 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v10.i8), v10), v11), vdupq_n_s32(0x3441u));
    v44 = vmlal_s16(v41, *(int16x4_t *)v11.i8, v39);
    v45 = vaddq_s32(vmlsl_s16(v41, *(int16x4_t *)v11.i8, v39), v42);
    v46 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v44, 0xEuLL), vmlal_s16(v42, *(int16x4_t *)v11.i8, v39), 0xEuLL);
    v47 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v43, 0xEuLL), v45, 0xEuLL);
    v48 = (int64x2_t)vtrn1q_s32(v46, v47);
    v49 = (int64x2_t)vtrn2q_s32(v46, v47);
    v50 = (int16x8_t)vzip1q_s64(v48, v49);
    v51 = (int16x8_t)vzip2q_s64(v48, v49);
    v52 = vtrn1q_s16(v50, v51);
    v53 = vtrn2q_s16(v50, v51);
    v54 = vdupq_n_s16(0x2D41u);
    v55 = vmull_s16(*(int16x4_t *)v52.i8, *(int16x4_t *)v54.i8);
    v30 = vmlsl_high_s16(v55, v52, v54);
    v56 = vmlal_high_s16(v55, v52, v54);
    v57 = vdupq_n_s16(0x187Eu);
    v58 = vdupq_n_s16(0x3B21u);
    v32 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v57.i8), v53, v58);
    v59 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v53.i8, *(int16x4_t *)v58.i8), v53, v57);
    v34 = vrshrn_n_s32(v56, 0xEuLL);
    v35 = vrshrn_n_s32(v30, 0xEuLL);
    v36 = vrshrn_n_s32(v59, 0xEuLL);
    goto LABEL_6;
  }
  if (a4 == 1)
  {
    v63 = vdupq_n_s16(0x2D41u);
    v64 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v63.i8);
    v65 = vmlsl_high_s16(v64, v10, v63);
    v66 = vmlal_high_s16(v64, v10, v63);
    v67 = vdupq_n_s16(0x187Eu);
    v68 = vdupq_n_s16(0x3B21u);
    v69 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v67.i8), v11, v68);
    v70 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v68.i8), v11, v67);
    v71 = vrshrn_n_s32(v66, 0xEuLL);
    *(int16x4_t *)v66.i8 = vrshrn_n_s32(v70, 0xEuLL);
    *(int16x4_t *)v68.i8 = vsub_s16(v71, *(int16x4_t *)v66.i8);
    v72 = (int32x4_t)vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v66.i8, v69, 0xEuLL), vrshrn_high_n_s32(v71, v65, 0xEuLL));
    *(int16x4_t *)v67.i8 = vsub_s16(vrshrn_n_s32(v65, 0xEuLL), vrshrn_n_s32(v69, 0xEuLL));
    v67.i64[1] = v68.i64[0];
    v73 = (int64x2_t)vtrn1q_s32(v72, (int32x4_t)v67);
    v74 = (int64x2_t)vtrn2q_s32(v72, (int32x4_t)v67);
    v75 = (int16x8_t)vzip1q_s64(v73, v74);
    v76 = (int16x8_t)vzip2q_s64(v73, v74);
    v77 = vtrn1q_s16(v75, v76);
    v78 = vtrn2q_s16(v75, v76);
    v79 = vdupq_n_s16(0x14A3u);
    v80 = vdupq_n_s16(0x26C9u);
    *(int16x4_t *)v68.i8 = vdup_n_s16(0x3441u);
    v81 = vdupq_n_s16(0x3B6Cu);
    v82 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v79.i8), v77, v81), v78, v80);
    v83 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v77.i8, *(int16x4_t *)v80.i8), v77, v79), v78, v81);
    v84 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v77.i8), v77), v78), vdupq_n_s32(0x3441u));
    v85 = vmlal_s16(v82, *(int16x4_t *)v78.i8, *(int16x4_t *)v68.i8);
    v86 = vaddq_s32(vmlsl_s16(v82, *(int16x4_t *)v78.i8, *(int16x4_t *)v68.i8), v83);
    v61 = vrshrn_high_n_s32(vrshrn_n_s32(v85, 0xEuLL), vmlal_s16(v83, *(int16x4_t *)v78.i8, *(int16x4_t *)v68.i8), 0xEuLL);
LABEL_9:
    v62 = vrshrn_high_n_s32(vrshrn_n_s32(v84, 0xEuLL), v86, 0xEuLL);
    goto LABEL_10;
  }
  if (a4)
  {
    v87 = vdupq_n_s16(0x14A3u);
    v88 = vdupq_n_s16(0x26C9u);
    v89 = vdup_n_s16(0x3441u);
    v90 = vdupq_n_s16(0x3B6Cu);
    v91 = vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v10.i8), v10), v11);
    v92 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v87.i8), v10, v90), v11, v88);
    v93 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v88.i8), v10, v87), v11, v90);
    v94 = vdupq_n_s32(0x3441u);
    v95 = vmlal_s16(v92, *(int16x4_t *)v11.i8, v89);
    v96 = vaddq_s32(vmlsl_s16(v92, *(int16x4_t *)v11.i8, v89), v93);
    v97 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(v95, 0xEuLL), vmlal_s16(v93, *(int16x4_t *)v11.i8, v89), 0xEuLL);
    v98 = (int32x4_t)vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(v91, v94), 0xEuLL), v96, 0xEuLL);
    v99 = (int64x2_t)vtrn1q_s32(v97, v98);
    v100 = (int64x2_t)vtrn2q_s32(v97, v98);
    v101 = (int16x8_t)vzip1q_s64(v99, v100);
    v102 = (int16x8_t)vzip2q_s64(v99, v100);
    v103 = vtrn1q_s16(v101, v102);
    v104 = vtrn2q_s16(v101, v102);
    v105 = vmlal_high_s16(vmlal_high_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v87.i8), v103, v90), v104, v88);
    v106 = vmlsl_high_s16(vmlsl_high_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v88.i8), v103, v87), v104, v90);
    v84 = vmulq_s32(vaddw_high_s16(vsubw_high_s16(vmovl_s16(*(int16x4_t *)v103.i8), v103), v104), v94);
    v86 = vaddq_s32(vmlsl_s16(v105, *(int16x4_t *)v104.i8, v89), v106);
    v61 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(v105, *(int16x4_t *)v104.i8, v89), 0xEuLL), vmlal_s16(v106, *(int16x4_t *)v104.i8, v89), 0xEuLL);
    goto LABEL_9;
  }
  v12 = vdupq_n_s16(0x2D41u);
  v13 = vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v12.i8);
  v14 = vmlsl_high_s16(v13, v10, v12);
  v15 = vdupq_n_s16(0x187Eu);
  v16 = vmlal_high_s16(v13, v10, v12);
  v17 = vdupq_n_s16(0x3B21u);
  v18 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v15.i8), v11, v17);
  v19 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v17.i8), v11, v15);
  v20 = vrshrn_n_s32(v16, 0xEuLL);
  *(int16x4_t *)v19.i8 = vrshrn_n_s32(v19, 0xEuLL);
  v21 = vsub_s16(v20, *(int16x4_t *)v19.i8);
  v22 = (int32x4_t)vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v19.i8, v18, 0xEuLL), vrshrn_high_n_s32(v20, v14, 0xEuLL));
  *(int16x4_t *)v18.i8 = vsub_s16(vrshrn_n_s32(v14, 0xEuLL), vrshrn_n_s32(v18, 0xEuLL));
  v18.u64[1] = (unint64_t)v21;
  v23 = (int64x2_t)vtrn1q_s32(v22, v18);
  v24 = (int64x2_t)vtrn2q_s32(v22, v18);
  v25 = (int16x8_t)vzip1q_s64(v23, v24);
  v26 = (int16x8_t)vzip2q_s64(v23, v24);
  v27 = vtrn1q_s16(v25, v26);
  v28 = vtrn2q_s16(v25, v26);
  v29 = vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v12.i8);
  v30 = vmlsl_high_s16(v29, v27, v12);
  v31 = vmlal_high_s16(v29, v27, v12);
  v32 = vmlsl_high_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v15.i8), v28, v17);
  v33 = vmlal_high_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v17.i8), v28, v15);
  v34 = vrshrn_n_s32(v31, 0xEuLL);
  v35 = vrshrn_n_s32(v30, 0xEuLL);
  v36 = vrshrn_n_s32(v33, 0xEuLL);
LABEL_6:
  v60 = vsub_s16(v34, v36);
  v61 = vaddq_s16(vrshrn_high_n_s32(v36, v32, 0xEuLL), vrshrn_high_n_s32(v34, v30, 0xEuLL));
  *(int16x4_t *)v62.i8 = vsub_s16(v35, vrshrn_n_s32(v32, 0xEuLL));
  v62.u64[1] = (unint64_t)v60;
LABEL_10:
  v107 = (__int32 *)((char *)a2 + a3);
  v108.i32[0] = *a2;
  v108.i32[1] = *v107;
  v109 = (__int32 *)((char *)a2 + 2 * a3);
  v110 = (__int32 *)((char *)v109 + a3);
  v111.i32[0] = *v109;
  v111.i32[1] = *v110;
  v112 = vrsraq_n_s16((int16x8_t)vmovl_u8(v108), v61, 4uLL);
  v113 = vrsraq_n_s16((int16x8_t)vmovl_u8(v111), v62, 4uLL);
  v114 = vqmovun_s16(v112);
  *a2 = v114.i32[0];
  *v107 = v114.i32[1];
  result = vqmovun_s16(v113);
  *v109 = result.i32[0];
  *v110 = result.i32[1];
  return result;
}

int8x8_t vp9_iht8x8_64_add_neon(int16x8_t *a1, uint8x8_t *a2, int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int32x4_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int16x4_t v185;
  int16x4_t v186;
  int16x4_t v187;
  int16x8_t v188;
  int32x4_t v189;
  int16x4_t v190;
  int16x4_t v191;
  int16x4_t v192;
  int16x8_t v193;
  int32x4_t v194;
  int16x8_t v195;
  int32x4_t v196;
  int16x4_t v197;
  int16x8_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int32x4_t v216;
  int16x8_t v217;
  int16x4_t v218;
  int16x8_t v219;
  int32x4_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int16x8_t v250;
  int16x8_t v251;
  int16x8_t v252;
  int16x8_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int16x8_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int16x8_t v265;
  int16x8_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int16x8_t v277;
  int16x8_t v278;
  int16x8_t v279;
  int16x8_t v280;
  int16x8_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  int16x8_t v287;
  int16x8_t v288;
  int16x8_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int32x4_t v292;
  int32x4_t v293;
  int16x8_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int16x4_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x4_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  int16x8_t v311;
  int32x4_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int16x8_t v320;
  int16x8_t v321;
  int16x8_t v322;
  int16x8_t v323;
  int16x8_t v324;
  int16x8_t v325;
  int16x8_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int16x8_t v329;
  int16x8_t v330;
  int16x8_t v331;
  int16x8_t v332;
  int16x8_t v333;
  int16x8_t v334;
  int16x8_t v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int32x4_t v340;
  int32x4_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int64x2_t v348;
  int64x2_t v349;
  int64x2_t v350;
  int64x2_t v351;
  int64x2_t v352;
  int64x2_t v353;
  int64x2_t v354;
  int64x2_t v355;
  int16x8_t v356;
  int16x8_t v357;
  int16x8_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int16x8_t v363;
  int16x8_t v364;
  int16x8_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int16x8_t v372;
  int16x8_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int16x8_t v379;
  int32x4_t v380;
  int16x8_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int16x8_t v388;
  int16x8_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int16x4_t v397;
  int16x8_t v398;
  int32x4_t v399;
  int16x4_t v400;
  int16x4_t v401;
  int16x4_t v402;
  int16x8_t v403;
  int32x4_t v404;
  int16x4_t v405;
  int16x8_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int16x8_t v418;
  int32x4_t v419;
  int16x8_t v420;
  int16x8_t v421;
  int16x8_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int16x8_t v432;
  int16x8_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int16x8_t v439;
  int16x8_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int16x4_t v446;
  int16x4_t v447;
  int16x4_t v448;
  int16x8_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int16x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  int16x8_t v455;
  int32x4_t v456;
  int32x4_t v457;
  int32x4_t v458;
  int32x4_t v459;
  int32x4_t v460;
  int32x4_t v461;
  int32x4_t v462;
  int32x4_t v463;
  int32x4_t v464;
  int32x4_t v465;
  int32x4_t v466;
  int32x4_t v467;
  int32x4_t v468;
  int32x4_t v469;
  int32x4_t v470;
  int16x8_t v471;
  int16x8_t v472;
  int16x8_t v473;
  int16x8_t v474;
  int32x4_t v475;
  int32x4_t v476;
  int32x4_t v477;
  int32x4_t v478;
  int16x8_t v479;
  int16x8_t v480;
  int32x4_t v481;
  int16x8_t v482;
  int16x8_t v483;
  int16x8_t v484;
  int16x8_t v485;
  int16x8_t v486;
  int16x8_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  int32x4_t v491;
  int32x4_t v492;
  int32x4_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int64x2_t v496;
  int64x2_t v497;
  int64x2_t v498;
  int64x2_t v499;
  int64x2_t v500;
  int64x2_t v501;
  int64x2_t v502;
  int64x2_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  int16x8_t v510;
  int16x8_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  int32x4_t v515;
  int32x4_t v516;
  int32x4_t v517;
  int32x4_t v518;
  int32x4_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  int32x4_t v523;
  int32x4_t v524;
  int32x4_t v525;
  int32x4_t v526;
  int32x4_t v527;
  int32x4_t v528;
  int32x4_t v529;
  int32x4_t v530;
  int32x4_t v531;
  int32x4_t v532;
  int32x4_t v533;
  int32x4_t v534;
  int32x4_t v535;
  int32x4_t v536;
  int32x4_t v537;
  int32x4_t v538;
  int32x4_t v539;
  int32x4_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  int32x4_t v544;
  int32x4_t v545;
  int32x4_t v546;
  int32x4_t v547;
  int32x4_t v548;
  int32x4_t v549;
  int32x4_t v550;
  int32x4_t v551;
  int32x4_t v552;
  int32x4_t v553;
  int32x4_t v554;
  int32x4_t v555;
  int32x4_t v556;
  int16x8_t v557;
  uint8x8_t *v558;
  uint8x8_t *v559;
  uint8x8_t *v560;
  uint8x8_t *v561;
  uint8x8_t *v562;
  uint8x8_t *v563;
  int8x8_t result;

  v4 = vuzp1q_s16(*a1, a1[1]);
  v5 = vuzp1q_s16(a1[2], a1[3]);
  v6 = vuzp1q_s16(a1[4], a1[5]);
  v7 = vuzp1q_s16(a1[6], a1[7]);
  v8 = vuzp1q_s16(a1[8], a1[9]);
  v9 = vuzp1q_s16(a1[10], a1[11]);
  v10 = vuzp1q_s16(a1[12], a1[13]);
  v11 = vuzp1q_s16(a1[14], a1[15]);
  v12 = (int32x4_t)vtrn1q_s16(v4, v5);
  v13 = (int32x4_t)vtrn2q_s16(v4, v5);
  v14 = (int32x4_t)vtrn1q_s16(v6, v7);
  v15 = (int32x4_t)vtrn2q_s16(v6, v7);
  v16 = (int32x4_t)vtrn1q_s16(v8, v9);
  v17 = (int32x4_t)vtrn2q_s16(v8, v9);
  v18 = (int32x4_t)vtrn1q_s16(v10, v11);
  v19 = (int32x4_t)vtrn2q_s16(v10, v11);
  v20 = (int64x2_t)vtrn1q_s32(v12, v14);
  v21 = (int64x2_t)vtrn2q_s32(v12, v14);
  v22 = (int64x2_t)vtrn1q_s32(v13, v15);
  v23 = (int64x2_t)vtrn2q_s32(v13, v15);
  v24 = (int64x2_t)vtrn1q_s32(v16, v18);
  v25 = (int64x2_t)vtrn2q_s32(v16, v18);
  v26 = (int64x2_t)vtrn1q_s32(v17, v19);
  v27 = (int64x2_t)vtrn2q_s32(v17, v19);
  v28 = (int16x8_t)vzip1q_s64(v20, v24);
  v29 = (int16x8_t)vzip2q_s64(v20, v24);
  v30 = (int16x8_t)vzip1q_s64(v22, v26);
  v31 = (int16x8_t)vzip2q_s64(v22, v26);
  v32 = (int16x8_t)vzip1q_s64(v21, v25);
  v33 = (int16x8_t)vzip2q_s64(v21, v25);
  v34 = (int16x8_t)vzip1q_s64(v23, v27);
  v35 = (int16x8_t)vzip2q_s64(v23, v27);
  if (a4 == 2)
  {
    v152 = vdupq_n_s16(0x3FB1u);
    v153 = vdupq_n_s16(0x646u);
    v154 = vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v153.i8);
    v155 = vmull_high_s16(v35, v153);
    v156 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v153.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v152.i8);
    v157 = vmlal_high_s16(vmull_high_s16(v28, v153), v35, v152);
    v158 = vmlsl_s16(v154, *(int16x4_t *)v28.i8, *(int16x4_t *)v152.i8);
    v159 = vmlsl_high_s16(v155, v28, v152);
    v160 = vdupq_n_s16(0x3871u);
    v161 = vdupq_n_s16(0x1E2Bu);
    v162 = vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v161.i8);
    v163 = vmull_high_s16(v31, v161);
    v164 = vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v161.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v160.i8);
    v165 = vmlal_high_s16(vmull_high_s16(v32, v161), v31, v160);
    v166 = vmlsl_s16(v162, *(int16x4_t *)v32.i8, *(int16x4_t *)v160.i8);
    v167 = vmlsl_high_s16(v163, v32, v160);
    v168 = vdupq_n_s16(0x289Au);
    v169 = vdupq_n_s16(0x3179u);
    v170 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v169.i8);
    v171 = vmull_high_s16(v34, v169);
    v172 = vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v169.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v168.i8);
    v173 = vmlal_high_s16(vmull_high_s16(v29, v169), v34, v168);
    v174 = vmlsl_s16(v170, *(int16x4_t *)v29.i8, *(int16x4_t *)v168.i8);
    v175 = vdupq_n_s16(0x1294u);
    v176 = vdupq_n_s16(0x3D3Fu);
    v177 = vmlsl_high_s16(v171, v29, v168);
    v178 = vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v176.i8);
    v179 = vmull_high_s16(v30, v176);
    v180 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v176.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v175.i8);
    v181 = vmlal_high_s16(vmull_high_s16(v33, v176), v30, v175);
    v182 = vmlsl_s16(v178, *(int16x4_t *)v33.i8, *(int16x4_t *)v175.i8);
    v183 = vmlsl_high_s16(v179, v33, v175);
    v184 = vaddq_s32(v173, v157);
    *(int16x4_t *)v175.i8 = vrshrn_n_s32(vaddq_s32(v172, v156), 0xEuLL);
    v185 = vrshrn_n_s32(v184, 0xEuLL);
    v186 = vrshrn_n_s32(vaddq_s32(v180, v164), 0xEuLL);
    v187 = vsub_s16(*(int16x4_t *)v175.i8, v186);
    v188 = vrshrn_high_n_s32(*(int16x4_t *)v175.i8, v184, 0xEuLL);
    v189 = vaddq_s32(v177, v159);
    *(int16x4_t *)v184.i8 = vrshrn_n_s32(vaddq_s32(v174, v158), 0xEuLL);
    v190 = vrshrn_n_s32(v189, 0xEuLL);
    v191 = vrshrn_n_s32(vaddq_s32(v182, v166), 0xEuLL);
    v192 = vsub_s16(*(int16x4_t *)v184.i8, v191);
    v193 = vrshrn_high_n_s32(*(int16x4_t *)v184.i8, v189, 0xEuLL);
    v194 = vaddq_s32(v181, v165);
    *(int16x4_t *)v189.i8 = vrshrn_n_s32(v194, 0xEuLL);
    v195 = vrshrn_high_n_s32(v186, v194, 0xEuLL);
    v196 = vaddq_s32(v183, v167);
    v197 = vrshrn_n_s32(v196, 0xEuLL);
    v198 = vrshrn_high_n_s32(v191, v196, 0xEuLL);
    v199 = vsubq_s32(v156, v172);
    v200 = vsubq_s32(v157, v173);
    *(int16x4_t *)v157.i8 = vrshrn_n_s32(v199, 0xEuLL);
    *(int16x4_t *)v200.i8 = vrshrn_n_s32(v200, 0xEuLL);
    *(int16x4_t *)v158.i8 = vrshrn_n_s32(vsubq_s32(v158, v174), 0xEuLL);
    *(int16x4_t *)v174.i8 = vrshrn_n_s32(vsubq_s32(v159, v177), 0xEuLL);
    *(int16x4_t *)v164.i8 = vrshrn_n_s32(vsubq_s32(v164, v180), 0xEuLL);
    *(int16x4_t *)v159.i8 = vrshrn_n_s32(vsubq_s32(v165, v181), 0xEuLL);
    *(int16x4_t *)v166.i8 = vrshrn_n_s32(vsubq_s32(v166, v182), 0xEuLL);
    *(int16x4_t *)v167.i8 = vrshrn_n_s32(vsubq_s32(v167, v183), 0xEuLL);
    v201 = vdupq_n_s16(0x3B21u);
    v202 = vdupq_n_s16(0x187Eu);
    v203 = vmull_s16(*(int16x4_t *)v157.i8, *(int16x4_t *)v202.i8);
    v204 = vmlal_s16(vmull_s16(*(int16x4_t *)v158.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v157.i8, *(int16x4_t *)v201.i8);
    v205 = vmlal_s16(vmull_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v200.i8, *(int16x4_t *)v201.i8);
    v206 = vmlsl_s16(v203, *(int16x4_t *)v158.i8, *(int16x4_t *)v201.i8);
    v207 = vmlsl_s16(vmull_s16(*(int16x4_t *)v200.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v201.i8);
    v208 = vmull_s16(*(int16x4_t *)v166.i8, *(int16x4_t *)v201.i8);
    v209 = vmlal_s16(vmull_s16(*(int16x4_t *)v164.i8, *(int16x4_t *)v201.i8), *(int16x4_t *)v166.i8, *(int16x4_t *)v202.i8);
    v210 = vmlal_s16(vmull_s16(*(int16x4_t *)v159.i8, *(int16x4_t *)v201.i8), *(int16x4_t *)v167.i8, *(int16x4_t *)v202.i8);
    v211 = vmlsl_s16(v208, *(int16x4_t *)v164.i8, *(int16x4_t *)v202.i8);
    v212 = vmlsl_s16(vmull_s16(*(int16x4_t *)v167.i8, *(int16x4_t *)v201.i8), *(int16x4_t *)v159.i8, *(int16x4_t *)v202.i8);
    v213 = vaddq_s16(v195, v188);
    v214 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v211, v204), 0xEuLL), vaddq_s32(v212, v205), 0xEuLL);
    v215 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v209, v206), 0xEuLL), vaddq_s32(v210, v207), 0xEuLL);
    v216 = vsubq_s32(v205, v212);
    *(int16x4_t *)v205.i8 = vrshrn_n_s32(vsubq_s32(v204, v211), 0xEuLL);
    *(int16x4_t *)v216.i8 = vrshrn_n_s32(v216, 0xEuLL);
    *(int16x4_t *)v209.i8 = vrshrn_n_s32(vsubq_s32(v206, v209), 0xEuLL);
    *(int16x4_t *)v210.i8 = vrshrn_n_s32(vsubq_s32(v207, v210), 0xEuLL);
    v217 = vdupq_n_s16(0x2D41u);
    v218 = vsub_s16(v185, *(int16x4_t *)v189.i8);
    *(int16x4_t *)v173.i8 = vsub_s16(v190, v197);
    v219 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v187, *(int16x4_t *)v217.i8), v192, *(int16x4_t *)v217.i8), 0xEuLL), vmlsl_s16(vmull_s16(v218, *(int16x4_t *)v217.i8), *(int16x4_t *)v173.i8, *(int16x4_t *)v217.i8), 0xEuLL);
    v220 = vmlsl_s16(vmull_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v210.i8, *(int16x4_t *)v217.i8);
    v221 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v209.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v205.i8, *(int16x4_t *)v217.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v216.i8, *(int16x4_t *)v217.i8), 0xEuLL);
    v222 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v209.i8, *(int16x4_t *)v217.i8), 0xEuLL), v220, 0xEuLL);
    v223 = vnegq_s16(v214);
    v224 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v192, *(int16x4_t *)v217.i8), v187, *(int16x4_t *)v217.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v217.i8), v218, *(int16x4_t *)v217.i8), 0xEuLL));
    v225 = vnegq_s16(v222);
    v226 = vnegq_s16(vaddq_s16(v193, v198));
    v227 = (int32x4_t)vtrn1q_s16(v213, v223);
    v228 = (int32x4_t)vtrn2q_s16(v213, v223);
    v229 = (int32x4_t)vtrn1q_s16(v221, v224);
    v230 = (int32x4_t)vtrn2q_s16(v221, v224);
    v231 = (int32x4_t)vtrn1q_s16(v219, v225);
    v232 = (int32x4_t)vtrn2q_s16(v219, v225);
    v233 = (int32x4_t)vtrn1q_s16(v215, v226);
    v234 = (int32x4_t)vtrn2q_s16(v215, v226);
    v235 = (int64x2_t)vtrn1q_s32(v227, v229);
    v236 = (int64x2_t)vtrn2q_s32(v227, v229);
    v237 = (int64x2_t)vtrn1q_s32(v228, v230);
    v238 = (int64x2_t)vtrn2q_s32(v228, v230);
    v239 = (int64x2_t)vtrn1q_s32(v231, v233);
    v240 = (int64x2_t)vtrn2q_s32(v231, v233);
    v241 = (int64x2_t)vtrn1q_s32(v232, v234);
    v242 = (int64x2_t)vtrn2q_s32(v232, v234);
    v243 = (int16x8_t)vzip1q_s64(v235, v239);
    v244 = (int16x8_t)vzip2q_s64(v235, v239);
    v245 = (int16x8_t)vzip1q_s64(v237, v241);
    v246 = (int16x8_t)vzip2q_s64(v237, v241);
    v247 = (int16x8_t)vzip1q_s64(v236, v240);
    v248 = (int16x8_t)vzip2q_s64(v236, v240);
    v249 = (int16x8_t)vzip1q_s64(v238, v242);
    v250 = vdupq_n_s16(0xC7Cu);
    v251 = (int16x8_t)vzip2q_s64(v238, v242);
    v252 = vdupq_n_s16(0xDC72u);
    v253 = vdupq_n_s16(0x3537u);
    v254 = vmull_s16(*(int16x4_t *)v249.i8, *(int16x4_t *)v253.i8);
    v255 = vmull_high_s16(v249, v253);
    v256 = vdupq_n_s16(0x3EC5u);
    v257 = vmlsl_s16(vmull_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v250.i8), *(int16x4_t *)v251.i8, *(int16x4_t *)v256.i8);
    v258 = vmlsl_high_s16(vmull_high_s16(v245, v250), v251, v256);
    v259 = vmlal_s16(vmull_s16(*(int16x4_t *)v246.i8, *(int16x4_t *)v253.i8), *(int16x4_t *)v249.i8, *(int16x4_t *)v252.i8);
    v260 = vmlal_high_s16(vmull_high_s16(v246, v253), v249, v252);
    v261 = vmlsl_s16(v254, *(int16x4_t *)v246.i8, *(int16x4_t *)v252.i8);
    v262 = vmlsl_high_s16(v255, v246, v252);
    v263 = vmlal_s16(vmull_s16(*(int16x4_t *)v251.i8, *(int16x4_t *)v250.i8), *(int16x4_t *)v245.i8, *(int16x4_t *)v256.i8);
    v264 = vmlal_high_s16(vmull_high_s16(v251, v250), v245, v256);
    *(int16x4_t *)v245.i8 = vrshrn_n_s32(v257, 0xEuLL);
    *(int16x4_t *)v246.i8 = vrshrn_n_s32(v258, 0xEuLL);
    *(int16x4_t *)v250.i8 = vrshrn_n_s32(v259, 0xEuLL);
    *(int16x4_t *)v257.i8 = vsub_s16(*(int16x4_t *)v245.i8, *(int16x4_t *)v250.i8);
    v265 = vrshrn_high_n_s32(*(int16x4_t *)v245.i8, v258, 0xEuLL);
    *(int16x4_t *)v258.i8 = vrshrn_n_s32(v260, 0xEuLL);
    v266 = vrshrn_high_n_s32(*(int16x4_t *)v250.i8, v260, 0xEuLL);
    *(int16x4_t *)v261.i8 = vrshrn_n_s32(v261, 0xEuLL);
    *(int16x4_t *)v260.i8 = vrshrn_n_s32(v262, 0xEuLL);
    *(int16x4_t *)v263.i8 = vrshrn_n_s32(v263, 0xEuLL);
    *(int16x4_t *)v252.i8 = vsub_s16(*(int16x4_t *)v263.i8, *(int16x4_t *)v261.i8);
    v267 = vrshrn_high_n_s32(*(int16x4_t *)v261.i8, v262, 0xEuLL);
    *(int16x4_t *)v262.i8 = vrshrn_n_s32(v264, 0xEuLL);
    v268 = vrshrn_high_n_s32(*(int16x4_t *)v263.i8, v264, 0xEuLL);
    v269 = vmlal_s16(vmull_s16(*(int16x4_t *)v244.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v243.i8, *(int16x4_t *)v217.i8);
    v270 = vmlal_high_s16(vmull_high_s16(v244, v217), v243, v217);
    v271 = vmlsl_s16(vmull_s16(*(int16x4_t *)v243.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v244.i8, *(int16x4_t *)v217.i8);
    v272 = vmlsl_high_s16(vmull_high_s16(v243, v217), v244, v217);
    v273 = vmlsl_s16(vmull_s16(*(int16x4_t *)v247.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v248.i8, *(int16x4_t *)v201.i8);
    v274 = vmlsl_high_s16(vmull_high_s16(v247, v202), v248, v201);
    v275 = vmlal_s16(vmull_s16(*(int16x4_t *)v248.i8, *(int16x4_t *)v202.i8), *(int16x4_t *)v247.i8, *(int16x4_t *)v201.i8);
    v276 = vmlal_high_s16(vmull_high_s16(v248, v202), v247, v201);
    v277 = vrshrn_high_n_s32(vrshrn_n_s32(v269, 0xEuLL), v270, 0xEuLL);
    v278 = vrshrn_high_n_s32(vrshrn_n_s32(v271, 0xEuLL), v272, 0xEuLL);
    v279 = vrshrn_high_n_s32(vrshrn_n_s32(v273, 0xEuLL), v274, 0xEuLL);
    v280 = vrshrn_high_n_s32(vrshrn_n_s32(v275, 0xEuLL), v276, 0xEuLL);
    v281 = vaddq_s16(v266, v265);
    v282 = vaddq_s16(v268, v267);
    v283 = vaddq_s16(v280, v277);
    v284 = vaddq_s16(v279, v278);
    v285 = vsubq_s16(v278, v279);
    v286 = vsubq_s16(v277, v280);
    *(int16x4_t *)v280.i8 = vsub_s16(*(int16x4_t *)v262.i8, *(int16x4_t *)v260.i8);
    *(int16x4_t *)v258.i8 = vsub_s16(*(int16x4_t *)v246.i8, *(int16x4_t *)v258.i8);
    v287 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v252.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v257.i8, *(int16x4_t *)v217.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v280.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v258.i8, *(int16x4_t *)v217.i8), 0xEuLL);
    v288 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v257.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v252.i8, *(int16x4_t *)v217.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v258.i8, *(int16x4_t *)v217.i8), *(int16x4_t *)v280.i8, *(int16x4_t *)v217.i8), 0xEuLL);
    v144 = vaddq_s16(v283, v282);
    v145 = vaddq_s16(v288, v284);
    v146 = vaddq_s16(v287, v285);
    v147 = vaddq_s16(v286, v281);
    v148 = vsubq_s16(v286, v281);
    v149 = vsubq_s16(v285, v287);
    v150 = vsubq_s16(v284, v288);
    v151 = vsubq_s16(v283, v282);
  }
  else if (a4 == 1)
  {
    v289 = vdupq_n_s16(0xC7Cu);
    v290 = vdupq_n_s16(0xDC72u);
    v291 = vdupq_n_s16(0x3537u);
    v292 = vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v291.i8);
    v293 = vmull_high_s16(v34, v291);
    v294 = vdupq_n_s16(0x3EC5u);
    v295 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v289.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v294.i8);
    v296 = vmlsl_high_s16(vmull_high_s16(v30, v289), v35, v294);
    v297 = vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v291.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v290.i8);
    v298 = vmlal_high_s16(vmull_high_s16(v31, v291), v34, v290);
    v299 = vmlsl_s16(v292, *(int16x4_t *)v31.i8, *(int16x4_t *)v290.i8);
    v300 = vmlsl_high_s16(v293, v31, v290);
    v301 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v289.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v294.i8);
    v302 = vmlal_high_s16(vmull_high_s16(v35, v289), v30, v294);
    v303 = vrshrn_n_s32(v295, 0xEuLL);
    *(int16x4_t *)v289.i8 = vrshrn_n_s32(v296, 0xEuLL);
    *(int16x4_t *)v295.i8 = vrshrn_n_s32(v297, 0xEuLL);
    *(int16x4_t *)v290.i8 = vsub_s16(v303, *(int16x4_t *)v295.i8);
    v304 = vrshrn_high_n_s32(v303, v296, 0xEuLL);
    *(int16x4_t *)v294.i8 = vrshrn_n_s32(v298, 0xEuLL);
    v305 = vrshrn_high_n_s32(*(int16x4_t *)v295.i8, v298, 0xEuLL);
    *(int16x4_t *)v296.i8 = vrshrn_n_s32(v299, 0xEuLL);
    *(int16x4_t *)v298.i8 = vrshrn_n_s32(v300, 0xEuLL);
    *(int16x4_t *)v299.i8 = vrshrn_n_s32(v301, 0xEuLL);
    *(int16x4_t *)v301.i8 = vsub_s16(*(int16x4_t *)v299.i8, *(int16x4_t *)v296.i8);
    v306 = vrshrn_high_n_s32(*(int16x4_t *)v296.i8, v300, 0xEuLL);
    v307 = vrshrn_n_s32(v302, 0xEuLL);
    v308 = vrshrn_high_n_s32(*(int16x4_t *)v299.i8, v302, 0xEuLL);
    v309 = vdupq_n_s16(0x2D41u);
    v310 = vdupq_n_s16(0x187Eu);
    v311 = vdupq_n_s16(0x3B21u);
    v312 = vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v309.i8);
    v313 = vmlal_high_s16(vmull_high_s16(v29, v309), v28, v309);
    v314 = vmlsl_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v309.i8);
    v315 = vmlsl_high_s16(vmull_high_s16(v28, v309), v29, v309);
    v316 = vmlsl_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v311.i8);
    v317 = vmlsl_high_s16(vmull_high_s16(v32, v310), v33, v311);
    v318 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v311.i8);
    v319 = vmlal_high_s16(vmull_high_s16(v33, v310), v32, v311);
    v320 = vrshrn_high_n_s32(vrshrn_n_s32(v312, 0xEuLL), v313, 0xEuLL);
    v321 = vrshrn_high_n_s32(vrshrn_n_s32(v314, 0xEuLL), v315, 0xEuLL);
    v322 = vrshrn_high_n_s32(vrshrn_n_s32(v316, 0xEuLL), v317, 0xEuLL);
    v323 = vrshrn_high_n_s32(vrshrn_n_s32(v318, 0xEuLL), v319, 0xEuLL);
    v324 = vaddq_s16(v305, v304);
    v325 = vaddq_s16(v308, v306);
    v326 = vaddq_s16(v323, v320);
    v327 = vaddq_s16(v322, v321);
    v328 = vsubq_s16(v321, v322);
    v329 = vsubq_s16(v320, v323);
    *(int16x4_t *)v322.i8 = vsub_s16(v307, *(int16x4_t *)v298.i8);
    *(int16x4_t *)v289.i8 = vsub_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v294.i8);
    v330 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v301.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v290.i8, *(int16x4_t *)v309.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v322.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v289.i8, *(int16x4_t *)v309.i8), 0xEuLL);
    v331 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v290.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v301.i8, *(int16x4_t *)v309.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v289.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v322.i8, *(int16x4_t *)v309.i8), 0xEuLL);
    v332 = vaddq_s16(v326, v325);
    v333 = vaddq_s16(v331, v327);
    v334 = vaddq_s16(v330, v328);
    v335 = vaddq_s16(v329, v324);
    v336 = vsubq_s16(v329, v324);
    v337 = vsubq_s16(v328, v330);
    v338 = vsubq_s16(v327, v331);
    v339 = vsubq_s16(v326, v325);
    v340 = (int32x4_t)vtrn1q_s16(v332, v333);
    v341 = (int32x4_t)vtrn2q_s16(v332, v333);
    v342 = (int32x4_t)vtrn1q_s16(v334, v335);
    v343 = (int32x4_t)vtrn2q_s16(v334, v335);
    v344 = (int32x4_t)vtrn1q_s16(v336, v337);
    v345 = (int32x4_t)vtrn2q_s16(v336, v337);
    v346 = (int32x4_t)vtrn1q_s16(v338, v339);
    v347 = (int32x4_t)vtrn2q_s16(v338, v339);
    v348 = (int64x2_t)vtrn1q_s32(v340, v342);
    v349 = (int64x2_t)vtrn2q_s32(v340, v342);
    v350 = (int64x2_t)vtrn1q_s32(v341, v343);
    v351 = (int64x2_t)vtrn2q_s32(v341, v343);
    v352 = (int64x2_t)vtrn1q_s32(v344, v346);
    v353 = (int64x2_t)vtrn2q_s32(v344, v346);
    v354 = (int64x2_t)vtrn1q_s32(v345, v347);
    v355 = (int64x2_t)vtrn2q_s32(v345, v347);
    v356 = (int16x8_t)vzip1q_s64(v348, v352);
    v357 = (int16x8_t)vzip2q_s64(v348, v352);
    v358 = (int16x8_t)vzip1q_s64(v350, v354);
    v359 = (int16x8_t)vzip2q_s64(v350, v354);
    v360 = (int16x8_t)vzip1q_s64(v349, v353);
    v361 = (int16x8_t)vzip2q_s64(v349, v353);
    v362 = (int16x8_t)vzip1q_s64(v351, v355);
    v363 = (int16x8_t)vzip2q_s64(v351, v355);
    v364 = vdupq_n_s16(0x3FB1u);
    v365 = vdupq_n_s16(0x646u);
    v366 = vmull_s16(*(int16x4_t *)v363.i8, *(int16x4_t *)v365.i8);
    v367 = vmull_high_s16(v363, v365);
    v368 = vmlal_s16(vmull_s16(*(int16x4_t *)v356.i8, *(int16x4_t *)v365.i8), *(int16x4_t *)v363.i8, *(int16x4_t *)v364.i8);
    v369 = vmlal_high_s16(vmull_high_s16(v356, v365), v363, v364);
    v370 = vmlsl_s16(v366, *(int16x4_t *)v356.i8, *(int16x4_t *)v364.i8);
    v371 = vmlsl_high_s16(v367, v356, v364);
    v372 = vdupq_n_s16(0x3871u);
    v373 = vdupq_n_s16(0x1E2Bu);
    v374 = vmull_s16(*(int16x4_t *)v359.i8, *(int16x4_t *)v373.i8);
    v375 = vmull_high_s16(v359, v373);
    v376 = vmlal_s16(vmull_s16(*(int16x4_t *)v360.i8, *(int16x4_t *)v373.i8), *(int16x4_t *)v359.i8, *(int16x4_t *)v372.i8);
    v377 = vmlal_high_s16(vmull_high_s16(v360, v373), v359, v372);
    v378 = vmlsl_s16(v374, *(int16x4_t *)v360.i8, *(int16x4_t *)v372.i8);
    v379 = vdupq_n_s16(0x289Au);
    v380 = vmlsl_high_s16(v375, v360, v372);
    v381 = vdupq_n_s16(0x3179u);
    v382 = vmull_s16(*(int16x4_t *)v362.i8, *(int16x4_t *)v381.i8);
    v383 = vmull_high_s16(v362, v381);
    v384 = vmlal_s16(vmull_s16(*(int16x4_t *)v357.i8, *(int16x4_t *)v381.i8), *(int16x4_t *)v362.i8, *(int16x4_t *)v379.i8);
    v385 = vmlal_high_s16(vmull_high_s16(v357, v381), v362, v379);
    v386 = vmlsl_s16(v382, *(int16x4_t *)v357.i8, *(int16x4_t *)v379.i8);
    v387 = vmlsl_high_s16(v383, v357, v379);
    v388 = vdupq_n_s16(0x1294u);
    v389 = vdupq_n_s16(0x3D3Fu);
    v390 = vmull_s16(*(int16x4_t *)v358.i8, *(int16x4_t *)v389.i8);
    v391 = vmull_high_s16(v358, v389);
    v392 = vmlal_s16(vmull_s16(*(int16x4_t *)v361.i8, *(int16x4_t *)v389.i8), *(int16x4_t *)v358.i8, *(int16x4_t *)v388.i8);
    v393 = vmlal_high_s16(vmull_high_s16(v361, v389), v358, v388);
    v394 = vmlsl_s16(v390, *(int16x4_t *)v361.i8, *(int16x4_t *)v388.i8);
    v395 = vmlsl_high_s16(v391, v361, v388);
    v396 = vaddq_s32(v385, v369);
    *(int16x4_t *)v388.i8 = vrshrn_n_s32(vaddq_s32(v384, v368), 0xEuLL);
    *(int16x4_t *)v361.i8 = vrshrn_n_s32(v396, 0xEuLL);
    *(int16x4_t *)v313.i8 = vrshrn_n_s32(vaddq_s32(v392, v376), 0xEuLL);
    v397 = vsub_s16(*(int16x4_t *)v388.i8, *(int16x4_t *)v313.i8);
    v398 = vrshrn_high_n_s32(*(int16x4_t *)v388.i8, v396, 0xEuLL);
    v399 = vaddq_s32(v387, v371);
    *(int16x4_t *)v396.i8 = vrshrn_n_s32(vaddq_s32(v386, v370), 0xEuLL);
    v400 = vrshrn_n_s32(v399, 0xEuLL);
    v401 = vrshrn_n_s32(vaddq_s32(v394, v378), 0xEuLL);
    v402 = vsub_s16(*(int16x4_t *)v396.i8, v401);
    v403 = vrshrn_high_n_s32(*(int16x4_t *)v396.i8, v399, 0xEuLL);
    v404 = vaddq_s32(v393, v377);
    v405 = vrshrn_n_s32(v404, 0xEuLL);
    v406 = vrshrn_high_n_s32(*(int16x4_t *)v313.i8, v404, 0xEuLL);
    v407 = vaddq_s32(v395, v380);
    *(int16x4_t *)v368.i8 = vrshrn_n_s32(vsubq_s32(v368, v384), 0xEuLL);
    *(int16x4_t *)v369.i8 = vrshrn_n_s32(vsubq_s32(v369, v385), 0xEuLL);
    *(int16x4_t *)v370.i8 = vrshrn_n_s32(vsubq_s32(v370, v386), 0xEuLL);
    *(int16x4_t *)v371.i8 = vrshrn_n_s32(vsubq_s32(v371, v387), 0xEuLL);
    *(int16x4_t *)v376.i8 = vrshrn_n_s32(vsubq_s32(v376, v392), 0xEuLL);
    *(int16x4_t *)v377.i8 = vrshrn_n_s32(vsubq_s32(v377, v393), 0xEuLL);
    *(int16x4_t *)v378.i8 = vrshrn_n_s32(vsubq_s32(v378, v394), 0xEuLL);
    *(int16x4_t *)v380.i8 = vrshrn_n_s32(vsubq_s32(v380, v395), 0xEuLL);
    v408 = vmlal_s16(vmull_s16(*(int16x4_t *)v370.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v368.i8, *(int16x4_t *)v311.i8);
    v409 = vmlal_s16(vmull_s16(*(int16x4_t *)v371.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v369.i8, *(int16x4_t *)v311.i8);
    v410 = vmlsl_s16(vmull_s16(*(int16x4_t *)v368.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v370.i8, *(int16x4_t *)v311.i8);
    v411 = vmlsl_s16(vmull_s16(*(int16x4_t *)v369.i8, *(int16x4_t *)v310.i8), *(int16x4_t *)v371.i8, *(int16x4_t *)v311.i8);
    v412 = vmull_s16(*(int16x4_t *)v378.i8, *(int16x4_t *)v311.i8);
    v413 = vmull_s16(*(int16x4_t *)v380.i8, *(int16x4_t *)v311.i8);
    v414 = vmlal_s16(vmull_s16(*(int16x4_t *)v376.i8, *(int16x4_t *)v311.i8), *(int16x4_t *)v378.i8, *(int16x4_t *)v310.i8);
    v415 = vmlal_s16(vmull_s16(*(int16x4_t *)v377.i8, *(int16x4_t *)v311.i8), *(int16x4_t *)v380.i8, *(int16x4_t *)v310.i8);
    v416 = vmlsl_s16(v412, *(int16x4_t *)v376.i8, *(int16x4_t *)v310.i8);
    v417 = vmlsl_s16(v413, *(int16x4_t *)v377.i8, *(int16x4_t *)v310.i8);
    v144 = vaddq_s16(v406, v398);
    v418 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v416, v408), 0xEuLL), vaddq_s32(v417, v409), 0xEuLL);
    v150 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v414, v410), 0xEuLL), vaddq_s32(v415, v411), 0xEuLL);
    *(int16x4_t *)v310.i8 = vrshrn_n_s32(vsubq_s32(v408, v416), 0xEuLL);
    *(int16x4_t *)v417.i8 = vrshrn_n_s32(vsubq_s32(v409, v417), 0xEuLL);
    *(int16x4_t *)v376.i8 = vrshrn_n_s32(vsubq_s32(v410, v414), 0xEuLL);
    *(int16x4_t *)v415.i8 = vrshrn_n_s32(vsubq_s32(v411, v415), 0xEuLL);
    *(int16x4_t *)v377.i8 = vsub_s16(*(int16x4_t *)v361.i8, v405);
    *(int16x4_t *)v408.i8 = vsub_s16(v400, vrshrn_n_s32(v407, 0xEuLL));
    v148 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v397, *(int16x4_t *)v309.i8), v402, *(int16x4_t *)v309.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v377.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v408.i8, *(int16x4_t *)v309.i8), 0xEuLL);
    v419 = vmlsl_s16(vmull_s16(*(int16x4_t *)v310.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v376.i8, *(int16x4_t *)v309.i8);
    v146 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v376.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v310.i8, *(int16x4_t *)v309.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v415.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v417.i8, *(int16x4_t *)v309.i8), 0xEuLL);
    v420 = vrshrn_high_n_s32(vrshrn_n_s32(v419, 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v417.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v415.i8, *(int16x4_t *)v309.i8), 0xEuLL);
    v145 = vnegq_s16(v418);
    v147 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v402, *(int16x4_t *)v309.i8), v397, *(int16x4_t *)v309.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v408.i8, *(int16x4_t *)v309.i8), *(int16x4_t *)v377.i8, *(int16x4_t *)v309.i8), 0xEuLL));
    v149 = vnegq_s16(v420);
    v151 = vnegq_s16(vaddq_s16(v403, vrshrn_high_n_s32(v401, v407, 0xEuLL)));
  }
  else if (a4)
  {
    v421 = vdupq_n_s16(0x3FB1u);
    v422 = vdupq_n_s16(0x646u);
    v423 = vmlal_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v422.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v421.i8);
    v424 = vmlal_high_s16(vmull_high_s16(v28, v422), v35, v421);
    v425 = vmlsl_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v422.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v421.i8);
    v426 = vmlsl_high_s16(vmull_high_s16(v35, v422), v28, v421);
    v427 = vdupq_n_s16(0x3871u);
    v428 = vdupq_n_s16(0x1E2Bu);
    v429 = vmlal_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v428.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v427.i8);
    v430 = vmlal_high_s16(vmull_high_s16(v32, v428), v31, v427);
    v431 = vmlsl_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v428.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v427.i8);
    v432 = vdupq_n_s16(0x289Au);
    v433 = vdupq_n_s16(0x3179u);
    v434 = vmlsl_high_s16(vmull_high_s16(v31, v428), v32, v427);
    v435 = vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v432.i8);
    v436 = vmlal_high_s16(vmull_high_s16(v29, v433), v34, v432);
    v437 = vmlsl_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v432.i8);
    v438 = vmlsl_high_s16(vmull_high_s16(v34, v433), v29, v432);
    v439 = vdupq_n_s16(0x1294u);
    v440 = vdupq_n_s16(0x3D3Fu);
    v441 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v440.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v439.i8);
    v442 = vmlal_high_s16(vmull_high_s16(v33, v440), v30, v439);
    v443 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v440.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v439.i8);
    v444 = vmlsl_high_s16(vmull_high_s16(v30, v440), v33, v439);
    v445 = vaddq_s32(v436, v424);
    v446 = vrshrn_n_s32(vaddq_s32(v435, v423), 0xEuLL);
    v447 = vrshrn_n_s32(vaddq_s32(v441, v429), 0xEuLL);
    v448 = vsub_s16(v446, v447);
    v449 = vrshrn_high_n_s32(v446, v445, 0xEuLL);
    v450 = vsubq_s32(v423, v435);
    v451 = vaddq_s32(v438, v426);
    v452 = vrshrn_n_s32(vaddq_s32(v437, v425), 0xEuLL);
    v453 = vsubq_s32(v424, v436);
    *(int16x4_t *)v436.i8 = vrshrn_n_s32(vaddq_s32(v443, v431), 0xEuLL);
    v454 = vsubq_s32(v425, v437);
    *(int16x4_t *)v437.i8 = vsub_s16(v452, *(int16x4_t *)v436.i8);
    v455 = vrshrn_high_n_s32(v452, v451, 0xEuLL);
    v456 = vsubq_s32(v426, v438);
    v457 = vaddq_s32(v442, v430);
    v458 = vsubq_s32(v429, v441);
    v459 = vaddq_s32(v444, v434);
    *(int16x4_t *)v450.i8 = vrshrn_n_s32(v450, 0xEuLL);
    *(int16x4_t *)v453.i8 = vrshrn_n_s32(v453, 0xEuLL);
    *(int16x4_t *)v454.i8 = vrshrn_n_s32(v454, 0xEuLL);
    *(int16x4_t *)v441.i8 = vrshrn_n_s32(v456, 0xEuLL);
    v460 = vsubq_s32(v430, v442);
    *(int16x4_t *)v430.i8 = vrshrn_n_s32(v458, 0xEuLL);
    *(int16x4_t *)v458.i8 = vrshrn_n_s32(v460, 0xEuLL);
    v461 = vsubq_s32(v431, v443);
    v462 = vsubq_s32(v434, v444);
    *(int16x4_t *)v434.i8 = vrshrn_n_s32(v461, 0xEuLL);
    *(int16x4_t *)v443.i8 = vdup_n_s16(0x3B21u);
    *(int16x4_t *)v461.i8 = vdup_n_s16(0x187Eu);
    *(int16x4_t *)v462.i8 = vrshrn_n_s32(v462, 0xEuLL);
    v463 = vmlal_s16(vmull_s16(*(int16x4_t *)v454.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v450.i8, *(int16x4_t *)v443.i8);
    v464 = vmlsl_s16(vmull_s16(*(int16x4_t *)v450.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v454.i8, *(int16x4_t *)v443.i8);
    v465 = vmlal_s16(vmull_s16(*(int16x4_t *)v441.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v453.i8, *(int16x4_t *)v443.i8);
    v466 = vmlsl_s16(vmull_s16(*(int16x4_t *)v453.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v441.i8, *(int16x4_t *)v443.i8);
    v467 = vmlal_s16(vmull_s16(*(int16x4_t *)v430.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v434.i8, *(int16x4_t *)v461.i8);
    v468 = vmlsl_s16(vmull_s16(*(int16x4_t *)v434.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v430.i8, *(int16x4_t *)v461.i8);
    v469 = vmlal_s16(vmull_s16(*(int16x4_t *)v458.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v462.i8, *(int16x4_t *)v461.i8);
    v470 = vmlsl_s16(vmull_s16(*(int16x4_t *)v462.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v458.i8, *(int16x4_t *)v461.i8);
    v471 = vaddq_s16(vrshrn_high_n_s32(v447, v457, 0xEuLL), v449);
    v472 = vaddq_s16(v455, vrshrn_high_n_s32(*(int16x4_t *)v436.i8, v459, 0xEuLL));
    v473 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v468, v463), 0xEuLL), vaddq_s32(v470, v465), 0xEuLL);
    v474 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v467, v464), 0xEuLL), vaddq_s32(v469, v466), 0xEuLL);
    v475 = vsubq_s32(v465, v470);
    *(int16x4_t *)v470.i8 = vrshrn_n_s32(v445, 0xEuLL);
    *(int16x4_t *)v468.i8 = vrshrn_n_s32(vsubq_s32(v463, v468), 0xEuLL);
    *(int16x4_t *)v475.i8 = vrshrn_n_s32(v475, 0xEuLL);
    v476 = vsubq_s32(v464, v467);
    v477 = vsubq_s32(v466, v469);
    *(int16x4_t *)v466.i8 = vrshrn_n_s32(v476, 0xEuLL);
    *(int16x4_t *)v477.i8 = vrshrn_n_s32(v477, 0xEuLL);
    *(int16x4_t *)v476.i8 = vdup_n_s16(0x2D41u);
    *(int16x4_t *)v457.i8 = vsub_s16(*(int16x4_t *)v470.i8, vrshrn_n_s32(v457, 0xEuLL));
    *(int16x4_t *)v459.i8 = vsub_s16(vrshrn_n_s32(v451, 0xEuLL), vrshrn_n_s32(v459, 0xEuLL));
    v478 = vmlsl_s16(vmull_s16(*(int16x4_t *)v457.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v459.i8, *(int16x4_t *)v476.i8);
    v479 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v437.i8, *(int16x4_t *)v476.i8), v448, *(int16x4_t *)v476.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v459.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v457.i8, *(int16x4_t *)v476.i8), 0xEuLL);
    v480 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(v448, *(int16x4_t *)v476.i8), *(int16x4_t *)v437.i8, *(int16x4_t *)v476.i8), 0xEuLL), v478, 0xEuLL);
    v481 = vmlsl_s16(vmull_s16(*(int16x4_t *)v475.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v477.i8, *(int16x4_t *)v476.i8);
    v482 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v466.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v468.i8, *(int16x4_t *)v476.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v477.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v475.i8, *(int16x4_t *)v476.i8), 0xEuLL);
    v483 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v468.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v466.i8, *(int16x4_t *)v476.i8), 0xEuLL), v481, 0xEuLL);
    v484 = vnegq_s16(v473);
    v485 = vnegq_s16(v479);
    v486 = vnegq_s16(v483);
    v487 = vnegq_s16(v472);
    v488 = (int32x4_t)vtrn1q_s16(v471, v484);
    v489 = (int32x4_t)vtrn2q_s16(v471, v484);
    v490 = (int32x4_t)vtrn1q_s16(v482, v485);
    v491 = (int32x4_t)vtrn2q_s16(v482, v485);
    v492 = (int32x4_t)vtrn1q_s16(v480, v486);
    v493 = (int32x4_t)vtrn2q_s16(v480, v486);
    v494 = (int32x4_t)vtrn1q_s16(v474, v487);
    v495 = (int32x4_t)vtrn2q_s16(v474, v487);
    v496 = (int64x2_t)vtrn1q_s32(v488, v490);
    v497 = (int64x2_t)vtrn2q_s32(v488, v490);
    v498 = (int64x2_t)vtrn1q_s32(v489, v491);
    v499 = (int64x2_t)vtrn2q_s32(v489, v491);
    v500 = (int64x2_t)vtrn1q_s32(v492, v494);
    v501 = (int64x2_t)vtrn2q_s32(v492, v494);
    v502 = (int64x2_t)vtrn1q_s32(v493, v495);
    v503 = (int64x2_t)vtrn2q_s32(v493, v495);
    v504 = (int16x8_t)vzip1q_s64(v496, v500);
    v505 = (int16x8_t)vzip2q_s64(v496, v500);
    v506 = (int16x8_t)vzip1q_s64(v498, v502);
    v507 = (int16x8_t)vzip2q_s64(v498, v502);
    v508 = (int16x8_t)vzip1q_s64(v497, v501);
    v509 = (int16x8_t)vzip2q_s64(v497, v501);
    v510 = (int16x8_t)vzip1q_s64(v499, v503);
    v511 = (int16x8_t)vzip2q_s64(v499, v503);
    v512 = vmlal_s16(vmull_s16(*(int16x4_t *)v504.i8, *(int16x4_t *)v422.i8), *(int16x4_t *)v511.i8, *(int16x4_t *)v421.i8);
    v513 = vmlal_high_s16(vmull_high_s16(v504, v422), v511, v421);
    v514 = vmlsl_s16(vmull_s16(*(int16x4_t *)v511.i8, *(int16x4_t *)v422.i8), *(int16x4_t *)v504.i8, *(int16x4_t *)v421.i8);
    v515 = vmlsl_high_s16(vmull_high_s16(v511, v422), v504, v421);
    v516 = vmlal_s16(vmull_s16(*(int16x4_t *)v508.i8, *(int16x4_t *)v428.i8), *(int16x4_t *)v507.i8, *(int16x4_t *)v427.i8);
    v517 = vmlal_high_s16(vmull_high_s16(v508, v428), v507, v427);
    v518 = vmlsl_s16(vmull_s16(*(int16x4_t *)v507.i8, *(int16x4_t *)v428.i8), *(int16x4_t *)v508.i8, *(int16x4_t *)v427.i8);
    v519 = vmlsl_high_s16(vmull_high_s16(v507, v428), v508, v427);
    v520 = vmull_s16(*(int16x4_t *)v510.i8, *(int16x4_t *)v433.i8);
    v521 = vmull_high_s16(v510, v433);
    v522 = vmlal_s16(vmull_s16(*(int16x4_t *)v505.i8, *(int16x4_t *)v433.i8), *(int16x4_t *)v510.i8, *(int16x4_t *)v432.i8);
    v523 = vmlal_high_s16(vmull_high_s16(v505, v433), v510, v432);
    v524 = vmlsl_s16(v520, *(int16x4_t *)v505.i8, *(int16x4_t *)v432.i8);
    v525 = vmlsl_high_s16(v521, v505, v432);
    v526 = vmlal_s16(vmull_s16(*(int16x4_t *)v509.i8, *(int16x4_t *)v440.i8), *(int16x4_t *)v506.i8, *(int16x4_t *)v439.i8);
    v527 = vmlal_high_s16(vmull_high_s16(v509, v440), v506, v439);
    v528 = vmlsl_s16(vmull_s16(*(int16x4_t *)v506.i8, *(int16x4_t *)v440.i8), *(int16x4_t *)v509.i8, *(int16x4_t *)v439.i8);
    v529 = vmlsl_high_s16(vmull_high_s16(v506, v440), v509, v439);
    v530 = vaddq_s32(v523, v513);
    *(int16x4_t *)v440.i8 = vrshrn_n_s32(vaddq_s32(v522, v512), 0xEuLL);
    v531 = vaddq_s32(v525, v515);
    *(int16x4_t *)v421.i8 = vrshrn_n_s32(vaddq_s32(v524, v514), 0xEuLL);
    v532 = vsubq_s32(v512, v522);
    v533 = vaddq_s32(v527, v517);
    *(int16x4_t *)v432.i8 = vrshrn_n_s32(vaddq_s32(v526, v516), 0xEuLL);
    v534 = vsubq_s32(v513, v523);
    v535 = vsubq_s32(v514, v524);
    v536 = vaddq_s32(v529, v519);
    *(int16x4_t *)v523.i8 = vrshrn_n_s32(vaddq_s32(v528, v518), 0xEuLL);
    v537 = vsubq_s32(v516, v526);
    *(int16x4_t *)v532.i8 = vrshrn_n_s32(v532, 0xEuLL);
    *(int16x4_t *)v534.i8 = vrshrn_n_s32(v534, 0xEuLL);
    *(int16x4_t *)v509.i8 = vrshrn_n_s32(v535, 0xEuLL);
    *(int16x4_t *)v526.i8 = vrshrn_n_s32(vsubq_s32(v515, v525), 0xEuLL);
    v538 = vsubq_s32(v517, v527);
    *(int16x4_t *)v517.i8 = vrshrn_n_s32(v537, 0xEuLL);
    *(int16x4_t *)v527.i8 = vrshrn_n_s32(v538, 0xEuLL);
    *(int16x4_t *)v528.i8 = vrshrn_n_s32(vsubq_s32(v518, v528), 0xEuLL);
    *(int16x4_t *)v529.i8 = vrshrn_n_s32(vsubq_s32(v519, v529), 0xEuLL);
    v539 = vmlal_s16(vmull_s16(*(int16x4_t *)v509.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v532.i8, *(int16x4_t *)v443.i8);
    v540 = vmlal_s16(vmull_s16(*(int16x4_t *)v526.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v534.i8, *(int16x4_t *)v443.i8);
    v541 = vmlsl_s16(vmull_s16(*(int16x4_t *)v532.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v509.i8, *(int16x4_t *)v443.i8);
    v542 = vmlsl_s16(vmull_s16(*(int16x4_t *)v534.i8, *(int16x4_t *)v461.i8), *(int16x4_t *)v526.i8, *(int16x4_t *)v443.i8);
    v543 = vmull_s16(*(int16x4_t *)v528.i8, *(int16x4_t *)v443.i8);
    v544 = vmull_s16(*(int16x4_t *)v529.i8, *(int16x4_t *)v443.i8);
    v545 = vmlal_s16(vmull_s16(*(int16x4_t *)v517.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v528.i8, *(int16x4_t *)v461.i8);
    v546 = vmlal_s16(vmull_s16(*(int16x4_t *)v527.i8, *(int16x4_t *)v443.i8), *(int16x4_t *)v529.i8, *(int16x4_t *)v461.i8);
    v547 = vmlsl_s16(v543, *(int16x4_t *)v517.i8, *(int16x4_t *)v461.i8);
    v548 = vmlsl_s16(v544, *(int16x4_t *)v527.i8, *(int16x4_t *)v461.i8);
    *(int16x4_t *)v461.i8 = vrshrn_n_s32(vsubq_s32(v539, v547), 0xEuLL);
    *(int16x4_t *)v517.i8 = vrshrn_n_s32(vsubq_s32(v540, v548), 0xEuLL);
    *(int16x4_t *)v528.i8 = vrshrn_n_s32(vsubq_s32(v541, v545), 0xEuLL);
    *(int16x4_t *)v509.i8 = vrshrn_n_s32(vsubq_s32(v542, v546), 0xEuLL);
    *(int16x4_t *)v529.i8 = vsub_s16(*(int16x4_t *)v440.i8, *(int16x4_t *)v432.i8);
    *(int16x4_t *)v511.i8 = vsub_s16(vrshrn_n_s32(v530, 0xEuLL), vrshrn_n_s32(v533, 0xEuLL));
    *(int16x4_t *)v506.i8 = vsub_s16(*(int16x4_t *)v421.i8, *(int16x4_t *)v523.i8);
    *(int16x4_t *)v505.i8 = vsub_s16(vrshrn_n_s32(v531, 0xEuLL), vrshrn_n_s32(v536, 0xEuLL));
    v549 = vmlal_s16(vmull_s16(*(int16x4_t *)v506.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v529.i8, *(int16x4_t *)v476.i8);
    v550 = vmlsl_s16(vmull_s16(*(int16x4_t *)v529.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v506.i8, *(int16x4_t *)v476.i8);
    v551 = vmlal_s16(vmull_s16(*(int16x4_t *)v505.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v511.i8, *(int16x4_t *)v476.i8);
    v552 = vmlsl_s16(vmull_s16(*(int16x4_t *)v511.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v505.i8, *(int16x4_t *)v476.i8);
    v553 = vmlal_s16(vmull_s16(*(int16x4_t *)v528.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v461.i8, *(int16x4_t *)v476.i8);
    v554 = vmlsl_s16(vmull_s16(*(int16x4_t *)v461.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v528.i8, *(int16x4_t *)v476.i8);
    v555 = vmlal_s16(vmull_s16(*(int16x4_t *)v509.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v517.i8, *(int16x4_t *)v476.i8);
    v556 = vmlsl_s16(vmull_s16(*(int16x4_t *)v517.i8, *(int16x4_t *)v476.i8), *(int16x4_t *)v509.i8, *(int16x4_t *)v476.i8);
    v144 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v432.i8, v533, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v440.i8, v530, 0xEuLL));
    v557 = vaddq_s16(vrshrn_high_n_s32(*(int16x4_t *)v421.i8, v531, 0xEuLL), vrshrn_high_n_s32(*(int16x4_t *)v523.i8, v536, 0xEuLL));
    v150 = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v545, v541), 0xEuLL), vaddq_s32(v546, v542), 0xEuLL);
    v148 = vrshrn_high_n_s32(vrshrn_n_s32(v550, 0xEuLL), v552, 0xEuLL);
    v146 = vrshrn_high_n_s32(vrshrn_n_s32(v553, 0xEuLL), v555, 0xEuLL);
    v145 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v547, v539), 0xEuLL), vaddq_s32(v548, v540), 0xEuLL));
    v147 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v549, 0xEuLL), v551, 0xEuLL));
    v149 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v554, 0xEuLL), v556, 0xEuLL));
    v151 = vnegq_s16(v557);
  }
  else
  {
    v36 = vdupq_n_s16(0xC7Cu);
    v37 = vdupq_n_s16(0xDC72u);
    v38 = vdupq_n_s16(0x3537u);
    v39 = vdupq_n_s16(0x3EC5u);
    v40 = vmlsl_s16(vmull_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v39.i8);
    v41 = vmlsl_high_s16(vmull_high_s16(v30, v36), v35, v39);
    v42 = vmlal_s16(vmull_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v37.i8);
    v43 = vmlal_high_s16(vmull_high_s16(v31, v38), v34, v37);
    v44 = vmlsl_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v31.i8, *(int16x4_t *)v37.i8);
    v45 = vmlsl_high_s16(vmull_high_s16(v34, v38), v31, v37);
    v46 = vmlal_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v30.i8, *(int16x4_t *)v39.i8);
    v47 = vmlal_high_s16(vmull_high_s16(v35, v36), v30, v39);
    v48 = vrshrn_n_s32(v40, 0xEuLL);
    *(int16x4_t *)v40.i8 = vrshrn_n_s32(v41, 0xEuLL);
    *(int16x4_t *)v42.i8 = vrshrn_n_s32(v42, 0xEuLL);
    v49 = vsub_s16(v48, *(int16x4_t *)v42.i8);
    v50 = vrshrn_high_n_s32(v48, v41, 0xEuLL);
    *(int16x4_t *)v41.i8 = vrshrn_n_s32(v43, 0xEuLL);
    v51 = vrshrn_high_n_s32(*(int16x4_t *)v42.i8, v43, 0xEuLL);
    v52 = vrshrn_n_s32(v44, 0xEuLL);
    *(int16x4_t *)v44.i8 = vrshrn_n_s32(v45, 0xEuLL);
    *(int16x4_t *)v46.i8 = vrshrn_n_s32(v46, 0xEuLL);
    *(int16x4_t *)v43.i8 = vsub_s16(*(int16x4_t *)v46.i8, v52);
    v53 = vrshrn_high_n_s32(v52, v45, 0xEuLL);
    *(int16x4_t *)v45.i8 = vrshrn_n_s32(v47, 0xEuLL);
    v54 = vrshrn_high_n_s32(*(int16x4_t *)v46.i8, v47, 0xEuLL);
    v55 = vdupq_n_s16(0x2D41u);
    v56 = vdupq_n_s16(0x187Eu);
    v57 = vdupq_n_s16(0x3B21u);
    v58 = vmlal_s16(vmull_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v55.i8);
    v59 = vmlal_high_s16(vmull_high_s16(v29, v55), v28, v55);
    v60 = vmlsl_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v29.i8, *(int16x4_t *)v55.i8);
    v61 = vmlsl_high_s16(vmull_high_s16(v28, v55), v29, v55);
    v62 = vmlsl_s16(vmull_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v33.i8, *(int16x4_t *)v57.i8);
    v63 = vmlsl_high_s16(vmull_high_s16(v32, v56), v33, v57);
    v64 = vmlal_s16(vmull_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v32.i8, *(int16x4_t *)v57.i8);
    v65 = vmlal_high_s16(vmull_high_s16(v33, v56), v32, v57);
    v66 = vrshrn_high_n_s32(vrshrn_n_s32(v58, 0xEuLL), v59, 0xEuLL);
    v67 = vrshrn_high_n_s32(vrshrn_n_s32(v60, 0xEuLL), v61, 0xEuLL);
    v68 = vrshrn_high_n_s32(vrshrn_n_s32(v62, 0xEuLL), v63, 0xEuLL);
    v69 = vrshrn_high_n_s32(vrshrn_n_s32(v64, 0xEuLL), v65, 0xEuLL);
    v70 = vaddq_s16(v51, v50);
    v71 = vaddq_s16(v54, v53);
    v72 = vaddq_s16(v69, v66);
    v73 = vaddq_s16(v68, v67);
    v74 = vsubq_s16(v67, v68);
    v75 = vsubq_s16(v66, v69);
    *(int16x4_t *)v45.i8 = vsub_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v44.i8);
    *(int16x4_t *)v41.i8 = vsub_s16(*(int16x4_t *)v40.i8, *(int16x4_t *)v41.i8);
    v76 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v43.i8, *(int16x4_t *)v55.i8), v49, *(int16x4_t *)v55.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v41.i8, *(int16x4_t *)v55.i8), 0xEuLL);
    v77 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(v49, *(int16x4_t *)v55.i8), *(int16x4_t *)v43.i8, *(int16x4_t *)v55.i8), 0xEuLL), vmlal_s16(vmull_s16(*(int16x4_t *)v41.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v45.i8, *(int16x4_t *)v55.i8), 0xEuLL);
    v78 = vaddq_s16(v72, v71);
    v79 = vaddq_s16(v77, v73);
    v80 = vaddq_s16(v76, v74);
    v81 = vaddq_s16(v75, v70);
    v82 = vsubq_s16(v75, v70);
    v83 = vsubq_s16(v74, v76);
    v84 = vsubq_s16(v73, v77);
    v85 = vsubq_s16(v72, v71);
    v86 = (int32x4_t)vtrn1q_s16(v78, v79);
    v87 = (int32x4_t)vtrn2q_s16(v78, v79);
    v88 = (int32x4_t)vtrn1q_s16(v80, v81);
    v89 = (int32x4_t)vtrn2q_s16(v80, v81);
    v90 = (int32x4_t)vtrn1q_s16(v82, v83);
    v91 = (int32x4_t)vtrn2q_s16(v82, v83);
    v92 = (int32x4_t)vtrn1q_s16(v84, v85);
    v93 = (int32x4_t)vtrn2q_s16(v84, v85);
    v94 = (int64x2_t)vtrn1q_s32(v86, v88);
    v95 = (int64x2_t)vtrn2q_s32(v86, v88);
    v96 = (int64x2_t)vtrn1q_s32(v87, v89);
    v97 = (int64x2_t)vtrn2q_s32(v87, v89);
    v98 = (int64x2_t)vtrn1q_s32(v90, v92);
    v99 = (int64x2_t)vtrn2q_s32(v90, v92);
    v100 = (int64x2_t)vtrn1q_s32(v91, v93);
    v101 = (int64x2_t)vtrn2q_s32(v91, v93);
    v102 = (int16x8_t)vzip1q_s64(v94, v98);
    v103 = (int16x8_t)vzip2q_s64(v94, v98);
    v104 = (int16x8_t)vzip1q_s64(v96, v100);
    v105 = (int16x8_t)vzip2q_s64(v96, v100);
    v106 = (int16x8_t)vzip1q_s64(v95, v99);
    v107 = (int16x8_t)vzip2q_s64(v95, v99);
    v108 = (int16x8_t)vzip1q_s64(v97, v101);
    v109 = (int16x8_t)vzip2q_s64(v97, v101);
    v110 = vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v38.i8);
    v111 = vmull_high_s16(v108, v38);
    v112 = vmlsl_high_s16(vmull_high_s16(v104, v36), v109, v39);
    v113 = vmlal_s16(vmull_s16(*(int16x4_t *)v105.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v108.i8, *(int16x4_t *)v37.i8);
    v114 = vmlal_high_s16(vmull_high_s16(v105, v38), v108, v37);
    v115 = vmlsl_s16(v110, *(int16x4_t *)v105.i8, *(int16x4_t *)v37.i8);
    v116 = vmlsl_high_s16(v111, v105, v37);
    v117 = vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v39.i8);
    v118 = vmlal_high_s16(vmull_high_s16(v109, v36), v104, v39);
    *(int16x4_t *)v39.i8 = vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v36.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v39.i8), 0xEuLL);
    *(int16x4_t *)v36.i8 = vrshrn_n_s32(v112, 0xEuLL);
    *(int16x4_t *)v108.i8 = vrshrn_n_s32(v113, 0xEuLL);
    *(int16x4_t *)v104.i8 = vsub_s16(*(int16x4_t *)v39.i8, *(int16x4_t *)v108.i8);
    v119 = vrshrn_high_n_s32(*(int16x4_t *)v39.i8, v112, 0xEuLL);
    *(int16x4_t *)v112.i8 = vrshrn_n_s32(v114, 0xEuLL);
    v120 = vrshrn_high_n_s32(*(int16x4_t *)v108.i8, v114, 0xEuLL);
    *(int16x4_t *)v114.i8 = vrshrn_n_s32(v115, 0xEuLL);
    *(int16x4_t *)v115.i8 = vrshrn_n_s32(v116, 0xEuLL);
    *(int16x4_t *)v117.i8 = vrshrn_n_s32(v117, 0xEuLL);
    *(int16x4_t *)v109.i8 = vsub_s16(*(int16x4_t *)v117.i8, *(int16x4_t *)v114.i8);
    v121 = vrshrn_high_n_s32(*(int16x4_t *)v114.i8, v116, 0xEuLL);
    *(int16x4_t *)v116.i8 = vrshrn_n_s32(v118, 0xEuLL);
    v122 = vrshrn_high_n_s32(*(int16x4_t *)v117.i8, v118, 0xEuLL);
    v123 = vmlal_s16(vmull_s16(*(int16x4_t *)v103.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v102.i8, *(int16x4_t *)v55.i8);
    v124 = vmlal_high_s16(vmull_high_s16(v103, v55), v102, v55);
    v125 = vmlsl_s16(vmull_s16(*(int16x4_t *)v102.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v103.i8, *(int16x4_t *)v55.i8);
    v126 = vmlsl_high_s16(vmull_high_s16(v102, v55), v103, v55);
    v127 = vmlsl_s16(vmull_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v107.i8, *(int16x4_t *)v57.i8);
    v128 = vmlsl_high_s16(vmull_high_s16(v106, v56), v107, v57);
    v129 = vmlal_s16(vmull_s16(*(int16x4_t *)v107.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v106.i8, *(int16x4_t *)v57.i8);
    v130 = vmlal_high_s16(vmull_high_s16(v107, v56), v106, v57);
    v131 = vrshrn_high_n_s32(vrshrn_n_s32(v123, 0xEuLL), v124, 0xEuLL);
    v132 = vrshrn_high_n_s32(vrshrn_n_s32(v125, 0xEuLL), v126, 0xEuLL);
    v133 = vrshrn_high_n_s32(vrshrn_n_s32(v127, 0xEuLL), v128, 0xEuLL);
    v134 = vrshrn_high_n_s32(vrshrn_n_s32(v129, 0xEuLL), v130, 0xEuLL);
    v135 = vaddq_s16(v120, v119);
    v136 = vaddq_s16(v122, v121);
    v137 = vaddq_s16(v134, v131);
    v138 = vaddq_s16(v133, v132);
    v139 = vsubq_s16(v132, v133);
    v140 = vsubq_s16(v131, v134);
    *(int16x4_t *)v122.i8 = vsub_s16(*(int16x4_t *)v116.i8, *(int16x4_t *)v115.i8);
    *(int16x4_t *)v36.i8 = vsub_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v112.i8);
    v141 = vmlal_s16(vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v122.i8, *(int16x4_t *)v55.i8);
    v142 = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v104.i8, *(int16x4_t *)v55.i8), 0xEuLL), vmlsl_s16(vmull_s16(*(int16x4_t *)v122.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v36.i8, *(int16x4_t *)v55.i8), 0xEuLL);
    v143 = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v104.i8, *(int16x4_t *)v55.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v55.i8), 0xEuLL), v141, 0xEuLL);
    v144 = vaddq_s16(v137, v136);
    v145 = vaddq_s16(v143, v138);
    v146 = vaddq_s16(v142, v139);
    v147 = vaddq_s16(v140, v135);
    v148 = vsubq_s16(v140, v135);
    v149 = vsubq_s16(v139, v142);
    v150 = vsubq_s16(v138, v143);
    v151 = vsubq_s16(v137, v136);
  }
  *a2 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*a2), v144, 5uLL));
  v558 = (uint8x8_t *)((char *)a2 + a3);
  *v558 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v558), v145, 5uLL));
  v559 = (uint8x8_t *)((char *)v558 + a3);
  *v559 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v559), v146, 5uLL));
  v560 = (uint8x8_t *)((char *)v559 + a3);
  *v560 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v560), v147, 5uLL));
  v561 = (uint8x8_t *)((char *)v560 + a3);
  *v561 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v561), v148, 5uLL));
  v562 = (uint8x8_t *)((char *)v561 + a3);
  *v562 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v562), v149, 5uLL));
  v563 = (uint8x8_t *)((char *)v562 + a3);
  *v563 = (uint8x8_t)vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*v563), v150, 5uLL));
  result = vqmovun_s16(vrsraq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v563 + a3)), v151, 5uLL));
  *(int8x8_t *)((char *)v563 + a3) = result;
  return result;
}

_QWORD *vp9_lookahead_init(int a1, int a2, int a3, int a4, int a5, int a6)
{
  _DWORD *v12;
  _QWORD *v13;
  int v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;

  v12 = malloc_type_calloc(1uLL, 0x20uLL, 0x1020040B07198D1uLL);
  v13 = v12;
  if (v12)
  {
    if (a6 >= 25)
      v14 = 25;
    else
      v14 = a6;
    if (v14 <= 1)
      v14 = 1;
    v15 = (v14 + 1);
    *v12 = v15;
    v16 = malloc_type_calloc(v15, 0xC0uLL, 0x1010040F4874D52uLL);
    v13[3] = v16;
    *((_DWORD *)v13 + 4) = 0;
    if (v16)
    {
      v17 = (uint64_t)v16;
      v18 = 0;
      while (1)
      {
        if (*(_QWORD *)(v17 + 96))
        {
          v19 = *(_QWORD *)(v17 + 88);
          if (v19)
            free(*(void **)(v19 - 8));
        }
        *(_OWORD *)(v17 + 128) = 0u;
        *(_OWORD *)(v17 + 144) = 0u;
        *(_OWORD *)(v17 + 96) = 0u;
        *(_OWORD *)(v17 + 112) = 0u;
        *(_OWORD *)(v17 + 64) = 0u;
        *(_OWORD *)(v17 + 80) = 0u;
        *(_OWORD *)(v17 + 32) = 0u;
        *(_OWORD *)(v17 + 48) = 0u;
        *(_OWORD *)v17 = 0u;
        *(_OWORD *)(v17 + 16) = 0u;
        if (vpx_realloc_frame_buffer(v17, a1, a2, a3, a4, a5, 160, 0, 0, 0, 0))
          break;
        if (!--v15)
          return v13;
        ++v18;
        v20 = v13[3];
        v17 = v20 + 192 * v18;
        if (!v20)
          goto LABEL_27;
      }
      v21 = (void *)v13[3];
      if (v21)
      {
        v22 = *(_DWORD *)v13;
        if (*(int *)v13 >= 1)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0uLL;
          do
          {
            v26 = v13[3];
            if (v26)
            {
              v27 = (_OWORD *)(v26 + v23);
              if (*(_QWORD *)(v26 + v23 + 96))
              {
                v28 = *(_QWORD *)(v26 + v23 + 88);
                if (v28)
                {
                  free(*(void **)(v28 - 8));
                  v25 = 0uLL;
                }
              }
              v27[8] = v25;
              v27[9] = v25;
              v27[6] = v25;
              v27[7] = v25;
              v27[4] = v25;
              v27[5] = v25;
              v27[2] = v25;
              v27[3] = v25;
              *v27 = v25;
              v27[1] = v25;
              v22 = *(_DWORD *)v13;
            }
            ++v24;
            v23 += 192;
          }
          while (v24 < v22);
          v21 = (void *)v13[3];
        }
        free(v21);
      }
    }
LABEL_27:
    free(v13);
    return 0;
  }
  return v13;
}

uint64_t vp9_lookahead_push(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v6;
  int v7;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  uint64_t result;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v6 = *a1;
  v7 = a1[1];
  if (v7 + 2 > *a1)
    return 1;
  v14 = *(_DWORD *)(a2 + 8);
  v15 = *(_DWORD *)(a2 + 12);
  v17 = *(_DWORD *)(a2 + 28);
  v16 = *(_DWORD *)(a2 + 32);
  v18 = *(_DWORD *)(a2 + 120);
  v19 = *(_DWORD *)(a2 + 124);
  a1[1] = v7 + 1;
  v20 = *((_QWORD *)a1 + 3);
  v21 = a1[3];
  if (v21 + 1 < v6)
    v6 = 0;
  v22 = v20 + 192 * v21;
  a1[3] = v21 + 1 - v6;
  v23 = *(_DWORD *)(v22 + 8);
  if (v14 == v23 && v15 == *(_DWORD *)(v22 + 12) && v17 == *(_DWORD *)(v22 + 28))
  {
    v24 = v16 != *(_DWORD *)(v22 + 32);
    if (v14 > v23)
      goto LABEL_13;
  }
  else
  {
    v24 = 1;
    if (v14 > v23)
      goto LABEL_13;
  }
  if (v15 <= *(_DWORD *)(v22 + 12) && v17 <= *(_DWORD *)(v22 + 28) && v16 <= *(_DWORD *)(v22 + 32))
  {
    if (v24)
    {
      *(_QWORD *)(v22 + 20) = *(_QWORD *)(a2 + 20);
      *(_OWORD *)v22 = *(_OWORD *)a2;
      *(_QWORD *)(v22 + 28) = *(_QWORD *)(a2 + 28);
      *(_QWORD *)(v22 + 120) = *(_QWORD *)(a2 + 120);
    }
    goto LABEL_19;
  }
LABEL_13:
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  if (vpx_realloc_frame_buffer((uint64_t)&v36, v14, v15, v18, v19, a5, 160, 0, 0, 0, 0))
    return 1;
  if (*(_QWORD *)(v22 + 96))
  {
    v26 = *(_QWORD *)(v22 + 88);
    if (v26)
      free(*(void **)(v26 - 8));
  }
  *(_OWORD *)(v22 + 128) = 0u;
  *(_OWORD *)(v22 + 144) = 0u;
  *(_OWORD *)(v22 + 96) = 0u;
  *(_OWORD *)(v22 + 112) = 0u;
  *(_OWORD *)(v22 + 64) = 0u;
  *(_OWORD *)(v22 + 80) = 0u;
  *(_OWORD *)(v22 + 32) = 0u;
  *(_OWORD *)(v22 + 48) = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  v27 = v37;
  *(_OWORD *)v22 = v36;
  *(_OWORD *)(v22 + 16) = v27;
  v28 = v38;
  v29 = v39;
  v30 = v41;
  *(_OWORD *)(v22 + 64) = v40;
  *(_OWORD *)(v22 + 80) = v30;
  *(_OWORD *)(v22 + 32) = v28;
  *(_OWORD *)(v22 + 48) = v29;
  v31 = v42;
  v32 = v43;
  v33 = v45;
  *(_OWORD *)(v22 + 128) = v44;
  *(_OWORD *)(v22 + 144) = v33;
  *(_OWORD *)(v22 + 96) = v31;
  *(_OWORD *)(v22 + 112) = v32;
LABEL_19:
  vp9_copy_and_extend_frame(a2, v20 + 192 * v21);
  result = 0;
  v34 = v20 + 192 * v21;
  *(_QWORD *)(v34 + 160) = a3;
  *(_QWORD *)(v34 + 168) = a4;
  *(_QWORD *)(v34 + 184) = a6;
  v35 = a1[4];
  *(_DWORD *)(v34 + 176) = v35;
  a1[4] = v35 + 1;
  return result;
}

uint64_t update_sharpness(uint64_t result, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a2 > 4;
  if (a2 > 0)
    ++v2;
  v3 = 0;
  if (a2 <= 0)
  {
    v9 = (uint64_t *)(result + 16);
    v10 = 4;
    do
    {
      v11 = v3 >> v2;
      if ((int)(v3 >> v2) <= 1)
        LOBYTE(v11) = 1;
      v12 = 0x101010101010101 * v11;
      *v9 = v12;
      v9[1] = v12;
      v13 = 0x101010101010101 * (v11 + v10);
      *(v9 - 2) = v13;
      *(v9 - 1) = v13;
      ++v3;
      v9 += 6;
      v10 += 2;
    }
    while (v3 != 64);
  }
  else
  {
    v4 = (uint64_t *)(result + 16);
    v5 = 4;
    do
    {
      v6 = v3 >> v2;
      if ((int)(v3 >> v2) >= 9 - a2)
        v6 = 9 - a2;
      if (v6 <= 1)
        LOBYTE(v6) = 1;
      v7 = 0x101010101010101 * v6;
      *v4 = v7;
      v4[1] = v7;
      v8 = 0x101010101010101 * (v6 + v5);
      *(v4 - 2) = v8;
      *(v4 - 1) = v8;
      ++v3;
      v4 += 6;
      v5 += 2;
    }
    while (v3 != 64);
  }
  return result;
}

uint64_t vp9_loop_filter_frame_init(uint64_t result, int a2)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint32x2_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int32x2_t v13;
  _BYTE *v14;
  int32x2_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;

  v3 = result;
  v4 = (_BYTE *)(result + 4744);
  v5 = a2 >> 5;
  v6 = *(_DWORD *)(result + 4736);
  if (*(_DWORD *)(result + 4740) != v6)
  {
    result = update_sharpness(result + 1568, v6);
    *(_DWORD *)(v3 + 4740) = *(_DWORD *)(v3 + 4736);
  }
  v7 = 0;
  v8 = 0;
  v9 = (uint32x2_t)vdup_n_s32(v5);
  v10 = v3 + 4856;
  do
  {
    while (1)
    {
      v23 = a2;
      if (v4[32])
      {
        v23 = a2;
        if ((*(_DWORD *)(v10 + 4 * v8) & 2) != 0)
        {
          if (v4[35] == 1)
            v24 = 0;
          else
            v24 = a2;
          v25 = v24 + *(__int16 *)(v3 + v7 + 4794);
          if (v25 >= 63)
            v25 = 63;
          v23 = v25 & ~(v25 >> 31);
        }
      }
      if (*v4)
        break;
      *(_QWORD *)(v10 + v7 - 216) = 0x101010101010101 * v23;
      ++v8;
      v7 += 8;
      if (v7 == 64)
        return result;
    }
    v11 = ((char)v4[2] << v5) + v23;
    if (v11 >= 63)
      v11 = 63;
    v12 = v10 + v7;
    *(_BYTE *)(v10 + v7 - 216) = v11 & ~(v11 >> 31);
    v13.i32[0] = *(char *)(v3 + 4754);
    v13.i32[1] = *(char *)(v3 + 4755);
    v14 = (_BYTE *)(v3 + v7 + 4642);
    v15 = vmax_s32(vmin_s32(vadd_s32((int32x2_t)vshl_u32((uint32x2_t)vadd_s32(vdup_n_s32((char)v4[3]), v13), v9), vdup_n_s32(v23)), (int32x2_t)0x3F0000003FLL), 0);
    v14[1] = v15.i8[4];
    *v14 = v15.i8[0];
    v16 = (char)v4[10];
    v17 = ((v16 + (char)v4[4]) << v5) + v23;
    if (v17 >= 63)
      v17 = 63;
    *(_BYTE *)(v12 - 212) = v17 & ~(v17 >> 31);
    v18 = (char)v4[11];
    v19 = ((v18 + (char)v4[4]) << v5) + v23;
    if (v19 >= 63)
      v19 = 63;
    *(_BYTE *)(v12 - 211) = v19 & ~(v19 >> 31);
    v20 = (char)v4[5];
    v21 = ((v20 + v16) << v5) + v23;
    if (v21 >= 63)
      v21 = 63;
    result = v21 & ~(v21 >> 31);
    *(_BYTE *)(v12 - 210) = result;
    v22 = ((v20 + v18) << v5) + v23;
    if (v22 >= 63)
      v22 = 63;
    *(_BYTE *)(v12 - 209) = v22 & ~(v22 >> 31);
    ++v8;
    v7 += 8;
  }
  while (v7 != 64);
  return result;
}

uint64_t vp9_adjust_mask(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t result;
  int v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a4 + 16) | *(_QWORD *)(a4 + 24);
  v5 = *(_QWORD *)(a4 + 48) | *(_QWORD *)(a4 + 56);
  *(_QWORD *)(a4 + 48) = v5;
  v6 = *(_WORD *)(a4 + 76) | *(_WORD *)(a4 + 78);
  *(_WORD *)(a4 + 76) = v6;
  v7 = *(_WORD *)(a4 + 84) | *(_WORD *)(a4 + 86);
  *(_WORD *)(a4 + 84) = v7;
  v8 = *(_QWORD *)(a4 + 8) | *(_QWORD *)a4 & 0x1111111111111111;
  v9 = *(_QWORD *)a4 & 0xEEEEEEEEEEEEEEEELL;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 16) = v4;
  *(_QWORD *)a4 = v9;
  v10 = *(_QWORD *)(a4 + 32);
  v11 = *(_QWORD *)(a4 + 40) | v10 & 0xFF000000FFLL;
  v12 = v10 & 0xFFFFFF00FFFFFF00;
  *(_QWORD *)(a4 + 32) = v10 & 0xFFFFFF00FFFFFF00;
  *(_QWORD *)(a4 + 40) = v11;
  v13 = *(_WORD *)(a4 + 72);
  v14 = *(_WORD *)(a4 + 74) | v13 & 0x1111;
  *(_WORD *)(a4 + 74) = v14;
  v15 = v13 & 0xEEEE;
  *(_WORD *)(a4 + 72) = v15;
  v16 = *(_WORD *)(a4 + 80);
  v17 = *(_WORD *)(a4 + 82) | v16 & 0xF;
  *(_WORD *)(a4 + 82) = v17;
  v18 = v16 & 0xFFF0;
  *(_WORD *)(a4 + 80) = v18;
  v19 = *(_DWORD *)(a1 + 1312);
  if (a2 + 8 > v19)
  {
    v20 = v19 - a2;
    v21 = -1 << ((2 * v20 + 2) & 0xFC);
    v15 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 72) = v15;
    v18 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 80) = v18;
    v22 = -1 << (8 * v20);
    v9 &= ~v22;
    v8 &= ~v22;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v8;
    v12 &= ~v22;
    v11 &= ~v22;
    *(_QWORD *)(a4 + 32) = v12;
    *(_QWORD *)(a4 + 40) = v11;
    v14 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 74) = v14;
    v17 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 82) = v17;
    v4 &= ~v22;
    *(_QWORD *)(a4 + 16) = v4;
    v5 &= ~v22;
    *(_QWORD *)(a4 + 48) = v5;
    v6 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 76) = v6;
    v7 &= ~(_WORD)v21;
    *(_WORD *)(a4 + 84) = v7;
    *(_QWORD *)(a4 + 64) &= ~v22;
    *(_WORD *)(a4 + 88) &= ~(_WORD)v21;
    if (v20 == 5)
    {
      v17 |= v7 & 0xFF00;
      *(_WORD *)(a4 + 82) = v17;
      v7 = v7;
    }
    else
    {
      if (v20 != 1)
        goto LABEL_7;
      v17 |= v7;
      v7 = 0;
      *(_WORD *)(a4 + 82) = v17;
    }
    *(_WORD *)(a4 + 84) = v7;
  }
LABEL_7:
  result = *(unsigned int *)(a1 + 1320);
  if (a3 + 8 <= (int)result)
    goto LABEL_13;
  result = (result - a3);
  v24 = (4369 << ((unint64_t)((int)result + 1) >> 1)) - 4369;
  v15 &= v24;
  *(_WORD *)(a4 + 72) = v15;
  *(_WORD *)(a4 + 80) = ((4369 << ((unint64_t)((int)result + 1) >> 1)) - 4369) & v18;
  v25 = 0x101010101010101 * ~(-1 << result);
  v9 &= v25;
  v8 &= v25;
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v8;
  *(_QWORD *)(a4 + 32) = v25 & v12;
  *(_QWORD *)(a4 + 40) = v25 & v11;
  v14 &= v24;
  *(_WORD *)(a4 + 74) = v14;
  *(_WORD *)(a4 + 82) = ((4369 << ((unint64_t)((int)result + 1) >> 1)) - 4369) & v17;
  v4 &= v25;
  *(_QWORD *)(a4 + 16) = v4;
  *(_QWORD *)(a4 + 48) = v25 & v5;
  v6 &= v24;
  *(_WORD *)(a4 + 76) = v6;
  *(_WORD *)(a4 + 84) = ((4369 << ((unint64_t)((int)result + 1) >> 1)) - 4369) & v7;
  *(_QWORD *)(a4 + 64) &= v25;
  *(_WORD *)(a4 + 88) &= (4369 << ((int)result >> 1)) - 4369;
  if ((_DWORD)result == 5)
  {
    v14 |= v6 & 0xCCCC;
    *(_WORD *)(a4 + 74) = v14;
    v6 &= 0x3333u;
  }
  else
  {
    if ((_DWORD)result != 1)
      goto LABEL_13;
    v14 |= v6;
    v6 = 0;
    *(_WORD *)(a4 + 74) = v14;
  }
  *(_WORD *)(a4 + 76) = v6;
LABEL_13:
  if (!a3)
  {
    *(_WORD *)(a4 + 72) = v15 & 0xEEEE;
    *(_QWORD *)a4 = v9 & 0xFEFEFEFEFEFEFEFELL;
    *(_QWORD *)(a4 + 8) = v8 & 0xFEFEFEFEFEFEFEFELL;
    *(_WORD *)(a4 + 74) = v14 & 0xEEEE;
    *(_QWORD *)(a4 + 16) = v4 & 0xFEFEFEFEFEFEFEFELL;
    *(_WORD *)(a4 + 76) = v6 & 0xEEEE;
  }
  return result;
}

_DWORD *vp9_setup_mask(_DWORD *result, int a2, int a3, unsigned __int8 **a4, int a5, _OWORD *a6)
{
  uint64_t v6;
  unsigned __int8 **v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  void *v16;
  int v17;
  char v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  int v26;
  void *v27;
  int v28;
  uint64_t v29;
  void *v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  char v35;
  uint64_t i;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unsigned __int8 **v48;
  int v49;
  unsigned __int8 **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  int v57;
  int v58;
  _DWORD v59[4];
  _DWORD v60[4];
  uint64_t v61;

  v6 = (uint64_t)a6;
  v7 = a4;
  v61 = *MEMORY[0x24BDAC8D0];
  v8 = result + 392;
  v9 = 4 * a5;
  v60[0] = 4;
  v60[1] = 4 * a5 - 4;
  v60[2] = 4;
  v60[3] = (4 * a5) ^ 0xFFFFFFFC;
  v59[0] = 2;
  v59[1] = 2 * a5 - 2;
  v59[2] = 2;
  v59[3] = (2 * a5) ^ 0xFFFFFFFE;
  v10 = result[328];
  if (a2 + 8 <= v10)
    v11 = 8;
  else
    v11 = v10 - a2;
  v12 = result[330];
  if (a3 + 8 <= v12)
    v13 = 8;
  else
    v13 = (v12 - a3);
  a6[8] = 0u;
  a6[9] = 0u;
  a6[6] = 0u;
  a6[7] = 0u;
  a6[4] = 0u;
  a6[5] = 0u;
  a6[2] = 0u;
  a6[3] = 0u;
  *a6 = 0u;
  a6[1] = 0u;
  v14 = *a4;
  v15 = **a4;
  switch(v15)
  {
    case 10:
      v19 = result + 392;
      result = build_masks(result + 392, v14, 0, 0, (uint64_t)a6);
      if ((int)v13 >= 5)
      {
        v14 = v7[4];
        v16 = v19;
        v17 = 4;
        v18 = 2;
        return build_masks(v16, v14, v17, v18, v6);
      }
      break;
    case 11:
      v20 = result + 392;
      result = build_masks(result + 392, v14, 0, 0, (uint64_t)a6);
      if (v11 >= 5)
      {
        v14 = v7[v9];
        v16 = v20;
        v17 = 32;
        v18 = 8;
        return build_masks(v16, v14, v17, v18, v6);
      }
      break;
    case 12:
      v16 = result + 392;
      v17 = 0;
      v18 = 0;
      return build_masks(v16, v14, v17, v18, v6);
    default:
      v21 = 0;
      v52 = a5;
      v51 = 2 * a5;
      v53 = ~a5;
      v54 = a5 - 1;
      v56 = v11;
      v55 = result + 392;
      while (1)
      {
        v22 = 4 * (v21 & 1);
        if (v22 >= (int)v13 || ((2 * v21) & 0x7FFFFFFC) >= v11)
          goto LABEL_17;
        v23 = dword_208F49900[v21];
        v24 = dword_208F49920[v21];
        v25 = *v7;
        v26 = **v7;
        if (v26 != 7)
          break;
        v31 = dword_208F49900[v21];
        v30 = v8;
        result = build_masks(v8, v25, v23, dword_208F49920[v21], v6);
        if ((int)((4 * (v21 & 1)) | 2) < (int)v13)
        {
          v25 = v7[2];
          v23 = v31 + 2;
          LOBYTE(v28) = v24 + 1;
          v27 = v30;
          v29 = v6;
LABEL_26:
          result = build_masks(v27, v25, v23, v28, v29);
        }
        v8 = v30;
LABEL_17:
        v7 += (int)v60[v21++];
        if (v21 == 4)
          return result;
      }
      if (v26 == 8)
      {
        v32 = dword_208F49900[v21];
        v33 = dword_208F49920[v21];
        v34 = v8;
        result = build_masks(v8, v25, v23, v33, v6);
        if ((int)((2 * v21) | 2) < v11)
          result = build_masks(v34, v7[v51], v32 + 16, v33 + 4, v6);
        v8 = v34;
        goto LABEL_17;
      }
      if (v26 != 9)
      {
        v57 = dword_208F49900[v21];
        v58 = dword_208F49920[v21];
        v35 = 0;
        for (i = 0; i != 4; ++i)
        {
          v37 = v35 & 2 | v22;
          if (v37 < (int)v13)
          {
            v38 = (i & 0x7FFFFFFE) + ((2 * v21) & 0x7FFFFFFC);
            if (v38 < v11)
            {
              v39 = v13;
              v40 = dword_208F49910[i] + v23;
              v41 = dword_208F49930[i] + v58;
              v42 = *v7;
              v43 = **v7;
              if (v43 == 4)
              {
                v45 = v8;
                result = build_masks(v8, v42, dword_208F49910[i] + v23, v41, v6);
                if ((v37 | 1) < (int)v39)
                  result = build_y_mask(v45, v7[1], v40 + 1, v6);
                v13 = v39;
                v8 = v45;
              }
              else if (v43 == 5)
              {
                v46 = v8;
                result = build_masks(v8, v42, dword_208F49910[i] + v23, v41, v6);
                if ((v38 | 1) < v11)
                  result = build_y_mask(v46, v7[v52], v40 + 8, v6);
                v13 = v39;
                v8 = v46;
              }
              else
              {
                if (v43 == 6)
                {
                  v44 = v8;
                  result = build_masks(v8, v42, dword_208F49910[i] + v23, v41, v6);
                  v8 = v44;
                }
                else
                {
                  v47 = v6;
                  result = build_masks(v8, v42, dword_208F49910[i] + v23, v41, v6);
                  v48 = v7 + 1;
                  v49 = v37 | 1;
                  if ((v37 | 1) < (int)v39)
                    result = build_y_mask(v55, *v48, v40 + 1, v47);
                  v8 = v55;
                  v50 = &v48[v54];
                  v6 = v47;
                  if ((v38 | 1) < v56)
                  {
                    result = build_y_mask(v55, *v50, v40 + 8, v47);
                    v8 = v55;
                    if (v49 < (int)v39)
                    {
                      result = build_y_mask(v55, v50[1], v40 + 9, v47);
                      v8 = v55;
                    }
                  }
                  v7 = &v50[v53 + 1];
                  v11 = v56;
                }
                v13 = v39;
              }
              v22 = 4 * (v21 & 1);
              v23 = v57;
            }
          }
          v7 += (int)v59[i];
          v35 += 2;
        }
        goto LABEL_17;
      }
      v27 = v8;
      v28 = dword_208F49920[v21];
      v29 = v6;
      v30 = v8;
      goto LABEL_26;
  }
  return result;
}

void *build_masks(void *result, unsigned __int8 *a2, int a3, char a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int16 v23;
  unint64_t v24;
  _WORD *v25;
  _WORD *v26;

  v5 = (uint64_t)result + 8 * (char)a2[4] + 2 * (char)a2[8] + mode_lf_lut[a2[1]];
  v6 = *(unsigned __int8 *)(v5 + 3072);
  if (*(_BYTE *)(v5 + 3072))
  {
    v8 = a3;
    v10 = *a2;
    v11 = a2[2];
    v12 = (uint64_t *)(a5 + 8 * v11 + 32);
    v24 = uv_txsize_lookup[16 * v10 + 3 + 4 * v11];
    v13 = a5 + 2 * v24;
    v25 = (_WORD *)(v13 + 80);
    v26 = (_WORD *)(v13 + 72);
    v14 = num_8x8_blocks_high_lookup[v10];
    v15 = num_8x8_blocks_wide_lookup[v10];
    v16 = (char *)(a5 + a3 + 90);
    do
    {
      result = memset(v16, v6, v15);
      v16 += 8;
      --v14;
    }
    while (v14);
    v17 = *v12 | (above_prediction_mask[v10] << v8);
    *v12 = v17;
    v18 = (unsigned __int16)*v25 | (above_prediction_mask_uv[v10] << a4);
    v19 = left_prediction_mask[v10];
    *v25 |= above_prediction_mask_uv[v10] << a4;
    v20 = *(_QWORD *)(a5 + 8 * v11) | (v19 << v8);
    *(_QWORD *)(a5 + 8 * v11) = v20;
    v21 = (unsigned __int16)*v26 | (left_prediction_mask_uv[v10] << a4);
    *v26 |= left_prediction_mask_uv[v10] << a4;
    if (!a2[3] || (char)a2[8] <= 0)
    {
      v22 = size_mask[v10];
      *v12 = ((above_64x64_txform_mask[v11] & v22) << v8) | v17;
      v23 = size_mask_uv[v10];
      result = (void *)v24;
      *v25 = v18 | ((unsigned __int16)(above_64x64_txform_mask_uv[v24] & v23) << a4);
      *(_QWORD *)(a5 + 8 * v11) = ((left_64x64_txform_mask[v11] & v22) << v8) | v20;
      *v26 = v21 | ((left_64x64_txform_mask_uv[v24] & v23) << a4);
      if ((_DWORD)v11)
      {
        if ((_DWORD)v24)
          return result;
LABEL_10:
        *(_WORD *)(a5 + 88) |= v23 << a4;
        return result;
      }
      *(_QWORD *)(a5 + 64) |= v22 << v8;
      if (!(_DWORD)v24)
        goto LABEL_10;
    }
  }
  return result;
}

void *build_y_mask(void *result, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  char v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (uint64_t)result + 8 * (char)a2[4] + 2 * (char)a2[8] + mode_lf_lut[a2[1]];
  v5 = *(unsigned __int8 *)(v4 + 3072);
  if (*(_BYTE *)(v4 + 3072))
  {
    v7 = a3;
    v9 = a2[2];
    v10 = (uint64_t *)(a4 + 8 * v9 + 32);
    v11 = *a2;
    v12 = num_8x8_blocks_high_lookup[v11];
    v13 = num_8x8_blocks_wide_lookup[v11];
    v14 = (char *)(a4 + a3 + 90);
    do
    {
      result = memset(v14, v5, v13);
      v14 += 8;
      --v12;
    }
    while (v12);
    v15 = *v10 | (above_prediction_mask[v11] << v7);
    *v10 = v15;
    v16 = *(_QWORD *)(a4 + 8 * v9) | (left_prediction_mask[v11] << v7);
    *(_QWORD *)(a4 + 8 * v9) = v16;
    if (!a2[3] || (char)a2[8] <= 0)
    {
      v17 = size_mask[v11];
      v18 = left_64x64_txform_mask[v9];
      *v10 = ((above_64x64_txform_mask[v9] & v17) << v7) | v15;
      *(_QWORD *)(a4 + 8 * v9) = ((v18 & v17) << v7) | v16;
      if (!(_DWORD)v9)
        *(_QWORD *)(a4 + 64) |= v17 << v7;
    }
  }
  return result;
}

uint8x8_t *vp9_filter_block_plane_non420(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, double a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  int v37;
  BOOL v38;
  int v39;
  char v40;
  int v41;
  int v42;
  char v43;
  char v44;
  int v45;
  _DWORD *v46;
  int v47;
  char v48;
  int v49;
  BOOL v50;
  char *v51;
  char v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 *v59;
  int16x8_t *v60;
  BOOL v61;
  unsigned int v62;
  const char *v63;
  const char *v64;
  const char *v65;
  uint8x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  unsigned __int8 *v69;
  BOOL v70;
  unsigned int v71;
  const char *v72;
  int v73;
  uint64_t v74;
  uint8x8_t *result;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  uint8x8_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  unsigned int *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint16x8_t v95;
  int v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  _OWORD v100[4];
  _OWORD v101[2];
  _OWORD v102[2];
  _OWORD v103[2];
  _OWORD v104[2];
  uint64_t v105;

  v13 = a4;
  v14 = a2;
  v15 = 0;
  v105 = *MEMORY[0x24BDAC8D0];
  v16 = *(_DWORD *)(a2 + 12);
  v96 = *(_DWORD *)(a2 + 8);
  v17 = *(_QWORD *)(a2 + 16);
  v91 = v16;
  v18 = a1[331] << v16;
  v19 = 0uLL;
  memset(v104, 0, sizeof(v104));
  memset(v103, 0, sizeof(v103));
  v85 = ~(a5 == 0);
  v20 = (uint64_t)(a1 + 392);
  memset(v102, 0, sizeof(v102));
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  v88 = a1 + 4540;
  v93 = a1;
  v94 = 1 << v16;
  v92 = a4;
  v97 = a5;
  v83 = -(uint64_t)a5;
  v84 = 8 * v18;
  v82 = (uint8x8_t *)v17;
  v99 = a1 + 392;
  do
  {
    v21 = (int)a1[328];
    if (v15 + v92 >= v21)
      break;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = (_DWORD)v21 - 1 != (_DWORD)v15 + (_DWORD)v92 || v91 == 0;
    v27 = (int)a1[330];
    v28 = 8 * v15;
    v29 = v94 & v15;
    v30 = (char *)v104 + 4 * v15;
    v31 = ((int)v15 >> v91) & 3;
    if (!v26)
      v30 = (char *)v103 + 4 * v15;
    while (v97 + v22 < v27)
    {
      v32 = *(unsigned __int8 **)(a3 + 8 * v22);
      v33 = v32[3];
      if (v32[3])
        v33 = (char)v32[8] > 0;
      v34 = *v32;
      if (v34 < 2)
      {
        v35 = 0;
        if ((v34 & 0xFFFFFFFD) != 0)
        {
LABEL_17:
          v36 = ((num_8x8_blocks_high_lookup[v34] - 1) & v15) != 0;
          goto LABEL_20;
        }
      }
      else
      {
        v35 = ((num_8x8_blocks_wide_lookup[v34] - 1) & v22) != 0;
        if ((v34 & 0xFFFFFFFD) != 0)
          goto LABEL_17;
      }
      v36 = 0;
LABEL_20:
      v37 = uv_txsize_lookup[16 * v34 + 4 * v32[2] + 2 * *(int *)(v14 + 8) + *(int *)(v14 + 12)];
      if (v96)
        v38 = v27 + v83 - 1 == v22;
      else
        v38 = 0;
      v39 = *((unsigned __int8 *)&a1[2 * (char)v32[4] + 1160] + 2 * (char)v32[8] + mode_lf_lut[v32[1]]);
      v40 = v38;
      v41 = (int)v22 >> v96;
      *((_BYTE *)v100 + ((int)v22 >> v96) + (uint64_t)v28) = v39;
      if (!v39)
        goto LABEL_11;
      v42 = v33 & v35;
      v43 = v33 & v36;
      if (v37 == 2)
      {
        if (((v41 | v42) & 1) != 0)
          goto LABEL_41;
        v47 = 1 << v41;
        if ((v40 & 1) != 0)
        {
          v24 |= v47;
LABEL_41:
          if (v29)
            v43 = 1;
          v46 = v30;
          if ((v43 & 1) != 0)
            goto LABEL_11;
          goto LABEL_10;
        }
        v25 |= v47;
        if (v29)
          v43 = 1;
        v46 = v30;
        if ((v43 & 1) != 0)
          goto LABEL_11;
      }
      else if (v37 == 3)
      {
        if ((v41 & 3) != 0)
          v44 = 1;
        else
          v44 = v42;
        if ((v44 & 1) == 0)
        {
          v45 = 1 << v41;
          if ((v40 & 1) != 0)
          {
            v24 |= v45;
            if (v31)
              v43 = 1;
            v46 = v30;
            if ((v43 & 1) != 0)
              goto LABEL_11;
            goto LABEL_10;
          }
          v25 |= v45;
        }
        if (v31)
          v43 = 1;
        v46 = v30;
        if ((v43 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        if ((v42 & 1) != 0)
        {
          if ((v33 & v36 & 1) != 0)
            goto LABEL_47;
        }
        else
        {
          v49 = 1 << v41;
          if ((v41 & 3) == 0 || v37 == 1)
          {
            v24 |= v49;
            if ((v43 & 1) != 0)
            {
LABEL_47:
              if (v37)
                LOBYTE(v33) = 1;
              v48 = v33 | v40;
              v46 = (_DWORD *)v101 + v15;
              if ((v48 & 1) != 0)
                goto LABEL_11;
              goto LABEL_10;
            }
          }
          else
          {
            v23 |= v49;
            if ((v43 & 1) != 0)
              goto LABEL_47;
          }
        }
        if (v31)
          v50 = v37 == 1;
        else
          v50 = 1;
        if (v50)
          v51 = (char *)v103 + 4 * v15;
        else
          v51 = (char *)v102 + 4 * v15;
        *(_DWORD *)v51 |= 1 << v41;
        if (v37)
          LOBYTE(v33) = 1;
        v52 = v33 | v40;
        v46 = (_DWORD *)v101 + v15;
        if ((v52 & 1) != 0)
          goto LABEL_11;
      }
LABEL_10:
      *v46 |= 1 << v41;
LABEL_11:
      v22 += 1 << v96;
      if (v22 >= 8)
        break;
    }
    v89 = v15;
    v90 = a3;
    v98 = *(_DWORD *)(v14 + 24);
    v53 = v25 & v85;
    v54 = v24 & v85;
    v55 = v23 & v85;
    v56 = *((_DWORD *)v101 + v15);
    v57 = v24 & v85 | v25 & v85 | v23 & v85 | v56;
    if (!a1[81])
    {
      if (!v57)
        goto LABEL_2;
      v69 = (unsigned __int8 *)v100 + v28;
      while (2)
      {
        v71 = *v69;
        v72 = (const char *)(v20 + 48 * *v69);
        if ((v57 & 1) == 0)
          goto LABEL_102;
        if ((v53 & 1) != 0)
        {
          v19 = vpx_lpf_vertical_16_neon((_BYTE *)v17, v98, (unsigned __int8 *)(v20 + 48 * *v69), (unsigned __int8 *)(v20 + 48 * *v69 + 16), (unsigned __int8 *)(v20 + 48 * *v69 + 32));
        }
        else
        {
          if ((v54 & 1) == 0)
          {
            if ((v55 & 1) != 0)
            {
              *(int8x8_t *)v19.i8 = vpx_lpf_vertical_4_neon(v17, v98, (const char *)(v20 + 48 * *v69), (const char *)(v20 + 48 * *v69 + 16), (const char *)(v20 + 48 * *v69 + 32), *(double *)v19.i64, *(double *)a7.i64, *(double *)a8.i64, a9, a10, a11, a12, a13);
              break;
            }
LABEL_102:
            if ((v56 & 1) != 0)
            {
              *(int8x8_t *)v19.i8 = vpx_lpf_vertical_4_neon(v17 + 4, v98, v72, (const char *)(v20 + 48 * v71 + 16), (const char *)(v20 + 48 * v71 + 32), *(double *)v19.i64, *(double *)a7.i64, *(double *)a8.i64, a9, a10, a11, a12, a13);
              v20 = (uint64_t)v99;
            }
            v53 >>= 1;
            v17 += 8;
            ++v69;
            v54 >>= 1;
            v55 >>= 1;
            v56 >>= 1;
            v70 = v57 > 1;
            v57 >>= 1;
            if (!v70)
              goto LABEL_2;
            continue;
          }
          v19 = vpx_lpf_vertical_8_neon(v17, v98, (const char *)(v20 + 48 * *v69), (const char *)(v20 + 48 * *v69 + 16), (const char *)(v20 + 48 * *v69 + 32), v19, a7, a8, a9, a10, a11, a12, a13);
        }
        break;
      }
      v20 = (uint64_t)v99;
      goto LABEL_102;
    }
    if (v57)
    {
      v58 = *v88;
      v59 = (unsigned __int8 *)v100 + v28;
      v60 = (int16x8_t *)(2 * v17);
      v19 = (int8x16_t)vdupq_n_s16(*v88 - 8);
      v95 = (uint16x8_t)v19;
      do
      {
        v62 = *v59;
        v63 = (const char *)(v20 + 48 * *v59);
        if ((v57 & 1) != 0)
        {
          if ((v53 & 1) != 0)
          {
            v64 = (const char *)(v20 + 48 * *v59);
            v65 = v64 + 16;
            v64 += 32;
            v66 = (uint8x8_t)vld1_dup_s8(v63);
            v67 = (uint8x8_t)vld1_dup_s8(v65);
            v68 = (uint8x8_t)vld1_dup_s8(v64);
            v19 = (int8x16_t)lpf_vertical_16_kernel(v60, v98, v58, vshlq_u16(vmovl_u8(v66), v95), vshlq_u16(vmovl_u8(v67), v95), vshlq_u16(vmovl_u8(v68), v95));
            goto LABEL_87;
          }
          if ((v54 & 1) != 0)
          {
            vpx_highbd_lpf_vertical_8_neon(v60, v98, (const char *)(v20 + 48 * *v59), (const char *)(v20 + 48 * *v59 + 16), (const char *)(v20 + 48 * *v59 + 32), v58);
            goto LABEL_87;
          }
          if ((v55 & 1) != 0)
          {
            v19 = (int8x16_t)vpx_highbd_lpf_vertical_4_neon((uint64_t)v60, v98, (const char *)(v20 + 48 * *v59), (const char *)(v20 + 48 * *v59 + 16), (const char *)(v20 + 48 * *v59 + 32), v58);
LABEL_87:
            v20 = (uint64_t)v99;
          }
        }
        if ((v56 & 1) != 0)
        {
          v19 = (int8x16_t)vpx_highbd_lpf_vertical_4_neon((uint64_t)&v60->i64[1], v98, v63, (const char *)(v20 + 48 * v62 + 16), (const char *)(v20 + 48 * v62 + 32), v58);
          v20 = (uint64_t)v99;
        }
        v53 >>= 1;
        ++v60;
        ++v59;
        v54 >>= 1;
        v55 >>= 1;
        v56 >>= 1;
        v61 = v57 >= 2;
        v57 >>= 1;
      }
      while (v61);
    }
LABEL_2:
    v14 = a2;
    v13 = a4;
    v17 = *(_QWORD *)(a2 + 16) + 8 * *(int *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = v17;
    a1 = v93;
    v15 = v89 + v94;
    a3 = v90 + v84;
  }
  while (v89 + v94 < 8);
  v73 = 0;
  v74 = 0;
  result = v82;
  *(_QWORD *)(v14 + 16) = v82;
  do
  {
    v76 = v92 + v74;
    v77 = (int)v93[328];
    if (v92 + v74 >= v77)
      break;
    if (v91 && v13 == (_DWORD)v77 - 1)
    {
      v78 = 0;
      if (v76)
        goto LABEL_111;
    }
    else
    {
      v78 = *((_DWORD *)v101 + v74);
      if (v76)
      {
LABEL_111:
        v79 = *((_DWORD *)v104 + v74);
        v80 = *((_DWORD *)v103 + v74);
        v81 = *((_DWORD *)v102 + v74);
        if (v93[81])
          goto LABEL_115;
        goto LABEL_105;
      }
    }
    v79 = 0;
    v80 = 0;
    v81 = 0;
    if (v93[81])
    {
LABEL_115:
      highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)result), *(unsigned int *)(v14 + 24), v79, v80, v81, v78, v20, (unsigned __int8 *)v100 + v73, *v88);
      goto LABEL_106;
    }
LABEL_105:
    filter_selectively_horiz(result, *(_DWORD *)(v14 + 24), v79, v80, v81, v78, v20, (unsigned __int8 *)v100 + v73);
LABEL_106:
    result = (uint8x8_t *)(*(_QWORD *)(v14 + 16) + 8 * *(int *)(v14 + 24));
    *(_QWORD *)(v14 + 16) = result;
    v74 += v94;
    v73 += 8 * v94;
    v13 += v94;
    v20 = (uint64_t)v99;
  }
  while (v74 < 8);
  return result;
}

void highbd_filter_selectively_horiz(int8x16_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned __int8 *a8, unsigned int a9)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint16x8_t v50;
  const char *v51;
  uint16x8_t v52;
  const char *v53;
  const char *v54;
  uint16x8_t v55;
  const char *v56;
  uint16x8_t v57;
  const char *v58;
  unsigned int v59;
  uint64_t v60;

  v9 = a4;
  v10 = a5;
  v11 = a6;
  v12 = a3;
  v13 = a4 | (unint64_t)a3 | a5 | (unint64_t)a6;
  if (v13)
  {
    v16 = a9;
    v49 = (int)a2;
    v50 = (uint16x8_t)vdupq_n_s16(a9 - 8);
    v60 = a7;
    v59 = a2;
    while (1)
    {
      if ((v13 & 1) == 0)
        goto LABEL_4;
      v19 = (const char *)(a7 + 48 * *a8);
      if ((v12 & 1) != 0)
      {
        v23 = (const char *)(a7 + 48 * *a8);
        v24 = v23 + 16;
        v23 += 32;
        v25 = (uint8x8_t)vld1_dup_s8(v19);
        v26 = (uint8x8_t)vld1_dup_s8(v24);
        v27 = (uint8x8_t)vld1_dup_s8(v23);
        v28 = a2;
        v55 = vshlq_u16(vmovl_u8(v26), v50);
        v57 = vshlq_u16(vmovl_u8(v25), v50);
        v52 = vshlq_u16(vmovl_u8(v27), v50);
        v29 = v16;
        lpf_horizontal_16_kernel(a1, a2, v16, v57, v55, v52);
        if ((~(_BYTE)v12 & 3) != 0)
        {
          v18 = 1;
        }
        else
        {
          lpf_horizontal_16_kernel(a1 + 1, v28, v29, v57, v55, v52);
          v18 = 2;
        }
        a2 = v28;
        v16 = v29;
        a7 = v60;
        goto LABEL_5;
      }
      if ((v9 & 1) == 0)
        break;
      if ((~(_BYTE)v9 & 3) != 0)
      {
        v34 = a7 + 48 * *a8;
        v35 = (const char *)(v34 + 16);
        v58 = (const char *)(v34 + 32);
        v36 = v16;
        vpx_highbd_lpf_horizontal_8_neon((uint64_t)a1, a2, v19, (const char *)(v34 + 16), (const char *)(v34 + 32), v16);
        if ((v11 & 1) != 0)
          goto LABEL_21;
        goto LABEL_22;
      }
      v30 = (const char *)(a7 + 48 * a8[1]);
      v31 = (const char *)(a7 + 48 * *a8);
      v32 = a2;
      v53 = v31 + 16;
      v46 = v31;
      v48 = v31 + 32;
      v33 = v16;
      vpx_highbd_lpf_horizontal_8_neon((uint64_t)a1, a2, v31, v31 + 16, v31 + 32, v16);
      vpx_highbd_lpf_horizontal_8_neon((uint64_t)a1[1].i64, v32, v30, v30 + 16, v30 + 32, v33);
      if ((~(_BYTE)v11 & 3) != 0)
      {
        v38 = v48;
        v39 = v53;
        v40 = v30 + 32;
        v41 = v30 + 16;
        if ((v11 & 1) != 0)
        {
          v42 = (uint64_t)&a1->i64[v49];
          v43 = v59;
          v44 = v59;
          v45 = v46;
LABEL_35:
          v41 = v39;
          v40 = v38;
LABEL_36:
          vpx_highbd_lpf_horizontal_4_neon(v42, v44, v45, v41, v40, a9);
          v16 = a9;
          a2 = v43;
          goto LABEL_37;
        }
        if ((v11 & 2) != 0)
        {
          v45 = v30;
          v42 = (uint64_t)&a1[1].i64[v49];
          v43 = v59;
          v44 = v59;
          goto LABEL_36;
        }
        v18 = 2;
        a7 = v60;
        a2 = v59;
        goto LABEL_28;
      }
      vpx_highbd_lpf_horizontal_4_dual_neon((uint64_t)&a1->i64[v49], v59, v46, v53, v48, v30, v30 + 16, v30 + 32, v33);
      v18 = 2;
      a7 = v60;
      a2 = v59;
      v16 = v33;
LABEL_5:
      v12 >>= v18;
      a8 += v18;
      v9 >>= v18;
      v10 >>= v18;
      v11 >>= v18;
      v13 >>= v18;
      a1 += v18;
      if (!v13)
        return;
    }
    if ((v10 & 1) != 0)
    {
      if ((~(_BYTE)v10 & 3) == 0)
      {
        v20 = (const char *)(a7 + 48 * a8[1]);
        v21 = a7 + 48 * *a8;
        v22 = a2;
        v56 = (const char *)(v21 + 16);
        v51 = (const char *)(v21 + 32);
        v54 = v20 + 16;
        v47 = v20 + 32;
        vpx_highbd_lpf_horizontal_4_dual_neon((uint64_t)a1, a2, v19, (const char *)(v21 + 16), (const char *)(v21 + 32), v20, v20 + 16, v20 + 32, v16);
        if ((~(_BYTE)v11 & 3) != 0)
        {
          v38 = v51;
          v39 = v56;
          if ((v11 & 1) != 0)
          {
            v42 = (uint64_t)&a1->i64[v49];
            v43 = v59;
            v44 = v59;
            v45 = v19;
            goto LABEL_35;
          }
          a2 = v59;
          v16 = a9;
          if ((v11 & 2) != 0)
          {
            vpx_highbd_lpf_horizontal_4_neon((uint64_t)&a1[1].i64[v49], v59, v20, v54, v47, a9);
            v16 = a9;
            a2 = v59;
          }
LABEL_37:
          v18 = 2;
          a7 = v60;
          goto LABEL_5;
        }
        vpx_highbd_lpf_horizontal_4_dual_neon((uint64_t)&a1->i64[v49], v22, v19, v56, v51, v20, v54, v47, a9);
        v18 = 2;
        a7 = v60;
        a2 = v22;
LABEL_28:
        v16 = a9;
        goto LABEL_5;
      }
      v37 = a7 + 48 * *a8;
      v35 = (const char *)(v37 + 16);
      v58 = (const char *)(v37 + 32);
      v36 = v16;
      vpx_highbd_lpf_horizontal_4_neon((uint64_t)a1, a2, v19, (const char *)(v37 + 16), (const char *)(v37 + 32), v16);
      if ((v11 & 1) != 0)
LABEL_21:
        vpx_highbd_lpf_horizontal_4_neon((uint64_t)&a1->i64[v49], v59, v19, v35, v58, v36);
LABEL_22:
      v18 = 1;
      a7 = v60;
      a2 = v59;
      v16 = v36;
      goto LABEL_5;
    }
    v17 = a7;
    vpx_highbd_lpf_horizontal_4_neon((uint64_t)&a1->i64[v49], v59, (const char *)(a7 + 48 * *a8), (const char *)(a7 + 48 * *a8 + 16), (const char *)(a7 + 48 * *a8 + 32), a9);
    a7 = v17;
    v16 = a9;
    a2 = v59;
LABEL_4:
    v18 = 1;
    goto LABEL_5;
  }
}

void filter_selectively_horiz(uint8x8_t *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned __int8 *a8)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  const char *v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  int8x8_t *v28;
  int8x8_t v29;
  int8x8_t *v30;
  int8x8_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  uint8x8_t *v34;
  uint8x8_t v35;
  int8x8_t v36;
  uint8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  int8x8_t v41;
  int8x8_t v42;
  int8x8_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int8x8_t *v53;
  int8x8_t *v54;
  int8x8_t *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  int8x8_t v64;
  uint8x16_t v65;
  int8x8_t v66;
  const char *v67;
  uint8x16_t v68;
  const char *v69;
  int8x8_t v70;
  const char *v71;
  uint8x16_t v72;
  int8x16_t *v73;
  int8x16_t v74;
  int8x16_t *v75;
  int8x16_t v76;
  int8x16_t *v77;
  int8x16_t v78;
  uint8x16_t *v79;
  uint8x16_t v80;
  int8x16_t v81;
  uint8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t *v94;
  const char *v95;
  uint64_t v96;
  const char *v97;
  unsigned int v98;
  const char *v99;
  const char *v100;
  const char *v101;
  int8x8_t v102;
  uint8x16_t v103;
  uint8x16_t v104;
  uint8x16_t v105;
  uint8x16_t *v106;
  uint8x16_t v107;
  int8x16_t *v108;
  int8x16_t v109;
  int8x16_t *v110;
  int8x16_t v111;
  int8x16_t *v112;
  int8x16_t v113;
  uint8x16_t *v114;
  uint8x16_t v115;
  int8x16_t v116;
  uint8x16_t v117;
  uint8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t *v128;
  int8x16_t *v129;
  int8x8_t v130;
  uint8x16_t v131;
  int8x8_t v132;
  uint8x16_t v133;
  int8x8_t v134;
  uint8x16_t v135;
  int8x16_t *v136;
  int8x16_t v137;
  int8x16_t *v138;
  int8x16_t v139;
  int8x16_t *v140;
  int8x16_t v141;
  uint8x16_t *v142;
  uint8x16_t v143;
  int8x16_t v144;
  uint8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t *v155;
  int8x16_t *v156;
  int8x16_t *v157;
  const char *v158;
  const char *v159;
  const char *v160;
  const char *v161;
  const char *v162;
  uint64_t v163;
  const char *v164;
  unsigned int v165;
  const char *v166;
  uint8x8_t v167;
  uint8x8_t *v168;
  uint8x8_t v169;
  int8x8_t *v170;
  int8x8_t v171;
  int8x8_t *v172;
  int8x8_t v173;
  int8x8_t *v174;
  int8x8_t v175;
  uint8x8_t *v176;
  uint8x8_t v177;
  int8x8_t v178;
  uint8x8_t v179;
  uint8x8_t v180;
  int8x8_t v181;
  int8x8_t v182;
  int8x8_t v183;
  int8x8_t v184;
  int8x8_t v185;
  int8x8_t v186;
  int8x8_t v187;
  int8x8_t v188;
  int8x8_t v189;
  int8x8_t *v190;
  int8x8_t *v191;
  uint8x8_t v192;
  uint8x8_t v193;
  uint8x8_t v194;
  int8x8_t *v195;
  int8x8_t v196;
  int8x8_t *v197;
  int8x8_t v198;
  int8x8_t *v199;
  int8x8_t v200;
  uint8x8_t *v201;
  uint8x8_t v202;
  int8x8_t v203;
  uint8x8_t v204;
  int8x8_t v205;
  int8x8_t v206;
  int8x8_t v207;
  int8x8_t v208;
  int8x8_t v209;
  int8x8_t v210;
  int8x8_t v211;
  int8x8_t v212;
  int8x8_t v213;
  int8x8_t v214;
  int8x8_t v215;
  uint8x8_t v216;
  uint8x8_t v217;
  uint8x8_t v218;
  int8x8_t *v219;
  int8x8_t v220;
  int8x8_t *v221;
  int8x8_t v222;
  int8x8_t *v223;
  int8x8_t v224;
  uint8x8_t *v225;
  uint8x8_t v226;
  int8x8_t v227;
  uint8x8_t v228;
  int8x8_t v229;
  int8x8_t v230;
  int8x8_t v231;
  int8x8_t v232;
  int8x8_t v233;
  int8x8_t v234;
  int8x8_t v235;
  int8x8_t v236;
  int8x8_t v237;
  int8x8_t *v238;
  int8x8_t *v239;
  int8x8_t *v240;
  uint8x8_t v241;
  uint8x8_t v242;
  uint8x8_t v243;
  int8x8_t *v244;
  int8x8_t v245;
  int8x8_t *v246;
  int8x8_t v247;
  int8x8_t *v248;
  int8x8_t v249;
  uint8x8_t *v250;
  uint8x8_t v251;
  int8x8_t v252;
  uint8x8_t v253;
  int8x8_t v254;
  int8x8_t v255;
  int8x8_t v256;
  int8x8_t v257;
  int8x8_t v258;
  int8x8_t v259;
  int8x8_t v260;
  int8x8_t v261;
  int8x8_t v262;
  int8x8_t v263;
  int8x8_t v264;
  int8x8_t *v265;
  int8x8_t *v266;
  int8x8_t *v267;
  uint8x8_t v268;
  uint8x8_t v269;
  uint8x8_t v270;
  uint8x8_t *v271;
  uint8x8_t v272;
  int8x8_t *v273;
  int8x8_t v274;
  int8x8_t *v275;
  int8x8_t v276;
  int8x8_t *v277;
  int8x8_t v278;
  uint8x8_t *v279;
  uint8x8_t v280;
  int8x8_t v281;
  uint8x8_t v282;
  uint8x8_t v283;
  int8x8_t v284;
  int8x8_t v285;
  int8x8_t v286;
  int8x8_t v287;
  int8x8_t v288;
  int8x8_t v289;
  int8x8_t v290;
  int8x8_t v291;
  int8x8_t v292;
  int8x8_t v293;
  int8x8_t v294;
  int8x8_t v295;
  int8x8_t v296;
  int8x8_t v297;
  int8x8_t *v298;
  int8x8_t *v299;
  uint8x8_t v300;
  uint8x8_t v301;
  uint8x8_t v302;
  int8x8_t *v303;
  int8x8_t v304;
  int8x8_t *v305;
  int8x8_t v306;
  int8x8_t *v307;
  int8x8_t v308;
  uint8x8_t *v309;
  uint8x8_t v310;
  int8x8_t v311;
  uint8x8_t v312;
  int8x8_t v313;
  int8x8_t v314;
  int8x8_t v315;
  int8x8_t v316;
  int8x8_t v317;
  int8x8_t v318;
  int8x8_t v319;
  int8x8_t v320;
  int8x8_t v321;
  int8x8_t v322;
  int8x8_t v323;
  int8x8_t *v324;
  int8x8_t *v325;
  int8x8_t *v326;
  uint8x8_t v327;
  uint8x8_t v328;
  uint8x8_t v329;
  uint8x8_t *v330;
  uint8x8_t v331;
  int8x8_t *v332;
  int8x8_t v333;
  int8x8_t *v334;
  int8x8_t v335;
  int8x8_t *v336;
  int8x8_t v337;
  uint8x8_t *v338;
  uint8x8_t v339;
  int8x8_t v340;
  uint8x8_t v341;
  uint8x8_t v342;
  int8x8_t v343;
  int8x8_t v344;
  int8x8_t v345;
  int8x8_t v346;
  int8x8_t v347;
  int8x8_t v348;
  int8x8_t v349;
  int8x8_t v350;
  int8x8_t v351;
  int8x8_t v352;
  int8x8_t v353;
  int8x8_t v354;
  int8x8_t v355;
  int8x8_t v356;
  int8x8_t *v357;
  int8x8_t *v358;
  const char *v359;
  const char *v360;
  const char *v361;
  uint64_t v363;
  uint64_t v364;

  v8 = a4;
  v9 = a5;
  v10 = a6;
  v11 = a3;
  v12 = a4 | (unint64_t)a3 | a5 | (unint64_t)a6;
  if (v12)
  {
    v14 = a7;
    v16 = a2;
    v363 = 4 * a2;
    v17.i64[0] = 0x8080808080808080;
    v17.i64[1] = 0x8080808080808080;
    v18.i64[0] = 0x404040404040404;
    v18.i64[1] = 0x404040404040404;
    v19.i64[0] = 0x303030303030303;
    v19.i64[1] = 0x303030303030303;
    v20 = -2 * a2;
    v364 = v20;
    while (1)
    {
      if ((v12 & 1) == 0)
        goto LABEL_4;
      v22 = (char *)(v14 + 48 * *a8);
      if ((v11 & 1) != 0)
        break;
      if ((v8 & 1) != 0)
      {
        if ((~(_BYTE)v8 & 3) != 0)
        {
          v158 = (const char *)(v14 + 48 * *a8);
          v159 = v158 + 16;
          v160 = v158 + 32;
          v161 = v158;
          vpx_lpf_horizontal_8_neon((uint64_t)a1, a2, v22, v158 + 16, v158 + 32);
          if ((v10 & 1) != 0)
          {
            v216 = (uint8x8_t)vld1_dup_s8(v161);
            v217 = (uint8x8_t)vld1_dup_s8(v159);
            v218 = (uint8x8_t)vld1_dup_s8(v160);
            v16 = a2;
            v219 = (int8x8_t *)((char *)a1 + a2 + a2);
            v220 = *v219;
            v221 = (int8x8_t *)((char *)v219 + a2);
            v222 = *v221;
            v223 = (int8x8_t *)((char *)v221 + a2);
            v224 = *v223;
            v225 = (uint8x8_t *)((char *)v223 + a2);
            v226 = vmax_u8(vabd_u8((uint8x8_t)v220, (uint8x8_t)v222), vabd_u8(*v225, (uint8x8_t)v224));
            v227 = (int8x8_t)vcgt_u8(v226, v218);
            v228 = vabd_u8((uint8x8_t)v222, (uint8x8_t)v224);
            v229 = vand_s8((int8x8_t)vcge_u8(v216, vqadd_u8(vqadd_u8(v228, v228), vshr_n_u8(vabd_u8((uint8x8_t)v220, *v225), 1uLL))), (int8x8_t)vcge_u8(v217, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v226, vabd_u8(*a1, *(uint8x8_t *)((char *)a1 + a2))), vabd_u8(*(uint8x8_t *)((char *)a1 + a2), (uint8x8_t)v220)), vabd_u8(*(uint8x8_t *)((char *)v225 + a2), *v225)), vabd_u8(*(uint8x8_t *)((char *)v225 + a2 + a2), *(uint8x8_t *)((char *)v225 + a2)))));
            v230 = veor_s8(v220, (int8x8_t)0x8080808080808080);
            v231 = veor_s8(v222, (int8x8_t)0x8080808080808080);
            v232 = veor_s8(v224, (int8x8_t)0x8080808080808080);
            v233 = veor_s8((int8x8_t)*v225, (int8x8_t)0x8080808080808080);
            v234 = vqsub_s8(v232, v231);
            v235 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v230, v233), v227), v234), v234), v234), v229);
            v236 = vshr_n_s8(vqadd_s8(v235, (int8x8_t)0x404040404040404), 3uLL);
            v237 = vbic_s8(vrshr_n_s8(v236, 1uLL), v227);
            v20 = -2 * a2;
            v238 = (int8x8_t *)((char *)a1 + v363 + v364);
            *v238 = veor_s8(vqadd_s8(v230, v237), (int8x8_t)0x8080808080808080);
            v239 = (int8x8_t *)((char *)v238 + a2);
            *v239 = veor_s8(vqadd_s8(v231, vshr_n_s8(vqadd_s8(v235, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
            v240 = (int8x8_t *)((char *)v239 + a2);
            *v240 = veor_s8(vqsub_s8(v232, v236), (int8x8_t)0x8080808080808080);
            *(int8x8_t *)((char *)v240 + a2) = veor_s8(vqsub_s8(v233, v237), (int8x8_t)0x8080808080808080);
            v21 = 1;
            v17.i64[0] = 0x8080808080808080;
            v17.i64[1] = 0x8080808080808080;
            v18.i64[0] = 0x404040404040404;
            v18.i64[1] = 0x404040404040404;
            v19.i64[0] = 0x303030303030303;
            v19.i64[1] = 0x303030303030303;
            v14 = a7;
            goto LABEL_5;
          }
          v21 = 1;
          goto LABEL_22;
        }
        v59 = v14;
        v60 = (const char *)(v14 + 48 * a8[1]);
        v61 = v59 + 48 * *a8;
        v63 = v22;
        v360 = (const char *)(v61 + 16);
        v361 = (const char *)(v61 + 32);
        vpx_lpf_horizontal_8_dual_neon((uint64_t)a1, a2, v22, (const char *)(v61 + 16), (const char *)(v61 + 32), v60, v60 + 16, v60 + 32);
        if ((~(_BYTE)v10 & 3) != 0)
        {
          if ((v10 & 1) != 0)
          {
            v241 = (uint8x8_t)vld1_dup_s8(v63);
            v242 = (uint8x8_t)vld1_dup_s8(v360);
            v243 = (uint8x8_t)vld1_dup_s8(v361);
            v16 = a2;
            v244 = (int8x8_t *)((char *)a1 + a2 + a2);
            v245 = *v244;
            v246 = (int8x8_t *)((char *)v244 + a2);
            v247 = *v246;
            v248 = (int8x8_t *)((char *)v246 + a2);
            v249 = *v248;
            v250 = (uint8x8_t *)((char *)v248 + a2);
            v251 = vmax_u8(vabd_u8((uint8x8_t)v245, (uint8x8_t)v247), vabd_u8(*v250, (uint8x8_t)v249));
            v252 = (int8x8_t)vcgt_u8(v251, v243);
            v253 = vabd_u8((uint8x8_t)v247, (uint8x8_t)v249);
            v254 = vand_s8((int8x8_t)vcge_u8(v241, vqadd_u8(vqadd_u8(v253, v253), vshr_n_u8(vabd_u8((uint8x8_t)v245, *v250), 1uLL))), (int8x8_t)vcge_u8(v242, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v251, vabd_u8(*a1, *(uint8x8_t *)((char *)a1 + a2))), vabd_u8(*(uint8x8_t *)((char *)a1 + a2), (uint8x8_t)v245)), vabd_u8(*(uint8x8_t *)((char *)v250 + a2), *v250)), vabd_u8(*(uint8x8_t *)((char *)v250 + a2 + a2), *(uint8x8_t *)((char *)v250 + a2)))));
            v255 = veor_s8(v245, (int8x8_t)0x8080808080808080);
            v256 = veor_s8(v247, (int8x8_t)0x8080808080808080);
            v257 = veor_s8(v249, (int8x8_t)0x8080808080808080);
            v258 = veor_s8((int8x8_t)*v250, (int8x8_t)0x8080808080808080);
            v259 = vqsub_s8(v257, v256);
            v260 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v255, v258), v252), v259), v259), v259), v254);
            v261 = vshr_n_s8(vqadd_s8(v260, (int8x8_t)0x404040404040404), 3uLL);
            v262 = vbic_s8(vrshr_n_s8(v261, 1uLL), v252);
            v263 = vqadd_s8(v255, v262);
            v264 = veor_s8(vqsub_s8(v258, v262), (int8x8_t)0x8080808080808080);
            v20 = -2 * a2;
            v265 = (int8x8_t *)((char *)a1 + v363 + v364);
            *v265 = veor_s8(v263, (int8x8_t)0x8080808080808080);
            v266 = (int8x8_t *)((char *)v265 + a2);
            *v266 = veor_s8(vqadd_s8(v256, vshr_n_s8(vqadd_s8(v260, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
            v267 = (int8x8_t *)((char *)v266 + a2);
            *v267 = veor_s8(vqsub_s8(v257, v261), (int8x8_t)0x8080808080808080);
LABEL_34:
            *(int8x8_t *)((char *)v267 + v16) = v264;
            v21 = 2;
            v14 = a7;
            v17.i64[0] = 0x8080808080808080;
            v17.i64[1] = 0x8080808080808080;
            v18.i64[0] = 0x404040404040404;
            v18.i64[1] = 0x404040404040404;
            v19.i64[0] = 0x303030303030303;
            v19.i64[1] = 0x303030303030303;
            goto LABEL_5;
          }
          if ((v10 & 2) != 0)
          {
            v268 = (uint8x8_t)vld1_dup_s8(v60);
            v162 = v60 + 16;
            v269 = (uint8x8_t)vld1_dup_s8(v162);
            v359 = v60 + 32;
            v270 = (uint8x8_t)vld1_dup_s8(v359);
            v16 = a2;
            v271 = (uint8x8_t *)((char *)a1 + a2 + 8);
            v272 = *v271;
            v273 = (int8x8_t *)((char *)v271 + a2);
            v274 = *v273;
            v275 = (int8x8_t *)((char *)v273 + a2);
            v276 = *v275;
            v277 = (int8x8_t *)((char *)v275 + a2);
            v278 = *v277;
            v279 = (uint8x8_t *)((char *)v277 + a2);
            v280 = vmax_u8(vabd_u8((uint8x8_t)v274, (uint8x8_t)v276), vabd_u8(*v279, (uint8x8_t)v278));
            v281 = (int8x8_t)vcgt_u8(v280, v270);
            v282 = vmax_u8(vmax_u8(vmax_u8(vmax_u8(v280, vabd_u8(a1[1], v272)), vabd_u8(v272, (uint8x8_t)v274)), vabd_u8(*(uint8x8_t *)((char *)v279 + a2), *v279)), vabd_u8(*(uint8x8_t *)((char *)v279 + a2 + a2), *(uint8x8_t *)((char *)v279 + a2)));
            v283 = vabd_u8((uint8x8_t)v276, (uint8x8_t)v278);
            v284 = (int8x8_t)vcge_u8(v269, v282);
            v285 = (int8x8_t)vcge_u8(v268, vqadd_u8(vqadd_u8(v283, v283), vshr_n_u8(vabd_u8((uint8x8_t)v274, *v279), 1uLL)));
            v286 = veor_s8(v274, (int8x8_t)0x8080808080808080);
            v287 = veor_s8(v276, (int8x8_t)0x8080808080808080);
            v288 = veor_s8(v278, (int8x8_t)0x8080808080808080);
            v289 = veor_s8((int8x8_t)*v279, (int8x8_t)0x8080808080808080);
            v290 = vqsub_s8(v288, v287);
            v291 = vand_s8(vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v286, v289), v281), v290), v290), v290), v285), v284);
            v292 = vshr_n_s8(vqadd_s8(v291, (int8x8_t)0x404040404040404), 3uLL);
            v293 = vqadd_s8(v287, vshr_n_s8(vqadd_s8(v291, (int8x8_t)0x303030303030303), 3uLL));
            v294 = veor_s8(vqsub_s8(v288, v292), (int8x8_t)0x8080808080808080);
            v295 = vbic_s8(vrshr_n_s8(v292, 1uLL), v281);
            v296 = vqsub_s8(v289, v295);
            v297 = vqadd_s8(v286, v295);
            v264 = veor_s8(v296, (int8x8_t)0x8080808080808080);
            v20 = -2 * a2;
            v298 = (int8x8_t *)((char *)&a1[1] + v363 + v364);
            *v298 = veor_s8(v297, (int8x8_t)0x8080808080808080);
            v299 = (int8x8_t *)((char *)v298 + a2);
            *v299 = veor_s8(v293, (int8x8_t)0x8080808080808080);
            v267 = (int8x8_t *)((char *)v299 + a2);
            *v267 = v294;
            goto LABEL_34;
          }
          v21 = 2;
LABEL_22:
          v16 = a2;
          v14 = a7;
          v17.i64[0] = 0x8080808080808080;
          v17.i64[1] = 0x8080808080808080;
          v18.i64[0] = 0x404040404040404;
          v18.i64[1] = 0x404040404040404;
          v19.i64[0] = 0x303030303030303;
          v19.i64[1] = 0x303030303030303;
          v20 = -2 * a2;
          goto LABEL_5;
        }
        v64 = vld1_dup_s8(v60);
        *(int8x8_t *)v65.i8 = vld1_dup_s8(v63);
        v65.u64[1] = (unint64_t)v64;
        v62 = v60 + 16;
        v66 = vld1_dup_s8(v62);
        v67 = v360;
        *(int8x8_t *)v68.i8 = vld1_dup_s8(v67);
        v68.u64[1] = (unint64_t)v66;
        v69 = v60 + 32;
        v70 = vld1_dup_s8(v69);
        v71 = v361;
        v16 = a2;
        *(int8x8_t *)v72.i8 = vld1_dup_s8(v71);
        v72.u64[1] = (unint64_t)v70;
        v73 = (int8x16_t *)((char *)a1 + a2 + a2);
        v74 = *v73;
        v75 = (int8x16_t *)((char *)v73 + a2);
        v76 = *v75;
        v77 = (int8x16_t *)((char *)v75 + a2);
        v78 = *v77;
        v79 = (uint8x16_t *)&v77->i8[a2];
        v80 = vmaxq_u8(vabdq_u8((uint8x16_t)v74, (uint8x16_t)v76), vabdq_u8(*v79, (uint8x16_t)v78));
        v81 = (int8x16_t)vcgtq_u8(v80, v72);
        v82 = vabdq_u8((uint8x16_t)v76, (uint8x16_t)v78);
        v83 = vandq_s8((int8x16_t)vcgeq_u8(v65, vqaddq_u8(vqaddq_u8(v82, v82), vshrq_n_u8(vabdq_u8((uint8x16_t)v74, *v79), 1uLL))), (int8x16_t)vcgeq_u8(v68, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v80, vabdq_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)&a1->i8[a2])), vabdq_u8(*(uint8x16_t *)&a1->i8[a2], (uint8x16_t)v74)), vabdq_u8(*(uint8x16_t *)((char *)v79 + a2), *v79)), vabdq_u8(*(uint8x16_t *)((char *)v79 + a2 + a2), *(uint8x16_t *)((char *)v79 + a2)))));
        v17.i64[0] = 0x8080808080808080;
        v17.i64[1] = 0x8080808080808080;
        v84 = veorq_s8(v74, v17);
        v85 = veorq_s8(v76, v17);
        v86 = veorq_s8(v78, v17);
        v87 = veorq_s8(*(int8x16_t *)v79, v17);
        v88 = vqsubq_s8(v86, v85);
        v89 = vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v84, v87), v81), v88), v88), v88), v83);
        v18.i64[0] = 0x404040404040404;
        v18.i64[1] = 0x404040404040404;
        v90 = vshrq_n_s8(vqaddq_s8(v89, v18), 3uLL);
        v19.i64[0] = 0x303030303030303;
        v19.i64[1] = 0x303030303030303;
        v91 = vbicq_s8(vrshrq_n_s8(v90, 1uLL), v81);
        v20 = -2 * a2;
        v92 = (int8x16_t *)((char *)a1 + v363 + v364);
        *v92 = veorq_s8(vqaddq_s8(v84, v91), v17);
        v93 = (int8x16_t *)((char *)v92 + a2);
        *v93 = veorq_s8(vqaddq_s8(v85, vshrq_n_s8(vqaddq_s8(v89, v19), 3uLL)), v17);
        v94 = (int8x16_t *)((char *)v93 + a2);
        *v94 = veorq_s8(vqsubq_s8(v86, v90), v17);
        *(int8x16_t *)((char *)v94 + a2) = veorq_s8(vqsubq_s8(v87, v91), v17);
        v21 = 2;
        v14 = a7;
      }
      else
      {
        if ((v9 & 1) == 0)
        {
          v23 = (const char *)(v14 + 48 * *a8);
          v24 = v23 + 16;
          v25 = (uint8x8_t)vld1_dup_s8(v22);
          v26 = (uint8x8_t)vld1_dup_s8(v24);
          v23 += 32;
          v27 = (uint8x8_t)vld1_dup_s8(v23);
          v28 = (int8x8_t *)((char *)a1 + v16 + v16);
          v29 = *v28;
          v30 = (int8x8_t *)((char *)v28 + v16);
          v31 = *v30;
          v32 = (int8x8_t *)((char *)v30 + v16);
          v33 = *v32;
          v34 = (uint8x8_t *)((char *)v32 + v16);
          v35 = vmax_u8(vabd_u8((uint8x8_t)v29, (uint8x8_t)v31), vabd_u8(*v34, (uint8x8_t)v33));
          v36 = (int8x8_t)vcgt_u8(v35, v27);
          v37 = vabd_u8((uint8x8_t)v31, (uint8x8_t)v33);
          v38 = vand_s8((int8x8_t)vcge_u8(v25, vqadd_u8(vqadd_u8(v37, v37), vshr_n_u8(vabd_u8((uint8x8_t)v29, *v34), 1uLL))), (int8x8_t)vcge_u8(v26, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v35, vabd_u8(*a1, *(uint8x8_t *)((char *)a1 + v16))), vabd_u8(*(uint8x8_t *)((char *)a1 + v16), (uint8x8_t)v29)), vabd_u8(*(uint8x8_t *)((char *)v34 + v16), *v34)), vabd_u8(*(uint8x8_t *)((char *)v34 + v16 + v16), *(uint8x8_t *)((char *)v34 + v16)))));
          v39 = veor_s8(v29, (int8x8_t)0x8080808080808080);
          v40 = veor_s8(v31, (int8x8_t)0x8080808080808080);
          v41 = veor_s8(v33, (int8x8_t)0x8080808080808080);
          v42 = veor_s8((int8x8_t)*v34, (int8x8_t)0x8080808080808080);
          v43 = vqsub_s8(v41, v40);
          v44 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v39, v42), v36), v43), v43), v43), v38);
          v45 = vshr_n_s8(vqadd_s8(v44, (int8x8_t)0x404040404040404), 3uLL);
          v46 = vqadd_s8(v40, vshr_n_s8(vqadd_s8(v44, (int8x8_t)0x303030303030303), 3uLL));
          v47 = veor_s8(vqsub_s8(v41, v45), (int8x8_t)0x8080808080808080);
          v48 = veor_s8(v46, (int8x8_t)0x8080808080808080);
          v49 = vbic_s8(vrshr_n_s8(v45, 1uLL), v36);
          v50 = vqadd_s8(v39, v49);
          v51 = veor_s8(vqsub_s8(v42, v49), (int8x8_t)0x8080808080808080);
          v52 = veor_s8(v50, (int8x8_t)0x8080808080808080);
          v53 = (int8x8_t *)((char *)a1 + v363 + v20);
          goto LABEL_11;
        }
        if ((~(_BYTE)v9 & 3) != 0)
        {
          v163 = v14 + 48 * *a8;
          v165 = *(unsigned __int8 *)(v163 + 16);
          v164 = (const char *)(v163 + 16);
          v167 = (uint8x8_t)vld1_dup_s8(v22);
          v168 = (uint8x8_t *)((char *)a1 + v16 + -4 * a2);
          v169 = *v168;
          v170 = (int8x8_t *)((char *)v168 + v16);
          v171 = *v170;
          v172 = (int8x8_t *)((char *)v170 + v16);
          v173 = *v172;
          v174 = (int8x8_t *)((char *)v172 + v16);
          v175 = *v174;
          v176 = (uint8x8_t *)((char *)v174 + v16);
          v177 = vmax_u8(vabd_u8((uint8x8_t)v171, (uint8x8_t)v173), vabd_u8(*v176, (uint8x8_t)v175));
          v178 = (int8x8_t)vcgt_u8(v177, (uint8x8_t)vdup_n_s8(*((unsigned __int8 *)v164 + 16)));
          v179 = vmax_u8(vmax_u8(vmax_u8(vmax_u8(v177, vabd_u8(*(uint8x8_t *)((char *)a1 - 4 * a2), v169)), vabd_u8(v169, (uint8x8_t)v171)), vabd_u8(*(uint8x8_t *)((char *)v176 + v16), *v176)), vabd_u8(*(uint8x8_t *)((char *)v176 + v16 + v16), *(uint8x8_t *)((char *)v176 + v16)));
          v180 = vabd_u8((uint8x8_t)v173, (uint8x8_t)v175);
          v181 = vand_s8((int8x8_t)vcge_u8(v167, vqadd_u8(vqadd_u8(v180, v180), vshr_n_u8(vabd_u8((uint8x8_t)v171, *v176), 1uLL))), (int8x8_t)vcge_u8((uint8x8_t)vdup_n_s8(v165), v179));
          v182 = veor_s8(v171, (int8x8_t)0x8080808080808080);
          v183 = veor_s8(v173, (int8x8_t)0x8080808080808080);
          v184 = veor_s8(v175, (int8x8_t)0x8080808080808080);
          v185 = veor_s8((int8x8_t)*v176, (int8x8_t)0x8080808080808080);
          v186 = vqsub_s8(v184, v183);
          v187 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v182, v185), v178), v186), v186), v186), v181);
          v188 = vshr_n_s8(vqadd_s8(v187, (int8x8_t)0x404040404040404), 3uLL);
          v189 = vbic_s8(vrshr_n_s8(v188, 1uLL), v178);
          *(int8x8_t *)((char *)a1 + v20) = veor_s8(vqadd_s8(v182, v189), (int8x8_t)0x8080808080808080);
          v190 = (int8x8_t *)((char *)a1 + v20 + v16);
          *v190 = veor_s8(vqadd_s8(v183, vshr_n_s8(vqadd_s8(v187, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
          v191 = (int8x8_t *)((char *)v190 + v16);
          *v191 = veor_s8(vqsub_s8(v184, v188), (int8x8_t)0x8080808080808080);
          *(int8x8_t *)((char *)v191 + v16) = veor_s8(vqsub_s8(v185, v189), (int8x8_t)0x8080808080808080);
          if ((v10 & 1) != 0)
          {
            v192 = (uint8x8_t)vld1_dup_s8(v22);
            v193 = (uint8x8_t)vld1_dup_s8(v164);
            v166 = v164 + 16;
            v194 = (uint8x8_t)vld1_dup_s8(v166);
            v195 = (int8x8_t *)((char *)a1 + v16 + v16);
            v196 = *v195;
            v197 = (int8x8_t *)((char *)v195 + v16);
            v198 = *v197;
            v199 = (int8x8_t *)((char *)v197 + v16);
            v200 = *v199;
            v201 = (uint8x8_t *)((char *)v199 + v16);
            v202 = vmax_u8(vabd_u8((uint8x8_t)v196, (uint8x8_t)v198), vabd_u8(*v201, (uint8x8_t)v200));
            v203 = (int8x8_t)vcgt_u8(v202, v194);
            v204 = vabd_u8((uint8x8_t)v198, (uint8x8_t)v200);
            v205 = vand_s8((int8x8_t)vcge_u8(v192, vqadd_u8(vqadd_u8(v204, v204), vshr_n_u8(vabd_u8((uint8x8_t)v196, *v201), 1uLL))), (int8x8_t)vcge_u8(v193, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v202, vabd_u8(*a1, *(uint8x8_t *)((char *)a1 + v16))), vabd_u8(*(uint8x8_t *)((char *)a1 + v16), (uint8x8_t)v196)), vabd_u8(*(uint8x8_t *)((char *)v201 + v16), *v201)), vabd_u8(*(uint8x8_t *)((char *)v201 + v16 + v16), *(uint8x8_t *)((char *)v201 + v16)))));
            v206 = veor_s8(v196, (int8x8_t)0x8080808080808080);
            v207 = veor_s8(v198, (int8x8_t)0x8080808080808080);
            v208 = veor_s8(v200, (int8x8_t)0x8080808080808080);
            v209 = veor_s8((int8x8_t)*v201, (int8x8_t)0x8080808080808080);
            v210 = vqsub_s8(v208, v207);
            v211 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v206, v209), v203), v210), v210), v210), v205);
            v212 = vshr_n_s8(vqadd_s8(v211, (int8x8_t)0x404040404040404), 3uLL);
            v213 = vqadd_s8(v207, vshr_n_s8(vqadd_s8(v211, (int8x8_t)0x303030303030303), 3uLL));
            v47 = veor_s8(vqsub_s8(v208, v212), (int8x8_t)0x8080808080808080);
            v48 = veor_s8(v213, (int8x8_t)0x8080808080808080);
            v214 = vbic_s8(vrshr_n_s8(v212, 1uLL), v203);
            v215 = vqadd_s8(v206, v214);
            v51 = veor_s8(vqsub_s8(v209, v214), (int8x8_t)0x8080808080808080);
            v52 = veor_s8(v215, (int8x8_t)0x8080808080808080);
            v53 = (int8x8_t *)((char *)a1 + v363 + v20);
LABEL_11:
            *v53 = v52;
            v54 = (int8x8_t *)((char *)v53 + v16);
            *v54 = v48;
            v55 = (int8x8_t *)((char *)v54 + v16);
            *v55 = v47;
            *(int8x8_t *)((char *)v55 + v16) = v51;
          }
LABEL_4:
          v21 = 1;
          goto LABEL_5;
        }
        v95 = (const char *)(v14 + 48 * a8[1]);
        v96 = v14 + 48 * *a8;
        v98 = *(unsigned __int8 *)(v96 + 16);
        v97 = (const char *)(v96 + 16);
        v99 = v97 + 16;
        v100 = v95 + 16;
        v101 = v95 + 32;
        v102 = vld1_dup_s8(v95);
        *(int8x8_t *)v103.i8 = vld1_dup_s8(v22);
        v103.u64[1] = (unint64_t)v102;
        *(int8x8_t *)v104.i8 = vdup_n_s8(v98);
        v104.u64[1] = (unint64_t)vdup_n_s8(*((unsigned __int8 *)v95 + 16));
        *(int8x8_t *)v105.i8 = vdup_n_s8(*((unsigned __int8 *)v97 + 16));
        v105.u64[1] = (unint64_t)vdup_n_s8(*((unsigned __int8 *)v95 + 32));
        v106 = (uint8x16_t *)((char *)a1 + v16 + -4 * a2);
        v107 = *v106;
        v108 = (int8x16_t *)&v106->i8[v16];
        v109 = *v108;
        v110 = (int8x16_t *)((char *)v108 + v16);
        v111 = *v110;
        v112 = (int8x16_t *)((char *)v110 + v16);
        v113 = *v112;
        v114 = (uint8x16_t *)&v112->i8[v16];
        v115 = vmaxq_u8(vabdq_u8((uint8x16_t)v109, (uint8x16_t)v111), vabdq_u8(*v114, (uint8x16_t)v113));
        v116 = (int8x16_t)vcgtq_u8(v115, v105);
        v117 = vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v115, vabdq_u8(*(uint8x16_t *)&a1->i8[-4 * a2], v107)), vabdq_u8(v107, (uint8x16_t)v109)), vabdq_u8(*(uint8x16_t *)((char *)v114 + v16), *v114)), vabdq_u8(*(uint8x16_t *)((char *)v114 + v16 + v16), *(uint8x16_t *)((char *)v114 + v16)));
        v118 = vabdq_u8((uint8x16_t)v111, (uint8x16_t)v113);
        v119 = vandq_s8((int8x16_t)vcgeq_u8(v103, vqaddq_u8(vqaddq_u8(v118, v118), vshrq_n_u8(vabdq_u8((uint8x16_t)v109, *v114), 1uLL))), (int8x16_t)vcgeq_u8(v104, v117));
        v120 = veorq_s8(v109, v17);
        v121 = veorq_s8(v111, v17);
        v122 = veorq_s8(v113, v17);
        v123 = veorq_s8(*(int8x16_t *)v114, v17);
        v124 = vqsubq_s8(v122, v121);
        v125 = vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v120, v123), v116), v124), v124), v124), v119);
        v126 = vshrq_n_s8(vqaddq_s8(v125, v18), 3uLL);
        v127 = vbicq_s8(vrshrq_n_s8(v126, 1uLL), v116);
        *(int8x16_t *)&a1->i8[v20] = veorq_s8(vqaddq_s8(v120, v127), v17);
        v128 = (int8x16_t *)((char *)a1 + v20 + v16);
        *v128 = veorq_s8(vqaddq_s8(v121, vshrq_n_s8(vqaddq_s8(v125, v19), 3uLL)), v17);
        v129 = (int8x16_t *)((char *)v128 + v16);
        *v129 = veorq_s8(vqsubq_s8(v122, v126), v17);
        *(int8x16_t *)((char *)v129 + v16) = veorq_s8(vqsubq_s8(v123, v127), v17);
        if ((~(_BYTE)v10 & 3) != 0)
        {
          if ((v10 & 1) != 0)
          {
            v300 = (uint8x8_t)vld1_dup_s8(v22);
            v301 = (uint8x8_t)vld1_dup_s8(v97);
            v302 = (uint8x8_t)vld1_dup_s8(v99);
            v303 = (int8x8_t *)((char *)a1 + v16 + v16);
            v304 = *v303;
            v305 = (int8x8_t *)((char *)v303 + v16);
            v306 = *v305;
            v307 = (int8x8_t *)((char *)v305 + v16);
            v308 = *v307;
            v309 = (uint8x8_t *)((char *)v307 + v16);
            v310 = vmax_u8(vabd_u8((uint8x8_t)v304, (uint8x8_t)v306), vabd_u8(*v309, (uint8x8_t)v308));
            v311 = (int8x8_t)vcgt_u8(v310, v302);
            v312 = vabd_u8((uint8x8_t)v306, (uint8x8_t)v308);
            v313 = vand_s8((int8x8_t)vcge_u8(v300, vqadd_u8(vqadd_u8(v312, v312), vshr_n_u8(vabd_u8((uint8x8_t)v304, *v309), 1uLL))), (int8x8_t)vcge_u8(v301, vmax_u8(vmax_u8(vmax_u8(vmax_u8(v310, vabd_u8(*a1, *(uint8x8_t *)((char *)a1 + v16))), vabd_u8(*(uint8x8_t *)((char *)a1 + v16), (uint8x8_t)v304)), vabd_u8(*(uint8x8_t *)((char *)v309 + v16), *v309)), vabd_u8(*(uint8x8_t *)((char *)v309 + v16 + v16), *(uint8x8_t *)((char *)v309 + v16)))));
            v314 = veor_s8(v304, (int8x8_t)0x8080808080808080);
            v315 = veor_s8(v306, (int8x8_t)0x8080808080808080);
            v316 = veor_s8(v308, (int8x8_t)0x8080808080808080);
            v317 = veor_s8((int8x8_t)*v309, (int8x8_t)0x8080808080808080);
            v318 = vqsub_s8(v316, v315);
            v319 = vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v314, v317), v311), v318), v318), v318), v313);
            v320 = vshr_n_s8(vqadd_s8(v319, (int8x8_t)0x404040404040404), 3uLL);
            v321 = vbic_s8(vrshr_n_s8(v320, 1uLL), v311);
            v322 = vqadd_s8(v314, v321);
            v323 = veor_s8(vqsub_s8(v317, v321), (int8x8_t)0x8080808080808080);
            v324 = (int8x8_t *)((char *)a1 + v363 + v20);
            *v324 = veor_s8(v322, (int8x8_t)0x8080808080808080);
            v325 = (int8x8_t *)((char *)v324 + v16);
            *v325 = veor_s8(vqadd_s8(v315, vshr_n_s8(vqadd_s8(v319, (int8x8_t)0x303030303030303), 3uLL)), (int8x8_t)0x8080808080808080);
            v326 = (int8x8_t *)((char *)v325 + v16);
            *v326 = veor_s8(vqsub_s8(v316, v320), (int8x8_t)0x8080808080808080);
LABEL_37:
            *(int8x8_t *)((char *)v326 + v16) = v323;
            v21 = 2;
            goto LABEL_5;
          }
          if ((v10 & 2) != 0)
          {
            v327 = (uint8x8_t)vld1_dup_s8(v95);
            v328 = (uint8x8_t)vld1_dup_s8(v100);
            v329 = (uint8x8_t)vld1_dup_s8(v101);
            v330 = (uint8x8_t *)((char *)a1 + v16 + 8);
            v331 = *v330;
            v332 = (int8x8_t *)((char *)v330 + v16);
            v333 = *v332;
            v334 = (int8x8_t *)((char *)v332 + v16);
            v335 = *v334;
            v336 = (int8x8_t *)((char *)v334 + v16);
            v337 = *v336;
            v338 = (uint8x8_t *)((char *)v336 + v16);
            v339 = vmax_u8(vabd_u8((uint8x8_t)v333, (uint8x8_t)v335), vabd_u8(*v338, (uint8x8_t)v337));
            v340 = (int8x8_t)vcgt_u8(v339, v329);
            v341 = vmax_u8(vmax_u8(vmax_u8(vmax_u8(v339, vabd_u8(a1[1], v331)), vabd_u8(v331, (uint8x8_t)v333)), vabd_u8(*(uint8x8_t *)((char *)v338 + v16), *v338)), vabd_u8(*(uint8x8_t *)((char *)v338 + v16 + v16), *(uint8x8_t *)((char *)v338 + v16)));
            v342 = vabd_u8((uint8x8_t)v335, (uint8x8_t)v337);
            v343 = (int8x8_t)vcge_u8(v328, v341);
            v344 = (int8x8_t)vcge_u8(v327, vqadd_u8(vqadd_u8(v342, v342), vshr_n_u8(vabd_u8((uint8x8_t)v333, *v338), 1uLL)));
            v345 = veor_s8(v333, (int8x8_t)0x8080808080808080);
            v346 = veor_s8(v335, (int8x8_t)0x8080808080808080);
            v347 = veor_s8(v337, (int8x8_t)0x8080808080808080);
            v348 = veor_s8((int8x8_t)*v338, (int8x8_t)0x8080808080808080);
            v349 = vqsub_s8(v347, v346);
            v350 = vand_s8(vand_s8(vqadd_s8(vqadd_s8(vqadd_s8(vand_s8(vqsub_s8(v345, v348), v340), v349), v349), v349), v344), v343);
            v351 = vshr_n_s8(vqadd_s8(v350, (int8x8_t)0x404040404040404), 3uLL);
            v352 = vqadd_s8(v346, vshr_n_s8(vqadd_s8(v350, (int8x8_t)0x303030303030303), 3uLL));
            v353 = veor_s8(vqsub_s8(v347, v351), (int8x8_t)0x8080808080808080);
            v354 = vbic_s8(vrshr_n_s8(v351, 1uLL), v340);
            v355 = vqsub_s8(v348, v354);
            v356 = vqadd_s8(v345, v354);
            v323 = veor_s8(v355, (int8x8_t)0x8080808080808080);
            v357 = (int8x8_t *)((char *)&a1[1] + v363 + v20);
            *v357 = veor_s8(v356, (int8x8_t)0x8080808080808080);
            v358 = (int8x8_t *)((char *)v357 + v16);
            *v358 = veor_s8(v352, (int8x8_t)0x8080808080808080);
            v326 = (int8x8_t *)((char *)v358 + v16);
            *v326 = v353;
            goto LABEL_37;
          }
          v21 = 2;
        }
        else
        {
          v130 = vld1_dup_s8(v95);
          *(int8x8_t *)v131.i8 = vld1_dup_s8(v22);
          v131.u64[1] = (unint64_t)v130;
          v132 = vld1_dup_s8(v100);
          *(int8x8_t *)v133.i8 = vld1_dup_s8(v97);
          v133.u64[1] = (unint64_t)v132;
          v134 = vld1_dup_s8(v101);
          *(int8x8_t *)v135.i8 = vld1_dup_s8(v99);
          v135.u64[1] = (unint64_t)v134;
          v136 = (int8x16_t *)((char *)a1 + v16 + v16);
          v137 = *v136;
          v138 = (int8x16_t *)((char *)v136 + v16);
          v139 = *v138;
          v140 = (int8x16_t *)((char *)v138 + v16);
          v141 = *v140;
          v142 = (uint8x16_t *)&v140->i8[v16];
          v143 = vmaxq_u8(vabdq_u8((uint8x16_t)v137, (uint8x16_t)v139), vabdq_u8(*v142, (uint8x16_t)v141));
          v144 = (int8x16_t)vcgtq_u8(v143, v135);
          v145 = vabdq_u8((uint8x16_t)v139, (uint8x16_t)v141);
          v146 = vandq_s8((int8x16_t)vcgeq_u8(v131, vqaddq_u8(vqaddq_u8(v145, v145), vshrq_n_u8(vabdq_u8((uint8x16_t)v137, *v142), 1uLL))), (int8x16_t)vcgeq_u8(v133, vmaxq_u8(vmaxq_u8(vmaxq_u8(vmaxq_u8(v143, vabdq_u8(*(uint8x16_t *)a1->i8, *(uint8x16_t *)&a1->i8[v16])), vabdq_u8(*(uint8x16_t *)&a1->i8[v16], (uint8x16_t)v137)), vabdq_u8(*(uint8x16_t *)((char *)v142 + v16), *v142)), vabdq_u8(*(uint8x16_t *)((char *)v142 + v16 + v16), *(uint8x16_t *)((char *)v142 + v16)))));
          v147 = veorq_s8(v137, v17);
          v148 = veorq_s8(v139, v17);
          v149 = veorq_s8(v141, v17);
          v150 = veorq_s8(*(int8x16_t *)v142, v17);
          v151 = vqsubq_s8(v149, v148);
          v152 = vandq_s8(vqaddq_s8(vqaddq_s8(vqaddq_s8(vandq_s8(vqsubq_s8(v147, v150), v144), v151), v151), v151), v146);
          v153 = vshrq_n_s8(vqaddq_s8(v152, v18), 3uLL);
          v154 = vbicq_s8(vrshrq_n_s8(v153, 1uLL), v144);
          v155 = (int8x16_t *)((char *)a1 + v363 + v20);
          *v155 = veorq_s8(vqaddq_s8(v147, v154), v17);
          v156 = (int8x16_t *)((char *)v155 + v16);
          *v156 = veorq_s8(vqaddq_s8(v148, vshrq_n_s8(vqaddq_s8(v152, v19), 3uLL)), v17);
          v157 = (int8x16_t *)((char *)v156 + v16);
          *v157 = veorq_s8(vqsubq_s8(v149, v153), v17);
          *(int8x16_t *)((char *)v157 + v16) = veorq_s8(vqsubq_s8(v150, v154), v17);
          v21 = 2;
        }
      }
LABEL_5:
      v11 >>= v21;
      a8 += v21;
      v8 >>= v21;
      v9 >>= v21;
      v10 >>= v21;
      v12 >>= v21;
      a1 += v21;
      if (!v12)
        return;
    }
    v56 = v14 + 48 * *a8;
    v57 = (unsigned __int8 *)(v56 + 16);
    v58 = (unsigned __int8 *)(v56 + 32);
    if ((~(_BYTE)v11 & 3) == 0)
    {
      vpx_lpf_horizontal_16_dual_neon((int8x16_t *)a1, a2, (unsigned __int8 *)v22, v57, v58);
      v20 = -2 * a2;
      v19.i64[0] = 0x303030303030303;
      v19.i64[1] = 0x303030303030303;
      v18.i64[0] = 0x404040404040404;
      v18.i64[1] = 0x404040404040404;
      v17.i64[0] = 0x8080808080808080;
      v17.i64[1] = 0x8080808080808080;
      v21 = 2;
      goto LABEL_5;
    }
    vpx_lpf_horizontal_16_neon((int8x8_t *)a1, a2, (unsigned __int8 *)v22, v57, v58);
    v20 = -2 * a2;
    v19.i64[0] = 0x303030303030303;
    v19.i64[1] = 0x303030303030303;
    v18.i64[0] = 0x404040404040404;
    v18.i64[1] = 0x404040404040404;
    v17.i64[0] = 0x8080808080808080;
    v17.i64[1] = 0x8080808080808080;
    goto LABEL_4;
  }
}

void vp9_filter_block_plane_ss00(_DWORD *a1, uint64_t a2, int a3, uint64_t *a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12)
{
  uint8x8_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int *v71;
  uint64_t v72;

  v15 = *(uint8x8_t **)(a2 + 16);
  v71 = a1 + 4540;
  v72 = (uint64_t)(a1 + 392);
  v16 = a3;
  if (a1[328] > a3)
  {
    v18 = a4[1];
    v17 = a4[2];
    v19 = *a4;
    v20 = a4[8];
    v21 = a1[81];
    v22 = *(_DWORD *)(a2 + 8);
    if (v21)
      highbd_filter_selectively_vert_row2(v22, (int16x8_t *)(2 * (_QWORD)v15), *(_DWORD *)(a2 + 24), v17, v18, v19, v20, v72, (unsigned __int8 *)a4 + 90, *v71);
    else
      filter_selectively_vert_row2(v22, v15, *(_DWORD *)(a2 + 24), v17, v18, v19, v20, v72, a5, a6, a7, a8, a9, a10, a11, a12, (unsigned __int8 *)a4 + 90);
    v31 = *(int *)(a2 + 24);
    v32 = *(_QWORD *)(a2 + 16) + 16 * v31;
    *(_QWORD *)(a2 + 16) = v32;
    if (v16 + 2 < (int)a1[328])
    {
      v33 = *(_DWORD *)(a2 + 8);
      v34 = v20 >> 16;
      v35 = v19 >> 16;
      v36 = v18 >> 16;
      if (a1[81])
        highbd_filter_selectively_vert_row2(v33, (int16x8_t *)(2 * v32), v31, v17 >> 16, v36, v35, v34, v72, (unsigned __int8 *)a4 + 106, *v71);
      else
        filter_selectively_vert_row2(v33, (_BYTE *)v32, v31, v17 >> 16, v36, v35, v34, v72, v23, v24, v25, v26, v27, v28, v29, v30, (unsigned __int8 *)a4 + 106);
      v45 = *(int *)(a2 + 24);
      v46 = *(_QWORD *)(a2 + 16) + 16 * v45;
      *(_QWORD *)(a2 + 16) = v46;
      if (v16 + 4 < (int)a1[328])
      {
        v47 = *(_DWORD *)(a2 + 8);
        if (a1[81])
          highbd_filter_selectively_vert_row2(v47, (int16x8_t *)(2 * v46), v45, HIDWORD(v17), HIDWORD(v18), HIDWORD(v19), HIDWORD(v20), v72, (unsigned __int8 *)a4 + 122, *v71);
        else
          filter_selectively_vert_row2(v47, (_BYTE *)v46, v45, HIDWORD(v17), HIDWORD(v18), HIDWORD(v19), HIDWORD(v20), v72, v37, v38, v39, v40, v41, v42, v43, v44, (unsigned __int8 *)a4 + 122);
        v56 = *(int *)(a2 + 24);
        v57 = *(_QWORD *)(a2 + 16) + 16 * v56;
        *(_QWORD *)(a2 + 16) = v57;
        if (v16 + 6 < (int)a1[328])
        {
          v58 = *(_DWORD *)(a2 + 8);
          v59 = HIWORD(v20);
          v60 = HIWORD(v19);
          v61 = HIWORD(v18);
          if (a1[81])
            highbd_filter_selectively_vert_row2(v58, (int16x8_t *)(2 * v57), v56, HIWORD(v17), v61, v60, v59, v72, (unsigned __int8 *)a4 + 138, *v71);
          else
            filter_selectively_vert_row2(v58, (_BYTE *)v57, v56, HIWORD(v17), v61, v60, v59, v72, v48, v49, v50, v51, v52, v53, v54, v55, (unsigned __int8 *)a4 + 138);
        }
      }
    }
  }
  v62 = 0;
  *(_QWORD *)(a2 + 16) = v15;
  v64 = a4[5];
  v63 = a4[6];
  v65 = a4[4];
  v66 = (uint64_t)a4 + 90;
  v67 = a4[8];
  do
  {
    if (v16 >= (int)a1[328])
      break;
    v68 = v16 ? v63 : 0;
    v69 = v16 ? v64 : 0;
    v70 = v16 ? v65 : 0;
    if (a1[81])
      highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)v15), *(unsigned int *)(a2 + 24), v68, v69, v70, v67, v72, (unsigned __int8 *)(v66 + v62), *v71);
    else
      filter_selectively_horiz(v15, *(_DWORD *)(a2 + 24), v68, v69, v70, v67, v72, (unsigned __int8 *)(v66 + v62));
    v15 = (uint8x8_t *)(*(_QWORD *)(a2 + 16) + 8 * *(int *)(a2 + 24));
    *(_QWORD *)(a2 + 16) = v15;
    v63 >>= 8;
    v64 >>= 8;
    v65 >>= 8;
    v67 >>= 8;
    v62 += 8;
    ++v16;
  }
  while (v62 != 64);
}

void highbd_filter_selectively_vert_row2(int a1, int16x8_t *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, unsigned __int8 *a9, int a10)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int16x8_t *v17;
  int v18;
  int v20;
  unsigned int v21;
  unsigned int v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  int16x8_t *v30;
  int v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  _BOOL8 v35;
  const char *v36;
  const char *v37;
  const char *v38;
  uint8x8_t v39;
  uint8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  int16x8_t *v46;
  int v47;
  const char *v48;
  const char *v49;
  const char *v50;
  _BOOL8 v51;
  int v52;
  uint16x8_t v53;
  uint16x8_t v54;
  const char *v55;
  uint16x8_t v56;
  const char *v57;
  uint16x8_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  const char *v63;
  unsigned int v64;
  const char *v65;
  _QWORD v68[2];
  _QWORD v69[4];

  v69[2] = *MEMORY[0x24BDAC8D0];
  if (a1)
    v10 = 255;
  else
    v10 = 0xFFFF;
  if (a1)
    v11 = 4;
  else
    v11 = 8;
  v60 = v11;
  v69[0] = a2;
  v12 = (a5 | a4 | a6 | a7) & v10;
  if (v12)
  {
    v13 = a7;
    v14 = a6;
    v15 = a5;
    v16 = a4;
    v17 = a2;
    v18 = a10;
    v20 = (1 << v11) | 1;
    v61 = ~(1 << v11);
    v58 = (uint16x8_t)vdupq_n_s16(a10 - 8);
    v59 = a3;
    while (1)
    {
      if ((v12 & v20) == 0)
        goto LABEL_10;
      v64 = *a9;
      v22 = a9[v60];
      v23 = (const char *)(a8 + 48 * a9[v60]);
      v65 = (const char *)(a8 + 48 * *a9);
      v68[0] = v65;
      v68[1] = v23;
      v62 = v22;
      v63 = v23;
      v69[1] = &v17[v59];
      if ((v16 & v20) != 0)
      {
        if ((v16 & v20) == v20)
        {
          v24 = (const char *)(a8 + 48 * v64);
          v25 = v24 + 16;
          v24 += 32;
          v26 = v65;
          v27 = (uint8x8_t)vld1_dup_s8(v26);
          v28 = (uint8x8_t)vld1_dup_s8(v25);
          v29 = (uint8x8_t)vld1_dup_s8(v24);
          v54 = vshlq_u16(vmovl_u8(v28), v58);
          v56 = vshlq_u16(vmovl_u8(v27), v58);
          v53 = vshlq_u16(vmovl_u8(v29), v58);
          lpf_vertical_16_kernel(v17, a3, a10, v56, v54, v53);
          v30 = &v17[v59];
          v31 = a3;
          v18 = a10;
          v33 = v54;
          v32 = v56;
          v34 = v53;
        }
        else
        {
          v35 = (v16 & 1) == 0;
          v36 = (const char *)v68[v35];
          v30 = (int16x8_t *)v69[v35];
          v37 = v36 + 16;
          v38 = v36 + 32;
          v39 = (uint8x8_t)vld1_dup_s8(v36);
          v40 = (uint8x8_t)vld1_dup_s8(v37);
          v41 = (uint8x8_t)vld1_dup_s8(v38);
          v32 = vshlq_u16(vmovl_u8(v39), v58);
          v33 = vshlq_u16(vmovl_u8(v40), v58);
          v34 = vshlq_u16(vmovl_u8(v41), v58);
          v31 = a3;
        }
        lpf_vertical_16_kernel(v30, v31, v18, v32, v33, v34);
      }
      if ((v15 & v20) != 0)
      {
        if ((v15 & v20) == v20)
        {
          v42 = a8 + 48 * v64;
          v43 = (const char *)(v42 + 16);
          v44 = (const char *)(v42 + 32);
          v45 = a8 + 48 * v62;
          v57 = (const char *)(v45 + 16);
          v55 = (const char *)(v45 + 32);
          vpx_highbd_lpf_vertical_8_neon(v17, a3, v65, v43, v44, a10);
          v46 = &v17[v59];
          v47 = a3;
          v18 = a10;
          v48 = v63;
          v49 = v57;
          v50 = v55;
        }
        else
        {
          v51 = (v15 & 1) == 0;
          v48 = (const char *)v68[v51];
          v46 = (int16x8_t *)v69[v51];
          v49 = v48 + 16;
          v50 = v48 + 32;
          v47 = a3;
        }
        vpx_highbd_lpf_vertical_8_neon(v46, v47, v48, v49, v50, v18);
      }
      if ((v14 & v20) == 0)
        goto LABEL_25;
      if ((v14 & v20) == v20)
        break;
      vpx_highbd_lpf_vertical_4_neon(v69[(v14 & 1) == 0], a3, (const char *)v68[(v14 & 1) == 0], (const char *)(v68[(v14 & 1) == 0] + 16), (const char *)(v68[(v14 & 1) == 0] + 32), v18);
      v52 = v13 & v20;
      if ((v13 & v20) != 0)
      {
LABEL_28:
        if (v52 == v20)
          vpx_highbd_lpf_vertical_4_dual_neon(&v17->i16[4], a3, v65, (const char *)(a8 + 48 * v64 + 16), (const char *)(a8 + 48 * v64 + 32), v63, (const char *)(a8 + 48 * v62 + 16), (const char *)(a8 + 48 * v62 + 32), v18);
        else
          vpx_highbd_lpf_vertical_4_neon(v69[(v13 & 1) == 0] + 8, a3, (const char *)v68[(v13 & 1) == 0], (const char *)(v68[(v13 & 1) == 0] + 16), (const char *)(v68[(v13 & 1) == 0] + 32), v18);
      }
LABEL_10:
      v16 >>= 1;
      v69[0] = ++v17;
      ++a9;
      v15 >>= 1;
      v14 >>= 1;
      v13 >>= 1;
      v21 = v12 & v61;
      v12 = (v12 & v61) >> 1;
      if (v21 <= 1)
        return;
    }
    vpx_highbd_lpf_vertical_4_dual_neon(v17, a3, v65, (const char *)(a8 + 48 * v64 + 16), (const char *)(a8 + 48 * v64 + 32), v63, (const char *)(a8 + 48 * v62 + 16), (const char *)(a8 + 48 * v62 + 32), v18);
LABEL_25:
    v52 = v13 & v20;
    if ((v13 & v20) != 0)
      goto LABEL_28;
    goto LABEL_10;
  }
}

void filter_selectively_vert_row2(int a1, _BYTE *a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12, int8x16_t a13, int8x16_t a14, int8x16_t a15, int8x16_t a16, unsigned __int8 *a17)
{
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  int v25;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  const char *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  const char *v39;
  _QWORD v42[2];
  _QWORD v43[3];

  v43[2] = *MEMORY[0x24BDAC8D0];
  if (a1)
    v17 = 255;
  else
    v17 = 0xFFFF;
  if (a1)
    v18 = 4;
  else
    v18 = 8;
  v36 = v18;
  v43[0] = a2;
  v19 = (a5 | a4 | a6 | a7) & v17;
  if (v19)
  {
    v20 = a7;
    v21 = a6;
    v22 = a5;
    v23 = a4;
    v24 = a2;
    v25 = (1 << v18) | 1;
    v35 = 8 * a3;
    v37 = ~(1 << v18);
    while (1)
    {
      if ((v19 & v25) == 0)
        goto LABEL_10;
      v28 = *a17;
      v29 = (char *)(a8 + 48 * *a17);
      v30 = a17[v36];
      v31 = (const char *)(a8 + 48 * a17[v36]);
      v42[0] = v29;
      v42[1] = v31;
      v38 = v30;
      v39 = v31;
      v43[1] = &v24[v35];
      if ((v23 & v25) == 0)
        goto LABEL_15;
      if ((v23 & v25) == v25)
        break;
      a9 = vpx_lpf_vertical_16_neon((_BYTE *)v43[(v23 & 1) == 0], a3, (unsigned __int8 *)v42[(v23 & 1) == 0], (unsigned __int8 *)(v42[(v23 & 1) == 0] + 16), (unsigned __int8 *)(v42[(v23 & 1) == 0] + 32));
      v32 = v22 & v25;
      if ((v22 & v25) == 0)
        goto LABEL_20;
LABEL_18:
      if (v32 == v25)
      {
        *(double *)a9.i64 = vpx_lpf_vertical_8_dual_neon(v24, a3, v29, (const char *)(a8 + 48 * v28 + 16), (const char *)(a8 + 48 * v28 + 32), v39, (const char *)(a8 + 48 * v38 + 16), (const char *)(a8 + 48 * v38 + 32));
LABEL_20:
        v33 = v21 & v25;
        if ((v21 & v25) == 0)
          goto LABEL_25;
        goto LABEL_23;
      }
      a9 = vpx_lpf_vertical_8_neon(v43[(v22 & 1) == 0], a3, (const char *)v42[(v22 & 1) == 0], (const char *)(v42[(v22 & 1) == 0] + 16), (const char *)(v42[(v22 & 1) == 0] + 32), a9, a10, a11, a12, a13, a14, a15, a16);
      v33 = v21 & v25;
      if ((v21 & v25) == 0)
        goto LABEL_25;
LABEL_23:
      if (v33 == v25)
      {
        *(double *)a9.i64 = vpx_lpf_vertical_4_dual_neon((uint64_t)v24, a3, v29, (const char *)(a8 + 48 * v28 + 16), (const char *)(a8 + 48 * v28 + 32), v39, (const char *)(a8 + 48 * v38 + 16), (const char *)(a8 + 48 * v38 + 32));
LABEL_25:
        v34 = v20 & v25;
        if ((v20 & v25) != 0)
          goto LABEL_28;
        goto LABEL_10;
      }
      *(int8x8_t *)a9.i8 = vpx_lpf_vertical_4_neon(v43[(v21 & 1) == 0], a3, (const char *)v42[(v21 & 1) == 0], (const char *)(v42[(v21 & 1) == 0] + 16), (const char *)(v42[(v21 & 1) == 0] + 32), *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, a12, a13, a14, a15, a16);
      v34 = v20 & v25;
      if ((v20 & v25) != 0)
      {
LABEL_28:
        if (v34 == v25)
          *(double *)a9.i64 = vpx_lpf_vertical_4_dual_neon((uint64_t)(v24 + 4), a3, v29, (const char *)(a8 + 48 * v28 + 16), (const char *)(a8 + 48 * v28 + 32), v39, (const char *)(a8 + 48 * v38 + 16), (const char *)(a8 + 48 * v38 + 32));
        else
          *(int8x8_t *)a9.i8 = vpx_lpf_vertical_4_neon(v43[(v20 & 1) == 0] + 4, a3, (const char *)v42[(v20 & 1) == 0], (const char *)(v42[(v20 & 1) == 0] + 16), (const char *)(v42[(v20 & 1) == 0] + 32), *(double *)a9.i64, *(double *)a10.i64, *(double *)a11.i64, a12, a13, a14, a15, a16);
      }
LABEL_10:
      v23 >>= 1;
      v24 += 8;
      v43[0] = v24;
      ++a17;
      v22 >>= 1;
      v21 >>= 1;
      v20 >>= 1;
      v27 = v19 & v37;
      v19 = (v19 & v37) >> 1;
      if (v27 <= 1)
        return;
    }
    vpx_lpf_vertical_16_dual_neon(v24, a3, (unsigned __int8 *)v29, (unsigned __int8 *)(a8 + 48 * v28 + 16), (unsigned __int8 *)(a8 + 48 * v28 + 32));
LABEL_15:
    v32 = v22 & v25;
    if ((v22 & v25) == 0)
      goto LABEL_20;
    goto LABEL_18;
  }
}

void vp9_filter_block_plane_ss11(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8, int8x16_t a9, int8x16_t a10, int8x16_t a11, int8x16_t a12)
{
  uint8x8_t *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint8x8_t *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint8x8_t *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint8x8_t *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];

  v72[1] = *MEMORY[0x24BDAC8D0];
  v16 = *(uint8x8_t **)(a2 + 16);
  v17 = *(unsigned __int16 *)(a4 + 76);
  v18 = *(unsigned __int16 *)(a4 + 74);
  v19 = *(unsigned __int16 *)(a4 + 72);
  v20 = *(unsigned __int16 *)(a4 + 88);
  v71 = 0;
  v72[0] = 0;
  v69 = a1 + 4540;
  v70 = (uint64_t)(a1 + 392);
  v21 = a3;
  v22 = a1[328];
  if (v22 <= a3)
  {
    *(_QWORD *)(a2 + 16) = v16;
    if (v22 <= (uint64_t)a3)
      return;
  }
  else
  {
    LOBYTE(v71) = *(_BYTE *)(a4 + 90);
    BYTE4(v71) = *(_BYTE *)(a4 + 106);
    BYTE1(v71) = *(_BYTE *)(a4 + 92);
    BYTE5(v71) = *(_BYTE *)(a4 + 108);
    BYTE2(v71) = *(_BYTE *)(a4 + 94);
    BYTE6(v71) = *(_BYTE *)(a4 + 110);
    BYTE3(v71) = *(_BYTE *)(a4 + 96);
    HIBYTE(v71) = *(_BYTE *)(a4 + 112);
    v23 = a1[81];
    v24 = *(_DWORD *)(a2 + 8);
    if (v23)
      highbd_filter_selectively_vert_row2(v24, (int16x8_t *)(2 * (_QWORD)v16), *(_DWORD *)(a2 + 24), v17, v18, v19, v20, v70, (unsigned __int8 *)&v71, *v69);
    else
      filter_selectively_vert_row2(v24, v16, *(_DWORD *)(a2 + 24), v17, v18, v19, v20, v70, a5, a6, a7, a8, a9, a10, a11, a12, (unsigned __int8 *)&v71);
    v33 = *(int *)(a2 + 24);
    v34 = *(_QWORD *)(a2 + 16) + 16 * v33;
    *(_QWORD *)(a2 + 16) = v34;
    v22 = a1[328];
    if (v21 + 4 >= v22)
    {
      *(_QWORD *)(a2 + 16) = v16;
      if (v22 <= v21)
        return;
    }
    else
    {
      v35 = v17 >> 8;
      LOBYTE(v72[0]) = *(_BYTE *)(a4 + 122);
      v36 = v18 >> 8;
      v37 = v19 >> 8;
      BYTE4(v72[0]) = *(_BYTE *)(a4 + 138);
      v38 = v20 >> 8;
      BYTE1(v72[0]) = *(_BYTE *)(a4 + 124);
      BYTE5(v72[0]) = *(_BYTE *)(a4 + 140);
      BYTE2(v72[0]) = *(_BYTE *)(a4 + 126);
      BYTE6(v72[0]) = *(_BYTE *)(a4 + 142);
      BYTE3(v72[0]) = *(_BYTE *)(a4 + 128);
      HIBYTE(v72[0]) = *(_BYTE *)(a4 + 144);
      v39 = *(_DWORD *)(a2 + 8);
      if (a1[81])
        highbd_filter_selectively_vert_row2(v39, (int16x8_t *)(2 * v34), v33, v35, v36, v37, v38, v70, (unsigned __int8 *)v72, *v69);
      else
        filter_selectively_vert_row2(v39, (_BYTE *)v34, v33, v35, v36, v37, v38, v70, v25, v26, v27, v28, v29, v30, v31, v32, (unsigned __int8 *)v72);
      v22 = a1[328];
      *(_QWORD *)(a2 + 16) = v16;
      if (v22 <= v21)
        return;
    }
  }
  v40 = *(unsigned __int16 *)(a4 + 84);
  v41 = *(unsigned __int16 *)(a4 + 82);
  v42 = *(unsigned __int16 *)(a4 + 80);
  v43 = *(unsigned __int16 *)(a4 + 88);
  if (v22 - 1 == a3)
    v44 = 0;
  else
    v44 = v43 & 0xF;
  if (a3)
    v45 = v40 & 0xF;
  else
    v45 = 0;
  if (a3)
    v46 = v41 & 0xF;
  else
    v46 = 0;
  if (a3)
    v47 = v42 & 0xF;
  else
    v47 = 0;
  if (a1[81])
    highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)v16), *(unsigned int *)(a2 + 24), v45, v46, v47, v44, v70, (unsigned __int8 *)&v71, *v69);
  else
    filter_selectively_horiz(v16, *(_DWORD *)(a2 + 24), v45, v46, v47, v44, v70, (unsigned __int8 *)&v71);
  v48 = *(int *)(a2 + 24);
  v49 = (uint8x8_t *)(*(_QWORD *)(a2 + 16) + 8 * v48);
  *(_QWORD *)(a2 + 16) = v49;
  v50 = (int)a1[328];
  if (v21 + 2 >= v50)
    return;
  v51 = (_DWORD)v50 - 1 == (_DWORD)v21 + 2 ? 0 : (v43 >> 4);
  v52 = v21 == -2 ? 0 : (v40 >> 4);
  v53 = v21 == -2 ? 0 : (v41 >> 4);
  v54 = v21 == -2 ? 0 : (v42 >> 4);
  if (a1[81])
    highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)v49), v48, v52, v53, v54, v51, v70, (unsigned __int8 *)&v71 + 4, *v69);
  else
    filter_selectively_horiz(v49, v48, v52, v53, v54, v51, v70, (unsigned __int8 *)&v71 + 4);
  v55 = *(int *)(a2 + 24);
  v56 = (uint8x8_t *)(*(_QWORD *)(a2 + 16) + 8 * v55);
  *(_QWORD *)(a2 + 16) = v56;
  v57 = (int)a1[328];
  if (v21 + 4 >= v57)
    return;
  if ((_DWORD)v57 - 1 == (_DWORD)v21 + 4)
    v58 = 0;
  else
    v58 = (v43 >> 8) & 0xF;
  if (v21 == -4)
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    if (a1[81])
      goto LABEL_51;
  }
  else
  {
    v59 = (v40 >> 8) & 0xF;
    v60 = (v41 >> 8) & 0xF;
    v61 = (v42 >> 8) & 0xF;
    if (a1[81])
    {
LABEL_51:
      highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)v56), v55, v59, v60, v61, v58, v70, (unsigned __int8 *)v72, *v69);
      goto LABEL_54;
    }
  }
  filter_selectively_horiz(v56, v55, v59, v60, v61, v58, v70, (unsigned __int8 *)v72);
LABEL_54:
  v62 = *(int *)(a2 + 24);
  v63 = (uint8x8_t *)(*(_QWORD *)(a2 + 16) + 8 * v62);
  *(_QWORD *)(a2 + 16) = v63;
  v64 = (int)a1[328];
  if (v21 + 6 < v64)
  {
    if ((_DWORD)v64 - 1 == (_DWORD)v21 + 6)
      v65 = 0;
    else
      v65 = v43 >> 12;
    if (v21 == -6)
      v66 = 0;
    else
      v66 = v40 >> 12;
    if (v21 == -6)
      v67 = 0;
    else
      v67 = v41 >> 12;
    if (v21 == -6)
      v68 = 0;
    else
      v68 = v42 >> 12;
    if (a1[81])
      highbd_filter_selectively_horiz((int8x16_t *)(2 * (_QWORD)v63), v62, v66, v67, v68, v65, v70, (unsigned __int8 *)v72 + 4, *v69);
    else
      filter_selectively_horiz(v63, v62, v66, v67, v68, v65, v70, (unsigned __int8 *)v72 + 4);
    *(_QWORD *)(a2 + 16) += 8 * *(int *)(a2 + 24);
  }
}

void loop_filter_rows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v6;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  int v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  double v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v6 = a4;
  if (a6)
  {
LABEL_2:
    v10 = 1;
    if (a4 >= a5)
      return;
    goto LABEL_11;
  }
  v11 = *(_DWORD *)(a3 + 148);
  if (!v11)
  {
    if (!*(_DWORD *)(a3 + 144))
      goto LABEL_2;
    goto LABEL_10;
  }
  if (v11 != 1 || *(_DWORD *)(a3 + 144) != 1)
  {
LABEL_10:
    v10 = 2;
    if (a4 >= a5)
      return;
    goto LABEL_11;
  }
  v10 = 0;
  if (a4 >= a5)
    return;
LABEL_11:
  v12 = *(_DWORD *)(a2 + 1320);
  if (v12 >= 1)
  {
    if (a6)
    {
      do
      {
        if (v12 >= 1)
        {
          v13 = 0;
          v14 = 0;
          v15 = (uint64_t *)(*(_QWORD *)(a2 + 4760) + 160 * *(int *)(a2 + 4768) * (uint64_t)(v6 >> 3));
          v16 = 8 * v6;
          do
          {
            v17 = *(_QWORD *)(a1 + 64);
            v18 = *(_QWORD *)(a1 + 72);
            v19 = *(_DWORD *)(a1 + 16);
            v20 = *(_DWORD *)(a1 + 36);
            *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 56)
                                 + (v13 >> *(_DWORD *)(a3 + 8))
                                 + v19 * (uint64_t)(v16 >> *(_DWORD *)(a3 + 12));
            *(_DWORD *)(a3 + 24) = v19;
            *(_QWORD *)(a3 + 152) = v17 + (v13 >> *(_DWORD *)(a3 + 144)) + v20 * (uint64_t)(v16 >> *(_DWORD *)(a3 + 148));
            *(_DWORD *)(a3 + 160) = v20;
            *(_QWORD *)(a3 + 288) = v18 + (v13 >> *(_DWORD *)(a3 + 280)) + v20 * (uint64_t)(v16 >> *(_DWORD *)(a3 + 284));
            *(_DWORD *)(a3 + 296) = v20;
            vp9_adjust_mask(a2, v6, v14, (uint64_t)v15);
            vp9_filter_block_plane_ss00((_DWORD *)a2, a3, v6, v15, v21, v22, v23, v24, v25, v26, v27, v28);
            v14 += 8;
            v15 += 20;
            v12 = *(_DWORD *)(a2 + 1320);
            v13 += 64;
          }
          while (v14 < v12);
        }
        v6 += 8;
      }
      while (v6 < a5);
    }
    else
    {
      v79 = a3 + 272;
      v80 = a3 + 136;
      do
      {
        if (v12 >= 1)
        {
          v29 = 0;
          v30 = 0;
          v31 = (uint64_t *)(*(_QWORD *)(a2 + 4760) + 160 * *(int *)(a2 + 4768) * (uint64_t)(v6 >> 3));
          v32 = 8 * v6;
          v78 = *(_QWORD *)(a2 + 1480) + 8 * *(_DWORD *)(a2 + 1324) * v6;
          do
          {
            v41 = *(_QWORD *)(a1 + 64);
            v42 = *(_QWORD *)(a1 + 72);
            v43 = *(_DWORD *)(a1 + 16);
            v44 = *(_DWORD *)(a1 + 36);
            *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 56)
                                 + ((int)v29 >> *(_DWORD *)(a3 + 8))
                                 + v43 * (uint64_t)(v32 >> *(_DWORD *)(a3 + 12));
            *(_DWORD *)(a3 + 24) = v43;
            *(_QWORD *)(a3 + 152) = v41
                                  + ((int)v29 >> *(_DWORD *)(a3 + 144))
                                  + v44 * (uint64_t)(v32 >> *(_DWORD *)(a3 + 148));
            *(_DWORD *)(a3 + 160) = v44;
            *(_QWORD *)(a3 + 288) = v42
                                  + ((int)v29 >> *(_DWORD *)(a3 + 280))
                                  + v44 * (uint64_t)(v32 >> *(_DWORD *)(a3 + 284));
            *(_DWORD *)(a3 + 296) = v44;
            vp9_adjust_mask(a2, v6, v30, (uint64_t)v31);
            vp9_filter_block_plane_ss00((_DWORD *)a2, a3, v6, v31, v45, v46, v47, v48, v49, v50, v51, v52);
            if (v10)
            {
              if (v10 == 1)
              {
                vp9_filter_block_plane_ss00((_DWORD *)a2, v80, v6, v31, v53, v54, v55, v56, v57, v58, v59, v60);
                vp9_filter_block_plane_ss00((_DWORD *)a2, v79, v6, v31, v69, v70, v71, v72, v73, v74, v75, v76);
              }
              else
              {
                vp9_filter_block_plane_non420((_DWORD *)a2, v80, v78 + v29, v6, v30, *(double *)v53.i64, v54, v55, v56, v57, v58, v59, v60);
                vp9_filter_block_plane_non420((_DWORD *)a2, v79, v78 + v29, v6, v30, v61, v62, v63, v64, v65, v66, v67, v68);
              }
            }
            else
            {
              vp9_filter_block_plane_ss11((_DWORD *)a2, v80, v6, (uint64_t)v31, v53, v54, v55, v56, v57, v58, v59, v60);
              vp9_filter_block_plane_ss11((_DWORD *)a2, v79, v6, (uint64_t)v31, v33, v34, v35, v36, v37, v38, v39, v40);
            }
            v31 += 20;
            v12 = *(_DWORD *)(a2 + 1320);
            v30 += 8;
            v29 += 64;
          }
          while (v12 > v30);
        }
        v6 += 8;
      }
      while (v6 < a5);
    }
  }
}

uint64_t vp9_build_mask_frame(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned __int8 **v11;

  if (!a2)
    return result;
  v3 = result;
  v4 = *(_DWORD *)(result + 1312);
  if (!a3 || v4 < 9)
  {
    result = vp9_loop_filter_frame_init(result, a2);
    if (v4 < 1)
      return result;
    v5 = 0;
    v7 = *(_DWORD *)(v3 + 1320);
    if (v7 < 1)
      return result;
    goto LABEL_10;
  }
  v5 = (v4 >> 1) & 0x7FFFFFF8;
  v6 = v4 >> 3;
  if (v4 <= 0x47)
    v6 = 8;
  v4 = v6 + v5;
  result = vp9_loop_filter_frame_init(result, a2);
  v7 = *(_DWORD *)(v3 + 1320);
  if (v7 >= 1)
  {
LABEL_10:
    v8 = v5 >> 3;
    do
    {
      if (v7 >= 1)
      {
        v9 = 0;
        v10 = 0;
        v11 = (unsigned __int8 **)(*(_QWORD *)(v3 + 1480) + 8 * *(_DWORD *)(v3 + 1324) * v5);
        do
        {
          result = (uint64_t)vp9_setup_mask((_DWORD *)v3, v5, v10, v11, *(_DWORD *)(v3 + 1324), (_OWORD *)(*(_QWORD *)(v3 + 4760) + 160 * (int)(v9 + v8 * *(_DWORD *)(v3 + 4768))));
          v7 = *(_DWORD *)(v3 + 1320);
          v10 += 8;
          ++v9;
          v11 += 8;
        }
        while (v7 > v10);
      }
      v5 += 8;
      ++v8;
    }
    while (v5 < v4);
  }
  return result;
}

uint64_t vp9_build_mask(uint64_t result, unsigned __int8 *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  char *v22;
  _WORD *v23;
  _WORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = result + 8 * (char)a2[4] + 2 * (char)a2[8] + mode_lf_lut[a2[1]];
  v7 = *(unsigned __int8 *)(v6 + 4640);
  if (*(_BYTE *)(v6 + 4640))
  {
    v8 = a6;
    v11 = *a2;
    v12 = a2[2];
    v13 = uv_txsize_lookup[16 * v11 + 3 + 4 * v12];
    v14 = *(_QWORD *)(result + 4760);
    v15 = *(_DWORD *)(result + 4768) * (a3 >> 3) + (a4 >> 3);
    v16 = v14 + 160 * v15;
    v17 = (_QWORD *)(v16 + 8 * v12 + 32);
    result = first_block_in_16x16[8 * (a3 & 7) + (a4 & 7)];
    v18 = v16 + 2 * v13;
    v19 = a4 & 7 | (8 * (a3 & 7u));
    v20 = (2 * a3) & 0xC;
    if (a6 > 0)
    {
      v30 = v16 + 8 * v12 + 32;
      v31 = first_block_in_16x16[8 * (a3 & 7) + (a4 & 7)];
      v32 = v12;
      v33 = uv_txsize_lookup[16 * v11 + 3 + 4 * v12];
      v34 = v11;
      v21 = a5;
      v22 = (char *)(v19 + 160 * v15 + v14 + 90);
      do
      {
        memset(v22, v7, v21);
        v22 += 8;
        --v8;
      }
      while (v8);
      v13 = v33;
      v11 = v34;
      v12 = v32;
      result = v31;
      v17 = (_QWORD *)v30;
    }
    v23 = (_WORD *)(v18 + 72);
    v24 = (_WORD *)(v18 + 80);
    v25 = v20 & 0xFFFFFFFC | (a4 >> 1) & 3;
    v26 = *v17 | (above_prediction_mask[v11] << v19);
    *v17 = v26;
    v27 = *(_QWORD *)(v16 + 8 * v12) | (left_prediction_mask[v11] << v19);
    *(_QWORD *)(v16 + 8 * v12) = v27;
    if ((_DWORD)result)
    {
      *v24 |= above_prediction_mask_uv[v11] << v25;
      *v23 |= left_prediction_mask_uv[v11] << v25;
    }
    if (!a2[3] || (char)a2[8] <= 0)
    {
      v28 = size_mask[v11];
      *v17 = ((above_64x64_txform_mask[v12] & v28) << v19) | v26;
      *(_QWORD *)(v16 + 8 * v12) = ((left_64x64_txform_mask[v12] & v28) << v19) | v27;
      if ((_DWORD)result)
      {
        v29 = size_mask_uv[v11];
        *v24 |= (above_64x64_txform_mask_uv[v13] & v29) << v25;
        *v23 |= (left_64x64_txform_mask_uv[v13] & v29) << v25;
      }
      if (!(_DWORD)v12)
        *(_QWORD *)(v16 + 64) |= v28 << v19;
      if ((_DWORD)result)
      {
        if (!(_DWORD)v13)
          *(_WORD *)(v16 + 88) |= size_mask_uv[v11] << v25;
      }
    }
  }
  return result;
}

uint64_t vp9_loop_filter_worker(uint64_t a1)
{
  loop_filter_rows(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a1 + 16, *(_DWORD *)(a1 + 424), *(_DWORD *)(a1 + 428), *(_DWORD *)(a1 + 432));
  return 1;
}

double vp9_init_dsmotion_compensation(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)(a1 + 352) = -1024 * a2;
  *(_QWORD *)(a1 + 360) = a2 << 10;
  *(_OWORD *)(a1 + 368) = xmmword_208F49BB0;
  *(_QWORD *)(a1 + 384) = -512 * a2;
  *(_QWORD *)(a1 + 392) = a2 << 9;
  *(_OWORD *)a1 = xmmword_208F49BA0;
  *(_OWORD *)(a1 + 16) = xmmword_208F49BC0;
  *(_OWORD *)(a1 + 400) = xmmword_208F49BD0;
  *(_QWORD *)(a1 + 416) = -256 * a2;
  *(_QWORD *)(a1 + 424) = a2 << 8;
  *(_OWORD *)(a1 + 432) = xmmword_208F49BF0;
  *(_QWORD *)(a1 + 448) = -128 * a2;
  *(_QWORD *)(a1 + 456) = a2 << 7;
  *(_OWORD *)(a1 + 32) = xmmword_208F49BE0;
  *(_OWORD *)(a1 + 48) = xmmword_208F49C00;
  *(_OWORD *)(a1 + 464) = xmmword_208F49C10;
  *(_QWORD *)(a1 + 480) = -64 * a2;
  *(_QWORD *)(a1 + 488) = a2 << 6;
  *(_OWORD *)(a1 + 496) = xmmword_208F49C30;
  *(_QWORD *)(a1 + 512) = -32 * a2;
  *(_QWORD *)(a1 + 520) = 32 * a2;
  *(_OWORD *)(a1 + 64) = xmmword_208F49C20;
  *(_OWORD *)(a1 + 80) = xmmword_208F49C40;
  *(_OWORD *)(a1 + 528) = xmmword_208F49C50;
  *(_QWORD *)(a1 + 544) = -16 * a2;
  *(_QWORD *)(a1 + 552) = 16 * a2;
  *(_OWORD *)(a1 + 560) = xmmword_208F49C70;
  *(_QWORD *)(a1 + 576) = -8 * a2;
  *(_QWORD *)(a1 + 584) = 8 * a2;
  *(_OWORD *)(a1 + 96) = xmmword_208F49C60;
  *(_OWORD *)(a1 + 112) = xmmword_208F49C80;
  *(_OWORD *)(a1 + 592) = xmmword_208F49C90;
  *(_QWORD *)(a1 + 608) = -4 * a2;
  *(_QWORD *)(a1 + 616) = 4 * a2;
  *(_OWORD *)(a1 + 624) = xmmword_208F49CB0;
  *(_QWORD *)(a1 + 640) = -2 * a2;
  *(_QWORD *)(a1 + 648) = 2 * a2;
  *(_OWORD *)(a1 + 128) = xmmword_208F49CA0;
  *(_OWORD *)(a1 + 144) = xmmword_208F49CC0;
  *(_OWORD *)(a1 + 656) = xmmword_208F49CD0;
  *(_QWORD *)(a1 + 672) = -a2;
  *(_QWORD *)(a1 + 680) = a2;
  *(_OWORD *)(a1 + 160) = xmmword_208F49CE0;
  *(_OWORD *)(a1 + 688) = xmmword_208F49CF0;
  *(_QWORD *)&result = 0xB00000004;
  *(_QWORD *)(a1 + 1056) = 0xB00000004;
  return result;
}

double vp9_init3smotion_compensation(uint64_t a1, int a2)
{
  int v2;
  _QWORD *v3;
  _DWORD *v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  double result;

  v2 = a2 + 1;
  v3 = (_QWORD *)(a1 + 408);
  v4 = (_DWORD *)(a1 + 16);
  v5 = 1024;
  do
  {
    v6 = (unsigned __int16)-(__int16)v5;
    *(v4 - 4) = v6;
    *(v3 - 7) = -(v5 * a2);
    *(v4 - 3) = v5;
    *(v3 - 6) = (int)(v5 * a2);
    *(v4 - 2) = -65536 * v5;
    *(v3 - 5) = -v5;
    *(v4 - 1) = v5 << 16;
    *(v3 - 4) = v5;
    *v4 = v6 - (v5 << 16);
    *(v3 - 3) = -(v5 * v2);
    v4[1] = (v5 << 16) | v6;
    *(v3 - 2) = (int)(v5 - v5 * a2);
    v4[2] = (-65536 * v5) | v5;
    *(v3 - 1) = (int)(v5 * (a2 - 1));
    v4[3] = (v5 << 16) | v5;
    *v3 = (int)(v5 * v2);
    v3 += 8;
    v4 += 8;
    v7 = v5 > 1;
    v5 >>= 1;
  }
  while (v7);
  *(_QWORD *)&result = 0xB00000008;
  *(_QWORD *)(a1 + 1056) = 0xB00000008;
  return result;
}

uint64_t vp9_skip_sub_pixel_tree(uint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, unsigned int *a12, uint64_t a13, uint8x16_t *a14, int a15, int a16)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;

  v17 = *(_QWORD *)(a1 + 8216);
  v18 = *(unsigned int *)(a1 + 8224);
  v19 = *(_DWORD *)(a1 + 24952);
  v20 = *a2;
  v21 = a2[1];
  v22 = *(_QWORD *)(a1 + 24944);
  *a2 = 8 * v20;
  a2[1] = 8 * v21;
  return setup_center_error(a1 + 24912, (uint64_t)a2, a3, a5, a6, v17, v18, v22, v19, a14, a15, a16, v21 + v19 * v20, a10, a11, a13, a12);
}

uint64_t setup_center_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint8x16_t *a10, int a11, int a12, int a13, uint64_t a14, _QWORD *a15, uint64_t a16, unsigned int *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  uint8x16_t *v28;
  int v29;
  uint64_t *v30;
  uint64_t *v31;
  unint64_t j;
  unsigned int v33;
  uint16x8_t *v34;
  uint16x8_t *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t i;
  uint8x16_t *v40;
  int v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint16x8_t *v44;
  uint16x8_t v45;
  int v46;
  uint8x16_t *v47;
  uint8x16_t v48;
  uint8x16_t v49;
  int v50;
  _BOOL8 v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;

  v17 = MEMORY[0x24BDAC7A8]();
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = a10;
  STACK[0x2018] = *MEMORY[0x24BDAC8D0];
  if (a10)
  {
    v29 = a12;
    if ((*(_BYTE *)(*(_QWORD *)(v17 + 528) + 152) & 8) != 0)
    {
      v34 = (uint16x8_t *)(2 * (_QWORD)a10);
      v35 = (uint16x8_t *)(2 * (v21 + a13));
      if (a11 < 9)
      {
        if (a11 == 8)
        {
          v44 = (uint16x8_t *)&v58;
          do
          {
            v45 = *v34++;
            *v44++ = vrhaddq_u16(v45, *v35);
            v35 = (uint16x8_t *)((char *)v35 + 2 * (int)a9);
            --v29;
          }
          while (v29);
        }
        else
        {
          v55 = 0;
          do
          {
            *(uint64_t *)((char *)&v58 + v55) = (uint64_t)vrhadd_u16(*(uint16x4_t *)&v34->i8[v55], *(uint16x4_t *)v35->i8);
            v35 = (uint16x8_t *)((char *)v35 + 2 * (int)a9);
            v55 += 2 * a11;
            --v29;
          }
          while (v29);
        }
      }
      else
      {
        v36 = 2 * a11;
        v37 = &v58;
        do
        {
          v38 = 0;
          for (i = 0; i < a11; i += 8)
          {
            *(uint16x8_t *)&v37[v38 / 8] = vrhaddq_u16(v34[v38 / 0x10], v35[v38 / 0x10]);
            v38 += 16;
          }
          v37 = (uint64_t *)((char *)v37 + v36);
          v35 = (uint16x8_t *)((char *)v35 + 2 * (int)a9);
          v34 = (uint16x8_t *)((char *)v34 + v36);
          --v29;
        }
        while (v29);
      }
      v33 = (*(uint64_t (**)(unint64_t))(v18 + 24))((unint64_t)&v58 >> 1);
      *a17 = v33;
      if (a15)
        goto LABEL_28;
    }
    else
    {
      v30 = (uint64_t *)(v21 + a13);
      if (a11 < 9)
      {
        if (a11 == 8)
        {
          v40 = (uint8x16_t *)&v58;
          v41 = -8 * a12;
          do
          {
            v42 = *v28++;
            v43.i64[0] = *v30;
            v43.i64[1] = *(uint64_t *)((char *)v30 + (int)a9);
            v30 = (uint64_t *)((char *)v30 + 2 * (int)a9);
            *v40++ = vrhaddq_u8(v43, v42);
            v41 += 16;
          }
          while (v41);
        }
        else
        {
          v46 = a12 * a11;
          v47 = (uint8x16_t *)&v58;
          do
          {
            v48 = *v28++;
            v49.i32[0] = *(_DWORD *)v30;
            v49.i32[1] = *(_DWORD *)((char *)v30 + (int)a9);
            v49.i32[2] = *(_DWORD *)((char *)v30 + 2 * (int)a9);
            v49.i32[3] = *(_DWORD *)((char *)v30 + 3 * (int)a9);
            v30 = (uint64_t *)((char *)v30 + 4 * (int)a9);
            *v47++ = vrhaddq_u8(v49, v48);
            v46 -= 16;
          }
          while (v46);
        }
      }
      else
      {
        v31 = &v58;
        do
        {
          for (j = 0; j < a11; j += 16)
            *(uint8x16_t *)&v31[j / 8] = vrhaddq_u8(v28[j / 0x10], *(uint8x16_t *)&v30[j / 8]);
          v31 = (uint64_t *)((char *)v31 + a11);
          v28 = (uint8x16_t *)((char *)v28 + a11);
          v30 = (uint64_t *)((char *)v30 + (int)a9);
          --v29;
        }
        while (v29);
      }
      v33 = (*(uint64_t (**)(uint64_t *))(v18 + 24))(&v58);
      *a17 = v33;
      if (a15)
        goto LABEL_28;
    }
LABEL_36:
    v54 = 0;
    goto LABEL_37;
  }
  v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v18 + 24))(v21 + a13, a9, v19, v20, a16);
  *a17 = v33;
  if (!a15)
    goto LABEL_36;
LABEL_28:
  v50 = v27[1] - v25[1];
  v51 = v27[1] != v25[1];
  v52 = 2;
  if (v50)
    v52 = 3;
  v53 = *v27 - *v25;
  if (v53)
    v51 = v52;
  v54 = (((v23
         * (*(int *)(*a15 + 4 * (__int16)v53)
          + (uint64_t)*(int *)(a15[1] + 4 * (__int16)v50)
          + *(int *)(a14 + 4 * v51))) << 18)
       + 0x80000000) >> 32;
LABEL_37:
  v56 = v54 + v33;
  if (v56 > 0xFFFFFFFE)
    return 0xFFFFFFFFLL;
  else
    return v56;
}

uint64_t vp9_find_best_sub_pixel_tree_pruned_evenmore(uint64_t a1, __int16 *a2, unsigned __int16 *a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int *a9, uint64_t a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, uint8x16_t *a14, int a15, int a16)
{
  int v17;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint8x16_t *v42;
  unsigned __int16 *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  signed int v49;
  int v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  signed int v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL8 v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  signed int v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  signed int v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  uint64_t v83;
  uint8x16_t *v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  signed int v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  signed int v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  int v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  signed int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _BOOL8 v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  signed int v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  _BOOL8 v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  signed int v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  _BOOL8 v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v150;
  int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  uint64_t v159;
  unsigned int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  uint64_t v165;
  _DWORD v166[3];

  v17 = a5;
  v20 = *(_QWORD *)(a1 + 8216);
  v21 = *(unsigned int *)(a1 + 8224);
  v166[0] = 0;
  v22 = *(unsigned int *)(a1 + 24952);
  v23 = *a2;
  v24 = a2[1];
  v25 = (__int16)*a3;
  v26 = (__int16)a3[1];
  v27 = 8 * *(_DWORD *)(a1 + 25848);
  if (v27 <= v26 - 8184)
    v27 = v26 - 8184;
  v28 = 8 * *(_DWORD *)(a1 + 25852);
  if (v28 >= v26 + 8184)
    v28 = v26 + 8184;
  v29 = v25 - 8184;
  if (8 * *(_DWORD *)(a1 + 25856) > v25 - 8184)
    v29 = 8 * *(_DWORD *)(a1 + 25856);
  v30 = 8 * *(_DWORD *)(a1 + 25860);
  if (v30 >= v25 + 8184)
    v30 = v25 + 8184;
  if (v27 <= -16383)
    v27 = -16383;
  v163 = v27;
  if (v28 >= 16382)
    v28 = 16382;
  v162 = v28;
  if (v29 <= -16383)
    v29 = -16383;
  v164 = v29;
  v146 = (int)v22 * v23;
  v31 = v146 + v24;
  v32 = *(_QWORD *)(a1 + 24944);
  v152 = *a3;
  v153 = a3[1];
  v33 = 8 * v23;
  if (v30 >= 16382)
    v30 = 16382;
  v161 = v30;
  v145 = a2[1];
  *a2 = v33;
  v34 = 8 * v24;
  a2[1] = v34;
  v150 = 8 * v23;
  v147 = v31;
  v154 = a5;
  v156 = a6;
  v157 = v20;
  v158 = v21;
  v159 = v32;
  v160 = setup_center_error(a1 + 24912, (uint64_t)a2, (uint64_t)a3, a5, a6, v20, v21, v32, v22, a14, a15, a16, v31, a10, a11, (uint64_t)a13, a12);
  v155 = v22;
  if (!a9
    || (v35 = *a9, *a9 == 0x7FFFFFFF)
    || (v36 = a9[1], v36 == 0x7FFFFFFF)
    || (v37 = a9[2], v37 == 0x7FFFFFFF)
    || (v38 = a9[3], v38 == 0x7FFFFFFF)
    || (v39 = a9[4], v35 >= v39)
    || v35 >= v38
    || v35 >= v37
    || v35 >= v36
    || v39 == 0x7FFFFFFF)
  {
    v50 = v34;
    v51 = v34 - 4;
    v52 = v34 - 4 >= v163 && v51 <= v162;
    LODWORD(v53) = 0x7FFFFFFF;
    if (!v52)
    {
      v84 = a14;
      v85 = v22;
      goto LABEL_53;
    }
    v84 = a14;
    v85 = v22;
    if (v33 < v164 || v33 > v161)
      goto LABEL_53;
    v54 = v159 + v146 + (v51 >> 3);
    if (a14)
    {
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(a6 + 40))(v54, v22, 4, 0, v157, v158, v166, a14);
      v56 = v55;
      v57 = a11;
      if (a11)
        goto LABEL_43;
    }
    else
    {
      v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v54, v22, 4, 0, v157, v158, v166);
      v56 = v55;
      v57 = a11;
      if (a11)
      {
LABEL_43:
        v58 = *v57;
        v59 = v57[1];
        v60 = (unsigned __int16)v51 != v153;
        v61 = 2;
        if ((unsigned __int16)v51 != v153)
          v61 = 3;
        if (v152 != (unsigned __int16)v33)
          v60 = v61;
        v84 = a14;
        v53 = v56
            + (int)((unint64_t)((*(int *)(v58 + 4 * (__int16)(v33 - v152))
                                      + (uint64_t)*(int *)(v59 + 4 * (__int16)(v51 - v153))
                                      + *(int *)(a10 + 4 * v60))
                                     * v17
                                     + 0x2000) >> 14);
        if (v53 > 2147483646)
          goto LABEL_48;
        goto LABEL_51;
      }
    }
    v84 = a14;
    LODWORD(v53) = v56;
    if (v56 > 2147483646)
    {
LABEL_48:
      LODWORD(v53) = 0x7FFFFFFF;
      goto LABEL_53;
    }
LABEL_51:
    if (v160 > v53)
    {
      *a12 = v55;
      *a13 = v166[0];
      v160 = v53;
    }
LABEL_53:
    v62 = v50 | 4;
    v63 = (v50 | 4) >= v163 && v62 <= v162;
    LODWORD(v64) = 0x7FFFFFFF;
    if (!v63 || v33 < v164 || v33 > v161)
      goto LABEL_72;
    v65 = v159 + v147;
    if (v84)
    {
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(a6 + 40))(v65, v85, 4, 0, v157, v158, v166);
      v67 = v66;
      v68 = a11;
      if (a11)
        goto LABEL_62;
    }
    else
    {
      v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v65, v85, 4, 0, v157, v158, v166);
      v67 = v66;
      v68 = a11;
      if (a11)
      {
LABEL_62:
        v69 = *v68;
        v70 = v68[1];
        v71 = ((unsigned __int16)v50 | 4) != v153;
        v72 = 2;
        if (((unsigned __int16)v50 | 4) != v153)
          v72 = 3;
        if (v152 != (unsigned __int16)v33)
          v71 = v72;
        v84 = a14;
        v64 = v67
            + (int)((unint64_t)((*(int *)(v69 + 4 * (__int16)(v33 - v152))
                                      + (uint64_t)*(int *)(v70 + 4 * (__int16)(v62 - v153))
                                      + *(int *)(a10 + 4 * v71))
                                     * v17
                                     + 0x2000) >> 14);
        if (v64 > 2147483646)
          goto LABEL_67;
LABEL_70:
        if (v160 > v64)
        {
          *a12 = v66;
          *a13 = v166[0];
          v160 = v64;
        }
LABEL_72:
        LODWORD(v73) = 0x7FFFFFFF;
        if (v50 < v163 || v50 > v162)
        {
          LODWORD(v83) = 0x7FFFFFFF;
          goto LABEL_85;
        }
        v74 = v33 - 4;
        LODWORD(v73) = 0x7FFFFFFF;
        if (v33 - 4 < v164 || v74 > v161)
        {
LABEL_90:
          v86 = v33 | 4;
          LODWORD(v83) = 0x7FFFFFFF;
          if ((v33 | 4) < v164 || v86 > v161)
            goto LABEL_85;
          v87 = v159 + (int)v147;
          if (v84)
          {
            v88 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v156 + 40))(v87, v155, 0, 4, v157, v158, v166);
            v83 = v88;
            v89 = a11;
            if (a11)
              goto LABEL_94;
          }
          else
          {
            v88 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v156 + 32))(v87, v155, 0, 4, v157, v158, v166);
            v83 = v88;
            v89 = a11;
            if (a11)
            {
LABEL_94:
              v90 = *v89;
              v91 = v89[1];
              v92 = (unsigned __int16)v50 != v153;
              v93 = 2;
              if ((unsigned __int16)v50 != v153)
                v93 = 3;
              if (v152 != (unsigned __int16)v86)
                v92 = v93;
              v83 += (int)((unint64_t)((*(int *)(v90 + 4 * (__int16)(v86 - v152))
                                             + (uint64_t)*(int *)(v91 + 4 * (__int16)(v50 - v153))
                                             + *(int *)(a10 + 4 * v92))
                                            * v17
                                            + 0x2000) >> 14);
              if (v83 > 2147483646)
                goto LABEL_99;
LABEL_102:
              if (v160 > v83)
              {
                *a12 = v88;
                *a13 = v166[0];
              }
LABEL_85:
              __asm { BR              X9 }
            }
          }
          if (v83 > 2147483646)
          {
LABEL_99:
            LODWORD(v83) = 0x7FFFFFFF;
            goto LABEL_85;
          }
          goto LABEL_102;
        }
        v75 = v159 + (int)(v145 + (v74 >> 3) * v155);
        if (v84)
        {
          v76 = (*(uint64_t (**)(uint64_t))(v156 + 40))(v75);
          v77 = v76;
          v78 = a11;
          if (a11)
            goto LABEL_78;
        }
        else
        {
          v76 = (*(uint64_t (**)(uint64_t))(v156 + 32))(v75);
          v77 = v76;
          v78 = a11;
          if (a11)
          {
LABEL_78:
            v79 = *v78;
            v80 = v78[1];
            v81 = (unsigned __int16)v50 != v153;
            v82 = 2;
            if ((unsigned __int16)v50 != v153)
              v82 = 3;
            if (v152 != (unsigned __int16)v74)
              v81 = v82;
            v84 = a14;
            v73 = v77
                + (int)((unint64_t)((*(int *)(v79 + 4 * (__int16)(v74 - v152))
                                          + (uint64_t)*(int *)(v80 + 4 * (__int16)(v50 - v153))
                                          + *(int *)(a10 + 4 * v81))
                                         * v17
                                         + 0x2000) >> 14);
            if (v73 > 2147483646)
              goto LABEL_83;
LABEL_88:
            if (v160 > v73)
            {
              *a12 = v76;
              *a13 = v166[0];
              v160 = v73;
            }
            goto LABEL_90;
          }
        }
        v84 = a14;
        LODWORD(v73) = v77;
        if (v77 > 2147483646)
        {
LABEL_83:
          LODWORD(v73) = 0x7FFFFFFF;
          goto LABEL_90;
        }
        goto LABEL_88;
      }
    }
    v84 = a14;
    LODWORD(v64) = v67;
    if (v67 > 2147483646)
    {
LABEL_67:
      LODWORD(v64) = 0x7FFFFFFF;
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  v165 = 0;
  get_cost_surf_min(a9, (_DWORD *)&v165 + 1, &v165, 2);
  if (v165)
  {
    v40 = v34;
    v41 = 2 * v165 + v34;
    v42 = a14;
    v43 = a3;
    if (v41 < v163)
    {
      v44 = v22;
    }
    else
    {
      v44 = v22;
      if (v41 <= v162)
      {
        v45 = 2 * HIDWORD(v165) + v33;
        if (v45 >= v164 && v45 <= v161)
        {
          v46 = v159 + (v45 >> 3) * (int)v22 + (v41 >> 3);
          v47 = (2 * (_BYTE)v165) & 6;
          v48 = (2 * BYTE4(v165)) & 6;
          if (a14)
            v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(a6 + 40))(v46, v22, v47, v48, v157, v158, v166, a14);
          else
            v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v46, v22, v47, v48, v157, v158, v166);
          if (a11)
          {
            v94 = (unsigned __int16)v41 != v153;
            v95 = 2;
            if ((unsigned __int16)v41 != v153)
              v95 = 3;
            if (v152 != (unsigned __int16)v45)
              v94 = v95;
            v96 = (unint64_t)((*(int *)(*a11 + 4 * (__int16)(v45 - v152))
                                    + (uint64_t)*(int *)(a11[1] + 4 * (__int16)(v41 - v153))
                                    + *(int *)(a10 + 4 * v94))
                                   * v154
                                   + 0x2000) >> 14;
          }
          else
          {
            LODWORD(v96) = 0;
          }
          v42 = a14;
          v97 = v49 + (uint64_t)(int)v96;
          if (v97 <= 2147483646 && v160 > v97)
          {
            *a12 = v49;
            *a13 = v166[0];
            v160 = v49 + v96;
            v150 = v45;
            v40 = v41;
          }
        }
      }
    }
  }
  else
  {
    v42 = a14;
    v43 = a3;
    v40 = v34;
    v44 = v22;
  }
  if (a4)
  {
    v98 = (__int16)*v43;
    if (v98 < 0)
      v98 = -v98;
    if ((unsigned __int16)v98 <= 0x3Fu)
    {
      v99 = (__int16)v43[1];
      if (v99 < 0)
        v99 = -v99;
      if (!a7 && (unsigned __int16)v99 <= 0x3Fu)
      {
        v100 = v40 - 2;
        v101 = v40 - 2 >= v163 && v100 <= v162;
        LODWORD(v102) = 0x7FFFFFFF;
        if (!v101 || v150 < v164 || v150 > v161)
          goto LABEL_145;
        v103 = v159 + (v150 >> 3) * (int)v44 + (v100 >> 3);
        v104 = v100 & 7;
        v105 = v150 & 7;
        if (v42)
        {
          v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))(a6 + 40))(v103, v44, v104, v105, v157, v158, v166);
          v107 = v106;
          v108 = a11;
          if (a11)
            goto LABEL_134;
        }
        else
        {
          v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v103, v44, v104, v105, v157, v158, v166);
          v107 = v106;
          v108 = a11;
          if (a11)
          {
LABEL_134:
            v109 = *v108;
            v110 = v108[1];
            v111 = (unsigned __int16)(v40 - 2) != v153;
            v112 = 2;
            if ((unsigned __int16)(v40 - 2) != v153)
              v112 = 3;
            if (v152 != (unsigned __int16)v150)
              v111 = v112;
            v42 = a14;
            v102 = v107
                 + (int)((unint64_t)((*(int *)(v109 + 4 * (__int16)(v150 - v152))
                                           + (uint64_t)*(int *)(v110 + 4 * (__int16)(v100 - v153))
                                           + *(int *)(a10 + 4 * v111))
                                          * v154
                                          + 0x2000) >> 14);
            if (v102 > 2147483646)
              goto LABEL_139;
LABEL_143:
            if (v160 > v102)
            {
              *a12 = v106;
              *a13 = v166[0];
              v160 = v102;
            }
LABEL_145:
            v114 = v40 + 2;
            v115 = v40 + 2 >= v163 && v114 <= v162;
            LODWORD(v116) = 0x7FFFFFFF;
            if (!v115 || v150 < v164 || v150 > v161)
              goto LABEL_164;
            v117 = v159 + (v150 >> 3) * (int)v22 + (v114 >> 3);
            if (v42)
            {
              v118 = (*(uint64_t (**)(uint64_t))(a6 + 40))(v117);
              v119 = v118;
              v120 = a11;
              if (a11)
                goto LABEL_154;
            }
            else
            {
              v118 = (*(uint64_t (**)(uint64_t))(a6 + 32))(v117);
              v119 = v118;
              v120 = a11;
              if (a11)
              {
LABEL_154:
                v121 = *v120;
                v122 = v120[1];
                v123 = (unsigned __int16)(v40 + 2) != v153;
                v124 = 2;
                if ((unsigned __int16)(v40 + 2) != v153)
                  v124 = 3;
                if (v152 != (unsigned __int16)v150)
                  v123 = v124;
                v42 = a14;
                v116 = v119
                     + (int)((unint64_t)((*(int *)(v121 + 4 * (__int16)(v150 - v152))
                                               + (uint64_t)*(int *)(v122 + 4 * (__int16)(v114 - v153))
                                               + *(int *)(a10 + 4 * v123))
                                              * v154
                                              + 0x2000) >> 14);
                if (v116 > 2147483646)
                  goto LABEL_159;
LABEL_162:
                if (v160 > v116)
                {
                  *a12 = v118;
                  *a13 = v166[0];
                  v160 = v116;
                }
LABEL_164:
                LODWORD(v125) = 0x7FFFFFFF;
                if (v40 < v163 || v40 > v162)
                {
                  LODWORD(v136) = 0x7FFFFFFF;
                  goto LABEL_197;
                }
                v126 = v150 - 2;
                LODWORD(v125) = 0x7FFFFFFF;
                if (v150 - 2 < v164 || v126 > v161)
                {
LABEL_183:
                  v137 = v150 + 2;
                  LODWORD(v136) = 0x7FFFFFFF;
                  if (v150 + 2 < v164 || v137 > v161)
LABEL_197:
                    __asm { BR              X9 }
                  v138 = v159 + (int)((v137 >> 3) * v155 + (v40 >> 3));
                  if (v42)
                  {
                    v139 = (*(uint64_t (**)(uint64_t))(a6 + 40))(v138);
                    v136 = v139;
                    v140 = a11;
                    if (a11)
                      goto LABEL_187;
                  }
                  else
                  {
                    v139 = (*(uint64_t (**)(uint64_t))(a6 + 32))(v138);
                    v136 = v139;
                    v140 = a11;
                    if (a11)
                    {
LABEL_187:
                      v141 = *v140;
                      v142 = v140[1];
                      v143 = (unsigned __int16)v40 != v153;
                      v144 = 2;
                      if ((unsigned __int16)v40 != v153)
                        v144 = 3;
                      if (v152 != (unsigned __int16)v137)
                        v143 = v144;
                      v136 += (int)((unint64_t)((*(int *)(v141 + 4 * (__int16)(v137 - v152))
                                                      + (uint64_t)*(int *)(v142 + 4 * (__int16)(v40 - v153))
                                                      + *(int *)(a10 + 4 * v143))
                                                     * v154
                                                     + 0x2000) >> 14);
                      if (v136 > 2147483646)
                        goto LABEL_192;
LABEL_195:
                      if (v160 > v136)
                      {
                        *a12 = v139;
                        *a13 = v166[0];
                      }
                      goto LABEL_197;
                    }
                  }
                  if (v136 > 2147483646)
                  {
LABEL_192:
                    LODWORD(v136) = 0x7FFFFFFF;
                    goto LABEL_197;
                  }
                  goto LABEL_195;
                }
                v127 = v159 + (int)((v126 >> 3) * v155 + (v40 >> 3));
                if (v42)
                {
                  v128 = (*(uint64_t (**)(uint64_t))(a6 + 40))(v127);
                  v129 = v128;
                  v130 = a11;
                  if (a11)
                  {
LABEL_170:
                    v131 = *v130;
                    v132 = v130[1];
                    v133 = (unsigned __int16)v40 != v153;
                    v134 = 2;
                    if ((unsigned __int16)v40 != v153)
                      v134 = 3;
                    if (v152 != (unsigned __int16)v126)
                      v133 = v134;
                    v135 = (unint64_t)((*(int *)(v131 + 4 * (__int16)(v126 - v152))
                                             + (uint64_t)*(int *)(v132 + 4 * (__int16)(v40 - v153))
                                             + *(int *)(a10 + 4 * v133))
                                            * v154
                                            + 0x2000) >> 14;
                    goto LABEL_179;
                  }
                }
                else
                {
                  v128 = (*(uint64_t (**)(uint64_t))(a6 + 32))(v127);
                  v129 = v128;
                  v130 = a11;
                  if (a11)
                    goto LABEL_170;
                }
                LODWORD(v135) = 0;
LABEL_179:
                v42 = a14;
                v125 = v129 + (int)v135;
                if (v125 <= 2147483646)
                {
                  if (v160 > v125)
                  {
                    *a12 = v128;
                    *a13 = v166[0];
                    v160 = v129 + v135;
                  }
                }
                else
                {
                  LODWORD(v125) = 0x7FFFFFFF;
                }
                goto LABEL_183;
              }
            }
            v42 = a14;
            LODWORD(v116) = v119;
            if (v119 > 2147483646)
            {
LABEL_159:
              LODWORD(v116) = 0x7FFFFFFF;
              goto LABEL_164;
            }
            goto LABEL_162;
          }
        }
        v42 = a14;
        LODWORD(v102) = v107;
        if (v107 > 2147483646)
        {
LABEL_139:
          LODWORD(v102) = 0x7FFFFFFF;
          goto LABEL_145;
        }
        goto LABEL_143;
      }
    }
  }
  *a2 = v150;
  a2[1] = v40;
  return v160;
}

uint64_t sub_208C063C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_DWORD *a21,_DWORD *a22,uint64_t a23,uint64_t a24,int a25,char a26,int a27,unsigned int a28,int a29,int a30,uint64_t a31,int a32,int a33,int a34,unsigned int a35,uint64_t a36)
{
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  char v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  char v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL8 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _BOOL8 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;

  if ((v44 & 1) == 0)
  {
    v46 = v43 - v36;
    if (v43 - v36 >= *(_DWORD *)(v45 - 104) && v46 <= *(_DWORD *)(v45 - 116))
    {
      v47 = *(_QWORD *)(v45 - 152) + (int)((v46 >> 3) * a35 + (v37 >> 3));
      if (a8)
        v48 = (*(uint64_t (**)(uint64_t))(a36 + 40))(v47);
      else
        v48 = (*(uint64_t (**)(uint64_t))(a36 + 32))(v47);
      v49 = *(uint64_t **)(v45 - 144);
      if (v49)
      {
        v50 = *v49;
        v51 = v49[1];
        v52 = (unsigned __int16)v37 != a30;
        v53 = 2;
        if ((unsigned __int16)v37 != a30)
          v53 = 3;
        if (a29 != (unsigned __int16)v46)
          v52 = v53;
        v54 = (unint64_t)((*(int *)(v50 + 4 * (__int16)(v46 - a29))
                                + (uint64_t)*(int *)(v51 + 4 * (__int16)(v37 - a30))
                                + *(int *)(a31 + 4 * v52))
                               * a32
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v54) = 0;
      }
      a8 = *(_QWORD *)(v45 - 128);
      v36 = a27;
      v55 = v48 + (uint64_t)(int)v54;
      if (v55 <= 2147483646 && *(_DWORD *)(v45 - 132) > v55)
      {
        *a21 = v48;
        *a22 = *(_DWORD *)(v45 - 92);
        *(_DWORD *)(v45 - 132) = v55;
        v38 = v46;
        v41 = v37;
      }
    }
  }
  if (a28 < 2)
    goto LABEL_160;
  if (v38 != v43 && v41 != v42)
  {
    v56 = v42 + 2 * (v41 - v42);
    if (v56 < *(_DWORD *)(v45 - 108))
    {
      v57 = a35;
    }
    else
    {
      v57 = a35;
      if (v56 <= *(_DWORD *)(v45 - 112) && v38 >= *(_DWORD *)(v45 - 104) && v38 <= *(_DWORD *)(v45 - 116))
      {
        v58 = *(_QWORD *)(v45 - 152) + (int)((v38 >> 3) * a35 + (v56 >> 3));
        v59 = v56 & 7;
        v60 = v38 & 7;
        if (a8)
          v61 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v58, a35, v59, v60, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
        else
          v61 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v58, a35, v59, v60, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
        v77 = *(uint64_t **)(v45 - 144);
        if (v77)
        {
          v78 = *v77;
          v79 = v77[1];
          v80 = (unsigned __int16)(v42 + 2 * (v41 - v42)) != a30;
          v81 = 2;
          if ((unsigned __int16)(v42 + 2 * (v41 - v42)) != a30)
            v81 = 3;
          if (a29 != (unsigned __int16)v38)
            v80 = v81;
          v82 = (((a32
                 * (*(int *)(v78 + 4 * (__int16)(v38 - a29))
                  + (uint64_t)*(int *)(v79 + 4 * (__int16)(v56 - a30))
                  + *(int *)(a31 + 4 * v80))) << 18)
               + 0x80000000) >> 32;
        }
        else
        {
          v82 = 0;
        }
        a8 = *(_QWORD *)(v45 - 128);
        v83 = v82 + v61;
        if (v83 <= 2147483646 && *(_DWORD *)(v45 - 132) > v83)
        {
          *a21 = v61;
          *a22 = *(_DWORD *)(v45 - 92);
          *(_DWORD *)(v45 - 132) = v83;
        }
      }
    }
    if (v41 >= *(_DWORD *)(v45 - 108) && v41 <= *(_DWORD *)(v45 - 112))
    {
      v85 = v43 + 2 * (v38 - v43);
      if (v85 >= *(_DWORD *)(v45 - 104))
      {
        if (v85 > *(_DWORD *)(v45 - 116))
          goto LABEL_161;
        v86 = *(_QWORD *)(v45 - 152) + (v85 >> 3) * (int)v57 + (v41 >> 3);
        v87 = v41 & 7;
        v88 = v85 & 7;
        v89 = a8
            ? (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v86, v57, v87, v88, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92): (*(unint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v86, v57, v87, v88, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
        v90 = *(uint64_t **)(v45 - 144);
        if (v90)
        {
          v91 = *v90;
          v92 = v90[1];
          v93 = (unsigned __int16)v41 != a30;
          v94 = 2;
          if ((unsigned __int16)v41 != a30)
            v94 = 3;
          if (a29 != (unsigned __int16)v85)
            v93 = v94;
          v95 = (((a32
                 * (*(int *)(v91 + 4 * (__int16)(v85 - a29))
                  + (uint64_t)*(int *)(v92 + 4 * (__int16)(v41 - a30))
                  + *(int *)(a31 + 4 * v93))) << 18)
               + 0x80000000) >> 32;
        }
        else
        {
          v95 = 0;
        }
        v96 = v95 + v89;
        if (v96 > 2147483646 || *(_DWORD *)(v45 - 132) <= v96)
LABEL_161:
          JUMPOUT(0x208C05EACLL);
LABEL_159:
        *a21 = v89;
        *a22 = *(_DWORD *)(v45 - 92);
        *(_DWORD *)(v45 - 132) = v96;
        goto LABEL_161;
      }
    }
LABEL_160:
    JUMPOUT(0x208C05EA8);
  }
  if (v38 == v43 && v41 != v42)
  {
    v62 = v42 + 2 * (v41 - v42);
    if (v62 < *(_DWORD *)(v45 - 108))
    {
      v63 = a35;
    }
    else
    {
      v63 = a35;
      if (v62 <= *(_DWORD *)(v45 - 112))
      {
        v64 = v36 + v43;
        if (v36 + v43 >= *(_DWORD *)(v45 - 104) && v64 <= *(_DWORD *)(v45 - 116))
        {
          v65 = *(_QWORD *)(v45 - 152) + (int)((v64 >> 3) * a35 + (v62 >> 3));
          v66 = v62 & 7;
          v67 = v64 & 7;
          if (a8)
            v68 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v65, a35, v66, v67, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
          else
            v68 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v65, a35, v66, v67, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
          v97 = *(uint64_t **)(v45 - 144);
          if (v97)
          {
            v98 = *v97;
            v99 = v97[1];
            v100 = (unsigned __int16)(v42 + 2 * (v41 - v42)) != a30;
            v101 = 2;
            if ((unsigned __int16)(v42 + 2 * (v41 - v42)) != a30)
              v101 = 3;
            if (a29 != (unsigned __int16)v64)
              v100 = v101;
            v102 = ((((*(int *)(v98 + 4 * (__int16)(v64 - a29))
                     + (uint64_t)*(int *)(v99 + 4 * (__int16)(v62 - a30))
                     + *(int *)(a31 + 4 * v100))
                    * a32) << 18)
                  + 0x80000000) >> 32;
          }
          else
          {
            v102 = 0;
          }
          a8 = *(_QWORD *)(v45 - 128);
          v36 = a27;
          v103 = v102 + v68;
          if (v103 <= 2147483646 && *(_DWORD *)(v45 - 132) > v103)
          {
            *a21 = v68;
            *a22 = *(_DWORD *)(v45 - 92);
            *(_DWORD *)(v45 - 132) = v103;
          }
        }
        v104 = v43 - v36;
        if (v43 - v36 >= *(_DWORD *)(v45 - 104) && v104 <= *(_DWORD *)(v45 - 116))
        {
          v105 = *(_QWORD *)(v45 - 152) + (int)((v104 >> 3) * a35 + (v62 >> 3));
          v106 = v62 & 7;
          v107 = v104 & 7;
          if (a8)
            v108 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v105, a35, v106, v107, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
          else
            v108 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v105, a35, v106, v107, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
          v109 = *(uint64_t **)(v45 - 144);
          if (v109)
          {
            v110 = *v109;
            v111 = v109[1];
            v112 = (unsigned __int16)(v42 + 2 * (v41 - v42)) != a30;
            v113 = 2;
            if ((unsigned __int16)(v42 + 2 * (v41 - v42)) != a30)
              v113 = 3;
            if (a29 != (unsigned __int16)v104)
              v112 = v113;
            v114 = (((a32
                    * (*(int *)(v110 + 4 * (__int16)(v104 - a29))
                     + (uint64_t)*(int *)(v111 + 4 * (__int16)(v62 - a30))
                     + *(int *)(a31 + 4 * v112))) << 18)
                  + 0x80000000) >> 32;
          }
          else
          {
            v114 = 0;
          }
          a8 = *(_QWORD *)(v45 - 128);
          v36 = a27;
          v115 = v114 + v108;
          if (v115 <= 2147483646 && *(_DWORD *)(v45 - 132) > v115)
          {
            *a21 = v108;
            *a22 = *(_DWORD *)(v45 - 92);
            *(_DWORD *)(v45 - 132) = v115;
          }
        }
      }
    }
    v117 = v41 < *(_DWORD *)(v45 - 108) || v41 > *(_DWORD *)(v45 - 112);
    if (v40 > 1)
    {
      if (v117)
        goto LABEL_160;
      v118 = v43 - v36;
      if (v43 - v36 < *(_DWORD *)(v45 - 104))
        goto LABEL_160;
      if (v118 > *(_DWORD *)(v45 - 116))
        goto LABEL_161;
      v122 = *(_QWORD *)(v45 - 152) + (v118 >> 3) * (int)v63 + (v41 >> 3);
      v123 = v41 & 7;
      v124 = v118 & 7;
      if (a8)
        v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v122, v63, v123, v124, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
      else
        v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v122, v63, v123, v124, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
      v137 = v89;
      v138 = *(uint64_t **)(v45 - 144);
      if (v138)
        goto LABEL_140;
    }
    else
    {
      if (v117)
        goto LABEL_160;
      v118 = v36 + v43;
      if (v36 + v43 < *(_DWORD *)(v45 - 104))
        goto LABEL_160;
      if (v118 > *(_DWORD *)(v45 - 116))
        goto LABEL_161;
      v119 = *(_QWORD *)(v45 - 152) + (v118 >> 3) * (int)v63 + (v41 >> 3);
      v120 = v41 & 7;
      v121 = v118 & 7;
      if (a8)
        v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 40))(v119, v63, v120, v121, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
      else
        v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(a36 + 32))(v119, v63, v120, v121, *(_QWORD *)(v45 - 168), *(unsigned int *)(v45 - 156), v45 - 92);
      v137 = v89;
      v138 = *(uint64_t **)(v45 - 144);
      if (v138)
      {
LABEL_140:
        v139 = *v138;
        v140 = v138[1];
        v141 = (unsigned __int16)v41 != a30;
        v142 = 2;
        if ((unsigned __int16)v41 != a30)
          v142 = 3;
        if (a29 != (unsigned __int16)v118)
          v141 = v142;
        v143 = (((a32
                * (*(int *)(v139 + 4 * (__int16)(v118 - a29))
                 + (uint64_t)*(int *)(v140 + 4 * (__int16)(v41 - a30))
                 + *(int *)(a31 + 4 * v141))) << 18)
              + 0x80000000) >> 32;
LABEL_148:
        v144 = v143 + v137;
        if (v144 > 2147483646)
          goto LABEL_161;
        LODWORD(v96) = v144;
        if (*(_DWORD *)(v45 - 132) <= v144)
          goto LABEL_161;
        goto LABEL_159;
      }
    }
    v143 = 0;
    goto LABEL_148;
  }
  v69 = v38 - v43;
  if (v38 == v43 || v41 != v42)
    goto LABEL_160;
  if ((a26 & 1) != 0 || (v70 = v43 + 2 * v69, v70 < *(_DWORD *)(v45 - 104)) || v70 > *(_DWORD *)(v45 - 116))
  {
    v73 = v44;
  }
  else
  {
    v71 = *(_QWORD *)(v45 - 152) + (int)((v70 >> 3) * a35 + (v39 >> 3));
    if (a8)
      v72 = (*(uint64_t (**)(uint64_t))(a36 + 40))(v71);
    else
      v72 = (*(uint64_t (**)(uint64_t))(a36 + 32))(v71);
    v125 = *(uint64_t **)(v45 - 144);
    if (v125)
    {
      v126 = *v125;
      v127 = v125[1];
      v128 = (unsigned __int16)v39 != a30;
      v129 = 2;
      if ((unsigned __int16)v39 != a30)
        v129 = 3;
      if (a29 != (unsigned __int16)v70)
        v128 = v129;
      v130 = ((((*(int *)(v126 + 4 * (__int16)(v70 - a29))
               + (uint64_t)*(int *)(v127 + 4 * (__int16)(v39 - a30))
               + *(int *)(a31 + 4 * v128))
              * a32) << 18)
            + 0x80000000) >> 32;
    }
    else
    {
      v130 = 0;
    }
    a8 = *(_QWORD *)(v45 - 128);
    v73 = v44;
    v145 = v130 + v72;
    if (v145 <= 2147483646 && *(_DWORD *)(v45 - 132) > v145)
    {
      *a21 = v72;
      *a22 = *(_DWORD *)(v45 - 92);
      *(_DWORD *)(v45 - 132) = v145;
    }
  }
  if ((v73 & 1) == 0)
  {
    v74 = v43 + 2 * v69;
    if (v74 >= *(_DWORD *)(v45 - 104) && v74 <= *(_DWORD *)(v45 - 116))
    {
      v75 = *(_QWORD *)(v45 - 152) + (int)((v74 >> 3) * a35 + (v37 >> 3));
      if (a8)
        v76 = (*(uint64_t (**)(uint64_t))(a36 + 40))(v75);
      else
        v76 = (*(uint64_t (**)(uint64_t))(a36 + 32))(v75);
      v131 = *(uint64_t **)(v45 - 144);
      if (v131)
      {
        v132 = *v131;
        v133 = v131[1];
        v134 = (unsigned __int16)v37 != a30;
        v135 = 2;
        if ((unsigned __int16)v37 != a30)
          v135 = 3;
        if (a29 != (unsigned __int16)v74)
          v134 = v135;
        v136 = (((a32
                * (*(int *)(v132 + 4 * (__int16)(v74 - a29))
                 + (uint64_t)*(int *)(v133 + 4 * (__int16)(v37 - a30))
                 + *(int *)(a31 + 4 * v134))) << 18)
              + 0x80000000) >> 32;
      }
      else
      {
        v136 = 0;
      }
      v146 = v136 + v76;
      if (v146 <= 2147483646 && *(_DWORD *)(v45 - 132) > v146)
      {
        *a21 = v76;
        *a22 = *(_DWORD *)(v45 - 92);
        *(_DWORD *)(v45 - 132) = v146;
      }
    }
  }
  return ((uint64_t (*)(void))((char *)&loc_208C06ABC + 4 * byte_208F49D28[v40]))();
}

int *get_cost_surf_min(int *result, _DWORD *a2, _DWORD *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = result[1];
  v6 = result[2];
  v5 = result[3];
  v7 = v4 - v5;
  v8 = 2 * *result;
  v9 = v4 - v8 + v5;
  v10 = result[4];
  v11 = v10 - v6;
  v12 = v10 - v8 + v6;
  v13 = a4 - 1;
  v14 = v7 << (a4 - 1);
  if ((v9 ^ v14) >= 0)
    v15 = 2;
  else
    v15 = -2;
  *a3 = (v9 / v15 + v14) / v9;
  v16 = v11 << v13;
  if (((v11 << v13) ^ v12) >= 0)
    v17 = 2;
  else
    v17 = -2;
  *a2 = (v12 / v17 + v16) / v12;
  return result;
}

uint64_t vp9_find_best_sub_pixel_tree_pruned_more(uint64_t a1, __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, int *a9, uint64_t a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, uint8x16_t *a14, int a15, int a16)
{
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint8x16_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  signed int v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  unsigned __int16 v50;
  uint64_t v51;
  signed int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  signed int v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  signed int v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned __int16 v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint8x16_t *v82;
  int v83;
  uint64_t v84;
  signed int v85;
  uint64_t *v86;
  unsigned __int16 v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  unsigned int v97;
  signed int v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  signed int v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  _BOOL8 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  signed int v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  signed int v129;
  uint64_t *v130;
  unsigned __int16 v131;
  uint64_t v132;
  uint64_t v133;
  _BOOL8 v134;
  uint64_t v135;
  _BOOL8 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  int v145;
  int v146;
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  _DWORD v160[3];

  v18 = *(_QWORD *)(a1 + 8216);
  v19 = *(unsigned int *)(a1 + 8224);
  v160[0] = 0;
  v20 = *(_DWORD *)(a1 + 24952);
  v21 = *a2;
  v22 = a2[1];
  v23 = (__int16)*a3;
  v24 = (__int16)a3[1];
  v25 = 8 * *(_DWORD *)(a1 + 25848);
  if (v25 <= v24 - 8184)
    v25 = v24 - 8184;
  v26 = 8 * *(_DWORD *)(a1 + 25852);
  if (v26 >= v24 + 8184)
    v26 = v24 + 8184;
  v27 = v23 - 8184;
  if (8 * *(_DWORD *)(a1 + 25856) > v23 - 8184)
    v27 = 8 * *(_DWORD *)(a1 + 25856);
  v28 = 8 * *(_DWORD *)(a1 + 25860);
  if (v28 >= v23 + 8184)
    v28 = v23 + 8184;
  if (v25 <= -16383)
    v25 = -16383;
  v157 = v25;
  if (v26 >= 16382)
    v26 = 16382;
  v156 = v26;
  if (v27 <= -16383)
    v27 = -16383;
  v158 = v27;
  v142 = (int)(v20 * v21);
  v29 = v142 + v22;
  v30 = *(_QWORD *)(a1 + 24944);
  v145 = *a3;
  v146 = a3[1];
  v31 = 8 * v21;
  if (v28 >= 16382)
    v28 = 16382;
  v155 = v28;
  v141 = a2[1];
  *a2 = v31;
  v32 = 8 * v22;
  a2[1] = v32;
  v148 = 8 * v21;
  v143 = v29;
  v153 = v20;
  v147 = a5;
  v149 = a6;
  v150 = v18;
  v151 = v19;
  v152 = v30;
  v154 = setup_center_error(a1 + 24912, (uint64_t)a2, (uint64_t)a3, a5, a6, v18, v19, v30, v20, a14, a15, a16, v29, a10, a11, (uint64_t)a13, a12);
  if (!a9
    || (v33 = *a9, *a9 == 0x7FFFFFFF)
    || (v34 = a9[1], v34 == 0x7FFFFFFF)
    || (v35 = a9[2], v35 == 0x7FFFFFFF)
    || (v36 = a9[3], v36 == 0x7FFFFFFF)
    || (v37 = a9[4], v33 >= v37)
    || v33 >= v36
    || v33 >= v35
    || v33 >= v34
    || v37 == 0x7FFFFFFF)
  {
    v46 = v32;
    v47 = v32 - 4;
    v48 = v32 - 4 >= v157 && v47 <= v156;
    LODWORD(v49) = 0x7FFFFFFF;
    v50 = v32;
    if (!v48)
    {
      v82 = a14;
      goto LABEL_53;
    }
    v82 = a14;
    if (v31 < v158 || v31 > v155)
      goto LABEL_53;
    v51 = v152 + v142 + (v47 >> 3);
    if (a14)
    {
      v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(a6 + 40))(v51, v20, 4, 0, v150, v151, v160, a14);
      v53 = v52;
      v54 = a11;
      if (a11)
        goto LABEL_43;
    }
    else
    {
      v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v51, v20, 4, 0, v150, v151, v160);
      v53 = v52;
      v54 = a11;
      if (a11)
      {
LABEL_43:
        v55 = *v54;
        v56 = v54[1];
        v57 = (unsigned __int16)(v32 - 4) != v146;
        v58 = 2;
        if ((unsigned __int16)(v32 - 4) != v146)
          v58 = 3;
        if (v145 != (unsigned __int16)v31)
          v57 = v58;
        v46 = v32;
        v49 = v53
            + (int)((unint64_t)((*(int *)(v55 + 4 * (__int16)(v31 - v145))
                                      + (uint64_t)*(int *)(v56 + 4 * (__int16)(v47 - v146))
                                      + *(int *)(a10 + 4 * v57))
                                     * v147
                                     + 0x2000) >> 14);
        if (v49 > 2147483646)
          goto LABEL_48;
        goto LABEL_51;
      }
    }
    v46 = v32;
    LODWORD(v49) = v53;
    if (v53 > 2147483646)
    {
LABEL_48:
      LODWORD(v49) = 0x7FFFFFFF;
      goto LABEL_53;
    }
LABEL_51:
    if (v154 > v49)
    {
      *a12 = v52;
      *a13 = v160[0];
      v154 = v49;
    }
LABEL_53:
    v59 = v46 | 4;
    v60 = (v46 | 4) >= v157 && v59 <= v156;
    LODWORD(v61) = 0x7FFFFFFF;
    if (!v60 || v31 < v158 || v31 > v155)
      goto LABEL_72;
    v62 = v152 + v143;
    if (v82)
    {
      v63 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(v149 + 40))(v62, v153, 4, 0, v150, v151, v160, v82);
      v64 = v63;
      v65 = a11;
      if (a11)
        goto LABEL_62;
    }
    else
    {
      v63 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(v149 + 32))(v62, v153, 4, 0, v150, v151, v160);
      v64 = v63;
      v65 = a11;
      if (a11)
      {
LABEL_62:
        v66 = *v65;
        v67 = v65[1];
        v68 = (unsigned __int16)v59 != v146;
        v69 = 2;
        if ((unsigned __int16)v59 != v146)
          v69 = 3;
        if (v145 != (unsigned __int16)v31)
          v68 = v69;
        v46 = v32;
        v61 = v64
            + (int)((unint64_t)((*(int *)(v66 + 4 * (__int16)(v31 - v145))
                                      + (uint64_t)*(int *)(v67 + 4 * (__int16)(v59 - v146))
                                      + *(int *)(a10 + 4 * v68))
                                     * v147
                                     + 0x2000) >> 14);
        if (v61 > 2147483646)
          goto LABEL_67;
LABEL_70:
        if (v154 > v61)
        {
          *a12 = v63;
          *a13 = v160[0];
          v154 = v61;
        }
LABEL_72:
        LODWORD(v70) = 0x7FFFFFFF;
        if (v46 < v157 || v46 > v156)
        {
          LODWORD(v81) = 0x7FFFFFFF;
          goto LABEL_85;
        }
        v71 = v31 - 4;
        LODWORD(v70) = 0x7FFFFFFF;
        if (v31 - 4 < v158 || v71 > v155)
        {
LABEL_90:
          v83 = v31 | 4;
          LODWORD(v81) = 0x7FFFFFFF;
          if ((v31 | 4) < v158 || v83 > v155)
            goto LABEL_85;
          v84 = v152 + (int)v143;
          if (a14)
          {
            v85 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v149 + 40))(v84, v153, 0, 4, v150, v151, v160);
            v81 = v85;
            v86 = a11;
            v87 = v50;
            if (a11)
              goto LABEL_94;
          }
          else
          {
            v85 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v149 + 32))(v84, v153, 0, 4, v150, v151, v160);
            v81 = v85;
            v86 = a11;
            v87 = v50;
            if (a11)
            {
LABEL_94:
              v88 = *v86;
              v89 = v86[1];
              v90 = v87 != v146;
              v91 = 2;
              if (v87 != v146)
                v91 = 3;
              if (v145 != (unsigned __int16)v83)
                v90 = v91;
              v81 += (int)((unint64_t)((*(int *)(v88 + 4 * (__int16)(v83 - v145))
                                             + (uint64_t)*(int *)(v89 + 4 * (__int16)(v87 - v146))
                                             + *(int *)(a10 + 4 * v90))
                                            * v147
                                            + 0x2000) >> 14);
              if (v81 > 2147483646)
                goto LABEL_99;
LABEL_102:
              if (v154 > v81)
              {
                *a12 = v85;
                *a13 = v160[0];
              }
LABEL_85:
              __asm { BR              X9 }
            }
          }
          if (v81 > 2147483646)
          {
LABEL_99:
            LODWORD(v81) = 0x7FFFFFFF;
            goto LABEL_85;
          }
          goto LABEL_102;
        }
        v72 = v152 + (int)(v141 + (v71 >> 3) * v153);
        if (a14)
        {
          v73 = (*(uint64_t (**)(uint64_t))(v149 + 40))(v72);
          v74 = v73;
          v75 = a11;
          v76 = v50;
          if (a11)
            goto LABEL_78;
        }
        else
        {
          v73 = (*(uint64_t (**)(uint64_t))(v149 + 32))(v72);
          v74 = v73;
          v75 = a11;
          v76 = v50;
          if (a11)
          {
LABEL_78:
            v77 = *v75;
            v78 = v75[1];
            v79 = v76 != v146;
            v80 = 2;
            if (v76 != v146)
              v80 = 3;
            if (v145 != (unsigned __int16)v71)
              v79 = v80;
            v70 = v74
                + (int)((unint64_t)((*(int *)(v77 + 4 * (__int16)(v71 - v145))
                                          + (uint64_t)*(int *)(v78 + 4 * (__int16)(v76 - v146))
                                          + *(int *)(a10 + 4 * v79))
                                         * v147
                                         + 0x2000) >> 14);
            if (v70 > 2147483646)
              goto LABEL_83;
LABEL_88:
            if (v154 > v70)
            {
              *a12 = v73;
              *a13 = v160[0];
              v154 = v70;
            }
            goto LABEL_90;
          }
        }
        LODWORD(v70) = v74;
        if (v74 > 2147483646)
        {
LABEL_83:
          LODWORD(v70) = 0x7FFFFFFF;
          goto LABEL_90;
        }
        goto LABEL_88;
      }
    }
    v46 = v32;
    LODWORD(v61) = v64;
    if (v64 > 2147483646)
    {
LABEL_67:
      LODWORD(v61) = 0x7FFFFFFF;
      goto LABEL_72;
    }
    goto LABEL_70;
  }
  v159 = 0;
  get_cost_surf_min(a9, (_DWORD *)&v159 + 1, &v159, 1);
  if (v159)
  {
    v38 = v32;
    v39 = 4 * v159 + v32;
    v40 = v20;
    if (v39 < v157)
    {
      v41 = a14;
    }
    else
    {
      v41 = a14;
      if (v39 <= v156)
      {
        v42 = 4 * HIDWORD(v159) + v31;
        if (v42 >= v158 && v42 <= v155)
        {
          v43 = v38;
          v44 = v152 + (int)((v42 >> 3) * v20 + (v39 >> 3));
          if (a14)
            v45 = (*(uint64_t (**)(uint64_t))(a6 + 40))(v44);
          else
            v45 = (*(uint64_t (**)(uint64_t))(a6 + 32))(v44);
          if (a11)
          {
            v137 = (unsigned __int16)v39 != v146;
            v138 = 2;
            if ((unsigned __int16)v39 != v146)
              v138 = 3;
            if (v145 != (unsigned __int16)v42)
              v137 = v138;
            v139 = (unint64_t)((*(int *)(*a11 + 4 * (__int16)(v42 - v145))
                                     + (uint64_t)*(int *)(a11[1] + 4 * (__int16)(v39 - v146))
                                     + *(int *)(a10 + 4 * v137))
                                    * v147
                                    + 0x2000) >> 14;
          }
          else
          {
            LODWORD(v139) = 0;
          }
          v38 = v43;
          v40 = v20;
          v140 = v45 + (uint64_t)(int)v139;
          if (v140 <= 2147483646 && v154 > v140)
          {
            *a12 = v45;
            *a13 = v160[0];
            v154 = v45 + v139;
            v148 = v42;
            v38 = v39;
          }
        }
      }
    }
  }
  else
  {
    v40 = v20;
    v38 = v32;
    v41 = a14;
  }
  if (a7 != 2)
  {
    v92 = v38 - 2;
    v93 = v38 - 2 >= v157 && v92 <= v156;
    LODWORD(v94) = 0x7FFFFFFF;
    v95 = v38;
    if (!v93 || v148 < v158 || v148 > v155)
      goto LABEL_124;
    v96 = v152 + (int)((v148 >> 3) * v40 + (v92 >> 3));
    if (v41)
    {
      v97 = v40;
      v98 = (*(uint64_t (**)(uint64_t))(v149 + 40))(v96);
      v99 = v98;
      v100 = a11;
      if (a11)
        goto LABEL_114;
    }
    else
    {
      v97 = v40;
      v98 = (*(uint64_t (**)(uint64_t))(v149 + 32))(v96);
      v99 = v98;
      v100 = a11;
      if (a11)
      {
LABEL_114:
        v101 = *v100;
        v102 = v100[1];
        v103 = (unsigned __int16)v92 != v146;
        v104 = 2;
        if ((unsigned __int16)v92 != v146)
          v104 = 3;
        if (v145 != (unsigned __int16)v148)
          v103 = v104;
        v38 = v95;
        v40 = v97;
        v94 = v99
            + (int)((unint64_t)((*(int *)(v101 + 4 * (__int16)(v148 - v145))
                                      + (uint64_t)*(int *)(v102 + 4 * (__int16)(v92 - v146))
                                      + *(int *)(a10 + 4 * v103))
                                     * v147
                                     + 0x2000) >> 14);
        if (v94 > 2147483646)
          goto LABEL_119;
LABEL_122:
        if (v154 > v94)
        {
          *a12 = v98;
          *a13 = v160[0];
          v154 = v94;
        }
LABEL_124:
        v105 = v38 + 2;
        v106 = v38 + 2 >= v157 && v105 <= v156;
        LODWORD(v107) = 0x7FFFFFFF;
        if (!v106 || v148 < v158 || v148 > v155)
          goto LABEL_143;
        v108 = v152 + (int)((v148 >> 3) * v40 + (v105 >> 3));
        if (a14)
        {
          v109 = (*(uint64_t (**)(uint64_t))(v149 + 40))(v108);
          v110 = v109;
          v111 = a11;
          if (a11)
            goto LABEL_133;
        }
        else
        {
          v109 = (*(uint64_t (**)(uint64_t))(v149 + 32))(v108);
          v110 = v109;
          v111 = a11;
          if (a11)
          {
LABEL_133:
            v112 = *v111;
            v113 = v111[1];
            v114 = (unsigned __int16)v105 != v146;
            v115 = 2;
            if ((unsigned __int16)v105 != v146)
              v115 = 3;
            if (v145 != (unsigned __int16)v148)
              v114 = v115;
            v38 = v95;
            v107 = v110
                 + (int)((unint64_t)((*(int *)(v112 + 4 * (__int16)(v148 - v145))
                                           + (uint64_t)*(int *)(v113 + 4 * (__int16)(v105 - v146))
                                           + *(int *)(a10 + 4 * v114))
                                          * v147
                                          + 0x2000) >> 14);
            if (v107 > 2147483646)
              goto LABEL_138;
LABEL_141:
            if (v154 > v107)
            {
              *a12 = v109;
              *a13 = v160[0];
              v154 = v107;
            }
LABEL_143:
            LODWORD(v116) = 0x7FFFFFFF;
            if (v38 < v157 || v38 > v156)
            {
              LODWORD(v126) = 0x7FFFFFFF;
              goto LABEL_174;
            }
            v117 = v148 - 2;
            LODWORD(v116) = 0x7FFFFFFF;
            if (v148 - 2 < v158 || v117 > v155)
            {
LABEL_160:
              v127 = v148 + 2;
              LODWORD(v126) = 0x7FFFFFFF;
              if (v148 + 2 < v158 || v127 > v155)
LABEL_174:
                __asm { BR              X9 }
              v128 = v152 + (int)((v127 >> 3) * v20 + (v38 >> 3));
              if (a14)
              {
                v129 = (*(uint64_t (**)(uint64_t))(v149 + 40))(v128);
                v126 = v129;
                v130 = a11;
                v131 = v95;
                if (a11)
                  goto LABEL_164;
              }
              else
              {
                v129 = (*(uint64_t (**)(uint64_t))(v149 + 32))(v128);
                v126 = v129;
                v130 = a11;
                v131 = v95;
                if (a11)
                {
LABEL_164:
                  v132 = *v130;
                  v133 = v130[1];
                  v134 = v131 != v146;
                  v135 = 2;
                  if (v131 != v146)
                    v135 = 3;
                  if (v145 != (unsigned __int16)v127)
                    v134 = v135;
                  v126 += (int)((unint64_t)((*(int *)(v132 + 4 * (__int16)(v127 - v145))
                                                  + (uint64_t)*(int *)(v133 + 4 * (__int16)(v131 - v146))
                                                  + *(int *)(a10 + 4 * v134))
                                                 * v147
                                                 + 0x2000) >> 14);
                  if (v126 > 2147483646)
                    goto LABEL_169;
LABEL_172:
                  if (v154 > v126)
                  {
                    *a12 = v129;
                    *a13 = v160[0];
                  }
                  goto LABEL_174;
                }
              }
              if (v126 > 2147483646)
              {
LABEL_169:
                LODWORD(v126) = 0x7FFFFFFF;
                goto LABEL_174;
              }
              goto LABEL_172;
            }
            v118 = v152 + (int)((v117 >> 3) * v20 + (v38 >> 3));
            if (a14)
            {
              v119 = (*(uint64_t (**)(uint64_t))(v149 + 40))(v118);
              v120 = v119;
              v121 = a11;
              v38 = v95;
              if (a11)
                goto LABEL_149;
            }
            else
            {
              v119 = (*(uint64_t (**)(uint64_t))(v149 + 32))(v118);
              v120 = v119;
              v121 = a11;
              v38 = v95;
              if (a11)
              {
LABEL_149:
                v122 = *v121;
                v123 = v121[1];
                v124 = (unsigned __int16)v38 != v146;
                v125 = 2;
                if ((unsigned __int16)v38 != v146)
                  v125 = 3;
                if (v145 != (unsigned __int16)v117)
                  v124 = v125;
                v116 = v120
                     + (int)((unint64_t)((*(int *)(v122 + 4 * (__int16)(v117 - v145))
                                               + (uint64_t)*(int *)(v123 + 4 * (__int16)(v38 - v146))
                                               + *(int *)(a10 + 4 * v124))
                                              * v147
                                              + 0x2000) >> 14);
                if (v116 > 2147483646)
                  goto LABEL_154;
LABEL_158:
                if (v154 > v116)
                {
                  *a12 = v119;
                  *a13 = v160[0];
                  v154 = v116;
                }
                goto LABEL_160;
              }
            }
            LODWORD(v116) = v120;
            if (v120 > 2147483646)
            {
LABEL_154:
              LODWORD(v116) = 0x7FFFFFFF;
              goto LABEL_160;
            }
            goto LABEL_158;
          }
        }
        v38 = v95;
        LODWORD(v107) = v110;
        if (v110 > 2147483646)
        {
LABEL_138:
          LODWORD(v107) = 0x7FFFFFFF;
          goto LABEL_143;
        }
        goto LABEL_141;
      }
    }
    v38 = v95;
    v40 = v97;
    LODWORD(v94) = v99;
    if (v99 > 2147483646)
    {
LABEL_119:
      LODWORD(v94) = 0x7FFFFFFF;
      goto LABEL_124;
    }
    goto LABEL_122;
  }
  *a2 = v148;
  a2[1] = v38;
  return v154;
}

void vp9_find_best_sub_pixel_tree_pruned(uint64_t a1, __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, uint64_t a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, uint8x16_t *a14, int a15, int a16)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  signed int v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  signed int v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  signed int v55;
  uint64_t v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  signed int v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD v85[3];

  v17 = *(_QWORD *)(a1 + 8216);
  v18 = *(unsigned int *)(a1 + 8224);
  v85[0] = 0;
  v19 = *(_DWORD *)(a1 + 24952);
  v20 = *a2;
  v21 = a2[1];
  v22 = (__int16)*a3;
  v23 = (__int16)a3[1];
  v24 = 8 * *(_DWORD *)(a1 + 25848);
  if (v24 <= v23 - 8184)
    v24 = v23 - 8184;
  v25 = 8 * *(_DWORD *)(a1 + 25852);
  if (v25 >= v23 + 8184)
    v25 = v23 + 8184;
  v26 = v22 - 8184;
  if (8 * *(_DWORD *)(a1 + 25856) > v22 - 8184)
    v26 = 8 * *(_DWORD *)(a1 + 25856);
  v27 = 8 * *(_DWORD *)(a1 + 25860);
  if (v27 >= v22 + 8184)
    v27 = v22 + 8184;
  if (v24 <= -16383)
    v24 = -16383;
  v83 = v24;
  if (v25 >= 16382)
    v25 = 16382;
  v82 = v25;
  if (v26 <= -16383)
    v26 = -16383;
  v84 = v26;
  v70 = (int)(v19 * v20);
  v28 = v19 * v20 + v21;
  v29 = *(_QWORD *)(a1 + 24944);
  v72 = *a3;
  v73 = a3[1];
  v30 = 8 * v20;
  if (v27 >= 16382)
    v27 = 16382;
  v81 = v27;
  v69 = a2[1];
  v31 = 8 * v21;
  *a2 = v30;
  a2[1] = v31;
  v71 = v28;
  v80 = v19;
  v74 = a5;
  v75 = a6;
  v76 = v17;
  v77 = v18;
  v78 = v29;
  v79 = setup_center_error(a1 + 24912, (uint64_t)a2, (uint64_t)a3, a5, a6, v17, v18, v29, v19, a14, a15, a16, v28, a10, a11, (uint64_t)a13, a12);
  if (a9)
  {
    if (*a9 != 0x7FFFFFFF)
    {
      v32 = a9[1];
      if (v32 != 0x7FFFFFFF)
      {
        v33 = a9[2];
        if (v33 != 0x7FFFFFFF)
        {
          v34 = a9[3];
          if (v34 != 0x7FFFFFFF)
          {
            v35 = a9[4];
            if (v35 != 0x7FFFFFFF)
              __asm { BR              X10 }
          }
        }
      }
    }
  }
  v36 = v31 - 4;
  v37 = v31 - 4 >= v83 && v36 <= v82;
  LODWORD(v38) = 0x7FFFFFFF;
  if (!v37)
  {
    v60 = v19;
    goto LABEL_42;
  }
  v60 = v19;
  if (v30 < v84 || v30 > v81)
    goto LABEL_42;
  v39 = v78 + v70 + (v36 >> 3);
  if (a14)
  {
    v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(a6 + 40))(v39, v19, 4, 0, v76, v77, v85, a14);
    v41 = v40;
    if (a11)
      goto LABEL_32;
  }
  else
  {
    v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(a6 + 32))(v39, v19, 4, 0, v76, v77, v85);
    v41 = v40;
    if (a11)
    {
LABEL_32:
      v42 = (unsigned __int16)(v31 - 4) != v73;
      v43 = 2;
      if ((unsigned __int16)(v31 - 4) != v73)
        v43 = 3;
      if (v72 != (unsigned __int16)v30)
        v42 = v43;
      v60 = v19;
      v38 = v41
          + (int)((unint64_t)((*(int *)(*a11 + 4 * (__int16)(v30 - v72))
                                    + (uint64_t)*(int *)(a11[1] + 4 * (__int16)(v36 - v73))
                                    + *(int *)(a10 + 4 * v42))
                                   * v74
                                   + 0x2000) >> 14);
      if (v38 > 2147483646)
        goto LABEL_37;
      goto LABEL_40;
    }
  }
  v60 = v19;
  LODWORD(v38) = v41;
  if (v41 > 2147483646)
  {
LABEL_37:
    LODWORD(v38) = 0x7FFFFFFF;
    goto LABEL_42;
  }
LABEL_40:
  if (v79 > v38)
  {
    *a12 = v40;
    *a13 = v85[0];
    v79 = v38;
  }
LABEL_42:
  v44 = v31 | 4;
  v45 = (v31 | 4) >= v83 && v44 <= v82;
  LODWORD(v46) = 0x7FFFFFFF;
  if (!v45 || v30 < v84 || v30 > v81)
    goto LABEL_61;
  v47 = v78 + v71;
  if (a14)
  {
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *, uint8x16_t *))(v75 + 40))(v47, v60, 4, 0, v76, v77, v85, a14);
    v49 = v48;
    if (a11)
      goto LABEL_51;
  }
  else
  {
    v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _DWORD *))(v75 + 32))(v47, v60, 4, 0, v76, v77, v85);
    v49 = v48;
    if (a11)
    {
LABEL_51:
      v50 = ((unsigned __int16)v31 | 4) != v73;
      v51 = 2;
      if (((unsigned __int16)v31 | 4) != v73)
        v51 = 3;
      if (v72 != (unsigned __int16)v30)
        v50 = v51;
      v60 = v80;
      v46 = v49
          + (int)((unint64_t)((*(int *)(*a11 + 4 * (__int16)(v30 - v72))
                                    + (uint64_t)*(int *)(a11[1] + 4 * (__int16)(v44 - v73))
                                    + *(int *)(a10 + 4 * v50))
                                   * v74
                                   + 0x2000) >> 14);
      if (v46 > 2147483646)
        goto LABEL_56;
LABEL_59:
      if (v79 > v46)
      {
        *a12 = v48;
        *a13 = v85[0];
        v79 = v46;
      }
LABEL_61:
      LODWORD(v52) = 0x7FFFFFFF;
      if (v31 < v83 || v31 > v82)
      {
        LODWORD(v59) = 0x7FFFFFFF;
        goto LABEL_92;
      }
      v53 = v30 - 4;
      LODWORD(v52) = 0x7FFFFFFF;
      if (v30 - 4 < v84 || v53 > v81)
      {
LABEL_78:
        v61 = v30 | 4;
        LODWORD(v59) = 0x7FFFFFFF;
        if ((v30 | 4) < v84 || v61 > v81)
LABEL_92:
          __asm { BR              X9 }
        v62 = v78 + v71;
        if (a14)
        {
          v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v75 + 40))(v62, v60, 0, 4, v76, v77, v85);
          v59 = v63;
          v64 = a11;
          if (a11)
            goto LABEL_82;
        }
        else
        {
          v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _DWORD *))(v75 + 32))(v62, v60, 0, 4, v76, v77, v85);
          v59 = v63;
          v64 = a11;
          if (a11)
          {
LABEL_82:
            v65 = *v64;
            v66 = v64[1];
            v67 = (unsigned __int16)v31 != v73;
            v68 = 2;
            if ((unsigned __int16)v31 != v73)
              v68 = 3;
            if (v72 != (unsigned __int16)v61)
              v67 = v68;
            v59 += (int)((unint64_t)((*(int *)(v65 + 4 * (__int16)(v61 - v72))
                                           + (uint64_t)*(int *)(v66 + 4 * (__int16)(v31 - v73))
                                           + *(int *)(a10 + 4 * v67))
                                          * v74
                                          + 0x2000) >> 14);
            if (v59 > 2147483646)
              goto LABEL_87;
LABEL_90:
            if (v79 > v59)
            {
              *a12 = v63;
              *a13 = v85[0];
            }
            goto LABEL_92;
          }
        }
        if (v59 > 2147483646)
        {
LABEL_87:
          LODWORD(v59) = 0x7FFFFFFF;
          goto LABEL_92;
        }
        goto LABEL_90;
      }
      v54 = v78 + v69 + (v53 >> 3) * (int)v60;
      if (a14)
      {
        v55 = (*(uint64_t (**)(uint64_t))(v75 + 40))(v54);
        v56 = v55;
        if (a11)
          goto LABEL_67;
      }
      else
      {
        v55 = (*(uint64_t (**)(uint64_t))(v75 + 32))(v54);
        v56 = v55;
        if (a11)
        {
LABEL_67:
          v57 = (unsigned __int16)v31 != v73;
          v58 = 2;
          if ((unsigned __int16)v31 != v73)
            v58 = 3;
          if (v72 != (unsigned __int16)v53)
            v57 = v58;
          v60 = v80;
          v52 = v56
              + (int)((unint64_t)((*(int *)(*a11 + 4 * (__int16)(v53 - v72))
                                        + (uint64_t)*(int *)(a11[1] + 4 * (__int16)(v31 - v73))
                                        + *(int *)(a10 + 4 * v57))
                                       * v74
                                       + 0x2000) >> 14);
          if (v52 > 2147483646)
            goto LABEL_72;
LABEL_76:
          if (v79 > v52)
          {
            *a12 = v55;
            *a13 = v85[0];
            v79 = v52;
          }
          goto LABEL_78;
        }
      }
      v60 = v80;
      LODWORD(v52) = v56;
      if (v56 > 2147483646)
      {
LABEL_72:
        LODWORD(v52) = 0x7FFFFFFF;
        goto LABEL_78;
      }
      goto LABEL_76;
    }
  }
  v60 = v80;
  LODWORD(v46) = v49;
  if (v49 > 2147483646)
  {
LABEL_56:
    LODWORD(v46) = 0x7FFFFFFF;
    goto LABEL_61;
  }
  goto LABEL_59;
}

void sub_208C0D614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,_DWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32)
{
  int v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  _BOOL8 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;

  v37 = v35 - 4;
  v38 = v35 - 4 >= *(_DWORD *)(v36 - 100) && v37 <= *(_DWORD *)(v36 - 104);
  v39 = !v38;
  v40 = *(unsigned int *)(v36 - 112);
  if (v38 && v32 >= *(_DWORD *)(v36 - 96) && v32 <= *(_DWORD *)(v36 - 108))
  {
    v41 = *(_QWORD *)(v36 - 128) + a20 + (v37 >> 3);
    if (v34)
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
    else
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152)
                                                                                                  + 32))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
    if (v33)
    {
      v43 = (unsigned __int16)(v35 - 4) != a31;
      v44 = 2;
      if ((unsigned __int16)(v35 - 4) != a31)
        v44 = 3;
      if (a30 != (unsigned __int16)v32)
        v43 = v44;
      v45 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v32 - a30))
                              + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v37 - a31))
                              + *(int *)(a32 + 4 * v43))
                             * (int)*(_QWORD *)(v36 - 168)
                             + 0x2000) >> 14;
    }
    else
    {
      LODWORD(v45) = 0;
    }
    v40 = *(unsigned int *)(v36 - 112);
    v46 = v42 + (uint64_t)(int)v45;
    if (v46 <= 2147483646 && *(_DWORD *)(v36 - 116) > v46)
    {
      *a25 = v42;
      *a26 = *(_DWORD *)(v36 - 92);
      *(_DWORD *)(v36 - 116) = v46;
    }
  }
  if (v35 >= *(_DWORD *)(v36 - 100) && v35 <= *(_DWORD *)(v36 - 104))
  {
    v47 = v32 | 4;
    if ((v32 | 4) >= *(_DWORD *)(v36 - 96) && v47 <= *(_DWORD *)(v36 - 108))
    {
      v48 = *(_QWORD *)(v36 - 128) + a22;
      if (v34)
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v48, v40, 0, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
      else
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v48, v40, 0, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
      if (v33)
      {
        v50 = (unsigned __int16)v35 != a31;
        v51 = 2;
        if ((unsigned __int16)v35 != a31)
          v51 = 3;
        if (a30 != (unsigned __int16)v47)
          v50 = v51;
        v52 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v47 - a30))
                                + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v35 - a31))
                                + *(int *)(a32 + 4 * v50))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v52) = 0;
      }
      v40 = *(unsigned int *)(v36 - 112);
      v53 = v49 + (uint64_t)(int)v52;
      if (v53 <= 2147483646 && *(_DWORD *)(v36 - 116) > v53)
      {
        *a25 = v49;
        *a26 = *(_DWORD *)(v36 - 92);
        *(_DWORD *)(v36 - 116) = v53;
      }
    }
  }
  if ((v39 & 1) == 0)
  {
    v54 = v32 | 4;
    if ((v32 | 4) >= *(_DWORD *)(v36 - 96) && v54 <= *(_DWORD *)(v36 - 108))
    {
      v55 = *(_QWORD *)(v36 - 128) + a20 + (v37 >> 3);
      if (v34)
        v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v55, v40, 4, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
      else
        v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v55, v40, 4, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
      if (v33)
      {
        v57 = (unsigned __int16)(v35 - 4) != a31;
        v58 = 2;
        if ((unsigned __int16)(v35 - 4) != a31)
          v58 = 3;
        if (a30 != (unsigned __int16)v54)
          v57 = v58;
        v59 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v54 - a30))
                                + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v37 - a31))
                                + *(int *)(a32 + 4 * v57))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v59) = 0;
      }
      v60 = v56 + (uint64_t)(int)v59;
      if (v60 <= 2147483646 && *(_DWORD *)(v36 - 116) > v60)
        JUMPOUT(0x208C1096CLL);
    }
  }
  JUMPOUT(0x208C0CE58);
}

uint64_t sub_208C0E2B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,_DWORD *a26,int a27,char a28,__int16 a29,char a30,unsigned int a31,_QWORD *a32,int a33,int a34,uint64_t a35)
{
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  _BOOL8 v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  _QWORD *v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  _BOOL8 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  _BOOL8 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  _BOOL8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  _BOOL8 v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  if ((a30 & 1) == 0)
  {
    v44 = v36 - v38;
    if (v36 - v38 >= *(_DWORD *)(v43 - 96) && v44 <= *(_DWORD *)(v43 - 108))
    {
      v45 = *(_QWORD *)(v43 - 128) + (v44 >> 3) * a2 + (v40 >> 3);
      if (*(_QWORD *)(v43 - 160))
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v45);
      else
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v45);
      if (a32)
      {
        v47 = (unsigned __int16)v40 != a34;
        v48 = 2;
        if ((unsigned __int16)v40 != a34)
          v48 = 3;
        if (a33 != (unsigned __int16)v44)
          v47 = v48;
        v49 = (unint64_t)((*(int *)(*a32 + 4 * (__int16)(v44 - a33))
                                + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v40 - a34))
                                + *(int *)(a35 + 4 * v47))
                               * (int)*(_QWORD *)(v43 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v49) = 0;
      }
      a2 = *(_DWORD *)(v43 - 112);
      v50 = v46 + (uint64_t)(int)v49;
      if (v50 <= 2147483646 && *(_DWORD *)(v43 - 116) > v50)
      {
        *a25 = v46;
        *a26 = *(_DWORD *)(v43 - 92);
        *(_DWORD *)(v43 - 116) = v50;
        v41 = v36 - v38;
        v35 = v40;
      }
    }
  }
  if (a31 < 2)
LABEL_158:
    JUMPOUT(0x208C0DB60);
  if (v41 != v36 && v35 != v37)
  {
    v51 = v37 + 2 * (v35 - v37);
    if (v51 < *(_DWORD *)(v43 - 100))
    {
      v52 = a32;
    }
    else
    {
      v52 = a32;
      if (v51 <= *(_DWORD *)(v43 - 104) && v41 >= *(_DWORD *)(v43 - 96) && v41 <= *(_DWORD *)(v43 - 108))
      {
        v53 = *(_QWORD *)(v43 - 128) + (v41 >> 3) * a2 + (v51 >> 3);
        if (*(_QWORD *)(v43 - 160))
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v53);
        else
          v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v53);
        if (a32)
        {
          v68 = (unsigned __int16)(v37 + 2 * (v35 - v37)) != a34;
          v69 = 2;
          if ((unsigned __int16)(v37 + 2 * (v35 - v37)) != a34)
            v69 = 3;
          if (a33 != (unsigned __int16)v41)
            v68 = v69;
          v70 = ((((int)*(_QWORD *)(v43 - 168)
                 * (*(int *)(*a32 + 4 * (__int16)(v41 - a33))
                  + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v51 - a34))
                  + *(int *)(a35 + 4 * v68))) << 18)
               + 0x80000000) >> 32;
        }
        else
        {
          v70 = 0;
        }
        a2 = *(_DWORD *)(v43 - 112);
        v71 = v70 + v54;
        if (v71 <= 2147483646 && *(_DWORD *)(v43 - 116) > v71)
        {
          *a25 = v54;
          *a26 = *(_DWORD *)(v43 - 92);
          *(_DWORD *)(v43 - 116) = v71;
        }
      }
    }
    if (v35 < *(_DWORD *)(v43 - 100))
      goto LABEL_158;
    if (v35 > *(_DWORD *)(v43 - 104))
      goto LABEL_158;
    v72 = v36 + 2 * (v41 - v36);
    if (v72 < *(_DWORD *)(v43 - 96) || v72 > *(_DWORD *)(v43 - 108))
      goto LABEL_158;
    v73 = *(_QWORD *)(v43 - 128) + (v72 >> 3) * a2 + (v35 >> 3);
    v74 = *(_QWORD *)(v43 - 160)
        ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v73)
        : (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v73);
    if (v52)
    {
      v75 = (unsigned __int16)v35 != a34;
      v76 = 2;
      if ((unsigned __int16)v35 != a34)
        v76 = 3;
      if (a33 != (unsigned __int16)v72)
        v75 = v76;
      v77 = ((((int)*(_QWORD *)(v43 - 168)
             * (*(int *)(*v52 + 4 * (__int16)(v72 - a33))
              + (uint64_t)*(int *)(v52[1] + 4 * (__int16)(v35 - a34))
              + *(int *)(a35 + 4 * v75))) << 18)
           + 0x80000000) >> 32;
    }
    else
    {
      v77 = 0;
    }
    v78 = v77 + v74;
    if (v78 > 2147483646 || *(_DWORD *)(v43 - 116) <= v78)
      goto LABEL_158;
LABEL_157:
    *a25 = v74;
    *a26 = *(_DWORD *)(v43 - 92);
    *(_DWORD *)(v43 - 116) = v78;
    goto LABEL_158;
  }
  if (v41 == v36 && v35 != v37)
  {
    v55 = v38;
    v56 = v37 + 2 * (v35 - v37);
    if (v56 < *(_DWORD *)(v43 - 100))
    {
      v57 = a32;
    }
    else
    {
      v57 = a32;
      if (v56 <= *(_DWORD *)(v43 - 104))
      {
        v58 = v36 + v55;
        if (v36 + v55 >= *(_DWORD *)(v43 - 96) && v58 <= *(_DWORD *)(v43 - 108))
        {
          v59 = *(_QWORD *)(v43 - 128) + (v58 >> 3) * a2 + (v56 >> 3);
          if (*(_QWORD *)(v43 - 160))
            v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v59);
          else
            v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v59);
          if (a32)
          {
            v79 = (unsigned __int16)(v37 + 2 * (v35 - v37)) != a34;
            v80 = 2;
            if ((unsigned __int16)(v37 + 2 * (v35 - v37)) != a34)
              v80 = 3;
            if (a33 != (unsigned __int16)v58)
              v79 = v80;
            v81 = ((((*(int *)(*a32 + 4 * (__int16)(v58 - a33))
                    + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v56 - a34))
                    + *(int *)(a35 + 4 * v79))
                   * (int)*(_QWORD *)(v43 - 168)) << 18)
                 + 0x80000000) >> 32;
          }
          else
          {
            v81 = 0;
          }
          a2 = *(_DWORD *)(v43 - 112);
          v82 = v81 + v60;
          if (v82 <= 2147483646 && *(_DWORD *)(v43 - 116) > v82)
          {
            *a25 = v60;
            *a26 = *(_DWORD *)(v43 - 92);
            *(_DWORD *)(v43 - 116) = v82;
          }
        }
        v83 = v36 - v55;
        if (v36 - v55 >= *(_DWORD *)(v43 - 96) && v83 <= *(_DWORD *)(v43 - 108))
        {
          v84 = *(_QWORD *)(v43 - 128) + (v83 >> 3) * a2 + (v56 >> 3);
          if (*(_QWORD *)(v43 - 160))
            v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v84);
          else
            v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v84);
          if (a32)
          {
            v86 = (unsigned __int16)(v37 + 2 * (v35 - v37)) != a34;
            v87 = 2;
            if ((unsigned __int16)(v37 + 2 * (v35 - v37)) != a34)
              v87 = 3;
            if (a33 != (unsigned __int16)v83)
              v86 = v87;
            v88 = ((((int)*(_QWORD *)(v43 - 168)
                   * (*(int *)(*a32 + 4 * (__int16)(v83 - a33))
                    + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v56 - a34))
                    + *(int *)(a35 + 4 * v86))) << 18)
                 + 0x80000000) >> 32;
          }
          else
          {
            v88 = 0;
          }
          a2 = *(_DWORD *)(v43 - 112);
          v89 = v88 + v85;
          if (v89 <= 2147483646 && *(_DWORD *)(v43 - 116) > v89)
          {
            *a25 = v85;
            *a26 = *(_DWORD *)(v43 - 92);
            *(_DWORD *)(v43 - 116) = v89;
          }
        }
      }
    }
    v91 = v35 < *(_DWORD *)(v43 - 100) || v35 > *(_DWORD *)(v43 - 104);
    if (v42 > 1)
    {
      if (v91)
        goto LABEL_158;
      v92 = v36 - v55;
      if (v36 - v55 < *(_DWORD *)(v43 - 96) || v92 > *(_DWORD *)(v43 - 108))
        goto LABEL_158;
      v94 = *(_QWORD *)(v43 - 128) + (v92 >> 3) * a2 + (v35 >> 3);
      if (*(_QWORD *)(v43 - 160))
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v94);
      else
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v94);
      v101 = v74;
      if (v57)
        goto LABEL_137;
    }
    else
    {
      if (v91)
        goto LABEL_158;
      v92 = v36 + v55;
      if (v36 + v55 < *(_DWORD *)(v43 - 96) || v92 > *(_DWORD *)(v43 - 108))
        goto LABEL_158;
      v93 = *(_QWORD *)(v43 - 128) + (v92 >> 3) * a2 + (v35 >> 3);
      if (*(_QWORD *)(v43 - 160))
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v93);
      else
        v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v93);
      v101 = v74;
      if (v57)
      {
LABEL_137:
        v102 = (unsigned __int16)v35 != a34;
        v103 = 2;
        if ((unsigned __int16)v35 != a34)
          v103 = 3;
        if (a33 != (unsigned __int16)v92)
          v102 = v103;
        v104 = ((((int)*(_QWORD *)(v43 - 168)
                * (*(int *)(*v57 + 4 * (__int16)(v92 - a33))
                 + (uint64_t)*(int *)(v57[1] + 4 * (__int16)(v35 - a34))
                 + *(int *)(a35 + 4 * v102))) << 18)
              + 0x80000000) >> 32;
LABEL_145:
        v105 = v104 + v101;
        if (v105 > 2147483646)
          goto LABEL_158;
        LODWORD(v78) = v105;
        if (*(_DWORD *)(v43 - 116) <= v105)
          goto LABEL_158;
        goto LABEL_157;
      }
    }
    v104 = 0;
    goto LABEL_145;
  }
  v61 = v41 - v36;
  if (v41 == v36 || v35 != v37)
    goto LABEL_158;
  if ((a28 & 1) == 0)
  {
    v62 = v36 + 2 * v61;
    if (v62 >= *(_DWORD *)(v43 - 96) && v62 <= *(_DWORD *)(v43 - 108))
    {
      v63 = *(_QWORD *)(v43 - 128) + (v62 >> 3) * a2 + (v39 >> 3);
      if (*(_QWORD *)(v43 - 160))
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v63);
      else
        v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v63);
      if (a32)
      {
        v95 = (unsigned __int16)v39 != a34;
        v96 = 2;
        if ((unsigned __int16)v39 != a34)
          v96 = 3;
        if (a33 != (unsigned __int16)v62)
          v95 = v96;
        v97 = ((((*(int *)(*a32 + 4 * (__int16)(v62 - a33))
                + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v39 - a34))
                + *(int *)(a35 + 4 * v95))
               * (int)*(_QWORD *)(v43 - 168)) << 18)
             + 0x80000000) >> 32;
      }
      else
      {
        v97 = 0;
      }
      a2 = *(_DWORD *)(v43 - 112);
      v106 = v97 + v64;
      if (v106 <= 2147483646 && *(_DWORD *)(v43 - 116) > v106)
      {
        *a25 = v64;
        *a26 = *(_DWORD *)(v43 - 92);
        *(_DWORD *)(v43 - 116) = v106;
      }
    }
  }
  if ((a30 & 1) == 0)
  {
    v65 = v36 + 2 * v61;
    if (v65 >= *(_DWORD *)(v43 - 96) && v65 <= *(_DWORD *)(v43 - 108))
    {
      v66 = *(_QWORD *)(v43 - 128) + (v65 >> 3) * a2 + (v40 >> 3);
      if (*(_QWORD *)(v43 - 160))
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 40))(v66);
      else
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v43 - 152) + 32))(v66);
      if (a32)
      {
        v98 = (unsigned __int16)v40 != a34;
        v99 = 2;
        if ((unsigned __int16)v40 != a34)
          v99 = 3;
        if (a33 != (unsigned __int16)v65)
          v98 = v99;
        v100 = ((((int)*(_QWORD *)(v43 - 168)
                * (*(int *)(*a32 + 4 * (__int16)(v65 - a33))
                 + (uint64_t)*(int *)(a32[1] + 4 * (__int16)(v40 - a34))
                 + *(int *)(a35 + 4 * v98))) << 18)
              + 0x80000000) >> 32;
      }
      else
      {
        v100 = 0;
      }
      v107 = v100 + v67;
      if (v107 <= 2147483646 && *(_DWORD *)(v43 - 116) > v107)
      {
        *a25 = v67;
        *a26 = *(_DWORD *)(v43 - 92);
        *(_DWORD *)(v43 - 116) = v107;
      }
    }
  }
  return ((uint64_t (*)(void))((char *)sub_208C104B0 + 4 * byte_208F49D64[v42]))();
}

void sub_208C0E310(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,_QWORD *a30,int a31,int a32,uint64_t a33)
{
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;

  if ((a28 & 1) == 0)
  {
    v37 = v33 - v34;
    if (v33 - v34 >= *(_DWORD *)(v36 - 96) && v37 <= *(_DWORD *)(v36 - 108))
    {
      v38 = *(_QWORD *)(v36 - 128) + (v37 >> 3) * a2 + (v35 >> 3);
      if (*(_QWORD *)(v36 - 160))
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v38);
      else
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v38);
      if (a30)
      {
        v41 = (unsigned __int16)v35 != a32;
        v42 = 2;
        if ((unsigned __int16)v35 != a32)
          v42 = 3;
        if (a31 != (unsigned __int16)v37)
          v41 = v42;
        v40 = (unint64_t)((*(int *)(*a30 + 4 * (__int16)(v37 - a31))
                                + (uint64_t)*(int *)(a30[1] + 4 * (__int16)(v35 - a32))
                                + *(int *)(a33 + 4 * v41))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v40) = 0;
      }
      v43 = v39 + (uint64_t)(int)v40;
      if (v43 <= 2147483646 && *(_DWORD *)(v36 - 116) > v43)
        JUMPOUT(0x208C0F184);
    }
  }
  JUMPOUT(0x208C0F1A0);
}

void sub_208C0E370(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,_QWORD *a29,int a30,int a31,uint64_t a32)
{
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  _BOOL8 v39;
  uint64_t v40;
  unint64_t v41;

  if ((a28 & 1) == 0)
  {
    v36 = v32 + v33;
    if (v32 + v33 >= *(_DWORD *)(v35 - 96) && v36 <= *(_DWORD *)(v35 - 108))
    {
      v37 = *(_QWORD *)(v35 - 128) + (v36 >> 3) * a2 + (v34 >> 3);
      if (*(_QWORD *)(v35 - 160))
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 - 152) + 40))(v37);
      else
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 - 152) + 32))(v37);
      if (a29)
      {
        v39 = (unsigned __int16)v34 != a31;
        v40 = 2;
        if ((unsigned __int16)v34 != a31)
          v40 = 3;
        if (a30 != (unsigned __int16)v36)
          v39 = v40;
        v41 = (unint64_t)((*(int *)(*a29 + 4 * (__int16)(v36 - a30))
                                + (uint64_t)*(int *)(a29[1] + 4 * (__int16)(v34 - a31))
                                + *(int *)(a32 + 4 * v39))
                               * (int)*(_QWORD *)(v35 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v41) = 0;
      }
      if (v38 + (uint64_t)(int)v41 <= 2147483646)
        JUMPOUT(0x208C0F14CLL);
    }
  }
  JUMPOUT(0x208C0F1A0);
}

void sub_208C0E3D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30)
{
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  if ((a28 & 1) == 0)
  {
    v34 = v30 + v31;
    if (v30 + v31 >= *(_DWORD *)(v33 - 96) && v34 <= *(_DWORD *)(v33 - 108))
    {
      v35 = *(_QWORD *)(v33 - 128) + (v34 >> 3) * a2 + (v32 >> 3);
      if (*(_QWORD *)(v33 - 160))
        (*(void (**)(uint64_t))(*(_QWORD *)(v33 - 152) + 40))(v35);
      else
        (*(void (**)(uint64_t))(*(_QWORD *)(v33 - 152) + 32))(v35);
      if (!a30)
        JUMPOUT(0x208C0EFFCLL);
      JUMPOUT(0x208C0F0D0);
    }
  }
  JUMPOUT(0x208C0F1A0);
}

void sub_208C0EE04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,_DWORD *a25,_DWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32)
{
  int v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v37 = v35 | 4;
  v38 = (v35 | 4) >= *(_DWORD *)(v36 - 100) && v37 <= *(_DWORD *)(v36 - 104);
  v39 = !v38;
  v40 = *(unsigned int *)(v36 - 112);
  if (v38 && v32 >= *(_DWORD *)(v36 - 96) && v32 <= *(_DWORD *)(v36 - 108))
  {
    v41 = *(_QWORD *)(v36 - 128) + a22;
    if (v34)
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
    else
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152)
                                                                                                  + 32))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
    if (v33)
    {
      v43 = ((unsigned __int16)v35 | 4) != a31;
      v44 = 2;
      if (((unsigned __int16)v35 | 4) != a31)
        v44 = 3;
      if (a30 != (unsigned __int16)v32)
        v43 = v44;
      v45 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v32 - a30))
                              + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v37 - a31))
                              + *(int *)(a32 + 4 * v43))
                             * (int)*(_QWORD *)(v36 - 168)
                             + 0x2000) >> 14;
    }
    else
    {
      LODWORD(v45) = 0;
    }
    v40 = *(unsigned int *)(v36 - 112);
    v46 = v42 + (uint64_t)(int)v45;
    if (v46 <= 2147483646 && *(_DWORD *)(v36 - 116) > v46)
    {
      *a25 = v42;
      *a26 = *(_DWORD *)(v36 - 92);
      *(_DWORD *)(v36 - 116) = v46;
    }
  }
  if (v35 >= *(_DWORD *)(v36 - 100) && v35 <= *(_DWORD *)(v36 - 104))
  {
    v47 = v32 | 4;
    if ((v32 | 4) >= *(_DWORD *)(v36 - 96) && v47 <= *(_DWORD *)(v36 - 108))
    {
      v48 = *(_QWORD *)(v36 - 128) + a22;
      if (v34)
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v48, v40, 0, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
      else
        v49 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v48, v40, 0, 4, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
      if (v33)
      {
        v50 = (unsigned __int16)v35 != a31;
        v51 = 2;
        if ((unsigned __int16)v35 != a31)
          v51 = 3;
        if (a30 != (unsigned __int16)v47)
          v50 = v51;
        v52 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v47 - a30))
                                + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v35 - a31))
                                + *(int *)(a32 + 4 * v50))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v52) = 0;
      }
      v53 = v49 + (uint64_t)(int)v52;
      if (v53 <= 2147483646 && *(_DWORD *)(v36 - 116) > v53)
      {
        *a25 = v49;
        *a26 = *(_DWORD *)(v36 - 92);
        *(_DWORD *)(v36 - 116) = v53;
      }
    }
  }
  if ((v39 & 1) != 0)
    JUMPOUT(0x208C10C2CLL);
  if ((v32 | 4) >= *(_DWORD *)(v36 - 96) && (v32 | 4) <= *(_DWORD *)(v36 - 108))
  {
    if (!v34)
      JUMPOUT(0x208C0E734);
    (*(void (**)(_QWORD))(*(_QWORD *)(v36 - 152) + 40))(*(_QWORD *)(v36 - 128) + a22);
    if (!v33)
      JUMPOUT(0x208C10944);
    JUMPOUT(0x208C0E7B4);
  }
  JUMPOUT(0x208C0CE58);
}

void sub_208C0EE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,_DWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32)
{
  int v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;

  v37 = v35 - 4;
  v38 = v35 - 4 >= *(_DWORD *)(v36 - 100) && v37 <= *(_DWORD *)(v36 - 104);
  v39 = !v38;
  v40 = *(unsigned int *)(v36 - 112);
  if (v38 && v32 >= *(_DWORD *)(v36 - 96) && v32 <= *(_DWORD *)(v36 - 108))
  {
    v41 = *(_QWORD *)(v36 - 128) + a20 + (v37 >> 3);
    if (v34)
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
    else
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152)
                                                                                                  + 32))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
    if (v33)
    {
      v43 = (unsigned __int16)(v35 - 4) != a31;
      v44 = 2;
      if ((unsigned __int16)(v35 - 4) != a31)
        v44 = 3;
      if (a30 != (unsigned __int16)v32)
        v43 = v44;
      v45 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v32 - a30))
                              + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v37 - a31))
                              + *(int *)(a32 + 4 * v43))
                             * (int)*(_QWORD *)(v36 - 168)
                             + 0x2000) >> 14;
    }
    else
    {
      LODWORD(v45) = 0;
    }
    LODWORD(v40) = *(_DWORD *)(v36 - 112);
    v46 = v42 + (uint64_t)(int)v45;
    if (v46 <= 2147483646 && *(_DWORD *)(v36 - 116) > v46)
    {
      *a25 = v42;
      *a26 = *(_DWORD *)(v36 - 92);
      *(_DWORD *)(v36 - 116) = v46;
    }
  }
  if (v35 >= *(_DWORD *)(v36 - 100) && v35 <= *(_DWORD *)(v36 - 104))
  {
    v47 = v32 - 4;
    if (v32 - 4 >= *(_DWORD *)(v36 - 96) && v47 <= *(_DWORD *)(v36 - 108))
    {
      v48 = *(_QWORD *)(v36 - 128) + a18 + (v47 >> 3) * (int)v40;
      if (v34)
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v48);
      else
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v48);
      if (v33)
      {
        v50 = (unsigned __int16)v35 != a31;
        v51 = 2;
        if ((unsigned __int16)v35 != a31)
          v51 = 3;
        if (a30 != (unsigned __int16)v47)
          v50 = v51;
        v52 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v47 - a30))
                                + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v35 - a31))
                                + *(int *)(a32 + 4 * v50))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v52) = 0;
      }
      LODWORD(v40) = *(_DWORD *)(v36 - 112);
      v53 = v49 + (uint64_t)(int)v52;
      if (v53 <= 2147483646 && *(_DWORD *)(v36 - 116) > v53)
      {
        *a25 = v49;
        *a26 = *(_DWORD *)(v36 - 92);
        *(_DWORD *)(v36 - 116) = v53;
      }
    }
  }
  if ((v39 & 1) == 0)
  {
    v54 = v32 - 4;
    if (v32 - 4 >= *(_DWORD *)(v36 - 96) && v54 <= *(_DWORD *)(v36 - 108))
    {
      if (!v34)
        JUMPOUT(0x208C10888);
      (*(void (**)(_QWORD))(*(_QWORD *)(v36 - 152) + 40))(*(_QWORD *)(v36 - 128) + (v54 >> 3) * (int)v40
                                                                                              + (v37 >> 3));
      if (!v33)
        JUMPOUT(0x208C10944);
      JUMPOUT(0x208C0E7B4);
    }
  }
  JUMPOUT(0x208C0CE58);
}

void sub_208C0EEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,uint64_t a23,uint64_t a24,_DWORD *a25,_DWORD *a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,int a31,uint64_t a32)
{
  int v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _BOOL8 v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  _BOOL8 v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v37 = v35 | 4;
  v38 = (v35 | 4) >= *(_DWORD *)(v36 - 100) && v37 <= *(_DWORD *)(v36 - 104);
  v39 = !v38;
  v40 = *(unsigned int *)(v36 - 112);
  if (v38 && v32 >= *(_DWORD *)(v36 - 96) && v32 <= *(_DWORD *)(v36 - 108))
  {
    v41 = *(_QWORD *)(v36 - 128) + a22;
    if (v34)
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92, v34);
    else
      v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(v36 - 152)
                                                                                                  + 32))(v41, v40, 4, 0, *(_QWORD *)(v36 - 144), *(unsigned int *)(v36 - 132), v36 - 92);
    if (v33)
    {
      v43 = ((unsigned __int16)v35 | 4) != a31;
      v44 = 2;
      if (((unsigned __int16)v35 | 4) != a31)
        v44 = 3;
      if (a30 != (unsigned __int16)v32)
        v43 = v44;
      v45 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v32 - a30))
                              + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v37 - a31))
                              + *(int *)(a32 + 4 * v43))
                             * (int)*(_QWORD *)(v36 - 168)
                             + 0x2000) >> 14;
    }
    else
    {
      LODWORD(v45) = 0;
    }
    LODWORD(v40) = *(_DWORD *)(v36 - 112);
    v46 = v42 + (uint64_t)(int)v45;
    if (v46 <= 2147483646 && *(_DWORD *)(v36 - 116) > v46)
    {
      *a25 = v42;
      *a26 = *(_DWORD *)(v36 - 92);
      *(_DWORD *)(v36 - 116) = v46;
    }
  }
  if (v35 >= *(_DWORD *)(v36 - 100) && v35 <= *(_DWORD *)(v36 - 104))
  {
    v47 = v32 - 4;
    if (v32 - 4 >= *(_DWORD *)(v36 - 96) && v47 <= *(_DWORD *)(v36 - 108))
    {
      v48 = *(_QWORD *)(v36 - 128) + a18 + (v47 >> 3) * (int)v40;
      if (v34)
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 40))(v48);
      else
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 - 152) + 32))(v48);
      if (v33)
      {
        v50 = (unsigned __int16)v35 != a31;
        v51 = 2;
        if ((unsigned __int16)v35 != a31)
          v51 = 3;
        if (a30 != (unsigned __int16)v47)
          v50 = v51;
        v52 = (unint64_t)((*(int *)(*v33 + 4 * (__int16)(v47 - a30))
                                + (uint64_t)*(int *)(v33[1] + 4 * (__int16)(v35 - a31))
                                + *(int *)(a32 + 4 * v50))
                               * (int)*(_QWORD *)(v36 - 168)
                               + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v52) = 0;
      }
      v53 = v49 + (uint64_t)(int)v52;
      if (v53 <= 2147483646 && *(_DWORD *)(v36 - 116) > v53)
      {
        *a25 = v49;
        *a26 = *(_DWORD *)(v36 - 92);
        *(_DWORD *)(v36 - 116) = v53;
      }
    }
  }
  if ((v39 & 1) == 0 && v32 - 4 >= *(_DWORD *)(v36 - 96) && v32 - 4 <= *(_DWORD *)(v36 - 108))
  {
    if (v34)
      JUMPOUT(0x208C10918);
    JUMPOUT(0x208C0E734);
  }
  JUMPOUT(0x208C0CE58);
}

void sub_208C0F6F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,uint64_t a30,int a31,int a32,uint64_t a33)
{
  int v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  int v40;
  _BOOL8 v41;
  uint64_t v42;
  unint64_t v43;

  if (v33 < *(_DWORD *)(v37 - 96))
    a28 = 1;
  if ((a28 & 1) == 0 && v33 <= *(_DWORD *)(v37 - 108))
  {
    v39 = *(_QWORD *)(v37 - 128) + (v33 >> 3) * a2 + (v34 >> 3);
    if (v36)
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 - 152) + 40))(v39);
    else
      v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v37 - 152) + 32))(v39);
    if (v35)
    {
      v41 = (unsigned __int16)v34 != a32;
      v42 = 2;
      if ((unsigned __int16)v34 != a32)
        v42 = 3;
      if (a31 != (unsigned __int16)v33)
        v41 = v42;
      v43 = (unint64_t)((*(int *)(*v35 + 4 * (__int16)(v33 - a31))
                              + (uint64_t)*(int *)(v35[1] + 4 * (__int16)(v34 - a32))
                              + *(int *)(a33 + 4 * v41))
                             * (int)*(_QWORD *)(v37 - 168)
                             + 0x2000) >> 14;
    }
    else
    {
      LODWORD(v43) = 0;
    }
    if (v40 + (uint64_t)(int)v43 <= 2147483646)
      JUMPOUT(0x208C0F8E8);
  }
  JUMPOUT(0x208C0DA1CLL);
}

void sub_208C104B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,char a28,uint64_t a29,_QWORD *a30,int a31,int a32,uint64_t a33)
{
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;

  if (v34 < *(_DWORD *)(v35 - 96))
    a28 = 1;
  if ((a28 & 1) == 0 && v34 <= *(_DWORD *)(v35 - 108))
  {
    v37 = *(_QWORD *)(v35 - 128) + (v34 >> 3) * a2 + (v33 >> 3);
    if (*(_QWORD *)(v35 - 160))
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 - 152) + 40))(v37);
    else
      v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v35 - 152) + 32))(v37);
    if (a30)
    {
      v39 = (unsigned __int16)v33 != a32;
      v40 = 2;
      if ((unsigned __int16)v33 != a32)
        v40 = 3;
      if (a31 != (unsigned __int16)v34)
        v39 = v40;
      v41 = ((((int)*(_QWORD *)(v35 - 168)
             * (*(int *)(*a30 + 4 * (__int16)(v34 - a31))
              + (uint64_t)*(int *)(a30[1] + 4 * (__int16)(v33 - a32))
              + *(int *)(a33 + 4 * v39))) << 18)
           + 0x80000000) >> 32;
    }
    else
    {
      v41 = 0;
    }
    if (v41 + v38 <= 2147483646)
      JUMPOUT(0x208C106C8);
  }
  JUMPOUT(0x208C0DB60);
}

uint64_t vp9_find_best_sub_pixel_tree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t *a11, unsigned int *a12, _DWORD *a13, uint8x16_t *a14, int a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,unsigned int a48,unsigned int a49,unsigned int a50,unsigned int a51,int a52,char a53)
{
  uint64_t v53;
  __int16 *v54;
  unsigned __int16 *v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v63;
  int v64;
  int v65;
  __int16 v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  void *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  BOOL v81;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  char *v91;
  int v92;
  int v93;
  int *v97;
  unint64_t v98;
  uint8x16_t *v99;
  char *v100;
  unint64_t *v101;
  int v102;
  unint64_t j;
  uint64_t v104;
  unsigned int v105;
  uint64_t *v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  unint64_t *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t i;
  uint8x16_t *v115;
  unint64_t *v116;
  int v117;
  uint8x16_t *v118;
  uint8x16_t v119;
  uint8x16_t v120;
  uint16x8_t *v121;
  uint16x8_t *v122;
  uint16x8_t *v123;
  int v124;
  uint16x8_t v125;
  int v126;
  uint8x16_t *v127;
  uint8x16_t v128;
  uint8x16_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL8 v137;
  uint64_t v138;
  unsigned int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  char v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t *v149;
  int v150;
  int v151;
  __int16 v152;
  uint64_t v153;
  uint64_t v154;
  _BOOL8 v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unsigned int v160;
  char *v161;
  BOOL v165;
  int v166;
  signed int v167;
  _BOOL8 v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  _BOOL8 v174;
  uint64_t v175;
  int64_t v176;
  BOOL v178;
  int v179;
  uint8x16_t *v180;
  int v181;
  int v182;
  signed int v183;
  _BOOL8 v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  uint8x16_t *v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;
  signed int v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  _BOOL8 v197;
  uint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  _BOOL8 v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  _BOOL8 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  BOOL v220;
  char v221;
  signed int v222;
  _BOOL8 v223;
  uint64_t v224;
  unint64_t v225;
  char v226;
  uint64_t v227;
  char v228;
  char v229;
  char v231;
  int v232;
  _BOOL8 v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  BOOL v238;
  int v239;
  BOOL v240;
  char v241;
  uint64_t v242;
  signed int v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL8 v247;
  uint64_t v248;
  unint64_t v249;
  char v250;
  uint64_t v251;
  char v252;
  char v253;
  char v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  _BOOL8 v262;
  uint64_t v263;
  unint64_t v264;
  uint64_t v265;
  BOOL v266;
  _WORD *v268;
  int v269;
  int v270;
  uint64_t v271;
  char v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v281;
  int v282;
  uint64_t v283;
  unsigned __int16 *v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v288;
  uint64_t *v289;
  unsigned int v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  uint8x16_t *v294;
  unsigned int v295;
  int v296;
  int v297;
  int v298;
  int v299;

  v53 = MEMORY[0x24BDAC7A8](a1, a2);
  HIDWORD(a14) = v59;
  v293 = v57;
  v61 = v60;
  v294 = a14;
  STACK[0x41B8] = *MEMORY[0x24BDAC8D0];
  v292 = *(_QWORD *)(v53 + 8216);
  v291 = *(_DWORD *)(v53 + 8224);
  v271 = v53 + 24912;
  a47 = 0;
  v63 = *(_DWORD *)(v53 + 24952);
  v64 = *v54;
  v65 = v54[1];
  v66 = v54[1];
  v67 = v65 + v63 * v64;
  v283 = v53;
  v284 = v55;
  v68 = *(_QWORD *)(v53 + 24944);
  v269 = (__int16)v55[1];
  v270 = (__int16)*v55;
  LODWORD(v69) = 8 * v64;
  LODWORD(v70) = 8 * v65;
  v71 = (void **)&vp9_filter_kernels;
  if (a17 < 1)
  {
    v72 = off_25453EA18;
  }
  else if (a17 == 1)
  {
    v72 = off_25453EA20;
  }
  else
  {
    if (a17 != 2)
      v71 = (void **)&off_25453EA10;
    v72 = *v71;
  }
  v286 = (uint64_t)v72;
  v73 = 8 * *(_DWORD *)(v53 + 25848);
  if (v73 <= v269 - 8184)
    v73 = v269 - 8184;
  v74 = 8 * *(_DWORD *)(v53 + 25852);
  if (v74 >= v269 + 8184)
    v74 = v269 + 8184;
  v75 = v270 - 8184;
  if (8 * *(_DWORD *)(v53 + 25856) > v270 - 8184)
    v75 = 8 * *(_DWORD *)(v53 + 25856);
  v76 = v270 + 8184;
  if (8 * *(_DWORD *)(v53 + 25860) < v270 + 8184)
    v76 = 8 * *(_DWORD *)(v53 + 25860);
  if (v73 <= -16383)
    v73 = -16383;
  v299 = v73;
  if (v74 >= 16382)
    v74 = 16382;
  v298 = v74;
  if (v75 <= -16383)
    v75 = -16383;
  v297 = v75;
  if (v76 >= 16382)
    v77 = 16382;
  else
    v77 = v76;
  v296 = v77;
  if (v270 >= 0)
    LOWORD(v78) = *v55;
  else
    v78 = -v270;
  if (v269 >= 0)
    LOWORD(v79) = v55[1];
  else
    v79 = -v269;
  v81 = (unsigned __int16)v79 > 0x3Fu || (unsigned __int16)v78 > 0x3Fu || v56 == 0;
  if (v81 && v58 == 0)
    v83 = 2;
  else
    v83 = 3 - v58;
  *v54 *= 8;
  v54[1] = 8 * v66;
  v289 = a11;
  v290 = v63;
  v268 = v54;
  v295 = setup_center_error(v271, (uint64_t)v54, (uint64_t)v55, v61, v57, v292, v291, v68, v63, a14, a15, a16, v67, a10, a11, (uint64_t)a13, a12);
  v276 = v83;
  if (v83 >= 1)
  {
    v84 = 0;
    v288 = v68;
    v279 = 2 * v68;
    v285 = (uint64_t *)(v283 + 86528);
    v85 = 2 * a15;
    v278 = 4;
    v86 = 2 * a15;
    v87 = (char *)&search_step_table;
    v88 = v290;
    do
    {
      v277 = v84;
      v90 = 0;
      v281 = 0xFFFFFFFFLL;
      do
      {
        v91 = &v87[4 * v90];
        v92 = v69 + *(__int16 *)v91;
        v93 = v70 + *((__int16 *)v91 + 1);
        if (v93 < v299 || v93 > v298 || v92 < v297 || v92 > v296)
        {
          *(&a48 + v90) = -1;
          goto LABEL_50;
        }
        if (a17)
        {
          v97 = (int *)*v285;
          if ((*(_BYTE *)(*(_QWORD *)(v283 + 25440) + 152) & 8) != 0)
          {
            v108 = (unint64_t)(v97[1] * (uint64_t)(__int16)(2 * v92)) >> 14;
            (*(void (**)(uint64_t))&v97[8
                                                * ((((unint64_t)(*v97 * (uint64_t)(__int16)(2 * v93)) >> 14) & 0xF) != 0)
                                                + 24
                                                + 4 * ((v108 & 0xF) != 0)])(v279+ 2* (((int)v108 >> 4) * v88 + ((int)((unint64_t)(*v97 * (uint64_t)(__int16)(2 * v93)) >> 14) >> 4)));
            if (v294)
            {
              if (a15 < 9)
              {
                v121 = (uint16x8_t *)(2 * (_QWORD)v294);
                if (a15 == 8)
                {
                  v122 = (uint16x8_t *)&a53;
                  v123 = (uint16x8_t *)&STACK[0x21B0];
                  v124 = a16;
                  do
                  {
                    v125 = *v121++;
                    *v122++ = vrhaddq_u16(v125, *v123);
                    v123 = (uint16x8_t *)((char *)v123 + v85);
                    --v124;
                  }
                  while (v124);
                }
                else
                {
                  v130 = 0;
                  v131 = a16;
                  do
                  {
                    *(uint16x4_t *)(&a53 + v130) = vrhadd_u16(*(uint16x4_t *)(2 * (_QWORD)v294 + v130), *(uint16x4_t *)((char *)&STACK[0x21B0] + v130));
                    v130 += v85;
                    --v131;
                  }
                  while (v131);
                }
              }
              else
              {
                v109 = &a53;
                v110 = &STACK[0x21B0];
                v111 = 2 * (_QWORD)v294;
                v112 = a16;
                do
                {
                  v113 = 0;
                  for (i = 0; i < a15; i += 8)
                  {
                    *(uint16x8_t *)&v109[v113 * 8] = vrhaddq_u16(*(uint16x8_t *)(v111 + v113 * 8), *(uint16x8_t *)&v110[v113]);
                    v113 += 2;
                  }
                  v109 += v86;
                  v110 = (unint64_t *)((char *)v110 + v85);
                  v111 += v86;
                  --v112;
                }
                while (v112);
              }
              v105 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, _QWORD, int *))(v293 + 24))((unint64_t)&a53 >> 1, a15, v292, v291, &a47);
              v106 = v289;
              if (v289)
                goto LABEL_102;
            }
            else
            {
              v105 = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, _QWORD, int *))(v293 + 24))((unint64_t)&STACK[0x21B0] >> 1, a15, v292, v291, &a47);
              v106 = v289;
              if (v289)
                goto LABEL_102;
            }
          }
          else
          {
            v98 = (unint64_t)(v97[1] * (uint64_t)(__int16)(2 * v92)) >> 14;
            (*(void (**)(uint64_t))&v97[8
                                                * ((((unint64_t)(*v97 * (uint64_t)(__int16)(2 * v93)) >> 14) & 0xF) != 0)
                                                + 8
                                                + 4 * ((v98 & 0xF) != 0)])(v288 + ((int)v98 >> 4) * v88
                                                                                + ((int)((unint64_t)(*v97 * (uint64_t)(__int16)(2 * v93)) >> 14) >> 4));
            v99 = v294;
            if (v294)
            {
              if (a15 < 9)
              {
                v115 = (uint8x16_t *)&a53;
                v116 = &STACK[0x21B0];
                if (a15 == 8)
                {
                  v117 = -8 * a16;
                  v118 = v294;
                  do
                  {
                    v119 = *v118++;
                    v120 = *(uint8x16_t *)v116;
                    v116 = (unint64_t *)((char *)v116 + (2 * a15));
                    *v115++ = vrhaddq_u8(v120, v119);
                    v117 += 16;
                  }
                  while (v117);
                }
                else
                {
                  v126 = a16 * a15;
                  v127 = v294;
                  do
                  {
                    v128 = *v127++;
                    v129.i32[0] = *(_DWORD *)v116;
                    v129.i32[1] = *(_DWORD *)((char *)v116 + a15);
                    v129.i32[2] = *(_DWORD *)((char *)v116 + 2 * a15);
                    v129.i32[3] = *(_DWORD *)((char *)v116 + 3 * a15);
                    v116 = (unint64_t *)((char *)v116 + 4 * a15);
                    *v115++ = vrhaddq_u8(v129, v128);
                    v126 -= 16;
                  }
                  while (v126);
                }
              }
              else
              {
                v100 = &a53;
                v101 = &STACK[0x21B0];
                v102 = a16;
                do
                {
                  for (j = 0; j < a15; j += 16)
                    *(uint8x16_t *)&v100[j] = vrhaddq_u8(v99[j / 0x10], *(uint8x16_t *)&v101[j / 8]);
                  v100 += a15;
                  v99 = (uint8x16_t *)((char *)v99 + a15);
                  v101 = (unint64_t *)((char *)v101 + a15);
                  --v102;
                }
                while (v102);
              }
              v105 = (*(uint64_t (**)(char *, _QWORD, uint64_t, _QWORD, int *))(v293 + 24))(&a53, a15, v292, v291, &a47);
            }
            else
            {
              v105 = (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t, _QWORD, int *))(v293 + 24))(&STACK[0x21B0], a15, v292, v291, &a47);
            }
            v106 = v289;
            if (v289)
            {
LABEL_102:
              v132 = *v284;
              v133 = v284[1];
              v134 = v93 - v133;
              v135 = *v106;
              v136 = v106[1];
              v81 = (unsigned __int16)v93 == v133;
              v137 = (unsigned __int16)v93 != v133;
              v138 = 2;
              if (!v81)
                v138 = 3;
              if (v132 != (unsigned __int16)v92)
                v137 = v138;
              v107 = (unint64_t)((*(int *)(v135 + 4 * (__int16)(v92 - v132))
                                       + (uint64_t)*(int *)(v136 + 4 * v134)
                                       + *(int *)(a10 + 4 * v137))
                                      * (int)v61
                                      + 0x2000) >> 14;
              goto LABEL_107;
            }
          }
        }
        else
        {
          v104 = v288 + (v92 >> 3) * v88 + (v93 >> 3);
          if (v294)
          {
            v105 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v104);
            v106 = v289;
            if (v289)
              goto LABEL_102;
          }
          else
          {
            v105 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v104);
            v106 = v289;
            if (v289)
              goto LABEL_102;
          }
        }
        LODWORD(v107) = 0;
LABEL_107:
        v88 = v290;
        v139 = v107 + v105;
        *(&a48 + v90) = v139;
        if (v139 < v295)
        {
          *a12 = v105;
          *a13 = a47;
          v281 = v90;
          v295 = v139;
        }
LABEL_50:
        ++v90;
      }
      while (v90 != 4);
      if (a48 > a49)
        v140 = v278;
      else
        v140 = -v278;
      if (a50 > a51)
        v141 = v278;
      else
        v141 = -v278;
      v142 = (v140 + v70);
      v143 = (v141 + v69);
      v144 = (int)v142 >= v299 && (int)v142 <= v298;
      v145 = !v144;
      if (v144 && (int)v143 >= v297 && (int)v143 <= v296)
      {
        v272 = v145;
        v273 = v140;
        v146 = v141;
        if (a17)
        {
          v147 = (v141 + v69);
          v148 = accurate_sub_pel_search(v271, v147, (v140 + v70), *v285, v286, v293, v292, v291, v288, v88, v294, a15, a16, (uint64_t)&a47);
          v149 = v289;
          if (v289)
            goto LABEL_127;
LABEL_135:
          LODWORD(v157) = 0;
          v88 = v290;
          v143 = v147;
        }
        else
        {
          v159 = v288 + ((int)v143 >> 3) * v88 + ((int)v142 >> 3);
          v147 = (v141 + v69);
          if (v294)
          {
            v148 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v159);
            v149 = v289;
            if (!v289)
              goto LABEL_135;
          }
          else
          {
            v148 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v159);
            v149 = v289;
            if (!v289)
              goto LABEL_135;
          }
LABEL_127:
          v150 = *v284;
          v143 = v147;
          v151 = v284[1];
          v152 = v142 - v151;
          v153 = *v149;
          v154 = v149[1];
          v81 = (unsigned __int16)v142 == v151;
          v155 = (unsigned __int16)v142 != v151;
          v156 = 2;
          if (!v81)
            v156 = 3;
          if (v150 != (unsigned __int16)v147)
            v155 = v156;
          v157 = (unint64_t)((*(int *)(v153 + 4 * (__int16)(v147 - v150))
                                   + (uint64_t)*(int *)(v154 + 4 * v152)
                                   + *(int *)(a10 + 4 * v155))
                                  * (int)v61
                                  + 0x2000) >> 14;
          v88 = v290;
        }
        v141 = v146;
        v145 = v272;
        v140 = v273;
        v160 = v157 + v148;
        a52 = v160;
        v158 = v281;
        if (v160 < v295)
        {
          *a12 = v148;
          *a13 = a47;
          v158 = 4;
          v295 = v160;
          goto LABEL_141;
        }
      }
      else
      {
        a52 = -1;
        v158 = v281;
      }
      if (v158 > 3)
      {
LABEL_141:
        if (v158 == 4)
          v69 = v143;
        else
          v69 = v69;
        if (v158 == 4)
          v70 = v142;
        else
          v70 = v70;
        if (SHIDWORD(a14) >= 1)
          goto LABEL_148;
LABEL_47:
        v89 = v277;
        goto LABEL_48;
      }
      v161 = &v87[4 * v158];
      v69 = (v69 + *(__int16 *)v161);
      v70 = (v70 + *((__int16 *)v161 + 1));
      if (SHIDWORD(a14) < 1)
        goto LABEL_47;
LABEL_148:
      if (v158 == 0xFFFFFFFF)
        goto LABEL_47;
      if ((_DWORD)v69 != (_DWORD)v143 || (_DWORD)v70 == (_DWORD)v142)
      {
        v171 = v69 - v143;
        if ((_DWORD)v69 == (_DWORD)v143 || (_DWORD)v70 != (_DWORD)v142)
        {
          if (HIDWORD(a14) < 2)
            goto LABEL_47;
        }
        else
        {
          v141 = v69 - v143;
          if (HIDWORD(a14) == 1)
          {
            if (a17)
            {
              if ((v145 & 1) == 0)
              {
                v172 = (v171 + v69);
                if ((int)v172 >= v297)
                {
                  v89 = v277;
                  if ((int)v172 <= v296)
                  {
                    v173 = v171 + v69;
                    v167 = accurate_sub_pel_search(v271, v172, v142, *v285, v286, v293, v292, v291, v288, v88, v294, a15, a16, (uint64_t)&a47);
                    if (v289)
                    {
                      v174 = (unsigned __int16)v142 != (unsigned __int16)v269;
                      v175 = 2;
                      if ((unsigned __int16)v142 != (unsigned __int16)v269)
                        v175 = 3;
                      if ((unsigned __int16)v173 != (unsigned __int16)v270)
                        v174 = v175;
                      v176 = (unint64_t)((*(int *)(*v289 + 4 * (__int16)(v173 - v270))
                                               + (uint64_t)*(int *)(v289[1] + 4 * (__int16)(v142 - v269))
                                               + *(int *)(a10 + 4 * v174))
                                              * (int)v61
                                              + 0x2000) >> 14;
                    }
                    else
                    {
                      LODWORD(v176) = 0;
                    }
                    v204 = v173;
                    v265 = v167 + (uint64_t)(int)v176;
                    v88 = v290;
                    if (v265 <= 2147483646)
                    {
                      LODWORD(v176) = v167 + v176;
                      LODWORD(v70) = v142;
                      if (v295 <= v265)
                        goto LABEL_48;
                      goto LABEL_365;
                    }
                  }
                  goto LABEL_366;
                }
              }
LABEL_46:
              LODWORD(v70) = v142;
              goto LABEL_47;
            }
            if ((v145 & 1) != 0)
              goto LABEL_46;
            v200 = v171 + v69;
            if (v171 + (int)v69 < v297)
              goto LABEL_46;
            v89 = v277;
            if (v200 > v296)
              goto LABEL_366;
            v201 = v288 + (v200 >> 3) * v88 + ((int)v142 >> 3);
            v202 = v171 + v69;
            if (v294)
            {
              v167 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v201);
              v203 = v289;
              v204 = v202;
              if (v289)
                goto LABEL_223;
LABEL_372:
              LODWORD(v209) = 0;
            }
            else
            {
              v167 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v201);
              v203 = v289;
              v204 = v202;
              if (!v289)
                goto LABEL_372;
LABEL_223:
              v205 = *v203;
              v206 = v203[1];
              v207 = (unsigned __int16)v142 != (unsigned __int16)v269;
              v208 = 2;
              if ((unsigned __int16)v142 != (unsigned __int16)v269)
                v208 = 3;
              if ((unsigned __int16)v204 != (unsigned __int16)v270)
                v207 = v208;
              v209 = (unint64_t)((*(int *)(v205 + 4 * (__int16)(v204 - v270))
                                       + (uint64_t)*(int *)(v206 + 4 * (__int16)(v142 - v269))
                                       + *(int *)(a10 + 4 * v207))
                                      * (int)v61
                                      + 0x2000) >> 14;
            }
            v88 = v290;
            v176 = v167 + (uint64_t)(int)v209;
            v266 = v176 <= 2147483646 && v295 > v176;
            LODWORD(v70) = v142;
            if (!v266)
              goto LABEL_48;
            goto LABEL_365;
          }
        }
LABEL_186:
        v178 = (int)v70 < v299 || (int)v70 > v298;
        if (a17)
        {
          if (v178)
            goto LABEL_243;
          v179 = v141 + v69;
          v180 = v294;
          if (v141 + (int)v69 < v297 || v179 > v296)
          {
            v187 = v69;
          }
          else
          {
            v181 = v140;
            v182 = v141;
            v183 = accurate_sub_pel_search(v271, (v141 + v69), v70, *v285, v286, v293, v292, v291, v288, v88, v294, a15, a16, (uint64_t)&a47);
            if (v289)
            {
              v184 = (unsigned __int16)v70 != (unsigned __int16)v269;
              v185 = 2;
              if ((unsigned __int16)v70 != (unsigned __int16)v269)
                v185 = 3;
              if ((unsigned __int16)v179 != (unsigned __int16)v270)
                v184 = v185;
              v186 = (unint64_t)((*(int *)(*v289 + 4 * (__int16)(v179 - v270))
                                       + (uint64_t)*(int *)(v289[1] + 4 * (__int16)(v70 - v269))
                                       + *(int *)(a10 + 4 * v184))
                                      * (int)v61
                                      + 0x2000) >> 14;
            }
            else
            {
              LODWORD(v186) = 0;
            }
            v218 = v183 + (uint64_t)(int)v186;
            v88 = v290;
            v141 = v182;
            v140 = v181;
            if (v218 <= 2147483646)
            {
              v187 = v69;
              v180 = v294;
              if (v295 > v218)
              {
                *a12 = v183;
                *a13 = a47;
                v180 = v294;
                v295 = v218;
                v187 = v179;
              }
            }
            else
            {
LABEL_243:
              v187 = v69;
              v180 = v294;
            }
          }
          v219 = v140 + v70;
          v220 = v140 + (int)v70 >= v299 && v219 <= v298;
          v221 = !v220;
          v282 = v140 + v70;
          if (!v220)
          {
            LODWORD(v142) = v70;
            goto LABEL_280;
          }
          if ((int)v69 < v297 || (int)v69 > v296)
          {
            LODWORD(v142) = v70;
            if ((_DWORD)v69 == v187)
              v226 = 1;
            else
              v226 = v221;
            if ((v226 & 1) != 0)
              goto LABEL_45;
            goto LABEL_287;
          }
          v274 = v141;
          v222 = accurate_sub_pel_search(v271, v69, (v140 + v70), *v285, v286, v293, v292, v291, v288, v88, v180, a15, a16, (uint64_t)&a47);
          if (v289)
          {
            v223 = (unsigned __int16)v219 != (unsigned __int16)v269;
            v224 = 2;
            if ((unsigned __int16)v219 != (unsigned __int16)v269)
              v224 = 3;
            if ((unsigned __int16)v69 != (unsigned __int16)v270)
              v223 = v224;
            v225 = (unint64_t)((*(int *)(*v289 + 4 * (__int16)(v69 - v270))
                                     + (uint64_t)*(int *)(v289[1] + 4 * (__int16)(v219 - v269))
                                     + *(int *)(a10 + 4 * v223))
                                    * (int)v61
                                    + 0x2000) >> 14;
          }
          else
          {
            LODWORD(v225) = 0;
          }
          v227 = v222 + (uint64_t)(int)v225;
          v88 = v290;
          v141 = v274;
          LODWORD(v142) = v70;
          if (v227 > 2147483646)
          {
            v180 = v294;
            if ((_DWORD)v69 == v187)
              v228 = 1;
            else
              v228 = v221;
            if ((v228 & 1) != 0)
              goto LABEL_45;
LABEL_287:
            if (v141 + (int)v69 < v297 || v141 + (int)v69 > v296)
              goto LABEL_45;
            v232 = v141 + v69;
            v167 = accurate_sub_pel_search(v271, (v141 + v69), v282, *v285, v286, v293, v292, v291, v288, v88, v180, a15, a16, (uint64_t)&a47);
            if (v289)
            {
              v233 = (unsigned __int16)v282 != (unsigned __int16)v269;
              v234 = 2;
              if ((unsigned __int16)v282 != (unsigned __int16)v269)
                v234 = 3;
              if ((unsigned __int16)v232 != (unsigned __int16)v270)
                v233 = v234;
              v235 = (unint64_t)((*(int *)(*v289 + 4 * (__int16)(v232 - v270))
                                       + (uint64_t)*(int *)(v289[1] + 4 * (__int16)(v282 - v269))
                                       + *(int *)(a10 + 4 * v233))
                                      * (int)v61
                                      + 0x2000) >> 14;
            }
            else
            {
              LODWORD(v235) = 0;
            }
            v204 = v232;
            v236 = v167 + (uint64_t)(int)v235;
            v88 = v290;
            if (v236 > 2147483646)
              goto LABEL_45;
LABEL_364:
            LODWORD(v176) = v236;
            LODWORD(v69) = v187;
            LODWORD(v70) = v142;
            v89 = v277;
            LODWORD(v142) = v282;
            if (v295 <= v236)
              goto LABEL_48;
            goto LABEL_365;
          }
          v180 = v294;
          if (v295 > v227)
          {
            *a12 = v222;
            *a13 = a47;
            v180 = v294;
            v295 = v227;
            v187 = v69;
            LODWORD(v142) = v282;
            if ((_DWORD)v70 == v282)
              v229 = 1;
            else
              v229 = v221;
            if ((v229 & 1) != 0)
              goto LABEL_45;
            goto LABEL_287;
          }
LABEL_280:
          if ((_DWORD)v69 == v187 && (_DWORD)v70 == (_DWORD)v142)
            v231 = 1;
          else
            v231 = v221;
          if ((v231 & 1) == 0)
            goto LABEL_287;
LABEL_45:
          LODWORD(v69) = v187;
          goto LABEL_46;
        }
        if (v178)
        {
          v187 = v69;
          v188 = v294;
          goto LABEL_306;
        }
        v189 = v141 + v69;
        v188 = v294;
        if (v141 + (int)v69 < v297 || v189 > v296)
        {
          v187 = v69;
        }
        else
        {
          v190 = v140;
          v191 = v141;
          v192 = v288 + (v189 >> 3) * v88 + ((int)v70 >> 3);
          if (v294)
          {
            v193 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v192);
            v194 = v289;
            if (v289)
              goto LABEL_212;
LABEL_299:
            LODWORD(v199) = 0;
          }
          else
          {
            v193 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v192);
            v194 = v289;
            if (!v289)
              goto LABEL_299;
LABEL_212:
            v195 = *v194;
            v196 = v194[1];
            v197 = (unsigned __int16)v70 != (unsigned __int16)v269;
            v198 = 2;
            if ((unsigned __int16)v70 != (unsigned __int16)v269)
              v198 = 3;
            if ((unsigned __int16)v189 != (unsigned __int16)v270)
              v197 = v198;
            v199 = (unint64_t)((*(int *)(v195 + 4 * (__int16)(v189 - v270))
                                     + (uint64_t)*(int *)(v196 + 4 * (__int16)(v70 - v269))
                                     + *(int *)(a10 + 4 * v197))
                                    * (int)v61
                                    + 0x2000) >> 14;
          }
          v88 = v290;
          v141 = v191;
          v140 = v190;
          v237 = v193 + (uint64_t)(int)v199;
          v238 = v237 <= 2147483646 && v295 > v237;
          v187 = v69;
          v188 = v294;
          if (v238)
          {
            *a12 = v193;
            *a13 = a47;
            v188 = v294;
            v295 = v237;
            v187 = v189;
          }
        }
LABEL_306:
        v239 = v140 + v70;
        v240 = v140 + (int)v70 >= v299 && v239 <= v298;
        v241 = !v240;
        v282 = v140 + v70;
        if (!v240)
        {
          LODWORD(v142) = v70;
LABEL_342:
          if ((_DWORD)v69 == v187 && (_DWORD)v70 == (_DWORD)v142)
            v255 = 1;
          else
            v255 = v241;
          if ((v255 & 1) != 0)
            goto LABEL_45;
          goto LABEL_349;
        }
        if ((int)v69 < v297 || (int)v69 > v296)
        {
          LODWORD(v142) = v70;
          if ((_DWORD)v69 == v187)
            v250 = 1;
          else
            v250 = v241;
          if ((v250 & 1) != 0)
            goto LABEL_45;
          goto LABEL_349;
        }
        v275 = v141;
        v242 = v288 + ((int)v69 >> 3) * v88 + (v239 >> 3);
        if (v188)
        {
          v243 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v242);
          v244 = v289;
          if (v289)
            goto LABEL_318;
LABEL_329:
          LODWORD(v249) = 0;
        }
        else
        {
          v243 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v242);
          v244 = v289;
          if (!v289)
            goto LABEL_329;
LABEL_318:
          v245 = *v244;
          v246 = v244[1];
          v247 = (unsigned __int16)v239 != (unsigned __int16)v269;
          v248 = 2;
          if ((unsigned __int16)v239 != (unsigned __int16)v269)
            v248 = 3;
          if ((unsigned __int16)v69 != (unsigned __int16)v270)
            v247 = v248;
          v249 = (unint64_t)((*(int *)(v245 + 4 * (__int16)(v69 - v270))
                                   + (uint64_t)*(int *)(v246 + 4 * (__int16)(v239 - v269))
                                   + *(int *)(a10 + 4 * v247))
                                  * (int)v61
                                  + 0x2000) >> 14;
        }
        v88 = v290;
        v141 = v275;
        v251 = v243 + (uint64_t)(int)v249;
        LODWORD(v142) = v70;
        if (v251 <= 2147483646)
        {
          v188 = v294;
          if (v295 <= v251)
            goto LABEL_342;
          *a12 = v243;
          *a13 = a47;
          v188 = v294;
          v295 = v251;
          v187 = v69;
          LODWORD(v142) = v282;
          if ((_DWORD)v70 == v282)
            v253 = 1;
          else
            v253 = v241;
          if ((v253 & 1) != 0)
            goto LABEL_45;
        }
        else
        {
          v188 = v294;
          if ((_DWORD)v69 == v187)
            v252 = 1;
          else
            v252 = v241;
          if ((v252 & 1) != 0)
            goto LABEL_45;
        }
LABEL_349:
        v256 = v141 + v69;
        if (v256 < v297 || v256 > v296)
          goto LABEL_45;
        v257 = v288 + (v256 >> 3) * v88 + (v282 >> 3);
        v258 = v256;
        if (v188)
        {
          v167 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v257);
          v259 = v289;
          v204 = v258;
          if (v289)
            goto LABEL_353;
LABEL_362:
          LODWORD(v264) = 0;
        }
        else
        {
          v167 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v257);
          v259 = v289;
          v204 = v258;
          if (!v289)
            goto LABEL_362;
LABEL_353:
          v260 = *v259;
          v261 = v259[1];
          v262 = (unsigned __int16)v282 != (unsigned __int16)v269;
          v263 = 2;
          if ((unsigned __int16)v282 != (unsigned __int16)v269)
            v263 = 3;
          if ((unsigned __int16)v204 != (unsigned __int16)v270)
            v262 = v263;
          v264 = (unint64_t)((*(int *)(v260 + 4 * (__int16)(v204 - v270))
                                   + (uint64_t)*(int *)(v261 + 4 * (__int16)(v282 - v269))
                                   + *(int *)(a10 + 4 * v262))
                                  * (int)v61
                                  + 0x2000) >> 14;
        }
        v88 = v290;
        v236 = v167 + (uint64_t)(int)v264;
        if (v236 <= 2147483646)
          goto LABEL_364;
        goto LABEL_45;
      }
      v140 = v70 - v142;
      if (HIDWORD(a14) != 1)
        goto LABEL_186;
      v142 = (v70 - v142 + v70);
      v165 = (int)v142 < v299 || (int)v142 > v298 || (int)v143 < v297 || (int)v143 > v296;
      if (!a17)
      {
        v89 = v277;
        if (v165)
        {
LABEL_207:
          LODWORD(v69) = v143;
          goto LABEL_48;
        }
        v210 = v288 + ((int)v143 >> 3) * v88 + ((int)v142 >> 3);
        v211 = v143;
        if (v294)
        {
          v167 = (*(uint64_t (**)(uint64_t))(v293 + 40))(v210);
          v212 = v289;
          v204 = v211;
          if (v289)
          {
LABEL_230:
            v213 = *v212;
            v214 = v212[1];
            v215 = (unsigned __int16)v142 != (unsigned __int16)v269;
            v216 = 2;
            if ((unsigned __int16)v142 != (unsigned __int16)v269)
              v216 = 3;
            if ((unsigned __int16)v204 != (unsigned __int16)v270)
              v215 = v216;
            v88 = v290;
            v217 = v167
                 + (uint64_t)(int)((unint64_t)((*(int *)(v213 + 4 * (__int16)(v204 - v270))
                                                    + (uint64_t)*(int *)(v214 + 4 * (__int16)(v142 - v269))
                                                    + *(int *)(a10 + 4 * v215))
                                                   * (int)v61
                                                   + 0x2000) >> 14);
            if (v217 > 2147483646)
              goto LABEL_360;
LABEL_239:
            LODWORD(v176) = v217;
            LODWORD(v69) = v204;
            if (v295 <= v217)
              goto LABEL_48;
LABEL_365:
            *a12 = v167;
            *a13 = a47;
            v295 = v176;
            LODWORD(v69) = v204;
LABEL_366:
            LODWORD(v70) = v142;
            goto LABEL_48;
          }
        }
        else
        {
          v167 = (*(uint64_t (**)(uint64_t))(v293 + 32))(v210);
          v212 = v289;
          v204 = v211;
          if (v289)
            goto LABEL_230;
        }
        v88 = v290;
        LODWORD(v217) = v167;
        if (v167 != 0x7FFFFFFFLL)
          goto LABEL_239;
        goto LABEL_360;
      }
      v89 = v277;
      if (v165)
        goto LABEL_207;
      v166 = v143;
      v167 = accurate_sub_pel_search(v271, v143, v142, *v285, v286, v293, v292, v291, v288, v88, v294, a15, a16, (uint64_t)&a47);
      if (v289)
      {
        v168 = (unsigned __int16)v142 != (unsigned __int16)v269;
        v169 = 2;
        if ((unsigned __int16)v142 != (unsigned __int16)v269)
          v169 = 3;
        if ((unsigned __int16)v166 != (unsigned __int16)v270)
          v168 = v169;
        v170 = (unint64_t)((*(int *)(*v289 + 4 * (__int16)(v166 - v270))
                                 + (uint64_t)*(int *)(v289[1] + 4 * (__int16)(v142 - v269))
                                 + *(int *)(a10 + 4 * v168))
                                * (int)v61
                                + 0x2000) >> 14;
      }
      else
      {
        LODWORD(v170) = 0;
      }
      v204 = v166;
      v217 = v167 + (uint64_t)(int)v170;
      v88 = v290;
      if (v217 <= 2147483646)
        goto LABEL_239;
LABEL_360:
      LODWORD(v69) = v204;
LABEL_48:
      v87 += 16;
      v278 >>= 1;
      v84 = v89 + 1;
    }
    while (v84 != v276);
  }
  *v268 = v69;
  v268[1] = v70;
  return v295;
}

uint64_t accurate_sub_pel_search(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint8x16_t *a11, int a12, int a13, uint64_t a14)
{
  uint64_t v14;
  __int16 v15;
  __int16 v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint8x16_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t j;
  unint64_t v30;
  uint16x8_t *v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t i;
  int v38;
  uint8x16_t *v39;
  unint64_t *v40;
  uint8x16_t v41;
  uint8x16_t v42;
  uint16x8_t *v43;
  uint16x8_t *v44;
  uint16x8_t v45;
  int v46;
  uint8x16_t *v47;
  __int32 *v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint64_t v51;
  uint64_t v52;

  v14 = MEMORY[0x24BDAC7A8]();
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = a13;
  v25 = a11;
  STACK[0x4038] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(*(_QWORD *)(v14 + 528) + 152) & 8) != 0)
  {
    v30 = (unint64_t)(v17[1] * (uint64_t)(__int16)(2 * v15)) >> 14;
    (*(void (**)(uint64_t, _QWORD, unint64_t *, _QWORD))&v17[8
                                                                            * ((((unint64_t)(*v17
                                                                                                  * (uint64_t)(__int16)(2 * v16)) >> 14) & 0xF) != 0)
                                                                            + 24
                                                                            + 4 * ((v30 & 0xF) != 0)])(2 * a9+ 2 * (((int)v30 >> 4) * a10 + ((int)((unint64_t)(*v17 * (uint64_t)(__int16)(2 * v16)) >> 14) >> 4)), a10, &STACK[0x2030], a12);
    if (a11)
    {
      v31 = (uint16x8_t *)(2 * (_QWORD)a11);
      if (a12 < 9)
      {
        if (a12 == 8)
        {
          v43 = (uint16x8_t *)&v52;
          v44 = (uint16x8_t *)&STACK[0x2030];
          do
          {
            v45 = *v31++;
            *v43++ = vrhaddq_u16(v45, *v44++);
            --v24;
          }
          while (v24);
        }
        else
        {
          v51 = 0;
          do
          {
            *(uint64_t *)((char *)&v52 + v51) = (uint64_t)vrhadd_u16(*(uint16x4_t *)&v31->i8[v51], *(uint16x4_t *)((char *)&STACK[0x2030] + v51));
            v51 += 2 * a12;
            --v24;
          }
          while (v24);
        }
      }
      else
      {
        v32 = 2 * a12;
        v33 = &v52;
        v34 = &STACK[0x2030];
        do
        {
          v35 = 0;
          for (i = 0; i < a12; i += 8)
          {
            *(uint16x8_t *)&v33[v35 / 8] = vrhaddq_u16(v31[v35 / 0x10], *(uint16x8_t *)&v34[v35 / 8]);
            v35 += 16;
          }
          v33 = (uint64_t *)((char *)v33 + v32);
          v34 = (unint64_t *)((char *)v34 + 2 * a12);
          v31 = (uint16x8_t *)((char *)v31 + v32);
          --v24;
        }
        while (v24);
      }
      return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 24))((unint64_t)&v52 >> 1, a12, v21, v19, a14);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 24))((unint64_t)&STACK[0x2030] >> 1, a12, v21, v19, a14);
    }
  }
  else
  {
    v26 = (unint64_t)(v17[1] * (uint64_t)(__int16)(2 * v15)) >> 14;
    (*(void (**)(uint64_t, _QWORD, unint64_t *, _QWORD))&v17[8
                                                                            * ((((unint64_t)(*v17
                                                                                                  * (uint64_t)(__int16)(2 * v16)) >> 14) & 0xF) != 0)
                                                                            + 8
                                                                            + 4 * ((v26 & 0xF) != 0)])(a9 + ((int)v26 >> 4) * a10 + ((int)((unint64_t)(*v17 * (uint64_t)(__int16)(2 * v16)) >> 14) >> 4), a10, &STACK[0x2030], a12);
    if (a11)
    {
      if (a12 < 9)
      {
        if (a12 == 8)
        {
          v38 = -8 * a13;
          v39 = (uint8x16_t *)&v52;
          v40 = &STACK[0x2030];
          do
          {
            v41 = *v25++;
            v42 = *(uint8x16_t *)v40;
            v40 += 2;
            *v39++ = vrhaddq_u8(v42, v41);
            v38 += 16;
          }
          while (v38);
        }
        else
        {
          v46 = a13 * a12;
          v47 = (uint8x16_t *)&v52;
          v48 = (__int32 *)&STACK[0x2030];
          do
          {
            v49 = *v25++;
            v50.i32[0] = *v48;
            v50.i32[1] = *(__int32 *)((char *)v48 + a12);
            v50.i32[2] = *(__int32 *)((char *)v48 + 2 * a12);
            v50.i32[3] = *(__int32 *)((char *)v48 + 3 * a12);
            v48 += a12;
            *v47++ = vrhaddq_u8(v50, v49);
            v46 -= 16;
          }
          while (v46);
        }
      }
      else
      {
        v27 = &v52;
        v28 = &STACK[0x2030];
        do
        {
          for (j = 0; j < a12; j += 16)
            *(uint8x16_t *)&v27[j / 8] = vrhaddq_u8(v25[j / 0x10], *(uint8x16_t *)&v28[j / 8]);
          v27 = (uint64_t *)((char *)v27 + a12);
          v25 = (uint8x16_t *)((char *)v25 + a12);
          v28 = (unint64_t *)((char *)v28 + a12);
          --v24;
        }
        while (v24);
      }
      return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 24))(&v52, a12, v21, v19, a14);
    }
    else
    {
      return (*(uint64_t (**)(unint64_t *, _QWORD, uint64_t, uint64_t, uint64_t))(v23 + 24))(&STACK[0x2030], a12, v21, v19, a14);
    }
  }
}

uint64_t vp9_int_pro_motion_estimation(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, __int16 *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  int *v13;
  _OWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v25;
  char v26;
  char v27;
  __int16 *v28;
  uint64_t v29;
  int *v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t *v37;
  int16x8_t v38;
  uint64_t v39;
  uint8x8_t *v40;
  int16x8_t *v41;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int v49;
  uint8x8_t *v50;
  uint8x16_t v51;
  uint8x16_t v52;
  uint8x16_t v53;
  uint64_t v54;
  __int128 v55;
  char v57;
  uint8x16_t *v58;
  uint64_t i;
  uint16x8_t v60;
  unint64_t j;
  _WORD *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int16x8_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int16x8_t *v70;
  uint8x16_t v71;
  uint8x16_t v72;
  uint8x16_t v73;
  uint8x16_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int v79;
  uint64_t v80;
  uint8x16_t v81;
  uint8x16_t v82;
  uint8x16_t v83;
  uint8x16_t v84;
  uint8x16_t *v85;
  uint64_t k;
  uint16x8_t v87;
  unint64_t m;
  int16x8_t *v89;
  __int16 v90;
  __int16 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int16 v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  __int16 v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  __int16 v110;
  int v111;
  __int16 v112;
  _DWORD *v113;
  char v114;
  uint64_t v115;
  __int16 *v116;
  _OWORD *v118;
  _QWORD v119[4];
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  int16x8_t v124;
  int16x8_t v125[8];
  _WORD v126[128];
  _WORD v127[128];
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v6 = a2;
  v7 = a1;
  v131 = *MEMORY[0x24BDAC8D0];
  v8 = **(_QWORD **)(a2 + 25360);
  v129 = 0u;
  v130 = 0u;
  v128 = 0u;
  v9 = a3;
  v10 = *(unsigned __int8 *)(v8 + 8);
  v11 = *(_DWORD *)(a1 + 4 * (char)v10 + 194496);
  if (v10 == 2)
  {
    v12 = (int *)(a1 + 194516);
  }
  else if (v10 == 1)
  {
    v12 = (int *)(a1 + 194512);
  }
  else
  {
    v12 = (int *)(a1 + 194520);
  }
  v13 = (int *)(a2 + 24952);
  v14 = (_OWORD *)(a2 + 24944);
  v15 = *v12;
  if ((_DWORD)v15 != -1)
    LODWORD(v15) = *(_DWORD *)(a1 + 4 * v15 + 172048);
  v16 = b_width_log2_lookup[a3];
  v17 = b_height_log2_lookup[a3];
  v18 = *(int *)(a2 + 8224);
  v19 = *v13;
  v20 = v11 == -1 || v11 == (_DWORD)v15;
  v21 = v20;
  if (!v20)
  {
    v22 = *(_QWORD *)(a1 + 189944) + 224 * v11 + 88;
    v23 = *(_OWORD *)(a2 + 25080);
    v128 = *v14;
    v129 = v23;
    v130 = *(_OWORD *)(a2 + 25216);
    v115 = v8;
    v25 = (_OWORD *)(a2 + 24944);
    v26 = v21;
    v27 = v17;
    v28 = a6;
    v29 = v9;
    v30 = (int *)(a2 + 24952);
    v31 = v16;
    vp9_setup_pre_planes(a2 + 24912, 0, v22, a4, a5, 0);
    v16 = v31;
    a6 = v28;
    v17 = v27;
    v21 = v26;
    v14 = v25;
    v7 = a1;
    v8 = v115;
    v6 = a2;
    v13 = v30;
    v9 = v29;
  }
  if (v13[146] != 8)
  {
    v54 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t))(v7 + (v9 << 6) + 740464))(*(_QWORD *)(v6 + 8216), v18, *(_QWORD *)(v6 + 24944), v19);
    *(_DWORD *)(v8 + 12) = 0;
    if ((v21 & 1) != 0)
      return v54;
LABEL_25:
    v55 = v129;
    *v14 = v128;
    *(_OWORD *)(v6 + 25080) = v55;
    *(_OWORD *)(v6 + 25216) = v130;
    return v54;
  }
  v113 = v13;
  v32 = (4 << v16);
  v33 = (4 << v17);
  v34 = (8 << v16);
  v35 = (8 << v17);
  if ((int)v34 >= 1)
  {
    v36 = 0;
    v37 = (uint8x8_t *)(*(_QWORD *)v14 + -((int)v32 >> 1));
    v38 = vdupq_n_s16(-3 - (v33 >> 5));
    v39 = 4 * (int)v19;
    v40 = (uint8x8_t *)(*(_QWORD *)v14 + v39 - ((int)v32 >> 1));
    do
    {
      v42 = *(uint8x16_t *)&v37->i8[v19];
      v43 = *(uint8x16_t *)&v37->i8[2 * v19];
      v44 = *(uint8x16_t *)&v37->i8[3 * v19];
      v45 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v42.i8, *v37);
      v46 = (int16x8_t)vaddl_high_u8(v42, *(uint8x16_t *)v37->i8);
      v47 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v44.i8, *(uint8x8_t *)v43.i8);
      v48 = (int16x8_t)vaddl_high_u8(v44, v43);
      if ((int)v33 >= 5)
      {
        v49 = 4;
        v50 = v40;
        do
        {
          v51 = *(uint8x16_t *)&v50->i8[v19];
          v52 = *(uint8x16_t *)&v50->i8[2 * v19];
          v53 = *(uint8x16_t *)&v50->i8[3 * v19];
          v45 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v45, *v50), *(uint8x8_t *)v51.i8);
          v46 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v46, *(uint8x16_t *)v50->i8), v51);
          v47 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v47, *(uint8x8_t *)v52.i8), *(uint8x8_t *)v53.i8);
          v48 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v48, v52), v53);
          v49 += 4;
          v50 = (uint8x8_t *)((char *)v50 + v39);
        }
        while (v49 < (int)v33);
      }
      v41 = (int16x8_t *)&v127[v36];
      *v41 = vshlq_s16(vaddq_s16(v47, v45), v38);
      v41[1] = vshlq_s16(vaddq_s16(v48, v46), v38);
      v37 += 2;
      v36 += 16;
      v40 += 2;
    }
    while (v36 < v34);
  }
  v57 = ((int)v32 >> 5) + 3;
  if ((int)v35 >= 1)
  {
    v58 = (uint8x16_t *)(*(_QWORD *)v14 - ((int)v33 >> 1) * (int)v19);
    if ((int)v32 <= 16)
    {
      v62 = v126;
      do
      {
        *v62++ = (__int16)vaddlvq_u8(*v58) >> v57;
        v58 = (uint8x16_t *)((char *)v58 + v19);
        --v35;
      }
      while (v35);
    }
    else
    {
      for (i = 0; i != v35; ++i)
      {
        v60 = vpaddlq_u8(*v58);
        for (j = 16; j < v32; j += 16)
          v60 = vpadalq_u8(v60, v58[j / 0x10]);
        v126[i] = (__int16)vaddlvq_u16(v60) >> v57;
        v58 = (uint8x16_t *)((char *)v58 + v19);
      }
    }
  }
  if ((int)v32 >= 1)
  {
    v63 = 0;
    v64 = *(_QWORD *)(v6 + 8216);
    v65 = 4 * (int)v18;
    v66 = vdupq_n_s16(-3 - (v33 >> 5));
    v67 = v18;
    v68 = 2 * v18;
    v69 = 3 * v18;
    do
    {
      v71 = *(uint8x16_t *)(v64 + v63 + v18);
      v72 = *(uint8x16_t *)(v64 + v63 + 2 * v18);
      v73 = *(uint8x16_t *)(v64 + v63 + 3 * v18);
      v74 = *(uint8x16_t *)(v64 + v63);
      v75 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v71.i8, *(uint8x8_t *)v74.i8);
      v76 = (int16x8_t)vaddl_high_u8(v71, v74);
      v77 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v73.i8, *(uint8x8_t *)v72.i8);
      v78 = (int16x8_t)vaddl_high_u8(v73, v72);
      if ((int)v33 >= 5)
      {
        v79 = 4;
        v80 = v64 + v65;
        do
        {
          v81 = *(uint8x16_t *)(v80 + v63);
          v82 = *(uint8x16_t *)(v80 + v67);
          v83 = *(uint8x16_t *)(v80 + v68);
          v84 = *(uint8x16_t *)(v80 + v69);
          v75 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v75, *(uint8x8_t *)v81.i8), *(uint8x8_t *)v82.i8);
          v76 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v76, v81), v82);
          v77 = (int16x8_t)vaddw_u8(vaddw_u8((uint16x8_t)v77, *(uint8x8_t *)v83.i8), *(uint8x8_t *)v84.i8);
          v78 = (int16x8_t)vaddw_high_u8(vaddw_high_u8((uint16x8_t)v78, v83), v84);
          v79 += 4;
          v80 += v65;
        }
        while (v79 < (int)v33);
      }
      v70 = &v125[v63 / 8];
      v63 += 16;
      *v70 = vshlq_s16(vaddq_s16(v77, v75), v66);
      v70[1] = vshlq_s16(vaddq_s16(v78, v76), v66);
      v69 += 16;
      v68 += 16;
      v67 += 16;
    }
    while (v63 < v32);
  }
  if ((int)v33 >= 1)
  {
    v85 = *(uint8x16_t **)(v6 + 8216);
    if ((int)v32 <= 16)
    {
      v89 = &v124;
      do
      {
        v89->i16[0] = (__int16)vaddlvq_u8(*v85) >> v57;
        v89 = (int16x8_t *)((char *)v89 + 2);
        v85 = (uint8x16_t *)((char *)v85 + v18);
        --v33;
      }
      while (v33);
    }
    else
    {
      for (k = 0; k != v33; ++k)
      {
        v87 = vpaddlq_u8(*v85);
        for (m = 16; m < v32; m += 16)
          v87 = vpadalq_u8(v87, v85[m / 0x10]);
        v124.i16[k] = (__int16)vaddlvq_u16(v87) >> v57;
        v85 = (uint8x16_t *)((char *)v85 + v18);
      }
    }
  }
  v114 = v21;
  v116 = a6;
  v118 = v14;
  v90 = vector_match((uint64_t)v127, v125, v16);
  *(_WORD *)(v8 + 14) = v90;
  v91 = vector_match((uint64_t)v126, &v124, v17);
  *(_WORD *)(v8 + 12) = v91;
  v92 = *(_QWORD *)(v6 + 8216);
  v93 = *(_QWORD *)(v6 + 24944) + v91 * (int)v19 + v90;
  v94 = v7 + (v9 << 6) + 740464;
  v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))v94)(v92, v18, v93, v19);
  v119[0] = v93 - v19;
  v119[1] = v93 - 1;
  v119[2] = v93 + 1;
  v119[3] = v93 + v19;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, unsigned int *))(v94 + 48))(v92, v18, v119, v19, &v120);
  v95 = v120;
  if (v120 < v54)
  {
    *(_WORD *)(v8 + 12) = v91 - 1;
    *(_WORD *)(v8 + 14) = v90;
    v54 = v95;
    v96 = v121;
    v14 = v118;
    if (v121 >= v95)
    {
LABEL_54:
      v97 = v122;
      if (v122 >= v54)
        goto LABEL_55;
      goto LABEL_67;
    }
  }
  else
  {
    v96 = v121;
    v14 = v118;
    if (v121 >= v54)
      goto LABEL_54;
  }
  *(_WORD *)(v8 + 12) = v91;
  *(_WORD *)(v8 + 14) = v90 - 1;
  v54 = v96;
  v97 = v122;
  if (v122 >= v96)
  {
LABEL_55:
    v98 = v123;
    if (v123 >= v54)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_67:
  *(_WORD *)(v8 + 12) = v91;
  *(_WORD *)(v8 + 14) = v90 + 1;
  v54 = v97;
  v98 = v123;
  if (v123 < v97)
  {
LABEL_56:
    *(_WORD *)(v8 + 12) = v91 + 1;
    *(_WORD *)(v8 + 14) = v90;
    v54 = v98;
  }
LABEL_57:
  if (v95 >= v98)
    v99 = v91 + 1;
  else
    v99 = v91 - 1;
  if (v96 >= v97)
    v100 = v90 + 1;
  else
    v100 = v90 - 1;
  v101 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))v94)(v92, v18, *(_QWORD *)v14 + (int)v19 * v99 + v100, v19);
  if (v54 <= v101)
  {
    v99 = *(_WORD *)(v8 + 12);
    v100 = *(_WORD *)(v8 + 14);
  }
  else
  {
    v54 = v101;
  }
  v102 = 8 * v99;
  *(_WORD *)(v8 + 12) = 8 * v99;
  v103 = 8 * v100;
  *(_WORD *)(v8 + 14) = 8 * v100;
  v104 = 8 * v113[224];
  v105 = v116[1];
  if (v104 <= v105 - 8184)
    v104 = v105 - 8184;
  v106 = v105 + 8184;
  if (8 * v113[225] < v106)
    v106 = 8 * v113[225];
  v107 = *v116;
  v108 = v107 - 8184;
  if (8 * v113[226] > v107 - 8184)
    v108 = 8 * v113[226];
  v109 = 8 * v113[227];
  if (v109 >= v107 + 8184)
    v109 = v107 + 8184;
  if (v104 <= -16383)
    v104 = -16383;
  if (v108 <= -16383)
    v108 = -16383;
  if (v106 >= v103)
    v106 = v103;
  if (v106 >= 16382)
    LOWORD(v106) = 16382;
  if (v104 <= v103)
    v110 = v106;
  else
    v110 = v104;
  *(_WORD *)(v8 + 14) = v110;
  if (v109 >= v102)
    v111 = v102;
  else
    v111 = v109;
  if (v111 >= 16382)
    LOWORD(v111) = 16382;
  if (v108 <= v102)
    v112 = v111;
  else
    v112 = v108;
  *(_WORD *)(v8 + 12) = v112;
  if ((v114 & 1) == 0)
    goto LABEL_25;
  return v54;
}

uint64_t vector_match(uint64_t a1, int16x8_t *a2, char a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  char v6;
  signed int v7;
  int16x8_t *v8;
  int32x4_t v9;
  int16x8_t v10;
  int v11;
  int16x8_t *v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int8x16_t v17;
  int8x16_t v18;
  signed __int32 v19;
  int v20;
  int v22;
  int16x8_t *v23;
  int32x4_t v24;
  int16x8_t v25;
  int v26;
  int16x8_t *v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int8x16_t v32;
  int8x16_t v33;
  signed __int32 v34;
  int v35;
  int16x8_t *v36;
  int32x4_t v37;
  int16x8_t v38;
  int v39;
  int16x8_t *v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int8x16_t v46;
  signed __int32 v47;
  int v48;
  int16x8_t *v49;
  int32x4_t v50;
  int16x8_t v51;
  int v52;
  int16x8_t *v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int8x16_t v59;
  signed __int32 v60;
  int v61;
  int16x8_t *v62;
  int32x4_t v63;
  int16x8_t v64;
  int v65;
  int16x8_t *v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int8x16_t v71;
  int8x16_t v72;
  signed __int32 v73;
  int v74;
  int16x8_t *v76;
  int32x4_t v77;
  int16x8_t v78;
  int v79;
  int16x8_t *v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  int8x16_t v86;
  signed __int32 v87;
  int v88;
  int16x8_t *v89;
  int32x4_t v90;
  int16x8_t v91;
  int v92;
  int16x8_t *v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int8x16_t v98;
  int8x16_t v99;
  signed __int32 v100;
  int v101;
  int16x8_t *v103;
  int32x4_t v104;
  int16x8_t v105;
  int v106;
  int16x8_t *v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int8x16_t v112;
  int8x16_t v113;
  signed __int32 v114;
  unsigned int v115;
  int16x8_t *v116;
  int32x4_t v117;
  int16x8_t v118;
  int v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int8x16_t v124;
  int8x16_t v125;

  v3 = (4 << a3);
  if ((v3 & 0x80000000) != 0)
  {
    v5 = 0;
    v22 = 0;
    v7 = 0x7FFFFFFF;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = a3 + 2;
    v7 = 0x7FFFFFFF;
    do
    {
      v8 = (int16x8_t *)(a1 + 2 * v4);
      v9 = 0uLL;
      v10 = 0uLL;
      v11 = 4 << a3;
      v12 = a2;
      do
      {
        v13 = *v8++;
        v14 = v13;
        v15 = *v12++;
        v16 = vsubq_s16(v14, v15);
        v9 = vmlal_high_s16(vmlal_s16(v9, *(int16x4_t *)v16.i8, *(int16x4_t *)v16.i8), v16, v16);
        v10 = vaddq_s16(v16, v10);
        v11 -= 8;
      }
      while (v11);
      v17 = (int8x16_t)vpaddlq_s16(v10);
      *(int32x2_t *)v17.i8 = vadd_s32(*(int32x2_t *)v17.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
      *(int32x2_t *)v17.i8 = vpadd_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v17.i8);
      v18 = (int8x16_t)vpaddlq_s32(v9);
      v19 = vadd_s32(*(int32x2_t *)v18.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)).u32[0]
          - (vmul_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v17.i8).u32[0] >> v6);
      if (v19 < v7)
      {
        v7 = v19;
        v5 = v4;
      }
      v4 += 16;
    }
    while (v4 <= v3);
    v20 = v5 - 8;
    if (v5 >= 8 && v20 <= (int)v3)
    {
      v23 = (int16x8_t *)(a1 + 2 * v20);
      v24 = 0uLL;
      v25 = 0uLL;
      v26 = 4 << a3;
      v27 = a2;
      do
      {
        v28 = *v23++;
        v29 = v28;
        v30 = *v27++;
        v31 = vsubq_s16(v29, v30);
        v24 = vmlal_high_s16(vmlal_s16(v24, *(int16x4_t *)v31.i8, *(int16x4_t *)v31.i8), v31, v31);
        v25 = vaddq_s16(v31, v25);
        v26 -= 8;
      }
      while (v26);
      v32 = (int8x16_t)vpaddlq_s16(v25);
      *(int32x2_t *)v32.i8 = vadd_s32(*(int32x2_t *)v32.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
      *(int32x2_t *)v32.i8 = vpadd_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v32.i8);
      v33 = (int8x16_t)vpaddlq_s32(v24);
      v34 = vadd_s32(*(int32x2_t *)v33.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)).u32[0]
          - (vmul_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v32.i8).u32[0] >> v6);
      if (v34 >= v7)
      {
        v22 = v5;
      }
      else
      {
        v7 = v34;
        v22 = v5 - 8;
      }
      if (v5 < -8)
        goto LABEL_26;
    }
    else
    {
      v22 = v5;
      if (v5 < -8)
        goto LABEL_26;
    }
  }
  v35 = v5 + 8;
  if (v35 <= (int)v3)
  {
    v36 = (int16x8_t *)(a1 + 2 * v35);
    v37 = 0uLL;
    v38 = 0uLL;
    v39 = 4 << a3;
    v40 = a2;
    do
    {
      v41 = *v36++;
      v42 = v41;
      v43 = *v40++;
      v44 = vsubq_s16(v42, v43);
      v37 = vmlal_high_s16(vmlal_s16(v37, *(int16x4_t *)v44.i8, *(int16x4_t *)v44.i8), v44, v44);
      v38 = vaddq_s16(v44, v38);
      v39 -= 8;
    }
    while (v39);
    v45 = (int8x16_t)vpaddlq_s16(v38);
    *(int32x2_t *)v45.i8 = vadd_s32(*(int32x2_t *)v45.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
    *(int32x2_t *)v45.i8 = vpadd_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v45.i8);
    v46 = (int8x16_t)vpaddlq_s32(v37);
    v47 = vadd_s32(*(int32x2_t *)v46.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)).u32[0]
        - (vmul_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v45.i8).u32[0] >> (a3 + 2));
    if (v47 < v7)
    {
      v7 = v47;
      v22 = v35;
    }
  }
LABEL_26:
  v48 = v22 - 4;
  if (v22 < 4 || v48 > (int)v3)
  {
    v48 = v22;
    if (v22 < -4)
      goto LABEL_39;
  }
  else
  {
    v49 = (int16x8_t *)(a1 + 2 * v48);
    v50 = 0uLL;
    v51 = 0uLL;
    v52 = 4 << a3;
    v53 = a2;
    do
    {
      v54 = *v49++;
      v55 = v54;
      v56 = *v53++;
      v57 = vsubq_s16(v55, v56);
      v50 = vmlal_high_s16(vmlal_s16(v50, *(int16x4_t *)v57.i8, *(int16x4_t *)v57.i8), v57, v57);
      v51 = vaddq_s16(v57, v51);
      v52 -= 8;
    }
    while (v52);
    v58 = (int8x16_t)vpaddlq_s16(v51);
    *(int32x2_t *)v58.i8 = vadd_s32(*(int32x2_t *)v58.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
    *(int32x2_t *)v58.i8 = vpadd_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v58.i8);
    v59 = (int8x16_t)vpaddlq_s32(v50);
    v60 = vadd_s32(*(int32x2_t *)v59.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)).u32[0]
        - (vmul_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v58.i8).u32[0] >> (a3 + 2));
    if (v60 >= v7)
      v48 = v22;
    else
      v7 = v60;
  }
  v61 = v22 + 4;
  if (v61 <= (int)v3)
  {
    v62 = (int16x8_t *)(a1 + 2 * v61);
    v63 = 0uLL;
    v64 = 0uLL;
    v65 = 4 << a3;
    v66 = a2;
    do
    {
      v67 = *v62++;
      v68 = v67;
      v69 = *v66++;
      v70 = vsubq_s16(v68, v69);
      v63 = vmlal_high_s16(vmlal_s16(v63, *(int16x4_t *)v70.i8, *(int16x4_t *)v70.i8), v70, v70);
      v64 = vaddq_s16(v70, v64);
      v65 -= 8;
    }
    while (v65);
    v71 = (int8x16_t)vpaddlq_s16(v64);
    *(int32x2_t *)v71.i8 = vadd_s32(*(int32x2_t *)v71.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
    *(int32x2_t *)v71.i8 = vpadd_s32(*(int32x2_t *)v71.i8, *(int32x2_t *)v71.i8);
    v72 = (int8x16_t)vpaddlq_s32(v63);
    v73 = vadd_s32(*(int32x2_t *)v72.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL)).u32[0]
        - (vmul_s32(*(int32x2_t *)v71.i8, *(int32x2_t *)v71.i8).u32[0] >> (a3 + 2));
    if (v73 < v7)
    {
      v7 = v73;
      v48 = v61;
    }
  }
LABEL_39:
  v74 = v48 - 2;
  if (v48 >= 2 && v74 <= (int)v3)
  {
    v76 = (int16x8_t *)(a1 + 2 * v74);
    v77 = 0uLL;
    v78 = 0uLL;
    v79 = 4 << a3;
    v80 = a2;
    do
    {
      v81 = *v76++;
      v82 = v81;
      v83 = *v80++;
      v84 = vsubq_s16(v82, v83);
      v77 = vmlal_high_s16(vmlal_s16(v77, *(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8), v84, v84);
      v78 = vaddq_s16(v84, v78);
      v79 -= 8;
    }
    while (v79);
    v85 = (int8x16_t)vpaddlq_s16(v78);
    *(int32x2_t *)v85.i8 = vadd_s32(*(int32x2_t *)v85.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
    *(int32x2_t *)v85.i8 = vpadd_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v85.i8);
    v86 = (int8x16_t)vpaddlq_s32(v77);
    v87 = vadd_s32(*(int32x2_t *)v86.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL)).u32[0]
        - (vmul_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v85.i8).u32[0] >> (a3 + 2));
    if (v87 >= v7)
      v74 = v48;
    else
      v7 = v87;
    if (v48 < -2)
      goto LABEL_56;
  }
  else
  {
    v74 = v48;
    if (v48 < -2)
      goto LABEL_56;
  }
  v88 = v48 + 2;
  if (v88 <= (int)v3)
  {
    v89 = (int16x8_t *)(a1 + 2 * v88);
    v90 = 0uLL;
    v91 = 0uLL;
    v92 = 4 << a3;
    v93 = a2;
    do
    {
      v94 = *v89++;
      v95 = v94;
      v96 = *v93++;
      v97 = vsubq_s16(v95, v96);
      v90 = vmlal_high_s16(vmlal_s16(v90, *(int16x4_t *)v97.i8, *(int16x4_t *)v97.i8), v97, v97);
      v91 = vaddq_s16(v97, v91);
      v92 -= 8;
    }
    while (v92);
    v98 = (int8x16_t)vpaddlq_s16(v91);
    *(int32x2_t *)v98.i8 = vadd_s32(*(int32x2_t *)v98.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v98, v98, 8uLL));
    *(int32x2_t *)v98.i8 = vpadd_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v98.i8);
    v99 = (int8x16_t)vpaddlq_s32(v90);
    v100 = vadd_s32(*(int32x2_t *)v99.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v99, v99, 8uLL)).u32[0]
         - (vmul_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v98.i8).u32[0] >> (a3 + 2));
    if (v100 < v7)
    {
      v7 = v100;
      v74 = v88;
    }
  }
LABEL_56:
  v101 = v74 - 1;
  if (v74 >= 1 && v101 <= (int)v3)
  {
    v103 = (int16x8_t *)(a1 + 2 * v101);
    v104 = 0uLL;
    v105 = 0uLL;
    v106 = 4 << a3;
    v107 = a2;
    do
    {
      v108 = *v103++;
      v109 = v108;
      v110 = *v107++;
      v111 = vsubq_s16(v109, v110);
      v104 = vmlal_high_s16(vmlal_s16(v104, *(int16x4_t *)v111.i8, *(int16x4_t *)v111.i8), v111, v111);
      v105 = vaddq_s16(v111, v105);
      v106 -= 8;
    }
    while (v106);
    v112 = (int8x16_t)vpaddlq_s16(v105);
    *(int32x2_t *)v112.i8 = vadd_s32(*(int32x2_t *)v112.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
    *(int32x2_t *)v112.i8 = vpadd_s32(*(int32x2_t *)v112.i8, *(int32x2_t *)v112.i8);
    v113 = (int8x16_t)vpaddlq_s32(v104);
    v114 = vadd_s32(*(int32x2_t *)v113.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL)).u32[0]
         - (vmul_s32(*(int32x2_t *)v112.i8, *(int32x2_t *)v112.i8).u32[0] >> (a3 + 2));
    if (v114 >= v7)
      v101 = v74;
    else
      v7 = v114;
    if (v74 < -1)
      return (v101 - ((int)v3 >> 1));
  }
  else
  {
    v101 = v74;
    if (v74 < -1)
      return (v101 - ((int)v3 >> 1));
  }
  if (v74 >= (int)v3)
    return (v101 - ((int)v3 >> 1));
  v115 = v74 + 1;
  v116 = (int16x8_t *)(a1 + 2 * v115);
  v117 = 0uLL;
  v118 = 0uLL;
  v119 = 4 << a3;
  do
  {
    v120 = *v116++;
    v121 = v120;
    v122 = *a2++;
    v123 = vsubq_s16(v121, v122);
    v117 = vmlal_high_s16(vmlal_s16(v117, *(int16x4_t *)v123.i8, *(int16x4_t *)v123.i8), v123, v123);
    v118 = vaddq_s16(v123, v118);
    v119 -= 8;
  }
  while (v119);
  v124 = (int8x16_t)vpaddlq_s16(v118);
  *(int32x2_t *)v124.i8 = vadd_s32(*(int32x2_t *)v124.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
  *(int32x2_t *)v124.i8 = vpadd_s32(*(int32x2_t *)v124.i8, *(int32x2_t *)v124.i8);
  v125 = (int8x16_t)vpaddlq_s32(v117);
  if ((int)(vadd_s32(*(int32x2_t *)v125.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)).u32[0]
           - (vmul_s32(*(int32x2_t *)v124.i8, *(int32x2_t *)v124.i8).u32[0] >> (a3 + 2))) < v7)
    v101 = v115;
  return (v101 - ((int)v3 >> 1));
}

uint64_t vp9_full_pixel_search(int *a1, uint64_t a2, unsigned int a3, __int16 *a4, int a5, int a6, unsigned int a7, _DWORD *a8, __int16 *a9, unsigned __int16 *a10, int a11, int a12)
{
  _DWORD *v17;
  __int128 v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  int v26;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  int v41;
  _BOOL8 v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  __int16 v48;
  __int16 v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  _BOOL8 v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  __int16 v66;
  _DWORD *v67;
  uint64_t v68;
  unsigned __int16 v69[2];
  int v70;
  int v71;

  v67 = (_DWORD *)(a2 + 24952);
  v17 = a1 + 184647;
  v68 = a3;
  if (a8)
  {
    *(_QWORD *)&v18 = 0x8000000080000000;
    *((_QWORD *)&v18 + 1) = 0x8000000080000000;
    *(_OWORD *)a8 = v18;
    a8[4] = 0x7FFFFFFF;
  }
  v19 = a12;
  v20 = &a1[16 * (unint64_t)a3 + 185116];
  switch(a6)
  {
    case 1:
    case 7:
      v21 = full_pixel_diamond((uint64_t)a1, a2, a3, a4, a5, a7, 10 - a5, 1u, a1[184893], a8, (uint64_t)&a1[16 * (unint64_t)a3 + 185116], a9, a10);
      if (a6 != 7)
        goto LABEL_7;
      goto LABEL_11;
    case 2:
      v48 = a9[1];
      v49 = *a9;
      v50 = &hex_search_hex_candidates;
      v51 = &hex_search_hex_num_candidates;
      goto LABEL_56;
    case 3:
      v52 = bigdia_search(a2, (unsigned __int16 *)a4, a5, a7, 1, a8, (uint64_t (**)(_QWORD, _QWORD, uint64_t))v20, *a9, a9[1], a10);
      goto LABEL_79;
    case 4:
      v48 = a9[1];
      v49 = *a9;
      v50 = &square_search_square_candidates;
      v51 = &square_search_square_num_candidates;
LABEL_56:
      v53 = vp9_pattern_search(a2, (unsigned __int16 *)a4, a5, a7, 1, a8, (uint64_t (**)(_QWORD, _QWORD, uint64_t))v20, v49, v48, a10, (uint64_t)v51, (uint64_t)v50);
      goto LABEL_61;
    case 5:
      if (a5 <= 9)
        v54 = 9;
      else
        v54 = a5;
      v53 = vp9_pattern_search(a2, (unsigned __int16 *)a4, v54, a7, 0, a8, (uint64_t (**)(_QWORD, _QWORD, uint64_t))v20, *a9, a9[1], a10, (uint64_t)&hex_search_hex_num_candidates, (uint64_t)&hex_search_hex_candidates);
LABEL_61:
      v21 = v53;
      goto LABEL_62;
    case 6:
      if (a5 <= 9)
        v64 = 9;
      else
        v64 = a5;
      v52 = bigdia_search(a2, (unsigned __int16 *)a4, v64, a7, 0, a8, (uint64_t (**)(_QWORD, _QWORD, uint64_t))v20, *a9, a9[1], a10);
LABEL_79:
      v21 = v52;
      if (!a12)
        return v21;
      goto LABEL_63;
    default:
      v21 = 0;
      if (a6 == 7)
        goto LABEL_11;
LABEL_7:
      if (a6 != 1)
        goto LABEL_62;
      v22 = v17[288];
      if (v22 == 0x7FFFFFFF || *v17 || (int)v21 <= v22 >> (8 - (b_width_log2_lookup[v68] + b_height_log2_lookup[v68])))
        goto LABEL_62;
LABEL_11:
      v23 = *a10;
      v24 = a10[1];
      LOWORD(v70) = *a10;
      HIWORD(v70) = v24;
      v69[0] = *a9 >> 3;
      v69[1] = a9[1] >> 3;
      v26 = a1[184936];
      v25 = a1[184937];
      if ((v26 - 257) < 0xFFFFFF06 || (int)v25 < 1 || (int)v25 > v26)
        goto LABEL_62;
      v29 = v26 / v25;
      LOWORD(v30) = v23;
      if (v23 < 0)
        v30 = -v23;
      v30 = (unsigned __int16)v30;
      LOWORD(v31) = v24;
      if (v24 < 0)
        v31 = -v24;
      if ((unsigned __int16)v30 <= (unsigned __int16)v31)
        v30 = (unsigned __int16)v31;
      v32 = (5 * v30) >> 2;
      if (v26 <= v32)
        v26 = v32;
      if (v26 >= 256)
        v33 = 256;
      else
        v33 = v26;
      if (v25 <= (unsigned __int16)v33 / (unsigned __int16)v29)
        v34 = (unsigned __int16)v33 / (unsigned __int16)v29;
      else
        v34 = a1[184937];
      v35 = exhaustive_mesh_search(a2, v69, &v70, v33, v34, a7, (uint64_t)v20, v23, v24);
      if (v33 >= 8 && v34 >= 2)
      {
        v35 = exhaustive_mesh_search(a2, v69, &v70, a1[184938], a1[184939], a7, (uint64_t)v20, v70, SHIWORD(v70));
        if (a1[184939] != 1)
        {
          v35 = exhaustive_mesh_search(a2, v69, &v70, a1[184940], a1[184941], a7, (uint64_t)v20, v70, SHIWORD(v70));
          if (a1[184941] != 1)
            v35 = exhaustive_mesh_search(a2, v69, &v70, a1[184942], a1[184943], a7, (uint64_t)v20, v70, SHIWORD(v70));
        }
      }
      v36 = 0x7FFFFFFFLL;
      if (v35 != 0x7FFFFFFF)
      {
        v37 = v70;
        v71 = 0;
        v66 = HIWORD(v70);
        v38 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))&a1[16 * v68 + 185122])(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + SHIWORD(v70) + *v67 * (__int16)v70);
        v39 = *(_QWORD *)(a2 + 25776);
        if (v39)
        {
          v40 = (unsigned __int16)*a9;
          v41 = (unsigned __int16)a9[1];
          v42 = (unsigned __int16)(8 * v66) != v41;
          v43 = 2;
          if ((unsigned __int16)(8 * v66) != v41)
            v43 = 3;
          if ((unsigned __int16)(8 * v37) != v40)
            v42 = v43;
          v39 = ((((int)v67[167]
                 * (*(int *)(*(_QWORD *)v39 + 4 * (__int16)(8 * v37 - v40))
                  + (uint64_t)*(int *)(*(_QWORD *)(v39 + 8) + 4 * (__int16)(8 * v66 - v41))
                  + *(int *)(a2 + 4 * v42 + 25724))) << 18)
               + 0x80000000) >> 32;
        }
        v44 = v39 + v38;
        if (v44 <= 0x7FFFFFFE)
          v36 = v44;
        else
          v36 = 0x7FFFFFFFLL;
      }
      v45 = v70;
      if (a8)
      {
        v46 = a7;
        v47 = v70;
        calc_int_cost_list(a2, *a9, a9[1], v46, (uint64_t)v20, v70, HIWORD(v70), a8);
        v45 = v47;
      }
      v19 = a12;
      if ((int)v36 < (int)v21)
      {
        *(_DWORD *)a10 = v45;
        v21 = v36;
        if (!a12)
          return v21;
      }
      else
      {
LABEL_62:
        if (!v19)
          return v21;
      }
LABEL_63:
      if (a6 != 1 && a6 != 7 && (int)v21 < a11)
      {
        v55 = (__int16)*a10;
        v56 = (__int16)a10[1];
        v71 = 0;
        v57 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))&a1[16 * v68 + 185122])(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + v56 + *v67 * v55);
        v58 = *(_QWORD *)(a2 + 25776);
        if (v58)
        {
          v59 = (unsigned __int16)*a9;
          v60 = (unsigned __int16)a9[1];
          v61 = (unsigned __int16)(8 * v56) != v60;
          v62 = 2;
          if ((unsigned __int16)(8 * v56) != v60)
            v62 = 3;
          if ((unsigned __int16)(8 * v55) != v59)
            v61 = v62;
          v58 = ((((int)v67[167]
                 * (*(int *)(*(_QWORD *)v58 + 4 * (__int16)(8 * v55 - v59))
                  + (uint64_t)*(int *)(*(_QWORD *)(v58 + 8) + 4 * (__int16)(8 * v56 - v60))
                  + *(int *)(a2 + 4 * v61 + 25724))) << 18)
               + 0x80000000) >> 32;
        }
        v63 = v58 + v57;
        if (v63 <= 0x7FFFFFFE)
          return v63;
        else
          return 0x7FFFFFFFLL;
      }
      return v21;
  }
}

uint64_t bigdia_search(uint64_t a1, unsigned __int16 *a2, int a3, int a4, int a5, _DWORD *a6, uint64_t (**a7)(_QWORD, _QWORD, uint64_t), __int16 a8, __int16 a9, _WORD *a10)
{
  uint64_t (**v10)(_QWORD, _QWORD, uint64_t);
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  signed __int16 v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int16 v27;
  __int16 v28;
  BOOL v29;
  _BOOL8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int16 *v36;
  uint64_t v37;
  int *v38;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned __int16 v49;
  int v50;
  uint64_t (*v51)(_QWORD, _QWORD, uint64_t);
  uint64_t v52;
  int v53;
  uint64_t v54;
  _BOOL8 v55;
  int v56;
  uint64_t v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _BOOL8 v63;
  int v64;
  BOOL v65;
  __int16 *v66;
  uint64_t v67;
  _DWORD *v68;
  _WORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v77;
  int v78;
  int v79;
  unsigned __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _BOOL8 v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int16 v95;
  unsigned __int16 v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  _BOOL8 v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  __int16 *v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _WORD *v112;
  unsigned __int16 v113;
  unsigned __int16 v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  _BOOL8 v118;
  int v119;
  BOOL v120;
  unsigned int v121;
  BOOL v122;
  BOOL v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  unsigned __int16 v128;
  unsigned __int16 v129;
  int v130;
  uint64_t v131;
  _BOOL8 v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  char *v136;
  __int16 v137;
  unsigned __int16 v138;
  __int16 v139;
  int v140;
  uint64_t v141;
  _BOOL8 v142;
  int v143;
  BOOL v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _BOOL8 v148;
  int v149;
  BOOL v150;
  char *v151;
  char *v152;
  int v153;
  unsigned __int16 v154;
  uint64_t (*v155)(_QWORD, _QWORD, uint64_t);
  uint64_t v156;
  int v157;
  uint64_t v158;
  _BOOL8 v159;
  int v160;
  BOOL v161;
  char *v162;
  int v163;
  uint64_t (**v164)(_QWORD, _QWORD, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int16 v169;
  __int16 *v170;
  int v171;
  uint64_t v172;
  _BOOL8 v173;
  int v174;
  BOOL v175;
  int v176;
  int v177;
  int v178;
  _WORD *v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  int *v187;
  int v188;
  int v189;
  _BOOL8 v190;
  uint64_t v191;
  uint64_t v192;
  _BOOL8 v193;
  uint64_t v194;
  int v195;
  _BOOL8 v196;
  uint64_t v197;
  uint64_t v198;
  _BOOL8 v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  __int16 v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  _BOOL8 v218;
  int v219;
  BOOL v220;
  int v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  _BOOL8 v225;
  int v226;
  BOOL v227;
  int v228;
  _BOOL8 v229;
  uint64_t v230;
  int v231;
  BOOL v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  BOOL v237;
  uint64_t v238;
  unsigned __int16 v239;
  int v240;
  _BOOL8 v241;
  uint64_t v242;
  int v243;
  BOOL v244;
  int v245;
  int v247;
  uint64_t v248;
  int v249;
  _BOOL8 v250;
  uint64_t v251;
  int v252;
  BOOL v253;
  int v254;
  uint64_t v255;
  int v256;
  uint64_t v257;
  uint64_t v258;
  int v259;
  BOOL v260;
  int v261;
  __int16 *v262;
  int v263;
  int v264;
  uint64_t v265;
  __int16 *v266;
  __int16 v267;
  __int16 v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  __int128 v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  uint64_t v278;
  _WORD *v279;
  unsigned __int16 v280;
  int v281;
  unsigned __int16 v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  _BOOL8 v286;
  int v287;
  BOOL v288;
  unsigned int v289;
  uint64_t v293;
  _WORD *v294;
  unsigned __int16 v295;
  unsigned __int16 v296;
  uint64_t v297;
  int v298;
  uint64_t v299;
  _BOOL8 v300;
  int v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  _BOOL8 v307;
  int v308;
  int v309;
  int v310;
  int v311;
  BOOL v312;
  uint64_t v313;
  int v314;
  uint64_t v315;
  _BOOL8 v316;
  int v317;
  BOOL v318;
  _WORD *v319;
  int v320;
  unsigned __int16 v321;
  __int16 *v322;
  int v323;
  unsigned __int16 v324;
  uint64_t v325;
  _BOOL8 v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  _BOOL8 v330;
  int v331;
  BOOL v332;
  int v333;
  int v335;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v341;
  unsigned int v342;
  _WORD *v343;
  int v344;
  int v345;
  int v346;
  __int16 *v347;
  unsigned int v348;
  int v349;
  unsigned int v350;
  unsigned int v351;
  unsigned int v352;
  uint64_t v353;
  signed int v354;
  int v355;
  unsigned int v356;
  uint64_t v357;
  int v358;
  int v359;
  uint64_t (**v361)(_QWORD, _QWORD, uint64_t);
  signed __int16 v362;
  uint64_t v363;
  int *v364;
  int v365;
  int v366;
  int v367;
  uint64_t v368;

  v10 = a7;
  v368 = *MEMORY[0x24BDAC8D0];
  v358 = a9 >> 3;
  v359 = a8 >> 3;
  v12 = vp9_pattern_search_sad_search_param_to_steps[a3];
  v13 = *(_DWORD *)(a1 + 25852);
  v14 = *(_DWORD *)(a1 + 25856);
  v15 = *(_DWORD *)(a1 + 25860);
  v16 = (__int16)a2[1];
  if (v16 < v13)
    LOWORD(v13) = a2[1];
  if (*(_DWORD *)(a1 + 25848) <= v16)
    LOWORD(v17) = v13;
  else
    v17 = *(_DWORD *)(a1 + 25848);
  a2[1] = v17;
  v18 = (__int16)*a2;
  if (v18 >= v15)
    v19 = v15;
  else
    v19 = *a2;
  if (v14 <= v18)
    v20 = v19;
  else
    v20 = v14;
  *a2 = v20;
  v362 = v20;
  v342 = v20;
  v21 = (__int16)v17;
  if (a6)
  {
    a6[4] = 0x7FFFFFFF;
    *(_QWORD *)&v22 = 0x8000000080000000;
    *((_QWORD *)&v22 + 1) = 0x8000000080000000;
    *(_OWORD *)a6 = v22;
  }
  v364 = (int *)(a1 + 24952);
  v23 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + (int)v21 + *(_DWORD *)(a1 + 24952) * v20);
  v24 = a1;
  v25 = *a2;
  v26 = a2[1];
  v27 = v25 - v359;
  v28 = v26 - v358;
  v29 = v26 == (unsigned __int16)v358;
  v30 = v26 != (unsigned __int16)v358;
  v31 = 2;
  if (!v29)
    v31 = 3;
  if (v25 == (unsigned __int16)v359)
    v32 = v30;
  else
    v32 = v31;
  v357 = a1 + 25784;
  v33 = v23
      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v27)
                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v28)
                       + *(_DWORD *)(a1 + 25784 + 4 * v32))
                      * a4
                      + 256) >> 9);
  v361 = v10;
  if (a5)
  {
    v34 = 0;
    v338 = (v12 & ~(v12 >> 31)) + 1;
    v35 = -1;
    v36 = &word_208F4A0EE;
    LODWORD(v37) = -1;
    v38 = v364;
    v340 = (__int16)v17;
    while (1)
    {
      v345 = v35;
      v40 = v21 - (1 << v34);
      v41 = (1 << v34) + v21;
      v42 = bigdia_search_bigdia_num_candidates[v34];
      v45 = (int)(v342 - (1 << v34)) >= v38[226]
         && (int)((1 << v34) + v342) <= v38[227]
         && v40 >= v38[224]
         && v41 <= v38[225];
      v350 = v37;
      v353 = v34;
      v347 = v36;
      v46 = v33;
      if (v45)
      {
        if ((int)v42 >= 1)
        {
          v57 = 0;
          v39 = -1;
          do
          {
            v58 = *(v36 - 1) + v362;
            v59 = *v36 + v17;
            v60 = v24;
            v61 = (*v10)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v58 + (__int16)v59);
            if (v61 < (int)v46)
            {
              v62 = 2;
              if (v59 != (unsigned __int16)v358)
                v62 = 3;
              if (v58 == (unsigned __int16)v359)
                v63 = v59 != (unsigned __int16)v358;
              else
                v63 = v62;
              v64 = v61
                  + (((*(_DWORD *)(*(_QWORD *)(v60 + 25800) + 4 * (__int16)(v58 - v359))
                                   + *(_DWORD *)(*(_QWORD *)(v60 + 25808) + 4 * (__int16)(v59 - v358))
                                   + *(_DWORD *)(v357 + 4 * v63))
                                  * a4
                                  + 256) >> 9);
              v65 = v64 < (int)v46;
              if (v64 >= (int)v46)
                v46 = v46;
              else
                v46 = v64;
              if (v65)
                v39 = v57;
            }
            v24 = v60;
            v36 += 2;
            ++v57;
            v38 = v364;
          }
          while (v42 != v57);
          goto LABEL_22;
        }
      }
      else if ((int)v42 >= 1)
      {
        v47 = 0;
        v39 = -1;
        do
        {
          v48 = (__int16)(*v36 + v17);
          if (v38[224] <= v48 && v38[225] >= v48)
          {
            v49 = *(v36 - 1) + v362;
            if (v38[226] <= (__int16)v49 && v38[227] >= (__int16)v49)
            {
              v50 = v46;
              v51 = *v10;
              v52 = v24;
              v53 = v51(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v48 + *v38 * (__int16)v49);
              if (v53 < (int)v46)
              {
                v54 = 2;
                if (v48 != v358)
                  v54 = 3;
                if (v49 == (unsigned __int16)v359)
                  v55 = v48 != v358;
                else
                  v55 = v54;
                v56 = v53
                    + (((*(_DWORD *)(*(_QWORD *)(v52 + 25800) + 4 * (__int16)(v49 - v359))
                                     + *(_DWORD *)(*(_QWORD *)(v52 + 25808) + 4 * (__int16)(v48 - v358))
                                     + *(_DWORD *)(v357 + 4 * v55))
                                    * a4
                                    + 256) >> 9);
                if (v56 >= (int)v46)
                  v46 = v46;
                else
                  v46 = v56;
                if (v56 < v50)
                  v39 = v47;
              }
              v24 = v52;
              v10 = v361;
              v38 = v364;
            }
          }
          v36 += 2;
          ++v47;
        }
        while (v42 != v47);
        goto LABEL_22;
      }
      v39 = -1;
LABEL_22:
      if (v39 == -1)
        v37 = v350;
      else
        v37 = v39;
      if (v39 == -1)
        v35 = v345;
      else
        v35 = v353;
      v34 = v353 + 1;
      v36 = v347 + 16;
      LODWORD(v21) = (__int16)v17;
      v33 = v46;
      if (v353 + 1 == v338)
      {
        if (v35 != -1)
        {
          v12 = v35;
          v66 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 32 * v35 + 4 * (int)v37);
          v67 = v342 + *v66;
          v21 = (v340 + v66[1]);
          goto LABEL_77;
        }
        LODWORD(v67) = v342;
        v68 = a6;
        if (a6)
        {
LABEL_261:
          if (*v68 != 0x7FFFFFFF)
            goto LABEL_255;
LABEL_262:
          *v68 = v33;
          v182 = v38[226];
          v183 = v38[227];
          v184 = v38[224];
          v185 = v38[225];
          if ((int)v67 > v182 && (int)v67 < v183 && (int)v21 > v184 && (int)v21 < v185)
          {
            v186 = v24;
            v356 = v33;
            v187 = v38;
            v68[1] = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v67 + ((((_DWORD)v21 << 16) - 0x10000) >> 16));
            v68[2] = (*v361)(*(_QWORD *)(v186 + 8216), *(unsigned int *)(v186 + 8224), *(_QWORD *)(v186 + 24944)+ (__int16)v21+ (uint64_t)(*v187 * ((((_DWORD)v67 << 16) + 0x10000) >> 16)));
            v68[3] = (*v361)(*(_QWORD *)(v186 + 8216), *(unsigned int *)(v186 + 8224), *(_QWORD *)(v186 + 24944) + *v187 * (__int16)v67 + ((((_DWORD)v21 << 16) + 0x10000) >> 16));
            v188 = *v187;
            v33 = v356;
            v68[4] = (*v361)(*(_QWORD *)(v186 + 8216), *(unsigned int *)(v186 + 8224), *(_QWORD *)(v186 + 24944)+ (__int16)v21+ (uint64_t)(v188 * ((((_DWORD)v67 << 16) - 0x10000) >> 16)));
            goto LABEL_378;
          }
          v201 = (((_DWORD)v21 << 16) - 0x10000) >> 16;
          v202 = 0x7FFFFFFF;
          if (v184 <= v201 && v185 >= v201 && v182 <= (__int16)v67 && v183 >= (__int16)v67)
          {
            v202 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v201 + *v38 * (__int16)v67);
            v38 = v364;
            v24 = a1;
          }
          v68[1] = v202;
          if (v38[224] <= (__int16)v21
            && v38[225] >= (__int16)v21
            && (v203 = (__int16)(v67 + 1), v38[226] <= v203)
            && v38[227] >= v203)
          {
            v204 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * v203 + (uint64_t)(__int16)v21);
            v38 = v364;
            v24 = a1;
          }
          else
          {
            v204 = 0x7FFFFFFF;
          }
          a6[2] = v204;
          v205 = (((_DWORD)v21 << 16) + 0x10000) >> 16;
          if (v38[224] <= v205 && v38[225] >= v205 && v38[226] <= (__int16)v67 && v38[227] >= (__int16)v67)
          {
            v245 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v205 + *v38 * (__int16)v67);
            v38 = v364;
            a6[3] = v245;
            if (v364[224] <= (__int16)v21)
            {
LABEL_304:
              if (v38[225] >= (__int16)v21)
              {
                v206 = (__int16)(v67 - 1);
                if (v38[226] <= v206 && v38[227] >= v206)
                {
                  a6[4] = (*v361)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v38 * v206 + (uint64_t)(__int16)v21);
                  goto LABEL_378;
                }
              }
            }
          }
          else
          {
            a6[3] = 0x7FFFFFFF;
            if (v38[224] <= (__int16)v21)
              goto LABEL_304;
          }
          a6[4] = 0x7FFFFFFF;
        }
LABEL_378:
        v179 = a10;
        goto LABEL_379;
      }
    }
  }
  v37 = 0xFFFFFFFFLL;
  v67 = v342;
  v38 = v364;
LABEL_77:
  v335 = a6 != 0;
  v346 = v12;
  if (v12 < v335)
  {
    v68 = a6;
    if (!v12)
      goto LABEL_252;
LABEL_79:
    if (v68)
      goto LABEL_261;
    goto LABEL_378;
  }
  v333 = 1 << v12;
  v69 = (_WORD *)((char *)&bigdia_search_bigdia_candidates + 32 * v12 + 2);
  v339 = v12;
  v70 = v12;
  do
  {
    v363 = v70;
    if (a5 && v70 == v339)
    {
      v343 = v69;
      LODWORD(v72) = bigdia_search_bigdia_num_candidates[v339];
      LODWORD(v73) = v333;
      v341 = v346;
      goto LABEL_132;
    }
    v354 = v33;
    v73 = (1 << v70);
    v72 = bigdia_search_bigdia_num_candidates[v70];
    if ((int)v67 - (int)v73 >= v38[226]
      && (int)v67 + (int)v73 <= v38[227]
      && (int)v21 - (int)v73 >= v38[224]
      && (int)v21 + (int)v73 <= v38[225])
    {
      if ((int)v72 < 1)
      {
LABEL_246:
        v71 = v70;
        v33 = v33;
        v10 = v361;
        goto LABEL_83;
      }
      v90 = 0;
      v348 = -1;
      v343 = v69;
      do
      {
        v91 = v72;
        v92 = v73;
        v93 = v37;
        v94 = v67;
        v95 = *(v69 - 1) + v67;
        v96 = *v69 + v21;
        v97 = v24;
        v98 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v95 + (__int16)v96);
        v99 = v354;
        if (v98 < v354)
        {
          v100 = 2;
          if (v96 != (unsigned __int16)v358)
            v100 = 3;
          if (v95 == (unsigned __int16)v359)
            v101 = v96 != (unsigned __int16)v358;
          else
            v101 = v100;
          v102 = v98
               + (((*(_DWORD *)(*(_QWORD *)(v97 + 25800) + 4 * (__int16)(v95 - v359))
                                + *(_DWORD *)(*(_QWORD *)(v97 + 25808) + 4 * (__int16)(v96 - v358))
                                + *(_DWORD *)(v357 + 4 * v101))
                               * a4
                               + 256) >> 9);
          v103 = v102 < v354;
          if (v102 < v354)
            v99 = v98
                + (((*(_DWORD *)(*(_QWORD *)(v97 + 25800) + 4 * (__int16)(v95 - v359))
                                 + *(_DWORD *)(*(_QWORD *)(v97 + 25808) + 4 * (__int16)(v96 - v358))
                                 + *(_DWORD *)(v357 + 4 * v101))
                                * a4
                                + 256) >> 9);
          v354 = v99;
          v104 = v348;
          if (v103)
            v104 = v90;
          v348 = v104;
        }
        v24 = v97;
        v72 = v91;
        v69 += 2;
        ++v90;
        v67 = v94;
        v70 = v363;
        v38 = v364;
        v37 = v93;
        v73 = v92;
      }
      while (v91 != v90);
    }
    else
    {
      if ((int)v72 < 1)
        goto LABEL_246;
      v77 = 0;
      v348 = -1;
      v343 = v69;
      v351 = v37;
      do
      {
        v78 = (__int16)(*v69 + v21);
        if (v38[224] <= v78)
        {
          v79 = v354;
          if (v38[225] >= v78)
          {
            v80 = *(v69 - 1) + v67;
            if (v38[226] <= (__int16)v80 && v38[227] >= (__int16)v80)
            {
              v81 = v72;
              v82 = v73;
              v83 = v24;
              v84 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v78 + *v38 * (__int16)v80);
              if (v84 < v354)
              {
                v85 = 2;
                if (v78 != v358)
                  v85 = 3;
                if (v80 == (unsigned __int16)v359)
                  v86 = v78 != v358;
                else
                  v86 = v85;
                v87 = v84
                    + (((*(_DWORD *)(*(_QWORD *)(v83 + 25800) + 4 * (__int16)(v80 - v359))
                                     + *(_DWORD *)(*(_QWORD *)(v83 + 25808) + 4 * (__int16)(v78 - v358))
                                     + *(_DWORD *)(v357 + 4 * v86))
                                    * a4
                                    + 256) >> 9);
                v88 = v87 < v354;
                if (v87 < v354)
                  v79 = v84
                      + (((*(_DWORD *)(*(_QWORD *)(v83 + 25800) + 4 * (__int16)(v80 - v359))
                                       + *(_DWORD *)(*(_QWORD *)(v83 + 25808) + 4 * (__int16)(v78 - v358))
                                       + *(_DWORD *)(v357 + 4 * v86))
                                      * a4
                                      + 256) >> 9);
                v354 = v79;
                v89 = v348;
                if (v88)
                  v89 = v77;
                v348 = v89;
              }
              v24 = v83;
              v70 = v363;
              v38 = v364;
              v37 = v351;
              v73 = v82;
              v72 = v81;
            }
          }
        }
        v69 += 2;
        ++v77;
      }
      while (v72 != v77);
    }
    if (v348 != -1)
    {
      v105 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 32 * v70 + 4 * (int)v348);
      v67 = (v67 + *v105);
      v21 = (v21 + v105[1]);
      v341 = v70;
      v37 = v348;
      v33 = v354;
      v10 = v361;
LABEL_132:
      v355 = v72 - 1;
      v349 = v73;
      while (2)
      {
        if ((_DWORD)v37)
          v106 = v37 - 1;
        else
          v106 = v355;
        v365 = v106;
        v366 = v37;
        if ((_DWORD)v37 == v355)
          v107 = 0;
        else
          v107 = (v37 + 1);
        v367 = v107;
        v108 = v38[226];
        v109 = v38[227];
        v110 = v38[224];
        v111 = v38[225];
        v112 = (_WORD *)((char *)&bigdia_search_bigdia_candidates + 32 * v70 + 4 * v106);
        v113 = *v112 + v67;
        v114 = v112[1] + v21;
        if ((int)v67 - (int)v73 >= v108
          && (int)v67 + (int)v73 <= v109
          && (int)v21 - (int)v73 >= v110
          && (int)v21 + (int)v73 <= v111)
        {
          v115 = v24;
          v116 = (*v10)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v113 + (uint64_t)(__int16)v114);
          if (v116 >= (int)v33)
          {
            v121 = -1;
          }
          else
          {
            v117 = 2;
            if (v114 != (unsigned __int16)v358)
              v117 = 3;
            if (v113 == (unsigned __int16)v359)
              v118 = v114 != (unsigned __int16)v358;
            else
              v118 = v117;
            v119 = v116
                 + (((*(_DWORD *)(*(_QWORD *)(v115 + 25800) + 4 * (__int16)(v113 - v359))
                                  + *(_DWORD *)(*(_QWORD *)(v115 + 25808) + 4 * (__int16)(v114 - v358))
                                  + *(_DWORD *)(v357 + 4 * v118))
                                 * a4
                                 + 256) >> 9);
            v120 = v119 < (int)v33;
            if (v119 >= (int)v33)
              v33 = v33;
            else
              v33 = v119;
            if (v120)
              v121 = 0;
            else
              v121 = -1;
          }
          v124 = v115;
          v125 = (char *)&bigdia_search_bigdia_candidates + 32 * v363;
          v352 = v37;
          v126 = &v125[4 * (int)v37];
          v127 = v67;
          v128 = *(_WORD *)v126 + v67;
          v129 = *((_WORD *)v126 + 1) + v21;
          v130 = (*v10)(*(_QWORD *)(v124 + 8216), *(unsigned int *)(v124 + 8224), *(_QWORD *)(v124 + 24944) + *v364 * (__int16)v128 + (__int16)v129);
          if (v130 < (int)v33)
          {
            v131 = 2;
            if (v129 != (unsigned __int16)v358)
              v131 = 3;
            if (v128 == (unsigned __int16)v359)
              v132 = v129 != (unsigned __int16)v358;
            else
              v132 = v131;
            v133 = v130
                 + (((*(_DWORD *)(*(_QWORD *)(v124 + 25800) + 4 * (__int16)(v128 - v359))
                                  + *(_DWORD *)(*(_QWORD *)(v124 + 25808) + 4 * (__int16)(v129 - v358))
                                  + *(_DWORD *)(v357 + 4 * v132))
                                 * a4
                                 + 256) >> 9);
            v134 = v133 < (int)v33;
            if (v133 >= (int)v33)
              v33 = v33;
            else
              v33 = v133;
            if (v134)
              v121 = 1;
          }
          v135 = v124;
          v136 = &v125[4 * (int)v107];
          v137 = *(_WORD *)v136;
          v138 = *(_WORD *)v136 + v127;
          v139 = *((_WORD *)v136 + 1);
          v140 = (*v361)(*(_QWORD *)(v135 + 8216), *(unsigned int *)(v135 + 8224), *(_QWORD *)(v135 + 24944) + *v364 * (__int16)v138 + (__int16)(v139 + v21));
          if (v140 < (int)v33)
          {
            v141 = 2;
            if ((unsigned __int16)(v139 + v21) != (unsigned __int16)v358)
              v141 = 3;
            if (v138 == (unsigned __int16)v359)
              v142 = (unsigned __int16)(v139 + v21) != (unsigned __int16)v358;
            else
              v142 = v141;
            v143 = v140
                 + (((*(_DWORD *)(*(_QWORD *)(v135 + 25800) + 4 * (__int16)(v138 - v359))
                                  + *(_DWORD *)(*(_QWORD *)(v135 + 25808) + 4 * (__int16)(v139 + v21 - v358))
                                  + *(_DWORD *)(v357 + 4 * v142))
                                 * a4
                                 + 256) >> 9);
            v144 = v143 < (int)v33;
            if (v143 >= (int)v33)
              v33 = v33;
            else
              v33 = v143;
            v24 = v135;
            v70 = v363;
            LODWORD(v73) = v349;
            v67 = v127;
            if (!v144)
            {
              v10 = v361;
              v38 = v364;
              v37 = v352;
              if (v121 == -1)
                goto LABEL_82;
              goto LABEL_232;
            }
LABEL_133:
            v10 = v361;
            v38 = v364;
LABEL_134:
            v67 = (v67 + v137);
            v37 = v107;
            v21 = (v21 + v139);
            continue;
          }
          v67 = v127;
          v24 = v135;
          v10 = v361;
          v38 = v364;
          v37 = v352;
LABEL_193:
          v70 = v363;
          LODWORD(v73) = v349;
          if (v121 == -1)
            goto LABEL_82;
          goto LABEL_232;
        }
        break;
      }
      v122 = v110 > (__int16)v114 || v111 < (__int16)v114;
      if (v122 || (v108 <= (__int16)v113 ? (v123 = v109 < (__int16)v113) : (v123 = 1), v123))
      {
        v121 = -1;
      }
      else
      {
        v145 = v24;
        v146 = (*v10)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v113 + (uint64_t)(__int16)v114);
        if (v146 >= (int)v33)
        {
          v121 = -1;
        }
        else
        {
          v147 = 2;
          if (v114 != (unsigned __int16)v358)
            v147 = 3;
          if (v113 == (unsigned __int16)v359)
            v148 = v114 != (unsigned __int16)v358;
          else
            v148 = v147;
          v149 = v146
               + (((*(_DWORD *)(*(_QWORD *)(v145 + 25800) + 4 * (__int16)(v113 - v359))
                                + *(_DWORD *)(*(_QWORD *)(v145 + 25808) + 4 * (__int16)(v114 - v358))
                                + *(_DWORD *)(v357 + 4 * v148))
                               * a4
                               + 256) >> 9);
          v150 = v149 < (int)v33;
          if (v149 >= (int)v33)
            v33 = v33;
          else
            v33 = v149;
          if (v150)
            v121 = 0;
          else
            v121 = -1;
        }
        v24 = v145;
        v70 = v363;
        v38 = v364;
        LODWORD(v73) = v349;
      }
      v151 = (char *)&bigdia_search_bigdia_candidates + 32 * v70;
      v152 = &v151[4 * (int)v37];
      v153 = (__int16)(*((_WORD *)v152 + 1) + v21);
      if (v38[224] <= v153 && v38[225] >= v153)
      {
        v154 = *(_WORD *)v152 + v67;
        if (v38[226] <= (__int16)v154 && v38[227] >= (__int16)v154)
        {
          v155 = *v10;
          v156 = v24;
          v157 = v155(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v153 + *v38 * (__int16)v154);
          if (v157 < (int)v33)
          {
            v158 = 2;
            if (v153 != v358)
              v158 = 3;
            if (v154 == (unsigned __int16)v359)
              v159 = v153 != v358;
            else
              v159 = v158;
            v160 = v157
                 + (((*(_DWORD *)(*(_QWORD *)(v156 + 25800) + 4 * (__int16)(v154 - v359))
                                  + *(_DWORD *)(*(_QWORD *)(v156 + 25808) + 4 * (__int16)(v153 - v358))
                                  + *(_DWORD *)(v357 + 4 * v159))
                                 * a4
                                 + 256) >> 9);
            v161 = v160 < (int)v33;
            if (v160 >= (int)v33)
              v33 = v33;
            else
              v33 = v160;
            if (v161)
              v121 = 1;
          }
          v24 = v156;
          v10 = v361;
          v70 = v363;
          v38 = v364;
          LODWORD(v73) = v349;
        }
      }
      v162 = &v151[4 * (int)v107];
      v139 = *((_WORD *)v162 + 1);
      v163 = (__int16)(v139 + v21);
      if (v38[224] <= v163 && v38[225] >= v163)
      {
        v164 = v10;
        v165 = v37;
        v166 = v33;
        v167 = v21;
        v137 = *(_WORD *)v162;
        v168 = v67;
        v169 = *(_WORD *)v162 + v67;
        if (v38[226] <= (__int16)v169 && v38[227] >= (__int16)v169)
        {
          v171 = (*v164)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v163 + *v38 * (__int16)v169);
          if (v171 >= (int)v166)
          {
            v67 = v168;
            v21 = v167;
            v33 = v166;
            v24 = a1;
            v38 = v364;
            v37 = v165;
            v10 = v361;
            goto LABEL_193;
          }
          v24 = a1;
          v172 = 2;
          if (v163 != v358)
            v172 = 3;
          if (v169 == (unsigned __int16)v359)
            v173 = v163 != v358;
          else
            v173 = v172;
          v174 = v171
               + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v169 - v359))
                                + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v163 - v358))
                                + *(_DWORD *)(v357 + 4 * v173))
                               * a4
                               + 256) >> 9);
          v175 = v174 < (int)v166;
          if (v174 >= (int)v166)
            v166 = v166;
          else
            v166 = v174;
          v70 = v363;
          LODWORD(v73) = v349;
          v67 = v168;
          v21 = v167;
          v33 = v166;
          if (v175)
            goto LABEL_133;
          v38 = v364;
          v37 = v165;
          v10 = v361;
          if (v121 == -1)
          {
LABEL_82:
            v69 = v343;
            v71 = v341;
            goto LABEL_83;
          }
LABEL_232:
          v107 = *(&v365 + v121);
          v170 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 32 * v70 + 4 * v107);
          v137 = *v170;
          v139 = v170[1];
          goto LABEL_134;
        }
        v67 = v168;
        v21 = v167;
        v33 = v166;
        v37 = v165;
        v10 = v164;
      }
      if (v121 == -1)
        goto LABEL_82;
      goto LABEL_232;
    }
    v71 = v70;
    v33 = v354;
    v10 = v361;
    v69 = v343;
LABEL_83:
    --v70;
    v69 -= 16;
  }
  while (v71 > v335);
  v68 = a6;
  if (a6)
    v176 = 0;
  else
    v176 = -1;
  if (v176)
    goto LABEL_79;
LABEL_252:
  *v68 = v33;
  if (a5 && !v346)
  {
    if ((_DWORD)v33 != 0x7FFFFFFF)
      goto LABEL_255;
    goto LABEL_262;
  }
  v207 = v38[226];
  v208 = v38[227];
  v209 = v38[224];
  v210 = v38[225];
  v211 = v67;
  v212 = v21 - 1;
  v213 = v211;
  if (v211 <= v207 || v211 >= v208 || (int)v21 <= v209 || (int)v21 >= v210)
  {
    v221 = -1;
    if (v209 <= v212 && v210 >= v212)
    {
      v221 = -1;
      if (v207 <= (__int16)v211 && v208 >= (__int16)v211)
      {
        v222 = v24;
        v223 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v211 + (uint64_t)v212);
        a6[1] = v223;
        if (v223 >= (int)v33)
        {
          v221 = -1;
        }
        else
        {
          v224 = 2;
          if ((unsigned __int16)(v21 - 1) != (unsigned __int16)v358)
            v224 = 3;
          if ((unsigned __int16)v213 == (unsigned __int16)v359)
            v225 = (unsigned __int16)(v21 - 1) != (unsigned __int16)v358;
          else
            v225 = v224;
          v226 = v223
               + (((*(_DWORD *)(*(_QWORD *)(v222 + 25800) + 4 * (__int16)(v213 - v359))
                                + *(_DWORD *)(*(_QWORD *)(v222 + 25808) + 4 * (__int16)(v212 - v358))
                                + *(_DWORD *)(v357 + 4 * v225))
                               * a4
                               + 256) >> 9);
          v227 = v226 < (int)v33;
          if (v226 >= (int)v33)
            v33 = v33;
          else
            v33 = v226;
          if (v227)
            v221 = 0;
          else
            v221 = -1;
        }
        v24 = v222;
        v38 = v364;
      }
    }
    if (v38[224] <= (__int16)v21 && v38[225] >= (__int16)v21)
    {
      v247 = (__int16)(v213 + 1);
      if (v38[226] <= v247 && v38[227] >= v247)
      {
        v248 = v24;
        v249 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * v247 + (uint64_t)(__int16)v21);
        a6[2] = v249;
        if (v249 < (int)v33)
        {
          v250 = (unsigned __int16)v21 != (unsigned __int16)v358;
          v251 = 2;
          if ((unsigned __int16)v21 != (unsigned __int16)v358)
            v251 = 3;
          if ((unsigned __int16)(v213 + 1) != (unsigned __int16)v359)
            v250 = v251;
          v252 = v249
               + (((*(_DWORD *)(*(_QWORD *)(v248 + 25800) + 4 * (__int16)(v213 + 1 - v359))
                                + *(_DWORD *)(*(_QWORD *)(v248 + 25808) + 4 * (__int16)(v21 - v358))
                                + *(_DWORD *)(v357 + 4 * v250))
                               * a4
                               + 256) >> 9);
          v253 = v252 < (int)v33;
          if (v252 >= (int)v33)
            v33 = v33;
          else
            v33 = v252;
          if (v253)
            v221 = 1;
        }
        v24 = v248;
        v38 = v364;
      }
    }
    v254 = (__int16)(v21 + 1);
    if (v38[224] <= v254 && v38[225] >= v254 && v38[226] <= (__int16)v213 && v38[227] >= (__int16)v213)
    {
      v255 = v24;
      v256 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v254 + *v38 * (__int16)v213);
      a6[3] = v256;
      if (v256 < (int)v33)
      {
        v257 = v254 == v358 ? 2 : 3;
        v258 = (unsigned __int16)v213 == (unsigned __int16)v359 ? v254 != v358 : v257;
        v259 = v256
             + (((*(_DWORD *)(*(_QWORD *)(v255 + 25800) + 4 * (__int16)(v213 - v359))
                              + *(_DWORD *)(*(_QWORD *)(v255 + 25808) + 4 * (__int16)(v254 - v358))
                              + *(_DWORD *)(v357 + 4 * v258))
                             * a4
                             + 256) >> 9);
        v260 = v259 < (int)v33;
        v33 = v259 >= (int)v33 ? v33 : v259;
        if (v260)
          v221 = 2;
      }
      v24 = v255;
      v38 = v364;
    }
    if (v38[224] > (__int16)v21)
      goto LABEL_422;
    if (v38[225] < (__int16)v21)
      goto LABEL_422;
    v239 = v213 - 1;
    v261 = (__int16)(v213 - 1);
    if (v38[226] > v261 || v38[227] < v261)
      goto LABEL_422;
    v238 = v24;
    v240 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * v261 + (uint64_t)(__int16)v21);
    a6[4] = v240;
    if (v240 < (int)v33)
      goto LABEL_365;
LABEL_420:
    v24 = v238;
    goto LABEL_421;
  }
  v214 = v24;
  v215 = (__int16)v211;
  v216 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v211 + (uint64_t)v212);
  v68[1] = v216;
  if (v216 >= (int)v33)
  {
    v221 = -1;
  }
  else
  {
    v217 = 2;
    if ((unsigned __int16)(v21 - 1) != (unsigned __int16)v358)
      v217 = 3;
    if ((unsigned __int16)v213 == (unsigned __int16)v359)
      v218 = (unsigned __int16)(v21 - 1) != (unsigned __int16)v358;
    else
      v218 = v217;
    v219 = v216
         + (((*(_DWORD *)(*(_QWORD *)(v214 + 25800) + 4 * (__int16)(v213 - v359))
                          + *(_DWORD *)(*(_QWORD *)(v214 + 25808) + 4 * (__int16)(v212 - v358))
                          + *(_DWORD *)(v357 + 4 * v218))
                         * a4
                         + 256) >> 9);
    v220 = v219 < (int)v33;
    if (v219 >= (int)v33)
      v33 = v33;
    else
      v33 = v219;
    if (v220)
      v221 = 0;
    else
      v221 = -1;
  }
  v228 = (*v361)(*(_QWORD *)(v214 + 8216), *(unsigned int *)(v214 + 8224), *(_QWORD *)(v214 + 24944) + (__int16)v21 + (uint64_t)(*v364 * (__int16)(v213 + 1)));
  a6[2] = v228;
  if (v228 < (int)v33)
  {
    v229 = (unsigned __int16)v21 != (unsigned __int16)v358;
    v230 = 2;
    if ((unsigned __int16)v21 != (unsigned __int16)v358)
      v230 = 3;
    if ((unsigned __int16)(v213 + 1) != (unsigned __int16)v359)
      v229 = v230;
    v231 = v228
         + (((*(_DWORD *)(*(_QWORD *)(v214 + 25800) + 4 * (__int16)(v213 + 1 - v359))
                          + *(_DWORD *)(*(_QWORD *)(v214 + 25808) + 4 * (__int16)(v21 - v358))
                          + *(_DWORD *)(v357 + 4 * v229))
                         * a4
                         + 256) >> 9);
    v232 = v231 < (int)v33;
    if (v231 >= (int)v33)
      v33 = v33;
    else
      v33 = v231;
    if (v232)
      v221 = 1;
  }
  v233 = (*v361)(*(_QWORD *)(v214 + 8216), *(unsigned int *)(v214 + 8224), *(_QWORD *)(v214 + 24944) + *v364 * v215 + (__int16)(v21 + 1));
  a6[3] = v233;
  if (v233 < (int)v33)
  {
    v234 = (unsigned __int16)(v21 + 1) == (unsigned __int16)v358 ? 2 : 3;
    v235 = (unsigned __int16)v213 == (unsigned __int16)v359
         ? (unsigned __int16)(v21 + 1) != (unsigned __int16)v358
         : v234;
    v236 = v233
         + (((*(_DWORD *)(*(_QWORD *)(v214 + 25800) + 4 * (__int16)(v213 - v359))
                          + *(_DWORD *)(*(_QWORD *)(v214 + 25808) + 4 * (__int16)(v21 + 1 - v358))
                          + *(_DWORD *)(v357 + 4 * v235))
                         * a4
                         + 256) >> 9);
    v237 = v236 < (int)v33;
    v33 = v236 >= (int)v33 ? v33 : v236;
    if (v237)
      v221 = 2;
  }
  v238 = v214;
  v239 = v213 - 1;
  v240 = (*v361)(*(_QWORD *)(v214 + 8216), *(unsigned int *)(v214 + 8224), *(_QWORD *)(v214 + 24944) + (__int16)v21 + (uint64_t)(*v364 * (__int16)(v213 - 1)));
  a6[4] = v240;
  if (v240 >= (int)v33)
    goto LABEL_420;
LABEL_365:
  v241 = (unsigned __int16)v21 != (unsigned __int16)v358;
  v242 = 2;
  if ((unsigned __int16)v21 != (unsigned __int16)v358)
    v242 = 3;
  if (v239 != (unsigned __int16)v359)
    v241 = v242;
  v243 = v240
       + (((*(_DWORD *)(*(_QWORD *)(v238 + 25800) + 4 * (__int16)(v239 - v359))
                        + *(_DWORD *)(*(_QWORD *)(v238 + 25808) + 4 * (__int16)(v21 - v358))
                        + *(_DWORD *)(v357 + 4 * v241))
                       * a4
                       + 256) >> 9);
  v244 = v243 < (int)v33;
  if (v243 >= (int)v33)
    v33 = v33;
  else
    v33 = v243;
  v24 = v238;
  if (v244)
  {
    v221 = 3;
    v38 = v364;
  }
  else
  {
LABEL_421:
    v38 = v364;
LABEL_422:
    if (v221 == -1)
    {
      LODWORD(v67) = v213;
      v68 = a6;
      if (*a6 == 0x7FFFFFFF)
        goto LABEL_262;
      goto LABEL_255;
    }
  }
  v262 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 4 * v221);
  v263 = v213 + *v262;
  v264 = v21 + v262[1];
  while (2)
  {
    v269 = v221 - 1;
    if (!v221)
      v269 = 3;
    v365 = v269;
    v366 = v221;
    v270 = v221;
    v271 = v221 + 1;
    if (v221 == 3)
      LODWORD(v265) = 0;
    else
      LODWORD(v265) = v221 + 1;
    v367 = v265;
    *(_QWORD *)&v272 = 0x8000000080000000;
    *((_QWORD *)&v272 + 1) = 0x8000000080000000;
    *(_OWORD *)(a6 + 1) = v272;
    v273 = (v221 + 2) & 3;
    if (v221 + 2 <= 0)
      v273 = -(-(v221 + 2) & 3);
    a6[v273 + 1] = *a6;
    *a6 = v33;
    v274 = v38[226];
    v275 = v38[227];
    v276 = v38[224];
    v277 = v38[225];
    v278 = v269;
    v279 = (_WORD *)((char *)&bigdia_search_bigdia_candidates + 4 * v269);
    v280 = *v279 + v263;
    v281 = v264;
    v282 = v279[1] + v264;
    v344 = v263;
    if (v263 > v274 && v263 < v275 && v264 > v276 && v264 < v277)
    {
      v283 = v24;
      v284 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v280 + (uint64_t)(__int16)v282);
      a6[v278 + 1] = v284;
      if (v284 >= (int)v33)
      {
        v289 = -1;
      }
      else
      {
        v285 = 2;
        if (v282 != (unsigned __int16)v358)
          v285 = 3;
        if (v280 == (unsigned __int16)v359)
          v286 = v282 != (unsigned __int16)v358;
        else
          v286 = v285;
        v287 = v284
             + (((*(_DWORD *)(*(_QWORD *)(v283 + 25800) + 4 * (__int16)(v280 - v359))
                              + *(_DWORD *)(*(_QWORD *)(v283 + 25808) + 4 * (__int16)(v282 - v358))
                              + *(_DWORD *)(v357 + 4 * v286))
                             * a4
                             + 256) >> 9);
        v288 = v287 < (int)v33;
        if (v287 >= (int)v33)
          v33 = v33;
        else
          v33 = v287;
        if (v288)
          v289 = 0;
        else
          v289 = -1;
      }
      v293 = v283;
      v294 = (_WORD *)((char *)&bigdia_search_bigdia_candidates + 4 * v270);
      v295 = *v294 + v344;
      v296 = v294[1] + v281;
      v297 = v293;
      v298 = (*v361)(*(_QWORD *)(v293 + 8216), *(unsigned int *)(v293 + 8224), *(_QWORD *)(v293 + 24944) + *v364 * (__int16)v295 + (__int16)v296);
      a6[v271] = v298;
      if (v298 >= (int)v33)
      {
        v302 = v33;
      }
      else
      {
        v299 = 2;
        if (v296 != (unsigned __int16)v358)
          v299 = 3;
        if (v295 == (unsigned __int16)v359)
          v300 = v296 != (unsigned __int16)v358;
        else
          v300 = v299;
        v301 = v298
             + (((*(_DWORD *)(*(_QWORD *)(v297 + 25800) + 4 * (__int16)(v295 - v359))
                              + *(_DWORD *)(*(_QWORD *)(v297 + 25808) + 4 * (__int16)(v296 - v358))
                              + *(_DWORD *)(v357 + 4 * v300))
                             * a4
                             + 256) >> 9);
        if (v301 >= (int)v33)
          v302 = v33;
        else
          v302 = v301;
        if (v301 < (int)v33)
          v289 = 1;
      }
      v303 = v297;
      v304 = 4 * (int)v265;
      v267 = *(_WORD *)((char *)&bigdia_search_bigdia_candidates + v304);
      v268 = *(_WORD *)((char *)&bigdia_search_bigdia_candidates + v304 + 2);
      v305 = (*v361)(*(_QWORD *)(v303 + 8216), *(unsigned int *)(v303 + 8224), *(_QWORD *)(v303 + 24944) + *v364 * (__int16)(v267 + v344) + (__int16)(v268 + v281));
      a6[(unint64_t)v304 / 4 + 1] = v305;
      if (v305 < (int)v302)
      {
        v306 = 2;
        if ((unsigned __int16)(v268 + v281) != (unsigned __int16)v358)
          v306 = 3;
        if ((unsigned __int16)(v267 + v344) == (unsigned __int16)v359)
          v307 = (unsigned __int16)(v268 + v281) != (unsigned __int16)v358;
        else
          v307 = v306;
        v308 = *(_DWORD *)(v357 + 4 * v307);
        v309 = *(_DWORD *)(*(_QWORD *)(v303 + 25800) + 4 * (__int16)(v267 + v344 - v359));
        v310 = *(_DWORD *)(*(_QWORD *)(v303 + 25808) + 4 * (__int16)(v268 + v281 - v358));
        goto LABEL_482;
      }
LABEL_518:
      v24 = v303;
      goto LABEL_519;
    }
    if (v276 > (__int16)v282 || v277 < (__int16)v282 || v274 > (__int16)v280 || v275 < (__int16)v280)
    {
      a6[v278 + 1] = 0x7FFFFFFF;
      v289 = -1;
    }
    else
    {
      v313 = v24;
      v314 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + *v38 * (__int16)v280 + (uint64_t)(__int16)v282);
      a6[v278 + 1] = v314;
      if (v314 >= (int)v33)
      {
        v289 = -1;
      }
      else
      {
        v315 = 2;
        if (v282 != (unsigned __int16)v358)
          v315 = 3;
        if (v280 == (unsigned __int16)v359)
          v316 = v282 != (unsigned __int16)v358;
        else
          v316 = v315;
        v317 = v314
             + (((*(_DWORD *)(*(_QWORD *)(v313 + 25800) + 4 * (__int16)(v280 - v359))
                              + *(_DWORD *)(*(_QWORD *)(v313 + 25808) + 4 * (__int16)(v282 - v358))
                              + *(_DWORD *)(v357 + 4 * v316))
                             * a4
                             + 256) >> 9);
        v318 = v317 < (int)v33;
        if (v317 >= (int)v33)
          v33 = v33;
        else
          v33 = v317;
        if (v318)
          v289 = 0;
        else
          v289 = -1;
      }
      v24 = v313;
      v38 = v364;
    }
    v319 = (_WORD *)((char *)&bigdia_search_bigdia_candidates + 4 * v270);
    v320 = (__int16)(v319[1] + v281);
    if (v38[224] <= v320
      && v38[225] >= v320
      && (v321 = *v319 + v344, v38[226] <= (__int16)v321)
      && v38[227] >= (__int16)v321)
    {
      v327 = v24;
      v328 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v320 + *v38 * (__int16)v321);
      a6[(int)v271] = v328;
      if (v328 < (int)v33)
      {
        v329 = 2;
        if (v320 != v358)
          v329 = 3;
        if (v321 == (unsigned __int16)v359)
          v330 = v320 != v358;
        else
          v330 = v329;
        v331 = v328
             + (((*(_DWORD *)(*(_QWORD *)(v327 + 25800) + 4 * (__int16)(v321 - v359))
                              + *(_DWORD *)(*(_QWORD *)(v327 + 25808) + 4 * (__int16)(v320 - v358))
                              + *(_DWORD *)(v357 + 4 * v330))
                             * a4
                             + 256) >> 9);
        v332 = v331 < (int)v33;
        if (v331 >= (int)v33)
          v33 = v33;
        else
          v33 = v331;
        if (v332)
          v289 = 1;
      }
      v24 = v327;
      v38 = v364;
    }
    else
    {
      a6[(int)v271] = 0x7FFFFFFF;
    }
    v322 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 4 * (int)v265);
    v268 = v322[1];
    v323 = (__int16)(v268 + v281);
    if (v38[224] > v323
      || v38[225] < v323
      || (v267 = *v322, v324 = *v322 + v344, v38[226] > (__int16)v324)
      || v38[227] < (__int16)v324)
    {
      a6[(int)v265 + 1] = 0x7FFFFFFF;
      if (v289 == -1)
        break;
      goto LABEL_425;
    }
    v302 = v33;
    v303 = v24;
    v305 = (*v361)(*(_QWORD *)(v24 + 8216), *(unsigned int *)(v24 + 8224), *(_QWORD *)(v24 + 24944) + v323 + *v38 * (__int16)v324);
    a6[(int)v265 + 1] = v305;
    if (v305 >= (int)v302)
      goto LABEL_518;
    v325 = 2;
    if (v323 != v358)
      v325 = 3;
    if (v324 == (unsigned __int16)v359)
      v326 = v323 != v358;
    else
      v326 = v325;
    v308 = *(_DWORD *)(v357 + 4 * v326);
    v309 = *(_DWORD *)(*(_QWORD *)(v303 + 25800) + 4 * (__int16)(v324 - v359));
    v310 = *(_DWORD *)(*(_QWORD *)(v303 + 25808) + 4 * (__int16)(v323 - v358));
LABEL_482:
    v311 = v305 + (((v309 + v310 + v308) * a4 + 256) >> 9);
    v312 = v311 < (int)v302;
    if (v311 >= (int)v302)
      v302 = v302;
    else
      v302 = v311;
    v24 = v303;
    if (v312)
    {
      v38 = v364;
      v33 = v302;
      goto LABEL_426;
    }
LABEL_519:
    v38 = v364;
    v33 = v302;
    if (v289 != -1)
    {
LABEL_425:
      v265 = *(&v365 + v289);
      v266 = (__int16 *)((char *)&bigdia_search_bigdia_candidates + 4 * v265);
      v267 = *v266;
      v268 = v266[1];
LABEL_426:
      v263 = v344 + v267;
      v221 = v265;
      v264 = v281 + v268;
      continue;
    }
    break;
  }
  LODWORD(v67) = v344;
  LODWORD(v21) = v281;
  v68 = a6;
  if (*a6 == 0x7FFFFFFF)
    goto LABEL_262;
LABEL_255:
  v177 = v68[1];
  if (v177 == 0x7FFFFFFF)
  {
    v178 = v68[2];
    v179 = a10;
    if (v178 == 0x7FFFFFFF)
      goto LABEL_257;
LABEL_273:
    v193 = (unsigned __int16)v21 != (unsigned __int16)v358;
    v194 = 2;
    if ((unsigned __int16)v21 != (unsigned __int16)v358)
      v194 = 3;
    if ((unsigned __int16)(v67 + 1) != (unsigned __int16)v359)
      v193 = v194;
    v68[2] = v178
           + (((*(_DWORD *)(*(_QWORD *)(v24 + 25800) + 4 * (__int16)(v67 + 1 - v359))
                            + *(_DWORD *)(*(_QWORD *)(v24 + 25808) + 4 * (__int16)(v21 - v358))
                            + *(_DWORD *)(v357 + 4 * v193))
                           * a4
                           + 256) >> 9);
    v180 = v68[3];
    if (v180 != 0x7FFFFFFF)
      goto LABEL_278;
LABEL_258:
    v181 = v68[4];
    if (v181 == 0x7FFFFFFF)
      goto LABEL_379;
LABEL_284:
    v199 = (unsigned __int16)v21 != (unsigned __int16)v358;
    v200 = 2;
    if ((unsigned __int16)v21 != (unsigned __int16)v358)
      v200 = 3;
    if ((unsigned __int16)(v67 - 1) != (unsigned __int16)v359)
      v199 = v200;
    v68[4] = v181
           + (((*(_DWORD *)(*(_QWORD *)(v24 + 25800) + 4 * (__int16)(v67 - 1 - v359))
                            + *(_DWORD *)(*(_QWORD *)(v24 + 25808) + 4 * (__int16)(v21 - v358))
                            + *(_DWORD *)(v357 + 4 * v199))
                           * a4
                           + 256) >> 9);
    goto LABEL_379;
  }
  v189 = (unsigned __int16)(v21 - 1);
  v29 = v189 == (unsigned __int16)v358;
  v190 = v189 != (unsigned __int16)v358;
  v191 = 2;
  if (!v29)
    v191 = 3;
  if ((unsigned __int16)v67 == (unsigned __int16)v359)
    v192 = v190;
  else
    v192 = v191;
  v68[1] = v177
         + (((*(_DWORD *)(*(_QWORD *)(v24 + 25800) + 4 * (__int16)(v67 - v359))
                          + *(_DWORD *)(*(_QWORD *)(v24 + 25808) + 4 * (__int16)(v21 - 1 - v358))
                          + *(_DWORD *)(v357 + 4 * v192))
                         * a4
                         + 256) >> 9);
  v178 = v68[2];
  v179 = a10;
  if (v178 != 0x7FFFFFFF)
    goto LABEL_273;
LABEL_257:
  v180 = v68[3];
  if (v180 == 0x7FFFFFFF)
    goto LABEL_258;
LABEL_278:
  v195 = (unsigned __int16)(v21 + 1);
  v29 = v195 == (unsigned __int16)v358;
  v196 = v195 != (unsigned __int16)v358;
  v197 = 2;
  if (!v29)
    v197 = 3;
  if ((unsigned __int16)v67 == (unsigned __int16)v359)
    v198 = v196;
  else
    v198 = v197;
  v68[3] = v180
         + (((*(_DWORD *)(*(_QWORD *)(v24 + 25800) + 4 * (__int16)(v67 - v359))
                          + *(_DWORD *)(*(_QWORD *)(v24 + 25808) + 4 * (__int16)(v21 + 1 - v358))
                          + *(_DWORD *)(v357 + 4 * v198))
                         * a4
                         + 256) >> 9);
  v181 = v68[4];
  if (v181 != 0x7FFFFFFF)
    goto LABEL_284;
LABEL_379:
  *v179 = v67;
  v179[1] = v21;
  return v33;
}

uint64_t full_pixel_diamond(uint64_t a1, uint64_t a2, unsigned int a3, __int16 *a4, unsigned int a5, unsigned int a6, int a7, unsigned int a8, int a9, _DWORD *a10, uint64_t a11, __int16 *a12, unsigned __int16 *a13)
{
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  void (*v38)(_QWORD, _QWORD, _QWORD *);
  uint64_t v39;
  int v40;
  void (*v41)(_QWORD, _QWORD, _QWORD *);
  int v42;
  __int16 v43;
  __int16 v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  _BOOL8 v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  int v54;
  __int16 v55;
  __int16 v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  unint64_t v67;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  _BOOL8 v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  BOOL v85;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  unsigned int v92;
  unsigned int v93;
  __int16 v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  _BOOL8 v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  _BOOL8 v102;
  unsigned int v103;
  BOOL v104;
  __int16 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int16 v109;
  int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _BOOL8 v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  _BOOL8 v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  uint64_t v123;
  _BOOL8 v124;
  unsigned int v125;
  _WORD *v126;
  unsigned int v127;
  uint64_t v128;
  int v129;
  int v130;
  _BOOL8 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v149;
  int v150;
  __int16 *v151;
  unsigned __int16 v154;
  int v155;
  uint64_t v156;
  uint64_t (*v158)(_QWORD, _QWORD, uint64_t);
  void (*v159)(_QWORD, _QWORD, _QWORD *);
  int v160;
  uint64_t v161;
  _QWORD v162[4];
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  uint64_t v167;

  v167 = *MEMORY[0x24BDAC8D0];
  v15 = (int *)(a2 + 24952);
  v161 = 0;
  v160 = 0;
  v16 = *(int *)(a2 + 8224);
  v17 = *(_QWORD *)(a2 + 8216);
  v18 = *(int *)(a2 + 24952);
  v155 = *a12 >> 3;
  v19 = a12[1] >> 3;
  v20 = *(_DWORD *)(a2 + 25848);
  v21 = *(_DWORD *)(a2 + 25852);
  v22 = *(_DWORD *)(a2 + 25856);
  v23 = *(_DWORD *)(a2 + 25860);
  v24 = a4[1];
  if (v24 < v21)
    LOWORD(v21) = a4[1];
  if (v20 <= v24)
    LOWORD(v20) = v21;
  a4[1] = v20;
  v25 = *a4;
  if (v25 < v23)
    LOWORD(v23) = *a4;
  if (v22 <= v25)
    v26 = v23;
  else
    v26 = v22;
  *a4 = v26;
  v27 = *(_QWORD *)(a2 + 24944) + v26 * (int)v18 + (__int16)v20;
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 8))(v17, v16, v27, v18);
  v143 = v17;
  v144 = v18;
  v145 = v16;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 8))(v17 + v16, v16, v27 + v18, v18);
  v30 = (unsigned __int16)*a4;
  v151 = a4;
  v31 = (unsigned __int16)a4[1];
  v32 = v30 - v155;
  v33 = v31 - v19;
  v104 = v31 == (unsigned __int16)v19;
  v34 = v31 != (unsigned __int16)v19;
  v35 = 2;
  if (!v104)
    v35 = 3;
  if (v30 == (unsigned __int16)v155)
    v36 = v34;
  else
    v36 = v35;
  v156 = a2 + 25784;
  v37 = *(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * v32)
      + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * v33)
      + *(_DWORD *)(a2 + 25784 + 4 * v36);
  v38 = *(void (**)(_QWORD, _QWORD, _QWORD *))(a11 + 48);
  v39 = ((v37 * a6 + 256) >> 9) + ((v29 + v28) >> 1);
  v158 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))a11;
  v159 = v38;
  if ((a3 & 0xFFFFFFFD) != 0 && a9)
  {
    v40 = v28 - v29;
    if (v28 - v29 < 0)
      v40 = v29 - v28;
    if (10 * v40 < v28)
    {
      v41 = *(void (**)(_QWORD, _QWORD, _QWORD *))(a11 + 56);
      v158 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a11 + 8);
      v159 = v41;
    }
  }
  v150 = 0x7FFFFFFF;
  v42 = a7;
  if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *, uint64_t, char *, _QWORD, _QWORD, uint64_t *, uint64_t (**)(_QWORD, _QWORD, uint64_t), __int16 *))(a1 + 740456))(a2, a1 + 835464, a4, v39, (char *)&v161 + 4, a5, a6, &v161, &v158, a12) != 0x7FFFFFFF)
  {
    v43 = WORD2(v161);
    v44 = HIWORD(v161);
    LODWORD(v162[0]) = 0;
    v45 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a11 + 24))(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + SHIWORD(v161) + *v15 * SWORD2(v161));
    v46 = *(_QWORD *)(a2 + 25776);
    if (v46)
    {
      v47 = (unsigned __int16)*a12;
      v48 = (unsigned __int16)a12[1];
      v49 = (unsigned __int16)(8 * v44) != v48;
      v50 = 2;
      if ((unsigned __int16)(8 * v44) != v48)
        v50 = 3;
      if ((unsigned __int16)(8 * v43) != v47)
        v49 = v50;
      v46 = (((v15[167]
             * (*(int *)(*(_QWORD *)v46 + 4 * (__int16)(8 * v43 - v47))
              + (uint64_t)*(int *)(*(_QWORD *)(v46 + 8) + 4 * (__int16)(8 * v44 - v48))
              + *(int *)(a2 + 4 * v49 + 25724))) << 18)
           + 0x80000000) >> 32;
    }
    v51 = v46 + v45;
    if (v51 > 0x7FFFFFFE)
      LODWORD(v51) = 0x7FFFFFFF;
    v150 = v51;
  }
  *(_DWORD *)a13 = HIDWORD(v161);
  v52 = v161;
  if ((int)v161 <= a7)
    v53 = a8;
  else
    v53 = 0;
  if ((int)v161 < a7)
  {
    v54 = 0;
    do
    {
      LODWORD(v161) = ++v52;
      if (v54)
      {
        v160 = --v54;
      }
      else if ((*(unsigned int (**)(uint64_t, uint64_t, __int16 *, uint64_t, char *, _QWORD, _QWORD, int *, uint64_t (**)(_QWORD, _QWORD, uint64_t), __int16 *))(a1 + 740456))(a2, a1 + 835464, a4, v39, (char *)&v161 + 4, v52 + a5, a6, &v160, &v158, a12) == 0x7FFFFFFF)
      {
        v54 = v160;
        v52 = v161;
        if (v160 > v42 - (int)v161)
          v53 = 0;
      }
      else
      {
        v55 = WORD2(v161);
        v56 = HIWORD(v161);
        LODWORD(v162[0]) = 0;
        v57 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a11 + 24))(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + SHIWORD(v161) + *v15 * SWORD2(v161));
        v58 = *(_QWORD *)(a2 + 25776);
        if (v58)
        {
          v59 = (unsigned __int16)(8 * v56);
          v60 = (unsigned __int16)*a12;
          v61 = (unsigned __int16)a12[1];
          v62 = 8 * v56 - v61;
          v64 = *(_QWORD *)v58;
          v63 = *(_QWORD *)(v58 + 8);
          v104 = v59 == v61;
          v65 = v59 != v61;
          v66 = 2;
          if (!v104)
            v66 = 3;
          if ((unsigned __int16)(8 * v55) != v60)
            v65 = v66;
          v58 = (((v15[167]
                 * (*(int *)(v64 + 4 * (__int16)(8 * v55 - v60))
                  + (uint64_t)*(int *)(v63 + 4 * v62)
                  + *(int *)(a2 + 25724 + 4 * v65))) << 18)
               + 0x80000000) >> 32;
        }
        v67 = v58 + v57;
        v54 = v160;
        v52 = v161;
        v42 = a7;
        if (v160 > a7 - (int)v161)
          v53 = 0;
        if (v67 <= 0x7FFFFFFE && v150 > (int)v67)
        {
          *(_DWORD *)a13 = HIDWORD(v161);
          v150 = v67;
        }
      }
    }
    while (v52 < v42);
  }
  v142 = v53;
  if (v53)
  {
    v69 = *(_DWORD *)a13;
    v70 = (unsigned __int16)*(_DWORD *)a13;
    v71 = HIWORD(*(_DWORD *)a13);
    v72 = *a12 >> 3;
    v73 = a12[1] >> 3;
    v74 = *(_QWORD *)(a2 + 24944) + *v15 * (__int16)v69 + (v69 >> 16);
    v75 = v158(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), v74);
    v76 = v71 != (unsigned __int16)v73;
    v77 = 2;
    if (v71 != (unsigned __int16)v73)
      v77 = 3;
    v154 = v72;
    if (v70 != (unsigned __int16)v72)
      v76 = v77;
    v78 = v75
        + (((*(_DWORD *)(v156 + 4 * v76)
           + *(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v72))
           + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v73)))
          * a6
          + 256) >> 9);
    v79 = 8;
    v149 = v73;
    while (1)
    {
      v80 = v15[226];
      v81 = v15[227];
      v82 = v15[224];
      v83 = v15[225];
      v84 = (__int16)v71 + 1 >= v83 || (__int16)v69 - 1 <= v80;
      v85 = !v84 && (__int16)v69 + 1 < v81;
      if (v85 && (__int16)v71 - 1 > v82)
        break;
      if (v82 > (__int16)v71 || v83 < (__int16)v71)
      {
        v88 = -1;
      }
      else
      {
        v94 = v69 - 1;
        v95 = (__int16)(v69 - 1);
        v88 = -1;
        if (v80 <= v95 && v81 >= v95)
        {
          v96 = v158(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + *v15 * v95 + (uint64_t)(__int16)v71);
          if (v96 < v78)
          {
            v97 = 2;
            if ((unsigned __int16)v71 != (unsigned __int16)v149)
              v97 = 3;
            if ((unsigned __int16)(v69 - 1) == v154)
              v98 = (unsigned __int16)v71 != (unsigned __int16)v149;
            else
              v98 = v97;
            if (v96
               + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v94 - v154))
                  + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v149))
                  + *(_DWORD *)(v156 + 4 * v98))
                 * a6
                 + 256) >> 9) >= v78)
            {
              v88 = -1;
            }
            else
            {
              v78 = v96
                  + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v94 - v154))
                     + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v149))
                     + *(_DWORD *)(v156 + 4 * v98))
                    * a6
                    + 256) >> 9);
              v88 = 0;
            }
          }
        }
      }
      v99 = (__int16)(v71 - 1);
      if (v15[224] <= v99 && v15[225] >= v99 && v15[226] <= (__int16)v69 && v15[227] >= (__int16)v69)
      {
        v100 = v158(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + v99 + *v15 * (__int16)v69);
        if (v100 < v78)
        {
          v101 = 2;
          if (v99 != v149)
            v101 = 3;
          if ((unsigned __int16)v69 == v154)
            v102 = v99 != v149;
          else
            v102 = v101;
          if (v100
             + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
                + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v99 - v149))
                + *(_DWORD *)(v156 + 4 * v102))
               * a6
               + 256) >> 9) < v78)
          {
            v78 = v100
                + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
                   + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v99 - v149))
                   + *(_DWORD *)(v156 + 4 * v102))
                  * a6
                  + 256) >> 9);
            v88 = 1;
          }
        }
      }
      v73 = (__int16)(v71 + 1);
      if (v15[224] > v73
        || v15[225] < v73
        || v15[226] > (__int16)v69
        || v15[227] < (__int16)v69
        || (v103 = v158(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + v73 + *v15 * (__int16)v69), v103 >= v78))
      {
        LOWORD(v73) = v149;
        if (v15[224] > (__int16)v71)
          goto LABEL_168;
      }
      else
      {
        v105 = v73 - v149;
        v104 = v73 == v149;
        LOWORD(v73) = v149;
        v106 = !v104;
        if (v104)
          v107 = 2;
        else
          v107 = 3;
        if ((unsigned __int16)v69 == v154)
          v108 = v106;
        else
          v108 = v107;
        if (v103
           + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
              + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * v105)
              + *(_DWORD *)(v156 + 4 * v108))
             * a6
             + 256) >> 9) < v78)
        {
          v78 = v103
              + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
                 + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * v105)
                 + *(_DWORD *)(v156 + 4 * v108))
                * a6
                + 256) >> 9);
          v88 = 2;
        }
        if (v15[224] > (__int16)v71)
          goto LABEL_168;
      }
      if (v15[225] < (__int16)v71)
        goto LABEL_168;
      v109 = v69 + 1;
      v110 = (__int16)(v69 + 1);
      if (v15[226] > v110)
        goto LABEL_168;
      if (v15[227] < v110)
        goto LABEL_168;
      v111 = v158(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + *v15 * v110 + (uint64_t)(__int16)v71);
      if (v111 >= v78)
        goto LABEL_168;
      v112 = 2;
      if ((unsigned __int16)v71 != (unsigned __int16)v73)
        v112 = 3;
      v113 = (unsigned __int16)(v69 + 1) == v154 ? (unsigned __int16)v71 != (unsigned __int16)v73 : v112;
      if (v111
         + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v109 - v154))
            + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v73))
            + *(_DWORD *)(v156 + 4 * v113))
           * a6
           + 256) >> 9) >= v78)
        goto LABEL_168;
      v78 = v111
          + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v109 - v154))
             + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v73))
             + *(_DWORD *)(v156 + 4 * v113))
            * a6
            + 256) >> 9);
      v88 = 3;
LABEL_169:
      v126 = (_WORD *)((char *)&unk_208F3D6E0 + 4 * v88);
      LOWORD(v69) = *v126 + v69;
      LOWORD(v71) = v126[1] + v71;
      v74 = *(_QWORD *)(a2 + 24944) + *v15 * (__int16)v69 + (__int16)v71;
      if (!--v79)
      {
LABEL_170:
        if (v78 != 0x7FFFFFFF)
        {
          LODWORD(v162[0]) = 0;
          v127 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a11 + 24))(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + *v15 * (__int16)v69 + (__int16)v71);
          v128 = *(_QWORD *)(a2 + 25776);
          if (v128)
          {
            v129 = (unsigned __int16)*a12;
            v130 = (unsigned __int16)a12[1];
            v131 = (unsigned __int16)(8 * v71) != v130;
            v132 = 2;
            if ((unsigned __int16)(8 * v71) != v130)
              v132 = 3;
            if ((unsigned __int16)(8 * v69) != v129)
              v131 = v132;
            v128 = (((v15[167]
                    * (*(int *)(*(_QWORD *)v128 + 4 * (__int16)(8 * v69 - v129))
                     + (uint64_t)*(int *)(*(_QWORD *)(v128 + 8) + 4 * (__int16)(8 * v71 - v130))
                     + *(int *)(a2 + 4 * v131 + 25724))) << 18)
                  + 0x80000000) >> 32;
          }
          v133 = v128 + v127;
          if (v133 <= 0x7FFFFFFE && v150 > (int)v133)
          {
            *(_DWORD *)a13 = (unsigned __int16)v69 | ((unsigned __int16)v71 << 16);
            v150 = v133;
          }
        }
        goto LABEL_182;
      }
    }
    v89 = *v15;
    v162[0] = v74 - v89;
    v162[1] = v74 - 1;
    v162[2] = v74 + 1;
    v162[3] = v74 + v89;
    v159(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), v162);
    if (v163 >= v78)
    {
      v88 = -1;
      v93 = v164;
      if (v164 >= v78)
        goto LABEL_150;
    }
    else
    {
      v90 = 2;
      if ((unsigned __int16)v71 != (unsigned __int16)v73)
        v90 = 3;
      if ((unsigned __int16)(v69 - 1) == v154)
        v91 = (unsigned __int16)v71 != (unsigned __int16)v73;
      else
        v91 = v90;
      v92 = v163
          + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - 1 - v154))
             + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v73))
             + *(_DWORD *)(v156 + 4 * v91))
            * a6
            + 256) >> 9);
      v163 = v92;
      if (v92 >= v78)
      {
        v88 = -1;
      }
      else
      {
        v78 = v92;
        v88 = 0;
      }
      v93 = v164;
      if (v164 >= v78)
      {
LABEL_150:
        if (v165 >= v78)
        {
          v122 = v166;
          if (v166 >= v78)
            goto LABEL_168;
        }
        else
        {
          v118 = (unsigned __int16)(v71 + 1);
          v104 = v118 == (unsigned __int16)v73;
          v119 = v118 != (unsigned __int16)v73;
          if (v104)
            v120 = 2;
          else
            v120 = 3;
          if ((unsigned __int16)v69 != v154)
            v119 = v120;
          v121 = v165
               + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
                  + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 + 1 - v73))
                  + *(_DWORD *)(v156 + 4 * v119))
                 * a6
                 + 256) >> 9);
          v165 = v121;
          if (v121 < v78)
          {
            v78 = v121;
            v88 = 2;
          }
          v122 = v166;
          if (v166 >= v78)
          {
LABEL_168:
            if (v88 == -1)
              goto LABEL_170;
            goto LABEL_169;
          }
        }
        v123 = 2;
        if ((unsigned __int16)v71 != (unsigned __int16)v73)
          v123 = 3;
        if ((unsigned __int16)(v69 + 1) == v154)
          v124 = (unsigned __int16)v71 != (unsigned __int16)v73;
        else
          v124 = v123;
        v125 = v122
             + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 + 1 - v154))
                + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - v73))
                + *(_DWORD *)(v156 + 4 * v124))
               * a6
               + 256) >> 9);
        if (v125 < v78)
        {
          v78 = v125;
          v88 = 3;
        }
        goto LABEL_168;
      }
    }
    v114 = (unsigned __int16)(v71 - 1);
    v104 = v114 == (unsigned __int16)v73;
    v115 = v114 != (unsigned __int16)v73;
    v116 = 2;
    if (!v104)
      v116 = 3;
    if ((unsigned __int16)v69 != v154)
      v115 = v116;
    v117 = v93
         + (((*(_DWORD *)(*(_QWORD *)(a2 + 25800) + 4 * (__int16)(v69 - v154))
            + *(_DWORD *)(*(_QWORD *)(a2 + 25808) + 4 * (__int16)(v71 - 1 - v73))
            + *(_DWORD *)(v156 + 4 * v115))
           * a6
           + 256) >> 9);
    v164 = v117;
    if (v117 < v78)
    {
      v78 = v117;
      v88 = 1;
    }
    goto LABEL_150;
  }
LABEL_182:
  if (v158 == *(uint64_t (**)(_QWORD, _QWORD, uint64_t))a11)
    goto LABEL_190;
  v135 = *(_QWORD *)(a2 + 24944) + (__int16)a13[1] + *v15 * (uint64_t)(__int16)*a13;
  v136 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))a11)(v143, v145, v135, v144);
  v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a11 + 8))(v143, v145, v135, v144);
  if (v136 <= 1 << (b_height_log2_lookup[a3] + b_width_log2_lookup[a3]))
    goto LABEL_190;
  v138 = v137 - v136;
  if (v137 - v136 < 0)
    v138 = v136 - v137;
  v139 = 10 * v138;
  v140 = v136 <= 1 ? 1 : v136;
  if (v139 < 9 * v140)
  {
LABEL_190:
    if (a10)
      calc_int_cost_list(a2, *a12, a12[1], a6, a11, *a13, a13[1], a10);
  }
  else
  {
    return full_pixel_diamond(a1, a2, a3, v151, a5, a6, a7, v142, 0, a10, a11, a12, a13);
  }
  return v150;
}

uint64_t vp9_return_max_sub_pixel_mv(uint64_t a1, __int16 *a2, __int16 *a3, int a4)
{
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v13;
  __int16 v14;

  v4 = a3[1] + 8184;
  if (8 * *(_DWORD *)(a1 + 25852) < v4)
    v4 = 8 * *(_DWORD *)(a1 + 25852);
  v5 = *a3 + 8184;
  if (8 * *(_DWORD *)(a1 + 25860) < v5)
    v5 = 8 * *(_DWORD *)(a1 + 25860);
  if (v4 >= 16382)
    v6 = 16382;
  else
    v6 = v4;
  if (v5 >= 16382)
    v7 = 16382;
  else
    v7 = v5;
  *a2 = v7;
  a2[1] = v6;
  if (a4)
  {
    v8 = *a3;
    if (v8 < 0)
      v8 = -v8;
    if ((unsigned __int16)v8 <= 0x3Fu)
    {
      LOWORD(v9) = v6;
      LOWORD(v10) = v7;
      v11 = a3[1];
      if (v11 < 0)
        v11 = -v11;
      if (v7 < 0)
        v10 = -v7;
      if (v6 < 0)
        v9 = -v6;
      if ((unsigned __int16)v11 <= 0x3Fu && (unsigned __int16)v10 <= 0x3Fu && (unsigned __int16)v9 < 0x40u)
        return 0;
    }
  }
  if ((v7 & 1) != 0)
  {
    if (v7 < 1)
      v13 = v7 + 1;
    else
      v13 = v7 - 1;
    *a2 = v13;
  }
  if ((v6 & 1) == 0)
    return 0;
  if (v6 < 1)
    v14 = v6 + 1;
  else
    v14 = v6 - 1;
  a2[1] = v14;
  return 0;
}

uint64_t vp9_return_min_sub_pixel_mv(uint64_t a1, __int16 *a2, __int16 *a3, int a4)
{
  int v4;
  int v5;
  __int16 v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v13;
  __int16 v14;

  v4 = 8 * *(_DWORD *)(a1 + 25848);
  if (v4 <= a3[1] - 8184)
    v4 = a3[1] - 8184;
  v5 = *a3 - 8184;
  if (8 * *(_DWORD *)(a1 + 25856) > v5)
    v5 = 8 * *(_DWORD *)(a1 + 25856);
  if (v4 <= -16383)
    v6 = -16383;
  else
    v6 = v4;
  if (v5 <= -16383)
    v7 = -16383;
  else
    v7 = v5;
  *a2 = v7;
  a2[1] = v6;
  if (a4)
  {
    v8 = *a3;
    if (v8 < 0)
      v8 = -v8;
    if ((unsigned __int16)v8 <= 0x3Fu)
    {
      LOWORD(v9) = v6;
      LOWORD(v10) = v7;
      v11 = a3[1];
      if (v11 < 0)
        v11 = -v11;
      if (v7 < 0)
        v10 = -v7;
      if (v6 < 0)
        v9 = -v6;
      if ((unsigned __int16)v11 <= 0x3Fu && (unsigned __int16)v10 <= 0x3Fu && (unsigned __int16)v9 < 0x40u)
        return 0;
    }
  }
  if ((v7 & 1) != 0)
  {
    if (v7 < 1)
      v13 = v7 + 1;
    else
      v13 = v7 - 1;
    *a2 = v13;
  }
  if ((v6 & 1) == 0)
    return 0;
  if (v6 < 1)
    v14 = v6 + 1;
  else
    v14 = v6 - 1;
  a2[1] = v14;
  return 0;
}

uint64_t vp9_pattern_search(uint64_t a1, unsigned __int16 *a2, int a3, int a4, int a5, _DWORD *a6, uint64_t (**a7)(_QWORD, _QWORD, uint64_t), __int16 a8, __int16 a9, _WORD *a10, uint64_t a11, uint64_t a12)
{
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  signed __int16 v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  BOOL v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  BOOL v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  int v52;
  int v53;
  uint64_t v54;
  _BOOL8 v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  __int16 v60;
  unsigned __int16 v61;
  int v62;
  int v63;
  uint64_t v64;
  _BOOL8 v65;
  int v66;
  BOOL v67;
  int v68;
  uint64_t v69;
  __int16 *v70;
  _WORD *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v79;
  int v80;
  __int16 v81;
  int v82;
  int v83;
  uint64_t v84;
  _BOOL8 v85;
  int v86;
  BOOL v87;
  int v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  __int16 v92;
  unsigned __int16 v93;
  int v94;
  int v95;
  uint64_t v96;
  _BOOL8 v97;
  int v98;
  BOOL v99;
  int v100;
  __int16 *v101;
  uint64_t v102;
  __int16 *v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _WORD *v112;
  __int16 v113;
  unsigned __int16 v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  _BOOL8 v119;
  int v120;
  BOOL v121;
  int v122;
  BOOL v123;
  BOOL v124;
  uint64_t v125;
  _WORD *v126;
  uint64_t v127;
  __int16 v128;
  unsigned __int16 v129;
  int v130;
  uint64_t v131;
  _BOOL8 v132;
  int v133;
  BOOL v134;
  _WORD *v135;
  __int16 v136;
  unsigned __int16 v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  _BOOL8 v145;
  int v146;
  uint64_t v147;
  _WORD *v148;
  int v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  _BOOL8 v156;
  int v157;
  _WORD *v158;
  int v159;
  __int16 v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  _BOOL8 v164;
  int v165;
  BOOL v166;
  uint64_t v167;
  uint64_t v170;
  int v171;
  _WORD *v172;
  int v173;
  uint64_t v174;
  unsigned int v175;
  _WORD *v176;
  signed __int16 v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  uint64_t v186;
  signed int v187;
  signed int v188;
  int v189;
  int v190;
  _DWORD v192[3];
  uint64_t v193;

  v193 = *MEMORY[0x24BDAC8D0];
  v16 = (_DWORD *)(a1 + 24952);
  v17 = a8 >> 3;
  v18 = a9 >> 3;
  v19 = (int)vp9_pattern_search_sad_search_param_to_steps[a3];
  v20 = *(_DWORD *)(a1 + 25852);
  v21 = *(_DWORD *)(a1 + 25856);
  v22 = *(_DWORD *)(a1 + 25860);
  v23 = (__int16)a2[1];
  if (v23 < v20)
    LOWORD(v20) = a2[1];
  if (*(_DWORD *)(a1 + 25848) <= v23)
    LOWORD(v24) = v20;
  else
    v24 = *(_DWORD *)(a1 + 25848);
  a2[1] = v24;
  v25 = (__int16)*a2;
  if (v25 >= v22)
    v26 = v22;
  else
    v26 = *a2;
  if (v21 <= v25)
    v27 = v26;
  else
    v27 = v21;
  *a2 = v27;
  v177 = v27;
  v185 = v24;
  v28 = (__int16)v24;
  v175 = v27;
  v29 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + (int)v28 + *v16 * v27);
  v30 = *a2;
  v31 = a2[1];
  v32 = v30 - v17;
  v33 = v31 - v18;
  v182 = a9 >> 3;
  v183 = v17;
  v34 = v31 == (unsigned __int16)v18;
  v35 = v31 != (unsigned __int16)v18;
  v36 = 2;
  if (!v34)
    v36 = 3;
  if (v30 == (unsigned __int16)v17)
    v37 = v35;
  else
    v37 = v36;
  v181 = a1 + 25784;
  v184 = a4;
  v38 = v29
      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v32)
                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v33)
                       + *(_DWORD *)(a1 + 25784 + 4 * v37))
                      * a4
                      + 256) >> 9);
  v171 = a5;
  if (!a5)
  {
    v69 = v19;
    v42 = -1;
    v43 = a12;
    v44 = v175;
LABEL_70:
    v71 = (_WORD *)(v43 + 32 * v69 + 2);
    v174 = v69;
    v72 = v69;
    while (1)
    {
      v73 = v72;
      v74 = 1 << v72;
      v186 = v72;
      v180 = 1 << v72;
      if (v171 && v72 == v174)
      {
        v176 = v71;
        goto LABEL_125;
      }
      v188 = v38;
      v75 = *(_DWORD *)(a11 + 4 * v72);
      if ((int)v44 - v74 >= v16[226]
        && v74 + (int)v44 <= v16[227]
        && (int)v28 - v74 >= v16[224]
        && (int)v28 + v74 <= v16[225])
      {
        if (v75 < 1)
          goto LABEL_232;
        v89 = v71;
        v90 = 0;
        v178 = -1;
        v176 = v89;
        do
        {
          v91 = v44;
          v92 = *(v89 - 1) + v44;
          v93 = *v89 + v28;
          v94 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v92 + (__int16)v93);
          v95 = v188;
          if (v94 < v188)
          {
            v96 = 2;
            if (v93 != (unsigned __int16)v182)
              v96 = 3;
            if (v92 == v183)
              v97 = v93 != (unsigned __int16)v182;
            else
              v97 = v96;
            v98 = v94
                + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v92 - v183))
                                 + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v93 - v182))
                                 + *(_DWORD *)(v181 + 4 * v97))
                                * v184
                                + 256) >> 9);
            v99 = v98 < v188;
            if (v98 < v188)
              v95 = v94
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v92 - v183))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v93 - v182))
                                   + *(_DWORD *)(v181 + 4 * v97))
                                  * v184
                                  + 256) >> 9);
            v188 = v95;
            v100 = v178;
            if (v99)
              v100 = v90;
            v178 = v100;
          }
          v89 += 2;
          ++v90;
          v73 = v186;
          v44 = v91;
          v74 = v180;
        }
        while (v90 < *(int *)(a11 + 4 * v186));
LABEL_120:
        if (v178 != -1)
        {
          v101 = (__int16 *)(v43 + 32 * v73 + 4 * v178);
          v44 = (v44 + *v101);
          v28 = (v28 + v101[1]);
          v42 = v178;
          v38 = v188;
          while (1)
          {
LABEL_125:
            v104 = *(_DWORD *)(a11 + 4 * v73);
            if (v42)
              v105 = v42;
            else
              v105 = *(_DWORD *)(a11 + 4 * v73);
            v106 = v105 - 1;
            v192[0] = v105 - 1;
            v192[1] = v42;
            if (v42 == v104 - 1)
              v107 = 0;
            else
              v107 = v42 + 1;
            v192[2] = v107;
            v108 = v16[226];
            v109 = v16[227];
            v110 = v16[224];
            v111 = v16[225];
            v112 = (_WORD *)(v43 + 32 * v73 + 4 * v106);
            v113 = *v112 + v44;
            v114 = v112[1] + v28;
            if ((int)v44 - v74 < v108 || (int)v44 + v74 > v109 || (int)v28 - v74 < v110 || (int)v28 + v74 > v111)
            {
              v123 = v110 > (__int16)v114 || v111 < (__int16)v114;
              if (v123 || (v108 <= v113 ? (v124 = v109 < v113) : (v124 = 1), v124))
              {
                v122 = -1;
              }
              else
              {
                v142 = v38;
                v143 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v113 + (uint64_t)(__int16)v114);
                v38 = v142;
                if (v143 >= (int)v142)
                {
                  v122 = -1;
                }
                else
                {
                  v144 = 2;
                  if (v114 != (unsigned __int16)v182)
                    v144 = 3;
                  if (v113 == v183)
                    v145 = v114 != (unsigned __int16)v182;
                  else
                    v145 = v144;
                  v146 = v143
                       + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v113 - v183))
                                        + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v114 - v182))
                                        + *(_DWORD *)(v181 + 4 * v145))
                                       * v184
                                       + 256) >> 9);
                  if (v146 >= (int)v142)
                    v38 = v142;
                  else
                    v38 = v146;
                  if (v146 < (int)v142)
                    v122 = 0;
                  else
                    v122 = -1;
                }
                v73 = v186;
                v74 = v180;
              }
              v147 = v43 + 32 * v73;
              v148 = (_WORD *)(v147 + 4 * v42);
              v149 = (__int16)(v148[1] + v28);
              if (v16[224] <= v149 && v16[225] >= v149)
              {
                v150 = v44;
                v151 = *v148 + v44;
                if (v16[226] <= v151 && v16[227] >= v151)
                {
                  v190 = v42;
                  v152 = v28;
                  v153 = v38;
                  v154 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v149 + *v16 * v151);
                  v38 = v153;
                  if (v154 < (int)v153)
                  {
                    v155 = 2;
                    if (v149 != v182)
                      v155 = 3;
                    if (v151 == v183)
                      v156 = v149 != v182;
                    else
                      v156 = v155;
                    v157 = v154
                         + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v151 - v183))
                                          + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v149 - v182))
                                          + *(_DWORD *)(v181 + 4 * v156))
                                         * v184
                                         + 256) >> 9);
                    if (v157 >= (int)v153)
                      v38 = v153;
                    else
                      v38 = v157;
                    if (v157 < (int)v153)
                      v122 = 1;
                  }
                  v44 = v150;
                  v28 = v152;
                  v42 = v190;
                  v73 = v186;
                  v74 = v180;
                }
                else
                {
                  v44 = v150;
                }
              }
              v158 = (_WORD *)(v147 + 4 * v107);
              v159 = (__int16)(v158[1] + v28);
              v43 = a12;
              if (v16[224] > v159 || v16[225] < v159)
                goto LABEL_218;
              v127 = v44;
              v160 = *v158 + v44;
              if (v16[226] > v160 || v16[227] < v160)
              {
                v44 = v127;
                goto LABEL_218;
              }
              v189 = v42;
              v115 = v28;
              v161 = v38;
              v162 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v159 + *v16 * v160);
              v38 = v161;
              if (v162 < (int)v161)
              {
                v163 = 2;
                if (v159 != v182)
                  v163 = 3;
                if (v160 == v183)
                  v164 = v159 != v182;
                else
                  v164 = v163;
                v165 = v162
                     + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v160 - v183))
                                      + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v159 - v182))
                                      + *(_DWORD *)(v181 + 4 * v164))
                                     * v184
                                     + 256) >> 9);
                v166 = v165 < (int)v161;
                if (v165 >= (int)v161)
                  v38 = v161;
                else
                  v38 = v165;
                v28 = v115;
                if (v166)
                {
                  v102 = v107;
                  LODWORD(v44) = v127;
                  goto LABEL_123;
                }
                v44 = v127;
                goto LABEL_181;
              }
            }
            else
            {
              v189 = v42;
              v115 = v28;
              v116 = v38;
              v117 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v113 + (uint64_t)(__int16)v114);
              if (v117 >= (int)v116)
              {
                v122 = -1;
              }
              else
              {
                v118 = 2;
                if (v114 != (unsigned __int16)v182)
                  v118 = 3;
                if (v113 == v183)
                  v119 = v114 != (unsigned __int16)v182;
                else
                  v119 = v118;
                v120 = v117
                     + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v113 - v183))
                                      + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v114 - v182))
                                      + *(_DWORD *)(v181 + 4 * v119))
                                     * v184
                                     + 256) >> 9);
                v121 = v120 < (int)v116;
                if (v120 >= (int)v116)
                  v116 = v116;
                else
                  v116 = v120;
                if (v121)
                  v122 = 0;
                else
                  v122 = -1;
              }
              v125 = v43 + 32 * v186;
              v126 = (_WORD *)(v125 + 4 * v189);
              v127 = v44;
              v128 = *v126 + v44;
              v129 = v126[1] + v115;
              v130 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v128 + (__int16)v129);
              if (v130 < (int)v116)
              {
                v131 = 2;
                if (v129 != (unsigned __int16)v182)
                  v131 = 3;
                if (v128 == v183)
                  v132 = v129 != (unsigned __int16)v182;
                else
                  v132 = v131;
                v133 = v130
                     + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v128 - v183))
                                      + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v129 - v182))
                                      + *(_DWORD *)(v181 + 4 * v132))
                                     * v184
                                     + 256) >> 9);
                v134 = v133 < (int)v116;
                if (v133 >= (int)v116)
                  v116 = v116;
                else
                  v116 = v133;
                if (v134)
                  v122 = 1;
              }
              v135 = (_WORD *)(v125 + 4 * v107);
              v136 = *v135 + v127;
              v137 = v135[1] + v115;
              v138 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v136 + (__int16)v137);
              v43 = a12;
              v38 = v116;
              if (v138 < (int)v116)
              {
                v139 = 2;
                if (v137 != (unsigned __int16)v182)
                  v139 = 3;
                v140 = v136 == v183 ? v137 != (unsigned __int16)v182 : v139;
                v141 = v138
                     + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v136 - v183))
                                      + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v137 - v182))
                                      + *(_DWORD *)(v181 + 4 * v140))
                                     * v184
                                     + 256) >> 9);
                v38 = v141 >= (int)v116 ? v116 : v141;
                if (v141 < (int)v116)
                {
                  v102 = v107;
                  LODWORD(v44) = v127;
                  LODWORD(v28) = v115;
LABEL_123:
                  v73 = v186;
                  v74 = v180;
                  goto LABEL_124;
                }
              }
            }
            v44 = v127;
            v28 = v115;
LABEL_181:
            v42 = v189;
            v73 = v186;
            v74 = v180;
LABEL_218:
            if (v122 == -1)
              goto LABEL_72;
            v107 = v192[v122];
            v102 = v107;
LABEL_124:
            v103 = (__int16 *)(v43 + 32 * v73 + 4 * v102);
            v44 = (v44 + *v103);
            v28 = (v28 + v103[1]);
            v42 = v107;
          }
        }
        v38 = v188;
LABEL_72:
        v72 = v73 - 1;
        v71 = v176 - 16;
        if (!v73)
          goto LABEL_235;
      }
      else
      {
        if (v75 >= 1)
        {
          v79 = 0;
          v178 = -1;
          v176 = v71;
          do
          {
            v80 = (__int16)(*v71 + v28);
            if (v16[224] <= v80 && v16[225] >= v80)
            {
              v81 = *(v71 - 1) + v44;
              if (v16[226] > v81 || v16[227] < v81)
              {
                v43 = a12;
              }
              else
              {
                v82 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v80 + *v16 * v81);
                v83 = v188;
                if (v82 < v188)
                {
                  v84 = 2;
                  if (v80 != v182)
                    v84 = 3;
                  if (v81 == v183)
                    v85 = v80 != v182;
                  else
                    v85 = v84;
                  v86 = v82
                      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v81 - v183))
                                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v80 - v182))
                                       + *(_DWORD *)(v181 + 4 * v85))
                                      * v184
                                      + 256) >> 9);
                  v87 = v86 < v188;
                  if (v86 < v188)
                    v83 = v82
                        + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v81 - v183))
                                         + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v80 - v182))
                                         + *(_DWORD *)(v181 + 4 * v85))
                                        * v184
                                        + 256) >> 9);
                  v188 = v83;
                  v88 = v178;
                  if (v87)
                    v88 = v79;
                  v178 = v88;
                }
                v43 = a12;
                v73 = v186;
                v74 = v180;
              }
            }
            v71 += 2;
            ++v79;
          }
          while (v79 < *(int *)(a11 + 4 * v73));
          goto LABEL_120;
        }
LABEL_232:
        v38 = v38;
        v72 = v73 - 1;
        v71 -= 16;
        if (!v73)
          goto LABEL_235;
      }
    }
  }
  v187 = v29
       + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v32)
                        + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v33)
                        + *(_DWORD *)(a1 + 25784 + 4 * v37))
                       * a4
                       + 256) >> 9);
  v39 = 0;
  v170 = (v19 & ~((int)v19 >> 31)) + 1;
  v40 = (_WORD *)(a12 + 2);
  v41 = -1;
  v42 = -1;
  v43 = a12;
  LODWORD(v44) = v175;
  do
  {
    v45 = *(_DWORD *)(a11 + 4 * v39);
    v48 = (int)v44 - (1 << v39) >= v16[226]
       && (1 << v39) + (int)v44 <= v16[227]
       && (int)v28 - (1 << v39) >= v16[224]
       && (1 << v39) + (int)v28 <= v16[225];
    v172 = v40;
    v173 = v41;
    if (v48)
    {
      if (v45 < 1)
      {
LABEL_19:
        v179 = -1;
        goto LABEL_20;
      }
      v59 = 0;
      v179 = -1;
      do
      {
        v60 = *(v40 - 1) + v177;
        v61 = *v40 + v185;
        v62 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v16 * v60 + (__int16)v61);
        v63 = v187;
        if (v62 < v187)
        {
          v64 = 2;
          if (v61 != (unsigned __int16)v182)
            v64 = 3;
          if (v60 == v183)
            v65 = v61 != (unsigned __int16)v182;
          else
            v65 = v64;
          v66 = v62
              + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v60 - v183))
                               + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v61 - v182))
                               + *(_DWORD *)(v181 + 4 * v65))
                              * v184
                              + 256) >> 9);
          v67 = v66 < v187;
          if (v66 < v187)
            v63 = v62
                + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v60 - v183))
                                 + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v61 - v182))
                                 + *(_DWORD *)(v181 + 4 * v65))
                                * v184
                                + 256) >> 9);
          v187 = v63;
          v68 = v179;
          if (v67)
            v68 = v59;
          v179 = v68;
        }
        v40 += 2;
        ++v59;
        LODWORD(v44) = v175;
      }
      while (v59 < *(int *)(a11 + 4 * v39));
    }
    else
    {
      if (v45 < 1)
        goto LABEL_19;
      v49 = 0;
      v179 = -1;
      do
      {
        v50 = (__int16)(*v40 + v185);
        if (v16[224] <= v50 && v16[225] >= v50)
        {
          v51 = *(v40 - 1) + v177;
          if (v16[226] <= v51 && v16[227] >= v51)
          {
            v52 = (*a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v50 + *v16 * v51);
            v53 = v187;
            if (v52 < v187)
            {
              v54 = 2;
              if (v50 != v182)
                v54 = 3;
              if (v51 == v183)
                v55 = v50 != v182;
              else
                v55 = v54;
              v56 = v52
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v51 - v183))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v50 - v182))
                                   + *(_DWORD *)(v181 + 4 * v55))
                                  * v184
                                  + 256) >> 9);
              v57 = v56 < v187;
              if (v56 < v187)
                v53 = v52
                    + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v51 - v183))
                                     + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * (__int16)(v50 - v182))
                                     + *(_DWORD *)(v181 + 4 * v55))
                                    * v184
                                    + 256) >> 9);
              v187 = v53;
              v58 = v179;
              if (v57)
                v58 = v49;
              v179 = v58;
            }
          }
          v43 = a12;
        }
        v40 += 2;
        ++v49;
      }
      while (v49 < *(int *)(a11 + 4 * v39));
    }
LABEL_20:
    if (v179 == -1)
    {
      v41 = v173;
    }
    else
    {
      v42 = v179;
      v41 = v39;
    }
    ++v39;
    v40 = v172 + 16;
  }
  while (v39 != v170);
  if (v41 != -1)
  {
    v69 = v41;
    v70 = (__int16 *)(v43 + 32 * v41 + 4 * v42);
    v44 = (v44 + *v70);
    v28 = (v28 + v70[1]);
    v38 = v187;
    goto LABEL_70;
  }
  v38 = v187;
LABEL_235:
  v167 = v38;
  *a10 = v44;
  a10[1] = v28;
  if (a6)
    calc_int_cost_list(a1, v183, v182, v184, (uint64_t)a7, v44, v28, a6);
  return v167;
}

uint64_t calc_int_cost_list(uint64_t a1, __int16 a2, __int16 a3, int a4, uint64_t a5, unsigned __int16 a6, unsigned __int16 a7, _DWORD *a8)
{
  int v11;
  int v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  int v20;
  __int16 v21;
  __int16 v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  _DWORD *v29;
  int v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  _DWORD *v33;
  int v34;
  int v35;
  uint64_t *v36;
  __int16 v37;
  int v38;
  unsigned __int16 v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _DWORD *v47;
  int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  _BOOL8 v54;
  int v55;
  unsigned __int16 v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  int v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t *v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  int v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int16 v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v93;
  unsigned __int16 v94;
  uint64_t v96;

  v11 = a6;
  v12 = a7;
  v13 = (_DWORD *)(a1 + 24952);
  v14 = a2 >> 3;
  v15 = a3 >> 3;
  v16 = (__int16)a6;
  v17 = (__int16)a7;
  v93 = (__int16)a7;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + (__int16)a7 + (uint64_t)(*(_DWORD *)(a1 + 24952) * (__int16)a6));
  v19 = v17;
  v20 = v16;
  v94 = a6;
  v21 = a6 - v14;
  v22 = a7 - v15;
  v91 = v15;
  v23 = v12 != (unsigned __int16)v15;
  v24 = 2;
  if (v12 != (unsigned __int16)v15)
    v24 = 3;
  v89 = v24;
  if (v11 == (unsigned __int16)v14)
    v24 = v12 != (unsigned __int16)v15;
  v25 = v21;
  v90 = v22;
  *a8 = result
      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v21)
                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v22)
                       + *(_DWORD *)(a1 + 4 * v24 + 25784))
                      * a4
                      + 256) >> 9);
  v26 = v13[226];
  v27 = v13[227];
  v28 = v13[224];
  v29 = v13;
  v30 = v13[225];
  v96 = a1 + 25724;
  v31 = a7;
  v32 = a7 - 1;
  if (v26 < v20 && v27 > v20 && v28 < v17 && v30 > v17)
  {
    v33 = v29;
    v34 = v20;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v29 * v20 + (uint64_t)(__int16)v32);
    v36 = *(uint64_t **)(a1 + 25776);
    if (v36)
    {
      v37 = v32 - v91;
      v38 = v32;
      v39 = a6;
      v41 = *v36;
      v40 = v36[1];
      v42 = v38 == (unsigned __int16)v91;
      v43 = v38 != (unsigned __int16)v91;
      v44 = 2;
      if (!v42)
        v44 = 3;
      if (a6 == (unsigned __int16)v14)
        v45 = v43;
      else
        v45 = v44;
      v36 = (uint64_t *)((unint64_t)((*(int *)(v41 + 4 * v25)
                                          + (uint64_t)*(int *)(v96 + 4 * v45)
                                          + *(int *)(v40 + 4 * v37))
                                         * (int)v33[167]
                                         + 0x2000) >> 14);
    }
    else
    {
      v39 = a6;
    }
    a8[1] = (_DWORD)v36 + v35;
    v64 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v93 + *v33 * (__int16)(v39 + 1));
    v65 = *(uint64_t **)(a1 + 25776);
    if (v65)
    {
      v67 = *v65;
      v66 = v65[1];
      v68 = v89;
      if ((unsigned __int16)(v39 + 1) == (unsigned __int16)v14)
        v68 = v23;
      v65 = (uint64_t *)((unint64_t)((*(int *)(v67 + 4 * (__int16)(v39 + 1 - v14))
                                          + (uint64_t)*(int *)(v96 + 4 * v68)
                                          + *(int *)(v66 + 4 * v90))
                                         * (int)v33[167]
                                         + 0x2000) >> 14);
    }
    a8[2] = (_DWORD)v65 + v64;
    v69 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v33 * v34 + (__int16)(v31 + 1));
    v70 = *(uint64_t **)(a1 + 25776);
    if (v70)
    {
      v72 = *v70;
      v71 = v70[1];
      v73 = 2;
      if ((unsigned __int16)(v31 + 1) != (unsigned __int16)v91)
        v73 = 3;
      if (v39 == (unsigned __int16)v14)
        v74 = (unsigned __int16)(v31 + 1) != (unsigned __int16)v91;
      else
        v74 = v73;
      v70 = (uint64_t *)((unint64_t)((*(int *)(v72 + 4 * v25)
                                          + (uint64_t)*(int *)(v96 + 4 * v74)
                                          + *(int *)(v71 + 4 * (__int16)(v31 + 1 - v91)))
                                         * (int)v33[167]
                                         + 0x2000) >> 14);
    }
    a8[3] = (_DWORD)v70 + v69;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v93 + *v33 * (__int16)(v39 - 1));
    v75 = *(uint64_t **)(a1 + 25776);
    if (!v75)
      goto LABEL_61;
    v76 = (int)v33[167];
    v77 = v39 - 1 - v14;
    v79 = *v75;
    v78 = v75[1];
    v80 = v89;
    if ((unsigned __int16)(v39 - 1) == (unsigned __int16)v14)
      v80 = v23;
    goto LABEL_60;
  }
  v46 = 0x7FFFFFFF;
  v47 = v29;
  if (v27 >= v20 && v26 <= v20 && v28 <= (__int16)v32 && v30 >= (__int16)v32)
  {
    v48 = v20;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v29 * v20 + (uint64_t)(__int16)v32);
    v49 = *(uint64_t **)(a1 + 25776);
    if (v49)
    {
      v51 = *v49;
      v50 = v49[1];
      v52 = 2;
      if (v32 != (unsigned __int16)v91)
        v52 = 3;
      if (v94 == (unsigned __int16)v14)
        v53 = v32 != (unsigned __int16)v91;
      else
        v53 = v52;
      v49 = (uint64_t *)((unint64_t)((*(int *)(v51 + 4 * v25)
                                          + (uint64_t)*(int *)(v96 + 4 * v53)
                                          + *(int *)(v50 + 4 * (__int16)(v32 - v91)))
                                         * (int)v47[167]
                                         + 0x2000) >> 14);
    }
    v46 = (_DWORD)v49 + result;
    v20 = v48;
    v19 = v17;
  }
  a8[1] = v46;
  v54 = v23;
  if (v47[224] <= v19 && v47[225] >= v19 && (v55 = (__int16)(v94 + 1), v47[226] <= v55) && v47[227] >= v55)
  {
    v88 = v19;
    v82 = v20;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v93 + *v47 * v55);
    v83 = *(uint64_t **)(a1 + 25776);
    if (v83)
    {
      v85 = *v83;
      v84 = v83[1];
      v86 = v89;
      if ((unsigned __int16)(v94 + 1) == (unsigned __int16)v14)
        v86 = v54;
      v83 = (uint64_t *)((unint64_t)((*(int *)(v85 + 4 * (__int16)(v94 + 1 - v14))
                                          + (uint64_t)*(int *)(v96 + 4 * v86)
                                          + *(int *)(v84 + 4 * v90))
                                         * (int)v47[167]
                                         + 0x2000) >> 14);
    }
    v56 = v94;
    v20 = v82;
    v19 = v88;
    a8[2] = (_DWORD)v83 + result;
    v57 = (__int16)(v31 + 1);
    if (v47[224] > v57)
      goto LABEL_67;
  }
  else
  {
    v56 = v94;
    a8[2] = 0x7FFFFFFF;
    v57 = (__int16)(v31 + 1);
    if (v47[224] > v57)
      goto LABEL_67;
  }
  if (v47[225] >= v57 && v47[226] <= v20 && v47[227] >= v20)
  {
    v58 = v19;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v57 + *v47 * v20);
    v59 = *(uint64_t **)(a1 + 25776);
    if (v59)
    {
      v61 = *v59;
      v60 = v59[1];
      v62 = 2;
      if (v57 != v91)
        v62 = 3;
      if (v56 == (unsigned __int16)v14)
        v63 = v57 != v91;
      else
        v63 = v62;
      v59 = (uint64_t *)((unint64_t)((*(int *)(v61 + 4 * v25)
                                          + (uint64_t)*(int *)(v96 + 4 * v63)
                                          + *(int *)(v60 + 4 * (__int16)(v57 - v91)))
                                         * (int)v47[167]
                                         + 0x2000) >> 14);
    }
    v19 = v58;
    a8[3] = (_DWORD)v59 + result;
    if (v47[224] > v58)
      goto LABEL_71;
    goto LABEL_68;
  }
LABEL_67:
  a8[3] = 0x7FFFFFFF;
  if (v47[224] > v19)
  {
LABEL_71:
    v81 = 0x7FFFFFFF;
    goto LABEL_72;
  }
LABEL_68:
  if (v47[225] < v19)
    goto LABEL_71;
  v87 = v56 - 1;
  if (v47[226] > (__int16)v87 || v47[227] < (__int16)v87)
    goto LABEL_71;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a5 + 24))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + v93 + *v47 * (__int16)v87);
  v75 = *(uint64_t **)(a1 + 25776);
  if (!v75)
    goto LABEL_61;
  v76 = (int)v47[167];
  v77 = v87 - v14;
  v79 = *v75;
  v78 = v75[1];
  v80 = v89;
  if (v87 == (unsigned __int16)v14)
    v80 = v54;
LABEL_60:
  v75 = (uint64_t *)((unint64_t)((*(int *)(v79 + 4 * v77)
                                      + (uint64_t)*(int *)(v96 + 4 * v80)
                                      + *(int *)(v78 + 4 * v90))
                                     * v76
                                     + 0x2000) >> 14);
LABEL_61:
  v81 = (_DWORD)v75 + result;
LABEL_72:
  a8[4] = v81;
  return result;
}

uint64_t exhaustive_mesh_search(uint64_t a1, unsigned __int16 *a2, int *a3, int a4, int a5, int a6, uint64_t a7, __int16 a8, __int16 a9)
{
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  __int16 v23;
  BOOL v24;
  _BOOL8 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  __int16 v43;
  __int16 v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int16 v49;
  int v50;
  int v51;
  __int16 v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  __int16 v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  __int16 v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  __int16 v77;
  _BOOL8 v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  __int16 v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  __int16 v89;
  _BOOL8 v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  __int16 v94;
  int v95;
  int v96;
  int v97;
  __int16 v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  uint64_t v108;
  int v111;
  _QWORD v113[4];
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;

  v118 = *MEMORY[0x24BDAC8D0];
  v12 = (_DWORD *)(a1 + 24952);
  if (a5 <= 1)
    v13 = 4;
  else
    v13 = a5;
  v105 = v13;
  v14 = *(_DWORD *)(a1 + 25852);
  if (a9 < v14)
    v14 = a9;
  if (*(_DWORD *)(a1 + 25848) <= a9)
    v15 = v14;
  else
    v15 = *(_DWORD *)(a1 + 25848);
  if (a8 >= *(_DWORD *)(a1 + 25860))
    v16 = *(_DWORD *)(a1 + 25860);
  else
    LOWORD(v16) = a8;
  if (*(_DWORD *)(a1 + 25856) <= a8)
    LOWORD(v17) = v16;
  else
    v17 = *(_DWORD *)(a1 + 25856);
  *a3 = (unsigned __int16)v17 | ((unsigned __int16)v15 << 16);
  v18 = (__int16)v17;
  v19 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + (__int16)v15 + *v12 * (__int16)v17);
  v20 = *a2;
  v21 = a2[1];
  v98 = v17;
  v22 = v17 - v20;
  v102 = v15;
  v23 = v15 - v21;
  v24 = (unsigned __int16)v15 == v21;
  v25 = (unsigned __int16)v15 != v21;
  v26 = 2;
  if (!v24)
    v26 = 3;
  if ((unsigned __int16)v17 == v20)
    v27 = v25;
  else
    v27 = v26;
  v108 = a1 + 25784;
  v28 = a4;
  v29 = v19
      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v22)
                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v23)
                       + *(_DWORD *)(a1 + 25784 + 4 * v27))
                      * a6
                      + 256) >> 9);
  if (v12[226] - v18 <= -a4)
    v30 = -a4;
  else
    v30 = v12[226] - v18;
  v31 = v12[224] - (__int16)v15;
  if (v31 <= -a4)
    v31 = -a4;
  if (v12[227] - v18 >= a4)
    v32 = a4;
  else
    v32 = v12[227] - v18;
  if (v12[225] - (__int16)v15 < a4)
    v28 = v12[225] - (__int16)v15;
  v97 = v32;
  if (v30 <= v32 && v31 <= v28)
  {
    v34 = v12;
    v104 = v28;
    v96 = v31;
    if (a5 < 2)
    {
      v49 = v98 + v30;
      v94 = v102 + v31;
      v95 = a5;
      v93 = (v102 + v31) << 16;
      do
      {
        v106 = v49;
        v100 = v30;
        v50 = (__int16)(v30 + v98);
        v111 = (unsigned __int16)(v30 + v98);
        v51 = v93;
        v52 = v94;
        v53 = v96;
        do
        {
          v103 = v51;
          if (v53 + 3 <= v28)
          {
            v64 = v53 + v102;
            v65 = *(_QWORD *)(a1 + 24944);
            v66 = *v34 * v50;
            v101 = v53 + v102 + 1;
            v113[0] = v65 + v66 + (__int16)(v53 + v102);
            v113[1] = v65 + v66 + (__int16)(v53 + v102 + 1);
            v67 = v53 + v102 + 2;
            v68 = v53 + v102 + 3;
            v113[2] = v65 + v66 + (__int16)(v53 + v102 + 2);
            v113[3] = v65 + v66 + (__int16)(v53 + v102 + 3);
            (*(void (**)(_QWORD, _QWORD, _QWORD *))(a7 + 48))(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), v113);
            if (v114 < v29)
            {
              v69 = *a2;
              v70 = a2[1];
              v71 = v64 - v70;
              v24 = (unsigned __int16)(v53 + v102) == v70;
              v72 = (unsigned __int16)(v53 + v102) != v70;
              v73 = 2;
              if (!v24)
                v73 = 3;
              if (v111 != v69)
                v72 = v73;
              v74 = v114
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v50 - v69))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v71)
                                   + *(_DWORD *)(v108 + 4 * v72))
                                  * a6
                                  + 256) >> 9);
              if (v74 < v29)
              {
                *a3 = (v64 << 16) | v111;
                v29 = v74;
              }
            }
            if (v115 < v29)
            {
              v75 = *a2;
              v76 = a2[1];
              v77 = v101 - v76;
              v24 = (unsigned __int16)(v53 + v102 + 1) == v76;
              v78 = (unsigned __int16)(v53 + v102 + 1) != v76;
              v79 = 2;
              if (!v24)
                v79 = 3;
              if (v111 != v75)
                v78 = v79;
              v80 = v115
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v50 - v75))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v77)
                                   + *(_DWORD *)(v108 + 4 * v78))
                                  * a6
                                  + 256) >> 9);
              if (v80 < v29)
              {
                *a3 = (v101 << 16) | v111;
                v29 = v80;
              }
            }
            if (v116 < v29)
            {
              v81 = *a2;
              v82 = a2[1];
              v83 = v67 - v82;
              v24 = (unsigned __int16)(v53 + v102 + 2) == v82;
              v84 = (unsigned __int16)(v53 + v102 + 2) != v82;
              v85 = 2;
              if (!v24)
                v85 = 3;
              if (v111 != v81)
                v84 = v85;
              v86 = v116
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v50 - v81))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v83)
                                   + *(_DWORD *)(v108 + 4 * v84))
                                  * a6
                                  + 256) >> 9);
              if (v86 < v29)
              {
                *a3 = (v67 << 16) | v111;
                v29 = v86;
              }
            }
            if (v117 < v29)
            {
              v87 = *a2;
              v88 = a2[1];
              v89 = v68 - v88;
              v24 = (unsigned __int16)(v53 + v102 + 3) == v88;
              v90 = (unsigned __int16)(v53 + v102 + 3) != v88;
              v91 = 2;
              if (!v24)
                v91 = 3;
              if (v111 != v87)
                v90 = v91;
              v92 = v117
                  + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v50 - v87))
                                   + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v89)
                                   + *(_DWORD *)(v108 + 4 * v90))
                                  * a6
                                  + 256) >> 9);
              if (v92 < v29)
              {
                *a3 = (v68 << 16) | v111;
                v29 = v92;
              }
            }
          }
          else
          {
            v54 = v28 - v53;
            if (v28 - v53 >= 1)
            {
              v55 = 0;
              do
              {
                v56 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v34 * v50 + (v51 >> 16));
                if (v56 < v29)
                {
                  v57 = (unsigned __int16)(v52 + v55);
                  v58 = *a2;
                  v59 = a2[1];
                  v60 = v52 + v55 - v59;
                  v24 = v57 == v59;
                  v61 = v57 != v59;
                  v62 = 2;
                  if (!v24)
                    v62 = 3;
                  if (v111 != v58)
                    v61 = v62;
                  v63 = v56
                      + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * (__int16)(v50 - v58))
                                       + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v60)
                                       + *(_DWORD *)(v108 + 4 * v61))
                                      * a6
                                      + 256) >> 9);
                  if (v63 < v29)
                  {
                    *a3 = v106 + v51;
                    v29 = v63;
                  }
                }
                ++v55;
                v51 += 0x10000;
              }
              while (v55 < v54);
            }
          }
          v28 = v104;
          v53 += v105;
          v52 += v105;
          v51 = v103 + (v105 << 16);
        }
        while (v53 <= v104);
        v30 = v100 + v95;
        v49 = v106 + v95;
      }
      while (v100 + v95 <= v97);
    }
    else
    {
      do
      {
        v99 = v30;
        v35 = (__int16)(v30 + v98);
        v36 = (unsigned __int16)(v30 + v98);
        v37 = v96;
        do
        {
          v39 = v37 + v102;
          v40 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))a7)(*(_QWORD *)(a1 + 8216), *(unsigned int *)(a1 + 8224), *(_QWORD *)(a1 + 24944) + *v34 * v35 + (__int16)(v37 + v102));
          if (v40 >= v29)
          {
            v38 = v104;
          }
          else
          {
            v41 = *a2;
            v42 = a2[1];
            v43 = v36 - v41;
            v44 = v39 - v42;
            v24 = (unsigned __int16)(v37 + v102) == v42;
            v45 = (unsigned __int16)(v37 + v102) != v42;
            if (v24)
              v46 = 2;
            else
              v46 = 3;
            if (v41 == (unsigned __int16)v35)
              v47 = v45;
            else
              v47 = v46;
            v48 = v40
                + (((*(_DWORD *)(*(_QWORD *)(a1 + 25800) + 4 * v43)
                                 + *(_DWORD *)(*(_QWORD *)(a1 + 25808) + 4 * v44)
                                 + *(_DWORD *)(v108 + 4 * v47))
                                * a6
                                + 256) >> 9);
            v38 = v104;
            if (v48 < v29)
            {
              *a3 = v36 | (v39 << 16);
              v29 = v48;
            }
          }
          v37 += v105;
        }
        while (v37 <= v38);
        v30 = v99 + a5;
      }
      while (v99 + a5 <= v97);
    }
  }
  return v29;
}

uint64_t vp9_filter_by_weight16x16_c(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;

  v5 = 16;
  v6 = 16 - a5;
  v7 = (unsigned __int8 *)(a3 + 7);
  v8 = (unsigned __int8 *)(result + 7);
  do
  {
    *(v7 - 7) = (v6 * *(v7 - 7) + *(v8 - 7) * a5 + 8) >> 4;
    *(v7 - 6) = (v6 * *(v7 - 6) + *(v8 - 6) * a5 + 8) >> 4;
    *(v7 - 5) = (v6 * *(v7 - 5) + *(v8 - 5) * a5 + 8) >> 4;
    *(v7 - 4) = (v6 * *(v7 - 4) + *(v8 - 4) * a5 + 8) >> 4;
    *(v7 - 3) = (v6 * *(v7 - 3) + *(v8 - 3) * a5 + 8) >> 4;
    *(v7 - 2) = (v6 * *(v7 - 2) + *(v8 - 2) * a5 + 8) >> 4;
    *(v7 - 1) = (v6 * *(v7 - 1) + *(v8 - 1) * a5 + 8) >> 4;
    *v7 = (v6 * *v7 + *v8 * a5 + 8) >> 4;
    v7[1] = (v6 * v7[1] + v8[1] * a5 + 8) >> 4;
    v7[2] = (v6 * v7[2] + v8[2] * a5 + 8) >> 4;
    v7[3] = (v6 * v7[3] + v8[3] * a5 + 8) >> 4;
    v7[4] = (v6 * v7[4] + v8[4] * a5 + 8) >> 4;
    v7[5] = (v6 * v7[5] + v8[5] * a5 + 8) >> 4;
    v7[6] = (v6 * v7[6] + v8[6] * a5 + 8) >> 4;
    v7[7] = (v6 * v7[7] + v8[7] * a5 + 8) >> 4;
    v7[8] = (v6 * v7[8] + v8[8] * a5 + 8) >> 4;
    v7 += a4;
    v8 += a2;
    --v5;
  }
  while (v5);
  return result;
}

void vp9_mfqe(uint64_t a1)
{
  int v1;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int i;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 1312);
  if (v1 >= 1)
  {
    v3 = *(_DWORD *)(a1 + 1320);
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(a1 + 328);
      do
      {
        if (v3 >= 1)
        {
          v6 = 0;
          v7 = 0;
          for (i = 0; i < v3; i += 8)
          {
            v11 = *(_QWORD *)(a1 + 18192);
            if (*(_DWORD *)(a1 + 1276))
            {
              if (!*(_BYTE *)(a1 + 1292))
                v11 = *(_QWORD *)(a1 + 1424);
            }
            v10 = *(_DWORD *)(v5 + 36);
            LODWORD(v12) = *(_DWORD *)(a1 + 968);
            HIDWORD(v12) = *(_DWORD *)(a1 + 988);
            v9 = 4 * v4;
            mfqe_partition((_DWORD *)a1, (unsigned __int8 *)(v11 + 68 * (i + v4 * *(_DWORD *)(a1 + 1324))), 12, (char *)(*(_QWORD *)(v5 + 56) + (v6 & 0xFFFFFFC0) + (*(_DWORD *)(v5 + 16) * 8 * v4)), (char *)(*(_QWORD *)(v5 + 64) + (v7 & 0xFFFFFFE0) + (v10 * v9)), (char *)(*(_QWORD *)(v5 + 72) + (v7 & 0xFFFFFFE0) + (v10 * v9)), *(_DWORD *)(v5 + 16), v10, (char *)(*(_QWORD *)(a1 + 1008) + (v6 & 0xFFFFFFC0) + (v12 * 8 * v4)), (char *)(*(_QWORD *)(a1 + 1016) + (v7 & 0xFFFFFFE0) + (HIDWORD(v12) * v9)), (char *)(*(_QWORD *)(a1 + 1024) + (v7 & 0xFFFFFFE0) + (HIDWORD(v12) * v9)), v12);
            v3 = *(_DWORD *)(a1 + 1320);
            v7 += 32;
            v6 += 64;
          }
          v1 = *(_DWORD *)(a1 + 1312);
        }
        v4 += 8;
      }
      while (v4 < v1);
    }
  }
}

void mfqe_partition(_DWORD *a1, unsigned __int8 *a2, int a3, char *a4, char *a5, char *a6, unsigned int a7, int a8, char *a9, char *a10, char *a11, uint64_t a12)
{
  unint64_t v12;
  char v14;
  unsigned __int8 *v16;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  char v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  char *v53;
  char v54;
  char v55;
  int v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  char *v62;
  char *v63;
  char v64;
  int v65;
  char v66;
  int v67;
  char *v68;
  char v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  int v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int *v92;
  _OWORD *v93;
  char v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  _OWORD *v98;
  char *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  _OWORD *v102;
  char *v103;
  char *v104;
  _OWORD *v105;
  char *v106;
  char *v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  unsigned int v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  int v122;

  v12 = *a2;
  if (v12 < 3)
    return;
  v14 = a3;
  v92 = a1 + 4544;
  v16 = &subsize_lookup[13 * partition_lookup[13 * b_width_log2_lookup[a3] + v12] + a3];
  v19 = partition_lookup[13 * b_width_log2_lookup[a3] + v12];
  while (1)
  {
    v20 = v14 == 6 ? 0 : v19;
    v21 = v14 == 12 ? 32 : 16;
    v22 = v14 == 12 ? 16 : 8;
    v23 = v14 == 12 ? 4 : 2;
    if (v20 != 3)
      break;
    v117 = *v16;
    v24 = a2;
    v102 = a5;
    v105 = a4;
    v93 = a9;
    v109 = a11;
    v98 = a10;
    v25 = v22;
    v26 = v21;
    v27 = v23;
    mfqe_partition(a1);
    v95 = &v24[68 * v27];
    mfqe_partition(a1);
    if (v14 == 12)
      v28 = 2;
    else
      v28 = 1;
    v94 = v28;
    if (v14 == 12)
      v29 = 5;
    else
      v29 = 4;
    v30 = (char *)v105 + (int)(a7 << v29);
    if (v14 == 12)
      v31 = 4;
    else
      v31 = 3;
    v32 = a8 << v31;
    v33 = (char *)v102 + v32;
    v34 = &a6[v32];
    v35 = (int)(HIDWORD(a12) << v31);
    v36 = (char *)v98 + v35;
    v37 = (char *)v109 + v35;
    v91 = (char *)v93 + (int)((_DWORD)a12 << v29);
    mfqe_partition(a1);
    a2 = &v95[68 * (a1[331] << v94)];
    a4 = &v30[v26];
    a5 = &v33[v25];
    a6 = &v34[v25];
    a9 = &v91[v26];
    a10 = &v36[v25];
    a11 = &v37[v25];
    v14 = v117;
    v12 = *a2;
    v19 = partition_lookup[13 * b_width_log2_lookup[v117] + v12];
    v16 = &subsize_lookup[13 * v19 + v117];
    if (v12 <= 2)
      return;
  }
  v38 = a1[333];
  v39 = *v92;
  if (!v20)
  {
    if (v12 < 6u
      || a2[1] < 0xAu
      || (*((__int16 *)a2 + 6) * *((__int16 *)a2 + 6) + *((__int16 *)a2 + 7) * *((__int16 *)a2 + 7)) > 0x64)
    {
      copy_block(a4, a5, a6, a7, a8, a9, a10, a11, a12, SHIDWORD(a12), v14);
      return;
    }
    v122 = v38 - v39;
    v121 = a12;
    v120 = a11;
    v56 = v12;
    v57 = a4;
    v58 = a5;
    v59 = a6;
    v60 = a7;
    v61 = a8;
    v62 = a9;
    v63 = a10;
    goto LABEL_82;
  }
  if (v20 == 2)
  {
    v44 = v38 - v39;
    v45 = a2[1];
    if (v14 == 12)
    {
      if (v45 >= 0xA)
      {
        v46 = *((__int16 *)a2 + 6) * *((__int16 *)a2 + 6) + *((__int16 *)a2 + 7) * *((__int16 *)a2 + 7);
        v47 = 9;
        goto LABEL_47;
      }
      v47 = 9;
    }
    else
    {
      if (v45 >= 0xA)
      {
        v46 = *((__int16 *)a2 + 6) * *((__int16 *)a2 + 6) + *((__int16 *)a2 + 7) * *((__int16 *)a2 + 7);
        v47 = 6;
LABEL_47:
        if (v46 <= 0x64)
        {
          v51 = v47;
          v101 = a2;
          v107 = a4;
          v104 = a5;
          v52 = a9;
          v111 = a11;
          v53 = a10;
          v118 = v22;
          v97 = v21;
          v115 = v23;
          mfqe_block(v47, a4, a5, a6, a7, a8, a9, a10, a11, a12, SHIDWORD(a12), v44);
          if (v14 == 12)
            v54 = 5;
          else
            v54 = 4;
          if (v14 == 12)
            v55 = 4;
          else
            v55 = 3;
          mfqe_block(v51, &v107[a7 << v54], &v104[a8 << v55], &a6[a8 << v55], a7, a8, &v52[(_DWORD)a12 << v54], &v53[HIDWORD(a12) << v55], &v111[HIDWORD(a12) << v55], a12, SHIDWORD(a12), v44);
          v47 = v51;
          v23 = v115;
          v22 = v118;
          v21 = v97;
          a2 = v101;
          a5 = v104;
          a9 = v52;
          a4 = v107;
          a11 = v111;
          a10 = v53;
        }
        goto LABEL_72;
      }
      v47 = 6;
    }
LABEL_72:
    if (a2[68 * v23 + 1] < 0xAu
      || (*(__int16 *)&a2[68 * v23 + 12] * *(__int16 *)&a2[68 * v23 + 12]
                      + *(__int16 *)&a2[68 * v23 + 14] * *(__int16 *)&a2[68 * v23 + 14]) > 0x64)
    {
      return;
    }
    v80 = v44;
    v96 = v44;
    v81 = &a4[v21];
    v82 = &a5[v22];
    v83 = &a6[v22];
    v84 = &a9[v21];
    v85 = &a10[v22];
    v119 = &a11[v22];
    v86 = v47;
    v67 = a8;
    mfqe_block(v47, &a4[v21], &a5[v22], v83, a7, a8, &a9[v21], &a10[v22], &a11[v22], a12, SHIDWORD(a12), v80);
    if (v14 == 12)
      v87 = 5;
    else
      v87 = 4;
    v57 = &v81[a7 << v87];
    if (v14 == 12)
      v88 = 4;
    else
      v88 = 3;
    v89 = a8 << v88;
    v58 = &v82[v89];
    v59 = &v83[v89];
    v62 = &v84[(_DWORD)a12 << v87];
    v90 = (int)(HIDWORD(a12) << v88);
    v63 = &v85[v90];
    v122 = v96;
    v121 = a12;
    v120 = &v119[v90];
    v56 = v86;
    v60 = a7;
    goto LABEL_81;
  }
  if (v20 != 1)
    return;
  v40 = v38 - v39;
  v41 = a2[1];
  if (v14 == 12)
  {
    if (v41 < 0xA)
    {
      v43 = 9;
      goto LABEL_58;
    }
    v42 = *((__int16 *)a2 + 6) * *((__int16 *)a2 + 6) + *((__int16 *)a2 + 7) * *((__int16 *)a2 + 7);
    v43 = 9;
  }
  else
  {
    if (v41 < 0xA)
    {
      v43 = 6;
      goto LABEL_58;
    }
    v42 = *((__int16 *)a2 + 6) * *((__int16 *)a2 + 6) + *((__int16 *)a2 + 7) * *((__int16 *)a2 + 7);
    v43 = 6;
  }
  if (v42 <= 0x64)
  {
    v100 = a2;
    v106 = a4;
    v103 = a5;
    v48 = a9;
    v110 = a11;
    v99 = a10;
    v49 = v22;
    v50 = v21;
    mfqe_block(v43, a4, a5, a6, a7, a8, a9, a10, a11, a12, SHIDWORD(a12), v40);
    mfqe_block(v43, &v106[v50], &v103[v49], &a6[v49], a7, a8, &v48[v50], &v99[v49], &v110[v49], a12, SHIDWORD(a12), v40);
    v21 = v50;
    v22 = v49;
    a2 = v100;
    a5 = v103;
    a9 = v48;
    a4 = v106;
    a11 = v110;
    a10 = v99;
  }
LABEL_58:
  if (v14 == 12)
    v64 = 2;
  else
    v64 = 1;
  v65 = a1[331] << v64;
  if (a2[68 * v65 + 1] >= 0xAu
    && (*(__int16 *)&a2[68 * v65 + 12] * *(__int16 *)&a2[68 * v65 + 12]
                    + *(__int16 *)&a2[68 * v65 + 14] * *(__int16 *)&a2[68 * v65 + 14]) <= 0x64)
  {
    if (v14 == 12)
      v66 = 5;
    else
      v66 = 4;
    v67 = a8;
    v68 = &a4[a7 << v66];
    if (v14 == 12)
      v69 = 4;
    else
      v69 = 3;
    v70 = a8 << v69;
    v116 = &a5[v70];
    v71 = &a6[v70];
    v108 = &a6[v70];
    v72 = &a9[(_DWORD)a12 << v66];
    v73 = (int)(HIDWORD(a12) << v69);
    v74 = &a10[v73];
    v75 = &a11[v73];
    v76 = v43;
    v77 = v43;
    v78 = v22;
    v79 = v21;
    mfqe_block(v77, v68, &a5[v70], v71, a7, a8, v72, &a10[v73], &a11[v73], a12, SHIDWORD(a12), v40);
    v57 = &v68[v79];
    v58 = &v116[v78];
    v59 = &v108[v78];
    v62 = &v72[v79];
    v63 = &v74[v78];
    v122 = v40;
    v121 = a12;
    v120 = &v75[v78];
    v56 = v76;
    v60 = a7;
LABEL_81:
    v61 = v67;
LABEL_82:
    mfqe_block(v56, v57, v58, v59, v60, v61, v62, v63, v120, v121, SHIDWORD(v121), v122);
  }
}

void mfqe_block(int a1, _OWORD *a2, _OWORD *a3, _QWORD *a4, uint64_t a5, int a6, _OWORD *a7, _OWORD *a8, _QWORD *a9, int a10, int a11, int a12)
{
  int v16;
  int v17;
  uint64_t (**v18)(_QWORD);
  int v19;
  char v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v42;

  if (a1 == 9)
    v16 = 6;
  else
    v16 = 5;
  if (a1 == 6)
    v17 = 7;
  else
    v17 = v16;
  if (a1 == 6)
  {
    v21 = &vpx_sad16x16;
    v20 = 8;
    v19 = 128;
    v18 = (uint64_t (**)(_QWORD))&vpx_variance16x16;
  }
  else
  {
    v18 = &vpx_variance64x64;
    if (a1 == 9)
    {
      v18 = (uint64_t (**)(_QWORD))&vpx_variance32x32;
      v19 = 512;
    }
    else
    {
      v19 = 2048;
    }
    if (a1 == 9)
      v20 = 10;
    else
      v20 = 12;
    if (a1 == 9)
      v21 = &vpx_sad32x32;
    else
      v21 = &vpx_sad64x64;
  }
  v42 = 0;
  v22 = (((unsigned int (*)(_OWORD *, uint64_t, _OWORD *, _QWORD, int *))*v18)(a2, a5, a7, a10, &v42)+ v19) >> v20;
  v23 = (((unsigned int (*)(_OWORD *, uint64_t, _OWORD *, _QWORD))*v21)(a2, a5, a7, a10) + v19) >> v20;
  if (v23 < 2 || v22 <= 3 * v23)
  {
    copy_block(a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a1);
    return;
  }
  v25 = (int)(16 * v22 * v23) / ((v17 + (a12 >> 4)) * (a12 + 125));
  if (v25 >= 16)
    v26 = 16;
  else
    v26 = v25;
  switch(a1)
  {
    case 12:
      vp9_filter_by_weight16x16_c((uint64_t)a2, a5, (uint64_t)a7, a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a2 + 1), a5, (uint64_t)(a7 + 1), a10, v26);
      v27 = (int)a5;
      v28 = a10;
      vp9_filter_by_weight16x16_c((uint64_t)&a2[v27], a5, (uint64_t)&a7[v28], a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)&a2[v27 + 1], a5, (uint64_t)&a7[v28 + 1], a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a2 + 2), a5, (uint64_t)(a7 + 2), a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a2 + 3), a5, (uint64_t)(a7 + 3), a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)&a2[v27 + 2], a5, (uint64_t)&a7[v28 + 2], a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)&a2[v27 + 3], a5, (uint64_t)&a7[v28 + 3], a10, v26);
      v29 = (uint64_t)&a2[2 * (int)a5];
      v30 = (uint64_t)&a7[2 * a10];
      vp9_filter_by_weight16x16_c(v29, a5, v30, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + 16, a5, v30 + 16, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + v27 * 16, a5, v30 + v28 * 16, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + v27 * 16 + 16, a5, v30 + v28 * 16 + 16, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + 32, a5, v30 + 32, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + 48, a5, v30 + 48, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + 32 + v27 * 16, a5, v30 + 32 + v28 * 16, a10, v26);
      vp9_filter_by_weight16x16_c(v29 + 32 + v27 * 16 + 16, a5, v30 + 32 + v28 * 16 + 16, a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)a3, a6, (uint64_t)a8, a11, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a3 + 1), a6, (uint64_t)(a8 + 1), a11, v26);
      v31 = 2 * a6;
      v32 = 2 * a11;
      vp9_filter_by_weight16x16_c((uint64_t)&a3[v31 / 2], a6, (uint64_t)&a8[v32 / 2], a11, v26);
      vp9_filter_by_weight16x16_c((uint64_t)&a3[v31 / 2 + 1], a6, (uint64_t)&a8[v32 / 2 + 1], a11, v26);
      vp9_filter_by_weight16x16_c((uint64_t)a4, a6, (uint64_t)a9, a11, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a4 + 2), a6, (uint64_t)(a9 + 2), a11, v26);
      vp9_filter_by_weight16x16_c((uint64_t)&a4[v31], a6, (uint64_t)&a9[v32], a11, v26);
      v33 = (uint64_t)&a4[v31 + 2];
      v34 = (uint64_t)&a9[v32 + 2];
      v35 = a6;
      v36 = a11;
LABEL_32:
      vp9_filter_by_weight16x16_c(v33, v35, v34, v36, v26);
      return;
    case 9:
      vp9_filter_by_weight16x16_c((uint64_t)a2, a5, (uint64_t)a7, a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)(a2 + 1), a5, (uint64_t)(a7 + 1), a10, v26);
      v37 = (uint64_t)&a2[(int)a5];
      vp9_filter_by_weight16x16_c(v37, a5, (uint64_t)&a7[a10], a10, v26);
      vp9_filter_by_weight16x16_c(v37 + 16, a5, (uint64_t)&a7[a10 + 1], a10, v26);
      vp9_filter_by_weight16x16_c((uint64_t)a3, a6, (uint64_t)a8, a11, v26);
      v33 = (uint64_t)a4;
      v34 = (uint64_t)a9;
      v35 = a6;
      v36 = a11;
      goto LABEL_32;
    case 6:
      vp9_filter_by_weight16x16_c((uint64_t)a2, a5, (uint64_t)a7, a10, v26);
      vp8_filter_by_weight8x8_c((uint64_t)a3, a6, (uint64_t)a8, a11, v26);
      vp8_filter_by_weight8x8_c((uint64_t)a4, a6, (uint64_t)a9, a11, v26);
      break;
  }
}

double copy_block(_OWORD *a1, _OWORD *a2, _QWORD *a3, int a4, int a5, _OWORD *a6, _OWORD *a7, _QWORD *a8, int a9, int a10, char a11)
{
  double result;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  int v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  _OWORD *v58;
  _OWORD *v59;

  if (a11 == 9)
  {
    copy_mem16x16(a1, a4, a6, a9);
    copy_mem16x16(a1 + 1, a4, a6 + 1, a9);
    v44 = &a1[a4];
    v45 = &a6[a9];
    copy_mem16x16(v44, a4, v45, a9);
    copy_mem16x16(v44 + 1, a4, v45 + 1, a9);
    copy_mem16x16(a2, a5, a7, a10);
    v46 = a3;
    v47 = a5;
    v48 = a8;
  }
  else
  {
    if (a11 == 6)
    {
      *(_QWORD *)&result = copy_mem16x16(a1, a4, a6, a9).n128_u64[0];
      *(_QWORD *)a7 = *(_QWORD *)a2;
      v20 = (_QWORD *)((char *)a2 + a5);
      v21 = (_QWORD *)((char *)a7 + a10);
      *v21 = *v20;
      v22 = (_QWORD *)((char *)v20 + a5);
      v23 = (_QWORD *)((char *)v21 + a10);
      *v23 = *v22;
      v24 = (_QWORD *)((char *)v22 + a5);
      v25 = (_QWORD *)((char *)v23 + a10);
      *v25 = *v24;
      v26 = (_QWORD *)((char *)v24 + a5);
      v27 = (_QWORD *)((char *)v25 + a10);
      *v27 = *v26;
      v28 = (_QWORD *)((char *)v26 + a5);
      v29 = (_QWORD *)((char *)v27 + a10);
      *v29 = *v28;
      v30 = (_QWORD *)((char *)v28 + a5);
      v31 = (_QWORD *)((char *)v29 + a10);
      *v31 = *v30;
      *(_QWORD *)((char *)v31 + a10) = *(_QWORD *)((char *)v30 + a5);
      *a8 = *a3;
      v32 = (_QWORD *)((char *)a3 + a5);
      v33 = (_QWORD *)((char *)a8 + a10);
      *v33 = *v32;
      v34 = (_QWORD *)((char *)v32 + a5);
      v35 = (_QWORD *)((char *)v33 + a10);
      *v35 = *v34;
      v36 = (_QWORD *)((char *)v34 + a5);
      v37 = (_QWORD *)((char *)v35 + a10);
      *v37 = *v36;
      v38 = (_QWORD *)((char *)v36 + a5);
      v39 = (_QWORD *)((char *)v37 + a10);
      *v39 = *v38;
      v40 = (_QWORD *)((char *)v38 + a5);
      v41 = (_QWORD *)((char *)v39 + a10);
      *v41 = *v40;
      v42 = (_QWORD *)((char *)v40 + a5);
      v43 = (_QWORD *)((char *)v41 + a10);
      *v43 = *v42;
      *(_QWORD *)((char *)v43 + a10) = *(_QWORD *)((char *)v42 + a5);
      return result;
    }
    copy_mem16x16(a1, a4, a6, a9);
    copy_mem16x16(a1 + 1, a4, a6 + 1, a9);
    v56 = a2;
    v57 = a7;
    v49 = a4;
    v58 = a3;
    v59 = a8;
    v50 = a9;
    copy_mem16x16(&a1[v49], a4, &a6[v50], a9);
    copy_mem16x16(&a1[v49 + 1], a4, &a6[v50 + 1], a9);
    copy_mem16x16(a1 + 2, a4, a6 + 2, a9);
    copy_mem16x16(a1 + 3, a4, a6 + 3, a9);
    copy_mem16x16(&a1[v49 + 2], a4, &a6[v50 + 2], a9);
    copy_mem16x16(&a1[v49 + 3], a4, &a6[v50 + 3], a9);
    v51 = 2 * a4;
    v52 = &a1[v51];
    v53 = &a6[v51];
    copy_mem16x16(&a1[v51], a4, &a6[v51], a9);
    copy_mem16x16(v52 + 1, a4, v53 + 1, a9);
    copy_mem16x16(&v52[v49], a4, &v53[v50], a9);
    copy_mem16x16(&v52[v49 + 1], a4, &v53[v50 + 1], a9);
    copy_mem16x16(v52 + 2, a4, v53 + 2, a9);
    copy_mem16x16(v52 + 3, a4, v53 + 3, a9);
    copy_mem16x16(&v52[v49 + 2], a4, &v53[v50 + 2], a9);
    copy_mem16x16(&v52[v49 + 3], a4, &v53[v50 + 3], a9);
    copy_mem16x16(v56, a5, v57, a10);
    copy_mem16x16(v56 + 1, a5, v57 + 1, a10);
    v54 = a5;
    v55 = a10;
    copy_mem16x16(&v56[v54], a5, &v57[v55], a10);
    copy_mem16x16(&v56[v54 + 1], a5, &v57[v55 + 1], a10);
    copy_mem16x16(v58, a5, v59, a10);
    copy_mem16x16(v58 + 1, a5, v59 + 1, a10);
    copy_mem16x16(&v58[v54], a5, &v59[v55], a10);
    v46 = &v58[v54 + 1];
    v48 = &v59[v55 + 1];
    v47 = a5;
  }
  *(_QWORD *)&result = copy_mem16x16(v46, v47, v48, a10).n128_u64[0];
  return result;
}

__n128 copy_mem16x16(_OWORD *a1, int a2, _OWORD *a3, int a4)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  _OWORD *v19;
  _OWORD *v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  _OWORD *v29;
  _OWORD *v30;
  _OWORD *v31;
  __n128 result;

  *a3 = *a1;
  v4 = (_OWORD *)((char *)a1 + a2);
  v5 = (_OWORD *)((char *)a3 + a4);
  *v5 = *v4;
  v6 = (_OWORD *)((char *)v4 + a2);
  v7 = (_OWORD *)((char *)v5 + a4);
  *v7 = *v6;
  v8 = (_OWORD *)((char *)v6 + a2);
  v9 = (_OWORD *)((char *)v7 + a4);
  *v9 = *v8;
  v10 = (_OWORD *)((char *)v8 + a2);
  v11 = (_OWORD *)((char *)v9 + a4);
  *v11 = *v10;
  v12 = (_OWORD *)((char *)v10 + a2);
  v13 = (_OWORD *)((char *)v11 + a4);
  *v13 = *v12;
  v14 = (_OWORD *)((char *)v12 + a2);
  v15 = (_OWORD *)((char *)v13 + a4);
  *v15 = *v14;
  v16 = (_OWORD *)((char *)v14 + a2);
  v17 = (_OWORD *)((char *)v15 + a4);
  *v17 = *v16;
  v18 = (_OWORD *)((char *)v16 + a2);
  v19 = (_OWORD *)((char *)v17 + a4);
  *v19 = *v18;
  v20 = (_OWORD *)((char *)v18 + a2);
  v21 = (_OWORD *)((char *)v19 + a4);
  *v21 = *v20;
  v22 = (_OWORD *)((char *)v20 + a2);
  v23 = (_OWORD *)((char *)v21 + a4);
  *v23 = *v22;
  v24 = (_OWORD *)((char *)v22 + a2);
  v25 = (_OWORD *)((char *)v23 + a4);
  *v25 = *v24;
  v26 = (_OWORD *)((char *)v24 + a2);
  v27 = (_OWORD *)((char *)v25 + a4);
  *v27 = *v26;
  v28 = (_OWORD *)((char *)v26 + a2);
  v29 = (_OWORD *)((char *)v27 + a4);
  *v29 = *v28;
  v30 = (_OWORD *)((char *)v28 + a2);
  v31 = (_OWORD *)((char *)v29 + a4);
  *v31 = *v30;
  result = *(__n128 *)((char *)v30 + a2);
  *(__n128 *)((char *)v31 + a4) = result;
  return result;
}

uint64_t vp9_row_mt_mem_alloc(_DWORD *a1)
{
  int *v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  size_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  pthread_mutex_t *v14;
  uint64_t v15;
  uint64_t v16;
  int i;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a1 + 211130;
  v3 = a1 + 47482;
  v4 = (uint64_t)(a1 + 42924);
  v5 = a1[47482];
  v6 = a1[47483];
  v7 = 1 << v5;
  v8 = 1 << v6;
  if (a1[43251] <= (a1[43252] + 7) >> 3)
    v9 = (a1[43252] + 7) >> 3;
  else
    v9 = a1[43251];
  *v2 = v8;
  a1[211131] = v7;
  a1[211132] = v9;
  v10 = 24 * (v9 << v5) + 39;
  if (v10 <= 0x10000000000 && (result = (uint64_t)malloc_type_malloc(v10, 0x74AD08B5uLL)) != 0)
  {
    v12 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v12 - 8) = result;
    *((_QWORD *)v2 + 4) = v12;
    if (v12)
    {
      if (v5 == 31)
        goto LABEL_23;
      goto LABEL_11;
    }
  }
  else
  {
    *((_QWORD *)v2 + 4) = 0;
  }
  result = vpx_internal_error(v4, 2, "Failed to allocate multi_thread_ctxt->job_queue");
  if (v5 == 31)
    goto LABEL_23;
LABEL_11:
  if (v7 <= 1)
    v13 = 1;
  else
    v13 = v7;
  v14 = (pthread_mutex_t *)(a1 + 211146);
  v15 = v13;
  do
  {
    pthread_mutex_init(v14, 0);
    v14 = (pthread_mutex_t *)((char *)v14 + 80);
    --v15;
  }
  while (v15);
  v16 = 0;
  do
  {
    result = vp9_row_mt_sync_mem_alloc(*((_QWORD *)v3 + 570) + v16 + 3672, v4, v9);
    v16 += 3720;
  }
  while (3720 * v13 != v16);
  if (v8 >= 2)
  {
    for (i = 1; i != v8; ++i)
    {
      v18 = 0;
      do
      {
        v19 = (_OWORD *)(*((_QWORD *)v3 + 570) + v18);
        v20 = (_OWORD *)((char *)v19 + 3720 * (i << v5) + 3672);
        v19 = (_OWORD *)((char *)v19 + 3672);
        v21 = v19[1];
        *v20 = *v19;
        v20[1] = v21;
        v18 += 3720;
      }
      while (3720 * v13 != v18);
    }
  }
LABEL_23:
  if (v6 != 31)
  {
    v22 = 0;
    v23 = *((_QWORD *)v3 + 570);
    if (v8 <= 1)
      v24 = 1;
    else
      v24 = v8;
    do
    {
      a1[v22 + 211133] = (*(_DWORD *)(v23 + 3720 * (int)((_DWORD)v22 << v5) + 4)
                        - *(_DWORD *)(v23 + 3720 * (int)((_DWORD)v22 << v5))
                        + 7) >> 3;
      ++v22;
    }
    while (v24 != v22);
  }
  return result;
}

void vp9_row_mt_mem_dealloc(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  pthread_mutex_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v2 = a1 + 844520;
  v3 = (_QWORD *)(a1 + 194488);
  v4 = *(_QWORD *)(a1 + 844552);
  if (v4)
  {
    free(*(void **)(v4 - 8));
    *(_QWORD *)(v2 + 32) = 0;
  }
  LODWORD(v5) = *(_DWORD *)(v2 + 4);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = (pthread_mutex_t *)(a1 + 844584);
    do
    {
      pthread_mutex_destroy(v7);
      ++v6;
      v5 = *(int *)(v2 + 4);
      v7 = (pthread_mutex_t *)((char *)v7 + 80);
    }
    while (v6 < v5);
    if ((int)v5 >= 1)
    {
      v8 = 0;
      v9 = 3672;
      do
      {
        vp9_row_mt_sync_mem_dealloc((int *)(*v3 + v9));
        ++v8;
        v5 = *(int *)(v2 + 4);
        v9 += 3720;
      }
      while (v8 < v5);
    }
  }
  v10 = *(_DWORD *)v2;
  if (*(int *)v2 >= 1 && (int)v5 >= 1)
  {
    v12 = 0;
    do
    {
      if ((int)v5 >= 1)
      {
        v13 = 0;
        do
        {
          v14 = *v3 + 3720 * (v13 + v12 * (int)v5);
          v15 = *(_QWORD *)(v14 + 3704);
          if (v15)
          {
            v16 = (_QWORD *)(v14 + 3704);
            free(*(void **)(v15 - 8));
            *v16 = 0;
            LODWORD(v5) = *(_DWORD *)(v2 + 4);
          }
          ++v13;
        }
        while ((int)v13 < (int)v5);
        v10 = *(_DWORD *)v2;
      }
      ++v12;
    }
    while (v12 < v10);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
}

void vp9_prepare_job_queue(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  size_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;

  v4 = a1 + 844552;
  v5 = (unsigned int *)(a1 + 842236);
  v6 = *(char **)(a1 + 844552);
  v7 = *(_DWORD *)(a1 + 189928);
  if (a2)
  {
    v8 = *(_DWORD *)(a1 + 173008);
    v9 = (v8 + 3) >> 2;
    v10 = (v8 + 7) >> 3;
    if (a2 != 1)
      v10 = 0;
    if (a2 == 2)
      v11 = v9;
    else
      v11 = v10;
  }
  else
  {
    v11 = *(_DWORD *)(a1 + 173004);
  }
  *(_DWORD *)(a1 + 844560) = v11;
  bzero(v6, 24 * (v11 << v7));
  if (v7 == 31)
  {
    v12 = *v5;
    if ((int)v12 < 1)
      return;
    v13 = *(_QWORD *)(v5 + 3);
    if ((_DWORD)v12 == 1)
    {
      v14 = 0;
LABEL_41:
      v32 = (_DWORD *)(v13 + 280 * v14 + 20);
      do
      {
        *v32 = v14++;
        v32 += 70;
      }
      while (v12 != v14);
      return;
    }
    v30 = 0;
    v14 = v12 & 0xFFFFFFFE;
    v31 = *(_QWORD *)(v5 + 3);
    do
    {
      *(_DWORD *)(v31 + 20) = v30;
      *(_DWORD *)(v31 + 300) = v30 + 1;
      v30 += 2;
      v31 += 560;
    }
    while (v14 != v30);
    if (v14 != v12)
      goto LABEL_41;
  }
  else
  {
    v15 = 1 << v7;
    if (v11 <= 0)
    {
      if (v15 <= 1)
        v25 = 1;
      else
        v25 = v15;
      v26 = (_DWORD *)(v4 + 24);
      do
      {
        *((_QWORD *)v26 - 1) = v6;
        *v26 = 0;
        v26 += 20;
        *((_QWORD *)v6 - 3) = 0;
        v6 += 24 * v11;
        --v25;
      }
      while (v25);
    }
    else
    {
      if (v15 <= 1)
        v16 = 1;
      else
        v16 = v15;
      if (a2 == 1)
      {
        v17 = 0;
        v18 = v6 - 24;
        do
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = a1 + 80 * v17 + 844568;
          *(_QWORD *)v22 = v6;
          *(_DWORD *)(v22 + 8) = 0;
          v23 = v18;
          do
          {
            *((_QWORD *)v23 + 3) = v23 + 48;
            v23 += 24;
            *((_DWORD *)v23 + 2) = v21;
            *((_DWORD *)v23 + 3) = v17;
            *((_DWORD *)v23 + 4) = v19;
            v24 = *(_DWORD *)(a1 + 4 * v19 + 844532) - 1;
            if (v20 >= v24)
              ++v19;
            ++v21;
            if (v20 < v24)
              ++v20;
            else
              v20 = 0;
          }
          while (v11 != v21);
          *(_QWORD *)v23 = 0;
          v6 += 24 * v11;
          ++v17;
          v18 += 24 * v11;
        }
        while (v17 != v16);
      }
      else
      {
        v33 = 0;
        v34 = v11 & 0xFFFFFFFE;
        do
        {
          v36 = 0;
          v37 = a1 + 80 * v33 + 844568;
          *(_QWORD *)v37 = v6;
          *(_DWORD *)(v37 + 8) = 0;
          v38 = v6;
          if (v11 < 2)
            goto LABEL_51;
          v39 = 0;
          v40 = 0;
          v38 = &v6[24 * v34];
          do
          {
            v41 = &v6[v39];
            *((_DWORD *)v41 + 2) = v40;
            *((_DWORD *)v41 + 3) = v33;
            *((_DWORD *)v41 + 8) = v40 + 1;
            *((_DWORD *)v41 + 9) = v33;
            *((_DWORD *)v41 + 4) = 0;
            *((_DWORD *)v41 + 10) = 0;
            *(_QWORD *)&v6[v39 + 24] = &v6[v39 + 48];
            *(_QWORD *)v41 = &v6[v39 + 24];
            v40 += 2;
            v39 += 48;
          }
          while (48 * ((unint64_t)v11 >> 1) != v39);
          v36 = v11 & 0xFFFFFFFE;
          if (v34 == v11)
          {
            v35 = &v6[24 * v34 - 24];
          }
          else
          {
LABEL_51:
            v35 = v38 - 24;
            do
            {
              *((_QWORD *)v35 + 3) = v35 + 48;
              v35 += 24;
              *((_DWORD *)v35 + 2) = v36;
              *((_DWORD *)v35 + 3) = v33;
              *((_DWORD *)v35 + 4) = 0;
              ++v36;
            }
            while (v11 != v36);
          }
          *(_QWORD *)v35 = 0;
          v6 += 24 * v11;
          ++v33;
        }
        while (v33 != v16);
      }
    }
    if ((int)*v5 > 0)
    {
      v27 = 0;
      if (v15 <= 1)
        v15 = 1;
      v28 = 4 * v15;
      v29 = (_DWORD *)(*(_QWORD *)(v5 + 3) + 24);
      do
      {
        *(v29 - 1) = v27;
        bzero(v29, v28);
        ++v27;
        v29 += 70;
      }
      while (v27 < (int)*v5);
    }
  }
}

int16x4_t find_mv_refs_idx(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, int16x4_t *a5, unsigned int a6, int a7, int a8, uint64_t a9)
{
  int *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  char v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  __int32 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  __int32 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  __int32 v66;
  uint64_t v67;
  uint64_t i;
  int v69;
  int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned int v80;
  int v81;
  int v82;
  uint64_t v83;
  int v85;
  int v86;
  BOOL v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  BOOL v95;
  int v96;
  int32x2_t v97;
  int32x4_t v98;
  int32x2_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x4_t result;

  v9 = (int *)((char *)&mv_ref_blocks_0 + 64 * (unint64_t)a3);
  if (*(_DWORD *)(a1 + 1504))
  {
    v10 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8) + 12 * *(_DWORD *)(a1 + 1320) * a7 + 12 * a8);
    v11 = a9;
    *a5 = 0;
    v12 = a6;
    v13 = *v9;
    v14 = *v9 + a7;
    if (v14 < 0)
      goto LABEL_14;
  }
  else
  {
    v10 = 0;
    v11 = a9;
    *a5 = 0;
    v12 = a6;
    v13 = *v9;
    v14 = *v9 + a7;
    if (v14 < 0)
      goto LABEL_14;
  }
  v15 = v9[1];
  v16 = v15 + a8;
  v17 = v14 >= *(_DWORD *)(a1 + 1312) || v16 < *(_DWORD *)(a2 + 432);
  if (v17 || v16 >= *(_DWORD *)(a2 + 436))
  {
LABEL_14:
    v19 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v24 = v9[2];
    v25 = v24 + a7;
    if (v24 + a7 < 0)
      goto LABEL_47;
    goto LABEL_15;
  }
  v18 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 448) + 8 * (v15 + *(_DWORD *)(a2 + 440) * v13));
  v19 = mode_2_counter_0[v18[1]];
  if (v18[8] == a4)
  {
    if ((a6 & 0x80000000) != 0 || *v18 > 2u)
      v20 = v18 + 12;
    else
      v20 = &v18[12 * idx_n_column_to_subblock_0[2 * v12 + (v15 == 0)] + 24];
  }
  else
  {
    if (v18[9] != a4)
    {
      v22 = 0;
      v21 = 1;
      v23 = 1;
      v24 = v9[2];
      v25 = v24 + a7;
      if (v24 + a7 < 0)
        goto LABEL_47;
      goto LABEL_15;
    }
    if ((a6 & 0x80000000) != 0 || *v18 > 2u)
      v20 = v18 + 16;
    else
      v20 = &v18[12 * idx_n_column_to_subblock_0[2 * v12 + (v15 == 0)] + 28];
  }
  v23 = 0;
  a5->i32[0] = *(_DWORD *)v20;
  v21 = 1;
  v22 = 1;
  v24 = v9[2];
  v25 = v24 + a7;
  if (v24 + a7 < 0)
    goto LABEL_47;
LABEL_15:
  v26 = v9[3];
  v27 = v26 + a8;
  v28 = v25 >= *(_DWORD *)(a1 + 1312) || v27 < *(_DWORD *)(a2 + 432);
  if (v28 || v27 >= *(_DWORD *)(a2 + 436))
  {
LABEL_47:
    v32 = v9[4];
    v33 = v32 + a7;
    if (v32 + a7 < 0)
      goto LABEL_69;
    goto LABEL_48;
  }
  v29 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 448) + 8 * (v26 + *(_DWORD *)(a2 + 440) * v24));
  v19 += mode_2_counter_0[v29[1]];
  if (v29[8] == a4)
  {
    if ((v23 & 1) != 0)
    {
      if ((a6 & 0x80000000) != 0 || *v29 >= 3u)
        v30 = v29 + 12;
      else
        v30 = &v29[12 * idx_n_column_to_subblock_0[2 * v12 + (v26 == 0)] + 24];
      goto LABEL_68;
    }
    if ((a6 & 0x80000000) == 0 && *v29 < 3u)
    {
      v31 = *(_DWORD *)&v29[12 * idx_n_column_to_subblock_0[2 * v12 + (v26 == 0)] + 24];
      if (v31 == a5->i32[0])
        goto LABEL_46;
LABEL_215:
      a5->i32[v22] = v31;
      goto LABEL_216;
    }
    v31 = *((_DWORD *)v29 + 3);
    if (v31 != a5->i32[0])
      goto LABEL_215;
LABEL_46:
    v21 = 1;
    goto LABEL_47;
  }
  if (v29[9] != a4)
    goto LABEL_46;
  if ((v23 & 1) == 0)
  {
    if ((a6 & 0x80000000) != 0 || *v29 >= 3u)
    {
      v31 = *((_DWORD *)v29 + 4);
      if (v31 != a5->i32[0])
        goto LABEL_215;
    }
    else
    {
      v31 = *(_DWORD *)&v29[12 * idx_n_column_to_subblock_0[2 * v12 + (v26 == 0)] + 28];
      if (v31 != a5->i32[0])
        goto LABEL_215;
    }
    goto LABEL_46;
  }
  if ((a6 & 0x80000000) != 0 || *v29 >= 3u)
    v30 = v29 + 16;
  else
    v30 = &v29[12 * idx_n_column_to_subblock_0[2 * v12 + (v26 == 0)] + 28];
LABEL_68:
  a5->i32[0] = *(_DWORD *)v30;
  v21 = 1;
  v22 = 1;
  v32 = v9[4];
  v33 = v32 + a7;
  if (v32 + a7 < 0)
    goto LABEL_69;
LABEL_48:
  v34 = v9[5];
  v35 = v34 + a8;
  v36 = v33 >= *(_DWORD *)(a1 + 1312) || v35 < *(_DWORD *)(a2 + 432);
  if (v36 || v35 >= *(_DWORD *)(a2 + 436))
  {
LABEL_69:
    v39 = v9[6];
    v40 = v39 + a7;
    if (v39 + a7 < 0)
      goto LABEL_83;
    goto LABEL_70;
  }
  v37 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v34 + *(_DWORD *)(a2 + 440) * v32));
  if (*(unsigned __int8 *)(v37 + 8) == a4)
  {
    v38 = *(_DWORD *)(v37 + 12);
    if (v22)
      goto LABEL_55;
    goto LABEL_59;
  }
  if (*(unsigned __int8 *)(v37 + 9) == a4)
  {
    v38 = *(_DWORD *)(v37 + 16);
    if (v22)
    {
LABEL_55:
      if (v38 != a5->i32[0])
        goto LABEL_137;
      goto LABEL_60;
    }
LABEL_59:
    a5->i32[0] = v38;
LABEL_60:
    v21 = 1;
    v22 = 1;
    goto LABEL_69;
  }
  v21 = 1;
  v39 = v9[6];
  v40 = v39 + a7;
  if (v39 + a7 < 0)
    goto LABEL_83;
LABEL_70:
  v41 = v9[7];
  v42 = v41 + a8;
  v43 = v40 >= *(_DWORD *)(a1 + 1312) || v42 < *(_DWORD *)(a2 + 432);
  if (v43 || v42 >= *(_DWORD *)(a2 + 436))
  {
LABEL_83:
    v45 = v9[8];
    v46 = v45 + a7;
    if (v45 + a7 < 0)
      goto LABEL_97;
    goto LABEL_84;
  }
  v44 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v41 + *(_DWORD *)(a2 + 440) * v39));
  if (*(unsigned __int8 *)(v44 + 8) == a4)
  {
    v38 = *(_DWORD *)(v44 + 12);
    if (v22)
      goto LABEL_77;
    goto LABEL_81;
  }
  if (*(unsigned __int8 *)(v44 + 9) == a4)
  {
    v38 = *(_DWORD *)(v44 + 16);
    if (v22)
    {
LABEL_77:
      if (v38 != a5->i32[0])
        goto LABEL_137;
      goto LABEL_82;
    }
LABEL_81:
    a5->i32[0] = v38;
LABEL_82:
    v21 = 1;
    v22 = 1;
    goto LABEL_83;
  }
  v21 = 1;
  v45 = v9[8];
  v46 = v45 + a7;
  if (v45 + a7 < 0)
    goto LABEL_97;
LABEL_84:
  v47 = v9[9];
  v48 = v47 + a8;
  v49 = v46 >= *(_DWORD *)(a1 + 1312) || v48 < *(_DWORD *)(a2 + 432);
  if (v49 || v48 >= *(_DWORD *)(a2 + 436))
  {
LABEL_97:
    v51 = v9[10];
    v52 = v51 + a7;
    if (v51 + a7 < 0)
      goto LABEL_116;
    goto LABEL_98;
  }
  v50 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v47 + *(_DWORD *)(a2 + 440) * v45));
  if (*(unsigned __int8 *)(v50 + 8) == a4)
  {
    v38 = *(_DWORD *)(v50 + 12);
    if (v22)
      goto LABEL_91;
    goto LABEL_95;
  }
  if (*(unsigned __int8 *)(v50 + 9) == a4)
  {
    v38 = *(_DWORD *)(v50 + 16);
    if (v22)
    {
LABEL_91:
      if (v38 != a5->i32[0])
        goto LABEL_137;
      goto LABEL_96;
    }
LABEL_95:
    a5->i32[0] = v38;
LABEL_96:
    v21 = 1;
    v22 = 1;
    goto LABEL_97;
  }
  v21 = 1;
  v51 = v9[10];
  v52 = v51 + a7;
  if (v51 + a7 < 0)
    goto LABEL_116;
LABEL_98:
  v53 = v9[11];
  v54 = v53 + a8;
  v55 = v52 >= *(_DWORD *)(a1 + 1312) || v54 < *(_DWORD *)(a2 + 432);
  if (!v55 && v54 < *(_DWORD *)(a2 + 436))
  {
    v56 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v53 + *(_DWORD *)(a2 + 440) * v51));
    if (*(unsigned __int8 *)(v56 + 8) == a4)
    {
      v38 = *(_DWORD *)(v56 + 12);
      if (v22)
      {
LABEL_105:
        if (v38 != a5->i32[0])
          goto LABEL_137;
        goto LABEL_110;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(v56 + 9) != a4)
      {
        v21 = 1;
        goto LABEL_116;
      }
      v38 = *(_DWORD *)(v56 + 16);
      if (v22)
        goto LABEL_105;
    }
    a5->i32[0] = v38;
LABEL_110:
    v21 = 1;
    v22 = 1;
  }
LABEL_116:
  v57 = v9[12];
  if (v57 + a7 >= 0)
  {
    v58 = v9[13];
    v59 = v58 + a8;
    v60 = v57 + a7 >= *(_DWORD *)(a1 + 1312) || v59 < *(_DWORD *)(a2 + 432);
    if (!v60 && v59 < *(_DWORD *)(a2 + 436))
    {
      v61 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v58 + *(_DWORD *)(a2 + 440) * v57));
      if (*(unsigned __int8 *)(v61 + 8) == a4)
      {
        v38 = *(_DWORD *)(v61 + 12);
        if (v22)
        {
LABEL_124:
          if (v38 != a5->i32[0])
            goto LABEL_137;
          goto LABEL_129;
        }
      }
      else
      {
        if (*(unsigned __int8 *)(v61 + 9) != a4)
        {
          v21 = 1;
          v62 = v9[14];
          v63 = v62 + a7;
          if (v62 + a7 < 0)
            goto LABEL_145;
          goto LABEL_131;
        }
        v38 = *(_DWORD *)(v61 + 16);
        if (v22)
          goto LABEL_124;
      }
      a5->i32[0] = v38;
LABEL_129:
      v21 = 1;
      v22 = 1;
    }
  }
  v62 = v9[14];
  v63 = v62 + a7;
  if (v62 + a7 < 0)
    goto LABEL_145;
LABEL_131:
  if (v63 < *(_DWORD *)(a1 + 1312))
  {
    v64 = v9[15];
    if (v64 + a8 >= *(_DWORD *)(a2 + 432) && v64 + a8 < *(_DWORD *)(a2 + 436))
    {
      v65 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v64 + *(_DWORD *)(a2 + 440) * v62));
      if (*(unsigned __int8 *)(v65 + 8) == a4)
      {
        v38 = *(_DWORD *)(v65 + 12);
        if (v22)
          goto LABEL_136;
        goto LABEL_140;
      }
      if (*(unsigned __int8 *)(v65 + 9) == a4)
      {
        v38 = *(_DWORD *)(v65 + 16);
        if (v22)
        {
LABEL_136:
          if (v38 != a5->i32[0])
          {
LABEL_137:
            a5->i32[1] = v38;
            goto LABEL_216;
          }
          goto LABEL_141;
        }
LABEL_140:
        a5->i32[0] = v38;
LABEL_141:
        v21 = 1;
        v22 = 1;
        goto LABEL_145;
      }
      v21 = 1;
    }
  }
LABEL_145:
  if (*(_DWORD *)(a1 + 1504))
  {
    if (*((unsigned __int8 *)v10 + 8) == a4)
    {
      v66 = *(_DWORD *)v10;
      if (v22)
        goto LABEL_148;
      goto LABEL_152;
    }
    if (*((unsigned __int8 *)v10 + 9) == a4)
    {
      v66 = *((_DWORD *)v10 + 1);
      if (v22)
      {
LABEL_148:
        if (v66 != a5->i32[0])
        {
          a5->i32[1] = v66;
          goto LABEL_216;
        }
        goto LABEL_153;
      }
LABEL_152:
      a5->i32[0] = v66;
LABEL_153:
      v22 = 1;
    }
  }
  v67 = a1 + 4708;
  if (v21)
  {
    for (i = 0; i != 16; i += 2)
    {
      v69 = v9[i];
      if (v69 + a7 >= 0)
      {
        v70 = v9[i + 1];
        v71 = v70 + a8;
        if (v69 + a7 < *(_DWORD *)(a1 + 1312) && v71 >= *(_DWORD *)(a2 + 432) && v71 < *(_DWORD *)(a2 + 436))
        {
          v73 = *(_QWORD *)(*(_QWORD *)(a2 + 448) + 8 * (v70 + *(_DWORD *)(a2 + 440) * v69));
          if (*(char *)(v73 + 8) >= 1)
          {
            v74 = *(unsigned __int8 *)(v73 + 8);
            if ((_DWORD)v74 != a4)
            {
              v75 = *(unsigned __int16 *)(v73 + 14);
              if (*(_DWORD *)(v67 + 4 * v74) == *(_DWORD *)(v67 + 4 * a4))
              {
                LOWORD(v76) = *(_WORD *)(v73 + 12);
              }
              else
              {
                v75 = -v75;
                v76 = -*(unsigned __int16 *)(v73 + 12);
              }
              v77 = (unsigned __int16)v76 | ((unsigned __int16)v75 << 16);
              if (v22)
              {
                if (v77 != a5->i32[0])
                {
                  a5->i32[1] = v77;
                  goto LABEL_216;
                }
              }
              else
              {
                a5->i32[0] = v77;
              }
              v22 = 1;
            }
            v78 = *(char *)(v73 + 9);
            if (v78 >= 1 && v78 != a4)
            {
              v80 = *(_DWORD *)(v73 + 16);
              if (v80 != *(_DWORD *)(v73 + 12))
              {
                v81 = HIWORD(v80);
                if (*(_DWORD *)(v67 + 4 * *(unsigned __int8 *)(v73 + 9)) == *(_DWORD *)(v67 + 4 * a4))
                {
                  LOWORD(v73) = *(_DWORD *)(v73 + 16);
                }
                else
                {
                  v81 = -v81;
                  LODWORD(v73) = -v80;
                }
                v82 = (unsigned __int16)v73 | ((unsigned __int16)v81 << 16);
                if (v22)
                {
                  if (v82 != a5->i32[0])
                  {
                    a5->i32[1] = v82;
                    goto LABEL_216;
                  }
                }
                else
                {
                  a5->i32[0] = v82;
                }
                v22 = 1;
              }
            }
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 1504))
  {
    v83 = *((unsigned __int8 *)v10 + 8);
    if ((_DWORD)v83 != a4 && (char)v83 >= 1)
    {
      v85 = *(_DWORD *)(v67 + 4 * v83);
      v86 = *(_DWORD *)(v67 + 4 * a4);
      v87 = v85 == v86;
      if (v85 == v86)
        LOWORD(v88) = *v10;
      else
        v88 = -*v10;
      if (v87)
        LOWORD(v89) = v10[1];
      else
        v89 = -v10[1];
      if (v22)
      {
        if (((unsigned __int16)v88 | ((unsigned __int16)v89 << 16)) != a5->i32[0])
        {
          a5->i16[2] = v88;
          a5->i16[3] = v89;
          goto LABEL_216;
        }
      }
      else
      {
        a5->i16[0] = v88;
        a5->i16[1] = v89;
      }
      v22 = 1;
    }
    v90 = *((char *)v10 + 9);
    if (v90 >= 1 && v90 != a4)
    {
      v91 = *((_DWORD *)v10 + 1);
      if (v91 != *(_DWORD *)v10)
      {
        v92 = *(_DWORD *)(v67 + 4 * *((unsigned __int8 *)v10 + 9));
        v93 = HIWORD(v91);
        v94 = *(_DWORD *)(v67 + 4 * a4);
        v95 = v92 == v94;
        if (v92 == v94)
          LOWORD(v96) = v91;
        else
          v96 = -v91;
        if (!v95)
          v93 = -v93;
        if (v22)
        {
          if (((unsigned __int16)v96 | ((unsigned __int16)v93 << 16)) != a5->i32[0])
          {
            a5->i16[2] = v96;
            a5->i16[3] = v93;
          }
        }
        else
        {
          a5->i16[0] = v96;
          a5->i16[1] = v93;
        }
      }
    }
  }
LABEL_216:
  *(_BYTE *)(v11 + a4) = counter_to_context_0[v19];
  v97.i32[0] = *(_DWORD *)(a2 + 496);
  v97.i32[1] = *(_DWORD *)(a2 + 488);
  *(int32x2_t *)v98.i8 = vadd_s32(v97, (int32x2_t)0x7F0000007FLL);
  v98.i64[1] = v98.i64[0];
  v99.i32[0] = *(_DWORD *)(a2 + 500);
  v99.i32[1] = *(_DWORD *)(a2 + 492);
  *(int32x2_t *)v100.i8 = vadd_s32(v99, (int32x2_t)0x8000000080);
  v100.i64[1] = v100.i64[0];
  v101 = vmovl_s16(*a5);
  result = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v98, v101), (int8x16_t)v98, (int8x16_t)vminq_s32(v101, v100)));
  *a5 = result;
  return result;
}

_DWORD *vp9_find_best_ref_mvs(_DWORD *result, int a2, __int16 *a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  __int16 v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;

  v5 = result[122] - 1248;
  v6 = result[123] + 1248;
  v7 = result[124] - 1248;
  v8 = result[125] + 1248;
  v9 = *a3;
  if (a2)
  {
    if (v9 >= 0)
      LOWORD(v10) = *a3;
    else
      v10 = -v9;
    v11 = (unsigned __int16)v10;
    v12 = a3[1];
    if (v12 >= 0)
      LOWORD(v13) = a3[1];
    else
      v13 = -v12;
    if (v11 > 0x3F || (unsigned __int16)v13 >= 0x40u)
    {
      if (v9 < 1)
        v14 = 1;
      else
        v14 = -1;
      LOWORD(v9) = (((__int16)((_WORD)v9 << 15) >> 15) & v14) + v9;
      v15 = v12 - 1;
      if (v12 < 1)
        v15 = v12 + 1;
      if ((v12 & 1) != 0)
        LOWORD(v12) = v15;
    }
    if ((__int16)v12 >= v6)
      v16 = *((_WORD *)result + 246) + 1248;
    else
      v16 = v12;
    if (v5 <= (__int16)v12)
      v17 = v16;
    else
      v17 = *((_WORD *)result + 244) - 1248;
    a3[1] = v17;
    if ((__int16)v9 >= v8)
      v18 = v8;
    else
      v18 = v9;
    if (v7 <= (__int16)v9)
      v19 = v18;
    else
      v19 = v7;
    *a3 = v19;
    v20 = a3[2];
    if (v20 >= 0)
      LOWORD(v21) = a3[2];
    else
      v21 = -v20;
    v22 = (unsigned __int16)v21;
    v23 = a3[3];
    if (v23 >= 0)
      LOWORD(v24) = a3[3];
    else
      v24 = -v23;
    if (v22 > 0x3F || (unsigned __int16)v24 >= 0x40u)
    {
      if (v20 < 1)
        v25 = 1;
      else
        v25 = -1;
      LOWORD(v20) = (((__int16)((_WORD)v20 << 15) >> 15) & v25) + v20;
      v26 = v23 - 1;
      if (v23 < 1)
        v26 = v23 + 1;
      if ((v23 & 1) != 0)
        LOWORD(v23) = v26;
    }
  }
  else
  {
    if (v9 < 1)
      v27 = 1;
    else
      v27 = -1;
    v28 = (((__int16)((_WORD)v9 << 15) >> 15) & v27) + v9;
    v29 = a3[1];
    if (v29 < 1)
      v30 = 1;
    else
      v30 = -1;
    v31 = (__int16)((((__int16)((_WORD)v29 << 15) >> 15) & v30) + v29);
    if (v31 >= v6)
      v32 = *((_WORD *)result + 246) + 1248;
    else
      v32 = v31;
    if (v5 <= v31)
      v33 = v32;
    else
      v33 = *((_WORD *)result + 244) - 1248;
    a3[1] = v33;
    if (v28 >= v8)
      v34 = v8;
    else
      v34 = v28;
    if (v7 <= v28)
      v35 = v34;
    else
      v35 = v7;
    *a3 = v35;
    v20 = a3[2];
    if (v20 < 1)
      v36 = 1;
    else
      v36 = -1;
    LOWORD(v20) = (((__int16)((_WORD)v20 << 15) >> 15) & v36) + v20;
    v23 = a3[3];
    if (v23 < 1)
      v37 = 1;
    else
      v37 = -1;
    LOWORD(v23) = (((__int16)((_WORD)v23 << 15) >> 15) & v37) + v23;
  }
  if ((__int16)v23 < v6)
    LOWORD(v6) = v23;
  if (v5 <= (__int16)v23)
    LOWORD(v5) = v6;
  a3[3] = v5;
  if ((__int16)v20 < v8)
    LOWORD(v8) = v20;
  if (v7 <= (__int16)v20)
    LOWORD(v7) = v8;
  a3[2] = v7;
  *a4 = *(_DWORD *)a3;
  *a5 = *((_DWORD *)a3 + 1);
  return result;
}

uint64_t vp9_noise_estimate_init(uint64_t result, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  v3 = a3 * a2;
  if (a3 * a2 <= 2073599)
    v4 = 140;
  else
    v4 = 200;
  if (v3 <= 2073599)
    v5 = 210;
  else
    v5 = 300;
  *(_QWORD *)(result + 8) = 0x5A00000000;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)result = 0;
  *(_DWORD *)(result + 4) = v3 >= 921600;
  if (v3 >= 921600)
    goto LABEL_10;
  if (v3 >= 230400)
  {
    v5 = 172;
    v4 = 115;
LABEL_10:
    *(_DWORD *)(result + 12) = v4;
    *(_DWORD *)(result + 16) = v5;
    *(_DWORD *)(result + 32) = 15;
    return result;
  }
  *(_DWORD *)(result + 32) = 15;
  *(_DWORD *)(result + 16) = 135;
  return result;
}

int *vp9_update_noise_estimate(int *result, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint32x4_t a9)
{
  int *v9;
  int *v10;
  int *v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  _BOOL4 v16;
  int *v17;
  int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  char v25;
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  int8x16_t *v44;
  uint32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  unint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint32x4_t v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  __int8 *v69;
  int v71;
  int v72;
  int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  _BOOL4 v81;
  unsigned int v82;
  unsigned __int32 v83;
  unsigned __int32 v84;
  __int32 v85;
  __int32 v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned __int32 v91;
  unsigned int v92;
  unsigned int v93;
  signed int v94;
  int v95;
  signed int v96;
  int v97;
  int v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int *v102;
  int *v103;
  int *v104;
  int *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  int *v111;
  int *v112;
  int v113;
  _DWORD v114[20];
  uint32x4_t v115[4];
  __int128 v116;
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v9 = result + 210474;
  v10 = result + 186878;
  v11 = result + 184642;
  v12 = result + 47610;
  v13 = result + 47461;
  v14 = result + 42997;
  v15 = result[42997];
  v16 = v15 <= 352 && result[42998] < 289;
  v17 = result + 208667;
  v18 = *v13;
  v19 = (int *)*((_QWORD *)result + 23806);
  v20 = result[47512];
  if (v20 >= 1)
  {
    v21 = result[186877];
    if (v21 && (v22 = *v10, v23 = result[186880] - 1, *v10 != v23))
    {
      v24 = 6;
      if (result[43005])
        goto LABEL_32;
    }
    else
    {
      v19 = result + 210474;
      if ((v15 - 641) >= 0x500)
        v24 = 6;
      else
        v24 = 2;
      if (result[43005])
      {
LABEL_32:
        v25 = 1;
        result[210532] = 0;
        v26 = result[186880];
        if (v26 < 2)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (!v21)
      {
        if (v15 < 320)
          goto LABEL_23;
        goto LABEL_20;
      }
      v22 = *v10;
      v23 = result[186880] - 1;
    }
    if (v15 < 320 || v22 != v23)
      goto LABEL_23;
LABEL_20:
    if (result[42998] > 179)
      goto LABEL_21;
    goto LABEL_23;
  }
  v24 = 6;
  if (result[43005])
    goto LABEL_32;
LABEL_23:
  if (result[47519]
    || result[47523] != 1
    || result[47537] != 3
    || result[47514] < 5
    || result[210523]
    || result[210522]
    || result[186877]
    || result[47595] == 1
    || result[42998] * v15 <= 230399)
  {
    goto LABEL_32;
  }
LABEL_21:
  v25 = 0;
  result[210532] = 1;
  v26 = result[186880];
  if (v26 >= 2)
LABEL_33:
    v18 = result[208672];
LABEL_34:
  if ((v25 & 1) != 0
    || (v18 & 7) != 0
    || !v19
    || v26 == 1 && (result[210538] != v15 || result[210539] != result[42998]))
  {
    if (v20 >= 1 && (!result[186877] || *v10 == v26 - 1) && result[210475] >= 1)
    {
      v27 = 0;
      v28 = *(_QWORD *)v12;
      v29 = (char *)*((_QWORD *)result + 105244);
      v30 = *(char **)(*(_QWORD *)v12 + 56);
      do
      {
        result = (int *)memcpy(v29, v30, *v9);
        v29 += v9[4];
        v30 += *(int *)(v28 + 16);
        ++v27;
      }
      while (v27 < v9[1]);
    }
    if (v19)
      *((_QWORD *)v9 + 32) = *(_QWORD *)v14;
    return result;
  }
  if (v18 >= 61 && result[208856] > 1 && *v11 > v26 && *v10 == v26 - 1)
  {
    v31 = v16 ? 60 : 40;
    if (result[184768] < v31)
    {
      result[210533] = 0;
      result[210537] = 0;
      result[210540] = 10;
      if (v20 >= 1 && result[208672] >= 2)
      {
        result[210515] = 0;
        result[210519] = 0;
        result[210520] = 0;
        return copy_frame(result + 210474, *(_QWORD *)v12);
      }
      return result;
    }
  }
  v116 = 0u;
  memset(v115, 0, sizeof(v115));
  v32 = result[43252];
  if ((int)v32 < 1)
    goto LABEL_112;
  v33 = result[43254];
  if ((int)v33 < 1)
    goto LABEL_112;
  v34 = 0;
  v35 = 0;
  v36 = *(int *)(*(_QWORD *)v12 + 16);
  v37 = *((_QWORD *)v19 + 7);
  v38 = v19[4];
  v40 = *(_QWORD *)(*(_QWORD *)v12 + 56);
  v39 = *(_QWORD *)(*(_QWORD *)v12 + 64);
  v41 = *(_QWORD *)(*(_QWORD *)v12 + 72);
  v42 = *(int *)(*(_QWORD *)v12 + 36);
  v43 = (int8x16_t *)*((_QWORD *)result + 105271);
  v44 = v43 + 1;
  v45 = (uint32x4_t)vdupq_n_s32(v24);
  do
  {
    if (v33 >= 8)
    {
      if (v33 < 0x20)
      {
        v47 = 0;
LABEL_72:
        v59 = 0uLL;
        v60 = (int32x4_t)v35;
        v61 = (unint64_t *)((char *)v43->u64 + v47);
        v62 = v47 - (v33 & 0xFFFFFFF8);
        do
        {
          v63 = *v61++;
          a9.i64[0] = v63;
          v64 = (uint32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_208F04F40);
          a9 = vcgtq_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)a9, (int8x16_t)xmmword_208F04F50), v45);
          v59 = vsubq_s32(v59, (int32x4_t)vcgtq_u32(v64, v45));
          v60 = vsubq_s32(v60, (int32x4_t)a9);
          v62 += 8;
        }
        while (v62);
        v35 = vaddvq_s32(vaddq_s32(v60, v59));
        v46 = v33 & 0xFFFFFFF8;
        if (v46 == v33)
          goto LABEL_63;
        goto LABEL_75;
      }
      v48 = 0uLL;
      v49 = (int32x4_t)v35;
      v50 = v33 & 0xFFFFFFE0;
      v51 = v44;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = 0uLL;
      do
      {
        v58 = v51[-1];
        v52 = vsubq_s32(v52, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F30), v45));
        v48 = vsubq_s32(v48, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F40), v45));
        v49 = vsubq_s32(v49, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F50), v45));
        v53 = vsubq_s32(v53, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(v58, (int8x16_t)xmmword_208F04F20), v45));
        v56 = vsubq_s32(v56, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_208F04F30), v45));
        v55 = vsubq_s32(v55, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_208F04F40), v45));
        v54 = vsubq_s32(v54, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_208F04F50), v45));
        v57 = vsubq_s32(v57, (int32x4_t)vcgtq_u32((uint32x4_t)vqtbl1q_s8(*v51, (int8x16_t)xmmword_208F04F20), v45));
        v51 += 2;
        v50 -= 32;
      }
      while (v50);
      a9 = (uint32x4_t)vaddq_s32(v56, v52);
      v35 = vaddvq_s32(vaddq_s32(vaddq_s32(vaddq_s32(v54, v49), (int32x4_t)a9), vaddq_s32(vaddq_s32(v55, v48), vaddq_s32(v57, v53))));
      if ((v33 & 0xFFFFFFE0) == v33)
        goto LABEL_63;
      v47 = v33 & 0x7FFFFFE0;
      v46 = v33 & 0xFFFFFFE0;
      if ((v33 & 0x18) != 0)
        goto LABEL_72;
    }
    else
    {
      v46 = 0;
    }
    do
    {
LABEL_75:
      if (v24 < v43->u8[v46])
        ++v35;
      ++v46;
    }
    while (v33 != v46);
LABEL_63:
    ++v34;
    v44 = (int8x16_t *)((char *)v44 + v33);
    v43 = (int8x16_t *)((char *)v43 + v33);
  }
  while (v34 != v32);
  if ((int)v35 < (3 * (int)v32 * (int)v33) >> 3)
  {
LABEL_112:
    v83 = 0;
    v84 = 0;
    result[210538] = v15;
    result[210539] = result[42998];
    goto LABEL_116;
  }
  v102 = result + 47461;
  v103 = result;
  v104 = result + 186878;
  v105 = result + 47610;
  v65 = 0;
  v107 = 8 * v36 + 8;
  v108 = *(_DWORD *)(*(_QWORD *)v12 + 36);
  v106 = 4 * v42 + 4;
  v66 = 1;
  v111 = result + 208667;
  v112 = result + 184642;
  v110 = v36;
  v109 = v38;
  do
  {
    if ((int)v33 >= 1)
    {
      v68 = 0;
      while (1)
      {
        if (((v68 | v65) & 3) != 0)
          goto LABEL_88;
        if (v65 >= v14[255] - 1 || v68 >= (int)v33 - 1)
          goto LABEL_88;
        v71 = v68 + v65 * v33;
        v72 = v71 + 1;
        v73 = v68 + v66 * v33;
        v74 = *((_QWORD *)v9 + 34);
        v75 = *(unsigned __int8 *)(v74 + v71);
        v76 = *(unsigned __int8 *)(v74 + v72);
        v77 = v73 + 1;
        v78 = *(unsigned __int8 *)(v74 + v73);
        v79 = *(unsigned __int8 *)(v74 + v77);
        if (v78 >= v79)
          v78 = v79;
        if (v76 < v78)
          v78 = v76;
        if (v78 < v75)
          v75 = v78;
        if (v24 >= v75 || v11[122] || v17[121])
          goto LABEL_88;
        if (v75 <= 0x3C && v9[56] != 0)
        {
          v81 = vpx_skin_pixel(*(unsigned __int8 *)(v40 + v107), *(unsigned __int8 *)(v39 + v106), *(unsigned __int8 *)(v41 + v106), v75 < 0x1A);
          LODWORD(v42) = v108;
          v38 = v109;
          v36 = v110;
          v17 = v111;
          v11 = v112;
          if (v81)
            goto LABEL_88;
        }
        v113 = 0;
        v82 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *))v11 + 288))(v40, v36, v37, v38, &v113);
        if (v82 < 0x7D0)
        {
          v69 = &v115[0].i8[4 * ((unsigned __int16)v82 / 0x64u)];
        }
        else
        {
          v69 = (char *)&v116 + 12;
          if (v82 >= 0xBB8)
            goto LABEL_87;
        }
        ++*(_DWORD *)v69;
LABEL_87:
        v17 = v111;
        v11 = v112;
        v36 = v110;
        v38 = v109;
        LODWORD(v42) = v108;
LABEL_88:
        v40 += 8;
        v37 += 8;
        v39 += 4;
        v41 += 4;
        ++v68;
        LODWORD(v33) = v14[257];
        if (v68 >= (int)v33)
        {
          LODWORD(v32) = v14[255];
          break;
        }
      }
    }
    v40 += 8 * ((int)v36 - (int)v33);
    v37 += 8 * ((int)v38 - (int)v33);
    v67 = 4 * ((int)v42 - (int)v33);
    v39 += v67;
    v41 += v67;
    ++v65;
    ++v66;
  }
  while (v65 < (int)v32);
  v84 = v115[0].i32[0];
  v83 = HIDWORD(v116);
  v10 = v104;
  v12 = v105;
  v13 = v102;
  result = v103;
  v9[64] = *v14;
  v9[65] = v14[1];
  if (v84 < 0xB || v83 <= v84 >> 2)
  {
LABEL_116:
    v86 = v115[0].i32[1];
    v85 = v115[0].i32[2];
    goto LABEL_117;
  }
  v84 = 0;
  v115[0].i32[0] = 0;
  *(uint32x4_t *)((char *)v115 + 4) = vshlq_u32(*(uint32x4_t *)((char *)v115 + 4), (uint32x4_t)xmmword_208F4A680);
  v115[1].i32[1] = (unsigned __int32)v115[1].i32[1] >> 1;
  v115[1].i32[2] = (3 * v115[1].i32[2]) >> 1;
  v83 >>= 1;
  HIDWORD(v116) = v83;
  v85 = v115[0].i32[2];
  v86 = v115[0].i32[1];
LABEL_117:
  v87 = 0;
  v88 = 0;
  v89 = 0;
  v90 = (DWORD1(v116) + (v83 >> 1) + 2 * DWORD2(v116) + 2) >> 2;
  v91 = v83 >> 2;
  v92 = (v86 + v84 + v85) / 3;
  do
  {
    if ((_DWORD)v87 == 19)
    {
      v114[19] = v91;
    }
    else if ((_DWORD)v87 == 18)
    {
      v114[18] = v90;
    }
    else if ((_DWORD)v87)
    {
      v114[v87] = (v115[0].i32[(v87 - 1)] + 2 * v115[0].i32[v87] + v115[0].i32[v87 + 1] + 2) >> 2;
    }
    else
    {
      v114[0] = v92;
    }
    if (v114[v87] > v88)
    {
      v89 = v87;
      v88 = v114[v87];
    }
    ++v87;
  }
  while (v87 != 20);
  v93 = v9[59];
  v94 = (3 * v9[60] + 40 * v89) >> 2;
  v9[60] = v94;
  if (v93 > 1 || v94 <= v9[62])
  {
    v95 = v9[63] + 1;
    v9[63] = v95;
    if (v95 != v9[66])
    {
      if (v13[51] < 1)
        return result;
      goto LABEL_145;
    }
  }
  v9[66] = 30;
  v9[63] = 0;
  v96 = v9[61];
  if (v94 <= 2 * v96)
  {
    if (v94 <= v96)
      v97 = v94 > v96 >> 1;
    else
      v97 = 2;
  }
  else
  {
    v97 = 3;
  }
  v9[59] = v97;
  if (v13[51] <= 0)
    return result;
  if (v11[2235] && *v10 != v10[2] - 1)
  {
LABEL_145:
    if (v11[2235])
      goto LABEL_146;
    goto LABEL_147;
  }
  v9[45] = v97;
  if (!v97 || v9[46])
  {
    v9[41] = 0;
    goto LABEL_144;
  }
  v9[41] = 1;
  if (!*v17)
  {
LABEL_144:
    v9[46] = v97;
    goto LABEL_145;
  }
  v12[1020] = result[2 * (*v10 - (v10[2] == 3)) + 208668];
  v12[1031] = 1;
  v9[46] = v97;
  if (!v11[2235])
    goto LABEL_147;
LABEL_146:
  if (*v10 == v10[2] - 1)
  {
LABEL_147:
    if (v9[1] >= 1)
    {
      v98 = 0;
      v99 = *(_QWORD *)v12;
      v100 = (char *)*((_QWORD *)v9 + 7);
      v101 = *(char **)(*(_QWORD *)v12 + 56);
      do
      {
        result = (int *)memcpy(v100, v101, *v9);
        v100 += v9[4];
        v101 += *(int *)(v99 + 16);
        ++v98;
      }
      while (v98 < v9[1]);
    }
  }
  return result;
}

int *copy_frame(int *result, uint64_t a2)
{
  int *v3;
  int v4;
  char *v5;
  char *v6;

  if (result[1] >= 1)
  {
    v3 = result;
    v4 = 0;
    v5 = (char *)*((_QWORD *)result + 7);
    v6 = *(char **)(a2 + 56);
    do
    {
      result = (int *)memcpy(v5, v6, *v3);
      v5 += v3[4];
      v6 += *(int *)(a2 + 16);
      ++v4;
    }
    while (v4 < v3[1]);
  }
  return result;
}

uint64_t vp9_pick_filter_level(uint64_t result, uint64_t a2, unsigned int a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _WORD *v11;
  int *v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  __int128 v21;
  int *v22;
  const void *v23;
  void *v24;
  int v25;
  int v26;
  int v27;
  char *v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  char v44;
  BOOL v45;
  int v46;
  char v47;
  int v48;
  int v49;
  uint64_t v50;
  _BOOL4 v51;
  uint64_t v52;
  _OWORD v54[32];
  uint64_t v55;

  v52 = result;
  v55 = *MEMORY[0x24BDAC8D0];
  v3 = (_DWORD *)(a2 + 741328);
  v4 = a2 + 176424;
  v5 = a2 + 171988;
  *(_DWORD *)(v4 + 8) = 0;
  if (a3 != 3)
  {
    if (a3 >= 2)
      goto LABEL_5;
    v12 = (int *)(a2 + 194640);
    v51 = a3 == 1;
    v13 = *(_DWORD *)(v5 + 984);
    v14 = 63;
    if (*(_DWORD *)(v4 + 13652) == 2)
    {
      v15 = v3 + 1;
      if (v13)
        v15 = v3;
      if (*v15 <= 8u)
        v14 = 63;
      else
        v14 = 47;
    }
    v16 = *(_DWORD *)(v4 + 4);
    if (v16 >= v14)
      v17 = v14;
    else
      v17 = *(_DWORD *)(v4 + 4);
    if (v16 >= 0)
      v18 = v17;
    else
      v18 = 0;
    if (v13)
      v19 = v3;
    else
      v19 = v3 + 1;
    v20 = *v19;
    *(_QWORD *)&v21 = -1;
    *((_QWORD *)&v21 + 1) = -1;
    v54[0] = v21;
    v54[1] = v21;
    v54[2] = v21;
    v54[3] = v21;
    v54[4] = v21;
    v54[5] = v21;
    v54[6] = v21;
    v54[7] = v21;
    v54[8] = v21;
    v54[9] = v21;
    v54[10] = v21;
    v54[11] = v21;
    v54[12] = v21;
    v54[13] = v21;
    v54[14] = v21;
    v54[15] = v21;
    v54[16] = v21;
    v54[17] = v21;
    v54[18] = v21;
    v54[19] = v21;
    v54[20] = v21;
    v54[21] = v21;
    v54[22] = v21;
    v54[23] = v21;
    v54[24] = v21;
    v54[25] = v21;
    v54[26] = v21;
    v54[27] = v21;
    v54[28] = v21;
    v54[29] = v21;
    v54[30] = v21;
    v54[31] = v21;
    v50 = v5;
    v22 = *(int **)(v5 + 36);
    v23 = (const void *)*((_QWORD *)v22 + 7);
    v24 = *(void **)(a2 + 194680);
    v25 = v22[1];
    if ((v22[38] & 8) != 0)
    {
      if (v25 >= 1)
      {
        v27 = 0;
        v28 = (char *)(2 * (_QWORD)v24);
        v29 = (char *)(2 * (_QWORD)v23);
        do
        {
          memcpy(v28, v29, 2 * *v22);
          v29 += 2 * v22[4];
          v28 += 2 * *v12;
          ++v27;
        }
        while (v27 < v22[1]);
      }
    }
    else if (v25 >= 1)
    {
      v26 = 0;
      do
      {
        memcpy(v24, v23, *v22);
        v23 = (char *)v23 + v22[4];
        v24 = (char *)v24 + *v12;
        ++v26;
      }
      while (v26 < v22[1]);
    }
    result = try_filter_frame(v52, (int *)a2, v18, v51);
    *((_QWORD *)v54 + v18) = result;
    if (v18 >= 0x10)
      v30 = v18 >> 2;
    else
      v30 = 4;
    if (!v30)
    {
      LODWORD(v6) = v18;
      goto LABEL_111;
    }
    v31 = result;
    v32 = 0;
    v33 = v50;
    while (1)
    {
      if ((int)(v18 + v30) >= v14)
        v35 = v14;
      else
        v35 = v18 + v30;
      v36 = (v31 >> (15 - ((int)v18 / 8))) * v30;
      if (*(_DWORD *)(v4 + 13652) == 2 && v20 <= 0x13)
      {
        v37 = (unsigned __int128)(v36 * v20 * (__int128)0x6666666666666667) >> 64;
        v36 = (v37 >> 3) + ((unint64_t)v37 >> 63);
      }
      v38 = v36 >> (*(_DWORD *)(v33 + 1036) != 0);
      if (v32 <= 0)
      {
        v39 = v18 - v30;
        v6 = v39 & ~(v39 >> 31);
        if ((_DWORD)v6 != (_DWORD)v18)
          break;
      }
      v6 = v18;
      if ((v32 & 0x80000000) == 0)
        goto LABEL_72;
LABEL_46:
      if ((int)v6 < (int)v18)
        v34 = -1;
      else
        v34 = 1;
      if ((_DWORD)v6 == (_DWORD)v18)
        v32 = 0;
      else
        v32 = v34;
      v30 >>= (_DWORD)v6 == (_DWORD)v18;
      v18 = v6;
      if (!v30)
        goto LABEL_111;
    }
    result = *((_QWORD *)v54 + v6);
    if (result < 0)
    {
      result = try_filter_frame(v52, (int *)a2, v39 & ~(v39 >> 31), v51);
      v33 = v50;
      *((_QWORD *)v54 + v6) = result;
    }
    if (result >= v31)
      v40 = v31;
    else
      v40 = result;
    if (result - v38 >= v31)
    {
      v6 = v18;
    }
    else
    {
      v31 = v40;
      v6 = v6;
    }
    if (v32 < 0)
      goto LABEL_46;
LABEL_72:
    if (v35 != (_DWORD)v18)
    {
      result = *((_QWORD *)v54 + v35);
      if (result < 0)
      {
        result = try_filter_frame(v52, (int *)a2, v35, v51);
        v33 = v50;
        *((_QWORD *)v54 + v35) = result;
      }
      if (result >= v31 - v38)
      {
        v6 = v6;
      }
      else
      {
        v31 = result;
        v6 = v35;
      }
    }
    goto LABEL_46;
  }
  if (*(_DWORD *)v4)
  {
    LODWORD(v6) = 0;
    goto LABEL_111;
  }
LABEL_5:
  v7 = *(_DWORD *)(v4 + 13652);
  v8 = 63;
  if (v7 == 2)
  {
    if (!*(_DWORD *)(v5 + 984))
      ++v3;
    if (*v3 <= 8u)
      v8 = 63;
    else
      v8 = 47;
  }
  v9 = *(_DWORD *)(v5 + 1040);
  v10 = *(_DWORD *)(v4 + 13432);
  switch(v10)
  {
    case 8:
      v11 = ac_qlookup_0;
      goto LABEL_77;
    case 12:
      v11 = ac_qlookup_12;
      goto LABEL_77;
    case 10:
      v11 = ac_qlookup_10;
LABEL_77:
      if (v9 >= 255)
        v41 = 255;
      else
        v41 = *(_DWORD *)(v5 + 1040);
      v42 = 20723 * (__int16)v11[v41 & ~(v41 >> 31)];
      goto LABEL_82;
  }
  v42 = -20723;
LABEL_82:
  result = 4584920;
  if (v10 == 10)
    v43 = 4584920;
  else
    v43 = 18339678;
  if (v10 == 10)
    v44 = 20;
  else
    v44 = 22;
  v45 = v10 == 8;
  if (v10 == 8)
    v46 = 1146230;
  else
    v46 = v43;
  if (v45)
    v47 = 18;
  else
    v47 = v44;
  v48 = (v46 + v42) >> v47;
  if (!v7
    && *(_DWORD *)(v4 + 13668) == 1
    && *(_DWORD *)(v4 + 13724) == 3
    && *(_BYTE *)(v4 + 48)
    && (v9 < 200 || *(_DWORD *)(v5 + 4) * *(_DWORD *)v5 >= 76801)
    && *(_DWORD *)(v4 + 13956) != 1
    && *(_DWORD *)(v5 + 984))
  {
    v48 = (5 * v48) >> 3;
  }
  if (*(_DWORD *)(v5 + 984))
    v49 = v48;
  else
    v49 = v48 - 4;
  if (v49 < v8)
    v8 = v49;
  if (v49 >= 0)
    LODWORD(v6) = v8;
  else
    LODWORD(v6) = 0;
LABEL_111:
  *(_DWORD *)v4 = v6;
  return result;
}

uint64_t try_filter_frame(uint64_t a1, int *a2, int a3, int a4)
{
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  double v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  uint64x2_t v16;
  uint64_t v17;
  const void *v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t sse;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  void *v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  char *v39;

  v8 = a2 + 210559;
  v9 = a2 + 48656;
  v10 = a2 + 43005;
  v11 = a2 + 42924;
  vp9_build_mask_frame((uint64_t)(a2 + 42924), a3, a4);
  v17 = *(_QWORD *)(v10 + 1);
  v18 = a2 + 18528;
  if (*v8 < 2)
  {
    if (a3)
    {
      v19 = v10[247];
      v20 = (v19 >> 1) & 0x7FFFFFF8;
      v21 = v19 >> 3;
      if (v19 <= 0x47)
        v21 = 8;
      if ((int)v19 < 9)
      {
        v20 = 0;
        v21 = v10[247];
      }
      if (a4)
        v22 = v20;
      else
        v22 = 0;
      if (a4)
        v19 = v21;
      loop_filter_rows(v17, (uint64_t)v11, (uint64_t)v18, v22, v19 + v22, 1);
    }
  }
  else
  {
    vp9_loop_filter_frame_mt(v17, v11, v18, a3, 1, a4, *(_QWORD **)(v8 + 1), *v8, (uint64_t)(a2 + 210564));
  }
  v23 = *(_QWORD *)(v10 + 1);
  v24 = *(_QWORD *)(a1 + 56);
  v26 = *(_DWORD *)(a1 + 12);
  v25 = *(unsigned int *)(a1 + 16);
  v27 = *(_QWORD *)(v23 + 56);
  v28 = *(unsigned int *)(v23 + 16);
  v29 = *(_DWORD *)(a1 + 8);
  if (*v10)
    sse = highbd_get_sse(v24, v25, v27, v28, v29, v26, v12, v13, v14, v15, v16);
  else
    sse = get_sse(v24, v25, v27, v28, v29, v26);
  v31 = sse;
  v32 = *(_QWORD *)(v10 + 1);
  v33 = (const void *)*((_QWORD *)v9 + 7);
  v34 = *(void **)(v32 + 56);
  v35 = v9[1];
  if ((v9[38] & 8) != 0)
  {
    if (v35 >= 1)
    {
      v37 = 0;
      v38 = (char *)(2 * (_QWORD)v34);
      v39 = (char *)(2 * (_QWORD)v33);
      do
      {
        memcpy(v38, v39, 2 * *v9);
        v39 += 2 * v9[4];
        v38 += 2 * *(int *)(v32 + 16);
        ++v37;
      }
      while (v37 < v9[1]);
    }
  }
  else if (v35 >= 1)
  {
    v36 = 0;
    do
    {
      memcpy(v34, v33, *v9);
      v33 = (char *)v33 + v9[4];
      v34 = (char *)v34 + *(int *)(v32 + 16);
      ++v36;
    }
    while (v36 < v9[1]);
  }
  return v31;
}

int *vp9_pick_intra_mode(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  int v106;
  unsigned __int8 v107;
  uint64_t v108;
  int *v110;
  _BYTE *v111;
  uint64_t v112;
  _DWORD *v113;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v4 = (_QWORD *)(a2 + 82228);
  v5 = (int *)(a2 + 24920);
  v6 = a1 + 43256;
  v7 = **(_QWORD **)(a2 + 25360);
  v126 = 0;
  v123 = a2;
  a4 = a4;
  if (max_txsize_lookup[a4] >= tx_mode_to_biggest_tx_size[a1[43256]])
    v8 = tx_mode_to_biggest_tx_size[a1[43256]];
  else
    v8 = max_txsize_lookup[a4];
  v9 = *(unsigned __int8 **)(a2 + 25376);
  v10 = *(unsigned __int8 **)(a2 + 25368);
  if (v9)
  {
    if ((char)v9[8] <= 0)
    {
      if (*v9 >= 3u)
        ++v9;
      else
        v9 += 44;
      LODWORD(v9) = *v9;
      if (!v10)
        goto LABEL_19;
      goto LABEL_8;
    }
    LODWORD(v9) = 0;
  }
  if (v10)
  {
LABEL_8:
    if ((char)v10[8] <= 0)
    {
      if (*v10 >= 3u)
        ++v10;
      else
        v10 += 32;
      LODWORD(v10) = *v10;
    }
    else
    {
      LODWORD(v10) = 0;
    }
  }
LABEL_19:
  result = &a1[100 * v9 + 209370 + 10 * v10];
  v128 = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 12) = -2147450880;
  *(_WORD *)(v7 + 6) = 768;
  *v4 = 0;
  *(_DWORD *)(a2 + 82236) = 0;
  LODWORD(v126) = 0;
  v127 = 0;
  v124 = 0x100000000;
  v125 = &v126;
  *(_BYTE *)(v7 + 2) = v8;
  v12 = *v5;
  v13 = *(int *)(a2 + 24924);
  v14 = ss_size_lookup[4 * a4 + 2 * v12 + v13];
  v15 = ((*(int *)(a2 + 25404) >> (v12 + 5)) & (*(int *)(a2 + 25404) >> 31))
      + num_4x4_blocks_wide_lookup[v14];
  v16 = ((*(int *)(a2 + 25412) >> (v13 + 5)) & (*(int *)(a2 + 25412) >> 31))
      + num_4x4_blocks_high_lookup[v14];
  v17 = (int)v16 < 1 || (int)v15 < 1;
  v114 = (int *)(a2 + 24920);
  v115 = v7;
  v112 = a2;
  v113 = v6;
  v110 = result;
  v111 = (_BYTE *)(a2 + 82228);
  v108 = a4;
  v107 = v8;
  if (v17)
    goto LABEL_37;
  v18 = 0;
  v19 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v20 = txsize_to_bsize[v19];
  v21 = b_width_log2_lookup[v14];
  v22 = v19 >= 2 ? 2 : *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v116 = v16;
  v119 = 1 << v19;
  do
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)(v123 + 8216);
      v25 = *(_QWORD *)(v123 + 24928);
      v26 = *(int *)(v123 + 8224);
      v27 = *(int *)(v123 + 24936);
      v130 = 0;
      v131 = 0;
      v132 = 0;
      *(_QWORD *)(v123 + 8216) = v24 + 4 * (v23 + v18 * v26);
      v28 = v25 + 4 * (v23 + v18 * v27);
      *(_QWORD *)(v123 + 24928) = v28;
      v29 = *(_DWORD *)(v123 + 82216);
      if (v29)
        v30 = v24 + 4 * (v23 + v18 * v26);
      else
        v30 = v25 + 4 * (v23 + v18 * v27);
      if (v29)
        v31 = v26;
      else
        v31 = v27;
      vp9_predict_intra_block(v123 + 24912, v21, v19, v124, v30, v31, v28, v27, v23, v18, 0);
      v129 = 0x7FFFFFFFFFFFFFFFLL;
      block_yrd(a1, v123, (uint64_t)&v130, (_DWORD *)&v124 + 1, &v129, v20, v22, 0, 1);
      *(_QWORD *)(v123 + 8216) = v24;
      *(_QWORD *)(v123 + 24928) = v25;
      v32 = v125;
      *(_DWORD *)v125 += v130;
      v32[1] += v131;
      v23 += v119;
    }
    while (v23 < v15);
    v18 += v119;
  }
  while (v18 < v116);
  v5 = v114;
  v7 = v115;
  a2 = v112;
  v6 = v113;
  result = v110;
  v4 = v111;
  a4 = v108;
  v8 = v107;
  if (HIDWORD(v124))
  {
LABEL_37:
    *(_BYTE *)v4 = 1;
    v33 = *(_QWORD *)(a2 + 25368);
    v34 = *(_QWORD *)(a2 + 25376);
    if (v34)
      v34 = *(char *)(v34 + 3);
    if (v33)
      v33 = *(char *)(v33 + 3);
    v35 = vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v6 + 447) + v33 + v34 + 1967)];
  }
  else
  {
    *v111 = 0;
    v93 = *(_QWORD *)(v112 + 25368);
    v94 = *(_QWORD *)(v112 + 25376);
    if (v94)
      v94 = *(char *)(v94 + 3);
    if (v93)
      v93 = *(char *)(v93 + 3);
    v35 = v126 + vp9_prob_cost[*(unsigned __int8 *)(*((_QWORD *)v113 + 447) + v93 + v94 + 1967)];
  }
  v36 = *result + (uint64_t)v35;
  v37 = v127;
  v38 = (v127 << v5[178]) + ((v5[179] * v36 + 256) >> 9);
  v128 = v38;
  v39 = 0x7FFFFFFFFFFFFFFFLL;
  if (v38 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = 0;
    LODWORD(v36) = 0x7FFFFFFF;
  }
  else
  {
    v40 = HIDWORD(v126);
    *(_BYTE *)(v7 + 1) = 0;
    v39 = v37;
  }
  LODWORD(v126) = 0;
  v127 = 0;
  HIDWORD(v124) = 1;
  v125 = &v126;
  *(_BYTE *)(v7 + 2) = v8;
  v41 = *v5;
  v42 = v5[1];
  v43 = ss_size_lookup[4 * a4 + 2 * v41 + v42];
  v117 = ((v5[123] >> (v42 + 5)) & (v5[123] >> 31)) + num_4x4_blocks_high_lookup[v43];
  if ((int)v117 < 1)
    goto LABEL_61;
  v44 = ((v5[121] >> (v41 + 5)) & (v5[121] >> 31)) + num_4x4_blocks_wide_lookup[v43];
  if ((int)v44 < 1)
    goto LABEL_61;
  v99 = v39;
  v101 = v38;
  v103 = v40;
  v105 = v36;
  v45 = 0;
  v46 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v47 = txsize_to_bsize[v46];
  v48 = b_width_log2_lookup[v43];
  v49 = v46 >= 2 ? 2 : *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v120 = 1 << v46;
  do
  {
    v50 = 0;
    do
    {
      v51 = *(_QWORD *)(v123 + 8216);
      v52 = *(_QWORD *)(v123 + 24928);
      v53 = *(int *)(v123 + 8224);
      v54 = *(int *)(v123 + 24936);
      v130 = 0;
      v131 = 0;
      v132 = 0;
      *(_QWORD *)(v123 + 8216) = v51 + 4 * (v50 + v45 * v53);
      v55 = v44;
      v56 = v52 + 4 * (v50 + v45 * v54);
      *(_QWORD *)(v123 + 24928) = v56;
      v57 = *(_DWORD *)(v123 + 82216);
      if (v57)
        v58 = v51 + 4 * (v50 + v45 * v53);
      else
        v58 = v52 + 4 * (v50 + v45 * v54);
      if (v57)
        v59 = v53;
      else
        v59 = v54;
      vp9_predict_intra_block(v123 + 24912, v48, v46, 1u, v58, v59, v56, v54, v50, v45, 0);
      v129 = 0x7FFFFFFFFFFFFFFFLL;
      block_yrd(a1, v123, (uint64_t)&v130, (_DWORD *)&v124 + 1, &v129, v47, v49, 0, 1);
      *(_QWORD *)(v123 + 8216) = v51;
      *(_QWORD *)(v123 + 24928) = v52;
      v60 = v125;
      *(_DWORD *)v125 += v130;
      v44 = v55;
      v60[1] += v131;
      v50 += v120;
    }
    while (v50 < v55);
    v45 += v120;
  }
  while (v45 < v117);
  v5 = v114;
  v7 = v115;
  a2 = v112;
  v6 = v113;
  result = v110;
  v4 = v111;
  a4 = v108;
  v8 = v107;
  LODWORD(v36) = v105;
  v40 = v103;
  v39 = v99;
  v38 = v101;
  if (HIDWORD(v124))
  {
LABEL_61:
    *(_BYTE *)v4 = 1;
    v61 = *(_QWORD *)(a2 + 25368);
    v62 = *(_QWORD *)(a2 + 25376);
    if (v62)
      v62 = *(char *)(v62 + 3);
    if (v61)
      v61 = *(char *)(v61 + 3);
    v63 = vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v6 + 447) + v61 + v62 + 1967)];
  }
  else
  {
    *v111 = 0;
    v95 = *(_QWORD *)(v112 + 25368);
    v96 = *(_QWORD *)(v112 + 25376);
    if (v96)
      v96 = *(char *)(v96 + 3);
    if (v95)
      v95 = *(char *)(v95 + 3);
    v63 = v126 + vp9_prob_cost[*(unsigned __int8 *)(*((_QWORD *)v113 + 447) + v95 + v96 + 1967)];
  }
  v64 = result[1] + (uint64_t)v63;
  v65 = v127;
  v66 = (v127 << v5[178]) + ((v5[179] * v64 + 256) >> 9);
  v128 = v66;
  if (v66 < v38)
  {
    v40 = HIDWORD(v126);
    *(_BYTE *)(v7 + 1) = 1;
    LODWORD(v36) = v64;
    v39 = v65;
    v38 = v66;
  }
  LODWORD(v126) = 0;
  v127 = 0;
  HIDWORD(v124) = 1;
  v125 = &v126;
  *(_BYTE *)(v7 + 2) = v8;
  v67 = *v5;
  v68 = v5[1];
  v69 = ss_size_lookup[4 * a4 + 2 * v67 + v68];
  v118 = ((v5[123] >> (v68 + 5)) & (v5[123] >> 31)) + num_4x4_blocks_high_lookup[v69];
  if ((int)v118 < 1)
    goto LABEL_84;
  v70 = ((v5[121] >> (v67 + 5)) & (v5[121] >> 31)) + num_4x4_blocks_wide_lookup[v69];
  if ((int)v70 < 1)
    goto LABEL_84;
  v100 = v39;
  v102 = v38;
  v104 = v40;
  v106 = v36;
  v71 = 0;
  v72 = *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v73 = txsize_to_bsize[v72];
  v74 = b_width_log2_lookup[v69];
  v75 = v72 >= 2 ? 2 : *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2);
  v121 = 1 << v72;
  do
  {
    v76 = 0;
    do
    {
      v77 = *(_QWORD *)(v123 + 8216);
      v78 = *(_QWORD *)(v123 + 24928);
      v79 = *(int *)(v123 + 8224);
      v80 = *(int *)(v123 + 24936);
      v130 = 0;
      v131 = 0;
      v132 = 0;
      *(_QWORD *)(v123 + 8216) = v77 + 4 * (v76 + v71 * v79);
      v81 = v70;
      v82 = v78 + 4 * (v76 + v71 * v80);
      *(_QWORD *)(v123 + 24928) = v82;
      v83 = *(_DWORD *)(v123 + 82216);
      if (v83)
        v84 = v77 + 4 * (v76 + v71 * v79);
      else
        v84 = v78 + 4 * (v76 + v71 * v80);
      if (v83)
        v85 = v79;
      else
        v85 = v80;
      vp9_predict_intra_block(v123 + 24912, v74, v72, 2u, v84, v85, v82, v80, v76, v71, 0);
      v129 = 0x7FFFFFFFFFFFFFFFLL;
      block_yrd(a1, v123, (uint64_t)&v130, (_DWORD *)&v124 + 1, &v129, v73, v75, 0, 1);
      *(_QWORD *)(v123 + 8216) = v77;
      *(_QWORD *)(v123 + 24928) = v78;
      v86 = v125;
      *(_DWORD *)v125 += v130;
      v70 = v81;
      v86[1] += v131;
      v76 += v121;
    }
    while (v76 < v81);
    v71 += v121;
  }
  while (v71 < v118);
  v5 = v114;
  v7 = v115;
  a2 = v112;
  v6 = v113;
  result = v110;
  v4 = v111;
  LODWORD(v36) = v106;
  v40 = v104;
  v39 = v100;
  v38 = v102;
  if (HIDWORD(v124))
  {
LABEL_84:
    *(_BYTE *)v4 = 1;
    v87 = *(_QWORD *)(a2 + 25368);
    v88 = *(_QWORD *)(a2 + 25376);
    if (v88)
      v88 = *(char *)(v88 + 3);
    if (v87)
      v87 = *(char *)(v87 + 3);
    v89 = vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v6 + 447) + v87 + v88 + 1967)];
  }
  else
  {
    *v111 = 0;
    v97 = *(_QWORD *)(v112 + 25368);
    v98 = *(_QWORD *)(v112 + 25376);
    if (v98)
      v98 = *(char *)(v98 + 3);
    if (v97)
      v97 = *(char *)(v97 + 3);
    v89 = v126 + vp9_prob_cost[*(unsigned __int8 *)(*((_QWORD *)v113 + 447) + v97 + v98 + 1967)];
  }
  v90 = result[2] + (uint64_t)v89;
  v91 = v127;
  v92 = (v127 << v5[178]) + ((v5[179] * v90 + 256) >> 9);
  if (v92 < v38)
  {
    v40 = HIDWORD(v126);
    *(_BYTE *)(v7 + 1) = 2;
    LODWORD(v36) = v90;
    v39 = v91;
    v38 = v92;
  }
  *(_DWORD *)a3 = v36;
  *(_DWORD *)(a3 + 4) = v40;
  *(_QWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 16) = v38;
  return result;
}

void vp9_pick_inter_mode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int pred_context_single_ref_p2;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  unsigned int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int64x2_t v61;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  _BOOL4 v67;
  int v68;
  char v69;
  signed int v70;
  int v71;
  int v72;
  char v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  BOOL v84;
  int v85;
  unsigned int v86;
  BOOL v87;
  int v89;
  int v90;
  int *v91;
  uint64_t v92;
  int *v93;
  int v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  int16x4_t *v106;
  _DWORD *v107;
  uint64_t v108;
  unsigned __int8 *v109;
  _DWORD *v110;
  __int16 *v111;
  int v112;
  int *v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  _DWORD *v118;
  int v119;
  int v120;
  BOOL v121;
  uint64_t v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  int v129;
  int v130;
  BOOL v131;
  uint64_t v132;
  __int32 v133;
  _DWORD *v134;
  int v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int v141;
  int v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  __int16 v148;
  int v149;
  int v150;
  int v151;
  int v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  int v157;
  int v158;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  int v164;
  int v165;
  BOOL v166;
  unsigned int v167;
  int v168;
  int v169;
  int32x2_t v170;
  int32x4_t v171;
  int32x2_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int v175;
  uint64_t v176;
  _BOOL4 v177;
  BOOL v178;
  char v179;
  BOOL v180;
  BOOL v181;
  uint64_t v182;
  int v183;
  int v184;
  int v185;
  _BOOL4 v186;
  unsigned int v187;
  _BOOL4 v188;
  unsigned __int8 v189;
  unint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _DWORD *v194;
  BOOL v195;
  int v196;
  char v197;
  char *v198;
  char *v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  int v204;
  uint64_t v205;
  int v206;
  int v207;
  _DWORD *v208;
  int v209;
  int v210;
  __int16 *v211;
  int v212;
  int v213;
  char v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  _OWORD *v223;
  __int128 v224;
  _OWORD *v225;
  __int128 v226;
  _OWORD *v227;
  uint64_t v228;
  _OWORD *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  char v234;
  _DWORD *v235;
  int v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  char *v241;
  BOOL v242;
  char v243;
  int v244;
  int v245;
  _DWORD *v246;
  BOOL v247;
  BOOL v248;
  char v249;
  unsigned int v250;
  unsigned int v251;
  int switchable_rate;
  uint64_t v253;
  uint64_t v254;
  int v255;
  unsigned int v256;
  int v257;
  uint64_t v258;
  unsigned __int8 *v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  int v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  _DWORD *v275;
  char v276;
  uint64_t v277;
  BOOL v278;
  uint64_t v279;
  int v280;
  char v281;
  BOOL v282;
  char v283;
  int v284;
  int v285;
  uint64_t v286;
  char v287;
  _BOOL4 v288;
  unsigned int *v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  BOOL v295;
  unsigned int v296;
  unint64_t v297;
  _DWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  int v302;
  BOOL v303;
  char v304;
  uint64_t v305;
  uint64_t v306;
  BOOL v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  char v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  unsigned int v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _DWORD *v333;
  int *v334;
  char v335;
  uint64_t v336;
  unsigned int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t i;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _DWORD *v352;
  int *v353;
  char v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t j;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  char v365;
  char v366;
  __int128 *v367;
  uint64_t v368;
  uint64_t v369;
  _OWORD *v370;
  uint64_t v371;
  int v372;
  _DWORD *v373;
  _DWORD *v374;
  char *v375;
  int v376;
  uint64_t v377;
  uint64_t *v378;
  uint64_t v379;
  _QWORD *v380;
  _QWORD *v381;
  __int128 *v382;
  uint64_t v383;
  _OWORD *v384;
  uint64_t v385;
  int v386;
  _DWORD *v387;
  _DWORD *v388;
  int v389;
  uint64_t v390;
  uint64_t *v391;
  uint64_t v392;
  _QWORD *v393;
  int v394;
  __int128 v395;
  __int128 *v396;
  __int128 v397;
  _OWORD *v398;
  int v399;
  __int128 v400;
  __int128 *v401;
  __int128 v402;
  _OWORD *v403;
  int v404;
  __int128 v405;
  __int128 v406;
  __int128 *v407;
  __int128 v408;
  __int128 v409;
  _OWORD *v410;
  int v411;
  __int128 v412;
  __int128 v413;
  __int128 *v414;
  __int128 v415;
  __int128 v416;
  _OWORD *v417;
  int v418;
  __int128 *v419;
  _OWORD *v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  BOOL v424;
  int64_t v425;
  char v426;
  char v427;
  uint64_t v428;
  char v429;
  int64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  __int128 *v434;
  _OWORD *v435;
  __int128 v436;
  __int128 v437;
  __int128 v438;
  uint64_t v439;
  int v440;
  unint64_t v441;
  unint64_t v442;
  unsigned int v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  int *v448;
  int v449;
  int v450;
  int v451;
  uint64_t v452;
  uint64_t v453;
  int v454;
  uint64_t v455;
  int *v456;
  int v457;
  int v458;
  uint64_t v459;
  int v460;
  int v461;
  uint64_t v462;
  int *v463;
  int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  int *v469;
  int v470;
  int v471;
  int v472;
  uint64_t v473;
  int *v474;
  int v475;
  int v476;
  int v477;
  int v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  int *v483;
  int v484;
  int v485;
  int v486;
  uint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  int *v491;
  int v492;
  int v493;
  int v494;
  int v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  int v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  int v503;
  uint64_t v504;
  int v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  int *v511;
  int v512;
  int v513;
  int v514;
  int v515;
  int v516;
  uint64_t v517;
  uint64_t v518;
  int v519;
  uint64_t v520;
  int *v521;
  int v522;
  int v523;
  int v524;
  uint64_t v525;
  int *v526;
  int v527;
  int v528;
  int v529;
  int v530;
  unsigned int v531;
  uint64_t v532;
  uint64_t v533;
  int v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  int v538;
  int v539;
  int v540;
  int v541;
  _DWORD *v542;
  __int16 *v543;
  _BOOL4 v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  int v550;
  _DWORD *v551;
  _QWORD *v552;
  uint64_t v553;
  int v554;
  uint64_t v555;
  int v556;
  uint64_t v557;
  uint64_t (**v558)(_QWORD, _QWORD, _QWORD);
  int v559;
  char v560;
  int v561;
  int v562;
  _BOOL4 v563;
  int v564;
  int v565;
  _OWORD *v566;
  _OWORD *v567;
  _OWORD *v568;
  uint64_t v569;
  _OWORD *v570;
  uint64_t v571;
  _DWORD *v572;
  _BOOL4 v573;
  unsigned int v574;
  _QWORD *v575;
  _DWORD *v576;
  int v577;
  uint64_t v578;
  int *v579;
  char v580;
  unsigned int v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  char v585;
  BOOL v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  int v590;
  _BOOL4 v591;
  int v592;
  char v593;
  int v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  int v598;
  _BOOL4 v599;
  int v600;
  uint64_t v601;
  int v602;
  char v603;
  _DWORD *v604;
  unsigned int v605;
  char v606;
  int v607;
  _DWORD *v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  int *v612;
  _DWORD *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int v617;
  unsigned __int8 v618;
  uint64_t v619;
  _OWORD *v620;
  unint64_t v621;
  uint64_t v622;
  int v623;
  int v624;
  uint64_t v625;
  uint64_t v626;
  unsigned int v627;
  uint64_t v628;
  int *v629;
  unsigned int *v630;
  unint64_t v631;
  uint64_t v632;
  uint64_t v633;
  _DWORD *v634;
  unsigned int v635;
  _BOOL4 v636;
  _OWORD *v637;
  _DWORD *v638;
  _DWORD *v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  signed int v648;
  uint64_t v649;
  __int128 *v650;
  __int128 *v651;
  uint64_t v652;
  uint64_t v653;
  unsigned int v654;
  unsigned int v655;
  uint64_t v656;
  unsigned int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  int *v663;
  int v664;
  unsigned int v665;
  unsigned int v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  __int128 *v673;
  int v674;
  _QWORD *v675;
  unsigned int v676;
  unsigned int v677;
  _BYTE v678[24];
  __int128 v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  __int128 v686;
  uint64_t v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  _BYTE v693[24576];
  _BYTE *v694;
  _QWORD v695[2];
  _QWORD v696[2];
  uint64_t v697;
  _QWORD v698[2];
  _QWORD v699[2];
  _OWORD v700[3];
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  __int128 v705;
  __int128 v706;
  __int128 v707;
  __int128 v708;
  __int128 v709;
  _BYTE v710[48];
  uint64_t v711;
  _DWORD v712[53];
  int v713;
  uint64_t v714;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v9 = v7;
  v587 = v10;
  v714 = *MEMORY[0x24BDAC8D0];
  v11 = **(_QWORD **)(v3 + 25360);
  v708 = 0u;
  v709 = 0u;
  v630 = (unsigned int *)(v3 + 24936);
  v706 = 0u;
  v707 = 0u;
  v12 = v2 + 738536;
  v704 = 0u;
  v705 = 0u;
  v702 = 0u;
  v703 = 0u;
  v701 = 0u;
  memset(v700, 0, sizeof(v700));
  v677 = -1;
  v676 = -1;
  v13 = *(_DWORD *)(v2 + 173028);
  v14 = *(_DWORD *)(v2 + 173032);
  if (v7 >= 4)
    v15 = 2;
  else
    v15 = 4;
  if (v7 >= 7)
    v16 = 0;
  else
    v16 = v15;
  if (*(_DWORD *)(v2 + 842128) && *(_DWORD *)(v2 + 842132) == 3)
    v16 = 0;
  v679 = 0uLL;
  v680 = 0;
  v17 = v14 + v13;
  if (v17 >= 255)
    v17 = 255;
  v18 = dc_qlookup_0[v17 & ~(v17 >> 31)];
  v19 = *(_DWORD *)(v3 + 25636);
  v20 = *(char *)(v11 + 4);
  if (*(_DWORD *)(v2 + 739600))
    v21 = *(_QWORD *)(v4 + 3704) + 4 * (int)(30 * (v7 + 13 * (v5 >> 3)));
  else
    v21 = v4 + 120 * v7 + 16;
  v614 = v21;
  v622 = v2 + 834660;
  v583 = *(unsigned __int8 *)(v2 + 173252) == 4;
  v699[1] = 0;
  v699[0] = 0;
  v610 = num_4x4_blocks_high_lookup[v7];
  v594 = num_4x4_blocks_wide_lookup[v7];
  v589 = *(_QWORD *)(v3 + 24928);
  v584 = *(_QWORD *)(v3 + 24936);
  v675 = 0;
  v626 = v11;
  if (*(_DWORD *)(v2 + 740008))
    v591 = *(_DWORD *)(v8 + 700) != 0;
  else
    v591 = 0;
  v588 = v2 + 172020;
  v688 = 0;
  v687 = 0;
  v686 = 0uLL;
  v22 = *(_DWORD *)(v2 + 747508);
  if (v22)
    v23 = 8;
  else
    v23 = 12;
  v631 = v23;
  v24 = *(_DWORD *)(v2 + 739056);
  v586 = v24 != 0;
  if (!v24 && v22)
    v586 = *(_DWORD *)(v2 + 835152) != 0;
  v25 = v3 + 24912;
  v556 = *(_DWORD *)(v2 + 740176);
  if (*(_BYTE *)(v2 + 176472))
    v26 = (_DWORD *)(v2 + 4 * v20 + 740232);
  else
    v26 = (_DWORD *)(v2 + 740208);
  *(_DWORD *)(v3 + 26908) = *v26;
  *(_DWORD *)(v3 + 25688) = -1;
  if (*(_BYTE *)(v2 + 740016) == 3)
    v27 = 3;
  else
    v27 = 0;
  v603 = v27;
  v28 = *(int *)(v2 + 747512);
  if (!v22)
  {
    v30 = 0;
    if ((int)v28 < 1)
    {
      v31 = 500;
      goto LABEL_49;
    }
LABEL_34:
    if (*(_DWORD *)(v2 + 835152) | v30)
    {
      v31 = 0;
    }
    else if (v13 < 151)
    {
      v31 = 500;
      if (v13 <= 139)
      {
        if (v13 >= *(_DWORD *)(v2 + 834896) - 20)
          v31 = 500;
        else
          v31 = 1000;
      }
    }
    else if (v13 <= *(_DWORD *)(v2 + 834896) + 15)
    {
      v31 = 500;
    }
    else
    {
      v31 = 100;
    }
    if (!v22)
      goto LABEL_49;
    goto LABEL_47;
  }
  if ((int)v28 >= 1)
  {
    v29 = v2 + 6880 * (*(int *)(v2 + 747516) + *(int *)(v2 + 747524) * (v28 - 1)) + 751904;
    v30 = *(_DWORD *)(v29 + 748) == *(_DWORD *)(v29 + 752);
    goto LABEL_34;
  }
  v30 = 0;
  v31 = 500;
LABEL_47:
  if (!*(_DWORD *)(v2 + 834668) || *(_DWORD *)(v2 + 6880 * *(int *)(v2 + 747516) + 758668))
    goto LABEL_55;
LABEL_49:
  if (*(_DWORD *)(v2 + 172128) != *(_DWORD *)(v2 + 172304) || *(_DWORD *)(v2 + 172132) != *(_DWORD *)(v2 + 172308))
  {
LABEL_55:
    v590 = 0;
    goto LABEL_56;
  }
  if (*(int *)(v2 + 739072) <= 70)
    v31 = 0;
  else
    v31 = 500;
  v590 = 1;
LABEL_56:
  v581 = 4 * v594;
  v32 = *(_QWORD *)(v2 + 176600);
  v33 = *(_QWORD *)(v3 + 25368);
  v34 = *(_QWORD *)(v3 + 25376);
  v628 = v4;
  v611 = v7;
  v612 = (int *)(v2 + 747512);
  v582 = 30 * (int)(v7 + 13 * (v5 >> 3));
  v623 = v6;
  v624 = v5;
  v634 = (_DWORD *)v2;
  v629 = (int *)(v2 + 176472);
  v661 = v2 + 172304;
  v571 = v8;
  v572 = (_DWORD *)(v2 + 842128);
  v574 = v31;
  v599 = v30;
  if (v34 && v33)
  {
    v35 = *(char *)(v33 + 8) < 1;
    v36 = *(char *)(v34 + 8) < 1;
    v37 = v36 || v35;
    v166 = !v35 || !v36;
    v38 = 3;
    if (v166)
      v38 = v37;
  }
  else if (v34 | v33)
  {
    if (v34)
      v33 = *(_QWORD *)(v3 + 25376);
    v38 = 2 * (*(char *)(v33 + 8) < 1);
  }
  else
  {
    v38 = 0;
  }
  v669 = v3;
  v668 = v3 + 82216;
  v577 = 4 * v610;
  v39 = *(unsigned __int8 *)(v32 + v38 + 1931);
  v40 = v32 + 1940;
  v41 = *(unsigned __int8 *)(v40 + 2 * (int)vp9_get_pred_context_single_ref_p1(v25));
  v667 = v25;
  pred_context_single_ref_p2 = vp9_get_pred_context_single_ref_p2(v25);
  v43 = vp9_prob_cost[256 - v39];
  v44 = *(unsigned __int8 *)(v40 + 2 * pred_context_single_ref_p2 + 1);
  v45 = vp9_prob_cost[v41] + v43;
  v689 = vp9_prob_cost[v39];
  v690 = v45;
  v46 = vp9_prob_cost[256 - v41] + v43;
  v47 = v46 + vp9_prob_cost[v44];
  LODWORD(v44) = v46 + vp9_prob_cost[256 - v44];
  v691 = v47;
  v692 = v44;
  memset(v710, 0, sizeof(v710));
  v711 = 0;
  if (v591)
  {
    v48 = v581 * v577;
    v49 = 2 * v581 * v577;
    if (*(_DWORD *)v588)
    {
      v50 = (_BYTE *)((unint64_t)v693 >> 1);
      v51 = (_BYTE *)((unint64_t)&v693[2 * v48] >> 1);
      v52 = (_BYTE *)((unint64_t)&v693[2 * v49] >> 1);
    }
    else
    {
      v50 = v693;
      v51 = &v693[v48];
      v52 = &v693[v49];
    }
    v695[0] = v581;
    v694 = v50;
    v695[1] = v51;
    v696[0] = v581;
    v697 = v581;
    v53 = *(_QWORD *)(v669 + 24928);
    v696[1] = v52;
    v698[0] = v53;
    v698[1] = *v630;
  }
  v54 = *(_DWORD *)(v12 + 1072);
  if (v54)
  {
    v55 = v630;
    v54 = (int)v630[166] < 115;
    v56 = v628;
  }
  else
  {
    v56 = v628;
    v55 = v630;
  }
  v57 = v669;
  v58 = (uint64_t)v634;
  v59 = v629;
  *(_DWORD *)v668 = v54;
  v55[492] = 0;
  v607 = *(unsigned __int8 *)(v661 + 948);
  if (!*(_DWORD *)(v12 + 1256))
  {
LABEL_80:
    if (*(_BYTE *)(v12 + 1480) == 3)
      goto LABEL_88;
    goto LABEL_83;
  }
  if (*(_BYTE *)(v661 + 948) == 4)
  {
    v583 = (((v623 + v624) >> mi_width_log2_lookup[v9]) + v629[3343]) & 1;
    goto LABEL_80;
  }
  v583 = 0;
  if (*(_BYTE *)(v12 + 1480) == 3)
    goto LABEL_88;
LABEL_83:
  v60 = *(_QWORD *)(v669 + 25376);
  if (v60 && *(char *)(v60 + 8) > 0 || (v60 = *(_QWORD *)(v669 + 25368)) != 0 && *(char *)(v60 + 8) >= 1)
    v607 = *(unsigned __int8 *)(v60 + 7);
LABEL_88:
  *(_QWORD *)v678 = 0x7FFFFFFFLL;
  v61 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  *(int64x2_t *)&v678[8] = v61;
  *(_DWORD *)v587 = 0x7FFFFFFF;
  *(int64x2_t *)(v587 + 8) = v61;
  *(_BYTE *)v626 = v9;
  *(_WORD *)(v626 + 8) = -1;
  v62 = max_txsize_lookup[v9];
  v63 = tx_mode_to_biggest_tx_size[*(unsigned int *)(v661 + 720)];
  v635 = v62;
  if (v62 < v63)
    LOBYTE(v63) = v62;
  *(_BYTE *)(v626 + 2) = v63;
  if (*(_DWORD *)(v12 + 1556) || *(_DWORD *)(v12 + 1564))
  {
    if ((*(_BYTE *)(*(_QWORD *)(v669 + 25440) + 152) & 8) != 0)
    {
      v65 = v630[150];
      if (v65 == 10)
        v66 = (unint64_t)&VP9_HIGH_VAR_OFFS_10;
      else
        v66 = (unint64_t)(v65 == 12 ? &VP9_HIGH_VAR_OFFS_12 : &VP9_HIGH_VAR_OFFS_8);
      v712[0] = 0;
      v64 = ((1 << (num_pels_log2_lookup[v9] - 1))
           + (unint64_t)(*(unsigned int (**)(_QWORD, _QWORD, unint64_t, _QWORD, _DWORD *, uint64_t))&v634[16 * (unint64_t)v9 + 185122])(*(_QWORD *)(v669 + 8216), *(unsigned int *)(v669 + 8224), v66 >> 1, 0, v712, v56)) >> num_pels_log2_lookup[v9];
    }
    else
    {
      v712[0] = 0;
      LODWORD(v64) = ((1 << (num_pels_log2_lookup[v9] - 1))
                    + (*(unsigned int (**)(_QWORD, _QWORD, void *, _QWORD, _DWORD *, uint64_t))&v634[16 * (unint64_t)v9 + 185122])(*(_QWORD *)(v669 + 8216), *(unsigned int *)(v669 + 8224), &VP9_VAR_OFFS_0, 0, v712, v56)) >> num_pels_log2_lookup[v9];
    }
    v630[188] = v64;
    v59 = v629;
    v56 = v628;
    v57 = v669;
    v58 = (uint64_t)v634;
    if (v629[3477] == 1 && v629[3419] == 3 && *(char *)(v626 + 4) >= 1 && *(_DWORD *)(v668 + 160) && !(_DWORD)v64)
    {
      *(_BYTE *)(v626 + 4) = 0;
      vp9_init_plane_quantizers((uint64_t)v634, v669);
      v59 = v629;
      v58 = (uint64_t)v634;
      v57 = v669;
      v56 = v628;
    }
  }
  if (v59[3394] < 1)
  {
LABEL_115:
    v67 = 1;
    goto LABEL_116;
  }
  if (*(_DWORD *)(v12 + 8972))
  {
    if (*v612 < *(_DWORD *)(v622 + 228))
    {
      v67 = 0;
      goto LABEL_116;
    }
    v67 = *(_DWORD *)(v58 + 6880 * (v612[1] + v612[3] * (uint64_t)*v612) + 758668) == 0;
    if (*(_DWORD *)(v622 + 7416))
      goto LABEL_113;
  }
  else
  {
    v67 = 1;
    if (*(_DWORD *)(v622 + 7416))
    {
LABEL_113:
      if (!v67)
        goto LABEL_116;
      *(_QWORD *)(v571 + 792) = -1;
      *(_DWORD *)(v571 + 800) = -1;
      *(_DWORD *)(v571 + 808) = 0;
      goto LABEL_115;
    }
  }
LABEL_116:
  v68 = *(_DWORD *)v12;
  v69 = v590 ^ 1;
  if (*(_DWORD *)v12)
    v69 = 1;
  if ((v69 & 1) != 0 || *(_DWORD *)(v12 + 512) || *(_DWORD *)(v12 + 516))
  {
    v70 = 2;
    v573 = v67;
    if (v59[3404] >= 1)
      goto LABEL_122;
  }
  else
  {
    v70 = 1;
    v573 = v67;
    if (v59[3404] >= 1)
    {
LABEL_122:
      if (!v59[3405])
      {
        if (*(_DWORD *)(v12 + 512))
          v70 = 3;
        if (*(_DWORD *)(v12 + 52))
        {
          *(_QWORD *)((char *)&v686 + 4) = 0x100000001;
          v70 = 3;
        }
        if (!*(_DWORD *)(v661 + 672) && *(_DWORD *)(v12 + 32) == 1)
        {
          *((_QWORD *)&v686 + 1) = 0x100000001;
          v70 = 1;
        }
      }
    }
  }
  v71 = *(_DWORD *)(v12 + 8972);
  if (!v71)
    goto LABEL_136;
  v72 = *(_DWORD *)v622;
  if (!*(_DWORD *)v622)
    goto LABEL_137;
  v73 = v590;
  if (*v612 < 1)
    v73 = 1;
  if ((v73 & 1) != 0)
  {
LABEL_136:
    v72 = 0;
LABEL_137:
    v617 = 2;
    v74 = 20 * v18;
    v75 = *(_DWORD *)(v12 + 1560);
    if (!v75)
      goto LABEL_193;
    goto LABEL_138;
  }
  v79 = *(_DWORD *)(v12 + 984);
  if ((v79 & 1) == 0
    || (v80 = *(_DWORD *)(v588 + 108), v80 == -1)
    || (v81 = *(_DWORD *)(v588 + 112), v81 == -1)
    || v80 == 0x4000 && v81 == 0x4000)
  {
    v617 = 2;
    if ((v79 & 2) == 0)
      goto LABEL_192;
  }
  else
  {
    v617 = 1;
    LODWORD(v687) = 1;
    if ((v79 & 2) == 0)
      goto LABEL_192;
  }
  if (*(_DWORD *)v661 == -1 || (v82 = *(_DWORD *)(v661 + 4), v82 == -1) || *(_DWORD *)v661 == 0x4000 && v82 == 0x4000)
  {
LABEL_192:
    v72 = 0;
    v74 = 20 * v18;
    v75 = *(_DWORD *)(v12 + 1560);
    if (!v75)
      goto LABEL_193;
    goto LABEL_138;
  }
  v72 = 1;
  HIDWORD(v687) = 1;
  v617 = 2;
  v74 = 20 * v18;
  v75 = *(_DWORD *)(v12 + 1560);
  if (!v75)
    goto LABEL_193;
LABEL_138:
  v76 = (unsigned __int8 *)(v668 + 165);
  v59 = (int *)((v624 >> 1) & 3);
  v58 = v623;
  v77 = (v623 >> 1) & 3;
  switch(v9)
  {
    case 6u:
      v78 = v76[pos_shift_16x16[4 * v59 + v77]];
      goto LABEL_175;
    case 7u:
      if (!v76[pos_shift_16x16[4 * v59 + v77]])
        goto LABEL_171;
      v83 = pos_shift_16x16[4 * (((v624 + 2) >> 1) & 3) + v77];
      goto LABEL_165;
    case 8u:
      if (!v76[pos_shift_16x16[4 * v59 + v77]])
      {
LABEL_171:
        v640 = 0;
        goto LABEL_176;
      }
      v83 = pos_shift_16x16[4 * (_QWORD)v59 + (((v623 + 2) >> 1) & 3)];
LABEL_165:
      v78 = v76[v83] != 0;
      goto LABEL_175;
    case 9u:
      if (((v623 | v624) & 7) == 0)
      {
        v78 = *(unsigned __int8 *)(v668 + 170);
        goto LABEL_175;
      }
      v84 = (v623 & 7) != 0;
      v58 = (uint64_t)v634;
      v59 = v629;
      if ((v624 & 7) != 0 || (v623 & 7) == 0)
      {
        if ((v624 & 7) == 0)
          v84 = 1;
        if (v84)
        {
          v640 = 0;
          if ((v624 & 7) != 0 && (v623 & 7) != 0)
            v640 = *(unsigned __int8 *)(v668 + 173);
        }
        else
        {
          v640 = *(unsigned __int8 *)(v668 + 172);
        }
      }
      else
      {
        v640 = *(unsigned __int8 *)(v668 + 171);
      }
      break;
    case 0xAu:
      if (((v623 | v624) & 7) == 0)
      {
        v78 = *(unsigned __int8 *)(v668 + 168);
        goto LABEL_175;
      }
      v640 = 0;
      v58 = (uint64_t)v634;
      v59 = v629;
      if ((v624 & 7) == 0 && (v623 & 7) != 0)
        v640 = *(unsigned __int8 *)(v668 + 169);
      break;
    case 0xBu:
      if (((v623 | v624) & 7) != 0)
      {
        v640 = 0;
        v58 = (uint64_t)v634;
        v59 = v629;
        if ((v624 & 7) != 0 && (v623 & 7) == 0)
          v640 = *(unsigned __int8 *)(v668 + 167);
      }
      else
      {
        v78 = *(unsigned __int8 *)(v668 + 166);
LABEL_175:
        v640 = v78;
LABEL_176:
        v58 = (uint64_t)v634;
        v59 = v629;
      }
      break;
    case 0xCu:
      v78 = *v76;
      goto LABEL_175;
    default:
      v640 = 0;
      break;
  }
  if (v75 == 1)
  {
    if (!v640)
    {
LABEL_193:
      v640 = 0;
      v85 = v74 >> v16;
      if (*(_DWORD *)(v12 + 1620))
        goto LABEL_194;
      goto LABEL_197;
    }
    goto LABEL_182;
  }
  if (v75 == 3 && v640)
LABEL_182:
    v70 = 1;
  v85 = v74 >> v16;
  if (*(_DWORD *)(v12 + 1620))
  {
LABEL_194:
    if (*(_BYTE *)(v668 + 164) != 6 || *(int *)(v12 + 536) <= 59)
      v70 = 1;
  }
LABEL_197:
  if (!v71 && v59[3396] >= 8)
  {
    v86 = *(unsigned __int8 *)(v668 + 141);
    v87 = v68 + 1 < (int)v86 || v86 > 0x28;
    v59 = v629;
    if (v87 || v68 > 120)
      v70 = 1;
  }
  if (v59[30] == 2)
  {
    v636 = v70 == 3 && *(_DWORD *)(v12 + 1600) != 0;
    if (v70 == 3 && *(_DWORD *)(v12 + 1600) != 0)
      v89 = 2;
    else
      v89 = 0;
  }
  else
  {
    v636 = 0;
    v89 = 0;
  }
  v578 = v57 + 82372;
  v576 = (_DWORD *)(v58 + 842060);
  v608 = (_DWORD *)(v57 + 24920);
  v613 = (_DWORD *)(v58 + 740180);
  v619 = v58 + 171696;
  v601 = (v19 * (uint64_t)v85 + 256) >> 9;
  v609 = v58 + 1560 * (int)v20 + 120 * v9 + 199056;
  v90 = (*(unsigned __int8 *)(v12 + 984) >> 1) & ~v72;
  v91 = (int *)(v58 + 194512);
  v579 = (int *)(v58 + 739596);
  v592 = v85;
  v596 = v89;
  if (*(_BYTE *)v59)
  {
    v92 = *(char *)(v626 + 4);
    if ((*(_DWORD *)(v58 + 4 * v92 + 176552) & 4) != 0 && *(_WORD *)(v58 + 8 * v92 + 176492) == 2)
    {
      v574 = 0;
      DWORD2(v686) = 0;
      v70 = 2;
    }
  }
  v665 = 0;
  v562 = v90 & (v640 == 0);
  v93 = (int *)(v58 + 194516);
  v663 = (int *)(v58 + 194520);
  v615 = v58 + 176404;
  v94 = 1;
  v95 = 1;
  v625 = v12;
  v627 = v9;
  v648 = v70;
  do
  {
    v96 = v95;
    v97 = v95;
    v98 = ref_frame_to_flag_kVp9RefFlagList[v97];
    v99 = v98 & *(_DWORD *)(v12 + 984);
    *(_DWORD *)((char *)&v686 + v97 * 4) = v99 == 0;
    if (!v99)
      goto LABEL_218;
    v100 = v663;
    if (v96 == 2)
      v100 = v93;
    if ((_DWORD)v96 == 1)
      v100 = v91;
    v101 = *v100;
    if ((_DWORD)v101 == -1 || (v102 = *(_DWORD *)(v58 + 4 * v101 + 172048), v102 == -1))
      v103 = 0;
    else
      v103 = *((_QWORD *)v59 + 1684) + 224 * v102 + 88;
    *(_DWORD *)(v57 + 4 * v96 + 25708) = 0x7FFFFFFF;
    v104 = &v712[v96];
    v104[52] = -2147450880;
    v105 = v104 + 52;
    *(v105 - 4) = 0;
    if ((*(_DWORD *)(v12 + 984) & v98) == 0 || !v103)
    {
      v665 |= 1 << v96;
      goto LABEL_218;
    }
    v106 = (int16x4_t *)(*(_QWORD *)(v57 + 25568) + 8 * v96);
    v652 = v94 - 1;
    v656 = v103;
    v107 = (_DWORD *)(v58 + 176 * v652 + 172128);
    vp9_setup_pred_block(v667, (uint64_t)&v700[3 * (int)v96], v103, v624, v623, (uint64_t)v107, (uint64_t)v107);
    v108 = v661;
    v109 = **(unsigned __int8 ***)(v669 + 25360);
    if (*(_DWORD *)(v661 + 896) | v636)
    {
      find_mv_refs_idx(v619, v667, *v109, v96, v106, 0xFFFFFFFF, v624, v623, *(_QWORD *)(v669 + 25568) + 32);
      v108 = v661;
      v110 = (_DWORD *)v667;
      v111 = (__int16 *)v106;
      goto LABEL_327;
    }
    v112 = *(_DWORD *)(v622 + 36);
    if (v112)
    {
      v113 = v612;
      v112 = *v612 != 0;
      v114 = v628;
      v115 = v623;
      v116 = v624;
    }
    else
    {
      v114 = v628;
      v115 = v623;
      v116 = v624;
      v113 = v612;
    }
    v117 = *v109;
    v118 = (_DWORD *)((char *)&mv_ref_blocks_1 + 64 * v117);
    v111 = (__int16 *)v106;
    *v106 = 0;
    if (*v118 + v116 < 0
      || ((v119 = v118[1], v120 = v119 + v115, *v118 + v116 < *(_DWORD *)(v661 + 704))
        ? (v121 = v120 < *(_DWORD *)(v114 + 8))
        : (v121 = 1),
          v121 || v120 >= *(_DWORD *)(v114 + 12)))
    {
      v123 = 0;
      v125 = 0;
      v126 = 0;
      v124 = 1;
      v127 = v118[2];
      v128 = v127 + v116;
      if (v127 + v116 < 0)
        goto LABEL_255;
    }
    else
    {
      v122 = *(_QWORD *)(*(_QWORD *)(v669 + 25360) + 8 * (int)(v119 + v630[104] * *v118));
      v123 = mode_2_counter_1[*(unsigned __int8 *)(v122 + 1)];
      if (*(unsigned __int8 *)(v122 + 8) == v96)
      {
        v124 = 0;
        v106->i32[0] = *(_DWORD *)(v122 + 12);
        v125 = 1;
        v126 = 1;
        v127 = v118[2];
        v128 = v127 + v116;
        if (v127 + v116 < 0)
          goto LABEL_255;
      }
      else
      {
        v126 = 0;
        v125 = 1;
        v124 = 1;
        v127 = v118[2];
        v128 = v127 + v116;
        if (v127 + v116 < 0)
          goto LABEL_255;
      }
    }
    v129 = v118[3];
    v130 = v129 + v115;
    v131 = v128 >= *(_DWORD *)(v661 + 704) || v130 < *(_DWORD *)(v114 + 8);
    if (!v131 && v130 < *(_DWORD *)(v114 + 12))
    {
      v132 = *(_QWORD *)(*(_QWORD *)(v669 + 25360) + 8 * (int)(v129 + v630[104] * v127));
      v123 += mode_2_counter_1[*(unsigned __int8 *)(v132 + 1)];
      if (*(unsigned __int8 *)(v132 + 8) == v96)
      {
        v133 = *(_DWORD *)(v132 + 12);
        if ((v124 & 1) != 0)
        {
          v134 = v634;
          v110 = (_DWORD *)v667;
          v106->i32[0] = v133;
          if (v112)
            goto LABEL_275;
        }
        else
        {
          v110 = (_DWORD *)v667;
          if (v133 != v106->i32[0])
          {
            v135 = 0;
            v106->i32[v126] = v133;
            goto LABEL_326;
          }
          v134 = v634;
          if (v112)
            goto LABEL_275;
        }
LABEL_253:
        v135 = 1;
        goto LABEL_326;
      }
      v125 = 1;
      if (!v124)
        goto LABEL_274;
      goto LABEL_256;
    }
LABEL_255:
    if (!v124)
      goto LABEL_274;
LABEL_256:
    v136 = (char *)&mv_ref_blocks_1 + 64 * v117 + 4;
    v137 = 2;
    do
    {
      v138 = 7;
      if (v137 > 7)
        v138 = v137;
      v139 = v138 + 1;
      v140 = &v136[8 * v137];
      while (1)
      {
        v141 = *((_DWORD *)v140 - 1);
        if (v141 + v116 >= 0)
        {
          v142 = *(_DWORD *)v140 + v115;
          v143 = v141 + v116 >= *(_DWORD *)(v661 + 704) || v142 < *(_DWORD *)(v114 + 8);
          if (!v143 && v142 < *(_DWORD *)(v114 + 12))
            break;
        }
        v140 += 8;
        if (v139 == ++v137)
        {
          if (v125)
            goto LABEL_272;
LABEL_274:
          v134 = v634;
          v110 = (_DWORD *)v667;
          if (v112)
          {
LABEL_275:
            v135 = 1;
            if ((_DWORD)v96 == 1 && !v134[1720 * v113[1] + 189667])
            {
              v147 = *(_QWORD *)(*(_QWORD *)(v588 + 12) + 8)
                   + 12 * ((v623 >> 1) + (*(int *)(v661 + 712) >> 1) * (v624 >> 1));
              if (*(_DWORD *)v147 == -2147450880)
              {
                *v105 = -2147450880;
              }
              else
              {
                v148 = 2 * *(_DWORD *)v147;
                *(_WORD *)v105 = v148;
                v149 = v630[117] + 128;
                v150 = v630[118] - 128;
                v151 = v630[119] + 128;
                v152 = (__int16)(2 * *(_WORD *)(v147 + 2));
                if (v152 < v149)
                  LOWORD(v149) = v152;
                if ((int)(v630[116] - 128) <= v152)
                  v153 = v149;
                else
                  v153 = *((_WORD *)v630 + 232) - 128;
                *((_WORD *)v105 + 1) = v153;
                v154 = v148;
                if (v148 >= v151)
                  v148 = v151;
                if (v150 <= v154)
                  v155 = v148;
                else
                  v155 = v150;
                *(_WORD *)v105 = v155;
              }
              v135 = 1;
            }
            goto LABEL_326;
          }
          goto LABEL_253;
        }
      }
      v144 = *(_QWORD *)(*(_QWORD *)(v669 + 25360) + 8 * (int)(*(_DWORD *)v140 + v630[104] * v141));
      if (*(unsigned __int8 *)(v144 + 8) == v96)
      {
        v134 = v634;
        v110 = (_DWORD *)v667;
        v106->i32[0] = *(_DWORD *)(v144 + 12);
        if (v112)
          goto LABEL_275;
        goto LABEL_253;
      }
      v125 = 1;
      v36 = v137++ > 6;
    }
    while (!v36);
LABEL_272:
    v145 = 0;
    v146 = 0;
    while (1)
    {
      v156 = v118[v145];
      if (v156 + v116 >= 0)
      {
        v157 = v118[v145 + 1];
        v158 = v157 + v115;
        if (v156 + v116 < *(_DWORD *)(v661 + 704) && v158 >= *(_DWORD *)(v114 + 8) && v158 < *(_DWORD *)(v114 + 12))
        {
          v160 = *(_QWORD *)(*(_QWORD *)(v669 + 25360) + 8 * (int)(v157 + v630[104] * v156));
          if (*(char *)(v160 + 8) >= 1)
          {
            v161 = *(unsigned __int8 *)(v160 + 8);
            if ((_DWORD)v161 != v96)
            {
              v162 = *(unsigned __int16 *)(v160 + 14);
              if (*(_DWORD *)(v615 + 4 * v161) == *(_DWORD *)(v615 + 4 * v96))
              {
                LOWORD(v163) = *(_WORD *)(v160 + 12);
              }
              else
              {
                v162 = -v162;
                v163 = -*(unsigned __int16 *)(v160 + 12);
              }
              v164 = (unsigned __int16)v163 | ((unsigned __int16)v162 << 16);
              if (v146)
              {
                if (v164 != v106->i32[0])
                {
                  v106->i32[1] = v164;
                  goto LABEL_325;
                }
              }
              else
              {
                v106->i32[0] = v164;
              }
              v146 = 1;
            }
            v165 = *(char *)(v160 + 9);
            v166 = v165 < 1 || v165 == (_DWORD)v96;
            if (!v166)
            {
              v167 = *(_DWORD *)(v160 + 16);
              if (v167 != *(_DWORD *)(v160 + 12))
                break;
            }
          }
        }
      }
LABEL_293:
      v145 += 2;
      if (v145 == 16)
        goto LABEL_274;
    }
    v168 = HIWORD(v167);
    if (*(_DWORD *)(v615 + 4 * *(unsigned __int8 *)(v160 + 9)) == *(_DWORD *)(v615 + 4 * v96))
    {
      LOWORD(v160) = *(_DWORD *)(v160 + 16);
    }
    else
    {
      v168 = -v168;
      LODWORD(v160) = -v167;
    }
    v169 = (unsigned __int16)v160 | ((unsigned __int16)v168 << 16);
    if (!v146)
    {
      v106->i32[0] = v169;
LABEL_292:
      v146 = 1;
      goto LABEL_293;
    }
    if (v169 == v106->i32[0])
      goto LABEL_292;
    v106->i32[1] = v169;
LABEL_325:
    v135 = 1;
    v110 = (_DWORD *)v667;
LABEL_326:
    *(_BYTE *)(*(_QWORD *)(v669 + 25568) + v96 + 32) = counter_to_context_1[v123];
    v170.i32[0] = v630[118];
    v170.i32[1] = v630[116];
    *(int32x2_t *)v171.i8 = vadd_s32(v170, (int32x2_t)0x7F0000007FLL);
    v171.i64[1] = v171.i64[0];
    v172.i32[0] = v630[119];
    v172.i32[1] = v630[117];
    *(int32x2_t *)v173.i8 = vadd_s32(v172, (int32x2_t)0x8000000080);
    v173.i64[1] = v173.i64[0];
    v174 = vmovl_s16(*v106);
    *v106 = vmovn_s32((int32x4_t)vbslq_s8((int8x16_t)vcgtq_s32(v171, v174), (int8x16_t)v171, (int8x16_t)vminq_s32(v174, v173)));
    *((_DWORD *)v699 + v96) = v135;
LABEL_327:
    vp9_find_best_ref_mvs(v110, *(_DWORD *)(v108 + 688), v111, &v712[v96 + 40], &v712[v96 + 44]);
    if (*v107 == -1)
    {
      v177 = 1;
      v56 = v628;
      v12 = v625;
      v9 = v627;
      v57 = v669;
      v58 = (uint64_t)v634;
      v59 = v629;
      v70 = v648;
      v176 = v656;
      if (v640)
        v180 = (_DWORD)v96 == 2;
      else
        v180 = 0;
      v179 = v180;
      if (v627 >= 3)
        goto LABEL_353;
    }
    else
    {
      v58 = (uint64_t)v634;
      v175 = v634[44 * v652 + 43033];
      v56 = v628;
      v9 = v627;
      v57 = v669;
      v59 = v629;
      v70 = v648;
      v176 = v656;
      if (v175 == -1)
      {
        v177 = 1;
        v12 = v625;
        if (v640)
          v181 = (_DWORD)v96 == 2;
        else
          v181 = 0;
        v179 = v181;
        if (v627 >= 3)
          goto LABEL_353;
      }
      else
      {
        v12 = v625;
        if (*v107 != 0x4000)
          goto LABEL_218;
        v177 = v175 == 0x4000;
        v178 = v640 && (_DWORD)v96 == 2;
        v179 = v178;
        if (v627 < 3)
          goto LABEL_218;
LABEL_353:
        if (v177 && (v179 & 1) == 0)
        {
          vp9_mv_pred(v58, v57, *(_QWORD *)&v700[3 * (int)v96], *(_DWORD *)(v176 + 16), v94, v9);
          v70 = v648;
          v59 = v629;
          v58 = (uint64_t)v634;
          v57 = v669;
          v56 = v628;
        }
      }
    }
LABEL_218:
    v95 = v96 + 1;
    v94 = (char)(v96 + 1);
  }
  while (v94 <= v70);
  v182 = v626;
  if (!*(_DWORD *)(v12 + 8972))
  {
    if (v9 < 9 || v59[3396] <= 7)
    {
      v184 = 0;
      *(_DWORD *)(v668 + 144) = 0;
      v664 = 1;
      v185 = v596;
      v186 = 1;
      if (!v599)
        goto LABEL_376;
      goto LABEL_373;
    }
    goto LABEL_370;
  }
  *(_DWORD *)(v668 + 144) = 0;
  if (*v612 < 1 || !*((_DWORD *)&v687 + (v617 - 1)))
  {
LABEL_370:
    v184 = 0;
    v664 = 1;
    v185 = v596;
    v186 = 1;
    if (!v599)
      goto LABEL_376;
    goto LABEL_373;
  }
  v183 = v590;
  if (*(_DWORD *)(v58 + 4 * (*v612 - 1) + 834712) != 8)
    v183 = 1;
  v664 = v183;
  if (v183)
    v184 = 0;
  else
    v184 = -4;
  v185 = v596;
  v186 = 1;
  if (v599)
  {
LABEL_373:
    if (*v612 >= 1 && (*(_BYTE *)(v12 + 984) & 2) != 0)
      v186 = *(_DWORD *)(v661 + 724) <= *(_DWORD *)(v622 + 236) + 10;
  }
LABEL_376:
  if (*(_BYTE *)(v668 + 164) == 6 || *(_BYTE *)(v668 + 138) && *(int *)(v12 + 536) > 70)
  {
    v187 = v631;
    v188 = 0;
    if (v9 <= 9)
      goto LABEL_389;
LABEL_385:
    if (v59[3405] == 1)
      v188 = (*(char *)(**(_QWORD **)(v57 + 25360) + 4) - 3) <= 0xFFFFFFFD
          && *(_DWORD *)(v661 + 724) != 0;
  }
  else
  {
    if (v59[3396] >= 7)
      v189 = 8;
    else
      v189 = 9;
    v187 = v631;
    v188 = 0;
    if (v9 > v189)
      goto LABEL_385;
  }
LABEL_389:
  v563 = v186;
  v564 = 0;
  v561 = v188;
  v190 = 0;
  v598 = 0;
  v191 = 0;
  v192 = v185 | v187;
  v193 = (v192 - 1);
  v194 = (_DWORD *)(v58 + 4 * v611 + 739936);
  if (v640)
    v195 = 0;
  else
    v195 = v70 == 2;
  v196 = v195;
  v559 = v196;
  v570 = (_OWORD *)(v57 + 24944);
  v558 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))(v58 + (v611 << 6) + 740464);
  v197 = v607;
  if (v607 == 4)
    v197 = 0;
  v560 = v197;
  v637 = (_OWORD *)(v57 + 25080);
  v620 = (_OWORD *)(v57 + 25216);
  v568 = (_OWORD *)(v57 + 24960);
  v567 = (_OWORD *)(v57 + 25096);
  v566 = (_OWORD *)(v57 + 25232);
  v597 = 12;
  v585 = 4;
  v600 = 255;
  v605 = -1;
  v569 = 0x7FFFFFFFFFFFFFFFLL;
  v644 = v58 + 172112;
  v198 = &byte_208F4A698;
  v557 = v57 + 25708;
  v657 = -1;
  v565 = 0x7FFFFFFF;
  v580 = v603;
  v595 = 1;
  v199 = &byte_208F4A6B0;
  v200 = v631;
  while (2)
  {
    v681 = 0;
    v682 = 0;
    v674 = 0;
    v685 = 0;
    if (v190 < v200)
    {
      if (*(_DWORD *)(v12 + 8972))
      {
        v202 = *v199;
        v201 = *(v199 - 1);
        v203 = 255;
        v204 = (char)v201;
        if ((char)v201 <= v70)
          goto LABEL_411;
      }
      else
      {
        v202 = *v198;
        v201 = *(v198 - 1);
        v203 = 255;
        v204 = (char)v201;
        if ((char)v201 <= v70)
          goto LABEL_411;
      }
      goto LABEL_400;
    }
    if (v193 == v190)
      v201 = 2;
    else
      v201 = 1;
    v202 = 12;
    v203 = 3;
    v204 = (char)v201;
    if ((char)v201 > v70)
      goto LABEL_400;
LABEL_411:
    if (*((_DWORD *)&v686 + (char)v201)
      || *(_BYTE *)(v622 + 629) && (v201 != 1 || v712[4 * v202 + (char)v201]))
    {
      goto LABEL_400;
    }
    v205 = *(char *)(v182 + 4);
    v206 = *(unsigned __int8 *)v59;
    if (*(_BYTE *)v59
      && (*(_DWORD *)(v58 + 4 * v205 + 176552) & 4) != 0
      && *(unsigned __int16 *)(v58 + 8 * v205 + 176492) != (unsigned __int16)v204)
    {
      goto LABEL_399;
    }
    if (v204 == v617)
      v207 = v664;
    else
      v207 = 1;
    if ((v207 & 1) == 0)
    {
      if ((_DWORD)v202 == 13)
      {
        v208 = &v712[(char)v201];
        *((_WORD *)v208 + 105) = v184;
        *((_WORD *)v208 + 104) = v184;
        break;
      }
      v211 = (__int16 *)&v712[4 * v202 + (char)v201];
      if (v184 == v211[1])
      {
        if (v184 == *v211)
          break;
LABEL_399:
        v200 = v631;
LABEL_400:
        ++v190;
        v198 += 2;
        v199 += 2;
        if (v192 == v190)
          goto LABEL_714;
        continue;
      }
LABEL_485:
      v200 = v631;
      goto LABEL_400;
    }
    break;
  }
  if (v190 >= v631)
  {
    if (!*(_DWORD *)(v12 + 1664))
      goto LABEL_399;
    if ((ref_frame_to_flag_kVp9RefFlagList[(char)v203] & *(_DWORD *)(v12 + 984)) == 0)
    {
      v200 = v631;
      goto LABEL_400;
    }
    if (v206 && (*(_DWORD *)(v58 + 4 * v205 + 176552) & 4) != 0)
      goto LABEL_399;
  }
  if (v201 == 2 && v59[3405] == 1)
  {
    v209 = *(_DWORD *)(v12 + 8972);
    if (v209)
    {
      v59 = v629;
      if (v657 < v574)
        goto LABEL_399;
    }
    if (!v209 && v657 < 0x1F4)
      goto LABEL_399;
  }
  v210 = *(_DWORD *)(v12 + 984);
  if ((ref_frame_to_flag_kVp9RefFlagList[(char)v201] & v210) == 0)
    goto LABEL_485;
  if (v59[3477] == 1)
  {
    if (v572[2066] && *(_DWORD *)(v12 + 1580))
    {
      if (v712[4 * v202 + (char)v201])
      {
        if (*(_DWORD *)(v668 + 160))
          goto LABEL_485;
      }
      else if (v201 == 1 && !v630[188] && !*(_DWORD *)(v668 + 160))
      {
        goto LABEL_485;
      }
    }
    else if (v712[4 * v202 + (char)v201] && !v630[188])
    {
      goto LABEL_485;
    }
  }
  if (((*v194 >> v202) & 1) == 0)
    goto LABEL_485;
  if (v59[3404] >= 1 && !v59[3405])
  {
    if (*(_DWORD *)(v12 + 52) && (v201 != 3 || v712[4 * v202 + (char)v201]))
      goto LABEL_484;
    v216 = *(_DWORD *)(v661 + 672);
    if (v201 != 3 || v216)
    {
      if (!v216 || !*(_DWORD *)(v12 + 512))
        goto LABEL_451;
      v217 = *(_DWORD *)v12;
      v218 = *(int *)(v12 + 20) >> 1;
      if (v201 == 2 && v217 > v218)
      {
        if (!v712[4 * v202 + (char)v201])
          goto LABEL_451;
LABEL_484:
        v182 = v626;
        goto LABEL_485;
      }
      if (v201 != 3 || v217 < 1 || v217 >= v218)
        goto LABEL_451;
    }
    if (!v712[4 * v202 + (char)v201])
      goto LABEL_451;
    goto LABEL_484;
  }
LABEL_451:
  if (*((_DWORD *)v699 + (char)v201) && (_DWORD)v202 == 11)
    goto LABEL_484;
  v212 = v640 ? v207 : 0;
  if (v201 == 2 && v212 && v712[4 * v202 + (char)v201])
    goto LABEL_484;
  v182 = v626;
  if (*(_BYTE *)(v668 + 164) != 6)
  {
    v213 = *(_DWORD *)(v12 + 1560);
    if ((v213 > 1 || v627 == 12 && v213 == 1) && v640 && v201 == 1 && (_DWORD)v202 == 13)
      goto LABEL_485;
  }
  v214 = v207 ^ 1;
  if (!*(_DWORD *)(v12 + 8972))
    v214 = 1;
  if ((v214 & 1) == 0 && *((_DWORD *)&v687 + (char)v201 - 1) && v712[4 * v202 + (char)v201])
    goto LABEL_485;
  if (v206 && (*(_DWORD *)(v58 + 4 * v205 + 176552) & 4) != 0)
  {
    v200 = v631;
    goto LABEL_517;
  }
  if (!*(_DWORD *)(v12 + 1148)
    || (v215 = v712[4 * v202 + (char)v201], v201 == 1) && !v215)
  {
    v200 = v631;
    if (((v665 >> v204) & 1) != 0)
      goto LABEL_400;
    goto LABEL_517;
  }
  if (v70 <= 2)
  {
    if (!v559)
      goto LABEL_516;
    v219 = 1;
    if (v201 == 1)
      v219 = 2;
    if ((ref_frame_to_flag_kVp9RefFlagList[v219] & v210) == 0
      || *(_DWORD *)(v557 + 4 * (char)v201) <= 2 * *(_DWORD *)(v557 + 4 * v219))
    {
      goto LABEL_516;
    }
LABEL_515:
    v665 |= 1 << v204;
    goto LABEL_516;
  }
  if (!*(_DWORD *)(v12 + 52) && (v201 != 3 || v215))
  {
    v220 = 1;
    if (v201 != 2)
      v220 = 2;
    if ((ref_frame_to_flag_kVp9RefFlagList[v220] & v210) != 0
      && *(_DWORD *)(v57 + 25708 + 4 * (char)v201) > 2 * *(_DWORD *)(v57 + 25708 + 4 * v220))
    {
      goto LABEL_515;
    }
    v221 = 3;
    if (v201 == 3)
      v221 = 1;
    if ((ref_frame_to_flag_kVp9RefFlagList[v221] & v210) != 0
      && *(_DWORD *)(v57 + 25708 + 4 * (char)v201) > 2 * *(_DWORD *)(v57 + 25708 + 4 * v221))
    {
      goto LABEL_515;
    }
  }
LABEL_516:
  v200 = v631;
  if (((v665 >> v204) & 1) != 0)
    goto LABEL_400;
LABEL_517:
  v549 = v207;
  if (v190 < v200)
  {
    *v570 = v700[3 * (char)v201];
    v228 = 1;
    v229 = v637;
    v222 = (char)v201;
    v227 = v620;
  }
  else
  {
    v222 = (char)v203;
    v223 = &v700[3 * (char)v201];
    v224 = v223[1];
    *v570 = *v223;
    v225 = &v700[3 * (char)v203];
    v226 = v225[1];
    *v568 = *v225;
    *v637 = v224;
    v227 = v566;
    *v567 = v226;
    v228 = 2;
    v229 = v620;
  }
  *v229 = v700[3 * (char)v201 + v228];
  *v227 = v700[3 * v222 + 2];
  *(_BYTE *)(v626 + 8) = v201;
  *(_BYTE *)(v626 + 9) = v203;
  v230 = v201 - 1;
  if (v204 <= 0)
    v230 = 0;
  *(_QWORD *)(v57 + 25424) = v644 + 176 * v230;
  v231 = v203 - 1;
  if (v190 < v631)
    v231 = 0;
  *(_QWORD *)(v57 + 25432) = v644 + 176 * v231;
  v546 = v202;
  v545 = v202 - 10;
  v232 = (int)mode_idx[4 * (char)v201 + v545];
  v233 = *(_DWORD *)(v609 + 4 * v232) << (v598 != 0);
  if (v201 == 2 && *(_DWORD *)(v12 + 1568) && *(int *)v12 > 4)
    v233 *= 8;
  v555 = *(_QWORD *)&v678[16];
  v182 = v626;
  if ((v233 == 0x7FFFFFFF || (*(int *)(v614 + 4 * v232) * (uint64_t)v233) >> 5 > *(uint64_t *)&v678[16])
    && v712[4 * v202 + (char)v201])
  {
    goto LABEL_399;
  }
  v234 = v207 ^ 1;
  if ((_DWORD)v202 != 13)
    v234 = 1;
  v552 = v191;
  v553 = v193;
  v554 = v184;
  v551 = v194;
  if ((v234 & 1) != 0)
  {
    v235 = &v712[4 * v202 + (char)v201];
    v200 = v631;
    if (v190 >= v631)
      goto LABEL_548;
    if ((_DWORD)v202 != 10)
      goto LABEL_539;
    v546 = 10;
LABEL_542:
    if (v710[(char)v201 + 44])
    {
      v200 = v631;
      if (!(v712[(char)v201 + 44] | *v235))
        goto LABEL_400;
    }
    if ((_DWORD)v202 != 12)
    {
LABEL_545:
      if (v710[(char)v201 + 48])
      {
        v200 = v631;
        if (!(v712[(char)v201 + 48] | *v235))
          goto LABEL_400;
      }
      if ((_DWORD)v202 == 13)
        goto LABEL_548;
    }
    if (*((_BYTE *)&v712[-1] + (char)v201))
    {
      v200 = v631;
      if (!(v712[(char)v201 + 52] | *v235))
        goto LABEL_400;
    }
    v544 = v201 == 1;
  }
  else
  {
    v547 = v192;
    if (search_new_mv((int *)v58, v57, (uint64_t)v712, v204, v590, v627, v624, v623, v565, (int *)&v681 + 1, v605, (uint64_t)v678))
    {
      v56 = v628;
      v182 = v626;
      v57 = v669;
      v58 = (uint64_t)v634;
      v59 = v629;
      v200 = v631;
      v70 = v648;
      v191 = v552;
      v193 = v553;
      v184 = v554;
      v192 = v547;
      v194 = v551;
      goto LABEL_400;
    }
    v235 = &v712[(char)v201 + 52];
    v546 = 13;
    v200 = v631;
    v56 = v628;
    v182 = v626;
    v57 = v669;
    v58 = (uint64_t)v634;
    v59 = v629;
    v70 = v648;
    v191 = v552;
    v193 = v553;
    v184 = v554;
    v192 = v547;
    v194 = v551;
    if (v190 < v631)
    {
LABEL_539:
      if (v710[(char)v201 + 40])
      {
        v200 = v631;
        if (!(v712[(char)v201 + 40] | *v235))
          goto LABEL_400;
      }
      if ((_DWORD)v202 != 11)
        goto LABEL_542;
      goto LABEL_545;
    }
LABEL_548:
    v236 = v562;
    if ((_DWORD)v202 != 13)
      v236 = 0;
    v544 = v201 == 1;
    if (v201 == 1 && v236 && v713 != -2147450880)
    {
      v542 = v235;
      v237 = v192;
      v238 = (*v558)(*(_QWORD *)(v57 + 8216), *(unsigned int *)(v57 + 8224), *(_QWORD *)(v57 + 24944) + (int)(v630[4] * ((__int16)v713 >> 3)) + (v713 >> 19));
      v193 = v553;
      v192 = v237;
      v59 = v629;
      v58 = (uint64_t)v634;
      v57 = v669;
      v182 = v626;
      v56 = v628;
      v184 = v554;
      v565 = v238;
      v630[194] = v238;
      v235 = v542;
      v544 = 1;
    }
    v200 = v631;
  }
  v239 = *v235;
  if (v190 < v200 && (_DWORD)v202 != 10 && v239 == v712[(char)v201 + 40])
  {
    v200 = v631;
    v70 = v648;
    v194 = v551;
    v191 = v552;
    goto LABEL_400;
  }
  *(_BYTE *)(v182 + 1) = v202;
  *(_DWORD *)(v182 + 12) = v239;
  *(_DWORD *)(v182 + 16) = 0;
  if (v591)
  {
    if (v675)
    {
      if (HIDWORD(v695[0]))
      {
        if (HIDWORD(v696[0]))
        {
          if (HIDWORD(v697))
          {
            v240 = -1;
            goto LABEL_577;
          }
          v240 = 2;
          v241 = (char *)&v697 + 4;
        }
        else
        {
          v240 = 1;
          v241 = (char *)v696 + 4;
        }
      }
      else
      {
        v240 = 0;
        v241 = (char *)v695 + 4;
      }
      *(_DWORD *)v241 = 1;
LABEL_577:
      v675 = &v695[2 * v240 - 1];
      *(_QWORD *)(v57 + 24928) = *v675;
      *v630 = v581;
    }
    else
    {
      v675 = v698;
    }
  }
  v543 = (__int16 *)v235;
  v548 = v192;
  v242 = v607 == 4 || (_DWORD)v202 == 13;
  if (!v242 || !v583)
    goto LABEL_592;
  if (!v544)
  {
    v243 = v549 ^ 1;
    if (v201 != 2)
      v243 = 1;
    if ((v243 & 1) != 0 || !*(_DWORD *)(v12 + 8972) && v59[3405])
      goto LABEL_592;
  }
  if (((*(_WORD *)(v182 + 14) | *(_WORD *)(v182 + 12)) & 7) != 0)
  {
    search_filter_ref((_DWORD *)v58, v57, (uint64_t)&v679, v624, v623, &v694, v627, v591, &v675, &v677, &v676, v556, &v674, &v685, v561);
    v182 = v626;
    v70 = v648;
    v191 = v552;
    v193 = v553;
    v244 = v554;
    v245 = v664;
    v192 = v548;
    v246 = v551;
  }
  else
  {
LABEL_592:
    if (HIDWORD(v687))
      v247 = *(_DWORD *)(v12 + 8972) == 0;
    else
      v247 = 1;
    v248 = !v247 && v201 == 2;
    v249 = v603;
    if (!v248)
      v249 = v560;
    *(_BYTE *)(v182 + 7) = v249;
    build_inter_predictors_for_planes(v667, v627, v624, v623, 0, 0);
    if (v561)
      model_rd_for_sb_y_large(v634, v627, v669, v667, (int *)&v679, (_QWORD *)&v679 + 1, &v677, &v676, v624, v623, &v674, &v685);
    else
      model_rd_for_sb_y((uint64_t)v634, v627, v669, v667, (int *)&v679, (unint64_t *)&v679 + 1, &v677, &v676, 0);
    v182 = v626;
    v70 = v648;
    v191 = v552;
    v193 = v553;
    v244 = v554;
    v245 = v664;
    v192 = v548;
    v246 = v551;
    if (v544)
    {
      v250 = v676;
      if (!*(_DWORD *)v543)
        v657 = v676 >> (b_height_log2_lookup[v611] + b_width_log2_lookup[v611]);
    }
    else
    {
      v250 = v676;
    }
    v251 = v605;
    if (v250 < v605)
      v251 = v250;
    v605 = v251;
  }
  v550 = v674;
  if (v674)
  {
    v57 = v669;
    v194 = v246;
    if (*(_BYTE *)(v661 + 948) == 4 && ((*(_WORD *)(v182 + 14) | *(_WORD *)(v182 + 12)) & 7) != 0)
    {
      switchable_rate = vp9_get_switchable_rate((uint64_t)v634, v667);
      v194 = v551;
      v191 = v552;
      v193 = v553;
      v192 = v548;
      v245 = v664;
      v70 = v648;
      v57 = v669;
      v182 = v626;
      v244 = v554;
      LODWORD(v679) = v679 + switchable_rate;
    }
    v59 = v629;
    v253 = *(_QWORD *)(v57 + 25368);
    v254 = *(_QWORD *)(v57 + 25376);
    v58 = (uint64_t)v634;
    if (v254)
      v254 = *(char *)(v254 + 3);
    v56 = v628;
    if (v253)
      v253 = *(char *)(v253 + 3);
    v255 = v679 + vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v629 + 16) + v253 + v254 + 1967)];
    v664 = v245;
  }
  else
  {
    v682 = v676;
    if (*(unsigned __int8 *)(v182 + 2) >= 2u)
      v256 = 2;
    else
      v256 = *(unsigned __int8 *)(v182 + 2);
    block_yrd(v634, v669, (uint64_t)&v679, &v681, &v682, v627, v256, 1, 0);
    v257 = v681;
    *(_BYTE *)(v668 + 12) = v681;
    if (v257)
    {
      v258 = *(_QWORD *)(v669 + 25376);
      v57 = v669;
      v59 = v629;
      if (v258)
        v258 = *(char *)(v258 + 3);
      v56 = v628;
      v182 = v626;
      v58 = (uint64_t)v634;
      v70 = v648;
      v191 = v552;
      v193 = v553;
      v244 = v554;
      v192 = v548;
      v194 = v551;
      v259 = &ss_size_lookup[4 * v611];
      v260 = *(_QWORD *)(v669 + 25368);
      if (v260)
        v260 = *(char *)(v260 + 3);
      v255 = vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v629 + 16) + v260 + v258 + 1967)];
      LODWORD(v679) = v255;
    }
    else
    {
      v261 = v630[174];
      v262 = (*((_QWORD *)&v679 + 1) << v261) + (((int)v630[175] * (uint64_t)(int)v679 + 256) >> 9);
      v263 = v682 << v261;
      v59 = v629;
      v264 = *((_QWORD *)v629 + 16);
      v265 = *(_QWORD *)(v669 + 25368);
      v266 = *(_QWORD *)(v669 + 25376);
      v57 = v669;
      if (v262 >= v263)
      {
        v56 = v628;
        v58 = (uint64_t)v634;
        v70 = v648;
        v191 = v552;
        v193 = v553;
        v244 = v554;
        v267 = v664;
        v192 = v548;
        v194 = v551;
        v259 = &ss_size_lookup[4 * v611];
        if (v266)
          v269 = *(char *)(v266 + 3);
        else
          v269 = 0;
        v182 = v626;
        if (v265)
          v265 = *(char *)(v265 + 3);
        v255 = vp9_prob_cost[256 - *(unsigned __int8 *)(v264 + v265 + v269 + 1967)];
        LODWORD(v679) = v255;
        *((_QWORD *)&v679 + 1) = v682;
        *(_BYTE *)(v668 + 12) = 1;
      }
      else
      {
        v56 = v628;
        v58 = (uint64_t)v634;
        v70 = v648;
        v191 = v552;
        v193 = v553;
        v244 = v554;
        v267 = v664;
        v192 = v548;
        v194 = v551;
        v259 = &ss_size_lookup[4 * v611];
        if (v266)
          v268 = *(char *)(v266 + 3);
        else
          v268 = 0;
        v182 = v626;
        if (v265)
          v265 = *(char *)(v265 + 3);
        v255 = v679 + vp9_prob_cost[*(unsigned __int8 *)(v264 + v265 + v268 + 1967)];
        LODWORD(v679) = v255;
      }
      v664 = v267;
    }
    if (*(_BYTE *)(v661 + 948) == 4 && ((*(_WORD *)(v182 + 14) | *(_WORD *)(v182 + 12)) & 7) != 0)
    {
      v270 = vp9_get_switchable_rate(v58, v667);
      v259 = &ss_size_lookup[4 * v611];
      v194 = v551;
      v191 = v552;
      v193 = v553;
      v192 = v548;
      v70 = v648;
      v59 = v629;
      v58 = (uint64_t)v634;
      v57 = v669;
      v182 = v626;
      v56 = v628;
      v255 += v270;
      v244 = v554;
      LODWORD(v679) = v255;
    }
    v271 = *(unsigned __int8 *)(v668 + 136);
    if (*(_BYTE *)(v668 + 136) || *(_BYTE *)(v668 + 137))
    {
      v671 = 0;
      v670 = 0;
      v672 = 0;
      v272 = v259[2 * v630[30] + v630[31]];
      if (v271 && !(_DWORD)v685)
      {
        build_inter_predictors_for_planes(v667, v627, v624, v623, 1, 1);
        v57 = v669;
        LODWORD(v685) = 1;
      }
      if (*(_BYTE *)(v668 + 137) && !HIDWORD(v685))
      {
        build_inter_predictors_for_planes(v667, v627, v624, v623, 2, 2);
        v57 = v669;
        HIDWORD(v685) = 1;
      }
      model_rd_for_sb_uv((uint64_t)v634, v272, v57, v667, (int *)&v670, (int *)&v677, (int *)&v676, 1, 2);
      v58 = (uint64_t)v634;
      v57 = v669;
      v255 = v679 + v670;
      *((_QWORD *)&v679 + 1) += v671;
      v56 = v628;
      v182 = v626;
      v59 = v629;
      v70 = v648;
      v191 = v552;
      v193 = v553;
      v244 = v554;
      v192 = v548;
      v194 = v551;
    }
  }
  v273 = SHIDWORD(v681);
  LODWORD(v679) = HIDWORD(v681) + v255;
  v274 = *(&v689 + (char)v201)
       + (uint64_t)(*(_DWORD *)(v58
                             + 16 * *(unsigned __int8 *)(*(_QWORD *)(v57 + 25568) + (char)v201 + 32)
                             + 4 * v545
                             + 836568)
                 + HIDWORD(v681)
                 + v255);
  LODWORD(v679) = *(&v689 + (char)v201)
                + *(_DWORD *)(v58
                            + 16 * *(unsigned __int8 *)(*(_QWORD *)(v57 + 25568) + (char)v201 + 32)
                            + 4 * v545
                            + 836568)
                + HIDWORD(v681)
                + v255;
  v680 = (*((_QWORD *)&v679 + 1) << v630[174]) + (((int)v630[175] * v274 + 256) >> 9);
  v184 = v244;
  if (v59[3405] == 1 && v59[3396] >= 5 && v59[3477] != 1)
  {
    vp9_NEWMV_diff_bias(v572, v667, v202, (uint64_t)&v679, v627, *v543, v543[1], v544, *(unsigned __int8 *)(v668 + 140), *(unsigned __int8 *)(v668 + 138));
    v194 = v551;
    v191 = v552;
    v193 = v553;
    v192 = v548;
    v184 = v554;
    v70 = v648;
    v59 = v629;
    v58 = (uint64_t)v634;
    v57 = v669;
    v182 = v626;
    v56 = v628;
  }
  v275 = v543;
  if (*(_DWORD *)(v625 + 1668))
  {
    v276 = v586;
    if (v630[151])
      v276 = 1;
    if ((v276 & 1) == 0 && !*(_DWORD *)(v622 + 496))
    {
      encode_breakout_test(v58, v669, v627, v624, v623, v204, v202, v677, v676, (uint64_t)v700, &v679, (_QWORD *)&v679 + 1, v685, SHIDWORD(v685));
      v275 = v543;
      v194 = v551;
      v191 = v552;
      v193 = v553;
      v192 = v548;
      v184 = v554;
      v70 = v648;
      v59 = v629;
      v58 = (uint64_t)v634;
      v57 = v669;
      v182 = v626;
      v56 = v628;
      if (v630[492])
      {
        v277 = (int)v679 + v273;
        LODWORD(v679) = v679 + v273;
        v680 = (*((_QWORD *)&v679 + 1) << v630[174]) + (((int)v630[175] * v277 + 256) >> 9);
      }
    }
  }
  v12 = v625;
  v200 = v631;
  if (v59[3477] == 1)
  {
    if (v586)
    {
      if (!v544)
        goto LABEL_677;
LABEL_672:
      if (!*v275 && !*v612 && !v630[188] && v676)
        v680 *= 4;
    }
    else
    {
      v278 = v544;
      if (!*(_DWORD *)(v622 + 496))
        v278 = 0;
      if (v278)
        goto LABEL_672;
    }
  }
LABEL_677:
  if (v59[3394] >= 1 && v573 && *(_DWORD *)(v622 + 7416))
  {
    vp9_denoiser_update_frame_stats(v182, v676, v202, v571);
    if (v544)
    {
      v279 = v569;
      if (!*(_DWORD *)v543)
        v279 = v680;
      v569 = v279;
    }
    v56 = v628;
    v182 = v626;
    v57 = v669;
    v58 = (uint64_t)v634;
    v59 = v629;
    v200 = v631;
    v70 = v648;
    v191 = v552;
    v193 = v553;
    v184 = v554;
    v192 = v548;
    v194 = v551;
  }
  v710[4 * v546 + (char)v201] = 1;
  if (v680 < v555 || v630[492])
  {
    *(_OWORD *)v678 = v679;
    *(_QWORD *)&v678[16] = v680;
    v580 = *(_BYTE *)(v182 + 7);
    v585 = *(_BYTE *)(v182 + 2);
    v598 = *(unsigned __int8 *)(v668 + 12);
    if (v591)
    {
      v280 = v550;
      if (v191)
        *((_DWORD *)v191 + 3) = 0;
      v191 = v675;
    }
    else
    {
      v280 = v550;
    }
  }
  else
  {
    if (v591 && v675)
      *((_DWORD *)v675 + 3) = 0;
    v201 = v595;
    v202 = v597;
    v203 = v600;
    v280 = v564;
  }
  if (v630[492])
  {
    v281 = v563;
    if (BYTE2(v711))
      v281 = 1;
    if ((v281 & 1) != 0)
      goto LABEL_713;
  }
  if (v190)
    v282 = v280 == 0;
  else
    v282 = 1;
  v283 = v586;
  if (v282)
    v283 = 1;
  if ((v283 & 1) != 0)
    goto LABEL_710;
  v284 = v563;
  if (BYTE2(v711))
    v284 = 1;
  if (v284 != 1)
  {
LABEL_710:
    v595 = v201;
    v597 = v202;
    v600 = v203;
    v564 = v280;
    goto LABEL_400;
  }
  v630[492] = 1;
LABEL_713:
  LOBYTE(v595) = v201;
  LOBYTE(v597) = v202;
  LOBYTE(v600) = v203;
LABEL_714:
  *(_BYTE *)(v182 + 1) = v597;
  *(_BYTE *)(v182 + 7) = v580;
  *(_BYTE *)(v182 + 2) = v585;
  *(_BYTE *)(v182 + 8) = v595;
  v285 = v712[4 * v597 + (char)v595];
  *(_DWORD *)(v182 + 12) = v285;
  *(_DWORD *)(**(_QWORD **)(v57 + 25360) + 24) = v285;
  v286 = v668;
  *(_BYTE *)(v668 + 12) = v598;
  *(_BYTE *)(v182 + 9) = v600;
  v287 = v590;
  if (!*v612)
    v287 = 1;
  if ((v287 & 1) != 0)
  {
    v288 = 1;
    v289 = v630;
    v290 = v627;
    v291 = v609;
    v292 = v601;
    if (v59[3404] < 1)
      goto LABEL_728;
LABEL_727:
    if (!v59[3405] && *(_DWORD *)(v12 + 52))
    {
LABEL_732:
      v288 = 0;
      if (*(_BYTE *)v59)
        goto LABEL_733;
      goto LABEL_736;
    }
  }
  else
  {
    v293 = v612[1];
    v289 = v630;
    v291 = v609;
    if (v293)
    {
      v290 = v627;
      if (!*(_DWORD *)(v58 + 6880 * v293 + 758668) && (*(_BYTE *)(v12 + 984) & 2) != 0)
      {
        v288 = *((_DWORD *)&v687 + (char)v595 - 1) != 0;
        v292 = 3 * v601;
        if (v59[3404] < 1)
          goto LABEL_728;
        goto LABEL_727;
      }
      v288 = 1;
      v292 = 3 * v601;
      if (v59[3404] >= 1)
        goto LABEL_727;
    }
    else
    {
      v288 = 1;
      v290 = v627;
      v292 = 3 * v601;
      if (v59[3404] >= 1)
        goto LABEL_727;
    }
  }
LABEL_728:
  if (*(_BYTE *)(v622 + 629))
    goto LABEL_732;
  if (*(_BYTE *)v59)
  {
LABEL_733:
    v294 = *(char *)(v182 + 4);
    if ((*(_DWORD *)(v58 + 4 * v294 + 176552) & 4) != 0 && *(__int16 *)(v58 + 8 * v294 + 176492) > 0)
      v288 = 0;
  }
LABEL_736:
  if (*(_QWORD *)&v678[16] != 0x7FFFFFFFFFFFFFFFLL && (v59[3477] != 1 || v289[188]))
  {
    v295 = v586;
    if (!v288)
      v295 = 0;
    if (!v295
      && (v290 >= 9 && v640 && *(_BYTE *)(v668 + 164) != 6
       || !v288
       || v289[492]
       || *(uint64_t *)&v678[16] <= v292
       || *(unsigned __int8 *)(v12 + 1464) < v290
       || *(_BYTE *)(v668 + 139)
       || *(_BYTE *)(v668 + 140)))
    {
      v365 = v595;
      goto LABEL_835;
    }
  }
  v672 = 0;
  v670 = v58;
  v671 = v57;
  v685 = 0x7FFFFFFFFFFFFFFFLL;
  v296 = tx_mode_to_biggest_tx_size[*(unsigned int *)(v661 + 720)];
  if (v635 < v296)
    LOBYTE(v296) = v635;
  v606 = v296;
  if (!v591 || !v191 || *v191 != v589)
  {
    v575 = v191;
    goto LABEL_748;
  }
  if (HIDWORD(v695[0]))
  {
    if (HIDWORD(v696[0]))
    {
      if (HIDWORD(v697))
      {
        v368 = -1;
        goto LABEL_869;
      }
      v368 = 2;
      v375 = (char *)&v697 + 4;
    }
    else
    {
      v368 = 1;
      v375 = (char *)v696 + 4;
    }
  }
  else
  {
    v368 = 0;
    v375 = (char *)v695 + 4;
  }
  *(_DWORD *)v375 = 1;
LABEL_869:
  v381 = &v695[2 * v368 - 1];
  v675 = v381;
  v382 = (__int128 *)*v191;
  v575 = v381;
  if (*(_DWORD *)v588)
  {
    vpx_highbd_convolve_copy_neon((__n128 *)(2 * (_QWORD)v382), *((int *)v191 + 2), (__n128 *)(2 * *v381), *((int *)v381 + 2), 0, 0, 0, 0, 0, v581, v577);
    v59 = v629;
    v58 = (uint64_t)v634;
    v57 = v669;
    v182 = v626;
    v56 = v628;
  }
  else
  {
    v383 = *((int *)v191 + 2);
    v384 = (_OWORD *)*v381;
    v385 = *((int *)v381 + 2);
    if (v290 > 1)
    {
      if ((unint64_t)(v611 - 2) > 2)
      {
        if (v290 > 7)
        {
          if ((unint64_t)(v611 - 8) >= 3)
          {
            v433 = -4 * v610;
            v434 = v382 + 2;
            v435 = v384 + 2;
            do
            {
              v436 = *(v434 - 1);
              v437 = *v434;
              v438 = v434[1];
              *(v435 - 2) = *(v434 - 2);
              *(v435 - 1) = v436;
              *v435 = v437;
              v435[1] = v438;
              v434 = (__int128 *)((char *)v434 + v383);
              v435 = (_OWORD *)((char *)v435 + v385);
              v424 = __CFADD__(v433++, 1);
            }
            while (!v424);
          }
          else
          {
            v411 = -4 * v610;
            do
            {
              v412 = *v382;
              v413 = v382[1];
              v414 = (__int128 *)((char *)v382 + v383);
              v415 = *v414;
              v416 = v414[1];
              *v384 = v412;
              v384[1] = v413;
              v417 = (_OWORD *)((char *)v384 + v385);
              *v417 = v415;
              v417[1] = v416;
              v384 = (_OWORD *)((char *)v417 + v385);
              v382 = (__int128 *)((char *)v414 + v383);
              v411 += 2;
            }
            while (v411);
          }
        }
        else
        {
          v399 = -4 * v610;
          do
          {
            v400 = *v382;
            v401 = (__int128 *)((char *)v382 + v383);
            v402 = *v401;
            v382 = (__int128 *)((char *)v401 + v383);
            *v384 = v400;
            v403 = (_OWORD *)((char *)v384 + v385);
            *v403 = v402;
            v384 = (_OWORD *)((char *)v403 + v385);
            v399 += 2;
          }
          while (v399);
        }
      }
      else
      {
        v389 = -4 * v610;
        do
        {
          v390 = *(_QWORD *)v382;
          v391 = (uint64_t *)((char *)v382 + v383);
          v392 = *v391;
          v382 = (__int128 *)((char *)v391 + v383);
          *(_QWORD *)v384 = v390;
          v393 = (_QWORD *)((char *)v384 + v385);
          *v393 = v392;
          v384 = (_OWORD *)((char *)v393 + v385);
          v389 += 2;
        }
        while (v389);
      }
    }
    else
    {
      v386 = -4 * v610;
      do
      {
        *(_DWORD *)v384 = *(_DWORD *)v382;
        v387 = (_DWORD *)((char *)v382 + v383);
        v388 = (_DWORD *)((char *)v384 + v385);
        *v388 = *v387;
        v382 = (__int128 *)((char *)v387 + v383);
        v384 = (_OWORD *)((char *)v388 + v385);
        v386 += 2;
      }
      while (v386);
    }
    v182 = v626;
  }
LABEL_748:
  v297 = 0;
  *(_QWORD *)(v57 + 24928) = v589;
  *(_QWORD *)(v57 + 24936) = v584;
  v298 = (_DWORD *)(v58 + 4 * v611 + 739864);
  v662 = 1 << v635;
  v602 = v689 + v592;
  v299 = 4 * v662;
  v593 = 4;
  v604 = v298;
  while (2)
  {
    v300 = intra_mode_list[v297];
    v301 = mode_idx[qword_208F4AB30[v300]];
    v302 = *(_DWORD *)(v291 + 4 * v301);
    if (!*(_DWORD *)(v12 + 1556)
      || v289[188]
      || (v297 ? (v303 = *(_DWORD *)(v286 + 160) == 0) : (v303 = 1),
          v303 ? (v304 = 0) : (v304 = 1),
          v297 <= 2 && (v304 & 1) == 0))
    {
      if (((*v298 >> v300) & 1) != 0 && (!v297 || !*v613 || *(_BYTE *)(v286 + 164) == 6))
      {
        v305 = *(_QWORD *)&v678[16];
        v306 = (*(int *)(v614 + 4 * v301) * (uint64_t)v302) >> 5;
        v307 = v302 != 0x7FFFFFFF && v306 <= *(_QWORD *)&v678[16];
        if (v307 || v59[3477] == 1 && *v612 <= 0 && (v586 || *(_DWORD *)(v622 + 496)))
        {
          v308 = 0;
          *(_BYTE *)(v182 + 1) = v300;
          *(_BYTE *)(v182 + 8) = 0;
          LODWORD(v679) = 0;
          *((_QWORD *)&v679 + 1) = 0;
          LOBYTE(v672) = v300;
          HIDWORD(v672) = 1;
          v673 = &v679;
          *(_BYTE *)(v182 + 2) = v606;
          v309 = v289[117];
          if (v309 < 0)
            v308 = v309 >> (*v608 + 5);
          v645 = *(_QWORD *)(v57 + 8216);
          v641 = *(_QWORD *)(v57 + 24928);
          v310 = *(int *)(v57 + 8224);
          v311 = (int)*v289;
          v312 = v289[119];
          v621 = v297;
          v618 = v300;
          v616 = v305;
          if (v312 < 0)
          {
            v658 = ((v312 >> (v608[1] + 5)) + v610);
            v666 = v300;
            if ((int)v658 < 1)
              goto LABEL_789;
          }
          else
          {
            v658 = v610;
            v666 = v300;
            if (v610 < 1)
              goto LABEL_789;
          }
          v313 = (v308 + v594);
          if ((int)v313 >= 1)
          {
            v314 = 0;
            v315 = b_width_log2_lookup[v611];
            v653 = v299 * v311;
            v316 = *(_QWORD *)(v57 + 8216);
            v317 = *(_QWORD *)(v57 + 24928);
            v649 = v299 * v310;
            do
            {
              v318 = 0;
              v319 = 0;
              do
              {
                *(_QWORD *)(v57 + 8216) = v316 + v318;
                *(_QWORD *)(v57 + 24928) = v317 + v318;
                if (*(_DWORD *)v668)
                  v320 = v316 + v318;
                else
                  v320 = v317 + v318;
                if (*(_DWORD *)v668)
                  v321 = v310;
                else
                  v321 = v311;
                vp9_predict_intra_block(v667, v315, v635, v666, v320, v321, v317 + v318, v311, v319, v314, 0);
                v57 = v669;
                v319 += v662;
                v318 += 4 * v662;
              }
              while (v319 < v313);
              v314 += v662;
              v317 += v653;
              v316 += v649;
            }
            while (v314 < v658);
          }
LABEL_789:
          *(_QWORD *)(v57 + 8216) = v645;
          *(_QWORD *)(v57 + 24928) = v641;
          model_rd_for_sb_y((uint64_t)v634, v627, v57, v667, (int *)&v679, (unint64_t *)&v679 + 1, &v677, &v676, 1);
          if (*(unsigned __int8 *)(v626 + 2) >= 2u)
            v322 = 2;
          else
            v322 = *(unsigned __int8 *)(v626 + 2);
          block_yrd(v634, v57, (uint64_t)&v679, (_DWORD *)&v672 + 1, &v685, v627, v322, 1, 1);
          if (HIDWORD(v672))
          {
            *(_BYTE *)(v668 + 12) = 1;
            v323 = *(_QWORD *)(v57 + 25376);
            if (v323)
              v323 = *(char *)(v323 + 3);
            v324 = *(_QWORD *)(v57 + 25368);
            if (v324)
              v324 = *(char *)(v324 + 3);
            LODWORD(v679) = vp9_prob_cost[256 - *(unsigned __int8 *)(*((_QWORD *)v629 + 16) + v324 + v323 + 1967)];
            if (v629[3477] != 1)
              goto LABEL_830;
LABEL_804:
            if (*(_BYTE *)(v668 + 136))
            {
              v328 = (int)v630[30];
              v327 = (int)v630[31];
              v329 = ss_size_lookup[4 * v611 + 2 * v328 + v327];
              v632 = (((int)v630[119] >> (v327 + 5)) & ((int)v630[119] >> 31))
                   + num_4x4_blocks_high_lookup[v329];
              if ((int)v632 >= 1)
              {
                v330 = (((int)v630[117] >> (v328 + 5)) & ((int)v630[117] >> 31))
                     + num_4x4_blocks_wide_lookup[v329];
                if ((int)v330 >= 1)
                {
                  v331 = 0;
                  v332 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(v669 + 25360)
                                        + 4 * *(unsigned __int8 *)(**(_QWORD **)(v669 + 25360) + 2)
                                        + 2 * v328
                                        + v327];
                  v659 = v670;
                  v333 = (_DWORD *)(v671 + 82216);
                  v334 = (int *)(v671 + 16528);
                  v654 = txsize_to_bsize[v332];
                  v335 = b_width_log2_lookup[v329];
                  v336 = v671 + 24912;
                  v337 = v672;
                  v338 = *(_QWORD *)(v671 + 16520);
                  v339 = *(_QWORD *)(v671 + 25064);
                  v650 = v673;
                  v646 = 1 << v332;
                  v642 = v330;
                  v638 = (_DWORD *)(v671 + 82216);
                  do
                  {
                    for (i = 0; i < v642; i += v646)
                    {
                      v341 = *v334;
                      v342 = v334[2136];
                      v683 = 0;
                      v682 = 0;
                      v684 = 0;
                      *(_QWORD *)(v671 + 16520) = v338 + 4 * (i + v331 * v341);
                      v343 = v339 + 4 * (i + v331 * v342);
                      *(_QWORD *)(v671 + 25064) = v343;
                      if (*v333)
                        v344 = v338 + 4 * (i + v331 * v341);
                      else
                        v344 = v339 + 4 * (i + v331 * v342);
                      if (*v333)
                        v345 = v341;
                      else
                        v345 = v342;
                      vp9_predict_intra_block(v336, v335, v332, v337, v344, v345, v343, v342, i, v331, 1);
                      v681 = 0;
                      model_rd_for_sb_uv(v659, v654, v671, v336, (int *)&v682, (int *)&v681 + 1, (int *)&v681, 1, 1);
                      v333 = v638;
                      *(_QWORD *)(v671 + 16520) = v338;
                      *(_QWORD *)(v671 + 25064) = v339;
                      *(_DWORD *)v650 += v682;
                      *((_QWORD *)v650 + 1) += v683;
                    }
                    v331 += v646;
                  }
                  while (v331 < v632);
                }
              }
            }
            if (*(_BYTE *)(v668 + 137))
            {
              v346 = (int)v608[68];
              v347 = (int)v608[69];
              v348 = ss_size_lookup[4 * v611 + 2 * v346 + v347];
              v633 = (((int)v630[119] >> (v347 + 5)) & ((int)v630[119] >> 31))
                   + num_4x4_blocks_high_lookup[v348];
              if ((int)v633 >= 1)
              {
                v349 = (((int)v630[117] >> (v346 + 5)) & ((int)v630[117] >> 31))
                     + num_4x4_blocks_wide_lookup[v348];
                if ((int)v349 >= 1)
                {
                  v350 = 0;
                  v351 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(v669 + 25360)
                                        + 4 * *(unsigned __int8 *)(**(_QWORD **)(v669 + 25360) + 2)
                                        + 2 * v346
                                        + v347];
                  v660 = v670;
                  v352 = (_DWORD *)(v671 + 82216);
                  v353 = (int *)(v671 + 24832);
                  v655 = txsize_to_bsize[v351];
                  v354 = b_width_log2_lookup[v348];
                  v355 = v671 + 24912;
                  v356 = v672;
                  v357 = *(_QWORD *)(v671 + 24824);
                  v358 = *(_QWORD *)(v671 + 25200);
                  v651 = v673;
                  v647 = 1 << v351;
                  v643 = v349;
                  v639 = (_DWORD *)(v671 + 82216);
                  do
                  {
                    for (j = 0; j < v643; j += v647)
                    {
                      v360 = *v353;
                      v361 = v353[94];
                      v683 = 0;
                      v682 = 0;
                      v684 = 0;
                      *(_QWORD *)(v671 + 24824) = v357 + 4 * (j + v350 * v360);
                      v362 = v358 + 4 * (j + v350 * v361);
                      *(_QWORD *)(v671 + 25200) = v362;
                      if (*v352)
                        v363 = v357 + 4 * (j + v350 * v360);
                      else
                        v363 = v358 + 4 * (j + v350 * v361);
                      if (*v352)
                        v364 = v360;
                      else
                        v364 = v361;
                      vp9_predict_intra_block(v355, v354, v351, v356, v363, v364, v362, v361, j, v350, 2);
                      v681 = 0;
                      model_rd_for_sb_uv(v660, v655, v671, v355, (int *)&v682, (int *)&v681 + 1, (int *)&v681, 2, 2);
                      v352 = v639;
                      *(_QWORD *)(v671 + 24824) = v357;
                      *(_QWORD *)(v671 + 25200) = v358;
                      *(_DWORD *)v651 += v682;
                      *((_QWORD *)v651 + 1) += v683;
                    }
                    v350 += v647;
                  }
                  while (v350 < v633);
                }
              }
            }
            goto LABEL_830;
          }
          *(_BYTE *)(v668 + 12) = 0;
          v325 = *(_QWORD *)(v57 + 25376);
          if (v325)
            v325 = *(char *)(v325 + 3);
          v326 = *(_QWORD *)(v57 + 25368);
          if (v326)
            v326 = *(char *)(v326 + 3);
          LODWORD(v679) = v679 + vp9_prob_cost[*(unsigned __int8 *)(*((_QWORD *)v629 + 16) + v326 + v325 + 1967)];
          if (v629[3477] == 1)
            goto LABEL_804;
LABEL_830:
          v58 = (uint64_t)v634;
          LODWORD(v679) = v602 + v679 + v634[v618 + 209132];
          v289 = v630;
          v680 = (*((_QWORD *)&v679 + 1) << v630[174]) + (((int)v630[175] * (uint64_t)(int)v679 + 256) >> 9);
          v56 = v628;
          v12 = v625;
          v182 = v626;
          v290 = v627;
          v57 = v669;
          v59 = v629;
          v286 = v668;
          v291 = v609;
          v297 = v621;
          v298 = v604;
          v299 = 4 * v662;
          if (v680 < v616)
          {
            *(_OWORD *)v678 = v679;
            *(_QWORD *)&v678[16] = v680;
            v593 = *(_BYTE *)(v626 + 2);
            *(_BYTE *)(v626 + 6) = v666;
            *(_QWORD *)(v626 + 12) = 0x8000800080008000;
            LOBYTE(v598) = *(_BYTE *)(v668 + 12);
            LOBYTE(v600) = -1;
            LOBYTE(v595) = 0;
            LOBYTE(v597) = v666;
          }
        }
      }
    }
    if (++v297 != 4)
      continue;
    break;
  }
  v365 = v595;
  v366 = v585;
  if (!(_BYTE)v595)
    v366 = v593;
  *(_BYTE *)(v182 + 2) = v366;
  v191 = v575;
LABEL_835:
  *(_QWORD *)(v57 + 24928) = v589;
  *(_QWORD *)(v57 + 24936) = v584;
  *(_BYTE *)(v182 + 1) = v597;
  *(_BYTE *)(v182 + 8) = v365;
  *(_BYTE *)(v182 + 9) = v600;
  *(_BYTE *)(v286 + 12) = v598;
  if (*(char *)(v182 + 8) <= 0)
    *(_BYTE *)(v182 + 7) = 3;
  if (v591)
  {
    if (v191)
    {
      v367 = (__int128 *)*v191;
      if (*v191 != v589 && *(unsigned __int8 *)(v626 + 1) - 14 >= 0xFFFFFFFC)
      {
        if (*(_DWORD *)v588)
        {
          vpx_highbd_convolve_copy_neon((__n128 *)(2 * (_QWORD)v367), *((int *)v191 + 2), (__n128 *)(2 * *(_QWORD *)(v57 + 24928)), (int)*v289, 0, 0, 0, 0, 0, v581, v577);
          v59 = v629;
          v58 = (uint64_t)v634;
          v57 = v669;
          v56 = v628;
        }
        else
        {
          v369 = *((int *)v191 + 2);
          v370 = *(_OWORD **)(v57 + 24928);
          v371 = (int)*v289;
          if (v290 > 1)
          {
            if ((unint64_t)(v611 - 2) > 2)
            {
              if (v290 > 7)
              {
                if ((unint64_t)(v611 - 8) >= 3)
                {
                  v418 = -4 * v610;
                  v419 = v367 + 2;
                  v420 = v370 + 2;
                  do
                  {
                    v421 = *(v419 - 1);
                    v422 = *v419;
                    v423 = v419[1];
                    *(v420 - 2) = *(v419 - 2);
                    *(v420 - 1) = v421;
                    *v420 = v422;
                    v420[1] = v423;
                    v419 = (__int128 *)((char *)v419 + v369);
                    v420 = (_OWORD *)((char *)v420 + v371);
                    v424 = __CFADD__(v418++, 1);
                  }
                  while (!v424);
                }
                else
                {
                  v404 = -4 * v610;
                  do
                  {
                    v405 = *v367;
                    v406 = v367[1];
                    v407 = (__int128 *)((char *)v367 + v369);
                    v408 = *v407;
                    v409 = v407[1];
                    *v370 = v405;
                    v370[1] = v406;
                    v410 = (_OWORD *)((char *)v370 + v371);
                    *v410 = v408;
                    v410[1] = v409;
                    v370 = (_OWORD *)((char *)v410 + v371);
                    v367 = (__int128 *)((char *)v407 + v369);
                    v404 += 2;
                  }
                  while (v404);
                }
              }
              else
              {
                v394 = -4 * v610;
                do
                {
                  v395 = *v367;
                  v396 = (__int128 *)((char *)v367 + v369);
                  v397 = *v396;
                  v367 = (__int128 *)((char *)v396 + v369);
                  *v370 = v395;
                  v398 = (_OWORD *)((char *)v370 + v371);
                  *v398 = v397;
                  v370 = (_OWORD *)((char *)v398 + v371);
                  v394 += 2;
                }
                while (v394);
              }
            }
            else
            {
              v376 = -4 * v610;
              do
              {
                v377 = *(_QWORD *)v367;
                v378 = (uint64_t *)((char *)v367 + v369);
                v379 = *v378;
                v367 = (__int128 *)((char *)v378 + v369);
                *(_QWORD *)v370 = v377;
                v380 = (_QWORD *)((char *)v370 + v371);
                *v380 = v379;
                v370 = (_OWORD *)((char *)v380 + v371);
                v376 += 2;
              }
              while (v376);
            }
          }
          else
          {
            v372 = -4 * v610;
            do
            {
              *(_DWORD *)v370 = *(_DWORD *)v367;
              v373 = (_DWORD *)((char *)v367 + v369);
              v374 = (_DWORD *)((char *)v370 + v371);
              *v374 = *v373;
              v367 = (__int128 *)((char *)v373 + v369);
              v370 = (_OWORD *)((char *)v374 + v371);
              v372 += 2;
            }
            while (v372);
          }
        }
      }
    }
  }
  if (v59[3394] >= 1 && !v576[7] && v573 && *(_DWORD *)(v622 + 7416) && !*v576)
  {
    LODWORD(v681) = 0;
    *(_DWORD *)(v571 + 816) = *(_DWORD *)v578 != 0;
    vp9_denoiser_denoise(v58, v57, v624, v623, v290, v571, (int *)&v681, v590);
    if (*v572 && v576[18] >= 2u)
    {
      v425 = *(_QWORD *)&v678[16];
      v56 = v628;
      if (v569 >= 8 * *(_QWORD *)&v678[16])
        goto LABEL_921;
      if (!v365 && (_DWORD)v681)
        goto LABEL_911;
      v426 = v365;
      if (v365 == 2)
      {
        if ((_DWORD)v681 == 2 && v579[1981] == 1)
        {
LABEL_911:
          v427 = v365;
          LODWORD(v682) = 0;
          v670 = 0;
          v428 = v626;
          *(_BYTE *)(v626 + 1) = 12;
          *(_WORD *)(v626 + 8) = -255;
          *(_QWORD *)(v669 + 25424) = v634 + 43028;
          *(_QWORD *)(v669 + 25432) = v634 + 43028;
          *(_DWORD *)(v626 + 12) = 0;
          if (*(_BYTE *)(v12 + 1480) == 3)
            v429 = 3;
          else
            v429 = 0;
          *(_BYTE *)(v626 + 7) = v429;
          *v570 = v701;
          build_inter_predictors_for_planes(v667, v290, v624, v623, 0, 0);
          model_rd_for_sb_y((uint64_t)v634, v290, v669, v667, (int *)&v682, (unint64_t *)&v670, &v685, (unsigned int *)&v681 + 1, 0);
          v430 = (v670 << v289[174]) + (((int)v289[175] * (uint64_t)(int)v682 + 256) >> 9);
          if (v430 <= v425)
          {
            *(_QWORD *)v678 = (v690
                                           + v682
                                           + v634[4 * *(unsigned __int8 *)(*(_QWORD *)(v669 + 25568) + 33) + 209144]);
            *(_QWORD *)&v678[8] = v670;
            *(_QWORD *)&v678[16] = v430;
            v427 = 1;
            v56 = v628;
          }
          else
          {
            *(_BYTE *)(v626 + 1) = v597;
            *(_BYTE *)(v626 + 8) = v365;
            v431 = v365 - 1;
            if (!v365)
              v431 = 0;
            *(_QWORD *)(v669 + 25424) = &v634[44 * v431 + 43028];
            *(_QWORD *)(v669 + 25432) = v634 + 43028;
            *(_BYTE *)(v626 + 7) = v580;
            if (v365 == 2)
            {
              *(_DWORD *)(v626 + 12) = v712[4 * v597 + 2];
              v56 = v628;
              v432 = v668;
              if (v591)
              {
                *v570 = v704;
                build_inter_predictors_for_planes(v667, v290, v624, v623, 0, 0);
                v428 = v626;
                v56 = v628;
              }
            }
            else
            {
              v56 = v628;
              v432 = v668;
              if (!v365)
              {
                *(_DWORD *)(v626 + 12) = -2147450880;
                *(_BYTE *)(v626 + 7) = 3;
              }
            }
            *(_BYTE *)(v428 + 2) = v585;
            *(_BYTE *)(v432 + 12) = v598;
          }
          v426 = v427;
        }
      }
      else
      {
LABEL_921:
        v426 = v365;
      }
    }
    else
    {
      v426 = v365;
      v56 = v628;
    }
    v365 = v426;
  }
  if (v365 == 3 || v600 == 3)
  {
    ++*(_BYTE *)(v578 + 34);
    v439 = v626;
  }
  else
  {
    v439 = v626;
    if (v365)
      ++*(_BYTE *)(v578 + 35);
  }
  v440 = *v579;
  if (!*v579)
    goto LABEL_1095;
  v441 = *(unsigned __int8 *)(v439 + 1);
  v442 = v441 - 10;
  if (v441 < 0xA)
    v442 = qword_208F4AB30[(char)v441];
  v443 = mode_idx[4 * v365 + v442];
  if (!v365)
  {
    if (*(_DWORD *)(v12 + 1064))
    {
      v452 = *(_QWORD *)(v56 + 3704);
      v453 = (int)v582 + 3;
      v454 = *(_DWORD *)(v452 + 4 * v453);
      if (v443 == 3)
      {
        *(_DWORD *)(v452 + 4 * v453) = v454 - (v454 >> 4);
        if (!*(_DWORD *)(v12 + 1064))
          goto LABEL_951;
LABEL_978:
        v479 = *(_QWORD *)(v56 + 3704);
        v480 = (int)v582 + 23;
        v481 = *(_DWORD *)(v479 + 4 * v480);
        if (v443 == 23)
        {
          *(_DWORD *)(v479 + 4 * v480) = v481 - (v481 >> 4);
          if (!*(_DWORD *)(v12 + 1064))
          {
LABEL_980:
            v482 = v56 + 120 * v611;
            v485 = *(_DWORD *)(v482 + 104);
            v483 = (int *)(v482 + 104);
            v484 = v485;
            if (v443 == 22)
            {
              *v483 = v484 - (v484 >> 4);
              if (!*(_DWORD *)(v12 + 1064))
                goto LABEL_989;
LABEL_995:
              v496 = *(_QWORD *)(v56 + 3704);
              v497 = (int)v582 + 15;
              v498 = *(_DWORD *)(v496 + 4 * v497);
              if (v443 != 15)
                goto LABEL_1039;
              goto LABEL_996;
            }
            if (v484 + 1 < *v579 << 6)
              v499 = v484 + 1;
            else
              v499 = *v579 << 6;
            *v483 = v499;
            if (*(_DWORD *)(v12 + 1064))
              goto LABEL_995;
            goto LABEL_989;
          }
        }
        else
        {
          if (v481 + 1 < *v579 << 6)
            v486 = v481 + 1;
          else
            v486 = *v579 << 6;
          *(_DWORD *)(v479 + 4 * v480) = v486;
          if (!*(_DWORD *)(v12 + 1064))
            goto LABEL_980;
        }
LABEL_987:
        v487 = *(_QWORD *)(v56 + 3704);
        v488 = (int)v582 + 22;
        v489 = *(_DWORD *)(v487 + 4 * v488);
        if (v443 == 22)
        {
          *(_DWORD *)(v487 + 4 * v488) = v489 - (v489 >> 4);
          if (!*(_DWORD *)(v12 + 1064))
            goto LABEL_989;
          goto LABEL_995;
        }
        if (v489 + 1 < *v579 << 6)
          v495 = v489 + 1;
        else
          v495 = *v579 << 6;
        *(_DWORD *)(v487 + 4 * v488) = v495;
        if (*(_DWORD *)(v12 + 1064))
          goto LABEL_995;
LABEL_989:
        v490 = v56 + 120 * v611;
        v493 = *(_DWORD *)(v490 + 76);
        v491 = (int *)(v490 + 76);
        v492 = v493;
        if (v443 != 15)
          goto LABEL_1014;
        goto LABEL_990;
      }
      v467 = v440 << 6;
      if (v454 + 1 < v467)
        v467 = v454 + 1;
      *(_DWORD *)(v452 + 4 * v453) = v467;
      if (*(_DWORD *)(v12 + 1064))
        goto LABEL_978;
    }
    else
    {
      v462 = v56 + 120 * v611;
      v465 = *(_DWORD *)(v462 + 28);
      v463 = (int *)(v462 + 28);
      v464 = v465;
      if (v443 == 3)
      {
        v466 = v464 - (v464 >> 4);
      }
      else
      {
        v466 = v440 << 6;
        if (v464 + 1 < v466)
          v466 = v464 + 1;
      }
      *v463 = v466;
      if (*(_DWORD *)(v12 + 1064))
        goto LABEL_978;
    }
LABEL_951:
    v455 = v56 + 120 * v611;
    v458 = *(_DWORD *)(v455 + 108);
    v456 = (int *)(v455 + 108);
    v457 = v458;
    if (v443 == 23)
    {
      *v456 = v457 - (v457 >> 4);
      if (!*(_DWORD *)(v12 + 1064))
        goto LABEL_980;
    }
    else
    {
      if (v457 + 1 < *v579 << 6)
        v478 = v457 + 1;
      else
        v478 = *v579 << 6;
      *v456 = v478;
      if (!*(_DWORD *)(v12 + 1064))
        goto LABEL_980;
    }
    goto LABEL_987;
  }
  if (v365 != 1)
  {
    if (v365 != 2)
      goto LABEL_1095;
    if (*(_DWORD *)(v12 + 1064))
    {
      v444 = *(_QWORD *)(v56 + 3704);
      v445 = (int)v582 + 2;
      v446 = *(_DWORD *)(v444 + 4 * v445);
      if (v443 == 2)
      {
        *(_DWORD *)(v444 + 4 * v445) = v446 - (v446 >> 4);
        if (!*(_DWORD *)(v12 + 1064))
          goto LABEL_946;
LABEL_1025:
        v507 = *(_QWORD *)(v56 + 3704);
        v508 = (int)v582 + 9;
        v509 = *(_DWORD *)(v507 + 4 * v508);
        if (v443 == 9)
        {
          *(_DWORD *)(v507 + 4 * v508) = v509 - (v509 >> 4);
          if (!*(_DWORD *)(v12 + 1064))
            goto LABEL_1027;
LABEL_1011:
          v501 = *(_QWORD *)(v56 + 3704);
          v502 = (int)v582 + 11;
          v503 = *(_DWORD *)(v501 + 4 * v502);
          if (v443 == 11)
          {
            *(_DWORD *)(v501 + 4 * v502) = v503 - (v503 >> 4);
            if (!*(_DWORD *)(v12 + 1064))
              goto LABEL_1013;
LABEL_1038:
            v496 = *(_QWORD *)(v56 + 3704);
            v497 = (int)v582 + 6;
            v498 = *(_DWORD *)(v496 + 4 * v497);
            if (v443 != 6)
            {
LABEL_1039:
              if (v498 + 1 < *v579 << 6)
                v516 = v498 + 1;
              else
                v516 = *v579 << 6;
              *(_DWORD *)(v496 + 4 * v497) = v516;
              goto LABEL_1095;
            }
LABEL_996:
            *(_DWORD *)(v496 + 4 * v497) = v498 - (v498 >> 4);
            goto LABEL_1095;
          }
          if (v503 + 1 < *v579 << 6)
            v506 = v503 + 1;
          else
            v506 = *v579 << 6;
          *(_DWORD *)(v501 + 4 * v502) = v506;
          if (*(_DWORD *)(v12 + 1064))
            goto LABEL_1038;
LABEL_1013:
          v504 = v56 + 120 * v611;
          v505 = *(_DWORD *)(v504 + 40);
          v491 = (int *)(v504 + 40);
          v492 = v505;
          if (v443 != 6)
          {
LABEL_1014:
            if (v492 + 1 < *v579 << 6)
              v494 = v492 + 1;
            else
              v494 = *v579 << 6;
            goto LABEL_1094;
          }
LABEL_990:
          v494 = v492 - (v492 >> 4);
LABEL_1094:
          *v491 = v494;
          goto LABEL_1095;
        }
        if (v509 + 1 < *v579 << 6)
          v515 = v509 + 1;
        else
          v515 = *v579 << 6;
        *(_DWORD *)(v507 + 4 * v508) = v515;
        if (*(_DWORD *)(v12 + 1064))
          goto LABEL_1011;
LABEL_1027:
        v510 = v56 + 120 * v611;
        v513 = *(_DWORD *)(v510 + 60);
        v511 = (int *)(v510 + 60);
        v512 = v513;
        if (v443 == 11)
        {
          v514 = v512 - (v512 >> 4);
        }
        else if (v512 + 1 < *v579 << 6)
        {
          v514 = v512 + 1;
        }
        else
        {
          v514 = *v579 << 6;
        }
        *v511 = v514;
        if (*(_DWORD *)(v12 + 1064))
          goto LABEL_1038;
        goto LABEL_1013;
      }
      v500 = v440 << 6;
      if (v446 + 1 < v500)
        v500 = v446 + 1;
      *(_DWORD *)(v444 + 4 * v445) = v500;
      if (*(_DWORD *)(v12 + 1064))
        goto LABEL_1025;
    }
    else
    {
      v468 = v56 + 120 * v611;
      v471 = *(_DWORD *)(v468 + 24);
      v469 = (int *)(v468 + 24);
      v470 = v471;
      if (v443 == 2)
      {
        v472 = v470 - (v470 >> 4);
      }
      else
      {
        v472 = v440 << 6;
        if (v470 + 1 < v472)
          v472 = v470 + 1;
      }
      *v469 = v472;
      if (*(_DWORD *)(v12 + 1064))
        goto LABEL_1025;
    }
LABEL_946:
    v447 = v56 + 120 * v611;
    v450 = *(_DWORD *)(v447 + 52);
    v448 = (int *)(v447 + 52);
    v449 = v450;
    if (v443 == 9)
    {
      v451 = v449 - (v449 >> 4);
    }
    else if (v449 + 1 < *v579 << 6)
    {
      v451 = v449 + 1;
    }
    else
    {
      v451 = *v579 << 6;
    }
    *v448 = v451;
    if (*(_DWORD *)(v12 + 1064))
      goto LABEL_1011;
    goto LABEL_1027;
  }
  if (*(_DWORD *)(v12 + 1064))
  {
    v459 = *(_QWORD *)(v56 + 3704);
    v460 = *(_DWORD *)(v459 + 4 * v582);
    if (v443)
    {
      v461 = v440 << 6;
      if (v460 + 1 < v461)
        v461 = v460 + 1;
      *(_DWORD *)(v459 + 4 * v582) = v461;
    }
    else
    {
      *(_DWORD *)(v459 + 4 * v582) = v460 - (v460 >> 4);
    }
  }
  else
  {
    v473 = v56 + 120 * v611;
    v476 = *(_DWORD *)(v473 + 16);
    v474 = (int *)(v473 + 16);
    v475 = v476;
    if (v443)
    {
      v477 = v440 << 6;
      if (v475 + 1 < v477)
        v477 = v475 + 1;
    }
    else
    {
      v477 = v475 - (v475 >> 4);
    }
    *v474 = v477;
  }
  if (!*(_DWORD *)(v12 + 1064))
  {
    v525 = v56 + 120 * v611;
    v528 = *(_DWORD *)(v525 + 44);
    v526 = (int *)(v525 + 44);
    v527 = v528;
    if (v443 == 7)
    {
      v529 = v527 - (v527 >> 4);
    }
    else if (v527 + 1 < *v579 << 6)
    {
      v529 = v527 + 1;
    }
    else
    {
      v529 = *v579 << 6;
    }
    *v526 = v529;
    if (*(_DWORD *)(v12 + 1064))
      goto LABEL_1073;
LABEL_1048:
    v520 = v56 + 120 * v611;
    v523 = *(_DWORD *)(v520 + 56);
    v521 = (int *)(v520 + 56);
    v522 = v523;
    if (v443 == 10)
    {
      v524 = v522 - (v522 >> 4);
    }
    else if (v522 + 1 < *v579 << 6)
    {
      v524 = v522 + 1;
    }
    else
    {
      v524 = *v579 << 6;
    }
    *v521 = v524;
    v531 = v289[188];
    if (!*(_DWORD *)(v12 + 1064))
      goto LABEL_1075;
    goto LABEL_1061;
  }
  v517 = *(_QWORD *)(v56 + 3704);
  v518 = (int)v582 + 7;
  v519 = *(_DWORD *)(v517 + 4 * v518);
  if (v443 != 7)
  {
    if (v519 + 1 < *v579 << 6)
      v530 = v519 + 1;
    else
      v530 = *v579 << 6;
    *(_DWORD *)(v517 + 4 * v518) = v530;
    if (*(_DWORD *)(v12 + 1064))
      goto LABEL_1073;
    goto LABEL_1048;
  }
  *(_DWORD *)(v517 + 4 * v518) = v519 - (v519 >> 4);
  if (!*(_DWORD *)(v12 + 1064))
    goto LABEL_1048;
LABEL_1073:
  v536 = *(_QWORD *)(v56 + 3704);
  v537 = (int)v582 + 10;
  v538 = *(_DWORD *)(v536 + 4 * v537);
  if (v443 == 10)
  {
    *(_DWORD *)(v536 + 4 * v537) = v538 - (v538 >> 4);
    v531 = v289[188];
    if (!*(_DWORD *)(v12 + 1064))
    {
LABEL_1075:
      v491 = (int *)(v56 + 120 * v611 + 32);
      if (v443 == 4)
      {
        v494 = *v491 - (*v491 >> 4);
      }
      else
      {
        v540 = *v491;
        if (v531 <= 4 && v579[126])
        {
          if (v540 < 31)
            v494 = v540 + 1;
          else
            v494 = 32;
        }
        else if (v540 + 1 < *v579 << 6)
        {
          v494 = v540 + 1;
        }
        else
        {
          v494 = *v579 << 6;
        }
      }
      goto LABEL_1094;
    }
  }
  else
  {
    if (v538 + 1 < *v579 << 6)
      v539 = v538 + 1;
    else
      v539 = *v579 << 6;
    *(_DWORD *)(v536 + 4 * v537) = v539;
    v531 = v289[188];
    if (!*(_DWORD *)(v12 + 1064))
      goto LABEL_1075;
  }
LABEL_1061:
  v532 = *(_QWORD *)(v56 + 3704);
  v533 = (int)v582 + 4;
  if (v443 == 4)
  {
    *(_DWORD *)(v532 + 4 * v533) -= *(int *)(v532 + 4 * v533) >> 4;
  }
  else
  {
    v534 = *(_DWORD *)(v532 + 4 * v533);
    if (v531 <= 4 && v579[126])
    {
      if (v534 < 31)
        v535 = v534 + 1;
      else
        v535 = 32;
      *(_DWORD *)(v532 + 4 * v533) = v535;
    }
    else
    {
      if (v534 + 1 < *v579 << 6)
        v541 = v534 + 1;
      else
        v541 = *v579 << 6;
      *(_DWORD *)(v532 + 4 * v533) = v541;
    }
  }
LABEL_1095:
  *(_OWORD *)v587 = *(_OWORD *)v678;
  *(_QWORD *)(v587 + 16) = *(_QWORD *)&v678[16];
}

uint64_t search_new_mv(int *a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6, int a7, int a8, int a9, int *a10, unsigned int a11, uint64_t a12)
{
  unsigned __int8 v15;
  int *v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t *v26;
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  int v35;
  unsigned __int16 *v36;
  int v37;
  int v39;
  char v40;
  int *v41;
  _BOOL4 v42;
  char v43;

  v15 = a4;
  v19 = (int *)(a2 + 24952);
  if (a4 < 2 || !a5 || a1[47523] != 1)
  {
    if (!a1[208674] || !a1[186878])
    {
      if (!combined_motion_search(a1, a2, a6, a7, a8, (unsigned __int16 *)(a3 + 4 * a4 + 208), a10, *(_QWORD *)(a12 + 16), 0))return 0xFFFFFFFFLL;
      return 0;
    }
    v34 = a3 + 4 * a4;
    v37 = *(_DWORD *)(v34 + 208);
    v36 = (unsigned __int16 *)(v34 + 208);
    v35 = v37;
    if (v37 == -2147450880)
    {
      if (!combined_motion_search(a1, a2, a6, a7, a8, v36, a10, *(_QWORD *)(a12 + 16), 0))
        return 0xFFFFFFFFLL;
      return 0;
    }
    v39 = *v19;
    if (a1[184768] <= 60)
      v40 = 4;
    else
      v40 = 2;
    v43 = v40;
    v41 = a1 + 184768;
    (*(void (**)(_QWORD, _QWORD, _QWORD))&a1[16 * (unint64_t)a6 + 185122])(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944) + v39 * ((__int16)v35 >> 3) + (v35 >> 19));
    if (v41[2109] && a6 <= 5 && a1[208674] && !*v36 && !v36[1])
      return 0xFFFFFFFFLL;
    if (v41[259])
    {
      if (0xFFFFFFFF >> v43 > a11)
        return 0xFFFFFFFFLL;
      if (a11 > 0x7FFFFFFF)
      {
        if (a11 == -1
          && 0xFFFFFFFF >> (b_height_log2_lookup[a6] + b_width_log2_lookup[a6]) <= 0x18F
          && !*v36
          && !v36[1])
        {
          return 0xFFFFFFFFLL;
        }
        goto LABEL_37;
      }
    }
    else if (a11 > 0x7FFFFFFF)
    {
LABEL_37:
      v42 = combined_motion_search(a1, a2, a6, a7, a8, v36, a10, *(_QWORD *)(a12 + 16), 1);
      goto LABEL_39;
    }
    v42 = combined_motion_search(a1, a2, a6, a7, a8, v36, a10, *(_QWORD *)(a12 + 16), 0);
LABEL_39:
    if (!v42)
      return 0xFFFFFFFFLL;
    return 0;
  }
  v20 = **(_QWORD **)(a2 + 25360);
  if (a6 >= 6)
  {
    v21 = a1 + 184768;
    v22 = vp9_int_pro_motion_estimation((uint64_t)a1, a2, a6, a7, a8, (__int16 *)(*(_QWORD *)(a2 + 25568) + 8 * a4));
    if (v22 <= v19[190] && v22 + 16 * num_pels_log2_lookup[a6] <= a9)
    {
      v23 = *(_DWORD *)(v20 + 12);
      v24 = 4 * v15;
      *(_DWORD *)(a3 + v24 + 208) = v23;
      v25 = (unsigned __int16 *)(*(_QWORD *)(a2 + 25568) + 8 * v15);
      v26 = *(uint64_t **)(a2 + 25776);
      v27 = *v25;
      v28 = v23 - v27;
      v29 = HIWORD(v23) - v25[1];
      v30 = *v26;
      v31 = v26[1];
      v32 = 2;
      if (v29)
        v32 = 3;
      if (v27 == (unsigned __int16)v23)
        v33 = v29 != 0;
      else
        v33 = v32;
      *a10 = (108
            * (*(_DWORD *)(v30 + 4 * v28) + *(_DWORD *)(v31 + 4 * (__int16)v29) + *(_DWORD *)(a2 + 25724 + 4 * v33))
            + 64) >> 7;
      *(_WORD *)(a3 + v24 + 208) = *(__int16 *)(a3 + v24 + 208) >> 3;
      *(_WORD *)(a3 + v24 + 210) = *(__int16 *)(a3 + v24 + 210) >> 3;
      (*((void (**)(uint64_t))v21 + 152))(a2);
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t search_filter_ref(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, _DWORD *a6, unsigned int a7, int a8, _QWORD **a9, _DWORD *a10, _DWORD *a11, int a12, _DWORD *a13, _DWORD *a14, int a15)
{
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int *v23;
  unint64_t *v24;
  _DWORD *v25;
  unsigned int *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int64_t v37;
  char v38;
  int v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  _QWORD *v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int64_t v59;
  char v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  int v64;
  uint64_t v65;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  int v70;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int16 v82;
  char v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91[2];
  uint64_t v92;
  int v93;
  uint64_t v94;

  v15 = a5;
  v74 = 0;
  v94 = *MEMORY[0x24BDAC8D0];
  v76 = (char *)(a2 + 82228);
  v72 = (int *)(a2 + 24936);
  v17 = a2 + 24912;
  v18 = **(_QWORD **)(a2 + 25360);
  v70 = 4 * num_4x4_blocks_wide_lookup[a7];
  v93 = 0;
  v91[1] = 0;
  v92 = 0;
  v90 = 0;
  v91[0] = 0;
  v89 = 0;
  v88 = 0;
  v19 = a12 != 0;
  v69 = a6 + 3;
  v87 = 0;
  v86 = 0;
  v85 = 0;
  v67 = a6 + 11;
  v68 = a6 + 7;
  v75 = 0;
  v84 = 0;
  v83 = 0;
  v82 = 0;
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v73 = 4;
  v21 = *a9;
  while (1)
  {
    *(_BYTE *)(v18 + 7) = v19;
    build_inter_predictors_for_planes(v17, a7, a4, v15, 0, 0);
    v23 = (int *)&v92 + v19;
    v24 = &v91[v19 - 1];
    v25 = (_DWORD *)&v86 + v19;
    v26 = (unsigned int *)&v84 + v19;
    result = a15
           ? model_rd_for_sb_y_large(a1, a7, a2, v17, v23, v24, v25, v26, a4, v15, a13, a14)
           : model_rd_for_sb_y((uint64_t)a1, a7, a2, v17, v23, v24, v25, v26, 0);
    v28 = *((int *)&v92 + v19);
    *((_DWORD *)&v88 + v19) = v28;
    v29 = *(_QWORD *)(a2 + 25368);
    if (v29)
    {
      v30 = *(unsigned __int8 *)(v29 + 7);
      v31 = a4;
      v32 = v72;
      v33 = *(_QWORD *)(a2 + 25376);
      if (v33)
        goto LABEL_10;
    }
    else
    {
      v30 = 3;
      v31 = a4;
      v32 = v72;
      v33 = *(_QWORD *)(a2 + 25376);
      if (v33)
      {
LABEL_10:
        v34 = *(unsigned __int8 *)(v33 + 7);
        goto LABEL_13;
      }
    }
    v34 = 3;
LABEL_13:
    v35 = 3;
    if (v34 == 3)
      v35 = v30;
    if (v30 == 3)
      v35 = v34;
    if (v30 != v34)
      LODWORD(v30) = v35;
    v36 = (int)a1[3 * v30 + 210370 + *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 7)] + v28;
    *((_DWORD *)&v92 + v19) = v36;
    v37 = (v91[v19 - 1] << v32[174]) + ((v32[175] * v36 + 256) >> 9);
    *((_BYTE *)&v82 + v19) = *(_BYTE *)(v18 + 2);
    if (v37 < v20)
      break;
    v40 = v20;
    if (v19)
      goto LABEL_66;
    *(_BYTE *)(v18 + 7) = 1;
    build_inter_predictors_for_planes(v17, a7, v31, a5, 0, 0);
    if (a15)
    {
      result = model_rd_for_sb_y_large(a1, a7, a2, v17, (int *)&v92 + 1, v91, (_DWORD *)&v86 + 1, (unsigned int *)&v84 + 1, v31, a5, a13, a14);
      v41 = SHIDWORD(v92);
      HIDWORD(v88) = HIDWORD(v92);
      v42 = **(_QWORD **)(a2 + 25360);
      v43 = *(_QWORD *)(a2 + 25368);
      if (v43)
        goto LABEL_25;
    }
    else
    {
      result = model_rd_for_sb_y((uint64_t)a1, a7, a2, v17, (int *)&v92 + 1, v91, (_DWORD *)&v86 + 1, (unsigned int *)&v84 + 1, 0);
      v41 = SHIDWORD(v92);
      HIDWORD(v88) = HIDWORD(v92);
      v42 = **(_QWORD **)(a2 + 25360);
      v43 = *(_QWORD *)(a2 + 25368);
      if (v43)
      {
LABEL_25:
        v44 = *(unsigned __int8 *)(v43 + 7);
        v45 = *(_QWORD *)(a2 + 25376);
        if (!v45)
          goto LABEL_29;
        goto LABEL_26;
      }
    }
    v44 = 3;
    v45 = *(_QWORD *)(a2 + 25376);
    if (!v45)
    {
LABEL_29:
      v46 = 3;
      goto LABEL_30;
    }
LABEL_26:
    v46 = *(unsigned __int8 *)(v45 + 7);
LABEL_30:
    v47 = 3;
    if (v46 == 3)
      v47 = v44;
    if (v44 == 3)
      v47 = v46;
    if (v44 != v46)
      LODWORD(v44) = v47;
    v48 = (int)a1[3 * v44 + 210370 + *(unsigned __int8 *)(v42 + 7)] + v41;
    HIDWORD(v92) = v48;
    v20 = (v91[0] << v32[174]) + ((v32[175] * v48 + 256) >> 9);
    HIBYTE(v82) = *(_BYTE *)(v18 + 2);
    if (v20 >= v40)
      goto LABEL_66;
    v38 = *v76;
    HIDWORD(v74) = *a13;
    v19 = 1;
    v75 = *(_QWORD *)a14;
    if (!a8)
      goto LABEL_71;
LABEL_38:
    v15 = a5;
    v49 = *a9;
    if (*a9 != v21)
    {
      if (v49)
        *((_DWORD *)v49 + 3) = 0;
      *a9 = v21;
    }
    if (v19 == 1)
      goto LABEL_72;
    v50 = v69;
    if (!*v69)
    {
      v22 = 0;
LABEL_3:
      *v50 = 1;
      goto LABEL_4;
    }
    v50 = v68;
    if (!*v68)
    {
      v22 = 1;
      goto LABEL_3;
    }
    v50 = v67;
    if (!*v67)
    {
      v22 = 2;
      goto LABEL_3;
    }
    v22 = -1;
LABEL_4:
    LOBYTE(v74) = v38;
    v73 = 0;
    v21 = &a6[4 * v22];
    *(_QWORD *)(a2 + 24928) = *v21;
    *v32 = v70;
    v19 = 1;
  }
  v38 = *v76;
  v39 = *a13;
  v75 = *(_QWORD *)a14;
  HIDWORD(v74) = *a13;
  if (a8)
  {
    v20 = v37;
    goto LABEL_38;
  }
  if (v19)
  {
    LODWORD(v19) = v19;
    v15 = a5;
    v64 = a7;
    v62 = a11;
    v61 = a3;
    v63 = a10;
    goto LABEL_75;
  }
  LOBYTE(v74) = *v76;
  *(_BYTE *)(v18 + 7) = 1;
  build_inter_predictors_for_planes(v17, a7, v31, a5, 0, 0);
  if (a15)
  {
    result = model_rd_for_sb_y_large(a1, a7, a2, v17, (int *)&v92 + 1, v91, (_DWORD *)&v86 + 1, (unsigned int *)&v84 + 1, v31, a5, a13, a14);
    v51 = HIDWORD(v92);
    v52 = **(_QWORD **)(a2 + 25360);
    v53 = *(_QWORD *)(a2 + 25368);
    if (v53)
      goto LABEL_51;
LABEL_55:
    v54 = 3;
    v55 = *(_QWORD *)(a2 + 25376);
    if (!v55)
      goto LABEL_56;
LABEL_52:
    v56 = *(unsigned __int8 *)(v55 + 7);
  }
  else
  {
    result = model_rd_for_sb_y((uint64_t)a1, a7, a2, v17, (int *)&v92 + 1, v91, (_DWORD *)&v86 + 1, (unsigned int *)&v84 + 1, 0);
    v51 = HIDWORD(v92);
    v52 = **(_QWORD **)(a2 + 25360);
    v53 = *(_QWORD *)(a2 + 25368);
    if (!v53)
      goto LABEL_55;
LABEL_51:
    v54 = *(unsigned __int8 *)(v53 + 7);
    v55 = *(_QWORD *)(a2 + 25376);
    if (v55)
      goto LABEL_52;
LABEL_56:
    v56 = 3;
  }
  v57 = 3;
  if (v56 == 3)
    v57 = v54;
  if (v54 == 3)
    v57 = v56;
  if (v54 != v56)
    LODWORD(v54) = v57;
  v58 = (int)a1[3 * v54 + 210370 + *(unsigned __int8 *)(v52 + 7)] + (uint64_t)v51;
  HIDWORD(v92) = v58;
  v59 = (v91[0] << v32[174]) + ((v32[175] * v58 + 256) >> 9);
  v60 = *(_BYTE *)(v18 + 2);
  if (v59 < v37)
  {
    v38 = *v76;
    HIDWORD(v74) = *a13;
    v75 = *(_QWORD *)a14;
    HIDWORD(v88) = v51;
    LODWORD(v19) = 1;
    HIBYTE(v82) = v60;
LABEL_71:
    v15 = a5;
LABEL_72:
    v64 = a7;
    v62 = a11;
    v61 = a3;
    v39 = HIDWORD(v74);
    v63 = a10;
    goto LABEL_75;
  }
  v73 = 0;
  HIDWORD(v88) = v51;
  HIBYTE(v82) = v60;
LABEL_66:
  if (a8)
  {
    v15 = a5;
    v62 = a11;
    v61 = a3;
    v38 = v74;
    v39 = HIDWORD(v74);
    v63 = a10;
    if (v21 && *a9 != v21)
      *((_DWORD *)v21 + 3) = 0;
    v64 = a7;
  }
  else
  {
    v15 = a5;
    v64 = a7;
    v62 = a11;
    v61 = a3;
    v38 = v74;
    v39 = HIDWORD(v74);
    v63 = a10;
  }
  LODWORD(v19) = v73;
LABEL_75:
  *(_BYTE *)(v18 + 7) = v19;
  *(_BYTE *)(v18 + 2) = *((_BYTE *)&v82 + v19);
  v65 = 4 * v19;
  *(_DWORD *)v61 = *(_DWORD *)((char *)&v88 + v65);
  *(_QWORD *)(v61 + 8) = v91[v19 - 1];
  *v63 = *(_DWORD *)((char *)&v86 + v65);
  *v62 = *(_DWORD *)((char *)&v84 + v65);
  *v76 = v38;
  *a13 = v39;
  *(_QWORD *)a14 = v75;
  if (a8)
  {
    *(_QWORD *)(a2 + 24928) = **a9;
    *v32 = *((_DWORD *)*a9 + 2);
  }
  else if (!(_DWORD)v19)
  {
    *(_BYTE *)(v18 + 7) = 0;
    return build_inter_predictors_for_planes(v17, v64, v31, v15, 0, 0);
  }
  return result;
}

uint64_t model_rd_for_sb_y_large(_DWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5, _QWORD *a6, _DWORD *a7, unsigned int *a8, int a9, int a10, _DWORD *a11, _DWORD *a12)
{
  unsigned int v12;
  __int16 *v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int16x8_t *v34;
  int16x8_t *v35;
  int32x4_t v36;
  int v37;
  int32x4_t v38;
  int32x4_t v39;
  int16x8_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int16x8_t *v48;
  int16x8_t *v49;
  int32x4_t v50;
  int v51;
  int32x4_t v52;
  int32x4_t v53;
  int16x8_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int16x8_t *v62;
  int16x8_t *v63;
  int32x4_t v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  int16x8_t v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  uint32x4_t *v79;
  int32x4_t *v80;
  int32x4_t *v81;
  uint64_t v82;
  int32x4_t v83;
  uint32x4_t v84;
  int32x4_t v85;
  uint32x4_t v86;
  unsigned int v87;
  int v88;
  unint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int *v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  _DWORD *v108;
  int v109;
  unsigned int v110;
  unint64_t v111;
  int v112;
  int v113;
  BOOL v114;
  char v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  char v122;
  BOOL v123;
  char v124;
  unsigned int v125;
  char v126;
  char v127;
  int v128;
  int v132;
  char v133;
  __int128 *v134;
  __int128 *v135;
  __int128 *v136;
  __int128 *v137;
  char v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float32x4_t *v152;
  float32x4_t *v153;
  uint32x4_t *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  __int128 *v158;
  uint64_t v159;
  const float *v160;
  const float *v161;
  const float *v162;
  const float *v163;
  uint64_t v164;
  unsigned int *v165;
  uint64_t v166;
  char *v167;
  _DWORD *v168;
  char *v169;
  _DWORD *v170;
  uint64_t v171;
  char *v172;
  int v173;
  char *v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  int v179;
  unint64_t v180;
  char v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float32x4_t *v195;
  uint32x4_t *v196;
  uint64_t v197;
  uint64_t v198;
  _OWORD *v199;
  _OWORD *v200;
  uint64_t v201;
  const float *v202;
  const float *v203;
  const float *v204;
  const float *v205;
  uint64_t v206;
  unsigned int *v207;
  uint64_t v208;
  char *v209;
  _DWORD *v210;
  char *v211;
  int v212;
  uint64_t v213;
  char *v214;
  char *v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  int v220;
  uint64_t result;
  unint64_t v222;
  uint64_t v223;
  _BOOL4 v224;
  unint64_t v225;
  unint64_t v226;
  BOOL v227;
  int v228;
  unint64_t v229;
  char v230;
  int v231;
  unint64_t v232;
  unsigned int v233;
  unint64_t v234;
  unint64_t v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  unsigned int v242;
  unint64_t v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char v255;
  __int16 *v256;
  int v257;
  char v258;
  unsigned int v259;
  _BOOL4 v260;
  int v261;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  __int16 *v267;
  int v268;
  char v269;
  unsigned int v270;
  unsigned int v273;
  int v274;
  int *v277;
  _DWORD *v278;
  int *v279;
  char v280;
  __int128 *v281;
  int v282;
  unsigned int v285;
  uint64_t v287;
  unsigned int v289;
  uint64_t v290;
  char v293;
  uint64_t v294;
  int v295;
  unint64_t v296;
  int v297;
  uint64_t v298;
  __int128 *v299;
  _BYTE *v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD v305[2];
  _QWORD v306[2];
  _OWORD v307[4];
  _OWORD v308[4];
  _OWORD v309[4];
  __int128 v310;
  _OWORD v311[15];
  __int128 v312;
  _OWORD v313[15];
  __int128 v314;
  _OWORD v315[15];
  uint64_t v316;
  float32x4x2_t v317;
  float32x4x2_t v318;
  float32x4x2_t v319;
  float32x4x2_t v320;
  float32x4x2_t v321;
  float32x4x2_t v322;

  v12 = 0;
  v316 = *MEMORY[0x24BDAC8D0];
  v13 = *(__int16 **)(a4 + 120);
  v285 = *v13;
  v14 = b_width_log2_lookup[a2];
  v287 = a2;
  v15 = b_height_log2_lookup[a2];
  v277 = (int *)(a3 + 25688);
  v279 = a1 + 47512;
  v278 = a1 + 42997;
  v273 = v13[1];
  v289 = (v273 * v273) >> 6;
  v280 = v15 + v14;
  memset(v315, 0, sizeof(v315));
  v314 = 0u;
  memset(v313, 0, sizeof(v313));
  v312 = 0u;
  memset(v311, 0, sizeof(v311));
  v274 = v14;
  v16 = (4 << v14);
  v310 = 0u;
  v282 = v15;
  if ((int)v16 < 1)
  {
    v18 = 0;
  }
  else
  {
    v17 = (4 << v15);
    v18 = 0;
    if ((int)v17 >= 1)
    {
      v19 = *(_QWORD *)(a3 + 8216);
      v20 = *(int *)(a3 + 8224);
      v21 = *(_QWORD *)(a4 + 16);
      v22 = *(int *)(a4 + 24);
      v303 = *(int *)(a4 + 24);
      v12 = 0;
      v18 = 0;
      if (a1[43005])
      {
        v23 = 0;
        LODWORD(v24) = 0;
        v25 = a1[47464];
        v26 = ((v16 - 1) >> 3) + 1;
        v27 = v26 & 0x3FFFFFFFFFFFFFF8;
        v28 = 2 * v22;
        v29 = 2 * v20;
        while (1)
        {
          v30 = v19 + v23 * v20;
          v31 = (int)v24;
          v32 = v21 + v23 * v22;
          switch(v25)
          {
            case 8:
              v61 = 0;
              v24 = (int)v24;
              do
              {
                v62 = (int16x8_t *)(2 * (v30 + v61));
                v63 = (int16x8_t *)(2 * (v32 + v61));
                v64 = 0uLL;
                v65 = -8;
                v66 = 0uLL;
                v67 = 0uLL;
                do
                {
                  v68 = vsubq_s16(*v62, *v63);
                  v67 = vpadalq_s16(v67, v68);
                  v64 = vmlal_s16(v64, *(int16x4_t *)v68.i8, *(int16x4_t *)v68.i8);
                  v66 = vmlal_high_s16(v66, v68, v68);
                  v63 = (int16x8_t *)((char *)v63 + v28);
                  v62 = (int16x8_t *)((char *)v62 + v29);
                  v123 = __CFADD__(v65++, 1);
                }
                while (!v123);
                v69 = 4 * v24;
                v70 = vaddvq_s32(v67);
                *(_DWORD *)((char *)&v313[-1] + v69) = v70;
                v71 = vaddlvq_u32((uint32x4_t)vaddq_s32(v66, v64));
                *(_DWORD *)((char *)&v315[-1] + v69) = v71;
                v12 += v71;
                v18 += v70;
                v72 = (unint64_t)(v70 * (uint64_t)v70) >> 6;
                v73 = v72 - v71;
                v123 = v71 >= v72;
                v74 = v71 - v72;
                if (v74 == 0 || !v123)
                  v74 = v73;
                *((_DWORD *)&v311[-1] + v24++) = v74;
                v61 += 8;
              }
              while (v61 < (int)v16);
              break;
            case 10:
              v47 = 0;
              v24 = (int)v24;
              do
              {
                v48 = (int16x8_t *)(2 * (v30 + v47));
                v49 = (int16x8_t *)(2 * (v32 + v47));
                v50 = 0uLL;
                v51 = -8;
                v52 = 0uLL;
                v53 = 0uLL;
                do
                {
                  v54 = vsubq_s16(*v48, *v49);
                  v53 = vpadalq_s16(v53, v54);
                  v50 = vmlal_s16(v50, *(int16x4_t *)v54.i8, *(int16x4_t *)v54.i8);
                  v52 = vmlal_high_s16(v52, v54, v54);
                  v49 = (int16x8_t *)((char *)v49 + v28);
                  v48 = (int16x8_t *)((char *)v48 + v29);
                  v123 = __CFADD__(v51++, 1);
                }
                while (!v123);
                v55 = 4 * v24;
                v56 = (vaddlvq_u32((uint32x4_t)vaddq_s32(v52, v50)) + 8) >> 4;
                *(_DWORD *)((char *)&v315[-1] + v55) = v56;
                v57 = vaddvq_s32(v53) + 2;
                *(_DWORD *)((char *)&v313[-1] + v55) = (unint64_t)v57 >> 2;
                v12 += v56;
                v18 += (unint64_t)v57 >> 2;
                v58 = (unint64_t)((int)(v57 >> 2) * (uint64_t)(int)(v57 >> 2)) >> 6;
                v59 = v58 - v56;
                v123 = v56 >= v58;
                v60 = v56 - v58;
                if (v60 == 0 || !v123)
                  v60 = v59;
                *((_DWORD *)&v311[-1] + v24++) = v60;
                v47 += 8;
              }
              while (v47 < (int)v16);
              break;
            case 12:
              v33 = 0;
              v24 = (int)v24;
              do
              {
                v34 = (int16x8_t *)(2 * (v30 + v33));
                v35 = (int16x8_t *)(2 * (v32 + v33));
                v36 = 0uLL;
                v37 = -8;
                v38 = 0uLL;
                v39 = 0uLL;
                do
                {
                  v40 = vsubq_s16(*v34, *v35);
                  v39 = vpadalq_s16(v39, v40);
                  v36 = vmlal_s16(v36, *(int16x4_t *)v40.i8, *(int16x4_t *)v40.i8);
                  v38 = vmlal_high_s16(v38, v40, v40);
                  v35 = (int16x8_t *)((char *)v35 + v28);
                  v34 = (int16x8_t *)((char *)v34 + v29);
                  v123 = __CFADD__(v37++, 1);
                }
                while (!v123);
                v41 = 4 * v24;
                v42 = (vaddlvq_u32((uint32x4_t)vaddq_s32(v38, v36)) + 128) >> 8;
                *(_DWORD *)((char *)&v315[-1] + v41) = v42;
                v43 = vaddvq_s32(v39) + 8;
                *(_DWORD *)((char *)&v313[-1] + v41) = (unint64_t)v43 >> 4;
                v12 += v42;
                v18 += (unint64_t)v43 >> 4;
                v44 = (unint64_t)((int)(v43 >> 4) * (uint64_t)(int)(v43 >> 4)) >> 6;
                v45 = v44 - v42;
                v123 = v42 >= v44;
                v46 = v42 - v44;
                if (v46 == 0 || !v123)
                  v46 = v45;
                *((_DWORD *)&v311[-1] + v24++) = v46;
                v33 += 8;
              }
              while (v33 < (int)v16);
              break;
            default:
              if (v16 < 0x39)
              {
                v75 = 0;
                v24 = (int)v24;
                do
                {
LABEL_38:
                  v87 = *((_DWORD *)&v315[-1] + v24);
                  v88 = *((_DWORD *)&v313[-1] + v24);
                  v12 += v87;
                  v18 += v88;
                  v89 = (unint64_t)(v88 * (uint64_t)v88) >> 6;
                  v90 = v89 - v87;
                  v123 = v87 >= v89;
                  v91 = v87 - v89;
                  if (v91 == 0 || !v123)
                    v91 = v90;
                  *((_DWORD *)&v311[-1] + v24++) = v91;
                  v75 += 8;
                }
                while (v75 < v16);
                break;
              }
              v24 = (int)v24 + v27;
              v76 = 0uLL;
              v77 = (int32x4_t)v12;
              v78 = (int32x4_t)v18;
              v79 = (uint32x4_t *)((char *)v311 + 4 * v31);
              v80 = (int32x4_t *)((char *)v315 + 4 * v31);
              v81 = (int32x4_t *)((char *)v313 + 4 * v31);
              v82 = v26 & 0x3FFFFFFFFFFFFFF8;
              v83 = 0uLL;
              do
              {
                v84 = (uint32x4_t)v80[-1];
                v77 = vaddq_s32((int32x4_t)v84, v77);
                v76 = vaddq_s32(*v80, v76);
                v85 = v81[-1];
                v78 = vaddq_s32(v85, v78);
                v83 = vaddq_s32(*v81, v83);
                v86 = vabdq_u32(*(uint32x4_t *)v80, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v81->i8, *(int32x2_t *)v81->i8), 6uLL), vmull_high_s32(*v81, *v81), 6uLL));
                v79[-1] = vabdq_u32(v84, (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v85.i8), 6uLL), vmull_high_s32(v85, v85), 6uLL));
                *v79 = v86;
                v79 += 2;
                v80 += 2;
                v81 += 2;
                v82 -= 8;
              }
              while (v82);
              v18 = vaddvq_s32(vaddq_s32(v83, v78));
              v12 = vaddvq_s32(vaddq_s32(v76, v77));
              v75 = 8 * (v26 & 0x3FFFFFFFFFFFFFF8);
              if (v26 != v27)
                goto LABEL_38;
              break;
          }
          v23 += 8;
          v22 = v303;
          if (v23 >= v17)
            goto LABEL_49;
        }
      }
      v92 = 0;
      LODWORD(v93) = 0;
      v294 = *(_QWORD *)(a3 + 8216);
      v296 = (4 << v15);
      do
      {
        v94 = 0;
        v93 = (int)v93;
        v298 = v92;
        v301 = v19 + v92 * v20;
        do
        {
          v95 = (_DWORD *)&v315[-1] + v93;
          v96 = (int *)&v313[-1] + v93;
          v97 = v12;
          v98 = v20;
          vpx_get8x8var(v301 + v94);
          v20 = v98;
          v12 = *v95 + v97;
          v18 += *v96;
          v99 = (unint64_t)(*v96 * (uint64_t)*v96) >> 6;
          v100 = *v95 - v99;
          if (*v95 <= v99)
            v100 = v99 - *v95;
          *((_DWORD *)&v311[-1] + v93++) = v100;
          v94 += 8;
        }
        while ((int)v16 > (int)v94);
        v92 = v298 + 8;
        v19 = v294;
      }
      while (v298 + 8 < v296);
    }
  }
LABEL_49:
  v101 = v285 * v285;
  v102 = (v18 * v18) >> (v280 + 4);
  v103 = v102 - v12;
  v123 = v12 >= v102;
  v104 = v12 - v102;
  if (v104 != 0 && v123)
    v105 = v104;
  else
    v105 = v103;
  *a7 = v105;
  *a8 = v12;
  if (*v279 < 1 || a1[186877] && a1[186878] < a1[208722] || v279[2] < 6)
  {
    v108 = v278;
    if (v18 >= 0)
      v119 = v18;
    else
      v119 = -v18;
    v120 = v119 >> v280;
    if ((int)v278[1] < 481 && *v278 < 641)
      v122 = 2;
    else
      v122 = 1;
    v123 = v279[2] <= 7 || v120 >= 5;
    if (v123)
      v124 = 0;
    else
      v124 = v122;
    v107 = v289 << v124;
    v111 = v101 >> 6;
    v112 = *v277;
    v113 = v279[25];
    if (v113 == 3)
      goto LABEL_67;
  }
  else
  {
    if (v18 >= 0)
      v106 = v18;
    else
      v106 = -v18;
    v107 = (v273 * v273) >> 6;
    v108 = v278;
    if (v106 >> v280 <= 4)
    {
      v109 = a1[210519];
      if (v109)
      {
        v110 = 6;
        if (a1[186879] == 2)
          v110 = 10;
        if (v109 == 1)
          v110 = 2;
        v107 = v110 * (unint64_t)v289;
      }
    }
    v111 = v101 >> 6;
    v112 = *v277;
    v113 = v279[25];
    if (v113 == 3)
    {
LABEL_67:
      if ((_DWORD)v105)
        v114 = v112 == 0;
      else
        v114 = 1;
      v115 = !v114;
      v116 = v108[259];
      if ((_DWORD)v116 != 4)
        goto LABEL_74;
      goto LABEL_95;
    }
  }
  v115 = 1;
  v116 = v108[259];
  if ((_DWORD)v116 != 4)
  {
LABEL_74:
    if (max_txsize_lookup[v287] >= tx_mode_to_biggest_tx_size[v116])
      v117 = tx_mode_to_biggest_tx_size[v116];
    else
      v117 = max_txsize_lookup[v287];
    v118 = v279[83];
    goto LABEL_122;
  }
LABEL_95:
  if (v12 <= 4 * (int)v105)
  {
    v125 = 1;
    v114 = v113 == 3;
    v127 = v115 ^ 1;
    if (!v114)
      v127 = 1;
    if ((v127 & 1) != 0)
      goto LABEL_106;
  }
  else
  {
    v125 = max_txsize_lookup[v287];
    if (v125 >= 3)
      v125 = 3;
    v114 = v113 == 3;
    v126 = v115 ^ 1;
    if (!v114)
      v126 = 1;
    if ((v126 & 1) != 0)
      goto LABEL_106;
  }
  if ((*(char *)(**(_QWORD **)(a4 + 448) + 4) - 3) > 0xFFFFFFFD)
  {
    v128 = 1;
    goto LABEL_110;
  }
LABEL_106:
  if ((v115 & (v125 == 3)) != 0)
    v128 = 2;
  else
    v128 = v125;
LABEL_110:
  v118 = v279[83];
  if (v118 == 1 && v128 == 1 && a2 < 7 && v105 >> 5 > v107)
    v117 = 0;
  else
    v117 = v128;
LABEL_122:
  if (v117 <= 1)
    v132 = 1;
  else
    v132 = v117;
  *(_BYTE *)(**(_QWORD **)(a4 + 448) + 2) = v132;
  if (v118 == 1 && *(_DWORD *)(a3 + 82376))
    v111 <<= v112 == 0;
  v302 = v111;
  v304 = v105;
  v290 = v107;
  v300 = (_BYTE *)(a3 + 82228);
  v295 = 1 << (v280 - 2);
  memset(v309, 0, sizeof(v309));
  memset(v308, 0, sizeof(v308));
  memset(&v307[2], 0, 32);
  v297 = v132;
  if (v132 == 2)
    v133 = 2;
  else
    v133 = 4;
  v134 = (__int128 *)v306;
  if (v132 == 2)
    v134 = v309;
  memset(v307, 0, 32);
  v135 = (__int128 *)v305;
  if (v132 == 2)
    v135 = v307;
  v306[0] = 0;
  v306[1] = 0;
  v305[0] = 0;
  v305[1] = 0;
  if (v117 < 2)
    v133 = 0;
  v293 = v133;
  v136 = &v314;
  if (v117 >= 2)
    v136 = v134;
  v281 = v136;
  v137 = &v310;
  if (v117 >= 2)
    v137 = v135;
  v299 = v137;
  if (v117 >= 2 && v282 != 32)
  {
    v138 = v274 - 1;
    if (v274 != 32)
    {
      v139 = 0;
      v140 = 0;
      if (1 << v138 <= 2)
        v141 = 2;
      else
        v141 = 1 << v138;
      v142 = (v141 - 1) >> 1;
      v143 = v142 + 1;
      v144 = v143 & 0xFFFFFFFC;
      v145 = ~v142;
      v146 = ~v142;
      while (1)
      {
        v147 = v139;
        v148 = v140 << v138;
        v149 = (v140 | 1) << v138;
        if (v141 < 7)
          break;
        v151 = 4 * v139;
        v152 = (float32x4_t *)((char *)v309 + v151);
        v153 = (float32x4_t *)((char *)v308 + v151);
        v154 = (uint32x4_t *)((char *)v307 + v151);
        v147 = v144 + v139;
        v155 = 4 * v148;
        v156 = 4 * v149;
        v157 = &v312;
        v158 = &v314;
        v159 = v143 & 0xFFFFFFFC;
        do
        {
          v160 = (const float *)((char *)v158 + v155);
          v317 = vld2q_f32(v160);
          v161 = (const float *)((char *)v158 + v156);
          v319 = vld2q_f32(v161);
          v317.val[0] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v317.val[1], (int32x4_t)v317.val[0]), vaddq_s32((int32x4_t)v319.val[0], (int32x4_t)v319.val[1]));
          *v152++ = v317.val[0];
          v162 = (const float *)((char *)v157 + v155);
          *(float32x4x2_t *)((char *)&v317 + 16) = vld2q_f32(v162);
          v317.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v319.val[0], (int32x4_t)v317.val[1]);
          v163 = (const float *)((char *)v157 + v156);
          v320 = vld2q_f32(v163);
          v317.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v317.val[1], vaddq_s32((int32x4_t)v320.val[0], (int32x4_t)v320.val[1]));
          *v153++ = v317.val[1];
          *v154++ = vabdq_u32((uint32x4_t)v317.val[0], (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v317.val[1].f32, *(int32x2_t *)v317.val[1].f32), 8uLL), vmull_high_s32((int32x4_t)v317.val[1], (int32x4_t)v317.val[1]), 8uLL));
          v157 += 2;
          v158 += 2;
          v159 -= 4;
        }
        while (v159);
        v150 = 2 * (v143 & 0xFFFFFFFC);
        if (v144 != v143)
          goto LABEL_154;
LABEL_148:
        v139 += v143;
        v140 += 2;
        v146 += v145;
        if (v140 >= 1 << (v282 - 1))
          goto LABEL_160;
      }
      v150 = 0;
LABEL_154:
      v164 = 0;
      v165 = (unsigned int *)v309 + v147;
      v166 = 4 * (v150 + v149);
      v167 = (char *)&v312 + v166 + 4;
      v168 = (_DWORD *)v308 + v147;
      v169 = (char *)&v315[-1] + v166;
      v170 = (_DWORD *)v307 + v147;
      v171 = 4 * (v150 + v148);
      v172 = (char *)&v312 + v171 + 4;
      v173 = v146 + v147;
      v174 = (char *)&v315[-1] + v171;
      do
      {
        v175 = *(_DWORD *)&v174[v164 + 4] + *(_DWORD *)&v174[v164] + *(_DWORD *)&v169[v164] + *(_DWORD *)&v169[v164 + 4];
        *v165++ = v175;
        v176 = *(int *)&v172[v164]
             + (uint64_t)*(int *)&v172[v164 - 4]
             + *(int *)&v167[v164 - 4]
             + (uint64_t)*(int *)&v167[v164];
        *v168++ = v176;
        v177 = (unint64_t)(v176 * v176) >> 8;
        v178 = v177 - v175;
        v123 = v175 >= v177;
        v179 = v175 - v177;
        if (v179 == 0 || !v123)
          v179 = v178;
        *v170++ = v179;
        v164 += 8;
        v123 = __CFADD__(v173++, 1);
      }
      while (!v123);
      goto LABEL_148;
    }
  }
LABEL_160:
  v180 = (v295 >> v293);
  if (v297 == 3 && v282 != 33)
  {
    v181 = v274 - 2;
    if (v274 != 33)
    {
      v182 = 0;
      v183 = 0;
      if (1 << v181 <= 2)
        v184 = 2;
      else
        v184 = 1 << v181;
      v185 = (v184 - 1) >> 1;
      v186 = v185 + 1;
      v187 = v186 & 0xFFFFFFFC;
      v188 = ~v185;
      v189 = ~v185;
      while (1)
      {
        v190 = v182;
        v191 = v183 << v181;
        v192 = (v183 | 1) << v181;
        if (v184 < 7)
          break;
        v194 = 4 * v182;
        v195 = (float32x4_t *)((char *)v306 + v194);
        v196 = (uint32x4_t *)((char *)v305 + v194);
        v190 = v187 + v182;
        v197 = 4 * v191;
        v198 = 4 * v192;
        v199 = v308;
        v200 = v309;
        v201 = v186 & 0xFFFFFFFC;
        do
        {
          v202 = (const float *)((char *)v200 + v197);
          v318 = vld2q_f32(v202);
          v203 = (const float *)((char *)v200 + v198);
          v321 = vld2q_f32(v203);
          v318.val[0] = (float32x4_t)vaddq_s32(vaddq_s32((int32x4_t)v318.val[1], (int32x4_t)v318.val[0]), vaddq_s32((int32x4_t)v321.val[0], (int32x4_t)v321.val[1]));
          *v195++ = v318.val[0];
          v204 = (const float *)((char *)v199 + v197);
          *(float32x4x2_t *)((char *)&v318 + 16) = vld2q_f32(v204);
          v318.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v321.val[0], (int32x4_t)v318.val[1]);
          v205 = (const float *)((char *)v199 + v198);
          v322 = vld2q_f32(v205);
          v318.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v318.val[1], vaddq_s32((int32x4_t)v322.val[0], (int32x4_t)v322.val[1]));
          *v196++ = vabdq_u32((uint32x4_t)v318.val[0], (uint32x4_t)vshrn_high_n_s64(vshrn_n_s64(vmull_s32(*(int32x2_t *)v318.val[1].f32, *(int32x2_t *)v318.val[1].f32), 0xAuLL), vmull_high_s32((int32x4_t)v318.val[1], (int32x4_t)v318.val[1]), 0xAuLL));
          v199 += 2;
          v200 += 2;
          v201 -= 4;
        }
        while (v201);
        v193 = 2 * (v186 & 0xFFFFFFFC);
        if (v187 != v186)
          goto LABEL_173;
LABEL_167:
        v182 += v186;
        v183 += 2;
        v189 += v188;
        if (v183 >= 1 << (v282 - 2))
          goto LABEL_179;
      }
      v193 = 0;
LABEL_173:
      v206 = 0;
      v207 = (unsigned int *)v306 + v190;
      v208 = 4 * (v193 + v192);
      v209 = (char *)v308 + v208 + 4;
      v210 = (_DWORD *)v305 + v190;
      v211 = (char *)v309 + v208;
      v212 = v189 + v190;
      v213 = 4 * (v193 + v191);
      v214 = (char *)v308 + v213 + 4;
      v215 = (char *)v309 + v213;
      do
      {
        v216 = *(_DWORD *)&v215[v206 + 4] + *(_DWORD *)&v215[v206] + *(_DWORD *)&v211[v206] + *(_DWORD *)&v211[v206 + 4];
        *v207++ = v216;
        v217 = *(int *)&v214[v206]
             + (uint64_t)*(int *)&v214[v206 - 4]
             + *(int *)&v209[v206 - 4]
             + (uint64_t)*(int *)&v209[v206];
        v218 = (unint64_t)(v217 * v217) >> 10;
        v219 = v218 - v216;
        v123 = v216 >= v218;
        v220 = v216 - v218;
        if (v220 == 0 || !v123)
          v220 = v219;
        *v210++ = v220;
        v206 += 8;
        v123 = __CFADD__(v212++, 1);
      }
      while (!v123);
      goto LABEL_167;
    }
  }
LABEL_179:
  *v300 = 0;
  result = v304;
  if ((int)v180 < 1)
    goto LABEL_214;
  if (!(_DWORD)v304)
  {
    if (!v12)
      goto LABEL_214;
    if (v302 <= (*(_DWORD *)v281 - *(_DWORD *)v299))
      goto LABEL_206;
    LOBYTE(v224) = 0;
    goto LABEL_191;
  }
  if (v290 <= *(unsigned int *)v299)
  {
    v224 = 1;
    if (v12 == (_DWORD)v304)
      goto LABEL_199;
LABEL_190:
    if (v302 <= (*(_DWORD *)v281 - *(_DWORD *)v299))
    {
      if (v224)
      {
LABEL_207:
        v230 = num_pels_log2_lookup[v287];
        v233 = v285 >> (*(_DWORD *)(a4 + 624) - 5);
        v234 = v12 - v304;
        v235 = (((v233 * (unint64_t)v233) << (v230 + 10)) + (v234 >> 1)) / v234;
        if (v235 >= 0x3BFDF)
          LODWORD(v235) = 245727;
        v236 = (v235 >> 2) + 8;
        v237 = __clz(v236);
        v238 = (v236 >> (28 - v237)) & 7 | (8 * (28 - v237));
        v239 = 4 * v238;
        v240 = ((int)v235 - *(_DWORD *)((char *)&xsq_iq_q10 + v239)) << 10 >> (30 - v237);
        v241 = 4 * (v238 + 1);
        v229 = ((uint64_t)(((uint64_t)(v240 * *(_DWORD *)((char *)&dist_tab_q10 + v241)
                                   + (1024 - v240) * *(_DWORD *)((char *)&dist_tab_q10 + v239)) >> 10)
                        * v234
                        + 512) >> 7) & 0xFFFFFFFFFFFFFFF8;
        v228 = (((v240 * *(_DWORD *)((char *)&rate_tab_q10 + v241)
                + (1024 - v240) * *(_DWORD *)((char *)&rate_tab_q10 + v239)) >> 10 << v230)
              + 1) >> 2;
        *a5 = v228;
        if (!(_DWORD)v304)
          goto LABEL_201;
        goto LABEL_210;
      }
LABEL_206:
      *v300 = 2;
      goto LABEL_207;
    }
LABEL_191:
    v225 = 0;
    while (v180 - 1 != v225)
    {
      v226 = (*((_DWORD *)v281 + v225 + 1) - *((_DWORD *)v299 + v225 + 1));
      ++v225;
      if (v302 <= v226)
      {
        v227 = v225 >= v180;
        if (v224)
          goto LABEL_195;
        goto LABEL_205;
      }
    }
    v227 = 1;
    if (v224)
    {
LABEL_195:
      if (v227)
        goto LABEL_200;
      goto LABEL_207;
    }
LABEL_205:
    if (v227)
      goto LABEL_214;
    goto LABEL_206;
  }
  v222 = 0;
  while (v180 - 1 != v222)
  {
    v223 = *((unsigned int *)v299 + ++v222);
    if (v290 <= v223)
      goto LABEL_198;
  }
  v222 = (v295 >> v293);
LABEL_198:
  v224 = v222 < v180;
  if (v12 != (_DWORD)v304)
    goto LABEL_190;
LABEL_199:
  if (v224)
  {
LABEL_200:
    v228 = 0;
    *a5 = 0;
    v229 = 16 * (v12 - v304);
    v230 = num_pels_log2_lookup[v287];
    if (!(_DWORD)v304)
    {
LABEL_201:
      v231 = 0;
      v232 = 0;
LABEL_213:
      *a5 = v228 + v231;
      *a6 = v232 + v229;
      return result;
    }
LABEL_210:
    v242 = v273 >> (*(_DWORD *)(a4 + 624) - 5);
    v243 = (((v242 * (unint64_t)v242) << (v230 + 10)) + (v304 >> 1)) / v304;
    if (v243 >= 0x3BFDF)
      LODWORD(v243) = 245727;
    v244 = (v243 >> 2) + 8;
    v245 = __clz(v244);
    v246 = (v244 >> (28 - v245)) & 7 | (8 * (28 - v245));
    v247 = 4 * v246;
    v248 = ((int)v243 - *(_DWORD *)((char *)&xsq_iq_q10 + v247)) << 10 >> (30 - v245);
    v249 = 4 * (v246 + 1);
    v250 = (v248 * *(_DWORD *)((char *)&rate_tab_q10 + v249) + (1024 - v248) * *(_DWORD *)((char *)&rate_tab_q10 + v247)) >> 10;
    LODWORD(v249) = v248 * *(_DWORD *)((char *)&dist_tab_q10 + v249)
                  + (1024 - v248) * *(_DWORD *)((char *)&dist_tab_q10 + v247);
    v231 = ((v250 << v230) + 1) >> 1;
    v232 = ((uint64_t)(((uint64_t)(int)v249 >> 10) * v304 + 512) >> 6) & 0xFFFFFFFFFFFFFFF0;
    goto LABEL_213;
  }
LABEL_214:
  *v300 = 1;
  *a5 = 0;
  *a6 = 16 * v12;
  v251 = *(int *)(a4 + 148);
  v252 = 2 * *(int *)(a4 + 144);
  v253 = txsize_to_bsize[uv_txsize_lookup[16 * ***(unsigned __int8 ***)(a4 + 448)
                                        + 4 * *(unsigned __int8 *)(**(_QWORD **)(a4 + 448) + 2)
                                        + v252
                                        + v251]];
  v254 = ss_size_lookup[4 * v287 + v252 + v251];
  LOBYTE(v251) = b_width_log2_lookup[v253];
  v255 = b_height_log2_lookup[v253];
  v256 = *(__int16 **)(a4 + 256);
  v257 = *v256;
  v258 = v255 - (b_width_log2_lookup[v254] + b_height_log2_lookup[v254]) + v251 + 6;
  v259 = (v256[1] * v256[1]) >> v258;
  build_inter_predictors_for_planes(a4, a2, a9, a10, 1, 1);
  *a12 = 1;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _OWORD *))&a1[16 * v254 + 185122])(*(_QWORD *)(a3 + 16520), *(unsigned int *)(a3 + 16528), *(_QWORD *)(a4 + 152), *(unsigned int *)(a4 + 160), v309);
  v260 = 0;
  v261 = 0;
  if (result < v259 || (_DWORD)result == 0)
  {
    if (LODWORD(v309[0]) != (_DWORD)result && LODWORD(v309[0]) - (int)result >= (v257 * v257) >> v258)
      return result;
    v263 = *(int *)(a4 + 284);
    v264 = 2 * *(int *)(a4 + 280);
    v265 = txsize_to_bsize[uv_txsize_lookup[16 * ***(unsigned __int8 ***)(a4 + 448)
                                          + 4 * *(unsigned __int8 *)(**(_QWORD **)(a4 + 448) + 2)
                                          + v264
                                          + v263]];
    v266 = ss_size_lookup[4 * v287 + v264 + v263];
    v267 = *(__int16 **)(a4 + 392);
    v268 = *v267;
    v269 = b_height_log2_lookup[v265]
         - (b_width_log2_lookup[v266]
          + b_height_log2_lookup[v266])
         + b_width_log2_lookup[v265]
         + 6;
    v270 = (v267[1] * v267[1]) >> v269;
    build_inter_predictors_for_planes(a4, a2, a9, a10, 2, 2);
    v261 = 1;
    a12[1] = 1;
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, char *))&a1[16 * v266 + 185122])(*(_QWORD *)(a3 + 24824), *(unsigned int *)(a3 + 24832), *(_QWORD *)(a4 + 288), *(unsigned int *)(a4 + 296), (char *)v309 + 4);
    if (result >= v270 && (_DWORD)result != 0)
      return result;
    v260 = DWORD1(v309[0]) == (_DWORD)result || DWORD1(v309[0]) - (int)result < (v268 * v268) >> v269;
  }
  if ((v261 & v260) != 0)
    *a11 = 1;
  return result;
}

uint64_t model_rd_for_sb_y(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, int *a5, unint64_t *a6, _DWORD *a7, unsigned int *a8, int a9)
{
  char *v13;
  int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t *v29;
  int *v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  char v34;
  int v35;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  int v44;
  unint64_t v45;
  char v46;
  BOOL v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v72;
  unsigned int v75;

  v13 = (char *)(a3 + 82228);
  v14 = (int *)(a1 + 190148);
  v15 = (unsigned int *)(a1 + 173024);
  v75 = 0;
  v16 = *(_QWORD *)(a3 + 8280);
  v17 = *(uint64_t *)(a3 + 8288) >> 6;
  v18 = *(__int16 **)(a4 + 120);
  v70 = *v18;
  v72 = v18[1];
  v19 = a2;
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(a1
                                                                                     + ((unint64_t)a2 << 6)
                                                                                     + 740488))(*(_QWORD *)(a3 + 8216), *(unsigned int *)(a3 + 8224), *(_QWORD *)(a4 + 16), *(unsigned int *)(a4 + 24), &v75);
  *a7 = result;
  v21 = v75;
  *a8 = v75;
  v22 = *v14;
  if (*v14 == 3)
  {
    if (a9)
      v23 = v17;
    else
      v23 = 1;
    v24 = v23 > result || *(_DWORD *)(a3 + 25688) == 0;
    v25 = !v24;
    v26 = v17;
    v27 = *v15;
    if ((_DWORD)v27 != 4)
      goto LABEL_12;
LABEL_16:
    if (v21 <= 4 * (int)result)
    {
      v31 = 1;
      v30 = a5;
      v29 = a6;
      v32 = a2;
      v24 = v22 == 3;
      v34 = v25 ^ 1;
      if (!v24)
        v34 = 1;
      if ((v34 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v31 = max_txsize_lookup[v19];
      if (v31 >= 3)
        v31 = 3;
      v30 = a5;
      v29 = a6;
      v32 = a2;
      v24 = v22 == 3;
      v33 = v25 ^ 1;
      if (!v24)
        v33 = 1;
      if ((v33 & 1) != 0)
        goto LABEL_27;
    }
    if ((*(char *)(**(_QWORD **)(a4 + 448) + 4) - 3) > 0xFFFFFFFD)
    {
      v35 = 1;
      goto LABEL_31;
    }
LABEL_27:
    if ((v25 & (v31 == 3)) != 0)
      v35 = 2;
    else
      v35 = v31;
LABEL_31:
    if (v14[58] == 1 && v35 == 1 && v32 < 7 && result >> 5 > v26)
      v28 = 0;
    else
      v28 = v35;
    goto LABEL_43;
  }
  v25 = 1;
  v26 = v17;
  v27 = *v15;
  if ((_DWORD)v27 == 4)
    goto LABEL_16;
LABEL_12:
  v28 = tx_mode_to_biggest_tx_size[v27];
  if (max_txsize_lookup[v19] < v28)
    v28 = max_txsize_lookup[v19];
  v30 = a5;
  v29 = a6;
LABEL_43:
  v39 = v16 >> 6;
  *(_BYTE *)(**(_QWORD **)(a4 + 448) + 2) = v28;
  v40 = b_width_log2_lookup[v19]
      - b_width_log2_lookup[txsize_to_bsize[v28]]
      - b_height_log2_lookup[txsize_to_bsize[v28]]
      + b_height_log2_lookup[v19];
  v41 = v21 >> v40;
  v42 = result >> v40;
  *v13 = 0;
  if ((_DWORD)result && v26 <= v42)
  {
    if (v39 > v41 - v42 || v75 == (_DWORD)result)
    {
      v44 = 0;
      *v30 = 0;
      v45 = 16 * (v21 - result);
      v46 = num_pels_log2_lookup[v19];
LABEL_62:
      v51 = v72 >> (*(_DWORD *)(a4 + 624) - 5);
      v52 = (((v51 * (unint64_t)v51) << (v46 + 10)) + (result >> 1)) / result;
      if (v52 >= 0x3BFDF)
        LODWORD(v52) = 245727;
      v53 = (v52 >> 2) + 8;
      v54 = __clz(v53);
      v55 = (v53 >> (28 - v54)) & 7 | (8 * (28 - v54));
      v56 = 4 * v55;
      v57 = ((int)v52 - *(_DWORD *)((char *)&xsq_iq_q10 + v56)) << 10 >> (30 - v54);
      v58 = 4 * (v55 + 1);
      v59 = (((v57 * *(_DWORD *)((char *)&rate_tab_q10 + v58) + (1024 - v57) * *(_DWORD *)((char *)&rate_tab_q10 + v56)) >> 10 << v46)
           + 1) >> 1;
      v60 = ((((uint64_t)(v57 * *(_DWORD *)((char *)&dist_tab_q10 + v58)
                       + (1024 - v57) * *(_DWORD *)((char *)&dist_tab_q10 + v56)) >> 10)
            * result
            + 512) >> 6) & 0xFFFFFFFFFFFFFFF0;
      goto LABEL_69;
    }
LABEL_60:
    v46 = num_pels_log2_lookup[v19];
    v50 = v21 - result;
    if ((_DWORD)v50)
    {
      v61 = v70 >> (*(_DWORD *)(a4 + 624) - 5);
      v62 = (((v61 * (unint64_t)v61) << (v46 + 10)) + (v50 >> 1)) / v50;
      if (v62 >= 0x3BFDF)
        LODWORD(v62) = 245727;
      v63 = (v62 >> 2) + 8;
      v64 = __clz(v63);
      v65 = (v63 >> (28 - v64)) & 7 | (8 * (28 - v64));
      v66 = 4 * v65;
      v67 = ((int)v62 - *(_DWORD *)((char *)&xsq_iq_q10 + v66)) << 10 >> (30 - v64);
      v68 = 4 * (v65 + 1);
      v69 = ((uint64_t)(v67 * *(_DWORD *)((char *)&dist_tab_q10 + v68)
                     + (1024 - v67) * *(_DWORD *)((char *)&dist_tab_q10 + v66)) >> 10)
          * v50
          + 512;
      v44 = (((v67 * *(_DWORD *)((char *)&rate_tab_q10 + v68) + (1024 - v67) * *(_DWORD *)((char *)&rate_tab_q10 + v66)) >> 10 << v46)
           + 1) >> 2;
      v45 = (v69 >> 7) & 0xFFFFFFFFFFFFFFF8;
      *v30 = v44;
      if ((_DWORD)result)
        goto LABEL_62;
    }
    else
    {
      v44 = 0;
      v45 = 0;
      *v30 = 0;
      if ((_DWORD)result)
        goto LABEL_62;
    }
    v59 = 0;
    v60 = 0;
LABEL_69:
    *v30 = v44 + v59;
    v49 = v60 + v45;
    goto LABEL_70;
  }
  v47 = v39 > v41 - v42 || v75 == (_DWORD)result;
  if (v47)
    v48 = 1;
  else
    v48 = 2;
  *v13 = v48;
  if (!v47)
    goto LABEL_60;
  *v30 = 0;
  v49 = 16 * v21;
LABEL_70:
  *v29 = v49;
  return result;
}

void block_yrd(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t *a5, unsigned int a6, unsigned int a7, int a8, int a9)
{
  int v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint8x8_t *v15;
  uint64_t v16;
  uint8x8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int16x8_t v25;
  int16x8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int32x4_t *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int16x8_t *v58;
  int32x4_t v59;
  int32x4_t v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int16x8_t *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int16x8_t *v85;
  uint64_t v86;
  char v87;
  uint64_t *v88;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int32x4_t *v100;
  int32x4_t *v101;
  int32x4_t *v102;
  int32x4_t *v103;
  int32x4_t *v104;
  int32x4_t *v105;
  uint64_t v106;
  _UNKNOWN **v107;
  uint64_t v108;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  int v119[3];

  v117 = num_4x4_blocks_wide_lookup[a6];
  v11 = num_4x4_blocks_high_lookup[a6];
  if (a1[185030] && a1[43243] && (a6 < 9 || a1[186877] && (int)a1[186879] >= 1))
  {
    if (!a8)
      model_rd_for_sb_y((uint64_t)a1, a6, a2, a2 + 24912, (int *)a3, (unint64_t *)(a3 + 8), v119, &v118, a9);
    *a5 = 0x7FFFFFFFLL;
    *a4 = 0;
  }
  else
  {
    v12 = 2 * a7;
    v96 = ((*(int *)(a2 + 25412) >> 31) & (*(int *)(a2 + 25412) >> 5)) + v11;
    v13 = 4 * num_4x4_blocks_wide_lookup[a6];
    v14 = (4 * v11);
    v15 = *(uint8x8_t **)(a2 + 8216);
    v16 = *(int *)(a2 + 8224);
    v17 = *(uint8x8_t **)(a2 + 24928);
    v18 = *(int *)(a2 + 24936);
    v106 = v117 + ((*(int *)(a2 + 25404) >> 31) & (*(int *)(a2 + 25404) >> 5));
    v88 = a5;
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 25440) + 152) & 8) != 0)
    {
      v19 = 2 * (_QWORD)v15;
      v20 = 2 * (_QWORD)v17;
      if ((unint64_t)a6 - 5 > 7)
      {
        if (a6 <= 1)
        {
          v31 = a2;
          v32 = 2 * v16;
          do
          {
            v33 = 0;
            v34 = 0;
            do
            {
              *(int16x4_t *)(v31 + v33) = vsub_s16(*(int16x4_t *)(v19 + v33), *(int16x4_t *)(v20 + v33));
              v34 += 4;
              v33 += 8;
            }
            while (v34 < v13);
            v31 += 8 * v117;
            v20 += 2 * v18;
            v19 += v32;
            LODWORD(v14) = v14 - 1;
          }
          while ((_DWORD)v14);
        }
        else
        {
          v27 = a2;
          v28 = 2 * v16;
          do
          {
            v29 = 0;
            v30 = 0;
            do
            {
              *(int16x8_t *)(v27 + v29) = vsubq_s16(*(int16x8_t *)(v19 + v29), *(int16x8_t *)(v20 + v29));
              v30 += 8;
              v29 += 16;
            }
            while (v30 < v13);
            v27 += 8 * v117;
            v20 += 2 * v18;
            v19 += v28;
            LODWORD(v14) = v14 - 1;
          }
          while ((_DWORD)v14);
        }
      }
      else
      {
        v21 = 2 * v16;
        v22 = a2;
        do
        {
          v23 = 0;
          v24 = 16;
          do
          {
            v25 = vsubq_s16(*(int16x8_t *)(v19 + v24), *(int16x8_t *)(v20 + v24));
            v26 = (int16x8_t *)(v22 + v24);
            v26[-1] = vsubq_s16(*(int16x8_t *)(v19 + v24 - 16), *(int16x8_t *)(v20 + v24 - 16));
            *v26 = v25;
            v23 += 16;
            v24 += 32;
          }
          while (v23 < v13);
          v19 += v21;
          v20 += 2 * v18;
          v22 += 8 * v117;
          LODWORD(v14) = v14 - 1;
        }
        while ((_DWORD)v14);
      }
    }
    else
    {
      vpx_subtract_block_neon(v14, 4 * num_4x4_blocks_wide_lookup[a6], (uint16x8_t *)a2, 4 * num_4x4_blocks_wide_lookup[a6], v15, v16, v17, v18);
    }
    v116 = (1 << v12);
    v35 = (1 << a7);
    *a4 = 1;
    v111 = v35;
    v87 = v12;
    if ((int)v96 < 1)
    {
      v38 = 0;
    }
    else
    {
      v107 = &vp9_default_scan_orders + 3 * a7;
      v108 = 4 * v117;
      if (a7 == 2)
      {
        v63 = 0;
        v64 = 0;
        v38 = 0;
        LODWORD(v65) = 0;
        v66 = (int)v106;
        v67 = 2 * v116;
        v91 = 16 * v35 * v117;
        v68 = 4 * v35;
        do
        {
          v94 = v64;
          v69 = 0;
          v65 = (int)v65;
          v70 = 2 * (int)v65;
          v71 = 16 * v65;
          v98 = v63;
          do
          {
            if (v69 < v66)
            {
              v72 = 4 * v71;
              v73 = (int16x8_t *)(*(_QWORD *)(a2 + 8200) + v72);
              v104 = (int32x4_t *)(*(_QWORD *)(a2 + 0x2000) + v72);
              v101 = (int32x4_t *)(*(_QWORD *)(a2 + 24912) + v72);
              v114 = v38;
              v74 = *(_QWORD *)(a2 + 8208);
              vpx_hadamard_16x16_neon((int16x8_t *)(a2 + 2 * v63), v108, (uint64_t)v73);
              vp9_quantize_fp_neon(v73, 256, a2, v104, v101, *(int16x8_t **)(a2 + 25032), (__int16 *)(v74 + v70), (uint64_t)v107);
              v35 = v111;
              *a4 &= *(_WORD *)(v74 + 2 * v65) == 0;
              v67 = 2 * v116;
              v66 = (int)v106;
              v38 = v114 + 1;
            }
            v65 += v116;
            v69 += v35;
            v70 += v67;
            v71 += 16 * v116;
            v63 += v68;
          }
          while (v69 < v117);
          v64 = v94 + v35;
          v63 = v98 + v91;
        }
        while (v94 + v35 < v96);
      }
      else if (a7 == 1)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        LODWORD(v39) = 0;
        v40 = 2 * v116;
        v93 = 16 * v35 * v117;
        v41 = 4 * v35;
        do
        {
          v97 = v37;
          v42 = 0;
          v39 = (int)v39;
          v43 = 2 * (int)v39;
          v44 = 16 * v39;
          v99 = v36;
          do
          {
            if (v42 < v106)
            {
              v45 = 4 * v44;
              v46 = (int32x4_t *)(*(_QWORD *)(a2 + 8200) + v45);
              v103 = (int32x4_t *)(*(_QWORD *)(a2 + 0x2000) + v45);
              v100 = (int32x4_t *)(*(_QWORD *)(a2 + 24912) + v45);
              v112 = v38;
              v47 = *(_QWORD *)(a2 + 8208);
              vpx_hadamard_8x8_neon((int16x8_t *)(a2 + 2 * v36), v108, v46);
              vp9_quantize_fp_neon((int16x8_t *)v46, 64, a2, v103, v100, *(int16x8_t **)(a2 + 25032), (__int16 *)(v47 + v43), (uint64_t)v107);
              v35 = v111;
              *a4 &= *(_WORD *)(v47 + 2 * v39) == 0;
              v40 = 2 * v116;
              v38 = v112 + 1;
            }
            v39 += v116;
            v42 += v35;
            v43 += v40;
            v44 += 16 * v116;
            v36 += v41;
          }
          while (v42 < v117);
          v37 = v97 + v35;
          v36 = v99 + v93;
        }
        while (v97 + v35 < v96);
      }
      else
      {
        v75 = 0;
        v76 = 0;
        v38 = 0;
        LODWORD(v77) = 0;
        v78 = (int)v106;
        v79 = 2 * v116;
        v90 = 16 * v35 * v117;
        v80 = 4 * v35;
        do
        {
          v92 = v76;
          v81 = 0;
          v77 = (int)v77;
          v82 = 2 * (int)v77;
          v83 = 16 * v77;
          v95 = v75;
          do
          {
            if (v81 < v78)
            {
              v84 = 4 * v83;
              v85 = (int16x8_t *)(*(_QWORD *)(a2 + 8200) + v84);
              v105 = (int32x4_t *)(*(_QWORD *)(a2 + 0x2000) + v84);
              v102 = (int32x4_t *)(*(_QWORD *)(a2 + 24912) + v84);
              v115 = v38;
              v86 = *(_QWORD *)(a2 + 8208);
              (*(void (**)(uint64_t, int16x8_t *, uint64_t))(a2 + 82408))(a2 + 2 * v75, v85, v108);
              vp9_quantize_fp_neon(v85, 16, a2, v105, v102, *(int16x8_t **)(a2 + 25032), (__int16 *)(v86 + v82), (uint64_t)v107);
              v35 = v111;
              *a4 &= *(_WORD *)(v86 + 2 * v77) == 0;
              v79 = 2 * v116;
              v78 = (int)v106;
              v38 = v115 + 1;
            }
            v77 += v116;
            v81 += v35;
            v82 += v79;
            v83 += 16 * v116;
            v75 += v80;
          }
          while (v81 < v117);
          v76 = v92 + v35;
          v75 = v95 + v90;
        }
        while (v92 + v35 < v96);
      }
    }
    *(_DWORD *)a3 = 0;
    if (*v88 == 0x7FFFFFFFFFFFFFFFLL || (v48 = *v88 << 6 >> 2, *v88 = v48, !*a4))
    {
      *(_QWORD *)(a3 + 8) = 0;
      if ((int)v96 < 1)
      {
        v62 = 0;
      }
      else
      {
        v113 = v38;
        v49 = 0;
        LODWORD(v50) = 0;
        do
        {
          v51 = 0;
          v50 = (int)v50;
          do
          {
            if (v51 < (int)v106)
            {
              v53 = *(_QWORD *)(a2 + 8200);
              v54 = 64 * (_DWORD)v50;
              v55 = *(_QWORD *)(a2 + 24912);
              v56 = *(_QWORD *)(a2 + 8208);
              v57 = *(unsigned __int16 *)(v56 + 2 * v50);
              if (*(_WORD *)(v56 + 2 * v50))
              {
                v58 = (int16x8_t *)(*(_QWORD *)(a2 + 0x2000) + v54);
                if (v57 == 1)
                {
                  v52 = v58->i32[0];
                  if (v52 < 0)
                    v52 = -v52;
                }
                else
                {
                  v59 = 0uLL;
                  v60 = 0uLL;
                  v61 = 16 << v87;
                  do
                  {
                    v59 = vpadalq_s16(v59, vabsq_s16(vuzp1q_s16(*v58, v58[1])));
                    v60 = vpadalq_s16(v60, vabsq_s16(vuzp1q_s16(v58[2], v58[3])));
                    v58 += 4;
                    v61 -= 16;
                  }
                  while (v61);
                  v52 = vaddvq_s32(vaddq_s32(v60, v59));
                }
                *(_DWORD *)a3 += v52;
              }
              *(_QWORD *)(a3 + 8) += vp9_block_error_fp(v53 + v54, v55 + v54, (16 << v87)) >> 2;
              LODWORD(v35) = v111;
            }
            v50 += v116;
            v51 += v35;
          }
          while (v51 < v117);
          v49 += v35;
        }
        while (v49 < (int)v96);
        v62 = *(_DWORD *)a3 << 11;
        v38 = v113;
      }
      *(_DWORD *)a3 = v62 + (v38 << 9);
    }
    else
    {
      *(_QWORD *)(a3 + 8) = v48;
    }
  }
}

uint64_t model_rd_for_sb_uv(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, int *a5, int *a6, int *a7, int a8, int a9)
{
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v15;
  int v16;
  __int16 **v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v29;
  unsigned int v30;
  unint64_t v36;
  char v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v53;
  uint64_t (**v54)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *);
  uint64_t v55;
  unsigned int v56;

  v9 = *a6;
  v10 = *a7;
  *a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  if (a8 <= a9)
  {
    v55 = a2;
    v56 = 0;
    v53 = a3;
    v54 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned int *))(result
                                                                                  + ((unint64_t)a2 << 6)
                                                                                  + 740488);
    v15 = 8304 * a8;
    v16 = a9 - a8 + 1;
    v17 = (__int16 **)(a4 + 136 * a8 + 120);
    v18 = a8 + 82351;
    do
    {
      if (!*(_BYTE *)(a3 + v18))
        goto LABEL_13;
      _X10 = a3 + v15 + 16520;
      v29 = (*v17)[1];
      v30 = **v17;
      __asm { PRFM            #0, [X10] }
      result = (*v54)(*(_QWORD *)(a3 + v15 + 8216), *(unsigned int *)(a3 + v15 + 8224), *(v17 - 13), *((unsigned int *)v17 - 24), &v56);
      v36 = result;
      v37 = num_pels_log2_lookup[v55];
      v38 = *(_DWORD *)(a4 + 624) - 5;
      if (v56 == (_DWORD)result)
      {
        v39 = 0;
        v40 = 0;
        v41 = *a5;
        v42 = *((_QWORD *)a5 + 1);
        if ((_DWORD)result)
          goto LABEL_9;
      }
      else
      {
        v43 = v56 - result;
        v44 = ((((v30 >> v38) * (unint64_t)(v30 >> v38)) << (v37 + 10)) + (v43 >> 1)) / v43;
        if (v44 >= 0x3BFDF)
          LODWORD(v44) = 245727;
        v45 = (v44 >> 2) + 8;
        v46 = __clz(v45);
        v47 = (v45 >> (28 - v46)) & 7 | (8 * (28 - v46));
        v48 = 4 * v47;
        v49 = ((int)v44 - *(_DWORD *)((char *)&xsq_iq_q10 + v48)) << 10 >> (30 - v46);
        v50 = 4 * (v47 + 1);
        result = ((v49 * *(_DWORD *)((char *)&rate_tab_q10 + v50)
                               + (1024 - v49) * *(_DWORD *)((char *)&rate_tab_q10 + v48)) >> 10);
        LODWORD(v50) = v49 * *(_DWORD *)((char *)&dist_tab_q10 + v50)
                     + (1024 - v49) * *(_DWORD *)((char *)&dist_tab_q10 + v48);
        v39 = (((_DWORD)result << v37) + 1) >> 1;
        v40 = (uint64_t)(((uint64_t)(int)v50 >> 10) * v43 + 512) >> 10;
        v41 = *a5;
        v42 = *((_QWORD *)a5 + 1);
        if ((_DWORD)v36)
        {
LABEL_9:
          v19 = ((((v29 >> v38) * (unint64_t)(v29 >> v38)) << (v37 + 10)) + (v36 >> 1)) / v36;
          if (v19 >= 0x3BFDF)
            LODWORD(v19) = 245727;
          v20 = (v19 >> 2) + 8;
          v21 = __clz(v20);
          v22 = (v20 >> (28 - v21)) & 7 | (8 * (28 - v21));
          v23 = 4 * v22;
          v24 = ((int)v19 - *(_DWORD *)((char *)&xsq_iq_q10 + v23)) << 10 >> (30 - v21);
          result = (1024 - v24);
          v25 = 4 * (v22 + 1);
          v26 = (((v24 * *(_DWORD *)((char *)&rate_tab_q10 + v25)
                 + (int)result * *(_DWORD *)((char *)&rate_tab_q10 + v23)) >> 10 << v37)
               + 1) >> 1;
          v27 = (uint64_t)(((uint64_t)(v24 * *(_DWORD *)((char *)&dist_tab_q10 + v25)
                                   + (int)result * *(_DWORD *)((char *)&dist_tab_q10 + v23)) >> 10)
                        * v36
                        + 512) >> 10;
          goto LABEL_12;
        }
      }
      v26 = 0;
      v27 = 0;
LABEL_12:
      a3 = v53;
      v9 += v36;
      v10 += v56;
      *a5 = v26 + v41 + (v39 >> 1);
      *((_QWORD *)a5 + 1) = v42 + 8 * v40 + 16 * v27;
LABEL_13:
      v15 += 8304;
      v17 += 17;
      ++v18;
      --v16;
    }
    while (v16);
  }
  v11 = -1;
  if (v9 >= 0xFFFFFFFF)
    v12 = -1;
  else
    v12 = v9;
  *a6 = v12;
  if (v10 < 0xFFFFFFFF)
    v11 = v10;
  *a7 = v11;
  return result;
}

_DWORD *vp9_NEWMV_diff_bias(_DWORD *result, uint64_t a2, int a3, uint64_t a4, unsigned int a5, int a6, int a7, int a8, int a9, int a10)
{
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 == 13)
  {
    v10 = *(_QWORD *)(a2 + 464);
    if (v10)
    {
      v11 = *(_DWORD *)(v10 + 12);
      v12 = (__int16)v11;
      v13 = v11 >> 16;
      v14 = *(_QWORD *)(a2 + 456);
      if (v14)
      {
        v15 = *(_DWORD *)(v14 + 12);
        if (v11 != -2147450880 && v15 != -2147450880)
        {
          v13 = (v13 + (v15 >> 16) + 1) >> 1;
          if (((((__int16)v11 + (__int16)v15 + 1) >> 1) - a6 - 49) < 0xFFFFFF9F)
            goto LABEL_32;
LABEL_22:
          v21 = v13 - a7;
          if (v21 <= 48 && v21 > -49)
            goto LABEL_24;
LABEL_32:
          v22 = *(_QWORD *)(a4 + 16);
          v23 = 2 * v22;
          v24 = (3 * v22) >> 1;
          if (a5 > 9)
            v24 = v23;
          *(_QWORD *)(a4 + 16) = v24;
          if (!*result)
            goto LABEL_35;
          goto LABEL_25;
        }
        if (v11 == -2147450880)
        {
          v12 = 0;
          v13 = 0;
          v17 = v15 == -2147450880;
        }
        else
        {
          v17 = 1;
        }
        if (!v17)
        {
          v13 = v15 >> 16;
          if (((__int16)v15 - a6 - 49) < 0xFFFFFF9F)
            goto LABEL_32;
          goto LABEL_22;
        }
LABEL_21:
        if ((v12 - a6 - 49) < 0xFFFFFF9F)
          goto LABEL_32;
        goto LABEL_22;
      }
      if (v11 != -2147450880)
        goto LABEL_21;
    }
    else
    {
      v18 = *(_QWORD *)(a2 + 456);
      if (v18)
      {
        v19 = *(_DWORD *)(v18 + 12);
        if (v19 != -2147450880)
        {
          v20 = (__int16)v19;
          v13 = v19 >> 16;
          if ((v20 - a6 - 49) < 0xFFFFFF9F)
            goto LABEL_32;
          goto LABEL_22;
        }
      }
    }
    v12 = 0;
    v13 = 0;
    goto LABEL_21;
  }
LABEL_24:
  if (!*result)
    goto LABEL_35;
LABEL_25:
  if ((a7 + 7) <= 0xE && (a6 + 7) <= 0xE && a8 && a5 >= 9 && result[1] > 1u)
    goto LABEL_41;
LABEL_35:
  if ((a7 + 15) <= 0x1E && (a6 + 15) <= 0x1E && a8 && a5 >= 6 && a9 && !a10)
LABEL_41:
    *(_QWORD *)(a4 + 16) = (*(_QWORD *)(a4 + 16) & 0xFFFFFFFFFFFFFFF8) - (*(uint64_t *)(a4 + 16) >> 3);
  return result;
}

uint64_t encode_breakout_test(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, unsigned int a7, unsigned int a8, int a9, uint64_t a10, _DWORD *a11, _QWORD *a12, int a13, int a14)
{
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  char v25;
  __int16 *v26;
  signed int v27;
  unsigned int v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t (**v38)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v39;

  v17 = result;
  v18 = (unsigned int *)(a2 + 16528);
  v19 = **(_QWORD **)(a2 + 25360);
  v20 = ss_size_lookup[4 * a3 + 2 * *(int *)(a2 + 25056) + *(int *)(a2 + 25060)];
  if (a6 != 2 || !*(_DWORD *)(result + 747508))
  {
    if (*(unsigned __int16 *)(v19 + 12) - 65 < 0xFF7F
      || *(unsigned __int16 *)(v19 + 14) - 65 < 0xFF7F
      || (v21 = *(_DWORD *)(a2 + 26908), v21 < 1))
    {
      v34 = 0;
      v32 = 0;
    }
    else
    {
      v22 = 16 * v21;
      if (v22 >= 0x8CA0)
        v23 = 36000;
      else
        v23 = v22;
      v24 = 2 * *(_DWORD *)(a2 + 25536);
      v25 = v24 - 16;
      v26 = *(__int16 **)(a2 + 25032);
      v27 = (v26[1] * v26[1]) >> 3;
      v28 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 25440) + 152);
      v29 = v24 > 16;
      v30 = 1 << (v24 - 17);
      if ((v29 & (v28 >> 3)) != 0)
        v27 = (v27 + v30) >> v25;
      v31 = (*v26 * *v26) >> 6;
      v32 = (v31 + v30) >> v25;
      if ((v29 & (v28 >> 3)) == 0)
        v32 = v31;
      if (v27 >= 36000)
        v33 = 36000;
      else
        v33 = v27;
      if (v27 < v23)
        v33 = v23;
      v34 = v33 >> (8 - (b_width_log2_lookup[a3] + b_height_log2_lookup[a3]));
    }
    if (v34 >= a8 && a9 - a8 <= v32)
    {
      v39 = 0;
      if (*(_BYTE *)(a2 + 82354))
        v35 = 0;
      else
        v35 = v34;
      if (*(_BYTE *)(a2 + 82354))
        v36 = 0;
      else
        v36 = v32;
      if (!a13 || !a14)
      {
        v37 = a10 + 48 * a6;
        *(_OWORD *)(a2 + 25080) = *(_OWORD *)(v37 + 16);
        *(_OWORD *)(a2 + 25216) = *(_OWORD *)(v37 + 32);
        build_inter_predictors_for_planes(a2 + 24912, a3, a4, a5, 1, 2);
      }
      v38 = (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v17 + (v20 << 6) + 740488);
      result = (*v38)(*(_QWORD *)(a2 + 16520), *v18, *(_QWORD *)(a2 + 25064), v18[2136], (char *)&v39 + 4);
      if (v35 >= 4 * (int)result && HIDWORD(v39) - (int)result <= v36)
      {
        result = (*v38)(*(_QWORD *)(a2 + 24824), v18[2076], *(_QWORD *)(a2 + 25200), v18[2170], &v39);
        if (v35 >= 4 * (int)result && (int)v39 - (int)result <= v36)
        {
          v18[2594] = 1;
          *a11 = *(_DWORD *)(v17 + 16 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 25568) + a6 + 32) + 4 * a7 + 836528);
          *a12 = (16 * a9);
        }
      }
    }
  }
  return result;
}

__n128 vp9_pick_inter_mode_sub8x8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int *v27;
  char v28;
  int v29;
  __int128 *v30;
  __int128 *v31;
  __int128 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  int v50;
  int v51;
  uint64_t v52;
  __n128 v53;
  __int32 v54;
  __int32 v55;
  __int32 v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  __int16 *v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  void (*v87)(uint64_t, __n128);
  int16x4_t *v88;
  int v89;
  _QWORD *v90;
  int v91;
  int v92;
  __int16 v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  int16x4_t *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _DWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  _DWORD *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _DWORD *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  __n128 result;
  __int128 v147;
  uint64_t v149;
  unsigned __int16 *v150;
  _BYTE *v151;
  uint64_t v152;
  unsigned int v153;
  int16x4_t *v154;
  uint64_t v155;
  char v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int16 v176;
  _DWORD *v177;
  uint64_t v178;
  int v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v184;
  __int128 *v185;
  int v186;
  __int128 v187;
  int v188;
  __int16 v189;
  __int16 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int64_t v196;
  int16x4_t v197[2];
  __int128 v198;
  __int128 v199;
  _DWORD v200[10];
  __int32 v201;
  __int32 v202;
  int v203;
  int v204;
  int v205;
  _DWORD v206[59];
  uint64_t v207;
  _QWORD v208[15];

  v7 = a7;
  v8 = a4;
  v10 = a1;
  v208[12] = *MEMORY[0x24BDAC8D0];
  v11 = (_DWORD *)(a2 + 24936);
  v12 = a1 + 739520;
  v13 = (int *)(a1 + 194512);
  v178 = **(_QWORD **)(a2 + 25360);
  v154 = *(int16x4_t **)(a2 + 25568);
  v155 = a1 + 176472;
  v14 = a6;
  v15 = *(_DWORD *)(a1 + 739608);
  if (v15)
    v15 = *(_DWORD *)(a2 + 25600) < 115;
  v180 = (_DWORD *)(a2 + 24912);
  v16 = *(unsigned __int8 *)(v178 + 4);
  v17 = num_4x4_blocks_wide_lookup[a6];
  v159 = num_4x4_blocks_high_lookup[a6];
  *(_DWORD *)(a2 + 82216) = v15;
  *(_DWORD *)(a7 + 700) = 0;
  v164 = (uint64_t)&v154[4];
  v165 = a1 + 171696;
  v18 = *v13;
  if ((_DWORD)v18 == -1 || (v19 = *(_DWORD *)(a1 + 4 * v18 + 172048), v19 == -1))
    v20 = 0;
  else
    v20 = *(_QWORD *)(a1 + 189944) + 224 * v19 + 88;
  *(_DWORD *)(a2 + 25712) = 0x7FFFFFFF;
  v21 = 2;
  v172 = (int *)(a1 + 172992);
  v184 = v16;
  if ((*(_BYTE *)v12 & 1) != 0 && v20)
  {
    vp9_setup_pred_block((uint64_t)v180, (uint64_t)&v207, v20, a3, a4, a1 + 172128, a1 + 172128);
    v10 = a1;
    find_mv_refs_idx(v165, (uint64_t)v180, ***(_BYTE ***)(a2 + 25360), 1, v154 + 1, 0xFFFFFFFF, a3, a4, v164);
    vp9_find_best_ref_mvs(v180, *v172, (__int16 *)&v154[1], &v205, v206);
    v16 = v184;
    v7 = a7;
    v8 = a4;
    v21 = 0;
  }
  v23 = v13[1];
  if ((_DWORD)v23 == -1 || (v24 = *(_DWORD *)(v10 + 4 * v23 + 172048), v24 == -1))
  {
    v25 = 0;
    v11[195] = 0x7FFFFFFF;
    v149 = v7;
    if ((*(_BYTE *)v12 & 2) == 0)
    {
LABEL_17:
      v21 |= 4u;
      v26 = a3;
      v27 = v172;
      goto LABEL_18;
    }
  }
  else
  {
    v25 = *(_QWORD *)(v155 + 13472) + 224 * v24 + 88;
    v11[195] = 0x7FFFFFFF;
    v149 = v7;
    if ((*(_BYTE *)v12 & 2) == 0)
      goto LABEL_17;
  }
  if (!v25)
    goto LABEL_17;
  v26 = a3;
  vp9_setup_pred_block((uint64_t)v180, (uint64_t)v208, v25, a3, v8, v10 + 172304, v10 + 172304);
  find_mv_refs_idx(v165, (uint64_t)v180, ***(_BYTE ***)(a2 + 25360), 2, v154 + 2, 0xFFFFFFFF, a3, v8, v164);
  v27 = v172;
  vp9_find_best_ref_mvs(v180, *v172, (__int16 *)&v154[2], &v205, v206);
  v16 = v184;
LABEL_18:
  v28 = 0;
  *(_BYTE *)v178 = a6;
  *(_BYTE *)(v178 + 2) = 0;
  *(_BYTE *)(v178 + 6) = 0;
  *(_WORD *)(v178 + 8) = -255;
  v29 = *((unsigned __int8 *)v27 + 260);
  if (v29 == 4)
    LOBYTE(v29) = 0;
  *(_BYTE *)(v178 + 7) = v29;
  v150 = (unsigned __int16 *)(v10 + 176472 + 8 * v16 + 20);
  v151 = (_BYTE *)(v10 + 176472 + 4 * v16 + 80);
  v152 = v10 + 172112;
  v30 = (__int128 *)(a2 + 8216);
  v31 = (__int128 *)(a2 + 24928);
  v32 = (__int128 *)(a2 + 24944);
  v185 = (__int128 *)(v11 + 228);
  v171 = v10 + (v14 << 6) + 740464;
  v161 = v26 << 7;
  v162 = v8 << 7;
  v174 = v10 + 836568;
  v175 = a2 + 25724;
  v33 = 255;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  v35 = 1;
  v163 = v17;
  v36 = v26;
  v153 = v21;
  while (2)
  {
    v37 = v28;
    if (((v21 >> v35) & 1) != 0)
      goto LABEL_27;
    v38 = v35 - 1;
    v39 = *(_DWORD *)(v10 + 176 * (v35 - 1) + 172128);
    if (v39 != -1)
    {
      v40 = *(_DWORD *)(v10 + 176 * v38 + 172132);
      if (v40 != -1 && (v39 != 0x4000 || v40 != 0x4000))
        goto LABEL_27;
    }
    if (*(_BYTE *)v155 && (*v151 & 4) != 0 && *v150 != (unsigned __int16)v35)
      goto LABEL_27;
    v156 = v37;
    v157 = v33;
    v158 = v34;
    v41 = 0;
    v42 = 0;
    *(_BYTE *)(v178 + 8) = v35;
    v43 = (__int128 *)&v206[12 * v35 + 47];
    v44 = v43[1];
    *v32 = *v43;
    v11[492] = 0;
    *(_QWORD *)(a2 + 25424) = v10 + 176 * v38 + 172112;
    *(_QWORD *)(a2 + 25432) = v152;
    *(_OWORD *)(a2 + 25080) = v44;
    *(_OWORD *)(a2 + 25216) = v43[2];
    v45 = (__int16 *)&v154[v35];
    v181 = v35;
    v173 = a2 + 4 * v35 + 25692;
    while (2)
    {
      v46 = 0;
      v160 = v41;
      v168 = 2 * v41;
      while (2)
      {
        v170 = v46;
        v47 = v46 + v168;
        v195 = 0;
        v193 = 0;
        v194 = 0;
        v196 = 0;
        v48 = *v30;
        v191 = *v31;
        v192 = v48;
        v49 = v32[1];
        v198 = *v32;
        v199 = v49;
        v50 = ((int)v46 + (int)v168) >> 1;
        v51 = (v46 + v168) & 1;
        *(_QWORD *)(a2 + 8216) += 4 * (v51 + *(_DWORD *)(a2 + 8224) * v50);
        *(_QWORD *)(a2 + 24928) += 4 * (v51 + *v11 * v50);
        *(_QWORD *)(a2 + 24944) += 4 * (v51 + v11[4] * v50);
        v204 = -2147450880;
        v52 = **(_QWORD **)(a2 + 25360);
        v53.n128_u64[0] = (unint64_t)find_mv_refs_idx(v165, (uint64_t)v180, *(_BYTE *)v52, *(char *)(v52 + 8), v197, (int)v46 + (int)v168, v36, v8, v164);
        v203 = 0;
        v202 = 0;
        v169 = v42;
        if ((v47 - 1) < 2)
        {
          v54 = *(_DWORD *)(v52 + 24);
          v201 = v54;
          v56 = v197[0].i32[0];
          v176 = v54;
          if (v54 != v197[0].i32[0])
            goto LABEL_56;
          v56 = v197[0].i32[1];
          goto LABEL_49;
        }
        if (!(_DWORD)v47)
        {
          v56 = v197[0].i32[1];
          v176 = v197[0].i16[0];
          v201 = v197[0].i32[0];
          goto LABEL_56;
        }
        if ((_DWORD)v47 == 3)
        {
          v54 = *(_DWORD *)(v52 + 36);
          v55 = *(_DWORD *)(v52 + 24);
          v56 = v197[0].i32[1];
          v201 = *(_DWORD *)(v52 + 48);
          v176 = v201;
          if (v201 != v54)
          {
            v56 = v54;
            goto LABEL_56;
          }
          if (v54 != v55)
          {
            v56 = v55;
            goto LABEL_56;
          }
          if (v54 != v197[0].i32[0])
          {
            v56 = v197[0].i32[0];
LABEL_56:
            v58 = v170;
LABEL_57:
            v202 = v56;
            goto LABEL_58;
          }
LABEL_49:
          v57 = v54 == v56;
          v58 = v170;
          if (v57)
            goto LABEL_58;
          goto LABEL_57;
        }
        v176 = v201;
        v58 = v170;
LABEL_58:
        v59 = 0;
        v179 = ((v58 & 1) << 6) | v162;
        v177 = &v206[12 * v181 - 1 + 3 * v47];
        v60 = v161 + (v47 >> 1 << 6);
        v61 = 0x7FFFFFFFFFFFFFFFLL;
        do
        {
          *(_DWORD *)(**(_QWORD **)(a2 + 25360) + 12 * v47 + 24) = v200[v59 + 10];
          if (v59 != 3)
          {
            v80 = *(_DWORD *)(v174 + 16 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 25568) + v181 + 32) + 4 * v59);
            v81 = *(_QWORD *)(a2 + 24944);
            if ((*(_BYTE *)(*(_QWORD *)(a2 + 25440) + 152) & 8) != 0)
              goto LABEL_105;
            goto LABEL_87;
          }
          v62 = *(_DWORD *)(v12 + 48);
          v188 = 0;
          v187 = *v185;
          v186 = 0;
          v63 = v176;
          v64 = (__int16 *)&v201 + 1;
          if (v47)
          {
            v65 = **(_QWORD **)(a2 + 25360);
            v63 = *(_WORD *)(v65 + 24);
            v64 = (__int16 *)(v65 + 26);
          }
          v189 = v63 >> 3;
          v190 = *v64 >> 3;
          v66 = v45[1];
          v67 = v66 >> 3;
          v68 = (v66 & 7) != 0 ? v67 + 1 : v66 >> 3;
          v69 = v68 - 1023;
          v70 = *v45;
          v71 = v70 >> 3;
          v72 = (v70 & 7) != 0 ? v71 + 1 : v70 >> 3;
          v73 = v72 - 1023;
          v74 = v69 <= -2047 ? -2047 : v69;
          v75 = v73 <= -2047 ? -2047 : v73;
          v76 = v67 >= 1023 ? 1023 : v67;
          v77 = v71 >= 1023 ? 1023 : v71;
          if (*(_DWORD *)v185 >= v74)
          {
            v78 = v76 + 1023;
            if (v11[229] <= v76 + 1023)
            {
LABEL_83:
              if (v11[230] >= v75)
                goto LABEL_90;
              goto LABEL_84;
            }
          }
          else
          {
            *(_DWORD *)v185 = v74;
            v78 = v76 + 1023;
            if (v11[229] <= v76 + 1023)
              goto LABEL_83;
          }
          v11[229] = v78;
          if (v11[230] >= v75)
          {
LABEL_90:
            v79 = v77 + 1023;
            if (v11[231] <= v77 + 1023)
              goto LABEL_92;
LABEL_91:
            v11[231] = v79;
            goto LABEL_92;
          }
LABEL_84:
          v11[230] = v75;
          v79 = v77 + 1023;
          if (v11[231] > v77 + 1023)
            goto LABEL_91;
LABEL_92:
          if (*(_DWORD *)(v12 + 20))
            v88 = v197;
          else
            v88 = 0;
          vp9_full_pixel_search((int *)a1, a2, a6, &v189, v62, *(_DWORD *)(v12 + 8), v11[173], v88, v45, (unsigned __int16 *)&v188, 0x7FFFFFFF, 0);
          *v185 = v187;
          v189 = 8 * v188;
          v89 = (unsigned __int16)(8 * HIWORD(v188));
          v190 = 8 * HIWORD(v188);
          v90 = *(_QWORD **)(a2 + 25776);
          v91 = (unsigned __int16)*v45;
          v92 = (unsigned __int16)v45[1];
          v93 = 8 * HIWORD(v188) - v92;
          v57 = v89 == v92;
          v94 = v89 != v92;
          v95 = 2;
          if (!v57)
            v95 = 3;
          v96 = (unsigned __int16)(8 * v188) == v91 ? v94 : v95;
          v80 = *(_DWORD *)(a1 + 16 * *(unsigned __int8 *)(*(_QWORD *)(a2 + 25568) + v181 + 32) + 836580)
              + ((108
                * (*(_DWORD *)(*v90 + 4 * (__int16)(8 * v188 - v91))
                 + *(_DWORD *)(v90[1] + 4 * v93)
                 + *(_DWORD *)(v175 + 4 * v96))
                + 64) >> 7);
          if (v61 < ((int)v11[175] * (uint64_t)v80 + 256) >> 9)
            break;
          if (*(_DWORD *)(v12 + 20))
            v97 = v197;
          else
            v97 = 0;
          (*(void (**)(uint64_t, int *, __int16 *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, int16x4_t *, uint64_t, _QWORD *, int *, uint64_t, _QWORD, _QWORD, _DWORD))(v12 + 768))(a2, &v188, v45, *v172, v11[171], v171, *(unsigned int *)(v12 + 28), *(unsigned int *)(v12 + 24), v97, v175, v90, &v186, v173, 0, 0, *(_DWORD *)(v12 + 640));
          *(_DWORD *)(**(_QWORD **)(a2 + 25360) + 12 * v47 + 24) = v188;
          v81 = *(_QWORD *)(a2 + 24944);
          if ((*(_BYTE *)(*(_QWORD *)(a2 + 25440) + 152) & 8) != 0)
          {
LABEL_105:
            v98 = **(_QWORD **)(a2 + 25360) + 12 * v47;
            v99 = *(_QWORD *)(a2 + 25424);
            v100 = *(_DWORD *)(v99 + 16);
            v99 += 16;
            v101 = (((v60 * *(_DWORD *)(v99 + 4)) >> 14) & 0xF)
                 + ((unint64_t)(*(int *)(v99 + 4) * (uint64_t)(__int16)(2 * *(_WORD *)(v98 + 24))) >> 14);
            LODWORD(v98) = (((v179 * v100) >> 14) & 0xF)
                         + ((unint64_t)(v100 * (uint64_t)(__int16)(2 * *(_WORD *)(v98 + 26))) >> 14);
            v86 = 2 * v81 + 2 * ((v101 >> 4) * v11[4] + ((int)v98 >> 4));
            v87 = *(void (**)(uint64_t, __n128))(v99
                                                         + 32 * ((v98 & 0xF) != 0)
                                                         + 16 * ((v101 & 0xF) != 0)
                                                         + 96);
            goto LABEL_106;
          }
LABEL_87:
          v82 = **(_QWORD **)(a2 + 25360) + 12 * v47;
          v83 = *(_QWORD *)(a2 + 25424);
          v84 = *(_DWORD *)(v83 + 16);
          v83 += 16;
          v85 = (((v60 * *(_DWORD *)(v83 + 4)) >> 14) & 0xF)
              + ((unint64_t)(*(int *)(v83 + 4) * (uint64_t)(__int16)(2 * *(_WORD *)(v82 + 24))) >> 14);
          LODWORD(v82) = (((v179 * v84) >> 14) & 0xF)
                       + ((unint64_t)(v84 * (uint64_t)(__int16)(2 * *(_WORD *)(v82 + 26))) >> 14);
          v86 = v81 + (v85 >> 4) * v11[4] + ((int)v82 >> 4);
          v87 = *(void (**)(uint64_t, __n128))(v83 + 32 * ((v82 & 0xF) != 0) + 16 * ((v85 & 0xF) != 0) + 32);
LABEL_106:
          v87(v86, v53);
          model_rd_for_sb_y(a1, a6, a2, (uint64_t)v180, (int *)&v194, &v195, (_DWORD *)&v193 + 1, (unsigned int *)&v193, 0);
          v102 = (int)v194 + (uint64_t)v80;
          LODWORD(v194) = v194 + v80;
          v103 = (v195 << v11[174]) + (((int)v11[175] * v102 + 256) >> 9);
          v196 = v103;
          if (v103 < v61)
          {
            *(_BYTE *)v177 = v59 + 10;
            v177[1] = *(_DWORD *)(**(_QWORD **)(a2 + 25360) + 12 * v47 + 24);
            v61 = v103;
          }
          ++v59;
        }
        while (v59 != 4);
        v31 = (__int128 *)(a2 + 24928);
        v30 = (__int128 *)(a2 + 8216);
        *(_OWORD *)(a2 + 8216) = v192;
        v32 = (__int128 *)(a2 + 24944);
        *(_OWORD *)(a2 + 24944) = v198;
        *(_OWORD *)(a2 + 24928) = v191;
        v104 = **(_QWORD **)(a2 + 25360) + 12 * v47;
        *(_DWORD *)(v104 + 28) = v177[2];
        *(_QWORD *)(v104 + 20) = *(_QWORD *)v177;
        v8 = a4;
        v36 = a3;
        if (a6 >= 2)
        {
          v105 = **(_QWORD **)(a2 + 25360) + 12 * v47;
          *(_QWORD *)(v105 + 32) = *(_QWORD *)(v105 + 20);
          *(_DWORD *)(v105 + 40) = *(_DWORD *)(v105 + 28);
        }
        v17 = v163;
        if ((a6 & 0xFD) != 0)
        {
          v106 = **(_QWORD **)(a2 + 25360) + 12 * v47;
          *(_QWORD *)(v106 + 44) = *(_QWORD *)(v106 + 20);
          *(_DWORD *)(v106 + 52) = *(_DWORD *)(v106 + 28);
        }
        v42 = v61 + v169;
        v46 = v170 + v163;
        if ((unint64_t)(v170 + v163) < 2)
          continue;
        break;
      }
      v41 = v160 + v159;
      if ((unint64_t)(v160 + v159) < 2)
        continue;
      break;
    }
    v34 = v158;
    v10 = a1;
    if (v42 >= v158)
      v33 = v157;
    else
      v33 = v181;
    if (v42 < v158)
      v34 = v61 + v169;
    v21 = v153;
    v37 = v156;
LABEL_27:
    v28 = 1;
    v35 = 2;
    if ((v37 & 1) == 0)
      continue;
    break;
  }
  *(_BYTE *)(v178 + 2) = 0;
  *(_BYTE *)(v178 + 8) = v33;
  if (a6 < 2)
  {
    if ((a6 & 0xFD) != 0)
    {
      v117 = 0;
      v118 = 0;
      v119 = &v206[12 * (char)v33 - 1];
      do
      {
        v120 = 0;
        v121 = v117;
        do
        {
          v122 = **(_QWORD **)(a2 + 25360) + v121;
          v123 = *(_QWORD *)((char *)v119 + v121);
          *(_QWORD *)(v122 + 20) = v123;
          v124 = *(_DWORD *)((char *)v119 + v121 + 8);
          *(_DWORD *)(v122 + 28) = v124;
          v125 = **(_QWORD **)(a2 + 25360) + v121;
          *(_DWORD *)(v125 + 52) = v124;
          *(_QWORD *)(v125 + 44) = v123;
          v120 += v17;
          v121 += 12 * v17;
        }
        while (v120 < 2);
        v118 += v159;
        v117 += 24 * v159;
      }
      while (v118 < 2);
    }
    else
    {
      v135 = 0;
      v136 = 0;
      v137 = &v206[12 * (char)v33 - 1];
      do
      {
        v138 = 0;
        v139 = v135;
        do
        {
          v140 = **(_QWORD **)(a2 + 25360) + v139;
          *(_QWORD *)(v140 + 20) = *(_QWORD *)((char *)v137 + v139);
          *(_DWORD *)(v140 + 28) = *(_DWORD *)((char *)v137 + v139 + 8);
          v138 += v17;
          v139 += 12 * v17;
        }
        while (v138 < 2);
        v136 += v159;
        v135 += 24 * v159;
      }
      while (v136 < 2);
    }
  }
  else if ((a6 & 0xFD) != 0)
  {
    v107 = 0;
    v108 = 0;
    v109 = &v206[12 * (char)v33 - 1];
    do
    {
      v110 = 0;
      v111 = v107;
      do
      {
        v112 = **(_QWORD **)(a2 + 25360) + v111;
        v113 = *(_QWORD *)((char *)v109 + v111);
        *(_QWORD *)(v112 + 20) = v113;
        v114 = *(_DWORD *)((char *)v109 + v111 + 8);
        *(_DWORD *)(v112 + 28) = v114;
        v115 = **(_QWORD **)(a2 + 25360) + v111;
        *(_DWORD *)(v115 + 40) = v114;
        *(_QWORD *)(v115 + 32) = v113;
        v116 = **(_QWORD **)(a2 + 25360) + v111;
        *(_DWORD *)(v116 + 52) = v114;
        *(_QWORD *)(v116 + 44) = v113;
        v110 += v17;
        v111 += 12 * v17;
      }
      while (v110 < 2);
      v108 += v159;
      v107 += 24 * v159;
    }
    while (v108 < 2);
  }
  else
  {
    v126 = 0;
    v127 = 0;
    v128 = &v206[12 * (char)v33 - 1];
    do
    {
      v129 = 0;
      v130 = v126;
      do
      {
        v131 = **(_QWORD **)(a2 + 25360) + v130;
        v132 = *(_QWORD *)((char *)v128 + v130);
        *(_QWORD *)(v131 + 20) = v132;
        v133 = *(_DWORD *)((char *)v128 + v130 + 8);
        *(_DWORD *)(v131 + 28) = v133;
        v134 = **(_QWORD **)(a2 + 25360) + v130;
        *(_DWORD *)(v134 + 40) = v133;
        *(_QWORD *)(v134 + 32) = v132;
        v129 += v17;
        v130 += 12 * v17;
      }
      while (v129 < 2);
      v127 += v159;
      v126 += 24 * v159;
    }
    while (v127 < 2);
  }
  v141 = **(_QWORD **)(a2 + 25360);
  *(_BYTE *)(v178 + 1) = *(_BYTE *)(v141 + 56);
  *(_OWORD *)v149 = *(_OWORD *)v141;
  v142 = *(_OWORD *)(v141 + 16);
  v143 = *(_OWORD *)(v141 + 32);
  v144 = *(_OWORD *)(v141 + 48);
  *(_DWORD *)(v149 + 64) = *(_DWORD *)(v141 + 64);
  *(_OWORD *)(v149 + 32) = v143;
  *(_OWORD *)(v149 + 48) = v144;
  *(_OWORD *)(v149 + 16) = v142;
  v145 = *(_QWORD *)(a2 + 25568);
  result = *(__n128 *)v145;
  v147 = *(_OWORD *)(v145 + 16);
  *(_DWORD *)(v149 + 100) = *(_DWORD *)(v145 + 32);
  *(_OWORD *)(v149 + 84) = v147;
  *(__n128 *)(v149 + 68) = result;
  *(_BYTE *)(v149 + 708) = 0;
  *(_DWORD *)(v149 + 696) = 0;
  *(_QWORD *)(a5 + 16) = v34;
  return result;
}

BOOL combined_motion_search(int *a1, uint64_t a2, unsigned int a3, int a4, int a5, unsigned __int16 *a6, int *a7, uint64_t a8, int a9)
{
  uint64_t v9;
  int *v11;
  int *v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  unsigned int *v20;
  uint64_t v21;
  int *v22;
  BOOL v23;
  char v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  unsigned int v28;
  int v29;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  int v53;
  unsigned __int16 *v54;
  _DWORD *v55;
  unsigned int *v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _BOOL8 v64;
  int v65;
  uint64_t v66;
  _BOOL4 v67;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int *v73;
  _BYTE *v74;
  uint64_t *v75;
  int v76;
  _BOOL8 v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  int *v84;
  unsigned int *v85;
  unsigned int v86;
  char v87;
  uint64_t v88;
  __int128 v91;
  int v92;
  int v93;
  int v94;
  int v95;
  _BYTE v96[20];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;

  v9 = a2;
  v100 = *MEMORY[0x24BDAC8D0];
  v11 = (int *)(a2 + 25620);
  v12 = a1 + 184882;
  v13 = a1 + 47514;
  v14 = **(_QWORD **)(a2 + 25360);
  v98 = 0u;
  v99 = 0u;
  v97 = 0u;
  v15 = a1[184892];
  v16 = *(_DWORD *)(a2 + 25624);
  v95 = 0;
  v17 = *(unsigned __int8 *)(v14 + 8);
  v18 = *(_DWORD *)(*(_QWORD *)(a2 + 25568) + 8 * (char)v17);
  v94 = v18;
  v91 = *(_OWORD *)(a2 + 25848);
  v19 = a1[(char)v17 + 48624];
  if (v17 != 2)
  {
    if (v17 == 1)
    {
      v20 = (unsigned int *)(a1 + 43248);
      v21 = v13[1114];
      if ((_DWORD)v21 == -1)
        goto LABEL_9;
    }
    else
    {
      v20 = (unsigned int *)(a1 + 43248);
      v21 = v13[1116];
      if ((_DWORD)v21 == -1)
        goto LABEL_9;
    }
LABEL_8:
    LODWORD(v21) = a1[v21 + 43012];
    goto LABEL_9;
  }
  v20 = (unsigned int *)(a1 + 43248);
  v21 = v13[1115];
  if ((_DWORD)v21 != -1)
    goto LABEL_8;
LABEL_9:
  v22 = (int *)(a2 + 25848);
  v23 = v19 == -1 || v19 == (_DWORD)v21;
  v24 = v23;
  v87 = v24;
  v88 = a8;
  if (!v23)
  {
    v86 = a3;
    v25 = *((_QWORD *)v20 + 2119) + 224 * v19 + 88;
    v84 = (int *)(a2 + 25848);
    v85 = v20;
    v26 = *(_OWORD *)(a2 + 25080);
    v97 = *(_OWORD *)(a2 + 24944);
    v98 = v26;
    v99 = *(_OWORD *)(a2 + 25216);
    v27 = v15;
    v28 = v16;
    v29 = v18;
    v31 = (int *)(a2 + 25620);
    v32 = v13;
    vp9_setup_pre_planes(a2 + 24912, 0, v25, a4, a5, 0);
    v13 = v32;
    v11 = v31;
    v9 = a2;
    v18 = v29;
    v16 = v28;
    v15 = v27;
    v22 = v84;
    v20 = v85;
    a3 = v86;
    a8 = v88;
  }
  v92 = 0;
  v33 = v18 >> 19;
  if ((v18 & 0x70000) != 0)
    v34 = v33 + 1;
  else
    v34 = v18 >> 19;
  v35 = v34 - 1023;
  v36 = (__int16)v18 >> 3;
  if ((v18 & 7) != 0)
    v37 = v36 + 1;
  else
    v37 = (__int16)v18 >> 3;
  v38 = v37 - 1023;
  if (v35 <= -2047)
    v39 = -2047;
  else
    v39 = v35;
  if (v38 <= -2047)
    v40 = -2047;
  else
    v40 = v38;
  if (v33 >= 1023)
    v33 = 1023;
  v41 = v33 + 1023;
  if (v36 >= 1023)
    v36 = 1023;
  v42 = *v22;
  if (*v22 >= v39)
  {
    v43 = v11[58];
    if (v43 <= v41)
    {
LABEL_35:
      v44 = v36 + 1023;
      v45 = v11[59];
      if (v45 < v40)
        goto LABEL_36;
      goto LABEL_41;
    }
  }
  else
  {
    *v22 = v39;
    v42 = v39;
    v43 = v11[58];
    if (v43 <= v41)
      goto LABEL_35;
  }
  v11[58] = v41;
  v43 = v41;
  v44 = v36 + 1023;
  v45 = v11[59];
  if (v45 < v40)
  {
LABEL_36:
    v11[59] = v40;
    v45 = v40;
    v46 = v9 + 82356;
    v47 = v11[60];
    if (v47 <= v44)
      goto LABEL_37;
    goto LABEL_42;
  }
LABEL_41:
  v46 = v9 + 82356;
  v47 = v11[60];
  if (v47 <= v44)
  {
LABEL_37:
    v48 = (char)v17;
    if (*v13 < 6)
      goto LABEL_54;
    goto LABEL_43;
  }
LABEL_42:
  v11[60] = v44;
  v47 = v44;
  v48 = (char)v17;
  if (*v13 < 6)
    goto LABEL_54;
LABEL_43:
  if (*(_BYTE *)v46)
  {
    if (v42 <= -10)
      v42 = -10;
    if (v45 <= -10)
      v45 = -10;
    if (v43 >= 10)
      v43 = 10;
    v11[57] = v42;
    v11[58] = v43;
    if (v47 >= 10)
      v49 = 10;
    else
      v49 = v47;
    v11[59] = v45;
    v11[60] = v49;
  }
LABEL_54:
  v50 = v9 + 4 * v48;
  v51 = *(int *)(v50 + 25656);
  if ((int)v51 > 1)
    v52 = (int *)(v50 + 82336);
  else
    v52 = (int *)(*(_QWORD *)(v9 + 25568) + 8 * v48 + 4 * v51);
  v53 = *v52;
  HIWORD(v95) = v53 >> 19;
  LOWORD(v95) = (__int16)v53 >> 3;
  v54 = (unsigned __int16 *)&v94;
  if (a9)
    v54 = a6;
  v93 = *(_DWORD *)v54;
  if (*(_DWORD *)(v46 + 4))
  {
    *a6 = *(_DWORD *)(v46 + 12) >> 3;
    a6[1] = *(_DWORD *)(v46 + 8) >> 3;
  }
  else
  {
    if (v12[3])
      v55 = v96;
    else
      v55 = 0;
    v56 = v20;
    v57 = a3;
    vp9_full_pixel_search(a1, v9, a3, (__int16 *)&v95, v15, *v12, v16, v55, (__int16 *)&v93, a6, 0x7FFFFFFF, 0);
    v20 = v56;
    a3 = v57;
    a8 = v88;
  }
  *(_OWORD *)v22 = v91;
  v59 = (unsigned __int16)(8 * *a6);
  LOWORD(v95) = 8 * *a6;
  v58 = v95;
  HIWORD(v95) = 8 * a6[1];
  v60 = HIWORD(v95);
  v61 = v9 + 25724;
  v62 = *(_QWORD **)(v9 + 25776);
  v63 = 2;
  if ((HIWORD(v95) & 0xFFF8) != HIWORD(v18))
    v63 = 3;
  if (v59 == (unsigned __int16)v18)
    v64 = (HIWORD(v95) & 0xFFF8) != HIWORD(v18);
  else
    v64 = v63;
  v65 = (108
       * (*(_DWORD *)(*v62 + 4 * (__int16)(v95 - v18))
        + *(_DWORD *)(v62[1] + 4 * (__int16)(HIWORD(v95) - HIWORD(v18)))
        + *(_DWORD *)(v61 + 4 * v64))
       + 64) >> 7;
  *a7 = v65;
  v66 = ((a1[4 * *(unsigned __int8 *)(*(_QWORD *)(v9 + 25568) + v48 + 32) + 209145] + (uint64_t)v65) * v11[4] + 256) >> 9;
  if (v12[1995] && a1[208673])
  {
    v67 = (unsigned __int16)(v60 | v58) != 0;
    if (v66 > a8 || !v67)
      goto LABEL_100;
  }
  else if (v66 > a8)
  {
    goto LABEL_100;
  }
  v69 = v12[5];
  if (a9)
  {
    if (v12[145])
      v69 = 2;
    else
      v69 = v69;
  }
  if (v12[6])
  {
    v70 = v12[7];
    v71 = (__int16)*a6;
    if (v71 < 0)
      v71 = -v71;
    if (v70 <= v71)
      goto LABEL_91;
    v72 = (__int16)a6[1];
    if (v72 < 0)
      v72 = -v72;
    if (v70 <= v72)
LABEL_91:
      v73 = (unsigned int *)(v12 + 9);
    else
      v73 = (unsigned int *)(v12 + 8);
    v69 = *v73;
  }
  v74 = v96;
  if (!v12[3])
    v74 = 0;
  (*((void (**)(uint64_t, unsigned __int16 *, int *, _QWORD, _QWORD, int *, uint64_t, _QWORD, _BYTE *, uint64_t, _QWORD *, int *, uint64_t, _QWORD, _QWORD, int))v12
   + 95))(v9, a6, &v94, *v20, *v11, &a1[16 * (unint64_t)a3 + 185116], v69, v12[4], v74, v9 + 25724, v62, &v92, v9 + 4 * v48 + 25692, 0, 0, v12[158]);
  v75 = *(uint64_t **)(v9 + 25776);
  v76 = a6[1] - HIWORD(v94);
  v77 = a6[1] != HIWORD(v94);
  v78 = 2;
  if (v76)
    v78 = 3;
  v79 = *a6 - (unsigned __int16)v94;
  v81 = *v75;
  v80 = v75[1];
  if (v79)
    v77 = v78;
  a8 = v88;
  *a7 = (108
       * (*(_DWORD *)(v81 + 4 * (__int16)v79) + *(_DWORD *)(v80 + 4 * (__int16)v76) + *(_DWORD *)(v61 + 4 * v77))
       + 64) >> 7;
LABEL_100:
  if ((v87 & 1) == 0)
  {
    v82 = v98;
    *(_OWORD *)(v9 + 24944) = v97;
    *(_OWORD *)(v9 + 25080) = v82;
    *(_OWORD *)(v9 + 25216) = v99;
  }
  return v66 <= a8;
}

uint64_t vp9_highbd_post_proc_down_and_across_c(uint64_t result, _OWORD *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 *v16;
  uint64_t v17;
  _OWORD *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  _OWORD *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned __int16 *v50;
  uint64_t i;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (a5 >= 1)
  {
    v7 = 2 * a4;
    if (a6 < 1)
    {
      do
      {
        v61 = *a2;
        *((_DWORD *)a2 - 1) = HIDWORD(v61);
        a2 = (_OWORD *)((char *)a2 + v7);
        --a5;
      }
      while (a5);
    }
    else
    {
      v8 = 0;
      v9 = 2 * a3;
      v10 = 2 * a6;
      v11 = 4 * a3;
      v12 = result + v11;
      v13 = result + v9;
      v14 = result - v9;
      v15 = result - v11;
      v16 = (unsigned __int16 *)a2 + 4;
      v17 = result;
      v18 = a2;
      do
      {
        v20 = 0;
        if (a7 < 0)
        {
          if (a6 < 0x10)
            goto LABEL_79;
          if ((unint64_t)a2 + v7 * v8 - result - v9 * v8 < 0x20)
            goto LABEL_79;
          v21 = 0;
          do
          {
            v22 = *(_OWORD *)(v17 + v21 + 16);
            v23 = &v18[v21 / 0x10];
            *v23 = *(_OWORD *)(v17 + v21);
            v23[1] = v22;
            v21 += 32;
          }
          while ((v10 & 0x1FFFFFFE0) != v21);
          v20 = a6 & 0xFFFFFFF0;
          if (v20 != a6)
          {
LABEL_79:
            do
            {
              *((_WORD *)v18 + v20) = *(_WORD *)(v17 + 2 * v20);
              ++v20;
            }
            while (a6 != v20);
          }
        }
        else
        {
          do
          {
            v40 = *(unsigned __int16 *)(v17 + v20);
            v41 = *(unsigned __int16 *)(v15 + v20);
            v42 = v40 - v41;
            if (v40 - v41 < 0)
              v42 = v41 - v40;
            if (v42 <= a7)
            {
              v43 = *(unsigned __int16 *)(v14 + v20);
              v44 = v40 - v43;
              if (v40 - v43 < 0)
                v44 = v43 - v40;
              if (v44 <= a7)
              {
                v45 = *(unsigned __int16 *)(v13 + v20);
                v46 = v40 - v45;
                if (v40 - v45 < 0)
                  v46 = v45 - v40;
                if (v46 <= a7)
                {
                  v47 = *(unsigned __int16 *)(v12 + v20);
                  v48 = v40 - v47;
                  if (v40 - v47 < 0)
                    v48 = v47 - v40;
                  v49 = (v41 + 4 * v40 + v43 + v45 + v47 + 4) >> 3;
                  if (v48 <= a7)
                    LOWORD(v40) = v49;
                }
              }
            }
            *(_WORD *)((char *)v18 + v20) = v40;
            v20 += 2;
          }
          while (v10 != v20);
        }
        v61 = *v18;
        LOWORD(v61) = *(_WORD *)v18;
        v24 = (unsigned __int16)v61;
        v25 = *((unsigned __int16 *)v18 - 2);
        v26 = (unsigned __int16)v61 - v25;
        if (v26 < 0)
          v26 = v25 - (unsigned __int16)v61;
        if (v26 <= a7)
        {
          v27 = *((unsigned __int16 *)v18 - 1);
          v28 = (unsigned __int16)v61 - v27;
          if (v28 < 0)
            v28 = v27 - (unsigned __int16)v61;
          if ((a7 & 0x80000000) == 0 && v28 <= a7)
          {
            v29 = *((unsigned __int16 *)v18 + 1);
            v30 = (unsigned __int16)v61 - v29;
            if (v30 < 0)
              v30 = v29 - (unsigned __int16)v61;
            if (v30 <= a7)
            {
              v31 = *((unsigned __int16 *)v18 + 2);
              v32 = (unsigned __int16)v61 - v31;
              if (v32 < 0)
                v32 = v31 - (unsigned __int16)v61;
              if (v32 <= a7)
                LOWORD(v61) = (v25 + 4 * (unsigned __int16)v61 + v27 + v29 + v31 + 4) >> 3;
            }
          }
        }
        if (a6 == 1)
        {
          v19 = 0;
        }
        else
        {
          WORD1(v61) = *((_WORD *)v18 + 1);
          v33 = *((unsigned __int16 *)v18 - 1);
          v34 = WORD1(v61) - v33;
          if (v34 < 0)
            v34 = v33 - WORD1(v61);
          if (v34 <= a7)
          {
            v35 = WORD1(v61) - v24;
            if (v35 < 0)
              v35 = v24 - WORD1(v61);
            if ((a7 & 0x80000000) == 0 && v35 <= a7)
            {
              v36 = *((unsigned __int16 *)v18 + 2);
              v37 = WORD1(v61) - v36;
              if (v37 < 0)
                v37 = v36 - WORD1(v61);
              if (v37 <= a7)
              {
                v38 = *((unsigned __int16 *)v18 + 3);
                v39 = WORD1(v61) - v38;
                if (v39 < 0)
                  v39 = v38 - WORD1(v61);
                if (v39 <= a7)
                  WORD1(v61) = (v24 + 4 * WORD1(v61) + v33 + v36 + v38 + 4) >> 3;
              }
            }
          }
          if (a6 == 2)
          {
            v19 = 1;
          }
          else
          {
            v50 = v16;
            for (i = 2; i != a6; ++i)
            {
              v52 = *(v50 - 2);
              *(_WORD *)((unint64_t)&v61 & 0xFFFFFFFFFFFFFFF1 | (2 * (i & 7))) = v52;
              v53 = *(v50 - 4);
              v54 = v52 - v53;
              if (v52 - v53 < 0)
                v54 = v53 - v52;
              if (v54 <= a7)
              {
                v55 = *(v50 - 3);
                v56 = v52 - v55;
                if (v52 - v55 < 0)
                  v56 = v55 - v52;
                if ((a7 & 0x80000000) == 0 && v56 <= a7)
                {
                  v57 = *(v50 - 1);
                  v58 = v52 - v57;
                  if (v52 - v57 < 0)
                    v58 = v57 - v52;
                  if (v58 <= a7)
                  {
                    v59 = *v50;
                    v60 = v52 - v59;
                    if (v52 - v59 < 0)
                      v60 = v59 - v52;
                    if (v60 <= a7)
                      *(_WORD *)((unint64_t)&v61 | (2 * (i & 7))) = (v53
                                                                                        + 4 * v52
                                                                                        + v55
                                                                                        + v57
                                                                                        + v59
                                                                                        + 4) >> 3;
                  }
                }
              }
              ++v50;
              *((_WORD *)v18 + (i - 2)) = *(_WORD *)((unint64_t)&v61 & 0xFFFFFFFFFFFFFFF1 | (2 * ((i - 2) & 7)));
            }
            v19 = i - 1;
          }
        }
        *((_WORD *)v18 + (int)(v19 - 1)) = *(_WORD *)((unint64_t)&v61 | (2 * ((v19 - 1) & 7)));
        *((_WORD *)v18 + v19) = *(_WORD *)((unint64_t)&v61 & 0xFFFFFFFFFFFFFFF1 | (2 * (v19 & 7)));
        v18 = (_OWORD *)((char *)v18 + v7);
        ++v8;
        v12 += v9;
        v13 += v9;
        v14 += v9;
        v15 += v9;
        v17 += v9;
        v16 = (unsigned __int16 *)((char *)v16 + v7);
      }
      while ((_DWORD)v8 != a5);
    }
  }
  return result;
}

void *vp9_deblock(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *__b)
{
  double v7;
  int v8;
  int v10;
  void *result;
  int32x4_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int8x16_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int v20;
  int v21;
  int32x4_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int32x4_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  int8x16_t v35;
  int32x4_t v36;
  int8x16_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _OWORD *v50;
  int v51;

  v7 = (double)a4 * -0.0067 * (double)a4
     + (double)a4 * 0.00006 * (double)a4 * (double)a4
     + (double)a4 * 0.306
     + 0.0065
     + 0.5;
  v8 = (int)v7;
  if ((*(_BYTE *)(a2 + 152) & 8) != 0)
  {
    v38 = *(_QWORD *)(a2 + 64);
    v39 = *(_QWORD *)(a2 + 72);
    v40 = *(_DWORD *)(a2 + 36);
    v41 = *(_DWORD *)(a2 + 16);
    v42 = *(_DWORD *)(a2 + 20);
    v44 = *(_DWORD *)a2;
    v43 = *(_DWORD *)(a2 + 4);
    v45 = *(_DWORD *)(a2 + 24);
    v46 = *(_QWORD *)(a3 + 64);
    v47 = *(_QWORD *)(a3 + 72);
    v48 = *(_DWORD *)(a3 + 16);
    v49 = 2 * *(_QWORD *)(a2 + 56);
    v50 = (_OWORD *)(2 * *(_QWORD *)(a3 + 56));
    v51 = *(_DWORD *)(a3 + 36);
    vp9_highbd_post_proc_down_and_across_c(v49, v50, v41, v48, v43, v44, (int)v7);
    vp9_highbd_post_proc_down_and_across_c(2 * v38, (_OWORD *)(2 * v46), v40, v51, v45, v42, v8);
    return (void *)vp9_highbd_post_proc_down_and_across_c(2 * v39, (_OWORD *)(2 * v47), v40, v51, v45, v42, v8);
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 1308);
    result = memset(__b, (int)v7, 16 * *(int *)(a1 + 1316));
    if (v10 >= 1)
    {
      v20 = 0;
      v21 = 0;
      do
      {
        vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 56) + *(int *)(a2 + 16) * (uint64_t)v20), (int8x8_t *)(*(_QWORD *)(a3 + 56) + *(int *)(a3 + 16) * (uint64_t)v20), *(_DWORD *)(a2 + 16), *(_DWORD *)(a3 + 16), *(_DWORD *)a2, (uint64_t)__b, 16, v12, v13, v14, v15, v16, v17, v18, v19);
        vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 64) + *(int *)(a2 + 36) * (uint64_t)v21), (int8x8_t *)(*(_QWORD *)(a3 + 64) + *(int *)(a3 + 36) * (uint64_t)v21), *(_DWORD *)(a2 + 36), *(_DWORD *)(a3 + 36), *(_DWORD *)(a2 + 20), (uint64_t)__b, 8, v22, v23, v24, v25, v26, v27, v28, v29);
        result = vpx_post_proc_down_and_across_mb_row_neon((int8x8_t *)(*(_QWORD *)(a2 + 72) + *(int *)(a2 + 36) * (uint64_t)v21), (int8x8_t *)(*(_QWORD *)(a3 + 72) + *(int *)(a3 + 36) * (uint64_t)v21), *(_DWORD *)(a2 + 36), *(_DWORD *)(a3 + 36), *(_DWORD *)(a2 + 20), (uint64_t)__b, 8, v30, v31, v32, v33, v34, v35, v36, v37);
        v21 += 8;
        v20 += 16;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint64_t vp9_post_proc_frame(uint64_t a1, _OWORD *a2, int *a3, int a4)
{
  int v4;
  int v5;
  _OWORD *v6;
  int v9;
  _DWORD *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  signed int v18;
  int v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int *v28;
  int v29;
  int v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  double v47;
  _BYTE *v48;
  int v49;
  uint64_t v50;
  double v51;
  double v52;
  signed int v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t *v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  unint64_t v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  void *v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int8x16_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v81;
  int8x16_t *v82;
  uint64_t i;
  int32x4_t v85;
  uint64_t v86;
  int32x4_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  int8x16_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int32x4_t v105;
  int32x4_t v106;
  char v107;
  _OWORD *v108;
  int32x2_t *v109;
  char *v110;
  int8x16_t *v111;
  _QWORD *v112;
  _BYTE v113[16];
  _QWORD v114[32];
  int8x16x2_t v115;
  int8x16x4_t v116;

  v114[30] = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 4728);
  if (v4 <= 52)
    v5 = 2 * v4;
  else
    v5 = 105;
  v6 = *(_OWORD **)(a1 + 328);
  if (!v6)
    return 0xFFFFFFFFLL;
  v9 = *a3;
  if (!*a3)
  {
    result = 0;
    v21 = v6[1];
    *a2 = *v6;
    a2[1] = v21;
    v22 = v6[2];
    v23 = v6[3];
    v24 = v6[5];
    a2[4] = v6[4];
    a2[5] = v24;
    a2[2] = v22;
    a2[3] = v23;
    v25 = v6[6];
    v26 = v6[7];
    v27 = v6[9];
    a2[8] = v6[8];
    a2[9] = v27;
    a2[6] = v25;
    a2[7] = v26;
    return result;
  }
  v12 = (_DWORD *)(a1 + 18148);
  if (*(_DWORD *)(a1 + 18148) == 1)
  {
    *(_DWORD *)(a1 + 18176) = *(_DWORD *)(a1 + 1332);
    *(_DWORD *)(a1 + 18180) = 1;
  }
  if ((v9 & 8) != 0)
  {
    if (*(_QWORD *)(a1 + 18184))
    {
      if (*(_QWORD *)(a1 + 1200))
        goto LABEL_15;
      goto LABEL_11;
    }
    v38 = *(unsigned int *)(a1 + 1412);
    if ((v38 & 0x80000000) != 0
      || (v39 = 68 * v38, (v40 = malloc_type_malloc(68 * v38 + 23, 0x74AD08B5uLL)) == 0)
      || (v41 = ((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v41 - 8) = v40, !v41))
    {
      *(_QWORD *)(a1 + 18184) = 0;
      return 1;
    }
    bzero((void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF0), v39);
    *(_QWORD *)(a1 + 18184) = v41;
    *(_QWORD *)(a1 + 18192) = v41 + 68 * *(int *)(a1 + 1324) + 68;
    if (!*(_QWORD *)(a1 + 1200))
    {
LABEL_11:
      if ((v9 & 3) != 0)
      {
        v13 = (*(_DWORD *)(a1 + 292) + 15) & 0xFFFFFFF0;
        v14 = (*(_DWORD *)(a1 + 296) + 15) & 0xFFFFFFF0;
        v15 = *(_DWORD *)(a1 + 316);
        v16 = *(_DWORD *)(a1 + 320);
        v17 = *(_DWORD *)(a1 + 324);
        v18 = v12[23];
        *(_OWORD *)(a1 + 1112) = 0u;
        *(_OWORD *)(a1 + 1128) = 0u;
        *(_OWORD *)(a1 + 1144) = 0u;
        *(_OWORD *)(a1 + 1160) = 0u;
        *(_OWORD *)(a1 + 1176) = 0u;
        *(_OWORD *)(a1 + 1192) = 0u;
        *(_OWORD *)(a1 + 1208) = 0u;
        *(_OWORD *)(a1 + 1224) = 0u;
        *(_OWORD *)(a1 + 1240) = 0u;
        *(_OWORD *)(a1 + 1256) = 0u;
        if ((vpx_realloc_frame_buffer(a1 + 1112, v13, v14, v15, v16, v17, 160, v18, 0, 0, 0) & 0x80000000) != 0)
          vpx_internal_error(a1, 2, "Failed to allocate MFQE framebuffer");
        memset(*(void **)(a1 + 1200), 128, *(_QWORD *)(a1 + 1064));
      }
    }
  }
LABEL_15:
  if ((vpx_realloc_frame_buffer(a1 + 952, *(_DWORD *)(a1 + 292), *(_DWORD *)(a1 + 296), *(_DWORD *)(a1 + 316), *(_DWORD *)(a1 + 320), *(_DWORD *)(a1 + 324), 32, v12[23], 0, 0, 0) & 0x80000000) != 0)
  {
    vpx_internal_error(a1, 2, "Failed to allocate post-processing buffer");
    v19 = v9 & 3;
    if ((v9 & 3) == 0)
      goto LABEL_22;
LABEL_21:
    if (*(_QWORD *)(a1 + 18208))
      goto LABEL_22;
    v36 = a4;
    if (a4)
    {
      if (a4 < 0)
        goto LABEL_87;
      v37 = a4 + 23;
      if (v37 > 0x10000000000)
        goto LABEL_87;
    }
    else
    {
      v37 = 23;
    }
    v70 = malloc_type_malloc(v37, 0x74AD08B5uLL);
    if (v70)
    {
      v71 = ((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v71 - 8) = v70;
      if (v71)
      {
        bzero((void *)(((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF0), v36);
        *(_QWORD *)(a1 + 18208) = v71;
        v28 = (int *)(a1 + 292);
        v109 = (int32x2_t *)(a1 + 292);
        if ((v9 & 4) == 0)
          goto LABEL_24;
LABEL_23:
        if (*(_QWORD *)(a1 + 18216))
          goto LABEL_24;
        v67 = *v28;
        v68 = v67 + 256;
        if ((_DWORD)v67 == -256)
        {
          v69 = 23;
        }
        else
        {
          if ((int)v67 < -256)
            goto LABEL_92;
          v69 = v67 + 279;
          if ((unint64_t)(v67 + 279) > 0x10000000000)
            goto LABEL_92;
        }
        v72 = malloc_type_malloc(v69, 0x74AD08B5uLL);
        if (v72)
        {
          v73 = ((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v73 - 8) = v72;
          if (v73)
          {
            bzero((void *)(((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF0), v68);
            *(_QWORD *)(a1 + 18216) = v73;
            goto LABEL_24;
          }
        }
LABEL_92:
        *(_QWORD *)(a1 + 18216) = 0;
        return 1;
      }
    }
LABEL_87:
    *(_QWORD *)(a1 + 18208) = 0;
    return 1;
  }
  v19 = v9 & 3;
  if ((v9 & 3) != 0)
    goto LABEL_21;
LABEL_22:
  v28 = (int *)(a1 + 292);
  v109 = (int32x2_t *)(a1 + 292);
  if ((v9 & 4) != 0)
    goto LABEL_23;
LABEL_24:
  v108 = a2;
  if ((v9 & 8) != 0 && *v12 >= 2u)
  {
    if (v12[8])
    {
      if (v12[3] == 8)
      {
        v29 = v12[7];
        if (v29 <= 170 && *(_DWORD *)(a1 + 1332) - v29 >= 20)
        {
          vp9_mfqe(a1);
          if (!v19)
            goto LABEL_131;
          vpx_yv12_copy_frame_c((int *)(a1 + 952), a1 + 1112);
          if ((v9 & 2) != 0 && *(_QWORD *)(a1 + 1200))
          {
            v30 = v5 + 10 * a3[1] - 50;
            v31 = *(void **)(a1 + 18208);
            v32 = a1;
            v33 = a1 + 1112;
            goto LABEL_40;
          }
          if ((v9 & 1) == 0)
          {
LABEL_131:
            v35 = (int *)(a1 + 1112);
LABEL_37:
            vpx_yv12_copy_frame_c(v35, a1 + 952);
            v12[7] = *(_DWORD *)(a1 + 1332);
            v12[8] = 1;
            v107 = v9;
            if ((v9 & 4) == 0)
              goto LABEL_127;
LABEL_53:
            v44 = a3[2];
            if (v12[5] == v5 && v12[6] == v44)
            {
              v45 = v12[13];
              goto LABEL_98;
            }
            v46 = 0;
            v47 = (double)v5 * 0.6 / 63.0 + (double)v44 + 0.5;
            v48 = *(_BYTE **)(a1 + 18216);
            v49 = *(_DWORD *)(a1 + 292);
            v50 = (v49 + 256);
            v51 = 1.0 / (v47 * 2.50662827);
            v112 = v114;
            v52 = v47 * (v47 + v47);
            v53 = -32;
            while (1)
            {
              v54 = (int)(v51 * exp(-((double)v53 * (double)v53) / v52) * 256.0 + 0.5);
              if ((_DWORD)v54)
              {
                if ((int)v54 >= 1)
                {
                  if (v46 <= 256)
                    v55 = 256;
                  else
                    v55 = v46;
                  v56 = (v55 - v46);
                  v57 = v54 - 1;
                  if (v54 - 1 >= v56)
                    v57 = v56;
                  if (v57 >= 0x20)
                  {
                    v59 = v57 + 1;
                    v60 = v59 & 0x1F;
                    if ((v59 & 0x1F) == 0)
                      v60 = 32;
                    v58 = v59 - v60;
                    v61 = vdupq_n_s8(v53);
                    v62 = (int8x16_t *)((char *)v112 + v46);
                    v63 = v58;
                    do
                    {
                      v62[-1] = v61;
                      *v62 = v61;
                      v62 += 2;
                      v63 -= 32;
                    }
                    while (v63);
                  }
                  else
                  {
                    v58 = 0;
                  }
                  v64 = v54 - v58;
                  v65 = &v113[v58 + v46];
                  v66 = v56 - v58;
                  while (v66)
                  {
                    *v65++ = v53;
                    --v66;
                    if (!--v64)
                      goto LABEL_58;
                  }
LABEL_95:
                  if (v49 >= -255)
                  {
                    do
                    {
                      *v48++ = v113[rand()];
                      --v50;
                    }
                    while (v50);
                  }
                  v45 = -v113[0];
                  v12[13] = v45;
                  v12[5] = v5;
                  v12[6] = v44;
LABEL_98:
                  v74 = *(unsigned int *)(a1 + 956);
                  if ((int)v74 < 1)
                    goto LABEL_127;
                  v75 = *(unsigned int *)(a1 + 952);
                  if ((int)v75 <= 0)
                  {
                    do
                    {
                      rand();
                      LODWORD(v74) = v74 - 1;
                    }
                    while ((_DWORD)v74);
                    goto LABEL_127;
                  }
                  v76 = 0;
                  v77 = *(int8x16_t **)(a1 + 1008);
                  v78 = *(int *)(a1 + 968);
                  v112 = *(_QWORD **)(a1 + 18216);
                  v110 = (char *)v112 + v75;
                  v79 = v75 & 0xFFFFFFF8;
                  v111 = v77;
                  v106 = vdupq_n_s32(v45);
                  v105 = vdupq_n_s32(2 * v45);
                  while (2)
                  {
                    v80 = rand();
                    v82 = (int8x16_t *)((char *)v112 + v80);
                    if (v75 >= 8)
                    {
                      if (&v111->i8[v76 * v78] < &v110[v80] && v82 < (int8x16_t *)&v111->i8[v75 + v76 * v78])
                      {
                        i = 0;
                        goto LABEL_113;
                      }
                      v85.i64[0] = 0xFF000000FFLL;
                      v85.i64[1] = 0xFF000000FFLL;
                      if (v75 >= 0x10)
                      {
                        v91 = v75 & 0xFFFFFFF0;
                        v92 = v82;
                        v93 = v77;
                        do
                        {
                          v116.val[2] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F30), v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85),
                                                     (int32x4_t)0);
                          v116.val[1] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F40), v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85),
                                                     (int32x4_t)0);
                          v116.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F50), v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85),
                                                     (int32x4_t)0);
                          v94 = *v92++;
                          v116.val[3] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(*v93, (int8x16_t)xmmword_208F04F20), v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85),
                                                     (int32x4_t)0);
                          v81 = vaddq_s8(v94, vqtbl4q_s8(v116, (int8x16_t)xmmword_208F05040));
                          *v93++ = v81;
                          v91 -= 16;
                        }
                        while (v91);
                        if ((v75 & 0xFFFFFFF0) == v75)
                          goto LABEL_101;
                        i = v75 & 0xFFFFFFF0;
                        v86 = i;
                        if ((v75 & 8) == 0)
                          goto LABEL_113;
                      }
                      else
                      {
                        v86 = 0;
                      }
                      do
                      {
                        v81.i64[0] = *(uint64_t *)((char *)v77->i64 + v86);
                        v87 = (int32x4_t)vqtbl1q_s8(v81, (int8x16_t)xmmword_208F04F50);
                        v81 = (int8x16_t)vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32((int32x4_t)vqtbl1q_s8(v81, (int8x16_t)xmmword_208F04F40), v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85);
                        v115.val[1] = (int8x16_t)vmaxq_s32((int32x4_t)v81, (int32x4_t)0);
                        v115.val[0] = (int8x16_t)vmaxq_s32(vminq_s32(vsubq_s32(vmaxq_s32(vminq_s32(vaddq_s32(vmaxq_s32(vminq_s32(vsubq_s32(v87, v106), v85), (int32x4_t)0), v105), v85), (int32x4_t)0), v106), v85), (int32x4_t)0);
                        *(int8x8_t *)&v77->i8[v86] = vadd_s8(*(int8x8_t *)&v82->i8[v86], (int8x8_t)*(_OWORD *)&vqtbl2q_s8(v115, (int8x16_t)xmmword_208F05050));
                        v86 += 8;
                      }
                      while (v79 != v86);
                      i = v75 & 0x7FFFFFF8;
                      if (v79 != v75)
                        goto LABEL_113;
                    }
                    else
                    {
                      for (i = 0; i != v75; ++i)
                      {
LABEL_113:
                        v88 = v77->u8[i] - v45;
                        if (v88 >= 255)
                          v88 = 255;
                        v89 = (v88 & ~(v88 >> 31)) + 2 * v45;
                        if (v89 >= 255)
                          v89 = 255;
                        v90 = (v89 & ~(v89 >> 31)) - v45;
                        if (v90 >= 255)
                          v90 = 255;
                        v77->i8[i] = v82->i8[i] + (v90 & ~(v90 >> 31));
                      }
                    }
LABEL_101:
                    ++v76;
                    v77 = (int8x16_t *)((char *)v77 + v78);
                    if (v76 == v74)
                      goto LABEL_127;
                    continue;
                  }
                }
                LODWORD(v54) = 0;
LABEL_58:
                v46 += v54;
              }
              if (++v53 == 32)
              {
                if (v46 <= 255)
                  bzero(&v113[v46], (255 - v46) + 1);
                goto LABEL_95;
              }
            }
          }
          v42 = *(void **)(a1 + 18208);
          v43 = a1;
          v34 = a1 + 1112;
          goto LABEL_52;
        }
      }
    }
  }
  if ((v9 & 2) == 0)
  {
    v34 = *(_QWORD *)(a1 + 328);
    if ((v9 & 1) == 0)
    {
      v35 = *(int **)(a1 + 328);
      goto LABEL_37;
    }
    v42 = *(void **)(a1 + 18208);
    v43 = a1;
LABEL_52:
    vp9_deblock(v43, v34, a1 + 952, v5, v42);
    v12[7] = *(_DWORD *)(a1 + 1332);
    v12[8] = 1;
    v107 = v9;
    if ((v9 & 4) == 0)
      goto LABEL_127;
    goto LABEL_53;
  }
  v33 = *(_QWORD *)(a1 + 328);
  v30 = v5 + 10 * a3[1] - 50;
  v31 = *(void **)(a1 + 18208);
  v32 = a1;
LABEL_40:
  deblock_and_de_macro_block(v32, v33, (unsigned int *)(a1 + 952), v30, v31);
  v12[7] = *(_DWORD *)(a1 + 1332);
  v12[8] = 1;
  v107 = v9;
  if ((v9 & 4) != 0)
    goto LABEL_53;
LABEL_127:
  v95 = *(_OWORD *)(a1 + 968);
  *v108 = *(_OWORD *)(a1 + 952);
  v108[1] = v95;
  v96 = *(_OWORD *)(a1 + 984);
  v97 = *(_OWORD *)(a1 + 1000);
  v98 = *(_OWORD *)(a1 + 1032);
  v108[4] = *(_OWORD *)(a1 + 1016);
  v108[5] = v98;
  v108[2] = v96;
  v108[3] = v97;
  v99 = *(_OWORD *)(a1 + 1048);
  v100 = *(_OWORD *)(a1 + 1064);
  v101 = *(_OWORD *)(a1 + 1096);
  v108[8] = *(_OWORD *)(a1 + 1080);
  v108[9] = v101;
  v108[6] = v99;
  v108[7] = v100;
  *(int32x2_t *)&v99 = *v109;
  *(int32x2_t *)v108 = *v109;
  *(int32x2_t *)((char *)v108 + 20) = vshl_s32(*(int32x2_t *)&v99, vneg_s32(v109[3]));
  result = 0;
  if ((v107 & 8) != 0)
  {
    v102 = *(_QWORD *)(a1 + 18184);
    v103 = *(_QWORD *)(a1 + 1416);
    *(_QWORD *)(a1 + 18184) = v103;
    *(_QWORD *)(a1 + 1416) = v102;
    v104 = 68 * *(int *)(a1 + 1324);
    *(_QWORD *)(a1 + 1424) = v102 + v104 + 68;
    *(_QWORD *)(a1 + 18192) = v103 + v104 + 68;
  }
  return result;
}

uint8x8_t *deblock_and_de_macro_block(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, void *a5)
{
  int v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned __int16 *v61;
  int v62;
  int v63;
  int v64;
  char v65;
  uint64_t v66;
  unsigned __int16 *v67;
  int v68;
  unsigned __int16 *v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned __int16 *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  unsigned int *v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[5];

  v110[4] = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 152) & 8) != 0)
  {
    v14 = (int)((double)a4 * -0.0067 * (double)a4
              + (double)a4 * 0.00006 * (double)a4 * (double)a4
              + (double)a4 * 0.306
              + 0.0065
              + 0.5);
    vp9_highbd_post_proc_down_and_across_c(2 * *(_QWORD *)(a2 + 56), (_OWORD *)(2 * *((_QWORD *)a3 + 7)), *(_DWORD *)(a2 + 16), a3[4], *(_DWORD *)(a2 + 4), *(_DWORD *)a2, v14);
    v15 = (int)a3[4];
    v16 = a3[1];
    v108 = 2 * *((_QWORD *)a3 + 7);
    v109 = *a3;
    if (a4 <= 20)
      v17 = 20;
    else
      v17 = a4;
    v18 = 10 * v17;
    v19 = v18 - 500;
    v20 = v18 - 493;
    if (v19 >= 0)
      v20 = v19;
    v21 = (1431655766 * (unint64_t)(((v20 >> 3) + 50) * ((v20 >> 3) + 50))) >> 32;
    if (v16 >= 1 && (int)v109 >= -7)
    {
      v22 = 0;
      v23 = (unsigned __int16 *)(2 * *((_QWORD *)a3 + 7));
      v24 = (unsigned __int16 *)(v108 - 16);
      do
      {
        v25 = 0;
        v26 = *(v23 - 8);
        v27 = *(v23 - 7);
        v28 = v26 * v26 + v27 * v27;
        v29 = v27 + v26;
        v30 = *(v23 - 6);
        v31 = *(v23 - 5);
        v32 = v28 + v30 * v30 + v31 * v31;
        v33 = v29 + v30 + v31;
        v34 = *(v23 - 4);
        v35 = *(v23 - 3);
        v36 = v32 + v34 * v34 + v35 * v35;
        v37 = v34 + v35;
        v38 = *(v23 - 2);
        v39 = v33 + v37 + v38;
        v40 = *(v23 - 1);
        v41 = v36 + v38 * v38 + v40 * v40;
        v42 = *v23;
        v43 = v41 + v42 * v42;
        v44 = v40 + v42;
        v45 = v23[1];
        v46 = v43 + v45 * v45;
        v47 = v44 + v45;
        v48 = v23[2];
        v49 = v39 + v47 + v48;
        v50 = v23[3];
        v51 = v46 + v48 * v48 + v50 * v50;
        v52 = v23[4];
        v53 = v51 + v52 * v52;
        v54 = v50 + v52;
        v55 = v23[5];
        v56 = v53 + v55 * v55;
        v57 = v54 + v55;
        v58 = v23[6];
        v59 = v56 + v58 * v58;
        memset(v110, 0, 30);
        v60 = v49 + v57 + v58;
        v61 = v24;
        do
        {
          v62 = v61[15];
          v63 = *v61;
          v60 += v62 - v63;
          v59 += (v62 - v63) * (v63 + v62);
          v64 = v61[8];
          if (15 * v59 - v60 * v60 < (int)v21)
            LOWORD(v64) = (v64 + v60 + 8) >> 4;
          *((_WORD *)v110 + (v25 & 0xF)) = v64;
          *v61++ = *((_WORD *)v110 + (((_BYTE)v25++ - 8) & 0xF));
        }
        while ((((_DWORD)v109 + 7) & ~(((int)v109 + 7) >> 31)) + 1 != v25);
        v23 += v15;
        ++v22;
        v24 += v15;
      }
      while (v22 != v16);
    }
    v105 = v14;
    v106 = a2;
    v107 = a3;
    v65 = rand();
    if ((int)v109 >= 1 && v16 >= -7)
    {
      v66 = 0;
      v67 = (unsigned __int16 *)v108;
      do
      {
        v68 = 0;
        v69 = (unsigned __int16 *)(v108 + 2 * v66);
        v70 = v69[-8 * v15];
        v71 = v69[-7 * v15];
        v72 = v70 * v70 + v71 * v71;
        v73 = v69[-6 * v15];
        v74 = v71 + v70;
        v75 = v69[-5 * v15];
        v76 = v72 + v73 * v73 + v75 * v75;
        v77 = v74 + v73 + v75;
        v78 = v69[-4 * v15];
        v79 = v69[-3 * v15];
        v80 = v76 + v78 * v78 + v79 * v79;
        v81 = v78 + v79;
        v82 = v69[-2 * v15];
        v83 = v77 + v81 + v82;
        v84 = v69[-v15];
        v85 = v80 + v82 * v82 + v84 * v84;
        v86 = *v69;
        v87 = v85 + v86 * v86;
        v88 = v84 + v86;
        v89 = v69[v15];
        v90 = v69[2 * v15];
        v91 = v83 + v88 + v89 + v90;
        v92 = v69[3 * v15];
        v93 = v87 + v89 * v89 + v90 * v90 + v92 * v92;
        v94 = v69[4 * v15];
        v95 = v69[5 * v15];
        v96 = v92 + v94 + v95;
        LODWORD(v69) = v69[6 * v15];
        v97 = v93 + v94 * v94 + v95 * v95 + (_DWORD)v69 * (_DWORD)v69;
        v98 = v91 + v96 + (_DWORD)v69;
        v99 = v67;
        do
        {
          v100 = v99[7 * (_DWORD)v15];
          v101 = v99[-8 * v15];
          v102 = v101 + v100;
          v103 = v100 - v101;
          v97 += v102 * v103;
          v98 += v103;
          v104 = *v99;
          *((_WORD *)v110 + (v68 & 0xF)) = v104;
          if (15 * v97 - v98 * v98 < (int)v21)
            *((_WORD *)v110 + (v68 & 0xF)) = (v98
                                                          + v104
                                                          + vpx_rv[(v65 & 0x3F)
                                                                 + ((17 * (_BYTE)v66) & 0x7F)
                                                                 + (v68 & 0x7F)]) >> 4;
          v99[-8 * v15] = *((_WORD *)v110 + (((_BYTE)v68++ + 8) & 0xF));
          v99 += v15;
        }
        while (((v16 + 7) & ~((v16 + 7) >> 31)) + 1 != v68);
        ++v66;
        ++v67;
      }
      while (v66 != v109);
    }
    vp9_highbd_post_proc_down_and_across_c(2 * *(_QWORD *)(v106 + 64), (_OWORD *)(2 * *((_QWORD *)v107 + 8)), *(_DWORD *)(v106 + 36), v107[9], *(_DWORD *)(v106 + 24), *(_DWORD *)(v106 + 20), v105);
    return (uint8x8_t *)vp9_highbd_post_proc_down_and_across_c(2 * *(_QWORD *)(v106 + 72), (_OWORD *)(2 * *((_QWORD *)v107 + 9)), *(_DWORD *)(v106 + 36), v107[9], *(_DWORD *)(v106 + 24), *(_DWORD *)(v106 + 20), v105);
  }
  else
  {
    vp9_deblock(a1, a2, (uint64_t)a3, a4, a5);
    if (a4 <= 20)
      v8 = 20;
    else
      v8 = a4;
    v9 = 10 * v8;
    v10 = v9 - 500;
    v11 = v9 - 493;
    if (v10 >= 0)
      v11 = v10;
    v12 = (1431655766 * (unint64_t)(((v11 >> 3) + 50) * ((v11 >> 3) + 50))) >> 32;
    vpx_mbpost_proc_across_ip_neon(*((unsigned __int8 **)a3 + 7), a3[4], a3[1], *a3, (1431655766 * (unint64_t)(((v11 >> 3) + 50) * ((v11 >> 3) + 50))) >> 32);
    return vpx_mbpost_proc_down_neon(*((uint8x8_t **)a3 + 7), a3[4], a3[1], *a3, v12);
  }
}

uint64_t vp9_get_pred_context_comp_ref_p(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v2 = *(_QWORD *)(a2 + 456);
  v3 = *(_QWORD *)(a2 + 464);
  v4 = *(_DWORD *)(a1 + 4 * *(char *)(a1 + 4892) + 4708);
  if (v3)
    v5 = v2 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v9 = *(char *)(v3 + 8);
    v11 = (unsigned __int8 *)(v2 + 8);
    v10 = *(char *)(v2 + 8);
    if (v9 > 0 || v10 >= 1)
    {
      if (v9 < 1 || v10 <= 0)
      {
        if (v9 >= 1)
          v14 = *(_QWORD *)(a2 + 464);
        else
          v14 = *(_QWORD *)(a2 + 456);
        if (*(char *)(v14 + 9) > 0 && !v4)
          ++v14;
        if (*(unsigned __int8 *)(v14 + 8) == *(unsigned __int8 *)(a1 + 4894))
          return 1;
        else
          return 3;
      }
      else
      {
        v15 = v4 == 0;
        v16 = *(char *)(v2 + 9);
        v17 = *(char *)(v3 + 9);
        if (v4)
          v18 = *(_QWORD *)(a2 + 464);
        else
          v18 = v3 + 1;
        v19 = (unsigned __int8 *)(v18 + 8);
        if (v15)
          ++v2;
        if (v17 < 1)
          v19 = (unsigned __int8 *)(v3 + 8);
        v20 = *v19;
        v21 = (unsigned __int8 *)(v2 + 8);
        if (v16 < 1)
          v21 = v11;
        v22 = *v21;
        if (v20 == v22 && *(unsigned __int8 *)(a1 + 4894) == v20)
        {
          return 0;
        }
        else if (v16 > 0 || v17 > 0)
        {
          if (v16 < 1 || v17 <= 0)
          {
            if (v16 >= 1)
              v24 = v22;
            else
              v24 = v20;
            if (v17 >= 1)
              v20 = v22;
            v25 = *(unsigned __int8 *)(a1 + 4894);
            if (v24 != v25 || v20 == v25)
            {
              if (v24 != v25 && v20 == v25)
                return 2;
              else
                return 4;
            }
            else
            {
              return 1;
            }
          }
          else if (v20 == v22)
          {
            return 4;
          }
          else
          {
            return 2;
          }
        }
        else
        {
          v23 = *(unsigned __int8 *)(a1 + 4892);
          if (v20 == v23 && v22 == *(unsigned __int8 *)(a1 + 4893)
            || v22 == v23 && v20 == *(unsigned __int8 *)(a1 + 4893))
          {
            return 4;
          }
          else if (v20 == v22)
          {
            return 3;
          }
          else
          {
            return 1;
          }
        }
      }
    }
    return 2;
  }
  if (!(v3 | v2))
    return 2;
  v6 = v3 ? *(_QWORD *)(a2 + 464) : *(_QWORD *)(a2 + 456);
  v7 = *(char *)(v6 + 8);
  if (v7 < 1)
    return 2;
  if (*(char *)(v6 + 9) < 1)
  {
    if (*(unsigned __int8 *)(a1 + 4894) == v7)
      return 0;
    else
      return 3;
  }
  else
  {
    if (!v4)
      ++v6;
    return 4 * (*(unsigned __int8 *)(v6 + 8) != *(unsigned __int8 *)(a1 + 4894));
  }
}

uint64_t vp9_get_pred_context_single_ref_p1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  int v9;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  int v18;

  v2 = *(_QWORD *)(a1 + 456);
  v1 = *(_QWORD *)(a1 + 464);
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (v1 | v2)
    {
      if (v1)
        v2 = *(_QWORD *)(a1 + 464);
      v4 = *(char *)(v2 + 8);
      if (v4 >= 1)
      {
        v5 = *(char *)(v2 + 9);
        if (v5 <= 0)
          return 4 * (v4 == 1);
        if (v4 != 1)
        {
          v6 = v5 == 1;
LABEL_64:
          if (v6)
            return 2;
          else
            return 1;
        }
      }
    }
    return 2;
  }
  if (*(char *)(v1 + 8) <= 0 && *(char *)(v2 + 8) < 1)
    return 2;
  v8 = *(unsigned __int8 *)(v1 + 8);
  v9 = *(unsigned __int8 *)(v2 + 8);
  if ((char)v8 < 1 || (char)v9 <= 0)
  {
    if ((char)v8 >= 1)
      v2 = *(_QWORD *)(a1 + 464);
    v11 = *(char *)(v2 + 9);
    v12 = *(unsigned __int8 *)(v2 + 8);
    if (v11 <= 0)
      return 4 * (v12 == 1);
    if (v12 == 1)
      return 2;
    v6 = v11 == 1;
    goto LABEL_64;
  }
  v14 = *(char *)(v1 + 9);
  v15 = *(char *)(v2 + 9);
  if (v14 >= 1 && v15 >= 1)
  {
    v6 = v15 == 1 || v9 == 1 || v14 == 1 || v8 == 1;
    goto LABEL_64;
  }
  if (v14 <= 0 && v15 < 1)
    return 2 * (v9 == 1) + 2 * (v8 == 1);
  if (v14 <= 0)
    v18 = v8;
  else
    v18 = v9;
  if (v14 <= 0)
  {
    v8 = v9;
    v14 = v15;
  }
  result = v8 == 1 || v14 == 1;
  if (v18 == 1)
  {
    if ((_DWORD)result)
      return 4;
    else
      return 3;
  }
  return result;
}

uint64_t vp9_get_pred_context_single_ref_p2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  int v18;
  char v19;
  BOOL v21;

  v2 = *(_QWORD *)(a1 + 456);
  v1 = *(_QWORD *)(a1 + 464);
  if (v1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (!(v1 | v2))
      return 2;
    v4 = v1 ? *(_QWORD *)(a1 + 464) : *(_QWORD *)(a1 + 456);
    if (*(char *)(v4 + 8) < 1)
      return 2;
    v5 = *(unsigned __int8 *)(v4 + 8);
    v6 = *(char *)(v4 + 9);
    if (v5 == 1)
    {
      if (v6 < 1)
        return 2;
    }
    else
    {
      if (v6 <= 0)
        return 4 * (v5 == 2);
      if (v5 == 2)
        return 3;
    }
    v21 = v6 == 2;
LABEL_81:
    if (v21)
      return 3;
    else
      return 0;
  }
  if (*(char *)(v1 + 8) <= 0 && *(char *)(v2 + 8) < 1)
    return 2;
  v8 = *(unsigned __int8 *)(v1 + 8);
  v9 = *(unsigned __int8 *)(v2 + 8);
  if ((char)v8 >= 1 && (char)v9 > 0)
  {
    v14 = *(char *)(v1 + 9);
    v15 = *(char *)(v2 + 9);
    if (v14 >= 1 && v15 >= 1)
    {
      if (v8 != v9 || v14 != v15)
        return 2;
      v21 = v14 == 2 || v8 == 2;
      goto LABEL_81;
    }
    if (v14 > 0 || v15 >= 1)
    {
      if (v14 <= 0)
        v18 = v8;
      else
        v18 = v9;
      if (v14 > 0)
      {
        v19 = v14;
      }
      else
      {
        v8 = v9;
        v19 = v15;
      }
      if (v18 == 3)
        return v8 == 2 || v19 == 2;
      if (v18 == 2)
      {
        if (v19 == 2 || v8 == 2)
          return 4;
        else
          return 3;
      }
      else if (v19 == 2 || v8 == 2)
      {
        return 3;
      }
      else
      {
        return 1;
      }
    }
    if (v8 != 1 || v9 != 1)
    {
      if (v8 != 1 && v9 != 1)
        return 2 * (v9 == 2) + 2 * (v8 == 2);
      if (v8 == 1)
        v8 = v9;
      return 4 * (v8 == 2);
    }
    return 3;
  }
  if ((char)v8 >= 1)
    v11 = *(_QWORD *)(a1 + 464);
  else
    v11 = *(_QWORD *)(a1 + 456);
  v12 = *(char *)(v11 + 9);
  v5 = *(unsigned __int8 *)(v11 + 8);
  if (v12 <= 0)
  {
    if (v5 == 1)
      return 3;
    return 4 * (v5 == 2);
  }
  result = 3;
  if (v5 != 2)
  {
    if (v12 == 2)
      return 3;
    else
      return 1;
  }
  return result;
}

int16x4_t vp9_init_quantizer(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned __int16 *v9;
  int v10;
  unsigned int v11;
  int16x4_t result;
  _WORD *v13;
  int16x4_t v14;
  unsigned int v15;
  int16x4_t v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  int16x4_t v20;
  unsigned int v21;
  _DWORD *v22;
  unsigned int v23;
  _WORD *v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  _WORD *v31;
  int v32;
  __int16 v33;
  _DWORD *v34;
  char v35;
  _WORD *v36;
  _WORD *v37;
  int v38;
  __int16 v39;
  _WORD *v40;
  char v41;
  int v42;
  unsigned __int16 *v43;
  unsigned int v44;
  _DWORD *v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  int v55;
  int v56;

  v1 = 0;
  v2 = 0;
  v3 = a1[47464];
  if (v3 == 10)
    v4 = 592;
  else
    v4 = 2368;
  if (v3 == 8)
    v4 = 148;
  v56 = v4;
  v5 = a1[47513];
  v6 = (112 - 16 * v5) / 7;
  v55 = a1[43258];
  v54 = a1[43259];
  v53 = a1[43260];
  v7 = a1 + 1036;
  v8 = a1 + 40876;
  do
  {
    switch(v3)
    {
      case 8:
        v24 = &dc_qlookup_0;
        goto LABEL_18;
      case 12:
        v24 = &dc_qlookup_12;
        goto LABEL_18;
      case 10:
        v24 = &dc_qlookup_10;
LABEL_18:
        v25 = v24[v2];
        goto LABEL_20;
    }
    v25 = -1;
LABEL_20:
    if (v56 <= v25)
      v26 = 80;
    else
      v26 = 84;
    if (v1 * 4)
    {
      v27 = 48;
    }
    else
    {
      v26 = 64;
      v27 = 64;
    }
    if (v5 <= 0)
      v28 = v27;
    else
      v28 = 64 - v6;
    v29 = v6 + 64;
    if (v1 != 0 && v5 > 0)
    {
      v30 = 64 - v6;
    }
    else
    {
      v29 = v26;
      v30 = v27;
    }
    switch(v3)
    {
      case 8:
        v31 = &dc_qlookup_0;
        break;
      case 12:
        v31 = &dc_qlookup_12;
        break;
      case 10:
        v31 = &dc_qlookup_10;
        break;
      default:
        v33 = -1;
        goto LABEL_42;
    }
    v32 = v55 + v2;
    if (v55 + (int)v2 >= 255)
      v32 = 255;
    v33 = v31[v32 & ~(v32 >> 31)];
LABEL_42:
    v34 = &a1[v1];
    v35 = __clz(v33) ^ 0x1F;
    *((_WORD *)v34 + 24) = (0x10000 << v35) / v33 + 1;
    v36 = &v7[v1];
    v36[6144] = 0x10000 / v33;
    v36[10240] = (v28 * v33) >> 7;
    *((_WORD *)v34 + 2072) = 1 << (16 - v35);
    v36[2048] = (v29 * v33 + 64) >> 7;
    v36[4096] = (v30 * v33) >> 7;
    LOWORD(v8[v1]) = v33;
    switch(v3)
    {
      case 8:
        v37 = &dc_qlookup_0;
        break;
      case 12:
        v37 = &dc_qlookup_12;
        break;
      case 10:
        v37 = &dc_qlookup_10;
        break;
      default:
        v39 = -1;
        goto LABEL_52;
    }
    v38 = v54 + v2;
    if (v54 + (int)v2 >= 255)
      v38 = 255;
    v39 = v37[v38 & ~(v38 >> 31)];
LABEL_52:
    v40 = &v7[v1];
    v41 = __clz(v39) ^ 0x1F;
    v40[14336] = (0x10000 << v41) / v39 + 1;
    v40[0x4000] = 1 << (16 - v41);
    v40[0x2000] = 0x10000 / v39;
    v40[12288] = (v28 * v39) >> 7;
    v40[18432] = (v29 * v39 + 64) >> 7;
    v40[20480] = (v30 * v39) >> 7;
    LOWORD(v8[v1 + 1024]) = v39;
    if (v1 * 4)
      v42 = 42;
    else
      v42 = 64;
    if (v5 > 0)
      v42 = 64 - v6;
    switch(v3)
    {
      case 8:
        v43 = (unsigned __int16 *)&ac_qlookup_0;
        goto LABEL_63;
      case 12:
        v43 = (unsigned __int16 *)&ac_qlookup_12;
        goto LABEL_63;
      case 10:
        v43 = (unsigned __int16 *)&ac_qlookup_10;
LABEL_63:
        v44 = v43[v2];
        goto LABEL_65;
    }
    v44 = 0xFFFF;
LABEL_65:
    v45 = &a1[v1];
    v46 = __clz((__int16)v44) ^ 0x1F;
    v47 = (0x10000 << v46) / (__int16)v44 + 1;
    *((_WORD *)v45 + 25) = (0x10000 << v46) / (__int16)v44 + 1;
    v48 = 1 << (16 - v46);
    v49 = 0x10000 / (__int16)v44;
    HIWORD(a1[v1 + 4108]) = v49;
    v50 = (v42 * (__int16)v44) >> 7;
    HIWORD(a1[v1 + 6156]) = v50;
    *((_WORD *)v45 + 2073) = v48;
    v51 = (v29 * (__int16)v44 + 64) >> 7;
    HIWORD(v7[v1 + 1024]) = v51;
    v52 = (v30 * (__int16)v44) >> 7;
    HIWORD(a1[v1 + 3084]) = v52;
    HIWORD(v8[v1]) = v44;
    switch(v3)
    {
      case 8:
        v9 = (unsigned __int16 *)&ac_qlookup_0;
        break;
      case 12:
        v9 = (unsigned __int16 *)&ac_qlookup_12;
        break;
      case 10:
        v9 = (unsigned __int16 *)&ac_qlookup_10;
        break;
      default:
        v11 = 0xFFFF;
        goto LABEL_11;
    }
    v10 = v53 + v2;
    if (v53 + (int)v2 >= 255)
      v10 = 255;
    v11 = v9[v10 & ~(v10 >> 31)];
LABEL_11:
    result = vdup_n_s16(v44);
    v13 = &v8[v1];
    v13[6] = v44;
    v13[7] = v44;
    v13[2053] = v11;
    v13[2054] = v11;
    v13[2055] = v11;
    v14 = vdup_n_s16(v49);
    LOWORD(a1[v1 + 4111]) = v49;
    HIWORD(a1[v1 + 4111]) = v49;
    v15 = __clz((__int16)v11) ^ 0x1F;
    LOWORD(a1[v1 + 6159]) = v50;
    HIWORD(a1[v1 + 6159]) = v50;
    v16 = vdup_n_s16(v52);
    HIWORD(a1[v1 + 8206]) = (0x10000 << v15) / (__int16)v11 + 1;
    LOWORD(a1[v1 + 3087]) = v52;
    HIWORD(a1[v1 + 3087]) = v52;
    v17 = &a1[v1];
    *((_WORD *)v17 + 30) = v47;
    LOWORD(a1[v1 + 8207]) = (0x10000 << v15) / (__int16)v11 + 1;
    *((_WORD *)v17 + 31) = v47;
    HIWORD(a1[v1 + 8207]) = (0x10000 << v15) / (__int16)v11 + 1;
    *((_WORD *)v17 + 2078) = v48;
    *((_WORD *)v17 + 2079) = v48;
    HIWORD(a1[v1 + 5134]) = 0x10000 / (__int16)v11;
    LOWORD(a1[v1 + 5135]) = 0x10000 / (__int16)v11;
    HIWORD(a1[v1 + 5135]) = 0x10000 / (__int16)v11;
    v18 = (v42 * (__int16)v11) >> 7;
    HIWORD(a1[v1 + 7182]) = v18;
    LOWORD(a1[v1 + 7183]) = v18;
    *(int16x4_t *)(v17 + 13) = vdup_n_s16(v47);
    HIWORD(a1[v1 + 7183]) = v18;
    v19 = 1 << (16 - v15);
    v20 = vdup_n_s16(v19);
    HIWORD(a1[v1 + 9230]) = v19;
    LOWORD(a1[v1 + 9231]) = v19;
    HIWORD(a1[v1 + 9231]) = v19;
    v21 = (v29 * (__int16)v11 + 64) >> 7;
    v22 = &v7[v1];
    HIWORD(a1[v1 + 10254]) = v21;
    *((_WORD *)v22 + 2054) = v51;
    *((_WORD *)v22 + 2055) = v51;
    LOWORD(a1[v1 + 10255]) = v21;
    HIWORD(a1[v1 + 10255]) = v21;
    v23 = (v30 * (__int16)v11) >> 7;
    HIWORD(a1[v1 + 11278]) = v23;
    LOWORD(a1[v1 + 11279]) = v23;
    HIWORD(a1[v1 + 11279]) = v23;
    *(int16x4_t *)((char *)&a1[v1 + 8204] + 2) = vdup_n_s16((0x10000 << v15) / (__int16)v11 + 1);
    *(int16x4_t *)((char *)&a1[v1 + 5132] + 2) = vdup_n_s16(0x10000 / (__int16)v11);
    *(int16x4_t *)((char *)&a1[v1 + 7180] + 2) = vdup_n_s16(v18);
    *(int16x4_t *)((char *)&a1[v1 + 9228] + 2) = v20;
    *(int16x4_t *)((char *)&a1[v1 + 10252] + 2) = vdup_n_s16(v21);
    *(int16x4_t *)((char *)&a1[v1 + 11276] + 2) = vdup_n_s16(v23);
    *(int16x4_t *)((char *)&a1[v1 + 41900] + 2) = vdup_n_s16(v11);
    *(int16x4_t *)&a1[v1 + 4109] = v14;
    *(int16x4_t *)&a1[v1 + 6157] = vdup_n_s16(v50);
    *(int16x4_t *)&a1[v1 + 2061] = vdup_n_s16(v51);
    *(int16x4_t *)&a1[v1 + 3085] = v16;
    *(int16x4_t *)(v22 + 1) = vdup_n_s16(v48);
    ++v2;
    *(int16x4_t *)&a1[v1 + 40877] = result;
    v1 += 4;
  }
  while (v1 != 1024);
  return result;
}

uint64_t vp9_init_plane_quantizers(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 *v22;
  __int16 *v23;
  __int16 *v24;
  __int16 *v25;
  int v26;
  __int16 *v27;
  int v28;
  __int16 *v29;
  __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;

  v4 = a1 + 850432;
  v5 = a1 + 176472;
  v6 = (_DWORD *)(a1 + 172972);
  v7 = *(char *)(**(_QWORD **)(a2 + 25360) + 4);
  v8 = *(_DWORD *)(a1 + 173028);
  if (*(_BYTE *)(a1 + 176472) && (*(_DWORD *)(a1 + 4 * v7 + 176552) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 176475) == 1)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 173028);
    v10 = v9 + *(__int16 *)(a1 + 8 * v7 + 176488);
    if (v10 >= 255)
      v10 = 255;
    v8 = v10 & ~(v10 >> 31);
  }
  v11 = (int *)(a2 + 25584);
  result = vp9_compute_rd_mult_based_on_qindex(a1, *(_DWORD *)(a1 + 173032) + v8);
  if (!*(_DWORD *)(v4 + 184) || (*(_BYTE *)(v4 + 200) & 4) == 0 || (v13 = *(_DWORD *)(v4 + 188), v13 == -1))
  {
    if (*(_DWORD *)(v5 + 13604) == 2)
    {
      v13 = result;
      if (*v6)
      {
        v14 = a1 + 4 * *(unsigned __int8 *)(a1 + 742180);
        v15 = *(unsigned int *)(v14 + 743192);
        v16 = (int *)(v14 + 745964);
        if (!*(_DWORD *)v4)
          v16 = (int *)(a1 + 738480);
        v17 = *v16;
        v18 = v17 <= 1599;
        v19 = v17 / 100;
        if (!v18)
          v19 = 15;
        v20 = rd_frame_type_factor[v15] * (uint64_t)(int)result;
        v13 = ((unint64_t)((v20 >> 7) * rd_boost_factor[v19]) >> 7) + (v20 >> 7);
      }
    }
    else
    {
      v13 = result;
    }
  }
  v21 = 16 * v8;
  *(_QWORD *)(a2 + 8248) = a1 + 48 + v21;
  v22 = (__int16 *)(a1 + v21);
  *(_QWORD *)(a2 + 8240) = v22 + 8216;
  *(_QWORD *)(a2 + 8232) = v22 + 12312;
  *(_QWORD *)(a2 + 8256) = v22 + 2072;
  *(_QWORD *)(a2 + 8264) = v22 + 4120;
  *(_QWORD *)(a2 + 8272) = v22 + 6168;
  *(_QWORD *)(a2 + 25032) = v22 + 81752;
  *(_QWORD *)(a2 + 8280) = (v22[4120] * v22[4120]);
  *(_QWORD *)(a2 + 8288) = (v22[4121] * v22[4121]);
  v23 = v22 + 16408;
  v24 = v22 + 10264;
  v25 = v22 + 20504;
  v26 = v22[20504];
  v27 = v22 + 14360;
  v28 = v22[20505];
  v29 = v22 + 18456;
  *(_QWORD *)(a2 + 16552) = v22 + 16408;
  v30 = v22 + 22552;
  *(_QWORD *)(a2 + 16544) = v22 + 10264;
  v22 += 83800;
  *(_QWORD *)(a2 + 16536) = v27;
  v31 = (v26 * v26);
  v32 = (v28 * v28);
  *(_QWORD *)(a2 + 16560) = v29;
  *(_QWORD *)(a2 + 16568) = v25;
  *(_QWORD *)(a2 + 16576) = v30;
  *(_QWORD *)(a2 + 25168) = v22;
  *(_QWORD *)(a2 + 16584) = v31;
  *(_QWORD *)(a2 + 16592) = v32;
  *(_QWORD *)(a2 + 24856) = v23;
  *(_QWORD *)(a2 + 24848) = v24;
  *(_QWORD *)(a2 + 24840) = v27;
  *(_QWORD *)(a2 + 24864) = v29;
  *(_QWORD *)(a2 + 24872) = v25;
  *(_QWORD *)(a2 + 24880) = v30;
  *(_QWORD *)(a2 + 25304) = v22;
  *(_QWORD *)(a2 + 24888) = v31;
  *(_QWORD *)(a2 + 24896) = v32;
  if (*(_BYTE *)v5)
    v33 = (*(_DWORD *)(a1 + 4 * v7 + 176552) >> 3) & 1;
  else
    v33 = 0;
  *v11 = v33;
  v11[4] = v8;
  if (v13 >= 0x40)
    v34 = v13 >> 6;
  else
    v34 = (v13 >> 6) + 1;
  v11[9] = v34;
  v35 = *(_DWORD *)(v5 + 13384);
  if (v35 == 8)
  {
    v36 = (char *)&sad_per_bit4lut_8;
    v37 = (char *)&sad_per_bit16lut_8;
  }
  else if (v35 == 10)
  {
    v36 = (char *)&sad_per_bit4lut_10;
    v37 = (char *)&sad_per_bit16lut_10;
  }
  else
  {
    v36 = (char *)&sad_per_bit4lut_12;
    v37 = (char *)&sad_per_bit16lut_12;
  }
  v38 = 4 * v8;
  v11[10] = *(_DWORD *)&v37[v38];
  v11[11] = *(_DWORD *)&v36[v38];
  return result;
}

__int16 vp9_quantize_fp_neon@<H0>(int16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x4_t *a4@<X3>, int32x4_t *a5@<X4>, int16x8_t *a6@<X5>, __int16 *a7@<X6>, uint64_t a8@<X7>)
{
  int8x16_t *v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int16x8_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int32x4_t *v20;
  int16x8_t v21;
  int32x4_t *v22;
  int8x16_t *v23;
  int16x8_t *v24;
  uint64_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int16x8_t v31;
  int8x16_t v32;
  __int16 result;

  v8 = *(int8x16_t **)(a8 + 8);
  v9 = *(int16x8_t *)*(_QWORD *)(a3 + 8232);
  v10 = *(int16x8_t *)*(_QWORD *)(a3 + 8240);
  v11 = *a6;
  v12 = vuzp1q_s16(*a1, a1[1]);
  v13 = (int8x16_t)vcltzq_s16(v12);
  v14 = vqaddq_s16(vabsq_s16(v12), v9);
  v15 = (int8x16_t)vuzp2q_s16((int16x8_t)vmull_s16(*(int16x4_t *)v14.i8, *(int16x4_t *)v10.i8), (int16x8_t)vmull_high_s16(v14, v10));
  v16 = (int8x16_t)vceqzq_s16((int16x8_t)v15);
  v17 = vsubq_s16((int16x8_t)veorq_s8(v15, v13), (int16x8_t)v13);
  v18 = vmull_high_s16(v17, *a6);
  *a5 = vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)a6->i8);
  a5[1] = v18;
  *a4 = vmovl_s16(*(int16x4_t *)v17.i8);
  a4[1] = vmovl_high_s16(v17);
  v13.i64[0] = -1;
  v13.i64[1] = -1;
  v19 = vmaxq_s16((int16x8_t)vbicq_s8(*v8, v16), (int16x8_t)v13);
  if (a2 >= 9)
  {
    v20 = a5 + 3;
    v21 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
    v22 = a4 + 3;
    v23 = v8 + 1;
    v24 = a1 + 3;
    v25 = 8;
    do
    {
      v26 = vuzp1q_s16(v24[-1], *v24);
      v27 = vabsq_s16(v26);
      v28 = (int8x16_t)vcltzq_s16(v26);
      v29 = vqaddq_s16(v27, v21);
      v30 = (int8x16_t)vuzp2q_s16((int16x8_t)vmull_lane_s16(*(int16x4_t *)v29.i8, *(int16x4_t *)v10.i8, 1), (int16x8_t)vmull_high_lane_s16(v29, *(int16x4_t *)v10.i8, 1));
      v31 = vsubq_s16((int16x8_t)veorq_s8(v30, v28), (int16x8_t)v28);
      v20[-1] = vmull_lane_s16(*(int16x4_t *)v31.i8, *(int16x4_t *)v11.i8, 1);
      *v20 = vmull_high_lane_s16(v31, *(int16x4_t *)v11.i8, 1);
      v22[-1] = vmovl_s16(*(int16x4_t *)v31.i8);
      *v22 = vmovl_high_s16(v31);
      v32 = *v23++;
      v25 += 8;
      v19 = vmaxq_s16(v19, (int16x8_t)vbicq_s8(v32, (int8x16_t)vceqzq_s16((int16x8_t)v30)));
      v20 += 2;
      v22 += 2;
      v24 += 2;
    }
    while (v25 < a2);
  }
  result = vmaxvq_s16(v19);
  *a7 = result;
  return result;
}

__int16 vp9_quantize_fp_32x32_neon@<H0>(int16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x4_t *a4@<X3>, int32x4_t *a5@<X4>, int16x8_t *a6@<X5>, __int16 *a7@<X6>, uint64_t a8@<X7>)
{
  unsigned int v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t *v13;
  int16x8_t v14;
  int8x16_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int16x8_t v19;
  uint32x4_t v20;
  int32x4_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t *v28;
  int32x4_t *v29;
  int32x4_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int16x8_t v35;
  int8x16_t v36;
  __int16 result;

  v8 = 0;
  v9 = vrshrq_n_s16(*(int16x8_t *)*(_QWORD *)(a3 + 8232), 1uLL);
  v10 = *(int16x8_t *)*(_QWORD *)(a3 + 8240);
  v11 = *a6;
  v12 = vshrq_n_s16(*a6, 2uLL);
  v13 = *(int8x16_t **)(a8 + 8);
  v14 = vuzp1q_s16(*a1, a1[1]);
  v15 = (int8x16_t)vcltzq_s16(v14);
  v16 = vabsq_s16(v14);
  v17.i64[0] = -1;
  v17.i64[1] = -1;
  v18 = (int8x16_t)vqdmulhq_s16((int16x8_t)vbicq_s8((int8x16_t)vqaddq_s16(v16, v9), (int8x16_t)vcgtq_s16(v12, v16)), v10);
  v19 = vsubq_s16((int16x8_t)veorq_s8(v18, v15), (int16x8_t)v15);
  v20 = (uint32x4_t)vmull_s16(*(int16x4_t *)v19.i8, *(int16x4_t *)a6->i8);
  v21 = vshrq_n_s32(vmlal_high_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_high_s16(v19, *a6), 0x1FuLL), v19, *a6), 1uLL);
  *a5 = vshrq_n_s32((int32x4_t)vsraq_n_u32(v20, v20, 0x1FuLL), 1uLL);
  a5[1] = v21;
  *a4 = vmovl_s16(*(int16x4_t *)v19.i8);
  a4[1] = vmovl_high_s16(v19);
  v23 = *v13;
  v22 = v13 + 1;
  v24 = (int16x8_t)vbicq_s8(v23, (int8x16_t)vceqzq_s16((int16x8_t)v18));
  v25 = vdupq_lane_s16(*(int16x4_t *)v9.i8, 1);
  v26 = vmaxq_s16(v24, v17);
  v27 = vdupq_lane_s16(*(int16x4_t *)v12.i8, 1);
  v28 = a1 + 3;
  v29 = a4 + 3;
  v30 = a5 + 3;
  do
  {
    v31 = vuzp1q_s16(v28[-1], *v28);
    v32 = vabsq_s16(v31);
    v33 = (int8x16_t)vcltzq_s16(v31);
    v34 = (int8x16_t)vqdmulhq_lane_s16((int16x8_t)vbicq_s8((int8x16_t)vqaddq_s16(v32, v25), (int8x16_t)vcgtq_s16(v27, v32)), *(int16x4_t *)v10.i8, 1);
    v35 = vsubq_s16((int16x8_t)veorq_s8(v34, v33), (int16x8_t)v33);
    v30[-1] = vshrq_n_s32(vmlal_lane_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_lane_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v11.i8, 1), 0x1FuLL), *(int16x4_t *)v35.i8, *(int16x4_t *)v11.i8, 1), 1uLL);
    *v30 = vshrq_n_s32(vmlal_high_lane_s16((int32x4_t)vshrq_n_u32((uint32x4_t)vmull_high_lane_s16(v35, *(int16x4_t *)v11.i8, 1), 0x1FuLL), v35, *(int16x4_t *)v11.i8, 1), 1uLL);
    v30 += 2;
    v29[-1] = vmovl_s16(*(int16x4_t *)v35.i8);
    *v29 = vmovl_high_s16(v35);
    v36 = *v22++;
    v26 = vmaxq_s16(v26, (int16x8_t)vbicq_s8(v36, (int8x16_t)vceqzq_s16((int16x8_t)v34)));
    v28 += 2;
    v29 += 2;
    v8 += 8;
  }
  while (v8 < 0x3F8);
  result = vmaxvq_s16(v26);
  *a7 = result;
  return result;
}

__int16 vp9_highbd_quantize_fp_neon@<H0>(int32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x4_t *a4@<X3>, int32x4_t *a5@<X4>, int16x4_t *a6@<X5>, __int16 *a7@<X6>, uint64_t a8@<X7>)
{
  int16x4_t v8;
  int16x4_t v9;
  int32x2_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int16x8_t v26;
  uint64_t v27;
  int32x4_t *v28;
  int32x4_t *v29;
  int32x4_t *v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  __int16 result;

  v8 = *a6;
  v9 = **(int16x4_t **)(a3 + 8232);
  v10 = (int32x2_t)vmovl_s16(v9).u64[0];
  v11 = vshll_n_s16(**(int16x4_t **)(a3 + 8240), 0xFuLL);
  v12 = vmovl_s16(*a6);
  v13 = *(int8x16_t **)(a8 + 8);
  v14 = vcltzq_s32(*a1);
  v15 = vqdmulhq_s32(vaddw_s16(vabsq_s32(*a1), v9), v11);
  *a4 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v15, (int8x16_t)v14), v14);
  *a5 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vmulq_s32(v15, v12), (int8x16_t)v14), v14);
  v16 = (int16x8_t)vceqzq_s32(v15);
  v17 = vdupq_lane_s32(v10, 1);
  v18 = vdup_lane_s16(v8, 1);
  v19 = vdupq_lane_s32(*(int32x2_t *)v12.i8, 1);
  v20 = a1[1];
  v21 = vcltzq_s32(v20);
  v22 = vqdmulhq_lane_s32(vaddq_s32(vabsq_s32(v20), v17), *(int32x2_t *)v11.i8, 1);
  a4[1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v22, (int8x16_t)v21), v21);
  a5[1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vmulq_s32(v22, vmovl_s16(v18)), (int8x16_t)v21), v21);
  v23 = (int8x16_t)vuzp1q_s16(v16, (int16x8_t)vceqzq_s32(v22));
  v25 = *v13;
  v24 = v13 + 1;
  v16.i64[0] = -1;
  v16.i64[1] = -1;
  v26 = vmaxq_s16((int16x8_t)vbicq_s8(v25, v23), v16);
  v27 = a2 - 8;
  v28 = a5 + 3;
  v29 = a4 + 3;
  v30 = a1 + 3;
  do
  {
    v31 = v30[-1];
    v32 = vcltzq_s32(v31);
    v33 = vqdmulhq_lane_s32(vaddq_s32(vabsq_s32(v31), v17), *(int32x2_t *)v11.i8, 1);
    v29[-1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v33, (int8x16_t)v32), v32);
    v28[-1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vmulq_s32(v33, v19), (int8x16_t)v32), v32);
    v34 = *v30;
    v30 += 2;
    v35 = vcltzq_s32(v34);
    v36 = vqdmulhq_lane_s32(vaddq_s32(vabsq_s32(v34), v17), *(int32x2_t *)v11.i8, 1);
    *v29 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v36, (int8x16_t)v35), v35);
    v29 += 2;
    *v28 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vmulq_s32(v36, v19), (int8x16_t)v35), v35);
    v28 += 2;
    v37 = *v24++;
    v26 = vmaxq_s16(v26, (int16x8_t)vbicq_s8(v37, (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v33), (int16x8_t)vceqzq_s32(v36))));
    v27 -= 8;
  }
  while (v27);
  result = vmaxvq_s16(v26);
  *a7 = result;
  return result;
}

__int16 vp9_highbd_quantize_fp_32x32_neon@<H0>(int32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x4_t *a4@<X3>, int32x4_t *a5@<X4>, int16x4_t *a6@<X5>, __int16 *a7@<X6>, uint64_t a8@<X7>)
{
  int16x4_t v8;
  int16x4_t v9;
  int32x2_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int8x16_t *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int8x16_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  int8x16_t v30;
  int16x8_t v31;
  uint64_t v32;
  int32x4_t *v33;
  int32x4_t *v34;
  int32x4_t *v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  __int16 result;

  v8 = *a6;
  v9 = vqrdmulh_s16(**(int16x4_t **)(a3 + 8232), (int16x4_t)0x4000400040004000);
  v10 = (int32x2_t)vmovl_s16(v9).u64[0];
  v11 = vshll_n_s16(**(int16x4_t **)(a3 + 8240), 0xFuLL);
  v12 = vmovl_s16(*a6);
  v13 = *(int8x16_t **)(a8 + 8);
  v14 = vcltzq_s32(*a1);
  v15 = vabsq_s32(*a1);
  v16 = vaddw_s16(v15, v9);
  v17 = vqdmulhq_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v16, v16), (int8x16_t)vcgtq_s32(v12, vshlq_n_s32(v15, 2uLL))), v11);
  *a4 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v17, (int8x16_t)v14), v14);
  *a5 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshrq_n_s32(vmulq_s32(v17, v12), 1uLL), (int8x16_t)v14), v14);
  v18 = (int16x8_t)vceqzq_s32(v17);
  v19 = vdupq_lane_s32(v10, 1);
  v20 = vmovl_s16(vdup_lane_s16(v8, 1));
  v21 = vdupq_lane_s32(*(int32x2_t *)v12.i8, 1);
  v22 = a1[1];
  v23 = vcltzq_s32(v22);
  v24 = vabsq_s32(v22);
  v25 = (int8x16_t)vcgtq_s32(v21, vshlq_n_s32(v24, 2uLL));
  v26 = vaddq_s32(v24, v19);
  v27 = vqdmulhq_lane_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v26, v26), v25), *(int32x2_t *)v11.i8, 1);
  a4[1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v27, (int8x16_t)v23), v23);
  a5[1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshrq_n_s32(vmulq_s32(v27, v20), 1uLL), (int8x16_t)v23), v23);
  v28 = (int8x16_t)vuzp1q_s16(v18, (int16x8_t)vceqzq_s32(v27));
  v30 = *v13;
  v29 = v13 + 1;
  v18.i64[0] = -1;
  v18.i64[1] = -1;
  v31 = vmaxq_s16((int16x8_t)vbicq_s8(v30, v28), v18);
  v32 = a2 - 8;
  v33 = a5 + 3;
  v34 = a4 + 3;
  v35 = a1 + 3;
  do
  {
    v36 = v35[-1];
    v37 = vcltzq_s32(v36);
    v38 = vabsq_s32(v36);
    v39 = (int8x16_t)vcgtq_s32(v21, vshlq_n_s32(v38, 2uLL));
    v40 = vaddq_s32(v38, v19);
    v41 = vqdmulhq_lane_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v40, v40), v39), *(int32x2_t *)v11.i8, 1);
    v34[-1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v41, (int8x16_t)v37), v37);
    v33[-1] = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshrq_n_s32(vmulq_s32(v41, v21), 1uLL), (int8x16_t)v37), v37);
    v42 = *v35;
    v35 += 2;
    v43 = vcltzq_s32(v42);
    v44 = vabsq_s32(v42);
    v45 = (int8x16_t)vcgtq_s32(v21, vshlq_n_s32(v44, 2uLL));
    v46 = vaddq_s32(v44, v19);
    v47 = vqdmulhq_lane_s32((int32x4_t)vbicq_s8((int8x16_t)vaddq_s32(v46, v46), v45), *(int32x2_t *)v11.i8, 1);
    *v34 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)v47, (int8x16_t)v43), v43);
    v34 += 2;
    *v33 = vsubq_s32((int32x4_t)veorq_s8((int8x16_t)vshrq_n_s32(vmulq_s32(v47, v21), 1uLL), (int8x16_t)v43), v43);
    v33 += 2;
    v48 = *v29++;
    v31 = vmaxq_s16(v31, (int16x8_t)vbicq_s8(v48, (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v41), (int16x8_t)vceqzq_s32(v47))));
    v32 -= 8;
  }
  while (v32);
  result = vmaxvq_s16(v31);
  *a7 = result;
  return result;
}

uint64_t init_minq_luts(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  double v8;
  uint64_t i;
  _WORD *v10;
  int v11;
  __int16 v12;
  double v13;
  double v14;
  uint64_t v15;
  __int16 *v16;
  double v17;
  double v18;
  uint64_t v19;
  __int16 *v20;
  double v21;
  uint64_t v22;
  __int16 *v23;
  double v24;
  uint64_t v25;
  __int16 *v26;
  double v27;
  uint64_t v28;
  __int16 *v29;
  __int16 *v30;

  v7 = 0;
  v8 = 0.015625;
  if (a7 == 10)
    v8 = 0.0625;
  if (a7 == 8)
    v8 = 0.25;
  do
  {
    switch(a7)
    {
      case 8:
        v10 = &ac_qlookup_0;
        goto LABEL_14;
      case 12:
        v10 = &ac_qlookup_12;
        goto LABEL_14;
      case 10:
        v10 = &ac_qlookup_10;
LABEL_14:
        if ((int)v7 >= 255)
          v11 = 255;
        else
          v11 = v7;
        v12 = v10[v11 & ~(v11 >> 31)];
        goto LABEL_19;
    }
    v12 = -1;
LABEL_19:
    v13 = v8 * (double)v12;
    v14 = v13 * ((v13 * 0.000001 + -0.0004) * v13 + 0.15);
    if (v14 >= v13)
      v14 = v8 * (double)v12;
    if (v14 > 2.0)
    {
      v15 = 0;
      while (1)
      {
        switch(a7)
        {
          case 8:
            v16 = (__int16 *)&ac_qlookup_0;
            break;
          case 12:
            v16 = (__int16 *)&ac_qlookup_12;
            break;
          case 10:
            v16 = (__int16 *)&ac_qlookup_10;
            break;
          default:
            if (v14 <= v8 * (double)-1)
              goto LABEL_35;
            goto LABEL_32;
        }
        if (v14 <= v8 * (double)v16[v15])
          goto LABEL_35;
LABEL_32:
        if (++v15 == 256)
        {
          LODWORD(v15) = 255;
          goto LABEL_35;
        }
      }
    }
    LODWORD(v15) = 0;
LABEL_35:
    *(_DWORD *)(result + 4 * v7) = v15;
    v17 = v13 * 0.0000021 + -0.00125;
    v18 = v13 * (v17 * v13 + 0.45);
    if (v18 >= v13)
      v18 = v13;
    if (v18 > 2.0)
    {
      v19 = 0;
      while (1)
      {
        switch(a7)
        {
          case 8:
            v20 = (__int16 *)&ac_qlookup_0;
            break;
          case 12:
            v20 = (__int16 *)&ac_qlookup_12;
            break;
          case 10:
            v20 = (__int16 *)&ac_qlookup_10;
            break;
          default:
            if (v18 <= v8 * (double)-1)
              goto LABEL_51;
            goto LABEL_48;
        }
        if (v18 <= v8 * (double)v20[v19])
          goto LABEL_51;
LABEL_48:
        if (++v19 == 256)
        {
          LODWORD(v19) = 255;
          goto LABEL_51;
        }
      }
    }
    LODWORD(v19) = 0;
LABEL_51:
    *(_DWORD *)(a2 + 4 * v7) = v19;
    v21 = v13 * ((v13 * 0.0000015 + -0.0009) * v13 + 0.3);
    if (v21 >= v13)
      v21 = v13;
    if (v21 > 2.0)
    {
      v22 = 0;
      while (1)
      {
        switch(a7)
        {
          case 8:
            v23 = (__int16 *)&ac_qlookup_0;
            break;
          case 12:
            v23 = (__int16 *)&ac_qlookup_12;
            break;
          case 10:
            v23 = (__int16 *)&ac_qlookup_10;
            break;
          default:
            if (v21 <= v8 * (double)-1)
              goto LABEL_67;
            goto LABEL_64;
        }
        if (v21 <= v8 * (double)v23[v22])
          goto LABEL_67;
LABEL_64:
        if (++v22 == 256)
        {
          LODWORD(v22) = 255;
          goto LABEL_67;
        }
      }
    }
    LODWORD(v22) = 0;
LABEL_67:
    *(_DWORD *)(a3 + 4 * v7) = v22;
    v24 = v13 * ((v13 * 0.00000271 + -0.00113) * v13 + 0.7);
    if (v24 >= v13)
      v24 = v13;
    if (v24 > 2.0)
    {
      v25 = 0;
      while (1)
      {
        switch(a7)
        {
          case 8:
            v26 = (__int16 *)&ac_qlookup_0;
            break;
          case 12:
            v26 = (__int16 *)&ac_qlookup_12;
            break;
          case 10:
            v26 = (__int16 *)&ac_qlookup_10;
            break;
          default:
            if (v24 <= v8 * (double)-1)
              goto LABEL_83;
            goto LABEL_80;
        }
        if (v24 <= v8 * (double)v26[v25])
          goto LABEL_83;
LABEL_80:
        if (++v25 == 256)
        {
          LODWORD(v25) = 255;
          goto LABEL_83;
        }
      }
    }
    LODWORD(v25) = 0;
LABEL_83:
    *(_DWORD *)(a5 + 4 * v7) = v25;
    v27 = v13 * (v17 * v13 + 0.55);
    if (v27 < v13)
      v13 = v27;
    if (v13 > 2.0)
    {
      v28 = 0;
      while (1)
      {
        switch(a7)
        {
          case 8:
            v29 = (__int16 *)&ac_qlookup_0;
            break;
          case 12:
            v29 = (__int16 *)&ac_qlookup_12;
            break;
          case 10:
            v29 = (__int16 *)&ac_qlookup_10;
            break;
          default:
            if (v13 <= v8 * (double)-1)
              goto LABEL_99;
            goto LABEL_96;
        }
        if (v13 <= v8 * (double)v29[v28])
          goto LABEL_99;
LABEL_96:
        if (++v28 == 256)
        {
          LODWORD(v28) = 255;
          goto LABEL_99;
        }
      }
    }
    LODWORD(v28) = 0;
LABEL_99:
    *(_DWORD *)(a4 + 4 * v7) = v28;
    if (v24 <= 2.0)
    {
      LODWORD(i) = 0;
      goto LABEL_7;
    }
    for (i = 0; i != 256; ++i)
    {
      switch(a7)
      {
        case 8:
          v30 = (__int16 *)&ac_qlookup_0;
          goto LABEL_107;
        case 12:
          v30 = (__int16 *)&ac_qlookup_12;
LABEL_107:
          if (v24 <= v8 * (double)v30[i])
            goto LABEL_7;
          continue;
        case 10:
          v30 = (__int16 *)&ac_qlookup_10;
          goto LABEL_107;
      }
      if (v24 <= v8 * (double)-1)
        goto LABEL_7;
    }
    LODWORD(i) = 255;
LABEL_7:
    *(_DWORD *)(a6 + 4 * v7++) = i;
  }
  while (v7 != 256);
  return result;
}

double vp9_rc_init(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  const float *v14;
  float32x4_t v15;
  int v16;
  int v17;
  double v18;
  double v19;
  _WORD *v20;
  int v21;
  int v22;
  int v23;
  double v24;
  double v25;
  int v26;
  int v27;
  int v28;
  int v29;
  double result;

  if (a2 || *(_DWORD *)(a1 + 108) != 1)
  {
    v6 = *(_DWORD *)(a1 + 152);
    v7 = *(_DWORD *)(a1 + 156);
    v8 = __OFADD__(v7, v6);
    v9 = v7 + v6;
    if (v9 < 0 != v8)
      ++v9;
    *(_DWORD *)(a3 + 168) = v9 >> 1;
    v10 = *(_DWORD *)(a1 + 152);
    v11 = *(_DWORD *)(a1 + 156);
    v8 = __OFADD__(v11, v10);
    v12 = v11 + v10;
    if (v12 < 0 != v8)
      ++v12;
    v5 = v12 >> 1;
  }
  else
  {
    *(_DWORD *)(a3 + 168) = *(_DWORD *)(a1 + 152);
    v5 = *(_DWORD *)(a1 + 152);
  }
  *(_DWORD *)(a3 + 172) = v5;
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 156);
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a3 + 288);
  *(_QWORD *)(a3 + 192) = v13;
  *(_QWORD *)(a3 + 200) = v13;
  v14 = (const float *)(a3 + 144);
  v15 = vld1q_dup_f32(v14);
  *(float32x4_t *)(a3 + 232) = v15;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a3 + 272) = 0;
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 584) = 0;
  *(_OWORD *)(a3 + 592) = xmmword_208F4B8F0;
  *(_OWORD *)(a3 + 608) = 0u;
  *(_QWORD *)(a3 + 376) = 0x6400000096;
  *(_OWORD *)(a3 + 624) = xmmword_208F4B900;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 480) = 0u;
  *(_OWORD *)(a3 + 496) = 0u;
  *(_OWORD *)(a3 + 512) = 0u;
  *(_OWORD *)(a3 + 528) = 0u;
  *(_OWORD *)(a3 + 544) = 0u;
  *(_OWORD *)(a3 + 560) = 0u;
  *(_QWORD *)(a3 + 576) = 0;
  *(_QWORD *)(a3 + 116) = 0x800000000;
  *(_DWORD *)(a3 + 92) = 0;
  *(_QWORD *)(a3 + 132) = 0;
  *(_QWORD *)(a3 + 124) = 0;
  *(_DWORD *)(a3 + 712) = 1;
  v16 = *(_DWORD *)(a1 + 152);
  *(_QWORD *)(a3 + 160) = 0;
  *(_DWORD *)(a3 + 156) = v16;
  *(_QWORD *)(a3 + 176) = 0;
  v17 = *(_DWORD *)(a1 + 4);
  v18 = 0.015625;
  if (v17 == 10)
    v18 = 0.0625;
  v19 = 0.25;
  if (v17 == 8)
  {
    v18 = 0.25;
    v20 = ac_qlookup_0;
  }
  else if (v17 == 12)
  {
    v20 = ac_qlookup_12;
  }
  else
  {
    v19 = -1.0;
    if (v17 != 10)
      goto LABEL_20;
    v20 = ac_qlookup_10;
  }
  if (v16 >= 255)
    v16 = 255;
  LOWORD(v19) = v20[v16 & ~(v16 >> 31)];
  v19 = (double)vmovl_s16(*(int16x4_t *)&v19).i32[0];
LABEL_20:
  *(double *)(a3 + 184) = v18 * v19;
  memset_pattern16((void *)(a3 + 48), &unk_208F4B910, 0x28uLL);
  *(_DWORD *)(a3 + 684) = 0;
  *(_OWORD *)(a3 + 668) = 0u;
  v21 = *(_DWORD *)(a1 + 344);
  v22 = *(_DWORD *)(a1 + 348);
  *(_DWORD *)(a3 + 96) = v21;
  *(_DWORD *)(a3 + 100) = v22;
  if (v21)
  {
    if (v22)
      goto LABEL_22;
LABEL_34:
    v26 = (int)(*(double *)(a1 + 24) * 0.75);
    if (v26 >= 16)
      v26 = 16;
    v27 = (v26 & 1) + v26;
    if (v27 <= v21)
      v27 = v21;
    *(_DWORD *)(a3 + 100) = v27;
    v8 = __OFADD__(v27, v21);
    v28 = v27 + v21;
    if (v28 < 0 != v8)
      ++v28;
    *(_DWORD *)(a3 + 108) = v28 >> 1;
    if (*(_DWORD *)(a1 + 92))
      goto LABEL_43;
    goto LABEL_41;
  }
  v24 = *(double *)(a1 + 24);
  v25 = v24 * (double)(*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8));
  v21 = (int)(v24 * 0.125);
  if (v21 >= 16)
    v21 = 16;
  if (v21 <= 4)
    v21 = 4;
  if (v25 > 165888000.0 && v21 <= (int)(v25 * 4.0 / 165888000.0 + 0.5))
    v21 = (int)(v25 * 4.0 / 165888000.0 + 0.5);
  *(_DWORD *)(a3 + 96) = v21;
  if (!v22)
    goto LABEL_34;
LABEL_22:
  v8 = __OFADD__(v22, v21);
  v23 = v22 + v21;
  if (v23 < 0 != v8)
    ++v23;
  *(_DWORD *)(a3 + 108) = v23 >> 1;
  if (*(_DWORD *)(a1 + 92))
    goto LABEL_43;
LABEL_41:
  if (*(_DWORD *)(a1 + 108) != 3)
  {
LABEL_43:
    v29 = 250;
    goto LABEL_44;
  }
  v29 = 8;
LABEL_44:
  *(_DWORD *)(a3 + 104) = v29;
  *(_DWORD *)(a3 + 664) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 648) = 0u;
  *(_QWORD *)(a3 + 688) = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 696) = 0u;
  return result;
}

uint64_t vp9_test_drop(int *a1)
{
  _DWORD *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = a1 + 208785;
  v3 = a1 + 186878;
  v4 = a1 + 184660;
  v5 = a1[186877];
  if (v5)
  {
    v6 = &a1[*v3];
    if (v6[208761] == *v2)
    {
      result = 0;
      v6[208761] = 0;
      return result;
    }
    v8 = v6[208749];
    if (!(_DWORD)v8)
      return 0;
  }
  else
  {
    v8 = a1[47532];
    if (!(_DWORD)v8)
      return 0;
  }
  v9 = *v3;
  if ((int)v9 >= 1 && a1[208786] == 2)
    return 0;
  v10 = *(_QWORD *)v4;
  if ((*(_QWORD *)v4 & 0x8000000000000000) != 0 && a1[208786] != 2
    || check_buffer_below_thresh((uint64_t)a1, -1) && v2[1] == 2)
  {
    return 1;
  }
  v11 = *((_QWORD *)v4 + 13) * v8 / 100;
  if (v5 && v2[1] == 2)
  {
    v12 = v3[2];
    if (v12 > (int)v9)
    {
      v13 = v3[3];
      v14 = v12 - v9;
      v15 = &a1[v9 + 208749];
      v16 = (uint64_t)&a1[1720 * v3[1] + 188024 + 1720 * (int)v9 * (uint64_t)v13];
      v17 = 6880 * v13;
      while (*(int *)(v16 + 528) < 1 || *(_QWORD *)v16 > *(_DWORD *)(v16 + 104) * *v15 / 100)
      {
        ++v15;
        v16 += v17;
        if (!--v14)
          goto LABEL_23;
      }
      goto LABEL_25;
    }
  }
  else if (v10 <= (int)v11)
  {
    goto LABEL_25;
  }
LABEL_23:
  v18 = v4[8];
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v20 < 0 == v19)
  {
    v4[8] = v20;
    goto LABEL_28;
  }
LABEL_25:
  v21 = check_buffer_below_thresh((uint64_t)a1, v11);
  v20 = v4[8];
  if (v21 && !v20)
  {
    v20 = 1;
    v4[8] = 1;
    goto LABEL_29;
  }
LABEL_28:
  if (v20 < 1)
  {
    result = 0;
    v4[9] = 0;
    return result;
  }
LABEL_29:
  v22 = v4[9];
  v19 = __OFSUB__(v22, 1);
  v23 = v22 - 1;
  if (v23 < 0 == v19)
  {
    v4[9] = v23;
    return 1;
  }
  result = 0;
  v4[9] = v20;
  return result;
}

uint64_t check_buffer_below_thresh(uint64_t a1, int a2)
{
  int v2;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_DWORD *)(a1 + 747508))
    return *(_QWORD *)(a1 + 738640) <= a2;
  v2 = *(_DWORD *)(a1 + 835144);
  if (v2 == 1)
    return *(_QWORD *)(a1 + 738640) <= a2;
  v4 = *(int *)(a1 + 747512);
  v5 = *(_DWORD *)(a1 + 747520);
  if (v5 <= (int)v4)
    return v2 != 2;
  v6 = *(_DWORD *)(a1 + 747524);
  v7 = v5 - v4;
  v8 = (_DWORD *)(a1 + 4 * v4 + 834996);
  v9 = a1 + 6880 * (*(int *)(a1 + 747516) + (int)v4 * (uint64_t)v6) + 752096;
  if (v2 == 2)
  {
    v10 = 6880 * v6;
    while (*(int *)(v9 + 528) < 1 || *(_QWORD *)v9 > *(_DWORD *)(v9 + 104) * *v8 / 100)
    {
      ++v8;
      v9 += v10;
      if (!--v7)
        return v2 != 2;
    }
    return 1;
  }
  else
  {
    v11 = 6880 * v6;
    while (*(int *)(v9 + 528) < 1 || *(_QWORD *)v9 <= *(_DWORD *)(v9 + 104) * *v8 / 100)
    {
      ++v8;
      v9 += v11;
      if (!--v7)
        return v2 != 2;
    }
    return 0;
  }
}

uint64_t post_encode_drop_cbr(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;

  v2 = (_QWORD *)(a1 + 738744);
  v3 = (_DWORD *)(a1 + 738468);
  v4 = *(_QWORD *)(a1 + 738640);
  v5 = *(int *)(a1 + 738592);
  if (v4 + v5 >= 8 * *a2)
  {
    result = 0;
    v2[44] = 0;
  }
  else
  {
    v7 = (_BYTE *)(a1 + 850377);
    v8 = (_DWORD *)(a1 + 834892);
    v9 = a1 + 189844;
    *a2 = 0;
    ++*(_DWORD *)(a1 + 189844);
    *(int32x2_t *)(a1 + 738564) = vadd_s32(*(int32x2_t *)(a1 + 738564), (int32x2_t)0x1FFFFFFFFLL);
    *(_QWORD *)(a1 + 738760) = 0;
    *(_DWORD *)(a1 + 738776) = v5;
    *v3 = *(_DWORD *)(a1 + 173028);
    v10 = *(_DWORD *)(a1 + 747508);
    if (v10)
    {
      if (*(_DWORD *)(a1 + 835144) != 1)
      {
        v11 = *v2;
        if (v4 > *v2)
        {
          *(_QWORD *)(a1 + 738640) = v11;
          *(_QWORD *)(a1 + 738648) = v11;
        }
      }
    }
    *(_DWORD *)(a1 + 850796) = *(_DWORD *)(a1 + 190072);
    if (*(_DWORD *)(a1 + 739056) || v10 && *(_DWORD *)(a1 + 835152))
      *(_DWORD *)(a1 + 739100) = 1;
    result = 1;
    *((_DWORD *)v2 + 88) = 1;
    v3[38] = v3[65];
    *v7 = 1;
    *(_DWORD *)(v9 + 4724) = 0;
    if (v10)
    {
      *(_DWORD *)(a1 + 747512 + 4 * *(int *)(a1 + 747512) + 87388) = 1;
      *(_DWORD *)(a1 + 747512 + 4 * *(int *)(a1 + 747512) + 87436) = 1;
      v13 = a1 + 747512 + 4 * *(int *)(a1 + 747512);
      ++*(_DWORD *)(v13 + 87532);
      *v8 = 1;
      v14 = *(unsigned int *)(a1 + 747520);
      if ((int)v14 >= 1)
      {
        v15 = *(unsigned int *)(a1 + 747524);
        if ((int)v15 >= 1)
        {
          v16 = 0;
          v17 = 0;
          v18 = (_DWORD *)(a1 + 752076);
          v19 = v3[65];
          v20 = a1 + 752076;
          while (1)
          {
            if (v15 >= 2)
            {
              v22 = v18;
              v23 = v15 & 0xFFFFFFFE;
              do
              {
                v22[119] = 1;
                v22[1839] = 1;
                *v22 = v19;
                v22[1720] = v19;
                v22 += 3440;
                v23 -= 2;
              }
              while (v23);
              v21 = v15 & 0xFFFFFFFE;
              if (v21 == v15)
                goto LABEL_12;
            }
            else
            {
              v21 = 0;
            }
            v24 = v15 - v21;
            v25 = (_DWORD *)(v20 + 6880 * (v21 + v16));
            do
            {
              v25[119] = 1;
              *v25 = v19;
              v25 += 1720;
              --v24;
            }
            while (v24);
LABEL_12:
            ++v17;
            v18 += 1720 * v15;
            v16 += v15;
            if (v17 == v14)
              return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t vp9_rc_drop_frame(uint64_t a1)
{
  _DWORD *v2;
  int *v3;
  uint64_t *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t result;
  _DWORD *v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;

  v2 = (_DWORD *)(a1 + 834948);
  v3 = (int *)(a1 + 747512);
  v4 = (uint64_t *)(a1 + 738744);
  v5 = *(_DWORD *)(a1 + 747508);
  v6 = *(_DWORD *)(a1 + 747512);
  if (v5)
    v7 = v6 < 1;
  else
    v7 = 1;
  if (v7
    || !*(_DWORD *)(a1 + 4 * (*(_DWORD *)(a1 + 747512) - 1) + 834948)
    || (*(_DWORD *)(a1 + 835144) | 2) == 3)
  {
    if (!*(_DWORD *)(a1 + 4 * v6 + 835092))
    {
      result = vp9_test_drop((int *)a1);
      if (!(_DWORD)result)
        return result;
      v5 = *((_DWORD *)v4 + 2191);
    }
  }
  else
  {
    v5 = 1;
  }
  v9 = (_DWORD *)(a1 + 850796);
  v10 = (_BYTE *)(a1 + 850377);
  ++*(_DWORD *)(a1 + 189844);
  *(int32x2_t *)(a1 + 738564) = vadd_s32(*(int32x2_t *)(a1 + 738564), (int32x2_t)0x1FFFFFFFFLL);
  v4[2] = 0;
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a1 + 738592);
  *(_DWORD *)(a1 + 738468) = *(_DWORD *)(a1 + 173028);
  if (v5)
  {
    v11 = v2[49];
    if (v11 != 1)
    {
      v12 = *v4;
      if (*(_QWORD *)(a1 + 738640) > *v4)
      {
        *(_QWORD *)(a1 + 738640) = v12;
        *(_QWORD *)(a1 + 738648) = v12;
      }
    }
    *(_DWORD *)(a1 + 194568) = 0;
    *(_DWORD *)(a1 + 747512 + 4 * *v3 + 87388) = 1;
    *(_DWORD *)(a1 + 747512 + 4 * *v3 + 87436) = 1;
    *v9 = *(_DWORD *)(a1 + 190072);
    v13 = a1 + 747512 + 4 * *v3;
    v14 = *(_DWORD *)(v13 + 87532);
    *v10 = 1;
    *(_DWORD *)(v13 + 87532) = v14 + 1;
    *(_DWORD *)(a1 + 834892) = 1;
    if (v11 == 1 || v11 == 3 && !*(_DWORD *)(a1 + 4 * v3[2] + 835088) || !*v2)
    {
      LODWORD(v15) = *v3;
      v17 = v3[2];
      v18 = a1 + 6880 * v3[3] * (uint64_t)*v3 + 751904;
      *(_DWORD *)(v18 + 6760) = *(_DWORD *)(a1 + 6880 * v3[3] * (uint64_t)*v3 + 758664) + 1;
      ++*(_DWORD *)(v18 + 6768);
      v16 = v17 - 1;
      if ((_DWORD)v15 == v17 - 1)
        ++*(_DWORD *)(a1 + 834688);
    }
    else
    {
      LODWORD(v15) = *v3;
      v16 = v3[2] - 1;
    }
    if ((_DWORD)v15 != v16)
      return 1;
    if ((int)v15 >= 1)
    {
      v15 = v15;
      do
      {
        if (!*v2++)
          return 1;
      }
      while (--v15);
    }
    *(_DWORD *)(a1 + 834892) = 0;
    return 1;
  }
  else
  {
    *v9 = *(_DWORD *)(a1 + 190072);
    *(_DWORD *)(a1 + 194568) = 0;
    result = 1;
    *v10 = 1;
  }
  return result;
}

uint64_t vp9_rc_regulate_q(uint64_t a1, int a2, int a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  _WORD *v25;
  int v26;
  __int16 v27;
  double v28;
  int v29;
  int refreshed;
  int v31;
  int v32;
  double v33;
  _WORD *v34;
  int v35;
  __int16 v36;
  int v37;
  _WORD *v38;
  int v39;
  __int16 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;

  v10 = a1 + 738496;
  v11 = (int *)(a1 + 189856);
  v12 = a1 + 172972;
  v54 = *(_QWORD *)(a1 + 740264);
  v13 = *(_DWORD *)(a1 + 172972);
  if (v13 && !*(_BYTE *)(a1 + 172988))
  {
    if (*(_DWORD *)(a1 + 190076) == 2)
    {
      v14 = (double *)(a1 + 8 * *(unsigned int *)(a1 + 4 * *(unsigned __int8 *)(a1 + 742180) + 742184) + 738496);
    }
    else if (!*(_DWORD *)(a1 + 194564) && !*(_DWORD *)(a1 + 194560)
           || *(_DWORD *)(a1 + 738588)
           || *(_DWORD *)(a1 + 747508)
           || *(_DWORD *)(a1 + 190092) == 1 && *(_DWORD *)(a1 + 190068) < 0x65u)
    {
      v14 = (double *)(a1 + 738496);
    }
    else
    {
      v14 = (double *)(a1 + 738520);
    }
  }
  else
  {
    v14 = (double *)(a1 + 738528);
  }
  v15 = *v14 * rate_thresh_mult[*(unsigned int *)(a1 + 738780)];
  v16 = 50.0;
  if (v15 <= 50.0)
    v16 = *v14 * rate_thresh_mult[*(unsigned int *)(a1 + 738780)];
  v17 = 0.005;
  if (v15 >= 0.005)
    v18 = v16;
  else
    v18 = 0.005;
  v19 = ((uint64_t)a2 << 9) / (unint64_t)*(int *)(a1 + 173000);
  if ((int)a4 <= a3)
    v20 = a3;
  else
    v20 = a4;
  if (*(_DWORD *)(a1 + 190148) == 3)
  {
    v52 = a4;
    v53 = a1 + 738496;
    v21 = 0x7FFFFFFF;
LABEL_14:
    if (*(_DWORD *)(v54 + 120) && (!v11[53] || !v11[1176]))
    {
      refreshed = vp9_cyclic_refresh_rc_bits_per_mb(a1, a3, v18, v16, v17, a8);
      v31 = refreshed - v19;
      if (refreshed <= (int)v19)
        goto LABEL_41;
      goto LABEL_37;
    }
    while (1)
    {
      if (*(_BYTE *)(v12 + 16))
        v22 = 0;
      else
        v22 = *(_DWORD *)v12;
      v23 = *v11;
      v24 = 0.015625;
      if (*v11 == 10)
        v24 = 0.0625;
      if (v23 == 8)
        break;
      if (v23 == 12)
      {
        v25 = ac_qlookup_12;
        goto LABEL_28;
      }
      if (v23 == 10)
      {
        v25 = ac_qlookup_10;
        goto LABEL_28;
      }
      v27 = -1;
LABEL_33:
      v28 = v24 * (double)v27;
      if (v22)
        v29 = 1800000;
      else
        v29 = 2700000;
      v16 = v18 * (double)(v29 + ((int)(v28 * (double)v29) >> 12));
      refreshed = (int)(v16 / v28);
      v31 = refreshed - v19;
      if (refreshed <= (int)v19)
      {
LABEL_41:
        v10 = v53;
        goto LABEL_42;
      }
LABEL_37:
      if (v20 == a3)
      {
        v10 = v53;
        a4 = v52;
        goto LABEL_83;
      }
      ++a3;
      v21 = v31;
      if (v11[73] == 3)
        goto LABEL_14;
    }
    v24 = 0.25;
    v25 = ac_qlookup_0;
LABEL_28:
    if (a3 >= 255)
      v26 = 255;
    else
      v26 = a3;
    v27 = v25[v26 & ~(v26 >> 31)];
    goto LABEL_33;
  }
  v32 = *v11;
  v33 = 0.015625;
  if (*v11 == 10)
    v33 = 0.0625;
  if (v32 == 8)
    v33 = 0.25;
  if (*(_BYTE *)(a1 + 172988))
  {
    v21 = 0x7FFFFFFF;
    while (v32 != 8)
    {
      if (v32 == 10)
      {
        v34 = ac_qlookup_10;
        goto LABEL_55;
      }
      if (v32 == 12)
      {
        v34 = ac_qlookup_12;
LABEL_55:
        if (a3 >= 255)
          v35 = 255;
        else
          v35 = a3;
        v36 = v34[v35 & ~(v35 >> 31)];
        goto LABEL_60;
      }
      v36 = -1;
LABEL_60:
      refreshed = (int)(v18 * (double)(((int)(v33 * (double)v36 * 2700000.0) >> 12) + 2700000) / (v33 * (double)v36));
      if (refreshed <= (int)v19)
        goto LABEL_42;
      ++a3;
      v21 = refreshed - v19;
      if (v20 + 1 == a3)
        goto LABEL_83;
    }
    v34 = ac_qlookup_0;
    goto LABEL_55;
  }
  if (v13)
    v37 = 1800000;
  else
    v37 = 2700000;
  v21 = 0x7FFFFFFF;
  do
  {
    switch(v32)
    {
      case 8:
        v38 = ac_qlookup_0;
        break;
      case 10:
        v38 = ac_qlookup_10;
        break;
      case 12:
        v38 = ac_qlookup_12;
        break;
      default:
        v40 = -1;
        goto LABEL_81;
    }
    if (a3 >= 255)
      v39 = 255;
    else
      v39 = a3;
    v40 = v38[v39 & ~(v39 >> 31)];
LABEL_81:
    refreshed = (int)(v18 * (double)(v37 + ((int)(v33 * (double)v40 * (double)v37) >> 12)) / (v33 * (double)v40));
    if (refreshed <= (int)v19)
    {
LABEL_42:
      a4 = a3 - ((int)v19 - refreshed > v21);
      break;
    }
    ++a3;
    v21 = refreshed - v19;
  }
  while (v20 + 1 != a3);
LABEL_83:
  if (v11[59] != 1)
    return a4;
  if (!*(_DWORD *)(v10 + 588) && (!v11[53] || !v11[1177] && !v11[1176]))
  {
    v47 = *(_DWORD *)(v10 + 264);
    if (*(_DWORD *)(v10 + 268) * v47 == -1)
    {
      v48 = *(_DWORD *)(v10 + 272);
      v49 = *(_DWORD *)(v10 + 276);
      if (v48 != v49)
      {
        if (v48 >= v49)
          v50 = *(_DWORD *)(v10 + 276);
        else
          v50 = *(_DWORD *)(v10 + 272);
        if (v48 <= v49)
          v48 = *(_DWORD *)(v10 + 276);
        if ((int)a4 < v48)
          v48 = a4;
        if (v50 > (int)a4)
          v48 = v50;
        if (v48 < (int)a4 && v47 == -1)
          LODWORD(a4) = (v48 + (int)a4) >> 1;
        else
          LODWORD(a4) = v48;
      }
    }
  }
  if (v11[131] == 1 && v11[73] == 3 && **(int **)(v10 + 1768) >= 1)
  {
    v41 = *(_DWORD *)(v10 + 272);
    v42 = v41 - a4;
    v43 = v41 - 8;
    if (v42 > 8)
      LODWORD(a4) = v43;
  }
  v44 = *(_DWORD *)(v10 + 232);
  v45 = *(_DWORD *)(v10 + 236);
  if ((int)a4 < v44)
    v44 = a4;
  if (v44 <= v45)
    return v45;
  else
    return v44;
}

uint64_t vp9_rc_pick_q_and_bounds_two_pass(unint64_t a1, _DWORD *a2, _DWORD *a3, int a4, double a5, double a6, double a7, double a8)
{
  unint64_t v12;
  int *v13;
  int *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  double v19;
  uint64_t v20;
  double v21;
  _BOOL4 v22;
  _DWORD *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t result;
  unint64_t v32;
  _DWORD *v33;
  double v34;
  double v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  int *v46;
  int v47;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  _WORD *v55;
  int v56;
  double v57;
  int v58;
  _WORD *v59;
  int v60;
  __int16 v61;
  double v62;
  int v63;
  int v64;
  int v65;
  int *v66;
  int v67;
  _DWORD *v68;
  _DWORD *v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  char *v77;
  int v78;
  char *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  _WORD *v84;
  int v85;
  int i;
  _WORD *v87;
  int v88;
  __int16 v89;
  double v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int v97;
  int v98;
  _DWORD *v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;

  v12 = a1 + 738712;
  v13 = (int *)(a1 + 738452);
  v14 = (int *)(a1 + 189856);
  v15 = a1 + 172972;
  v16 = *(_DWORD *)(a1 + 190092);
  v17 = *(unsigned int *)(a1 + 190144);
  v18 = *(_DWORD *)(a1 + 190144);
  if (v16 == 2)
  {
    v19 = *(double *)(a1 + 742064);
    v18 = *(_DWORD *)(a1 + 190144);
    if (v19 > 0.1)
    {
      a7 = 0.05;
      v18 = (v17 - (int)((v19 + -0.1) / 0.05)) & ~(((int)v17 - (int)((v19 + -0.1) / 0.05)) >> 31);
    }
    v20 = *(_QWORD *)v12;
    if (*(uint64_t *)v12 >= 1)
    {
      a7 = (double)v20;
      v21 = (double)*(uint64_t *)(a1 + 738704) / (double)v20;
      if (v21 < 0.1)
      {
        a7 = (double)v18;
        v18 = (int)(v21 * (double)v18 / 0.1);
      }
    }
  }
  v22 = 0;
  v23 = (_DWORD *)(a1 + 850432);
  v24 = (unsigned __int8 *)(a1 + 742180);
  v25 = *(_DWORD *)(a1 + 742132);
  v101 = v25;
  v102 = 0;
  v26 = *(_DWORD *)(a1 + 738588);
  if (!v26)
  {
    if (*(_DWORD *)(a1 + 194560))
      v22 = 1;
    else
      v22 = *(_DWORD *)(a1 + 194564) != 0;
  }
  v27 = *v14;
  v28 = &inter_minq_12;
  if (*v14 == 10)
    v28 = &inter_minq_10;
  if (v27 == 8)
    v28 = &inter_minq_8;
  v29 = *(_DWORD *)v15;
  if (v16 == 3)
  {
    if (v29)
    {
      v30 = *(unsigned __int8 *)(a1 + 172988);
      v103 = v17;
      v104 = v17;
      if (!v30)
      {
        if (v26 || !*(_DWORD *)(a1 + 194564))
        {
          result = v17;
        }
        else
        {
          if (*v23)
            v66 = (int *)(a1 + 4 * *v24 + 745964);
          else
            v66 = (int *)(a1 + 738480);
          v77 = (char *)&arfgf_low_motion_minq_12;
          v78 = *v66;
          if (v27 == 10)
            v77 = (char *)&arfgf_low_motion_minq_10;
          v79 = (char *)&arfgf_high_motion_minq_12;
          if (v27 == 10)
            v79 = (char *)&arfgf_high_motion_minq_10;
          if (v27 == 8)
          {
            v77 = (char *)&arfgf_low_motion_minq_8;
            v79 = (char *)&arfgf_high_motion_minq_8;
          }
          if (v78 < 2001)
          {
            if (v78 > 399)
            {
              v80 = 4 * (int)v17;
              v81 = *(_DWORD *)&v79[v80];
              LODWORD(v80) = *(_DWORD *)&v77[v80];
              v82 = 1374389535 * ((v81 - (int)v80) * (2000 - v78) + 800);
              result = (v82 >> 41) + ((unint64_t)v82 >> 63) + (_DWORD)v80;
            }
            else
            {
              result = *(unsigned int *)&v79[4 * (int)v17];
            }
          }
          else
          {
            result = *(unsigned int *)&v77[4 * (int)v17];
          }
          if (*(_DWORD *)(a1 + 4 * a4 + 742184) == 2)
          {
            v83 = *(unsigned __int8 *)(a1 + a4 + 744452);
            result = ((int)(result + (v83 >> 1) + (v83 - 1) * v17) / (int)v83);
          }
        }
LABEL_39:
        *a3 = v17;
        *a2 = result;
        return result;
      }
    }
    else
    {
      v103 = v17;
      v104 = v17;
    }
    v42 = *(_DWORD *)(a1 + 738564);
    result = v17;
    if (v42 >= 2)
    {
      v43 = a2;
      pick_kf_q_bound_two_pass(a1, (int *)&v104, &v103);
      a2 = v43;
      LODWORD(v17) = v103;
      result = v104;
    }
    goto LABEL_39;
  }
  if (!v29 || *(_BYTE *)(a1 + 172988))
  {
    v32 = a1 + 172972;
    v100 = *(_DWORD *)(a1 + 738588);
    v33 = a2;
    pick_kf_q_bound_two_pass(a1, &v102, &v101);
    v25 = v101;
    v36 = v102;
    goto LABEL_23;
  }
  if (!v22)
  {
    v47 = v28[v25];
    if (v47 < v18 && v16 == 2)
      v47 = v18;
    v49 = *(_DWORD *)(a1 + 742140);
    v50 = *(_DWORD *)(a1 + 742148);
    v51 = __OFADD__(v50, v49);
    v52 = v50 + v49;
    if (v52 < 0 != v51)
      ++v52;
    v53 = v47 - (v52 >> 1);
    v38 = *(_DWORD *)(a1 + 742144) + v25;
    v37 = *(_DWORD *)(a1 + 741328 + 4 * *(int *)(a1 + 747192) + 824);
    if (v53 > v37)
      v37 = v53;
    v39 = *(_DWORD *)(a1 + 741328 + 4 * a4 + 856);
    goto LABEL_61;
  }
  if (*(int *)(a1 + 738568) < 2 || (v44 = *(_DWORD *)(a1 + 738620), v44 >= v25))
    v44 = v25;
  if (v44 < v18 && v16 == 2)
    v44 = v18;
  if (*v23)
    v46 = (int *)(a1 + 4 * *v24 + 745964);
  else
    v46 = (int *)(a1 + 738480);
  v67 = *v46;
  v68 = &arfgf_low_motion_minq_10;
  if (v27 != 10)
    v68 = &arfgf_low_motion_minq_12;
  v69 = &arfgf_high_motion_minq_12;
  if (v27 == 10)
    v69 = &arfgf_high_motion_minq_10;
  if (v27 == 8)
  {
    v68 = &arfgf_low_motion_minq_8;
    v69 = &arfgf_high_motion_minq_8;
  }
  if (v67 < 2001)
  {
    if (v67 > 399)
    {
      v71 = v44;
      v72 = v68[v71];
      v73 = 1374389535 * ((v69[v71] - v72) * (2000 - v67) + 800);
      v70 = (v73 >> 41) + ((unint64_t)v73 >> 63) + v72;
    }
    else
    {
      v70 = v69[v44];
    }
  }
  else
  {
    v70 = v68[v44];
  }
  v74 = *(_DWORD *)(a1 + 739144);
  if (v74 != 1)
  {
    v75 = v70;
    if (v74 != -1)
      goto LABEL_135;
    v69 = v68;
  }
  v75 = v69[v44];
LABEL_135:
  v32 = a1 + 172972;
  v100 = *(_DWORD *)(a1 + 738588);
  v33 = a2;
  v35 = *(double *)(a1 + 739136);
  a8 = 1.0 - v35;
  a7 = (1.0 - v35) * (double)v75;
  v34 = a7 + (double)v70 * v35;
  v36 = (int)v34;
  if (*(_DWORD *)(a1 + 4 * a4 + 742184) == 2)
  {
    v76 = *(unsigned __int8 *)(a1 + a4 + 744452);
    v36 = (int)(v36 + (v76 >> 1) + (v76 - 1) * v44) / (int)v76;
  }
LABEL_23:
  v37 = v36 - (*(_DWORD *)(v12 + 3428) + *(_DWORD *)(v12 + 3436));
  v38 = v25 + *(_DWORD *)(v12 + 3432) / 2;
  v39 = *(_DWORD *)(a1 + 4 * a4 + 742184);
  if (v39 == 2 && v37 <= *(_DWORD *)(a1 + 741328 + 4 * *(unsigned __int8 *)(a1 + 741328 + a4 + 3124) + 824))
    v37 = *(_DWORD *)(a1 + 741328 + 4 * *(unsigned __int8 *)(a1 + 741328 + a4 + 3124) + 824);
  a2 = v33;
  v15 = v32;
  if ((!v29 || *(_BYTE *)(v32 + 16)) && v13[30])
  {
    v26 = v100;
    if (*(int *)(v12 + 3416) > 94)
    {
      v40 = *(_DWORD *)(v12 + 68);
      if (v40)
        v41 = 0;
      else
        v41 = v29;
      if (v40)
        goto LABEL_104;
      goto LABEL_175;
    }
  }
  else
  {
    v26 = v100;
  }
LABEL_61:
  v54 = *(_DWORD *)(v12 + 16);
  v34 = 0.015625;
  if (v27 == 10)
    v34 = 0.0625;
  v35 = 0.25;
  if (v27 == 8)
  {
    v34 = 0.25;
    v55 = ac_qlookup_0;
LABEL_69:
    if (v38 >= 255)
      v38 = 255;
    LOWORD(v35) = v55[v38 & ~(v38 >> 31)];
    v35 = (double)vmovl_s16(*(int16x4_t *)&v35).i32[0];
    goto LABEL_72;
  }
  if (v27 == 12)
  {
    v55 = ac_qlookup_12;
    goto LABEL_69;
  }
  v35 = -1.0;
  if (v27 == 10)
  {
    v55 = ac_qlookup_10;
    goto LABEL_69;
  }
LABEL_72:
  if (v29)
    v56 = 1800000;
  else
    v56 = 2700000;
  v38 = *(_DWORD *)(v12 + 20);
  if (v38 >= v54)
  {
LABEL_90:
    if (v54 <= v37)
      v38 = v37;
    else
      v38 = *(_DWORD *)(v12 + 16);
    v63 = *(_DWORD *)(v12 + 68);
    if (v63)
      v41 = 0;
    else
      v41 = v29;
    if (v63)
      goto LABEL_104;
    goto LABEL_175;
  }
  v57 = v34 * v35;
  v35 = (double)v56;
  v58 = (int)(vp9_frame_type_qdelta_rate_factor_deltas[v39]
            * (double)(int)((double)(v56 + ((int)(v57 * (double)v56) >> 12)) / v57));
  while (1)
  {
    switch(v27)
    {
      case 8:
        v59 = ac_qlookup_0;
        break;
      case 12:
        v59 = ac_qlookup_12;
        break;
      case 10:
        v59 = ac_qlookup_10;
        break;
      default:
        v61 = -1;
        goto LABEL_88;
    }
    v60 = v38 >= 255 ? 255 : v38;
    v61 = v59[v60 & ~(v60 >> 31)];
LABEL_88:
    v62 = v34 * (double)v61;
    a8 = (double)(v56 + ((int)(v62 * v35) >> 12));
    a7 = a8 / v62;
    if ((int)a7 <= v58)
      break;
    if (v54 == ++v38)
      goto LABEL_90;
  }
  if (v38 <= v37)
    v38 = v37;
  v64 = *(_DWORD *)(v12 + 68);
  if (v64)
    v41 = 0;
  else
    v41 = v29;
  if (v64)
  {
LABEL_104:
    if (v29)
    {
      if (!*(_BYTE *)(v15 + 16) && !v14[1177] && (v26 || !v14[1176]))
      {
        v65 = *(_DWORD *)(v12 + 16);
        v34 = 0.015625;
        if (v27 == 10)
          v34 = 0.0625;
        v35 = 0.25;
        if (v27 == 8)
        {
          v34 = 0.25;
          v84 = ac_qlookup_0;
          goto LABEL_152;
        }
        if (v27 == 12)
        {
          v84 = ac_qlookup_12;
LABEL_152:
          if (v37 >= 255)
            v37 = 255;
          LOWORD(v35) = v84[v37 & ~(v37 >> 31)];
          v35 = (double)vmovl_s16(*(int16x4_t *)&v35).i32[0];
        }
        else
        {
          v35 = -1.0;
          if (v27 == 10)
          {
            v84 = ac_qlookup_10;
            goto LABEL_152;
          }
        }
        v37 = *(_DWORD *)(v12 + 20);
        if (v37 < v65)
        {
          v85 = 2 * (int)((double)(((int)(v34 * v35 * 1800000.0) >> 12) + 1800000) / (v34 * v35));
          for (i = *(_DWORD *)(v12 + 20); v65 != i; ++i)
          {
            switch(v27)
            {
              case 8:
                v87 = ac_qlookup_0;
                break;
              case 12:
                v87 = ac_qlookup_12;
                break;
              case 10:
                v87 = ac_qlookup_10;
                break;
              default:
                v89 = -1;
                goto LABEL_168;
            }
            if (i >= 255)
              v88 = 255;
            else
              v88 = i;
            v89 = v87[v88 & ~(v88 >> 31)];
LABEL_168:
            v90 = v34 * (double)v89;
            a7 = (double)(((int)(v90 * 1800000.0) >> 12) + 1800000);
            v35 = a7 / v90;
            if (v85 >= (int)v35)
            {
              v65 = i;
              break;
            }
          }
        }
        if (v65 > v37)
          v37 = v65;
      }
      v41 = 1;
    }
  }
LABEL_175:
  v92 = *(_DWORD *)(v12 + 16);
  v91 = *(_DWORD *)(v12 + 20);
  if (v37 >= v92)
    v93 = *(_DWORD *)(v12 + 16);
  else
    v93 = v37;
  if (v37 >= v91)
    v94 = v93;
  else
    v94 = v91;
  if (v38 >= v92)
    v95 = *(_DWORD *)(v12 + 16);
  else
    v95 = v38;
  if (v38 >= (int)v94)
    v96 = v95;
  else
    v96 = v94;
  if (v41 && !*(_BYTE *)(v15 + 16))
  {
    v99 = a2;
    result = vp9_rc_regulate_q(a1, *v13, v94, v96, v34, v35, a7, a8);
    a2 = v99;
    if ((int)result > (int)v96)
    {
      if (*v13 >= v13[37])
        v96 = result;
      else
        v96 = v96;
      result = v96;
    }
  }
  else if (v13[30])
  {
    if (*(int *)(v12 + 3416) < 95)
    {
      result = v13[5];
    }
    else
    {
      v98 = v13[5];
      v97 = v13[6];
      if (v97 >= v98)
        result = v98;
      else
        result = v97;
    }
  }
  else
  {
    result = v94;
  }
  *a3 = v96;
  *a2 = v94;
  return result;
}

unint64_t pick_kf_q_bound_two_pass(unint64_t result, int *a2, int *a3)
{
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  double v8;
  double v9;
  int v10;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  double v24;
  double v25;
  double v26;
  _WORD *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  double v32;
  double v33;
  int v34;
  _WORD *v35;
  int v36;
  __int16 v37;
  _WORD *v39;
  int v40;
  __int16 v41;
  _WORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  double v48;
  double v49;
  int v50;
  _WORD *v51;
  int v52;
  __int16 v53;
  _WORD *v55;
  int v56;
  __int16 v57;
  _WORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  double v64;
  double v65;
  int v66;
  _WORD *v67;
  int v68;
  __int16 v69;
  int v71;
  _WORD *v72;
  int v73;
  __int16 v74;
  int v76;

  v3 = (int *)(result + 738472);
  v4 = (int *)(result + 189856);
  v5 = *(_DWORD *)(result + 742132);
  if (!*(_DWORD *)(result + 738572))
  {
    v10 = *v4;
    v11 = *(_DWORD *)(result + 738488);
    v12 = &kf_low_motion_minq_12;
    if (v10 == 10)
      v12 = &kf_low_motion_minq_10;
    v13 = &kf_high_motion_minq_12;
    if (v10 == 10)
      v13 = &kf_high_motion_minq_10;
    if (v10 == 8)
      v12 = &kf_low_motion_minq_8;
    v14 = &kf_high_motion_minq_8;
    if (v10 != 8)
      v14 = v13;
    if (v11 < 4801)
    {
      if (v11 > 299)
      {
        v20 = 4 * v5;
        v21 = *(_DWORD *)((char *)v14 + v20);
        LODWORD(v20) = *(_DWORD *)((char *)v12 + v20);
        v22 = 1954687339 * ((v21 - (int)v20) * (4800 - v11) + 2250);
        v15 = (v22 >> 43) + ((unint64_t)v22 >> 63) + v20;
      }
      else
      {
        v15 = v14[v5];
      }
    }
    else
    {
      v15 = v12[v5];
    }
    v23 = *(_DWORD *)(result + 742124);
    if (v23 > 98)
      v15 /= 4;
    if (v15 <= 1)
      v15 = 1;
    if (v5 < v15)
      v15 = *(_DWORD *)(result + 742132);
    v24 = 0.75;
    if (*(_DWORD *)(result + 171992) * *(_DWORD *)(result + 171988) >= 101377)
      v24 = 1.0;
    v25 = 0.015625;
    if (v10 == 10)
      v25 = 0.0625;
    v26 = 0.25;
    if (v10 == 8)
    {
      v25 = 0.25;
      v27 = &ac_qlookup_0;
    }
    else if (v10 == 12)
    {
      v27 = &ac_qlookup_12;
    }
    else
    {
      v26 = -1.0;
      if (v10 != 10)
      {
LABEL_52:
        v29 = *(_DWORD *)(result + 738728);
        v30 = *(_DWORD *)(result + 738732);
        v31 = v29;
        if (v30 >= v29)
        {
LABEL_86:
          *a3 = v5;
          *a2 = v15 - v31 + v29;
          return result;
        }
        v32 = v25 * v26;
        v33 = ((double)v23 * -0.001 + 0.05 + v24) * v32;
        v34 = *(_DWORD *)(result + 738732);
        while (1)
        {
          if (v10 == 8)
          {
            v35 = &ac_qlookup_0;
            goto LABEL_55;
          }
          if (v10 == 12)
            break;
          if (v10 == 10)
          {
            v35 = &ac_qlookup_10;
            goto LABEL_55;
          }
          v37 = -1;
LABEL_59:
          ++v34;
          if (v25 * (double)v37 >= v32 || v34 >= v29)
          {
            v31 = v34 - 1;
            while (1)
            {
              if (v10 == 8)
              {
                v39 = &ac_qlookup_0;
                goto LABEL_71;
              }
              if (v10 == 12)
                break;
              if (v10 == 10)
              {
                v39 = &ac_qlookup_10;
                goto LABEL_71;
              }
              v41 = -1;
LABEL_75:
              result = v41;
              ++v30;
              if (v25 * (double)(int)result >= v33 || v30 >= v29)
              {
                v29 = v30 - 1;
                goto LABEL_86;
              }
            }
            v39 = &ac_qlookup_12;
LABEL_71:
            if (v30 >= 255)
              v40 = 255;
            else
              v40 = v30;
            v41 = v39[v40 & ~(v40 >> 31)];
            goto LABEL_75;
          }
        }
        v35 = &ac_qlookup_12;
LABEL_55:
        if (v34 >= 255)
          v36 = 255;
        else
          v36 = v34;
        v37 = v35[v36 & ~(v36 >> 31)];
        goto LABEL_59;
      }
      v27 = &ac_qlookup_10;
    }
    if (v15 >= 255)
      v28 = 255;
    else
      v28 = v15;
    LOWORD(v26) = v27[v28 & ~(v28 >> 31)];
    v26 = (double)vmovl_s16(*(int16x4_t *)&v26).i32[0];
    goto LABEL_52;
  }
  if (*(int *)(result + 742128) < 95)
  {
    v16 = *v3;
    v17 = *v4;
    v18 = 0.015625;
    if (*v4 == 10)
      v18 = 0.0625;
    v19 = 0.25;
    if (v17 == 8)
    {
      v18 = 0.25;
      v59 = &ac_qlookup_0;
    }
    else if (v17 == 12)
    {
      v59 = &ac_qlookup_12;
    }
    else
    {
      v19 = -1.0;
      if (v17 != 10)
      {
LABEL_134:
        v61 = *(_DWORD *)(result + 738728);
        v62 = *(_DWORD *)(result + 738732);
        v63 = v61;
        if (v62 >= v61)
        {
LABEL_168:
          v76 = v16 - v63 + v61;
          if (v76 <= v62)
            v76 = v62;
          *a3 = v5;
          *a2 = v76;
          return result;
        }
        v64 = v18 * v19;
        v65 = v18 * v19 * 0.75;
        v66 = *(_DWORD *)(result + 738732);
        while (1)
        {
          if (v17 == 8)
          {
            v67 = &ac_qlookup_0;
            goto LABEL_137;
          }
          if (v17 == 12)
            break;
          if (v17 == 10)
          {
            v67 = &ac_qlookup_10;
            goto LABEL_137;
          }
          v69 = -1;
LABEL_141:
          ++v66;
          if (v18 * (double)v69 >= v64 || v66 >= v61)
          {
            v63 = v66 - 1;
            v71 = v62;
            result = (unint64_t)&ac_qlookup_10;
            while (1)
            {
              if (v17 == 8)
              {
                v72 = &ac_qlookup_0;
                goto LABEL_153;
              }
              if (v17 == 12)
                break;
              if (v17 == 10)
              {
                v72 = &ac_qlookup_10;
                goto LABEL_153;
              }
              v74 = -1;
LABEL_157:
              ++v71;
              if (v18 * (double)v74 >= v65 || v71 >= v61)
              {
                v61 = v71 - 1;
                goto LABEL_168;
              }
            }
            v72 = &ac_qlookup_12;
LABEL_153:
            if (v71 >= 255)
              v73 = 255;
            else
              v73 = v71;
            v74 = v72[v73 & ~(v73 >> 31)];
            goto LABEL_157;
          }
        }
        v67 = &ac_qlookup_12;
LABEL_137:
        if (v66 >= 255)
          v68 = 255;
        else
          v68 = v66;
        v69 = v67[v68 & ~(v68 >> 31)];
        goto LABEL_141;
      }
      v59 = &ac_qlookup_10;
    }
    if (v16 >= 255)
      v60 = 255;
    else
      v60 = *v3;
    LOWORD(v19) = v59[v60 & ~(v60 >> 31)];
    v19 = (double)vmovl_s16(*(int16x4_t *)&v19).i32[0];
    goto LABEL_134;
  }
  v6 = *(_DWORD *)(result + 738476);
  if (v6 >= *v3)
    v6 = *v3;
  v7 = *v4;
  v8 = 0.015625;
  if (*v4 == 10)
    v8 = 0.0625;
  v9 = 0.25;
  if (v7 == 8)
  {
    v8 = 0.25;
    v43 = &ac_qlookup_0;
LABEL_88:
    if (v6 >= 255)
      v44 = 255;
    else
      v44 = v6;
    LOWORD(v9) = v43[v44 & ~(v44 >> 31)];
    v9 = (double)vmovl_s16(*(int16x4_t *)&v9).i32[0];
    goto LABEL_92;
  }
  if (v7 == 12)
  {
    v43 = &ac_qlookup_12;
    goto LABEL_88;
  }
  v9 = -1.0;
  if (v7 == 10)
  {
    v43 = &ac_qlookup_10;
    goto LABEL_88;
  }
LABEL_92:
  v45 = *(_DWORD *)(result + 738728);
  v46 = *(_DWORD *)(result + 738732);
  v47 = v45;
  if (v46 >= v45)
    goto LABEL_126;
  v48 = v8 * v9;
  v49 = v8 * v9 * 1.25;
  v50 = *(_DWORD *)(result + 738732);
  do
  {
    switch(v7)
    {
      case 8:
        v51 = &ac_qlookup_0;
        break;
      case 12:
        v51 = &ac_qlookup_12;
        break;
      case 10:
        v51 = &ac_qlookup_10;
        break;
      default:
        v53 = -1;
        goto LABEL_99;
    }
    if (v50 >= 255)
      v52 = 255;
    else
      v52 = v50;
    v53 = v51[v52 & ~(v52 >> 31)];
LABEL_99:
    ++v50;
  }
  while (v8 * (double)v53 < v48 && v50 < v45);
  v47 = v50 - 1;
  do
  {
    switch(v7)
    {
      case 8:
        v55 = &ac_qlookup_0;
        break;
      case 12:
        v55 = &ac_qlookup_12;
        break;
      case 10:
        v55 = &ac_qlookup_10;
        break;
      default:
        v57 = -1;
        goto LABEL_115;
    }
    if (v46 >= 255)
      v56 = 255;
    else
      v56 = v46;
    v57 = v55[v56 & ~(v56 >> 31)];
LABEL_115:
    result = v57;
    ++v46;
  }
  while (v8 * (double)(int)result < v49 && v46 < v45);
  v45 = v46 - 1;
LABEL_126:
  if (v6 - v47 + v45 < v5)
    v5 = v6 - v47 + v45;
  *a3 = v5;
  *a2 = v6;
  return result;
}

uint64_t vp9_rc_pick_q_and_bounds(unint64_t a1, int *a2, int *a3, double a4, double a5, double a6, double a7)
{
  int *v8;
  unsigned __int8 *v10;
  unint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int active;
  unsigned int v21;
  _DWORD *v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _DWORD *v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  _WORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  int v46;
  _WORD *v47;
  int v48;
  __int16 v49;
  int v51;
  _WORD *v52;
  int v53;
  __int16 v54;
  int v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  _DWORD *v64;
  _DWORD *v65;
  int v66;
  _WORD *v67;
  int v68;
  __int16 v69;
  int v70;
  int v71;
  int v72;
  double v73;
  int v74;
  _WORD *v75;
  int v76;
  __int16 v77;
  int v79;
  _WORD *v80;
  int v81;
  __int16 v82;
  int v84;
  int v85;
  int v86;
  _WORD *v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  int v92;
  double v93;
  int v94;
  _WORD *v95;
  int v96;
  __int16 v97;
  int v99;
  _WORD *v100;
  int v101;
  __int16 v102;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  _WORD *v108;
  int v109;
  int v110;
  int v111;
  double v112;
  int v113;
  _WORD *v114;
  int v115;
  __int16 v116;
  _WORD *v118;
  int v119;
  __int16 v120;
  int v122;
  int v123;
  unsigned int v124;
  int *v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  _WORD *v130;
  int v131;
  __int16 v132;
  int v133;
  int v134;
  int v135;
  double v136;
  int v137;
  _WORD *v138;
  int v139;
  __int16 v140;
  _WORD *v142;
  int v143;
  __int16 v144;
  int v146;
  int *v147;
  double v148;
  _WORD *v149;
  int *v150;
  _WORD *v151;
  int v152;
  __int16 v153;
  int v154;
  double v155;
  int v156;
  _WORD *v157;
  int v158;
  __int16 v159;
  int v161;
  _WORD *v162;
  int v163;
  __int16 v164;
  int v166;
  unsigned int v167;
  unsigned int v168;
  int v169;
  _WORD *v170;
  int v171;
  int v172;
  int v173;
  double v174;
  int v175;
  _WORD *v176;
  int v177;
  __int16 v178;
  double v179;
  _WORD *v180;
  int v181;
  int v182;
  _WORD *v183;
  int v184;
  __int16 v185;
  double v186;
  int v187;
  uint64_t v188;
  _DWORD *v189;
  _DWORD *v190;
  int v191;
  _DWORD *v192;
  int v193;
  _DWORD *v194;
  int v195;
  _DWORD *v196;
  _DWORD *v197;
  int v198;
  _DWORD *v199;
  BOOL v200;
  _DWORD *v201;
  _DWORD *v202;
  int v203;
  __int16 v204;
  int v205;
  int v206;
  int v207;
  int v208;
  _WORD *v209;
  int v210;
  __int16 v211;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  _WORD *v218;
  int v219;
  __int16 v220;
  uint64_t v222;
  int v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  int v231;
  int v232;

  v8 = a2;
  v10 = (unsigned __int8 *)(a1 + 742180);
  v11 = a1 + 738712;
  v12 = (unsigned int *)(a1 + 189844);
  if (*(_DWORD *)(a1 + 190076))
  {
    v13 = vp9_rc_pick_q_and_bounds_two_pass(a1, a2, a3, *v10, a4, a5, a6, a7);
    goto LABEL_3;
  }
  v16 = (_DWORD *)(a1 + 850432);
  v17 = (_DWORD *)(a1 + 738452);
  v18 = *(_DWORD *)(a1 + 190092);
  if (v18 != 1)
  {
    v26 = *(_DWORD *)(a1 + 190144);
    if (v18 == 2 && *(uint64_t *)v11 >= 1)
    {
      a4 = (double)*(uint64_t *)(a1 + 738704) / (double)*(uint64_t *)v11;
      a5 = 0.1;
      if (a4 < 0.1)
      {
        a6 = (double)v26;
        a4 = a4 * (double)v26 / 0.1;
        v26 = (int)a4;
      }
    }
    v27 = *v12;
    v28 = *(_DWORD *)(a1 + 172972);
    if (v28)
    {
      if (!*(_DWORD *)(a1 + 738588)
        && !*(_DWORD *)(a1 + 747508)
        && (*(_DWORD *)(a1 + 194560) || *(_DWORD *)(a1 + 194564)))
      {
        if (v27 == 1)
        {
          v31 = (5 * *(_DWORD *)(a1 + 738464)) >> 2;
LABEL_105:
          v56 = *(_DWORD *)(a1 + 738728);
          if (v31 >= v56)
            LODWORD(v57) = *(_DWORD *)(a1 + 738728);
          else
            LODWORD(v57) = v31;
          v58 = *(_DWORD *)(a1 + 189856);
          v59 = &inter_minq_12;
          if (v58 == 10)
            v59 = &inter_minq_10;
          if (v58 == 8)
            v59 = &inter_minq_8;
          if (!v28 || *(_BYTE *)(a1 + 172988))
          {
            if (v18 == 3)
            {
              a4 = 0.015625;
              if (v58 == 10)
                a4 = 0.0625;
              a5 = 0.25;
              switch(v58)
              {
                case 8:
                  a4 = 0.25;
                  v67 = ac_qlookup_0;
                  break;
                case 12:
                  v67 = ac_qlookup_12;
                  break;
                case 10:
                  v67 = ac_qlookup_10;
                  break;
                default:
                  v69 = -1;
                  v70 = *(_DWORD *)(a1 + 738732);
                  v71 = *(_DWORD *)(a1 + 738728);
                  v72 = v71;
                  if (v70 >= v56)
                  {
LABEL_189:
                    v84 = v26 - v71 + v72;
                    if (v84 > v70)
                      v70 = v84;
                    goto LABEL_433;
                  }
                  goto LABEL_156;
              }
              if (v26 >= 255)
                v68 = 255;
              else
                v68 = v26;
              v69 = v67[v68 & ~(v68 >> 31)];
              v70 = *(_DWORD *)(a1 + 738732);
              v71 = *(_DWORD *)(a1 + 738728);
              v72 = v71;
              if (v70 >= v56)
                goto LABEL_189;
LABEL_156:
              v73 = a4 * (double)v69;
              a5 = v73 * 0.25;
              v74 = v70;
              while (1)
              {
                if (v58 == 8)
                {
                  v75 = ac_qlookup_0;
                  goto LABEL_158;
                }
                if (v58 == 12)
                  break;
                if (v58 == 10)
                {
                  v75 = ac_qlookup_10;
                  goto LABEL_158;
                }
                v77 = -1;
LABEL_162:
                a7 = a4 * (double)v77;
                ++v74;
                if (a7 >= v73 || v74 >= v56)
                {
                  v71 = v74 - 1;
                  v79 = v70;
                  while (1)
                  {
                    if (v58 == 8)
                    {
                      v80 = ac_qlookup_0;
                      goto LABEL_174;
                    }
                    if (v58 == 12)
                      break;
                    if (v58 == 10)
                    {
                      v80 = ac_qlookup_10;
                      goto LABEL_174;
                    }
                    v82 = -1;
LABEL_178:
                    a6 = a4 * (double)v82;
                    ++v79;
                    if (a6 >= a5 || v79 >= v56)
                    {
                      v72 = v79 - 1;
                      goto LABEL_189;
                    }
                  }
                  v80 = ac_qlookup_12;
LABEL_174:
                  if (v79 >= 255)
                    v81 = 255;
                  else
                    v81 = v79;
                  v82 = v80[v81 & ~(v81 >> 31)];
                  goto LABEL_178;
                }
              }
              v75 = ac_qlookup_12;
LABEL_158:
              if (v74 >= 255)
                v76 = 255;
              else
                v76 = v74;
              v77 = v75[v76 & ~(v76 >> 31)];
              goto LABEL_162;
            }
            if (*(_DWORD *)(a1 + 738572))
            {
              v60 = *(_DWORD *)(a1 + 738472);
              a4 = 0.015625;
              if (v58 == 10)
                a4 = 0.0625;
              a5 = 0.25;
              switch(v58)
              {
                case 8:
                  a4 = 0.25;
                  v87 = ac_qlookup_0;
                  break;
                case 12:
                  v87 = ac_qlookup_12;
                  break;
                case 10:
                  v87 = ac_qlookup_10;
                  break;
                default:
                  v89 = -1;
                  v90 = *(_DWORD *)(a1 + 738732);
                  v91 = *(_DWORD *)(a1 + 738728);
                  v92 = v91;
                  if (v90 >= v56)
                    goto LABEL_242;
LABEL_209:
                  v93 = a4 * (double)v89;
                  a5 = v93 * 0.75;
                  v94 = v90;
                  while (1)
                  {
                    if (v58 == 8)
                    {
                      v95 = ac_qlookup_0;
                      goto LABEL_211;
                    }
                    if (v58 == 12)
                      break;
                    if (v58 == 10)
                    {
                      v95 = ac_qlookup_10;
                      goto LABEL_211;
                    }
                    v97 = -1;
LABEL_215:
                    a7 = a4 * (double)v97;
                    ++v94;
                    if (a7 >= v93 || v94 >= v56)
                    {
                      v91 = v94 - 1;
                      v99 = v90;
                      while (1)
                      {
                        if (v58 == 8)
                        {
                          v100 = ac_qlookup_0;
                          goto LABEL_227;
                        }
                        if (v58 == 12)
                          break;
                        if (v58 == 10)
                        {
                          v100 = ac_qlookup_10;
                          goto LABEL_227;
                        }
                        v102 = -1;
LABEL_231:
                        a6 = a4 * (double)v102;
                        ++v99;
                        if (a6 >= a5 || v99 >= v56)
                        {
                          v92 = v99 - 1;
                          goto LABEL_242;
                        }
                      }
                      v100 = ac_qlookup_12;
LABEL_227:
                      if (v99 >= 255)
                        v101 = 255;
                      else
                        v101 = v99;
                      v102 = v100[v101 & ~(v101 >> 31)];
                      goto LABEL_231;
                    }
                  }
                  v95 = ac_qlookup_12;
LABEL_211:
                  if (v94 >= 255)
                    v96 = 255;
                  else
                    v96 = v94;
                  v97 = v95[v96 & ~(v96 >> 31)];
                  goto LABEL_215;
              }
              if (v60 >= 255)
                v88 = 255;
              else
                v88 = *(_DWORD *)(a1 + 738472);
              v89 = v87[v88 & ~(v88 >> 31)];
              v90 = *(_DWORD *)(a1 + 738732);
              v91 = *(_DWORD *)(a1 + 738728);
              v92 = v91;
              if (v90 >= v56)
              {
LABEL_242:
                v104 = v60 - v91;
                goto LABEL_431;
              }
              goto LABEL_209;
            }
            v61 = &kf_low_motion_minq_12;
            v62 = *(int *)(a1 + 738616);
            v63 = *(_DWORD *)(a1 + 738488);
            if (v58 == 10)
              v61 = &kf_low_motion_minq_10;
            v64 = &kf_high_motion_minq_12;
            if (v58 == 10)
              v64 = &kf_high_motion_minq_10;
            if (v58 == 8)
              v61 = &kf_low_motion_minq_8;
            v65 = &kf_high_motion_minq_8;
            if (v58 != 8)
              v65 = v64;
            if (v63 < 4801)
            {
              if (v63 > 299)
              {
                v127 = 4 * v62;
                v128 = *(_DWORD *)((char *)v65 + v127);
                LODWORD(v127) = *(_DWORD *)((char *)v61 + v127);
                v129 = 1954687339 * ((v128 - (int)v127) * (4800 - v63) + 2250);
                v66 = (v129 >> 43) + ((unint64_t)v129 >> 63) + v127;
              }
              else
              {
                v66 = v65[v62];
              }
            }
            else
            {
              v66 = v61[v62];
            }
            a5 = 0.75;
            if (*(_DWORD *)(a1 + 171992) * *(_DWORD *)(a1 + 171988) >= 101377)
              a5 = 1.0;
            a4 = 0.015625;
            if (v58 == 10)
              a4 = 0.0625;
            a6 = 0.25;
            switch(v58)
            {
              case 8:
                a4 = 0.25;
                v130 = ac_qlookup_0;
                break;
              case 12:
                v130 = ac_qlookup_12;
                break;
              case 10:
                v130 = ac_qlookup_10;
                break;
              default:
                v132 = -1;
LABEL_339:
                v133 = *(_DWORD *)(a1 + 738732);
                v134 = *(_DWORD *)(a1 + 738728);
                v135 = v134;
                if (v133 >= v56)
                  goto LABEL_373;
                v136 = a4 * (double)v132;
                a5 = a5 * v136;
                v137 = *(_DWORD *)(a1 + 738732);
                while (1)
                {
                  if (v58 == 8)
                  {
                    v138 = ac_qlookup_0;
                    goto LABEL_342;
                  }
                  if (v58 == 12)
                    break;
                  if (v58 == 10)
                  {
                    v138 = ac_qlookup_10;
                    goto LABEL_342;
                  }
                  v140 = -1;
LABEL_346:
                  a7 = a4 * (double)v140;
                  ++v137;
                  if (a7 >= v136 || v137 >= v56)
                  {
                    v134 = v137 - 1;
                    while (1)
                    {
                      if (v58 == 8)
                      {
                        v142 = ac_qlookup_0;
                        goto LABEL_358;
                      }
                      if (v58 == 12)
                        break;
                      if (v58 == 10)
                      {
                        v142 = ac_qlookup_10;
                        goto LABEL_358;
                      }
                      v144 = -1;
LABEL_362:
                      a6 = a4 * (double)v144;
                      ++v133;
                      if (a6 >= a5 || v133 >= v56)
                      {
                        v135 = v133 - 1;
LABEL_373:
                        v70 = v66 - v134 + v135;
LABEL_433:
                        v166 = *(_DWORD *)(v11 + 20);
                        if (v70 >= v56)
                          v167 = v56;
                        else
                          v167 = v70;
                        if (v70 >= v166)
                          v14 = v167;
                        else
                          v14 = v166;
                        if ((int)v57 <= (int)v14)
                          v57 = v14;
                        else
                          v57 = v57;
                        *a3 = v57;
                        *v8 = v14;
                        if (!v28 && !v17[30] && *v12)
                        {
                          v169 = *(_DWORD *)(v11 + 16);
                          a4 = 0.015625;
                          if (v58 == 10)
                            a4 = 0.0625;
                          a5 = 0.25;
                          if (v58 == 8)
                          {
                            a4 = 0.25;
                            v180 = ac_qlookup_0;
                            goto LABEL_488;
                          }
                          if (v58 == 12)
                          {
                            v180 = ac_qlookup_12;
LABEL_488:
                            if ((int)v57 >= 255)
                              v181 = 255;
                            else
                              v181 = v57;
                            LOWORD(a5) = v180[v181 & ~(v181 >> 31)];
                            a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
                          }
                          else
                          {
                            a5 = -1.0;
                            if (v58 == 10)
                            {
                              v180 = ac_qlookup_10;
                              goto LABEL_488;
                            }
                          }
                          v173 = *(_DWORD *)(v11 + 20);
                          if (v173 >= v169)
                            goto LABEL_509;
                          v182 = 2 * (int)((double)(((int)(a4 * a5 * 2700000.0) >> 12) + 2700000) / (a4 * a5));
                          while (2)
                          {
                            switch(v58)
                            {
                              case 8:
                                v183 = ac_qlookup_0;
                                break;
                              case 12:
                                v183 = ac_qlookup_12;
                                break;
                              case 10:
                                v183 = ac_qlookup_10;
                                break;
                              default:
                                v185 = -1;
LABEL_505:
                                v186 = a4 * (double)v185;
                                a6 = (double)(((int)(v186 * 2700000.0) >> 12) + 2700000);
                                a5 = a6 / v186;
                                if (v182 >= (int)a5)
                                  goto LABEL_508;
                                if (v169 == ++v173)
                                  goto LABEL_509;
                                continue;
                            }
                            break;
                          }
                          if (v173 >= 255)
                            v184 = 255;
                          else
                            v184 = v173;
                          v185 = v183[v184 & ~(v184 >> 31)];
                          goto LABEL_505;
                        }
                        if (v17[34])
                        {
                          v168 = 0;
                          goto LABEL_510;
                        }
                        if (v12[1179] || (v168 = v12[1180]) != 0)
                        {
                          v169 = *(_DWORD *)(v11 + 16);
                          a4 = 0.015625;
                          if (v58 == 10)
                            a4 = 0.0625;
                          a5 = 0.25;
                          if (v58 == 8)
                          {
                            a4 = 0.25;
                            v170 = ac_qlookup_0;
                            goto LABEL_464;
                          }
                          if (v58 == 12)
                          {
                            v170 = ac_qlookup_12;
LABEL_464:
                            if ((int)v57 >= 255)
                              v171 = 255;
                            else
                              v171 = v57;
                            LOWORD(a5) = v170[v171 & ~(v171 >> 31)];
                            a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
                          }
                          else
                          {
                            a5 = -1.0;
                            if (v58 == 10)
                            {
                              v170 = ac_qlookup_10;
                              goto LABEL_464;
                            }
                          }
                          if (v28)
                            v172 = 1800000;
                          else
                            v172 = 2700000;
                          v173 = *(_DWORD *)(v11 + 20);
                          if (v173 >= v169)
                          {
LABEL_509:
                            v168 = v169 - v57;
                            goto LABEL_510;
                          }
                          v174 = a4 * a5;
                          a5 = (double)v172;
                          v175 = (int)((double)(int)((double)(v172 + ((int)(v174 * (double)v172) >> 12)) / v174) * 1.75);
                          while (2)
                          {
                            switch(v58)
                            {
                              case 8:
                                v176 = ac_qlookup_0;
                                break;
                              case 12:
                                v176 = ac_qlookup_12;
                                break;
                              case 10:
                                v176 = ac_qlookup_10;
                                break;
                              default:
                                v178 = -1;
LABEL_484:
                                v179 = a4 * (double)v178;
                                a7 = (double)(v172 + ((int)(v179 * a5) >> 12));
                                a6 = a7 / v179;
                                if ((int)a6 <= v175)
                                {
LABEL_508:
                                  v169 = v173;
                                  goto LABEL_509;
                                }
                                if (v169 == ++v173)
                                  goto LABEL_509;
                                continue;
                            }
                            break;
                          }
                          if (v173 >= 255)
                            v177 = 255;
                          else
                            v177 = v173;
                          v178 = v176[v177 & ~(v177 >> 31)];
                          goto LABEL_484;
                        }
LABEL_510:
                        if (*(_DWORD *)(v11 + 344) && *(_DWORD *)(v11 + 1420))
                          v168 = 0;
                        v187 = v168 + v57;
                        *a3 = v187;
                        if (v187 <= *v8)
                          v187 = *v8;
                        *a3 = v187;
                        if (v18 == 3)
                          goto LABEL_4;
                        if (v28)
                          goto LABEL_519;
LABEL_517:
                        if (!v17[30])
                          goto LABEL_519;
                        v14 = v17[5];
                        goto LABEL_4;
                      }
                    }
                    v142 = ac_qlookup_12;
LABEL_358:
                    if (v133 >= 255)
                      v143 = 255;
                    else
                      v143 = v133;
                    v144 = v142[v143 & ~(v143 >> 31)];
                    goto LABEL_362;
                  }
                }
                v138 = ac_qlookup_12;
LABEL_342:
                if (v137 >= 255)
                  v139 = 255;
                else
                  v139 = v137;
                v140 = v138[v139 & ~(v139 >> 31)];
                goto LABEL_346;
            }
            if (v66 >= 255)
              v131 = 255;
            else
              v131 = v66;
            v132 = v130[v131 & ~(v131 >> 31)];
            goto LABEL_339;
          }
          if (!*(_DWORD *)(a1 + 738588) && (*(_DWORD *)(a1 + 194560) || *(_DWORD *)(a1 + 194564)))
          {
            if (*(int *)(a1 + 738568) < 2)
            {
              v85 = *(_DWORD *)(a1 + 738616);
            }
            else
            {
              v85 = *(_DWORD *)(a1 + 738620);
              if (v85 >= (int)v57)
                v85 = v57;
            }
            if (v18 != 3)
            {
              if (v18 == 2)
              {
                if (v85 <= v26)
                  v85 = v26;
                if (*v16)
                  v126 = (int *)(a1 + 4 * *v10 + 745964);
                else
                  v126 = (int *)(a1 + 738480);
                v190 = &arfgf_low_motion_minq_12;
                v191 = *v126;
                if (v58 == 10)
                  v190 = &arfgf_low_motion_minq_10;
                v192 = &arfgf_high_motion_minq_12;
                if (v58 == 10)
                  v192 = &arfgf_high_motion_minq_10;
                if (v58 == 8)
                {
                  v190 = &arfgf_low_motion_minq_8;
                  v192 = &arfgf_high_motion_minq_8;
                }
                if (v191 < 2001)
                {
                  if (v191 > 399)
                  {
                    v222 = 4 * v85;
                    v223 = *(_DWORD *)((char *)v192 + v222);
                    LODWORD(v222) = *(_DWORD *)((char *)v190 + v222);
                    v224 = 1374389535 * ((v223 - (int)v222) * (2000 - v191) + 800);
                    v193 = (v224 >> 41) + ((unint64_t)v224 >> 63) + v222;
                  }
                  else
                  {
                    v193 = v192[v85];
                  }
                }
                else
                {
                  v193 = v190[v85];
                }
                v70 = 15 * v193 / 16;
              }
              else
              {
                if (*v16)
                  v150 = (int *)(a1 + 4 * *v10 + 745964);
                else
                  v150 = (int *)(a1 + 738480);
                v194 = &arfgf_low_motion_minq_12;
                v195 = *v150;
                if (v58 == 10)
                  v194 = &arfgf_low_motion_minq_10;
                v196 = &arfgf_high_motion_minq_12;
                if (v58 == 10)
                  v196 = &arfgf_high_motion_minq_10;
                if (v58 == 8)
                {
                  v194 = &arfgf_low_motion_minq_8;
                  v196 = &arfgf_high_motion_minq_8;
                }
                if (v195 < 2001)
                {
                  if (v195 > 399)
                  {
                    v225 = 4 * v85;
                    v226 = *(_DWORD *)((char *)v196 + v225);
                    LODWORD(v225) = *(_DWORD *)((char *)v194 + v225);
                    v227 = 1374389535 * ((v226 - (int)v225) * (2000 - v195) + 800);
                    v70 = (v227 >> 41) + ((unint64_t)v227 >> 63) + v225;
                  }
                  else
                  {
                    v70 = v196[v85];
                  }
                }
                else
                {
                  v70 = v194[v85];
                }
              }
              goto LABEL_433;
            }
            v148 = 0.015625;
            if (v58 == 10)
              v148 = 0.0625;
            a5 = 0.25;
            if (v58 == 8)
            {
              v149 = ac_qlookup_0;
            }
            else
            {
              a5 = v148;
              if (v58 == 12)
              {
                v149 = ac_qlookup_12;
              }
              else
              {
                if (v58 != 10)
                {
                  v204 = -1;
LABEL_565:
                  a4 = a5 * (double)v204;
                  v205 = *(_DWORD *)(a1 + 738732);
                  if (!*(_DWORD *)(a1 + 194564))
                  {
                    v232 = *(_DWORD *)(a1 + 190092);
                    v213 = *(_DWORD *)(a1 + 172972);
                    v214 = v57;
                    v215 = v26;
                    v231 = *(_DWORD *)(a1 + 738732);
                    v216 = vp9_compute_qdelta(*(_DWORD *)(a1 + 738728), v205, v58, a4, a4 * 0.5);
                    v205 = v231;
                    v26 = v215;
                    LODWORD(v57) = v214;
                    v28 = v213;
                    v18 = v232;
                    v17 = (_DWORD *)(a1 + 738452);
                    goto LABEL_602;
                  }
                  v206 = *(_DWORD *)(a1 + 738728);
                  v207 = v206;
                  if (v205 >= v56)
                    goto LABEL_601;
                  a6 = a4 * 0.4;
                  v208 = *(_DWORD *)(a1 + 738732);
                  while (1)
                  {
                    if (v58 == 8)
                    {
                      v209 = ac_qlookup_0;
                      goto LABEL_569;
                    }
                    if (v58 == 12)
                      break;
                    if (v58 == 10)
                    {
                      v209 = ac_qlookup_10;
                      goto LABEL_569;
                    }
                    v211 = -1;
LABEL_573:
                    a7 = a5 * (double)v211;
                    ++v208;
                    if (a7 >= a4 || v208 >= v56)
                    {
                      v206 = v208 - 1;
                      v217 = *(_DWORD *)(a1 + 738732);
                      while (1)
                      {
                        if (v58 == 8)
                        {
                          v218 = ac_qlookup_0;
                          goto LABEL_586;
                        }
                        if (v58 == 12)
                          break;
                        if (v58 == 10)
                        {
                          v218 = ac_qlookup_10;
                          goto LABEL_586;
                        }
                        v220 = -1;
LABEL_590:
                        a4 = a5 * (double)v220;
                        ++v217;
                        if (a4 >= a6 || v217 >= v56)
                        {
                          v207 = v217 - 1;
LABEL_601:
                          v216 = v207 - v206;
LABEL_602:
                          v70 = v216 + v26;
                          if (v216 + v26 <= v205)
                            v70 = v205;
                          goto LABEL_433;
                        }
                      }
                      v218 = ac_qlookup_12;
LABEL_586:
                      if (v217 >= 255)
                        v219 = 255;
                      else
                        v219 = v217;
                      v220 = v218[v219 & ~(v219 >> 31)];
                      goto LABEL_590;
                    }
                  }
                  v209 = ac_qlookup_12;
LABEL_569:
                  if (v208 >= 255)
                    v210 = 255;
                  else
                    v210 = v208;
                  v211 = v209[v210 & ~(v210 >> 31)];
                  goto LABEL_573;
                }
                v149 = ac_qlookup_10;
              }
            }
            if (v26 >= 255)
              v203 = 255;
            else
              v203 = v26;
            v204 = v149[v203 & ~(v203 >> 31)];
            goto LABEL_565;
          }
          if (v18 != 3)
          {
            if (v27 < 2)
            {
              v86 = *(_DWORD *)(a1 + 738616);
            }
            else
            {
              v86 = *(_DWORD *)(a1 + 738620);
              if (v86 >= (int)v57)
                v86 = v57;
            }
            v70 = v59[v86];
            if (v70 < v26 && v18 == 2)
              v70 = v26;
            goto LABEL_433;
          }
          a4 = 0.015625;
          if (v58 == 10)
            a4 = 0.0625;
          a5 = 0.25;
          switch(v58)
          {
            case 8:
              a4 = 0.25;
              v151 = ac_qlookup_0;
              break;
            case 12:
              v151 = ac_qlookup_12;
              break;
            case 10:
              v151 = ac_qlookup_10;
              break;
            default:
              v153 = -1;
LABEL_396:
              v90 = *(_DWORD *)(a1 + 738732);
              v154 = *(_DWORD *)(a1 + 738728);
              v92 = v154;
              if (v90 >= v56)
                goto LABEL_430;
              v155 = a4 * (double)v153;
              a5 = dbl_208F4B958[v27 & 7] * v155;
              v156 = *(_DWORD *)(a1 + 738732);
              while (1)
              {
                if (v58 == 8)
                {
                  v157 = ac_qlookup_0;
                  goto LABEL_399;
                }
                if (v58 == 12)
                  break;
                if (v58 == 10)
                {
                  v157 = ac_qlookup_10;
                  goto LABEL_399;
                }
                v159 = -1;
LABEL_403:
                a7 = a4 * (double)v159;
                ++v156;
                if (a7 >= v155 || v156 >= v56)
                {
                  v154 = v156 - 1;
                  v161 = *(_DWORD *)(a1 + 738732);
                  while (1)
                  {
                    if (v58 == 8)
                    {
                      v162 = ac_qlookup_0;
                      goto LABEL_415;
                    }
                    if (v58 == 12)
                      break;
                    if (v58 == 10)
                    {
                      v162 = ac_qlookup_10;
                      goto LABEL_415;
                    }
                    v164 = -1;
LABEL_419:
                    a6 = a4 * (double)v164;
                    ++v161;
                    if (a6 >= a5 || v161 >= v56)
                    {
                      v92 = v161 - 1;
LABEL_430:
                      v104 = v26 - v154;
LABEL_431:
                      v70 = v104 + v92;
                      if (v70 <= v90)
                        v70 = v90;
                      goto LABEL_433;
                    }
                  }
                  v162 = ac_qlookup_12;
LABEL_415:
                  if (v161 >= 255)
                    v163 = 255;
                  else
                    v163 = v161;
                  v164 = v162[v163 & ~(v163 >> 31)];
                  goto LABEL_419;
                }
              }
              v157 = ac_qlookup_12;
LABEL_399:
              if (v156 >= 255)
                v158 = 255;
              else
                v158 = v156;
              v159 = v157[v158 & ~(v158 >> 31)];
              goto LABEL_403;
          }
          if (v26 >= 255)
            v152 = 255;
          else
            v152 = v26;
          v153 = v151[v152 & ~(v152 >> 31)];
          goto LABEL_396;
        }
        v29 = *(_DWORD *)(a1 + 738468);
        v30 = *(_DWORD *)(a1 + 738828);
LABEL_35:
        v31 = v30 * v29 / 100;
        goto LABEL_105;
      }
      if (v27 != 1)
      {
        v29 = *(_DWORD *)(a1 + 738620);
        v30 = *(_DWORD *)(a1 + 738824);
        goto LABEL_35;
      }
    }
    else if (!v27)
    {
      v31 = *(_DWORD *)(a1 + 738728);
      goto LABEL_105;
    }
    v31 = 2 * *(_DWORD *)(a1 + 738464);
    goto LABEL_105;
  }
  v19 = (_DWORD *)(a1 + 738452);
  active = calc_active_worst_quality_one_pass_cbr(a1);
  v21 = v12[3];
  v22 = &rtc_minq_12;
  if (v21 == 10)
    v22 = &rtc_minq_10;
  v23 = &rtc_minq_8;
  if (v21 != 8)
    v23 = v22;
  v24 = *(_DWORD *)(a1 + 172972);
  if (v24 && !*(_BYTE *)(a1 + 172988))
  {
    v17 = v19;
    if (!v19[34] && !*((_DWORD *)v10 + 1332) && v12[56] && (v12[1179] || v12[1180]))
    {
      if ((int)v19[29] < 2 || (v146 = v19[42], v146 >= active))
        v146 = active;
      if (*v16)
        v147 = (int *)(a1 + 4 * *v10 + 745964);
      else
        v147 = v19 + 7;
      v197 = &arfgf_low_motion_minq_12;
      v198 = *v147;
      if (v21 == 10)
        v197 = &arfgf_low_motion_minq_10;
      v199 = &arfgf_high_motion_minq_12;
      if (v21 == 10)
        v199 = &arfgf_high_motion_minq_10;
      v200 = v21 == 8;
      if (v21 == 8)
        v201 = &arfgf_low_motion_minq_8;
      else
        v201 = v197;
      v202 = &arfgf_high_motion_minq_8;
      if (!v200)
        v202 = v199;
      if (v198 < 2001)
      {
        if (v198 > 399)
        {
          v228 = v146;
          v229 = v201[v228];
          v230 = 1374389535 * ((v202[v228] - v229) * (2000 - v198) + 800);
          v32 = (v230 >> 41) + ((unint64_t)v230 >> 63) + v229;
        }
        else
        {
          v32 = v202[v146];
        }
      }
      else
      {
        v32 = v201[v146];
      }
      goto LABEL_293;
    }
    if (*v12 < 2)
    {
      v39 = (int)v19[41];
      if ((int)v39 < active)
        goto LABEL_53;
    }
    else
    {
      v39 = (int)v19[42];
      if ((int)v39 < active)
      {
LABEL_53:
        v32 = v23[v39];
        goto LABEL_293;
      }
    }
    v32 = v23[active];
    goto LABEL_293;
  }
  v17 = v19;
  if (v19[30])
  {
    v25 = v19[5];
    a4 = 0.015625;
    if (v21 == 10)
      a4 = 0.0625;
    a5 = 0.25;
    if (v21 == 8)
    {
      a4 = 0.25;
      v40 = ac_qlookup_0;
    }
    else if (v21 == 12)
    {
      v40 = ac_qlookup_12;
    }
    else
    {
      a5 = -1.0;
      if (v21 != 10)
      {
LABEL_60:
        v43 = *(_DWORD *)(v11 + 16);
        v42 = *(_DWORD *)(v11 + 20);
        v44 = v43;
        if (v42 >= v43)
        {
LABEL_94:
          if (v25 - v44 + v43 <= v42)
            v32 = *(_DWORD *)(v11 + 20);
          else
            v32 = v25 - v44 + v43;
          goto LABEL_293;
        }
        v45 = a4 * a5;
        a5 = a4 * a5 * 0.75;
        v46 = *(_DWORD *)(v11 + 20);
        while (1)
        {
          if (v21 == 8)
          {
            v47 = ac_qlookup_0;
            goto LABEL_63;
          }
          if (v21 == 12)
            break;
          if (v21 == 10)
          {
            v47 = ac_qlookup_10;
            goto LABEL_63;
          }
          v49 = -1;
LABEL_67:
          a7 = a4 * (double)v49;
          ++v46;
          if (a7 >= v45 || v46 >= v43)
          {
            v44 = v46 - 1;
            v51 = *(_DWORD *)(v11 + 20);
            while (1)
            {
              if (v21 == 8)
              {
                v52 = ac_qlookup_0;
                goto LABEL_79;
              }
              if (v21 == 12)
                break;
              if (v21 == 10)
              {
                v52 = ac_qlookup_10;
                goto LABEL_79;
              }
              v54 = -1;
LABEL_83:
              a6 = a4 * (double)v54;
              ++v51;
              if (a6 >= a5 || v51 >= v43)
              {
                v43 = v51 - 1;
                goto LABEL_94;
              }
            }
            v52 = ac_qlookup_12;
LABEL_79:
            if (v51 >= 255)
              v53 = 255;
            else
              v53 = v51;
            v54 = v52[v53 & ~(v53 >> 31)];
            goto LABEL_83;
          }
        }
        v47 = ac_qlookup_12;
LABEL_63:
        if (v46 >= 255)
          v48 = 255;
        else
          v48 = v46;
        v49 = v47[v48 & ~(v48 >> 31)];
        goto LABEL_67;
      }
      v40 = ac_qlookup_10;
    }
    if (v25 >= 255)
      v41 = 255;
    else
      v41 = v19[5];
    LOWORD(a5) = v40[v41 & ~(v41 >> 31)];
    a5 = (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
    goto LABEL_60;
  }
  v32 = *(_DWORD *)(v11 + 20);
  if (!*v12)
    goto LABEL_293;
  v33 = &kf_low_motion_minq_12;
  v34 = (int)v19[41];
  v35 = v19[9];
  if (v21 == 10)
    v33 = &kf_low_motion_minq_10;
  v36 = &kf_high_motion_minq_12;
  if (v21 == 10)
    v36 = &kf_high_motion_minq_10;
  if (v21 == 8)
    v33 = &kf_low_motion_minq_8;
  v37 = &kf_high_motion_minq_8;
  if (v21 != 8)
    v37 = v36;
  if (v35 < 4801)
  {
    if (v35 > 299)
    {
      v105 = 4 * v34;
      v106 = *(_DWORD *)((char *)v37 + v105);
      LODWORD(v105) = *(_DWORD *)((char *)v33 + v105);
      v107 = 1954687339 * ((v106 - (int)v105) * (4800 - v35) + 2250);
      v38 = (v107 >> 43) + ((unint64_t)v107 >> 63) + v105;
    }
    else
    {
      v38 = v37[v34];
    }
  }
  else
  {
    v38 = v33[v34];
  }
  a5 = 0.75;
  if (*(_DWORD *)(a1 + 171992) * *(_DWORD *)(a1 + 171988) >= 101377)
    a5 = 1.0;
  a4 = 0.015625;
  if (v21 == 10)
    a4 = 0.0625;
  a6 = 0.25;
  if (v21 == 8)
  {
    a4 = 0.25;
    v108 = ac_qlookup_0;
LABEL_254:
    if (v38 >= 255)
      v109 = 255;
    else
      v109 = v38;
    LOWORD(a6) = v108[v109 & ~(v109 >> 31)];
    a6 = (double)vmovl_s16(*(int16x4_t *)&a6).i32[0];
    goto LABEL_258;
  }
  if (v21 == 12)
  {
    v108 = ac_qlookup_12;
    goto LABEL_254;
  }
  a6 = -1.0;
  if (v21 == 10)
  {
    v108 = ac_qlookup_10;
    goto LABEL_254;
  }
LABEL_258:
  v110 = *(_DWORD *)(v11 + 16);
  v111 = v110;
  if (v32 >= v110)
    goto LABEL_292;
  v112 = a4 * a6;
  a5 = a5 * v112;
  v113 = *(_DWORD *)(v11 + 20);
  do
  {
    switch(v21)
    {
      case 8u:
        v114 = ac_qlookup_0;
        break;
      case 0xCu:
        v114 = ac_qlookup_12;
        break;
      case 0xAu:
        v114 = ac_qlookup_10;
        break;
      default:
        v116 = -1;
        goto LABEL_265;
    }
    if (v113 >= 255)
      v115 = 255;
    else
      v115 = v113;
    v116 = v114[v115 & ~(v115 >> 31)];
LABEL_265:
    a7 = a4 * (double)v116;
    ++v113;
  }
  while (a7 < v112 && v113 < v110);
  v111 = v113 - 1;
  do
  {
    switch(v21)
    {
      case 8u:
        v118 = ac_qlookup_0;
        break;
      case 0xCu:
        v118 = ac_qlookup_12;
        break;
      case 0xAu:
        v118 = ac_qlookup_10;
        break;
      default:
        v120 = -1;
        goto LABEL_281;
    }
    if (v32 >= 255)
      v119 = 255;
    else
      v119 = v32;
    v120 = v118[v119 & ~(v119 >> 31)];
LABEL_281:
    a6 = a4 * (double)v120;
    ++v32;
  }
  while (a6 < a5 && v32 < v110);
  v110 = v32 - 1;
LABEL_292:
  v32 = v38 - v111 + v110;
LABEL_293:
  v122 = *(_DWORD *)(v11 + 16);
  if (v32 >= v122)
    v123 = *(_DWORD *)(v11 + 16);
  else
    v123 = v32;
  if (v32 >= *(_DWORD *)(v11 + 20))
    LODWORD(v14) = v123;
  else
    LODWORD(v14) = *(_DWORD *)(v11 + 20);
  if (active >= v122)
    v124 = *(_DWORD *)(v11 + 16);
  else
    v124 = active;
  if (active >= (int)v14)
    v57 = v124;
  else
    v57 = v14;
  *a3 = v57;
  *v8 = v14;
  if (!v24 || *(_BYTE *)(a1 + 172988))
    goto LABEL_517;
LABEL_519:
  v188 = a1;
  v189 = v17;
  v13 = vp9_rc_regulate_q(v188, *v17, v14, v57, a4, a5, a6, a7);
  v14 = *a3;
  if ((int)v13 <= (int)v14)
    goto LABEL_3;
  if (*v189 >= v189[37])
  {
    *a3 = v13;
LABEL_3:
    v14 = v13;
  }
LABEL_4:
  if (*(_DWORD *)(v11 + 1220))
  {
    if (*(_DWORD *)(v11 + 1104) == 1)
      v14 = (v14 - *(_DWORD *)(v11 + 1108));
    if ((int)v14 < *v8 || (v8 = a3, (int)v14 > *a3))
      *v8 = v14;
  }
  return v14;
}

_DWORD *vp9_rc_set_frame_target(_DWORD *result, int a2)
{
  uint64_t v2;

  result[184613] = a2;
  if (result[47539] == 2)
  {
    v2 = result[184695];
    if ((_DWORD)v2)
    {
      a2 = (int)(rate_thresh_mult[v2] * (double)a2);
      result[184613] = a2;
    }
  }
  result[184615] = ((uint64_t)a2 << 12) / ((int)result[42998] * (uint64_t)(int)result[42997]);
  return result;
}

uint64_t vp9_compute_frame_low_motion(uint64_t result)
{
  int *v1;
  int v2;
  int v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;

  v1 = (int *)(result + 739072);
  v2 = *(_DWORD *)(result + 173008);
  v3 = *(_DWORD *)(result + 173016);
  if (v2 < 1 || v3 < 1)
  {
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(result + 173176);
    do
    {
      v14 = 0;
      do
      {
        v15 = *(_QWORD *)(v13 + 8 * v14);
        if (*(_BYTE *)(v15 + 8) == 1)
        {
          v16 = *(__int16 *)(v15 + 12);
          if (v16 < 0)
            v16 = -v16;
          if ((unsigned __int16)v16 <= 0xFu)
          {
            v17 = *(__int16 *)(v15 + 14);
            if (v17 < 0)
              v17 = -v17;
            if ((unsigned __int16)v17 < 0x10u)
              ++v12;
          }
        }
        ++v14;
      }
      while (v3 != (_DWORD)v14);
      v13 += 8 * (v3 - 1) + 72;
      ++v11;
    }
    while (v11 != v2);
  }
  v5 = (3 * *v1 + 100 * v12 / (v3 * v2)) >> 2;
  *v1 = v5;
  if (*(_DWORD *)(result + 747508))
  {
    v6 = *(_DWORD *)(result + 747520);
    if (v6 >= 2)
    {
      v7 = *(unsigned int *)(result + 747512);
      if ((_DWORD)v7 == v6 - 1)
      {
        v8 = *(int *)(result + 747524);
        v9 = *(int *)(result + 747516);
        if (v7 < 2)
        {
          v10 = 0;
LABEL_27:
          v20 = v7 - v10;
          v21 = (int *)(result + 6880 * (v9 + v10 * v8) + 752528);
          v22 = 6880 * (int)v8;
          do
          {
            *v21 = v5;
            v21 = (int *)((char *)v21 + v22);
            --v20;
          }
          while (v20);
          return result;
        }
        v10 = v7 & 0xFFFFFFFE;
        v18 = result + 752528;
        v19 = v10;
        do
        {
          *(_DWORD *)(v18 + 6880 * (int)v9) = v5;
          *(_DWORD *)(v18 + 6880 * (v8 + v9)) = v5;
          v18 += 13760 * (int)v8;
          v19 -= 2;
        }
        while (v19);
        if (v10 != v7)
          goto LABEL_27;
      }
    }
  }
  return result;
}

void vp9_rc_postencode_update(uint64_t a1, int a2, double a3, double a4, double a5, double a6)
{
  int8x16_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double *v16;
  _DWORD *v17;
  int *v18;
  double v19;
  double v20;
  __int128 *v21;
  double v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int refreshed;
  uint64_t v29;
  _DWORD *v30;
  unsigned __int8 *v31;
  uint64_t v32;
  __int128 *v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  _WORD *v39;
  int v40;
  __int16 v41;
  BOOL v42;
  double v43;
  int v44;
  int v45;
  int v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  int v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  double v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v64;
  int *v65;
  _WORD *v66;
  int v67;
  __int16 v68;
  double v69;
  int v70;
  int *v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  BOOL v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int *v104;
  unint64_t v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  unint64_t v111;
  int *v112;
  unint64_t v113;
  int v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int8x16_t *v119;
  uint8x16_t *v120;
  unint64_t v121;
  uint64_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  uint64_t v127;
  int32x4_t v128;
  uint16x8_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint64_t v133;
  int8x16_t *v134;
  uint8x16_t *v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  uint8x16_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  unint64_t v148;
  int v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v7 = a1;
  v8 = (unsigned __int8 *)(a1 + 742180);
  v9 = (int *)(a1 + 738452);
  v10 = (_DWORD *)(a1 + 194560);
  v11 = a1 + 176472;
  v12 = *(_DWORD *)(a1 + 173028);
  v13 = *(unsigned __int8 *)(a1 + 742180);
  v14 = *(unsigned __int8 *)(a1 + 742180 + v13 + 2272);
  *(_DWORD *)(a1 + 738456) = 8 * a2;
  v156 = a1 + 172972;
  v157 = a1 + 738712;
  v15 = *(_DWORD *)(a1 + 172972);
  if (v15 && !*(_BYTE *)(a1 + 172988))
  {
    if (*(_DWORD *)(a1 + 190076) == 2)
    {
      v16 = (double *)(a1 + 8 * *(unsigned int *)(a1 + 4 * v13 + 742184) + 738496);
    }
    else if (!*(_DWORD *)(a1 + 194564) && !*v10
           || *(_DWORD *)(a1 + 738588)
           || *(_DWORD *)(a1 + 747508)
           || *(_DWORD *)(a1 + 190092) == 1 && *(_DWORD *)(a1 + 190068) < 0x65u)
    {
      v16 = (double *)(a1 + 738496);
    }
    else
    {
      v16 = (double *)(a1 + 738520);
    }
  }
  else
  {
    v16 = (double *)(a1 + 738528);
  }
  v17 = (_DWORD *)(a1 + 834668);
  v18 = (int *)(a1 + 747512);
  v19 = *v16 * rate_thresh_mult[*(unsigned int *)(a1 + 738780)];
  v20 = 50.0;
  if (v19 <= 50.0)
    v20 = *v16 * rate_thresh_mult[*(unsigned int *)(a1 + 738780)];
  v21 = &xmmword_208F17000;
  if (v19 >= 0.005)
    v22 = v20;
  else
    v22 = 0.005;
  v23 = v12;
  if (*(_DWORD *)(a1 + 738588))
  {
    if (!v15)
      goto LABEL_72;
LABEL_71:
    if (*(_BYTE *)(v156 + 16))
      goto LABEL_72;
    if (!*((_DWORD *)v8 + 1332) && (v9[34] || *v10 || v10[1]))
      goto LABEL_104;
    v52 = (int *)(v8 + 5328);
    v9[4] = v12;
    v9[42] = (v12 + 3 * v9[42] + 2) >> 2;
    v56 = v9[40] + 1;
    v9[40] = v56;
    v57 = *(_DWORD *)(v11 + 13384);
    v58 = 0.015625;
    if (v57 == 10)
      v58 = 0.0625;
    switch(v57)
    {
      case 8:
        v58 = 0.25;
        v66 = ac_qlookup_0;
        break;
      case 12:
        v66 = ac_qlookup_12;
        break;
      case 10:
        v66 = ac_qlookup_10;
        break;
      default:
        v68 = -1;
LABEL_118:
        v69 = *(double *)(v9 + 43) + v58 * (double)v68;
        *(double *)(v9 + 43) = v69;
        *(double *)(v9 + 45) = v69 / (double)v56;
        v70 = v9[39] + v12;
        v9[38] = v70 / v56;
        v9[39] = v70;
        goto LABEL_119;
    }
    if (v12 >= 255)
      v67 = 255;
    else
      v67 = v12;
    v68 = v66[v67 & ~(v67 >> 31)];
    goto LABEL_118;
  }
  v24 = *(unsigned int *)(a1 + 4 * v13 + 742184);
  if (*(_DWORD *)(a1 + 190148) == 3 && *(_BYTE *)v11)
  {
    v25 = a1 + 176472;
    v26 = (unsigned __int8 *)(a1 + 742180);
    v27 = v14;
    refreshed = vp9_cyclic_refresh_estimate_bits_at_q(a1, v22, v20, a5, a6);
    v21 = &xmmword_208F17000;
    v14 = v27;
    v8 = v26;
    v11 = v25;
    if (refreshed < 201)
      goto LABEL_15;
LABEL_49:
    v29 = 100 * v9[1] / refreshed;
    v154 = v9;
    v155 = v7;
    v30 = (_DWORD *)(v7 + 4 * v24 + 739116);
    if (*v30)
      goto LABEL_16;
LABEL_50:
    *v30 = 1;
    v36 = 1.0;
    goto LABEL_51;
  }
  v37 = *(_DWORD *)(a1 + 189856);
  v38 = 0.015625;
  if (v37 == 10)
    v38 = 0.0625;
  switch(v37)
  {
    case 8:
      v38 = 0.25;
      v39 = ac_qlookup_0;
      break;
    case 12:
      v39 = ac_qlookup_12;
      break;
    case 10:
      v39 = ac_qlookup_10;
      break;
    default:
      v41 = -1;
      goto LABEL_39;
  }
  if (v12 >= 255)
    v40 = 255;
  else
    v40 = v12;
  v41 = v39[v40 & ~(v40 >> 31)];
LABEL_39:
  if (*(_BYTE *)(a1 + 172988))
    v42 = 1;
  else
    v42 = v15 == 0;
  v43 = v38 * (double)v41;
  if (v42)
    v44 = 2700000;
  else
    v44 = 1800000;
  if ((int)((unint64_t)(*(int *)(a1 + 173000)
                              * (uint64_t)(int)(v22 * (double)(v44 + ((int)(v43 * (double)v44) >> 12)) / v43)) >> 9) <= 200)
    refreshed = 200;
  else
    refreshed = (unint64_t)(*(int *)(a1 + 173000)
                                 * (uint64_t)(int)(v22 * (double)(v44 + ((int)(v43 * (double)v44) >> 12)) / v43)) >> 9;
  if (refreshed >= 201)
    goto LABEL_49;
LABEL_15:
  LODWORD(v29) = 100;
  v154 = v9;
  v155 = v7;
  v30 = (_DWORD *)(v7 + 4 * v24 + 739116);
  if (!*v30)
    goto LABEL_50;
LABEL_16:
  v31 = v8;
  v32 = v14;
  v33 = v21;
  v34 = log10((double)(int)v29 * 0.01);
  v21 = v33;
  v14 = v32;
  v8 = v31;
  v35 = fabs(v34);
  if (v35 > 1.0)
    v35 = 1.0;
  v36 = v35 * 0.5 + 0.25;
LABEL_51:
  v45 = *(_DWORD *)(v157 + 56);
  v23 = *(_DWORD *)(v156 + 56);
  v46 = *(_DWORD *)(v157 + 48);
  *(_DWORD *)(v157 + 56) = v23;
  *(_DWORD *)(v157 + 60) = v45;
  *(_DWORD *)(v157 + 52) = v46;
  if ((int)v29 > 110)
  {
    *(_DWORD *)(v157 + 48) = -1;
    v9 = v154;
    v7 = v155;
    if (v46 == 1 && v29 >= 0x3E9)
      *(_DWORD *)(v157 + 52) = 0;
    goto LABEL_60;
  }
  v9 = v154;
  v7 = v155;
  if ((int)v29 > 89)
  {
    *(_DWORD *)(v157 + 48) = 0;
    if (v29 >= 0x67)
    {
LABEL_60:
      v22 = v22 * (double)(int)((double)((int)v29 - 100) * v36 + 100.0) / 100.0;
      if (v22 > 50.0)
        v22 = 50.0;
      goto LABEL_62;
    }
    if (v29 > 0x62)
      goto LABEL_62;
  }
  else
  {
    *(_DWORD *)(v157 + 48) = 1;
  }
  v22 = v22 * (double)(int)(100.0 - (double)(100 - (int)v29) * v36) / 100.0;
  if (v22 < 0.005)
    v22 = 0.005;
LABEL_62:
  v15 = *(_DWORD *)v156;
  if (*(_DWORD *)v156 && !*(_BYTE *)(v156 + 16))
  {
    if (*(_DWORD *)(v11 + 13604) == 2)
    {
      v47 = (double *)(v7 + 8 * *(unsigned int *)(v7 + 4 * *v8 + 742184) + 738496);
    }
    else if (!v10[1] && !*v10
           || v9[34]
           || *((_DWORD *)v8 + 1332)
           || *(_DWORD *)(v11 + 13620) == 1 && *(_DWORD *)(v11 + 13596) < 0x65u)
    {
      v47 = (double *)(v9 + 11);
    }
    else
    {
      v47 = (double *)(v9 + 17);
    }
  }
  else
  {
    v47 = (double *)(v9 + 19);
  }
  v48 = v22 / rate_thresh_mult[*(unsigned int *)(v157 + 68)];
  v49 = 50.0;
  if (v48 <= 50.0)
    v49 = v22 / rate_thresh_mult[*(unsigned int *)(v157 + 68)];
  if (v48 >= *((double *)v21 + 416))
    v50 = v49;
  else
    v50 = *((double *)v21 + 416);
  *v47 = v50;
  if (v15)
    goto LABEL_71;
LABEL_72:
  v9[3] = v12;
  v51 = (v12 + 3 * v9[41] + 2) >> 2;
  v9[41] = v51;
  if (!*((_DWORD *)v8 + 1332))
  {
LABEL_104:
    v52 = (int *)(v8 + 5328);
    goto LABEL_119;
  }
  v52 = (int *)(v8 + 5328);
  v53 = v18[3];
  if ((int)v53 < 1)
    goto LABEL_89;
  v54 = *v18 * (uint64_t)(int)v53;
  if ((_DWORD)v53 == 1)
  {
    v55 = 0;
LABEL_87:
    v61 = v53 - v55;
    v62 = (int *)(6880 * (v55 + v54) + 751920 + v7 + 152);
    do
    {
      *(v62 - 38) = v12;
      *v62 = v51;
      v62 += 1720;
      --v61;
    }
    while (v61);
    goto LABEL_89;
  }
  v55 = v53 & 0xFFFFFFFE;
  v59 = (int *)(v7 + 6880 * v54 + 751920);
  v60 = v55;
  do
  {
    *v59 = v12;
    v59[1720] = v12;
    v59[38] = v51;
    v59[1758] = v51;
    v59 += 3440;
    v60 -= 2;
  }
  while (v60);
  if (v55 != v53)
    goto LABEL_87;
LABEL_89:
  if (v15)
    goto LABEL_119;
  if (*(_DWORD *)(v11 + 13620) != 1 || v17[190] || v9[1] <= 3 * v9[35])
    goto LABEL_98;
  v63 = v9[42];
  if (v63 <= (*(_DWORD *)(v157 + 16) + v23) >> 1)
    v63 = (*(_DWORD *)(v157 + 16) + v23) >> 1;
  v9[42] = v63;
  if ((int)v53 < 1)
  {
LABEL_98:
    v65 = v9 + 5;
LABEL_123:
    *v65 = v12;
    goto LABEL_124;
  }
  if ((_DWORD)v53 == 1)
  {
    v64 = 0;
LABEL_254:
    v152 = v53 - v64;
    v153 = (int *)(v7 + 6880 * v64 + 752076);
    do
    {
      *v153 = v63;
      v153 += 1720;
      --v152;
    }
    while (v152);
    goto LABEL_119;
  }
  v150 = (int *)(v7 + 752076);
  v64 = v53 & 0xFFFFFFFE;
  v151 = v64;
  do
  {
    *v150 = v63;
    v150[1720] = v63;
    v150 += 3440;
    v151 -= 2;
  }
  while (v151);
  if (v64 != v53)
    goto LABEL_254;
LABEL_119:
  v65 = v9 + 5;
  if (!v15 || v12 < v9[5] || !v9[27] && (v10[1] || *v10 && !v9[34]))
    goto LABEL_123;
LABEL_124:
  v71 = (int *)(v7 + 4 * v14 + 742156);
  if (v12 >= *v71)
  {
    if (!v15)
    {
      *v71 = v12;
LABEL_134:
      v72 = 1;
      goto LABEL_135;
    }
    if (!v9[27] && (v10[1] || *v10 && !v9[34]))
      *v71 = v12;
  }
  else
  {
    *v71 = v12;
    if (!v15)
      goto LABEL_134;
  }
  v72 = 0;
  v73 = 0;
  if (*(_BYTE *)(v156 + 16))
  {
LABEL_135:
    v9[6] = v12;
    v73 = v72;
  }
  v74 = v9[1];
  v75 = *(_QWORD *)(v9 + 49) - v74;
  v76 = *(_QWORD *)(v157 + 40);
  if (v75 >= v76)
    v75 = *(_QWORD *)(v157 + 40);
  *(_QWORD *)(v9 + 49) = v75;
  if (*(_DWORD *)(v11 + 13908) == 1 && !*(_DWORD *)(v11 + 13656))
  {
    if (v75 <= -v76)
      v75 = -v76;
    *(_QWORD *)(v9 + 49) = v75;
  }
  *(_QWORD *)(v9 + 47) = v75;
  v77 = *v52;
  if (v77)
  {
    if (!*(_DWORD *)(v11 + 13604))
    {
      v78 = v18[1];
      v79 = v18[3];
      if ((int)v78 + 1 < v79)
      {
        v80 = ~(_DWORD)v78 + v79;
        v81 = (_QWORD *)(v7 + 6880 * (v78 + *v18 * (uint64_t)v79) + 758976);
        do
        {
          v82 = v81[1] - v74;
          if (v82 >= v81[14])
            v82 = v81[14];
          *v81 = v82;
          v81[1] = v82;
          v81 += 860;
          --v80;
        }
        while (v80);
      }
    }
  }
  if ((v73 & 1) != 0 || *(_BYTE *)(v156 + 16))
  {
    v83 = *(_QWORD *)(v9 + 63) + v74;
    *(_QWORD *)(v9 + 63) = v83;
    v84 = *(_DWORD *)(v156 + 4);
    if (v84)
      goto LABEL_153;
LABEL_163:
    v96 = v83 - *(_QWORD *)v157;
    *(_QWORD *)v157 = *(_QWORD *)v157;
    *(_QWORD *)(v157 + 8) = v96;
    if (v77)
      goto LABEL_154;
    goto LABEL_164;
  }
  v93 = *v9;
  v94 = (unint64_t)(v74 + 3 * v9[58] + 2) >> 2;
  v9[57] = (unint64_t)(v93 + 3 * v9[57] + 2) >> 2;
  v9[58] = v94;
  v95 = v9[60];
  v9[59] = (unint64_t)(v93 - v9[59] + 32 * v9[59] + 16) >> 5;
  v9[60] = (unint64_t)(v74 - v95 + 32 * v95 + 16) >> 5;
  v83 = *(_QWORD *)(v9 + 63) + v74;
  *(_QWORD *)(v9 + 63) = v83;
  v84 = *(_DWORD *)(v156 + 4);
  if (!v84)
    goto LABEL_163;
LABEL_153:
  v85 = *(_QWORD *)v157 + v9[35];
  *(_QWORD *)v157 = v85;
  *(_QWORD *)(v157 + 8) = v83 - v85;
  if (v77)
  {
LABEL_154:
    if (!*v17 || v18[1])
      goto LABEL_202;
    if (*v10)
    {
      v86 = 0;
      v9[21] = 0;
      v87 = v9[22];
      v88 = __OFSUB__(v87, 1);
      v89 = v87 - 1;
      if (v89 < 0 != v88)
      {
LABEL_159:
        v90 = v18[3];
        if ((int)v90 <= 1)
          goto LABEL_202;
        v91 = *v18 * (uint64_t)(int)v90;
        if ((_DWORD)v90 == 2)
        {
          v92 = 1;
LABEL_200:
          v106 = v90 - v92;
          v107 = (int *)(v7 + 6880 * (v92 + v91) + 751992);
          do
          {
            *v107 = v86;
            v107 += 1720;
            --v106;
          }
          while (v106);
          goto LABEL_202;
        }
        v92 = (v90 - 1) | 1;
        v104 = (int *)(v7 + 6880 * v91 + 758872);
        v105 = (v90 - 1) & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *v104 = v86;
          v104[1720] = v86;
          v104 += 3440;
          v105 -= 2;
        }
        while (v105);
        if (v90 - 1 != ((v90 - 1) & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_200;
LABEL_202:
        if ((v73 & 1) != 0 || *(_BYTE *)(v156 + 16))
          v9[29] = 0;
        else
          v73 = 0;
        goto LABEL_205;
      }
    }
    else
    {
      v103 = v9[22];
      v86 = v9[21] + 1;
      v9[21] = v86;
      v88 = __OFSUB__(v103, 1);
      v89 = v103 - 1;
      if (v89 < 0 != v88)
        goto LABEL_159;
    }
    v9[22] = v89;
    goto LABEL_159;
  }
LABEL_164:
  if (*(_DWORD *)(v11 + 13600) == 2 && *(_DWORD *)(v11 + 13620) == 1
    || *(int *)(v11 + 13616) < 4
    || !*(_DWORD *)(v11 + 13832)
    || (!v10[1] ? (v97 = 1) : (v97 = v73), (v97 & 1) != 0 || *(_BYTE *)(v156 + 16)))
  {
    if (!*v10)
    {
      if (!v10[1])
      {
        v101 = v9[22];
        v88 = __OFSUB__(v101, 1);
        v102 = v101 - 1;
        if (v102 < 0 == v88)
          v9[22] = v102;
        ++v9[21];
        if (*(_DWORD *)(v157 + 444))
        {
          v9[21] = 0;
          if (!v9[32] && !*v8)
            v9[33] = 0;
        }
      }
      goto LABEL_202;
    }
    v9[21] = 0;
    v98 = v9[32];
    if (*(_DWORD *)(v11 + 13604) == 2)
    {
      if (v98)
      {
LABEL_179:
        v99 = v9[22];
        v88 = __OFSUB__(v99, 1);
        v100 = v99 - 1;
        if (v100 < 0 == v88)
          v9[22] = v100;
        goto LABEL_202;
      }
      v98 = *v8;
    }
    if (!v98)
      v9[33] = 0;
    goto LABEL_179;
  }
  v73 = 0;
  v9[21] = 0;
  *((_QWORD *)v9 + 16) = 0x100000000;
LABEL_205:
  v108 = v7 + 850416;
  if (v84)
    *((int32x2_t *)v9 + 14) = vadd_s32(*(int32x2_t *)(v9 + 28), (int32x2_t)0x1FFFFFFFFLL);
  if (*(_DWORD *)(v11 + 13604))
  {
    v109 = *(_DWORD *)(v157 + 72);
    v17[1855] = v109 != *(_DWORD *)(v157 + 68);
    *(_DWORD *)(v157 + 68) = v109;
    if ((v73 & 1) == 0)
      goto LABEL_213;
    goto LABEL_215;
  }
  if ((v73 & 1) != 0)
    goto LABEL_212;
  if (*(_BYTE *)(v156 + 16))
    goto LABEL_212;
  if (!*(_DWORD *)(v157 + 1420))
    goto LABEL_212;
  if (!*(_DWORD *)(v157 + 336))
    goto LABEL_212;
  if (v9[34])
    goto LABEL_212;
  if (*v10)
    goto LABEL_212;
  if (v10[1])
    goto LABEL_212;
  v110 = *(unsigned int *)(v156 + 36);
  if ((int)v110 < 1)
    goto LABEL_212;
  v111 = *(unsigned int *)(v156 + 44);
  if ((int)v111 < 1)
    goto LABEL_212;
  v112 = v18;
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v116 = (v111 + 7) >> 3;
  v117 = ((v111 - 1) >> 3) + 1;
  v118 = v117 & 0x3FFFFFFFFFFFFFF8;
  v119 = *(int8x16_t **)v108;
  v120 = *(uint8x16_t **)(v108 + 8);
  do
  {
    if (v111 < 0x39)
    {
      v121 = 0;
LABEL_241:
      v148 = v121 >> 3;
      do
      {
        v149 = v119->u8[v148];
        v114 += v149 + v120->u8[v148];
        v115 += v149;
        v121 += 8;
        ++v148;
      }
      while (v121 < v111);
      goto LABEL_228;
    }
    if (v111 >= 0x79)
    {
      v130 = (int32x4_t)v114;
      v131 = 0uLL;
      v132 = (int32x4_t)v115;
      v133 = v117 & 0x3FFFFFFFFFFFFFF0;
      v134 = v119;
      v135 = v120;
      v136 = 0uLL;
      v6 = 0uLL;
      v137 = 0uLL;
      v138 = 0uLL;
      v139 = 0uLL;
      do
      {
        v140 = *v134++;
        v141 = (int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_208F04F30);
        v142 = (int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_208F04F40);
        v143 = (int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_208F04F20);
        v144 = (int32x4_t)vqtbl1q_s8(v140, (int8x16_t)xmmword_208F04F50);
        v145 = *v135++;
        v146 = vmovl_u8(*(uint8x8_t *)v145.i8);
        v147 = vmovl_high_u8(v145);
        v136 = (int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32(v136, v141), *(uint16x4_t *)v147.i8);
        v131 = (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32(v131, v142), v146);
        v6 = (int8x16_t)vaddw_high_u16((uint32x4_t)vaddq_s32((int32x4_t)v6, v143), v147);
        v130 = (int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32(v130, v144), *(uint16x4_t *)v146.i8);
        v138 = vaddq_s32(v138, v141);
        v137 = vaddq_s32(v137, v142);
        v132 = vaddq_s32(v132, v144);
        v139 = vaddq_s32(v139, v143);
        v133 -= 16;
      }
      while (v133);
      v115 = vaddvq_s32(vaddq_s32(vaddq_s32(v132, v138), vaddq_s32(v137, v139)));
      v114 = vaddvq_s32(vaddq_s32(vaddq_s32(v130, v136), vaddq_s32(v131, (int32x4_t)v6)));
      if (v117 == (v117 & 0x3FFFFFFFFFFFFFF0))
        goto LABEL_228;
      v122 = v117 & 0x3FFFFFFFFFFFFFF0;
      v121 = 8 * (v117 & 0x3FFFFFFFFFFFFFF0);
      if ((v117 & 8) == 0)
        goto LABEL_241;
    }
    else
    {
      v122 = 0;
    }
    v123 = 0uLL;
    v124 = (int32x4_t)v114;
    v125 = (int32x4_t)v115;
    v126 = 0uLL;
    do
    {
      v127 = (v122 & 0x1FFFFFFFFFFFFFF8) + (v113 >> 3) * v116;
      v6.i64[0] = *(_QWORD *)(*(_QWORD *)v108 + v127);
      v128 = (int32x4_t)vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F40);
      v6 = vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F50);
      v129 = vmovl_u8(*(uint8x8_t *)(*(_QWORD *)(v108 + 8) + v127));
      v123 = (int32x4_t)vaddw_high_u16((uint32x4_t)vaddq_s32(v123, v128), v129);
      v124 = (int32x4_t)vaddw_u16((uint32x4_t)vaddq_s32(v124, (int32x4_t)v6), *(uint16x4_t *)v129.i8);
      v126 = vaddq_s32(v126, v128);
      v125 = vaddq_s32(v125, (int32x4_t)v6);
      v122 += 8;
    }
    while (v118 != v122);
    v115 = vaddvq_s32(vaddq_s32(v125, v126));
    v114 = vaddvq_s32(vaddq_s32(v124, v123));
    v121 = 8 * (v117 & 0x3FFFFFFFFFFFFFF8);
    if (v117 != v118)
      goto LABEL_241;
LABEL_228:
    v113 += 8;
    v120 = (uint8x16_t *)((char *)v120 + v116);
    v119 = (int8x16_t *)((char *)v119 + v116);
  }
  while (v113 < v110);
  v18 = v112;
  if (v114 >= 1)
    *(double *)(v157 + 376) = (double)(int)v115 * 100.0 / (double)v114 * 0.25 + *(double *)(v157 + 376) * 0.75;
LABEL_212:
  *(_DWORD *)(v157 + 340) = v9[34];
  if ((v73 & 1) == 0)
  {
LABEL_213:
    if (!*(_BYTE *)(v156 + 16))
      *(_DWORD *)(v157 + 372) = 0;
  }
LABEL_215:
  *(_DWORD *)(v157 + 64) = v9[35];
  if (v77 && *v18 < v18[2] - 1)
    v17[57] = v23;
  *(_DWORD *)(v108 + 380) = *(_DWORD *)(v11 + 13600);
}

uint64_t vp9_calc_pframe_target_size_one_pass_vbr(_DWORD *a1)
{
  int *v1;
  unsigned int *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v1 = a1 + 184639;
  v2 = a1 + 47516;
  v3 = a1[184769];
  v4 = a1[184647];
  if (!v4 && (a1[48640] || a1[48641]))
  {
    v5 = a1[184648];
    v6 = *v1;
    v7 = v5 * (uint64_t)v3 * v6;
    if (!a1[186877])
      goto LABEL_7;
LABEL_3:
    v8 = (int)vp9_calc_pframe_target_size_one_pass_cbr((uint64_t)a1);
    goto LABEL_8;
  }
  v5 = a1[184648];
  LODWORD(v6) = *v1;
  v7 = *v1 * (uint64_t)v5;
  if (a1[186877])
    goto LABEL_3;
LABEL_7:
  v8 = v7 / (v3 + (int)v6 - 1);
LABEL_8:
  if (v8 >= 0x7FFFFFFF)
    LODWORD(v8) = 0x7FFFFFFF;
  v9 = v5 >> 5;
  if (v1[10] > v5 >> 5)
    v9 = v1[10];
  if (v9 > (int)v8)
    LODWORD(v8) = v9;
  if (v2[1124])
    v10 = v4 == 0;
  else
    v10 = 1;
  if (!v10)
    LODWORD(v8) = v9;
  if ((int)v8 >= v1[11])
    LODWORD(v8) = v1[11];
  v11 = *v2;
  v12 = v11 * v5 / 100;
  if (v12 >= (int)v8)
    LODWORD(v12) = v8;
  if ((_DWORD)v11)
    return v12;
  else
    return v8;
}

uint64_t vp9_calc_pframe_target_size_one_pass_cbr(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  signed int v17;
  uint64_t v19;

  v1 = (_DWORD *)(a1 + 738556);
  v2 = *(_QWORD *)(a1 + 738744);
  v3 = *(_QWORD *)(a1 + 738640);
  v4 = ((unsigned __int128)(v2 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64) + v2;
  v5 = v4 >> 6;
  v6 = *(_DWORD *)(a1 + 738592);
  v7 = v6 >> 4;
  if (v6 <= 3215)
    v7 = 200;
  v8 = *(_DWORD *)(a1 + 190068);
  if (v8)
  {
    if (*(_DWORD *)(a1 + 194560))
      v9 = (v8 + 100) * v6 * *v1;
    else
      v9 = 100 * v6 * *v1;
    v10 = v9 / (v8 + 100 * *v1);
    v11 = v2 - v3;
    v12 = v5 + ((unint64_t)v4 >> 63);
    if (!*(_DWORD *)(a1 + 747508))
      goto LABEL_11;
  }
  else
  {
    v10 = *(_DWORD *)(a1 + 738592);
    v11 = v2 - v3;
    v12 = v5 + ((unint64_t)v4 >> 63);
    if (!*(_DWORD *)(a1 + 747508))
      goto LABEL_11;
  }
  if (!*(_DWORD *)(a1 + 190076))
  {
    v10 = *(_DWORD *)(a1
                    + 6880 * (*(int *)(a1 + 747516) + *(int *)(a1 + 747524) * (uint64_t)*(int *)(a1 + 747512))
                    + 752640);
    v7 = v10 >> 4;
    if (v10 <= 3215)
      v7 = 200;
    v13 = v12 + 1;
    if (v11 >= 1)
      goto LABEL_12;
    goto LABEL_19;
  }
LABEL_11:
  v13 = v12 + 1;
  if (v11 >= 1)
  {
LABEL_12:
    v14 = v11 / v13;
    if (v14 >= *(int *)(a1 + 190096))
      LODWORD(v14) = *(_DWORD *)(a1 + 190096);
    v15 = ((unsigned __int128)((int)v14 * (uint64_t)v10 * (__int128)0x5C28F5C28F5C28F5) >> 64)
        - (int)v14 * (uint64_t)v10;
    goto LABEL_15;
  }
LABEL_19:
  if ((v11 & 0x8000000000000000) == 0)
    goto LABEL_20;
  v19 = -(v11 / v13);
  if (v19 >= *(int *)(a1 + 190100))
    LODWORD(v19) = *(_DWORD *)(a1 + 190100);
  v15 = ((unsigned __int128)((int)v19 * (uint64_t)v10 * (__int128)(uint64_t)0xA3D70A3D70A3D70BLL) >> 64)
      + (int)v19 * (uint64_t)v10;
LABEL_15:
  v10 += (v15 >> 7) + (v15 >> 63);
LABEL_20:
  v16 = *(_DWORD *)(a1 + 190064);
  if (v16)
  {
    v17 = v16 * v6 / 0x64u;
    if (v10 >= v17)
      v10 = v17;
  }
  if (v7 <= v10)
    return v10;
  else
    return v7;
}

uint64_t vp9_rc_get_one_pass_vbr_params(uint64_t result)
{
  uint64_t v1;
  int **v2;
  _DWORD *v3;
  int *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int *v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = result;
  v2 = (int **)(result + 740264);
  v3 = (_DWORD *)(result + 738452);
  v4 = (int *)(result + 189844);
  v5 = (int *)(result + 171988);
  v6 = *(_DWORD *)(result + 194564);
  if (v6)
  {
LABEL_2:
    v7 = 0;
    *(_DWORD *)(result + 172972) = 1;
    if (*(_DWORD *)(result + 738540))
      goto LABEL_71;
    goto LABEL_12;
  }
  v8 = *v4;
  if (*v4)
  {
    v9 = *(_DWORD *)(result + 738564);
    if ((*(_BYTE *)(result + 835456) & 1) != 0)
    {
      v8 = v9 == 0;
    }
    else if (v9)
    {
      if (*(_DWORD *)(result + 190072) == *(_DWORD *)(result + 850796))
        goto LABEL_2;
      v8 = 0;
    }
    else
    {
      v8 = 1;
    }
  }
  *(_DWORD *)(result + 172972) = 0;
  *(_DWORD *)(result + 738572) = v8;
  *(_DWORD *)(result + 738564) = *(_DWORD *)(result + 190084);
  *(_DWORD *)(result + 738488) = 2000;
  *(_DWORD *)(result + 738584) = 0;
  v7 = 1;
  if (*(_DWORD *)(result + 738540))
    goto LABEL_71;
LABEL_12:
  *(_DWORD *)(result + 738480) = 2000;
  if (*(_DWORD *)(result + 190148) != 3 || *(_DWORD *)(result + 190076))
  {
    v10 = *(_DWORD *)(result + 738544);
    v11 = *(_DWORD *)(result + 738548);
    v12 = __OFADD__(v11, v10);
    v13 = v11 + v10;
    if (v13 < 0 != v12)
      v14 = v13 + 1;
    else
      v14 = v13;
    v15 = v14 >> 1;
    if (v13 <= 19)
      v15 = 10;
    if (v13 <= 41)
      v16 = v15;
    else
      v16 = 20;
    goto LABEL_22;
  }
  v23 = *v2;
  v24 = **v2;
  v26 = v24 < 11;
  v16 = 4 * (0x64u / v24);
  if (v26)
    v16 = 40;
  if (!*(_DWORD *)(result + 190092))
    v16 = 20;
  *(_DWORD *)(result + 738556) = v16;
  if (*(int *)(result + 739072) <= 49 && *(int *)(result + 738568) >= 41 && v23[33])
  {
    v16 = 10;
LABEL_22:
    *(_DWORD *)(result + 738556) = v16;
  }
  *(_DWORD *)(result + 739076) = 10;
  v17 = *(_DWORD *)(result + 738680);
  if (v17 < 1)
  {
    v18 = 1.0;
    if (*v4 < 0x1F)
      goto LABEL_60;
LABEL_27:
    if (*(_DWORD *)(result + 738620) <= (7 * *(_DWORD *)(result + 738728)) >> 3 || v18 <= 3.5)
    {
      v19 = *(_DWORD *)(result + 739072);
      if ((v19 - 1) <= 0x12)
      {
        if (v16 >= 12)
          v16 >>= 1;
        else
          v16 = 6;
        *(_DWORD *)(result + 738556) = v16;
        goto LABEL_39;
      }
    }
    else
    {
      if (v16 <= 10)
        v16 = (3 * v16) >> 1;
      else
        v16 = 15;
      *(_DWORD *)(result + 738556) = v16;
      v19 = *(_DWORD *)(result + 739072);
    }
    if (v19 <= 0)
    {
      LOWORD(v21) = 2000;
      if (!v19 && v18 > 1.0)
      {
        LOWORD(v21) = 1000;
        *(_DWORD *)(result + 738480) = 1000;
      }
LABEL_58:
      v22 = (unsigned __int16)(3 * v21) / 0x190u;
LABEL_59:
      *(_DWORD *)(result + 739076) = v22;
      goto LABEL_60;
    }
LABEL_39:
    v20 = 4000 * v19 / (v19 + 100);
    if (v20 <= 500)
      v21 = 500;
    else
      v21 = v20;
    *(_DWORD *)(result + 738480) = v21;
    if (v21 <= 0x855)
      v22 = 5;
    else
      v22 = 15;
    if (v21 - 2134 < 0xFFFFFA45)
      goto LABEL_59;
    goto LABEL_58;
  }
  v18 = (double)*(int *)(result + 738684) / (double)v17;
  if (*v4 >= 0x1F)
    goto LABEL_27;
LABEL_60:
  if (*(_DWORD *)(result + 739160))
  {
    v25 = *(_DWORD *)(result + 738564);
    *(_DWORD *)(result + 738560) = 0;
    v26 = v16 >= v25 || (7 * v16) >> 2 < v25;
    if (!v26)
    {
      v25 = v25 >> (v25 > 9);
LABEL_67:
      *(_DWORD *)(result + 738556) = v25;
      *(_DWORD *)(result + 738560) = 1;
      v16 = v25;
      goto LABEL_68;
    }
    if (v16 > v25)
      goto LABEL_67;
  }
LABEL_68:
  *(_DWORD *)(result + 738540) = v16;
  *(_DWORD *)(result + 194560) = 1;
  *(_DWORD *)(result + 738580) = 0;
  *(_DWORD *)(result + 739048) = 0;
  if (*(_DWORD *)(result + 740132) && *(_DWORD *)(result + 190304))
  {
    *(_DWORD *)(result + 738580) = 1;
    *(_DWORD *)(result + 739048) = 1;
  }
LABEL_71:
  if (v7)
  {
    v27 = *(int *)(result + 738592);
    LODWORD(v28) = 25 * v27;
    if ((int)v27 > 85899345)
      LODWORD(v28) = 0x7FFFFFFF;
    v29 = *(unsigned int *)(result + 190060);
    if ((_DWORD)v29 && v29 * v27 / 100 < (int)v28)
      v28 = v29 * v27 / 100;
    if ((int)v28 >= *(_DWORD *)(result + 738600))
      LODWORD(v28) = *(_DWORD *)(result + 738600);
    *v3 = v28;
    if (*(_DWORD *)(result + 190156) != 2)
      goto LABEL_106;
LABEL_104:
    v39 = v3[82];
    if ((_DWORD)v39)
    {
      LODWORD(v28) = (int)(rate_thresh_mult[v39] * (double)(int)v28);
      *v3 = v28;
    }
    goto LABEL_106;
  }
  v30 = *(_DWORD *)(result + 739076);
  v31 = *(_DWORD *)(result + 738588);
  if (!v31 && *(_DWORD *)(result + 194560) | v6)
  {
    v32 = *(_DWORD *)(result + 738592);
    v33 = *(int *)(result + 738556);
    v34 = v32 * (uint64_t)v30 * v33;
    if (!*(_DWORD *)(result + 747508))
      goto LABEL_86;
LABEL_83:
    result = vp9_calc_pframe_target_size_one_pass_cbr(result);
    v28 = (int)result;
    goto LABEL_87;
  }
  v32 = *(_DWORD *)(result + 738592);
  LODWORD(v33) = *(_DWORD *)(result + 738556);
  v34 = (int)v33 * (uint64_t)v32;
  if (*(_DWORD *)(result + 747508))
    goto LABEL_83;
LABEL_86:
  v28 = v34 / (v30 + (int)v33 - 1);
LABEL_87:
  if (v28 >= 0x7FFFFFFF)
    LODWORD(v28) = 0x7FFFFFFF;
  v35 = v32 >> 5;
  if (v3[36] > v32 >> 5)
    v35 = v3[36];
  if (v35 > (int)v28)
    LODWORD(v28) = v35;
  if (v4[1179])
    v36 = v31 == 0;
  else
    v36 = 1;
  if (!v36)
    LODWORD(v28) = v35;
  if ((int)v28 >= v3[37])
    LODWORD(v28) = v3[37];
  v37 = v4[55];
  if ((_DWORD)v37)
  {
    v38 = v37 * v32;
    if (v38 / 100 < (int)v28)
      v28 = v38 / 100;
  }
  *v3 = v28;
  if (v4[78] == 2)
    goto LABEL_104;
LABEL_106:
  v3[2] = ((uint64_t)(int)v28 << 12) / (v5[1] * (uint64_t)*v5);
  if (v4[76] == 3 && !v4[58])
    return vp9_cyclic_refresh_update_parameters(v1);
  return result;
}

uint64_t vp9_rc_get_svc_params(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  int *v4;
  uint64_t result;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  double *v17;
  double v18;
  int v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double *v28;
  double v29;
  int v30;
  int v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  __int128 v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  double *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  int v68;
  int v69;
  double v70;
  uint64_t v71;
  _DWORD *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int32x2_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  signed int v119;
  int v120;
  signed int v121;
  int v122;
  int v123;
  int v124;
  double v125;
  int v126;
  int v127;
  int v128;
  int v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  uint64_t v135;
  _DWORD *v136;

  v2 = a1 + 835160;
  v3 = (_DWORD *)(a1 + 834464);
  v4 = (int *)(a1 + 747512);
  result = a1 + 738736;
  v6 = (_DWORD *)(a1 + 738452);
  v7 = (int *)(a1 + 189844);
  LODWORD(v8) = *(_DWORD *)(a1 + 738592);
  v9 = v4[3];
  v10 = *v4;
  v11 = v4[1];
  v12 = v11 + (uint64_t)(v9 * *v4);
  if (*(_DWORD *)(v2 + 164))
    *(_DWORD *)(a1 + 6880 * v11 + 758668) = 0;
  v13 = *v7;
  if (!*v7 && !*(_BYTE *)(v2 + 129)
    || (*(_BYTE *)(v2 + 296) & 1) != 0
    || *(_DWORD *)(a1 + 190080) && !(v3[56] % *(_DWORD *)(a1 + 190084)) && !*(_BYTE *)(v2 + 129) && !v10
    || *(_DWORD *)(v2 + 88) == 1 && !v10
    || *(_DWORD *)(a1 + 190072) != *(_DWORD *)(v2 + 15636))
  {
    *(_DWORD *)(a1 + 172972) = 0;
    *(_DWORD *)(a1 + 738584) = 0;
    if (!*(_DWORD *)(result + 8772) || *(_DWORD *)(a1 + 190076))
      goto LABEL_49;
    if (v13)
    {
      v15 = result;
      v16 = v3;
      vp9_svc_reset_temporal_layers(a1, 1);
      result = v15;
      v3 = v16;
      v9 = v4[3];
      v10 = *v4;
      v11 = v4[1];
      LODWORD(v12) = v11 + v9 * *v4;
    }
    *(_DWORD *)(a1 + 6880 * (int)v12 + 758668) = 1;
    *(_DWORD *)(result + 784) &= 0xFFFFFFF8;
    if (*(_DWORD *)(a1 + 190092) == 1)
    {
      if (*v7)
      {
        v17 = (double *)(a1 + 6880 * (int)v12 + 752632);
        if (v9 <= 1)
          v17 = (double *)(result + 432);
        v18 = *v17;
        v19 = (int)(*v17 * 2.0 + -16.0);
        if (v19 <= 32)
          v19 = 32;
        v20 = *(_DWORD *)(a1 + 738568);
        v21 = v18 * 0.5;
        if (v21 > (double)v20)
          v19 = (int)((double)(v19 * v20) / v21);
        LODWORD(v22) = ((v19 + 16) * *(_DWORD *)(a1 + 738592)) >> 4;
        v23 = *(unsigned int *)(a1 + 190060);
        if (!(_DWORD)v23)
          goto LABEL_46;
      }
      else
      {
        v25 = *(_QWORD *)result;
        if (*(uint64_t *)result >= 0)
          v26 = *(_QWORD *)result;
        else
          v26 = v25 + 1;
        v27 = v26 >> 1;
        if (v25 <= 0xFFFFFFFFLL)
          LODWORD(v22) = v27;
        else
          LODWORD(v22) = 0x7FFFFFFF;
        v23 = *(unsigned int *)(a1 + 190060);
        if (!(_DWORD)v23)
        {
LABEL_46:
          if ((int)v22 >= *(_DWORD *)(a1 + 738600))
            LODWORD(v8) = *(_DWORD *)(a1 + 738600);
          else
            LODWORD(v8) = v22;
          goto LABEL_49;
        }
      }
      v24 = *(int *)(a1 + 738592);
    }
    else
    {
      v23 = *(int *)(a1 + 738592);
      LODWORD(v22) = 25 * v23;
      if ((int)v23 > 85899345)
        LODWORD(v22) = 0x7FFFFFFF;
      v24 = *(unsigned int *)(a1 + 190060);
      if (!(_DWORD)v24)
        goto LABEL_46;
    }
    if (v24 * v23 / 100 < (int)v22)
      v22 = v24 * v23 / 100;
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 172972) = 1;
  if (!*(_DWORD *)(result + 8772) || *(_DWORD *)(a1 + 190076))
    goto LABEL_49;
  if (v10 || !v13)
    v14 = *(_DWORD *)(a1 + 6880 * v11 + 758668);
  else
    v14 = 0;
  *(_DWORD *)(a1 + 6880 * v12 + 758668) = v14;
  v135 = result;
  v136 = v3;
  if (*(_DWORD *)(a1 + 190092) == 1)
  {
    v122 = v10;
    v123 = vp9_calc_pframe_target_size_one_pass_cbr(a1);
    v10 = v122;
    LODWORD(v8) = v123;
    result = v135;
    v3 = v136;
    goto LABEL_49;
  }
  v133 = v10;
  *(_QWORD *)(result + 88) = 0x640000008CLL;
  v124 = *(_DWORD *)(a1 + 738680);
  if (v124 < 1)
    goto LABEL_309;
  v125 = (double)*(int *)(a1 + 738684) / (double)v124;
  if (v125 < 1.0)
  {
    v126 = 120;
LABEL_308:
    *(_DWORD *)(result + 88) = v126;
    goto LABEL_309;
  }
  if (v125 > 2.0)
  {
    v126 = 160;
    goto LABEL_308;
  }
LABEL_309:
  v134 = *(_DWORD *)(a1 + 738588);
  v127 = vp9_calc_pframe_target_size_one_pass_cbr(a1);
  v128 = (int)v8 >> 5;
  if (*(_DWORD *)(a1 + 738596) > (int)v8 >> 5)
    v128 = *(_DWORD *)(a1 + 738596);
  if (v128 <= v127)
    v129 = v127;
  else
    v129 = v128;
  if (*(_DWORD *)(a1 + 194560))
    v130 = v134 == 0;
  else
    v130 = 1;
  if (v130)
    v128 = v129;
  if (v128 >= *(_DWORD *)(a1 + 738600))
    v128 = *(_DWORD *)(a1 + 738600);
  v131 = *(unsigned int *)(a1 + 190064);
  if ((_DWORD)v131)
  {
    v132 = v131 * (int)v8;
    if (v132 / 100 >= v128)
      LODWORD(v8) = v128;
    else
      v8 = v132 / 100;
  }
  else
  {
    LODWORD(v8) = v128;
  }
  result = v135;
  v3 = v136;
  v10 = v133;
LABEL_49:
  if (!*(_DWORD *)(v2 + 268))
    goto LABEL_80;
  if (v10 < 1 || *(_DWORD *)(a1 + 6880 * (int)v12 + 758668) != 1)
    goto LABEL_79;
  *(_DWORD *)(a1 + 172972) = 0;
  *(_DWORD *)(result + 784) &= 0xFFFFFFF8;
  if (*(_DWORD *)(a1 + 190092) != 1)
  {
    v34 = *(int *)(a1 + 738592);
    LODWORD(v33) = 25 * v34;
    if ((int)v34 > 85899345)
      LODWORD(v33) = 0x7FFFFFFF;
    v35 = *(unsigned int *)(a1 + 190060);
    if (!(_DWORD)v35)
      goto LABEL_76;
    goto LABEL_74;
  }
  if (*v7)
  {
    v28 = (double *)(result + 432);
    if (v9 > 1)
      v28 = (double *)(a1 + 6880 * (v10 * v9 + (uint64_t)v11) + 752632);
    v29 = *v28;
    v30 = (int)(*v28 * 2.0 + -16.0);
    if (v30 <= 32)
      v30 = 32;
    v31 = *(_DWORD *)(a1 + 738568);
    v32 = v29 * 0.5;
    if (v32 > (double)v31)
      v30 = (int)((double)(v30 * v31) / v32);
    LODWORD(v33) = ((v30 + 16) * *(_DWORD *)(a1 + 738592)) >> 4;
    v34 = *(unsigned int *)(a1 + 190060);
    if (!(_DWORD)v34)
      goto LABEL_76;
    goto LABEL_73;
  }
  v36 = *(_QWORD *)result;
  if (*(uint64_t *)result >= 0)
    v37 = *(_QWORD *)result;
  else
    v37 = v36 + 1;
  v38 = v37 >> 1;
  if (v36 <= 0xFFFFFFFFLL)
    LODWORD(v33) = v38;
  else
    LODWORD(v33) = 0x7FFFFFFF;
  v34 = *(unsigned int *)(a1 + 190060);
  if ((_DWORD)v34)
  {
LABEL_73:
    v35 = *(int *)(a1 + 738592);
LABEL_74:
    if (v35 * v34 / 100 < (int)v33)
      v33 = v35 * v34 / 100;
  }
LABEL_76:
  if ((int)v33 >= *(_DWORD *)(a1 + 738600))
    LODWORD(v8) = *(_DWORD *)(a1 + 738600);
  else
    LODWORD(v8) = v33;
LABEL_79:
  if (*(_DWORD *)(a1 + 172972))
  {
LABEL_80:
    if (*(_DWORD *)(a1 + 6880 * v11 + 758668))
      goto LABEL_81;
    goto LABEL_121;
  }
  v40 = v4[2];
  if (v40 == 3)
  {
    if (v10 > 2)
      goto LABEL_120;
    v42 = v10 + 3;
    v41 = dword_208F4B998[v10];
  }
  else
  {
    if (v40 != 2)
      goto LABEL_120;
    if (v10)
    {
      if (v10 != 1)
        goto LABEL_120;
      v41 = 6;
      v42 = 3;
      v43 = 1;
      goto LABEL_119;
    }
    v41 = 6;
    v42 = 2;
  }
  v43 = v10;
LABEL_119:
  *(_DWORD *)(a1 + 194512) = v43;
  *(_DWORD *)(a1 + 194516) = v42;
  *(_DWORD *)(a1 + 194520) = v41;
LABEL_120:
  *(_QWORD *)(a1 + 194572) = 0x100000001;
  *(_DWORD *)(a1 + 194580) = 1;
  if (*(_DWORD *)(a1 + 6880 * v11 + 758668))
    goto LABEL_81;
LABEL_121:
  if (v10)
  {
    if (v10 < 1)
      goto LABEL_81;
  }
  else
  {
    if (!*(_BYTE *)(v2 + 130))
    {
      v10 = 0;
      goto LABEL_81;
    }
    v54 = result;
    v55 = v3;
    vp9_svc_reset_temporal_layers(a1, *(_DWORD *)(a1 + 172972) == 0);
    result = v54;
    v3 = v55;
    v10 = *v4;
    if (*v4 < 1)
      goto LABEL_81;
  }
  if (*(_DWORD *)(a1 + 4 * v10 + 835248))
  {
    *(_DWORD *)(result + 784) &= ~1u;
    if (v3[51])
    {
      v3[51] = 0;
      *(_DWORD *)(a1 + 738556) = 0;
      *(_DWORD *)(a1 + 738540) = 0;
      *(_DWORD *)(a1 + 194520) = *(_DWORD *)(a1 + 8 * (v10 - (v4[2] == 3)) + 834672);
      *(_DWORD *)(a1 + 194580) = 1;
    }
  }
LABEL_81:
  if (v3[51])
  {
    v39 = v4[1];
    if (*(_DWORD *)(a1 + 6880 * v39 + 758668))
    {
      if (v39)
        goto LABEL_97;
    }
    else
    {
      *(_DWORD *)(a1 + 194516) = *(_DWORD *)(a1 + 8 * (v10 - (v4[2] == 3)) + 834672);
      *(_DWORD *)(result + 784) = 3;
      if (v39)
        goto LABEL_97;
    }
    if (v4[2789])
    {
      *(_DWORD *)(a1 + 194520) = *(_DWORD *)(a1 + 8 * (v10 - (v4[2] == 3)) + 834672);
      *(_DWORD *)(a1 + 194580) = 1;
    }
    else if (!*(_DWORD *)(a1 + 738540))
    {
      *(_DWORD *)(a1 + 738556) = 20;
      *(_DWORD *)(a1 + 738540) = 20;
      *(_DWORD *)(a1 + 194576) = 1;
      *(_DWORD *)(a1 + 738480) = 2000;
    }
  }
  else if (!v3[50])
  {
    *(_DWORD *)(a1 + 738540) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 738556) = 0x7FFFFFFF;
  }
LABEL_97:
  if (!*(_BYTE *)(v2 + 128))
    goto LABEL_232;
  v44 = *v7;
  if (*v7 || v4[3] <= 1)
  {
    v45 = v4[2];
    if (v45 <= 3 && v45 != 1 && v4[3] <= 3)
    {
      *(_BYTE *)(a1 + 172988) = 1;
      *(_QWORD *)(a1 + 172972) = 1;
      *(_QWORD *)&v46 = 0x100000001;
      *((_QWORD *)&v46 + 1) = 0x100000001;
      *(_OWORD *)(a1 + 194568) = v46;
      v47 = (_QWORD *)(a1 + 194512);
      if (!v44)
      {
        *v47 = 0x100000000;
        *(_DWORD *)(a1 + 194520) = 2;
        goto LABEL_204;
      }
      *v47 = -1;
      v48 = -1;
      *(_DWORD *)(a1 + 194520) = -1;
      *(_DWORD *)v2 = 0;
      v49 = *(unsigned __int8 *)(v2 + 131);
      if (v49 == 1)
      {
        v48 = 0;
        v50 = 1;
        *(_DWORD *)v2 = 1;
        *(_DWORD *)v47 = 0;
        if (*(_BYTE *)(v2 + 132) != 1)
          goto LABEL_106;
      }
      else
      {
        v50 = 0;
        if (*(_BYTE *)(v2 + 132) != 1)
        {
LABEL_106:
          v51 = v50;
          if (v50 != 1)
            goto LABEL_107;
          goto LABEL_114;
        }
      }
      v51 = v50 + 1;
      v50 |= 2u;
      *(_DWORD *)v2 = v50;
      if (v51 != 1)
      {
LABEL_107:
        if (v51 == 2)
        {
          v52 = 0;
          v53 = 1;
          *(_DWORD *)(a1 + 194516) = 1;
        }
        else
        {
          v53 = -1;
          v52 = 1;
        }
        goto LABEL_131;
      }
LABEL_114:
      v52 = 1;
      if (v49 == 1)
      {
        v53 = -1;
      }
      else
      {
        *(_DWORD *)v47 = 1;
        v53 = -1;
        v48 = 1;
      }
LABEL_131:
      if (*(_BYTE *)(v2 + 133) == 1)
      {
        v50 |= 4u;
        *(_DWORD *)v2 = v50;
        ++v51;
      }
      switch(v51)
      {
        case 1:
          if (v48 == -1)
          {
            v48 = 2;
            *(_DWORD *)v47 = 2;
          }
          break;
        case 2:
          if (v52)
          {
            v53 = 2;
            *(_DWORD *)(a1 + 194516) = 2;
          }
          break;
        case 3:
          v56 = 0;
          v57 = 2;
          *(_DWORD *)(a1 + 194520) = 2;
          goto LABEL_142;
      }
      v57 = -1;
      v56 = 1;
LABEL_142:
      if (*(_BYTE *)(v2 + 134) == 1)
      {
        v50 |= 8u;
        *(_DWORD *)v2 = v50;
        ++v51;
      }
      if (v51 == 1)
      {
        if (v48 == -1)
        {
          v48 = 3;
          *(_DWORD *)v47 = 3;
        }
      }
      else if (v51 == 2)
      {
        if (v53 == -1)
        {
          v53 = 3;
          *(_DWORD *)(a1 + 194516) = 3;
        }
      }
      else if (v51 == 3 && v56)
      {
        v57 = 3;
        *(_DWORD *)(a1 + 194520) = 3;
      }
      if (*(_BYTE *)(v2 + 135) == 1)
      {
        v50 |= 0x10u;
        *(_DWORD *)v2 = v50;
        ++v51;
      }
      if (v51 == 1)
      {
        if (v48 == -1)
        {
          v48 = 4;
          *(_DWORD *)v47 = 4;
        }
      }
      else if (v51 == 2)
      {
        if (v53 == -1)
        {
          v53 = 4;
          *(_DWORD *)(a1 + 194516) = 4;
        }
      }
      else if (v51 == 3 && v57 == -1)
      {
        v57 = 4;
        *(_DWORD *)(a1 + 194520) = 4;
      }
      if (*(_BYTE *)(v2 + 136) == 1)
      {
        v50 |= 0x20u;
        *(_DWORD *)v2 = v50;
        ++v51;
      }
      if (v51 == 1)
      {
        if (v48 == -1)
        {
          v48 = 5;
          *(_DWORD *)v47 = 5;
        }
      }
      else if (v51 == 2)
      {
        if (v53 == -1)
        {
          v53 = 5;
          *(_DWORD *)(a1 + 194516) = 5;
        }
      }
      else if (v51 == 3 && v57 == -1)
      {
        v57 = 5;
        *(_DWORD *)(a1 + 194520) = 5;
      }
      if (*(_BYTE *)(v2 + 137) == 1)
      {
        v50 |= 0x40u;
        *(_DWORD *)v2 = v50;
        ++v51;
      }
      if (v51 == 1)
      {
        if (v48 == -1)
        {
          v48 = 6;
          *(_DWORD *)v47 = 6;
        }
      }
      else if (v51 == 2)
      {
        if (v53 == -1)
        {
          v53 = 6;
          *(_DWORD *)(a1 + 194516) = 6;
        }
      }
      else if (v51 == 3 && v57 == -1)
      {
        v57 = 6;
        *(_DWORD *)(a1 + 194520) = 6;
      }
      if (*(_BYTE *)(v2 + 138) == 1)
      {
        *(_DWORD *)v2 = v50 | 0x80;
        ++v51;
      }
      if (v51 == 1)
      {
        if (v48 == -1)
        {
          v48 = 7;
          *(_DWORD *)v47 = 7;
        }
      }
      else
      {
        if (v51 == 2)
        {
          if (v53 == -1)
          {
            v58 = 7;
LABEL_199:
            *(_DWORD *)(a1 + 194516) = v58;
          }
LABEL_200:
          if (v57 == -1)
            *(_DWORD *)(a1 + 194520) = v48;
          if (*v3 == 1)
          {
            *(_QWORD *)(a1 + 194572) = 0;
            *(_DWORD *)(a1 + 194580) = 0;
            *(_DWORD *)(result + 784) = 0;
          }
          goto LABEL_204;
        }
        if (v51 == 3 && v57 == -1)
        {
          v57 = 7;
          *(_DWORD *)(a1 + 194520) = 7;
        }
      }
      v58 = v48;
      if (v53 == -1)
        goto LABEL_199;
      goto LABEL_200;
    }
  }
LABEL_204:
  if (*(_DWORD *)(a1 + 190092) != 1)
  {
    v61 = *(int *)(a1 + 738592);
    LODWORD(v62) = 25 * v61;
    if ((int)v61 > 85899345)
      LODWORD(v62) = 0x7FFFFFFF;
    v63 = *(unsigned int *)(a1 + 190060);
    if (!(_DWORD)v63)
      goto LABEL_229;
    goto LABEL_227;
  }
  if (v44)
  {
    v59 = v4[3];
    if (v59 < 2)
      v60 = (double *)(result + 432);
    else
      v60 = (double *)(a1 + 6880 * (v4[1] + (uint64_t)(v10 * v59)) + 752632);
    v67 = *v60;
    v68 = (int)(*v60 * 2.0 + -16.0);
    if (v68 <= 32)
      v68 = 32;
    v69 = *(_DWORD *)(a1 + 738568);
    v70 = v67 * 0.5;
    if (v70 > (double)v69)
      v68 = (int)((double)(v68 * v69) / v70);
    LODWORD(v62) = ((v68 + 16) * *(_DWORD *)(a1 + 738592)) >> 4;
    v61 = *(unsigned int *)(a1 + 190060);
    if (!(_DWORD)v61)
      goto LABEL_229;
    goto LABEL_226;
  }
  v64 = *(_QWORD *)result;
  if (*(uint64_t *)result >= 0)
    v65 = *(_QWORD *)result;
  else
    v65 = v64 + 1;
  v66 = v65 >> 1;
  if (v64 <= 0xFFFFFFFFLL)
    LODWORD(v62) = v66;
  else
    LODWORD(v62) = 0x7FFFFFFF;
  v61 = *(unsigned int *)(a1 + 190060);
  if ((_DWORD)v61)
  {
LABEL_226:
    v63 = *(int *)(a1 + 738592);
LABEL_227:
    if (v63 * v61 / 100 < (int)v62)
      v62 = v63 * v61 / 100;
  }
LABEL_229:
  if ((int)v62 >= *(_DWORD *)(a1 + 738600))
    LODWORD(v8) = *(_DWORD *)(a1 + 738600);
  else
    LODWORD(v8) = v62;
LABEL_232:
  if (*(_BYTE *)(v2 + 129))
    *(_DWORD *)(result + 784) |= 1u;
  if (*(_DWORD *)(a1 + 190148) == 3)
  {
    v71 = result;
    v72 = v3;
    vp9_cyclic_refresh_update_parameters(a1);
    result = v71;
    v3 = v72;
  }
  *v6 = v8;
  v73 = *(_DWORD *)(a1 + 190156);
  if (v73 == 2)
  {
    v74 = *(unsigned int *)(result + 44);
    if ((_DWORD)v74)
    {
      LODWORD(v8) = (int)(rate_thresh_mult[v74] * (double)(int)v8);
      *v6 = v8;
    }
  }
  *(_DWORD *)(a1 + 738460) = ((uint64_t)(int)v8 << 12) / (*(int *)(a1 + 171992) * (uint64_t)*(int *)(a1 + 171988));
  if (*(_DWORD *)(a1 + 172976))
  {
    v75 = v4[1];
    v76 = v4[3];
    if ((int)v75 < (int)v76)
    {
      v77 = *v4;
      v78 = (int)v77 * (uint64_t)(int)v76;
      if (*(_DWORD *)(v2 + 140))
      {
        if ((_DWORD)v76 != 1
          || (v79 = *(_QWORD *)(v2 + 216),
              v80 = *(_QWORD *)(a1 + 8 * v77 + 835384),
              v81 = __OFSUB__(v79, v80),
              v82 = v79 - v80,
              (v82 < 0) ^ v81 | (v82 == 0)))
        {
          v96 = *(_QWORD *)(a1 + 6880 * ((int)v78 + v75) + 752104)
              + (int)llround((double)*(int *)(a1 + 6880 * ((int)v78 + v75) + 752624)/ *(double *)(a1 + 6880 * ((int)v78 + v75) + 752632));
          if (v96 >= *(_QWORD *)(a1 + 6880 * ((int)v78 + v75) + 752208))
            v96 = *(_QWORD *)(a1 + 6880 * ((int)v78 + v75) + 752208);
          *(_QWORD *)(a1 + 6880 * ((int)v78 + v75) + 752096) = v96;
          *(_QWORD *)(a1 + 6880 * ((int)v78 + v75) + 752104) = v96;
          *(_QWORD *)(a1 + 738648) = v96;
          *(_QWORD *)(a1 + 738640) = v96;
          if (v75 + 1 != v76)
          {
            v97 = v75 - v76;
            v98 = a1 + 6880 * (v75 + (int)v78) + 758976;
            v99 = -1;
            do
            {
              v100 = *(_QWORD *)(v98 + 8) + (int)llround((double)*(int *)(v98 + 528) / *(double *)(v98 + 536));
              if (v100 >= *(_QWORD *)(v98 + 112))
                v100 = *(_QWORD *)(v98 + 112);
              *(_QWORD *)v98 = v100;
              *(_QWORD *)(v98 + 8) = v100;
              if (!v99)
              {
                *(_QWORD *)(a1 + 738648) = v100;
                *(_QWORD *)(a1 + 738640) = v100;
              }
              --v99;
              v98 += 6880;
            }
            while (v97 != v99);
          }
        }
        else
        {
          v83 = (int)v78;
          v84 = (int)v78 + v75;
          v85 = (double)*(int *)(a1 + 6880 * v84 + 752624);
          if ((int)v3[56] <= 0)
          {
            v101 = *(_QWORD *)(a1 + 6880 * v84 + 752104) + (int)llround(v85 / *(double *)(a1 + 6880 * v84 + 752632));
            if (v101 >= *(_QWORD *)(a1 + 6880 * v84 + 752208))
              v101 = *(_QWORD *)(a1 + 6880 * v84 + 752208);
            *(_QWORD *)(a1 + 6880 * v84 + 752096) = v101;
            *(_QWORD *)(a1 + 6880 * v84 + 752104) = v101;
            *(_QWORD *)(a1 + 738648) = v101;
            *(_QWORD *)(a1 + 738640) = v101;
            if ((_DWORD)v75)
            {
              v102 = 0;
              v103 = a1 + 6880 * (v75 + v83) + 758976;
              do
              {
                v104 = *(_QWORD *)(v103 + 8) + (int)llround((double)*(int *)(v103 + 528) / *(double *)(v103 + 536));
                if (v104 >= *(_QWORD *)(v103 + 112))
                  v104 = *(_QWORD *)(v103 + 112);
                *(_QWORD *)v103 = v104;
                *(_QWORD *)(v103 + 8) = v104;
                if (!--v102)
                {
                  *(_QWORD *)(a1 + 738648) = v104;
                  *(_QWORD *)(a1 + 738640) = v104;
                }
                v103 += 6880;
              }
              while (v75 != v102);
            }
          }
          else
          {
            v86 = 10000000.0 / (double)v82;
            v87 = *(_QWORD *)(a1 + 6880 * v84 + 752104) + (int)llround(v85 / v86);
            if (v87 >= *(_QWORD *)(a1 + 6880 * v84 + 752208))
              v87 = *(_QWORD *)(a1 + 6880 * v84 + 752208);
            *(_QWORD *)(a1 + 6880 * v84 + 752096) = v87;
            *(_QWORD *)(a1 + 6880 * v84 + 752104) = v87;
            *(_QWORD *)(a1 + 738648) = v87;
            *(_QWORD *)(a1 + 738640) = v87;
            if ((_DWORD)v75)
            {
              v88 = 0;
              v89 = a1 + 6880 * (v75 + v83) + 758976;
              do
              {
                v90 = *(_QWORD *)(v89 + 8) + (int)llround((double)*(int *)(v89 + 528) / v86);
                if (v90 >= *(_QWORD *)(v89 + 112))
                  v90 = *(_QWORD *)(v89 + 112);
                *(_QWORD *)v89 = v90;
                *(_QWORD *)(v89 + 8) = v90;
                if (!--v88)
                {
                  *(_QWORD *)(a1 + 738648) = v90;
                  *(_QWORD *)(a1 + 738640) = v90;
                }
                v89 += 6880;
              }
              while (v75 != v88);
            }
          }
        }
      }
      else
      {
        v91 = *(_QWORD *)(a1 + 6880 * (v78 + v75) + 752104)
            + (int)llround((double)*(int *)(a1 + 6880 * (v78 + v75) + 752624) / *(double *)(a1
                                                                                          + 6880 * (v78 + v75)
                                                                                          + 752632));
        if (v91 >= *(_QWORD *)(a1 + 6880 * (v78 + v75) + 752208))
          v91 = *(_QWORD *)(a1 + 6880 * (v78 + v75) + 752208);
        *(_QWORD *)(a1 + 6880 * (v78 + v75) + 752096) = v91;
        *(_QWORD *)(a1 + 6880 * (v78 + v75) + 752104) = v91;
        *(_QWORD *)(a1 + 738648) = v91;
        *(_QWORD *)(a1 + 738640) = v91;
        if (v75 + 1 != v76)
        {
          v92 = v75 - v76;
          v93 = a1 + 6880 * (v75 + v78) + 758976;
          v94 = -1;
          do
          {
            v95 = *(_QWORD *)(v93 + 8) + (int)llround((double)*(int *)(v93 + 528) / *(double *)(v93 + 536));
            if (v95 >= *(_QWORD *)(v93 + 112))
              v95 = *(_QWORD *)(v93 + 112);
            *(_QWORD *)v93 = v95;
            *(_QWORD *)(v93 + 8) = v95;
            if (!v94)
            {
              *(_QWORD *)(a1 + 738648) = v95;
              *(_QWORD *)(a1 + 738640) = v95;
            }
            --v94;
            v93 += 6880;
          }
          while (v92 != v94);
        }
      }
    }
  }
  if (v73 != 2 || *(_DWORD *)(v2 + 272) != 1 || *v4 != *(_DWORD *)(v2 + 164) || v4[1])
  {
    v105 = 0;
    *(_DWORD *)(v2 + 6928) = 0;
LABEL_286:
    *(_DWORD *)(v2 + 276) = v105;
    return result;
  }
  result = vp9_resize_one_pass_cbr(a1);
  *(_DWORD *)(v2 + 6928) = result;
  if ((_DWORD)result)
  {
    v106 = v4[3];
    v107 = *v4 * (uint64_t)v106;
    if (v106 >= 1)
    {
      v108 = 0;
      v109 = *(int32x2_t *)(v2 + 6940);
      v110 = *(_QWORD *)(a1 + 738504);
      v111 = a1 + 6880 * v107 + 752652;
      do
      {
        *(int32x2_t *)(v111 + v108 + 8) = vmul_s32(*(int32x2_t *)(v111 + v108), v109);
        v112 = *(_QWORD *)(v111 + v108 - 452);
        *(_QWORD *)(v111 + v108 - 556) = v112;
        *(_QWORD *)(v111 + v108 - 548) = v112;
        *(_QWORD *)(v111 + v108 - 692) = v110;
        v108 += 6880;
      }
      while (6880 * v106 != v108);
    }
    v113 = v4[1] + (uint64_t)(int)v107;
    v114 = *(_DWORD *)(a1 + 6880 * v113 + 752664);
    if (v114)
    {
      v115 = *(_DWORD *)(a1 + 6880 * v113 + 752660);
      v116 = *(_DWORD *)(a1 + 189992) * v115 / v114;
      v117 = *(_DWORD *)(a1 + 189996) * v115 / v114;
      v118 = v116 & 1;
      if (v116 < 0)
        v118 = -v118;
      v119 = v118 + v116;
      v120 = v117 & 1;
      if (v117 < 0)
        v120 = -v120;
      v121 = v120 + v117;
    }
    else
    {
      v119 = 0;
      v121 = 0;
    }
    result = vp9_set_size_literal(a1, v119, v121);
    v105 = 1;
    goto LABEL_286;
  }
  return result;
}

uint64_t vp9_resize_one_pass_cbr(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v13;
  int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  signed int v22;
  int v23;
  int v24;
  uint64_t active;
  double v26;
  double v27;
  double v28;
  double v29;
  signed int v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;

  v1 = (int *)(a1 + 842092);
  v2 = a1 + 171988;
  *(_QWORD *)(a1 + 842100) = 0x100000001;
  if (!*(_DWORD *)(a1 + 172972))
  {
    v11 = 0;
    *(_DWORD *)(a1 + 842108) = 0;
    *(_DWORD *)(a1 + 842116) = 0;
    return v11;
  }
  v4 = (uint64_t *)(a1 + 738744);
  v5 = a1 + 738452;
  v6 = *(_DWORD *)(a1 + 171992) * *(_DWORD *)(a1 + 171988);
  if (*(int *)(a1 + 190048) <= 0)
    v7 = 70;
  else
    v7 = 60;
  if (*(int *)(a1 + 190048) <= 0)
    v8 = 50;
  else
    v8 = 40;
  v9 = *v1;
  if (*v1 == 1)
  {
    if (v6 < 518400 || *(int *)(a1 + 738592) > 9999)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (v9 || v6 < 921600)
    goto LABEL_20;
  v10 = *(_DWORD *)(a1 + 738592);
  if (v10 <= 9999)
  {
LABEL_18:
    v13 = 2;
    *v1 = 2;
LABEL_19:
    v14 = 1;
    v11 = 2;
    goto LABEL_40;
  }
  if (v10 <= 0x3414)
  {
    v11 = 1;
    *v1 = 1;
LABEL_39:
    v13 = 4;
    v14 = 3;
LABEL_40:
    *(_DWORD *)(a1 + 842100) = v14;
    *(_DWORD *)(a1 + 842104) = v13;
    v21 = *v4;
    *(_QWORD *)(a1 + 738640) = v21;
    *(_QWORD *)(a1 + 738648) = v21;
    v22 = v13 * v13 / (v14 * v14);
    v23 = vp9_calc_pframe_target_size_one_pass_cbr(a1);
    *(_DWORD *)v5 = v23;
    if ((int)v11 >= 0)
      v24 = v23 * v22;
    else
      v24 = v23 / v22;
    active = calc_active_worst_quality_one_pass_cbr(a1);
    v30 = vp9_rc_regulate_q(a1, v24, *(_DWORD *)(v5 + 280), active, v26, v27, v28, v29);
    if ((int)v11 < 1)
    {
      v34 = 178670639550 * *(_DWORD *)(v2 + 1040);
      if (v30 > (int)((v34 >> 37) + ((unint64_t)v34 >> 63)))
      {
        v32 = *(double *)(v5 + 44);
        v33 = 0.9;
        goto LABEL_46;
      }
    }
    else
    {
      v31 = 123695058150 * *(_DWORD *)(v5 + 276);
      if (v30 > (int)((v31 >> 37) + ((unint64_t)v31 >> 63)))
      {
        v32 = *(double *)(v5 + 44);
        v33 = 0.85;
LABEL_46:
        *(double *)(v5 + 44) = v32 * v33;
        return v11;
      }
    }
    return v11;
  }
LABEL_20:
  v15 = *(double *)(a1 + 739168);
  if (v15 >= (double)*(int *)(a1 + 738568))
    return 0;
  if ((int)(v15 + v15) >= 30)
    v16 = 30;
  else
    v16 = (int)(v15 + v15);
  v17 = *(_DWORD *)(a1 + 842108) + *(_DWORD *)(a1 + 738468);
  *(_DWORD *)(a1 + 842108) = v17;
  if (*(_QWORD *)(a1 + 738640) < 30 * *(_DWORD *)v4 / 100)
    ++*(_DWORD *)(a1 + 842112);
  v18 = *(_DWORD *)(a1 + 842116) + 1;
  *(_DWORD *)(a1 + 842116) = v18;
  if (v18 < v16)
    return 0;
  if (v6 >= 102240 && *(_DWORD *)(a1 + 842112) > v18 >> 2)
  {
    if (v9)
    {
      if (v9 == 1)
      {
        v13 = 2;
        *v1 = 2;
        *(_DWORD *)(a1 + 842116) = 0;
        *(_QWORD *)(a1 + 842108) = 0;
        goto LABEL_19;
      }
      goto LABEL_53;
    }
    v11 = 1;
LABEL_38:
    *v1 = 1;
    *(_DWORD *)(a1 + 842116) = 0;
    *(_QWORD *)(a1 + 842108) = 0;
    goto LABEL_39;
  }
  if (v9)
  {
    v19 = v17 / v18;
    v20 = *(_DWORD *)(a1 + 738728);
    if (v19 < v20 * v7 / 100)
    {
      if (v9 == 1 || v19 < v20 * v8 / 100)
      {
        *v1 = 0;
        *(_DWORD *)(a1 + 842116) = 0;
        v11 = 4294967294;
        v14 = 1;
        v13 = 1;
        *(_QWORD *)(a1 + 842108) = 0;
        goto LABEL_40;
      }
      if (v9 == 2)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_38;
      }
    }
  }
LABEL_53:
  *(_DWORD *)(a1 + 842116) = 0;
  *(_QWORD *)(a1 + 842108) = 0;
  return 0;
}

uint64_t vp9_rc_get_one_pass_cbr_params(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int v7;
  int v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  double v15;
  int v16;
  int v17;
  int v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;

  v2 = a1 + 835456;
  v3 = a1 + 738736;
  v4 = a1 + 738452;
  v5 = (_DWORD *)(a1 + 189844);
  v6 = (int *)(a1 + 171988);
  if (!*(_DWORD *)(a1 + 189844)
    || (*(_BYTE *)v2 & 1) != 0
    || *(_DWORD *)(a1 + 190080) && !*(_DWORD *)(a1 + 738564)
    || *(_DWORD *)(a1 + 190072) != *(_DWORD *)(a1 + 850796))
  {
    v7 = 0;
    *(_DWORD *)(a1 + 172972) = 0;
    *(_DWORD *)(a1 + 738564) = *(_DWORD *)(a1 + 190084);
    *(_DWORD *)(a1 + 738488) = 2000;
    *(_DWORD *)(a1 + 738584) = 0;
    v8 = *(_DWORD *)(a1 + 190148);
    if (!*(_DWORD *)(a1 + 738540))
      goto LABEL_12;
LABEL_9:
    if (v8 == 3)
      goto LABEL_28;
    goto LABEL_10;
  }
  v7 = 1;
  *(_DWORD *)(a1 + 172972) = 1;
  v8 = *(_DWORD *)(a1 + 190148);
  if (*(_DWORD *)(a1 + 738540))
    goto LABEL_9;
LABEL_12:
  if (v8 != 3)
  {
    v11 = *(_DWORD *)(a1 + 738544);
    v12 = *(_DWORD *)(a1 + 738548);
    v13 = __OFADD__(v12, v11);
    v14 = v12 + v11;
    if (v14 < 0 != v13)
      ++v14;
    v10 = v14 >> 1;
    goto LABEL_24;
  }
  v9 = *(int **)(a1 + 740264);
  v10 = 4 * (0x64u / *v9);
  if (*v9 < 11)
    v10 = 40;
  if (!*(_DWORD *)(a1 + 190092))
    v10 = 20;
  *(_DWORD *)(a1 + 738556) = v10;
  if (*(int *)(a1 + 739072) <= 49 && *(int *)(a1 + 738568) >= 41 && v9[33])
  {
    v10 = 10;
LABEL_24:
    *(_DWORD *)(a1 + 738556) = v10;
  }
  if (v10 >= *(_DWORD *)(a1 + 738564))
    v10 = *(_DWORD *)(a1 + 738564);
  *(_DWORD *)(a1 + 738540) = v10;
  *(_DWORD *)(a1 + 194560) = 1;
  *(_DWORD *)(a1 + 738480) = 2000;
  if (v8 == 3)
  {
LABEL_28:
    vp9_cyclic_refresh_update_parameters(a1);
    if (!v6[246])
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_10:
  if (!v7)
  {
LABEL_30:
    if (*v5)
    {
      v15 = *(double *)(v3 + 432);
      v16 = *(_DWORD *)(a1 + 747524);
      if (v16 >= 2 && v5[62] == 1)
        v15 = *(double *)(a1 + 6880 * (*(int *)(a1 + 747516) + *(int *)(a1 + 747512) * (uint64_t)v16) + 752632);
      v17 = (int)(v15 * 2.0 + -16.0);
      if (v17 <= 32)
        v17 = 32;
      v18 = *(_DWORD *)(v4 + 116);
      v19 = v15 * 0.5;
      if (v19 > (double)v18)
        v17 = (int)((double)(v17 * v18) / v19);
      LODWORD(v20) = ((v17 + 16) * *(_DWORD *)(v4 + 140)) >> 4;
      v21 = v5[54];
      if (!(_DWORD)v21)
      {
LABEL_41:
        if ((int)v20 >= *(_DWORD *)(v4 + 148))
          v23 = *(_DWORD *)(v4 + 148);
        else
          v23 = v20;
        *(_DWORD *)v4 = v23;
        v24 = v5[78];
        if (v24 != 2)
          goto LABEL_57;
        goto LABEL_55;
      }
    }
    else
    {
      v25 = *(_QWORD *)v3;
      if (*(uint64_t *)v3 >= 0)
        v26 = *(_QWORD *)v3;
      else
        v26 = v25 + 1;
      v27 = v26 >> 1;
      if (v25 <= 0xFFFFFFFFLL)
        LODWORD(v20) = v27;
      else
        LODWORD(v20) = 0x7FFFFFFF;
      v21 = v5[54];
      if (!(_DWORD)v21)
        goto LABEL_41;
    }
    v22 = *(int *)(v4 + 140) * v21;
    if (v22 / 100 < (int)v20)
      v20 = v22 / 100;
    goto LABEL_41;
  }
LABEL_29:
  if (*((_BYTE *)v6 + 1000))
    goto LABEL_30;
  v23 = vp9_calc_pframe_target_size_one_pass_cbr(a1);
  *(_DWORD *)v4 = v23;
  v24 = v5[78];
  if (v24 != 2)
    goto LABEL_57;
LABEL_55:
  v28 = *(unsigned int *)(v3 + 44);
  if ((_DWORD)v28)
  {
    v23 = (int)(rate_thresh_mult[v28] * (double)v23);
    *(_DWORD *)v4 = v23;
  }
LABEL_57:
  *(_DWORD *)(v4 + 8) = ((uint64_t)v23 << 12) / (v6[1] * (uint64_t)*v6);
  if (v6[247])
  {
    v29 = *(_QWORD *)(v4 + 196) + *(int *)(v4 + 140);
    if (v29 >= *(_QWORD *)(v3 + 16))
      v29 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v4 + 196) = v29;
    *(_QWORD *)(v4 + 188) = v29;
  }
  if (v24 == 2)
  {
    result = vp9_resize_one_pass_cbr(a1);
    *(_DWORD *)(v2 + 6632) = result;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v2 + 6632) = 0;
  }
  return result;
}

uint64_t vp9_compute_qdelta(int a1, int a2, int a3, double a4, double a5)
{
  double v5;
  double v6;
  int v7;
  int v8;
  int v11;
  int v13;
  int v15;
  _WORD *v16;
  int v17;
  __int16 v18;

  v5 = 0.015625;
  if (a3 == 10)
    v5 = 0.0625;
  v6 = 0.25;
  if (a3 == 8)
    v5 = 0.25;
  if (a2 >= a1)
    return 0;
  switch(a3)
  {
    case 8:
      v7 = a2;
      do
      {
        if (v7 >= 255)
          v11 = 255;
        else
          v11 = v7;
        LOWORD(v6) = ac_qlookup_0[v11 & ~(v11 >> 31)];
        v6 = v5 * (double)vmovl_s16(*(int16x4_t *)&v6).i32[0];
        ++v7;
      }
      while (v6 < a4 && v7 < a1);
      goto LABEL_36;
    case 10:
      v7 = a2;
      do
      {
        if (v7 >= 255)
          v13 = 255;
        else
          v13 = v7;
        LOWORD(v6) = ac_qlookup_10[v13 & ~(v13 >> 31)];
        v6 = v5 * (double)vmovl_s16(*(int16x4_t *)&v6).i32[0];
        ++v7;
      }
      while (v6 < a4 && v7 < a1);
      goto LABEL_36;
    case 12:
      v7 = a2;
      do
      {
        if (v7 >= 255)
          v8 = 255;
        else
          v8 = v7;
        LOWORD(v6) = ac_qlookup_12[v8 & ~(v8 >> 31)];
        v6 = v5 * (double)vmovl_s16(*(int16x4_t *)&v6).i32[0];
        ++v7;
      }
      while (v6 < a4 && v7 < a1);
LABEL_36:
      v15 = v7 - 1;
      goto LABEL_48;
  }
  v15 = a2;
  if (-v5 < a4)
    v15 = a1 - 1;
  do
  {
LABEL_48:
    switch(a3)
    {
      case 8:
        v16 = ac_qlookup_0;
        break;
      case 12:
        v16 = ac_qlookup_12;
        break;
      case 10:
        v16 = ac_qlookup_10;
        break;
      default:
        v18 = -1;
        goto LABEL_43;
    }
    if (a2 >= 255)
      v17 = 255;
    else
      v17 = a2;
    v18 = v16[v17 & ~(v17 >> 31)];
LABEL_43:
    ++a2;
  }
  while (v5 * (double)v18 < a5 && a2 < a1);
  return (a2 - 1 - v15);
}

uint64_t vp9_rc_set_gf_interval_range(uint64_t result, uint64_t a2)
{
  double v2;
  int v3;
  int v4;
  double v5;
  int v6;
  unsigned int v7;
  signed int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;

  if (!*(_DWORD *)(result + 190076) && *(_DWORD *)(result + 190092) == 3)
  {
    *(_QWORD *)(a2 + 96) = 0x800000008;
    *(_DWORD *)(a2 + 104) = 8;
    return result;
  }
  v2 = *(double *)(result + 739168);
  v3 = *(_DWORD *)(result + 190332);
  *(_DWORD *)(a2 + 100) = v3;
  v4 = *(_DWORD *)(result + 190328);
  if (!v4)
  {
    v5 = v2 * (double)(*(_DWORD *)(result + 189996) * *(_DWORD *)(result + 189992));
    v4 = (int)(v2 * 0.125);
    if (v4 >= 16)
      v4 = 16;
    if (v4 <= 4)
      v4 = 4;
    if (v5 > 165888000.0 && v4 <= (int)(v5 * 4.0 / 165888000.0 + 0.5))
      v4 = (int)(v5 * 4.0 / 165888000.0 + 0.5);
  }
  if (v3)
  {
    *(_DWORD *)(a2 + 104) = 250;
    if (v3 < 251)
      goto LABEL_14;
LABEL_23:
    v3 = 250;
    if (v4 >= 250)
      v4 = 250;
    *(_DWORD *)(a2 + 96) = v4;
    *(_DWORD *)(a2 + 100) = 250;
    if (*(_DWORD *)(result + 190352) != 1)
      return result;
    goto LABEL_26;
  }
  v6 = (int)(v2 * 0.75);
  if (v6 >= 16)
    v6 = 16;
  v3 = (v6 & 1) + v6;
  if (v3 <= v4)
    v3 = v4;
  *(_DWORD *)(a2 + 100) = v3;
  *(_DWORD *)(a2 + 104) = 250;
  if (v3 >= 251)
    goto LABEL_23;
LABEL_14:
  if (v4 >= v3)
    v4 = v3;
  *(_DWORD *)(a2 + 96) = v4;
  if (*(_DWORD *)(result + 190352) != 1)
    return result;
LABEL_26:
  v8 = *(_DWORD *)(result + 171988);
  v7 = *(_DWORD *)(result + 171992);
  v9 = v7 * v8;
  if (v8 > (int)v7)
    v7 = *(_DWORD *)(result + 171988);
  if (v9 > 0x9000 || v7 > 0x200)
  {
    if (v9 > 0x12000 || v7 >= 0x301)
    {
      if (v9 > 0x1E000 || v7 >= 0x3C1)
      {
        if (v9 > 0x3C000 || v7 >= 0x541)
        {
          if (v9 > 0x87000 || v7 >= 0x801)
          {
            if (v9 > 0xF0000 || v7 >= 0xAC1)
            {
              if (v9 > 0x220000 || v7 >= 0x1041)
              {
                if (v9 > 0x880000 || v7 >= 0x20C1)
                {
                  if (v9 > 0x2200000 || v7 >= 0x41C1)
                    return result;
                  v10 = 11;
                }
                else
                {
                  v10 = 8;
                }
              }
              else
              {
                v10 = 6;
              }
            }
            else
            {
              v10 = 5;
            }
          }
          else
          {
            v10 = 4;
          }
        }
        else
        {
          v10 = 3;
        }
      }
      else
      {
        v10 = 2;
      }
    }
    else
    {
      v10 = 1;
    }
  }
  else
  {
    v10 = 0;
  }
  v11 = vp9_level_defs[16 * v10 + 13];
  if (v4 <= v11)
  {
    if (v3 <= v11)
      v3 = v11;
    *(_DWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 100) = v3;
  }
  return result;
}

uint64_t vp9_set_target_rate(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;

  LODWORD(v1) = *(_DWORD *)(result + 738448);
  v2 = *(_DWORD *)(result + 172972);
  if (v2)
  {
    v3 = *(_DWORD *)(result + 738596);
    v4 = *(int *)(result + 738592);
    if (v3 <= (int)v4 >> 5)
      v3 = (int)v4 >> 5;
    if (v3 > (int)v1)
      LODWORD(v1) = v3;
    if (*(_DWORD *)(result + 194560) && *(_DWORD *)(result + 738588))
      LODWORD(v1) = v3;
    if ((int)v1 >= *(_DWORD *)(result + 738600))
      LODWORD(v1) = *(_DWORD *)(result + 738600);
    v5 = *(unsigned int *)(result + 190064);
    if ((_DWORD)v5 && v5 * v4 / 100 < (int)v1)
      v1 = v5 * v4 / 100;
    if (!*(_DWORD *)(result + 190184))
      goto LABEL_22;
  }
  else
  {
    v6 = *(unsigned int *)(result + 190060);
    if ((_DWORD)v6)
    {
      v7 = *(int *)(result + 738592) * v6;
      if (v7 / 100 < (int)v1)
        v1 = v7 / 100;
    }
    if ((int)v1 >= *(_DWORD *)(result + 738600))
      LODWORD(v1) = *(_DWORD *)(result + 738600);
    if (!*(_DWORD *)(result + 190184))
    {
LABEL_22:
      if ((*(_DWORD *)(result + 190092) | 2) != 2)
        goto LABEL_59;
      v8 = (int)v1;
      v9 = (int)*(double *)(result + 741528) - *(_DWORD *)(result + 189844);
      if (v9 >= 0x10)
        v10 = 16;
      else
        v10 = v9;
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(result + 738656);
        if (v11 < 1)
        {
          v20 = -v11 / v10;
          v21 = (uint64_t)(int)(v1 + ((int)v1 < 0)) >> 1;
          if (v20 < v21)
            v21 = v20;
          if (v11 >= -v21)
            v21 = -v11;
          v8 -= v21;
          if (!v2)
            goto LABEL_56;
          goto LABEL_34;
        }
        v12 = v11 / v10;
        v13 = (uint64_t)(int)(v1 + ((int)v1 < 0)) >> 1;
        if (v12 < v13)
          v13 = v12;
        if (v11 < v13)
          v13 = *(_QWORD *)(result + 738656);
        v8 += v13;
      }
      if (!v2)
      {
LABEL_56:
        if (v8 >= 0x7FFFFFFF)
          LODWORD(v1) = 0x7FFFFFFF;
        else
          LODWORD(v1) = v8;
        goto LABEL_59;
      }
LABEL_34:
      if (!*(_BYTE *)(result + 172988)
        && !*(_DWORD *)(result + 194564)
        && !*(_DWORD *)(result + 194560)
        && !*(_DWORD *)(result + 738588))
      {
        v14 = *(_QWORD *)(result + 738664);
        if (v14)
        {
          v15 = *(int *)(result + 738592);
          if (v8 > v15)
            v15 = v8;
          if (v14 >= v15)
            v16 = v15;
          else
            v16 = *(_QWORD *)(result + 738664);
          v17 = v15 / 8;
          v18 = v14 + 7;
          if (v14 >= 0)
            v18 = *(_QWORD *)(result + 738664);
          v19 = v18 >> 3;
          if (v17 <= v19)
            v17 = v19;
          if (v16 < v17)
            v17 = v16;
          v8 += v17;
          *(_QWORD *)(result + 738664) = v14 - v17;
        }
      }
      goto LABEL_56;
    }
  }
LABEL_59:
  *(_DWORD *)(result + 738452) = v1;
  if (*(_DWORD *)(result + 190156) == 2)
  {
    v22 = *(unsigned int *)(result + 738780);
    if ((_DWORD)v22)
    {
      LODWORD(v1) = (int)(rate_thresh_mult[v22] * (double)(int)v1);
      *(_DWORD *)(result + 738452) = v1;
    }
  }
  *(_DWORD *)(result + 738460) = ((uint64_t)(int)v1 << 12)
                               / (*(int *)(result + 171992)
                                * (uint64_t)*(int *)(result + 171988));
  return result;
}

uint64_t calc_active_worst_quality_one_pass_cbr(uint64_t a1)
{
  uint64_t result;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_DWORD *)(a1 + 172972) || *(_BYTE *)(a1 + 172988) || *(_DWORD *)(a1 + 739084) || *(_DWORD *)(a1 + 739096))
    return *(unsigned int *)(a1 + 738728);
  if (*(_DWORD *)(a1 + 189844) >= (5 * *(_DWORD *)(a1 + 747524)))
  {
    v2 = *(_DWORD *)(a1 + 738620);
  }
  else
  {
    v2 = *(_DWORD *)(a1 + 738620);
    if (v2 >= *(_DWORD *)(a1 + 738616))
      v2 = *(_DWORD *)(a1 + 738616);
  }
  v3 = *(_QWORD *)(a1 + 738744);
  v4 = *(_DWORD *)(a1 + 738728);
  LODWORD(v5) = (5 * v2) >> 2;
  if (v4 >= (int)v5)
    v5 = v5;
  else
    v5 = v4;
  if (*(_DWORD *)(a1 + 747508))
  {
    if (*(int *)(a1 + 747512) >= 1)
    {
      v6 = *(_DWORD *)(a1 + 747516);
      if (*(_DWORD *)(a1 + 6880 * v6 + 758668))
      {
        if (v2 >= *(_DWORD *)(a1 + 6880 * v6 + 751920))
          v2 = *(_DWORD *)(a1 + 6880 * v6 + 751920);
        LODWORD(v5) = (9 * v2) >> 3;
        if (v4 >= (int)v5)
          v5 = v5;
        else
          v5 = v4;
      }
    }
  }
  v7 = *(_QWORD *)(a1 + 738640);
  if (v7 <= v3)
  {
    result = *(unsigned int *)(a1 + 738728);
    if (v7 > v3 >> 3)
    {
      result = v5;
      if ((unint64_t)v3 >= 8)
      {
        v10 = v3 - (v3 >> 3);
        if (v10)
          v10 = (v3 - v7) * (v4 - v2) / v10;
        return (v10 + v2);
      }
    }
  }
  else
  {
    v8 = (int)v5 / 3;
    if (*(_DWORD *)(a1 + 190380) == 1)
      v8 = (int)v5 >> 3;
    if (v8)
    {
      v9 = (*(_QWORD *)(a1 + 738752) - v3) / v8;
      if (v9)
        v9 = (v7 - v3) / v9;
      return (v5 - v9);
    }
    else
    {
      return v5;
    }
  }
  return result;
}

uint64_t vp9_scene_detection_onepass(uint64_t result)
{
  uint64_t v1;
  int *v2;
  int *v3;
  BOOL v4;
  uint64_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  unsigned int *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  int v24;
  unsigned int v25;
  int *v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  int v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _BOOL4 v86;
  int v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  unsigned int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  double v114;
  unint64_t v115;
  BOOL v116;
  char v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  char v127;
  int v128;
  int v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int *v140;
  unint64_t v141;
  _BOOL4 v142;
  _DWORD *v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  _DWORD *v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  _OWORD v166[12];
  uint64_t v167;
  uint64_t v168;

  v168 = *MEMORY[0x24BDAC8D0];
  v1 = result + 190424;
  v2 = *(int **)(result + 190456);
  v3 = *(int **)(result + 190624);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return result;
  v5 = result;
  v163 = result + 741232;
  v6 = *(_DWORD *)(result + 747508);
  if (v6)
  {
    if (!*(_DWORD *)(result + 834688))
      return result;
  }
  v7 = (int *)(result + 171988);
  if (*(_DWORD *)(result + 172020))
    return result;
  v8 = *((_QWORD *)v2 + 7);
  v165 = v2[4];
  v9 = result + 738744;
  v10 = *v2;
  v11 = v2[1];
  v12 = *((_QWORD *)v3 + 7);
  v164 = v3[4];
  v13 = *v3;
  v14 = *(_DWORD *)(*(_QWORD *)(result + 190624) + 4);
  *(_DWORD *)(result + 739056) = 0;
  *(_DWORD *)(result + 739044) = 0;
  v156 = result + 747512;
  if (*(_DWORD *)(result + 747512) != *(_DWORD *)(result + 835324))
    return result;
  if (v10 != v13 || v11 != v14)
    return result;
  v16 = result + 738452;
  v17 = (unsigned int *)(result + 189844);
  v167 = 0;
  memset(v166, 0, sizeof(v166));
  v18 = *(_DWORD *)(result + 173016);
  v19 = *(_DWORD *)(result + 173008);
  if (*(int *)(result + 190056) >= 6)
    v20 = 140000;
  else
    v20 = 240000;
  v141 = v20;
  if (*(_DWORD *)(result + 190380) == 1)
    v21 = 20000;
  else
    v21 = 65000;
  v155 = v21;
  v22 = *(_DWORD *)(result + 190092);
  if (v22)
    v23 = 8.0;
  else
    v23 = 2.1;
  if (v6 && *(int *)(result + 747520) > 1)
  {
    v18 = (v10 + 7) >> 3;
    v19 = (v11 + 7) >> 3;
  }
  v150 = v19;
  v151 = v18;
  v24 = *(_DWORD *)(result + 190088);
  v154 = (_DWORD *)(result + 189844);
  v143 = (_DWORD *)(result + 190424);
  if (v24 >= 1)
  {
    v25 = *v17;
    v26 = *(int **)v1;
    v27 = *(_DWORD *)(*(_QWORD *)v1 + 4);
    v149 = v27;
    if (*v17 == 1)
    {
      v28 = v27 - 1;
      if (v27 < 2)
      {
        v29 = 0;
        goto LABEL_44;
      }
    }
    else
    {
      v28 = 2;
    }
    v30 = 0;
    v31 = v27 - 1;
    do
    {
      if ((v31 & 0x80000000) == 0)
      {
        if (v27 > v31)
        {
          v32 = v26[2];
          if (v31 + v32 >= *v26)
            v33 = *v26;
          else
            v33 = 0;
          v34 = *((_QWORD *)v26 + 3) + 192 * (v31 + v32 - v33);
        }
        else
        {
          v34 = 0;
        }
        *((_QWORD *)v166 + v30) = v34;
      }
      ++v30;
      --v31;
    }
    while (v28 != v30);
    v29 = 1;
LABEL_44:
    result = v5 + 738840;
    v35 = *(_QWORD *)(v5 + 738840);
    v36 = *(_QWORD *)(v5 + 738832);
    LODWORD(v37) = (float)(v23 * (float)v36);
    if (v155 <= v37)
      v37 = v37;
    else
      v37 = v155;
    v147 = *(_QWORD *)(v9 + 96);
    if (v35 <= v37)
    {
      v142 = 0;
      *(_DWORD *)(v5 + 739056) = 0;
      if (!v35)
      {
LABEL_54:
        if (v24 < 3)
        {
          if (!v29)
          {
LABEL_56:
            if (v22 != 1)
              goto LABEL_135;
            goto LABEL_57;
          }
        }
        else
        {
          result = (uint64_t)memmove((void *)result, (const void *)(v5 + 738848), 8 * (v24 - 2));
          if (!v29)
            goto LABEL_56;
        }
        goto LABEL_68;
      }
    }
    else if (v25 <= v24)
    {
      v142 = 0;
      *(_DWORD *)(v5 + 739056) = 0;
    }
    else
    {
      *(_DWORD *)(v5 + 739056) = 1;
      v142 = v147 > v141;
    }
    *(_QWORD *)(v5 + 738832) = (3 * v36 + v147) >> 2;
    goto LABEL_54;
  }
  v147 = 0;
  v142 = 0;
  v28 = 1;
  v149 = 1;
LABEL_68:
  v148 = v5 + 738452;
  v140 = (int *)(v5 + 171988);
  result = 0;
  v44 = v150;
  v43 = v151;
  v45 = v151 + 7;
  if (v151 < -7)
    v45 = v151 + 14;
  v46 = v45 >> 3;
  v47 = v150 + 7;
  if (v150 < -7)
    v47 = v150 + 14;
  v48 = v47 >> 3;
  v49 = v48 - 1;
  if (v48 <= 1)
    v50 = 1;
  else
    v50 = v48;
  v51 = v46 - 1;
  if (v46 <= 1)
    v52 = 1;
  else
    v52 = v46;
  v53 = (unint64_t)(v52 - 1) << 6;
  v54 = v28;
  v157 = v5;
  v158 = v53;
  v55 = v154;
  v56 = v149;
  v146 = v5 + 738744;
  v145 = v46;
  v160 = v48 - 1;
  v159 = v50;
  v144 = v28;
  do
  {
    v57 = v55[61];
    if (v57)
    {
      v58 = *((_QWORD *)v166 + result);
      if (!v58)
        goto LABEL_80;
      v59 = *((_QWORD *)v166 + result + 1);
      if (!v59 || *(_DWORD *)v58 != *(_DWORD *)v59 || *(_DWORD *)(v58 + 4) != *(_DWORD *)(v59 + 4))
        goto LABEL_80;
      v60 = v56 - result;
      if (v57 >= 1)
      {
        v8 = *(_QWORD *)(v58 + 56);
        v12 = *(_QWORD *)(v59 + 56);
        v164 = *(_DWORD *)(v59 + 16);
        v165 = *(_DWORD *)(v58 + 16);
      }
      if (v44 < 1)
        goto LABEL_98;
    }
    else
    {
      v60 = 0;
      if (v44 < 1)
        goto LABEL_98;
    }
    v61 = (int)((v165 - v46) << 6);
    v62 = (int)((v164 - v46) << 6);
    if (v43 < 1)
    {
      v65 = 0;
      v66 = 0;
      v67 = 0;
      v8 += v61 * v50;
      v12 += v62 * v50;
      if (v60)
        goto LABEL_99;
    }
    else
    {
      if (v43 < 9)
      {
        v63 = 0;
        do
        {
          if (v63 != 0 && v63 < v49)
            v64 = 0;
          else
            v64 = v53;
          v8 += v61 + v64 + 64;
          v12 += v62 + v64 + 64;
          ++v63;
        }
        while ((_DWORD)v50 != v63);
LABEL_98:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        if (v60)
          goto LABEL_99;
        goto LABEL_101;
      }
      v152 = v60;
      v153 = result;
      v65 = 0;
      v67 = 0;
      v71 = 0;
      v66 = 0;
      v161 = (int)((v164 - v46) << 6);
      v162 = (int)((v165 - v46) << 6);
      do
      {
        if (v71 && v71 < v49)
        {
          v72 = 1;
          do
          {
            v12 += 64;
            v8 += 64;
            if (v72 < v51 && ((v71 & 1 & v72) != 0 || ((v72 | v71) & 1) == 0))
            {
              v73 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))v163)(v8, v165, v12, v164);
              v67 += v73;
              ++v65;
              if (!v73)
                ++v66;
            }
            ++v72;
          }
          while (v52 != v72);
        }
        else
        {
          v8 += v158;
          v12 += v158;
        }
        v8 += v162 + 64;
        v12 += v161 + 64;
        ++v71;
        v50 = v159;
        v49 = v160;
      }
      while (v71 != (_DWORD)v159);
      v53 = (unint64_t)(v52 - 1) << 6;
      if (v65 >= 1)
        v67 /= v65;
      v9 = v146;
      result = v153;
      v55 = v154;
      v44 = v150;
      v43 = v151;
      v56 = v149;
      v46 = v145;
      v54 = v144;
      v60 = v152;
      if (v152)
      {
LABEL_99:
        *(_QWORD *)(v157 + 8 * v60 + 738832) = v67;
        goto LABEL_132;
      }
    }
LABEL_101:
    v68 = *(_QWORD *)(v9 + 88);
    LODWORD(v69) = (float)(v23 * (float)v68);
    if (v155 <= v69)
      v69 = v69;
    else
      v69 = v155;
    if (v67 <= v69)
    {
      *(_DWORD *)(v9 + 312) = 0;
      if (!v67 && v55[62] != 1)
        goto LABEL_132;
    }
    else if (*(_DWORD *)(v148 + 116) <= *(_DWORD *)(v156 + 8) + 1 || v66 >= 3 * (v65 >> 2))
    {
      *(_DWORD *)(v9 + 312) = 0;
    }
    else
    {
      *(_DWORD *)(v9 + 312) = 1;
      v70 = v142;
      if (v67 > v141)
        v70 = 1;
      v142 = v70;
    }
    *(_QWORD *)(v9 + 88) = (3 * v68 + v67) >> 2;
LABEL_132:
    if (v66 < (3 * v65) >> 2)
      *(_DWORD *)(v9 + 300) = 1;
    v5 = v157;
LABEL_80:
    ++result;
  }
  while (result != v54);
  v22 = v55[62];
  v7 = v140;
  v16 = v148;
  if (v22 == 1)
  {
LABEL_57:
    v38 = v154;
    v39 = *(_DWORD *)(v163 + 6276);
    v40 = v147;
    if (v154[134] == 1)
      goto LABEL_136;
    if (v39)
      goto LABEL_137;
    if (*(_DWORD *)(v9 + 312))
    {
      v41 = *(_DWORD *)(v16 + 16);
      if (v41 == *(_DWORD *)(v16 + 280) && *(_DWORD *)(v16 + 168) < 2 * v41 && *(double *)(v16 + 44) == 0.005)
      {
        *(_QWORD *)(v16 + 44) = 0x3FE0000000000000;
        *(_DWORD *)(v16 + 168) = *(_DWORD *)(v16 + 276);
        v42 = *(_QWORD *)v9;
        *(_QWORD *)(v16 + 188) = *(_QWORD *)v9;
        *(_QWORD *)(v16 + 196) = v42;
        *(_DWORD *)(v9 + 340) = 1;
      }
    }
    if (v7[246] && *(_DWORD *)(v9 + 340))
      *(_DWORD *)v16 = *(_DWORD *)(v16 + 140);
    goto LABEL_150;
  }
LABEL_135:
  v39 = *(_DWORD *)(v163 + 6276);
  v38 = v154;
  v40 = v147;
LABEL_136:
  if (v39)
  {
LABEL_137:
    v74 = *(unsigned int *)(v156 + 8);
    if ((int)v74 >= 1)
    {
      v75 = *(unsigned int *)(v156 + 12);
      if ((int)v75 >= 1)
      {
        v76 = 0;
        v77 = (_QWORD *)(v5 + 752288);
        v78 = *(_QWORD *)(v9 + 88);
        do
        {
          if (v75 >= 2)
          {
            v79 = v75 & 0xFFFFFFFE;
            v80 = v77;
            do
            {
              *v80 = v78;
              v80[860] = v78;
              v80 += 1720;
              v79 -= 2;
            }
            while (v79);
            result = v75 & 0xFFFFFFFE;
            if (result == v75)
              goto LABEL_140;
          }
          else
          {
            result = 0;
          }
          v81 = v75 - result;
          result = 6880 * result;
          do
          {
            *(_QWORD *)((char *)v77 + result) = v78;
            result += 6880;
            --v81;
          }
          while (v81);
LABEL_140:
          ++v76;
          v77 += 860 * v75;
        }
        while (v76 != v74);
      }
    }
  }
  if (v22
    || !v7[246]
    || !*(_DWORD *)(v9 + 312)
    || (v108 = *(_DWORD *)(v16 + 112), (int)v108 < 4)
    || *(int *)(v9 + 316) < 5
    || v143[1036])
  {
LABEL_150:
    ++*(_DWORD *)(v9 + 316);
    v82 = v38[61];
    v83 = v82 - 1;
    if (v82 < 1)
      return result;
    goto LABEL_151;
  }
  v143[1034] = 1;
  if (v142)
    v7[246] = 0;
  *(_DWORD *)(v16 + 128) = 0;
  if (*(_DWORD *)(v9 + 1388) && v38[115])
    *(_DWORD *)(v16 + 128) = 1;
  *(_DWORD *)(v16 + 28) = 1000;
  v109 = *(_DWORD *)(v16 + 104);
  if (v109 <= 10)
    v109 = 10;
  if (v109 >= 20)
    v109 = 20;
  *(_DWORD *)(v16 + 104) = v109;
  *(_DWORD *)(v16 + 108) = 0;
  if (v109 < v108 && (7 * v109) >> 2 >= v108)
  {
    v108 >>= 1;
    goto LABEL_316;
  }
  if (v109 > v108)
  {
LABEL_316:
    *(_DWORD *)(v16 + 104) = v108;
    *(_DWORD *)(v16 + 108) = 1;
    v109 = v108;
  }
  *(_DWORD *)(v16 + 88) = v109;
  v139 = vp9_calc_pframe_target_size_one_pass_vbr((_DWORD *)v5);
  result = (uint64_t)vp9_rc_set_frame_target((_DWORD *)v5, v139);
  *(_DWORD *)(v9 + 316) = 0;
  v82 = v38[61];
  v83 = v82 - 1;
  if (v82 < 1)
    return result;
LABEL_151:
  v84 = *(unsigned int *)(*(_QWORD *)v143 + 4);
  if ((int)v84 < 2)
  {
    v92 = -1;
    v110 = 1;
    v89 = -1;
    goto LABEL_210;
  }
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v88 = (v84 - 1);
  v89 = -1;
  v90 = 1;
  result = 738832;
  v91 = *(unsigned int *)(*(_QWORD *)v143 + 4);
  v92 = -1;
  do
  {
    v93 = v40;
    --v91;
    v94 = *(_QWORD *)(v9 + 88);
    v95 = v88 - v91;
    if (v88 != v91)
    {
      v96 = (uint64_t *)(v9 + 96);
      v97 = v85;
      v94 = *(_QWORD *)(v9 + 88);
      do
      {
        v98 = *v96++;
        v99 = (v98 + 3 * v94) >> 2;
        if (v98)
          v94 = v99;
        --v97;
      }
      while (v97);
    }
    v100 = v95 + 1;
    if (v87)
    {
      v87 = 1;
      if (v88 == v91)
        goto LABEL_154;
    }
    else
    {
      v101 = *(_QWORD *)(v5 + 8 * v100 + 738832);
      LODWORD(v102) = 2 * v94;
      if ((2 * v94) <= 0x11170)
        v102 = 70000;
      else
        v102 = v102;
      if (v101 <= v102
        && ((LODWORD(v94) = 4 * v94, v94 <= 0xCD14) ? (v94 = 52500) : (v94 = v94),
            v101 <= v94))
      {
        v87 = 0;
        if (v88 == v91)
          goto LABEL_154;
      }
      else
      {
        v87 = 1;
        v92 = v95 + 1;
        if (v88 == v91)
          goto LABEL_154;
      }
    }
    if (!v86)
    {
      if (v100 >= (uint64_t)v88 || (v103 = *(_QWORD *)(v5 + 8 * v95 + 738832), v103 < 0x445D))
      {
        v86 = 0;
      }
      else
      {
        v104 = v103 >> 1;
        v105 = 1;
        v106 = v100;
        do
        {
          v107 = *(_QWORD *)(v5 + 8 * v106 + 738832);
          if (v107 >= v104 || v107 - 1 >= 0x445B)
          {
            v105 = 0;
            v106 = v84 - 1;
          }
          ++v106;
        }
        while (v106 < (int)v88);
        v86 = v105 != 0;
        if (v105)
          v89 = v100;
      }
    }
LABEL_154:
    v40 = *(_QWORD *)(v5 + 8 * v100 + 738832) + v93;
    ++v90;
    ++v85;
  }
  while (v90 != v84);
  v40 /= v88;
  if (v92 == -1)
  {
    v110 = 1;
    v38 = v154;
  }
  else
  {
    v111 = *(_DWORD *)(v9 + 296);
    if (v92 == v111 - 1)
    {
      v110 = 0;
      v38 = v154;
    }
    else
    {
      v112 = v92 - v111;
      if (v112 < 0)
        v112 = -v112;
      v116 = v112 > 3;
      v38 = v154;
      v110 = 0;
      if (!v116)
        v92 = -1;
    }
  }
LABEL_210:
  *(_DWORD *)(v9 + 296) = v92;
  if (v143[1034] == 1 && v82 >= 9 && *v38 >= 0x1Fu)
  {
    v113 = *(_DWORD *)(v16 + 228);
    if (v113 < 1)
      v114 = 1.0;
    else
      v114 = (double)*(int *)(v16 + 232) / (double)v113;
    if (v110)
    {
      v115 = *(_QWORD *)(v9 + 288);
      v116 = v40 > 0x1D4C0 || v40 > 2 * v115;
      v117 = v116;
      if (v40 < 0x11170 || v40 < v115 >> 1)
      {
        *(_DWORD *)(v16 + 28) = 2000;
        v123 = *(_DWORD *)(v16 + 104);
        if (v123 <= 10)
          v122 = (3 * v123) >> 1;
        else
          v122 = 15;
        *(_DWORD *)(v16 + 104) = v122;
        v118 = 1;
      }
      else
      {
        if ((v117 & 1) != 0)
          goto LABEL_226;
        v118 = 0;
        v117 = 0;
        v122 = *(_DWORD *)(v16 + 104);
      }
    }
    else
    {
LABEL_226:
      v118 = 0;
      *(_DWORD *)(v16 + 28) = 1000;
      v119 = *(_DWORD *)(v16 + 104);
      if (v114 <= 3.0)
        v120 = 12;
      else
        v120 = 20;
      if (v114 <= 3.0)
        v121 = 6;
      else
        v121 = 10;
      if (v119 >= v120)
        v122 = v119 >> 1;
      else
        v122 = v121;
      *(_DWORD *)(v16 + 104) = v122;
      v117 = 1;
    }
    if (v122 >= v82)
    {
      *(_DWORD *)(v16 + 104) = v83;
      v122 = v83;
    }
    v124 = *(_DWORD *)(v16 + 112);
    if (v124 > v92 && v92 > 0)
      v124 = v92;
    if (v124 > v89 && v89 > 3)
      v124 = v89;
    *(_DWORD *)(v16 + 108) = 0;
    if (v122 < v124 && (7 * v122) >> 2 >= v124)
    {
      v124 = v124 >> (v124 > 9);
      goto LABEL_257;
    }
    if (v122 > v124)
    {
LABEL_257:
      *(_DWORD *)(v16 + 104) = v124;
      *(_DWORD *)(v16 + 108) = 1;
      v122 = v124;
    }
    *(_DWORD *)(v16 + 88) = v122;
    *(_QWORD *)(v9 + 80) = 0x6400000096;
    if (v114 >= 2.0)
      v127 = 1;
    else
      v127 = v117;
    if ((v127 & 1) != 0)
    {
      if (v114 > 8.0)
      {
        v128 = *(_DWORD *)(v16 + 168);
        if (v128 <= 15)
        {
          if (v128 >= 8)
            v129 = 200;
          else
            v129 = 400;
          *(_DWORD *)(v9 + 80) = v129;
        }
      }
    }
    else
    {
      *(_QWORD *)(v9 + 80) = 0x5A00000078;
    }
    if (v118 && *(int *)(v9 + 328) >= 81)
    {
      *(_DWORD *)(v9 + 332) = 15;
    }
    else if ((v117 & 1) != 0 || *(int *)(v9 + 328) <= 29)
    {
      *(_DWORD *)(v9 + 332) = 5;
      *(_DWORD *)(v16 + 28) = 500;
    }
    if (*(_DWORD *)(v9 + 1388) && v38[115])
    {
      if (v7[246] && !*(_DWORD *)(v9 + 312) && *(double *)(v9 + 344) < 15.0 && (int)v38[53] > 4)
        goto LABEL_288;
      if (v92 < 1)
      {
        if (v40 >= 0x668B)
          goto LABEL_288;
LABEL_284:
        v130 = v40;
        *(_DWORD *)(v16 + 128) = 1;
        *(_DWORD *)(v9 + 304) = 1;
        if (v122 >= 13)
        {
          v122 = 12;
          *(_DWORD *)(v16 + 104) = 12;
          *(_DWORD *)(v16 + 88) = 12;
        }
      }
      else
      {
        if (v92 > v122 && v40 <= 0x668A)
          goto LABEL_284;
LABEL_288:
        v130 = v40;
        *(_DWORD *)(v16 + 128) = 0;
        *(_DWORD *)(v9 + 304) = 0;
      }
    }
    else
    {
      v130 = v40;
    }
    v131 = *(_DWORD *)(v16 + 136);
    v132 = *(int *)(v16 + 140);
    if (v131)
      v133 = 1;
    else
      v133 = *(_DWORD *)(v9 + 332);
    if (*(_DWORD *)(v163 + 6276))
    {
      result = vp9_calc_pframe_target_size_one_pass_cbr(v5);
      v134 = (int)result;
    }
    else
    {
      v134 = (int)v132 * (uint64_t)v122 * v133 / (v122 + *(_DWORD *)(v9 + 332) - 1);
    }
    if (v134 >= 0x7FFFFFFF)
      LODWORD(v134) = 0x7FFFFFFF;
    v135 = (int)v132 >> 5;
    if (*(_DWORD *)(v16 + 144) > (int)v132 >> 5)
      v135 = *(_DWORD *)(v16 + 144);
    if (v135 > (int)v134)
      LODWORD(v134) = v135;
    if (v131)
      LODWORD(v134) = v135;
    if ((int)v134 >= *(_DWORD *)(v16 + 148))
      LODWORD(v134) = *(_DWORD *)(v16 + 148);
    v136 = v38[55];
    v137 = v136 * v132 / 100;
    if (v137 >= (int)v134)
      LODWORD(v137) = v134;
    if ((_DWORD)v136)
      LODWORD(v134) = v137;
    *(_DWORD *)v16 = v134;
    if (v38[78] == 2)
    {
      v138 = *(unsigned int *)(v9 + 36);
      v40 = v130;
      if ((_DWORD)v138)
      {
        LODWORD(v134) = (int)(rate_thresh_mult[v138] * (double)(int)v134);
        *(_DWORD *)v16 = v134;
      }
    }
    else
    {
      v40 = v130;
    }
    *(_DWORD *)(v16 + 8) = ((uint64_t)(int)v134 << 12) / (v7[1] * (uint64_t)*v7);
  }
  *(_QWORD *)(v9 + 288) = v40;
  return result;
}

uint64_t vp9_encodedframe_overshoot(uint64_t a1, int a2, int *a3)
{
  double *v3;
  uint64_t v4;
  int v5;
  int v7;
  signed int v8;
  double v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  double v26;
  int v27;
  int v28;
  double v29;
  _WORD *v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = (double *)(a1 + 738496);
  v4 = *(int *)(a1 + 738592);
  v5 = *(_DWORD *)(a1 + 740148);
  if (v5 != 1 && 8 * (int)v4 >= a2)
    return 0;
  v7 = *(_DWORD *)(a1 + 738728);
  if (*(_DWORD *)(a1 + 190380) == 1)
    v8 = (v7 & 0xFFFFFFF8) - (v7 >> 3);
  else
    v8 = 3 * (v7 >> 2);
  if (*(_DWORD *)(a1 + 173028) >= v8)
    return 0;
  v9 = *v3;
  *a3 = v7;
  *(_DWORD *)(*(_QWORD *)(a1 + 740264) + 124) = 0;
  *(_DWORD *)(a1 + 739068) = 1;
  if (v5 != 2 || 16 * (int)v4 >= a2 || *(_DWORD *)(a1 + 747512))
    goto LABEL_36;
  v10 = 0;
  v11 = *(_DWORD *)(a1 + 173008);
  v12 = *(unsigned int *)(a1 + 173016);
  if (v11 < 1 || (int)v12 < 1)
    goto LABEL_34;
  v13 = 0;
  v14 = 0;
  v15 = *(uint64_t **)(a1 + 173176);
  do
  {
    if (v12 < 2)
    {
      v16 = 0;
      v17 = v15;
LABEL_26:
      v20 = v12 - v16;
      do
      {
        v21 = *v17++;
        if (!*(_BYTE *)(v21 + 8))
          ++v14;
        --v20;
      }
      while (v20);
      goto LABEL_16;
    }
    v18 = 0;
    v19 = 0;
    v17 = &v15[v12 & 0xFFFFFFFE];
    do
    {
      if (!*(_BYTE *)(v15[v18 / 8] + 8))
        ++v14;
      if (!*(_BYTE *)(v15[v18 / 8 + 1] + 8))
        ++v19;
      v18 += 16;
    }
    while (((8 * v12) & 0x7FFFFFFF0) != v18);
    v14 += v19;
    v16 = v12 & 0xFFFFFFFE;
    if ((v12 & 0xFFFFFFFE) != v12)
      goto LABEL_26;
LABEL_16:
    v15 += (v12 - 1) + 9;
    ++v13;
  }
  while (v13 != v11);
  v10 = 100 * v14;
LABEL_34:
  if (v10 / ((int)v12 * v11) >= 61)
    *(_DWORD *)(a1 + 739064) = 1;
LABEL_36:
  *(_DWORD *)(a1 + 738620) = *a3;
  v24 = *(_QWORD *)(a1 + 738744);
  *(_QWORD *)(a1 + 738640) = v24;
  *(_QWORD *)(a1 + 738648) = v24;
  *(_QWORD *)(a1 + 738760) = 0;
  v25 = v4 << 9;
  v26 = 0.015625;
  v27 = *a3;
  v28 = *(_DWORD *)(a1 + 189856);
  if (v28 == 10)
    v26 = 0.0625;
  v29 = 0.25;
  if (v28 == 8)
  {
    v26 = 0.25;
    v30 = ac_qlookup_0;
    goto LABEL_44;
  }
  if (v28 == 12)
  {
    v30 = ac_qlookup_12;
LABEL_44:
    if (v27 >= 255)
      v27 = 255;
    LOWORD(v29) = v30[v27 & ~(v27 >> 31)];
    v29 = (double)vmovl_s16(*(int16x4_t *)&v29).i32[0];
  }
  else
  {
    v29 = -1.0;
    if (v28 == 10)
    {
      v30 = ac_qlookup_10;
      goto LABEL_44;
    }
  }
  v31 = v26
      * v29
      * (double)(int)(v25 / *(int *)(a1 + 173000))
      / (double)(((int)(v26 * v29 * 1800000.0) >> 12) + 1800000);
  if (v31 > v9)
  {
    v9 = v9 + v9;
    if (v9 >= v31)
      v9 = v31;
    if (v9 > 50.0)
      v9 = 50.0;
    *v3 = v9;
  }
  if (!*(_DWORD *)(a1 + 747508))
    return 1;
  v32 = *(int *)(a1 + 835324) <= 1 ? 1 : *(_DWORD *)(a1 + 835324);
  if (*(_DWORD *)(a1 + 835148))
  {
    v32 = *(_DWORD *)(a1 + 747520);
    if (v32 < 1)
      return 1;
  }
  v33 = *(_DWORD *)(a1 + 747524);
  v22 = 1;
  if (v33 >= 1)
  {
    v34 = 0;
    v35 = 6880 * v33;
    v36 = a1 + 752552;
    v37 = a1 + 751952;
    v38 = a1 + 752216;
    v39 = a1 + 752104;
    v40 = a1 + 752096;
    v41 = a1 + 752200;
    v42 = a1 + 752076;
    do
    {
      v43 = 0;
      do
      {
        *(_DWORD *)(v42 + v43) = *a3;
        v44 = *(_QWORD *)(v41 + v43);
        *(_QWORD *)(v40 + v43) = v44;
        *(_QWORD *)(v39 + v43) = v44;
        *(_QWORD *)(v38 + v43) = 0;
        *(double *)(v37 + v43) = v9;
        *(_DWORD *)(v36 + v43) = 1;
        v43 += 6880;
      }
      while (v35 != v43);
      ++v34;
      v36 += v35;
      v37 += v35;
      v38 += v35;
      v39 += v35;
      v40 += v35;
      v41 += v35;
      v42 += v35;
    }
    while (v34 != v32);
    return 1;
  }
  return v22;
}

uint64_t vp9_compute_rd_mult_based_on_qindex(uint64_t a1, int a2)
{
  _DWORD *v2;
  int v3;
  __int16 *v4;
  int v5;
  int v6;
  double *v8;
  int v9;
  double v10;
  int v11;
  int v12;

  v2 = (_DWORD *)(a1 + 850616);
  v3 = *(_DWORD *)(a1 + 189856);
  switch(v3)
  {
    case 8:
      v4 = (__int16 *)&dc_qlookup_0;
      goto LABEL_7;
    case 12:
      v4 = (__int16 *)&dc_qlookup_12;
LABEL_7:
      if (a2 >= 255)
        v5 = 255;
      else
        v5 = a2;
      v6 = v4[v5 & ~(v5 >> 31)];
      if (!*v2)
        goto LABEL_16;
      goto LABEL_13;
    case 10:
      v4 = (__int16 *)&dc_qlookup_10;
      goto LABEL_7;
  }
  v6 = -1;
  if (!*v2)
    goto LABEL_16;
LABEL_13:
  if ((*(_BYTE *)(a1 + 850632) & 4) != 0 && *(_DWORD *)(a1 + 850620) != -1)
    return *(unsigned int *)(a1 + 850620);
LABEL_16:
  v8 = (double *)(a1 + 198888);
  v9 = v6 * v6;
  if (*(_DWORD *)(a1 + 172972))
  {
    if (!*(_DWORD *)(a1 + 738588) && (*(_DWORD *)(a1 + 194560) || *(_DWORD *)(a1 + 194564)))
    {
      v10 = ((double)a2 * 0.001 + 4.25) * (double)v9;
      v8 = (double *)(a1 + 198896);
    }
    else
    {
      v10 = ((double)a2 * 0.001 + 4.15) * (double)v9;
    }
  }
  else
  {
    v10 = ((double)a2 * 0.001 + 4.35) * (double)v9;
    v8 = (double *)(a1 + 198904);
  }
  v11 = (int)(v10 * *v8);
  v12 = (v11 + 128) >> 8;
  if (v3 == 10)
    v11 = (v11 + 8) >> 4;
  if (v3 == 12)
    v11 = v12;
  if (v11 <= 1)
    return 1;
  else
    return v11;
}

uint64_t vp9_initialize_rd_consts(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  int *v3;
  signed int *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  double v25;
  __int16 *v26;
  long double v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t result;
  int v32;
  unsigned int v33;
  signed int v34;
  uint64_t i;
  signed int v36;
  int v37;
  signed int v38;
  signed int v39;
  int v40;
  int v41;
  signed int v42;
  signed int v43;
  int v44;
  int v45;
  signed int v46;
  uint64_t *v47;
  _DWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int16 *v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  __int16 *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  __int16 *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  __int16 *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int16 *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  __int16 *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  __int16 *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  __int16 *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int16 *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  __int16 *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  __int16 *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  __int16 *v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  __int16 *v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  __int16 *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int16 *v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  __int16 *v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  __int16 *v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  __int16 *v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  __int16 *v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  __int16 *v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int16 *v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  __int16 *v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  __int16 *v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  __int16 *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  __int16 *v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  __int16 *v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int16 *v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  __int16 *v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  __int16 *v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  __int16 *v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  __int16 *v197;
  uint64_t v198;
  unsigned __int8 *v199;
  uint64_t v200;
  int v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  _DWORD *v205;
  _DWORD *v206;
  uint64_t *v207;
  unsigned __int8 *v208;
  uint64_t v209;
  int v210;
  char v211;
  int v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  __int16 v217;
  char v218;
  uint64_t v219;
  uint64_t v220;

  v220 = *MEMORY[0x24BDAC8D0];
  v1 = a1 + 850616;
  v2 = (_DWORD *)(a1 + 841784);
  v3 = (int *)(a1 + 738480);
  v4 = (signed int *)(a1 + 199032);
  v5 = a1 + 74592;
  *(_DWORD *)(a1 + 211988) = 7;
  v208 = (unsigned __int8 *)(a1 + 176472);
  v209 = a1 + 172972;
  v6 = vp9_compute_rd_mult_based_on_qindex(a1, *(_DWORD *)(a1 + 173032) + *(_DWORD *)(a1 + 173028));
  if (!*(_DWORD *)v1 || (*(_BYTE *)(v1 + 16) & 4) == 0 || (v7 = *(_DWORD *)(v1 + 4), v7 == -1))
  {
    if (*((_DWORD *)v208 + 3401) == 2)
    {
      v7 = v6;
      if (*(_DWORD *)v209)
      {
        v8 = a1 + 4 * *(unsigned __int8 *)(a1 + 742180);
        v9 = *(unsigned int *)(v8 + 743192);
        v10 = (int *)(v8 + 745964);
        if (!v2[2162])
          v10 = v3;
        v11 = *v10;
        v12 = v11 <= 1599;
        v13 = v11 / 100;
        if (!v12)
          v13 = 15;
        v14 = rd_frame_type_factor[v9] * (uint64_t)v6;
        v7 = ((unint64_t)((v14 >> 7) * rd_boost_factor[v13]) >> 7) + (v14 >> 7);
      }
    }
    else
    {
      v7 = v6;
    }
  }
  v4[3238] = v7;
  if (v7 >= 0x40)
    v15 = v7 >> 6;
  else
    v15 = (v7 >> 6) + 1;
  *(_DWORD *)(v5 + 228) = v15;
  v206 = v2;
  if (v3[297] == 1)
  {
    v16 = (_DWORD *)v209;
    v17 = *(_DWORD *)v209 == 0;
  }
  else
  {
    v17 = 1;
    v16 = (_DWORD *)v209;
  }
  v18 = 0;
  v207 = (uint64_t *)v5;
  *(_DWORD *)(v5 + 196) = v17;
  v19 = a1 + 199056;
  v213 = *v208;
  v210 = *((_DWORD *)v208 + 3346);
  do
  {
    v20 = v16[14];
    v215 = v19;
    if (v213)
    {
      v16 = (_DWORD *)v209;
      if ((*(_DWORD *)(a1 + 4 * (int)v18 + 176552) & 1) != 0)
      {
        v16 = (_DWORD *)v209;
        if (v208[3] == 1)
          v20 = 0;
        v21 = v20 + *(__int16 *)(a1 + 8 * (int)v18 + 176488);
        if (v21 >= 255)
          v21 = 255;
        v20 = v21 & ~(v21 >> 31);
      }
    }
    v22 = v16[15] + v20;
    if (v22 >= 255)
      v22 = 255;
    v23 = v22 & ~(v22 >> 31);
    v24 = 0.0625;
    v25 = 0.015625;
    if (v210 == 8)
      v25 = 0.25;
    v26 = (__int16 *)&dc_qlookup_12;
    if (v210 == 8)
      v26 = dc_qlookup_0;
    if (v210 == 10)
      v26 = (__int16 *)&dc_qlookup_10;
    else
      v24 = v25;
    LOWORD(v25) = v26[v23];
    v27 = pow(v24 * (double)vmovl_s16(*(int16x4_t *)&v25).i32[0], 1.25);
    v28 = 0;
    v29 = (int)(v27 * 5.12);
    if (v29 <= 8)
      v29 = 8;
    v30 = v215;
    result = 199056;
    do
    {
      v33 = v29 * rd_thresh_block_size_factor[v28];
      v34 = 0x7FFFFFFF / v33;
      if (v28 < 3)
      {
        if (*v4 >= v34)
          v37 = 0x7FFFFFFF;
        else
          v37 = (int)(*v4 * v33) / 4;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199056) = v37;
        v38 = v4[1];
        v39 = v4[2];
        if (v38 < v34)
          v40 = (int)(v38 * v33) / 4;
        else
          v40 = 0x7FFFFFFF;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199060) = v40;
        v41 = (int)(v39 * v33) / 4;
        if (v39 >= v34)
          v41 = 0x7FFFFFFF;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199064) = v41;
        v42 = v4[3];
        v43 = v4[4];
        if (v42 < v34)
          v44 = (int)(v42 * v33) / 4;
        else
          v44 = 0x7FFFFFFF;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199068) = v44;
        v45 = (int)(v43 * v33) / 4;
        if (v43 >= v34)
          v45 = 0x7FFFFFFF;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199072) = v45;
        v46 = v4[5];
        if (v46 < v34)
          v32 = (int)(v46 * v33) / 4;
        else
          v32 = 0x7FFFFFFF;
        *(_DWORD *)(a1 + 1560 * v18 + 120 * v28 + 199076) = v32;
      }
      else
      {
        for (i = 0; i != 120; i += 4)
        {
          while (1)
          {
            v36 = *(_DWORD *)(a1 + 198912 + i);
            if (v36 >= v34)
              break;
            *(_DWORD *)(v30 + i) = (int)(v36 * v33) / 4;
            i += 4;
            if (i == 120)
              goto LABEL_41;
          }
          *(_DWORD *)(v30 + i) = 0x7FFFFFFF;
        }
      }
LABEL_41:
      ++v28;
      v30 += 120;
    }
    while (v28 != 13);
    ++v18;
    v19 = v215 + 1560;
    v16 = (_DWORD *)v209;
  }
  while (v18 != 8);
  if (*(_DWORD *)v209)
  {
    v47 = (uint64_t *)v5;
    if (*(_BYTE *)(v209 + 16))
    {
      *(_QWORD *)v5 = &vp9_kf_partition_probs;
      if (*((_DWORD *)v208 + 3401) == 1)
        return result;
    }
    else
    {
      v49 = *((_QWORD *)v208 + 16);
      *(_QWORD *)v5 = v49 + 126;
      if (*((_DWORD *)v208 + 3401) == 1)
      {
        v50 = *(_DWORD *)(v209 + 20);
        if (v50)
          v51 = 46;
        else
          v51 = 44;
        if (v50)
          v52 = v5 + 368;
        else
          v52 = v5 + 352;
        cost_0(a1 + 74924, (uint64_t)vp9_mv_joint_tree, v49 + 1970, 0, 0);
        build_nmv_component_cost_table((_DWORD *)v207[v51], (unsigned __int8 *)(v49 + 1973), v50);
        return build_nmv_component_cost_table(*(_DWORD **)(v52 + 8), (unsigned __int8 *)(v49 + 2006), v50);
      }
    }
    v48 = v3 + 363;
    if (v3[363])
    {
      if (v3[302] != 3)
        goto LABEL_189;
      goto LABEL_186;
    }
  }
  else
  {
    *(_QWORD *)v5 = &vp9_kf_partition_probs;
    if (*((_DWORD *)v208 + 3401) == 1)
      return result;
    v48 = v3 + 363;
  }
  v205 = v48;
  v53 = 0;
  v54 = a1 + 76112;
  v55 = *((_QWORD *)v208 + 16) + 174;
  v214 = v55;
  do
  {
    v56 = 0;
    v57 = 1;
    do
    {
      v58 = 0;
      v211 = v57;
      v59 = 1;
      do
      {
        v63 = v59;
        v64 = v55 + 432 * v53 + 216 * v56 + 108 * v58;
        v216 = v63;
        if (&v217 == (__int16 *)v64)
        {
          v66 = 0;
        }
        else
        {
          v65 = *(_BYTE *)(v64 + 2);
          v217 = *(_WORD *)v64;
          v218 = v65;
          v66 = v217;
        }
        v67 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v64 + 2) - 1];
        cost_0(v67, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        *(_DWORD *)(v67 + 332) = vp9_prob_cost[v66];
        cost_0(v67 + 288, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v55 = v214;
        v68 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 3);
        if (&v217 == v68)
        {
          v70 = 0;
        }
        else
        {
          v69 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 5);
          v217 = *v68;
          v218 = v69;
          v70 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 5) - 1];
        cost_0(v67 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v71 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v71 + 380) = vp9_prob_cost[v70];
        cost_0(v71 + 336, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v72 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 6);
        if (&v217 == v72)
        {
          v74 = 0;
        }
        else
        {
          v73 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 8);
          v217 = *v72;
          v218 = v73;
          v74 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 8) - 1];
        cost_0(v67 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v75 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v75 + 428) = vp9_prob_cost[v74];
        cost_0(v75 + 384, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v76 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 18);
        if (&v217 == v76)
        {
          v78 = 0;
        }
        else
        {
          v77 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 20);
          v217 = *v76;
          v218 = v77;
          v78 = v217;
        }
        v79 = v75 + 576;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 20) - 1];
        cost_0(v79, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v80 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v80 + 908) = vp9_prob_cost[v78];
        cost_0(v80 + 864, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v81 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 21);
        if (&v217 == v81)
        {
          v83 = 0;
        }
        else
        {
          v82 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 23);
          v217 = *v81;
          v218 = v82;
          v83 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 23) - 1];
        cost_0(v79 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v84 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v84 + 956) = vp9_prob_cost[v83];
        cost_0(v84 + 912, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v85 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 24);
        if (&v217 == v85)
        {
          v87 = 0;
        }
        else
        {
          v86 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 26);
          v217 = *v85;
          v218 = v86;
          v87 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 26) - 1];
        cost_0(v79 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v88 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v88 + 1004) = vp9_prob_cost[v87];
        cost_0(v88 + 960, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v89 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 27);
        if (&v217 == v89)
        {
          v91 = 0;
        }
        else
        {
          v90 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 29);
          v217 = *v89;
          v218 = v90;
          v91 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 29) - 1];
        cost_0(v79 + 144, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v92 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v92 + 1052) = vp9_prob_cost[v91];
        cost_0(v92 + 1008, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v93 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 30);
        if (&v217 == v93)
        {
          v95 = 0;
        }
        else
        {
          v94 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 32);
          v217 = *v93;
          v218 = v94;
          v95 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 32) - 1];
        cost_0(v79 + 192, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v96 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v96 + 1100) = vp9_prob_cost[v95];
        cost_0(v96 + 1056, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v97 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 33);
        if (&v217 == v97)
        {
          v99 = 0;
        }
        else
        {
          v98 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 35);
          v217 = *v97;
          v218 = v98;
          v99 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 35) - 1];
        cost_0(v79 + 240, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v100 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v100 + 1148) = vp9_prob_cost[v99];
        cost_0(v100 + 1104, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v101 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 36);
        if (&v217 == v101)
        {
          v103 = 0;
        }
        else
        {
          v102 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 38);
          v217 = *v101;
          v218 = v102;
          v103 = v217;
        }
        v104 = v100 + 1152;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 38) - 1];
        cost_0(v104, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v105 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v105 + 1484) = vp9_prob_cost[v103];
        cost_0(v105 + 1440, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v106 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 39);
        if (&v217 == v106)
        {
          v108 = 0;
        }
        else
        {
          v107 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 41);
          v217 = *v106;
          v218 = v107;
          v108 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 41) - 1];
        cost_0(v104 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v109 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v109 + 1532) = vp9_prob_cost[v108];
        cost_0(v109 + 1488, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v110 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 42);
        if (&v217 == v110)
        {
          v112 = 0;
        }
        else
        {
          v111 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 44);
          v217 = *v110;
          v218 = v111;
          v112 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 44) - 1];
        cost_0(v104 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v113 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v113 + 1580) = vp9_prob_cost[v112];
        cost_0(v113 + 1536, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v114 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 45);
        if (&v217 == v114)
        {
          v116 = 0;
        }
        else
        {
          v115 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 47);
          v217 = *v114;
          v218 = v115;
          v116 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 47) - 1];
        cost_0(v104 + 144, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v117 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v117 + 1628) = vp9_prob_cost[v116];
        cost_0(v117 + 1584, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v118 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 48);
        if (&v217 == v118)
        {
          v120 = 0;
        }
        else
        {
          v119 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 50);
          v217 = *v118;
          v218 = v119;
          v120 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 50) - 1];
        cost_0(v104 + 192, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v121 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v121 + 1676) = vp9_prob_cost[v120];
        cost_0(v121 + 1632, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v122 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 51);
        if (&v217 == v122)
        {
          v124 = 0;
        }
        else
        {
          v123 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 53);
          v217 = *v122;
          v218 = v123;
          v124 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 53) - 1];
        cost_0(v104 + 240, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v125 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v125 + 1724) = vp9_prob_cost[v124];
        cost_0(v125 + 1680, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v126 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 54);
        if (&v217 == v126)
        {
          v128 = 0;
        }
        else
        {
          v127 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 56);
          v217 = *v126;
          v218 = v127;
          v128 = v217;
        }
        v129 = v125 + 1728;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 56) - 1];
        cost_0(v129, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v130 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v130 + 2060) = vp9_prob_cost[v128];
        cost_0(v130 + 2016, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v131 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 57);
        if (&v217 == v131)
        {
          v133 = 0;
        }
        else
        {
          v132 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 59);
          v217 = *v131;
          v218 = v132;
          v133 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 59) - 1];
        cost_0(v129 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v134 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v134 + 2108) = vp9_prob_cost[v133];
        cost_0(v134 + 2064, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v135 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 60);
        if (&v217 == v135)
        {
          v137 = 0;
        }
        else
        {
          v136 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 62);
          v217 = *v135;
          v218 = v136;
          v137 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 62) - 1];
        cost_0(v129 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v138 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v138 + 2156) = vp9_prob_cost[v137];
        cost_0(v138 + 2112, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v139 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 63);
        if (&v217 == v139)
        {
          v141 = 0;
        }
        else
        {
          v140 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 65);
          v217 = *v139;
          v218 = v140;
          v141 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 65) - 1];
        cost_0(v129 + 144, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v142 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v142 + 2204) = vp9_prob_cost[v141];
        cost_0(v142 + 2160, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v143 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 66);
        if (&v217 == v143)
        {
          v145 = 0;
        }
        else
        {
          v144 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 68);
          v217 = *v143;
          v218 = v144;
          v145 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 68) - 1];
        cost_0(v129 + 192, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v146 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v146 + 2252) = vp9_prob_cost[v145];
        cost_0(v146 + 2208, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v147 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 69);
        if (&v217 == v147)
        {
          v149 = 0;
        }
        else
        {
          v148 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 71);
          v217 = *v147;
          v218 = v148;
          v149 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 71) - 1];
        cost_0(v129 + 240, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v150 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v150 + 2300) = vp9_prob_cost[v149];
        cost_0(v150 + 2256, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v151 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 72);
        if (&v217 == v151)
        {
          v153 = 0;
        }
        else
        {
          v152 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 74);
          v217 = *v151;
          v218 = v152;
          v153 = v217;
        }
        v154 = v150 + 2304;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 74) - 1];
        cost_0(v154, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v155 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v155 + 2636) = vp9_prob_cost[v153];
        cost_0(v155 + 2592, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v156 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 75);
        if (&v217 == v156)
        {
          v158 = 0;
        }
        else
        {
          v157 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 77);
          v217 = *v156;
          v218 = v157;
          v158 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 77) - 1];
        cost_0(v154 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v159 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v159 + 2684) = vp9_prob_cost[v158];
        cost_0(v159 + 2640, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v160 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 78);
        if (&v217 == v160)
        {
          v162 = 0;
        }
        else
        {
          v161 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 80);
          v217 = *v160;
          v218 = v161;
          v162 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 80) - 1];
        cost_0(v154 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v163 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v163 + 2732) = vp9_prob_cost[v162];
        cost_0(v163 + 2688, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v164 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 81);
        if (&v217 == v164)
        {
          v166 = 0;
        }
        else
        {
          v165 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 83);
          v217 = *v164;
          v218 = v165;
          v166 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 83) - 1];
        cost_0(v154 + 144, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v167 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v167 + 2780) = vp9_prob_cost[v166];
        cost_0(v167 + 2736, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v168 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 84);
        if (&v217 == v168)
        {
          v170 = 0;
        }
        else
        {
          v169 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 86);
          v217 = *v168;
          v218 = v169;
          v170 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 86) - 1];
        cost_0(v154 + 192, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v171 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v171 + 2828) = vp9_prob_cost[v170];
        cost_0(v171 + 2784, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v172 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 87);
        if (&v217 == v172)
        {
          v174 = 0;
        }
        else
        {
          v173 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 89);
          v217 = *v172;
          v218 = v173;
          v174 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 89) - 1];
        cost_0(v154 + 240, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v175 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v175 + 2876) = vp9_prob_cost[v174];
        cost_0(v175 + 2832, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v176 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 90);
        if (&v217 == v176)
        {
          v178 = 0;
        }
        else
        {
          v177 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 92);
          v217 = *v176;
          v218 = v177;
          v178 = v217;
        }
        v179 = v175 + 2880;
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 92) - 1];
        cost_0(v179, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v180 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v180 + 3212) = vp9_prob_cost[v178];
        cost_0(v180 + 3168, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v181 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 93);
        if (&v217 == v181)
        {
          v183 = 0;
        }
        else
        {
          v182 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 95);
          v217 = *v181;
          v218 = v182;
          v183 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 95) - 1];
        cost_0(v179 + 48, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v184 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v184 + 3260) = vp9_prob_cost[v183];
        cost_0(v184 + 3216, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v185 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 96);
        if (&v217 == v185)
        {
          v187 = 0;
        }
        else
        {
          v186 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 98);
          v217 = *v185;
          v218 = v186;
          v187 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 98) - 1];
        cost_0(v179 + 96, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v188 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v188 + 3308) = vp9_prob_cost[v187];
        cost_0(v188 + 3264, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v189 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 99);
        if (&v217 == v189)
        {
          v191 = 0;
        }
        else
        {
          v190 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 101);
          v217 = *v189;
          v218 = v190;
          v191 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 101) - 1];
        cost_0(v179 + 144, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v192 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v192 + 3356) = vp9_prob_cost[v191];
        cost_0(v192 + 3312, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v193 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 102);
        if (&v217 == v193)
        {
          v195 = 0;
        }
        else
        {
          v194 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 104);
          v217 = *v193;
          v218 = v194;
          v195 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 104) - 1];
        cost_0(v179 + 192, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v196 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v196 + 3404) = vp9_prob_cost[v195];
        cost_0(v196 + 3360, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v197 = (__int16 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 105);
        if (&v217 == v197)
        {
          v61 = 0;
        }
        else
        {
          v60 = *(_BYTE *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 107);
          v217 = *v197;
          v218 = v60;
          v61 = v217;
        }
        v219 = vp9_pareto8_full[*(unsigned __int8 *)(v214 + 432 * v53 + 216 * v56 + 108 * v58 + 107) - 1];
        cost_0(v179 + 240, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 0, 0);
        v62 = v54 + 13824 * v53 + 6912 * v56 + 3456 * v58;
        *(_DWORD *)(v62 + 3452) = vp9_prob_cost[v61];
        result = cost_0(v62 + 3408, (uint64_t)&vp9_coef_tree, (uint64_t)&v217, 2u, 0);
        v59 = 0;
        v58 = 1;
      }
      while ((v216 & 1) != 0);
      v57 = 0;
      v56 = 1;
    }
    while ((v211 & 1) != 0);
    ++v53;
  }
  while (v53 != 4);
  v47 = v207;
  v16 = (_DWORD *)v209;
  v48 = v205;
  if (v3[302] != 3)
  {
LABEL_189:
    cost_0(a1 + 841528, (uint64_t)vp9_partition_tree, *v47, 0, 0);
    cost_0(a1 + 841544, (uint64_t)vp9_partition_tree, *v47 + 3, 0, 0);
    cost_0(a1 + 841560, (uint64_t)vp9_partition_tree, *v47 + 6, 0, 0);
    cost_0(a1 + 841576, (uint64_t)vp9_partition_tree, *v47 + 9, 0, 0);
    cost_0(a1 + 841592, (uint64_t)vp9_partition_tree, *v47 + 12, 0, 0);
    cost_0(a1 + 841608, (uint64_t)vp9_partition_tree, *v47 + 15, 0, 0);
    cost_0(a1 + 841624, (uint64_t)vp9_partition_tree, *v47 + 18, 0, 0);
    cost_0(a1 + 841640, (uint64_t)vp9_partition_tree, *v47 + 21, 0, 0);
    cost_0(a1 + 841656, (uint64_t)vp9_partition_tree, *v47 + 24, 0, 0);
    cost_0(a1 + 841672, (uint64_t)vp9_partition_tree, *v47 + 27, 0, 0);
    cost_0(a1 + 841688, (uint64_t)vp9_partition_tree, *v47 + 30, 0, 0);
    cost_0(a1 + 841704, (uint64_t)vp9_partition_tree, *v47 + 33, 0, 0);
    cost_0(a1 + 841720, (uint64_t)vp9_partition_tree, *v47 + 36, 0, 0);
    cost_0(a1 + 841736, (uint64_t)vp9_partition_tree, *v47 + 39, 0, 0);
    cost_0(a1 + 841752, (uint64_t)vp9_partition_tree, *v47 + 42, 0, 0);
    result = cost_0(a1 + 841768, (uint64_t)vp9_partition_tree, *v47 + 45, 0, 0);
    v16 = (_DWORD *)v209;
    if (*v48)
      goto LABEL_190;
    goto LABEL_192;
  }
LABEL_186:
  if (!*v16)
    goto LABEL_189;
  if (*v48)
  {
LABEL_190:
    if ((*((_DWORD *)v208 + 3343) & 7) != 1 && *v16)
      return result;
  }
LABEL_192:
  v198 = 0;
  v199 = (unsigned __int8 *)*((_QWORD *)v208 + 16);
  v200 = a1 + 837840;
  do
  {
    cost_0(v200 - 360, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198, 0, 0);
    cost_0(v200 - 320, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 9, 0, 0);
    cost_0(v200 - 280, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 18, 0, 0);
    cost_0(v200 - 240, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 27, 0, 0);
    cost_0(v200 - 200, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 36, 0, 0);
    cost_0(v200 - 160, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 45, 0, 0);
    cost_0(v200 - 120, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 54, 0, 0);
    cost_0(v200 - 80, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 63, 0, 0);
    cost_0(v200 - 40, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 72, 0, 0);
    cost_0(v200, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_y_mode_prob + v198 + 81, 0, 0);
    v198 += 90;
    v200 += 400;
  }
  while (v198 != 900);
  cost_0(a1 + 836528, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 9), 0, 0);
  cost_0(a1 + 836680, (uint64_t)vp9_intra_mode_tree, (uint64_t)&vp9_kf_uv_mode_prob, 0, 0);
  cost_0(a1 + 837080, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 36), 0, 0);
  cost_0(a1 + 836720, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D61, 0, 0);
  cost_0(a1 + 837120, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 45), 0, 0);
  cost_0(a1 + 836760, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D6A, 0, 0);
  cost_0(a1 + 837160, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 54), 0, 0);
  cost_0(a1 + 836800, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D73, 0, 0);
  cost_0(a1 + 837200, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 63), 0, 0);
  cost_0(a1 + 836840, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D7C, 0, 0);
  cost_0(a1 + 837240, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 72), 0, 0);
  cost_0(a1 + 836880, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D85, 0, 0);
  cost_0(a1 + 837280, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 81), 0, 0);
  cost_0(a1 + 836920, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D8E, 0, 0);
  cost_0(a1 + 837320, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 90), 0, 0);
  cost_0(a1 + 836960, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48D97, 0, 0);
  cost_0(a1 + 837360, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 99), 0, 0);
  cost_0(a1 + 837000, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48DA0, 0, 0);
  cost_0(a1 + 837400, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 108), 0, 0);
  cost_0(a1 + 837040, (uint64_t)vp9_intra_mode_tree, (uint64_t)&unk_208F48DA9, 0, 0);
  cost_0(a1 + 837440, (uint64_t)vp9_intra_mode_tree, (uint64_t)(v199 + 117), 0, 0);
  cost_0(a1 + 841480, (uint64_t)vp9_switchable_interp_tree, (uint64_t)(v199 + 1902), 0, 0);
  cost_0(a1 + 841492, (uint64_t)vp9_switchable_interp_tree, (uint64_t)(v199 + 1904), 0, 0);
  cost_0(a1 + 841504, (uint64_t)vp9_switchable_interp_tree, (uint64_t)(v199 + 1906), 0, 0);
  result = cost_0(a1 + 841516, (uint64_t)vp9_switchable_interp_tree, (uint64_t)(v199 + 1908), 0, 0);
  *v206 = vp9_prob_cost[v199[1965]];
  v206[1] = vp9_prob_cost[256 - v199[1965]];
  v206[4] = vp9_prob_cost[v199[1966]];
  v206[5] = vp9_prob_cost[256 - v199[1966]];
  v206[8] = vp9_prob_cost[v199[1961]];
  v206[9] = vp9_prob_cost[v199[1962]] + vp9_prob_cost[256 - v199[1961]];
  v206[10] = vp9_prob_cost[256 - v199[1962]] + vp9_prob_cost[256 - v199[1961]];
  v206[12] = vp9_prob_cost[v199[1963]];
  v206[13] = vp9_prob_cost[v199[1964]] + vp9_prob_cost[256 - v199[1963]];
  v206[14] = vp9_prob_cost[256 - v199[1964]] + vp9_prob_cost[256 - v199[1963]];
  v206[16] = vp9_prob_cost[v199[1955]];
  v206[17] = vp9_prob_cost[v199[1956]] + vp9_prob_cost[256 - v199[1955]];
  v206[18] = vp9_prob_cost[256 - v199[1956]] + vp9_prob_cost[256 - v199[1955]] + vp9_prob_cost[v199[1957]];
  v206[19] = vp9_prob_cost[256 - v199[1956]] + vp9_prob_cost[256 - v199[1955]] + vp9_prob_cost[256 - v199[1957]];
  v206[20] = vp9_prob_cost[v199[1958]];
  v206[21] = vp9_prob_cost[v199[1959]] + vp9_prob_cost[256 - v199[1958]];
  v206[22] = vp9_prob_cost[256 - v199[1959]] + vp9_prob_cost[256 - v199[1958]] + vp9_prob_cost[v199[1960]];
  v206[23] = vp9_prob_cost[256 - v199[1959]] + vp9_prob_cost[256 - v199[1958]] + vp9_prob_cost[256 - v199[1960]];
  if (*(_DWORD *)v209 && !*(_BYTE *)(v209 + 16))
  {
    v201 = *(_DWORD *)(v209 + 20);
    if (v201)
      v202 = 46;
    else
      v202 = 44;
    if (v201)
      v203 = v47 + 46;
    else
      v203 = v47 + 44;
    v204 = *((_QWORD *)v208 + 16);
    cost_0(a1 + 74924, (uint64_t)vp9_mv_joint_tree, v204 + 1970, 0, 0);
    build_nmv_component_cost_table((_DWORD *)v47[v202], (unsigned __int8 *)(v204 + 1973), v201);
    build_nmv_component_cost_table((_DWORD *)v203[1], (unsigned __int8 *)(v204 + 2006), v201);
    cost_0(a1 + 836568, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1910, 0, 0);
    cost_0(a1 + 836584, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1913, 0, 0);
    cost_0(a1 + 836600, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1916, 0, 0);
    cost_0(a1 + 836616, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1919, 0, 0);
    cost_0(a1 + 836632, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1922, 0, 0);
    cost_0(a1 + 836648, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1925, 0, 0);
    return cost_0(a1 + 836664, (uint64_t)vp9_inter_mode_tree, *((_QWORD *)v208 + 16) + 1928, 0, 0);
  }
  return result;
}

uint64_t vp9_get_entropy_contexts(uint64_t result, int a2, uint64_t a3, char *__dst, char *a5)
{
  uint64_t v8;
  size_t v9;
  size_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int64x2_t *v23;
  uint64_t v24;
  int8x8_t v25;
  int8x8_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  int64x2_t *v31;
  uint64_t v32;
  int8x8_t v33;
  int8x8_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  int32x4_t *v38;
  int32x4_t v39;
  int8x8_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  int32x4_t *v46;
  int32x4_t v47;
  int8x8_t v48;
  unint64_t v49;
  char *v50;
  int16x8_t *v51;
  uint64_t v52;
  int16x8_t v53;
  int8x8_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  int16x8_t *v59;
  uint64_t v60;
  int16x8_t v61;
  int8x8_t v62;

  v8 = ss_size_lookup[4 * result + 2 * *(int *)(a3 + 8) + *(int *)(a3 + 12)];
  v9 = num_4x4_blocks_wide_lookup[v8];
  v10 = num_4x4_blocks_high_lookup[v8];
  v11 = *(int64x2_t **)(a3 + 64);
  v12 = *(int64x2_t **)(a3 + 72);
  switch(a2)
  {
    case 0:
      memcpy(__dst, v11, v9);
      return (uint64_t)memcpy(a5, v12, v10);
    case 1:
      v16 = 2;
      if (v9 > 2)
        v16 = num_4x4_blocks_wide_lookup[v8];
      if (v16 >= 0xF && (unint64_t)(__dst - (char *)v11) >= 0x10)
      {
        v49 = ((v16 - 1) >> 1) + 1;
        v18 = 2 * (v49 & 0x7FFFFFFFFFFFFFF8);
        v50 = __dst + 8;
        v51 = (int16x8_t *)v11;
        v52 = v49 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v53 = *v51++;
          v54 = vand_s8(vmovn_s16(vtstq_s16(v53, v53)), (int8x8_t)0x101010101010101);
          *(v50 - 8) = v54.i8[0];
          *(v50 - 6) = v54.i8[1];
          *(v50 - 4) = v54.i8[2];
          *(v50 - 2) = v54.i8[3];
          *v50 = v54.i8[4];
          v50[2] = v54.i8[5];
          v50[4] = v54.i8[6];
          v50[6] = v54.i8[7];
          v50 += 16;
          v52 -= 8;
        }
        while (v52);
        if (v49 == (v49 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_53;
      }
      else
      {
        v18 = 0;
      }
      do
      {
        __dst[v18] = v11->i16[v18 / 2] != 0;
        v18 += 2;
      }
      while (v18 < v9);
LABEL_53:
      v55 = 0;
      v56 = 2;
      if (v10 > 2)
        v56 = v10;
      if (v56 < 0xF)
        goto LABEL_63;
      if ((unint64_t)(a5 - (char *)v12) < 0x10)
        goto LABEL_63;
      v57 = ((v56 - 1) >> 1) + 1;
      v55 = 2 * (v57 & 0x7FFFFFFFFFFFFFF8);
      v58 = a5 + 8;
      v59 = (int16x8_t *)v12;
      v60 = v57 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v61 = *v59++;
        v62 = vand_s8(vmovn_s16(vtstq_s16(v61, v61)), (int8x8_t)0x101010101010101);
        *(v58 - 8) = v62.i8[0];
        *(v58 - 6) = v62.i8[1];
        *(v58 - 4) = v62.i8[2];
        *(v58 - 2) = v62.i8[3];
        *v58 = v62.i8[4];
        v58[2] = v62.i8[5];
        v58[4] = v62.i8[6];
        v58[6] = v62.i8[7];
        v58 += 16;
        v60 -= 8;
      }
      while (v60);
      if (v57 != (v57 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_63:
        do
        {
          a5[v55] = v12->i16[v55 / 2] != 0;
          v55 += 2;
        }
        while (v55 < v10);
      }
      return result;
    case 2:
      v13 = 4;
      if (v9 > 4)
        v13 = num_4x4_blocks_wide_lookup[v8];
      if (v13 >= 0xD && (unint64_t)(__dst - (char *)v11) >= 0x10)
      {
        v35 = ((v13 - 1) >> 2) + 1;
        v15 = 4 * (v35 & 0x7FFFFFFFFFFFFFFCLL);
        v36 = __dst + 8;
        v37 = v35 & 0x7FFFFFFFFFFFFFFCLL;
        v38 = (int32x4_t *)v11;
        do
        {
          v39 = *v38++;
          v40 = vand_s8((int8x8_t)vmovn_s32(vtstq_s32(v39, v39)), (int8x8_t)0x1000100010001);
          *(v36 - 8) = v40.i8[0];
          *(v36 - 4) = v40.i8[2];
          *v36 = v40.i8[4];
          v36[4] = v40.i8[6];
          v36 += 16;
          v37 -= 4;
        }
        while (v37);
        if (v35 == (v35 & 0x7FFFFFFFFFFFFFFCLL))
          goto LABEL_40;
      }
      else
      {
        v15 = 0;
      }
      do
      {
        __dst[v15] = v11->i32[v15 / 4] != 0;
        v15 += 4;
      }
      while (v15 < v9);
LABEL_40:
      v41 = 0;
      v42 = 4;
      if (v10 > 4)
        v42 = v10;
      if (v42 < 0xD)
        goto LABEL_64;
      if ((unint64_t)(a5 - (char *)v12) < 0x10)
        goto LABEL_64;
      v43 = ((v42 - 1) >> 2) + 1;
      v41 = 4 * (v43 & 0x7FFFFFFFFFFFFFFCLL);
      v44 = a5 + 8;
      v45 = v43 & 0x7FFFFFFFFFFFFFFCLL;
      v46 = (int32x4_t *)v12;
      do
      {
        v47 = *v46++;
        v48 = vand_s8((int8x8_t)vmovn_s32(vtstq_s32(v47, v47)), (int8x8_t)0x1000100010001);
        *(v44 - 8) = v48.i8[0];
        *(v44 - 4) = v48.i8[2];
        *v44 = v48.i8[4];
        v44[4] = v48.i8[6];
        v44 += 16;
        v45 -= 4;
      }
      while (v45);
      if (v43 != (v43 & 0x7FFFFFFFFFFFFFFCLL))
      {
LABEL_64:
        do
        {
          a5[v41] = v12->i32[v41 / 4] != 0;
          v41 += 4;
        }
        while (v41 < v10);
      }
      return result;
  }
  v19 = 0;
  v20 = 8;
  if (v9 > 8)
    v20 = num_4x4_blocks_wide_lookup[v8];
  if (v20 < 0x19)
    goto LABEL_65;
  if ((unint64_t)(__dst - (char *)v11) < 0x20)
    goto LABEL_65;
  v21 = ((v20 - 1) >> 3) + 1;
  v19 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
  v22 = __dst + 16;
  v23 = v11 + 1;
  v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v25 = vand_s8((int8x8_t)vmovn_s64(vtstq_s64(v23[-1], v23[-1])), (int8x8_t)0x100000001);
    v26 = vand_s8((int8x8_t)vmovn_s64(vtstq_s64(*v23, *v23)), (int8x8_t)0x100000001);
    *(v22 - 16) = v25.i8[0];
    *(v22 - 8) = v25.i8[4];
    *v22 = v26.i8[0];
    v22[8] = v26.i8[4];
    v22 += 32;
    v23 += 2;
    v24 -= 4;
  }
  while (v24);
  if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_65:
    do
    {
      __dst[v19] = v11->i64[v19 / 8] != 0;
      v19 += 8;
    }
    while (v19 < v9);
  }
  v27 = 0;
  v28 = 8;
  if (v10 > 8)
    v28 = v10;
  if (v28 < 0x19)
    goto LABEL_66;
  if ((unint64_t)(a5 - (char *)v12) < 0x20)
    goto LABEL_66;
  v29 = ((v28 - 1) >> 3) + 1;
  v27 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
  v30 = a5 + 16;
  v31 = v12 + 1;
  v32 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v33 = vand_s8((int8x8_t)vmovn_s64(vtstq_s64(v31[-1], v31[-1])), (int8x8_t)0x100000001);
    v34 = vand_s8((int8x8_t)vmovn_s64(vtstq_s64(*v31, *v31)), (int8x8_t)0x100000001);
    *(v30 - 16) = v33.i8[0];
    *(v30 - 8) = v33.i8[4];
    *v30 = v34.i8[0];
    v30[8] = v34.i8[4];
    v30 += 32;
    v31 += 2;
    v32 -= 4;
  }
  while (v32);
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
  {
LABEL_66:
    do
    {
      a5[v27] = v12->i64[v27 / 8] != 0;
      v27 += 8;
    }
    while (v27 < v10);
  }
  return result;
}

uint64_t vp9_mv_pred(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int32x2_t v11;
  int v12;
  uint64_t (**v13)(uint64_t, _QWORD, uint64_t);
  uint64_t result;
  signed int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  _BOOL4 v43;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  int32x2_t v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned int v53;
  signed int v54;

  LODWORD(v7) = a5;
  v9 = *(_QWORD *)(a2 + 8216);
  v10 = *(unsigned __int8 *)(a2 + 25653);
  v11 = *(int32x2_t *)(*(_QWORD *)(a2 + 25568) + 8 * a5);
  v12 = *(_DWORD *)(a2 + 4 * a5 + 82336);
  v13 = (uint64_t (**)(uint64_t, _QWORD, uint64_t))(a1 + ((unint64_t)a6 << 6) + 740464);
  if (v11.u16[0] == 0x7FFF || v11.u16[1] == 0x7FFF)
  {
    result = 0;
    v15 = 0;
    v16 = 0x7FFFFFFF;
    if (v11.u16[2] == 0x7FFF)
      goto LABEL_19;
  }
  else
  {
    v17 = v11.i16[0];
    v18 = v11.i16[1];
    v19 = v17 + ((v17 & 0x8000) == 0) + 3;
    v20 = v18 + ((v18 & 0x8000) == 0) + 3;
    if (v11.i16[0] < 0)
      v17 = -v11.i16[0];
    v17 = (unsigned __int16)v17;
    if (v11.i16[1] < 0)
      v18 = -v11.i16[1];
    if ((unsigned __int16)v17 <= (unsigned __int16)v18)
      v17 = (unsigned __int16)v18;
    v21 = v17 >> 3;
    v23 = v19 < 8 && v20 < 8;
    v51 = v23;
    v53 = v21;
    v24 = a3;
    v25 = a4;
    v26 = *(_QWORD *)(a2 + 8216);
    v50 = *(int32x2_t *)(*(_QWORD *)(a2 + 25568) + 8 * a5);
    v27 = (*v13)(v9, *(unsigned int *)(a2 + 8224), a3 + (v19 >> 3) * a4 + (v20 >> 3));
    v11 = v50;
    a4 = v25;
    a3 = v24;
    v9 = v26;
    v16 = v27;
    result = v51;
    v15 = v53;
    if (v50.u16[2] == 0x7FFF)
    {
LABEL_19:
      v28 = 0;
      v7 = (int)v7;
      if (v10 <= a6)
        goto LABEL_76;
      goto LABEL_20;
    }
  }
  if ((v11.u16[3] == 0x7FFF) | vceq_s32(v11, vdup_lane_s32(v11, 1)).u32[0] & 1)
    goto LABEL_19;
  v35 = v11.i16[2];
  v36 = v11.i16[3];
  v37 = v35 + ((v35 & 0x8000) == 0) + 3;
  v38 = v36 + ((v36 & 0x8000) == 0) + 3;
  if (v11.i16[2] >= 0)
    v39 = v11.i16[2];
  else
    v39 = -v11.i16[2];
  if (v11.i16[3] >= 0)
    v40 = v11.i16[3];
  else
    v40 = -v11.i16[3];
  if (v39 <= v40)
    v39 = v40;
  if (v11.i16[2] < 0)
    v35 = -v11.i16[2];
  v35 = (unsigned __int16)v35;
  if (v11.i16[3] < 0)
    v36 = -v11.i16[3];
  if ((unsigned __int16)v35 <= (unsigned __int16)v36)
    v35 = (unsigned __int16)v36;
  v41 = v35 >> 3;
  if (v15 <= (int)(v39 >> 3))
    v15 = v41;
  v43 = v37 < 8 && v38 < 8;
  if (v43 && (_DWORD)result != 0)
  {
    v28 = 0;
    result = 1;
    v7 = (int)v7;
    if (v10 <= a6)
      goto LABEL_76;
    goto LABEL_20;
  }
  v52 = result | v43;
  v54 = v15;
  v45 = a3;
  v46 = a4;
  v47 = v9;
  v48 = (*v13)(v9, *(unsigned int *)(a2 + 8224), a3 + (v38 >> 3) + (v37 >> 3) * a4);
  a4 = v46;
  a3 = v45;
  v9 = v47;
  v28 = v48 < v16;
  if (v48 < v16)
    v16 = v48;
  result = v52;
  v15 = v54;
  v7 = (int)v7;
  if (v10 > a6)
  {
LABEL_20:
    if ((unsigned __int16)v12 != 0x7FFF && HIWORD(v12) != 0x7FFF)
    {
      LOWORD(v29) = v12;
      v30 = v12 >> 16;
      v31 = (__int16)v12 + ((v12 & 0x8000) == 0) + 3;
      if ((v12 & 0x8000u) == 0)
        v32 = (__int16)v12;
      else
        v32 = -(__int16)v12;
      if (v30 >= 0)
        v33 = v12 >> 16;
      else
        v33 = -v30;
      if (v32 <= v33)
        v32 = v33;
      if (v15 <= (int)(v32 >> 3))
      {
        if ((v12 & 0x8000u) != 0)
          v29 = -(__int16)v12;
        if (v30 < 0)
          v30 = -v30;
        v30 = (unsigned __int16)v30;
        if ((unsigned __int16)v29 > (unsigned __int16)v30)
          v30 = (unsigned __int16)v29;
        v15 = v30 >> 3;
      }
      v34 = (v12 >> 16) + (v12 >= 0) + 3;
      if (v31 > 7 || v34 > 7 || !(_DWORD)result)
      {
        result = (*v13)(v9, *(unsigned int *)(a2 + 8224), a3 + (v34 >> 3) + (v31 >> 3) * a4);
        if ((int)result < v16)
        {
          v28 = 2;
          v16 = result;
        }
      }
    }
  }
LABEL_76:
  v49 = (_DWORD *)(a2 + 4 * v7);
  v49[6414] = v28;
  v49[6418] = v15;
  v49[6427] = v16;
  return result;
}

uint64_t vp9_setup_pred_block(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  v9 = (_DWORD *)result;
  v10 = *(_QWORD *)(a3 + 56);
  v11 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)a2 = v10;
  v12 = *(_DWORD *)(a3 + 16);
  v13 = v12;
  *(_DWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 72);
  v14 = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a2 + 40) = v14;
  v15 = 8 * a5;
  v16 = ((8 * a5) >> *(_DWORD *)(result + 8));
  v28 = 8 * a4;
  v17 = ((8 * a4) >> *(_DWORD *)(result + 12));
  *(_DWORD *)(a2 + 24) = v14;
  if (a6)
  {
    v19 = 8 * a5;
    LODWORD(v16) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(v16, a6);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(v17, a6);
    v13 = v12;
    v15 = v19;
    LODWORD(v17) = result;
    v11 = *(_QWORD *)(a2 + 16);
    v14 = *(_DWORD *)(a2 + 24);
  }
  *(_QWORD *)a2 = v10 + (int)v16 + v13 * (uint64_t)(int)v17;
  *(_DWORD *)(a2 + 8) = v12;
  v20 = (v15 >> v9[36]);
  v21 = (v28 >> v9[37]);
  if (a7)
  {
    v22 = v15;
    LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(v20, a7);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(v21, a7);
    v15 = v22;
    LODWORD(v21) = result;
  }
  *(_QWORD *)(a2 + 16) = v11 + (int)v20 + (int)v21 * (uint64_t)v14;
  *(_DWORD *)(a2 + 24) = v14;
  v23 = *(_QWORD *)(a2 + 32);
  v24 = *(_DWORD *)(a2 + 40);
  v25 = v9[71];
  v26 = (v15 >> v9[70]);
  v27 = (v28 >> v25);
  if (a7)
  {
    LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(v26, a7);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(v27, a7);
    LODWORD(v27) = result;
  }
  *(_QWORD *)(a2 + 32) = v23 + (int)v26 + v24 * (uint64_t)(int)v27;
  *(_DWORD *)(a2 + 40) = v24;
  return result;
}

uint64_t vp9_get_switchable_rate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 456);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 7);
    v4 = *(_QWORD *)(a2 + 464);
    if (v4)
    {
LABEL_3:
      v5 = *(unsigned __int8 *)(v4 + 7);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 3;
    v4 = *(_QWORD *)(a2 + 464);
    if (v4)
      goto LABEL_3;
  }
  v5 = 3;
LABEL_6:
  if (v5 == 3)
    v6 = v3;
  else
    v6 = 3;
  if (v3 == 3)
    v6 = v5;
  if (v3 != v5)
    v3 = v6;
  return *(unsigned int *)(a1 + 12 * v3 + 4 * *(unsigned __int8 *)(**(_QWORD **)(a2 + 448) + 7) + 841480);
}

int64x2_t vp9_rd_pick_intra_mode_sb(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5, uint64_t a6, int64x2_t result)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  char *v27;
  char *v28;
  int v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  size_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int16x4_t *v50;
  int16x4_t *v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int16x4_t *v63;
  int16x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t *v71;
  int16x4_t *v72;
  uint64_t *v73;
  int16x4_t *v74;
  int16x4_t *v75;
  int16x8_t v76;
  int16x8_t v77;
  uint64_t v78;
  int32x4_t *v79;
  int16x8_t *v80;
  int32x4_t *v81;
  unsigned int v82;
  __int16 *v83;
  int16x8_t *v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  int v88;
  int *v89;
  int v90;
  int16x4_t *v91;
  int32x4_t *v92;
  unsigned __int8 *v93;
  unsigned int v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  int16x8_t *v98;
  unsigned int v99;
  unsigned int v100;
  int32x4_t *v101;
  uint64_t *v102;
  uint64_t v103;
  int v104;
  int32x4_t *v105;
  int v106;
  uint64_t v107;
  int32x4_t v108;
  uint32x4_t v109;
  uint32x4_t v110;
  uint64x2_t v111;
  int64x2_t v112;
  int32x4_t v113;
  int32x4_t v114;
  uint32x4_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  BOOL v123;
  int16x8_t *v124;
  int v125;
  uint64_t *v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int8x16_t v130;
  uint64_t v131;
  uint64_t *v132;
  int16x4_t *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint8x8_t *v150;
  uint8x8_t *v151;
  int v152;
  uint16x8_t *v153;
  uint64_t v154;
  int16x8_t *v155;
  uint64_t v156;
  unsigned __int16 *v157;
  uint64_t v158;
  int v159;
  int16x4_t v160;
  uint64_t v161;
  int v162;
  unsigned int v163;
  int v164;
  uint64_t v165;
  BOOL v166;
  int v167;
  int *v168;
  unsigned __int8 *v169;
  unsigned int v170;
  unsigned __int8 *v171;
  unsigned int v172;
  unsigned __int8 *v173;
  int v174;
  uint64_t *v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  BOOL v180;
  int v181;
  uint64_t v182;
  int16x8_t *v183;
  uint64_t v184;
  __int32 *v185;
  uint8x8_t v186;
  uint8x8_t v187;
  __int32 *v188;
  uint64_t v189;
  uint64_t *v190;
  char *v191;
  uint64_t v192;
  char v193;
  char *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  int v199;
  unsigned __int8 *v200;
  size_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  unsigned __int8 *v205;
  size_t v206;
  unsigned __int8 *v207;
  char *v208;
  uint64_t *v209;
  uint64_t v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  size_t v214;
  unsigned int v215;
  unsigned __int8 **v216;
  uint64_t v217;
  unsigned __int8 *v218;
  unsigned int v219;
  int v220;
  unsigned __int8 **v221;
  unsigned __int8 *v222;
  _UNKNOWN **v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int v228;
  int v229;
  int v230;
  int v231;
  unsigned int v232;
  int v233;
  int v234;
  int i;
  uint64_t v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  _BOOL8 v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  unsigned __int8 **v258;
  unsigned __int8 *v259;
  unsigned int v260;
  _UNKNOWN **v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  int v280;
  int *v281;
  uint64_t v282;
  int v283;
  int64x2_t *v284;
  int64_t v285;
  uint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  int64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  unsigned __int8 *v305;
  unsigned int v306;
  int v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  int v313;
  int v314;
  int v315;
  int v316;
  unsigned int v317;
  int v318;
  int v319;
  int j;
  int v321;
  int v322;
  unsigned int v323;
  int v324;
  int v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  uint64_t v341;
  __int128 v342;
  int v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unsigned __int8 *v348;
  unsigned __int8 *v349;
  uint64_t v351;
  unsigned __int8 *v353;
  unint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  unint64_t v357;
  int v358;
  int v359;
  unsigned __int8 *v360;
  uint64_t v361;
  unint64_t v362;
  unsigned __int8 *v363;
  unint64_t v364;
  unint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  int v370;
  unsigned int v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  void *v375;
  char *__dst;
  int v377;
  int v378;
  int v379;
  int v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  unsigned __int8 *v384;
  int v386;
  unsigned int *v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  char *v400;
  int16x4_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  int v410;
  int v411;
  uint64_t v412;
  unsigned __int8 *v413;
  uint64_t v415;
  uint64_t v416;
  int16x4_t *v417;
  char *v418;
  int16x4_t *v419;
  int v420;
  uint64_t v421;
  int v422;
  int v423;
  int v424;
  int v425;
  char v426;
  uint64_t v427;
  size_t v428;
  int v429;
  uint64_t v430;
  int v431;
  uint64_t *v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  int32x4_t *v436;
  char *v437;
  uint64_t v438;
  int v439;
  uint64_t v440;
  int v441;
  int v442;
  size_t v443;
  uint64_t v444;
  int v445;
  unsigned __int8 v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  uint64_t v451;
  uint64_t v452;
  int v453;
  int v454;
  int v455;
  int v456;
  uint64_t v457;
  int v458;
  unsigned __int8 *v459;
  int v460;
  uint64_t v461;
  char *v462;
  unsigned __int8 v463;
  int v464;
  unsigned __int16 *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  unsigned __int8 *v470;
  uint64_t v471;
  char v472;
  uint64_t v473;
  unsigned __int16 *v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  char v478;
  int v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  int v483;
  uint64_t v484;
  int v485;
  _DWORD *v486;
  _BOOL8 v487;
  uint64_t v488;
  uint64_t v489;
  unsigned __int8 *v490;
  char *v491;
  void *v492;
  size_t __n;
  size_t __na;
  _UNKNOWN **__nb;
  uint64_t v496;
  uint64_t v497;
  int v498[2];
  int v499;
  uint64_t v500;
  int32x4_t *v501;
  unsigned __int8 *v502;
  void *v503;
  int32x4_t *v504;
  void *v505;
  int *v506;
  uint64_t v507;
  int v508;
  unsigned int v509;
  uint64_t v510;
  _DWORD *v511;
  int v512[2];
  int16x4_t *v513;
  int v514[2];
  int v515[2];
  uint64_t v516;
  uint64_t v518;
  unsigned int v519;
  uint64_t v520;
  _QWORD *v521;
  int v522[2];
  _BYTE v523[2];
  _OWORD v524[4];
  _BYTE __src[80];
  uint64_t v526;
  uint64_t v527;
  __int128 v528;
  __int128 v529;
  __int128 v530;
  __int128 v531;
  __int128 v532;
  __int128 v533;
  uint64_t v534;
  uint64_t v535;

  v7 = a2;
  v8 = a1;
  v535 = *MEMORY[0x24BDAC8D0];
  v9 = a1 + 739668;
  v356 = (_QWORD *)(a1 + 176600);
  v387 = (unsigned int *)(a1 + 172972);
  v10 = (int *)(a2 + 24920);
  v521 = (_QWORD *)(a2 + 24912);
  v486 = (_DWORD *)(a2 + 82216);
  *(_DWORD *)(a2 + 82216) = 0;
  *(_DWORD *)(a5 + 696) = 0;
  *(_BYTE *)(**(_QWORD **)(a2 + 25360) + 8) = 0;
  *(_BYTE *)(**(_QWORD **)(a2 + 25360) + 9) = -1;
  v11 = **(unsigned __int8 ***)(a2 + 25360);
  v11[7] = 3;
  v12 = *(unsigned __int8 **)(a2 + 25376);
  v506 = (int *)(a2 + 24920);
  v496 = a1 + 739668;
  v413 = v11;
  v363 = *(unsigned __int8 **)(a2 + 25368);
  if (a4 < 3)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v389 = 0;
    v378 = 0;
    v383 = 0;
    v382 = 0;
    v18 = *v11;
    v360 = v11 + 20;
    v19 = num_4x4_blocks_wide_lookup[v18];
    v20 = num_4x4_blocks_high_lookup[v18];
    v415 = a1 + 836528;
    LODWORD(v21) = 4 * v20;
    v409 = 8 * v19;
    if ((4 * v20) <= 1)
      v21 = 1;
    else
      v21 = v21;
    v361 = v21;
    v371 = *v11;
    v370 = v18 & 0xFFFFFFFD;
    v353 = *(unsigned __int8 **)(a2 + 25376);
    v347 = *(_QWORD *)(a2 + 25368) + 1;
    v348 = v12 + 1;
    v22 = 0;
    v23 = 2 * v20;
    v358 = 2 * (v20 - 2);
    v357 = (v20 - 1) & 0xFFFFFFFFFFFFFFFELL;
    v364 = v19 - 1;
    v365 = v20 - 1;
    v351 = (v20 - 1) | 1;
    v346 = 2 * v20;
    v345 = 24 * v20;
    v367 = 12 * num_4x4_blocks_wide_lookup[v18];
    v368 = 2 * num_4x4_blocks_wide_lookup[v18];
    v24 = 0;
    v354 = (unint64_t)(v20 - 2) >> 31;
    v362 = (v19 - 1) & 0xFFFFFFFFFFFFFFFELL;
    v355 = (v19 - 1) | 1;
    v344 = 8 * v20;
    v428 = num_4x4_blocks_high_lookup[v18];
    v343 = 32 * v20;
    __n = num_4x4_blocks_wide_lookup[v18];
    v366 = 16 * v19;
    v25 = v11 + 44;
    v26 = 4;
    v429 = 2 * v20;
    while (1)
    {
      v372 = v22;
      v427 = 0;
      v386 = 0;
      v27 = 0;
      v359 = v23 * v22 + 2;
      v443 = v17;
      v373 = v24;
      v374 = 2 * v17;
      v349 = v25;
      v384 = v25;
      v377 = v26;
      v411 = v15;
      v412 = v16;
      v410 = v24;
      v408 = v15;
      v407 = v16;
      v369 = v26;
      do
      {
        v388 = &v27[v374];
        v28 = v27;
        v491 = v27;
        if (*v387)
          goto LABEL_22;
        v29 = (_DWORD)v27 + v374;
        v30 = v363;
        if (v388 > 1)
        {
          v31 = v11[12 * (int)v388 - 4];
          if ((v388 & 0xFFFFFFFD) == 0)
            goto LABEL_16;
        }
        else if (v353 && (char)v353[8] <= 0)
        {
          v29 = (_DWORD)v27 + v374;
          v211 = &v353[12 * ((_DWORD)v388 + 2) + 20];
          v30 = v363;
          if (*v353 >= 3u)
            v211 = v348;
          v31 = *v211;
          if ((v388 & 0xFFFFFFFD) == 0)
          {
LABEL_16:
            if (v30)
            {
              v32 = v30;
              if ((char)v30[8] <= 0)
              {
                v28 = v27;
                v30 += 12 * ((_DWORD)v388 + 1) + 20;
                if (*v32 >= 3u)
                  v30 = (unsigned __int8 *)v347;
                LODWORD(v30) = *v30;
              }
              else
              {
                LODWORD(v30) = 0;
              }
            }
            goto LABEL_21;
          }
        }
        else
        {
          v31 = 0;
          v29 = (_DWORD)v27 + v374;
          if ((v388 & 0xFFFFFFFD) == 0)
            goto LABEL_16;
        }
        LODWORD(v30) = v11[12 * v29 + 8];
LABEL_21:
        v415 = v8 + 400 * v31 + 40 * v30 + 837480;
LABEL_22:
        v33 = (void *)(*(_QWORD *)(v7 + 24984) + v443);
        v390 = a6 - v389;
        v34 = *(int *)(v7 + 8224);
        v35 = v10[4];
        *(_QWORD *)v512 = *(_QWORD *)(v7 + 8216);
        v36 = *(_QWORD *)(v7 + 24928);
        __dst = &v28[*(_QWORD *)(v7 + 24976)];
        v37 = (int)v28;
        __memcpy_chk();
        v375 = v33;
        __memcpy_chk();
        *(_BYTE *)(**(_QWORD **)(v7 + 25360) + 2) = 0;
        v405 = 4 * v34;
        v406 = 4 * v35;
        v518 = v35;
        v402 = v36;
        v489 = v34;
        v38 = 0;
        v39 = 0;
        if ((*(_BYTE *)(*(_QWORD *)(v7 + 25440) + 152) & 8) != 0)
        {
          v44 = 4 * (v37 + (int)v443 * (int)v34);
          v399 = v36 + v44;
          v401 = (int16x4_t *)(2 * (v36 + v44));
          v396 = *(_QWORD *)v512 + v44;
          v395 = 2 * (*(_QWORD *)v512 + v44);
          v392 = v34;
          v393 = v35;
          v438 = 2 * v35;
          v381 = 0x7FFFFFFFFFFFFFFFLL;
          v380 = 0x7FFFFFFF;
          v379 = 0x7FFFFFFF;
          v497 = a6 - v389;
          v8 = a1;
          v11 = v413;
          v42 = v408;
          while (1)
          {
            if (((*(_DWORD *)(v9 + 164) >> v39) & 1) != 0)
            {
              v45 = v39;
              if ((*(_BYTE *)(v9 + 156) & 0x10) == 0)
                goto LABEL_29;
              if (v39 == 8)
              {
                if ((((_BYTE)v38 - 1) & 0xFD) == 0)
                {
                  v45 = 8;
                  goto LABEL_29;
                }
              }
              else
              {
                if (v39 == 5)
                {
                  v45 = 5;
                  if (v38 == 1 || v38 == 4)
                    goto LABEL_29;
                }
                else
                {
                  if ((v38 - 4) <= 0xFDu && v39 == 7)
                    goto LABEL_26;
                  if (v39 != 6)
                    goto LABEL_29;
                  if ((((_BYTE)v38 - 2) & 0xFD) == 0)
                  {
                    v45 = 6;
LABEL_29:
                    v394 = *(int *)(v415 + 4 * v39);
                    v439 = v45;
                    v404 = v39;
                    v424 = v38;
                    __memcpy_chk();
                    __memcpy_chk();
                    v46 = 0;
                    v457 = 0;
                    v47 = 0;
                    v48 = v411;
                    v454 = v412;
                    v450 = v410;
                    v49 = v16;
                    v50 = (int16x4_t *)v395;
                    v447 = v396;
                    v51 = v401;
                    v444 = v399;
                    v52 = v443;
                    v53 = v491;
                    do
                    {
                      v54 = 0;
                      v55 = 0;
                      v56 = 0;
                      v57 = v427 + 2 * v49;
                      v420 = v49;
                      v58 = 12 * (_QWORD)&v53[v49] + 20;
                      v461 = v46;
                      v441 = v46 + v52;
                      v422 = v48;
                      v59 = v48;
                      v419 = v50;
                      v417 = v51;
                      v430 = v57;
                      do
                      {
                        v507 = v54;
                        v513 = v50;
                        v483 = v47;
                        v469 = v55;
                        v479 = v454 + v56;
                        v64 = (int16x4_t *)(v7 + 2 * (int)(4 * ((v450 + v55) & 0x3FFFFFF8 | (v454 + v56) & 1)));
                        v65 = v57;
                        v66 = *(_QWORD *)(v7 + 8200);
                        v67 = *(_QWORD *)(v7 + 0x2000);
                        v68 = *(_QWORD *)(v7 + 24912);
                        v473 = *(_QWORD *)(v7 + 8208);
                        v500 = v58;
                        *(_BYTE *)(**(_QWORD **)(v7 + 25360) + v58) = v439;
                        v503 = (void *)v59;
                        if (*v486)
                          v69 = v447 + v55;
                        else
                          v69 = v444 + v55;
                        if (*v486)
                          v70 = v489;
                        else
                          v70 = v518;
                        vp9_predict_intra_block((uint64_t)v521, 1, 0, v439, v69, v70, v444 + v55, v518, (_DWORD)v53 + v56, v441, 0);
                        *v64 = vsub_s16(*v513, *v51);
                        v465 = (unsigned __int16 *)v51;
                        v71 = (uint64_t *)((char *)v51 + v438);
                        v72 = (int16x4_t *)((char *)v513 + 2 * v489);
                        v64[2] = vsub_s16(*v72, *(int16x4_t *)((char *)v51 + v438));
                        v73 = (uint64_t *)((char *)v71 + v438);
                        v74 = (int16x4_t *)((char *)v72 + 2 * v489);
                        v64[4] = vsub_s16(*v74, *(int16x4_t *)((char *)v71 + v438));
                        v75 = (int16x4_t *)((char *)v71 + v438 + v438);
                        *(int16x4_t *)v76.i8 = *v75;
                        *(int16x4_t *)v77.i8 = vsub_s16(*(int16x4_t *)((char *)v74 + 2 * v489), *v75);
                        v64[6] = *(int16x4_t *)v77.i8;
                        v78 = 4 * v59;
                        v79 = (int32x4_t *)(v66 + v78);
                        v80 = (int16x8_t *)(v67 + v78);
                        v81 = (int32x4_t *)(v68 + v78);
                        v10 = v506;
                        if (v506[155])
                        {
                          if (v523[v461])
                            v82 = (__src[v56] != 0) + 1;
                          else
                            v82 = __src[v56] != 0;
                          v83 = (__int16 *)v64;
                          v84 = v80;
                          vp9_fwht4x4_c(v83, v79, 8);
                          vpx_highbd_quantize_b_neon(v79, 16, (int16x4_t **)v7, v84, v81, *(int16x4_t **)(v7 + 25032), (unsigned __int16 *)(v473 + v65 + v507), (uint64_t)&vp9_default_scan_orders);
                          v85 = v496;
                          v47 = cost_coeffs(v7, 0, v479, 0, v82, (uint64_t)&default_scan_4x4, (uint64_t)&default_scan_4x4_neighbors, *(_DWORD *)(v496 + 320))+ v483;
                          v86 = *(_QWORD *)(v7 + 8208) + v65;
                          v87 = *(_WORD *)(v86 + 2 * v56) != 0;
                          v523[v461] = v87;
                          __src[v56] = v87;
                          if ((v457 << v506[178]) + ((v506[179] * (uint64_t)v47 + 256) >> 9) >= v497)
                            goto LABEL_25;
                          v57 = v65;
                          v88 = (int)v503;
                          v89 = (int *)(*v521 + 4 * (_QWORD)v503);
                          v90 = v506[154];
                          v91 = (int16x4_t *)v465;
                          if (*(unsigned __int16 *)(v86 + 2 * v56) >= 2u)
                            vpx_highbd_iwht4x4_16_add_c(v89, v465, v518, v90);
                          else
                            vpx_highbd_iwht4x4_1_add_c(v89, v465, v518, v90);
                          v52 = v443;
                          v53 = v491;
                          v60 = v507;
                          v9 = v496;
                          v61 = v469;
                          v62 = v500;
                          v63 = v513;
                        }
                        else
                        {
                          v92 = (int32x4_t *)(v66 + v78);
                          v434 = (uint64_t *)((char *)v71 + v438 + v438);
                          *(_QWORD *)&v524[0] = 0;
                          v93 = **(unsigned __int8 ***)(v7 + 25360);
                          v474 = (unsigned __int16 *)(v473 + v65 + v507);
                          v436 = v81;
                          if ((char)v93[8] <= 0)
                          {
                            v95 = v93 + 1;
                            v96 = *v93;
                            v97 = &v93[v500];
                            if (v96 >= 3)
                              v97 = v95;
                            v94 = intra_mode_to_tx_type_lookup[*v97];
                          }
                          else
                          {
                            v94 = 0;
                          }
                          v98 = v80;
                          v432 = v71;
                          v99 = v94;
                          if (v523[v461])
                            v100 = (__src[v56] != 0) + 1;
                          else
                            v100 = __src[v56] != 0;
                          v101 = v92;
                          if (v94)
                            vp9_highbd_fht4x4_neon(v64, v92, 8, v94, v77, v76);
                          else
                            vpx_highbd_fdct4x4_neon(v64, v92, 8, v77, v76);
                          v102 = (uint64_t *)(&vp9_scan_orders + 3 * v94);
                          v7 = a2;
                          vpx_highbd_quantize_b_neon(v101, 16, (int16x4_t **)a2, v98, v436, *(int16x4_t **)(a2 + 25032), v474, (uint64_t)v102);
                          v475 = v99;
                          v104 = cost_coeffs(a2, 0, v479, 0, v100, *v102, (uint64_t)*(&vp9_scan_orders + 3 * v99 + 2), *(_DWORD *)(v496 + 320));
                          v105 = (int32x4_t *)(*(_QWORD *)(a2 + 24912) + 4 * (_QWORD)v503);
                          v10 = v506;
                          v106 = v506[154];
                          if (v106 == 8)
                          {
                            v107 = vp9_block_error(v101, v105, 16, v524, v103);
                          }
                          else
                          {
                            v108 = v101[1];
                            v109 = (uint32x4_t)vabdq_s32(*v101, *v105);
                            v110 = (uint32x4_t)vabdq_s32(v108, v105[1]);
                            v111 = vmlal_high_u32(vmlal_u32(vmlal_high_u32(vmull_u32(*(uint32x2_t *)v109.i8, *(uint32x2_t *)v109.i8), v109, v109), *(uint32x2_t *)v110.i8, *(uint32x2_t *)v110.i8), v110, v110);
                            v112 = vmlal_high_s32(vmlal_s32(vmlal_high_s32(vmull_s32(*(int32x2_t *)v101->i8, *(int32x2_t *)v101->i8), *v101, *v101), *(int32x2_t *)v108.i8, *(int32x2_t *)v108.i8), v108, v108);
                            v113 = v101[2];
                            v114 = v101[3];
                            v115 = (uint32x4_t)vabdq_s32(v113, v105[2]);
                            v116 = vmlal_high_s32(vmlal_s32(v112, *(int32x2_t *)v113.i8, *(int32x2_t *)v113.i8), v113, v113);
                            result = (int64x2_t)vabdq_s32(v114, v105[3]);
                            v117 = (int64x2_t)vmlal_high_u32(vmlal_u32(vmlal_high_u32(vmlal_u32(v111, *(uint32x2_t *)v115.i8, *(uint32x2_t *)v115.i8), v115, v115), *(uint32x2_t *)result.i8, *(uint32x2_t *)result.i8), (uint32x4_t)result, (uint32x4_t)result);
                            v118 = vmlal_high_s32(vmlal_s32(v116, *(int32x2_t *)v114.i8, *(int32x2_t *)v114.i8), v114, v114);
                            v119 = 2 * v106;
                            v120 = v119 - 16;
                            v121 = 1 << (v119 - 17);
                            if (v120 <= 0)
                              v121 = 0;
                            *(_QWORD *)&v524[0] = (vaddvq_s64(v118) + v121) >> v120;
                            result.i64[0] = vaddvq_s64(v117);
                            v107 = (result.i64[0] + v121) >> v120;
                          }
                          v57 = v430;
                          v47 = v104 + v483;
                          v122 = *(_QWORD *)(a2 + 8208) + v430;
                          v123 = *(_WORD *)(v122 + 2 * v56) != 0;
                          v523[v461] = v123;
                          __src[v56] = v123;
                          v457 += v107 >> 2;
                          v85 = v496;
                          if ((v457 << v506[178]) + ((v506[179] * (uint64_t)(v104 + v483) + 256) >> 9) >= v497)
                          {
LABEL_25:
                            v8 = a1;
                            v11 = v413;
                            v42 = v408;
                            v16 = v407;
                            v38 = v424;
                            v36 = v402;
                            v39 = v404;
                            v9 = v85;
                            goto LABEL_26;
                          }
                          v88 = (int)v503;
                          v124 = (int16x8_t *)(*v521 + 4 * (_QWORD)v503);
                          v125 = v506[154];
                          if (v475)
                          {
                            v91 = (int16x4_t *)v465;
                            *(double *)result.i64 = vp9_highbd_iht4x4_16_add_neon(v124, (uint64_t *)v465, v518, v475, v125);
                            v52 = v443;
                            v53 = v491;
                            v61 = v469;
                            v62 = v500;
                            v63 = v513;
                            v60 = v507;
                            v9 = v496;
                          }
                          else
                          {
                            v126 = v73;
                            v52 = v443;
                            v91 = (int16x4_t *)v465;
                            v9 = v496;
                            if (*(unsigned __int16 *)(v122 + 2 * v56) < 2u)
                            {
                              v127 = vdupq_n_s16(~(-1 << v125));
                              v128 = vdupq_n_s16((((unint64_t)(11585
                                                                                  * (int)((unint64_t)(3036938240 * v124->i32[0] + 0x80000000) >> 32)
                                                                                  + 0x2000) >> 14)
                                                + 8) >> 4);
                              v129.i64[0] = *(_QWORD *)v465;
                              v129.i64[1] = *v432;
                              v130 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v128, v129), v127), 0);
                              *(_QWORD *)v465 = v130.i64[0];
                              *v432 = vextq_s8(v130, v130, 8uLL).u64[0];
                              v130.i64[0] = *v126;
                              v130.i64[1] = *v434;
                              result = (int64x2_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v128, (int16x8_t)v130), v127), 0);
                              *v126 = result.i64[0];
                              result.i64[0] = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
                              *v434 = result.i64[0];
                            }
                            else
                            {
                              result.i64[0] = vpx_highbd_idct4x4_16_add_neon(v124, (uint64_t *)v465, v518, v506[154]).u64[0];
                            }
                            v53 = v491;
                            v61 = v469;
                            v62 = v500;
                            v63 = v513;
                            v60 = v507;
                          }
                        }
                        ++v56;
                        v55 = v61 + 4;
                        v51 = v91 + 1;
                        v50 = v63 + 1;
                        v58 = v62 + 12;
                        v54 = v60 + 2;
                        v59 = v88 + 16;
                      }
                      while (__n != v56);
                      v46 = v461 + 1;
                      v444 += v406;
                      v51 = &v417[v393];
                      v50 = &v419[v392];
                      v447 += v405;
                      v49 = v420 + 2;
                      v450 += 8;
                      v454 += 2;
                      v48 = v422 + 32;
                    }
                    while (v461 + 1 != v428);
                    v10 = v506;
                    v131 = (v457 << v506[178]) + ((v506[179] * (v394 + v47) + 256) >> 9);
                    v8 = a1;
                    v11 = v413;
                    v42 = v408;
                    v16 = v407;
                    v38 = v424;
                    v36 = v402;
                    v39 = v404;
                    if (v131 < v497)
                    {
                      memcpy(__dst, __src, __n);
                      memcpy(v375, v523, v428);
                      v132 = &v526;
                      v133 = v401;
                      v134 = v361;
                      do
                      {
                        memcpy(v132, v133, v409);
                        v133 = (int16x4_t *)((char *)v133 + v438);
                        v132 += 2;
                        --v134;
                      }
                      while (v134);
                      v38 = v439;
                      v380 = v394 + v47;
                      v379 = v47;
                      v381 = v457;
                      v497 = v131;
                      v16 = v407;
                      v8 = a1;
                      v36 = v402;
                      v39 = v404;
                    }
                    goto LABEL_26;
                  }
                }
                v10 = v506;
              }
            }
LABEL_26:
            ++v39;
            v7 = a2;
            v23 = v429;
            if (v39 == 10)
            {
              v135 = a6 - v389;
              if (v497 < v390)
              {
                if (!*v486)
                {
                  v426 = v38;
                  v208 = (char *)(2 * (v36 + 4 * ((int)v491 + (int)v443 * (int)v489)));
                  v209 = &v526;
                  v210 = v361;
                  do
                  {
                    memcpy(v208, v209, v409);
                    v209 += 2;
                    v208 += v438;
                    --v210;
                  }
                  while (v210);
                  LODWORD(v43) = 4 * __n;
                  v23 = v429;
                  v8 = a1;
                  LOBYTE(v38) = v426;
                  v42 = v408;
                  if (v497 >= v390)
                    goto LABEL_357;
                  goto LABEL_157;
                }
                LODWORD(v43) = 4 * __n;
                if (v497 < v390)
                  goto LABEL_157;
                goto LABEL_357;
              }
              LODWORD(v43) = 4 * __n;
LABEL_156:
              if (v497 < v135)
                goto LABEL_157;
              goto LABEL_357;
            }
          }
        }
        v40 = 4 * (v37 + (int)v443 * (int)v34);
        v418 = (char *)(v36 + v40);
        v41 = v40 + 2 * v35;
        v416 = v36 + v41;
        v403 = v36 + v35 + v41;
        v400 = (char *)(v36 + v35 + v40);
        v398 = *(_QWORD *)v512 + v40;
        v381 = 0x7FFFFFFFFFFFFFFFLL;
        v380 = 0x7FFFFFFF;
        v379 = 0x7FFFFFFF;
        v497 = a6 - v389;
        v8 = a1;
        v11 = v413;
        v42 = v408;
        v43 = 4 * __n;
        do
        {
          if (((*(_DWORD *)(v9 + 164) >> v39) & 1) == 0)
            goto LABEL_94;
          v136 = v39;
          if ((*(_BYTE *)(v9 + 156) & 0x10) != 0)
          {
            if (v39 == 8)
            {
              if ((((_BYTE)v38 - 1) & 0xFD) != 0)
                goto LABEL_94;
              v136 = 8;
            }
            else if (v39 == 5)
            {
              v136 = 5;
              if (v38 != 1 && v38 != 4)
              {
LABEL_93:
                v10 = v506;
                goto LABEL_94;
              }
            }
            else
            {
              if ((v38 - 4) <= 0xFDu && v39 == 7)
                goto LABEL_94;
              if (v39 == 6)
              {
                if ((((_BYTE)v38 - 2) & 0xFD) != 0)
                  goto LABEL_93;
                v136 = 6;
              }
            }
          }
          v397 = *(int *)(v415 + 4 * v39);
          v442 = v136;
          v421 = v39;
          v425 = v38;
          __memcpy_chk();
          __memcpy_chk();
          v137 = 0;
          v466 = 0;
          v508 = 0;
          v138 = v411;
          v458 = v412;
          v455 = v410;
          v139 = v16;
          v451 = v398;
          v437 = v400;
          v435 = v403;
          v433 = v416;
          v462 = v418;
          v140 = v491;
LABEL_98:
          v141 = 0;
          v142 = 0;
          v143 = 0;
          v144 = v427 + 2 * v139;
          v423 = v139;
          v145 = 12 * (_QWORD)&v140[v139] + 20;
          v445 = v137 + v443;
          v431 = v138;
          v146 = v138;
          v448 = v137;
          v440 = v144;
          while (1)
          {
            v150 = (uint8x8_t *)(v451 + v142);
            v151 = (uint8x8_t *)&v462[v142];
            v152 = v458 + v143;
            v476 = v142;
            v153 = (uint16x8_t *)(v7 + 2 * (int)(4 * ((v455 + v142) & 0x3FFFFFF8 | (v458 + v143) & 1)));
            v484 = v146;
            v154 = 4 * v146;
            v155 = (int16x8_t *)(*(_QWORD *)(v7 + 8200) + v154);
            v501 = (int32x4_t *)(*(_QWORD *)(v7 + 0x2000) + v154);
            v504 = (int32x4_t *)(*(_QWORD *)(v7 + 24912) + v154);
            v156 = *(_QWORD *)(v7 + 8208);
            v480 = v141;
            *(_QWORD *)v514 = v145;
            *(_BYTE *)(**(_QWORD **)(v7 + 25360) + v145) = v442;
            v157 = (unsigned __int16 *)(v156 + v144 + v141);
            v158 = *v486 ? v451 + v142 : (uint64_t)&v462[v142];
            v159 = *v486 ? v489 : v518;
            vp9_predict_intra_block((uint64_t)v521, 1, 0, v442, v158, v159, (uint64_t)v151, v518, (_DWORD)v140 + v143, v445, 0);
            v470 = (unsigned __int8 *)v151;
            vpx_subtract_block_neon(4, 4, v153, 8, v150, v489, v151, v518);
            v10 = v506;
            if (!v506[155])
              break;
            v161 = v448;
            if (v523[v448])
              v162 = (__src[v143] != 0) + 1;
            else
              v162 = __src[v143] != 0;
            vp9_fwht4x4_c(v153->i16, v155, 8);
            vpx_quantize_b_neon(v155, 16, (_QWORD *)a2, v501, v504, *(int16x8_t **)(a2 + 25032), v157, (uint64_t)&vp9_default_scan_orders);
            v9 = v496;
            v163 = v162;
            v7 = a2;
            v164 = cost_coeffs(a2, 0, v152, 0, v163, (uint64_t)&default_scan_4x4, (uint64_t)&default_scan_4x4_neighbors, *(_DWORD *)(v496 + 320))+ v508;
            v165 = *(_QWORD *)(a2 + 8208) + v144;
            v166 = *(_WORD *)(v165 + 2 * v143) != 0;
            v523[v448] = v166;
            __src[v143] = v166;
            if ((v466 << v506[178]) + ((v506[179] * (uint64_t)v164 + 256) >> 9) >= v497)
              goto LABEL_140;
            v167 = v484;
            v168 = (int *)(*v521 + 4 * v484);
            v508 = v164;
            if (*(unsigned __int16 *)(v165 + 2 * v143) >= 2u)
              vpx_iwht4x4_16_add_c(v168, v470, v518);
            else
              vpx_iwht4x4_1_add_c(v168, v470, v518);
            v140 = v491;
            v147 = v480;
            v148 = *(_QWORD *)v514;
            v149 = v476;
LABEL_101:
            ++v143;
            v142 = v149 + 4;
            v145 = v148 + 12;
            v141 = v147 + 2;
            v146 = v167 + 16;
            if (__n == v143)
            {
              v137 = v161 + 1;
              v462 += v406;
              v433 += v406;
              v435 += v406;
              v437 += v406;
              v451 += v405;
              v139 = v423 + 2;
              v455 += 8;
              v458 += 2;
              v138 = v431 + 32;
              if (v137 == v428)
              {
                v10 = v506;
                v189 = (v466 << v506[178]) + ((v506[179] * (v397 + v508) + 256) >> 9);
                v8 = a1;
                v11 = v413;
                v42 = v408;
                v16 = v407;
                v43 = 4 * __n;
                v38 = v425;
                v39 = v421;
                if (v189 < v497)
                {
                  memcpy(__dst, __src, __n);
                  memcpy(v375, v523, v428);
                  v190 = &v526;
                  v191 = v418;
                  v192 = v361;
                  do
                  {
                    memcpy(v190, v191, 4 * __n);
                    v191 += v518;
                    ++v190;
                    --v192;
                  }
                  while (v192);
                  v38 = v442;
                  v380 = v397 + v508;
                  v379 = v508;
                  v381 = v466;
                  v497 = v189;
                  v16 = v407;
                  v8 = a1;
                  v42 = v408;
                  goto LABEL_141;
                }
                goto LABEL_94;
              }
              goto LABEL_98;
            }
          }
          *(_QWORD *)&v524[0] = 0;
          v169 = **(unsigned __int8 ***)(a2 + 25360);
          if ((char)v169[8] <= 0)
          {
            v171 = v169 + 1;
            v172 = *v169;
            v173 = &v169[*(_QWORD *)v514];
            if (v172 >= 3)
              v173 = v171;
            v170 = intra_mode_to_tx_type_lookup[*v173];
          }
          else
          {
            v170 = 0;
          }
          v174 = v508;
          v167 = v484;
          v175 = (uint64_t *)(&vp9_scan_orders + 3 * v170);
          v176 = __src[v143] != 0;
          if (v523[v448])
            ++v176;
          v509 = v176;
          vp9_fht4x4_neon((int16x4_t *)v153, (int32x4_t *)v155, 8, v170, v160);
          vpx_quantize_b_neon(v155, 16, (_QWORD *)a2, v501, v504, *(int16x8_t **)(a2 + 25032), v157, (uint64_t)(&vp9_scan_orders + 3 * v170));
          v177 = *v175;
          v178 = v175[2];
          v7 = a2;
          v9 = v496;
          v179 = cost_coeffs(a2, 0, v152, 0, v509, v177, v178, *(_DWORD *)(v496 + 320));
          v180 = *(_WORD *)(*(_QWORD *)(a2 + 8208) + v440 + 2 * v143) != 0;
          v523[v448] = v180;
          v181 = v179 + v174;
          __src[v143] = v180;
          v466 += vp9_block_error(v155, *(_QWORD *)(a2 + 24912) + 4 * v484, 16, v524, v182) >> 2;
          if ((v466 << v506[178]) + ((v506[179] * (uint64_t)v181 + 256) >> 9) < v497)
          {
            v161 = v448;
            v183 = (int16x8_t *)(*v521 + 4 * v484);
            if (v170)
            {
              *(int8x8_t *)result.i8 = vp9_iht4x4_16_add_neon(v183, (__int32 *)v470, v518, v170);
            }
            else if (*(unsigned __int16 *)(*(_QWORD *)(a2 + 8208) + v440 + 2 * v143) < 2u)
            {
              result = (int64x2_t)vdupq_n_s16((((46340 * ((46340 * v183->i16[0] + 0x8000) >> 16) + 0x8000) >> 16)
                                                           + 8) >> 4);
              v184 = 4 * v143;
              v185 = (__int32 *)&v437[4 * v143];
              v186.i32[0] = *(_DWORD *)&v462[4 * v143];
              v186.i32[1] = *v185;
              v187 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)result, v186));
              *(_DWORD *)&v462[v184] = v187.i32[0];
              *v185 = v187.i32[1];
              v188 = (__int32 *)(v435 + 4 * v143);
              v187.i32[0] = *(_DWORD *)(v433 + 4 * v143);
              v187.i32[1] = *v188;
              *(int8x8_t *)result.i8 = vqmovun_s16((int16x8_t)vaddw_u8((uint16x8_t)result, v187));
              *(_DWORD *)(v433 + v184) = result.i32[0];
              *v188 = result.i32[1];
            }
            else
            {
              *(int8x8_t *)result.i8 = vpx_idct4x4_16_add_neon(v183, (__int32 *)v470, v518);
            }
            v140 = v491;
            v147 = v480;
            v148 = *(_QWORD *)v514;
            v149 = v476;
            v508 = v181;
            v144 = v440;
            goto LABEL_101;
          }
          v10 = v506;
LABEL_140:
          v8 = a1;
          v11 = v413;
          v42 = v408;
          v16 = v407;
          v43 = 4 * __n;
          v38 = v425;
LABEL_141:
          v39 = v421;
LABEL_94:
          ++v39;
          v7 = a2;
          v23 = v429;
        }
        while (v39 != 10);
        v135 = a6 - v389;
        if (v497 >= v390 || *v486)
          goto LABEL_156;
        v193 = v38;
        v194 = (char *)(v402 + 4 * ((int)v491 + (int)v443 * (int)v489));
        v195 = &v526;
        v196 = v361;
        do
        {
          memcpy(v194, v195++, v43);
          v194 += v518;
          --v196;
        }
        while (v196);
        v23 = v429;
        v8 = a1;
        LOBYTE(v38) = v193;
        v7 = a2;
        v42 = v408;
        if (v497 >= v390)
          goto LABEL_357;
LABEL_157:
        v11[12 * (_QWORD)v388 + 20] = v38;
        if (v370)
        {
          if (v365 < 2 || v359 + v386 * (int)__n + v358 < v359 + v386 * (int)__n)
          {
            v197 = 1;
          }
          else
          {
            v197 = 1;
            if (!v354)
            {
              v198 = v357;
              v199 = v377;
              do
              {
                v200 = v11 + 20;
                v200[12 * v199 - 24] = v38;
                v200[12 * v199] = v38;
                v199 += 4;
                v198 -= 2;
              }
              while (v198);
              v197 = v351;
              if (v365 == v357)
                goto LABEL_168;
            }
          }
          v201 = v428 - v197;
          v202 = (_DWORD)v491 + 2 * (v443 + v197);
          do
          {
            v11[12 * v202 + 20] = v38;
            v202 += 2;
            --v201;
          }
          while (v201);
        }
LABEL_168:
        if (v371 >= 2)
        {
          if (v364 < 2)
          {
            v203 = 1;
            goto LABEL_174;
          }
          v204 = v362;
          v205 = v384;
          do
          {
            *(v205 - 12) = v38;
            *v205 = v38;
            v205 += 24;
            v204 -= 2;
          }
          while (v204);
          v203 = v355;
          if (v364 != v362)
          {
LABEL_174:
            v206 = __n - v203;
            v207 = &v360[12 * v203 + 12 * v412];
            do
            {
              *v207 = v38;
              v207 += 12;
              --v206;
            }
            while (v206);
          }
        }
        v389 += v497;
        if (v389 >= a6)
        {
LABEL_357:
          *a3 = 0x7FFFFFFF;
          return result;
        }
        v382 += v380;
        v383 += v381;
        v378 += v379;
        v27 = &v491[__n];
        ++v386;
        v427 += v368;
        v410 += v43;
        v412 += __n;
        v411 += v366;
        v377 += __n;
        v384 += v367;
      }
      while ((unint64_t)&v491[__n] <= 1);
      v17 = v443 + v428;
      v22 = v372 + 1;
      v16 += v346;
      v24 = v373 + v344;
      v15 = v42 + v343;
      v26 = v369 + v23;
      v25 = &v349[v345];
      if (((v443 + v428) & 0xFFFFFFFE) != 0)
      {
        v11[1] = v11[56];
        if ((v383 << v10[178]) + ((v10[179] * (uint64_t)v382 + 256) >> 9) < a6)
        {
          v456 = 0;
          *(_QWORD *)v498 = a4;
          goto LABEL_320;
        }
        goto LABEL_357;
      }
    }
  }
  if (!v12)
  {
    v14 = 0;
    v13 = *(unsigned __int8 **)(a2 + 25368);
    if (!v363)
      goto LABEL_203;
    goto LABEL_198;
  }
  v13 = *(unsigned __int8 **)(a2 + 25368);
  if ((char)v12[8] <= 0)
  {
    v212 = v12 + 44;
    v13 = *(unsigned __int8 **)(a2 + 25368);
    if (*v12 >= 3u)
      v212 = v12 + 1;
    v14 = *v212;
    if (!v363)
      goto LABEL_203;
    goto LABEL_198;
  }
  v14 = 0;
  if (v363)
  {
LABEL_198:
    v213 = v13;
    if ((char)v13[8] <= 0)
    {
      v13 += 32;
      if (*v213 >= 3u)
        v13 = v213 + 1;
      LODWORD(v13) = *v13;
    }
    else
    {
      LODWORD(v13) = 0;
    }
  }
LABEL_203:
  v382 = 0;
  v378 = 0;
  v456 = 0;
  v383 = 0;
  v214 = 0;
  v463 = 0;
  v446 = 0;
  v449 = a1 + 400 * v14 + 40 * v13 + 837480;
  *(_DWORD *)(a2 + 82236) = 0;
  *(_QWORD *)(a2 + 82228) = 0;
  *(_QWORD *)v498 = a4;
  v459 = &ss_size_lookup[4 * a4];
  v467 = a6;
  do
  {
    __na = v214;
    if (*(_DWORD *)(v9 + 264))
    {
      if (v214 == 8)
      {
        if (((v463 - 1) & 0xFD) != 0)
          goto LABEL_205;
      }
      else if (v214 == 5)
      {
        if (v463 != 1 && v463 != 4)
          goto LABEL_205;
      }
      else if (v214 == 7 && (v463 - 4) < 0xFEu || v214 == 6 && ((v463 - 2) & 0xFD) != 0)
      {
        goto LABEL_205;
      }
      if (v456)
        break;
    }
    v11[1] = v214;
    if (*(_DWORD *)v9 == 1)
    {
      v215 = max_txsize_lookup[a4];
      v216 = *(unsigned __int8 ***)(v7 + 25360);
LABEL_222:
      v217 = v7;
      v218 = *v216;
      if (v215 >= tx_mode_to_biggest_tx_size[v387[13]])
        v219 = tx_mode_to_biggest_tx_size[v387[13]];
      else
        v219 = v215;
      v220 = *(_DWORD *)(v9 + 320);
      v532 = 0u;
      v533 = 0u;
      v530 = 0u;
      v531 = 0u;
      v528 = 0u;
      v529 = 0u;
      v526 = v8;
      v527 = v217;
      *(_QWORD *)&v532 = v467;
      HIDWORD(v532) = v220;
      BYTE8(v533) = 1;
      v534 = 0;
      v218[2] = v219;
      vp9_get_entropy_contexts(a4, v219, (uint64_t)v521, (char *)&v528, (char *)&v529);
      v221 = *(unsigned __int8 ***)(v217 + 25360);
      v222 = *v221;
      if ((char)(*v221)[8] > 0 || v10[155])
      {
        v223 = &vp9_default_scan_orders + 3 * v219;
      }
      else
      {
        if (*v222 >= 3u)
          v243 = v222 + 1;
        else
          v243 = v222 + 20;
        v223 = &vp9_scan_orders + 12 * v219 + 3 * intra_mode_to_tx_type_lookup[*v243];
      }
      *(_QWORD *)&v533 = v223;
      v224 = *v10;
      v225 = v10[1];
      v226 = v459[2 * v224 + v225];
      v227 = ((v10[123] >> (v225 + 5)) & (v10[123] >> 31)) + num_4x4_blocks_high_lookup[v226];
      if (v227 >= 1)
      {
        v228 = (v506[121] >> (v224 + 5)) & (v506[121] >> 31);
        v229 = v228 + num_4x4_blocks_wide_lookup[v226];
        if (v229 >= 1)
        {
          v230 = 0;
          v231 = 0;
          v232 = (*v221)[2];
          v233 = -v228 >> v232 << (2 * v232);
          v234 = 1 << v232;
          do
          {
            for (i = 0; i < v229; i += v234)
            {
              block_rd_txfm(0, v231, v230, i, v226, v232, &v526);
              v231 += 1 << (2 * v232);
            }
            v231 += v233;
            v230 += v234;
          }
          while (v230 < v227);
        }
      }
      if (DWORD2(v532))
      {
        v7 = a2;
        v10 = v506;
        v8 = a1;
        v9 = v496;
        v11 = v413;
      }
      else
      {
        v236 = *((_QWORD *)&v530 + 1);
        v237 = v530;
        v238 = BYTE8(v533);
        v7 = a2;
        v10 = v506;
        v8 = a1;
        v9 = v496;
        v11 = v413;
        if ((_DWORD)v530 != 0x7FFFFFFF)
          goto LABEL_317;
      }
      goto LABEL_205;
    }
    v215 = max_txsize_lookup[a4];
    v216 = *(unsigned __int8 ***)(v7 + 25360);
    if (v10[155])
      goto LABEL_222;
    v471 = max_txsize_lookup[a4];
    v239 = *(_QWORD *)(v7 + 25376);
    if (v239)
    {
      v240 = *(char *)(v239 + 3);
      v241 = *(_QWORD *)(v7 + 25368);
      if (v241)
        goto LABEL_239;
    }
    else
    {
      v240 = 0;
      v241 = *(_QWORD *)(v7 + 25368);
      if (v241)
      {
LABEL_239:
        v242 = *(char *)(v241 + 3);
        goto LABEL_246;
      }
    }
    v242 = 0;
LABEL_246:
    v244 = *v216;
    v245 = *(unsigned __int8 *)(*v356 + v242 + v240 + 1967);
    v524[0] = xmmword_208F4BF78;
    v524[1] = unk_208F4BF88;
    result.i64[0] = 0x7FFFFFFFFFFFFFFFLL;
    v524[2] = xmmword_208F4BF98;
    v524[3] = unk_208F4BFA8;
    v502 = v244;
    v246 = max_txsize_lookup[*v244];
    v247 = v246;
    if (v239)
    {
      v247 = v246;
      if (!*(_BYTE *)(v239 + 3))
        v247 = *(unsigned __int8 *)(v239 + 2);
    }
    v248 = v247;
    if (v241)
    {
      v248 = v246;
      if (!*(_BYTE *)(v241 + 3))
        v248 = *(unsigned __int8 *)(v241 + 2);
    }
    v452 = vp9_prob_cost[v245];
    if (v239)
      v249 = v247;
    else
      v249 = v248;
    v250 = vp9_prob_cost[256 - v245];
    v251 = v387[13];
    if ((_DWORD)v251 == 4)
    {
      v252 = (v215 - *(_DWORD *)(v9 + 4)) & ~((int)(v215 - *(_DWORD *)(v9 + 4)) >> 31);
      if (a4 < 0xA)
      {
        v253 = v215;
        if (v252 > v215)
        {
          v254 = 1;
          goto LABEL_316;
        }
      }
      else
      {
        if ((int)(v252 + 1) < (int)v215)
          ++v252;
        else
          v252 = v215;
        v253 = v215;
      }
    }
    else
    {
      v252 = tx_mode_to_biggest_tx_size[v251];
      if (v215 < v252)
        v252 = v215;
      v253 = v252;
    }
    v487 = v249 + v248 > v246;
    v255 = v253;
    v477 = v252;
    v256 = v467;
    v481 = v250;
    do
    {
      v519 = v215;
      v505 = (void *)*(int *)(v8 + 32 * (v471 - 1) + 16 * v487 + 4 * v255 + 841784);
      v257 = *(_DWORD *)(v9 + 320);
      v532 = 0u;
      v533 = 0u;
      v530 = 0u;
      v531 = 0u;
      v528 = 0u;
      v529 = 0u;
      v526 = v8;
      v527 = v7;
      *(_QWORD *)v515 = v256;
      *(_QWORD *)&v532 = v256;
      HIDWORD(v532) = v257;
      BYTE8(v533) = 1;
      v534 = 0;
      *(_BYTE *)(**(_QWORD **)(v7 + 25360) + 2) = v255;
      vp9_get_entropy_contexts(a4, v255, (uint64_t)v521, (char *)&v528, (char *)&v529);
      v258 = *(unsigned __int8 ***)(v7 + 25360);
      v259 = *v258;
      v510 = v255;
      if ((char)(*v258)[8] > 0 || v10[155])
      {
        v260 = v255;
        v261 = &vp9_default_scan_orders;
      }
      else
      {
        if (*v259 >= 3u)
          v288 = v259 + 1;
        else
          v288 = v259 + 20;
        v260 = intra_mode_to_tx_type_lookup[*v288];
        v261 = &vp9_scan_orders + 12 * v255;
      }
      *(_QWORD *)&v533 = &v261[3 * v260];
      v262 = *v10;
      v263 = v10[1];
      v264 = ss_size_lookup[4 * a4 + 2 * v262 + v263];
      v265 = (v10[121] >> (v262 + 5)) & (v10[121] >> 31);
      v266 = v265 + num_4x4_blocks_wide_lookup[v264];
      v267 = ((v10[123] >> (v263 + 5)) & (v10[123] >> 31)) + num_4x4_blocks_high_lookup[v264];
      if (v267 >= 1 && v266 >= 1)
      {
        v269 = 0;
        v270 = 0;
        v271 = (*v258)[2];
        v272 = -v265 >> v271 << (2 * v271);
        v273 = 1 << v271;
        do
        {
          v274 = 0;
          do
          {
            block_rd_txfm(0, v270, v269, v274, v264, v271, &v526);
            v270 += 1 << (2 * v271);
            v274 += v273;
          }
          while (v274 < v266);
          v270 += v272;
          v269 += v273;
        }
        while (v269 < v267);
      }
      if (DWORD2(v532))
      {
        v275 = 0;
        v276 = 0x7FFFFFFF;
        v277 = 0x7FFFFFFFFFFFFFFFLL;
        v278 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v276 = v530;
        v277 = *((_QWORD *)&v530 + 1);
        v278 = v531;
        v275 = BYTE8(v533);
      }
      v7 = a2;
      *(_QWORD *)&__src[8 * v510] = v277;
      *(_DWORD *)&__src[8 * v510 + 48] = v276;
      *(_DWORD *)&__src[4 * v510 + 32] = v275;
      v279 = &__src[8 * v510 + 48];
      if (v276 == 0x7FFFFFFF)
        v280 = 0x7FFFFFFF;
      else
        v280 = v276 + (_DWORD)v505;
      *((_DWORD *)v279 + 1) = v280;
      v281 = (int *)(v279 + 4);
      v10 = v506;
      v8 = a1;
      v9 = v496;
      v11 = v413;
      if (v277 == 0x7FFFFFFFFFFFFFFFLL || v276 == 0x7FFFFFFF)
      {
        v286 = 0x7FFFFFFFFFFFFFFFLL;
        result = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
        v524[v510] = result;
        v285 = 0x7FFFFFFFFFFFFFFFLL;
        v215 = v519;
        v256 = *(_QWORD *)v515;
        if ((char)v502[8] < 1)
          goto LABEL_311;
      }
      else
      {
        v282 = v506[179];
        v283 = v506[178];
        v284 = (int64x2_t *)&v524[v510];
        if (v275)
        {
          v285 = (v278 << v283) + (((int)v282 * (uint64_t)(int)v481 + 256) >> 9);
          if ((char)v502[8] < 1)
          {
            v284->i64[0] = v285;
            v286 = (v278 << v283) + ((v282 * ((uint64_t)v505 + v481) + 256) >> 9);
            *((_QWORD *)&v524[v510] + 1) = v286;
            v215 = v519;
            v256 = *(_QWORD *)v515;
            if ((char)v502[8] < 1)
              goto LABEL_311;
          }
          else
          {
            result = vdupq_n_s64(v285);
            *v284 = result;
            *v281 = v276;
            v286 = (v278 << v283) + (((int)v282 * (uint64_t)(int)v481 + 256) >> 9);
            v215 = v519;
            v256 = *(_QWORD *)v515;
            if ((char)v502[8] < 1)
              goto LABEL_311;
          }
        }
        else
        {
          v287 = v277 << v283;
          v285 = (v277 << v283) + ((v282 * (v452 + v276) + 256) >> 9);
          v286 = v287 + ((v282 * (v452 + v276 + (int)v505) + 256) >> 9);
          v284->i64[0] = v285;
          v284->i64[1] = v286;
          v215 = v519;
          v256 = *(_QWORD *)v515;
          if ((char)v502[8] < 1)
            goto LABEL_311;
        }
      }
      if (!v506[155] && !v275 && v278 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v289 = (int64_t *)&v524[v510];
        v290 = (v278 << v506[178]) + ((v506[179] * (uint64_t)(int)v481 + 256) >> 9);
        if (v285 >= v290)
          v285 = v290;
        if (v286 >= v290)
          v286 = v290;
        *v289 = v285;
        v289[1] = v286;
      }
LABEL_311:
      if (*(_DWORD *)(v496 + 352)
        && (v286 == 0x7FFFFFFFFFFFFFFFLL || v510 < v471 && v286 > *((_QWORD *)&v524[v510 + 1] + 1) || v275 == 1))
      {
        break;
      }
      if (v286 < v256)
      {
        v256 = v286;
        v215 = v510;
      }
      v255 = v510 - 1;
    }
    while (v510 > v477);
    v254 = v387[13] == 4;
LABEL_316:
    v502[2] = v215;
    v236 = *(_QWORD *)&__src[8 * v215];
    v237 = *(_DWORD *)&__src[8 * v215 + 48 + 4 * v254];
    v238 = *(_DWORD *)&__src[4 * v215 + 32];
    if (v237 != 0x7FFFFFFF)
    {
LABEL_317:
      v291 = *(int *)(v449 + 4 * __na) + (uint64_t)v237;
      if ((v236 << v10[178]) + ((v291 * v10[179] + 256) >> 9) < v467)
      {
        v382 = *(_DWORD *)(v449 + 4 * __na) + v237;
        v378 = v237;
        v446 = v11[2];
        v456 = v238;
        v383 = v236;
        v463 = __na;
        v467 = (v236 << v10[178]) + ((v291 * v10[179] + 256) >> 9);
      }
    }
LABEL_205:
    v214 = __na + 1;
  }
  while (__na != 9);
  v11[1] = v463;
  v11[2] = v446;
  if (v467 >= a6)
    goto LABEL_357;
LABEL_320:
  v464 = 0;
  v453 = 0;
  v460 = 0;
  v468 = 0;
  v292 = 0;
  v472 = 0;
  v293 = uv_txsize_lookup[16 * *(_QWORD *)v498
                        + 4 * *(unsigned __int8 *)(**(_QWORD **)(v7 + 25360) + 2)
                        + 2 * v10[34]
                        + v10[35]];
  if (a4 <= 3)
    v294 = 3;
  else
    v294 = a4;
  *(_QWORD *)(v7 + 82228) = 0;
  *(_DWORD *)(v7 + 82236) = 0;
  v511 = (_DWORD *)(v8 + 4 * v293 + 739848);
  v492 = (void *)(v7 + 25048);
  v488 = v7 + 25184;
  v295 = 0x7FFFFFFFFFFFFFFFLL;
  v516 = v294;
  v490 = &ss_size_lookup[4 * v294];
  while (2)
  {
    if (((*v511 >> v292) & 1) != 0)
    {
      v305 = **(unsigned __int8 ***)(v7 + 25360);
      v520 = v292;
      v305[6] = v292;
      v306 = uv_txsize_lookup[16 * *v305 + 4 * v305[2] + 2 * v10[34] + v10[35]];
      if ((v295 & 0x8000000000000000) == 0 && (char)v305[8] >= 1)
      {
        vp9_subtract_plane(v7, v516, 1);
        vp9_subtract_plane(v7, v516, 2);
      }
      v307 = *(_DWORD *)(v9 + 320);
      v532 = 0u;
      v533 = 0u;
      v530 = 0u;
      v531 = 0u;
      v528 = 0u;
      v529 = 0u;
      v526 = v8;
      v527 = v7;
      *(_QWORD *)v522 = v295;
      *(_QWORD *)&v532 = v295;
      HIDWORD(v532) = v307;
      BYTE8(v533) = 1;
      v534 = 0;
      v499 = v306;
      vp9_get_entropy_contexts(v516, v306, (uint64_t)v492, (char *)&v528, (char *)&v529);
      __nb = &vp9_default_scan_orders + 3 * v306;
      *(_QWORD *)&v533 = __nb;
      v309 = v10[34];
      v308 = v10[35];
      v310 = 2 * v309;
      v311 = v490[2 * v309 + v308];
      v312 = ((v10[123] >> (v308 + 5)) & (v10[123] >> 31)) + num_4x4_blocks_high_lookup[v311];
      if (v312 >= 1)
      {
        v313 = (v506[121] >> (v309 + 5)) & (v506[121] >> 31);
        v314 = v313 + num_4x4_blocks_wide_lookup[v311];
        if (v314 >= 1)
        {
          v315 = 0;
          v316 = 0;
          v317 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(a2 + 25360)
                                + 4 * *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2)
                                + v310
                                + v308];
          v318 = -v313 >> v317 << (2 * v317);
          v319 = 1 << v317;
          do
          {
            for (j = 0; j < v314; j += v319)
            {
              block_rd_txfm(1, v316, v315, j, v311, v317, &v526);
              v316 += 1 << (2 * v317);
            }
            v316 += v318;
            v315 += v319;
          }
          while (v315 < v312);
        }
      }
      if (DWORD2(v532))
        goto LABEL_330;
      v7 = a2;
      v295 = *(_QWORD *)v522;
      if ((_DWORD)v530 == 0x7FFFFFFF)
        goto LABEL_344;
      v485 = v530;
      v482 = *((_QWORD *)&v530 + 1);
      v478 = BYTE8(v533);
      v296 = *(_DWORD *)(v496 + 320);
      v532 = 0u;
      v533 = 0u;
      v530 = 0u;
      v531 = 0u;
      v528 = 0u;
      v529 = 0u;
      v526 = a1;
      v527 = a2;
      *(_QWORD *)&v532 = *(_QWORD *)v522;
      HIDWORD(v532) = v296;
      BYTE8(v533) = 1;
      v534 = 0;
      vp9_get_entropy_contexts(v516, v499, v488, (char *)&v528, (char *)&v529);
      *(_QWORD *)&v533 = __nb;
      v297 = v506[68];
      v298 = v506[69];
      v299 = 2 * v297;
      v300 = ss_size_lookup[4 * v516 + 2 * v297 + v298];
      v301 = (v506[121] >> (v297 + 5)) & (v506[121] >> 31);
      v302 = v301 + num_4x4_blocks_wide_lookup[v300];
      v303 = ((v506[123] >> (v298 + 5)) & (v506[123] >> 31)) + num_4x4_blocks_high_lookup[v300];
      if (v303 >= 1 && v302 >= 1)
      {
        v321 = 0;
        v322 = 0;
        v323 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(a2 + 25360)
                              + 4 * *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 2)
                              + v299
                              + v298];
        v324 = -v301 >> v323 << (2 * v323);
        v325 = 1 << v323;
        do
        {
          v326 = 0;
          do
          {
            block_rd_txfm(2, v322, v321, v326, v300, v323, &v526);
            v322 += 1 << (2 * v323);
            v326 += v325;
          }
          while (v326 < v302);
          v322 += v324;
          v321 += v325;
        }
        while (v321 < v303);
      }
      if (DWORD2(v532))
      {
LABEL_330:
        v7 = a2;
        v10 = v506;
        v8 = a1;
        v9 = v496;
        v292 = v520;
        v295 = *(_QWORD *)v522;
      }
      else
      {
        v7 = a2;
        v295 = *(_QWORD *)v522;
        if ((_DWORD)v530 == 0x7FFFFFFF)
        {
LABEL_344:
          v10 = v506;
          v8 = a1;
          v9 = v496;
          v292 = v520;
        }
        else
        {
          v10 = v506;
          v8 = a1;
          v292 = v520;
          if ((*(_QWORD *)v522 & 0x8000000000000000) != 0)
          {
            v9 = v496;
          }
          else
          {
            v327 = v530 + v485;
            v328 = *((_QWORD *)&v530 + 1) + v482;
            v329 = *(int *)(a1
                          + 400 * *v387
                          + 40 * *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 1)
                          + 4 * v520
                          + 836680)
                 + (uint64_t)((int)v530 + v485);
            v330 = ((*((_QWORD *)&v530 + 1) + v482) << v506[178]) + ((v329 * v506[179] + 256) >> 9);
            v9 = v496;
            if (v330 < *(uint64_t *)v522)
            {
              v460 = v478 & 1 & BYTE8(v533);
              if (v506[167])
              {
                v464 = *(_DWORD *)(a1
                                 + 400 * *v387
                                 + 40 * *(unsigned __int8 *)(**(_QWORD **)(a2 + 25360) + 1)
                                 + 4 * v520
                                 + 836680)
                     + v530
                     + v485;
              }
              else
              {
                *(_QWORD *)(a2 + 16504) = *(_QWORD *)(a5 + 440);
                *(_QWORD *)(a2 + 16496) = *(_QWORD *)(a5 + 512);
                *(_QWORD *)(a2 + 25048) = *(_QWORD *)(a5 + 584);
                *(_QWORD *)(a2 + 16512) = *(_QWORD *)(a5 + 656);
                *(_QWORD *)(a5 + 440) = *(_QWORD *)(a5 + 424);
                *(_QWORD *)(a5 + 512) = *(_QWORD *)(a5 + 496);
                *(_QWORD *)(a5 + 584) = *(_QWORD *)(a5 + 568);
                *(_QWORD *)(a5 + 656) = *(_QWORD *)(a5 + 640);
                *(_QWORD *)(a5 + 424) = *(_QWORD *)(a2 + 16504);
                *(_QWORD *)(a5 + 496) = *(_QWORD *)(a2 + 16496);
                *(_QWORD *)(a5 + 568) = *(_QWORD *)(a2 + 25048);
                *(_QWORD *)(a5 + 640) = *(_QWORD *)(a2 + 16512);
                *(_QWORD *)(a2 + 24808) = *(_QWORD *)(a5 + 464);
                *(_QWORD *)(a2 + 24800) = *(_QWORD *)(a5 + 536);
                *(_QWORD *)(a2 + 25184) = *(_QWORD *)(a5 + 608);
                *(_QWORD *)(a2 + 24816) = *(_QWORD *)(a5 + 680);
                *(_QWORD *)(a5 + 464) = *(_QWORD *)(a5 + 448);
                *(_QWORD *)(a5 + 536) = *(_QWORD *)(a5 + 520);
                *(_QWORD *)(a5 + 608) = *(_QWORD *)(a5 + 592);
                *(_QWORD *)(a5 + 680) = *(_QWORD *)(a5 + 664);
                *(_QWORD *)(a5 + 448) = *(_QWORD *)(a2 + 24808);
                *(_QWORD *)(a5 + 520) = *(_QWORD *)(a2 + 24800);
                *(_QWORD *)(a5 + 592) = *(_QWORD *)(a2 + 25184);
                v464 = v329;
                *(_QWORD *)(a5 + 664) = *(_QWORD *)(a2 + 24816);
              }
              v453 = v327;
              v468 = v328;
              v472 = v520;
              v295 = v330;
            }
          }
        }
      }
    }
    if (++v292 != 10)
      continue;
    break;
  }
  v331 = **(_QWORD **)(v7 + 25360);
  *(_BYTE *)(v331 + 6) = v472;
  if (v456 && v460)
  {
    v332 = *(_QWORD *)(v7 + 25368);
    v333 = *(_QWORD *)(v7 + 25376);
    v334 = v468;
    if (v333)
      v333 = *(char *)(v333 + 3);
    if (v332)
      v332 = *(char *)(v332 + 3);
    v335 = v382 + v464 - (v378 + v453) + vp9_prob_cost[256 - *(unsigned __int8 *)(*v356 + v332 + v333 + 1967)];
  }
  else
  {
    v336 = *(_QWORD *)(v7 + 25368);
    v337 = *(_QWORD *)(v7 + 25376);
    v334 = v468;
    if (v337)
      v337 = *(char *)(v337 + 3);
    if (v336)
      v336 = *(char *)(v336 + 3);
    v335 = v464 + v382 + vp9_prob_cost[*(unsigned __int8 *)(*v356 + v336 + v337 + 1967)];
  }
  *a3 = v335;
  *((_QWORD *)a3 + 1) = v334 + v383;
  *(_OWORD *)a5 = *(_OWORD *)v331;
  v338 = *(_OWORD *)(v331 + 16);
  v339 = *(_OWORD *)(v331 + 32);
  v340 = *(_OWORD *)(v331 + 48);
  *(_DWORD *)(a5 + 64) = *(_DWORD *)(v331 + 64);
  *(_OWORD *)(a5 + 32) = v339;
  *(_OWORD *)(a5 + 48) = v340;
  *(_OWORD *)(a5 + 16) = v338;
  v341 = *(_QWORD *)(v7 + 25568);
  result = *(int64x2_t *)v341;
  v342 = *(_OWORD *)(v341 + 16);
  *(_DWORD *)(a5 + 100) = *(_DWORD *)(v341 + 32);
  *(_OWORD *)(a5 + 84) = v342;
  *(int64x2_t *)(a5 + 68) = result;
  *((_QWORD *)a3 + 2) = (*((_QWORD *)a3 + 1) << v10[178]) + ((v10[179] * (uint64_t)*a3 + 256) >> 9);
  return result;
}

void block_rd_txfm(int a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, uint64_t *a7)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  double v25;
  uint64_t *v26;
  int v27;
  int v28;
  int v30;
  __n128 v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  __n128 *v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  double v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  void (*v77)(uint64_t, uint64_t, uint64_t, uint64_t, int *, __n128);
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL *v88;
  BOOL *v89;
  int v90;
  _QWORD *v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int16x4_t *v105;
  uint64_t v106;
  uint64_t v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __n128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  signed int v132;
  uint64_t v133;
  int v134;
  uint64_t v136[2];
  double v137;
  int *v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147[3];

  v11 = a1;
  v12 = *a7;
  v13 = a7[1];
  v14 = **(_QWORD **)(v13 + 25360);
  v144 = 0x7FFFFFFFFFFFFFFFLL;
  v145 = 0x7FFFFFFFFFFFFFFFLL;
  v15 = (BOOL *)a7 + a3 + 32;
  v16 = (char *)a7 + a4 + 16;
  v17 = a7[14];
  v18 = txsize_to_bsize[a6];
  v19 = v13 + 24912 + 136 * a1;
  v20 = *(unsigned int *)(v19 + 24);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = v12 + 739624;
  v23 = *(_DWORD *)(v12 + 739624);
  if (*v16)
    v24 = *v15 + 1;
  else
    v24 = *v15;
  v25 = *(double *)(v22 + 8);
  v143 = 0;
  v136[0] = v13;
  v136[1] = v23;
  v137 = v25;
  v138 = &v143;
  v139 = &v144;
  v140 = a7 + 2;
  v141 = a7 + 4;
  v142 = v14 + 3;
  if (*((_DWORD *)a7 + 22))
    return;
  v26 = a7;
  v133 = v13 + 25404;
  v134 = a2;
  v125 = a6;
  if (*(char *)(v14 + 8) > 0)
  {
    if (max_txsize_lookup[a5] == a6)
    {
      v27 = *(unsigned __int8 *)(v13 + (a2 >> (2 * a6)) + 4 * a1 + 82228);
      v28 = *(_DWORD *)(v22 + 560);
      if (v27 == 1 && v28 == 0)
      {
LABEL_21:
        v127 = v16;
        v128 = (uint64_t)a7 + a3 + 32;
        v132 = v24;
        v129 = a5;
        switch(v23)
        {
          case 3u:
            if ((*(_BYTE *)(*(_QWORD *)(v13 + 25440) + 152) & 8) == 0)
            {
              v53 = num_4x4_blocks_wide_lookup[a5];
              v54 = 4 * v53;
              v55 = v13 + 8304 * a1 + 8 * (a4 + 4 * v53 * a3);
              v56 = *(__int16 *)(*(_QWORD *)(v13 + 24912 + 136 * a1 + 120) + 2) >> 3;
              v57 = num_4x4_blocks_wide_lookup[v18];
              LODWORD(v123) = num_4x4_blocks_high_lookup[v18];
              if (a6
                && ((LODWORD(v58) = (*(int *)v133 >> (*(_DWORD *)(v19 + 8) + 5)) + v53 - a4,
                     v59 = (*(int *)(v13 + 25412) >> (*(_DWORD *)(v19 + 12) + 5)) - a3 + num_4x4_blocks_high_lookup[a5],
                     (int)v58 < v57)
                 || v59 < (int)v123))
              {
                if (v59 >= (int)v123)
                  v103 = num_4x4_blocks_high_lookup[v18];
                else
                  v103 = v59;
                if ((int)v58 >= v57)
                  v58 = num_4x4_blocks_wide_lookup[v18];
                else
                  v58 = v58;
                v123 = v103;
                v110 = v13;
                v118 = *(__int16 *)(*(_QWORD *)(v13 + 24912 + 136 * a1 + 120) + 2) >> 3;
                if ((int)v103 < 1 || (int)v58 < 1)
                {
                  v61 = 0;
                }
                else
                {
                  v104 = 0;
                  v61 = 0;
                  v120 = 32 * num_4x4_blocks_wide_lookup[a5];
                  do
                  {
                    v105 = (int16x4_t *)v55;
                    v106 = v58;
                    v107 = v58;
                    do
                    {
                      v61 += vpx_sum_squares_2d_i16_neon(v105++, v54, 4);
                      --v107;
                    }
                    while (v107);
                    ++v104;
                    v55 += v120;
                    v58 = v106;
                  }
                  while (v104 != v123);
                }
                v60 = 4 * v58;
                v13 = v110;
                v11 = a1;
                v56 = v118;
              }
              else
              {
                v60 = 4 * v57;
                v61 = vpx_sum_squares_2d_i16_neon((int16x4_t *)(v13 + 8304 * a1 + 8 * (a4 + v54 * a3)), 4 * v53, 4 * v57);
              }
              v144 = v61;
              v143 = 1;
              v108 = v137 * (double)(v56 * v56 * (uint64_t)v60 * 4 * (int)v123);
              v64 = v134;
              vp9_xform_quant(v13, v11, v134, a3, a4, v129, a6);
              v63 = a6;
              v26 = a7;
              if (v108 < (double)v61)
                goto LABEL_45;
              goto LABEL_43;
            }
            break;
          case 2u:
            if (v25 > 0.0)
            {
              v62 = *(double *)(v13 + 25608);
              vp9_xform_quant(v13, a1, a2, a3, a4, a5, a6);
              v63 = a6;
              v64 = v134;
              if (v62 > v25)
                goto LABEL_45;
              goto LABEL_43;
            }
            break;
          case 0u:
            vp9_xform_quant(v13, a1, a2, a3, a4, a5, a6);
LABEL_44:
            v63 = a6;
            v64 = v134;
LABEL_45:
            dist_block(*v26, v13, v11, v129, v64, a3, a4, v63, &v145, &v144, v17, v143);
            v32 = (_DWORD *)v133;
            goto LABEL_46;
        }
        vp9_xform_quant(v13, a1, a2, a3, a4, a5, a6);
        v63 = a6;
        v64 = v134;
LABEL_43:
        vp9_optimize_b(v13, v11, v64, v63, v132);
        goto LABEL_44;
      }
    }
    else
    {
      v27 = 0;
    }
    if (!v27 || v17 && v27 == 2)
      goto LABEL_21;
    v32 = (_DWORD *)(v13 + 25404);
    if (v27 != 2)
      goto LABEL_70;
    v33 = v13;
    v34 = v13 + 8304 * a1;
    v122 = *(_QWORD *)(v34 + 8200);
    v35 = *(_QWORD *)v19;
    v36 = v24;
    v37 = a4;
    v38 = (uint64_t)a7 + a3 + 32;
    v39 = v16;
    vp9_xform_quant_dc(v33, a1, a2, a3, v37, a5, a6);
    v24 = v36;
    v16 = v39;
    v15 = (BOOL *)v38;
    v40 = 16 * *(_QWORD *)(v33 + 8 * ((v134 >> (2 * a6)) + 4 * a1) + 82240);
    v144 = v40;
    v145 = v40;
    v41 = *(_QWORD *)(v34 + 8208);
    v13 = v33;
    v32 = (_DWORD *)v133;
    if (!*(_WORD *)(v41 + 2 * v134))
      goto LABEL_70;
    v42 = ((*(int *)(v122 + ((uint64_t)v134 << 6))
          - (uint64_t)*(int *)(v35 + ((uint64_t)v134 << 6))
          + *(int *)(v122 + ((uint64_t)v134 << 6)))
         * *(int *)(v35 + ((uint64_t)v134 << 6))) >> (2 * *(_BYTE *)(v133 + 132) - 16);
    if (a6 != 3)
      v42 >>= 2;
    v43 = (v40 - v42) & ~((v40 - v42) >> 63);
LABEL_69:
    v145 = v43;
    goto LABEL_70;
  }
  v132 = v24;
  v127 = v16;
  v128 = (uint64_t)a7 + a3 + 32;
  v113 = 4 * (a4 + (int)v20 * a3);
  v115 = v21;
  v119 = (__n128 *)(v21 + v113);
  v121 = v18;
  v30 = a5;
  vp9_encode_block_intra(a1, a2, a3, a4, a5, a6, v136);
  if (v17)
    v31 = copy_block_visible(v13 + 24912, *(_DWORD *)(v19 + 8), *(_DWORD *)(v19 + 12), v119, v20, (__n128 *)(*(_QWORD *)v17 + 4 * (a4 + *(_DWORD *)(v17 + 8) * a3)), *(_DWORD *)(v17 + 8), a3, a4, v30, v121);
  v32 = (_DWORD *)(v13 + 25404);
  if (!*(_DWORD *)(v13 + 25616))
  {
    v44 = v13 + 8304 * v11;
    v45 = *(unsigned int *)(v44 + 8224);
    v46 = *(_QWORD *)(v44 + 8216);
    if (!v143)
    {
      v47 = 4 * num_4x4_blocks_wide_lookup[v30];
      v117 = *(_QWORD *)(v44 + 8216);
      v48 = sum_squares_visible(*(_DWORD *)(v13 + 25404), *(_DWORD *)(v13 + 25412), *(_DWORD *)(v19 + 8), *(_DWORD *)(v19 + 12), (int16x4_t *)(v13 + 8304 * v11 + 8 * (a4 + v47 * a3)), v47, a3, a4, v30, v121, v147, &v146);
      v46 = v117;
      v144 = v48;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v13 + 25440) + 152) & 8) != 0)
    {
      v65 = *(_DWORD *)(v13 + 25536);
      v49 = v144;
      v50 = a6;
      v51 = v30;
      v52 = v119;
      if (v65 >= 9)
        v49 = (unint64_t)((1 << (2 * v65 - 17)) + v144) >> (2 * v65 - 16);
    }
    else
    {
      v49 = v144;
      v50 = a6;
      v51 = v30;
      v52 = v119;
    }
    v66 = 4 * (a4 + (int)v45 * a3);
    v144 = 16 * v49;
    v67 = *v26;
    v32 = (_DWORD *)(v13 + 25404);
    v68 = *(_DWORD *)v133;
    v69 = *(_DWORD *)(v13 + 25412);
    v71 = *(_DWORD *)(v19 + 8);
    v70 = *(_DWORD *)(v19 + 12);
    v147[0] = 0;
    if (v50
      && ((v72 = num_4x4_blocks_wide_lookup[v121],
           v73 = num_4x4_blocks_high_lookup[v121],
           v74 = (v68 >> (v71 + 5)) - a4 + num_4x4_blocks_wide_lookup[v51],
           v75 = (v69 >> (v70 + 5)) - a3 + num_4x4_blocks_high_lookup[v51],
           v74 < v72)
       || v75 < v73))
    {
      v77 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, int *, __n128))(v67 + 740488);
      v146 = 0;
      if (v75 >= v73)
        v78 = v73;
      else
        v78 = v75;
      if (v74 >= v72)
        v79 = v72;
      else
        v79 = v74;
      v130 = v78;
      v109 = v13;
      v112 = v26;
      if ((int)v78 < 1 || (int)v79 < 1)
      {
        v76 = 0;
      }
      else
      {
        v80 = 0;
        v81 = 0;
        v76 = 0;
        v82 = 0;
        v83 = v115 + v113;
        v114 = v46 + v66;
        v116 = v83;
        v124 = v79;
        do
        {
          v84 = v116 + v81;
          v85 = v79;
          v86 = v114 + v80;
          do
          {
            v77(v86, v45, v84, v20, &v146, v31);
            v76 += v146;
            v84 += 4;
            v86 += 4;
            --v85;
          }
          while (v85);
          ++v82;
          v81 += 4 * v20;
          v80 += 4 * v45;
          v79 = v124;
        }
        while (v82 != v130);
      }
      v13 = v109;
      v26 = v112;
      v32 = (_DWORD *)v133;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, __n128 *, uint64_t, int *, __n128))(v67 + (v121 << 6) + 740488))(v46 + v66, v45, v52, v20, v147, v31);
      v76 = v147[0];
    }
    v16 = v127;
    v15 = (BOOL *)v128;
    v24 = v132;
    v43 = 16 * v76;
    goto LABEL_69;
  }
  dist_block(*v26, v13, v11, v30, v134, a3, a4, a6, &v145, &v144, 0, v143);
LABEL_46:
  v16 = v127;
  v15 = (BOOL *)v128;
  v24 = v132;
LABEL_70:
  v87 = v145;
  if ((v145 << v32[57]) + v26[9] > v26[10])
    goto LABEL_82;
  v88 = v15;
  v89 = v16;
  v90 = cost_coeffs(v26[1], a1, v134, a6, v24, *(_QWORD *)v26[12], *(_QWORD *)(v26[12] + 16), *((_DWORD *)v26 + 23));
  v91 = (_QWORD *)(v13 + 8304 * a1 + 8208);
  *v89 = *(_WORD *)(*v91 + 2 * v134) != 0;
  *v88 = *(unsigned __int16 *)(*v91 + 2 * v134) != 0;
  v92 = v32[57];
  v93 = (int)v32[58] * (uint64_t)v90 + 256;
  v94 = (v87 << v92) + (v93 >> 9);
  v95 = v144;
  v96 = v144 << v92;
  if (v94 >= v144 << v92)
    v97 = v144 << v92;
  else
    v97 = (v87 << v92) + (v93 >> 9);
  if (!a1)
  {
    if (*(_WORD *)(*v91 + 2 * v134))
    {
      v98 = 0;
      v99 = v125;
      if (!v32[109] && v94 > v96)
        v98 = v32[34] == 0;
    }
    else
    {
      v98 = 1;
      v99 = v125;
    }
    *(_BYTE *)(v13 + (v99 << 8) + v134 + 25864) = v98;
    *(_DWORD *)(v13 + 4 * v99 + 26888) += *(unsigned __int16 *)(*v91 + 2 * v134);
  }
  *((_DWORD *)v26 + 12) += v90;
  v100 = v26[8];
  v26[7] += v87;
  v26[8] = v100 + v95;
  v101 = v26[10];
  v102 = v26[9] + v97;
  v26[9] = v102;
  if (v102 <= v101)
    *((_BYTE *)v26 + 104) &= *(unsigned __int16 *)(*v91 + 2 * v134) == 0;
  else
LABEL_82:
    *((_DWORD *)v26 + 22) = 1;
}

__n128 copy_block_visible(uint64_t a1, char a2, char a3, __n128 *a4, int a5, __n128 *a6, int a7, int a8, int a9, unsigned __int8 a10, unsigned __int8 a11)
{
  __n128 *v11;
  __n128 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __n128 result;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  __n128 *v37;
  __n128 *v38;
  uint64_t v39;
  int v40;
  __n128 v41;
  int v42;
  __n128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  int v47;
  __n128 *v48;
  __n128 *v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;

  v11 = a6;
  v12 = a4;
  v13 = num_4x4_blocks_wide_lookup[a11];
  v14 = num_4x4_blocks_high_lookup[a11];
  v15 = *(_DWORD *)(*(_QWORD *)(a1 + 528) + 152);
  if (!a11)
  {
    v28 = 4 * v14;
    if ((v15 & 8) == 0)
    {
      v29 = a5;
      v30 = a7;
      goto LABEL_27;
    }
    goto LABEL_29;
  }
  v16 = (*(int *)(a1 + 492) >> (a2 + 5)) - a9 + num_4x4_blocks_wide_lookup[a10];
  v17 = (*(int *)(a1 + 500) >> (a3 + 5)) - a8 + num_4x4_blocks_high_lookup[a10];
  if (v16 < v13 || v17 < v14)
  {
    if (v17 >= v14)
      v19 = num_4x4_blocks_high_lookup[a11];
    else
      v19 = v17;
    if (v16 >= v13)
      v20 = num_4x4_blocks_wide_lookup[a11];
    else
      v20 = v16;
    v57 = v20;
    if ((int)v19 >= 1 && (int)v20 >= 1)
    {
      v22 = a5;
      v23 = a7;
      if ((v15 & 8) != 0)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        v56 = v19;
        v54 = 4 * a7;
        v55 = 4 * a5;
        do
        {
          v58 = v36;
          v59 = v35;
          v60 = v34;
          v37 = (__n128 *)(2 * ((_QWORD)v11 + v35));
          v38 = (__n128 *)(2 * ((_QWORD)v12 + v34));
          v39 = v57;
          do
          {
            result.n128_u64[0] = vpx_highbd_convolve_copy_neon(v38, v22, v37, v23, 0, 0, 0, 0, 0, 4, 4).n128_u64[0];
            v37 = (__n128 *)((char *)v37 + 8);
            v38 = (__n128 *)((char *)v38 + 8);
            --v39;
          }
          while (v39);
          v36 = v58 + 1;
          v35 = v59 + v54;
          v34 = v60 + v55;
        }
        while (v58 + 1 != v56);
      }
      else
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        do
        {
          v27 = 0;
          do
          {
            a6->n128_u32[v25 / 4u + v27 / 4] = a4->n128_u32[v24 / 4u + v27 / 4];
            *(unsigned __int32 *)((char *)a6->n128_u32 + a7 + v25 + v27) = *(unsigned __int32 *)((char *)a4->n128_u32
                                                                                               + a5
                                                                                               + v24
                                                                                               + v27);
            *(unsigned __int32 *)((char *)a6->n128_u32 + 2 * a7 + v25 + v27) = *(unsigned __int32 *)((char *)a4->n128_u32 + 2 * a5 + v24 + v27);
            *(unsigned __int32 *)((char *)a6->n128_u32 + 2 * a7 + a7 + v25 + v27) = *(unsigned __int32 *)((char *)a4->n128_u32 + 2 * a5 + a5 + v24 + v27);
            v27 += 4;
          }
          while (4 * v57 != v27);
          ++v26;
          v25 += 4 * a7;
          v24 += 4 * a5;
        }
        while (v26 != v19);
      }
    }
    return result;
  }
  v28 = 4 * v14;
  if ((v15 & 8) != 0)
  {
LABEL_29:
    result.n128_u64[0] = vpx_highbd_convolve_copy_neon((__n128 *)(2 * (_QWORD)a4), a5, (__n128 *)(2 * (_QWORD)a6), a7, 0, 0, 0, 0, 0, 4 * v13, v28).n128_u64[0];
    return result;
  }
  v29 = a5;
  v30 = a7;
  if (a11 <= 1u)
  {
    do
    {
LABEL_27:
      v11->n128_u32[0] = v12->n128_u32[0];
      *(unsigned __int32 *)((char *)v11->n128_u32 + v30) = *(unsigned __int32 *)((char *)v12->n128_u32 + v29);
      v12 = (__n128 *)((char *)v12 + v29 + v29);
      v11 = (__n128 *)((char *)v11 + v30 + v30);
      v28 -= 2;
    }
    while (v28);
    return result;
  }
  if ((unint64_t)a11 - 2 > 2)
  {
    if (a11 > 7u)
    {
      if ((unint64_t)a11 - 8 >= 3)
      {
        v47 = -4 * v14;
        v48 = a4 + 2;
        v49 = a6 + 2;
        do
        {
          result = v48[-2];
          v50 = v48[-1];
          v51 = *v48;
          v52 = v48[1];
          v49[-2] = result;
          v49[-1] = v50;
          *v49 = v51;
          v49[1] = v52;
          v48 = (__n128 *)((char *)v48 + a5);
          v49 = (__n128 *)((char *)v49 + a7);
        }
        while (!__CFADD__(v47++, 1));
      }
      else
      {
        v42 = -4 * v14;
        do
        {
          result = *v12;
          v43 = v12[1];
          v44 = *(__int128 *)((char *)v12 + a5);
          v45 = *(__int128 *)((char *)&v12[1] + a5);
          *v11 = *v12;
          v11[1] = v43;
          v46 = (char *)v11 + a7;
          *(_OWORD *)v46 = v44;
          *((_OWORD *)v46 + 1) = v45;
          v11 = (__n128 *)&v46[a7];
          v12 = (__n128 *)((char *)v12 + a5 + (uint64_t)a5);
          v42 += 2;
        }
        while (v42);
      }
    }
    else
    {
      v40 = -4 * v14;
      do
      {
        result = *v12;
        v41 = *(__n128 *)((char *)v12 + a5);
        v12 = (__n128 *)((char *)v12 + a5 + (uint64_t)a5);
        *v11 = result;
        *(__n128 *)((char *)v11 + a7) = v41;
        v11 = (__n128 *)((char *)v11 + a7 + (uint64_t)a7);
        v40 += 2;
      }
      while (v40);
    }
  }
  else
  {
    v32 = -4 * v14;
    do
    {
      result.n128_u64[0] = v12->n128_u64[0];
      v33 = *(unint64_t *)((char *)v12->n128_u64 + a5);
      v12 = (__n128 *)((char *)v12 + a5 + (uint64_t)a5);
      v11->n128_u64[0] = result.n128_u64[0];
      *(unint64_t *)((char *)v11->n128_u64 + a7) = v33;
      v11 = (__n128 *)((char *)v11 + a7 + (uint64_t)a7);
      v32 += 2;
    }
    while (v32);
  }
  return result;
}

void dist_block(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10, uint64_t a11, int a12)
{
  int v12;
  int v13;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __n128 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  int16x8_t *v47;
  __n128 *v48;
  int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  int *v64;
  int v65;
  int v66;
  __n128 v67;
  _DWORD *v68;
  char v69;
  char v70;
  uint64_t v71;
  int32x4_t *v72;
  int32x4_t *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *);
  uint64_t v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  __n128 *v86;
  unsigned int v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  __n128 v93;
  __int128 v94;
  __int128 v95;
  __int128 *v96;
  __int128 v97;
  __int128 v98;
  __int128 *v99;
  __int128 v100;
  __int128 v101;
  __int128 *v102;
  __int128 v103;
  __int128 v104;
  __int128 *v105;
  __int128 v106;
  __int128 v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  __int128 *v111;
  __int128 v112;
  __int128 v113;
  __int128 *v114;
  __int128 v115;
  __int128 v116;
  __int128 *v117;
  __int128 v118;
  __int128 v119;
  __int128 *v120;
  __int128 v121;
  __int128 v122;
  __int128 *v123;
  __int128 v124;
  __int128 v125;
  __int128 *v126;
  __int128 v127;
  __int128 v128;
  __int128 *v129;
  __int128 v130;
  __int128 v131;
  __int128 *v132;
  __int128 v133;
  __int128 v134;
  __int128 *v135;
  __int128 v136;
  __int128 v137;
  __int128 *v138;
  __int128 v139;
  __int128 v140;
  __int128 *v141;
  __int128 v142;
  __int128 v143;
  __int128 *v144;
  __int128 v145;
  __int128 v146;
  __int128 *v147;
  __int128 v148;
  __int128 v149;
  __int128 *v150;
  __int128 v151;
  __int128 v152;
  __int128 *v153;
  __int128 v154;
  __int128 v155;
  __int128 *v156;
  __int128 v157;
  __int128 v158;
  __int128 *v159;
  __int128 v160;
  __int128 v161;
  __int128 *v162;
  __int128 v163;
  __int128 v164;
  __int128 *v165;
  __int128 v166;
  __int128 v167;
  __int128 *v168;
  __int128 v169;
  __int128 v170;
  __int128 *v171;
  __int128 v172;
  __int128 v173;
  __int128 *v174;
  __int128 v175;
  __int128 v176;
  __int128 *v177;
  __int128 v178;
  __int128 v179;
  __int128 *v180;
  __int128 v181;
  __int128 v182;
  __int128 *v183;
  __int128 v184;
  __int128 v185;
  __n128 *v186;
  int64x2_t v187;
  int64x2_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  uint32x4_t v192;
  char v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  __n128 *v200;
  __n128 v201;
  __n128 v202;
  int v203;
  int v204;
  int v205;
  int v206;
  __n128 *v207;
  __n128 *v208;
  __n128 *v209;
  __n128 v210;
  __n128 v211;
  __n128 v212;
  int v214;
  int v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  BOOL v221;
  void (*v222)(uint64_t, uint64_t, __n128 *, uint64_t, int *, __n128);
  int v223;
  unsigned int v224;
  uint64_t v225;
  __n128 *v226;
  uint64_t v227;
  __n128 *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int8x16_t v235;
  unsigned __int8 v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  char v240;
  int v242;
  int v243;
  int v244;
  uint64_t *v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __n128 *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int16x8_t *v259;
  __n128 *v260;
  __n128 *v261;
  uint64_t v262;
  int *v263;
  int v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  __n128 v269[2];
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;

  v12 = a7;
  v13 = a6;
  v16 = a11;
  v17 = a9;
  v332 = *MEMORY[0x24BDAC8D0];
  v18 = a2 + 25404;
  v19 = a2 + 24912;
  v21 = a2 + 24912 + 136 * a3;
  v22 = a5;
  v23 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8304 * a3 + 8208) + 2 * a5);
  if (a11 || (*(_DWORD *)(a2 + 25616) ? (v24 = (_DWORD)v23 == 0) : (v24 = 1), v24))
  {
    v256 = v22;
    v263 = (int *)(a2 + 25404);
    v25 = txsize_to_bsize[a8];
    v265 = num_4x4_blocks_wide_lookup[v25];
    v26 = a2 + 8304 * a3;
    v27 = *(unsigned int *)(v26 + 8224);
    v28 = v19 + 136 * a3;
    v29 = *(int *)(v28 + 24);
    v30 = 4 * (a7 + v29 * a6);
    v249 = 4 * (a7 + (int)v27 * a6);
    v250 = *(_QWORD *)(v26 + 8216);
    v31 = *(_QWORD *)(v28 + 16);
    v32 = v30;
    v33 = (__n128 *)(v31 + v30);
    v260 = v33;
    v262 = v25;
    v247 = v30;
    v248 = v31;
    v255 = *(_QWORD *)v21;
    if (a12)
    {
      v34 = 16 * *(unsigned int *)a10;
      *a10 = v34;
      if (a11)
        goto LABEL_9;
LABEL_15:
      v37 = a4;
      v253 = 0;
      v36 = v262;
      if (!(_DWORD)v23)
      {
LABEL_113:
        *v17 = v34;
        return;
      }
LABEL_16:
      v47 = (int16x8_t *)(v255 + (v256 << 6));
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 25440) + 152) & 8) == 0)
      {
        v48 = v260;
        if (a8)
        {
          v49 = v37;
          if ((unint64_t)(v36 - 2) > 2)
          {
            if (a8 == 3)
            {
              v61 = v36;
              if ((unint64_t)(v36 - 8) < 3)
              {
                v93 = v260[1];
                v94 = *(__int128 *)((char *)v260 + v29);
                v95 = *(__int128 *)((char *)&v260[1] + v29);
                v96 = (__int128 *)((char *)v260 + v29 + v29);
                v269[0] = *v260;
                v269[1] = v93;
                v270 = v94;
                v271 = v95;
                v97 = *v96;
                v98 = v96[1];
                v99 = (__int128 *)((char *)v96 + v29);
                v100 = *v99;
                v101 = v99[1];
                v102 = (__int128 *)((char *)v99 + v29);
                v272 = v97;
                v273 = v98;
                v274 = v100;
                v275 = v101;
                v103 = *v102;
                v104 = v102[1];
                v105 = (__int128 *)((char *)v102 + v29);
                v106 = *v105;
                v107 = v105[1];
                v108 = (__int128 *)((char *)v105 + v29);
                v276 = v103;
                v277 = v104;
                v278 = v106;
                v279 = v107;
                v109 = *v108;
                v110 = v108[1];
                v111 = (__int128 *)((char *)v108 + v29);
                v112 = *v111;
                v113 = v111[1];
                v114 = (__int128 *)((char *)v111 + v29);
                v280 = v109;
                v281 = v110;
                v282 = v112;
                v283 = v113;
                v115 = *v114;
                v116 = v114[1];
                v117 = (__int128 *)((char *)v114 + v29);
                v118 = *v117;
                v119 = v117[1];
                v120 = (__int128 *)((char *)v117 + v29);
                v284 = v115;
                v285 = v116;
                v286 = v118;
                v287 = v119;
                v121 = *v120;
                v122 = v120[1];
                v123 = (__int128 *)((char *)v120 + v29);
                v124 = *v123;
                v125 = v123[1];
                v126 = (__int128 *)((char *)v123 + v29);
                v288 = v121;
                v289 = v122;
                v290 = v124;
                v291 = v125;
                v127 = *v126;
                v128 = v126[1];
                v129 = (__int128 *)((char *)v126 + v29);
                v130 = *v129;
                v131 = v129[1];
                v132 = (__int128 *)((char *)v129 + v29);
                v292 = v127;
                v293 = v128;
                v294 = v130;
                v295 = v131;
                v133 = *v132;
                v134 = v132[1];
                v135 = (__int128 *)((char *)v132 + v29);
                v136 = *v135;
                v137 = v135[1];
                v138 = (__int128 *)((char *)v135 + v29);
                v296 = v133;
                v297 = v134;
                v298 = v136;
                v299 = v137;
                v139 = *v138;
                v140 = v138[1];
                v141 = (__int128 *)((char *)v138 + v29);
                v142 = *v141;
                v143 = v141[1];
                v144 = (__int128 *)((char *)v141 + v29);
                v300 = v139;
                v301 = v140;
                v302 = v142;
                v303 = v143;
                v145 = *v144;
                v146 = v144[1];
                v147 = (__int128 *)((char *)v144 + v29);
                v148 = *v147;
                v149 = v147[1];
                v150 = (__int128 *)((char *)v147 + v29);
                v304 = v145;
                v305 = v146;
                v306 = v148;
                v307 = v149;
                v151 = *v150;
                v152 = v150[1];
                v153 = (__int128 *)((char *)v150 + v29);
                v154 = *v153;
                v155 = v153[1];
                v156 = (__int128 *)((char *)v153 + v29);
                v308 = v151;
                v309 = v152;
                v310 = v154;
                v311 = v155;
                v157 = *v156;
                v158 = v156[1];
                v159 = (__int128 *)((char *)v156 + v29);
                v160 = *v159;
                v161 = v159[1];
                v162 = (__int128 *)((char *)v159 + v29);
                v312 = v157;
                v313 = v158;
                v314 = v160;
                v315 = v161;
                v163 = *v162;
                v164 = v162[1];
                v165 = (__int128 *)((char *)v162 + v29);
                v166 = *v165;
                v167 = v165[1];
                v168 = (__int128 *)((char *)v165 + v29);
                v316 = v163;
                v317 = v164;
                v318 = v166;
                v319 = v167;
                v169 = *v168;
                v170 = v168[1];
                v171 = (__int128 *)((char *)v168 + v29);
                v172 = *v171;
                v173 = v171[1];
                v174 = (__int128 *)((char *)v171 + v29);
                v320 = v169;
                v321 = v170;
                v322 = v172;
                v323 = v173;
                v175 = *v174;
                v176 = v174[1];
                v177 = (__int128 *)((char *)v174 + v29);
                v178 = *v177;
                v179 = v177[1];
                v180 = (__int128 *)((char *)v177 + v29);
                v324 = v175;
                v325 = v176;
                v326 = v178;
                v327 = v179;
                v181 = *v180;
                v182 = v180[1];
                v183 = (__int128 *)((char *)v180 + v29);
                v184 = *v183;
                v185 = v183[1];
                v328 = v181;
                v329 = v182;
                v330 = v184;
                v331 = v185;
                v64 = v263;
                v66 = 3;
LABEL_83:
                v186 = v269;
                vp9_idct32x32_add(v47, (uint64_t)v269, 32, v23);
                goto LABEL_91;
              }
              v206 = -4 * v265;
              v207 = (__n128 *)(v247 + v248 + 32);
              v208 = v269;
              v209 = v269;
              do
              {
                v210 = v207[-1];
                v211 = *v207;
                v212 = v207[1];
                *v208 = v207[-2];
                v208[1] = v210;
                v209[2] = v211;
                v209 += 2;
                v208[3] = v212;
                v207 = (__n128 *)((char *)v207 + v29);
                v208 = v209;
              }
              while (!__CFADD__(v206++, 1));
            }
            else
            {
              v199 = -4 * v265;
              v200 = v269;
              v61 = v36;
              do
              {
                v201 = *v48;
                v202 = *(__n128 *)((char *)v48 + v29);
                v48 = (__n128 *)((char *)v48 + v29 + v29);
                *v200 = v201;
                v200[2] = v202;
                v200 += 4;
                v199 += 2;
              }
              while (v199);
            }
          }
          else
          {
            v50 = *(uint64_t *)((char *)v260->n128_i64 + v29);
            v51 = (uint64_t *)((char *)v260 + v29 + v29);
            v269[0].n128_u64[0] = v260->n128_u64[0];
            *(_QWORD *)&v270 = v50;
            v52 = *v51;
            v53 = (uint64_t *)((char *)v51 + v29);
            v54 = *v53;
            v55 = (uint64_t *)((char *)v53 + v29);
            *(_QWORD *)&v272 = v52;
            *(_QWORD *)&v274 = v54;
            v56 = *v55;
            v57 = (uint64_t *)((char *)v55 + v29);
            v58 = *v57;
            v59 = (uint64_t *)((char *)v57 + v29);
            *(_QWORD *)&v276 = v56;
            *(_QWORD *)&v278 = v58;
            v60 = *(_QWORD *)((char *)v59 + v29);
            *(_QWORD *)&v280 = *v59;
            *(_QWORD *)&v282 = v60;
            v61 = v36;
          }
        }
        else
        {
          v85 = -4 * v265;
          v86 = v269;
          v49 = v37;
          v61 = v36;
          do
          {
            v86->n128_u32[0] = v48->n128_u32[0];
            v86[2].n128_u32[0] = *(unsigned __int32 *)((char *)v48->n128_u32 + v29);
            v48 = (__n128 *)((char *)v48 + v29 + v29);
            v86 += 4;
            v85 += 2;
          }
          while (v85);
        }
        v66 = a8;
        if (a8 == 1)
        {
          v64 = v263;
          v186 = v269;
          if ((_DWORD)v23 == 1)
          {
            v67.n128_u64[0] = (unint64_t)vpx_idct8x8_1_add_neon(v47->i16, (uint8x8_t *)v269, 32);
          }
          else if (v23 > 0xC)
          {
            v67.n128_u64[0] = (unint64_t)vpx_idct8x8_64_add_neon(v47, (uint8x8_t *)v269, 32);
          }
          else
          {
            v67.n128_u64[0] = (unint64_t)vpx_idct8x8_12_add_neon((int32x4_t *)v47, (uint8x8_t *)v269, 32);
          }
          goto LABEL_91;
        }
        v64 = v263;
        if (a8 == 2)
        {
          v186 = v269;
          vp9_idct16x16_add(v47, (uint64_t)v269, 32, v23);
          goto LABEL_91;
        }
        if (a8 != 3)
        {
          v186 = v269;
          (*(void (**)(int16x8_t *, __n128 *, uint64_t, uint64_t))(a2 + 82416))(v47, v269, 32, v23);
          goto LABEL_91;
        }
        goto LABEL_83;
      }
      v259 = (int16x8_t *)(v255 + (v256 << 6));
      v62 = v17;
      v63 = v23;
      v64 = v263;
      vpx_highbd_convolve_copy_neon((__n128 *)(2 * (_QWORD)v260), v29, v269, 32, 0, 0, 0, 0, 0, 4 * v265, 4 * v265);
      if (v263[34])
      {
        v65 = v263[33];
        v66 = a8;
        if (v63 < 2)
          vpx_highbd_iwht4x4_1_add_c(v259->i32, (unsigned __int16 *)v269, 32, v65);
        else
          vpx_highbd_iwht4x4_16_add_c(v259->i32, (unsigned __int16 *)v269, 32, v65);
        v17 = v62;
      }
      else
      {
        v66 = a8;
        v87 = v63;
        if (a8 != 2)
        {
          v17 = v62;
          if (a8 != 1)
          {
            v49 = v37;
            if (a8)
            {
              v205 = v263[33];
              v61 = v36;
              if (v87 == 1)
              {
                vpx_highbd_idct32x32_1_add_neon(v259->i32, (int16x8_t *)v269, 32, v205);
              }
              else if (v87 > 0x22)
              {
                if (v87 > 0x87)
                  vpx_highbd_idct32x32_1024_add_neon((uint64_t)v259, (uint64_t)v269);
                else
                  vpx_highbd_idct32x32_135_add_neon((uint64_t)v259, (uint64_t)v269);
              }
              else
              {
                vpx_highbd_idct32x32_34_add_neon((uint64_t)v259, (int16x8_t *)v269, 32, v205);
              }
            }
            else
            {
              v88 = v263[33];
              v61 = v36;
              if (v87 < 2)
              {
                v232 = vdupq_n_s16(~(-1 << v88));
                v233 = vdupq_n_s16((((unint64_t)(11585
                                                                    * (int)((unint64_t)(3036938240
                                                                                             * v259->i32[0]
                                                                                             + 0x80000000) >> 32)
                                                                    + 0x2000) >> 14)
                                  + 8) >> 4);
                v234.i64[0] = v269[0].n128_u64[0];
                v234.i64[1] = v272;
                v235 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v233, v234), v232), 0);
                v269[0].n128_u64[0] = v235.i64[0];
                *(_QWORD *)&v272 = vextq_s8(v235, v235, 8uLL).u64[0];
                v235.i64[0] = v276;
                v235.i64[1] = v280;
                v67 = (__n128)vqshluq_n_s16(vminq_s16(vqaddq_s16(v233, (int16x8_t)v235), v232), 0);
                *(_QWORD *)&v276 = v67.n128_u64[0];
                *(_QWORD *)&v280 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
              }
              else
              {
                v67 = (__n128)vpx_highbd_idct4x4_16_add_neon(v259, (uint64_t *)v269, 32, v88);
              }
            }
            goto LABEL_57;
          }
          v204 = v263[33];
          v49 = v37;
          if (v87 != 1)
          {
            v61 = v36;
            if (v87 > 0xC)
              v67 = (__n128)vpx_highbd_idct8x8_64_add_neon(v259, (int16x8_t *)v269, 32, v204);
            else
              v67 = (__n128)vpx_highbd_idct8x8_12_add_neon((int32x4_t *)v259, (int16x8_t *)v269, 32, v204);
            goto LABEL_57;
          }
          vpx_highbd_idct8x8_1_add_neon(v259->i32, (int16x8_t *)v269, 32, v204);
LABEL_56:
          v61 = v36;
LABEL_57:
          v186 = (__n128 *)((unint64_t)v269 >> 1);
LABEL_91:
          v214 = *v64;
          v215 = v64[2];
          v217 = *(_DWORD *)(v21 + 8);
          v216 = *(_DWORD *)(v21 + 12);
          v268 = 0;
          if (v66
            && ((v218 = num_4x4_blocks_high_lookup[v61],
                 LODWORD(v219) = (v214 >> (v217 + 5)) - v12 + num_4x4_blocks_wide_lookup[v49],
                 LODWORD(v220) = (v215 >> (v216 + 5)) - v13 + num_4x4_blocks_high_lookup[v49],
                 (int)v219 >= v265)
              ? (v221 = (int)v220 < v218)
              : (v221 = 1),
                v221))
          {
            v242 = v12;
            v244 = v13;
            v222 = *(void (**)(uint64_t, uint64_t, __n128 *, uint64_t, int *, __n128))(a1 + 740488);
            v267 = 0;
            if ((int)v220 >= v218)
              v220 = v218;
            else
              v220 = v220;
            if ((int)v219 >= v265)
              v219 = v265;
            else
              v219 = v219;
            v266 = v220;
            v245 = v17;
            v240 = v49;
            v238 = v21;
            v261 = v186;
            if ((int)v220 < 1 || (int)v219 < 1)
            {
              v224 = 0;
            }
            else
            {
              v223 = 0;
              v224 = 0;
              v225 = 0;
              v226 = v261;
              do
              {
                v227 = v250 + v249 + v223;
                v228 = v226;
                v229 = v219;
                v230 = v219;
                do
                {
                  v222(v227, v27, v228, 32, &v267, v67);
                  v224 += v267;
                  v228 = (__n128 *)((char *)v228 + 4);
                  v227 += 4;
                  --v230;
                }
                while (v230);
                ++v225;
                v226 += 8;
                v223 += 4 * v27;
                v219 = v229;
              }
              while (v225 != v266);
            }
            v17 = v245;
            v186 = v261;
            v12 = v242;
            v13 = v244;
            LOBYTE(v49) = v240;
            v21 = v238;
            v231 = a11;
            LOBYTE(v61) = v262;
            if (!a11)
              goto LABEL_112;
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, __n128 *, uint64_t, unsigned int *, __n128))(a1
                                                                                                + (v61 << 6)
                                                                                                + 740488))(v250 + v249, v27, v186, 32, &v268, v67);
            v224 = v268;
            v231 = a11;
            if (!a11)
            {
LABEL_112:
              v34 = 16 * v224;
              goto LABEL_113;
            }
          }
          copy_block_visible(v19, *(_DWORD *)(v21 + 8), *(_DWORD *)(v21 + 12), v186, 32, v253, *(_DWORD *)(v231 + 8), v13, v12, v49, v61);
          goto LABEL_112;
        }
        v203 = v263[33];
        v17 = v62;
        if (v87 != 1)
        {
          v49 = v37;
          if (v87 > 0xA)
          {
            v61 = v36;
            if (v87 > 0x26)
              vpx_highbd_idct16x16_256_add_neon(v259, (int16x8_t *)v269, 32, v203);
            else
              vpx_highbd_idct16x16_38_add_neon(v259, (int16x8_t *)v269, 32, v203);
            goto LABEL_57;
          }
          vpx_highbd_idct16x16_10_add_neon((int32x4_t *)v259, (int16x8_t *)v269, 32, v203);
          goto LABEL_56;
        }
        vpx_highbd_idct16x16_1_add_neon(v259->i32, (int16x8_t *)v269, 32, v203);
      }
      v49 = v37;
      goto LABEL_56;
    }
    v40 = *v263;
    v41 = *(_DWORD *)(a2 + 25412);
    v43 = *(_DWORD *)(v21 + 8);
    v42 = *(_DWORD *)(v21 + 12);
    v269[0].n128_u32[0] = 0;
    v246 = v23;
    if (a8
      && ((v44 = num_4x4_blocks_high_lookup[v25],
           v45 = (v40 >> (v43 + 5)) - a7 + num_4x4_blocks_wide_lookup[a4],
           LODWORD(v46) = (v41 >> (v42 + 5)) - v13 + num_4x4_blocks_high_lookup[a4],
           v45 < v265)
       || (int)v46 < v44))
    {
      v237 = v21;
      v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(a1 + 740488);
      v268 = 0;
      if ((int)v46 >= v44)
        v46 = v44;
      else
        v46 = v46;
      if (v45 >= v265)
        v77 = v265;
      else
        v77 = v45;
      v254 = v46;
      v243 = v13;
      v239 = a4;
      if ((int)v46 < 1 || (int)v77 < 1)
      {
        v80 = 0;
      }
      else
      {
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        v251 = v31 + v32;
        v252 = v77;
        do
        {
          v82 = v251 + v79;
          v83 = v77;
          v84 = v250 + v249 + v78;
          do
          {
            v76(v84, v27, v82, v29, &v268);
            v80 += v268;
            v82 += 4;
            v84 += 4;
            --v83;
          }
          while (v83);
          ++v81;
          v79 += 4 * v29;
          v78 += 4 * v27;
          v77 = v252;
        }
        while (v81 != v254);
      }
      v17 = a9;
      v12 = a7;
      v13 = v243;
      a4 = v239;
      v21 = v237;
      v33 = v260;
      v16 = a11;
      v23 = v246;
      v34 = 16 * v80;
      *a10 = v34;
      if (!a11)
        goto LABEL_15;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, __n128 *, uint64_t, __n128 *))(a1 + (v25 << 6) + 740488))(v250 + v249, v27, v33, v29, v269);
      v33 = v260;
      v16 = a11;
      v23 = v246;
      v34 = 16 * v269[0].n128_u32[0];
      *a10 = v34;
      if (!a11)
        goto LABEL_15;
    }
LABEL_9:
    v35 = *(_DWORD *)(v16 + 8);
    v36 = v262;
    v37 = a4;
    v236 = a4;
    v38 = v17;
    v39 = v23;
    v253 = (__n128 *)(*(_QWORD *)v16 + 4 * (v12 + v35 * v13));
    copy_block_visible(v19, *(_DWORD *)(v21 + 8), *(_DWORD *)(v21 + 12), v33, v29, v253, v35, v13, v12, v236, v262);
    v23 = v39;
    v17 = v38;
    if (!(_DWORD)v23)
      goto LABEL_113;
    goto LABEL_16;
  }
  v68 = (_DWORD *)(a2 + 82216);
  v69 = 2 * a8;
  v269[0].n128_u64[0] = 0;
  v70 = 2 * (a8 != 3);
  v71 = v22 << 6;
  v72 = (int32x4_t *)(*(_QWORD *)(a2 + 8304 * a3 + 8200) + v71);
  v73 = (int32x4_t *)(*(_QWORD *)v21 + v71);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 25440) + 152) & 8) == 0)
  {
    v74 = v19;
    v75 = (16 << v69);
    goto LABEL_48;
  }
  v89 = *(_DWORD *)(v18 + 132);
  v75 = (16 << v69);
  if (v89 == 8)
  {
    v74 = v19;
LABEL_48:
    v90 = vp9_block_error(v72, v73, v75, v269, v23);
    LOBYTE(v91) = 16;
    v92 = v269[0].n128_u64[0];
    v19 = v74;
    *a9 = v90 >> v70;
    *a10 = v92 >> v70;
    if (!*v68)
      return;
    goto LABEL_66;
  }
  v187 = 0uLL;
  v188 = 0uLL;
  do
  {
    v189 = *v72++;
    v190 = v189;
    v191 = *v73++;
    v192 = (uint32x4_t)vabdq_s32(v190, v191);
    v187 = (int64x2_t)vmlal_high_u32(vmlal_u32((uint64x2_t)v187, *(uint32x2_t *)v192.i8, *(uint32x2_t *)v192.i8), v192, v192);
    v188 = vmlal_high_s32(vmlal_s32(v188, *(int32x2_t *)v190.i8, *(int32x2_t *)v190.i8), v190, v190);
    v75 -= 4;
  }
  while (v75);
  v91 = 2 * v89;
  v193 = v91 - 16;
  v194 = 1 << (v91 - 17);
  if (v91 - 16 <= 0)
    v194 = 0;
  v195 = v194;
  v196 = (vaddvq_s64(v188) + v194) >> v193;
  v269[0].n128_u64[0] = v196;
  *a9 = (vaddvq_s64(v187) + v195) >> v193 >> v70;
  *a10 = v196 >> v70;
  if (*v68)
  {
LABEL_66:
    if (*(char *)(**(_QWORD **)(a2 + 25360) + 8) <= 0)
    {
      v197 = *(__int16 *)(*(_QWORD *)(v19 + 136 * a3 + 120) + 2);
      v198 = (v197 * v197) << v69 >> (v70 + v91 - 14);
      *a9 += v198 >> 4;
      *a10 += v198;
    }
  }
}

uint64_t sum_squares_visible(int a1, int a2, char a3, char a4, int16x4_t *a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, int *a11, _DWORD *a12)
{
  _DWORD *v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int16x4_t *v26;
  uint64_t v27;
  int v28;

  v15 = a11;
  v14 = a12;
  v16 = num_4x4_blocks_wide_lookup[a10];
  LODWORD(v17) = num_4x4_blocks_high_lookup[a10];
  if (a10
    && ((v18 = (a1 >> (a3 + 5)) - a8 + num_4x4_blocks_wide_lookup[a9],
         v19 = (a2 >> (a4 + 5)) - a7 + num_4x4_blocks_high_lookup[a9],
         v18 >= v16)
      ? (v20 = v19 < (int)v17)
      : (v20 = 1),
        v20))
  {
    if (v19 >= (int)v17)
      v17 = num_4x4_blocks_high_lookup[a10];
    else
      v17 = v19;
    if (v18 >= v16)
      v21 = num_4x4_blocks_wide_lookup[a10];
    else
      v21 = v18;
    if ((int)v17 < 1 || (int)v21 < 1)
    {
      v24 = 0;
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 4 * a6;
      do
      {
        v26 = (int16x4_t *)((char *)a5 + 2 * v22);
        v27 = v21;
        do
        {
          v24 += vpx_sum_squares_2d_i16_neon(v26++, a6, 4);
          --v27;
        }
        while (v27);
        ++v23;
        v22 += v25;
      }
      while (v23 != v17);
    }
    v28 = 4 * v21;
    v15 = a11;
    v14 = a12;
  }
  else
  {
    v28 = 4 * v16;
    v24 = vpx_sum_squares_2d_i16_neon(a5, a6, 4 * v16);
  }
  *v15 = v28;
  *v14 = 4 * v17;
  return v24;
}

uint64_t cost_coeffs(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int *v14;
  __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  _DWORD *v39;
  uint64_t v40;
  __int16 *v41;
  __int16 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  _BYTE v53[1024];
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 8304 * a2;
  v9 = *(unsigned __int16 *)(*(_QWORD *)(v8 + 8208) + 2 * a3);
  v10 = a1 + 13824 * a4 + 6912 * (a2 > 0) + 3456 * (*(char *)(**(_QWORD **)(a1 + 25360) + 8) > 0) + 26912;
  v11 = *(_DWORD *)(a1 + 25536);
  v12 = (unsigned __int16 *)&vp9_cat6_high12_high_cost;
  if (v11 == 10)
    v12 = (unsigned __int16 *)&vp9_cat6_high10_high_cost;
  if (v11 == 8)
    v13 = (unsigned __int16 *)&vp9_cat6_high_cost;
  else
    v13 = v12;
  if (!*(_WORD *)(*(_QWORD *)(v8 + 8208) + 2 * a3))
    return *(unsigned int *)(v10 + 48 * a5 + 44);
  v14 = (int *)(*(_QWORD *)(v8 + 0x2000) + ((uint64_t)a3 << 6));
  v15 = (__int16 *)((char *)&band_counts + 16 * a4 + 4);
  v16 = *v14;
  v17 = v16 - 67;
  if (a8)
  {
    if (v17 > 0xFFFFFF7A)
    {
      v19 = (unsigned __int16)vp9_dct_cat_lt_10_value_tokens[4 * v16];
      v18 = *((_DWORD *)vp9_dct_cat_lt_10_value_cost + v16);
    }
    else
    {
      if ((int)v16 < 0)
        LODWORD(v16) = -(int)v16;
      v18 = v13[(v16 - 67) >> 8] + vp9_cat6_low_cost[(v16 - 67)];
      v19 = 10;
    }
    LODWORD(result) = *(_DWORD *)(v10 + 48 * a5 + 4 * (__int16)v19) + v18;
    v53[0] = vp9_pt_energy_class[(__int16)v19];
    v24 = v10 + 576;
    if (v9 < 2)
    {
      v29 = v10 + 576;
      v34 = v19;
      goto LABEL_33;
    }
    v25 = v9 - 1;
    v26 = (__int16 *)(a6 + 2);
    v27 = 2;
    while (1)
    {
      v30 = *v26++;
      v31 = v14[v30];
      if ((v31 - 67) > 0xFFFFFF7A)
      {
        v34 = (unsigned __int16)vp9_dct_cat_lt_10_value_tokens[4 * v31];
        v33 = *((_DWORD *)vp9_dct_cat_lt_10_value_cost + v31);
        v19 = (unsigned __int16)v19 == 0;
        if (--v27)
          goto LABEL_30;
      }
      else
      {
        if ((int)v31 >= 0)
          v32 = v31;
        else
          v32 = -(int)v31;
        v33 = v13[(v32 - 67) >> 8] + vp9_cat6_low_cost[(v32 - 67)];
        v34 = 10;
        v19 = (unsigned __int16)v19 == 0;
        if (--v27)
        {
LABEL_30:
          v29 = v24;
          goto LABEL_22;
        }
      }
      v28 = *v15++;
      v27 = v28;
      v29 = v24 + 576;
LABEL_22:
      result = (v33 + result + *(_DWORD *)(v24 + 288 * v19 + 48 * v19 + 4 * (__int16)v34));
      v24 = v29;
      LOWORD(v19) = v34;
      if (!--v25)
      {
        if (v27)
        {
LABEL_33:
          v35 = v29 + 48 * (v34 == 0);
          return (*(_DWORD *)(v35 + 44) + result);
        }
        return result;
      }
    }
  }
  if (v17 > 0xFFFFFF7A)
  {
    v23 = (unsigned __int16)vp9_dct_cat_lt_10_value_tokens[4 * v16];
    v22 = *((_DWORD *)vp9_dct_cat_lt_10_value_cost + v16);
  }
  else
  {
    if ((int)v16 >= 0)
      v21 = *v14;
    else
      v21 = -(int)v16;
    v22 = v13[(v21 - 67) >> 8] + vp9_cat6_low_cost[(v21 - 67)];
    v23 = 10;
  }
  LODWORD(result) = *(_DWORD *)(v10 + 48 * a5 + 4 * (__int16)v23) + v22;
  v53[0] = vp9_pt_energy_class[(__int16)v23];
  v36 = v10 + 576;
  if (v9 < 2)
  {
    v52 = 2;
  }
  else
  {
    v37 = v10 + 288 * (v23 == 0) + 576;
    v38 = vp9_dct_cat_lt_10_value_tokens;
    v39 = vp9_dct_cat_lt_10_value_cost;
    v40 = v9 - 1;
    v41 = (__int16 *)(a7 + 6);
    v42 = (__int16 *)(a6 + 2);
    v43 = 2;
    do
    {
      v45 = *v42++;
      v44 = v45;
      v46 = v14[v45];
      if ((v46 - 67) > 0xFFFFFF7A)
      {
        v49 = (unsigned __int16)v38[4 * v46];
        v48 = v39[v46];
      }
      else
      {
        if ((int)v46 >= 0)
          v47 = v46;
        else
          v47 = -(int)v46;
        v48 = v13[(v47 - 67) >> 8] + vp9_cat6_low_cost[(v47 - 67)];
        v49 = 10;
      }
      v50 = *(_DWORD *)(v37
                      + 48
                      * ((v53[*(v41 - 1)]
                                      + (unint64_t)v53[*v41]
                                      + 1) >> 1)
                      + 4 * (__int16)v49);
      v53[v44] = vp9_pt_energy_class[(__int16)v49];
      if (!--v43)
      {
        v51 = *v15++;
        v43 = v51;
        v36 += 576;
      }
      result = (v48 + result + v50);
      v37 = v36 + 288 * (v49 == 0);
      v41 += 2;
      --v40;
    }
    while (v40);
    if (!v43)
      return result;
    v52 = 2 * v9;
  }
  v35 = v36
      + 48
      * ((v53[*(__int16 *)(a7 + 2 * v52)]
                      + (unint64_t)v53[*(__int16 *)(a7 + 2 * (v52 | 1))]
                      + 1) >> 1);
  return (*(_DWORD *)(v35 + 44) + result);
}

uint64_t average_split_mvs(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_208C39670
                            + 4 * byte_208F4BFB8[(*(_DWORD *)(a1 + 12) > 0) | (2 * (*(_DWORD *)(a1 + 8) > 0))]))();
}

uint64_t sub_208C39670(uint64_t a1, uint64_t a2, int a3, int a4)
{
  return *(unsigned int *)(a2 + 12 * a4 + 4 * a3 + 24);
}

uint64_t sub_208C39684(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 *v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v4 = (__int16 *)(a2 + 12 * a4 + 4 * a3);
  v5 = v4[18] + v4[12];
  v6 = (v5 >> 31) | 1;
  v7 = __OFADD__(v6, v5);
  v8 = v6 + v5;
  if (v8 < 0 != v7)
    ++v8;
  v9 = v4[19] + v4[13];
  v10 = (v9 >> 31) | 1;
  v7 = __OFADD__(v10, v9);
  v11 = v10 + v9;
  if (v11 < 0 != v7)
    ++v11;
  return (v11 << 15) & 0xFFFF0000 | (unsigned __int16)(v8 >> 1);
}

uint64_t build_inter_predictors_for_planes(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;

  if (a5 <= a6)
  {
    v6 = result;
    v7 = 8 * a4;
    v8 = 8 * a3;
    v9 = a5;
    v20 = a6 + 1;
    v19 = &ss_size_lookup[4 * a2];
    do
    {
      v10 = v19[2 * *(int *)(v6 + 136 * v9 + 8) + *(int *)(v6 + 136 * v9 + 12)];
      v11 = num_4x4_blocks_high_lookup[v10];
      v12 = 4 * num_4x4_blocks_wide_lookup[v10];
      v13 = 4 * v11;
      if (***(unsigned __int8 ***)(v6 + 448) > 2u)
      {
        result = build_inter_predictors(v6, v9, 0, v12, 4 * v11, 0, 0, v12, 4 * v11, v7, v8);
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v21 = v11;
        do
        {
          v16 = 0;
          v22 = v14;
          v17 = 4 * v14;
          do
          {
            v18 = v15;
            v15 = (v15 + 1);
            result = build_inter_predictors(v6, v9, v18, v12, v13, v16, v17, 4, 4, v7, v8);
            v16 += 4;
          }
          while ((_DWORD)v12 != v16);
          v14 = v22 + 1;
        }
        while (v22 + 1 != v21);
      }
      ++v9;
    }
    while (v20 != (_DWORD)v9);
  }
  return result;
}

uint64_t vp9_setup_pre_planes(uint64_t result, int a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  if (a3)
  {
    v7 = (_DWORD *)result;
    v9 = *(_QWORD *)(a3 + 56);
    v8 = *(_QWORD *)(a3 + 64);
    v10 = *(_DWORD *)(a3 + 16);
    v29 = *(_DWORD *)(a3 + 36);
    v11 = a2;
    v12 = *(_QWORD *)(a3 + 72);
    v13 = 8 * a5;
    v14 = 8 * a4;
    if (a6)
    {
      v15 = (v14 >> *(_DWORD *)(result + 12));
      v27 = *(_QWORD *)(a3 + 64);
      v28 = *(_QWORD *)(a3 + 72);
      v16 = (*(uint64_t (**)(_QWORD, uint64_t))(a6 + 16))((v13 >> *(_DWORD *)(result + 8)), a6);
      v17 = v9 + v16 + v10 * (uint64_t)(*(int (**)(uint64_t, uint64_t))(a6 + 24))(v15, a6);
      v18 = &v7[4 * v11];
      *((_QWORD *)v18 + 4) = v17;
      v18[10] = v10;
      v19 = (v14 >> v7[37]);
      v20 = (*(uint64_t (**)(_QWORD, uint64_t))(a6 + 16))((v13 >> v7[36]), a6);
      v21 = v29;
      v22 = v29;
      *((_QWORD *)v18 + 21) = v27 + v20 + v29 * (uint64_t)(*(int (**)(uint64_t, uint64_t))(a6 + 24))(v19, a6);
      v18[44] = v29;
      v23 = (v14 >> v7[71]);
      v24 = (*(uint64_t (**)(_QWORD, uint64_t))(a6 + 16))((v13 >> v7[70]), a6);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(v23, a6);
      v12 = v28;
    }
    else
    {
      v25 = result + 16 * a2;
      *(_QWORD *)(v25 + 32) = v9 + (v13 >> *(_DWORD *)(result + 8)) + v10 * (uint64_t)(v14 >> *(_DWORD *)(result + 12));
      *(_DWORD *)(v25 + 40) = v10;
      v21 = v29;
      v22 = v29;
      *(_QWORD *)(v25 + 168) = v8
                             + (v13 >> *(_DWORD *)(result + 144))
                             + v29 * (uint64_t)(v14 >> *(_DWORD *)(result + 148));
      *(_DWORD *)(v25 + 176) = v29;
      v24 = v13 >> *(_DWORD *)(result + 280);
      result = (v14 >> *(_DWORD *)(result + 284));
    }
    v26 = &v7[4 * v11];
    *((_QWORD *)v26 + 38) = v12 + v24 + v22 * (uint64_t)(int)result;
    v26[78] = v21;
  }
  return result;
}

uint64_t build_inter_predictors(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int *v15;
  char v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  uint64_t *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _DWORD *v65;
  _DWORD *v66;
  uint64_t v67;
  int *v69;
  uint64_t *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t v73;
  _DWORD v74[3];
  __int128 v75;
  uint64_t v76;
  uint64_t v77;

  v12 = 0;
  v77 = *MEMORY[0x24BDAC8D0];
  v73 = a2;
  v13 = a1 + 136 * a2;
  v14 = **(unsigned __int8 ***)(a1 + 448);
  v71 = (uint64_t)*(&vp9_filter_kernels + v14[7]);
  v70 = (uint64_t *)(v13 + 16);
  v15 = (int *)(v13 + 24);
  v67 = a6;
  v66 = (_DWORD *)(v13 + 8);
  v59 = v13;
  v65 = (_DWORD *)(v13 + 12);
  v64 = 16 * a4;
  v62 = (char)v14[9];
  v63 = 16 * a4 + 48;
  v61 = 16 * a5;
  v60 = 16 * a5 + 48;
  v51 = 16 * (a11 + a7);
  v52 = 16 * (a10 + a6);
  v16 = 1;
  v72 = v14;
  v69 = (int *)(v13 + 24);
  do
  {
    v19 = *(_QWORD *)(a1 + 8 * v12 + 512);
    v20 = *v70;
    v21 = *v15;
    if (*v14 > 2u)
    {
      v23 = *(_DWORD *)&v14[4 * v12 + 12];
    }
    else
    {
      v22 = *v70;
      v23 = average_split_mvs(v59);
      v20 = v22;
    }
    v24 = (_DWORD *)(v19 + 16);
    v25 = (uint64_t *)(a1 + 136 * (int)v73 + 16 * v12 + 32);
    v26 = v23 << (1 - *v65);
    v27 = *(_DWORD *)(a1 + 488);
    v28 = v63 + (*(_DWORD *)(a1 + 492) << (1 - *v66));
    v29 = *(_DWORD *)(a1 + 496);
    v30 = v60 + (*(_DWORD *)(a1 + 500) << (1 - *v65));
    v31 = (__int16)(HIWORD(v23) << (1 - *v66));
    if (v31 < v28)
      LOWORD(v28) = HIWORD(v23) << (1 - *v66);
    if (v31 >= (v27 << (1 - *v66)) - v64 - 64)
      v32 = v28;
    else
      v32 = ((_WORD)v27 << (1 - *v66)) - v64 - 64;
    if ((__int16)v26 < v30)
      LOWORD(v30) = v23 << (1 - *v65);
    if ((__int16)v26 >= (v29 << (1 - *v65)) - v61 - 64)
      v33 = v30;
    else
      v33 = ((_WORD)v29 << (1 - *v65)) - v61 - 64;
    if (*v24 == -1 || (v34 = *(_DWORD *)(v19 + 20), v34 == -1) || *v24 == 0x4000 && v34 == 0x4000)
    {
      v35 = *(_DWORD *)(a1 + 136 * (int)v73 + 16 * v12 + 40);
      v37 = v67;
      v36 = a7;
      v38 = *v25 + v67 + v35 * (uint64_t)a7;
      v39 = v33;
      v40 = v32;
      v41 = 16;
    }
    else
    {
      v45 = -v27 >> (*v66 + 3);
      v46 = -v29 >> (*v65 + 3);
      v47 = *(_QWORD *)(v19 + 8);
      v75 = *(_OWORD *)(v47 + 56);
      v76 = *(_QWORD *)(v47 + 72);
      v48 = *(_DWORD *)(v47 + 16);
      LODWORD(v47) = *(_DWORD *)(v47 + 36);
      v74[0] = v48;
      v74[1] = v47;
      v74[2] = v47;
      *v25 = *((_QWORD *)&v75 + v73);
      v57 = v74[v73];
      v58 = a1 + 136 * (int)v73 + 16 * v12;
      *(_DWORD *)(v58 + 40) = v57;
      v56 = v46 + a7;
      v49 = v20;
      v55 = (*(uint64_t (**)(_QWORD, uint64_t))(v19 + 32))((v45 + a6), v19 + 16);
      v50 = (*(uint64_t (**)(_QWORD, uint64_t))(v19 + 40))(v56, v19 + 16);
      v20 = v49;
      v38 = *v25 + v55 + v57 * (uint64_t)v50;
      *v25 = v38;
      v39 = (((v51 * *(_DWORD *)(v19 + 20)) >> 14) & 0xF)
          + ((unint64_t)(v33 * (uint64_t)*(int *)(v19 + 20)) >> 14);
      v40 = (((v52 * *(_DWORD *)(v19 + 16)) >> 14) & 0xF)
          + ((unint64_t)(v32 * (uint64_t)*(int *)(v19 + 16)) >> 14);
      v41 = *(unsigned int *)(v19 + 24);
      v35 = *(_DWORD *)(v58 + 40);
      v37 = v67;
      v36 = a7;
    }
    v42 = v40 & 0xF;
    v43 = v39 & 0xF;
    v44 = v38 + (v39 >> 4) * v35 + (v40 >> 4);
    v15 = v69;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 528) + 152) & 8) != 0)
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v19 + 32 * ((_DWORD)v42 != 0) + 16 * (v43 != 0) + 8 * v12 + 112))(2 * v44, v35, 2 * (v20 + v21 * (uint64_t)v36 + v37), *v69, v71, v42, v41);
    else
      result = (*(uint64_t (**)(uint64_t, _QWORD))(v19
                                                          + 32 * ((_DWORD)v42 != 0)
                                                          + 16 * (v43 != 0)
                                                          + 8 * v12
                                                          + 48))(v44, v35);
    v18 = (v62 > 0) & v16;
    v12 = 1;
    v16 = 0;
    v14 = v72;
  }
  while ((v18 & 1) != 0);
  return result;
}

uint64_t vp9_predict_intra_block(uint64_t a1, char a2, unsigned int a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v11;
  unsigned int v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  _BYTE *v45;
  uint64_t v46;
  _WORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  _BYTE *v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  _BYTE *v60;
  unsigned int v61;
  unint64_t v62;
  char *v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  _WORD *v82;
  unsigned int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL4 v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  _WORD *v97;
  char *v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  _BOOL4 v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  BOOL v112;
  int v113;
  _BYTE *v114;
  _BOOL4 v115;
  uint64_t v116;
  size_t v117;
  _BYTE *v118;
  uint64_t *v119;
  char v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  _BOOL4 v126;
  _BYTE *v127;
  _BYTE *v128;
  uint64_t v129;
  char v130;
  _WORD *v131;
  char *v132;
  uint64_t v133;
  _BOOL4 v134;
  uint64_t v135;
  int16x8_t v136;
  int16x8_t *v137;
  unint64_t v138;
  unint64_t v139;
  BOOL v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  _BOOL4 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _WORD *v151;
  unsigned int v152;
  int v153;
  unint64_t v154;
  _BOOL4 v155;
  uint64_t v156;
  uint64_t v157;
  size_t v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  _BOOL4 v163;
  uint64_t v164;
  _WORD *v165;
  unsigned int v166;
  unint64_t v167;
  int16x8_t v168;
  int16x8_t *v169;
  unint64_t v170;
  unint64_t v171;
  int16x8_t v172;
  int16x8_t *v173;
  unint64_t v174;
  uint64_t v175;
  _BOOL4 v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  _BYTE *v180;
  size_t v181;
  int v182;
  size_t v183;
  uint64_t v184;
  _BOOL4 v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  _WORD *v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  signed int v194;
  unsigned int v195;
  _WORD *v196;
  unint64_t v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  unint64_t v201;
  _BYTE *v202;
  _BYTE *v203;
  uint64_t v204;
  char v205;
  uint64_t v206;
  _BYTE *v207;
  _BYTE *v208;
  _BOOL4 v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int16x8_t v215;
  int16x8_t *v216;
  unint64_t v217;
  unint64_t v218;
  BOOL v219;
  size_t v220;
  uint64_t v222;
  signed int v223;
  unsigned int v224;
  _WORD *v225;
  unint64_t v226;
  int16x8_t v227;
  int16x8_t *v228;
  unint64_t v229;
  uint64_t v230;
  _WORD *v231;
  int16x8_t v232;
  int16x8_t *v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int16x8_t v237;
  int16x8_t *v238;
  unint64_t v239;
  unint64_t v240;
  int16x8_t v241;
  int16x8_t *v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int16x8_t v246;
  int16x8_t *v247;
  unint64_t v248;
  unint64_t v249;
  int16x8_t v250;
  int16x8_t *v251;
  unint64_t v252;
  unint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  int v256;
  int v257;
  _BOOL4 v258;
  _BOOL4 v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  char v266;
  int v267;
  int v268;
  unsigned int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  __int16 v274;
  __int16 v275;
  unsigned int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  int v285;
  int v286;
  int v287;
  int v288;
  int v289;
  int v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  int v298;
  uint64_t v299;
  _BYTE v301[15];
  char v302;
  _BYTE v303[14];
  __int16 v304;
  _BYTE v305[16];
  _WORD v306[56];
  char v307;
  _BYTE v308[15];
  _WORD v309[24];
  uint64_t v310;

  v11 = a8;
  v12 = a4;
  v13 = a1;
  v310 = *MEMORY[0x24BDAC8D0];
  v14 = 1;
  if (a10)
  {
    v15 = 1 << a3;
    if (a9)
    {
LABEL_3:
      v16 = 1;
      goto LABEL_6;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 464) != 0;
    v15 = 1 << a3;
    if (a9)
      goto LABEL_3;
  }
  v16 = *(_QWORD *)(a1 + 456) != 0;
LABEL_6:
  v17 = 1 << a2;
  v18 = v15 + a9;
  v19 = 4 * a9;
  v20 = 4 * a10;
  v21 = *(_QWORD *)(v13 + 528);
  if ((*(_BYTE *)(v21 + 152) & 8) == 0)
  {
    v22 = 4;
    v23 = 4 << a3;
    v24 = 20;
    if (a11)
      v22 = 24;
    else
      v24 = 0;
    v25 = *(int *)(v21 + v24);
    v26 = v13 + 136 * a11;
    v27 = -*(_DWORD *)(v13 + 488) >> (*(_BYTE *)(v26 + 8) + 3);
    v28 = v12;
    if (((0x10AuLL >> v12) & 1) != 0)
      goto LABEL_35;
    if (!v16)
    {
      v276 = v12;
      v284 = v17;
      v293 = v12;
      v270 = v18;
      v50 = *(int *)(v21 + v24);
      v51 = a7;
      v52 = a6;
      v53 = a5;
      v54 = -*(_DWORD *)(v13 + 488) >> (*(_BYTE *)(v26 + 8) + 3);
      __memset_chk();
      v27 = v54;
      v25 = v50;
      v23 = 4 << a3;
      a5 = v53;
      a6 = v52;
      v19 = 4 * a9;
      v17 = v284;
      v18 = v270;
      v28 = v293;
      v12 = v276;
      v16 = 0;
      a7 = v51;
      goto LABEL_35;
    }
    if ((*(_DWORD *)(v13 + 500) & 0x80000000) == 0)
    {
      if (v23 >= 1)
      {
        v29 = (_BYTE *)(a5 - 1);
        v30 = v308;
        v31 = (4 << a3);
        do
        {
          v32 = v29[a6];
          *(v30 - 1) = *v29;
          *v30 = v32;
          v30 += 2;
          v29 += 2 * a6;
          v31 -= 2;
        }
        while (v31);
      }
      goto LABEL_35;
    }
    v73 = *(_DWORD *)(v21 + v22);
    v74 = (-*(_DWORD *)(v13 + 496) >> (*(_DWORD *)(v26 + 12) + 3)) + v20;
    if (v74 + v23 <= v73)
    {
      if (v23 >= 1)
      {
        v127 = (_BYTE *)(a5 - 1);
        v128 = v308;
        v129 = (4 << a3);
        do
        {
          v130 = v127[a6];
          *(v128 - 1) = *v127;
          *v128 = v130;
          v128 += 2;
          v127 += 2 * a6;
          v129 -= 2;
        }
        while (v129);
      }
LABEL_35:
      v55 = v27 + v19;
      v56 = v303;
      if (((0x18CuLL >> v28) & 1) != 0)
        goto LABEL_75;
      if (!v14)
      {
        v277 = v12;
        v285 = v17;
        v64 = 127;
        v294 = v28;
        v271 = v18;
        v65 = v23;
        v66 = v25;
        v67 = a7;
        v68 = v16;
        v69 = a6;
        v70 = a5;
        v71 = v13;
        v72 = v55;
        __memset_chk();
        v55 = v72;
        v13 = v71;
        v25 = v66;
        v23 = v65;
        a5 = v70;
        a6 = v69;
        v17 = v285;
        v14 = 0;
        v18 = v271;
        v28 = v294;
        v12 = v277;
        v16 = v68;
        a7 = v67;
        goto LABEL_73;
      }
      v57 = a5 - a6;
      if ((*(_DWORD *)(v13 + 492) & 0x80000000) != 0)
      {
        v100 = v55 + v23;
        if (v55 + v23 > (int)v25)
        {
          if ((int)v25 >= v55)
          {
            v272 = v25 - v55;
            v279 = v23;
            v288 = v17;
            v101 = v25;
            v262 = a7;
            v259 = v16;
            v295 = v28;
            v257 = a6;
            v102 = a5;
            v103 = v55;
            __memcpy_chk();
            memset(&v303[(int)v272], v303[v272 - 1], v100 - (int)v101);
            v55 = v103;
            v25 = v101;
            v23 = v279;
            a5 = v102;
            a6 = v257;
            v28 = v295;
            v17 = v288;
            v16 = v259;
            a7 = v262;
          }
          goto LABEL_69;
        }
      }
      else if (v18 < v17 && !a3)
      {
        v56 = (_BYTE *)(a5 - a6);
        if (v16)
          goto LABEL_70;
      }
      v280 = v12;
      v289 = v17;
      v296 = v28;
      v273 = v18;
      v104 = v23;
      v105 = v25;
      v106 = a7;
      v107 = v16;
      v108 = a6;
      v109 = a5;
      v110 = v55;
      __memcpy_chk();
      v55 = v110;
      v25 = v105;
      v23 = v104;
      a5 = v109;
      a6 = v108;
      v17 = v289;
      v18 = v273;
      v28 = v296;
      v12 = v280;
      v16 = v107;
      a7 = v106;
LABEL_69:
      v56 = v303;
      if (v16)
      {
LABEL_70:
        v64 = *(_BYTE *)(v57 - 1);
LABEL_74:
        v302 = v64;
LABEL_75:
        if (!v12)
        {
          v119 = &_MergedGlobals_24[8 * (unint64_t)v16 + 16 + 4 * v14 + a3];
          return ((uint64_t (*)(uint64_t, _QWORD, _BYTE *, char *))*v119)(a7, a8, v56, &v307);
        }
        if (v12 != 8 && v12 != 3)
        {
LABEL_197:
          v119 = &_MergedGlobals_24[4 * v28 + 72 + a3];
          return ((uint64_t (*)(uint64_t, _QWORD, _BYTE *, char *))*v119)(a7, a8, v56, &v307);
        }
        if (!v14)
        {
          v120 = 127;
          v121 = a7;
          __memset_chk();
          a7 = v121;
LABEL_196:
          v302 = v120;
          goto LABEL_197;
        }
        v111 = a5 - a6;
        if ((*(_DWORD *)(v13 + 492) & 0x80000000) == 0)
        {
          if (a3)
            v112 = 0;
          else
            v112 = v18 < v17;
          v113 = v112;
          if (v113 == 1)
          {
            v114 = (_BYTE *)(a5 - a6);
            if (v16)
              goto LABEL_165;
          }
          v115 = v16;
          v116 = a7;
          v117 = v23;
          __memcpy_chk();
          v118 = &v303[v117];
          if (v113)
            memcpy(v118, (const void *)(v111 + v117), v117);
          else
            memset(v118, v303[v117 - 1], v117);
          a7 = v116;
          if (!v115)
            goto LABEL_195;
LABEL_164:
          v114 = v56;
LABEL_165:
          v120 = *(_BYTE *)(v111 - 1);
          v56 = v114;
          goto LABEL_196;
        }
        v122 = v55 + (8 << a3);
        if (v122 <= (int)v25)
        {
          v134 = v16;
          v135 = a7;
          if (a3 || v18 >= v17)
          {
            v183 = v23;
            __memcpy_chk();
            memset(&v303[v183], v303[v183 - 1], v183);
          }
          else
          {
            __memcpy_chk();
          }
          a7 = v135;
          v16 = v134;
        }
        else
        {
          if (v55 + v23 <= (int)v25)
          {
            v176 = v16;
            v177 = a7;
            if (a3 || v18 >= v17)
            {
              v220 = v23;
              __memcpy_chk();
              v180 = &v303[v220];
              v182 = v303[v220 - 1];
              v181 = v220;
            }
            else
            {
              v178 = v25 - v55;
              v179 = v25;
              __memcpy_chk();
              v180 = &v303[v178];
              v181 = v122 - v179;
              v182 = v303[(int)v178 - 1];
            }
            memset(v180, v182, v181);
            a7 = v177;
            if (!v176)
              goto LABEL_195;
            goto LABEL_164;
          }
          if ((int)v25 >= v55)
          {
            v123 = v25 - v55;
            v124 = v25;
            v125 = a7;
            v126 = v16;
            __memcpy_chk();
            memset(&v303[v123], v303[(int)v123 - 1], v122 - v124);
            a7 = v125;
            if (v126)
              goto LABEL_164;
LABEL_195:
            v120 = -127;
            goto LABEL_196;
          }
        }
        if (v16)
          goto LABEL_164;
        goto LABEL_195;
      }
      v64 = -127;
LABEL_73:
      v56 = v303;
      goto LABEL_74;
    }
    v75 = (v73 - v74);
    if ((int)v75 < 1)
    {
      v198 = 0;
      goto LABEL_184;
    }
    if ((_DWORD)v75 == 1)
    {
      v76 = 0;
    }
    else
    {
      v76 = v75 & 0xFFFFFFFE;
      v202 = (_BYTE *)(a5 - 1);
      v203 = v308;
      v204 = v76;
      do
      {
        v205 = v202[a6];
        *(v203 - 1) = *v202;
        *v203 = v205;
        v203 += 2;
        v202 += 2 * a6;
        v204 -= 2;
      }
      while (v204);
      if (v76 == v75)
        goto LABEL_183;
    }
    v206 = v75 - v76;
    v207 = &v308[v76 - 1];
    v208 = (_BYTE *)(a5 + v76 * a6 - 1);
    do
    {
      *v207++ = *v208;
      v208 += a6;
      --v206;
    }
    while (v206);
LABEL_183:
    v198 = v75;
LABEL_184:
    if (v198 < v23)
    {
      v290 = v17;
      v283 = 4 << a3;
      v264 = a7;
      v209 = v16;
      v210 = a6;
      v211 = a5;
      v212 = v25;
      v213 = v27;
      memset(&v308[v198 - 1], *(unsigned __int8 *)(a5 + ((int)v75 - 1) * a6 - 1), (v23 + ~v198) + 1);
      v27 = v213;
      v25 = v212;
      v23 = v283;
      a5 = v211;
      a6 = v210;
      v28 = v12;
      v17 = v290;
      v16 = v209;
      a7 = v264;
    }
    goto LABEL_35;
  }
  v33 = 2 * a5;
  v34 = v305;
  v35 = 4;
  v36 = a4;
  v37 = extend_modes[a4];
  v38 = (4 << a3);
  v292 = *(_DWORD *)(v13 + 624);
  v39 = 128 << (v292 - 8);
  v40 = 20;
  if (a11)
    v35 = 24;
  else
    v40 = 0;
  v41 = *(int *)(v21 + v40);
  v42 = v13 + 136 * a11;
  v43 = -*(_DWORD *)(v13 + 488) >> (*(_DWORD *)(v42 + 8) + 3);
  if ((v37 & 2) != 0)
  {
    if (!v16)
    {
      if (a3 > 0x1D)
        goto LABEL_21;
      v61 = v39 | 1;
      if (v38 >= 0x10)
      {
        v62 = (int)v38 & 0xFFFFFFFFFFFFFFF0;
        v63 = &v308[2 * v62 - 1];
        v168 = vdupq_n_s16(v61);
        v169 = (int16x8_t *)v309;
        v170 = v62;
        do
        {
          v169[-1] = v168;
          *v169 = v168;
          v169 += 2;
          v170 -= 16;
        }
        while (v170);
        if (v62 == (int)v38)
          goto LABEL_21;
      }
      else
      {
        v62 = 0;
        v63 = &v307;
      }
      v171 = (int)v38 - v62;
      do
      {
        *(_WORD *)v63 = v61;
        v63 += 2;
        --v171;
      }
      while (v171);
      goto LABEL_21;
    }
    if ((*(_DWORD *)(v13 + 500) & 0x80000000) != 0)
    {
      v93 = *(_DWORD *)(v21 + v35);
      v94 = (-*(_DWORD *)(v13 + 496) >> (*(_BYTE *)(v42 + 12) + 3)) + v20;
      if (v94 + (int)v38 <= v93)
      {
        if ((int)v38 >= 1)
        {
          v131 = (_WORD *)(v33 - 2);
          v132 = &v307;
          v133 = (4 << a3);
          do
          {
            *(_WORD *)v132 = *v131;
            v132 += 2;
            v131 += a6;
            --v133;
          }
          while (v133);
        }
      }
      else
      {
        v95 = (v93 - v94);
        v96 = v95 - 1;
        if ((int)v95 < 1)
        {
          LODWORD(v95) = 0;
        }
        else
        {
          v97 = (_WORD *)(v33 - 2);
          v98 = &v307;
          v99 = v95;
          do
          {
            *(_WORD *)v98 = *v97;
            v98 += 2;
            v97 += a6;
            --v99;
          }
          while (v99);
        }
        if ((int)v95 < (int)v38)
        {
          v199 = v95;
          v200 = *(unsigned __int16 *)(v33 + 2 * (v96 * a6 - 1));
          v201 = v38 - v95;
          if (v201 >= 0x10)
          {
            v95 = (v201 & 0xFFFFFFFFFFFFFFF0) + v95;
            v227 = vdupq_n_s16(v200);
            v228 = (int16x8_t *)&v309[v199];
            v229 = v201 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v228[-1] = v227;
              *v228 = v227;
              v228 += 2;
              v229 -= 16;
            }
            while (v229);
            if (v201 == (v201 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_21;
          }
          else
          {
            v95 = v95;
          }
          v230 = v38 - v95;
          v231 = &v308[2 * v95 - 1];
          do
          {
            *v231++ = v200;
            --v230;
          }
          while (v230);
        }
      }
    }
    else if ((int)v38 >= 1)
    {
      v47 = (_WORD *)(v33 - 2);
      v48 = &v307;
      v49 = (4 << a3);
      do
      {
        *(_WORD *)v48 = *v47;
        v48 += 2;
        v47 += a6;
        --v49;
      }
      while (v49);
    }
  }
LABEL_21:
  v44 = v43 + v19;
  v45 = v305;
  if ((v37 & 4) == 0)
    goto LABEL_118;
  if (!v14)
  {
    v58 = v39 - 1;
    if (a3 <= 0x1D)
    {
      if (v38 >= 0x10)
      {
        v59 = (int)v38 & 0xFFFFFFFFFFFFFFF0;
        v60 = &v305[2 * v59];
        v136 = vdupq_n_s16(v58);
        v137 = (int16x8_t *)v306;
        v138 = v59;
        do
        {
          v137[-1] = v136;
          *v137 = v136;
          v137 += 2;
          v138 -= 16;
        }
        while (v138);
        if (v59 == (int)v38)
          goto LABEL_116;
      }
      else
      {
        v59 = 0;
        v60 = v305;
      }
      v139 = (int)v38 - v59;
      do
      {
        *(_WORD *)v60 = v58;
        v60 += 2;
        --v139;
      }
      while (v139);
    }
LABEL_116:
    v45 = v305;
    goto LABEL_117;
  }
  v298 = v11;
  v46 = v33 - 2 * a6;
  if ((*(_DWORD *)(v13 + 492) & 0x80000000) == 0)
  {
    if (v18 < v17 && !a3)
    {
      v45 = (_BYTE *)(v33 - 2 * a6);
      if (v16)
        goto LABEL_59;
    }
    goto LABEL_57;
  }
  v77 = v44 + v38;
  if (v44 + (int)v38 <= (int)v41)
  {
LABEL_57:
    v278 = v12;
    v287 = 1 << a2;
    v261 = v41;
    v268 = 4 << a3;
    v86 = a7;
    v266 = v37;
    v87 = v16;
    v88 = v18;
    v89 = v12;
    v90 = a6;
    v91 = v33;
    v92 = v44;
    __memcpy_chk();
    v44 = v92;
    v33 = v91;
    LODWORD(v38) = v268;
    v41 = v261;
    a6 = v90;
    v17 = v287;
    v36 = v89;
    v18 = v88;
    v12 = v278;
    v16 = v87;
    v39 = 128 << (v292 - 8);
    v37 = v266;
    a7 = v86;
    goto LABEL_58;
  }
  if ((int)v41 < v44)
    goto LABEL_58;
  v265 = v37;
  v291 = v33;
  v267 = 4 << a3;
  v256 = a6;
  v286 = 1 << a2;
  v258 = v16;
  v260 = a7;
  v78 = 2 * (v41 - v44);
  v79 = v41;
  v80 = v33 - 2 * a6;
  v81 = v44;
  __memcpy_chk();
  v41 = v79;
  v82 = &v305[v78];
  v83 = *(unsigned __int16 *)&v305[v78 - 2];
  v84 = v77 - v79;
  if ((v77 - v79) < 0x10)
  {
    v85 = 0;
    a7 = v260;
    v16 = v258;
    v36 = v12;
    v39 = 128 << (v292 - 8);
    v17 = v286;
    a6 = v256;
    LODWORD(v38) = v267;
    v33 = v291;
    v37 = v265;
    v44 = v81;
    v46 = v80;
LABEL_189:
    v218 = v85 + v41 - v77;
    do
    {
      *v82++ = v83;
      v219 = __CFADD__(v218++, 1);
    }
    while (!v219);
    goto LABEL_58;
  }
  v214 = v84;
  v85 = v84 & 0xFFFFFFFFFFFFFFF0;
  v215 = vdupq_n_s16(v83);
  v82 += v85;
  v216 = (int16x8_t *)&v301[2 * v79 + 48 + -2 * v81];
  v217 = v85;
  v44 = v81;
  do
  {
    v216[-1] = v215;
    *v216 = v215;
    v216 += 2;
    v217 -= 16;
  }
  while (v217);
  a7 = v260;
  v16 = v258;
  v36 = v12;
  v39 = 128 << (v292 - 8);
  v17 = v286;
  a6 = v256;
  LODWORD(v38) = v267;
  v33 = v291;
  v37 = v265;
  v46 = v80;
  if (v85 != v214)
    goto LABEL_189;
LABEL_58:
  v45 = v305;
  if (!v16)
  {
    LOWORD(v58) = v39 | 1;
    v45 = v305;
    v11 = v298;
    goto LABEL_117;
  }
LABEL_59:
  LOWORD(v58) = *(_WORD *)(v46 - 2);
  v11 = v298;
LABEL_117:
  v304 = v58;
LABEL_118:
  if ((v37 & 8) != 0)
  {
    if (!v14)
    {
      v142 = v39 - 1;
      if (a3 <= 0x1C)
      {
        v143 = 8 << a3;
        if (v143 >= 0x10)
        {
          v144 = v143 & 0xFFFFFFFFFFFFFFF0;
          v34 = &v305[2 * (v143 & 0xFFFFFFFFFFFFFFF0)];
          v172 = vdupq_n_s16(v142);
          v173 = (int16x8_t *)v306;
          v174 = v143 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v173[-1] = v172;
            *v173 = v172;
            v173 += 2;
            v174 -= 16;
          }
          while (v174);
          if (v144 == v143)
            goto LABEL_244;
        }
        else
        {
          v144 = 0;
        }
        v175 = v143 - v144;
        do
        {
          *(_WORD *)v34 = v142;
          v34 += 2;
          --v175;
        }
        while (v175);
      }
LABEL_244:
      v304 = v142;
      goto LABEL_245;
    }
    if ((*(_DWORD *)(v13 + 492) & 0x80000000) == 0)
    {
      if (a3)
        v140 = 0;
      else
        v140 = v18 < v17;
      v141 = v140;
      if (v141 == 1 && v16)
      {
        v45 = (_BYTE *)(v33 - 2 * a6);
        goto LABEL_245;
      }
      v275 = v39;
      v282 = v36;
      v155 = v16;
      v156 = a7;
      v157 = (int)v38;
      v269 = v38;
      v158 = 2 * (int)v38;
      v159 = v33 - 2 * a6;
      __memcpy_chk();
      if (v141)
      {
        v160 = v159;
        memcpy(&v305[2 * v157], (const void *)(v159 + 2 * v157), v158);
        a7 = v156;
        v16 = v155;
        v36 = v282;
        v161 = v275;
      }
      else
      {
        v160 = v159;
        a7 = v156;
        v16 = v155;
        v36 = v282;
        v161 = v275;
        if (a3 <= 0x1D)
        {
          v165 = &v305[2 * v157];
          v166 = (unsigned __int16)*(v165 - 1);
          if (v269 >= 0x10)
          {
            v167 = v157 & 0xFFFFFFFFFFFFFFF0;
            v165 += v157 & 0xFFFFFFFFFFFFFFF0;
            v232 = vdupq_n_s16(v166);
            v233 = (int16x8_t *)&v306[v157];
            v234 = v157 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v233[-1] = v232;
              *v233 = v232;
              v233 += 2;
              v234 -= 16;
            }
            while (v234);
            if (v167 == v157)
              goto LABEL_213;
          }
          else
          {
            v167 = 0;
          }
          v235 = v157 - v167;
          do
          {
            *v165++ = v166;
            --v235;
          }
          while (v235);
        }
      }
LABEL_213:
      if (v16)
        LOWORD(v142) = *(_WORD *)(v160 - 2);
      else
        LOWORD(v142) = v161 | 1;
      goto LABEL_244;
    }
    v274 = v39;
    v145 = v44 + (8 << a3);
    v299 = v33 - 2 * a6;
    if (v145 <= (int)v41)
    {
      v162 = v36;
      v163 = v16;
      v164 = a7;
      if (a3 || v18 >= v17)
      {
        v193 = 2 * (int)v38;
        v194 = v38;
        __memcpy_chk();
        a7 = v164;
        v16 = v163;
        v36 = v162;
        if (a3 <= 0x1D)
        {
          v195 = *(unsigned __int16 *)&v305[v193 - 2];
          v196 = &v305[2 * v194];
          if (v194 >= 0x10)
          {
            v197 = v194 & 0xFFFFFFFFFFFFFFF0;
            v196 += v197;
            v241 = vdupq_n_s16(v195);
            v242 = (int16x8_t *)&v306[v194];
            v243 = v197;
            do
            {
              v242[-1] = v241;
              *v242 = v241;
              v242 += 2;
              v243 -= 16;
            }
            while (v243);
            if (v197 == v194)
              goto LABEL_241;
          }
          else
          {
            v197 = 0;
          }
          v244 = v194 - v197;
          do
          {
            *v196++ = v195;
            --v244;
          }
          while (v244);
        }
      }
      else
      {
        __memcpy_chk();
        a7 = v164;
        v16 = v163;
        v36 = v162;
      }
    }
    else if (v44 + (int)v38 <= (int)v41)
    {
      v184 = v36;
      v185 = v16;
      v263 = a7;
      if (a3 || v18 >= v17)
      {
        v222 = 2 * (int)v38;
        v223 = v38;
        __memcpy_chk();
        a7 = v263;
        v16 = v185;
        v36 = v184;
        if (a3 <= 0x1D)
        {
          v224 = *(unsigned __int16 *)&v305[v222 - 2];
          v225 = &v305[2 * v223];
          if (v223 >= 0x10)
          {
            v226 = v223 & 0xFFFFFFFFFFFFFFF0;
            v225 += v226;
            v250 = vdupq_n_s16(v224);
            v251 = (int16x8_t *)&v306[v223];
            v252 = v226;
            do
            {
              v251[-1] = v250;
              *v251 = v250;
              v251 += 2;
              v252 -= 16;
            }
            while (v252);
            if (v226 == v223)
              goto LABEL_241;
          }
          else
          {
            v226 = 0;
          }
          v253 = v223 - v226;
          do
          {
            *v225++ = v224;
            --v253;
          }
          while (v253);
        }
      }
      else
      {
        v186 = 2 * (v41 - v44);
        v187 = v41;
        v188 = v44;
        __memcpy_chk();
        v189 = &v305[v186];
        v190 = *(unsigned __int16 *)&v305[v186 - 2];
        v191 = v145 - v187;
        if ((v145 - v187) >= 0x10)
        {
          v245 = v191;
          v192 = v191 & 0xFFFFFFFFFFFFFFF0;
          v246 = vdupq_n_s16(v190);
          v189 += v192;
          v247 = (int16x8_t *)&v301[2 * v187 + 48 + -2 * v188];
          v248 = v192;
          a7 = v263;
          v16 = v185;
          v36 = v184;
          do
          {
            v247[-1] = v246;
            *v247 = v246;
            v247 += 2;
            v248 -= 16;
          }
          while (v248);
          if (v192 == v245)
            goto LABEL_241;
        }
        else
        {
          v192 = 0;
          a7 = v263;
          v16 = v185;
          v36 = v184;
        }
        v249 = v192 + v187 - v145;
        do
        {
          *v189++ = v190;
          v219 = __CFADD__(v249++, 1);
        }
        while (!v219);
      }
    }
    else if ((int)v41 >= v44)
    {
      v281 = v36;
      v146 = v16;
      v147 = a7;
      v148 = 2 * ((int)v41 - v44);
      v149 = v41;
      v150 = v44;
      __memcpy_chk();
      v151 = &v305[v148];
      v152 = *(unsigned __int16 *)&v305[v148 - 2];
      v153 = v145 - v149;
      if ((v145 - v149) >= 0x10)
      {
        v236 = v153;
        v154 = v153 & 0xFFFFFFFFFFFFFFF0;
        v237 = vdupq_n_s16(v152);
        v151 += v154;
        v238 = (int16x8_t *)&v301[2 * v149 + 48 + -2 * v150];
        v239 = v154;
        do
        {
          v238[-1] = v237;
          *v238 = v237;
          v238 += 2;
          v239 -= 16;
        }
        while (v239);
        a7 = v147;
        v16 = v146;
        v36 = v281;
        if (v154 == v236)
          goto LABEL_241;
      }
      else
      {
        v154 = 0;
        a7 = v147;
        v16 = v146;
        v36 = v281;
      }
      v240 = v154 + v149 - v145;
      do
      {
        *v151++ = v152;
        v219 = __CFADD__(v240++, 1);
      }
      while (!v219);
    }
LABEL_241:
    if (v16)
      LOWORD(v142) = *(_WORD *)(v299 - 2);
    else
      LOWORD(v142) = v274 | 1;
    goto LABEL_244;
  }
LABEL_245:
  v254 = a3;
  v255 = &_MergedGlobals_24[8 * (unint64_t)v16 + 4 * v14 + v254];
  if (v12)
    v255 = &_MergedGlobals_24[4 * v36 + 32 + v254];
  return ((uint64_t (*)(uint64_t, _QWORD, _BYTE *, char *, _QWORD))*v255)(2 * a7, v11, v45, &v307, v292);
}

void vp9_init_intra_predictors_internal()
{
  qword_253EA5D90 = (uint64_t)vpx_v_predictor_4x4_neon;
  qword_253EA5D98 = (uint64_t)vpx_v_predictor_8x8_neon;
  qword_253EA5DA0 = (uint64_t)vpx_v_predictor_16x16_neon;
  qword_253EA5DA8 = (uint64_t)vpx_v_predictor_32x32_neon;
  qword_253EA5DB0 = (uint64_t)vpx_h_predictor_4x4_neon;
  qword_253EA5DB8 = (uint64_t)vpx_h_predictor_8x8_neon;
  qword_253EA5DC0 = (uint64_t)vpx_h_predictor_16x16_neon;
  qword_253EA5DC8 = (uint64_t)vpx_h_predictor_32x32_neon;
  qword_253EA5E50 = (uint64_t)vpx_d207_predictor_4x4_neon;
  qword_253EA5E58 = (uint64_t)vpx_d207_predictor_8x8_neon;
  qword_253EA5E60 = (uint64_t)vpx_d207_predictor_16x16_neon;
  qword_253EA5E68 = (uint64_t)vpx_d207_predictor_32x32_neon;
  qword_253EA5DD0 = (uint64_t)vpx_d45_predictor_4x4_neon;
  qword_253EA5DD8 = (uint64_t)vpx_d45_predictor_8x8_neon;
  qword_253EA5DE0 = (uint64_t)vpx_d45_predictor_16x16_neon;
  qword_253EA5DE8 = (uint64_t)vpx_d45_predictor_32x32_neon;
  qword_253EA5E70 = (uint64_t)vpx_d63_predictor_4x4_neon;
  qword_253EA5E78 = (uint64_t)vpx_d63_predictor_8x8_neon;
  qword_253EA5E80 = (uint64_t)vpx_d63_predictor_16x16_neon;
  qword_253EA5E88 = (uint64_t)vpx_d63_predictor_32x32_neon;
  qword_253EA5E10 = (uint64_t)vpx_d117_predictor_4x4_neon;
  qword_253EA5E18 = (uint64_t)vpx_d117_predictor_8x8_neon;
  qword_253EA5E20 = (uint64_t)vpx_d117_predictor_16x16_neon;
  qword_253EA5E28 = (uint64_t)vpx_d117_predictor_32x32_neon;
  qword_253EA5DF0 = (uint64_t)vpx_d135_predictor_4x4_neon;
  qword_253EA5DF8 = (uint64_t)vpx_d135_predictor_8x8_neon;
  qword_253EA5E00 = (uint64_t)vpx_d135_predictor_16x16_neon;
  qword_253EA5E08 = (uint64_t)vpx_d135_predictor_32x32_neon;
  qword_253EA5E30 = (uint64_t)vpx_d153_predictor_4x4_neon;
  qword_253EA5E38 = (uint64_t)vpx_d153_predictor_8x8_neon;
  qword_253EA5E40 = (uint64_t)vpx_d153_predictor_16x16_neon;
  qword_253EA5E48 = (uint64_t)vpx_d153_predictor_32x32_neon;
  qword_253EA5E90 = (uint64_t)vpx_tm_predictor_4x4_neon;
  qword_253EA5E98 = (uint64_t)vpx_tm_predictor_8x8_neon;
  qword_253EA5EA0 = (uint64_t)vpx_tm_predictor_16x16_neon;
  qword_253EA5EA8 = (uint64_t)vpx_tm_predictor_32x32_neon;
  qword_253EA5BB0 = (uint64_t)vpx_dc_128_predictor_4x4_neon;
  unk_253EA5BB8 = vpx_dc_128_predictor_8x8_neon;
  qword_253EA5BC0 = (uint64_t)vpx_dc_128_predictor_16x16_neon;
  unk_253EA5BC8 = vpx_dc_128_predictor_32x32_neon;
  qword_253EA5BD0 = (uint64_t)vpx_dc_top_predictor_4x4_neon;
  unk_253EA5BD8 = vpx_dc_top_predictor_8x8_neon;
  qword_253EA5BE0 = (uint64_t)vpx_dc_top_predictor_16x16_neon;
  unk_253EA5BE8 = vpx_dc_top_predictor_32x32_neon;
  qword_253EA5BF0 = (uint64_t)vpx_dc_left_predictor_4x4_neon;
  unk_253EA5BF8 = vpx_dc_left_predictor_8x8_neon;
  qword_253EA5C00 = (uint64_t)vpx_dc_left_predictor_16x16_neon;
  unk_253EA5C08 = vpx_dc_left_predictor_32x32_neon;
  qword_253EA5C10 = (uint64_t)vpx_dc_predictor_4x4_neon;
  unk_253EA5C18 = vpx_dc_predictor_8x8_neon;
  qword_253EA5C20 = (uint64_t)vpx_dc_predictor_16x16_neon;
  unk_253EA5C28 = vpx_dc_predictor_32x32_neon;
  qword_253EA5C50 = (uint64_t)vpx_highbd_v_predictor_4x4_neon;
  unk_253EA5C58 = vpx_highbd_v_predictor_8x8_neon;
  qword_253EA5C60 = (uint64_t)vpx_highbd_v_predictor_16x16_neon;
  unk_253EA5C68 = vpx_highbd_v_predictor_32x32_neon;
  qword_253EA5C70 = (uint64_t)vpx_highbd_h_predictor_4x4_neon;
  unk_253EA5C78 = vpx_highbd_h_predictor_8x8_neon;
  qword_253EA5C80 = (uint64_t)vpx_highbd_h_predictor_16x16_neon;
  unk_253EA5C88 = vpx_highbd_h_predictor_32x32_neon;
  qword_253EA5D10 = (uint64_t)vpx_highbd_d207_predictor_4x4_neon;
  unk_253EA5D18 = vpx_highbd_d207_predictor_8x8_neon;
  qword_253EA5D20 = (uint64_t)vpx_highbd_d207_predictor_16x16_neon;
  unk_253EA5D28 = vpx_highbd_d207_predictor_32x32_neon;
  qword_253EA5C90 = (uint64_t)vpx_highbd_d45_predictor_4x4_neon;
  unk_253EA5C98 = vpx_highbd_d45_predictor_8x8_neon;
  qword_253EA5CA0 = (uint64_t)vpx_highbd_d45_predictor_16x16_neon;
  unk_253EA5CA8 = vpx_highbd_d45_predictor_32x32_neon;
  qword_253EA5D30 = (uint64_t)vpx_highbd_d63_predictor_4x4_neon;
  qword_253EA5D38 = (uint64_t)vpx_highbd_d63_predictor_8x8_neon;
  qword_253EA5D40 = (uint64_t)vpx_highbd_d63_predictor_16x16_neon;
  qword_253EA5D48 = (uint64_t)vpx_highbd_d63_predictor_32x32_neon;
  qword_253EA5CD0 = (uint64_t)vpx_highbd_d117_predictor_4x4_neon;
  unk_253EA5CD8 = vpx_highbd_d117_predictor_8x8_neon;
  qword_253EA5CE0 = (uint64_t)vpx_highbd_d117_predictor_16x16_neon;
  unk_253EA5CE8 = vpx_highbd_d117_predictor_32x32_neon;
  qword_253EA5CB0 = (uint64_t)vpx_highbd_d135_predictor_4x4_neon;
  unk_253EA5CB8 = vpx_highbd_d135_predictor_8x8_neon;
  qword_253EA5CC0 = (uint64_t)vpx_highbd_d135_predictor_16x16_neon;
  unk_253EA5CC8 = vpx_highbd_d135_predictor_32x32_neon;
  qword_253EA5CF0 = (uint64_t)vpx_highbd_d153_predictor_4x4_neon;
  unk_253EA5CF8 = vpx_highbd_d153_predictor_8x8_neon;
  qword_253EA5D00 = (uint64_t)vpx_highbd_d153_predictor_16x16_neon;
  unk_253EA5D08 = vpx_highbd_d153_predictor_32x32_neon;
  qword_253EA5D50 = (uint64_t)vpx_highbd_tm_predictor_4x4_neon;
  qword_253EA5D58 = (uint64_t)vpx_highbd_tm_predictor_8x8_neon;
  qword_253EA5D60 = (uint64_t)vpx_highbd_tm_predictor_16x16_neon;
  qword_253EA5D68 = (uint64_t)vpx_highbd_tm_predictor_32x32_neon;
  _MergedGlobals_24 = (uint64_t)vpx_highbd_dc_128_predictor_4x4_neon;
  *(_QWORD *)algn_253EA5B38 = vpx_highbd_dc_128_predictor_8x8_neon;
  qword_253EA5B40 = (uint64_t)vpx_highbd_dc_128_predictor_16x16_neon;
  unk_253EA5B48 = vpx_highbd_dc_128_predictor_32x32_neon;
  qword_253EA5B50 = (uint64_t)vpx_highbd_dc_top_predictor_4x4_neon;
  unk_253EA5B58 = vpx_highbd_dc_top_predictor_8x8_neon;
  qword_253EA5B60 = (uint64_t)vpx_highbd_dc_top_predictor_16x16_neon;
  unk_253EA5B68 = vpx_highbd_dc_top_predictor_32x32_neon;
  qword_253EA5B70 = (uint64_t)vpx_highbd_dc_left_predictor_4x4_neon;
  unk_253EA5B78 = vpx_highbd_dc_left_predictor_8x8_neon;
  qword_253EA5B80 = (uint64_t)vpx_highbd_dc_left_predictor_16x16_neon;
  unk_253EA5B88 = vpx_highbd_dc_left_predictor_32x32_neon;
  qword_253EA5B90 = (uint64_t)vpx_highbd_dc_predictor_4x4_neon;
  unk_253EA5B98 = vpx_highbd_dc_predictor_8x8_neon;
  qword_253EA5BA0 = (uint64_t)vpx_highbd_dc_predictor_16x16_neon;
  unk_253EA5BA8 = vpx_highbd_dc_predictor_32x32_neon;
}

void vp9_resize_plane(unsigned __int8 *a1, int a2, signed int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  int v9;
  uint64_t v13;
  _BYTE *v15;
  signed int v16;
  void *v17;
  unsigned __int8 *v18;
  char *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int8x16_t v24;
  BOOL v25;
  BOOL v26;
  int v28;
  signed int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  _BYTE *v37;
  int v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _BYTE *v44;
  int v45;
  char v46;
  uint64_t i;
  uint64_t v48;
  unsigned __int8 *v49;
  int v50;
  _BYTE *v51;
  char *__dst;

  v9 = a7;
  LODWORD(v13) = a2;
  v15 = malloc_type_calloc(a7 * a2, 1uLL, 0x100004077774924uLL);
  if (a3 <= (int)v13)
    v16 = v13;
  else
    v16 = a3;
  v17 = malloc_type_calloc(v16, 1uLL, 0x100004077774924uLL);
  v18 = (unsigned __int8 *)malloc_type_calloc((int)v13, 1uLL, 0x100004077774924uLL);
  v19 = (char *)malloc_type_calloc(a6, 1uLL, 0x100004077774924uLL);
  if (v15)
    v25 = v17 == 0;
  else
    v25 = 1;
  v26 = v25 || v18 == 0;
  __dst = v19;
  if (!v26 && v19 != 0)
  {
    if ((int)v13 < 1)
    {
      if (v9 >= 1)
      {
        if (a6 <= 0)
        {
          do
          {
            resize_multistep(v18, v13, __dst, a6, (uint64_t)v17, v20, v21, v22, v23, v24);
            --v9;
          }
          while (v9);
        }
        else
        {
          v40 = a8;
          v41 = 0;
          v42 = v40;
          do
          {
            v43 = __dst;
            resize_multistep(v18, v13, __dst, a6, (uint64_t)v17, v20, v21, v22, v23, v24);
            v44 = (_BYTE *)(a5 + v41);
            v45 = a6;
            do
            {
              v46 = *v43++;
              *v44 = v46;
              v44 += v42;
              --v45;
            }
            while (v45);
            ++v41;
          }
          while (v41 != v9);
        }
      }
    }
    else
    {
      v50 = a8;
      v28 = a4;
      v29 = v13;
      v30 = v15;
      v31 = v28;
      v51 = v30;
      v13 = v13;
      do
      {
        resize_multistep(a1, a3, v30, v9, (uint64_t)v17, v20, v21, v22, v23, v24);
        v30 += v9;
        a1 += v31;
        --v13;
      }
      while (v13);
      v15 = v51;
      if (v9 > 0)
      {
        v32 = v9;
        if (a6 <= 0)
        {
          for (i = 0; i != v32; ++i)
          {
            v48 = 0;
            v49 = &v51[i];
            do
            {
              v18[v48] = *v49;
              v49 += v32;
              ++v48;
            }
            while (v29 != (_DWORD)v48);
            resize_multistep(v18, v29, __dst, a6, (uint64_t)v17, v20, v21, v22, v23, v24);
          }
        }
        else
        {
          for (j = 0; j != v32; ++j)
          {
            v34 = 0;
            v35 = &v51[j];
            do
            {
              v18[v34] = *v35;
              v35 += v32;
              ++v34;
            }
            while (v29 != (_DWORD)v34);
            v36 = __dst;
            resize_multistep(v18, v29, __dst, a6, (uint64_t)v17, v20, v21, v22, v23, v24);
            v37 = (_BYTE *)(a5 + j);
            v38 = a6;
            do
            {
              v39 = *v36++;
              *v37 = v39;
              v37 += v50;
              --v38;
            }
            while (v38);
          }
        }
      }
    }
  }
  free(v15);
  free(v17);
  free(v18);
  free(__dst);
}

unsigned __int8 *resize_multistep(unsigned __int8 *__src, signed int a2, _BYTE *__dst, int a4, uint64_t a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  BOOL v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  char v47;
  _BYTE *v48;
  unint64_t i;
  int v50;
  int v51;
  int v52;
  int v53;
  char v54;
  _BYTE *v55;
  uint64_t v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  unint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;

  v10 = __src;
  if (a2 == a4)
    return (unsigned __int8 *)memcpy(__dst, __src, a2);
  v11 = 0;
  v12 = a2;
  while (1)
  {
    v12 = (v12 + 1) >> 1;
    if (v12 < a4)
      break;
    ++v11;
    if (v12 == 1)
      goto LABEL_8;
  }
  if (!v11)
    return (unsigned __int8 *)interpolate((uint64_t)__src, a2, __dst, a4, a6, a7, a8, a9, a10);
LABEL_8:
  __src = 0;
  v13 = 0;
  v14 = (a2 + 1) >> 1;
  do
  {
    v15 = a2;
    a2 = (a2 + 1) >> 1;
    if (v13)
      v16 = __src;
    else
      v16 = v10;
    v17 = a2 == a4 && v13 == v11 - 1;
    __src = (unsigned __int8 *)(a5 + ((v13 << 31 >> 31) & v14));
    if (v17)
      __src = __dst;
    if ((v15 & 1) != 0)
    {
      v36 = ((v15 - 3) & 1u) + v15 - 3;
      if ((int)v36 < 4)
      {
        if (v15 >= 1)
        {
          v37 = 0;
          v38 = __src;
          do
          {
            v39 = v37 + 1;
            if (v37 + 1 >= v15)
              v39 = v15 - 1;
            v40 = v37 + 3;
            if (v37 + 3 >= v15)
              v40 = v15 - 1;
            v41 = 35 * (v16[v39] + v16[((_DWORD)v37 - 1) & ~(((int)v37 - 1) >> 31)])
                + (v16[v37] << 6)
                - 3 * (v16[v40] + v16[((_DWORD)v37 - 3) & ~(((int)v37 - 3) >> 31)])
                + 64;
            v42 = (v41 >> 7) & ~(v41 >> 31);
            if (v42 >= 255)
              LOBYTE(v42) = -1;
            *v38++ = v42;
            v37 += 2;
          }
          while (v37 < v15);
        }
        goto LABEL_9;
      }
      v50 = 35 * (v16[1] + *v16) + (*v16 << 6) - 3 * (v16[3] + *v16) + 64;
      v51 = (v50 >> 7) & ~(v50 >> 31);
      if (v51 >= 255)
        LOBYTE(v51) = -1;
      *__src = v51;
      v52 = 35 * (v16[3] + v16[1]) + (v16[2] << 6) - 3 * (v16[5] + *v16) + 64;
      v53 = (v52 >> 7) & ~(v52 >> 31);
      if (v53 >= 255)
        v54 = -1;
      else
        v54 = v53;
      v55 = __src + 2;
      __src[1] = v54;
      if ((_DWORD)v36 == 4)
      {
        v56 = 4;
        if (v15 <= 4)
          goto LABEL_9;
        do
        {
LABEL_84:
          v78 = v56 + 1;
          if (v56 + 1 >= v15)
            v78 = v15 - 1;
          v79 = v56 + 3;
          if (v56 + 3 >= v15)
            v79 = v15 - 1;
          v80 = 35 * (v16[v78] + v16[v56 - 1]) + (v16[v56] << 6) - 3 * (v16[v79] + v16[v56 - 3]) + 64;
          v81 = (v80 >> 7) & ~(v80 >> 31);
          if (v81 >= 255)
            LOBYTE(v81) = -1;
          *v55++ = v81;
          v56 += 2;
        }
        while (v56 < v15);
        goto LABEL_9;
      }
      v74 = 0;
      do
      {
        v75 = 35 * (v16[v74 + 5] + v16[v74 + 3]) + (v16[v74 + 4] << 6) - 3 * (v16[v74 + 7] + v16[v74 + 1]) + 64;
        v76 = (v75 >> 7) & ~(v75 >> 31);
        if (v76 >= 255)
          LOBYTE(v76) = -1;
        *v55++ = v76;
        v77 = v74 + 6;
        v74 += 2;
      }
      while (v77 < v36);
      v56 = (v74 + 4);
      if ((int)v56 < v15)
        goto LABEL_84;
    }
    else
    {
      if (v15 < 8)
      {
        if (v15 >= 1)
        {
          v18 = 0;
          v19 = __src;
          do
          {
            v20 = v18 + 1;
            if (v18 + 1 >= v15)
              v20 = v15 - 1;
            v21 = v16[v20] + v16[v18];
            v22 = v16[((_DWORD)v18 - 1) & ~(((int)v18 - 1) >> 31)];
            v23 = v18 - 2;
            v24 = v18 + 3;
            v25 = v18 - 3;
            v26 = v18 + 4;
            v27 = v18 + 2;
            if (v18 + 2 >= v15)
              v28 = v15 - 1;
            else
              v28 = v18 + 2;
            v29 = v16[v28];
            v30 = v16[v23 & ~(v23 >> 31)];
            if (v24 >= v15)
              LODWORD(v24) = v15 - 1;
            v31 = 12 * (v29 + v22);
            v32 = -3 * (v16[(int)v24] + v30);
            if (v26 >= v15)
              v33 = v15 - 1;
            else
              v33 = v26;
            v34 = v31 + 56 * v21 + v32 - (v16[v25 & ~(v25 >> 31)] + v16[v33]) + 64;
            v35 = (v34 >> 7) & ~(v34 >> 31);
            if (v35 >= 255)
              LOBYTE(v35) = -1;
            *v19++ = v35;
            v18 = v27;
          }
          while (v27 < v15);
        }
        goto LABEL_9;
      }
      v43 = 56 * (v16[1] + *v16) - *v16 + 12 * (v16[2] + *v16) - v16[4] - 3 * (v16[3] + *v16) + 64;
      v44 = (v43 >> 7) & ~(v43 >> 31);
      if (v44 >= 255)
        LOBYTE(v44) = -1;
      *__src = v44;
      v45 = 12 * (v16[4] + v16[1]) + 56 * (v16[3] + v16[2]) - (*v16 + v16[6]) - 3 * (v16[5] + *v16) + 64;
      v46 = (v45 >> 7) & ~(v45 >> 31);
      if (v46 >= 255)
        v47 = -1;
      else
        v47 = v46;
      v48 = __src + 2;
      __src[1] = v47;
      if (v15 == 8)
      {
        for (i = 4; i < v15; i += 2)
        {
LABEL_67:
          v62 = i | 1;
          v63 = (int)(i | 1);
          v64 = &v16[i];
          if ((int)(i | 1) >= v15)
            v62 = v15 - 1;
          v65 = v16[v62] + v16[i];
          v66 = v63 + 1;
          if (v63 + 1 >= v15)
            v66 = v15 - 1;
          v67 = 12 * (v16[v66] + *(v64 - 1));
          v68 = v63 + 2;
          if (v63 + 2 >= v15)
            v68 = v15 - 1;
          v69 = -3 * (v16[v68] + *(v64 - 2));
          v70 = *(v64 - 3);
          v71 = v63 + 3;
          if (v71 >= v15)
            LODWORD(v71) = v15 - 1;
          v72 = v67 + 56 * v65 + v69 - (v70 + v16[(int)v71]) + 64;
          v73 = (v72 >> 7) & ~(v72 >> 31);
          if (v73 >= 255)
            LOBYTE(v73) = -1;
          *v48++ = v73;
        }
        goto LABEL_9;
      }
      v57 = 4;
      do
      {
        v58 = &v16[v57];
        v59 = v16[v57 + 1] + v16[v57];
        v60 = v16[v57 - 1];
        v57 += 2;
        LODWORD(v58) = 12 * (v58[2] + v60) + 56 * v59 - 3 * (v58[3] + *(v58 - 2)) - (*(v58 - 3) + v58[4]) + 64;
        v61 = ((int)v58 >> 7) & ~((int)v58 >> 31);
        if (v61 >= 255)
          LOBYTE(v61) = -1;
        *v48++ = v61;
      }
      while (v57 < (v15 - 4));
      i = v57;
      if ((int)v57 < v15)
        goto LABEL_67;
    }
LABEL_9:
    ++v13;
  }
  while (v13 != v11);
  if (a2 != a4)
    return (unsigned __int8 *)interpolate((uint64_t)__src, a2, __dst, a4, a6, a7, a8, a9, a10);
  return __src;
}

void vp9_highbd_resize_plane(uint64_t a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8, int a9)
{
  int v10;
  size_t v15;
  void *v16;
  int v17;
  void *v18;
  unsigned __int16 *v19;
  __int16 *v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  int v25;
  unsigned __int16 *v26;
  int v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int16 *v32;
  uint64_t v33;
  unsigned __int16 *v34;
  __int16 *v35;
  _WORD *v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  unsigned __int16 *v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t i;
  __int16 *v44;
  _WORD *v45;
  int v46;
  __int16 v47;
  void *v48;
  int v49;
  int v50;
  void *__dst;
  uint64_t v52;
  __int16 *v55;
  uint64_t v56;

  v10 = a7;
  v15 = 2 * a2;
  v52 = a7;
  v16 = malloc_type_malloc(v15 * a7, 0xE424C2EuLL);
  if (a3 <= a2)
    v17 = a2;
  else
    v17 = a3;
  v18 = malloc_type_malloc(2 * v17, 0x1000040BDFB0063uLL);
  v19 = (unsigned __int16 *)malloc_type_malloc(v15, 0x1000040BDFB0063uLL);
  v20 = (__int16 *)malloc_type_malloc(2 * a6, 0x1000040BDFB0063uLL);
  v21 = (uint64_t)v18;
  if (v16)
    v22 = v18 == 0;
  else
    v22 = 1;
  v23 = v22 || v19 == 0;
  v55 = v20;
  if (!v23 && v20 != 0)
  {
    v49 = a8;
    v50 = a2;
    __dst = v16;
    v25 = a2;
    v56 = v21;
    if (a2 >= 1)
    {
      v26 = (unsigned __int16 *)(2 * a1);
      v27 = a4;
      v28 = v16;
      v29 = a2;
      v30 = 2 * v27;
      do
      {
        highbd_resize_multistep(v26, a3, v28, v10, v56, a9);
        v21 = v56;
        v28 += v52;
        v26 = (unsigned __int16 *)((char *)v26 + v30);
        --v29;
      }
      while (v29);
    }
    v16 = __dst;
    if (v10 >= 1)
    {
      if (a6 < 1)
      {
        if (v50 <= 0)
        {
          do
          {
            highbd_resize_multistep(v19, v50, v55, a6, v56, a9);
            v21 = v56;
            --v10;
          }
          while (v10);
        }
        else
        {
          v39 = 0;
          v40 = (unsigned __int16 *)__dst;
          do
          {
            v41 = 0;
            v42 = v40;
            do
            {
              v19[v41++] = *v42;
              v42 += v52;
            }
            while (v25 != (_DWORD)v41);
            highbd_resize_multistep(v19, v25, v55, a6, v56, a9);
            v21 = v56;
            ++v39;
            ++v40;
          }
          while (v39 != v10);
        }
      }
      else if (v50 <= 0)
      {
        for (i = 0; i != v10; ++i)
        {
          v44 = v55;
          highbd_resize_multistep(v19, v50, v55, a6, v21, a9);
          v45 = (_WORD *)(2 * (a5 + i));
          v46 = a6;
          do
          {
            v47 = *v44++;
            *v45 = v47;
            v45 += v49;
            --v46;
          }
          while (v46);
          v21 = v56;
        }
      }
      else
      {
        v31 = 0;
        v32 = (unsigned __int16 *)__dst;
        do
        {
          v33 = 0;
          v34 = v32;
          do
          {
            v19[v33++] = *v34;
            v34 += v52;
          }
          while (v25 != (_DWORD)v33);
          v35 = v55;
          highbd_resize_multistep(v19, v25, v55, a6, v21, a9);
          v36 = (_WORD *)(2 * (a5 + v31));
          v37 = a6;
          do
          {
            v38 = *v35++;
            *v36 = v38;
            v36 += v49;
            --v37;
          }
          while (v37);
          ++v31;
          ++v32;
          v21 = v56;
        }
        while (v31 != v10);
      }
    }
  }
  v48 = (void *)v21;
  free(v16);
  free(v48);
  free(v19);
  free(v55);
}

unsigned __int16 *highbd_resize_multistep(unsigned __int16 *__src, int a2, _WORD *__dst, int a4, uint64_t a5, int a6)
{
  unsigned __int16 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 *v12;
  BOOL v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t j;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned __int16 *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  _WORD *v53;
  unint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned __int16 *v61;
  unint64_t i;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  unsigned __int16 *v67;
  unsigned __int16 *v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned __int16 *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  int v89;

  v6 = __src;
  if (a2 == a4)
    return (unsigned __int16 *)memcpy(__dst, __src, 2 * a2);
  v7 = 0;
  v8 = a2;
  while (1)
  {
    v8 = (v8 + 1) >> 1;
    if (v8 < a4)
      break;
    ++v7;
    if (v8 == 1)
      goto LABEL_8;
  }
  if (v7)
  {
LABEL_8:
    __src = 0;
    v9 = 0;
    v10 = (a2 + 1) >> 1;
    while (1)
    {
      v11 = a2;
      a2 = (a2 + 1) >> 1;
      if (v9)
        v12 = __src;
      else
        v12 = v6;
      v13 = a2 == a4 && v9 == v7 - 1;
      __src = (unsigned __int16 *)(a5 + 2 * ((v9 << 31 >> 31) & v10));
      if (v13)
        __src = __dst;
      if ((v11 & 1) != 0)
      {
        v24 = ((v11 - 3) & 1u) + v11 - 3;
        if ((int)v24 >= 4)
        {
          v55 = (35 * (v12[1] + *v12) + (*v12 << 6) - 3 * (v12[3] + *v12) + 64) >> 7;
          if (v55 >= 1023)
            v56 = 1023;
          else
            v56 = (35 * (v12[1] + *v12) + (*v12 << 6) - 3 * (v12[3] + *v12) + 64) >> 7;
          if (v55 >= 4095)
            v57 = 4095;
          else
            v57 = (35 * (v12[1] + *v12) + (*v12 << 6) - 3 * (v12[3] + *v12) + 64) >> 7;
          if (v55 >= 255)
            v55 = 255;
          if (a6 == 12)
            v55 = v57;
          if (a6 == 10)
            v55 = v56;
          *__src = v55 & ~(unsigned __int16)(v55 >> 31);
          v58 = (35 * (v12[3] + v12[1]) + (v12[2] << 6) - 3 * (v12[5] + *v12) + 64) >> 7;
          if (v58 >= 4095)
            v59 = 4095;
          else
            v59 = (35 * (v12[3] + v12[1]) + (v12[2] << 6) - 3 * (v12[5] + *v12) + 64) >> 7;
          if (v58 >= 255)
            v60 = 255;
          else
            v60 = (35 * (v12[3] + v12[1]) + (v12[2] << 6) - 3 * (v12[5] + *v12) + 64) >> 7;
          if (v58 >= 1023)
            v58 = 1023;
          if (a6 != 10)
            v58 = v60;
          if (a6 == 12)
            v58 = v59;
          __src[1] = v58 & ~(unsigned __int16)(v58 >> 31);
          if (v24 > 4)
          {
            v61 = v12 + 4;
            for (i = 4; i < v24; i += 2)
            {
              v63 = (35 * (v61[1] + *(v61 - 1)) + (*v61 << 6) - 3 * (v61[3] + *(v61 - 3)) + 64) >> 7;
              v61 += 2;
              if (v63 >= 1023)
                v64 = 1023;
              else
                v64 = v63;
              if (v63 >= 4095)
                v65 = 4095;
              else
                v65 = v63;
              if (v63 >= 255)
                v63 = 255;
              if (a6 == 12)
                v63 = v65;
              if (a6 == 10)
                v63 = v64;
              __src[i / 2] = v63 & ~(unsigned __int16)(v63 >> 31);
            }
            v66 = i;
            v67 = &__src[i / 2];
            if ((int)i >= v11)
              goto LABEL_9;
LABEL_174:
            v81 = v66 + 3;
            v82 = &v12[v66];
            do
            {
              v83 = v81 - 2;
              if (v81 - 2 >= v11)
                v83 = v11 - 1;
              if (v81 >= v11)
                v84 = v11 - 1;
              else
                v84 = v81;
              v85 = (35 * (v12[v83] + *(v82 - 1)) + (*v82 << 6) - 3 * (v12[v84] + *(v82 - 3)) + 64) >> 7;
              v82 += 2;
              if (v85 >= 1023)
                v86 = 1023;
              else
                v86 = v85;
              if (v85 >= 4095)
                v87 = 4095;
              else
                v87 = v85;
              if (v85 >= 255)
                v85 = 255;
              if (a6 == 12)
                v85 = v87;
              if (a6 == 10)
                v85 = v86;
              *v67++ = v85 & ~(unsigned __int16)(v85 >> 31);
              v88 = v81 - 1;
              v81 += 2;
            }
            while (v88 < v11);
            goto LABEL_9;
          }
          v67 = __src + 2;
          v66 = 4;
          if (v11 > 4)
            goto LABEL_174;
        }
        else if (v11 >= 1)
        {
          for (j = 0; j < v11; j += 2)
          {
            v26 = j + 1;
            if (j + 1 >= v11)
              v26 = v11 - 1;
            v27 = 35 * (v12[v26] + v12[((_DWORD)j - 1) & ~(((int)j - 1) >> 31)]) + (v12[j] << 6);
            v28 = j + 3;
            if (j + 3 >= v11)
              v28 = v11 - 1;
            v29 = (v27 - 3 * (v12[v28] + v12[((_DWORD)j - 3) & ~(((int)j - 3) >> 31)]) + 64) >> 7;
            if (v29 >= 1023)
              v30 = 1023;
            else
              v30 = v29;
            if (v29 >= 4095)
              v31 = 4095;
            else
              v31 = v29;
            if (v29 >= 255)
              v29 = 255;
            if (a6 == 12)
              v29 = v31;
            if (a6 == 10)
              v29 = v30;
            __src[j / 2] = v29 & ~(unsigned __int16)(v29 >> 31);
          }
        }
      }
      else if (v11 >= 8)
      {
        v32 = (v11 - 4);
        v33 = (56 * (v12[1] + *v12) - *v12 + 12 * (v12[2] + *v12) - v12[4] - 3 * (v12[3] + *v12) + 64) >> 7;
        if (v33 >= 1023)
          v34 = 1023;
        else
          v34 = (56 * (v12[1] + *v12) - *v12 + 12 * (v12[2] + *v12) - v12[4] - 3 * (v12[3] + *v12) + 64) >> 7;
        if (v33 >= 4095)
          v35 = 4095;
        else
          v35 = (56 * (v12[1] + *v12) - *v12 + 12 * (v12[2] + *v12) - v12[4] - 3 * (v12[3] + *v12) + 64) >> 7;
        if (v33 >= 255)
          v33 = 255;
        if (a6 == 12)
          v33 = v35;
        if (a6 == 10)
          v33 = v34;
        *__src = v33 & ~(unsigned __int16)(v33 >> 31);
        v36 = (12 * (v12[4] + v12[1]) + 56 * (v12[3] + v12[2]) - (*v12 + v12[6]) - 3 * (v12[5] + *v12) + 64) >> 7;
        if (v36 >= 4095)
          v37 = 4095;
        else
          v37 = (12 * (v12[4] + v12[1]) + 56 * (v12[3] + v12[2]) - (*v12 + v12[6]) - 3 * (v12[5] + *v12) + 64) >> 7;
        if (v36 >= 255)
          v38 = 255;
        else
          v38 = (12 * (v12[4] + v12[1]) + 56 * (v12[3] + v12[2]) - (*v12 + v12[6]) - 3 * (v12[5] + *v12) + 64) >> 7;
        if (v36 >= 1023)
          v36 = 1023;
        if (a6 != 10)
          v36 = v38;
        if (a6 == 12)
          v36 = v37;
        __src[1] = v36 & ~(unsigned __int16)(v36 >> 31);
        if (v32 <= 4)
        {
          v53 = __src + 2;
          v54 = 4;
        }
        else
        {
          v39 = v12 + 4;
          v40 = 2;
          do
          {
            v41 = v39[1] + *v39;
            v42 = *(v39 - 1);
            v43 = *(v39 - 2);
            v44 = v39[3];
            v45 = *(v39 - 3);
            v46 = v39[4];
            v47 = v39[2];
            v39 += 2;
            v48 = v47 + v42;
            v49 = v40 * 2 + 2;
            v50 = (12 * v48 + 56 * v41 - 3 * (v44 + v43) - (v45 + v46) + 64) >> 7;
            if (v50 >= 1023)
              v51 = 1023;
            else
              v51 = v50;
            if (v50 >= 4095)
              v52 = 4095;
            else
              v52 = v50;
            if (v50 >= 255)
              v50 = 255;
            if (a6 == 12)
              v50 = v52;
            if (a6 == 10)
              v50 = v51;
            __src[v40++] = v50 & ~(unsigned __int16)(v50 >> 31);
          }
          while (v49 < v32);
          v53 = (unsigned __int16 *)((char *)__src + v49);
          v54 = v49;
          if ((int)v49 >= v11)
            goto LABEL_9;
        }
        v68 = &v12[v54 - 1];
        do
        {
          v69 = v54 | 1;
          v70 = (int)(v54 | 1);
          if ((int)(v54 | 1) >= v11)
            v69 = v11 - 1;
          v71 = v12[v69] + v68[1];
          if (v70 + 1 >= v11)
            v72 = v11 - 1;
          else
            v72 = v70 + 1;
          v73 = v12[v72] + *v68;
          v74 = v70 + 2;
          if (v70 + 2 >= v11)
            v74 = v11 - 1;
          v75 = 12 * v73;
          v76 = v12[v74] + *(v68 - 1);
          v77 = v70 + 3;
          if (v77 >= v11)
            LODWORD(v77) = v11 - 1;
          v78 = (v75 + 56 * v71 - 3 * v76 - (*(v68 - 2) + v12[(int)v77]) + 64) >> 7;
          if (v78 >= 1023)
            v79 = 1023;
          else
            v79 = v78;
          if (v78 >= 4095)
            v80 = 4095;
          else
            v80 = v78;
          if (v78 >= 255)
            v78 = 255;
          if (a6 == 12)
            v78 = v80;
          v68 += 2;
          if (a6 == 10)
            v78 = v79;
          *v53++ = v78 & ~(unsigned __int16)(v78 >> 31);
          v54 += 2;
        }
        while (v54 < v11);
      }
      else if (v11 >= 1)
      {
        v14 = 0;
        do
        {
          v15 = v14 + 1;
          if (v14 + 1 >= v11)
            v15 = v11 - 1;
          v16 = v12[v15] + v12[v14];
          v17 = v14 + 2;
          if (v14 + 2 >= v11)
            v18 = v11 - 1;
          else
            v18 = v14 + 2;
          v19 = v14 + 3;
          if (v14 + 3 >= v11)
            v19 = v11 - 1;
          v20 = v14 + 4;
          if (v14 + 4 >= v11)
            v20 = v11 - 1;
          v21 = (12 * (v12[v18] + v12[((_DWORD)v14 - 1) & ~(((int)v14 - 1) >> 31)])
               + 56 * v16
               - 3 * (v12[v19] + v12[((_DWORD)v14 - 2) & ~(((int)v14 - 2) >> 31)])
               - (v12[((_DWORD)v14 - 3) & ~(((int)v14 - 3) >> 31)]
                + v12[v20])
               + 64) >> 7;
          if (v21 >= 1023)
            v22 = 1023;
          else
            v22 = v21;
          if (v21 >= 4095)
            v23 = 4095;
          else
            v23 = v21;
          if (v21 >= 255)
            v21 = 255;
          if (a6 == 12)
            v21 = v23;
          if (a6 == 10)
            v21 = v22;
          __src[v14 / 2] = v21 & ~(unsigned __int16)(v21 >> 31);
          v14 += 2;
        }
        while (v17 < v11);
      }
LABEL_9:
      if (++v9 == v7)
      {
        if (a2 != a4)
        {
          v89 = a6;
          return (unsigned __int16 *)highbd_interpolate((uint64_t)__src, a2, __dst, a4, v89);
        }
        return __src;
      }
    }
  }
  v89 = a6;
  return (unsigned __int16 *)highbd_interpolate((uint64_t)__src, a2, __dst, a4, v89);
}

uint64_t interpolate(uint64_t result, signed int a2, _BYTE *a3, int a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int16x8_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t i;
  int32x4_t v26;
  int32x4_t v27;
  unint64_t v28;
  int32x4_t v29;
  int v30;
  uint64_t v31;
  uint64_t j;
  int32x2_t v33;
  int8x8_t v34;
  __int16 *v35;
  int32x2_t v36;
  int32x2_t v37;
  int8x8_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  int32x2_t v45;
  int8x8_t v46;
  int32x2_t v47;
  int8x8_t v48;
  int v49;
  int v50;
  int v51;
  unint64_t v52;
  __int16 *i16;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int16x8_t v77;
  int32x4_t v78;
  int v79;
  uint64_t v80;
  int v81;
  __int16 *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;

  if (a4 >= 0)
    v9 = a4;
  else
    v9 = a4 + 1;
  v10 = (uint64_t)v9 >> 1;
  v11 = v10 + ((uint64_t)a2 << 32);
  v12 = v10 + ((uint64_t)(a4 - a2) << 31);
  v13 = v10 + ((uint64_t)(a2 - a4) << 31);
  if (a2 <= a4)
    v13 = -v12;
  v14 = 16 * a4;
  v15 = v13 / a4;
  if (16 * a4 >= 16 * a2)
  {
    v16 = (int16x8_t *)&filteredinterp_filters1000;
    v17 = v11 / a4;
    if (v15 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
    goto LABEL_33;
  }
  if (v14 >= 13 * a2)
  {
    v16 = (int16x8_t *)&filteredinterp_filters875;
    v17 = v11 / a4;
    if (v15 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
    goto LABEL_33;
  }
  if (v14 >= 11 * a2)
  {
    v16 = (int16x8_t *)&filteredinterp_filters750;
    v17 = v11 / a4;
    if (v15 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
LABEL_33:
    v24 = 0;
    goto LABEL_34;
  }
  if (v14 >= 9 * a2)
    v16 = (int16x8_t *)&filteredinterp_filters625;
  else
    v16 = (int16x8_t *)&filteredinterp_filters500;
  v17 = v11 / a4;
  if (v15 > 0x2FFFFFFFFLL)
    goto LABEL_33;
LABEL_17:
  v18 = v15 + v17;
  if ((uint64_t)(v15 + v17) <= 0x300000000)
    v19 = 0x300000000;
  else
    v19 = v15 + v17;
  if ((uint64_t)(v15 + v17) >= 0x300000000)
    v20 = v15 + v17;
  else
    v20 = v18 + 1;
  v21 = v18 < 0x300000000;
  v22 = (v19 - v20) / v17;
  if (v21)
    ++v22;
  v23 = v22 + 1;
  if (v22 + 1 < 8)
  {
    v24 = 0;
    for (i = v15; i < 0x300000000; i += v17)
LABEL_30:
      ++v24;
    goto LABEL_34;
  }
  i = v15 + (v23 & 0xFFFFFFFFFFFFFFF8) * v17;
  v26 = 0uLL;
  v27.i64[0] = 0x100000001;
  v27.i64[1] = 0x100000001;
  v28 = v23 & 0xFFFFFFFFFFFFFFF8;
  v29 = 0uLL;
  do
  {
    v26 = vaddq_s32(v26, v27);
    v29 = vaddq_s32(v29, v27);
    v28 -= 8;
  }
  while (v28);
  v24 = vaddvq_s32(vaddq_s32(v29, v26));
  if (v23 != (v23 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_34:
  v30 = a4 - 1;
  v31 = v15 + v17 * (a4 - 1);
  for (j = a2 - 4; j <= v31 >> 32; v31 -= v17)
    --v30;
  if (v24 <= v30)
  {
    if (v24)
    {
      v51 = v24;
      do
      {
        v52 = HIDWORD(v15);
        i16 = v16[v15 >> 27].i16;
        v54 = *i16;
        if (SHIDWORD(v15) <= 3)
          v55 = 3;
        else
          v55 = HIDWORD(v15);
        v56 = v55 - 3;
        if (SHIDWORD(v15) <= 2)
          v57 = 2;
        else
          v57 = HIDWORD(v15);
        v58 = *(unsigned __int8 *)(result + v56);
        v59 = *(unsigned __int8 *)(result + (v57 - 2)) * i16[1];
        if (SHIDWORD(v15) <= 1)
          v60 = 1;
        else
          v60 = HIDWORD(v15);
        v61 = i16[2];
        v62 = *(unsigned __int8 *)(result + (v60 - 1));
        v63 = i16[3];
        v64 = i16[4];
        if (v15 < 0)
          v65 = -1;
        else
          v65 = HIDWORD(v15);
        v66 = *(unsigned __int8 *)(result + (v65 + 1));
        v67 = i16[5];
        if (SHIDWORD(v15) <= -2)
          v68 = -2;
        else
          v68 = HIDWORD(v15);
        v69 = *(unsigned __int8 *)(result + (v68 + 2));
        v70 = i16[6];
        if (SHIDWORD(v15) <= -3)
          v71 = -3;
        else
          v71 = HIDWORD(v15);
        v72 = *(unsigned __int8 *)(result + (v71 + 3));
        v73 = i16[7];
        if (SHIDWORD(v15) <= -4)
          LODWORD(v52) = -4;
        v74 = v59
            + v58 * v54
            + v62 * v61
            + *(unsigned __int8 *)(result + (HIDWORD(v15) & ~(v15 >> 63))) * v63
            + v66 * v64
            + v69 * v67
            + v72 * v70
            + *(unsigned __int8 *)(result + (v52 + 4)) * v73
            + 64;
        v75 = (v74 >> 7) & ~(v74 >> 31);
        if (v75 >= 255)
          LOBYTE(v75) = -1;
        *a3++ = v75;
        v15 += v17;
        --v51;
      }
      while (v51);
    }
    v76 = v30 - v24 + 1;
    do
    {
      v77 = v16[v15 >> 27];
      a9.i64[0] = *(_QWORD *)(result + ((v15 - 0x300000000) >> 32));
      v78 = (int32x4_t)vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F50);
      a9 = vqtbl1q_s8(a9, (int8x16_t)xmmword_208F04F40);
      v77.i32[0] = vaddvq_s32(vmlaq_s32(vmulq_s32((int32x4_t)a9, vmovl_high_s16(v77)), v78, vmovl_s16(*(int16x4_t *)v77.i8)));
      v79 = ((v77.i32[0] + 64) >> 7) & ~((v77.i32[0] + 64) >> 31);
      if (v79 >= 255)
        LOBYTE(v79) = -1;
      *a3++ = v79;
      v15 += v17;
      --v76;
    }
    while (v76);
    if (v30 + 1 < a4)
    {
      v80 = 0;
      v81 = ~v30 + a4;
      do
      {
        v82 = v16[v15 >> 27].i16;
        v83 = HIDWORD(v15) - 3;
        if (HIDWORD(v15) - 3 >= a2)
          v83 = a2 - 1;
        v84 = HIDWORD(v15) - 2;
        if (HIDWORD(v15) - 2 >= a2)
          v84 = a2 - 1;
        v85 = *(unsigned __int8 *)(result + v83);
        v86 = *(unsigned __int8 *)(result + v84) * v82[1];
        v87 = HIDWORD(v15) - 1;
        if (SHIDWORD(v15) > a2)
          v87 = a2 - 1;
        v88 = *(unsigned __int8 *)(result + v87);
        if (SHIDWORD(v15) >= a2)
          v89 = a2 - 1;
        else
          v89 = HIDWORD(v15);
        v90 = *(unsigned __int8 *)(result + v89);
        if (HIDWORD(v15) + 1 < a2)
          v91 = HIDWORD(v15) + 1;
        else
          v91 = a2 - 1;
        v92 = *(unsigned __int8 *)(result + v91);
        v93 = HIDWORD(v15) + 2;
        if (HIDWORD(v15) + 2 >= a2)
          v93 = a2 - 1;
        v94 = *(unsigned __int8 *)(result + v93);
        v95 = HIDWORD(v15) + 3;
        if (HIDWORD(v15) + 3 >= a2)
          v95 = a2 - 1;
        v96 = *(unsigned __int8 *)(result + v95);
        v97 = HIDWORD(v15) + 4;
        if (HIDWORD(v15) + 4 >= a2)
          v97 = a2 - 1;
        v98 = v86
            + v85 * *v82
            + v88 * v82[2]
            + v90 * v82[3]
            + v92 * v82[4]
            + v94 * v82[5]
            + v96 * v82[6]
            + *(unsigned __int8 *)(result + v97) * v82[7]
            + 64;
        v99 = (v98 >> 7) & ~(v98 >> 31);
        if (v99 >= 255)
          LOBYTE(v99) = -1;
        a3[v80] = v99;
        v15 += v17;
        ++v80;
      }
      while (v81 != (_DWORD)v80);
    }
  }
  else if (a4 >= 1)
  {
    v33 = vdup_n_s32(a2);
    v34 = (int8x8_t)vdup_n_s32(a2 - 1);
    do
    {
      v35 = v16[v15 >> 27].i16;
      v36 = vdup_n_s32(HIDWORD(v15));
      v37 = vadd_s32(v36, (int32x2_t)0xFFFFFFFEFFFFFFFDLL);
      v38 = vbic_s8(vbsl_s8((int8x8_t)vcgt_s32(v33, v37), (int8x8_t)v37, v34), (int8x8_t)vcgt_s32((int32x2_t)0x200000003, v36));
      v39 = *(unsigned __int8 *)(result + v38.i32[0]);
      v40 = *(unsigned __int8 *)(result + v38.i32[1]) * v35[1];
      v41 = HIDWORD(v15) - 1;
      if (SHIDWORD(v15) > a2)
        v41 = a2 - 1;
      if (SHIDWORD(v15) >= a2)
        LODWORD(v42) = a2 - 1;
      else
        LODWORD(v42) = HIDWORD(v15);
      if (SHIDWORD(v15) <= 0)
        v43 = 0;
      else
        v43 = v41;
      v42 = (int)v42;
      v44 = *(unsigned __int8 *)(result + v43);
      if (v15 < 0)
        v42 = 0;
      v45 = vadd_s32(v36, (int32x2_t)0x200000001);
      v46 = vbic_s8(vbsl_s8((int8x8_t)vcgt_s32(v33, v45), (int8x8_t)v45, v34), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFEFFFFFFFFLL, v36));
      v47 = vadd_s32(v36, (int32x2_t)0x400000003);
      v48 = vbic_s8(vbsl_s8((int8x8_t)vcgt_s32(v33, v47), (int8x8_t)v47, v34), (int8x8_t)vcgt_s32((int32x2_t)0xFFFFFFFCFFFFFFFDLL, v36));
      v49 = v40
          + v39 * *v35
          + v44 * v35[2]
          + *(unsigned __int8 *)(result + v42) * v35[3]
          + *(unsigned __int8 *)(result + v46.i32[0]) * v35[4]
          + *(unsigned __int8 *)(result + v46.i32[1]) * v35[5]
          + *(unsigned __int8 *)(result + v48.i32[0]) * v35[6]
          + *(unsigned __int8 *)(result + v48.i32[1]) * v35[7]
          + 64;
      v50 = (v49 >> 7) & ~(v49 >> 31);
      if (v50 >= 255)
        LOBYTE(v50) = -1;
      *a3++ = v50;
      v15 += v17;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t highbd_interpolate(uint64_t result, int a2, _WORD *a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t i;
  int32x4_t v22;
  int32x4_t v23;
  unint64_t v24;
  int32x4_t v25;
  int v26;
  uint64_t v27;
  uint64_t j;
  int v29;
  int v30;
  __int16 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  __int16 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  __int16 *v82;
  unsigned __int16 *v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  __int16 *v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;

  if (a4 >= 0)
    v5 = a4;
  else
    v5 = a4 + 1;
  v6 = (uint64_t)v5 >> 1;
  v7 = v6 + ((uint64_t)a2 << 32);
  v8 = v6 + ((uint64_t)(a4 - a2) << 31);
  v9 = v6 + ((uint64_t)(a2 - a4) << 31);
  if (a2 <= a4)
    v9 = -v8;
  v10 = 16 * a4;
  v11 = v9 / a4;
  if (16 * a4 >= 16 * a2)
  {
    v12 = (char *)&filteredinterp_filters1000;
    v13 = v7 / a4;
    if (v11 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
    goto LABEL_33;
  }
  if (v10 >= 13 * a2)
  {
    v12 = (char *)&filteredinterp_filters875;
    v13 = v7 / a4;
    if (v11 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
    goto LABEL_33;
  }
  if (v10 >= 11 * a2)
  {
    v12 = (char *)&filteredinterp_filters750;
    v13 = v7 / a4;
    if (v11 <= 0x2FFFFFFFFLL)
      goto LABEL_17;
LABEL_33:
    v20 = 0;
    goto LABEL_34;
  }
  if (v10 >= 9 * a2)
    v12 = (char *)&filteredinterp_filters625;
  else
    v12 = (char *)&filteredinterp_filters500;
  v13 = v7 / a4;
  if (v11 > 0x2FFFFFFFFLL)
    goto LABEL_33;
LABEL_17:
  v14 = v11 + v13;
  if ((uint64_t)(v11 + v13) <= 0x300000000)
    v15 = 0x300000000;
  else
    v15 = v11 + v13;
  if ((uint64_t)(v11 + v13) >= 0x300000000)
    v16 = v11 + v13;
  else
    v16 = v14 + 1;
  v17 = v14 < 0x300000000;
  v18 = (v15 - v16) / v13;
  if (v17)
    ++v18;
  v19 = v18 + 1;
  if (v18 + 1 < 8)
  {
    v20 = 0;
    for (i = v11; i < 0x300000000; i += v13)
LABEL_30:
      ++v20;
    goto LABEL_34;
  }
  i = v11 + (v19 & 0xFFFFFFFFFFFFFFF8) * v13;
  v22 = 0uLL;
  v23.i64[0] = 0x100000001;
  v23.i64[1] = 0x100000001;
  v24 = v19 & 0xFFFFFFFFFFFFFFF8;
  v25 = 0uLL;
  do
  {
    v22 = vaddq_s32(v22, v23);
    v25 = vaddq_s32(v25, v23);
    v24 -= 8;
  }
  while (v24);
  v20 = vaddvq_s32(vaddq_s32(v25, v22));
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_30;
LABEL_34:
  v26 = a4 - 1;
  v27 = v11 + v13 * (a4 - 1);
  for (j = a2 - 4; j <= v27 >> 32; v27 -= v13)
    --v26;
  if (v20 <= v26)
  {
    if (v20)
    {
      v56 = v20;
      do
      {
        v57 = HIDWORD(v11);
        v58 = (__int16 *)&v12[16 * (v11 >> 27)];
        if (SHIDWORD(v11) <= 3)
          v59 = 3;
        else
          v59 = HIDWORD(v11);
        v60 = *(unsigned __int16 *)(result + 2 * (v59 - 3));
        if (SHIDWORD(v11) <= 2)
          v61 = 2;
        else
          v61 = HIDWORD(v11);
        v62 = *v58;
        v63 = *(unsigned __int16 *)(result + 2 * (v61 - 2)) * v58[1];
        if (SHIDWORD(v11) <= 1)
          v64 = 1;
        else
          v64 = HIDWORD(v11);
        v65 = *(unsigned __int16 *)(result + 2 * (v64 - 1));
        v66 = v58[2];
        v67 = v58[3];
        v68 = v58[4];
        if (v11 < 0)
          v69 = -1;
        else
          v69 = HIDWORD(v11);
        v70 = *(unsigned __int16 *)(result + 2 * (v69 + 1));
        v71 = v58[5];
        if (SHIDWORD(v11) <= -2)
          v72 = -2;
        else
          v72 = HIDWORD(v11);
        v73 = *(unsigned __int16 *)(result + 2 * (v72 + 2));
        v74 = v58[6];
        if (SHIDWORD(v11) <= -3)
          v75 = -3;
        else
          v75 = HIDWORD(v11);
        v76 = *(unsigned __int16 *)(result + 2 * (v75 + 3));
        v77 = v58[7];
        if (SHIDWORD(v11) <= -4)
          LODWORD(v57) = -4;
        v78 = (v63
             + v60 * v62
             + v65 * v66
             + *(unsigned __int16 *)(result + 2 * (HIDWORD(v11) & ~(v11 >> 63))) * v67
             + v70 * v68
             + v73 * v71
             + v76 * v74
             + *(unsigned __int16 *)(result + 2 * (v57 + 4)) * v77
             + 64) >> 7;
        if (v78 >= 1023)
          v79 = 1023;
        else
          v79 = v78;
        if (v78 >= 4095)
          v80 = 4095;
        else
          v80 = v78;
        if (v78 >= 255)
          v78 = 255;
        if (a5 == 12)
          v78 = v80;
        if (a5 == 10)
          v78 = v79;
        *a3++ = v78 & ~(unsigned __int16)(v78 >> 31);
        v11 += v13;
        --v56;
      }
      while (v56);
    }
    v81 = v26 - v20 + 1;
    do
    {
      v82 = (__int16 *)&v12[16 * (v11 >> 27)];
      v83 = (unsigned __int16 *)(result + 2 * ((v11 - 0x300000000) >> 32));
      v84 = (v83[1] * v82[1]
           + *v83 * *v82
           + v83[2] * v82[2]
           + v83[3] * v82[3]
           + v83[4] * v82[4]
           + v83[5] * v82[5]
           + v83[6] * v82[6]
           + v83[7] * v82[7]
           + 64) >> 7;
      if (v84 >= 1023)
        v85 = 1023;
      else
        v85 = v84;
      if (v84 >= 4095)
        v86 = 4095;
      else
        v86 = v84;
      if (v84 >= 255)
        v84 = 255;
      if (a5 == 12)
        v84 = v86;
      if (a5 == 10)
        v84 = v85;
      *a3++ = v84 & ~(unsigned __int16)(v84 >> 31);
      v11 += v13;
      --v81;
    }
    while (v81);
    if (v26 + 1 < a4)
    {
      v87 = 0;
      v88 = ~v26 + a4;
      do
      {
        v89 = (__int16 *)&v12[16 * (v11 >> 27)];
        v90 = HIDWORD(v11) - 3;
        if (HIDWORD(v11) - 3 >= a2)
          v90 = a2 - 1;
        v91 = *(unsigned __int16 *)(result + 2 * v90);
        v92 = HIDWORD(v11) - 2;
        if (HIDWORD(v11) - 2 >= a2)
          v92 = a2 - 1;
        v93 = *v89;
        v94 = *(unsigned __int16 *)(result + 2 * v92) * v89[1];
        v95 = HIDWORD(v11) - 1;
        if (SHIDWORD(v11) > a2)
          v95 = a2 - 1;
        v96 = *(unsigned __int16 *)(result + 2 * v95);
        v97 = v89[2];
        v98 = v89[3];
        if (SHIDWORD(v11) >= a2)
          v99 = a2 - 1;
        else
          v99 = HIDWORD(v11);
        v100 = v89[4];
        v101 = *(unsigned __int16 *)(result + 2 * v99);
        if (HIDWORD(v11) + 1 < a2)
          v102 = HIDWORD(v11) + 1;
        else
          v102 = a2 - 1;
        v103 = v89[5];
        v104 = *(unsigned __int16 *)(result + 2 * v102);
        v105 = HIDWORD(v11) + 2;
        if (HIDWORD(v11) + 2 >= a2)
          v105 = a2 - 1;
        v106 = v89[6];
        v107 = *(unsigned __int16 *)(result + 2 * v105);
        v108 = HIDWORD(v11) + 3;
        if (HIDWORD(v11) + 3 >= a2)
          v108 = a2 - 1;
        v109 = v89[7];
        v110 = *(unsigned __int16 *)(result + 2 * v108);
        v111 = HIDWORD(v11) + 4;
        if (HIDWORD(v11) + 4 >= a2)
          v111 = a2 - 1;
        v112 = (v94
              + v91 * v93
              + v96 * v97
              + v101 * v98
              + v104 * v100
              + v107 * v103
              + v110 * v106
              + *(unsigned __int16 *)(result + 2 * v111) * v109
              + 64) >> 7;
        if (v112 >= 1023)
          v113 = 1023;
        else
          v113 = v112;
        if (v112 >= 4095)
          v114 = 4095;
        else
          v114 = v112;
        if (v112 >= 255)
          v112 = 255;
        if (a5 == 12)
          v112 = v114;
        if (a5 == 10)
          v112 = v113;
        a3[v87] = v112 & ~(unsigned __int16)(v112 >> 31);
        v11 += v13;
        ++v87;
      }
      while (v88 != (_DWORD)v87);
    }
  }
  else if (a4 >= 1)
  {
    do
    {
      v29 = HIDWORD(v11) - 2;
      if (HIDWORD(v11) - 2 >= a2)
        v29 = a2 - 1;
      if (SHIDWORD(v11) < 2)
        v29 = 0;
      v30 = HIDWORD(v11) - 3;
      if (HIDWORD(v11) - 3 >= a2)
        v30 = a2 - 1;
      v31 = (__int16 *)&v12[16 * (v11 >> 27)];
      if (SHIDWORD(v11) < 3)
        v30 = 0;
      v32 = *(unsigned __int16 *)(result + 2 * v30);
      v33 = *v31;
      v34 = *(unsigned __int16 *)(result + 2 * v29) * v31[1];
      v35 = HIDWORD(v11) - 1;
      v36 = v31[2];
      if (SHIDWORD(v11) > a2)
        v35 = a2 - 1;
      if (SHIDWORD(v11) >= a2)
        LODWORD(v37) = a2 - 1;
      else
        LODWORD(v37) = HIDWORD(v11);
      if (SHIDWORD(v11) <= 0)
        v35 = 0;
      v38 = *(unsigned __int16 *)(result + 2 * v35);
      v39 = v31[3];
      v37 = (int)v37;
      if (v11 < 0)
        v37 = 0;
      v40 = v31[4];
      v41 = *(unsigned __int16 *)(result + 2 * v37);
      if (HIDWORD(v11) + 1 < a2)
        v42 = HIDWORD(v11) + 1;
      else
        v42 = a2 - 1;
      if (SHIDWORD(v11) < -1)
        v42 = 0;
      v43 = *(unsigned __int16 *)(result + 2 * v42);
      v44 = HIDWORD(v11) + 2;
      v45 = v31[5];
      if (HIDWORD(v11) + 2 >= a2)
        v44 = a2 - 1;
      if (SHIDWORD(v11) < -2)
        v44 = 0;
      v46 = *(unsigned __int16 *)(result + 2 * v44);
      v47 = HIDWORD(v11) + 3;
      v48 = v31[6];
      if (HIDWORD(v11) + 3 >= a2)
        v47 = a2 - 1;
      if (SHIDWORD(v11) < -3)
        v47 = 0;
      v49 = HIDWORD(v11) + 4;
      v50 = v31[7];
      v51 = *(unsigned __int16 *)(result + 2 * v47);
      if (HIDWORD(v11) + 4 >= a2)
        v49 = a2 - 1;
      if (SHIDWORD(v11) >= -4)
        v52 = v49;
      else
        v52 = 0;
      v53 = (v34
           + v32 * v33
           + v38 * v36
           + v41 * v39
           + v43 * v40
           + v46 * v45
           + v51 * v48
           + *(unsigned __int16 *)(result + 2 * v52) * v50
           + 64) >> 7;
      if (v53 >= 1023)
        v54 = 1023;
      else
        v54 = v53;
      if (v53 >= 4095)
        v55 = 4095;
      else
        v55 = v53;
      if (v53 >= 255)
        v53 = 255;
      if (a5 == 12)
        v53 = v55;
      if (a5 == 10)
        v53 = v54;
      *a3++ = v53 & ~(unsigned __int16)(v53 >> 31);
      v11 += v13;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t setup_rtcd_internal_0()
{
  uint64_t result;

  result = arm_cpu_caps();
  vp9_block_error = vp9_block_error_neon;
  vp9_block_error_fp = vp9_block_error_fp_neon;
  return result;
}

unint64_t scaled_x(int a1, int *a2)
{
  return (unint64_t)(*a2 * (uint64_t)a1) >> 14;
}

unint64_t scaled_y(int a1, uint64_t a2)
{
  return (unint64_t)(*(int *)(a2 + 4) * (uint64_t)a1) >> 14;
}

uint64_t vp9_setup_scale_factors_for_frame(uint64_t result, int a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  unint64_t (*v9)(int, uint64_t);
  unint64_t (*v10)(int, int *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  if (a2 > 2 * a4 || 2 * a5 < a3 || 16 * a2 < a4 || 16 * a3 < a5)
  {
    *(_QWORD *)result = -1;
    return result;
  }
  v6 = (a2 << 14) / a4;
  v7 = (a3 << 14) / a5;
  *(_DWORD *)result = v6;
  *(_DWORD *)(result + 4) = v7;
  v8 = v7 >> 10;
  *(_DWORD *)(result + 8) = v6 >> 10;
  *(_DWORD *)(result + 12) = v7 >> 10;
  if (v6 == -1 || v7 == -1 || (v9 = scaled_y, v10 = scaled_x, v6 == 0x4000) && v7 == 0x4000)
  {
    v10 = (unint64_t (*)(int, int *))unscaled_value;
    v9 = (unint64_t (*)(int, uint64_t))unscaled_value;
  }
  *(_QWORD *)(result + 16) = v10;
  *(_QWORD *)(result + 24) = v9;
  if (v6 >> 10 == 16)
  {
    if (v8 == 16)
    {
      *(_QWORD *)(result + 32) = vpx_convolve_copy_neon;
      *(_QWORD *)(result + 40) = vpx_convolve_avg_neon;
      v11 = vpx_convolve8_avg_vert;
      *(_QWORD *)(result + 48) = vpx_convolve8_vert;
      *(_QWORD *)(result + 56) = v11;
      v12 = vpx_convolve8_avg_horiz;
      *(_QWORD *)(result + 64) = vpx_convolve8_horiz;
      *(_QWORD *)(result + 72) = v12;
      v13 = vpx_convolve8_avg;
      *(_QWORD *)(result + 80) = vpx_convolve8;
      *(_QWORD *)(result + 88) = v13;
      if (!a6)
        return result;
      *(_QWORD *)(result + 96) = vpx_highbd_convolve_copy_neon;
      *(_QWORD *)(result + 104) = vpx_highbd_convolve_avg_neon;
      *(_QWORD *)(result + 112) = vpx_highbd_convolve8_vert_neon;
      *(_QWORD *)(result + 120) = vpx_highbd_convolve8_avg_vert_neon;
      v14 = vpx_highbd_convolve8_horiz_neon;
      v15 = vpx_highbd_convolve8_avg_horiz_neon;
    }
    else
    {
      *(_QWORD *)(result + 32) = vpx_scaled_vert_c;
      *(_QWORD *)(result + 40) = vpx_scaled_avg_vert_c;
      *(_QWORD *)(result + 48) = vpx_scaled_vert_c;
      *(_QWORD *)(result + 56) = vpx_scaled_avg_vert_c;
      *(_QWORD *)(result + 64) = vpx_scaled_2d_neon;
      *(_QWORD *)(result + 72) = vpx_scaled_avg_2d_c;
      *(_QWORD *)(result + 80) = vpx_scaled_2d_neon;
      *(_QWORD *)(result + 88) = vpx_scaled_avg_2d_c;
      if (!a6)
        return result;
      *(_QWORD *)(result + 96) = vpx_highbd_convolve8_vert_neon;
      *(_QWORD *)(result + 104) = vpx_highbd_convolve8_avg_vert_neon;
      *(_QWORD *)(result + 112) = vpx_highbd_convolve8_vert_neon;
      *(_QWORD *)(result + 120) = vpx_highbd_convolve8_avg_vert_neon;
      v14 = vpx_highbd_convolve8_neon;
      v15 = vpx_highbd_convolve8_avg_neon;
    }
    goto LABEL_26;
  }
  v16 = vpx_scaled_horiz_c;
  if (v8 != 16)
    v16 = vpx_scaled_2d_neon;
  v17 = vpx_scaled_avg_horiz_c;
  if (v8 != 16)
    v17 = vpx_scaled_avg_2d_c;
  *(_QWORD *)(result + 32) = v16;
  *(_QWORD *)(result + 40) = v17;
  *(_QWORD *)(result + 48) = vpx_scaled_2d_neon;
  *(_QWORD *)(result + 56) = vpx_scaled_avg_2d_c;
  *(_QWORD *)(result + 64) = v16;
  *(_QWORD *)(result + 72) = v17;
  *(_QWORD *)(result + 80) = vpx_scaled_2d_neon;
  *(_QWORD *)(result + 88) = vpx_scaled_avg_2d_c;
  if (a6)
  {
    if (v8 == 16)
    {
      v14 = vpx_highbd_convolve8_horiz_neon;
      v15 = vpx_highbd_convolve8_avg_horiz_neon;
      *(_QWORD *)(result + 96) = vpx_highbd_convolve8_horiz_neon;
      *(_QWORD *)(result + 104) = vpx_highbd_convolve8_avg_horiz_neon;
    }
    else
    {
      v14 = vpx_highbd_convolve8_neon;
      v15 = vpx_highbd_convolve8_avg_neon;
      *(_QWORD *)(result + 96) = vpx_highbd_convolve8_neon;
      *(_QWORD *)(result + 104) = vpx_highbd_convolve8_avg_neon;
    }
    *(_QWORD *)(result + 112) = vpx_highbd_convolve8_neon;
    *(_QWORD *)(result + 120) = vpx_highbd_convolve8_avg_neon;
LABEL_26:
    *(_QWORD *)(result + 128) = v14;
    *(_QWORD *)(result + 136) = v15;
    *(_QWORD *)(result + 144) = vpx_highbd_convolve8_neon;
    *(_QWORD *)(result + 152) = vpx_highbd_convolve8_avg_neon;
  }
  return result;
}

_DWORD *vp9_perceptual_aq_mode_setup(_DWORD *result, uint64_t a2, double a3, int16x4_t a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  _WORD *v14;
  uint64_t v15;
  double v16;
  int v17;
  double v18;
  int v19;
  int v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  int v29;
  double v30;
  uint64_t v31;
  double v32;

  v10 = result + 47464;
  v11 = result[48620];
  v12 = result[43257];
  v13 = result[47464];
  if (v13 == 8)
  {
    v16 = 0.25;
    v14 = ac_qlookup_0;
  }
  else
  {
    if (v13 == 12)
    {
      v14 = ac_qlookup_12;
      v15 = 0x3F90000000000000;
    }
    else
    {
      if (v13 != 10)
      {
        v18 = -0.015625;
        goto LABEL_13;
      }
      v14 = ac_qlookup_10;
      v15 = 0x3FB0000000000000;
    }
    v16 = *(double *)&v15;
  }
  if (v12 >= 255)
    v17 = 255;
  else
    v17 = result[43257];
  a4.i16[0] = v14[v17 & ~(v17 >> 31)];
  v18 = v16 * (double)vmovl_s16(a4).i32[0];
LABEL_13:
  v19 = 0;
  if ((int)v11 >= 0)
    v20 = result[48620];
  else
    v20 = v11 + 1;
  v21 = (v20 >> 1);
  v22 = *(double *)&result[2 * (int)v21 + 48580];
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)a2 = 65793;
  if ((int)v11 >= 2)
  {
    v23 = 0;
    v24 = *v10;
    v25 = 0.0625;
    if (*v10 != 10)
      v25 = 0.015625;
    if (v24 == 8)
      v25 = 0.25;
    while (1)
    {
      v27 = v18 / ((v22 - *(double *)&result[2 * v23 + 48580]) * 0.25 + 1.0);
      if (v24 == 8)
        break;
      if (v24 == 10)
      {
        v26 = 0;
        while (1)
        {
          LOWORD(a10) = ac_qlookup_10[v26];
          a10 = v25 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          if (a10 >= v27)
            goto LABEL_39;
          if (++v26 == 256)
            goto LABEL_22;
        }
      }
      if (v24 == 12)
      {
        v26 = 0;
        while (1)
        {
          LOWORD(a10) = ac_qlookup_12[v26];
          a10 = v25 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          if (a10 >= v27)
            goto LABEL_39;
          if (++v26 == 256)
            goto LABEL_22;
        }
      }
      if (v27 <= -v25)
      {
        LOWORD(v26) = 0;
        goto LABEL_23;
      }
LABEL_22:
      LOWORD(v26) = 255;
LABEL_23:
      *(_WORD *)(a2 + 8 * (int)v23 + 16) = v26 - v12;
      *(_DWORD *)(a2 + 4 * (int)v23++ + 80) |= 1u;
      if (v23 == v21)
      {
        v19 = v21;
        goto LABEL_44;
      }
    }
    v26 = 0;
    while (1)
    {
      LOWORD(a10) = ac_qlookup_0[v26];
      a10 = v25 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
      if (a10 >= v27)
        break;
      if (++v26 == 256)
        goto LABEL_22;
    }
LABEL_39:
    if ((_DWORD)v26 != 256)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_44:
  *(_WORD *)(a2 + 8 * v19 + 16) = 0;
  *(_DWORD *)(a2 + 4 * v19 + 80) |= 1u;
  if (v19 < (int)v11)
  {
    v28 = v19;
    v29 = *v10;
    v30 = 0.0625;
    if (v29 != 10)
      v30 = 0.015625;
    if (v29 == 8)
      v30 = 0.25;
    while (1)
    {
      v32 = v18 * ((*(double *)&result[2 * v28 + 48580] - v22) * 0.25 + 1.0);
      if (v29 == 8)
        break;
      if (v29 == 10)
      {
        v31 = 0;
        while (1)
        {
          LOWORD(a10) = ac_qlookup_10[v31];
          a10 = v30 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          if (a10 >= v32)
            goto LABEL_67;
          if (++v31 == 256)
            goto LABEL_50;
        }
      }
      if (v29 == 12)
      {
        v31 = 0;
        while (1)
        {
          LOWORD(a10) = ac_qlookup_12[v31];
          a10 = v30 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
          if (a10 >= v32)
            goto LABEL_67;
          if (++v31 == 256)
            goto LABEL_50;
        }
      }
      if (v32 <= -v30)
      {
        LOWORD(v31) = 0;
        goto LABEL_51;
      }
LABEL_50:
      LOWORD(v31) = 255;
LABEL_51:
      *(_WORD *)(a2 + 8 * (int)v28 + 16) = v31 - v12;
      *(_DWORD *)(a2 + 4 * (int)v28++ + 80) |= 1u;
      if (v28 == v11)
        return result;
    }
    v31 = 0;
    while (1)
    {
      LOWORD(a10) = ac_qlookup_0[v31];
      a10 = v30 * (double)vmovl_s16(*(int16x4_t *)&a10).i32[0];
      if (a10 >= v32)
        break;
      if (++v31 == 256)
        goto LABEL_50;
    }
LABEL_67:
    if ((_DWORD)v31 != 256)
      goto LABEL_51;
    goto LABEL_50;
  }
  return result;
}

uint64_t vp9_choose_segmap_coding_method(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, int32x4_t a7)
{
  uint64_t v8;
  double v9;
  int v10;
  uint64_t result;
  signed int v12;
  unint64_t v13;
  int v14;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 **v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  _BYTE v37[7];
  _OWORD v38[2];
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v8 = a1 + 4780;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v9 = 0.0;
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  *(_DWORD *)(a1 + 4784) = -1;
  v32 = (_DWORD *)(a1 + 4781);
  *(_DWORD *)(a1 + 4781) = -1;
  *(_WORD *)(a1 + 4788) = -1;
  *(_BYTE *)(a1 + 4790) = -1;
  v10 = *(_DWORD *)(a1 + 18232);
  if (v10 != 31)
  {
    v16 = 0;
    v17 = *(_DWORD *)(a1 + 1312);
    v33 = a1 + 4780;
    do
    {
      v18 = 8 * ((v17 + 7) >> 3 >> *(_DWORD *)(v8 + 13456));
      if (v18 >= v17)
        v18 = v17;
      LODWORD(v34) = v17 & (v17 >> 31);
      HIDWORD(v34) = v18;
      v19 = *(_DWORD *)(a1 + 1320);
      v20 = (v19 + 7) >> 3;
      if (8 * ((v20 * v16) >> v10) >= v19)
        v21 = *(_DWORD *)(a1 + 1320);
      else
        v21 = 8 * ((v20 * v16) >> v10);
      ++v16;
      v22 = 8 * ((v20 * v16) >> v10);
      if (v22 >= v19)
        v23 = *(_DWORD *)(a1 + 1320);
      else
        v23 = v22;
      v35 = v21;
      v36 = v23;
      if (v17 >= 1 && v21 < v23)
      {
        v24 = 0;
        v25 = *(_QWORD *)(a1 + 1480) + 8 * v21;
        do
        {
          v26 = (unsigned __int8 **)v25;
          v27 = v21;
          do
          {
            count_segs_sb(a1, a2, (uint64_t)&v34, v26, (uint64_t)v39, (uint64_t)&v40, (uint64_t)v38, v24, v9, a4, a5, a6, a7, v27, 0xCu);
            v27 += 8;
            v26 += 8;
          }
          while (v27 < v23);
          v17 = *(_DWORD *)(a1 + 1312);
          v24 += 8;
          v25 += (uint64_t)*(int *)(a1 + 1324) << 6;
        }
        while (v24 < v17);
        v8 = v33;
        v10 = *(_DWORD *)(v33 + 13452);
      }
    }
    while (v16 < 1 << v10);
  }
  calc_segtree_probs((unsigned int *)v39, &v34);
  result = cost_segmap((int *)v39, (unsigned __int8 *)&v34);
  if (!*(_DWORD *)(a1 + 1276) || *(_BYTE *)(a1 + 1292))
    goto LABEL_32;
  v12 = result;
  calc_segtree_probs((unsigned int *)v38, v37);
  result = cost_segmap((int *)v38, v37);
  if (HIDWORD(v40) + (_DWORD)v40)
  {
    v13 = (((HIDWORD(v40) + v40) >> 1) + ((unint64_t)v40 << 8))
        / (HIDWORD(v40) + v40);
    v14 = ((_DWORD)v13 == 0) | ((255 - v13) >> 23) | v13;
  }
  else
  {
    LOBYTE(v14) = 0x80;
  }
  if (HIDWORD(v41) + (_DWORD)v41)
  {
    v28 = (((HIDWORD(v41) + v41) >> 1) + ((unint64_t)v41 << 8))
        / (HIDWORD(v41) + v41);
    v29 = ((_DWORD)v28 == 0) | ((255 - v28) >> 23) | v28;
  }
  else
  {
    LOBYTE(v29) = 0x80;
  }
  if (HIDWORD(v42) + (_DWORD)v42)
  {
    v30 = (((HIDWORD(v42) + v42) >> 1) + ((unint64_t)v42 << 8))
        / (HIDWORD(v42) + v42);
    v31 = ((_DWORD)v30 == 0) | ((255 - v30) >> 23) | v30;
  }
  else
  {
    LOBYTE(v31) = 0x80;
  }
  if ((int)(result
           + v40 * vp9_prob_cost[v14]
           + HIDWORD(v40) * vp9_prob_cost[256 - v14]
           + v41 * vp9_prob_cost[v29]
           + HIDWORD(v41) * vp9_prob_cost[256 - v29]
           + v42 * vp9_prob_cost[v31]
           + HIDWORD(v42) * vp9_prob_cost[256 - v31]) >= v12)
  {
LABEL_32:
    *(_BYTE *)v8 = 0;
    *v32 = v34;
    *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)&v34 + 3);
  }
  else
  {
    *(_BYTE *)v8 = 1;
    *v32 = *(_DWORD *)v37;
    *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)&v37[3];
    *(_BYTE *)(v8 + 8) = v14;
    *(_BYTE *)(v8 + 9) = v29;
    *(_BYTE *)(v8 + 10) = v31;
  }
  return result;
}

uint64_t count_segs_sb(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, int a14, unsigned __int8 a15)
{
  uint64_t v16;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v25;
  unint64_t v26;
  unsigned __int8 **v29;
  int v30;
  int v31;
  unsigned __int8 **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v47;
  unsigned __int8 **v48;
  int v49;
  int v50;

  if (*(_DWORD *)(result + 1312) > a8)
  {
    v16 = result;
    v47 = result;
    while (1)
    {
      if (*(_DWORD *)(v16 + 1320) <= a14)
        return result;
      v19 = a15;
      v20 = num_8x8_blocks_wide_lookup[a15];
      v21 = **a4;
      v22 = num_8x8_blocks_wide_lookup[v21];
      v23 = num_8x8_blocks_high_lookup[v21];
      if (v22 == (_DWORD)v20 && v23 == (_DWORD)v20)
        break;
      v25 = *(_DWORD *)(v16 + 1324);
      v26 = v20 >> 1;
      if (v22 == (_DWORD)v20 && v23 < v20)
      {
        v49 = a8;
        count_segs(v16, a2, a3, a4, a5, a6, a7, v20, a9, a10, a11, a12, a13, v26, a8, a14);
        v32 = &a4[(int)v26 * v25];
        HIDWORD(v40) = v26 + v49;
        v41 = a14;
        LODWORD(v40) = v20 >> 1;
        v33 = v16;
        v34 = a2;
        v35 = a3;
        v36 = a5;
        v37 = a6;
        v38 = a7;
        goto LABEL_20;
      }
      if (v22 < v20 && v23 == (_DWORD)v20)
      {
        v50 = a8;
        count_segs(v16, a2, a3, a4, a5, a6, a7, v20 >> 1, a9, a10, a11, a12, a13, v20, a8, a14);
        v32 = &a4[v26];
        v41 = v26 + a14;
        v40 = __PAIR64__(v50, v20);
        v33 = v16;
        v34 = a2;
        v35 = a3;
        v36 = a5;
        v37 = a6;
        v38 = a7;
        v39 = v20 >> 1;
        return count_segs(v33, v34, v35, v32, v36, v37, v38, v39, a9, a10, a11, a12, a13, v40, SHIDWORD(v40), v41);
      }
      a15 = subsize_lookup[v19 + 39];
      v29 = a4;
      v48 = a4;
      v30 = a8;
      count_segs_sb(v16, a2, a3, v29, a5, a6, a7);
      count_segs_sb(v47, a2, a3, &v48[v26], a5, a6, a7);
      v31 = v26 * v25;
      v16 = v47;
      result = count_segs_sb(v47, a2, a3, &v48[v31], a5, a6, a7);
      a8 = v26 + v30;
      a4 = &(&v48[v31])[(int)v26];
      a14 += v26;
      if (*(_DWORD *)(v47 + 1312) <= a8)
        return result;
    }
    v41 = a14;
    v40 = __PAIR64__(a8, v20);
    v33 = v16;
    v38 = a7;
    v34 = a2;
    v35 = a3;
    v36 = a5;
    v32 = a4;
    v37 = a6;
LABEL_20:
    LODWORD(v39) = v20;
    return count_segs(v33, v34, v35, v32, v36, v37, v38, v39, a9, a10, a11, a12, a13, v40, SHIDWORD(v40), v41);
  }
  return result;
}

unsigned int *calc_segtree_probs(unsigned int *result, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = result[1] + *result;
  v3 = result[5] + result[4];
  v4 = v2 + result[2] + result[3];
  v5 = v3 + result[6] + result[7];
  if ((_DWORD)v5 + (_DWORD)v4)
  {
    v6 = (((v5 + v4) >> 1) + (v4 << 8)) / (v5 + v4);
    *a2 = ((_DWORD)v6 == 0) | ((255 - v6) >> 23) | v6;
    if ((_DWORD)v4)
      goto LABEL_3;
  }
  else
  {
    *a2 = 0x80;
    if ((_DWORD)v4)
    {
LABEL_3:
      v7 = ((unint64_t)(v4 >> 1) + (v2 << 8)) / v4;
      a2[1] = ((_DWORD)v7 == 0) | ((255 - v7) >> 23) | v7;
      if ((_DWORD)v5)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  a2[1] = 0x80;
  if ((_DWORD)v5)
  {
LABEL_4:
    v8 = ((unint64_t)(v5 >> 1) + (v3 << 8)) / v5;
    a2[2] = ((_DWORD)v8 == 0) | ((255 - v8) >> 23) | v8;
    v9 = *result;
    v10 = result[1] + v9;
    if ((_DWORD)v10)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  a2[2] = 0x80;
  v9 = *result;
  v10 = result[1] + v9;
  if ((_DWORD)v10)
  {
LABEL_5:
    v11 = ((unint64_t)(v10 >> 1) + (v9 << 8)) / v10;
    a2[3] = ((_DWORD)v11 == 0) | ((255 - v11) >> 23) | v11;
    v12 = result[2];
    v13 = result[3] + v12;
    if ((_DWORD)v13)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  a2[3] = 0x80;
  v12 = result[2];
  v13 = result[3] + v12;
  if ((_DWORD)v13)
  {
LABEL_6:
    v14 = ((unint64_t)(v13 >> 1) + (v12 << 8)) / v13;
    a2[4] = ((_DWORD)v14 == 0) | ((255 - v14) >> 23) | v14;
    v15 = result[4];
    v16 = result[5] + v15;
    if ((_DWORD)v16)
      goto LABEL_7;
LABEL_14:
    a2[5] = 0x80;
    v18 = result[6];
    v19 = result[7] + v18;
    if ((_DWORD)v19)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_13:
  a2[4] = 0x80;
  v15 = result[4];
  v16 = result[5] + v15;
  if (!(_DWORD)v16)
    goto LABEL_14;
LABEL_7:
  v17 = ((unint64_t)(v16 >> 1) + (v15 << 8)) / v16;
  a2[5] = ((_DWORD)v17 == 0) | ((255 - v17) >> 23) | v17;
  v18 = result[6];
  v19 = result[7] + v18;
  if ((_DWORD)v19)
  {
LABEL_8:
    v20 = ((unint64_t)(v19 >> 1) + (v18 << 8)) / v19;
    a2[6] = ((_DWORD)v20 == 0) | ((255 - v20) >> 23) | v20;
    return result;
  }
LABEL_15:
  a2[6] = 0x80;
  return result;
}

uint64_t cost_segmap(int *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  v4 = v3 + *a1;
  v5 = a1[2];
  v6 = a1[3];
  v7 = v6 + v5;
  v8 = a1[4];
  v9 = a1[5];
  v10 = v9 + v8;
  v11 = a1[6];
  v12 = a1[7];
  v13 = v12 + v11;
  v14 = v6 + v5 + v4;
  v15 = v12 + v11 + v9 + v8;
  result = v14 * vp9_prob_cost[*a2] + v15 * vp9_prob_cost[256 - *a2];
  if (v14 >= 1)
  {
    result = (_DWORD)result + v4 * vp9_prob_cost[a2[1]] + v7 * vp9_prob_cost[256 - a2[1]];
    if (v4 >= 1)
      result = (_DWORD)result + v2 * vp9_prob_cost[a2[3]] + v3 * vp9_prob_cost[256 - a2[3]];
    if (v7 >= 1)
      result = (_DWORD)result + v5 * vp9_prob_cost[a2[4]] + v6 * vp9_prob_cost[256 - a2[4]];
  }
  if (v15 >= 1)
  {
    result = (_DWORD)result + v10 * vp9_prob_cost[a2[2]] + v13 * vp9_prob_cost[256 - a2[2]];
    if (v10 >= 1)
      result = (_DWORD)result + v8 * vp9_prob_cost[a2[5]] + v9 * vp9_prob_cost[256 - a2[5]];
    if (v13 >= 1)
      return (_DWORD)result + v11 * vp9_prob_cost[a2[6]] + v12 * vp9_prob_cost[256 - a2[6]];
  }
  return result;
}

uint64_t count_segs(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, double a11, double a12, int32x4_t a13, int a14, int a15, int a16)
{
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  signed int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int32x4_t v40;
  uint64_t v41;
  uint8x16_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  uint64_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint64_t v65;
  uint8x16_t v66;
  uint16x8_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint64_t v71;
  uint8x16_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint64_t v77;
  uint8x16_t v78;
  uint16x8_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint64_t v83;
  uint8x16_t v84;
  uint16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint64_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint16x8_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  int32x4_t v95;
  uint64_t v96;
  int v97;
  int32x4_t v98;
  int32x4_t v99;
  _BOOL4 v100;

  v16 = *(_DWORD *)(result + 1312);
  if (v16 > a15)
  {
    v17 = *(_DWORD *)(result + 1320);
    if (v17 > a16)
    {
      *(_QWORD *)(a2 + 448) = a4;
      v18 = (char)(*a4)[4];
      *(_DWORD *)(a2 + 496) = -64 * a15;
      *(_DWORD *)(a2 + 500) = (v16 - (a15 + a14)) << 6;
      *(_DWORD *)(a2 + 488) = -64 * a16;
      *(_DWORD *)(a2 + 492) = (v17 - (a16 + a8)) << 6;
      if (a15)
      {
        v19 = a4[-*(int *)(a2 + 440)];
        *(_QWORD *)(a2 + 464) = v19;
        if (*(_DWORD *)(a3 + 8) < a16)
        {
LABEL_5:
          v20 = (uint64_t)*(a4 - 1);
          goto LABEL_8;
        }
      }
      else
      {
        v19 = 0;
        *(_QWORD *)(a2 + 464) = 0;
        if (*(_DWORD *)(a3 + 8) < a16)
          goto LABEL_5;
      }
      v20 = 0;
LABEL_8:
      *(_QWORD *)(a2 + 456) = v20;
      v21 = 4 * v18;
      ++*(_DWORD *)(a5 + 4 * v18);
      if (!*(_DWORD *)(result + 1276))
        return result;
      v25 = **a4;
      v22 = *(_DWORD *)(result + 1320);
      v23 = num_8x8_blocks_wide_lookup[v25];
      v24 = num_8x8_blocks_high_lookup[v25];
      LODWORD(v25) = v22 - a16;
      if (v22 - a16 >= (int)v23)
        v25 = v23;
      else
        v25 = v25;
      v26 = *(_DWORD *)(result + 1312) - a15;
      if (v26 >= v24)
        v26 = v24;
      if (v26 >= 1 && (int)v25 >= 1)
      {
        v30 = 0;
        result = *(_QWORD *)(result + 1536);
        v31 = v25 & 0xFFFFFFE0;
        v32 = 8;
        v33 = a16 + v22 * a15;
        while (v25 >= 8)
        {
          v34 = a16 + v22 * a15 + v22 * v30 + (int)v25 - 1 >= a16 + v22 * a15 + v22 * v30
             && (unint64_t)(v25 - 1) >> 32 == 0;
          if (!v34)
            break;
          if (v25 >= 0x20)
          {
            v39 = a16 + (v30 + a15) * v22;
            v40 = vdupq_n_s32(v32);
            v41 = result + v39;
            v42 = *(uint8x16_t *)(v41 + 16);
            v43 = vmovl_u8(*(uint8x8_t *)v41);
            v44 = vmovl_high_u8(*(uint8x16_t *)v41);
            v45 = vmovl_u8(*(uint8x8_t *)v42.i8);
            v46 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v45.i8);
            v47 = (int32x4_t)vmovl_high_u16(v45);
            v48 = vmovl_high_u8(v42);
            v49 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v48.i8);
            v50 = (int32x4_t)vmovl_high_u16(v48);
            v51 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v44));
            v52 = vminq_s32(v40, (int32x4_t)vmovl_u16(*(uint16x4_t *)v44.i8));
            v53 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v43));
            v54 = vminq_s32(v40, (int32x4_t)vmovl_u16(*(uint16x4_t *)v43.i8));
            v55 = vminq_s32(v40, v50);
            v56 = vminq_s32(v40, v49);
            v57 = vminq_s32(v40, v47);
            v58 = vminq_s32(v40, v46);
            if (v31 != 32)
            {
              v59 = result + v39 + 32;
              v60 = *(uint8x16_t *)(v59 + 16);
              v61 = vmovl_u8(*(uint8x8_t *)v59);
              v62 = vmovl_high_u8(*(uint8x16_t *)v59);
              v63 = vmovl_u8(*(uint8x8_t *)v60.i8);
              v64 = vmovl_high_u8(v60);
              v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v62));
              v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
              v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v61));
              v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v61.i8));
              v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v64));
              v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v64.i8));
              v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v63));
              v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v63.i8));
              if (v31 != 64)
              {
                v65 = result + v39 + 64;
                v66 = *(uint8x16_t *)(v65 + 16);
                v67 = vmovl_u8(*(uint8x8_t *)v65);
                v68 = vmovl_high_u8(*(uint8x16_t *)v65);
                v69 = vmovl_u8(*(uint8x8_t *)v66.i8);
                v70 = vmovl_high_u8(v66);
                v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v68));
                v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v68.i8));
                v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v67));
                v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v67.i8));
                v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v70));
                v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
                v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v69));
                v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v69.i8));
                if (v31 != 96)
                {
                  v71 = result + v39 + 96;
                  v72 = *(uint8x16_t *)(v71 + 16);
                  v73 = vmovl_u8(*(uint8x8_t *)v71);
                  v74 = vmovl_high_u8(*(uint8x16_t *)v71);
                  v75 = vmovl_u8(*(uint8x8_t *)v72.i8);
                  v76 = vmovl_high_u8(v72);
                  v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v74));
                  v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8));
                  v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v73));
                  v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8));
                  v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v76));
                  v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8));
                  v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v75));
                  v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8));
                  if (v31 != 128)
                  {
                    v77 = result + v39 + 128;
                    v78 = *(uint8x16_t *)(v77 + 16);
                    v79 = vmovl_u8(*(uint8x8_t *)v77);
                    v80 = vmovl_high_u8(*(uint8x16_t *)v77);
                    v81 = vmovl_u8(*(uint8x8_t *)v78.i8);
                    v82 = vmovl_high_u8(v78);
                    v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v80));
                    v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v80.i8));
                    v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v79));
                    v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v79.i8));
                    v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v82));
                    v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8));
                    v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v81));
                    v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8));
                    if (v31 != 160)
                    {
                      v83 = result + v39 + 160;
                      v84 = *(uint8x16_t *)(v83 + 16);
                      v85 = vmovl_u8(*(uint8x8_t *)v83);
                      v86 = vmovl_high_u8(*(uint8x16_t *)v83);
                      v87 = vmovl_u8(*(uint8x8_t *)v84.i8);
                      v88 = vmovl_high_u8(v84);
                      v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v86));
                      v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v86.i8));
                      v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v85));
                      v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v85.i8));
                      v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v88));
                      v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8));
                      v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v87));
                      v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8));
                      if (v31 != 192)
                      {
                        v89 = result + v39 + 192;
                        v90 = *(uint8x16_t *)(v89 + 16);
                        v91 = vmovl_u8(*(uint8x8_t *)v89);
                        v92 = vmovl_high_u8(*(uint8x16_t *)v89);
                        v93 = vmovl_u8(*(uint8x8_t *)v90.i8);
                        v94 = vmovl_high_u8(v90);
                        v51 = vminq_s32(v51, (int32x4_t)vmovl_high_u16(v92));
                        v52 = vminq_s32(v52, (int32x4_t)vmovl_u16(*(uint16x4_t *)v92.i8));
                        v53 = vminq_s32(v53, (int32x4_t)vmovl_high_u16(v91));
                        v54 = vminq_s32(v54, (int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8));
                        v55 = vminq_s32(v55, (int32x4_t)vmovl_high_u16(v94));
                        v56 = vminq_s32(v56, (int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8));
                        v57 = vminq_s32(v57, (int32x4_t)vmovl_high_u16(v93));
                        v58 = vminq_s32(v58, (int32x4_t)vmovl_u16(*(uint16x4_t *)v93.i8));
                      }
                    }
                  }
                }
              }
            }
            a13 = vminq_s32(v54, v58);
            v32 = vminvq_s32(vminq_s32(vminq_s32(a13, vminq_s32(v52, v56)), vminq_s32(vminq_s32(v53, v57), vminq_s32(v51, v55))));
            if (v31 == v25)
              goto LABEL_23;
            v38 = v25 & 0xFFFFFFE0;
            v35 = v38;
            if ((v25 & 0x18) == 0)
              goto LABEL_30;
          }
          else
          {
            v38 = 0;
          }
          v95 = vdupq_n_s32(v32);
          v96 = v38 - (v25 & 0xFFFFFFF8);
          v97 = v33 + v38;
          v98 = v95;
          do
          {
            a13.i64[0] = *(_QWORD *)(result + v97);
            v99 = (int32x4_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_208F04F50);
            a13 = (int32x4_t)vqtbl1q_s8((int8x16_t)a13, (int8x16_t)xmmword_208F04F40);
            v98 = vminq_s32(v98, a13);
            v95 = vminq_s32(v95, v99);
            v97 += 8;
            v96 += 8;
          }
          while (v96);
          v32 = vminvq_s32(vminq_s32(v95, v98));
          v35 = v25 & 0xFFFFFFF8;
          if (v35 != v25)
            goto LABEL_30;
LABEL_23:
          ++v30;
          v33 += v22;
          if (v30 == v26)
            goto LABEL_20;
        }
        v35 = 0;
LABEL_30:
        v36 = v25 - v35;
        v37 = v33 + v35;
        do
        {
          if (v32 >= *(unsigned __int8 *)(result + v37))
            v32 = *(unsigned __int8 *)(result + v37);
          ++v37;
          --v36;
        }
        while (v36);
        goto LABEL_23;
      }
      v32 = 8;
LABEL_20:
      if (v19)
      {
        v28 = (char)v19[5];
        if (v20)
        {
LABEL_22:
          v29 = *(char *)(v20 + 5);
          goto LABEL_52;
        }
      }
      else
      {
        v28 = 0;
        if (v20)
          goto LABEL_22;
      }
      v29 = 0;
LABEL_52:
      v34 = v32 == (_DWORD)v18;
      v100 = v32 == v18;
      (*a4)[5] = v100;
      ++*(_DWORD *)(a6 + 8 * (v29 + v28) + 4 * v100);
      if (!v34)
        ++*(_DWORD *)(a7 + v21);
    }
  }
  return result;
}

uint64_t vp9_compute_skin_sb(uint64_t result, unsigned int a2, int a3, int a4)
{
  _DWORD *v4;
  int v5;
  char v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  BOOL v76;
  int v77;
  uint64_t v80;
  char v81;
  int v82;
  int v83;
  char v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _DWORD *v95;
  int v96;

  v4 = (_DWORD *)(result + 173008);
  v5 = 4 << b_width_log2_lookup[a2];
  v87 = a2;
  if ((unint64_t)a2 - 2 < 3)
    v6 = 3;
  else
    v6 = 4;
  v84 = v6;
  v7 = v5 + 7;
  if (v5 >= 0)
    v7 = 4 << b_width_log2_lookup[a2];
  if (a3 + 8 >= *v4 - 2)
    v8 = *v4 - 2;
  else
    v8 = a3 + 8;
  v9 = a4 + 8;
  if (a4 + 8 >= *(_DWORD *)(result + 173016) - 2)
    v9 = *(_DWORD *)(result + 173016) - 2;
  v96 = v9;
  if (v8 > a3 && v9 > a4)
  {
    v83 = v8;
    v10 = (_QWORD *)(result + 842168);
    v11 = (uint64_t *)(result + 740224);
    v12 = *(_QWORD *)(result + 190440);
    v13 = *(int *)(v12 + 16);
    result = *(int *)(v12 + 36);
    v14 = v7 >> 3;
    v81 = v84 - 1;
    v15 = *(_QWORD *)(v12 + 56) + 8 * (a4 + (int)v13 * a3);
    v16 = 4 * (a4 + (int)result * a3);
    v17 = *(_QWORD *)(v12 + 64) + v16;
    v18 = *(_QWORD *)(v12 + 72) + v16;
    v19 = v5;
    v20 = (uint64_t)v5 >> 1;
    v95 = v4;
    v82 = v14;
    v94 = v10;
    v93 = v5;
    v77 = 4 << b_width_log2_lookup[a2];
    v89 = *(_DWORD *)(v12 + 36);
    v90 = *(_DWORD *)(v12 + 16);
    if (a2 == 3)
    {
      v91 = 4 * v13 + 4;
      v85 = a4;
      v88 = 2 * result + 2;
      v21 = v14;
      v22 = a3;
      do
      {
        v24 = 0;
        if (v22)
        {
          v25 = v85;
          do
          {
            if ((_DWORD)v25)
            {
              v26 = v4[2];
              v27 = *(unsigned __int8 *)(*v10 + v26 * (uint64_t)v22 + v25);
              if (v27 <= 0x3C)
              {
                result = vpx_skin_pixel(*(unsigned __int8 *)(v15 + v91), *(unsigned __int8 *)(v17 + v88), *(unsigned __int8 *)(v18 + v88), v27 < 0x1A);
                v19 = v93;
                v10 = v94;
                v4 = v95;
              }
              else
              {
                result = 0;
              }
              *(_BYTE *)(*v11 + v22 * (uint64_t)v26 + v25) = result;
              ++v24;
              v15 += v19;
              v17 += v20;
              v18 += v20;
            }
            v25 += v21;
          }
          while ((int)v25 < v96);
        }
        v15 += (v90 - v24) << v84;
        v23 = (v89 - v24) << v81;
        v17 += v23;
        v18 += v23;
        v22 += v82;
      }
      while (v22 < v83);
    }
    else
    {
      v86 = v5 >> 2;
      v80 = a4;
      v28 = v14;
      v29 = (a3 + 1);
      v30 = a3;
      do
      {
        v32 = 0;
        if (v30)
        {
          v33 = v80;
          do
          {
            if ((_DWORD)v33)
            {
              v44 = v4[2];
              v45 = v33 + v29 * v44;
              v46 = v45 + 1;
              v47 = *(unsigned __int8 *)(*v10 + v45);
              if (v47 >= *(unsigned __int8 *)(*v10 + v46))
                v47 = *(unsigned __int8 *)(*v10 + v46);
              if (*(unsigned __int8 *)(*v10 + (int)v33 + v30 * v44 + 1) < v47)
                v47 = *(unsigned __int8 *)(*v10 + (int)v33 + v30 * v44 + 1);
              if (v47 >= *(unsigned __int8 *)(*v10 + v44 * (uint64_t)v30 + v33))
                v47 = *(unsigned __int8 *)(*v10 + v44 * (uint64_t)v30 + v33);
              if (v47 <= 0x3C)
              {
                v34 = 4 << b_height_log2_lookup[v87];
                v35 = v20;
                v36 = *(unsigned __int8 *)(v15 + (int)v20 + (v34 >> 1) * v90);
                v37 = v86 + (v34 >> 2) * v89;
                v38 = v32;
                v39 = *(unsigned __int8 *)(v17 + v37);
                v40 = *(unsigned __int8 *)(v18 + v37);
                v92 = v18;
                v41 = v17;
                v42 = v15;
                v43 = v29;
                result = vpx_skin_pixel(v36, v39, v40, v47 < 0x1A);
                v32 = v38;
                v29 = v43;
                v15 = v42;
                v17 = v41;
                v18 = v92;
                v19 = v93;
                v20 = v35;
                v10 = v94;
                v4 = v95;
              }
              else
              {
                result = 0;
              }
              *(_BYTE *)(*v11 + v30 * (uint64_t)v44 + v33) = result;
              ++v32;
              v15 += v19;
              v17 += v20;
              v18 += v20;
            }
            v33 += v28;
          }
          while ((int)v33 < v96);
        }
        v15 += (v90 - v32) << v84;
        v31 = (v89 - v32) << v81;
        v17 += v31;
        v18 += v31;
        v30 += v82;
        v29 = (v29 + v82);
      }
      while (v30 < v83);
    }
    v48 = v83 - v82;
    if (v77 > -8)
    {
      v57 = a3 - (uint64_t)v82;
      result = v96 - v82;
      v58 = a3;
      do
      {
        v59 = a4 - (uint64_t)v82;
        v60 = a4;
        do
        {
          v61 = (int)v4[2];
          if ((v58 != a3 || v60 != a4 && v60 != result) && (v58 != v48 || v60 != a4 && v60 != result))
          {
            v62 = 0;
            v63 = v60 + v58 * v61;
            v65 = v58 == v48 || v60 == a4;
            v66 = v59 + v57 * v61;
            v67 = v82 * (uint64_t)(int)v61;
            v68 = -v82;
            do
            {
              v69 = v68 + v58 >= a3 && v68 + v58 < v83;
              if (v69)
              {
                v70 = 0;
                do
                {
                  v71 = v59 + v70 >= a4 && v59 + v70 < v96;
                  if (v71 && *(_BYTE *)(*v11 + v66 + v70))
                    ++v62;
                  v70 += v82;
                }
                while (-2 * v82 + v70 <= 0);
              }
              v66 += v67;
              v69 = v68 <= 0;
              v68 += v82;
            }
            while (v69);
            if (v58 == a3)
              v65 = 1;
            if (v60 == result)
              v65 = 1;
            if (v65)
              v72 = 5;
            else
              v72 = 8;
            v73 = *v11;
            v74 = *(unsigned __int8 *)(*v11 + v63);
            if (*(_BYTE *)(*v11 + v63))
              v75 = v62 < 2;
            else
              v75 = 0;
            if (v75)
            {
              *(_BYTE *)(v73 + v63) = 0;
              v73 = *v11;
              v74 = *(unsigned __int8 *)(*v11 + v63);
            }
            if (v74)
              v76 = 0;
            else
              v76 = v62 == v72;
            if (v76)
              *(_BYTE *)(v73 + v63) = 1;
          }
          v60 += v82;
          v59 += v82;
        }
        while (v60 < v96);
        v58 += v82;
        v57 += v82;
      }
      while (v58 < v83);
    }
    else
    {
      v49 = v82 - v96 + a4;
      v50 = a3;
      do
      {
        if (v50 == a3)
        {
          v51 = 0;
          do
          {
            if ((_DWORD)v51 && v49 + (_DWORD)v51)
            {
              v52 = *v11 + (int)v4[2] * (uint64_t)a3 + a4;
              if (*(_BYTE *)(v52 + v51))
                *(_BYTE *)(v52 + v51) = 0;
            }
            v51 += v82;
          }
          while (a4 + (int)v51 < v96);
        }
        else
        {
          v53 = a4;
          if (v50 == v48)
          {
            v54 = 0;
            do
            {
              if ((_DWORD)v54)
              {
                if (v49 + (_DWORD)v54)
                {
                  v56 = *v11 + (int)v4[2] * (uint64_t)v48 + a4;
                  if (*(_BYTE *)(v56 + v54))
                    *(_BYTE *)(v56 + v54) = 0;
                }
              }
              v54 += v82;
            }
            while (a4 + (int)v54 < v96);
          }
          else
          {
            do
            {
              v55 = *v11 + (int)v4[2] * (uint64_t)v50;
              if (*(_BYTE *)(v55 + v53))
                *(_BYTE *)(v55 + v53) = 0;
              v53 += v82;
            }
            while ((int)v53 < v96);
          }
        }
        v50 += v82;
      }
      while (v50 < v83);
    }
  }
  return result;
}

uint64_t vp9_set_speed_features_framesize_dependent(uint64_t result, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v9;

  *(_QWORD *)(result + 740032) = 0x80000;
  *(_DWORD *)(result + 740040) = 80;
  *(_DWORD *)(result + 740064) = 0;
  *(_DWORD *)(result + 740048) = 0;
  v2 = *(_DWORD *)(result + 190072);
  if ((int)a2 >= 1 && v2 == 2)
  {
    v3 = *(_DWORD *)(result + 171988);
    if (v3 >= *(_DWORD *)(result + 171992))
      v3 = *(_DWORD *)(result + 171992);
    if (v3 < 720)
    {
      LOBYTE(v4) = 24;
      *(_DWORD *)(result + 739728) = 24;
      if (a2 < 2)
        goto LABEL_24;
      v4 = 30;
      *(_DWORD *)(result + 739728) = 30;
      if (a2 >= 5)
        goto LABEL_17;
    }
    else
    {
      if (*(_DWORD *)(result + 172976))
        v4 = 63;
      else
        v4 = 31;
      *(_DWORD *)(result + 739728) = v4;
      if (a2 > 1)
      {
        *(_DWORD *)(result + 739728) = v4;
        if (a2 >= 5)
        {
LABEL_17:
          *(_DWORD *)(result + 740040) = 200;
          v5 = 0x800000;
          if (v3 > 719)
            v5 = 0x2000000;
          *(_QWORD *)(result + 740032) = v5;
          if (a2 >= 7)
          {
            if (v3 <= 719)
              v6 = 300;
            else
              v6 = 800;
            *(_DWORD *)(result + 740012) = v6;
          }
        }
      }
    }
  }
  else
  {
    v4 = *(_DWORD *)(result + 739728);
  }
  if (v4 == 63)
    *(_DWORD *)(result + 739780) = 0;
LABEL_24:
  v7 = *(_DWORD *)(result + 740208);
  if (v2 == 2 && v7 != 0)
  {
    v9 = *(_DWORD *)(result + 740012);
    if (v9 > v7)
      *(_DWORD *)(result + 740208) = v9;
  }
  if ((v4 & 1) != 0)
  {
    *(_DWORD *)(result + 199032) = 0x7FFFFFFF;
    if ((v4 & 2) == 0)
    {
LABEL_32:
      if ((v4 & 4) == 0)
        goto LABEL_33;
      goto LABEL_40;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_32;
  }
  *(_DWORD *)(result + 199036) = 0x7FFFFFFF;
  if ((v4 & 4) == 0)
  {
LABEL_33:
    if ((v4 & 8) == 0)
      goto LABEL_34;
    goto LABEL_41;
  }
LABEL_40:
  *(_DWORD *)(result + 199040) = 0x7FFFFFFF;
  if ((v4 & 8) == 0)
  {
LABEL_34:
    if ((v4 & 0x10) == 0)
      goto LABEL_35;
    goto LABEL_42;
  }
LABEL_41:
  *(_DWORD *)(result + 199044) = 0x7FFFFFFF;
  if ((v4 & 0x10) == 0)
  {
LABEL_35:
    if ((v4 & 0x20) == 0)
      goto LABEL_36;
LABEL_43:
    *(_DWORD *)(result + 199052) = 0x7FFFFFFF;
    if (*(_DWORD *)(result + 739600))
      return result;
    goto LABEL_44;
  }
LABEL_42:
  *(_DWORD *)(result + 199048) = 0x7FFFFFFF;
  if ((v4 & 0x20) != 0)
    goto LABEL_43;
LABEL_36:
  if (*(_DWORD *)(result + 739600))
    return result;
LABEL_44:
  if (*(_DWORD *)(result + 850340))
  {
    if (*(int *)(result + 190348) >= 2)
      *(_DWORD *)(result + 739596) = 0;
  }
  return result;
}

void vp9_set_speed_features_framesize_independent(uint64_t a1, unsigned int a2)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  _BOOL8 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  _DWORD *v24;
  _BOOL4 v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t (*v39)(uint64_t, __int16 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, unsigned int *, uint64_t, uint8x16_t *, int, int);
  uint64_t v40;
  int v41;
  uint64_t (*v42)(uint64_t, __int16 *, __int16 *, int);
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  size_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  size_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  _BOOL4 v61;
  __int128 v62;
  int v63;
  _BOOL4 v64;
  int v65;
  int v66;
  int32x4_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  BOOL v79;
  char v80;
  int v81;
  int v82;
  int v83;
  char v84;
  int v85;
  uint64_t v86;
  char v88;
  char v89;
  int v90;
  int v91;
  int v92;
  int v93;
  char v94;
  char v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int *v103;
  int v104;
  _DWORD *v105;
  int *v106;
  char *v107;
  void *__b;
  _DWORD *v109;

  v3 = 0;
  v109 = (_DWORD *)(a1 + 842128);
  v4 = a1 + 739864;
  v5 = a1 + 739528;
  v6 = (_DWORD *)(a1 + 189844);
  *(_DWORD *)(a1 + 739528) = 1;
  *(_QWORD *)(a1 + 739576) = 0x300000001;
  *(_QWORD *)(a1 + 739540) = 0x200000000;
  *(_DWORD *)(a1 + 739548) = 0;
  if (!*(_DWORD *)(a1 + 190140))
    v3 = *(_DWORD *)(a1 + 190136) == 0;
  *(_OWORD *)(a1 + 739780) = 0u;
  v7 = !v3;
  *(_DWORD *)(a1 + 739584) = v7;
  *(_QWORD *)(a1 + 739532) = 0;
  *(_QWORD *)(a1 + 739568) = 6;
  *(_DWORD *)(a1 + 739668) = 0;
  *(_DWORD *)(a1 + 739736) = 1;
  *(_QWORD *)(a1 + 739696) = 0;
  *(_OWORD *)(a1 + 739796) = 0u;
  *(_DWORD *)(a1 + 739812) = 0;
  *(_WORD *)(a1 + 739704) = 13;
  *(_WORD *)(a1 + 739716) = 0;
  *(_BYTE *)(a1 + 739718) = 12;
  *(_OWORD *)(a1 + 739720) = xmmword_208F50A40;
  *(_QWORD *)(a1 + 739824) = 0;
  *(_QWORD *)(a1 + 739816) = 0;
  *(_QWORD *)(a1 + 739656) = 0x4058C00000000000;
  *(_DWORD *)(a1 + 739624) = v7;
  *(_QWORD *)(a1 + 739632) = 0x4058C00000000000;
  v8 = *(_DWORD *)(a1 + 190344);
  *(_DWORD *)(a1 + 739640) = 1;
  *(_QWORD *)(a1 + 739644) = v8;
  *(_QWORD *)(a1 + 739708) = 0;
  *(_DWORD *)(a1 + 740184) = 0;
  __b = (void *)(a1 + 739832);
  memset_pattern16((void *)(a1 + 739832), &unk_208F50AA0, 0x10uLL);
  memset_pattern16((void *)(a1 + 739848), &unk_208F50AA0, 0x10uLL);
  *(_QWORD *)(v4 + 52) = 0;
  *(_DWORD *)(v5 + 76) = 0;
  *(_QWORD *)(v5 + 84) = 0x100000000;
  *(_QWORD *)(v4 + 60) = 0;
  *(_OWORD *)(v5 + 148) = xmmword_208F50A50;
  *(_DWORD *)(v5 + 248) = 0;
  *(_DWORD *)(v4 + 68) = 0;
  memset_pattern16((void *)(a1 + 739936), &unk_208F50AB0, 0x34uLL);
  *(_QWORD *)(v4 + 224) = 0;
  v9 = (_DWORD *)(v4 + 224);
  *(_BYTE *)(v4 + 136) = 12;
  *(_BYTE *)(v5 + 164) = 6;
  *(_QWORD *)(v4 + 140) = 50;
  *(_DWORD *)(v4 + 148) = 0;
  *(_QWORD *)(v4 + 124) = 0xC00000000;
  *(_DWORD *)(v4 + 132) = 25;
  *(_BYTE *)(v4 + 152) = 4;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(a1 + 740072) = -1;
  *(_QWORD *)(a1 + 740080) = -1;
  *(_DWORD *)(v4 + 204) = 0;
  *(_QWORD *)(v4 + 296) = 0x700000002;
  *(_QWORD *)(v5 + 64) = 0x100000000;
  *(_QWORD *)(v4 + 156) = 1;
  *(_DWORD *)(v5 + 144) = 2;
  if (*(_DWORD *)(v4 + 2216) == 1)
    v10 = 0x100000;
  else
    v10 = 0x7FFFFFFF;
  v11 = *(_DWORD *)(v4 + 2216) != 1;
  *(_DWORD *)(v5 + 212) = v10;
  *(_DWORD *)(v5 + 216) = 64;
  v12 = (char *)&best_quality_mesh_pattern + 32 * v11;
  *(_DWORD *)(v5 + 220) = *((_DWORD *)v12 + 1);
  *(_DWORD *)(v5 + 224) = 28;
  *(_DWORD *)(v5 + 228) = *((_DWORD *)v12 + 3);
  *(_QWORD *)(v5 + 232) = 0x10000000FLL;
  *(_QWORD *)(v5 + 240) = 0x100000007;
  if (v6[57] == 2)
  {
    v13 = a1 + 850376;
    v14 = a1 + 834668;
    v15 = (int *)(a1 + 738568);
    v16 = a1 + 172304;
    v17 = (int *)(a1 + 171988);
    v18 = a1 + 171696;
    v19 = *(_DWORD *)(a1 + 172972);
    if (v19)
      v20 = *v15;
    else
      v20 = 0;
    v21 = a2;
    v22 = v6[134];
    *(_DWORD *)(v5 + 60) = 0;
    *(_DWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v4 + 248) = 0;
    v23 = 1;
    *(_DWORD *)(v4 + 124) = 1;
    *(_OWORD *)(v4 + 268) = 0u;
    v24 = (_DWORD *)(v4 + 268);
    *(_QWORD *)(v5 + 112) = 0;
    *(_QWORD *)(v5 + 208) = 0x7FFFFFFF00000000;
    *(_QWORD *)(v4 + 256) = 0;
    *(_OWORD *)(v4 + 284) = 0u;
    *(_DWORD *)(v5 + 264) = 0;
    *(_OWORD *)(v4 + 304) = xmmword_208F05140;
    *(_DWORD *)(v5 + 24) = 0;
    if ((int)a2 < 1)
      goto LABEL_47;
    *(_DWORD *)(v5 + 120) = 1;
    *(_QWORD *)(v5 + 128) = 0;
    *(_DWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    if (v19)
    {
      v25 = *(_BYTE *)(a1 + 172988) == 0;
      v23 = *(_BYTE *)(a1 + 172988) != 0;
    }
    else
    {
      v25 = 0;
    }
    *(_DWORD *)(v5 + 168) = 1;
    *(_DWORD *)(v5 + 172) = v25;
    *(_DWORD *)(v5 + 140) = !v23;
    *(_DWORD *)(v4 + 52) = 1;
    *(_DWORD *)(v5 + 204) = 1;
    *(_DWORD *)(v5 + 252) = 1;
    *(_DWORD *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 68) = 2;
    *(_DWORD *)(v5 + 316) = 7;
    *(_QWORD *)(v5 + 328) = 0x700000007;
    if (a2 < 2)
      goto LABEL_47;
    if (v19)
      v26 = 58;
    else
      v26 = 0;
    *(_DWORD *)(v5 + 296) = v26;
    *(_DWORD *)(v5 + 252) = 2;
    v27 = *(_DWORD *)(a1 + 747520);
    v28 = v27 - 1;
    *(_DWORD *)(v5 + 156) = v27 == 1;
    if (v27 == 1 && (*(_DWORD *)(a1 + 842096) == 1 || v6[78] == 2))
    {
      v29 = *(int *)(a1 + 194512);
      if ((_DWORD)v29 != -1 && *(_DWORD *)(a1 + 4 * v29 + 172048) != -1 && (*(_BYTE *)(a1 + 739520) & 1) != 0)
      {
        v30 = *(_DWORD *)(a1 + 172128);
        if (v30 != -1)
        {
          v31 = *(_DWORD *)(a1 + 172132);
          if (v31 != -1 && (v30 != 0x4000 || v31 != 0x4000))
            *(_DWORD *)(v5 + 156) = 0;
        }
      }
      v32 = *(int *)(a1 + 194516);
      if ((_DWORD)v32 != -1
        && *(_DWORD *)(a1 + 4 * v32 + 172048) != -1
        && (*(_BYTE *)(a1 + 739520) & 2) != 0
        && *(_DWORD *)v16 != -1)
      {
        v33 = *(_DWORD *)(a1 + 172308);
        if (v33 != -1 && (*(_DWORD *)v16 != 0x4000 || v33 != 0x4000))
          *(_DWORD *)(v5 + 156) = 0;
      }
      v34 = *(int *)(a1 + 194520);
      if ((_DWORD)v34 != -1 && *(_DWORD *)(a1 + 4 * v34 + 172048) != -1 && (*(_BYTE *)(a1 + 739520) & 4) != 0)
      {
        v35 = *(_DWORD *)(a1 + 172480);
        if (v35 != -1)
        {
          v36 = *(_DWORD *)(a1 + 172484);
          if (v36 != -1 && (v35 != 0x4000 || v36 != 0x4000))
            *(_DWORD *)(v5 + 156) = 0;
        }
      }
    }
    *(_DWORD *)(v5 + 300) = 50;
    *(_DWORD *)(v5 + 64) = 2;
    *(_DWORD *)(v5 + 184) = 1;
    *(_DWORD *)(v5 + 136) = 7;
    *(_QWORD *)(v5 + 192) = 0x300000001;
    *(_QWORD *)(v5 + 148) = 0xB00000001;
    *(_DWORD *)(v5 + 312) = 7;
    if (a2 < 3)
      goto LABEL_47;
    *(_DWORD *)(v5 + 172) = 1;
    *(_DWORD *)(v5 + 300) = 100;
    *(_DWORD *)(v5 + 76) = 1;
    *(_DWORD *)(v5 + 16) = 0;
    *(_DWORD *)(v5 + 68) = 4;
    *(_DWORD *)(v5 + 152) = 6;
    *(_DWORD *)(v5 + 84) = 0;
    *(_DWORD *)(v5 + 56) = 0;
    *(_DWORD *)(v5 + 200) = 63;
    *(_QWORD *)(v4 + 56) = 0x200000001;
    if (a2 == 3)
    {
LABEL_47:
      v37 = v19;
      goto LABEL_48;
    }
    v100 = v28;
    v104 = v22;
    v103 = (int *)(a1 + 747512);
    v106 = (int *)(a1 + 171988);
    v107 = (char *)(a1 + 850376);
    v101 = v20;
    v102 = v6[62];
    if (!v102 && (int)v6[61] >= 1)
      *v24 = 1;
    v105 = (_DWORD *)(v4 + 268);
    *(_DWORD *)(v5 + 20) = 1;
    memset_pattern16(__b, &unk_208F50A90, 0x10uLL);
    memset_pattern16((void *)(a1 + 739848), &unk_208F1A9B0, 0x10uLL);
    *(_DWORD *)(v5 + 316) = 1;
    v61 = v19 != 0;
    *(_DWORD *)(v5 + 48) = 0;
    *(_DWORD *)v5 = 5;
    *(_DWORD *)(v5 + 84) = 0;
    *(_BYTE *)(v4 + 136) = 9;
    *(_DWORD *)(v4 + 124) = 0;
    *(_DWORD *)(v5 + 284) = v61;
    *(_QWORD *)&v62 = 0x340000003400;
    *((_QWORD *)&v62 + 1) = 0x340000003400;
    *(_OWORD *)(v4 + 108) = v62;
    *(_DWORD *)(v5 + 68) = 2;
    *(_DWORD *)(v4 + 64) = v61;
    *(_DWORD *)(v5 + 296) = 16;
    if (v19)
      v63 = 2;
    else
      v63 = 1;
    *(_DWORD *)(v5 + 140) = v63;
    *(_DWORD *)(v5 + 160) = 3;
    v21 = a2;
    if (a2 < 5)
    {
      v37 = v19;
      v14 = a1 + 834668;
      v13 = a1 + 850376;
      v16 = a1 + 172304;
      v18 = a1 + 171696;
      v17 = (int *)(a1 + 171988);
      v15 = (int *)(a1 + 738568);
      v24 = (_DWORD *)(v4 + 268);
      goto LABEL_48;
    }
    v24 = (_DWORD *)(v4 + 268);
    v17 = (int *)(a1 + 171988);
    *v105 = 0;
    *(_DWORD *)(v5 + 184) = v63;
    *(_WORD *)(v5 + 189) = 2307;
    v18 = a1 + 171696;
    v14 = a1 + 834668;
    v16 = a1 + 172304;
    if (v19)
    {
      v64 = v101 % 6 == 1;
      v65 = 15;
    }
    else
    {
      v64 = 1;
      v65 = 20;
    }
    v15 = (int *)(a1 + 738568);
    v66 = v104;
    *(_DWORD *)(v5 + 288) = v64;
    *(_DWORD *)(v5 + 292) = v65;
    *(_DWORD *)(v5 + 160) = 2;
    if (v102)
    {
      *(_OWORD *)(v4 + 108) = v62;
      *(_DWORD *)(v5 + 68) = 2;
      *(_DWORD *)(v4 + 144) = 1;
      *(_QWORD *)(v5 + 84) = 0x400000000;
      *(_DWORD *)(v4 + 64) = v61;
      *(_DWORD *)(v4 + 68) = 1;
      *(_DWORD *)(v5 + 296) = 16;
      *(_DWORD *)(v5 + 140) = v63;
    }
    else
    {
      if ((int)v6[61] >= 1 && *(_DWORD *)(a1 + 738588))
        *(_DWORD *)(v5 + 160) = 3;
      *(_OWORD *)(v4 + 108) = v62;
      *(_DWORD *)(v5 + 68) = 2;
      *(_DWORD *)(v4 + 144) = 1;
      *(_QWORD *)(v5 + 84) = 0x400000000;
      *(_DWORD *)(v4 + 64) = v61;
      *(_DWORD *)(v4 + 68) = 1;
      *(_DWORD *)(v5 + 296) = 16;
      *(_DWORD *)(v5 + 140) = v63;
      *(_DWORD *)(v4 + 224) = 1;
      v9 = (_DWORD *)v5;
    }
    *v9 = 1;
    if (v19)
    {
      if (v104 == 1)
      {
        v67 = vdupq_n_s32(0x207u);
        *(int32x4_t *)v4 = v67;
        *(int32x4_t *)(v4 + 16) = v67;
        *(_OWORD *)(v4 + 32) = xmmword_208F50A70;
        *(_DWORD *)(v4 + 48) = 7;
LABEL_145:
        v68 = 1;
        *(_DWORD *)(v4 + 228) = 1;
        LOBYTE(v69) = v102 != 1;
        goto LABEL_153;
      }
      *(_QWORD *)&v70 = 0x700000007;
      *((_QWORD *)&v70 + 1) = 0x700000007;
      *(_OWORD *)v4 = v70;
      *(_OWORD *)(v4 + 16) = xmmword_208F50A60;
      *(_QWORD *)&v70 = 0x100000001;
      *((_QWORD *)&v70 + 1) = 0x100000001;
      *(_OWORD *)(v4 + 32) = v70;
      LOBYTE(v69) = 1;
      *(_DWORD *)(v4 + 48) = 1;
      if (v102 != 1)
      {
        v68 = 0;
        goto LABEL_153;
      }
    }
    else
    {
      if (v104 == 1)
        goto LABEL_145;
      if (v102 != 1)
      {
        v68 = 0;
        LOBYTE(v69) = 1;
        goto LABEL_153;
      }
    }
    *(_DWORD *)(v4 + 236) = 1;
    v69 = *(_DWORD *)(v4 + 7644);
    if (v69)
    {
      LOBYTE(v69) = 0;
      v68 = 0;
    }
    else
    {
      v68 = 0;
      *(_DWORD *)(v4 + 240) = 1;
    }
LABEL_153:
    v71 = *(_DWORD *)(v4 + 7644);
    if (v71 && *v103 >= 1)
      *(_DWORD *)(v4 + 276) = 1;
    if (!v19)
      goto LABEL_163;
    if (*(_DWORD *)(a1 + 842092))
      LOBYTE(v69) = 1;
    if ((v69 & 1) == 0)
    {
      if (!*(_DWORD *)(a1 + 739112))
      {
        if (v71 || *(_DWORD *)(a1 + 171992) * *(_DWORD *)(a1 + 171988) > 101376 || v104 == 1)
          v72 = 1;
        else
          v72 = 2;
        *(_DWORD *)(v4 + 284) = v72;
      }
    }
    else
    {
LABEL_163:
      if (!v102 && (int)v6[61] >= 1 && *v106 <= 1280 && *(int *)(a1 + 171992) <= 720)
        *(_QWORD *)v105 = 0x100000001;
    }
    v73 = *(_DWORD *)(a1 + 171992) * *(_DWORD *)(a1 + 171988);
    if (v73 <= 921600)
    {
      v74 = *(_DWORD *)(a1 + 842096);
      if (!v74)
      {
LABEL_174:
        *(_DWORD *)(v4 + 252) = 1;
        if (a2 < 6)
        {
LABEL_175:
          v37 = v19;
LABEL_212:
          v13 = a1 + 850376;
          goto LABEL_48;
        }
LABEL_178:
        if (!v102 && (int)v6[61] >= 1)
          *(_QWORD *)v105 = 0x100000001;
        *(_DWORD *)(v5 + 160) = 3;
        *(_QWORD *)v5 = 0x100000001;
        *(_DWORD *)(v5 + 76) = 0;
        if (!v74)
        {
          *(_DWORD *)(v4 + 260) = 1;
          v75 = v73 >= 230401 ? 60000 : 40000;
          *(_DWORD *)(v4 + 264) = v75;
          if (!*(_QWORD *)(a1 + 850384) && (!v71 || *v103 == v100))
          {
            v76 = v68;
            v77 = vpx_calloc((*(int *)(a1 + 173020) >> 3) + (*(int *)(a1 + 173020) >> 3) * (*(int *)(a1 + 173008) >> 3), 1uLL);
            LODWORD(v68) = v76;
            v66 = v104;
            v24 = (_DWORD *)(v4 + 268);
            v17 = (int *)(a1 + 171988);
            v15 = (int *)(a1 + 738568);
            v16 = a1 + 172304;
            v18 = a1 + 171696;
            v14 = a1 + 834668;
            v21 = a2;
            *(_QWORD *)(a1 + 850384) = v77;
            if (!v77)
            {
              vpx_internal_error(a1 + 171696, 2, "Failed to allocate cpi->content_state_sb_fd", v106, v105, v76);
              LODWORD(v68) = v76;
              v66 = v104;
              v24 = (_DWORD *)(v4 + 268);
              v17 = (int *)(a1 + 171988);
              v15 = (int *)(a1 + 738568);
              v16 = a1 + 172304;
              v18 = a1 + 171696;
              v14 = a1 + 834668;
              v21 = a2;
            }
          }
        }
        v78 = v6[62];
        v79 = v66 != 1 && v78 == 1;
        v80 = v79;
        if (v79)
          *(_DWORD *)(v4 + 232) = 1;
        v81 = *(_DWORD *)(a1 + 747516);
        if (v81 >= 1)
        {
          *(_DWORD *)(v5 + 68) = 4;
          *(_DWORD *)(v4 + 236) = 0;
          *(_DWORD *)(v4 + 244) = 1;
        }
        v37 = *(_DWORD *)(v16 + 668);
        if (v37 && v78 == 1 && !*(_DWORD *)(v14 + 7424) && !v15[136])
          *(_DWORD *)(v4 + 284) = 1;
        if (v21 < 7)
          goto LABEL_212;
        *(_DWORD *)(v4 + 260) = 0;
        *(_DWORD *)(v5 + 68) = 3;
        *(_DWORD *)v5 = 6;
        *(_DWORD *)(v5 + 40) = 10;
        v82 = *(_DWORD *)(a1 + 747524);
        if (v81 || v82 < 3)
        {
          if (v81 > 0)
          {
            v84 = 0;
LABEL_217:
            *(_DWORD *)(v4 + 256) = 1;
            if (*(_DWORD *)(v14 + 24))
              *(_DWORD *)(v5 + 12) = 3;
LABEL_219:
            v85 = *(_DWORD *)(v4 + 7644);
            if (v85 && v109[2052] && (int)v6[126] >= 2)
              *(_DWORD *)(v5 + 72) = 1;
            *v107 = 0;
            if (!*(_BYTE *)(a1 + 850377) && !*(_DWORD *)(v14 + 7424) && !*(_DWORD *)(v14 + 7428))
            {
              if (v85)
              {
                v86 = *v103;
                if ((_DWORD)v86 != *(_DWORD *)(a1 + 747520) - 1 || *(_DWORD *)(a1 + 4 * v86 + 834900))
                  goto LABEL_237;
              }
              *(_DWORD *)(v4 + 248) = 1;
              if (v81 != v82 - 1 || v82 <= 1)
                v88 = 2;
              else
                v88 = -1;
              *v107 = v88;
            }
            if (!v85)
              goto LABEL_247;
LABEL_237:
            if (*(_DWORD *)(v14 + 32) && *(_DWORD *)(a1 + 747520) == 3)
            {
              if ((v84 & 1) != 0)
                goto LABEL_247;
              if (v6[38] * v6[37] > 307200)
                *(_DWORD *)(v4 + 280) = 1;
            }
            if (*(_DWORD *)v14)
              v89 = v84;
            else
              v89 = 1;
            if ((v89 & 1) == 0)
              v15[238] &= ~2u;
LABEL_247:
            v91 = *v17;
            v90 = v17[1];
            v92 = v90 * *v17;
            if (v92 > 307200)
              *(_DWORD *)(v5 + 264) = 2;
            v13 = a1 + 850376;
            if (v21 < 8)
            {
LABEL_48:
              if (v37 && v17[1] * *v17 <= 76800 && *(_DWORD *)(v5 + 160) == 3 && v15[13] >= 209 && *v6 >= 9u)
                *(_DWORD *)(v4 + 288) = 1;
              if (*(_DWORD *)(v4 + 304))
                *(_DWORD *)(v5 + 160) = 5;
              if (!*v24)
                goto LABEL_62;
              if (v37 && v15[5])
              {
                *(_DWORD *)(v5 + 160) = 1;
                *(_BYTE *)(v5 + 164) = 12;
              }
              if (*(_QWORD *)(v13 + 40))
              {
                if (*(_QWORD *)(v13 + 48))
                  goto LABEL_62;
LABEL_112:
                v53 = v13;
                v54 = (*(int *)(v16 + 716) >> 3) + (*(int *)(v16 + 716) >> 3) * (*(int *)(v16 + 704) >> 3);
                v55 = v54;
                v56 = v14;
                if (v54)
                {
                  if (v54 < 0)
                    goto LABEL_121;
                  if ((unint64_t)(v54 + 23) > 0x10000000000)
                    goto LABEL_121;
                  v57 = v18;
                  v58 = malloc_type_malloc(v54 + 23, 0x74AD08B5uLL);
                  v18 = v57;
                  if (!v58)
                    goto LABEL_121;
                }
                else
                {
                  v59 = v18;
                  v58 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
                  v18 = v59;
                  if (!v58)
                    goto LABEL_121;
                }
                v60 = ((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF0;
                *(_QWORD *)(v60 - 8) = v58;
                if (v60)
                {
                  bzero((void *)(((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF0), v55);
                  v13 = v53;
                  *(_QWORD *)(v53 + 48) = v60;
                  v21 = a2;
                  v14 = v56;
                  if (!*(_BYTE *)(v56 + 621))
                    goto LABEL_64;
                  goto LABEL_63;
                }
LABEL_121:
                v13 = v53;
                *(_QWORD *)(v53 + 48) = 0;
                vpx_internal_error(v18, 2, "Failed to allocate cpi->count_lastgolden_frame_usage", v17);
                v21 = a2;
                v14 = v56;
                if (!*(_BYTE *)(v56 + 621))
                {
LABEL_64:
                  if (v6[134] == 1 && (int)v6[53] > 4 && (*(_DWORD *)(v14 + 488) || *(_DWORD *)(v14 + 232)))
                  {
                    *(_DWORD *)v5 = 1;
                    *(_DWORD *)(v5 + 40) = 2;
                  }
                  if ((int)v21 < 4 && v6[76] == 3)
                    v6[76] = 0;
                  if (v6[57] != *(_DWORD *)(v13 + 420))
                    *(_DWORD *)(v4 + 276) = 1;
                  goto LABEL_74;
                }
LABEL_63:
                *(_DWORD *)(v5 + 160) = 1;
                *(_BYTE *)(v5 + 164) = 12;
                goto LABEL_64;
              }
              v45 = v18;
              v46 = v13;
              v47 = (*(int *)(v16 + 716) >> 3) + (*(int *)(v16 + 716) >> 3) * (*(int *)(v16 + 704) >> 3);
              v48 = v47;
              v49 = v16;
              v50 = v14;
              if (v47)
              {
                if (v47 < 0)
                  goto LABEL_110;
                if ((unint64_t)(v47 + 23) > 0x10000000000)
                  goto LABEL_110;
                v51 = malloc_type_malloc(v47 + 23, 0x74AD08B5uLL);
                if (!v51)
                  goto LABEL_110;
              }
              else
              {
                v51 = malloc_type_malloc(0x17uLL, 0x74AD08B5uLL);
                if (!v51)
                  goto LABEL_110;
              }
              v52 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0;
              *(_QWORD *)(v52 - 8) = v51;
              if (v52)
              {
                bzero((void *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF0), v48);
                v13 = v46;
                *(_QWORD *)(v46 + 40) = v52;
                v21 = a2;
                v14 = v50;
                v18 = v45;
                goto LABEL_111;
              }
LABEL_110:
              v13 = v46;
              *(_QWORD *)(v46 + 40) = 0;
              vpx_internal_error(v45, 2, "Failed to allocate cpi->count_arf_frame_usage", v17);
              v18 = v45;
              v21 = a2;
              v14 = v50;
LABEL_111:
              v16 = v49;
              if (!*(_QWORD *)(v13 + 48))
                goto LABEL_112;
LABEL_62:
              if (!*(_BYTE *)(v14 + 621))
                goto LABEL_64;
              goto LABEL_63;
            }
            *(_DWORD *)(v5 + 68) = 4;
            *(_DWORD *)(v5 + 76) = 1;
            if (*(int *)(a1 + 747520) < 2 || (v93 = *(_DWORD *)(v14 + 760)) != 0)
              v93 = 1;
            *(_DWORD *)(v4 + 276) = v93;
            if (!v85)
              *v107 = 4;
            if (v109[2052] && (int)v6[126] >= 2)
              *(_DWORD *)(v5 + 72) = 1;
            if (v37 && v92 < 101377 && !*(_BYTE *)(v16 + 684))
              *(_DWORD *)(v4 + 304) = 1;
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 190440) + 152) & 8) != 0)
            {
              *(_DWORD *)(v4 + 304) = 0;
              if ((_DWORD)v68)
              {
LABEL_264:
                *(_DWORD *)(v5 + 20) = 2;
                *(_DWORD *)(v4 + 316) = 1;
                v94 = v80 ^ 1;
                if (v85)
                  v94 = 1;
                if ((v94 & 1) != 0)
                  goto LABEL_267;
                goto LABEL_273;
              }
            }
            else if ((_DWORD)v68)
            {
              goto LABEL_264;
            }
            *(_DWORD *)(v4 + 316) = 1;
            v95 = v80 ^ 1;
            if (v85)
              v95 = 1;
            if ((v95 & 1) != 0)
            {
LABEL_267:
              *(_DWORD *)(v4 + 236) = 0;
              *(_DWORD *)(v4 + 256) = 1;
              if (v92 <= 101376)
                goto LABEL_283;
              goto LABEL_281;
            }
LABEL_273:
            *(_DWORD *)(v4 + 232) = 3;
            if (v90 >= 720 && v91 >= 1280)
            {
              if (*v109)
              {
                v96 = v109[2];
                v97 = v109[3];
                if (v96 > v97 || v96 > 2 * v97)
                  *(_DWORD *)(v4 + 232) = 2;
              }
            }
            if (v92 <= 101376)
            {
              *(_DWORD *)(v5 + 68) = 2;
              *(_DWORD *)(v4 + 236) = 0;
              *(_DWORD *)(v4 + 256) = 1;
LABEL_283:
              if (v21 < 9)
                goto LABEL_48;
              v98 = v90;
              if (v19)
              {
                v99 = v91;
                memset_pattern16((void *)(a1 + 739864), &unk_208F1A9B0, 0x34uLL);
                v91 = v99;
                v24 = (_DWORD *)(v4 + 268);
                v17 = (int *)(a1 + 171988);
                v15 = (int *)(a1 + 738568);
                v16 = a1 + 172304;
                v18 = a1 + 171696;
                v14 = a1 + 834668;
                v21 = a2;
              }
              *(_DWORD *)(v5 + 264) = 2;
              *(_OWORD *)(v5 + 24) = xmmword_208F50A80;
              if (v37 && v91 >= 320 && v98 >= 240)
                *(_DWORD *)(v4 + 288) = 1;
              if (v78 == 1)
              {
                *(_DWORD *)(v4 + 292) = 1;
                if (v15[126] > 69)
                  goto LABEL_292;
              }
              else if (v15[126] > 69)
              {
LABEL_292:
                if (v92 <= 230399)
                  goto LABEL_48;
LABEL_296:
                *(_DWORD *)(v4 + 308) = 2;
                goto LABEL_48;
              }
              *(_BYTE *)(v4 + 152) = 3;
              if (v92 <= 230399)
                goto LABEL_48;
              goto LABEL_296;
            }
            *(_DWORD *)(v5 + 68) = 1;
            *(_DWORD *)(v4 + 236) = 0;
            *(_DWORD *)(v4 + 256) = 1;
LABEL_281:
            *(_DWORD *)(v5 + 264) = 2;
            goto LABEL_283;
          }
          v83 = *v103;
        }
        else
        {
          v83 = *v103;
          if (!*v103 || v6[38] * v6[37] < 230401)
          {
            *(_DWORD *)v5 = 1;
            *(_DWORD *)(v5 + 40) = 6;
          }
        }
        v84 = 1;
        if (v83 < 2)
          goto LABEL_219;
        goto LABEL_217;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 264) = 2;
      v74 = *(_DWORD *)(a1 + 842096);
      if (!v74)
        goto LABEL_174;
    }
    if (a2 < 6)
      goto LABEL_175;
    goto LABEL_178;
  }
LABEL_74:
  *(_QWORD *)(v4 + 592) = vp9_diamond_search_sad_neon;
  v38 = v6[58];
  if (v38 != 1)
  {
    if (v38)
      goto LABEL_78;
    *(_DWORD *)(v5 + 52) = 0;
  }
  *(_DWORD *)(v5 + 56) = 0;
LABEL_78:
  if (*(_DWORD *)(v5 + 20) == 3)
  {
    v39 = vp9_skip_sub_pixel_tree;
  }
  else
  {
    v40 = *(int *)(v5 + 12);
    if (v40 > 3)
      goto LABEL_83;
    v39 = (uint64_t (*)(uint64_t, __int16 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, unsigned int *, uint64_t, uint8x16_t *, int, int))*(&off_24C0D6B00 + v40);
  }
  *(_QWORD *)(v4 + 424) = v39;
LABEL_83:
  v41 = v6[142];
  if (v41 == 1)
  {
    v42 = vp9_return_max_sub_pixel_mv;
  }
  else
  {
    if (v41 != 2)
      goto LABEL_88;
    v42 = vp9_return_min_sub_pixel_mv;
  }
  *(_QWORD *)(v4 + 424) = v42;
LABEL_88:
  v44 = v38 != 1 && *(_DWORD *)(v5 + 56) == 1;
  *(_DWORD *)(a1 + 131408) = v44;
  *(_WORD *)(a1 + 74852) = *(_WORD *)(v5 + 189);
  if (v6[81])
  {
    if (*(_DWORD *)(v5 + 72))
      return;
  }
  else
  {
    *(_DWORD *)(v5 + 292) = 0;
    if (*(_DWORD *)(v5 + 72))
      return;
  }
  if (v109[2053])
  {
    if ((int)v6[126] >= 2)
      *(_DWORD *)(v5 + 68) = 0;
  }
}

uint64_t vp9_write_prob_diff_update(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  int v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  unsigned int v174;
  int v175;
  int v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  uint64_t v190;

  v3 = a2 ^ 0xFF;
  v4 = 2 * ((a3 ^ 0xFF) - (a2 ^ 0xFF)) - 1;
  if (a3 >= a2)
    v4 = 2 * ((a2 ^ 0xFF) - (a3 ^ 0xFF));
  if (v3 <= 2 * (a3 ^ 0xFF))
    v3 = v4;
  v5 = 2 * (a3 - a2) - 1;
  if (a2 >= a3)
    v5 = 2 * (a2 - a3);
  if ((int)(a2 - 1) <= (int)(2 * (a3 - 1)))
    v6 = v5;
  else
    v6 = a2 - 1;
  if (a3 <= 0x80)
    v3 = v6;
  v7 = remap_prob_map_table[v3 - 1];
  v8 = *(_DWORD *)(result + 4);
  v9 = *(_DWORD *)(result + 8);
  v10 = ((v8 << 7) - 128) >> 8;
  v11 = v8 - (v10 + 1);
  if (v7 < 0x10)
    v12 = v10 + 1;
  else
    v12 = v11;
  if (v7 >= 0x10)
    v13 = v10 + 1;
  else
    v13 = 0;
  v14 = v13 + *(_DWORD *)result;
  v15 = vpx_norm[v12];
  v16 = v9 + v15;
  if (v9 + v15 < 0)
  {
    v19 = v9 + v15;
    LOBYTE(v16) = vpx_norm[v12];
    goto LABEL_32;
  }
  if (!*(_DWORD *)(result + 12))
  {
    LODWORD(v17) = *(_DWORD *)(result + 16);
    if (((v14 << ~(_BYTE)v9) & 0x80000000) != 0)
    {
      v20 = v17 - 1;
      if ((int)v17 >= 1)
      {
        while (1)
        {
          v17 = (v17 - 1);
          v21 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v21 + v17) != 255)
            break;
          *(_BYTE *)(v21 + v17) = 0;
          if ((int)v17 <= 0)
          {
            v20 = -1;
            goto LABEL_29;
          }
        }
        v20 = v17;
      }
LABEL_29:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v20);
      LODWORD(v17) = *(_DWORD *)(result + 16);
      if (v17 < *(_DWORD *)(result + 20))
        goto LABEL_22;
    }
    else if (v17 < *(_DWORD *)(result + 20))
    {
LABEL_22:
      v18 = *(_QWORD *)(result + 24);
      *(_DWORD *)(result + 16) = v17 + 1;
      *(_BYTE *)(v18 + v17) = v14 >> (v9 + 24);
      goto LABEL_31;
    }
    *(_DWORD *)(result + 12) = 1;
  }
LABEL_31:
  v14 = (v14 << -(char)v9) & 0xFFFFFF;
  v19 = v16 - 8;
LABEL_32:
  v22 = v12 << v15;
  *(_DWORD *)(result + 4) = v22;
  *(_DWORD *)(result + 8) = v19;
  v23 = v14 << v16;
  *(_DWORD *)result = v14 << v16;
  v24 = (v22 << 7) - 128;
  if (v7 <= 0xF)
  {
    v25 = v24 >> 8;
    v26 = v22 - (v25 + 1);
    if ((v7 & 8) == 0)
      v26 = v25 + 1;
    v27 = v23 + ((v25 + 1) & ((int)(v7 << 28) >> 31));
    v28 = vpx_norm[v26];
    v29 = v19 + v28;
    if (v19 + v28 < 0)
    {
      v41 = v19 + v28;
      LOBYTE(v29) = vpx_norm[v26];
      goto LABEL_127;
    }
    if (*(_DWORD *)(result + 12))
    {
LABEL_126:
      v27 = (v27 << -(char)v19) & 0xFFFFFF;
      v41 = v29 - 8;
LABEL_127:
      v97 = v26 << v28;
      v98 = v27 << v29;
      *(_DWORD *)(result + 4) = v97;
      *(_DWORD *)(result + 8) = v41;
      *(_DWORD *)result = v27 << v29;
      v99 = ((v97 << 7) - 128) >> 8;
      v100 = v97 - (v99 + 1);
      if ((v7 & 4) == 0)
        v100 = v99 + 1;
      v101 = v98 + ((v99 + 1) & ((int)(v7 << 29) >> 31));
      v102 = vpx_norm[v100];
      v103 = v41 + v102;
      if (v41 + v102 < 0)
      {
        v106 = v41 + v102;
        LOBYTE(v103) = vpx_norm[v100];
        goto LABEL_158;
      }
      if (*(_DWORD *)(result + 12))
      {
LABEL_157:
        v101 = (v101 << -(char)v41) & 0xFFFFFF;
        v106 = v103 - 8;
LABEL_158:
        v120 = v100 << v102;
        v121 = v101 << v103;
        *(_DWORD *)(result + 4) = v120;
        *(_DWORD *)(result + 8) = v106;
        *(_DWORD *)result = v121;
        v122 = ((v120 << 7) - 128) >> 8;
        v123 = v120 - (v122 + 1);
        if ((v7 & 2) == 0)
          v123 = v122 + 1;
        v124 = v121 + ((v122 + 1) & ((int)(v7 << 30) >> 31));
        v125 = vpx_norm[v123];
        v126 = v106 + v125;
        if (v106 + v125 < 0)
        {
          v129 = v106 + v125;
          LOBYTE(v126) = vpx_norm[v123];
          goto LABEL_174;
        }
        if (*(_DWORD *)(result + 12))
        {
LABEL_173:
          v124 = (v124 << -(char)v106) & 0xFFFFFF;
          v129 = v126 - 8;
LABEL_174:
          v132 = v123 << v125;
          v133 = v124 << v126;
          *(_DWORD *)(result + 4) = v132;
          *(_DWORD *)(result + 8) = v129;
          *(_DWORD *)result = v133;
          v134 = ((v132 << 7) - 128) >> 8;
          v135 = (int)(v7 << 31) >> 31;
          v136 = v132 - (v134 + 1);
          if ((v7 & 1) != 0)
            v137 = v136;
          else
            v137 = v134 + 1;
          v138 = v133 + (v135 & (v134 + 1));
          v139 = vpx_norm[v137];
          v140 = v129 + v139;
          if (v129 + v139 >= 0)
          {
            v141 = -v129;
            if (!*(_DWORD *)(result + 12))
            {
              LODWORD(v142) = *(_DWORD *)(result + 16);
              if (((v138 << ~(_BYTE)v129) & 0x80000000) == 0)
                goto LABEL_262;
              v143 = v142 - 1;
              if ((int)v142 < 1)
                goto LABEL_261;
              while (1)
              {
                v142 = (v142 - 1);
                v144 = *(_QWORD *)(result + 24);
                if (*(unsigned __int8 *)(v144 + v142) != 255)
                  goto LABEL_260;
                *(_BYTE *)(v144 + v142) = 0;
                if ((int)v142 <= 0)
                  goto LABEL_258;
              }
            }
            goto LABEL_265;
          }
          goto LABEL_259;
        }
        LODWORD(v127) = *(_DWORD *)(result + 16);
        if (((v124 << ~(_BYTE)v106) & 0x80000000) != 0)
        {
          v130 = v127 - 1;
          if ((int)v127 >= 1)
          {
            while (1)
            {
              v127 = (v127 - 1);
              v131 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v131 + v127) != 255)
                break;
              *(_BYTE *)(v131 + v127) = 0;
              if ((int)v127 <= 0)
              {
                v130 = -1;
                goto LABEL_171;
              }
            }
            v130 = v127;
          }
LABEL_171:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v130);
          LODWORD(v127) = *(_DWORD *)(result + 16);
          if (v127 < *(_DWORD *)(result + 20))
            goto LABEL_164;
        }
        else if (v127 < *(_DWORD *)(result + 20))
        {
LABEL_164:
          v128 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v127 + 1;
          *(_BYTE *)(v128 + v127) = v124 >> (v106 + 24);
          goto LABEL_173;
        }
        *(_DWORD *)(result + 12) = 1;
        goto LABEL_173;
      }
      LODWORD(v104) = *(_DWORD *)(result + 16);
      if (((v101 << ~(_BYTE)v41) & 0x80000000) != 0)
      {
        v107 = v104 - 1;
        if ((int)v104 >= 1)
        {
          while (1)
          {
            v104 = (v104 - 1);
            v108 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v108 + v104) != 255)
              break;
            *(_BYTE *)(v108 + v104) = 0;
            if ((int)v104 <= 0)
            {
              v107 = -1;
              goto LABEL_155;
            }
          }
          v107 = v104;
        }
LABEL_155:
        ++*(_BYTE *)(*(_QWORD *)(result + 24) + v107);
        LODWORD(v104) = *(_DWORD *)(result + 16);
        if (v104 < *(_DWORD *)(result + 20))
          goto LABEL_133;
      }
      else if (v104 < *(_DWORD *)(result + 20))
      {
LABEL_133:
        v105 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v104 + 1;
        *(_BYTE *)(v105 + v104) = v101 >> (v41 + 24);
        goto LABEL_157;
      }
      *(_DWORD *)(result + 12) = 1;
      goto LABEL_157;
    }
    LODWORD(v30) = *(_DWORD *)(result + 16);
    if (((v27 << ~(_BYTE)v19) & 0x80000000) != 0)
    {
      v92 = v30 - 1;
      if ((int)v30 >= 1)
      {
        while (1)
        {
          v30 = (v30 - 1);
          v93 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v93 + v30) != 255)
            break;
          *(_BYTE *)(v93 + v30) = 0;
          if ((int)v30 <= 0)
          {
            v92 = -1;
            goto LABEL_124;
          }
        }
        v92 = v30;
      }
LABEL_124:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v92);
      LODWORD(v30) = *(_DWORD *)(result + 16);
      if (v30 < *(_DWORD *)(result + 20))
        goto LABEL_39;
    }
    else if (v30 < *(_DWORD *)(result + 20))
    {
LABEL_39:
      v31 = *(_QWORD *)(result + 24);
      *(_DWORD *)(result + 16) = v30 + 1;
      *(_BYTE *)(v31 + v30) = v27 >> (v19 + 24);
      goto LABEL_126;
    }
    *(_DWORD *)(result + 12) = 1;
    goto LABEL_126;
  }
  v32 = v24 >> 8;
  v33 = v22 - ((v24 >> 8) + 1);
  if (v7 >= 0x20)
  {
    v34 = v32 + 1;
  }
  else
  {
    v33 = v32 + 1;
    v34 = 0;
  }
  v35 = v23 + v34;
  v36 = vpx_norm[v33];
  v37 = v19 + v36;
  if (v19 + v36 >= 0)
  {
    v38 = -v19;
    if (*(_DWORD *)(result + 12))
      goto LABEL_142;
    LODWORD(v39) = *(_DWORD *)(result + 16);
    if (((v35 << ~(_BYTE)v19) & 0x80000000) != 0)
    {
      v94 = v39 - 1;
      if ((int)v39 >= 1)
      {
        while (1)
        {
          v39 = (v39 - 1);
          v95 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v95 + v39) != 255)
            break;
          *(_BYTE *)(v95 + v39) = 0;
          if ((int)v39 <= 0)
          {
            v94 = -1;
            goto LABEL_140;
          }
        }
        v94 = v39;
      }
LABEL_140:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v94);
      LODWORD(v39) = *(_DWORD *)(result + 16);
      if (v39 < *(_DWORD *)(result + 20))
        goto LABEL_47;
    }
    else if (v39 < *(_DWORD *)(result + 20))
    {
LABEL_47:
      v40 = *(_QWORD *)(result + 24);
      *(_DWORD *)(result + 16) = v39 + 1;
      *(_BYTE *)(v40 + v39) = v35 >> (v19 + 24);
      goto LABEL_142;
    }
    *(_DWORD *)(result + 12) = 1;
LABEL_142:
    v42 = v37 - 8;
    v43 = v33 << v36;
    *(_DWORD *)(result + 4) = v43;
    *(_DWORD *)(result + 8) = v37 - 8;
    v44 = ((v35 << v38) & 0xFFFFFF) << v37;
    *(_DWORD *)result = v44;
    if (v7 <= 0x1F)
    {
LABEL_143:
      v109 = ((v43 << 7) - 128) >> 8;
      v110 = v109 + 1;
      v111 = v43 - (v109 + 1);
      if ((v7 & 8) != 0)
        v112 = v111;
      else
        v112 = v109 + 1;
      v113 = v44 + (v110 & ((int)(v7 << 28) >> 31));
      v114 = vpx_norm[v112];
      v115 = v42 + v114;
      if (v42 + v114 < 0)
      {
        v119 = v42 + v114;
        LOBYTE(v115) = vpx_norm[v112];
      }
      else
      {
        if (!*(_DWORD *)(result + 12))
        {
          LODWORD(v116) = *(_DWORD *)(result + 16);
          if (((v113 << ~(_BYTE)v42) & 0x80000000) != 0)
          {
            v117 = v116 - 1;
            if ((int)v116 >= 1)
            {
              while (1)
              {
                v116 = (v116 - 1);
                v118 = *(_QWORD *)(result + 24);
                if (*(unsigned __int8 *)(v118 + v116) != 255)
                  break;
                *(_BYTE *)(v118 + v116) = 0;
                if ((int)v116 <= 0)
                {
                  v117 = -1;
                  goto LABEL_212;
                }
              }
              v117 = v116;
            }
LABEL_212:
            ++*(_BYTE *)(*(_QWORD *)(result + 24) + v117);
            LODWORD(v116) = *(_DWORD *)(result + 16);
          }
          if (v116 >= *(_DWORD *)(result + 20))
          {
            *(_DWORD *)(result + 12) = 1;
          }
          else
          {
            v157 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v116 + 1;
            *(_BYTE *)(v157 + v116) = v113 >> (v42 + 24);
          }
        }
        v113 = (v113 << -(char)v42) & 0xFFFFFF;
        v119 = v115 - 8;
      }
      v158 = v112 << v114;
      v159 = v113 << v115;
      *(_DWORD *)(result + 4) = v158;
      *(_DWORD *)(result + 8) = v119;
      *(_DWORD *)result = v113 << v115;
      v160 = ((v158 << 7) - 128) >> 8;
      v161 = v158 - (v160 + 1);
      if ((v7 & 4) == 0)
        v161 = v160 + 1;
      v162 = v159 + ((v160 + 1) & ((int)(v7 << 29) >> 31));
      v163 = vpx_norm[v161];
      v164 = v119 + v163;
      if (v119 + v163 < 0)
      {
        v168 = v119 + v163;
        LOBYTE(v164) = vpx_norm[v161];
      }
      else
      {
        if (!*(_DWORD *)(result + 12))
        {
          LODWORD(v165) = *(_DWORD *)(result + 16);
          if (((v162 << ~(_BYTE)v119) & 0x80000000) != 0)
          {
            v166 = v165 - 1;
            if ((int)v165 >= 1)
            {
              while (1)
              {
                v165 = (v165 - 1);
                v167 = *(_QWORD *)(result + 24);
                if (*(unsigned __int8 *)(v167 + v165) != 255)
                  break;
                *(_BYTE *)(v167 + v165) = 0;
                if ((int)v165 <= 0)
                {
                  v166 = -1;
                  goto LABEL_228;
                }
              }
              v166 = v165;
            }
LABEL_228:
            ++*(_BYTE *)(*(_QWORD *)(result + 24) + v166);
            LODWORD(v165) = *(_DWORD *)(result + 16);
          }
          if (v165 >= *(_DWORD *)(result + 20))
          {
            *(_DWORD *)(result + 12) = 1;
          }
          else
          {
            v169 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v165 + 1;
            *(_BYTE *)(v169 + v165) = v162 >> (v119 + 24);
          }
        }
        v162 = (v162 << -(char)v119) & 0xFFFFFF;
        v168 = v164 - 8;
      }
      v170 = v161 << v163;
      v171 = v162 << v164;
      *(_DWORD *)(result + 4) = v170;
      *(_DWORD *)(result + 8) = v168;
      *(_DWORD *)result = v171;
      v172 = ((v170 << 7) - 128) >> 8;
      v173 = v170 - (v172 + 1);
      if ((v7 & 2) == 0)
        v173 = v172 + 1;
      v174 = v171 + ((v172 + 1) & ((int)(v7 << 30) >> 31));
      v175 = vpx_norm[v173];
      v176 = v168 + v175;
      if (v168 + v175 < 0)
      {
        v129 = v168 + v175;
        LOBYTE(v176) = vpx_norm[v173];
      }
      else
      {
        if (!*(_DWORD *)(result + 12))
        {
          LODWORD(v177) = *(_DWORD *)(result + 16);
          if (((v174 << ~(_BYTE)v168) & 0x80000000) != 0)
          {
            v178 = v177 - 1;
            if ((int)v177 >= 1)
            {
              while (1)
              {
                v177 = (v177 - 1);
                v179 = *(_QWORD *)(result + 24);
                if (*(unsigned __int8 *)(v179 + v177) != 255)
                  break;
                *(_BYTE *)(v179 + v177) = 0;
                if ((int)v177 <= 0)
                {
                  v178 = -1;
                  goto LABEL_244;
                }
              }
              v178 = v177;
            }
LABEL_244:
            ++*(_BYTE *)(*(_QWORD *)(result + 24) + v178);
            LODWORD(v177) = *(_DWORD *)(result + 16);
          }
          if (v177 >= *(_DWORD *)(result + 20))
          {
            *(_DWORD *)(result + 12) = 1;
          }
          else
          {
            v180 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v177 + 1;
            *(_BYTE *)(v180 + v177) = v174 >> (v168 + 24);
          }
        }
        v174 = (v174 << -(char)v168) & 0xFFFFFF;
        v129 = v176 - 8;
      }
      v181 = v173 << v175;
      v182 = v174 << v176;
      *(_DWORD *)(result + 4) = v181;
      *(_DWORD *)(result + 8) = v129;
      *(_DWORD *)result = v182;
      v183 = ((v181 << 7) - 128) >> 8;
      v184 = (int)(v7 << 31) >> 31;
      v185 = v181 - (v183 + 1);
      if ((v7 & 1) != 0)
        v137 = v185;
      else
        v137 = v183 + 1;
      v138 = v182 + (v184 & (v183 + 1));
      v139 = vpx_norm[v137];
      v140 = v129 + v139;
      if (v129 + v139 >= 0)
      {
        v141 = -v129;
        if (!*(_DWORD *)(result + 12))
        {
          LODWORD(v142) = *(_DWORD *)(result + 16);
          if (((v138 << ~(_BYTE)v129) & 0x80000000) == 0)
            goto LABEL_262;
          v143 = v142 - 1;
          if ((int)v142 < 1)
          {
LABEL_261:
            ++*(_BYTE *)(*(_QWORD *)(result + 24) + v143);
            LODWORD(v142) = *(_DWORD *)(result + 16);
LABEL_262:
            if (v142 >= *(_DWORD *)(result + 20))
            {
              *(_DWORD *)(result + 12) = 1;
            }
            else
            {
              v187 = *(_QWORD *)(result + 24);
              *(_DWORD *)(result + 16) = v142 + 1;
              *(_BYTE *)(v187 + v142) = v138 >> (v129 + 24);
            }
            goto LABEL_265;
          }
          while (1)
          {
            v142 = (v142 - 1);
            v186 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v186 + v142) != 255)
              break;
            *(_BYTE *)(v186 + v142) = 0;
            if ((int)v142 <= 0)
            {
LABEL_258:
              v143 = -1;
              goto LABEL_261;
            }
          }
LABEL_260:
          v143 = v142;
          goto LABEL_261;
        }
LABEL_265:
        v138 = (v138 << v141) & 0xFFFFFF;
        v96 = v140 - 8;
        goto LABEL_266;
      }
LABEL_259:
      v96 = v140;
      LOBYTE(v140) = v139;
LABEL_266:
      v188 = v137 << v139;
      v189 = v138 << v140;
      goto LABEL_267;
    }
    goto LABEL_50;
  }
  v42 = v19 + v36;
  v43 = v33 << v36;
  *(_DWORD *)(result + 4) = v43;
  *(_DWORD *)(result + 8) = v42;
  v44 = v35 << v36;
  *(_DWORD *)result = v44;
  if (v7 <= 0x1F)
    goto LABEL_143;
LABEL_50:
  v45 = ((v43 << 7) - 128) >> 8;
  v46 = v43 - (v45 + 1);
  if (v7 >= 0x40)
  {
    v47 = v45 + 1;
  }
  else
  {
    v46 = v45 + 1;
    v47 = 0;
  }
  v48 = v44 + v47;
  v49 = vpx_norm[v46];
  v50 = v42 + v49;
  if (v42 + v49 < 0)
  {
    v55 = v42 + v49;
    v56 = vpx_norm[v46];
    v57 = v46 << v49;
    *(_DWORD *)(result + 4) = v57;
    *(_DWORD *)(result + 8) = v55;
    v58 = v48 << v56;
    *(_DWORD *)result = v58;
    if (v7 <= 0x3F)
    {
LABEL_190:
      v146 = 5;
      while (1)
      {
        v148 = ((v57 << 7) - 128) >> 8;
        v149 = v57 - (v148 + 1);
        if (((1 << (v146 - 1)) & (v7 - 32)) != 0)
        {
          v150 = v148 + 1;
        }
        else
        {
          v149 = v148 + 1;
          v150 = 0;
        }
        v147 = v150 + v58;
        v151 = vpx_norm[v149];
        v152 = v55 + v151;
        if (v55 + v151 < 0)
        {
          v55 += v151;
          LOBYTE(v152) = vpx_norm[v149];
          goto LABEL_193;
        }
        if (!*(_DWORD *)(result + 12))
        {
          LODWORD(v153) = *(_DWORD *)(result + 16);
          if (((v147 << ~(_BYTE)v55) & 0x80000000) != 0)
          {
            v154 = v153 - 1;
            if ((int)v153 >= 1)
            {
              while (1)
              {
                v153 = (v153 - 1);
                v155 = *(_QWORD *)(result + 24);
                if (*(unsigned __int8 *)(v155 + v153) != 255)
                  break;
                *(_BYTE *)(v155 + v153) = 0;
                if ((int)v153 <= 0)
                {
                  v154 = -1;
                  goto LABEL_209;
                }
              }
              v154 = v153;
            }
LABEL_209:
            ++*(_BYTE *)(*(_QWORD *)(result + 24) + v154);
            LODWORD(v153) = *(_DWORD *)(result + 16);
            if (v153 < *(_DWORD *)(result + 20))
            {
LABEL_210:
              v156 = *(_QWORD *)(result + 24);
              *(_DWORD *)(result + 16) = v153 + 1;
              *(_BYTE *)(v156 + v153) = v147 >> (v55 + 24);
              goto LABEL_192;
            }
          }
          else if (v153 < *(_DWORD *)(result + 20))
          {
            goto LABEL_210;
          }
          *(_DWORD *)(result + 12) = 1;
        }
LABEL_192:
        v147 = (v147 << -(char)v55) & 0xFFFFFF;
        v55 = v152 - 8;
LABEL_193:
        v57 = v149 << v151;
        *(_DWORD *)(result + 4) = v57;
        *(_DWORD *)(result + 8) = v55;
        v58 = v147 << v152;
        *(_DWORD *)result = v58;
        v61 = v146-- > 1;
        if (!v61)
          return result;
      }
    }
  }
  else
  {
    v51 = -v42;
    if (!*(_DWORD *)(result + 12))
    {
      LODWORD(v52) = *(_DWORD *)(result + 16);
      if (((v48 << ~(_BYTE)v42) & 0x80000000) != 0)
      {
        v53 = v52 - 1;
        if ((int)v52 >= 1)
        {
          while (1)
          {
            v52 = (v52 - 1);
            v54 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v54 + v52) != 255)
              break;
            *(_BYTE *)(v54 + v52) = 0;
            if ((int)v52 <= 0)
            {
              v53 = -1;
              goto LABEL_185;
            }
          }
          v53 = v52;
        }
LABEL_185:
        ++*(_BYTE *)(*(_QWORD *)(result + 24) + v53);
        LODWORD(v52) = *(_DWORD *)(result + 16);
      }
      if (v52 >= *(_DWORD *)(result + 20))
      {
        *(_DWORD *)(result + 12) = 1;
      }
      else
      {
        v145 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v52 + 1;
        *(_BYTE *)(v145 + v52) = v48 >> (v42 + 24);
      }
    }
    v55 = v50 - 8;
    v57 = v46 << v49;
    *(_DWORD *)(result + 4) = v57;
    *(_DWORD *)(result + 8) = v50 - 8;
    v58 = ((v48 << v51) & 0xFFFFFF) << v50;
    *(_DWORD *)result = v58;
    if (v7 <= 0x3F)
      goto LABEL_190;
  }
  if (v7 <= 0x80)
  {
    v59 = 7;
    while (1)
    {
      v62 = ((v57 << 7) - 128) >> 8;
      v63 = v57 - (v62 + 1);
      if (((1 << (v59 - 1)) & (v7 - 64)) != 0)
      {
        v64 = v62 + 1;
      }
      else
      {
        v63 = v62 + 1;
        v64 = 0;
      }
      v60 = v64 + v58;
      v65 = vpx_norm[v63];
      v66 = v55 + v65;
      if (v55 + v65 < 0)
      {
        v55 += v65;
        LOBYTE(v66) = vpx_norm[v63];
        goto LABEL_65;
      }
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v67) = *(_DWORD *)(result + 16);
        if (((v60 << ~(_BYTE)v55) & 0x80000000) != 0)
        {
          v68 = v67 - 1;
          if ((int)v67 >= 1)
          {
            while (1)
            {
              v67 = (v67 - 1);
              v69 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v69 + v67) != 255)
                break;
              *(_BYTE *)(v69 + v67) = 0;
              if ((int)v67 <= 0)
              {
                v68 = -1;
                goto LABEL_81;
              }
            }
            v68 = v67;
          }
LABEL_81:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v68);
          LODWORD(v67) = *(_DWORD *)(result + 16);
          if (v67 < *(_DWORD *)(result + 20))
          {
LABEL_82:
            v70 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v67 + 1;
            *(_BYTE *)(v70 + v67) = v60 >> (v55 + 24);
            goto LABEL_64;
          }
        }
        else if (v67 < *(_DWORD *)(result + 20))
        {
          goto LABEL_82;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_64:
      v60 = (v60 << -(char)v55) & 0xFFFFFF;
      v55 = v66 - 8;
LABEL_65:
      v57 = v63 << v65;
      *(_DWORD *)(result + 4) = v57;
      *(_DWORD *)(result + 8) = v55;
      v58 = v60 << v66;
      *(_DWORD *)result = v58;
      v61 = v59-- > 1;
      if (!v61)
        return result;
    }
  }
  v71 = v7 - 129;
  v72 = 7;
  do
  {
    v74 = ((v57 << 7) - 128) >> 8;
    v75 = v57 - (v74 + 1);
    if (((1 << (v72 - 1)) & ((v71 >> 1) + 65)) != 0)
    {
      v76 = v74 + 1;
    }
    else
    {
      v75 = v74 + 1;
      v76 = 0;
    }
    v73 = v76 + v58;
    v77 = vpx_norm[v75];
    v78 = v55 + v77;
    if (v55 + v77 >= 0)
    {
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v79) = *(_DWORD *)(result + 16);
        if (((v73 << ~(_BYTE)v55) & 0x80000000) != 0)
        {
          v80 = v79 - 1;
          if ((int)v79 >= 1)
          {
            while (1)
            {
              v79 = (v79 - 1);
              v81 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v81 + v79) != 255)
                break;
              *(_BYTE *)(v81 + v79) = 0;
              if ((int)v79 <= 0)
              {
                v80 = -1;
                goto LABEL_102;
              }
            }
            v80 = v79;
          }
LABEL_102:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v80);
          LODWORD(v79) = *(_DWORD *)(result + 16);
          if (v79 < *(_DWORD *)(result + 20))
            goto LABEL_103;
        }
        else if (v79 < *(_DWORD *)(result + 20))
        {
LABEL_103:
          v82 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v79 + 1;
          *(_BYTE *)(v82 + v79) = v73 >> (v55 + 24);
          goto LABEL_85;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_85:
      v73 = (v73 << -(char)v55) & 0xFFFFFF;
      v55 = v78 - 8;
      goto LABEL_86;
    }
    v55 += v77;
    LOBYTE(v78) = vpx_norm[v75];
LABEL_86:
    v57 = v75 << v77;
    *(_DWORD *)(result + 4) = v57;
    *(_DWORD *)(result + 8) = v55;
    v58 = v73 << v78;
    *(_DWORD *)result = v58;
    v61 = v72-- > 1;
  }
  while (v61);
  v83 = (int)(v71 << 31) >> 31;
  v84 = ((v57 << 7) - 128) >> 8;
  if ((v71 & 1) != 0)
    v85 = v57 - (v84 + 1);
  else
    v85 = v84 + 1;
  v86 = v58 + (v83 & (v84 + 1));
  v87 = vpx_norm[v85];
  v88 = v55 + v87;
  if (v55 + v87 < 0)
  {
    v96 = v55 + v87;
    LOBYTE(v88) = vpx_norm[v85];
  }
  else
  {
    if (!*(_DWORD *)(result + 12))
    {
      LODWORD(v89) = *(_DWORD *)(result + 16);
      if (((v86 << ~(_BYTE)v55) & 0x80000000) != 0)
      {
        v90 = v89 - 1;
        if ((int)v89 >= 1)
        {
          while (1)
          {
            v89 = (v89 - 1);
            v91 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v91 + v89) != 255)
              break;
            *(_BYTE *)(v91 + v89) = 0;
            if ((int)v89 <= 0)
            {
              v90 = -1;
              goto LABEL_269;
            }
          }
          v90 = v89;
        }
LABEL_269:
        ++*(_BYTE *)(*(_QWORD *)(result + 24) + v90);
        LODWORD(v89) = *(_DWORD *)(result + 16);
      }
      if (v89 >= *(_DWORD *)(result + 20))
      {
        *(_DWORD *)(result + 12) = 1;
      }
      else
      {
        v190 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v89 + 1;
        *(_BYTE *)(v190 + v89) = v86 >> (v55 + 24);
      }
    }
    v86 = (v86 << -(char)v55) & 0xFFFFFF;
    v96 = v88 - 8;
  }
  v188 = v85 << v87;
  v189 = v86 << v88;
LABEL_267:
  *(_DWORD *)(result + 4) = v188;
  *(_DWORD *)(result + 8) = v96;
  *(_DWORD *)result = v189;
  return result;
}

int64_t vp9_prob_diff_update_savings_search(unsigned int *a1, unsigned int a2, _BYTE *a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  int64_t v6;
  unsigned int v7;
  char v8;
  unint64_t v9;
  int64_t result;
  unsigned int v12;
  char v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;

  v4 = *a1;
  v5 = a1[1];
  v6 = vp9_prob_cost[a2] * (unint64_t)*a1 + vp9_prob_cost[256 - a2] * (unint64_t)v5;
  v7 = *a3;
  if (v7 > a2)
    v8 = -1;
  else
    v8 = 1;
  v9 = vp9_prob_cost[256 - a4] - (unint64_t)vp9_prob_cost[a4];
  if (v6 <= (uint64_t)(v9 + 2560) || v7 == a2)
  {
    result = 0;
    *a3 = a2;
  }
  else
  {
    if (a2 >= 0x81)
    {
      result = 0;
      v16 = a2 ^ 0xFF;
      v13 = a2;
      do
      {
        v17 = ~(_BYTE)v7;
        v18 = 2 * (v16 - v17) - 1;
        if (a2 >= v7)
          v18 = 2 * (v17 - v16);
        if (2 * (a2 ^ 0xFF) >= v17)
          v17 = v18;
        if ((uint64_t)(v6
                     - (((unint64_t)update_bits[remap_prob_map_table[v17 - 1]] << 9)
                      + (int)v9)
                     - vp9_prob_cost[256 - v7] * (unint64_t)v5
                     - vp9_prob_cost[v7] * (unint64_t)v4) > result)
        {
          v13 = v7;
          result = v6
                 - (((unint64_t)update_bits[remap_prob_map_table[v17 - 1]] << 9)
                  + (int)v9)
                 - vp9_prob_cost[256 - v7] * (unint64_t)v5
                 - vp9_prob_cost[v7] * (unint64_t)v4;
        }
        LOBYTE(v7) = v7 + v8;
      }
      while (a2 != v7);
    }
    else
    {
      result = 0;
      v12 = a2 - 1;
      v13 = a2;
      do
      {
        v14 = v7 - 1;
        v15 = 2 * (v12 - v14) - 1;
        if (a2 <= v7)
          v15 = 2 * (v14 - v12);
        if ((int)(2 * (a2 - 1)) >= v14)
          v14 = v15;
        if ((uint64_t)(v6
                     - (((unint64_t)update_bits[remap_prob_map_table[v14 - 1]] << 9)
                      + (int)v9)
                     - vp9_prob_cost[256 - v7] * (unint64_t)v5
                     - vp9_prob_cost[v7] * (unint64_t)v4) > result)
        {
          v13 = v7;
          result = v6
                 - (((unint64_t)update_bits[remap_prob_map_table[v14 - 1]] << 9)
                  + (int)v9)
                 - vp9_prob_cost[256 - v7] * (unint64_t)v5
                 - vp9_prob_cost[v7] * (unint64_t)v4;
        }
        LOBYTE(v7) = v7 + v8;
      }
      while (a2 != v7);
    }
    *a3 = v13;
  }
  return result;
}

int64_t vp9_prob_diff_update_savings_search_model(_DWORD *a1, unsigned int a2, _BYTE *a3, unsigned int a4, int a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int64_t v40;
  int v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;

  v5 = a2;
  v6 = *a3;
  v7 = vp9_prob_cost[256 - a4];
  v8 = vp9_prob_cost[a4];
  v9 = (char *)&vp9_pareto8_full + 8 * a2;
  v60 = a1[5];
  v61 = a1[4];
  v58 = a1[7];
  v59 = a1[6];
  v56 = a1[9];
  v57 = a1[8];
  v54 = a1[11];
  v55 = a1[10];
  v52 = a1[13];
  v53 = a1[12];
  v50 = a1[15];
  v51 = a1[14];
  v10 = vp9_prob_cost[a2] * (unint64_t)v61
      + vp9_prob_cost[256 - a2] * (unint64_t)v60
      + vp9_prob_cost[*(v9 - 8)] * (unint64_t)v59
      + vp9_prob_cost[256 - *(v9 - 8)] * (unint64_t)v58
      + vp9_prob_cost[*(v9 - 7)] * (unint64_t)v57
      + vp9_prob_cost[256 - *(v9 - 7)] * (unint64_t)v56
      + vp9_prob_cost[*(v9 - 6)] * (unint64_t)v55
      + vp9_prob_cost[256 - *(v9 - 6)] * (unint64_t)v54
      + vp9_prob_cost[*(v9 - 5)] * (unint64_t)v53
      + vp9_prob_cost[256 - *(v9 - 5)] * (unint64_t)v52
      + vp9_prob_cost[*(v9 - 4)] * (unint64_t)v51
      + vp9_prob_cost[256 - *(v9 - 4)] * (unint64_t)v50;
  v48 = a1[17];
  v49 = a1[16];
  v46 = a1[19];
  v47 = a1[18];
  v44 = a1[21];
  v45 = a1[20];
  v11 = v10
      + vp9_prob_cost[*(v9 - 3)] * (unint64_t)v49
      + vp9_prob_cost[256 - *(v9 - 3)] * (unint64_t)v48
      + vp9_prob_cost[*(v9 - 2)] * (unint64_t)v47
      + vp9_prob_cost[256 - *(v9 - 2)] * (unint64_t)v46
      + vp9_prob_cost[*(v9 - 1)] * (unint64_t)v45
      + vp9_prob_cost[256 - *(v9 - 1)] * (unint64_t)v44;
  v12 = -1;
  if (v6 <= a2)
    v12 = 1;
  v43 = v7 - v8;
  if (v11 > v7 - v8 + 2560 && (v13 = v6 - a2, v13 * v12 < 0))
  {
    result = 0;
    v15 = v12 * a5;
    v42 = a2 ^ 0xFF;
    v16 = v12 * v13;
    v17 = v15 * v12;
    v18 = ~(2 * v6) + 2 * a2;
    v19 = a5 * v12;
    v20 = &vp9_prob_cost[-v6 + 256];
    v21 = &vp9_prob_cost[v6];
    v22 = (unsigned __int8 *)&vp9_pareto8_full + 8 * v6 - 4;
    v23 = v6;
    do
    {
      if ((unint64_t)(v6 - 256) >= 0xFFFFFFFFFFFFFF01)
      {
        v24 = *(v22 - 4);
        v25 = vp9_prob_cost[v24];
        v26 = vp9_prob_cost[256 - v24];
        v27 = *(v22 - 3);
        v28 = v23 ^ 0xFF;
        v29 = 2 * (v42 - (v23 ^ 0xFF)) - 1;
        if (v5 >= v6)
          v29 = 2 * ((v23 ^ 0xFF) - v42);
        if (2 * (v5 ^ 0xFF) >= v28)
          v28 = v29;
        v30 = 2 * (v6 - v5);
        if (v5 > v6)
          v30 = v18;
        v31 = vp9_prob_cost[v27];
        v32 = vp9_prob_cost[256 - v27];
        if ((int)(2 * (v5 - 1)) >= v23 - 1)
          v33 = v30;
        else
          v33 = v6 - 1;
        v34 = *(v22 - 2);
        if (v5 > 0x80)
          v33 = v28;
        v35 = vp9_prob_cost[v34];
        v36 = vp9_prob_cost[256 - v34];
        v37 = *v22;
        v38 = *v21 * (unint64_t)v61
            + *v20 * (unint64_t)v60
            + v25 * (unint64_t)v59
            + v26 * (unint64_t)v58
            + v31 * (unint64_t)v57
            + v32 * (unint64_t)v56
            + v35 * (unint64_t)v55
            + v36 * (unint64_t)v54
            + vp9_prob_cost[*(v22 - 1)] * (unint64_t)v53
            + vp9_prob_cost[256 - *(v22 - 1)] * (unint64_t)v52
            + vp9_prob_cost[v37] * (unint64_t)v51
            + vp9_prob_cost[256 - v37] * (unint64_t)v50;
        v39 = v22[2];
        v40 = v11
            - (v43
             + v38
             + vp9_prob_cost[v22[1]] * (unint64_t)v49
             + vp9_prob_cost[256 - v22[1]] * (unint64_t)v48
             + vp9_prob_cost[v39] * (unint64_t)v47
             + vp9_prob_cost[256 - v39] * (unint64_t)v46
             + vp9_prob_cost[v22[3]] * (unint64_t)v45
             + vp9_prob_cost[256 - v22[3]] * (unint64_t)v44
             + ((unint64_t)update_bits[remap_prob_map_table[v33 - 1]] << 9));
        if (v40 > result)
        {
          result = v40;
          LOBYTE(a2) = v6;
        }
      }
      v6 += v15;
      v16 += v17;
      v23 += v19;
      v18 -= 2 * v19;
      v20 -= v15;
      v21 += v15;
      v22 += 8 * v15;
    }
    while (v16 < 0);
  }
  else
  {
    result = 0;
  }
  *a3 = a2;
  return result;
}

int64_t vp9_cond_prob_diff_update(uint64_t a1, unsigned __int8 *a2, unsigned int *a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int64_t result;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned __int8 v32;
  unsigned __int8 v33;

  v5 = *a3;
  v6 = a3[1] + v5;
  if ((_DWORD)v6)
  {
    v7 = ((unint64_t)(v6 >> 1) + (v5 << 8)) / v6;
    v8 = ((_DWORD)v7 == 0) | ((255 - v7) >> 23) | v7;
  }
  else
  {
    LOBYTE(v8) = 0x80;
  }
  v33 = v8;
  result = vp9_prob_diff_update_savings_search(a3, *a2, &v33, 0xFCu);
  v11 = *(_DWORD *)(a1 + 4);
  v10 = *(_DWORD *)(a1 + 8);
  v12 = *(_DWORD *)a1;
  v13 = ((252 * v11 - 252) >> 8) + 1;
  if (result)
  {
    v14 = v11 - v13;
    v15 = v13 + v12;
    v16 = vpx_norm[v14];
    v17 = v10 + v16;
    if (v10 + v16 < 0)
    {
      v24 = v10 + v16;
      LOBYTE(v17) = vpx_norm[v14];
LABEL_29:
      *(_DWORD *)(a1 + 4) = v14 << v16;
      *(_DWORD *)(a1 + 8) = v24;
      *(_DWORD *)a1 = v15 << v17;
      v32 = v33;
      result = vp9_write_prob_diff_update(a1, v33, *a2);
      *a2 = v32;
      return result;
    }
    if (*(_DWORD *)(a1 + 12))
    {
LABEL_28:
      v15 = (v15 << -(char)v10) & 0xFFFFFF;
      v24 = v17 - 8;
      goto LABEL_29;
    }
    if (((v15 << ~(_BYTE)v10) & 0x80000000) != 0)
    {
      LODWORD(v26) = *(_DWORD *)(a1 + 16);
      v27 = v26 - 1;
      if ((int)v26 >= 1)
      {
        while (1)
        {
          v26 = (v26 - 1);
          v28 = *(_QWORD *)(a1 + 24);
          if (*(unsigned __int8 *)(v28 + v26) != 255)
            break;
          *(_BYTE *)(v28 + v26) = 0;
          if ((int)v26 <= 0)
          {
            v27 = -1;
            goto LABEL_26;
          }
        }
        v27 = v26;
      }
LABEL_26:
      ++*(_BYTE *)(*(_QWORD *)(a1 + 24) + v27);
      v18 = *(unsigned int *)(a1 + 16);
      if (v18 < *(_DWORD *)(a1 + 20))
        goto LABEL_9;
    }
    else
    {
      v18 = *(unsigned int *)(a1 + 16);
      if (v18 < *(_DWORD *)(a1 + 20))
      {
LABEL_9:
        v19 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 16) = v18 + 1;
        *(_BYTE *)(v19 + v18) = v15 >> (v10 + 24);
        goto LABEL_28;
      }
    }
    *(_DWORD *)(a1 + 12) = 1;
    goto LABEL_28;
  }
  v20 = vpx_norm[v13];
  v21 = v10 + v20;
  if (v10 + v20 >= 0)
  {
    if (*(_DWORD *)(a1 + 12))
    {
LABEL_33:
      v12 = (v12 << -(char)v10) & 0xFFFFFF;
      v25 = v21 - 8;
      goto LABEL_34;
    }
    if (((v12 << ~(_BYTE)v10) & 0x80000000) != 0)
    {
      LODWORD(v29) = *(_DWORD *)(a1 + 16);
      v30 = v29 - 1;
      if ((int)v29 >= 1)
      {
        while (1)
        {
          v29 = (v29 - 1);
          v31 = *(_QWORD *)(a1 + 24);
          if (*(unsigned __int8 *)(v31 + v29) != 255)
            break;
          *(_BYTE *)(v31 + v29) = 0;
          if ((int)v29 <= 0)
          {
            v30 = -1;
            goto LABEL_31;
          }
        }
        v30 = v29;
      }
LABEL_31:
      ++*(_BYTE *)(*(_QWORD *)(a1 + 24) + v30);
      v22 = *(unsigned int *)(a1 + 16);
      if (v22 < *(_DWORD *)(a1 + 20))
        goto LABEL_14;
    }
    else
    {
      v22 = *(unsigned int *)(a1 + 16);
      if (v22 < *(_DWORD *)(a1 + 20))
      {
LABEL_14:
        v23 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 16) = v22 + 1;
        *(_BYTE *)(v23 + v22) = v12 >> (v10 + 24);
        goto LABEL_33;
      }
    }
    *(_DWORD *)(a1 + 12) = 1;
    goto LABEL_33;
  }
  v25 = v10 + v20;
  LOBYTE(v21) = vpx_norm[v13];
LABEL_34:
  *(_DWORD *)(a1 + 4) = (_DWORD)v13 << v20;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)a1 = v12 << v21;
  return result;
}

void vp9_init_layer_context(uint64_t a1)
{
  uint64_t v1;
  int *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  uint64x2_t v17;
  uint64x2_t v18;
  uint64x2_t v19;
  uint64x2_t v20;
  uint64x2_t v21;
  uint64x2_t v22;
  uint64x2_t v23;
  uint64x2_t v24;
  uint64x2_t v25;
  uint64x2_t v26;
  uint64x2_t v27;
  uint64x2_t v28;
  uint64x2_t v29;
  uint64x2_t v30;
  uint64x2_t v31;
  uint64x2_t v32;
  uint64x2_t v33;
  uint64x2_t v34;
  uint64x2_t v35;
  uint64x2_t v36;
  uint64x2_t v37;
  uint64x2_t v38;
  uint64x2_t v39;
  uint64x2_t v40;
  uint64x2_t v41;
  uint64x2_t v42;
  uint64x2_t v43;
  uint64x2_t v44;
  uint64x2_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int8x16_t v50;
  uint64x2_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int16x8_t v54;
  int32x4_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int16x8_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  unint64_t v68;
  unint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  unint64_t v72;
  int8x16_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int16x8_t v81;
  unint64_t v82;
  int16x8_t v83;
  unint64_t v84;
  unint64_t v85;
  int16x8_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int32x4_t v89;
  int16x8_t v90;
  int32x4_t v91;
  int8x16_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int8x16_t v96;
  int32x4_t v97;
  unint64_t v98;
  int32x4_t v99;
  unint64_t v100;
  int8x16_t v101;
  unint64_t v102;
  int8x16_t v103;
  int8x16_t v104;
  __int16 v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  BOOL v110;
  BOOL v112;
  BOOL v114;
  int8x16_t v115;
  int8x8_t v116;
  BOOL v118;
  BOOL v120;
  __int16 v121;
  BOOL v123;
  int8x16_t v124;
  int8x8_t v125;
  __int16 v126;
  int8x16_t v127;
  BOOL v129;
  int8x16_t v130;
  int8x8_t v131;
  BOOL v133;
  __int16 v134;
  BOOL v136;
  BOOL v138;
  BOOL v140;
  BOOL v142;
  BOOL v144;
  BOOL v146;
  int32x4_t v147;
  _OWORD *v148;
  _QWORD *v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  _OWORD *v155;
  _OWORD *v156;
  _OWORD *v157;
  _OWORD *v158;
  _OWORD *v159;
  _OWORD *v160;
  _OWORD *v161;
  uint64_t v162;
  _DWORD *v163;
  _BYTE *v164;
  _DWORD *v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  void *v186;
  _QWORD *v187;
  void **v188;
  uint64_t v189;
  size_t v190;
  void *v191;
  void *v192;
  _QWORD *v193;
  void **v194;
  void *v195;
  void *v196;
  int v197;
  unint64_t v199;
  unint64_t v200;
  uint64x2_t v201;
  int8x16_t v202;
  BOOL v203;
  uint64_t v204;
  BOOL v205;
  uint64x2_t v206;
  BOOL v207;
  int8x16_t v208;
  unint64_t v209;
  int8x16_t v210;
  uint64_t v211;
  size_t v212;
  size_t size;
  int *__attribute__((__org_typedef(jmp_buf))) v214;
  int *v215;
  _DWORD *v216;
  int v217;
  uint64_t v218;
  int v219;
  int v220;
  uint64_t v221;
  uint64_t v222;

  v1 = a1;
  v2 = (int *)(a1 + 172012);
  v3 = *(_DWORD *)(a1 + 173008);
  v4 = *(_DWORD *)(a1 + 173016);
  v5 = a1 + 747512;
  v219 = *(_DWORD *)(a1 + 747520);
  *(_QWORD *)(a1 + 747512) = 0;
  v6 = a1 + 834660;
  *(_QWORD *)(a1 + 834660) = 0x100000000;
  *(_DWORD *)(a1 + 834668) = 0;
  *(_QWORD *)(a1 + 751896) = 0;
  *(_DWORD *)(a1 + 834700) = 0;
  *(_QWORD *)(a1 + 834692) = 0;
  *(_DWORD *)(a1 + 834688) = 0;
  *(_DWORD *)(a1 + 834892) = 0;
  *(_QWORD *)(a1 + 835144) = 0;
  *(_WORD *)(a1 + 835288) = 0;
  *(_BYTE *)(a1 + 835290) = 0;
  *(_DWORD *)(a1 + 835300) = 0;
  *(_QWORD *)(a1 + 835232) = -1;
  *(_QWORD *)(a1 + 835240) = -1;
  *(_OWORD *)(a1 + 835424) = 0u;
  *(_QWORD *)(a1 + 835291) = 0;
  v7 = a1 + 171696;
  v222 = a1 + 189936;
  v8 = *(unsigned int *)(a1 + 190188);
  v211 = a1 + 747512;
  v214 = (int *)(a1 + 171696);
  if ((int)v8 < 1)
    goto LABEL_114;
  v9 = *(_DWORD *)(a1 + 190128);
  if (v8 < 0x80)
  {
    v10 = 0;
    goto LABEL_112;
  }
  v215 = (int *)(a1 + 172012);
  v217 = v4;
  v220 = v3;
  v11 = a1 + 4 * v8 + 834468;
  v12 = a1 + 834516;
  v13 = a1 + 834564;
  v14 = a1 + 834712;
  v15.i64[0] = a1 + 834704;
  v16.i64[0] = a1 + 834468;
  v17.i64[0] = a1 + 834468;
  v18.i64[0] = a1 + 834948;
  v19.i64[0] = a1 + 834948;
  v19.i64[1] = a1 + 834612;
  v20.i64[0] = a1 + 834468;
  v20.i64[1] = a1 + 834612;
  v21.i64[0] = a1 + 834468;
  v22.i64[0] = a1 + 834612;
  v23.i64[0] = a1 + 834612;
  v23.i64[1] = a1 + 835212;
  v24.i64[0] = a1 + 834704;
  v24.i64[1] = a1 + 835212;
  v25.i64[0] = a1 + 834948;
  v26.i64[0] = a1 + 834948;
  v26.i64[1] = a1 + 835212;
  v27.i64[0] = a1 + 834948;
  v27.i64[1] = a1 + 835248;
  v18.i64[1] = a1 + 834516;
  v28.i64[0] = a1 + 834468;
  v28.i64[1] = a1 + 834712;
  v16.i64[1] = a1 + 835212;
  v29.i64[0] = v11 + 244;
  v30.i64[0] = v11 + 244;
  v30.i64[1] = v11 + 576;
  v206 = v30;
  v29.i64[1] = v11 + 624;
  v31.i64[0] = v11 + 528;
  v32.i64[0] = v11 + 528;
  v32.i64[1] = v11 + 576;
  v33.i64[0] = v11 + 528;
  v33.i64[1] = v11 + 624;
  v34.i64[0] = v11 + 96;
  v35.i64[0] = v11 + 96;
  v35.i64[1] = v11 + 576;
  v36.i64[0] = v11 + 576;
  v37.i64[0] = v11 + 576;
  v37.i64[1] = v11 + 624;
  v38.i64[0] = v11 + 96;
  v38.i64[1] = v11 + 624;
  v39.i64[0] = v11 + 624;
  v40.i64[0] = v11 + 576;
  v41.i64[0] = v11 + 96;
  v42.i64[0] = v8 + 834468 + a1 + 236;
  v43.i64[0] = v11 + 528;
  v44.i64[0] = v11 + 528;
  v45.i64[0] = v11 + 528;
  v31.i64[1] = v11;
  v46 = (int32x4_t)vcgtq_u64(v31, v16);
  v31.i64[0] = v42.i64[0];
  v31.i64[1] = v11;
  v30.i64[0] = v11 + 96;
  v47 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v31, v28), v46);
  v31.i64[0] = v11 + 96;
  v34.i64[1] = v11;
  v28.i64[0] = v11 + 624;
  v28.i64[1] = v11;
  v48 = (int32x4_t)vcgtq_u64(v28, v18);
  v28.i64[0] = v11 + 576;
  v49 = (int16x8_t)vuzp1q_s32(v48, (int32x4_t)vcgtq_u64(v34, v20));
  v34.i64[0] = v11 + 576;
  v50 = (int8x16_t)vuzp1q_s16(v49, v47);
  v49.i64[0] = v11 + 576;
  v36.i64[1] = v11 + 480;
  v51.i64[0] = a1 + 835212;
  v45.i64[1] = v11 + 480;
  v20.i64[0] = a1 + 835212;
  v20.i64[1] = a1 + 835248;
  v17.i64[1] = a1 + 835248;
  v25.i64[1] = a1 + 834712;
  v52 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v45, v26), (int32x4_t)vcgtq_u64(v36, v27));
  v26.i64[0] = v42.i64[0];
  v26.i64[1] = v11 + 480;
  v53 = (int32x4_t)vcgtq_u64(v26, v25);
  v36.i64[0] = a1 + 834612;
  v36.i64[1] = a1 + 835248;
  v31.i64[1] = v11 + 480;
  v26.i64[0] = a1 + 835212;
  v54 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v31, v19), v53);
  v53.i64[0] = a1 + 834704;
  v53.i64[1] = a1 + 835248;
  v45.i64[0] = a1 + 835248;
  v209 = a1 + 835248;
  v210 = vuzp1q_s8((int8x16_t)vuzp1q_s16(v54, v52), v50);
  v52.i64[0] = a1 + 835248;
  v49.i64[1] = v42.i64[0];
  v31.i64[0] = a1 + 835212;
  v44.i64[1] = v42.i64[0];
  v55 = (int32x4_t)vcgtq_u64(v44, v24);
  v44.i64[0] = a1 + 834612;
  v56 = (int16x8_t)vuzp1q_s32(v55, (int32x4_t)vcgtq_u64((uint64x2_t)v49, (uint64x2_t)v53));
  v55.i64[0] = a1 + 834612;
  v22.i64[1] = a1 + 834712;
  v34.i64[1] = v11 + 144;
  v53.i64[0] = v11 + 624;
  v53.i64[1] = v42.i64[0];
  v57 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v34, v36), (int32x4_t)vcgtq_u64((uint64x2_t)v53, v22));
  v34.i64[0] = a1 + 835248;
  v58 = (int8x16_t)vuzp1q_s16(v57, v56);
  v36.i64[0] = a1 + 835212;
  v43.i64[1] = v11 + 144;
  v57.i64[0] = v42.i64[0];
  v57.i64[1] = v11 + 144;
  v59 = (int32x4_t)vcgtq_u64((uint64x2_t)v57, v22);
  v57.i64[0] = a1 + 835212;
  v60 = (int16x8_t)vuzp1q_s32(v59, (int32x4_t)vcgtq_u64(v43, v23));
  v53.i64[0] = a1 + 835248;
  v51.i64[1] = a1 + 834564;
  v45.i64[1] = a1 + 834564;
  v61 = (int32x4_t)vcgtq_u64(v38, v45);
  v43.i64[0] = v11 + 48;
  v45.i64[0] = v11 + 48;
  v45.i64[1] = v11 + 576;
  v62 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v35, v51), v61);
  v35.i64[0] = a1 + 834704;
  v35.i64[1] = a1 + 834712;
  v26.i64[1] = a1 + 834712;
  v52.i64[1] = a1 + 834712;
  v55.i64[1] = a1 + 834564;
  v208 = vuzp1q_s8((int8x16_t)vuzp1q_s16(v62, v60), v58);
  v58.i64[0] = a1 + 834712;
  v204 = a1 + 834712;
  v58.i64[1] = a1 + 834564;
  v30.i64[1] = v11 + 528;
  v63 = (int32x4_t)vcgtq_u64(v30, (uint64x2_t)v58);
  v38.i64[0] = v11 + 48;
  v41.i64[1] = v42.i64[0];
  v200 = v42.i64[0];
  v64 = (int32x4_t)vcgtq_u64(v41, (uint64x2_t)v55);
  v55.i64[0] = v11 + 48;
  v43.i64[1] = v11 + 624;
  v53.i64[1] = a1 + 834516;
  v65 = (int32x4_t)vcgtq_u64(v43, (uint64x2_t)v53);
  v53.i64[0] = a1 + 835092;
  v50.i64[0] = a1 + 835092;
  v50.i64[1] = a1 + 835248;
  v201 = (uint64x2_t)v50;
  v57.i64[1] = a1 + 834516;
  v41.i64[0] = a1 + 834712;
  v41.i64[1] = a1 + 834516;
  v55.i64[1] = v11 + 528;
  v66 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v45, (uint64x2_t)v57), v65), (int16x8_t)vuzp1q_s32(v64, v63));
  v67 = (int32x4_t)vcgtq_u64((uint64x2_t)v55, v41);
  v55.i64[0] = a1 + 835092;
  v57.i64[0] = a1 + 835092;
  v41.i64[0] = a1 + 835092;
  v68 = a1 + 834468;
  v53.i64[1] = a1 + 834468;
  v69 = a1 + 835044;
  v36.i64[1] = a1 + 835044;
  v21.i64[1] = a1 + 834516;
  v44.i64[1] = a1 + 834516;
  v38.i64[1] = v42.i64[0];
  v65.i64[0] = v11 + 624;
  v28.i64[1] = v11;
  v70 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v38, v44), v67);
  v44.i64[0] = v11 + 624;
  v44.i64[1] = v11 + 96;
  v202 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v28, v17), (int32x4_t)vcgtq_u64(v44, v21)), v70), v66);
  v39.i64[1] = v11 + 780;
  v71 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v39, v36), (int32x4_t)vcgtq_u64(v37, (uint64x2_t)v50));
  v66.i64[0] = a1 + 834564;
  v37.i64[0] = a1 + 834564;
  v28.i64[0] = a1 + 834564;
  v36.i64[0] = a1 + 834564;
  v44.i64[0] = a1 + 834564;
  v38.i64[0] = a1 + 834564;
  v66.i64[1] = a1 + 834468;
  v72 = a1 + 834996;
  v31.i64[1] = a1 + 834996;
  v34.i64[1] = a1 + 834996;
  v40.i64[1] = v11 + 744;
  v73 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v33, v34), (int32x4_t)vcgtq_u64(v40, v20)), v71);
  v74 = (int32x4_t)vcgtq_u64(v32, v31);
  v75 = (int32x4_t)vcgtq_u64(v29, (uint64x2_t)v52);
  v52.i64[0] = a1 + 834996;
  v64.i64[0] = a1 + 834996;
  v21.i64[0] = a1 + 834996;
  v40.i64[0] = a1 + 834996;
  v20.i64[0] = a1 + 834996;
  v31.i64[0] = a1 + 834996;
  v52.i64[1] = a1 + 834468;
  v65.i64[1] = v11 + 528;
  v76 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v65, v35), (int32x4_t)vcgtq_u64(v206, v26)), (int16x8_t)vuzp1q_s32(v75, v74)), v73);
  v65.i64[0] = a1 + 834704;
  v73.i64[0] = v11;
  v74.i64[0] = v11;
  v75.i64[0] = v11;
  v34.i64[0] = v11;
  v35.i64[0] = v11;
  v73.i64[1] = v11 + 744;
  v77 = (int32x4_t)vcgtq_u64((uint64x2_t)v73, (uint64x2_t)v52);
  v52.i64[0] = a1 + 834704;
  v15.i64[1] = a1 + 834468;
  v35.i64[1] = v11 + 244;
  v78 = (int32x4_t)vcgtq_u64(v35, v15);
  v35.i64[0] = v11 + 480;
  v79 = (int16x8_t)vuzp1q_s32(v78, v77);
  v29.i64[0] = v11 + 480;
  v34.i64[1] = v11 + 144;
  v80 = (int32x4_t)vcgtq_u64(v34, (uint64x2_t)v66);
  v66.i64[0] = v11 + 480;
  v78.i64[0] = v11 + 480;
  v77.i64[0] = v11 + 480;
  v35.i64[1] = v11 + 48;
  v81 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v35, (uint64x2_t)v53), v80);
  v80.i64[0] = a1 + 835044;
  v35.i64[0] = a1 + 835044;
  v62.i64[0] = a1 + 835044;
  v17.i64[0] = a1 + 835044;
  v60.i64[0] = a1 + 835044;
  v50.i64[0] = a1 + 835044;
  v82 = a1 + 834948;
  v80.i64[1] = a1 + 834948;
  v77.i64[1] = v11 + 780;
  v31.i64[1] = a1 + 834948;
  v78.i64[1] = v11 + 744;
  v83 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v78, v31), (int32x4_t)vcgtq_u64((uint64x2_t)v77, (uint64x2_t)v80));
  v52.i64[1] = a1 + 834948;
  v66.i64[1] = v11 + 244;
  v38.i64[1] = a1 + 834948;
  v29.i64[1] = v11 + 144;
  v84 = a1 + 834612;
  v65.i64[1] = a1 + 834612;
  v40.i64[1] = a1 + 834612;
  v60.i64[1] = a1 + 834612;
  v41.i64[1] = a1 + 834704;
  v20.i64[1] = a1 + 834704;
  v50.i64[1] = a1 + 834704;
  v85 = a1 + 834704;
  v86 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v29, v38), (int32x4_t)vcgtq_u64((uint64x2_t)v66, (uint64x2_t)v52));
  v29.i64[0] = v42.i64[0];
  v87 = (int8x16_t)vuzp1q_s16(v86, v83);
  v86.i64[0] = v11 + 144;
  v88 = vuzp1q_s8(v87, (int8x16_t)vuzp1q_s16(v81, v79));
  v79.i64[0] = v42.i64[0];
  v42.i64[1] = v11 + 780;
  v89 = (int32x4_t)vcgtq_u64(v42, (uint64x2_t)v50);
  v42.i64[0] = v11 + 144;
  v79.i64[1] = v11 + 744;
  v81.i64[0] = v11 + 144;
  v90 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v79, v20), v89);
  v79.i64[0] = v11 + 144;
  v79.i64[1] = v11 + 780;
  v91 = (int32x4_t)vcgtq_u64((uint64x2_t)v79, (uint64x2_t)v60);
  v79.i64[0] = v11 + 144;
  v86.i64[1] = v11 + 244;
  v36.i64[1] = a1 + 835044;
  v199 = a1 + 835092;
  v44.i64[1] = a1 + 835092;
  v20.i64[0] = v11 + 744;
  v92 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32(v91, (int32x4_t)vcgtq_u64((uint64x2_t)v86, v41)), v90);
  v91.i64[0] = v11 + 744;
  v79.i64[1] = v11 + 744;
  v93 = (int32x4_t)vcgtq_u64((uint64x2_t)v79, v40);
  v40.i64[0] = v11 + 744;
  v94 = (int32x4_t)vcgtq_u64((uint64x2_t)v86, (uint64x2_t)v65);
  v65.i64[0] = v11 + 744;
  v95 = (int16x8_t)vuzp1q_s32(v94, v93);
  v93.i64[0] = v11 + 744;
  v52.i64[0] = v11 + 744;
  v20.i64[1] = v11 + 96;
  v31.i64[0] = v11 + 780;
  v41.i64[0] = v11 + 780;
  v80.i64[0] = v11 + 780;
  v38.i64[0] = v11 + 780;
  v31.i64[1] = v11 + 96;
  v37.i64[1] = a1 + 834704;
  v96 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v20, v36), (int32x4_t)vcgtq_u64(v31, v44)), v95), v92);
  v28.i64[1] = a1 + 834996;
  v20.i64[0] = v11 + 244;
  v92.i64[0] = v11 + 244;
  v20.i64[1] = v11 + 96;
  v97 = (int32x4_t)vcgtq_u64(v20, v28);
  v98 = v11 + 48;
  v38.i64[1] = v11 + 48;
  v81.i64[1] = v11 + 96;
  v99 = (int32x4_t)vcgtq_u64((uint64x2_t)v81, v37);
  v100 = a1 + 834516;
  v81.i64[0] = a1 + 834516;
  v28.i64[0] = a1 + 834516;
  v31.i64[0] = a1 + 834516;
  v36.i64[0] = a1 + 834516;
  v81.i64[1] = a1 + 835092;
  v52.i64[1] = v11 + 48;
  v36.i64[1] = a1 + 835044;
  v75.i64[1] = v11 + 48;
  v57.i64[1] = a1 + 834564;
  v17.i64[1] = a1 + 834468;
  v74.i64[1] = v11 + 780;
  v92.i64[1] = v11 + 48;
  v31.i64[1] = a1 + 834996;
  v28.i64[1] = a1 + 834704;
  v42.i64[1] = v11 + 48;
  v101 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v74, v17), (int32x4_t)vcgtq_u64((uint64x2_t)v75, (uint64x2_t)v57)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v42, v28), (int32x4_t)vcgtq_u64((uint64x2_t)v92, v31))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v52, v36), (int32x4_t)vcgtq_u64(v38, (uint64x2_t)v81)), (int16x8_t)vuzp1q_s32(v99, v97)));
  v62.i64[1] = a1 + 835092;
  v93.i64[1] = v11 + 576;
  v102 = a1 + 835212;
  v35.i64[1] = v1 + 835212;
  v21.i64[1] = v1 + 835092;
  v80.i64[1] = v11 + 528;
  v65.i64[1] = v11 + 780;
  v103 = (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v80, v21), (int32x4_t)vcgtq_u64((uint64x2_t)v65, v35)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64((uint64x2_t)v93, v201), (int32x4_t)vcgtq_u64(v39, (uint64x2_t)v62)));
  v41.i64[1] = v11 + 244;
  v64.i64[1] = v1 + 835044;
  v40.i64[1] = v11 + 528;
  v42.i64[0] = v204;
  v62.i64[0] = v204;
  v42.i64[1] = v1 + 835092;
  v29.i64[1] = v11 + 244;
  v91.i64[1] = v11 + 244;
  v55.i64[1] = v1 + 834996;
  v62.i64[1] = v1 + 835044;
  v104 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v76, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v29, (uint64x2_t)v55), (int32x4_t)vcgtq_u64((uint64x2_t)v91, (uint64x2_t)v62)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v41, v42), (int32x4_t)vcgtq_u64(v40, (uint64x2_t)v64))), v103)), 7uLL)), (int8x16_t)xmmword_208F3D600);
  v103.i64[0] = vextq_s8(v104, v104, 8uLL).u64[0];
  v103.i8[0] = vaddv_s8(*(int8x8_t *)v103.i8);
  v105 = v103.i16[0];
  v106 = v1 + 834900;
  v107 = v11 + 432;
  v108 = v11 + 480;
  v110 = v1 + 834900 < v11 + 480 && v82 < v107;
  v205 = v110;
  v112 = v106 < v11 && v68 < v107;
  v207 = v112;
  v114 = v106 < v98 && v12 < v107;
  v115 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v202, v101), 7uLL)), (int8x16_t)xmmword_208F3D600);
  v116 = (int8x8_t)vextq_s8(v115, v115, 8uLL).u64[0];
  v116.i8[0] = vaddv_s8(v116);
  v118 = v106 < v11 + 96 && v13 < v107;
  v203 = v118;
  v115.i8[0] = vaddv_s8(*(int8x8_t *)v115.i8);
  v120 = v106 < v11 + 144 && v84 < v107;
  v104.i8[0] = vaddv_s8(*(int8x8_t *)v104.i8);
  v121 = v104.i16[0];
  v123 = v106 < v200 && v85 < v107;
  v124 = vandq_s8(vcltzq_s8(vshlq_n_s8(vandq_s8(v208, v96), 7uLL)), (int8x16_t)xmmword_208F3D600);
  v125 = (int8x8_t)vextq_s8(v124, v124, 8uLL).u64[0];
  v125.i8[0] = vaddv_s8(v125);
  v126 = v125.i16[0];
  v127 = vandq_s8(v210, v88);
  v129 = v106 < v11 + 244 && v14 < v107;
  v130 = vandq_s8(vcltzq_s8(vshlq_n_s8(v127, 7uLL)), (int8x16_t)xmmword_208F3D600);
  v131 = (int8x8_t)vextq_s8(v130, v130, 8uLL).u64[0];
  v131.i8[0] = vaddv_s8(v131);
  v133 = v106 < v11 + 528 && v72 < v107;
  v130.i8[0] = vaddv_s8(*(int8x8_t *)v130.i8);
  v134 = v130.i16[0];
  v136 = v106 < v11 + 744 && v102 < v107;
  v130.i8[0] = vaddv_s8(*(int8x8_t *)v124.i8);
  v138 = v106 < v11 + 576 && v69 < v107;
  v140 = v106 < v11 + 780 && v209 < v107;
  v142 = v106 < v11 + 624 && v199 < v107;
  v144 = v82 < v11 && v68 < v108;
  v146 = v82 < v98 && v100 < v108;
  if ((unsigned __int16)(v134 | ((v131.i16[0] | (unsigned __int16)v126) << 8) | v130.i16[0]) | (unsigned __int16)(v115.i16[0] | ((v116.i16[0] | (unsigned __int16)v105) << 8) | v121))
  {
    v5 = v211;
    v10 = 0;
    v7 = (uint64_t)v214;
    v3 = v220;
    v2 = v215;
    v4 = v217;
    goto LABEL_112;
  }
  v10 = 0;
  v7 = (uint64_t)v214;
  if (v207 || v205 || v114)
  {
    v5 = v211;
    v3 = v220;
    v2 = v215;
    v4 = v217;
    goto LABEL_112;
  }
  v2 = v215;
  if (v203 || v120)
  {
    v5 = v211;
    v3 = v220;
    v4 = v217;
    goto LABEL_112;
  }
  v4 = v217;
  if (v123)
  {
    v5 = v211;
    v3 = v220;
LABEL_112:
    v162 = v8 - v10;
    v163 = (_DWORD *)(v1 + 4 * v10 + 834468);
    v164 = (_BYTE *)(v10 + 834468 + v1 + 236);
    do
    {
      v163[108] = 0;
      v163[120] = 0;
      *v163 = 0;
      v163[12] = 0;
      v163[24] = 1;
      v163[36] = 2;
      *v164++ = 3;
      v163[61] = 8;
      v163[132] = v9;
      v163[186] = -1;
      v163[144] = 0;
      v163[195] = 0;
      v163[156] = 0;
      ++v163;
      --v162;
    }
    while (v162);
    goto LABEL_114;
  }
  v3 = v220;
  if (v129 || v133 || v136 || v138 || v140 || v142)
  {
    v5 = v211;
    goto LABEL_112;
  }
  v5 = v211;
  if (v144)
    goto LABEL_112;
  if (v146)
    goto LABEL_112;
  v147 = vdupq_n_s32(v9);
  v10 = v8 & 0xFFFFFFF8;
  v148 = (_OWORD *)(v6 + 588);
  v149 = (_QWORD *)(v6 + 44);
  *(_QWORD *)&v150 = 0x100000001;
  *((_QWORD *)&v150 + 1) = 0x100000001;
  *(_QWORD *)&v151 = 0x200000002;
  *((_QWORD *)&v151 + 1) = 0x200000002;
  *(_QWORD *)&v152 = 0x800000008;
  *((_QWORD *)&v152 + 1) = 0x800000008;
  v153 = v10;
  *(_QWORD *)&v154 = -1;
  *((_QWORD *)&v154 + 1) = -1;
  do
  {
    v155 = (_OWORD *)((char *)v148 - 348);
    *v155 = 0uLL;
    v155[1] = 0uLL;
    v156 = (_OWORD *)((char *)v148 - 300);
    *v156 = 0uLL;
    v156[1] = 0uLL;
    v157 = (_OWORD *)((char *)v148 - 780);
    *v157 = 0uLL;
    v157[1] = 0uLL;
    v158 = (_OWORD *)((char *)v148 - 732);
    *v158 = 0uLL;
    v158[1] = 0uLL;
    v159 = (_OWORD *)((char *)v148 - 684);
    *v159 = v150;
    v159[1] = v150;
    v160 = (_OWORD *)((char *)v148 - 636);
    *v160 = v151;
    v160[1] = v151;
    *v149++ = 0x303030303030303;
    v161 = (_OWORD *)((char *)v148 - 536);
    *(int32x4_t *)((char *)v148 - 252) = v147;
    *(int32x4_t *)((char *)v148 - 236) = v147;
    *(_OWORD *)((char *)v148 - 20) = v154;
    *(_OWORD *)((char *)v148 - 36) = v154;
    *(_OWORD *)((char *)v148 - 188) = 0uLL;
    *(_OWORD *)((char *)v148 - 204) = 0uLL;
    *v148 = 0uLL;
    v148[1] = 0uLL;
    *(_OWORD *)((char *)v148 - 140) = 0uLL;
    *(_OWORD *)((char *)v148 - 156) = 0uLL;
    v148 += 2;
    *v161 = v152;
    v161[1] = v152;
    v153 -= 8;
  }
  while (v153);
  if (v10 != v8)
    goto LABEL_112;
LABEL_114:
  *(_DWORD *)(v6 + 480) = 0x7FFFFFFF;
  *(_OWORD *)(v6 + 12) = xmmword_208F30F00;
  v165 = (_DWORD *)v222;
  if (!*(_DWORD *)(v222 + 376) && *(_DWORD *)(v222 + 140) == 2)
  {
    if (vpx_realloc_frame_buffer(v1 + 747536, 32, 16, *v2, v2[1], v2[2], 160, *(_DWORD *)v222, 0, 0, 0))vpx_internal_error(v7, 2, "Failed to allocate empty frame for multiple frame contexts");
    memset(*(void **)(v5 + 112), 128, *(_QWORD *)(v5 + 120));
    v165 = (_DWORD *)v222;
    LODWORD(v8) = *(_DWORD *)(v222 + 252);
  }
  if ((int)v8 >= 1)
  {
    v166 = v165[64];
    if (v166 >= 1)
    {
      v221 = 0;
      v218 = v1 + 751952;
      v212 = v4 * (uint64_t)v3;
      size = v212 + 23;
      while (v166 < 1)
      {
LABEL_123:
        if (++v221 >= (int)v8)
          goto LABEL_156;
      }
      v167 = 0;
      v216 = (_DWORD *)(v1 + 4 * v221 + 190264);
      while (1)
      {
        v170 = v167 + v221 * v166;
        v171 = v1 + 6880 * v170 + 751904;
        *(_DWORD *)(v171 + 6760) = 0;
        *(_QWORD *)(v171 + 6800) = 0;
        *(_QWORD *)(v171 + 6768) = 0x200000000;
        v172 = v1;
        v174 = v165[50];
        v173 = v165[51];
        *(_DWORD *)(v171 + 156) = v174;
        *(_QWORD *)(v171 + 256) = 0;
        *(_QWORD *)(v171 + 272) = 0;
        *(_QWORD *)(v171 + 160) = 0;
        *(_QWORD *)(v171 + 224) = 0;
        *(_QWORD *)(v171 + 176) = 0;
        *(_QWORD *)(v171 + 184) = 0;
        *(_DWORD *)(v171 + 280) = v174;
        *(_DWORD *)(v171 + 284) = v173;
        memset_pattern16((void *)(v218 + 6880 * (v167 + (int)v221 * v166)), &unk_208F4B910, 0x28uLL);
        v165 = (_DWORD *)v222;
        v175 = *(_DWORD *)(v222 + 156);
        v176 = *(int *)(v172 + 4 * v170 + 190196);
        *(_DWORD *)(v171 + 720) = v176;
        if (v175 == 1)
        {
          *(_DWORD *)(v171 + 20) = v174;
          *(_DWORD *)(v171 + 168) = v174;
          *(_DWORD *)(v171 + 172) = v174;
        }
        else
        {
          *(_DWORD *)(v171 + 16) = v173;
          *(_DWORD *)(v171 + 20) = v173;
          v177 = v173 + v174;
          if (v173 + v174 < 0 != __OFADD__(v173, v174))
            ++v177;
          v178 = v177 >> 1;
          *(_DWORD *)(v171 + 168) = v178;
          *(_DWORD *)(v171 + 172) = v178;
          v179 = v219;
          if (*v216)
            v180 = v219;
          else
            v180 = -1;
          if (*v216)
            v179 = v219 + 1;
          v219 = v179;
          v181 = v172 + 6880 * v170 + 751904;
          *(_DWORD *)(v181 + 6784) = v180;
          *(_DWORD *)(v181 + 6788) = -1;
        }
        v1 = v172;
        v182 = (unsigned __int128)(*(_QWORD *)(v222 + 168) * v176 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
        v183 = (v182 >> 7) + ((unint64_t)v182 >> 63);
        *(_QWORD *)(v171 + 192) = v183;
        *(_QWORD *)(v171 + 200) = v183;
        if ((_DWORD)v167 || *(int *)(v222 + 252) < 2)
          goto LABEL_129;
        v184 = v172 + 6880 * v170 + 751904;
        *(_DWORD *)(v184 + 6808) = 0;
        *(_QWORD *)(v184 + 6840) = 0;
        *(_DWORD *)(v184 + 6848) = 0;
        if (size <= 0x10000000000 && (v185 = malloc_type_malloc(size, 0x74AD08B5uLL)) != 0)
        {
          v186 = v185;
          v187 = (_QWORD *)(((unint64_t)v185 + 23) & 0xFFFFFFFFFFFFFFF0);
          *(v187 - 1) = v186;
          v188 = (void **)(v172 + 6880 * v170 + 758720);
          *v188 = v187;
          v189 = (uint64_t)v214;
          v190 = v212;
          if (v187)
          {
            bzero(v187, v212);
            goto LABEL_148;
          }
        }
        else
        {
          v188 = (void **)(v172 + 6880 * v170 + 758720);
          *v188 = 0;
          v189 = (uint64_t)v214;
          v190 = v212;
        }
        vpx_internal_error(v189, 2, "Failed to allocate lc->map");
        bzero(*v188, v190);
        if (size > 0x10000000000)
          goto LABEL_151;
LABEL_148:
        v191 = malloc_type_malloc(size, 0x74AD08B5uLL);
        if (!v191)
        {
LABEL_151:
          v194 = (void **)(v172 + 6880 * v170 + 758728);
          *v194 = 0;
LABEL_152:
          vpx_internal_error(v189, 2, "Failed to allocate lc->last_coded_q_map");
          memset(*v194, 255, v190);
          if (size > 0x10000000000)
            goto LABEL_126;
          goto LABEL_153;
        }
        v192 = v191;
        v193 = (_QWORD *)(((unint64_t)v191 + 23) & 0xFFFFFFFFFFFFFFF0);
        *(v193 - 1) = v192;
        v194 = (void **)(v172 + 6880 * v170 + 758728);
        *v194 = v193;
        if (!v193)
          goto LABEL_152;
        memset(v193, 255, v190);
LABEL_153:
        v195 = malloc_type_malloc(size, 0x74AD08B5uLL);
        if (v195)
        {
          v196 = v195;
          v169 = (_QWORD *)(((unint64_t)v195 + 23) & 0xFFFFFFFFFFFFFFF0);
          *(v169 - 1) = v196;
          v168 = (_QWORD *)(v172 + 6880 * v170 + 758736);
          *v168 = v169;
          if (v169)
            goto LABEL_128;
          goto LABEL_127;
        }
LABEL_126:
        v168 = (_QWORD *)(v172 + 6880 * v170 + 758736);
        *v168 = 0;
LABEL_127:
        vpx_internal_error(v189, 2, "Failed to allocate lc->consec_zero_mv");
        v169 = (_QWORD *)*v168;
LABEL_128:
        bzero(v169, v190);
        v165 = (_DWORD *)v222;
        v166 = *(_DWORD *)(v222 + 256);
LABEL_129:
        if (v166 <= (int)++v167)
        {
          LODWORD(v8) = v165[63];
          goto LABEL_123;
        }
      }
    }
  }
LABEL_156:
  if (*(int *)(v211 + 12) <= 1)
  {
    v197 = v219;
    if (v219 > 7)
      return;
    goto LABEL_163;
  }
  v197 = v219;
  if (v165[39] != 1 && v219 < 8)
LABEL_163:
    *(_DWORD *)(v211 + 11180) = v197;
}

uint64_t vp9_update_layer_context_change_config(uint64_t result, int a2)
{
  uint64_t v2;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x2_t v10;
  float v11;
  double v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int64x2_t v43;
  double v44;
  _DWORD *v45;
  int v46;
  int v47;
  int v48;
  float32x2_t v49;
  float v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  float v55;
  int *v56;
  double v57;
  int v58;
  int v59;
  unint64_t v60;
  int64x2_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  int v72;
  int32x4_t *v73;
  int32x4_t v74;
  uint64_t v75;
  int32x4_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;

  v2 = result + 752048;
  v3 = (int *)(result + 738600);
  v4 = *(_DWORD *)(result + 190404);
  v81 = (_DWORD *)(result + 190092);
  *(_DWORD *)(result + 834464) = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(result + 190188);
    if ((int)v5 >= 1)
    {
      v6 = *(int *)(result + 190192);
      if ((int)v6 <= 0)
      {
        v62 = (_DWORD *)(result + 752624);
        v63 = 6880 * (int)v6;
        v64 = (_DWORD *)(result + 190196);
        v65 = 4 * v6;
        do
        {
          *v62 = *v64;
          v62 = (_DWORD *)((char *)v62 + v63);
          v64 = (_DWORD *)((char *)v64 + v65);
          --v5;
        }
        while (v5);
      }
      else
      {
        v7 = 0;
        v8 = *(unsigned int *)(result + 190192);
        v9 = 752048;
        v82 = (v6 - 1);
        v10 = vcvt_f32_f64(vcvtq_f64_s64(*(int64x2_t *)(result + 738736)));
        v11 = (float)*(uint64_t *)(result + 738752);
        v12 = *(double *)(result + 739168);
        v13 = *v3;
        v14 = (_DWORD *)(result + 752624);
        v15 = 6880 * v6;
        v16 = (int *)(result + 190196);
        v17 = *(_QWORD *)(result + 738728);
        v18 = 752096;
        v19 = 752184;
        v20 = 752192;
        v21 = 752208;
        v22 = 752632;
        v23 = 1.0;
        __asm { FMOV            V6.2D, #0.5 }
        do
        {
          v28 = v16;
          v29 = v14;
          v30 = v8;
          do
          {
            v31 = *v28++;
            *v29 = v31;
            v29 += 1720;
            --v30;
          }
          while (v30);
          v32 = v7 * v8 + v82;
          v33 = *(_DWORD *)(result + 4 * v32 + 190196);
          *(_DWORD *)(result + 6880 * v32 + 752624) = v33;
          v34 = 190284;
          v35 = v9;
          v36 = v18;
          v37 = v19;
          v38 = v21;
          v39 = v20;
          v40 = v22;
          v41 = v8;
          do
          {
            v45 = (_DWORD *)(result + v35);
            *(_DWORD *)(result + v35 + 580) = v33;
            v46 = *(_DWORD *)(result + v35 + 576);
            if (a2)
              v23 = (float)v46 / (float)a2;
            *(int64x2_t *)(result + v39) = vcvtq_s64_f64(vaddq_f64(vcvtq_f64_f32(vmul_n_f32(v10, v23)), _Q6));
            v42 = (uint64_t)((float)(v23 * v11) + 0.5);
            *(_QWORD *)(result + v38) = v42;
            v43 = vdupq_n_s64(v42);
            *(int8x16_t *)(result + v36) = vbslq_s8((int8x16_t)vcgtq_s64(v43, *(int64x2_t *)(result + v36)), *(int8x16_t *)(result + v36), (int8x16_t)v43);
            v44 = v12 / (double)*(int *)(result + v34);
            *(double *)(result + v40) = v44;
            *v45 = (int)fmin((double)v46 / v44, 2147483650.0);
            v45[2] = v13;
            *(_QWORD *)(result + v37) = v17;
            v34 += 4;
            v40 += 6880;
            v39 += 6880;
            v38 += 6880;
            v37 += 6880;
            v36 += 6880;
            v35 += 6880;
            --v41;
          }
          while (v41);
          ++v7;
          v14 = (_DWORD *)((char *)v14 + v15);
          v16 += v8;
          v22 += v15;
          v20 += v15;
          v21 += v15;
          v19 += v15;
          v18 += v15;
          v9 += v15;
        }
        while (v7 != v5);
      }
    }
  }
  else
  {
    v47 = *(_DWORD *)(result + 747524);
    if (v47 > 1 && (v48 = *(_DWORD *)(result + 747524), *v81 == 1) || (v48 = *(_DWORD *)(result + 747520), v48 >= 1))
    {
      v49 = vcvt_f32_f64(vcvtq_f64_s64(*(int64x2_t *)(result + 738736)));
      v50 = (float)*(uint64_t *)(result + 738752);
      v51 = *v3;
      v52 = *(_QWORD *)(result + 738728);
      v53 = v48;
      v54 = (int *)(result + 190196);
      v55 = 1.0;
      v56 = (int *)(result + 190196);
      do
      {
        v59 = *v56++;
        v58 = v59;
        *(_DWORD *)(v2 + 576) = v59;
        if (a2)
          v55 = (float)v58 / (float)a2;
        *(int64x2_t *)(v2 + 144) = vcvtq_s64_f64(vcvtq_f64_f32(vmul_n_f32(v49, v55)));
        v60 = (uint64_t)(float)(v55 * v50);
        *(_QWORD *)(v2 + 160) = v60;
        v61 = vdupq_n_s64(v60);
        *(int8x16_t *)(v2 + 48) = vbslq_s8((int8x16_t)vcgtq_s64(v61, *(int64x2_t *)(v2 + 48)), *(int8x16_t *)(v2 + 48), (int8x16_t)v61);
        if (v47 <= 1)
        {
          v57 = *(double *)(result + 739168);
        }
        else
        {
          v57 = *(double *)(result + 739168);
          if (*v81 == 1)
            v57 = v57 / (double)v54[22];
        }
        *(double *)(v2 + 584) = v57;
        *(_DWORD *)v2 = (int)fmin((double)v58 / v57, 2147483650.0);
        *(_DWORD *)(v2 + 8) = v51;
        *(_QWORD *)(v2 + 136) = v52;
        v2 += 6880;
        v54 = v56;
        --v53;
      }
      while (v53);
    }
  }
  v66 = *(unsigned int *)(result + 190188);
  if ((int)v66 < 1)
    goto LABEL_40;
  v67 = *(_DWORD *)(result + 190192);
  v68 = v67;
  v69 = v67 - 1;
  if (v66 >= 8 && v67 == 1)
  {
    v71 = v66 & 0x7FFFFFF8;
    v73 = (int32x4_t *)(4 * v69 + 190196 + result + 16);
    v74 = 0uLL;
    v75 = v66 & 0xFFFFFFF8;
    v76 = 0uLL;
    do
    {
      v74 = vsubq_s32(v74, vcgtzq_s32(v73[-1]));
      v76 = vsubq_s32(v76, vcgtzq_s32(*v73));
      v73 += 2 * v68;
      v75 -= 8;
    }
    while (v75);
    v72 = vaddvq_s32(vaddq_s32(v76, v74));
    if (v71 == v66)
      goto LABEL_38;
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  v77 = v66 - v71;
  v78 = (int *)(result + 4 * (v69 + v71 * v68) + 190196);
  v79 = 4 * v68;
  do
  {
    if (*v78 > 0)
      ++v72;
    v78 = (int *)((char *)v78 + v79);
    --v77;
  }
  while (v77);
LABEL_38:
  if (v72 != 1)
  {
LABEL_40:
    v80 = 0;
    goto LABEL_41;
  }
  v80 = 1;
LABEL_41:
  *(_DWORD *)(result + 835432) = v80;
  return result;
}

uint64_t vp9_update_temporal_layer_framerate(uint64_t result)
{
  int *v1;
  int v2;
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  double v9;
  double v10;
  int v11;
  int v12;

  v1 = (int *)(result + 747512);
  if (*(_DWORD *)(result + 747508) && !*(_DWORD *)(result + 190076))
  {
    v2 = *(_DWORD *)(result + 747524);
    v5 = *v1;
    v6 = *(_DWORD *)(result + 747516);
    v4 = v6 + v2 * *v1;
  }
  else
  {
    v2 = *(_DWORD *)(result + 747524);
    v3 = (int *)(result + 747512);
    if (v2 >= 2)
    {
      v3 = (int *)(result + 747516);
      if (*(_DWORD *)(result + 190092) != 1)
        v3 = (int *)(result + 747512);
    }
    v4 = *v3;
    v5 = *v1;
    v6 = *(_DWORD *)(result + 747516);
  }
  v7 = v4;
  v8 = result + 6880 * v4 + 751904;
  v9 = *(double *)(result + 739168);
  v10 = v9 / (double)*(int *)(result + 4 * v6 + 190284);
  *(double *)(v8 + 728) = v10;
  v11 = *(_DWORD *)(result + 6880 * v4 + 752624);
  v12 = (int)fmin((double)v11 / v10, 2147483650.0);
  *(_DWORD *)(v8 + 144) = v12;
  *(_DWORD *)(v8 + 152) = *(_DWORD *)(result + 738600);
  if (v6)
    v12 = llround((double)(v11 - *(_DWORD *)(result + 189984 + 4 * (v6 - 1 + v5 * v2) + 212))/ (v10 - v9 / (double)*(int *)(result + 189984 + 4 * (v6 - 1) + 300)));
  *(_DWORD *)(result + 6880 * v7 + 752640) = v12;
  return result;
}

void *vp9_restore_layer_context(_DWORD *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  void *result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;

  v2 = a1 + 186878;
  v3 = a1 + 184641;
  v4 = a1 + 47510;
  v19 = a1 + 185066;
  v20 = a1 + 210542;
  v5 = a1[186877];
  if (v5 && !a1[47519])
  {
    v6 = a1[186881];
    v8 = a1[186879] + v6 * *v2;
  }
  else
  {
    v6 = a1[186881];
    v7 = a1 + 186878;
    if (v6 >= 2)
    {
      if (a1[47523] == 1)
        v7 = a1 + 186879;
      else
        v7 = a1 + 186878;
    }
    v8 = *v7;
  }
  v9 = v8;
  v10 = &a1[1720 * v8];
  v11 = *(_QWORD *)v3;
  v12 = a1[184777];
  memcpy(a1 + 184612, v10 + 187976, 0x2D0uLL);
  result = memcpy(a1 + 185332, v10 + 188168, 0x1758uLL);
  *(_QWORD *)v4 = (int)v10[188156];
  *((_QWORD *)v4 + 49) = *((_QWORD *)v10 + 94835);
  if (v5 && !v4[9] && LOBYTE(a1[1720 * v9 + 189692]))
    v4[4] = LOBYTE(a1[1720 * v9 + 189692]);
  v20[2110] = a1[1720 * v9 + 189693];
  if (v6 > 1 || (int)v2[2] >= 2)
    *(_QWORD *)v3 = v11;
  v3[136] = v12;
  if (v4[27] == 3 && (int)v2[2] >= 2 && !v2[1])
  {
    v14 = *(_QWORD *)v19;
    v15 = &a1[1720 * v9 + 187976];
    v16 = *(_QWORD *)(*(_QWORD *)v19 + 32);
    *(_QWORD *)(v14 + 32) = *(_QWORD *)&a1[1720 * v9 + 189680];
    v15[852] = v16;
    v17 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v14 + 40) = *(_QWORD *)&a1[1720 * v9 + 189682];
    v15[853] = v17;
    v18 = *(_QWORD *)v20;
    *(_QWORD *)v20 = *(_QWORD *)&a1[1720 * v9 + 189684];
    v15[854] = v18;
    *(_DWORD *)(v14 + 8) = a1[1720 * v9 + 189678];
    *(_QWORD *)(v14 + 20) = *(_QWORD *)&a1[1720 * v9 + 189686];
    *(_DWORD *)(v14 + 124) = a1[1720 * v9 + 189688];
  }
  return result;
}

double vp9_save_layer_context(uint64_t a1)
{
  _DWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = (_DWORD *)(a1 + 747512);
  v3 = (uint64_t *)(a1 + 740264);
  v4 = (_QWORD *)(a1 + 190432);
  v5 = (_DWORD *)(a1 + 190076);
  v6 = a1 + 173000;
  if (*(_DWORD *)(a1 + 747508) && !*v5)
  {
    v8 = *(_DWORD *)(a1 + 747516) + *(_DWORD *)(a1 + 747524) * *v2;
  }
  else
  {
    v7 = (int *)(a1 + 747512);
    if (*(int *)(a1 + 747524) >= 2)
    {
      if (*(_DWORD *)(a1 + 190092) == 1)
        v7 = (int *)(a1 + 747516);
      else
        v7 = (int *)(a1 + 747512);
    }
    v8 = *v7;
  }
  v9 = a1 + 6880 * v8;
  memcpy((void *)(v9 + 751904), (const void *)(a1 + 738448), 0x2D0uLL);
  memcpy((void *)(v9 + 752672), (const void *)(a1 + 741328), 0x1758uLL);
  *(_DWORD *)(v9 + 752624) = *(_QWORD *)(v6 + 17040);
  *(_QWORD *)(v9 + 758680) = *v4;
  *(_DWORD *)(v9 + 758776) = *(_DWORD *)(v6 + 28);
  *(_DWORD *)(v9 + 758780) = *(_DWORD *)v6;
  if (v5[18] == 3 && (int)v2[2] >= 2 && !v2[1])
  {
    v11 = *v3;
    v12 = a1 + 6880 * v8 + 751904;
    v13 = *(_QWORD *)(a1 + 6880 * v8 + 758728);
    v14 = *(_QWORD *)(a1 + 6880 * v8 + 758736);
    v15 = *(_OWORD *)(*v3 + 32);
    *(_QWORD *)(v11 + 32) = *(_QWORD *)(a1 + 6880 * v8 + 758720);
    *(_OWORD *)(v12 + 6816) = v15;
    *(_QWORD *)(v11 + 40) = v13;
    *(_QWORD *)(v12 + 6832) = *(_QWORD *)(a1 + 842168);
    *(_QWORD *)(a1 + 842168) = v14;
    *(_DWORD *)(v12 + 6808) = *(_DWORD *)(v11 + 8);
    result = *(double *)(v11 + 20);
    *(double *)(v12 + 6840) = result;
    *(_DWORD *)(v12 + 6848) = *(_DWORD *)(v11 + 124);
    *(_DWORD *)(v12 + 6852) = *(_DWORD *)(v11 + 96);
    *(_DWORD *)(v12 + 6856) = *(_DWORD *)(v11 + 100);
    *(_DWORD *)(v12 + 6860) = *(_DWORD *)(v11 + 104);
  }
  return result;
}

uint64_t vp9_one_pass_svc_start_layer(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  signed int v37;
  signed int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  _DWORD *v52;
  int *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _DWORD *v60;

  v2 = a1 + 834464;
  v3 = (int *)(a1 + 747512);
  v4 = a1 + 189992;
  *(_DWORD *)(a1 + 834892) = 0;
  v5 = *(_DWORD *)(a1 + 747520);
  if (*(_DWORD *)(a1 + 835148) == 1 && (v5 & 0xFFFFFFFE) == 2)
  {
    *(_DWORD *)(a1 + 835428) = *(_DWORD *)(a1 + 747524) < 4;
  }
  else
  {
    *(_DWORD *)(a1 + 835428) = 0;
    if (v5 < 2)
      goto LABEL_9;
  }
  *(_QWORD *)(a1 + 834696) = 0x100000001;
LABEL_9:
  v7 = (_QWORD *)(a1 + 738728);
  *(_DWORD *)(a1 + 834660) = 1;
  *(_DWORD *)(a1 + 747512 + 4 * *v3 + 87232) = *(_DWORD *)(a1 + 173020);
  *(_DWORD *)(a1 + 747512 + 4 * *v3 + 87280) = *(_DWORD *)(a1 + 173008);
  v60 = (_DWORD *)(a1 + 172972);
  *(_DWORD *)(a1 + 747512 + 4 * *v3 + 87328) = *(_DWORD *)(a1 + 173016);
  if (*(_DWORD *)(a1 + 747528) == *(_DWORD *)(a1 + 835324))
  {
    v8 = *(unsigned int *)(a1 + 747520);
    if ((int)v8 >= 1)
      bzero((void *)(a1 + 835092), 4 * v8);
    if (*(_DWORD *)(v2 + 680) == 3)
    {
      while ((int)v8 > *(_DWORD *)(v2 + 860))
      {
        LODWORD(v8) = v8 - 1;
        v9 = (int *)(a1 + 6880 * (v3[1] + v3[3] * (uint64_t)(int)v8) + 751904);
        memcpy((void *)(a1 + 738448), v9, 0x2D0uLL);
        *(_QWORD *)(v4 + 48) = v9[180];
        if (vp9_test_drop((int *)a1))
        {
          if ((int)v8 + 1 > *(_DWORD *)(v2 + 860))
          {
            v10 = (int)v8;
            do
              *(_DWORD *)(a1 + 4 * v10 + 835092) = 1;
            while (v10-- > *(int *)(v2 + 860));
          }
          break;
        }
      }
    }
  }
  switch(*(_DWORD *)v2)
  {
    case 0:
      v12 = v3[4];
      *v3 = v12;
      v13 = (_QWORD *)(v4 + 4580);
      *(_OWORD *)(v4 + 4576) = xmmword_208F08AB0;
      if (!v12)
      {
        v15 = 0;
        v16 = 0;
        v14 = 1;
LABEL_34:
        v23 = 1;
        *(_DWORD *)(a1 + 739520) = 1;
        *(_DWORD *)(v4 + 4520) = v15;
        *(_DWORD *)(v4 + 4524) = v16;
        if (!*(_DWORD *)(v2 + 964))
          goto LABEL_46;
        goto LABEL_37;
      }
      if (v3[2789])
      {
        v14 = 0;
        *v13 = 0x100000000;
        v15 = v12 - 1;
        v16 = v12;
        goto LABEL_34;
      }
      v23 = 0;
      v14 = 1;
      v15 = v12;
      *(_DWORD *)(a1 + 739520) = 3;
      *(_DWORD *)(v4 + 4520) = v12;
      *(_DWORD *)(v4 + 4524) = v12 - 1;
      if (!*(_DWORD *)(v2 + 964))
        goto LABEL_46;
LABEL_37:
      v24 = v3[1];
      if (v24 >= 1 && v24 == v3[3] - 1)
      {
        *v13 = 0;
        *(_DWORD *)(v4 + 4588) = 0;
        if (v23)
          goto LABEL_47;
LABEL_40:
        *(_DWORD *)(v4 + 4528) = v15;
        goto LABEL_41;
      }
LABEL_46:
      if ((v14 & v23 & 1) == 0)
        goto LABEL_40;
LABEL_47:
      *(_DWORD *)(v4 + 4524) = v15;
      v21 = *(_DWORD *)(v4 + 4520);
      v22 = *(_DWORD *)(v2 + 208);
      if (v21 == v22)
        goto LABEL_48;
LABEL_42:
      if (*(_DWORD *)(v4 + 4524) == v22 || *(_DWORD *)(v4 + 4528) == v22)
      {
LABEL_48:
        *(_DWORD *)(v2 + 212) = 1;
        v25 = *(_DWORD *)(v2 + 216);
        if (v21 != v25)
          goto LABEL_49;
LABEL_51:
        *(_DWORD *)(v2 + 220) = 1;
        goto LABEL_52;
      }
      v25 = *(_DWORD *)(v2 + 216);
      if (v21 == v25)
        goto LABEL_51;
LABEL_49:
      if (*(_DWORD *)(v4 + 4524) == v25 || *(_DWORD *)(v4 + 4528) == v25)
        goto LABEL_51;
LABEL_52:
      *(_DWORD *)(v2 + 204) = 0;
      if (!*(_DWORD *)(v2 + 200)
        || *(_DWORD *)(v2 + 212)
        || *(_DWORD *)(v2 + 220)
        || *(_DWORD *)v2 == 1
        || !*(_DWORD *)(v2 + 684)
        || (v26 = v3[2], v26 > 3)
        || v3[3] > 3)
      {
        v27 = *v3;
      }
      else
      {
        v27 = *v3;
        if (*v3 >= v26 - 2)
          *(_DWORD *)(v2 + 204) = 1;
      }
      if (!v27)
      {
        *(_BYTE *)(v2 + 826) = 0;
        v51 = v3[2];
        if ((int)v51 >= 1)
        {
          v52 = (_DWORD *)(v2 + 784);
          do
          {
            if (*v52++)
              *(_BYTE *)(v2 + 826) = 1;
            --v51;
          }
          while (v51);
        }
      }
      v28 = *(_DWORD *)(v2 + 860);
      if (v27 == v28)
      {
        *(_OWORD *)(a1 + 834964) = 0u;
        *(_OWORD *)(a1 + 834980) = 0u;
        *(_OWORD *)(a1 + 834948) = 0u;
        v29 = *(_DWORD *)v2;
        if (*(_DWORD *)v2 != 1)
        {
          *(_QWORD *)&v30 = -1;
          *((_QWORD *)&v30 + 1) = -1;
          *(_OWORD *)(a1 + 834532) = v30;
          *(_OWORD *)(a1 + 834548) = v30;
          *(_OWORD *)(a1 + 834516) = v30;
          *(_OWORD *)(a1 + 834564) = v30;
          *(_OWORD *)(a1 + 834580) = v30;
          *(_OWORD *)(a1 + 834596) = v30;
          *(_OWORD *)(a1 + 834612) = v30;
          *(_OWORD *)(a1 + 834628) = v30;
          *(_OWORD *)(a1 + 834644) = v30;
          *(_QWORD *)(a1 + 835168) = 0;
          *(_QWORD *)(a1 + 835176) = 0;
          *(_QWORD *)(a1 + 835160) = 0;
          *(_BYTE *)(a1 + 835184) = 0;
          *(_BYTE *)(a1 + 835189) = 0;
          *(_DWORD *)(a1 + 835185) = 0;
          *(_BYTE *)(a1 + 835194) = 0;
          *(_DWORD *)(a1 + 835190) = 0;
          *(_BYTE *)(a1 + 835199) = 0;
          *(_DWORD *)(a1 + 835195) = 0;
          *(_DWORD *)(a1 + 835200) = 0;
          *(_BYTE *)(a1 + 835204) = 0;
          *(_DWORD *)(a1 + 835205) = 0;
          *(_BYTE *)(a1 + 835209) = 0;
        }
      }
      else
      {
        v29 = *(_DWORD *)v2;
      }
      v31 = v3[1] + v3[3] * (uint64_t)v27;
      if (v29 != 1 || *(_DWORD *)(v2 + 836))
      {
        v32 = a1 + 6880 * v31 + 751904;
        *(_DWORD *)(v32 + 280) = quantizer_to_qindex[*(int *)(a1 + 6880 * v31 + 752644)];
        *(_DWORD *)(v32 + 284) = quantizer_to_qindex[*(int *)(a1 + 6880 * v31 + 752648)];
        if (*(_DWORD *)(v2 + 16328))
          *(_QWORD *)(a1 + 6880 * v31 + 752184) = *v7;
      }
      if (*(_DWORD *)(v4 + 164) == 2 && *(_DWORD *)(v2 + 968) == 1 && v27 == v28 && *(_DWORD *)(v2 + 7628))
      {
        v33 = a1 + 6880 * v31;
        v34 = (int *)(v33 + 752660);
        v35 = *(_DWORD *)(v33 + 752664);
        v36 = *v34;
        if (!v35)
        {
LABEL_76:
          v37 = 0;
          v38 = 0;
LABEL_83:
          *(_BYTE *)(a1 + v27 + 834704) = 1;
          goto LABEL_84;
        }
      }
      else
      {
        v39 = a1 + 6880 * v31;
        v40 = (int *)(v39 + 752652);
        v35 = *(_DWORD *)(v39 + 752656);
        v36 = *v40;
        if (!v35)
          goto LABEL_76;
      }
      v41 = *(_DWORD *)v4 * v36 / v35;
      v42 = *(_DWORD *)(v4 + 4) * v36 / v35;
      v43 = v41 & 1;
      if (v41 < 0)
        v43 = -v43;
      v37 = v43 + v41;
      v44 = (*(_DWORD *)(v4 + 4) * v36 / v35) & 1;
      if (v42 < 0)
        v44 = -v44;
      v38 = v44 + v42;
      if ((v44 + v42) * v37 <= 76800)
        goto LABEL_83;
LABEL_84:
      if (v36 > (3 * v35) >> 2)
      {
        *(_DWORD *)(a1 + 4 * *v3 + 834712) = 0;
        v45 = v3[2];
        if (v45 < 2)
          goto LABEL_106;
      }
      else
      {
        v45 = v3[2];
        if (v45 < 2)
          goto LABEL_106;
      }
      v46 = (v45 - 1);
      v47 = v3[3];
      v48 = v3[1];
      if (v45 != 3)
      {
        v54 = (int *)(a1 + 6880 * (int)v48 + 752656);
        v55 = 6880 * (int)v47;
        while (*(v54 - 1) == *v54 >> 1)
        {
          v54 = (int *)((char *)v54 + v55);
          if (!--v46)
            goto LABEL_103;
        }
        goto LABEL_91;
      }
      v49 = *(_DWORD *)(a1 + 6880 * (int)v48 + 752652);
      v50 = *(_DWORD *)(a1 + 6880 * (int)v48 + 752656);
      if (v49 != v50 >> 1 && v49 != v50 >> 2
        || (_DWORD)v46 != 1
        && *(_DWORD *)(a1 + 6880 * (v47 + v48) + 752652) != *(int *)(a1 + 6880 * (v47 + v48) + 752656) >> 1)
      {
LABEL_91:
        *(_QWORD *)(v2 + 232) = 0;
      }
LABEL_103:
      if (*v3 >= 1 && *(_DWORD *)(a1 + 4 * (*v3 - 1) + 834948))
        *(_QWORD *)(v2 + 232) = 0;
LABEL_106:
      *(_DWORD *)(v2 + 228) = 0;
      if (*v60 && !*(_DWORD *)(v4 + 4580) && !*(_DWORD *)(v4 + 4584) && !*(_DWORD *)(v4 + 4588))
        *(_DWORD *)(v2 + 228) = 1;
      v56 = *(_DWORD *)v2;
      v57 = *v3;
      if (*(_DWORD *)v2 == 1 && *(_DWORD *)(a1 + 4 * v57 + 835160))
        *(_DWORD *)(v2 + 228) = 0;
      if ((_DWORD)v57)
      {
        if (v56 == 1)
          return 8 * (vp9_set_size_literal(a1, v37, v38) != 0);
      }
      else
      {
        *(_QWORD *)(v2 + 688) = 0;
        if (v56 == 1)
          return 8 * (vp9_set_size_literal(a1, v37, v38) != 0);
      }
      if (*(_DWORD *)(a1 + 4 * v57 + 834900))
      {
        v58 = *(_DWORD *)(a1 + 4 * v57 + 835212);
        if (v58 != -1 && !*(_DWORD *)(a1 + 6880 * v3[1] + 758668))
          *(_DWORD *)(v4 + 4520) = v58;
      }
      return 8 * (vp9_set_size_literal(a1, v37, v38) != 0);
    case 1:
      if (!*(_DWORD *)(v2 + 836))
        goto LABEL_41;
      v17 = v3[4];
      *v3 = v17;
      v18 = (_DWORD *)(a1 + 747512 + 4 * v17);
      v3[1] = v18[21948];
      *(_DWORD *)(v4 + 4576) = 1;
      *(_DWORD *)(v4 + 4520) = v18[21751];
      *(_DWORD *)(v4 + 4524) = v18[21763];
      *(_DWORD *)(v4 + 4528) = v18[21775];
      *(_QWORD *)(v4 + 4580) = 0;
      *(_DWORD *)(v4 + 4588) = 0;
      *(_DWORD *)(a1 + 739520) = 0;
      v19 = a1 + 747512 + v17;
      v20 = *(_BYTE *)(v19 + 87668) != 0;
      *(_DWORD *)(a1 + 739520) = v20;
      if (*(_BYTE *)(v19 + 87673))
      {
        v20 |= 2u;
        *(_DWORD *)(a1 + 739520) = v20;
      }
      if (!*(_BYTE *)(a1 + v17 + 835190))
        goto LABEL_41;
      *(_DWORD *)(a1 + 739520) = v20 | 4;
      v21 = *(_DWORD *)(v4 + 4520);
      v22 = *(_DWORD *)(v2 + 208);
      if (v21 == v22)
        goto LABEL_48;
      goto LABEL_42;
    case 2:
      set_flags_and_fb_idx_for_temporal_mode2(a1);
      v21 = *(_DWORD *)(v4 + 4520);
      v22 = *(_DWORD *)(v2 + 208);
      if (v21 == v22)
        goto LABEL_48;
      goto LABEL_42;
    case 3:
      set_flags_and_fb_idx_for_temporal_mode3(a1);
      v21 = *(_DWORD *)(v4 + 4520);
      v22 = *(_DWORD *)(v2 + 208);
      if (v21 == v22)
        goto LABEL_48;
      goto LABEL_42;
    default:
LABEL_41:
      v21 = *(_DWORD *)(v4 + 4520);
      v22 = *(_DWORD *)(v2 + 208);
      if (v21 != v22)
        goto LABEL_42;
      goto LABEL_48;
  }
}

uint64_t set_flags_and_fb_idx_for_temporal_mode3(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  int v20;

  v1 = (_DWORD *)(a1 + 835428);
  v2 = (_DWORD *)(a1 + 747512);
  v3 = a1 + 194512;
  v5 = *(_DWORD *)(a1 + 747524);
  v4 = *(unsigned int *)(a1 + 747528);
  v6 = *(_DWORD *)(a1 + 747512 + 6880 * v5 * (int)v4 + 11152);
  if ((v6 & 1) != 0)
    v7 = 2;
  else
    v7 = (v6 >> 1) & 1;
  *v2 = v4;
  *(_DWORD *)(a1 + 747516) = v7;
  *(_QWORD *)(a1 + 194576) = 0;
  v8 = (int *)(a1 + 739520);
  *(_DWORD *)(a1 + 194572) = 0;
  if (v7 == 1)
  {
    v12 = 0;
    v11 = 0;
    v9 = 1;
    *(_DWORD *)(a1 + 194568) = 1;
    *(_DWORD *)(a1 + 194580) = 1;
    if ((_DWORD)v4)
      v14 = 3;
    else
      v14 = 1;
    *v8 = v14;
    *(_DWORD *)v3 = v4;
    v15 = v2[2];
    goto LABEL_35;
  }
  if (!v7)
  {
    *(_QWORD *)(a1 + 194568) = 0x100000001;
    if ((_DWORD)v4)
    {
      v9 = *(_DWORD *)(a1 + 758668);
      LODWORD(v10) = 0;
      if (v9)
      {
        v9 = 0;
        v11 = 0;
        *(_QWORD *)(a1 + 194572) = 0x100000000;
        v12 = 1;
        *v8 = 1;
        *(_DWORD *)v3 = v4 - 1;
        result = v4;
        v4 = (v4 - 1);
      }
      else
      {
        v12 = 0;
        *v8 = 3;
        *(_DWORD *)v3 = v4;
        v11 = 1;
        result = (v4 - 1);
      }
    }
    else
    {
      result = 0;
      LODWORD(v10) = 0;
      v9 = 0;
      v12 = 0;
      v11 = 1;
      *v8 = 1;
      *(_DWORD *)v3 = 0;
    }
    goto LABEL_36;
  }
  v16 = v6 & 3;
  v15 = *(_DWORD *)(a1 + 747520);
  v17 = v15 - 1;
  if (v16 == 1)
  {
    if ((_DWORD)v4 == v17)
    {
      *(_DWORD *)(a1 + 194568) = 1;
      v9 = 0;
      if (!(_DWORD)v4)
      {
        *v8 = 1;
LABEL_34:
        v12 = 0;
        v11 = 0;
        *(_DWORD *)v3 = v4;
LABEL_35:
        LODWORD(v10) = v15 + v4;
        result = (v10 - 1);
        goto LABEL_36;
      }
    }
    else
    {
      if (!(_DWORD)v4)
      {
        v9 = 1;
        *(_DWORD *)(a1 + 194568) = 1;
        *(_DWORD *)(a1 + 194580) = 1;
        *v8 = 1;
        goto LABEL_34;
      }
      if ((int)v4 >= v17)
      {
        v9 = 0;
        goto LABEL_34;
      }
      v9 = 1;
      *(_DWORD *)(a1 + 194568) = 1;
      *(_DWORD *)(a1 + 194580) = 1;
    }
    *v8 = 3;
    goto LABEL_34;
  }
  if ((_DWORD)v4 == v17)
  {
    v18 = 1;
    *(_DWORD *)(a1 + 194568) = 1;
    v9 = 0;
    if ((_DWORD)v4)
      v18 = 3;
    *v8 = v18;
  }
  else
  {
    v9 = 1;
    *(_DWORD *)(a1 + 194568) = 1;
    if ((_DWORD)v4)
      *v8 = 3;
    else
      *v8 = 1;
    *(_DWORD *)(a1 + 194580) = 1;
  }
  v12 = 0;
  v11 = 0;
  v10 = (v15 + v4);
  *(_DWORD *)v3 = v10;
  result = (v10 - 1);
  v4 = v10;
LABEL_36:
  *(_DWORD *)(v3 + 4) = result;
  *(_DWORD *)(v3 + 8) = v10;
  if (*v1)
  {
    if (v7)
      v19 = v7 == v5 - 1;
    else
      v19 = 0;
    if (v19)
    {
      v9 = 0;
      v12 = 0;
      v11 = 0;
      *(_QWORD *)(v3 + 64) = 0;
      *(_DWORD *)(v3 + 60) = 0;
    }
  }
  v20 = *v8;
  if ((v20 & 1) != 0)
  {
    result = v4;
    if (!(v20 & 2 | v12))
      goto LABEL_50;
LABEL_52:
    if (!(v20 & 4 | v9))
      *(_DWORD *)(v3 + 8) = result;
    return result;
  }
  if ((v20 & 2) != 0)
  {
    if (!v11)
    {
      *(_DWORD *)v3 = result;
      return result;
    }
    goto LABEL_52;
  }
  if ((v20 & 4) != 0)
  {
    if (!v11)
    {
      *(_DWORD *)v3 = v10;
      return result;
    }
    LODWORD(v4) = v10;
    if (!v12)
LABEL_50:
      *(_DWORD *)(v3 + 4) = v4;
  }
  return result;
}

uint64_t set_flags_and_fb_idx_for_temporal_mode2(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  char v7;
  int v8;
  int v9;
  char v10;
  uint64_t result;
  int v12;
  int v13;
  BOOL v14;
  char v15;

  v1 = (_DWORD *)(a1 + 835428);
  v2 = (_DWORD *)(a1 + 739520);
  v3 = a1 + 194512;
  v5 = *(_DWORD *)(a1 + 747524);
  v4 = *(unsigned int *)(a1 + 747528);
  v6 = *(_DWORD *)(a1 + 747512 + 6880 * v5 * (int)v4 + 11152) & 1;
  *(_DWORD *)(a1 + 747512) = v4;
  *(_DWORD *)(a1 + 747516) = v6;
  *(_OWORD *)(a1 + 194568) = xmmword_208F08A40;
  if (v6)
  {
    v8 = 1;
    *(_DWORD *)(a1 + 194580) = 1;
    if ((_DWORD)v4)
    {
      v12 = *(_DWORD *)(a1 + 747520);
      if ((_DWORD)v4 == v12 - 1)
      {
        v8 = 0;
        *(_DWORD *)(a1 + 194580) = 0;
      }
      else
      {
        v8 = 1;
      }
      v10 = 3;
      *v2 = 3;
    }
    else
    {
      *v2 = 1;
      v12 = *(_DWORD *)(a1 + 747520);
      v10 = 1;
    }
    *(_DWORD *)v3 = v4;
    v13 = v12 + v4;
    result = (v12 + v4 - 1);
    v7 = 1;
    *(_DWORD *)(v3 + 4) = result;
    *(_DWORD *)(v3 + 8) = v13;
    if (!*v1)
      goto LABEL_19;
  }
  else
  {
    v7 = 1;
    *(_DWORD *)(a1 + 194572) = 1;
    if ((_DWORD)v4)
    {
      v8 = *(_DWORD *)(a1 + 758668);
      v9 = v4 - 1;
      if (v8)
      {
        v8 = 0;
        v7 = 0;
        *(_QWORD *)(a1 + 194572) = 0x100000000;
        v10 = 1;
        *v2 = 1;
        *(_DWORD *)v3 = v9;
        result = v4;
        LODWORD(v4) = v4 - 1;
        *(_QWORD *)(v3 + 4) = result;
        if (!*v1)
          goto LABEL_19;
      }
      else
      {
        v10 = 3;
        *v2 = 3;
        *(_DWORD *)v3 = v4;
        result = (v4 - 1);
        *(_DWORD *)(v3 + 4) = v9;
        *(_DWORD *)(v3 + 8) = 0;
        if (!*v1)
          goto LABEL_19;
      }
    }
    else
    {
      result = 0;
      v8 = 0;
      *v2 = 1;
      *(_DWORD *)v3 = 0;
      v10 = 1;
      *(_DWORD *)(v3 + 4) = 0;
      *(_DWORD *)(v3 + 8) = 0;
      if (!*v1)
        goto LABEL_19;
    }
  }
  if (v6)
    v14 = v6 == v5 - 1;
  else
    v14 = 0;
  if (v14)
  {
    *(_QWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 60) = 0;
    if ((v10 & 2) != 0)
      goto LABEL_27;
LABEL_26:
    *(_DWORD *)(v3 + 4) = v4;
    return result;
  }
LABEL_19:
  if ((v10 & 2) != 0)
    v15 = 0;
  else
    v15 = v7;
  if ((v15 & 1) != 0)
    goto LABEL_26;
  if (!v8)
LABEL_27:
    *(_DWORD *)(v3 + 8) = v4;
  return result;
}

void *vp9_svc_reset_temporal_layers(uint64_t a1, int a2)
{
  int *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v30;
  int v31;

  v3 = (int *)(a1 + 834464);
  v4 = (_DWORD *)(a1 + 747512);
  v5 = *(unsigned int *)(a1 + 747520);
  if ((int)v5 >= 1)
  {
    v6 = *(unsigned int *)(a1 + 747524);
    if ((int)v6 >= 1)
    {
      v7 = v6 & 0xFFFFFFFE;
      v8 = 0;
      if (a2)
      {
        v9 = 0;
        v10 = (_DWORD *)(a1 + 758664);
        while (1)
        {
          if (v6 >= 2)
          {
            v12 = v10;
            v13 = v6 & 0xFFFFFFFE;
            do
            {
              *v12 = 0;
              v12[1720] = 0;
              v12[2] = 0;
              v12[1722] = 0;
              v12 += 3440;
              v13 -= 2;
            }
            while (v13);
            v11 = v6 & 0xFFFFFFFE;
            if (v7 == v6)
              goto LABEL_5;
          }
          else
          {
            v11 = 0;
          }
          v14 = v6 - v11;
          v15 = (_DWORD *)(a1 + 758672 + 6880 * (v11 + v8));
          do
          {
            *(v15 - 2) = 0;
            *v15 = 0;
            v15 += 1720;
            --v14;
          }
          while (v14);
LABEL_5:
          ++v9;
          v10 += 1720 * v6;
          v8 += v6;
          if (v9 == v5)
            goto LABEL_24;
        }
      }
      v16 = (_DWORD *)(a1 + 758664);
      do
      {
        if (v6 >= 2)
        {
          v18 = v6 & 0xFFFFFFFE;
          v19 = v16;
          do
          {
            *v19 = 0;
            v19[1720] = 0;
            v19 += 3440;
            v18 -= 2;
          }
          while (v18);
          v17 = v6 & 0xFFFFFFFE;
          if (v7 == v6)
            goto LABEL_15;
        }
        else
        {
          v17 = 0;
        }
        v20 = v6 - v17;
        v21 = 1720 * v17;
        do
        {
          v16[v21] = 0;
          v21 += 1720;
          --v20;
        }
        while (v20);
LABEL_15:
        ++v8;
        v16 += 1720 * v6;
      }
      while (v8 != v5);
    }
  }
LABEL_24:
  v22 = *v3;
  if (!*v3)
  {
    v23 = (_DWORD *)(a1 + 739520);
    v24 = (_DWORD *)(a1 + 194512);
    v25 = v4[4];
    *v4 = v25;
    *(_OWORD *)(a1 + 194568) = xmmword_208F08AB0;
    if (v25)
    {
      if (v4[2789])
      {
        v26 = 0;
        *(_QWORD *)(a1 + 194572) = 0x100000000;
        v27 = v25 - 1;
        v28 = 1;
        *v23 = 1;
        *v24 = v25 - 1;
        *(_DWORD *)(a1 + 194516) = v25;
        if (!v3[241])
          goto LABEL_41;
      }
      else
      {
        v28 = 0;
        v26 = 1;
        v27 = v25;
        *v23 = 3;
        *v24 = v25;
        *(_DWORD *)(a1 + 194516) = v25 - 1;
        if (!v3[241])
          goto LABEL_41;
      }
    }
    else
    {
      v27 = 0;
      v26 = 1;
      v28 = 1;
      *v23 = 1;
      *v24 = 0;
      *(_DWORD *)(a1 + 194516) = 0;
      if (!v3[241])
        goto LABEL_41;
    }
    v30 = v4[1];
    v31 = v4[3] - 1;
    if (v30 >= 1 && v30 == v31)
    {
      *(_QWORD *)(a1 + 194576) = 0;
      *(_DWORD *)(a1 + 194572) = 0;
      if (v28)
        goto LABEL_42;
      goto LABEL_44;
    }
LABEL_41:
    if ((v26 & v28 & 1) != 0)
    {
LABEL_42:
      *(_DWORD *)(a1 + 194516) = v27;
      vp9_update_temporal_layer_framerate(a1);
      return vp9_restore_layer_context((_DWORD *)a1);
    }
LABEL_44:
    *(_DWORD *)(a1 + 194520) = v27;
    vp9_update_temporal_layer_framerate(a1);
    return vp9_restore_layer_context((_DWORD *)a1);
  }
  if (v22 == 2)
  {
    set_flags_and_fb_idx_for_temporal_mode2(a1);
    vp9_update_temporal_layer_framerate(a1);
    return vp9_restore_layer_context((_DWORD *)a1);
  }
  else
  {
    if (v22 == 3)
      set_flags_and_fb_idx_for_temporal_mode3(a1);
    vp9_update_temporal_layer_framerate(a1);
    return vp9_restore_layer_context((_DWORD *)a1);
  }
}

uint64_t vp9_svc_constrain_inter_layer_pred(uint64_t result)
{
  _DWORD *v1;
  int *v2;
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v1 = (_DWORD *)(result + 739520);
  v2 = (int *)(result + 194512);
  v3 = (_DWORD *)(result + 172128);
  v4 = *(_DWORD *)(result + 747512);
  v5 = *(_DWORD *)(result + 835148);
  if (v5 == 1
    || v5 == 2 && !*(_DWORD *)(result + 6880 * *(int *)(result + 747516) + 758668) && !*(_BYTE *)(result + 835290)
    || *(_DWORD *)(result + 4 * (v4 - 1) + 834948))
  {
    v6 = *v2;
    if (*v2 != -1 && *(_DWORD *)(result + 4 * v6 + 172048) != -1 && (*v1 & 1) != 0 && *v3 != -1)
    {
      v7 = *(_DWORD *)(result + 172132);
      if (v7 != -1 && (*v3 != 0x4000 || v7 != 0x4000))
        *v1 &= ~1u;
    }
    v8 = *(int *)(result + 194516);
    if ((_DWORD)v8 != -1 && *(_DWORD *)(result + 4 * v8 + 172048) != -1 && (*v1 & 2) != 0)
    {
      v9 = *(_DWORD *)(result + 172304);
      if (v9 != -1)
      {
        v10 = *(_DWORD *)(result + 172308);
        if (v10 != -1 && (v9 != 0x4000 || v10 != 0x4000))
        {
          *v1 &= ~2u;
          if (!*(_DWORD *)(result + 835428))
            *(_DWORD *)(result + 194516) = v6;
        }
      }
    }
    v11 = *(int *)(result + 194520);
    if ((_DWORD)v11 != -1 && *(_DWORD *)(result + 4 * v11 + 172048) != -1 && (*v1 & 4) != 0)
    {
      v12 = *(_DWORD *)(result + 172480);
      if (v12 != -1)
      {
        v13 = *(_DWORD *)(result + 172484);
        if (v13 != -1 && (v12 != 0x4000 || v13 != 0x4000))
        {
          *v1 &= ~4u;
          if (!*(_DWORD *)(result + 835428))
            *(_DWORD *)(result + 194520) = v6;
        }
      }
    }
  }
  if (v5 != 1 && *(_DWORD *)(result + 834464) != 1)
  {
    v14 = (_DWORD *)(result + 4 * (v4 - 1));
    v15 = v14 + 208629;
    v16 = v14 + 208790;
    v17 = v14 + 208641;
    v18 = v14 + 208653;
    if (*v3 != -1)
    {
      v19 = *(_DWORD *)(result + 172132);
      if (v19 != -1 && (*v3 != 0x4000 || v19 != 0x4000))
      {
        v20 = *v2;
        if ((*v2 & 0x80000000) == 0
          && (v20 != *v15 || ((*v16 >> v20) & 1) == 0)
          && (v20 != *v17 || ((*v16 >> v20) & 1) == 0)
          && (v20 != *v18 || ((*v16 >> v20) & 1) == 0))
        {
          *v1 &= ~1u;
        }
      }
    }
    v21 = *(_DWORD *)(result + 172304);
    if (v21 != -1)
    {
      v22 = *(_DWORD *)(result + 172308);
      if (v22 != -1 && (v21 != 0x4000 || v22 != 0x4000))
      {
        v23 = *(_DWORD *)(result + 194516);
        if ((v23 & 0x80000000) == 0
          && (v23 != *v15 || ((*v16 >> v23) & 1) == 0)
          && (v23 != *v17 || ((*v16 >> v23) & 1) == 0)
          && (v23 != *v18 || ((*v16 >> v23) & 1) == 0))
        {
          *v1 &= ~2u;
        }
      }
    }
  }
  return result;
}

uint64_t vp9_svc_update_ref_frame(uint64_t result)
{
  int *v1;
  _DWORD *v2;
  int *v3;
  _BYTE *v4;
  int *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  unsigned int v15;
  int *v16;
  int v17;
  unsigned int v18;
  int *v19;
  int v20;
  unsigned int v21;
  int *v22;
  int v23;
  unsigned int v24;
  int *v25;
  int v26;
  unsigned int v27;
  int *v28;
  int v29;
  unsigned int v30;
  int *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int *v39;
  int v40;
  unsigned int v41;
  int *v42;
  unsigned int v43;
  int *v44;
  unsigned int v45;
  int *v46;
  unsigned int v47;
  int *v48;
  unsigned int v49;
  int *v50;
  unsigned int v51;
  int *v52;
  unsigned int v53;
  int *v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  int v58;
  int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  _BYTE *v69;
  int v70;
  int v71;
  int v72;
  unsigned int v73;
  int *v74;
  int v75;
  unsigned int v76;
  int *v77;
  int v78;
  unsigned int v79;
  int *v80;
  int v81;
  unsigned int v82;
  int *v83;
  int v84;
  unsigned int v85;
  int *v86;
  int v87;
  unsigned int v88;
  int *v89;
  int v90;
  unsigned int v91;
  int *v92;

  v1 = (int *)(result + 835160);
  v2 = (_DWORD *)(result + 834464);
  v3 = (int *)(result + 747512);
  v4 = (_BYTE *)(result + 739520);
  v5 = (int *)(result + 194512);
  v6 = (_DWORD *)(result + 172048);
  v7 = *(_QWORD *)(result + 189944);
  if (*(_DWORD *)(result + 834464) != 1 || !*(_DWORD *)(result + 835300))
  {
    if (*(_DWORD *)(result + 172972) || *(_DWORD *)(result + 835428))
    {
      if (*(_DWORD *)(result + 194556))
      {
        *(_BYTE *)(result + 747512 + *v5 + 87720) = *v3;
        *(_BYTE *)(result + 747512 + *v5 + 87728) = *(_DWORD *)(result + 747516);
      }
      if (*(_DWORD *)(result + 194560))
      {
        *(_BYTE *)(result + 747512 + *(int *)(result + 194516) + 87720) = *v3;
        *(_BYTE *)(result + 747512 + *(int *)(result + 194516) + 87728) = *(_DWORD *)(result + 747516);
      }
      LODWORD(v7) = *v3;
      if (*(_DWORD *)(result + 194564))
      {
        *(_BYTE *)(result + 747512 + *(int *)(result + 194520) + 87720) = v7;
        *(_BYTE *)(result + 747512 + *(int *)(result + 194520) + 87728) = *(_DWORD *)(result + 747516);
        LODWORD(v7) = *v3;
      }
      goto LABEL_114;
    }
    v32 = v7 + 24;
    LODWORD(v7) = *v3;
    v33 = *(_DWORD *)(result + 747516);
    *(_BYTE *)(result + 835232) = *v3;
    *(_BYTE *)(result + 835240) = v33;
    v34 = *v5;
    if (*v5)
    {
      v35 = *(_DWORD *)(result + 194516);
      if (v35 && *(_DWORD *)(result + 194520))
      {
        v36 = *(_DWORD *)(result + 172640);
        if ((*v6 & 0x80000000) == 0)
        {
          v37 = (int *)(v32 + 224 * *v6);
          if (*v37 >= 1)
            --*v37;
        }
        *v6 = v36;
        ++*(_DWORD *)(v32 + 224 * v36);
      }
      *(_BYTE *)(result + 835233) = v7;
      *(_BYTE *)(result + 835241) = v33;
      if (v34 == 1)
      {
        *(_BYTE *)(result + 835234) = v7;
        *(_BYTE *)(result + 835242) = v33;
        goto LABEL_211;
      }
    }
    else
    {
      *(_BYTE *)(result + 835233) = v7;
      *(_BYTE *)(result + 835241) = v33;
      v35 = *(_DWORD *)(result + 194516);
    }
    if (v35 != 1 && *(_DWORD *)(result + 194520) != 1)
    {
      v72 = *(_DWORD *)(result + 172640);
      v73 = *(_DWORD *)(result + 172052);
      if ((v73 & 0x80000000) == 0)
      {
        v74 = (int *)(v32 + 224 * v73);
        if (*v74 >= 1)
          --*v74;
      }
      *(_DWORD *)(result + 172052) = v72;
      ++*(_DWORD *)(v32 + 224 * v72);
    }
    *(_BYTE *)(result + 835234) = v7;
    *(_BYTE *)(result + 835242) = v33;
    if (v34 == 2)
    {
      *(_BYTE *)(result + 835235) = v7;
      *(_BYTE *)(result + 835243) = v33;
      goto LABEL_219;
    }
LABEL_211:
    if (v35 != 2 && *(_DWORD *)(result + 194520) != 2)
    {
      v75 = *(_DWORD *)(result + 172640);
      v76 = *(_DWORD *)(result + 172056);
      if ((v76 & 0x80000000) == 0)
      {
        v77 = (int *)(v32 + 224 * v76);
        if (*v77 >= 1)
          --*v77;
      }
      *(_DWORD *)(result + 172056) = v75;
      ++*(_DWORD *)(v32 + 224 * v75);
    }
    *(_BYTE *)(result + 835235) = v7;
    *(_BYTE *)(result + 835243) = v33;
    if (v34 == 3)
    {
      *(_BYTE *)(result + 835236) = v7;
      *(_BYTE *)(result + 835244) = v33;
      goto LABEL_227;
    }
LABEL_219:
    if (v35 != 3 && *(_DWORD *)(result + 194520) != 3)
    {
      v78 = *(_DWORD *)(result + 172640);
      v79 = *(_DWORD *)(result + 172060);
      if ((v79 & 0x80000000) == 0)
      {
        v80 = (int *)(v32 + 224 * v79);
        if (*v80 >= 1)
          --*v80;
      }
      *(_DWORD *)(result + 172060) = v78;
      ++*(_DWORD *)(v32 + 224 * v78);
    }
    *(_BYTE *)(result + 835236) = v7;
    *(_BYTE *)(result + 835244) = v33;
    if (v34 == 4)
    {
      *(_BYTE *)(result + 835237) = v7;
      *(_BYTE *)(result + 835245) = v33;
      goto LABEL_235;
    }
LABEL_227:
    if (v35 != 4 && *(_DWORD *)(result + 194520) != 4)
    {
      v81 = *(_DWORD *)(result + 172640);
      v82 = *(_DWORD *)(result + 172064);
      if ((v82 & 0x80000000) == 0)
      {
        v83 = (int *)(v32 + 224 * v82);
        if (*v83 >= 1)
          --*v83;
      }
      *(_DWORD *)(result + 172064) = v81;
      ++*(_DWORD *)(v32 + 224 * v81);
    }
    *(_BYTE *)(result + 835237) = v7;
    *(_BYTE *)(result + 835245) = v33;
    if (v34 == 5)
    {
      *(_BYTE *)(result + 835238) = v7;
      *(_BYTE *)(result + 835246) = v33;
      goto LABEL_243;
    }
LABEL_235:
    if (v35 != 5 && *(_DWORD *)(result + 194520) != 5)
    {
      v84 = *(_DWORD *)(result + 172640);
      v85 = *(_DWORD *)(result + 172068);
      if ((v85 & 0x80000000) == 0)
      {
        v86 = (int *)(v32 + 224 * v85);
        if (*v86 >= 1)
          --*v86;
      }
      *(_DWORD *)(result + 172068) = v84;
      ++*(_DWORD *)(v32 + 224 * v84);
    }
    *(_BYTE *)(result + 835238) = v7;
    *(_BYTE *)(result + 835246) = v33;
    if (v34 == 6)
    {
      *(_BYTE *)(result + 835239) = v7;
      *(_BYTE *)(result + 835247) = v33;
      goto LABEL_250;
    }
LABEL_243:
    if (v35 != 6 && *(_DWORD *)(result + 194520) != 6)
    {
      v87 = *(_DWORD *)(result + 172640);
      v88 = *(_DWORD *)(result + 172072);
      if ((v88 & 0x80000000) == 0)
      {
        v89 = (int *)(v32 + 224 * v88);
        if (*v89 >= 1)
          --*v89;
      }
      *(_DWORD *)(result + 172072) = v87;
      ++*(_DWORD *)(v32 + 224 * v87);
    }
    *(_BYTE *)(result + 835239) = v7;
    *(_BYTE *)(result + 835247) = v33;
    if (v34 == 7)
      goto LABEL_114;
LABEL_250:
    if (v35 != 7 && *(_DWORD *)(result + 194520) != 7)
    {
      v90 = *(_DWORD *)(result + 172640);
      v91 = *(_DWORD *)(result + 172076);
      if ((v91 & 0x80000000) == 0)
      {
        v92 = (int *)(v32 + 224 * v91);
        if (*v92 >= 1)
          --*v92;
      }
      *(_DWORD *)(result + 172076) = v90;
      ++*(_DWORD *)(v32 + 224 * v90);
    }
    goto LABEL_114;
  }
  v8 = v7 + 24;
  if (!*(_DWORD *)(result + 172972))
  {
    v11 = *(_DWORD *)(result + 835428);
    if (!v11 || (v7 = *v3, v10 = *(_DWORD *)(result + 4 * v7 + 835160), (v10 & 1) != 0))
    {
      v38 = *(_DWORD *)(result + 172640);
      if ((*v6 & 0x80000000) == 0)
      {
        v39 = (int *)(v8 + 224 * *v6);
        if (*v39 >= 1)
          --*v39;
      }
      *v6 = v38;
      ++*(_DWORD *)(v8 + 224 * v38);
      LODWORD(v7) = *v3;
      v40 = *(_DWORD *)(result + 747516);
      *(_BYTE *)(result + 835232) = *v3;
      *(_BYTE *)(result + 835240) = v40;
      if (!v11)
        goto LABEL_68;
      v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
      if ((v10 & 2) == 0)
        goto LABEL_73;
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_73;
    }
    v38 = *(_DWORD *)(result + 172640);
LABEL_68:
    v41 = *(_DWORD *)(result + 172052);
    if ((v41 & 0x80000000) == 0)
    {
      v42 = (int *)(v8 + 224 * v41);
      if (*v42 >= 1)
        --*v42;
    }
    *(_DWORD *)(result + 172052) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835233) = v7;
    *(_BYTE *)(result + 835241) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_75;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
LABEL_73:
    if ((v10 & 4) == 0)
      goto LABEL_80;
    v38 = *(_DWORD *)(result + 172640);
LABEL_75:
    v43 = *(_DWORD *)(result + 172056);
    if ((v43 & 0x80000000) == 0)
    {
      v44 = (int *)(v8 + 224 * v43);
      if (*v44 >= 1)
        --*v44;
    }
    *(_DWORD *)(result + 172056) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835234) = v7;
    *(_BYTE *)(result + 835242) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_82;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
LABEL_80:
    if ((v10 & 8) == 0)
      goto LABEL_87;
    v38 = *(_DWORD *)(result + 172640);
LABEL_82:
    v45 = *(_DWORD *)(result + 172060);
    if ((v45 & 0x80000000) == 0)
    {
      v46 = (int *)(v8 + 224 * v45);
      if (*v46 >= 1)
        --*v46;
    }
    *(_DWORD *)(result + 172060) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835235) = v7;
    *(_BYTE *)(result + 835243) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_89;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
LABEL_87:
    if ((v10 & 0x10) == 0)
      goto LABEL_94;
    v38 = *(_DWORD *)(result + 172640);
LABEL_89:
    v47 = *(_DWORD *)(result + 172064);
    if ((v47 & 0x80000000) == 0)
    {
      v48 = (int *)(v8 + 224 * v47);
      if (*v48 >= 1)
        --*v48;
    }
    *(_DWORD *)(result + 172064) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835236) = v7;
    *(_BYTE *)(result + 835244) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_96;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
LABEL_94:
    if ((v10 & 0x20) == 0)
      goto LABEL_101;
    v38 = *(_DWORD *)(result + 172640);
LABEL_96:
    v49 = *(_DWORD *)(result + 172068);
    if ((v49 & 0x80000000) == 0)
    {
      v50 = (int *)(v8 + 224 * v49);
      if (*v50 >= 1)
        --*v50;
    }
    *(_DWORD *)(result + 172068) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835237) = v7;
    *(_BYTE *)(result + 835245) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_103;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
LABEL_101:
    if ((v10 & 0x40) == 0)
      goto LABEL_108;
    v38 = *(_DWORD *)(result + 172640);
LABEL_103:
    v51 = *(_DWORD *)(result + 172072);
    if ((v51 & 0x80000000) == 0)
    {
      v52 = (int *)(v8 + 224 * v51);
      if (*v52 >= 1)
        --*v52;
    }
    *(_DWORD *)(result + 172072) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835238) = v7;
    *(_BYTE *)(result + 835246) = *(_DWORD *)(result + 747516);
    if (!v11)
      goto LABEL_110;
    v10 = *(_DWORD *)(result + 4 * (int)v7 + 835160);
    goto LABEL_108;
  }
  v7 = *v3;
  v9 = (int *)(result + 4 * v7 + 835160);
  v10 = *v9;
  if ((*v9 & 1) != 0)
  {
    v12 = *(_DWORD *)(result + 172640);
    if ((*v6 & 0x80000000) == 0)
    {
      v13 = (int *)(v8 + 224 * *v6);
      if (*v13 >= 1)
        --*v13;
    }
    *v6 = v12;
    ++*(_DWORD *)(v8 + 224 * v12);
    *(_BYTE *)(result + 835232) = v7;
    *(_BYTE *)(result + 835240) = *(_DWORD *)(result + 747516);
    v10 = *v9;
    if ((*v9 & 2) == 0)
    {
LABEL_6:
      if ((v10 & 4) == 0)
        goto LABEL_7;
      goto LABEL_32;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_6;
  }
  v14 = *(_DWORD *)(result + 172640);
  v15 = *(_DWORD *)(result + 172052);
  if ((v15 & 0x80000000) == 0)
  {
    v16 = (int *)(v8 + 224 * v15);
    if (*v16 >= 1)
      --*v16;
  }
  *(_DWORD *)(result + 172052) = v14;
  ++*(_DWORD *)(v8 + 224 * v14);
  *(_BYTE *)(result + 835233) = v7;
  *(_BYTE *)(result + 835241) = *(_DWORD *)(result + 747516);
  v10 = *v9;
  if ((*v9 & 4) == 0)
  {
LABEL_7:
    if ((v10 & 8) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_32:
  v17 = *(_DWORD *)(result + 172640);
  v18 = *(_DWORD *)(result + 172056);
  if ((v18 & 0x80000000) == 0)
  {
    v19 = (int *)(v8 + 224 * v18);
    if (*v19 >= 1)
      --*v19;
  }
  *(_DWORD *)(result + 172056) = v17;
  ++*(_DWORD *)(v8 + 224 * v17);
  *(_BYTE *)(result + 835234) = v7;
  *(_BYTE *)(result + 835242) = *(_DWORD *)(result + 747516);
  v10 = *v9;
  if ((*v9 & 8) == 0)
  {
LABEL_8:
    if ((v10 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_36:
  v20 = *(_DWORD *)(result + 172640);
  v21 = *(_DWORD *)(result + 172060);
  if ((v21 & 0x80000000) == 0)
  {
    v22 = (int *)(v8 + 224 * v21);
    if (*v22 >= 1)
      --*v22;
  }
  *(_DWORD *)(result + 172060) = v20;
  ++*(_DWORD *)(v8 + 224 * v20);
  *(_BYTE *)(result + 835235) = v7;
  *(_BYTE *)(result + 835243) = *(_DWORD *)(result + 747516);
  v10 = *v9;
  if ((*v9 & 0x10) == 0)
  {
LABEL_9:
    if ((v10 & 0x20) == 0)
      goto LABEL_10;
LABEL_44:
    v26 = *(_DWORD *)(result + 172640);
    v27 = *(_DWORD *)(result + 172068);
    if ((v27 & 0x80000000) == 0)
    {
      v28 = (int *)(v8 + 224 * v27);
      if (*v28 >= 1)
        --*v28;
    }
    *(_DWORD *)(result + 172068) = v26;
    ++*(_DWORD *)(v8 + 224 * v26);
    *(_BYTE *)(result + 835237) = v7;
    *(_BYTE *)(result + 835245) = *(_DWORD *)(result + 747516);
    v10 = *v9;
    if ((*v9 & 0x40) == 0)
    {
LABEL_108:
      if ((v10 & 0x80) == 0)
        goto LABEL_114;
      goto LABEL_109;
    }
    goto LABEL_48;
  }
LABEL_40:
  v23 = *(_DWORD *)(result + 172640);
  v24 = *(_DWORD *)(result + 172064);
  if ((v24 & 0x80000000) == 0)
  {
    v25 = (int *)(v8 + 224 * v24);
    if (*v25 >= 1)
      --*v25;
  }
  *(_DWORD *)(result + 172064) = v23;
  ++*(_DWORD *)(v8 + 224 * v23);
  *(_BYTE *)(result + 835236) = v7;
  *(_BYTE *)(result + 835244) = *(_DWORD *)(result + 747516);
  v10 = *v9;
  if ((*v9 & 0x20) != 0)
    goto LABEL_44;
LABEL_10:
  if ((v10 & 0x40) == 0)
    goto LABEL_108;
LABEL_48:
  v29 = *(_DWORD *)(result + 172640);
  v30 = *(_DWORD *)(result + 172072);
  if ((v30 & 0x80000000) == 0)
  {
    v31 = (int *)(v8 + 224 * v30);
    if (*v31 >= 1)
      --*v31;
  }
  *(_DWORD *)(result + 172072) = v29;
  ++*(_DWORD *)(v8 + 224 * v29);
  *(_BYTE *)(result + 835238) = v7;
  *(_BYTE *)(result + 835246) = *(_DWORD *)(result + 747516);
  if ((*v9 & 0x80) != 0)
  {
LABEL_109:
    v38 = *(_DWORD *)(result + 172640);
LABEL_110:
    v53 = *(_DWORD *)(result + 172076);
    if ((v53 & 0x80000000) == 0)
    {
      v54 = (int *)(v8 + 224 * v53);
      if (*v54 >= 1)
        --*v54;
    }
    *(_DWORD *)(result + 172076) = v38;
    ++*(_DWORD *)(v8 + 224 * v38);
    *(_BYTE *)(result + 835239) = v7;
    *(_BYTE *)(result + 835247) = *(_DWORD *)(result + 747516);
  }
LABEL_114:
  v55 = *v5;
  v56 = (int)v7;
  v57 = (_DWORD *)(result + 4 * (int)v7);
  v57[208629] = *v5;
  v58 = *(_DWORD *)(result + 194516);
  v57[208641] = v58;
  v59 = *(_DWORD *)(result + 194520);
  v57[208653] = v59;
  if (*v2 == 1)
    goto LABEL_174;
  v60 = (unsigned int *)(result + 4 * v56 + 835160);
  v61 = *v60;
  v62 = *v60 & 0xFFFFFFFE;
  *v60 = v62;
  if ((v55 || !*(_DWORD *)(result + 194556))
    && (v58 || !*(_DWORD *)(result + 194560))
    && (v59 || !*(_DWORD *)(result + 194564)))
  {
    v63 = v62 & 0xFFFFFFFD;
    *v60 = v62 & 0xFFFFFFFD;
    if (v55 != 1)
    {
LABEL_127:
      if ((v58 != 1 || !*(_DWORD *)(result + 194560)) && (v59 != 1 || !*(_DWORD *)(result + 194564)))
        goto LABEL_132;
      goto LABEL_131;
    }
  }
  else
  {
    v62 = v61 | 1;
    v63 = v61 & 0xFFFFFFFC | 1;
    *v60 = v63;
    if (v55 != 1)
      goto LABEL_127;
  }
  if (!*(_DWORD *)(result + 194556))
    goto LABEL_127;
LABEL_131:
  v63 = v62 | 2;
LABEL_132:
  v64 = v63 & 0xFFFFFFFB;
  *v60 = v63 & 0xFFFFFFFB;
  if (v55 == 2 && *(_DWORD *)(result + 194556)
    || v58 == 2 && *(_DWORD *)(result + 194560)
    || v59 == 2 && *(_DWORD *)(result + 194564))
  {
    v64 = v63 | 4;
  }
  v65 = v64 & 0xFFFFFFF7;
  *v60 = v64 & 0xFFFFFFF7;
  if (v55 == 3 && *(_DWORD *)(result + 194556)
    || v58 == 3 && *(_DWORD *)(result + 194560)
    || v59 == 3 && *(_DWORD *)(result + 194564))
  {
    v65 = v64 | 8;
  }
  v66 = v65 & 0xFFFFFFEF;
  *v60 = v65 & 0xFFFFFFEF;
  if (v55 == 4 && *(_DWORD *)(result + 194556)
    || v58 == 4 && *(_DWORD *)(result + 194560)
    || v59 == 4 && *(_DWORD *)(result + 194564))
  {
    v66 = v65 | 0x10;
  }
  v67 = v66 & 0xFFFFFFDF;
  *v60 = v66 & 0xFFFFFFDF;
  if (v55 == 5 && *(_DWORD *)(result + 194556)
    || v58 == 5 && *(_DWORD *)(result + 194560)
    || v59 == 5 && *(_DWORD *)(result + 194564))
  {
    v67 = v66 | 0x20;
  }
  v68 = v67 & 0xFFFFFFBF;
  *v60 = v67 & 0xFFFFFFBF;
  if (v55 == 6 && *(_DWORD *)(result + 194556)
    || v58 == 6 && *(_DWORD *)(result + 194560)
    || v59 == 6 && *(_DWORD *)(result + 194564))
  {
    v68 = v67 | 0x40;
  }
  *v60 = v68 & 0xFFFFFF7F;
  if (v55 == 7 && *(_DWORD *)(result + 194556)
    || v58 == 7 && *(_DWORD *)(result + 194560)
    || v59 == 7 && *(_DWORD *)(result + 194564))
  {
    *v60 = v68 | 0x80;
  }
LABEL_174:
  v69 = (_BYTE *)(result + v56);
  v69[835195] = *(_DWORD *)(result + 194556);
  v69[835200] = *(_DWORD *)(result + 194560);
  v69[835205] = *(_DWORD *)(result + 194564);
  v69[835180] = *v4 & 1;
  v69[835185] = *v4 & 2;
  v69[835190] = *v4 & 4;
  if (*v3)
    return result;
  v70 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) != 0 || *(_DWORD *)(result + 194556))
  {
    *(_BYTE *)(result + *v5 + 835291) = 1;
    v70 = *(_DWORD *)v4;
  }
  if ((v70 & 2) != 0 || *(_DWORD *)(result + 194560))
  {
    *(_BYTE *)(result + *(int *)(result + 194516) + 835291) = 1;
    v70 = *(_DWORD *)v4;
  }
  if ((v70 & 4) != 0 || *(_DWORD *)(result + 194564))
    *(_BYTE *)(result + *(int *)(result + 194520) + 835291) = 1;
  if (*v2 != 1)
    return result;
  v71 = *v1;
  if ((*v1 & 1) != 0)
  {
    *(_BYTE *)(result + 835291) = 1;
    if ((v71 & 2) == 0)
    {
LABEL_187:
      if ((v71 & 4) == 0)
        goto LABEL_188;
      goto LABEL_196;
    }
  }
  else if ((v71 & 2) == 0)
  {
    goto LABEL_187;
  }
  *(_BYTE *)(result + 835292) = 1;
  if ((v71 & 4) == 0)
  {
LABEL_188:
    if ((v71 & 8) == 0)
      goto LABEL_189;
    goto LABEL_197;
  }
LABEL_196:
  *(_BYTE *)(result + 835293) = 1;
  if ((v71 & 8) == 0)
  {
LABEL_189:
    if ((v71 & 0x10) == 0)
      goto LABEL_190;
    goto LABEL_198;
  }
LABEL_197:
  *(_BYTE *)(result + 835294) = 1;
  if ((v71 & 0x10) == 0)
  {
LABEL_190:
    if ((v71 & 0x20) == 0)
      goto LABEL_191;
LABEL_199:
    *(_BYTE *)(result + 835296) = 1;
    if ((v71 & 0x40) == 0)
    {
LABEL_192:
      if ((v71 & 0x80) == 0)
        return result;
LABEL_201:
      *(_BYTE *)(result + 835298) = 1;
      return result;
    }
    goto LABEL_200;
  }
LABEL_198:
  *(_BYTE *)(result + 835295) = 1;
  if ((v71 & 0x20) != 0)
    goto LABEL_199;
LABEL_191:
  if ((v71 & 0x40) == 0)
    goto LABEL_192;
LABEL_200:
  *(_BYTE *)(result + 835297) = 1;
  if ((v71 & 0x80) != 0)
    goto LABEL_201;
  return result;
}

uint64_t vp9_svc_check_skip_enhancement_layer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v1 = *(unsigned int *)(a1 + 747508);
  if ((_DWORD)v1)
  {
    v2 = *(unsigned int *)(a1 + 747512);
    if ((int)v2 < 1 || *(_QWORD *)(a1 + 190040))
      return 0;
    v4 = *(_DWORD *)(a1 + 835144);
    if (v4 != 1 && (v4 != 3 || *(_DWORD *)(a1 + 4 * *(int *)(a1 + 747520) + 835088)))
    {
      if (*(_DWORD *)(a1 + 834948))
        return 0;
    }
    v1 = 1;
    *(_DWORD *)(a1 + 834892) = 1;
    ++*(_DWORD *)(a1 + 189844);
    *(int32x2_t *)(a1 + 738564) = vadd_s32(*(int32x2_t *)(a1 + 738564), (int32x2_t)0x1FFFFFFFFLL);
    *(_QWORD *)(a1 + 738760) = 0;
    *(_DWORD *)(a1 + 738776) = *(_DWORD *)(a1 + 738592);
    *(_DWORD *)(a1 + 738468) = *(_DWORD *)(a1 + 173028);
    if (v4 != 1)
    {
      v5 = *(_QWORD *)(a1 + 738744);
      if (*(_QWORD *)(a1 + 738640) > v5)
      {
        *(_QWORD *)(a1 + 738640) = v5;
        *(_QWORD *)(a1 + 738648) = v5;
      }
    }
    *(_DWORD *)(a1 + 850796) = *(_DWORD *)(a1 + 190072);
    *(_DWORD *)(a1 + 194568) = 0;
    v6 = a1 + 747512 + 4 * v2;
    *(_DWORD *)(v6 + 87388) = 1;
    *(_BYTE *)(a1 + 850377) = 1;
    *(_DWORD *)(v6 + 87436) = 1;
    LODWORD(v6) = *(_DWORD *)(a1 + 747512);
    v7 = *(_DWORD *)(a1 + 747520);
    v8 = a1 + 747512 + 6880 * *(int *)(a1 + 747524) * (uint64_t)(int)v6;
    ++*(_DWORD *)(v8 + 11152);
    ++*(_DWORD *)(v8 + 11160);
    if ((_DWORD)v6 == v7 - 1)
    {
      ++*(_DWORD *)(a1 + 834688);
      return 1;
    }
  }
  return v1;
}

void vp9_loop_filter_frame_mt(uint64_t a1, int *a2, const void *a3, int a4, uint64_t a5, int a6, _QWORD *a7, int a8, uint64_t a9)
{
  uint64_t v9;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (**v29)();
  int *v30;
  int v31;

  if (a4)
  {
    LODWORD(v9) = a8;
    v15 = a2[328];
    v16 = (v15 >> 1) & 0x7FFFFFF8;
    v17 = v15 >> 3;
    if (v15 <= 0x47)
      v17 = 8;
    if ((int)v15 < 9)
    {
      v16 = 0;
      v17 = a2[328];
    }
    if (a6)
      v18 = v16;
    else
      v18 = 0;
    if (a6)
      v19 = v17;
    else
      v19 = a2[328];
    vp9_loop_filter_frame_init((uint64_t)a2, a4);
    v20 = (a2[328] + 7) >> 3;
    v21 = 1 << a2[4558];
    if (v21 >= v20)
      v21 = (a2[328] + 7) >> 3;
    if (v21 >= (int)v9)
      v9 = v9;
    else
      v9 = v21;
    if (!*(_DWORD *)(a9 + 24) || v20 != *(_DWORD *)(a9 + 28) || (int)v9 > *(_DWORD *)(a9 + 40))
    {
      vp9_loop_filter_dealloc((int *)a9);
      vp9_loop_filter_alloc(a9, (uint64_t)a2, v20, a2[73], v9);
    }
    *(_DWORD *)(a9 + 44) = v9;
    memset(*(void **)(a9 + 16), 255, 4 * v20);
    if ((int)v9 >= 1)
    {
      v22 = v19;
      v23 = 0;
      v31 = v22 + v18;
      v24 = a7;
      v30 = a2;
      v25 = a1;
      v26 = a3;
      do
      {
        v27 = a5;
        v28 = *(_QWORD *)(a9 + 32) + v23;
        v24[3] = loop_filter_row_worker;
        v24[4] = a9;
        v24[5] = v28;
        *(_QWORD *)v28 = v25;
        *(_QWORD *)(v28 + 8) = v30;
        *(_QWORD *)(v28 + 424) = 0;
        *(_DWORD *)(v28 + 432) = 0;
        memcpy((void *)(v28 + 16), v26, 0x198uLL);
        *(_DWORD *)(v28 + 424) = v18;
        *(_DWORD *)(v28 + 428) = v31;
        *(_DWORD *)(v28 + 432) = v27;
        a5 = v27;
        v29 = off_253EA52B0;
        if (440 * (v9 - 1) != v23)
          v29 = (uint64_t (**)())&off_253EA52A8;
        ((void (*)(_QWORD *))*v29)(v24);
        v23 += 440;
        v18 += 8;
        v24 += 7;
      }
      while (440 * v9 != v23);
      do
      {
        off_253EA52A0();
        a7 += 7;
        --v9;
      }
      while (v9);
    }
  }
}

