void cricket::BasicPortAllocatorSession::GetCandidateStatsFromReadyPorts(uint64_t a1, std::string **a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  std::string *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  void **v35;
  std::string *v36;
  __int128 v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  std::string v48[18];
  std::string v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;

  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)a1 + 96))(&v54);
  v3 = v54;
  v41 = v55;
  if (v54 != v55)
  {
    do
    {
      v4 = *v3;
      v5 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 136))(*v3);
      v6 = *v5;
      v7 = v5[1];
      v8 = v7 - *v5;
      if (v8)
      {
        v42 = v3;
        if (0x84BDA12F684BDA13 * (v8 >> 4) >= 0x97B425ED097B43)
          goto LABEL_57;
        v9 = (char *)operator new(v8);
        v10 = 0;
        v11 = a1;
        do
        {
          cricket::Candidate::Candidate((std::string *)&v9[v10], (std::string *)(v6 + v10));
          v10 += 432;
        }
        while (v6 + v10 != v7);
        if (v10)
        {
          v40 = v10 / 432;
          v44 = &v9[432 * (v10 / 432)];
          v45 = v9;
          v12 = v9;
          while (1)
          {
            LOBYTE(v52) = 0;
            BYTE8(v53) = 0;
            (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 184))(v4, &v52);
            v16 = *(_DWORD **)(v11 + 544);
            if ((*((_DWORD *)v12 + 52) | 2) == 2)
            {
              v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 72))(*(_QWORD *)(v11 + 544));
              if ((~v16[29] & 0xC00) == 0)
                goto LABEL_19;
            }
            else
            {
              v17 = 0;
              if ((~v16[29] & 0xC00) == 0)
                goto LABEL_19;
            }
            if ((v16[35] & 1) == 0)
            {
LABEL_19:
              v18 = 0;
              goto LABEL_21;
            }
            v18 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 72))(v16) ^ 1;
LABEL_21:
            v19 = v16[35];
            v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 72))(v16);
            v21 = *((_DWORD *)v12 + 52);
            if ((v21 != 1 || v18) && (v21 != 3 || (v19 & 2) != 0))
            {
              if (v21 == 2)
                v22 = v20;
              else
                v22 = 0;
            }
            else
            {
              v22 = 1;
            }
            cricket::Candidate::ToSanitizedCopy((std::string *)v12, v17, v22, (uint64_t)v48);
            v46 = v52;
            v47 = v53;
            cricket::Candidate::Candidate(&v49, v48);
            v50 = v46;
            v51 = v47;
            cricket::Candidate::~Candidate((void **)&v48[0].__r_.__value_.__l.__data_);
            v23 = a2[1];
            v24 = (unint64_t)a2[2];
            v9 = v45;
            if ((unint64_t)v23 < v24)
            {
              if (!v23)
                goto LABEL_56;
              v13 = cricket::Candidate::Candidate(v23, &v49);
              v14 = v51;
              *(_OWORD *)&v13[18].__r_.__value_.__l.__data_ = v50;
              *(_OWORD *)&v13[18].__r_.__value_.__r.__words[2] = v14;
              v15 = (std::string *)((char *)v13 + 464);
              goto LABEL_13;
            }
            v25 = 0x34F72C234F72C235 * (((char *)v23 - (char *)*a2) >> 4);
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) > 0x8D3DCB08D3DCB0)
              goto LABEL_57;
            v27 = 0x34F72C234F72C235 * ((uint64_t)(v24 - (_QWORD)*a2) >> 4);
            if (2 * v27 > v26)
              v26 = 2 * v27;
            if (v27 >= 0x469EE58469EE58)
              v28 = 0x8D3DCB08D3DCB0;
            else
              v28 = v26;
            if (!v28)
            {
LABEL_56:
              __break(1u);
LABEL_57:
              abort();
            }
            if (v28 > 0x8D3DCB08D3DCB0)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v29 = 464 * v28;
            v30 = (char *)operator new(464 * v28);
            v31 = (std::string *)&v30[v29];
            v32 = cricket::Candidate::Candidate((std::string *)&v30[464 * v25], &v49);
            v33 = v51;
            *(_OWORD *)&v32[18].__r_.__value_.__l.__data_ = v50;
            *(_OWORD *)&v32[18].__r_.__value_.__r.__words[2] = v33;
            v15 = (std::string *)((char *)v32 + 464);
            v35 = (void **)*a2;
            v34 = (void **)a2[1];
            if (v34 == (void **)*a2)
            {
              *a2 = v32;
              a2[1] = v15;
              a2[2] = v31;
              v9 = v45;
              if (!v34)
                goto LABEL_13;
              goto LABEL_48;
            }
            do
            {
              v36 = v32;
              v32 = cricket::Candidate::Candidate((std::string *)((char *)v32 - 464), (std::string *)(v34 - 58));
              v37 = *((_OWORD *)v34 - 1);
              *(_OWORD *)&v36[-2].__r_.__value_.__r.__words[2] = *((_OWORD *)v34 - 2);
              *(_OWORD *)&v36[-1].__r_.__value_.__r.__words[1] = v37;
              v34 -= 58;
            }
            while (v34 != v35);
            v34 = (void **)*a2;
            v38 = (void **)a2[1];
            *a2 = v32;
            a2[1] = v15;
            a2[2] = v31;
            if (v38 != v34)
            {
              v11 = a1;
              v9 = v45;
              do
              {
                v38 -= 58;
                cricket::Candidate::~Candidate(v38);
              }
              while (v38 != v34);
              if (!v34)
                goto LABEL_13;
LABEL_48:
              operator delete(v34);
              goto LABEL_13;
            }
            v11 = a1;
            v9 = v45;
            if (v34)
              goto LABEL_48;
LABEL_13:
            a2[1] = v15;
            cricket::Candidate::~Candidate((void **)&v49.__r_.__value_.__l.__data_);
            v12 += 432;
            if (v12 == v44)
            {
              v39 = 432 * v40;
              do
              {
                cricket::Candidate::~Candidate((void **)&v9[v39 - 432]);
                v39 -= 432;
              }
              while (v39);
              break;
            }
          }
        }
        operator delete(v9);
        v3 = v42;
      }
      ++v3;
    }
    while (v3 != v41);
    v3 = v54;
  }
  if (v3)
  {
    v55 = v3;
    operator delete(v3);
  }
}

void cricket::BasicPortAllocatorSession::SetStunKeepaliveIntervalForReadyPorts(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  (*(void (**)(_QWORD **__return_ptr))(*(_QWORD *)a1 + 96))(&v7);
  v3 = v7;
  v4 = v8;
  if (v7 != v8)
  {
    do
    {
      v6 = (_DWORD *)*v3;
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v3 + 16))(*v3) == 1
        || !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6)
        && !(*(unsigned int (**)(_DWORD *))(*(_QWORD *)v6 + 128))(v6))
      {
        if (*(_BYTE *)(a2 + 4))
          v5 = *(_DWORD *)a2;
        else
          v5 = 10000;
        v6[239] = v5;
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = v7;
  }
  if (v3)
  {
    v8 = v3;
    operator delete(v3);
  }
}

void cricket::BasicPortAllocatorSession::ReadyPorts(cricket::BasicPortAllocatorSession *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 78);
  v3 = (uint64_t *)*((_QWORD *)this + 79);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      if (!*((_BYTE *)v2 + 16) || (*((_DWORD *)v2 + 5) - 4) > 0xFFFFFFFD)
        goto LABEL_5;
      v7 = *v2;
      v8 = (unint64_t)a2[2];
      if ((unint64_t)v5 < v8)
      {
        if (!v5)
          goto LABEL_36;
        *(_QWORD *)v5 = v7;
        v9 = v5 + 8;
        goto LABEL_4;
      }
      v10 = (v5 - v6) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_37;
      v12 = v8 - (_QWORD)v6;
      if (v12 >> 2 > v11)
        v11 = v12 >> 2;
      v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
      v14 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v13)
        v14 = v11;
      if (!v14)
      {
LABEL_36:
        __break(1u);
LABEL_37:
        abort();
      }
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v32 = 8 * v14;
      v15 = operator new(8 * v14);
      v16 = &v15[8 * v10];
      *(_QWORD *)v16 = v7;
      v9 = v16 + 8;
      if (v5 != v6)
        break;
      *a2 = v16;
      a2[1] = v9;
      a2[2] = &v15[v32];
      if (v6)
        goto LABEL_30;
LABEL_3:
      v6 = v16;
LABEL_4:
      a2[1] = v9;
      v5 = v9;
LABEL_5:
      v2 += 3;
      if (v2 == v3)
        return;
    }
    v17 = v5 - v6 - 8;
    if (v17 < 0x168
      || ((v18 = (v5 - 8 - v6) & 0xFFFFFFFFFFFFFFF8,
           v19 = (unint64_t)&v15[v5 - v6 - 8],
           v20 = v19 - v18,
           v21 = (unint64_t)&v5[-v18 - 8],
           v20 <= v19)
        ? (v22 = v21 > (unint64_t)(v5 - 8))
        : (v22 = 1),
          v22 || (unint64_t)(v6 - v15) < 0x20))
    {
      v23 = v5;
      v24 = v32;
    }
    else
    {
      v26 = (v17 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v5[-v27];
      v16 -= v27;
      v28 = &v15[8 * v10 - 16];
      v29 = v5 - 16;
      v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v31 = *(_OWORD *)v29;
        *(v28 - 1) = *((_OWORD *)v29 - 1);
        *v28 = v31;
        v28 -= 2;
        v29 -= 32;
        v30 -= 4;
      }
      while (v30);
      v24 = v32;
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        *a2 = v16;
        a2[1] = v9;
        a2[2] = &v15[v24];
        if (!v6)
          goto LABEL_3;
LABEL_30:
        operator delete(v6);
        goto LABEL_3;
      }
    }
    do
    {
      v25 = *((_QWORD *)v23 - 1);
      v23 -= 8;
      *((_QWORD *)v16 - 1) = v25;
      v16 -= 8;
    }
    while (v23 != v6);
    goto LABEL_27;
  }
}

void cricket::BasicPortAllocatorSession::ReadyCandidates(cricket::BasicPortAllocatorSession *this@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v7;
  uint64_t i;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v7 = *((_QWORD *)this + 78);
  for (i = *((_QWORD *)this + 79); v7 != i; v7 += 24)
  {
    if (*(_BYTE *)(v7 + 16))
    {
      if ((*(_DWORD *)(v7 + 20) - 4) <= 0xFFFFFFFD)
        cricket::BasicPortAllocatorSession::GetCandidatesFromPort((uint64_t)this, *(_QWORD *)v7, (uint64_t)a7, a2, a3, a4, a5, a6);
    }
  }
}

void cricket::BasicPortAllocatorSession::GetCandidatesFromPort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  int v14;
  int v15;
  int v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  std::string *v30;
  _BOOL4 v32;
  std::string *v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;

  if (a3)
  {
    v10 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      while (1)
      {
        v14 = *(_DWORD *)(a1 + 672);
        v15 = *(_DWORD *)(v11 + 112);
        if (v15 == 2)
        {
          if (!*(_DWORD *)(v11 + 116))
            goto LABEL_6;
        }
        else if (v15 == 30)
        {
          v36 = *MEMORY[0x24BDAE878];
          if (*(_QWORD *)(v11 + 116) == (_QWORD)v36 && *(_QWORD *)(v11 + 124) == *((_QWORD *)&v36 + 1))
            goto LABEL_6;
          v37 = rtc::kV4MappedPrefix;
          if (*(_QWORD *)(v11 + 116) == (_QWORD)rtc::kV4MappedPrefix
            && *(_QWORD *)(v11 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
          {
            goto LABEL_6;
          }
        }
        v18 = *(_DWORD *)(v11 + 208);
        if (!v18)
          break;
        if (v18 == 1)
        {
          if ((v14 & 2) == 0)
            goto LABEL_6;
        }
        else if (v18 != 3 || (v14 & 4) == 0)
        {
          goto LABEL_6;
        }
        v21 = 0;
        v22 = *(_QWORD *)(a1 + 544);
        if ((~*(_DWORD *)(v22 + 116) & 0xC00) == 0)
          goto LABEL_50;
LABEL_49:
        if ((*(_BYTE *)(v22 + 140) & 1) != 0)
        {
          v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22) ^ 1;
          goto LABEL_52;
        }
LABEL_50:
        v25 = 0;
LABEL_52:
        v26 = *(_DWORD *)(v22 + 140);
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
        v28 = *(_DWORD *)(v11 + 208);
        if ((v28 != 1 || v25) && (v28 != 3 || (v26 & 2) != 0))
        {
          if (v28 == 2)
            v29 = v27;
          else
            v29 = 0;
        }
        else
        {
          v29 = 1;
        }
        cricket::Candidate::ToSanitizedCopy((std::string *)v11, v21, v29, (uint64_t)&v35);
        v30 = *(std::string **)(a3 + 8);
        if ((unint64_t)v30 >= *(_QWORD *)(a3 + 16))
        {
          v13 = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)a3, (std::string *)&v35);
        }
        else
        {
          if (!v30)
          {
            __break(1u);
            goto LABEL_74;
          }
          v13 = cricket::Candidate::Candidate(v30, (std::string *)&v35) + 18;
        }
        *(_QWORD *)(a3 + 8) = v13;
        cricket::Candidate::~Candidate(&v35);
LABEL_6:
        v11 += 432;
        if (v11 == v12)
          return;
      }
      if ((v14 & 2) == 0)
      {
LABEL_47:
        if ((v14 & 1) == 0)
          goto LABEL_6;
LABEL_48:
        v22 = *(_QWORD *)(a1 + 544);
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 72))(v22);
        if ((~*(_DWORD *)(v22 + 116) & 0xC00) == 0)
          goto LABEL_50;
        goto LABEL_49;
      }
      if (v15 == 2)
      {
        LODWORD(v19) = *(_DWORD *)(v11 + 116);
        v20 = 1;
        if ((unsigned __int16)v19 == 65193)
          goto LABEL_46;
        if (*(_DWORD *)(v11 + 116) == 127)
          goto LABEL_46;
        v23 = bswap32(v19);
        if (HIWORD(v23) == 49320 || (v23 & 0xFF000000) == 0xA000000 || (v23 & 0xFFF00000) == 0xAC100000)
          goto LABEL_46;
      }
      else if (v15 == 30)
      {
        v19 = *(_QWORD *)(v11 + 116);
        if ((v19 & 0xC0FF) == 0x80FE)
        {
          v20 = 1;
          goto LABEL_46;
        }
        v36 = *MEMORY[0x24BDAE880];
        v32 = *(_QWORD *)(v11 + 116) != (_QWORD)v36 || *(_QWORD *)(v11 + 124) != *((_QWORD *)&v36 + 1);
        v20 = 1;
        if (v19 == 253 || !v32)
        {
LABEL_46:
          if (!v20)
            goto LABEL_48;
          goto LABEL_47;
        }
      }
      else
      {
        LODWORD(v19) = *(_DWORD *)(v11 + 116);
      }
      v20 = v15 == 2 && (v19 & 0xC0FF) == 16484;
      goto LABEL_46;
    }
  }
  else
  {
LABEL_74:
    v33 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc", 550, "candidates != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v34);
    cricket::BasicPortAllocator::MdnsObfuscationEnabled((cricket::BasicPortAllocator *)v33);
  }
}

BOOL cricket::BasicPortAllocator::MdnsObfuscationEnabled(cricket::BasicPortAllocator *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 39) + 80))(*((_QWORD *)this + 39)) != 0;
}

BOOL cricket::BasicPortAllocatorSession::CandidatesAllocationDone(cricket::BasicPortAllocatorSession *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  BOOL v8;

  if (!*((_BYTE *)this + 570))
    return 0;
  v1 = *((_QWORD *)this + 75);
  v2 = *((_QWORD *)this + 76);
  if (v1 != v2)
  {
    while (*(_DWORD *)(*(_QWORD *)v1 + 64) != 1)
    {
      v1 += 8;
      if (v1 == v2)
        goto LABEL_5;
    }
    return 0;
  }
LABEL_5:
  v3 = *((_QWORD *)this + 78);
  v4 = *((_QWORD *)this + 79);
  if (v3 == v4)
    return 1;
  v5 = v3 + 24;
  do
  {
    v6 = *(_DWORD *)(v5 - 4);
    result = v6 != 0;
    if (v6)
      v8 = v5 == v4;
    else
      v8 = 1;
    v5 += 24;
  }
  while (!v8);
  return result;
}

void cricket::BasicPortAllocatorSession::UpdateIceParametersInternal(cricket::BasicPortAllocatorSession *this)
{
  uint64_t *v1;
  uint64_t *v2;
  std::string *v4;
  __int128 **v5;
  size_t v6;
  __int128 *v7;
  uint64_t v8;
  unsigned __int8 v9;
  size_t size;
  std::string *p_src;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  void **v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t v21;
  __int128 *v22;
  char v23;
  __int128 **v24;
  std::string __src;
  __int128 v26;
  unint64_t v27;

  v1 = (uint64_t *)*((_QWORD *)this + 78);
  v2 = (uint64_t *)*((_QWORD *)this + 79);
  if (v1 != v2)
  {
    v4 = (std::string *)((char *)this + 456);
    v24 = (__int128 **)((char *)this + 488);
    v5 = (__int128 **)((char *)this + 512);
    do
    {
      v8 = *v1;
      if (*((char *)this + 479) < 0)
      {
        std::string::__init_copy_ctor_external(&__src, *((const std::string::value_type **)this + 57), *((_QWORD *)this + 58));
        v9 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_7:
          size = v9;
          p_src = &__src;
          goto LABEL_13;
        }
      }
      else
      {
        __src = *v4;
        v9 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
      }
      size = __src.__r_.__value_.__l.__size_;
      if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_37;
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      if (__src.__r_.__value_.__l.__size_)
      {
        if (!__src.__r_.__value_.__r.__words[0])
          goto LABEL_37;
      }
      if (__src.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
        abort();
LABEL_13:
      if (size > 0x16)
      {
        v13 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((size | 7) != 0x17)
          v13 = size | 7;
        v14 = v13 + 1;
        v12 = (std::string *)operator new(v13 + 1);
        *((_QWORD *)&v26 + 1) = size;
        v27 = v14 | 0x8000000000000000;
        *(_QWORD *)&v26 = v12;
      }
      else
      {
        HIBYTE(v27) = size;
        v12 = (std::string *)&v26;
      }
      v15 = (std::string *)((char *)v12 + size);
      if (v12 <= p_src && v15 > p_src)
      {
LABEL_37:
        __break(1u);
        return;
      }
      if (size)
        memmove(v12, p_src, size);
      v15->__r_.__value_.__s.__data_[0] = 0;
      v17 = (void **)(v8 + 568);
      if (*(char *)(v8 + 591) < 0)
      {
        operator delete(*v17);
        v23 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
        *(_OWORD *)v17 = v26;
        *(_QWORD *)(v8 + 584) = v27;
        if ((v23 & 0x80) == 0)
        {
LABEL_26:
          v18 = *v1;
          v19 = *((_DWORD *)this + 120);
          v20 = *((char *)this + 511);
          if ((v20 & 0x80000000) == 0)
            goto LABEL_27;
          goto LABEL_30;
        }
      }
      else
      {
        *(_OWORD *)v17 = v26;
        *(_QWORD *)(v8 + 584) = v27;
        if ((v9 & 0x80) == 0)
          goto LABEL_26;
      }
      operator delete(__src.__r_.__value_.__l.__data_);
      v18 = *v1;
      v19 = *((_DWORD *)this + 120);
      v20 = *((char *)this + 511);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_27:
        v21 = v20;
        v22 = (__int128 *)v24;
        goto LABEL_33;
      }
LABEL_30:
      v21 = *((_QWORD *)this + 62);
      if ((v21 & 0x8000000000000000) != 0)
        goto LABEL_37;
      v22 = *v24;
      if (v21)
      {
        if (!v22)
          goto LABEL_37;
      }
LABEL_33:
      if (*((char *)this + 535) < 0)
      {
        v6 = *((_QWORD *)this + 65);
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_37;
        v7 = *v5;
        if (v6)
        {
          if (!v7)
            goto LABEL_37;
        }
      }
      else
      {
        v6 = *((unsigned __int8 *)this + 535);
        v7 = (__int128 *)v5;
      }
      cricket::Port::SetIceParameters(v18, v19, v22, v21, v7, v6);
      v1 += 3;
    }
    while (v1 != v2);
  }
}

uint64_t cricket::BasicPortAllocatorSession::GetPortConfigurations(cricket::BasicPortAllocatorSession *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  const std::string::value_type *v21;
  size_t v22;
  _QWORD *p_p;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char **v27;
  char **v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD *v33;
  char v35;
  char v36;
  void *__p;
  unint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t *, void **);
  uint64_t (*v40)(uint64_t);

  v2 = *((_QWORD *)this + 68);
  v3 = (char *)this + 488;
  v4 = *(_QWORD *)((*(uint64_t (**)(cricket::BasicPortAllocatorSession *))(*(_QWORD *)this + 152))(this)
                 + 304);
  v5 = operator new();
  v6 = (_QWORD *)v5;
  if (*((char *)this + 511) < 0)
  {
    v7 = *((_QWORD *)this + 62);
    if ((v7 & 0x8000000000000000) != 0)
      goto LABEL_66;
    v3 = *(char **)v3;
    if (v7)
    {
      if (!v3)
        goto LABEL_66;
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 511);
  }
  v8 = (char *)this + 512;
  if (*((char *)this + 535) < 0)
  {
    v9 = *((_QWORD *)this + 65);
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_66;
    v8 = *(char **)v8;
    if (v9)
    {
      if (!v8)
        goto LABEL_66;
    }
  }
  else
  {
    v9 = *((unsigned __int8 *)this + 535);
  }
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = &unk_24C0ACDA0;
  *(_BYTE *)(v5 + 64) = 0;
  *(_WORD *)(v5 + 56) = 0;
  *(_DWORD *)(v5 + 60) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_DWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = v5 + 80;
  std::set<rtc::SocketAddress>::insert[abi:sn180100]<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>(v5 + 72, *(char **)(v2 + 176), (char *)(v2 + 184));
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_67;
  if (v7 > 0x16)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v10 = (char *)operator new(v12 + 1);
    v6[13] = v7;
    v6[14] = v13 | 0x8000000000000000;
    v6[12] = v10;
    v11 = &v10[v7];
    if (v10 > v3)
      goto LABEL_19;
  }
  else
  {
    v10 = (char *)(v6 + 12);
    *((_BYTE *)v6 + 119) = v7;
    v11 = (char *)v6 + v7 + 96;
    if (v6 + 12 > (_QWORD *)v3)
      goto LABEL_19;
  }
  if (v11 > v3)
    goto LABEL_66;
LABEL_19:
  if (v7)
    memmove(v10, v3, v7);
  *v11 = 0;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
LABEL_67:
    abort();
  if (v9 > 0x16)
  {
    v16 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v16 = v9 | 7;
    v17 = v16 + 1;
    v14 = (char *)operator new(v16 + 1);
    v6[16] = v9;
    v6[17] = v17 | 0x8000000000000000;
    v6[15] = v14;
    v15 = &v14[v9];
    if (v14 > v8)
      goto LABEL_29;
  }
  else
  {
    v14 = (char *)(v6 + 15);
    *((_BYTE *)v6 + 143) = v9;
    v15 = (char *)v6 + v9 + 120;
    if (v6 + 15 > (_QWORD *)v8)
      goto LABEL_29;
  }
  if (v15 > v8)
    goto LABEL_66;
LABEL_29:
  if (v9)
    memmove(v14, v8, v9);
  *v15 = 0;
  v6[19] = 0;
  *((_BYTE *)v6 + 144) = 0;
  v6[20] = 0;
  v6[21] = 0;
  if (*(_QWORD *)(v2 + 192))
  {
    v18 = *(_QWORD *)(v2 + 176);
    if ((_QWORD *)(v18 + 32) != v6)
    {
      v19 = *(_BYTE *)(v18 + 55);
      if (*((char *)v6 + 23) < 0)
      {
        if (v19 >= 0)
          v21 = (const std::string::value_type *)(v18 + 32);
        else
          v21 = *(const std::string::value_type **)(v18 + 32);
        if (v19 >= 0)
          v22 = *(unsigned __int8 *)(v18 + 55);
        else
          v22 = *(_QWORD *)(v18 + 40);
        std::string::__assign_no_alias<false>((std::string *)v6, v21, v22);
      }
      else if ((*(_BYTE *)(v18 + 55) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v6, *(char **)(v18 + 32), *(_QWORD *)(v18 + 40));
      }
      else
      {
        v20 = *(_OWORD *)(v18 + 32);
        v6[2] = *(_QWORD *)(v18 + 48);
        *(_OWORD *)v6 = v20;
      }
    }
    *((_DWORD *)v6 + 8) = *(_DWORD *)(v18 + 64);
    *(_OWORD *)((char *)v6 + 36) = *(_OWORD *)(v18 + 68);
    *((_WORD *)v6 + 28) = *(_WORD *)(v18 + 88);
    *((_BYTE *)v6 + 64) = *(_BYTE *)(v18 + 96);
    *((_DWORD *)v6 + 15) = *(_DWORD *)(v18 + 92);
  }
  if (v4)
  {
    (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)v4 + 16))(&__p, v4, "WebRTC-UseTurnServerAsStunServer", 32);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
      p_p = &__p;
      v24 = HIBYTE(v39);
      goto LABEL_51;
    }
    v24 = v38;
    if ((v38 & 0x8000000000000000) == 0)
    {
      p_p = __p;
      if (!v38 || __p)
      {
LABEL_51:
        if (v24 >= 8)
        {
          v25 = *p_p == 0x64656C6261736944;
          if ((HIBYTE(v39) & 0x80) != 0)
LABEL_55:
            operator delete(__p);
        }
        else
        {
          v25 = 0;
          if ((HIBYTE(v39) & 0x80) != 0)
            goto LABEL_55;
        }
        *((_BYTE *)v6 + 144) = v25;
        goto LABEL_57;
      }
    }
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_57:
  v26 = *((_QWORD *)this + 68);
  v27 = *(char ***)(v26 + 200);
  v28 = *(char ***)(v26 + 208);
  if (v27 != v28)
  {
    v29 = v6[20];
    do
    {
      while (v29 >= v6[21])
      {
        v29 = std::vector<cricket::RelayServerConfig>::__push_back_slow_path<cricket::RelayServerConfig const&>((char ***)v6 + 19, v27);
        v6[20] = v29;
        v27 += 20;
        if (v27 == v28)
          goto LABEL_63;
      }
      if (!v29)
        goto LABEL_66;
      v29 = cricket::RelayServerConfig::RelayServerConfig(v29, v27) + 160;
      v6[20] = v29;
      v27 += 20;
    }
    while (v27 != v28);
  }
LABEL_63:
  v30 = *((_QWORD *)this + 69);
  v31 = (unsigned int *)*((_QWORD *)this + 86);
  if (v31)
  {
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (_QWORD *)operator new();
  *v33 = v31;
  v33[1] = this;
  v33[2] = v6;
  v33[3] = absl::internal_any_invocable::LocalManagerNontrivial<cricket::BasicPortAllocatorSession::ConfigReady(std::unique_ptr<cricket::PortConfiguration>)::$_1>;
  v33[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::ConfigReady(std::unique_ptr<cricket::PortConfiguration>)::$_1 &&>;
  __p = v33;
  v39 = (uint64_t (*)(uint64_t, uint64_t *, void **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v40 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, void **, char *, char *))(*(_QWORD *)v30 + 8))(v30, &__p, &v36, &v35);
  return v39(1, (uint64_t *)&__p, &__p);
}

const std::string::value_type *cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone(const std::string::value_type **this)
{
  const std::string::value_type *result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  const std::string::value_type *v20;
  const std::string::value_type *v21;
  const std::string::value_type *v22;
  const std::string::value_type *v23;
  void (*v24)(const std::string::value_type *, const std::string::value_type **, const std::string::value_type *);
  _QWORD *v25;
  void (*v26)(_QWORD *, const std::string::value_type **);
  std::string v27;
  char v28;
  _QWORD v29[4];
  uint64_t *v30;

  result = (const std::string::value_type *)(*((uint64_t (**)(const std::string::value_type **))*this + 14))(this);
  if ((_DWORD)result)
  {
    v3 = *((unsigned __int8 *)this + 536);
    v4 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if (v3)
    {
      if ((v4 & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    }
    else if ((v4 & 1) == 0)
    {
      v29[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basi"
               "c_port_allocator.cc";
      v29[1] = 9537;
      v29[2] = &v28;
      v29[3] = "All candidates gathered for ";
      v30 = v29;
      if (*((char *)this + 479) < 0)
        std::string::__init_copy_ctor_external(&v27, this[57], (std::string::size_type)this[58]);
      else
        v27 = *(std::string *)((_BYTE *)this + 19);
      (*((void (**)(const std::string::value_type **))*this + 16))(this);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v12, v13, v14, v15, v16, v17, v18, *v30);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
    v19 = this[81];
    v20 = this[82];
    if (v19 != v20)
    {
      v21 = (const std::string::value_type *)(this + 30);
      if (this[31] == (const std::string::value_type *)(this + 30))
      {
        this[33] = v21;
      }
      else
      {
        do
        {
          v22 = this[31];
          for (this[33] = v22; v22 != v21; v22 = this[33])
          {
            v24 = (void (*)(const std::string::value_type *, const std::string::value_type **, const std::string::value_type *))*((_QWORD *)v22 + 2);
            v23 = v22 + 16;
            this[33] = (const std::string::value_type *)*((_QWORD *)v23 - 1);
            v24(v23, this, v19);
          }
          v19 += 88;
        }
        while (v19 != v20);
        v20 = this[82];
        v19 = this[81];
      }
      while (v20 != v19)
      {
        if (*(v20 - 1) < 0)
        {
          operator delete(*((void **)v20 - 3));
          if (*(v20 - 33) < 0)
          {
LABEL_26:
            operator delete(*((void **)v20 - 7));
            if ((*(v20 - 65) & 0x80000000) == 0)
              goto LABEL_19;
            goto LABEL_27;
          }
        }
        else if (*(v20 - 33) < 0)
        {
          goto LABEL_26;
        }
        if ((*(v20 - 65) & 0x80000000) == 0)
          goto LABEL_19;
LABEL_27:
        operator delete(*((void **)v20 - 11));
LABEL_19:
        v20 -= 88;
      }
    }
    this[82] = v19;
    result = this[45];
    for (this[47] = result; result != (const std::string::value_type *)(this + 44); result = this[47])
    {
      v26 = (void (*)(_QWORD *, const std::string::value_type **))*((_QWORD *)result + 2);
      v25 = result + 16;
      this[47] = (const std::string::value_type *)*(v25 - 1);
      v26(v25, this);
    }
  }
  return result;
}

uint64_t cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(uint64_t a1, _QWORD *a2, char *a3, size_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)a2[3];
  if (v7)
  {
    if (v7 == a2)
    {
      v19 = v18;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v18);
      v8 = v19;
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      v19 = v8;
    }
  }
  else
  {
    v8 = 0;
    v19 = 0;
  }
  *(_QWORD *)(a1 + 24) = 0;
  v9 = operator new(0x28uLL);
  v10 = v9;
  *v9 = &off_24C0AFF08;
  if (!v8)
  {
    v9[4] = 0;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  if (v8 != v18)
  {
    v9[4] = v8;
    v19 = 0;
    *(_QWORD *)(a1 + 24) = v9;
    goto LABEL_15;
  }
  v9[4] = v9 + 1;
  (*(void (**)(_QWORD *))(v18[0] + 24))(v18);
  v11 = v19;
  *(_QWORD *)(a1 + 24) = v10;
  if (v11 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v11)
      goto LABEL_15;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_15:
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_27;
  if (a4 <= 0x16)
  {
    v13 = (char *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = a4;
    v14 = (char *)(a1 + 32 + a4);
    if (a1 + 32 > (unint64_t)a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  v15 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a4 | 7) != 0x17)
    v15 = a4 | 7;
  v16 = v15 + 1;
  v13 = (char *)operator new(v15 + 1);
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = v16 | 0x8000000000000000;
  *(_QWORD *)(a1 + 32) = v13;
  v14 = &v13[a4];
  if (v13 <= a3)
  {
LABEL_22:
    if (v14 <= a3)
      goto LABEL_23;
    __break(1u);
LABEL_27:
    abort();
  }
LABEL_23:
  if (a4)
    memmove(v13, a3, a4);
  *v14 = 0;
  return a1;
}

void cricket::`anonymous namespace'::FilterNetworks(std::string::size_type **a1, _QWORD *a2)
{
  unint64_t v2;
  std::string::size_type *v4;
  std::string::size_type *v5;
  _QWORD *v6;
  std::string::size_type v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  rtc::Network **v17;
  rtc::Network **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string __p;
  _BYTE v27[24];
  _BYTE *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v4 = a1[1];
  v6 = (_QWORD *)a2[3];
  if (!v6)
  {
    v28 = 0;
    if (v5 != v4)
      goto LABEL_6;
LABEL_16:
    v4 = v5;
    goto LABEL_17;
  }
  if (v6 != a2)
  {
    v28 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    if (v5 != v4)
      goto LABEL_6;
    goto LABEL_16;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v27);
  if (v5 == v4)
    goto LABEL_16;
  while (1)
  {
LABEL_6:
    __p.__r_.__value_.__r.__words[0] = *v5;
    if (!v28)
      goto LABEL_41;
    if (((*(uint64_t (**)(_BYTE *, std::string *))(*(_QWORD *)v28 + 48))(v28, &__p) & 1) == 0)
      break;
    if (++v5 == v4)
      goto LABEL_17;
  }
  while (--v4 != v5)
  {
    __p.__r_.__value_.__r.__words[0] = *v4;
    if (!v28)
      goto LABEL_41;
    if ((*(unsigned int (**)(_BYTE *, std::string *))(*(_QWORD *)v28 + 48))(v28, &__p))
    {
      v7 = *v5;
      *v5++ = *v4;
      *v4 = v7;
      if (v4 == v5)
      {
LABEL_17:
        v8 = v28;
        if (v28 != v27)
          goto LABEL_18;
LABEL_21:
        v9 = 4;
        v8 = v27;
LABEL_22:
        (*(void (**)(void))(*v8 + 8 * v9))();
        goto LABEL_23;
      }
      goto LABEL_6;
    }
  }
  v4 = v5;
  v8 = v28;
  if (v28 == v27)
    goto LABEL_21;
LABEL_18:
  if (v8)
  {
    v9 = 5;
    goto LABEL_22;
  }
LABEL_23:
  if (v4 != a1[1])
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (v4 != a1[1])
    {
      v17 = (rtc::Network **)v4;
      v18 = (rtc::Network **)v4;
      do
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          v2 = v2 & 0xFFFFFFFF00000000 | 0x3A1;
          rtc::Network::ToString(*v18, &__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        ++v18;
        ++v17;
      }
      while (v18 != (rtc::Network **)a1[1]);
      if (v18 < (rtc::Network **)v4)
      {
        __break(1u);
LABEL_41:
        std::__throw_bad_function_call[abi:sn180100]();
      }
      if (v4 != (std::string::size_type *)v18)
      {
        if (v18 != v17)
          memmove(v4, v17, 0);
        a1[1] = v4;
      }
    }
  }
}

uint64_t cricket::BasicPortAllocatorSession::AddAllocatedPort(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  std::string::size_type size;
  std::string *p_src;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  void **v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string __src;
  std::string v53;
  _QWORD v54[3];
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return result;
  v5 = result;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_7;
  if (*(char *)(v5 + 479) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v5 + 456), *(_QWORD *)(v5 + 464));
  else
    v53 = *(std::string *)(v5 + 456);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v5 + 479) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_11:
    std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v5 + 456), *(_QWORD *)(v5 + 464));
    v13 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  operator delete(v53.__r_.__value_.__l.__data_);
  if (*(char *)(v5 + 479) < 0)
    goto LABEL_11;
LABEL_8:
  __src = *(std::string *)(v5 + 456);
  v13 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_9:
    size = v13;
    p_src = &__src;
    goto LABEL_16;
  }
LABEL_12:
  size = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_57;
  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  if (__src.__r_.__value_.__l.__size_)
  {
    if (!__src.__r_.__value_.__r.__words[0])
      goto LABEL_57;
  }
  if (__src.__r_.__value_.__l.__size_ >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_58;
LABEL_16:
  if (size > 0x16)
  {
    v17 = (size & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v17 = size | 7;
    v18 = v17 + 1;
    v16 = (std::string *)operator new(v17 + 1);
    v53.__r_.__value_.__l.__size_ = size;
    v53.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  else
  {
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = size;
    v16 = &v53;
  }
  v19 = (std::string *)((char *)v16 + size);
  if (v16 <= p_src && v19 > p_src)
    goto LABEL_57;
  if (size)
    memmove(v16, p_src, size);
  v19->__r_.__value_.__s.__data_[0] = 0;
  v21 = (void **)(a2 + 71);
  if (*((char *)a2 + 591) < 0)
  {
    operator delete(*v21);
    v42 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    *(_OWORD *)v21 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    a2[73] = *((_QWORD *)&v53.__r_.__value_.__l + 2);
    if ((v42 & 0x80) == 0)
      goto LABEL_29;
  }
  else
  {
    *(_OWORD *)v21 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
    a2[73] = *((_QWORD *)&v53.__r_.__value_.__l + 2);
    if ((v13 & 0x80) == 0)
      goto LABEL_29;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_29:
  *((_DWORD *)a2 + 148) = *(_DWORD *)(v5 + 480);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5);
  (*(void (**)(_QWORD *, uint64_t))(*a2 + 232))(a2, v22);
  *((_BYTE *)a2 + 548) = (*(_DWORD *)(v5 + 448) & 0x200) != 0;
  v23 = *(char **)(v5 + 632);
  v24 = *(_QWORD *)(v5 + 640);
  if ((unint64_t)v23 < v24)
  {
    if (v23)
    {
      *(_QWORD *)v23 = a2;
      *((_QWORD *)v23 + 1) = a3;
      v23[16] = 0;
      v25 = v23 + 24;
      *((_DWORD *)v23 + 5) = 0;
      goto LABEL_45;
    }
LABEL_57:
    __break(1u);
  }
  v26 = *(char **)(v5 + 624);
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v26) >> 3) + 1;
  if (v27 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
    abort();
  v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
  if (2 * v28 > v27)
    v27 = 2 * v28;
  if (v28 >= 0x555555555555555)
    v29 = 0xAAAAAAAAAAAAAAALL;
  else
    v29 = v27;
  if (!v29)
    goto LABEL_57;
  if (v29 > 0xAAAAAAAAAAAAAAALL)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v30 = 24 * v29;
  v31 = (char *)operator new(24 * v29);
  v32 = &v31[8 * ((v23 - v26) >> 3)];
  *(_QWORD *)v32 = a2;
  *((_QWORD *)v32 + 1) = a3;
  v32[16] = 0;
  *((_DWORD *)v32 + 5) = 0;
  v25 = v32 + 24;
  if (v23 != v26)
  {
    do
    {
      v33 = *(_OWORD *)(v23 - 24);
      *((_QWORD *)v32 - 1) = *((_QWORD *)v23 - 1);
      *(_OWORD *)(v32 - 24) = v33;
      v32 -= 24;
      v23 -= 24;
    }
    while (v23 != v26);
    v23 = v26;
  }
  *(_QWORD *)(v5 + 624) = v32;
  *(_QWORD *)(v5 + 632) = v25;
  *(_QWORD *)(v5 + 640) = &v31[v30];
  if (v23)
    operator delete(v23);
LABEL_45:
  *(_QWORD *)(v5 + 632) = v25;
  v34 = operator new(0x30uLL);
  v34[2] = sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *,cricket::Candidate const&>;
  v34[3] = v5;
  v34[4] = cricket::BasicPortAllocatorSession::OnCandidateReady;
  v34[5] = 0;
  v35 = a2[38];
  *v34 = v35;
  v34[1] = a2 + 38;
  *(_QWORD *)(v35 + 8) = v34;
  a2[38] = v34;
  ++a2[40];
  (*(void (**)(uint64_t, _QWORD *))(v5 + 8))(v5, a2 + 36);
  v36 = operator new(0x30uLL);
  v36[2] = sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *,cricket::IceCandidateErrorEvent const&>;
  v36[3] = v5;
  v36[4] = cricket::BasicPortAllocatorSession::OnCandidateError;
  v36[5] = 0;
  v37 = a2[45];
  *v36 = v37;
  v36[1] = a2 + 45;
  *(_QWORD *)(v37 + 8) = v36;
  a2[45] = v36;
  ++a2[47];
  (*(void (**)(uint64_t, _QWORD *))(v5 + 8))(v5, a2 + 43);
  v38 = operator new(0x30uLL);
  v38[2] = sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *>;
  v38[3] = v5;
  v38[4] = cricket::BasicPortAllocatorSession::OnPortComplete;
  v38[5] = 0;
  v39 = a2[52];
  *v38 = v39;
  v38[1] = a2 + 52;
  *(_QWORD *)(v39 + 8) = v38;
  a2[52] = v38;
  ++a2[54];
  (*(void (**)(uint64_t, _QWORD *))(v5 + 8))(v5, a2 + 50);
  v54[0] = &off_24C0B0070;
  v54[1] = v5;
  v55 = v54;
  (*(void (**)(_QWORD *, _QWORD *))(*a2 + 160))(a2, v54);
  v40 = v55;
  if (v55 == v54)
  {
    v41 = 4;
    v40 = v54;
    goto LABEL_51;
  }
  if (v55)
  {
    v41 = 5;
LABEL_51:
    (*(void (**)(void))(*v40 + 8 * v41))();
  }
  v43 = operator new(0x30uLL);
  v43[2] = sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *>;
  v43[3] = v5;
  v43[4] = cricket::BasicPortAllocatorSession::OnPortError;
  v43[5] = 0;
  v44 = a2[59];
  *v43 = v44;
  v43[1] = a2 + 59;
  *(_QWORD *)(v44 + 8) = v43;
  a2[59] = v43;
  ++a2[61];
  (*(void (**)(uint64_t, _QWORD *))(v5 + 8))(v5, a2 + 57);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a2 + 176))(&v53, a2);
    rtc::webrtc_logging_impl::Log("\r\n\t", v45, v46, v47, v48, v49, v50, v51, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  return (*(uint64_t (**)(_QWORD *))(*a2 + 80))(a2);
}

void cricket::BasicPortAllocatorSession::OnCandidateReady(cricket::BasicPortAllocatorSession *this, cricket::Port *a2, const cricket::Candidate *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  BOOL v24;
  BOOL v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  unsigned __int16 *v30;
  uint64_t v31;
  int v32;
  int v33;
  BOOL v35;
  uint64_t v36;
  BOOL v37;
  _BOOL4 v38;
  int v40;
  int v41;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void (*v58)(_QWORD *, cricket::BasicPortAllocatorSession *, cricket::Port *);
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  void (*v76)(_QWORD *, cricket::BasicPortAllocatorSession *, std::string **);
  std::string *v77;
  std::string *v78;
  std::string *v79;
  void *__p;
  __int128 v81;
  std::string *v82;
  _BYTE v83[20];

  v6 = *((_QWORD *)this + 78);
  v7 = *((_QWORD *)this + 79);
  if (v6 == v7)
  {
LABEL_4:
    v6 = 0;
  }
  else
  {
    while (*(cricket::Port **)v6 != a2)
    {
      v6 += 24;
      if (v6 == v7)
        goto LABEL_4;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, cricket::Port *))(*(_QWORD *)a2 + 176))(&__p, a2);
    cricket::Candidate::ToStringInternal(a3, 1, (std::string *)&v82);
    rtc::webrtc_logging_impl::Log("\r\n\t\n", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if ((v83[15] & 0x80000000) == 0)
    {
      if ((SBYTE11(v81) & 0x80000000) == 0)
        goto LABEL_8;
LABEL_12:
      operator delete(__p);
      if (*(_DWORD *)(v6 + 20))
      {
LABEL_9:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
        return;
      }
      goto LABEL_13;
    }
    operator delete(v82);
    if (SBYTE11(v81) < 0)
      goto LABEL_12;
  }
LABEL_8:
  if (*(_DWORD *)(v6 + 20))
    goto LABEL_9;
LABEL_13:
  v22 = *((_DWORD *)this + 168);
  v23 = *((_DWORD *)a3 + 28);
  if (v23 == 2)
  {
    if (!*((_DWORD *)a3 + 29))
    {
      v26 = 0;
      v29 = 1;
      if (((*(uint64_t (**)(cricket::Port *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
        goto LABEL_80;
      goto LABEL_38;
    }
  }
  else if (v23 == 30)
  {
    v81 = *MEMORY[0x24BDAE878];
    v24 = *(_QWORD *)((char *)a3 + 116) == (_QWORD)v81 && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&v81 + 1);
    if (v24
      || ((*(_OWORD *)&v83[4] = rtc::kV4MappedPrefix, *(_QWORD *)((char *)a3 + 116) == (_QWORD)rtc::kV4MappedPrefix)
        ? (v25 = *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
        : (v25 = 0),
          v25))
    {
      v26 = 0;
      goto LABEL_69;
    }
  }
  v27 = *((_DWORD *)a3 + 52);
  if (v27)
  {
    if (v27 == 1)
    {
      v26 = (v22 >> 1) & 1;
    }
    else if (v27 == 3)
    {
      v26 = (v22 >> 2) & 1;
    }
    else
    {
      v26 = 0;
    }
    goto LABEL_34;
  }
  if ((v22 & 2) == 0)
    goto LABEL_31;
  if (v23 == 2)
  {
    v59 = *((_DWORD *)a3 + 29);
    if ((unsigned __int16)v59 == 65193)
      goto LABEL_31;
    if (*((_DWORD *)a3 + 29) == 127)
      goto LABEL_31;
    v60 = bswap32(v59);
    if (HIWORD(v60) == 49320 || (v60 & 0xFF000000) == 0xA000000 || (v60 & 0xFFF00000) == 0xAC100000)
      goto LABEL_31;
  }
  else
  {
    if (v23 == 30)
    {
      v36 = *(_QWORD *)((char *)a3 + 116);
      if ((v36 & 0xC0FF) != 0x80FE)
      {
        v81 = *MEMORY[0x24BDAE880];
        v37 = *(_QWORD *)((char *)a3 + 116) == (_QWORD)v81 && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&v81 + 1);
        v38 = !v37;
        if (v36 != 253 && v38)
        {
          v26 = 1;
          goto LABEL_69;
        }
      }
      goto LABEL_31;
    }
    v59 = *((_DWORD *)a3 + 29);
  }
  v26 = 1;
  if (v23 == 2 && (v59 & 0xC0FF) == 0x4064)
LABEL_31:
    v26 = v22 & 1;
LABEL_34:
  if (v23 != 30)
  {
    if (v23 != 2)
    {
      v29 = 0;
      if (((*(uint64_t (**)(cricket::Port *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
        goto LABEL_80;
      goto LABEL_38;
    }
    v28 = *((_DWORD *)a3 + 29) == 0;
    goto LABEL_76;
  }
LABEL_69:
  v81 = *MEMORY[0x24BDAE878];
  if (*(_QWORD *)((char *)a3 + 116) == (_QWORD)v81 && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&v81 + 1))
  {
    v29 = 1;
    if (((*(uint64_t (**)(cricket::Port *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
      goto LABEL_80;
    goto LABEL_38;
  }
  *(_OWORD *)&v83[4] = rtc::kV4MappedPrefix;
  v28 = *(_QWORD *)((char *)a3 + 116) == (_QWORD)rtc::kV4MappedPrefix
     && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1);
LABEL_76:
  v29 = v28;
  if (((*(uint64_t (**)(cricket::Port *))(*(_QWORD *)a2 + 64))(a2) & 1) != 0)
  {
LABEL_80:
    v35 = 1;
    if (((v26 | v29 ^ 1) & 1) != 0)
      goto LABEL_81;
LABEL_53:
    if ((v35 & *((_BYTE *)this + 672) & 1) == 0)
      goto LABEL_83;
    goto LABEL_82;
  }
LABEL_38:
  v30 = (unsigned __int16 *)((char *)a3 + 32);
  if (*((char *)a3 + 55) < 0)
  {
    v31 = *((_QWORD *)a3 + 5);
    if (v31 < 0 || (v30 = *(unsigned __int16 **)v30, v31) && !v30)
    {
      __break(1u);
      return;
    }
  }
  else
  {
    v31 = *((unsigned __int8 *)a3 + 55);
  }
  if (v31 != 3)
  {
    v35 = 0;
    if (((v26 | v29 ^ 1) & 1) != 0)
      goto LABEL_81;
    goto LABEL_53;
  }
  v32 = *v30;
  v33 = *((unsigned __int8 *)v30 + 2);
  v35 = v32 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME && v33 == 112;
  if (((v26 | v29 ^ 1) & 1) == 0)
    goto LABEL_53;
LABEL_81:
  if (!v26)
    goto LABEL_84;
LABEL_82:
  if (*(_BYTE *)(v6 + 16))
  {
LABEL_83:
    v26 = 0;
    goto LABEL_84;
  }
  *(_BYTE *)(v6 + 16) = 1;
  if ((*(unsigned int (**)(cricket::Port *))(*(_QWORD *)a2 + 16))(a2) != 3)
    goto LABEL_104;
  v44 = *((_DWORD *)this + 169);
  if (v44 != 1)
  {
    if (v44 == 2)
    {
      v45 = cricket::BasicPortAllocatorSession::PruneNewlyPairableTurnPort((uint64_t)this, (_DWORD *)v6);
      goto LABEL_119;
    }
LABEL_104:
    v26 = 0;
    if (*(_DWORD *)(v6 + 20) == 3)
      goto LABEL_84;
    goto LABEL_120;
  }
  v45 = cricket::BasicPortAllocatorSession::PruneTurnPorts(this, a2);
LABEL_119:
  v26 = v45;
  if (*(_DWORD *)(v6 + 20) == 3)
    goto LABEL_84;
LABEL_120:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, cricket::Port *))(*(_QWORD *)a2 + 176))(&__p, a2);
    rtc::webrtc_logging_impl::Log("\r\n\t", v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (SBYTE11(v81) < 0)
      operator delete(__p);
  }
  v56 = (_QWORD *)*((_QWORD *)this + 10);
  for (*((_QWORD *)this + 12) = v56; v56 != (_QWORD *)((char *)this + 72); v56 = (_QWORD *)*((_QWORD *)this + 12))
  {
    v58 = (void (*)(_QWORD *, cricket::BasicPortAllocatorSession *, cricket::Port *))v56[2];
    v57 = v56 + 2;
    *((_QWORD *)this + 12) = *(v57 - 1);
    v58(v57, this, a2);
  }
  if (!*((_DWORD *)a2 + 181))
    *((_DWORD *)a2 + 181) = 1;
LABEL_84:
  if (!*(_BYTE *)(v6 + 16) || (*(_DWORD *)(v6 + 20) - 4) > 0xFFFFFFFD)
    goto LABEL_139;
  v40 = *((_DWORD *)this + 168);
  v41 = *((_DWORD *)a3 + 28);
  if (v41 == 2)
  {
    if (!*((_DWORD *)a3 + 29))
      goto LABEL_139;
  }
  else if (v41 == 30)
  {
    v81 = *MEMORY[0x24BDAE878];
    if (*(_QWORD *)((char *)a3 + 116) == (_QWORD)v81 && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&v81 + 1))
      goto LABEL_139;
    *(_OWORD *)&v83[4] = rtc::kV4MappedPrefix;
    if (*(_QWORD *)((char *)a3 + 116) == (_QWORD)rtc::kV4MappedPrefix
      && *(_QWORD *)((char *)a3 + 124) == *((_QWORD *)&rtc::kV4MappedPrefix + 1))
    {
      goto LABEL_139;
    }
  }
  v46 = *((_DWORD *)a3 + 52);
  if (v46)
  {
    if (v46 == 1)
    {
      if ((v40 & 2) == 0)
        goto LABEL_139;
    }
    else if (v46 != 3 || (v40 & 4) == 0)
    {
      goto LABEL_139;
    }
    v48 = 0;
    v82 = 0;
    *(_QWORD *)v83 = 0;
    *(_QWORD *)&v83[8] = 0;
    v47 = *((_QWORD *)this + 68);
    if ((~*(_DWORD *)(v47 + 116) & 0xC00) == 0)
      goto LABEL_147;
LABEL_146:
    if ((*(_BYTE *)(v47 + 140) & 1) != 0)
    {
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47) ^ 1;
      goto LABEL_149;
    }
LABEL_147:
    v69 = 0;
LABEL_149:
    v70 = *(_DWORD *)(v47 + 140);
    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
    v72 = *((_DWORD *)a3 + 52);
    if ((v72 != 1 || v69) && (v72 != 3 || (v70 & 2) != 0))
    {
      if (v72 == 2)
        v73 = v71;
      else
        v73 = 0;
    }
    else
    {
      v73 = 1;
    }
    cricket::Candidate::ToSanitizedCopy((std::string *)a3, v48, v73, (uint64_t)&__p);
    *(_QWORD *)v83 = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>(&v82, (std::string *)&__p);
    cricket::Candidate::~Candidate(&__p);
    v74 = (_QWORD *)*((_QWORD *)this + 24);
    for (*((_QWORD *)this + 26) = v74; v74 != (_QWORD *)((char *)this + 184); v74 = (_QWORD *)*((_QWORD *)this + 26))
    {
      v76 = (void (*)(_QWORD *, cricket::BasicPortAllocatorSession *, std::string **))v74[2];
      v75 = v74 + 2;
      *((_QWORD *)this + 26) = *(v75 - 1);
      v76(v75, this, &v82);
    }
    v77 = v82;
    if (v82)
    {
      v78 = *(std::string **)v83;
      v79 = v82;
      if (*(std::string **)v83 != v82)
      {
        do
          cricket::Candidate::~Candidate((void **)&v78[-18].__r_.__value_.__l.__data_);
        while (v78 != v77);
        v79 = v82;
      }
      *(_QWORD *)v83 = v77;
      operator delete(v79);
    }
    goto LABEL_141;
  }
  if ((v40 & 2) == 0)
  {
    if ((v40 & 1) == 0)
      goto LABEL_139;
    v82 = 0;
    *(_QWORD *)v83 = 0;
    *(_QWORD *)&v83[8] = 0;
    v47 = *((_QWORD *)this + 68);
    goto LABEL_145;
  }
  if (!rtc::SocketAddress::IsPrivateIP((const cricket::Candidate *)((char *)a3 + 80)) || (v40 & 1) != 0)
  {
    v68 = *((_DWORD *)a3 + 52);
    v82 = 0;
    *(_QWORD *)v83 = 0;
    *(_QWORD *)&v83[8] = 0;
    v47 = *((_QWORD *)this + 68);
    if ((v68 | 2) != 2)
    {
      v48 = 0;
      if ((~*(_DWORD *)(v47 + 116) & 0xC00) == 0)
        goto LABEL_147;
      goto LABEL_146;
    }
LABEL_145:
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 72))(v47);
    if ((~*(_DWORD *)(v47 + 116) & 0xC00) == 0)
      goto LABEL_147;
    goto LABEL_146;
  }
LABEL_139:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v61, v62, v63, v64, v65, v66, v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
LABEL_141:
  if (v26)
    cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone((const std::string::value_type **)this);
}

void cricket::BasicPortAllocatorSession::OnCandidateError(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, __int128 *);
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  std::string *v26;
  char *v27;
  std::string *v28;
  char *v29;
  std::string *v30;
  char *v31;
  std::string::value_type *v32;
  void **v33;
  void **v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void **v38;

  v5 = *((unsigned __int8 *)a3 + 23);
  v6 = (char)v5;
  v7 = *((_QWORD *)a3 + 1);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a3 + 1);
  if (!v5)
  {
    v12 = *(_QWORD *)(a1 + 656);
    v13 = *(_QWORD *)(a1 + 664);
    if (v12 < v13)
    {
      if (v12)
      {
        if (v6 < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 656), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
          *(_DWORD *)(v12 + 24) = *((_DWORD *)a3 + 6);
          v15 = (std::string *)(v12 + 32);
          if ((*((char *)a3 + 55) & 0x80000000) == 0)
          {
LABEL_11:
            v16 = a3[2];
            v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 6);
            *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
            *(_DWORD *)(v12 + 56) = *((_DWORD *)a3 + 14);
            v17 = (std::string *)(v12 + 64);
            if ((*((char *)a3 + 87) & 0x80000000) == 0)
            {
LABEL_12:
              v18 = a3[4];
              v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 10);
              *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
LABEL_48:
              v32 = (std::string::value_type *)(v12 + 88);
LABEL_49:
              *(_QWORD *)(a1 + 656) = v32;
              return;
            }
LABEL_47:
            std::string::__init_copy_ctor_external(v17, *((const std::string::value_type **)a3 + 8), *((_QWORD *)a3 + 9));
            goto LABEL_48;
          }
        }
        else
        {
          v14 = *a3;
          *(_QWORD *)(v12 + 16) = *((_QWORD *)a3 + 2);
          *(_OWORD *)v12 = v14;
          *(_DWORD *)(v12 + 24) = *((_DWORD *)a3 + 6);
          v15 = (std::string *)(v12 + 32);
          if ((*((char *)a3 + 55) & 0x80000000) == 0)
            goto LABEL_11;
        }
        std::string::__init_copy_ctor_external(v15, *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
        *(_DWORD *)(v12 + 56) = *((_DWORD *)a3 + 14);
        v17 = (std::string *)(v12 + 64);
        if ((*((char *)a3 + 87) & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_47;
      }
      goto LABEL_50;
    }
    v19 = *(_QWORD *)(a1 + 648);
    v20 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12 - v19) >> 3);
    if ((unint64_t)(v20 + 1) > 0x2E8BA2E8BA2E8BALL)
      goto LABEL_51;
    v21 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v13 - v19) >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= v20 + 1)
      v22 = v20 + 1;
    if (v21 >= 0x1745D1745D1745DLL)
      v23 = 0x2E8BA2E8BA2E8BALL;
    else
      v23 = v22;
    if (!v23)
    {
LABEL_50:
      __break(1u);
LABEL_51:
      abort();
    }
    if (v23 > 0x2E8BA2E8BA2E8BALL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v24 = 88 * v23;
    v25 = (char *)operator new(88 * v23);
    v26 = (std::string *)&v25[88 * v20];
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a3, v7);
    }
    else
    {
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *a3;
      v26->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    }
    v27 = &v25[88 * v20];
    *((_DWORD *)v27 + 6) = *((_DWORD *)a3 + 6);
    v28 = (std::string *)(v27 + 32);
    if (*((char *)a3 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v28, *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
    }
    else
    {
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = a3[2];
      *((_QWORD *)v27 + 6) = *((_QWORD *)a3 + 6);
    }
    v29 = &v25[88 * v20];
    *((_DWORD *)v29 + 14) = *((_DWORD *)a3 + 14);
    v30 = (std::string *)(v29 + 64);
    if (*((char *)a3 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(v30, *((const std::string::value_type **)a3 + 8), *((_QWORD *)a3 + 9));
      v31 = &v25[v24];
      v32 = &v26[3].__r_.__value_.__s.__data_[16];
      v33 = *(void ***)(a1 + 656);
      v34 = *(void ***)(a1 + 648);
      if (v33 == v34)
        goto LABEL_42;
    }
    else
    {
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = a3[4];
      *((_QWORD *)v29 + 10) = *((_QWORD *)a3 + 10);
      v31 = &v25[v24];
      v32 = &v26[3].__r_.__value_.__s.__data_[16];
      v33 = *(void ***)(a1 + 656);
      v34 = *(void ***)(a1 + 648);
      if (v33 == v34)
      {
LABEL_42:
        *(_QWORD *)(a1 + 648) = v26;
        *(_QWORD *)(a1 + 656) = v32;
        *(_QWORD *)(a1 + 664) = v31;
LABEL_43:
        if (v33)
          operator delete(v33);
        goto LABEL_49;
      }
    }
    do
    {
      v35 = *(_OWORD *)(v33 - 11);
      v26[-3].__r_.__value_.__r.__words[0] = (std::string::size_type)*(v33 - 9);
      *(_OWORD *)&v26[-4].__r_.__value_.__r.__words[1] = v35;
      *(v33 - 10) = 0;
      *(v33 - 9) = 0;
      *(v33 - 11) = 0;
      LODWORD(v26[-3].__r_.__value_.__r.__words[1]) = *((_DWORD *)v33 - 16);
      v36 = *(_OWORD *)(v33 - 7);
      v26[-2].__r_.__value_.__l.__size_ = (std::string::size_type)*(v33 - 5);
      *(_OWORD *)&v26[-3].__r_.__value_.__r.__words[2] = v36;
      *(v33 - 6) = 0;
      *(v33 - 5) = 0;
      *(v33 - 7) = 0;
      LODWORD(v26[-2].__r_.__value_.__r.__words[2]) = *((_DWORD *)v33 - 8);
      v37 = *(_OWORD *)(v33 - 3);
      v26[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v33 - 1);
      *(_OWORD *)&v26[-1].__r_.__value_.__l.__data_ = v37;
      v26 = (std::string *)((char *)v26 - 88);
      *(v33 - 2) = 0;
      *(v33 - 1) = 0;
      *(v33 - 3) = 0;
      v33 -= 11;
    }
    while (v33 != v34);
    v33 = *(void ***)(a1 + 648);
    v38 = *(void ***)(a1 + 656);
    *(_QWORD *)(a1 + 648) = v26;
    *(_QWORD *)(a1 + 656) = v32;
    *(_QWORD *)(a1 + 664) = v31;
    while (1)
    {
      if (v38 == v33)
        goto LABEL_43;
      if (*((char *)v38 - 1) < 0)
      {
        operator delete(*(v38 - 3));
        if ((*((char *)v38 - 33) & 0x80000000) == 0)
        {
LABEL_40:
          if ((*((char *)v38 - 65) & 0x80000000) == 0)
            goto LABEL_34;
          goto LABEL_41;
        }
      }
      else if ((*((char *)v38 - 33) & 0x80000000) == 0)
      {
        goto LABEL_40;
      }
      operator delete(*(v38 - 7));
      if ((*((char *)v38 - 65) & 0x80000000) == 0)
        goto LABEL_34;
LABEL_41:
      operator delete(*(v38 - 11));
LABEL_34:
      v38 -= 11;
    }
  }
  v8 = a1 + 240;
  v9 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 264) = v9;
  if (v9 != a1 + 240)
  {
    do
    {
      v11 = *(void (**)(uint64_t, uint64_t, __int128 *))(v9 + 16);
      v10 = v9 + 16;
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(v10 - 8);
      v11(v10, a1, a3);
      v9 = *(_QWORD *)(a1 + 264);
    }
    while (v9 != v8);
  }
}

void cricket::BasicPortAllocatorSession::OnPortComplete(cricket::BasicPortAllocatorSession *this, cricket::Port *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, cricket::Port *))(*(_QWORD *)a2 + 176))(&__p, a2);
    rtc::webrtc_logging_impl::Log("\r\n\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (v14 < 0)
      operator delete(__p);
  }
  v11 = *((_QWORD *)this + 78);
  v12 = *((_QWORD *)this + 79);
  if (v11 == v12)
  {
LABEL_7:
    v11 = 0;
  }
  else
  {
    while (*(cricket::Port **)v11 != a2)
    {
      v11 += 24;
      if (v11 == v12)
        goto LABEL_7;
    }
  }
  if (!*(_DWORD *)(v11 + 20))
  {
    *(_DWORD *)(v11 + 20) = 1;
    cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone((const std::string::value_type **)this);
  }
}

void cricket::BasicPortAllocatorSession::OnPortError(cricket::BasicPortAllocatorSession *this, cricket::Port *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, cricket::Port *))(*(_QWORD *)a2 + 176))(&__p, a2);
    rtc::webrtc_logging_impl::Log("\r\n\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (v14 < 0)
      operator delete(__p);
  }
  v11 = *((_QWORD *)this + 78);
  v12 = *((_QWORD *)this + 79);
  if (v11 == v12)
  {
LABEL_7:
    v11 = 0;
  }
  else
  {
    while (*(cricket::Port **)v11 != a2)
    {
      v11 += 24;
      if (v11 == v12)
        goto LABEL_7;
    }
  }
  if (!*(_DWORD *)(v11 + 20))
  {
    *(_DWORD *)(v11 + 20) = 2;
    cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone((const std::string::value_type **)this);
  }
}

uint64_t cricket::BasicPortAllocatorSession::PruneNewlyPairableTurnPort(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  cricket::Port *v23;
  void *__p;
  char v26;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 24))(*(_QWORD *)a2);
  v5 = *(_QWORD **)(a1 + 624);
  v6 = *(_QWORD **)(a1 + 632);
  if (v5 == v6)
    return 0;
  v7 = v4;
  v8 = (_QWORD *)(v4 + 128);
  while (1)
  {
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 24))(*v5);
    v10 = *(unsigned __int8 *)(v9 + 151);
    if ((v10 & 0x80u) == 0)
      v11 = *(unsigned __int8 *)(v9 + 151);
    else
      v11 = *(_QWORD *)(v9 + 136);
    v12 = *(unsigned __int8 *)(v7 + 151);
    v13 = (char)v12;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(v7 + 136);
    if (v11 != v12)
      goto LABEL_4;
    v14 = (const void **)(v9 + 128);
    v15 = v13 >= 0 ? (unsigned __int8 *)v8 : (unsigned __int8 *)*v8;
    if ((v10 & 0x80) == 0)
      break;
    if (!memcmp(*v14, v15, *(_QWORD *)(v9 + 136)))
      goto LABEL_18;
LABEL_4:
    v5 += 3;
    if (v5 == v6)
      return 0;
  }
  if (*(_BYTE *)(v9 + 151))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_18;
    }
    goto LABEL_4;
  }
LABEL_18:
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 16))(*v5) != 3
    || !*((_BYTE *)v5 + 16)
    || v5 == (_QWORD *)a2
    || (*((_DWORD *)v5 + 5) & 0xFFFFFFFE) == 2)
  {
    goto LABEL_4;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)a2 + 176))(&__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (v26 < 0)
      operator delete(__p);
  }
  a2[5] = 3;
  v23 = *(cricket::Port **)a2;
  if (*(_QWORD *)a2)
  {
    *((_DWORD *)v23 + 181) = 2;
    cricket::Port::PostDestroyIfDead(v23, 0);
  }
  return 1;
}

uint64_t cricket::BasicPortAllocatorSession::PruneTurnPorts(cricket::BasicPortAllocatorSession *this, cricket::Port *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  BOOL v13;
  cricket::_anonymous_namespace_ **v14;
  cricket::_anonymous_namespace_ **v15;
  const cricket::Port *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  const cricket::Port *v21;
  cricket::_anonymous_namespace_ **v22;
  cricket::_anonymous_namespace_ **v23;
  uint64_t *v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void **v32;
  unsigned __int8 *v33;
  const cricket::Port *v34;
  uint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;

  v4 = (*(uint64_t (**)(cricket::Port *))(*(_QWORD *)a2 + 24))(a2);
  v9 = v4;
  v10 = (const void **)(v4 + 128);
  if (*(char *)(v4 + 151) < 0)
  {
    v11 = *(_QWORD *)(v4 + 136);
    if ((v11 & 0x8000000000000000) != 0 || ((v12 = *v10, v11) ? (v13 = v12 == 0) : (v13 = 0), v13))
    {
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
  }
  else
  {
    v11 = *(unsigned __int8 *)(v4 + 151);
    v12 = (const void *)(v4 + 128);
  }
  v14 = (cricket::_anonymous_namespace_ **)*((_QWORD *)this + 78);
  v15 = (cricket::_anonymous_namespace_ **)*((_QWORD *)this + 79);
  if (v14 == v15)
    goto LABEL_85;
  v16 = 0;
  do
  {
    v17 = (*(uint64_t (**)(cricket::_anonymous_namespace_ *))(*(_QWORD *)*v14 + 24))(*v14);
    v18 = (_QWORD *)(v17 + 128);
    if (*(char *)(v17 + 151) < 0)
    {
      v19 = *(_QWORD *)(v17 + 136);
      if (v19 < 0)
        goto LABEL_84;
      v18 = (_QWORD *)*v18;
      if (v19 && v18 == 0)
        goto LABEL_84;
    }
    else
    {
      v19 = *(unsigned __int8 *)(v17 + 151);
    }
    if (v11 == v19
      && !memcmp(v12, v18, v11)
      && (*(unsigned int (**)(cricket::_anonymous_namespace_ *))(*(_QWORD *)*v14 + 16))(*v14) == 3
      && *((_BYTE *)v14 + 16)
      && (*((_DWORD *)v14 + 5) - 4) <= 0xFFFFFFFD
    {
      v16 = *v14;
    }
    v14 += 3;
  }
  while (v14 != v15);
  if (!v16)
  {
LABEL_85:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc", 1083, "best_turn_port != nullptr", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v5, v6, v7, v8, v60);
LABEL_86:
    abort();
  }
  v22 = (cricket::_anonymous_namespace_ **)*((_QWORD *)this + 78);
  v23 = (cricket::_anonymous_namespace_ **)*((_QWORD *)this + 79);
  if (v22 == v23)
  {
    v25 = 0;
    return v25 & 1;
  }
  v61 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  do
  {
    v27 = (*(uint64_t (**)(cricket::_anonymous_namespace_ *))(*(_QWORD *)*v22 + 24))(*v22);
    v28 = *(unsigned __int8 *)(v27 + 151);
    if ((v28 & 0x80u) == 0)
      v29 = *(unsigned __int8 *)(v27 + 151);
    else
      v29 = *(_QWORD *)(v27 + 136);
    v30 = *(unsigned __int8 *)(v9 + 151);
    v31 = (char)v30;
    if ((v30 & 0x80u) != 0)
      v30 = *(_QWORD *)(v9 + 136);
    if (v29 != v30)
      goto LABEL_31;
    v32 = (const void **)(v27 + 128);
    if (v31 >= 0)
      v33 = (unsigned __int8 *)v10;
    else
      v33 = (unsigned __int8 *)*v10;
    if ((v28 & 0x80) != 0)
    {
      if (memcmp(*v32, v33, *(_QWORD *)(v27 + 136)))
        goto LABEL_31;
    }
    else if (*(_BYTE *)(v27 + 151))
    {
      while (*(unsigned __int8 *)v32 == *v33)
      {
        v32 = (const void **)((char *)v32 + 1);
        ++v33;
        if (!--v28)
          goto LABEL_45;
      }
      goto LABEL_31;
    }
LABEL_45:
    if ((*(unsigned int (**)(cricket::_anonymous_namespace_ *))(*(_QWORD *)*v22 + 16))(*v22) == 3
      && *((_DWORD *)v22 + 5) != 3
    {
      if (*v22 == a2)
      {
        *((_DWORD *)v22 + 5) = 3;
        *((_DWORD *)a2 + 181) = 2;
        cricket::Port::PostDestroyIfDead(a2, 0);
LABEL_69:
        v25 = 1;
        goto LABEL_31;
      }
      if (v24 < v61)
      {
        if (!v24)
          goto LABEL_84;
        *v24++ = (uint64_t)v22;
        goto LABEL_69;
      }
      v35 = v24 - v26;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_86;
      if (((char *)v61 - (char *)v26) >> 2 > v36)
        v36 = ((char *)v61 - (char *)v26) >> 2;
      if ((unint64_t)((char *)v61 - (char *)v26) >= 0x7FFFFFFFFFFFFFF8)
        v36 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v36)
        goto LABEL_84;
      if (v36 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v62 = 8 * v36;
      v37 = operator new(8 * v36);
      v38 = (uint64_t *)&v37[8 * v35];
      *v38 = (uint64_t)v22;
      v39 = v38 + 1;
      if (v24 == v26)
      {
        v26 = (uint64_t *)&v37[8 * v35];
        v61 = (uint64_t *)&v37[v62];
        if (v24)
        {
LABEL_68:
          v45 = v24;
          v24 = v39;
          operator delete(v45);
          goto LABEL_69;
        }
      }
      else
      {
        v40 = (char *)v24 - (char *)v26 - 8;
        if (v40 < 0x168
          || (v41 = ((char *)(v24 - 1) - (char *)v26) & 0xFFFFFFFFFFFFFFF8,
              &v37[(char *)v24 - (char *)v26 - 8 - v41] > &v37[(char *)v24 - (char *)v26 - 8])
          || (uint64_t *)((char *)v24 - v41 - 8) > v24 - 1
          || (unint64_t)((char *)v26 - v37) < 0x20)
        {
          v42 = v24;
          v43 = v62;
          goto LABEL_66;
        }
        v46 = (v40 >> 3) + 1;
        v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = &v24[v47 / 0xFFFFFFFFFFFFFFF8];
        v38 = (uint64_t *)((char *)v38 - v47);
        v48 = &v37[8 * v35 - 16];
        v49 = v24 - 2;
        v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *v48 = v51;
          v48 -= 2;
          v49 -= 4;
          v50 -= 4;
        }
        while (v50);
        v43 = v62;
        if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_66:
            v44 = *--v42;
            *--v38 = v44;
          }
          while (v42 != v26);
        }
        v24 = v26;
        v26 = v38;
        v61 = (uint64_t *)&v37[v43];
        if (v24)
          goto LABEL_68;
      }
      v25 = 1;
      v24 = v39;
    }
LABEL_31:
    v22 += 3;
  }
  while (v22 != v23);
  if (v26 != v24)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    cricket::BasicPortAllocatorSession::PrunePortsAndRemoveCandidates(this, v26, v24, v54, v55, v56, v57, v58);
  }
  if (v26)
    operator delete(v26);
  return v25 & 1;
}

uint64_t cricket::`anonymous namespace'::ComparePort(cricket::_anonymous_namespace_ *this, const cricket::Port *a2, const cricket::Port *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  v5 = (*(uint64_t (**)(cricket::_anonymous_namespace_ *, const cricket::Port *, const cricket::Port *))(*(_QWORD *)this + 128))(this, a2, a3);
  if (v5 <= 3)
  {
    v6 = dword_208F05860[v5];
    v7 = (*(uint64_t (**)(const cricket::Port *))(*(_QWORD *)a2 + 128))(a2);
    if (v7 > 3)
      goto LABEL_3;
LABEL_6:
    v9 = dword_208F05870[v7];
    result = v9 + v6;
    if (v9 + v6)
      return result;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = (*(uint64_t (**)(const cricket::Port *))(*(_QWORD *)a2 + 128))(a2);
  if (v7 <= 3)
    goto LABEL_6;
LABEL_3:
  result = v6;
  if (v6)
    return result;
LABEL_8:
  v10 = (*(uint64_t (**)(cricket::_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  rtc::Network::GetBestIP(v10, (uint64_t)&v15);
  if (v16 == 30)
    v11 = 2;
  else
    v11 = v16 == 2;
  v12 = (*(uint64_t (**)(const cricket::Port *))(*(_QWORD *)a2 + 24))(a2);
  rtc::Network::GetBestIP(v12, (uint64_t)&v15);
  if (v16 == 2)
    v13 = -1;
  else
    v13 = 0;
  if (v16 == 30)
    v14 = -2;
  else
    v14 = v13;
  return (v14 + v11);
}

uint64_t cricket::BasicPortAllocatorSession::PruneAllPorts(uint64_t this)
{
  uint64_t v1;
  uint64_t i;

  v1 = *(_QWORD *)(this + 624);
  for (i = *(_QWORD *)(this + 632); v1 != i; v1 += 24)
  {
    *(_DWORD *)(v1 + 20) = 3;
    this = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      *(_DWORD *)(this + 724) = 2;
      this = cricket::Port::PostDestroyIfDead((cricket::Port *)this, 0);
    }
  }
  return this;
}

uint64_t cricket::BasicPortAllocator::SetVpnList(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 88))(*(_QWORD *)(a1 + 312));
}

void cricket::PortConfiguration::StunServers(cricket::PortConfiguration *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char **v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  char *v22;
  char **v23;
  BOOL v24;
  char **v25;
  char *v26[2];

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      if (!*(_DWORD *)(a2 + 32) && !*(_WORD *)(a2 + 56))
        goto LABEL_15;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v4 = a2 + 80;
  v5 = *(_QWORD **)(a2 + 80);
  if (!v5)
    goto LABEL_14;
  v6 = a2 + 80;
  do
  {
    v7 = rtc::SocketAddress::operator<((uint64_t)(v5 + 4), (char *)a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = (uint64_t)v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v4 || rtc::SocketAddress::operator<(a2, (char *)(v6 + 32)))
LABEL_14:
    std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress const&>((uint64_t **)(a2 + 72), (char *)a2, a2);
LABEL_15:
  if (*(_QWORD *)(a2 + 88) && *(_BYTE *)(a2 + 144))
  {
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 1) = 0;
    *(_QWORD *)this = (char *)this + 8;
    std::set<rtc::SocketAddress>::insert[abi:sn180100]<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>((uint64_t)this, *(char **)(a2 + 72), (char *)(a2 + 80));
  }
  else
  {
    v26[0] = 0;
    v26[1] = 0;
    v25 = v26;
    v10 = *(_QWORD *)(a2 + 152);
    v9 = *(_QWORD *)(a2 + 160);
    if (v9 != v10)
    {
      v11 = 0;
      do
      {
        v12 = (char **)(v10 + 160 * v11);
        v13 = *v12;
        v14 = v12[1];
        v15 = v13;
        if (v13 != v14)
        {
          while (*((_DWORD *)v15 + 18))
          {
            v15 += 80;
            if (v15 == v14)
              goto LABEL_21;
          }
          std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress const&>((uint64_t **)&v25, v13, (uint64_t)v13);
          v10 = *(_QWORD *)(a2 + 152);
          v9 = *(_QWORD *)(a2 + 160);
        }
LABEL_21:
        ++v11;
      }
      while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((v9 - v10) >> 5));
      v16 = (uint64_t *)v25;
      if (v25 != v26)
      {
        v17 = (_QWORD *)(a2 + 80);
        do
        {
          v18 = (_QWORD *)*v17;
          if (!*v17)
            goto LABEL_36;
          v19 = a2 + 80;
          do
          {
            v20 = rtc::SocketAddress::operator<((uint64_t)(v18 + 4), (char *)v16 + 32);
            v21 = v18 + 1;
            if (!v20)
            {
              v21 = v18;
              v19 = (uint64_t)v18;
            }
            v18 = (_QWORD *)*v21;
          }
          while (*v21);
          if ((_QWORD *)v19 == v17
            || rtc::SocketAddress::operator<((uint64_t)(v16 + 4), (char *)(v19 + 32)))
          {
LABEL_36:
            std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress const&>((uint64_t **)(a2 + 72), (char *)v16 + 32, (uint64_t)(v16 + 4));
          }
          v22 = (char *)v16[1];
          if (v22)
          {
            do
            {
              v23 = (char **)v22;
              v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (char **)v16[2];
              v24 = *v23 == (char *)v16;
              v16 = (uint64_t *)v23;
            }
            while (!v24);
          }
          v16 = (uint64_t *)v23;
        }
        while (v23 != v26);
      }
    }
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 1) = 0;
    *(_QWORD *)this = (char *)this + 8;
    std::set<rtc::SocketAddress>::insert[abi:sn180100]<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>((uint64_t)this, *(char **)(a2 + 72), (char *)(a2 + 80));
    std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v25, v26[0]);
  }
}

uint64_t cricket::AllocationSequence::Process(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  int v23;
  uint64_t v24;
  void **__src;
  size_t __len;
  uint64_t v27;
  char *v28;
  rtc::SocketAddress *v29;
  _DWORD *v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  char *v38;
  std::string::size_type *p_size;
  std::string::value_type *v40;
  int v41;
  int v42;
  int v43;
  BOOL v44;
  uint64_t v45;
  std::string *v46;
  size_t v47;
  const std::string::value_type *v48;
  size_t v49;
  const std::string::value_type *v50;
  size_t v51;
  rtc::SocketAddress *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void **v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  BOOL v90;
  unint64_t v91;
  _BYTE *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void **v99;
  _OWORD *v100;
  void **v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  void **v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;
  int v133;
  int v134;
  uint64_t v135;
  void **v136;
  size_t v137;
  void **v138;
  __int16 v139;
  size_t v140;
  int v141;
  uint64_t v142;
  cricket::TCPPort *v143;
  int v144;
  uint64_t v145;
  void (**v146)(cricket::TCPPort *__hidden);
  uint64_t v147;
  void **v148;
  __int16 v149;
  uint64_t v150;
  uint64_t v151;
  size_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  std::string::size_type v157;
  int v158;
  uint64_t v159;
  std::string *v160;
  uint64_t v161;
  void **v162;
  size_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  std::string::size_type v167;
  int v168;
  uint64_t v169;
  std::string::size_type v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  int v175;
  uint64_t v176;
  void **v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int *v189;
  unsigned int v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  void **v195;
  size_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  rtc::SocketAddress *v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  void **v214;
  uint64_t v215;
  void *__dst;
  void *__dsta;
  void *__dstb;
  void *__dstc;
  void *v220;
  char v221;
  void *__p;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD v226[3];
  _QWORD *v227;
  std::string v228;
  rtc::SocketAddress *v229[2];
  std::string v230[2];
  __int128 v231;
  int v232;
  uint64_t v233;

  v233 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(this + 176) != a2)
    return this;
  v2 = (_QWORD *)this;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    rtc::Network::ToString((rtc::Network *)v2[2], &v228);
    rtc::webrtc_logging_impl::Log("\r\n\t\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
  }
  v10 = *((_DWORD *)v2 + 34);
  v209 = v2;
  if (v10 == 2)
  {
    if ((*((_BYTE *)v2 + 68) & 8) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v116, v117, v118, v119, v120, v121, v122, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    }
    else
    {
      v19 = *(_QWORD *)(*v2 + 552);
      v20 = *(_QWORD *)(*v2 + 560);
      v21 = (void *)v2[2];
      v22 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 120);
      v23 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 124);
      v24 = *v2;
      __src = (void **)(*v2 + 488);
      if (*(char *)(*v2 + 511) < 0)
      {
        __len = *(_QWORD *)(v24 + 496);
        if ((__len & 0x8000000000000000) != 0)
          goto LABEL_221;
        __src = (void **)*__src;
        if (__len)
        {
          if (!__src)
            goto LABEL_221;
        }
      }
      else
      {
        __len = *(unsigned __int8 *)(*v2 + 511);
      }
      v138 = (void **)(v24 + 512);
      v213 = v20;
      __dst = v21;
      if (*(char *)(v24 + 535) < 0)
      {
        v140 = *(_QWORD *)(v24 + 520);
        if ((v140 & 0x8000000000000000) != 0)
          goto LABEL_221;
        v138 = (void **)*v138;
        v139 = v23;
        if (v140)
        {
          if (!v138)
            goto LABEL_221;
        }
      }
      else
      {
        v139 = v23;
        v140 = *(unsigned __int8 *)(v24 + 535);
      }
      v141 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 152))(v24) + 136);
      v142 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209) + 304);
      v143 = (cricket::TCPPort *)operator new();
      v145 = cricket::Port::Port((uint64_t)v143, v19, 0, v213, (uint64_t)__dst, v22, v139, v144, __src, __len, v138, v140, v142, 0);
      v146 = &off_24C0C2228;
      *(_QWORD *)v145 = &off_24C0C2228;
      *(_QWORD *)(v145 + 232) = &unk_24C0C23A0;
      *(_BYTE *)(v145 + 792) = v141;
      *(_OWORD *)(v145 + 800) = 0u;
      *(_OWORD *)(v145 + 816) = 0u;
      *(_DWORD *)(v145 + 832) = 0;
      *(_QWORD *)(v145 + 840) = v145 + 840;
      *(_QWORD *)(v145 + 848) = v145 + 840;
      *(_QWORD *)(v145 + 856) = 0;
      if (v141)
      {
        cricket::TCPPort::TryCreateServerSocket(v143);
        v146 = *(void (***)(cricket::TCPPort *__hidden))v143;
      }
      ((void (*)(cricket::TCPPort *, uint64_t, uint64_t))v146[13])(v143, 3, 1);
      v2 = v209;
      v147 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209);
      (*(void (**)(cricket::TCPPort *, _QWORD))(*(_QWORD *)v143 + 48))(v143, *(_QWORD *)(v147 + 288));
      cricket::BasicPortAllocatorSession::AddAllocatedPort(*v2, v143, (uint64_t)v2);
    }
    *((_DWORD *)v2 + 16) = 3;
    goto LABEL_204;
  }
  if (v10 == 1)
  {
    if ((*((_BYTE *)v2 + 68) & 4) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
        goto LABEL_204;
      goto LABEL_203;
    }
    v27 = v2[7];
    if (!v27
      || (v29 = *(rtc::SocketAddress **)(v27 + 152), v28 = *(char **)(v27 + 160), v29 == (rtc::SocketAddress *)v28))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_204;
      goto LABEL_203;
    }
    v212 = -858993459 * ((unint64_t)(v28 - (char *)v29) >> 5);
    v207 = *(rtc::SocketAddress **)(v27 + 160);
    while (1)
    {
      v30 = *(_DWORD **)v29;
      if (*(_QWORD *)v29 != *((_QWORD *)v29 + 1))
        break;
LABEL_20:
      --v212;
      v29 = (rtc::SocketAddress *)((char *)v29 + 160);
      if (v29 == v207)
        goto LABEL_204;
    }
LABEL_24:
    if ((*((_BYTE *)v2 + 69) & 0x10) != 0 && !v30[18])
      goto LABEL_23;
    v31 = v2[2];
    v32 = *(_QWORD *)(v31 + 240);
    v33 = *(_QWORD *)(v31 + 248);
    if (v33 == v32)
    {
      if (v30[8])
        goto LABEL_98;
      goto LABEL_57;
    }
    if (*(_DWORD *)(v31 + 184) == 2)
    {
      v34 = *(_DWORD *)(v32 + 8);
      v35 = v30[8];
      if (v35)
        v36 = v35 == v34;
      else
        v36 = 1;
      if (!v36)
        goto LABEL_98;
      goto LABEL_57;
    }
    v37 = 0;
    *(_OWORD *)&v228.__r_.__value_.__r.__words[1] = 0uLL;
    v229[0] = 0;
    v223 = 0;
    v224 = 0;
    v225 = 0;
    while (1)
    {
      v41 = *(_DWORD *)(v32 + 28);
      if ((v41 & 2) != 0)
        goto LABEL_38;
      v42 = *(_DWORD *)(v32 + 8);
      if (v42 == 2)
      {
        v38 = (char *)v229 + 4;
        p_size = &v228.__r_.__value_.__l.__size_;
        v40 = &v228.__r_.__value_.__s.__data_[12];
        if (*(__int16 *)(v32 + 12) == -343)
          goto LABEL_37;
      }
      else if (v42 == 30)
      {
        v38 = (char *)v229 + 4;
        p_size = &v228.__r_.__value_.__l.__size_;
        v40 = &v228.__r_.__value_.__s.__data_[12];
        if ((*(_QWORD *)(v32 + 12) & 0xC0FFLL) == 0x80FE)
          goto LABEL_37;
      }
      v38 = (char *)&v225 + 4;
      p_size = (std::string::size_type *)&v223;
      v40 = (char *)&v223 + 4;
      if ((*(_QWORD *)(v32 + 12) & 0xFELL) == 0xFC)
      {
LABEL_37:
        *(_DWORD *)v38 = v41;
        *(_DWORD *)p_size = v42;
        *(_OWORD *)v40 = *(_OWORD *)(v32 + 12);
LABEL_38:
        v32 += 32;
        if (v32 == v33)
        {
          v42 = v37;
LABEL_50:
          if (v42 || (v42 = v228.__r_.__value_.__r.__words[1]) != 0)
          {
            v43 = v30[8];
            if (v43)
              v44 = v43 == v42;
            else
              v44 = 1;
            if (!v44)
              goto LABEL_98;
LABEL_57:
            v232 = 0;
            v231 = 0u;
            memset(v230, 0, sizeof(v230));
            v45 = *v2;
            *(_OWORD *)&v228.__r_.__value_.__l.__data_ = *(_OWORD *)(*v2 + 552);
            v228.__r_.__value_.__r.__words[2] = v31;
            if (v230 == (std::string *)(v45 + 488))
            {
LABEL_60:
              v46 = (std::string *)(v45 + 512);
              if (&v230[1] == (std::string *)(v45 + 512))
                goto LABEL_74;
            }
            else
            {
              if ((*(char *)(v45 + 511) & 0x80000000) == 0)
              {
                v230[0] = *(std::string *)(v45 + 488);
                goto LABEL_60;
              }
              std::string::__assign_no_alias<true>(v230, *(char **)(v45 + 488), *(_QWORD *)(v45 + 496));
              v45 = *v2;
              v46 = (std::string *)(*v2 + 512);
              if (&v230[1] == v46)
              {
LABEL_74:
                v229[0] = (rtc::SocketAddress *)v30;
                v229[1] = v29;
                *(_QWORD *)&v231 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 264);
                *((_QWORD *)&v231 + 1) = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2)
                                                   + 304);
                v232 = v212;
                if ((*((_BYTE *)v2 + 69) & 1) != 0 && !v30[18] && v2[12])
                {
                  v58 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2);
                  (*(void (**)(void **__return_ptr, _QWORD, std::string *, _QWORD))(**(_QWORD **)(v58 + 344)
                                                                                             + 16))(&__p, *(_QWORD *)(v58 + 344), &v228, v2[12]);
                  v56 = __p;
                  if (__p)
                  {
                    v59 = v2;
                    v60 = (void **)v2[15];
                    v61 = v59[16];
                    if ((unint64_t)v60 < v61)
                    {
                      if (v60)
                      {
                        *v60 = __p;
                        v62 = v60 + 1;
                        goto LABEL_126;
                      }
LABEL_221:
                      __break(1u);
                    }
                    v86 = (char *)v59[14];
                    v87 = ((char *)v60 - v86) >> 3;
                    v88 = v87 + 1;
                    if ((unint64_t)(v87 + 1) >> 61)
                      abort();
                    v89 = v61 - (_QWORD)v86;
                    if (v89 >> 2 > v88)
                      v88 = v89 >> 2;
                    v90 = (unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8;
                    v91 = 0x1FFFFFFFFFFFFFFFLL;
                    if (!v90)
                      v91 = v88;
                    if (!v91)
                      goto LABEL_221;
                    v204 = (char *)((char *)v60 - v86);
                    v206 = v86;
                    if (v91 >> 61)
                      std::__throw_bad_array_new_length[abi:sn180100]();
                    v205 = 8 * v91;
                    v92 = operator new(8 * v91);
                    v93 = &v92[8 * v87];
                    *v93 = v56;
                    v94 = v93 + 1;
                    if (v60 == (void **)v206)
                    {
                      v209[14] = v93;
                      v209[15] = v94;
                      v209[16] = &v92[v205];
                      if (v60)
                        goto LABEL_125;
                    }
                    else
                    {
                      v95 = (char *)v60 - v206 - 8;
                      if (v95 < 0x58)
                      {
                        v96 = v205;
                        goto LABEL_123;
                      }
                      v96 = v205;
                      if ((unint64_t)((char *)v60 - v204 - (_QWORD)v92) < 0x20)
                        goto LABEL_227;
                      v97 = (v95 >> 3) + 1;
                      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
                      v99 = &v60[v98 / 0xFFFFFFFFFFFFFFF8];
                      v93 = (_QWORD *)((char *)v93 - v98);
                      v100 = &v92[8 * v87 - 16];
                      v101 = v60 - 2;
                      v102 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v103 = *(_OWORD *)v101;
                        *(v100 - 1) = *((_OWORD *)v101 - 1);
                        *v100 = v103;
                        v100 -= 2;
                        v101 -= 4;
                        v102 -= 4;
                      }
                      while (v102);
                      v60 = v99;
                      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_227:
                        do
                        {
LABEL_123:
                          v104 = (uint64_t)*--v60;
                          *--v93 = v104;
                        }
                        while (v60 != (void **)v206);
                      }
                      v60 = (void **)v206;
                      v209[14] = v93;
                      v209[15] = v94;
                      v209[16] = &v92[v96];
                      if (v206)
                      {
LABEL_125:
                        v105 = v60;
                        v62 = v94;
                        operator delete(v105);
LABEL_126:
                        v94 = v62;
                      }
                    }
                    v209[15] = v94;
                    v226[0] = &off_24C0B0100;
                    v226[1] = v209;
                    v227 = v226;
                    (*(void (**)(_QWORD *, _QWORD *))(*v56 + 160))(v56, v226);
                    v106 = v227;
                    v52 = v29;
                    if (v227 == v226)
                    {
                      v106 = v226;
                      v107 = 4;
LABEL_131:
                      (*(void (**)(void))(*v106 + 8 * v107))();
                    }
                    else if (v227)
                    {
                      v107 = 5;
                      goto LABEL_131;
                    }
                    v2 = v209;
LABEL_77:
                    v57 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2);
                    (*(void (**)(_QWORD *, _QWORD))(*v56 + 48))(v56, *(_QWORD *)(v57 + 288));
                    cricket::BasicPortAllocatorSession::AddAllocatedPort(*v2, v56, (uint64_t)v2);
LABEL_80:
                    v29 = v52;
                  }
                  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
                  {
                    rtc::SocketAddress::ToSensitiveString(v229[0], (char *)&__p);
                    v203 = v203 & 0xFFFFFFFF00000000 | 0x338A;
                    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v79, v80, v81, v82, v83, v84, v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
                    if (SHIBYTE(v224) < 0)
                      operator delete(__p);
                  }
                }
                else
                {
                  v52 = v29;
                  v53 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 344);
                  v54 = *(unsigned int *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 120);
                  v55 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2);
                  (*(void (**)(void **__return_ptr, uint64_t, std::string *, uint64_t, _QWORD))(*(_QWORD *)v53 + 24))(&__p, v53, &v228, v54, *(unsigned int *)(v55 + 124));
                  v56 = __p;
                  if (__p)
                    goto LABEL_77;
                  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
                  {
                    v2 = v209;
                    goto LABEL_80;
                  }
                  rtc::SocketAddress::ToSensitiveString(v229[0], (char *)&__p);
                  v208 = v208 & 0xFFFFFFFF00000000 | 0x3412;
                  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v63, v64, v65, v66, v67, v68, v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
                  v2 = v209;
                  v29 = v52;
                  if (SHIBYTE(v224) < 0)
                    operator delete(__p);
                }
                if (SHIBYTE(v230[1].__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v230[1].__r_.__value_.__l.__data_);
                  if (SHIBYTE(v230[0].__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_85;
                }
                else if (SHIBYTE(v230[0].__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_85:
                  operator delete(v230[0].__r_.__value_.__l.__data_);
                }
                goto LABEL_23;
              }
            }
            v47 = *(unsigned __int8 *)(v45 + 535);
            if (SHIBYTE(v230[1].__r_.__value_.__r.__words[2]) < 0)
            {
              v48 = *(const std::string::value_type **)(v45 + 512);
              v49 = *(_QWORD *)(v45 + 520);
              if ((v47 & 0x80u) == 0)
                v50 = (const std::string::value_type *)v46;
              else
                v50 = v48;
              if ((v47 & 0x80u) == 0)
                v51 = v47;
              else
                v51 = v49;
              std::string::__assign_no_alias<false>(&v230[1], v50, v51);
            }
            else if ((v47 & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v230[1].__r_.__value_.__r.__words, *(char **)(v45 + 512), *(_QWORD *)(v45 + 520));
            }
            else
            {
              v230[1] = *v46;
            }
            goto LABEL_74;
          }
          v70 = v30[8];
          if (v70)
            v71 = v70 == (_DWORD)v223;
          else
            v71 = 1;
          if (v71)
            goto LABEL_57;
LABEL_98:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
            rtc::IPAddress::ToSensitiveString((rtc::IPAddress *)(v30 + 6), (uint64_t)&__p);
            rtc::Network::GetBestIP(v2[2], (uint64_t)&v228);
            rtc::IPAddress::ToSensitiveString((rtc::IPAddress *)&v228, (uint64_t)&v220);
            v210 = v210 & 0xFFFFFFFF00000000 | 0x3291;
            rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v72, v73, v74, v75, v76, v77, v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
            if (v221 < 0)
            {
              operator delete(v220);
              if ((SHIBYTE(v224) & 0x80000000) == 0)
                goto LABEL_23;
            }
            else if ((SHIBYTE(v224) & 0x80000000) == 0)
            {
              goto LABEL_23;
            }
            operator delete(__p);
          }
LABEL_23:
          v30 += 20;
          if (v30 == *((_DWORD **)v29 + 1))
            goto LABEL_20;
          goto LABEL_24;
        }
      }
      else
      {
        if ((v41 & 1) != 0)
          goto LABEL_50;
        v32 += 32;
        v37 = v42;
        if (v32 == v33)
          goto LABEL_50;
      }
    }
  }
  if (v10)
    goto LABEL_204;
  v11 = *((_DWORD *)v2 + 17);
  if ((v11 & 1) == 0)
  {
    if ((v11 & 0x100) != 0 && (v12 = v2[12]) != 0)
    {
      v13 = *v2;
      v14 = *(_QWORD *)(*v2 + 552);
      v15 = *(_QWORD *)(*v2 + 560);
      v16 = (void *)v2[2];
      v17 = (void **)(*v2 + 488);
      if (*(char *)(*v2 + 511) < 0)
      {
        v18 = *(_QWORD *)(v13 + 496);
        if ((v18 & 0x8000000000000000) != 0)
          goto LABEL_221;
        v17 = (void **)*v17;
        if (v18)
        {
          if (!v17)
            goto LABEL_221;
        }
      }
      else
      {
        v18 = *(unsigned __int8 *)(*v2 + 511);
      }
      v162 = (void **)(v13 + 512);
      v215 = v12;
      __dstb = v16;
      if (*(char *)(v13 + 535) < 0)
      {
        v163 = *(_QWORD *)(v13 + 520);
        if ((v163 & 0x8000000000000000) != 0)
          goto LABEL_221;
        v162 = (void **)*v162;
        if (v163)
        {
          if (!v162)
            goto LABEL_221;
        }
      }
      else
      {
        v163 = *(unsigned __int8 *)(v13 + 535);
      }
      v164 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 152))(v13) + 272);
      v165 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209) + 304);
      v155 = operator new();
      v167 = cricket::Port::Port(v155, v14, 0, v15, (uint64_t)__dstb, 0, 0, v166, v17, v18, v162, v163, v165, 1);
      *(_QWORD *)v167 = &off_24C0C16C0;
      *(_QWORD *)(v167 + 232) = &unk_24C0C1838;
      *(_OWORD *)(v167 + 800) = 0u;
      *(_QWORD *)(v167 + 792) = v167 + 800;
      *(_OWORD *)(v167 + 824) = 0u;
      *(_QWORD *)(v167 + 816) = v167 + 824;
      *(_OWORD *)(v167 + 848) = 0u;
      *(_QWORD *)(v167 + 840) = v167 + 848;
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1A38;
      v228.__r_.__value_.__l.__size_ = v167;
      v229[0] = (rtc::SocketAddress *)&v228;
      *(_QWORD *)(v167 + 864) = v14;
      *(_OWORD *)(v167 + 880) = 0u;
      *(_QWORD *)(v167 + 872) = v167 + 880;
      *(_QWORD *)(v167 + 920) = v167 + 896;
      std::__function::__func<cricket::UDPPort::UDPPort(rtc::Thread *,webrtc::IceCandidateType,rtc::PacketSocketFactory *,rtc::Network const*,rtc::AsyncPacketSocket *,std::string_view,std::string_view,BOOL,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::UDPPort::UDPPort(rtc::Thread *,webrtc::IceCandidateType,rtc::PacketSocketFactory *,rtc::Network const*,rtc::AsyncPacketSocket *,std::string_view,std::string_view,BOOL,webrtc::FieldTrialsView const*)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::__clone((uint64_t)&v228, (_QWORD *)(v167 + 896));
      *(_QWORD *)(v155 + 928) = v215;
      *(_OWORD *)(v155 + 936) = 0u;
      *(_BYTE *)(v155 + 952) = 0;
      *(_QWORD *)(v155 + 960) = -1;
      *(_QWORD *)(v155 + 968) = 0;
      *(_QWORD *)(v155 + 984) = 0;
      *(_QWORD *)(v155 + 976) = 0;
      *(_BYTE *)(v155 + 992) = (v11 & 0x800) == 0;
      if ((v164 & 0xFF00000000) != 0)
        v168 = v164;
      else
        v168 = 10000;
      *(_DWORD *)(v155 + 956) = v168;
      if ((cricket::UDPPort::Init((cricket::UDPPort *)v155) & 1) == 0)
      {
LABEL_184:
        (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
        v2 = v209;
LABEL_185:
        v115 = *((_DWORD *)v2 + 17);
        if ((v115 & 2) == 0)
          goto LABEL_186;
LABEL_202:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
          goto LABEL_204;
        goto LABEL_203;
      }
    }
    else
    {
      v130 = *(_QWORD *)(*v2 + 552);
      v131 = *(_QWORD *)(*v2 + 560);
      v132 = (void *)v2[2];
      v133 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 120);
      v134 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 124);
      v135 = *v2;
      v136 = (void **)(*v2 + 488);
      if (*(char *)(*v2 + 511) < 0)
      {
        v137 = *(_QWORD *)(v135 + 496);
        if ((v137 & 0x8000000000000000) != 0)
          goto LABEL_221;
        v136 = (void **)*v136;
        if (v137)
        {
          if (!v136)
            goto LABEL_221;
        }
      }
      else
      {
        v137 = *(unsigned __int8 *)(*v2 + 511);
      }
      v148 = (void **)(v135 + 512);
      v214 = v136;
      __dsta = v132;
      v211 = v137;
      if (*(char *)(v135 + 535) < 0)
      {
        v152 = *(_QWORD *)(v135 + 520);
        if ((v152 & 0x8000000000000000) != 0)
          goto LABEL_221;
        v148 = (void **)*v148;
        v149 = v133;
        v150 = v130;
        v151 = v131;
        if (v152)
        {
          if (!v148)
            goto LABEL_221;
        }
      }
      else
      {
        v149 = v133;
        v150 = v130;
        v151 = v131;
        v152 = *(unsigned __int8 *)(v135 + 535);
      }
      v153 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v135 + 152))(v135) + 272);
      v154 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209) + 304);
      v155 = operator new();
      v157 = cricket::Port::Port(v155, v150, 0, v151, (uint64_t)__dsta, v149, v134, v156, v214, v211, v148, v152, v154, 0);
      *(_QWORD *)v157 = &off_24C0C16C0;
      *(_QWORD *)(v157 + 232) = &unk_24C0C1838;
      *(_OWORD *)(v157 + 800) = 0u;
      *(_QWORD *)(v157 + 792) = v157 + 800;
      *(_OWORD *)(v157 + 824) = 0u;
      *(_QWORD *)(v157 + 816) = v157 + 824;
      *(_OWORD *)(v157 + 848) = 0u;
      *(_QWORD *)(v157 + 840) = v157 + 848;
      v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1A80;
      v228.__r_.__value_.__l.__size_ = v157;
      v229[0] = (rtc::SocketAddress *)&v228;
      *(_QWORD *)(v157 + 864) = v150;
      *(_OWORD *)(v157 + 880) = 0u;
      *(_QWORD *)(v157 + 872) = v157 + 880;
      *(_QWORD *)(v157 + 920) = v157 + 896;
      std::__function::__func<cricket::UDPPort::UDPPort(rtc::Thread *,webrtc::IceCandidateType,rtc::PacketSocketFactory *,rtc::Network const*,unsigned short,unsigned short,std::string_view,std::string_view,BOOL,webrtc::FieldTrialsView const*)::$_0,std::allocator<cricket::UDPPort::UDPPort(rtc::Thread *,webrtc::IceCandidateType,rtc::PacketSocketFactory *,rtc::Network const*,unsigned short,unsigned short,std::string_view,std::string_view,BOOL,webrtc::FieldTrialsView const*)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::__clone((uint64_t)&v228, (_QWORD *)(v157 + 896));
      *(_BYTE *)(v155 + 952) = 0;
      *(_QWORD *)(v155 + 944) = 0;
      *(_OWORD *)(v155 + 928) = 0u;
      *(_QWORD *)(v155 + 960) = -1;
      *(_QWORD *)(v155 + 968) = 0;
      *(_OWORD *)(v155 + 976) = 0u;
      *(_BYTE *)(v155 + 992) = (v11 & 0x800) == 0;
      if ((v153 & 0xFF00000000) != 0)
        v158 = v153;
      else
        v158 = 10000;
      *(_DWORD *)(v155 + 956) = v158;
      if ((cricket::UDPPort::Init((cricket::UDPPort *)v155) & 1) == 0)
        goto LABEL_184;
    }
    v2 = v209;
    v159 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v155 + 48))(v155, *(_QWORD *)(v159 + 288));
    if ((*((_BYTE *)v209 + 69) & 1) == 0)
    {
LABEL_201:
      cricket::BasicPortAllocatorSession::AddAllocatedPort(*v209, (_QWORD *)v155, (uint64_t)v209);
      v115 = *((_DWORD *)v209 + 17);
      if ((v115 & 2) == 0)
        goto LABEL_186;
      goto LABEL_202;
    }
    v209[13] = v155;
    v228.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0B00B8;
    v228.__r_.__value_.__l.__size_ = (std::string::size_type)v209;
    v229[0] = (rtc::SocketAddress *)&v228;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v155 + 160))(v155, &v228);
    v160 = (std::string *)v229[0];
    if ((std::string *)v229[0] == &v228)
    {
      v161 = 4;
      v160 = &v228;
    }
    else
    {
      if (!v229[0])
      {
LABEL_195:
        if ((*((_BYTE *)v209 + 68) & 2) == 0)
        {
          v179 = v209[7];
          if (v179)
          {
            cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)&__p, v179);
            v180 = v224;
            std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__p, v223);
            if (v180)
            {
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v181, v182, v183, v184, v185, v186, v187, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
              cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)&__p, v209[7]);
              std::__tree<rtc::SocketAddress>::__assign_multi<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>(v155 + 792, (char *)__p, (char *)&v223);
              std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__p, v223);
            }
          }
        }
        goto LABEL_201;
      }
      v161 = 5;
    }
    (*(void (**)(void))(v160->__r_.__value_.__r.__words[0] + 8 * v161))();
    goto LABEL_195;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
    goto LABEL_185;
  rtc::webrtc_logging_impl::Log("\r\t", v108, v109, v110, v111, v112, v113, v114, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
  v115 = *((_DWORD *)v2 + 17);
  if ((v115 & 2) != 0)
    goto LABEL_202;
LABEL_186:
  if ((v115 & 0x100) == 0)
  {
    v169 = v2[7];
    if (v169)
    {
      cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)&v228, v169);
      v170 = v228.__r_.__value_.__r.__words[2];
      std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v228, (char *)v228.__r_.__value_.__l.__size_);
      if (v170)
      {
        v171 = *(_QWORD *)(*v2 + 552);
        v172 = *(_QWORD *)(*v2 + 560);
        v173 = v2[2];
        v174 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 120);
        v175 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 124);
        v176 = *v2;
        v177 = (void **)(*v2 + 488);
        if (*(char *)(*v2 + 511) < 0)
        {
          v178 = *(_QWORD *)(v176 + 496);
          if ((v178 & 0x8000000000000000) != 0)
            goto LABEL_221;
          v177 = (void **)*v177;
          if (v178)
          {
            if (!v177)
              goto LABEL_221;
          }
        }
        else
        {
          v178 = *(unsigned __int8 *)(*v2 + 511);
        }
        v195 = (void **)(v176 + 512);
        __dstc = (void *)v178;
        if (*(char *)(v176 + 535) < 0)
        {
          v196 = *(_QWORD *)(v176 + 520);
          if ((v196 & 0x8000000000000000) != 0)
            goto LABEL_221;
          v195 = (void **)*v195;
          if (v196)
          {
            if (!v195)
              goto LABEL_221;
          }
        }
        else
        {
          v196 = *(unsigned __int8 *)(v176 + 535);
        }
        v2 = v209;
        cricket::PortConfiguration::StunServers((cricket::PortConfiguration *)&v228, v209[7]);
        v197 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 272);
        v198 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2);
        cricket::StunPort::Create(v171, v172, v173, v174, v175, v177, (size_t)__dstc, (uint64_t *)&__p, v195, v196, (uint64_t)&v228, v197, *(_QWORD *)(v198 + 304));
        std::__tree<rtc::SocketAddress>::destroy((uint64_t)&v228, (char *)v228.__r_.__value_.__l.__size_);
        v199 = __p;
        if (__p)
        {
          v200 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v209 + 152))(*v209);
          (*(void (**)(_QWORD *, _QWORD))(*v199 + 48))(v199, *(_QWORD *)(v200 + 288));
          cricket::BasicPortAllocatorSession::AddAllocatedPort(*v209, v199, (uint64_t)v209);
        }
        goto LABEL_204;
      }
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_203:
      rtc::webrtc_logging_impl::Log("\r\t", v123, v124, v125, v126, v127, v128, v129, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
  }
LABEL_204:
  if (*((_DWORD *)v2 + 16) == 1)
  {
    ++*((_DWORD *)v2 + 34);
    v188 = *(_QWORD *)(*v2 + 552);
    v189 = (unsigned int *)v2[23];
    if (v189)
    {
      do
        v190 = __ldxr(v189);
      while (__stxr(v190 + 1, v189));
    }
    v191 = *((_DWORD *)v2 + 44);
    v192 = operator new();
    *(_QWORD *)v192 = v189;
    *(_QWORD *)(v192 + 8) = v2;
    *(_DWORD *)(v192 + 16) = v191;
    *(_QWORD *)(v192 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v192 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Process(int)::$_0 &&>;
    v193 = 1000 * *(unsigned int *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v2 + 152))(*v2) + 132);
    v228.__r_.__value_.__r.__words[0] = v192;
    v228.__r_.__value_.__r.__words[2] = (std::string::size_type)_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v229[0] = (rtc::SocketAddress *)_ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    LOBYTE(__p) = 0;
    (*(void (**)(uint64_t, std::string *, uint64_t, void **, _QWORD *))(*(_QWORD *)v188 + 16))(v188, &v228, v193, &__p, v226);
    return ((uint64_t (*)(uint64_t, std::string *, std::string *))v228.__r_.__value_.__r.__words[2])(1, &v228, &v228);
  }
  else
  {
    ++*((_DWORD *)v2 + 44);
    v194 = v2[21];
    if (v194)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 48))(v194);
    }
    else
    {
      v201 = std::__throw_bad_function_call[abi:sn180100]();
      return cricket::PortAllocator::SetVpnPreference(v201, v202);
    }
  }
}

uint64_t cricket::PortAllocator::SetVpnPreference(uint64_t result, int a2)
{
  *(_DWORD *)(result + 172) = a2;
  return result;
}

uint64_t std::vector<cricket::RelayServerConfig>::__push_back_slow_path<cricket::RelayServerConfig const&>(char ***a1, char **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char **v12;
  char **v13;
  void **v14;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999)
    abort();
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5) > v3)
    v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v5 = 0x199999999999999;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_20:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x199999999999999)
    goto LABEL_20;
  v7 = 160 * v5;
  v8 = (char *)operator new(160 * v5);
  v9 = (char **)&v8[v7];
  v10 = cricket::RelayServerConfig::RelayServerConfig((uint64_t)&v8[160 * v2], a2);
  v11 = v10 + 160;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = (char **)v10;
    a1[1] = (char **)v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_14;
  }
  do
  {
    v12 -= 20;
    v10 = cricket::RelayServerConfig::RelayServerConfig(v10 - 160, v12);
  }
  while (v12 != v13);
  v12 = *a1;
  v14 = (void **)a1[1];
  *a1 = (char **)v10;
  a1[1] = (char **)v11;
  a1[2] = v9;
  while (v14 != (void **)v12)
  {
    v14 -= 20;
    cricket::RelayServerConfig::~RelayServerConfig(v14);
  }
  if (v12)
LABEL_14:
    operator delete(v12);
  return v11;
}

std::string *std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>(std::string **a1, std::string *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  void **v14;

  v2 = 0x84BDA12F684BDA13 * (((char *)a1[1] - (char *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x97B425ED097B42)
    abort();
  if (0x97B425ED097B426 * (((char *)a1[2] - (char *)*a1) >> 4) > v3)
    v3 = 0x97B425ED097B426 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0x84BDA12F684BDA13 * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x4BDA12F684BDA1)
    v5 = 0x97B425ED097B42;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_20:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x97B425ED097B42)
    goto LABEL_20;
  v7 = 18 * v5;
  v8 = (std::string *)operator new(432 * v5);
  v9 = &v8[v7];
  v10 = cricket::Candidate::Candidate(v8 + 18 * v2, a2);
  v11 = v10 + 18;
  v13 = *a1;
  v12 = a1[1];
  if (v12 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v12)
      return v11;
    goto LABEL_14;
  }
  do
  {
    v12 -= 18;
    v10 = cricket::Candidate::Candidate(v10 - 18, v12);
  }
  while (v12 != v13);
  v12 = *a1;
  v14 = (void **)a1[1];
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v9;
  while (v14 != (void **)v12)
  {
    v14 -= 54;
    cricket::Candidate::~Candidate(v14);
  }
  if (v12)
LABEL_14:
    operator delete(v12);
  return v11;
}

void std::default_delete<cricket::PortConfiguration>::operator()[abi:sn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v2 = *(void ***)(a1 + 152);
  if (v2)
  {
    v3 = *(void ***)(a1 + 160);
    v4 = v2;
    if (v3 != v2)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig(v3 - 20);
      while (v3 != v2);
      v4 = *(void ***)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_8:
      std::__tree<rtc::SocketAddress>::destroy(a1 + 72, *(char **)(a1 + 80));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(*(void **)(a1 + 96));
  std::__tree<rtc::SocketAddress>::destroy(a1 + 72, *(char **)(a1 + 80));
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
LABEL_13:
    JUMPOUT(0x20BD0ADECLL);
LABEL_12:
  operator delete(*(void **)a1);
  goto LABEL_13;
}

void std::vector<rtc::Network const*>::__insert_with_size[abi:sn180100]<std::__wrap_iter<rtc::Network const**>,std::__wrap_iter<rtc::Network const**>>(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;

  if (a5 < 1)
    return;
  v6 = __src;
  v9 = *(char **)a1;
  v8 = *(uint64_t **)(a1 + 8);
  v10 = a2 - *(_QWORD *)a1;
  v11 = (char *)(*(_QWORD *)a1 + (v10 & 0xFFFFFFFFFFFFFFF8));
  v12 = *(_QWORD *)(a1 + 16);
  if (a5 > (v12 - (uint64_t)v8) >> 3)
  {
    v13 = a5 + (((char *)v8 - v9) >> 3);
    if (!(v13 >> 61))
    {
      v14 = v12 - (_QWORD)v9;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v16 = (char *)operator new(8 * v15);
      }
      else
      {
        v16 = 0;
      }
      v26 = &v16[8 * (v10 >> 3)];
      v27 = &v16[8 * v15];
      v28 = 8 * a5;
      v29 = &v26[8 * a5];
      v30 = v26;
      do
      {
        if (!v30)
          goto LABEL_44;
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v30 = v31;
        v30 += 8;
        v28 -= 8;
      }
      while (v28);
      v32 = *(char **)a1;
      if (*(char **)a1 == v11)
        goto LABEL_39;
      v33 = &v9[v10 & 0xFFFFFFFFFFFFFFF8];
      v34 = v33 - v32 - 8;
      if (v34 >= 0x68)
      {
        v35 = v11;
        if ((unint64_t)(v33 - &v16[v10 & 0xFFFFFFFFFFFFFFF8]) >= 0x20)
        {
          v36 = (v34 >> 3) + 1;
          v37 = 8 * (v36 & 0x3FFFFFFFFFFFFFFCLL);
          v35 = &v11[-v37];
          v26 -= v37;
          v38 = 8 * (v10 >> 3) - 16;
          v39 = &v16[v38];
          v40 = &v9[v38];
          v41 = v36 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v42 = *(_OWORD *)v40;
            *((_OWORD *)v39 - 1) = *((_OWORD *)v40 - 1);
            *(_OWORD *)v39 = v42;
            v39 -= 32;
            v40 -= 32;
            v41 -= 4;
          }
          while (v41);
          if (v36 == (v36 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_38;
        }
      }
      else
      {
        v35 = v11;
      }
      do
      {
        v43 = *((_QWORD *)v35 - 1);
        v35 -= 8;
        *((_QWORD *)v26 - 1) = v43;
        v26 -= 8;
      }
      while (v35 != v32);
LABEL_38:
      v8 = *(uint64_t **)(a1 + 8);
LABEL_39:
      if (v8 != (uint64_t *)v11)
        memmove(v29, v11, (char *)v8 - v11);
      v44 = *(char **)a1;
      *(_QWORD *)a1 = v26;
      *(_QWORD *)(a1 + 8) = &v29[(char *)v8 - v11];
      *(_QWORD *)(a1 + 16) = v27;
      if (v44)
        operator delete(v44);
      return;
    }
LABEL_45:
    abort();
  }
  v17 = ((char *)v8 - v11) >> 3;
  if (v17 >= a5)
  {
    v18 = &__src[8 * a5];
    v20 = *(char **)(a1 + 8);
    v21 = 8 * a5;
    v22 = &v8[-a5];
    v23 = v20;
    if (v22 >= v8)
    {
LABEL_22:
      v25 = &v11[v21];
      *(_QWORD *)(a1 + 8) = v23;
      if (v20 != v25)
        memmove(&v20[-8 * ((v20 - v25) >> 3)], v11, v20 - v25);
      if (v18 != v6)
        memmove(v11, v6, v18 - v6);
      return;
    }
LABEL_19:
    v23 = v20;
    while (v23)
    {
      v24 = *v22++;
      *(_QWORD *)v23 = v24;
      v23 += 8;
      if (v22 >= v8)
        goto LABEL_22;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v18 = &__src[8 * v17];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[8 * v17], a4 - v18);
  v20 = (char *)v8 + v19;
  *(_QWORD *)(a1 + 8) = (char *)v8 + v19;
  if ((char *)v8 - v11 >= 1)
  {
    v21 = 8 * a5;
    v22 = (uint64_t *)&v20[-8 * a5];
    v23 = (char *)v8 + v19;
    if (v22 >= v8)
      goto LABEL_22;
    goto LABEL_19;
  }
}

_QWORD *std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C0AFF08;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C0AFF08;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C0AFF08;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
    return v2;
  }
  else
  {
    v2[4] = 0;
    return v2;
  }
}

uint64_t std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C0AFF08;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void std::__function::__func<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1},std::allocator<cricket::`anonymous namespace'::NetworkFilter::NetworkFilter(std::function<BOOL ()(rtc::Network const*)>,std::string_view)::{lambda(rtc::Network const*)#1}>,BOOL ()(rtc::Network const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = *a2;
  if (v2)
  {
    (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
  }
  else
  {
    v3 = std::__throw_bad_function_call[abi:sn180100]();
    std::__tree<rtc::SocketAddress>::__assign_multi<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>(v3, v4, v5);
  }
}

void std::__tree<rtc::SocketAddress>::__assign_multi<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>(uint64_t a1, char *a2, char *a3)
{
  char *v4;
  uint64_t *v6;
  uint64_t v7;
  char **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  __int128 v15;
  const std::string::value_type *v16;
  size_t v17;
  char *v18;
  char **v19;
  char **v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  char *v24;
  char *v25;
  char *i;
  char **v27;
  char *v28;
  char *v29;
  _OWORD *v30;
  __int128 v31;
  char *v32;
  char **v33;
  char **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (char **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (char *)v6[1] : (char *)v6;
    if (v9)
    {
      v10 = (char *)*((_QWORD *)v9 + 2);
      if (v10)
      {
        v11 = *(char **)v10;
        if (*(char **)v10 == v9)
        {
          *(_QWORD *)v10 = 0;
          while (1)
          {
            v38 = (char *)*((_QWORD *)v10 + 1);
            if (!v38)
              break;
            do
            {
              v10 = v38;
              v38 = *(char **)v38;
            }
            while (v38);
          }
        }
        else
        {
          for (*((_QWORD *)v10 + 1) = 0; v11; v11 = (char *)*((_QWORD *)v10 + 1))
          {
            do
            {
              v10 = v11;
              v11 = *(char **)v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = a2;
        v13 = v9;
        while (1)
        {
          v9 = v10;
          if (v13 != v12)
          {
            v14 = v12[55];
            if (v13[55] < 0)
            {
              if (v14 >= 0)
                v16 = v12 + 32;
              else
                v16 = (const std::string::value_type *)*((_QWORD *)v12 + 4);
              if (v14 >= 0)
                v17 = v12[55];
              else
                v17 = *((_QWORD *)v12 + 5);
              std::string::__assign_no_alias<false>((std::string *)(v13 + 32), v16, v17);
            }
            else if (v12[55] < 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v13 + 4, *((char **)v12 + 4), *((_QWORD *)v12 + 5));
            }
            else
            {
              v15 = *((_OWORD *)v12 + 2);
              *((_QWORD *)v13 + 6) = *((_QWORD *)v12 + 6);
              *((_OWORD *)v13 + 2) = v15;
            }
          }
          *((_DWORD *)v13 + 16) = *((_DWORD *)v12 + 16);
          *(_OWORD *)(v13 + 68) = *(_OWORD *)(v12 + 68);
          *((_WORD *)v13 + 44) = *((_WORD *)v12 + 44);
          v13[96] = v12[96];
          *((_DWORD *)v13 + 23) = *((_DWORD *)v12 + 23);
          v18 = *v8;
          v19 = (char **)(a1 + 8);
          v20 = (char **)(a1 + 8);
          if (*v8)
            break;
LABEL_26:
          *(_QWORD *)v13 = 0;
          *((_QWORD *)v13 + 1) = 0;
          *((_QWORD *)v13 + 2) = v19;
          *v20 = v13;
          v21 = **(_QWORD **)a1;
          if (v21)
            goto LABEL_27;
LABEL_28:
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v13);
          ++*(_QWORD *)(a1 + 16);
          if (v9)
          {
            v10 = (char *)*((_QWORD *)v9 + 2);
            if (v10)
            {
              v24 = *(char **)v10;
              if (*(char **)v10 == v9)
              {
                *(_QWORD *)v10 = 0;
                while (1)
                {
                  v25 = (char *)*((_QWORD *)v10 + 1);
                  if (!v25)
                    break;
                  do
                  {
                    v10 = v25;
                    v25 = *(char **)v25;
                  }
                  while (v25);
                }
              }
              else
              {
                for (*((_QWORD *)v10 + 1) = 0; v24; v24 = (char *)*((_QWORD *)v10 + 1))
                {
                  do
                  {
                    v10 = v24;
                    v24 = *(char **)v24;
                  }
                  while (v24);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v22 = (char *)*((_QWORD *)v12 + 1);
          if (v22)
          {
            do
            {
              v4 = v22;
              v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v4 = (char *)*((_QWORD *)v12 + 2);
              v23 = *(_QWORD *)v4 == (_QWORD)v12;
              v12 = v4;
            }
            while (!v23);
          }
          if (v9)
          {
            v12 = v4;
            v13 = v9;
            if (v4 != a3)
              continue;
          }
          goto LABEL_54;
        }
        do
        {
          while (1)
          {
            v19 = (char **)v18;
            if (!rtc::SocketAddress::operator<((uint64_t)(v13 + 32), v18 + 32))
              break;
            v18 = *v19;
            v20 = v19;
            if (!*v19)
              goto LABEL_26;
          }
          v18 = v19[1];
        }
        while (v18);
        v20 = v19 + 1;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v19;
        v19[1] = v13;
        v21 = **(_QWORD **)a1;
        if (!v21)
          goto LABEL_28;
LABEL_27:
        *(_QWORD *)a1 = v21;
        v13 = *v20;
        goto LABEL_28;
      }
LABEL_54:
      std::__tree<rtc::SocketAddress>::destroy(a1, v9);
      if (v10)
      {
        for (i = (char *)*((_QWORD *)v10 + 2); i; i = (char *)*((_QWORD *)i + 2))
          v10 = i;
        std::__tree<rtc::SocketAddress>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v27 = (char **)(a1 + 8);
    while (1)
    {
      v28 = (char *)operator new(0x68uLL);
      v29 = v28;
      *((_QWORD *)v28 + 4) = 0;
      v30 = v28 + 32;
      *((_QWORD *)v28 + 5) = 0;
      *((_QWORD *)v28 + 6) = 0;
      *((_QWORD *)v28 + 8) = 0;
      *((_QWORD *)v28 + 9) = 0;
      *((_QWORD *)v28 + 7) = &unk_24C0ACDA0;
      *((_DWORD *)v28 + 20) = 0;
      if (v28 != v4)
      {
        if (v4[55] < 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v28 + 4, *((char **)v4 + 4), *((_QWORD *)v4 + 5));
        }
        else
        {
          v31 = *((_OWORD *)v4 + 2);
          *((_QWORD *)v28 + 6) = *((_QWORD *)v4 + 6);
          *v30 = v31;
        }
      }
      *((_DWORD *)v29 + 16) = *((_DWORD *)v4 + 16);
      *(_OWORD *)(v29 + 68) = *(_OWORD *)(v4 + 68);
      *((_WORD *)v29 + 44) = *((_WORD *)v4 + 44);
      v29[96] = v4[96];
      *((_DWORD *)v29 + 23) = *((_DWORD *)v4 + 23);
      v32 = *v27;
      v33 = (char **)(a1 + 8);
      v34 = (char **)(a1 + 8);
      if (*v27)
        break;
LABEL_66:
      *(_QWORD *)v29 = 0;
      *((_QWORD *)v29 + 1) = 0;
      *((_QWORD *)v29 + 2) = v33;
      *v34 = v29;
      v35 = **(_QWORD **)a1;
      if (v35)
        goto LABEL_67;
LABEL_68:
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), (uint64_t *)v29);
      ++*(_QWORD *)(a1 + 16);
      v36 = (char *)*((_QWORD *)v4 + 1);
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = *(char **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (char *)*((_QWORD *)v4 + 2);
          v23 = *(_QWORD *)v37 == (_QWORD)v4;
          v4 = v37;
        }
        while (!v23);
      }
      v4 = v37;
      if (v37 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v33 = (char **)v32;
        if (!rtc::SocketAddress::operator<((uint64_t)v30, v32 + 32))
          break;
        v32 = *v33;
        v34 = v33;
        if (!*v33)
          goto LABEL_66;
      }
      v32 = v33[1];
    }
    while (v32);
    v34 = v33 + 1;
    *(_QWORD *)v29 = 0;
    *((_QWORD *)v29 + 1) = 0;
    *((_QWORD *)v29 + 2) = v33;
    v33[1] = v29;
    v35 = **(_QWORD **)a1;
    if (!v35)
      goto LABEL_68;
LABEL_67:
    *(_QWORD *)a1 = v35;
    v29 = *v34;
    goto LABEL_68;
  }
}

void std::__tree<rtc::SocketAddress>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<rtc::SocketAddress>::destroy(a1, *(_QWORD *)a2);
    std::__tree<rtc::SocketAddress>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::StartGettingPorts(void)::$_1 &&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
}

std::string::value_type *absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::ClearGettingPorts(void)::$_1 &&>(std::string::value_type **a1)
{
  std::string::value_type *result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  result = *a1;
  v2 = *((_QWORD *)result + 78);
  v3 = *((_QWORD *)result + 79);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      if (!*(_DWORD *)(v2 + 20))
      {
        *(_DWORD *)(v2 + 20) = 2;
        v4 = 1;
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
  v5 = *((_QWORD *)result + 75);
  v6 = *((_QWORD *)result + 76);
  if (v5 != v6 && !v4)
  {
    v7 = v5 + 8;
    do
    {
      v8 = *(_DWORD *)(*(_QWORD *)(v7 - 8) + 64);
      v4 = v8 == 2;
      if (v7 == v6)
        break;
      v7 += 8;
    }
    while (v8 != 2);
  }
  if (v4)
    return (std::string::value_type *)cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone((const std::string::value_type **)result);
  return result;
}

_QWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, const void **a2, uint64_t a3)
{
  const void **v5;
  uint64_t **v7;
  _QWORD *v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v13, a2);
  if (*v5)
    return *v5;
  v7 = (uint64_t **)v5;
  v8 = operator new(0x38uLL);
  v9 = (std::string *)(v8 + 4);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[6] = *(_QWORD *)(a3 + 16);
  }
  v10 = v13;
  *v8 = 0;
  v8[1] = 0;
  v8[2] = v10;
  *v7 = v8;
  v11 = **(_QWORD **)a1;
  v12 = v8;
  if (v11)
  {
    *(_QWORD *)a1 = v11;
    v12 = *v7;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
  ++*(_QWORD *)(a1 + 16);
  return v8;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::ConfigReady(std::unique_ptr<cricket::PortConfiguration>)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  char v35;
  char v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v39)(uint64_t);

  v1 = *a1;
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
  {
    v3 = *(char **)(v1 + 584);
    v4 = *(_QWORD *)(v1 + 592);
    if ((unint64_t)v3 >= v4)
    {
      v6 = *(char **)(v1 + 576);
      v7 = (v3 - v6) >> 3;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 61)
        goto LABEL_35;
      v9 = v4 - (_QWORD)v6;
      if (v9 >> 2 > v8)
        v8 = v9 >> 2;
      v16 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8;
      v10 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v16)
        v10 = v8;
      if (v10)
      {
        if (v10 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v11 = 8 * v10;
        v12 = (char *)operator new(8 * v10);
        v13 = &v12[v11];
        v14 = &v12[8 * v7];
        *(_QWORD *)v14 = v2;
        v5 = v14 + 8;
        if (v3 == v6)
        {
          *(_QWORD *)(v1 + 576) = v14;
          *(_QWORD *)(v1 + 584) = v5;
          *(_QWORD *)(v1 + 592) = v13;
        }
        else
        {
          v15 = v3 - v6 - 8;
          if (v15 < 0x78)
            goto LABEL_39;
          v16 = &v3[-(v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v14 || &v12[v3 - v6 - (v15 & 0xFFFFFFFFFFFFFFF8) - 8] >= v3;
          if (!v16)
            goto LABEL_39;
          v17 = (v15 >> 3) + 1;
          v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
          v19 = &v3[-v18];
          v14 -= v18;
          v20 = &v12[8 * v7 - 16];
          v21 = v3 - 16;
          v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *((_OWORD *)v21 - 1);
            v23 = *(_OWORD *)v21;
            *((_OWORD *)v21 - 1) = 0uLL;
            *(_OWORD *)v21 = 0uLL;
            *((_OWORD *)v20 - 1) = v24;
            *(_OWORD *)v20 = v23;
            v20 -= 32;
            v21 -= 32;
            v22 -= 4;
          }
          while (v22);
          v3 = v19;
          if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_39:
            do
            {
              v25 = *((_QWORD *)v3 - 1);
              v3 -= 8;
              *(_QWORD *)v3 = 0;
              *((_QWORD *)v14 - 1) = v25;
              v14 -= 8;
            }
            while (v3 != v6);
          }
          v3 = *(char **)(v1 + 576);
          v26 = *(char **)(v1 + 584);
          *(_QWORD *)(v1 + 576) = v14;
          *(_QWORD *)(v1 + 584) = v5;
          *(_QWORD *)(v1 + 592) = v13;
          while (v26 != v3)
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            v27 = v28;
            *(_QWORD *)v26 = 0;
            if (v28)
              std::default_delete<cricket::PortConfiguration>::operator()[abi:sn180100](v27);
          }
        }
        if (v3)
          operator delete(v3);
        goto LABEL_30;
      }
    }
    else if (v3)
    {
      *(_QWORD *)v3 = v2;
      v5 = v3 + 8;
LABEL_30:
      *(_QWORD *)(v1 + 584) = v5;
      goto LABEL_31;
    }
    __break(1u);
LABEL_35:
    abort();
  }
LABEL_31:
  v29 = *(_QWORD *)(v1 + 552);
  v30 = *(unsigned int **)(v1 + 688);
  if (v30)
  {
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_DWORD *)(v1 + 684);
  v33 = operator new();
  *(_QWORD *)v33 = v30;
  *(_QWORD *)(v33 + 8) = v1;
  *(_DWORD *)(v33 + 16) = v32;
  *(_QWORD *)(v33 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v33 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::AllocatePorts(void)::$_1 &&>;
  v37[0] = v33;
  v38 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v39 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v29 + 8))(v29, v37, &v36, &v35);
  return v38(1, v37, v37);
}

void absl::internal_any_invocable::LocalManagerNontrivial<cricket::BasicPortAllocatorSession::ConfigReady(std::unique_ptr<cricket::PortConfiguration>)::$_1>(char a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;

  if ((a1 & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
    std::default_delete<cricket::PortConfiguration>::operator()[abi:sn180100](v4);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::AllocatePorts(void)::$_1 &&>(_DWORD *a1)
{
  cricket::BasicPortAllocatorSession *v1;

  v1 = *(cricket::BasicPortAllocatorSession **)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 684) == a1[2])
  {
    if (*((_BYTE *)v1 + 569))
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 64))(*(_QWORD *)a1) & 1) == 0)
        cricket::BasicPortAllocatorSession::DoAllocate(v1);
    }
    *((_BYTE *)v1 + 568) = 1;
  }
}

void std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1>,BOOL ()(rtc::Network const*)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1>,BOOL ()(rtc::Network const*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0AFF50;
  return result;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1>,BOOL ()(rtc::Network const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0AFF50;
}

BOOL std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_1>,BOOL ()(rtc::Network const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;

  v2 = *a2;
  v3 = *(_DWORD *)(*a2 + 184);
  if (v3 == 30)
    return (*(_QWORD *)(v2 + 188) & 0xC0FFLL) == 33022;
  if (v3 == 2)
    return *(__int16 *)(v2 + 188) == -343;
  return 0;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2>,BOOL ()(rtc::Network const*)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2>,BOOL ()(rtc::Network const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0AFF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2>,BOOL ()(rtc::Network const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0AFF98;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_2>,BOOL ()(rtc::Network const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 544);
  v3 = *(_DWORD *)(v2 + 172);
  v4 = *(_DWORD *)(v2 + 328);
  v5 = v4 | 8;
  if (v3 == 1)
    v4 |= 0xFFFFFFF7;
  if (v3 == 2)
    v4 = v5;
  return (*(_DWORD *)(*(_QWORD *)a2 + 272) & v4) != 0;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3>,BOOL ()(rtc::Network const*)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3>,BOOL ()(rtc::Network const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0AFFE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3>,BOOL ()(rtc::Network const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0AFFE0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3,std::allocator<cricket::BasicPortAllocatorSession::GetNetworks(void)::$_3>,BOOL ()(rtc::Network const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 152))(*(_QWORD *)(a1 + 16));
  return *(unsigned __int16 *)(a1 + 8) + 10 < rtc::Network::GetCost(v3, *(_QWORD *)(v4 + 304));
}

_QWORD *std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_24C0B0028;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::~__func(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *a1 = &off_24C0B0028;
  v1 = (unsigned int *)a1[2];
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  unsigned int *v3;
  uint64_t v4;
  unsigned int v5;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned int **)(a1 + 16);
  *result = &off_24C0B0028;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    do
      v5 = __ldxr(v3);
    while (__stxr(v5 + 1, v3));
  }
  return result;
}

uint64_t std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(unsigned int **)(result + 16);
  *a2 = &off_24C0B0028;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    do
      v4 = __ldxr(v2);
    while (__stxr(v4 + 1, v2));
  }
  return result;
}

unsigned int *std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  unsigned int *result;
  unsigned int v2;
  unsigned int v3;

  result = *(unsigned int **)(a1 + 16);
  if (result)
  {
    do
    {
      v2 = __ldaxr(result);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, result));
    if (!v3)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::destroy_deallocate(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete(__p);
}

const std::string::value_type *std::__function::__func<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1,std::allocator<cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_1>,void ()(void)>::operator()(const std::string::value_type *result)
{
  if (*(_BYTE *)(*((_QWORD *)result + 2) + 4))
    return cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone(*((const std::string::value_type ***)result
                                                                                   + 1));
  return result;
}

const std::string::value_type *absl::internal_any_invocable::LocalInvoker<false,void,cricket::BasicPortAllocatorSession::DoAllocate(BOOL)::$_2 &&>(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *(_BYTE *)(v1 + 570) = 1;
  return cricket::BasicPortAllocatorSession::MaybeSignalCandidatesAllocationDone((const std::string::value_type **)v1);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *,cricket::Candidate const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *,cricket::IceCandidateErrorEvent const&>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::BasicPortAllocatorSession,cricket::Port *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

void std::__function::__func<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1,std::allocator<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1>,void ()(cricket::PortInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1,std::allocator<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1>,void ()(cricket::PortInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B0070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1,std::allocator<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1>,void ()(cricket::PortInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B0070;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1,std::allocator<cricket::BasicPortAllocatorSession::AddAllocatedPort(cricket::Port *,cricket::AllocationSequence *)::$_1>,void ()(cricket::PortInterface *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  char v18;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(char **)(v2 + 624);
  v4 = *(char **)(v2 + 632);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = *a2;
    while (*(_QWORD *)&v3[v5] != v6)
    {
      v5 += 24;
      if (&v3[v5] == v4)
        return;
    }
    v7 = &v3[v5];
    v8 = &v3[v5 + 24];
    v9 = v4 - v8;
    if (v4 != v8)
      memmove(&v3[v5], v8, v4 - v8);
    *(_QWORD *)(v2 + 632) = &v7[v9];
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 176))(&__p, v6);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
      if (v18 < 0)
        operator delete(__p);
    }
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Init(void)::$_0 &,rtc::AsyncPacketSocket *,rtc::ReceivedPacket const&>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v5 = *a1;
  v6 = *(_QWORD **)(*a1 + 112);
  v7 = *(_QWORD **)(*a1 + 120);
  if (v6 == v7)
  {
    result = *(_QWORD *)(v5 + 104);
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 320))(result, a2, a3);
  }
  v8 = 0;
  do
  {
    v9 = *v6;
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 328))(*v6, *(_QWORD *)(a3 + 32)))
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 320))(v9, a2, a3);
      if ((result & 1) != 0)
        return result;
      v8 = 1;
    }
    ++v6;
  }
  while (v6 != v7);
  result = *(_QWORD *)(v5 + 104);
  if (result)
  {
    if ((v8 & 1) == 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 320))(result, a2, a3);
    v11 = *(_QWORD **)(result + 800);
    if (v11)
    {
      v12 = *(char **)(a3 + 32);
      v13 = result + 800;
      v14 = result + 800;
      do
      {
        result = rtc::SocketAddress::operator<((uint64_t)(v11 + 4), v12);
        v15 = v11 + 1;
        if (!(_DWORD)result)
        {
          v15 = v11;
          v14 = (uint64_t)v11;
        }
        v11 = (_QWORD *)*v15;
      }
      while (*v15);
      if (v14 != v13)
      {
        result = rtc::SocketAddress::operator<((uint64_t)v12, (char *)(v14 + 32));
        if ((result & 1) == 0)
        {
          result = *(_QWORD *)(v5 + 104);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 320))(result, a2, a3);
        }
      }
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Start(void)::$_0 &&>(uint64_t a1)
{
  return cricket::AllocationSequence::Process(*(_QWORD *)a1, *(_DWORD *)(a1 + 8));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::AllocationSequence::Process(int)::$_0 &&>(uint64_t a1)
{
  return cricket::AllocationSequence::Process(*(cricket::AllocationSequence **)a1, *(_DWORD *)(a1 + 8));
}

void std::__function::__func<cricket::AllocationSequence::CreateUDPPorts(void)::$_0,std::allocator<cricket::AllocationSequence::CreateUDPPorts(void)::$_0>,void ()(cricket::PortInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::AllocationSequence::CreateUDPPorts(void)::$_0,std::allocator<cricket::AllocationSequence::CreateUDPPorts(void)::$_0>,void ()(cricket::PortInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B00B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::AllocationSequence::CreateUDPPorts(void)::$_0,std::allocator<cricket::AllocationSequence::CreateUDPPorts(void)::$_0>,void ()(cricket::PortInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B00B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::AllocationSequence::CreateUDPPorts(void)::$_0,std::allocator<cricket::AllocationSequence::CreateUDPPorts(void)::$_0>,void ()(cricket::PortInterface *)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2[13] == *a2)
  {
    v2[13] = 0;
  }
  else
  {
    v4 = (char *)v2[14];
    v3 = (char *)v2[15];
    if (v4 != v3)
    {
      while (*(_QWORD *)v4 != *a2)
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = (char *)v2[15];
          break;
        }
      }
    }
    if (v4 == v3)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    }
    else
    {
      v5 = v3 - (v4 + 8);
      if (v3 != v4 + 8)
        memmove(v4, v4 + 8, v3 - (v4 + 8));
      v2[15] = &v4[v5];
    }
  }
}

void std::__function::__func<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0,std::allocator<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0>,void ()(cricket::PortInterface *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0,std::allocator<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0>,void ()(cricket::PortInterface *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B0100;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0,std::allocator<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0>,void ()(cricket::PortInterface *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B0100;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0,std::allocator<cricket::AllocationSequence::CreateTurnPort(cricket::RelayServerConfig const&,int)::$_0>,void ()(cricket::PortInterface *)>::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2[13] == *a2)
  {
    v2[13] = 0;
  }
  else
  {
    v4 = (char *)v2[14];
    v3 = (char *)v2[15];
    if (v4 != v3)
    {
      while (*(_QWORD *)v4 != *a2)
      {
        v4 += 8;
        if (v4 == v3)
        {
          v4 = (char *)v2[15];
          break;
        }
      }
    }
    if (v4 == v3)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/client/basic_port_allocator.cc");
    }
    else
    {
      v5 = v3 - (v4 + 8);
      if (v3 != v4 + 8)
        memmove(v4, v4 + 8, v3 - (v4 + 8));
      v2[15] = &v4[v5];
    }
  }
}

uint64_t std::set<rtc::SocketAddress>::insert[abi:sn180100]<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>(uint64_t result, char *a2, char *a3)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  char **v11;
  char **v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = (char *)(result + 8);
    do
    {
      v7 = *(char **)(v5 + 8);
      if (*(char **)v5 == v6)
      {
        v9 = v6;
      }
      else
      {
        v8 = v6;
        if (v7)
        {
          do
          {
            v9 = v7;
            v7 = (char *)*((_QWORD *)v7 + 1);
          }
          while (v7);
        }
        else
        {
          do
          {
            v9 = (char *)*((_QWORD *)v8 + 2);
            v10 = *(_QWORD *)v9 == (_QWORD)v8;
            v8 = v9;
          }
          while (v10);
        }
        result = rtc::SocketAddress::operator<((uint64_t)(v9 + 32), v4 + 32);
        v7 = *(char **)v6;
        if (!(_DWORD)result)
        {
          v11 = (char **)v6;
          v12 = (char **)v6;
          if (!v7)
            goto LABEL_23;
          v11 = (char **)v6;
          while (1)
          {
            while (1)
            {
              v12 = (char **)v7;
              v13 = (uint64_t)(v7 + 32);
              if (!rtc::SocketAddress::operator<((uint64_t)(v4 + 32), v7 + 32))
                break;
              v7 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_23;
            }
            result = rtc::SocketAddress::operator<(v13, v4 + 32);
            if (!(_DWORD)result)
              goto LABEL_20;
            v11 = v12 + 1;
            v7 = v12[1];
            if (!v7)
              goto LABEL_23;
          }
        }
      }
      v11 = (char **)v6;
      v12 = (char **)v6;
      if (!v7)
        goto LABEL_23;
      v11 = (char **)(v9 + 8);
      v12 = (char **)v9;
LABEL_20:
      if (*v11)
      {
        v14 = (char *)*((_QWORD *)v4 + 1);
        if (!v14)
          goto LABEL_32;
        goto LABEL_30;
      }
LABEL_23:
      v15 = (char *)operator new(0x68uLL);
      *((_QWORD *)v15 + 4) = 0;
      v16 = v15 + 32;
      *((_QWORD *)v15 + 5) = 0;
      *((_QWORD *)v15 + 6) = 0;
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 9) = 0;
      *((_QWORD *)v15 + 7) = &unk_24C0ACDA0;
      *((_DWORD *)v15 + 20) = 0;
      if (v15 != v4)
      {
        if (v4[55] < 0)
        {
          std::string::__assign_no_alias<true>(v16, *((char **)v4 + 4), *((_QWORD *)v4 + 5));
        }
        else
        {
          v17 = *((_OWORD *)v4 + 2);
          *((_QWORD *)v15 + 6) = *((_QWORD *)v4 + 6);
          *(_OWORD *)v16 = v17;
        }
      }
      *((_DWORD *)v15 + 16) = *((_DWORD *)v4 + 16);
      *(_OWORD *)(v15 + 68) = *(_OWORD *)(v4 + 68);
      *((_WORD *)v15 + 44) = *((_WORD *)v4 + 44);
      v15[96] = v4[96];
      *((_DWORD *)v15 + 23) = *((_DWORD *)v4 + 23);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v12;
      *v11 = v15;
      v18 = **(_QWORD **)v5;
      if (v18)
      {
        *(_QWORD *)v5 = v18;
        v15 = *v11;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v5 + 8), (uint64_t *)v15);
      ++*(_QWORD *)(v5 + 16);
      v14 = (char *)*((_QWORD *)v4 + 1);
      if (!v14)
      {
        do
        {
LABEL_32:
          v19 = (char *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v10);
        goto LABEL_3;
      }
      do
      {
LABEL_30:
        v19 = v14;
        v14 = *(char **)v14;
      }
      while (v14);
LABEL_3:
      v4 = v19;
    }
    while (v19 != a3);
  }
  return result;
}

uint64_t *std::__tree<rtc::SocketAddress>::__emplace_unique_key_args<rtc::SocketAddress,rtc::SocketAddress const&>(uint64_t **a1, char *__s1, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = (uint64_t)(v5 + 4);
        if (!rtc::SocketAddress::operator<((uint64_t)__s1, (char *)v5 + 32))
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (!rtc::SocketAddress::operator<(v9, __s1))
        break;
      v6 = v8 + 1;
      v5 = v8[1];
      if (!v5)
        goto LABEL_9;
    }
    if (*v6)
      return *v6;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_9:
  v10 = (char *)operator new(0x68uLL);
  *((_QWORD *)v10 + 4) = 0;
  v11 = v10 + 32;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 9) = 0;
  *((_QWORD *)v10 + 7) = &unk_24C0ACDA0;
  *((_DWORD *)v10 + 20) = 0;
  if (v10 + 32 != (char *)a3)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(v11, *(char **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a3;
      *((_QWORD *)v10 + 6) = *(_QWORD *)(a3 + 16);
    }
  }
  *((_DWORD *)v10 + 16) = *(_DWORD *)(a3 + 32);
  *(_OWORD *)(v10 + 68) = *(_OWORD *)(a3 + 36);
  *((_WORD *)v10 + 44) = *(_WORD *)(a3 + 56);
  v10[96] = *(_BYTE *)(a3 + 64);
  *((_DWORD *)v10 + 23) = *(_DWORD *)(a3 + 60);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = (uint64_t *)v10;
  v13 = (uint64_t *)**a1;
  v14 = (uint64_t *)v10;
  if (v13)
  {
    *a1 = v13;
    v14 = *v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t *)v10;
}

uint64_t rtc::BitBufferWriter::WriteBits(rtc::BitBufferWriter *this, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if (8 * (*((_QWORD *)this + 1) - v3) - v4 < a3)
    return 0;
  v6 = a2 << -(char)a3;
  v7 = (_BYTE *)(*(_QWORD *)this + v3);
  v8 = 8 - v4;
  if (8 - v4 >= a3)
    v9 = a3;
  else
    v9 = 8 - v4;
  *v7 = *v7 & ~((255 << (8 - v9)) >> v4) | (HIBYTE(v6) >> v4);
  v10 = a3 - v8;
  if (a3 <= v8)
  {
    v13 = *((_QWORD *)this + 2);
    v14 = *((_QWORD *)this + 3);
    if (8 * (*((_QWORD *)this + 1) - v13) - v14 < a3)
      return 0;
  }
  else
  {
    v11 = v6 << v8;
    v12 = v7 + 1;
    if (v10 >= 8)
    {
      do
      {
        *v12++ = HIBYTE(v11);
        v11 <<= 8;
        v10 -= 8;
      }
      while (v10 > 7);
    }
    if (v10)
      *v12 = *v12 & ~(-1 << (8 - v10)) | HIBYTE(v11);
    v13 = *((_QWORD *)this + 2);
    v14 = *((_QWORD *)this + 3);
    if (8 * (*((_QWORD *)this + 1) - v13) - v14 < a3)
      return 0;
  }
  v15 = v14 + a3;
  *((_QWORD *)this + 2) = v13 + (v15 >> 3);
  *((_QWORD *)this + 3) = v15 & 7;
  return 1;
}

uint64_t webrtc::BitrateAdjuster::Update(webrtc::BitrateAdjuster *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (rtc::g_clock)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v5 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v6 = v5 / 1000000;
  webrtc::RateStatistics::Update((webrtc::BitrateAdjuster *)((char *)this + 96), a2, (v5 / 1000000));
  webrtc::BitrateAdjuster::UpdateBitrate(this, v6);
  return pthread_mutex_unlock(v4);
}

void webrtc::BitrateAdjuster::UpdateBitrate(webrtc::BitrateAdjuster *this, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  float v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  float v11;
  float v13;
  unsigned int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = a2 - *((_DWORD *)this + 48);
  v3 = *((_DWORD *)this + 49) + 1;
  *((_DWORD *)this + 49) = v3;
  if (v2 >= 0x3E8 && v3 >= 0x1E)
  {
    v7 = (float)*((unsigned int *)this + 20);
    v8 = webrtc::RateStatistics::Rate((webrtc::BitrateAdjuster *)((char *)this + 96), a2);
    v9 = (uint64_t)v7;
    if (v10)
      v9 = v8;
    v11 = v7 - (float)v9;
    if (v7 < (float)v9 || v11 > (float)(v7 * 0.1))
    {
      v13 = (float)(v11 * 0.5) + v7;
      v14 = *((_DWORD *)this + 20);
      if (v13 < (float)(float)(*((float *)this + 18) * (float)v14))
        v13 = (float)(float)(*((float *)this + 18) * (float)*((unsigned int *)this + 20));
      if (v13 <= (float)(float)(*((float *)this + 19) * (float)v14))
        v15 = v13;
      else
        v15 = (float)(float)(*((float *)this + 19) * (float)v14);
      if (v15 != (float)*((unsigned int *)this + 21))
      {
        if (!rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>())
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/bitrate_adjuster.cc");
        *((_DWORD *)this + 21) = v15;
      }
    }
    *((_DWORD *)this + 48) = a2;
    *((_DWORD *)this + 49) = 0;
    *((_DWORD *)this + 22) = *((_DWORD *)this + 20);
  }
}

void webrtc::BitrateAdjuster::~BitrateAdjuster(void **this)
{
  pthread_mutex_t *v1;

  *this = &off_24C0B0148;
  v1 = (pthread_mutex_t *)(this + 1);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 12);
  pthread_mutex_destroy(v1);
}

{
  pthread_mutex_t *v1;

  *this = &off_24C0B0148;
  v1 = (pthread_mutex_t *)(this + 1);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 12);
  pthread_mutex_destroy(v1);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BitrateAllocator::~BitrateAllocator(webrtc::BitrateAllocator *this)
{
  uint64_t v2;
  void *v4;

  *(_QWORD *)this = &off_24C0B0168;
  v2 = atomic_load(&webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer);
  if (v2)
  {
    webrtc::metrics::HistogramAdd(v2, *((_DWORD *)this + 18));
  }
  else
  {
    while (!__ldaxr(&webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer))
    {
      if (!__stlxr(0, &webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
}

{
  uint64_t v2;
  void *v4;

  *(_QWORD *)this = &off_24C0B0168;
  v2 = atomic_load(&webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer);
  if (v2)
  {
    webrtc::metrics::HistogramAdd(v2, *((_DWORD *)this + 18));
  }
  else
  {
    while (!__ldaxr(&webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer))
    {
      if (!__stlxr(0, &webrtc::BitrateAllocator::~BitrateAllocator()::atomic_histogram_pointer))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 3) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BitrateAllocator::OnNetworkEstimateChanged(uint64_t a1, uint64_t a2)
{
  int32x2_t v4;
  unsigned int v5;
  __int32 v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  const char *v69;
  unint64_t v70;
  char *v71;
  const char *v72;
  const char **v73;
  _QWORD v74[6];
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;

  v4 = vmovn_s64(*(int64x2_t *)(a2 + 48));
  *(int32x2_t *)(a1 + 40) = v4;
  v5 = v4.i32[0];
  v6 = v4.i32[0];
  if (!v4.i32[0])
    v6 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v6;
  v7 = (int)(float)(*(float *)(a2 + 40) * 255.0);
  if (v7 >= 255)
    v7 = 255;
  *(_BYTE *)(a1 + 52) = v7 & ~(v7 >> 31);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  v11 = v10 - -v8 / 0x3E8uLL;
  if (v8 < 0)
    v12 = v11;
  else
    v12 = v9;
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = v13 / 0x3E8uLL;
  if (v13 % 0x3E8uLL > 0x1F3)
    ++v14;
  if (-v13 % 0x3E8uLL <= 0x1F4)
    v15 = 0;
  else
    v15 = -1;
  v16 = v15 - -v13 / 0x3E8uLL;
  if (v13 < 0)
    v17 = v16;
  else
    v17 = v14;
  *(_QWORD *)(a1 + 64) = v17;
  v18 = *(_QWORD *)a2;
  v19 = *(_QWORD *)a2 / 0x3E8uLL;
  if (*(_QWORD *)a2 % 0x3E8uLL > 0x1F3)
    ++v19;
  if (-v18 % 0x3E8uLL <= 0x1F4)
    v20 = 0;
  else
    v20 = -1;
  if (v18 < 0)
    v21 = v20 - -v18 / 0x3E8uLL;
  else
    v21 = v19;
  if (v21 > *(_QWORD *)(a1 + 80) + 5000)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc");
    *(_QWORD *)(a1 + 80) = v21;
    v5 = *(_DWORD *)(a1 + 40);
  }
  v30 = *(_QWORD *)(a1 + 16);
  v67 = *(_QWORD *)(a1 + 24);
  if (v30 != v67)
  {
    while (1)
    {
      v31 = v79;
      v32 = *(uint64_t **)v30;
      v33 = &v79;
      v34 = &v79;
      if (v79)
      {
        while (1)
        {
          while (1)
          {
            v34 = (uint64_t **)v31;
            v35 = v31[4];
            if ((unint64_t)v32 >= v35)
              break;
            v31 = *v34;
            v33 = v34;
            if (!*v34)
              goto LABEL_45;
          }
          if (v35 >= (unint64_t)v32)
            break;
          v31 = v34[1];
          if (!v31)
          {
            v33 = v34 + 1;
            goto LABEL_45;
          }
        }
      }
      else
      {
LABEL_45:
        v36 = (uint64_t *)v34;
        v34 = (uint64_t **)operator new(0x30uLL);
        v34[4] = v32;
        *((_DWORD *)v34 + 10) = 0;
        *v34 = 0;
        v34[1] = 0;
        v34[2] = v36;
        *v33 = (uint64_t *)v34;
        v37 = (uint64_t *)v34;
        if (*v78)
        {
          v78 = (_QWORD *)*v78;
          v37 = *v33;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v79, v37);
        ++v80;
        v32 = *(uint64_t **)v30;
      }
      v38 = *((unsigned int *)v34 + 10);
      v39 = v76;
      v40 = &v76;
      v41 = &v76;
      if (v76)
      {
        while (1)
        {
          while (1)
          {
            v41 = (uint64_t **)v39;
            v42 = v39[4];
            if ((unint64_t)v32 >= v42)
              break;
            v39 = *v41;
            v40 = v41;
            if (!*v41)
              goto LABEL_55;
          }
          if (v42 >= (unint64_t)v32)
            break;
          v39 = v41[1];
          if (!v39)
          {
            v40 = v41 + 1;
            goto LABEL_55;
          }
        }
      }
      else
      {
LABEL_55:
        v43 = (uint64_t *)v41;
        v41 = (uint64_t **)operator new(0x30uLL);
        v41[4] = v32;
        *((_DWORD *)v41 + 10) = 0;
        *v41 = 0;
        v41[1] = 0;
        v41[2] = v43;
        *v40 = (uint64_t *)v41;
        v44 = (uint64_t *)v41;
        if (*v75)
        {
          v75 = (_QWORD *)*v75;
          v44 = *v40;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v76, v44);
        ++v77;
        v32 = *(uint64_t **)v30;
      }
      v45 = *((unsigned int *)v41 + 10);
      LOBYTE(v29) = *(_BYTE *)(a1 + 52);
      v46 = 1000 * *(_QWORD *)(a1 + 56);
      v47 = 1000 * *(_QWORD *)(a1 + 64);
      v48 = *(_QWORD *)(a2 + 64);
      v74[0] = v38;
      v74[1] = v45;
      *(double *)&v74[2] = (double)*(unint64_t *)&v29 * 0.00390625;
      v74[3] = v46;
      v74[4] = v47;
      v74[5] = v48;
      v49 = (*(uint64_t (**)(uint64_t *, _QWORD *))*v32)(v32, v74);
      v50 = *(_QWORD *)(v30 + 48);
      if (!(_DWORD)v38 && v50 >= 1)
      {
        if (*(_DWORD *)(a1 + 40))
          ++*(_DWORD *)(a1 + 72);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          v69 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc";
          v70 = v66 & 0xFFFFFFFF00000000 | 0xD31;
          v71 = &v68;
          v72 = "Pausing observer ";
          v73 = &v69;
          v66 = v70;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v51, v52, v53, v54, v55, v56, v57, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc");
        }
        goto LABEL_37;
      }
      if ((_DWORD)v38 && !v50)
        break;
      if ((_DWORD)v38)
        goto LABEL_71;
LABEL_37:
      *(_QWORD *)(v30 + 48) = v38;
      v30 += 64;
      if (v30 == v67)
        goto LABEL_73;
    }
    if (*(_DWORD *)(a1 + 40))
      ++*(_DWORD *)(a1 + 72);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v69 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc";
      v70 = v65 & 0xFFFFFFFF00000000 | 0xD79;
      v71 = &v68;
      v72 = "Resuming observer ";
      v73 = &v69;
      v65 = v70;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)12,void const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc");
    }
LABEL_71:
    if (v49)
      v29 = (double)(v38 - v49) / (double)v38;
    else
      v29 = 1.0;
    *(double *)(v30 + 56) = v29;
    goto LABEL_37;
  }
LABEL_73:
  webrtc::BitrateAllocator::UpdateAllocationLimits((_QWORD *)a1);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v76);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v79);
}

void webrtc::`anonymous namespace'::AllocateBitrates(_QWORD **a1, int32x2_t **a2, unsigned int a3)
{
  int32x2_t *v4;
  int32x2_t *v5;
  unsigned int v6;
  unint64_t v7;
  __n128 v8;
  int32x2_t *v9;
  _QWORD *v10;
  int32x2_t v11;
  uint64_t **v12;
  _QWORD *i;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  uint64_t **v25;
  uint64_t v26;
  __int32 v27;
  uint64_t *v28;
  int32x2_t v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t *v35;
  int32x2_t *v36;
  int32x2_t *v37;
  int32x2_t v38;
  unsigned int v39;
  unsigned int v40;
  double v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int32x2_t v46;
  uint64_t **v47;
  uint64_t **v48;
  unint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  int32x2_t *v53;
  unsigned int v54;
  __int32 v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  double v59;
  _QWORD *v61;
  __int32 v62;
  int32x2_t v63;
  uint64_t **v64;
  _QWORD *j;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char v74;
  int v75;
  int32x2_t *v76;
  int32x2_t v77;
  unsigned int v78;
  unsigned int v79;
  double v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  int32x2_t v85;
  uint64_t **v86;
  uint64_t **v87;
  unint64_t v88;
  uint64_t *v89;
  _QWORD *v90;
  uint64_t *v91;
  __int32 v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t **v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t *v100;
  __int32 v101;
  __int32 v102;
  uint64_t *v103;
  uint64_t **k;
  uint64_t **v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  int32x2_t *v109;
  int32x2_t *v110;
  uint64_t v111;
  int32x2_t v112;
  uint64_t *v113;
  uint64_t **v114;
  uint64_t **v115;
  int32x2_t v116;
  unint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  uint64_t *v120;
  uint64_t v121;
  int v123;
  __int32 v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t **v127;
  uint64_t **v128;
  unint64_t v129;
  uint64_t *v130;
  _QWORD *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t **m;
  uint64_t **v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  int32x2_t *v139;
  int32x2_t *v140;
  __n128 *v141;
  __n128 *v142;
  __n128 *v143;
  double v144;
  __n128 *v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unsigned __int32 v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  char *v162;
  double v163;
  _DWORD *v164;
  int v165;
  uint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  double *v170;
  double v171;
  unint64_t v172;
  uint64_t *v173;
  unint64_t v174;
  unsigned __int32 v175;
  uint64_t **v177;
  uint64_t *v178;
  uint64_t v179;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    a1[2] = 0;
    a1[1] = 0;
    *a1 = a1 + 1;
    return;
  }
  v6 = a3;
  if (!a3)
  {
    a1[1] = 0;
    v10 = a1 + 1;
    a1[2] = 0;
    *a1 = a1 + 1;
    v11 = *v4;
    v12 = a1 + 1;
    for (i = a1 + 1; ; v12 = (uint64_t **)(i + 1))
    {
      do
      {
LABEL_14:
        v16 = i;
        i = operator new(0x30uLL);
        i[4] = v11;
        *((_DWORD *)i + 10) = 0;
        *i = 0;
        i[1] = 0;
        i[2] = v16;
        *v12 = i;
        v17 = (_QWORD *)**a1;
        v18 = i;
        if (v17)
        {
          *a1 = v17;
          v18 = *v12;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v18);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
LABEL_17:
        *((_DWORD *)i + 10) = 0;
        v4 += 8;
        if (v4 == v5)
          return;
        v14 = (_QWORD *)*v10;
        v11 = *v4;
        v12 = a1 + 1;
        i = a1 + 1;
      }
      while (!*v10);
      do
      {
        while (1)
        {
          i = v14;
          v15 = v14[4];
          if (*(_QWORD *)&v11 >= v15)
            break;
          v14 = (_QWORD *)*i;
          v12 = (uint64_t **)i;
          if (!*i)
            goto LABEL_14;
        }
        if (v15 >= *(_QWORD *)&v11)
          goto LABEL_17;
        v14 = (_QWORD *)i[1];
      }
      while (v14);
    }
  }
  v7 = (char *)v5 - (char *)v4 - 64;
  if (v7 < 0x40)
  {
    v8 = 0uLL;
    v9 = *a2;
    do
    {
LABEL_22:
      v8.n128_u64[0] = (unint64_t)vadd_s32(v9[1], (int32x2_t)v8.n128_u64[0]);
      v9 += 8;
    }
    while (v9 != v5);
    goto LABEL_23;
  }
  v19 = (v7 >> 6) + 1;
  v9 = &v4[8 * (v19 & 0x7FFFFFFFFFFFFFELL)];
  v8 = 0uLL;
  v20 = v4 + 9;
  v21 = v19 & 0x7FFFFFFFFFFFFFELL;
  v22 = 0;
  do
  {
    v23 = v20[-8];
    v24 = *v20;
    v20 += 16;
    v22 = vadd_s32(v23, v22);
    v8.n128_u64[0] = (unint64_t)vadd_s32(v24, (int32x2_t)v8.n128_u64[0]);
    v21 -= 2;
  }
  while (v21);
  v8.n128_u64[0] = (unint64_t)vadd_s32((int32x2_t)v8.n128_u64[0], v22);
  if (v19 != (v19 & 0x7FFFFFFFFFFFFFELL))
    goto LABEL_22;
LABEL_23:
  if (a3 >= v8.n128_u32[0])
  {
    v53 = *a2;
    do
    {
      v54 = v53[1].u32[0];
      if (*(_QWORD *)&v53[6] == -1)
        v55 = v53[1].i32[0];
      else
        v55 = (__int32)v53[6];
      v56 = v53[1].u32[0];
      if (!v55)
      {
        v57 = ((double)v54 * 0.1);
        if (v57 <= 0x4E20)
          v57 = 20000;
        v56 = v57 + v54;
      }
      v58 = v54 + (a3 - v8.n128_u32[0]) / ((unint64_t)((char *)v5 - (char *)v4) >> 6);
      v59 = *(double *)&v53[7];
      if (v59 < 1.0 && v59 > 0.0)
        v56 = ((double)v56 + (double)v56 * (1.0 - v59));
      if (v58 < v56)
        goto LABEL_24;
      v53 += 8;
    }
    while (v53 != v5);
    v61 = a1 + 1;
    if (v8.n128_u32[1] < a3)
    {
      *v61 = 0;
      a1[2] = 0;
      *a1 = v61;
      v62 = v4[1].i32[1];
      v63 = *v4;
      v64 = a1 + 1;
      for (j = a1 + 1; ; v64 = (uint64_t **)(j + 1))
      {
        do
        {
LABEL_96:
          v68 = j;
          j = operator new(0x30uLL);
          j[4] = v63;
          *((_DWORD *)j + 10) = 0;
          *j = 0;
          j[1] = 0;
          j[2] = v68;
          *v64 = j;
          v69 = (_QWORD *)**a1;
          v70 = j;
          if (v69)
          {
            *a1 = v69;
            v70 = *v64;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v70);
          a1[2] = (_QWORD *)((char *)a1[2] + 1);
LABEL_99:
          *((_DWORD *)j + 10) = v62;
          v6 -= v4[1].u32[1];
          v4 += 8;
          if (v4 == v5)
          {
            v71 = (uint64_t)*a2;
            v72 = (uint64_t)a2[1];
            v73 = v6;
            v74 = 1;
            v75 = 2;
            goto LABEL_199;
          }
          v66 = (_QWORD *)*v61;
          v62 = v4[1].i32[1];
          v63 = *v4;
          v64 = a1 + 1;
          j = a1 + 1;
        }
        while (!*v61);
        do
        {
          while (1)
          {
            j = v66;
            v67 = v66[4];
            if (*(_QWORD *)&v63 >= v67)
              break;
            v66 = (_QWORD *)*j;
            v64 = (uint64_t **)j;
            if (!*j)
              goto LABEL_96;
          }
          if (v67 >= *(_QWORD *)&v63)
            goto LABEL_99;
          v66 = (_QWORD *)j[1];
        }
        while (v66);
      }
    }
    v175 = a3 - v8.n128_u32[0];
    *v61 = 0;
    a1[2] = 0;
    *a1 = v61;
    v178 = 0;
    v179 = 0;
    v177 = &v178;
    do
    {
      v92 = v4[1].i32[0];
      v93 = (uint64_t *)*v61;
      v94 = a1 + 1;
      v95 = a1 + 1;
      v96 = (uint64_t *)*v4;
      if (*v61)
      {
        do
        {
          while (1)
          {
            v95 = (uint64_t **)v93;
            v97 = v93[4];
            if ((unint64_t)v96 >= v97)
              break;
            v93 = *v95;
            v94 = v95;
            if (!*v95)
              goto LABEL_143;
          }
          if (v97 >= (unint64_t)v96)
            goto LABEL_146;
          v93 = v95[1];
        }
        while (v93);
        v94 = v95 + 1;
      }
LABEL_143:
      v98 = (uint64_t *)v95;
      v95 = (uint64_t **)operator new(0x30uLL);
      v95[4] = v96;
      *((_DWORD *)v95 + 10) = 0;
      *v95 = 0;
      v95[1] = 0;
      v95[2] = v98;
      *v94 = (uint64_t *)v95;
      v99 = (_QWORD *)**a1;
      v100 = (uint64_t *)v95;
      if (v99)
      {
        *a1 = v99;
        v100 = *v94;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v100);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
      v96 = (uint64_t *)*v4;
LABEL_146:
      *((_DWORD *)v95 + 10) = v92;
      v101 = v4[1].i32[0];
      v102 = v4[1].i32[1];
      v103 = v178;
      for (k = &v178; ; v103 = *k)
      {
        v105 = k;
        if (!v103)
          break;
        while (1)
        {
          k = (uint64_t **)v103;
          v106 = v103[4];
          if ((unint64_t)v96 < v106)
            break;
          if (v106 >= (unint64_t)v96)
            goto LABEL_135;
          v103 = k[1];
          if (!v103)
          {
            v105 = k + 1;
            goto LABEL_153;
          }
        }
      }
LABEL_153:
      v107 = (uint64_t *)k;
      k = (uint64_t **)operator new(0x30uLL);
      k[4] = v96;
      *((_DWORD *)k + 10) = 0;
      *k = 0;
      k[1] = 0;
      k[2] = v107;
      *v105 = (uint64_t *)k;
      v108 = (uint64_t *)k;
      if (*v177)
      {
        v177 = (uint64_t **)*v177;
        v108 = *v105;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v178, v108);
      ++v179;
LABEL_135:
      *((_DWORD *)k + 10) = v102 - v101;
      v4 += 8;
    }
    while (v4 != v5);
    v109 = *a2;
    v110 = a2[1];
    if (*a2 == v110)
    {
      v111 = v175;
    }
    else
    {
      v111 = v175;
      do
      {
        v112 = v109[3];
        v113 = (uint64_t *)*v61;
        v114 = a1 + 1;
        v115 = a1 + 1;
        v116 = *v109;
        if (*v61)
        {
          do
          {
            while (1)
            {
              v115 = (uint64_t **)v113;
              v117 = v113[4];
              if (*(_QWORD *)&v116 >= v117)
                break;
              v113 = *v115;
              v114 = v115;
              if (!*v115)
                goto LABEL_167;
            }
            if (v117 >= *(_QWORD *)&v116)
              goto LABEL_170;
            v113 = v115[1];
          }
          while (v113);
          v114 = v115 + 1;
        }
LABEL_167:
        v118 = (uint64_t *)v115;
        v115 = (uint64_t **)operator new(0x30uLL);
        v115[4] = (uint64_t *)v116;
        *((_DWORD *)v115 + 10) = 0;
        *v115 = 0;
        v115[1] = 0;
        v115[2] = v118;
        *v114 = (uint64_t *)v115;
        v119 = (_QWORD *)**a1;
        v120 = (uint64_t *)v115;
        if (v119)
        {
          *a1 = v119;
          v120 = *v114;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v120);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
LABEL_170:
        v121 = *(_QWORD *)&v112 - *((int *)v115 + 10);
        if (v121 >= 1 && (_DWORD)v111 != 0)
        {
          v123 = v111;
          if (v121 >= (unint64_t)v111)
            v124 = v111;
          else
            v124 = v112.i32[0] - *((_DWORD *)v115 + 10);
          v125 = (uint64_t *)*v61;
          v126 = (uint64_t *)*v109;
          v127 = a1 + 1;
          v128 = a1 + 1;
          if (*v61)
          {
            do
            {
              while (1)
              {
                v128 = (uint64_t **)v125;
                v129 = v125[4];
                if ((unint64_t)v126 >= v129)
                  break;
                v125 = *v128;
                v127 = v128;
                if (!*v128)
                  goto LABEL_184;
              }
              if (v129 >= (unint64_t)v126)
                goto LABEL_187;
              v125 = v128[1];
            }
            while (v125);
            v127 = v128 + 1;
          }
LABEL_184:
          v130 = (uint64_t *)v128;
          v128 = (uint64_t **)operator new(0x30uLL);
          v128[4] = v126;
          *((_DWORD *)v128 + 10) = 0;
          *v128 = 0;
          v128[1] = 0;
          v128[2] = v130;
          *v127 = (uint64_t *)v128;
          v131 = (_QWORD *)**a1;
          v132 = (uint64_t *)v128;
          if (v131)
          {
            *a1 = v131;
            v132 = *v127;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v132);
          a1[2] = (_QWORD *)((char *)a1[2] + 1);
          v126 = (uint64_t *)*v109;
LABEL_187:
          *((_DWORD *)v128 + 10) += v124;
          v133 = v178;
          for (m = &v178; ; v133 = *m)
          {
            v135 = m;
            if (!v133)
              break;
            while (1)
            {
              m = (uint64_t **)v133;
              v136 = v133[4];
              if ((unint64_t)v126 < v136)
                break;
              if (v136 >= (unint64_t)v126)
                goto LABEL_158;
              v133 = m[1];
              if (!v133)
              {
                v135 = m + 1;
                goto LABEL_194;
              }
            }
          }
LABEL_194:
          v137 = (uint64_t *)m;
          m = (uint64_t **)operator new(0x30uLL);
          m[4] = v126;
          *((_DWORD *)m + 10) = 0;
          *m = 0;
          m[1] = 0;
          m[2] = v137;
          *v135 = (uint64_t *)m;
          v138 = (uint64_t *)m;
          if (*v177)
          {
            v177 = (uint64_t **)*v177;
            v138 = *v135;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v178, v138);
          ++v179;
LABEL_158:
          *((_DWORD *)m + 10) -= v124;
          v111 = (v123 - v124);
        }
        v109 += 8;
      }
      while (v109 != v110);
    }
    if ((_DWORD)v111)
    {
      v139 = *a2;
      v140 = a2[1];
      if (*a2 != v140)
      {
        v141 = 0;
        v142 = 0;
        v143 = 0;
        v144 = 0.0;
        while (1)
        {
          while (1)
          {
            v146 = v178;
            if (!v178)
              goto LABEL_257;
            v147 = v111;
            v148 = (unint64_t)*v139;
            while (1)
            {
              while (1)
              {
                v149 = v146[4];
                if (v148 >= v149)
                  break;
                v146 = (uint64_t *)*v146;
                if (!v146)
                  goto LABEL_257;
              }
              if (v149 >= v148)
                break;
              v146 = (uint64_t *)v146[1];
              if (!v146)
                goto LABEL_257;
            }
            v150 = *((_DWORD *)v146 + 10);
            v151 = (unint64_t)v139[5];
            if (v142 >= v143)
              break;
            if (!v142)
              goto LABEL_262;
            v142->n128_u64[0] = v148;
            v142->n128_u32[2] = v150;
            v142[1].n128_u64[0] = v151;
            v142 = (__n128 *)((char *)v142 + 24);
            v111 = v147;
            v8.n128_u64[0] = (unint64_t)v139[5];
            v144 = v144 + v8.n128_f64[0];
            v139 += 8;
            if (v139 == v140)
              goto LABEL_231;
          }
          v152 = 0xAAAAAAAAAAAAAAABLL * (((char *)v142 - (char *)v141) >> 3) + 1;
          if (v152 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_263;
          if (0x5555555555555556 * (((char *)v143 - (char *)v141) >> 3) > v152)
            v152 = 0x5555555555555556 * (((char *)v143 - (char *)v141) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v143 - (char *)v141) >> 3) >= 0x555555555555555)
            v152 = 0xAAAAAAAAAAAAAAALL;
          if (!v152)
          {
LABEL_262:
            __break(1u);
LABEL_263:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v152 > 0xAAAAAAAAAAAAAAALL)
            std::__throw_bad_array_new_length[abi:sn180100]();
          v153 = 24 * v152;
          v154 = (char *)operator new(24 * v152);
          v155 = &v154[8 * (((char *)v142 - (char *)v141) >> 3)];
          *(_QWORD *)v155 = v148;
          *((_DWORD *)v155 + 2) = v150;
          *((_QWORD *)v155 + 2) = v151;
          if (v142 != v141)
            break;
          v145 = (__n128 *)&v154[8 * (((char *)v142 - (char *)v141) >> 3)];
          v111 = v147;
          v143 = (__n128 *)&v154[v153];
          v142 = (__n128 *)(v155 + 24);
          if (v141)
            goto LABEL_205;
LABEL_206:
          v141 = v145;
          v8.n128_u64[0] = (unint64_t)v139[5];
          v144 = v144 + v8.n128_f64[0];
          v139 += 8;
          if (v139 == v140)
            goto LABEL_231;
        }
        v156 = &v154[8 * (((char *)v142 - (char *)v141) >> 3)];
        v111 = v147;
        do
        {
          v8 = *(__n128 *)((char *)v142 - 24);
          v145 = (__n128 *)(v156 - 24);
          *((_QWORD *)v156 - 1) = v142[-1].n128_u64[1];
          *(__n128 *)(v156 - 24) = v8;
          v142 = (__n128 *)((char *)v142 - 24);
          v156 -= 24;
        }
        while (v142 != v141);
        v143 = (__n128 *)&v154[v153];
        v142 = (__n128 *)(v155 + 24);
        if (!v141)
          goto LABEL_206;
LABEL_205:
        operator delete(v141);
        goto LABEL_206;
      }
      v142 = 0;
      v141 = 0;
      v144 = 0.0;
LABEL_231:
      v157 = ((char *)v142 - (char *)v141) / 24;
      v158 = 126 - 2 * __clz(v157);
      if (v142 == v141)
        v159 = 0;
      else
        v159 = v158;
      if (v142 == v141)
      {
        v160 = 0;
      }
      else
      {
        v160 = 0;
        if (v157 <= 1)
          v161 = 1;
        else
          v161 = ((char *)v142 - (char *)v141) / 24;
        while (1)
        {
          v162 = (char *)v141 + 24 * v160;
          v163 = *((double *)v162 + 2);
          v164 = v162 + 8;
          v165 = *((_DWORD *)v162 + 2);
          if (v163 / v144 * (double)v111 < (double)v165)
            break;
          v166 = (uint64_t *)*v61;
          if (!*v61)
            goto LABEL_257;
          v167 = *(_QWORD *)v162;
          while (1)
          {
            while (1)
            {
              v168 = v166[4];
              if (v167 >= v168)
                break;
              v166 = (uint64_t *)*v166;
              if (!v166)
                goto LABEL_257;
            }
            if (v168 >= v167)
              break;
            v166 = (uint64_t *)v166[1];
            if (!v166)
              goto LABEL_257;
          }
          *((_DWORD *)v166 + 10) += v165;
          LODWORD(v111) = v111 - *v164;
          v144 = v144 - v163;
          if (++v160 == v161)
            goto LABEL_259;
        }
      }
      if (v160 < v157)
      {
        v169 = (uint64_t *)*v61;
        if (!*v61)
LABEL_257:
          abort();
        do
        {
          v170 = &v141->n128_f64[3 * v160];
          v171 = v170[2] / v144;
          v172 = *(_QWORD *)v170;
          v173 = v169;
          while (1)
          {
            while (1)
            {
              v174 = v173[4];
              if (v172 >= v174)
                break;
              v173 = (uint64_t *)*v173;
              if (!v173)
                goto LABEL_257;
            }
            if (v174 >= v172)
              break;
            v173 = (uint64_t *)v173[1];
            if (!v173)
              goto LABEL_257;
          }
          *((_DWORD *)v173 + 10) = (int)((double)*((int *)v173 + 10) + v171 * (double)v111);
          ++v160;
        }
        while (v160 != v157);
      }
      if (v141)
LABEL_259:
        operator delete(v141);
    }
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v178);
    return;
  }
LABEL_24:
  a1[1] = 0;
  v25 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  v26 = a3;
  do
  {
    if (v4[4].i8[0])
      v27 = v4[1].i32[0];
    else
      v27 = 0;
    v28 = *v25;
    v29 = *v4;
    v30 = a1 + 1;
    v31 = a1 + 1;
    if (*v25)
    {
      while (1)
      {
        while (1)
        {
          v31 = (uint64_t **)v28;
          v32 = v28[4];
          if (*(_QWORD *)&v29 >= v32)
            break;
          v28 = *v31;
          v30 = v31;
          if (!*v31)
            goto LABEL_37;
        }
        if (v32 >= *(_QWORD *)&v29)
          break;
        v28 = v31[1];
        if (!v28)
        {
          v30 = v31 + 1;
          goto LABEL_37;
        }
      }
    }
    else
    {
LABEL_37:
      v33 = (uint64_t *)v31;
      v31 = (uint64_t **)operator new(0x30uLL);
      v31[4] = (uint64_t *)v29;
      *((_DWORD *)v31 + 10) = 0;
      *v31 = 0;
      v31[1] = 0;
      v31[2] = v33;
      *v30 = (uint64_t *)v31;
      v34 = (_QWORD *)**a1;
      v35 = (uint64_t *)v31;
      if (v34)
      {
        *a1 = v34;
        v35 = *v30;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v35);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
    }
    *((_DWORD *)v31 + 10) = v27;
    v26 -= v27;
    v4 += 8;
  }
  while (v4 != v5);
  if (v26 <= 0)
    return;
  v36 = *a2;
  v37 = a2[1];
  if (*a2 == v37)
  {
LABEL_132:
    v71 = (uint64_t)v36;
    goto LABEL_198;
  }
  do
  {
    if (v36[4].i8[0])
      goto LABEL_44;
    v38 = v36[6];
    if (*(_QWORD *)&v38 == -1)
    {
      if (!v36[1].i32[0])
        goto LABEL_44;
    }
    else if (!v38.i32[0])
    {
      goto LABEL_44;
    }
    v39 = v36[1].u32[0];
    if (*(_QWORD *)&v38 == -1)
      v38.i32[0] = v36[1].i32[0];
    if (!v38.i32[0])
    {
      v40 = ((double)v39 * 0.1);
      if (v40 <= 0x4E20)
        v40 = 20000;
      v39 += v40;
    }
    v41 = *(double *)&v36[7];
    if (v41 >= 1.0 || v41 <= 0.0)
      v43 = v39;
    else
      v43 = ((double)v39 + (double)v39 * (1.0 - v41));
    v44 = v26 - v43;
    if (v26 >= v43)
    {
      v45 = *v25;
      v46 = *v36;
      v47 = a1 + 1;
      v48 = a1 + 1;
      if (*v25)
      {
        while (1)
        {
          while (1)
          {
            v48 = (uint64_t **)v45;
            v49 = v45[4];
            if (*(_QWORD *)&v46 >= v49)
              break;
            v45 = *v48;
            v47 = v48;
            if (!*v48)
              goto LABEL_70;
          }
          if (v49 >= *(_QWORD *)&v46)
            break;
          v45 = v48[1];
          if (!v45)
          {
            v47 = v48 + 1;
            goto LABEL_70;
          }
        }
      }
      else
      {
LABEL_70:
        v50 = (uint64_t *)v48;
        v48 = (uint64_t **)operator new(0x30uLL);
        v48[4] = (uint64_t *)v46;
        *((_DWORD *)v48 + 10) = 0;
        *v48 = 0;
        v48[1] = 0;
        v48[2] = v50;
        *v47 = (uint64_t *)v48;
        v51 = (_QWORD *)**a1;
        v52 = (uint64_t *)v48;
        if (v51)
        {
          *a1 = v51;
          v52 = *v47;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v52);
        a1[2] = (_QWORD *)((char *)a1[2] + 1);
      }
      *((_DWORD *)v48 + 10) = v43;
      v26 = v44;
    }
LABEL_44:
    v36 += 8;
  }
  while (v36 != v37);
  if (v26 < 1)
    return;
  v36 = *a2;
  v76 = a2[1];
  if (*a2 == v76)
    goto LABEL_132;
  while (2)
  {
    v77 = v36[6];
    if (*(_QWORD *)&v77 == -1)
    {
      if (!v36[1].i32[0])
      {
LABEL_108:
        v78 = v36[1].u32[0];
        if (*(_QWORD *)&v77 == -1)
          v77.i32[0] = v36[1].i32[0];
        if (!v77.i32[0])
        {
          v79 = ((double)v78 * 0.1);
          if (v79 <= 0x4E20)
            v79 = 20000;
          v78 += v79;
        }
        v80 = *(double *)&v36[7];
        if (v80 >= 1.0 || v80 <= 0.0)
          v82 = v78;
        else
          v82 = ((double)v78 + (double)v78 * (1.0 - v80));
        v83 = v26 - v82;
        if (v26 >= v82)
        {
          v84 = *v25;
          v85 = *v36;
          v86 = a1 + 1;
          v87 = a1 + 1;
          if (*v25)
          {
            while (1)
            {
              while (1)
              {
                v87 = (uint64_t **)v84;
                v88 = v84[4];
                if (*(_QWORD *)&v85 >= v88)
                  break;
                v84 = *v87;
                v86 = v87;
                if (!*v87)
                  goto LABEL_128;
              }
              if (v88 >= *(_QWORD *)&v85)
                break;
              v84 = v87[1];
              if (!v84)
              {
                v86 = v87 + 1;
                goto LABEL_128;
              }
            }
          }
          else
          {
LABEL_128:
            v89 = (uint64_t *)v87;
            v87 = (uint64_t **)operator new(0x30uLL);
            v87[4] = (uint64_t *)v85;
            *((_DWORD *)v87 + 10) = 0;
            *v87 = 0;
            v87[1] = 0;
            v87[2] = v89;
            *v86 = (uint64_t *)v87;
            v90 = (_QWORD *)**a1;
            v91 = (uint64_t *)v87;
            if (v90)
            {
              *a1 = v90;
              v91 = *v86;
            }
            std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v91);
            a1[2] = (_QWORD *)((char *)a1[2] + 1);
          }
          *((_DWORD *)v87 + 10) = v82;
          v26 = v83;
        }
      }
    }
    else if (!v77.i32[0])
    {
      goto LABEL_108;
    }
    v36 += 8;
    if (v36 != v76)
      continue;
    break;
  }
  if (v26 >= 1)
  {
    v71 = (uint64_t)*a2;
    v36 = a2[1];
LABEL_198:
    v72 = (uint64_t)v36;
    v73 = v26;
    v74 = 0;
    v75 = 1;
LABEL_199:
  }
}

_QWORD *webrtc::BitrateAllocator::UpdateAllocationLimits(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  double v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (***v22)(_QWORD, _QWORD *);
  _QWORD v23[3];
  void *__p;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  const char *v31;
  uint64_t v32;
  char *v33;

  v1 = (uint64_t)this;
  v2 = this[2];
  v3 = this[3];
  if (v2 == v3)
  {
    v6 = 0;
    v5 = 0;
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v9 = *(_DWORD *)(v2 + 16);
      if (*(_BYTE *)(v2 + 32))
      {
        if (v4 == 0x7FFFFFFFFFFFFFFFLL)
        {
          v4 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else if (v4 != 0x8000000000000000)
        {
          v4 += *(unsigned int *)(v2 + 8);
        }
      }
      else if (!*(_QWORD *)(v2 + 48))
      {
        v10 = *(_DWORD *)(v2 + 8);
        v11 = ((double)v10 * 0.1);
        if (v11 <= 0x4E20)
          v11 = 20000;
        v12 = v11 + v10;
        v13 = *(double *)(v2 + 56);
        if (v13 < 1.0 && v13 > 0.0)
          v12 = ((double)v12 + (double)v12 * (1.0 - v13));
        if (v12 > v9)
          v9 = v12;
      }
      v7 = v6 + v9;
      if (v6 == 0x8000000000000000)
        v7 = 0x8000000000000000;
      if (v6 != 0x7FFFFFFFFFFFFFFFLL)
        v6 = v7;
      v8 = v5 + *(unsigned int *)(v2 + 12);
      if (v5 == 0x8000000000000000)
        v8 = 0x8000000000000000;
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
        v5 = v8;
      v2 += 64;
    }
    while (v2 != v3);
  }
  if (v4 != this[11] || v5 != this[12] || v6 != this[13])
  {
    this[11] = v4;
    this[12] = v5;
    this[13] = v6;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    {
LABEL_36:
      v22 = *(uint64_t (****)(_QWORD, _QWORD *))(v1 + 8);
      v23[0] = v4;
      v23[1] = v5;
      v23[2] = v6;
      return (_QWORD *)(**v22)(v22, v23);
    }
    v31 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/bitrate_allocator.cc";
    v32 = 4177;
    v33 = &v30;
    webrtc::ToString(v4, (char *)&v28);
    webrtc::ToString(v6, (char *)&v26);
    webrtc::ToString(v5, (char *)&__p);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v15, v16, v17, v18, v19, v20, v21, (uint64_t)v31);
    if (v25 < 0)
    {
      operator delete(__p);
      if ((v27 & 0x80000000) == 0)
      {
LABEL_35:
        if ((v29 & 0x80000000) == 0)
          goto LABEL_36;
LABEL_40:
        operator delete(v28);
        goto LABEL_36;
      }
    }
    else if ((v27 & 0x80000000) == 0)
    {
      goto LABEL_35;
    }
    operator delete(v26);
    if ((v29 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_40;
  }
  return this;
}

_QWORD *webrtc::BitrateAllocator::AddObserver(uint64_t a1, void (***a2)(_QWORD, _QWORD *), __int128 *a3)
{
  int32x2_t **v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  double v29;
  uint64_t v30;
  uint64_t i;
  char *v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t **v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v7 = *(char **)(a1 + 16);
  v8 = *(char **)(a1 + 24);
  v6 = (int32x2_t **)(a1 + 16);
  v9 = v7;
  if (v7 != v8)
  {
    v9 = *(char **)(a1 + 16);
    while (*(void (****)(_QWORD, _QWORD *))v9 != a2)
    {
      v9 += 64;
      if (v9 == v8)
        goto LABEL_9;
    }
  }
  if (v9 == v8)
  {
LABEL_9:
    v15 = a3[1];
    v56 = *a3;
    v57 = v15;
    v58 = *((_QWORD *)a3 + 4);
    v16 = *(_QWORD *)(a1 + 32);
    if ((unint64_t)v8 < v16)
    {
      if (v8)
      {
        *(_QWORD *)v8 = a2;
        *(_OWORD *)(v8 + 8) = v56;
        *(_QWORD *)&v10 = v57;
        *(_OWORD *)(v8 + 24) = v57;
        *((_QWORD *)v8 + 5) = v58;
        *((_QWORD *)v8 + 6) = -1;
        *((_QWORD *)v8 + 7) = 0x3FF0000000000000;
        v17 = v8 + 64;
        goto LABEL_23;
      }
      goto LABEL_56;
    }
    v18 = (v8 - v7) >> 6;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 58)
      goto LABEL_57;
    v20 = v16 - (_QWORD)v7;
    if (v20 >> 5 > v19)
      v19 = v20 >> 5;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0)
      v19 = 0x3FFFFFFFFFFFFFFLL;
    if (!v19)
    {
LABEL_56:
      __break(1u);
LABEL_57:
      abort();
    }
    if (v19 >> 58)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v21 = v19 << 6;
    v22 = (char *)operator new(v19 << 6);
    v23 = &v22[64 * v18];
    v10 = *a3;
    v24 = a3[1];
    *(_OWORD *)(v23 + 8) = *a3;
    v25 = &v22[v21];
    *(_QWORD *)v23 = a2;
    *(_OWORD *)(v23 + 24) = v24;
    *((_QWORD *)v23 + 5) = *((_QWORD *)a3 + 4);
    *((_QWORD *)v23 + 6) = -1;
    *((_QWORD *)v23 + 7) = 0x3FF0000000000000;
    v17 = v23 + 64;
    if (v7 == v8)
    {
      *(_QWORD *)(a1 + 16) = v23;
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = v25;
      if (v7)
LABEL_22:
        operator delete(v7);
    }
    else
    {
      do
      {
        v10 = *((_OWORD *)v8 - 4);
        v26 = *((_OWORD *)v8 - 3);
        v27 = *((_OWORD *)v8 - 1);
        v28 = v23 - 64;
        *((_OWORD *)v23 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v23 - 1) = v27;
        *((_OWORD *)v23 - 4) = v10;
        *((_OWORD *)v23 - 3) = v26;
        v8 -= 64;
        v23 -= 64;
      }
      while (v8 != v7);
      *(_QWORD *)(a1 + 16) = v28;
      *(_QWORD *)(a1 + 24) = v17;
      *(_QWORD *)(a1 + 32) = v25;
      if (v7)
        goto LABEL_22;
    }
LABEL_23:
    *(_QWORD *)(a1 + 24) = v17;
    v12 = *(_DWORD *)(a1 + 40);
    if (!v12)
      goto LABEL_8;
    goto LABEL_24;
  }
  v10 = *a3;
  v11 = a3[1];
  *((_QWORD *)v9 + 5) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(v9 + 24) = v11;
  *(_OWORD *)(v9 + 8) = v10;
  v12 = *(_DWORD *)(a1 + 40);
  if (!v12)
  {
LABEL_8:
    LOBYTE(v10) = *(_BYTE *)(a1 + 52);
    v13 = *(_QWORD *)(a1 + 64);
    v14 = 1000 * *(_QWORD *)(a1 + 56);
    v51[0] = 0;
    v51[1] = 0;
    *(double *)&v51[2] = (double)(unint64_t)v10 * 0.00390625;
    v51[3] = v14;
    v51[4] = 1000 * v13;
    v51[5] = 0;
    (**a2)(a2, v51);
    return webrtc::BitrateAllocator::UpdateAllocationLimits((_QWORD *)a1);
  }
LABEL_24:
  v30 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); v30 != i; v30 += 64)
  {
    v32 = (char *)*((_QWORD *)&v56 + 1);
    v33 = *(uint64_t **)v30;
    v34 = (uint64_t **)&v56 + 1;
    v35 = (uint64_t **)&v56 + 1;
    if (*((_QWORD *)&v56 + 1))
    {
      while (1)
      {
        while (1)
        {
          v35 = (uint64_t **)v32;
          v36 = *((_QWORD *)v32 + 4);
          if ((unint64_t)v33 >= v36)
            break;
          v32 = (char *)*v35;
          v34 = v35;
          if (!*v35)
            goto LABEL_36;
        }
        if (v36 >= (unint64_t)v33)
          break;
        v32 = (char *)v35[1];
        if (!v32)
        {
          v34 = v35 + 1;
          goto LABEL_36;
        }
      }
    }
    else
    {
LABEL_36:
      v37 = (char *)v35;
      v35 = (uint64_t **)operator new(0x30uLL);
      v35[4] = v33;
      *((_DWORD *)v35 + 10) = 0;
      *v35 = 0;
      v35[1] = 0;
      v35[2] = (uint64_t *)v37;
      *v34 = (uint64_t *)v35;
      v38 = (uint64_t *)v35;
      if (*(_QWORD *)v56)
      {
        *(_QWORD *)&v56 = *(_QWORD *)v56;
        v38 = *v34;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v56 + 1), v38);
      *(_QWORD *)&v57 = v57 + 1;
      v33 = *(uint64_t **)v30;
    }
    v39 = *((unsigned int *)v35 + 10);
    v40 = v54;
    v41 = &v54;
    v42 = &v54;
    if (v54)
    {
      while (1)
      {
        while (1)
        {
          v42 = (uint64_t **)v40;
          v43 = v40[4];
          if ((unint64_t)v33 >= v43)
            break;
          v40 = *v42;
          v41 = v42;
          if (!*v42)
            goto LABEL_46;
        }
        if (v43 >= (unint64_t)v33)
          break;
        v40 = v42[1];
        if (!v40)
        {
          v41 = v42 + 1;
          goto LABEL_46;
        }
      }
    }
    else
    {
LABEL_46:
      v44 = (uint64_t *)v42;
      v42 = (uint64_t **)operator new(0x30uLL);
      v42[4] = v33;
      *((_DWORD *)v42 + 10) = 0;
      *v42 = 0;
      v42[1] = 0;
      v42[2] = v44;
      *v41 = (uint64_t *)v42;
      v45 = (uint64_t *)v42;
      if (*v53)
      {
        v53 = (_QWORD *)*v53;
        v45 = *v41;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v54, v45);
      ++v55;
      v33 = *(uint64_t **)v30;
    }
    v46 = *((unsigned int *)v42 + 10);
    LOBYTE(v29) = *(_BYTE *)(a1 + 52);
    v47 = 1000 * *(_QWORD *)(a1 + 56);
    v48 = 1000 * *(_QWORD *)(a1 + 64);
    v52[0] = v39;
    v52[1] = v46;
    *(double *)&v52[2] = (double)*(unint64_t *)&v29 * 0.00390625;
    v52[3] = v47;
    v52[4] = v48;
    v52[5] = 0;
    v49 = (*(uint64_t (**)(uint64_t *, _QWORD *))*v33)(v33, v52);
    *(_QWORD *)(v30 + 48) = v39;
    if ((_DWORD)v39)
    {
      if (v49)
        v29 = (double)(v39 - v49) / (double)v39;
      else
        v29 = 1.0;
      *(double *)(v30 + 56) = v29;
    }
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v54);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)&v56 + 1));
  return webrtc::BitrateAllocator::UpdateAllocationLimits((_QWORD *)a1);
}

_QWORD *webrtc::BitrateAllocator::RemoveObserver(webrtc::BitrateAllocator *this, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;

  v4 = (char *)*((_QWORD *)this + 2);
  v3 = (char *)*((_QWORD *)this + 3);
  if (v4 == v3)
    return webrtc::BitrateAllocator::UpdateAllocationLimits(this);
  v5 = 0;
  while (*(_QWORD *)&v4[v5] != a2)
  {
    v5 += 64;
    if (&v4[v5] == v3)
      return webrtc::BitrateAllocator::UpdateAllocationLimits(this);
  }
  v6 = &v4[v5];
  v7 = &v4[v5 + 64];
  v8 = v3 - v7;
  if (v3 != v7)
    memmove(&v4[v5], v7, v3 - v7);
  *((_QWORD *)this + 3) = &v6[v8];
  return webrtc::BitrateAllocator::UpdateAllocationLimits(this);
}

uint64_t webrtc::BitrateAllocator::GetStartBitrate(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;

  v2 = *(char **)(a1 + 16);
  v3 = *(char **)(a1 + 24);
  v4 = v2;
  if (v2 != v3)
  {
    while (*(_QWORD *)v4 != a2)
    {
      v4 += 64;
      if (v4 == v3)
        return *(_DWORD *)(a1 + 48) / (((unint64_t)(v3 - v2) >> 6) + 1);
    }
  }
  if (v4 == v3)
    return *(_DWORD *)(a1 + 48) / (((unint64_t)(v3 - v2) >> 6) + 1);
  v5 = *((_QWORD *)v4 + 6);
  if (v5 == -1)
    return *(_DWORD *)(a1 + 48) / ((unint64_t)(v3 - v2) >> 6);
  else
    return v5;
}

void webrtc::`anonymous namespace'::DistributeBitrateEvenly(uint64_t a1, uint64_t a2, unsigned int a3, char a4, int a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  BOOL v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;

  v45 = 0;
  v46 = 0;
  v44 = &v45;
  if (a1 != a2)
  {
    v10 = a1;
    if ((a4 & 1) != 0)
    {
      while (1)
      {
        v11 = *(_DWORD *)(v10 + 12);
        v12 = (uint64_t *)operator new(0x30uLL);
        v13 = v12;
        *((_DWORD *)v12 + 8) = v11;
        v12[5] = v10;
        v14 = v45;
        v15 = &v45;
        v16 = &v45;
        if (v45)
        {
          do
          {
            while (1)
            {
              v15 = (uint64_t **)v14;
              if (v11 >= *((_DWORD *)v14 + 8))
                break;
              v14 = (uint64_t *)*v14;
              v16 = v15;
              if (!*v15)
                goto LABEL_6;
            }
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
          v16 = v15 + 1;
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v15;
          v15[1] = v12;
          v17 = *v44;
          if (!*v44)
            goto LABEL_4;
        }
        else
        {
LABEL_6:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v15;
          *v16 = v12;
          v17 = *v44;
          if (!*v44)
            goto LABEL_4;
        }
        v44 = (uint64_t **)v17;
        v13 = *v16;
LABEL_4:
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v45, v13);
        ++v46;
        v10 += 64;
        if (v10 == a2)
          goto LABEL_33;
      }
    }
    while (1)
    {
      v18 = *(uint64_t **)(a6 + 8);
      if (!v18)
        goto LABEL_59;
      v19 = *(_QWORD *)v10;
      while (1)
      {
        while (1)
        {
          v20 = v18[4];
          if (v19 >= v20)
            break;
          v18 = (uint64_t *)*v18;
          if (!v18)
            goto LABEL_59;
        }
        if (v20 >= v19)
          break;
        v18 = (uint64_t *)v18[1];
        if (!v18)
          goto LABEL_59;
      }
      if (*((_DWORD *)v18 + 10))
        break;
LABEL_15:
      v10 += 64;
      if (v10 == a2)
        goto LABEL_33;
    }
    v21 = *(_DWORD *)(v10 + 12);
    v22 = (uint64_t *)operator new(0x30uLL);
    v23 = v22;
    *((_DWORD *)v22 + 8) = v21;
    v22[5] = v10;
    v24 = v45;
    v25 = &v45;
    v26 = &v45;
    if (v45)
    {
      do
      {
        while (1)
        {
          v25 = (uint64_t **)v24;
          if (v21 >= *((_DWORD *)v24 + 8))
            break;
          v24 = (uint64_t *)*v24;
          v26 = v25;
          if (!*v25)
            goto LABEL_25;
        }
        v24 = (uint64_t *)v24[1];
      }
      while (v24);
      v26 = v25 + 1;
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v25;
      v25[1] = v22;
      v27 = *v44;
      if (!*v44)
        goto LABEL_14;
    }
    else
    {
LABEL_25:
      *v22 = 0;
      v22[1] = 0;
      v22[2] = (uint64_t)v25;
      *v26 = v22;
      v27 = *v44;
      if (!*v44)
        goto LABEL_14;
    }
    v44 = (uint64_t **)v27;
    v23 = *v26;
LABEL_14:
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v45, v23);
    ++v46;
    goto LABEL_15;
  }
LABEL_33:
  v28 = v44;
  if (v44 != &v45)
  {
    while (1)
    {
      v29 = *(uint64_t **)(a6 + 8);
      if (!v29)
        break;
      v30 = v46;
      v31 = *v28[5];
      v32 = *(uint64_t **)(a6 + 8);
      v33 = a3 / v46;
      while (1)
      {
        while (1)
        {
          v34 = v32[4];
          if (v31 >= v34)
            break;
          v32 = (uint64_t *)*v32;
          if (!v32)
            goto LABEL_59;
        }
        if (v34 >= v31)
          break;
        v32 = (uint64_t *)v32[1];
        if (!v32)
          goto LABEL_59;
      }
      v35 = *((_DWORD *)v32 + 10) + v33;
      v36 = a3 - v33;
      v37 = *((_DWORD *)v28 + 8) * a5;
      if (v35 >= v37)
      {
        v38 = v35 - v37;
      }
      else
      {
        v37 = v35;
        v38 = 0;
      }
      a3 = v36 + v38;
      while (1)
      {
        while (1)
        {
          v39 = v29[4];
          if (v31 >= v39)
            break;
          v29 = (uint64_t *)*v29;
          if (!v29)
            goto LABEL_59;
        }
        if (v39 >= v31)
          break;
        v29 = (uint64_t *)v29[1];
        if (!v29)
          goto LABEL_59;
      }
      *((_DWORD *)v29 + 10) = v37;
      v40 = v28[1];
      v41 = v28;
      if (v40)
      {
        do
        {
          v42 = (uint64_t **)v40;
          v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          v42 = (uint64_t **)v41[2];
          v43 = *v42 == (uint64_t *)v41;
          v41 = v42;
        }
        while (!v43);
      }
      if (v44 == v28)
        v44 = v42;
      v46 = v30 - 1;
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v45, (uint64_t *)v28);
      operator delete(v28);
      v28 = v42;
      if (v42 == &v45)
        goto LABEL_34;
    }
LABEL_59:
    abort();
  }
LABEL_34:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v45);
}

void std::__introsort<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::$_0 &,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::PriorityRateObserverConfig *,false>(uint64_t a1, __n128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __n128 *v9;
  __n128 *v10;
  __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  double v17;
  double v18;
  __n128 v19;
  double v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 *v26;
  unint64_t v27;
  __n128 *v28;
  double v29;
  double v30;
  __n128 v31;
  unint64_t v32;
  unint64_t v33;
  __n128 v34;
  __n128 v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 *v39;
  double v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  __n128 v44;
  __n128 *v45;
  unint64_t v46;
  __n128 *v47;
  double v48;
  double v49;
  __n128 v50;
  unint64_t v51;
  unint64_t v52;
  __n128 v53;
  __n128 v54;
  unint64_t v55;
  uint64_t v56;
  __n128 v57;
  unint64_t v58;
  uint64_t v59;
  __n128 v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  __n128 *v68;
  __n128 *v69;
  double v70;
  __n128 *v71;
  double v72;
  __n128 *v73;
  __n128 v74;
  __n128 *v75;
  double v76;
  unint64_t v77;
  double v78;
  __int128 v79;
  BOOL v80;
  __n128 v81;
  uint64_t v82;
  int v83;
  __n128 *v84;
  double v85;
  double v86;
  __n128 *v87;
  __n128 *v88;
  double v89;
  __n128 v90;
  __n128 *v91;
  double v92;
  unint64_t v93;
  double v94;
  __int128 v95;
  __int128 v96;
  double v97;
  double v98;
  __n128 v99;
  __n128 v100;
  __n128 *v101;
  __n128 *v102;
  __n128 *v103;
  __n128 v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  __n128 v108;
  uint64_t v109;
  __n128 v110;
  BOOL v112;
  uint64_t v113;
  _QWORD *n128_u64;
  uint64_t v115;
  __n128 *v116;
  int v117;
  double v118;
  double v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int64_t v124;
  int64_t v125;
  int64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  double v131;
  double v132;
  uint64_t v133;
  int v134;
  unint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  int64_t v139;
  uint64_t v141;
  __n128 *v142;
  __n128 v143;
  __n128 *v144;
  uint64_t v145;
  int64_t v146;
  __n128 v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  double v152;
  double v153;
  unint64_t v154;
  unsigned __int32 v155;
  __n128 *v156;
  __n128 v157;
  __n128 v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  int v164;
  double v165;
  double v166;
  unint64_t v167;
  int v168;
  uint64_t v169;
  __n128 *v170;
  uint64_t *v172;
  double v173;
  unint64_t v174;
  unint64_t v175;
  __n128 v176;
  __n128 v177;
  __n128 v178;
  __n128 v179;
  __n128 v180;
  __n128 v181;
  __n128 v182;
  __n128 v183;
  __n128 v184;
  __n128 v185;
  __n128 v186;
  __n128 v187;
  __n128 v188;
  __n128 v189;
  __n128 v190;
  __n128 v191;
  __n128 v192;
  __n128 v193;
  __n128 v194;
  __n128 v195;
  __n128 v196;
  __n128 v197;
  __n128 v198;
  __n128 v199;
  __n128 v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;

LABEL_1:
  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(v12 + 8) / *(double *)(v12 + 16))
        {
          v220 = *(_QWORD *)(v12 + 16);
          v195 = *(__n128 *)v12;
          v96 = *(__int128 *)((char *)&a2[-2] + 8);
          *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
          *(_OWORD *)v12 = v96;
          a2[-1].n128_u64[1] = v220;
          *(__n128 *)((char *)a2 - 24) = v195;
        }
        return;
      case 3:
        v39 = (__n128 *)(v12 + 24);
        v97 = (double)*(int *)(v12 + 32) / *(double *)(v12 + 40);
        v98 = (double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1];
        if (v97 < (double)*(int *)(v12 + 8) / *(double *)(v12 + 16))
        {
          if (v98 >= v97)
            goto LABEL_177;
          v221 = *(_QWORD *)(v12 + 16);
          v196 = *(__n128 *)v12;
          v99 = *v9;
          *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
          *(__n128 *)v12 = v99;
          v100 = v196;
          a2[-1].n128_u64[1] = v221;
          goto LABEL_179;
        }
        if (v98 < v97)
        {
          v158 = *v39;
          v159 = *(_QWORD *)(v12 + 40);
          v160 = a2[-1].n128_u64[1];
          *v39 = *v9;
          *(_QWORD *)(v12 + 40) = v160;
          a2[-1].n128_u64[1] = v159;
          *v9 = v158;
          if ((double)*(int *)(v12 + 32) / *(double *)(v12 + 40) < (double)*(int *)(v12 + 8) / *(double *)(v12 + 16))
          {
            v224 = *(_QWORD *)(v12 + 16);
            v199 = *(__n128 *)v12;
            *(__n128 *)v12 = *v39;
            *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
            *v39 = v199;
            *(_QWORD *)(v12 + 40) = v224;
          }
        }
        return;
      case 4:
        return;
      case 5:
        v101 = (__n128 *)(v12 + 24);
        v102 = (__n128 *)(v12 + 48);
        v103 = (__n128 *)(v12 + 72);
        if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(v12 + 80) / *(double *)(v12 + 88))
        {
          v104 = *v103;
          v105 = *(_QWORD *)(v12 + 88);
          v106 = a2[-1].n128_u64[1];
          *v103 = *(__n128 *)((char *)a2 - 24);
          *(_QWORD *)(v12 + 88) = v106;
          a2[-1].n128_u64[1] = v105;
          *(__n128 *)((char *)a2 - 24) = v104;
          if ((double)*(int *)(v12 + 80) / *(double *)(v12 + 88) < (double)*(int *)(v12 + 56) / *(double *)(v12 + 64))
          {
            v107 = *(_QWORD *)(v12 + 64);
            v108 = *v102;
            *v102 = *v103;
            *(_QWORD *)(v12 + 64) = *(_QWORD *)(v12 + 88);
            *v103 = v108;
            *(_QWORD *)(v12 + 88) = v107;
            if ((double)*(int *)(v12 + 56) / *(double *)(v12 + 64) < (double)*(int *)(v12 + 32) / *(double *)(v12 + 40))
            {
              v109 = *(_QWORD *)(v12 + 40);
              v110 = *v101;
              *v101 = *v102;
              *(_QWORD *)(v12 + 40) = *(_QWORD *)(v12 + 64);
              *v102 = v110;
              *(_QWORD *)(v12 + 64) = v109;
              if ((double)*(int *)(v12 + 32) / *(double *)(v12 + 40) < (double)*(int *)(v12 + 8)
                                                                      / *(double *)(v12 + 16))
              {
                v222 = *(_QWORD *)(v12 + 16);
                v197 = *(__n128 *)v12;
                *(__n128 *)v12 = *v101;
                *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 40);
                *v101 = v197;
                *(_QWORD *)(v12 + 40) = v222;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v124 = (unint64_t)(v14 - 2) >> 1;
              v125 = v124;
              do
              {
                v126 = v125;
                if (v124 >= v125)
                {
                  v127 = (2 * v125) | 1;
                  v128 = v12 + 24 * v127;
                  if (2 * v126 + 2 < v14
                    && (double)*(int *)(v128 + 8) / *(double *)(v128 + 16) < (double)*(int *)(v128 + 32)
                                                                           / *(double *)(v128 + 40))
                  {
                    v128 += 24;
                    v127 = 2 * v126 + 2;
                  }
                  v129 = v12 + 24 * v126;
                  v130 = *(_DWORD *)(v129 + 8);
                  v131 = *(double *)(v129 + 16);
                  v132 = (double)v130 / v131;
                  if ((double)*(int *)(v128 + 8) / *(double *)(v128 + 16) >= v132)
                  {
                    v133 = *(_QWORD *)v129;
                    v134 = *(_DWORD *)(v129 + 12);
                    do
                    {
                      v135 = v129;
                      v129 = v128;
                      v136 = *(_OWORD *)v128;
                      *(_QWORD *)(v135 + 16) = *(_QWORD *)(v128 + 16);
                      *(_OWORD *)v135 = v136;
                      if (v124 < v127)
                        break;
                      v137 = 2 * v127;
                      v127 = (2 * v127) | 1;
                      v128 = v12 + 24 * v127;
                      v138 = v137 + 2;
                      if (v138 < v14
                        && (double)*(int *)(v128 + 8) / *(double *)(v128 + 16) < (double)*(int *)(v128 + 32)
                                                                               / *(double *)(v128 + 40))
                      {
                        v128 += 24;
                        v127 = v138;
                      }
                    }
                    while ((double)*(int *)(v128 + 8) / *(double *)(v128 + 16) >= v132);
                    *(_QWORD *)v129 = v133;
                    *(_DWORD *)(v129 + 8) = v130;
                    *(_DWORD *)(v129 + 12) = v134;
                    *(double *)(v129 + 16) = v131;
                  }
                }
                v125 = v126 - 1;
              }
              while (v126);
              v139 = v13 / 0x18uLL;
              do
              {
                v141 = 0;
                v223 = *(_QWORD *)(v12 + 16);
                v198 = *(__n128 *)v12;
                v142 = (__n128 *)v12;
                do
                {
                  v144 = v142;
                  v142 = (__n128 *)((char *)v142 + 24 * v141 + 24);
                  v145 = 2 * v141;
                  v141 = (2 * v141) | 1;
                  v146 = v145 + 2;
                  if (v146 < v139
                    && (double)v142->n128_i32[2] / v142[1].n128_f64[0] < (double)v142[2].n128_i32[0]
                                                                       / v142[2].n128_f64[1])
                  {
                    v142 = (__n128 *)((char *)v142 + 24);
                    v141 = v146;
                  }
                  v143 = *v142;
                  v144[1].n128_u64[0] = v142[1].n128_u64[0];
                  *v144 = v143;
                }
                while (v141 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if (v142 == a2)
                {
                  v142[1].n128_u64[0] = v223;
                  *v142 = v198;
                }
                else
                {
                  v147 = *a2;
                  v142[1].n128_u64[0] = a2[1].n128_u64[0];
                  *v142 = v147;
                  a2[1].n128_u64[0] = v223;
                  *a2 = v198;
                  v148 = (uint64_t)&v142[1].n128_i64[1] - v12;
                  if (v148 >= 25)
                  {
                    v149 = (v148 / 0x18uLL - 2) >> 1;
                    v150 = v12 + 24 * v149;
                    v151 = v142->n128_i32[2];
                    v152 = v142[1].n128_f64[0];
                    v153 = (double)v151 / v152;
                    if ((double)*(int *)(v150 + 8) / *(double *)(v150 + 16) < v153)
                    {
                      v154 = v142->n128_u64[0];
                      v155 = v142->n128_u32[3];
                      do
                      {
                        v156 = v142;
                        v142 = (__n128 *)v150;
                        v157 = *(__n128 *)v150;
                        v156[1].n128_u64[0] = *(_QWORD *)(v150 + 16);
                        *v156 = v157;
                        if (!v149)
                          break;
                        v149 = (v149 - 1) >> 1;
                        v150 = v12 + 24 * v149;
                      }
                      while ((double)*(int *)(v150 + 8) / *(double *)(v150 + 16) < v153);
                      v142->n128_u64[0] = v154;
                      v142->n128_u32[2] = v151;
                      v142->n128_u32[3] = v155;
                      v142[1].n128_f64[0] = v152;
                    }
                  }
                }
              }
              while (v139-- > 2);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = (double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = (double)*(int *)(v12 + 8) / *(double *)(v12 + 16);
            if (v20 >= (double)v16->n128_i32[2] / v16[1].n128_f64[0])
            {
              if (v17 < v20)
              {
                v205 = *(_QWORD *)(v12 + 16);
                v180 = *(__n128 *)v12;
                a5 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = a5;
                a5.n128_u64[1] = v180.n128_u64[1];
                a2[-1].n128_u64[1] = v205;
                *v9 = v180;
                if ((double)*(int *)(v12 + 8) / *(double *)(v12 + 16) < (double)v16->n128_i32[2] / v16[1].n128_f64[0])
                {
                  v206 = v16[1].n128_u64[0];
                  v181 = *v16;
                  a5 = *(__n128 *)v12;
                  v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                  *v16 = a5;
                  a5.n128_u64[1] = v181.n128_u64[1];
                  *(_QWORD *)(v12 + 16) = v206;
                  *(__n128 *)v12 = v181;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v209 = v16[1].n128_u64[0];
                v184 = *v16;
                a5 = *(__n128 *)v12;
                v16[1].n128_u64[0] = *(_QWORD *)(v12 + 16);
                *v16 = a5;
                a5.n128_u64[1] = v184.n128_u64[1];
                *(_QWORD *)(v12 + 16) = v209;
                *(__n128 *)v12 = v184;
                if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] >= (double)*(int *)(v12 + 8)
                                                                      / *(double *)(v12 + 16))
                  goto LABEL_31;
                v202 = *(_QWORD *)(v12 + 16);
                v177 = *(__n128 *)v12;
                v38 = *v9;
                *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
                *(__n128 *)v12 = v38;
              }
              else
              {
                v202 = v16[1].n128_u64[0];
                v177 = *v16;
                v21 = *v9;
                v16[1].n128_u64[0] = a2[-1].n128_u64[1];
                *v16 = v21;
              }
              a5.n128_u64[1] = v177.n128_u64[1];
              a2[-1].n128_u64[1] = v202;
              *v9 = v177;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v39 = (__n128 *)*(unsigned int *)(v12 + 8);
            a5.n128_u64[0] = *(_QWORD *)(v12 + 16);
            v40 = (double)(int)v39 / a5.n128_f64[0];
            if ((double)*(int *)(v12 - 16) / *(double *)(v12 - 8) < v40)
              goto LABEL_56;
            v82 = *(_QWORD *)v12;
            v83 = *(_DWORD *)(v12 + 12);
            v84 = (__n128 *)(v12 + 24);
            if (v40 >= (double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1])
            {
              do
              {
                v12 = (unint64_t)v84;
                if (v84 >= a2)
                  break;
                v86 = (double)v84->n128_i32[2] / v84[1].n128_f64[0];
                v84 = (__n128 *)((char *)v84 + 24);
              }
              while (v40 >= v86);
            }
            else
            {
              do
              {
                if (v84 == a2)
                  goto LABEL_176;
                v85 = (double)v84->n128_i32[2] / v84[1].n128_f64[0];
                v84 = (__n128 *)((char *)v84 + 24);
              }
              while (v40 >= v85);
              v12 = (unint64_t)&v84[-2].n128_u64[1];
            }
            v87 = a2;
            if (v12 < (unint64_t)a2)
            {
              v88 = a2;
              while (v88 != (__n128 *)a1)
              {
                v87 = (__n128 *)((char *)v88 - 24);
                v89 = (double)v88[-1].n128_i32[0] / v88[-1].n128_f64[1];
                v88 = (__n128 *)((char *)v88 - 24);
                if (v40 >= v89)
                  goto LABEL_93;
              }
              goto LABEL_176;
            }
LABEL_93:
            if (v12 < (unint64_t)v87)
            {
              do
              {
                v219 = *(_QWORD *)(v12 + 16);
                v194 = *(__n128 *)v12;
                v90 = *v87;
                *(_QWORD *)(v12 + 16) = v87[1].n128_u64[0];
                *(__n128 *)v12 = v90;
                v87[1].n128_u64[0] = v219;
                *v87 = v194;
                v91 = (__n128 *)(v12 + 24);
                do
                {
                  if (v91 == a2)
                    goto LABEL_176;
                  v92 = (double)v91->n128_i32[2] / v91[1].n128_f64[0];
                  v91 = (__n128 *)((char *)v91 + 24);
                }
                while (v40 >= v92);
                v12 = (unint64_t)&v91[-2].n128_u64[1];
                do
                {
                  if (v87 == (__n128 *)a1)
                    goto LABEL_176;
                  v93 = (unint64_t)&v87[-2].n128_u64[1];
                  v94 = (double)v87[-1].n128_i32[0] / v87[-1].n128_f64[1];
                  v87 = (__n128 *)((char *)v87 - 24);
                }
                while (v40 < v94);
                v87 = (__n128 *)v93;
              }
              while (v12 < v93);
            }
            if (v12 - 24 != a1)
            {
              v95 = *(_OWORD *)(v12 - 24);
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
              *(_OWORD *)a1 = v95;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 24) = v82;
            *(_DWORD *)(v12 - 16) = (_DWORD)v39;
            *(_DWORD *)(v12 - 12) = v83;
            *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
            continue;
          }
          v18 = (double)v16->n128_i32[2] / v16[1].n128_f64[0];
          if (v18 >= (double)*(int *)(v12 + 8) / *(double *)(v12 + 16))
          {
            if (v17 < v18)
            {
              v203 = v16[1].n128_u64[0];
              v178 = *v16;
              v22 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v22;
              a2[-1].n128_u64[1] = v203;
              *v9 = v178;
              if ((double)v16->n128_i32[2] / v16[1].n128_f64[0] < (double)*(int *)(v12 + 8) / *(double *)(v12 + 16))
              {
                v204 = *(_QWORD *)(v12 + 16);
                v179 = *(__n128 *)v12;
                v23 = *v16;
                *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u64[0] = v204;
                *v16 = v179;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v207 = *(_QWORD *)(v12 + 16);
              v182 = *(__n128 *)v12;
              v24 = *v16;
              *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
              *(__n128 *)v12 = v24;
              v16[1].n128_u64[0] = v207;
              *v16 = v182;
              if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] >= (double)v16->n128_i32[2] / v16[1].n128_f64[0])
                goto LABEL_22;
              v201 = v16[1].n128_u64[0];
              v176 = *v16;
              v25 = *v9;
              v16[1].n128_u64[0] = a2[-1].n128_u64[1];
              *v16 = v25;
            }
            else
            {
              v201 = *(_QWORD *)(v12 + 16);
              v176 = *(__n128 *)v12;
              v19 = *v9;
              *(_QWORD *)(v12 + 16) = a2[-1].n128_u64[1];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u64[1] = v201;
            *v9 = v176;
          }
LABEL_22:
          v26 = (__n128 *)(v12 + 24);
          v27 = v12 + 24 * v15;
          v28 = (__n128 *)(v27 - 24);
          v29 = (double)*(int *)(v27 - 16) / *(double *)(v27 - 8);
          v30 = (double)a2[-3].n128_i32[2] / a2[-2].n128_f64[0];
          if (v29 >= (double)*(int *)(v12 + 32) / *(double *)(v12 + 40))
          {
            if (v30 < v29)
            {
              v208 = *(_QWORD *)(v27 - 8);
              v183 = *v28;
              v34 = *v10;
              *(_QWORD *)(v27 - 8) = a2[-2].n128_u64[0];
              *v28 = v34;
              a2[-2].n128_u64[0] = v208;
              *v10 = v183;
              if ((double)*(int *)(v27 - 16) / *(double *)(v27 - 8) < (double)*(int *)(v12 + 32)
                                                                     / *(double *)(v12 + 40))
              {
                v35 = *v26;
                v36 = *(_QWORD *)(v12 + 40);
                v37 = v28[1].n128_i64[0];
                *v26 = *v28;
                *(_QWORD *)(v12 + 40) = v37;
                v28[1].n128_u64[0] = v36;
                *v28 = v35;
              }
            }
          }
          else
          {
            if (v30 >= v29)
            {
              v41 = *v26;
              v42 = *(_QWORD *)(v12 + 40);
              v43 = v28[1].n128_i64[0];
              *v26 = *v28;
              *(_QWORD *)(v12 + 40) = v43;
              v28[1].n128_u64[0] = v42;
              *v28 = v41;
              if ((double)a2[-3].n128_i32[2] / a2[-2].n128_f64[0] >= (double)v28->n128_i32[2] / v28[1].n128_f64[0])
                goto LABEL_36;
              v210 = v28[1].n128_u64[0];
              v185 = *v28;
              v44 = *v10;
              v28[1].n128_u64[0] = a2[-2].n128_u64[0];
              *v28 = v44;
              v31 = v185;
              a2[-2].n128_u64[0] = v210;
            }
            else
            {
              v31 = *v26;
              v32 = *(_QWORD *)(v12 + 40);
              v33 = a2[-2].n128_u64[0];
              *v26 = *v10;
              *(_QWORD *)(v12 + 40) = v33;
              a2[-2].n128_u64[0] = v32;
            }
            *v10 = v31;
          }
LABEL_36:
          v45 = (__n128 *)(v12 + 48);
          v46 = v12 + 24 * v15;
          v47 = (__n128 *)(v46 + 24);
          v48 = (double)*(int *)(v46 + 32) / *(double *)(v46 + 40);
          v49 = (double)a2[-4].n128_i32[0] / a2[-4].n128_f64[1];
          if (v48 >= (double)*(int *)(v12 + 56) / *(double *)(v12 + 64))
          {
            if (v49 < v48)
            {
              v211 = *(_QWORD *)(v46 + 40);
              v186 = *v47;
              v53 = *(__n128 *)v11;
              *(_QWORD *)(v46 + 40) = a2[-4].n128_u64[1];
              *v47 = v53;
              a2[-4].n128_u64[1] = v211;
              *(__n128 *)v11 = v186;
              if ((double)*(int *)(v46 + 32) / *(double *)(v46 + 40) < (double)*(int *)(v12 + 56)
                                                                      / *(double *)(v12 + 64))
              {
                v54 = *v45;
                v55 = *(_QWORD *)(v12 + 64);
                v56 = v47[1].n128_i64[0];
                *v45 = *v47;
                *(_QWORD *)(v12 + 64) = v56;
                v47[1].n128_u64[0] = v55;
                *v47 = v54;
              }
            }
          }
          else
          {
            if (v49 >= v48)
            {
              v57 = *v45;
              v58 = *(_QWORD *)(v12 + 64);
              v59 = v47[1].n128_i64[0];
              *v45 = *v47;
              *(_QWORD *)(v12 + 64) = v59;
              v47[1].n128_u64[0] = v58;
              *v47 = v57;
              if ((double)a2[-4].n128_i32[0] / a2[-4].n128_f64[1] >= (double)v47->n128_i32[2] / v47[1].n128_f64[0])
                goto LABEL_45;
              v212 = v47[1].n128_u64[0];
              v187 = *v47;
              v60 = *(__n128 *)v11;
              v47[1].n128_u64[0] = a2[-4].n128_u64[1];
              *v47 = v60;
              v50 = v187;
              a2[-4].n128_u64[1] = v212;
            }
            else
            {
              v50 = *v45;
              v51 = *(_QWORD *)(v12 + 64);
              v52 = a2[-4].n128_u64[1];
              *v45 = *(__n128 *)v11;
              *(_QWORD *)(v12 + 64) = v52;
              a2[-4].n128_u64[1] = v51;
            }
            *(__n128 *)v11 = v50;
          }
LABEL_45:
          v61 = (double)v16->n128_i32[2] / v16[1].n128_f64[0];
          v62 = (double)v47->n128_i32[2] / v47[1].n128_f64[0];
          if (v61 >= (double)v28->n128_i32[2] / v28[1].n128_f64[0])
          {
            if (v62 < v61)
            {
              v214 = v16[1].n128_u64[0];
              v189 = *v16;
              *v16 = *v47;
              v16[1].n128_u64[0] = v47[1].n128_u64[0];
              v47[1].n128_u64[0] = v214;
              *v47 = v189;
              if ((double)v16->n128_i32[2] / v16[1].n128_f64[0] < (double)v28->n128_i32[2] / v28[1].n128_f64[0])
              {
                v215 = v28[1].n128_u64[0];
                v190 = *v28;
                *v28 = *v16;
                v28[1].n128_u64[0] = v16[1].n128_u64[0];
                v16[1].n128_u64[0] = v215;
                *v16 = v190;
              }
            }
          }
          else
          {
            if (v62 >= v61)
            {
              v216 = v28[1].n128_u64[0];
              v191 = *v28;
              *v28 = *v16;
              v28[1].n128_u64[0] = v16[1].n128_u64[0];
              v16[1].n128_u64[0] = v216;
              *v16 = v191;
              if ((double)v47->n128_i32[2] / v47[1].n128_f64[0] >= (double)v16->n128_i32[2] / v16[1].n128_f64[0])
                goto LABEL_54;
              v213 = v16[1].n128_u64[0];
              v188 = *v16;
              *v16 = *v47;
              v16[1].n128_u64[0] = v47[1].n128_u64[0];
            }
            else
            {
              v213 = v28[1].n128_u64[0];
              v188 = *v28;
              *v28 = *v47;
              v28[1].n128_u64[0] = v47[1].n128_u64[0];
            }
            v47[1].n128_u64[0] = v213;
            *v47 = v188;
          }
LABEL_54:
          v217 = *(_QWORD *)(v12 + 16);
          v192 = *(__n128 *)v12;
          a5 = *v16;
          *(_QWORD *)(v12 + 16) = v16[1].n128_u64[0];
          *(__n128 *)v12 = a5;
          a5.n128_u64[1] = v192.n128_u64[1];
          v16[1].n128_u64[0] = v217;
          *v16 = v192;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v39 = (__n128 *)*(unsigned int *)(v12 + 8);
          a5.n128_u64[0] = *(_QWORD *)(v12 + 16);
          v40 = (double)(int)v39 / a5.n128_f64[0];
LABEL_56:
          v63 = 0;
          v64 = *(_QWORD *)v12;
          v65 = *(_DWORD *)(v12 + 12);
          do
          {
            v66 = v12 + v63;
            if ((__n128 *)(v12 + v63 + 24) == a2)
              goto LABEL_176;
            v63 += 24;
          }
          while ((double)*(int *)(v66 + 32) / *(double *)(v66 + 40) < v40);
          v67 = v12 + v63;
          v68 = a2;
          if (v63 != 24)
          {
            while (v68 != (__n128 *)v12)
            {
              v69 = (__n128 *)((char *)v68 - 24);
              v70 = (double)v68[-1].n128_i32[0] / v68[-1].n128_f64[1];
              v68 = (__n128 *)((char *)v68 - 24);
              if (v70 < v40)
                goto LABEL_66;
            }
            goto LABEL_176;
          }
          v71 = a2;
          do
          {
            if (v67 >= (unint64_t)v71)
            {
              v69 = v71;
              v12 = v67;
              goto LABEL_77;
            }
            v69 = (__n128 *)((char *)v71 - 24);
            v72 = (double)v71[-1].n128_i32[0] / v71[-1].n128_f64[1];
            v71 = (__n128 *)((char *)v71 - 24);
          }
          while (v72 >= v40);
LABEL_66:
          v12 = v67;
          if (v67 < (unint64_t)v69)
          {
            v73 = v69;
            do
            {
              v218 = *(_QWORD *)(v12 + 16);
              v193 = *(__n128 *)v12;
              v74 = *v73;
              *(_QWORD *)(v12 + 16) = v73[1].n128_u64[0];
              *(__n128 *)v12 = v74;
              v73[1].n128_u64[0] = v218;
              *v73 = v193;
              v75 = (__n128 *)(v12 + 24);
              do
              {
                if (v75 == a2)
                  goto LABEL_176;
                v76 = (double)v75->n128_i32[2] / v75[1].n128_f64[0];
                v75 = (__n128 *)((char *)v75 + 24);
              }
              while (v76 < v40);
              v12 = (unint64_t)&v75[-2].n128_u64[1];
              do
              {
                if (v73 == (__n128 *)a1)
                  goto LABEL_176;
                v77 = (unint64_t)&v73[-2].n128_u64[1];
                v78 = (double)v73[-1].n128_i32[0] / v73[-1].n128_f64[1];
                v73 = (__n128 *)((char *)v73 - 24);
              }
              while (v78 >= v40);
              v73 = (__n128 *)v77;
            }
            while (v12 < v77);
          }
LABEL_77:
          if (v12 - 24 != a1)
          {
            v79 = *(_OWORD *)(v12 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 - 8);
            *(_OWORD *)a1 = v79;
          }
          *(_QWORD *)(v12 - 24) = v64;
          *(_DWORD *)(v12 - 16) = (_DWORD)v39;
          *(_DWORD *)(v12 - 12) = v65;
          *(_QWORD *)(v12 - 8) = a5.n128_u64[0];
          if (v67 < (unint64_t)v69)
            goto LABEL_82;
          {
            if (v80)
              continue;
LABEL_82:
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v80)
            return;
          goto LABEL_1;
        }
        v39 = (__n128 *)(v12 + 24);
        v112 = (__n128 *)v12 == a2 || v39 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v112)
          {
            v113 = 0;
            n128_u64 = (_QWORD *)v12;
            do
            {
              v116 = v39;
              v117 = *((_DWORD *)n128_u64 + 8);
              v118 = *((double *)n128_u64 + 5);
              v119 = (double)v117 / v118;
              if (v119 < (double)*((int *)n128_u64 + 2) / *((double *)n128_u64 + 2))
              {
                v120 = v116->n128_u64[0];
                v121 = *((_DWORD *)n128_u64 + 9);
                v122 = v113;
                do
                {
                  v123 = v12 + v122;
                  *(_OWORD *)(v123 + 24) = *(_OWORD *)(v12 + v122);
                  *(_QWORD *)(v123 + 40) = *(_QWORD *)(v12 + v122 + 16);
                  if (!v122)
                  {
                    v115 = v12;
                    goto LABEL_128;
                  }
                  v122 -= 24;
                }
                while (v119 < (double)*(int *)(v123 - 16) / *(double *)(v123 - 8));
                v115 = v12 + v122 + 24;
LABEL_128:
                *(_QWORD *)v115 = v120;
                *(_DWORD *)(v115 + 8) = v117;
                *(_DWORD *)(v115 + 12) = v121;
                *(double *)(v115 + 16) = v118;
              }
              v39 = (__n128 *)((char *)v116 + 24);
              v113 += 24;
              n128_u64 = v116->n128_u64;
            }
            while (&v116[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v112)
        {
          v161 = -2;
          v162 = 1;
          v163 = v12;
          while (1)
          {
            v164 = *(_DWORD *)(v163 + 32);
            v165 = *(double *)(v163 + 40);
            v166 = (double)v164 / v165;
            if (v166 < (double)*(int *)(v163 + 8) / *(double *)(v163 + 16))
              break;
LABEL_170:
            v163 = v12 + 24 * v162++;
            v39 = (__n128 *)((char *)v39 + 24);
            --v161;
            if (v39 == a2)
              return;
          }
          v167 = v39->n128_u64[0];
          v168 = *(_DWORD *)(v163 + 36);
          v169 = v161;
          v170 = v39;
          while (1)
          {
            *v170 = *(__n128 *)((char *)v170 - 24);
            v170[1].n128_u64[0] = v170[-1].n128_u64[1];
            if (__CFADD__(v169++, 1))
              break;
            v172 = &v170[-2].n128_i64[1];
            v173 = (double)v170[-3].n128_i32[2] / v170[-2].n128_f64[0];
            v170 = (__n128 *)((char *)v170 - 24);
            if (v166 >= v173)
            {
              *v172 = v167;
              *((_DWORD *)v172 + 2) = v164;
              *((_DWORD *)v172 + 3) = v168;
              *((double *)v172 + 2) = v165;
              goto LABEL_170;
            }
          }
LABEL_176:
          __break(1u);
LABEL_177:
          v225 = *(_QWORD *)(a1 + 16);
          v200 = *(__n128 *)a1;
          *(__n128 *)a1 = *v39;
          *(_QWORD *)(a1 + 16) = v39[1].n128_u64[0];
          *v39 = v200;
          v39[1].n128_u64[0] = v225;
          if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(a1 + 32) / *(double *)(a1 + 40))
          {
            v100 = *v39;
            v174 = v39[1].n128_u64[0];
            v175 = a2[-1].n128_u64[1];
            *v39 = *v9;
            v39[1].n128_u64[0] = v175;
            a2[-1].n128_u64[1] = v174;
LABEL_179:
            *v9 = v100;
          }
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = (unsigned int *)a1;
  while (2)
  {
    a1 = (uint64_t)v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = ((char *)a2 - (char *)v12) >> 4;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = a2[-1].n128_i32[0];
        --a2;
        if (v63 < (int)*v12)
          goto LABEL_111;
        return result;
      case 3:
        v20 = (__n128 *)(v12 + 4);
        v64 = v12[4];
        v66 = a2[-1].n128_u32[0];
        --a2;
        v65 = v66;
        if (v64 < (int)*v12)
        {
          if (v65 >= v64)
            goto LABEL_188;
LABEL_111:
          v138 = *(__n128 *)v12;
          *(__n128 *)v12 = *a2;
          result = v138;
          goto LABEL_112;
        }
        if (v65 < v64)
        {
          result = *v20;
          *v20 = *a2;
          *a2 = result;
          if ((int)v12[4] < (int)*v12)
          {
            v143 = *(__n128 *)v12;
            *(__n128 *)v12 = *v20;
            result = v143;
            *v20 = v143;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>((__n128 *)v12, (__n128 *)v12 + 1, (int *)v12 + 8, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      case 5:
        v67 = (__n128 *)(v12 + 4);
        v68 = (__n128 *)(v12 + 8);
        v69 = (__n128 *)(v12 + 12);
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>((__n128 *)v12, (__n128 *)v12 + 1, (int *)v12 + 8, (_OWORD *)v12 + 3, result).n128_u64[0];
        v71 = a2[-1].n128_i32[0];
        v70 = a2 - 1;
        if (v71 < (int)v12[12])
        {
          result = *v69;
          *v69 = *v70;
          *v70 = result;
          if ((signed __int32)v69->n128_u32[0] < (signed __int32)v68->n128_u32[0])
          {
            result = *v68;
            *v68 = *v69;
            *v69 = result;
            if ((signed __int32)v68->n128_u32[0] < (signed __int32)v67->n128_u32[0])
            {
              result = *v67;
              *v67 = *v68;
              *v68 = result;
              if ((int)v12[4] < (int)*v12)
              {
                v139 = *(__n128 *)v12;
                *(__n128 *)v12 = *v67;
                result = v139;
                *v67 = v139;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 == (unsigned int *)a2)
              return result;
            v81 = (unint64_t)(v14 - 2) >> 1;
            v82 = v81;
            while (1)
            {
              if (v81 >= v82)
              {
                v83 = (2 * v82) | 1;
                v84 = &v12[4 * v83];
                if (2 * v82 + 2 >= v14)
                {
                  v87 = &v12[4 * v82];
                  v88 = *v87;
                  if ((int)*v84 >= (int)*v87)
                    goto LABEL_149;
                }
                else
                {
                  v85 = v84[4];
                  v86 = (int)*v84 < v85;
                  if ((int)*v84 > v85)
                    v85 = *v84;
                  if (v86)
                  {
                    v84 += 4;
                    v83 = 2 * v82 + 2;
                  }
                  v87 = &v12[4 * v82];
                  v88 = *v87;
                  if (v85 >= (int)*v87)
                  {
LABEL_149:
                    v147 = v87[3];
                    v141 = *(_QWORD *)(v87 + 1);
                    while (1)
                    {
                      v91 = v87;
                      v87 = v84;
                      *(_OWORD *)v91 = *(_OWORD *)v84;
                      if (v81 < v83)
                        break;
                      v92 = (2 * v83) | 1;
                      v84 = &v12[4 * v92];
                      v83 = 2 * v83 + 2;
                      if (v83 < v14)
                      {
                        v89 = *v84;
                        v90 = v84[4];
                        if ((int)*v84 <= v90)
                          v89 = v84[4];
                        if ((int)*v84 >= v90)
                          v83 = v92;
                        else
                          v84 += 4;
                        if (v89 < v88)
                          break;
                      }
                      else
                      {
                        v83 = v92;
                        if ((int)*v84 < v88)
                          break;
                      }
                    }
                    *v87 = v88;
                    v87[3] = v147;
                    *(_QWORD *)(v87 + 1) = v141;
                  }
                }
              }
              v86 = v82-- <= 0;
              if (v86)
              {
                v93 = (unint64_t)v13 >> 4;
                do
                {
                  v94 = 0;
                  v142 = *(__n128 *)v12;
                  v95 = v12;
                  do
                  {
                    v96 = (uint64_t)&v95[v94 + 1];
                    v97 = (2 * v94) | 1;
                    v98 = 2 * v94 + 2;
                    if (v98 < v93 && *(_DWORD *)v96 < *(_DWORD *)(v96 + 16))
                    {
                      v96 += 16;
                      v97 = v98;
                    }
                    *v95 = *(_OWORD *)v96;
                    v95 = (_OWORD *)v96;
                    v94 = v97;
                  }
                  while (v97 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                  if ((__n128 *)v96 == --a2)
                  {
                    result = v142;
                    *(__n128 *)v96 = v142;
                  }
                  else
                  {
                    *(__n128 *)v96 = *a2;
                    result = v142;
                    *a2 = v142;
                    v99 = v96 - (_QWORD)v12 + 16;
                    if (v99 >= 17)
                    {
                      v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                      v101 = (__n128 *)&v12[4 * v100];
                      v102 = *(_DWORD *)v96;
                      if ((signed __int32)v101->n128_u32[0] < *(_DWORD *)v96)
                      {
                        v118 = *(_DWORD *)(v96 + 12);
                        v115 = *(_QWORD *)(v96 + 4);
                        do
                        {
                          v103 = (_OWORD *)v96;
                          v96 = (uint64_t)v101;
                          result = *v101;
                          *v103 = *v101;
                          if (!v100)
                            break;
                          v100 = (v100 - 1) >> 1;
                          v101 = (__n128 *)&v12[4 * v100];
                        }
                        while ((signed __int32)v101->n128_u32[0] < v102);
                        *(_DWORD *)v96 = v102;
                        *(_DWORD *)(v96 + 12) = v118;
                        *(_QWORD *)(v96 + 4) = v115;
                      }
                    }
                  }
                  v86 = v93-- <= 2;
                }
                while (!v86);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)&v12[4 * ((unint64_t)v14 >> 1)];
          v17 = v9->n128_u32[0];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = *v12;
            if ((signed int)*v12 >= (signed __int32)v16->n128_u32[0])
            {
              if (v17 < v19)
              {
                v123 = *(__n128 *)v12;
                *(__n128 *)v12 = *v9;
                result = v123;
                *v9 = v123;
                if ((signed int)*v12 < (signed __int32)v16->n128_u32[0])
                {
                  v124 = *v16;
                  *v16 = *(__n128 *)v12;
                  result = v124;
                  *(__n128 *)v12 = v124;
                  --a3;
                  v20 = (__n128 *)*v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v19)
            {
              v127 = *v16;
              *v16 = *(__n128 *)v12;
              result = v127;
              *(__n128 *)v12 = v127;
              if ((signed __int32)v9->n128_u32[0] >= (signed int)*v12)
                goto LABEL_31;
              v120 = *(__n128 *)v12;
              *(__n128 *)v12 = *v9;
            }
            else
            {
              v120 = *v16;
              *v16 = *v9;
            }
            result = v120;
            *v9 = v120;
LABEL_31:
            --a3;
            v20 = (__n128 *)*v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= (signed int)*v12)
          {
            if (v17 < v18)
            {
              v121 = *v16;
              *v16 = *v9;
              *v9 = v121;
              if ((signed __int32)v16->n128_u32[0] < (signed int)*v12)
              {
                v122 = *(__n128 *)v12;
                *(__n128 *)v12 = *v16;
                *v16 = v122;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v125 = *(__n128 *)v12;
              *(__n128 *)v12 = *v16;
              *v16 = v125;
              if ((signed __int32)v9->n128_u32[0] >= (signed __int32)v16->n128_u32[0])
                goto LABEL_22;
              v119 = *v16;
              *v16 = *v9;
            }
            else
            {
              v119 = *(__n128 *)v12;
              *(__n128 *)v12 = *v9;
            }
            *v9 = v119;
          }
LABEL_22:
          v21 = (__n128 *)(v12 + 4);
          v22 = &v12[4 * v15];
          v25 = *(v22 - 4);
          v23 = (__n128 *)(v22 - 4);
          v24 = v25;
          v26 = v10->n128_u32[0];
          if (v25 >= (int)v12[4])
          {
            if (v26 < v24)
            {
              v126 = *v23;
              *v23 = *v10;
              *v10 = v126;
              if ((signed __int32)v23->n128_u32[0] < (signed __int32)v21->n128_u32[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 >= v24)
            {
              v29 = *v21;
              *v21 = *v23;
              *v23 = v29;
              if ((signed __int32)v10->n128_u32[0] >= (signed __int32)v23->n128_u32[0])
                goto LABEL_36;
              v128 = *v23;
              *v23 = *v10;
              v27 = v128;
            }
            else
            {
              v27 = *v21;
              *v21 = *v10;
            }
            *v10 = v27;
          }
LABEL_36:
          v30 = (__n128 *)(v12 + 8);
          v31 = &v12[4 * v15];
          v34 = v31[4];
          v32 = (__n128 *)(v31 + 4);
          v33 = v34;
          v35 = v11->n128_u32[0];
          if (v34 >= (int)v12[8])
          {
            if (v35 < v33)
            {
              v129 = *v32;
              *v32 = *v11;
              *v11 = v129;
              if ((signed __int32)v32->n128_u32[0] < (signed __int32)v30->n128_u32[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v38 = *v30;
              *v30 = *v32;
              *v32 = v38;
              if ((signed __int32)v11->n128_u32[0] >= (signed __int32)v32->n128_u32[0])
                goto LABEL_45;
              v130 = *v32;
              *v32 = *v11;
              v36 = v130;
            }
            else
            {
              v36 = *v30;
              *v30 = *v11;
            }
            *v11 = v36;
          }
LABEL_45:
          v39 = v16->n128_u32[0];
          v40 = v32->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= (signed __int32)v23->n128_u32[0])
          {
            if (v40 < v39)
            {
              v132 = *v16;
              *v16 = *v32;
              *v32 = v132;
              if ((signed __int32)v16->n128_u32[0] < (signed __int32)v23->n128_u32[0])
              {
                v133 = *v23;
                *v23 = *v16;
                *v16 = v133;
              }
            }
          }
          else
          {
            if (v40 >= v39)
            {
              v134 = *v23;
              *v23 = *v16;
              *v16 = v134;
              if ((signed __int32)v32->n128_u32[0] >= (signed __int32)v16->n128_u32[0])
                goto LABEL_54;
              v131 = *v16;
              *v16 = *v32;
            }
            else
            {
              v131 = *v23;
              *v23 = *v32;
            }
            *v32 = v131;
          }
LABEL_54:
          v135 = *(__n128 *)v12;
          *(__n128 *)v12 = *v16;
          result = v135;
          *v16 = v135;
          --a3;
          v20 = (__n128 *)*v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if ((int)*(v12 - 4) >= (int)v20)
          {
            v117 = v12[3];
            v114 = *(_QWORD *)(v12 + 1);
            if ((int)v20 >= (signed __int32)v9->n128_u32[0])
            {
              v56 = v12 + 4;
              do
              {
                v12 = v56;
                if (v56 >= (unsigned int *)a2)
                  break;
                v56 += 4;
              }
              while ((int)v20 >= (int)*v12);
            }
            else
            {
              v54 = (__n128 *)(v12 + 4);
              do
              {
                if (v54 == a2)
                  goto LABEL_187;
                v55 = v54->n128_u32[0];
                ++v54;
              }
              while ((int)v20 >= v55);
              v12 = (unsigned int *)&v54[-1];
            }
            v57 = a2;
            if (v12 < (unsigned int *)a2)
            {
              v57 = a2;
              while (v57 != (__n128 *)a1)
              {
                v58 = v57[-1].n128_i32[0];
                --v57;
                if ((int)v20 >= v58)
                  goto LABEL_100;
              }
              goto LABEL_187;
            }
LABEL_100:
            if (v12 < (unsigned int *)v57)
            {
              v137 = *(__n128 *)v12;
              *(__n128 *)v12 = *v57;
              result = v137;
              *v57 = v137;
              v59 = (__n128 *)(v12 + 4);
              while (v59 != a2)
              {
                v60 = v59->n128_u32[0];
                ++v59;
                if ((int)v20 < v60)
                {
                  v12 = (unsigned int *)&v59[-1];
                  while (v57 != (__n128 *)a1)
                  {
                    v61 = v57[-1].n128_i32[0];
                    --v57;
                    if ((int)v20 >= v61)
                      goto LABEL_100;
                  }
                  goto LABEL_187;
                }
              }
              goto LABEL_187;
            }
            v62 = (__n128 *)(v12 - 4);
            if (v12 - 4 != (unsigned int *)a1)
            {
              result = *v62;
              *(__n128 *)a1 = *v62;
            }
            a4 = 0;
            *(v12 - 4) = v20;
            *(v12 - 1) = v117;
            *(_QWORD *)(v12 - 3) = v114;
            continue;
          }
LABEL_56:
          v41 = 0;
          v116 = v12[3];
          v113 = *(_QWORD *)(v12 + 1);
          do
          {
            v42 = &v12[v41 + 4];
            if (v42 == (unsigned int *)a2)
              goto LABEL_187;
            v41 += 4;
          }
          while ((int)*v42 < (int)v20);
          v43 = &v12[v41];
          v44 = a2;
          if (v41 != 4)
          {
            while (v44 != (__n128 *)v12)
            {
              v45 = v44[-1].n128_i32[0];
              --v44;
              if (v45 < (int)v20)
                goto LABEL_66;
            }
            goto LABEL_187;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unsigned int *)v44)
              break;
            v46 = v44[-1].n128_i32[0];
            --v44;
          }
          while (v46 >= (int)v20);
LABEL_66:
          v12 = (unsigned int *)((char *)v12 + v41 * 4);
          if (v43 < (unsigned int *)v44)
          {
            v47 = v44;
            do
            {
              v136 = *(__n128 *)v12;
              *(__n128 *)v12 = *v47;
              result = v136;
              *v47 = v136;
              v48 = (__n128 *)(v12 + 4);
              do
              {
                if (v48 == a2)
                  goto LABEL_187;
                v49 = v48->n128_u32[0];
                ++v48;
              }
              while (v49 < (int)v20);
              v12 = (unsigned int *)&v48[-1];
              do
              {
                if (v47 == (__n128 *)a1)
                  goto LABEL_187;
                v50 = v47[-1].n128_i32[0];
                --v47;
              }
              while (v50 >= (int)v20);
            }
            while (v12 < (unsigned int *)v47);
          }
          v51 = (__n128 *)(v12 - 4);
          if (v12 - 4 != (unsigned int *)a1)
          {
            result = *v51;
            *(__n128 *)a1 = *v51;
          }
          *(v12 - 4) = v20;
          *(v12 - 1) = v116;
          *(_QWORD *)(v12 - 3) = v113;
          if (v43 < (unsigned int *)v44)
            goto LABEL_80;
          v52 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>(a1, (uint64_t)(v12 - 4), result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>((uint64_t)v12, (uint64_t)a2, v53))
          {
            if (v52)
              continue;
LABEL_80:
            std::__introsort<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*,false>(a1, v12 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 4);
          if (v52)
            return result;
          goto LABEL_1;
        }
        v20 = (__n128 *)(v12 + 4);
        v73 = v12 == (unsigned int *)a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (v73)
            return result;
          v74 = 0;
          v75 = (__n128 *)v12;
          while (1)
          {
            v77 = v20;
            v78 = v20->n128_u32[0];
            if (v78 < (signed __int32)v75->n128_u32[0])
            {
              v140 = *(uint64_t *)((char *)v75[1].n128_i64 + 4);
              v146 = v75[1].n128_u32[3];
              v79 = v74;
              do
              {
                result = *(__n128 *)((char *)v12 + v79);
                *(__n128 *)((char *)v12 + v79 + 16) = result;
                if (!v79)
                {
                  v76 = (uint64_t)v12;
                  goto LABEL_129;
                }
                v80 = *(unsigned int *)((char *)v12 + v79 - 16);
                v79 -= 16;
              }
              while (v78 < v80);
              v76 = (uint64_t)v12 + v79 + 16;
LABEL_129:
              *(_DWORD *)v76 = v78;
              *(_DWORD *)(v76 + 12) = v146;
              *(_QWORD *)(v76 + 4) = v140;
            }
            v20 = v77 + 1;
            v74 += 16;
            v75 = v77;
            if (&v77[1] == a2)
              return result;
          }
        }
        if (v73)
          return result;
        v104 = -2;
        v105 = 1;
        v106 = v12;
        while (1)
        {
          v107 = v20->n128_u32[0];
          if ((signed __int32)v20->n128_u32[0] < (signed int)*v106)
            break;
LABEL_181:
          v106 = &v12[4 * v105++];
          ++v20;
          --v104;
          if (v20 == a2)
            return result;
        }
        v144 = *(_QWORD *)(v106 + 5);
        v148 = v106[7];
        v108 = v104;
        v109 = v20;
        while (1)
        {
          result = v109[-1];
          *v109 = result;
          if (__CFADD__(v108++, 1))
            break;
          v111 = v109 - 1;
          v112 = v109[-2].n128_i32[0];
          --v109;
          if (v107 >= v112)
          {
            v111->n128_u32[0] = v107;
            v111->n128_u32[3] = v148;
            *(unint64_t *)((char *)v111->n128_u64 + 4) = v144;
            goto LABEL_181;
          }
        }
LABEL_187:
        __break(1u);
LABEL_188:
        v145 = *(__n128 *)a1;
        *(__n128 *)a1 = *v20;
        result = v145;
        *v20 = v145;
        if ((signed __int32)a2->n128_u32[0] < *(_DWORD *)(a1 + 16))
        {
          result = *v20;
          *v20 = *a2;
LABEL_112:
          *a2 = result;
        }
        return result;
    }
  }
}

  v8 = a2 - 5;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - i) >> 4);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v67 = *((_QWORD *)a2 - 1);
        v68 = *(_QWORD *)(i + 72);
        v69 = v67 < v68;
        if (v67 == v68 && (v69 = *v8 < *(_QWORD *)i, *v8 == *(_QWORD *)i))
        {
          if (*((_QWORD *)a2 - 3) >= *(_QWORD *)(i + 56))
            return;
        }
        else if (!v69)
        {
          return;
        }
        v192 = *(_OWORD *)i;
        v214 = *(_OWORD *)(i + 48);
        v219 = *(_OWORD *)(i + 64);
        v200 = *(_OWORD *)(i + 16);
        v208 = *(_OWORD *)(i + 32);
        v120 = *(a2 - 1);
        v122 = *(a2 - 4);
        v121 = *(a2 - 3);
        *(_OWORD *)(i + 48) = *(a2 - 2);
        *(_OWORD *)(i + 64) = v120;
        *(_OWORD *)(i + 16) = v122;
        *(_OWORD *)(i + 32) = v121;
        *(_OWORD *)i = *(_OWORD *)v8;
        *(a2 - 2) = v214;
        *(a2 - 1) = v219;
        *(a2 - 4) = v200;
        *(a2 - 3) = v208;
        *(_OWORD *)v8 = v192;
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(i, i + 80, (uint64_t)(a2 - 5));
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(i, i + 80, i + 160, (uint64_t)(a2 - 5));
        return;
      case 5:
        std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(i, i + 80, i + 160, i + 240, (uint64_t)(a2 - 5));
        return;
      default:
        if (v10 > 1919)
        {
          if (!a3)
          {
            if ((_OWORD *)i == a2)
              return;
            v91 = (unint64_t)(v11 - 2) >> 1;
            v92 = v91;
            while (1)
            {
              v94 = v92;
              if (v91 >= v92)
              {
                v95 = (2 * v92) | 1;
                v93 = (_OWORD *)(i + 80 * v95);
                if (2 * v94 + 2 < v11)
                {
                  v96 = *(_QWORD *)(i + 80 * v95 + 72);
                  v97 = *((_QWORD *)v93 + 19);
                  v98 = v96 < v97;
                  if (v96 == v97)
                  {
                    v99 = *((_QWORD *)v93 + 10);
                    v98 = *(_QWORD *)v93 < v99;
                    if (*(_QWORD *)v93 == v99)
                      v98 = *((_QWORD *)v93 + 7) < *((_QWORD *)v93 + 17);
                  }
                  if (v98)
                  {
                    v93 += 5;
                    v95 = 2 * v94 + 2;
                  }
                }
                v100 = i + 80 * v94;
                v101 = *((_QWORD *)v93 + 9);
                v102 = *(_QWORD *)(v100 + 72);
                if (v101 == v102)
                {
                  v103 = *(_QWORD *)v100;
                  if (*(_QWORD *)v93 == *(_QWORD *)v100)
                  {
                    v103 = *(_QWORD *)v93;
                    if (*((_QWORD *)v93 + 7) >= *(_QWORD *)(v100 + 56))
                      goto LABEL_184;
                  }
                  else if (*(_QWORD *)v93 >= *(_QWORD *)v100)
                  {
                    goto LABEL_184;
                  }
                }
                else if (v101 >= v102)
                {
                  v103 = *(_QWORD *)v100;
LABEL_184:
                  v199 = *(_OWORD *)(v100 + 24);
                  v207 = *(_OWORD *)(v100 + 40);
                  v191 = *(_OWORD *)(v100 + 8);
                  v104 = *(_OWORD *)(v100 + 56);
                  *(_OWORD *)v100 = *v93;
                  v105 = v93[3];
                  v106 = v93[4];
                  v107 = v93[2];
                  *(_OWORD *)(v100 + 16) = v93[1];
                  *(_OWORD *)(v100 + 32) = v107;
                  *(_OWORD *)(v100 + 48) = v105;
                  *(_OWORD *)(v100 + 64) = v106;
                  if (v91 >= v95)
                  {
                    while (1)
                    {
                      v108 = v93;
                      v109 = 2 * v95;
                      v95 = (2 * v95) | 1;
                      v93 = (_OWORD *)(i + 80 * v95);
                      v110 = v109 + 2;
                      if (v110 < v11)
                      {
                        v111 = *(_QWORD *)(i + 80 * v95 + 72);
                        v112 = *((_QWORD *)v93 + 19);
                        v113 = v111 < v112;
                        if (v111 == v112)
                        {
                          v114 = *((_QWORD *)v93 + 10);
                          v113 = *(_QWORD *)v93 < v114;
                          if (*(_QWORD *)v93 == v114)
                            v113 = *((_QWORD *)v93 + 7) < *((_QWORD *)v93 + 17);
                        }
                        if (v113)
                        {
                          v93 += 5;
                          v95 = v110;
                        }
                      }
                      v115 = *((_QWORD *)v93 + 9);
                      v116 = v115 < v102;
                      if (v115 == v102)
                      {
                        v116 = *(_QWORD *)v93 < v103;
                        if (*(_QWORD *)v93 == v103)
                          v116 = *((_QWORD *)v93 + 7) < (uint64_t)v104;
                      }
                      if (v116)
                        break;
                      *v108 = *v93;
                      v117 = v93[1];
                      v118 = v93[2];
                      v119 = v93[4];
                      v108[3] = v93[3];
                      v108[4] = v119;
                      v108[1] = v117;
                      v108[2] = v118;
                      if (v91 < v95)
                        goto LABEL_167;
                    }
                    v93 = v108;
                  }
LABEL_167:
                  *(_QWORD *)v93 = v103;
                  *(_OWORD *)((char *)v93 + 40) = v207;
                  *(_OWORD *)((char *)v93 + 24) = v199;
                  *(_OWORD *)((char *)v93 + 8) = v191;
                  *(_OWORD *)((char *)v93 + 56) = v104;
                  *((_QWORD *)v93 + 9) = v102;
                }
              }
              v92 = v94 - 1;
              if (!v94)
              {
                v123 = v10 / 0x50uLL;
                while (1)
                {
                  if (v123 <= 0)
                    goto LABEL_252;
                  if (v123 == 1)
                    return;
                  v124 = 0;
                  v193 = *(_OWORD *)i;
                  v215 = *(_OWORD *)(i + 48);
                  v220 = *(_OWORD *)(i + 64);
                  v201 = *(_OWORD *)(i + 16);
                  v209 = *(_OWORD *)(i + 32);
                  v125 = i;
                  do
                  {
                    v129 = (_OWORD *)v125;
                    v130 = v124 + 1;
                    v125 += 80 * (v124 + 1);
                    v131 = 2 * v124;
                    v124 = (2 * v124) | 1;
                    v132 = v131 + 2;
                    if (v132 < v123)
                    {
                      v133 = *((_QWORD *)&v129[5 * v130 + 4] + 1);
                      v134 = *(_QWORD *)(v125 + 152);
                      v135 = v133 < v134;
                      if (v133 == v134)
                      {
                        v136 = *(_QWORD *)(v125 + 80);
                        v135 = *(_QWORD *)v125 < v136;
                        if (*(_QWORD *)v125 == v136)
                          v135 = *(_QWORD *)(v125 + 56) < *(_QWORD *)(v125 + 136);
                      }
                      if (v135)
                      {
                        v125 += 80;
                        v124 = v132;
                      }
                    }
                    *v129 = *(_OWORD *)v125;
                    v126 = *(_OWORD *)(v125 + 16);
                    v127 = *(_OWORD *)(v125 + 32);
                    v128 = *(_OWORD *)(v125 + 64);
                    v129[3] = *(_OWORD *)(v125 + 48);
                    v129[4] = v128;
                    v129[1] = v126;
                    v129[2] = v127;
                  }
                  while (v124 <= (uint64_t)((unint64_t)(v123 - 2) >> 1));
                  a2 -= 5;
                  if ((_OWORD *)v125 == a2)
                  {
                    *(_OWORD *)v125 = v193;
                    *(_OWORD *)(v125 + 48) = v215;
                    *(_OWORD *)(v125 + 64) = v220;
                    *(_OWORD *)(v125 + 16) = v201;
                    *(_OWORD *)(v125 + 32) = v209;
                  }
                  else
                  {
                    *(_OWORD *)v125 = *a2;
                    v137 = a2[1];
                    v138 = a2[2];
                    v139 = a2[4];
                    *(_OWORD *)(v125 + 48) = a2[3];
                    *(_OWORD *)(v125 + 64) = v139;
                    *(_OWORD *)(v125 + 16) = v137;
                    *(_OWORD *)(v125 + 32) = v138;
                    a2[3] = v215;
                    a2[4] = v220;
                    a2[1] = v201;
                    a2[2] = v209;
                    *a2 = v193;
                    v140 = v125 - i + 80;
                    if (v140 >= 81)
                    {
                      v141 = v140 / 0x50uLL - 2;
                      v142 = v141 >> 1;
                      v143 = (_OWORD *)(i + 80 * (v141 >> 1));
                      v144 = *((_QWORD *)v143 + 9);
                      v145 = *(_QWORD *)(v125 + 72);
                      if (v144 == v145)
                      {
                        v146 = *(_QWORD *)v125;
                        if (*(_QWORD *)v143 == *(_QWORD *)v125)
                        {
                          v146 = *(_QWORD *)v143;
                          if (*((_QWORD *)v143 + 7) < *(_QWORD *)(v125 + 56))
                            goto LABEL_225;
                        }
                        else if (*(_QWORD *)v143 < *(_QWORD *)v125)
                        {
                          goto LABEL_225;
                        }
                      }
                      else if (v144 < v145)
                      {
                        v146 = *(_QWORD *)v125;
LABEL_225:
                        v183 = *(_OWORD *)(v125 + 24);
                        v186 = *(_OWORD *)(v125 + 40);
                        v180 = *(_OWORD *)(v125 + 8);
                        v147 = *(_OWORD *)(v125 + 56);
                        *(_OWORD *)v125 = *v143;
                        v148 = v143[3];
                        v149 = v143[4];
                        v150 = v143[2];
                        *(_OWORD *)(v125 + 16) = v143[1];
                        *(_OWORD *)(v125 + 32) = v150;
                        *(_OWORD *)(v125 + 48) = v148;
                        *(_OWORD *)(v125 + 64) = v149;
                        if (v141 >= 2)
                        {
                          while (1)
                          {
                            v151 = v143;
                            v152 = v142 - 1;
                            v142 = (v142 - 1) >> 1;
                            v143 = (_OWORD *)(i + 80 * v142);
                            v153 = *((_QWORD *)v143 + 9);
                            v154 = v153 < v145;
                            if (v153 == v145)
                            {
                              v154 = *(_QWORD *)v143 < v146;
                              if (*(_QWORD *)v143 == v146)
                                v154 = *((_QWORD *)v143 + 7) < (uint64_t)v147;
                            }
                            if (!v154)
                              break;
                            *v151 = *v143;
                            v155 = v143[1];
                            v156 = v143[2];
                            v157 = v143[4];
                            v151[3] = v143[3];
                            v151[4] = v157;
                            v151[1] = v155;
                            v151[2] = v156;
                            if (v152 <= 1)
                              goto LABEL_232;
                          }
                          v143 = v151;
                        }
LABEL_232:
                        *(_QWORD *)v143 = v146;
                        *(_OWORD *)((char *)v143 + 40) = v186;
                        *(_OWORD *)((char *)v143 + 24) = v183;
                        *(_OWORD *)((char *)v143 + 8) = v180;
                        *(_OWORD *)((char *)v143 + 56) = v147;
                        *((_QWORD *)v143 + 9) = v145;
                      }
                    }
                  }
                  v27 = (unint64_t)v123-- > 2;
                  if (!v27)
                    return;
                }
              }
            }
          }
          v12 = (unint64_t)v11 >> 1;
          v13 = (_OWORD *)(i + 80 * ((unint64_t)v11 >> 1));
          if ((unint64_t)v10 < 0x2801)
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>((uint64_t)v13, a1, (uint64_t)(a2 - 5));
            --a3;
            if ((a4 & 1) != 0)
            {
LABEL_12:
              v23 = *(_QWORD *)a1;
              v20 = *(_QWORD *)(a1 + 72);
              goto LABEL_16;
            }
          }
          else
          {
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, (uint64_t)v13, (uint64_t)(a2 - 5));
            v14 = 80 * v12;
            v15 = 80 * v12 + a1 - 80;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1 + 80, v15, (uint64_t)(a2 - 10));
            v16 = a1 + 80 + v14;
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1 + 160, v16, (uint64_t)(a2 - 15));
            std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(v15, (uint64_t)v13, v16);
            v187 = *(_OWORD *)a1;
            v211 = *(_OWORD *)(a1 + 48);
            v216 = *(_OWORD *)(a1 + 64);
            v195 = *(_OWORD *)(a1 + 16);
            v203 = *(_OWORD *)(a1 + 32);
            v17 = v13[4];
            v19 = v13[1];
            v18 = v13[2];
            *(_OWORD *)(a1 + 48) = v13[3];
            *(_OWORD *)(a1 + 64) = v17;
            *(_OWORD *)(a1 + 16) = v19;
            *(_OWORD *)(a1 + 32) = v18;
            *(_OWORD *)a1 = *v13;
            v13[3] = v211;
            v13[4] = v216;
            v13[1] = v195;
            v13[2] = v203;
            *v13 = v187;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          v20 = *(_QWORD *)(a1 - 8);
          v21 = *(_QWORD *)(a1 + 72);
          if (v20 == v21)
          {
            v22 = *(_QWORD *)(a1 - 80);
            v23 = *(_QWORD *)a1;
            if (v22 == *(_QWORD *)a1)
            {
              v23 = *(_QWORD *)(a1 - 80);
              if (*(_QWORD *)(a1 - 24) < *(_QWORD *)(a1 + 56))
                goto LABEL_16;
            }
            else if (v22 < *(_QWORD *)a1)
            {
              goto LABEL_16;
            }
LABEL_73:
            v182 = *(_OWORD *)(a1 + 24);
            v185 = *(_OWORD *)(a1 + 40);
            v179 = *(_OWORD *)(a1 + 8);
            v48 = *(_OWORD *)(a1 + 56);
            v49 = *((_QWORD *)a2 - 1);
            v50 = v21 < v49;
            if (v21 == v49)
            {
              v50 = v23 < *v8;
              if (v23 == *v8)
                v50 = (uint64_t)v48 < *((_QWORD *)a2 - 3);
            }
            if (v50)
            {
              i = a1 + 80;
              if ((_OWORD *)(a1 + 80) == a2)
                goto LABEL_252;
              while (1)
              {
                v51 = *(_QWORD *)(i + 72);
                v52 = v21 < v51;
                if (v21 == v51)
                {
                  v52 = v23 < *(_QWORD *)i;
                  if (v23 == *(_QWORD *)i)
                    v52 = (uint64_t)v48 < *(_QWORD *)(i + 56);
                }
                if (v52)
                  break;
                i += 80;
                if ((_OWORD *)i == a2)
                  goto LABEL_252;
              }
            }
            else
            {
              for (i = a1 + 80; i < (unint64_t)a2; i += 80)
              {
                v53 = *(_QWORD *)(i + 72);
                v54 = v21 < v53;
                if (v21 == v53)
                {
                  v54 = v23 < *(_QWORD *)i;
                  if (v23 == *(_QWORD *)i)
                    v54 = (uint64_t)v48 < *(_QWORD *)(i + 56);
                }
                if (v54)
                  break;
              }
            }
            v55 = a2;
            if (i < (unint64_t)a2)
            {
              if (a2 == (_OWORD *)a1)
                goto LABEL_252;
              v55 = a2 - 5;
              while (1)
              {
                v56 = *((_QWORD *)v55 + 9);
                v57 = v21 < v56;
                if (v21 == v56)
                {
                  v57 = v23 < *(_QWORD *)v55;
                  if (v23 == *(_QWORD *)v55)
                    v57 = (uint64_t)v48 < *((_QWORD *)v55 + 7);
                }
                if (!v57)
                  break;
                v71 = v55 == (_OWORD *)a1;
                v55 -= 5;
                if (v71)
                  goto LABEL_252;
              }
            }
            while (i < (unint64_t)v55)
            {
              v189 = *(_OWORD *)i;
              v213 = *(_OWORD *)(i + 48);
              v218 = *(_OWORD *)(i + 64);
              v197 = *(_OWORD *)(i + 16);
              v205 = *(_OWORD *)(i + 32);
              v58 = v55[4];
              v60 = v55[1];
              v59 = v55[2];
              *(_OWORD *)(i + 48) = v55[3];
              *(_OWORD *)(i + 64) = v58;
              *(_OWORD *)(i + 16) = v60;
              *(_OWORD *)(i + 32) = v59;
              *(_OWORD *)i = *v55;
              v55[3] = v213;
              v55[4] = v218;
              v55[1] = v197;
              v55[2] = v205;
              *v55 = v189;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 80;
                    if ((_OWORD *)i == a2)
                      goto LABEL_252;
                    v61 = *(_QWORD *)(i + 72);
                    if (v21 == v61)
                      break;
                    if (v21 < v61)
                      goto LABEL_113;
                  }
                  if (v23 != *(_QWORD *)i)
                    break;
                  if ((uint64_t)v48 < *(_QWORD *)(i + 56))
                    goto LABEL_113;
                }
              }
              while (v23 >= *(_QWORD *)i);
LABEL_113:
              if (v55 == (_OWORD *)a1)
                goto LABEL_252;
              v55 -= 5;
              while (1)
              {
                v62 = *((_QWORD *)v55 + 9);
                v63 = v21 < v62;
                if (v21 == v62)
                {
                  v63 = v23 < *(_QWORD *)v55;
                  if (v23 == *(_QWORD *)v55)
                    v63 = (uint64_t)v48 < *((_QWORD *)v55 + 7);
                }
                if (!v63)
                  break;
                v71 = v55 == (_OWORD *)a1;
                v55 -= 5;
                if (v71)
                  goto LABEL_252;
              }
            }
            if (i - 80 != a1)
            {
              *(_OWORD *)a1 = *(_OWORD *)(i - 80);
              v64 = *(_OWORD *)(i - 64);
              v65 = *(_OWORD *)(i - 48);
              v66 = *(_OWORD *)(i - 16);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(i - 32);
              *(_OWORD *)(a1 + 64) = v66;
              *(_OWORD *)(a1 + 16) = v64;
              *(_OWORD *)(a1 + 32) = v65;
            }
            a4 = 0;
            *(_QWORD *)(i - 80) = v23;
            *(_OWORD *)(i - 40) = v185;
            *(_OWORD *)(i - 56) = v182;
            *(_OWORD *)(i - 72) = v179;
            *(_OWORD *)(i - 24) = v48;
            *(_QWORD *)(i - 8) = v21;
            continue;
          }
          v23 = *(_QWORD *)a1;
          if (v20 >= v21)
            goto LABEL_73;
          v20 = *(_QWORD *)(a1 + 72);
LABEL_16:
          v181 = *(_OWORD *)(a1 + 24);
          v184 = *(_OWORD *)(a1 + 40);
          v178 = *(_OWORD *)(a1 + 8);
          if ((_OWORD *)(a1 + 80) == a2)
            goto LABEL_252;
          v24 = 0;
          v25 = *(_OWORD *)(a1 + 56);
          while (1)
          {
            v26 = *(_QWORD *)(a1 + v24 + 152);
            v27 = v26 < v20;
            if (v26 == v20)
            {
              v28 = *(_QWORD *)(a1 + v24 + 80);
              v27 = v28 < v23;
              if (v28 == v23)
                v27 = *(_QWORD *)(a1 + v24 + 136) < *(_QWORD *)(a1 + 56);
            }
            if (!v27)
              break;
            v24 += 80;
            if ((_OWORD *)(a1 + v24 + 80) == a2)
              goto LABEL_252;
          }
          v29 = a1 + v24 + 80;
          if (v24)
          {
            if (a2 == (_OWORD *)a1)
              goto LABEL_252;
            v30 = a2 - 5;
            while (1)
            {
              v31 = v30[9];
              v32 = v31 < v20;
              if (v31 == v20)
              {
                v32 = *v30 < v23;
                if (*v30 == v23)
                  v32 = v30[7] < (uint64_t)v25;
              }
              if (v32)
                break;
              v71 = v30 == (_QWORD *)a1;
              v30 -= 10;
              if (v71)
                goto LABEL_252;
            }
          }
          else
          {
            v30 = a2;
            if (v29 < (unint64_t)a2)
            {
              v30 = a2 - 5;
              v33 = *((_QWORD *)a2 - 1);
              v34 = v33 < v20;
              if (v33 != v20)
                goto LABEL_41;
LABEL_39:
              v34 = *v30 < v23;
              if (*v30 == v23)
                v34 = v30[7] < (uint64_t)v25;
LABEL_41:
              while (1)
              {
                v36 = v34 || v29 >= (unint64_t)v30;
                if (v36)
                  break;
                v30 -= 10;
                v35 = v30[9];
                v34 = v35 < v20;
                if (v35 == v20)
                  goto LABEL_39;
              }
            }
          }
          if (v29 < (unint64_t)v30)
          {
            i = v29;
            v37 = v30;
            while (1)
            {
              v188 = *(_OWORD *)i;
              v212 = *(_OWORD *)(i + 48);
              v217 = *(_OWORD *)(i + 64);
              v196 = *(_OWORD *)(i + 16);
              v204 = *(_OWORD *)(i + 32);
              v38 = *((_OWORD *)v37 + 4);
              v40 = *((_OWORD *)v37 + 1);
              v39 = *((_OWORD *)v37 + 2);
              *(_OWORD *)(i + 48) = *((_OWORD *)v37 + 3);
              *(_OWORD *)(i + 64) = v38;
              *(_OWORD *)(i + 16) = v40;
              *(_OWORD *)(i + 32) = v39;
              *(_OWORD *)i = *(_OWORD *)v37;
              *((_OWORD *)v37 + 3) = v212;
              *((_OWORD *)v37 + 4) = v217;
              *((_OWORD *)v37 + 1) = v196;
              *((_OWORD *)v37 + 2) = v204;
              *(_OWORD *)v37 = v188;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    i += 80;
                    if ((_OWORD *)i == a2)
                      goto LABEL_252;
                    v41 = *(_QWORD *)(i + 72);
                    if (v41 == v20)
                      break;
                    if (v41 >= v20)
                      goto LABEL_57;
                  }
                  if (*(_QWORD *)i != v23)
                    break;
                  if (*(_QWORD *)(i + 56) >= (uint64_t)v25)
                    goto LABEL_57;
                }
              }
              while (*(_QWORD *)i < v23);
LABEL_57:
              if (v37 == (_QWORD *)a1)
                break;
              v37 -= 10;
              while (1)
              {
                v42 = v37[9];
                v43 = v42 < v20;
                if (v42 == v20)
                {
                  v43 = *v37 < v23;
                  if (*v37 == v23)
                    v43 = v37[7] < (uint64_t)v25;
                }
                if (v43)
                  break;
                v71 = v37 == (_QWORD *)a1;
                v37 -= 10;
                if (v71)
                  goto LABEL_252;
              }
              if (i >= (unint64_t)v37)
                goto LABEL_67;
            }
LABEL_252:
            __break(1u);
            return;
          }
          i = v29;
LABEL_67:
          if (i - 80 != a1)
          {
            *(_OWORD *)a1 = *(_OWORD *)(i - 80);
            v44 = *(_OWORD *)(i - 64);
            v45 = *(_OWORD *)(i - 48);
            v46 = *(_OWORD *)(i - 16);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 64) = v46;
            *(_OWORD *)(a1 + 16) = v44;
            *(_OWORD *)(a1 + 32) = v45;
          }
          *(_QWORD *)(i - 80) = v23;
          *(_OWORD *)(i - 40) = v184;
          *(_OWORD *)(i - 56) = v181;
          *(_OWORD *)(i - 72) = v178;
          *(_OWORD *)(i - 24) = v25;
          *(_QWORD *)(i - 8) = v20;
          if (v29 < (unint64_t)v30)
            goto LABEL_72;
          v47 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(a1, i - 80);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*>(i, (uint64_t)a2))
          {
            if (v47)
              continue;
LABEL_72:
            std::__introsort<std::_ClassicAlgPolicy,webrtc::PacketResult::ReceiveTimeOrder &,webrtc::PacketResult*,false>(a1, i - 80, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (_OWORD *)(i - 80);
          if (v47)
            return;
          goto LABEL_1;
        }
        v70 = (_OWORD *)(i + 80);
        v71 = (_OWORD *)i == a2 || v70 == a2;
        v72 = v71;
        if ((a4 & 1) != 0)
        {
          if ((v72 & 1) != 0)
            return;
          v73 = 0;
          v74 = i;
LABEL_148:
          v76 = v74;
          v74 = (unint64_t)v70;
          v77 = *(_QWORD *)(v76 + 152);
          v78 = *(_QWORD *)(v76 + 72);
          if (v77 == v78)
          {
            v79 = *(_QWORD *)v74;
            if (*(_QWORD *)v74 == *(_QWORD *)v76)
            {
              if (*(_QWORD *)(v76 + 136) >= *(_QWORD *)(v76 + 56))
                goto LABEL_147;
            }
            else if (*(_QWORD *)v74 >= *(_QWORD *)v76)
            {
              goto LABEL_147;
            }
          }
          else
          {
            if (v77 >= v78)
              goto LABEL_147;
            v79 = *(_QWORD *)v74;
          }
          v198 = *(_OWORD *)(v76 + 104);
          v206 = *(_OWORD *)(v76 + 120);
          v190 = *(_OWORD *)(v76 + 88);
          v80 = *(_OWORD *)(v76 + 136);
          v81 = *(_OWORD *)(v76 + 64);
          v82 = *(_OWORD *)(v76 + 16);
          *(_OWORD *)v74 = *(_OWORD *)v76;
          *(_OWORD *)(v74 + 16) = v82;
          v83 = *(_OWORD *)(v76 + 32);
          *(_OWORD *)(v74 + 48) = *(_OWORD *)(v76 + 48);
          *(_OWORD *)(v74 + 64) = v81;
          *(_OWORD *)(v74 + 32) = v83;
          v75 = i;
          if (v76 == i)
            goto LABEL_146;
          v84 = v73;
          while (1)
          {
            v87 = (_OWORD *)(i + v84);
            v88 = (_QWORD *)(i + v84 - 80);
            v89 = *(_QWORD *)(i + v84 - 8);
            v90 = v77 < v89;
            if (v77 == v89 && (v90 = v79 < *v88, v79 == *v88))
            {
              v75 = i + v84;
              if ((uint64_t)v80 >= *(_QWORD *)(i + v84 - 24))
                goto LABEL_146;
            }
            else if (!v90)
            {
              v75 = v76;
LABEL_146:
              *(_QWORD *)v75 = v79;
              *(_OWORD *)(v75 + 40) = v206;
              *(_OWORD *)(v75 + 24) = v198;
              *(_OWORD *)(v75 + 8) = v190;
              *(_OWORD *)(v75 + 56) = v80;
              *(_QWORD *)(v75 + 72) = v77;
LABEL_147:
              v70 = (_OWORD *)(v74 + 80);
              v73 += 80;
              if ((_OWORD *)(v74 + 80) == a2)
                return;
              goto LABEL_148;
            }
            v76 -= 80;
            v85 = *(_OWORD *)(i + v84 - 32);
            v87[2] = *(_OWORD *)(i + v84 - 48);
            v87[3] = v85;
            v87[4] = *(_OWORD *)(i + v84 - 16);
            v86 = *(_OWORD *)(i + v84 - 64);
            *v87 = *(_OWORD *)v88;
            v87[1] = v86;
            v84 -= 80;
            if (!v84)
            {
              v75 = i;
              goto LABEL_146;
            }
          }
        }
        if ((v72 & 1) == 0)
        {
          v158 = 0;
          v159 = -1;
          v160 = 1;
          v161 = i;
          do
          {
            v162 = v158;
            v158 = v160;
            v163 = *(_QWORD *)(v161 + 152);
            v164 = *(_QWORD *)(i + 80 * v162 + 72);
            if (v163 == v164)
            {
              v165 = *(_QWORD *)v70;
              if (*(_QWORD *)v70 == *(_QWORD *)v161)
              {
                if (*((_QWORD *)v70 + 7) < *(_QWORD *)(v161 + 56))
                  goto LABEL_244;
              }
              else if (*(_QWORD *)v70 < *(_QWORD *)v161)
              {
                goto LABEL_244;
              }
            }
            else if (v163 < v164)
            {
              v165 = *(_QWORD *)v70;
LABEL_244:
              v202 = *(_OWORD *)(v161 + 104);
              v210 = *(_OWORD *)(v161 + 120);
              v194 = *(_OWORD *)(v161 + 88);
              v166 = *(_OWORD *)(v161 + 136);
              v167 = (_OWORD *)(i + 80 * v162);
              *v70 = *v167;
              v168 = v167[4];
              v170 = v167[1];
              v169 = v167[2];
              v70[3] = v167[3];
              v70[4] = v168;
              v70[1] = v170;
              v70[2] = v169;
              v171 = v159;
              v172 = v161;
              while (1)
              {
                v173 = (_QWORD *)(v172 - 80);
                v174 = *(_QWORD *)(v172 - 8);
                v175 = v163 < v174;
                if (v163 == v174)
                {
                  v175 = v165 < *v173;
                  if (v165 == *v173)
                    v175 = (uint64_t)v166 < *(_QWORD *)(v172 - 24);
                }
                if (!v175)
                  break;
                v176 = *(_OWORD *)(v172 - 32);
                *(_OWORD *)(v172 + 32) = *(_OWORD *)(v172 - 48);
                *(_OWORD *)(v172 + 48) = v176;
                *(_OWORD *)(v172 + 64) = *(_OWORD *)(v172 - 16);
                v177 = *(_OWORD *)(v172 - 64);
                *(_OWORD *)v172 = *(_OWORD *)v173;
                *(_OWORD *)(v172 + 16) = v177;
                v172 -= 80;
                v36 = __CFADD__(v171++, 1);
                if (v36)
                  goto LABEL_252;
              }
              *(_QWORD *)v172 = v165;
              *(_OWORD *)(v172 + 40) = v210;
              *(_OWORD *)(v172 + 24) = v202;
              *(_OWORD *)(v172 + 8) = v194;
              *(_OWORD *)(v172 + 56) = v166;
              *(_QWORD *)(v172 + 72) = v163;
            }
            v161 += 80;
            v160 = v158 + 1;
            v70 = (_OWORD *)(i + 80 * (v158 + 1));
            --v159;
          }
          while (v70 != a2);
        }
        return;
    }
  }
}

  v488 = (std::string *)(a2 - 32);
  v482 = a2 - 96;
  v483 = a2 - 64;
  v493 = a2;
  while (2)
  {
    v484 = a4;
LABEL_3:
    v10 = a1;
    v11 = a2 - a1;
    v12 = (uint64_t)(a2 - a1) >> 5;
    __dst = (std::string *)v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(char *)(a2 - 9) < 0)
        {
          v215 = *(_QWORD *)(a2 - 24);
          if ((v215 & 0x8000000000000000) != 0)
            goto LABEL_1084;
          v216 = (std::string *)v488->__r_.__value_.__r.__words[0];
          v5 = v10;
          if (v215)
          {
            if (!v216)
              goto LABEL_1084;
          }
        }
        else
        {
          v215 = *(unsigned __int8 *)(a2 - 9);
          v216 = v488;
          v5 = v10;
        }
        if (*(char *)(v5 + 23) < 0)
        {
          v432 = *(_QWORD *)(v5 + 8);
          if ((v432 & 0x8000000000000000) != 0)
            goto LABEL_1084;
          v433 = *(const void **)v5;
          if (v432)
          {
            if (!v433)
              goto LABEL_1084;
          }
        }
        else
        {
          v432 = *(unsigned __int8 *)(v5 + 23);
          v433 = (const void *)v5;
        }
        if (v432 >= v215)
          v434 = v215;
        else
          v434 = v432;
        v435 = memcmp(v216, v433, v434);
        if (v435)
        {
          v436 = (std::string *)v5;
          if (v435 < 0)
            goto LABEL_1086;
        }
        else
        {
          v4 = v215 >= v432;
          if (v215 != v432)
            goto LABEL_1085;
          v437 = *(unsigned __int8 *)(a2 - 4);
          v438 = *(unsigned __int8 *)(v5 + 28);
          v439 = v437 == v438;
          if (v437 >= v438)
            v440 = 1;
          else
            v440 = -1;
          if (v439)
          {
            v441 = *(_DWORD *)(a2 - 8);
            v442 = *(_DWORD *)(v5 + 24);
            v443 = v441 == v442;
            v30 = v441 < v442;
            v440 = -1;
            if (!v30)
              v440 = 1;
            if (v443)
              v440 = 0;
          }
          v436 = (std::string *)v10;
          if (v440 < 0)
            goto LABEL_1086;
        }
        return;
      case 3uLL:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v10, (const void **)(v10 + 32), (uint64_t)v488);
        return;
      case 4uLL:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v10, v10 + 32, v10 + 64, (uint64_t)v488);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,0>(v10, v10 + 32, v10 + 64, v10 + 96, (uint64_t)v488);
        return;
      default:
        if (v11 <= 767)
        {
          if ((a4 & 1) == 0)
          {
            if (v10 == a2)
              return;
            v297 = (char *)v10;
            v298 = (char *)(v10 + 32);
            v4 = (unint64_t)v298 >= a2;
            if (v298 == (char *)a2)
              return;
            v299 = 0;
            v488 = (std::string *)(v297 + 23);
            v300 = v297 - 32;
            v301 = -2;
            v302 = 1;
            while (1)
            {
              v5 = v299;
              v299 = v302;
              v447 = v297[55];
              v448 = v298;
              v449 = v447;
              if (v447 < 0)
              {
                v449 = *((_QWORD *)v298 + 1);
                if ((v449 & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v448 = *(const std::string::value_type **)v298;
                if (v449)
                {
                  v4 = 1;
                  v450 = v448 == 0;
                }
                else
                {
                  v4 = 0;
                  v450 = 0;
                }
                if (v450)
                  goto LABEL_1084;
              }
              if (v297[23] < 0)
              {
                v451 = *((_QWORD *)v297 + 1);
                if ((v451 & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v452 = *(const void **)v297;
                if (v451)
                {
                  if (!v452)
                    goto LABEL_1084;
                }
              }
              else
              {
                v451 = v297[23];
                v452 = v297;
              }
              v453 = (signed int *)(v297 + 56);
              if (v451 >= v449)
                v454 = v449;
              else
                v454 = v451;
              v455 = memcmp(v448, v452, v454);
              if (v455)
              {
                if (v455 < 0)
                  goto LABEL_1031;
              }
              else
              {
                if (v449 == v451)
                {
                  v456 = (char *)__dst + 32 * v5;
                  v457 = v297[60];
                  v458 = v456[28];
                  v459 = v457 == v458;
                  if (v457 >= v458)
                    v460 = 1;
                  else
                    v460 = -1;
                  if (v459)
                  {
                    v461 = *((_DWORD *)v456 + 6);
                    v462 = *v453 == v461;
                    v460 = *v453 >= v461 ? 1 : -1;
                    if (v462)
                      v460 = 0;
                  }
                  if ((v460 & 0x80) == 0)
                    goto LABEL_999;
LABEL_1031:
                  if (v447 < 0)
                  {
                    std::string::__init_copy_ctor_external(&v500, *(const std::string::value_type **)v298, *((_QWORD *)v298 + 1));
                  }
                  else
                  {
                    v463 = *(_OWORD *)v298;
                    v500.__r_.__value_.__r.__words[2] = *((_QWORD *)v298 + 2);
                    *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v463;
                  }
                  v501 = *v453;
                  v502 = v297[60];
                  v464 = v488->__r_.__value_.__s.__data_[32 * v5];
                  v465 = v301;
                  v466 = v300;
                  while (2)
                  {
                    v468 = v466;
                    v469 = (std::string *)(v466 + 64);
                    if (v466[87] < 0)
                    {
                      if ((v464 & 0x80u) == 0)
                        v470 = v466 + 32;
                      else
                        v470 = (const std::string::value_type *)*((_QWORD *)v466 + 4);
                      if ((v464 & 0x80u) == 0)
                        v471 = v464;
                      else
                        v471 = *((_QWORD *)v466 + 5);
                      std::string::__assign_no_alias<false>(v469, v470, v471);
                      *((_DWORD *)v468 + 22) = *((_DWORD *)v468 + 14);
                      v468[92] = v468[60];
                      v4 = __CFADD__(v465++, 1);
                      if (v4)
                        goto LABEL_1084;
                    }
                    else if ((char)v464 < 0)
                    {
                      std::string::__assign_no_alias<true>(v469, *((char **)v466 + 4), *((_QWORD *)v466 + 5));
                      *((_DWORD *)v468 + 22) = *((_DWORD *)v468 + 14);
                      v468[92] = v468[60];
                      v4 = __CFADD__(v465++, 1);
                      if (v4)
                        goto LABEL_1084;
                    }
                    else
                    {
                      *(_OWORD *)&v469->__r_.__value_.__l.__data_ = *((_OWORD *)v466 + 2);
                      *((_QWORD *)v466 + 10) = *((_QWORD *)v466 + 6);
                      *((_DWORD *)v466 + 22) = *((_DWORD *)v466 + 14);
                      v466[92] = v466[60];
                      v4 = __CFADD__(v465++, 1);
                      if (v4)
                        goto LABEL_1084;
                    }
                    v5 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                    {
                      size = v500.__r_.__value_.__l.__size_;
                      if ((v500.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v472 = (std::string *)v500.__r_.__value_.__r.__words[0];
                      if (v500.__r_.__value_.__l.__size_)
                      {
                        if (!v500.__r_.__value_.__r.__words[0])
                          goto LABEL_1084;
                      }
                    }
                    else
                    {
                      v472 = &v500;
                      size = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                    }
                    v464 = v468[23];
                    if (v468[23] < 0)
                    {
                      v475 = *((_QWORD *)v468 + 1);
                      if ((v475 & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v474 = *(char **)v468;
                      if (v475)
                      {
                        if (!v474)
                          goto LABEL_1084;
                      }
                    }
                    else
                    {
                      v474 = v468;
                      v475 = v468[23];
                    }
                    if (v475 >= size)
                      v476 = size;
                    else
                      v476 = v475;
                    v477 = memcmp(v472, v474, v476);
                    if (v477)
                    {
                      if ((v477 & 0x80000000) == 0)
                        goto LABEL_1079;
                    }
                    else
                    {
                      if (size == v475)
                      {
                        v478 = v468[28];
                        if (v502 >= v478)
                          v467 = 1;
                        else
                          v467 = -1;
                        if (v502 == v478)
                        {
                          v479 = *((_DWORD *)v468 + 6);
                          v467 = v501 >= v479 ? 1 : -1;
                          if (v501 == v479)
                            v467 = 0;
                        }
LABEL_1037:
                        v466 = v468 - 32;
                        if ((v467 & 0x80) == 0)
                          goto LABEL_1079;
                        continue;
                      }
                      if (size >= v475)
                      {
LABEL_1079:
                        v480 = (std::string *)(v468 + 32);
                        if (v468 + 32 != (char *)&v500)
                        {
                          if (v468[55] < 0)
                          {
                            if ((v5 & 0x80u) == 0)
                              v444 = &v500;
                            else
                              v444 = (std::string *)v500.__r_.__value_.__r.__words[0];
                            if ((v5 & 0x80u) == 0)
                              v445 = v5;
                            else
                              v445 = v500.__r_.__value_.__l.__size_;
                            std::string::__assign_no_alias<false>(v480, (const std::string::value_type *)v444, v445);
                          }
                          else if ((v5 & 0x80) != 0)
                          {
                            std::string::__assign_no_alias<true>(v480, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            v481 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
                            *((_QWORD *)v468 + 6) = *((_QWORD *)&v500.__r_.__value_.__l + 2);
                            *(_OWORD *)&v480->__r_.__value_.__l.__data_ = v481;
                          }
                        }
                        v446 = v501;
                        v468[60] = v502;
                        *((_DWORD *)v468 + 14) = v446;
                        if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v500.__r_.__value_.__l.__data_);
                        goto LABEL_999;
                      }
                    }
                    break;
                  }
                  v467 = -1;
                  goto LABEL_1037;
                }
                if (v449 < v451)
                  goto LABEL_1031;
              }
LABEL_999:
              v297 = (char *)__dst + 32 * v299;
              v302 = v299 + 1;
              v298 = &__dst[1].__r_.__value_.__s.__data_[32 * v299 + 8];
              v300 += 32;
              --v301;
              v4 = (unint64_t)v298 >= v493;
              if (v298 == (char *)v493)
                return;
            }
          }
          if (v10 == a2)
            return;
          v217 = (const void **)(v10 + 32);
          v4 = v10 + 32 >= a2;
          if (v10 + 32 == a2)
            return;
          v5 = 0;
          v218 = v10;
LABEL_688:
          v306 = v218;
          v218 = (unint64_t)v217;
          v307 = *(_BYTE *)(v306 + 55);
          v308 = v217;
          v309 = v307;
          if ((char)v307 < 0)
          {
            v309 = *(_QWORD *)(v306 + 40);
            if ((v309 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v308 = *v217;
            if (v309)
            {
              v4 = 1;
              v310 = v308 == 0;
            }
            else
            {
              v4 = 0;
              v310 = 0;
            }
            if (v310)
              goto LABEL_1084;
          }
          if (*(char *)(v306 + 23) < 0)
          {
            v311 = *(_QWORD *)(v306 + 8);
            if ((v311 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v312 = *(const void **)v306;
            if (v311)
            {
              if (!v312)
                goto LABEL_1084;
            }
          }
          else
          {
            v311 = *(unsigned __int8 *)(v306 + 23);
            v312 = (const void *)v306;
          }
          if (v311 >= v309)
            v313 = v309;
          else
            v313 = v311;
          v314 = memcmp(v308, v312, v313);
          if (v314)
          {
            if ((v314 & 0x80000000) == 0)
              goto LABEL_687;
          }
          else
          {
            v4 = v309 >= v311;
            if (v309 == v311)
            {
              v315 = *(unsigned __int8 *)(v306 + 60);
              v316 = *(unsigned __int8 *)(v306 + 28);
              v4 = v315 >= v316;
              v317 = v315 == v316;
              if (v315 >= v316)
                v318 = 1;
              else
                v318 = -1;
              if (v317)
              {
                v319 = *(_DWORD *)(v306 + 56);
                v320 = *(_DWORD *)(v306 + 24);
                v4 = v319 >= v320;
                v321 = v319 == v320;
                v318 = (int)v319 >= (int)v320 ? 1 : -1;
                if (v321)
                  v318 = 0;
              }
              if ((v318 & 0x80) == 0)
                goto LABEL_687;
            }
            else if (v309 >= v311)
            {
              goto LABEL_687;
            }
          }
          if ((v307 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&v500, *(const std::string::value_type **)v218, *(_QWORD *)(v306 + 40));
          }
          else
          {
            v322 = *(_OWORD *)v218;
            v500.__r_.__value_.__r.__words[2] = *(_QWORD *)(v218 + 16);
            *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v322;
          }
          v501 = *(_DWORD *)(v306 + 56);
          v502 = *(_BYTE *)(v306 + 60);
          v323 = v5;
          while (1)
          {
            v325 = v323;
            v326 = (char *)__dst + v323;
            v327 = (std::string *)((char *)__dst + v323 + 32);
            v328 = __dst[2].__r_.__value_.__s.__data_[v323 + 7];
            v329 = *((unsigned __int8 *)&__dst->__r_.__value_.__r.__words[2] + v323 + 7);
            if (v328 < 0)
            {
              if ((v329 & 0x80u) == 0)
                v331 = v326;
              else
                v331 = *(const std::string::value_type **)v326;
              if ((v329 & 0x80u) == 0)
                v332 = v329;
              else
                v332 = *((_QWORD *)v326 + 1);
              std::string::__assign_no_alias<false>(v327, v331, v332);
              v330 = (char *)__dst + v325;
              *((_DWORD *)v330 + 14) = *(_DWORD *)((char *)&__dst[1].__r_.__value_.__l.__data_ + v325);
              v330[60] = __dst[1].__r_.__value_.__s.__data_[v325 + 4];
              if (!v325)
              {
LABEL_767:
                v341 = __dst;
                if (__dst != &v500)
                  goto LABEL_768;
                goto LABEL_685;
              }
            }
            else if ((v329 & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v327, *(char **)((char *)&__dst->__r_.__value_.__l.__data_ + v325), *(std::string::size_type *)((char *)&__dst->__r_.__value_.__l.__size_ + v325));
              v330 = (char *)__dst + v325;
              *((_DWORD *)v330 + 14) = *(_DWORD *)((char *)&__dst[1].__r_.__value_.__l.__data_ + v325);
              v330[60] = __dst[1].__r_.__value_.__s.__data_[v325 + 4];
              if (!v325)
                goto LABEL_767;
            }
            else
            {
              *(_OWORD *)&v327->__r_.__value_.__l.__data_ = *(_OWORD *)v326;
              v327->__r_.__value_.__r.__words[2] = *((_QWORD *)v326 + 2);
              v330 = (char *)__dst + v325;
              *((_DWORD *)v330 + 14) = *(_DWORD *)((char *)&__dst[1].__r_.__value_.__l.__data_ + v325);
              v330[60] = __dst[1].__r_.__value_.__s.__data_[v325 + 4];
              if (!v325)
                goto LABEL_767;
            }
            if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
            {
              v333 = v500.__r_.__value_.__l.__size_;
              if ((v500.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v334 = (std::string *)v500.__r_.__value_.__r.__words[0];
              if (v500.__r_.__value_.__l.__size_)
              {
                if (!v500.__r_.__value_.__r.__words[0])
                  goto LABEL_1084;
              }
            }
            else
            {
              v333 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
              v334 = &v500;
            }
            v335 = v330 - 32;
            if (__dst->__r_.__value_.__s.__data_[v325 - 9] < 0)
            {
              v336 = *(std::string::size_type *)((char *)__dst[-1].__r_.__value_.__r.__words + v325);
              if ((v336 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v335 = *(char **)v335;
              if (v336)
              {
                if (!v335)
                  goto LABEL_1084;
              }
            }
            else
            {
              v336 = __dst->__r_.__value_.__s.__data_[v325 - 9];
            }
            if (v336 >= v333)
              v337 = v333;
            else
              v337 = v336;
            v338 = memcmp(v334, v335, v337);
            if (v338)
            {
              if ((v338 & 0x80000000) == 0)
                goto LABEL_765;
            }
            else
            {
              v4 = v333 >= v336;
              if (v333 == v336)
              {
                v339 = *(v330 - 4);
                v4 = v502 >= v339;
                if (v502 >= v339)
                  v324 = 1;
                else
                  v324 = -1;
                if (v502 == v339)
                {
                  v340 = *((_DWORD *)v330 - 2);
                  v4 = v501 >= v340;
                  v324 = v501 >= (int)v340 ? 1 : -1;
                  if (v501 == v340)
                    v324 = 0;
                }
                goto LABEL_725;
              }
              if (v333 >= v336)
              {
LABEL_765:
                v341 = (std::string *)((char *)__dst + v325);
                if ((std::string *)((char *)__dst + v325) != &v500)
                {
LABEL_768:
                  if (SHIBYTE(v341->__r_.__value_.__r.__words[2]) < 0)
                  {
                    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v303 = &v500;
                    else
                      v303 = (std::string *)v500.__r_.__value_.__r.__words[0];
                    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v304 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                    else
                      v304 = v500.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>(v341, (const std::string::value_type *)v303, v304);
                  }
                  else if ((*((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v341, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v342 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
                    v341->__r_.__value_.__r.__words[2] = v500.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v341->__r_.__value_.__l.__data_ = v342;
                  }
                }
LABEL_685:
                v305 = v501;
                v330[28] = v502;
                *((_DWORD *)v330 + 6) = v305;
                if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v500.__r_.__value_.__l.__data_);
LABEL_687:
                v217 = (const void **)(v218 + 32);
                v5 += 32;
                v4 = v218 + 32 >= v493;
                if (v218 + 32 == v493)
                  return;
                goto LABEL_688;
              }
            }
            v324 = -1;
LABEL_725:
            v323 = v325 - 32;
            if ((v324 & 0x80) == 0)
              goto LABEL_765;
          }
        }
        if (!a3)
        {
          if (v10 == a2)
            return;
          v219 = (v12 - 2) >> 1;
          v492 = v219;
          while (1)
          {
            v223 = v219;
            if (v492 < v219)
              goto LABEL_519;
            v224 = (2 * v219) | 1;
            v225 = (std::string *)((char *)__dst + 32 * v224);
            v5 = 2 * v219 + 2;
            v4 = v5 >= v12;
            v488 = (std::string *)v219;
            if ((uint64_t)v5 >= (uint64_t)v12)
              goto LABEL_542;
            if (SHIBYTE(v225->__r_.__value_.__r.__words[2]) < 0)
            {
              v226 = v225->__r_.__value_.__l.__size_;
              if ((v226 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v227 = (char *)v225->__r_.__value_.__r.__words[0];
              if (v226)
              {
                v4 = 1;
                v228 = v227 == 0;
              }
              else
              {
                v4 = 0;
                v228 = 0;
              }
              if (v228)
                goto LABEL_1084;
            }
            else
            {
              v226 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
              v227 = (char *)__dst + 32 * v224;
            }
            if (v225[2].__r_.__value_.__s.__data_[7] < 0)
            {
              v229 = v225[1].__r_.__value_.__r.__words[2];
              if ((v229 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              p_size = (std::string::size_type *)v225[1].__r_.__value_.__l.__size_;
              if (v229)
              {
                v4 = 1;
                v231 = p_size == 0;
              }
              else
              {
                v4 = 0;
                v231 = 0;
              }
              if (v231)
                goto LABEL_1084;
            }
            else
            {
              v229 = v225[2].__r_.__value_.__s.__data_[7];
              p_size = &v225[1].__r_.__value_.__l.__size_;
            }
            v232 = v229 >= v226 ? v226 : v229;
            v233 = memcmp(v227, p_size, v232);
            if (!v233)
              break;
            v223 = (int64_t)v488;
            if (v233 < 0)
              goto LABEL_541;
LABEL_542:
            if (SHIBYTE(v225->__r_.__value_.__r.__words[2]) < 0)
            {
              v234 = v225->__r_.__value_.__l.__size_;
              if ((v234 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v235 = (char *)v225->__r_.__value_.__r.__words[0];
              if (v234)
              {
                v4 = 1;
                v236 = v235 == 0;
              }
              else
              {
                v4 = 0;
                v236 = 0;
              }
              if (v236)
                goto LABEL_1084;
            }
            else
            {
              v234 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
              v235 = (char *)v225;
            }
            v237 = (std::string *)((char *)__dst + 32 * v223);
            v5 = HIBYTE(v237->__r_.__value_.__r.__words[2]);
            v238 = (const std::string::value_type *)v237;
            v239 = v5;
            if (SHIBYTE(v237->__r_.__value_.__r.__words[2]) < 0)
            {
              v239 = v237->__r_.__value_.__l.__size_;
              if ((v239 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v238 = (const std::string::value_type *)v237->__r_.__value_.__r.__words[0];
              if (v239)
              {
                if (!v238)
                  goto LABEL_1084;
              }
            }
            v240 = (char *)__dst + 32 * v223;
            v241 = (int *)(v240 + 24);
            if (v239 >= v234)
              v242 = v234;
            else
              v242 = v239;
            v243 = memcmp(v235, v238, v242);
            if (v243)
            {
              v223 = (int64_t)v488;
              if (v243 < 0)
                goto LABEL_519;
LABEL_558:
              if ((v5 & 0x80) != 0)
              {
                std::string::__init_copy_ctor_external(&v500, v237->__r_.__value_.__l.__data_, v237->__r_.__value_.__l.__size_);
              }
              else
              {
                v244 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
                v500.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v244;
              }
              v251 = *v241;
              v502 = v240[28];
              v501 = v251;
              v252 = __dst;
              while (1)
              {
                v254 = v225;
                if (v237 != v225)
                {
                  v255 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v237->__r_.__value_.__r.__words[2]) < 0)
                  {
                    if (v255 >= 0)
                      v257 = (const std::string::value_type *)v225;
                    else
                      v257 = (const std::string::value_type *)v225->__r_.__value_.__r.__words[0];
                    if (v255 >= 0)
                      v258 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
                    else
                      v258 = v225->__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>(v237, v257, v258);
                  }
                  else if ((*((_BYTE *)&v225->__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v237, v225->__r_.__value_.__l.__data_, v225->__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v256 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
                    v237->__r_.__value_.__r.__words[2] = v225->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v237->__r_.__value_.__l.__data_ = v256;
                  }
                }
                v5 = (unint64_t)&v225[1];
                data = (int)v225[1].__r_.__value_.__l.__data_;
                v237[1].__r_.__value_.__s.__data_[4] = v225[1].__r_.__value_.__s.__data_[4];
                LODWORD(v237[1].__r_.__value_.__l.__data_) = data;
                if (v492 < v224)
                {
LABEL_653:
                  if (v254 != &v500)
                  {
                    if (SHIBYTE(v254->__r_.__value_.__r.__words[2]) < 0)
                    {
                      if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v220 = &v500;
                      else
                        v220 = (std::string *)v500.__r_.__value_.__r.__words[0];
                      if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v221 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                      else
                        v221 = v500.__r_.__value_.__l.__size_;
                      std::string::__assign_no_alias<false>(v254, (const std::string::value_type *)v220, v221);
                    }
                    else if ((*((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x80) != 0)
                    {
                      std::string::__assign_no_alias<true>(v254, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v289 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
                      v254->__r_.__value_.__r.__words[2] = v500.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v254->__r_.__value_.__l.__data_ = v289;
                    }
                  }
                  v222 = v501;
                  v254[1].__r_.__value_.__s.__data_[4] = v502;
                  *(_DWORD *)v5 = v222;
                  if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v500.__r_.__value_.__l.__data_);
                  v223 = (int64_t)v488;
                  goto LABEL_519;
                }
                v260 = 2 * v224;
                v224 = (2 * v224) | 1;
                v225 = (std::string *)((char *)v252 + 32 * v224);
                v261 = v260 + 2;
                v4 = v260 + 2 >= v12;
                if (v260 + 2 >= (uint64_t)v12)
                  break;
                if (SHIBYTE(v225->__r_.__value_.__r.__words[2]) < 0)
                {
                  v262 = v225->__r_.__value_.__l.__size_;
                  if ((v262 & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v263 = (char *)v225->__r_.__value_.__r.__words[0];
                  if (v262)
                  {
                    v4 = 1;
                    v264 = v263 == 0;
                  }
                  else
                  {
                    v4 = 0;
                    v264 = 0;
                  }
                  if (v264)
                    goto LABEL_1084;
                }
                else
                {
                  v262 = HIBYTE(v225->__r_.__value_.__r.__words[2]);
                  v263 = (char *)v225;
                }
                v265 = &v225[1].__r_.__value_.__s.__data_[8];
                if (v225[2].__r_.__value_.__s.__data_[7] < 0)
                {
                  v266 = v225[1].__r_.__value_.__r.__words[2];
                  if ((v266 & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v267 = *(std::string::size_type **)v265;
                  if (v266)
                  {
                    if (!v267)
                      goto LABEL_1084;
                  }
                }
                else
                {
                  v266 = v225[2].__r_.__value_.__s.__data_[7];
                  v267 = &v225[1].__r_.__value_.__l.__size_;
                }
                if (v266 >= v262)
                  v268 = v262;
                else
                  v268 = v266;
                v269 = memcmp(v263, v267, v268);
                if (v269)
                {
                  if ((v269 & 0x80000000) == 0)
                    break;
                }
                else
                {
                  v4 = v262 >= v266;
                  if (v262 == v266)
                  {
                    v273 = v225[1].__r_.__value_.__s.__data_[4];
                    v274 = v225[2].__r_.__value_.__s.__data_[12];
                    v4 = v273 >= v274;
                    v275 = v273 == v274;
                    if (v273 >= v274)
                      v276 = 1;
                    else
                      v276 = -1;
                    if (v275)
                    {
                      v277 = v225[1].__r_.__value_.__l.__data_;
                      v278 = v225[2].__r_.__value_.__r.__words[1];
                      v4 = v277 >= v278;
                      v279 = v277 == v278;
                      v276 = (int)v277 >= (int)v278 ? 1 : -1;
                      if (v279)
                        v276 = 0;
                    }
                    if ((v276 & 0x80) == 0)
                      break;
                  }
                  else if (v262 >= v266)
                  {
                    break;
                  }
                }
                v225 = (std::string *)((char *)v225 + 32);
                v224 = v261;
                v270 = v265[23];
                if ((v270 & 0x80000000) == 0)
                {
LABEL_610:
                  v271 = v270;
                  v272 = (char *)v225;
                  goto LABEL_631;
                }
LABEL_626:
                v271 = v225->__r_.__value_.__l.__size_;
                if ((v271 & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v272 = (char *)v225->__r_.__value_.__r.__words[0];
                if (v271)
                {
                  v4 = 1;
                  v280 = v272 == 0;
                }
                else
                {
                  v4 = 0;
                  v280 = 0;
                }
                if (v280)
                  goto LABEL_1084;
LABEL_631:
                if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                {
                  v281 = v500.__r_.__value_.__l.__size_;
                  if ((v500.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v282 = (std::string *)v500.__r_.__value_.__r.__words[0];
                  v252 = __dst;
                  if (v500.__r_.__value_.__l.__size_)
                  {
                    if (!v500.__r_.__value_.__r.__words[0])
                      goto LABEL_1084;
                  }
                }
                else
                {
                  v281 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                  v282 = &v500;
                  v252 = __dst;
                }
                if (v281 >= v271)
                  v283 = v271;
                else
                  v283 = v281;
                v284 = memcmp(v272, v282, v283);
                if (v284)
                {
                  if (v284 < 0)
                    goto LABEL_653;
                }
                else
                {
                  if (v271 == v281)
                  {
                    v285 = v225[1].__r_.__value_.__s.__data_[4];
                    v286 = v285 == v502;
                    if (v285 >= v502)
                      v253 = 1;
                    else
                      v253 = -1;
                    if (v286)
                    {
                      v287 = (int)v225[1].__r_.__value_.__l.__data_;
                      v288 = v287 == v501;
                      v253 = v287 >= v501 ? 1 : -1;
                      if (v288)
                        v253 = 0;
                    }
                    goto LABEL_577;
                  }
                  if (v271 < v281)
                    goto LABEL_653;
                }
                v253 = 1;
LABEL_577:
                v237 = v254;
                if (v253 < 0)
                  goto LABEL_653;
              }
              v270 = SHIBYTE(v225->__r_.__value_.__r.__words[2]);
              if ((v270 & 0x80000000) == 0)
                goto LABEL_610;
              goto LABEL_626;
            }
            if (v234 != v239)
            {
              v223 = (int64_t)v488;
              if (v234 < v239)
                goto LABEL_519;
              goto LABEL_558;
            }
            v245 = v225[1].__r_.__value_.__s.__data_[4];
            v246 = v240[28];
            v247 = v245 == v246;
            if (v245 >= v246)
              v248 = 1;
            else
              v248 = -1;
            if (v247)
            {
              v249 = (int)v225[1].__r_.__value_.__l.__data_;
              v250 = v249 == *v241;
              v248 = v249 >= *v241 ? 1 : -1;
              if (v250)
                v248 = 0;
            }
            v223 = (int64_t)v488;
            if ((v248 & 0x80) == 0)
              goto LABEL_558;
LABEL_519:
            v219 = v223 - 1;
            if (!v223)
            {
              v343 = (unint64_t)v11 >> 5;
              v345 = (std::string *)v493;
              v344 = __dst;
              v488 = __dst + 1;
              while (1)
              {
                if (SHIBYTE(v344->__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(&v497, v344->__r_.__value_.__l.__data_, v344->__r_.__value_.__l.__size_);
                }
                else
                {
                  v346 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
                  v497.__r_.__value_.__r.__words[2] = v344->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v497.__r_.__value_.__l.__data_ = v346;
                }
                v347 = 0;
                v348 = (int)v488->__r_.__value_.__l.__data_;
                v499 = __dst[1].__r_.__value_.__s.__data_[4];
                v498 = v348;
                do
                {
                  v5 = (unint64_t)v344;
                  v344 = (std::string *)((char *)v344 + 32 * v347 + 32);
                  v353 = 2 * v347;
                  v347 = (2 * v347) | 1;
                  v354 = v353 + 2;
                  v4 = v353 + 2 >= (unint64_t)v343;
                  if (v353 + 2 >= v343)
                    goto LABEL_807;
                  if (SHIBYTE(v344->__r_.__value_.__r.__words[2]) < 0)
                  {
                    v355 = v344->__r_.__value_.__l.__size_;
                    if ((v355 & 0x8000000000000000) != 0)
                      goto LABEL_1084;
                    v356 = (const std::string::value_type *)v344->__r_.__value_.__r.__words[0];
                    if (v355)
                    {
                      v4 = 1;
                      v357 = v356 == 0;
                    }
                    else
                    {
                      v4 = 0;
                      v357 = 0;
                    }
                    if (v357)
                      goto LABEL_1084;
                  }
                  else
                  {
                    v355 = HIBYTE(v344->__r_.__value_.__r.__words[2]);
                    v356 = (const std::string::value_type *)v344;
                  }
                  if (v344[2].__r_.__value_.__s.__data_[7] < 0)
                  {
                    v358 = v344[1].__r_.__value_.__r.__words[2];
                    if ((v358 & 0x8000000000000000) != 0)
                      goto LABEL_1084;
                    v359 = (std::string::size_type *)v344[1].__r_.__value_.__l.__size_;
                    if (v358)
                    {
                      v4 = 1;
                      v360 = v359 == 0;
                    }
                    else
                    {
                      v4 = 0;
                      v360 = 0;
                    }
                    if (v360)
                      goto LABEL_1084;
                  }
                  else
                  {
                    v358 = v344[2].__r_.__value_.__s.__data_[7];
                    v359 = &v344[1].__r_.__value_.__l.__size_;
                  }
                  if (v358 >= v355)
                    v361 = v355;
                  else
                    v361 = v358;
                  v362 = memcmp(v356, v359, v361);
                  if (v362)
                  {
                    if ((v362 & 0x80000000) == 0)
                      goto LABEL_807;
LABEL_806:
                    v344 = (std::string *)((char *)v344 + 32);
                    v347 = v354;
                    goto LABEL_807;
                  }
                  if (v355 == v358)
                  {
                    v366 = v344[1].__r_.__value_.__s.__data_[4];
                    v367 = v344[2].__r_.__value_.__s.__data_[12];
                    v368 = v366 == v367;
                    if (v366 >= v367)
                      v369 = 1;
                    else
                      v369 = -1;
                    if (v368)
                    {
                      v370 = (int)v344[1].__r_.__value_.__l.__data_;
                      v371 = v344[2].__r_.__value_.__r.__words[1];
                      v372 = v370 == v371;
                      v369 = v370 >= v371 ? 1 : -1;
                      if (v372)
                        v369 = 0;
                    }
                    if (v369 < 0)
                      goto LABEL_806;
                  }
                  else if (v355 < v358)
                  {
                    goto LABEL_806;
                  }
LABEL_807:
                  v363 = v345;
                  if ((std::string *)v5 != v344)
                  {
                    v364 = HIBYTE(v344->__r_.__value_.__r.__words[2]);
                    if (*(char *)(v5 + 23) < 0)
                    {
                      if (v364 >= 0)
                        v349 = (const std::string::value_type *)v344;
                      else
                        v349 = (const std::string::value_type *)v344->__r_.__value_.__r.__words[0];
                      if (v364 >= 0)
                        v350 = HIBYTE(v344->__r_.__value_.__r.__words[2]);
                      else
                        v350 = v344->__r_.__value_.__l.__size_;
                      std::string::__assign_no_alias<false>((std::string *)v5, v349, v350);
                    }
                    else if ((*((_BYTE *)&v344->__r_.__value_.__s + 23) & 0x80) != 0)
                    {
                      std::string::__assign_no_alias<true>((_QWORD *)v5, v344->__r_.__value_.__l.__data_, v344->__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v365 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
                      *(_QWORD *)(v5 + 16) = *((_QWORD *)&v344->__r_.__value_.__l + 2);
                      *(_OWORD *)v5 = v365;
                    }
                  }
                  v352 = (char *)&v344[1];
                  v351 = (int)v344[1].__r_.__value_.__l.__data_;
                  *(_BYTE *)(v5 + 28) = v344[1].__r_.__value_.__s.__data_[4];
                  *(_DWORD *)(v5 + 24) = v351;
                }
                while (v347 <= (uint64_t)((unint64_t)(v343 - 2) >> 1));
                v345 = (std::string *)((char *)v345 - 32);
                if (v344 == (std::string *)&v363[-2].__r_.__value_.__r.__words[2])
                {
                  if (v344 != &v497)
                  {
                    if (SHIBYTE(v344->__r_.__value_.__r.__words[2]) < 0)
                    {
                      if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v401 = &v497;
                      else
                        v401 = (std::string *)v497.__r_.__value_.__r.__words[0];
                      if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v402 = HIBYTE(v497.__r_.__value_.__r.__words[2]);
                      else
                        v402 = v497.__r_.__value_.__l.__size_;
                      std::string::__assign_no_alias<false>(v344, (const std::string::value_type *)v401, v402);
                    }
                    else if ((*((_BYTE *)&v497.__r_.__value_.__s + 23) & 0x80) != 0)
                    {
                      std::string::__assign_no_alias<true>(v344, v497.__r_.__value_.__l.__data_, v497.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v376 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
                      v344->__r_.__value_.__r.__words[2] = v497.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v344->__r_.__value_.__l.__data_ = v376;
                    }
                  }
                  v404 = &v498;
LABEL_898:
                  v405 = *v404;
                  v352[4] = *((_BYTE *)v404 + 4);
                  *(_DWORD *)v352 = v405;
                  goto LABEL_899;
                }
                v373 = v363[-1].__r_.__value_.__s.__data_[15];
                if (SHIBYTE(v344->__r_.__value_.__r.__words[2]) < 0)
                {
                  if (v373 >= 0)
                    v377 = &v363[-2].__r_.__value_.__s.__data_[16];
                  else
                    v377 = (const std::string::value_type *)v363[-2].__r_.__value_.__r.__words[2];
                  if (v373 >= 0)
                    v378 = v363[-1].__r_.__value_.__s.__data_[15];
                  else
                    v378 = v363[-1].__r_.__value_.__r.__words[0];
                  std::string::__assign_no_alias<false>(v344, v377, v378);
                  v374 = __dst;
                }
                else
                {
                  v374 = __dst;
                  if (v363[-1].__r_.__value_.__s.__data_[15] < 0)
                  {
                    std::string::__assign_no_alias<true>(v344, (char *)v363[-2].__r_.__value_.__r.__words[2], v363[-1].__r_.__value_.__r.__words[0]);
                  }
                  else
                  {
                    v375 = *(_OWORD *)&v345->__r_.__value_.__l.__data_;
                    v344->__r_.__value_.__r.__words[2] = v363[-1].__r_.__value_.__l.__size_;
                    *(_OWORD *)&v344->__r_.__value_.__l.__data_ = v375;
                  }
                }
                v379 = v363[-1].__r_.__value_.__r.__words[2];
                v344[1].__r_.__value_.__s.__data_[4] = v363[-1].__r_.__value_.__s.__data_[20];
                *(_DWORD *)v352 = v379;
                if (v345 != &v497)
                {
                  if (v363[-1].__r_.__value_.__s.__data_[15] < 0)
                  {
                    if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v381 = &v497;
                    else
                      v381 = (std::string *)v497.__r_.__value_.__r.__words[0];
                    if ((v497.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v382 = HIBYTE(v497.__r_.__value_.__r.__words[2]);
                    else
                      v382 = v497.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>((std::string *)((char *)v363 - 32), (const std::string::value_type *)v381, v382);
                  }
                  else if ((*((_BYTE *)&v497.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(&v363[-2].__r_.__value_.__r.__words[2], v497.__r_.__value_.__l.__data_, v497.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v380 = *(_OWORD *)&v497.__r_.__value_.__l.__data_;
                    v363[-1].__r_.__value_.__l.__size_ = v497.__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v345->__r_.__value_.__l.__data_ = v380;
                  }
                }
                v383 = v498;
                v363[-1].__r_.__value_.__s.__data_[20] = v499;
                LODWORD(v363[-1].__r_.__value_.__r.__words[2]) = v383;
                v384 = (char *)&v344[1].__r_.__value_.__r.__words[1] - (char *)v374;
                v4 = (unint64_t)v384 >= 0x21;
                if (v384 < 33)
                  goto LABEL_899;
                v385 = (((unint64_t)v384 >> 5) - 2) >> 1;
                v386 = (std::string *)((char *)__dst + 32 * v385);
                if ((SHIBYTE(v386->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  v387 = HIBYTE(v386->__r_.__value_.__r.__words[2]);
                  v388 = (char *)__dst + 32 * v385;
                  goto LABEL_863;
                }
                v387 = v386->__r_.__value_.__l.__size_;
                if ((v387 & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v388 = (char *)v386->__r_.__value_.__r.__words[0];
                if (v387)
                {
                  v4 = 1;
                  v389 = v388 == 0;
                }
                else
                {
                  v4 = 0;
                  v389 = 0;
                }
                if (v389)
                  goto LABEL_1084;
LABEL_863:
                v390 = HIBYTE(v344->__r_.__value_.__r.__words[2]);
                v391 = v344;
                v392 = v390;
                if ((char)v390 < 0)
                {
                  v392 = v344->__r_.__value_.__l.__size_;
                  if ((v392 & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v391 = (std::string *)v344->__r_.__value_.__r.__words[0];
                  if (v392)
                  {
                    if (!v391)
                      goto LABEL_1084;
                  }
                }
                if (v392 >= v387)
                  v393 = v387;
                else
                  v393 = v392;
                v394 = memcmp(v388, v391, v393);
                if (v394)
                {
                  if ((v394 & 0x80000000) == 0)
                    goto LABEL_899;
                }
                else if (v387 == v392)
                {
                  v395 = v386[1].__r_.__value_.__s.__data_[4];
                  v396 = v344[1].__r_.__value_.__s.__data_[4];
                  v397 = v395 == v396;
                  if (v395 >= v396)
                    v398 = 1;
                  else
                    v398 = -1;
                  if (v397)
                  {
                    v399 = (int)v386[1].__r_.__value_.__l.__data_;
                    v400 = v399 == *(_DWORD *)v352;
                    v398 = v399 >= *(_DWORD *)v352 ? 1 : -1;
                    if (v400)
                      v398 = 0;
                  }
                  if ((v398 & 0x80) == 0)
                    goto LABEL_899;
                }
                else if (v387 >= v392)
                {
                  goto LABEL_899;
                }
                if ((v390 & 0x80) != 0)
                {
                  std::string::__init_copy_ctor_external(&v500, v344->__r_.__value_.__l.__data_, v344->__r_.__value_.__l.__size_);
                }
                else
                {
                  v403 = *(_OWORD *)&v344->__r_.__value_.__l.__data_;
                  v500.__r_.__value_.__r.__words[2] = v344->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v403;
                }
                v406 = *(_DWORD *)v352;
                v502 = v344[1].__r_.__value_.__s.__data_[4];
                v501 = v406;
                while (2)
                {
                  v408 = v386;
                  v4 = v344 >= v386;
                  if (v344 == v386)
                    goto LABEL_918;
                  v409 = HIBYTE(v386->__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v344->__r_.__value_.__r.__words[2]) < 0)
                  {
                    if (v409 >= 0)
                      v412 = (const std::string::value_type *)v386;
                    else
                      v412 = (const std::string::value_type *)v386->__r_.__value_.__r.__words[0];
                    if (v409 >= 0)
                      v413 = HIBYTE(v386->__r_.__value_.__r.__words[2]);
                    else
                      v413 = v386->__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>(v344, v412, v413);
LABEL_918:
                    v352 = (char *)&v386[1];
                    v414 = (int)v386[1].__r_.__value_.__l.__data_;
                    v344[1].__r_.__value_.__s.__data_[4] = v386[1].__r_.__value_.__s.__data_[4];
                    LODWORD(v344[1].__r_.__value_.__l.__data_) = v414;
                    if (!v385)
                      goto LABEL_950;
LABEL_919:
                    v385 = (v385 - 1) >> 1;
                    v386 = (std::string *)((char *)__dst + 32 * v385);
                    if (SHIBYTE(v386->__r_.__value_.__r.__words[2]) < 0)
                    {
                      v415 = v386->__r_.__value_.__l.__size_;
                      if ((v415 & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v416 = (char *)v386->__r_.__value_.__r.__words[0];
                      if (v415)
                      {
                        v4 = 1;
                        v417 = v416 == 0;
                      }
                      else
                      {
                        v4 = 0;
                        v417 = 0;
                      }
                      if (v417)
                        goto LABEL_1084;
                    }
                    else
                    {
                      v415 = HIBYTE(v386->__r_.__value_.__r.__words[2]);
                      v416 = (char *)__dst + 32 * v385;
                    }
                    if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v418 = v500.__r_.__value_.__l.__size_;
                      if ((v500.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v419 = (std::string *)v500.__r_.__value_.__r.__words[0];
                      if (v500.__r_.__value_.__l.__size_)
                      {
                        if (!v500.__r_.__value_.__r.__words[0])
                          goto LABEL_1084;
                      }
                    }
                    else
                    {
                      v418 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                      v419 = &v500;
                    }
                    if (v418 >= v415)
                      v420 = v415;
                    else
                      v420 = v418;
                    v421 = memcmp(v416, v419, v420);
                    if (v421)
                    {
                      if ((v421 & 0x80000000) == 0)
                        goto LABEL_950;
                    }
                    else
                    {
                      if (v415 == v418)
                      {
                        v422 = v386[1].__r_.__value_.__s.__data_[4];
                        v423 = v422 == v502;
                        if (v422 >= v502)
                          v407 = 1;
                        else
                          v407 = -1;
                        if (v423)
                        {
                          v424 = (int)v386[1].__r_.__value_.__l.__data_;
                          v425 = v424 == v501;
                          v407 = v424 >= v501 ? 1 : -1;
                          if (v425)
                            v407 = 0;
                        }
LABEL_905:
                        v344 = v408;
                        if ((v407 & 0x80) == 0)
                          goto LABEL_950;
                        continue;
                      }
                      if (v415 >= v418)
                        goto LABEL_950;
                    }
                    v407 = -1;
                    goto LABEL_905;
                  }
                  break;
                }
                if ((*((_BYTE *)&v386->__r_.__value_.__s + 23) & 0x80) == 0)
                {
                  v410 = *(_OWORD *)&v386->__r_.__value_.__l.__data_;
                  v344->__r_.__value_.__r.__words[2] = v386->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v344->__r_.__value_.__l.__data_ = v410;
                  v352 = (char *)&v386[1];
                  v411 = (int)v386[1].__r_.__value_.__l.__data_;
                  v344[1].__r_.__value_.__s.__data_[4] = v386[1].__r_.__value_.__s.__data_[4];
                  LODWORD(v344[1].__r_.__value_.__l.__data_) = v411;
                  if (!v385)
                    goto LABEL_950;
                  goto LABEL_919;
                }
                std::string::__assign_no_alias<true>(v344, v386->__r_.__value_.__l.__data_, v386->__r_.__value_.__l.__size_);
                v352 = (char *)&v386[1];
                v426 = (int)v386[1].__r_.__value_.__l.__data_;
                v344[1].__r_.__value_.__s.__data_[4] = v386[1].__r_.__value_.__s.__data_[4];
                LODWORD(v344[1].__r_.__value_.__l.__data_) = v426;
                if (v385)
                  goto LABEL_919;
LABEL_950:
                if (v408 != &v500)
                {
                  if (SHIBYTE(v408->__r_.__value_.__r.__words[2]) < 0)
                  {
                    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v428 = &v500;
                    else
                      v428 = (std::string *)v500.__r_.__value_.__r.__words[0];
                    if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v429 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                    else
                      v429 = v500.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>(v408, (const std::string::value_type *)v428, v429);
                  }
                  else
                  {
                    if ((*((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x80) == 0)
                    {
                      v427 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
                      v408->__r_.__value_.__r.__words[2] = v500.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v408->__r_.__value_.__l.__data_ = v427;
                      v404 = &v501;
                      goto LABEL_898;
                    }
                    std::string::__assign_no_alias<true>(v408, v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
                  }
                }
                v430 = SHIBYTE(v500.__r_.__value_.__r.__words[2]);
                v431 = v502;
                *(_DWORD *)v352 = v501;
                v352[4] = v431;
                if (v430 < 0)
                  operator delete(v500.__r_.__value_.__l.__data_);
LABEL_899:
                if (SHIBYTE(v497.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v497.__r_.__value_.__l.__data_);
                v30 = v343-- <= 2;
                v344 = __dst;
                if (v30)
                  return;
              }
            }
          }
          v4 = v226 >= v229;
          if (v226 == v229)
          {
            v290 = v225[1].__r_.__value_.__s.__data_[4];
            v291 = v225[2].__r_.__value_.__s.__data_[12];
            v4 = v290 >= v291;
            v292 = v290 == v291;
            if (v290 >= v291)
              v293 = 1;
            else
              v293 = -1;
            if (v292)
            {
              v294 = v225[1].__r_.__value_.__l.__data_;
              v295 = v225[2].__r_.__value_.__r.__words[1];
              v4 = v294 >= v295;
              v296 = v294 == v295;
              v293 = (int)v294 >= (int)v295 ? 1 : -1;
              if (v296)
                v293 = 0;
            }
            v223 = (int64_t)v488;
            if ((v293 & 0x80) == 0)
              goto LABEL_542;
          }
          else
          {
            v223 = (int64_t)v488;
            if (v226 >= v229)
              goto LABEL_542;
          }
LABEL_541:
          v225 = (std::string *)((char *)v225 + 32);
          v224 = v5;
          goto LABEL_542;
        }
        v13 = v12 >> 1;
        v14 = (std::string *)(v10 + 32 * (v12 >> 1));
        if ((unint64_t)v11 > 0x1000)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v10, (const void **)&v14->__r_.__value_.__l.__data_, (uint64_t)v488);
          v15 = 32 * v13;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v10 + 32, (const void **)(v15 + v10 - 32), v483);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v10 + 64, (const void **)(v10 + 32 + v15), v482);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(v15 + v10 - 32, (const void **)&v14->__r_.__value_.__l.__data_, v10 + 32 + v15);
          std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)v10, v14);
          v16 = a3 - 1;
          v487 = v16;
          if ((a4 & 1) != 0)
            goto LABEL_11;
LABEL_8:
          v17 = (_QWORD *)(v10 - 32);
          if (*(char *)(v10 - 9) < 0)
          {
            v5 = *(_QWORD *)(v10 - 24);
            if ((v5 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v17 = (_QWORD *)*v17;
            if (v5)
            {
              if (!v17)
                goto LABEL_1084;
            }
          }
          else
          {
            v5 = *(unsigned __int8 *)(v10 - 9);
          }
          v18 = *(char *)(v10 + 23);
          if (v18 < 0)
          {
            v19 = *(_QWORD *)(v10 + 8);
            if ((v19 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v20 = *(const std::string::value_type **)v10;
            if (v19)
            {
              if (!v20)
                goto LABEL_1084;
            }
          }
          else
          {
            v19 = *(unsigned __int8 *)(v10 + 23);
            v20 = (const std::string::value_type *)v10;
          }
          if (v19 >= v5)
            v21 = v5;
          else
            v21 = v19;
          v22 = memcmp(v17, v20, v21);
          if (v22)
          {
            if (v22 < 0)
              goto LABEL_39;
          }
          else
          {
            v4 = v5 >= v19;
            if (v5 == v19)
            {
              v23 = *(unsigned __int8 *)(v10 - 4);
              v24 = *(unsigned __int8 *)(v10 + 28);
              v4 = v23 >= v24;
              v25 = v23 == v24;
              v26 = -1;
              if (v4)
                v26 = 1;
              if (v25)
              {
                v27 = *(_DWORD *)(v10 - 8);
                v28 = *(_DWORD *)(v10 + 24);
                v4 = v27 >= v28;
                v29 = v27 == v28;
                v30 = (int)v27 < (int)v28;
                v26 = -1;
                if (!v30)
                  v26 = 1;
                if (v29)
                  v26 = 0;
              }
              if (v26 < 0)
                goto LABEL_39;
            }
            else if (v5 < v19)
            {
              goto LABEL_39;
            }
          }
          if (v18 < 0)
          {
            std::string::__init_copy_ctor_external(&v500, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
          }
          else
          {
            v118 = *(_OWORD *)v10;
            v500.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
            *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v118;
          }
          v119 = *(_DWORD *)(v10 + 24);
          v502 = *(_BYTE *)(v10 + 28);
          v501 = v119;
          v5 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
          {
            v121 = v500.__r_.__value_.__l.__size_;
            if ((v500.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v120 = (std::string *)v500.__r_.__value_.__r.__words[0];
            if (v500.__r_.__value_.__l.__size_)
            {
              if (!v500.__r_.__value_.__r.__words[0])
                goto LABEL_1084;
            }
          }
          else
          {
            v120 = &v500;
            v121 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
          }
          if (*(char *)(a2 - 9) < 0)
          {
            v122 = *(_QWORD *)(a2 - 24);
            if ((v122 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v123 = (std::string *)v488->__r_.__value_.__r.__words[0];
            if (v122)
            {
              if (!v123)
                goto LABEL_1084;
            }
          }
          else
          {
            v122 = *(unsigned __int8 *)(a2 - 9);
            v123 = v488;
          }
          if (v122 >= v121)
            v124 = v121;
          else
            v124 = v122;
          v125 = memcmp(v120, v123, v124);
          if (v125)
          {
            if (v125 < 0)
              goto LABEL_319;
          }
          else if (v121 == v122)
          {
            v144 = *(unsigned __int8 *)(a2 - 4);
            v145 = -1;
            if (v502 >= v144)
              v145 = 1;
            if (v502 == v144)
            {
              v146 = *(_DWORD *)(a2 - 8);
              v145 = v501 >= v146 ? 1 : -1;
              if (v501 == v146)
                v145 = 0;
            }
            if (v145 < 0)
            {
LABEL_319:
              v127 = v500.__r_.__value_.__l.__size_;
              v126 = v500.__r_.__value_.__r.__words[0];
              if (v500.__r_.__value_.__l.__size_)
                v147 = v500.__r_.__value_.__r.__words[0] == 0;
              else
                v147 = 0;
              v148 = !v147;
              __dsta = v502;
              v491 = v501;
              v149 = (char *)(v10 + 32);
              while (1)
              {
                v4 = (unint64_t)v149 >= a2;
                if (v149 == (char *)a2)
                  goto LABEL_1084;
                a1 = (unint64_t)v149;
                if ((v5 & 0x80) != 0)
                {
                  if ((v127 & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v150 = (std::string *)v126;
                  v151 = v127;
                  if ((v148 & 1) == 0)
                    goto LABEL_1084;
                }
                else
                {
                  v150 = &v500;
                  v151 = v5;
                }
                v134 = v16;
                if (v149[23] < 0)
                {
                  v152 = *((_QWORD *)v149 + 1);
                  if ((v152 & 0x8000000000000000) != 0)
                    goto LABEL_1084;
                  v153 = *(char **)v149;
                  if (v152)
                  {
                    if (!v153)
                      goto LABEL_1084;
                  }
                }
                else
                {
                  v152 = v149[23];
                  v153 = v149;
                }
                if (v152 >= v151)
                  v154 = v151;
                else
                  v154 = v152;
                v155 = memcmp(v150, v153, v154);
                if (v155)
                {
                  if (v155 < 0)
                  {
LABEL_358:
                    v16 = v134;
                    goto LABEL_359;
                  }
                  v156 = 1;
                  v16 = v134;
                }
                else
                {
                  v157 = v151 >= v152;
                  if (v151 == v152)
                  {
                    v158 = *(unsigned __int8 *)(a1 + 28);
                    v159 = __dsta == v158;
                    if (__dsta >= v158)
                      v156 = 1;
                    else
                      v156 = -1;
                    v16 = v134;
                    if (v159)
                    {
                      v160 = *(_DWORD *)(a1 + 24);
                      v161 = v491 == v160;
                      v156 = v491 >= v160 ? 1 : -1;
                      if (v161)
                        v156 = 0;
                    }
                  }
                  else
                  {
                    v16 = v134;
                    if (!v157)
                      goto LABEL_359;
                    v156 = 1;
                  }
                }
                v149 = (char *)(a1 + 32);
                if (v156 < 0)
                  goto LABEL_359;
              }
            }
          }
          else if (v121 < v122)
          {
            goto LABEL_319;
          }
          v127 = v500.__r_.__value_.__l.__size_;
          v126 = v500.__r_.__value_.__r.__words[0];
          if (v500.__r_.__value_.__l.__size_)
            v128 = v500.__r_.__value_.__r.__words[0] == 0;
          else
            v128 = 0;
          v129 = !v128;
          __dsta = v502;
          v491 = v501;
          v130 = (char *)(v10 + 32);
          do
          {
            a1 = (unint64_t)v130;
            v4 = (unint64_t)v130 >= a2;
            if ((unint64_t)v130 >= a2)
              break;
            if ((v5 & 0x80) != 0)
            {
              if ((v127 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v132 = (std::string *)v126;
              v133 = v127;
              if ((v129 & 1) == 0)
                goto LABEL_1084;
            }
            else
            {
              v132 = &v500;
              v133 = v5;
            }
            v134 = v16;
            if (v130[23] < 0)
            {
              v135 = *((_QWORD *)v130 + 1);
              if ((v135 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v136 = *(char **)v130;
              if (v135)
              {
                if (!v136)
                  goto LABEL_1084;
              }
            }
            else
            {
              v135 = v130[23];
              v136 = v130;
            }
            if (v135 >= v133)
              v137 = v133;
            else
              v137 = v135;
            v138 = memcmp(v132, v136, v137);
            if (v138)
            {
              if (v138 < 0)
                goto LABEL_358;
              v131 = 1;
              v16 = v134;
            }
            else
            {
              v139 = v133 >= v135;
              if (v133 == v135)
              {
                v140 = *(unsigned __int8 *)(a1 + 28);
                v141 = __dsta == v140;
                if (__dsta >= v140)
                  v131 = 1;
                else
                  v131 = -1;
                v16 = v134;
                if (v141)
                {
                  v142 = *(_DWORD *)(a1 + 24);
                  v143 = v491 == v142;
                  v131 = v491 >= v142 ? 1 : -1;
                  if (v143)
                    v131 = 0;
                }
              }
              else
              {
                v16 = v134;
                if (!v139)
                  break;
                v131 = 1;
              }
            }
            v130 = (char *)(a1 + 32);
          }
          while ((v131 & 0x80) == 0);
LABEL_359:
          if (a1 < a2)
          {
            if (v126)
              v162 = 1;
            else
              v162 = v127 == 0;
            v163 = v162;
            v164 = (char *)v488;
            while (1)
            {
              v4 = (unint64_t)(v164 + 32) >= v10;
              if (v164 + 32 == (char *)v10)
                break;
              a2 = (unint64_t)v164;
              if ((v5 & 0x80) != 0)
              {
                if ((v127 & 0x8000000000000000) != 0)
                  break;
                v166 = (std::string *)v126;
                v167 = v127;
                if ((v163 & 1) == 0)
                  break;
              }
              else
              {
                v166 = &v500;
                v167 = v5;
              }
              v168 = v16;
              if (v164[23] < 0)
              {
                v169 = *((_QWORD *)v164 + 1);
                if ((v169 & 0x8000000000000000) != 0)
                  break;
                v170 = *(char **)v164;
                if (v169)
                {
                  if (!v170)
                    break;
                }
              }
              else
              {
                v169 = v164[23];
                v170 = v164;
              }
              if (v169 >= v167)
                v171 = v167;
              else
                v171 = v169;
              v172 = memcmp(v166, v170, v171);
              if (v172)
              {
                if ((v172 & 0x80000000) == 0)
                  goto LABEL_466;
                v165 = -1;
                v16 = v168;
              }
              else if (v167 == v169)
              {
                v173 = *(unsigned __int8 *)(a2 + 28);
                v174 = __dsta == v173;
                if (__dsta >= v173)
                  v165 = 1;
                else
                  v165 = -1;
                v16 = v168;
                if (v174)
                {
                  v175 = *(_DWORD *)(a2 + 24);
                  v176 = v491 == v175;
                  v165 = v491 >= v175 ? 1 : -1;
                  if (v176)
                    v165 = 0;
                }
              }
              else
              {
                if (v167 >= v169)
                  goto LABEL_466;
                v16 = v168;
                v165 = -1;
              }
              v164 = (char *)(a2 - 32);
              if ((v165 & 0x80) == 0)
                goto LABEL_466;
            }
LABEL_1084:
            __break(1u);
LABEL_1085:
            v436 = (std::string *)v5;
            if (!v4)
LABEL_1086:
              std::swap[abi:sn180100]<webrtc::RtpExtension>(v436, v488);
            return;
          }
LABEL_466:
          if (a1 < a2)
          {
            std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)a2);
            v5 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
            v177 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
            if (v500.__r_.__value_.__l.__size_)
              v178 = v500.__r_.__value_.__r.__words[0] == 0;
            else
              v178 = 0;
            v179 = !v178;
            v180 = v502;
            __dstb = v501;
            v181 = (char *)(a1 + 32);
            while (1)
            {
              v4 = (unint64_t)v181 >= v493;
              if (v181 == (char *)v493)
                goto LABEL_1084;
              a1 = (unint64_t)v181;
              if ((v5 & 0x80) != 0)
              {
                if ((*((_QWORD *)&v177 + 1) & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v184 = *((_QWORD *)&v177 + 1);
                v183 = (std::string *)v177;
                if ((v179 & 1) == 0)
                  goto LABEL_1084;
              }
              else
              {
                v183 = &v500;
                v184 = v5;
              }
              if (v181[23] < 0)
              {
                v185 = *((_QWORD *)v181 + 1);
                if ((v185 & 0x8000000000000000) != 0)
                  goto LABEL_1084;
                v186 = *(char **)v181;
                if (v185)
                {
                  if (!v186)
                    goto LABEL_1084;
                }
              }
              else
              {
                v185 = v181[23];
                v186 = v181;
              }
              if (v185 >= v184)
                v187 = v184;
              else
                v187 = v185;
              v188 = memcmp(v183, v186, v187);
              if (v188)
              {
                if (v188 < 0)
                  goto LABEL_435;
              }
              else
              {
                if (v184 == v185)
                {
                  v189 = *(unsigned __int8 *)(a1 + 28);
                  v190 = v180 == v189;
                  if (v180 >= v189)
                    v182 = 1;
                  else
                    v182 = -1;
                  if (v190)
                  {
                    v191 = *(_DWORD *)(a1 + 24);
                    v192 = __dstb == v191;
                    v182 = __dstb >= v191 ? 1 : -1;
                    if (v192)
                      v182 = 0;
                  }
                  goto LABEL_407;
                }
                if (v184 < v185)
                {
LABEL_435:
                  v193 = (char *)(a2 - 32);
                  while (1)
                  {
                    v4 = (unint64_t)(v193 + 32) >= v10;
                    if (v193 + 32 == (char *)v10)
                      goto LABEL_1084;
                    a2 = (unint64_t)v193;
                    if ((v5 & 0x80) != 0)
                    {
                      if ((*((_QWORD *)&v177 + 1) & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v196 = *((_QWORD *)&v177 + 1);
                      v195 = (std::string *)v177;
                      if ((v179 & 1) == 0)
                        goto LABEL_1084;
                    }
                    else
                    {
                      v195 = &v500;
                      v196 = v5;
                    }
                    if (v193[23] < 0)
                    {
                      v197 = *((_QWORD *)v193 + 1);
                      if ((v197 & 0x8000000000000000) != 0)
                        goto LABEL_1084;
                      v198 = *(char **)v193;
                      if (v197)
                      {
                        if (!v198)
                          goto LABEL_1084;
                      }
                    }
                    else
                    {
                      v197 = v193[23];
                      v198 = v193;
                    }
                    if (v197 >= v196)
                      v199 = v196;
                    else
                      v199 = v197;
                    v200 = memcmp(v195, v198, v199);
                    if (v200)
                    {
                      if ((v200 & 0x80000000) == 0)
                        goto LABEL_466;
                    }
                    else
                    {
                      if (v196 == v197)
                      {
                        v201 = *(unsigned __int8 *)(a2 + 28);
                        v202 = v180 == v201;
                        if (v180 >= v201)
                          v194 = 1;
                        else
                          v194 = -1;
                        if (v202)
                        {
                          v203 = *(_DWORD *)(a2 + 24);
                          v204 = __dstb == v203;
                          v194 = __dstb >= v203 ? 1 : -1;
                          if (v204)
                            v194 = 0;
                        }
                        goto LABEL_438;
                      }
                      if (v196 >= v197)
                        goto LABEL_466;
                    }
                    v194 = -1;
LABEL_438:
                    v193 = (char *)(a2 - 32);
                    if ((v194 & 0x80) == 0)
                      goto LABEL_466;
                  }
                }
              }
              v182 = 1;
LABEL_407:
              v181 = (char *)(a1 + 32);
              if (v182 < 0)
                goto LABEL_435;
            }
          }
          v205 = (std::string *)(a1 - 32);
          a3 = v487;
          if (a1 - 32 != v10)
          {
            v206 = *(_BYTE *)(a1 - 9);
            if (*(char *)(v10 + 23) < 0)
            {
              if (v206 >= 0)
                v208 = (const std::string::value_type *)(a1 - 32);
              else
                v208 = *(const std::string::value_type **)(a1 - 32);
              if (v206 >= 0)
                v209 = *(unsigned __int8 *)(a1 - 9);
              else
                v209 = *(_QWORD *)(a1 - 24);
              std::string::__assign_no_alias<false>((std::string *)v10, v208, v209);
            }
            else if ((*(_BYTE *)(a1 - 9) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)v10, *(char **)(a1 - 32), *(_QWORD *)(a1 - 24));
            }
            else
            {
              v207 = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(a1 - 16);
              *(_OWORD *)v10 = v207;
            }
            v210 = *(_DWORD *)(a1 - 8);
            *(_BYTE *)(v10 + 28) = *(_BYTE *)(a1 - 4);
            *(_DWORD *)(v10 + 24) = v210;
          }
          v4 = v205 >= &v500;
          if (v205 != &v500)
          {
            if (*(char *)(a1 - 9) < 0)
            {
              if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v212 = &v500;
              else
                v212 = (std::string *)v500.__r_.__value_.__r.__words[0];
              if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v213 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
              else
                v213 = v500.__r_.__value_.__l.__size_;
              std::string::__assign_no_alias<false>((std::string *)(a1 - 32), (const std::string::value_type *)v212, v213);
            }
            else if ((*((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(a1 - 32), v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
            }
            else
            {
              v211 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
              *(_QWORD *)(a1 - 16) = *((_QWORD *)&v500.__r_.__value_.__l + 2);
              *(_OWORD *)&v205->__r_.__value_.__l.__data_ = v211;
            }
          }
          v214 = v501;
          *(_BYTE *)(a1 - 4) = v502;
          *(_DWORD *)(a1 - 8) = v214;
          if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v500.__r_.__value_.__l.__data_);
          a4 = 0;
          a2 = v493;
          continue;
        }
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>((uint64_t)v14, (const void **)v10, (uint64_t)v488);
        v16 = a3 - 1;
        v487 = v16;
        if ((a4 & 1) == 0)
          goto LABEL_8;
LABEL_11:
        LOBYTE(v18) = *(_BYTE *)(v10 + 23);
LABEL_39:
        if ((v18 & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(&v500, *(const std::string::value_type **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          v31 = *(_OWORD *)v10;
          v500.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 16);
          *(_OWORD *)&v500.__r_.__value_.__l.__data_ = v31;
        }
        v32 = 0;
        v33 = *(_DWORD *)(v10 + 24);
        v485 = v10 + 24;
        v502 = *(_BYTE *)(v10 + 28);
        v501 = v33;
        v34 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
        v35 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
        if (v500.__r_.__value_.__l.__size_)
          v36 = v500.__r_.__value_.__r.__words[0] == 0;
        else
          v36 = 0;
        v37 = !v36;
        v38 = v502;
        v489 = v501;
        do
        {
          while (1)
          {
            v5 = v10 + v32;
            v39 = (_QWORD *)(v10 + v32 + 32);
            v4 = (unint64_t)v39 >= a2;
            if (v39 == (_QWORD *)a2)
              goto LABEL_1084;
            v40 = v32;
            if (*(char *)(v5 + 55) < 0)
            {
              v41 = *(_QWORD *)(v10 + v32 + 40);
              if ((v41 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v39 = (_QWORD *)*v39;
              if (v41)
              {
                v4 = 1;
                v42 = v39 == 0;
              }
              else
              {
                v4 = 0;
                v42 = 0;
              }
              if (v42)
                goto LABEL_1084;
            }
            else
            {
              v41 = *(unsigned __int8 *)(v5 + 55);
            }
            if ((v34 & 0x80) != 0)
            {
              if ((*((_QWORD *)&v35 + 1) & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v44 = *((_QWORD *)&v35 + 1);
              v43 = (std::string *)v35;
              if ((v37 & 1) == 0)
                goto LABEL_1084;
            }
            else
            {
              v43 = &v500;
              v44 = v34;
            }
            if (v44 >= v41)
              v45 = v41;
            else
              v45 = v44;
            v46 = memcmp(v39, v43, v45);
            if (v46)
            {
              v10 = (unint64_t)__dst;
              if ((v46 & 0x80000000) == 0)
                goto LABEL_82;
              goto LABEL_50;
            }
            v47 = v41 >= v44;
            if (v41 == v44)
              break;
            v10 = (unint64_t)__dst;
            if (v47)
              goto LABEL_82;
LABEL_50:
            v32 = v40 + 32;
          }
          v48 = *(unsigned __int8 *)(v5 + 60);
          if (v48 >= v38)
            v49 = 1;
          else
            v49 = -1;
          if (v48 == v38)
          {
            v50 = *(_DWORD *)(v5 + 56);
            v51 = v50 == v489;
            if (v50 >= v489)
              v52 = 1;
            else
              v52 = -1;
            if (v51)
              v49 = 0;
            else
              v49 = v52;
          }
          v10 = (unint64_t)__dst;
          v32 = v40 + 32;
        }
        while (v49 < 0);
LABEL_82:
        v5 = v10 + v40 + 32;
        v53 = (char *)v488;
        if (v40)
        {
          while (1)
          {
            v4 = (unint64_t)(v53 + 32) >= v10;
            if (v53 + 32 == (char *)v10)
              goto LABEL_1084;
            v56 = (unint64_t)v53;
            if (v53[23] < 0)
            {
              v57 = *((_QWORD *)v53 + 1);
              if ((v57 & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v58 = *(char **)v53;
              if (v57)
              {
                if (!v58)
                  goto LABEL_1084;
              }
            }
            else
            {
              v57 = v53[23];
              v58 = v53;
            }
            if ((v34 & 0x80) != 0)
            {
              if ((*((_QWORD *)&v35 + 1) & 0x8000000000000000) != 0)
                goto LABEL_1084;
              v60 = *((_QWORD *)&v35 + 1);
              v59 = (std::string *)v35;
              if ((v37 & 1) == 0)
                goto LABEL_1084;
            }
            else
            {
              v59 = &v500;
              v60 = v34;
            }
            if (v60 >= v57)
              v61 = v57;
            else
              v61 = v60;
            v62 = memcmp(v58, v59, v61);
            if (v62)
            {
              if (v62 < 0)
                goto LABEL_145;
            }
            else
            {
              if (v57 == v60)
              {
                v63 = *(unsigned __int8 *)(v56 + 28);
                v64 = v63 == v38;
                if (v63 >= v38)
                  v55 = 1;
                else
                  v55 = -1;
                if (v64)
                {
                  v65 = *(_DWORD *)(v56 + 24);
                  v66 = v65 == v489;
                  v55 = v65 >= v489 ? 1 : -1;
                  if (v66)
                    v55 = 0;
                }
                goto LABEL_86;
              }
              if (v57 < v60)
              {
LABEL_145:
                v486 = v5;
                a1 = v5;
                if (v5 >= v56)
                  goto LABEL_218;
                v78 = v56;
LABEL_148:
                std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)v78);
                v79 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
                v80 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
                if (v500.__r_.__value_.__l.__size_)
                  v81 = v500.__r_.__value_.__r.__words[0] == 0;
                else
                  v81 = 0;
                v5 = !v81;
                v490 = v501;
                v82 = v502;
                v83 = (char *)(a1 + 32);
                while (2)
                {
                  v4 = (unint64_t)v83 >= v493;
                  if (v83 == (char *)v493)
                    goto LABEL_1084;
                  a1 = (unint64_t)v83;
                  if (v83[23] < 0)
                  {
                    v85 = *((_QWORD *)v83 + 1);
                    if ((v85 & 0x8000000000000000) != 0)
                      goto LABEL_1084;
                    v86 = *(char **)v83;
                    if (v85)
                    {
                      if (!v86)
                        goto LABEL_1084;
                    }
                  }
                  else
                  {
                    v85 = v83[23];
                    v86 = v83;
                  }
                  if ((v79 & 0x80) != 0)
                  {
                    if ((*((_QWORD *)&v80 + 1) & 0x8000000000000000) != 0)
                      goto LABEL_1084;
                    v88 = *((_QWORD *)&v80 + 1);
                    v87 = (std::string *)v80;
                    if ((v5 & 1) == 0)
                      goto LABEL_1084;
                  }
                  else
                  {
                    v87 = &v500;
                    v88 = v79;
                  }
                  if (v88 >= v85)
                    v89 = v85;
                  else
                    v89 = v88;
                  v90 = memcmp(v86, v87, v89);
                  if (v90)
                  {
                    if ((v90 & 0x80000000) == 0)
                      goto LABEL_185;
                  }
                  else
                  {
                    if (v85 == v88)
                    {
                      v91 = *(unsigned __int8 *)(a1 + 28);
                      v92 = v91 == v82;
                      if (v91 >= v82)
                        v84 = 1;
                      else
                        v84 = -1;
                      if (v92)
                      {
                        v93 = *(_DWORD *)(a1 + 24);
                        v94 = v93 == v490;
                        v84 = v93 >= v490 ? 1 : -1;
                        if (v94)
                          v84 = 0;
                      }
LABEL_157:
                      v83 = (char *)(a1 + 32);
                      if ((v84 & 0x80) == 0)
                        goto LABEL_185;
                      continue;
                    }
                    if (v85 >= v88)
                    {
LABEL_185:
                      v95 = (char *)(v78 - 32);
                      while (1)
                      {
                        v78 = (unint64_t)v95;
                        v4 = v95 + 32 >= (char *)__dst;
                        if (v95 + 32 == (char *)__dst)
                          goto LABEL_1084;
                        if (v95[23] < 0)
                        {
                          v97 = *((_QWORD *)v95 + 1);
                          if ((v97 & 0x8000000000000000) != 0)
                            goto LABEL_1084;
                          v98 = *(char **)v95;
                          if (v97)
                          {
                            if (!v98)
                              goto LABEL_1084;
                          }
                        }
                        else
                        {
                          v97 = v95[23];
                          v98 = v95;
                        }
                        if ((v79 & 0x80) != 0)
                        {
                          if ((*((_QWORD *)&v80 + 1) & 0x8000000000000000) != 0)
                            goto LABEL_1084;
                          v100 = *((_QWORD *)&v80 + 1);
                          v99 = (std::string *)v80;
                          if ((v5 & 1) == 0)
                            goto LABEL_1084;
                        }
                        else
                        {
                          v99 = &v500;
                          v100 = v79;
                        }
                        if (v100 >= v97)
                          v101 = v97;
                        else
                          v101 = v100;
                        v102 = memcmp(v98, v99, v101);
                        if (v102)
                        {
                          if (v102 < 0)
                            goto LABEL_147;
                        }
                        else
                        {
                          if (v97 == v100)
                          {
                            v103 = *(unsigned __int8 *)(v78 + 28);
                            v104 = v103 == v82;
                            if (v103 >= v82)
                              v96 = 1;
                            else
                              v96 = -1;
                            if (v104)
                            {
                              v105 = *(_DWORD *)(v78 + 24);
                              v106 = v105 == v490;
                              v96 = v105 >= v490 ? 1 : -1;
                              if (v106)
                                v96 = 0;
                            }
                            goto LABEL_188;
                          }
                          if (v97 < v100)
                          {
LABEL_147:
                            if (a1 >= v78)
                              goto LABEL_218;
                            goto LABEL_148;
                          }
                        }
                        v96 = 1;
LABEL_188:
                        v95 = (char *)(v78 - 32);
                        if (v96 < 0)
                          goto LABEL_147;
                      }
                    }
                  }
                  break;
                }
                v84 = -1;
                goto LABEL_157;
              }
            }
            v55 = 1;
LABEL_86:
            v53 = (char *)(v56 - 32);
            if (v55 < 0)
              goto LABEL_145;
          }
        }
        v54 = (char *)v488;
        while (1)
        {
          v4 = v5 >= (unint64_t)(v54 + 32);
          if (v5 >= (unint64_t)(v54 + 32))
            break;
          v56 = (unint64_t)v54;
          if (v54[23] < 0)
          {
            v68 = *((_QWORD *)v54 + 1);
            if ((v68 & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v69 = *(char **)v54;
            if (v68)
            {
              if (!v69)
                goto LABEL_1084;
            }
          }
          else
          {
            v68 = v54[23];
            v69 = v54;
          }
          if ((v34 & 0x80) != 0)
          {
            if ((*((_QWORD *)&v35 + 1) & 0x8000000000000000) != 0)
              goto LABEL_1084;
            v71 = *((_QWORD *)&v35 + 1);
            v70 = (std::string *)v35;
            if ((v37 & 1) == 0)
              goto LABEL_1084;
          }
          else
          {
            v70 = &v500;
            v71 = v34;
          }
          if (v71 >= v68)
            v72 = v68;
          else
            v72 = v71;
          v73 = memcmp(v69, v70, v72);
          if (v73)
          {
            if (v73 < 0)
              goto LABEL_145;
          }
          else
          {
            if (v68 == v71)
            {
              v74 = *(unsigned __int8 *)(v56 + 28);
              v75 = v74 == v38;
              if (v74 >= v38)
                v67 = 1;
              else
                v67 = -1;
              if (v75)
              {
                v76 = *(_DWORD *)(v56 + 24);
                v77 = v76 == v489;
                v67 = v76 >= v489 ? 1 : -1;
                if (v77)
                  v67 = 0;
              }
              goto LABEL_117;
            }
            if (v68 < v71)
              goto LABEL_145;
          }
          v67 = 1;
LABEL_117:
          v54 = (char *)(v56 - 32);
          if (v67 < 0)
            goto LABEL_145;
        }
        v56 = (unint64_t)(v54 + 32);
        v486 = v5;
        a1 = v5;
LABEL_218:
        v107 = (std::string *)(a1 - 32);
        v5 = v486;
        a3 = v487;
        a4 = v484;
        if ((std::string *)(a1 - 32) != __dst)
        {
          v108 = *(_BYTE *)(a1 - 9);
          if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
          {
            if (v108 >= 0)
              v110 = (const std::string::value_type *)(a1 - 32);
            else
              v110 = *(const std::string::value_type **)(a1 - 32);
            if (v108 >= 0)
              v111 = *(unsigned __int8 *)(a1 - 9);
            else
              v111 = *(_QWORD *)(a1 - 24);
            std::string::__assign_no_alias<false>(__dst, v110, v111);
          }
          else if ((*(_BYTE *)(a1 - 9) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(__dst, *(char **)(a1 - 32), *(_QWORD *)(a1 - 24));
          }
          else
          {
            v109 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 - 16);
            *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v109;
          }
          v112 = *(_DWORD *)(a1 - 8);
          *(_BYTE *)(v485 + 4) = *(_BYTE *)(a1 - 4);
          *(_DWORD *)v485 = v112;
        }
        if (v107 != &v500)
        {
          if (*(char *)(a1 - 9) < 0)
          {
            if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &v500;
            else
              v114 = (std::string *)v500.__r_.__value_.__r.__words[0];
            if ((v500.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = HIBYTE(v500.__r_.__value_.__r.__words[2]);
            else
              v115 = v500.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>((std::string *)(a1 - 32), (const std::string::value_type *)v114, v115);
          }
          else if ((*((_BYTE *)&v500.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)(a1 - 32), v500.__r_.__value_.__l.__data_, v500.__r_.__value_.__l.__size_);
          }
          else
          {
            v113 = *(_OWORD *)&v500.__r_.__value_.__l.__data_;
            *(_QWORD *)(a1 - 16) = *((_QWORD *)&v500.__r_.__value_.__l + 2);
            *(_OWORD *)&v107->__r_.__value_.__l.__data_ = v113;
          }
        }
        v116 = v501;
        *(_BYTE *)(a1 - 4) = v502;
        *(_DWORD *)(a1 - 8) = v116;
        if (SHIBYTE(v500.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v500.__r_.__value_.__l.__data_);
        v4 = v486 >= v56;
        a2 = v493;
        if (!v4)
        {
LABEL_249:
          std::__introsort<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*,false>(__dst, a1 - 32, v487, v484 & 1);
          a4 = 0;
          continue;
        }
        v117 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>((uint64_t)__dst, a1 - 32);
        if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::RtpExtension::DeduplicateHeaderExtensions(std::vector<webrtc::RtpExtension> const&,webrtc::RtpExtension::Filter)::$_0 &,webrtc::RtpExtension*>(a1, v493))
        {
          if ((v117 & 1) != 0)
            goto LABEL_3;
          goto LABEL_249;
        }
        a2 = a1 - 32;
        a1 = (unint64_t)__dst;
        if ((v117 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__n128 *)((char *)a2 - 24);
  v10 = a2 - 3;
  v11 = &a2[-5].n128_i8[8];
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (a2[-1].n128_u16[4] < *(unsigned __int16 *)(v12 + 16))
        {
          v216 = *(_QWORD *)(v12 + 16);
          v188 = *(__n128 *)v12;
          v98 = *(__int128 *)((char *)&a2[-2] + 8);
          *(_WORD *)(v12 + 16) = a2[-1].n128_u16[4];
          *(_OWORD *)v12 = v98;
          a2[-1].n128_u16[4] = v216;
          *(__n128 *)((char *)a2 - 24) = v188;
        }
        return;
      case 3:
        v42 = v12 + 24;
        v99 = *(unsigned __int16 *)(v12 + 40);
        v100 = a2[-1].n128_u16[4];
        if (v99 < *(unsigned __int16 *)(v12 + 16))
        {
          if (v100 >= v99)
            goto LABEL_181;
          v217 = *(_QWORD *)(v12 + 16);
          v189 = *(__n128 *)v12;
          v101 = *v9;
          *(_WORD *)(v12 + 16) = a2[-1].n128_u16[4];
          *(__n128 *)v12 = v101;
          v102 = v189;
          a2[-1].n128_u16[4] = v217;
          goto LABEL_183;
        }
        if (v100 < v99)
        {
          v154 = *(__n128 *)v42;
          v155 = *(_QWORD *)(v12 + 40);
          v156 = a2[-1].n128_u16[4];
          *(__n128 *)v42 = *v9;
          *(_WORD *)(v12 + 40) = v156;
          a2[-1].n128_u16[4] = v155;
          *v9 = v154;
          if (*(unsigned __int16 *)(v12 + 40) < *(unsigned __int16 *)(v12 + 16))
          {
            v220 = *(_QWORD *)(v12 + 16);
            v194 = *(__n128 *)v12;
            *(_OWORD *)v12 = *(_OWORD *)v42;
            *(_WORD *)(v12 + 16) = *(_WORD *)(v12 + 40);
            *(__n128 *)v42 = v194;
            *(_WORD *)(v12 + 40) = v220;
          }
        }
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::TMMBRHelp::FindBoundingSet(std::vector<webrtc::rtcp::TmmbItem>)::$_0 &,webrtc::rtcp::TmmbItem*>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)((char *)a2 - 24), a5);
        return;
      case 5:
        v103 = (__n128 *)(v12 + 24);
        v104 = (__n128 *)(v12 + 48);
        v105 = (__n128 *)(v12 + 72);
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::TMMBRHelp::FindBoundingSet(std::vector<webrtc::rtcp::TmmbItem>)::$_0 &,webrtc::rtcp::TmmbItem*>((__n128 *)v12, (__n128 *)(v12 + 24), (__n128 *)(v12 + 48), (__n128 *)(v12 + 72), a5);
        if (a2[-1].n128_u16[4] < *(unsigned __int16 *)(v12 + 88))
        {
          v106 = *v105;
          v107 = *(_QWORD *)(v12 + 88);
          v108 = a2[-1].n128_u16[4];
          *v105 = *(__n128 *)((char *)a2 - 24);
          *(_WORD *)(v12 + 88) = v108;
          a2[-1].n128_u16[4] = v107;
          *(__n128 *)((char *)a2 - 24) = v106;
          if (*(unsigned __int16 *)(v12 + 88) < *(unsigned __int16 *)(v12 + 64))
          {
            v109 = *(_QWORD *)(v12 + 64);
            v110 = *v104;
            *v104 = *v105;
            *(_WORD *)(v12 + 64) = *(_WORD *)(v12 + 88);
            *v105 = v110;
            *(_WORD *)(v12 + 88) = v109;
            if (*(unsigned __int16 *)(v12 + 64) < *(unsigned __int16 *)(v12 + 40))
            {
              v111 = *(_QWORD *)(v12 + 40);
              v112 = *v103;
              *v103 = *v104;
              *(_WORD *)(v12 + 40) = *(_WORD *)(v12 + 64);
              *v104 = v112;
              *(_WORD *)(v12 + 64) = v111;
              if (*(unsigned __int16 *)(v12 + 40) < *(unsigned __int16 *)(v12 + 16))
              {
                v218 = *(_QWORD *)(v12 + 16);
                v190 = *(__n128 *)v12;
                *(__n128 *)v12 = *v103;
                *(_WORD *)(v12 + 16) = *(_WORD *)(v12 + 40);
                *v103 = v190;
                *(_WORD *)(v12 + 40) = v218;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 575)
        {
          if (!a3)
          {
            if ((__n128 *)v12 != a2)
            {
              v123 = (unint64_t)(v14 - 2) >> 1;
              v124 = v123;
              do
              {
                if (v123 >= v124)
                {
                  v126 = (2 * v124) | 1;
                  v127 = v12 + 24 * v126;
                  if (2 * v124 + 2 < v14)
                  {
                    v128 = *(unsigned __int16 *)(v127 + 16);
                    v129 = *(unsigned __int16 *)(v127 + 40);
                    v127 += 24 * (v128 < v129);
                    if (v128 < v129)
                      v126 = 2 * v124 + 2;
                  }
                  v130 = v12 + 24 * v124;
                  v131 = *(unsigned __int16 *)(v130 + 16);
                  if (*(unsigned __int16 *)(v127 + 16) >= v131)
                  {
                    v192 = *(_OWORD *)v130;
                    do
                    {
                      v132 = v130;
                      v130 = v127;
                      v133 = *(_OWORD *)v127;
                      *(_WORD *)(v132 + 16) = *(_WORD *)(v127 + 16);
                      *(_OWORD *)v132 = v133;
                      if (v123 < v126)
                        break;
                      v134 = (2 * v126) | 1;
                      v127 = v12 + 24 * v134;
                      v135 = 2 * v126 + 2;
                      if (v135 < v14)
                      {
                        v136 = *(unsigned __int16 *)(v127 + 16);
                        v137 = *(unsigned __int16 *)(v127 + 40);
                        v127 += 24 * (v136 < v137);
                        if (v136 < v137)
                          v134 = v135;
                      }
                      v126 = v134;
                    }
                    while (*(unsigned __int16 *)(v127 + 16) >= v131);
                    *(_OWORD *)v130 = v192;
                    *(_WORD *)(v130 + 16) = v131;
                  }
                }
                v125 = v124-- <= 0;
              }
              while (!v125);
              v138 = v13 / 0x18uLL;
              do
              {
                v139 = 0;
                v219 = *(_QWORD *)(v12 + 16);
                v193 = *(__n128 *)v12;
                v140 = v12;
                do
                {
                  v142 = v140 + 24 * v139 + 24;
                  v143 = (2 * v139) | 1;
                  v144 = 2 * v139 + 2;
                  if (v144 < v138)
                  {
                    v145 = *(unsigned __int16 *)(v142 + 16);
                    v146 = *(unsigned __int16 *)(v142 + 40);
                    v142 += 24 * (v145 < v146);
                    if (v145 < v146)
                      v143 = v144;
                  }
                  v141 = *(_OWORD *)v142;
                  *(_WORD *)(v140 + 16) = *(_WORD *)(v142 + 16);
                  *(_OWORD *)v140 = v141;
                  v140 = v142;
                  v139 = v143;
                }
                while (v143 <= (uint64_t)((unint64_t)(v138 - 2) >> 1));
                a2 = (__n128 *)((char *)a2 - 24);
                if ((__n128 *)v142 == a2)
                {
                  *(_WORD *)(v142 + 16) = v219;
                  *(__n128 *)v142 = v193;
                }
                else
                {
                  v147 = *a2;
                  *(_WORD *)(v142 + 16) = a2[1].n128_u16[0];
                  *(__n128 *)v142 = v147;
                  a2[1].n128_u16[0] = v219;
                  *a2 = v193;
                  v148 = v142 - v12 + 24;
                  if (v148 >= 25)
                  {
                    v149 = (v148 / 0x18uLL - 2) >> 1;
                    v150 = v12 + 24 * v149;
                    v151 = *(unsigned __int16 *)(v142 + 16);
                    if (*(unsigned __int16 *)(v150 + 16) < v151)
                    {
                      v168 = *(_OWORD *)v142;
                      do
                      {
                        v152 = v142;
                        v142 = v150;
                        v153 = *(_OWORD *)v150;
                        *(_WORD *)(v152 + 16) = *(_WORD *)(v150 + 16);
                        *(_OWORD *)v152 = v153;
                        if (!v149)
                          break;
                        v149 = (v149 - 1) >> 1;
                        v150 = v12 + 24 * v149;
                      }
                      while (*(unsigned __int16 *)(v150 + 16) < v151);
                      *(_OWORD *)v142 = v168;
                      *(_WORD *)(v142 + 16) = v151;
                    }
                  }
                }
                v125 = v138-- <= 2;
              }
              while (!v125);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)(v12 + 24 * ((unint64_t)v14 >> 1));
          v17 = a2[-1].n128_u16[4];
          if ((unint64_t)v13 < 0xC01)
          {
            v20 = *(unsigned __int16 *)(v12 + 16);
            if (v20 >= v16[1].n128_u16[0])
            {
              if (v17 < v20)
              {
                v201 = *(_QWORD *)(v12 + 16);
                v173 = *(__n128 *)v12;
                v24 = *v9;
                *(_WORD *)(v12 + 16) = a2[-1].n128_u16[4];
                *(__n128 *)v12 = v24;
                a2[-1].n128_u16[4] = v201;
                *v9 = v173;
                if (*(unsigned __int16 *)(v12 + 16) < v16[1].n128_u16[0])
                {
                  v202 = v16[1].n128_u64[0];
                  v174 = *v16;
                  v25 = *(__n128 *)v12;
                  v16[1].n128_u16[0] = *(_WORD *)(v12 + 16);
                  *v16 = v25;
                  *(_WORD *)(v12 + 16) = v202;
                  *(__n128 *)v12 = v174;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_32;
                  goto LABEL_55;
                }
              }
            }
            else
            {
              if (v17 >= v20)
              {
                v205 = v16[1].n128_u64[0];
                v177 = *v16;
                v40 = *(__n128 *)v12;
                v16[1].n128_u16[0] = *(_WORD *)(v12 + 16);
                *v16 = v40;
                *(_WORD *)(v12 + 16) = v205;
                *(__n128 *)v12 = v177;
                if (a2[-1].n128_u16[4] >= *(unsigned __int16 *)(v12 + 16))
                  goto LABEL_31;
                v198 = *(_QWORD *)(v12 + 16);
                v170 = *(__n128 *)v12;
                v41 = *v9;
                *(_WORD *)(v12 + 16) = a2[-1].n128_u16[4];
                *(__n128 *)v12 = v41;
              }
              else
              {
                v198 = v16[1].n128_u64[0];
                v170 = *v16;
                v21 = *v9;
                v16[1].n128_u16[0] = a2[-1].n128_u16[4];
                *v16 = v21;
              }
              a2[-1].n128_u16[4] = v198;
              *v9 = v170;
            }
LABEL_31:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_32;
LABEL_55:
            v42 = *(unsigned __int16 *)(v12 + 16);
            if (*(unsigned __int16 *)(v12 - 8) < v42)
              goto LABEL_56;
            v167 = *(__n128 *)v12;
            v42 = *(unsigned __int16 *)(v12 + 16);
            if (v42 >= a2[-1].n128_u16[4])
            {
              v86 = v12 + 24;
              do
              {
                v12 = v86;
                if (v86 >= (unint64_t)a2)
                  break;
                v87 = *(unsigned __int16 *)(v86 + 16);
                v86 += 24;
              }
              while (v42 >= v87);
            }
            else
            {
              v84 = (__n128 *)(v12 + 24);
              do
              {
                if (v84 == a2)
                  goto LABEL_180;
                v85 = v84[1].n128_u16[0];
                v84 = (__n128 *)((char *)v84 + 24);
              }
              while (v42 >= v85);
              v12 = (unint64_t)&v84[-2].n128_u64[1];
            }
            v88 = a2;
            if (v12 < (unint64_t)a2)
            {
              v89 = a2;
              while (v89 != (__n128 *)a1)
              {
                v88 = (__n128 *)((char *)v89 - 24);
                v90 = v89[-1].n128_u16[4];
                v89 = (__n128 *)((char *)v89 - 24);
                if (v42 >= v90)
                  goto LABEL_95;
              }
              goto LABEL_180;
            }
LABEL_95:
            if (v12 < (unint64_t)v88)
            {
              do
              {
                v215 = *(_QWORD *)(v12 + 16);
                v187 = *(__n128 *)v12;
                v91 = *v88;
                *(_WORD *)(v12 + 16) = v88[1].n128_u16[0];
                *(__n128 *)v12 = v91;
                v88[1].n128_u16[0] = v215;
                *v88 = v187;
                v92 = (__n128 *)(v12 + 24);
                do
                {
                  if (v92 == a2)
                    goto LABEL_180;
                  v93 = v92[1].n128_u16[0];
                  v92 = (__n128 *)((char *)v92 + 24);
                }
                while (v42 >= v93);
                v12 = (unint64_t)&v92[-2].n128_u64[1];
                do
                {
                  if (v88 == (__n128 *)a1)
                    goto LABEL_180;
                  v94 = (unint64_t)&v88[-2].n128_u64[1];
                  v95 = v88[-1].n128_u16[4];
                  v88 = (__n128 *)((char *)v88 - 24);
                }
                while (v42 < v95);
                v88 = (__n128 *)v94;
              }
              while (v12 < v94);
            }
            v96 = (__n128 *)(v12 - 24);
            if (v12 - 24 != a1)
            {
              v97 = *v96;
              *(_WORD *)(a1 + 16) = *(_WORD *)(v12 - 8);
              *(__n128 *)a1 = v97;
            }
            a4 = 0;
            a5 = v167;
            *v96 = v167;
            *(_WORD *)(v12 - 8) = v42;
            continue;
          }
          v18 = v16[1].n128_u16[0];
          if (v18 >= *(unsigned __int16 *)(v12 + 16))
          {
            if (v17 < v18)
            {
              v199 = v16[1].n128_u64[0];
              v171 = *v16;
              v22 = *v9;
              v16[1].n128_u16[0] = a2[-1].n128_u16[4];
              *v16 = v22;
              a2[-1].n128_u16[4] = v199;
              *v9 = v171;
              if (v16[1].n128_u16[0] < *(unsigned __int16 *)(v12 + 16))
              {
                v200 = *(_QWORD *)(v12 + 16);
                v172 = *(__n128 *)v12;
                v23 = *v16;
                *(_WORD *)(v12 + 16) = v16[1].n128_u16[0];
                *(__n128 *)v12 = v23;
                v16[1].n128_u16[0] = v200;
                *v16 = v172;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v203 = *(_QWORD *)(v12 + 16);
              v175 = *(__n128 *)v12;
              v26 = *v16;
              *(_WORD *)(v12 + 16) = v16[1].n128_u16[0];
              *(__n128 *)v12 = v26;
              v16[1].n128_u16[0] = v203;
              *v16 = v175;
              if (a2[-1].n128_u16[4] >= v16[1].n128_u16[0])
                goto LABEL_22;
              v197 = v16[1].n128_u64[0];
              v169 = *v16;
              v27 = *v9;
              v16[1].n128_u16[0] = a2[-1].n128_u16[4];
              *v16 = v27;
            }
            else
            {
              v197 = *(_QWORD *)(v12 + 16);
              v169 = *(__n128 *)v12;
              v19 = *v9;
              *(_WORD *)(v12 + 16) = a2[-1].n128_u16[4];
              *(__n128 *)v12 = v19;
            }
            a2[-1].n128_u16[4] = v197;
            *v9 = v169;
          }
LABEL_22:
          v28 = (__n128 *)(v12 + 24);
          v29 = v12 + 24 * v15;
          v30 = (__n128 *)(v29 - 24);
          v31 = *(unsigned __int16 *)(v29 - 8);
          v32 = a2[-2].n128_u16[0];
          if (v31 >= *(unsigned __int16 *)(v12 + 40))
          {
            if (v32 < v31)
            {
              v204 = v30[1].n128_i64[0];
              v176 = *v30;
              v36 = *v10;
              v30[1].n128_u16[0] = a2[-2].n128_u16[0];
              *v30 = v36;
              a2[-2].n128_u16[0] = v204;
              *v10 = v176;
              if (v30[1].n128_u16[0] < *(unsigned __int16 *)(v12 + 40))
              {
                v37 = *v28;
                v38 = *(_QWORD *)(v12 + 40);
                v39 = v30[1].n128_i16[0];
                *v28 = *v30;
                *(_WORD *)(v12 + 40) = v39;
                v30[1].n128_u16[0] = v38;
                *v30 = v37;
              }
            }
          }
          else
          {
            if (v32 >= v31)
            {
              v43 = *v28;
              v44 = *(_QWORD *)(v12 + 40);
              v45 = v30[1].n128_i16[0];
              *v28 = *v30;
              *(_WORD *)(v12 + 40) = v45;
              v30[1].n128_u16[0] = v44;
              *v30 = v43;
              if (a2[-2].n128_u16[0] >= v44)
                goto LABEL_36;
              v206 = v30[1].n128_i64[0];
              v178 = *v30;
              v46 = *v10;
              v30[1].n128_u16[0] = a2[-2].n128_u16[0];
              *v30 = v46;
              v33 = v178;
              a2[-2].n128_u16[0] = v206;
            }
            else
            {
              v33 = *v28;
              v34 = *(_QWORD *)(v12 + 40);
              v35 = a2[-2].n128_u16[0];
              *v28 = *v10;
              *(_WORD *)(v12 + 40) = v35;
              a2[-2].n128_u16[0] = v34;
            }
            *v10 = v33;
          }
LABEL_36:
          v47 = (__n128 *)(v12 + 48);
          v48 = v12 + 24 * v15;
          v49 = (__n128 *)(v48 + 24);
          v50 = *(unsigned __int16 *)(v48 + 40);
          v51 = a2[-4].n128_u16[4];
          if (v50 >= *(unsigned __int16 *)(v12 + 64))
          {
            if (v51 < v50)
            {
              v207 = v49[1].n128_i64[0];
              v179 = *v49;
              v55 = *(__n128 *)v11;
              v49[1].n128_u16[0] = a2[-4].n128_u16[4];
              *v49 = v55;
              a2[-4].n128_u16[4] = v207;
              *(__n128 *)v11 = v179;
              if (v49[1].n128_u16[0] < *(unsigned __int16 *)(v12 + 64))
              {
                v56 = *v47;
                v57 = *(_QWORD *)(v12 + 64);
                v58 = v49[1].n128_i16[0];
                *v47 = *v49;
                *(_WORD *)(v12 + 64) = v58;
                v49[1].n128_u16[0] = v57;
                *v49 = v56;
              }
            }
          }
          else
          {
            if (v51 >= v50)
            {
              v59 = *v47;
              v60 = *(_QWORD *)(v12 + 64);
              v61 = v49[1].n128_i16[0];
              *v47 = *v49;
              *(_WORD *)(v12 + 64) = v61;
              v49[1].n128_u16[0] = v60;
              *v49 = v59;
              if (a2[-4].n128_u16[4] >= v60)
                goto LABEL_45;
              v208 = v49[1].n128_i64[0];
              v180 = *v49;
              v62 = *(__n128 *)v11;
              v49[1].n128_u16[0] = a2[-4].n128_u16[4];
              *v49 = v62;
              v52 = v180;
              a2[-4].n128_u16[4] = v208;
            }
            else
            {
              v52 = *v47;
              v53 = *(_QWORD *)(v12 + 64);
              v54 = a2[-4].n128_u16[4];
              *v47 = *(__n128 *)v11;
              *(_WORD *)(v12 + 64) = v54;
              a2[-4].n128_u16[4] = v53;
            }
            *(__n128 *)v11 = v52;
          }
LABEL_45:
          v63 = v16[1].n128_u16[0];
          v64 = v49[1].n128_u16[0];
          if (v63 >= v30[1].n128_u16[0])
          {
            if (v64 < v63)
            {
              v210 = v16[1].n128_u64[0];
              v182 = *v16;
              *v16 = *v49;
              v16[1].n128_u16[0] = v49[1].n128_u16[0];
              v49[1].n128_u16[0] = v210;
              *v49 = v182;
              if (v16[1].n128_u16[0] < v30[1].n128_u16[0])
              {
                v211 = v30[1].n128_i64[0];
                v183 = *v30;
                *v30 = *v16;
                v30[1].n128_u16[0] = v16[1].n128_u16[0];
                v16[1].n128_u16[0] = v211;
                *v16 = v183;
              }
            }
          }
          else
          {
            if (v64 >= v63)
            {
              v212 = v30[1].n128_i64[0];
              v184 = *v30;
              *v30 = *v16;
              v30[1].n128_u16[0] = v16[1].n128_u16[0];
              v16[1].n128_u16[0] = v212;
              *v16 = v184;
              if (v49[1].n128_u16[0] >= v16[1].n128_u16[0])
                goto LABEL_54;
              v209 = v16[1].n128_u64[0];
              v181 = *v16;
              *v16 = *v49;
              v16[1].n128_u16[0] = v49[1].n128_u16[0];
            }
            else
            {
              v209 = v30[1].n128_u64[0];
              v181 = *v30;
              *v30 = *v49;
              v30[1].n128_u16[0] = v49[1].n128_u16[0];
            }
            v49[1].n128_u16[0] = v209;
            *v49 = v181;
          }
LABEL_54:
          v213 = *(_QWORD *)(v12 + 16);
          v185 = *(__n128 *)v12;
          v65 = *v16;
          *(_WORD *)(v12 + 16) = v16[1].n128_u16[0];
          *(__n128 *)v12 = v65;
          v16[1].n128_u16[0] = v213;
          *v16 = v185;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_55;
LABEL_32:
          v42 = *(unsigned __int16 *)(v12 + 16);
LABEL_56:
          v66 = 0;
          v166 = *(__n128 *)v12;
          do
          {
            if ((__n128 *)(v12 + v66 + 24) == a2)
              goto LABEL_180;
            v67 = *(unsigned __int16 *)(v12 + v66 + 40);
            v66 += 24;
          }
          while (v67 < v42);
          v68 = v12 + v66;
          v69 = a2;
          if (v66 != 24)
          {
            while (v69 != (__n128 *)v12)
            {
              v70 = (__n128 *)((char *)v69 - 24);
              v71 = v69[-1].n128_u16[4];
              v69 = (__n128 *)((char *)v69 - 24);
              if (v71 < v42)
                goto LABEL_66;
            }
            goto LABEL_180;
          }
          v72 = a2;
          do
          {
            if (v68 >= (unint64_t)v72)
            {
              v70 = v72;
              v12 = v68;
              goto LABEL_77;
            }
            v70 = (__n128 *)((char *)v72 - 24);
            v73 = v72[-1].n128_u16[4];
            v72 = (__n128 *)((char *)v72 - 24);
          }
          while (v73 >= v42);
LABEL_66:
          v12 = v68;
          if (v68 < (unint64_t)v70)
          {
            v74 = v70;
            do
            {
              v214 = *(_QWORD *)(v12 + 16);
              v186 = *(__n128 *)v12;
              v75 = *v74;
              *(_WORD *)(v12 + 16) = v74[1].n128_u16[0];
              *(__n128 *)v12 = v75;
              v74[1].n128_u16[0] = v214;
              *v74 = v186;
              v76 = (__n128 *)(v12 + 24);
              do
              {
                if (v76 == a2)
                  goto LABEL_180;
                v77 = v76[1].n128_u16[0];
                v76 = (__n128 *)((char *)v76 + 24);
              }
              while (v77 < v42);
              v12 = (unint64_t)&v76[-2].n128_u64[1];
              do
              {
                if (v74 == (__n128 *)a1)
                  goto LABEL_180;
                v78 = (unint64_t)&v74[-2].n128_u64[1];
                v79 = v74[-1].n128_u16[4];
                v74 = (__n128 *)((char *)v74 - 24);
              }
              while (v79 >= v42);
              v74 = (__n128 *)v78;
            }
            while (v12 < v78);
          }
LABEL_77:
          v80 = (__n128 *)(v12 - 24);
          if (v12 - 24 != a1)
          {
            v81 = *v80;
            *(_WORD *)(a1 + 16) = *(_WORD *)(v12 - 8);
            *(__n128 *)a1 = v81;
          }
          *v80 = v166;
          *(_WORD *)(v12 - 8) = v42;
          if (v68 < (unint64_t)v70)
            goto LABEL_82;
          v82 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::TMMBRHelp::FindBoundingSet(std::vector<webrtc::rtcp::TmmbItem>)::$_0 &,webrtc::rtcp::TmmbItem*>(a1, (__n128 *)(v12 - 24), v166);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::TMMBRHelp::FindBoundingSet(std::vector<webrtc::rtcp::TmmbItem>)::$_0 &,webrtc::rtcp::TmmbItem*>(v12, a2, v83))
          {
            if (v82)
              continue;
LABEL_82:
            std::__introsort<std::_ClassicAlgPolicy,webrtc::TMMBRHelp::FindBoundingSet(std::vector<webrtc::rtcp::TmmbItem>)::$_0 &,webrtc::rtcp::TmmbItem*,false>(a1, v12 - 24, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 24);
          if (v82)
            return;
          goto LABEL_1;
        }
        v113 = (__n128 *)(v12 + 24);
        v115 = (__n128 *)v12 == a2 || v113 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v115)
          {
            v116 = 0;
            v117 = (__n128 *)v12;
            do
            {
              v119 = v117[2].n128_u16[4];
              v120 = v117[1].n128_u16[0];
              v117 = v113;
              if (v119 < v120)
              {
                v191 = *v113;
                v121 = v116;
                do
                {
                  v122 = v12 + v121;
                  *(_OWORD *)(v122 + 24) = *(_OWORD *)(v12 + v121);
                  *(_WORD *)(v122 + 40) = *(_WORD *)(v12 + v121 + 16);
                  if (!v121)
                  {
                    v118 = v12;
                    goto LABEL_130;
                  }
                  v121 -= 24;
                }
                while (v119 < *(unsigned __int16 *)(v122 - 8));
                v118 = v12 + v121 + 24;
LABEL_130:
                *(__n128 *)v118 = v191;
                *(_WORD *)(v118 + 16) = v119;
              }
              v113 = (__n128 *)((char *)v117 + 24);
              v116 += 24;
            }
            while (&v117[1].n128_i8[8] != (__int8 *)a2);
          }
        }
        else if (!v115)
        {
          v157 = 0;
          v158 = 0;
          v159 = 1;
          while (1)
          {
            v160 = v12 + 24 * v158;
            v158 = v159;
            v161 = *(unsigned __int16 *)(v160 + 40);
            if (v161 < *(unsigned __int16 *)(v160 + 16))
              break;
LABEL_174:
            v159 = v158 + 1;
            v113 = (__n128 *)(v12 + 24 * (v158 + 1));
            v157 += 24;
            if (v113 == a2)
              return;
          }
          v195 = *v113;
          v42 = v157;
          while (1)
          {
            v162 = v12 + v42;
            *(_OWORD *)(v162 + 24) = *(_OWORD *)(v12 + v42);
            *(_WORD *)(v162 + 40) = *(_WORD *)(v12 + v42 + 16);
            v42 -= 24;
            if (v42 == -48)
              break;
            if (v161 >= *(unsigned __int16 *)(v162 - 8))
            {
              v163 = v12 + v42;
              *(__n128 *)(v163 + 24) = v195;
              *(_WORD *)(v163 + 40) = v161;
              goto LABEL_174;
            }
          }
LABEL_180:
          __break(1u);
LABEL_181:
          v221 = *(_QWORD *)(a1 + 16);
          v196 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v42;
          *(_WORD *)(a1 + 16) = *(_WORD *)(v42 + 16);
          *(_OWORD *)v42 = v196;
          *(_WORD *)(v42 + 16) = v221;
          if (a2[-1].n128_u16[4] < *(unsigned __int16 *)(a1 + 40))
          {
            v102 = *(__n128 *)v42;
            v164 = *(_QWORD *)(v42 + 16);
            v165 = a2[-1].n128_u16[4];
            *(__n128 *)v42 = *v9;
            *(_WORD *)(v42 + 16) = v165;
            a2[-1].n128_u16[4] = v164;
LABEL_183:
            *v9 = v102;
          }
        }
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = (unsigned int *)a1;
  while (2)
  {
    a1 = (uint64_t)v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = ((char *)a2 - (char *)v12) >> 4;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = a2[-1].n128_i32[0];
        --a2;
        if (v63 < (int)*v12)
          goto LABEL_111;
        return result;
      case 3:
        v20 = (__n128 *)(v12 + 4);
        v64 = v12[4];
        v66 = a2[-1].n128_u32[0];
        --a2;
        v65 = v66;
        if (v64 < (int)*v12)
        {
          if (v65 >= v64)
            goto LABEL_188;
LABEL_111:
          v138 = *(__n128 *)v12;
          *(__n128 *)v12 = *a2;
          result = v138;
          goto LABEL_112;
        }
        if (v65 < v64)
        {
          result = *v20;
          *v20 = *a2;
          *a2 = result;
          if ((int)v12[4] < (int)*v12)
          {
            v143 = *(__n128 *)v12;
            *(__n128 *)v12 = *v20;
            result = v143;
            *v20 = v143;
          }
        }
        return result;
      case 4:
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>((__n128 *)v12, (__n128 *)v12 + 1, (int *)v12 + 8, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      case 5:
        v67 = (__n128 *)(v12 + 4);
        v68 = (__n128 *)(v12 + 8);
        v69 = (__n128 *)(v12 + 12);
        result.n128_u64[0] = std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::EncoderInfoSettings::GetSinglecastBitrateLimitForResolutionWhenQpIsUntrusted(std::optional<int>,std::vector<webrtc::VideoEncoder::ResolutionBitrateLimits> const&)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits*>((__n128 *)v12, (__n128 *)v12 + 1, (int *)v12 + 8, (_OWORD *)v12 + 3, result).n128_u64[0];
        v71 = a2[-1].n128_i32[0];
        v70 = a2 - 1;
        if (v71 < (int)v12[12])
        {
          result = *v69;
          *v69 = *v70;
          *v70 = result;
          if ((signed __int32)v69->n128_u32[0] < (signed __int32)v68->n128_u32[0])
          {
            result = *v68;
            *v68 = *v69;
            *v69 = result;
            if ((signed __int32)v68->n128_u32[0] < (signed __int32)v67->n128_u32[0])
            {
              result = *v67;
              *v67 = *v68;
              *v68 = result;
              if ((int)v12[4] < (int)*v12)
              {
                v139 = *(__n128 *)v12;
                *(__n128 *)v12 = *v67;
                result = v139;
                *v67 = v139;
              }
            }
          }
        }
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 == (unsigned int *)a2)
              return result;
            v81 = (unint64_t)(v14 - 2) >> 1;
            v82 = v81;
            while (1)
            {
              if (v81 >= v82)
              {
                v83 = (2 * v82) | 1;
                v84 = &v12[4 * v83];
                if (2 * v82 + 2 >= v14)
                {
                  v87 = &v12[4 * v82];
                  v88 = *v87;
                  if ((int)*v84 >= (int)*v87)
                    goto LABEL_149;
                }
                else
                {
                  v85 = v84[4];
                  v86 = (int)*v84 < v85;
                  if ((int)*v84 > v85)
                    v85 = *v84;
                  if (v86)
                  {
                    v84 += 4;
                    v83 = 2 * v82 + 2;
                  }
                  v87 = &v12[4 * v82];
                  v88 = *v87;
                  if (v85 >= (int)*v87)
                  {
LABEL_149:
                    v147 = v87[3];
                    v141 = *(_QWORD *)(v87 + 1);
                    while (1)
                    {
                      v91 = v87;
                      v87 = v84;
                      *(_OWORD *)v91 = *(_OWORD *)v84;
                      if (v81 < v83)
                        break;
                      v92 = (2 * v83) | 1;
                      v84 = &v12[4 * v92];
                      v83 = 2 * v83 + 2;
                      if (v83 < v14)
                      {
                        v89 = *v84;
                        v90 = v84[4];
                        if ((int)*v84 <= v90)
                          v89 = v84[4];
                        if ((int)*v84 >= v90)
                          v83 = v92;
                        else
                          v84 += 4;
                        if (v89 < v88)
                          break;
                      }
                      else
                      {
                        v83 = v92;
                        if ((int)*v84 < v88)
                          break;
                      }
                    }
                    *v87 = v88;
                    v87[3] = v147;
                    *(_QWORD *)(v87 + 1) = v141;
                  }
                }
              }
              v86 = v82-- <= 0;
              if (v86)
              {
                v93 = (unint64_t)v13 >> 4;
                do
                {
                  v94 = 0;
                  v142 = *(__n128 *)v12;
                  v95 = v12;
                  do
                  {
                    v96 = (uint64_t)&v95[v94 + 1];
                    v97 = (2 * v94) | 1;
                    v98 = 2 * v94 + 2;
                    if (v98 < v93 && *(_DWORD *)v96 < *(_DWORD *)(v96 + 16))
                    {
                      v96 += 16;
                      v97 = v98;
                    }
                    *v95 = *(_OWORD *)v96;
                    v95 = (_OWORD *)v96;
                    v94 = v97;
                  }
                  while (v97 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
                  if ((__n128 *)v96 == --a2)
                  {
                    result = v142;
                    *(__n128 *)v96 = v142;
                  }
                  else
                  {
                    *(__n128 *)v96 = *a2;
                    result = v142;
                    *a2 = v142;
                    v99 = v96 - (_QWORD)v12 + 16;
                    if (v99 >= 17)
                    {
                      v100 = (((unint64_t)v99 >> 4) - 2) >> 1;
                      v101 = (__n128 *)&v12[4 * v100];
                      v102 = *(_DWORD *)v96;
                      if ((signed __int32)v101->n128_u32[0] < *(_DWORD *)v96)
                      {
                        v118 = *(_DWORD *)(v96 + 12);
                        v115 = *(_QWORD *)(v96 + 4);
                        do
                        {
                          v103 = (_OWORD *)v96;
                          v96 = (uint64_t)v101;
                          result = *v101;
                          *v103 = *v101;
                          if (!v100)
                            break;
                          v100 = (v100 - 1) >> 1;
                          v101 = (__n128 *)&v12[4 * v100];
                        }
                        while ((signed __int32)v101->n128_u32[0] < v102);
                        *(_DWORD *)v96 = v102;
                        *(_DWORD *)(v96 + 12) = v118;
                        *(_QWORD *)(v96 + 4) = v115;
                      }
                    }
                  }
                  v86 = v93-- <= 2;
                }
                while (!v86);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = (__n128 *)&v12[4 * ((unint64_t)v14 >> 1)];
          v17 = v9->n128_u32[0];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = *v12;
            if ((signed int)*v12 >= (signed __int32)v16->n128_u32[0])
            {
              if (v17 < v19)
              {
                v123 = *(__n128 *)v12;
                *(__n128 *)v12 = *v9;
                result = v123;
                *v9 = v123;
                if ((signed int)*v12 < (signed __int32)v16->n128_u32[0])
                {
                  v124 = *v16;
                  *v16 = *(__n128 *)v12;
                  result = v124;
                  *(__n128 *)v12 = v124;
                  --a3;
                  v20 = (__n128 *)*v12;
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v19)
            {
              v127 = *v16;
              *v16 = *(__n128 *)v12;
              result = v127;
              *(__n128 *)v12 = v127;
              if ((signed __int32)v9->n128_u32[0] >= (signed int)*v12)
                goto LABEL_31;
              v120 = *(__n128 *)v12;
              *(__n128 *)v12 = *v9;
            }
            else
            {
              v120 = *v16;
              *v16 = *v9;
            }
            result = v120;
            *v9 = v120;
LABEL_31:
            --a3;
            v20 = (__n128 *)*v12;
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= (signed int)*v12)
          {
            if (v17 < v18)
            {
              v121 = *v16;
              *v16 = *v9;
              *v9 = v121;
              if ((signed __int32)v16->n128_u32[0] < (signed int)*v12)
              {
                v122 = *(__n128 *)v12;
                *(__n128 *)v12 = *v16;
                *v16 = v122;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v125 = *(__n128 *)v12;
              *(__n128 *)v12 = *v16;
              *v16 = v125;
              if ((signed __int32)v9->n128_u32[0] >= (signed __int32)v16->n128_u32[0])
                goto LABEL_22;
              v119 = *v16;
              *v16 = *v9;
            }
            else
            {
              v119 = *(__n128 *)v12;
              *(__n128 *)v12 = *v9;
            }
            *v9 = v119;
          }
LABEL_22:
          v21 = (__n128 *)(v12 + 4);
          v22 = &v12[4 * v15];
          v25 = *(v22 - 4);
          v23 = (__n128 *)(v22 - 4);
          v24 = v25;
          v26 = v10->n128_u32[0];
          if (v25 >= (int)v12[4])
          {
            if (v26 < v24)
            {
              v126 = *v23;
              *v23 = *v10;
              *v10 = v126;
              if ((signed __int32)v23->n128_u32[0] < (signed __int32)v21->n128_u32[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 >= v24)
            {
              v29 = *v21;
              *v21 = *v23;
              *v23 = v29;
              if ((signed __int32)v10->n128_u32[0] >= (signed __int32)v23->n128_u32[0])
                goto LABEL_36;
              v128 = *v23;
              *v23 = *v10;
              v27 = v128;
            }
            else
            {
              v27 = *v21;
              *v21 = *v10;
            }
            *v10 = v27;
          }
LABEL_36:
          v30 = (__n128 *)(v12 + 8);
          v31 = &v12[4 * v15];
          v34 = v31[4];
          v32 = (__n128 *)(v31 + 4);
          v33 = v34;
          v35 = v11->n128_u32[0];
          if (v34 >= (int)v12[8])
          {
            if (v35 < v33)
            {
              v129 = *v32;
              *v32 = *v11;
              *v11 = v129;
              if ((signed __int32)v32->n128_u32[0] < (signed __int32)v30->n128_u32[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v38 = *v30;
              *v30 = *v32;
              *v32 = v38;
              if ((signed __int32)v11->n128_u32[0] >= (signed __int32)v32->n128_u32[0])
                goto LABEL_45;
              v130 = *v32;
              *v32 = *v11;
              v36 = v130;
            }
            else
            {
              v36 = *v30;
              *v30 = *v11;
            }
            *v11 = v36;
          }
LABEL_45:
          v39 = v16->n128_u32[0];
          v40 = v32->n128_u32[0];
          if ((signed __int32)v16->n128_u32[0] >= (signed __int32)v23->n128_u32[0])
          {
            if (v40 < v39)
            {
              v132 = *v16;
              *v16 = *v32;
              *v32 = v132;
              if ((signed __int32)v16->n128_u32[0] < (signed __int32)v23->n128_u32[0])
              {
                v133 = *v23;
                *v23 = *v16;
                *v16 = v133;
              }
            }
          }
          else
          {
            if (v40 >= v39)
            {
              v134 = *v23;
              *v23 = *v16;
              *v16 = v134;
              if ((signed __int32)v32->n128_u32[0] >= (signed __int32)v16->n128_u32[0])
                goto LABEL_54;
              v131 = *v16;
              *v16 = *v32;
            }
            else
            {
              v131 = *v23;
              *v23 = *v32;
            }
            *v32 = v131;
          }
LABEL_54:
          v135 = *(__n128 *)v12;
          *(__n128 *)v12 = *v16;
          result = v135;
          *v16 = v135;
          --a3;
          v20 = (__n128 *)*v12;
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if ((int)*(v12 - 4) >= (int)v20)
          {
            v117 = v12[3];
            v114 = *(_QWORD *)(v12 + 1);
            if ((int)v20 >= (signed __int32)v9->n128_u32[0])
            {
              v56 = v12 + 4;
              do
              {
                v12 = v56;
                if (v56 >= (unsigned int *)a2)
                  break;
                v56 += 4;
              }
              while ((int)v20 >= (int)*v12);
            }
            else
            {
              v54 = (__n128 *)(v12 + 4);
              do
              {
                if (v54 == a2)
                  goto LABEL_187;
                v55 = v54->n128_u32[0];
                ++v54;
              }
              while ((int)v20 >= v55);
              v12 = (unsigned int *)&v54[-1];
            }
            v57 = a2;
            if (v12 < (unsigned int *)a2)
            {
              v57 = a2;
              while (v57 != (__n128 *)a1)
              {
                v58 = v57[-1].n128_i32[0];
                --v57;
                if ((int)v20 >= v58)
                  goto LABEL_100;
              }
              goto LABEL_187;
            }
LABEL_100:
            if (v12 < (unsigned int *)v57)
            {
              v137 = *(__n128 *)v12;
              *(__n128 *)v12 = *v57;
              result = v137;
              *v57 = v137;
              v59 = (__n128 *)(v12 + 4);
              while (v59 != a2)
              {
                v60 = v59->n128_u32[0];
                ++v59;
                if ((int)v20 < v60)
                {
                  v12 = (unsigned int *)&v59[-1];
                  while (v57 != (__n128 *)a1)
                  {
                    v61 = v57[-1].n128_i32[0];
                    --v57;
                    if ((int)v20 >= v61)
                      goto LABEL_100;
                  }
                  goto LABEL_187;
                }
              }
              goto LABEL_187;
            }
            v62 = (__n128 *)(v12 - 4);
            if (v12 - 4 != (unsigned int *)a1)
            {
              result = *v62;
              *(__n128 *)a1 = *v62;
            }
            a4 = 0;
            *(v12 - 4) = v20;
            *(v12 - 1) = v117;
            *(_QWORD *)(v12 - 3) = v114;
            continue;
          }
LABEL_56:
          v41 = 0;
          v116 = v12[3];
          v113 = *(_QWORD *)(v12 + 1);
          do
          {
            v42 = &v12[v41 + 4];
            if (v42 == (unsigned int *)a2)
              goto LABEL_187;
            v41 += 4;
          }
          while ((int)*v42 < (int)v20);
          v43 = &v12[v41];
          v44 = a2;
          if (v41 != 4)
          {
            while (v44 != (__n128 *)v12)
            {
              v45 = v44[-1].n128_i32[0];
              --v44;
              if (v45 < (int)v20)
                goto LABEL_66;
            }
            goto LABEL_187;
          }
          v44 = a2;
          do
          {
            if (v43 >= (unsigned int *)v44)
              break;
            v46 = v44[-1].n128_i32[0];
            --v44;
          }
          while (v46 >= (int)v20);
LABEL_66:
          v12 = (unsigned int *)((char *)v12 + v41 * 4);
          if (v43 < (unsigned int *)v44)
          {
            v47 = v44;
            do
            {
              v136 = *(__n128 *)v12;
              *(__n128 *)v12 = *v47;
              result = v136;
              *v47 = v136;
              v48 = (__n128 *)(v12 + 4);
              do
              {
                if (v48 == a2)
                  goto LABEL_187;
                v49 = v48->n128_u32[0];
                ++v48;
              }
              while (v49 < (int)v20);
              v12 = (unsigned int *)&v48[-1];
              do
              {
                if (v47 == (__n128 *)a1)
                  goto LABEL_187;
                v50 = v47[-1].n128_i32[0];
                --v47;
              }
              while (v50 >= (int)v20);
            }
            while (v12 < (unsigned int *)v47);
          }
          v51 = (__n128 *)(v12 - 4);
          if (v12 - 4 != (unsigned int *)a1)
          {
            result = *v51;
            *(__n128 *)a1 = *v51;
          }
          *(v12 - 4) = v20;
          *(v12 - 1) = v116;
          *(_QWORD *)(v12 - 3) = v113;
          if (v43 < (unsigned int *)v44)
            goto LABEL_80;
          v52 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *>(a1, (uint64_t)(v12 - 4), result);
          if (!std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *>((uint64_t)v12, (uint64_t)a2, v53))
          {
            if (v52)
              continue;
LABEL_80:
            std::__introsort<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *,false>(a1, v12 - 4, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__n128 *)(v12 - 4);
          if (v52)
            return result;
          goto LABEL_1;
        }
        v20 = (__n128 *)(v12 + 4);
        v73 = v12 == (unsigned int *)a2 || v20 == a2;
        if ((a4 & 1) != 0)
        {
          if (v73)
            return result;
          v74 = 0;
          v75 = (__n128 *)v12;
          while (1)
          {
            v77 = v20;
            v78 = v20->n128_u32[0];
            if (v78 < (signed __int32)v75->n128_u32[0])
            {
              v140 = *(uint64_t *)((char *)v75[1].n128_i64 + 4);
              v146 = v75[1].n128_u32[3];
              v79 = v74;
              do
              {
                result = *(__n128 *)((char *)v12 + v79);
                *(__n128 *)((char *)v12 + v79 + 16) = result;
                if (!v79)
                {
                  v76 = (uint64_t)v12;
                  goto LABEL_129;
                }
                v80 = *(unsigned int *)((char *)v12 + v79 - 16);
                v79 -= 16;
              }
              while (v78 < v80);
              v76 = (uint64_t)v12 + v79 + 16;
LABEL_129:
              *(_DWORD *)v76 = v78;
              *(_DWORD *)(v76 + 12) = v146;
              *(_QWORD *)(v76 + 4) = v140;
            }
            v20 = v77 + 1;
            v74 += 16;
            v75 = v77;
            if (&v77[1] == a2)
              return result;
          }
        }
        if (v73)
          return result;
        v104 = -2;
        v105 = 1;
        v106 = v12;
        while (1)
        {
          v107 = v20->n128_u32[0];
          if ((signed __int32)v20->n128_u32[0] < (signed int)*v106)
            break;
LABEL_181:
          v106 = &v12[4 * v105++];
          ++v20;
          --v104;
          if (v20 == a2)
            return result;
        }
        v144 = *(_QWORD *)(v106 + 5);
        v148 = v106[7];
        v108 = v104;
        v109 = v20;
        while (1)
        {
          result = v109[-1];
          *v109 = result;
          if (__CFADD__(v108++, 1))
            break;
          v111 = v109 - 1;
          v112 = v109[-2].n128_i32[0];
          --v109;
          if (v107 >= v112)
          {
            v111->n128_u32[0] = v107;
            v111->n128_u32[3] = v148;
            *(unint64_t *)((char *)v111->n128_u64 + 4) = v144;
            goto LABEL_181;
          }
        }
LABEL_187:
        __break(1u);
LABEL_188:
        v145 = *(__n128 *)a1;
        *(__n128 *)a1 = *v20;
        result = v145;
        *v20 = v145;
        if ((signed __int32)a2->n128_u32[0] < *(_DWORD *)(a1 + 16))
        {
          result = *v20;
          *v20 = *a2;
LABEL_112:
          *a2 = result;
        }
        return result;
    }
  }
}

  v358 = (int64_t)&a2[-2].__r_.__value_.__r.__words[2];
  v362 = a2;
  v354 = a2 - 4;
  v355 = (std::string *)((char *)a2 - 64);
  v6 = a1;
  while (2)
  {
    a1 = v6;
    v7 = (unint64_t)v362;
    v8 = (uint64_t)v362 - v6;
    v9 = (uint64_t)((uint64_t)v362 - v6) >> 5;
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v157 = v362[-1].__r_.__value_.__s.__data_[20];
        v158 = *(unsigned __int8 *)(a1 + 28);
        if (v157 == v158)
        {
          if (v362[-1].__r_.__value_.__s.__data_[15] < 0)
          {
            i = v362[-1].__r_.__value_.__r.__words[0];
            if ((i & 0x8000000000000000) != 0)
              goto LABEL_847;
            v159 = *(const void **)v358;
            if (i)
            {
              if (!v159)
                goto LABEL_847;
            }
          }
          else
          {
            i = v362[-1].__r_.__value_.__s.__data_[15];
            v159 = (const void *)v358;
          }
          if (*(char *)(a1 + 23) < 0)
          {
            j = *(_QWORD *)(a1 + 8);
            if ((j & 0x8000000000000000) != 0)
              goto LABEL_847;
            v350 = *(const std::string::value_type **)a1;
            if (j)
            {
              if (!v350)
                goto LABEL_847;
            }
          }
          else
          {
            j = *(unsigned __int8 *)(a1 + 23);
            v350 = (const std::string::value_type *)a1;
          }
          if (j >= i)
            v351 = i;
          else
            v351 = j;
          v352 = memcmp(v159, v350, v351);
          if (!v352)
            goto LABEL_848;
          if (v352 < 0)
            goto LABEL_845;
        }
        else if (v157 > v158)
        {
          goto LABEL_845;
        }
        return;
      case 3:
        std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)a1, (std::string *)(a1 + 32), (std::string *)v358);
        return;
      case 4:
        std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(a1, a1 + 32, a1 + 64, v358);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,0>(a1, a1 + 32, a1 + 64, a1 + 96, v358);
        return;
      default:
        if (v8 <= 767)
        {
          if ((a4 & 1) == 0)
          {
            if ((std::string *)a1 == v362)
              return;
            i = a1 + 32;
            if ((std::string *)(a1 + 32) == v362)
              return;
            v246 = 0;
            j = (size_t)&v367;
            v247 = a1 - 32;
            v248 = -1;
            v249 = 1;
            v250 = a1;
            while (1)
            {
              v325 = a1 + 32 * v246;
              v246 = v249;
              v326 = *(unsigned __int8 *)(v250 + 60);
              v327 = *(unsigned __int8 *)(v325 + 28);
              if (v326 == v327)
              {
                if (*(char *)(i + 23) < 0)
                {
                  v328 = *(_QWORD *)(i + 8);
                  if ((v328 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v329 = *(const std::string::value_type **)i;
                  if (v328)
                  {
                    if (!v329)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v328 = *(unsigned __int8 *)(i + 23);
                  v329 = (const std::string::value_type *)i;
                }
                if (*(char *)(v250 + 23) < 0)
                {
                  v331 = *(_QWORD *)(v250 + 8);
                  if ((v331 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v332 = *(const void **)v250;
                  if (v331)
                  {
                    if (!v332)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v331 = *(unsigned __int8 *)(v250 + 23);
                  v332 = (const void *)v250;
                }
                if (v331 >= v328)
                  v333 = v328;
                else
                  v333 = v331;
                v334 = memcmp(v329, v332, v333);
                if (v334)
                {
                  v330 = v362;
                  if (v334 < 0)
                    goto LABEL_789;
                }
                else
                {
                  v46 = v328 >= v331;
                  v330 = v362;
                  if (!v46)
                  {
LABEL_789:
                    if (*(char *)(v250 + 55) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
                    }
                    else
                    {
                      v335 = *(_OWORD *)i;
                      v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
                      *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v335;
                    }
                    v368 = *(_DWORD *)(v250 + 56);
                    v369 = *(_BYTE *)(v250 + 60);
                    v336 = v248;
                    for (i = v247; ; i -= 32)
                    {
                      v337 = (std::string *)(i + 64);
                      v338 = *(_BYTE *)(i + 55);
                      if (*(char *)(i + 87) < 0)
                      {
                        if (v338 >= 0)
                          v339 = (const std::string::value_type *)(i + 32);
                        else
                          v339 = *(const std::string::value_type **)(i + 32);
                        if (v338 >= 0)
                          v340 = *(unsigned __int8 *)(i + 55);
                        else
                          v340 = *(_QWORD *)(i + 40);
                        std::string::__assign_no_alias<false>(v337, v339, v340);
                        *(_DWORD *)(i + 88) = *(_DWORD *)(i + 56);
                        *(_BYTE *)(i + 92) = *(_BYTE *)(i + 60);
                        if (!v336)
                          goto LABEL_847;
                      }
                      else if ((*(_BYTE *)(i + 55) & 0x80) != 0)
                      {
                        std::string::__assign_no_alias<true>(v337, *(char **)(i + 32), *(_QWORD *)(i + 40));
                        *(_DWORD *)(i + 88) = *(_DWORD *)(i + 56);
                        *(_BYTE *)(i + 92) = *(_BYTE *)(i + 60);
                        if (!v336)
                          goto LABEL_847;
                      }
                      else
                      {
                        *(_OWORD *)&v337->__r_.__value_.__l.__data_ = *(_OWORD *)(i + 32);
                        *(_QWORD *)(i + 80) = *(_QWORD *)(i + 48);
                        *(_DWORD *)(i + 88) = *(_DWORD *)(i + 56);
                        *(_BYTE *)(i + 92) = *(_BYTE *)(i + 60);
                        if (!v336)
                          goto LABEL_847;
                      }
                      v341 = *(unsigned __int8 *)(i + 28);
                      if (v369 == v341)
                      {
                        if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                        {
                          size = v367.__r_.__value_.__l.__size_;
                          if ((v367.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                            goto LABEL_847;
                          v343 = (std::string *)v367.__r_.__value_.__r.__words[0];
                          if (v367.__r_.__value_.__l.__size_)
                          {
                            if (!v367.__r_.__value_.__r.__words[0])
                              goto LABEL_847;
                          }
                        }
                        else
                        {
                          size = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                          v343 = &v367;
                        }
                        if (*(char *)(i + 23) < 0)
                        {
                          v344 = *(_QWORD *)(i + 8);
                          if ((v344 & 0x8000000000000000) != 0)
                            goto LABEL_847;
                          v345 = *(const std::string::value_type **)i;
                          if (v344)
                          {
                            if (!v345)
                              goto LABEL_847;
                          }
                        }
                        else
                        {
                          v344 = *(unsigned __int8 *)(i + 23);
                          v345 = (const std::string::value_type *)i;
                        }
                        if (v344 >= size)
                          v346 = size;
                        else
                          v346 = v344;
                        v347 = memcmp(v343, v345, v346);
                        if (v347)
                        {
                          v330 = v362;
                          if ((v347 & 0x80000000) == 0)
                            goto LABEL_827;
                        }
                        else
                        {
                          v46 = size >= v344;
                          v330 = v362;
                          if (v46)
                          {
LABEL_827:
                            v348 = (std::string *)(i + 32);
                            if ((std::string *)(i + 32) != &v367)
                            {
                              if (*(char *)(i + 55) < 0)
                              {
                                if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v322 = &v367;
                                else
                                  v322 = (std::string *)v367.__r_.__value_.__r.__words[0];
                                if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                  v323 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                                else
                                  v323 = v367.__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>(v348, (const std::string::value_type *)v322, v323);
                              }
                              else if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) != 0)
                              {
                                std::string::__assign_no_alias<true>(v348, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
                              }
                              else
                              {
                                v349 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
                                *(_QWORD *)(i + 48) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
                                *(_OWORD *)&v348->__r_.__value_.__l.__data_ = v349;
                              }
                            }
                            v324 = v368;
                            *(_BYTE *)(i + 60) = v369;
                            *(_DWORD *)(i + 56) = v324;
                            if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v367.__r_.__value_.__l.__data_);
                            break;
                          }
                        }
                      }
                      else if (v369 <= v341)
                      {
                        goto LABEL_827;
                      }
                      ++v336;
                    }
                  }
                }
              }
              else
              {
                v330 = v362;
                if (v326 > v327)
                  goto LABEL_789;
              }
              v250 = a1 + 32 * v246;
              v249 = v246 + 1;
              i = a1 + 32 * (v246 + 1);
              v247 += 32;
              --v248;
              if ((std::string *)i == v330)
                return;
            }
          }
          if ((std::string *)a1 == v362)
            return;
          v160 = a1 + 32;
          if ((std::string *)(a1 + 32) == v362)
            return;
          j = 0;
          v161 = a1;
LABEL_529:
          i = v161;
          v161 = v160;
          v220 = *(unsigned __int8 *)(i + 60);
          v221 = *(unsigned __int8 *)(i + 28);
          if (v220 == v221)
          {
            v222 = *(char *)(i + 55);
            v223 = v362;
            if (v222 < 0)
            {
              v224 = *(_QWORD *)(i + 40);
              if ((v224 & 0x8000000000000000) != 0)
                goto LABEL_847;
              v225 = *(const std::string::value_type **)v161;
              if (v224)
              {
                if (!v225)
                  goto LABEL_847;
              }
            }
            else
            {
              v224 = *(unsigned __int8 *)(i + 55);
              v225 = (const std::string::value_type *)v161;
            }
            if (*(char *)(i + 23) < 0)
            {
              v226 = *(_QWORD *)(i + 8);
              if ((v226 & 0x8000000000000000) != 0)
                goto LABEL_847;
              v227 = *(const std::string::value_type **)i;
              if (v226)
              {
                if (!v227)
                  goto LABEL_847;
              }
            }
            else
            {
              v226 = *(unsigned __int8 *)(i + 23);
              v227 = (const std::string::value_type *)i;
            }
            if (v226 >= v224)
              v228 = v224;
            else
              v228 = v226;
            v229 = memcmp(v225, v227, v228);
            if (v229)
            {
              if ((v229 & 0x80000000) == 0)
                goto LABEL_528;
            }
            else if (v224 >= v226)
            {
              goto LABEL_528;
            }
          }
          else
          {
            v223 = v362;
            if (v220 <= v221)
              goto LABEL_528;
            LOBYTE(v222) = *(_BYTE *)(i + 55);
          }
          if ((v222 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)v161, *(_QWORD *)(i + 40));
          }
          else
          {
            v230 = *(_OWORD *)v161;
            v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(v161 + 16);
            *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v230;
          }
          v368 = *(_DWORD *)(i + 56);
          v369 = *(_BYTE *)(i + 60);
          for (i = j; ; i -= 32)
          {
            v231 = a1 + i;
            v232 = (std::string *)(a1 + i + 32);
            v233 = *(_BYTE *)(a1 + i + 23);
            if (*(char *)(a1 + i + 55) < 0)
            {
              if (v233 >= 0)
                v235 = (const std::string::value_type *)(a1 + i);
              else
                v235 = *(const std::string::value_type **)v231;
              if (v233 >= 0)
                v236 = *(unsigned __int8 *)(a1 + i + 23);
              else
                v236 = *(_QWORD *)(v231 + 8);
              std::string::__assign_no_alias<false>(v232, v235, v236);
              v234 = a1 + i;
              *(_DWORD *)(v234 + 56) = *(_DWORD *)(a1 + i + 24);
              *(_BYTE *)(v234 + 60) = *(_BYTE *)(a1 + i + 28);
              if (!i)
              {
LABEL_588:
                v244 = a1;
                if ((std::string *)a1 != &v367)
                  goto LABEL_589;
                goto LABEL_526;
              }
            }
            else if ((*(_BYTE *)(a1 + i + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v232, *(char **)(a1 + i), *(_QWORD *)(a1 + i + 8));
              v234 = a1 + i;
              *(_DWORD *)(v234 + 56) = *(_DWORD *)(a1 + i + 24);
              *(_BYTE *)(v234 + 60) = *(_BYTE *)(a1 + i + 28);
              if (!i)
                goto LABEL_588;
            }
            else
            {
              *(_OWORD *)&v232->__r_.__value_.__l.__data_ = *(_OWORD *)v231;
              *(_QWORD *)(a1 + i + 48) = *(_QWORD *)(v231 + 16);
              v234 = a1 + i;
              *(_DWORD *)(v234 + 56) = *(_DWORD *)(a1 + i + 24);
              *(_BYTE *)(v234 + 60) = *(_BYTE *)(a1 + i + 28);
              if (!i)
                goto LABEL_588;
            }
            v237 = *(unsigned __int8 *)(v234 - 4);
            if (v369 == v237)
            {
              if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
              {
                v238 = v367.__r_.__value_.__l.__size_;
                if ((v367.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v239 = (std::string *)v367.__r_.__value_.__r.__words[0];
                if (v367.__r_.__value_.__l.__size_)
                {
                  if (!v367.__r_.__value_.__r.__words[0])
                    goto LABEL_847;
                }
              }
              else
              {
                v238 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                v239 = &v367;
              }
              v240 = (_QWORD *)(v234 - 32);
              if (*(char *)(a1 + i - 9) < 0)
              {
                v241 = *(_QWORD *)(a1 + i - 24);
                if ((v241 & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v240 = (_QWORD *)*v240;
                if (v241)
                {
                  if (!v240)
                    goto LABEL_847;
                }
              }
              else
              {
                v241 = *(unsigned __int8 *)(a1 + i - 9);
              }
              if (v241 >= v238)
                v242 = v238;
              else
                v242 = v241;
              v243 = memcmp(v239, v240, v242);
              if (v243)
              {
                if ((v243 & 0x80000000) == 0)
                  goto LABEL_586;
              }
              else if (v238 >= v241)
              {
LABEL_586:
                v244 = a1 + i;
                if ((std::string *)(a1 + i) != &v367)
                {
LABEL_589:
                  if (*(char *)(v244 + 23) < 0)
                  {
                    if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v217 = &v367;
                    else
                      v217 = (std::string *)v367.__r_.__value_.__r.__words[0];
                    if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v218 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                    else
                      v218 = v367.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>((std::string *)v244, (const std::string::value_type *)v217, v218);
                  }
                  else if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)v244, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v245 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v244 + 16) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
                    *(_OWORD *)v244 = v245;
                  }
                }
LABEL_526:
                v219 = v368;
                *(_BYTE *)(v234 + 28) = v369;
                *(_DWORD *)(v234 + 24) = v219;
                if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v367.__r_.__value_.__l.__data_);
LABEL_528:
                v160 = v161 + 32;
                j += 32;
                if ((std::string *)(v161 + 32) == v223)
                  return;
                goto LABEL_529;
              }
            }
            else if (v369 <= v237)
            {
              goto LABEL_586;
            }
          }
        }
        if (!j)
        {
          if ((std::string *)a1 == v362)
            return;
          v358 = v8;
          v162 = (unint64_t)(v9 - 2) >> 1;
          v163 = v162;
          v353 = a1;
          while (1)
          {
            v164 = v163;
            if (v162 < v163)
              goto LABEL_390;
            v165 = (2 * v163) | 1;
            v166 = a1 + 32 * v165;
            i = 2 * v163 + 2;
            v361 = v163;
            if ((uint64_t)i < v9)
            {
              j = v166 + 32;
              v167 = *(unsigned __int8 *)(v166 + 28);
              v168 = *(unsigned __int8 *)(v166 + 60);
              if (v167 != v168)
              {
                if (v167 <= v168)
                  goto LABEL_398;
LABEL_397:
                v166 += 32;
                v165 = i;
                goto LABEL_398;
              }
              if (*(char *)(v166 + 23) < 0)
              {
                v169 = *(_QWORD *)(v166 + 8);
                if ((v169 & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v170 = *(char **)v166;
                if (v169 && v170 == 0)
                  goto LABEL_847;
              }
              else
              {
                v169 = *(unsigned __int8 *)(v166 + 23);
                v170 = (char *)(a1 + 32 * v165);
              }
              if (*(char *)(v166 + 55) < 0)
              {
                v211 = *(_QWORD *)(v166 + 40);
                if ((v211 & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v212 = *(const void **)j;
                if (v211 && v212 == 0)
                  goto LABEL_847;
              }
              else
              {
                v211 = *(unsigned __int8 *)(v166 + 55);
                v212 = (const void *)(v166 + 32);
              }
              if (v211 >= v169)
                v214 = v169;
              else
                v214 = v211;
              v215 = memcmp(v170, v212, v214);
              if (v215)
              {
                v164 = v361;
                if (v215 < 0)
                  goto LABEL_397;
              }
              else
              {
                v164 = v361;
                if (v169 < v211)
                  goto LABEL_397;
              }
            }
LABEL_398:
            v171 = a1 + 32 * v164;
            v172 = *(unsigned __int8 *)(v166 + 28);
            v173 = *(unsigned __int8 *)(v171 + 28);
            if (v172 == v173)
            {
              if (*(char *)(v166 + 23) < 0)
              {
                i = *(_QWORD *)(v166 + 8);
                if ((i & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v174 = *(char **)v166;
                if (i && v174 == 0)
                  goto LABEL_847;
              }
              else
              {
                i = *(unsigned __int8 *)(v166 + 23);
                v174 = (char *)v166;
              }
              j = *(char *)(v171 + 23);
              if ((j & 0x80000000) != 0)
              {
                v176 = *(_QWORD *)(v171 + 8);
                if ((v176 & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v177 = *(const std::string::value_type **)v171;
                if (v176)
                {
                  if (!v177)
                    goto LABEL_847;
                }
              }
              else
              {
                v176 = *(unsigned __int8 *)(v171 + 23);
                v177 = (const std::string::value_type *)(a1 + 32 * v164);
              }
              if (v176 >= i)
                v178 = i;
              else
                v178 = v176;
              v179 = memcmp(v174, v177, v178);
              if (v179)
              {
                v164 = v361;
                if (v179 < 0)
                  goto LABEL_390;
              }
              else
              {
                v164 = v361;
                if (i < v176)
                  goto LABEL_390;
              }
            }
            else
            {
              if (v172 > v173)
                goto LABEL_390;
              LOBYTE(j) = *(_BYTE *)(v171 + 23);
            }
            if ((j & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)v171, *(_QWORD *)(v171 + 8));
              v164 = v361;
            }
            else
            {
              v180 = *(_OWORD *)v171;
              v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(v171 + 16);
              *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v180;
            }
            v181 = a1 + 32 * v164;
            v182 = *(_DWORD *)(v181 + 24);
            v369 = *(_BYTE *)(v181 + 28);
            v368 = v182;
            while (1)
            {
              i = v166;
              if (v171 != v166)
              {
                v183 = *(_BYTE *)(v166 + 23);
                if (*(char *)(v171 + 23) < 0)
                {
                  if (v183 >= 0)
                    v185 = (const std::string::value_type *)v166;
                  else
                    v185 = *(const std::string::value_type **)v166;
                  if (v183 >= 0)
                    v186 = *(unsigned __int8 *)(v166 + 23);
                  else
                    v186 = *(_QWORD *)(v166 + 8);
                  std::string::__assign_no_alias<false>((std::string *)v171, v185, v186);
                }
                else if ((*(_BYTE *)(v166 + 23) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>((_QWORD *)v171, *(char **)v166, *(_QWORD *)(v166 + 8));
                }
                else
                {
                  v184 = *(_OWORD *)v166;
                  *(_QWORD *)(v171 + 16) = *(_QWORD *)(v166 + 16);
                  *(_OWORD *)v171 = v184;
                }
              }
              j = v166 + 24;
              v187 = *(_DWORD *)(v166 + 24);
              *(_BYTE *)(v171 + 28) = *(_BYTE *)(v166 + 28);
              *(_DWORD *)(v171 + 24) = v187;
              if (v162 < v165)
                break;
              v188 = 2 * v165;
              v165 = (2 * v165) | 1;
              v166 = a1 + 32 * v165;
              v189 = v188 + 2;
              if (v188 + 2 < v9)
              {
                v190 = *(unsigned __int8 *)(v166 + 28);
                v191 = *(unsigned __int8 *)(v166 + 60);
                if (v190 == v191)
                {
                  a1 = v162;
                  if (*(char *)(v166 + 23) < 0)
                  {
                    v192 = *(_QWORD *)(v166 + 8);
                    if ((v192 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v193 = *(char **)v166;
                    if (v192 && v193 == 0)
                      goto LABEL_847;
                  }
                  else
                  {
                    v192 = *(unsigned __int8 *)(v166 + 23);
                    v193 = (char *)v166;
                  }
                  if (*(char *)(v166 + 55) < 0)
                  {
                    v203 = *(_QWORD *)(v166 + 40);
                    if ((v203 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v204 = *(const void **)(v166 + 32);
                    if (v203)
                    {
                      if (!v204)
                        goto LABEL_847;
                    }
                  }
                  else
                  {
                    v203 = *(unsigned __int8 *)(v166 + 55);
                    v204 = (const void *)(v166 + 32);
                  }
                  if (v203 >= v192)
                    v205 = v192;
                  else
                    v205 = v203;
                  v206 = memcmp(v193, v204, v205);
                  if (v206)
                  {
                    v162 = a1;
                    a1 = v353;
                    if ((v206 & 0x80000000) == 0)
                      goto LABEL_444;
                  }
                  else
                  {
                    v46 = v192 >= v203;
                    v162 = a1;
                    a1 = v353;
                    if (v46)
                      goto LABEL_444;
                  }
LABEL_443:
                  v166 += 32;
                  v165 = v189;
                  goto LABEL_444;
                }
                if (v190 > v191)
                  goto LABEL_443;
              }
LABEL_444:
              v194 = *(unsigned __int8 *)(v166 + 28);
              if (v194 == v369)
              {
                if (*(char *)(v166 + 23) < 0)
                {
                  v195 = *(_QWORD *)(v166 + 8);
                  if ((v195 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v196 = *(char **)v166;
                  if (v195 && v196 == 0)
                    goto LABEL_847;
                }
                else
                {
                  v195 = *(unsigned __int8 *)(v166 + 23);
                  v196 = (char *)v166;
                }
                if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                {
                  v198 = v367.__r_.__value_.__l.__size_;
                  if ((v367.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v199 = (std::string *)v367.__r_.__value_.__r.__words[0];
                  if (v367.__r_.__value_.__l.__size_)
                  {
                    if (!v367.__r_.__value_.__r.__words[0])
                      goto LABEL_847;
                  }
                }
                else
                {
                  v198 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                  v199 = &v367;
                }
                if (v198 >= v195)
                  v200 = v195;
                else
                  v200 = v198;
                v201 = memcmp(v196, v199, v200);
                v171 = i;
                if (v201)
                {
                  if (v201 < 0)
                    break;
                }
                else if (v195 < v198)
                {
                  break;
                }
              }
              else
              {
                v171 = i;
                if (v194 > v369)
                  break;
              }
            }
            v164 = v361;
            if ((std::string *)i != &v367)
            {
              if (*(char *)(i + 23) < 0)
              {
                if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v208 = &v367;
                else
                  v208 = (std::string *)v367.__r_.__value_.__r.__words[0];
                if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v209 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                else
                  v209 = v367.__r_.__value_.__l.__size_;
                std::string::__assign_no_alias<false>((std::string *)i, (const std::string::value_type *)v208, v209);
              }
              else
              {
                if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) == 0)
                {
                  v207 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
                  *(_QWORD *)(i + 16) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
                  *(_OWORD *)i = v207;
                  goto LABEL_517;
                }
                std::string::__assign_no_alias<true>((_QWORD *)i, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
              }
              v164 = v361;
            }
LABEL_517:
            v216 = v368;
            *(_BYTE *)(i + 28) = v369;
            *(_DWORD *)j = v216;
            if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v367.__r_.__value_.__l.__data_);
              v164 = v361;
            }
LABEL_390:
            v163 = v164 - 1;
            if (!v164)
            {
              v251 = (unint64_t)v358 >> 5;
              v358 = (int64_t)&v368;
              j = (size_t)v362;
              while (1)
              {
                v363 = j;
                if (*(char *)(a1 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v364, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
                }
                else
                {
                  v252 = *(_OWORD *)a1;
                  v364.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
                  *(_OWORD *)&v364.__r_.__value_.__l.__data_ = v252;
                }
                v253 = 0;
                v254 = *(_DWORD *)(a1 + 24);
                v366 = *(_BYTE *)(a1 + 28);
                v365 = v254;
                i = a1;
                do
                {
                  j = i;
                  i += 32 * (v253 + 1);
                  v259 = 2 * v253;
                  v253 = (2 * v253) | 1;
                  v260 = v259 + 2;
                  if (v259 + 2 >= v251)
                    goto LABEL_618;
                  v261 = *(unsigned __int8 *)(i + 28);
                  v262 = *(unsigned __int8 *)(i + 60);
                  if (v261 != v262)
                  {
                    if (v261 <= v262)
                      goto LABEL_618;
LABEL_617:
                    i += 32;
                    v253 = v260;
                    goto LABEL_618;
                  }
                  if (*(char *)(i + 23) < 0)
                  {
                    v263 = *(_QWORD *)(i + 8);
                    if ((v263 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v264 = *(const void **)i;
                    if (v263 && v264 == 0)
                      goto LABEL_847;
                  }
                  else
                  {
                    v263 = *(unsigned __int8 *)(i + 23);
                    v264 = (const void *)i;
                  }
                  if (*(char *)(i + 55) < 0)
                  {
                    v268 = *(_QWORD *)(i + 40);
                    if ((v268 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v269 = *(const void **)(i + 32);
                    if (v268 && v269 == 0)
                      goto LABEL_847;
                  }
                  else
                  {
                    v268 = *(unsigned __int8 *)(i + 55);
                    v269 = (const void *)(i + 32);
                  }
                  if (v268 >= v263)
                    v271 = v263;
                  else
                    v271 = v268;
                  v272 = memcmp(v264, v269, v271);
                  if (v272)
                  {
                    if (v272 < 0)
                      goto LABEL_617;
                  }
                  else if (v263 < v268)
                  {
                    goto LABEL_617;
                  }
LABEL_618:
                  if (j != i)
                  {
                    v265 = *(_BYTE *)(i + 23);
                    if (*(char *)(j + 23) < 0)
                    {
                      if (v265 >= 0)
                        v255 = (const std::string::value_type *)i;
                      else
                        v255 = *(const std::string::value_type **)i;
                      if (v265 >= 0)
                        v256 = *(unsigned __int8 *)(i + 23);
                      else
                        v256 = *(_QWORD *)(i + 8);
                      std::string::__assign_no_alias<false>((std::string *)j, v255, v256);
                    }
                    else if ((*(_BYTE *)(i + 23) & 0x80) != 0)
                    {
                      std::string::__assign_no_alias<true>((_QWORD *)j, *(char **)i, *(_QWORD *)(i + 8));
                    }
                    else
                    {
                      v266 = *(_OWORD *)i;
                      *(_QWORD *)(j + 16) = *(_QWORD *)(i + 16);
                      *(_OWORD *)j = v266;
                    }
                  }
                  v258 = (int *)(i + 24);
                  v257 = *(_DWORD *)(i + 24);
                  *(_BYTE *)(j + 28) = *(_BYTE *)(i + 28);
                  *(_DWORD *)(j + 24) = v257;
                }
                while (v253 <= (uint64_t)((unint64_t)(v251 - 2) >> 1));
                j = v363 - 32;
                if (i == v363 - 32)
                {
                  if ((std::string *)i != &v364)
                  {
                    if (*(char *)(i + 23) < 0)
                    {
                      if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v291 = &v364;
                      else
                        v291 = (std::string *)v364.__r_.__value_.__r.__words[0];
                      if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v292 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
                      else
                        v292 = v364.__r_.__value_.__l.__size_;
                      std::string::__assign_no_alias<false>((std::string *)i, (const std::string::value_type *)v291, v292);
                    }
                    else if ((*((_BYTE *)&v364.__r_.__value_.__s + 23) & 0x80) != 0)
                    {
                      std::string::__assign_no_alias<true>((_QWORD *)i, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
                    }
                    else
                    {
                      v275 = *(_OWORD *)&v364.__r_.__value_.__l.__data_;
                      *(_QWORD *)(i + 16) = *((_QWORD *)&v364.__r_.__value_.__l + 2);
                      *(_OWORD *)i = v275;
                    }
                  }
                  v299 = v365;
                  *(_BYTE *)(i + 28) = v366;
                  *v258 = v299;
                  goto LABEL_705;
                }
                v273 = *(_BYTE *)(v363 - 9);
                if (*(char *)(i + 23) < 0)
                {
                  if (v273 >= 0)
                    v276 = (const std::string::value_type *)(v363 - 32);
                  else
                    v276 = *(const std::string::value_type **)(v363 - 32);
                  if (v273 >= 0)
                    v277 = *(unsigned __int8 *)(v363 - 9);
                  else
                    v277 = *(_QWORD *)(v363 - 24);
                  std::string::__assign_no_alias<false>((std::string *)i, v276, v277);
                }
                else if ((*(_BYTE *)(v363 - 9) & 0x80) != 0)
                {
                  std::string::__assign_no_alias<true>((_QWORD *)i, *(char **)(v363 - 32), *(_QWORD *)(v363 - 24));
                }
                else
                {
                  v274 = *(_OWORD *)j;
                  *(_QWORD *)(i + 16) = *(_QWORD *)(v363 - 16);
                  *(_OWORD *)i = v274;
                }
                v278 = *(_DWORD *)(v363 - 8);
                *(_BYTE *)(i + 28) = *(_BYTE *)(v363 - 4);
                *v258 = v278;
                if ((std::string *)j != &v364)
                {
                  if (*(char *)(v363 - 9) < 0)
                  {
                    if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v280 = &v364;
                    else
                      v280 = (std::string *)v364.__r_.__value_.__r.__words[0];
                    if ((v364.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v281 = HIBYTE(v364.__r_.__value_.__r.__words[2]);
                    else
                      v281 = v364.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>((std::string *)j, (const std::string::value_type *)v280, v281);
                  }
                  else if ((*((_BYTE *)&v364.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>((_QWORD *)j, v364.__r_.__value_.__l.__data_, v364.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v279 = *(_OWORD *)&v364.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v363 - 16) = *((_QWORD *)&v364.__r_.__value_.__l + 2);
                    *(_OWORD *)j = v279;
                  }
                }
                v282 = v365;
                *(_BYTE *)(v363 - 4) = v366;
                *(_DWORD *)(v363 - 8) = v282;
                v283 = i + 32 - a1;
                if (v283 >= 33)
                {
                  v284 = (((unint64_t)v283 >> 5) - 2) >> 1;
                  v285 = a1 + 32 * v284;
                  v286 = *(unsigned __int8 *)(v285 + 28);
                  v287 = *(unsigned __int8 *)(i + 28);
                  if (v286 == v287)
                  {
                    if (*(char *)(v285 + 23) < 0)
                    {
                      v288 = *(_QWORD *)(v285 + 8);
                      if ((v288 & 0x8000000000000000) != 0)
                        goto LABEL_847;
                      v289 = *(char **)v285;
                      if (v288 && v289 == 0)
                        goto LABEL_847;
                    }
                    else
                    {
                      v288 = *(unsigned __int8 *)(v285 + 23);
                      v289 = (char *)(a1 + 32 * v284);
                    }
                    v290 = *(char *)(i + 23);
                    if (v290 < 0)
                    {
                      v294 = *(_QWORD *)(i + 8);
                      if ((v294 & 0x8000000000000000) != 0)
                        goto LABEL_847;
                      v295 = *(const void **)i;
                      if (v294)
                      {
                        if (!v295)
                          goto LABEL_847;
                      }
                    }
                    else
                    {
                      v294 = *(unsigned __int8 *)(i + 23);
                      v295 = (const void *)i;
                    }
                    if (v294 >= v288)
                      v296 = v288;
                    else
                      v296 = v294;
                    v297 = memcmp(v289, v295, v296);
                    if (v297)
                    {
                      if (v297 < 0)
                      {
LABEL_701:
                        if ((v290 & 0x80) != 0)
                        {
                          std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
                        }
                        else
                        {
                          v298 = *(_OWORD *)i;
                          v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
                          *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v298;
                        }
                        v300 = *v258;
                        v369 = *(_BYTE *)(i + 28);
                        v368 = v300;
                        while (1)
                        {
                          v301 = v285;
                          if (i == v285)
                            goto LABEL_722;
                          v302 = *(_BYTE *)(v285 + 23);
                          if (*(char *)(i + 23) < 0)
                            break;
                          if ((*(_BYTE *)(v285 + 23) & 0x80) != 0)
                          {
                            std::string::__assign_no_alias<true>((_QWORD *)i, *(char **)v285, *(_QWORD *)(v285 + 8));
                            v305 = v285 + 24;
                            v317 = *(_DWORD *)(v285 + 24);
                            *(_BYTE *)(i + 28) = *(_BYTE *)(v285 + 28);
                            *(_DWORD *)(i + 24) = v317;
                            if (!v284)
                            {
LABEL_745:
                              if ((std::string *)v301 != &v367)
                              {
                                if (*(char *)(v301 + 23) < 0)
                                {
                                  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v319 = &v367;
                                  else
                                    v319 = (std::string *)v367.__r_.__value_.__r.__words[0];
                                  if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                    v320 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                                  else
                                    v320 = v367.__r_.__value_.__l.__size_;
                                  std::string::__assign_no_alias<false>((std::string *)v301, (const std::string::value_type *)v319, v320);
                                }
                                else if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) != 0)
                                {
                                  std::string::__assign_no_alias<true>((_QWORD *)v301, v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
                                }
                                else
                                {
                                  v318 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
                                  *(_QWORD *)(v301 + 16) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
                                  *(_OWORD *)v301 = v318;
                                }
                              }
                              v321 = v368;
                              *(_BYTE *)(v305 + 4) = v369;
                              *(_DWORD *)v305 = v321;
                              if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v367.__r_.__value_.__l.__data_);
                              goto LABEL_705;
                            }
                          }
                          else
                          {
                            v303 = *(_OWORD *)v285;
                            *(_QWORD *)(i + 16) = *(_QWORD *)(v285 + 16);
                            *(_OWORD *)i = v303;
                            v305 = v285 + 24;
                            v304 = *(_DWORD *)(v285 + 24);
                            *(_BYTE *)(i + 28) = *(_BYTE *)(v285 + 28);
                            *(_DWORD *)(i + 24) = v304;
                            if (!v284)
                              goto LABEL_745;
                          }
LABEL_723:
                          v284 = (v284 - 1) >> 1;
                          v285 = a1 + 32 * v284;
                          v309 = *(unsigned __int8 *)(v285 + 28);
                          if (v309 == v369)
                          {
                            if (*(char *)(v285 + 23) < 0)
                            {
                              v310 = *(_QWORD *)(v285 + 8);
                              if ((v310 & 0x8000000000000000) != 0)
                                goto LABEL_847;
                              v311 = *(char **)v285;
                              if (v310 && v311 == 0)
                                goto LABEL_847;
                            }
                            else
                            {
                              v310 = *(unsigned __int8 *)(v285 + 23);
                              v311 = (char *)(a1 + 32 * v284);
                            }
                            if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
                            {
                              v313 = v367.__r_.__value_.__l.__size_;
                              if ((v367.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                                goto LABEL_847;
                              v314 = (std::string *)v367.__r_.__value_.__r.__words[0];
                              if (v367.__r_.__value_.__l.__size_)
                              {
                                if (!v367.__r_.__value_.__r.__words[0])
                                  goto LABEL_847;
                              }
                            }
                            else
                            {
                              v313 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
                              v314 = &v367;
                            }
                            if (v313 >= v310)
                              v315 = v310;
                            else
                              v315 = v313;
                            v316 = memcmp(v311, v314, v315);
                            i = v301;
                            if (v316)
                            {
                              if ((v316 & 0x80000000) == 0)
                                goto LABEL_745;
                            }
                            else if (v310 >= v313)
                            {
                              goto LABEL_745;
                            }
                          }
                          else
                          {
                            i = v301;
                            if (v309 <= v369)
                              goto LABEL_745;
                          }
                        }
                        if (v302 >= 0)
                          v306 = (const std::string::value_type *)v285;
                        else
                          v306 = *(const std::string::value_type **)v285;
                        if (v302 >= 0)
                          v307 = *(unsigned __int8 *)(v285 + 23);
                        else
                          v307 = *(_QWORD *)(v285 + 8);
                        std::string::__assign_no_alias<false>((std::string *)i, v306, v307);
LABEL_722:
                        v305 = v285 + 24;
                        v308 = *(_DWORD *)(v285 + 24);
                        *(_BYTE *)(i + 28) = *(_BYTE *)(v285 + 28);
                        *(_DWORD *)(i + 24) = v308;
                        if (!v284)
                          goto LABEL_745;
                        goto LABEL_723;
                      }
                    }
                    else if (v288 < v294)
                    {
                      goto LABEL_701;
                    }
                  }
                  else if (v286 > v287)
                  {
                    LOBYTE(v290) = *(_BYTE *)(i + 23);
                    goto LABEL_701;
                  }
                }
LABEL_705:
                if (SHIBYTE(v364.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v364.__r_.__value_.__l.__data_);
                v48 = v251-- <= 2;
                if (v48)
                  return;
              }
            }
          }
        }
        i = a1;
        v11 = (unint64_t)v9 >> 1;
        v12 = (std::string *)(i + 32 * ((unint64_t)v9 >> 1));
        if ((unint64_t)v8 <= 0x1000)
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>(v12, (std::string *)i, (std::string *)v358);
          a1 = i;
          v356 = (std::string *)--j;
          if ((a4 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)i, v12, (std::string *)v358);
          v13 = 32 * v11;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)(i + 32), (std::string *)(v13 + i - 32), v355);
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)(i + 64), (std::string *)(i + 32 + v13), v354);
          v7 = (unint64_t)v362;
          std::__sort3[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)(v13 + i - 32), v12, (std::string *)(i + 32 + v13));
          std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)i, v12);
          a1 = i;
          v356 = (std::string *)--j;
          if ((a4 & 1) != 0)
            goto LABEL_27;
        }
        v14 = *(unsigned __int8 *)(a1 - 4);
        v15 = *(unsigned __int8 *)(a1 + 28);
        if (v14 != v15)
        {
          if (v14 > v15)
            goto LABEL_27;
          LOBYTE(j) = *(_BYTE *)(a1 + 23);
          goto LABEL_170;
        }
        v16 = (_QWORD *)(a1 - 32);
        if (*(char *)(a1 - 9) < 0)
        {
          i = *(_QWORD *)(a1 - 24);
          if ((i & 0x8000000000000000) != 0)
            goto LABEL_847;
          v16 = (_QWORD *)*v16;
          if (i)
          {
            if (!v16)
              goto LABEL_847;
          }
        }
        else
        {
          i = *(unsigned __int8 *)(a1 - 9);
        }
        j = *(char *)(a1 + 23);
        if ((j & 0x80000000) != 0)
        {
          v17 = *(_QWORD *)(a1 + 8);
          if ((v17 & 0x8000000000000000) != 0)
            goto LABEL_847;
          v18 = *(const void **)a1;
          if (v17)
          {
            if (!v18)
              goto LABEL_847;
          }
        }
        else
        {
          v17 = *(unsigned __int8 *)(a1 + 23);
          v18 = (const void *)a1;
        }
        if (v17 >= i)
          v19 = i;
        else
          v19 = v17;
        v20 = memcmp(v16, v18, v19);
        if (v20)
        {
          if (v20 < 0)
            goto LABEL_27;
          goto LABEL_170;
        }
        if (i >= v17)
        {
LABEL_170:
          if ((j & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
          }
          else
          {
            v80 = *(_OWORD *)a1;
            v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
            *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v80;
          }
          v91 = *(_DWORD *)(a1 + 24);
          v369 = *(_BYTE *)(a1 + 28);
          v368 = v91;
          j = v369;
          v92 = *(unsigned __int8 *)(v7 - 4);
          if (v369 == v92)
          {
            if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            {
              i = v367.__r_.__value_.__l.__size_;
              if ((v367.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
                goto LABEL_847;
              v93 = (std::string *)v367.__r_.__value_.__r.__words[0];
              if (v367.__r_.__value_.__l.__size_)
              {
                if (!v367.__r_.__value_.__r.__words[0])
                  goto LABEL_847;
              }
            }
            else
            {
              i = HIBYTE(v367.__r_.__value_.__r.__words[2]);
              v93 = &v367;
            }
            if (*(char *)(v7 - 9) < 0)
            {
              v104 = *(_QWORD *)(v7 - 24);
              if ((v104 & 0x8000000000000000) != 0)
                goto LABEL_847;
              v105 = *(const void **)v358;
              if (v104)
              {
                if (!v105)
                  goto LABEL_847;
              }
            }
            else
            {
              v104 = *(unsigned __int8 *)(v7 - 9);
              v105 = (const void *)v358;
            }
            if (v104 >= i)
              v106 = i;
            else
              v106 = v104;
            v107 = memcmp(v93, v105, v106);
            if (v107)
            {
              if (v107 < 0)
                goto LABEL_200;
            }
            else if (i < v104)
            {
LABEL_200:
              v6 = a1 + 32;
              if (a1 + 32 == v7)
                goto LABEL_847;
              i = HIBYTE(v367.__r_.__value_.__r.__words[2]);
              v94 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
              if (v367.__r_.__value_.__l.__size_)
                v95 = v367.__r_.__value_.__r.__words[0] == 0;
              else
                v95 = 0;
              v96 = !v95;
              while (1)
              {
                v97 = *(unsigned __int8 *)(v6 + 28);
                if ((_DWORD)j == v97)
                {
                  if ((i & 0x80) != 0)
                  {
                    if ((*((_QWORD *)&v94 + 1) & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v99 = *((_QWORD *)&v94 + 1);
                    v98 = (std::string *)v94;
                    if ((v96 & 1) == 0)
                      goto LABEL_847;
                  }
                  else
                  {
                    v98 = &v367;
                    v99 = i;
                  }
                  if (*(char *)(v6 + 23) < 0)
                  {
                    v100 = *(_QWORD *)(v6 + 8);
                    if ((v100 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v101 = *(const void **)v6;
                    if (v100)
                    {
                      if (!v101)
                        goto LABEL_847;
                    }
                  }
                  else
                  {
                    v100 = *(unsigned __int8 *)(v6 + 23);
                    v101 = (const void *)v6;
                  }
                  if (v100 >= v99)
                    v102 = v99;
                  else
                    v102 = v100;
                  v103 = memcmp(v98, v101, v102);
                  if (v103)
                  {
                    v7 = (unint64_t)v362;
                    if (v103 < 0)
                      goto LABEL_266;
                  }
                  else
                  {
                    v46 = v99 >= v100;
                    v7 = (unint64_t)v362;
                    if (!v46)
                      goto LABEL_266;
                  }
                }
                else if (j > v97)
                {
                  goto LABEL_266;
                }
                v6 += 32;
                if (v6 == v7)
                  goto LABEL_847;
              }
            }
          }
          else if (v369 > v92)
          {
            goto LABEL_200;
          }
          v6 = a1 + 32;
          if (a1 + 32 < v7)
          {
            i = HIBYTE(v367.__r_.__value_.__r.__words[2]);
            v108 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
            if (v367.__r_.__value_.__l.__size_)
              v109 = v367.__r_.__value_.__r.__words[0] == 0;
            else
              v109 = 0;
            v110 = !v109;
            do
            {
              v111 = *(unsigned __int8 *)(v6 + 28);
              if ((_DWORD)j == v111)
              {
                if ((i & 0x80) != 0)
                {
                  if ((*((_QWORD *)&v108 + 1) & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v113 = *((_QWORD *)&v108 + 1);
                  v112 = (std::string *)v108;
                  if ((v110 & 1) == 0)
                    goto LABEL_847;
                }
                else
                {
                  v112 = &v367;
                  v113 = i;
                }
                if (*(char *)(v6 + 23) < 0)
                {
                  v114 = *(_QWORD *)(v6 + 8);
                  if ((v114 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v115 = *(const void **)v6;
                  if (v114)
                  {
                    if (!v115)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v114 = *(unsigned __int8 *)(v6 + 23);
                  v115 = (const void *)v6;
                }
                if (v114 >= v113)
                  v116 = v113;
                else
                  v116 = v114;
                v117 = memcmp(v112, v115, v116);
                if (v117)
                {
                  v7 = (unint64_t)v362;
                  if (v117 < 0)
                    break;
                }
                else
                {
                  v46 = v113 >= v114;
                  v7 = (unint64_t)v362;
                  if (!v46)
                    break;
                }
              }
              else if (j > v111)
              {
                break;
              }
              v6 += 32;
            }
            while (v6 < v7);
          }
LABEL_266:
          i = v7;
          if (v6 >= v7)
            goto LABEL_295;
          if (v7 == a1)
            goto LABEL_847;
          v118 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
          v119 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
          if (v367.__r_.__value_.__l.__size_)
            v120 = v367.__r_.__value_.__r.__words[0] == 0;
          else
            v120 = 0;
          v121 = !v120;
          i = v358;
          while (1)
          {
            v122 = *(unsigned __int8 *)(i + 28);
            if ((_DWORD)j != v122)
            {
              if (j <= v122)
                goto LABEL_294;
              goto LABEL_276;
            }
            if ((v118 & 0x80) != 0)
            {
              if ((*((_QWORD *)&v119 + 1) & 0x8000000000000000) != 0)
                goto LABEL_847;
              v124 = *((_QWORD *)&v119 + 1);
              v123 = (std::string *)v119;
              if ((v121 & 1) == 0)
                goto LABEL_847;
            }
            else
            {
              v123 = &v367;
              v124 = v118;
            }
            if (*(char *)(i + 23) < 0)
            {
              v125 = *(_QWORD *)(i + 8);
              if ((v125 & 0x8000000000000000) != 0)
                goto LABEL_847;
              v126 = *(const void **)i;
              if (v125)
              {
                if (!v126)
                  goto LABEL_847;
              }
            }
            else
            {
              v125 = *(unsigned __int8 *)(i + 23);
              v126 = (const void *)i;
            }
            v127 = v125 >= v124 ? v124 : v125;
            v128 = memcmp(v123, v126, v127);
            if (!v128)
              break;
            if ((v128 & 0x80000000) == 0)
              goto LABEL_294;
LABEL_276:
            v26 = i == a1;
            i -= 32;
            if (v26)
              goto LABEL_847;
          }
          if (v124 < v125)
            goto LABEL_276;
LABEL_294:
          v7 = (unint64_t)v362;
LABEL_295:
          if (v6 < i)
          {
LABEL_301:
            std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)v6, (std::string *)i);
            v6 += 32;
            if (v6 == v7)
              goto LABEL_847;
            j = v369;
            v132 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
            v133 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
            if (v367.__r_.__value_.__l.__size_)
              v134 = v367.__r_.__value_.__r.__words[0] == 0;
            else
              v134 = 0;
            v135 = !v134;
            while (1)
            {
              v136 = *(unsigned __int8 *)(v6 + 28);
              if ((_DWORD)j == v136)
              {
                if ((v132 & 0x80) != 0)
                {
                  if ((*((_QWORD *)&v133 + 1) & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v138 = *((_QWORD *)&v133 + 1);
                  v137 = (std::string *)v133;
                  if ((v135 & 1) == 0)
                    goto LABEL_847;
                }
                else
                {
                  v137 = &v367;
                  v138 = v132;
                }
                if (*(char *)(v6 + 23) < 0)
                {
                  v139 = *(_QWORD *)(v6 + 8);
                  if ((v139 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v140 = *(const void **)v6;
                  if (v139)
                  {
                    if (!v140)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v139 = *(unsigned __int8 *)(v6 + 23);
                  v140 = (const void *)v6;
                }
                if (v139 >= v138)
                  v141 = v138;
                else
                  v141 = v139;
                v142 = memcmp(v137, v140, v141);
                if (v142)
                {
                  if (v142 < 0)
                    goto LABEL_327;
                }
                else if (v138 < v139)
                {
LABEL_327:
                  if (i == a1)
                    goto LABEL_847;
                  i -= 32;
                  while (2)
                  {
                    v143 = *(unsigned __int8 *)(i + 28);
                    if ((_DWORD)j != v143)
                    {
                      if (j <= v143)
                        goto LABEL_300;
LABEL_330:
                      v26 = i == a1;
                      i -= 32;
                      if (v26)
                        goto LABEL_847;
                      continue;
                    }
                    break;
                  }
                  if ((v132 & 0x80) != 0)
                  {
                    if ((*((_QWORD *)&v133 + 1) & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v145 = *((_QWORD *)&v133 + 1);
                    v144 = (std::string *)v133;
                    if ((v135 & 1) == 0)
                      goto LABEL_847;
                  }
                  else
                  {
                    v144 = &v367;
                    v145 = v132;
                  }
                  if (*(char *)(i + 23) < 0)
                  {
                    v146 = *(_QWORD *)(i + 8);
                    if ((v146 & 0x8000000000000000) != 0)
                      goto LABEL_847;
                    v147 = *(const void **)i;
                    if (v146)
                    {
                      if (!v147)
                        goto LABEL_847;
                    }
                  }
                  else
                  {
                    v146 = *(unsigned __int8 *)(i + 23);
                    v147 = (const void *)i;
                  }
                  if (v146 >= v145)
                    v148 = v145;
                  else
                    v148 = v146;
                  v149 = memcmp(v144, v147, v148);
                  if (v149)
                  {
                    if ((v149 & 0x80000000) == 0)
                      goto LABEL_300;
                    goto LABEL_330;
                  }
                  if (v145 < v146)
                    goto LABEL_330;
LABEL_300:
                  v7 = (unint64_t)v362;
                  if (v6 >= i)
                    break;
                  goto LABEL_301;
                }
              }
              else if (j > v136)
              {
                goto LABEL_327;
              }
              v6 += 32;
              if ((std::string *)v6 == v362)
                goto LABEL_847;
            }
          }
          v129 = (std::string *)(v6 - 32);
          j = (size_t)v356;
          if (v6 - 32 != a1)
          {
            v130 = *(_BYTE *)(v6 - 9);
            if (*(char *)(a1 + 23) < 0)
            {
              if (v130 >= 0)
                v150 = (const std::string::value_type *)(v6 - 32);
              else
                v150 = *(const std::string::value_type **)(v6 - 32);
              if (v130 >= 0)
                v151 = *(unsigned __int8 *)(v6 - 9);
              else
                v151 = *(_QWORD *)(v6 - 24);
              std::string::__assign_no_alias<false>((std::string *)a1, v150, v151);
            }
            else if ((*(_BYTE *)(v6 - 9) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)a1, *(char **)(v6 - 32), *(_QWORD *)(v6 - 24));
            }
            else
            {
              v131 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 - 16);
              *(_OWORD *)a1 = v131;
            }
            v152 = *(_DWORD *)(v6 - 8);
            *(_BYTE *)(a1 + 28) = *(_BYTE *)(v6 - 4);
            *(_DWORD *)(a1 + 24) = v152;
          }
          if (v129 != &v367)
          {
            if (*(char *)(v6 - 9) < 0)
            {
              if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v154 = &v367;
              else
                v154 = (std::string *)v367.__r_.__value_.__r.__words[0];
              if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v155 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
              else
                v155 = v367.__r_.__value_.__l.__size_;
              std::string::__assign_no_alias<false>((std::string *)(v6 - 32), (const std::string::value_type *)v154, v155);
            }
            else if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>((_QWORD *)(v6 - 32), v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
            }
            else
            {
              v153 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
              *(_QWORD *)(v6 - 16) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
              *(_OWORD *)&v129->__r_.__value_.__l.__data_ = v153;
            }
          }
          v156 = v368;
          *(_BYTE *)(v6 - 4) = v369;
          *(_DWORD *)(v6 - 8) = v156;
          if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v367.__r_.__value_.__l.__data_);
          a4 = 0;
          continue;
        }
LABEL_27:
        if (*(char *)(a1 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v367, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          v21 = *(_OWORD *)a1;
          v367.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
          *(_OWORD *)&v367.__r_.__value_.__l.__data_ = v21;
        }
        v22 = *(_DWORD *)(a1 + 24);
        v369 = *(_BYTE *)(a1 + 28);
        v368 = v22;
        if (a1 + 32 == v7)
          goto LABEL_847;
        j = 0;
        v23 = v369;
        v24 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
        i = v367.__r_.__value_.__l.__size_;
        v25 = v367.__r_.__value_.__r.__words[0];
        if (v367.__r_.__value_.__l.__size_)
          v26 = v367.__r_.__value_.__r.__words[0] == 0;
        else
          v26 = 0;
        v27 = !v26;
        while (2)
        {
          v28 = (char *)(a1 + j);
          v29 = *(unsigned __int8 *)(a1 + j + 60);
          if (v29 != v23)
          {
            if (v29 <= v23)
              goto LABEL_58;
LABEL_38:
            j += 32;
            if (a1 + j + 32 == v7)
              goto LABEL_847;
            continue;
          }
          break;
        }
        v30 = v28 + 32;
        v31 = v28[55];
        if (v31 < 0)
        {
          v32 = *(_QWORD *)(a1 + j + 40);
          if ((v32 & 0x8000000000000000) != 0)
            goto LABEL_847;
          v30 = (_QWORD *)*v30;
          if (v32 && v30 == 0)
            goto LABEL_847;
        }
        else
        {
          v32 = v31;
        }
        if ((v24 & 0x80) != 0)
        {
          if ((i & 0x8000000000000000) != 0)
            goto LABEL_847;
          v34 = (std::string *)v25;
          v35 = i;
          if ((v27 & 1) == 0)
            goto LABEL_847;
        }
        else
        {
          v34 = &v367;
          v35 = v24;
        }
        if (v35 >= v32)
          v36 = v32;
        else
          v36 = v35;
        v37 = memcmp(v30, v34, v36);
        if (v37)
        {
          if ((v37 & 0x80000000) == 0)
            goto LABEL_58;
          goto LABEL_38;
        }
        if (v32 < v35)
          goto LABEL_38;
LABEL_58:
        v38 = a1 + j + 32;
        v359 = (std::string *)v38;
        if (!j)
        {
          j = v7;
          if (v38 < v7)
          {
            for (j = v358; ; j -= 32)
            {
              v47 = *(unsigned __int8 *)(j + 28);
              v48 = v47 > v23;
              if (v47 == v23)
              {
                if (*(char *)(j + 23) < 0)
                {
                  v49 = *(_QWORD *)(j + 8);
                  if ((v49 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v50 = *(const void **)j;
                  if (v49)
                  {
                    if (!v50)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v49 = *(unsigned __int8 *)(j + 23);
                  v50 = (const void *)j;
                }
                if ((v24 & 0x80) != 0)
                {
                  if ((i & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v51 = (std::string *)v25;
                  v52 = i;
                  if ((v27 & 1) == 0)
                    goto LABEL_847;
                }
                else
                {
                  v51 = &v367;
                  v52 = v24;
                }
                if (v52 >= v49)
                  v53 = v49;
                else
                  v53 = v52;
                v54 = memcmp(v50, v51, v53);
                if (v54)
                {
                  v38 = (unint64_t)v359;
                  if (v54 < 0)
                    break;
                }
                else
                {
                  v38 = (unint64_t)v359;
                  if (v49 < v52)
                    break;
                }
                if (v38 >= j)
                  break;
              }
              else
              {
                v38 = (unint64_t)v359;
                v46 = v48 || (unint64_t)v359 >= j;
                if (v46)
                  break;
              }
            }
          }
LABEL_106:
          v6 = v38;
          if (v38 < j)
          {
            v55 = j;
            do
            {
              std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)v6, (std::string *)v55);
              v6 += 32;
              if (v6 == v7)
                goto LABEL_847;
              i = v369;
              v56 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
              v57 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
              if (v367.__r_.__value_.__l.__size_)
                v58 = v367.__r_.__value_.__r.__words[0] == 0;
              else
                v58 = 0;
              v59 = !v58;
              v360 = v59;
              while (1)
              {
                v60 = *(unsigned __int8 *)(v6 + 28);
                if (v60 != (_DWORD)i)
                {
                  if (v60 <= i)
                    goto LABEL_136;
                  goto LABEL_118;
                }
                if (*(char *)(v6 + 23) < 0)
                {
                  v61 = *(_QWORD *)(v6 + 8);
                  if ((v61 & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v62 = *(const void **)v6;
                  if (v61)
                  {
                    if (!v62)
                      goto LABEL_847;
                  }
                }
                else
                {
                  v61 = *(unsigned __int8 *)(v6 + 23);
                  v62 = (const void *)v6;
                }
                if ((v56 & 0x80) != 0)
                {
                  if ((*((_QWORD *)&v57 + 1) & 0x8000000000000000) != 0)
                    goto LABEL_847;
                  v64 = *((_QWORD *)&v57 + 1);
                  v63 = (std::string *)v57;
                  if ((v360 & 1) == 0)
                    goto LABEL_847;
                }
                else
                {
                  v63 = &v367;
                  v64 = v56;
                }
                v65 = v64 >= v61 ? v61 : v64;
                v66 = memcmp(v62, v63, v65);
                if (!v66)
                  break;
                if ((v66 & 0x80000000) == 0)
                  goto LABEL_136;
LABEL_118:
                v6 += 32;
                if ((std::string *)v6 == v362)
                  goto LABEL_847;
              }
              if (v61 < v64)
                goto LABEL_118;
LABEL_136:
              if (v55 == a1)
                goto LABEL_847;
              v55 -= 32;
              while (2)
              {
                v67 = *(unsigned __int8 *)(v55 + 28);
                if (v67 != (_DWORD)i)
                {
                  if (v67 > i)
                    goto LABEL_108;
LABEL_139:
                  v26 = v55 == a1;
                  v55 -= 32;
                  if (v26)
                    goto LABEL_847;
                  continue;
                }
                break;
              }
              if (*(char *)(v55 + 23) < 0)
              {
                v68 = *(_QWORD *)(v55 + 8);
                if ((v68 & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v69 = *(const void **)v55;
                if (v68)
                {
                  if (!v69)
                    goto LABEL_847;
                }
              }
              else
              {
                v68 = *(unsigned __int8 *)(v55 + 23);
                v69 = (const void *)v55;
              }
              if ((v56 & 0x80) != 0)
              {
                if ((*((_QWORD *)&v57 + 1) & 0x8000000000000000) != 0)
                  goto LABEL_847;
                v71 = *((_QWORD *)&v57 + 1);
                v70 = (std::string *)v57;
                if ((v360 & 1) == 0)
                  goto LABEL_847;
              }
              else
              {
                v70 = &v367;
                v71 = v56;
              }
              if (v71 >= v68)
                v72 = v68;
              else
                v72 = v71;
              v73 = memcmp(v69, v70, v72);
              if (v73)
              {
                if (v73 < 0)
                  goto LABEL_108;
                goto LABEL_139;
              }
              if (v68 >= v71)
                goto LABEL_139;
LABEL_108:
              v7 = (unint64_t)v362;
            }
            while (v6 < v55);
          }
          v74 = (std::string *)(v6 - 32);
          if (v6 - 32 != a1)
          {
            v75 = *(_BYTE *)(v6 - 9);
            if (*(char *)(a1 + 23) < 0)
            {
              if (v75 >= 0)
                v78 = (const std::string::value_type *)(v6 - 32);
              else
                v78 = *(const std::string::value_type **)(v6 - 32);
              if (v75 >= 0)
                v79 = *(unsigned __int8 *)(v6 - 9);
              else
                v79 = *(_QWORD *)(v6 - 24);
              std::string::__assign_no_alias<false>((std::string *)a1, v78, v79);
              v76 = a1 + 24;
            }
            else
            {
              v76 = a1 + 24;
              if ((*(_BYTE *)(v6 - 9) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>((_QWORD *)a1, *(char **)(v6 - 32), *(_QWORD *)(v6 - 24));
              }
              else
              {
                v77 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(v6 - 16);
                *(_OWORD *)a1 = v77;
              }
            }
            v81 = *(_DWORD *)(v6 - 8);
            *(_BYTE *)(v76 + 4) = *(_BYTE *)(v6 - 4);
            *(_DWORD *)v76 = v81;
          }
          if (v74 == &v367)
            goto LABEL_186;
          if (*(char *)(v6 - 9) < 0)
          {
            if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = &v367;
            else
              v84 = (std::string *)v367.__r_.__value_.__r.__words[0];
            if ((v367.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v85 = HIBYTE(v367.__r_.__value_.__r.__words[2]);
            else
              v85 = v367.__r_.__value_.__l.__size_;
            std::string::__assign_no_alias<false>((std::string *)(v6 - 32), (const std::string::value_type *)v84, v85);
LABEL_186:
            v86 = v368;
            *(_BYTE *)(v6 - 4) = v369;
            *(_DWORD *)(v6 - 8) = v86;
            if ((SHIBYTE(v367.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_188;
LABEL_187:
            operator delete(v367.__r_.__value_.__l.__data_);
            goto LABEL_188;
          }
          if ((*((_BYTE *)&v367.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            v82 = *(_OWORD *)&v367.__r_.__value_.__l.__data_;
            *(_QWORD *)(v6 - 16) = *((_QWORD *)&v367.__r_.__value_.__l + 2);
            *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v82;
            v83 = v368;
            *(_BYTE *)(v6 - 4) = v369;
            *(_DWORD *)(v6 - 8) = v83;
            if ((SHIBYTE(v367.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_188;
            goto LABEL_187;
          }
          std::string::__assign_no_alias<true>((_QWORD *)(v6 - 32), v367.__r_.__value_.__l.__data_, v367.__r_.__value_.__l.__size_);
          v90 = v368;
          *(_BYTE *)(v6 - 4) = v369;
          *(_DWORD *)(v6 - 8) = v90;
          if (SHIBYTE(v367.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_187;
LABEL_188:
          v46 = (unint64_t)v359 >= j;
          j = (size_t)v356;
          if (!v46)
            goto LABEL_192;
          std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)a1, (std::string *)(v6 - 32));
          v88 = v87;
          std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*>((std::string *)v6, v362);
          if (!v89)
          {
            if ((v88 & 1) != 0)
              continue;
LABEL_192:
            std::__introsort<std::_ClassicAlgPolicy,cricket::FilterRtpExtensions(std::vector<webrtc::RtpExtension> const&,BOOL (*)(std::string_view),BOOL,webrtc::FieldTrialsView const&)::$_1 &,webrtc::RtpExtension*,false>(a1, v6 - 32, v356, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (std::string *)(v6 - 32);
          if ((v88 & 1) != 0)
            return;
          goto LABEL_1;
        }
        j = v358;
        if (v7 != a1)
        {
          do
          {
            v39 = *(unsigned __int8 *)(j + 28);
            if (v39 == v23)
            {
              if (*(char *)(j + 23) < 0)
              {
                v40 = *(_QWORD *)(j + 8);
                if ((v40 & 0x8000000000000000) != 0)
                  break;
                v41 = *(const void **)j;
                if (v40)
                {
                  if (!v41)
                    break;
                }
              }
              else
              {
                v40 = *(unsigned __int8 *)(j + 23);
                v41 = (const void *)j;
              }
              if ((v24 & 0x80) != 0)
              {
                if ((i & 0x8000000000000000) != 0)
                  break;
                v42 = (std::string *)v25;
                v43 = i;
                if ((v27 & 1) == 0)
                  break;
              }
              else
              {
                v42 = &v367;
                v43 = v24;
              }
              if (v43 >= v40)
                v44 = v40;
              else
                v44 = v43;
              v45 = memcmp(v41, v42, v44);
              if (v45)
              {
                if (v45 < 0)
                  goto LABEL_80;
              }
              else if (v40 < v43)
              {
LABEL_80:
                v38 = (unint64_t)v359;
                goto LABEL_106;
              }
            }
            else if (v39 > v23)
            {
              goto LABEL_80;
            }
            v26 = j == a1;
            j -= 32;
          }
          while (!v26);
        }
LABEL_847:
        __break(1u);
LABEL_848:
        if (i < j)
LABEL_845:
          std::swap[abi:sn180100]<webrtc::RtpExtension>((std::string *)a1, (std::string *)v358);
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::$_0 &,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::PriorityRateObserverConfig *>(uint64_t a1, __n128 *a2, __n128 a3)
{
  unint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  double v12;
  double v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  __n128 v23;
  __n128 *v24;
  __n128 *v25;
  __n128 *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  __n128 *v54;
  uint64_t v55;
  int v56;
  int v57;
  double v58;
  double v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v5)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(a1 + 8) / *(double *)(a1 + 16))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(__n128 *)a1;
        v9 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 16) = v9;
        *(__n128 *)((char *)a2 - 24) = v8;
        a2[-1].n128_u64[1] = v7;
      }
      return result;
    case 3uLL:
      v10 = (__n128 *)(a1 + 24);
      v11 = (__n128 *)((char *)a2 - 24);
      v12 = (double)*(int *)(a1 + 32) / *(double *)(a1 + 40);
      v13 = (double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1];
      if (v12 >= (double)*(int *)(a1 + 8) / *(double *)(a1 + 16))
      {
        if (v13 < v12)
        {
          v36 = *(_QWORD *)(a1 + 40);
          v37 = *v10;
          v38 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v38;
          *v11 = v37;
          a2[-1].n128_u64[1] = v36;
          if ((double)*(int *)(a1 + 32) / *(double *)(a1 + 40) < (double)*(int *)(a1 + 8) / *(double *)(a1 + 16))
          {
            v39 = *(_QWORD *)(a1 + 16);
            v40 = *(__n128 *)a1;
            *(__n128 *)a1 = *v10;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v10 = v40;
            *(_QWORD *)(a1 + 40) = v39;
          }
        }
      }
      else if (v13 >= v12)
      {
        v45 = *(_QWORD *)(a1 + 16);
        v46 = *(__n128 *)a1;
        *(__n128 *)a1 = *v10;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v10 = v46;
        *(_QWORD *)(a1 + 40) = v45;
        if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(a1 + 32) / *(double *)(a1 + 40))
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = *v10;
          v49 = a2[-1].n128_i64[1];
          *v10 = *v11;
          *(_QWORD *)(a1 + 40) = v49;
          *v11 = v48;
          a2[-1].n128_u64[1] = v47;
        }
      }
      else
      {
        v14 = *(_QWORD *)(a1 + 16);
        v15 = *(__n128 *)a1;
        v16 = a2[-1].n128_i64[1];
        *(__n128 *)a1 = *v11;
        *(_QWORD *)(a1 + 16) = v16;
        *v11 = v15;
        a2[-1].n128_u64[1] = v14;
      }
      return result;
    case 4uLL:
      return 1;
    case 5uLL:
      v24 = (__n128 *)(a1 + 24);
      v25 = (__n128 *)(a1 + 48);
      v26 = (__n128 *)(a1 + 72);
      if ((double)a2[-1].n128_i32[0] / a2[-1].n128_f64[1] < (double)*(int *)(a1 + 80) / *(double *)(a1 + 88))
      {
        v27 = *(_QWORD *)(a1 + 88);
        v28 = *v26;
        v29 = a2[-1].n128_i64[1];
        *v26 = *(__n128 *)((char *)a2 - 24);
        *(_QWORD *)(a1 + 88) = v29;
        *(__n128 *)((char *)a2 - 24) = v28;
        a2[-1].n128_u64[1] = v27;
        if ((double)*(int *)(a1 + 80) / *(double *)(a1 + 88) < (double)*(int *)(a1 + 56) / *(double *)(a1 + 64))
        {
          v30 = *(_QWORD *)(a1 + 64);
          v31 = *v25;
          *v25 = *v26;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v26 = v31;
          *(_QWORD *)(a1 + 88) = v30;
          if ((double)*(int *)(a1 + 56) / *(double *)(a1 + 64) < (double)*(int *)(a1 + 32) / *(double *)(a1 + 40))
          {
            v32 = *(_QWORD *)(a1 + 40);
            v33 = *v24;
            *v24 = *v25;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v25 = v33;
            *(_QWORD *)(a1 + 64) = v32;
            if ((double)*(int *)(a1 + 32) / *(double *)(a1 + 40) < (double)*(int *)(a1 + 8) / *(double *)(a1 + 16))
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(__n128 *)a1;
              *(__n128 *)a1 = *v24;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v24 = v35;
              *(_QWORD *)(a1 + 40) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v17 = (__n128 *)(a1 + 48);
      v18 = (__n128 *)(a1 + 24);
      v19 = (double)*(int *)(a1 + 32) / *(double *)(a1 + 40);
      v20 = (double)*(int *)(a1 + 8) / *(double *)(a1 + 16);
      v21 = (double)*(int *)(a1 + 56) / *(double *)(a1 + 64);
      if (v19 >= v20)
      {
        if (v21 < v19)
        {
          v41 = *(_QWORD *)(a1 + 40);
          v42 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v42;
          *(_QWORD *)(a1 + 64) = v41;
          if ((double)*(int *)(a1 + 32) / *(double *)(a1 + 40) < v20)
          {
            v43 = *(_QWORD *)(a1 + 16);
            v44 = *(__n128 *)a1;
            *(__n128 *)a1 = *v18;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v18 = v44;
            *(_QWORD *)(a1 + 40) = v43;
          }
        }
      }
      else if (v21 >= v19)
      {
        v50 = *(_QWORD *)(a1 + 16);
        v51 = *(__n128 *)a1;
        *(__n128 *)a1 = *v18;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v18 = v51;
        *(_QWORD *)(a1 + 40) = v50;
        if (v21 < (double)*(int *)(a1 + 32) / *(double *)(a1 + 40))
        {
          v52 = *(_QWORD *)(a1 + 40);
          v53 = *v18;
          *v18 = *v17;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
          *v17 = v53;
          *(_QWORD *)(a1 + 64) = v52;
        }
      }
      else
      {
        v22 = *(_QWORD *)(a1 + 16);
        v23 = *(__n128 *)a1;
        *(__n128 *)a1 = *v17;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
        *v17 = v23;
        *(_QWORD *)(a1 + 64) = v22;
      }
      v54 = (__n128 *)(a1 + 72);
      if ((__n128 *)(a1 + 72) == a2)
        return 1;
      v55 = 0;
      v56 = 0;
      break;
  }
  while (1)
  {
    v57 = v54->n128_i32[2];
    v58 = v54[1].n128_f64[0];
    v59 = (double)v57 / v58;
    if (v59 < (double)v17->n128_i32[2] / v17[1].n128_f64[0])
      break;
LABEL_36:
    v17 = v54;
    v55 += 24;
    v54 = (__n128 *)((char *)v54 + 24);
    if (v54 == a2)
      return 1;
  }
  v60 = v54->n128_u64[0];
  v61 = v54->n128_i32[3];
  v62 = v55;
  do
  {
    v63 = a1 + v62;
    *(_OWORD *)(v63 + 72) = *(_OWORD *)(a1 + v62 + 48);
    *(_QWORD *)(v63 + 88) = *(_QWORD *)(a1 + v62 + 64);
    if (v62 == -48)
    {
      *(_QWORD *)a1 = v60;
      *(_DWORD *)(a1 + 8) = v57;
      *(_DWORD *)(a1 + 12) = v61;
      *(double *)(a1 + 16) = v58;
      if (++v56 != 8)
        goto LABEL_36;
      return &v54[1].n128_i8[8] == (__int8 *)a2;
    }
    v62 -= 24;
  }
  while (v59 < (double)*(int *)(v63 + 32) / *(double *)(v63 + 40));
  v64 = a1 + v62;
  *(_QWORD *)(v64 + 72) = v60;
  v64 += 72;
  *(_DWORD *)(v64 + 8) = v57;
  *(_DWORD *)(v64 + 12) = v61;
  *(double *)(v64 + 16) = v58;
  if (++v56 != 8)
    goto LABEL_36;
  return &v54[1].n128_i8[8] == (__int8 *)a2;
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::$_0 &,webrtc::`anonymous namespace'::DistributeBitrateRelatively(std::vector<webrtc::bitrate_allocator_impl::AllocatableTrack> const&,unsigned int,std::map<webrtc::BitrateAllocatorObserver *,int> const&,std::map<webrtc::BitrateAllocatorObserver *,int>*)::PriorityRateObserverConfig *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 result)
{
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v5 = (double)a2->n128_i32[2] / a2[1].n128_f64[0];
  v6 = (double)a3->n128_i32[2] / a3[1].n128_f64[0];
  if (v5 >= (double)a1->n128_i32[2] / a1[1].n128_f64[0])
  {
    if (v6 < v5)
    {
      v9 = a2[1].n128_u64[0];
      result = *a2;
      v10 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v10;
      *a3 = result;
      a3[1].n128_u64[0] = v9;
      if ((double)a2->n128_i32[2] / a2[1].n128_f64[0] < (double)a1->n128_i32[2] / a1[1].n128_f64[0])
      {
        v11 = a1[1].n128_u64[0];
        result = *a1;
        v12 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v12;
        *a2 = result;
        a2[1].n128_u64[0] = v11;
      }
    }
  }
  else
  {
    if (v6 < v5)
    {
      v7 = a1[1].n128_u64[0];
      result = *a1;
      v8 = a3[1].n128_u64[0];
      *a1 = *a3;
      a1[1].n128_u64[0] = v8;
LABEL_9:
      *a3 = result;
      a3[1].n128_u64[0] = v7;
      goto LABEL_10;
    }
    v13 = a1[1].n128_u64[0];
    result = *a1;
    v14 = a2[1].n128_u64[0];
    *a1 = *a2;
    a1[1].n128_u64[0] = v14;
    *a2 = result;
    a2[1].n128_u64[0] = v13;
    if ((double)a3->n128_i32[2] / a3[1].n128_f64[0] < (double)a2->n128_i32[2] / a2[1].n128_f64[0])
    {
      v7 = a2[1].n128_u64[0];
      result = *a2;
      v15 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v15;
      goto LABEL_9;
    }
  }
LABEL_10:
  result.n128_f64[0] = (double)a4->n128_i32[2] / a4[1].n128_f64[0];
  if (result.n128_f64[0] < (double)a3->n128_i32[2] / a3[1].n128_f64[0])
  {
    v16 = a3[1].n128_u64[0];
    result = *a3;
    v17 = a4[1].n128_u64[0];
    *a3 = *a4;
    a3[1].n128_u64[0] = v17;
    *a4 = result;
    a4[1].n128_u64[0] = v16;
    result.n128_f64[0] = (double)a3->n128_i32[2] / a3[1].n128_f64[0];
    if (result.n128_f64[0] < (double)a2->n128_i32[2] / a2[1].n128_f64[0])
    {
      v18 = a2[1].n128_u64[0];
      result = *a2;
      v19 = a3[1].n128_u64[0];
      *a2 = *a3;
      a2[1].n128_u64[0] = v19;
      *a3 = result;
      a3[1].n128_u64[0] = v18;
      result.n128_f64[0] = (double)a2->n128_i32[2] / a2[1].n128_f64[0];
      if (result.n128_f64[0] < (double)a1->n128_i32[2] / a1[1].n128_f64[0])
      {
        v20 = a1[1].n128_u64[0];
        result = *a1;
        v21 = a2[1].n128_u64[0];
        *a1 = *a2;
        a1[1].n128_u64[0] = v21;
        *a2 = result;
        a2[1].n128_u64[0] = v20;
      }
    }
  }
  return result;
}

void webrtc::BitrateConstraint::OnEncoderSettingsUpdated(void **a1, webrtc::VideoEncoder::EncoderInfo *a2)
{
  void **v4;
  _BYTE v5[208];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1;
  if (*((unsigned __int8 *)a1 + 848) == *((unsigned __int8 *)a2 + 840))
  {
    if (*((_BYTE *)a1 + 848))
    {
      webrtc::VideoEncoder::EncoderInfo::operator=((uint64_t)(a1 + 1), (__int128 *)a2);
      webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)v5, (webrtc::VideoEncoder::EncoderInfo *)((char *)a2 + 248));
      webrtc::VideoEncoderConfig::operator=((uint64_t)(a1 + 32), (uint64_t)v5);
      webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)v5);
      memcpy(a1 + 58, (char *)a2 + 456, 0x17DuLL);
    }
  }
  else if (*((_BYTE *)a1 + 848))
  {
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)(a1 + 32));
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(v4);
    *((_BYTE *)a1 + 848) = 0;
  }
  else
  {
    webrtc::VideoEncoder::EncoderInfo::EncoderInfo((webrtc::VideoEncoder::EncoderInfo *)(a1 + 1), a2);
    webrtc::VideoEncoderConfig::VideoEncoderConfig((webrtc::VideoEncoderConfig *)(a1 + 32), (webrtc::VideoEncoder::EncoderInfo *)((char *)a2 + 248));
    memcpy(a1 + 58, (char *)a2 + 456, 0x180uLL);
    *((_BYTE *)a1 + 848) = 1;
  }
}

BOOL webrtc::BitrateConstraint::IsAdaptationUpAllowed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  _BYTE *v30;
  _BYTE *v31;
  int64_t v32;
  __n128 *v33;
  __n128 *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int32 *v39;
  unsigned int v41;

  if (!*(_BYTE *)(a3 + 8))
    return 1;
  if (*(_BYTE *)(a4 + 8) && *(_QWORD *)a4 <= *(_QWORD *)a3)
    return 1;
  if (!*(_BYTE *)(a1 + 848))
    return 1;
  if (!*(_BYTE *)(a1 + 860))
    return 1;
  v10 = *(_DWORD *)(a1 + 856);
  if (!v10)
    return 1;
  v12 = *(unsigned __int8 **)(a1 + 424);
  v11 = *(unsigned __int8 **)(a1 + 432);
  if (v12 == v11)
    goto LABEL_32;
  if (v12[81])
    v13 = *(_BYTE *)(a1 + 496) == 1;
  else
    v13 = 0;
  if (v13)
  {
    v14 = v12[80];
    if (v14 >= 0x22)
    {
LABEL_56:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/svc/scalability_mode_util.cc", 309, "index < kNumScalabilityModes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v14);
      goto LABEL_57;
    }
    v14 = v11 - v12;
    if (v11 - v12 == 96)
      goto LABEL_31;
    v15 = v16 == 1;
  }
  else
  {
    v14 = v11 - v12;
    if (v11 - v12 == 96)
      goto LABEL_32;
    v15 = 0;
  }
  if (!v14)
  {
    __break(1u);
    goto LABEL_56;
  }
  if (v12[82])
    v17 = v15;
  else
    v17 = 1;
  if (v17 != 1)
    return 1;
  v18 = v11 - v12 - 96;
  if (v18 < 0x60)
  {
    v16 = 0;
    v19 = *(unsigned __int8 **)(a1 + 424);
    do
    {
LABEL_30:
      v16 += v19[82];
      v19 += 96;
    }
    while (v19 != v11);
    goto LABEL_31;
  }
  v20 = 0;
  v21 = 0;
  v22 = v18 / 0x60 + 1;
  v19 = &v12[96 * (v22 & 0x7FFFFFFFFFFFFFELL)];
  v23 = v12 + 178;
  v24 = v22 & 0x7FFFFFFFFFFFFFELL;
  do
  {
    v25 = *(v23 - 96);
    v26 = *v23;
    v23 += 192;
    v20 += v25;
    v21 += v26;
    v24 -= 2;
  }
  while (v24);
  v16 = v21 + v20;
  if (v22 != (v22 & 0x7FFFFFFFFFFFFFELL))
    goto LABEL_30;
LABEL_31:
  if (v16 > 1)
    return 1;
LABEL_32:
  v27 = *(_QWORD *)(a2 + 24);
  if ((v27 & 0xFF00000000) == 0)
    return 1;
  v13 = (_DWORD)v27 == 0x7FFFFFFF;
  v28 = 5 * (int)v27 / 3;
  if (v13)
    v29 = 0x7FFFFFFF;
  else
    v29 = v28;
  v31 = *(_BYTE **)(a1 + 184);
  v30 = *(_BYTE **)(a1 + 192);
  v32 = v30 - v31;
  if (v30 != v31)
  {
    if ((v32 & 0x8000000000000000) == 0)
    {
      v33 = (__n128 *)operator new(v30 - v31);
      v34 = &v33[v32 >> 4];
      memcpy(v33, v31, v32);
      goto LABEL_40;
    }
LABEL_57:
    abort();
  }
  v33 = 0;
  v34 = 0;
LABEL_40:
  v35 = v34 - v33;
  v36 = 126 - 2 * __clz(v35);
  if (v34 == v33)
    v37 = 0;
  else
    v37 = v36;
  std::__introsort<std::_ClassicAlgPolicy,webrtc::VideoEncoder::EncoderInfo::GetEncoderBitrateLimitsForResolution(int)::$_0 &,webrtc::VideoEncoder::ResolutionBitrateLimits *,false>((uint64_t)v33, v34, v37, 1, a9);
  if (v34 == v33)
  {
    if (v33)
LABEL_52:
      operator delete(v33);
    return 1;
  }
  if (v35 <= 1)
    v38 = 1;
  else
    v38 = v34 - v33;
  v39 = &v33->n128_u32[1];
  while ((int)*(v39 - 1) < v29)
  {
    v39 += 4;
    if (!--v38)
      goto LABEL_52;
  }
  v41 = *v39;
  operator delete(v33);
  return v10 >= v41;
}

void webrtc::BitrateConstraint::~BitrateConstraint(void **this)
{
  *this = &off_24C0B01A0;
  if (*((_BYTE *)this + 848))
  {
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)(this + 32));
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(this + 1);
  }
}

{
  *this = &off_24C0B01A0;
  if (*((_BYTE *)this + 848))
  {
    webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)(this + 32));
    webrtc::VideoEncoder::EncoderInfo::~EncoderInfo(this + 1);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BitrateConstraint::Name(char *a1@<X8>)
{
  a1[23] = 17;
  if (a1 <= "BitrateConstraint" && a1 + 17 > "BitrateConstraint")
    __break(1u);
  else
    strcpy(a1, "BitrateConstraint");
}

uint64_t webrtc::BitrateEstimator::BitrateEstimator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *p_p;
  void *__p;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B01D0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = off_24C0B4170;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 71) = 17;
  if (a1 + 48 <= (unint64_t)"initial_window_ms" && a1 + 65 > (unint64_t)"initial_window_ms")
    goto LABEL_25;
  strcpy((char *)(a1 + 48), "initial_window_ms");
  *(_QWORD *)(a1 + 96) = off_24C0B4170;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 16) = &unk_24C0B40B0;
  *(_DWORD *)(a1 + 76) = 500;
  *(_OWORD *)(a1 + 80) = xmmword_208F05920;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 151) = 9;
  *(_QWORD *)(a1 + 104) = 0;
  if (a1 + 128 <= (unint64_t)"window_ms" && a1 + 137 > (unint64_t)"window_ms")
    goto LABEL_25;
  strcpy((char *)(a1 + 128), "window_ms");
  *(_QWORD *)(a1 + 176) = off_24C0B4170;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 96) = &unk_24C0B40B0;
  *(_DWORD *)(a1 + 156) = 150;
  *(_OWORD *)(a1 + 160) = xmmword_208F05920;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 231) = 5;
  *(_QWORD *)(a1 + 184) = 0;
  if (a1 + 208 <= (unint64_t)"scale" && a1 + 213 > (unint64_t)"scale")
    goto LABEL_25;
  *(_BYTE *)(a1 + 212) = 101;
  *(_QWORD *)(a1 + 248) = off_24C0B4170;
  *(_DWORD *)(a1 + 208) = 1818321779;
  *(_BYTE *)(a1 + 213) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 176) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 240) = 0x4024000000000000;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 303) = 9;
  if (a1 + 280 <= (unint64_t)"scale_alr" && a1 + 289 > (unint64_t)"scale_alr")
    goto LABEL_25;
  strcpy((char *)(a1 + 280), "scale_alr");
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 248) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 312) = 0x4024000000000000;
  *(_QWORD *)(a1 + 320) = off_24C0B4170;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 375) = 11;
  if (a1 + 352 <= (unint64_t)"scale_small" && a1 + 363 > (unint64_t)"scale_small")
    goto LABEL_25;
  strcpy((char *)(a1 + 352), "scale_small");
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 320) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 384) = 0x4024000000000000;
  *(_QWORD *)(a1 + 392) = off_24C0B4170;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 447) = 12;
  if (a1 + 424 <= (unint64_t)"small_thresh" && a1 + 436 > (unint64_t)"small_thresh")
    goto LABEL_25;
  strcpy((char *)(a1 + 424), "small_thresh");
  *(_BYTE *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 392) = &unk_24C0B0238;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = off_24C0B4170;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 519) = 12;
  if (a1 + 496 <= (unint64_t)"symmetry_cap" && a1 + 508 > (unint64_t)"symmetry_cap")
    goto LABEL_25;
  strcpy((char *)(a1 + 496), "symmetry_cap");
  *(_BYTE *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 464) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = off_24C0B4170;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 591) = 5;
  if (a1 + 568 <= (unint64_t)"floor" && a1 + 573 > (unint64_t)"floor")
    goto LABEL_25;
  *(_BYTE *)(a1 + 572) = 114;
  *(_DWORD *)(a1 + 568) = 1869573222;
  *(_BYTE *)(a1 + 573) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 536) = &unk_24C0B0208;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 616) = -1;
  *(_QWORD *)(a1 + 624) = 0x42480000BF800000;
  v9[0] = a1 + 16;
  v9[1] = a1 + 96;
  v9[2] = a1 + 176;
  v9[3] = a1 + 248;
  v9[4] = a1 + 320;
  v9[5] = a1 + 392;
  v9[6] = a1 + 464;
  v9[7] = a1 + 536;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-BweThroughputWindowConfig", 32);
  if (((char)v8 & 0x80000000) == 0)
  {
    v3 = v8;
    p_p = (char *)&__p;
    goto LABEL_22;
  }
  v3 = v7;
  if (v7 < 0 || (p_p = (char *)__p, v7) && !__p)
LABEL_25:
    __break(1u);
LABEL_22:
  webrtc::ParseFieldTrial(v9, 8, p_p, v3);
  if ((char)v8 < 0)
    operator delete(__p);
  return a1;
}

uint64_t webrtc::FieldTrialParameter<webrtc::DataRate>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t webrtc::FieldTrialParameter<webrtc::DataSize>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void webrtc::BitrateEstimator::~BitrateEstimator(webrtc::BitrateEstimator *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = off_24C0B01D0;
  *((_QWORD *)this + 67) = off_24C0B4170;
  if ((*((char *)this + 591) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 68);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 71));
  v2 = (void *)*((_QWORD *)this + 68);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 69) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 58) = off_24C0B4170;
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 59);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 62));
  v3 = (void *)*((_QWORD *)this + 59);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 60) = v3;
    operator delete(v3);
  }
LABEL_7:
  *((_QWORD *)this + 49) = off_24C0B4170;
  if ((*((char *)this + 447) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 50);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 53));
  v4 = (void *)*((_QWORD *)this + 50);
  if (v4)
  {
LABEL_9:
    *((_QWORD *)this + 51) = v4;
    operator delete(v4);
  }
LABEL_10:
  *((_QWORD *)this + 40) = off_24C0B4170;
  if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    v5 = (void *)*((_QWORD *)this + 41);
    if (!v5)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(*((void **)this + 44));
  v5 = (void *)*((_QWORD *)this + 41);
  if (v5)
  {
LABEL_12:
    *((_QWORD *)this + 42) = v5;
    operator delete(v5);
  }
LABEL_13:
  *((_QWORD *)this + 31) = off_24C0B4170;
  if ((*((char *)this + 303) & 0x80000000) == 0)
  {
    v6 = (void *)*((_QWORD *)this + 32);
    if (!v6)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*((void **)this + 35));
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
LABEL_15:
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
LABEL_16:
  *((_QWORD *)this + 22) = off_24C0B4170;
  if ((*((char *)this + 231) & 0x80000000) == 0)
  {
    v7 = (void *)*((_QWORD *)this + 23);
    if (!v7)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(*((void **)this + 26));
  v7 = (void *)*((_QWORD *)this + 23);
  if (v7)
  {
LABEL_18:
    *((_QWORD *)this + 24) = v7;
    operator delete(v7);
  }
LABEL_19:
  *((_QWORD *)this + 12) = off_24C0B4170;
  if ((*((char *)this + 151) & 0x80000000) == 0)
  {
    v8 = (void *)*((_QWORD *)this + 13);
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  operator delete(*((void **)this + 16));
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
LABEL_21:
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
LABEL_22:
  *((_QWORD *)this + 2) = off_24C0B4170;
  if (*((char *)this + 71) < 0)
  {
    operator delete(*((void **)this + 6));
    v9 = (void *)*((_QWORD *)this + 3);
    if (!v9)
      return;
  }
  else
  {
    v9 = (void *)*((_QWORD *)this + 3);
    if (!v9)
      return;
  }
  *((_QWORD *)this + 4) = v9;
  operator delete(v9);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = off_24C0B01D0;
  *((_QWORD *)this + 67) = off_24C0B4170;
  if (*((char *)this + 591) < 0)
  {
    operator delete(*((void **)this + 71));
    v2 = (void *)*((_QWORD *)this + 68);
    if (!v2)
    {
LABEL_4:
      *((_QWORD *)this + 58) = off_24C0B4170;
      if (*((char *)this + 519) < 0)
      {
        operator delete(*((void **)this + 62));
        v3 = (void *)*((_QWORD *)this + 59);
        if (!v3)
        {
LABEL_7:
          *((_QWORD *)this + 49) = off_24C0B4170;
          if (*((char *)this + 447) < 0)
          {
            operator delete(*((void **)this + 53));
            v4 = (void *)*((_QWORD *)this + 50);
            if (!v4)
            {
LABEL_10:
              *((_QWORD *)this + 40) = off_24C0B4170;
              if (*((char *)this + 375) < 0)
              {
                operator delete(*((void **)this + 44));
                v5 = (void *)*((_QWORD *)this + 41);
                if (!v5)
                {
LABEL_13:
                  *((_QWORD *)this + 31) = off_24C0B4170;
                  if (*((char *)this + 303) < 0)
                  {
                    operator delete(*((void **)this + 35));
                    v6 = (void *)*((_QWORD *)this + 32);
                    if (!v6)
                    {
LABEL_16:
                      *((_QWORD *)this + 22) = off_24C0B4170;
                      if (*((char *)this + 231) < 0)
                      {
                        operator delete(*((void **)this + 26));
                        v7 = (void *)*((_QWORD *)this + 23);
                        if (!v7)
                        {
LABEL_19:
                          *((_QWORD *)this + 12) = off_24C0B4170;
                          if (*((char *)this + 151) < 0)
                          {
                            operator delete(*((void **)this + 16));
                            v8 = (void *)*((_QWORD *)this + 13);
                            if (!v8)
                            {
LABEL_22:
                              *((_QWORD *)this + 2) = off_24C0B4170;
                              if (*((char *)this + 71) < 0)
                              {
                                operator delete(*((void **)this + 6));
                                v9 = (void *)*((_QWORD *)this + 3);
                                if (!v9)
                                  goto LABEL_41;
                              }
                              else
                              {
                                v9 = (void *)*((_QWORD *)this + 3);
                                if (!v9)
                                  goto LABEL_41;
                              }
                              *((_QWORD *)this + 4) = v9;
                              operator delete(v9);
LABEL_41:
                              JUMPOUT(0x20BD0ADECLL);
                            }
                          }
                          else
                          {
                            v8 = (void *)*((_QWORD *)this + 13);
                            if (!v8)
                              goto LABEL_22;
                          }
                          *((_QWORD *)this + 14) = v8;
                          operator delete(v8);
                          goto LABEL_22;
                        }
                      }
                      else
                      {
                        v7 = (void *)*((_QWORD *)this + 23);
                        if (!v7)
                          goto LABEL_19;
                      }
                      *((_QWORD *)this + 24) = v7;
                      operator delete(v7);
                      goto LABEL_19;
                    }
                  }
                  else
                  {
                    v6 = (void *)*((_QWORD *)this + 32);
                    if (!v6)
                      goto LABEL_16;
                  }
                  *((_QWORD *)this + 33) = v6;
                  operator delete(v6);
                  goto LABEL_16;
                }
              }
              else
              {
                v5 = (void *)*((_QWORD *)this + 41);
                if (!v5)
                  goto LABEL_13;
              }
              *((_QWORD *)this + 42) = v5;
              operator delete(v5);
              goto LABEL_13;
            }
          }
          else
          {
            v4 = (void *)*((_QWORD *)this + 50);
            if (!v4)
              goto LABEL_10;
          }
          *((_QWORD *)this + 51) = v4;
          operator delete(v4);
          goto LABEL_10;
        }
      }
      else
      {
        v3 = (void *)*((_QWORD *)this + 59);
        if (!v3)
          goto LABEL_7;
      }
      *((_QWORD *)this + 60) = v3;
      operator delete(v3);
      goto LABEL_7;
    }
  }
  else
  {
    v2 = (void *)*((_QWORD *)this + 68);
    if (!v2)
      goto LABEL_4;
  }
  *((_QWORD *)this + 69) = v2;
  operator delete(v2);
  goto LABEL_4;
}

float webrtc::BitrateEstimator::Update(uint64_t a1, uint64_t a2, int a3, int a4)
{
  float result;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  float v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  uint64_t v29;
  int v30;
  float v31;

  result = *(float *)(a1 + 624);
  v5 = 156;
  if (result < 0.0)
    v5 = 76;
  v6 = *(int *)(a1 + v5);
  v7 = a2 / 0x3E8uLL;
  if (a2 % 0x3E8uLL > 0x1F3)
    ++v7;
  if (-a2 % 0x3E8uLL <= 0x1F4)
    v8 = 0;
  else
    v8 = -1;
  if (a2 < 0)
    v7 = v8 - -a2 / 0x3E8uLL;
  v9 = *(_QWORD *)(a1 + 616);
  v10 = v7 - v9;
  if (v7 < v9)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 608) = 0;
    *(_QWORD *)(a1 + 616) = v7;
    v11 = -v6;
    if (v6 <= 0)
      goto LABEL_19;
LABEL_17:
    *(_DWORD *)(a1 + 8) += a3;
    return result;
  }
  if (v9 < 0)
  {
    v13 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)(a1 + 616) = v7;
    v11 = v13 - v6;
    if (v13 >= v6)
      goto LABEL_19;
    goto LABEL_17;
  }
  v12 = *(_QWORD *)(a1 + 608) + v10;
  *(_QWORD *)(a1 + 608) = v12;
  if (v10 > v6)
  {
    *(_DWORD *)(a1 + 8) = 0;
    v12 %= v6;
    *(_QWORD *)(a1 + 608) = v12;
  }
  *(_QWORD *)(a1 + 616) = v7;
  v11 = v12 - v6;
  if (v12 < v6)
    goto LABEL_17;
LABEL_19:
  v14 = *(int *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 456);
  v16 = (float)((float)(int)v14 * 8.0) / (float)(int)v6;
  *(_QWORD *)(a1 + 608) = v11;
  *(_DWORD *)(a1 + 8) = a3;
  if (v16 < 0.0)
    return result;
  if (result < 0.0)
  {
    *(float *)(a1 + 624) = v16;
    return result;
  }
  v17 = v15 > v14;
  v18 = v16 < result;
  v19 = 240;
  if ((v18 & a4) != 0)
    v19 = 312;
  v20 = !v17 || !v18;
  v21 = 384;
  if (v20)
    v21 = v19;
  v22 = *(double *)(a1 + v21);
  v23 = vabds_f32(result, v16) * v22;
  v24 = *(_QWORD *)(a1 + 528);
  v25 = INFINITY;
  if (v24 != 0x7FFFFFFFFFFFFFFFLL)
    v25 = (float)v24 * 0.001;
  if (v24 == 0x8000000000000000)
    v25 = -INFINITY;
  if (v25 >= v16)
    v25 = v16;
  v26 = (float)(v23 / (float)(result + v25)) * (float)(v23 / (float)(result + v25));
  v27 = *(float *)(a1 + 628) + 5.0;
  v28 = (float)((float)(v16 * v27) + (float)(v26 * result)) / (float)(v27 + v26);
  v29 = *(_QWORD *)(a1 + 600);
  if (v29 == 0x8000000000000000)
  {
    v30 = -8388608;
  }
  else
  {
    if (v29 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v31 = (float)v29 * 0.001;
      goto LABEL_39;
    }
    v30 = 2139095040;
  }
  v31 = *(float *)&v30;
LABEL_39:
  if (v28 < v31)
    v28 = v31;
  *(float *)(a1 + 624) = v28;
  result = (float)(v27 * v26) / (float)(v27 + v26);
  *(float *)(a1 + 628) = result;
  return result;
}

uint64_t webrtc::BitrateEstimator::bitrate(webrtc::BitrateEstimator *this)
{
  float v1;
  float v3;

  v1 = *((float *)this + 156);
  if (v1 < 0.0)
    return 0;
  v3 = v1 * 1000.0;
  if (v3 == INFINITY)
    return 0x7FFFFFFFFFFFFFFFLL;
  if (v3 == -INFINITY)
    return 0x8000000000000000;
  return (uint64_t)v3;
}

float webrtc::BitrateEstimator::ExpectFastRateChange(webrtc::BitrateEstimator *this)
{
  float result;

  result = *((float *)this + 157) + 200.0;
  *((float *)this + 157) = result;
  return result;
}

void webrtc::FieldTrialParameter<webrtc::DataSize>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialParameter<webrtc::DataSize>::Parse(uint64_t result, _BYTE *__src)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  char v5;

  if (!__src[24])
    return 0;
  v2 = result;
  if (((char)__src[23] & 0x80000000) == 0)
  {
    v3 = __src[23];
    goto LABEL_7;
  }
  v3 = *((_QWORD *)__src + 1);
  if ((v3 & 0x8000000000000000) == 0)
  {
    __src = *(_BYTE **)__src;
    if (!v3 || __src)
    {
LABEL_7:
      webrtc::ParseTypedParameter<webrtc::DataSize>((void **)__src, v3);
      if (v5)
      {
        *(_QWORD *)(v2 + 64) = v4;
        return 1;
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

void webrtc::FieldTrialParameter<webrtc::DataRate>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialParameter<webrtc::DataRate>::Parse(uint64_t result, _BYTE *__src)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  char v5;

  if (!__src[24])
    return 0;
  v2 = result;
  if (((char)__src[23] & 0x80000000) == 0)
  {
    v3 = __src[23];
    goto LABEL_7;
  }
  v3 = *((_QWORD *)__src + 1);
  if ((v3 & 0x8000000000000000) == 0)
  {
    __src = *(_BYTE **)__src;
    if (!v3 || __src)
    {
LABEL_7:
      webrtc::ParseTypedParameter<webrtc::DataRate>((void **)__src, v3);
      if (v5)
      {
        *(_QWORD *)(v2 + 64) = v4;
        return 1;
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t webrtc::BitrateProberConfig::BitrateProberConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *p_p;
  void *__p;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B4170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 55) = 15;
  if (a1 + 32 <= (unint64_t)"min_probe_delta" && a1 + 47 > (unint64_t)"min_probe_delta")
    goto LABEL_15;
  strcpy((char *)(a1 + 32), "min_probe_delta");
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &unk_24C0B0268;
  *(_QWORD *)(a1 + 64) = 2000;
  *(_QWORD *)(a1 + 72) = off_24C0B4170;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 127) = 15;
  if (a1 + 104 <= (unint64_t)"max_probe_delay" && a1 + 119 > (unint64_t)"max_probe_delay")
    goto LABEL_15;
  strcpy((char *)(a1 + 104), "max_probe_delay");
  *(_QWORD *)(a1 + 144) = off_24C0B4170;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 72) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 136) = 10000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 199) = 15;
  if (a1 + 176 <= (unint64_t)"min_packet_size" && a1 + 191 > (unint64_t)"min_packet_size")
    goto LABEL_15;
  strcpy((char *)(a1 + 176), "min_packet_size");
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 144) = &unk_24C0B0238;
  *(_QWORD *)(a1 + 208) = 200;
  *(_BYTE *)(a1 + 216) = 0;
  v9[0] = a1;
  v9[1] = a1 + 72;
  v9[2] = a1 + 144;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-ProbingBehavior", 26);
  if (((char)v8 & 0x80000000) == 0)
  {
    v3 = v8;
    p_p = (char *)&__p;
    goto LABEL_12;
  }
  v3 = v7;
  if (v7 < 0 || (p_p = (char *)__p, v7) && !__p)
LABEL_15:
    __break(1u);
LABEL_12:
  webrtc::ParseFieldTrial(v9, 3, p_p, v3);
  if ((char)v8 < 0)
    operator delete(__p);
  return a1;
}

void webrtc::BitrateProber::CreateProbeCluster(uint64_t a1, int32x2_t *a2)
{
  unint64_t v4;
  void **v5;
  unint64_t v6;
  int32x2_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  _BOOL4 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  char *v20;
  void *v21;
  char *v22;
  void **v23;
  void *v24;
  void *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  void *v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  char *v42;
  void **v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  void **v82;
  char *v83;
  void **v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  __int128 *v88;
  _OWORD *v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  int32x2_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  int64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  __int128 *v120;
  _OWORD *v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  int64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __int128 *v137;
  _OWORD *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  int32x2_t v142;
  uint64_t v143;
  int32x2_t v144;
  int32x2_t v145;
  char v146;
  _QWORD v147[3];
  _QWORD v148[2];
  std::string v149;
  _QWORD *v150;
  std::string v151;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = *(void ***)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 40);
    do
    {
      v7 = *a2;
      if (*a2 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v8 = *((_QWORD *)v5[v6 / 0x49] + 7 * (v6 % 0x49) + 4);
        if (v8 != 0x8000000000000000)
        {
          v9 = *(_QWORD *)&v7 == 0x8000000000000000 || v8 == 0x7FFFFFFFFFFFFFFFLL;
          v10 = v9 || *(_QWORD *)&v7 - v8 <= 5000000;
          v11 = !v10;
          if (v4 <= 5 && !v11)
            break;
        }
      }
      --v4;
      *(_QWORD *)(a1 + 40) = ++v6;
      *(_QWORD *)(a1 + 48) = v4;
      if (v6 >= 0x92)
      {
        operator delete(*v5);
        v5 = (void **)(*(_QWORD *)(a1 + 16) + 8);
        *(_QWORD *)(a1 + 16) = v5;
        v4 = *(_QWORD *)(a1 + 48);
        v6 = *(_QWORD *)(a1 + 40) - 73;
        *(_QWORD *)(a1 + 40) = v6;
      }
    }
    while (v4);
  }
  else
  {
    v5 = *(void ***)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 40);
  }
  v12 = *(char **)(a1 + 24);
  v13 = (v12 - (char *)v5) >> 3;
  v14 = 73 * v13 - 1;
  v15 = v12 - (char *)v5;
  v17 = *a2;
  v16 = (uint64_t)a2[1];
  v18 = a2[2];
  v145 = a2[3];
  if (v12 == (char *)v5)
    v14 = 0;
  if (v14 == v4 + v6)
  {
    v144 = a2[2];
    if (v6 >= 0x49)
    {
      v19 = *a2;
      *(_QWORD *)(a1 + 40) = v6 - 73;
      v20 = (char *)(v5 + 1);
      v21 = *v5;
      *(_QWORD *)(a1 + 16) = v5 + 1;
      if (v12 != *(char **)(a1 + 32))
        goto LABEL_25;
      v34 = *(char **)(a1 + 8);
      if (v20 > v34)
      {
        v35 = v16;
        v36 = (v20 - v34) >> 3;
        if (v36 >= -1)
          v37 = v36 + 1;
        else
          v37 = v36 + 2;
        v38 = v37 >> 1;
        v39 = -v38;
        v40 = &v20[-8 * v38];
        v41 = v12 - v20;
        if (v12 != v20)
        {
          memmove(&v20[-8 * v38], v20, v12 - v20);
          v12 = *(char **)(a1 + 16);
        }
        v42 = &v12[8 * v39];
        v12 = &v40[v41];
        *(_QWORD *)(a1 + 16) = v42;
        *(_QWORD *)(a1 + 24) = &v40[v41];
        v16 = v35;
        goto LABEL_26;
      }
      v44 = (v12 - v34) >> 2;
      if (v12 == v34)
        v44 = 1;
      if (!(v44 >> 61))
      {
        v45 = v16;
        v46 = v44 >> 2;
        v47 = 8 * v44;
        v48 = (char *)operator new(8 * v44);
        v49 = &v48[8 * v46];
        v50 = v12 - v20;
        v9 = v12 == v20;
        v12 = v49;
        if (v9)
          goto LABEL_131;
        v12 = &v49[v50 & 0xFFFFFFFFFFFFFFF8];
        v51 = v50 - 8;
        if ((unint64_t)(v50 - 8) >= 0x38)
        {
          v117 = &v48[8 * v46];
          v52 = v117;
          if ((unint64_t)(v117 - v20) >= 0x20)
          {
            v118 = (v51 >> 3) + 1;
            v119 = 8 * (v118 & 0x3FFFFFFFFFFFFFFCLL);
            v52 = &v49[v119];
            v20 += v119;
            v120 = (__int128 *)(v5 + 3);
            v121 = v117 + 16;
            v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v123 = *v120;
              *(v121 - 1) = *(v120 - 1);
              *v121 = v123;
              v120 += 2;
              v121 += 2;
              v122 -= 4;
            }
            while (v122);
            if (v118 == (v118 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_131:
              *(_QWORD *)(a1 + 8) = v48;
              *(_QWORD *)(a1 + 16) = v49;
              *(_QWORD *)(a1 + 24) = v12;
              *(_QWORD *)(a1 + 32) = &v48[v47];
              v16 = v45;
              if (v34)
              {
                operator delete(v34);
                v12 = *(char **)(a1 + 24);
              }
LABEL_25:
              if (v12)
              {
LABEL_26:
                *(_QWORD *)v12 = v21;
                v12 = (char *)(*(_QWORD *)(a1 + 24) + 8);
                *(_QWORD *)(a1 + 24) = v12;
                v17 = v19;
LABEL_101:
                v5 = *(void ***)(a1 + 16);
                v18 = v144;
                goto LABEL_102;
              }
LABEL_146:
              __break(1u);
              goto LABEL_147;
            }
          }
        }
        else
        {
          v52 = &v48[8 * v46];
        }
        do
        {
          v124 = *(_QWORD *)v20;
          v20 += 8;
          *(_QWORD *)v52 = v124;
          v52 += 8;
        }
        while (v52 != v12);
        goto LABEL_131;
      }
LABEL_147:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v143 = (uint64_t)a2[1];
    v22 = *(char **)(a1 + 32);
    v23 = *(void ***)(a1 + 8);
    if (v13 >= (unint64_t)((v22 - (char *)v23) >> 3))
    {
      v142 = *a2;
      if (v22 == (char *)v23)
        v26 = 1;
      else
        v26 = (v22 - (char *)v23) >> 2;
      if (v26 >> 61)
        goto LABEL_147;
      v27 = (char *)operator new(8 * v26);
      v28 = &v27[8 * v13];
      v29 = &v27[8 * v26];
      v30 = operator new(0xFF8uLL);
      v31 = v30;
      if (v13 == v26)
      {
        v16 = v143;
        if (v15 < 1)
        {
          v53 = v15 >> 2;
          if (v12 == (char *)v5)
            v53 = 1;
          if (v53 >> 61)
            goto LABEL_147;
          v54 = 8 * v53;
          v28 = (char *)operator new(8 * v53);
          operator delete(v27);
          v29 = &v28[v54];
          v55 = *(char **)(a1 + 16);
          v12 = *(char **)(a1 + 24);
          v27 = v28;
          *(_QWORD *)v28 = v31;
          v33 = v28 + 8;
          if (v12 != v55)
            goto LABEL_67;
        }
        else
        {
          v32 = v13 + 2;
          if (v13 >= -1)
            v32 = v13 + 1;
          v28 -= 8 * (v32 >> 1);
          *(_QWORD *)v28 = v30;
          v33 = v28 + 8;
          if (v12 != (char *)v5)
          {
            while (1)
            {
LABEL_67:
              if (v28 == v27)
              {
                if (v33 >= v29)
                {
                  v63 = (v29 - v28) >> 2;
                  if (v29 == v28)
                    v63 = 1;
                  if (v63 >> 61)
                    goto LABEL_147;
                  v64 = (v63 + 3) >> 2;
                  v65 = 8 * v63;
                  v66 = (char *)operator new(8 * v63);
                  v27 = v66;
                  v59 = &v66[8 * v64];
                  v57 = v59;
                  v67 = v33 - v28;
                  if (v33 != v28)
                  {
                    v57 = &v59[v67 & 0xFFFFFFFFFFFFFFF8];
                    v68 = v67 - 8;
                    v69 = &v66[8 * v64];
                    v70 = v28;
                    if (v68 < 0x38)
                      goto LABEL_150;
                    v69 = &v66[8 * v64];
                    v70 = v28;
                    if ((unint64_t)(v69 - v28) < 0x20)
                      goto LABEL_150;
                    v71 = (v68 >> 3) + 1;
                    v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                    v69 = &v59[v72];
                    v70 = &v28[v72];
                    v73 = (__int128 *)(v28 + 16);
                    v74 = &v66[8 * v64 + 16];
                    v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v76 = *v73;
                      *((_OWORD *)v74 - 1) = *(v73 - 1);
                      *(_OWORD *)v74 = v76;
                      v73 += 2;
                      v74 += 32;
                      v75 -= 4;
                    }
                    while (v75);
                    if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_150:
                      do
                      {
                        v77 = *(_QWORD *)v70;
                        v70 += 8;
                        *(_QWORD *)v69 = v77;
                        v69 += 8;
                      }
                      while (v69 != v57);
                    }
                  }
                  v29 = &v66[v65];
                  operator delete(v28);
                }
                else
                {
                  v61 = (v29 - v33) >> 3;
                  if (v61 >= -1)
                    v62 = v61 + 1;
                  else
                    v62 = v61 + 2;
                  v57 = &v33[8 * (v62 >> 1)];
                  v59 = &v28[8 * (v62 >> 1)];
                  if (v33 == v28)
                  {
                    v27 = v33;
                  }
                  else
                  {
                    memmove(&v28[8 * (v62 >> 1)], v28, v33 - v28);
                    v27 = v28;
                  }
                }
              }
              else
              {
                v59 = v28;
                v57 = v33;
              }
              v60 = *((_QWORD *)v12 - 1);
              v12 -= 8;
              *((_QWORD *)v59 - 1) = v60;
              v56 = v59 - 8;
              v33 = v57;
              v28 = v56;
              if (v12 == *(char **)(a1 + 16))
                goto LABEL_63;
            }
          }
        }
      }
      else
      {
        v16 = v143;
        *(_QWORD *)v28 = v30;
        v33 = v28 + 8;
        if (v12 != (char *)v5)
          goto LABEL_67;
      }
      v56 = v28;
      v57 = v33;
LABEL_63:
      v58 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v27;
      *(_QWORD *)(a1 + 16) = v56;
      v12 = v57;
      *(_QWORD *)(a1 + 24) = v57;
      *(_QWORD *)(a1 + 32) = v29;
      v17 = v142;
      if (v58)
      {
        operator delete(v58);
        v12 = *(char **)(a1 + 24);
      }
      goto LABEL_101;
    }
    v24 = operator new(0xFF8uLL);
    v25 = v24;
    if (v22 != v12)
    {
      if (v12)
      {
        *(_QWORD *)v12 = v24;
        v12 = (char *)(*(_QWORD *)(a1 + 24) + 8);
        *(_QWORD *)(a1 + 24) = v12;
        v16 = v143;
        goto LABEL_101;
      }
      goto LABEL_146;
    }
    if (v5 == v23)
    {
      v78 = (v22 - (char *)v5) >> 2;
      if (v12 == (char *)v5)
        v78 = 1;
      if (v78 >> 61)
        goto LABEL_147;
      v79 = (v78 + 3) >> 2;
      v80 = 8 * v78;
      v81 = (char *)operator new(8 * v78);
      v43 = (void **)&v81[8 * v79];
      v82 = v43;
      v16 = v143;
      if (v12 != (char *)v5)
      {
        v82 = &v43[v13];
        v83 = &v81[8 * v79];
        v84 = v5;
        if ((unint64_t)(v15 - 8) < 0x38)
          goto LABEL_151;
        v85 = &v81[8 * v79];
        v83 = v85;
        v84 = v5;
        if ((unint64_t)(v85 - (char *)v5) < 0x20)
          goto LABEL_151;
        v86 = ((unint64_t)(v15 - 8) >> 3) + 1;
        v87 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        v83 = (char *)&v43[v87];
        v84 = &v5[v87];
        v88 = (__int128 *)(v5 + 2);
        v89 = v85 + 16;
        v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v91 = *v88;
          *(v89 - 1) = *(v88 - 1);
          *v89 = v91;
          v88 += 2;
          v89 += 2;
          v90 -= 4;
        }
        while (v90);
        if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_151:
          do
          {
            v92 = (uint64_t)*v84++;
            *(_QWORD *)v83 = v92;
            v83 += 8;
          }
          while (v83 != (char *)v82);
        }
      }
      *(_QWORD *)(a1 + 8) = v81;
      *(_QWORD *)(a1 + 16) = v43;
      *(_QWORD *)(a1 + 24) = v82;
      *(_QWORD *)(a1 + 32) = &v81[v80];
      if (v5)
      {
        operator delete(v5);
        v43 = *(void ***)(a1 + 16);
      }
    }
    else
    {
      v43 = v5;
      v16 = v143;
    }
    *(v43 - 1) = v25;
    v93 = *(char **)(a1 + 16);
    v94 = *(char **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v93 - 8;
    v95 = *((_QWORD *)v93 - 1);
    *(_QWORD *)(a1 + 16) = v93;
    if (v94 != *(char **)(a1 + 32))
      goto LABEL_99;
    v110 = *(char **)(a1 + 8);
    if (v93 > v110)
    {
      v111 = (v93 - v110) >> 3;
      if (v111 >= -1)
        v112 = v111 + 1;
      else
        v112 = v111 + 2;
      v113 = v112 >> 1;
      v114 = -v113;
      v115 = &v93[-8 * v113];
      v116 = v94 - v93;
      if (v94 != v93)
      {
        memmove(&v93[-8 * v113], v93, v94 - v93);
        v93 = *(char **)(a1 + 16);
      }
      v94 = &v115[v116];
      *(_QWORD *)(a1 + 16) = &v93[8 * v114];
      *(_QWORD *)(a1 + 24) = &v115[v116];
      goto LABEL_100;
    }
    v125 = (v94 - v110) >> 2;
    if (v94 == v110)
      v125 = 1;
    if (v125 >> 61)
      goto LABEL_147;
    v126 = v125 >> 2;
    v127 = 8 * v125;
    v128 = (char *)operator new(8 * v125);
    v129 = &v128[8 * v126];
    v130 = v94 - v93;
    v9 = v94 == v93;
    v94 = v129;
    if (!v9)
    {
      v94 = &v129[v130 & 0xFFFFFFFFFFFFFFF8];
      v131 = v130 - 8;
      if ((unint64_t)(v130 - 8) < 0x38)
      {
        v132 = &v128[8 * v126];
        do
        {
LABEL_143:
          v141 = *(_QWORD *)v93;
          v93 += 8;
          *(_QWORD *)v132 = v141;
          v132 += 8;
        }
        while (v132 != v94);
        goto LABEL_144;
      }
      v133 = &v128[8 * v126];
      v132 = v133;
      if ((unint64_t)(v133 - v93) < 0x20)
        goto LABEL_143;
      v134 = (v131 >> 3) + 1;
      v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
      v132 = &v129[v135];
      v136 = &v93[v135];
      v137 = (__int128 *)(v93 + 16);
      v138 = v133 + 16;
      v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v140 = *v137;
        *(v138 - 1) = *(v137 - 1);
        *v138 = v140;
        v137 += 2;
        v138 += 2;
        v139 -= 4;
      }
      while (v139);
      v93 = v136;
      if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_143;
    }
LABEL_144:
    *(_QWORD *)(a1 + 8) = v128;
    *(_QWORD *)(a1 + 16) = v129;
    *(_QWORD *)(a1 + 24) = v94;
    *(_QWORD *)(a1 + 32) = &v128[v127];
    v16 = v143;
    if (v110)
    {
      operator delete(v110);
      v94 = *(char **)(a1 + 24);
    }
LABEL_99:
    if (!v94)
      goto LABEL_146;
LABEL_100:
    *(_QWORD *)v94 = v95;
    v12 = (char *)(*(_QWORD *)(a1 + 24) + 8);
    *(_QWORD *)(a1 + 24) = v12;
    goto LABEL_101;
  }
LABEL_102:
  if (v12 == (char *)v5)
    goto LABEL_146;
  v96 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(a1 + 40);
  v97 = (char *)v5[v96 / 0x49];
  if (!v97)
    goto LABEL_146;
  v98 = (unsigned __int128)((*(_QWORD *)&v18 * v16 + 4000000) * (__int128)0x431BDE82D7B634DBLL) >> 64;
  v99 = (int32x2_t *)&v97[56 * (v96 % 0x49)];
  *v99 = (int32x2_t)v16;
  v99[1] = vrev64_s32(v145);
  v99[2] = (int32x2_t)((v98 >> 21) + (v98 >> 63));
  v99[3] = 0;
  v99[4] = v17;
  v99[5] = (int32x2_t)0x8000000000000000;
  v99[6].i32[0] = 0;
  v100 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v100 + 1;
  if (v100 != -1 && *(_DWORD *)a1 == 1)
  {
    if (*(_BYTE *)(a1 + 280))
      goto LABEL_107;
    v101 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (*(_QWORD *)(a1 + 40) / 0x49uLL))
                      + 56 * (*(_QWORD *)(a1 + 40) % 0x49uLL))
          * *(_QWORD *)(a1 + 128)
          + 4000000)
         / 8000000;
    if (*(_QWORD *)(a1 + 272) < v101)
      v101 = *(_QWORD *)(a1 + 272);
    if (v101 <= 0)
    {
LABEL_107:
      *(_QWORD *)(a1 + 56) = 0x8000000000000000;
      *(_DWORD *)a1 = 2;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v147[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/b"
              "itrate_prober.cc";
    v147[1] = 969;
    v147[2] = &v146;
    v148[0] = "Probe cluster (bitrate_bps:min bytes:min packets): (";
    v148[1] = v147;
    webrtc::ToString(v16, (char *)&v151);
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v149, v151.__r_.__value_.__l.__data_, v151.__r_.__value_.__l.__size_);
      v109 = v148;
      v150 = v148;
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v151.__r_.__value_.__l.__data_);
        v109 = v150;
      }
    }
    else
    {
      v149 = v151;
      v109 = v148;
      v150 = v148;
    }
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v102, v103, v104, v105, v106, v107, v108, *(_QWORD *)v109[1]);
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
  }
}

void webrtc::BitrateProber::ProbeSent(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string *v25;
  uint64_t v26;

  if (*(_QWORD *)(a1 + 48))
  {
    v9 = *(_QWORD *)(a1 + 40);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * (v9 / 0x49));
    v11 = v9 % 0x49;
    v12 = v10 + 56 * (v9 % 0x49);
    v13 = (_DWORD *)(v12 + 24);
    v14 = *(_DWORD *)(v12 + 24);
    if (!v14)
      *(_QWORD *)(v10 + 56 * v11 + 40) = a2;
    v15 = v10 + 56 * v11;
    v17 = *(int *)(v15 + 28);
    v16 = (_DWORD *)(v15 + 28);
    v18 = v17 + a3;
    *v16 = v18;
    *v13 = v14 + 1;
    v19 = *(_QWORD *)v12;
    if (*(uint64_t *)v12 > 0)
    {
      v20 = *(_QWORD *)(v10 + 56 * v11 + 40);
      if ((unint64_t)(v20 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
      {
LABEL_17:
        v25 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/bitrate_prober.cc", 196, "cluster.started_at.IsFinite()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v26);
        webrtc::FieldTrialParameter<webrtc::TimeDelta>::~FieldTrialParameter((uint64_t)v25);
        return;
      }
      *(_QWORD *)(a1 + 56) = 8000000 * v18 / v19 + v20;
      if (*v16 < *(_DWORD *)(v12 + 16) || *v13 < *(_DWORD *)(v12 + 12))
        goto LABEL_11;
      v21 = *(void ***)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 40);
      if (*(void **)((char *)v21
                    + (((unint64_t)((v22 * (unsigned __int128)0x70381C0E070381C1uLL) >> 64) >> 2) & 0x1FFFFFFFFFFFFFF8)))
      {
        v23 = *(_QWORD *)(a1 + 48) - 1;
        v24 = v22 + 1;
        *(_QWORD *)(a1 + 40) = v24;
        *(_QWORD *)(a1 + 48) = v23;
        if (v24 < 0x92)
          goto LABEL_12;
        operator delete(*v21);
        *(_QWORD *)(a1 + 16) += 8;
        *(_QWORD *)(a1 + 40) -= 73;
LABEL_11:
        v23 = *(_QWORD *)(a1 + 48);
LABEL_12:
        if (!v23)
          *(_DWORD *)a1 = 1;
        return;
      }
      __break(1u);
    }
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/bitrate_prober.cc", 195, "cluster.pace_info.send_bitrate.bps() > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)3,long long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v19);
    goto LABEL_17;
  }
}

uint64_t webrtc::FieldTrialParameter<webrtc::TimeDelta>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  return a1;
}

void webrtc::FieldTrialParameter<webrtc::TimeDelta>::~FieldTrialParameter(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = *(void **)(a1 + 8);
    if (!v2)
      goto LABEL_6;
  }
  *(_QWORD *)(a1 + 16) = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialParameter<webrtc::TimeDelta>::Parse(uint64_t result, _BYTE *__src)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  char v5;

  if (!__src[24])
    return 0;
  v2 = result;
  if (((char)__src[23] & 0x80000000) == 0)
  {
    v3 = __src[23];
    goto LABEL_7;
  }
  v3 = *((_QWORD *)__src + 1);
  if ((v3 & 0x8000000000000000) == 0)
  {
    __src = *(_BYTE **)__src;
    if (!v3 || __src)
    {
LABEL_7:
      webrtc::ParseTypedParameter<webrtc::TimeDelta>((void **)__src, v3);
      if (v5)
      {
        *(_QWORD *)(v2 + 64) = v4;
        return 1;
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

unint64_t webrtc::BitrateTracker::Rate(webrtc::BitrateTracker *this, Timestamp a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;

  v2 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v2;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v3 = 0;
  else
    v3 = -1;
  if (a2.var0 < 0)
    v4 = v3 - -a2.var0 / 0x3E8uLL;
  else
    v4 = v2;
  result = webrtc::RateStatistics::Rate(this, v4);
  if (!v6)
    return 0;
  return result;
}

unint64_t webrtc::BitstreamReader::ReadBits(uint8x16_t *this, uint64_t a2)
{
  int v2;
  uint8x16_t *v3;
  __int32 v4;
  BOOL v5;
  int v6;
  int v7;
  unint64_t v8;
  uint8x16_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int8 *v13;
  char *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int64x2_t v29;
  int8x16_t v30;
  int64x2_t v31;
  unint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint64x2_t v44;
  int8x16_t v45;
  uint32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;

  v3 = (uint8x16_t *)&this->u64[1];
  v2 = this->i32[2];
  this->i8[12] = 0;
  if ((a2 & 0x80000000) != 0 || (v4 = v2 - a2, v2 < (int)a2))
  {
    v3->i32[0] = -1;
    return 0;
  }
  v5 = -v2 < 0;
  v6 = -v2 & 7;
  v7 = v2 & 7;
  if (!v5)
    v7 = -v6;
  v3->i32[0] = v4;
  if (v7 > (int)a2)
    return (*(unsigned __int8 *)this->i64[0] >> (v7 - a2)) & ~(-1 << a2);
  if (v7 < 1)
  {
    v8 = 0;
    if ((int)a2 < 8)
      goto LABEL_22;
  }
  else
  {
    LODWORD(a2) = a2 - v7;
    v8 = (unint64_t)(*(unsigned __int8 *)this->i64[0]++ & ~(-1 << v7)) << a2;
    if ((int)a2 < 8)
      goto LABEL_22;
  }
  v10 = (uint8x16_t *)this->i64[0];
  a2 = a2;
  v11 = a2 - 15;
  if (a2 < 0xFuLL)
    v11 = 0;
  if (v11 < 0x71)
    goto LABEL_19;
  v12 = a2 - 15;
  if (a2 < 0xFuLL)
    v12 = 0;
  if (&v10->i8[((unint64_t)(v12 + 7) >> 3) + 1] > (__int8 *)this && v10 < v3)
  {
LABEL_19:
    v13 = (__int8 *)this->i64[0];
LABEL_20:
    v14 = v13 + 1;
    v15 = a2;
    do
    {
      LODWORD(a2) = v15 - 8;
      v8 |= (unint64_t)*(v14 - 1) << (v15 - 8);
      this->i64[0] = (uint64_t)v14++;
      v16 = v15 > 0xF;
      v15 -= 8;
    }
    while (v16);
    goto LABEL_22;
  }
  v17 = ((v11 + 7) >> 3) + 1;
  v18 = vdupq_n_s64(a2);
  v19 = vaddq_s64(v18, (int64x2_t)xmmword_208F05970);
  v20 = vaddq_s64(v18, (int64x2_t)xmmword_208F05980);
  v21 = vaddq_s64(v18, (int64x2_t)xmmword_208F05990);
  v22 = vaddq_s64(v18, (int64x2_t)xmmword_208F059A0);
  v23 = vaddq_s64(v18, (int64x2_t)xmmword_208F059B0);
  v24 = vaddq_s64(v18, (int64x2_t)xmmword_208F059C0);
  v25 = vaddq_s64(v18, (int64x2_t)xmmword_208F059D0);
  v26 = vaddq_s64(v18, (int64x2_t)xmmword_208F059E0);
  v27 = (int8x16_t)v8;
  v28 = 0uLL;
  v29 = vdupq_n_s64(0xFFFFFFF8uLL);
  v30.i64[0] = 0xFFFFFFFFLL;
  v30.i64[1] = 0xFFFFFFFFLL;
  v31 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
  a2 = a2 - 8 * (v17 & 0x7FFFFFF0);
  v13 = &v10->i8[v17 & 0x7FFFFFF0];
  v32 = v17 & 0x7FFFFFF0;
  v33 = 0uLL;
  v34 = 0uLL;
  v35 = 0uLL;
  v36 = 0uLL;
  v37 = 0uLL;
  v38 = 0uLL;
  do
  {
    v39 = *v10++;
    v40 = vmovl_u8(*(uint8x8_t *)v39.i8);
    v41 = vmovl_high_u8(v39);
    v42 = vmovl_u16(*(uint16x4_t *)v41.i8);
    v43 = vmovl_high_u16(v41);
    v44.i64[0] = v43.u32[2];
    v44.i64[1] = v43.u32[3];
    v45 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v19, v29), v30));
    v46 = vmovl_u16(*(uint16x4_t *)v40.i8);
    v44.i64[0] = v43.u32[0];
    v44.i64[1] = v43.u32[1];
    v47 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v20, v29), v30));
    v44.i64[0] = v46.u32[0];
    v44.i64[1] = v46.u32[1];
    v48 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v29), v30));
    v44.i64[0] = v42.u32[2];
    v44.i64[1] = v42.u32[3];
    v49 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v21, v29), v30));
    v50 = vmovl_high_u16(v40);
    v44.i64[0] = v46.u32[2];
    v44.i64[1] = v46.u32[3];
    v51 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v29), v30));
    v44.i64[0] = v50.u32[0];
    v44.i64[1] = v50.u32[1];
    v52 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v24, v29), v30));
    v44.i64[0] = v42.u32[0];
    v44.i64[1] = v42.u32[1];
    v53 = (int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v22, v29), v30));
    v44.i64[0] = v50.u32[2];
    v44.i64[1] = v50.u32[3];
    v34 = vorrq_s8((int8x16_t)vshlq_u64(v44, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v23, v29), v30)), v34);
    v35 = vorrq_s8(v53, v35);
    v33 = vorrq_s8(v52, v33);
    v28 = vorrq_s8(v51, v28);
    v36 = vorrq_s8(v49, v36);
    v27 = vorrq_s8(v48, v27);
    v37 = vorrq_s8(v47, v37);
    v38 = vorrq_s8(v45, v38);
    v25 = vaddq_s64(v25, v31);
    v26 = vaddq_s64(v26, v31);
    v24 = vaddq_s64(v24, v31);
    v23 = vaddq_s64(v23, v31);
    v22 = vaddq_s64(v22, v31);
    v21 = vaddq_s64(v21, v31);
    v20 = vaddq_s64(v20, v31);
    v19 = vaddq_s64(v19, v31);
    v32 -= 16;
  }
  while (v32);
  this->i64[0] = (uint64_t)v10;
  v54 = vorrq_s8(vorrq_s8(vorrq_s8(v27, v35), vorrq_s8(v33, v37)), vorrq_s8(vorrq_s8(v28, v36), vorrq_s8(v34, v38)));
  v8 = (unint64_t)vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL));
  if (v17 != (v17 & 0x7FFFFFF0))
    goto LABEL_20;
LABEL_22:
  if ((int)a2 >= 1)
    return v8 | (*(unsigned __int8 *)this->i64[0] >> (8 - a2));
  return v8;
}

unint64_t webrtc::BitstreamReader::ReadNonSymmetric(uint8x16_t *this, unsigned int a2)
{
  signed int v2;
  unsigned int v3;
  uint8x16_t *v4;
  __int32 v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint8x16_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  int8x16_t v31;
  int64x2_t v32;
  __int8 *v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint8x16_t v41;
  uint16x8_t v42;
  uint16x8_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint64x2_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  uint32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  char *v57;
  unint64_t v58;
  BOOL v59;
  char v60;
  _BYTE *v61;
  int v62;

  v2 = 32 - __clz(a2);
  if (!a2)
    v2 = 0;
  v3 = (1 << v2) - a2;
  v4 = (uint8x16_t *)&this->u64[1];
  v5 = this->i32[2];
  this->i8[12] = 0;
  if (!v2 || (LODWORD(v6) = v2 - 1, v7 = v5 - (v2 - 1), v5 < v2 - 1))
  {
    v4->i32[0] = -1;
    if (1 << v2 != a2)
      return 0;
    v4->i32[0] = -2;
    return a2 - (1 << v2);
  }
  v8 = -v5 < 0;
  v9 = -v5 & 7;
  v10 = v5 & 7;
  if (v8)
    v11 = v10;
  else
    v11 = -v9;
  v4->i32[0] = v7;
  if (v11 < v2)
  {
    if (v11 < 1)
    {
      v12 = 0;
      if ((int)v6 < 8)
        goto LABEL_34;
    }
    else
    {
      LODWORD(v6) = v6 - v11;
      v12 = (unint64_t)(*(unsigned __int8 *)this->i64[0]++ & ~(-1 << v11)) << v6;
      if ((int)v6 < 8)
        goto LABEL_34;
    }
    v14 = (uint8x16_t *)this->i64[0];
    v6 = v6;
    v15 = v6 - 15;
    if (v6 < 0xFuLL)
      v15 = 0;
    if (v15 < 0x71)
      goto LABEL_31;
    v16 = v6 - 15;
    if (v6 < 0xFuLL)
      v16 = 0;
    if (&v14->i8[((unint64_t)(v16 + 7) >> 3) + 1] <= (__int8 *)this || v14 >= v4)
    {
      v18 = ((v15 + 7) >> 3) + 1;
      v19 = vdupq_n_s64(v6);
      v20 = vaddq_s64(v19, (int64x2_t)xmmword_208F05970);
      v21 = vaddq_s64(v19, (int64x2_t)xmmword_208F05980);
      v22 = vaddq_s64(v19, (int64x2_t)xmmword_208F05990);
      v23 = vaddq_s64(v19, (int64x2_t)xmmword_208F059A0);
      v24 = vaddq_s64(v19, (int64x2_t)xmmword_208F059B0);
      v25 = vaddq_s64(v19, (int64x2_t)xmmword_208F059C0);
      v26 = vaddq_s64(v19, (int64x2_t)xmmword_208F059D0);
      v27 = vaddq_s64(v19, (int64x2_t)xmmword_208F059E0);
      v28 = (int8x16_t)v12;
      v29 = 0uLL;
      v30 = vdupq_n_s64(0xFFFFFFF8uLL);
      v31.i64[0] = 0xFFFFFFFFLL;
      v31.i64[1] = 0xFFFFFFFFLL;
      v32 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
      v6 = v6 - 8 * (v18 & 0x7FFFFFF0);
      v33 = &v14->i8[v18 & 0x7FFFFFF0];
      v34 = v18 & 0x7FFFFFF0;
      v35 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      do
      {
        v41 = *v14++;
        v42 = vmovl_u8(*(uint8x8_t *)v41.i8);
        v43 = vmovl_high_u8(v41);
        v44 = vmovl_u16(*(uint16x4_t *)v43.i8);
        v45 = vmovl_high_u16(v43);
        v46.i64[0] = v45.u32[2];
        v46.i64[1] = v45.u32[3];
        v47 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v20, v30), v31));
        v48 = vmovl_u16(*(uint16x4_t *)v42.i8);
        v46.i64[0] = v45.u32[0];
        v46.i64[1] = v45.u32[1];
        v49 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v21, v30), v31));
        v46.i64[0] = v48.u32[0];
        v46.i64[1] = v48.u32[1];
        v50 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v27, v30), v31));
        v46.i64[0] = v44.u32[2];
        v46.i64[1] = v44.u32[3];
        v51 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v22, v30), v31));
        v52 = vmovl_high_u16(v42);
        v46.i64[0] = v48.u32[2];
        v46.i64[1] = v48.u32[3];
        v53 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v30), v31));
        v46.i64[0] = v52.u32[0];
        v46.i64[1] = v52.u32[1];
        v54 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v30), v31));
        v46.i64[0] = v44.u32[0];
        v46.i64[1] = v44.u32[1];
        v55 = (int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v23, v30), v31));
        v46.i64[0] = v52.u32[2];
        v46.i64[1] = v52.u32[3];
        v36 = vorrq_s8((int8x16_t)vshlq_u64(v46, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v24, v30), v31)), v36);
        v37 = vorrq_s8(v55, v37);
        v35 = vorrq_s8(v54, v35);
        v29 = vorrq_s8(v53, v29);
        v38 = vorrq_s8(v51, v38);
        v28 = vorrq_s8(v50, v28);
        v39 = vorrq_s8(v49, v39);
        v40 = vorrq_s8(v47, v40);
        v26 = vaddq_s64(v26, v32);
        v27 = vaddq_s64(v27, v32);
        v25 = vaddq_s64(v25, v32);
        v24 = vaddq_s64(v24, v32);
        v23 = vaddq_s64(v23, v32);
        v22 = vaddq_s64(v22, v32);
        v21 = vaddq_s64(v21, v32);
        v20 = vaddq_s64(v20, v32);
        v34 -= 16;
      }
      while (v34);
      this->i64[0] = (uint64_t)v14;
      v56 = vorrq_s8(vorrq_s8(vorrq_s8(v28, v37), vorrq_s8(v35, v39)), vorrq_s8(vorrq_s8(v29, v38), vorrq_s8(v36, v40)));
      v12 = (unint64_t)vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
      if (v18 == (v18 & 0x7FFFFFF0))
      {
LABEL_34:
        if ((int)v6 >= 1)
          v12 |= *(unsigned __int8 *)this->i64[0] >> (8 - v6);
        goto LABEL_36;
      }
    }
    else
    {
LABEL_31:
      v33 = (__int8 *)this->i64[0];
    }
    v57 = v33 + 1;
    v58 = v6;
    do
    {
      LODWORD(v6) = v58 - 8;
      v12 |= (unint64_t)*(v57 - 1) << (v58 - 8);
      this->i64[0] = (uint64_t)v57++;
      v59 = v58 > 0xF;
      v58 -= 8;
    }
    while (v59);
    goto LABEL_34;
  }
  v12 = (*(unsigned __int8 *)this->i64[0] >> (v11 - v6)) & ~(-1 << v6);
LABEL_36:
  if (v12 < v3)
    return v12;
  this->i8[12] = 0;
  v60 = v7 - 1;
  this->i32[2] = v7 - 1;
  if (v7 < 1)
    return 2 * (_DWORD)v12 - v3;
  v61 = (_BYTE *)this->i64[0];
  v62 = v60 & 7;
  if (v62)
  {
    LODWORD(v61) = *v61 >> v62;
  }
  else
  {
    this->i64[0] = (uint64_t)(v61 + 1);
    LOBYTE(v61) = *v61;
  }
  return (v61 & 1) - v3 + 2 * (_DWORD)v12;
}

uint64_t webrtc::BitstreamReader::ReadExponentialGolomb(uint8x16_t *this)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  int v4;
  char v5;
  int v6;
  __int8 v7;
  uint8x16_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  unint64_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int64x2_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint8x16_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint64x2_t v49;
  int8x16_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;

  v1 = 0;
  v3 = &this->u8[8];
  v2 = this->i32[2];
  v4 = v2 - 1;
  v5 = v2 + 7;
  v6 = v2 - 1;
  while (1)
  {
    this->i8[12] = 0;
    this->i32[2] = v4 + v1;
    if ((v2 & (v2 >> 31)) - v2 == v1)
    {
LABEL_9:
      result = 0;
      *(_DWORD *)v3 = -1;
      return result;
    }
    v8 = (uint8x16_t *)this->i64[0];
    v9 = ((_BYTE)v4 + (_BYTE)v1) & 7;
    if ((((_BYTE)v4 + (_BYTE)v1) & 7) == 0)
    {
      this->i64[0] = (uint64_t)v8->i64 + 1;
      v7 = v8->i8[0];
      v8 = (uint8x16_t *)((char *)v8 + 1);
      if ((v7 & 1) != 0)
        break;
      goto LABEL_3;
    }
    if (((v8->u8[0] >> v9) & 1) != 0)
      break;
LABEL_3:
    v6 -= 2;
    --v1;
    v5 += 7;
    if (v1 == -32)
      goto LABEL_9;
  }
  this->i8[12] = 0;
  v10 = v2 + v1 - 1;
  v11 = -v1;
  if (v10 >= -v1)
  {
    *(_DWORD *)v3 = v6;
    if (v9 > v11)
    {
      LODWORD(v12) = (v8->u8[0] >> ((v5 & 7) + v1)) & ~(-1 << v11);
      return (v12 + ~(-1 << v11));
    }
    if (v9)
    {
      LODWORD(v14) = -v1 - (v5 & 7);
      v15 = v8->u8[0];
      v8 = (uint8x16_t *)((char *)v8 + 1);
      v12 = (unint64_t)(v15 & ~(-1 << v9)) << v14;
      this->i64[0] = (uint64_t)v8;
      if ((int)v14 < 8)
      {
LABEL_27:
        if ((int)v14 >= 1)
          LODWORD(v12) = v12 | (v8->u8[0] >> (8 - v14));
        return (v12 + ~(-1 << v11));
      }
    }
    else
    {
      v12 = 0;
      LODWORD(v14) = -v1;
      if (v11 < 8)
        goto LABEL_27;
    }
    v14 = v14;
    v16 = v14 - 15;
    if (v14 < 0xFuLL)
      v16 = 0;
    if (v16 < 0x71)
      goto LABEL_23;
    v17 = v14 - 15;
    if (v14 < 0xFuLL)
      v17 = 0;
    if (&v8->i8[((unint64_t)(v17 + 7) >> 3) + 1] <= (__int8 *)this || v8 >= (uint8x16_t *)v3)
    {
      v22 = ((v16 + 7) >> 3) + 1;
      v23 = vdupq_n_s64(v14);
      v24 = vaddq_s64(v23, (int64x2_t)xmmword_208F05970);
      v25 = vaddq_s64(v23, (int64x2_t)xmmword_208F05980);
      v26 = vaddq_s64(v23, (int64x2_t)xmmword_208F05990);
      v27 = vaddq_s64(v23, (int64x2_t)xmmword_208F059A0);
      v28 = vaddq_s64(v23, (int64x2_t)xmmword_208F059B0);
      v29 = vaddq_s64(v23, (int64x2_t)xmmword_208F059C0);
      v30 = vaddq_s64(v23, (int64x2_t)xmmword_208F059D0);
      v31 = vaddq_s64(v23, (int64x2_t)xmmword_208F059E0);
      v32 = (int8x16_t)v12;
      v33 = 0uLL;
      v34 = vdupq_n_s64(0xFFFFFFF8uLL);
      v35.i64[0] = 0xFFFFFFFFLL;
      v35.i64[1] = 0xFFFFFFFFLL;
      v36 = vdupq_n_s64(0xFFFFFFFFFFFFFF80);
      v14 = v14 - 8 * (v22 & 0x7FFFFFF0);
      v18 = &v8->u8[v22 & 0x7FFFFFF0];
      v37 = v22 & 0x7FFFFFF0;
      v38 = 0uLL;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      do
      {
        v44 = *v8++;
        v45 = vmovl_u8(*(uint8x8_t *)v44.i8);
        v46 = vmovl_high_u8(v44);
        v47 = vmovl_u16(*(uint16x4_t *)v46.i8);
        v48 = vmovl_high_u16(v46);
        v49.i64[0] = v48.u32[2];
        v49.i64[1] = v48.u32[3];
        v50 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v24, v34), v35));
        v51 = vmovl_u16(*(uint16x4_t *)v45.i8);
        v49.i64[0] = v48.u32[0];
        v49.i64[1] = v48.u32[1];
        v52 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v25, v34), v35));
        v49.i64[0] = v51.u32[0];
        v49.i64[1] = v51.u32[1];
        v53 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v31, v34), v35));
        v49.i64[0] = v47.u32[2];
        v49.i64[1] = v47.u32[3];
        v54 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v26, v34), v35));
        v55 = vmovl_high_u16(v45);
        v49.i64[0] = v51.u32[2];
        v49.i64[1] = v51.u32[3];
        v56 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v30, v34), v35));
        v49.i64[0] = v55.u32[0];
        v49.i64[1] = v55.u32[1];
        v57 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v29, v34), v35));
        v49.i64[0] = v47.u32[0];
        v49.i64[1] = v47.u32[1];
        v58 = (int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v27, v34), v35));
        v49.i64[0] = v55.u32[2];
        v49.i64[1] = v55.u32[3];
        v39 = vorrq_s8((int8x16_t)vshlq_u64(v49, (uint64x2_t)vandq_s8((int8x16_t)vaddq_s64(v28, v34), v35)), v39);
        v40 = vorrq_s8(v58, v40);
        v38 = vorrq_s8(v57, v38);
        v33 = vorrq_s8(v56, v33);
        v41 = vorrq_s8(v54, v41);
        v32 = vorrq_s8(v53, v32);
        v42 = vorrq_s8(v52, v42);
        v43 = vorrq_s8(v50, v43);
        v30 = vaddq_s64(v30, v36);
        v31 = vaddq_s64(v31, v36);
        v29 = vaddq_s64(v29, v36);
        v28 = vaddq_s64(v28, v36);
        v27 = vaddq_s64(v27, v36);
        v26 = vaddq_s64(v26, v36);
        v25 = vaddq_s64(v25, v36);
        v24 = vaddq_s64(v24, v36);
        v37 -= 16;
      }
      while (v37);
      this->i64[0] = (uint64_t)v8;
      v59 = vorrq_s8(vorrq_s8(vorrq_s8(v32, v40), vorrq_s8(v38, v42)), vorrq_s8(vorrq_s8(v33, v41), vorrq_s8(v39, v43)));
      v12 = (unint64_t)vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
      if (v22 == (v22 & 0x7FFFFFF0))
        goto LABEL_26;
    }
    else
    {
LABEL_23:
      v18 = (unsigned __int8 *)v8;
    }
    v19 = v14;
    do
    {
      v20 = *v18++;
      LODWORD(v14) = v19 - 8;
      v12 |= (unint64_t)v20 << (v19 - 8);
      this->i64[0] = (uint64_t)v18;
      v21 = v19 > 0xF;
      v19 -= 8;
    }
    while (v21);
LABEL_26:
    v8 = (uint8x16_t *)v18;
    goto LABEL_27;
  }
  LODWORD(v12) = 0;
  *(_DWORD *)v3 = -1;
  return (v12 + ~(-1 << v11));
}

webrtc::BlockBuffer *webrtc::BlockBuffer::BlockBuffer(webrtc::BlockBuffer *this, unint64_t a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  int v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t *v18;
  int64_t v19;
  char *v20;
  char *v21;

  *(_DWORD *)this = a2;
  v8 = (_QWORD *)((char *)this + 8);
  v9 = a4 * a3;
  if (a4 * a3)
  {
    v10 = (uint64_t)v9 << 6;
    if (v10 >> 62)
      goto LABEL_16;
    v11 = (uint64_t)v9 << 8;
    v12 = (char *)operator new(v11);
    bzero(v12, v11);
    v13 = &v12[4 * v10];
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    if (!a2)
      goto LABEL_13;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    *v8 = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    if (!a2)
      goto LABEL_13;
  }
  if (a2 >> 59)
LABEL_16:
    abort();
  v14 = a3 | ((unint64_t)a4 << 32);
  v15 = 4 * a2;
  v16 = (unint64_t *)operator new(v15 * 8);
  v17 = v16;
  *((_QWORD *)this + 1) = v16;
  *((_QWORD *)this + 2) = v16;
  v18 = &v16[v15];
  *((_QWORD *)this + 3) = &v16[v15];
  v19 = v13 - v12;
  if (v13 == v12)
  {
    do
    {
      *v17 = v14;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = 0;
      v17 += 4;
    }
    while (v17 != v18);
  }
  else
  {
    if (v19 < 0)
    {
      *v16 = v14;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = 0;
      abort();
    }
    do
    {
      *v17 = v14;
      v17[1] = 0;
      v17[2] = 0;
      v17[3] = 0;
      v20 = (char *)operator new(v19);
      v17[1] = (unint64_t)v20;
      v21 = &v20[4 * (v19 >> 2)];
      v17[3] = (unint64_t)v21;
      memcpy(v20, v12, v19);
      v17[2] = (unint64_t)v21;
      v17 += 4;
    }
    while (v17 != v18);
  }
  *((_QWORD *)this + 2) = v18;
LABEL_13:
  if (v12)
    operator delete(v12);
  *((_QWORD *)this + 4) = 0;
  return this;
}

webrtc::BlockDelayBuffer *webrtc::BlockDelayBuffer::BlockDelayBuffer(webrtc::BlockDelayBuffer *this, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  webrtc::BlockDelayBuffer *v7;
  size_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  char *v36;
  webrtc::BlockDelayBuffer *v37;
  unint64_t v38;
  _QWORD *v39;

  v7 = this;
  *(_QWORD *)this = a4;
  *((_QWORD *)this + 1) = a5;
  if (a5)
  {
    if (a5 >> 62)
      goto LABEL_37;
    v8 = 4 * a5;
    v9 = (char *)operator new(4 * a5);
    bzero(v9, v8);
    v10 = &v9[v8];
    v37 = v7;
    if (a3)
      goto LABEL_4;
LABEL_12:
    v13 = 0;
    v12 = 0;
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    if (!a2)
      goto LABEL_27;
    goto LABEL_15;
  }
  v9 = 0;
  v10 = 0;
  v37 = this;
  if (!a3)
    goto LABEL_12;
LABEL_4:
  if (a3 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_37;
  v11 = (char *)operator new(24 * a3);
  v12 = v11;
  v13 = &v11[24 * a3];
  v14 = v10 - v9;
  if (v10 == v9)
  {
    bzero(v11, 24 * ((24 * a3 - 24) / 0x18) + 24);
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = 0;
    *((_QWORD *)v7 + 4) = 0;
    if (!a2)
      goto LABEL_27;
  }
  else
  {
    if (v14 < 0)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      abort();
    }
    v15 = 0;
    v16 = 24 * a3;
    do
    {
      v17 = &v12[v15];
      *((_QWORD *)v17 + 1) = 0;
      *((_QWORD *)v17 + 2) = 0;
      v18 = (char *)operator new(v14);
      *(_QWORD *)v17 = v18;
      v19 = &v18[4 * (v14 >> 2)];
      *((_QWORD *)v17 + 2) = v19;
      memcpy(v18, v9, v14);
      *((_QWORD *)v17 + 1) = v19;
      v15 += 24;
    }
    while (v16 != v15);
    v7 = v37;
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = 0;
    *((_QWORD *)v37 + 4) = 0;
    if (!a2)
      goto LABEL_27;
  }
LABEL_15:
  if (a2 > 0xAAAAAAAAAAAAAAALL)
LABEL_37:
    abort();
  v20 = 3 * a2;
  v21 = operator new(24 * a2);
  *((_QWORD *)v7 + 2) = v21;
  *((_QWORD *)v7 + 3) = v21;
  v39 = &v21[v20];
  *((_QWORD *)v7 + 4) = &v21[v20];
  v22 = v13 - v12;
  v36 = v9;
  if (v13 == v12)
  {
    bzero(v21, 24 * ((v20 * 8 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v38 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    if (v38 > 0xAAAAAAAAAAAAAAALL)
    {
      *v21 = 0;
      v21[1] = 0;
      v21[2] = 0;
      abort();
    }
    do
    {
      v21[1] = 0;
      v21[2] = 0;
      v23 = (char *)operator new(v22);
      v24 = 0;
      *v21 = v23;
      v21[1] = v23;
      v21[2] = &v23[24 * v38];
      do
      {
        v25 = &v12[v24];
        v26 = &v23[v24];
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
        *((_QWORD *)v26 + 2) = 0;
        v28 = *(_BYTE **)&v12[v24];
        v27 = *(_BYTE **)&v12[v24 + 8];
        v29 = v27 - v28;
        if (v27 != v28)
        {
          if (v29 < 0)
            goto LABEL_37;
          v30 = (char *)operator new(v27 - v28);
          *(_QWORD *)v26 = v30;
          *((_QWORD *)v26 + 1) = v30;
          v31 = &v30[4 * (v29 >> 2)];
          *((_QWORD *)v26 + 2) = v31;
          memcpy(v30, v28, v29);
          *((_QWORD *)v26 + 1) = v31;
        }
        v24 += 24;
      }
      while (v25 + 24 != v13);
      v21[1] = &v23[v24];
      v21 += 3;
      v22 = v13 - v12;
    }
    while (v21 != v39);
  }
  v9 = v36;
  v7 = v37;
  *((_QWORD *)v37 + 3) = v39;
LABEL_27:
  if (v12)
  {
    if (v13 != v12)
    {
      v32 = v13;
      do
      {
        v34 = (void *)*((_QWORD *)v32 - 3);
        v32 -= 24;
        v33 = v34;
        if (v34)
        {
          *((_QWORD *)v13 - 2) = v33;
          operator delete(v33);
        }
        v13 = v32;
      }
      while (v32 != v12);
    }
    operator delete(v12);
  }
  if (v9)
    operator delete(v9);
  *((_QWORD *)v7 + 5) = 0;
  return v7;
}

uint64_t *webrtc::BlockDelayBuffer::DelaySignal(uint64_t *this, webrtc::AudioBuffer *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;

  v2 = this[1];
  if (v2)
  {
    v3 = (_QWORD *)this[2];
    v4 = this[3] - (_QWORD)v3;
    if (!v4)
    {
LABEL_40:
      __break(1u);
      return this;
    }
    v5 = v3[1];
    v6 = v5 - *v3;
    if (v5 != *v3)
    {
      v7 = v4 / 24;
      v8 = v2 - 1;
      v9 = v6 / 24;
      v10 = this[5];
      v11 = *((_QWORD *)a2 + 11);
      if (v11)
      {
        v12 = 0;
        v13 = *(_QWORD *)(v11 + 56);
        v14 = *(_QWORD *)(v11 + 16);
        if (v9 <= 1)
          v9 = 1;
        if (v7 <= 1)
          v15 = 1;
        else
          v15 = v7;
LABEL_11:
        v16 = 0;
        v17 = &v3[3 * v12];
        v18 = *v17;
        v19 = 0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 3);
        while (v16 != v19)
        {
          v20 = *this;
          v21 = v10;
          if (*this)
          {
            v22 = *(_QWORD *)(v18 + 24 * v16);
            v23 = *(_DWORD **)(v14 + 8 * v12 * v13 + 8 * v16);
            v21 = v10;
            do
            {
              v24 = *(_DWORD *)(v22 + 4 * v21);
              *(_DWORD *)(v22 + 4 * v21) = *v23;
              *v23++ = v24;
              if (v21 < v8)
                ++v21;
              else
                v21 = 0;
              --v20;
            }
            while (v20);
          }
          if (++v16 == v9)
          {
            if (++v12 == v15)
              goto LABEL_22;
            goto LABEL_11;
          }
        }
      }
      else
      {
        v25 = 0;
        v26 = *((_QWORD *)a2 + 10);
        v27 = *(_QWORD *)(v26 + 56);
        v28 = *(_QWORD *)(v26 + 16);
        if (v9 <= 1)
          v9 = 1;
        if (v7 <= 1)
          v29 = 1;
        else
          v29 = v7;
LABEL_30:
        v30 = 0;
        v31 = &v3[3 * v25];
        v32 = *v31;
        v33 = 0xAAAAAAAAAAAAAAABLL * ((v31[1] - *v31) >> 3);
        while (v30 != v33)
        {
          v34 = *this;
          v21 = v10;
          if (*this)
          {
            v35 = *(_QWORD *)(v32 + 24 * v30);
            v36 = *(_DWORD **)(v28 + 8 * v25 * v27 + 8 * v30);
            v21 = v10;
            do
            {
              v37 = *(_DWORD *)(v35 + 4 * v21);
              *(_DWORD *)(v35 + 4 * v21) = *v36;
              *v36++ = v37;
              if (v21 < v8)
                ++v21;
              else
                v21 = 0;
              --v34;
            }
            while (v34);
          }
          if (++v30 == v9)
          {
            if (++v25 == v29)
              goto LABEL_22;
            goto LABEL_30;
          }
        }
      }
      goto LABEL_40;
    }
    v21 = 0;
LABEL_22:
    this[5] = v21;
  }
  return this;
}

webrtc::BlockFramer *webrtc::BlockFramer::BlockFramer(webrtc::BlockFramer *this, unint64_t a2, unint64_t a3)
{
  webrtc::BlockFramer *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void *v24;
  void *v25;
  webrtc::BlockFramer *v27;
  unint64_t v28;
  _QWORD *v29;

  v4 = this;
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  if (a3)
  {
    if (a3 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_28;
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    v8 = &v6[v5];
    do
    {
      v9 = &v6[v7];
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
      v10 = operator new(0x100uLL);
      *((_QWORD *)v9 + 1) = v10 + 16;
      *((_QWORD *)v9 + 2) = v10 + 16;
      *v10 = 0u;
      v10[1] = 0u;
      v10[2] = 0u;
      v10[3] = 0u;
      v10[4] = 0u;
      v10[5] = 0u;
      v10[6] = 0u;
      v10[7] = 0u;
      v10[8] = 0u;
      v10[9] = 0u;
      v10[10] = 0u;
      v10[11] = 0u;
      v10[12] = 0u;
      v10[13] = 0u;
      v10[14] = 0u;
      v10[15] = 0u;
      v7 += 24;
      *(_QWORD *)v9 = v10;
    }
    while (v5 != v7);
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = 0;
    if (!a2)
    {
LABEL_6:
      if (!v6)
        return v4;
      goto LABEL_21;
    }
  }
  else
  {
    v8 = 0;
    v6 = 0;
    *((_QWORD *)this + 2) = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    if (!a2)
      goto LABEL_6;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
LABEL_28:
    abort();
  v11 = 3 * a2;
  v12 = operator new(24 * a2);
  *((_QWORD *)v4 + 2) = v12;
  *((_QWORD *)v4 + 3) = v12;
  v29 = &v12[v11];
  *((_QWORD *)v4 + 4) = &v12[v11];
  v13 = v8 - v6;
  v27 = v4;
  if (v8 == v6)
  {
    bzero(v12, 24 * ((v11 * 8 - 24) / 0x18uLL) + 24);
  }
  else
  {
    v28 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    if (v28 > 0xAAAAAAAAAAAAAAALL)
    {
      *v12 = 0;
      v12[1] = 0;
      v12[2] = 0;
      abort();
    }
    do
    {
      v12[1] = 0;
      v12[2] = 0;
      v14 = (char *)operator new(v13);
      v15 = 0;
      *v12 = v14;
      v12[1] = v14;
      v12[2] = &v14[24 * v28];
      do
      {
        v16 = &v6[v15];
        v17 = &v14[v15];
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 2) = 0;
        v19 = *(_BYTE **)&v6[v15];
        v18 = *(_BYTE **)&v6[v15 + 8];
        v20 = v18 - v19;
        if (v18 != v19)
        {
          if (v20 < 0)
            goto LABEL_28;
          v21 = (char *)operator new(v18 - v19);
          *(_QWORD *)v17 = v21;
          *((_QWORD *)v17 + 1) = v21;
          v22 = &v21[4 * (v20 >> 2)];
          *((_QWORD *)v17 + 2) = v22;
          memcpy(v21, v19, v20);
          *((_QWORD *)v17 + 1) = v22;
        }
        v15 += 24;
      }
      while (v16 + 24 != v8);
      v12[1] = &v14[v15];
      v12 += 3;
      v13 = v8 - v6;
    }
    while (v12 != v29);
  }
  v4 = v27;
  *((_QWORD *)v27 + 3) = v29;
  if (v6)
  {
LABEL_21:
    if (v8 != v6)
    {
      v23 = v8;
      do
      {
        v25 = (void *)*((_QWORD *)v23 - 3);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *((_QWORD *)v8 - 2) = v24;
          operator delete(v24);
        }
        v8 = v23;
      }
      while (v23 != v6);
    }
    operator delete(v6);
  }
  return v4;
}

unint64_t *webrtc::BlockFramer::InsertBlock(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  int *v14;
  int **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  char *v26;
  int *v27;
  int *v28;
  int *v29;
  int v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;

  v2 = *result;
  if (*result && result[1])
  {
    v3 = a2;
    v4 = 0;
    v5 = 1;
    v34 = result;
    while (!v5)
    {
LABEL_5:
      if (++v4 >= v2)
        return result;
    }
    v6 = 0;
    v32 = v4;
    while (1)
    {
      v7 = result[2];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[3] - v7) >> 3) <= v4)
        goto LABEL_35;
      v9 = (uint64_t *)(v7 + 24 * v4);
      v8 = *v9;
      if (0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 3) <= v6)
        goto LABEL_35;
      v10 = v8 + 24 * v6;
      v11 = *(int **)v10;
      v12 = *(_QWORD *)(v10 + 16);
      v13 = (char *)(*(_QWORD *)(v3 + 8) + 4 * (((int)v6 + *(_DWORD *)(v3 + 4) * (int)v4) << 6));
      v15 = (int **)(v10 + 8);
      v14 = *(int **)(v10 + 8);
      if (v12 - (uint64_t)v14 >= 256)
      {
        v25 = (char *)v14 - (char *)v11;
        if ((char *)v14 - (char *)v11 > 255)
        {
          v26 = v13 + 256;
          v27 = v14;
LABEL_27:
          v28 = v27 - 64;
          v29 = v27;
          if (v27 - 64 < v14)
          {
            while (v29)
            {
              v30 = *v28++;
              *v29++ = v30;
              if (v28 >= v14)
                goto LABEL_30;
            }
LABEL_35:
            __break(1u);
LABEL_36:
            abort();
          }
LABEL_30:
          *v15 = v29;
          if (v27 != v11 + 64)
            memmove(&v27[-(v27 - (v11 + 64))], v11, (char *)v27 - (char *)(v11 + 64));
          if (v26 != v13)
            memmove(v11, v13, v26 - v13);
          goto LABEL_8;
        }
        v26 = &v13[v25];
        memmove(v14, &v13[v25], 256 - v25);
        v27 = v11 + 64;
        v4 = v32;
        *v15 = v11 + 64;
        if (v25 >= 1)
          goto LABEL_27;
      }
      else
      {
        v16 = v14 - v11;
        v17 = v16 + 64;
        if ((unint64_t)(v16 + 64) >> 62)
          goto LABEL_36;
        v18 = v12 - (_QWORD)v11;
        if (v18 >> 1 > v17)
          v17 = v18 >> 1;
        v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL;
        v20 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v19)
          v20 = v17;
        if (!v20)
          goto LABEL_35;
        if (v20 >> 62)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v33 = v20;
        v21 = operator new(4 * v20);
        v22 = v21;
        v23 = v21 + 64;
        *v21 = *(_DWORD *)v13;
        v21[1] = *((_DWORD *)v13 + 1);
        v21[2] = *((_DWORD *)v13 + 2);
        v21[3] = *((_DWORD *)v13 + 3);
        v21[4] = *((_DWORD *)v13 + 4);
        v21[5] = *((_DWORD *)v13 + 5);
        v21[6] = *((_DWORD *)v13 + 6);
        v21[7] = *((_DWORD *)v13 + 7);
        v21[8] = *((_DWORD *)v13 + 8);
        v21[9] = *((_DWORD *)v13 + 9);
        v21[10] = *((_DWORD *)v13 + 10);
        v21[11] = *((_DWORD *)v13 + 11);
        v21[12] = *((_DWORD *)v13 + 12);
        v21[13] = *((_DWORD *)v13 + 13);
        v21[14] = *((_DWORD *)v13 + 14);
        v21[15] = *((_DWORD *)v13 + 15);
        v21[16] = *((_DWORD *)v13 + 16);
        v21[17] = *((_DWORD *)v13 + 17);
        v21[18] = *((_DWORD *)v13 + 18);
        v21[19] = *((_DWORD *)v13 + 19);
        v21[20] = *((_DWORD *)v13 + 20);
        v21[21] = *((_DWORD *)v13 + 21);
        v21[22] = *((_DWORD *)v13 + 22);
        v21[23] = *((_DWORD *)v13 + 23);
        v21[24] = *((_DWORD *)v13 + 24);
        v21[25] = *((_DWORD *)v13 + 25);
        v21[26] = *((_DWORD *)v13 + 26);
        v21[27] = *((_DWORD *)v13 + 27);
        v21[28] = *((_DWORD *)v13 + 28);
        v21[29] = *((_DWORD *)v13 + 29);
        v21[30] = *((_DWORD *)v13 + 30);
        v21[31] = *((_DWORD *)v13 + 31);
        v21[32] = *((_DWORD *)v13 + 32);
        v21[33] = *((_DWORD *)v13 + 33);
        v21[34] = *((_DWORD *)v13 + 34);
        v21[35] = *((_DWORD *)v13 + 35);
        v21[36] = *((_DWORD *)v13 + 36);
        v21[37] = *((_DWORD *)v13 + 37);
        v21[38] = *((_DWORD *)v13 + 38);
        v21[39] = *((_DWORD *)v13 + 39);
        v21[40] = *((_DWORD *)v13 + 40);
        v21[41] = *((_DWORD *)v13 + 41);
        v21[42] = *((_DWORD *)v13 + 42);
        v21[43] = *((_DWORD *)v13 + 43);
        v21[44] = *((_DWORD *)v13 + 44);
        v21[45] = *((_DWORD *)v13 + 45);
        v21[46] = *((_DWORD *)v13 + 46);
        v21[47] = *((_DWORD *)v13 + 47);
        v21[48] = *((_DWORD *)v13 + 48);
        v21[49] = *((_DWORD *)v13 + 49);
        v21[50] = *((_DWORD *)v13 + 50);
        v21[51] = *((_DWORD *)v13 + 51);
        v21[52] = *((_DWORD *)v13 + 52);
        v21[53] = *((_DWORD *)v13 + 53);
        v21[54] = *((_DWORD *)v13 + 54);
        v21[55] = *((_DWORD *)v13 + 55);
        v21[56] = *((_DWORD *)v13 + 56);
        v21[57] = *((_DWORD *)v13 + 57);
        v21[58] = *((_DWORD *)v13 + 58);
        v21[59] = *((_DWORD *)v13 + 59);
        v21[60] = *((_DWORD *)v13 + 60);
        v21[61] = *((_DWORD *)v13 + 61);
        v21[62] = *((_DWORD *)v13 + 62);
        v21[63] = *((_DWORD *)v13 + 63);
        if (v14 != v11)
        {
          v24 = v21 + 64;
          memmove(v21 + 64, v11, (char *)v14 - (char *)v11);
          v23 = v24;
        }
        *(_QWORD *)v10 = v22;
        *v15 = &v23[v16];
        *(_QWORD *)(v10 + 16) = &v22[v33];
        v3 = a2;
        v4 = v32;
        if (v11)
          operator delete(v11);
      }
LABEL_8:
      ++v6;
      result = v34;
      v5 = v34[1];
      if (v6 >= v5)
      {
        v2 = *v34;
        goto LABEL_5;
      }
    }
  }
  return result;
}

void webrtc::BlockFramer::InsertBlockAndExtractSubFrame(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char **v29;
  char *v30;
  char **v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  _OWORD *v53;
  uint64_t v54;
  __int128 v55;
  int v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;

  v3 = *a1;
  if (*a1)
  {
    v4 = a1;
    if (a1[1])
    {
      v5 = a3;
      v6 = a2;
      v7 = 0;
      v8 = 1;
      while (!v8)
      {
LABEL_5:
        if (++v7 >= v3)
          return;
      }
      v9 = 0;
      while (1)
      {
        v10 = v4[2];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v10) >> 3) <= v7)
          goto LABEL_43;
        v11 = (uint64_t *)(v10 + 24 * v7);
        v12 = *v11;
        if (0xAAAAAAAAAAAAAAABLL * ((v11[1] - *v11) >> 3) <= v9)
          goto LABEL_43;
        v13 = *v5;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3);
        if (v14 <= v7)
          goto LABEL_43;
        v15 = *(_QWORD *)(v13 + 24 * v7);
        if (v9 >= (*(_QWORD *)(v13 + 24 * v7 + 8) - v15) >> 4)
          goto LABEL_43;
        v16 = v12 + 24 * v9;
        v17 = *(_QWORD *)(v16 + 8);
        v18 = v17 - *(_QWORD *)v16;
        if (v17 != *(_QWORD *)v16)
        {
          memmove(*(void **)(v15 + 16 * v9), *(const void **)v16, v17 - *(_QWORD *)v16);
          v13 = *v5;
          v14 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 3);
        }
        if (v14 <= v7)
          goto LABEL_43;
        v19 = (uint64_t *)(v13 + 24 * v7);
        v20 = *v19;
        if (v9 >= (v19[1] - *v19) >> 4)
          goto LABEL_43;
        v21 = v4[2];
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v21) >> 3);
        if (v22 <= v7)
          goto LABEL_43;
        v23 = *(_QWORD *)(v21 + 24 * v7);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v21 + 24 * v7 + 8) - v23) >> 3) <= v9)
          goto LABEL_43;
        v24 = v18 << 30;
        v25 = 0x5000000000 - (v18 << 30);
        v26 = v25 >> 30;
        if (v18 << 30 != 0x5000000000)
        {
          memmove((void *)(*(_QWORD *)(v20 + 16 * v9) + *(_QWORD *)(v23 + 24 * v9 + 8) - *(_QWORD *)(v23 + 24 * v9)), (const void *)(*(_QWORD *)(v6 + 8) + 4 * (((int)v9 + *(_DWORD *)(v6 + 4) * (int)v7) << 6)), v25 >> 30);
          v26 = v25 >> 30;
          v21 = v4[2];
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4[3] - v21) >> 3);
        }
        if (v22 <= v7
          || (v28 = (uint64_t *)(v21 + 24 * v7), v27 = *v28, 0xAAAAAAAAAAAAAAABLL * ((v28[1] - *v28) >> 3) <= v9))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        v29 = (char **)(v27 + 24 * v9);
        v30 = *v29;
        v29[1] = *v29;
        v31 = v29 + 1;
        if (v25 > 0x3FFFFFFFFFLL)
          goto LABEL_9;
        v32 = v25 >> 32;
        v33 = *(_QWORD *)(v6 + 8);
        v34 = *(_DWORD *)(v6 + 4);
        v35 = (int *)(v33 + 4 * (((int)v9 + v34 * (int)v7) << 6) + 4 * (v25 >> 32));
        v36 = (256 - v26) >> 2;
        v37 = v27 + 24 * v9;
        v39 = *(_QWORD *)(v37 + 16);
        v38 = (_QWORD *)(v37 + 16);
        v40 = v39 - (_QWORD)v30;
        if (v36 <= (v39 - (uint64_t)v30) >> 2)
        {
          if (v24 != 0x1000000000)
            memmove(v30, v35, 256 - v26);
          *v31 = &v30[4 * v36];
          v6 = a2;
          v5 = a3;
          goto LABEL_9;
        }
        v57 = v34;
        v58 = v33;
        v60 = v38;
        v41 = v40 >> 1;
        if (v40 >> 1 <= (unint64_t)v36)
          v41 = (256 - v26) >> 2;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v41 = 0x3FFFFFFFFFFFFFFFLL;
        if (v41 >> 62)
          goto LABEL_44;
        v42 = ((_DWORD)v9 + v34 * (_DWORD)v7) << 6;
        v43 = v26;
        v59 = v41;
        v44 = (char *)operator new(4 * v41);
        v45 = &v44[4 * v36];
        v46 = 252 - v43;
        if ((unint64_t)(252 - v43) >= 0x2C)
        {
          v48 = v59;
          v47 = v44;
          v6 = a2;
          v5 = a3;
          v49 = v60;
          if ((unint64_t)&v44[-v58 + -4 * v32 + -4 * v42] >= 0x20)
          {
            v50 = (v46 >> 2) + 1;
            v51 = 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
            v47 = &v44[v51];
            v35 = (int *)((char *)v35 + v51);
            v52 = (__int128 *)(v58 + 4 * v32 + 4 * (((int)v9 + (int)v7 * v57) << 6) + 16);
            v53 = v44 + 16;
            v54 = v50 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v55 = *v52;
              *(v53 - 1) = *(v52 - 1);
              *v53 = v55;
              v52 += 2;
              v53 += 2;
              v54 -= 8;
            }
            while (v54);
            if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_40;
          }
        }
        else
        {
          v47 = v44;
          v6 = a2;
          v5 = a3;
          v48 = v59;
          v49 = v60;
        }
        do
        {
          v56 = *v35++;
          *(_DWORD *)v47 = v56;
          v47 += 4;
        }
        while (v47 != v45);
LABEL_40:
        *v29 = v44;
        *v31 = v45;
        *v49 = &v44[4 * v48];
        if (v30)
          operator delete(v30);
LABEL_9:
        ++v9;
        v4 = a1;
        v8 = a1[1];
        if (v9 >= v8)
        {
          v3 = *a1;
          goto LABEL_5;
        }
      }
    }
  }
}

uint64_t webrtc::BlockProcessor::Create(webrtc::BlockProcessor *this, const webrtc::EchoCanceller3Config *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v8 = webrtc::RenderDelayBuffer::Create(this, a2, a3);
  if (*((_BYTE *)this + 84))
  {
    v9 = 0;
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = &off_24C0BB720;
    v10 = operator new();
    do
    *(_QWORD *)(v9 + 8) = v10;
    *(_DWORD *)(v9 + 16) = *((_QWORD *)this + 6);
    *(_BYTE *)(v9 + 24) = 0;
    *(_BYTE *)(v9 + 56) = 0;
    webrtc::EchoPathDelayEstimator::EchoPathDelayEstimator(v9 + 64, v10, (uint64_t)this, a4);
    *(_QWORD *)(v9 + 1600) = 0;
    *(_OWORD *)(v9 + 1584) = 0u;
    *(_BYTE *)(v9 + 1608) = 1;
    *(_BYTE *)(v9 + 1616) = 0;
    *(_BYTE *)(v9 + 1648) = 0;
    *(_OWORD *)(v9 + 1656) = 0u;
    webrtc::MatchedFilter::LogFilterProperties((webrtc::MatchedFilter *)(v9 + 224));
  }
  v12 = webrtc::EchoRemover::Create(this, a2, a3, a4);
  v13 = operator new();
  *(_QWORD *)v13 = &off_24C0B0298;
  v14 = operator new();
  do
  *(_QWORD *)(v13 + 8) = v14;
  v16 = *((_OWORD *)this + 5);
  *(_OWORD *)(v13 + 80) = *((_OWORD *)this + 4);
  *(_OWORD *)(v13 + 96) = v16;
  *(_OWORD *)(v13 + 112) = *((_OWORD *)this + 6);
  *(_BYTE *)(v13 + 128) = *((_BYTE *)this + 112);
  v17 = *((_OWORD *)this + 1);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)this;
  *(_OWORD *)(v13 + 32) = v17;
  v18 = *((_OWORD *)this + 3);
  *(_OWORD *)(v13 + 48) = *((_OWORD *)this + 2);
  *(_OWORD *)(v13 + 64) = v18;
  v19 = *(_OWORD *)((char *)this + 312);
  *(_OWORD *)(v13 + 312) = *(_OWORD *)((char *)this + 296);
  *(_OWORD *)(v13 + 328) = v19;
  *(_QWORD *)(v13 + 342) = *(_QWORD *)((char *)this + 326);
  *(_OWORD *)(v13 + 232) = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(v13 + 248) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(v13 + 264) = *(_OWORD *)((char *)this + 248);
  v20 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(v13 + 280) = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(v13 + 296) = v20;
  *(_OWORD *)(v13 + 168) = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v13 + 184) = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)(v13 + 200) = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(v13 + 216) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(v13 + 136) = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(v13 + 152) = *(_OWORD *)((char *)this + 136);
  v21 = *((_OWORD *)this + 22);
  *(_OWORD *)(v13 + 352) = *((_OWORD *)this + 21);
  *(_OWORD *)(v13 + 368) = v21;
  *(_OWORD *)(v13 + 377) = *(_OWORD *)((char *)this + 361);
  *(_DWORD *)(v13 + 400) = *((_DWORD *)this + 96);
  v22 = *((_QWORD *)this + 50);
  *(_QWORD *)(v13 + 408) = *((_QWORD *)this + 49);
  *(_QWORD *)(v13 + 416) = v22;
  *(_DWORD *)(v13 + 424) = *((_DWORD *)this + 102);
  *(_DWORD *)(v13 + 436) = *((_DWORD *)this + 105);
  *(_QWORD *)(v13 + 428) = *(_QWORD *)((char *)this + 412);
  v23 = *((_QWORD *)this + 54);
  *(_QWORD *)(v13 + 440) = *((_QWORD *)this + 53);
  *(_QWORD *)(v13 + 448) = v23;
  *(_DWORD *)(v13 + 456) = *((_DWORD *)this + 110);
  *(_QWORD *)(v13 + 460) = *(_QWORD *)((char *)this + 444);
  *(_DWORD *)(v13 + 468) = *((_DWORD *)this + 113);
  *(_QWORD *)(v13 + 472) = *((_QWORD *)this + 57);
  *(_OWORD *)(v13 + 585) = *(_OWORD *)((char *)this + 569);
  v24 = *((_OWORD *)this + 35);
  v25 = *((_OWORD *)this + 33);
  *(_OWORD *)(v13 + 560) = *((_OWORD *)this + 34);
  *(_OWORD *)(v13 + 576) = v24;
  v26 = *((_OWORD *)this + 31);
  *(_OWORD *)(v13 + 528) = *((_OWORD *)this + 32);
  *(_OWORD *)(v13 + 544) = v25;
  v27 = *((_OWORD *)this + 29);
  *(_OWORD *)(v13 + 496) = *((_OWORD *)this + 30);
  *(_OWORD *)(v13 + 512) = v26;
  *(_OWORD *)(v13 + 480) = v27;
  *(_OWORD *)(v13 + 608) = *((_OWORD *)this + 37);
  *(_WORD *)(v13 + 624) = 0;
  *(_QWORD *)(v13 + 632) = (int)a2;
  *(_QWORD *)(v13 + 640) = v8;
  *(_QWORD *)(v13 + 648) = v9;
  *(_QWORD *)(v13 + 656) = v12;
  *(_DWORD *)(v13 + 664) = 0;
  *(_BYTE *)(v13 + 668) = 0;
  *(_BYTE *)(v13 + 728) = 0;
  *(_QWORD *)(v13 + 680) = 0;
  *(_QWORD *)(v13 + 672) = 0;
  *(_BYTE *)(v13 + 696) = 0;
  *(_QWORD *)(v13 + 688) = 0;
  return v13;
}

void webrtc::`anonymous namespace'::BlockProcessorImpl::~BlockProcessorImpl(webrtc::_anonymous_namespace_::BlockProcessorImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    MEMORY[0x20BD0ADEC](v5, 0xC400A2AC0F1);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    MEMORY[0x20BD0ADEC](v5, 0xC400A2AC0F1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::BlockProcessorImpl::GetMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 656) + 16))(*(_QWORD *)(a1 + 656));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 640) + 64))(*(_QWORD *)(a1 + 640));
  *(_DWORD *)(a2 + 16) = 4 * result;
  return result;
}

uint64_t webrtc::`anonymous namespace'::BlockProcessorImpl::SetAudioBufferDelay(webrtc::_anonymous_namespace_::BlockProcessorImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 80) + 96))(*((_QWORD *)this + 80));
}

uint64_t webrtc::`anonymous namespace'::BlockProcessorImpl::ProcessCapture(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  _OWORD v38[2];
  char v39;

  ++*(_QWORD *)(result + 688);
  if (*(_QWORD *)(a5 + 16) == *(_QWORD *)(a5 + 8))
    goto LABEL_37;
  v5 = result;
  if (!*(_BYTE *)(result + 625))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 640) + 40))(*(_QWORD *)(result + 640));
  LODWORD(v9) = a2;
  if (!*(_BYTE *)(result + 624))
  {
    *(_BYTE *)(result + 624) = 1;
    (*(void (**)(_QWORD))(**(_QWORD **)(result + 640) + 16))(*(_QWORD *)(result + 640));
    v10 = *(_QWORD *)(v5 + 648);
    if (v10)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
  }
  v11 = v9;
  v9 = v9;
  if (*(_DWORD *)(v5 + 684) == 2)
  {
    v9 = v9;
    if (*(_BYTE *)(v5 + 625))
    {
      v9 = v9 | 0x100000000;
      v12 = *(_QWORD *)(v5 + 648);
      if (v12)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(v12, 1);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/block_processor.cc");
    }
  }
  *(_DWORD *)(v5 + 684) = 0;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 32))(*(_QWORD *)(v5 + 640));
  if ((_DWORD)result == 1)
  {
    result = *(_QWORD *)(v5 + 648);
    if (result)
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, 0);
  }
  if (*(_QWORD *)(a5 + 16) == *(_QWORD *)(a5 + 8))
    goto LABEL_37;
  if (!*(_BYTE *)(v5 + 100))
  {
    v21 = *(_QWORD *)(v5 + 648);
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 88))(*(_QWORD *)(v5 + 640));
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 64))(*(_QWORD *)(v5 + 640));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v38, v21, v22, v23, a5);
    v24 = v38[1];
    *(_OWORD *)(v5 + 696) = v38[0];
    *(_OWORD *)(v5 + 712) = v24;
    v25 = v39;
    *(_BYTE *)(v5 + 728) = v39;
    if (!v25)
      goto LABEL_31;
    result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 640) + 48))(*(_QWORD *)(v5 + 640), *(_QWORD *)(v5 + 704));
    if (!(_DWORD)result)
      goto LABEL_31;
    if (*(_BYTE *)(v5 + 101))
      v33 = 2;
    else
      v33 = 1;
      && (rtc::LogMessage::streams_empty_ & 1) != 0)
    {
LABEL_30:
      v9 = v11 | 0x200000000;
LABEL_31:
      v20 = (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 648) + 40))(*(_QWORD *)(v5 + 648));
      goto LABEL_32;
    }
    if (*(_BYTE *)(v5 + 728))
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/block_processor.cc");
      goto LABEL_30;
    }
LABEL_37:
    __break(1u);
    return result;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 56))(*(_QWORD *)(v5 + 640));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 104))(*(_QWORD *)(v5 + 640));
  if ((_DWORD)result)
  {
    v20 = 0;
LABEL_32:
    v34 = *(_QWORD *)(v5 + 656);
    v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 640) + 80))(*(_QWORD *)(v5 + 640));
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 24))(v34, v9, v20, a3, v5 + 696, v35, a4, a5);
  }
  v36 = *(_DWORD *)(v5 + 664) + 1;
  *(_DWORD *)(v5 + 664) = v36;
  if (v36 == 2500)
  {
    *(_QWORD *)(v5 + 672) = 0;
    *(_DWORD *)(v5 + 680) = 0;
    v37 = 1;
    *(_DWORD *)(v5 + 664) = 0;
  }
  else
  {
    v37 = 0;
  }
  *(_BYTE *)(v5 + 668) = v37;
  return result;
}

_QWORD **webrtc::`anonymous namespace'::BlockProcessorImpl::BufferRender(_QWORD **result, uint64_t a2)
{
  _QWORD **v2;
  int v3;

  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    v3 = (*(uint64_t (**)(_QWORD *))(*result[80] + 24))(result[80]);
    *((_DWORD *)v2 + 171) = v3;
    ++*((_DWORD *)v2 + 170);
    if (v3)
      ++*((_DWORD *)v2 + 169);
    *((_BYTE *)v2 + 625) = 1;
    result = (_QWORD **)v2[81];
    if (result)
      return (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[3])(result);
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::BlockProcessorImpl::UpdateEchoLeakageStatus(webrtc::_anonymous_namespace_::BlockProcessorImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 82) + 32))(*((_QWORD *)this + 82));
}

uint64_t webrtc::`anonymous namespace'::BlockProcessorImpl::SetCaptureOutputUsage(webrtc::_anonymous_namespace_::BlockProcessorImpl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 82) + 40))(*((_QWORD *)this + 82));
}

void rtc::BoringSSLCertificate::Generate(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  size_t v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  std::string *v34;
  _QWORD *v35;
  const EVP_MD *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  BOOL v40;
  unint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  size_t v52;
  uint64_t *BufferPool;
  _QWORD *v54;
  std::string *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::string v59;
  _BYTE v60[28];
  size_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  EVP_MD_CTX ctx;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[6];
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75[6];
  _BYTE v76[48];
  uint64_t v77[6];
  _BYTE *v78;
  char buf[16];
  void *v80[24];

  v80[23] = *(void **)MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v59 = *(std::string *)a2;
  *(_OWORD *)v60 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v60[12] = *(_OWORD *)(a2 + 36);
  size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v59.__r_.__value_.__l.__size_;
  if (!size)
  {
    memset(buf, 0, sizeof(buf));
    v80[0] = 0;
    {
      v55 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v19, v20, v21, v22, v58);
      rtc::BoringSSLCertificate::FromPEMString(v55, v56, v57);
      return;
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    v59.__r_.__value_.__r.__words[2] = (std::string::size_type)v80[0];
    v8 = *a1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  v8 = *a1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_8:
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
LABEL_9:
  v73 = 0;
  v74 = 0;
  v72 = 0;
  *(_OWORD *)buf = 0u;
  memset(v80, 0, 32);
  v16 = malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v16)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    goto LABEL_27;
  }
  *v16 = 64;
  buf[8] = 0;
  *(_QWORD *)buf = 0;
  v80[0] = v16 + 1;
  *(_OWORD *)&v80[1] = xmmword_208F05A00;
  LOBYTE(v80[3]) = (uint64_t)v80[3] & 0xFC | 1;
  if (!CBB_flush((uint64_t *)buf))
    goto LABEL_27;
  v71[0] = 0;
  if (!CBB_add_space((uint64_t)buf, v71, 1))
    goto LABEL_27;
  *(_BYTE *)v71[0] = 48;
  if (!cbb_add_child((uint64_t)buf, (uint64_t)v77, 1u, 1))
    goto LABEL_27;
  if (!CBB_flush(v77))
    goto LABEL_27;
  v71[0] = 0;
  if (!CBB_add_space((uint64_t)v77, v71, 1))
    goto LABEL_27;
  *(_BYTE *)v71[0] = -96;
  if (!cbb_add_child((uint64_t)v77, (uint64_t)v76, 1u, 1))
    goto LABEL_27;
  if (!CBB_add_asn1_uint64_with_tag((uint64_t)v76, 2uLL, 2))
    goto LABEL_27;
  RAND_bytes_with_additional_data((uint64_t)&v72, 8uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  if (!CBB_add_asn1_uint64_with_tag((uint64_t)v77, v72, 2)
  {
    goto LABEL_27;
  }
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
  {
    v17 = v59.__r_.__value_.__l.__size_;
    if ((v59.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_88;
    v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (v59.__r_.__value_.__l.__size_)
    {
      if (!v59.__r_.__value_.__r.__words[0])
        goto LABEL_88;
    }
  }
  else
  {
    v17 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    v18 = &v59;
  }
    || !CBB_add_asn1(v77, (uint64_t)v75, 536870928)
  {
LABEL_27:
    if (!buf[8] && ((uint64_t)v80[3] & 1) != 0 && v80[0])
    {
      v24 = (char *)v80[0] - 8;
      v23 = *((_QWORD *)v80[0] - 1);
      if (v23 != -8)
        bzero(v24, v23 + 8);
      free(v24);
    }
LABEL_33:
    v77[0] = (uint64_t)"Generating certificate";
    v77[1] = 22;
    for (i = ERR_get_error(); (_DWORD)i; i = ERR_get_error())
    {
      ERR_error_string_n(i, buf, 0xC8uLL);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v3 = v3 & 0xFFFFFFFF00000000 | 0x783;
        rtc::webrtc_logging_impl::Log("\r\v\t\t\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_utility.cc");
      }
    }
    *a3 = 0;
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_39;
    return;
  }
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v33 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    v34 = &v59;
    goto LABEL_53;
  }
  v33 = v59.__r_.__value_.__l.__size_;
  if ((v59.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
    || (v34 = (std::string *)v59.__r_.__value_.__r.__words[0], v59.__r_.__value_.__l.__size_)
    && !v59.__r_.__value_.__r.__words[0])
  {
LABEL_88:
    __break(1u);
  }
LABEL_53:
    || !EVP_marshal_public_key((uint64_t)v77, v8)
    || !CBB_finish((uint64_t)buf, &v74, &v73))
  {
    goto LABEL_27;
  }
  v35 = v74;
  memset(&ctx, 0, sizeof(ctx));
  v63 = 0;
  v64 = 0;
  v61 = 0;
  v62 = 0;
  if (!CBB_init((uint64_t)buf, v73))
    goto LABEL_82;
  if (!CBB_add_asn1((uint64_t *)buf, (uint64_t)v71, 536870928))
    goto LABEL_82;
  if (!CBB_add_bytes((uint64_t)v71, v74, v73))
    goto LABEL_82;
    goto LABEL_82;
  if (!CBB_add_asn1(v71, (uint64_t)&v66, 3))
    goto LABEL_82;
  v78 = 0;
  if (!CBB_add_space((uint64_t)&v66, &v78, 1))
    goto LABEL_82;
  *v78 = 0;
  v36 = EVP_sha256();
  if (!do_sigver_init(&ctx, 0, (uint64_t)v36, 0, v8, 0)
    || !EVP_DigestSign(&ctx, 0, (uint64_t)&v63, (uint64_t)v74, v73)
    || !CBB_reserve((uint64_t)&v66, &v64, v63))
  {
    goto LABEL_82;
  }
  v37 = 0;
  if (EVP_DigestSign(&ctx, v64, (uint64_t)&v63, (uint64_t)v74, v73))
  {
    v38 = (unint64_t *)&v69;
    if (v67)
      v38 = (unint64_t *)(v68 + 8);
    v39 = *v38 + v63;
    v40 = __CFADD__(*v38, v63);
    if (!v66 && !v40)
    {
      if (v67)
        v41 = (unint64_t *)(v68 + 16);
      else
        v41 = (unint64_t *)&v70;
      if (v39 <= *v41)
      {
        *v38 = v39;
        if (CBB_finish((uint64_t)buf, &v62, &v61))
        {
          v42 = v62;
          v43 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
          if ((v43 & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v44, v45, v46, v47, v48, v49, v50, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
          v52 = v61;
          v51 = v62;
          BufferPool = (uint64_t *)rtc::openssl::GetBufferPool((rtc::openssl *)v43);
          v37 = crypto_buffer_new(v51, v52, 0, BufferPool);
          if (v42)
            OPENSSL_free(v42);
          goto LABEL_83;
        }
      }
LABEL_82:
      v37 = 0;
    }
  }
LABEL_83:
  EVP_MD_CTX_cleanup(&ctx);
  if (v35)
    OPENSSL_free(v35);
  CBB_cleanup((uint64_t)buf);
  if (!v37)
    goto LABEL_33;
  v54 = (_QWORD *)operator new();
  *v54 = &off_24C0B02E8;
  v54[1] = v37;
  *a3 = v54;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
LABEL_39:
    operator delete(v59.__r_.__value_.__l.__data_);
}

void rtc::BoringSSLCertificate::FromPEMString(void *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v4;
  _QWORD *v5;
  const void *p_p;
  size_t v7;
  unsigned __int8 v8;
  _QWORD *v9;
  int v10;
  size_t v11;
  const void *v12;
  void *__p;
  size_t v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v4 = rtc::SSLIdentity::PemToDer("CERTIFICATE", 0xBuLL, a1, a2, (uint64_t)&__p);
  v5 = 0;
  if (v4)
  {
    if (v15 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v15 >= 0)
      v7 = HIBYTE(v15);
    else
      v7 = v14;
    if ((v8 & 1) == 0)
    {
      v11 = v7;
      v12 = p_p;
      v7 = v11;
      p_p = v12;
      if (v10)
      {
        rtc::openssl::GetBufferPool(void)::instance = (uint64_t)CRYPTO_BUFFER_POOL_new();
        v7 = v11;
        p_p = v12;
      }
    }
    v5 = crypto_buffer_new(p_p, v7, 0, (uint64_t *)rtc::openssl::GetBufferPool(void)::instance);
    if (v5)
    {
      v9 = v5;
      v5 = (_QWORD *)operator new();
      *v5 = &off_24C0B02E8;
      v5[1] = v9;
    }
  }
  *a3 = v5;
  if (SHIBYTE(v15) < 0)
    operator delete(__p);
}

uint64_t rtc::BoringSSLCertificate::GetSignatureDigestAlgorithm(uint64_t a1, uint64_t *a2)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  const char *v31;
  unint64_t v32[2];

  if ((rtc::openssl::ParseCertificate(*(_QWORD *)(a1 + 8), v32, 0) & 1) != 0)
  {
    switch(v32[1])
    {
      case 5uLL:
        if (*(_DWORD *)v32[0] == 33754667 && *(_BYTE *)(v32[0] + 4) == 3)
          goto LABEL_76;
        if (*(_DWORD *)v32[0] == 33754667 && *(_BYTE *)(v32[0] + 4) == 27)
          goto LABEL_74;
        if (*(_DWORD *)v32[0] == 33754667 && *(_BYTE *)(v32[0] + 4) == 29)
          goto LABEL_74;
        goto LABEL_34;
      case 7uLL:
        if ((*(_DWORD *)v32[0] != -834107862 || *(_DWORD *)(v32[0] + 3) != 17055182)
          && (*(_DWORD *)v32[0] != -834107862 || *(_DWORD *)(v32[0] + 3) != 50608334))
        {
          goto LABEL_34;
        }
        goto LABEL_74;
      case 8uLL:
        switch(*(_QWORD *)v32[0])
        {
          case 0x103043DCE48862ALL:
            goto LABEL_79;
          case 0x203043DCE48862ALL:
            goto LABEL_83;
          case 0x303043DCE48862ALL:
            goto LABEL_91;
        }
        if (*(_QWORD *)v32[0] != 0x403043DCE48862ALL)
          goto LABEL_34;
        goto LABEL_71;
      case 9uLL:
        if (*(_QWORD *)v32[0] == 0x1010DF78648862ALL && *(_BYTE *)(v32[0] + 8) == 4)
        {
LABEL_76:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 3;
            a2 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 3;
          }
          *(_WORD *)a2 = rtc::DIGEST_MD5;
          *((_BYTE *)a2 + 2) = 53;
          *((_BYTE *)a2 + 3) = 0;
          return 1;
        }
        if (*(_QWORD *)v32[0] == 0x1010DF78648862ALL && *(_BYTE *)(v32[0] + 8) == 5)
        {
LABEL_74:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 5;
            a2 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 5;
          }
          strcpy((char *)a2, "sha-1");
          return 1;
        }
        v25 = *(_QWORD *)v32[0] == 0x1010DF78648862ALL && *(_BYTE *)(v32[0] + 8) == 14;
        if (v25 || (*(_QWORD *)v32[0] == 0x304036501488660 ? (v26 = *(_BYTE *)(v32[0] + 8) == 1) : (v26 = 0), v26))
        {
LABEL_79:
          if (*((char *)a2 + 23) < 0)
          {
            a2[1] = 7;
            a2 = (uint64_t *)*a2;
          }
          else
          {
            *((_BYTE *)a2 + 23) = 7;
          }
          v31 = "sha-224";
        }
        else
        {
          v27 = *(_QWORD *)v32[0] == 0x1010DF78648862ALL && *(_BYTE *)(v32[0] + 8) == 11;
          if (v27 || (*(_QWORD *)v32[0] == 0x304036501488660 ? (v28 = *(_BYTE *)(v32[0] + 8) == 2) : (v28 = 0), v28))
          {
LABEL_83:
            if (*((char *)a2 + 23) < 0)
            {
              a2[1] = 7;
              a2 = (uint64_t *)*a2;
            }
            else
            {
              *((_BYTE *)a2 + 23) = 7;
            }
            v31 = "sha-256";
          }
          else if (*(_QWORD *)v32[0] == 0x1010DF78648862ALL && *(_BYTE *)(v32[0] + 8) == 12)
          {
LABEL_91:
            if (*((char *)a2 + 23) < 0)
            {
              a2[1] = 7;
              a2 = (uint64_t *)*a2;
            }
            else
            {
              *((_BYTE *)a2 + 23) = 7;
            }
            v31 = "sha-384";
          }
          else
          {
            if (*(_QWORD *)v32[0] != 0x1010DF78648862ALL || *(_BYTE *)(v32[0] + 8) != 13)
            {
LABEL_34:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
              result = 0;
              if (*((char *)a2 + 23) < 0)
              {
                *(_BYTE *)*a2 = 0;
                a2[1] = 0;
              }
              else
              {
                *(_BYTE *)a2 = 0;
                *((_BYTE *)a2 + 23) = 0;
              }
              return result;
            }
LABEL_71:
            if (*((char *)a2 + 23) < 0)
            {
              a2[1] = 7;
              a2 = (uint64_t *)*a2;
            }
            else
            {
              *((_BYTE *)a2 + 23) = 7;
            }
            v31 = "sha-512";
          }
        }
        *(_DWORD *)a2 = *(_DWORD *)v31;
        *(_DWORD *)((char *)a2 + 3) = *(_DWORD *)(v31 + 3);
        *((_BYTE *)a2 + 7) = 0;
        return 1;
      default:
        goto LABEL_34;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
  return 0;
}

uint64_t rtc::BoringSSLCertificate::ComputeDigest(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  int DigestEVP;
  uint64_t result;
  unsigned int size;
  EVP_MD *type;

  v9 = *(_QWORD *)(a1 + 8);
  type = 0;
  size = 0;
  DigestEVP = rtc::OpenSSLDigest::GetDigestEVP(a2, a3, (const EVP_MD **)&type);
  result = 0;
  if (DigestEVP)
  {
    if (type->pkey_type <= a5)
    {
      result = EVP_Digest(*(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), a4, &size, type, 0);
      if ((_DWORD)result)
      {
        *a6 = size;
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void rtc::BoringSSLCertificate::~BoringSSLCertificate(rtc::BoringSSLCertificate *this)
{
  unsigned int *v2;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CRYPTO_BUFFER_free(v2);
}

{
  unsigned int *v2;

  v2 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    CRYPTO_BUFFER_free(v2);
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *rtc::BoringSSLCertificate::Clone@<X0>(rtc::BoringSSLCertificate *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *result;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    v5 = atomic_load((unsigned int *)(v3 + 24));
    if (v5 != -1)
    {
      do
      {
        v6 = __ldaxr(v4);
        if (v6 == v5)
        {
          if (!__stlxr(v5 + 1, v4))
            break;
        }
        else
        {
          __clrex();
        }
        v5 = v6;
      }
      while (v6 != -1);
    }
  }
  result = (_QWORD *)operator new();
  *result = &off_24C0B02E8;
  result[1] = v3;
  *a2 = result;
  return result;
}

void rtc::BoringSSLCertificate::ToPEMString(rtc::BoringSSLCertificate *this@<X0>, std::string *a2@<X8>)
{
  rtc::SSLIdentity::DerToPem("CERTIFICATE", 0xBuLL, *(std::string **)(*((_QWORD *)this + 1) + 8), *(_QWORD *)(*((_QWORD *)this + 1) + 16), a2);
}

_QWORD *rtc::BoringSSLCertificate::ToDER(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  const void *v4;
  size_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  size_t v12;

  v2 = result[1];
  v4 = *(const void **)(v2 + 8);
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)a2 = 0;
  if (v3)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 >= v3)
    {
      v12 = 0;
    }
    else
    {
      v7 = v6 + (v6 >> 1);
      if (v7 <= v3)
        v8 = v3;
      else
        v8 = v7;
      v9 = (void *)operator new[]();
      v10 = v9;
      v11 = *(_QWORD *)(a2 + 16);
      if (v11)
      {
        memcpy(v9, *(const void **)(a2 + 16), *(_QWORD *)a2);
        *(_QWORD *)(a2 + 16) = v10;
        MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a2 + 16) = v9;
      }
      *(_QWORD *)(a2 + 8) = v8;
      v12 = *(_QWORD *)a2;
    }
    result = memcpy((void *)(*(_QWORD *)(a2 + 16) + v12), v4, v3);
    *(_QWORD *)a2 = v3;
  }
  return result;
}

uint64_t rtc::BoringSSLCertificate::CertificateExpirationTime(rtc::BoringSSLCertificate *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v9 = 0;
  if ((rtc::openssl::ParseCertificate(*((_QWORD *)this + 1), 0, &v9) & 1) != 0)
    return v9;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
  return -1;
}

uint64_t rtc::`anonymous namespace'::AddSHA256SignatureAlgorithm(uint64_t *a1, int a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD v6[6];
  _QWORD v7[6];
  uint64_t v8[6];

  result = CBB_flush(a1);
  if (!(_DWORD)result)
    return result;
  v8[0] = 0;
  result = CBB_add_space((uint64_t)a1, v8, 1);
  if (!(_DWORD)result)
    return result;
  *(_BYTE *)v8[0] = 48;
  result = cbb_add_child((uint64_t)a1, (uint64_t)v8, 1u, 1);
  if (!(_DWORD)result)
    return result;
  result = CBB_flush(v8);
  if (!(_DWORD)result)
    return result;
  v7[0] = 0;
  result = CBB_add_space((uint64_t)v8, v7, 1);
  if (!(_DWORD)result)
    return result;
  *(_BYTE *)v7[0] = 6;
  result = cbb_add_child((uint64_t)v8, (uint64_t)v7, 1u, 1);
  if (!(_DWORD)result)
    return result;
  if (a2 == 1)
  {
    v6[0] = 0;
    result = CBB_add_space((uint64_t)v7, v6, 8);
    if (!(_DWORD)result)
      return result;
    *(_QWORD *)v6[0] = 0x203043DCE48862ALL;
    return CBB_flush(a1) != 0;
  }
  if (a2)
    return 0;
  v6[0] = 0;
  result = CBB_add_space((uint64_t)v7, v6, 9);
  if ((_DWORD)result)
  {
    v5 = (_QWORD *)v6[0];
    *(_BYTE *)(v6[0] + 8) = 11;
    *v5 = 0x1010DF78648862ALL;
    result = CBB_flush(v8);
    if ((_DWORD)result)
    {
      v6[0] = 0;
      result = CBB_add_space((uint64_t)v8, v6, 1);
      if ((_DWORD)result)
      {
        *(_BYTE *)v6[0] = 5;
        result = cbb_add_child((uint64_t)v8, (uint64_t)v6, 1u, 1);
        if ((_DWORD)result)
          return CBB_flush(a1) != 0;
      }
    }
  }
  return result;
}

uint64_t rtc::`anonymous namespace'::AddCommonName(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t result;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17[6];
  uint64_t v18[6];
  uint64_t v19[6];
  void *v20;

  if (a3)
  {
    result = CBB_flush(a1);
    if ((_DWORD)result)
    {
      v19[0] = 0;
      result = CBB_add_space((uint64_t)a1, v19, 1);
      if ((_DWORD)result)
      {
        *(_BYTE *)v19[0] = 48;
        result = cbb_add_child((uint64_t)a1, (uint64_t)v19, 1u, 1);
        if ((_DWORD)result)
        {
          result = CBB_flush(v19);
          if ((_DWORD)result)
          {
            v18[0] = 0;
            result = CBB_add_space((uint64_t)v19, v18, 1);
            if ((_DWORD)result)
            {
              *(_BYTE *)v18[0] = 49;
              result = cbb_add_child((uint64_t)v19, (uint64_t)v18, 1u, 1);
              if ((_DWORD)result)
              {
                result = CBB_flush(v18);
                if ((_DWORD)result)
                {
                  v17[0] = 0;
                  result = CBB_add_space((uint64_t)v18, v17, 1);
                  if ((_DWORD)result)
                  {
                    *(_BYTE *)v17[0] = 48;
                    result = cbb_add_child((uint64_t)v18, (uint64_t)v17, 1u, 1);
                    if ((_DWORD)result)
                    {
                      result = CBB_flush(v17);
                      if ((_DWORD)result)
                      {
                        v16[0] = 0;
                        result = CBB_add_space((uint64_t)v17, v16, 1);
                        if ((_DWORD)result)
                        {
                          *(_BYTE *)v16[0] = 6;
                          result = cbb_add_child((uint64_t)v17, (uint64_t)v16, 1u, 1);
                          if ((_DWORD)result)
                          {
                            v15[0] = 0;
                            result = CBB_add_space((uint64_t)v16, v15, 3);
                            if ((_DWORD)result)
                            {
                              v7 = (_WORD *)v15[0];
                              *(_BYTE *)(v15[0] + 2) = 3;
                              *v7 = 1109;
                              result = CBB_flush(v17);
                              if ((_DWORD)result)
                              {
                                v15[0] = 0;
                                result = CBB_add_space((uint64_t)v17, v15, 1);
                                if ((_DWORD)result)
                                {
                                  *(_BYTE *)v15[0] = 12;
                                  result = cbb_add_child((uint64_t)v17, (uint64_t)v15, 1u, 1);
                                  if ((_DWORD)result)
                                  {
                                    v20 = 0;
                                    result = CBB_add_space((uint64_t)v15, &v20, a3);
                                    if ((_DWORD)result)
                                    {
                                      memcpy(v20, a2, a3);
                                      return CBB_flush(a1) != 0;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
  {
    return 0;
  }
  else
  {
    rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_certificate.cc");
    return 0;
  }
  return result;
}

BOOL rtc::`anonymous namespace'::AddTime(uint64_t *a1, uint64_t a2)
{
  int v4;
  ASN1_STRING *v5;
  BOOL v6;
  _BOOL8 v9;
  unsigned __int8 *v10;
  int type;
  unsigned __int8 *data;
  size_t length;
  unsigned __int8 *v14;
  uint64_t v15;
  size_t v16;
  uint64_t *p_flags;
  uint64_t flags;
  size_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;

  *(_QWORD *)&v20 = 0;
  v4 = ASN1_item_ex_new((ASN1_VALUE **)&v20, &ASN1_TIME_it);
  v5 = (ASN1_STRING *)v20;
  if (v4)
    v6 = (_QWORD)v20 == 0;
  else
    v6 = 1;
  if (v6)
    return 0;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  if (OPENSSL_posix_to_tm(a2, (uint64_t)&v20))
  {
    if ((DWORD1(v21) - 150) >= 0xFFFFFF9C)
    {
      if (!ASN1_UTCTIME_adj(v5, a2, 0, 0))
        goto LABEL_21;
    }
    else if (!ASN1_GENERALIZEDTIME_adj(v5, a2, 0, 0))
    {
      goto LABEL_21;
    }
    type = v5->type;
    if ((type - 23) <= 1)
    {
      if (CBB_add_asn1(a1, (uint64_t)&v20, type))
      {
        data = v5->data;
        length = v5->length;
        v24 = 0;
        if (CBB_add_space((uint64_t)&v20, &v24, length))
        {
          if ((_DWORD)length)
            memcpy(v24, data, length);
          v9 = CBB_flush(a1) != 0;
          v10 = v5->data;
          if (!v10)
            goto LABEL_25;
          goto LABEL_22;
        }
      }
    }
LABEL_21:
    v9 = 0;
    v10 = v5->data;
    if (v10)
      goto LABEL_22;
    goto LABEL_25;
  }
  ERR_put_error(12, 0, 113, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_time.c", 95);
  v9 = 0;
  v10 = v5->data;
  if (v10)
  {
LABEL_22:
    v15 = *((_QWORD *)v10 - 1);
    v14 = v10 - 8;
    v16 = v15 + 8;
    if (v15 != -8)
      bzero(v14, v16);
    free(v14);
  }
LABEL_25:
  flags = v5[-1].flags;
  p_flags = &v5[-1].flags;
  v19 = flags + 8;
  if (flags != -8)
    bzero(p_flags, v19);
  free(p_flags);
  return v9;
}

_QWORD *rtc::BoringSSLIdentity::BoringSSLIdentity(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  *a2 = 0;
  *a1 = &off_24C0B0338;
  a1[1] = v4;
  a1[2] = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = operator new(8uLL);
  *v6 = v5;
  v7 = (_QWORD *)operator new();
  *v7 = v6;
  v7[1] = v6 + 1;
  v7[2] = v6 + 1;
  v8 = (_QWORD *)a1[2];
  a1[2] = v7;
  if (v8)
  {
    v9 = (_QWORD *)*v8;
    if (*v8)
    {
      v10 = (_QWORD *)v8[1];
      v11 = (_QWORD *)*v8;
      if (v10 != v9)
      {
        do
        {
          v13 = *--v10;
          v12 = v13;
          *v10 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        while (v10 != v9);
        v11 = (_QWORD *)*v8;
      }
      v8[1] = v9;
      operator delete(v11);
    }
    MEMORY[0x20BD0ADEC](v8, 0x20C40960023A9);
  }
  return a1;
}

void rtc::BoringSSLIdentity::~BoringSSLIdentity(rtc::BoringSSLIdentity *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int i;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  size_t v16;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    if (*v2)
    {
      v4 = (_QWORD *)v2[1];
      v5 = (_QWORD *)*v2;
      if (v4 != v3)
      {
        do
        {
          v7 = *--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        while (v4 != v3);
        v5 = (_QWORD *)*v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x20BD0ADEC](v2, 0x20C40960023A9);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    v9 = *v8;
    if (*v8)
    {
      for (i = atomic_load((unsigned int *)v9); i != -1; i = v11)
      {
        if (!i)
          abort();
        v11 = __ldaxr((unsigned int *)v9);
        if (v11 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v9))
          {
            if (i == 1)
            {
              v12 = *(_QWORD *)(v9 + 16);
              if (v12)
              {
                v13 = *(void (**)(uint64_t))(v12 + 160);
                if (v13)
                {
                  v13(v9);
                  *(_QWORD *)(v9 + 8) = 0;
                  *(_DWORD *)(v9 + 4) = 0;
                }
              }
              v15 = *(_QWORD *)(v9 - 8);
              v14 = (void *)(v9 - 8);
              v16 = v15 + 8;
              if (v15 != -8)
                bzero(v14, v16);
              free(v14);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    MEMORY[0x20BD0ADEC](v8, 0x20C4093837F09);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int i;
  unsigned int v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  void *v14;
  uint64_t v15;
  size_t v16;

  v2 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = (_QWORD *)*v2;
    if (*v2)
    {
      v4 = (_QWORD *)v2[1];
      v5 = (_QWORD *)*v2;
      if (v4 != v3)
      {
        do
        {
          v7 = *--v4;
          v6 = v7;
          *v4 = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        }
        while (v4 != v3);
        v5 = (_QWORD *)*v2;
      }
      v2[1] = v3;
      operator delete(v5);
    }
    MEMORY[0x20BD0ADEC](v2, 0x20C40960023A9);
  }
  v8 = (uint64_t *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v8)
    goto LABEL_30;
  v9 = *v8;
  if (!*v8)
    goto LABEL_27;
  for (i = atomic_load((unsigned int *)v9); ; i = v11)
  {
    if (i == -1)
      goto LABEL_27;
    if (!i)
      abort();
    v11 = __ldaxr((unsigned int *)v9);
    if (v11 == i)
    {
      if (!__stlxr(i - 1, (unsigned int *)v9))
      {
        if (i == 1)
        {
          v12 = *(_QWORD *)(v9 + 16);
          if (v12)
          {
            v13 = *(void (**)(uint64_t))(v12 + 160);
            if (v13)
            {
              v13(v9);
              *(_QWORD *)(v9 + 8) = 0;
              *(_DWORD *)(v9 + 4) = 0;
            }
          }
          v15 = *(_QWORD *)(v9 - 8);
          v14 = (void *)(v9 - 8);
          v16 = v15 + 8;
          if (v15 != -8)
            bzero(v14, v16);
          free(v14);
        }
LABEL_27:
        MEMORY[0x20BD0ADEC](v8, 0x20C4093837F09);
LABEL_30:
        JUMPOUT(0x20BD0ADECLL);
      }
    }
    else
    {
      __clrex();
    }
  }
}

void rtc::BoringSSLIdentity::CreateInternal(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int i;
  unsigned int v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  void *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int j;
  unsigned int v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  void *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;

  rtc::OpenSSLKeyPair::Generate((rtc::OpenSSLKeyPair *)(a1 + 40), &v38);
  v4 = v38;
  if (!v38 || (rtc::BoringSSLCertificate::Generate(v38, a1, &v37), !v37))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_identity.cc");
    *a2 = 0;
    v38 = 0;
    if (!v4)
      return;
    goto LABEL_33;
  }
  v5 = (_QWORD *)operator new();
  v38 = 0;
  v6 = v37;
  v36 = v4;
  v37 = 0;
  v35 = v6;
  *a2 = rtc::BoringSSLIdentity::BoringSSLIdentity(v5, (uint64_t *)&v36, &v35);
  v7 = v35;
  if (v35)
  {
    v8 = *(unsigned int **)(v35 + 8);
    *(_QWORD *)(v35 + 8) = 0;
    if (v8)
      CRYPTO_BUFFER_free(v8);
    MEMORY[0x20BD0ADEC](v7, 0xA1C40BD48D6D6);
  }
  v9 = v36;
  if (v36)
  {
    v10 = *v36;
    if (*v36)
    {
      for (i = atomic_load((unsigned int *)v10); i != -1; i = v12)
      {
        if (!i)
LABEL_49:
          abort();
        v12 = __ldaxr((unsigned int *)v10);
        if (v12 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v10))
          {
            if (i == 1)
            {
              v13 = *(_QWORD *)(v10 + 16);
              if (v13)
              {
                v14 = *(void (**)(uint64_t))(v13 + 160);
                if (v14)
                {
                  v14(v10);
                  *(_QWORD *)(v10 + 8) = 0;
                  *(_DWORD *)(v10 + 4) = 0;
                }
              }
              v16 = *(_QWORD *)(v10 - 8);
              v15 = (void *)(v10 - 8);
              v17 = v16 + 8;
              if (v16 != -8)
                bzero(v15, v17);
              free(v15);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    MEMORY[0x20BD0ADEC](v9, 0x20C4093837F09);
  }
  v18 = v37;
  v37 = 0;
  if (v18)
  {
    v19 = *(unsigned int **)(v18 + 8);
    *(_QWORD *)(v18 + 8) = 0;
    if (v19)
      CRYPTO_BUFFER_free(v19);
    MEMORY[0x20BD0ADEC](v18, 0xA1C40BD48D6D6);
  }
  v4 = v38;
  v38 = 0;
  if (v4)
  {
LABEL_33:
    v27 = *v4;
    if (*v4)
    {
      for (j = atomic_load((unsigned int *)v27); j != -1; j = v29)
      {
        if (!j)
          goto LABEL_49;
        v29 = __ldaxr((unsigned int *)v27);
        if (v29 == j)
        {
          if (!__stlxr(j - 1, (unsigned int *)v27))
          {
            if (j == 1)
            {
              v30 = *(_QWORD *)(v27 + 16);
              if (v30)
              {
                v31 = *(void (**)(uint64_t))(v30 + 160);
                if (v31)
                {
                  v31(v27);
                  *(_QWORD *)(v27 + 8) = 0;
                  *(_DWORD *)(v27 + 4) = 0;
                }
              }
              v33 = *(_QWORD *)(v27 - 8);
              v32 = (void *)(v27 - 8);
              v34 = v33 + 8;
              if (v33 != -8)
                bzero(v32, v34);
              free(v32);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    MEMORY[0x20BD0ADEC](v4, 0x20C4093837F09);
  }
}

void rtc::BoringSSLIdentity::CreateWithExpiration(__int128 *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  __int128 *v9;
  size_t v10;
  size_t v11;
  __int128 *v12;
  time_t v14;
  __int128 v15;
  unint64_t v16;
  void *__p[2];
  unint64_t v18;
  time_t v19;
  time_t v20;
  uint64_t v21;
  int v22;

  v21 = *a3;
  v22 = *((_DWORD *)a3 + 2);
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
    abort();
  if (__len > 0x16)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v9 = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&v15 + 1) = __len;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&v15 = v9;
  }
  else
  {
    HIBYTE(v16) = __len;
    v9 = &v15;
  }
  v12 = (__int128 *)((char *)v9 + __len);
  if (v9 <= __src && v12 > __src)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (__len)
    memmove(v9, __src, __len);
  *(_BYTE *)v12 = 0;
  *(_OWORD *)__p = v15;
  v18 = v16;
  v14 = time(0);
  v19 = v14 - 86400;
  v20 = v14 + a4;
  if (a4 >= -86400)
  {
    rtc::BoringSSLIdentity::CreateInternal((uint64_t)__p, a5);
    if (SHIBYTE(v18) < 0)
LABEL_18:
      operator delete(__p[0]);
  }
  else
  {
    *a5 = 0;
    if (SHIBYTE(v18) < 0)
      goto LABEL_18;
  }
}

void rtc::BoringSSLIdentity::CreateFromPEMStrings(void *a1@<X0>, int a2@<W1>, void *a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int i;
  unsigned int v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  size_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int j;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(uint64_t);
  void *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;

  rtc::BoringSSLCertificate::FromPEMString(a3, a4, &v50);
  v8 = v50;
  if (!v50)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_identity.cc");
    *a5 = 0;
    return;
  }
  rtc::OpenSSLKeyPair::FromPrivateKeyPEMString(a1, a2, &v49);
  v9 = v49;
  if (!v49)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/boringssl_identity.cc");
    *a5 = 0;
    v31 = v50;
    if (!v50)
      return;
LABEL_48:
    v46 = *(unsigned int **)(v31 + 8);
    *(_QWORD *)(v31 + 8) = 0;
    if (v46)
      CRYPTO_BUFFER_free(v46);
    JUMPOUT(0x20BD0ADECLL);
  }
  v10 = (_QWORD *)operator new();
  v48 = v9;
  v49 = 0;
  v50 = 0;
  v47 = v8;
  *a5 = rtc::BoringSSLIdentity::BoringSSLIdentity(v10, (uint64_t *)&v48, &v47);
  v11 = v47;
  if (v47)
  {
    v12 = *(unsigned int **)(v47 + 8);
    *(_QWORD *)(v47 + 8) = 0;
    if (v12)
      CRYPTO_BUFFER_free(v12);
    MEMORY[0x20BD0ADEC](v11, 0xA1C40BD48D6D6);
  }
  v13 = v48;
  if (v48)
  {
    v14 = *v48;
    if (*v48)
    {
      for (i = atomic_load((unsigned int *)v14); i != -1; i = v16)
      {
        if (!i)
LABEL_51:
          abort();
        v16 = __ldaxr((unsigned int *)v14);
        if (v16 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v14))
          {
            if (i == 1)
            {
              v17 = *(_QWORD *)(v14 + 16);
              if (v17)
              {
                v18 = *(void (**)(uint64_t))(v17 + 160);
                if (v18)
                {
                  v18(v14);
                  *(_QWORD *)(v14 + 8) = 0;
                  *(_DWORD *)(v14 + 4) = 0;
                }
              }
              v20 = *(_QWORD *)(v14 - 8);
              v19 = (void *)(v14 - 8);
              v21 = v20 + 8;
              if (v20 != -8)
                bzero(v19, v21);
              free(v19);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    MEMORY[0x20BD0ADEC](v13, 0x20C4093837F09);
    v22 = v49;
    v49 = 0;
    if (v22)
    {
      v23 = *v22;
      if (*v22)
      {
        for (j = atomic_load((unsigned int *)v23); j != -1; j = v25)
        {
          if (!j)
            goto LABEL_51;
          v25 = __ldaxr((unsigned int *)v23);
          if (v25 == j)
          {
            if (!__stlxr(j - 1, (unsigned int *)v23))
            {
              if (j == 1)
              {
                v26 = *(_QWORD *)(v23 + 16);
                if (v26)
                {
                  v27 = *(void (**)(uint64_t))(v26 + 160);
                  if (v27)
                  {
                    v27(v23);
                    *(_QWORD *)(v23 + 8) = 0;
                    *(_DWORD *)(v23 + 4) = 0;
                  }
                }
                v29 = *(_QWORD *)(v23 - 8);
                v28 = (void *)(v23 - 8);
                v30 = v29 + 8;
                if (v29 != -8)
                  bzero(v28, v30);
                free(v28);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      MEMORY[0x20BD0ADEC](v22, 0x20C4093837F09);
    }
  }
  v31 = v50;
  if (v50)
    goto LABEL_48;
}

uint64_t rtc::BoringSSLIdentity::certificate(uint64_t this)
{
  uint64_t v1;

  v1 = **(_QWORD **)(this + 16);
  if (*(_QWORD *)(*(_QWORD *)(this + 16) + 8) != v1)
    return *(_QWORD *)v1;
  __break(1u);
  return this;
}

uint64_t rtc::BoringSSLIdentity::cert_chain(rtc::BoringSSLIdentity *this)
{
  return *((_QWORD *)this + 2);
}

_QWORD *rtc::BoringSSLIdentity::CloneInternal@<X0>(rtc::BoringSSLIdentity *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;

  v4 = (_QWORD *)operator new();
  v5 = (unsigned int **)*((_QWORD *)this + 1);
  v6 = *v5;
  v7 = atomic_load(*v5);
  if (v7 != -1)
  {
    do
    {
      v8 = __ldaxr(v6);
      if (v8 == v7)
      {
        if (!__stlxr(v7 + 1, v6))
          break;
      }
      else
      {
        __clrex();
      }
      v7 = v8;
    }
    while (v8 != -1);
  }
  v9 = (_QWORD *)operator new();
  *v9 = *v5;
  result = rtc::SSLCertChain::Clone(*((rtc::SSLCertChain **)this + 2), &v11);
  *v4 = &off_24C0B0338;
  v4[1] = v9;
  v4[2] = v11;
  *a2 = v4;
  return result;
}

BOOL rtc::BoringSSLIdentity::ConfigureIdentity(rtc::BoringSSLIdentity *this, ssl_ctx_st *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  unint64_t i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char buf[200];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v3 = **((_QWORD **)this + 2);
  if (*(_QWORD *)(*((_QWORD *)this + 2) + 8) == v3)
    goto LABEL_41;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  do
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v3 + 8 * v5) + 8);
    if (v7 >= v8)
    {
      v10 = (v7 - v6) >> 3;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_42;
      if ((v8 - v6) >> 2 > v11)
        v11 = (v8 - v6) >> 2;
      if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11)
        goto LABEL_41;
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v12 = 8 * v11;
      v13 = operator new(8 * v11);
      v2 = (unint64_t)&v13[8 * v10];
      *(_QWORD *)v2 = v9;
      v14 = (char *)(v2 + 8);
      if (v7 == v6)
        goto LABEL_19;
      v15 = v7 - v6 - 8;
      if (v15 >= 0x168)
      {
        v18 = (v7 - 8 - v6) & 0xFFFFFFFFFFFFFFF8;
        if (&v13[v7 - v6 - 8 - v18] > &v13[v7 - v6 - 8])
        {
          v16 = v7;
        }
        else if (&v7[-v18 - 8] > v7 - 8)
        {
          v16 = v7;
        }
        else if ((unint64_t)(v6 - v13) >= 0x20)
        {
          v19 = (v15 >> 3) + 1;
          v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
          v16 = &v7[-v20];
          v2 -= v20;
          v21 = &v13[8 * v10 - 16];
          v22 = v7 - 16;
          v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v24 = *(_OWORD *)v22;
            *(v21 - 1) = *((_OWORD *)v22 - 1);
            *v21 = v24;
            v21 -= 2;
            v22 -= 32;
            v23 -= 4;
          }
          while (v23);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_19;
        }
        else
        {
          v16 = v7;
        }
      }
      else
      {
        v16 = v7;
      }
      do
      {
        v17 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)(v2 - 8) = v17;
        v2 -= 8;
      }
      while (v16 != v6);
LABEL_19:
      v8 = &v13[v12];
      if (v6)
        operator delete(v6);
      v6 = (char *)v2;
      v7 = v14;
      goto LABEL_4;
    }
    if (!v7)
      goto LABEL_41;
    *(_QWORD *)v7 = v9;
    v7 += 8;
LABEL_4:
    ++v5;
    v3 = **((_QWORD **)this + 2);
  }
  while (v5 < (*(_QWORD *)(*((_QWORD *)this + 2) + 8) - v3) >> 3);
  if (v7 == v6)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    abort();
  }
  v25 = bssl::cert_set_chain_and_key((uint64_t)a2->tlsext_servername_arg, (unsigned int **)v6, (v7 - v6) >> 3, **((evp_pkey_st ***)this + 1), 0);
  if (v25 != 1)
  {
    for (i = ERR_get_error(); (_DWORD)i; i = ERR_get_error())
    {
      ERR_error_string_n(i, buf, 0xC8uLL);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        v2 = v2 & 0xFFFFFFFF00000000 | 0x783;
        rtc::webrtc_logging_impl::Log("\r\v\t\t\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/openssl_utility.cc");
      }
    }
  }
  if (v6)
    operator delete(v6);
  return v25 == 1;
}

void rtc::BoringSSLIdentity::PrivateKeyToPEMString(EVP_PKEY ***this@<X0>, _BYTE *a2@<X8>)
{
  rtc::OpenSSLKeyPair::PrivateKeyToPEMString(this[1], a2);
}

void rtc::BoringSSLIdentity::PublicKeyToPEMString(char ***this@<X0>, char *a2@<X8>)
{
  rtc::OpenSSLKeyPair::PublicKeyToPEMString(this[1], a2);
}

void webrtc::BroadcastResourceListener::~BroadcastResourceListener(webrtc::BroadcastResourceListener *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0B0380;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = (void *)*((_QWORD *)this + 11);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v2;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  v7 = *((_QWORD *)this + 1);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0B0380;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = (void *)*((_QWORD *)this + 11);
    if (v3 != v2)
    {
      do
      {
        v6 = *(_QWORD *)(v3 - 8);
        v3 -= 8;
        v5 = v6;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v2;
    operator delete(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  v7 = *((_QWORD *)this + 1);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::BroadcastResourceListener::CreateAdapterResource@<X0>(webrtc::BroadcastResourceListener *this@<X0>, _QWORD *a2@<X8>)
{
  pthread_mutex_t *v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string *v7;
  _DWORD *v8;
  std::string::size_type v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  std::string *p_src;
  std::string *v15;
  std::string *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  pthread_mutex_t *v52;
  std::string v53;
  std::string __src;
  pthread_mutexattr_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 1) + 32))(&v53);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = 22;
  else
    v5 = (v53.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  else
    size = v53.__r_.__value_.__l.__size_;
  if (v5 - size >= 7)
  {
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v53;
    else
      v7 = (std::string *)v53.__r_.__value_.__r.__words[0];
    v8 = (_DWORD *)((char *)v7 + size);
    if ((char *)v7 + size <= "Adapter" && (char *)v7->__r_.__value_.__r.__words + size + 7 > "Adapter")
      goto LABEL_72;
    *(_DWORD *)((char *)v8 + 3) = 1919251568;
    *v8 = 1885430849;
    v10 = size + 7;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      v53.__r_.__value_.__l.__size_ = size + 7;
    else
      *((_BYTE *)&v53.__r_.__value_.__s + 23) = v10 & 0x7F;
    v7->__r_.__value_.__s.__data_[v10] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v53, v5, size - v5 + 7, size, size, 0, 7uLL, "Adapter");
  }
  __src = v53;
  memset(&v53, 0, sizeof(v53));
  v11 = (_QWORD *)operator new();
  v12 = v11;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = __src.__r_.__value_.__l.__size_;
    if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_72;
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (__src.__r_.__value_.__l.__size_)
    {
      if (!__src.__r_.__value_.__r.__words[0])
        goto LABEL_72;
    }
    *v11 = &unk_24C0B03F0;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_73:
      abort();
  }
  else
  {
    v13 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    *v11 = &unk_24C0B03F0;
    p_src = &__src;
  }
  if (v13 > 0x16)
  {
    v17 = (v13 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    v15 = (std::string *)operator new(v17 + 1);
    v12[2] = v13;
    v12[3] = v18 | 0x8000000000000000;
    v12[1] = v15;
    v16 = (std::string *)((char *)v15 + v13);
    if (v15 > p_src)
      goto LABEL_33;
  }
  else
  {
    v15 = (std::string *)(v11 + 1);
    *((_BYTE *)v12 + 31) = v13;
    v16 = (std::string *)((char *)v12 + v13 + 8);
    if (v12 + 1 > (_QWORD *)p_src)
      goto LABEL_33;
  }
  if (v16 > p_src)
    goto LABEL_72;
LABEL_33:
  if (v13)
    memmove(v15, p_src, v13);
  v16->__r_.__value_.__s.__data_[0] = 0;
  pthread_mutexattr_init(&v55);
  pthread_mutexattr_setpolicy_np(&v55, 3);
  pthread_mutex_init((pthread_mutex_t *)(v12 + 4), &v55);
  pthread_mutexattr_destroy(&v55);
  v12[12] = 0;
  *v12 = off_24C0B03A8;
  *((_DWORD *)v12 + 26) = 0;
  v19 = (unsigned int *)(v12 + 13);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      v22 = (_QWORD *)*((_QWORD *)this + 12);
      v21 = *((_QWORD *)this + 13);
      if ((unint64_t)v22 < v21)
        goto LABEL_40;
      goto LABEL_44;
    }
  }
  else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v53.__r_.__value_.__l.__data_);
  v22 = (_QWORD *)*((_QWORD *)this + 12);
  v21 = *((_QWORD *)this + 13);
  if ((unint64_t)v22 < v21)
  {
LABEL_40:
    if (v22)
    {
      *v22 = v12;
      v23 = v22 + 1;
      (*(void (**)(_QWORD *))*v12)(v12);
      goto LABEL_71;
    }
LABEL_72:
    __break(1u);
  }
LABEL_44:
  v24 = *((_QWORD *)this + 11);
  v25 = (char *)v22 - v24;
  v26 = ((uint64_t)v22 - v24) >> 3;
  if ((unint64_t)(v26 + 1) >> 61)
    goto LABEL_73;
  v27 = v21 - v24;
  v28 = v27 >> 2;
  if (v27 >> 2 <= (unint64_t)(v26 + 1))
    v28 = v26 + 1;
  v38 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8;
  v29 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v38)
    v29 = v28;
  if (!v29)
    goto LABEL_72;
  v52 = v4;
  if (v29 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v30 = a2;
  v31 = 8 * v29;
  v32 = (char *)operator new(8 * v29);
  v33 = &v32[8 * v26];
  v34 = &v32[v31];
  *(_QWORD *)v33 = v12;
  v23 = v33 + 8;
  (*(void (**)(_QWORD *))*v12)(v12);
  v35 = (char *)*((_QWORD *)this + 11);
  v36 = (char *)*((_QWORD *)this + 12);
  if (v36 == v35)
  {
    *((_QWORD *)this + 11) = v33;
    *((_QWORD *)this + 12) = v23;
    *((_QWORD *)this + 13) = v34;
  }
  else
  {
    v37 = v36 - v35 - 8;
    if (v37 < 0x78)
      goto LABEL_77;
    v38 = &v36[-(v37 & 0xFFFFFFFFFFFFFFF8) - 8] >= v33 || &v25[(_QWORD)v32 - (v37 & 0xFFFFFFFFFFFFFFF8) - 8] >= v36;
    if (!v38)
      goto LABEL_77;
    v39 = (v37 >> 3) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v41 = &v36[-v40];
    v33 -= v40;
    v42 = &v32[8 * v26 - 16];
    v43 = v36 - 16;
    v44 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *((_OWORD *)v43 - 1);
      v45 = *(_OWORD *)v43;
      *((_OWORD *)v43 - 1) = 0uLL;
      *(_OWORD *)v43 = 0uLL;
      *((_OWORD *)v42 - 1) = v46;
      *(_OWORD *)v42 = v45;
      v42 -= 32;
      v43 -= 32;
      v44 -= 4;
    }
    while (v44);
    v36 = v41;
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_77:
      do
      {
        v47 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *(_QWORD *)v36 = 0;
        *((_QWORD *)v33 - 1) = v47;
        v33 -= 8;
      }
      while (v36 != v35);
    }
    v36 = (char *)*((_QWORD *)this + 11);
    v48 = (char *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 11) = v33;
    *((_QWORD *)this + 12) = v23;
    *((_QWORD *)this + 13) = v34;
    if (v48 != v36)
    {
      a2 = v30;
      v4 = v52;
      do
      {
        v50 = *((_QWORD *)v48 - 1);
        v48 -= 8;
        v49 = v50;
        if (v50)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
      }
      while (v48 != v36);
      goto LABEL_69;
    }
  }
  a2 = v30;
  v4 = v52;
LABEL_69:
  if (v36)
    operator delete(v36);
LABEL_71:
  *((_QWORD *)this + 12) = v23;
  *a2 = v12;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::BroadcastResourceListener::OnResourceUsageStateMeasured(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  uint64_t v10;
  uint64_t v12;

  v5 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  v6 = *(_QWORD **)(a1 + 88);
  v7 = *(_QWORD **)(a1 + 96);
  while (v6 != v7)
  {
    v8 = *v6;
    v9 = (pthread_mutex_t *)(*v6 + 32);
    pthread_mutex_lock(v9);
    v10 = *(_QWORD *)(v8 + 96);
    if (v10)
    {
      v12 = v8;
      (**(void (***)(uint64_t))v8)(v8);
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v12, a3);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    pthread_mutex_unlock(v9);
    ++v6;
  }
  return pthread_mutex_unlock(v5);
}

uint64_t rtc::RefCountedObject<webrtc::BroadcastResourceListener::AdapterResource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 104);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::BroadcastResourceListener::AdapterResource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 26;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::BroadcastResourceListener::AdapterResource>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B03F0;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::BroadcastResourceListener::AdapterResource>::~RefCountedObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0B03F0;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::BroadcastResourceListener::AdapterResource::Name(webrtc::BroadcastResourceListener::AdapterResource *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

uint64_t webrtc::BroadcastResourceListener::AdapterResource::SetResourceListener(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 32);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  *(_QWORD *)(a1 + 96) = a2;
  return pthread_mutex_unlock(v4);
}

BOOL rtc::RefCountedObject<webrtc::BroadcastResourceListener::AdapterResource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 104));
  return v1 == 1;
}

double webrtc::BufferLevelFilter::Reset(webrtc::BufferLevelFilter *this)
{
  double result;

  *(_QWORD *)&result = 253;
  *((_QWORD *)this + 1) = 253;
  return result;
}

uint64_t webrtc::BufferLevelFilter::Update(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;

  v3 = (256 - *(int *)(this + 8)) * a2
     - ((uint64_t)a3 << 8)
     + ((*(int *)(this + 12) * (uint64_t)*(int *)(this + 8)) >> 8);
  v4 = v3 & ~(v3 >> 63);
  if (v4 >= 0x7FFFFFFF)
    LODWORD(v4) = 0x7FFFFFFF;
  *(_DWORD *)(this + 12) = v4;
  return this;
}

void webrtc::BufferLevelFilter::SetFilteredBufferLevel(webrtc::BufferLevelFilter *this, int a2)
{
  __asm { BR              X11 }
}

uint64_t sub_20853D54C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 12) = a2 << 8;
  return result;
}

uint64_t sub_20853D55C(uint64_t result)
{
  *(_DWORD *)(result + 12) = 0x7FFFFFFF;
  return result;
}

uint64_t webrtc::BufferLevelFilter::SetTargetBufferLevel(uint64_t this, int a2)
{
  if (a2 > 20)
  {
    if (a2 > 0x3C)
    {
      if (a2 > 0x8C)
        *(_DWORD *)(this + 8) = 254;
      else
        *(_DWORD *)(this + 8) = 253;
    }
    else
    {
      *(_DWORD *)(this + 8) = 252;
    }
  }
  else
  {
    *(_DWORD *)(this + 8) = 251;
  }
  return this;
}

void webrtc::BufferLevelFilter::~BufferLevelFilter(webrtc::BufferLevelFilter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::BufferLevelFilter::filtered_current_level(webrtc::BufferLevelFilter *this)
{
  return (unint64_t)(*((int *)this + 3) + 128) >> 8;
}

void rtc::BufferQueue::~BufferQueue(rtc::BufferQueue *this)
{
  uint64_t v2;
  unint64_t v3;
  char **v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  void **v13;
  void **v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;

  v2 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v2)
  {
    v3 = *((_QWORD *)this + 6);
    v4 = (char **)(v2 + 8 * (v3 >> 9));
    v5 = *v4;
    v6 = (uint64_t *)&(*v4)[8 * (v3 & 0x1FF)];
    v7 = *(_QWORD *)(v2 + (((*((_QWORD *)this + 7) + v3) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)this + 7) + v3) & 0x1FF);
    while (v6 != (uint64_t *)v7)
    {
      v8 = *v6;
      if (*v6)
      {
        v9 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v8 + 16) = 0;
        if (v9)
          MEMORY[0x20BD0ADD4](v9, 0x1000C8077774924);
        MEMORY[0x20BD0ADEC](v8, 0x1010C40A79CA2DELL);
        v5 = *v4;
      }
      if ((char *)++v6 - v5 == 4096)
      {
        v10 = v4[1];
        ++v4;
        v5 = v10;
        v6 = (uint64_t *)v10;
      }
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 8);
  v12 = (uint64_t *)*((_QWORD *)this + 9);
  if (v11 == v12)
  {
    if (!v11)
      goto LABEL_13;
    goto LABEL_12;
  }
  do
  {
    v22 = *v11;
    if (*v11)
    {
      v23 = *(_QWORD *)(v22 + 16);
      *(_QWORD *)(v22 + 16) = 0;
      if (v23)
        MEMORY[0x20BD0ADD4](v23, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v22, 0x1010C40A79CA2DELL);
    }
    ++v11;
  }
  while (v11 != v12);
  v11 = (uint64_t *)*((_QWORD *)this + 8);
  if (v11)
  {
LABEL_12:
    *((_QWORD *)this + 9) = v11;
    operator delete(v11);
  }
LABEL_13:
  v13 = (void **)*((_QWORD *)this + 3);
  v14 = (void **)*((_QWORD *)this + 4);
  v15 = (char *)v14 - (char *)v13;
  if (v14 == v13)
  {
    v16 = (_QWORD *)((char *)this + 56);
  }
  else
  {
    v16 = (_QWORD *)((char *)this + 56);
    v17 = *((_QWORD *)this + 6);
    v18 = &v13[v17 >> 9];
    v19 = (uint64_t)*v18;
    v20 = (uint64_t)*v18 + 8 * (v17 & 0x1FF);
    while ((void *)v20 != *(char **)((char *)v13 + (((*((_QWORD *)this + 7) + v17) >> 6) & 0x3FFFFFFFFFFFFF8))
                         + 8 * ((*((_QWORD *)this + 7) + v17) & 0x1FF))
    {
      if (!v20)
      {
        __break(1u);
        return;
      }
      v20 += 8;
      if (v20 - v19 == 4096)
      {
        v21 = (uint64_t)v18[1];
        ++v18;
        v19 = v21;
        v20 = v21;
      }
    }
  }
  *v16 = 0;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v14 = (void **)*((_QWORD *)this + 4);
      v13 = (void **)(*((_QWORD *)this + 3) + 8);
      *((_QWORD *)this + 3) = v13;
      v15 = (char *)v14 - (char *)v13;
    }
    while ((unint64_t)((char *)v14 - (char *)v13) > 0x10);
  }
  v24 = v15 >> 3;
  if (v24 == 1)
  {
    v25 = 256;
  }
  else
  {
    if (v24 != 2)
      goto LABEL_34;
    v25 = 512;
  }
  *((_QWORD *)this + 6) = v25;
LABEL_34:
  if (v13 != v14)
  {
    do
    {
      v26 = *v13++;
      operator delete(v26);
    }
    while (v13 != v14);
    v28 = *((_QWORD *)this + 3);
    v27 = *((_QWORD *)this + 4);
    if (v27 != v28)
      *((_QWORD *)this + 4) = v27 + ((v28 - v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v29 = (void *)*((_QWORD *)this + 2);
  if (v29)
    operator delete(v29);
}

void rtc::BufferQueue::Clear(rtc::BufferQueue *this)
{
  void **v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  if (*((_QWORD *)this + 7))
  {
    v2 = (void **)*((_QWORD *)this + 3);
    v3 = *((_QWORD *)this + 6);
    do
    {
      v4 = v3 >> 9;
      v5 = v2[v3 >> 9];
      v6 = v3 & 0x1FF;
      v8 = (char *)*((_QWORD *)this + 9);
      v7 = *((_QWORD *)this + 10);
      if ((unint64_t)v8 >= v7)
      {
        v10 = (char *)*((_QWORD *)this + 8);
        v11 = (v8 - v10) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          goto LABEL_29;
        v13 = v7 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
        v15 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v14)
          v15 = v12;
        if (!v15)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          abort();
        }
        if (v15 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v16 = 8 * v15;
        v17 = (char *)operator new(8 * v15);
        v18 = &v17[8 * v11];
        *(_QWORD *)v18 = v5[v6];
        v9 = v18 + 8;
        if (v8 != v10)
        {
          v19 = v8 - v10 - 8;
          if (v19 < 0x58)
            goto LABEL_33;
          if ((unint64_t)(v10 - v17) < 0x20)
            goto LABEL_33;
          v20 = (v19 >> 3) + 1;
          v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
          v22 = &v8[-v21];
          v18 -= v21;
          v23 = &v17[8 * v11 - 16];
          v24 = (__int128 *)(v8 - 16);
          v25 = v20 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v26 = *v24;
            *((_OWORD *)v23 - 1) = *(v24 - 1);
            *(_OWORD *)v23 = v26;
            v23 -= 32;
            v24 -= 2;
            v25 -= 4;
          }
          while (v25);
          v8 = v22;
          if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_33:
            do
            {
              v27 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v18 - 1) = v27;
              v18 -= 8;
            }
            while (v8 != v10);
          }
          v8 = v10;
        }
        *((_QWORD *)this + 8) = v18;
        *((_QWORD *)this + 9) = v9;
        *((_QWORD *)this + 10) = &v17[v16];
        if (v8)
        {
          operator delete(v8);
          v3 = *((_QWORD *)this + 6);
          v4 = v3 >> 9;
        }
      }
      else
      {
        if (!v8)
          goto LABEL_28;
        *(_QWORD *)v8 = v5[v6];
        v9 = v8 + 8;
      }
      *((_QWORD *)this + 9) = v9;
      v2 = (void **)*((_QWORD *)this + 3);
      if (!v2[v4])
        goto LABEL_28;
      v28 = *((_QWORD *)this + 7) - 1;
      *((_QWORD *)this + 6) = ++v3;
      *((_QWORD *)this + 7) = v28;
      if (v3 >= 0x400)
      {
        operator delete(*v2);
        v2 = (void **)(*((_QWORD *)this + 3) + 8);
        *((_QWORD *)this + 3) = v2;
        v28 = *((_QWORD *)this + 7);
        v3 = *((_QWORD *)this + 6) - 512;
        *((_QWORD *)this + 6) = v3;
      }
    }
    while (v28);
  }
}

BOOL rtc::BufferQueue::ReadFront(rtc::BufferQueue *this, void *__dst, size_t a3, unint64_t *a4)
{
  uint64_t v4;
  void **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v4 = *((_QWORD *)this + 7);
  if (v4)
  {
    v9 = (void **)*((_QWORD *)this + 3);
    v10 = (*(_QWORD **)((char *)v9 + ((*((_QWORD *)this + 6) >> 6) & 0x3FFFFFFFFFFFFF8)))[*((_QWORD *)this + 6) & 0x1FFLL];
    v11 = *((_QWORD *)this + 6) + 1;
    *((_QWORD *)this + 6) = v11;
    *((_QWORD *)this + 7) = v4 - 1;
    if (v11 >= 0x400)
    {
      operator delete(*v9);
      *((_QWORD *)this + 3) += 8;
      *((_QWORD *)this + 6) -= 512;
    }
    if (*(_QWORD *)v10 < a3)
      a3 = *(_QWORD *)v10;
    memcpy(__dst, *(const void **)(v10 + 16), a3);
    if (a4)
      *a4 = a3;
    v13 = (char *)*((_QWORD *)this + 9);
    v12 = *((_QWORD *)this + 10);
    if ((unint64_t)v13 >= v12)
    {
      v15 = (char *)*((_QWORD *)this + 8);
      v16 = (v13 - v15) >> 3;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 61)
        goto LABEL_31;
      v18 = v12 - (_QWORD)v15;
      if (v18 >> 2 > v17)
        v17 = v18 >> 2;
      v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8;
      v20 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v19)
        v20 = v17;
      if (v20)
      {
        if (v20 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v21 = 8 * v20;
        v22 = (char *)operator new(8 * v20);
        v23 = &v22[v21];
        v24 = &v22[8 * v16];
        *(_QWORD *)v24 = v10;
        v14 = v24 + 8;
        if (v13 != v15)
        {
          v25 = v13 - v15 - 8;
          if (v25 < 0x58)
            goto LABEL_35;
          if ((unint64_t)(v15 - v22) < 0x20)
            goto LABEL_35;
          v26 = (v25 >> 3) + 1;
          v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
          v28 = &v13[-v27];
          v24 -= v27;
          v29 = &v22[8 * v16 - 16];
          v30 = (__int128 *)(v13 - 16);
          v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v32 = *v30;
            *((_OWORD *)v29 - 1) = *(v30 - 1);
            *(_OWORD *)v29 = v32;
            v29 -= 32;
            v30 -= 2;
            v31 -= 4;
          }
          while (v31);
          v13 = v28;
          if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              v33 = *((_QWORD *)v13 - 1);
              v13 -= 8;
              *((_QWORD *)v24 - 1) = v33;
              v24 -= 8;
            }
            while (v13 != v15);
          }
          v13 = v15;
        }
        *((_QWORD *)this + 8) = v24;
        *((_QWORD *)this + 9) = v14;
        *((_QWORD *)this + 10) = v23;
        if (v13)
          operator delete(v13);
        goto LABEL_28;
      }
    }
    else if (v13)
    {
      *(_QWORD *)v13 = v10;
      v14 = v13 + 8;
LABEL_28:
      *((_QWORD *)this + 9) = v14;
      return v4 != 0;
    }
    __break(1u);
LABEL_31:
    abort();
  }
  return v4 != 0;
}

BOOL rtc::BufferQueue::WriteBack(rtc::BufferQueue *this, const void *__src, size_t __n, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  size_t *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  void *v16;
  size_t v17;
  size_t *v18;
  const void *v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  size_t *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  BOOL v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __int128 *v82;
  char *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  unint64_t v95;
  uint64_t v96;
  __int128 *v97;
  _OWORD *v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v108;
  size_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  int64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  _OWORD *v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  __int128 *v136;
  _OWORD *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  size_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v4 = *((_QWORD *)this + 7);
  v5 = *(_QWORD *)this;
  if (v4 != *(_QWORD *)this)
  {
    v10 = *((_QWORD *)this + 9);
    if (*((_QWORD *)this + 8) == v10)
    {
      v11 = (size_t *)operator new();
      if (__n <= *((_QWORD *)this + 1))
        v12 = *((_QWORD *)this + 1);
      else
        v12 = __n;
      *v11 = __n;
      v11[1] = v12;
      if (v12)
        v12 = operator new[]();
      v11[2] = v12;
      *v11 = 0;
      if (!__n)
      {
LABEL_21:
        if (a4)
          *a4 = __n;
        v21 = (char *)*((_QWORD *)this + 3);
        v22 = (char *)*((_QWORD *)this + 4);
        v23 = v22 - v21;
        if (v22 == v21)
          v24 = 0;
        else
          v24 = ((v22 - v21) << 6) - 1;
        v26 = *((_QWORD *)this + 6);
        v25 = *((_QWORD *)this + 7);
        if (v24 != v25 + v26)
        {
LABEL_106:
          if (v22 != v21)
          {
            v105 = *((_QWORD *)this + 6) + v25;
            v106 = *(_QWORD *)&v21[(v105 >> 6) & 0x3FFFFFFFFFFFFF8];
            if (v106)
            {
              *(_QWORD *)(v106 + 8 * (v105 & 0x1FF)) = v11;
              *((_QWORD *)this + 7) = v25 + 1;
              return v4 != v5;
            }
          }
          goto LABEL_137;
        }
        if (v26 >= 0x200)
        {
          v27 = v11;
          *((_QWORD *)this + 6) = v26 - 512;
          v28 = v21 + 8;
          v29 = *(_QWORD *)v21;
          *((_QWORD *)this + 3) = v21 + 8;
          if (v22 != *((char **)this + 5))
            goto LABEL_29;
          v43 = (char *)*((_QWORD *)this + 2);
          if (v28 > v43)
          {
            v44 = v5;
            v45 = (v28 - v43) >> 3;
            if (v45 >= -1)
              v46 = v45 + 1;
            else
              v46 = v45 + 2;
            v47 = v46 >> 1;
            v48 = -v47;
            v49 = &v28[-8 * v47];
            v50 = v22 - v28;
            if (v22 != v28)
            {
              memmove(&v28[-8 * v47], v28, v22 - v28);
              v22 = (char *)*((_QWORD *)this + 3);
            }
            v51 = &v22[8 * v48];
            v22 = &v49[v50];
            *((_QWORD *)this + 3) = v51;
            *((_QWORD *)this + 4) = &v49[v50];
            v5 = v44;
            goto LABEL_30;
          }
          v144 = v5;
          v53 = (v22 - v43) >> 2;
          if (v22 == v43)
            v53 = 1;
          if (!(v53 >> 61))
          {
            v54 = v53 >> 2;
            v55 = 8 * v53;
            v56 = (char *)operator new(8 * v53);
            v57 = &v56[8 * v54];
            v59 = v22 - v28;
            v58 = v22 == v28;
            v22 = v57;
            if (v58)
              goto LABEL_122;
            v22 = &v57[v59 & 0xFFFFFFFFFFFFFFF8];
            v60 = v59 - 8;
            if ((unint64_t)(v59 - 8) >= 0x38)
            {
              v116 = &v56[8 * v54];
              v61 = v116;
              if ((unint64_t)(v116 - v28) >= 0x20)
              {
                v117 = (v60 >> 3) + 1;
                v118 = 8 * (v117 & 0x3FFFFFFFFFFFFFFCLL);
                v61 = &v57[v118];
                v28 += v118;
                v119 = (__int128 *)(v21 + 24);
                v120 = v116 + 16;
                v121 = v117 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v122 = *v119;
                  *(v120 - 1) = *(v119 - 1);
                  *v120 = v122;
                  v119 += 2;
                  v120 += 2;
                  v121 -= 4;
                }
                while (v121);
                if (v117 == (v117 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_122:
                  *((_QWORD *)this + 2) = v56;
                  *((_QWORD *)this + 3) = v57;
                  *((_QWORD *)this + 4) = v22;
                  *((_QWORD *)this + 5) = &v56[v55];
                  v5 = v144;
                  if (v43)
                  {
                    operator delete(v43);
                    v22 = (char *)*((_QWORD *)this + 4);
                  }
LABEL_29:
                  if (v22)
                  {
LABEL_30:
                    *(_QWORD *)v22 = v29;
                    v22 = (char *)(*((_QWORD *)this + 4) + 8);
                    *((_QWORD *)this + 4) = v22;
                    v11 = v27;
LABEL_105:
                    v25 = *((_QWORD *)this + 7);
                    v21 = (char *)*((_QWORD *)this + 3);
                    goto LABEL_106;
                  }
LABEL_137:
                  __break(1u);
                  goto LABEL_138;
                }
              }
            }
            else
            {
              v61 = &v56[8 * v54];
            }
            do
            {
              v123 = *(_QWORD *)v28;
              v28 += 8;
              *(_QWORD *)v61 = v123;
              v61 += 8;
            }
            while (v61 != v22);
            goto LABEL_122;
          }
LABEL_138:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        v142 = v4;
        v143 = v5;
        v30 = v23 >> 3;
        v31 = (char *)*((_QWORD *)this + 5);
        v32 = (char *)*((_QWORD *)this + 2);
        if (v23 >> 3 >= (unint64_t)((v31 - v32) >> 3))
        {
          v141 = v11;
          if (v31 == v32)
            v35 = 1;
          else
            v35 = (v31 - v32) >> 2;
          if (v35 >> 61)
            goto LABEL_138;
          v36 = (char *)operator new(8 * v35);
          v37 = &v36[8 * v30];
          v38 = &v36[8 * v35];
          v39 = operator new(0x1000uLL);
          v40 = v39;
          if (v30 == v35)
          {
            v5 = v143;
            if (v23 < 1)
            {
              v62 = v23 >> 2;
              if (v22 == v21)
                v62 = 1;
              if (v62 >> 61)
                goto LABEL_138;
              v63 = 8 * v62;
              v37 = (char *)operator new(8 * v62);
              operator delete(v36);
              v38 = &v37[v63];
              v64 = (char *)*((_QWORD *)this + 3);
              v22 = (char *)*((_QWORD *)this + 4);
              v36 = v37;
              *(_QWORD *)v37 = v40;
              v42 = v37 + 8;
              if (v22 != v64)
                goto LABEL_71;
            }
            else
            {
              v41 = v30 + 2;
              if (v30 >= -1)
                v41 = v30 + 1;
              v37 -= 8 * (v41 >> 1);
              *(_QWORD *)v37 = v39;
              v42 = v37 + 8;
              if (v22 != v21)
              {
                while (1)
                {
LABEL_71:
                  if (v37 == v36)
                  {
                    if (v42 >= v38)
                    {
                      v72 = (v38 - v37) >> 2;
                      if (v38 == v37)
                        v72 = 1;
                      if (v72 >> 61)
                        goto LABEL_138;
                      v73 = (v72 + 3) >> 2;
                      v74 = 8 * v72;
                      v75 = (char *)operator new(8 * v72);
                      v36 = v75;
                      v68 = &v75[8 * v73];
                      v66 = v68;
                      v76 = v42 - v37;
                      if (v42 != v37)
                      {
                        v66 = &v68[v76 & 0xFFFFFFFFFFFFFFF8];
                        v77 = v76 - 8;
                        v78 = &v75[8 * v73];
                        v79 = v37;
                        if (v77 < 0x38)
                          goto LABEL_141;
                        v78 = &v75[8 * v73];
                        v79 = v37;
                        if ((unint64_t)(v78 - v37) < 0x20)
                          goto LABEL_141;
                        v80 = (v77 >> 3) + 1;
                        v81 = 8 * (v80 & 0x3FFFFFFFFFFFFFFCLL);
                        v78 = &v68[v81];
                        v79 = &v37[v81];
                        v82 = (__int128 *)(v37 + 16);
                        v83 = &v75[8 * v73 + 16];
                        v84 = v80 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v85 = *v82;
                          *((_OWORD *)v83 - 1) = *(v82 - 1);
                          *(_OWORD *)v83 = v85;
                          v82 += 2;
                          v83 += 32;
                          v84 -= 4;
                        }
                        while (v84);
                        if (v80 != (v80 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_141:
                          do
                          {
                            v86 = *(_QWORD *)v79;
                            v79 += 8;
                            *(_QWORD *)v78 = v86;
                            v78 += 8;
                          }
                          while (v78 != v66);
                        }
                      }
                      v38 = &v75[v74];
                      operator delete(v37);
                    }
                    else
                    {
                      v70 = (v38 - v42) >> 3;
                      if (v70 >= -1)
                        v71 = v70 + 1;
                      else
                        v71 = v70 + 2;
                      v66 = &v42[8 * (v71 >> 1)];
                      v68 = &v37[8 * (v71 >> 1)];
                      if (v42 == v37)
                      {
                        v36 = v42;
                      }
                      else
                      {
                        memmove(&v37[8 * (v71 >> 1)], v37, v42 - v37);
                        v36 = v37;
                      }
                    }
                  }
                  else
                  {
                    v68 = v37;
                    v66 = v42;
                  }
                  v69 = *((_QWORD *)v22 - 1);
                  v22 -= 8;
                  *((_QWORD *)v68 - 1) = v69;
                  v65 = v68 - 8;
                  v42 = v66;
                  v37 = v65;
                  if (v22 == *((char **)this + 3))
                    goto LABEL_67;
                }
              }
            }
          }
          else
          {
            v5 = v143;
            *(_QWORD *)v37 = v39;
            v42 = v37 + 8;
            if (v22 != v21)
              goto LABEL_71;
          }
          v65 = v37;
          v66 = v42;
LABEL_67:
          v67 = (void *)*((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v36;
          *((_QWORD *)this + 3) = v65;
          v22 = v66;
          *((_QWORD *)this + 4) = v66;
          *((_QWORD *)this + 5) = v38;
          v11 = v141;
          v4 = v142;
          if (v67)
          {
            operator delete(v67);
            v22 = (char *)*((_QWORD *)this + 4);
          }
          goto LABEL_105;
        }
        v33 = operator new(0x1000uLL);
        v34 = v33;
        if (v31 != v22)
        {
          if (v22)
          {
            *(_QWORD *)v22 = v33;
            v22 = (char *)(*((_QWORD *)this + 4) + 8);
            *((_QWORD *)this + 4) = v22;
            v4 = v142;
            v5 = v143;
            goto LABEL_105;
          }
          goto LABEL_137;
        }
        if (v21 == v32)
        {
          v87 = (v31 - v21) >> 2;
          if (v22 == v21)
            v87 = 1;
          if (v87 >> 61)
            goto LABEL_138;
          v88 = (v87 + 3) >> 2;
          v89 = 8 * v87;
          v90 = (char *)operator new(8 * v87);
          v52 = &v90[8 * v88];
          v91 = v52;
          v5 = v143;
          if (v22 != v21)
          {
            v91 = &v52[8 * v30];
            v92 = &v90[8 * v88];
            v93 = v21;
            if ((unint64_t)(v23 - 8) < 0x38)
              goto LABEL_142;
            v94 = &v90[8 * v88];
            v92 = v94;
            v93 = v21;
            if ((unint64_t)(v94 - v21) < 0x20)
              goto LABEL_142;
            v95 = ((unint64_t)(v23 - 8) >> 3) + 1;
            v96 = 8 * (v95 & 0x3FFFFFFFFFFFFFFCLL);
            v92 = &v52[v96];
            v93 = &v21[v96];
            v97 = (__int128 *)(v21 + 16);
            v98 = v94 + 16;
            v99 = v95 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v100 = *v97;
              *(v98 - 1) = *(v97 - 1);
              *v98 = v100;
              v97 += 2;
              v98 += 2;
              v99 -= 4;
            }
            while (v99);
            if (v95 != (v95 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_142:
              do
              {
                v101 = *(_QWORD *)v93;
                v93 += 8;
                *(_QWORD *)v92 = v101;
                v92 += 8;
              }
              while (v92 != v91);
            }
          }
          *((_QWORD *)this + 2) = v90;
          *((_QWORD *)this + 3) = v52;
          *((_QWORD *)this + 4) = v91;
          *((_QWORD *)this + 5) = &v90[v89];
          if (v21)
          {
            operator delete(v21);
            v52 = (char *)*((_QWORD *)this + 3);
          }
        }
        else
        {
          v52 = v21;
          v5 = v143;
        }
        *((_QWORD *)v52 - 1) = v34;
        v102 = (char *)*((_QWORD *)this + 3);
        v103 = (char *)*((_QWORD *)this + 4);
        *((_QWORD *)this + 3) = v102 - 8;
        v104 = *((_QWORD *)v102 - 1);
        *((_QWORD *)this + 3) = v102;
        v4 = v142;
        if (v103 != *((char **)this + 5))
          goto LABEL_103;
        v108 = (char *)*((_QWORD *)this + 2);
        if (v102 > v108)
        {
          v109 = v11;
          v110 = (v102 - v108) >> 3;
          if (v110 >= -1)
            v111 = v110 + 1;
          else
            v111 = v110 + 2;
          v112 = v111 >> 1;
          v113 = -v112;
          v114 = &v102[-8 * v112];
          v115 = v103 - v102;
          if (v103 != v102)
          {
            memmove(&v102[-8 * v112], v102, v103 - v102);
            v102 = (char *)*((_QWORD *)this + 3);
          }
          v103 = &v114[v115];
          *((_QWORD *)this + 3) = &v102[8 * v113];
          *((_QWORD *)this + 4) = &v114[v115];
          v11 = v109;
          goto LABEL_104;
        }
        v124 = (v103 - v108) >> 2;
        if (v103 == v108)
          v124 = 1;
        if (v124 >> 61)
          goto LABEL_138;
        v125 = v124 >> 2;
        v126 = 8 * v124;
        v127 = (char *)operator new(8 * v124);
        v128 = &v127[8 * v125];
        v129 = v103 - v102;
        v58 = v103 == v102;
        v103 = v128;
        if (!v58)
        {
          v103 = &v128[v129 & 0xFFFFFFFFFFFFFFF8];
          v130 = v129 - 8;
          if ((unint64_t)(v129 - 8) < 0x38)
          {
            v131 = &v127[8 * v125];
            do
            {
LABEL_134:
              v140 = *(_QWORD *)v102;
              v102 += 8;
              *(_QWORD *)v131 = v140;
              v131 += 8;
            }
            while (v131 != v103);
            goto LABEL_135;
          }
          v132 = &v127[8 * v125];
          v131 = v132;
          if ((unint64_t)(v132 - v102) < 0x20)
            goto LABEL_134;
          v133 = (v130 >> 3) + 1;
          v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
          v131 = &v128[v134];
          v135 = &v102[v134];
          v136 = (__int128 *)(v102 + 16);
          v137 = v132 + 16;
          v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v139 = *v136;
            *(v137 - 1) = *(v136 - 1);
            *v137 = v139;
            v136 += 2;
            v137 += 2;
            v138 -= 4;
          }
          while (v138);
          v102 = v135;
          if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_134;
        }
LABEL_135:
        *((_QWORD *)this + 2) = v127;
        *((_QWORD *)this + 3) = v128;
        *((_QWORD *)this + 4) = v103;
        *((_QWORD *)this + 5) = &v127[v126];
        v5 = v143;
        if (v108)
        {
          operator delete(v108);
          v103 = (char *)*((_QWORD *)this + 4);
        }
LABEL_103:
        if (!v103)
          goto LABEL_137;
LABEL_104:
        *(_QWORD *)v103 = v104;
        v22 = (char *)(*((_QWORD *)this + 4) + 8);
        *((_QWORD *)this + 4) = v22;
        goto LABEL_105;
      }
    }
    else
    {
      v11 = *(size_t **)(v10 - 8);
      *((_QWORD *)this + 9) = v10 - 8;
      *v11 = 0;
      if (!__n)
        goto LABEL_21;
    }
    v13 = v11[1];
    if (v13 >= __n)
    {
      v20 = 0;
    }
    else
    {
      v14 = v13 + (v13 >> 1);
      if (v14 <= __n)
        v15 = __n;
      else
        v15 = v14;
      v16 = (void *)operator new[]();
      v17 = (size_t)v16;
      v18 = v11;
      v19 = (const void *)v11[2];
      if (v19)
      {
        memcpy(v16, v19, *v18);
        v18[2] = v17;
        MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
      }
      else
      {
        v18[2] = (size_t)v16;
      }
      v11 = v18;
      v18[1] = v15;
      v20 = *v18;
    }
    memcpy((void *)(v11[2] + v20), __src, __n);
    *v11 = __n;
    goto LABEL_21;
  }
  return v4 != v5;
}

void webrtc::BufferedFrameDecryptor::ManageEncryptedFrame(uint64_t a1, webrtc::RtpFrameObject **a2)
{
  unint64_t *v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void **v30;
  webrtc::RtpFrameObject **v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  webrtc::RtpFrameObject *v37;
  webrtc::RtpFrameObject **v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  void **v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  int64_t v67;
  unint64_t v68;
  void **v69;
  unint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  int64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  __int128 *v90;
  unint64_t *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  int64_t v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  _OWORD *v113;
  uint64_t v114;
  __int128 v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;

  v8 = (uint64_t)a2;
  v10 = (uint64_t)webrtc::BufferedFrameDecryptor::DecryptFrame((webrtc::BufferedFrameDecryptor *)a1, *a2);
  if ((_DWORD)v10 == 1)
  {
    if (*(_QWORD *)(a1 + 72))
    {
      v10 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if ((v10 & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v22, v23, v24, v25, v26, v27, v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/buffered_frame_decryptor.cc");
    }
    v11 = *(void ***)(a1 + 40);
    v20 = *(_QWORD *)(a1 + 48);
    if ((void **)v20 == v11)
    {
      v20 = *(_QWORD *)(a1 + 40);
      goto LABEL_43;
    }
    v29 = *(_QWORD *)(a1 + 64);
    v30 = &v11[v29 >> 9];
    v31 = (webrtc::RtpFrameObject **)((char *)*v30 + 8 * (v29 & 0x1FF));
    v32 = *(uint64_t *)((char *)v11 + (((*(_QWORD *)(a1 + 72) + v29) >> 6) & 0x3FFFFFFFFFFFFF8))
        + 8 * ((*(_QWORD *)(a1 + 72) + v29) & 0x1FF);
    if (v31 == (webrtc::RtpFrameObject **)v32)
    {
      if ((void **)v20 != v11)
        goto LABEL_17;
    }
    else
    {
      do
      {
        v10 = (uint64_t)webrtc::BufferedFrameDecryptor::DecryptFrame((webrtc::BufferedFrameDecryptor *)a1, *v31);
        if ((_DWORD)v10 == 1)
        {
          v36 = *(_QWORD *)(a1 + 16);
          v37 = *v31;
          *v31 = 0;
          v119 = v37;
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 16))(v36, &v119);
          v10 = (uint64_t)v119;
          v119 = 0;
          if (v10)
            v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        if ((char *)++v31 - (_BYTE *)*v30 == 4096)
        {
          v38 = (webrtc::RtpFrameObject **)v30[1];
          ++v30;
          v31 = v38;
        }
      }
      while (v31 != (webrtc::RtpFrameObject **)v32);
      v11 = *(void ***)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 48);
      if ((void **)v20 != v11)
      {
LABEL_17:
        v33 = *(_QWORD *)(a1 + 64);
        v2 = (unint64_t *)&v11[v33 >> 9];
        v3 = (uint64_t *)(*v2 + 8 * (v33 & 0x1FF));
        v34 = *(_QWORD *)(a1 + 72) + v33;
        v19 = *(unint64_t *)((char *)v11 + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8));
        v35 = (uint64_t *)(v19 + 8 * (v34 & 0x1FF));
        if (v3 != v35)
        {
          do
          {
            if (!v3)
              goto LABEL_138;
            v10 = *v3;
            *v3 = 0;
            if (v10)
              v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            v11 = (void **)((char *)++v3 - *v2);
            if (v11 == (void **)4096)
            {
              v39 = (uint64_t *)v2[1];
              ++v2;
              v3 = v39;
            }
          }
          while (v3 != v35);
          v11 = *(void ***)(a1 + 40);
          v50 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 72) = 0;
          v41 = v50 - (_QWORD)v11;
          if (v41 < 0x11)
          {
LABEL_45:
            if (v41 >> 3 == 1)
            {
              v43 = 256;
            }
            else
            {
              if (v41 >> 3 != 2)
                goto LABEL_50;
              v43 = 512;
            }
            *(_QWORD *)(a1 + 64) = v43;
LABEL_50:
            v44 = *(_QWORD *)(a1 + 16);
            v45 = *(_QWORD *)v8;
            *(_QWORD *)v8 = 0;
            v118 = v45;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 16))(v44, &v118);
            v46 = v118;
            v118 = 0;
            if (v46)
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
            return;
          }
          do
          {
LABEL_44:
            operator delete(*v11);
            v42 = *(_QWORD *)(a1 + 48);
            v11 = (void **)(*(_QWORD *)(a1 + 40) + 8);
            *(_QWORD *)(a1 + 40) = v11;
            v41 = v42 - (_QWORD)v11;
          }
          while (v41 > 0x10);
          goto LABEL_45;
        }
LABEL_43:
        *(_QWORD *)(a1 + 72) = 0;
        v41 = v20 - (_QWORD)v11;
        if (v41 < 0x11)
          goto LABEL_45;
        goto LABEL_44;
      }
    }
    *(_QWORD *)(a1 + 72) = 0;
    v41 = 0;
    goto LABEL_45;
  }
  if ((_DWORD)v10)
    return;
  v11 = *(void ***)(a1 + 72);
  if ((unint64_t)v11 <= 0x17)
  {
    v20 = *(_QWORD *)(a1 + 64);
  }
  else
  {
    v10 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>();
    if ((v10 & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/buffered_frame_decryptor.cc");
    v20 = *(_QWORD *)(a1 + 64);
    v11 = *(void ***)(*(_QWORD *)(a1 + 40) + ((v20 >> 6) & 0x3FFFFFFFFFFFFF8));
    if (!v11)
      goto LABEL_138;
    v21 = *(_QWORD *)(a1 + 64) & 0x1FFLL;
    v10 = (uint64_t)v11[v21];
    v11[v21] = 0;
    if (v10)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v20 = *(_QWORD *)(a1 + 64);
    }
    v11 = (void **)(*(_QWORD *)(a1 + 72) - 1);
    *(_QWORD *)(a1 + 64) = ++v20;
    *(_QWORD *)(a1 + 72) = v11;
    if (v20 >= 0x400)
    {
      operator delete(**(void ***)(a1 + 40));
      *(_QWORD *)(a1 + 40) += 8;
      v11 = *(void ***)(a1 + 72);
      v20 = *(_QWORD *)(a1 + 64) - 512;
      *(_QWORD *)(a1 + 64) = v20;
    }
  }
  v4 = *(void ***)(a1 + 40);
  v5 = *(void ***)(a1 + 48);
  v40 = (((char *)v5 - (char *)v4) << 6) - 1;
  v7 = (char *)v5 - (char *)v4;
  if (v5 == v4)
    v40 = 0;
  v19 = (unint64_t)v11 + v20;
  if ((void **)v40 != (void **)((char *)v11 + v20))
    goto LABEL_93;
  v3 = (uint64_t *)(a1 + 32);
  if (v20 >= 0x200)
  {
    *(_QWORD *)(a1 + 64) = v20 - 512;
    v2 = (unint64_t *)(v4 + 1);
    v6 = (uint64_t *)*v4;
    *(_QWORD *)(a1 + 40) = v4 + 1;
    v11 = *(void ***)(a1 + 56);
    if (v5 != v11)
      goto LABEL_37;
    v3 = (uint64_t *)*v3;
    if (v2 > (unint64_t *)v3)
    {
      v56 = (_QWORD *)v8;
      v57 = ((char *)v2 - (char *)v3) >> 3;
      v20 = v57 + 2;
      if (v57 >= -1)
        v58 = v57 + 1;
      else
        v58 = v57 + 2;
      v59 = v58 >> 1;
      v60 = -v59;
      v3 = (uint64_t *)&v2[-v59];
      v61 = (char *)v5 - (char *)v2;
      if (v5 != (void **)v2)
      {
        v10 = (uint64_t)memmove(&v2[-v59], v2, (char *)v5 - (char *)v2);
        v5 = *(void ***)(a1 + 40);
      }
      v62 = &v5[v60];
      v5 = (void **)((char *)v3 + v61);
      *(_QWORD *)(a1 + 40) = v62;
      *(_QWORD *)(a1 + 48) = (char *)v3 + v61;
      v8 = (uint64_t)v56;
LABEL_38:
      *v5 = v6;
      goto LABEL_39;
    }
    v63 = ((char *)v5 - (char *)v3) >> 2;
    if (v5 == (void **)v3)
      v63 = 1;
    if (!(v63 >> 61))
    {
      v7 = v8;
      v64 = v63 >> 2;
      v65 = 8 * v63;
      v10 = (uint64_t)operator new(8 * v63);
      v11 = (void **)(v10 + 8 * v64);
      v20 = v10 + v65;
      v67 = (char *)v5 - (char *)v2;
      v66 = v5 == (void **)v2;
      v5 = v11;
      if (v66)
        goto LABEL_130;
      v5 = (void **)((char *)v11 + (v67 & 0xFFFFFFFFFFFFFFF8));
      v68 = v67 - 8;
      if ((unint64_t)(v67 - 8) >= 0x38)
      {
        v99 = 8 * v64 + v10;
        v69 = (void **)v99;
        if ((unint64_t)(v99 - (_QWORD)v2) >= 0x20)
        {
          v19 = (v68 >> 3) + 1;
          v100 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          v69 = &v11[v100];
          v2 = (unint64_t *)((char *)v2 + v100 * 8);
          v101 = (__int128 *)(v4 + 3);
          v102 = (_OWORD *)(v99 + 16);
          v103 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v104 = *v101;
            *(v102 - 1) = *(v101 - 1);
            *v102 = v104;
            v101 += 2;
            v102 += 2;
            v103 -= 4;
          }
          while (v103);
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_130:
            *(_QWORD *)(a1 + 32) = v10;
            *(_QWORD *)(a1 + 40) = v11;
            *(_QWORD *)(a1 + 48) = v5;
            *(_QWORD *)(a1 + 56) = v20;
            v8 = v7;
            if (v3)
            {
              operator delete(v3);
              v5 = *(void ***)(a1 + 48);
            }
LABEL_37:
            if (!v5)
              goto LABEL_138;
            goto LABEL_38;
          }
        }
      }
      else
      {
        v69 = (void **)(v10 + 8 * v64);
      }
      do
      {
        v105 = *v2++;
        v19 = v105;
        *v69++ = (void *)v105;
      }
      while (v69 != v5);
      goto LABEL_130;
    }
LABEL_146:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v47 = v7 >> 3;
  v48 = *(void ***)(a1 + 56);
  v49 = *(char **)(a1 + 32);
  if (v7 >> 3 >= (unint64_t)(((char *)v48 - v49) >> 3))
  {
    v117 = (_QWORD *)v8;
    if (v48 == (void **)v49)
      v51 = 1;
    else
      v51 = ((char *)v48 - v49) >> 2;
    if (v51 >> 61)
      goto LABEL_146;
    v2 = (unint64_t *)operator new(8 * v51);
    v3 = (uint64_t *)&v2[v47];
    v6 = (uint64_t *)&v2[v51];
    v52 = operator new(0x1000uLL);
    v53 = (uint64_t)v52;
    if (v47 == v51)
    {
      v8 = (uint64_t)v117;
      if (v7 < 1)
      {
        v70 = v7 >> 2;
        if (v5 == v4)
          v70 = 1;
        if (v70 >> 61)
          goto LABEL_146;
        v71 = v70;
        v3 = (uint64_t *)operator new(8 * v70);
        operator delete(v2);
        v6 = &v3[v71];
        v72 = *(void ***)(a1 + 40);
        v5 = *(void ***)(a1 + 48);
        v2 = (unint64_t *)v3;
        *v3 = v53;
        v55 = v3 + 1;
        if (v5 != v72)
          goto LABEL_99;
      }
      else
      {
        v54 = v47 + 2;
        if (v47 >= -1)
          v54 = v47 + 1;
        v3 -= v54 >> 1;
        *v3 = (uint64_t)v52;
        v55 = v3 + 1;
        if (v5 != v4)
        {
          while (1)
          {
LABEL_99:
            if (v3 == (uint64_t *)v2)
            {
              if (v55 >= v6)
              {
                v80 = ((char *)v6 - (char *)v3) >> 2;
                if (v6 == v3)
                  v80 = 1;
                if (v80 >> 61)
                  goto LABEL_146;
                v81 = (v80 + 3) >> 2;
                v82 = v80;
                v83 = (unint64_t *)operator new(8 * v80);
                v2 = v83;
                v76 = (uint64_t *)&v83[v81];
                v7 = (uint64_t)v76;
                v84 = (char *)v55 - (char *)v3;
                if (v55 != v3)
                {
                  v7 = (uint64_t)v76 + (v84 & 0xFFFFFFFFFFFFFFF8);
                  v85 = v84 - 8;
                  v86 = (char *)&v83[v81];
                  v87 = v3;
                  if (v85 < 0x38)
                    goto LABEL_149;
                  v86 = (char *)&v83[v81];
                  v87 = v3;
                  if ((unint64_t)(v86 - (char *)v3) < 0x20)
                    goto LABEL_149;
                  v88 = (v85 >> 3) + 1;
                  v89 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                  v86 = (char *)&v76[v89];
                  v87 = &v3[v89];
                  v90 = (__int128 *)(v3 + 2);
                  v91 = &v83[v81 + 2];
                  v92 = v88 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v93 = *v90;
                    *((_OWORD *)v91 - 1) = *(v90 - 1);
                    *(_OWORD *)v91 = v93;
                    v90 += 2;
                    v91 += 4;
                    v92 -= 4;
                  }
                  while (v92);
                  if (v88 != (v88 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_149:
                    do
                    {
                      v94 = *v87++;
                      *(_QWORD *)v86 = v94;
                      v86 += 8;
                    }
                    while (v86 != (char *)v7);
                  }
                }
                v6 = (uint64_t *)&v83[v82];
                operator delete(v3);
              }
              else
              {
                v78 = v6 - v55;
                v20 = v78 + 2;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v7 = (uint64_t)&v55[v79 >> 1];
                v76 = &v3[v79 >> 1];
                if (v55 == v3)
                {
                  v2 = (unint64_t *)v55;
                }
                else
                {
                  memmove(&v3[v79 >> 1], v3, (char *)v55 - (char *)v3);
                  v2 = (unint64_t *)v3;
                }
              }
            }
            else
            {
              v76 = v3;
              v7 = (uint64_t)v55;
            }
            v77 = (uint64_t)*--v5;
            *(v76 - 1) = v77;
            v73 = v76 - 1;
            v55 = (uint64_t *)v7;
            v3 = v73;
            if (v5 == *(void ***)(a1 + 40))
              goto LABEL_90;
          }
        }
      }
    }
    else
    {
      v8 = (uint64_t)v117;
      *v3 = (uint64_t)v52;
      v55 = v3 + 1;
      if (v5 != v4)
        goto LABEL_99;
    }
    v73 = v3;
    v7 = (uint64_t)v55;
LABEL_90:
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v2;
    *(_QWORD *)(a1 + 40) = v73;
    *(_QWORD *)(a1 + 48) = v7;
    *(_QWORD *)(a1 + 56) = v6;
    if (v10)
      operator delete((void *)v10);
    goto LABEL_92;
  }
  if (v48 != v5)
  {
    v119 = operator new(0x1000uLL);
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)(a1 + 32), &v119);
    goto LABEL_92;
  }
  v119 = operator new(0x1000uLL);
  std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)(a1 + 32), &v119);
  v6 = *(uint64_t **)(a1 + 40);
  v5 = *(void ***)(a1 + 48);
  v2 = (unint64_t *)(v6 + 1);
  v4 = (void **)*v6;
  *(_QWORD *)(a1 + 40) = v6 + 1;
  v11 = *(void ***)(a1 + 56);
  if (v5 != v11)
    goto LABEL_77;
  v3 = (uint64_t *)*v3;
  if (v2 <= (unint64_t *)v3)
  {
    v106 = ((char *)v5 - (char *)v3) >> 2;
    if (v5 == (void **)v3)
      v106 = 1;
    if (!(v106 >> 61))
    {
      v7 = v8;
      v8 = v106 >> 2;
      v107 = 8 * v106;
      v10 = (uint64_t)operator new(8 * v106);
      v11 = (void **)(v10 + 8 * v8);
      v20 = v10 + v107;
      v108 = (char *)v5 - (char *)v2;
      v66 = v5 == (void **)v2;
      v5 = v11;
      if (!v66)
      {
        v5 = (void **)((char *)v11 + (v108 & 0xFFFFFFFFFFFFFFF8));
        v19 = v108 - 8;
        if ((unint64_t)(v108 - 8) >= 0x38)
          goto LABEL_139;
        v109 = (void **)(v10 + 8 * v8);
        goto LABEL_143;
      }
      goto LABEL_144;
    }
    goto LABEL_146;
  }
  v95 = ((char *)v2 - (char *)v3) >> 3;
  v20 = v95 + 2;
  if (v95 >= -1)
    v96 = v95 + 1;
  else
    v96 = v95 + 2;
  v97 = v96 >> 1;
  v6 = (uint64_t *)-v97;
  v3 = (uint64_t *)&v2[-v97];
  v98 = (char *)v5 - (char *)v2;
  if (v5 != (void **)v2)
  {
    v10 = (uint64_t)memmove(&v2[-v97], v2, (char *)v5 - (char *)v2);
    v2 = *(unint64_t **)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = &v2[(_QWORD)v6];
  *(_QWORD *)(a1 + 48) = (char *)v3 + v98;
  *(uint64_t *)((char *)v3 + v98) = (uint64_t)v4;
LABEL_39:
  while (1)
  {
    *(_QWORD *)(a1 + 48) += 8;
LABEL_92:
    v11 = *(void ***)(a1 + 72);
    v4 = *(void ***)(a1 + 40);
    v5 = *(void ***)(a1 + 48);
LABEL_93:
    if (v5 != v4)
    {
      v74 = (unint64_t)v11 + *(_QWORD *)(a1 + 64);
      v20 = *(unint64_t *)((char *)v4 + ((v74 >> 6) & 0x3FFFFFFFFFFFFF8));
      if (v20)
        break;
    }
    do
    {
LABEL_138:
      __break(1u);
LABEL_139:
      v110 = 8 * v8 + v10;
      v109 = v11;
      if ((unint64_t)(v110 - (_QWORD)v2) < 0x20)
        goto LABEL_150;
      v19 = (v19 >> 3) + 1;
      v111 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      v109 = &v11[v111];
      v2 = (unint64_t *)((char *)v2 + v111 * 8);
      v112 = (__int128 *)(v6 + 3);
      v113 = (_OWORD *)(v110 + 16);
      v114 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v115 = *v112;
        *(v113 - 1) = *(v112 - 1);
        *v113 = v115;
        v112 += 2;
        v113 += 2;
        v114 -= 4;
      }
      while (v114);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_150:
        do
        {
LABEL_143:
          v116 = *v2++;
          v19 = v116;
          *v109++ = (void *)v116;
        }
        while (v109 != v5);
      }
LABEL_144:
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(a1 + 40) = v11;
      *(_QWORD *)(a1 + 48) = v5;
      *(_QWORD *)(a1 + 56) = v20;
      v8 = v7;
      if (v3)
      {
        operator delete(v3);
        v5 = *(void ***)(a1 + 48);
      }
LABEL_77:
      ;
    }
    while (!v5);
    *v5 = v4;
  }
  v75 = *(_QWORD *)v8;
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v20 + 8 * (v74 & 0x1FF)) = v75;
  *(_QWORD *)(a1 + 72) = (char *)v11 + 1;
}

void **webrtc::BufferedFrameDecryptor::DecryptFrame(webrtc::BufferedFrameDecryptor *this, webrtc::RtpFrameObject *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::string *v34;
  void *__p;
  _BYTE *v36;
  uint64_t v37;

  v4 = *((_QWORD *)this + 1);
  if (!v4)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/buffered_frame_decryptor.cc");
    return 0;
  }
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, 1, *((_QWORD *)a2 + 19));
  v11 = v6;
  if (v6 > *((_QWORD *)a2 + 19))
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/buffered_frame_decryptor.cc", 70, "max_plaintext_byte_size <= frame->size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v7, v8, v9, v10, v6);
  }
  else
  {
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 302) + 40))(*((_QWORD *)a2 + 302));
    if (*(_BYTE *)this)
    {
      webrtc::RtpDescriptorAuthentication((uint64_t)a2 + 2424, &__p);
      v13 = __p;
      v12 = v36;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v22 = *((_QWORD *)this + 1);
    __p = 0;
    v36 = 0;
    v37 = 0;
    v23 = v12 - v13;
    if (v12 == v13)
      v24 = 0;
    else
      v24 = v13;
    v25 = *((_QWORD *)a2 + 18);
    if (v25)
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
    if (*((_QWORD *)a2 + 19))
      v26 = v25;
    else
      v26 = 0;
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void *, int64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, 1, &__p, v24, v23, v26);
    v2 = v32;
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
    if (*((_DWORD *)this + 1) != (_DWORD)v31)
    {
      *((_DWORD *)this + 1) = v31;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3), v31);
    }
    if ((_DWORD)v31)
    {
      v21 = 2 * *((unsigned __int8 *)this + 1);
LABEL_26:
      if (v13)
        operator delete(v13);
      return (void **)v21;
    }
    if (v2 <= v11)
    {
      *((_QWORD *)a2 + 19) = v2;
      v21 = 1;
      if (!*((_BYTE *)this + 1))
        *((_BYTE *)this + 1) = 1;
      goto LABEL_26;
    }
  }
  v34 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/buffered_frame_decryptor.cc", 98, "decrypt_result.bytes_written <= max_plaintext_byte_size", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v27, v28, v29, v30, v2);
  return std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100]((void **)&v34->__r_.__value_.__l.__data_);
}

void **std::deque<std::unique_ptr<webrtc::RtpFrameObject>>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  void ***v6;
  uint64_t v7;
  void ***v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  _BYTE *v14;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  if (v3 == v2)
  {
    v3 = (void **)result[1];
    result[5] = 0;
    v9 = 0;
    goto LABEL_13;
  }
  v4 = (unint64_t)result[4];
  v5 = &v2[v4 >> 9];
  v6 = (void ***)((char *)*v5 + 8 * (v4 & 0x1FF));
  v7 = *(uint64_t *)((char *)v2 + ((((unint64_t)result[5] + v4) >> 6) & 0x3FFFFFFFFFFFFF8))
     + 8 * (((unint64_t)result[5] + v4) & 0x1FF);
  if (v6 == (void ***)v7)
  {
LABEL_11:
    v1[5] = 0;
    v9 = (char *)v3 - (char *)v2;
    if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v3 = (void **)v1[2];
        v2 = (void **)((char *)v1[1] + 8);
        v1[1] = v2;
        v9 = (char *)v3 - (char *)v2;
      }
      while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
    }
LABEL_13:
    v10 = v9 >> 3;
    if (v10 == 1)
    {
      v11 = 256;
    }
    else
    {
      if (v10 != 2)
        goto LABEL_19;
      v11 = 512;
    }
    v1[4] = (void *)v11;
LABEL_19:
    if (v2 != v3)
    {
      do
      {
        v12 = *v2++;
        operator delete(v12);
      }
      while (v2 != v3);
      v14 = v1[1];
      v13 = v1[2];
      if (v13 != v14)
        v1[2] = &v13[(v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
    if (*v1)
      operator delete(*v1);
    return v1;
  }
  while (v6)
  {
    result = *v6;
    *v6 = 0;
    if (result)
      result = (void **)(*((uint64_t (**)(void **))*result + 1))(result);
    if ((char *)++v6 - (_BYTE *)*v5 == 4096)
    {
      v8 = (void ***)v5[1];
      ++v5;
      v6 = v8;
    }
    if (v6 == (void ***)v7)
    {
      v2 = (void **)v1[1];
      v3 = (void **)v1[2];
      goto LABEL_11;
    }
  }
  __break(1u);
  return result;
}

void std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
LABEL_25:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  if (!v4)
  {
    __break(1u);
    goto LABEL_25;
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t webrtc::CreateBuiltinAudioDecoderFactory@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  result = operator new();
  *(_QWORD *)result = off_24C0B0478;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  v4 = (unsigned int *)(result + 16);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *a1 = result;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>::GetSupportedDecoders(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  webrtc::AudioDecoderOpus::AppendSupportedDecoders((uint64_t)a1);
  webrtc::AudioDecoderG722::AppendSupportedDecoders((uint64_t)a1);
  webrtc::AudioDecoderG711::AppendSupportedDecoders((uint64_t)a1);
}

void webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>::IsSupportedDecoder(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  const webrtc::SdpAudioFormat *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p;
  void *v21;
  char v22;

  webrtc::AudioDecoderOpus::SdpToConfig(a2);
  if (!v3)
  {
    webrtc::AudioDecoderMultiChannelOpusImpl::SdpToConfig((webrtc::AudioDecoderMultiChannelOpusImpl *)a2, (uint64_t)&v19);
    if (!v22)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        v4 = *(_QWORD *)(a2 + 8);
        if (v4 < 0 || (v5 = *(unsigned __int8 **)a2, v4) && !v5)
        {
          __break(1u);
          return;
        }
      }
      else
      {
        v4 = *(unsigned __int8 *)(a2 + 23);
        v5 = (unsigned __int8 *)a2;
      }
      if (v4 == 4)
      {
        v6 = *v5;
        if (v6 == 71)
          goto LABEL_14;
        if ((v6 - 65) < 0x1A)
          LOBYTE(v6) = v6 + 32;
        v7 = v6 - 103;
        if (!v7)
        {
LABEL_14:
          v8 = v5[1];
          if (v8 == 55)
            goto LABEL_18;
          if ((v8 - 65) < 0x1A)
            LOBYTE(v8) = v8 + 32;
          v7 = v8 - 55;
          if (!v7)
          {
LABEL_18:
            v9 = v5[2];
            if (v9 == 50)
              goto LABEL_22;
            if ((v9 - 65) < 0x1A)
              LOBYTE(v9) = v9 + 32;
            v7 = v9 - 50;
            if (!v7)
            {
LABEL_22:
              v10 = v5[3];
              if (v10 == 50)
                goto LABEL_26;
              if ((v10 - 65) < 0x1A)
                LOBYTE(v10) = v10 + 32;
              v7 = v10 - 50;
              if (v10 == 50)
LABEL_26:
                v7 = 0;
            }
          }
        }
        v11 = !v7 && *(_DWORD *)(a2 + 24) == 8000;
        if (v11 && (unint64_t)(*(_QWORD *)(a2 + 32) - 3) > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_34;
      }
      webrtc::AudioDecoderG711::SdpToConfig(a2);
      if ((_BYTE)v12)
      {
LABEL_34:
        if (!v22)
          return;
      }
      else
      {
        webrtc::AudioDecoderL16::SdpToConfig((webrtc::AudioDecoderL16 *)a2, v12, v13, v14, v15, v16, v17, v18);
        if (!v22)
          return;
      }
    }
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
  }
}

void webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>::MakeAudioDecoder(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  char v5;
  unint64_t v6;
  webrtc::AudioDecoderOpusImpl *v7;
  void *v8;
  size_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  const webrtc::SdpAudioFormat *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  webrtc::AudioDecoderG722StereoImpl *v36;
  unint64_t v37;
  int v38;
  void *v39;
  _BYTE *v40;
  char v41;
  unint64_t v42;
  int v43;
  void *__p;
  void *v45;
  char *v46;
  uint64_t v47;

  webrtc::AudioDecoderOpus::SdpToConfig(a1);
  if (v5)
  {
    v6 = v4;
    if (((_DWORD)v4 == 48000 || (_DWORD)v4 == 16000) && (HIDWORD(v4) - 1) <= 1)
    {
      v7 = (webrtc::AudioDecoderOpusImpl *)operator new();
      *a2 = (uint64_t)webrtc::AudioDecoderOpusImpl::AudioDecoderOpusImpl(v7, HIDWORD(v6), v6);
    }
    else
    {
      *a2 = 0;
    }
    return;
  }
  webrtc::AudioDecoderMultiChannelOpusImpl::SdpToConfig((webrtc::AudioDecoderMultiChannelOpusImpl *)a1, (uint64_t)&v37);
  if (v41)
  {
    v8 = v39;
    v9 = v40 - (_BYTE *)v39;
    if (v40 == v39)
    {
      v10 = 0;
      v42 = v37;
      v43 = v38;
      v45 = 0;
      v46 = 0;
      __p = 0;
      goto LABEL_14;
    }
    if ((v9 & 0x8000000000000000) == 0)
    {
      v10 = operator new(v40 - (_BYTE *)v39);
      memcpy(v10, v8, v9);
      v42 = v37;
      v43 = v38;
      v11 = (char *)operator new(v9);
      v12 = &v11[v9];
      __p = v11;
      v46 = &v11[v9];
      memcpy(v11, v10, v9);
      v45 = v12;
LABEL_14:
      webrtc::AudioDecoderMultiChannelOpusImpl::MakeAudioDecoder((unsigned int *)&v42, &v47);
      *a2 = v47;
      v47 = 0;
      if (__p)
      {
        v45 = __p;
        operator delete(__p);
      }
      if (v10)
        operator delete(v10);
      goto LABEL_62;
    }
LABEL_67:
    abort();
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v13 = *(_QWORD *)(a1 + 8);
    if (v13 < 0 || (v14 = *(unsigned __int8 **)a1, v13) && !v14)
    {
      __break(1u);
      goto LABEL_67;
    }
  }
  else
  {
    v13 = *(unsigned __int8 *)(a1 + 23);
    v14 = (unsigned __int8 *)a1;
  }
  if (v13 == 4)
  {
    v15 = *v14;
    if (v15 == 71)
      goto LABEL_26;
    if ((v15 - 65) < 0x1A)
      LOBYTE(v15) = v15 + 32;
    v16 = v15 - 103;
    if (!v16)
    {
LABEL_26:
      v17 = v14[1];
      if (v17 == 55)
        goto LABEL_30;
      if ((v17 - 65) < 0x1A)
        LOBYTE(v17) = v17 + 32;
      v16 = v17 - 55;
      if (!v16)
      {
LABEL_30:
        v18 = v14[2];
        if (v18 == 50)
          goto LABEL_34;
        if ((v18 - 65) < 0x1A)
          LOBYTE(v18) = v18 + 32;
        v16 = v18 - 50;
        if (!v16)
        {
LABEL_34:
          v19 = v14[3];
          if (v19 == 50)
            goto LABEL_38;
          if ((v19 - 65) < 0x1A)
            LOBYTE(v19) = v19 + 32;
          v16 = v19 - 50;
          if (v19 == 50)
LABEL_38:
            v16 = 0;
        }
      }
    }
    v20 = !v16 && *(_DWORD *)(a1 + 24) == 8000;
    if (v20 && (unint64_t)(*(_QWORD *)(a1 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v33 = *(_QWORD *)(a1 + 32);
      if (v33 == 2)
      {
        v36 = (webrtc::AudioDecoderG722StereoImpl *)operator new();
        *a2 = (uint64_t)webrtc::AudioDecoderG722StereoImpl::AudioDecoderG722StereoImpl(v36);
        goto LABEL_62;
      }
      if (v33 == 1)
      {
        v34 = (_QWORD *)operator new();
        *v34 = &unk_24C0AD2D8;
        v35 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
        v34[1] = v35;
        if (!v35)
          v35 = malloc_type_malloc(0x1E8uLL, 0x10000409A32B08BuLL);
        v35[60] = 0;
        *((_OWORD *)v35 + 28) = 0u;
        *((_OWORD *)v35 + 29) = 0u;
        *((_OWORD *)v35 + 26) = 0u;
        *((_OWORD *)v35 + 27) = 0u;
        *((_OWORD *)v35 + 24) = 0u;
        *((_OWORD *)v35 + 25) = 0u;
        *((_OWORD *)v35 + 22) = 0u;
        *((_OWORD *)v35 + 23) = 0u;
        *((_OWORD *)v35 + 20) = 0u;
        *((_OWORD *)v35 + 21) = 0u;
        *((_OWORD *)v35 + 18) = 0u;
        *((_OWORD *)v35 + 19) = 0u;
        *((_OWORD *)v35 + 16) = 0u;
        *((_OWORD *)v35 + 17) = 0u;
        *((_OWORD *)v35 + 14) = 0u;
        *((_OWORD *)v35 + 15) = 0u;
        *((_OWORD *)v35 + 12) = 0u;
        *((_OWORD *)v35 + 13) = 0u;
        *((_OWORD *)v35 + 10) = 0u;
        *((_OWORD *)v35 + 11) = 0u;
        *((_OWORD *)v35 + 8) = 0u;
        *((_OWORD *)v35 + 9) = 0u;
        *((_OWORD *)v35 + 6) = 0u;
        *((_OWORD *)v35 + 7) = 0u;
        *((_OWORD *)v35 + 4) = 0u;
        *((_OWORD *)v35 + 5) = 0u;
        *((_OWORD *)v35 + 2) = 0u;
        *((_OWORD *)v35 + 3) = 0u;
        *(_OWORD *)v35 = 0u;
        *((_OWORD *)v35 + 1) = 0u;
        *((_DWORD *)v35 + 3) = 8;
        *((_DWORD *)v35 + 72) = 32;
        *((_DWORD *)v35 + 117) = 8;
        *a2 = (uint64_t)v34;
        goto LABEL_62;
      }
      goto LABEL_61;
    }
  }
  v21 = webrtc::AudioDecoderG711::SdpToConfig(a1);
  if (!(_BYTE)v22)
  {
    v42 = webrtc::AudioDecoderL16::SdpToConfig((webrtc::AudioDecoderL16 *)a1, v22, v23, v24, v25, v26, v27, v28);
    v43 = v32;
    if ((_BYTE)v32)
    {
      webrtc::AudioDecoderL16::MakeAudioDecoder((int *)&v42, a2);
      goto LABEL_62;
    }
LABEL_61:
    *a2 = 0;
    goto LABEL_62;
  }
  if (v21 > 1)
    goto LABEL_61;
  v29 = HIDWORD(v21);
  if ((HIDWORD(v21) - 1) > 0x17)
    goto LABEL_61;
  if ((_DWORD)v21 == 1)
  {
    v30 = (_QWORD *)operator new();
  }
  else
  {
    v30 = (_QWORD *)operator new();
  }
  *v30 = v31 + 16;
  v30[1] = v29;
  *a2 = (uint64_t)v30;
LABEL_62:
  if (v41 && v39)
  {
    v40 = v39;
    operator delete(v39);
  }
}

BOOL rtc::RefCountedObject<webrtc::audio_decoder_factory_template_impl::AudioDecoderFactoryT<webrtc::AudioDecoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderMultiChannelOpus>,webrtc::AudioDecoderG722,webrtc::AudioDecoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioDecoderL16>>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

uint64_t webrtc::CreateBuiltinAudioEncoderFactory@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  result = operator new();
  *(_QWORD *)result = off_24C0B04C8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  v4 = (unsigned int *)(result + 16);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *a1 = result;
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>::GetSupportedEncoders(_QWORD *a1@<X8>)
{
  const webrtc::SdpAudioFormat *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  webrtc::AudioEncoderOpusImpl::AppendSupportedEncoders((uint64_t)a1);
  webrtc::AudioEncoderG722::AppendSupportedEncoders((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
  webrtc::AudioEncoderG711::AppendSupportedEncoders((uint64_t)a1);
}

void webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>::QueryAudioEncoder(webrtc::AudioEncoderOpusImpl *this@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  const webrtc::SdpAudioFormat *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  const webrtc::SdpAudioFormat *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const webrtc::SdpAudioFormat *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[4];
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  void *v30;
  void *v31;
  char v32;
  _BYTE v33[8];
  uint64_t v34;
  int v35;
  void *v36;
  void *v37;
  void *__p;
  void *v39;
  char v40;

  webrtc::AudioEncoderOpusImpl::SdpToConfig(this, (uint64_t)v25);
  if (!v32)
  {
    webrtc::AudioEncoderMultiChannelOpusImpl::SdpToConfig(this, (uint64_t)v33);
    if (v40)
    {
      v13 = v34;
      v14 = v35;
      *(_DWORD *)a2 = 48000;
      *(_QWORD *)(a2 + 8) = v13;
      *(_DWORD *)(a2 + 16) = v14;
      *(_QWORD *)(a2 + 20) = 0x7C83000001770;
      *(_WORD *)(a2 + 28) = 0;
      *(_BYTE *)(a2 + 32) = 1;
LABEL_12:
      if (__p)
      {
        v39 = __p;
        operator delete(__p);
      }
      if (v36)
      {
        v37 = v36;
        operator delete(v36);
      }
LABEL_16:
      if (!v32)
        return;
      goto LABEL_17;
    }
    v15 = webrtc::AudioEncoderG722::SdpToConfig(this, v6, v7, v8, v9, v10, v11, v12);
    if ((_BYTE)v16)
    {
      v17 = HIDWORD(v15);
      v18 = v15 >> 32;
      v19 = 16000;
    }
    else
    {
      v20 = (uint64_t)webrtc::AudioEncoderG711::SdpToConfig((unsigned __int8 *)this, v16);
      if (((unint64_t)v21 & 0xFF00000000) == 0)
      {
        webrtc::AudioEncoderL16::SdpToConfig(this, v21);
        if ((v24 & 0xFF00000000) == 0)
        {
          *(_BYTE *)a2 = 0;
          *(_BYTE *)(a2 + 32) = 0;
          if (!v40)
            goto LABEL_16;
          goto LABEL_12;
        }
        *(_DWORD *)a2 = v23;
        *(_QWORD *)(a2 + 8) = v23 >> 32;
        v22 = 16 * v23 * HIDWORD(v23);
        goto LABEL_11;
      }
      v17 = HIDWORD(v20);
      v18 = v20 >> 32;
      v19 = 8000;
    }
    *(_DWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v18;
    v22 = 64000 * v17;
LABEL_11:
    *(_DWORD *)(a2 + 16) = v22;
    *(_DWORD *)(a2 + 20) = v22;
    *(_DWORD *)(a2 + 24) = v22;
    *(_WORD *)(a2 + 28) = 1;
    *(_BYTE *)(a2 + 32) = 1;
    if (!v40)
      goto LABEL_16;
    goto LABEL_12;
  }
  if (!v29)
  {
    __break(1u);
    return;
  }
  v4 = v27;
  v5 = v28;
  *(_DWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 20) = 0x7C83000001770;
  *(_WORD *)(a2 + 28) = 256;
  *(_BYTE *)(a2 + 32) = 1;
LABEL_17:
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>::MakeAudioEncoder(webrtc::AudioEncoderOpusImpl *this@<X2>, const webrtc::AudioEncoderMultiChannelOpusConfig *a2@<X1>, uint64_t *a3@<X8>)
{
  BOOL v6;
  const webrtc::SdpAudioFormat *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const webrtc::SdpAudioFormat *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v19;
  const webrtc::SdpAudioFormat *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  void *v28;
  void *v29;
  char v30;
  _BYTE v31[32];
  void *v32;
  void *v33;
  void *__p;
  void *v35;
  char v36;
  uint64_t v37;
  int v38;
  _QWORD v39[2];
  _QWORD v40[2];

  webrtc::AudioEncoderOpusImpl::SdpToConfig(this, (uint64_t)v23);
  if (v30)
  {
    v6 = SLODWORD(v23[0]) >= 1 && LODWORD(v23[0]) % 0xA == 0;
    if (v6
      && (HIDWORD(v23[0]) == 48000 || HIDWORD(v23[0]) == 16000)
      && v23[1] <= 0xFEuLL
      && v25
      && (v24 - 6000) <= 0x7B0C0
      && v26 <= 0xA
      && v27 < 0xB)
    {
      webrtc::AudioEncoderOpusImpl::MakeAudioEncoder(v23, (int)a2, a3);
    }
    else
    {
      *a3 = 0;
    }
  }
  else
  {
    webrtc::AudioEncoderMultiChannelOpusImpl::SdpToConfig(this, (uint64_t)v31);
    if (v36)
    {
      webrtc::AudioEncoderMultiChannelOpusImpl::MakeAudioEncoder((webrtc::AudioEncoderMultiChannelOpusImpl *)v31, a2, a3);
    }
    else
    {
      v14 = webrtc::AudioEncoderG722::SdpToConfig(this, v7, v8, v9, v10, v11, v12, v13);
      v37 = v14;
      v38 = (int)v15;
      if ((_BYTE)v15)
      {
        v16 = v14;
        v17 = 0;
        if ((int)v16 >= 1 && !(v16 % 0xA) && (HIDWORD(v16) - 1) <= 0x17)
        {
          v19 = operator new();
          v17 = webrtc::AudioEncoderG722Impl::AudioEncoderG722Impl(v19, (int *)&v37, (int)a2);
        }
        *a3 = (uint64_t)v17;
      }
      else
      {
        v39[0] = webrtc::AudioEncoderG711::SdpToConfig((unsigned __int8 *)this, v15);
        v39[1] = v20;
        if (((unint64_t)v20 & 0xFF00000000) != 0)
        {
          webrtc::AudioEncoderG711::MakeAudioEncoder((int *)v39, (int)a2, a3);
        }
        else
        {
          webrtc::AudioEncoderL16::SdpToConfig(this, v20);
          v40[0] = v21;
          v40[1] = v22;
          if ((v22 & 0xFF00000000) != 0)
            webrtc::AudioEncoderL16::MakeAudioEncoder((unsigned int *)v40, a2, a3);
          else
            *a3 = 0;
        }
      }
    }
    if (v36)
    {
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      if (v32)
      {
        v33 = v32;
        operator delete(v32);
      }
    }
  }
  if (v30)
  {
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
  }
}

BOOL rtc::RefCountedObject<webrtc::audio_encoder_factory_template_impl::AudioEncoderFactoryT<webrtc::AudioEncoderOpus,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderMultiChannelOpus>,webrtc::AudioEncoderG722,webrtc::AudioEncoderG711,webrtc::`anonymous namespace'::NotAdvertised<webrtc::AudioEncoderL16>>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

void webrtc::`anonymous namespace'::BuiltinVideoBitrateAllocatorFactory::~BuiltinVideoBitrateAllocatorFactory(webrtc::_anonymous_namespace_::BuiltinVideoBitrateAllocatorFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

webrtc::SimulcastRateAllocator *webrtc::`anonymous namespace'::BuiltinVideoBitrateAllocatorFactory::CreateVideoBitrateAllocator@<X0>(const webrtc::VideoCodec *a1@<X1>, webrtc::SimulcastRateAllocator **a2@<X8>)
{
  BOOL v5;
  webrtc::SimulcastRateAllocator *v6;
  webrtc::SimulcastRateAllocator *result;

  v5 = (*(_DWORD *)a1 & 0xFFFFFFFE) != 2 || *((unsigned __int8 *)a1 + 32) > 1u;
  v6 = (webrtc::SimulcastRateAllocator *)operator new();
  if (v5)
    result = webrtc::SimulcastRateAllocator::SimulcastRateAllocator(v6, a1);
  else
    result = webrtc::SvcRateAllocator::SvcRateAllocator(v6, a1);
  *a2 = result;
  return result;
}

uint64_t webrtc::VideoEncoderFactory::GetImplementations(webrtc::VideoEncoderFactory *this)
{
  return (**(uint64_t (***)(webrtc::VideoEncoderFactory *))this)(this);
}

void webrtc::VideoEncoderFactory::GetEncoderSelector(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void webrtc::rtcp::Bye::~Bye(void **this)
{
  void *v2;

  *this = off_24C0B0540;
  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    v2 = this[2];
    if (!v2)
      return;
  }
  else
  {
    v2 = this[2];
    if (!v2)
      return;
  }
  this[3] = v2;
  operator delete(v2);
}

{
  void *v2;

  *this = off_24C0B0540;
  if (*((char *)this + 63) < 0)
  {
    operator delete(this[5]);
    v2 = this[2];
    if (!v2)
      goto LABEL_6;
  }
  else
  {
    v2 = this[2];
    if (!v2)
      goto LABEL_6;
  }
  this[3] = v2;
  operator delete(v2);
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::rtcp::Bye::Parse(uint64_t a1, uint64_t a2, double a3, double a4, int8x16_t a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::vector<unsigned int> *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __n128 *v41;
  int8x16_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v8 = *(unsigned __int8 *)(a2 + 1);
  v9 = *(unsigned int *)(a2 + 4);
  if (v9 < 4 * (int)v8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/bye.cc");
    return;
  }
  v18 = *(unsigned int **)(a2 + 8);
  if (v9 <= 4 * (int)v8)
  {
    LODWORD(v19) = 0;
  }
  else
  {
    v19 = LOBYTE(v18[*(unsigned __int8 *)(a2 + 1)]);
    if (v9 - 4 * (unint64_t)*(unsigned __int8 *)(a2 + 1) <= v19)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/bye.cc");
      return;
    }
  }
  if (!*(_BYTE *)(a2 + 1))
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
LABEL_33:
    if (v9 <= 4 * (int)v8)
    {
      if (*(char *)(a1 + 63) < 0)
      {
        **(_BYTE **)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 40) = 0;
        *(_BYTE *)(a1 + 63) = 0;
      }
    }
    else
    {
      std::string::__assign_external((std::string *)(a1 + 40), (const std::string::value_type *)v18 + ((4 * (_DWORD)v8) | 1u), v19);
    }
    return;
  }
  v27 = (std::vector<unsigned int> *)(a1 + 16);
  v28 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = bswap32(*v18);
  v29 = (v8 - 1);
  v30 = (*(_QWORD *)(a1 + 24) - v28) >> 2;
  if (v29 <= v30)
  {
    if (v29 < v30)
      *(_QWORD *)(a1 + 24) = v28 + 4 * v29;
  }
  else
  {
    std::vector<int>::__append(v27, v29 - v30);
  }
  if (v8 < 2)
    goto LABEL_33;
  v31 = *(_QWORD *)(a1 + 16);
  v32 = (uint64_t)(*(_QWORD *)(a1 + 24) - v31) >> 2;
  v33 = v8 - 2;
  if (v32 >= v8 - 2)
    v34 = v8 - 2;
  else
    v34 = (uint64_t)(*(_QWORD *)(a1 + 24) - v31) >> 2;
  v35 = v34 + 1;
  if (v35 < 9)
    goto LABEL_25;
  if (v32 < v33)
    v33 = (uint64_t)(*(_QWORD *)(a1 + 24) - v31) >> 2;
  v36 = v33;
  v37 = (const char *)(v18 + 1);
  if (v31 >= (unint64_t)&v18[v36 + 2] || (unint64_t)v37 >= v36 * 4 + v31 + 4)
  {
    v39 = v35 & 7;
    if ((v35 & 7) == 0)
      v39 = 8;
    v40 = v35 - v39;
    v38 = v40 + 1;
    v41 = *(__n128 **)(a1 + 16);
    do
    {
      *(int8x8x4_t *)a5.i8 = vld4_s8(v37);
      v37 += 32;
      v42 = vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_208F04F40), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_208F04F40), 0x10uLL));
      a5 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a5, (int8x16_t)xmmword_208F04F50), 0x18uLL), (int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a6, (int8x16_t)xmmword_208F04F50), 0x10uLL)), vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_208F04F50), 8uLL), vqtbl1q_s8(a8, (int8x16_t)xmmword_208F04F50)));
      a6 = vorrq_s8(v42, vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)vqtbl1q_s8(a7, (int8x16_t)xmmword_208F04F40), 8uLL), vqtbl1q_s8(a8, (int8x16_t)xmmword_208F04F40)));
      *v41 = (__n128)a5;
      v41[1] = (__n128)a6;
      v41 += 2;
      v40 -= 8;
    }
    while (v40);
  }
  else
  {
LABEL_25:
    v38 = 1;
  }
  v43 = (_DWORD *)(4 * v38 + v31 - 4);
  v44 = v32 - v38 + 1;
  v45 = v8 - v38;
  v46 = (uint64_t)&v18[v38] + 1;
  while (v44)
  {
    *v43++ = bswap32(*(_DWORD *)(v46 - 1));
    --v44;
    v46 += 4;
    if (!--v45)
      goto LABEL_33;
  }
  __break(1u);
}

uint64_t webrtc::rtcp::Bye::Create(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int *i;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v12 = *a3;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    v13 = *a3;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v15 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 2;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = (v15 + 1) | 0x80;
    *(_BYTE *)(*a3 + a2 + 1) = -53;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v16 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v16 - 4) >> 2;
    v17 = *a3 + 4;
    *a3 = v17;
    *(_DWORD *)(a2 + v17) = bswap32(*(_DWORD *)(a1 + 8));
    v18 = *a3 + 4;
    *a3 = v18;
    v19 = *(unsigned int **)(a1 + 16);
    for (i = *(unsigned int **)(a1 + 24); v19 != i; *a3 = v18)
    {
      v21 = *v19++;
      *(_DWORD *)(a2 + v18) = bswap32(v21);
      v18 = *a3 + 4;
    }
    if (*(char *)(a1 + 63) < 0)
    {
      v22 = *(_QWORD *)(a1 + 48);
      if (!v22)
        return 1;
    }
    else
    {
      LOBYTE(v22) = *(_BYTE *)(a1 + 63);
      if (!(_BYTE)v22)
        return 1;
    }
    v23 = v14 + v13;
    v24 = (_QWORD *)(a1 + 40);
    *a3 = v18 + 1;
    *(_BYTE *)(a2 + v18) = v22;
    if (*(char *)(a1 + 63) < 0)
      v24 = (_QWORD *)*v24;
    v25 = v22;
    memcpy((void *)(a2 + *a3), v24, v22);
    v26 = *a3 + v25;
    *a3 = v26;
    v27 = v23 - v26;
    if (v23 != v26)
    {
      bzero((void *)(a2 + v26), v23 - v26);
      *a3 += v27;
    }
    return 1;
  }
  while (*a3)
  {
    a6(a5, a2);
    *a3 = 0;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= a4)
      goto LABEL_4;
  }
  return 0;
}

unint64_t webrtc::rtcp::Bye::BlockLength(webrtc::rtcp::Bye *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 2);
  v1 = *((_QWORD *)this + 3);
  if (*((char *)this + 63) < 0)
  {
    v3 = *((_QWORD *)this + 6);
    if (!v3)
      return 4 * (v3 + ((unint64_t)(v1 - v2) >> 2)) + 8;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 63);
    if (!*((_BYTE *)this + 63))
    {
      v3 = 0;
      return 4 * (v3 + ((unint64_t)(v1 - v2) >> 2)) + 8;
    }
  }
  return 4 * ((v3 >> 2) + 1 + ((unint64_t)(v1 - v2) >> 2)) + 8;
}

uint64_t rtc::ByteBufferReader::ReadUVarint(rtc::ByteBufferReader *this, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a2)
    return 0;
  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 3);
  if (v3 == v2)
    return 0;
  v5 = *(_QWORD *)this;
  v6 = *(_BYTE *)(*(_QWORD *)this + v2);
  v7 = v2 + 1;
  *((_QWORD *)this + 2) = v2 + 1;
  v8 = v6 & 0x7F;
  if ((v6 & 0x80) == 0)
    goto LABEL_5;
  if (v3 == v7)
    return 0;
  v9 = *(char *)(v5 + v7);
  v10 = v2 + 2;
  *((_QWORD *)this + 2) = v2 + 2;
  v8 |= (unint64_t)(v9 & 0x7F) << 7;
  if ((v9 & 0x80000000) == 0)
  {
LABEL_5:
    *a2 = v8;
    return 1;
  }
  if (v3 == v10)
    return 0;
  v11 = *(char *)(v5 + v10);
  v12 = v2 + 3;
  *((_QWORD *)this + 2) = v2 + 3;
  v8 |= (unint64_t)(v11 & 0x7F) << 14;
  if ((v11 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v12)
    return 0;
  v13 = *(char *)(v5 + v12);
  v14 = v2 + 4;
  *((_QWORD *)this + 2) = v2 + 4;
  v8 |= (unint64_t)(v13 & 0x7F) << 21;
  if ((v13 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v14)
    return 0;
  v15 = *(char *)(v5 + v14);
  v16 = v2 + 5;
  *((_QWORD *)this + 2) = v2 + 5;
  v8 |= (unint64_t)(v15 & 0x7F) << 28;
  if ((v15 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v16)
    return 0;
  v17 = *(char *)(v5 + v16);
  v18 = v2 + 6;
  *((_QWORD *)this + 2) = v2 + 6;
  v8 |= (unint64_t)(v17 & 0x7F) << 35;
  if ((v17 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v18)
    return 0;
  v19 = *(char *)(v5 + v18);
  v20 = v2 + 7;
  *((_QWORD *)this + 2) = v2 + 7;
  v8 |= (unint64_t)(v19 & 0x7F) << 42;
  if ((v19 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v20)
    return 0;
  v21 = *(char *)(v5 + v20);
  v22 = v2 + 8;
  *((_QWORD *)this + 2) = v2 + 8;
  v8 |= (unint64_t)(v21 & 0x7F) << 49;
  if ((v21 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v22)
    return 0;
  v23 = *(char *)(v5 + v22);
  v24 = v2 + 9;
  *((_QWORD *)this + 2) = v2 + 9;
  v8 |= (unint64_t)(v23 & 0x7F) << 56;
  if ((v23 & 0x80000000) == 0)
    goto LABEL_5;
  if (v3 == v24)
    return 0;
  v25 = v2 + 10;
  v26 = *(unsigned __int8 *)(v5 + v24);
  *((_QWORD *)this + 2) = v25;
  if ((v26 & 0x80) != 0)
    return 0;
  *a2 = v8 | (v26 << 63);
  return 1;
}

unint64_t rtc::ByteBufferReader::ReadString(unint64_t result, std::string *this, size_t __len)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const std::string::value_type *v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type size;
  std::string *v12;
  std::string::size_type v13;

  if (!this)
    return 0;
  v4 = result;
  v5 = *(_QWORD *)(result + 16);
  if (*(_QWORD *)(result + 24) - v5 < __len)
    return 0;
  v7 = *(_QWORD *)result;
  if (!__len || v7)
  {
    v8 = (const std::string::value_type *)(v7 + v5);
    v9 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v10 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v10 - size < __len)
        goto LABEL_8;
    }
    else
    {
      v10 = 22;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if (22 - v9 < __len)
      {
LABEL_8:
        std::string::__grow_by_and_replace(this, v10, __len - v10 + size, size, size, 0, __len, v8);
LABEL_20:
        *(_QWORD *)(v4 + 16) += __len;
        return 1;
      }
    }
    if (!__len)
      goto LABEL_20;
    v12 = this;
    if ((v9 & 0x80) != 0)
    {
      v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      result = this->__r_.__value_.__r.__words[0] + size;
      if (result > (unint64_t)v8)
      {
LABEL_16:
        memmove((void *)result, v8, __len);
        v13 = size + __len;
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          this->__r_.__value_.__l.__size_ = v13;
        else
          *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
        v12->__r_.__value_.__s.__data_[v13] = 0;
        goto LABEL_20;
      }
    }
    else
    {
      result = (unint64_t)this + size;
      if ((char *)this + size > v8)
        goto LABEL_16;
    }
    if (result + __len <= (unint64_t)v8)
      goto LABEL_16;
  }
  __break(1u);
  return result;
}

unint64_t webrtc::Call::Stats::ToString@<X0>(webrtc::Call::Stats *this@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t result;
  size_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *__s;
  __int128 v25;
  char __src;
  char v27[1024];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  __s = v27;
  strcpy(v27, "Call stats: ");
  v25 = xmmword_208F05A30;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", a2);
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 3uLL)
    v5 = 3;
  else
    v5 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", {", v5);
  *((_QWORD *)&v25 + 1) += v5;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0xDuLL)
    v6 = 13;
  else
    v6 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], "send_bw_bps: ", v6);
  *((_QWORD *)&v25 + 1) += v6;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *(_DWORD *)this);
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 2uLL)
    v7 = 2;
  else
    v7 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", ", v7);
  *((_QWORD *)&v25 + 1) += v7;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0xDuLL)
    v8 = 13;
  else
    v8 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], "recv_bw_bps: ", v8);
  *((_QWORD *)&v25 + 1) += v8;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 2));
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 2uLL)
    v9 = 2;
  else
    v9 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", ", v9);
  *((_QWORD *)&v25 + 1) += v9;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0xDuLL)
    v10 = 13;
  else
    v10 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], "max_pad_bps: ", v10);
  *((_QWORD *)&v25 + 1) += v10;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", *((_DWORD *)this + 1));
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 2uLL)
    v11 = 2;
  else
    v11 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", ", v11);
  *((_QWORD *)&v25 + 1) += v11;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 0x10uLL)
    v12 = 16;
  else
    v12 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], "pacer_delay_ms: ", v12);
  *((_QWORD *)&v25 + 1) += v12;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *((_QWORD *)this + 2));
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 2uLL)
    v13 = 2;
  else
    v13 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], ", ", v13);
  *((_QWORD *)&v25 + 1) += v13;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  if ((_QWORD)v25 + ~*((_QWORD *)&v25 + 1) >= 8uLL)
    v14 = 8;
  else
    v14 = v25 + ~*((_QWORD *)&v25 + 1);
  memcpy(&__s[*((_QWORD *)&v25 + 1)], "rtt_ms: ", v14);
  *((_QWORD *)&v25 + 1) += v14;
  __s[*((_QWORD *)&v25 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%lld", *((_QWORD *)this + 3));
  __src = 125;
  v15 = v25;
  v16 = *((_QWORD *)&v25 + 1) + 1;
  memcpy(&__s[*((_QWORD *)&v25 + 1)], &__src, v25 != *((_QWORD *)&v25 + 1) + 1);
  v17 = *((_QWORD *)&v25 + 1);
  if (v15 != v16)
    v17 = *((_QWORD *)&v25 + 1) + 1;
  *((_QWORD *)&v25 + 1) = v17;
  __s[v17] = 0;
  v18 = __s;
  if (!__s)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    abort();
  }
  result = strlen(__s);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_46;
  v20 = result;
  if (result <= 0x16)
  {
    a3[23] = result;
    v21 = &a3[result];
    if (a3 > v18)
      goto LABEL_42;
    goto LABEL_41;
  }
  v22 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((result | 7) != 0x17)
    v22 = result | 7;
  v23 = v22 + 1;
  result = (unint64_t)operator new(v22 + 1);
  *((_QWORD *)a3 + 1) = v20;
  *((_QWORD *)a3 + 2) = v23 | 0x8000000000000000;
  *(_QWORD *)a3 = result;
  a3 = (char *)result;
  v21 = (char *)(result + v20);
  if (result <= (unint64_t)v18)
  {
LABEL_41:
    if (v21 <= v18)
      goto LABEL_42;
    goto LABEL_45;
  }
LABEL_42:
  if (v20)
    result = (unint64_t)memmove(a3, v18, v20);
  *v21 = 0;
  return result;
}

uint64_t webrtc::Call::Create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t result;
  unsigned int *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    v5 = *(_QWORD *)a1;
    v20 = (unsigned int *)v5;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v21 = *(_OWORD *)(a1 + 8);
    v22 = *(_OWORD *)(a1 + 24);
    v24 = *(_DWORD *)(a1 + 48);
    v23 = *(_QWORD *)(a1 + 40);
    v25 = *(_OWORD *)(a1 + 80);
    v26 = *(_QWORD *)(a1 + 136);
    v27 = *(_BYTE *)(a1 + 144);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int **))(*(_QWORD *)v4 + 16))(&v28, v4, &v20);
    v8 = v28;
    v28 = 0;
    v9 = (uint64_t)v20;
    if (v20)
    {
      v10 = v20 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = --v11 == 0;
      }
      while (__stlxr(v11, v10));
      goto LABEL_15;
    }
  }
  else
  {
    v13 = *(_QWORD *)a1;
    v20 = (unsigned int *)v13;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v21 = *(_OWORD *)(a1 + 8);
    v22 = *(_OWORD *)(a1 + 24);
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_DWORD *)(a1 + 48);
    v25 = *(_OWORD *)(a1 + 80);
    v26 = *(_QWORD *)(a1 + 136);
    v27 = *(_BYTE *)(a1 + 144);
    v8 = operator new();
    webrtc::RtpTransportControllerSend::RtpTransportControllerSend(v8, (uint64_t *)&v20);
    v9 = (uint64_t)v20;
    if (v20)
    {
      v16 = v20 + 2;
      do
      {
        v17 = __ldaxr(v16);
        v12 = --v17 == 0;
      }
      while (__stlxr(v17, v16));
LABEL_15:
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v18 = operator new();
  v20 = (unsigned int *)v8;
  webrtc::internal::Call::Call(v18, (uint64_t *)a1, &v20);
  result = (uint64_t)v20;
  if (v20)
    result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
  *a2 = v18;
  return result;
}

uint64_t webrtc::internal::Call::Call(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  void (***v34)(_QWORD);
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t sig;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  internal *v80;
  uint64_t v81;
  char v82;
  __n128 v83;
  __n128 (*v84)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v85)(webrtc::ReceiveSideCongestionController **);
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  pthread_mutexattr_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 24) = &unk_24C0B06E8;
  v6 = a1 + 24;
  *(_QWORD *)a1 = &off_24C0B0570;
  *(_QWORD *)(a1 + 8) = &unk_24C0B0688;
  *(_QWORD *)(a1 + 16) = &unk_24C0B06B8;
  v7 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  v8 = a1 + 32;
  if (v7)
  {
    v9 = (unsigned int *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = v11;
  if (!v12)
  {
    {
      v81 = operator new();
      *(_QWORD *)(v81 + 8) = 0;
      *(_QWORD *)(v81 + 16) = 0;
      *(_QWORD *)v81 = 0;
      pthread_mutexattr_init(&v90);
      pthread_mutexattr_setpolicy_np(&v90, 3);
      pthread_mutex_init((pthread_mutex_t *)(v81 + 24), &v90);
      pthread_mutexattr_destroy(&v90);
      InitCocoaMultiThreading();
      pthread_key_create((pthread_key_t *)(v81 + 88), 0);
      rtc::ThreadManager::Instance(void)::thread_manager = v81;
    }
    v12 = pthread_getspecific(*(_QWORD *)(rtc::ThreadManager::Instance(void)::thread_manager + 88));
  }
  *(_QWORD *)(a1 + 72) = v12;
  v14 = a2[13];
  if (!v14)
    v14 = (uint64_t)v12;
  *(_QWORD *)(a1 + 80) = v14;
  if (a2[15])
  {
    v15 = *(_QWORD *)(a1 + 48);
    v16 = operator new();
    v17 = a2[15];
    v18 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)v16 = v15;
    *(_QWORD *)(v16 + 8) = v18;
    *(_QWORD *)(v16 + 16) = v17;
    *(_QWORD *)(v16 + 24) = 0x7FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v16 + 48) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 32) = v16 + 40;
    *(_BYTE *)(v16 + 56) = 0;
    v19 = operator new();
    *(_DWORD *)v19 = 0;
    *(_BYTE *)(v19 + 4) = 1;
    *(_QWORD *)(v16 + 64) = v19;
    do
      v20 = __ldxr((unsigned int *)v19);
    while (__stxr(v20 + 1, (unsigned int *)v19));
    *(_QWORD *)(a1 + 88) = v16;
    if ((v21 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
    if ((v22 & 1) != 0)
      goto LABEL_15;
  }
  if ((_DWORD)v80)
  {
    webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus = internal::DetectNumberOfCores(v80);
  }
LABEL_15:
  *(_DWORD *)(a1 + 96) = webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus;
  v23 = (_QWORD *)operator new();
  v24 = *(_QWORD *)(a1 + 48);
  v25 = *(_QWORD *)(a1 + 72);
  *v23 = &unk_24C0B07A0;
  v23[1] = v23;
  v23[2] = v24;
  v23[3] = 0;
  v23[4] = -1;
  v23[5] = -1;
  v23[6] = 0;
  v23[7] = 0;
  v23[8] = -1;
  v23[9] = v23 + 9;
  v23[10] = v23 + 9;
  v23[11] = 0;
  v23[12] = v23 + 12;
  v23[13] = v23 + 12;
  v23[14] = 0;
  v23[15] = v25;
  v26 = operator new();
  *(_DWORD *)v26 = 0;
  *(_BYTE *)(v26 + 4) = 1;
  v23[16] = v26;
  do
    v27 = __ldxr((unsigned int *)v26);
  while (__stxr(v27 + 1, (unsigned int *)v26));
  *(_QWORD *)(a1 + 104) = v23;
  v28 = operator new();
  *(_QWORD *)v28 = &off_24C0B0168;
  *(_QWORD *)(v28 + 8) = v6;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_OWORD *)(v28 + 32) = 0u;
  *(_DWORD *)(v28 + 48) = 300000;
  *(_BYTE *)(v28 + 52) = 0;
  *(_OWORD *)(v28 + 56) = xmmword_208F058E0;
  *(_DWORD *)(v28 + 72) = 0;
  *(_OWORD *)(v28 + 80) = 0u;
  *(_OWORD *)(v28 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = v28;
  v29 = *a2;
  *(_QWORD *)(a1 + 120) = *a2;
  if (v29)
  {
    v30 = (unsigned int *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  v32 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 144) = v32;
  v33 = a2[5];
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 12);
  *(_QWORD *)(a1 + 160) = v33;
  v34 = (void (***)(_QWORD))a2[7];
  *(_QWORD *)(a1 + 176) = v34;
  if (v34)
    (**v34)(v34);
  v35 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 200) = *((_OWORD *)a2 + 5);
  *(_OWORD *)(a1 + 184) = v35;
  v36 = *((_OWORD *)a2 + 6);
  v37 = *((_OWORD *)a2 + 7);
  v38 = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 257) = *(_OWORD *)((char *)a2 + 137);
  *(_OWORD *)(a1 + 248) = v38;
  *(_OWORD *)(a1 + 232) = v37;
  *(_OWORD *)(a1 + 216) = v36;
  *(_QWORD *)(a1 + 280) = 0x100000001;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 20000;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 360) = a1 + 368;
  *(_QWORD *)(a1 + 384) = &off_24C0BDE80;
  *(_QWORD *)(a1 + 392) = &unk_24C0BDEB0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 456) = a1 + 464;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 585) = 0u;
  *(_QWORD *)(a1 + 608) = &off_24C0BDE80;
  *(_QWORD *)(a1 + 616) = &unk_24C0BDEB0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_QWORD *)(a1 + 680) = a1 + 688;
  *(_OWORD *)(a1 + 809) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_QWORD *)(a1 + 832) = a1 + 840;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 856) = a1 + 864;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_QWORD *)(a1 + 880) = a1 + 888;
  *(_BYTE *)(a1 + 904) = 1;
  *(_QWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_QWORD *)(a1 + 952) = 0;
  *(_QWORD *)(a1 + 944) = 0;
  *(_QWORD *)(a1 + 936) = a1 + 944;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  *(_QWORD *)(a1 + 960) = a1 + 968;
  *(_QWORD *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 992) = 0;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  v39 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 1008) = off_24C0C1308;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1024) = 2000;
  v40 = operator new();
  *(_DWORD *)v40 = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 24) = -1;
  *(_DWORD *)(v40 + 32) = -1;
  *(_QWORD *)(a1 + 1032) = v40;
  v41 = (_QWORD *)operator new();
  v41[2] = 0;
  v41[3] = 0;
  *v41 = 0;
  v41[1] = v41 + 2;
  *(_QWORD *)(a1 + 1040) = v41;
  *(_QWORD *)(a1 + 1048) = v39;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1064) = -1;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_QWORD *)(a1 + 1080) = -1;
  *(_QWORD *)(a1 + 1088) = 0;
  *(_QWORD *)(a1 + 1008) = &unk_24C0C1398;
  *(_QWORD *)(a1 + 1096) = off_24C0C1308;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1112) = 2000;
  v42 = operator new();
  *(_DWORD *)v42 = 0;
  *(_QWORD *)(v42 + 8) = 0;
  *(_QWORD *)(v42 + 16) = 0;
  *(_QWORD *)(v42 + 24) = -1;
  *(_DWORD *)(v42 + 32) = -1;
  *(_QWORD *)(a1 + 1120) = v42;
  v43 = (_QWORD *)operator new();
  v43[3] = 0;
  v43[2] = 0;
  *v43 = 0;
  v43[1] = v43 + 2;
  *(_QWORD *)(a1 + 1128) = v43;
  *(_QWORD *)(a1 + 1136) = v39;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1152) = -1;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1168) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 1096) = &unk_24C0C1398;
  *(_QWORD *)(a1 + 1184) = off_24C0C1308;
  *(_BYTE *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1200) = 2000;
  v44 = operator new();
  *(_DWORD *)v44 = 0;
  *(_QWORD *)(v44 + 8) = 0;
  *(_QWORD *)(v44 + 16) = 0;
  *(_QWORD *)(v44 + 24) = -1;
  *(_DWORD *)(v44 + 32) = -1;
  *(_QWORD *)(a1 + 1208) = v44;
  v45 = (_QWORD *)operator new();
  v45[3] = 0;
  v45[2] = 0;
  *v45 = 0;
  v45[1] = v45 + 2;
  *(_QWORD *)(a1 + 1216) = v45;
  *(_QWORD *)(a1 + 1224) = v39;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1240) = -1;
  *(_BYTE *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1256) = -1;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1184) = &unk_24C0C1398;
  *(_QWORD *)(a1 + 1272) = off_24C0C1308;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1288) = 2000;
  v46 = operator new();
  *(_DWORD *)v46 = 0;
  *(_QWORD *)(v46 + 8) = 0;
  *(_QWORD *)(v46 + 16) = 0;
  *(_QWORD *)(v46 + 24) = -1;
  *(_DWORD *)(v46 + 32) = -1;
  *(_QWORD *)(a1 + 1296) = v46;
  v47 = (_QWORD *)operator new();
  v47[3] = 0;
  v47[2] = 0;
  *v47 = 0;
  v47[1] = v47 + 2;
  *(_QWORD *)(a1 + 1304) = v47;
  *(_QWORD *)(a1 + 1312) = v39;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1328) = -1;
  *(_BYTE *)(a1 + 1336) = 0;
  *(_OWORD *)(a1 + 1344) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 1272) = &unk_24C0C1398;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_BYTE *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 1392) = 0;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1416) = 0;
  v48 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 1424) = v48;
  *(_QWORD *)(a1 + 1432) = off_24C0C1308;
  *(_BYTE *)(a1 + 1440) = 1;
  *(_QWORD *)(a1 + 1448) = 2000;
  v49 = operator new();
  *(_DWORD *)v49 = 0;
  *(_QWORD *)(v49 + 8) = 0;
  *(_QWORD *)(v49 + 16) = 0;
  *(_QWORD *)(v49 + 24) = -1;
  *(_DWORD *)(v49 + 32) = -1;
  *(_QWORD *)(a1 + 1456) = v49;
  v50 = (_QWORD *)operator new();
  v50[3] = 0;
  v50[2] = 0;
  *v50 = 0;
  v50[1] = v50 + 2;
  *(_QWORD *)(a1 + 1464) = v50;
  *(_QWORD *)(a1 + 1472) = v48;
  *(_QWORD *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1488) = -1;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = xmmword_208F05A40;
  *(_QWORD *)(a1 + 1432) = &unk_24C0C1338;
  *(_QWORD *)(a1 + 1520) = off_24C0C1308;
  *(_BYTE *)(a1 + 1528) = 1;
  *(_QWORD *)(a1 + 1536) = 2000;
  v51 = operator new();
  *(_DWORD *)v51 = 0;
  *(_QWORD *)(v51 + 8) = 0;
  *(_QWORD *)(v51 + 16) = 0;
  *(_QWORD *)(v51 + 24) = -1;
  *(_DWORD *)(v51 + 32) = -1;
  *(_QWORD *)(a1 + 1544) = v51;
  v52 = (_QWORD *)operator new();
  v52[3] = 0;
  v52[2] = 0;
  *v52 = 0;
  v52[1] = v52 + 2;
  *(_QWORD *)(a1 + 1552) = v52;
  *(_QWORD *)(a1 + 1560) = v48;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1576) = -1;
  *(_BYTE *)(a1 + 1584) = 0;
  *(_QWORD *)(a1 + 1592) = -1;
  *(_QWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1520) = &unk_24C0C1338;
  *(_DWORD *)(a1 + 1608) = 0;
  *(_BYTE *)(a1 + 1616) = 0;
  *(_BYTE *)(a1 + 1624) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  v53 = a1 + 1640;
  v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v55 = operator new(0x20uLL);
  *v55 = &off_24C0B0710;
  v55[1] = webrtc::PacketRouter::SendCombinedRtcpPacket;
  v55[2] = 0;
  v55[3] = v54;
  v89 = v55;
  v56 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v57 = operator new(0x20uLL);
  *v57 = &off_24C0B0758;
  v57[1] = webrtc::PacketRouter::SendRemb;
  v57[2] = 0;
  v57[3] = v56;
  v87 = v57;
  webrtc::ReceiveSideCongestionController::ReceiveSideCongestionController(a1 + 1640, v8, v88, v86, 0);
  v58 = v87;
  if (v87 == v86)
  {
    v59 = 4;
    v58 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_27;
    v59 = 5;
  }
  (*(void (**)(void))(*v58 + 8 * v59))();
LABEL_27:
  v60 = v89;
  if (v89 == v88)
  {
    v61 = 4;
    v60 = v88;
  }
  else
  {
    if (!v89)
      goto LABEL_32;
    v61 = 5;
  }
  (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_32:
  *(_QWORD *)(a1 + 2096) = 0;
  webrtc::ReceiveTimeCalculator::CreateFromFieldTrial(*(_QWORD *)(a1 + 40), (uint64_t *)(a1 + 2104));
  v62 = operator new();
  *(_QWORD *)v62 = *(_QWORD *)(a1 + 48);
  pthread_mutexattr_init(&v90);
  pthread_mutexattr_setpolicy_np(&v90, 3);
  pthread_mutex_init((pthread_mutex_t *)(v62 + 8), &v90);
  pthread_mutexattr_destroy(&v90);
  *(_QWORD *)(v62 + 80) = 0;
  *(_QWORD *)(v62 + 72) = v62 + 80;
  *(_QWORD *)(v62 + 128) = 0;
  *(_QWORD *)(v62 + 120) = 0;
  *(_QWORD *)(v62 + 88) = 0;
  *(_QWORD *)(v62 + 96) = 0;
  *(_QWORD *)(v62 + 104) = 0;
  *(_QWORD *)(v62 + 112) = v62 + 120;
  *(_QWORD *)(a1 + 2112) = v62;
  *(_QWORD *)(a1 + 2120) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v63 = operator new();
  *(_DWORD *)v63 = 0;
  *(_BYTE *)(v63 + 4) = 1;
  *(_QWORD *)(a1 + 2128) = v63;
  do
    v64 = __ldxr((unsigned int *)v63);
  while (__stxr(v64 + 1, (unsigned int *)v63));
  *(_QWORD *)(a1 + 2136) = *a3;
  v65 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 2144) = v65;
  *(_BYTE *)(a1 + 2152) = 0;
  *(_BYTE *)(a1 + 2160) = 0;
  *(_BYTE *)(a1 + 2216) = 0;
  v90.__sig = (uint64_t)"WebRTC source stamp 2024-05-13T04:02:33";
  v66 = *(_QWORD **)(a1 + 104);
  v67 = v66 + 12;
  v68 = (_QWORD *)v66[13];
  if (v68 == v66 + 12)
    goto LABEL_37;
  while (v68[2] != v53)
  {
    v68 = (_QWORD *)v68[1];
    if (v68 == v67)
      goto LABEL_37;
  }
  if (v68 == v67)
  {
LABEL_37:
    v69 = operator new(0x18uLL);
    v69[1] = v67;
    v69[2] = v53;
    v70 = v66[12];
    *v69 = v70;
    *(_QWORD *)(v70 + 8) = v69;
    v66[12] = v69;
    ++v66[14];
  }
  v71 = *(_QWORD *)(a1 + 72);
  v83.n128_u64[0] = a1 + 1640;
  v84 = absl::internal_any_invocable::LocalManagerTrivial;
  v85 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::Call::Call(webrtc::CallConfig const&,std::unique_ptr<webrtc::RtpTransportControllerSendInterface>)::$_0 &>;
  webrtc::RepeatingTaskHandle::Start(v71, (uint64_t)&v83, 0, *(_QWORD *)(a1 + 48), (uint64_t)&v82, (unsigned int **)&v90);
  sig = v90.__sig;
  v90.__sig = 0;
  v73 = *(unsigned int **)(a1 + 2096);
  *(_QWORD *)(a1 + 2096) = sig;
  if (v73)
  {
    do
    {
      v74 = __ldaxr(v73);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, v73));
    if (!v75)
      MEMORY[0x20BD0ADEC]();
    v76 = (unsigned int *)v90.__sig;
    if (v90.__sig)
    {
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
        MEMORY[0x20BD0ADEC]();
    }
  }
  v84(1, &v83, &v83);
  return a1;
}

void webrtc::internal::Call::~Call(webrtc::internal::Call *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  webrtc::SendDelayStats *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  webrtc::internal::Call *v37;
  uint64_t v38;
  webrtc::internal::Call *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  __int128 *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  std::string *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::string *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::string *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  _QWORD *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  unsigned int *v184;
  unsigned int v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int *v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  webrtc::internal::CallStats *v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int *v198;
  unsigned int *v199;
  unsigned int v200;
  unsigned int v201;
  std::string *v202;
  uint64_t v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string __p;
  __int128 v208;
  uint64_t v209;

  if (*((_QWORD *)this + 106))
    goto LABEL_287;
  if (*((_QWORD *)this + 109))
  {
LABEL_288:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc", 705, "video_send_ssrcs_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v203);
    goto LABEL_289;
  }
  if (*((_QWORD *)this + 112))
  {
LABEL_289:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc", 706, "video_send_streams_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v203);
    goto LABEL_290;
  }
  if (*((_QWORD *)this + 44))
  {
LABEL_290:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc", 707, "audio_receive_streams_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v203);
    goto LABEL_291;
  }
  if (*((_QWORD *)this + 47))
  {
LABEL_291:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc", 708, "video_receive_streams_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v203);
    goto LABEL_292;
  }
  v9 = *((_QWORD *)this + 262);
  if (v9)
  {
    *(_BYTE *)(v9 + 4) = 0;
    do
    {
      v10 = __ldaxr((unsigned int *)v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)v9));
    if (!v11)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 262) = 0;
  }
  v12 = *((_QWORD *)this + 13);
  *(_QWORD *)&v208 = (char *)this + 1640;
  std::list<webrtc::CallStatsObserver *>::remove((_QWORD *)(v12 + 96), &v208);
  *((_QWORD *)this + 202) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 268) + 152))(*((_QWORD *)this + 268));
  *((_BYTE *)this + 1624) = v13;
  v14 = atomic_load(&qword_253EA5548);
  if (v14)
  {
    v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
    v16 = *((_QWORD *)this + 265);
    v17 = 0x7FFFFFFFFFFFFFFFLL;
    v18 = 0x8000000000000000;
    v19 = v15 == 0x7FFFFFFFFFFFFFFFLL || v16 == 0x8000000000000000;
    if (!v19
      && (v15 != 0x8000000000000000 ? (v20 = v16 == 0x7FFFFFFFFFFFFFFFLL) : (v20 = 1),
          v20 || (v18 = v15 - v16, v17 = v15 - v16, v15 - v16 < 0)))
    {
      v23 = -(uint64_t)v18;
      v24 = v23 / 0xF4240;
      if (v23 % 0xF4240 <= 0x7A120)
        v25 = 0;
      else
        v25 = -1;
      LODWORD(v21) = v25 - v24;
    }
    else if (v17 % 0xF4240 <= 0x7A11F)
    {
      v21 = v17 / 0xF4240;
    }
    else
    {
      LODWORD(v21) = v17 / 0xF4240 + 1;
    }
    webrtc::metrics::HistogramAdd(v14, v21);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5548))
    {
      if (!__stlxr(0, &qword_253EA5548))
        goto LABEL_33;
    }
    __clrex();
  }
LABEL_33:
  v26 = *((_QWORD *)this + 268);
  *((_QWORD *)this + 268) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *((_QWORD *)this + 266);
  *(_BYTE *)(v27 + 4) = 0;
  do
  {
    v28 = __ldaxr((unsigned int *)v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v27));
  if (!v29)
    MEMORY[0x20BD0ADEC]();
  v30 = (webrtc::SendDelayStats *)*((_QWORD *)this + 264);
  *((_QWORD *)this + 264) = 0;
  if (v30)
  {
    webrtc::SendDelayStats::~SendDelayStats(v30);
    MEMORY[0x20BD0ADEC]();
  }
  v31 = *((_QWORD *)this + 263);
  *((_QWORD *)this + 263) = 0;
  if (v31)
  {
    webrtc::ReceiveTimeCalculatorConfig::~ReceiveTimeCalculatorConfig((webrtc::ReceiveTimeCalculatorConfig *)(v31 + 56));
    MEMORY[0x20BD0ADEC](v31, 0x1092C40273EB4E6);
  }
  v32 = (unsigned int *)*((_QWORD *)this + 262);
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 205) = &off_24C0BB048;
  v35 = *((_QWORD *)this + 260);
  *((_QWORD *)this + 260) = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 2016));
  v36 = *((_QWORD *)this + 244);
  *((_QWORD *)this + 244) = 0;
  if (v36)
    MEMORY[0x20BD0ADD4](v36, 0x1000C8000313F17);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1832));
  v37 = (webrtc::internal::Call *)*((_QWORD *)this + 227);
  if (v37 == (webrtc::internal::Call *)((char *)this + 1792))
  {
    v38 = 4;
    v37 = (webrtc::internal::Call *)((char *)this + 1792);
  }
  else
  {
    if (!v37)
      goto LABEL_56;
    v38 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
LABEL_56:
  *((_QWORD *)this + 207) = &off_24C0BB420;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1704));
  v39 = (webrtc::internal::Call *)*((_QWORD *)this + 211);
  if (v39 == (webrtc::internal::Call *)((char *)this + 1664))
  {
    v40 = 4;
    v39 = (webrtc::internal::Call *)((char *)this + 1664);
  }
  else
  {
    if (!v39)
      goto LABEL_61;
    v40 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v39 + 8 * v40))();
LABEL_61:
  if (*((_BYTE *)this + 1624))
  {
    v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 178) + 16))(*((_QWORD *)this + 178));
    if (!*((_BYTE *)this + 1624))
      goto LABEL_286;
    v42 = *((_QWORD *)this + 202);
    v43 = 0x7FFFFFFFFFFFFFFFLL;
    v44 = v41 == 0x7FFFFFFFFFFFFFFFLL || v42 == 0x8000000000000000;
    if (v44
      || v41 != 0x8000000000000000
      && v42 != 0x7FFFFFFFFFFFFFFFLL
      && (v43 = v41 - v42, ((v41 - v42) & 0x8000000000000000) == 0))
    {
      v45 = v43 / 0xF4240;
      if (v43 % 0xF4240 > 0x7A11F)
        ++v45;
      if (v45 >= 0xA)
      {
        if (*((_QWORD *)this + 186) != -1)
          webrtc::StatsCounter::TryProcess((webrtc::internal::Call *)((char *)this + 1432));
        v46 = *((_QWORD *)this + 182);
        v49 = *(_QWORD *)(v46 + 16);
        v47 = (__int128 *)(v46 + 16);
        v48 = v49;
        if (v49)
        {
          if (v48 >= 0)
            v50 = v48;
          else
            v50 = v48 + 1;
          *(_DWORD *)(*((_QWORD *)this + 182) + 32) = (*(_QWORD *)(*((_QWORD *)this + 182) + 8) + (v50 >> 1)) / v48;
        }
        v208 = *v47;
        v209 = *((_QWORD *)v47 + 2);
        if ((uint64_t)v208 >= 6)
        {
          v51 = atomic_load(&qword_253EA5538);
          if (v51)
          {
            webrtc::metrics::HistogramAdd(v51, v209);
          }
          else
          {
            while (!__ldaxr(&qword_253EA5538))
            {
              if (!__stlxr(0, &qword_253EA5538))
                goto LABEL_86;
            }
            __clrex();
          }
LABEL_86:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
            webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v208, 1, &__p);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v53, v54, v55, v56, v57, v58, v59, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (*((_QWORD *)this + 197) != -1)
          webrtc::StatsCounter::TryProcess((webrtc::internal::Call *)((char *)this + 1520));
        v60 = *((_QWORD *)this + 193);
        v63 = *(_QWORD *)(v60 + 16);
        v61 = (std::string *)(v60 + 16);
        v62 = v63;
        if (v63)
        {
          if (v62 >= 0)
            v64 = v62;
          else
            v64 = v62 + 1;
          *(_DWORD *)(*((_QWORD *)this + 193) + 32) = (*(_QWORD *)(*((_QWORD *)this + 193) + 8) + (v64 >> 1)) / v62;
        }
        __p = *v61;
        if ((uint64_t)__p.__r_.__value_.__l.__data_ >= 6)
        {
          v65 = atomic_load(&qword_253EA5540);
          if (v65)
          {
            webrtc::metrics::HistogramAdd(v65, __p.__r_.__value_.__r.__words[2]);
          }
          else
          {
            while (!__ldaxr(&qword_253EA5540))
            {
              if (!__stlxr(0, &qword_253EA5540))
                goto LABEL_102;
            }
            __clrex();
          }
LABEL_102:
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          {
            webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&__p, 1, &v206);
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v67, v68, v69, v70, v71, v72, v73, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
            if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v206.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  *((_QWORD *)this + 190) = off_24C0C1308;
  v74 = *((_QWORD *)this + 196);
  *((_QWORD *)this + 196) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 16))(v74);
  v75 = *((_QWORD *)this + 194);
  *((_QWORD *)this + 194) = 0;
  if (v75)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v75 + 8, *(_QWORD **)(v75 + 16));
    MEMORY[0x20BD0ADEC](v75, 0x1020C40C0D28DD2);
  }
  v76 = *((_QWORD *)this + 193);
  *((_QWORD *)this + 193) = 0;
  if (v76)
    MEMORY[0x20BD0ADEC](v76, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 179) = off_24C0C1308;
  v77 = *((_QWORD *)this + 185);
  *((_QWORD *)this + 185) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 16))(v77);
  v78 = *((_QWORD *)this + 183);
  *((_QWORD *)this + 183) = 0;
  if (v78)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v78 + 8, *(_QWORD **)(v78 + 16));
    MEMORY[0x20BD0ADEC](v78, 0x1020C40C0D28DD2);
  }
  v79 = *((_QWORD *)this + 182);
  *((_QWORD *)this + 182) = 0;
  if (v79)
    MEMORY[0x20BD0ADEC](v79, 0x1000C407607B2BCLL);
  if (*((_BYTE *)this + 1368))
  {
    v80 = atomic_load(&_MergedGlobals_5);
    if (v80)
    {
      if (*((_BYTE *)this + 1384) && *((_BYTE *)this + 1368))
      {
        v81 = *((_QWORD *)this + 172);
        v82 = 0x7FFFFFFFFFFFFFFFLL;
        if (v81 != 0x7FFFFFFFFFFFFFFFLL
          && (v83 = *((_QWORD *)this + 170), v84 = 0x8000000000000000, v83 != 0x8000000000000000)
          && (v81 == 0x8000000000000000
           || v83 == 0x7FFFFFFFFFFFFFFFLL
           || (v84 = v81 - v83, v82 = v81 - v83, v81 - v83 < 0)))
        {
          v87 = -(uint64_t)v84;
          v88 = v87 / 0xF4240;
          if (v87 % 0xF4240 <= 0x7A120)
            v89 = 0;
          else
            v89 = -1;
          LODWORD(v85) = v89 - v88;
        }
        else if (v82 % 0xF4240 <= 0x7A11F)
        {
          v85 = v82 / 0xF4240;
        }
        else
        {
          LODWORD(v85) = v82 / 0xF4240 + 1;
        }
        webrtc::metrics::HistogramAdd(v80, v85);
        if (!*((_BYTE *)this + 1400))
          goto LABEL_158;
        goto LABEL_139;
      }
LABEL_286:
      __break(1u);
LABEL_287:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc", 704, "audio_send_ssrcs_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v203);
      goto LABEL_288;
    }
    while (!__ldaxr(&_MergedGlobals_5))
    {
      if (!__stlxr(0, &_MergedGlobals_5))
        goto LABEL_132;
    }
    __clrex();
  }
LABEL_132:
  if (!*((_BYTE *)this + 1400))
    goto LABEL_158;
LABEL_139:
  v90 = atomic_load(&qword_253EA5510);
  if (v90)
  {
    if (*((_BYTE *)this + 1416) && *((_BYTE *)this + 1400))
    {
      v91 = *((_QWORD *)this + 176);
      v92 = 0x7FFFFFFFFFFFFFFFLL;
      if (v91 != 0x7FFFFFFFFFFFFFFFLL
        && (v93 = *((_QWORD *)this + 174), v94 = 0x8000000000000000, v93 != 0x8000000000000000)
        && (v91 == 0x8000000000000000
         || v93 == 0x7FFFFFFFFFFFFFFFLL
         || (v94 = v91 - v93, v92 = v91 - v93, v91 - v93 < 0)))
      {
        v97 = -(uint64_t)v94;
        v98 = v97 / 0xF4240;
        if (v97 % 0xF4240 <= 0x7A120)
          v99 = 0;
        else
          v99 = -1;
        LODWORD(v95) = v99 - v98;
      }
      else if (v92 % 0xF4240 <= 0x7A11F)
      {
        v95 = v92 / 0xF4240;
      }
      else
      {
        LODWORD(v95) = v92 / 0xF4240 + 1;
      }
      webrtc::metrics::HistogramAdd(v90, v95);
      goto LABEL_158;
    }
    goto LABEL_286;
  }
  while (!__ldaxr(&qword_253EA5510))
  {
    if (!__stlxr(0, &qword_253EA5510))
      goto LABEL_158;
  }
  __clrex();
LABEL_158:
  v100 = *((_QWORD *)this + 151);
  v103 = *(_QWORD *)(v100 + 16);
  v101 = (__int128 *)(v100 + 16);
  v102 = v103;
  if (v103)
  {
    if (v102 >= 0)
      v104 = v102;
    else
      v104 = v102 + 1;
    *(_DWORD *)(*((_QWORD *)this + 151) + 32) = (*(_QWORD *)(*((_QWORD *)this + 151) + 8) + (v104 >> 1)) / v102;
  }
  v208 = *v101;
  v209 = *((_QWORD *)v101 + 2);
  if ((uint64_t)v208 >= 6)
  {
    v105 = atomic_load(&qword_253EA5518);
    if (v105)
    {
      webrtc::metrics::HistogramAdd(v105, (int)v209 / 125);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5518))
      {
        if (!__stlxr(0, &qword_253EA5518))
          goto LABEL_169;
      }
      __clrex();
    }
LABEL_169:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v208, 8, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v107, v108, v109, v110, v111, v112, v113, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v114 = *((_QWORD *)this + 140);
  v117 = *(_QWORD *)(v114 + 16);
  v115 = (std::string *)(v114 + 16);
  v116 = v117;
  if (v117)
  {
    if (v116 >= 0)
      v118 = v116;
    else
      v118 = v116 + 1;
    *(_DWORD *)(*((_QWORD *)this + 140) + 32) = (*(_QWORD *)(*((_QWORD *)this + 140) + 8) + (v118 >> 1)) / v116;
  }
  __p = *v115;
  if ((uint64_t)__p.__r_.__value_.__l.__data_ >= 6)
  {
    v119 = atomic_load(&qword_253EA5520);
    if (v119)
    {
      webrtc::metrics::HistogramAdd(v119, SLODWORD(__p.__r_.__value_.__r.__words[2]) / 125);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5520))
      {
        if (!__stlxr(0, &qword_253EA5520))
          goto LABEL_183;
      }
      __clrex();
    }
LABEL_183:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&__p, 8, &v206);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v121, v122, v123, v124, v125, v126, v127, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v206.__r_.__value_.__l.__data_);
    }
  }
  v128 = *((_QWORD *)this + 162);
  v131 = *(_QWORD *)(v128 + 16);
  v129 = (std::string *)(v128 + 16);
  v130 = v131;
  if (v131)
  {
    if (v130 >= 0)
      v132 = v130;
    else
      v132 = v130 + 1;
    *(_DWORD *)(*((_QWORD *)this + 162) + 32) = (*(_QWORD *)(*((_QWORD *)this + 162) + 8) + (v132 >> 1)) / v130;
  }
  v206 = *v129;
  if ((uint64_t)v206.__r_.__value_.__l.__data_ >= 6)
  {
    v133 = atomic_load(&qword_253EA5528);
    if (v133)
    {
      webrtc::metrics::HistogramAdd(v133, 8 * LODWORD(v206.__r_.__value_.__r.__words[2]));
    }
    else
    {
      while (!__ldaxr(&qword_253EA5528))
      {
        if (!__stlxr(0, &qword_253EA5528))
          goto LABEL_197;
      }
      __clrex();
    }
LABEL_197:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v206, 8, &v205);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v135, v136, v137, v138, v139, v140, v141, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v205.__r_.__value_.__l.__data_);
    }
  }
  v142 = *((_QWORD *)this + 129);
  v145 = *(_QWORD *)(v142 + 16);
  v143 = (std::string *)(v142 + 16);
  v144 = v145;
  if (v145)
  {
    if (v144 >= 0)
      v146 = v144;
    else
      v146 = v144 + 1;
    *(_DWORD *)(*((_QWORD *)this + 129) + 32) = (*(_QWORD *)(*((_QWORD *)this + 129) + 8) + (v146 >> 1)) / v144;
  }
  v205 = *v143;
  if ((uint64_t)v205.__r_.__value_.__l.__data_ >= 6)
  {
    v147 = atomic_load(&qword_253EA5530);
    if (v147)
    {
      webrtc::metrics::HistogramAdd(v147, SLODWORD(v205.__r_.__value_.__r.__words[2]) / 125);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5530))
      {
        if (!__stlxr(0, &qword_253EA5530))
          goto LABEL_211;
      }
      __clrex();
    }
LABEL_211:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v205, 8, &v204);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v149, v150, v151, v152, v153, v154, v155, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v204.__r_.__value_.__l.__data_);
    }
  }
  *((_QWORD *)this + 159) = off_24C0C1308;
  v156 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 16))(v156);
  v157 = *((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v157)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v157 + 8, *(_QWORD **)(v157 + 16));
    MEMORY[0x20BD0ADEC](v157, 0x1020C40C0D28DD2);
  }
  v158 = *((_QWORD *)this + 162);
  *((_QWORD *)this + 162) = 0;
  if (v158)
    MEMORY[0x20BD0ADEC](v158, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 148) = off_24C0C1308;
  v159 = *((_QWORD *)this + 154);
  *((_QWORD *)this + 154) = 0;
  if (v159)
    (*(void (**)(uint64_t))(*(_QWORD *)v159 + 16))(v159);
  v160 = *((_QWORD *)this + 152);
  *((_QWORD *)this + 152) = 0;
  if (v160)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v160 + 8, *(_QWORD **)(v160 + 16));
    MEMORY[0x20BD0ADEC](v160, 0x1020C40C0D28DD2);
  }
  v161 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v161)
    MEMORY[0x20BD0ADEC](v161, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 137) = off_24C0C1308;
  v162 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v162)
    (*(void (**)(uint64_t))(*(_QWORD *)v162 + 16))(v162);
  v163 = *((_QWORD *)this + 141);
  *((_QWORD *)this + 141) = 0;
  if (v163)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v163 + 8, *(_QWORD **)(v163 + 16));
    MEMORY[0x20BD0ADEC](v163, 0x1020C40C0D28DD2);
  }
  v164 = *((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v164)
    MEMORY[0x20BD0ADEC](v164, 0x1000C407607B2BCLL);
  *((_QWORD *)this + 126) = off_24C0C1308;
  v165 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = 0;
  if (v165)
    (*(void (**)(uint64_t))(*(_QWORD *)v165 + 16))(v165);
  v166 = *((_QWORD *)this + 130);
  *((_QWORD *)this + 130) = 0;
  if (v166)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v166 + 8, *(_QWORD **)(v166 + 16));
    MEMORY[0x20BD0ADEC](v166, 0x1020C40C0D28DD2);
  }
  v167 = *((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v167)
    MEMORY[0x20BD0ADEC](v167, 0x1000C407607B2BCLL);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 984, *((_QWORD **)this + 124));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 960, *((_QWORD **)this + 121));
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 936, *((_QWORD **)this + 118));
  v168 = (_QWORD *)*((_QWORD *)this + 114);
  if (v168)
  {
    v169 = (_QWORD *)*((_QWORD *)this + 115);
    v170 = (void *)*((_QWORD *)this + 114);
    if (v169 != v168)
    {
      do
      {
        v172 = *--v169;
        v171 = v172;
        *v169 = 0;
        if (v172)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v171 + 16));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v171 + 8) + 40))(*(_QWORD *)(v171 + 8), 0);
          *(_BYTE *)(v171 + 80) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(v171 + 16));
          std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v171 + 120));
          *(_QWORD *)v171 = &off_24C0B0380;
          v173 = *(_QWORD *)(v171 + 88);
          if (v173)
          {
            v174 = *(_QWORD *)(v171 + 96);
            v175 = *(void **)(v171 + 88);
            if (v174 != v173)
            {
              do
              {
                v177 = *(_QWORD *)(v174 - 8);
                v174 -= 8;
                v176 = v177;
                if (v177)
                  (*(void (**)(uint64_t))(*(_QWORD *)v176 + 8))(v176);
              }
              while (v174 != v173);
              v175 = *(void **)(v171 + 88);
            }
            *(_QWORD *)(v171 + 96) = v173;
            operator delete(v175);
          }
          pthread_mutex_destroy((pthread_mutex_t *)(v171 + 16));
          v178 = *(_QWORD *)(v171 + 8);
          if (v178)
            (*(void (**)(uint64_t))(*(_QWORD *)v178 + 8))(v178);
          MEMORY[0x20BD0ADEC](v171, 0x10A0C4099F1F9CDLL);
        }
      }
      while (v169 != v168);
      v170 = (void *)*((_QWORD *)this + 114);
    }
    *((_QWORD *)this + 115) = v168;
    operator delete(v170);
  }
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 111));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 108));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 105));
  *((_QWORD *)this + 76) = &off_24C0BDE80;
  *((_QWORD *)this + 77) = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::internal::Call *)((char *)this + 632));
  *((_QWORD *)this + 48) = &off_24C0BDE80;
  *((_QWORD *)this + 49) = &unk_24C0BDEB0;
  webrtc::RtpDemuxer::~RtpDemuxer((webrtc::internal::Call *)((char *)this + 408));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 46));
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 43));
  v183 = (void *)*((_QWORD *)this + 39);
  if (v183)
  {
    *((_QWORD *)this + 40) = v183;
    operator delete(v183);
  }
  v184 = (unsigned int *)*((_QWORD *)this + 38);
  if (v184)
  {
    do
    {
      v185 = __ldaxr(v184);
      v186 = v185 - 1;
    }
    while (__stlxr(v186, v184));
    if (!v186)
      MEMORY[0x20BD0ADEC]();
  }
  v187 = *((_QWORD *)this + 22);
  if (v187)
    (*(void (**)(uint64_t))(*(_QWORD *)v187 + 8))(v187);
  v188 = (unsigned int *)*((_QWORD *)this + 15);
  if (v188)
  {
    v189 = v188 + 2;
    do
    {
      v190 = __ldaxr(v189);
      v191 = v190 - 1;
    }
    while (__stlxr(v191, v189));
    if (!v191)
      (*(void (**)(unsigned int *))(*(_QWORD *)v188 + 8))(v188);
  }
  v192 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v192)
    (*(void (**)(uint64_t))(*(_QWORD *)v192 + 32))(v192);
  v193 = (webrtc::internal::CallStats *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v193)
  {
    webrtc::internal::CallStats::~CallStats(v193);
    MEMORY[0x20BD0ADEC]();
  }
  v194 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (!v194)
    goto LABEL_280;
  if (*(_QWORD *)(v194 + 48))
  {
LABEL_292:
    v202 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/decode_synchronizer.cc", 116, "schedulers_.empty()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v179, v180, v181, v182, v203);
    webrtc::internal::Call::~Call((webrtc::internal::Call *)v202);
    return;
  }
  v195 = *(_QWORD *)(v194 + 64);
  *(_BYTE *)(v195 + 4) = 0;
  do
  {
    v196 = __ldaxr((unsigned int *)v195);
    v197 = v196 - 1;
  }
  while (__stlxr(v197, (unsigned int *)v195));
  if (!v197)
    MEMORY[0x20BD0ADEC]();
  std::__tree<sigslot::_signal_base_interface *>::destroy(v194 + 32, *(_QWORD **)(v194 + 40));
  MEMORY[0x20BD0ADEC](v194, 0x1060C40C1612B2ALL);
LABEL_280:
  v198 = (unsigned int *)*((_QWORD *)this + 4);
  if (v198)
  {
    v199 = v198 + 2;
    do
    {
      v200 = __ldaxr(v199);
      v201 = v200 - 1;
    }
    while (__stlxr(v201, v199));
    if (!v201)
      (*(void (**)(unsigned int *))(*(_QWORD *)v198 + 8))(v198);
  }
}

{
  webrtc::internal::Call::~Call(this, a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::internal::Call::~Call(webrtc::internal::Call *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
}

{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 8), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::Call::~Call((webrtc::internal::Call *)((char *)this - 24), a2, a3, a4, a5, a6, a7, a8);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::internal::Call::SetClientBitratePreferences(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2144) + 192))(*(_QWORD *)(a1 + 2144));
}

uint64_t webrtc::internal::Call::GetTransportControllerSend(webrtc::internal::Call *this)
{
  return *((_QWORD *)this + 268);
}

uint64_t webrtc::internal::Call::Receiver(webrtc::internal::Call *this)
{
  return (uint64_t)this + 8;
}

std::string::size_type webrtc::internal::Call::CreateAudioSendStream(webrtc::internal::Call *this, const webrtc::AudioSendStream::Config *a2)
{
  char *v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  __int128 v10;
  std::string::size_type v11;
  char *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  webrtc::internal::Call *v20;
  uint64_t v22;
  webrtc::internal::Call *v23;
  webrtc::internal::Call *v24;
  BOOL v25;
  _OWORD v26[2];
  uint64_t v27;
  char v28;

  if (*((_BYTE *)this + 2152))
  {
    LOBYTE(v26[0]) = 0;
    v28 = 0;
    v4 = (char *)*((_QWORD *)this + 118);
    if (!v4)
      goto LABEL_16;
  }
  else
  {
    *((_BYTE *)this + 2152) = 1;
    webrtc::internal::CallStats::EnsureStarted(*((webrtc::internal::CallStats **)this + 13));
    (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 268) + 112))(*((_QWORD *)this + 268), (char *)this + 16);
    (*(void (**)(_QWORD))(**((_QWORD **)this + 268) + 224))(*((_QWORD *)this + 268));
    LOBYTE(v26[0]) = 0;
    v28 = 0;
    v4 = (char *)*((_QWORD *)this + 118);
    if (!v4)
      goto LABEL_16;
  }
  v5 = *(_DWORD *)a2;
  v6 = (char *)this + 944;
  do
  {
    v7 = *((_DWORD *)v4 + 8);
    v8 = v7 >= v5;
    if (v7 >= v5)
      v9 = (char **)v4;
    else
      v9 = (char **)(v4 + 8);
    if (v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 != (char *)this + 944 && v5 >= *((_DWORD *)v6 + 8))
  {
    v10 = *(_OWORD *)(v6 + 56);
    v26[0] = *(_OWORD *)(v6 + 40);
    v26[1] = v10;
    v27 = *((_QWORD *)v6 + 9);
    v28 = 1;
  }
LABEL_16:
  v11 = operator new();
  webrtc::internal::AudioSendStream::AudioSendStream(v11, *((_QWORD *)this + 6), (uint64_t)a2, (void (****)(_QWORD))this + 22, *((_QWORD *)this + 7), *((_QWORD *)this + 268), *((_QWORD *)this + 14), *((_QWORD *)this + 8), *((_QWORD *)this + 13), v26, *((_QWORD *)this + 5));
  v12 = (char *)*((_QWORD *)this + 105);
  v13 = *(_DWORD *)a2;
  if (v12)
  {
    while (1)
    {
      while (1)
      {
        v15 = (uint64_t **)v12;
        v16 = *((_DWORD *)v12 + 8);
        if (v13 >= v16)
          break;
        v12 = (char *)*v15;
        v14 = v15;
        if (!*v15)
          goto LABEL_23;
      }
      if (v16 >= v13)
        break;
      v12 = (char *)v15[1];
      if (!v12)
      {
        v14 = v15 + 1;
        goto LABEL_23;
      }
    }
  }
  else
  {
    v14 = (uint64_t **)((char *)this + 840);
    v15 = (uint64_t **)((char *)this + 840);
LABEL_23:
    v17 = (char *)v15;
    v15 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v15 + 8) = v13;
    v15[5] = 0;
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t *)v17;
    *v14 = (uint64_t *)v15;
    v18 = **((_QWORD **)this + 104);
    v19 = (uint64_t *)v15;
    if (v18)
    {
      *((_QWORD *)this + 104) = v18;
      v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 105), v19);
    ++*((_QWORD *)this + 106);
  }
  v15[5] = (uint64_t *)v11;
  v20 = (webrtc::internal::Call *)*((_QWORD *)this + 42);
  if (v20 != (webrtc::internal::Call *)((char *)this + 344))
  {
    do
    {
      v22 = *((_QWORD *)v20 + 4);
      if (*(_DWORD *)(v22 + 28) == *(_DWORD *)a2)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v22 + 256) + 248))(*(_QWORD *)(v22 + 256), *(_QWORD *)(v11 + 512));
        *(_QWORD *)(v22 + 264) = v11;
      }
      v23 = (webrtc::internal::Call *)*((_QWORD *)v20 + 1);
      if (v23)
      {
        do
        {
          v24 = v23;
          v23 = *(webrtc::internal::Call **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (webrtc::internal::Call *)*((_QWORD *)v20 + 2);
          v25 = *(_QWORD *)v24 == (_QWORD)v20;
          v20 = v24;
        }
        while (!v25);
      }
      v20 = v24;
    }
    while (v24 != (webrtc::internal::Call *)((char *)this + 344));
  }
  webrtc::internal::Call::UpdateAggregateNetworkState(this);
  return v11;
}

uint64_t webrtc::internal::Call::trials(webrtc::internal::Call *this)
{
  return *((_QWORD *)this + 5);
}

uint64_t webrtc::internal::Call::UpdateAggregateNetworkState(webrtc::internal::Call *this)
{
  _BOOL4 v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*((_QWORD *)this + 106))
  {
    v2 = *((_QWORD *)this + 44) != 0;
    if (!*((_QWORD *)this + 109))
      goto LABEL_5;
LABEL_6:
    v3 = *((_DWORD *)this + 71);
    v4 = v3 == 0;
    if (!v3 || !v2)
    {
LABEL_9:
      if (*((_BYTE *)this + 288) == v4)
        goto LABEL_10;
      goto LABEL_14;
    }
LABEL_8:
    v4 = *((_DWORD *)this + 70) == 0;
    goto LABEL_9;
  }
  v2 = 1;
  if (*((_QWORD *)this + 109))
    goto LABEL_6;
LABEL_5:
  if (*((_QWORD *)this + 47))
    goto LABEL_6;
  if (v2)
    goto LABEL_8;
  v4 = 0;
  if (!*((_BYTE *)this + 288))
  {
LABEL_10:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      goto LABEL_15;
    goto LABEL_16;
  }
LABEL_14:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
LABEL_15:
    rtc::webrtc_logging_impl::Log("\r\t\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
LABEL_16:
  *((_BYTE *)this + 288) = v4;
  return (*(uint64_t (**)(_QWORD, _BOOL8))(**((_QWORD **)this + 268) + 128))(*((_QWORD *)this + 268), v4);
}

uint64_t webrtc::internal::Call::DestroyAudioSendStream(uint64_t a1, _QWORD **a2)
{
  unsigned int v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _OWORD v28[2];
  char v29;

  ((void (*)(_QWORD **))(*a2)[6])(a2);
  v4 = *(_DWORD *)((uint64_t (*)(_QWORD **))(*a2)[3])(a2);
  (*(void (**)(_OWORD *__return_ptr))(*a2[90] + 184))(v28);
  v5 = *(char **)(a1 + 944);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v4 >= v8)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_8;
      }
      if (v8 >= v4)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = (uint64_t **)(a1 + 944);
    v7 = (char *)(a1 + 944);
LABEL_8:
    v9 = v7;
    v7 = (char *)operator new(0x50uLL);
    *((_DWORD *)v7 + 8) = v4;
    *(_OWORD *)(v7 + 40) = 0u;
    *((_QWORD *)v7 + 9) = 0;
    *(int64x2_t *)(v7 + 56) = vdupq_n_s64(0x8000000000000000);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v10 = **(_QWORD **)(a1 + 936);
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *(_QWORD *)(a1 + 936) = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 944), v11);
    ++*(_QWORD *)(a1 + 952);
  }
  v12 = v28[1];
  *(_OWORD *)(v7 + 40) = v28[0];
  *(_OWORD *)(v7 + 56) = v12;
  v7[72] = v29;
  v13 = *(uint64_t **)(a1 + 840);
  if (v13)
  {
    v14 = a1 + 840;
    v15 = *(_QWORD *)(a1 + 840);
    do
    {
      v16 = *(_DWORD *)(v15 + 32);
      v17 = v16 >= v4;
      if (v16 >= v4)
        v18 = (uint64_t *)v15;
      else
        v18 = (uint64_t *)(v15 + 8);
      if (v17)
        v14 = v15;
      v15 = *v18;
    }
    while (*v18);
    if (v14 != a1 + 840 && v4 >= *(_DWORD *)(v14 + 32))
    {
      v19 = *(_QWORD **)(v14 + 8);
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        v21 = (_QWORD *)v14;
        do
        {
          v20 = (_QWORD *)v21[2];
          v22 = *v20 == (_QWORD)v21;
          v21 = v20;
        }
        while (!v22);
      }
      if (*(_QWORD *)(a1 + 832) == v14)
        *(_QWORD *)(a1 + 832) = v20;
      --*(_QWORD *)(a1 + 848);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v13, (uint64_t *)v14);
      operator delete((void *)v14);
    }
  }
  v23 = *(_QWORD **)(a1 + 336);
  if (v23 != (_QWORD *)(a1 + 344))
  {
    do
    {
      v25 = v23[4];
      if (*(_DWORD *)(v25 + 28) == v4)
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v25 + 256) + 248))(*(_QWORD *)(v25 + 256), 0);
        *(_QWORD *)(v25 + 264) = 0;
      }
      v26 = (_QWORD *)v23[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v23[2];
          v22 = *v27 == (_QWORD)v23;
          v23 = v27;
        }
        while (!v22);
      }
      v23 = v27;
    }
    while (v27 != (_QWORD *)(a1 + 344));
  }
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)a1);
  return ((uint64_t (*)(_QWORD **))(*a2)[2])(a2);
}

uint64_t webrtc::internal::Call::CreateAudioReceiveStream(uint64_t a1, int32x2_t *a2)
{
  uint64_t v4;
  int32x2_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t result;
  int32x2_t *v23;
  size_t v24;
  uint64_t v25;
  unsigned __int32 v26;
  uint64_t v27;
  unsigned __int32 v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;

  if (!*(_BYTE *)(a1 + 2152))
  {
    *(_BYTE *)(a1 + 2152) = 1;
    webrtc::internal::CallStats::EnsureStarted(*(webrtc::internal::CallStats **)(a1 + 104));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2144) + 112))(*(_QWORD *)(a1 + 2144), a1 + 16);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2144) + 224))(*(_QWORD *)(a1 + 2144));
  }
  v4 = *(_QWORD *)(a1 + 64);
  v5 = (int32x2_t *)operator new();
  v5[1].i32[0] = 0;
  v5[7] = 0;
  v5[8] = 0;
  v5[6] = 0;
  v5[3] = 0;
  v5[4] = 0;
  v5[2] = 0;
  v5[5].i8[0] = 0;
  v5[9].i32[0] = 2;
  v5[11] = 0;
  v5[12] = 0;
  v5[10] = 0;
  *v5 = vrev64_s32(*a2);
  v6 = (_QWORD *)operator new();
  if (rtc::g_clock)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *v6 = &unk_24C0BBCB0;
  v6[1] = 1000 * (v7 / 1000000);
  v6[2] = v5;
  v33 = v6;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 40))(v4, &v33);
  v8 = v33;
  v33 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v9 = operator new();
  v10 = *(_QWORD *)(a1 + 48);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 2144) + 16))(*(_QWORD *)(a1 + 2144));
  webrtc::AudioReceiveStreamImpl::AudioReceiveStreamImpl(v9, v10, v11, (__int128 *)a2, (void (****)(_QWORD))(a1 + 176), v12, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(uint64_t **)(a1 + 344);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v14;
        v17 = v14[4];
        if (v9 >= v17)
          break;
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_19;
      }
      if (v17 >= v9)
        break;
      v14 = v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_19;
      }
    }
  }
  else
  {
    v15 = (uint64_t **)(a1 + 344);
    v16 = (uint64_t **)(a1 + 344);
LABEL_19:
    v18 = (uint64_t *)operator new(0x28uLL);
    v18[4] = v9;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = (uint64_t)v16;
    *v15 = v18;
    v19 = **(_QWORD **)(a1 + 336);
    if (v19)
    {
      *(_QWORD *)(a1 + 336) = v19;
      v20 = *v15;
    }
    else
    {
      v20 = v18;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v20);
    ++*(_QWORD *)(a1 + 352);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD))(*(_QWORD *)(a1 + 384) + 16))(&v34, a1 + 384, *(unsigned int *)(v9 + 24), *(_QWORD *)(v9 + 256));
  v21 = v34;
  v34 = 0;
  result = *(_QWORD *)(v9 + 280);
  *(_QWORD *)(v9 + 280) = v21;
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    result = v34;
    v34 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v23 = a2 + 5;
  if (a2[7].i8[7] < 0)
  {
    v24 = (size_t)a2[6];
    if ((v24 & 0x8000000000000000) != 0 || (v23 = (int32x2_t *)*v23, v24) && !v23)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v24 = a2[7].u8[7];
  }
  webrtc::internal::Call::ConfigureSync(a1, v23, v24);
  v25 = *(_QWORD *)(a1 + 840);
  if (v25)
  {
    v26 = a2->u32[1];
    v27 = a1 + 840;
    do
    {
      v28 = *(_DWORD *)(v25 + 32);
      v29 = v28 >= v26;
      if (v28 >= v26)
        v30 = (uint64_t *)v25;
      else
        v30 = (uint64_t *)(v25 + 8);
      if (v29)
        v27 = v25;
      v25 = *v30;
    }
    while (*v30);
    if (v27 != a1 + 840 && v26 >= *(_DWORD *)(v27 + 32))
    {
      v31 = *(_QWORD *)(v27 + 40);
      if (v31)
        v32 = *(_QWORD *)(v31 + 512);
      else
        v32 = 0;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 256) + 248))(*(_QWORD *)(v9 + 256), v32);
      *(_QWORD *)(v9 + 264) = v31;
    }
  }
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)a1);
  return v9;
}

uint64_t webrtc::internal::Call::ConfigureSync(uint64_t result, void *__s1, size_t __n)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD *v23;
  _QWORD *v24;

  v5 = result;
  if (__n)
  {
    v6 = *(_QWORD **)(result + 336);
    v7 = (_QWORD *)(result + 344);
    if (v6 != (_QWORD *)(result + 344))
    {
      do
      {
        v8 = v6[4];
        v20 = (_QWORD *)(v8 + 64);
        if (*(char *)(v8 + 87) < 0)
        {
          v21 = *(_QWORD *)(v8 + 72);
          if (v21 < 0 || ((v20 = (_QWORD *)*v20, v21) ? (v22 = v20 == 0) : (v22 = 0), v22))
          {
LABEL_45:
            __break(1u);
            return result;
          }
        }
        else
        {
          v21 = *(unsigned __int8 *)(v8 + 87);
        }
        if (__n == v21)
        {
          result = memcmp(__s1, v20, __n);
          if (!(_DWORD)result)
            goto LABEL_4;
        }
        v23 = (_QWORD *)v6[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v6[2];
            v16 = *v24 == (_QWORD)v6;
            v6 = v24;
          }
          while (!v16);
        }
        v6 = v24;
      }
      while (v24 != v7);
    }
  }
  v8 = 0;
LABEL_4:
  v9 = *(_QWORD **)(v5 + 360);
  v10 = (_QWORD *)(v5 + 368);
  if (v9 != v10)
  {
    v11 = 0;
    if (v8)
      v12 = v8 + 16;
    else
      v12 = 0;
    do
    {
      v13 = v9[4];
      v14 = (_QWORD *)(v13 + 264);
      if (*(char *)(v13 + 287) < 0)
      {
        v15 = *(_QWORD *)(v13 + 272);
        if (v15 < 0)
          goto LABEL_45;
        v14 = (_QWORD *)*v14;
        v16 = v15 && v14 == 0;
        if (v16)
          goto LABEL_45;
      }
      else
      {
        v15 = *(unsigned __int8 *)(v13 + 287);
      }
      if (__n == v15 && (result = memcmp(__s1, v14, __n), !(_DWORD)result))
      {
        if (v11)
          v19 = 0;
        else
          v19 = v12;
        result = webrtc::internal::RtpStreamsSynchronizer::ConfigureSync(v13 + 3792, v19);
        ++v11;
        v17 = (_QWORD *)v9[1];
        if (!v17)
        {
          do
          {
LABEL_25:
            v18 = (_QWORD *)v9[2];
            v16 = *v18 == (_QWORD)v9;
            v9 = v18;
          }
          while (!v16);
          goto LABEL_8;
        }
      }
      else
      {
        v17 = (_QWORD *)v9[1];
        if (!v17)
          goto LABEL_25;
      }
      do
      {
        v18 = v17;
        v17 = (_QWORD *)*v17;
      }
      while (v17);
LABEL_8:
      v9 = v18;
    }
    while (v18 != v10);
  }
  return result;
}

void webrtc::internal::Call::DestroyAudioReceiveStream(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  size_t v17;

  v4 = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(unsigned int *)(a2 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2016));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2080) + 32))(*(_QWORD *)(a1 + 2080), v5);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2016));
  v6 = *(uint64_t **)(a1 + 344);
  if (v6)
  {
    v7 = (uint64_t *)(a1 + 344);
    v8 = *(_QWORD **)(a1 + 344);
    do
    {
      v9 = v8[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 != (uint64_t *)(a1 + 344) && v7[4] <= a2)
    {
      v12 = (uint64_t *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        v14 = v7;
        do
        {
          v13 = (uint64_t *)v14[2];
          v15 = *v13 == (_QWORD)v14;
          v14 = v13;
        }
        while (!v15);
      }
      if (*(uint64_t **)(a1 + 336) == v7)
        *(_QWORD *)(a1 + 336) = v13;
      --*(_QWORD *)(a1 + 352);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v6, v7);
      operator delete(v7);
    }
  }
  v16 = (_QWORD *)(a2 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    v17 = *(_QWORD *)(a2 + 72);
    if ((v17 & 0x8000000000000000) != 0 || (v16 = (_QWORD *)*v16, v17) && !v16)
    {
      __break(1u);
LABEL_30:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(a2 + 87);
  }
  webrtc::internal::Call::ConfigureSync(a1, v16, v17);
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)a1);
  webrtc::AudioReceiveStreamImpl::~AudioReceiveStreamImpl((webrtc::AudioReceiveStreamImpl *)a2);
  goto LABEL_30;
}

unint64_t webrtc::internal::Call::CreateVideoSendStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string **v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void **v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  void **v41;
  int v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  char *v80;
  unsigned int v81;
  uint64_t *v82;
  uint64_t **v83;
  uint64_t **v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t **v90;
  uint64_t **v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v102;
  const void **__src;
  std::string **v104;
  uint64_t v105;
  int v106;
  int v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE v117[81];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int16 v122;
  __int128 v123;
  int v124;
  char v125;
  uint64_t v126;
  _QWORD *v127;
  int v128;
  __int128 v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD v132[3];
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  int v138;
  char v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;

  v5 = a1;
  v145 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 2152))
  {
    *(_BYTE *)(a1 + 2152) = 1;
    webrtc::internal::CallStats::EnsureStarted(*(webrtc::internal::CallStats **)(a1 + 104));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 2144) + 112))(*(_QWORD *)(v5 + 2144), v5 + 16);
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 2144) + 224))(*(_QWORD *)(v5 + 2144));
  }
  webrtc::SendDelayStats::AddSsrcs(*(uint64_t **)(v5 + 2112), (unsigned int **)a2);
  v102 = v5;
  v105 = a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    goto LABEL_75;
  v6 = 0;
  __src = (const void **)(a2 + 120);
  v104 = (std::string **)(a2 + 96);
  do
  {
    v10 = *(_QWORD *)(v5 + 64);
    v11 = operator new();
    *(_QWORD *)v11 = 0;
    *(_DWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    v12 = (std::string **)(v11 + 48);
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_BYTE *)(v11 + 40) = 0;
    *(_DWORD *)(v11 + 72) = 2;
    *(_QWORD *)(v11 + 88) = 0;
    *(_QWORD *)(v11 + 96) = 0;
    v13 = *(unsigned int **)a2;
    v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    *(_QWORD *)(v11 + 80) = 0;
    if (v6 >= v14 >> 2)
    {
LABEL_116:
      __break(1u);
      goto LABEL_117;
    }
    *(_DWORD *)v11 = v13[v6];
    v15 = *(_QWORD *)(a2 + 200);
    if (v6 < (*(_QWORD *)(a2 + 208) - v15) >> 2)
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v15 + 4 * v6);
    *(_DWORD *)(v11 + 72) = *(_DWORD *)(a2 + 72);
    if (v12 == v104)
    {
      v112 = v6;
      v18 = 0;
      v16 = 0;
      v17 = (_QWORD *)(v11 + 88);
      v21 = *(_QWORD *)(v11 + 80);
      v22 = -v21 >> 5;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 59)
        goto LABEL_117;
    }
    else
    {
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>(v12, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
      v18 = *(void ***)(v11 + 88);
      v16 = *(_QWORD *)(v11 + 96);
      v17 = (_QWORD *)(v11 + 88);
      if ((unint64_t)v18 < v16)
      {
        if (!v18)
          goto LABEL_116;
        if (*(char *)(a2 + 143) < 0)
        {
          v19 = *(_QWORD *)(a2 + 128);
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_116;
          v20 = (char *)*__src;
          if (v19)
          {
            if (!v20)
              goto LABEL_116;
          }
          if (v19 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_117;
        }
        else
        {
          v19 = *(unsigned __int8 *)(a2 + 143);
          v20 = (char *)__src;
        }
        v113 = *(_DWORD *)(a2 + 144);
        v42 = *(_DWORD *)(a2 + 224);
        if (v19 > 0x16)
        {
          v45 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v45 = v19 | 7;
          v46 = v10;
          v47 = v45 + 1;
          v43 = (char *)operator new(v45 + 1);
          v48 = v47 | 0x8000000000000000;
          v10 = v46;
          v18[1] = (void *)v19;
          v18[2] = (void *)v48;
          *v18 = v43;
          v44 = &v43[v19];
          if (v43 > v20)
            goto LABEL_62;
        }
        else
        {
          *((_BYTE *)v18 + 23) = v19;
          v43 = (char *)v18;
          v44 = (char *)v18 + v19;
          if (v18 > (void **)v20)
          {
LABEL_62:
            if (v19)
              memmove(v43, v20, v19);
            *v44 = 0;
            v39 = (char *)(v18 + 4);
            *((_DWORD *)v18 + 6) = v113;
            *((_DWORD *)v18 + 7) = v42;
            a2 = v105;
            goto LABEL_65;
          }
        }
        if (v44 > v20)
          goto LABEL_116;
        goto LABEL_62;
      }
      v112 = v6;
      v21 = *(_QWORD *)(v11 + 80);
      v22 = ((uint64_t)v18 - v21) >> 5;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 59)
        goto LABEL_117;
    }
    v24 = v16 - v21;
    if (v24 >> 4 > v23)
      v23 = v24 >> 4;
    v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0;
    v26 = 0x7FFFFFFFFFFFFFFLL;
    if (!v25)
      v26 = v23;
    if (!v26)
      goto LABEL_116;
    if (v26 >> 59)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v106 = *(_DWORD *)(a2 + 224);
    v107 = *(_DWORD *)(a2 + 144);
    v27 = 32 * v26;
    v28 = (char *)operator new(32 * v26);
    v29 = v28;
    v108 = v17;
    v110 = v10;
    if (*(char *)(a2 + 143) < 0)
    {
      v30 = *(_QWORD *)(a2 + 128);
      if ((v30 & 0x8000000000000000) != 0)
        goto LABEL_116;
      v31 = (char *)*__src;
      if (v30)
      {
        if (!v31)
          goto LABEL_116;
      }
      if (v30 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_117;
    }
    else
    {
      v30 = *(unsigned __int8 *)(a2 + 143);
      v31 = (char *)__src;
    }
    v32 = &v28[32 * v22];
    if (v30 > 0x16)
    {
      v35 = (v30 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v35 = v30 | 7;
      v36 = v35 + 1;
      v33 = (char *)operator new(v35 + 1);
      *((_QWORD *)v32 + 1) = v30;
      *((_QWORD *)v32 + 2) = v36 | 0x8000000000000000;
      *(_QWORD *)v32 = v33;
      v34 = &v33[v30];
      if (v33 <= v31)
      {
LABEL_35:
        if (v34 > v31)
          goto LABEL_116;
      }
    }
    else
    {
      v32[23] = v30;
      v33 = &v28[32 * v22];
      v34 = &v32[v30];
      if (v32 <= v31)
        goto LABEL_35;
    }
    if (v30)
      memmove(v33, v31, v30);
    v37 = &v29[v27];
    *v34 = 0;
    v38 = &v29[32 * v22];
    *((_DWORD *)v38 + 6) = v107;
    *((_DWORD *)v38 + 7) = v106;
    v39 = v32 + 32;
    if (v18 == (void **)v21)
    {
      *(_QWORD *)(v11 + 80) = v32;
      *(_QWORD *)(v11 + 88) = v39;
      *(_QWORD *)(v11 + 96) = v37;
      v5 = v102;
      v10 = v110;
      v6 = v112;
      v17 = v108;
      goto LABEL_47;
    }
    v5 = v102;
    v10 = v110;
    do
    {
      v40 = *((_OWORD *)v18 - 2);
      *((_QWORD *)v32 - 2) = *(v18 - 2);
      *((_OWORD *)v32 - 2) = v40;
      *(v18 - 3) = 0;
      *(v18 - 2) = 0;
      *(v18 - 4) = 0;
      *((_QWORD *)v32 - 1) = *(v18 - 1);
      v32 -= 32;
      v18 -= 4;
    }
    while (v18 != (void **)v21);
    v18 = *(void ***)(v11 + 80);
    v41 = *(void ***)(v11 + 88);
    *(_QWORD *)(v11 + 80) = v32;
    *(_QWORD *)(v11 + 88) = v39;
    *(_QWORD *)(v11 + 96) = v37;
    v6 = v112;
    if (v41 != v18)
    {
      v17 = v108;
      do
      {
        if (*((char *)v41 - 9) < 0)
          operator delete(*(v41 - 4));
        v41 -= 4;
      }
      while (v41 != v18);
LABEL_47:
      a2 = v105;
      if (!v18)
        goto LABEL_65;
LABEL_48:
      operator delete(v18);
      goto LABEL_65;
    }
    v17 = v108;
    a2 = v105;
    if (v18)
      goto LABEL_48;
LABEL_65:
    *v17 = v39;
    v49 = (_QWORD *)operator new();
    *v49 = &unk_24C0BBBD0;
    if (rtc::g_clock)
    {
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v50 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *v49 = &unk_24C0BC108;
    v49[1] = 1000 * (v50 / 1000000);
    v49[2] = v11;
    v127 = v49;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v10 + 40))(v10, &v127);
    v51 = v127;
    v127 = 0;
    if (v51)
      (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    ++v6;
    v8 = *(unsigned int **)a2;
    v7 = *(unsigned int **)(a2 + 8);
    v9 = (int64_t)v7 - *(_QWORD *)a2;
  }
  while (v6 < v9 >> 2);
  if (v7 != v8)
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      v52 = (char *)operator new((size_t)v7 - *(_QWORD *)a2);
      v53 = &v52[4 * (v9 >> 2)];
      v109 = v52;
      memcpy(v52, v8, v9);
      goto LABEL_76;
    }
LABEL_117:
    abort();
  }
LABEL_75:
  v53 = 0;
  v109 = 0;
LABEL_76:
  v54 = operator new();
  v114 = (uint64_t *)(v5 + 32);
  v111 = *(_DWORD *)(v5 + 96);
  v55 = *(_QWORD *)(v5 + 2144);
  v56 = (_QWORD *)v5;
  v57 = *(_QWORD *)(v5 + 248);
  v59 = (void *)v56[13];
  v58 = v56[14];
  v60 = v56[264];
  webrtc::RtpConfig::RtpConfig((uint64_t)v117, v105);
  v61 = *(_OWORD *)(v105 + 312);
  v120 = *(_OWORD *)(v105 + 296);
  v121 = v61;
  v62 = *(_OWORD *)(v105 + 280);
  v118 = *(_OWORD *)(v105 + 264);
  v119 = v62;
  v122 = *(_WORD *)(v105 + 328);
  v63 = *(_OWORD *)(v105 + 336);
  *(_QWORD *)(v105 + 336) = 0;
  v123 = v63;
  v124 = *(_DWORD *)(v105 + 352);
  v125 = *(_BYTE *)(v105 + 356);
  v64 = *(_QWORD *)(v105 + 360);
  *(_QWORD *)(v105 + 360) = 0;
  v126 = v64;
  v128 = *(_DWORD *)a3;
  v129 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v65 = *(_QWORD *)(a3 + 24);
  v66 = *(_QWORD **)(a3 + 32);
  *(_QWORD *)(a3 + 24) = 0;
  v130 = v65;
  v131 = v66;
  v67 = (_QWORD *)(a3 + 40);
  v68 = *(_QWORD *)(a3 + 40);
  v69 = *(_QWORD *)(a3 + 48);
  v132[0] = v68;
  v132[1] = v69;
  if (v69)
  {
    *(_QWORD *)(v68 + 16) = v132;
    *(_QWORD *)(a3 + 32) = v67;
    *v67 = 0;
    *(_QWORD *)(a3 + 48) = 0;
  }
  else
  {
    v131 = v132;
  }
  v70 = *(_QWORD *)(a3 + 56);
  v71 = *(_OWORD *)(a3 + 80);
  v133 = *(_OWORD *)(a3 + 64);
  v134 = v71;
  v72 = *(_QWORD *)(a3 + 96);
  v132[2] = v70;
  v135 = v72;
  *(_QWORD *)(a3 + 56) = 0;
  v73 = *(_OWORD *)(a3 + 104);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  v136 = v73;
  v137 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  LODWORD(v70) = *(_DWORD *)(a3 + 136);
  v139 = *(_BYTE *)(a3 + 140);
  v138 = v70;
  v74 = *(_QWORD *)(a3 + 144);
  *(_QWORD *)(a3 + 144) = 0;
  v141 = *(_OWORD *)(a3 + 152);
  v142 = *(_OWORD *)(a3 + 168);
  v75 = *(_QWORD *)(a3 + 184);
  v140 = v74;
  v143 = v75;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  v144 = *(_OWORD *)(a3 + 192);
  v76 = *a4;
  *a4 = 0;
  v115 = 0;
  v116 = v76;
  webrtc::internal::VideoSendStreamImpl::VideoSendStreamImpl(v54, v114, v111, v59, v55, v57, v58, v60, (uint64_t)v117, &v128, v102 + 960, v102 + 984, &v116, &v115);
  v77 = v115;
  v115 = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = v116;
  v116 = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v128);
  if (v126)
    (*(void (**)(uint64_t))(*(_QWORD *)v126 + 8))(v126);
  if ((_QWORD)v123)
    (*(void (**)(_QWORD))(*(_QWORD *)v123 + 8))(v123);
  webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)v117);
  if (v109 != v53)
  {
    v79 = (uint64_t **)(v102 + 864);
    v80 = v109;
    do
    {
      v81 = *(_DWORD *)v80;
      v82 = *v79;
      v83 = (uint64_t **)(v102 + 864);
      v84 = (uint64_t **)(v102 + 864);
      if (*v79)
      {
        while (1)
        {
          while (1)
          {
            v84 = (uint64_t **)v82;
            v85 = *((_DWORD *)v82 + 8);
            if (v81 >= v85)
              break;
            v82 = *v84;
            v83 = v84;
            if (!*v84)
              goto LABEL_98;
          }
          if (v85 >= v81)
            break;
          v82 = v84[1];
          if (!v82)
          {
            v83 = v84 + 1;
            goto LABEL_98;
          }
        }
      }
      else
      {
LABEL_98:
        v86 = (uint64_t *)v84;
        v84 = (uint64_t **)operator new(0x30uLL);
        *((_DWORD *)v84 + 8) = v81;
        v84[5] = 0;
        *v84 = 0;
        v84[1] = 0;
        v84[2] = v86;
        *v83 = (uint64_t *)v84;
        v87 = **(_QWORD **)(v102 + 856);
        v88 = (uint64_t *)v84;
        if (v87)
        {
          *(_QWORD *)(v102 + 856) = v87;
          v88 = *v83;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v102 + 864), v88);
        ++*(_QWORD *)(v102 + 872);
      }
      v84[5] = (uint64_t *)v54;
      v80 += 4;
    }
    while (v80 != v53);
  }
  v89 = *(uint64_t **)(v102 + 888);
  if (v89)
  {
    while (1)
    {
      while (1)
      {
        v91 = (uint64_t **)v89;
        v92 = v89[4];
        if (v54 >= v92)
          break;
        v89 = *v91;
        v90 = v91;
        if (!*v91)
          goto LABEL_107;
      }
      if (v92 >= v54)
        break;
      v89 = v91[1];
      if (!v89)
      {
        v90 = v91 + 1;
        goto LABEL_107;
      }
    }
  }
  else
  {
    v90 = (uint64_t **)(v102 + 888);
    v91 = (uint64_t **)(v102 + 888);
LABEL_107:
    v93 = (uint64_t *)operator new(0x28uLL);
    v93[4] = v54;
    *v93 = 0;
    v93[1] = 0;
    v93[2] = (uint64_t)v91;
    *v90 = v93;
    v94 = **(_QWORD **)(v102 + 880);
    if (v94)
    {
      *(_QWORD *)(v102 + 880) = v94;
      v95 = *v90;
    }
    else
    {
      v95 = v93;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v102 + 888), v95);
    ++*(_QWORD *)(v102 + 896);
  }
  *(_BYTE *)(v102 + 904) = 0;
  v96 = *(uint64_t **)(v102 + 912);
  v97 = *(uint64_t **)(v102 + 920);
  while (v96 != v97)
  {
    v98 = *v96++;
    webrtc::internal::ResourceVideoSendStreamForwarder::OnCreateVideoSendStream(v98, v54);
  }
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)v102);
  if (v109)
    operator delete(v109);
  return v54;
}

uint64_t webrtc::internal::ResourceVideoSendStreamForwarder::OnCreateVideoSendStream(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  webrtc::BroadcastResourceListener::CreateAdapterResource((webrtc::BroadcastResourceListener *)a1, &v14);
  v13 = v14;
  if (v14)
    (**(void (***)(uint64_t))v14)(v14);
  (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)a2 + 24))(a2, &v13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v4 = v14;
  if (v14)
    (**(void (***)(uint64_t))v14)(v14);
  v6 = (uint64_t **)(a1 + 120);
  v5 = *(uint64_t **)(a1 + 120);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_14;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_14;
      }
    }
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    v7 = (uint64_t **)(a1 + 120);
LABEL_14:
    v9 = (uint64_t *)operator new(0x30uLL);
    v9[4] = a2;
    v9[5] = v4;
    *v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = **(_QWORD **)(a1 + 112);
    if (v10)
    {
      *(_QWORD *)(a1 + 112) = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 120), v11);
    ++*(_QWORD *)(a1 + 128);
  }
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return result;
}

unint64_t webrtc::internal::Call::CreateVideoSendStream(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _BYTE v34[185];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int16 v39;
  __int128 v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD v49[3];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  int v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 192))
    goto LABEL_6;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
  v13 = *(_QWORD *)(a1 + 192);
  if (v13)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(&v44, v13, a1 + 32);
  }
  else
  {
LABEL_6:
    v14 = operator new();
    v44 = webrtc::FecControllerDefault::FecControllerDefault(v14, (uint64_t *)(a1 + 32), 0);
  }
  webrtc::RtpConfig::RtpConfig((uint64_t)v34, a2);
  v15 = *(_OWORD *)(a2 + 312);
  v37 = *(_OWORD *)(a2 + 296);
  v38 = v15;
  v16 = *(_OWORD *)(a2 + 280);
  v35 = *(_OWORD *)(a2 + 264);
  v36 = v16;
  v39 = *(_WORD *)(a2 + 328);
  v17 = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a2 + 336) = 0;
  v40 = v17;
  v41 = *(_DWORD *)(a2 + 352);
  v42 = *(_BYTE *)(a2 + 356);
  v18 = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a2 + 360) = 0;
  v43 = v18;
  v45 = *a3;
  v46 = *(_OWORD *)(a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  v19 = *((_QWORD *)a3 + 3);
  v20 = (_QWORD *)*((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 3) = 0;
  v47 = v19;
  v48 = v20;
  v21 = a3 + 10;
  v22 = *((_QWORD *)a3 + 5);
  v23 = *((_QWORD *)a3 + 6);
  v49[0] = v22;
  v49[1] = v23;
  if (v23)
  {
    *(_QWORD *)(v22 + 16) = v49;
    *((_QWORD *)a3 + 4) = v21;
    *v21 = 0;
    *((_QWORD *)a3 + 6) = 0;
  }
  else
  {
    v48 = v49;
  }
  v49[2] = *((_QWORD *)a3 + 7);
  v24 = *((_OWORD *)a3 + 5);
  v50 = *((_OWORD *)a3 + 4);
  v51 = v24;
  v52 = *((_QWORD *)a3 + 12);
  *((_QWORD *)a3 + 7) = 0;
  v25 = *(_OWORD *)(a3 + 26);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  v53 = v25;
  v54 = *(_OWORD *)(a3 + 30);
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  v26 = a3[34];
  v56 = *((_BYTE *)a3 + 140);
  v55 = v26;
  v27 = *((_QWORD *)a3 + 18);
  *((_QWORD *)a3 + 18) = 0;
  v58 = *(_OWORD *)(a3 + 38);
  v59 = *(_OWORD *)(a3 + 42);
  v28 = *((_QWORD *)a3 + 23);
  v57 = v27;
  v60 = v28;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *((_QWORD *)a3 + 23) = 0;
  v61 = *((_OWORD *)a3 + 12);
  v29 = v44;
  v44 = 0;
  v33 = v29;
  v30 = webrtc::internal::Call::CreateVideoSendStream(a1, (uint64_t)v34, (uint64_t)&v45, &v33);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  webrtc::VideoEncoderConfig::~VideoEncoderConfig((webrtc::VideoEncoderConfig *)&v45);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  if ((_QWORD)v40)
    (*(void (**)(_QWORD))(*(_QWORD *)v40 + 8))(v40);
  webrtc::RtpConfig::~RtpConfig((webrtc::RtpConfig *)v34);
  v31 = v44;
  v44 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return v30;
}

void webrtc::internal::Call::DestroyVideoSendStream(uint64_t a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  BOOL v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  _QWORD **v43;
  char **v44;
  char *v45;
  unsigned int v46;
  uint64_t **v47;
  char *v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t *v52;
  __int128 v53;
  __int128 v54;
  _QWORD *v55;
  _QWORD **v56;
  _QWORD **v57;
  char **v58;
  char *v59;
  unsigned int v60;
  uint64_t **v61;
  char *v62;
  unsigned int v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  __int128 v67;
  _QWORD *v68;
  _QWORD **v69;
  uint64_t *v70;
  int64x2_t v71;
  _QWORD **v72;
  _QWORD *v73[2];
  _QWORD **v74;
  _QWORD *v75[2];

  v4 = *(uint64_t **)(a1 + 856);
  v5 = (uint64_t *)(a1 + 864);
  if (v4 != (uint64_t *)(a1 + 864))
  {
    do
    {
      v28 = (uint64_t *)v4[1];
      if (v4[5] == a2)
      {
        v30 = (uint64_t *)v4[1];
        v31 = v4;
        if (v28)
        {
          do
          {
            v29 = v30;
            v30 = (uint64_t *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v31[2];
            v25 = *v29 == (_QWORD)v31;
            v31 = v29;
          }
          while (!v25);
        }
        v32 = v4;
        if (v28)
        {
          do
          {
            v33 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v32[2];
            v25 = *v33 == (_QWORD)v32;
            v32 = v33;
          }
          while (!v25);
        }
        if (*(uint64_t **)(a1 + 856) == v4)
          *(_QWORD *)(a1 + 856) = v33;
        --*(_QWORD *)(a1 + 872);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 864), v4);
        operator delete(v4);
      }
      else if (v28)
      {
        do
        {
          v29 = v28;
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (uint64_t *)v4[2];
          v25 = *v29 == (_QWORD)v4;
          v4 = v29;
        }
        while (!v25);
      }
      v4 = v29;
    }
    while (v29 != v5);
  }
  v6 = *(uint64_t **)(a1 + 912);
  v7 = *(uint64_t **)(a1 + 920);
  v70 = v7;
  while (v6 != v7)
  {
    v8 = *v6;
    v9 = *(_QWORD **)(*v6 + 120);
    if (!v9)
      goto LABEL_16;
    v10 = (uint64_t *)(*v6 + 120);
    do
    {
      v11 = v9[4];
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = v9;
      else
        v13 = v9 + 1;
      if (v12)
        v10 = v9;
      v9 = (_QWORD *)*v13;
    }
    while (*v13);
    if (v10 == (uint64_t *)(*v6 + 120) || v10[4] > a2)
LABEL_16:
      v10 = (uint64_t *)(*v6 + 120);
    v14 = v10[5];
    if (v14)
      (**(void (***)(uint64_t))v14)(v10[5]);
    pthread_mutex_lock((pthread_mutex_t *)(v8 + 16));
    v15 = *(_QWORD **)(v8 + 88);
    v16 = *(_QWORD **)(v8 + 96);
    v17 = v15;
    if (v15 != v16)
    {
      while (*v17 != v14)
      {
        if (++v17 == v16)
        {
          v17 = *(_QWORD **)(v8 + 96);
          break;
        }
      }
    }
    if (v16 == v17)
    {
      __break(1u);
      return;
    }
    v18 = v17 + 1;
    if (v17 + 1 != v16)
    {
      v17 = &v15[v17 - v15];
      do
      {
        v19 = *(v18 - 1);
        *(v18 - 1) = *v18;
        *v18 = 0;
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        ++v18;
        ++v17;
      }
      while (v18 != v16);
      v16 = *(_QWORD **)(v8 + 96);
    }
    while (v16 != v17)
    {
      v21 = *--v16;
      v20 = v21;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    }
    *(_QWORD *)(v8 + 96) = v17;
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 16));
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v22 = (uint64_t *)v10[1];
    v23 = v10;
    if (v22)
    {
      do
      {
        v24 = v22;
        v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v24 = (uint64_t *)v23[2];
        v25 = *v24 == (_QWORD)v23;
        v23 = v24;
      }
      while (!v25);
    }
    if (*(uint64_t **)(v8 + 112) == v10)
      *(_QWORD *)(v8 + 112) = v24;
    v26 = *(uint64_t **)(v8 + 120);
    --*(_QWORD *)(v8 + 128);
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v26, v10);
    v27 = v10[5];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    operator delete(v10);
    ++v6;
    v7 = v70;
  }
  v34 = *(uint64_t **)(a1 + 888);
  if (v34)
  {
    v35 = (uint64_t *)(a1 + 888);
    v36 = *(_QWORD **)(a1 + 888);
    do
    {
      v37 = v36[4];
      v38 = v37 >= a2;
      if (v37 >= a2)
        v39 = v36;
      else
        v39 = v36 + 1;
      if (v38)
        v35 = v36;
      v36 = (_QWORD *)*v39;
    }
    while (*v39);
    if (v35 != (uint64_t *)(a1 + 888) && v35[4] <= a2)
    {
      v40 = (uint64_t *)v35[1];
      if (v40)
      {
        do
        {
          v41 = v40;
          v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        v42 = v35;
        do
        {
          v41 = (uint64_t *)v42[2];
          v25 = *v41 == (_QWORD)v42;
          v42 = v41;
        }
        while (!v25);
      }
      if (*(uint64_t **)(a1 + 880) == v35)
        *(_QWORD *)(a1 + 880) = v41;
      --*(_QWORD *)(a1 + 896);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v34, v35);
      operator delete(v35);
    }
  }
  if (!*(_QWORD *)(a1 + 896))
    *(_BYTE *)(a1 + 904) = 1;
  v75[0] = 0;
  v75[1] = 0;
  v73[1] = 0;
  v74 = v75;
  v72 = v73;
  v73[0] = 0;
  webrtc::internal::VideoSendStreamImpl::StopPermanentlyAndGetRtpStates(a2, (uint64_t)&v74, (uint64_t)&v72);
  v43 = v74;
  if (v74 != v75)
  {
    v44 = (char **)(a1 + 968);
    v71 = vdupq_n_s64(0x8000000000000000);
    do
    {
      v45 = *v44;
      v46 = *((_DWORD *)v43 + 8);
      v47 = (uint64_t **)(a1 + 968);
      v48 = (char *)(a1 + 968);
      if (*v44)
      {
        while (1)
        {
          while (1)
          {
            v48 = v45;
            v49 = *((_DWORD *)v45 + 8);
            if (v46 >= v49)
              break;
            v45 = *(char **)v48;
            v47 = (uint64_t **)v48;
            if (!*(_QWORD *)v48)
              goto LABEL_97;
          }
          if (v49 >= v46)
            break;
          v45 = (char *)*((_QWORD *)v48 + 1);
          if (!v45)
          {
            v47 = (uint64_t **)(v48 + 8);
            goto LABEL_97;
          }
        }
      }
      else
      {
LABEL_97:
        v50 = v48;
        v48 = (char *)operator new(0x50uLL);
        *((_DWORD *)v48 + 8) = v46;
        *(_OWORD *)(v48 + 40) = 0u;
        *((_QWORD *)v48 + 9) = 0;
        *(int64x2_t *)(v48 + 56) = v71;
        *(_QWORD *)v48 = 0;
        *((_QWORD *)v48 + 1) = 0;
        *((_QWORD *)v48 + 2) = v50;
        *v47 = (uint64_t *)v48;
        v51 = **(_QWORD **)(a1 + 960);
        v52 = (uint64_t *)v48;
        if (v51)
        {
          *(_QWORD *)(a1 + 960) = v51;
          v52 = *v47;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 968), v52);
        ++*(_QWORD *)(a1 + 976);
      }
      v53 = *(_OWORD *)(v43 + 5);
      v54 = *(_OWORD *)(v43 + 7);
      v48[72] = *((_BYTE *)v43 + 72);
      *(_OWORD *)(v48 + 56) = v54;
      *(_OWORD *)(v48 + 40) = v53;
      v55 = v43[1];
      if (v55)
      {
        do
        {
          v56 = (_QWORD **)v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD **)v43[2];
          v25 = *v56 == v43;
          v43 = v56;
        }
        while (!v25);
      }
      v43 = v56;
    }
    while (v56 != v75);
  }
  v57 = v72;
  if (v72 != v73)
  {
    v58 = (char **)(a1 + 992);
    do
    {
      v59 = *v58;
      v60 = *((_DWORD *)v57 + 8);
      v61 = (uint64_t **)(a1 + 992);
      v62 = (char *)(a1 + 992);
      if (*v58)
      {
        while (1)
        {
          while (1)
          {
            v62 = v59;
            v63 = *((_DWORD *)v59 + 8);
            if (v60 >= v63)
              break;
            v59 = *(char **)v62;
            v61 = (uint64_t **)v62;
            if (!*(_QWORD *)v62)
              goto LABEL_116;
          }
          if (v63 >= v60)
            break;
          v59 = (char *)*((_QWORD *)v62 + 1);
          if (!v59)
          {
            v61 = (uint64_t **)(v62 + 8);
            goto LABEL_116;
          }
        }
      }
      else
      {
LABEL_116:
        v64 = v62;
        v62 = (char *)operator new(0x40uLL);
        *((_DWORD *)v62 + 8) = v60;
        *((_QWORD *)v62 + 6) = 0;
        *((_QWORD *)v62 + 7) = 0;
        *((_QWORD *)v62 + 5) = 0xFFFFLL;
        *(_QWORD *)v62 = 0;
        *((_QWORD *)v62 + 1) = 0;
        *((_QWORD *)v62 + 2) = v64;
        *v61 = (uint64_t *)v62;
        v65 = **(_QWORD **)(a1 + 984);
        v66 = (uint64_t *)v62;
        if (v65)
        {
          *(_QWORD *)(a1 + 984) = v65;
          v66 = *v61;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 992), v66);
        ++*(_QWORD *)(a1 + 1000);
      }
      v67 = *(_OWORD *)(v57 + 5);
      *((_QWORD *)v62 + 7) = v57[7];
      *(_OWORD *)(v62 + 40) = v67;
      v68 = v57[1];
      if (v68)
      {
        do
        {
          v69 = (_QWORD **)v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD **)v57[2];
          v25 = *v69 == v57;
          v57 = v69;
        }
        while (!v25);
      }
      v57 = v69;
    }
    while (v69 != v73);
  }
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)a1);
  if (a2)
    (*(void (**)(unint64_t))(*(_QWORD *)a2 + 88))(a2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v72, v73[0]);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v74, v75[0]);
}

unint64_t webrtc::internal::Call::CreateVideoReceiveStream(uint64_t a1, char **a2)
{
  int32x2_t *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  char *v12;
  char *v13;
  BOOL v14;
  size_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  int *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t **v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  _QWORD *v45;
  size_t v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD v53[2];
  char *v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  _QWORD v59[2];
  _QWORD *v60;
  _QWORD v61[2];
  _QWORD v62[7];
  int v63;
  char v64;
  char *v65;
  _QWORD *v66;
  int v67[5];

  if (!*(_BYTE *)(a1 + 2152))
  {
    *(_BYTE *)(a1 + 2152) = 1;
    webrtc::internal::CallStats::EnsureStarted(*(webrtc::internal::CallStats **)(a1 + 104));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2144) + 112))(*(_QWORD *)(a1 + 2144), a1 + 16);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 2144) + 224))(*(_QWORD *)(a1 + 2144));
  }
  v49 = *(_QWORD *)(a1 + 64);
  v50 = a1;
  v4 = (int32x2_t *)operator new();
  v4[7] = 0;
  v4[8] = 0;
  v4[6] = 0;
  v4[3] = 0;
  v4[4] = 0;
  v4[2] = 0;
  v4[5].i8[0] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  *v4 = vrev64_s32((int32x2_t)a2[4]);
  v4[1].i32[0] = *((_DWORD *)a2 + 15);
  v4[9].i32[0] = *((_DWORD *)a2 + 11);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    v8 = (char *)(a2 + 11);
    v51 = a2[1];
    while (1)
    {
      v9 = *((_DWORD *)v5 + 24);
      v10 = a2[10];
      if (v10 == v8)
      {
LABEL_7:
        v11 = 0;
        v67[0] = 0;
        if ((unint64_t)v7 < *(_QWORD *)&v4[12])
          goto LABEL_18;
LABEL_5:
        v7 = std::vector<webrtc::rtclog::StreamConfig::Codec>::__emplace_back_slow_path<std::string const&,int const&,int>((void **)&v4[10], v5, (int *)v5 + 24, v67);
        v4[11] = (int32x2_t)v7;
        v5 += 104;
        if (v5 == v6)
          break;
      }
      else
      {
        while (*((_DWORD *)v10 + 8) != v9)
        {
          v12 = (char *)*((_QWORD *)v10 + 1);
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = *(char **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (char *)*((_QWORD *)v10 + 2);
              v14 = *(_QWORD *)v13 == (_QWORD)v10;
              v10 = v13;
            }
            while (!v14);
          }
          v10 = v13;
          if (v13 == v8)
            goto LABEL_7;
        }
        v11 = *((_DWORD *)v10 + 7);
        v67[0] = v11;
        if ((unint64_t)v7 >= *(_QWORD *)&v4[12])
          goto LABEL_5;
LABEL_18:
        if (!v7)
          goto LABEL_66;
        if (v5[23] < 0)
        {
          v15 = *((_QWORD *)v5 + 1);
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_66;
          v16 = *(char **)v5;
          if (v15)
          {
            if (!v16)
              goto LABEL_66;
          }
          if (v15 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_67;
        }
        else
        {
          v15 = v5[23];
          v16 = v5;
        }
        if (v15 > 0x16)
        {
          v18 = (v15 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v15 | 7) != 0x17)
            v18 = v15 | 7;
          v19 = v18 + 1;
          v17 = (char *)operator new(v18 + 1);
          *((_QWORD *)v7 + 1) = v15;
          *((_QWORD *)v7 + 2) = v19 | 0x8000000000000000;
          *(_QWORD *)v7 = v17;
        }
        else
        {
          v7[23] = v15;
          v17 = v7;
        }
        v20 = &v17[v15];
        if (v17 <= v16 && v20 > v16)
          goto LABEL_66;
        if (v15)
          memmove(v17, v16, v15);
        *v20 = 0;
        *((_DWORD *)v7 + 6) = v9;
        *((_DWORD *)v7 + 7) = v11;
        v7 += 32;
        v6 = v51;
        v4[11] = (int32x2_t)v7;
        v5 += 104;
        if (v5 == v51)
          break;
      }
    }
  }
  v22 = (_QWORD *)operator new();
  if (rtc::g_clock)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v23 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *v22 = &unk_24C0BC0D0;
  v22[1] = 1000 * (v23 / 1000000);
  v22[2] = v4;
  v66 = v22;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v49 + 40))(v49, &v66);
  v24 = v66;
  v66 = 0;
  if (v24)
    (*(void (**)(_QWORD *))(*v24 + 8))(v24);
  v25 = operator new();
  v26 = *(_DWORD *)(v50 + 96);
  v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v50 + 2144) + 16))(*(_QWORD *)(v50 + 2144));
  v28 = *((_OWORD *)a2 + 1);
  v53[0] = *(_OWORD *)a2;
  v53[1] = v28;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v54 = a2[4];
  v55 = *(_OWORD *)(a2 + 5);
  v56 = *(_OWORD *)(a2 + 7);
  v29 = (int *)a2[10];
  v57 = a2[9];
  v58 = v59;
  v59[0] = 0;
  v59[1] = 0;
  std::map<int,int>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,int>,std::__tree_node<std::__value_type<int,int>,void *> *,long>>>((uint64_t *)&v58, v29, (int *)a2 + 22);
  v61[0] = 0;
  v61[1] = 0;
  v60 = v61;
  std::set<int>::insert[abi:sn180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v60, (int *)a2[13], (int *)a2 + 28);
  *(_OWORD *)v62 = *((_OWORD *)a2 + 8);
  *(_QWORD *)((char *)&v62[1] + 5) = *(char **)((char *)a2 + 141);
  *(_OWORD *)&v62[3] = *(_OWORD *)(a2 + 19);
  a2[19] = 0;
  a2[20] = 0;
  v30 = a2[21];
  v31 = a2[22];
  a2[21] = 0;
  a2[22] = 0;
  v62[5] = v30;
  v62[6] = v31;
  v63 = *((_DWORD *)a2 + 46);
  v64 = *((_BYTE *)a2 + 188);
  v32 = a2[24];
  a2[24] = 0;
  v65 = v32;
  v33 = *(_QWORD *)(v50 + 104);
  v34 = *(_QWORD *)(v50 + 48);
  v35 = *(_QWORD *)(v50 + 40);
  v36 = operator new();
  v52 = webrtc::VCMTiming::VCMTiming(v36, v34, v35);
  webrtc::internal::VideoReceiveStream2::VideoReceiveStream2(v25, (uint64_t *)(v50 + 32), v50, v26, v27, (uint64_t)v53, v33, &v52, (uint64_t *)(v50 + 296), *(webrtc::DecodeSynchronizer **)(v50 + 88));
  v37 = v52;
  v52 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  webrtc::VideoReceiveStreamInterface::Config::~Config((webrtc::VideoReceiveStreamInterface::Config *)v53);
  webrtc::internal::VideoReceiveStream2::RegisterWithTransport(v25, v50 + 608);
  v38 = *(uint64_t **)(v50 + 368);
  if (v38)
  {
    while (1)
    {
      while (1)
      {
        v40 = (uint64_t **)v38;
        v41 = v38[4];
        if (v25 >= v41)
          break;
        v38 = *v40;
        v39 = v40;
        if (!*v40)
          goto LABEL_53;
      }
      if (v41 >= v25)
        break;
      v38 = v40[1];
      if (!v38)
      {
        v39 = v40 + 1;
        goto LABEL_53;
      }
    }
  }
  else
  {
    v39 = (uint64_t **)(v50 + 368);
    v40 = (uint64_t **)(v50 + 368);
LABEL_53:
    v42 = (uint64_t *)operator new(0x28uLL);
    v42[4] = v25;
    *v42 = 0;
    v42[1] = 0;
    v42[2] = (uint64_t)v40;
    *v39 = v42;
    v43 = **(_QWORD **)(v50 + 360);
    if (v43)
    {
      *(_QWORD *)(v50 + 360) = v43;
      v44 = *v39;
    }
    else
    {
      v44 = v42;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v50 + 368), v44);
    ++*(_QWORD *)(v50 + 376);
  }
  v45 = (_QWORD *)(v25 + 264);
  if (*(char *)(v25 + 287) < 0)
  {
    v46 = *(_QWORD *)(v25 + 272);
    if ((v46 & 0x8000000000000000) != 0 || (v45 = (_QWORD *)*v45, v46) && !v45)
    {
LABEL_66:
      __break(1u);
LABEL_67:
      abort();
    }
  }
  else
  {
    v46 = *(unsigned __int8 *)(v25 + 287);
  }
  webrtc::internal::Call::ConfigureSync(v50, v45, v46);
  if (*(_DWORD *)(v50 + 284))
    v47 = 0;
  else
    v47 = *(_DWORD *)(*(_QWORD *)(v25 + 2472) + 44);
  webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(v25 + 2856) + 32, v47);
  webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)v50);
  return v25;
}

void webrtc::internal::Call::DestroyVideoReceiveStream(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 4032);
  *(_QWORD *)(a2 + 4032) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a2 + 4056);
  *(_QWORD *)(a2 + 4056) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)(a2 + 4024) = 0;
  v6 = *(uint64_t **)(a1 + 368);
  if (v6)
  {
    v7 = (uint64_t *)(a1 + 368);
    v8 = *(_QWORD **)(a1 + 368);
    do
    {
      v9 = v8[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v8;
      else
        v11 = v8 + 1;
      if (v10)
        v7 = v8;
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v7 != (uint64_t *)(a1 + 368) && v7[4] <= a2)
    {
      v12 = (uint64_t *)v7[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        v14 = v7;
        do
        {
          v13 = (uint64_t *)v14[2];
          v15 = *v13 == (_QWORD)v14;
          v14 = v13;
        }
        while (!v15);
      }
      if (*(uint64_t **)(a1 + 360) == v7)
        *(_QWORD *)(a1 + 360) = v13;
      --*(_QWORD *)(a1 + 376);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v6, v7);
      operator delete(v7);
    }
  }
  v16 = (_QWORD *)(a2 + 264);
  if ((*(char *)(a2 + 287) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(a2 + 287);
LABEL_30:
    webrtc::internal::Call::ConfigureSync(a1, v16, v17);
    v18 = *(unsigned int *)(a2 + 144);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 2016));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2080) + 32))(*(_QWORD *)(a1 + 2080), v18);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2016));
    webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)a1);
    (*(void (**)(unint64_t))(*(_QWORD *)a2 + 8))(a2);
    return;
  }
  v17 = *(_QWORD *)(a2 + 272);
  if ((v17 & 0x8000000000000000) == 0)
  {
    v16 = (_QWORD *)*v16;
    if (!v17 || v16)
      goto LABEL_30;
  }
  __break(1u);
}

uint64_t webrtc::internal::Call::CreateFlexfecReceiveStream(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;

  v4 = operator new();
  v5 = a1[6];
  v14 = *a2;
  v15 = *((_DWORD *)a2 + 2);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  v7 = (_BYTE *)a2[2];
  v6 = (_BYTE *)a2[3];
  v8 = v6 - v7;
  if (v6 == v7)
  {
    v9 = 0;
  }
  else
  {
    if (v8 < 0)
      abort();
    v9 = (char *)operator new(v6 - v7);
    v16 = v9;
    v18 = &v9[4 * (v8 >> 2)];
    memcpy(v9, v7, v8);
    v17 = v18;
  }
  v19 = *(_OWORD *)(a2 + 5);
  webrtc::FlexfecReceiveStreamImpl::FlexfecReceiveStreamImpl(v4, v5, (int *)&v14, (uint64_t)(a1 + 77), a1[13]);
  if (v9)
    operator delete(v9);
  if (*(_QWORD *)(v4 + 24))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, uint64_t))(a1[76] + 16))(&v20, a1 + 76, *(unsigned int *)(v4 + 16), v4);
    v10 = v20;
    v20 = 0;
    v11 = *(_QWORD *)(v4 + 48);
    *(_QWORD *)(v4 + 48) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v20;
      v20 = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  return v4;
}

uint64_t webrtc::internal::Call::DestroyFlexfecReceiveStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(unsigned int *)(a2 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 2016));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2080) + 32))(*(_QWORD *)(a1 + 2080), v5);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 2016));
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
}

void webrtc::internal::Call::AddAdaptationResource(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  BOOL v43;
  pthread_mutexattr_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v6 = *a2;
  if (v6)
  {
    (**(void (***)(uint64_t))v6)(v6);
    (**(void (***)(uint64_t))v6)(v6);
    *v5 = &off_24C0B0380;
    v5[1] = v6;
    (**(void (***)(uint64_t))v6)(v6);
  }
  else
  {
    *v4 = &off_24C0B0380;
    v4[1] = 0;
  }
  pthread_mutexattr_init(&v44);
  pthread_mutexattr_setpolicy_np(&v44, 3);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 2), &v44);
  pthread_mutexattr_destroy(&v44);
  *((_BYTE *)v5 + 80) = 0;
  v5[12] = 0;
  v5[13] = 0;
  v5[11] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v5[16] = 0;
  v5[15] = 0;
  v5[14] = v5 + 15;
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2));
  (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)v5[1] + 40))(v5[1], v5);
  *((_BYTE *)v5 + 80) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 2));
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (char *)a1[115];
  v8 = a1[116];
  if ((unint64_t)v7 >= v8)
  {
    v10 = (char *)a1[114];
    v11 = (v7 - v10) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8;
    v15 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v14)
      v15 = v12;
    if (!v15)
LABEL_54:
      __break(1u);
    if (v15 >> 61)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v16 = 8 * v15;
    v17 = (char *)operator new(8 * v15);
    v18 = &v17[v16];
    v19 = &v17[8 * v11];
    *(_QWORD *)v19 = v5;
    v9 = v19 + 8;
    if (v7 == v10)
    {
      a1[114] = v19;
      a1[115] = v9;
      a1[116] = v18;
    }
    else
    {
      v20 = v7 - v10 - 8;
      if (v20 < 0x78
        || &v7[-(v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v19 && &v17[v7 - v10 - (v20 & 0xFFFFFFFFFFFFFFF8) - 8] < v7)
      {
        goto LABEL_59;
      }
      v21 = (v20 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = &v7[-v22];
      v19 -= v22;
      v24 = &v17[8 * v11 - 16];
      v25 = v7 - 16;
      v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v28 = *((_OWORD *)v25 - 1);
        v27 = *(_OWORD *)v25;
        *((_OWORD *)v25 - 1) = 0uLL;
        *(_OWORD *)v25 = 0uLL;
        *((_OWORD *)v24 - 1) = v28;
        *(_OWORD *)v24 = v27;
        v24 -= 32;
        v25 -= 32;
        v26 -= 4;
      }
      while (v26);
      v7 = v23;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_59:
        do
        {
          v29 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v19 - 1) = v29;
          v19 -= 8;
        }
        while (v7 != v10);
      }
      v7 = (char *)a1[114];
      v30 = (char *)a1[115];
      a1[114] = v19;
      a1[115] = v9;
      a1[116] = v18;
      while (v30 != v7)
      {
        v32 = *((_QWORD *)v30 - 1);
        v30 -= 8;
        v31 = v32;
        *(_QWORD *)v30 = 0;
        if (v32)
        {
          pthread_mutex_lock((pthread_mutex_t *)(v31 + 16));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v31 + 8) + 40))(*(_QWORD *)(v31 + 8), 0);
          *(_BYTE *)(v31 + 80) = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(v31 + 16));
          std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*(_QWORD **)(v31 + 120));
          *(_QWORD *)v31 = &off_24C0B0380;
          v33 = *(_QWORD *)(v31 + 88);
          if (v33)
          {
            v34 = *(_QWORD *)(v31 + 96);
            v35 = *(void **)(v31 + 88);
            if (v34 != v33)
            {
              do
              {
                v37 = *(_QWORD *)(v34 - 8);
                v34 -= 8;
                v36 = v37;
                if (v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              }
              while (v34 != v33);
              v35 = *(void **)(v31 + 88);
            }
            *(_QWORD *)(v31 + 96) = v33;
            operator delete(v35);
          }
          pthread_mutex_destroy((pthread_mutex_t *)(v31 + 16));
          v38 = *(_QWORD *)(v31 + 8);
          if (v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          MEMORY[0x20BD0ADEC](v31, 0x10A0C4099F1F9CDLL);
        }
      }
    }
    if (v7)
      operator delete(v7);
  }
  else
  {
    if (!v7)
      goto LABEL_54;
    *(_QWORD *)v7 = v5;
    v9 = v7 + 8;
  }
  a1[115] = v9;
  if ((_QWORD *)a1[114] == v9)
    goto LABEL_54;
  v39 = (_QWORD *)a1[110];
  v40 = a1 + 111;
  if (v39 != v40)
  {
    do
    {
      webrtc::internal::ResourceVideoSendStreamForwarder::OnCreateVideoSendStream(*(v9 - 1), v39[4]);
      v41 = (_QWORD *)v39[1];
      if (v41)
      {
        do
        {
          v42 = v41;
          v41 = (_QWORD *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (_QWORD *)v39[2];
          v43 = *v42 == (_QWORD)v39;
          v39 = v42;
        }
        while (!v43);
      }
      v39 = v42;
    }
    while (v42 != v40);
  }
}

uint64_t webrtc::internal::Call::GetStats@<X0>(webrtc::internal::Call *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  *(_QWORD *)a2 = 0;
  if (*((_BYTE *)this + 288))
    v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 268) + 144))(*((_QWORD *)this + 268));
  else
    v4 = 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 13) + 40);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 2016));
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 260) + 40))(*((_QWORD *)this + 260));
  result = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 2016));
  *(_DWORD *)a2 = *((_DWORD *)this + 408);
  *(_DWORD *)(a2 + 4) = *((_DWORD *)this + 409);
  *(_DWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t webrtc::internal::Call::network_thread(webrtc::internal::Call *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t webrtc::internal::Call::worker_thread(webrtc::internal::Call *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t webrtc::internal::Call::SignalChannelNetworkState(webrtc::internal::Call *this, int a2, int a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  BOOL v16;
  char v17;
  char v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)(uint64_t);

  v6 = *((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) != v6)
  {
    v7 = (unsigned int *)*((_QWORD *)this + 266);
    if (v7)
    {
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = operator new();
    *(_QWORD *)v9 = v7;
    *(_QWORD *)(v9 + 8) = this;
    *(_DWORD *)(v9 + 16) = a2;
    *(_DWORD *)(v9 + 20) = a3;
    *(_QWORD *)(v9 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v9 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::Call::SignalChannelNetworkState(webrtc::MediaType,webrtc::NetworkState)::$_1 &&>;
    v19[0] = v9;
    v20 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v21 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v19, &v18, &v17);
    return v20(1, v19, v19);
  }
  if (a2 != 1)
  {
    *((_DWORD *)this + 71) = a3;
    result = webrtc::internal::Call::UpdateAggregateNetworkState(this);
    v11 = (char *)*((_QWORD *)this + 45);
    v12 = (char *)this + 368;
    if (v11 == (char *)this + 368)
      return result;
    while (1)
    {
LABEL_12:
      v13 = *((_QWORD *)v11 + 4);
      if (*((_DWORD *)this + 71))
      {
        result = webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(v13 + 2856) + 32, 0);
        v14 = (char *)*((_QWORD *)v11 + 1);
        if (v14)
          goto LABEL_16;
      }
      else
      {
        result = webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(v13 + 2856) + 32, *(_DWORD *)(*(_QWORD *)(v13 + 2472) + 44));
        v14 = (char *)*((_QWORD *)v11 + 1);
        if (v14)
        {
          do
          {
LABEL_16:
            v15 = v14;
            v14 = *(char **)v14;
          }
          while (v14);
          goto LABEL_11;
        }
      }
      do
      {
        v15 = (char *)*((_QWORD *)v11 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v11;
        v11 = v15;
      }
      while (!v16);
LABEL_11:
      v11 = v15;
      if (v15 == v12)
        return result;
    }
  }
  *((_DWORD *)this + 70) = a3;
  result = webrtc::internal::Call::UpdateAggregateNetworkState(this);
  v11 = (char *)*((_QWORD *)this + 45);
  v12 = (char *)this + 368;
  if (v11 != (char *)this + 368)
    goto LABEL_12;
  return result;
}

uint64_t webrtc::internal::Call::OnAudioTransportOverheadChanged(webrtc::internal::Call *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v4 = *((_QWORD *)this + 9);
  v5 = (unsigned int *)*((_QWORD *)this + 266);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_QWORD *)(v7 + 8) = this;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::Call::OnAudioTransportOverheadChanged(int)::$_1 &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

uint64_t webrtc::internal::Call::OnLocalSsrcUpdated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v3 = a3;
  *(_DWORD *)(a2 + 28) = a3;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 256) + 272))(*(_QWORD *)(a2 + 256), a3);
  v6 = *(_QWORD *)(a1 + 840);
  if (!v6)
    goto LABEL_12;
  v7 = a1 + 840;
  do
  {
    v8 = *(_DWORD *)(v6 + 32);
    v9 = v8 >= v3;
    if (v8 >= v3)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (v9)
      v7 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 840 && *(_DWORD *)(v7 + 32) <= v3)
  {
    v11 = *(_QWORD *)(v7 + 40);
    v13 = *(_QWORD *)(a2 + 256);
    if (v11)
      v12 = *(_QWORD *)(v11 + 512);
    else
      v12 = 0;
  }
  else
  {
LABEL_12:
    v11 = 0;
    v12 = 0;
    v13 = *(_QWORD *)(a2 + 256);
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 248))(v13, v12);
  *(_QWORD *)(a2 + 264) = v11;
  return result;
}

uint64_t webrtc::internal::Call::OnLocalSsrcUpdated(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;

  if (*(_DWORD *)(a2 + 148) != a3)
  {
    *(_DWORD *)(a2 + 148) = a3;
    v4 = *(_QWORD *)(a2 + 2856);
    v5 = *(_QWORD *)(v4 + 736);
    if (v5 <= 1)
    {
      __break(1u);
    }
    else
    {
      v6 = (_QWORD *)(v4 + 744);
      if ((v5 & 1) != 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)v6 = a3;
      pthread_mutex_lock((pthread_mutex_t *)(v4 + 128));
      *(_DWORD *)(v4 + 44) = a3;
      return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 128));
    }
  }
  return result;
}

{
  uint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = *(_QWORD *)(v3 + 736);
  if (v4 <= 1)
  {
    __break(1u);
  }
  else
  {
    v6 = (_QWORD *)(v3 + 744);
    if ((v4 & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (*(_DWORD *)v6 != a3)
    {
      *(_DWORD *)v6 = a3;
      pthread_mutex_lock((pthread_mutex_t *)(v3 + 128));
      *(_DWORD *)(v3 + 44) = a3;
      return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 128));
    }
  }
  return result;
}

uint64_t webrtc::internal::Call::OnUpdateSyncGroup(uint64_t a1, uint64_t a2, __int128 *__s1, size_t __n)
{
  __int128 *v8;
  size_t v9;
  size_t v10;
  __int128 *v11;
  BOOL v12;
  BOOL v13;
  void **v14;
  __int128 v16;
  unint64_t v17;

  if (__n >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__n > 0x16)
  {
    v9 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__n | 7) != 0x17)
      v9 = __n | 7;
    v10 = v9 + 1;
    v8 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v16 + 1) = __n;
    v17 = v10 | 0x8000000000000000;
    *(_QWORD *)&v16 = v8;
  }
  else
  {
    HIBYTE(v17) = __n;
    v8 = &v16;
  }
  v11 = (__int128 *)((char *)v8 + __n);
  if (v8 <= __s1)
  {
    v12 = v11 >= __s1;
    v13 = v11 == __s1;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  if (!v13 && v12)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (__n)
    memmove(v8, __s1, __n);
  *(_BYTE *)v11 = 0;
  v14 = (void **)(a2 + 64);
  if (*(char *)(a2 + 87) < 0)
    operator delete(*v14);
  *(_OWORD *)v14 = v16;
  *(_QWORD *)(a2 + 80) = v17;
  return webrtc::internal::Call::ConfigureSync(a1, __s1, __n);
}

uint64_t webrtc::internal::Call::OnSentPacket(uint64_t this, const rtc::SentPacket *a2)
{
  uint64_t v3;
  _OWORD *v4;
  BOOL v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  webrtc::SendDelayStats *v11;
  int v12;
  Timestamp v13;

  v3 = this;
  v4 = (_OWORD *)(this + 2160);
  if (!*(_BYTE *)(this + 2216))
  {
    *v4 = *(_OWORD *)a2;
    v9 = *((_OWORD *)a2 + 1);
    v10 = *((_OWORD *)a2 + 2);
    *(_QWORD *)(this + 2208) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(this + 2192) = v10;
    *(_OWORD *)(this + 2176) = v9;
    *(_BYTE *)(this + 2216) = 1;
    goto LABEL_10;
  }
  v5 = *(_QWORD *)v4 != -1 && *(_QWORD *)v4 == *(_QWORD *)a2;
  if (!v5 || *(_QWORD *)(this + 2168) != *((_QWORD *)a2 + 1))
  {
    v6 = *(_OWORD *)a2;
    v7 = *((_OWORD *)a2 + 1);
    v8 = *((_OWORD *)a2 + 2);
    *(_QWORD *)(this + 2208) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(this + 2176) = v7;
    *(_OWORD *)(this + 2192) = v8;
    *v4 = v6;
LABEL_10:
    v11 = *(webrtc::SendDelayStats **)(this + 2112);
    v12 = *(_DWORD *)a2;
    v13.var0 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 48) + 16))(*(_QWORD *)(this + 48));
    webrtc::SendDelayStats::OnSentPacket(v11, v12, v13);
    return (*(uint64_t (**)(_QWORD, const rtc::SentPacket *))(**(_QWORD **)(v3 + 2144) + 168))(*(_QWORD *)(v3 + 2144), a2);
  }
  return this;
}

uint64_t webrtc::internal::Call::OnStartRateUpdate(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 112) + 48) = a2;
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::Call::OnStartRateUpdate(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 96) + 48) = a2;
  return result;
}

unint64_t webrtc::internal::Call::OnTargetTransferRate(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;
  unint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD v18[4];
  uint64_t v19;

  v4 = *(_DWORD *)(a2 + 48);
  v5 = (double)(int)v4 * 0.05;
  if (v5 == INFINITY)
  {
LABEL_2:
    v6 = 50000;
    goto LABEL_7;
  }
  v6 = 250000;
  if (v5 != -INFINITY)
  {
    v7 = (uint64_t)v5;
    if ((uint64_t)v5 >= 2177)
    {
      if (v7 < 0x2A81)
      {
        v6 = 0x206CC800 / v7;
        goto LABEL_7;
      }
      goto LABEL_2;
    }
  }
LABEL_7:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1832));
  *(_QWORD *)(a1 + 1984) = v6;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1832));
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_OWORD *)(a2 + 48);
  v18[2] = *(_OWORD *)(a2 + 32);
  v18[3] = v9;
  v19 = *(_QWORD *)(a2 + 64);
  v10 = *(_OWORD *)(a2 + 16);
  v18[0] = *(_OWORD *)a2;
  v18[1] = v10;
  webrtc::BitrateAllocator::OnNetworkEstimateChanged(v8, (uint64_t)v18);
  *(_DWORD *)(a1 + 1632) = v4;
  if (!v4 || (*(_BYTE *)(a1 + 904) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 1488) != -1)
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(a1 + 1432));
    *(_BYTE *)(a1 + 1496) = 1;
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1472) + 16))(*(_QWORD *)(a1 + 1472));
    v14 = v13 / 0x3E8uLL;
    if (v13 % 0x3E8uLL > 0x1F3)
      ++v14;
    if (-v13 % 0x3E8uLL <= 0x1F4)
      v15 = 0;
    else
      v15 = -1;
    if (v13 < 0)
      v14 = v15 - -v13 / 0x3E8uLL;
    *(_QWORD *)(a1 + 1504) = v14;
    if (*(_QWORD *)(a1 + 1576) != -1)
      webrtc::StatsCounter::TryProcess((webrtc::StatsCounter *)(a1 + 1520));
    *(_BYTE *)(a1 + 1584) = 1;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1560) + 16))(*(_QWORD *)(a1 + 1560));
    if ((result & 0x8000000000000000) != 0)
    {
      if (-(uint64_t)result % 0x3E8uLL <= 0x1F4)
        v17 = 0;
      else
        v17 = -1;
      v16 = v17 - -(uint64_t)result / 0x3E8uLL;
    }
    else
    {
      v16 = result / 0x3E8;
      if (result % 0x3E8 > 0x1F3)
        ++v16;
    }
    *(_QWORD *)(a1 + 1592) = v16;
  }
  else
  {
    webrtc::StatsCounter::Add((webrtc::StatsCounter *)(a1 + 1432), v4 / 0x3E8);
    v11 = *(_DWORD *)(a1 + 1608);
    if (v11 <= v4)
      v11 = v4;
    return webrtc::StatsCounter::Add((webrtc::StatsCounter *)(a1 + 1520), v11 / 0x3E8);
  }
  return result;
}

unint64_t `non-virtual thunk to'webrtc::internal::Call::OnTargetTransferRate(uint64_t a1, uint64_t a2)
{
  return webrtc::internal::Call::OnTargetTransferRate(a1 - 16, a2);
}

uint64_t webrtc::internal::Call::OnAllocationLimitsChanged(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 2136);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 72))(v4, &v6);
  *(_DWORD *)(a1 + 1608) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 1636) = *((_DWORD *)a2 + 4);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::Call::OnAllocationLimitsChanged(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a1 + 2112);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  result = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 72))(v4, &v6);
  *(_DWORD *)(a1 + 1584) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 1612) = *((_DWORD *)a2 + 4);
  return result;
}

uint64_t webrtc::internal::Call::DeliverRtcpPacket(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 1064) != -1)
  {
    v4 = *((_DWORD *)a2 + 4);
    webrtc::StatsCounter::Add((webrtc::StatsCounter *)(result + 1008), v4);
    result = webrtc::StatsCounter::Add((webrtc::StatsCounter *)(v3 + 159), v4);
  }
  v5 = (_QWORD *)v3[45];
  if (v5 != v3 + 46)
  {
    v6 = 0;
    while (1)
    {
      if (*a2)
      {
        result = webrtc::RtpVideoStreamReceiver2::DeliverRtcp((webrtc::RtpVideoStreamReceiver2 *)(v5[4] + 2384), (const unsigned __int8 *)(*(_QWORD *)(*a2 + 16) + a2[1]), a2[2]);
        v7 = (_QWORD *)v5[1];
        if (v7)
          goto LABEL_10;
      }
      else
      {
        result = webrtc::RtpVideoStreamReceiver2::DeliverRtcp((webrtc::RtpVideoStreamReceiver2 *)(v5[4] + 2384), 0, a2[2]);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
LABEL_10:
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
          goto LABEL_5;
        }
      }
      do
      {
        v8 = (_QWORD *)v5[2];
        v9 = *v8 == (_QWORD)v5;
        v5 = v8;
      }
      while (!v9);
LABEL_5:
      v6 |= result;
      v5 = v8;
      if (v8 == v3 + 46)
        goto LABEL_16;
    }
  }
  v6 = 0;
LABEL_16:
  v10 = (_QWORD *)v3[42];
  if (v10 == v3 + 43)
  {
    v11 = (_QWORD *)v3[110];
    v12 = v3 + 111;
    if (v11 == v3 + 111)
      goto LABEL_30;
    do
    {
LABEL_34:
      if (*a2)
        v18 = *(_QWORD *)(*a2 + 16) + a2[1];
      else
        v18 = 0;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v11[4] + 1584) + 72))(*(_QWORD *)(v11[4] + 1584), v18, a2[2]);
      v19 = (_QWORD *)v11[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v11[2];
          v9 = *v20 == (_QWORD)v11;
          v11 = v20;
        }
        while (!v9);
      }
      v11 = v20;
    }
    while (v20 != v12);
    v16 = (_QWORD *)v3[104];
    v17 = v3 + 105;
    if (v16 == v3 + 105)
      goto LABEL_58;
    goto LABEL_46;
  }
  do
  {
    if (*a2)
      v13 = *(_QWORD *)(*a2 + 16) + a2[1];
    else
      v13 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v10[4] + 256) + 64))(*(_QWORD *)(v10[4] + 256), v13, a2[2]);
    v14 = (_QWORD *)v10[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v10[2];
        v9 = *v15 == (_QWORD)v10;
        v10 = v15;
      }
      while (!v9);
    }
    v10 = v15;
  }
  while (v15 != v3 + 43);
  v6 = 1;
  v11 = (_QWORD *)v3[110];
  v12 = v3 + 111;
  if (v11 != v3 + 111)
    goto LABEL_34;
LABEL_30:
  v16 = (_QWORD *)v3[104];
  v17 = v3 + 105;
  if (v16 != v3 + 105)
  {
    do
    {
LABEL_46:
      if (*a2)
        v21 = *(_QWORD *)(*a2 + 16) + a2[1];
      else
        v21 = 0;
      v22 = v16[5];
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v22 + 512) + 16))(*(_QWORD *)(v22 + 512), v21, a2[2]);
      v23 = *(_QWORD *)(v22 + 776);
      v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v22 + 720) + 432))(*(_QWORD *)(v22 + 720));
      v39 = v24 + v23;
      if (*(_QWORD *)(v22 + 784) != v24 + v23)
      {
        *(_QWORD *)(v22 + 784) = v24 + v23;
        v25 = *(_QWORD *)(v22 + 512);
        v38 = &v39;
        (*(void (**)(uint64_t, uint64_t **, uint64_t (*)(_QWORD **, uint64_t)))(*(_QWORD *)v25 + 48))(v25, &v38, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::UpdateOverheadPerPacket(void)::$_1>);
        if (*(_BYTE *)(v22 + 792))
          webrtc::internal::AudioSendStream::ConfigureBitrateObserver((webrtc::internal::AudioSendStream *)v22);
      }
      v26 = (_QWORD *)v16[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v16[2];
          v9 = *v27 == (_QWORD)v16;
          v16 = v27;
        }
        while (!v9);
      }
      v16 = v27;
    }
    while (v27 != v17);
    goto LABEL_58;
  }
  if ((v6 & 1) == 0)
    return result;
LABEL_58:
  v28 = v3[8];
  v29 = (_QWORD *)operator new();
  v30 = *a2;
  if (!*a2)
  {
    v33 = 0;
    v32 = a2[2];
    v34 = rtc::g_clock;
    if (rtc::g_clock)
      goto LABEL_60;
LABEL_62:
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v35 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
    goto LABEL_65;
  }
  v31 = a2[1];
  v32 = a2[2];
  v33 = (const void *)(*(_QWORD *)(v30 + 16) + v31);
  v34 = rtc::g_clock;
  if (!rtc::g_clock)
    goto LABEL_62;
LABEL_60:
  v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
LABEL_65:
  *v29 = &unk_24C0BBFF0;
  v29[1] = 1000 * (v35 / 1000000);
  v29[2] = v32;
  v29[3] = v32;
  if (v32)
  {
    v36 = (void *)operator new[]();
    v29[4] = v36;
    memcpy(v36, v33, v32);
  }
  else
  {
    v29[4] = 0;
  }
  v37 = v29;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v28 + 40))(v28, &v37);
  result = (uint64_t)v37;
  v37 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t `non-virtual thunk to'webrtc::internal::Call::DeliverRtcpPacket(uint64_t a1, _QWORD *a2)
{
  return webrtc::internal::Call::DeliverRtcpPacket(a1 - 8, a2);
}

void webrtc::internal::Call::DeliverRtpPacket(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  webrtc::ReceiveTimeCalculator *v8;
  uint64_t v9;
  __darwin_time_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  timeval v32;
  uint64_t v33;

  v8 = *(webrtc::ReceiveTimeCalculator **)(a1 + 2104);
  v9 = *(_QWORD *)(a3 + 112);
  if (v8)
  {
    if (rtc::g_clock)
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
    }
    else
    {
      gettimeofday(&v32, 0);
      v10 = v32.tv_usec + 1000000 * v32.tv_sec;
    }
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
    v9 = webrtc::ReceiveTimeCalculator::ReconcileReceiveTimes(v8, v9, v10, v11);
    *(_QWORD *)(a3 + 112) = v9;
  }
  v12 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)&v32.tv_usec = v9;
  v33 = v12;
  v32.tv_sec = 0x8000000000000000;
  if (*(_BYTE *)(a3 + 37))
  {
    v13 = *(unsigned __int8 **)(a3 + 56);
    v14 = *(unsigned __int8 **)(a3 + 64);
    if (v13 != v14)
    {
      while (*v13 != *(unsigned __int8 *)(a3 + 37))
      {
        v13 += 4;
        if (v13 == v14)
          goto LABEL_15;
      }
      v15 = *(_QWORD *)(a3 + 88);
      if (v15)
        v15 = *(_QWORD *)(v15 + 16) + *(_QWORD *)(a3 + 96);
      if (v13[1] == 3)
        v32.tv_sec = (1000000
                    * (unint64_t)((*(unsigned __int8 *)(v15 + *((unsigned __int16 *)v13 + 1)) << 16) | (*(unsigned __int8 *)(v15 + *((unsigned __int16 *)v13 + 1) + 1) << 8) | *(unsigned __int8 *)(v15 + *((unsigned __int16 *)v13 + 1) + 2))) >> 18;
    }
  }
LABEL_15:
  (*(void (**)(_QWORD, timeval *))(**(_QWORD **)(a1 + 2144) + 176))(*(_QWORD *)(a1 + 2144), &v32);
  webrtc::ReceiveSideCongestionController::OnReceivedPacket(a1 + 1640, a3, a2);
  v16 = *(_QWORD *)(a1 + 64);
  v17 = operator new();
  v31 = webrtc::RtcEventRtpPacketIncoming::RtcEventRtpPacketIncoming(v17, (__int128 *)a3);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 40))(v16, &v31);
  v18 = v31;
  v31 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if ((a2 - 3) >= 0xFFFFFFFE)
  {
    v19 = a1 + 384;
    if (a2 != 1)
      v19 = a1 + 608;
    v20 = v19 + 24;
    v21 = webrtc::RtpDemuxer::ResolveSink(v19 + 24, a3);
    if (v21)
      goto LABEL_21;
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(a4 + 24))(a4, a3))
      return;
    v21 = webrtc::RtpDemuxer::ResolveSink(v20, a3);
    if (v21)
    {
LABEL_21:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, a3);
      v22 = *(_DWORD *)(a3 + 24) + *(_DWORD *)(a3 + 16) + *(unsigned __int8 *)(a3 + 2);
      v23 = *(_QWORD *)(a3 + 112);
      webrtc::StatsCounter::Add((webrtc::StatsCounter *)(a1 + 1008), v22);
      if (a2 == 1)
      {
        webrtc::StatsCounter::Add((webrtc::StatsCounter *)(a1 + 1096), v22);
        if (!*(_BYTE *)(a1 + 1368))
        {
          *(_BYTE *)(a1 + 1368) = 1;
          *(_QWORD *)(a1 + 1360) = v23;
        }
        if (!*(_BYTE *)(a1 + 1384))
          *(_BYTE *)(a1 + 1384) = 1;
        *(_QWORD *)(a1 + 1376) = v23;
      }
      else
      {
        webrtc::StatsCounter::Add((webrtc::StatsCounter *)(a1 + 1184), v22);
        if (!*(_BYTE *)(a1 + 1400))
        {
          *(_BYTE *)(a1 + 1400) = 1;
          *(_QWORD *)(a1 + 1392) = v23;
        }
        if (!*(_BYTE *)(a1 + 1416))
          *(_BYTE *)(a1 + 1416) = 1;
        *(_QWORD *)(a1 + 1408) = v23;
      }
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/call.cc");
    }
  }
}

void `non-virtual thunk to'webrtc::internal::Call::DeliverRtpPacket(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  webrtc::internal::Call::DeliverRtpPacket(a1 - 8, a2, a3, a4);
}

void std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(*a1);
    std::__tree<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::__map_value_compare<webrtc::VideoSendStream *,std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>,std::less<webrtc::VideoSendStream *>,true>,std::allocator<std::__value_type<webrtc::VideoSendStream *,webrtc::scoped_refptr<webrtc::Resource>>>>::destroy(a1[1]);
    v2 = a1[5];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

void std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>>,void ()(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>>,void ()(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0B0710;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>>,void ()(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0B0710;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>),webrtc::PacketRouter*>>,void ()(std::vector<std::unique_ptr<webrtc::rtcp::RtcpPacket>>)>::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(_QWORD *, void **);
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;

  v2 = a1[2];
  v3 = (void (*)(_QWORD *, void **))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(void (**)(_QWORD *, void **))(*v4 + v3);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v3(v4, __p);
  v5 = __p[0];
  if (__p[0])
  {
    v6 = __p[1];
    v7 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v9 = *--v6;
        v8 = v9;
        *v6 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      while (v6 != v5);
      v7 = __p[0];
    }
    __p[1] = v5;
    operator delete(v7);
  }
}

void std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>>,void ()(long long,std::vector<unsigned int>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>>,void ()(long long,std::vector<unsigned int>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C0B0758;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>>,void ()(long long,std::vector<unsigned int>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0B0758;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>,std::allocator<std::__bind_front_t<void (webrtc::PacketRouter::*)(long long,std::vector<unsigned int>),webrtc::PacketRouter*>>,void ()(long long,std::vector<unsigned int>)>::operator()(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(_QWORD *, uint64_t, void **);
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v3 = a1[2];
  v4 = (void (*)(_QWORD *, uint64_t, void **))a1[1];
  v5 = (_QWORD *)(a1[3] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v4 = *(void (**)(_QWORD *, uint64_t, void **))(*v5 + v4);
  v6 = *a2;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v4(v5, v6, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::Call::Call(webrtc::CallConfig const&,std::unique_ptr<webrtc::RtpTransportControllerSendInterface>)::$_0 &>(webrtc::ReceiveSideCongestionController **a1)
{
  return webrtc::ReceiveSideCongestionController::MaybeProcess(*a1);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::Call::SignalChannelNetworkState(webrtc::MediaType,webrtc::NetworkState)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v1 = *a1;
  v2 = *((_DWORD *)a1 + 3);
  if (*((_DWORD *)a1 + 2) != 1)
  {
    *(_DWORD *)(v1 + 284) = v2;
    result = webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)v1);
    v4 = *(_QWORD **)(v1 + 360);
    v5 = (_QWORD *)(v1 + 368);
    if (v4 == (_QWORD *)(v1 + 368))
      return result;
    while (1)
    {
LABEL_7:
      v6 = v4[4];
      if (*(_DWORD *)(v1 + 284))
      {
        result = webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(v6 + 2856) + 32, 0);
        v7 = (_QWORD *)v4[1];
        if (v7)
          goto LABEL_11;
      }
      else
      {
        result = webrtc::RTCPSender::SetRTCPStatus(*(_QWORD *)(v6 + 2856) + 32, *(_DWORD *)(*(_QWORD *)(v6 + 2472) + 44));
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
LABEL_11:
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
          goto LABEL_6;
        }
      }
      do
      {
        v8 = (_QWORD *)v4[2];
        v9 = *v8 == (_QWORD)v4;
        v4 = v8;
      }
      while (!v9);
LABEL_6:
      v4 = v8;
      if (v8 == v5)
        return result;
    }
  }
  *(_DWORD *)(v1 + 280) = v2;
  result = webrtc::internal::Call::UpdateAggregateNetworkState((webrtc::internal::Call *)v1);
  v4 = *(_QWORD **)(v1 + 360);
  v5 = (_QWORD *)(v1 + 368);
  if (v4 != (_QWORD *)(v1 + 368))
    goto LABEL_7;
  return result;
}

void absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::Call::OnAudioTransportOverheadChanged(int)::$_1 &&>(int *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;

  v1 = *(_QWORD **)(*(_QWORD *)a1 + 832);
  v2 = *(_QWORD *)a1 + 840;
  if (v1 != (_QWORD *)v2)
  {
    do
    {
      v4 = v1[5];
      v5 = a1[2];
      *(_QWORD *)(v4 + 776) = v5;
      v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 720) + 432))(*(_QWORD *)(v4 + 720));
      v12 = v6 + v5;
      if (*(_QWORD *)(v4 + 784) != v6 + v5)
      {
        *(_QWORD *)(v4 + 784) = v6 + v5;
        v7 = *(_QWORD *)(v4 + 512);
        v11 = &v12;
        (*(void (**)(uint64_t, uint64_t **, uint64_t (*)(_QWORD **, uint64_t)))(*(_QWORD *)v7 + 48))(v7, &v11, rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::internal::AudioSendStream::UpdateOverheadPerPacket(void)::$_1>);
        if (*(_BYTE *)(v4 + 792))
          webrtc::internal::AudioSendStream::ConfigureBitrateObserver((webrtc::internal::AudioSendStream *)v4);
      }
      v8 = (_QWORD *)v1[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v1[2];
          v10 = *v9 == (_QWORD)v1;
          v1 = v9;
        }
        while (!v10);
      }
      v1 = v9;
    }
    while (v9 != (_QWORD *)v2);
  }
}

void webrtc::internal::CallStats::~CallStats(webrtc::internal::CallStats *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  webrtc::internal::CallStats *v15;
  uint64_t v16;
  uint64_t v17;
  webrtc::internal::CallStats *v18;
  webrtc::internal::CallStats *v19;
  uint64_t v20;
  uint64_t v21;
  webrtc::internal::CallStats *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    *(_BYTE *)(v2 + 4) = 0;
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 3) = 0;
  }
  if (*((_QWORD *)this + 8) != -1 && *((uint64_t *)this + 7) >= 1)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
    v6 = v5 / 0x3E8uLL;
    if (v5 % 0x3E8uLL > 0x1F3)
      ++v6;
    if (-v5 % 0x3E8uLL <= 0x1F4)
      v7 = 0;
    else
      v7 = -1;
    if (v5 < 0)
      v6 = v7 - -v5 / 0x3E8uLL;
    if ((uint64_t)(v6 - *((_QWORD *)this + 8)) >= 10000)
    {
      v8 = *((_QWORD *)this + 7);
      v9 = atomic_load(&webrtc::internal::CallStats::UpdateHistograms(void)::atomic_histogram_pointer);
      if (v9)
      {
        if (v8 >= 0)
          v10 = *((_QWORD *)this + 7);
        else
          v10 = v8 + 1;
        webrtc::metrics::HistogramAdd(v9, (*((_QWORD *)this + 6) + (v10 >> 1)) / v8);
      }
      else
      {
        while (!__ldaxr(&webrtc::internal::CallStats::UpdateHistograms(void)::atomic_histogram_pointer))
        {
          if (!__stlxr(0, &webrtc::internal::CallStats::UpdateHistograms(void)::atomic_histogram_pointer))
            goto LABEL_25;
        }
        __clrex();
      }
    }
  }
LABEL_25:
  v12 = *((_QWORD *)this + 16);
  *(_BYTE *)(v12 + 4) = 0;
  do
  {
    v13 = __ldaxr((unsigned int *)v12);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, (unsigned int *)v12));
  if (!v14)
    MEMORY[0x20BD0ADEC]();
  if (*((_QWORD *)this + 14))
  {
    v16 = *((_QWORD *)this + 12);
    v15 = (webrtc::internal::CallStats *)*((_QWORD *)this + 13);
    v17 = *(_QWORD *)v15;
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
    **(_QWORD **)(v16 + 8) = v17;
    *((_QWORD *)this + 14) = 0;
    if (v15 != (webrtc::internal::CallStats *)((char *)this + 96))
    {
      do
      {
        v18 = (webrtc::internal::CallStats *)*((_QWORD *)v15 + 1);
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != (webrtc::internal::CallStats *)((char *)this + 96));
    }
  }
  if (*((_QWORD *)this + 11))
  {
    v20 = *((_QWORD *)this + 9);
    v19 = (webrtc::internal::CallStats *)*((_QWORD *)this + 10);
    v21 = *(_QWORD *)v19;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(v20 + 8);
    **(_QWORD **)(v20 + 8) = v21;
    *((_QWORD *)this + 11) = 0;
    if (v19 != (webrtc::internal::CallStats *)((char *)this + 72))
    {
      do
      {
        v22 = (webrtc::internal::CallStats *)*((_QWORD *)v19 + 1);
        operator delete(v19);
        v19 = v22;
      }
      while (v22 != (webrtc::internal::CallStats *)((char *)this + 72));
    }
  }
  v23 = (unsigned int *)*((_QWORD *)this + 3);
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
      MEMORY[0x20BD0ADEC]();
  }
}

uint64_t webrtc::internal::CallStats::EnsureStarted(webrtc::internal::CallStats *this)
{
  uint64_t v2;
  unsigned __int8 v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];
  __n128 (*v19)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v20)(webrtc::internal::CallStats **);
  unsigned int *v21;

  v2 = *((_QWORD *)this + 15);
  v18[0] = this;
  v19 = absl::internal_any_invocable::LocalManagerTrivial;
  v20 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::CallStats::EnsureStarted(void)::$_1 &>;
  v4 = &unk_253EA7000;
  if ((v3 & 1) == 0)
  {
    v16 = v2;
    v4 = (_QWORD *)&unk_253EA7000;
    v14 = v13;
    v2 = v16;
    if (v14)
    {
      v15 = (_QWORD *)operator new();
      *v15 = &unk_24C0B13E8;
      webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v15;
      v4 = (_QWORD *)&unk_253EA7000;
      v2 = v16;
    }
  }
  webrtc::RepeatingTaskHandle::DelayedStart(v2, 1000000, (uint64_t)v18, 0, v4[153], (uint64_t)&v17, &v21);
  v5 = v21;
  v21 = 0;
  v6 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      MEMORY[0x20BD0ADEC]();
    v9 = v21;
    if (v21)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        MEMORY[0x20BD0ADEC]();
    }
  }
  return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v19)(1, v18, v18);
}

unint64_t webrtc::internal::CallStats::UpdateAndReport(webrtc::internal::CallStats *this)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  int64_t v29;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int64x2_t v37;
  _QWORD *v38;
  void *__p;
  uint64_t v40;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = result / 0x3E8;
  if (result % 0x3E8 > 0x1F3)
    ++v3;
  if (-(uint64_t)result % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  if ((result & 0x8000000000000000) != 0)
    v3 = v4 - -(uint64_t)result / 0x3E8uLL;
  v5 = (_QWORD *)((char *)this + 72);
  v38 = &v38;
  __p = &v38;
  v6 = (_QWORD *)*((_QWORD *)this + 10);
  if (v6 == (_QWORD *)((char *)this + 72))
    goto LABEL_29;
  v7 = v3 - 1500;
  if (&v38 == v5)
  {
    while (1)
    {
      v31 = (_QWORD *)v6[1];
      if (v6[3] < v7)
        break;
LABEL_45:
      v6 = v31;
      if (v31 == &v38)
        goto LABEL_29;
    }
    if (v31 == &v38)
    {
      v32 = 1;
    }
    else
    {
      if (v31[3] >= v7)
      {
        v32 = 0;
        if (v6 == v31)
        {
LABEL_56:
          if (!v32)
            v31 = (_QWORD *)v31[1];
          goto LABEL_45;
        }
LABEL_55:
        v33 = *v31;
        v34 = *v6;
        *(_QWORD *)(v34 + 8) = *(_QWORD *)(*v31 + 8);
        **(_QWORD **)(v33 + 8) = v34;
        v35 = v38;
        v38[1] = v6;
        *v6 = v35;
        v38 = (_QWORD *)v33;
        *(_QWORD *)(v33 + 8) = &v38;
        goto LABEL_56;
      }
      while (1)
      {
        v31 = (_QWORD *)v31[1];
        v32 = v31 == &v38;
        if (v31 == &v38)
          break;
        if (v31[3] >= v7)
          goto LABEL_54;
      }
    }
    v31 = &v38;
LABEL_54:
    if (v6 == v31)
      goto LABEL_56;
    goto LABEL_55;
  }
  v8 = 0;
  v9 = &v38;
  do
  {
    v10 = (_QWORD *)v6[1];
    if (v6[3] < v7)
    {
      if (v10 == v5)
      {
        v11 = 1;
LABEL_18:
        v10 = (_QWORD *)((char *)this + 72);
      }
      else
      {
        while (1)
        {
          v11 = v10[3] < v7;
          if (v10[3] >= v7)
            break;
          v10 = (_QWORD *)v10[1];
          if (v10 == v5)
            goto LABEL_18;
        }
      }
      if (v6 != v10)
      {
        v9 = (_QWORD *)*v10;
        v12 = 1;
        if ((_QWORD *)*v10 != v6)
        {
          v13 = v6;
          do
          {
            v13 = (_QWORD *)v13[1];
            ++v12;
          }
          while (v13 != v9);
        }
        *((_QWORD *)this + 11) -= v12;
        v8 += v12;
        v14 = *v6;
        *(_QWORD *)(v14 + 8) = v9[1];
        *(_QWORD *)v9[1] = v14;
        v15 = v38;
        v38[1] = v6;
        *v6 = v15;
        v38 = v9;
        v9[1] = &v38;
      }
      if (!v11)
        v10 = (_QWORD *)v10[1];
    }
    v6 = v10;
  }
  while (v10 != v5);
  if (v8)
  {
    result = (unint64_t)__p;
    v16 = *(_QWORD *)__p;
    *(_QWORD *)(v16 + 8) = v9[1];
    *(_QWORD *)v9[1] = v16;
    v40 = 0;
    if ((_QWORD **)result != &v38)
    {
      do
      {
        v17 = *(_QWORD **)(result + 8);
        operator delete((void *)result);
        result = (unint64_t)v17;
      }
      while (v17 != &v38);
    }
  }
LABEL_29:
  v18 = (_QWORD *)*((_QWORD *)this + 10);
  v19 = -1;
  if (v18 == v5)
  {
    *((_QWORD *)this + 4) = -1;
    v23 = (_QWORD *)((char *)this + 32);
    v25 = (int64_t *)((char *)this + 40);
    v24 = *((_QWORD *)this + 5);
    v30 = *((_QWORD *)this + 11);
    if (!v30)
    {
      *v25 = -1;
      return result;
    }
    v29 = 0 / v30;
    if (v24 == -1)
      goto LABEL_42;
LABEL_41:
    v29 = (uint64_t)(float)((float)((float)v29 * 0.3) + (float)((float)v24 * 0.7));
    goto LABEL_42;
  }
  v20 = (_QWORD *)*((_QWORD *)this + 10);
  do
  {
    v22 = v20 + 1;
    v20 = (_QWORD *)v20[1];
    v21 = v22[1];
    if (v21 > v19)
      v19 = v21;
  }
  while (v20 != v5);
  *((_QWORD *)this + 4) = v19;
  v23 = (_QWORD *)((char *)this + 32);
  v25 = (int64_t *)((char *)this + 40);
  v24 = *((_QWORD *)this + 5);
  v26 = *((_QWORD *)this + 11);
  if (!v26)
  {
    v29 = -1;
    *v25 = -1;
    if (v19 < 0)
      return result;
    goto LABEL_61;
  }
  v27 = 0;
  do
  {
    v28 = v18 + 1;
    v18 = (_QWORD *)v18[1];
    v27 += v28[1];
  }
  while (v18 != v5);
  v29 = v27 / v26;
  if (v24 != -1)
    goto LABEL_41;
LABEL_42:
  *v25 = v29;
  if (v19 < 0)
    return result;
LABEL_61:
  v36 = *((_QWORD *)this + 13);
  if ((webrtc::internal::CallStats *)v36 != (webrtc::internal::CallStats *)((char *)this + 96))
  {
    do
    {
      result = (***(uint64_t (****)(_QWORD, int64_t, _QWORD))(v36 + 16))(*(_QWORD *)(v36 + 16), *v25, *v23);
      v36 = *(_QWORD *)(v36 + 8);
    }
    while ((webrtc::internal::CallStats *)v36 != (webrtc::internal::CallStats *)((char *)this + 96));
    v29 = *v25;
  }
  v37 = vdupq_n_s64(1uLL);
  v37.i64[0] = v29;
  *((int64x2_t *)this + 3) = vaddq_s64(*((int64x2_t *)this + 3), v37);
  return result;
}

uint64_t std::list<webrtc::CallStatsObserver *>::remove(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v24;

  v22 = &v22;
  __p = &v22;
  v2 = (_QWORD *)a1[1];
  if (v2 == a1)
    return 0;
  if (&v22 == a1)
  {
    while (1)
    {
      v12 = (_QWORD *)v2[1];
      v13 = v2[2];
      if (v13 == *a2)
        break;
LABEL_19:
      v2 = v12;
      if (v12 == a1)
        return 0;
    }
    if (v12 == a1)
    {
      v14 = 1;
    }
    else
    {
      if (v12[2] != v13)
      {
        v14 = 0;
LABEL_29:
        if (v2 != v12)
        {
          v15 = *v12;
          v16 = *v2;
          *(_QWORD *)(v16 + 8) = *(_QWORD *)(*v12 + 8);
          **(_QWORD **)(v15 + 8) = v16;
          v17 = *a1;
          *(_QWORD *)(v17 + 8) = v2;
          *v2 = v17;
          *a1 = v15;
          *(_QWORD *)(v15 + 8) = a1;
        }
        if (!v14)
          v12 = (_QWORD *)v12[1];
        goto LABEL_19;
      }
      while (1)
      {
        v12 = (_QWORD *)v12[1];
        v14 = v12 == a1;
        if (v12 == a1)
          break;
        if (v12[2] != v13)
          goto LABEL_29;
      }
    }
    v12 = a1;
    goto LABEL_29;
  }
  v3 = 0;
  v4 = &v22;
  do
  {
    v5 = (_QWORD *)v2[1];
    v6 = v2[2];
    if (v6 == *a2)
    {
      if (v5 == a1)
      {
        v7 = 1;
LABEL_11:
        v5 = a1;
      }
      else
      {
        while (1)
        {
          v7 = v5[2] == v6;
          if (v5[2] != v6)
            break;
          v5 = (_QWORD *)v5[1];
          if (v5 == a1)
            goto LABEL_11;
        }
      }
      if (v2 != v5)
      {
        v4 = (_QWORD *)*v5;
        v8 = 1;
        if ((_QWORD *)*v5 != v2)
        {
          v9 = v2;
          do
          {
            v9 = (_QWORD *)v9[1];
            ++v8;
          }
          while (v9 != v4);
        }
        a1[2] -= v8;
        v3 += v8;
        v10 = *v2;
        *(_QWORD *)(v10 + 8) = v4[1];
        *(_QWORD *)v4[1] = v10;
        v11 = v22;
        v22[1] = v2;
        *v2 = v11;
        v22 = v4;
        v4[1] = &v22;
      }
      if (!v7)
        v5 = (_QWORD *)v5[1];
    }
    v2 = v5;
  }
  while (v5 != a1);
  if (v3)
  {
    v19 = __p;
    v20 = *(_QWORD *)__p;
    *(_QWORD *)(v20 + 8) = v4[1];
    *(_QWORD *)v4[1] = v20;
    v24 = 0;
    if (v19 != &v22)
    {
      do
      {
        v21 = (_QWORD *)v19[1];
        operator delete(v19);
        v19 = v21;
      }
      while (v21 != &v22);
    }
  }
  return v3;
}

unint64_t webrtc::internal::CallStats::RtcpRttStatsImpl::OnRttUpdate(webrtc::internal::CallStats::RtcpRttStatsImpl *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);

  v3 = *((_QWORD *)this + 1);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16));
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  if (v4 < 0)
    v7 = v6 - -v4 / 0x3E8uLL;
  else
    v7 = v5;
  v8 = *(_QWORD *)(v3 + 120);
  {
    v14 = operator new(0x20uLL);
    v14[2] = a2;
    v14[3] = v7;
    v15 = *(_QWORD *)(v3 + 72);
    *v14 = v15;
    v14[1] = v3 + 72;
    *(_QWORD *)(v15 + 8) = v14;
    *(_QWORD *)(v3 + 72) = v14;
    ++*(_QWORD *)(v3 + 88);
    if (*(_QWORD *)(v3 + 64) == -1)
      *(_QWORD *)(v3 + 64) = v7;
    return webrtc::internal::CallStats::UpdateAndReport((webrtc::internal::CallStats *)v3);
  }
  else
  {
    v9 = *(unsigned int **)(v3 + 128);
    if (v9)
    {
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = operator new(0x18uLL);
    *v11 = v3;
    v11[1] = a2;
    v11[2] = v7;
    v12 = (_QWORD *)operator new();
    *v12 = v9;
    v12[1] = v11;
    v12[2] = 24;
    v12[3] = absl::internal_any_invocable::RemoteManagerTrivial;
    v12[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::CallStats::OnRttUpdate(long long)::$_0 &&>;
    v18[0] = v12;
    v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v8 + 8))(v8, v18, &v17, &v16);
    return v19(1, v18, v18);
  }
}

uint64_t webrtc::internal::CallStats::RtcpRttStatsImpl::LastProcessedRtt(webrtc::internal::CallStats::RtcpRttStatsImpl *this)
{
  return 0;
}

void webrtc::internal::CallStats::RtcpRttStatsImpl::~RtcpRttStatsImpl(webrtc::internal::CallStats::RtcpRttStatsImpl *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::internal::CallStats::EnsureStarted(void)::$_1 &>(webrtc::internal::CallStats **a1)
{
  webrtc::internal::CallStats::UpdateAndReport(*a1);
  return 1000000;
}

unint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::CallStats::OnRttUpdate(long long)::$_0 &&>(webrtc::internal::CallStats ***a1)
{
  webrtc::internal::CallStats *v1;
  webrtc::internal::CallStats *v2;
  webrtc::internal::CallStats *v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = **a1;
  v2 = (*a1)[1];
  v3 = (*a1)[2];
  v4 = operator new(0x20uLL);
  v4[2] = v2;
  v4[3] = v3;
  v5 = *((_QWORD *)v1 + 9);
  *v4 = v5;
  v4[1] = (char *)v1 + 72;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)v1 + 9) = v4;
  ++*((_QWORD *)v1 + 11);
  if (*((_QWORD *)v1 + 8) == -1)
    *((_QWORD *)v1 + 8) = v3;
  return webrtc::internal::CallStats::UpdateAndReport(v1);
}

__n128 absl::internal_any_invocable::RemoteManagerTrivial(char a1, void **a2, _OWORD *a3)
{
  __n128 result;

  if ((a1 & 1) != 0)
  {
    operator delete(*a2);
  }
  else
  {
    result = *(__n128 *)a2;
    *a3 = *(_OWORD *)a2;
  }
  return result;
}

void dcsctp::CallbackDeferrer::TriggerDeferred(dcsctp::CallbackDeferrer *this)
{
  char *v1;
  char *v2;
  char *v4;
  char *v5;
  void (*v6)(_BYTE *, _QWORD);
  char *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _BYTE __p[24];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  *((_BYTE *)this + 16) = 0;
  v1 = (char *)*((_QWORD *)this + 3);
  v2 = (char *)*((_QWORD *)this + 4);
  if (v1 != v2)
  {
    v4 = (char *)operator new(0x200uLL);
    *((_QWORD *)this + 3) = v4;
    *((_QWORD *)this + 4) = v4;
    *((_QWORD *)this + 5) = v4 + 512;
    v5 = v1 + 16;
    while (1)
    {
      v7 = v5 - 16;
      v6 = (void (*)(_BYTE *, _QWORD))*((_QWORD *)v5 - 2);
      v8 = *((_QWORD *)v5 + 5);
      v9 = v5 - 8;
      switch(v8)
      {
        case 1:
          *(_QWORD *)__p = *((_QWORD *)v5 - 1);
          *(_OWORD *)&__p[8] = *(_OWORD *)v5;
          *(_QWORD *)&v16 = *((_QWORD *)v5 + 2);
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
          break;
        case 2:
          *(_DWORD *)__p = *((_DWORD *)v5 - 2);
          v10 = *(_OWORD *)v5;
          *(_QWORD *)&v16 = *((_QWORD *)v5 + 2);
          *(_OWORD *)&__p[8] = v10;
          *((_QWORD *)v5 + 1) = 0;
          *((_QWORD *)v5 + 2) = 0;
          *(_QWORD *)v5 = 0;
          break;
        case 3:
          *(_OWORD *)__p = *(_OWORD *)(v5 - 8);
          *(_QWORD *)&__p[16] = *((_QWORD *)v5 + 1);
          *(_QWORD *)v9 = 0;
          *(_QWORD *)v5 = 0;
          *((_QWORD *)v5 + 1) = 0;
          v11 = *((_OWORD *)v5 + 1);
          v17 = *((_QWORD *)v5 + 4);
          v16 = v11;
          *((_QWORD *)v5 + 3) = 0;
          *((_QWORD *)v5 + 4) = 0;
          *((_QWORD *)v5 + 2) = 0;
          break;
        case 4:
          *(_WORD *)__p = *(_WORD *)v9;
          break;
        default:
          break;
      }
      v18 = v8;
      v6(__p, *((_QWORD *)this + 1));
      switch(v18)
      {
        case 3:
          if (SHIBYTE(v17) < 0)
          {
            operator delete((void *)v16);
            v12 = *(void **)__p;
            if (!*(_QWORD *)__p)
              goto LABEL_4;
          }
          else
          {
            v12 = *(void **)__p;
            if (!*(_QWORD *)__p)
              goto LABEL_4;
          }
          *(_QWORD *)&__p[8] = v12;
          break;
        case 2:
          if ((SBYTE7(v16) & 0x80000000) == 0)
            goto LABEL_4;
          v12 = *(void **)&__p[8];
          break;
        case 1:
          v12 = *(void **)&__p[8];
          if (!*(_QWORD *)&__p[8])
            goto LABEL_4;
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          break;
        default:
          goto LABEL_4;
      }
      operator delete(v12);
LABEL_4:
      v5 += 64;
      if (v7 + 64 == v2)
      {
        if (!v1)
          return;
        while (2)
        {
          v13 = *((_QWORD *)v2 - 1);
          if (v13 == 3)
          {
            if (*(v2 - 9) < 0)
            {
              operator delete(*((void **)v2 - 4));
              v14 = (void *)*((_QWORD *)v2 - 7);
              if (!v14)
                goto LABEL_25;
            }
            else
            {
              v14 = (void *)*((_QWORD *)v2 - 7);
              if (!v14)
                goto LABEL_25;
            }
            *((_QWORD *)v2 - 6) = v14;
          }
          else
          {
            if (v13 != 2)
            {
              if (v13 == 1)
              {
                v14 = (void *)*((_QWORD *)v2 - 6);
                if (v14)
                {
                  *((_QWORD *)v2 - 5) = v14;
                  break;
                }
              }
LABEL_25:
              v2 -= 64;
              if (v2 == v1)
              {
                operator delete(v1);
                return;
              }
              continue;
            }
            if ((*(v2 - 25) & 0x80000000) == 0)
              goto LABEL_25;
            v14 = (void *)*((_QWORD *)v2 - 6);
          }
          break;
        }
        operator delete(v14);
        goto LABEL_25;
      }
    }
  }
}

uint64_t dcsctp::CallbackDeferrer::SendPacketWithStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  if (!a3)
    a2 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2);
}

uint64_t dcsctp::CallbackDeferrer::CreateTimeout(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t dcsctp::CallbackDeferrer::TimeMillis(dcsctp::CallbackDeferrer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t dcsctp::CallbackDeferrer::GetRandomInt(dcsctp::CallbackDeferrer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

char *dcsctp::CallbackDeferrer::OnMessageReceived(char *result, uint64_t a2)
{
  char *v2;
  void (**v3)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v4)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = result;
  v4 = dcsctp::CallbackDeferrer::OnMessageReceived(dcsctp::DcSctpMessage)::$_0::__invoke;
  v3 = (void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)result + 4);
  if ((unint64_t)v3 >= *((_QWORD *)result + 5))
  {
    result = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::DcSctpMessage>((void **)result + 3, &v4, (uint64_t *)a2);
    *((_QWORD *)v2 + 4) = result;
  }
  else if (v3)
  {
    *v3 = dcsctp::CallbackDeferrer::OnMessageReceived(dcsctp::DcSctpMessage)::$_0::__invoke;
    v3[1] = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2;
    v3[2] = 0;
    v3[3] = 0;
    v3[4] = 0;
    *((_OWORD *)v3 + 1) = *(_OWORD *)(a2 + 8);
    v3[4] = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 24);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v3[7] = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))1;
    result = (char *)(v3 + 8);
    *((_QWORD *)v2 + 4) = v3 + 8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void dcsctp::CallbackDeferrer::OnError(uint64_t a1, int a2, void **__src, size_t __len)
{
  void **v7;
  void **v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  void *__p[2];
  unint64_t v17;
  void (*v18)(unsigned int *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = dcsctp::CallbackDeferrer::OnError(dcsctp::ErrorKind,std::string_view)::$_0::__invoke;
  v15 = a2;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v7 = (void **)operator new(v9 + 1);
    __p[1] = (void *)__len;
    v17 = v10 | 0x8000000000000000;
    __p[0] = v7;
    v8 = (void **)((char *)v7 + __len);
    if (v7 > __src)
      goto LABEL_9;
  }
  else
  {
    HIBYTE(v17) = __len;
    v7 = __p;
    v8 = (void **)((char *)__p + __len);
    if (__p > __src)
      goto LABEL_9;
  }
  if (v8 > __src)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  if (__len)
    memmove(v7, __src, __len);
  *(_BYTE *)v8 = 0;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 < *(_QWORD *)(a1 + 40))
  {
    if (v11)
    {
      *(_QWORD *)v11 = dcsctp::CallbackDeferrer::OnError(dcsctp::ErrorKind,std::string_view)::$_0::__invoke;
      *(_DWORD *)(v11 + 8) = v15;
      v12 = v17;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 32) = v12;
      *(_QWORD *)(v11 + 56) = 2;
      *(_QWORD *)(a1 + 32) = v11 + 64;
      return;
    }
    goto LABEL_17;
  }
  v13 = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::Error>((void **)(a1 + 24), &v18, (uint64_t)&v15);
  v14 = SHIBYTE(v17);
  *(_QWORD *)(a1 + 32) = v13;
  if (v14 < 0)
    operator delete(__p[0]);
}

void dcsctp::CallbackDeferrer::OnAborted(uint64_t a1, int a2, void **__src, size_t __len)
{
  void **v7;
  void **v8;
  size_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  int v14;
  int v15;
  void *__p[2];
  unint64_t v17;
  void (*v18)(unsigned int *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = dcsctp::CallbackDeferrer::OnAborted(dcsctp::ErrorKind,std::string_view)::$_0::__invoke;
  v15 = a2;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_18:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v7 = (void **)operator new(v9 + 1);
    __p[1] = (void *)__len;
    v17 = v10 | 0x8000000000000000;
    __p[0] = v7;
    v8 = (void **)((char *)v7 + __len);
    if (v7 > __src)
      goto LABEL_9;
  }
  else
  {
    HIBYTE(v17) = __len;
    v7 = __p;
    v8 = (void **)((char *)__p + __len);
    if (__p > __src)
      goto LABEL_9;
  }
  if (v8 > __src)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_9:
  if (__len)
    memmove(v7, __src, __len);
  *(_BYTE *)v8 = 0;
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 < *(_QWORD *)(a1 + 40))
  {
    if (v11)
    {
      *(_QWORD *)v11 = dcsctp::CallbackDeferrer::OnAborted(dcsctp::ErrorKind,std::string_view)::$_0::__invoke;
      *(_DWORD *)(v11 + 8) = v15;
      v12 = v17;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(v11 + 32) = v12;
      *(_QWORD *)(v11 + 56) = 2;
      *(_QWORD *)(a1 + 32) = v11 + 64;
      return;
    }
    goto LABEL_17;
  }
  v13 = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::Error>((void **)(a1 + 24), &v18, (uint64_t)&v15);
  v14 = SHIBYTE(v17);
  *(_QWORD *)(a1 + 32) = v13;
  if (v14 < 0)
    operator delete(__p[0]);
}

_QWORD *dcsctp::CallbackDeferrer::OnConnected(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);

  v1 = this;
  v3 = dcsctp::CallbackDeferrer::OnConnected(void)::$_0::__invoke;
  v2 = (uint64_t (**)(uint64_t, uint64_t))this[4];
  if ((unint64_t)v2 >= this[5])
  {
    this = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::monostate>((void **)this + 3, &v3);
    v1[4] = this;
  }
  else if (v2)
  {
    *v2 = dcsctp::CallbackDeferrer::OnConnected(void)::$_0::__invoke;
    v2[7] = 0;
    this = v2 + 8;
    v1[4] = v2 + 8;
  }
  else
  {
    __break(1u);
  }
  return this;
}

_QWORD *dcsctp::CallbackDeferrer::OnClosed(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);

  v1 = this;
  v3 = dcsctp::CallbackDeferrer::OnClosed(void)::$_0::__invoke;
  v2 = (uint64_t (**)(uint64_t, uint64_t))this[4];
  if ((unint64_t)v2 >= this[5])
  {
    this = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::monostate>((void **)this + 3, &v3);
    v1[4] = this;
  }
  else if (v2)
  {
    *v2 = dcsctp::CallbackDeferrer::OnClosed(void)::$_0::__invoke;
    v2[7] = 0;
    this = v2 + 8;
    v1[4] = v2 + 8;
  }
  else
  {
    __break(1u);
  }
  return this;
}

_QWORD *dcsctp::CallbackDeferrer::OnConnectionRestarted(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);

  v1 = this;
  v3 = dcsctp::CallbackDeferrer::OnConnectionRestarted(void)::$_0::__invoke;
  v2 = (uint64_t (**)(uint64_t, uint64_t))this[4];
  if ((unint64_t)v2 >= this[5])
  {
    this = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::monostate>((void **)this + 3, &v3);
    v1[4] = this;
  }
  else if (v2)
  {
    *v2 = dcsctp::CallbackDeferrer::OnConnectionRestarted(void)::$_0::__invoke;
    v2[7] = 0;
    this = v2 + 8;
    v1[4] = v2 + 8;
  }
  else
  {
    __break(1u);
  }
  return this;
}

void dcsctp::CallbackDeferrer::OnStreamsResetFailed(uint64_t a1, const void *a2, uint64_t a3, void **__src, size_t __len)
{
  size_t v8;
  uint64_t v10;
  void **v11;
  void **v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  void *v19[2];
  char *v20;
  void *__p[2];
  unint64_t v22;

  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  if (a3)
  {
    v8 = 2 * a3;
    if (2 * a3 < 0)
      goto LABEL_23;
    v10 = (2 * a3) >> 1;
    v19[0] = operator new(2 * a3);
    v20 = (char *)v19[0] + 2 * v10;
    memcpy(v19[0], a2, v8);
    v19[1] = v20;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_23:
    abort();
  if (__len > 0x16)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __p[1] = (void *)__len;
    v22 = v14 | 0x8000000000000000;
    __p[0] = v11;
    v12 = (void **)((char *)v11 + __len);
    if (v11 > __src)
      goto LABEL_12;
  }
  else
  {
    HIBYTE(v22) = __len;
    v11 = __p;
    v12 = (void **)((char *)__p + __len);
    if (__p > __src)
      goto LABEL_12;
  }
  if (v12 > __src)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_12:
  if (__len)
    memmove(v11, __src, __len);
  *(_BYTE *)v12 = 0;
  v15 = *(_QWORD *)(a1 + 32);
  if (v15 < *(_QWORD *)(a1 + 40))
  {
    if (v15)
    {
      *(_QWORD *)v15 = dcsctp::CallbackDeferrer::OnStreamsResetFailed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>,std::string_view)::$_0::__invoke;
      *(_OWORD *)(v15 + 8) = *(_OWORD *)v19;
      *(_QWORD *)(v15 + 24) = v20;
      v19[0] = 0;
      v19[1] = 0;
      v20 = 0;
      v16 = v22;
      *(_OWORD *)(v15 + 32) = *(_OWORD *)__p;
      __p[1] = 0;
      v22 = 0;
      __p[0] = 0;
      *(_QWORD *)(v15 + 48) = v16;
      *(_QWORD *)(v15 + 56) = 3;
      *(_QWORD *)(a1 + 32) = v15 + 64;
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  v17 = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::StreamReset>((void **)(a1 + 24), (uint64_t)dcsctp::CallbackDeferrer::OnStreamsResetFailed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>,std::string_view)::$_0::__invoke, (uint64_t)v19);
  v18 = SHIBYTE(v22);
  *(_QWORD *)(a1 + 32) = v17;
  if (v18 < 0)
    operator delete(__p[0]);
LABEL_19:
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
}

void dcsctp::CallbackDeferrer::OnStreamsResetPerformed(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v10;
  int v11;
  void *v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *__p;
  uint64_t v17;
  uint64_t v18;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (a3)
  {
    v4 = 2 * a3;
    if (2 * a3 < 0)
      goto LABEL_13;
    v6 = (2 * a3) >> 1;
    v7 = (char *)operator new(2 * a3);
    v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v7[2 * v6];
    v13 = v7;
    v15 = v8;
    memcpy(v7, a2, v4);
    v14 = v8;
    __p = 0;
    v17 = 0;
    v18 = 0;
    v9 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    if ((unint64_t)v9 < *(_QWORD *)(a1 + 40))
    {
LABEL_4:
      if (v9)
      {
        *v9 = dcsctp::CallbackDeferrer::OnStreamsResetPerformed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke;
        v9[1] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
        v9[2] = v8;
        v9[3] = v8;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        v9[4] = 0;
        v9[5] = 0;
        v9[6] = 0;
        v9[7] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))3;
        *(_QWORD *)(a1 + 32) = v9 + 8;
        return;
      }
      __break(1u);
LABEL_13:
      abort();
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    __p = 0;
    v17 = 0;
    v18 = 0;
    v9 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    if ((unint64_t)v9 < *(_QWORD *)(a1 + 40))
      goto LABEL_4;
  }
  v10 = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::StreamReset>((void **)(a1 + 24), (uint64_t)dcsctp::CallbackDeferrer::OnStreamsResetPerformed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke, (uint64_t)&v13);
  v11 = SHIBYTE(v18);
  *(_QWORD *)(a1 + 32) = v10;
  if (v11 < 0)
  {
    operator delete(__p);
    v12 = v13;
    if (v13)
      goto LABEL_9;
  }
  else
  {
    v12 = v13;
    if (v13)
LABEL_9:
      operator delete(v12);
  }
}

void dcsctp::CallbackDeferrer::OnIncomingStreamsReset(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  char *v10;
  int v11;
  void *v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *__p;
  uint64_t v17;
  uint64_t v18;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  if (a3)
  {
    v4 = 2 * a3;
    if (2 * a3 < 0)
      goto LABEL_13;
    v6 = (2 * a3) >> 1;
    v7 = (char *)operator new(2 * a3);
    v8 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&v7[2 * v6];
    v13 = v7;
    v15 = v8;
    memcpy(v7, a2, v4);
    v14 = v8;
    __p = 0;
    v17 = 0;
    v18 = 0;
    v9 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    if ((unint64_t)v9 < *(_QWORD *)(a1 + 40))
    {
LABEL_4:
      if (v9)
      {
        *v9 = dcsctp::CallbackDeferrer::OnIncomingStreamsReset(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke;
        v9[1] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v7;
        v9[2] = v8;
        v9[3] = v8;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        v9[4] = 0;
        v9[5] = 0;
        v9[6] = 0;
        v9[7] = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))3;
        *(_QWORD *)(a1 + 32) = v9 + 8;
        return;
      }
      __break(1u);
LABEL_13:
      abort();
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    __p = 0;
    v17 = 0;
    v18 = 0;
    v9 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
    if ((unint64_t)v9 < *(_QWORD *)(a1 + 40))
      goto LABEL_4;
  }
  v10 = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::StreamReset>((void **)(a1 + 24), (uint64_t)dcsctp::CallbackDeferrer::OnIncomingStreamsReset(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke, (uint64_t)&v13);
  v11 = SHIBYTE(v18);
  *(_QWORD *)(a1 + 32) = v10;
  if (v11 < 0)
  {
    operator delete(__p);
    v12 = v13;
    if (v13)
      goto LABEL_9;
  }
  else
  {
    v12 = v13;
    if (v13)
LABEL_9:
      operator delete(v12);
  }
}

void dcsctp::CallbackDeferrer::OnBufferedAmountLow(_QWORD *a1, __int16 a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  void *v31;

  v5 = (char *)a1[4];
  v4 = a1[5];
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = dcsctp::CallbackDeferrer::OnBufferedAmountLow(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0::__invoke;
      *((_WORD *)v5 + 4) = a2;
      *((_QWORD *)v5 + 7) = 4;
      v6 = v5 + 64;
LABEL_4:
      a1[4] = v6;
      return;
    }
    goto LABEL_39;
  }
  v7 = (char *)a1[3];
  v8 = (v5 - v7) >> 6;
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) >> 58)
    goto LABEL_40;
  v10 = v4 - (_QWORD)v7;
  if (v10 >> 5 > v9)
    v9 = v10 >> 5;
  v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFC0;
  v12 = 0x3FFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v9;
  if (!v12)
  {
LABEL_39:
    __break(1u);
LABEL_40:
    abort();
  }
  if (v12 >> 58)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v13 = v12 << 6;
  v14 = (char *)operator new(v12 << 6);
  v15 = &v14[v13];
  v16 = &v14[64 * v8];
  *(_QWORD *)v16 = dcsctp::CallbackDeferrer::OnBufferedAmountLow(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0::__invoke;
  *((_WORD *)v16 + 4) = a2;
  *((_QWORD *)v16 + 7) = 4;
  v6 = v16 + 64;
  if (v5 != v7)
  {
    v17 = 0;
    do
    {
      v18 = &v16[v17];
      *(_QWORD *)&v16[v17 - 64] = *(_QWORD *)&v5[v17 - 64];
      v19 = *(_QWORD *)&v5[v17 - 8];
      v20 = &v5[v17 - 56];
      switch(v19)
      {
        case 1:
          *((_QWORD *)v18 - 7) = *(_QWORD *)v20;
          v21 = &v16[v17];
          v22 = &v5[v17];
          *((_OWORD *)v21 - 3) = *(_OWORD *)&v5[v17 - 48];
          *((_QWORD *)v21 - 4) = *(_QWORD *)&v5[v17 - 32];
          *((_QWORD *)v22 - 6) = 0;
          *((_QWORD *)v22 - 5) = 0;
          *((_QWORD *)v22 - 4) = 0;
          break;
        case 2:
          *((_DWORD *)v18 - 14) = *(_DWORD *)v20;
          v23 = &v16[v17];
          v24 = &v5[v17];
          v25 = *(_OWORD *)&v5[v17 - 48];
          *((_QWORD *)v23 - 4) = *(_QWORD *)&v5[v17 - 32];
          *((_OWORD *)v23 - 3) = v25;
          *((_QWORD *)v24 - 5) = 0;
          *((_QWORD *)v24 - 4) = 0;
          *((_QWORD *)v24 - 6) = 0;
          break;
        case 3:
          v26 = &v16[v17];
          *(_OWORD *)(v18 - 56) = *(_OWORD *)v20;
          v27 = &v5[v17];
          *((_QWORD *)v26 - 5) = *(_QWORD *)&v5[v17 - 40];
          *(_QWORD *)v20 = 0;
          *(_QWORD *)&v5[v17 - 48] = 0;
          *(_QWORD *)&v5[v17 - 40] = 0;
          v28 = *(_OWORD *)&v5[v17 - 32];
          *((_QWORD *)v26 - 2) = *(_QWORD *)&v5[v17 - 16];
          *((_OWORD *)v26 - 2) = v28;
          *((_QWORD *)v27 - 3) = 0;
          *((_QWORD *)v27 - 2) = 0;
          *((_QWORD *)v27 - 4) = 0;
          break;
        case 4:
          *((_WORD *)v18 - 28) = *(_WORD *)v20;
          break;
        default:
          break;
      }
      *((_QWORD *)v18 - 1) = v19;
      v17 -= 64;
    }
    while (&v5[v17] != v7);
    v5 = (char *)a1[3];
    v29 = (char *)a1[4];
    a1[3] = &v16[v17];
    a1[4] = v6;
    a1[5] = v15;
    while (1)
    {
      if (v29 == v5)
        goto LABEL_37;
      v30 = *((_QWORD *)v29 - 1);
      switch(v30)
      {
        case 3:
          if (*(v29 - 9) < 0)
          {
            operator delete(*((void **)v29 - 4));
            v31 = (void *)*((_QWORD *)v29 - 7);
            if (v31)
            {
LABEL_35:
              *((_QWORD *)v29 - 6) = v31;
              goto LABEL_21;
            }
          }
          else
          {
            v31 = (void *)*((_QWORD *)v29 - 7);
            if (v31)
              goto LABEL_35;
          }
          break;
        case 2:
          if (*(v29 - 25) < 0)
          {
            v31 = (void *)*((_QWORD *)v29 - 6);
            goto LABEL_21;
          }
          break;
        case 1:
          v31 = (void *)*((_QWORD *)v29 - 6);
          if (v31)
          {
            *((_QWORD *)v29 - 5) = v31;
LABEL_21:
            operator delete(v31);
          }
          break;
      }
      v29 -= 64;
    }
  }
  a1[3] = v16;
  a1[4] = v6;
  a1[5] = v15;
LABEL_37:
  if (!v5)
    goto LABEL_4;
  operator delete(v5);
  a1[4] = v6;
}

_QWORD *dcsctp::CallbackDeferrer::OnTotalBufferedAmountLow(_QWORD *this)
{
  _QWORD *v1;
  uint64_t (**v2)(uint64_t, uint64_t);
  uint64_t (*v3)(uint64_t, uint64_t);

  v1 = this;
  v3 = dcsctp::CallbackDeferrer::OnTotalBufferedAmountLow(void)::$_0::__invoke;
  v2 = (uint64_t (**)(uint64_t, uint64_t))this[4];
  if ((unint64_t)v2 >= this[5])
  {
    this = std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::monostate>((void **)this + 3, &v3);
    v1[4] = this;
  }
  else if (v2)
  {
    *v2 = dcsctp::CallbackDeferrer::OnTotalBufferedAmountLow(void)::$_0::__invoke;
    v2[7] = 0;
    this = v2 + 8;
    v1[4] = v2 + 8;
  }
  else
  {
    __break(1u);
  }
  return this;
}

uint64_t dcsctp::CallbackDeferrer::OnLifecycleMessageExpired(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
}

uint64_t dcsctp::CallbackDeferrer::OnLifecycleMessageFullySent(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8));
}

uint64_t dcsctp::CallbackDeferrer::OnLifecycleMessageDelivered(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

uint64_t dcsctp::CallbackDeferrer::OnLifecycleEnd(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
}

void dcsctp::CallbackDeferrer::~CallbackDeferrer(dcsctp::CallbackDeferrer *this)
{
  uint64_t v1;
  void **v2;

  *(_QWORD *)this = &off_24C0B07D0;
  v2 = (void **)((char *)this + 24);
  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__base_destruct_at_end[abi:sn180100]((uint64_t)this + 24, v1);
    operator delete(*v2);
  }
}

{
  uint64_t v1;
  void **v2;

  *(_QWORD *)this = &off_24C0B07D0;
  v2 = (void **)((char *)this + 24);
  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__base_destruct_at_end[abi:sn180100]((uint64_t)this + 24, v1);
    operator delete(*v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t dcsctp::DcSctpSocketCallbacks::CreateTimeout(dcsctp::DcSctpSocketCallbacks *this)
{
  return (*(uint64_t (**)(dcsctp::DcSctpSocketCallbacks *, _QWORD))(*(_QWORD *)this + 32))(this, 0);
}

uint64_t dcsctp::CallbackDeferrer::Now(dcsctp::CallbackDeferrer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

void std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__base_destruct_at_end[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  void *v6;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 64)
  {
    v5 = *(_QWORD *)(i - 8);
    switch(v5)
    {
      case 3:
        if (*(char *)(i - 9) < 0)
        {
          operator delete(*(void **)(i - 32));
          v6 = *(void **)(i - 56);
          if (!v6)
            continue;
        }
        else
        {
          v6 = *(void **)(i - 56);
          if (!v6)
            continue;
        }
        *(_QWORD *)(i - 48) = v6;
        break;
      case 2:
        if ((*(char *)(i - 25) & 0x80000000) == 0)
          continue;
        v6 = *(void **)(i - 48);
        break;
      case 1:
        v6 = *(void **)(i - 48);
        if (!v6)
          continue;
        *(_QWORD *)(i - 40) = v6;
        break;
      default:
        continue;
    }
    operator delete(v6);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

char *std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::DcSctpMessage>(void **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  void *v33;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0;
  v8 = 0x3FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v4;
  if (!v8)
  {
    __break(1u);
LABEL_38:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v8 >> 58)
    goto LABEL_38;
  v11 = v8 << 6;
  v12 = (char *)operator new(v8 << 6);
  v13 = &v12[v11];
  v14 = &v12[64 * v3];
  v15 = *a3;
  *(_QWORD *)v14 = *a2;
  *((_QWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 1) = *(_OWORD *)(a3 + 1);
  *((_QWORD *)v14 + 4) = a3[3];
  a3[1] = 0;
  a3[2] = 0;
  a3[3] = 0;
  *((_QWORD *)v14 + 7) = 1;
  v16 = v14 + 64;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != *a1)
  {
    v19 = 0;
    do
    {
      v20 = &v14[v19];
      *(_QWORD *)&v14[v19 - 64] = *(_QWORD *)&v18[v19 - 64];
      v21 = *(_QWORD *)&v18[v19 - 8];
      v22 = &v18[v19 - 56];
      switch(v21)
      {
        case 1:
          *((_QWORD *)v20 - 7) = *(_QWORD *)v22;
          v23 = &v14[v19];
          v24 = &v18[v19];
          *((_OWORD *)v23 - 3) = *(_OWORD *)&v18[v19 - 48];
          *((_QWORD *)v23 - 4) = *(_QWORD *)&v18[v19 - 32];
          *((_QWORD *)v24 - 6) = 0;
          *((_QWORD *)v24 - 5) = 0;
          *((_QWORD *)v24 - 4) = 0;
          break;
        case 2:
          *((_DWORD *)v20 - 14) = *(_DWORD *)v22;
          v25 = &v14[v19];
          v26 = &v18[v19];
          v27 = *(_OWORD *)&v18[v19 - 48];
          *((_QWORD *)v25 - 4) = *(_QWORD *)&v18[v19 - 32];
          *((_OWORD *)v25 - 3) = v27;
          *((_QWORD *)v26 - 5) = 0;
          *((_QWORD *)v26 - 4) = 0;
          *((_QWORD *)v26 - 6) = 0;
          break;
        case 3:
          v28 = &v14[v19];
          *(_OWORD *)(v20 - 56) = *(_OWORD *)v22;
          v29 = &v18[v19];
          *((_QWORD *)v28 - 5) = *(_QWORD *)&v18[v19 - 40];
          *(_QWORD *)v22 = 0;
          *(_QWORD *)&v18[v19 - 48] = 0;
          *(_QWORD *)&v18[v19 - 40] = 0;
          v30 = *(_OWORD *)&v18[v19 - 32];
          *((_QWORD *)v28 - 2) = *(_QWORD *)&v18[v19 - 16];
          *((_OWORD *)v28 - 2) = v30;
          *((_QWORD *)v29 - 3) = 0;
          *((_QWORD *)v29 - 2) = 0;
          *((_QWORD *)v29 - 4) = 0;
          break;
        case 4:
          *((_WORD *)v20 - 28) = *(_WORD *)v22;
          break;
        default:
          break;
      }
      *((_QWORD *)v20 - 1) = v21;
      v19 -= 64;
    }
    while (&v18[v19] != v17);
    v18 = (char *)*a1;
    v31 = (char *)a1[1];
    *a1 = &v14[v19];
    a1[1] = v16;
    a1[2] = v13;
    while (1)
    {
      if (v31 == v18)
        goto LABEL_33;
      v32 = *((_QWORD *)v31 - 1);
      switch(v32)
      {
        case 3:
          if (*(v31 - 9) < 0)
          {
            operator delete(*((void **)v31 - 4));
            v33 = (void *)*((_QWORD *)v31 - 7);
            if (v33)
            {
LABEL_31:
              *((_QWORD *)v31 - 6) = v33;
              goto LABEL_17;
            }
          }
          else
          {
            v33 = (void *)*((_QWORD *)v31 - 7);
            if (v33)
              goto LABEL_31;
          }
          break;
        case 2:
          if (*(v31 - 25) < 0)
          {
            v33 = (void *)*((_QWORD *)v31 - 6);
            goto LABEL_17;
          }
          break;
        case 1:
          v33 = (void *)*((_QWORD *)v31 - 6);
          if (v33)
          {
            *((_QWORD *)v31 - 5) = v33;
LABEL_17:
            operator delete(v33);
          }
          break;
      }
      v31 -= 64;
    }
  }
  *a1 = v14;
  a1[1] = v16;
  a1[2] = v13;
LABEL_33:
  if (v18)
    operator delete(v18);
  return v16;
}

void dcsctp::CallbackDeferrer::OnMessageReceived(dcsctp::DcSctpMessage)::$_0::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  if (a1[6] != 1)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
  v8 = *a1;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 1);
  v10 = a1[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

char *std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::Error>(void **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  uint64_t v31;
  void *v32;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0;
  v8 = 0x3FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v4;
  if (!v8)
  {
    __break(1u);
LABEL_38:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v8 >> 58)
    goto LABEL_38;
  v11 = v8 << 6;
  v12 = (char *)operator new(v8 << 6);
  v13 = &v12[64 * v3];
  *(_QWORD *)v13 = *a2;
  v14 = &v12[v11];
  *((_DWORD *)v13 + 2) = *(_DWORD *)a3;
  *((_OWORD *)v13 + 1) = *(_OWORD *)(a3 + 8);
  *((_QWORD *)v13 + 4) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *((_QWORD *)v13 + 7) = 2;
  v15 = v13 + 64;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != *a1)
  {
    v18 = 0;
    do
    {
      v19 = &v13[v18];
      *(_QWORD *)&v13[v18 - 64] = *(_QWORD *)&v17[v18 - 64];
      v20 = *(_QWORD *)&v17[v18 - 8];
      v21 = &v17[v18 - 56];
      switch(v20)
      {
        case 1:
          *((_QWORD *)v19 - 7) = *(_QWORD *)v21;
          v22 = &v13[v18];
          v23 = &v17[v18];
          *((_OWORD *)v22 - 3) = *(_OWORD *)&v17[v18 - 48];
          *((_QWORD *)v22 - 4) = *(_QWORD *)&v17[v18 - 32];
          *((_QWORD *)v23 - 6) = 0;
          *((_QWORD *)v23 - 5) = 0;
          *((_QWORD *)v23 - 4) = 0;
          break;
        case 2:
          *((_DWORD *)v19 - 14) = *(_DWORD *)v21;
          v24 = &v13[v18];
          v25 = &v17[v18];
          v26 = *(_OWORD *)&v17[v18 - 48];
          *((_QWORD *)v24 - 4) = *(_QWORD *)&v17[v18 - 32];
          *((_OWORD *)v24 - 3) = v26;
          *((_QWORD *)v25 - 5) = 0;
          *((_QWORD *)v25 - 4) = 0;
          *((_QWORD *)v25 - 6) = 0;
          break;
        case 3:
          v27 = &v13[v18];
          *(_OWORD *)(v19 - 56) = *(_OWORD *)v21;
          v28 = &v17[v18];
          *((_QWORD *)v27 - 5) = *(_QWORD *)&v17[v18 - 40];
          *(_QWORD *)v21 = 0;
          *(_QWORD *)&v17[v18 - 48] = 0;
          *(_QWORD *)&v17[v18 - 40] = 0;
          v29 = *(_OWORD *)&v17[v18 - 32];
          *((_QWORD *)v27 - 2) = *(_QWORD *)&v17[v18 - 16];
          *((_OWORD *)v27 - 2) = v29;
          *((_QWORD *)v28 - 3) = 0;
          *((_QWORD *)v28 - 2) = 0;
          *((_QWORD *)v28 - 4) = 0;
          break;
        case 4:
          *((_WORD *)v19 - 28) = *(_WORD *)v21;
          break;
        default:
          break;
      }
      *((_QWORD *)v19 - 1) = v20;
      v18 -= 64;
    }
    while (&v17[v18] != v16);
    v17 = (char *)*a1;
    v30 = (char *)a1[1];
    *a1 = &v13[v18];
    a1[1] = v15;
    a1[2] = v14;
    while (1)
    {
      if (v30 == v17)
        goto LABEL_33;
      v31 = *((_QWORD *)v30 - 1);
      switch(v31)
      {
        case 3:
          if (*(v30 - 9) < 0)
          {
            operator delete(*((void **)v30 - 4));
            v32 = (void *)*((_QWORD *)v30 - 7);
            if (v32)
            {
LABEL_31:
              *((_QWORD *)v30 - 6) = v32;
              goto LABEL_17;
            }
          }
          else
          {
            v32 = (void *)*((_QWORD *)v30 - 7);
            if (v32)
              goto LABEL_31;
          }
          break;
        case 2:
          if (*(v30 - 25) < 0)
          {
            v32 = (void *)*((_QWORD *)v30 - 6);
            goto LABEL_17;
          }
          break;
        case 1:
          v32 = (void *)*((_QWORD *)v30 - 6);
          if (v32)
          {
            *((_QWORD *)v30 - 5) = v32;
LABEL_17:
            operator delete(v32);
          }
          break;
      }
      v30 -= 64;
    }
  }
  *a1 = v13;
  a1[1] = v15;
  a1[2] = v14;
LABEL_33:
  if (v17)
    operator delete(v17);
  return v15;
}

void dcsctp::CallbackDeferrer::OnError(dcsctp::ErrorKind,std::string_view)::$_0::__invoke(unsigned int *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  if (*((_QWORD *)a1 + 6) != 2)
    goto LABEL_10;
  v8 = *a1;
  v10 = *((_QWORD *)a1 + 3);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  if (SHIBYTE(v10) < 0)
  {
    a4 = (uint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) == 0)
    {
      a3 = (void **)__p[0];
      if (!__p[1] || __p[0])
        goto LABEL_7;
    }
    __break(1u);
LABEL_10:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  a3 = __p;
  a4 = HIBYTE(v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8, a3, a4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

void dcsctp::CallbackDeferrer::OnAborted(dcsctp::ErrorKind,std::string_view)::$_0::__invoke(unsigned int *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *__p[2];
  uint64_t v10;

  if (*((_QWORD *)a1 + 6) != 2)
    goto LABEL_10;
  v8 = *a1;
  v10 = *((_QWORD *)a1 + 3);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 3) = 0;
  if (SHIBYTE(v10) < 0)
  {
    a4 = (uint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) == 0)
    {
      a3 = (void **)__p[0];
      if (!__p[1] || __p[0])
        goto LABEL_7;
    }
    __break(1u);
LABEL_10:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  a3 = __p;
  a4 = HIBYTE(v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 96))(a2, v8, a3, a4);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

_QWORD *std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::monostate>(void **a1, _QWORD *a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  void *v28;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = (v2 - (_BYTE *)*a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    abort();
  v7 = (_BYTE *)a1[2] - v3;
  if (v7 >> 5 > v5)
    v5 = v7 >> 5;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0)
    v5 = 0x3FFFFFFFFFFFFFFLL;
  if (!v5)
  {
    __break(1u);
LABEL_38:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 >> 58)
    goto LABEL_38;
  v9 = v5 << 6;
  v10 = (char *)operator new(v5 << 6);
  v11 = &v10[v9];
  v12 = &v10[64 * v4];
  *(_QWORD *)v12 = *a2;
  *((_QWORD *)v12 + 7) = 0;
  v13 = v12 + 64;
  if (v2 != v3)
  {
    v14 = 0;
    do
    {
      v15 = &v12[v14];
      *(_QWORD *)&v12[v14 - 64] = *(_QWORD *)&v2[v14 - 64];
      v16 = *(_QWORD *)&v2[v14 - 8];
      v17 = &v2[v14 - 56];
      switch(v16)
      {
        case 1:
          *((_QWORD *)v15 - 7) = *(_QWORD *)v17;
          v18 = &v12[v14];
          v19 = &v2[v14];
          *((_OWORD *)v18 - 3) = *(_OWORD *)&v2[v14 - 48];
          *((_QWORD *)v18 - 4) = *(_QWORD *)&v2[v14 - 32];
          *((_QWORD *)v19 - 6) = 0;
          *((_QWORD *)v19 - 5) = 0;
          *((_QWORD *)v19 - 4) = 0;
          break;
        case 2:
          *((_DWORD *)v15 - 14) = *(_DWORD *)v17;
          v20 = &v12[v14];
          v21 = &v2[v14];
          v22 = *(_OWORD *)&v2[v14 - 48];
          *((_QWORD *)v20 - 4) = *(_QWORD *)&v2[v14 - 32];
          *((_OWORD *)v20 - 3) = v22;
          *((_QWORD *)v21 - 5) = 0;
          *((_QWORD *)v21 - 4) = 0;
          *((_QWORD *)v21 - 6) = 0;
          break;
        case 3:
          v23 = &v12[v14];
          *(_OWORD *)(v15 - 56) = *(_OWORD *)v17;
          v24 = &v2[v14];
          *((_QWORD *)v23 - 5) = *(_QWORD *)&v2[v14 - 40];
          *(_QWORD *)v17 = 0;
          *(_QWORD *)&v2[v14 - 48] = 0;
          *(_QWORD *)&v2[v14 - 40] = 0;
          v25 = *(_OWORD *)&v2[v14 - 32];
          *((_QWORD *)v23 - 2) = *(_QWORD *)&v2[v14 - 16];
          *((_OWORD *)v23 - 2) = v25;
          *((_QWORD *)v24 - 3) = 0;
          *((_QWORD *)v24 - 2) = 0;
          *((_QWORD *)v24 - 4) = 0;
          break;
        case 4:
          *((_WORD *)v15 - 28) = *(_WORD *)v17;
          break;
        default:
          break;
      }
      *((_QWORD *)v15 - 1) = v16;
      v14 -= 64;
    }
    while (&v2[v14] != v3);
    v2 = (char *)*a1;
    v26 = (char *)a1[1];
    *a1 = &v12[v14];
    a1[1] = v13;
    a1[2] = v11;
    while (1)
    {
      if (v26 == v2)
        goto LABEL_33;
      v27 = *((_QWORD *)v26 - 1);
      switch(v27)
      {
        case 3:
          if (*(v26 - 9) < 0)
          {
            operator delete(*((void **)v26 - 4));
            v28 = (void *)*((_QWORD *)v26 - 7);
            if (v28)
            {
LABEL_31:
              *((_QWORD *)v26 - 6) = v28;
              goto LABEL_17;
            }
          }
          else
          {
            v28 = (void *)*((_QWORD *)v26 - 7);
            if (v28)
              goto LABEL_31;
          }
          break;
        case 2:
          if (*(v26 - 25) < 0)
          {
            v28 = (void *)*((_QWORD *)v26 - 6);
            goto LABEL_17;
          }
          break;
        case 1:
          v28 = (void *)*((_QWORD *)v26 - 6);
          if (v28)
          {
            *((_QWORD *)v26 - 5) = v28;
LABEL_17:
            operator delete(v28);
          }
          break;
      }
      v26 -= 64;
    }
  }
  *a1 = v12;
  a1[1] = v13;
  a1[2] = v11;
LABEL_33:
  if (v2)
    operator delete(v2);
  return v13;
}

uint64_t dcsctp::CallbackDeferrer::OnConnected(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
}

uint64_t dcsctp::CallbackDeferrer::OnClosed(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
}

uint64_t dcsctp::CallbackDeferrer::OnConnectionRestarted(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
}

char *std::vector<std::pair<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>>::__emplace_back_slow_path<void (*)(absl::variant<absl::monostate,dcsctp::DcSctpMessage,dcsctp::CallbackDeferrer::Error,dcsctp::CallbackDeferrer::StreamReset,webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,dcsctp::DcSctpSocketCallbacks &),dcsctp::CallbackDeferrer::StreamReset>(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;
  char *v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  void *v33;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 6;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58)
    abort();
  v6 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v6 >> 5 > v4)
    v4 = v6 >> 5;
  v7 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0;
  v8 = 0x3FFFFFFFFFFFFFFLL;
  if (!v7)
    v8 = v4;
  if (!v8)
  {
    __break(1u);
LABEL_38:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v8 >> 58)
    goto LABEL_38;
  v11 = v8 << 6;
  v12 = (char *)operator new(v8 << 6);
  v13 = &v12[64 * v3];
  *(_QWORD *)v13 = a2;
  v14 = &v12[v11];
  *(_OWORD *)(v13 + 8) = *(_OWORD *)a3;
  *((_QWORD *)v13 + 3) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *((_OWORD *)v13 + 2) = *(_OWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *((_QWORD *)v13 + 6) = v15;
  *((_QWORD *)v13 + 7) = 3;
  v16 = v13 + 64;
  v17 = (char *)*a1;
  v18 = (char *)a1[1];
  if (v18 != *a1)
  {
    v19 = 0;
    do
    {
      v20 = &v13[v19];
      *(_QWORD *)&v13[v19 - 64] = *(_QWORD *)&v18[v19 - 64];
      v21 = *(_QWORD *)&v18[v19 - 8];
      v22 = &v18[v19 - 56];
      switch(v21)
      {
        case 1:
          *((_QWORD *)v20 - 7) = *(_QWORD *)v22;
          v23 = &v13[v19];
          v24 = &v18[v19];
          *((_OWORD *)v23 - 3) = *(_OWORD *)&v18[v19 - 48];
          *((_QWORD *)v23 - 4) = *(_QWORD *)&v18[v19 - 32];
          *((_QWORD *)v24 - 6) = 0;
          *((_QWORD *)v24 - 5) = 0;
          *((_QWORD *)v24 - 4) = 0;
          break;
        case 2:
          *((_DWORD *)v20 - 14) = *(_DWORD *)v22;
          v25 = &v13[v19];
          v26 = &v18[v19];
          v27 = *(_OWORD *)&v18[v19 - 48];
          *((_QWORD *)v25 - 4) = *(_QWORD *)&v18[v19 - 32];
          *((_OWORD *)v25 - 3) = v27;
          *((_QWORD *)v26 - 5) = 0;
          *((_QWORD *)v26 - 4) = 0;
          *((_QWORD *)v26 - 6) = 0;
          break;
        case 3:
          v28 = &v13[v19];
          *(_OWORD *)(v20 - 56) = *(_OWORD *)v22;
          v29 = &v18[v19];
          *((_QWORD *)v28 - 5) = *(_QWORD *)&v18[v19 - 40];
          *(_QWORD *)v22 = 0;
          *(_QWORD *)&v18[v19 - 48] = 0;
          *(_QWORD *)&v18[v19 - 40] = 0;
          v30 = *(_OWORD *)&v18[v19 - 32];
          *((_QWORD *)v28 - 2) = *(_QWORD *)&v18[v19 - 16];
          *((_OWORD *)v28 - 2) = v30;
          *((_QWORD *)v29 - 3) = 0;
          *((_QWORD *)v29 - 2) = 0;
          *((_QWORD *)v29 - 4) = 0;
          break;
        case 4:
          *((_WORD *)v20 - 28) = *(_WORD *)v22;
          break;
        default:
          break;
      }
      *((_QWORD *)v20 - 1) = v21;
      v19 -= 64;
    }
    while (&v18[v19] != v17);
    v18 = (char *)*a1;
    v31 = (char *)a1[1];
    *a1 = &v13[v19];
    a1[1] = v16;
    a1[2] = v14;
    while (1)
    {
      if (v31 == v18)
        goto LABEL_33;
      v32 = *((_QWORD *)v31 - 1);
      switch(v32)
      {
        case 3:
          if (*(v31 - 9) < 0)
          {
            operator delete(*((void **)v31 - 4));
            v33 = (void *)*((_QWORD *)v31 - 7);
            if (v33)
            {
LABEL_31:
              *((_QWORD *)v31 - 6) = v33;
              goto LABEL_17;
            }
          }
          else
          {
            v33 = (void *)*((_QWORD *)v31 - 7);
            if (v33)
              goto LABEL_31;
          }
          break;
        case 2:
          if (*(v31 - 25) < 0)
          {
            v33 = (void *)*((_QWORD *)v31 - 6);
            goto LABEL_17;
          }
          break;
        case 1:
          v33 = (void *)*((_QWORD *)v31 - 6);
          if (v33)
          {
            *((_QWORD *)v31 - 5) = v33;
LABEL_17:
            operator delete(v33);
          }
          break;
      }
      v31 -= 64;
    }
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
LABEL_33:
  if (v18)
    operator delete(v18);
  return v16;
}

void dcsctp::CallbackDeferrer::OnStreamsResetFailed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>,std::string_view)::$_0::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  void *__p[2];
  uint64_t v13;

  if (a1[6] != 3)
LABEL_15:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v11 = (void *)*a1;
  v8 = *a1;
  v9 = *(_OWORD *)(a1 + 1);
  *a1 = 0;
  a1[1] = 0;
  v13 = a1[5];
  *(_OWORD *)__p = *(_OWORD *)(a1 + 3);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v10 = v9 - v8;
  if ((_QWORD)v9 == v8)
    v8 = 0;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    a4 = __p;
    a5 = HIBYTE(v13);
    goto LABEL_9;
  }
  a5 = (uint64_t)__p[1];
  if (((unint64_t)__p[1] & 0x8000000000000000) != 0 || (a4 = (void **)__p[0], __p[1]) && !__p[0])
  {
    __break(1u);
    goto LABEL_15;
  }
LABEL_9:
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 128))(a2, v8, v10 >> 1, a4, a5);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (v11)
    operator delete(v11);
}

void dcsctp::CallbackDeferrer::OnStreamsResetPerformed(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (*(_QWORD *)(a1 + 48) != 3)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = *(char *)(a1 + 47);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = v8 - (_QWORD)v9;
  v13 = v12 >> 1;
  if (v12)
    v14 = v9;
  else
    v14 = 0;
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 136))(a2, v14, v13);
  if (v11 < 0)
  {
    operator delete(v10);
    if (v9)
      goto LABEL_7;
  }
  else if (v9)
  {
LABEL_7:
    operator delete(v9);
  }
}

void dcsctp::CallbackDeferrer::OnIncomingStreamsReset(rtc::ArrayView<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short> const,-4711l>)::$_0::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  if (*(_QWORD *)(a1 + 48) != 3)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>((absl::variant_internal *)a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = *(void **)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v11 = *(char *)(a1 + 47);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v12 = v8 - (_QWORD)v9;
  v13 = v12 >> 1;
  if (v12)
    v14 = v9;
  else
    v14 = 0;
  (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v14, v13);
  if (v11 < 0)
  {
    operator delete(v10);
    if (v9)
      goto LABEL_7;
  }
  else if (v9)
  {
LABEL_7:
    operator delete(v9);
  }
}

uint64_t dcsctp::CallbackDeferrer::OnBufferedAmountLow(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0::__invoke(absl::variant_internal *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((_QWORD *)a1 + 6) != 4)
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(a1, a2, a3, a4, a5, a6, a7, a8);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 152))(a2, *(unsigned __int16 *)a1);
}

uint64_t dcsctp::CallbackDeferrer::OnTotalBufferedAmountLow(void)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
}

char *webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::TrivialUntypedFunctionArgs<1ul>>(char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t (*v11)(_OWORD *);
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t (*v15)(_OWORD *);
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (result[24])
    goto LABEL_9;
  v8 = result;
  v12 = a2;
  *(_QWORD *)&v13[0] = a3;
  v14 = a4;
  v15 = 0;
  v9 = *((_QWORD *)result + 1);
  if (v9 < *((_QWORD *)result + 2))
  {
    if (v9)
    {
      *(_QWORD *)v9 = a2;
      v10 = v13[0];
      *(_OWORD *)(v9 + 24) = v13[1];
      *(_OWORD *)(v9 + 8) = v10;
      *(_QWORD *)(v9 + 40) = a4;
      *(_QWORD *)(v9 + 48) = 0;
      *((_QWORD *)result + 1) = v9 + 56;
      return result;
    }
    __break(1u);
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/callback_list.h", 39, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v12);
  }
  result = std::vector<webrtc::callback_list_impl::CallbackListReceivers::Callback>::__push_back_slow_path<webrtc::callback_list_impl::CallbackListReceivers::Callback>((void **)result, (uint64_t)&v12);
  v11 = v15;
  *((_QWORD *)v8 + 1) = result;
  if (v11)
    return (char *)v11(v13);
  return result;
}

{
  char *v8;
  unint64_t v9;
  __int128 v10;
  uint64_t (*v11)(_OWORD *);
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t (*v15)(_OWORD *);
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (result[24])
    goto LABEL_9;
  v8 = result;
  v12 = 0;
  *(_QWORD *)&v13[0] = a2;
  v14 = a3;
  v15 = 0;
  v9 = *((_QWORD *)result + 1);
  if (v9 < *((_QWORD *)result + 2))
  {
    if (v9)
    {
      *(_QWORD *)v9 = 0;
      v10 = v13[0];
      *(_OWORD *)(v9 + 24) = v13[1];
      *(_OWORD *)(v9 + 8) = v10;
      *(_QWORD *)(v9 + 40) = a3;
      *(_QWORD *)(v9 + 48) = 0;
      *((_QWORD *)result + 1) = v9 + 56;
      return result;
    }
    __break(1u);
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/callback_list.h", 46, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v12);
  }
  result = std::vector<webrtc::callback_list_impl::CallbackListReceivers::Callback>::__push_back_slow_path<webrtc::callback_list_impl::CallbackListReceivers::Callback>((void **)result, (uint64_t)&v12);
  v11 = v15;
  *((_QWORD *)v8 + 1) = result;
  if (v11)
    return (char *)v11(v13);
  return result;
}

char *webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(char *result, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_OWORD *);
  unint64_t v12;
  __int128 v13;
  uint64_t (*v14)(_OWORD *);
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t (*v18)(_OWORD *);
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (result[24])
    goto LABEL_9;
  v8 = result;
  v10 = *a3;
  v9 = a3[1];
  v11 = (uint64_t (*)(_OWORD *))a3[2];
  v15 = a2;
  *(_QWORD *)&v16[0] = v10;
  v17 = v9;
  v18 = v11;
  v12 = *((_QWORD *)result + 1);
  if (v12 < *((_QWORD *)result + 2))
  {
    if (v12)
    {
      *(_QWORD *)v12 = a2;
      v13 = v16[0];
      *(_OWORD *)(v12 + 24) = v16[1];
      *(_OWORD *)(v12 + 8) = v13;
      *(_QWORD *)(v12 + 40) = v9;
      *(_QWORD *)(v12 + 48) = v11;
      *((_QWORD *)result + 1) = v12 + 56;
      return result;
    }
    __break(1u);
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/callback_list.h", 39, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v15);
  }
  result = std::vector<webrtc::callback_list_impl::CallbackListReceivers::Callback>::__push_back_slow_path<webrtc::callback_list_impl::CallbackListReceivers::Callback>((void **)result, (uint64_t)&v15);
  v14 = v18;
  *((_QWORD *)v8 + 1) = result;
  if (v14)
    return (char *)v14(v16);
  return result;
}

char *webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(char *result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_OWORD *);
  unint64_t v12;
  __int128 v13;
  uint64_t (*v14)(_OWORD *);
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t (*v18)(_OWORD *);
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (result[24])
    goto LABEL_9;
  v8 = result;
  v10 = *a2;
  v9 = a2[1];
  v11 = (uint64_t (*)(_OWORD *))a2[2];
  v15 = 0;
  *(_QWORD *)&v16[0] = v10;
  v17 = v9;
  v18 = v11;
  v12 = *((_QWORD *)result + 1);
  if (v12 < *((_QWORD *)result + 2))
  {
    if (v12)
    {
      *(_QWORD *)v12 = 0;
      v13 = v16[0];
      *(_OWORD *)(v12 + 24) = v16[1];
      *(_OWORD *)(v12 + 8) = v13;
      *(_QWORD *)(v12 + 40) = v9;
      *(_QWORD *)(v12 + 48) = v11;
      *((_QWORD *)result + 1) = v12 + 56;
      return result;
    }
    __break(1u);
LABEL_9:
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/callback_list.h", 46, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v15);
  }
  result = std::vector<webrtc::callback_list_impl::CallbackListReceivers::Callback>::__push_back_slow_path<webrtc::callback_list_impl::CallbackListReceivers::Callback>((void **)result, (uint64_t)&v15);
  v14 = v18;
  *((_QWORD *)v8 + 1) = result;
  if (v14)
    return (char *)v14(v16);
  return result;
}

uint64_t webrtc::callback_list_impl::CallbackListReceivers::CallbackListReceivers(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_BYTE *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers(webrtc::callback_list_impl::CallbackListReceivers *this, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  unint64_t v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  char *v35;
  void (*v36)(char *);
  char *v37;
  void (*v38)(char *, const void *);
  char *v39;
  uint64_t v40;

  v3 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3;
  v4 = 0x6DB6DB6DB6DB6DB7 * v3;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v5 = 0;
    v6 = (char *)this + 24;
    while (1)
    {
      v7 = *(_QWORD *)this;
      v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
      if (v8 <= v5)
LABEL_47:
        __break(1u);
      v9 = (const void **)(v7 + 56 * v5);
      if (*v9 == a2)
      {
        v10 = v4 - 1;
        if (v8 <= v4 - 1)
          goto LABEL_47;
        v11 = (const void **)(v7 + 56 * v10);
        if (*v11 == a2)
        {
          if (*v6)
            *v11 = v6;
          goto LABEL_13;
        }
        if (!*v6)
        {
          v12 = v7 + 56 * v5;
          v13 = *(_OWORD *)(v12 + 24);
          v14 = *(_OWORD *)(v12 + 8);
          *v9 = *v11;
          v15 = v7 + 56 * v10;
          v16 = *(_OWORD *)(v12 + 40);
          *(_QWORD *)(v12 + 48) = 0;
          v17 = *(_OWORD *)(v15 + 24);
          *(_OWORD *)(v12 + 8) = *(_OWORD *)(v15 + 8);
          *(_OWORD *)(v12 + 24) = v17;
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v15 + 40);
          *v11 = a2;
          *(_OWORD *)(v15 + 8) = v14;
          *(_OWORD *)(v15 + 24) = v13;
          *(_OWORD *)(v15 + 40) = v16;
          ++v5;
LABEL_13:
          v4 = v10;
        }
      }
      else
      {
        ++v5;
      }
      if (v5 == v4)
        goto LABEL_15;
    }
  }
  v5 = 0x6DB6DB6DB6DB6DB7 * v3;
LABEL_15:
  if (!*((_BYTE *)this + 24))
  {
    v19 = *(char **)this;
    v18 = (char *)*((_QWORD *)this + 1);
    v20 = (uint64_t)&v18[-*(_QWORD *)this];
    v21 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 3);
    v22 = v5 - v21;
    if (v5 <= v21)
    {
      if (v5 < v21)
      {
        v37 = &v19[56 * v5];
        while (v18 != v37)
        {
          v38 = (void (*)(char *, const void *))*((_QWORD *)v18 - 1);
          if (v38)
            v38(v18 - 48, a2);
          v18 -= 56;
        }
        *((_QWORD *)this + 1) = v37;
      }
    }
    else
    {
      v23 = *((_QWORD *)this + 2);
      if (0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v18) >> 3) >= v22)
      {
        v39 = &v18[56 * v22];
        v40 = 56 * v5 - 8 * (v20 >> 3);
        do
        {
          if (!v18)
            goto LABEL_47;
          *((_QWORD *)v18 + 6) = 0;
          *((_OWORD *)v18 + 1) = 0uLL;
          *((_OWORD *)v18 + 2) = 0uLL;
          *(_OWORD *)v18 = 0uLL;
          v18 += 56;
          v40 -= 56;
        }
        while (v40);
        *((_QWORD *)this + 1) = v39;
      }
      else
      {
        if (v5 > 0x492492492492492)
          abort();
        v24 = 0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v19) >> 3);
        v25 = 2 * v24;
        if (2 * v24 <= v5)
          v25 = v5;
        if (v24 >= 0x249249249249249)
          v26 = 0x492492492492492;
        else
          v26 = v25;
        if (v26 > 0x492492492492492)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v27 = 56 * v26;
        v28 = (char *)operator new(56 * v26);
        v29 = &v28[8 * (v20 >> 3)];
        v30 = &v28[v27];
        v31 = 56 * v5;
        bzero(v29, 56 * ((v31 - v20 - 56) / 0x38uLL) + 56);
        v32 = &v28[v31];
        if (v18 == v19)
        {
          *(_QWORD *)this = v29;
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v30;
        }
        else
        {
          do
          {
            v33 = *((_QWORD *)v18 - 7);
            v18 -= 56;
            *((_QWORD *)v29 - 7) = v33;
            v29 -= 56;
            v34 = *(_OWORD *)(v18 + 8);
            *(_OWORD *)(v29 + 24) = *(_OWORD *)(v18 + 24);
            *(_OWORD *)(v29 + 8) = v34;
            *(_OWORD *)(v29 + 40) = *(_OWORD *)(v18 + 40);
            *((_QWORD *)v18 + 6) = 0;
          }
          while (v18 != v19);
          v18 = *(char **)this;
          v35 = (char *)*((_QWORD *)this + 1);
          *(_QWORD *)this = v29;
          *((_QWORD *)this + 1) = v32;
          *((_QWORD *)this + 2) = v30;
          while (v35 != v18)
          {
            v36 = (void (*)(char *))*((_QWORD *)v35 - 1);
            if (v36)
              v36(v35 - 48);
            v35 -= 56;
          }
        }
        if (v18)
          operator delete(v18);
      }
    }
  }
}

void webrtc::callback_list_impl::CallbackListReceivers::Foreach(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, size_t a10, int a11, int a12, char *a13, size_t a14, __int16 a15, __int16 a16)
{
  _BYTE *v16;
  _QWORD *v18;
  _QWORD *v19;
  char v22;
  _BYTE *v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v16 = (_BYTE *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v24 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v32);
    cricket::Candidate::Candidate((cricket::Candidate *)v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 1;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 == v19)
    {
      *v16 = 0;
    }
    else
    {
      v22 = 0;
      do
      {
        a3(a2, v18 + 1);
        v23 = (_BYTE *)*v18;
        v18 += 7;
        v22 |= v23 == v16;
      }
      while (v18 != v19);
      *v16 = 0;
      if ((v22 & 1) != 0)
        webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)a1, v16);
    }
  }
}

std::string *cricket::Candidate::Candidate(cricket::Candidate *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, size_t a10, int a11, int a12, char *a13, size_t a14, __int16 a15, __int16 a16)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v22;
  int v23;
  char *v24;
  size_t v25;
  __int128 *v26;
  int v27;
  char *v28;
  size_t v29;
  uint64_t v30;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  {
    *((_DWORD *)this + 6) = 1;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = &unk_24C0ACDA0;
    *((_BYTE *)this + 144) = 0;
    *((_WORD *)this + 68) = 0;
    *((_DWORD *)this + 35) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    *((_DWORD *)this + 38) = 0;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_DWORD *)this + 52) = 0;
    *((_DWORD *)this + 62) = 0;
    *(_OWORD *)((char *)this + 232) = 0u;
    *(_OWORD *)((char *)this + 216) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_BYTE *)this + 344) = 0;
    *((_WORD *)this + 168) = 0;
    *((_DWORD *)this + 85) = 0;
    *((_DWORD *)this + 82) = 0;
    *((_QWORD *)this + 38) = &unk_24C0ACDA0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 52) = 0;
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 100) = 0;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 22) = 0u;
    return (std::string *)this;
  }
  else
  {
    v22 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v17, v18, v19, v20, v30);
    return cricket::Candidate::Candidate((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

std::string *cricket::Candidate::Candidate(uint64_t a1, int a2, char *a3, size_t a4, __int128 *a5, int a6, char *a7, size_t a8, char *__src, size_t __len, int a11, int a12, char *a13, size_t a14, __int16 a15, __int16 a16)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  size_t v40;
  size_t v41;
  char *v42;
  char *v43;
  size_t v44;
  size_t v45;
  std::string *v47;
  std::string *v48;
  uint64_t v49;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  {
    v47 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v24, v25, v26, v27, v49);
    return cricket::Candidate::Candidate(v47, v48);
  }
  *(_DWORD *)(a1 + 24) = a2;
  if (a4 > 0x7FFFFFFFFFFFFFF7)
LABEL_48:
    abort();
  if (a4 > 0x16)
  {
    v30 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v30 = a4 | 7;
    v31 = v30 + 1;
    v28 = (char *)operator new(v30 + 1);
    *(_QWORD *)(a1 + 40) = a4;
    *(_QWORD *)(a1 + 48) = v31 | 0x8000000000000000;
    *(_QWORD *)(a1 + 32) = v28;
    v29 = &v28[a4];
    if (v28 > a3)
      goto LABEL_10;
  }
  else
  {
    v28 = (char *)(a1 + 32);
    *(_BYTE *)(a1 + 55) = a4;
    v29 = (char *)(a1 + 32 + a4);
    if (a1 + 32 > (unint64_t)a3)
      goto LABEL_10;
  }
  if (v29 > a3)
    goto LABEL_47;
LABEL_10:
  if (a4)
    memmove(v28, a3, a4);
  *v29 = 0;
  v32 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = &unk_24C0ACDA0;
  *(_DWORD *)(a1 + 128) = 0;
  if ((__int128 *)(a1 + 80) != a5)
  {
    if (*((char *)a5 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(v32, *(char **)a5, *((_QWORD *)a5 + 1));
    }
    else
    {
      v33 = *a5;
      *(_QWORD *)(a1 + 96) = *((_QWORD *)a5 + 2);
      *(_OWORD *)v32 = v33;
    }
  }
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a5 + 8);
  *(_OWORD *)(a1 + 116) = *(__int128 *)((char *)a5 + 36);
  *(_WORD *)(a1 + 136) = *((_WORD *)a5 + 28);
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a5 + 64);
  *(_DWORD *)(a1 + 140) = *((_DWORD *)a5 + 15);
  *(_DWORD *)(a1 + 152) = a6;
  if (a8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_48;
  if (a8 > 0x16)
  {
    v36 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a8 | 7) != 0x17)
      v36 = a8 | 7;
    v37 = v36 + 1;
    v34 = (char *)operator new(v36 + 1);
    *(_QWORD *)(a1 + 168) = a8;
    *(_QWORD *)(a1 + 176) = v37 | 0x8000000000000000;
    *(_QWORD *)(a1 + 160) = v34;
    v35 = &v34[a8];
    if (v34 > a7)
      goto LABEL_24;
  }
  else
  {
    v34 = (char *)(a1 + 160);
    *(_BYTE *)(a1 + 183) = a8;
    v35 = (char *)(a1 + 160 + a8);
    if (a1 + 160 > (unint64_t)a7)
      goto LABEL_24;
  }
  if (v35 > a7)
    goto LABEL_47;
LABEL_24:
  if (a8)
    memmove(v34, a7, a8);
  *v35 = 0;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_48;
  if (__len <= 0x16)
  {
    v38 = (char *)(a1 + 184);
    *(_BYTE *)(a1 + 207) = __len;
    v39 = (char *)(a1 + 184 + __len);
    if (a1 + 184 > (unint64_t)__src)
      goto LABEL_34;
    goto LABEL_33;
  }
  v40 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((__len | 7) != 0x17)
    v40 = __len | 7;
  v41 = v40 + 1;
  v38 = (char *)operator new(v40 + 1);
  *(_QWORD *)(a1 + 192) = __len;
  *(_QWORD *)(a1 + 200) = v41 | 0x8000000000000000;
  *(_QWORD *)(a1 + 184) = v38;
  v39 = &v38[__len];
  if (v38 <= __src)
  {
LABEL_33:
    if (v39 <= __src)
      goto LABEL_34;
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
LABEL_34:
  if (__len)
    memmove(v38, __src, __len);
  *v39 = 0;
  *(_DWORD *)(a1 + 208) = a11;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = a12;
  if (a14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_48;
  if (a14 > 0x16)
  {
    v44 = (a14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a14 | 7) != 0x17)
      v44 = a14 | 7;
    v45 = v44 + 1;
    v42 = (char *)operator new(v44 + 1);
    *(_QWORD *)(a1 + 264) = a14;
    *(_QWORD *)(a1 + 272) = v45 | 0x8000000000000000;
    *(_QWORD *)(a1 + 256) = v42;
    v43 = &v42[a14];
    if (v42 > a13)
      goto LABEL_44;
  }
  else
  {
    v42 = (char *)(a1 + 256);
    *(_BYTE *)(a1 + 279) = a14;
    v43 = (char *)(a1 + 256 + a14);
    if (a1 + 256 > (unint64_t)a13)
      goto LABEL_44;
  }
  if (v43 > a13)
    goto LABEL_47;
LABEL_44:
  if (a14)
    memmove(v42, a13, a14);
  *v43 = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = &unk_24C0ACDA0;
  *(_BYTE *)(a1 + 344) = 0;
  *(_WORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_WORD *)(a1 + 400) = a15;
  *(_WORD *)(a1 + 402) = a16;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  return (std::string *)a1;
}

std::string *cricket::Candidate::Candidate(std::string *this, std::string *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string::size_type *p_size;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;

  if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    LODWORD(this[1].__r_.__value_.__l.__data_) = a2[1].__r_.__value_.__l.__data_;
    v5 = (std::string *)((char *)this + 32);
    if ((a2[2].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    std::string::__init_copy_ctor_external(v5, (const std::string::value_type *)a2[1].__r_.__value_.__l.__size_, a2[1].__r_.__value_.__r.__words[2]);
    v7 = (std::string *)((char *)this + 56);
    if ((a2[3].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  LODWORD(this[1].__r_.__value_.__l.__data_) = a2[1].__r_.__value_.__l.__data_;
  v5 = (std::string *)((char *)this + 32);
  if (a2[2].__r_.__value_.__s.__data_[7] < 0)
    goto LABEL_6;
LABEL_3:
  v6 = *(_OWORD *)&a2[1].__r_.__value_.__r.__words[1];
  v5->__r_.__value_.__r.__words[2] = a2[2].__r_.__value_.__r.__words[0];
  *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  v7 = (std::string *)((char *)this + 56);
  if ((a2[3].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
LABEL_4:
    v8 = *(_OWORD *)&a2[2].__r_.__value_.__r.__words[1];
    v7->__r_.__value_.__r.__words[2] = a2[3].__r_.__value_.__r.__words[0];
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    goto LABEL_8;
  }
LABEL_7:
  std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)a2[2].__r_.__value_.__l.__size_, a2[2].__r_.__value_.__r.__words[2]);
LABEL_8:
  this[3].__r_.__value_.__l.__size_ = 0;
  p_size = &this[3].__r_.__value_.__l.__size_;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_24C0ACDA0;
  LODWORD(this[5].__r_.__value_.__r.__words[1]) = 0;
  if (this != a2)
  {
    if (a2[4].__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::__assign_no_alias<true>(p_size, (char *)a2[3].__r_.__value_.__l.__size_, a2[3].__r_.__value_.__r.__words[2]);
    }
    else
    {
      v10 = *(_OWORD *)&a2[3].__r_.__value_.__r.__words[1];
      this[4].__r_.__value_.__r.__words[0] = a2[4].__r_.__value_.__r.__words[0];
      *(_OWORD *)p_size = v10;
    }
  }
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = a2[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)((char *)&this[4].__r_.__value_.__r.__words[2] + 4) = *(_OWORD *)((char *)&a2[4].__r_.__value_.__r.__words[2]
                                                                             + 4);
  LOWORD(this[5].__r_.__value_.__r.__words[2]) = a2[5].__r_.__value_.__r.__words[2];
  this[6].__r_.__value_.__s.__data_[0] = a2[6].__r_.__value_.__s.__data_[0];
  HIDWORD(this[5].__r_.__value_.__r.__words[2]) = HIDWORD(a2[5].__r_.__value_.__r.__words[2]);
  LODWORD(this[6].__r_.__value_.__r.__words[1]) = a2[6].__r_.__value_.__r.__words[1];
  v11 = (std::string *)((char *)this + 160);
  if ((a2[7].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    v12 = *(_OWORD *)&a2[6].__r_.__value_.__r.__words[2];
    this[7].__r_.__value_.__l.__size_ = a2[7].__r_.__value_.__l.__size_;
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
    v13 = (std::string *)((char *)this + 184);
    if ((a2[8].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    std::string::__init_copy_ctor_external(v13, (const std::string::value_type *)a2[7].__r_.__value_.__r.__words[2], a2[8].__r_.__value_.__r.__words[0]);
    LODWORD(this[8].__r_.__value_.__r.__words[2]) = a2[8].__r_.__value_.__r.__words[2];
    v15 = this + 9;
    if ((SHIBYTE(a2[9].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_18;
  }
  std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)a2[6].__r_.__value_.__r.__words[2], a2[7].__r_.__value_.__r.__words[0]);
  v13 = (std::string *)((char *)this + 184);
  if (a2[8].__r_.__value_.__s.__data_[15] < 0)
    goto LABEL_17;
LABEL_14:
  v14 = *(_OWORD *)&a2[7].__r_.__value_.__r.__words[2];
  v13->__r_.__value_.__r.__words[2] = a2[8].__r_.__value_.__l.__size_;
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = a2[8].__r_.__value_.__r.__words[2];
  v15 = this + 9;
  if ((SHIBYTE(a2[9].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    v16 = *(_OWORD *)&a2[9].__r_.__value_.__l.__data_;
    v15->__r_.__value_.__r.__words[2] = a2[9].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    goto LABEL_19;
  }
LABEL_18:
  std::string::__init_copy_ctor_external(v15, a2[9].__r_.__value_.__l.__data_, a2[9].__r_.__value_.__l.__size_);
LABEL_19:
  v17 = a2[10].__r_.__value_.__r.__words[0];
  LODWORD(this[10].__r_.__value_.__r.__words[1]) = a2[10].__r_.__value_.__r.__words[1];
  this[10].__r_.__value_.__r.__words[0] = v17;
  v18 = (std::string *)((char *)this + 256);
  if (a2[11].__r_.__value_.__s.__data_[15] < 0)
  {
    std::string::__init_copy_ctor_external(v18, (const std::string::value_type *)a2[10].__r_.__value_.__r.__words[2], a2[11].__r_.__value_.__r.__words[0]);
  }
  else
  {
    v19 = *(_OWORD *)&a2[10].__r_.__value_.__r.__words[2];
    this[11].__r_.__value_.__l.__size_ = a2[11].__r_.__value_.__l.__size_;
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[12].__r_.__value_.__r.__words[0] = 0;
  this[12].__r_.__value_.__l.__size_ = 0;
  this[12].__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_24C0ACDA0;
  this[13].__r_.__value_.__r.__words[0] = 0;
  this[13].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[13].__r_.__value_.__r.__words[2]) = 0;
  if (this != a2)
  {
    v20 = &this[11].__r_.__value_.__r.__words[2];
    if (a2[12].__r_.__value_.__s.__data_[15] < 0)
    {
      std::string::__assign_no_alias<true>(v20, (char *)a2[11].__r_.__value_.__r.__words[2], a2[12].__r_.__value_.__r.__words[0]);
    }
    else
    {
      v21 = *(_OWORD *)&a2[11].__r_.__value_.__r.__words[2];
      this[12].__r_.__value_.__l.__size_ = a2[12].__r_.__value_.__l.__size_;
      *(_OWORD *)v20 = v21;
    }
  }
  LODWORD(this[13].__r_.__value_.__l.__data_) = a2[13].__r_.__value_.__l.__data_;
  *(_OWORD *)((char *)this[13].__r_.__value_.__r.__words + 4) = *(_OWORD *)((char *)a2[13].__r_.__value_.__r.__words + 4);
  LOWORD(this[14].__r_.__value_.__l.__data_) = a2[14].__r_.__value_.__l.__data_;
  this[14].__r_.__value_.__s.__data_[8] = a2[14].__r_.__value_.__s.__data_[8];
  HIDWORD(this[14].__r_.__value_.__r.__words[0]) = HIDWORD(a2[14].__r_.__value_.__r.__words[0]);
  v22 = (std::string *)((char *)this + 352);
  if ((a2[15].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
    v23 = *(_OWORD *)&a2[14].__r_.__value_.__r.__words[2];
    this[15].__r_.__value_.__l.__size_ = a2[15].__r_.__value_.__l.__size_;
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
    v24 = (std::string *)((char *)this + 376);
    if ((a2[16].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      goto LABEL_28;
LABEL_31:
    std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)a2[15].__r_.__value_.__r.__words[2], a2[16].__r_.__value_.__r.__words[0]);
    LODWORD(this[16].__r_.__value_.__r.__words[2]) = a2[16].__r_.__value_.__r.__words[2];
    v26 = this + 17;
    if ((SHIBYTE(a2[17].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_32;
  }
  std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)a2[14].__r_.__value_.__r.__words[2], a2[15].__r_.__value_.__r.__words[0]);
  v24 = (std::string *)((char *)this + 376);
  if (a2[16].__r_.__value_.__s.__data_[15] < 0)
    goto LABEL_31;
LABEL_28:
  v25 = *(_OWORD *)&a2[15].__r_.__value_.__r.__words[2];
  v24->__r_.__value_.__r.__words[2] = a2[16].__r_.__value_.__l.__size_;
  *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  LODWORD(this[16].__r_.__value_.__r.__words[2]) = a2[16].__r_.__value_.__r.__words[2];
  v26 = this + 17;
  if ((SHIBYTE(a2[17].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_29:
    v27 = *(_OWORD *)&a2[17].__r_.__value_.__l.__data_;
    v26->__r_.__value_.__r.__words[2] = a2[17].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
    return this;
  }
LABEL_32:
  std::string::__init_copy_ctor_external(v26, a2[17].__r_.__value_.__l.__data_, a2[17].__r_.__value_.__l.__size_);
  return this;
}

void cricket::Candidate::~Candidate(void **this)
{
  if (*((char *)this + 431) < 0)
  {
    operator delete(this[51]);
    if ((*((char *)this + 399) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 375) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 399) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[47]);
  if ((*((char *)this + 375) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 303) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[44]);
  if ((*((char *)this + 303) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*((char *)this + 279) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(this[35]);
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*((char *)this + 239) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(this[32]);
  if ((*((char *)this + 239) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*((char *)this + 207) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  operator delete(this[27]);
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*((char *)this + 183) & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(this[23]);
  if ((*((char *)this + 183) & 0x80000000) == 0)
  {
LABEL_9:
    if ((*((char *)this + 103) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(this[20]);
  if ((*((char *)this + 103) & 0x80000000) == 0)
  {
LABEL_10:
    if ((*((char *)this + 79) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(this[10]);
  if ((*((char *)this + 79) & 0x80000000) == 0)
  {
LABEL_11:
    if ((*((char *)this + 55) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(this[7]);
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(*this);
    return;
  }
LABEL_24:
  operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    goto LABEL_25;
}

BOOL cricket::Candidate::IsEquivalent(cricket::Candidate *this, const cricket::Candidate *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  const cricket::Candidate *v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;

  if (*((_DWORD *)this + 6) != *((_DWORD *)a2 + 6))
    return 0;
  v4 = *((unsigned __int8 *)this + 55);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)this + 55);
  else
    v5 = *((_QWORD *)this + 5);
  v6 = *((unsigned __int8 *)a2 + 55);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 5);
  if (v5 != v6)
    return 0;
  v8 = (const void **)((char *)this + 32);
  v9 = v7 >= 0 ? (const cricket::Candidate *)((char *)a2 + 32) : (const cricket::Candidate *)*((_QWORD *)a2 + 4);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((_QWORD *)this + 5)))
      return 0;
  }
  else if (*((_BYTE *)this + 55))
  {
    while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      v9 = (const cricket::Candidate *)((char *)v9 + 1);
      if (!--v4)
        goto LABEL_19;
    }
    return 0;
  }
LABEL_19:
  result = rtc::SocketAddress::EqualIPs((cricket::Candidate *)((char *)this + 80), (const cricket::Candidate *)((char *)a2 + 80));
  if (!(_DWORD)result)
    return result;
  if (*((unsigned __int16 *)this + 68) != *((unsigned __int16 *)a2 + 68))
    return 0;
  v11 = *((unsigned __int8 *)this + 183);
  if ((v11 & 0x80u) == 0)
    v12 = *((unsigned __int8 *)this + 183);
  else
    v12 = *((_QWORD *)this + 21);
  v13 = *((unsigned __int8 *)a2 + 183);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)a2 + 21);
  if (v12 != v13)
    return 0;
  v15 = (const void **)((char *)this + 160);
  if (v14 >= 0)
    v16 = (unsigned __int8 *)a2 + 160;
  else
    v16 = (unsigned __int8 *)*((_QWORD *)a2 + 20);
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*v15, v16, *((_QWORD *)this + 21)))
      return 0;
  }
  else if (*((_BYTE *)this + 183))
  {
    while (*(unsigned __int8 *)v15 == *v16)
    {
      v15 = (const void **)((char *)v15 + 1);
      ++v16;
      if (!--v11)
        goto LABEL_36;
    }
    return 0;
  }
LABEL_36:
  v17 = *((unsigned __int8 *)this + 207);
  if ((v17 & 0x80u) == 0)
    v18 = *((unsigned __int8 *)this + 207);
  else
    v18 = *((_QWORD *)this + 24);
  v19 = *((unsigned __int8 *)a2 + 207);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)a2 + 24);
  if (v18 != v19)
    return 0;
  v21 = (const void **)((char *)this + 184);
  if (v20 >= 0)
    v22 = (unsigned __int8 *)a2 + 184;
  else
    v22 = (unsigned __int8 *)*((_QWORD *)a2 + 23);
  if ((v17 & 0x80) != 0)
  {
    if (!memcmp(*v21, v22, *((_QWORD *)this + 24)))
      goto LABEL_51;
    return 0;
  }
  if (*((_BYTE *)this + 207))
  {
    while (*(unsigned __int8 *)v21 == *v22)
    {
      v21 = (const void **)((char *)v21 + 1);
      ++v22;
      if (!--v17)
        goto LABEL_51;
    }
    return 0;
  }
LABEL_51:
  if (*((_DWORD *)this + 52) != *((_DWORD *)a2 + 52) || *((_DWORD *)this + 62) != *((_DWORD *)a2 + 62))
    return 0;
  result = std::operator==[abi:sn180100]<std::allocator<char>>((unsigned __int8 *)this + 256, (unsigned __int8 *)a2 + 256);
  if ((_DWORD)result)
  {
    result = rtc::SocketAddress::EqualIPs((cricket::Candidate *)((char *)this + 280), (const cricket::Candidate *)((char *)a2 + 280));
    if ((_DWORD)result)
    {
      if (*((unsigned __int16 *)this + 168) == *((unsigned __int16 *)a2 + 168))
        return *((unsigned __int16 *)this + 200) == *((unsigned __int16 *)a2 + 200);
      return 0;
    }
  }
  return result;
}

void cricket::Candidate::ToStringInternal(cricket::Candidate *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  rtc::SocketAddress *v5;
  std::string::size_type v6;
  std::string::size_type size;
  char *v8;
  int v9;
  size_t v10;
  BOOL v11;
  std::string *v12;
  char *v13;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string *v18;
  char *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  char *v23;
  int v24;
  size_t v25;
  BOOL v26;
  std::string *v27;
  _BYTE *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string *v32;
  char *v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string *v37;
  _BYTE *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string *v41;
  std::string::size_type v42;
  int v43;
  std::string::size_type v44;
  char *v45;
  int v46;
  size_t v47;
  BOOL v48;
  std::string *v49;
  _BYTE *v50;
  std::string::size_type v51;
  int v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  char *v56;
  std::string::size_type v57;
  std::string::size_type v58;
  int v59;
  std::string::size_type v60;
  std::string *v61;
  _BYTE *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  std::string::size_type v66;
  int v67;
  std::string::size_type v68;
  unsigned __int8 v69;
  size_t v70;
  BOOL v71;
  char *p_p_new_stuff;
  std::string *v73;
  _BYTE *v74;
  std::string::size_type v75;
  int v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string *v79;
  char *v80;
  std::string::size_type v81;
  std::string::size_type v82;
  int v83;
  std::string::size_type v84;
  unsigned int v85;
  const std::string::value_type *v86;
  std::string::size_type v87;
  int v88;
  std::string::size_type v89;
  std::string::size_type v90;
  std::string *v91;
  std::string::value_type *v92;
  std::string *v93;
  _BYTE *v94;
  std::string::size_type v95;
  std::string::size_type v96;
  std::string::size_type v97;
  int v98;
  std::string::size_type v99;
  unsigned __int8 v100;
  size_t v101;
  BOOL v102;
  char *p_src;
  std::string *v104;
  _BYTE *v105;
  std::string::size_type v106;
  int v107;
  std::string::size_type v108;
  std::string::size_type v109;
  std::string *v110;
  char *v111;
  std::string::size_type v112;
  std::string::size_type v113;
  int v114;
  std::string::size_type v115;
  char *v116;
  int v117;
  size_t v118;
  BOOL v119;
  std::string *v120;
  _BYTE *v121;
  std::string::size_type v122;
  int v123;
  std::string::size_type v124;
  std::string::size_type v125;
  std::string *v126;
  char *v127;
  std::string::size_type v128;
  std::string::size_type v129;
  int v130;
  std::string::size_type v131;
  char *v132;
  int v133;
  size_t v134;
  BOOL v135;
  std::string *v136;
  _BYTE *v137;
  std::string::size_type v138;
  int v139;
  std::string::size_type v140;
  std::string::size_type v141;
  std::string *v142;
  char *v143;
  std::string::size_type v144;
  std::string::size_type v145;
  int v146;
  std::string::size_type v147;
  std::string *v148;
  _BYTE *v149;
  std::string::size_type v150;
  std::string *v151;
  std::string *v152;
  std::string::size_type v153;
  int v154;
  std::string::size_type v155;
  std::string *v156;
  _BYTE *v157;
  std::string::size_type v158;
  std::string *v159;
  std::string *v160;
  std::string::size_type v161;
  int v162;
  std::string::size_type v163;
  std::string *v164;
  _BYTE *v165;
  std::string::size_type v166;
  std::string *v167;
  std::string::size_type v168;
  int v169;
  std::string::size_type v170;
  std::string *v171;
  _BYTE *v172;
  std::string::size_type v173;
  std::string::value_type *__src;
  size_t v175;
  unsigned __int8 v176;
  std::string::value_type *__p_new_stuff;
  size_t v178;
  unsigned __int8 v179;
  std::string v180;

  memset(&v180, 0, sizeof(v180));
  v5 = (cricket::Candidate *)((char *)this + 80);
  if (a2)
  {
    rtc::SocketAddress::ToSensitiveString(v5, (char *)&__p_new_stuff);
    rtc::SocketAddress::ToSensitiveString((cricket::Candidate *)((char *)this + 280), (char *)&__src);
  }
  else
  {
    rtc::SocketAddress::ToString(v5, (char *)&__p_new_stuff);
    rtc::SocketAddress::ToString((cricket::Candidate *)((char *)this + 280), (char *)&__src);
  }
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = 22;
  else
    v6 = (v180.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v180.__r_.__value_.__r.__words[2]);
  else
    size = v180.__r_.__value_.__l.__size_;
  if (v6 - size >= 5)
  {
    v12 = &v180;
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v180.__r_.__value_.__r.__words[0];
    v13 = (char *)v12 + size;
    if ((char *)v12 + size <= "Cand[" && (char *)v12->__r_.__value_.__r.__words + size + 5 > "Cand[")
      goto LABEL_402;
    v13[4] = 91;
    *(_DWORD *)v13 = 1684955459;
    v15 = size + 5;
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    {
      v180.__r_.__value_.__l.__size_ = size + 5;
      v12->__r_.__value_.__s.__data_[v15] = 0;
      v8 = (char *)this + 376;
      v9 = *((char *)this + 399);
      if ((v9 & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      *((_BYTE *)&v180.__r_.__value_.__s + 23) = v15 & 0x7F;
      v12->__r_.__value_.__s.__data_[v15] = 0;
      v8 = (char *)this + 376;
      v9 = *((char *)this + 399);
      if ((v9 & 0x80000000) == 0)
        goto LABEL_12;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v180, v6, size - v6 + 5, size, size, 0, 5uLL, "Cand[");
    v8 = (char *)this + 376;
    v9 = *((char *)this + 399);
    if ((v9 & 0x80000000) == 0)
    {
LABEL_12:
      v10 = v9;
      v11 = v9 == 0;
      goto LABEL_24;
    }
  }
  v10 = *((_QWORD *)this + 48);
  if ((v10 & 0x8000000000000000) != 0)
    goto LABEL_402;
  v8 = *(char **)v8;
  v11 = v10 == 0;
  if (v10)
  {
    if (!v8)
      goto LABEL_402;
  }
LABEL_24:
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = 22;
  else
    v16 = (v180.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
  else
    v17 = v180.__r_.__value_.__l.__size_;
  if (v16 - v17 >= v10)
  {
    if (!v11)
    {
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = &v180;
      else
        v18 = (std::string *)v180.__r_.__value_.__r.__words[0];
      v19 = (char *)v18 + v17;
      if ((char *)v18 + v17 <= v8 && &v19[v10] > v8)
        goto LABEL_402;
      memmove(v19, v8, v10);
      v20 = v17 + v10;
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        v180.__r_.__value_.__l.__size_ = v17 + v10;
      else
        *((_BYTE *)&v180.__r_.__value_.__s + 23) = v20 & 0x7F;
      v18->__r_.__value_.__s.__data_[v20] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v180, v16, v17 + v10 - v16, v17, v17, 0, v10, v8);
  }
  v21 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = 22;
  else
    v22 = (v180.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v21 = v180.__r_.__value_.__l.__size_;
  if (v22 == v21)
  {
    std::string::__grow_by_and_replace(&v180, v22, 1uLL, v22, v22, 0, 1uLL, ":");
    v23 = (char *)this + 256;
    v24 = *((char *)this + 279);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_51:
      v25 = v24;
      v26 = v24 == 0;
      goto LABEL_61;
    }
  }
  else
  {
    v27 = &v180;
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v180.__r_.__value_.__r.__words[0];
    v28 = (char *)v27 + v21;
    if ((char *)v27 + v21 <= ":" && v28 + 1 > ":")
      goto LABEL_402;
    *v28 = 58;
    v29 = v21 + 1;
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    {
      v180.__r_.__value_.__l.__size_ = v29;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      v23 = (char *)this + 256;
      v24 = *((char *)this + 279);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_51;
    }
    else
    {
      *((_BYTE *)&v180.__r_.__value_.__s + 23) = v29 & 0x7F;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      v23 = (char *)this + 256;
      v24 = *((char *)this + 279);
      if ((v24 & 0x80000000) == 0)
        goto LABEL_51;
    }
  }
  v25 = *((_QWORD *)this + 33);
  if ((v25 & 0x8000000000000000) != 0)
    goto LABEL_402;
  v23 = *(char **)v23;
  v26 = v25 == 0;
  if (v25)
  {
    if (!v23)
      goto LABEL_402;
  }
LABEL_61:
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = 22;
  else
    v30 = (v180.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
  else
    v31 = v180.__r_.__value_.__l.__size_;
  if (v30 - v31 >= v25)
  {
    if (!v26)
    {
      if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v180;
      else
        v32 = (std::string *)v180.__r_.__value_.__r.__words[0];
      v33 = (char *)v32 + v31;
      if ((char *)v32 + v31 <= v23 && &v33[v25] > v23)
        goto LABEL_402;
      memmove(v33, v23, v25);
      v34 = v31 + v25;
      if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
        v180.__r_.__value_.__l.__size_ = v31 + v25;
      else
        *((_BYTE *)&v180.__r_.__value_.__s + 23) = v34 & 0x7F;
      v32->__r_.__value_.__s.__data_[v34] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v180, v30, v31 + v25 - v30, v31, v31, 0, v25, v23);
  }
  v35 = HIBYTE(v180.__r_.__value_.__r.__words[2]);
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = 22;
  else
    v36 = (v180.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v35 = v180.__r_.__value_.__l.__size_;
  if (v36 == v35)
  {
    std::string::__grow_by_and_replace(&v180, v36, 1uLL, v36, v36, 0, 1uLL, ":");
  }
  else
  {
    v37 = &v180;
    if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v37 = (std::string *)v180.__r_.__value_.__r.__words[0];
    v38 = (char *)v37 + v35;
    if ((char *)v37 + v35 <= ":" && v38 + 1 > ":")
      goto LABEL_402;
    *v38 = 58;
    v39 = v35 + 1;
    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
      v180.__r_.__value_.__l.__size_ = v39;
    else
      *((_BYTE *)&v180.__r_.__value_.__s + 23) = v39 & 0x7F;
    v37->__r_.__value_.__s.__data_[v39] = 0;
  }
  v40 = rtc::StringBuilder::operator<<(&v180, *((_DWORD *)this + 6));
  v41 = v40;
  v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v43 = (char)v42;
  if ((v42 & 0x80u) == 0)
    v44 = 22;
  else
    v44 = (v40->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v42 & 0x80u) != 0)
    v42 = v40->__r_.__value_.__l.__size_;
  if (v44 == v42)
  {
    std::string::__grow_by_and_replace(v40, v44, 1uLL, v44, v44, 0, 1uLL, ":");
    v45 = (char *)this + 32;
    v46 = *((char *)this + 55);
    if ((v46 & 0x80000000) == 0)
    {
LABEL_103:
      v47 = v46;
      v48 = v46 == 0;
      goto LABEL_114;
    }
  }
  else
  {
    if (v43 >= 0)
      v49 = v40;
    else
      v49 = (std::string *)v40->__r_.__value_.__r.__words[0];
    v50 = (char *)v49 + v42;
    if ((char *)v49 + v42 <= ":" && v50 + 1 > ":")
      goto LABEL_402;
    *v50 = 58;
    v51 = v42 + 1;
    if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
    {
      v40->__r_.__value_.__l.__size_ = v51;
      v49->__r_.__value_.__s.__data_[v51] = 0;
      v45 = (char *)this + 32;
      v46 = *((char *)this + 55);
      if ((v46 & 0x80000000) == 0)
        goto LABEL_103;
    }
    else
    {
      *((_BYTE *)&v40->__r_.__value_.__s + 23) = v51 & 0x7F;
      v49->__r_.__value_.__s.__data_[v51] = 0;
      v45 = (char *)this + 32;
      v46 = *((char *)this + 55);
      if ((v46 & 0x80000000) == 0)
        goto LABEL_103;
    }
  }
  v47 = *((_QWORD *)this + 5);
  if ((v47 & 0x8000000000000000) != 0)
    goto LABEL_402;
  v45 = *(char **)v45;
  v48 = v47 == 0;
  if (v47)
  {
    if (!v45)
      goto LABEL_402;
  }
LABEL_114:
  v52 = SHIBYTE(v41->__r_.__value_.__r.__words[2]);
  if (v52 >= 0)
    v53 = 22;
  else
    v53 = (v41->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v52 >= 0)
    v54 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
  else
    v54 = v41->__r_.__value_.__l.__size_;
  if (v53 - v54 >= v47)
  {
    if (!v48)
    {
      if (v52 >= 0)
        v55 = v41;
      else
        v55 = (std::string *)v41->__r_.__value_.__r.__words[0];
      v56 = (char *)v55 + v54;
      if ((char *)v55 + v54 <= v45 && &v56[v47] > v45)
        goto LABEL_402;
      memmove(v56, v45, v47);
      v57 = v54 + v47;
      if (SHIBYTE(v41->__r_.__value_.__r.__words[2]) < 0)
        v41->__r_.__value_.__l.__size_ = v57;
      else
        *((_BYTE *)&v41->__r_.__value_.__s + 23) = v57 & 0x7F;
      v55->__r_.__value_.__s.__data_[v57] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v41, v53, v54 + v47 - v53, v54, v54, 0, v47, v45);
  }
  v58 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
  v59 = (char)v58;
  if ((v58 & 0x80u) == 0)
    v60 = 22;
  else
    v60 = (v41->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v58 & 0x80u) != 0)
    v58 = v41->__r_.__value_.__l.__size_;
  if (v60 == v58)
  {
    std::string::__grow_by_and_replace(v41, v60, 1uLL, v60, v60, 0, 1uLL, ":");
  }
  else
  {
    if (v59 >= 0)
      v61 = v41;
    else
      v61 = (std::string *)v41->__r_.__value_.__r.__words[0];
    v62 = (char *)v61 + v58;
    if ((char *)v61 + v58 <= ":" && v62 + 1 > ":")
      goto LABEL_402;
    *v62 = 58;
    v63 = v58 + 1;
    if (SHIBYTE(v41->__r_.__value_.__r.__words[2]) < 0)
      v41->__r_.__value_.__l.__size_ = v63;
    else
      *((_BYTE *)&v41->__r_.__value_.__s + 23) = v63 & 0x7F;
    v61->__r_.__value_.__s.__data_[v63] = 0;
  }
  v64 = rtc::StringBuilder::operator<<(v41, *((_DWORD *)this + 38));
  v65 = v64;
  v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
  v67 = (char)v66;
  if ((v66 & 0x80u) == 0)
    v68 = 22;
  else
    v68 = (v64->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v66 & 0x80u) != 0)
    v66 = v64->__r_.__value_.__l.__size_;
  if (v68 == v66)
  {
    std::string::__grow_by_and_replace(v64, v68, 1uLL, v68, v68, 0, 1uLL, ":");
    v69 = v179;
    if (((char)v179 & 0x80000000) == 0)
    {
LABEL_157:
      v70 = v69;
      v71 = v69 == 0;
      p_p_new_stuff = (char *)&__p_new_stuff;
      goto LABEL_168;
    }
  }
  else
  {
    if (v67 >= 0)
      v73 = v64;
    else
      v73 = (std::string *)v64->__r_.__value_.__r.__words[0];
    v74 = (char *)v73 + v66;
    if ((char *)v73 + v66 <= ":" && v74 + 1 > ":")
      goto LABEL_402;
    *v74 = 58;
    v75 = v66 + 1;
    if (SHIBYTE(v64->__r_.__value_.__r.__words[2]) < 0)
    {
      v64->__r_.__value_.__l.__size_ = v75;
      v73->__r_.__value_.__s.__data_[v75] = 0;
      v69 = v179;
      if (((char)v179 & 0x80000000) == 0)
        goto LABEL_157;
    }
    else
    {
      *((_BYTE *)&v64->__r_.__value_.__s + 23) = v75 & 0x7F;
      v73->__r_.__value_.__s.__data_[v75] = 0;
      v69 = v179;
      if (((char)v179 & 0x80000000) == 0)
        goto LABEL_157;
    }
  }
  v70 = v178;
  if ((v178 & 0x8000000000000000) != 0)
    goto LABEL_402;
  p_p_new_stuff = __p_new_stuff;
  v71 = v178 == 0;
  if (v178)
  {
    if (!__p_new_stuff)
      goto LABEL_402;
  }
LABEL_168:
  v76 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
  if (v76 >= 0)
    v77 = 22;
  else
    v77 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v76 >= 0)
    v78 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  else
    v78 = v65->__r_.__value_.__l.__size_;
  if (v77 - v78 >= v70)
  {
    if (!v71)
    {
      if (v76 >= 0)
        v79 = v65;
      else
        v79 = (std::string *)v65->__r_.__value_.__r.__words[0];
      v80 = (char *)v79 + v78;
      if ((char *)v79 + v78 <= p_p_new_stuff && &v80[v70] > p_p_new_stuff)
        goto LABEL_402;
      memmove(v80, p_p_new_stuff, v70);
      v81 = v78 + v70;
      if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
        v65->__r_.__value_.__l.__size_ = v81;
      else
        *((_BYTE *)&v65->__r_.__value_.__s + 23) = v81 & 0x7F;
      v79->__r_.__value_.__s.__data_[v81] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v65, v77, v78 + v70 - v77, v78, v78, 0, v70, p_p_new_stuff);
  }
  v82 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v83 = (char)v82;
  if ((v82 & 0x80u) == 0)
    v84 = 22;
  else
    v84 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v82 & 0x80u) != 0)
    v82 = v65->__r_.__value_.__l.__size_;
  if (v84 != v82)
  {
    if (v83 >= 0)
      v93 = v65;
    else
      v93 = (std::string *)v65->__r_.__value_.__r.__words[0];
    v94 = (char *)v93 + v82;
    if ((char *)v93 + v82 <= ":" && v94 + 1 > ":")
      goto LABEL_402;
    *v94 = 58;
    v95 = v82 + 1;
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
    {
      v65->__r_.__value_.__l.__size_ = v95;
      v93->__r_.__value_.__s.__data_[v95] = 0;
      v85 = *((_DWORD *)this + 52) - 1;
      if (v85 > 2)
        goto LABEL_206;
    }
    else
    {
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v95 & 0x7F;
      v93->__r_.__value_.__s.__data_[v95] = 0;
      v85 = *((_DWORD *)this + 52) - 1;
      if (v85 > 2)
        goto LABEL_206;
    }
LABEL_195:
    v86 = off_24C0B0898[v85];
    v87 = 5;
    v88 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
    if ((v88 & 0x80000000) == 0)
      goto LABEL_196;
    goto LABEL_207;
  }
  std::string::__grow_by_and_replace(v65, v84, 1uLL, v84, v84, 0, 1uLL, ":");
  v85 = *((_DWORD *)this + 52) - 1;
  if (v85 <= 2)
    goto LABEL_195;
LABEL_206:
  v86 = "host";
  v87 = 4;
  v88 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
  if ((v88 & 0x80000000) == 0)
  {
LABEL_196:
    v89 = v88;
    v90 = 22;
    v91 = v65;
    if (22 - (unint64_t)v88 >= v87)
    {
      v92 = (char *)v65 + v88;
      if (v92 > v86)
        goto LABEL_213;
LABEL_212:
      if (&v92[v87] > v86)
        goto LABEL_402;
      goto LABEL_213;
    }
LABEL_208:
    std::string::__grow_by_and_replace(v65, v90, v89 + v87 - v90, v89, v89, 0, v87, v86);
    goto LABEL_217;
  }
LABEL_207:
  v89 = v65->__r_.__value_.__l.__size_;
  v90 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v90 - v89 < v87)
    goto LABEL_208;
  v91 = (std::string *)v65->__r_.__value_.__r.__words[0];
  v92 = (std::string::value_type *)(v65->__r_.__value_.__r.__words[0] + v89);
  if (v92 <= v86)
    goto LABEL_212;
LABEL_213:
  memcpy(v92, v86, v87);
  v96 = v89 + v87;
  if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
    v65->__r_.__value_.__l.__size_ = v96;
  else
    *((_BYTE *)&v65->__r_.__value_.__s + 23) = v96 & 0x7F;
  v91->__r_.__value_.__s.__data_[v96] = 0;
LABEL_217:
  v97 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v98 = (char)v97;
  if ((v97 & 0x80u) == 0)
    v99 = 22;
  else
    v99 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v97 & 0x80u) != 0)
    v97 = v65->__r_.__value_.__l.__size_;
  if (v99 == v97)
  {
    std::string::__grow_by_and_replace(v65, v99, 1uLL, v99, v99, 0, 1uLL, ":");
    v100 = v176;
    if (((char)v176 & 0x80000000) == 0)
    {
LABEL_224:
      v101 = v100;
      v102 = v100 == 0;
      p_src = (char *)&__src;
      goto LABEL_235;
    }
  }
  else
  {
    if (v98 >= 0)
      v104 = v65;
    else
      v104 = (std::string *)v65->__r_.__value_.__r.__words[0];
    v105 = (char *)v104 + v97;
    if ((char *)v104 + v97 <= ":" && v105 + 1 > ":")
      goto LABEL_402;
    *v105 = 58;
    v106 = v97 + 1;
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
    {
      v65->__r_.__value_.__l.__size_ = v106;
      v104->__r_.__value_.__s.__data_[v106] = 0;
      v100 = v176;
      if (((char)v176 & 0x80000000) == 0)
        goto LABEL_224;
    }
    else
    {
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v106 & 0x7F;
      v104->__r_.__value_.__s.__data_[v106] = 0;
      v100 = v176;
      if (((char)v176 & 0x80000000) == 0)
        goto LABEL_224;
    }
  }
  v101 = v175;
  if ((v175 & 0x8000000000000000) != 0)
    goto LABEL_402;
  p_src = __src;
  v102 = v175 == 0;
  if (v175)
  {
    if (!__src)
      goto LABEL_402;
  }
LABEL_235:
  v107 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
  if (v107 >= 0)
    v108 = 22;
  else
    v108 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v107 >= 0)
    v109 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  else
    v109 = v65->__r_.__value_.__l.__size_;
  if (v108 - v109 >= v101)
  {
    if (!v102)
    {
      if (v107 >= 0)
        v110 = v65;
      else
        v110 = (std::string *)v65->__r_.__value_.__r.__words[0];
      v111 = (char *)v110 + v109;
      if ((char *)v110 + v109 <= p_src && &v111[v101] > p_src)
        goto LABEL_402;
      memmove(v111, p_src, v101);
      v112 = v109 + v101;
      if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
        v65->__r_.__value_.__l.__size_ = v112;
      else
        *((_BYTE *)&v65->__r_.__value_.__s + 23) = v112 & 0x7F;
      v110->__r_.__value_.__s.__data_[v112] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v65, v108, v109 + v101 - v108, v109, v109, 0, v101, p_src);
  }
  v113 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v114 = (char)v113;
  if ((v113 & 0x80u) == 0)
    v115 = 22;
  else
    v115 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v113 & 0x80u) != 0)
    v113 = v65->__r_.__value_.__l.__size_;
  if (v115 == v113)
  {
    std::string::__grow_by_and_replace(v65, v115, 1uLL, v115, v115, 0, 1uLL, ":");
    v116 = (char *)this + 160;
    v117 = *((char *)this + 183);
    if ((v117 & 0x80000000) == 0)
    {
LABEL_262:
      v118 = v117;
      v119 = v117 == 0;
      goto LABEL_273;
    }
  }
  else
  {
    if (v114 >= 0)
      v120 = v65;
    else
      v120 = (std::string *)v65->__r_.__value_.__r.__words[0];
    v121 = (char *)v120 + v113;
    if ((char *)v120 + v113 <= ":" && v121 + 1 > ":")
      goto LABEL_402;
    *v121 = 58;
    v122 = v113 + 1;
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
    {
      v65->__r_.__value_.__l.__size_ = v122;
      v120->__r_.__value_.__s.__data_[v122] = 0;
      v116 = (char *)this + 160;
      v117 = *((char *)this + 183);
      if ((v117 & 0x80000000) == 0)
        goto LABEL_262;
    }
    else
    {
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v122 & 0x7F;
      v120->__r_.__value_.__s.__data_[v122] = 0;
      v116 = (char *)this + 160;
      v117 = *((char *)this + 183);
      if ((v117 & 0x80000000) == 0)
        goto LABEL_262;
    }
  }
  v118 = *((_QWORD *)this + 21);
  if ((v118 & 0x8000000000000000) != 0)
    goto LABEL_402;
  v116 = *(char **)v116;
  v119 = v118 == 0;
  if (v118)
  {
    if (!v116)
      goto LABEL_402;
  }
LABEL_273:
  v123 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
  if (v123 >= 0)
    v124 = 22;
  else
    v124 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v123 >= 0)
    v125 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  else
    v125 = v65->__r_.__value_.__l.__size_;
  if (v124 - v125 >= v118)
  {
    if (!v119)
    {
      if (v123 >= 0)
        v126 = v65;
      else
        v126 = (std::string *)v65->__r_.__value_.__r.__words[0];
      v127 = (char *)v126 + v125;
      if ((char *)v126 + v125 <= v116 && &v127[v118] > v116)
        goto LABEL_402;
      memmove(v127, v116, v118);
      v128 = v125 + v118;
      if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
        v65->__r_.__value_.__l.__size_ = v128;
      else
        *((_BYTE *)&v65->__r_.__value_.__s + 23) = v128 & 0x7F;
      v126->__r_.__value_.__s.__data_[v128] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v65, v124, v125 + v118 - v124, v125, v125, 0, v118, v116);
  }
  v129 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v130 = (char)v129;
  if ((v129 & 0x80u) == 0)
    v131 = 22;
  else
    v131 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v129 & 0x80u) != 0)
    v129 = v65->__r_.__value_.__l.__size_;
  if (v131 == v129)
  {
    std::string::__grow_by_and_replace(v65, v131, 1uLL, v131, v131, 0, 1uLL, ":");
    v132 = (char *)this + 184;
    v133 = *((char *)this + 207);
    if ((v133 & 0x80000000) == 0)
    {
LABEL_300:
      v134 = v133;
      v135 = v133 == 0;
      goto LABEL_311;
    }
  }
  else
  {
    if (v130 >= 0)
      v136 = v65;
    else
      v136 = (std::string *)v65->__r_.__value_.__r.__words[0];
    v137 = (char *)v136 + v129;
    if ((char *)v136 + v129 <= ":" && v137 + 1 > ":")
      goto LABEL_402;
    *v137 = 58;
    v138 = v129 + 1;
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
    {
      v65->__r_.__value_.__l.__size_ = v138;
      v136->__r_.__value_.__s.__data_[v138] = 0;
      v132 = (char *)this + 184;
      v133 = *((char *)this + 207);
      if ((v133 & 0x80000000) == 0)
        goto LABEL_300;
    }
    else
    {
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v138 & 0x7F;
      v136->__r_.__value_.__s.__data_[v138] = 0;
      v132 = (char *)this + 184;
      v133 = *((char *)this + 207);
      if ((v133 & 0x80000000) == 0)
        goto LABEL_300;
    }
  }
  v134 = *((_QWORD *)this + 24);
  if ((v134 & 0x8000000000000000) != 0)
    goto LABEL_402;
  v132 = *(char **)v132;
  v135 = v134 == 0;
  if (v134)
  {
    if (!v132)
      goto LABEL_402;
  }
LABEL_311:
  v139 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
  if (v139 >= 0)
    v140 = 22;
  else
    v140 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v139 >= 0)
    v141 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  else
    v141 = v65->__r_.__value_.__l.__size_;
  if (v140 - v141 >= v134)
  {
    if (!v135)
    {
      if (v139 >= 0)
        v142 = v65;
      else
        v142 = (std::string *)v65->__r_.__value_.__r.__words[0];
      v143 = (char *)v142 + v141;
      if ((char *)v142 + v141 <= v132 && &v143[v134] > v132)
        goto LABEL_402;
      memmove(v143, v132, v134);
      v144 = v141 + v134;
      if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
        v65->__r_.__value_.__l.__size_ = v144;
      else
        *((_BYTE *)&v65->__r_.__value_.__s + 23) = v144 & 0x7F;
      v142->__r_.__value_.__s.__data_[v144] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v65, v140, v141 + v134 - v140, v141, v141, 0, v134, v132);
  }
  v145 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v146 = (char)v145;
  if ((v145 & 0x80u) == 0)
    v147 = 22;
  else
    v147 = (v65->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v145 & 0x80u) != 0)
    v145 = v65->__r_.__value_.__l.__size_;
  if (v147 == v145)
  {
    std::string::__grow_by_and_replace(v65, v147, 1uLL, v147, v147, 0, 1uLL, ":");
  }
  else
  {
    if (v146 >= 0)
      v148 = v65;
    else
      v148 = (std::string *)v65->__r_.__value_.__r.__words[0];
    v149 = (char *)v148 + v145;
    if ((char *)v148 + v145 <= ":" && v149 + 1 > ":")
      goto LABEL_402;
    *v149 = 58;
    v150 = v145 + 1;
    if (SHIBYTE(v65->__r_.__value_.__r.__words[2]) < 0)
      v65->__r_.__value_.__l.__size_ = v150;
    else
      *((_BYTE *)&v65->__r_.__value_.__s + 23) = v150 & 0x7F;
    v148->__r_.__value_.__s.__data_[v150] = 0;
  }
  v151 = rtc::StringBuilder::operator<<(v65, *((unsigned __int16 *)this + 200));
  v152 = v151;
  v153 = HIBYTE(v151->__r_.__value_.__r.__words[2]);
  v154 = (char)v153;
  if ((v153 & 0x80u) == 0)
    v155 = 22;
  else
    v155 = (v151->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v153 & 0x80u) != 0)
    v153 = v151->__r_.__value_.__l.__size_;
  if (v155 == v153)
  {
    std::string::__grow_by_and_replace(v151, v155, 1uLL, v155, v155, 0, 1uLL, ":");
  }
  else
  {
    if (v154 >= 0)
      v156 = v151;
    else
      v156 = (std::string *)v151->__r_.__value_.__r.__words[0];
    v157 = (char *)v156 + v153;
    if ((char *)v156 + v153 <= ":" && v157 + 1 > ":")
      goto LABEL_402;
    *v157 = 58;
    v158 = v153 + 1;
    if (SHIBYTE(v151->__r_.__value_.__r.__words[2]) < 0)
      v151->__r_.__value_.__l.__size_ = v158;
    else
      *((_BYTE *)&v151->__r_.__value_.__s + 23) = v158 & 0x7F;
    v156->__r_.__value_.__s.__data_[v158] = 0;
  }
  v159 = rtc::StringBuilder::operator<<(v152, *((unsigned __int16 *)this + 201));
  v160 = v159;
  v161 = HIBYTE(v159->__r_.__value_.__r.__words[2]);
  v162 = (char)v161;
  if ((v161 & 0x80u) == 0)
    v163 = 22;
  else
    v163 = (v159->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v161 & 0x80u) != 0)
    v161 = v159->__r_.__value_.__l.__size_;
  if (v163 == v161)
  {
    std::string::__grow_by_and_replace(v159, v163, 1uLL, v163, v163, 0, 1uLL, ":");
  }
  else
  {
    if (v162 >= 0)
      v164 = v159;
    else
      v164 = (std::string *)v159->__r_.__value_.__r.__words[0];
    v165 = (char *)v164 + v161;
    if ((char *)v164 + v161 <= ":" && v165 + 1 > ":")
      goto LABEL_402;
    *v165 = 58;
    v166 = v161 + 1;
    if (SHIBYTE(v159->__r_.__value_.__r.__words[2]) < 0)
      v159->__r_.__value_.__l.__size_ = v166;
    else
      *((_BYTE *)&v159->__r_.__value_.__s + 23) = v166 & 0x7F;
    v164->__r_.__value_.__s.__data_[v166] = 0;
  }
  v167 = rtc::StringBuilder::operator<<(v160, *((_DWORD *)this + 62));
  v168 = HIBYTE(v167->__r_.__value_.__r.__words[2]);
  v169 = (char)v168;
  if ((v168 & 0x80u) == 0)
    v170 = 22;
  else
    v170 = (v167->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v168 & 0x80u) != 0)
    v168 = v167->__r_.__value_.__l.__size_;
  if (v170 == v168)
  {
    std::string::__grow_by_and_replace(v167, v170, 1uLL, v170, v170, 0, 1uLL, "]");
    goto LABEL_395;
  }
  if (v169 >= 0)
    v171 = v167;
  else
    v171 = (std::string *)v167->__r_.__value_.__r.__words[0];
  v172 = (char *)v171 + v168;
  if ((char *)v171 + v168 <= "]" && v172 + 1 > "]")
  {
LABEL_402:
    __break(1u);
    return;
  }
  *v172 = 93;
  v173 = v168 + 1;
  if (SHIBYTE(v167->__r_.__value_.__r.__words[2]) < 0)
    v167->__r_.__value_.__l.__size_ = v173;
  else
    *((_BYTE *)&v167->__r_.__value_.__s + 23) = v173 & 0x7F;
  v171->__r_.__value_.__s.__data_[v173] = 0;
LABEL_395:
  *a3 = v180;
  memset(&v180, 0, sizeof(v180));
  if ((char)v176 < 0)
  {
    operator delete(__src);
    if (((char)v179 & 0x80000000) == 0)
    {
LABEL_397:
      if ((SHIBYTE(v180.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_401:
      operator delete(v180.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if (((char)v179 & 0x80000000) == 0)
  {
    goto LABEL_397;
  }
  operator delete(__p_new_stuff);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_401;
}

BOOL cricket::Candidate::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void **v20;
  unsigned __int8 *v21;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)v6 + 6))
    return 0;
  v10 = a1[55];
  if ((v10 & 0x80u) == 0)
    v11 = a1[55];
  else
    v11 = *((_QWORD *)a1 + 5);
  v12 = v6[55];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)v6 + 5);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 32);
  if (v13 >= 0)
    v15 = v6 + 32;
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v6 + 4);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *((_QWORD *)a1 + 5)))
      return 0;
  }
  else if (a1[55])
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_34;
    }
    return 0;
  }
LABEL_34:
  v16 = a1[79];
  if ((v16 & 0x80u) == 0)
    v17 = a1[79];
  else
    v17 = *((_QWORD *)a1 + 8);
  v18 = v6[79];
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *((_QWORD *)v6 + 8);
  if (v17 != v18)
    return 0;
  v20 = (const void **)(a1 + 56);
  if (v19 >= 0)
    v21 = v6 + 56;
  else
    v21 = (unsigned __int8 *)*((_QWORD *)v6 + 7);
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v20, v21, *((_QWORD *)a1 + 8)))
      return 0;
  }
  else if (a1[79])
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16)
        goto LABEL_49;
    }
    return 0;
  }
LABEL_49:
  result = rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)(a1 + 80), (const rtc::SocketAddress *)(v6 + 80));
  if (!result)
    return result;
  if (*((unsigned __int16 *)a1 + 68) != *((unsigned __int16 *)v6 + 68) || *((_DWORD *)a1 + 38) != *((_DWORD *)v6 + 38))
    return 0;
  result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 160, v6 + 160);
  if (!result)
    return result;
  result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 184, v6 + 184);
  if (!result)
    return result;
  if (*((_DWORD *)a1 + 52) != *((_DWORD *)v6 + 52))
    return 0;
  result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 216, v6 + 216);
  if (!result)
    return result;
  if (*((_DWORD *)a1 + 60) != *((_DWORD *)v6 + 60) || *((_DWORD *)a1 + 62) != *((_DWORD *)v6 + 62))
    return 0;
  result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 256, v6 + 256);
  if (!result)
    return result;
  result = rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)(a1 + 280), (const rtc::SocketAddress *)(v6 + 280));
  if (!result)
    return result;
  if (*((unsigned __int16 *)a1 + 168) != *((unsigned __int16 *)v6 + 168))
    return 0;
  result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 352, v6 + 352);
  if (result)
  {
    result = std::operator==[abi:sn180100]<std::allocator<char>>(a1 + 376, v6 + 376);
    if (result)
      return *((unsigned __int16 *)a1 + 200) == *((unsigned __int16 *)v6 + 200);
  }
  return result;
}

void cricket::Candidate::ToSanitizedCopy(std::string *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  __int128 *v8;
  char *v9;
  size_t v10;
  __int16 v11;
  std::string *v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  size_t v17;
  __int16 v18;
  void **v19;
  size_t v20;
  int v21;
  int v22;
  std::string *v23;
  _BOOL4 v24;
  int v25;
  char v26;
  __int16 v27;
  void *__p[2];
  void *v29;
  void *v30;
  _QWORD v31[3];
  __int16 v32;
  int v33;
  char v34;
  __int128 v35;
  int v36;
  void *v37[4];

  cricket::Candidate::Candidate((std::string *)a4, this);
  if (!a2)
    goto LABEL_48;
  v8 = (__int128 *)&this[3].__r_.__value_.__r.__words[1];
  if (this[4].__r_.__value_.__s.__data_[7] < 0)
  {
    v10 = this[3].__r_.__value_.__r.__words[2];
    if (!v10)
      goto LABEL_12;
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_64;
    v9 = *(char **)v8;
    if (!*(_QWORD *)v8)
      goto LABEL_64;
  }
  else
  {
    v9 = &this[3].__r_.__value_.__s.__data_[8];
    v10 = this[4].__r_.__value_.__s.__data_[7];
    if (!this[4].__r_.__value_.__s.__data_[7])
    {
LABEL_12:
      v13 = this[5].__r_.__value_.__r.__words[2];
      memset(v31, 0, 20);
      v30 = &unk_24C0ACDA0;
      HIBYTE(v37[2]) = 19;
      if (v37 > (void **)"redacted-ip.invalid" || (char *)&v37[2] + 3 <= "redacted-ip.invalid")
      {
        strcpy((char *)v37, "redacted-ip.invalid");
        v29 = v37[2];
        *(_OWORD *)__p = *(_OWORD *)"redacted-ip.invalid";
        HIBYTE(v37[2]) = 19;
        if (v37 > (void **)"redacted-ip.invalid" || (char *)&v37[2] + 3 <= "redacted-ip.invalid")
        {
          strcpy((char *)v37, "redacted-ip.invalid");
          v14 = inet_pton(2, (const char *)v37, &v36);
          v15 = v14;
          if (SHIBYTE(v37[2]) < 0)
          {
            operator delete(v37[0]);
            if (v15)
              goto LABEL_18;
          }
          else if (v14)
          {
LABEL_18:
            LODWORD(v31[0]) = 2;
            HIDWORD(v31[0]) = v36;
            v31[1] = 0;
            LODWORD(v31[2]) = 0;
LABEL_26:
            v34 = 1;
            v33 = 0;
            v32 = v13;
            v12 = (std::string *)(a4 + 80);
            if ((void **)(a4 + 80) == __p)
              goto LABEL_47;
            goto LABEL_36;
          }
          HIBYTE(v37[2]) = 19;
          if (v37 > (void **)"redacted-ip.invalid" || (char *)&v37[2] + 3 <= "redacted-ip.invalid")
          {
            strcpy((char *)v37, "redacted-ip.invalid");
            v16 = inet_pton(30, (const char *)v37, &v35);
            if (SHIBYTE(v37[2]) < 0)
              operator delete(v37[0]);
            if (!v16)
            {
              v34 = 0;
              memset(v31, 0, 20);
              v33 = 0;
              v32 = v13;
              v12 = (std::string *)(a4 + 80);
              if ((void **)(a4 + 80) == __p)
                goto LABEL_47;
              goto LABEL_36;
            }
            LODWORD(v31[0]) = 30;
            *(_OWORD *)((char *)v31 + 4) = v35;
            goto LABEL_26;
          }
        }
      }
LABEL_64:
      __break(1u);
      return;
    }
  }
  if (rtc::inet_pton(2, v9, v10, v37) || rtc::inet_pton(30, v9, v10, __p))
  {
    v11 = this[5].__r_.__value_.__r.__words[2];
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v30 = &unk_24C0ACDA0;
    memset(v31, 0, 20);
    rtc::SocketAddress::SetIP((uint64_t)__p, (__int128 *)"redacted-literal.invalid", 0x18uLL);
    v32 = v11;
    v12 = (std::string *)(a4 + 80);
    if ((void **)(a4 + 80) == __p)
      goto LABEL_47;
  }
  else
  {
    if (this[4].__r_.__value_.__s.__data_[7] < 0)
    {
      v17 = this[3].__r_.__value_.__r.__words[2];
      if ((v17 & 0x8000000000000000) != 0)
        goto LABEL_64;
      v8 = *(__int128 **)v8;
      if (v17)
      {
        if (!v8)
          goto LABEL_64;
      }
    }
    else
    {
      v17 = this[4].__r_.__value_.__s.__data_[7];
    }
    v18 = this[5].__r_.__value_.__r.__words[2];
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v30 = &unk_24C0ACDA0;
    memset(v31, 0, 20);
    rtc::SocketAddress::SetIP((uint64_t)__p, v8, v17);
    v32 = v18;
    v12 = (std::string *)(a4 + 80);
    if ((void **)(a4 + 80) == __p)
      goto LABEL_47;
  }
LABEL_36:
  if (*(char *)(a4 + 103) < 0)
  {
    if (SHIBYTE(v29) >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (SHIBYTE(v29) >= 0)
      v20 = HIBYTE(v29);
    else
      v20 = (size_t)__p[1];
    std::string::__assign_no_alias<false>(v12, (const std::string::value_type *)v19, v20);
  }
  else if ((HIBYTE(v29) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v12, (char *)__p[0], (size_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v12->__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
  }
LABEL_47:
  *(_DWORD *)(a4 + 112) = v31[0];
  *(_OWORD *)(a4 + 116) = *(_OWORD *)((char *)v31 + 4);
  *(_WORD *)(a4 + 136) = v32;
  *(_BYTE *)(a4 + 144) = v34;
  *(_DWORD *)(a4 + 140) = v33;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if (!a3)
      return;
    goto LABEL_49;
  }
LABEL_48:
  if (!a3)
    return;
LABEL_49:
  v21 = *(_DWORD *)(a4 + 112);
  if (v21 == 30)
  {
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v30 = &unk_24C0ACDA0;
    v34 = 0;
    v22 = 30;
    LODWORD(v31[0]) = 30;
    *(_OWORD *)((char *)v31 + 4) = *MEMORY[0x24BDAE878];
    v33 = 0;
    v32 = 0;
    v23 = (std::string *)(a4 + 280);
    if ((void **)(a4 + 280) == __p)
      goto LABEL_52;
    goto LABEL_58;
  }
  if (v21 != 2)
  {
    v22 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v29 = 0;
    v30 = &unk_24C0ACDA0;
    v34 = 0;
    v32 = 0;
    v33 = 0;
    memset(v31, 0, 20);
    v23 = (std::string *)(a4 + 280);
    if ((void **)(a4 + 280) == __p)
      goto LABEL_52;
LABEL_58:
    if (*(char *)(a4 + 303) < 0)
    {
      std::string::__assign_no_alias<false>(v23, (const std::string::value_type *)__p, 0);
      v22 = v31[0];
      v27 = v32;
      v26 = v34;
      v25 = v33;
      v24 = SHIBYTE(v29) < 0;
    }
    else
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v23->__r_.__value_.__r.__words[2] = (std::string::size_type)v29;
    }
    goto LABEL_61;
  }
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  v30 = &unk_24C0ACDA0;
  v34 = 0;
  v22 = 2;
  LODWORD(v31[0]) = 2;
  v33 = 0;
  v32 = 0;
  *(_OWORD *)((char *)v31 + 4) = 0uLL;
  v23 = (std::string *)(a4 + 280);
  if ((void **)(a4 + 280) != __p)
    goto LABEL_58;
LABEL_52:
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
LABEL_61:
  *(_DWORD *)(a4 + 312) = v22;
  *(_OWORD *)(a4 + 316) = *(_OWORD *)((char *)v31 + 4);
  *(_WORD *)(a4 + 336) = v27;
  *(_BYTE *)(a4 + 344) = v26;
  *(_DWORD *)(a4 + 340) = v25;
  if (v24)
    operator delete(__p[0]);
}

void cricket::Candidate::ComputeFoundation(cricket::Candidate *this, const rtc::SocketAddress *a2, uint64_t a3)
{
  unsigned int v6;
  const char *v7;
  size_t v8;
  const char *v9;
  unsigned __int8 v10;
  std::string::size_type v11;
  BOOL v12;
  const std::string::value_type *p_p_new_stuff;
  std::string::size_type v14;
  std::string::size_type size;
  const std::string::value_type *v16;
  int v17;
  std::string *p_dst;
  char *v19;
  std::string::size_type v20;
  std::string::size_type v21;
  BOOL v22;
  std::string::size_type v23;
  std::string::size_type v24;
  const std::string::value_type *v25;
  int v26;
  std::string *v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  BOOL v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  int v37;
  size_t v38;
  std::string::value_type *v39;
  std::string::value_type *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  BOOL v45;
  const std::string::value_type *v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string *v49;
  char *v50;
  std::string::size_type v51;
  std::string::size_type v52;
  std::string *p_p;
  unsigned __int8 v54;
  unsigned int v55;
  std::string::value_type v56;
  int v57;
  int v58;
  size_t v59;
  std::string::value_type *v60;
  uint64_t v61;
  uint64_t v62;
  std::string::value_type *v63;
  void **v65;
  rtc *v66;
  std::string __p;
  std::string::value_type *__src[2];
  unint64_t v69;
  std::string __dst;
  std::string::value_type *__p_new_stuff;
  std::string::size_type v72;
  unsigned __int8 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  memset(&__dst, 0, sizeof(__dst));
  v6 = *((_DWORD *)this + 52) - 1;
  if (v6 > 2)
  {
    v7 = "host";
    v8 = 4;
    v9 = &__dst.__r_.__value_.__s.__data_[4];
    if (&__dst > (std::string *)"host")
      goto LABEL_6;
  }
  else
  {
    v7 = off_24C0B0898[v6];
    v8 = 5;
    v9 = &__dst.__r_.__value_.__s.__data_[5];
    if (&__dst > (std::string *)v7)
      goto LABEL_6;
  }
  if (v9 > v7)
    goto LABEL_147;
LABEL_6:
  memcpy(&__dst, v7, v8);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    __dst.__r_.__value_.__l.__size_ = v8;
    *v9 = 0;
    rtc::IPAddress::ToString((const rtc::SocketAddress *)((char *)a2 + 24), &__p_new_stuff);
    v10 = v73;
    if (((char)v73 & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v8;
    *v9 = 0;
    rtc::IPAddress::ToString((const rtc::SocketAddress *)((char *)a2 + 24), &__p_new_stuff);
    v10 = v73;
    if (((char)v73 & 0x80000000) == 0)
    {
LABEL_8:
      v11 = v10;
      v12 = v10 == 0;
      p_p_new_stuff = (const std::string::value_type *)&__p_new_stuff;
      goto LABEL_13;
    }
  }
  v11 = v72;
  if ((v72 & 0x8000000000000000) != 0)
    goto LABEL_147;
  p_p_new_stuff = __p_new_stuff;
  v12 = v72 == 0;
  if (v72)
  {
    if (!__p_new_stuff)
      goto LABEL_147;
  }
LABEL_13:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = 22;
  else
    v14 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  if (v14 - size < v11)
  {
    std::string::__grow_by_and_replace(&__dst, v14, size + v11 - v14, size, size, 0, v11, p_p_new_stuff);
    v16 = (char *)this + 32;
    v17 = *((char *)this + 55);
    if (v17 < 0)
      goto LABEL_33;
LABEL_31:
    v21 = v17;
    v22 = v17 == 0;
    goto LABEL_36;
  }
  if (!v12)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v19 = (char *)p_dst + size;
    if ((char *)p_dst + size <= p_p_new_stuff && &v19[v11] > p_p_new_stuff)
      goto LABEL_147;
    memmove(v19, p_p_new_stuff, v11);
    v20 = size + v11;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      __dst.__r_.__value_.__l.__size_ = size + v11;
      p_dst->__r_.__value_.__s.__data_[v20] = 0;
      v16 = (char *)this + 32;
      v17 = *((char *)this + 55);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_33;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v20 & 0x7F;
    p_dst->__r_.__value_.__s.__data_[v20] = 0;
  }
  v16 = (char *)this + 32;
  v17 = *((char *)this + 55);
  if ((v17 & 0x80000000) == 0)
    goto LABEL_31;
LABEL_33:
  v21 = *((_QWORD *)this + 5);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_147;
  v16 = *(const std::string::value_type **)v16;
  v22 = v21 == 0;
  if (v21)
  {
    if (!v16)
      goto LABEL_147;
  }
LABEL_36:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = 22;
  else
    v23 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v24 = __dst.__r_.__value_.__l.__size_;
  if (v23 - v24 < v21)
  {
    std::string::__grow_by_and_replace(&__dst, v23, v24 + v21 - v23, v24, v24, 0, v21, v16);
    v25 = (char *)this + 56;
    v26 = *((char *)this + 79);
    if (v26 < 0)
      goto LABEL_56;
LABEL_54:
    v30 = v26;
    v31 = v26 == 0;
    goto LABEL_59;
  }
  if (!v22)
  {
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &__dst;
    else
      v27 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v28 = (char *)v27 + v24;
    if ((char *)v27 + v24 <= v16 && &v28[v21] > v16)
      goto LABEL_147;
    memmove(v28, v16, v21);
    v29 = v24 + v21;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      __dst.__r_.__value_.__l.__size_ = v24 + v21;
      v27->__r_.__value_.__s.__data_[v29] = 0;
      v25 = (char *)this + 56;
      v26 = *((char *)this + 79);
      if ((v26 & 0x80000000) == 0)
        goto LABEL_54;
      goto LABEL_56;
    }
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29 & 0x7F;
    v27->__r_.__value_.__s.__data_[v29] = 0;
  }
  v25 = (char *)this + 56;
  v26 = *((char *)this + 79);
  if ((v26 & 0x80000000) == 0)
    goto LABEL_54;
LABEL_56:
  v30 = *((_QWORD *)this + 8);
  if ((v30 & 0x8000000000000000) != 0)
    goto LABEL_147;
  v25 = *(const std::string::value_type **)v25;
  v31 = v30 == 0;
  if (v30)
  {
    if (!v25)
      goto LABEL_147;
  }
LABEL_59:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = 22;
  else
    v32 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v33 = __dst.__r_.__value_.__l.__size_;
  if (v32 - v33 < v30)
  {
    std::string::__grow_by_and_replace(&__dst, v32, v33 + v30 - v32, v33, v33, 0, v30, v25);
    if (((char)v73 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
  if (v31)
  {
LABEL_76:
    if (((char)v73 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &__dst;
  else
    v34 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v35 = (char *)v34 + v33;
  if ((char *)v34 + v33 <= v25 && &v35[v30] > v25)
    goto LABEL_147;
  memmove(v35, v25, v30);
  v36 = v33 + v30;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 & 0x7F;
    v34->__r_.__value_.__s.__data_[v36] = 0;
    goto LABEL_76;
  }
  __dst.__r_.__value_.__l.__size_ = v33 + v30;
  v34->__r_.__value_.__s.__data_[v36] = 0;
  if ((char)v73 < 0)
LABEL_77:
    operator delete(__p_new_stuff);
LABEL_78:
  v37 = snprintf((char *)&__p_new_stuff, 0x20uLL, "%llu", a3);
  if (v37 < 0)
    goto LABEL_148;
  v38 = v37;
  if (v37 > 0x16)
  {
    v42 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v42 = v37 | 7;
    v43 = v42 + 1;
    v39 = (std::string::value_type *)operator new(v42 + 1);
    __src[1] = (std::string::value_type *)v38;
    v69 = v43 | 0x8000000000000000;
    __src[0] = v39;
    v40 = &v39[v38];
    v41 = &v39[v38] > (std::string::value_type *)&__p_new_stuff;
    if (v39 > (std::string::value_type *)&__p_new_stuff)
      goto LABEL_86;
  }
  else
  {
    HIBYTE(v69) = v37;
    v39 = (std::string::value_type *)__src;
    v40 = (char *)__src + v38;
    v41 = (std::string::value_type **)((char *)__src + v38) > &__p_new_stuff;
    if (__src > &__p_new_stuff)
      goto LABEL_86;
  }
  if (v41)
    goto LABEL_147;
LABEL_86:
  if ((_DWORD)v38)
    memcpy(v39, &__p_new_stuff, v38);
  *v40 = 0;
  if (SHIBYTE(v69) < 0)
  {
    v44 = (std::string::size_type)__src[1];
    if (((unint64_t)__src[1] & 0x8000000000000000) != 0)
      goto LABEL_147;
    v46 = __src[0];
    v45 = __src[1] == 0;
    if (__src[1])
    {
      if (!__src[0])
        goto LABEL_147;
    }
  }
  else
  {
    v44 = HIBYTE(v69);
    v45 = HIBYTE(v69) == 0;
    v46 = (const std::string::value_type *)__src;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v47 = 22;
  else
    v47 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    v48 = __dst.__r_.__value_.__l.__size_;
  if (v47 - v48 < v44)
  {
    std::string::__grow_by_and_replace(&__dst, v47, v48 + v44 - v47, v48, v48, 0, v44, v46);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
  if (v45)
  {
LABEL_110:
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_112;
    goto LABEL_111;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = &__dst;
  else
    v49 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v50 = (char *)v49 + v48;
  if ((char *)v49 + v48 <= v46 && &v50[v44] > v46)
    goto LABEL_147;
  memmove(v50, v46, v44);
  v51 = v48 + v44;
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v51 & 0x7F;
    v49->__r_.__value_.__s.__data_[v51] = 0;
    goto LABEL_110;
  }
  __dst.__r_.__value_.__l.__size_ = v48 + v44;
  v49->__r_.__value_.__s.__data_[v51] = 0;
  if (SHIBYTE(v69) < 0)
LABEL_111:
    operator delete(__src[0]);
LABEL_112:
  __p = __dst;
  memset(&__dst, 0, sizeof(__dst));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v52 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_147;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_)
    {
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_147;
    }
  }
  else
  {
    v52 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = &__p;
  }
  if ((v54 & 1) == 0)
  {
    if ((_DWORD)v66)
    {
      rtc::LoadCrc32Table(v66);
      rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table = (uint64_t)rtc::LoadCrc32Table(void)::kCrc32Table;
    }
  }
  if (v52)
  {
    v55 = -1;
    do
    {
      v56 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      v55 = *(_DWORD *)(rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table
                      + 4 * (v56 ^ v55)) ^ (v55 >> 8);
      --v52;
    }
    while (v52);
    v57 = ~v55;
  }
  else
  {
    v57 = 0;
  }
  v58 = snprintf((char *)&__p_new_stuff, 0x20uLL, "%u", v57);
  if (v58 < 0)
LABEL_148:
    abort();
  v59 = v58;
  if (v58 > 0x16)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = (std::string::value_type *)operator new(v61 + 1);
    __src[1] = (std::string::value_type *)v59;
    v69 = v62 | 0x8000000000000000;
    __src[0] = v60;
  }
  else
  {
    HIBYTE(v69) = v58;
    v60 = (std::string::value_type *)__src;
  }
  v63 = &v60[v59];
  if (v60 <= (std::string::value_type *)&__p_new_stuff && &v60[v59] > (std::string::value_type *)&__p_new_stuff)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  if ((_DWORD)v59)
    memcpy(v60, &__p_new_stuff, v59);
  *v63 = 0;
  v65 = (void **)((char *)this + 256);
  if (*((char *)this + 279) < 0)
    operator delete(*v65);
  *(_OWORD *)v65 = *(_OWORD *)__src;
  *((_QWORD *)this + 34) = v69;
  HIBYTE(v69) = 0;
  LOBYTE(__src[0]) = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_142:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_142;
}

double cricket::Candidate::ComputePrflxFoundation(cricket::Candidate *this)
{
  cricket::Candidate *v1;
  size_t v3;
  unsigned __int8 v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  void **v14;
  double result;
  rtc *v16;
  __int128 v17;
  unint64_t v18;
  char __str[32];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((char *)this + 23) < 0)
  {
    v3 = *((_QWORD *)this + 1);
    if ((v3 & 0x8000000000000000) != 0)
      goto LABEL_30;
    v1 = *(cricket::Candidate **)this;
    if (v3 && v1 == 0)
      goto LABEL_30;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 23);
    v1 = this;
  }
  if ((v5 & 1) == 0)
    goto LABEL_31;
  while (1)
  {
    if (v3)
    {
      v6 = -1;
      do
      {
        v7 = *(_BYTE *)v1;
        v1 = (cricket::Candidate *)((char *)v1 + 1);
        v6 = *(_DWORD *)(rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table
                       + 4 * (v7 ^ v6)) ^ (v6 >> 8);
        --v3;
      }
      while (v3);
      v8 = ~v6;
    }
    else
    {
      v8 = 0;
    }
    v9 = snprintf(__str, 0x20uLL, "%u", v8);
    if (v9 < 0)
      abort();
    v3 = v9;
    if (v9 > 0x16)
    {
      v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v11 = v9 | 7;
      v12 = v11 + 1;
      v10 = (__int128 *)operator new(v11 + 1);
      *((_QWORD *)&v17 + 1) = v3;
      v18 = v12 | 0x8000000000000000;
      *(_QWORD *)&v17 = v10;
    }
    else
    {
      HIBYTE(v18) = v9;
      v10 = &v17;
    }
    v1 = (cricket::Candidate *)((char *)v10 + v3);
    if (v10 > (__int128 *)__str || (char *)v10 + v3 <= __str)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if ((_DWORD)v16)
    {
      rtc::LoadCrc32Table(v16);
      rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table = (uint64_t)rtc::LoadCrc32Table(void)::kCrc32Table;
    }
  }
  if ((_DWORD)v3)
    memcpy(v10, __str, v3);
  *(_BYTE *)v1 = 0;
  v14 = (void **)((char *)this + 256);
  if (*((char *)this + 279) < 0)
    operator delete(*v14);
  result = *(double *)&v17;
  *(_OWORD *)v14 = v17;
  *((_QWORD *)this + 34) = v18;
  return result;
}

void **webrtc::CascadedBiQuadFilter::CascadedBiQuadFilter(void **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = 0;
    do
    {
      v7 = *(float *)v3;
      v8 = *(float *)(v3 + 16);
      if (*(_BYTE *)(v3 + 20))
      {
        v9 = (float)-(float)(v7 * v7) * v8;
        v10 = 0.0;
      }
      else
      {
        v10 = v7 * (float)(v8 * -2.0);
        v9 = v8 * (float)((float)(*(float *)(v3 + 4) * *(float *)(v3 + 4)) + (float)(v7 * v7));
      }
      v11 = *(float *)(v3 + 8);
      v12 = v11 * -2.0;
      v13 = (float)(*(float *)(v3 + 12) * *(float *)(v3 + 12)) + (float)(v11 * v11);
      v14 = (unint64_t)a1[2];
      if ((unint64_t)v5 < v14)
      {
        if (!v5)
          goto LABEL_24;
        *(float *)v5 = v8;
        *((float *)v5 + 1) = v10;
        *((float *)v5 + 2) = v9;
        *((float *)v5 + 3) = v12;
        *((float *)v5 + 4) = v13;
        *(_OWORD *)(v5 + 20) = 0uLL;
        v6 = v5 + 36;
      }
      else
      {
        v15 = (char *)*a1;
        v16 = 0x8E38E38E38E38E39 * ((v5 - (_BYTE *)*a1) >> 2);
        v17 = v16 + 1;
        if (v16 + 1 > 0x71C71C71C71C71CLL)
          goto LABEL_25;
        v18 = 0x8E38E38E38E38E39 * ((uint64_t)(v14 - (_QWORD)v15) >> 2);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x38E38E38E38E38ELL)
          v19 = 0x71C71C71C71C71CLL;
        else
          v19 = v17;
        if (!v19)
        {
LABEL_24:
          __break(1u);
LABEL_25:
          abort();
        }
        if (v19 > 0x71C71C71C71C71CLL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v20 = 36 * v19;
        v21 = (char *)operator new(36 * v19);
        v22 = &v21[36 * v16];
        *(float *)v22 = v8;
        *((float *)v22 + 1) = v10;
        *((float *)v22 + 2) = v9;
        *((float *)v22 + 3) = v12;
        *((float *)v22 + 4) = v13;
        *(_QWORD *)(v22 + 28) = 0;
        *(_QWORD *)(v22 + 20) = 0;
        v23 = v22;
        if (v5 != v15)
        {
          do
          {
            v24 = *(_OWORD *)(v5 - 36);
            v25 = *(_OWORD *)(v5 - 20);
            *((_DWORD *)v23 - 1) = *((_DWORD *)v5 - 1);
            *(_OWORD *)(v23 - 20) = v25;
            *(_OWORD *)(v23 - 36) = v24;
            v23 -= 36;
            v5 -= 36;
          }
          while (v5 != v15);
          v5 = v15;
        }
        v26 = &v21[v20];
        v6 = v22 + 36;
        *a1 = v23;
        a1[1] = v22 + 36;
        a1[2] = v26;
        if (v5)
          operator delete(v5);
      }
      a1[1] = v6;
      v3 += 24;
      v5 = v6;
    }
    while (v3 != v4);
  }
  return a1;
}

float **webrtc::CascadedBiQuadFilter::Process(float **result, float *a2, uint64_t a3, float *__dst, float **a5)
{
  float *v5;
  int64_t v6;
  unint64_t v7;
  float *v8;
  float *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  uint64_t i;
  float *v24;
  float v25;
  float v26;
  float *v27;
  float *v28;
  float *v29;
  float v30;
  float v31;
  float v32;
  float *v33;
  float v34;
  float v35;
  float *v36;
  float v37;
  float v38;
  float *v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float *v47;
  float v48;
  float v49;

  v5 = *result;
  v6 = (char *)result[1] - (char *)*result;
  if (v6)
  {
    v7 = v6 / 36;
    if (a3)
      v8 = a2;
    else
      v8 = 0;
    if (a5)
      v9 = __dst;
    else
      v9 = 0;
    v10 = v5[5];
    v11 = v5[6];
    v12 = v5[7];
    v13 = v5[8];
    if (a3)
    {
      v14 = *v5;
      v15 = v5[1];
      v16 = v5[2];
      v17 = -v5[3];
      v18 = -v5[4];
      v19 = v9;
      do
      {
        v20 = v10;
        v21 = v12;
        v22 = *v8++;
        v10 = v22;
        v12 = (float)((float)((float)((float)(v15 * v20) + (float)(v14 * v22)) + (float)(v16 * v11)) + (float)(v17 * v12))
            + (float)(v18 * v13);
        *v19++ = v12;
        v13 = v21;
        v11 = v20;
        --a3;
      }
      while (a3);
      v5[5] = v10;
      v5[6] = v20;
      v5[7] = v12;
      v5[8] = v21;
      if (v7 < 2)
        return result;
    }
    else
    {
      v5[5] = v10;
      v5[6] = v11;
      v5[7] = v12;
      v5[8] = v13;
      if (v7 < 2)
        return result;
    }
    if (a5)
    {
      for (i = 1; i != v7; ++i)
      {
        v24 = &v5[9 * i];
        v25 = *v24;
        v26 = v24[1];
        v27 = v24;
        v28 = v24;
        v29 = v24;
        v30 = v24[3];
        v31 = v24[4];
        v32 = v24[2];
        v34 = v24[5];
        v33 = v24 + 5;
        v35 = v34;
        v37 = v27[6];
        v36 = v27 + 6;
        v38 = v37;
        v40 = v28[7];
        v39 = v28 + 7;
        v41 = v40;
        v43 = v29[8];
        v42 = v29 + 8;
        v44 = v43;
        v45 = -v30;
        v46 = -v31;
        v47 = v9;
        result = a5;
        do
        {
          v48 = v35;
          v49 = v44;
          v44 = v41;
          v35 = *v47;
          v41 = (float)((float)((float)((float)(v26 * v48) + (float)(v25 * *v47)) + (float)(v32 * v38))
                      + (float)(v45 * v41))
              + (float)(v46 * v49);
          *v47++ = v41;
          v38 = v48;
          result = (float **)((char *)result - 1);
        }
        while (result);
        *v33 = v35;
        *v36 = v48;
        *v39 = v41;
        *v42 = v44;
      }
    }
  }
  else if (a3)
  {
    return (float **)memmove(__dst, a2, 4 * a3);
  }
  return result;
}

_QWORD *webrtc::ChainDiffCalculator::ChainDiffs@<X0>(_QWORD *this@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE *i;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  v4 = this;
  *a3 = 0;
  v6 = a3 + 1;
  v7 = *this;
  v8 = *this >> 1;
  if (*this >= 0xAuLL)
  {
    if (v8 <= 8)
      v9 = 8;
    else
      v9 = *this >> 1;
    if (v9 >> 62)
      goto LABEL_24;
    this = operator new(4 * v9);
    a3[1] = (unint64_t)this;
    a3[2] = v9;
    *a3 = 1;
  }
  v10 = v4 + 1;
  if ((v7 & 1) != 0)
    v10 = (_QWORD *)*v10;
  if (v7 >= 2)
  {
    v11 = 16 * v8;
    for (i = v10 + 1; ; i += 16)
    {
      while (1)
      {
        if (*i)
          v13 = a2 - *((_QWORD *)i - 1);
        else
          LODWORD(v13) = 0;
        v17 = v13;
        v14 = *a3;
        v15 = (_QWORD *)a3[1];
        if ((*a3 & 1) != 0)
        {
          v16 = a3[2];
        }
        else
        {
          v15 = v6;
          v16 = 4;
        }
        if (v14 >> 1 != v16)
          break;
        this = absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>((uint64_t)a3, &v17);
        i += 16;
        v11 -= 16;
        if (!v11)
          return this;
      }
      if (!v15)
        break;
      *((_DWORD *)v15 + (v14 >> 1)) = v13;
      *a3 = v14 + 2;
      v11 -= 16;
      if (!v11)
        return this;
    }
    __break(1u);
LABEL_24:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  return this;
}

void webrtc::ChainDiffCalculator::From(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t *v18;
  _QWORD *v19;

  webrtc::ChainDiffCalculator::ChainDiffs(a1, a2, a4);
  v7 = a3[1];
  v8 = v7;
  if (v7 != *a1 >> 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/chain_diff_calculator.cc");
    v8 = a3[1];
    v7 = *a1 >> 1;
  }
  if (v8 < v7)
    v7 = v8;
  if (v7)
  {
    v16 = 0;
    for (i = 0; v7 != i; ++i)
    {
      if (((*(_QWORD *)(*a3 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        if (i >= *a1 >> 1)
        {
          __break(1u);
          return;
        }
        v19 = a1 + 1;
        if ((*a1 & 1) != 0)
          v19 = (_QWORD *)a1[1];
        v18 = &v19[v16];
        *v18 = a2;
        *((_BYTE *)v18 + 8) = 1;
      }
      v16 += 2;
    }
  }
}

void absl::inlined_vector_internal::Storage<std::optional<long long>,4ul,std::allocator<std::optional<long long>>>::Resize<absl::inlined_vector_internal::DefaultValueAdapter<std::allocator<std::optional<long long>>>>(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  void **v5;
  unint64_t v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  unint64_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  _OWORD *v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  unint64_t v29;
  __int128 *v30;
  unint64_t v31;

  v5 = (void **)(a1 + 1);
  v4 = *a1;
  if ((*a1 & 1) != 0)
  {
    v7 = (__int128 *)a1[1];
    v6 = a1[2];
    v8 = v4 >> 1;
    v9 = a2 - (v4 >> 1);
    if (a2 <= v4 >> 1)
      goto LABEL_42;
  }
  else
  {
    v6 = 4;
    v7 = (__int128 *)(a1 + 1);
    v8 = v4 >> 1;
    v9 = a2 - (v4 >> 1);
    if (a2 <= v4 >> 1)
      goto LABEL_42;
  }
  if (v6 >= a2)
  {
    if (!v7)
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v9 >= 2
      && ((v22 = ~v8 + a2, &v7[v8 + v22] >= &v7[v8])
        ? (v23 = (char *)&v7[v8 + v22] + 8 >= (char *)&v7[v8] + 8)
        : (v23 = 0),
          v23 ? (v24 = v22 >> 60 == 0) : (v24 = 0),
          v24))
    {
      v25 = v9 & 0xFFFFFFFFFFFFFFFELL;
      v30 = &v7[v8 + 1];
      v31 = v9 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        *((_BYTE *)v30 - 16) = 0;
        *(_BYTE *)v30 = 0;
        *((_BYTE *)v30 - 8) = 0;
        *((_BYTE *)v30 + 8) = 0;
        v30 += 2;
        v31 -= 2;
      }
      while (v31);
      if (v9 == v25)
        goto LABEL_41;
    }
    else
    {
      v25 = 0;
    }
    v26 = v25 + v8 - a2;
    v27 = (char *)&v7[v25 + v8] + 8;
    do
    {
      *(v27 - 8) = 0;
      *v27 = 0;
      v27 += 16;
      v15 = __CFADD__(v26++, 1);
    }
    while (!v15);
LABEL_41:
    v4 = *a1;
    goto LABEL_42;
  }
  v10 = 2 * v6;
  if (v10 <= a2)
    v11 = a2;
  else
    v11 = v10;
  if (v11 >> 60)
LABEL_52:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v12 = operator new(16 * v11);
  v13 = v12;
  if (v9 >= 2
    && ((v14 = ~v8 + a2, &v12[v8 + v14] >= &v12[v8])
      ? (v15 = (char *)&v12[v8 + v14] + 8 >= (char *)&v12[v8] + 8)
      : (v15 = 0),
        v15 ? (v16 = v14 >> 60 == 0) : (v16 = 0),
        v16))
  {
    v17 = v9 & 0xFFFFFFFFFFFFFFFELL;
    v28 = &v12[v8 + 1];
    v29 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(v28 - 16) = 0;
      *v28 = 0;
      *(v28 - 8) = 0;
      v28[8] = 0;
      v28 += 32;
      v29 -= 2;
    }
    while (v29);
    if (v9 == v17)
      goto LABEL_22;
  }
  else
  {
    v17 = 0;
  }
  v18 = v17 + v8 - a2;
  v19 = (char *)&v12[v17 + v8] + 8;
  do
  {
    *(v19 - 8) = 0;
    *v19 = 0;
    v19 += 16;
    v15 = __CFADD__(v18++, 1);
  }
  while (!v15);
LABEL_22:
  if (v4 >= 2)
  {
    v20 = v12;
    do
    {
      v21 = *v7++;
      *v20++ = v21;
      --v8;
    }
    while (v8);
  }
  if ((v4 & 1) != 0)
    operator delete(*v5);
  a1[1] = (unint64_t)v13;
  a1[2] = v11;
  LOBYTE(v4) = 1;
LABEL_42:
  *a1 = v4 & 1 | (2 * a2);
}

char *absl::inlined_vector_internal::Storage<int,4ul,std::allocator<int>>::EmplaceBackSlow<int>(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  _OWORD *v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  int v20;

  v5 = a1 + 8;
  v4 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (((v7 >> 61) & 3) != 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = *(_QWORD *)(a1 + 8);
    v6 = 2 * v7;
  }
  else
  {
    v6 = 8;
  }
  v8 = v4 >> 1;
  v9 = (char *)operator new(4 * v6);
  v10 = v9;
  v11 = &v9[4 * (v4 >> 1)];
  *(_DWORD *)v11 = *a2;
  if (v4 >= 2)
  {
    v12 = 0;
    if (v4 < 0x10 || (unint64_t)&v9[-v5] < 0x20)
    {
      v13 = (int *)v5;
    }
    else
    {
      v12 = v8 & 0x7FFFFFFFFFFFFFF8;
      v13 = (int *)(v5 + 4 * (v8 & 0x7FFFFFFFFFFFFFF8));
      v14 = v9 + 16;
      v15 = (__int128 *)(v5 + 16);
      v16 = v8 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v17 = *v15;
        *(v14 - 1) = *(v15 - 1);
        *v14 = v17;
        v14 += 2;
        v15 += 2;
        v16 -= 8;
      }
      while (v16);
      if (v8 == v12)
        goto LABEL_15;
    }
    v18 = v8 - v12;
    v19 = &v9[4 * v12];
    do
    {
      v20 = *v13++;
      *(_DWORD *)v19 = v20;
      v19 += 4;
      --v18;
    }
    while (v18);
  }
LABEL_15:
  if ((v4 & 1) != 0)
  {
    operator delete(*(void **)(a1 + 8));
    v4 = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)a1 = (v4 | 1) + 2;
  return v11;
}

void cricket::RtpSendParametersFromMediaDescription(uint64_t a1, int a2, uint64_t a3)
{
  void **v5;
  void **v6;
  void *v7;
  void *__p;
  void **v9;

  webrtc::RtpExtension::DeduplicateHeaderExtensions((uint64_t *)(a1 + 64), a2, (uint64_t)&__p);
  *(_BYTE *)(a3 + 56) = (*(_DWORD *)(a1 + 124) & 0xFFFFFFFD) == 0;
  if (a3 + 8 != a1 + 280)
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a3 + 8), *(const cricket::Codec **)(a1 + 280), *(const cricket::Codec **)(a1 + 288), 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 3));
  if (*(_BYTE *)(a1 + 88) && (void **)(a3 + 32) != &__p)
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a3 + 32), (uint64_t)__p, (uint64_t)v9, ((char *)v9 - (_BYTE *)__p) >> 5);
  *(_WORD *)(a3 + 57) = *(_WORD *)(a1 + 33);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 36);
  *(_BYTE *)(a3 + 88) = *(_DWORD *)(a1 + 200) != 0;
  v5 = (void **)__p;
  if (__p)
  {
    v6 = v9;
    v7 = __p;
    if (v9 != __p)
    {
      do
      {
        if (*((char *)v6 - 9) < 0)
          operator delete(*(v6 - 4));
        v6 -= 4;
      }
      while (v6 != v5);
      v7 = __p;
    }
    v9 = v5;
    operator delete(v7);
  }
}

void cricket::BaseChannel::~BaseChannel(cricket::BaseChannel *this)
{
  void *v2;
  void *v3;
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  cricket::BaseChannel *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)this = off_24C0B08C0;
  *((_QWORD *)this + 1) = &unk_24C0B09B0;
  *((_QWORD *)this + 2) = &unk_24C0B09E8;
  *(_BYTE *)(*((_QWORD *)this + 8) + 4) = 0;
  v2 = (void *)*((_QWORD *)this + 44);
  if (v2)
  {
    *((_QWORD *)this + 45) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  if (*((char *)this + 327) < 0)
  {
    operator delete(*((void **)this + 38));
    if ((*((char *)this + 303) & 0x80000000) == 0)
    {
LABEL_7:
      v4 = (void **)*((_QWORD *)this + 32);
      if (!v4)
        goto LABEL_8;
      goto LABEL_29;
    }
  }
  else if ((*((char *)this + 303) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*((void **)this + 35));
  v4 = (void **)*((_QWORD *)this + 32);
  if (!v4)
  {
LABEL_8:
    v5 = (void *)*((_QWORD *)this + 29);
    if (!v5)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_29:
  v16 = (void **)*((_QWORD *)this + 33);
  if (v16 == v4)
  {
    *((_QWORD *)this + 33) = v4;
    operator delete(v4);
    v5 = (void *)*((_QWORD *)this + 29);
    if (!v5)
      goto LABEL_10;
LABEL_9:
    *((_QWORD *)this + 30) = v5;
    operator delete(v5);
    goto LABEL_10;
  }
  do
  {
    if (*((char *)v16 - 9) < 0)
      operator delete(*(v16 - 4));
    v16 -= 4;
  }
  while (v16 != v4);
  v17 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 33) = v4;
  operator delete(v17);
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
    goto LABEL_9;
LABEL_10:
  v6 = *((_QWORD *)this + 25);
  if (v6)
  {
    v7 = *((_QWORD *)this + 26);
    v8 = (void *)*((_QWORD *)this + 25);
    if (v7 != v6)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v7 - 144));
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v6;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 22);
  if (v9)
  {
    v10 = *((_QWORD *)this + 23);
    v11 = (void *)*((_QWORD *)this + 22);
    if (v10 != v9)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)(v10 - 144));
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v9;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 17);
  if (v12)
  {
    *((_QWORD *)this + 18) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 14);
  if (v13)
  {
    *((_QWORD *)this + 15) = v13;
    operator delete(v13);
  }
  v14 = (cricket::BaseChannel *)*((_QWORD *)this + 12);
  if (v14 == (cricket::BaseChannel *)((char *)this + 72))
  {
    v15 = 4;
    v14 = (cricket::BaseChannel *)((char *)this + 72);
    goto LABEL_38;
  }
  if (v14)
  {
    v15 = 5;
LABEL_38:
    (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
  }
  v18 = (unsigned int *)*((_QWORD *)this + 8);
  if (v18)
  {
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      MEMORY[0x20BD0ADEC]();
  }
  v21 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

uint64_t cricket::BaseChannel::SetRtpTransport(cricket::BaseChannel *this, webrtc::RtpTransportInternal *a2)
{
  webrtc::RtpTransportInternal *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t result;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  _QWORD *v54;
  void *v55;
  void *v56;
  uint64_t (*v57)(uint64_t);

  v3 = (webrtc::RtpTransportInternal *)*((_QWORD *)this + 13);
  if (v3 == a2)
    return 1;
  if (v3)
  {
    (*(void (**)(webrtc::RtpTransportInternal *, char *))(*(_QWORD *)v3 + 112))(v3, (char *)this + 16);
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(*((_QWORD *)this + 13) + 56), this);
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(*((_QWORD *)this + 13) + 152), this);
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(*((_QWORD *)this + 13) + 184), this);
    webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(*((_QWORD *)this + 13) + 216), this);
    *((_QWORD *)this + 13) = 0;
    v5 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 40))(this);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 88))(v5, 0);
    v6 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 64))(v6, 0);
    v7 = *((_QWORD *)this + 5);
    v8 = (unsigned int *)*((_QWORD *)this + 8);
    if (v8)
    {
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (_QWORD *)operator new();
    *v10 = v8;
    v10[1] = this;
    v10[3] = absl::internal_any_invocable::LocalManagerTrivial;
    v10[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::SetRtpTransport(webrtc::RtpTransportInternal *)::$_1 &&>;
    v54 = v10;
    v56 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v57 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD **, char *, char *))(*(_QWORD *)v7 + 8))(v7, &v54, &v53, &v52);
    ((void (*)(uint64_t, _QWORD **, _QWORD **))v56)(1, &v54, &v54);
  }
  *((_QWORD *)this + 13) = a2;
  if (!a2)
    return 1;
  result = (*(uint64_t (**)(webrtc::RtpTransportInternal *, char *, char *))(*(_QWORD *)a2 + 104))(a2, (char *)this + 280, (char *)this + 16);
  if (!(_DWORD)result)
    return result;
  v12 = (char *)(*((_QWORD *)this + 13) + 56);
  v13 = (_QWORD *)operator new();
  *v13 = this;
  v13[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v13[3] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_0 &,BOOL>;
  v54 = v13;
  v55 = webrtc::webrtc_function_impl::CallHelpers<void ()(BOOL)>::CallVoidPtr<absl::AnyInvocable<void ()(BOOL)>>;
  v56 = webrtc::UntypedFunction::PrepareArgs<void ()(BOOL),absl::AnyInvocable<void ()(BOOL)>,absl::AnyInvocable<void ()(BOOL)>,(void *)0>(absl::AnyInvocable<void ()(BOOL)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v12, (uint64_t)this, (uint64_t *)&v54, v14, v15, v16, v17, v18);
  v19 = (char *)(*((_QWORD *)this + 13) + 152);
  v20 = (_QWORD *)operator new();
  *v20 = this;
  v20[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v20[3] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_1 &,std::optional<rtc::NetworkRoute>>;
  v54 = v20;
  v55 = webrtc::webrtc_function_impl::CallHelpers<void ()(std::optional<rtc::NetworkRoute>)>::CallVoidPtr<absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>>;
  v56 = webrtc::UntypedFunction::PrepareArgs<void ()(std::optional<rtc::NetworkRoute>),absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>,absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>,(void *)0>(absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v19, (uint64_t)this, (uint64_t *)&v54, v21, v22, v23, v24, v25);
  v26 = (char *)(*((_QWORD *)this + 13) + 184);
  v27 = (_QWORD *)operator new();
  *v27 = this;
  v27[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v27[3] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_2 &,BOOL>;
  v54 = v27;
  v55 = webrtc::webrtc_function_impl::CallHelpers<void ()(BOOL)>::CallVoidPtr<absl::AnyInvocable<void ()(BOOL)>>;
  v56 = webrtc::UntypedFunction::PrepareArgs<void ()(BOOL),absl::AnyInvocable<void ()(BOOL)>,absl::AnyInvocable<void ()(BOOL)>,(void *)0>(absl::AnyInvocable<void ()(BOOL)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v26, (uint64_t)this, (uint64_t *)&v54, v28, v29, v30, v31, v32);
  v33 = (char *)(*((_QWORD *)this + 13) + 216);
  v34 = (_QWORD *)operator new();
  *v34 = this;
  v34[2] = absl::internal_any_invocable::LocalManagerTrivial;
  v34[3] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_3 &,rtc::SentPacket const&>;
  v54 = v34;
  v55 = webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::SentPacket const&)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::SentPacket const&)>>;
  v56 = webrtc::UntypedFunction::PrepareArgs<void ()(rtc::SentPacket const&),absl::AnyInvocable<void ()(rtc::SentPacket const&)>,absl::AnyInvocable<void ()(rtc::SentPacket const&)>,(void *)0>(absl::AnyInvocable<void ()(rtc::SentPacket const&)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>(v33, (uint64_t)this, (uint64_t *)&v54, v35, v36, v37, v38, v39);
  v40 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v40 + 88))(v40, (char *)this + 8);
  v41 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v41 + 64))(v41, (char *)this + 8);
  v42 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 40))(this);
  v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 56))(*((_QWORD *)this + 13));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 72))(v42, v43);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13), 1)
    && (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13), 0))
  {
    cricket::BaseChannel::ChannelWritable_n(this);
    v44 = (unsigned int *)*((_QWORD *)this + 14);
    v45 = (unsigned int *)*((_QWORD *)this + 15);
    if (v44 == v45)
      goto LABEL_14;
  }
  else
  {
    cricket::BaseChannel::ChannelNotWritable_n(this);
    v44 = (unsigned int *)*((_QWORD *)this + 14);
    v45 = (unsigned int *)*((_QWORD *)this + 15);
    if (v44 == v45)
      goto LABEL_14;
  }
  do
  {
    v46 = *v44;
    v47 = v44[1];
    v44 += 2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 32))(*((_QWORD *)this + 13), v46, v47);
  }
  while (v44 != v45);
LABEL_14:
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 48))(*((_QWORD *)this + 13)) & 1) == 0)
  {
    v48 = (unsigned int *)*((_QWORD *)this + 17);
    v49 = (unsigned int *)*((_QWORD *)this + 18);
    while (v48 != v49)
    {
      v50 = *v48;
      v51 = v48[1];
      v48 += 2;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v50, v51);
    }
  }
  return 1;
}

uint64_t cricket::BaseChannel::Enable(uint64_t this, int a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v12)(uint64_t);

  if (*(unsigned __int8 *)(this + 169) != a2)
  {
    v2 = a2;
    v3 = this;
    *(_BYTE *)(this + 169) = a2;
    v4 = *(_QWORD *)(this + 40);
    v5 = *(unsigned int **)(this + 64);
    if (v5)
    {
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    v7 = operator new();
    *(_QWORD *)v7 = v5;
    *(_QWORD *)(v7 + 8) = v3;
    *(_BYTE *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
    *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::Enable(BOOL)::$_1 &&>;
    v10[0] = v7;
    v11 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v12 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v10, &v9, &v8);
    return v11(1, v10, v10);
  }
  return this;
}

uint64_t cricket::BaseChannel::SetLocalContent(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t cricket::BaseChannel::SetRemoteContent(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
}

BOOL cricket::BaseChannel::SetPayloadTypeDemuxingEnabled(cricket::BaseChannel *this, int a2)
{
  _BOOL8 v2;
  char *v4;
  char *v5;
  char v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  size_t v27;
  char *v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unsigned __int8 *v31;
  char *v32;
  char *v33;
  __int128 *v34;
  unint64_t v35;
  __int128 v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v47;
  char v48;
  cricket::BaseChannel *v49;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  void *v54;
  void *__p;
  void *v56;
  _QWORD v57[2];
  char v58;

  if (*((unsigned __int8 *)this + 170) == a2)
    return 1;
  *((_BYTE *)this + 170) = a2;
  if ((a2 & 1) == 0)
  {
    v41 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 56))(v41);
    v42 = *((_QWORD *)this + 44);
    if (v42 != *((_QWORD *)this + 45))
    {
      *((_QWORD *)this + 45) = v42;
      goto LABEL_65;
    }
    return 1;
  }
  v5 = (char *)*((_QWORD *)this + 29);
  v4 = (char *)*((_QWORD *)this + 30);
  if (v5 == v4)
    return 1;
  v6 = 0;
  v47 = (char *)*((_QWORD *)this + 30);
  do
  {
    v8 = (_BYTE *)*((_QWORD *)this + 44);
    v7 = (unsigned __int8 *)*((_QWORD *)this + 45);
    v9 = (_BYTE *)(v7 - v8);
    if (v7 == v8)
    {
      v10 = (unsigned __int8 *)*((_QWORD *)this + 44);
    }
    else
    {
      v10 = (unsigned __int8 *)*((_QWORD *)this + 44);
      v11 = v7 - v8;
      do
      {
        v12 = (_BYTE *)(v11 >> 1);
        v13 = &v10[v11 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v11 += ~(v11 >> 1);
        if (v15 < *v5)
          v10 = v14;
        else
          v11 = (unint64_t)v12;
      }
      while (v11);
      if (v10 != v7)
      {
        v16 = *v5;
        if (v16 >= *v10)
          goto LABEL_7;
        v17 = *((_QWORD *)this + 46);
        if ((unint64_t)v7 < v17)
        {
          if (v7)
          {
            *v7 = *(v7 - 1);
            v18 = v10 + 1;
            *((_QWORD *)this + 45) = v7 + 1;
            if (v7 == v10 + 1)
              goto LABEL_41;
LABEL_40:
            memmove(v18, v10, v7 - (_BYTE *)v18);
          }
          else
          {
            v18 = v10 + 1;
            *((_QWORD *)this + 45) = 0;
            if (v10 != (unsigned __int8 *)-1)
              goto LABEL_40;
          }
LABEL_41:
          *v10 = v16;
          v6 = 1;
          goto LABEL_7;
        }
LABEL_24:
        v19 = (unint64_t)(v9 + 1);
        if ((uint64_t)(v9 + 1) < 0)
          goto LABEL_76;
        v20 = v17 - (_QWORD)v8;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)operator new(v21);
          v23 = v10 - v8;
          v24 = &v22[v10 - v8];
          v25 = &v22[v21];
          if (v10 - v8 != v21)
            goto LABEL_47;
        }
        else
        {
          v22 = 0;
          v23 = v10 - v8;
          v24 = (char *)(v10 - v8);
          v25 = 0;
          if (v10 != v8)
            goto LABEL_47;
        }
        if (v23 < 1)
        {
          if ((unint64_t)(2 * v23) <= 1)
            v27 = 1;
          else
            v27 = 2 * v23;
          v28 = (char *)operator new(v27);
          v24 = &v28[v27 >> 2];
          v25 = &v28[v27];
          if (v22)
            operator delete(v22);
        }
        else
        {
          if (v23 + 1 >= 0)
            v26 = v23 + 1;
          else
            v26 = v23 + 2;
          v24 -= v26 >> 1;
        }
LABEL_47:
        if (!v24)
        {
LABEL_75:
          __break(1u);
LABEL_76:
          abort();
        }
        *v24 = *v5;
        v29 = (unsigned __int8 *)*((_QWORD *)this + 44);
        if (v29 == v10)
        {
          v32 = v24;
        }
        else
        {
          v30 = v10 - v29;
          if ((unint64_t)(v10 - v29) < 0x20 || (unint64_t)(v10 - (unsigned __int8 *)v24) < 0x20)
          {
            v31 = v10;
            v32 = v24;
          }
          else
          {
            v31 = &v10[-(v30 & 0xFFFFFFFFFFFFFFE0)];
            v32 = &v24[-(v30 & 0xFFFFFFFFFFFFFFE0)];
            v33 = v24 - 16;
            v34 = (__int128 *)&v8[v23 - 16];
            v35 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v36 = *v34;
              *((_OWORD *)v33 - 1) = *(v34 - 1);
              *(_OWORD *)v33 = v36;
              v33 -= 32;
              v34 -= 2;
              v35 -= 32;
            }
            while (v35);
            if (v30 == (v30 & 0xFFFFFFFFFFFFFFE0))
              goto LABEL_58;
          }
          do
          {
            v37 = *--v31;
            *--v32 = v37;
          }
          while (v31 != v29);
        }
LABEL_58:
        v38 = (_BYTE *)*((_QWORD *)this + 45);
        v39 = v38 - v10;
        if (v38 != v10)
          memmove(v24 + 1, v10, v38 - v10);
        v40 = (void *)*((_QWORD *)this + 44);
        *((_QWORD *)this + 44) = v32;
        *((_QWORD *)this + 45) = &v24[v39 + 1];
        *((_QWORD *)this + 46) = v25;
        if (v40)
          operator delete(v40);
        v6 = 1;
        v4 = v47;
        goto LABEL_7;
      }
    }
    v17 = *((_QWORD *)this + 46);
    if ((unint64_t)v7 >= v17)
      goto LABEL_24;
    if (!v8)
      goto LABEL_75;
    *v7 = *v5;
    *((_QWORD *)this + 45) = v7 + 1;
    v6 = 1;
LABEL_7:
    ++v5;
  }
  while (v5 != v4);
  if ((v6 & 1) == 0)
    return 1;
LABEL_65:
  v43 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 96))(v43);
  v44 = *((_QWORD *)this + 6);
  v49 = this;
  webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria(&v50, (__int128 *)((char *)this + 280));
  v58 = 0;
  v57[0] = &v58;
  v57[1] = &v49;
  (*(void (**)(uint64_t, _QWORD *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v44 + 96))(v44, v57, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0,BOOL,void>(cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v48);
  v2 = v58 != 0;
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v52 < 0)
  {
    operator delete(v51);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_74;
  }
  else
  {
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_71;
LABEL_74:
    operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_71:
  v45 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 104))(v45);
  return v2;
}

uint64_t cricket::BaseChannel::SendPacket(cricket::BaseChannel *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3)
{
  return cricket::BaseChannel::SendPacket(this, 0, a2, a3);
}

uint64_t cricket::BaseChannel::SendPacket(cricket::BaseChannel *this, int a2, rtc::CopyOnWriteBuffer *a3, const rtc::PacketOptions *a4)
{
  uint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  rtc::webrtc_checks_impl *v13;
  const char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  char v27;
  void *v28[2];
  char v29;

  v5 = *((_QWORD *)this + 13);
  if (!v5 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5))
    return 0;
  v8 = *((_QWORD *)a3 + 2);
  v9 = 12;
  if (a2)
    v9 = 4;
  if (v8 > 0x800 || v9 > v8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v11 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 96))(this);
      if (*(char *)(v11 + 23) >= 0)
        v12 = v11;
      else
        v12 = *(_QWORD *)v11;
      v13 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
      switch((int)v13)
      {
        case 0:
          v29 = 5;
          v14 = "audio";
          goto LABEL_28;
        case 1:
          v29 = 5;
          v14 = "video";
LABEL_28:
          if (v28 <= (void **)v14 && (char *)v28 + 5 > v14)
            goto LABEL_36;
          LODWORD(v28[0]) = *(_DWORD *)v14;
          WORD2(v28[0]) = *((unsigned __int8 *)v14 + 4);
          goto LABEL_32;
        case 2:
          v29 = 4;
          if (v28 <= (void **)"data" && (char *)v28 + 4 > "data")
          {
LABEL_36:
            __break(1u);
LABEL_37:
            rtc::webrtc_checks_impl::UnreachableCodeReached(v13);
          }
          strcpy((char *)v28, "data");
LABEL_32:
          rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v12, v28);
          if (v29 < 0)
            operator delete(v28[0]);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)11,std::string_view const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
          if ((v27 & 0x80000000) == 0)
            return 0;
          operator delete(__p);
          result = 0;
          break;
        case 3:
          v29 = 0;
          LOBYTE(v28[0]) = 0;
          goto LABEL_32;
        default:
          goto LABEL_37;
      }
      return result;
    }
    return 0;
  }
  v15 = *((_QWORD *)this + 13);
  if ((!v15 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 96))(v15) & 1) == 0) && *((_BYTE *)this + 163))
    return 0;
  v17 = **((_QWORD **)this + 13);
  if (a2)
    v18 = *(uint64_t (**)(void))(v17 + 80);
  else
    v18 = *(uint64_t (**)(void))(v17 + 72);
  return v18();
}

uint64_t `non-virtual thunk to'cricket::BaseChannel::SendPacket(cricket::BaseChannel *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3)
{
  return cricket::BaseChannel::SendPacket((cricket::BaseChannel *)((char *)this - 8), 0, a2, a3);
}

uint64_t cricket::BaseChannel::SendRtcp(cricket::BaseChannel *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3)
{
  return cricket::BaseChannel::SendPacket(this, 1, a2, a3);
}

uint64_t `non-virtual thunk to'cricket::BaseChannel::SendRtcp(cricket::BaseChannel *this, rtc::CopyOnWriteBuffer *a2, const rtc::PacketOptions *a3)
{
  return cricket::BaseChannel::SendPacket((cricket::BaseChannel *)((char *)this - 8), 1, a2, a3);
}

uint64_t cricket::BaseChannel::SetOption(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  char *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  char *v47;
  __int128 *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  if (a2 == 1)
  {
    v11 = *(unint64_t **)(a1 + 144);
    v10 = *(_QWORD *)(a1 + 152);
    if ((unint64_t)v11 >= v10)
    {
      v34 = *(char **)(a1 + 136);
      v35 = ((char *)v11 - v34) >> 3;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 61)
        goto LABEL_48;
      v37 = v10 - (_QWORD)v34;
      if (v37 >> 2 > v36)
        v36 = v37 >> 2;
      v18 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8;
      v38 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v18)
        v38 = v36;
      if (!v38)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        abort();
      }
      if (v38 >> 61)
LABEL_49:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v39 = 8 * v38;
      v40 = (char *)operator new(8 * v38);
      v41 = &v40[v39];
      v42 = &v40[8 * v35];
      *(_QWORD *)v42 = a3 | (unint64_t)(a4 << 32);
      v12 = v42 + 8;
      if (v11 != (unint64_t *)v34)
      {
        v43 = (char *)v11 - v34 - 8;
        if (v43 < 0x58)
          goto LABEL_52;
        if ((unint64_t)(v34 - v40) < 0x20)
          goto LABEL_52;
        v44 = (v43 >> 3) + 1;
        v45 = 8 * (v44 & 0x3FFFFFFFFFFFFFFCLL);
        v46 = &v11[v45 / 0xFFFFFFFFFFFFFFF8];
        v42 -= v45;
        v47 = &v40[8 * v35 - 16];
        v48 = (__int128 *)(v11 - 2);
        v49 = v44 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v50 = *v48;
          *((_OWORD *)v47 - 1) = *(v48 - 1);
          *(_OWORD *)v47 = v50;
          v47 -= 32;
          v48 -= 2;
          v49 -= 4;
        }
        while (v49);
        v11 = v46;
        if (v44 != (v44 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            v51 = *--v11;
            *((_QWORD *)v42 - 1) = v51;
            v42 -= 8;
          }
          while (v11 != (unint64_t *)v34);
        }
        v11 = (unint64_t *)v34;
      }
      *(_QWORD *)(a1 + 136) = v42;
      *(_QWORD *)(a1 + 144) = v12;
      *(_QWORD *)(a1 + 152) = v41;
      if (v11)
        operator delete(v11);
    }
    else
    {
      if (!v11)
        goto LABEL_47;
      *v11 = a3 | (unint64_t)(a4 << 32);
      v12 = v11 + 1;
    }
    *(_QWORD *)(a1 + 144) = v12;
    v33 = 5;
    return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 8 * v33))();
  }
  if (a2)
    return 0xFFFFFFFFLL;
  v8 = *(unint64_t **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 >= v7)
  {
    v14 = *(char **)(a1 + 112);
    v15 = ((char *)v8 - v14) >> 3;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      goto LABEL_48;
    v17 = v7 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    v18 = (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8;
    v19 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v18)
      v19 = v16;
    if (!v19)
      goto LABEL_47;
    if (!(v19 >> 61))
    {
      v20 = 8 * v19;
      v21 = (char *)operator new(8 * v19);
      v22 = &v21[v20];
      v23 = &v21[8 * v15];
      *(_QWORD *)v23 = a3 | (unint64_t)(a4 << 32);
      v9 = v23 + 8;
      if (v8 != (unint64_t *)v14)
      {
        v24 = (char *)v8 - v14 - 8;
        if (v24 < 0x58)
          goto LABEL_53;
        if ((unint64_t)(v14 - v21) < 0x20)
          goto LABEL_53;
        v25 = (v24 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = &v8[v26 / 0xFFFFFFFFFFFFFFF8];
        v23 -= v26;
        v28 = &v21[8 * v15 - 16];
        v29 = (__int128 *)(v8 - 2);
        v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v31 = *v29;
          *((_OWORD *)v28 - 1) = *(v29 - 1);
          *(_OWORD *)v28 = v31;
          v28 -= 32;
          v29 -= 2;
          v30 -= 4;
        }
        while (v30);
        v8 = v27;
        if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_53:
          do
          {
            v32 = *--v8;
            *((_QWORD *)v23 - 1) = v32;
            v23 -= 8;
          }
          while (v8 != (unint64_t *)v14);
        }
        v8 = (unint64_t *)v14;
      }
      *(_QWORD *)(a1 + 112) = v23;
      *(_QWORD *)(a1 + 120) = v9;
      *(_QWORD *)(a1 + 128) = v22;
      if (v8)
        operator delete(v8);
      goto LABEL_27;
    }
    goto LABEL_49;
  }
  if (!v8)
    goto LABEL_47;
  *v8 = a3 | (unint64_t)(a4 << 32);
  v9 = v8 + 1;
LABEL_27:
  *(_QWORD *)(a1 + 120) = v9;
  v33 = 4;
  return (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 8 * v33))();
}

uint64_t `non-virtual thunk to'cricket::BaseChannel::SetOption(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  return cricket::BaseChannel::SetOption(a1 - 8, a2, a3, a4);
}

void cricket::BaseChannel::ChannelWritable_n(cricket::BaseChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  rtc::webrtc_checks_impl *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  _QWORD *v16;
  char v17;
  void *__p[2];
  char v19;
  void *v20[2];
  uint64_t (*v21)(uint64_t, uint64_t *, void **);
  uint64_t (*v22)(uint64_t);

  if (!*((_BYTE *)this + 160))
  {
    *((_BYTE *)this + 160) = 1;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_29;
    v2 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 96))(this);
    v3 = *(char *)(v2 + 23) >= 0 ? v2 : *(_QWORD *)v2;
    v4 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    switch((int)v4)
    {
      case 0:
        HIBYTE(v21) = 5;
        v5 = "audio";
        if (v20 > (void **)"audio")
          goto LABEL_14;
        goto LABEL_13;
      case 1:
        HIBYTE(v21) = 5;
        v5 = "video";
        if (v20 > (void **)"video")
          goto LABEL_14;
LABEL_13:
        if ((char *)v20 + 5 > v5)
        {
LABEL_25:
          __break(1u);
LABEL_26:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v4);
        }
LABEL_14:
        LODWORD(v20[0]) = *(_DWORD *)v5;
        WORD2(v20[0]) = *((unsigned __int8 *)v5 + 4);
        break;
      case 2:
        HIBYTE(v21) = 4;
        if (v20 <= (void **)"data" && (char *)v20 + 4 > "data")
          goto LABEL_25;
        strcpy((char *)v20, "data");
        break;
      case 3:
        HIBYTE(v21) = 0;
        LOBYTE(v20[0]) = 0;
        break;
      default:
        goto LABEL_26;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)__p, v3, v20);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    rtc::webrtc_logging_impl::Log("\r\t\n\t\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (v19 < 0)
    {
      operator delete(__p[0]);
      if (!*((_BYTE *)this + 161))
        goto LABEL_20;
    }
    else
    {
LABEL_29:
      if (!*((_BYTE *)this + 161))
      {
LABEL_20:
        v13 = *((_QWORD *)this + 5);
        v14 = (unsigned int *)*((_QWORD *)this + 8);
        if (v14)
        {
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = (_QWORD *)operator new();
        *v16 = v14;
        v16[1] = this;
        v16[3] = absl::internal_any_invocable::LocalManagerTrivial;
        v16[4] = absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ChannelWritable_n(void)::$_0 &&>;
        v20[0] = v16;
        v21 = (uint64_t (*)(uint64_t, uint64_t *, void **))_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
        v22 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
        (*(void (**)(uint64_t, void **, void **, char *))(*(_QWORD *)v13 + 8))(v13, v20, __p, &v17);
        v21(1, (uint64_t *)v20, v20);
      }
    }
    *((_BYTE *)this + 161) = 1;
  }
}

void cricket::BaseChannel::ChannelNotWritable_n(cricket::BaseChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  rtc::webrtc_checks_impl *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  char v16;

  if (*((_BYTE *)this + 160))
  {
    *((_BYTE *)this + 160) = 0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v2 = (*(uint64_t (**)(cricket::BaseChannel *))(*(_QWORD *)this + 96))(this);
      if (*(char *)(v2 + 23) >= 0)
        v3 = v2;
      else
        v3 = *(_QWORD *)v2;
      v4 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
      switch((int)v4)
      {
        case 0:
          v16 = 5;
          v5 = "audio";
          if (v15 > (void **)"audio")
            goto LABEL_14;
          goto LABEL_13;
        case 1:
          v16 = 5;
          v5 = "video";
          if (v15 > (void **)"video")
            goto LABEL_14;
LABEL_13:
          if ((char *)v15 + 5 > v5)
          {
LABEL_21:
            __break(1u);
LABEL_22:
            rtc::webrtc_checks_impl::UnreachableCodeReached(v4);
          }
LABEL_14:
          LODWORD(v15[0]) = *(_DWORD *)v5;
          WORD2(v15[0]) = *((unsigned __int8 *)v5 + 4);
          break;
        case 2:
          v16 = 4;
          if (v15 <= (void **)"data" && (char *)v15 + 4 > "data")
            goto LABEL_21;
          strcpy((char *)v15, "data");
          break;
        case 3:
          v16 = 0;
          LOBYTE(v15[0]) = 0;
          break;
        default:
          goto LABEL_22;
      }
      rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v3, v15);
      if (v16 < 0)
        operator delete(v15[0]);
      rtc::webrtc_logging_impl::Log("\r\t\n\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
      if (v14 < 0)
        operator delete(__p);
    }
  }
}

_QWORD *cricket::BaseChannel::SetFirstPacketReceivedCallback(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 72);
  result = *(_QWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (result == v4)
  {
    v6 = 4;
    result = v4;
  }
  else
  {
    if (!result)
      goto LABEL_6;
    v6 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
LABEL_6:
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 96) = v4;
      return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), v4);
    }
    else
    {
      *(_QWORD *)(a1 + 96) = v7;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  return result;
}

void cricket::BaseChannel::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  rtc::webrtc_checks_impl *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  void *__p[2];
  char v23;

  v4 = *(_QWORD *)(a1 + 96);
  if (!v4)
    goto LABEL_7;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *(_QWORD **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v5 == (_QWORD *)(a1 + 72))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v5)
      goto LABEL_7;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_7:
  v7 = *(_QWORD *)(a1 + 104);
  if (v7 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7) & 1) != 0 || !*(_BYTE *)(a1 + 163))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v12, a2);
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (*(char *)(v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = *(_QWORD *)v8;
    v10 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    switch((int)v10)
    {
      case 0:
        v23 = 5;
        v11 = "audio";
        if (__p > (void **)"audio")
          goto LABEL_23;
        goto LABEL_22;
      case 1:
        v23 = 5;
        v11 = "video";
        if (__p > (void **)"video")
          goto LABEL_23;
LABEL_22:
        if ((char *)__p + 5 > v11)
        {
LABEL_30:
          __break(1u);
LABEL_31:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v10);
        }
LABEL_23:
        LODWORD(__p[0]) = *(_DWORD *)v11;
        WORD2(__p[0]) = *((unsigned __int8 *)v11 + 4);
        break;
      case 2:
        v23 = 4;
        if (__p <= (void **)"data" && (char *)__p + 4 > "data")
          goto LABEL_30;
        strcpy((char *)__p, "data");
        break;
      case 3:
        v23 = 0;
        LOBYTE(__p[0]) = 0;
        break;
      default:
        goto LABEL_31;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&v20, v9, __p);
    if (v23 < 0)
      operator delete(__p[0]);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (v21 < 0)
      operator delete(v20);
  }
}

void `non-virtual thunk to'cricket::BaseChannel::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  cricket::BaseChannel::OnRtpPacket(a1 - 16, a2);
}

uint64_t cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(uint64_t a1, char a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 **v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v25;
  _QWORD v26[4];
  char v27;
  _QWORD v28[2];
  char v29;

  v27 = a2;
  if (*((_BYTE *)a3 + 24))
  {
    v9 = *(_QWORD *)(a1 + 256);
    v8 = *(_QWORD *)(a1 + 264);
    v11 = *a3;
    v10 = (void **)a3[1];
    v12 = (uint64_t)v10 - *a3;
    if (v8 - v9 == v12)
    {
      if (v9 == v8)
      {
LABEL_24:
        if (v11)
        {
          if (v10 != (void **)v11)
          {
            do
            {
              if (*((char *)v10 - 9) < 0)
                operator delete(*(v10 - 4));
              v10 -= 4;
            }
            while (v10 != (void **)v11);
            v10 = (void **)*a3;
          }
          a3[1] = v11;
          operator delete(v10);
        }
        *((_BYTE *)a3 + 24) = 0;
        if ((a2 & 1) != 0)
          goto LABEL_33;
        goto LABEL_37;
      }
      v13 = (unsigned __int8 **)*a3;
      while (1)
      {
        v14 = *(unsigned __int8 *)(v9 + 23);
        if ((v14 & 0x80u) == 0)
          v15 = (unsigned __int8 *)*(unsigned __int8 *)(v9 + 23);
        else
          v15 = *(unsigned __int8 **)(v9 + 8);
        v16 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
        v17 = (char)v16;
        if ((char)v16 < 0)
          v16 = v13[1];
        if (v15 != v16)
          break;
        if (v17 >= 0)
          v18 = (unsigned __int8 *)v13;
        else
          v18 = *v13;
        if ((v14 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v9, v18, *(_QWORD *)(v9 + 8)))
            break;
        }
        else if (*(_BYTE *)(v9 + 23))
        {
          v19 = 0;
          while (*(unsigned __int8 *)(v9 + v19) == v18[v19])
          {
            if (v14 == ++v19)
              goto LABEL_21;
          }
          break;
        }
LABEL_21:
        if (*(_DWORD *)(v9 + 24) != *((_DWORD *)v13 + 6)
          || *(unsigned __int8 *)(v9 + 28) != *((unsigned __int8 *)v13 + 28))
        {
          break;
        }
        v9 += 32;
        v13 += 4;
        if (v9 == v8)
          goto LABEL_24;
      }
    }
    if ((uint64_t *)(a1 + 256) != a3)
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a1 + 256), v11, (uint64_t)v10, v12 >> 5);
  }
  if ((a2 & 1) != 0)
  {
LABEL_33:
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 96))(v20);
    goto LABEL_38;
  }
LABEL_37:
  if (!*((_BYTE *)a3 + 24))
    return 1;
LABEL_38:
  v21 = *(_QWORD *)(a1 + 48);
  v26[0] = a1;
  v26[1] = a3;
  v26[2] = &v27;
  v26[3] = a4;
  v29 = 0;
  v28[0] = &v29;
  v28[1] = v26;
  (*(void (**)(uint64_t, _QWORD *, void (*)(uint64_t), char *))(*(_QWORD *)v21 + 96))(v21, v28, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(BOOL,std::optional<std::vector<webrtc::RtpExtension>>,std::string &)::$_0,BOOL,void>(cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(BOOL,std::optional<std::vector<webrtc::RtpExtension>>,std::string &)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v25);
  v22 = v29 != 0;
  if (v27)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 104))(v23);
  }
  return v22;
}

uint64_t cricket::BaseChannel::DisableMedia_w(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  rtc::webrtc_checks_impl *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  char v16;

  if (*(_BYTE *)(this + 168))
  {
    v1 = this;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
      if (*(char *)(v2 + 23) >= 0)
        v3 = v2;
      else
        v3 = *(_QWORD *)v2;
      v4 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24));
      switch((int)v4)
      {
        case 0:
          v16 = 5;
          v5 = "audio";
          if (v15 > (void **)"audio")
            goto LABEL_14;
          goto LABEL_13;
        case 1:
          v16 = 5;
          v5 = "video";
          if (v15 > (void **)"video")
            goto LABEL_14;
LABEL_13:
          if ((char *)v15 + 5 > v5)
          {
LABEL_22:
            __break(1u);
LABEL_23:
            rtc::webrtc_checks_impl::UnreachableCodeReached(v4);
          }
LABEL_14:
          LODWORD(v15[0]) = *(_DWORD *)v5;
          WORD2(v15[0]) = *((unsigned __int8 *)v5 + 4);
          break;
        case 2:
          v16 = 4;
          if (v15 <= (void **)"data" && (char *)v15 + 4 > "data")
            goto LABEL_22;
          strcpy((char *)v15, "data");
          break;
        case 3:
          v16 = 0;
          LOBYTE(v15[0]) = 0;
          break;
        default:
          goto LABEL_23;
      }
      rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v3, v15);
      if (v16 < 0)
        operator delete(v15[0]);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
      if (v14 < 0)
        operator delete(__p);
    }
    *(_BYTE *)(v1 + 168) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
  }
  return this;
}

uint64_t cricket::BaseChannel::UpdateLocalStreams_w(uint64_t a1, const cricket::StreamParams **a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  const cricket::StreamParams *v8;
  const cricket::StreamParams *v9;
  __int32 *v10;
  __int32 *v11;
  __int32 *v12;
  __int32 *v13;
  __int32 *v14;
  unsigned __int8 **v15;
  unsigned __int8 **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const cricket::StreamParams *v31;
  const cricket::StreamParams *v32;
  _BOOL4 v34;
  _BOOL4 v36;
  _BOOL4 v38;
  const cricket::StreamParams *v39;
  const cricket::StreamParams *v40;
  unint64_t v41;
  unint64_t v42;
  __int32 *v43;
  __int32 *v44;
  __int32 *v45;
  __int32 *v46;
  __int32 *v47;
  unsigned __int8 **v48;
  unsigned __int8 **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  std::string *v58;
  unsigned int *data;
  std::string::pointer v60;
  std::string::size_type size;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  std::string *v84;
  void *v85;
  const char *v87;
  uint64_t v88;
  const char *v89;
  void **v90;
  _BOOL4 v91;
  _BOOL4 v92;
  _BOOL4 v93;
  void **v94;
  char v95;
  void *__p[2];
  char v97;
  void *v98;
  std::string *v99;
  unint64_t v100;
  __int128 v101;
  uint64_t v102;

  v6 = *(_QWORD *)(a1 + 176);
  v94 = (void **)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  if (v6 == v7)
  {
    v95 = 1;
    goto LABEL_54;
  }
  v95 = 1;
  while (2)
  {
    if (*(_QWORD *)(v6 + 24) == *(_QWORD *)(v6 + 32))
      goto LABEL_4;
    v8 = *a2;
    v9 = a2[1];
    if (*a2 == v9)
      goto LABEL_41;
    while (1)
    {
      v12 = *(__int32 **)(v6 + 24);
      if (v12 != *(__int32 **)(v6 + 32))
      {
        v13 = (__int32 *)*((_QWORD *)v8 + 3);
        v14 = (__int32 *)*((_QWORD *)v8 + 4);
        if (v13 != v14)
        {
          v10 = wmemchr(v13, *v12, v14 - v13);
          if (v10)
            v11 = v10;
          else
            v11 = v14;
          if (v11 != v14)
            goto LABEL_39;
          goto LABEL_12;
        }
      }
      v16 = *(unsigned __int8 ***)(v6 + 120);
      v15 = *(unsigned __int8 ***)(v6 + 128);
      if (v16 != v15)
        break;
      v18 = *((_QWORD *)v8 + 15);
      v17 = *((_QWORD *)v8 + 16);
      if (v18 != v17)
        goto LABEL_18;
LABEL_12:
      v8 = (const cricket::StreamParams *)((char *)v8 + 144);
      if (v8 == v9)
      {
        v8 = v9;
        goto LABEL_39;
      }
    }
    v18 = *((_QWORD *)v8 + 15);
    v17 = *((_QWORD *)v8 + 16);
LABEL_18:
    if (v17 - v18 != (char *)v15 - (char *)v16)
      goto LABEL_12;
    while (v18 != v17)
    {
      v19 = *(unsigned __int8 *)(v18 + 23);
      if ((v19 & 0x80u) == 0)
        v20 = (unsigned __int8 *)*(unsigned __int8 *)(v18 + 23);
      else
        v20 = *(unsigned __int8 **)(v18 + 8);
      v21 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
      v22 = (char)v21;
      if ((char)v21 < 0)
        v21 = v16[1];
      if (v20 != v21)
        goto LABEL_12;
      if (v22 >= 0)
        v23 = (unsigned __int8 *)v16;
      else
        v23 = *v16;
      if ((v19 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v18, v23, *(_QWORD *)(v18 + 8)))
          goto LABEL_12;
      }
      else if (*(_BYTE *)(v18 + 23))
      {
        v24 = 0;
        while (*(unsigned __int8 *)(v18 + v24) == v23[v24])
        {
          if (v19 == ++v24)
            goto LABEL_21;
        }
        goto LABEL_12;
      }
LABEL_21:
      v18 += 80;
      v16 += 10;
    }
LABEL_39:
    if (!v8 || v8 == a2[1])
    {
LABEL_41:
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v26 = *(unsigned int **)(v6 + 24);
      if (v26 == *(unsigned int **)(v6 + 32))
      {
        if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 56))(v25, 0) & 1) == 0)
          goto LABEL_45;
      }
      else if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 56))(v25, *v26) & 1) == 0)
      {
LABEL_45:
        v27 = *(unsigned int **)(v6 + 24);
        if (v27 == *(unsigned int **)(v6 + 32))
          v28 = 0;
        else
          v28 = *v27;
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
        if (*(char *)(v29 + 23) >= 0)
          v30 = v29;
        else
          v30 = *(_QWORD *)v29;
        rtc::StringFormat((rtc *)"Failed to remove send stream with ssrc %u from m-section with mid='%s'.", (char *)&v101, v28, v30);
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        v95 = 0;
        *(_OWORD *)a3 = v101;
        *(_QWORD *)(a3 + 16) = v102;
      }
    }
LABEL_4:
    v6 += 144;
    if (v6 != v7)
      continue;
    break;
  }
LABEL_54:
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v31 = *a2;
  v32 = a2[1];
  if (v31 != v32)
  {
    v34 = &v101 <= (__int128 *)"data" && (char *)&v101 + 4 > "data";
    v93 = v34;
    v36 = &v101 <= (__int128 *)"video" && (char *)&v101 + 5 > "video";
    v92 = v36;
    v38 = &v101 <= (__int128 *)"audio" && (char *)&v101 + 5 > "audio";
    v91 = v38;
    while (2)
    {
      v39 = *(const cricket::StreamParams **)(a1 + 176);
      v40 = *(const cricket::StreamParams **)(a1 + 184);
      if (v39 == v40)
      {
        v41 = (unint64_t)v99;
        v42 = v100;
LABEL_114:
        if (v41 >= v42)
        {
          v41 = (unint64_t)std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>((std::string **)&v98, v31);
          v58 = (std::string *)v41;
        }
        else
        {
          if (!v41)
            goto LABEL_166;
          v41 = (unint64_t)cricket::StreamParams::StreamParams((std::string *)v41, v31);
          v58 = (std::string *)(v41 + 144);
        }
        v99 = v58;
        if (v98 == v58)
          goto LABEL_166;
        data = (unsigned int *)v58[-5].__r_.__value_.__l.__data_;
        v60 = v58[-1].__r_.__value_.__l.__data_;
        size = v58[-1].__r_.__value_.__l.__size_;
        if (data == (unsigned int *)v58[-5].__r_.__value_.__l.__size_)
        {
          if (v60 == (std::string::pointer)size)
            goto LABEL_75;
          cricket::StreamParams::GenerateSsrcs(&v58[-6].__r_.__value_.__l.__data_, -858993459 * ((size - (unint64_t)v60) >> 4), 1, 0, *(rtc::UniqueRandomIdGenerator **)(a1 + 376));
        }
        else if (v60 != (std::string::pointer)size)
        {
          v62 = *data;
          v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
          if (*(char *)(v63 + 23) >= 0)
            v64 = v63;
          else
            v64 = *(_QWORD *)v63;
          rtc::StringFormat((rtc *)"Failed to add send stream: %u into m-section with mid='%s'. Stream has both SSRCs and RIDs.", (char *)&v101, v62, v64);
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_145;
          goto LABEL_74;
        }
        v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v65 + 48))(v65, v58 - 6))
        {
          v41 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
          if ((v41 & 1) == 0)
          {
            v66 = (unsigned int *)v58[-5].__r_.__value_.__l.__data_;
            if ((unsigned int *)v58[-5].__r_.__value_.__l.__size_ == v66)
              goto LABEL_166;
            v67 = *v66;
            v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
            if (*(char *)(v68 + 23) >= 0)
              v69 = v68;
            else
              v69 = *(_QWORD *)v68;
            v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
            switch((int)v41)
            {
              case 0:
                HIBYTE(v102) = 5;
                if (v91)
                  goto LABEL_166;
                v70 = "audio";
                goto LABEL_148;
              case 1:
                HIBYTE(v102) = 5;
                if (v92)
                  goto LABEL_166;
                v70 = "video";
LABEL_148:
                LODWORD(v101) = *(_DWORD *)v70;
                WORD2(v101) = *((unsigned __int8 *)v70 + 4);
                break;
              case 2:
                HIBYTE(v102) = 4;
                if (v93)
                  goto LABEL_166;
                strcpy((char *)&v101, "data");
                break;
              case 3:
                HIBYTE(v102) = 0;
                LOBYTE(v101) = 0;
                break;
              default:
                goto LABEL_167;
            }
            rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)__p, v69, &v101);
            if (SHIBYTE(v102) < 0)
              operator delete((void *)v101);
            v6 = v6 & 0xFFFFFFFF00000000 | 0x1559;
            v90 = __p;
            v88 = v67;
            v89 = " into ";
            v87 = "Add send stream ssrc: ";
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v75, v76, v77, v78, v79, v80, v81, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
            if (v97 < 0)
              operator delete(__p[0]);
          }
          goto LABEL_75;
        }
        v71 = (unsigned int *)v58[-5].__r_.__value_.__l.__data_;
        if (v71 == (unsigned int *)v58[-5].__r_.__value_.__l.__size_)
          v72 = 0;
        else
          v72 = *v71;
        v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
        if (*(char *)(v73 + 23) >= 0)
          v74 = v73;
        else
          v74 = *(_QWORD *)v73;
        rtc::StringFormat((rtc *)"Failed to add send stream ssrc: %u into m-section with mid='%s'", (char *)&v101, v72, v74, v87, v88, v89, v90);
        if (*(char *)(a3 + 23) < 0)
LABEL_145:
          operator delete(*(void **)a3);
LABEL_74:
        v95 = 0;
        *(_OWORD *)a3 = v101;
        *(_QWORD *)(a3 + 16) = v102;
        goto LABEL_75;
      }
LABEL_83:
      v45 = (__int32 *)*((_QWORD *)v31 + 3);
      if (v45 == *((__int32 **)v31 + 4)
        || (v46 = (__int32 *)*((_QWORD *)v39 + 3), v47 = (__int32 *)*((_QWORD *)v39 + 4), v46 == v47))
      {
        v49 = (unsigned __int8 **)*((_QWORD *)v31 + 15);
        v48 = (unsigned __int8 **)*((_QWORD *)v31 + 16);
        if (v49 == v48)
        {
          v50 = *((_QWORD *)v39 + 15);
          v51 = *((_QWORD *)v39 + 16);
          if (v50 != v51)
            goto LABEL_88;
        }
        else
        {
          v50 = *((_QWORD *)v39 + 15);
          v51 = *((_QWORD *)v39 + 16);
LABEL_88:
          if (v51 - v50 == (char *)v48 - (char *)v49)
          {
            while (v50 != v51)
            {
              v52 = *(unsigned __int8 *)(v50 + 23);
              if ((v52 & 0x80u) == 0)
                v53 = (unsigned __int8 *)*(unsigned __int8 *)(v50 + 23);
              else
                v53 = *(unsigned __int8 **)(v50 + 8);
              v54 = (unsigned __int8 *)*((unsigned __int8 *)v49 + 23);
              v55 = (char)v54;
              if ((char)v54 < 0)
                v54 = v49[1];
              if (v53 != v54)
                goto LABEL_82;
              if (v55 >= 0)
                v56 = (unsigned __int8 *)v49;
              else
                v56 = *v49;
              if ((v52 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v50, v56, *(_QWORD *)(v50 + 8)))
                  goto LABEL_82;
              }
              else if (*(_BYTE *)(v50 + 23))
              {
                v57 = 0;
                while (*(unsigned __int8 *)(v50 + v57) == v56[v57])
                {
                  if (v52 == ++v57)
                    goto LABEL_91;
                }
                goto LABEL_82;
              }
LABEL_91:
              v50 += 80;
              v49 += 10;
            }
LABEL_109:
            v41 = (unint64_t)v99;
            v42 = v100;
            if (!v39 || v39 == *(const cricket::StreamParams **)(a1 + 184))
              goto LABEL_114;
            if ((unint64_t)v99 < v100)
            {
              if (v99)
              {
                v99 = cricket::StreamParams::StreamParams(v99, v39) + 6;
                goto LABEL_75;
              }
LABEL_166:
              __break(1u);
LABEL_167:
              rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v41);
            }
            v99 = std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>((std::string **)&v98, v39);
LABEL_75:
            v31 = (const cricket::StreamParams *)((char *)v31 + 144);
            if (v31 == v32)
            {
              v82 = (std::string *)v98;
              v83 = (uint64_t)v94;
              if (v94 != &v98)
                goto LABEL_157;
              goto LABEL_158;
            }
            continue;
          }
        }
      }
      else
      {
        v43 = wmemchr(v46, *v45, v47 - v46);
        if (v43)
          v44 = v43;
        else
          v44 = v47;
        if (v44 != v47)
          goto LABEL_109;
      }
      break;
    }
LABEL_82:
    v39 = (const cricket::StreamParams *)((char *)v39 + 144);
    if (v39 == v40)
    {
      v39 = v40;
      goto LABEL_109;
    }
    goto LABEL_83;
  }
  v82 = 0;
  v83 = (uint64_t)v94;
  if (v94 != &v98)
  {
LABEL_157:
    std::vector<cricket::StreamParams>::__assign_with_size[abi:sn180100]<cricket::StreamParams*,cricket::StreamParams*>(v83, v82, v99, 0x8E38E38E38E38E39 * (((char *)v99 - (char *)v82) >> 4));
    v82 = (std::string *)v98;
  }
LABEL_158:
  if (v82)
  {
    v84 = v99;
    v85 = v82;
    if (v99 != v82)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v84[-6]);
      while (v84 != v82);
      v85 = v98;
    }
    v99 = v82;
    operator delete(v85);
  }
  return v95 & 1;
}

uint64_t cricket::BaseChannel::UpdateRemoteStreams_w(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v19;
  int v20;
  _BOOL4 v22;
  _BOOL4 v24;
  _BOOL4 v26;
  _BOOL4 v28;
  _BOOL4 v30;
  unsigned int *v31;
  unsigned int *v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int32 *v37;
  __int32 *v38;
  __int32 *v39;
  uint64_t v40;
  unsigned int *v41;
  uint64_t v42;
  uint64_t v43;
  rtc::webrtc_checks_impl *v44;
  const char *v45;
  unsigned int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL4 v68;
  _BOOL4 v70;
  _BOOL4 v72;
  _BOOL4 v74;
  unsigned int *v75;
  unsigned int *v76;
  uint64_t v77;
  uint64_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int *v93;
  int *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  unsigned int v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  _BYTE *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  BOOL v116;
  char *v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  uint64_t v124;
  __int128 v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int *v129;
  char *v130;
  unsigned int v131;
  char *v132;
  char *v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unsigned int v137;
  char *v138;
  char *v139;
  unsigned int v140;
  unsigned int v141;
  char *v142;
  unsigned int v143;
  _DWORD *v144;
  char *v145;
  uint64_t v146;
  __n128 *v147;
  __n128 *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  unint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unsigned int v157;
  char *v158;
  char *v159;
  void *v160;
  size_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int *v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int8 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void **v183;
  uint64_t v184;
  void *v185;
  void **v186;
  uint64_t v187;
  unint64_t v189;
  const char *v190;
  std::string *v191;
  const char *v192;
  std::string *v193;
  const char *v194;
  _BOOL4 v195;
  uint64_t v196;
  _BOOL4 v197;
  _BOOL4 v198;
  _BOOL4 v199;
  uint64_t v200;
  _BOOL4 v201;
  int v203;
  uint64_t v204;
  uint64_t v205;
  _BOOL4 v206;
  uint64_t v207;
  unint64_t v208;
  _BOOL4 v211;
  char *v212;
  _BOOL4 v213;
  int *v214;
  _BOOL4 v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  void *__p[2];
  char v220;
  std::string v221;
  char *v222;
  char *v223;
  void **v224;
  char v225;
  __int128 v226;
  uint64_t v227;
  char v228;
  void *v229;
  char v230;
  void *v231;
  void *v232;
  void *v233;
  void *v234;

  v5 = a1;
  v195 = *(_DWORD *)(a2 + 124) >= 2u
      && (v6 = *(_QWORD *)(a1 + 352),
          v7 = *(_QWORD *)(a1 + 360),
          *(_QWORD *)(a1 + 360) = v6,
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(a1 + 232),
          v6 != v7)
      && *(_BYTE *)(a1 + 170) != 0;
  v196 = a2 + 96;
  v8 = *(_QWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 96);
  if (v9 != v8)
  {
    v9 = *(_QWORD *)(a2 + 96);
    while (*(_QWORD *)(v9 + 24) != *(_QWORD *)(v9 + 32))
    {
      v9 += 144;
      if (v9 == v8)
      {
        v10 = *(_QWORD *)(a2 + 104);
        v11 = *(_QWORD *)(a2 + 96);
        v12 = 0;
        goto LABEL_16;
      }
    }
  }
  v11 = *(_QWORD *)(a2 + 96);
  v10 = *(_QWORD *)(a2 + 104);
  v13 = v9 == v8 || v9 == 0;
  v12 = !v13;
LABEL_16:
  v14 = *(_QWORD *)(a1 + 200);
  v200 = a1 + 200;
  v15 = *(_QWORD *)(a1 + 208);
  v16 = v14;
  if (v14 != v15)
  {
    v16 = *(_QWORD *)(a1 + 200);
    while (*(_QWORD *)(v16 + 24) != *(_QWORD *)(v16 + 32))
    {
      v16 += 144;
      if (v16 == v15)
      {
        v17 = 0;
        goto LABEL_27;
      }
    }
  }
  v17 = v16 != v15 && v16 != 0;
LABEL_27:
  v203 = v17;
  if (v14 != v15)
  {
    v19 = &v226 <= (__int128 *)"data" && (char *)&v226 + 4 > "data";
    v20 = v19;
    v217 = v20;
    v22 = &v226 <= (__int128 *)"video" && (char *)&v226 + 5 > "video";
    v215 = v22;
    v24 = &v226 <= (__int128 *)"audio" && (char *)&v226 + 5 > "audio";
    v213 = v24;
    v26 = &v226 <= (__int128 *)"data" && (char *)&v226 + 4 > "data";
    v211 = v26;
    v28 = &v226 <= (__int128 *)"video" && (char *)&v226 + 5 > "video";
    LODWORD(v208) = v28;
    v30 = &v226 <= (__int128 *)"audio" && (char *)&v226 + 5 > "audio";
    v206 = v30;
    while (1)
    {
      v31 = *(unsigned int **)(v14 + 24);
      v32 = *(unsigned int **)(v14 + 32);
      v33 = v31 == v32;
      if (v31 == v32)
        v34 = v12;
      else
        v34 = 1;
      if ((v34 & 1) != 0)
      {
        if (v33)
          goto LABEL_66;
        v35 = *(_QWORD *)(a2 + 96);
        v36 = *(_QWORD *)(a2 + 104);
        if (v35 != v36)
        {
          v3 = *v31;
          while (1)
          {
            v37 = *(__int32 **)(v35 + 32);
            v38 = wmemchr(*(__int32 **)(v35 + 24), v3, ((uint64_t)v37 - *(_QWORD *)(v35 + 24)) >> 2);
            v39 = v38 ? v38 : v37;
            if (v39 != v37)
              break;
            v35 += 144;
            if (v35 == v36)
            {
              v35 = v36;
              break;
            }
          }
          v5 = a1;
          if (v35)
          {
            if (v35 != *(_QWORD *)(a2 + 104))
              goto LABEL_66;
          }
        }
        v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
        v41 = *(unsigned int **)(v14 + 24);
        if (v41 == *(unsigned int **)(v14 + 32))
        {
          if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 48))(v40, 0))
          {
LABEL_313:
            v176 = *(unsigned int **)(v14 + 24);
            if (v176 == *(unsigned int **)(v14 + 32))
              v177 = 0;
            else
              v177 = *v176;
            v180 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
            if (*(char *)(v180 + 23) >= 0)
              v181 = v180;
            else
              v181 = *(_QWORD *)v180;
            rtc::StringFormat((rtc *)"Failed to remove remote stream with ssrc %u from m-section with mid='%s'.", (char *)&v226, v177, v181);
            v182 = a3;
            if (*(char *)(a3 + 23) < 0)
            {
              operator delete(*(void **)a3);
              v182 = a3;
            }
            v167 = 0;
            *(_OWORD *)v182 = v226;
            *(_QWORD *)(v182 + 16) = v227;
            return v167;
          }
        }
        else if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v40 + 48))(v40, *v41))
        {
          goto LABEL_313;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          goto LABEL_66;
        v17 = v17 & 0xFFFFFFFF00000000 | 0x16A9;
        v222 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc";
        v223 = (char *)v17;
        v224 = __p;
        v46 = *(unsigned int **)(v14 + 24);
        v3 = v46 == *(unsigned int **)(v14 + 32) ? 0 : *v46;
        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
        v56 = *(char *)(v55 + 23) >= 0 ? v55 : *(_QWORD *)v55;
        v44 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24));
        switch((int)v44)
        {
          case 0:
            HIBYTE(v227) = 5;
            if (v206)
              goto LABEL_355;
            v57 = "audio";
            goto LABEL_115;
          case 1:
            HIBYTE(v227) = 5;
            if ((_DWORD)v208)
              goto LABEL_355;
            v57 = "video";
LABEL_115:
            LODWORD(v226) = *(_DWORD *)v57;
            WORD2(v226) = *((unsigned __int8 *)v57 + 4);
            break;
          case 2:
            HIBYTE(v227) = 4;
            if (v211)
              goto LABEL_355;
            strcpy((char *)&v226, "data");
            break;
          case 3:
            HIBYTE(v227) = 0;
            LOBYTE(v226) = 0;
            break;
          default:
            goto LABEL_372;
        }
        rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&v221, v56, &v226, v190, v191, v192);
        if (SHIBYTE(v227) < 0)
          operator delete((void *)v226);
        v193 = &v221;
        v194 = ".";
        v191 = (std::string *)v3;
        v192 = " from ";
        v189 = (unint64_t)v223;
        v190 = "Remove remote ssrc: ";
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v58, v59, v60, v61, v62, v63, v64, (uint64_t)v222);
        if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_66;
        v54 = (char *)v221.__r_.__value_.__r.__words[0];
      }
      else
      {
        v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 56))(v42);
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          goto LABEL_66;
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
        v3 = *(char *)(v43 + 23) >= 0 ? v43 : *(_QWORD *)v43;
        v44 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24));
        switch((int)v44)
        {
          case 0:
            HIBYTE(v227) = 5;
            if (v213)
              goto LABEL_355;
            v45 = "audio";
            goto LABEL_98;
          case 1:
            HIBYTE(v227) = 5;
            if (v215)
              goto LABEL_355;
            v45 = "video";
LABEL_98:
            LODWORD(v226) = *(_DWORD *)v45;
            WORD2(v226) = *((unsigned __int8 *)v45 + 4);
            break;
          case 2:
            HIBYTE(v227) = 4;
            if (v217)
              goto LABEL_355;
            strcpy((char *)&v226, "data");
            break;
          case 3:
            HIBYTE(v227) = 0;
            LOBYTE(v226) = 0;
            break;
          default:
LABEL_372:
            rtc::webrtc_checks_impl::UnreachableCodeReached(v44);
        }
        rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&v222, v3, &v226, v190, v191, v192, v193, v194);
        if (SHIBYTE(v227) < 0)
          operator delete((void *)v226);
        v4 = v4 & 0xFFFFFFFF00000000 | 0x1681;
        v191 = (std::string *)&v222;
        v192 = ".";
        v189 = v4;
        v190 = "Reset unsignaled remote stream for ";
        rtc::webrtc_logging_impl::Log("\r\t\n\t", v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
        if ((SHIBYTE(v224) & 0x80000000) == 0)
          goto LABEL_66;
        v54 = v222;
      }
      operator delete(v54);
LABEL_66:
      v14 += 144;
      if (v14 == v15)
      {
        v66 = *(_QWORD *)(a2 + 96);
        v65 = *(_QWORD *)(a2 + 104);
        LODWORD(v17) = v203;
        v222 = 0;
        v223 = 0;
        v224 = 0;
        if (v66 != v65)
          goto LABEL_124;
LABEL_274:
        v158 = 0;
        v159 = 0;
        v160 = *(void **)(v5 + 328);
        v161 = *(_QWORD *)(v5 + 336) - (_QWORD)v160;
        if (*(void **)(v5 + 336) != v160)
        {
LABEL_278:
          if (v160)
          {
            *(_QWORD *)(v5 + 336) = v160;
            operator delete(v160);
            v159 = v222;
            v158 = v223;
          }
          *(_QWORD *)(v5 + 328) = v159;
          *(_QWORD *)(v5 + 336) = v158;
          *(_QWORD *)(v5 + 344) = v224;
          v223 = 0;
          v224 = 0;
          v222 = 0;
          v162 = v200;
          goto LABEL_281;
        }
LABEL_277:
        if (memcmp(v160, v159, v161))
          goto LABEL_278;
        v162 = v200;
        if (!v195)
        {
LABEL_288:
          if (v162 != v196)
            std::vector<cricket::StreamParams>::__assign_with_size[abi:sn180100]<cricket::StreamParams*,cricket::StreamParams*>(v162, *(std::string **)(a2 + 96), *(std::string **)(a2 + 104), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 4));
          *(_DWORD *)(v5 + 228) = *(_DWORD *)(a2 + 124);
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
          v167 = 1;
          v168 = v222;
          if (v222)
            goto LABEL_368;
          return v167;
        }
LABEL_281:
        v163 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v163 + 96))(v163);
        v164 = *(_QWORD *)(v5 + 48);
        *(_QWORD *)&v226 = v5;
        webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria((std::string *)((char *)&v226 + 8), (__int128 *)(v5 + 280));
        LOBYTE(__p[0]) = 0;
        v221.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        v221.__r_.__value_.__l.__size_ = (std::string::size_type)&v226;
        (*(void (**)(uint64_t, std::string *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v164 + 96))(v164, &v221, rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0,BOOL,void>(cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>, &v225);
        v165 = LOBYTE(__p[0]);
        if (v233)
        {
          v234 = v233;
          operator delete(v233);
        }
        if (v231)
        {
          v232 = v231;
          operator delete(v231);
        }
        if (v230 < 0)
        {
          operator delete(v229);
          if (v228 < 0)
            goto LABEL_303;
        }
        else
        {
          if ((v228 & 0x80000000) == 0)
            goto LABEL_287;
LABEL_303:
          operator delete(*((void **)&v226 + 1));
        }
LABEL_287:
        v166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 104))(v166);
        if (!v165)
        {
          v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
          if (*(char *)(v173 + 23) >= 0)
            v174 = v173;
          else
            v174 = *(_QWORD *)v173;
          rtc::StringFormat((rtc *)"Failed to set up audio demuxing for mid='%s'.", (char *)&v226, v174, v189, v190, v191, v192, v193);
          v175 = a3;
          if (*(char *)(a3 + 23) < 0)
          {
            operator delete(*(void **)a3);
            v175 = a3;
          }
          v167 = 0;
          *(_OWORD *)v175 = v226;
          *(_QWORD *)(v175 + 16) = v227;
          v168 = v222;
          if (v222)
            goto LABEL_368;
          return v167;
        }
        goto LABEL_288;
      }
    }
  }
  v66 = v11;
  v65 = v10;
  v222 = 0;
  v223 = 0;
  v224 = 0;
  if (v11 == v10)
    goto LABEL_274;
LABEL_124:
  v68 = &v221 <= (std::string *)"unsignaled" && (char *)&v221.__r_.__value_.__r.__words[1] + 2 > "unsignaled";
  v201 = v68;
  v70 = &v226 <= (__int128 *)"data" && (char *)&v226 + 4 > "data";
  v199 = v70;
  v72 = &v226 <= (__int128 *)"video" && (char *)&v226 + 5 > "video";
  v198 = v72;
  v74 = &v226 <= (__int128 *)"audio" && (char *)&v226 + 5 > "audio";
  v197 = v74;
  v204 = v65;
  while (1)
  {
    v75 = *(unsigned int **)(v66 + 24);
    v76 = *(unsigned int **)(v66 + 32);
    if (((v75 == v76) & ~(_DWORD)v17) == 0)
    {
      if (v75 == v76)
      {
        v3 = 0;
        v77 = *(_QWORD *)(v5 + 200);
        v78 = *(_QWORD *)(v5 + 208);
        if (v77 != v78)
        {
LABEL_157:
          while (1)
          {
            v79 = *(__int32 **)(v77 + 32);
            v80 = wmemchr(*(__int32 **)(v77 + 24), v3, ((uint64_t)v79 - *(_QWORD *)(v77 + 24)) >> 2);
            v81 = v80 ? v80 : v79;
            if (v81 != v79)
              break;
            v77 += 144;
            if (v77 == v78)
            {
              v77 = v78;
              break;
            }
          }
          v65 = v204;
          if (v77 && v77 != *(_QWORD *)(v5 + 208))
          {
LABEL_187:
            v94 = *(int **)(v66 + 24);
            v93 = *(int **)(v66 + 32);
            if (v94 == v93)
              goto LABEL_151;
            goto LABEL_188;
          }
        }
      }
      else
      {
        v3 = *v75;
        v77 = *(_QWORD *)(v5 + 200);
        v78 = *(_QWORD *)(v5 + 208);
        if (v77 != v78)
          goto LABEL_157;
      }
    }
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 40))(v82, v66))
      break;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_187;
    v83 = *(unsigned int **)(v66 + 24);
    if (v83 == *(unsigned int **)(v66 + 32))
    {
      *((_BYTE *)&v221.__r_.__value_.__s + 23) = 10;
      if (v201)
        goto LABEL_355;
      strcpy((char *)&v221, "unsignaled");
    }
    else
    {
      std::to_string(&v221, *v83);
    }
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    if (*(char *)(v84 + 23) >= 0)
      v3 = v84;
    else
      v3 = *(_QWORD *)v84;
    v44 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24));
    switch((int)v44)
    {
      case 0:
        HIBYTE(v227) = 5;
        if (v197)
          goto LABEL_355;
        v85 = "audio";
        goto LABEL_179;
      case 1:
        HIBYTE(v227) = 5;
        if (v198)
          goto LABEL_355;
        v85 = "video";
LABEL_179:
        LODWORD(v226) = *(_DWORD *)v85;
        WORD2(v226) = *((unsigned __int8 *)v85 + 4);
        break;
      case 2:
        HIBYTE(v227) = 4;
        if (v199)
          goto LABEL_355;
        strcpy((char *)&v226, "data");
        break;
      case 3:
        HIBYTE(v227) = 0;
        LOBYTE(v226) = 0;
        break;
      default:
        goto LABEL_372;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)__p, v3, &v226, v190, v191, v192, v193);
    if (SHIBYTE(v227) < 0)
      operator delete((void *)v226);
    v193 = (std::string *)__p;
    v191 = &v221;
    v192 = " to ";
    v189 = v208 & 0xFFFFFFFF00000000 | 0x1751;
    v190 = "Add remote ssrc: ";
    v208 = v189;
    rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v86, v87, v88, v89, v90, v91, v92, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (v220 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_187;
    }
    else if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_187;
    }
    operator delete(v221.__r_.__value_.__l.__data_);
    v94 = *(int **)(v66 + 24);
    v93 = *(int **)(v66 + 32);
    if (v94 == v93)
      goto LABEL_151;
LABEL_188:
    v95 = v223;
    if (v94 + 1 != v93)
    {
      v96 = v222;
      v205 = v223 - v222;
      v207 = v66;
      v97 = (v223 - v222) >> 2;
      v3 = (unint64_t)v223;
      v98 = v222;
      v99 = v97;
      v212 = v222;
      v214 = v93;
      v100 = &v222[4 * v97];
      v101 = *v94;
      if (v223 != v222)
        goto LABEL_223;
LABEL_190:
      while (v3 < (unint64_t)v224)
      {
        if (!v3)
          goto LABEL_355;
        *(_DWORD *)v3 = v101;
        v102 = (char *)(v3 + 4);
LABEL_212:
        v223 = v102;
        if ((v100 - v98) >> 2 < v99)
          v99 = (v100 - v98) >> 2;
        v3 = (unint64_t)v102;
        if (++v94 == v93)
        {
LABEL_231:
          v132 = v222;
          v133 = &v222[4 * v97];
          v134 = (uint64_t)(v3 - (_QWORD)v133) >> 2;
          if ((uint64_t)(v3 - (_QWORD)v133) < 513)
          {
LABEL_234:
            std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(&v132[4 * v97], (__n128 *)v3, (uint64_t)(v3 - (_QWORD)v133) >> 2, 0, 0);
            v13 = v133 == (char *)v3;
            v5 = a1;
            if (!v13)
              goto LABEL_244;
          }
          else
          {
            while (1)
            {
              v135 = (char *)operator new(4 * v134, MEMORY[0x24BEDB6B8]);
              if (v135)
                break;
              v19 = v134 > 1;
              v134 >>= 1;
              if (!v19)
                goto LABEL_234;
            }
            v138 = v135;
            std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(&v132[4 * v97], (__n128 *)v3, (uint64_t)(v3 - (_QWORD)v133) >> 2, v135, v134);
            operator delete(v138);
            v13 = v133 == (char *)v3;
            v5 = a1;
            if (!v13)
            {
LABEL_244:
              v139 = &v132[4 * v97 + 4];
              while (v139 != (char *)v3)
              {
                v141 = *((_DWORD *)v139 - 1);
                v140 = *(_DWORD *)v139;
                v139 += 4;
                if (v141 >= v140)
                {
                  v142 = v139 - 8;
                  while (v139 != (char *)v3)
                  {
                    v143 = *(_DWORD *)v139;
                    if (v141 < *(_DWORD *)v139)
                    {
                      *((_DWORD *)v142 + 1) = v143;
                      v142 += 4;
                      v141 = v143;
                    }
                    v139 += 4;
                  }
                  v144 = v142 + 4;
                  if ((unint64_t)(v142 + 4) > v3)
                    goto LABEL_355;
                  if (v142 + 4 != (char *)v3)
                  {
                    v145 = &v223[-v3];
                    if (v223 != (char *)v3)
                      memmove(v142 + 4, (const void *)v3, (size_t)&v223[-v3]);
                    v223 = &v145[(_QWORD)v144];
                  }
                  break;
                }
              }
            }
          }
          v146 = 4 * v99;
          v3 = (unint64_t)v223;
          v147 = (__n128 *)&v222[4 * v99];
          v148 = (__n128 *)&v222[4 * v97];
          v66 = v207;
          v149 = (v205 - v146) >> 2;
          if ((v223 - (char *)v148) >> 2 >= v149)
            v150 = (v205 - v146) >> 2;
          else
            v150 = (v223 - (char *)v148) >> 2;
          if (v150 < 1)
          {
LABEL_149:
            std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(v147, v148, (__n128 *)v3, v149, (uint64_t)(v3 - (_QWORD)v148) >> 2, 0, 0);
          }
          else
          {
            while (1)
            {
              v151 = (char *)operator new(4 * v150, MEMORY[0x24BEDB6B8]);
              if (v151)
                break;
              v19 = (unint64_t)v150 > 1;
              v150 = (unint64_t)v150 >> 1;
              if (!v19)
                goto LABEL_149;
            }
            v152 = v151;
            std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(v147, v148, (__n128 *)v3, v149, (uint64_t)(v3 - (_QWORD)v148) >> 2, v151, v150);
            operator delete(v152);
          }
          LODWORD(v17) = v203;
          v65 = v204;
          goto LABEL_151;
        }
        while (1)
        {
          v98 = v222;
          v100 = &v222[4 * v97];
          v101 = *v94;
          if (v95 == v96)
            break;
LABEL_223:
          v126 = v98;
          v127 = v97;
          do
          {
            v128 = v127 >> 1;
            v129 = (unsigned int *)&v126[4 * (v127 >> 1)];
            v131 = *v129;
            v130 = (char *)(v129 + 1);
            v127 += ~(v127 >> 1);
            if (v131 < v101)
              v126 = v130;
            else
              v127 = v128;
          }
          while (v127);
          if (v126 == v100)
            goto LABEL_190;
          v100 = v126;
          if (*(_DWORD *)v126 > v101)
            goto LABEL_190;
          if (++v94 == v93)
            goto LABEL_231;
        }
      }
      v218 = v99;
      v103 = v97;
      v104 = (uint64_t)(v3 - (_QWORD)v98) >> 2;
      v105 = v104 + 1;
      if ((unint64_t)(v104 + 1) >> 62)
        abort();
      v106 = (char *)v224 - v98;
      if (((char *)v224 - v98) >> 1 > v105)
        v105 = v106 >> 1;
      v107 = (unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL;
      v108 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v107)
        v108 = v105;
      if (!v108)
      {
LABEL_355:
        __break(1u);
LABEL_356:
        HIBYTE(v227) = 0;
        LOBYTE(v226) = 0;
        goto LABEL_357;
      }
      if (v108 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v216 = 4 * v108;
      v109 = operator new(4 * v108);
      v110 = &v109[4 * v104];
      *(_DWORD *)v110 = v101;
      v102 = v110 + 4;
      if ((char *)v3 == v98)
      {
        v97 = v103;
        v99 = v218;
        v222 = v110;
        v223 = v110 + 4;
        v224 = (void **)&v109[v216];
        if (v98)
          goto LABEL_210;
      }
      else
      {
        v111 = v3 - (_QWORD)v98 - 4;
        if (v111 < 0xBC
          || ((v112 = (v3 - 4 - (_QWORD)v98) & 0xFFFFFFFFFFFFFFFCLL,
               v113 = (unint64_t)&v109[v3 - (_QWORD)v98 - 4],
               v114 = v113 - v112,
               v115 = v3 - 4 - v112,
               v114 <= v113)
            ? (v116 = v115 > v3 - 4)
            : (v116 = 1),
              v116 || (unint64_t)(v98 - v109) < 0x20))
        {
          v117 = (char *)v3;
          v97 = v103;
          v118 = v216;
          goto LABEL_208;
        }
        v120 = (v111 >> 2) + 1;
        v121 = 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
        v117 = (char *)(v3 - v121);
        v110 -= v121;
        v122 = &v109[4 * v104 - 16];
        v123 = (__int128 *)(v3 - 16);
        v124 = v120 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v125 = *v123;
          *(v122 - 1) = *(v123 - 1);
          *v122 = v125;
          v122 -= 2;
          v123 -= 2;
          v124 -= 8;
        }
        while (v124);
        v97 = v103;
        v118 = v216;
        if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_208:
            v119 = *((_DWORD *)v117 - 1);
            v117 -= 4;
            *((_DWORD *)v110 - 1) = v119;
            v110 -= 4;
          }
          while (v117 != v98);
        }
        v222 = v110;
        v223 = v102;
        v224 = (void **)&v109[v118];
        v99 = v218;
        if (v98)
LABEL_210:
          operator delete(v98);
      }
      v96 = v212;
      v93 = v214;
      goto LABEL_212;
    }
    v136 = v222;
    if (v222 == v223 || (v137 = *v94, *((_DWORD *)v223 - 1) < *v94))
    {
      v136 = v223;
    }
    else
    {
      v153 = (v223 - v222) >> 2;
      do
      {
        v154 = v153 >> 1;
        v155 = &v136[4 * (v153 >> 1)];
        v157 = *(_DWORD *)v155;
        v156 = v155 + 4;
        v153 += ~(v153 >> 1);
        if (v157 < v137)
          v136 = v156;
        else
          v153 = v154;
      }
      while (v153);
      if (v136 != v223 && v137 >= *(_DWORD *)v136)
        goto LABEL_151;
    }
    std::vector<unsigned int>::emplace<unsigned int const&>(&v222, (uint64_t)v136, v94);
LABEL_151:
    v66 += 144;
    if (v66 == v65)
    {
      v159 = v222;
      v158 = v223;
      v160 = *(void **)(v5 + 328);
      v161 = *(_QWORD *)(v5 + 336) - (_QWORD)v160;
      if (v161 != v223 - v222)
        goto LABEL_278;
      goto LABEL_277;
    }
  }
  v169 = *(unsigned int **)(v66 + 24);
  if (v169 == *(unsigned int **)(v66 + 32))
  {
    v178 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    if (*(char *)(v178 + 23) >= 0)
      v3 = v178;
    else
      v3 = *(_QWORD *)v178;
    v44 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24));
    switch((int)v44)
    {
      case 0:
        HIBYTE(v227) = 5;
        if (&v226 <= (__int128 *)"audio" && (char *)&v226 + 5 > "audio")
          goto LABEL_355;
        LODWORD(v226) = *(_DWORD *)"audio";
        v179 = cricket::kMediaTypeAudio[4];
        goto LABEL_351;
      case 1:
        HIBYTE(v227) = 5;
        if (&v226 <= (__int128 *)"video" && (char *)&v226 + 5 > "video")
          goto LABEL_355;
        LODWORD(v226) = *(_DWORD *)"video";
        v179 = cricket::kMediaTypeVideo[4];
LABEL_351:
        WORD2(v226) = v179;
        break;
      case 2:
        HIBYTE(v227) = 4;
        if (&v226 <= (__int128 *)"data" && (char *)&v226 + 4 > "data")
          goto LABEL_355;
        strcpy((char *)&v226, "data");
        break;
      case 3:
        goto LABEL_356;
      default:
        goto LABEL_372;
    }
LABEL_357:
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)__p, v3, &v226, v190, v191, v192, v193);
    if (SHIBYTE(v227) < 0)
      operator delete((void *)v226);
    if (v220 >= 0)
      v186 = __p;
    else
      v186 = (void **)__p[0];
    rtc::StringFormat((rtc *)"Failed to add remote stream ssrc: %s to %s", (char *)&v226, "unsignaled", v186);
    v187 = a3;
    if (*(char *)(a3 + 23) < 0)
    {
      operator delete(*(void **)a3);
      v187 = a3;
    }
    *(_OWORD *)v187 = v226;
    *(_QWORD *)(v187 + 16) = v227;
    HIBYTE(v227) = 0;
    LOBYTE(v226) = 0;
    if (v220 < 0)
    {
      v185 = __p[0];
LABEL_366:
      operator delete(v185);
    }
  }
  else
  {
    v3 = (unint64_t)&v221;
    std::to_string(&v221, *v169);
    if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v3 = v221.__r_.__value_.__r.__words[0];
    v170 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5);
    if (*(char *)(v170 + 23) >= 0)
      v171 = v170;
    else
      v171 = *(_QWORD *)v170;
    v44 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 24) + 32))(*(_QWORD *)(v5 + 24));
    switch((int)v44)
    {
      case 0:
        HIBYTE(v227) = 5;
        if (&v226 <= (__int128 *)"audio" && (char *)&v226 + 5 > "audio")
          goto LABEL_355;
        LODWORD(v226) = *(_DWORD *)"audio";
        v172 = cricket::kMediaTypeAudio[4];
        goto LABEL_332;
      case 1:
        HIBYTE(v227) = 5;
        if (&v226 <= (__int128 *)"video" && (char *)&v226 + 5 > "video")
          goto LABEL_355;
        LODWORD(v226) = *(_DWORD *)"video";
        v172 = cricket::kMediaTypeVideo[4];
LABEL_332:
        WORD2(v226) = v172;
        break;
      case 2:
        HIBYTE(v227) = 4;
        if (&v226 <= (__int128 *)"data" && (char *)&v226 + 4 > "data")
          goto LABEL_355;
        strcpy((char *)&v226, "data");
        break;
      case 3:
        HIBYTE(v227) = 0;
        LOBYTE(v226) = 0;
        break;
      default:
        goto LABEL_372;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)__p, v171, &v226, v190, v191, v192, v193);
    if (SHIBYTE(v227) < 0)
      operator delete((void *)v226);
    if (v220 >= 0)
      v183 = __p;
    else
      v183 = (void **)__p[0];
    rtc::StringFormat((rtc *)"Failed to add remote stream ssrc: %s to %s", (char *)&v226, v3, v183);
    v184 = a3;
    if (*(char *)(a3 + 23) < 0)
    {
      operator delete(*(void **)a3);
      v184 = a3;
    }
    *(_OWORD *)v184 = v226;
    *(_QWORD *)(v184 + 16) = v227;
    HIBYTE(v227) = 0;
    LOBYTE(v226) = 0;
    if (v220 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
    {
      v185 = (void *)v221.__r_.__value_.__r.__words[0];
      goto LABEL_366;
    }
  }
  v167 = 0;
  v168 = v222;
  if (v222)
  {
LABEL_368:
    v223 = v168;
    operator delete(v168);
  }
  return v167;
}

uint64_t cricket::BaseChannel::MaybeAddHandledPayloadType(cricket::BaseChannel *this, unsigned __int8 a2)
{
  unsigned int v3;
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char **v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  unsigned int v19;
  char v21;
  unsigned __int8 v22;

  if (*((_BYTE *)this + 170))
  {
    v3 = a2;
    v22 = a2;
    v4 = (char *)*((_QWORD *)this + 44);
    v5 = (char *)*((_QWORD *)this + 45);
    v6 = v5 - v4;
    if (v5 != v4)
    {
      do
      {
        v7 = v6 >> 1;
        v8 = &v4[v6 >> 1];
        v10 = *v8;
        v9 = v8 + 1;
        v6 += ~(v6 >> 1);
        if (v10 < v3)
          v4 = v9;
        else
          v6 = v7;
      }
      while (v6);
    }
    if (v4 == v5 || *v4 > v3)
    {
      std::vector<unsigned char>::emplace<unsigned char>((char **)this + 44, v4, (char *)&v22);
      v11 = 1;
      v12 = (char *)*((_QWORD *)this + 29);
      v13 = (char *)*((_QWORD *)this + 30);
      v14 = (char **)((char *)this + 232);
      v21 = v3;
      v15 = v13 - v12;
      if (v13 == v12)
        goto LABEL_16;
    }
    else
    {
      v11 = 0;
      v12 = (char *)*((_QWORD *)this + 29);
      v13 = (char *)*((_QWORD *)this + 30);
      v14 = (char **)((char *)this + 232);
      v21 = v3;
      v15 = v13 - v12;
      if (v13 == v12)
        goto LABEL_16;
    }
  }
  else
  {
    v11 = 0;
    v3 = a2;
    v12 = (char *)*((_QWORD *)this + 29);
    v13 = (char *)*((_QWORD *)this + 30);
    v14 = (char **)((char *)this + 232);
    v21 = v3;
    v15 = v13 - v12;
    if (v13 == v12)
      goto LABEL_16;
  }
  do
  {
    v16 = v15 >> 1;
    v17 = &v12[v15 >> 1];
    v19 = *v17;
    v18 = v17 + 1;
    v15 += ~(v15 >> 1);
    if (v19 < v3)
      v12 = v18;
    else
      v15 = v16;
  }
  while (v15);
LABEL_16:
  if (v12 == v13 || *v12 > v3)
    std::vector<unsigned char>::emplace<unsigned char>(v14, v12, &v21);
  return v11;
}

void cricket::VoiceChannel::~VoiceChannel(cricket::VoiceChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &off_24C0B0A10;
  *((_QWORD *)this + 1) = &unk_24C0B0B00;
  *((_QWORD *)this + 2) = &unk_24C0B0B38;
  cricket::BaseChannel::DisableMedia_w((uint64_t)this);
  *((_QWORD *)this + 70) = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 74);
  if (v2)
  {
    v3 = *((_QWORD *)this + 75);
    v4 = (void *)*((_QWORD *)this + 74);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 74);
    }
    *((_QWORD *)this + 75) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 71);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 72);
    v7 = (void *)*((_QWORD *)this + 71);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 71);
    }
    *((_QWORD *)this + 72) = v5;
    operator delete(v7);
  }
  cricket::AudioSenderParameter::~AudioSenderParameter((void **)this + 48);
  cricket::BaseChannel::~BaseChannel(this);
}

{
  cricket::VoiceChannel::~VoiceChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::AudioReceiverParameters::~AudioReceiverParameters(cricket::AudioReceiverParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'cricket::VoiceChannel::~VoiceChannel(cricket::VoiceChannel *this)
{
  cricket::VoiceChannel::~VoiceChannel((cricket::VoiceChannel *)((char *)this - 8));
}

{
  cricket::VoiceChannel::~VoiceChannel((cricket::VoiceChannel *)((char *)this - 16));
}

{
  cricket::VoiceChannel::~VoiceChannel((cricket::VoiceChannel *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  cricket::VoiceChannel::~VoiceChannel((cricket::VoiceChannel *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::VoiceChannel::UpdateMediaSendRecvState_w(cricket::VoiceChannel *this)
{
  _BOOL8 v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  rtc::webrtc_checks_impl *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  char v18;
  char v19;
  _QWORD v20[4];
  uint64_t *v21;
  void *v22[2];
  char v23;

  if (*((_BYTE *)this + 168))
    v2 = (*((_DWORD *)this + 56) & 0xFFFFFFFD) == 0;
  else
    v2 = 0;
  v3 = (*(uint64_t (**)(cricket::VoiceChannel *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 176))(v3, v2);
  v4 = *((_BYTE *)this + 168)
    && (*((_DWORD *)this + 57) & 0xFFFFFFFD) == 0
    && *((_DWORD *)this + 56) <= 1u
    && *((_BYTE *)this + 162) != 0;
  v5 = (*(uint64_t (**)(cricket::VoiceChannel *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v5 + 192))(v5, v4);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v20[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc";
    v20[1] = 6873;
    v20[2] = &v19;
    v20[3] = "Changing voice state, recv=";
    v21 = v20;
    v6 = (*(uint64_t (**)(cricket::VoiceChannel *))(*(_QWORD *)this + 96))(this);
    if (*(char *)(v6 + 23) >= 0)
      v7 = v6;
    else
      v7 = *(_QWORD *)v6;
    v8 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    switch((int)v8)
    {
      case 0:
        v23 = 5;
        v9 = "audio";
        if (v22 > (void **)"audio")
          goto LABEL_21;
        goto LABEL_20;
      case 1:
        v23 = 5;
        v9 = "video";
        if (v22 > (void **)"video")
          goto LABEL_21;
LABEL_20:
        if ((char *)v22 + 5 > v9)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v8);
        }
LABEL_21:
        LODWORD(v22[0]) = *(_DWORD *)v9;
        WORD2(v22[0]) = *((unsigned __int8 *)v9 + 4);
        break;
      case 2:
        v23 = 4;
        if (v22 <= (void **)"data" && (char *)v22 + 4 > "data")
          goto LABEL_28;
        strcpy((char *)v22, "data");
        break;
      case 3:
        v23 = 0;
        LOBYTE(v22[0]) = 0;
        break;
      default:
        goto LABEL_29;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v7, v22);
    if (v23 < 0)
      operator delete(v22[0]);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, *v21);
    if (v18 < 0)
      operator delete(__p);
  }
}

uint64_t cricket::VoiceChannel::SetLocalContent_w(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (***v8)(cricket::AudioReceiverParameters *__hidden);
  uint64_t v9;
  char v10;
  uint64_t updated;
  void **v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  const cricket::Codec *v20;
  void *v21;
  const cricket::Codec *v22;
  void (***v23)(char *);
  void (**v24)(char *);
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void *v33[2];
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  void (**v38)(cricket::AudioReceiverParameters *__hidden);
  void *v39;
  const cricket::Codec *v40;
  void *__p;
  _BYTE *v42;
  _BYTE v43[3];
  __int128 v44;
  uint64_t v45;

  webrtc::RtpExtension::DeduplicateHeaderExtensions((uint64_t *)(a2 + 64), a1[41], (uint64_t)&v44);
  v7 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v7 + 104))(v7, *(_DWORD *)(a2 + 200) != 0);
  v8 = (void (***)(cricket::AudioReceiverParameters *__hidden))(a1 + 140);
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&v38, (const cricket::MediaChannelParameters *)(a1 + 140));
  v38 = off_24C0B0CB0;
  v43[0] = (*(_DWORD *)(a2 + 124) & 0xFFFFFFFD) == 0;
  if (&v39 != (void **)(a2 + 280))
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)&v39, *(const cricket::Codec **)(a2 + 280), *(const cricket::Codec **)(a2 + 288), 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3));
  if (*(_BYTE *)(a2 + 88))
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)&__p, v44, *((uint64_t *)&v44 + 1), (uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 5);
  *(_WORD *)&v43[1] = *(_WORD *)(a2 + 33);
  v9 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 64))(a1);
  if (((*(uint64_t (**)(uint64_t, void (***)(cricket::AudioReceiverParameters *__hidden)))(*(_QWORD *)v9 + 144))(v9, &v38) & 1) != 0)
  {
    if ((*(_DWORD *)(a2 + 124) & 0xFFFFFFFD) != 0
      || (v30 = *(_QWORD *)(a2 + 280), v31 = *(_QWORD *)(a2 + 288), v30 == v31))
    {
      v10 = 0;
      if (v8 == &v38)
        goto LABEL_9;
    }
    else
    {
      v32 = 0;
      do
      {
        if (cricket::BaseChannel::MaybeAddHandledPayloadType((cricket::BaseChannel *)a1, *(_DWORD *)(v30 + 12)))v32 = 1;
        v30 += 216;
      }
      while (v30 != v31);
      v10 = v32;
      if (v8 == &v38)
      {
LABEL_9:
        *((_WORD *)a1 + 308) = *(_WORD *)v43;
        *((_BYTE *)a1 + 618) = v43[2];
        if (cricket::BaseChannel::UpdateLocalStreams_w((uint64_t)a1, (const cricket::StreamParams **)(a2 + 96), a4))
        {
          a1[56] = *(_DWORD *)(a2 + 124);
          (*(void (**)(int *))(*(_QWORD *)a1 + 200))(a1);
          *(_OWORD *)v33 = v44;
          v34 = v45;
          v45 = 0;
          v44 = 0uLL;
          v35 = 1;
          updated = cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w((uint64_t)a1, v10, (uint64_t *)v33, a4);
          if (v35)
          {
            v12 = (void **)v33[0];
            if (v33[0])
            {
              v13 = (void **)v33[1];
              v14 = v33[0];
              if (v33[1] != v33[0])
              {
                do
                {
                  if (*((char *)v13 - 9) < 0)
                    operator delete(*(v13 - 4));
                  v13 -= 4;
                }
                while (v13 != v12);
                v14 = v33[0];
              }
              v33[1] = v12;
              operator delete(v14);
              v38 = (void (**)(cricket::AudioReceiverParameters *__hidden))&unk_24C0B0D28;
              v17 = __p;
              if (!__p)
                goto LABEL_33;
LABEL_26:
              v18 = (uint64_t)v42;
              v19 = v17;
              if (v42 != v17)
              {
                do
                {
                  if (*(char *)(v18 - 9) < 0)
                    operator delete(*(void **)(v18 - 32));
                  v18 -= 32;
                }
                while ((_BYTE *)v18 != v17);
                v19 = __p;
              }
              v42 = v17;
              operator delete(v19);
              goto LABEL_33;
            }
          }
        }
        else
        {
          updated = 0;
        }
        v38 = (void (**)(cricket::AudioReceiverParameters *__hidden))&unk_24C0B0D28;
        v17 = __p;
        if (!__p)
          goto LABEL_33;
        goto LABEL_26;
      }
    }
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)a1 + 71, (const cricket::Codec *)v39, v40, 0x84BDA12F684BDA13 * ((v40 - (const cricket::Codec *)v39) >> 3));
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)a1 + 74, (uint64_t)__p, (uint64_t)v42, (v42 - (_BYTE *)__p) >> 5);
    goto LABEL_9;
  }
  v15 = (*(uint64_t (**)(int *))(*(_QWORD *)a1 + 96))(a1);
  if (*(char *)(v15 + 23) >= 0)
    v16 = v15;
  else
    v16 = *(_QWORD *)v15;
  rtc::StringFormat((rtc *)"Failed to set local audio description recv parameters for m-section with mid='%s'.", (char *)&v36, v16);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  updated = 0;
  *(_OWORD *)a4 = v36;
  *(_QWORD *)(a4 + 16) = v37;
  v38 = (void (**)(cricket::AudioReceiverParameters *__hidden))&unk_24C0B0D28;
  v17 = __p;
  if (__p)
    goto LABEL_26;
LABEL_33:
  v20 = (const cricket::Codec *)v39;
  if (v39)
  {
    v21 = v39;
    if (v40 != v39)
    {
      v22 = (const cricket::Codec *)((char *)v40 - 216);
      v23 = (void (***)(char *))((char *)v40 - 216);
      do
      {
        v24 = *v23;
        v23 -= 27;
        (*v24)((char *)v22);
        v25 = v22 == v20;
        v22 = (const cricket::Codec *)v23;
      }
      while (!v25);
      v21 = v39;
    }
    v40 = v20;
    operator delete(v21);
  }
  v26 = v44;
  if ((_QWORD)v44)
  {
    v27 = *((_QWORD *)&v44 + 1);
    v28 = (void *)v44;
    if (*((_QWORD *)&v44 + 1) != (_QWORD)v44)
    {
      do
      {
        if (*(char *)(v27 - 9) < 0)
          operator delete(*(void **)(v27 - 32));
        v27 -= 32;
      }
      while (v27 != v26);
      v28 = (void *)v44;
    }
    *((_QWORD *)&v44 + 1) = v26;
    operator delete(v28);
  }
  return updated;
}

uint64_t cricket::VoiceChannel::SetRemoteContent_w(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  rtc::webrtc_checks_impl *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  const std::string::value_type *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t updated;
  std::string *v36;
  size_t size;
  __int128 v38;
  uint64_t v40;
  const char *v41;
  __int128 *v42;
  void *__p;
  const cricket::Codec *v44;
  const cricket::Codec *v45;
  uint64_t v46;
  uint64_t v47;
  __int16 v48;
  char v49;
  int v50;
  std::string v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int16 v55;
  std::string v56;
  char v57;
  __int16 v58;
  __int128 v59;
  uint64_t v60;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (*(char *)(v7 + 23) >= 0)
      v8 = v7;
    else
      v8 = *(_QWORD *)v7;
    v9 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    switch((int)v9)
    {
      case 0:
        HIBYTE(v45) = 5;
        v10 = "audio";
        if (&__p > (void **)"audio")
          goto LABEL_13;
        goto LABEL_12;
      case 1:
        HIBYTE(v45) = 5;
        v10 = "video";
        if (&__p > (void **)"video")
          goto LABEL_13;
LABEL_12:
        if ((char *)&__p + 5 > v10)
        {
LABEL_60:
          __break(1u);
LABEL_61:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v9);
        }
LABEL_13:
        LODWORD(__p) = *(_DWORD *)v10;
        WORD2(__p) = *((unsigned __int8 *)v10 + 4);
        break;
      case 2:
        HIBYTE(v45) = 4;
        if (&__p <= (void **)"data" && (char *)&__p + 4 > "data")
          goto LABEL_60;
        strcpy((char *)&__p, "data");
        break;
      case 3:
        HIBYTE(v45) = 0;
        LOBYTE(__p) = 0;
        break;
      default:
        goto LABEL_61;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&v59, v8, &__p);
    if (SHIBYTE(v45) < 0)
      operator delete(__p);
    v41 = "Setting remote voice description for ";
    v42 = &v59;
    v40 = 7417;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (SHIBYTE(v60) < 0)
      operator delete((void *)v59);
  }
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&__p, (const cricket::MediaChannelParameters *)(a1 + 384));
  __p = &unk_24C0B0D00;
  v50 = *(_DWORD *)(a1 + 444);
  v18 = (_OWORD *)(a1 + 448);
  if (*(char *)(a1 + 471) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
  }
  else
  {
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *v18;
    v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 464);
  }
  v52 = *(_BYTE *)(a1 + 472);
  __p = &off_24C0B6A00;
  v19 = *(_OWORD *)(a1 + 496);
  v53 = *(_OWORD *)(a1 + 480);
  v54 = v19;
  v55 = *(_WORD *)(a1 + 512);
  v56.__r_.__value_.__s.__data_[0] = 0;
  v57 = 0;
  if (*(_BYTE *)(a1 + 544))
  {
    if (*(char *)(a1 + 543) < 0)
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(a1 + 520), *(_QWORD *)(a1 + 528));
    else
      v56 = *(std::string *)(a1 + 520);
    v57 = 1;
  }
  v58 = *(_WORD *)(a1 + 552);
  cricket::RtpSendParametersFromMediaDescription(a2, *(_DWORD *)(a1 + 164), (uint64_t)&__p);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (&v51 != (std::string *)v20)
  {
    v21 = *(_BYTE *)(v20 + 23);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v21 >= 0)
        v23 = (const std::string::value_type *)v20;
      else
        v23 = *(const std::string::value_type **)v20;
      if (v21 >= 0)
        v24 = *(unsigned __int8 *)(v20 + 23);
      else
        v24 = *(_QWORD *)(v20 + 8);
      std::string::__assign_no_alias<false>(&v51, v23, v24);
    }
    else if ((*(_BYTE *)(v20 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&v51, *(char **)v20, *(_QWORD *)(v20 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v20;
      v51.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v22;
    }
  }
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 184))(v25, &__p) & 1) != 0)
  {
    v26 = a4;
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 232))(v28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 224))(v27, v29);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 240))(v31);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 232))(v30, v32);
    if ((void **)(a1 + 384) != &__p)
    {
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a1 + 392), v44, v45, 0x84BDA12F684BDA13 * ((v45 - v44) >> 3));
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a1 + 416), v46, v47, (v47 - v46) >> 5);
      *(_WORD *)(a1 + 440) = v48;
      *(_BYTE *)(a1 + 442) = v49;
      *(_DWORD *)(a1 + 444) = v50;
      if (*(char *)(a1 + 471) < 0)
      {
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v51;
        else
          v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
        else
          size = v51.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((std::string *)(a1 + 448), (const std::string::value_type *)v36, size);
      }
      else if ((*((_BYTE *)&v51.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(a1 + 448), v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      }
      else
      {
        *v18 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 464) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
      }
    }
    *(_BYTE *)(a1 + 472) = v52;
    v38 = v54;
    *(_OWORD *)(a1 + 480) = v53;
    *(_OWORD *)(a1 + 496) = v38;
    *(_WORD *)(a1 + 512) = v55;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 520), &v56);
    *(_WORD *)(a1 + 552) = v58;
    updated = cricket::BaseChannel::UpdateRemoteStreams_w(a1, a2, v26);
  }
  else
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (*(char *)(v33 + 23) >= 0)
      v34 = v33;
    else
      v34 = *(_QWORD *)v33;
    rtc::StringFormat((rtc *)"Failed to set remote audio description send parameters for m-section with mid='%s'.", (char *)&v59, v34, v40, v41, v42);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    updated = 0;
    *(_OWORD *)a4 = v59;
    *(_QWORD *)(a4 + 16) = v60;
  }
  cricket::AudioSenderParameter::~AudioSenderParameter(&__p);
  return updated;
}

unint64_t cricket::VideoChannel::VideoChannel(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, std::string *a7, size_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  __n128 v21;
  __n128 (*v22)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v23)(uint64_t *);

  v14 = *a5;
  *a5 = 0;
  v15 = *a6;
  *a6 = 0;
  v16 = *(unsigned __int8 *)(a10 + 3);
  *(_QWORD *)a1 = off_24C0B08C0;
  *(_QWORD *)(a1 + 8) = &unk_24C0B09B0;
  *(_QWORD *)(a1 + 16) = &unk_24C0B09E8;
  *(_QWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a4;
  v17 = operator new();
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 4) = 1;
  *(_QWORD *)(a1 + 64) = v17;
  do
    v18 = __ldxr((unsigned int *)v17);
  while (__stxr(v18 + 1, (unsigned int *)v17));
  *(_DWORD *)(a1 + 159) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_BYTE *)(a1 + 163) = a9;
  *(_DWORD *)(a1 + 164) = v16;
  *(_WORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 170) = 1;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0x300000003;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria((std::string *)(a1 + 280), a7, a8, 0, 0);
  *(_QWORD *)a1 = &off_24C0B0B60;
  *(_QWORD *)(a1 + 8) = &unk_24C0B0C50;
  *(_QWORD *)(a1 + 16) = &unk_24C0B0C88;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_WORD *)(a1 + 440) = 1;
  *(_BYTE *)(a1 + 442) = 0;
  *(_DWORD *)(a1 + 444) = -1;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 376) = a11;
  *(_QWORD *)(a1 + 384) = &unk_24C0B6A28;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_WORD *)(a1 + 536) = 1;
  *(_BYTE *)(a1 + 538) = 0;
  *(_QWORD *)(a1 + 480) = &unk_24C0B0CD8;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  v21.n128_u64[0] = a1;
  v22 = absl::internal_any_invocable::LocalManagerTrivial;
  v23 = absl::internal_any_invocable::LocalInvoker<false,void,cricket::VideoChannel::VideoChannel(webrtc::TaskQueueBase *,rtc::Thread *,webrtc::TaskQueueBase *,std::unique_ptr<cricket::VideoMediaSendChannelInterface>,std::unique_ptr<cricket::VideoMediaReceiveChannelInterface>,std::string_view,BOOL,webrtc::CryptoOptions,rtc::UniqueRandomIdGenerator *)::$_0 &>;
  (*(void (**)(uint64_t, __n128 *))(*(_QWORD *)v19 + 176))(v19, &v21);
  v22(1, &v21, &v21);
  return a1;
}

void cricket::VideoChannel::~VideoChannel(cricket::VideoChannel *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &off_24C0B0B60;
  *((_QWORD *)this + 1) = &unk_24C0B0C50;
  *((_QWORD *)this + 2) = &unk_24C0B0C88;
  cricket::BaseChannel::DisableMedia_w((uint64_t)this);
  *((_QWORD *)this + 60) = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 64);
  if (v2)
  {
    v3 = *((_QWORD *)this + 65);
    v4 = (void *)*((_QWORD *)this + 64);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 64);
    }
    *((_QWORD *)this + 65) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 61);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 62);
    v7 = (void *)*((_QWORD *)this + 61);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 61);
    }
    *((_QWORD *)this + 62) = v5;
    operator delete(v7);
  }
  cricket::VideoSenderParameters::~VideoSenderParameters((void **)this + 48);
  cricket::BaseChannel::~BaseChannel(this);
}

{
  cricket::VideoChannel::~VideoChannel(this);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::VideoReceiverParameters::~VideoReceiverParameters(cricket::VideoReceiverParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'cricket::VideoChannel::~VideoChannel(cricket::VideoChannel *this)
{
  cricket::VideoChannel::~VideoChannel((cricket::VideoChannel *)((char *)this - 8));
}

{
  cricket::VideoChannel::~VideoChannel((cricket::VideoChannel *)((char *)this - 16));
}

{
  cricket::VideoChannel::~VideoChannel((cricket::VideoChannel *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  cricket::VideoChannel::~VideoChannel((cricket::VideoChannel *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::VideoChannel::UpdateMediaSendRecvState_w(cricket::VideoChannel *this)
{
  _BOOL8 v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  rtc::webrtc_checks_impl *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  char v18;
  char v19;
  _QWORD v20[4];
  uint64_t *v21;
  void *v22[2];
  char v23;

  if (*((_BYTE *)this + 168))
    v2 = (*((_DWORD *)this + 56) & 0xFFFFFFFD) == 0;
  else
    v2 = 0;
  v3 = (*(uint64_t (**)(cricket::VideoChannel *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 160))(v3, v2);
  v4 = *((_BYTE *)this + 168)
    && (*((_DWORD *)this + 57) & 0xFFFFFFFD) == 0
    && *((_DWORD *)this + 56) <= 1u
    && *((_BYTE *)this + 162) != 0;
  v5 = (*(uint64_t (**)(cricket::VideoChannel *))(*(_QWORD *)this + 40))(this);
  (*(void (**)(uint64_t, _BOOL8))(*(_QWORD *)v5 + 192))(v5, v4);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v20[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc";
    v20[1] = 7993;
    v20[2] = &v19;
    v20[3] = "Changing video state, recv=";
    v21 = v20;
    v6 = (*(uint64_t (**)(cricket::VideoChannel *))(*(_QWORD *)this + 96))(this);
    if (*(char *)(v6 + 23) >= 0)
      v7 = v6;
    else
      v7 = *(_QWORD *)v6;
    v8 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
    switch((int)v8)
    {
      case 0:
        v23 = 5;
        v9 = "audio";
        if (v22 > (void **)"audio")
          goto LABEL_21;
        goto LABEL_20;
      case 1:
        v23 = 5;
        v9 = "video";
        if (v22 > (void **)"video")
          goto LABEL_21;
LABEL_20:
        if ((char *)v22 + 5 > v9)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v8);
        }
LABEL_21:
        LODWORD(v22[0]) = *(_DWORD *)v9;
        WORD2(v22[0]) = *((unsigned __int8 *)v9 + 4);
        break;
      case 2:
        v23 = 4;
        if (v22 <= (void **)"data" && (char *)v22 + 4 > "data")
          goto LABEL_28;
        strcpy((char *)v22, "data");
        break;
      case 3:
        v23 = 0;
        LOBYTE(v22[0]) = 0;
        break;
      default:
        goto LABEL_29;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v7, v22);
    if (v23 < 0)
      operator delete(v22[0]);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v10, v11, v12, v13, v14, v15, v16, *v21);
    if (v18 < 0)
      operator delete(__p);
  }
}

uint64_t cricket::VideoChannel::SetLocalContent_w(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  const cricket::Codec *v11;
  const cricket::Codec **v12;
  const cricket::Codec **v13;
  const cricket::Codec **v14;
  void *v15;
  char *v16;
  std::string *v17;
  char v18;
  void **v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  const void **v28;
  unsigned __int8 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  const cricket::Codec **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  int v40;
  uint64_t updated;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  const std::string::value_type *v53;
  size_t size;
  void **v55;
  void **v56;
  void *v57;
  void **v58;
  void **v59;
  void *v60;
  const cricket::Codec *v61;
  void *v62;
  const cricket::Codec *v63;
  void (***v64)(char *);
  void (**v65)(char *);
  BOOL v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  const cricket::Codec *v70;
  const cricket::Codec *v71;
  const cricket::Codec *v72;
  void (***v73)(char *);
  void (**v74)(char *);
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v79;
  std::string *v80;
  uint64_t v81;
  void **v82;
  void **v83;
  uint64_t v84;
  int v85;
  const cricket::Codec *v86;
  void *v87[2];
  uint64_t v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  char *v92;
  char *v93;
  void *__p[2];
  uint64_t v95;
  void *v96;
  void *v97;
  const cricket::Codec *v98;
  void *v99;
  void **v100;
  __int16 v101;
  char v102;
  int v103;
  std::string v104;
  __int16 v105;
  void *v106;
  const cricket::Codec *v107;
  const cricket::Codec *v108;
  std::string *v109;
  std::string *v110;
  _BYTE v111[3];
  __int128 v112;
  uint64_t v113;

  v6 = a2;
  v7 = a1;
  webrtc::RtpExtension::DeduplicateHeaderExtensions((uint64_t *)(a2 + 64), *(_DWORD *)(a1 + 164), (uint64_t)&v112);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v8 + 104))(v8, *(_DWORD *)(v6 + 200) != 0);
  v83 = (void **)(v7 + 480);
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&v106, (const cricket::MediaChannelParameters *)(v7 + 480));
  v106 = &unk_24C0B0CD8;
  v111[0] = (*(_DWORD *)(v6 + 124) & 0xFFFFFFFD) == 0;
  if (&v107 != (const cricket::Codec **)(v6 + 280))
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)&v107, *(const cricket::Codec **)(v6 + 280), *(const cricket::Codec **)(v6 + 288), 0x84BDA12F684BDA13 * ((uint64_t)(*(_QWORD *)(v6 + 288) - *(_QWORD *)(v6 + 280)) >> 3));
  v84 = a4;
  if (*(_BYTE *)(v6 + 88))
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>(&v109, v112, *((uint64_t *)&v112 + 1), (uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 5);
  *(_WORD *)&v111[1] = *(_WORD *)(v6 + 33);
  v82 = (void **)(v7 + 384);
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&v96, (const cricket::MediaChannelParameters *)(v7 + 384));
  v96 = &unk_24C0B0D00;
  v103 = *(_DWORD *)(v7 + 444);
  v9 = &v104;
  v10 = (std::string *)(v7 + 448);
  if (*(char *)(v7 + 471) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v7 + 448), *(_QWORD *)(v7 + 456));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 464);
  }
  v105 = *(_WORD *)(v7 + 472);
  v96 = &unk_24C0B6A28;
  if ((a3 - 1) > 1)
  {
    v40 = 0;
  }
  else
  {
    v80 = (std::string *)(v7 + 448);
    v81 = v6;
    __p[0] = 0;
    __p[1] = 0;
    v95 = 0;
    v11 = (const cricket::Codec *)v97;
    v86 = v98;
    if (v97 == v98)
    {
      v40 = 0;
      v10 = (std::string *)(v7 + 448);
    }
    else
    {
      v79 = v7;
      v85 = 0;
      do
      {
        v13 = (const cricket::Codec **)__p[0];
        v12 = (const cricket::Codec **)__p[1];
        v14 = (const cricket::Codec **)__p[0];
        if (__p[0] == __p[1])
        {
LABEL_15:
          cricket::FindAllMatchingCodecs((uint64_t *)&v107, (uint64_t)v11, &v92);
          v15 = v92;
          v16 = v93;
          if (v92 == v93)
          {
            v20 = 7;
          }
          else
          {
            v17 = v9;
            v18 = 0;
            v19 = (void **)((char *)v11 + 56);
            v20 = *((unsigned __int8 *)v11 + 80);
            v21 = v92;
            do
            {
              while (1)
              {
                v22 = *(_QWORD *)v21;
                if (*(_BYTE *)(*(_QWORD *)v21 + 80))
                  break;
                if (!v20)
                {
                  v38 = v85;
                  if ((v18 & 1) != 0)
                    v38 = 1;
                  v85 = v38;
                  v9 = v17;
                  *(_QWORD *)&v90 = v11;
                  if (v13 == v12)
                  {
LABEL_64:
                    v13 = v12;
                    goto LABEL_66;
                  }
LABEL_44:
                  v30 = v12 - v13;
                  do
                  {
                    v31 = v30 >> 1;
                    v32 = (unint64_t *)&v13[v30 >> 1];
                    v34 = *v32;
                    v33 = (const cricket::Codec **)(v32 + 1);
                    v30 += ~(v30 >> 1);
                    if (v34 < (unint64_t)v11)
                      v13 = v33;
                    else
                      v30 = v31;
                  }
                  while (v30);
                  if (v13 == v12 || v11 < *v13)
LABEL_66:
                    std::vector<cricket::Codec const*>::emplace<cricket::Codec const*>((unint64_t *)__p, v13, (uint64_t *)&v90);
                  v20 = 0;
                  goto LABEL_68;
                }
                v21 += 8;
                v18 = 1;
                if (v21 == v16)
                  goto LABEL_40;
              }
              if (v20)
              {
                v23 = *(unsigned __int8 *)(v22 + 79);
                v24 = *(_QWORD *)(v22 + 64);
                if ((v23 & 0x80u) == 0)
                  v25 = *(unsigned __int8 *)(v22 + 79);
                else
                  v25 = *(_QWORD *)(v22 + 64);
                v26 = *((unsigned __int8 *)v11 + 79);
                v27 = (char)v26;
                if ((v26 & 0x80u) != 0)
                  v26 = *((_QWORD *)v11 + 8);
                if (v25 == v26)
                {
                  v28 = (const void **)(v22 + 56);
                  if (v27 >= 0)
                    v29 = (unsigned __int8 *)v11 + 56;
                  else
                    v29 = (unsigned __int8 *)*v19;
                  if ((v23 & 0x80) != 0)
                  {
                    if (!memcmp(*v28, v29, v24))
                      goto LABEL_38;
                  }
                  else
                  {
                    if (!(_DWORD)v23)
                    {
LABEL_38:
                      v9 = v17;
                      if ((v18 & 1) != 0)
                      {
                        v18 = 0;
                        goto LABEL_40;
                      }
LABEL_43:
                      *(_QWORD *)&v90 = v11;
                      if (v13 == v12)
                        goto LABEL_64;
                      goto LABEL_44;
                    }
                    while (*(unsigned __int8 *)v28 == *v29)
                    {
                      v28 = (const void **)((char *)v28 + 1);
                      ++v29;
                      if (!--v23)
                        goto LABEL_38;
                    }
                  }
                }
              }
              v21 += 8;
            }
            while (v21 != v16);
            if ((v18 & 1) != 0)
            {
              v18 = 1;
              if (!v20)
              {
                v85 = 1;
                v9 = v17;
                goto LABEL_68;
              }
LABEL_40:
              if (*((char *)v11 + 79) < 0)
                operator delete(*v19);
              v20 = 0;
              *((_BYTE *)v11 + 80) = 0;
              v85 = 1;
              v9 = v17;
              if ((v18 & 1) == 0)
                goto LABEL_43;
            }
            else
            {
              v35 = *((unsigned int *)v11 + 3);
              v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 96))(v79);
              if (*(char *)(v36 + 23) >= 0)
                v37 = v36;
              else
                v37 = *(_QWORD *)v36;
              rtc::StringFormat((rtc *)"Failed to set local answer due to incompatible codec packetization for pt='%d' specified in m-section with mid='%s'.", (char *)&v90, v35, v37);
              if (*(char *)(v84 + 23) < 0)
                operator delete(*(void **)v84);
              *(_OWORD *)v84 = v90;
              *(_QWORD *)(v84 + 16) = v91;
              v20 = 1;
              v9 = v17;
            }
          }
LABEL_68:
          if (v15)
            operator delete(v15);
          if (v20 != 7 && v20)
          {
            v39 = __p[0];
            v7 = v79;
            if (!__p[0])
              goto LABEL_74;
            goto LABEL_73;
          }
        }
        else
        {
          while ((cricket::Codec::Matches(v11, *v14) & 1) == 0)
          {
            if (++v14 == v12)
              goto LABEL_15;
          }
        }
        v11 = (const cricket::Codec *)((char *)v11 + 216);
      }
      while (v11 != v86);
      v20 = 6;
      v39 = __p[0];
      v7 = v79;
      if (__p[0])
LABEL_73:
        operator delete(v39);
LABEL_74:
      v40 = v85;
      v10 = v80;
      v6 = v81;
      if (v20 != 6)
      {
        updated = 0;
        v96 = &unk_24C0B0D00;
        if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_132;
        goto LABEL_131;
      }
    }
  }
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v42 + 144))(v42, &v106) & 1) == 0)
  {
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    if (*(char *)(v45 + 23) >= 0)
      v46 = v45;
    else
      v46 = *(_QWORD *)v45;
    rtc::StringFormat((rtc *)"Failed to set local video description recv parameters for m-section with mid='%s'.", (char *)__p, v46);
    v47 = v84;
    if (*(char *)(v84 + 23) < 0)
      goto LABEL_95;
    goto LABEL_96;
  }
  if ((*(_DWORD *)(v6 + 124) & 0xFFFFFFFD) != 0)
  {
    v43 = 0;
    if (v83 == &v106)
      goto LABEL_85;
    goto LABEL_84;
  }
  v48 = *(_QWORD *)(v6 + 280);
  v49 = *(_QWORD *)(v6 + 288);
  if (v48 == v49)
  {
    v50 = 0;
  }
  else
  {
    v50 = 0;
    do
    {
      if (cricket::BaseChannel::MaybeAddHandledPayloadType((cricket::BaseChannel *)v7, *(_DWORD *)(v48 + 12)))v50 = 1;
      v48 += 216;
    }
    while (v48 != v49);
  }
  v43 = v50;
  if (v83 != &v106)
  {
LABEL_84:
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(v7 + 488), v107, v108, 0x84BDA12F684BDA13 * ((v108 - v107) >> 3));
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v7 + 512), (uint64_t)v109, (uint64_t)v110, ((char *)v110 - (char *)v109) >> 5);
  }
LABEL_85:
  *(_WORD *)(v7 + 536) = *(_WORD *)v111;
  *(_BYTE *)(v7 + 538) = v111[2];
  if (!v40)
    goto LABEL_121;
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v44 + 184))(v44, &v96) & 1) == 0)
  {
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    if (*(char *)(v51 + 23) >= 0)
      v52 = v51;
    else
      v52 = *(_QWORD *)v51;
    rtc::StringFormat((rtc *)"Failed to set send parameters for m-section with mid='%s'.", (char *)__p, v52);
    v47 = v84;
    if (*(char *)(v84 + 23) < 0)
LABEL_95:
      operator delete(*(void **)v47);
LABEL_96:
    updated = 0;
    *(_OWORD *)v47 = *(_OWORD *)__p;
    *(_QWORD *)(v47 + 16) = v95;
    v96 = &unk_24C0B0D00;
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_131;
  }
  if (v82 != &v96)
  {
    std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(v7 + 392), (const cricket::Codec *)v97, v98, 0x84BDA12F684BDA13 * ((v98 - (const cricket::Codec *)v97) >> 3));
    std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(v7 + 416), (uint64_t)v99, (uint64_t)v100, ((char *)v100 - (_BYTE *)v99) >> 5);
    *(_WORD *)(v7 + 440) = v101;
    *(_BYTE *)(v7 + 442) = v102;
    *(_DWORD *)(v7 + 444) = v103;
    if (*(char *)(v7 + 471) < 0)
    {
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = (const std::string::value_type *)v9;
      else
        v53 = (const std::string::value_type *)v104.__r_.__value_.__r.__words[0];
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v104.__r_.__value_.__r.__words[2]);
      else
        size = v104.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>(v10, v53, size);
    }
    else if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v10, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v10->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    }
  }
  *(_WORD *)(v7 + 472) = v105;
LABEL_121:
  if (!cricket::BaseChannel::UpdateLocalStreams_w(v7, (const cricket::StreamParams **)(v6 + 96), v84))
  {
    updated = 0;
    goto LABEL_130;
  }
  *(_DWORD *)(v7 + 224) = *(_DWORD *)(v6 + 124);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
  *(_OWORD *)v87 = v112;
  v88 = v113;
  v113 = 0;
  v112 = 0uLL;
  v89 = 1;
  updated = cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(v7, v43, (uint64_t *)v87, v84);
  if (!v89 || (v55 = (void **)v87[0]) == 0)
  {
LABEL_130:
    v96 = &unk_24C0B0D00;
    if ((SHIBYTE(v104.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_131;
  }
  v56 = (void **)v87[1];
  v57 = v87[0];
  if (v87[1] != v87[0])
  {
    do
    {
      if (*((char *)v56 - 9) < 0)
        operator delete(*(v56 - 4));
      v56 -= 4;
    }
    while (v56 != v55);
    v57 = v87[0];
  }
  v87[1] = v55;
  operator delete(v57);
  v96 = &unk_24C0B0D00;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
LABEL_131:
    operator delete(v104.__r_.__value_.__l.__data_);
LABEL_132:
  v96 = &unk_24C0B0D28;
  v58 = (void **)v99;
  if (v99)
  {
    v59 = v100;
    v60 = v99;
    if (v100 != v99)
    {
      do
      {
        if (*((char *)v59 - 9) < 0)
          operator delete(*(v59 - 4));
        v59 -= 4;
      }
      while (v59 != v58);
      v60 = v99;
    }
    v100 = v58;
    operator delete(v60);
  }
  v61 = (const cricket::Codec *)v97;
  if (v97)
  {
    v62 = v97;
    if (v98 != v97)
    {
      v63 = (const cricket::Codec *)((char *)v98 - 216);
      v64 = (void (***)(char *))((char *)v98 - 216);
      do
      {
        v65 = *v64;
        v64 -= 27;
        (*v65)((char *)v63);
        v66 = v63 == v61;
        v63 = (const cricket::Codec *)v64;
      }
      while (!v66);
      v62 = v97;
    }
    v98 = v61;
    operator delete(v62);
  }
  v106 = &unk_24C0B0D28;
  v67 = v109;
  if (v109)
  {
    v68 = v110;
    v69 = v109;
    if (v110 != v109)
    {
      do
      {
        if (v68[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v68[-2].__r_.__value_.__r.__words[2]);
        v68 = (std::string *)((char *)v68 - 32);
      }
      while (v68 != v67);
      v69 = v109;
    }
    v110 = v67;
    operator delete(v69);
  }
  v70 = v107;
  if (v107)
  {
    v71 = v107;
    if (v108 != v107)
    {
      v72 = (const cricket::Codec *)((char *)v108 - 216);
      v73 = (void (***)(char *))((char *)v108 - 216);
      do
      {
        v74 = *v73;
        v73 -= 27;
        (*v74)((char *)v72);
        v66 = v72 == v70;
        v72 = (const cricket::Codec *)v73;
      }
      while (!v66);
      v71 = v107;
    }
    v108 = v70;
    operator delete(v71);
  }
  v75 = v112;
  if ((_QWORD)v112)
  {
    v76 = *((_QWORD *)&v112 + 1);
    v77 = (void *)v112;
    if (*((_QWORD *)&v112 + 1) != (_QWORD)v112)
    {
      do
      {
        if (*(char *)(v76 - 9) < 0)
          operator delete(*(void **)(v76 - 32));
        v76 -= 32;
      }
      while (v76 != v75);
      v77 = (void *)v112;
    }
    *((_QWORD *)&v112 + 1) = v75;
    operator delete(v77);
  }
  return updated;
}

uint64_t cricket::VideoChannel::SetRemoteContent_w(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  rtc::webrtc_checks_impl *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  const std::string::value_type *v22;
  size_t v23;
  void **v24;
  const cricket::Codec **v25;
  const cricket::Codec **v26;
  const cricket::Codec **v27;
  void *v28;
  char *v29;
  char v30;
  void **v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  void *v38;
  int v39;
  const void **v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  const cricket::Codec **v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t updated;
  _BYTE *v65;
  BOOL v66;
  std::string *v67;
  size_t size;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const cricket::Codec *v74;
  void *v75;
  const cricket::Codec *v76;
  void (***v77)(char *);
  void (**v78)(char *);
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const cricket::Codec *v82;
  const cricket::Codec *v83;
  const cricket::Codec *v84;
  void (***v85)(char *);
  void (**v86)(char *);
  uint64_t v88;
  const char *v89;
  void **p_p;
  uint64_t v91;
  uint64_t v92;
  std::string *__dst;
  int v94;
  const cricket::Codec *v95;
  __int128 v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void *v100[2];
  uint64_t v101;
  void *__p;
  void *v103;
  const cricket::Codec *v104;
  void *v105;
  _BYTE *v106;
  __int16 v107;
  char v108;
  void *v109;
  const cricket::Codec *v110;
  const cricket::Codec *v111;
  _BYTE *v112;
  _BYTE *v113;
  __int16 v114;
  char v115;
  int v116;
  std::string v117;
  __int16 v118;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (*(char *)(v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = *(_QWORD *)v8;
    v10 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    switch((int)v10)
    {
      case 0:
        HIBYTE(v111) = 5;
        v11 = "audio";
        if (&v109 > (void **)"audio")
          goto LABEL_13;
        goto LABEL_12;
      case 1:
        HIBYTE(v111) = 5;
        v11 = "video";
        if (&v109 > (void **)"video")
          goto LABEL_13;
LABEL_12:
        if ((char *)&v109 + 5 > v11)
        {
LABEL_175:
          __break(1u);
LABEL_176:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v10);
        }
LABEL_13:
        LODWORD(v109) = *(_DWORD *)v11;
        WORD2(v109) = *((unsigned __int8 *)v11 + 4);
        break;
      case 2:
        HIBYTE(v111) = 4;
        if (&v109 <= (void **)"data" && (char *)&v109 + 4 > "data")
          goto LABEL_175;
        strcpy((char *)&v109, "data");
        break;
      case 3:
        HIBYTE(v111) = 0;
        LOBYTE(v109) = 0;
        break;
      default:
        goto LABEL_176;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v9, &v109);
    if (SHIBYTE(v111) < 0)
      operator delete(v109);
    v89 = "Setting remote video description for ";
    p_p = &__p;
    v88 = 9033;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (SHIBYTE(v104) < 0)
      operator delete(__p);
  }
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&v109, (const cricket::MediaChannelParameters *)(a1 + 384));
  v109 = &unk_24C0B0D00;
  v116 = *(_DWORD *)(a1 + 444);
  __dst = (std::string *)(a1 + 448);
  if (*(char *)(a1 + 471) < 0)
    std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
  else
    v117 = *(std::string *)(a1 + 448);
  v118 = *(_WORD *)(a1 + 472);
  v109 = &unk_24C0B6A28;
  cricket::RtpSendParametersFromMediaDescription(a2, *(_DWORD *)(a1 + 164), (uint64_t)&v109);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (&v117 != (std::string *)v19)
  {
    v20 = *(_BYTE *)(v19 + 23);
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v20 >= 0)
        v22 = (const std::string::value_type *)v19;
      else
        v22 = *(const std::string::value_type **)v19;
      if (v20 >= 0)
        v23 = *(unsigned __int8 *)(v19 + 23);
      else
        v23 = *(_QWORD *)(v19 + 8);
      std::string::__assign_no_alias<false>(&v117, v22, v23);
    }
    else if ((*(_BYTE *)(v19 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&v117, *(char **)v19, *(_QWORD *)(v19 + 8));
    }
    else
    {
      v21 = *(_OWORD *)v19;
      v117.__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v21;
    }
  }
  HIBYTE(v118) = *(_BYTE *)(a2 + 120);
  cricket::MediaChannelParameters::MediaChannelParameters((cricket::MediaChannelParameters *)&__p, (const cricket::MediaChannelParameters *)(a1 + 480));
  __p = &unk_24C0B0CD8;
  if ((a3 - 1) > 1
    || (v100[0] = 0, v100[1] = 0, v101 = 0, v24 = (void **)v103, v95 = v104, v103 == v104))
  {
    v51 = 0;
    goto LABEL_104;
  }
  v91 = a2;
  v92 = a4;
  v94 = 0;
  while (1)
  {
    v26 = (const cricket::Codec **)v100[0];
    v25 = (const cricket::Codec **)v100[1];
    v27 = (const cricket::Codec **)v100[0];
    if (v100[0] == v100[1])
      break;
    while ((cricket::Codec::Matches((cricket::Codec *)v24, *v27) & 1) == 0)
    {
      if (++v27 == v25)
        goto LABEL_41;
    }
LABEL_37:
    v24 += 27;
    if (v24 == (void **)v95)
    {
      LOBYTE(v32) = 4;
      goto LABEL_118;
    }
  }
LABEL_41:
  cricket::FindAllMatchingCodecs((uint64_t *)&v110, (uint64_t)v24, &v98);
  v28 = v98;
  v29 = v99;
  if (v98 == v99)
  {
    v32 = 5;
    if (v98)
LABEL_69:
      operator delete(v28);
    goto LABEL_70;
  }
  v30 = 0;
  v31 = v24 + 7;
  v32 = *((unsigned __int8 *)v24 + 80);
  v33 = v98;
  while (1)
  {
    while (1)
    {
      v34 = *(_QWORD *)v33;
      if (!*(_BYTE *)(*(_QWORD *)v33 + 80))
        break;
      if (v32)
      {
        v35 = *(unsigned __int8 *)(v34 + 79);
        v36 = *(_QWORD *)(v34 + 64);
        if ((v35 & 0x80u) == 0)
          v37 = (void *)*(unsigned __int8 *)(v34 + 79);
        else
          v37 = *(void **)(v34 + 64);
        v38 = (void *)*((unsigned __int8 *)v24 + 79);
        v39 = (char)v38;
        if ((char)v38 < 0)
          v38 = v24[8];
        if (v37 == v38)
        {
          v40 = (const void **)(v34 + 56);
          if (v39 >= 0)
            v41 = (unsigned __int8 *)(v24 + 7);
          else
            v41 = (unsigned __int8 *)*v31;
          if ((v35 & 0x80) != 0)
          {
            if (!memcmp(*v40, v41, v36))
              goto LABEL_64;
          }
          else
          {
            if (!(_DWORD)v35)
            {
LABEL_64:
              if ((v30 & 1) == 0)
                goto LABEL_80;
              v30 = 0;
LABEL_66:
              if (*((char *)v24 + 79) < 0)
              {
                operator delete(*v31);
                v32 = 0;
                *((_BYTE *)v24 + 80) = 0;
                v94 = 1;
                if ((v30 & 1) != 0)
                {
LABEL_68:
                  if (!v28)
                    goto LABEL_70;
                  goto LABEL_69;
                }
              }
              else
              {
                v32 = 0;
                *((_BYTE *)v24 + 80) = 0;
                v94 = 1;
                if ((v30 & 1) != 0)
                  goto LABEL_68;
              }
LABEL_80:
              *(_QWORD *)&v96 = v24;
              if (v26 == v25)
                goto LABEL_98;
              goto LABEL_81;
            }
            while (*(unsigned __int8 *)v40 == *v41)
            {
              v40 = (const void **)((char *)v40 + 1);
              ++v41;
              if (!--v35)
                goto LABEL_64;
            }
          }
        }
      }
      v33 += 8;
      if (v33 == v29)
      {
        if ((v30 & 1) == 0)
        {
          v47 = *((unsigned int *)v24 + 3);
          v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
          if (*(char *)(v48 + 23) >= 0)
            v49 = v48;
          else
            v49 = *(_QWORD *)v48;
          rtc::StringFormat((rtc *)"Failed to set remote answer due to incompatible codec packetization for pt='%d' specified in m-section with mid='%s'.", (char *)&v96, v47, v49, v89, p_p);
          if (*(char *)(v92 + 23) < 0)
            operator delete(*(void **)v92);
          *(_OWORD *)v92 = v96;
          *(_QWORD *)(v92 + 16) = v97;
          v32 = 1;
          if (v28)
            goto LABEL_69;
          goto LABEL_70;
        }
        v30 = 1;
        if (!v32)
        {
          v94 = 1;
          if (v28)
            goto LABEL_69;
          goto LABEL_70;
        }
        goto LABEL_66;
      }
    }
    if (!v32)
      break;
    v33 += 8;
    v30 = 1;
    if (v33 == v29)
      goto LABEL_66;
  }
  v50 = v94;
  if ((v30 & 1) != 0)
    v50 = 1;
  v94 = v50;
  *(_QWORD *)&v96 = v24;
  if (v26 == v25)
  {
LABEL_98:
    v26 = v25;
    goto LABEL_100;
  }
LABEL_81:
  v42 = v25 - v26;
  do
  {
    v43 = v42 >> 1;
    v44 = (unint64_t *)&v26[v42 >> 1];
    v46 = *v44;
    v45 = (const cricket::Codec **)(v44 + 1);
    v42 += ~(v42 >> 1);
    if (v46 < (unint64_t)v24)
      v26 = v45;
    else
      v42 = v43;
  }
  while (v42);
  if (v26 == v25 || v24 < (void **)*v26)
LABEL_100:
    std::vector<cricket::Codec const*>::emplace<cricket::Codec const*>((unint64_t *)v100, v26, (uint64_t *)&v96);
  v32 = 0;
  if (v28)
    goto LABEL_69;
LABEL_70:
  if (v32 == 5 || !v32)
    goto LABEL_37;
LABEL_118:
  a4 = v92;
  if (v100[0])
    operator delete(v100[0]);
  v66 = (v32 & 3) == 0;
  a2 = v91;
  if (!v66)
  {
    updated = 0;
    __p = &unk_24C0B0D28;
    v65 = v105;
    if (!v105)
      goto LABEL_150;
    goto LABEL_143;
  }
  v51 = v94;
LABEL_104:
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v52 + 184))(v52, &v109) & 1) == 0)
  {
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    if (*(char *)(v62 + 23) >= 0)
      v63 = v62;
    else
      v63 = *(_QWORD *)v62;
    rtc::StringFormat((rtc *)"Failed to set remote video description send parameters for m-section with mid='%s'.", (char *)v100, v63, v88);
    if (*(char *)(a4 + 23) < 0)
      goto LABEL_114;
    goto LABEL_115;
  }
  v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 240))(v54);
  v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 160))(v56);
  v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 232))(v58);
  v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 248))(v60);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53 + 232))(v53, v55, v57, v59, v61);
  if ((void **)(a1 + 384) == &v109)
    goto LABEL_131;
  std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a1 + 392), v110, v111, 0x84BDA12F684BDA13 * ((v111 - v110) >> 3));
  std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a1 + 416), (uint64_t)v112, (uint64_t)v113, (v113 - v112) >> 5);
  *(_WORD *)(a1 + 440) = v114;
  *(_BYTE *)(a1 + 442) = v115;
  *(_DWORD *)(a1 + 444) = v116;
  if (*(char *)(a1 + 471) < 0)
  {
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v67 = &v117;
    else
      v67 = (std::string *)v117.__r_.__value_.__r.__words[0];
    if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v117.__r_.__value_.__r.__words[2]);
    else
      size = v117.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(__dst, (const std::string::value_type *)v67, size);
LABEL_131:
    *(_WORD *)(a1 + 472) = v118;
    if (v51)
      goto LABEL_132;
LABEL_142:
    updated = cricket::BaseChannel::UpdateRemoteStreams_w(a1, a2, a4);
    __p = &unk_24C0B0D28;
    v65 = v105;
    if (!v105)
      goto LABEL_150;
    goto LABEL_143;
  }
  if ((*((_BYTE *)&v117.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(__dst, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
    *(_WORD *)(a1 + 472) = v118;
    if (v51)
      goto LABEL_132;
    goto LABEL_142;
  }
  *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 464) = *((_QWORD *)&v117.__r_.__value_.__l + 2);
  *(_WORD *)(a1 + 472) = v118;
  if (!v51)
    goto LABEL_142;
LABEL_132:
  v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v69 + 144))(v69, &__p) & 1) != 0)
  {
    if ((void **)(a1 + 480) != &__p)
    {
      std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>((uint64_t *)(a1 + 488), (const cricket::Codec *)v103, v104, 0x84BDA12F684BDA13 * ((v104 - (const cricket::Codec *)v103) >> 3));
      std::vector<webrtc::RtpExtension>::__assign_with_size[abi:sn180100]<webrtc::RtpExtension*,webrtc::RtpExtension*>((std::string **)(a1 + 512), (uint64_t)v105, (uint64_t)v106, (v106 - (_BYTE *)v105) >> 5);
    }
    *(_WORD *)(a1 + 536) = v107;
    *(_BYTE *)(a1 + 538) = v108;
    goto LABEL_142;
  }
  v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (*(char *)(v70 + 23) >= 0)
    v71 = v70;
  else
    v71 = *(_QWORD *)v70;
  rtc::StringFormat((rtc *)"Failed to set recv parameters for m-section with mid='%s'.", (char *)v100, v71, v88);
  if (*(char *)(a4 + 23) < 0)
LABEL_114:
    operator delete(*(void **)a4);
LABEL_115:
  updated = 0;
  *(_OWORD *)a4 = *(_OWORD *)v100;
  *(_QWORD *)(a4 + 16) = v101;
  __p = &unk_24C0B0D28;
  v65 = v105;
  if (!v105)
    goto LABEL_150;
LABEL_143:
  v72 = (uint64_t)v106;
  v73 = v65;
  if (v106 != v65)
  {
    do
    {
      if (*(char *)(v72 - 9) < 0)
        operator delete(*(void **)(v72 - 32));
      v72 -= 32;
    }
    while ((_BYTE *)v72 != v65);
    v73 = v105;
  }
  v106 = v65;
  operator delete(v73);
LABEL_150:
  v74 = (const cricket::Codec *)v103;
  if (v103)
  {
    v75 = v103;
    if (v104 != v103)
    {
      v76 = (const cricket::Codec *)((char *)v104 - 216);
      v77 = (void (***)(char *))((char *)v104 - 216);
      do
      {
        v78 = *v77;
        v77 -= 27;
        (*v78)((char *)v76);
        v66 = v76 == v74;
        v76 = (const cricket::Codec *)v77;
      }
      while (!v66);
      v75 = v103;
    }
    v104 = v74;
    operator delete(v75);
  }
  v109 = &unk_24C0B0D00;
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  v109 = &unk_24C0B0D28;
  v79 = (uint64_t)v112;
  if (v112)
  {
    v80 = (uint64_t)v113;
    v81 = v112;
    if (v113 != v112)
    {
      do
      {
        if (*(char *)(v80 - 9) < 0)
          operator delete(*(void **)(v80 - 32));
        v80 -= 32;
      }
      while (v80 != v79);
      v81 = v112;
    }
    v113 = (_BYTE *)v79;
    operator delete(v81);
  }
  v82 = v110;
  if (v110)
  {
    v83 = v110;
    if (v111 != v110)
    {
      v84 = (const cricket::Codec *)((char *)v111 - 216);
      v85 = (void (***)(char *))((char *)v111 - 216);
      do
      {
        v86 = *v85;
        v85 -= 27;
        (*v86)((char *)v84);
        v66 = v84 == v82;
        v84 = (const cricket::Codec *)v85;
      }
      while (!v66);
      v83 = v110;
    }
    v111 = v82;
    operator delete(v83);
  }
  return updated;
}

uint64_t cricket::BaseChannel::video_media_send_channel(cricket::BaseChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/pc/channel.h", 163, "false", "\t", a5, a6, a7, a8, (uint64_t)"Attempt to fetch video channel from non-video");
  return cricket::BaseChannel::voice_media_send_channel((cricket::BaseChannel *)v8);
}

uint64_t cricket::BaseChannel::voice_media_send_channel(cricket::BaseChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/pc/channel.h", 167, "false", "\t", a5, a6, a7, a8, (uint64_t)"Attempt to fetch voice channel from non-voice");
  return cricket::BaseChannel::video_media_receive_channel((cricket::BaseChannel *)v8);
}

uint64_t cricket::BaseChannel::video_media_receive_channel(cricket::BaseChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/pc/channel.h", 171, "false", "\t", a5, a6, a7, a8, (uint64_t)"Attempt to fetch video channel from non-video");
  return cricket::BaseChannel::voice_media_receive_channel((cricket::BaseChannel *)v8);
}

char *cricket::BaseChannel::voice_media_receive_channel(cricket::BaseChannel *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  v8 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/pc/channel.h", 175, "false", "\t", a5, a6, a7, a8, (uint64_t)"Attempt to fetch voice channel from non-voice");
  return cricket::BaseChannel::transport_name((cricket::BaseChannel *)v8);
}

char *cricket::BaseChannel::transport_name(cricket::BaseChannel *this)
{
  uint64_t v1;
  char *result;
  uint64_t v3;
  BOOL v4;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return &byte_208EB9246;
  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  if (result[23] < 0)
  {
    v3 = *((_QWORD *)result + 1);
    if (v3 < 0 || ((result = *(char **)result, v3) ? (v4 = result == 0) : (v4 = 0), v4))
      __break(1u);
  }
  return result;
}

uint64_t cricket::BaseChannel::mid(cricket::BaseChannel *this)
{
  return (uint64_t)this + 280;
}

uint64_t cricket::BaseChannel::local_streams(cricket::BaseChannel *this)
{
  return (uint64_t)this + 176;
}

uint64_t cricket::BaseChannel::remote_streams(cricket::BaseChannel *this)
{
  return (uint64_t)this + 200;
}

uint64_t cricket::VoiceChannel::media_type(cricket::VoiceChannel *this)
{
  return 0;
}

void cricket::VoiceChannel::AsVideoChannel(cricket::VoiceChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t cricket::VoiceChannel::media_send_channel(cricket::VoiceChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t cricket::VoiceChannel::voice_media_send_channel(cricket::VoiceChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t cricket::VoiceChannel::media_receive_channel(cricket::VoiceChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t cricket::VoiceChannel::voice_media_receive_channel(cricket::VoiceChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t cricket::VideoChannel::media_type(cricket::VideoChannel *this)
{
  return 1;
}

void cricket::VideoChannel::AsVoiceChannel(cricket::VideoChannel *this)
{
  rtc::webrtc_checks_impl::UnreachableCodeReached(this);
}

uint64_t cricket::VideoChannel::media_send_channel(cricket::VideoChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

uint64_t cricket::VideoChannel::video_media_send_channel(cricket::VideoChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
}

uint64_t cricket::VideoChannel::media_receive_channel(cricket::VideoChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
}

uint64_t cricket::VideoChannel::video_media_receive_channel(cricket::VideoChannel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
}

uint64_t *std::vector<cricket::Codec>::__assign_with_size[abi:sn180100]<cricket::Codec*,cricket::Codec*>(uint64_t *result, const cricket::Codec *a2, const cricket::Codec *a3, unint64_t a4)
{
  const cricket::Codec *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  cricket::Codec *v20;
  uint64_t v21;
  const cricket::Codec *v22;
  uint64_t v23;
  uint64_t v24;
  cricket::Codec *v25;
  uint64_t v26;
  uint64_t (***v27)(_QWORD);
  uint64_t (***v28)(_QWORD);
  uint64_t (**v29)(_QWORD);

  v6 = a2;
  v7 = result;
  v8 = result[2];
  v9 = *result;
  if (0x84BDA12F684BDA13 * ((v8 - *result) >> 3) >= a4)
  {
    v21 = result[1];
    if (0x84BDA12F684BDA13 * ((v21 - v9) >> 3) < a4)
    {
      v22 = (const cricket::Codec *)((char *)a2 + 8 * ((v21 - v9) >> 3));
      if (v21 != v9)
      {
        v23 = 8 * ((v21 - v9) >> 3);
        do
        {
          result = (uint64_t *)cricket::Codec::operator=(v9, (uint64_t)v6);
          v6 = (const cricket::Codec *)((char *)v6 + 216);
          v9 += 216;
          v23 -= 216;
        }
        while (v23);
        v9 = v7[1];
      }
      v24 = v9;
      if (v22 == a3)
      {
LABEL_28:
        v7[1] = v24;
        return result;
      }
      v24 = v9;
      result = (uint64_t *)v9;
      while (result)
      {
        v25 = cricket::Codec::Codec((cricket::Codec *)result, v22);
        v22 = (const cricket::Codec *)((char *)v22 + 216);
        result = (uint64_t *)((char *)v25 + 216);
        v24 += 216;
        if (v22 == a3)
          goto LABEL_28;
      }
      __break(1u);
LABEL_40:
      abort();
    }
    if (a2 == a3)
    {
      v26 = *result;
      if (v21 == v9)
      {
LABEL_38:
        v7[1] = v26;
        return result;
      }
    }
    else
    {
      v26 = *result;
      do
      {
        result = (uint64_t *)cricket::Codec::operator=(v9, (uint64_t)v6);
        v6 = (const cricket::Codec *)((char *)v6 + 216);
        v9 += 216;
        v26 += 216;
      }
      while (v6 != a3);
      v21 = v7[1];
      if (v21 == v26)
        goto LABEL_38;
    }
    v27 = (uint64_t (***)(_QWORD))(v21 - 216);
    v28 = (uint64_t (***)(_QWORD))(v21 - 216);
    do
    {
      v29 = *v28;
      v28 -= 27;
      result = (uint64_t *)(*v29)(v27);
      v15 = v27 == (uint64_t (***)(_QWORD))v26;
      v27 = v28;
    }
    while (!v15);
    goto LABEL_38;
  }
  if (v9)
  {
    v10 = result[1];
    v11 = (void *)*result;
    if (v10 != v9)
    {
      v12 = (void (***)(_QWORD))(v10 - 216);
      v13 = (void (***)(_QWORD))(v10 - 216);
      do
      {
        v14 = *v13;
        v13 -= 27;
        (*v14)(v12);
        v15 = v12 == (void (***)(_QWORD))v9;
        v12 = v13;
      }
      while (!v15);
      v11 = (void *)*v7;
    }
    v7[1] = v9;
    operator delete(v11);
    v8 = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  if (a4 > 0x12F684BDA12F684)
    goto LABEL_40;
  v16 = 0x84BDA12F684BDA13 * (v8 >> 3);
  v17 = 2 * v16;
  if (2 * v16 <= a4)
    v17 = a4;
  v18 = v16 >= 0x97B425ED097B42 ? 0x12F684BDA12F684 : v17;
  if (v18 > 0x12F684BDA12F684)
    goto LABEL_40;
  v19 = 27 * v18;
  result = (uint64_t *)operator new(216 * v18);
  *v7 = (uint64_t)result;
  v7[1] = (uint64_t)result;
  for (v7[2] = (uint64_t)&result[v19]; v6 != a3; result = (uint64_t *)((char *)v20 + 216))
  {
    v20 = cricket::Codec::Codec((cricket::Codec *)result, v6);
    v6 = (const cricket::Codec *)((char *)v6 + 216);
  }
  v7[1] = (uint64_t)result;
  return result;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(BOOL)>::CallVoidPtr<absl::AnyInvocable<void ()(BOOL)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

void webrtc::UntypedFunction::PrepareArgs<void ()(BOOL),absl::AnyInvocable<void ()(BOOL)>,absl::AnyInvocable<void ()(BOOL)>,(void *)0>(absl::AnyInvocable<void ()(BOOL)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(std::optional<rtc::NetworkRoute>)>::CallVoidPtr<absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  uint64_t v9;

  v5 = *a1;
  v9 = *(_QWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v5 + 24))(v5, v8, a3, a4, a5);
}

void webrtc::UntypedFunction::PrepareArgs<void ()(std::optional<rtc::NetworkRoute>),absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>,absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)>,(void *)0>(absl::AnyInvocable<void ()(std::optional<rtc::NetworkRoute>)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(rtc::SentPacket const&)>::CallVoidPtr<absl::AnyInvocable<void ()(rtc::SentPacket const&)>>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 24))();
}

void webrtc::UntypedFunction::PrepareArgs<void ()(rtc::SentPacket const&),absl::AnyInvocable<void ()(rtc::SentPacket const&)>,absl::AnyInvocable<void ()(rtc::SentPacket const&)>,(void *)0>(absl::AnyInvocable<void ()(rtc::SentPacket const&)> &&)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(_QWORD *a1)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*a1 + 16))(1, *a1, *a1);
  JUMPOUT(0x20BD0ADECLL);
}

std::string *webrtc::RtpDemuxerCriteria::RtpDemuxerCriteria(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  size_t v12;
  _BYTE *v14;
  void *v15;
  std::string::size_type v16;
  _BYTE *v17;
  void *v18;
  std::string::size_type v19;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      this[2].__r_.__value_.__r.__words[0] = 0;
      this[2].__r_.__value_.__l.__size_ = 0;
      this[2].__r_.__value_.__r.__words[2] = 0;
      v8 = (_BYTE *)*((_QWORD *)a2 + 6);
      v7 = (_BYTE *)*((_QWORD *)a2 + 7);
      v9 = v7 - v8;
      if (v7 == v8)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    v5 = this + 1;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  v8 = (_BYTE *)*((_QWORD *)a2 + 6);
  v14 = (_BYTE *)*((_QWORD *)a2 + 7);
  v9 = v14 - v8;
  if (v14 == v8)
  {
LABEL_4:
    this[3].__r_.__value_.__r.__words[0] = 0;
    this[3].__r_.__value_.__l.__size_ = 0;
    this[3].__r_.__value_.__r.__words[2] = 0;
    v11 = (_BYTE *)*((_QWORD *)a2 + 9);
    v10 = (_BYTE *)*((_QWORD *)a2 + 10);
    v12 = v10 - v11;
    if (v10 == v11)
      return this;
    goto LABEL_10;
  }
LABEL_8:
  if (v9 < 0)
    goto LABEL_12;
  v15 = operator new(v9);
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)v15;
  v16 = (std::string::size_type)v15 + 4 * (v9 >> 2);
  this[2].__r_.__value_.__r.__words[2] = v16;
  memcpy(v15, v8, v9);
  this[2].__r_.__value_.__l.__size_ = v16;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 9);
  v17 = (_BYTE *)*((_QWORD *)a2 + 10);
  v12 = v17 - v11;
  if (v17 == v11)
    return this;
LABEL_10:
  if ((v12 & 0x8000000000000000) != 0)
LABEL_12:
    abort();
  v18 = operator new(v12);
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  this[3].__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  v19 = (std::string::size_type)v18 + v12;
  this[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v18 + v12;
  memcpy(v18, v11, v12);
  this[3].__r_.__value_.__l.__size_ = v19;
  return this;
}

std::string *std::vector<cricket::StreamParams>::__push_back_slow_path<cricket::StreamParams const&>(std::string **a1, const cricket::StreamParams *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  cricket::StreamParams *v12;
  cricket::StreamParams *v13;
  unint64_t v14;
  std::string *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  cricket::StreamParams *v19;

  v2 = 0x8E38E38E38E38E39 * (((char *)a1[1] - (char *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x1C71C71C71C71C7)
    abort();
  if (0x1C71C71C71C71C72 * (((char *)a1[2] - (char *)*a1) >> 4) > v3)
    v3 = 0x1C71C71C71C71C72 * (((char *)a1[2] - (char *)*a1) >> 4);
  if (0x8E38E38E38E38E39 * (((char *)a1[2] - (char *)*a1) >> 4) >= 0xE38E38E38E38E3)
    v5 = 0x1C71C71C71C71C7;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x1C71C71C71C71C7)
    goto LABEL_21;
  v7 = 6 * v5;
  v8 = (std::string *)operator new(144 * v5);
  v9 = &v8[v7];
  v10 = cricket::StreamParams::StreamParams(v8 + 6 * v2, a2);
  v11 = v10 + 6;
  v12 = (cricket::StreamParams *)*a1;
  v13 = (cricket::StreamParams *)a1[1];
  if (v13 == (cricket::StreamParams *)*a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13)
      return v11;
    goto LABEL_15;
  }
  v14 = 0;
  do
  {
    v15 = &v10[v14 / 0x18];
    v16 = (char *)v13 + v14;
    v17 = *(_OWORD *)((char *)v13 + v14 - 144);
    v15[-6].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 128);
    *(_OWORD *)&v15[-6].__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)v16 - 17) = 0;
    *((_QWORD *)v16 - 16) = 0;
    *((_QWORD *)v16 - 18) = 0;
    v15[-5].__r_.__value_.__r.__words[0] = 0;
    v15[-5].__r_.__value_.__l.__size_ = 0;
    v15[-5].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v15[-5].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v13 + v14 - 120);
    v15[-5].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 104);
    *((_QWORD *)v16 - 15) = 0;
    *((_QWORD *)v16 - 14) = 0;
    *((_QWORD *)v16 - 13) = 0;
    v15[-4].__r_.__value_.__r.__words[0] = 0;
    v15[-4].__r_.__value_.__l.__size_ = 0;
    v15[-4].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v15[-4].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v13 + v14 - 96);
    v15[-4].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 80);
    *((_QWORD *)v16 - 12) = 0;
    *((_QWORD *)v16 - 11) = 0;
    *((_QWORD *)v16 - 10) = 0;
    v18 = *(_OWORD *)((char *)v13 + v14 - 72);
    v15[-3].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 56);
    *(_OWORD *)&v15[-3].__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)v16 - 8) = 0;
    *((_QWORD *)v16 - 7) = 0;
    *((_QWORD *)v16 - 9) = 0;
    v15[-2].__r_.__value_.__r.__words[0] = 0;
    v15[-2].__r_.__value_.__l.__size_ = 0;
    v15[-2].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v15[-2].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v13 + v14 - 48);
    v15[-2].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 32);
    *((_QWORD *)v16 - 6) = 0;
    *((_QWORD *)v16 - 5) = 0;
    *((_QWORD *)v16 - 4) = 0;
    v15[-1].__r_.__value_.__r.__words[0] = 0;
    v15[-1].__r_.__value_.__l.__size_ = 0;
    v15[-1].__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v15[-1].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v13 + v14 - 24);
    v15[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)((char *)v13 + v14 - 8);
    *((_QWORD *)v16 - 3) = 0;
    *((_QWORD *)v16 - 2) = 0;
    *((_QWORD *)v16 - 1) = 0;
    v14 -= 144;
  }
  while ((cricket::StreamParams *)((char *)v13 + v14) != v12);
  v13 = (cricket::StreamParams *)*a1;
  v19 = (cricket::StreamParams *)a1[1];
  *a1 = &v10[v14 / 0x18];
  a1[1] = v11;
  a1[2] = v9;
  while (v19 != v13)
  {
    v19 = (cricket::StreamParams *)((char *)v19 - 144);
    cricket::StreamParams::~StreamParams(v19);
  }
  if (v13)
LABEL_15:
    operator delete(v13);
  return v11;
}

void std::vector<cricket::StreamParams>::__assign_with_size[abi:sn180100]<cricket::StreamParams*,cricket::StreamParams*>(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  const cricket::StreamParams *v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0x8E38E38E38E38E39 * ((v8 - *(_QWORD *)a1) >> 4) >= a4)
  {
    v18 = *(std::string **)(a1 + 8);
    if (0x8E38E38E38E38E39 * (((char *)v18 - (char *)v9) >> 4) >= a4)
    {
      if (a2 == a3)
      {
        v24 = v9;
      }
      else
      {
        v24 = v9;
        do
        {
          cricket::StreamParams::operator=(v9, v6);
          v6 += 6;
          v9 += 6;
          v24 += 6;
        }
        while (v6 != a3);
        v18 = *(std::string **)(a1 + 8);
      }
      while (v18 != v24)
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v18[-6]);
      *(_QWORD *)(a1 + 8) = v24;
      return;
    }
    v19 = (const cricket::StreamParams *)((char *)a2 + 16 * (((char *)v18 - (char *)v9) >> 4));
    if (v18 != v9)
    {
      v20 = 16 * (((char *)v18 - (char *)v9) >> 4);
      do
      {
        cricket::StreamParams::operator=(v9, v6);
        v6 += 6;
        v9 += 6;
        v20 -= 144;
      }
      while (v20);
      v9 = *(std::string **)(a1 + 8);
    }
    v21 = v9;
    if (v19 == (const cricket::StreamParams *)a3)
    {
LABEL_26:
      *(_QWORD *)(a1 + 8) = v21;
      return;
    }
    v21 = v9;
    v22 = v9;
    while (v22)
    {
      v23 = cricket::StreamParams::StreamParams(v22, v19);
      v19 = (const cricket::StreamParams *)((char *)v19 + 144);
      v22 = v23 + 6;
      v21 += 6;
      if (v19 == (const cricket::StreamParams *)a3)
        goto LABEL_26;
    }
    __break(1u);
LABEL_36:
    abort();
  }
  if (v9)
  {
    v10 = *(std::string **)(a1 + 8);
    v11 = v9;
    if (v10 != v9)
    {
      do
        cricket::StreamParams::~StreamParams((cricket::StreamParams *)&v10[-6]);
      while (v10 != v9);
      v11 = *(std::string **)a1;
    }
    *(_QWORD *)(a1 + 8) = v9;
    operator delete(v11);
    v8 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  if (a4 > 0x1C71C71C71C71C7)
    goto LABEL_36;
  v12 = 0x8E38E38E38E38E39 * (v8 >> 4);
  v13 = 2 * v12;
  if (2 * v12 <= a4)
    v13 = a4;
  v14 = v12 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v13;
  if (v14 > 0x1C71C71C71C71C7)
    goto LABEL_36;
  v15 = 6 * v14;
  v16 = (std::string *)operator new(144 * v14);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v16;
  for (*(_QWORD *)(a1 + 16) = &v16[v15]; v6 != a3; v16 = v17 + 6)
  {
    v17 = cricket::StreamParams::StreamParams(v16, (const cricket::StreamParams *)v6);
    v6 += 6;
  }
  *(_QWORD *)(a1 + 8) = v16;
}

void cricket::MediaChannelParameters::ToStringMap(cricket::MediaChannelParameters *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  cricket::Codec *v4;
  size_t size;
  BOOL v6;
  std::string *p_p_new_stuff;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string *v11;
  char *v12;
  std::string::size_type v13;
  unint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v21;
  size_t v22;
  BOOL v23;
  std::string *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string *v31;
  _BYTE *v32;
  std::string::size_type v33;
  void *v34;
  char v35;
  unsigned int v36;
  webrtc::RtpExtension *v37;
  std::string::size_type v38;
  BOOL v39;
  const std::string::value_type *p_src;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string *v44;
  char *v45;
  std::string::size_type v46;
  unint64_t v47;
  uint64_t v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string *v53;
  std::string::size_type v55;
  std::string::size_type v56;
  BOOL v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  std::string *v61;
  char *v62;
  int v63;
  std::string::size_type v64;
  std::string *v65;
  _BYTE *v66;
  std::string::size_type v67;
  std::string __p_new_stuff;
  _QWORD v70[2];
  std::string v71;
  void *v72;
  _BYTE v73[15];
  char v74;
  void *v75[2];
  char v76;
  void *__p;
  _BYTE v78[15];
  char v79;
  __int128 __src;
  unsigned __int8 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  memset(&v71, 0, sizeof(v71));
  if (&v71 <= (std::string *)"[" && (char *)&v71.__r_.__value_.__l.__data_ + 1 > "[")
    goto LABEL_203;
  LOWORD(v71.__r_.__value_.__l.__data_) = 91;
  v3 = 1;
  *((_BYTE *)&v71.__r_.__value_.__s + 23) = 1;
  v4 = (cricket::Codec *)*((_QWORD *)this + 1);
  if (*((cricket::Codec **)this + 2) == v4)
  {
    v8 = 0;
    goto LABEL_77;
  }
  cricket::Codec::ToString(v4, (char *)&__p_new_stuff);
  if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p_new_stuff.__r_.__value_.__l.__size_;
    if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_203;
    p_p_new_stuff = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
    v6 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
    if (__p_new_stuff.__r_.__value_.__l.__size_)
    {
      if (!__p_new_stuff.__r_.__value_.__r.__words[0])
        goto LABEL_203;
    }
  }
  else
  {
    size = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
    v6 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) == 0;
    p_p_new_stuff = &__p_new_stuff;
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = 22;
  else
    v9 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    v10 = v71.__r_.__value_.__l.__size_;
  if (v9 - v10 >= size)
  {
    if (!v6)
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v71;
      else
        v11 = (std::string *)v71.__r_.__value_.__r.__words[0];
      v12 = (char *)v11 + v10;
      if ((std::string *)((char *)v11 + v10) <= p_p_new_stuff && &v12[size] > (char *)p_p_new_stuff)
        goto LABEL_203;
      memmove(v12, p_p_new_stuff, size);
      v13 = v10 + size;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v71.__r_.__value_.__l.__size_ = v10 + size;
        v11->__r_.__value_.__s.__data_[v13] = 0;
        if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_28;
        goto LABEL_18;
      }
      *((_BYTE *)&v71.__r_.__value_.__s + 23) = v13 & 0x7F;
      v11->__r_.__value_.__s.__data_[v13] = 0;
    }
    if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_18;
  }
  std::string::__grow_by_and_replace(&v71, v9, v10 + size - v9, v10, v10, 0, size, (const std::string::value_type *)p_p_new_stuff);
  if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
LABEL_28:
  if (0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3) >= 2)
  {
    v14 = 1;
    v15 = 216;
    do
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = 22;
      else
        v16 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v17 = v71.__r_.__value_.__l.__size_;
      if (v16 - v17 >= 2)
      {
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v71;
        else
          v19 = (std::string *)v71.__r_.__value_.__r.__words[0];
        if ((char *)v19 + v17 <= ", " && &v19->__r_.__value_.__s.__data_[v17 + 2] > ", ")
          goto LABEL_203;
        *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v17) = 8236;
        v21 = v17 + 2;
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          v71.__r_.__value_.__l.__size_ = v17 + 2;
        else
          *((_BYTE *)&v71.__r_.__value_.__s + 23) = v21 & 0x7F;
        v19->__r_.__value_.__s.__data_[v21] = 0;
        v18 = *((_QWORD *)this + 1);
        if (0x84BDA12F684BDA13 * ((*((_QWORD *)this + 2) - v18) >> 3) <= v14)
          goto LABEL_203;
      }
      else
      {
        std::string::__grow_by_and_replace(&v71, v16, v17 - v16 + 2, v17, v17, 0, 2uLL, ", ");
        v18 = *((_QWORD *)this + 1);
        if (0x84BDA12F684BDA13 * ((*((_QWORD *)this + 2) - v18) >> 3) <= v14)
          goto LABEL_203;
      }
      cricket::Codec::ToString((cricket::Codec *)(v18 + v15), (char *)&__p_new_stuff);
      if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
      {
        v22 = __p_new_stuff.__r_.__value_.__l.__size_;
        if ((__p_new_stuff.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_203;
        v24 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
        v23 = __p_new_stuff.__r_.__value_.__l.__size_ == 0;
        if (__p_new_stuff.__r_.__value_.__l.__size_)
        {
          if (!__p_new_stuff.__r_.__value_.__r.__words[0])
            goto LABEL_203;
        }
      }
      else
      {
        v22 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
        v23 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) == 0;
        v24 = &__p_new_stuff;
      }
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = 22;
      else
        v25 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v26 = v71.__r_.__value_.__l.__size_;
      if (v25 - v26 >= v22)
      {
        if (!v23)
        {
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &v71;
          else
            v27 = (std::string *)v71.__r_.__value_.__r.__words[0];
          v28 = (char *)v27 + v26;
          if ((std::string *)((char *)v27 + v26) <= v24 && &v28[v22] > (char *)v24)
            goto LABEL_203;
          memmove(v28, v24, v22);
          v29 = v26 + v22;
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            v71.__r_.__value_.__l.__size_ = v26 + v22;
          else
            *((_BYTE *)&v71.__r_.__value_.__s + 23) = v29 & 0x7F;
          v27->__r_.__value_.__s.__data_[v29] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v71, v25, v26 + v22 - v25, v26, v26, 0, v22, (const std::string::value_type *)v24);
      }
      if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p_new_stuff.__r_.__value_.__l.__data_);
      ++v14;
      v15 += 216;
    }
    while (v14 < 0x84BDA12F684BDA13 * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 3));
  }
  v3 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  v8 = v71.__r_.__value_.__l.__size_;
LABEL_77:
  if ((v3 & 0x80u) == 0)
    v30 = 22;
  else
    v30 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v3 & 0x80u) == 0)
    v8 = v3;
  if (v30 == v8)
  {
    std::string::__grow_by_and_replace(&v71, v30, 1uLL, v30, v30, 0, 1uLL, "]");
  }
  else
  {
    v31 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if ((v3 & 0x80u) == 0)
      v31 = &v71;
    v32 = (char *)v31 + v8;
    if ((char *)v31 + v8 <= "]" && v32 + 1 > "]")
      goto LABEL_203;
    *v32 = 93;
    v33 = v8 + 1;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      v71.__r_.__value_.__l.__size_ = v33;
    else
      *((_BYTE *)&v71.__r_.__value_.__s + 23) = v33 & 0x7F;
    v31->__r_.__value_.__s.__data_[v33] = 0;
  }
  v70[0] = v71.__r_.__value_.__l.__size_;
  v34 = (void *)v71.__r_.__value_.__r.__words[0];
  *(_QWORD *)((char *)v70 + 7) = *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 7);
  v35 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  *((_BYTE *)&v71.__r_.__value_.__s + 23) = 6;
  if (&v71 <= (std::string *)"codecs" && (char *)v71.__r_.__value_.__r.__words + 6 > "codecs")
    goto LABEL_203;
  strcpy((char *)&v71, "codecs");
  v72 = v34;
  *(_QWORD *)v73 = v70[0];
  *(_QWORD *)&v73[7] = *(_QWORD *)((char *)v70 + 7);
  v74 = v35;
  v70[0] = 0;
  *(_QWORD *)((char *)v70 + 7) = 0;
  memset(&__p_new_stuff, 0, sizeof(__p_new_stuff));
  if (&__p_new_stuff <= (std::string *)"[" && (char *)&__p_new_stuff.__r_.__value_.__l.__data_ + 1 > "[")
    goto LABEL_203;
  LOWORD(__p_new_stuff.__r_.__value_.__l.__data_) = 91;
  v36 = 1;
  *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = 1;
  v37 = (webrtc::RtpExtension *)*((_QWORD *)this + 4);
  if (*((webrtc::RtpExtension **)this + 5) == v37)
  {
    v41 = 0;
    goto LABEL_173;
  }
  webrtc::RtpExtension::ToString(v37, (char *)&__src);
  if ((char)v81 < 0)
  {
    v38 = *((_QWORD *)&__src + 1);
    if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) != 0)
      goto LABEL_203;
    p_src = (const std::string::value_type *)__src;
    v39 = *((_QWORD *)&__src + 1) == 0;
    if (*((_QWORD *)&__src + 1))
    {
      if (!(_QWORD)__src)
        goto LABEL_203;
    }
  }
  else
  {
    v38 = v81;
    v39 = v81 == 0;
    p_src = (const std::string::value_type *)&__src;
  }
  if ((__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = 22;
  else
    v42 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
  else
    v43 = __p_new_stuff.__r_.__value_.__l.__size_;
  if (v42 - v43 < v38)
  {
    std::string::__grow_by_and_replace(&__p_new_stuff, v42, v43 + v38 - v42, v43, v43, 0, v38, p_src);
    if ((char)v81 < 0)
      goto LABEL_111;
LABEL_122:
    if (*((_QWORD *)this + 5) - *((_QWORD *)this + 4) >= 0x21uLL)
    {
LABEL_123:
      v47 = 1;
      v48 = 32;
      while (1)
      {
        while (1)
        {
          v50 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? 22
              : (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v51 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2])
              : __p_new_stuff.__r_.__value_.__l.__size_;
          if (v50 - v51 >= 2)
          {
            if ((__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v53 = &__p_new_stuff;
            else
              v53 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
            if ((char *)v53 + v51 <= ", " && &v53->__r_.__value_.__s.__data_[v51 + 2] > ", ")
              goto LABEL_203;
            *(_WORD *)((char *)&v53->__r_.__value_.__l.__data_ + v51) = 8236;
            v55 = v51 + 2;
            if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
            {
              __p_new_stuff.__r_.__value_.__l.__size_ = v51 + 2;
              v53->__r_.__value_.__s.__data_[v55] = 0;
              v52 = *((_QWORD *)this + 4);
              if (v47 >= (*((_QWORD *)this + 5) - v52) >> 5)
                goto LABEL_203;
            }
            else
            {
              *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = v55 & 0x7F;
              v53->__r_.__value_.__s.__data_[v55] = 0;
              v52 = *((_QWORD *)this + 4);
              if (v47 >= (*((_QWORD *)this + 5) - v52) >> 5)
                goto LABEL_203;
            }
          }
          else
          {
            std::string::__grow_by_and_replace(&__p_new_stuff, v50, v51 - v50 + 2, v51, v51, 0, 2uLL, ", ");
            v52 = *((_QWORD *)this + 4);
            if (v47 >= (*((_QWORD *)this + 5) - v52) >> 5)
              goto LABEL_203;
          }
          webrtc::RtpExtension::ToString((webrtc::RtpExtension *)(v52 + v48), (char *)&__src);
          if ((char)v81 < 0)
          {
            v56 = *((_QWORD *)&__src + 1);
            if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) != 0)
              goto LABEL_203;
            v58 = (const std::string::value_type *)__src;
            v57 = *((_QWORD *)&__src + 1) == 0;
            if (*((_QWORD *)&__src + 1))
            {
              if (!(_QWORD)__src)
                goto LABEL_203;
            }
          }
          else
          {
            v56 = v81;
            v57 = v81 == 0;
            v58 = (const std::string::value_type *)&__src;
          }
          v59 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? 22
              : (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          v60 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2])
              : __p_new_stuff.__r_.__value_.__l.__size_;
          if (v59 - v60 >= v56)
            break;
          std::string::__grow_by_and_replace(&__p_new_stuff, v59, v60 + v56 - v59, v60, v60, 0, v56, v58);
          if ((char)v81 < 0)
            goto LABEL_161;
LABEL_127:
          ++v47;
          v48 += 32;
          if (v47 >= (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5)
            goto LABEL_172;
        }
        if (!v57)
        {
          if ((__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v61 = &__p_new_stuff;
          else
            v61 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
          v62 = (char *)v61 + v60;
          if ((char *)v61 + v60 <= v58 && &v62[v56] > v58)
            goto LABEL_203;
          memmove(v62, v58, v56);
          v49 = v60 + v56;
          if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
          {
            __p_new_stuff.__r_.__value_.__l.__size_ = v60 + v56;
            v61->__r_.__value_.__s.__data_[v49] = 0;
            if ((char)v81 < 0)
              goto LABEL_161;
            goto LABEL_127;
          }
          *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = v49 & 0x7F;
          v61->__r_.__value_.__s.__data_[v49] = 0;
        }
        if (((char)v81 & 0x80000000) == 0)
          goto LABEL_127;
LABEL_161:
        operator delete((void *)__src);
        ++v47;
        v48 += 32;
        if (v47 >= (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 5)
          goto LABEL_172;
      }
    }
    goto LABEL_172;
  }
  if (v39)
    goto LABEL_121;
  if ((__p_new_stuff.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v44 = &__p_new_stuff;
  else
    v44 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
  v45 = (char *)v44 + v43;
  if ((char *)v44 + v43 <= p_src && &v45[v38] > p_src)
    goto LABEL_203;
  memmove(v45, p_src, v38);
  v46 = v43 + v38;
  if ((SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = v46 & 0x7F;
    v44->__r_.__value_.__s.__data_[v46] = 0;
LABEL_121:
    if (((char)v81 & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_111;
  }
  __p_new_stuff.__r_.__value_.__l.__size_ = v43 + v38;
  v44->__r_.__value_.__s.__data_[v46] = 0;
  if (((char)v81 & 0x80000000) == 0)
    goto LABEL_122;
LABEL_111:
  operator delete((void *)__src);
  if (*((_QWORD *)this + 5) - *((_QWORD *)this + 4) >= 0x21uLL)
    goto LABEL_123;
LABEL_172:
  v36 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
  v41 = __p_new_stuff.__r_.__value_.__l.__size_;
LABEL_173:
  v63 = (char)v36;
  if ((v36 & 0x80u) == 0)
    v64 = 22;
  else
    v64 = (__p_new_stuff.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v36 & 0x80u) == 0)
    v41 = v36;
  if (v64 == v41)
  {
    std::string::__grow_by_and_replace(&__p_new_stuff, v64, 1uLL, v64, v64, 0, 1uLL, "]");
  }
  else
  {
    v65 = (std::string *)__p_new_stuff.__r_.__value_.__r.__words[0];
    if (v63 >= 0)
      v65 = &__p_new_stuff;
    v66 = (char *)v65 + v41;
    if ((char *)v65 + v41 <= "]" && v66 + 1 > "]")
      goto LABEL_203;
    *v66 = 93;
    v67 = v41 + 1;
    if (SHIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]) < 0)
      __p_new_stuff.__r_.__value_.__l.__size_ = v67;
    else
      *((_BYTE *)&__p_new_stuff.__r_.__value_.__s + 23) = v67 & 0x7F;
    v65->__r_.__value_.__s.__data_[v67] = 0;
  }
  *(_QWORD *)&__src = __p_new_stuff.__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&__src + 7) = *(std::string::size_type *)((char *)&__p_new_stuff.__r_.__value_.__r.__words[1] + 7);
  v76 = 10;
  if (v75 <= (void **)"extensions" && (char *)&v75[1] + 2 > "extensions")
  {
LABEL_203:
    __break(1u);
    return;
  }
  strcpy((char *)v75, "extensions");
  __p = (void *)__p_new_stuff.__r_.__value_.__r.__words[0];
  *(_QWORD *)v78 = __src;
  *(_QWORD *)&v78[7] = *(_QWORD *)((char *)&__src + 7);
  v79 = HIBYTE(__p_new_stuff.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a2, (uint64_t *)(a2 + 8), (uint64_t)&v71, (uint64_t)&v71);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a2, (uint64_t *)(a2 + 8), (uint64_t)v75, (uint64_t)v75);
  if (v79 < 0)
  {
    operator delete(__p);
    if ((v76 & 0x80000000) == 0)
    {
LABEL_192:
      if ((v74 & 0x80000000) == 0)
        goto LABEL_193;
      goto LABEL_197;
    }
  }
  else if ((v76 & 0x80000000) == 0)
  {
    goto LABEL_192;
  }
  operator delete(v75[0]);
  if ((v74 & 0x80000000) == 0)
  {
LABEL_193:
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_198:
    operator delete(v71.__r_.__value_.__l.__data_);
    return;
  }
LABEL_197:
  operator delete(v72);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_198;
}

void cricket::MediaChannelParameters::~MediaChannelParameters(cricket::MediaChannelParameters *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void *v7;
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (**v10)(_QWORD);
  BOOL v11;

  *(_QWORD *)this = &unk_24C0B0D28;
  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    v4 = (void *)*((_QWORD *)this + 4);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v2;
    operator delete(v4);
  }
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 1);
  if (v5)
  {
    v6 = (void (***)(_QWORD))*((_QWORD *)this + 2);
    v7 = (void *)*((_QWORD *)this + 1);
    if (v6 != v5)
    {
      v8 = v6 - 27;
      v9 = v6 - 27;
      do
      {
        v10 = *v9;
        v9 -= 27;
        (*v10)(v8);
        v11 = v8 == v5;
        v8 = v9;
      }
      while (!v11);
      v7 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v5;
    operator delete(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

cricket::MediaChannelParameters *cricket::MediaChannelParameters::MediaChannelParameters(cricket::MediaChannelParameters *this, const cricket::MediaChannelParameters *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  std::string *v18;
  __int128 *v19;
  __int128 v20;
  __int16 v21;

  *(_QWORD *)this = &unk_24C0B0D28;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  v6 = v5 - v4;
  if (v5 != v4)
  {
    v7 = 0x84BDA12F684BDA13 * (v6 >> 3);
    if (v7 >= 0x12F684BDA12F685)
      goto LABEL_15;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = &v8[216 * v7];
    do
    {
      cricket::Codec::Codec((cricket::Codec *)&v8[v9], (const cricket::Codec *)(v4 + v9));
      v9 += 216;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 2) = &v8[v9];
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v10 = *((_QWORD *)a2 + 4);
  v11 = *((_QWORD *)a2 + 5);
  v12 = v11 - v10;
  if (v11 == v10)
    goto LABEL_14;
  if (v12 < 0)
LABEL_15:
    abort();
  v13 = v12 >> 5;
  v14 = (char *)operator new(v12);
  v15 = 0;
  *((_QWORD *)this + 4) = v14;
  *((_QWORD *)this + 5) = v14;
  *((_QWORD *)this + 6) = &v14[32 * v13];
  do
  {
    v18 = (std::string *)&v14[v15];
    v19 = (__int128 *)(v10 + v15);
    if (*(char *)(v10 + v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v19, *((_QWORD *)v19 + 1));
    }
    else
    {
      v20 = *v19;
      v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v20;
    }
    v16 = &v14[v15];
    v17 = *(_DWORD *)(v10 + v15 + 24);
    v16[28] = *(_BYTE *)(v10 + v15 + 28);
    *((_DWORD *)v16 + 6) = v17;
    v15 += 32;
  }
  while (v10 + v15 != v11);
  *((_QWORD *)this + 5) = &v14[v15];
LABEL_14:
  v21 = *((_WORD *)a2 + 28);
  *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
  *((_WORD *)this + 28) = v21;
  return this;
}

void cricket::SenderParameters::~SenderParameters(void **this)
{
  void **v2;
  char *v3;
  void **v4;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *this = &unk_24C0B0D00;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
    {
LABEL_3:
      v3 = (char *)this[1];
      if (!v3)
        return;
      goto LABEL_13;
    }
  }
  else
  {
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
      goto LABEL_3;
  }
  v4 = (void **)this[5];
  if (v4 == v2)
  {
    this[5] = v2;
    operator delete(v2);
    v3 = (char *)this[1];
    if (!v3)
      return;
    goto LABEL_13;
  }
  do
  {
    if (*((char *)v4 - 9) < 0)
      operator delete(*(v4 - 4));
    v4 -= 4;
  }
  while (v4 != v2);
  v5 = this[4];
  this[5] = v2;
  operator delete(v5);
  v3 = (char *)this[1];
  if (v3)
  {
LABEL_13:
    v6 = (char *)this[2];
    v7 = v3;
    if (v6 != v3)
    {
      v8 = v6 - 216;
      v9 = v6 - 216;
      do
      {
        v10 = *(void (***)(char *))v9;
        v9 -= 216;
        (*v10)(v8);
        v11 = v8 == v3;
        v8 = v9;
      }
      while (!v11);
      v7 = (char *)this[1];
    }
    this[2] = v3;
    operator delete(v7);
  }
}

{
  void **v2;
  char *v3;
  void **v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void (**v10)(char *);
  BOOL v11;

  *this = &unk_24C0B0D00;
  if (*((char *)this + 87) < 0)
  {
    operator delete(this[8]);
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
    {
LABEL_3:
      v3 = (char *)this[1];
      if (!v3)
        goto LABEL_19;
      goto LABEL_13;
    }
  }
  else
  {
    *this = &unk_24C0B0D28;
    v2 = (void **)this[4];
    if (!v2)
      goto LABEL_3;
  }
  v4 = (void **)this[5];
  v5 = v2;
  if (v4 != v2)
  {
    do
    {
      if (*((char *)v4 - 9) < 0)
        operator delete(*(v4 - 4));
      v4 -= 4;
    }
    while (v4 != v2);
    v5 = (void **)this[4];
  }
  this[5] = v2;
  operator delete(v5);
  v3 = (char *)this[1];
  if (!v3)
LABEL_19:
    JUMPOUT(0x20BD0ADECLL);
LABEL_13:
  v6 = (char *)this[2];
  v7 = v3;
  if (v6 != v3)
  {
    v8 = v6 - 216;
    v9 = v6 - 216;
    do
    {
      v10 = *(void (***)(char *))v9;
      v9 -= 216;
      (*v10)(v8);
      v11 = v8 == v3;
      v8 = v9;
    }
    while (!v11);
    v7 = (char *)this[1];
  }
  this[2] = v3;
  operator delete(v7);
  goto LABEL_19;
}

void cricket::SenderParameters::ToStringMap(std::string::size_type *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  size_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  const void **v11;
  char *v12;
  char *v13;
  const std::string::value_type **v14;
  int v15;
  uint64_t **v16;
  _OWORD *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  std::string::size_type v22;
  const void **v23;
  char *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  std::string *v30;
  std::string *p_str;
  size_t size;
  const std::string::value_type *v33;
  const void **v34;
  uint64_t **v35;
  char *v36;
  std::string::size_type v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  void *__p[2];
  unint64_t v42;
  uint64_t v43;
  std::string __str;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  cricket::MediaChannelParameters::ToStringMap((cricket::MediaChannelParameters *)this, a2);
  v4 = snprintf((char *)&__str, 0x20uLL, "%d", *((_DWORD *)this + 15));
  if (v4 < 0)
LABEL_69:
    abort();
  v5 = v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (std::string *)operator new(v7 + 1);
    __p[1] = (void *)v5;
    v42 = v8 | 0x8000000000000000;
    __p[0] = v6;
  }
  else
  {
    HIBYTE(v42) = v4;
    v6 = (std::string *)__p;
  }
  v9 = (char *)v6 + v5;
  if (v6 <= &__str && (std::string *)((char *)v6 + v5) > &__str)
    goto LABEL_68;
  if ((_DWORD)v5)
    memcpy(v6, &__str, v5);
  *v9 = 0;
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 17;
  if (&__str <= (std::string *)"max_bandwidth_bps"
    && (char *)&__str.__r_.__value_.__r.__words[2] + 1 > "max_bandwidth_bps")
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  strcpy((char *)&__str, "max_bandwidth_bps");
  v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, &v43, (const void **)&__str.__r_.__value_.__l.__data_);
  v12 = (char *)*v11;
  if (*v11)
  {
    v13 = v12 + 56;
    if ((v12[79] & 0x80000000) == 0)
      goto LABEL_18;
LABEL_26:
    operator delete(*(void **)v13);
    goto LABEL_18;
  }
  v16 = (uint64_t **)v11;
  v17 = operator new(0x50uLL);
  v17[2] = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  v18 = __str.__r_.__value_.__r.__words[2];
  memset(&__str, 0, sizeof(__str));
  *((_QWORD *)v17 + 6) = v18;
  *((_QWORD *)v17 + 7) = 0;
  *((_QWORD *)v17 + 8) = 0;
  *((_QWORD *)v17 + 9) = 0;
  v19 = v43;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = v19;
  *v16 = (uint64_t *)v17;
  v20 = **(_QWORD **)a2;
  v21 = (uint64_t *)v17;
  if (v20)
  {
    *(_QWORD *)a2 = v20;
    v21 = *v16;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 8), v21);
  ++*(_QWORD *)(a2 + 16);
  v13 = (char *)v17 + 56;
  if (*((char *)v17 + 79) < 0)
    goto LABEL_26;
LABEL_18:
  *(_OWORD *)v13 = *(_OWORD *)__p;
  *((_QWORD *)v13 + 2) = v42;
  HIBYTE(v42) = 0;
  LOBYTE(__p[0]) = 0;
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0
    || (operator delete(__str.__r_.__value_.__l.__data_), (SHIBYTE(v42) & 0x80000000) == 0))
  {
    v14 = (const std::string::value_type **)(this + 8);
    v15 = *((char *)this + 87);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_21;
LABEL_28:
    v22 = this[9];
    if (v22)
    {
      std::string::__init_copy_ctor_external(&__str, *v14, v22);
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  operator delete(__p[0]);
  v14 = (const std::string::value_type **)(this + 8);
  v15 = *((char *)this + 87);
  if (v15 < 0)
    goto LABEL_28;
LABEL_21:
  if (v15)
  {
    __str = *(std::string *)v14;
    goto LABEL_33;
  }
LABEL_30:
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 9;
  if (&__str <= (std::string *)"<not set>" && ((unint64_t)&__str | 9) > (unint64_t)"<not set>")
    goto LABEL_68;
  strcpy((char *)&__str, "<not set>");
LABEL_33:
  HIBYTE(v42) = 3;
  if (__p <= (void **)"mid" && (char *)__p + 3 > "mid")
    goto LABEL_68;
  LODWORD(__p[0]) = 6580589;
  v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, &v43, (const void **)__p);
  v24 = (char *)*v23;
  if (!*v23)
  {
    v25 = (uint64_t **)v23;
    v24 = (char *)operator new(0x50uLL);
    *((_OWORD *)v24 + 2) = *(_OWORD *)__p;
    v26 = v42;
    __p[0] = 0;
    __p[1] = 0;
    v42 = 0;
    *((_QWORD *)v24 + 6) = v26;
    *((_QWORD *)v24 + 7) = 0;
    *((_QWORD *)v24 + 8) = 0;
    *((_QWORD *)v24 + 9) = 0;
    v27 = v43;
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = v27;
    *v25 = (uint64_t *)v24;
    v28 = **(_QWORD **)a2;
    v29 = (uint64_t *)v24;
    if (v28)
    {
      *(_QWORD *)a2 = v28;
      v29 = *v25;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 8), v29);
    ++*(_QWORD *)(a2 + 16);
  }
  v30 = (std::string *)(v24 + 56);
  if (v24 + 56 == (char *)&__str)
  {
LABEL_51:
    if (SHIBYTE(v42) < 0)
      goto LABEL_66;
    goto LABEL_52;
  }
  if (v24[79] < 0)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v30, (const std::string::value_type *)p_str, size);
    goto LABEL_51;
  }
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v30, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    if (SHIBYTE(v42) < 0)
      goto LABEL_66;
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    *((_QWORD *)v24 + 9) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
    if (SHIBYTE(v42) < 0)
    {
LABEL_66:
      operator delete(__p[0]);
      if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_67;
    }
  }
LABEL_52:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_53;
LABEL_67:
  operator delete(__str.__r_.__value_.__l.__data_);
LABEL_53:
  if (*((_BYTE *)this + 88))
    v33 = "true";
  else
    v33 = "false";
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 18;
  if (&__str <= (std::string *)"extmap-allow-mixed"
    && (char *)&__str.__r_.__value_.__r.__words[2] + 2 > "extmap-allow-mixed")
  {
    goto LABEL_68;
  }
  strcpy((char *)&__str, "extmap-allow-mixed");
  v34 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a2, __p, (const void **)&__str.__r_.__value_.__l.__data_);
  if (*v34)
  {
    std::string::__assign_external((std::string *)((char *)*v34 + 56), v33);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_64:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  v35 = (uint64_t **)v34;
  v36 = (char *)operator new(0x50uLL);
  *((_OWORD *)v36 + 2) = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  v37 = __str.__r_.__value_.__r.__words[2];
  memset(&__str, 0, sizeof(__str));
  *((_QWORD *)v36 + 6) = v37;
  *((_QWORD *)v36 + 7) = 0;
  *((_QWORD *)v36 + 8) = 0;
  *((_QWORD *)v36 + 9) = 0;
  v38 = __p[0];
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = v38;
  *v35 = (uint64_t *)v36;
  v39 = **(_QWORD **)a2;
  v40 = (uint64_t *)v36;
  if (v39)
  {
    *(_QWORD *)a2 = v39;
    v40 = *v35;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 8), v40);
  ++*(_QWORD *)(a2 + 16);
  std::string::__assign_external((std::string *)(v36 + 56), v33);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_64;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_0 &,BOOL>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 72))(v3, a2);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_1 &,std::optional<rtc::NetworkRoute>>(_QWORD ***a1, __int128 *a2)
{
  _QWORD **v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  rtc::webrtc_checks_impl *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  int v21;
  void *__p[2];
  _BYTE v23[20];
  void *v24;
  char v25;

  v2 = *a1;
  v19 = *a2;
  v20 = a2[1];
  v21 = *((_DWORD *)a2 + 8);
  v3 = *((unsigned __int8 *)a2 + 36);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v4 = ((uint64_t (*)(_QWORD **))(*v2)[12])(v2);
    if (*(char *)(v4 + 23) >= 0)
      v5 = v4;
    else
      v5 = *(_QWORD *)v4;
    v6 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD *))(*v2[3] + 32))(v2[3]);
    switch((int)v6)
    {
      case 0:
        v23[7] = 5;
        v7 = "audio";
        if (__p > (void **)"audio")
          goto LABEL_13;
        goto LABEL_12;
      case 1:
        v23[7] = 5;
        v7 = "video";
        if (__p > (void **)"video")
          goto LABEL_13;
LABEL_12:
        if ((char *)__p + 5 > v7)
        {
LABEL_22:
          __break(1u);
LABEL_23:
          rtc::webrtc_checks_impl::UnreachableCodeReached(v6);
        }
LABEL_13:
        LODWORD(__p[0]) = *(_DWORD *)v7;
        WORD2(__p[0]) = *((unsigned __int8 *)v7 + 4);
        break;
      case 2:
        v23[7] = 4;
        if (__p <= (void **)"data" && (char *)__p + 4 > "data")
          goto LABEL_22;
        strcpy((char *)__p, "data");
        break;
      case 3:
        v23[7] = 0;
        LOBYTE(__p[0]) = 0;
        break;
      default:
        goto LABEL_23;
    }
    rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&v24, v5, __p);
    if ((v23[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
    if (v25 < 0)
      operator delete(v24);
  }
  LOBYTE(__p[0]) = 0;
  *(void **)((char *)__p + 4) = 0;
  BYTE4(__p[1]) = 0;
  *(_QWORD *)v23 = 0;
  v23[8] = 0;
  *(_QWORD *)&v23[12] = 0xFFFFFFFFLL;
  if (v3)
  {
    *(_OWORD *)__p = v19;
    *(_OWORD *)v23 = v20;
    *(_DWORD *)&v23[16] = v21;
  }
  v15 = ((uint64_t (*)(_QWORD **))(*v2)[5])(v2);
  v16 = ((uint64_t (*)(_QWORD **))(*v2)[11])(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v15 + 80))(v15, v16, v17, __p);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_2 &,BOOL>(cricket::BaseChannel **a1, int a2)
{
  cricket::BaseChannel *v2;

  v2 = *a1;
  if (a2)
    cricket::BaseChannel::ChannelWritable_n(v2);
  else
    cricket::BaseChannel::ChannelNotWritable_n(v2);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ConnectToRtpTransport_n(void)::$_3 &,rtc::SentPacket const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 64))(v3, a2);
}

void absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::SetRtpTransport(webrtc::RtpTransportInternal *)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 256);
  for (i = *(_QWORD *)(*a1 + 264); i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  *(_QWORD *)(v1 + 264) = v2;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::Enable(BOOL)::$_1 &&>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  rtc::webrtc_checks_impl *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  char v16;

  v1 = *(_QWORD *)result;
  if (!*(_BYTE *)(result + 8))
    return cricket::BaseChannel::DisableMedia_w(*(_QWORD *)result);
  if (!*(_BYTE *)(v1 + 168))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 96))(v1);
      if (*(char *)(v2 + 23) >= 0)
        v3 = v2;
      else
        v3 = *(_QWORD *)v2;
      v4 = (rtc::webrtc_checks_impl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 32))(*(_QWORD *)(v1 + 24));
      switch((int)v4)
      {
        case 0:
          v16 = 5;
          v5 = "audio";
          if (v15 > (void **)"audio")
            goto LABEL_17;
          goto LABEL_16;
        case 1:
          v16 = 5;
          v5 = "video";
          if (v15 > (void **)"video")
            goto LABEL_17;
LABEL_16:
          if ((char *)v15 + 5 > v5)
          {
LABEL_24:
            __break(1u);
LABEL_25:
            rtc::webrtc_checks_impl::UnreachableCodeReached(v4);
          }
LABEL_17:
          LODWORD(v15[0]) = *(_DWORD *)v5;
          WORD2(v15[0]) = *((unsigned __int8 *)v5 + 4);
          break;
        case 2:
          v16 = 4;
          if (v15 <= (void **)"data" && (char *)v15 + 4 > "data")
            goto LABEL_24;
          strcpy((char *)v15, "data");
          break;
        case 3:
          v16 = 0;
          LOBYTE(v15[0]) = 0;
          break;
        default:
          goto LABEL_25;
      }
      rtc::StringFormat((rtc *)"{mid: %s, media_type: %s}", (char *)&__p, v3, v15);
      if (v16 < 0)
        operator delete(v15[0]);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/channel.cc");
      if (v14 < 0)
        operator delete(__p);
    }
    *(_BYTE *)(v1 + 168) = 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v1);
  }
  return result;
}

void rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(BOOL,std::optional<std::vector<webrtc::RtpExtension>>,std::string &)::$_0,BOOL,void>(cricket::BaseChannel::MaybeUpdateDemuxerAndRtpExtensions_w(BOOL,std::optional<std::vector<webrtc::RtpExtension>>,std::string &)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  std::string *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  std::string *p_p;
  uint64_t v9;
  __int128 v10;
  std::string __p;
  __int128 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD ***)v2;
  if (*(_BYTE *)(*(_QWORD *)(v2 + 8) + 24))
    (*(void (**)(_QWORD *))(*v3[13] + 88))(v3[13]);
  if (**(_BYTE **)(v2 + 16)
    && (v4 = (std::string *)(v3 + 35),
        ((*(uint64_t (**)(_QWORD *, _QWORD **, _QWORD **))(*v3[13] + 104))(v3[13], v3 + 35, v3 + 2) & 1) == 0))
  {
    v6 = ((uint64_t (*)(_QWORD **))(*v3)[12])(v3);
    if (*(char *)(v6 + 23) >= 0)
      v7 = v6;
    else
      v7 = *(_QWORD *)v6;
    webrtc::RtpDemuxerCriteria::ToString(v4, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    rtc::StringFormat((rtc *)"Failed to apply demuxer criteria for '%s': '%s'.", (char *)&v12, v7, p_p);
    v9 = *(_QWORD *)(v2 + 24);
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    v10 = v12;
    *(_QWORD *)(v9 + 16) = v13;
    *(_OWORD *)v9 = v10;
    HIBYTE(v13) = 0;
    LOBYTE(v12) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  **(_BYTE **)a1 = v5;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<BOOL rtc::Thread::BlockingCall<cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0,BOOL,void>(cricket::BaseChannel::RegisterRtpDemuxerSink_w(void)::$_0 &&,webrtc::Location const&)::{lambda(void)#1}>(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(*(_QWORD *)v2 + 104);
  if (result)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 104))(result, v2 + 8, *(_QWORD *)v2 + 16);
  **(_BYTE **)a1 = result;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::BaseChannel::ChannelWritable_n(void)::$_0 &&>(_BYTE **a1)
{
  _BYTE *v1;

  v1 = *a1;
  v1[162] = 1;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 200))(v1);
}

char *std::vector<unsigned int>::emplace<unsigned int const&>(char **a1, uint64_t a2, int *a3)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  int64_t v12;
  uint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  char *v36;
  char *v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  char *v48;
  char *v49;
  void *__dst;
  char *v51;
  _QWORD *v52;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 >> 2;
  v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFFCLL];
  v10 = (unint64_t)a1[2];
  if (v5 < v10)
  {
    if (v9 != (char *)v5)
    {
      v11 = *a3;
      v12 = v5 - (_QWORD)(v9 + 4);
      v13 = v12 >> 2;
      v14 = (int *)(v5 - 4);
      if (v5 < 4)
      {
        v18 = a1[1];
      }
      else
      {
        v15 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v12;
        v16 = (unint64_t)&v6[v15 + 4];
        if (v5 > v16)
          v16 = (unint64_t)a1[1];
        v17 = v16 + ~(unint64_t)v6 - v15;
        if (v17 >= 0x2C)
        {
          v18 = a1[1];
          if ((unint64_t)(v9 + 4 - &v6[v7 & 0xFFFFFFFFFFFFFFFCLL]) >= 0x20)
          {
            v40 = (v17 >> 2) + 1;
            v41 = 4 * (v40 & 0x7FFFFFFFFFFFFFF8);
            v14 = (int *)((char *)v14 + v41);
            v18 = (char *)(v5 + v41);
            v42 = (_OWORD *)(v5 + 16);
            v43 = &v6[4 * v13 + 16 + 4 * v8];
            v44 = v40 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 += 2;
              v43 += 32;
              v44 -= 8;
            }
            while (v44);
            if (v40 == (v40 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_40;
          }
        }
        else
        {
          v18 = a1[1];
        }
        do
        {
          v46 = *v14++;
          *(_DWORD *)v18 = v46;
          v18 += 4;
        }
        while ((unint64_t)v14 < v5);
      }
LABEL_40:
      a1[1] = v18;
      if ((char *)v5 != v9 + 4)
        memmove((void *)(v5 - 4 * v13), v9, v12);
      *(_DWORD *)v9 = v11;
      return v9;
    }
    if (v6)
    {
      *(_DWORD *)v9 = *a3;
      a1[1] = v9 + 4;
      return v9;
    }
    __break(1u);
LABEL_45:
    abort();
  }
  v19 = ((uint64_t)(v5 - (_QWORD)v6) >> 2) + 1;
  if (v19 >> 62)
    goto LABEL_45;
  v20 = v10 - (_QWORD)v6;
  if (v20 >> 1 > v19)
    v19 = v20 >> 1;
  if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
    v21 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v21 = v19;
  v52 = a1 + 2;
  if (v21)
  {
    if (v21 >> 62)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v22 = (char *)operator new(4 * v21);
  }
  else
  {
    v22 = 0;
  }
  v48 = v22;
  v49 = &v22[4 * v8];
  __dst = v49;
  v51 = &v22[4 * v21];
  std::__split_buffer<unsigned int>::emplace_back<unsigned int const&>(&v48, a3);
  v23 = v49;
  v24 = *a1;
  v25 = v49;
  if (*a1 != v9)
  {
    v26 = &v6[v7 & 0xFFFFFFFFFFFFFFFCLL];
    v27 = v26 - v24 - 4;
    v28 = v9;
    v25 = v49;
    if (v27 < 0x2C)
      goto LABEL_49;
    v28 = v9;
    v25 = v49;
    if ((unint64_t)(v26 - v49) < 0x20)
      goto LABEL_49;
    v29 = (v27 >> 2) + 1;
    v30 = 4 * (v29 & 0x7FFFFFFFFFFFFFF8);
    v28 = &v9[-v30];
    v25 = &v49[-v30];
    v31 = v49 - 16;
    v32 = &v6[4 * v8 - 16];
    v33 = v29 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v34 = *(_OWORD *)v32;
      *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
      *(_OWORD *)v31 = v34;
      v31 -= 32;
      v32 -= 32;
      v33 -= 8;
    }
    while (v33);
    if (v29 != (v29 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_49:
      do
      {
        v35 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v25 - 1) = v35;
        v25 -= 4;
      }
      while (v28 != v24);
    }
  }
  v49 = v25;
  v36 = a1[1];
  v37 = (char *)__dst;
  v38 = v36 - v9;
  if (v36 != v9)
  {
    memmove(__dst, v9, v36 - v9);
    v25 = v49;
    v24 = *a1;
    v9 = a1[1];
  }
  *a1 = v25;
  a1[1] = &v37[v38];
  v39 = a1[2];
  a1[2] = v51;
  __dst = v9;
  v51 = v39;
  v48 = v24;
  v49 = v24;
  if (v9 != v24)
    __dst = &v9[(v24 - v9 + 3) & 0xFFFFFFFFFFFFFFFCLL];
  if (v24)
    operator delete(v24);
  return v23;
}

void std::__split_buffer<unsigned int>::emplace_back<unsigned int const&>(char **a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 *v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  int v29;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_23;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 2;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-4 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-4 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[4 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_23;
  }
  if (v4 == v5)
    v14 = 1;
  else
    v14 = (v4 - v5) >> 1;
  if (v14 >> 62)
LABEL_26:
    std::__throw_bad_array_new_length[abi:sn180100]();
  v15 = (char *)operator new(4 * v14);
  v16 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
  v18 = v4 - v6;
  v17 = v4 == v6;
  v4 = v16;
  if (!v17)
  {
    v4 = &v16[v18 & 0xFFFFFFFFFFFFFFFCLL];
    v19 = v18 - 4;
    if ((unint64_t)(v18 - 4) < 0x1C)
    {
      v20 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_20:
        v29 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)v20 = v29;
        v20 += 4;
      }
      while (v20 != v4);
      goto LABEL_21;
    }
    v21 = &v15[v14 & 0xFFFFFFFFFFFFFFFCLL];
    v20 = v21;
    if ((unint64_t)(v21 - v6) < 0x20)
      goto LABEL_20;
    v22 = (v19 >> 2) + 1;
    v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
    v20 = &v16[v23];
    v24 = &v6[v23];
    v25 = (__int128 *)(v6 + 16);
    v26 = v21 + 16;
    v27 = v22 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v28 = *v25;
      *(v26 - 1) = *(v25 - 1);
      *v26 = v28;
      v25 += 2;
      v26 += 2;
      v27 -= 8;
    }
    while (v27);
    v6 = v24;
    if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_20;
  }
LABEL_21:
  *a1 = v15;
  a1[1] = v16;
  a1[2] = v4;
  a1[3] = &v15[4 * v14];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_23:
  if (!v4)
  {
    __break(1u);
    goto LABEL_26;
  }
  *(_DWORD *)v4 = *a2;
  a1[2] = v4 + 4;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(char *a1, __n128 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  unsigned __int32 v7;
  unsigned __int32 v8;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  __n128 result;
  char *v23;
  char *v24;
  char *v25;
  __n128 *v26;
  char *v27;
  char *v28;
  unsigned __int32 v29;
  unsigned int v30;
  _BOOL4 v31;
  unsigned __int32 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  __n128 *v39;
  char v40;
  char *v41;
  uint64_t v42;
  __n128 *v43;
  __n128 v44;
  unsigned __int32 v45;
  unint64_t v46;
  char *v47;
  __n128 *v48;
  unsigned __int32 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 *v54;
  __n128 v55;

  if (a3 >= 2)
  {
    v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      v7 = a2[-1].n128_u32[3];
      v8 = *(_DWORD *)a1;
      if (v7 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v7;
        a2[-1].n128_u32[3] = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      v19 = a3 >> 1;
      v20 = &a1[4 * (a3 >> 1)];
      v21 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(a1, v20, v21, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>((char *)v6 + 4 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(v6, (__n128 *)((char *)v6 + 4 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(a1, v20, v21, a4);
      v23 = &a4[4 * v19];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>((char *)v6 + 4 * (a3 >> 1), (char *)a2, a3 - (a3 >> 1), v23).n128_u64[0];
      v24 = v23;
      v25 = a4;
      v26 = v6;
      v27 = &a4[4 * a3];
      do
      {
        if (v24 == v27)
        {
          if (v25 == v23)
            return result;
          v46 = &a4[4 * v19] - v25 - 4;
          if (v46 >= 0x1C && (unint64_t)((char *)v6 - v25) >= 0x20)
          {
            v50 = 0;
            v51 = (v46 >> 2) + 1;
            v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            v47 = &v25[v52];
            v48 = (__n128 *)((char *)v26 + v52);
            v53 = v51 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v54 = &v26[v50];
              result = *(__n128 *)&v25[v50 * 16];
              v55 = *(__n128 *)&v25[v50 * 16 + 16];
              *v54 = result;
              v54[1] = v55;
              v50 += 2;
              v53 -= 8;
            }
            while (v53);
            if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v47 = v25;
            v48 = v26;
          }
          do
          {
            v49 = *(_DWORD *)v47;
            v47 += 4;
            v48->n128_u32[0] = v49;
            v48 = (__n128 *)((char *)v48 + 4);
          }
          while (v47 != v23);
          return result;
        }
        v28 = v24;
        v29 = *(_DWORD *)v24;
        v30 = *(_DWORD *)v25;
        v31 = *(_DWORD *)v24 < *(_DWORD *)v25;
        if (v29 >= *(_DWORD *)v25)
          v32 = *(_DWORD *)v25;
        else
          v32 = v29;
        v25 += 4 * (v29 >= *(_DWORD *)v25);
        v24 = &v28[4 * v31];
        v26->n128_u32[0] = v32;
        v26 = (__n128 *)((char *)v26 + 4);
        v6 = (__n128 *)((char *)v6 + 4);
      }
      while (v25 != v23);
      if (v24 != v27)
      {
        v33 = -4;
        if (v29 >= v30)
          v33 = 0;
        v34 = &a4[4 * a3] - v28 + v33 - 4;
        if (v34 < 0x3C || (unint64_t)((char *)v6 - &v28[4 * (v29 < v30)]) < 0x20)
          goto LABEL_49;
        v35 = 0;
        v36 = (v34 >> 2) + 1;
        v37 = v29 >= v30;
        v38 = 4 * (v36 & 0x7FFFFFFFFFFFFFF8);
        v24 += v38;
        v39 = (__n128 *)((char *)v26 + v38);
        v40 = v37 ? 2 : 1;
        v41 = &v28[4 * (v40 & 1)];
        v42 = v36 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v43 = &v26[v35];
          result = *(__n128 *)&v41[v35 * 16];
          v44 = *(__n128 *)&v41[v35 * 16 + 16];
          *v43 = result;
          v43[1] = v44;
          v35 += 2;
          v42 -= 8;
        }
        while (v42);
        v26 = v39;
        if (v36 != (v36 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_49:
          do
          {
            v45 = *(_DWORD *)v24;
            v24 += 4;
            v26->n128_u32[0] = v45;
            v26 = (__n128 *)((char *)v26 + 4);
          }
          while (v24 != v27);
        }
      }
    }
    else if (a1 != (char *)a2)
    {
      v10 = a1 + 4;
      if (a1 + 4 != (char *)a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = *(_DWORD *)v12;
          v12 = v10;
          v15 = *(_DWORD *)v10;
          if (v15 < v14)
          {
            v16 = v11;
            do
            {
              *(_DWORD *)&a1[v16 + 4] = v14;
              if (!v16)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(_DWORD *)&a1[v16 - 4];
              v16 -= 4;
            }
            while (v15 < v14);
            v13 = &a1[v16 + 4];
LABEL_10:
            *(_DWORD *)v13 = v15;
          }
          v10 = v12 + 4;
          v11 += 4;
        }
        while (v12 + 4 != (char *)a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(char *a1, char *a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 result;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  _BOOL4 v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  unsigned int v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  __int128 v55;

  if (a3)
  {
    v4 = a4;
    v6 = a1;
    if (a3 == 1)
    {
LABEL_9:
      *(_DWORD *)v4 = *(_DWORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *((_DWORD *)a2 - 1);
      v8 = v9;
      v10 = v9 >= *(_DWORD *)a1;
      if (v9 >= *(_DWORD *)a1)
        v8 = *(_DWORD *)a1;
      *(_DWORD *)a4 = v8;
      v4 = a4 + 4;
      if (v10)
        v6 = a2 - 4;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v21 = a3 >> 1;
      v22 = 4 * (a3 >> 1);
      v23 = &a1[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(a1, &a1[v22], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(&v6[v22], a2, a3 - v21, &v4[v22], a3 - v21);
      v25 = v4;
      v26 = v6;
      v27 = &v6[v22];
      do
      {
        if (v27 == a2)
        {
          if (v26 == v23)
            return result;
          v46 = &v6[4 * v21] - v26 - 4;
          if (v46 >= 0x1C && (unint64_t)(v25 - v26) >= 0x20)
          {
            v50 = 0;
            v51 = (v46 >> 2) + 1;
            v52 = 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            v47 = &v4[v52];
            v48 = &v26[v52];
            v53 = v51 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v54 = &v4[v50];
              result = *(__n128 *)&v26[v50];
              v55 = *(_OWORD *)&v26[v50 + 16];
              *(__n128 *)v54 = result;
              *((_OWORD *)v54 + 1) = v55;
              v50 += 32;
              v53 -= 8;
            }
            while (v53);
            if (v51 == (v51 & 0x7FFFFFFFFFFFFFF8))
              return result;
          }
          else
          {
            v47 = v4;
            v48 = v26;
          }
          do
          {
            v49 = *(_DWORD *)v48;
            v48 += 4;
            *(_DWORD *)v47 = v49;
            v47 += 4;
          }
          while (v48 != v23);
          return result;
        }
        v28 = v27;
        v29 = *(_DWORD *)v27;
        v30 = *(_DWORD *)v26;
        v31 = *(_DWORD *)v27 >= *(_DWORD *)v26;
        v32 = *(_DWORD *)v27 < *(_DWORD *)v26;
        if (v29 >= *(_DWORD *)v26)
          v33 = *(_DWORD *)v26;
        else
          v33 = v29;
        v27 = &v28[4 * v32];
        v26 += 4 * v31;
        *(_DWORD *)v4 = v33;
        v4 += 4;
        v25 += 4;
      }
      while (v26 != v23);
      if (v27 != a2)
      {
        v34 = -4;
        if (v29 >= v30)
          v34 = 0;
        v35 = a2 - v28 + v34 - 4;
        if (v35 < 0x3C)
          goto LABEL_51;
        if ((unint64_t)(v25 - &v28[4 * (v29 < v30)]) < 0x20)
          goto LABEL_51;
        v36 = 0;
        v37 = (v35 >> 2) + 1;
        v38 = v29 < v30;
        v39 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
        v40 = &v4[v39];
        v27 += v39;
        v41 = &v28[4 * v38];
        v42 = v37 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v43 = &v4[v36];
          result = *(__n128 *)&v41[v36];
          v44 = *(_OWORD *)&v41[v36 + 16];
          *(__n128 *)v43 = result;
          *((_OWORD *)v43 + 1) = v44;
          v36 += 32;
          v42 -= 8;
        }
        while (v42);
        v4 = v40;
        if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_51:
          do
          {
            v45 = *(_DWORD *)v27;
            v27 += 4;
            *(_DWORD *)v4 = v45;
            v4 += 4;
          }
          while (v27 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v11 = a1 + 4;
      *(_DWORD *)a4 = *(_DWORD *)a1;
      if (a1 + 4 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = (unsigned int *)a4;
        do
        {
          while (1)
          {
            v16 = *v14++;
            v15 = v16;
            if (*(_DWORD *)v11 < v16)
              break;
            *v14 = *(_DWORD *)v11;
            v11 += 4;
            v12 += 4;
            v13 = (char *)v14;
            if (v11 == a2)
              return result;
          }
          *((_DWORD *)v13 + 1) = v15;
          v17 = (unsigned int *)a4;
          if (v13 != a4)
          {
            v18 = v12;
            while (1)
            {
              v17 = (unsigned int *)&a4[v18];
              v19 = *(_DWORD *)&a4[v18 - 4];
              if (*(_DWORD *)v11 >= v19)
                break;
              *v17 = v19;
              v18 -= 4;
              if (!v18)
              {
                v17 = (unsigned int *)a4;
                break;
              }
            }
          }
          v20 = *(_DWORD *)v11;
          v11 += 4;
          *v17 = v20;
          v12 += 4;
          v13 = (char *)v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v8;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  __n128 *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  __n128 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __n128 *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int32 v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unsigned __int32 v40;
  __n128 *v41;
  size_t v42;
  __n128 *v43;
  uint64_t v44;
  unsigned __int32 v45;
  __n128 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 *v50;
  int v51;
  __int32 v52;
  __n128 *v53;
  __n128 *v54;
  __n128 *v55;
  uint64_t v56;
  BOOL v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  __n128 *v61;
  char *v62;
  __n128 *v63;
  __n128 result;
  __n128 *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int64_t v72;
  unint64_t v73;
  char *v74;
  __n128 *v75;
  uint64_t v76;
  uint64_t v77;
  __n128 *v78;
  __n128 *v79;
  uint64_t v80;
  __n128 v81;
  unint64_t v82;
  char *v83;
  __n128 *v84;
  uint64_t v85;
  uint64_t v86;
  __n128 *v87;
  __n128 *v88;
  uint64_t v89;
  __n128 v90;
  unsigned __int32 v91;
  unsigned __int32 v92;
  _BOOL4 v93;
  unsigned __int32 v94;
  __n128 *v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unint64_t v99;
  __n128 *v100;
  char *v101;
  unsigned __int32 *v102;
  unsigned __int32 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __n128 *v108;
  unsigned __int32 v109;
  unsigned __int32 v110;
  char *v111;
  char *v112;
  uint64_t v113;

  if (!a5)
    return result;
  v8 = a5;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4)
      return result;
    v13 = 0;
    v14 = a2->n128_u32[0];
    v15 = -a4;
    while (1)
    {
      v16 = a1->n128_u32[v13 / 4];
      if (v14 < v16)
        break;
      v13 += 4;
      v98 = __CFADD__(v15++, 1);
      if (v98)
        return result;
    }
    v17 = (__n128 *)((char *)a1 + v13);
    if (-v15 >= v8)
    {
      if (v15 == -1)
      {
        a1->n128_u32[v13 / 4] = v14;
        a2->n128_u32[0] = v16;
        return result;
      }
      if (v15 <= 0)
        v35 = -v15;
      else
        v35 = 1 - v15;
      v27 = v35 >> 1;
      v21 = (__n128 *)((char *)a1 + 4 * (v35 >> 1) + v13);
      v20 = (char *)a2;
      if (a2 != a3)
      {
        v36 = ((char *)a3 - (char *)a2) >> 2;
        v20 = (char *)a2;
        do
        {
          v37 = v36 >> 1;
          v38 = &v20[4 * (v36 >> 1)];
          v40 = *(_DWORD *)v38;
          v39 = v38 + 4;
          v36 += ~(v36 >> 1);
          if (v40 < v21->n128_u32[0])
            v20 = v39;
          else
            v36 = v37;
        }
        while (v36);
      }
      v19 = (v20 - (char *)a2) >> 2;
      if (v21 != a2)
      {
LABEL_22:
        v28 = v20 - (char *)a2;
        if (v20 == (char *)a2)
        {
          a2 = v21;
        }
        else
        {
          v29 = (__n128 *)&v21->n128_u8[4];
          v113 = v19;
          if (&v21->n128_u8[4] == (unsigned __int8 *)a2)
          {
            v109 = v21->n128_u32[0];
            v41 = a2;
            v42 = v20 - (char *)a2;
            v111 = a6;
            v43 = a3;
            v44 = v27;
            memmove(v21, v41, v42);
            v17 = (__n128 *)((char *)a1 + v13);
            v19 = v113;
            v27 = v44;
            a3 = v43;
            a6 = v111;
            a2 = (__n128 *)((char *)v21 + v28);
            *(unsigned __int32 *)((char *)v21->n128_u32 + v28) = v109;
          }
          else
          {
            v30 = v27;
            v31 = &a2->n128_i8[4];
            if (&a2->n128_u8[4] == (unsigned __int8 *)v20)
            {
              v45 = *((_DWORD *)v20 - 1);
              a2 = (__n128 *)&v21->n128_u8[4];
              if (v20 - 4 != (char *)v21)
              {
                v112 = a6;
                v46 = a3;
                v110 = *((_DWORD *)v20 - 1);
                memmove(&v21->n128_u8[4], v21, v20 - 4 - (char *)v21);
                v45 = v110;
                a6 = v112;
                v17 = (__n128 *)((char *)a1 + v13);
                a3 = v46;
              }
              v21->n128_u32[0] = v45;
              v27 = v30;
              v19 = v113;
            }
            else
            {
              v32 = ((char *)a2 - (char *)v21) >> 2;
              if (v32 == v28 >> 2)
              {
                do
                {
                  v33 = v29[-1].n128_i32[3];
                  v29[-1].n128_u32[3] = *((_DWORD *)v31 - 1);
                  *((_DWORD *)v31 - 1) = v33;
                  if (v29 == a2)
                    break;
                  v29 = (__n128 *)((char *)v29 + 4);
                  v34 = v31 == v20;
                  v31 += 4;
                }
                while (!v34);
              }
              else
              {
                v47 = v28 >> 2;
                v48 = ((char *)a2 - (char *)v21) >> 2;
                do
                {
                  v49 = v48;
                  v48 = v47;
                  v47 = v49 % v47;
                }
                while (v47);
                if (v48)
                {
                  v50 = (__n128 *)((char *)v21 + 4 * v48);
                  do
                  {
                    v52 = v50[-1].n128_i32[3];
                    v50 = (__n128 *)((char *)v50 - 4);
                    v51 = v52;
                    v53 = (__n128 *)((char *)v50 + 4 * v32);
                    v54 = v50;
                    do
                    {
                      v55 = v53;
                      v54->n128_u32[0] = v53->n128_u32[0];
                      v56 = (v20 - (char *)v53) >> 2;
                      v57 = __OFSUB__(v32, v56);
                      v59 = v32 - v56;
                      v58 = (v59 < 0) ^ v57;
                      v53 = (__n128 *)((char *)v21 + 4 * v59);
                      if (v58)
                        v53 = (__n128 *)((char *)v55 + 4 * v32);
                      v54 = v55;
                    }
                    while (v53 != v50);
                    v55->n128_u32[0] = v51;
                  }
                  while (v50 != v21);
                }
                a2 = (__n128 *)((char *)v21 + 4 * (v28 >> 2));
              }
            }
          }
        }
        goto LABEL_57;
      }
    }
    else
    {
      if (v8 >= 0)
        v18 = v8;
      else
        v18 = v8 + 1;
      v19 = v18 >> 1;
      v20 = (char *)a2 + 4 * (v18 >> 1);
      v21 = a2;
      if ((char *)a2 - (char *)a1 != v13)
      {
        v22 = (uint64_t)((char *)a2 - (char *)a1 - v13) >> 2;
        v21 = (__n128 *)((char *)a1 + v13);
        do
        {
          v23 = v22 >> 1;
          v24 = (_DWORD *)v21 + (v22 >> 1);
          v26 = *v24;
          v25 = (__n128 *)(v24 + 1);
          v22 += ~(v22 >> 1);
          if (*(_DWORD *)v20 < v26)
            v22 = v23;
          else
            v21 = v25;
        }
        while (v22);
      }
      v27 = (uint64_t)((char *)v21 - (char *)a1 - v13) >> 2;
      if (v21 != a2)
        goto LABEL_22;
    }
    a2 = (__n128 *)v20;
LABEL_57:
    a4 = -(v27 + v15);
    v60 = v8 - v19;
    if (v27 + v19 >= v8 - (v27 + v19) - v15)
    {
      v65 = a2;
      v66 = v20;
      v67 = v27;
      v68 = v19;
      v69 = v8 - v19;
      v70 = a6;
      a1 = v17;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(a2, v66, a3, -(v27 + v15), v69, a6, a7);
      a6 = v70;
      a2 = v21;
      v71 = v68;
      a4 = v67;
      a3 = v65;
      v8 = v71;
      if (!v71)
        return result;
    }
    else
    {
      v61 = (__n128 *)((char *)a1 + v13);
      v62 = a6;
      v63 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<unsigned int,webrtc::identity,std::less<void>,std::vector<unsigned int>>::value_compare &,std::__wrap_iter<unsigned int *>>(v61, v21, a2, v27, v19, a6, a7);
      a3 = v63;
      a6 = v62;
      a1 = a2;
      a2 = (__n128 *)v20;
      v8 = v60;
      if (!v60)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (a1 != a2)
    {
      v82 = (char *)a2 - (char *)a1 - 4;
      v83 = a6;
      v84 = a1;
      if (v82 < 0x1C)
        goto LABEL_108;
      v83 = a6;
      v84 = a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20)
        goto LABEL_108;
      v85 = (v82 >> 2) + 1;
      v86 = 4 * (v85 & 0x7FFFFFFFFFFFFFF8);
      v83 = &a6[v86];
      v84 = (__n128 *)((char *)a1 + v86);
      v87 = a1 + 1;
      v88 = (__n128 *)(a6 + 16);
      v89 = v85 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        result = v87[-1];
        v90 = *v87;
        v88[-1] = result;
        *v88 = v90;
        v87 += 2;
        v88 += 2;
        v89 -= 8;
      }
      while (v89);
      if (v85 != (v85 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_108:
        do
        {
          v91 = v84->n128_u32[0];
          v84 = (__n128 *)((char *)v84 + 4);
          *(_DWORD *)v83 = v91;
          v83 += 4;
        }
        while (v84 != a2);
      }
      if (v83 != a6)
      {
        while (a2 != a3)
        {
          v92 = a2->n128_u32[0];
          v93 = a2->n128_u32[0] >= *(_DWORD *)a6;
          if (a2->n128_u32[0] >= *(_DWORD *)a6)
            v92 = *(_DWORD *)a6;
          a2 = (__n128 *)((char *)a2 + 4 * (a2->n128_u32[0] < *(_DWORD *)a6));
          a6 += 4 * v93;
          a1->n128_u32[0] = v92;
          a1 = (__n128 *)((char *)a1 + 4);
          if (a6 == v83)
            return result;
        }
        memmove(a1, a6, v83 - a6);
      }
    }
    return result;
  }
  v72 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v73 = v72 - 4;
  if ((unint64_t)(v72 - 4) < 0x1C)
  {
    v74 = a6;
    v75 = a2;
    do
    {
LABEL_86:
      v94 = v75->n128_u32[0];
      v75 = (__n128 *)((char *)v75 + 4);
      *(_DWORD *)v74 = v94;
      v74 += 4;
    }
    while (v75 != a3);
    goto LABEL_87;
  }
  v74 = a6;
  v75 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_86;
  v76 = (v73 >> 2) + 1;
  v77 = 4 * (v76 & 0x7FFFFFFFFFFFFFF8);
  v74 = &a6[v77];
  v75 = (__n128 *)((char *)a2 + v77);
  v78 = a2 + 1;
  v79 = (__n128 *)(a6 + 16);
  v80 = v76 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    result = v78[-1];
    v81 = *v78;
    v79[-1] = result;
    *v79 = v81;
    v78 += 2;
    v79 += 2;
    v80 -= 8;
  }
  while (v80);
  if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_86;
LABEL_87:
  if (v74 != a6)
  {
    v95 = a3;
    while (a2 != a1)
    {
      v96 = *((_DWORD *)v74 - 1);
      v97 = a2[-1].n128_u32[3];
      v98 = v96 >= v97;
      if (v96 <= v97)
        v96 = a2[-1].n128_u32[3];
      if (v98)
        v74 -= 4;
      else
        a2 = (__n128 *)((char *)a2 - 4);
      a3[-1].n128_u32[3] = v96;
      a3 = (__n128 *)((char *)a3 - 4);
      v95 = (__n128 *)((char *)v95 - 4);
      if (v74 == a6)
        return result;
    }
    v99 = v74 - a6 - 4;
    if (v99 < 0x2C || (unint64_t)(v74 - (char *)v95) < 0x20)
    {
      v100 = a3;
      v101 = v74;
      goto LABEL_100;
    }
    v104 = 0;
    v105 = (v99 >> 2) + 1;
    v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
    v100 = (__n128 *)((char *)a3 - v106);
    v101 = &v74[-v106];
    v107 = v105 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      result = *(__n128 *)&v74[v104 * 16 - 16];
      v108 = &a3[v104];
      v108[-2] = *(__n128 *)&v74[v104 * 16 - 32];
      v108[-1] = result;
      v104 -= 2;
      v107 -= 8;
    }
    while (v107);
    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_100:
      v102 = &v100[-1].n128_u32[3];
      do
      {
        v103 = *((_DWORD *)v101 - 1);
        v101 -= 4;
        *v102-- = v103;
      }
      while (v101 != a6);
    }
  }
  return result;
}

void std::vector<unsigned char>::emplace<unsigned char>(char **a1, char *__src, char *a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 v28;
  char v29;
  char *v30;
  int64_t v31;
  char *v32;

  v7 = *a1;
  v6 = a1[1];
  v8 = (unint64_t)a1[2];
  if ((unint64_t)v6 < v8)
  {
    if (__src != v6)
    {
      v9 = *a3;
      v10 = __src + 1;
      if (v6)
      {
        *v6 = *(v6 - 1);
        a1[1] = v6 + 1;
        if (v6 == v10)
          goto LABEL_26;
      }
      else
      {
        a1[1] = 0;
        if (__src == (char *)-1)
        {
LABEL_26:
          *__src = v9;
          return;
        }
      }
      memmove(__src + 1, __src, v6 - v10);
      goto LABEL_26;
    }
    if (v7)
    {
      *__src = *a3;
      a1[1] = __src + 1;
      return;
    }
    goto LABEL_47;
  }
  v11 = v6 - v7 + 1;
  if (v11 < 0)
    goto LABEL_48;
  v12 = __src - v7;
  v13 = v8 - (_QWORD)v7;
  if (2 * v13 > v11)
    v11 = 2 * v13;
  if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v11;
  if (v14)
  {
    v15 = (char *)operator new(v14);
    v16 = &v15[v12];
    v17 = &v15[v14];
    if (v12 != v14)
      goto LABEL_32;
  }
  else
  {
    v15 = 0;
    v16 = (char *)v12;
    v17 = 0;
    if (v12)
      goto LABEL_32;
  }
  if (v12 < 1)
  {
    if ((unint64_t)(2 * v12) <= 1)
      v19 = 1;
    else
      v19 = 2 * v12;
    v20 = (char *)operator new(v19);
    v16 = &v20[v19 >> 2];
    v17 = &v20[v19];
    if (v15)
      operator delete(v15);
  }
  else
  {
    if (v12 + 1 >= 0)
      v18 = v12 + 1;
    else
      v18 = v12 + 2;
    v16 -= v18 >> 1;
  }
LABEL_32:
  if (!v16)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    abort();
  }
  *v16 = *a3;
  v21 = *a1;
  if (*a1 == __src)
  {
    v24 = v16;
  }
  else
  {
    v22 = __src - v21;
    if ((unint64_t)(__src - v21) < 0x20 || (unint64_t)(__src - v16) < 0x20)
    {
      v23 = __src;
      v24 = v16;
    }
    else
    {
      v23 = &__src[-(v22 & 0xFFFFFFFFFFFFFFE0)];
      v24 = &v16[-(v22 & 0xFFFFFFFFFFFFFFE0)];
      v25 = v16 - 16;
      v26 = __src - 16;
      v27 = v22 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v28 = *(_OWORD *)v26;
        *((_OWORD *)v25 - 1) = *((_OWORD *)v26 - 1);
        *(_OWORD *)v25 = v28;
        v25 -= 32;
        v26 -= 32;
        v27 -= 32;
      }
      while (v27);
      if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0))
        goto LABEL_43;
    }
    do
    {
      v29 = *--v23;
      *--v24 = v29;
    }
    while (v23 != v21);
  }
LABEL_43:
  v30 = a1[1];
  v31 = v30 - __src;
  if (v30 != __src)
    memmove(v16 + 1, __src, v30 - __src);
  v32 = *a1;
  *a1 = v24;
  a1[1] = &v16[v31 + 1];
  a1[2] = v17;
  if (v32)
    operator delete(v32);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,cricket::VideoChannel::VideoChannel(webrtc::TaskQueueBase *,rtc::Thread *,webrtc::TaskQueueBase *,std::unique_ptr<cricket::VideoMediaSendChannelInterface>,std::unique_ptr<cricket::VideoMediaReceiveChannelInterface>,std::string_view,BOOL,webrtc::CryptoOptions,rtc::UniqueRandomIdGenerator *)::$_0 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 32) + 16))(*(_QWORD *)(*a1 + 32));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 160))(v5);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 232))(v7);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 248))(v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 232))(v2, v4, v6, v8, v10);
}

void std::vector<cricket::Codec const*>::emplace<cricket::Codec const*>(unint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;

  v6 = *a1;
  v5 = a1[1];
  v7 = (uint64_t)a2 - *a1;
  v8 = v7 >> 3;
  v9 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v10 = a1[2];
  if (v5 < v10)
  {
    if (v9 != (char *)v5)
    {
      v11 = *a3;
      v12 = v5 - (_QWORD)(v9 + 8);
      v13 = v12 >> 3;
      v14 = (uint64_t *)(v5 - 8);
      if (v5 < 8)
      {
        v18 = (_QWORD *)a1[1];
        goto LABEL_49;
      }
      v15 = (v7 & 0xFFFFFFFFFFFFFFF8) + v12;
      v16 = v15 + v6 + 8;
      if (v5 > v16)
        v16 = a1[1];
      v17 = v16 + ~v6 - v15;
      if (v17 >= 0x58)
      {
        v18 = (_QWORD *)a1[1];
        if ((unint64_t)&v9[-(v7 & 0xFFFFFFFFFFFFFFF8) + 8 - v6] >= 0x20)
        {
          v40 = (v17 >> 3) + 1;
          v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
          v14 = (uint64_t *)((char *)v14 + v41);
          v18 = (_QWORD *)(v5 + v41);
          v42 = (_OWORD *)(v5 + 16);
          v43 = (__int128 *)(8 * v13 + 8 * v8 + v6 + 16);
          v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v45 = *v43;
            *(v42 - 1) = *(v43 - 1);
            *v42 = v45;
            v42 += 2;
            v43 += 2;
            v44 -= 4;
          }
          while (v44);
          if (v40 == (v40 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_49:
            a1[1] = (unint64_t)v18;
            if ((char *)v5 != v9 + 8)
              memmove((void *)(v5 - 8 * v13), v9, v12);
            *(_QWORD *)v9 = v11;
            return;
          }
        }
      }
      else
      {
        v18 = (_QWORD *)a1[1];
      }
      do
      {
        v46 = *v14++;
        *v18++ = v46;
      }
      while ((unint64_t)v14 < v5);
      goto LABEL_49;
    }
    if (v6)
    {
      *(_QWORD *)v9 = *a3;
      a1[1] = (unint64_t)(v9 + 8);
      return;
    }
    goto LABEL_57;
  }
  v19 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v19 >> 61)
    goto LABEL_58;
  v21 = v10 - v6;
  if (v21 >> 2 > v19)
    v19 = v21 >> 2;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
    v22 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v22 = v19;
  if (v22)
  {
    if (v22 >> 61)
      goto LABEL_59;
    v23 = (char *)operator new(8 * v22);
    v24 = &v23[8 * v8];
    if (v8 != v22)
      goto LABEL_25;
LABEL_21:
    if (v7 >= 1)
    {
      v25 = v8 + 2;
      if (v8 >= -1)
        v25 = v8 + 1;
      v24 -= 8 * (v25 >> 1);
      goto LABEL_25;
    }
    v38 = v7 >> 2;
    if ((_QWORD *)v6 == a2)
      v38 = 1;
    if (!(v38 >> 61))
    {
      v39 = 8 * v38;
      v24 = (char *)operator new(8 * v38);
      v26 = &v24[v39];
      if (v23)
        operator delete(v23);
      goto LABEL_27;
    }
LABEL_59:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  v23 = 0;
  v24 = (char *)(8 * v8);
  if (!v8)
    goto LABEL_21;
LABEL_25:
  if (!v24)
  {
LABEL_57:
    __break(1u);
LABEL_58:
    abort();
  }
  v26 = &v23[8 * v22];
LABEL_27:
  *(_QWORD *)v24 = *a3;
  v27 = v24 + 8;
  v28 = (char *)*a1;
  if ((char *)*a1 != v9)
  {
    v29 = (char *)((v7 & 0xFFFFFFFFFFFFFFF8) + v6);
    v30 = v29 - v28 - 8;
    if (v30 >= 0x58 && (unint64_t)(v29 - v24) >= 0x20)
    {
      v47 = (v30 >> 3) + 1;
      v48 = 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
      v31 = &v9[-v48];
      v32 = &v24[-v48];
      v49 = v24 - 16;
      v50 = (__int128 *)(v6 + 8 * v8 - 16);
      v51 = v47 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v52 = *v50;
        *((_OWORD *)v49 - 1) = *(v50 - 1);
        *(_OWORD *)v49 = v52;
        v49 -= 32;
        v50 -= 2;
        v51 -= 4;
      }
      while (v51);
      if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        v34 = (char *)a1[1];
        v35 = v34 - v9;
        if (v34 == v9)
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v31 = v9;
      v32 = v24;
    }
    do
    {
      v33 = *((_QWORD *)v31 - 1);
      v31 -= 8;
      *((_QWORD *)v32 - 1) = v33;
      v32 -= 8;
    }
    while (v31 != v28);
    goto LABEL_32;
  }
  v32 = v24;
  v37 = (char *)a1[1];
  v35 = v37 - v9;
  if (v37 != v9)
LABEL_33:
    memmove(v27, v9, v35);
LABEL_34:
  v36 = (_QWORD *)*a1;
  *a1 = (unint64_t)v32;
  a1[1] = (unint64_t)&v27[v35];
  a1[2] = (unint64_t)v26;
  if (v36)
    operator delete(v36);
}

unint64_t *webrtc::ChannelMixer::Transform(unint64_t *this, webrtc::AudioFrame *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _WORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float32x4_t *v23;
  unint64_t v24;
  int16x8_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int16x8_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  unint64_t v35;
  __int16 *v36;
  float *v37;
  float v38;
  float v39;
  int v40;
  uint64_t i;
  unint64_t v42;
  char *v43;
  std::string *v44;
  std::string *v45;

  v8 = *((_DWORD *)this + 1);
  if (*(_DWORD *)this == v8)
    return this;
  v10 = this;
  v11 = this[2];
  if (v11 > this[1])
  {
    v12 = *((_QWORD *)a2 + 3) * v11;
    if (v12 >= 0x1E01)
      goto LABEL_38;
  }
  v13 = (char *)a2 + 15432;
  if (*((_BYTE *)a2 + 15432))
  {
    *((_DWORD *)a2 + 3859) = v8;
    *((_QWORD *)a2 + 5) = v11;
    v14 = *((_QWORD *)a2 + 3) * v11;
    if (v14 < 0x1E01)
      return this;
    goto LABEL_37;
  }
  v15 = *((_QWORD *)a2 + 3);
  v16 = v11 * v15;
  v17 = (_WORD *)this[6];
  if (v17 && v16 <= this[7])
  {
    v16 = this[7];
    if (!v15)
      goto LABEL_31;
  }
  else
  {
    v17 = (_WORD *)operator new[]();
    v18 = v10[6];
    v10[6] = (unint64_t)v17;
    if (v18)
    {
      MEMORY[0x20BD0ADD4](v18, 0x1000C80BDFB0063);
      v17 = (_WORD *)v10[6];
    }
    v10[7] = v16;
    v15 = *((_QWORD *)a2 + 3);
    v11 = v10[2];
    if (!v15)
      goto LABEL_31;
  }
  if (v11)
  {
    v19 = v10[1];
    if (!v19)
    {
      for (i = 0; i != v15; ++i)
      {
        v42 = v11;
        a6 = v19;
        do
        {
          if (a6 > v16)
            goto LABEL_36;
          v17[a6++] = 0;
          --v42;
        }
        while (v42);
        v19 += v11;
      }
      goto LABEL_31;
    }
    v20 = (unint64_t *)v10[3];
    a5 = 0;
    if (!(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - (_QWORD)v20) >> 3))
      || (a6 = *v20, a7 = v20[1] - *v20, v19 - 1 >= a7 >> 2))
    {
      __break(1u);
LABEL_36:
      v44 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixer.cc", 96, "index <= audio_vector_size_", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a6);
      rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v44);
    }
    if (v19 >= 0x10)
    {
      v23 = (float32x4_t *)(a6 + 32);
      v22 = 0.0;
      v24 = v19 & 0xFFFFFFFFFFFFFFF0;
      v25 = (int16x8_t *)((char *)a2 + 88);
      do
      {
        v26 = v23[-2];
        v27 = v23[-1];
        v28 = *v23;
        v29 = v23[1];
        v23 += 4;
        v30 = v25[-1];
        v31 = vmulq_f32(v27, vcvtq_f32_s32(vmovl_high_s16(v30)));
        v32 = vmulq_f32(v26, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v30.i8)));
        v33 = vmulq_f32(v29, vcvtq_f32_s32(vmovl_high_s16(*v25)));
        v34 = vmulq_f32(v28, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v25->i8)));
        v22 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v22 + v32.f32[0]) + v32.f32[1]) + v32.f32[2]) + v32.f32[3]) + v31.f32[0])
                                                                                            + v31.f32[1])
                                                                                    + v31.f32[2])
                                                                            + v31.f32[3])
                                                                    + v34.f32[0])
                                                            + v34.f32[1])
                                                    + v34.f32[2])
                                            + v34.f32[3])
                                    + v33.f32[0])
                            + v33.f32[1])
                    + v33.f32[2])
            + v33.f32[3];
        v25 += 2;
        v24 -= 16;
      }
      while (v24);
      v21 = v19 & 0xFFFFFFFFFFFFFFF0;
      if (v19 == (v19 & 0xFFFFFFFFFFFFFFF0))
LABEL_25:
        __asm { BR              X26 }
    }
    else
    {
      v21 = 0;
      v22 = 0.0;
    }
    v35 = v19 - v21;
    v36 = (__int16 *)((char *)a2 + 2 * v21 + 72);
    v37 = (float *)(a6 + 4 * v21);
    do
    {
      v38 = *v37++;
      v39 = v38;
      v40 = *v36++;
      v22 = v22 + (float)(v39 * (float)v40);
      --v35;
    }
    while (v35);
    goto LABEL_25;
  }
LABEL_31:
  *((_DWORD *)a2 + 3859) = *((_DWORD *)v10 + 1);
  *((_QWORD *)a2 + 5) = v11;
  v14 = v15 * v11;
  if (v15 * v11 >= 0x1E01)
  {
LABEL_37:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 209, "samples_per_channel_ * num_channels_ <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v14);
LABEL_38:
    v45 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixer.cc", 60, "frame->samples_per_channel() * output_channels_ <= frame->max_16bit_samples()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, v12);
    return (unint64_t *)webrtc::ChannelMixingMatrix::ChannelMixingMatrix(v45);
  }
  v43 = (char *)a2 + 72;
  if (*v13)
    bzero(v43, 0x3C01uLL);
  return (unint64_t *)memcpy(v43, v17, 2 * v11 * v15);
}

std::string *webrtc::ChannelMixingMatrix::ChannelMixingMatrix(uint64_t a1, std::string *a2, int a3, std::string *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  size_t *v19;
  size_t *v20;
  size_t *v21;
  size_t *v22;
  _DWORD *v23;
  BOOL v26;
  int v28;
  int v30;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v41[2];
  unsigned __int8 v42;

  webrtc::field_trial::FindFullName((size_t)"WebRTC-VoIPChannelRemixingAdjustmentKillSwitch", 0x2EuLL, v41);
  v16 = v42;
  v17 = (char)v42;
  v18 = (void *)v41[0];
  if ((v42 & 0x80u) == 0)
  {
    v19 = v41;
  }
  else
  {
    v16 = v41[1];
    v19 = (size_t *)v41[0];
  }
  v20 = (size_t *)((char *)v19 + v16);
  if (v16 < 7)
  {
    v21 = (size_t *)((char *)v19 + v16);
    if (((char)v42 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v22 = v19;
  do
  {
    v23 = memchr(v22, 69, v16 - 6);
    if (!v23)
      break;
    v21 = (size_t *)v23;
    if (*v23 == 1650552389 && *(_DWORD *)((char *)v23 + 3) == 1684368482)
      goto LABEL_15;
    v22 = (size_t *)((char *)v23 + 1);
    v16 = (char *)v20 - ((char *)v21 + 1);
  }
  while (v16 > 6);
  v21 = v20;
LABEL_15:
  if (v17 < 0)
LABEL_16:
    operator delete(v18);
LABEL_17:
  v26 = v21 == v20 || v21 != v19;
  *(_BYTE *)a1 = v26;
  if ((_DWORD)a4 == 14 && (_DWORD)a2 == 12)
    v28 = 10;
  else
    v28 = (int)a2;
  if ((_DWORD)a4 == 13 && (_DWORD)a2 == 11)
    v30 = 9;
  else
    v30 = v28;
  *(_DWORD *)(a1 + 16) = v30;
  *(_DWORD *)(a1 + 20) = a3;
  *(_DWORD *)(a1 + 24) = (_DWORD)a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((_DWORD)a4 == 16)
  {
    v32 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 91, "output_layout != CHANNEL_LAYOUT_STEREO_DOWNMIX", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, v12, v13, v14, v15, 16);
    return webrtc::ValidateLayout(v32, v33, v34, v35, v36, v37, v38, v39);
  }
  else
  {
    if ((_DWORD)a2 != 29)
      webrtc::ValidateLayout(a2, v9, v10, v11, v12, v13, v14, v15);
    if ((_DWORD)a4 != 29)
      webrtc::ValidateLayout(a4, v9, v10, v11, v12, v13, v14, v15);
    return (std::string *)a1;
  }
}

std::string *webrtc::ValidateLayout(std::string *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  std::string *v8;

  if (!(_DWORD)result)
  {
    result = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 50, "layout != CHANNEL_LAYOUT_NONE", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 0);
    goto LABEL_8;
  }
  if ((int)result >= 33)
  {
LABEL_8:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 51, "layout <= CHANNEL_LAYOUT_MAX", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, (uint64_t)result);
    goto LABEL_9;
  }
  switch((_DWORD)result)
  {
    case 0x1E:
LABEL_9:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 54, "layout != CHANNEL_LAYOUT_STEREO_AND_KEYBOARD_MIC", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 30);
      goto LABEL_10;
    case 0x1D:
LABEL_10:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 53, "layout != CHANNEL_LAYOUT_DISCRETE", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 29);
      goto LABEL_11;
    case 1:
LABEL_11:
      v8 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/utility/channel_mixing_matrix.cc", 52, "layout != CHANNEL_LAYOUT_UNSUPPORTED", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)4,unsigned int> const&)::t, a5, a6, a7, a8, 1);
      return (std::string *)webrtc::ChannelMixingMatrix::CreateTransformationMatrix(v8);
  }
  return result;
}

BOOL webrtc::ChannelMixingMatrix::CreateTransformationMatrix(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  char *v4;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  void *v15;
  void *v16;
  int v17;
  int i;
  char *v19;
  char **v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  BOOL v52;
  uint64_t k;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _DWORD *v70;
  _DWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  _OWORD *v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  float v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  _QWORD *j;
  _DWORD *v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int64_t v98;
  uint64_t *v99;
  char *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  int64_t v105;
  char *v106;
  int v107;
  float v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  char *v120;
  int64_t v121;
  char *v122;
  int v123;
  unsigned int *v124;
  int v125;
  unint64_t v126;
  int v127;
  float v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  int64_t v134;
  uint64_t *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  int64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  int v146;
  unsigned int *v147;
  int v148;
  unint64_t v149;
  int v150;
  float v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  int64_t v157;
  uint64_t *v158;
  char *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  char *v164;
  int64_t v165;
  _DWORD *v166;
  _DWORD *v167;
  _DWORD *v168;
  int v169;
  unsigned int *v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  int64_t v181;
  char *v182;
  char *v183;
  char *v184;
  int v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int64_t v191;
  uint64_t *v192;
  char *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  char *v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  int64_t v201;
  uint64_t *v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  int64_t v207;
  char *v208;
  int v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  int64_t v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  unint64_t m;
  uint64_t v227;
  uint64_t v228;
  float *v229;
  uint64_t v230;

  *(_QWORD *)(a1 + 8) = a2;
  v3 = *(int *)(a1 + 28);
  v4 = *(char **)a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)a2) >> 3) < v3)
  {
    if ((v3 & 0x80000000) != 0)
      goto LABEL_312;
    v6 = *(char **)(a2 + 8);
    v7 = 24 * v3;
    v8 = (char *)operator new(24 * v3);
    v9 = &v8[v7];
    v10 = &v8[24 * ((v6 - v4) / 24)];
    if (v6 == v4)
    {
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v9;
    }
    else
    {
      v11 = &v8[24 * ((v6 - v4) / 24)];
      do
      {
        v12 = *(_OWORD *)(v6 - 24);
        v6 -= 24;
        *(_OWORD *)(v11 - 24) = v12;
        v11 -= 24;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v6 + 2);
        *(_QWORD *)v6 = 0;
        *((_QWORD *)v6 + 1) = 0;
        *((_QWORD *)v6 + 2) = 0;
      }
      while (v6 != v4);
      v4 = *(char **)a2;
      v13 = *(char **)(a2 + 8);
      *(_QWORD *)a2 = v11;
      *(_QWORD *)(a2 + 8) = v10;
      *(_QWORD *)(a2 + 16) = v9;
      if (v13 != v4)
      {
        v14 = v13;
        do
        {
          v16 = (void *)*((_QWORD *)v14 - 3);
          v14 -= 24;
          v15 = v16;
          if (v16)
          {
            *((_QWORD *)v13 - 2) = v15;
            operator delete(v15);
          }
          v13 = v14;
        }
        while (v14 != v4);
      }
    }
    if (v4)
      operator delete(v4);
  }
  v17 = *(_DWORD *)(a1 + 28);
  if (v17 >= 1)
  {
    for (i = 0; i < v17; ++i)
    {
      v20 = *(char ***)(a1 + 8);
      v21 = *(int *)(a1 + 20);
      if ((_DWORD)v21)
      {
        if ((v21 & 0x80000000) != 0)
          goto LABEL_312;
        v22 = 4 * v21;
        v23 = operator new(4 * v21);
        v24 = (unint64_t)v23 + v22;
        bzero(v23, v22);
        v25 = v20[1];
        v26 = (unint64_t)v20[2];
        if ((unint64_t)v25 < v26)
        {
LABEL_16:
          if (!v25)
            goto LABEL_311;
          *(_QWORD *)v25 = v23;
          *((_QWORD *)v25 + 1) = v24;
          v19 = v25 + 24;
          *((_QWORD *)v25 + 2) = v24;
          goto LABEL_18;
        }
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = v20[1];
        v26 = (unint64_t)v20[2];
        if ((unint64_t)v25 < v26)
          goto LABEL_16;
      }
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - *v20) >> 3);
      v28 = v27 + 1;
      if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_312;
      v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - (_QWORD)*v20) >> 3);
      if (2 * v29 > v28)
        v28 = 2 * v29;
      if (v29 >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      if (!v28)
        goto LABEL_311;
      if (v28 > 0xAAAAAAAAAAAAAAALL)
LABEL_313:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v30 = 24 * v28;
      v31 = (char *)operator new(24 * v28);
      v32 = &v31[v30];
      v33 = &v31[24 * v27];
      *((_QWORD *)v33 + 1) = 0;
      *((_QWORD *)v33 + 2) = 0;
      *(_QWORD *)v33 = v23;
      *(int64x2_t *)(v33 + 8) = vdupq_n_s64(v24);
      v19 = v33 + 24;
      v34 = *v20;
      v35 = v20[1];
      if (v35 == *v20)
      {
        *v20 = v33;
        v20[1] = v19;
        v20[2] = v32;
      }
      else
      {
        do
        {
          v36 = *(_OWORD *)(v35 - 24);
          v35 -= 24;
          *(_OWORD *)(v33 - 24) = v36;
          v33 -= 24;
          *((_QWORD *)v33 + 2) = *((_QWORD *)v35 + 2);
          *(_QWORD *)v35 = 0;
          *((_QWORD *)v35 + 1) = 0;
          *((_QWORD *)v35 + 2) = 0;
        }
        while (v35 != v34);
        v35 = *v20;
        v37 = v20[1];
        *v20 = v33;
        v20[1] = v19;
        v20[2] = v32;
        if (v37 != v35)
        {
          v38 = v37;
          do
          {
            v40 = (void *)*((_QWORD *)v38 - 3);
            v38 -= 24;
            v39 = v40;
            if (v40)
            {
              *((_QWORD *)v37 - 2) = v39;
              operator delete(v39);
            }
            v37 = v38;
          }
          while (v38 != v35);
        }
      }
      if (v35)
        operator delete(v35);
LABEL_18:
      v20[1] = v19;
      v17 = *(_DWORD *)(a1 + 28);
    }
  }
  v41 = *(_DWORD *)(a1 + 16);
  if (v41 == 29 || (v42 = *(_DWORD *)(a1 + 24), v42 == 29))
  {
    v43 = v17 < *(_DWORD *)(a1 + 20);
    v44 = 20;
    if (v43)
      v44 = 28;
    v45 = *(unsigned int *)(a1 + v44);
    if ((int)v45 >= 1)
    {
      v46 = 0;
      v47 = *(uint64_t **)(a1 + 8);
      v48 = *v47;
      v49 = 0xAAAAAAAAAAAAAAABLL * ((v47[1] - *v47) >> 3);
      v50 = (_QWORD *)(v48 + 8);
      while (v49 != v46)
      {
        v51 = *(v50 - 1);
        if (v46 >= (*v50 - v51) >> 2)
          break;
        *(_DWORD *)(v51 + 4 * v46++) = 1065353216;
        v50 += 3;
        if (v45 == v46)
          return 1;
      }
      goto LABEL_311;
    }
    return 1;
  }
  if (v41 == 2 && *(_BYTE *)a1 && ((0xDFFFFFF8uLL >> v42) & 1) != 0)
  {
    v86 = **(_QWORD **)(a1 + 8);
    v87 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v86;
    if (v87)
    {
      if (*(_QWORD *)(v86 + 8) != *(_QWORD *)v86)
      {
        v88 = v87 / 24;
        **(_DWORD **)v86 = 1065353216;
        if (v88 > 1)
        {
          v89 = *(_DWORD **)(v86 + 24);
          if (*(_DWORD **)(v86 + 32) != v89)
          {
            *v89 = 1065353216;
            if (v88 >= 3)
            {
              v90 = v88 - 2;
              for (j = (_QWORD *)(v86 + 56); ; j += 3)
              {
                v92 = (_DWORD *)*(j - 1);
                if ((_DWORD *)*j == v92)
                  goto LABEL_311;
                *v92 = 0;
                if (!--v90)
                  return 1;
              }
            }
            return 1;
          }
        }
      }
    }
    goto LABEL_311;
  }
  for (k = 0; k != 11; ++k)
  {
    v55 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + k];
    if ((v55 & 0x80000000) == 0)
    {
      v56 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 24) + k];
      if ((v56 & 0x80000000) != 0)
      {
        v61 = *(char **)(a1 + 40);
        v60 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v61 >= v60)
        {
          v62 = *(char **)(a1 + 32);
          v63 = (v61 - v62) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
            goto LABEL_312;
          v65 = v60 - (_QWORD)v62;
          if (v65 >> 1 > v64)
            v64 = v65 >> 1;
          v66 = (unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL;
          v67 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v66)
            v67 = v64;
          if (!v67)
            goto LABEL_311;
          if (v67 >> 62)
            goto LABEL_313;
          v68 = 4 * v67;
          v69 = operator new(4 * v67);
          v70 = &v69[4 * v63];
          *v70 = k;
          v71 = v70 + 1;
          if (v61 != v62)
          {
            v72 = v61 - v62 - 4;
            if (v72 < 0x2C)
              goto LABEL_316;
            if ((unint64_t)(v62 - v69) < 0x20)
              goto LABEL_316;
            v73 = (v72 >> 2) + 1;
            v74 = 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
            v75 = &v61[-v74];
            v70 = (_DWORD *)((char *)v70 - v74);
            v76 = &v69[4 * v63 - 16];
            v77 = v61 - 16;
            v78 = v73 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v79 = *(_OWORD *)v77;
              *(v76 - 1) = *((_OWORD *)v77 - 1);
              *v76 = v79;
              v76 -= 2;
              v77 -= 32;
              v78 -= 8;
            }
            while (v78);
            v61 = v75;
            if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_316:
              do
              {
                v80 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *--v70 = v80;
              }
              while (v61 != v62);
            }
          }
          *(_QWORD *)(a1 + 32) = v70;
          *(_QWORD *)(a1 + 40) = v71;
          *(_QWORD *)(a1 + 48) = &v69[v68];
          if (v62)
            operator delete(v62);
          *(_QWORD *)(a1 + 40) = v71;
        }
        else
        {
          if (!v61)
            goto LABEL_311;
          *(_DWORD *)v61 = k;
          *(_QWORD *)(a1 + 40) = v61 + 4;
        }
      }
      else
      {
        v57 = **(_QWORD **)(a1 + 8);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v57) >> 3) <= v56)
          goto LABEL_311;
        v59 = (uint64_t *)(v57 + 24 * v56);
        v58 = *v59;
        if (v55 >= (v59[1] - *v59) >> 2)
          goto LABEL_311;
        *(_DWORD *)(v58 + 4 * v55) = 1065353216;
      }
    }
  }
  v82 = *(char **)(a1 + 32);
  v81 = *(char **)(a1 + 40);
  if (v82 == v81)
    return 1;
  v83 = *(char **)(a1 + 32);
  while (*(_DWORD *)v83)
  {
    v83 += 4;
    if (v83 == v81)
    {
      v83 = *(char **)(a1 + 40);
      break;
    }
  }
  if (v83 != v81)
  {
    v84 = *(_DWORD *)(a1 + 24);
    if (v84 == 2)
    {
      if (*(_DWORD *)(a1 + 20) == 2)
        v85 = 0.5;
      else
        v85 = 0.70711;
    }
    else
    {
      v85 = 0.70711;
    }
    v93 = webrtc::kChannelOrderings[11 * v84 + 2];
    v94 = **(_QWORD **)(a1 + 8);
    v95 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v94) >> 3);
    if (v95 <= v93)
      goto LABEL_311;
    v96 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16)];
    v97 = *(_QWORD *)(v94 + 24 * (int)v93);
    if (v96 >= (*(_QWORD *)(v94 + 24 * (int)v93 + 8) - v97) >> 2)
      goto LABEL_311;
    *(float *)(v97 + 4 * v96) = v85;
    while (*(_DWORD *)v82)
    {
      v82 += 4;
      if (v82 == v81)
      {
        v82 = v81;
        break;
      }
    }
    if (v81 == v82)
      goto LABEL_311;
    v98 = v81 - (v82 + 4);
    if (v81 != v82 + 4)
    {
      memmove(v82, v82 + 4, v81 - (v82 + 4));
      v93 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 24) + 2];
      v99 = *(uint64_t **)(a1 + 8);
      v94 = *v99;
      v95 = 0xAAAAAAAAAAAAAAABLL * ((v99[1] - *v99) >> 3);
    }
    v100 = &v82[v98];
    *(_QWORD *)(a1 + 40) = &v82[v98];
    if (v95 <= v93)
      goto LABEL_311;
    v101 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 1];
    v103 = (uint64_t *)(v94 + 24 * (int)v93);
    v102 = *v103;
    if (v101 >= (v103[1] - *v103) >> 2)
      goto LABEL_311;
    *(float *)(v102 + 4 * v101) = v85;
    v82 = *(char **)(a1 + 32);
    v104 = v82;
    if (v82 != v100)
    {
      while (*(_DWORD *)v104 != 1)
      {
        v104 += 4;
        if (v104 == v100)
        {
          v104 = v100;
          break;
        }
      }
    }
    if (v100 == v104)
      goto LABEL_311;
    v105 = v100 - (v104 + 4);
    if (v100 != v104 + 4)
    {
      memmove(v104, v104 + 4, v100 - (v104 + 4));
      v82 = *(char **)(a1 + 32);
    }
    v81 = &v104[v105];
    *(_QWORD *)(a1 + 40) = &v104[v105];
  }
  v106 = v81;
  if (v82 != v81)
  {
    v106 = v82;
    while (*(_DWORD *)v106 != 2)
    {
      v106 += 4;
      if (v106 == v81)
      {
        v106 = v81;
        break;
      }
    }
  }
  if (v106 != v81)
  {
    v107 = *(_DWORD *)(a1 + 16);
    v108 = 0.70711;
    if (v107 == 2)
      v108 = 1.0;
    v109 = *(_DWORD *)(a1 + 24);
    v110 = webrtc::kChannelOrderings[11 * v109];
    v111 = **(_QWORD **)(a1 + 8);
    v112 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v111) >> 3);
    if (v112 <= v110)
      goto LABEL_311;
    v113 = webrtc::kChannelOrderings[11 * v107 + 2];
    v115 = (uint64_t *)(v111 + 24 * (int)v110);
    v114 = *v115;
    if (v113 >= (v115[1] - *v115) >> 2)
      goto LABEL_311;
    *(float *)(v114 + 4 * v113) = v108;
    v116 = webrtc::kChannelOrderings[11 * v109 + 1];
    if (v112 <= v116)
      goto LABEL_311;
    v118 = (uint64_t *)(v111 + 24 * (int)v116);
    v117 = *v118;
    if (v113 >= (v118[1] - *v118) >> 2)
      goto LABEL_311;
    *(float *)(v117 + 4 * v113) = v108;
    v82 = *(char **)(a1 + 32);
    v119 = *(char **)(a1 + 40);
    v120 = v82;
    if (v82 != v119)
    {
      while (*(_DWORD *)v120 != 2)
      {
        v120 += 4;
        if (v120 == v119)
        {
          v120 = *(char **)(a1 + 40);
          break;
        }
      }
    }
    if (v119 == v120)
      goto LABEL_311;
    v121 = v119 - (v120 + 4);
    if (v119 != v120 + 4)
    {
      memmove(v120, v120 + 4, v119 - (v120 + 4));
      v82 = *(char **)(a1 + 32);
    }
    v81 = &v120[v121];
    *(_QWORD *)(a1 + 40) = &v120[v121];
  }
  v122 = v81;
  if (v82 != v81)
  {
    v122 = v82;
    while (*(_DWORD *)v122 != 4)
    {
      v122 += 4;
      if (v122 == v81)
      {
        v122 = v81;
        break;
      }
    }
  }
  if (v122 != v81)
  {
    v123 = *(_DWORD *)(a1 + 24);
    if (((0x96B0E680uLL >> v123) & 1) != 0)
    {
      v126 = webrtc::kChannelOrderings[11 * v123 + 9];
      v127 = *(_DWORD *)(a1 + 16);
      if (((0x96B0E680uLL >> v127) & 1) != 0)
        v128 = 0.70711;
      else
        v128 = 1.0;
      v129 = **(_QWORD **)(a1 + 8);
      v130 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v129) >> 3);
      if (v130 <= v126)
        goto LABEL_311;
      v131 = webrtc::kChannelOrderings[11 * v127 + 4];
      v133 = (uint64_t *)(v129 + 24 * v126);
      v132 = *v133;
      if (v131 >= (v133[1] - *v133) >> 2)
        goto LABEL_311;
      *(float *)(v132 + 4 * v131) = v128;
      if (v82 != v81)
      {
        while (*(_DWORD *)v82 != 4)
        {
          v82 += 4;
          if (v82 == v81)
          {
            v82 = v81;
            break;
          }
        }
      }
      if (v81 == v82)
        goto LABEL_311;
      v134 = v81 - (v82 + 4);
      if (v81 != v82 + 4)
      {
        memmove(v82, v82 + 4, v81 - (v82 + 4));
        v123 = *(_DWORD *)(a1 + 24);
        v135 = *(uint64_t **)(a1 + 8);
        v129 = *v135;
        v130 = 0xAAAAAAAAAAAAAAABLL * ((v135[1] - *v135) >> 3);
      }
      v136 = &v82[v134];
      *(_QWORD *)(a1 + 40) = &v82[v134];
      v137 = webrtc::kChannelOrderings[11 * v123 + 10];
      if (v130 <= v137)
        goto LABEL_311;
      v138 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 5];
      v140 = (uint64_t *)(v129 + 24 * (int)v137);
      v139 = *v140;
      if (v138 >= (v140[1] - *v140) >> 2)
        goto LABEL_311;
      *(float *)(v139 + 4 * v138) = v128;
      v141 = *(char **)(a1 + 32);
      if (v141 != v136)
      {
        while (*(_DWORD *)v141 != 5)
        {
          v141 += 4;
          if (v141 == v136)
          {
            v141 = v136;
            break;
          }
        }
      }
      if (v136 == v141)
        goto LABEL_311;
      v142 = v136 - (v141 + 4);
      if (v136 != v141 + 4)
        memmove(v141, v141 + 4, v136 - (v141 + 4));
      *(_QWORD *)(a1 + 40) = &v141[v142];
    }
    else
    {
      if (((0x11D80050uLL >> v123) & 1) != 0)
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 4, 8);
        v124 = (unsigned int *)a1;
        v125 = 8;
      }
      else if (v123 < 3)
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 4, 2);
        v124 = (unsigned int *)a1;
        v125 = 2;
      }
      else
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 4, 0);
        v124 = (unsigned int *)a1;
        v125 = 1;
      }
      webrtc::ChannelMixingMatrix::Mix(v124, 5, v125);
    }
  }
  v144 = *(_DWORD **)(a1 + 32);
  v143 = *(_DWORD **)(a1 + 40);
  v145 = v144;
  if (v144 != v143)
  {
    v145 = *(_DWORD **)(a1 + 32);
    while (*v145 != 9)
    {
      if (++v145 == v143)
      {
        v145 = *(_DWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v145 != v143)
  {
    v146 = *(_DWORD *)(a1 + 24);
    if (((0x19407900uLL >> v146) & 1) != 0)
    {
      v149 = webrtc::kChannelOrderings[11 * v146 + 4];
      v150 = *(_DWORD *)(a1 + 16);
      if (((0x19407900uLL >> v150) & 1) != 0)
        v151 = 0.70711;
      else
        v151 = 1.0;
      v152 = **(_QWORD **)(a1 + 8);
      v153 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v152) >> 3);
      if (v153 <= v149)
        goto LABEL_311;
      v154 = webrtc::kChannelOrderings[11 * v150 + 9];
      v156 = (uint64_t *)(v152 + 24 * v149);
      v155 = *v156;
      if (v154 >= (v156[1] - *v156) >> 2)
        goto LABEL_311;
      *(float *)(v155 + 4 * v154) = v151;
      if (v144 != v143)
      {
        while (*v144 != 9)
        {
          if (++v144 == v143)
          {
            v144 = v143;
            break;
          }
        }
      }
      if (v143 == v144)
        goto LABEL_311;
      v157 = (char *)v143 - (char *)(v144 + 1);
      if (v143 != v144 + 1)
      {
        memmove(v144, v144 + 1, (char *)v143 - (char *)(v144 + 1));
        v146 = *(_DWORD *)(a1 + 24);
        v158 = *(uint64_t **)(a1 + 8);
        v152 = *v158;
        v153 = 0xAAAAAAAAAAAAAAABLL * ((v158[1] - *v158) >> 3);
      }
      v159 = (char *)v144 + v157;
      *(_QWORD *)(a1 + 40) = (char *)v144 + v157;
      v160 = webrtc::kChannelOrderings[11 * v146 + 5];
      if (v153 <= v160)
        goto LABEL_311;
      v161 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 10];
      v163 = (uint64_t *)(v152 + 24 * (int)v160);
      v162 = *v163;
      if (v161 >= (v163[1] - *v163) >> 2)
        goto LABEL_311;
      *(float *)(v162 + 4 * v161) = v151;
      v164 = *(char **)(a1 + 32);
      if (v164 != v159)
      {
        while (*(_DWORD *)v164 != 10)
        {
          v164 += 4;
          if (v164 == v159)
          {
            v164 = v159;
            break;
          }
        }
      }
      if (v159 == v164)
        goto LABEL_311;
      v165 = v159 - (v164 + 4);
      if (v159 != v164 + 4)
        memmove(v164, v164 + 4, v159 - (v164 + 4));
      *(_QWORD *)(a1 + 40) = &v164[v165];
    }
    else
    {
      if (((0x11D80050uLL >> v146) & 1) != 0)
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 9, 8);
        v147 = (unsigned int *)a1;
        v148 = 8;
      }
      else if (v146 < 3)
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 9, 2);
        v147 = (unsigned int *)a1;
        v148 = 2;
      }
      else
      {
        webrtc::ChannelMixingMatrix::Mix((unsigned int *)a1, 9, 0);
        v147 = (unsigned int *)a1;
        v148 = 1;
      }
      webrtc::ChannelMixingMatrix::Mix(v147, 10, v148);
    }
  }
  v167 = *(_DWORD **)(a1 + 32);
  v166 = *(_DWORD **)(a1 + 40);
  v168 = v167;
  if (v167 != v166)
  {
    v168 = *(_DWORD **)(a1 + 32);
    while (*v168 != 8)
    {
      if (++v168 == v166)
      {
        v168 = *(_DWORD **)(a1 + 40);
        break;
      }
    }
  }
  if (v168 != v166)
  {
    v169 = *(_DWORD *)(a1 + 24);
    if (((0x19407900uLL >> v169) & 1) != 0)
    {
      v172 = webrtc::kChannelOrderings[11 * v169 + 4];
      v173 = **(_QWORD **)(a1 + 8);
      v174 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v173) >> 3);
      if (v174 <= v172)
        goto LABEL_311;
      v175 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 8];
      v177 = (uint64_t *)(v173 + 24 * v172);
      v176 = *v177;
      if (v175 >= (v177[1] - *v177) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v176 + 4 * v175) = 1060439283;
      v178 = webrtc::kChannelOrderings[11 * v169 + 5];
      if (v174 <= v178)
        goto LABEL_311;
      v180 = (uint64_t *)(v173 + 24 * (int)v178);
      v179 = *v180;
      if (v175 >= (v180[1] - *v180) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v179 + 4 * v175) = 1060439283;
      if (v167 != v166)
      {
        while (*v167 != 8)
        {
          if (++v167 == v166)
          {
            v167 = v166;
            break;
          }
        }
      }
      if (v166 == v167)
        goto LABEL_311;
      v181 = (char *)v166 - (char *)(v167 + 1);
      if (v166 != v167 + 1)
        memmove(v167, v167 + 1, (char *)v166 - (char *)(v167 + 1));
      *(_QWORD *)(a1 + 40) = (char *)v167 + v181;
    }
    else
    {
      v170 = (unsigned int *)a1;
      if (((0x96B0E680uLL >> v169) & 1) != 0)
      {
        webrtc::ChannelMixingMatrix::MixWithoutAccounting(a1, 9);
        v170 = (unsigned int *)a1;
        v171 = 10;
      }
      else if (v169 < 3)
      {
        v171 = 2;
      }
      else
      {
        webrtc::ChannelMixingMatrix::MixWithoutAccounting(a1, 0);
        v170 = (unsigned int *)a1;
        v171 = 1;
      }
      webrtc::ChannelMixingMatrix::Mix(v170, 8, v171);
    }
  }
  v183 = *(char **)(a1 + 32);
  v182 = *(char **)(a1 + 40);
  v184 = v183;
  if (v183 != v182)
  {
    v184 = *(char **)(a1 + 32);
    while (*(_DWORD *)v184 != 6)
    {
      v184 += 4;
      if (v184 == v182)
      {
        v184 = *(char **)(a1 + 40);
        break;
      }
    }
  }
  if (v184 != v182)
  {
    v185 = *(_DWORD *)(a1 + 24);
    v186 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 6];
    v187 = **(_QWORD **)(a1 + 8);
    v188 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v187) >> 3);
    if (((0xDFFFFFF8uLL >> v185) & 1) != 0)
    {
      v198 = webrtc::kChannelOrderings[11 * v185];
      if (v188 <= v198)
        goto LABEL_311;
      v200 = (uint64_t *)(v187 + 24 * v198);
      v199 = *v200;
      if (v186 >= (v200[1] - *v200) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v199 + 4 * v186) = 1060439283;
      if (v183 != v182)
      {
        while (*(_DWORD *)v183 != 6)
        {
          v183 += 4;
          if (v183 == v182)
          {
            v183 = v182;
            break;
          }
        }
      }
      if (v182 == v183)
        goto LABEL_311;
      v201 = v182 - (v183 + 4);
      if (v182 != v183 + 4)
      {
        memmove(v183, v183 + 4, v182 - (v183 + 4));
        v185 = *(_DWORD *)(a1 + 24);
        v202 = *(uint64_t **)(a1 + 8);
        v187 = *v202;
        v188 = 0xAAAAAAAAAAAAAAABLL * ((v202[1] - *v202) >> 3);
      }
      v193 = &v183[v201];
      *(_QWORD *)(a1 + 40) = &v183[v201];
      v203 = webrtc::kChannelOrderings[11 * v185 + 1];
      if (v188 <= v203)
        goto LABEL_311;
      v204 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 7];
      v206 = (uint64_t *)(v187 + 24 * (int)v203);
      v205 = *v206;
      if (v204 >= (v206[1] - *v206) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v205 + 4 * v204) = 1060439283;
      v197 = *(char **)(a1 + 32);
      if (v197 != v193)
      {
        while (*(_DWORD *)v197 != 7)
        {
          v197 += 4;
          if (v197 == v193)
          {
LABEL_272:
            v197 = v193;
            break;
          }
        }
      }
    }
    else
    {
      v189 = webrtc::kChannelOrderings[11 * v185 + 2];
      if (v188 <= v189)
        goto LABEL_311;
      v190 = *(_QWORD *)(v187 + 24 * (int)v189);
      if (v186 >= (*(_QWORD *)(v187 + 24 * (int)v189 + 8) - v190) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v190 + 4 * v186) = 1060439283;
      if (v183 != v182)
      {
        while (*(_DWORD *)v183 != 6)
        {
          v183 += 4;
          if (v183 == v182)
          {
            v183 = v182;
            break;
          }
        }
      }
      if (v182 == v183)
        goto LABEL_311;
      v191 = v182 - (v183 + 4);
      if (v182 != v183 + 4)
      {
        memmove(v183, v183 + 4, v182 - (v183 + 4));
        v189 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 24) + 2];
        v192 = *(uint64_t **)(a1 + 8);
        v187 = *v192;
        v188 = 0xAAAAAAAAAAAAAAABLL * ((v192[1] - *v192) >> 3);
      }
      v193 = &v183[v191];
      *(_QWORD *)(a1 + 40) = &v183[v191];
      if (v188 <= v189)
        goto LABEL_311;
      v194 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 7];
      v196 = (uint64_t *)(v187 + 24 * (int)v189);
      v195 = *v196;
      if (v194 >= (v196[1] - *v196) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v195 + 4 * v194) = 1060439283;
      v197 = *(char **)(a1 + 32);
      if (v197 != v193)
      {
        while (*(_DWORD *)v197 != 7)
        {
          v197 += 4;
          if (v197 == v193)
            goto LABEL_272;
        }
      }
    }
    if (v193 == v197)
      goto LABEL_311;
    v207 = v193 - (v197 + 4);
    if (v193 != v197 + 4)
      memmove(v197, v197 + 4, v193 - (v197 + 4));
    v182 = &v197[v207];
    *(_QWORD *)(a1 + 40) = &v197[v207];
    v183 = *(char **)(a1 + 32);
  }
  v208 = v183;
  if (v183 != v182)
  {
    v208 = v183;
    while (*(_DWORD *)v208 != 3)
    {
      v208 += 4;
      if (v208 == v182)
      {
        v208 = v182;
        break;
      }
    }
  }
  if (v208 != v182)
  {
    v209 = *(_DWORD *)(a1 + 24);
    v210 = webrtc::kChannelOrderings[11 * *(unsigned int *)(a1 + 16) + 3];
    v211 = **(_QWORD **)(a1 + 8);
    v212 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v211) >> 3);
    if (((0x5DDCFE64uLL >> v209) & 1) != 0)
    {
      v219 = webrtc::kChannelOrderings[11 * v209 + 2];
      if (v212 <= v219)
        goto LABEL_311;
      v221 = (uint64_t *)(v211 + 24 * v219);
      v220 = *v221;
      if (v210 >= (v221[1] - *v221) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v220 + 4 * v210) = 1060439283;
      if (v183 != v182)
      {
        while (*(_DWORD *)v183 != 3)
        {
          v183 += 4;
          if (v183 == v182)
          {
LABEL_297:
            v183 = v182;
            break;
          }
        }
      }
    }
    else
    {
      v213 = webrtc::kChannelOrderings[11 * v209];
      if (v212 <= v213)
        goto LABEL_311;
      v215 = (uint64_t *)(v211 + 24 * (int)v213);
      v214 = *v215;
      if (v210 >= (v215[1] - *v215) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v214 + 4 * v210) = 1060439283;
      v216 = webrtc::kChannelOrderings[11 * v209 + 1];
      if (v212 <= v216)
        goto LABEL_311;
      v218 = (uint64_t *)(v211 + 24 * (int)v216);
      v217 = *v218;
      if (v210 >= (v218[1] - *v218) >> 2)
        goto LABEL_311;
      *(_DWORD *)(v217 + 4 * v210) = 1060439283;
      v182 = *(char **)(a1 + 40);
      if (v183 != v182)
      {
        while (*(_DWORD *)v183 != 3)
        {
          v183 += 4;
          if (v183 == v182)
            goto LABEL_297;
        }
      }
    }
    if (v182 != v183)
    {
      v222 = v182 - (v183 + 4);
      if (v182 != v183 + 4)
        memmove(v183, v183 + 4, v182 - (v183 + 4));
      *(_QWORD *)(a1 + 40) = &v183[v222];
      goto LABEL_302;
    }
LABEL_311:
    __break(1u);
LABEL_312:
    abort();
  }
LABEL_302:
  v223 = *(unsigned int *)(a1 + 28);
  if ((int)v223 < 1)
    return 1;
  v224 = 0;
  v52 = 0;
  v225 = *(_DWORD *)(a1 + 20);
  for (m = 1; ; ++m)
  {
    if (v225 >= 1)
    {
      v227 = **(_QWORD **)(a1 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v227) >> 3) <= m - 1)
        goto LABEL_311;
      v228 = v227 + v224;
      v229 = *(float **)v228;
      v230 = *(_QWORD *)(v228 + 8) - *(_QWORD *)v228;
      if (!v230)
        goto LABEL_311;
      if (*v229 != 1.0)
        return v52;
      if (v225 != 1)
        break;
    }
    v52 = m >= v223;
    v224 += 24;
    if (24 * v223 == v224)
      return v52;
  }
  if (v230 == 4)
    goto LABEL_311;
  return v52;
}

unsigned int *webrtc::ChannelMixingMatrix::Mix(unsigned int *result, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  int64_t v11;

  v3 = webrtc::kChannelOrderings[11 * result[6] + a3];
  v4 = **((_QWORD **)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)result + 1) + 8) - v4) >> 3) <= v3)
    goto LABEL_11;
  v5 = result;
  v6 = webrtc::kChannelOrderings[11 * result[4] + a2];
  v8 = (uint64_t *)(v4 + 24 * (int)v3);
  v7 = *v8;
  if (v6 >= (v8[1] - *v8) >> 2)
    goto LABEL_11;
  *(_DWORD *)(v7 + 4 * v6) = 1060439283;
  v10 = (char *)*((_QWORD *)result + 4);
  v9 = (char *)*((_QWORD *)result + 5);
  if (v10 != v9)
  {
    while (*(_DWORD *)v10 != a2)
    {
      v10 += 4;
      if (v10 == v9)
      {
        v10 = (char *)*((_QWORD *)result + 5);
        break;
      }
    }
  }
  if (v9 == v10)
  {
LABEL_11:
    __break(1u);
  }
  else
  {
    v11 = v9 - (v10 + 4);
    if (v9 != v10 + 4)
      result = (unsigned int *)memmove(v10, v10 + 4, v9 - (v10 + 4));
    *((_QWORD *)v5 + 5) = &v10[v11];
  }
  return result;
}

uint64_t webrtc::ChannelMixingMatrix::MixWithoutAccounting(uint64_t result, int a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = webrtc::kChannelOrderings[11 * *(unsigned int *)(result + 24) + a2];
  v3 = **(_QWORD **)(result + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(result + 8) + 8) - v3) >> 3) <= v2
    || (v4 = webrtc::kChannelOrderings[11 * *(unsigned int *)(result + 16) + 8],
        v6 = (uint64_t *)(v3 + 24 * (int)v2),
        v5 = *v6,
        v4 >= (v6[1] - *v6) >> 2))
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)(v5 + 4 * v4) = 1060439283;
  }
  return result;
}

uint64_t webrtc::voe::CreateChannelReceive@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, char a10, int a11, char a12, uint64_t *a13, uint64_t a14, char a15, uint64_t *a16, uint64_t a17, uint64_t *a18)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  pthread_mutexattr_t *v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  webrtc::ModuleRtpRtcpImpl2 *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  _QWORD *v40;
  uint64_t v44;
  uint64_t v48;
  uint64_t v49;
  pthread_mutexattr_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[29];
  uint64_t v60;
  _QWORD v61[3];
  int v62;
  char v63;
  char v64;
  char v65;
  char v66;
  void *__p;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v21 = operator new();
  v22 = *a13;
  if (*a13)
    (**(void (***)(uint64_t))v22)(v22);
  v23 = *a16;
  *a16 = 0;
  *(_QWORD *)(v21 + 8) = &unk_24C0B0E88;
  v44 = *a18;
  *a18 = 0;
  *(_QWORD *)v21 = &off_24C0B0D50;
  v24 = operator new();
  *(_DWORD *)v24 = 0;
  *(_BYTE *)(v24 + 4) = 1;
  *(_QWORD *)(v21 + 24) = v24;
  do
    v25 = __ldxr((unsigned int *)v24);
  while (__stxr(v25 + 1, (unsigned int *)v24));
  *(_DWORD *)(v21 + 32) = 0;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 48), &v50);
  pthread_mutexattr_destroy(&v50);
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 112), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_QWORD *)(v21 + 200) = 0;
  *(_BYTE *)(v21 + 176) = 0;
  *(_QWORD *)(v21 + 208) = 0;
  *(_QWORD *)(v21 + 184) = a5;
  *(_QWORD *)(v21 + 192) = v21 + 200;
  v26 = operator new();
  v50.__sig = (uint64_t)&off_24C0BB148;
  *((_QWORD *)&v51 + 1) = &v50;
  webrtc::ReceiveStatisticsLocked::ReceiveStatisticsLocked(v26, a1, &v50);
  v27 = (pthread_mutexattr_t *)*((_QWORD *)&v51 + 1);
  if (*((pthread_mutexattr_t **)&v51 + 1) == &v50)
  {
    v28 = 4;
    v27 = &v50;
  }
  else
  {
    if (!*((_QWORD *)&v51 + 1))
      goto LABEL_10;
    v28 = 5;
  }
  (*(void (**)(void))(v27->__sig + 8 * v28))();
LABEL_10:
  *(_QWORD *)(v21 + 216) = v26;
  *(_QWORD *)(v21 + 224) = 0;
  *(_DWORD *)(v21 + 232) = a7;
  *(_QWORD *)(v21 + 240) = 0;
  *(_BYTE *)(v21 + 248) = 0;
  *(_BYTE *)(v21 + 252) = 0;
  *(_BYTE *)(v21 + 256) = 0;
  *(_BYTE *)(v21 + 264) = 0;
  if (v22)
    (**(void (***)(uint64_t))v22)(v22);
  LODWORD(v50.__sig) = 48000;
  LOBYTE(v52) = 0;
  BYTE8(v52) = 0;
  LOBYTE(v53) = 0;
  *(_QWORD *)v50.__opaque = 200;
  *(_QWORD *)&v51 = 0;
  *(_DWORD *)((char *)&v51 + 7) = 0;
  {
    v40 = (_QWORD *)operator new();
    *v40 = &unk_24C0B13E8;
    webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v40;
  }
  *((_QWORD *)&v53 + 1) = webrtc::Clock::GetRealTimeClock(void)::clock;
  *((_QWORD *)&v54 + 1) = a2;
  if (v22)
    (**(void (***)(uint64_t))v22)(v22);
  *(_QWORD *)&v54 = v22;
  *(_QWORD *)&v52 = a14;
  BYTE8(v52) = a15;
  *(_QWORD *)v50.__opaque = a8;
  BYTE8(v51) = a10;
  BYTE9(v51) = 1;
  DWORD1(v51) = a11;
  webrtc::acm2::AcmReceiver::AcmReceiver(v21 + 272, (uint64_t)&v50);
  if ((_QWORD)v54)
    (*(void (**)(_QWORD))(*(_QWORD *)v54 + 8))(v54);
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *(_QWORD *)(v21 + 560) = 0;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 568), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_DWORD *)(v21 + 632) = 0;
  *(_WORD *)(v21 + 636) = 0;
  *(_OWORD *)(v21 + 640) = 0u;
  *(_QWORD *)(v21 + 656) = a1;
  *(_QWORD *)(v21 + 664) = a1;
  *(_DWORD *)(v21 + 672) = 1056964608;
  *(_OWORD *)(v21 + 688) = 0u;
  *(_QWORD *)(v21 + 680) = v21 + 688;
  *(_QWORD *)(v21 + 704) = v21 + 688;
  *(_QWORD *)(v21 + 712) = 0;
  *(_QWORD *)(v21 + 720) = v21 + 720;
  *(_QWORD *)(v21 + 728) = v21 + 720;
  *(_OWORD *)(v21 + 736) = 0u;
  *(_QWORD *)(v21 + 752) = 100;
  *(_DWORD *)(v21 + 760) = 0;
  *(_QWORD *)(v21 + 768) = v21 + 768;
  *(_QWORD *)(v21 + 776) = v21 + 768;
  *(_QWORD *)(v21 + 784) = 0;
  *(_BYTE *)(v21 + 792) = 0;
  *(_BYTE *)(v21 + 808) = 0;
  *(_QWORD *)(v21 + 816) = 0;
  *(_BYTE *)(v21 + 824) = 0;
  *(_BYTE *)(v21 + 828) = 0;
  *(_QWORD *)(v21 + 832) = 0x8000000000000000;
  *(_BYTE *)(v21 + 840) = 0;
  *(_BYTE *)(v21 + 844) = 0;
  *(_DWORD *)(v21 + 848) = 0;
  *(_BYTE *)(v21 + 856) = 0;
  *(_BYTE *)(v21 + 864) = 0;
  *(_DWORD *)(v21 + 872) = 0;
  *(_BYTE *)(v21 + 880) = 0;
  *(_BYTE *)(v21 + 888) = 0;
  *(_BYTE *)(v21 + 896) = 0;
  *(_BYTE *)(v21 + 904) = 0;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 912), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_QWORD *)(v21 + 976) = 0;
  *(_BYTE *)(v21 + 984) = 0;
  *(_BYTE *)(v21 + 988) = 0;
  *(_QWORD *)(v21 + 992) = -1;
  *(_QWORD *)(v21 + 1000) = -1;
  *(_QWORD *)(v21 + 1008) = a3;
  *(_DWORD *)(v21 + 1016) = 1065353216;
  *(_OWORD *)(v21 + 1024) = 0u;
  *(_QWORD *)(v21 + 1048) = v23;
  if (v23)
    (**(void (***)(uint64_t))v23)(v23);
  *(_DWORD *)(v21 + 1056) = *(_DWORD *)a17;
  *(_BYTE *)(v21 + 1060) = *(_BYTE *)(a17 + 4);
  *(_QWORD *)(v21 + 1064) = a1;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 1072), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_QWORD *)(v21 + 1136) = 0x8000000000000000;
  *(_BYTE *)(v21 + 1168) = 0;
  *(_BYTE *)(v21 + 1176) = 0;
  *(_BYTE *)(v21 + 1184) = 0;
  *(_BYTE *)(v21 + 1192) = 0;
  *(_QWORD *)(v21 + 1200) = 0;
  *(_DWORD *)(v21 + 1208) = 0;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(v21 + 1216), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_DWORD *)(v21 + 1296) = 0;
  *(_OWORD *)(v21 + 1280) = 0u;
  *(_OWORD *)(v21 + 1312) = 0u;
  *(_QWORD *)(v21 + 1304) = v21 + 1312;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v21 + 216) + 48))(*(_QWORD *)(v21 + 216), *(unsigned int *)(v21 + 232), 1);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  memset(v59, 0, sizeof(v59));
  v61[2] = 0;
  v60 = 0;
  v61[0] = 0;
  *(_DWORD *)((char *)v61 + 7) = 0;
  v68 = 0;
  v69 = 0;
  __p = 0;
  v70 = 0;
  LOWORD(v50.__sig) = 257;
  v30 = *(_QWORD *)(v21 + 216);
  *(_QWORD *)v50.__opaque = a1;
  *(_QWORD *)&v51 = v30;
  *((_QWORD *)&v51 + 1) = a4;
  *((_QWORD *)&v58 + 1) = *(_QWORD *)(v21 + 184);
  v62 = a6;
  *((_QWORD *)&v55 + 1) = v21 + 8;
  v66 = a12;
  if (v44)
  {
    v48 = v44;
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  }
  v31 = operator new();
  webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(v31, (uint64_t)&v50);
  v32 = *(webrtc::ModuleRtpRtcpImpl2 **)(v21 + 224);
  *(_QWORD *)(v21 + 224) = v31;
  if (v32)
  {
    webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v32);
    MEMORY[0x20BD0ADEC]();
    v31 = *(_QWORD *)(v21 + 224);
  }
  v33 = *(_DWORD *)(v21 + 232);
  pthread_mutex_lock((pthread_mutex_t *)(v31 + 128));
  *(_DWORD *)(v31 + 240) = v33;
  pthread_mutex_unlock((pthread_mutex_t *)(v31 + 128));
  pthread_mutex_lock((pthread_mutex_t *)(v31 + 808));
  *(_QWORD *)(v31 + 880) = 0;
  *(_DWORD *)(v31 + 872) = v33;
  pthread_mutex_unlock((pthread_mutex_t *)(v31 + 808));
  v34 = *(_QWORD *)(v21 + 224);
  pthread_mutex_lock((pthread_mutex_t *)(v34 + 128));
  if (!*(_DWORD *)(v34 + 64))
  {
    v35 = *(_QWORD *)(v34 + 88) / 2;
    v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v34 + 48) + 16))(*(_QWORD *)(v34 + 48));
    v37 = v36 + v35;
    if (v36 == 0x8000000000000000)
      v37 = 0x8000000000000000;
    if (v36 == 0x7FFFFFFFFFFFFFFFLL)
      v37 = 0x7FFFFFFFFFFFFFFFLL;
    if (!*(_BYTE *)(v34 + 208))
      *(_BYTE *)(v34 + 208) = 1;
    *(_QWORD *)(v34 + 200) = v37;
    v38 = *(_QWORD *)(v34 + 120);
    if (v38)
    {
      v49 = v35;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &v49);
    }
  }
  *(_DWORD *)(v34 + 64) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v34 + 128));
  if (SHIBYTE(v69) < 0)
    operator delete(__p);
  result = v60;
  if (v60)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  if (v23)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (v22)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  *a9 = v21;
  return result;
}

_QWORD *webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_24C0B0EB0;
  v17[1] = a1;
  v18 = v17;
  v4 = operator new();
  v5 = v18;
  if (!v18)
  {
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    goto LABEL_5;
  }
  if (v18 != v17)
  {
    v20 = v18;
    v18 = 0;
    v6 = *a2;
    *a2 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)v4 = &unk_24C0B0F40;
    goto LABEL_7;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
  v5 = v20;
  v6 = *a2;
  *a2 = 0;
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v4 = &unk_24C0B0F40;
  if (!v5)
  {
LABEL_5:
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = v6;
    *(_QWORD *)(v4 + 48) = v7;
    *(_BYTE *)(v4 + 56) = 0;
    goto LABEL_14;
  }
LABEL_7:
  if (v5 != v19)
  {
    *(_QWORD *)(v4 + 32) = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    v8 = v20;
    *(_QWORD *)(v4 + 40) = v6;
    *(_QWORD *)(v4 + 48) = v7;
    *(_BYTE *)(v4 + 56) = 0;
    if (v8 != v19)
      goto LABEL_9;
LABEL_12:
    v9 = 4;
    v8 = v19;
    goto LABEL_13;
  }
  *(_QWORD *)(v4 + 32) = v4 + 8;
  (*(void (**)(_QWORD *))(v19[0] + 24))(v19);
  v8 = v20;
  *(_QWORD *)(v4 + 40) = v6;
  *(_QWORD *)(v4 + 48) = v7;
  *(_BYTE *)(v4 + 56) = 0;
  if (v8 == v19)
    goto LABEL_12;
LABEL_9:
  if (v8)
  {
    v9 = 5;
LABEL_13:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
LABEL_14:
  *(_QWORD *)v4 = off_24C0B0EF8;
  *(_DWORD *)(v4 + 60) = 0;
  v10 = (unsigned int *)(v4 + 60);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = v4;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v4 = *(_QWORD *)(a1 + 1200);
    v13 = *(uint64_t (***)())v4;
  }
  else
  {
    v13 = off_24C0B0EF8;
  }
  v14 = *(_QWORD *)(v4 + 40);
  v19[0] = v4;
  ((void (*)(uint64_t))*v13)(v4);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 40))(v14, v19);
  if (v19[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 8))(v19[0]);
  result = v18;
  if (v18 == v17)
  {
    v16 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v16 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v16))();
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::~ChannelReceive(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  void (**v2)(webrtc::voe::_anonymous_namespace_::ChannelReceive *__hidden);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v12;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v13;
  uint64_t v14;
  uint64_t v15;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v16;
  webrtc::ModuleRtpRtcpImpl2 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;

  v2 = &off_24C0B0D50;
  *(_QWORD *)this = &off_24C0B0D50;
  *((_QWORD *)this + 1) = &unk_24C0B0E88;
  v3 = *((_QWORD *)this + 150);
  if (v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 56))(*(_QWORD *)(v3 + 40));
    v4 = *(_QWORD *)(v3 + 40);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    if (v5 == (_QWORD *)(v3 + 8))
    {
      v6 = 4;
      v5 = (_QWORD *)(v3 + 8);
    }
    else
    {
      if (!v5)
      {
LABEL_9:
        *(_QWORD *)(v3 + 32) = 0;
        v2 = *(void (***)(webrtc::voe::_anonymous_namespace_::ChannelReceive *__hidden))this;
        goto LABEL_10;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_9;
  }
LABEL_10:
  v2[6](this);
  std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::destroy((uint64_t)this + 1304, *((char **)this + 164));
  pthread_mutex_destroy((pthread_mutex_t *)this + 19);
  v7 = *((_QWORD *)this + 150);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 1072));
  v8 = *((_QWORD *)this + 131);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 912));
  if (*((_QWORD *)this + 98))
  {
    v9 = (webrtc::voe::_anonymous_namespace_::ChannelReceive *)*((_QWORD *)this + 97);
    v10 = *((_QWORD *)this + 96);
    v11 = *(_QWORD *)v9;
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
    **(_QWORD **)(v10 + 8) = v11;
    *((_QWORD *)this + 98) = 0;
    if (v9 != (webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 768))
    {
      do
      {
        v12 = (webrtc::voe::_anonymous_namespace_::ChannelReceive *)*((_QWORD *)v9 + 1);
        operator delete(v9);
        v9 = v12;
      }
      while (v12 != (webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 768));
    }
  }
  if (*((_QWORD *)this + 92))
  {
    v13 = (webrtc::voe::_anonymous_namespace_::ChannelReceive *)*((_QWORD *)this + 91);
    v14 = *((_QWORD *)this + 90);
    v15 = *(_QWORD *)v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *((_QWORD *)this + 92) = 0;
    if (v13 != (webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 720))
    {
      do
      {
        v16 = (webrtc::voe::_anonymous_namespace_::ChannelReceive *)*((_QWORD *)v13 + 1);
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 720));
    }
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 680, *((_QWORD **)this + 86));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 568));
  webrtc::acm2::AcmReceiver::~AcmReceiver((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 272));
  v17 = (webrtc::ModuleRtpRtcpImpl2 *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v17)
  {
    webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v17);
    MEMORY[0x20BD0ADEC]();
  }
  v18 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 25));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 112));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
  v19 = *((_QWORD *)this + 3);
  *(_BYTE *)(v19 + 4) = 0;
  do
  {
    v20 = __ldaxr((unsigned int *)v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, (unsigned int *)v19));
  if (!v21)
    MEMORY[0x20BD0ADEC]();
}

{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::OnRtpPacket(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  __int128 v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  __n128 Header;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  size_t v40;
  const void *v41;
  uint64_t v42;
  size_t v43;
  char *v44;
  char *v45;
  const void *v46;
  size_t v47;
  void *v48;
  _BYTE *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  uint64_t *v56;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  size_t v62;
  char *v63;
  void **v64;
  char *v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  size_t size;
  _QWORD v80[2];
  _OWORD v81[4];
  uint64_t v82;
  uint64_t v83;
  char v84;
  int v85;
  char v86;
  int v87;
  __int128 v88;
  uint64_t v89;
  char v90;
  char v91;
  __int16 v92;
  char v93;
  char v94;
  char v95;
  _DWORD v96[5];
  char v97;
  __int128 v98;
  void *v99[2];
  void *v100[2];
  __int128 v101;
  void *v102[11];
  char v103;
  char v104;
  char v105;
  std::string __src;
  void *v107[2];
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  _BYTE v111[22];
  void *v112;
  void *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  char v119;
  unsigned int *v120;
  void *__p;
  void *v122;
  char *v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  if (rtc::g_clock)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v4 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 252) = 1;
  *(_QWORD *)(a1 + 256) = v4 / 1000000;
  *(_BYTE *)(a1 + 264) = 1;
  v5 = *(_QWORD *)(a1 + 200);
  if (v5)
  {
    v6 = *((unsigned __int8 *)a2 + 1);
    v7 = a1 + 200;
    do
    {
      v8 = *(unsigned __int8 *)(v5 + 28);
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = (uint64_t *)v5;
      else
        v10 = (uint64_t *)(v5 + 8);
      if (v9)
        v7 = v5;
      v5 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 200 && v6 >= *(unsigned __int8 *)(v7 + 28))
    {
      v11 = a2[1];
      v109 = *a2;
      v110 = v11;
      *(_OWORD *)v111 = a2[2];
      *(_QWORD *)&v111[14] = *(_QWORD *)((char *)a2 + 46);
      v113 = 0;
      v114 = 0;
      v112 = 0;
      v13 = (_BYTE *)*((_QWORD *)a2 + 7);
      v12 = (_BYTE *)*((_QWORD *)a2 + 8);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          goto LABEL_138;
        v15 = (char *)operator new(v12 - v13);
        v16 = &v15[4 * (v14 >> 2)];
        v112 = v15;
        v114 = v16;
        memcpy(v15, v13, v14);
        v113 = v16;
      }
      v17 = *((_QWORD *)a2 + 11);
      v115 = *((_QWORD *)a2 + 10);
      v116 = v17;
      if (v17)
      {
        v18 = (unsigned int *)(v17 + 24);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = a2[7];
      v117 = a2[6];
      v118 = v20;
      v119 = *((_BYTE *)a2 + 128);
      v21 = (unsigned int *)*((_QWORD *)a2 + 17);
      v120 = v21;
      if (v21)
      {
        v22 = v21 + 2;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      HIDWORD(v118) = *(_DWORD *)(v7 + 32);
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 8) + 16))(*(_QWORD *)(a1 + 216) + 8, &v109);
      memset(v81, 0, 60);
      v85 = 0;
      v86 = 0;
      v87 = 0;
      LOBYTE(v88) = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v94 = 0;
      v95 = 0;
      v96[0] = 0;
      *(_DWORD *)((char *)v96 + 3) = 0;
      memset(v80, 0, 13);
      v82 = 0;
      v83 = 0;
      v84 = 0;
      v97 = -1;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v101 = 0u;
      memset(v102, 0, 25);
      *(_OWORD *)v99 = 0u;
      *(_OWORD *)v100 = 0u;
      v98 = xmmword_208F060A0;
      Header = webrtc::RtpPacketReceived::GetHeader((uint64_t)&v109, (uint64_t)v80);
      v25 = v81[0];
      v26 = HIDWORD(v80[0]);
      v27 = HIDWORD(v118);
      v28 = HIDWORD(v118) & ~(SHIDWORD(v118) >> 31);
      v29 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 1064) + 16))(*(_QWORD *)(a1 + 1064), Header);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 1072));
      if (v90)
      {
        *(_DWORD *)(a1 + 1144) = v25;
        *(_DWORD *)(a1 + 1148) = v26;
        *(_DWORD *)(a1 + 1152) = v28;
        *(_OWORD *)(a1 + 1160) = v88;
        *(_QWORD *)(a1 + 1176) = v89;
        *(_QWORD *)(a1 + 1136) = v29;
        LOBYTE(v29) = v88;
        v30 = v88 & 0xFFFFFFFFFFFFFF00;
        __p = (void *)*((_QWORD *)&v88 + 1);
        LOBYTE(v122) = v89;
        *(_DWORD *)((char *)v107 + 3) = HIDWORD(v89);
        v31 = 1;
        LODWORD(v107[0]) = *(_DWORD *)((char *)&v89 + 1);
      }
      else if (v29 != 0x7FFFFFFFFFFFFFFFLL
             && (v32 = *(_QWORD *)(a1 + 1136), v32 != 0x8000000000000000)
             && (v29 == 0x8000000000000000 || v32 == 0x7FFFFFFFFFFFFFFFLL || v29 - v32 <= 5000000)
             && *(_DWORD *)(a1 + 1144) == v25
             && v27 >= 1
             && *(_DWORD *)(a1 + 1152) == (_DWORD)v28)
      {
        v29 = (uint64_t)((unint64_t)(v26 - *(_DWORD *)(a1 + 1148)) << 32) / v28
            + *(_QWORD *)(a1 + 1160);
        __p = *(void **)(a1 + 1168);
        LOBYTE(v122) = *(_BYTE *)(a1 + 1176);
        v30 = v29 & 0xFFFFFFFFFFFFFF00;
        v31 = 1;
      }
      else
      {
        v30 = 0;
        LOBYTE(v29) = 0;
        v31 = 0;
        *(_QWORD *)(a1 + 1136) = 0x8000000000000000;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1072));
      *(_QWORD *)&v88 = v29 | v30;
      *((_QWORD *)&v88 + 1) = __p;
      LOBYTE(v89) = (_BYTE)v122;
      *(_DWORD *)((char *)&v89 + 1) = v107[0];
      HIDWORD(v89) = *(_DWORD *)((char *)v107 + 3);
      v90 = v31;
      v33 = v116;
      if (v116)
        v33 = *(_QWORD *)(v116 + 16) + v117;
      v34 = *((_QWORD *)&v110 + 1) + v110 + BYTE2(v109);
      v35 = v82;
      v36 = (const void *)(v33 + v83);
      v37 = v34 - v83;
      v38 = v34 - v83 - v82;
      v39 = *(_QWORD *)(a1 + 1048);
      if (!v39)
      {
        v48 = 0;
        if (*(_BYTE *)(a1 + 1060))
          v38 = 0;
        if (*(_QWORD *)(a1 + 1200))
        {
LABEL_65:
          v51 = a1 + 1312;
          v52 = *(_QWORD *)(a1 + 1312);
          if (!v52)
            goto LABEL_75;
          v53 = a1 + 1312;
          do
          {
            v54 = *(_DWORD *)(v52 + 32);
            v55 = v54 < BYTE1(v80[0]);
            if (v54 >= BYTE1(v80[0]))
              v56 = (uint64_t *)v52;
            else
              v56 = (uint64_t *)(v52 + 8);
            if (!v55)
              v53 = v52;
            v52 = *v56;
          }
          while (*v56);
          if (v53 == v51 || *(_DWORD *)(v53 + 32) > (int)BYTE1(v80[0]))
LABEL_75:
            v53 = a1 + 1312;
          HIBYTE(v108) = 5;
          if (v107 <= (void **)"audio" && (char *)v107 + 5 > "audio")
            goto LABEL_137;
          LODWORD(v107[0]) = *(_DWORD *)"audio";
          WORD2(v107[0]) = cricket::kMediaTypeAudio[4];
          strcpy((char *)&__p, "audio/");
          if (v53 == v51)
          {
            *((_BYTE *)&__src.__r_.__value_.__s + 23) = 9;
            if (&__src <= (std::string *)"x-unknown" && ((unint64_t)&__src | 9) > (unint64_t)"x-unknown")
              goto LABEL_137;
            strcpy((char *)&__src, "x-unknown");
            v58 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_127;
          }
          else
          {
            if ((*(char *)(v53 + 63) & 0x80000000) == 0)
            {
              __src = *(std::string *)(v53 + 40);
              v58 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_83;
LABEL_127:
              if ((__src.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
                || __src.__r_.__value_.__l.__size_ && !__src.__r_.__value_.__r.__words[0])
              {
                goto LABEL_137;
              }
              if (__src.__r_.__value_.__l.__size_ >= 0x3F9)
                size = 1017;
              else
                size = __src.__r_.__value_.__l.__size_;
              memcpy((char *)&__p + 6, __src.__r_.__value_.__l.__data_, size);
              *((_BYTE *)&__p + size + 6) = 0;
              operator delete(__src.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v108) & 0x80000000) == 0)
              {
LABEL_85:
                v60 = *(_QWORD *)(a1 + 1200);
                v61 = *(_DWORD *)(a1 + 232);
                v62 = strlen((const char *)&__p);
                if (v62 < 0x7FFFFFFFFFFFFFF8)
                {
                  v63 = (char *)v62;
                  if (v62 > 0x16)
                  {
                    v67 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v62 | 7) != 0x17)
                      v67 = v62 | 7;
                    v68 = v67 + 1;
                    v64 = (void **)operator new(v67 + 1);
                    v107[1] = v63;
                    v108 = v68 | 0x8000000000000000;
                    v107[0] = v64;
                    v65 = &v63[(_QWORD)v64];
                    v66 = &v63[(_QWORD)v64] > (char *)&__p;
                    if (v64 > &__p)
                      goto LABEL_93;
                  }
                  else
                  {
                    HIBYTE(v108) = v62;
                    v64 = v107;
                    v65 = (char *)v107 + (_QWORD)v63;
                    v66 = (char *)v107 + (unint64_t)v63 > (char *)&__p;
                    if (v107 > &__p)
                      goto LABEL_93;
                  }
                  if (!v66)
                  {
LABEL_93:
                    if (v63)
                      memcpy(v64, &__p, (size_t)v63);
                    *v65 = 0;
                    if (v38)
                      v69 = v36;
                    else
                      v69 = 0;
                    webrtc::ChannelReceiveFrameTransformerDelegate::Transform(v60, v69, v38, (uint64_t)v80, v61, (uint64_t)v107);
                    if (SHIBYTE(v108) < 0)
                      operator delete(v107[0]);
LABEL_100:
                    if (v48)
                      MEMORY[0x20BD0ADD4](v48, 0x1000C8077774924);
                    if (SHIBYTE(v102[2]) < 0)
                    {
                      operator delete(v102[0]);
                      if ((SHIBYTE(v101) & 0x80000000) == 0)
                      {
LABEL_104:
                        if ((SHIBYTE(v100[0]) & 0x80000000) == 0)
                          goto LABEL_105;
                        goto LABEL_109;
                      }
                    }
                    else if ((SHIBYTE(v101) & 0x80000000) == 0)
                    {
                      goto LABEL_104;
                    }
                    operator delete(v100[1]);
                    if ((SHIBYTE(v100[0]) & 0x80000000) == 0)
                    {
LABEL_105:
                      v70 = v120;
                      if (!v120)
                      {
LABEL_114:
                        v74 = v116;
                        if (v116)
                        {
                          v75 = (unsigned int *)(v116 + 24);
                          do
                          {
                            v76 = __ldaxr(v75);
                            v77 = v76 - 1;
                          }
                          while (__stlxr(v77, v75));
                          if (!v77)
                          {
                            v78 = *(_QWORD *)(v74 + 16);
                            *(_QWORD *)(v74 + 16) = 0;
                            if (v78)
                              MEMORY[0x20BD0ADD4](v78, 0x1000C8077774924);
                            MEMORY[0x20BD0ADEC](v74, 0x1010C40EE34DA14);
                          }
                        }
                        if (v112)
                        {
                          v113 = v112;
                          operator delete(v112);
                        }
                        return;
                      }
LABEL_110:
                      v71 = v70 + 2;
                      do
                      {
                        v72 = __ldaxr(v71);
                        v73 = v72 - 1;
                      }
                      while (__stlxr(v73, v71));
                      if (!v73)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v70 + 8))(v70);
                      goto LABEL_114;
                    }
LABEL_109:
                    operator delete(v99[0]);
                    v70 = v120;
                    if (!v120)
                      goto LABEL_114;
                    goto LABEL_110;
                  }
LABEL_137:
                  __break(1u);
                }
LABEL_138:
                abort();
              }
LABEL_84:
              operator delete(v107[0]);
              goto LABEL_85;
            }
            std::string::__init_copy_ctor_external(&__src, *(const std::string::value_type **)(v53 + 40), *(_QWORD *)(v53 + 48));
            v58 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_127;
          }
LABEL_83:
          v59 = v58;
          memcpy((char *)&__p + 6, &__src, v58);
          *((_BYTE *)&__p + v59 + 6) = 0;
          if ((SHIBYTE(v108) & 0x80000000) == 0)
            goto LABEL_85;
          goto LABEL_84;
        }
LABEL_52:
        if (v38)
          v49 = v36;
        else
          v49 = 0;
        goto LABEL_100;
      }
      v40 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v39 + 40))(v39, 0, v34 - v83);
      if (v40)
      {
        v41 = (const void *)operator new[]();
        v42 = BYTE4(v80[1]);
        v123 = 0;
        __p = 0;
        v122 = 0;
        if (!BYTE4(v80[1]))
          goto LABEL_44;
      }
      else
      {
        v41 = 0;
        v42 = BYTE4(v80[1]);
        v123 = 0;
        __p = 0;
        v122 = 0;
        if (!BYTE4(v80[1]))
        {
LABEL_44:
          if (v37 == v35)
            v46 = 0;
          else
            v46 = v36;
          if ((*(unsigned int (**)(_QWORD, _QWORD, void **, _QWORD, _QWORD, const void *, size_t))(**(_QWORD **)(a1 + 1048) + 32))(*(_QWORD *)(a1 + 1048), 0, &__p, 0, 0, v46, v38))
          {
            v38 = 0;
          }
          else
          {
            v38 = v47;
            if (v40 < v47)
            {
              v50 = (void *)operator new[]();
              v48 = v50;
              if (v41)
              {
                memcpy(v50, v41, v40);
                MEMORY[0x20BD0ADD4](v41, 0x1000C8077774924);
              }
LABEL_62:
              if (__p)
              {
                v122 = __p;
                operator delete(__p);
              }
              v36 = v48;
              if (*(_QWORD *)(a1 + 1200))
                goto LABEL_65;
              goto LABEL_52;
            }
          }
          v48 = (void *)v41;
          goto LABEL_62;
        }
      }
      v43 = 4 * v42;
      v44 = (char *)operator new(4 * v42);
      v45 = &v44[v43];
      __p = v44;
      v123 = &v44[v43];
      memcpy(v44, v81, v43);
      v122 = v45;
      goto LABEL_44;
    }
  }
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  *(_QWORD *)(a1 + 560) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetReceiveCodecs(uint64_t a1, char ***a2)
{
  char **v4;
  char **v5;
  unsigned __int8 **v6;
  int v7;
  unsigned int v8;
  uint64_t **v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  char **v17;
  BOOL v18;

  v4 = (char **)(a2 + 1);
  v5 = *a2;
  if (*a2 != (char **)(a2 + 1))
  {
    v6 = (unsigned __int8 **)(a1 + 200);
    do
    {
      v7 = *((_DWORD *)v5 + 16);
      v8 = *((unsigned __int8 *)v5 + 32);
      v9 = (uint64_t **)(a1 + 200);
      v10 = (_QWORD *)(a1 + 200);
      v11 = *v6;
      if (*v6)
      {
        while (1)
        {
          while (1)
          {
            v10 = v11;
            v12 = v11[28];
            if (v12 <= v8)
              break;
            v11 = (unsigned __int8 *)*v10;
            v9 = (uint64_t **)v10;
            if (!*v10)
              goto LABEL_11;
          }
          if (v12 >= v8)
            break;
          v11 = (unsigned __int8 *)v10[1];
          if (!v11)
          {
            v9 = (uint64_t **)(v10 + 1);
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v13 = v10;
        v10 = operator new(0x28uLL);
        *((_BYTE *)v10 + 28) = v8;
        *((_DWORD *)v10 + 8) = 0;
        *v10 = 0;
        v10[1] = 0;
        v10[2] = v13;
        *v9 = v10;
        v14 = **(_QWORD **)(a1 + 192);
        v15 = v10;
        if (v14)
        {
          *(_QWORD *)(a1 + 192) = v14;
          v15 = *v9;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 200), v15);
        ++*(_QWORD *)(a1 + 208);
      }
      *((_DWORD *)v10 + 8) = v7;
      v16 = v5[1];
      if (v16)
      {
        do
        {
          v17 = (char **)v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char **)v5[2];
          v18 = *v17 == (char *)v5;
          v5 = v17;
        }
        while (!v18);
      }
      v5 = v17;
    }
    while (v17 != v4);
  }
  if ((char ***)(a1 + 1304) != a2)
    std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,webrtc::SdpAudioFormat>,std::__tree_node<std::__value_type<int,webrtc::SdpAudioFormat>,void *> *,long>>(a1 + 1304, *a2, v4);
  return (*(uint64_t (**)(_QWORD, char ***))(**(_QWORD **)(a1 + 536) + 40))(*(_QWORD *)(a1 + 536), a2);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::StartPlayout(uint64_t this)
{
  *(_BYTE *)(this + 176) = 1;
  return this;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::StopPlayout(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  pthread_mutex_t *v2;

  *((_BYTE *)this + 176) = 0;
  v2 = (pthread_mutex_t *)((char *)this + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  *((_DWORD *)this + 158) = 0;
  *((_WORD *)this + 318) = 0;
  pthread_mutex_unlock(v2);
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 176))(*((_QWORD *)this + 67));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetReceiveCodec@<X0>(webrtc::voe::_anonymous_namespace_::ChannelReceive *this@<X0>, uint64_t a2@<X8>)
{
  return webrtc::acm2::AcmReceiver::LastDecoder((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 272), a2);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::ReceivedRTCPPacket(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  const unsigned __int8 *v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;

  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  if (a3)
    v7 = a2;
  else
    v7 = 0;
  webrtc::RTCPReceiver::IncomingPacket((webrtc::RTCPReceiver *)(*((_QWORD *)this + 28) + 712), v7, a3);
  result = webrtc::ModuleRtpRtcpImpl2::LastRtt(*((webrtc::ModuleRtpRtcpImpl2 **)this + 28));
  if (v9)
  {
    v10 = result;
    v11 = *((_QWORD *)this + 28);
    v12 = (pthread_mutex_t *)(v11 + 808);
    pthread_mutex_lock((pthread_mutex_t *)(v11 + 808));
    if (*(_QWORD *)(v11 + 880))
    {
      v13 = *(_QWORD *)(v11 + 888);
      v14 = *(_DWORD *)(v11 + 896);
      pthread_mutex_unlock(v12);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 912));
      if (webrtc::RtpToNtpEstimator::UpdateMeasurements((uint64_t)this + 760, v13, v14) >= 2)
        __asm { BR              X10 }
      if (*((_QWORD *)this + 93) >= 2uLL)
      {
        v15 = *((_QWORD *)this + 87);
        if (v15)
          v15 = *(_QWORD *)(*((_QWORD *)this + 88) + 32);
        *((_QWORD *)this + 148) = v15;
        *((_BYTE *)this + 1192) = 1;
      }
      return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 912));
    }
    else
    {
      return pthread_mutex_unlock((pthread_mutex_t *)(v11 + 808));
    }
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetChannelOutputVolumeScaling(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, float a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 112);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 112));
  *((float *)this + 254) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetSpeechOutputLevelFullRange(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  v3 = *((__int16 *)this + 318);
  pthread_mutex_unlock(v2);
  return v3;
}

double webrtc::voe::`anonymous namespace'::ChannelReceive::GetTotalOutputEnergy(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  pthread_mutex_t *v2;
  double v3;

  v2 = (pthread_mutex_t *)((char *)this + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  v3 = *((double *)this + 80);
  pthread_mutex_unlock(v2);
  return v3;
}

double webrtc::voe::`anonymous namespace'::ChannelReceive::GetTotalOutputDuration(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  pthread_mutex_t *v2;
  double v3;

  v2 = (pthread_mutex_t *)((char *)this + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 568));
  v3 = *((double *)this + 81);
  pthread_mutex_unlock(v2);
  return v3;
}

_QWORD *webrtc::voe::`anonymous namespace'::ChannelReceive::GetNetworkStatistics@<X0>(webrtc::voe::_anonymous_namespace_::ChannelReceive *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return webrtc::acm2::AcmReceiver::GetNetworkStatistics((uint64_t)this + 272, a3, a2);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetDecodingCallStatistics@<X0>(webrtc::voe::_anonymous_namespace_::ChannelReceive *this@<X0>, _OWORD *a2@<X8>)
{
  char *v3;
  __int128 v4;

  v3 = (char *)this + 272;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 272));
  v4 = *(_OWORD *)(v3 + 248);
  *a2 = *(_OWORD *)(v3 + 232);
  a2[1] = v4;
  return pthread_mutex_unlock((pthread_mutex_t *)v3);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetDelayEstimate(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  return *((_DWORD *)this + 218)
       + (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 67) + 112))(*((_QWORD *)this + 67));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetMinimumPlayoutDelay(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 10000)
    v2 = 10000;
  else
    v2 = a2;
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 67) + 72))(*((_QWORD *)this + 67), v2 & ~(v2 >> 31));
  if ((v3 & 1) == 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/acm2/acm_receiver.cc");
  return v3;
}

BOOL webrtc::voe::`anonymous namespace'::ChannelReceive::GetPlayoutRtpTimestamp(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, unsigned int *a2, uint64_t *a3)
{
  int v3;

  v3 = *((unsigned __int8 *)this + 864);
  if (*((_BYTE *)this + 864))
  {
    *a2 = *((_DWORD *)this + 212);
    *a3 = *((_QWORD *)this + 107);
  }
  return v3 != 0;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetEstimatedPlayoutNtpTimestampMs(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(this + 880) = a2;
  *(_BYTE *)(this + 888) = 1;
  *(_QWORD *)(this + 896) = a3;
  *(_BYTE *)(this + 904) = 1;
  return this;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetCurrentEstimatedPlayoutNtpTimestampMs(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, char a2)
{
  if (*((_BYTE *)this + 888) && *((_BYTE *)this + 904))
    return (*((_BYTE *)this + 880) + a2 - *((_BYTE *)this + 896));
  else
    return 0;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetBaseMinimumPlayoutDelayMs(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v4 = *((_QWORD *)this + 23);
  v5 = operator new();
  v6 = *((_DWORD *)this + 58);
  if (rtc::g_clock)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)v5 = &unk_24C0BBED8;
  *(_QWORD *)(v5 + 8) = 1000 * (v7 / 1000000);
  *(_DWORD *)(v5 + 16) = v6;
  *(_DWORD *)(v5 + 20) = a2;
  v10 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 40))(v4, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 67) + 88))(*((_QWORD *)this + 67), a2);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetBaseMinimumPlayoutDelayMs(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 96))(*((_QWORD *)this + 67));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetSyncInfo@<X0>(webrtc::voe::_anonymous_namespace_::ChannelReceive *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  char v13;

  v4 = *((_QWORD *)this + 28);
  v5 = (pthread_mutex_t *)(v4 + 808);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 808));
  if (!*(_QWORD *)(v4 + 880))
  {
    result = pthread_mutex_unlock((pthread_mutex_t *)(v4 + 808));
LABEL_6:
    v13 = 0;
    *(_BYTE *)a2 = 0;
    goto LABEL_7;
  }
  v6 = *(_DWORD *)(v4 + 892);
  v7 = *(_DWORD *)(v4 + 888);
  v8 = *(_DWORD *)(v4 + 896);
  result = pthread_mutex_unlock(v5);
  if (!*((_BYTE *)this + 252) || !*((_BYTE *)this + 264))
    goto LABEL_6;
  v10 = *((_DWORD *)this + 62);
  v11 = *((_QWORD *)this + 32);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 112))(*((_QWORD *)this + 67));
  v12 = *((_DWORD *)this + 218) + result;
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v10;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = v7;
  *(_DWORD *)(a2 + 20) = v8;
  *(_DWORD *)(a2 + 24) = v12;
  v13 = 1;
LABEL_7:
  *(_BYTE *)(a2 + 32) = v13;
  return result;
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::RegisterReceiverCongestionControlObjects(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, webrtc::PacketRouter *a2)
{
  webrtc::PacketRouter::AddReceiveRtpModule(a2, *((_QWORD *)this + 28), 0);
  *((_QWORD *)this + 129) = a2;
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::ResetReceiverCongestionControlObjects(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int64_t v13;

  v9 = (_QWORD *)*((_QWORD *)this + 129);
  v10 = *((_QWORD *)this + 28);
  webrtc::PacketRouter::MaybeRemoveRembModuleCandidate(v9, v10, 0, a4, a5, a6, a7, a8);
  v12 = (char *)v9[11];
  v11 = (char *)v9[12];
  if (v12 != v11)
  {
    while (*(_QWORD *)v12 != v10)
    {
      v12 += 8;
      if (v12 == v11)
      {
        v12 = (char *)v9[12];
        break;
      }
    }
  }
  if (v11 == v12)
  {
    __break(1u);
  }
  else
  {
    v13 = v11 - (v12 + 8);
    if (v11 != v12 + 8)
      memmove(v12, v12 + 8, v11 - (v12 + 8));
    v9[12] = &v12[v13];
    *((_QWORD *)this + 129) = 0;
  }
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetRTCPStatistics@<X0>(webrtc::voe::_anonymous_namespace_::ChannelReceive *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pthread_mutex_t *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  char *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t result;
  _QWORD v32[3];
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 27) + 24))(*((_QWORD *)this + 27), *((unsigned int *)this + 58));
  if (v4)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 16))(v32);
    v5 = v32[2];
    v6 = v33;
    v7 = v34;
    v8 = v35;
    v9 = v36;
    v10 = v37;
    *(_QWORD *)a2 = v32[0];
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9 + v7;
    *(_DWORD *)(a2 + 24) = v10;
    *(_QWORD *)(a2 + 40) = v5;
    *(_BYTE *)(a2 + 48) = v6;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  pthread_mutex_lock((pthread_mutex_t *)this + 19);
  *(_DWORD *)(a2 + 28) = *((_DWORD *)this + 320);
  pthread_mutex_unlock((pthread_mutex_t *)this + 19);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 912));
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 125);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 912));
  v11 = *((_QWORD *)this + 28);
  v12 = (pthread_mutex_t *)(v11 + 808);
  pthread_mutex_lock((pthread_mutex_t *)(v11 + 808));
  v13 = *(_QWORD *)(v11 + 880);
  if (v13)
  {
    v14 = *(_QWORD *)(v11 + 888);
    v15 = *(unsigned int *)(v11 + 900);
    v16 = *(_QWORD *)(v11 + 904);
    v17 = *(_QWORD *)(v11 + 912);
    pthread_mutex_unlock(v12);
    *(_QWORD *)(a2 + 56) = (uint64_t)((double)v13 / 4294967.3 + 0.5)
                         + 1000 * HIDWORD(v13)
                         - 2208988800000;
    *(_BYTE *)(a2 + 64) = 1;
    *(_QWORD *)(a2 + 72) = (uint64_t)((double)v14 / 4294967.3 + 0.5)
                         + 1000 * HIDWORD(v14)
                         - 2208988800000;
    *(_BYTE *)(a2 + 80) = 1;
    *(_QWORD *)(a2 + 88) = v15;
    *(_QWORD *)(a2 + 96) = v16;
    *(_QWORD *)(a2 + 104) = v17;
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 808));
  }
  v18 = *((_QWORD *)this + 28);
  v19 = (pthread_mutex_t *)(v18 + 808);
  pthread_mutex_lock((pthread_mutex_t *)(v18 + 808));
  v20 = *(char **)(v18 + 1048);
  v21 = *(char **)(v18 + 1056);
  if (v21 == v20)
  {
    v20 = *(char **)(v18 + 1056);
    goto LABEL_19;
  }
  v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3);
  do
  {
    v23 = v22 >> 1;
    v24 = (unsigned int *)&v20[40 * (v22 >> 1)];
    v26 = *v24;
    v25 = (char *)(v24 + 10);
    v22 += ~(v22 >> 1);
    if (v26 < *(_DWORD *)(v18 + 872))
      v20 = v25;
    else
      v22 = v23;
  }
  while (v22);
  if (v21 == v20)
  {
LABEL_19:
    if (v21 == v20)
      v20 = *(char **)(v18 + 1056);
    if (v21 != v20)
      goto LABEL_17;
LABEL_22:
    v27 = 0;
    v30 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_23;
  }
  if (&v20[40 * (*(_DWORD *)(v18 + 872) >= *(_DWORD *)v20)] == v20)
    v20 = *(char **)(v18 + 1056);
  if (v21 == v20)
    goto LABEL_22;
LABEL_17:
  v27 = *((_QWORD *)v20 + 1);
  v28 = *((_QWORD *)v20 + 3);
  v29 = *((_DWORD *)v20 + 8);
  v30 = v20[16];
LABEL_23:
  result = pthread_mutex_unlock(v19);
  *(_QWORD *)(a2 + 112) = v27;
  *(_BYTE *)(a2 + 120) = v30;
  *(_DWORD *)(a2 + 136) = v29;
  *(_QWORD *)(a2 + 128) = v28;
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetNACKStatus(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, int a2, int a3)
{
  void (*v4)(void);

  v4 = *(void (**)(void))(**((_QWORD **)this + 27) + 32);
  if (a2)
  {
    v4();
    return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 67) + 184))(*((_QWORD *)this + 67), a3);
  }
  else
  {
    v4();
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 192))(*((_QWORD *)this + 67));
  }
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetNonSenderRttMeasurement(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, char a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 28);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 128));
  *(_BYTE *)(v3 + 408) = a2;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 128));
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 808));
  *(_BYTE *)(v3 + 968) = a2;
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 808));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetAudioFrameWithInfo(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, int a2, webrtc::AudioFrame *a3)
{
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char *v12;
  uint64_t v13;
  void *v14;
  int v15;
  uint64_t v16;
  int v17;
  float v18;
  int16x4_t v19;
  pthread_mutex_t *v20;
  int v21;
  int v22;
  float v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  int64_t v44;
  void *v45;
  unint64_t v46;
  int64x2_t v47;
  __int32 v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  int64x2_t *v53;
  char *v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char *v64;
  void *v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  uint64_t v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  unsigned __int8 v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  unsigned __int8 v81;
  int v82;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  _QWORD *v87;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  webrtc::AudioFrame *v93;
  unsigned __int8 *v94;
  webrtc::voe::_anonymous_namespace_::ChannelReceive *v95;
  int *v96;
  pthread_mutex_t *v97;
  char *v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  void *__p[2];
  int64x2_t v103;
  int64x2_t v104;
  _QWORD v105[3];
  char v106;
  char v107[9];

  v4 = this;
  *((_DWORD *)a3 + 8) = a2;
  v5 = *((_QWORD *)this + 23);
  v6 = operator new();
  v7 = *((_DWORD *)v4 + 58);
  *(_QWORD *)v6 = &unk_24C0BBBD0;
  if (rtc::g_clock)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v8 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)v6 = &unk_24C0BBC78;
  *(_QWORD *)(v6 + 8) = 1000 * (v8 / 1000000);
  *(_DWORD *)(v6 + 16) = v7;
  v101 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(v5, &v101);
  v9 = v101;
  v101 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (webrtc::acm2::AcmReceiver::GetAudio((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)v4 + 272), *((unsigned int *)a3 + 8), a3, 0) == -1)return 2;
  pthread_mutex_lock((pthread_mutex_t *)((char *)v4 + 48));
  v10 = *((_QWORD *)v4 + 70);
  if (v10)
  {
    if (*((_BYTE *)a3 + 15432))
    {
      {
        v90 = (void *)operator new[]();
        bzero(v90, 0x3C00uLL);
        webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v90;
      }
      v12 = (char *)webrtc::AudioFrame::zeroed_data(void)::null_data;
      v10 = *((_QWORD *)v4 + 70);
    }
    else
    {
      v12 = (char *)a3 + 72;
    }
    v14 = (void *)*((_QWORD *)a3 + 3);
    v15 = *((_DWORD *)a3 + 8);
    v16 = *((_QWORD *)a3 + 5);
    v17 = *(_DWORD *)a3;
    __p[0] = v12;
    __p[1] = v14;
    v103.i32[0] = v15;
    v103.i64[1] = v16;
    v104.i32[0] = v17;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 16))(v10, __p);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)v4 + 48));
  pthread_mutex_lock((pthread_mutex_t *)((char *)v4 + 112));
  v18 = *((float *)v4 + 254);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)v4 + 112));
  v94 = (unsigned __int8 *)a3 + 15432;
  if (v18 >= 0.99 && v18 <= 1.01)
  {
    v20 = (pthread_mutex_t *)((char *)v4 + 568);
    if (*((_BYTE *)a3 + 15432))
    {
      v21 = 0;
      pthread_mutex_lock((pthread_mutex_t *)((char *)v4 + 568));
      v22 = *((__int16 *)v4 + 316);
      if (v22 >= 0)
        goto LABEL_29;
LABEL_28:
      *((_WORD *)v4 + 316) = v21;
      v22 = v21;
      goto LABEL_29;
    }
LABEL_27:
    v21 = WebRtcSpl_MaxAbsValueW16C((int16x8_t *)((char *)a3 + 72), *((_QWORD *)a3 + 5) * *((_QWORD *)a3 + 3));
    pthread_mutex_lock(v20);
    v22 = *((__int16 *)v4 + 316);
    if (v21 <= v22)
      goto LABEL_29;
    goto LABEL_28;
  }
  if (!*((_BYTE *)a3 + 15432))
  {
    if (*((_QWORD *)a3 + 5) * *((_QWORD *)a3 + 3))
    {
      v19.i16[0] = *((_WORD *)a3 + 36);
      v23 = v18 * (float)vmovl_s16(v19).i32[0];
      __asm { BR              X14 }
    }
    v20 = (pthread_mutex_t *)((char *)v4 + 568);
    goto LABEL_27;
  }
  v21 = 0;
  v20 = (pthread_mutex_t *)((char *)v4 + 568);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v4 + 568));
  v22 = *((__int16 *)v4 + 316);
  if (v22 < 0)
    goto LABEL_28;
LABEL_29:
  v24 = *((unsigned __int16 *)v4 + 317);
  *((_WORD *)v4 + 317) = v24 + 1;
  if (v24 == 10)
  {
    *((_WORD *)v4 + 318) = v22;
    *((_WORD *)v4 + 317) = 0;
    *((_WORD *)v4 + 316) = v22 >> 2;
  }
  else
  {
    LOWORD(v22) = *((_WORD *)v4 + 318);
  }
  *((double *)v4 + 80) = *((double *)v4 + 80) + (double)(__int16)v22 / 32767.0 * ((double)(__int16)v22 / 32767.0) * 0.01;
  *((double *)v4 + 81) = *((double *)v4 + 81) + 0.01;
  pthread_mutex_unlock(v20);
  v25 = *((_QWORD *)v4 + 124);
  v26 = *(unsigned int *)a3;
  if (v25 < 0)
  {
    if (!(_DWORD)v26)
      goto LABEL_55;
    *((_QWORD *)v4 + 124) = v26;
    v25 = v26;
    if (*((_BYTE *)v4 + 988))
      goto LABEL_34;
  }
  else if (*((_BYTE *)v4 + 988))
  {
LABEL_34:
    v27 = *((_DWORD *)v4 + 246);
    v28 = v26 >= v27;
    v29 = v26 - v27;
    v30 = (_DWORD)v29 != 0 && v28;
    if ((_DWORD)v29 != 0x80000000)
      v30 = (int)v29 >= 0;
    if (!v30)
      v29 |= 0xFFFFFFFF00000000;
    v31 = v29 + *((_QWORD *)v4 + 122);
    goto LABEL_45;
  }
  v31 = v26;
LABEL_45:
  *((_QWORD *)v4 + 122) = v31;
  *((_DWORD *)v4 + 246) = v26;
  *((_BYTE *)v4 + 988) = 1;
  v32 = v31 - v25;
  webrtc::acm2::AcmReceiver::LastDecoder((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)v4 + 272), (uint64_t)__p);
  if (v106 && (v33 = v104.i32[0]) != 0
    || (v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v4 + 67) + 160))(*((_QWORD *)v4 + 67)), v106))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v105, v105[1]);
    if (v103.i8[15] < 0)
      operator delete(__p[1]);
  }
  *((_QWORD *)a3 + 1) = v32 / (v33 / 1000);
  pthread_mutex_lock((pthread_mutex_t *)((char *)v4 + 912));
  v34 = webrtc::RemoteNtpTimeEstimator::EstimateNtp((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)v4 + 664), *(_DWORD *)a3);
  if (v34)
  {
    v35 = (uint64_t)((double)v34 / 4294967.3 + 0.5) + 1000 * HIDWORD(v34);
    *((_QWORD *)a3 + 2) = v35;
    if (v35 >= 1)
      *((_QWORD *)v4 + 125) = v35 - *((_QWORD *)a3 + 1);
  }
  else
  {
    *((_QWORD *)a3 + 2) = -1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)v4 + 912));
LABEL_55:
  v36 = *((_QWORD *)a3 + 8);
  v95 = v4;
  v93 = a3;
  if (!v36)
  {
    {
      v91 = operator new();
      *(_QWORD *)(v91 + 8) = 0;
      *(_QWORD *)(v91 + 16) = 0;
      *(_QWORD *)v91 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v91;
    }
    v74 = *((_QWORD *)a3 + 8);
    v37 = *(int **)webrtc::RtpPacketInfos::empty_entries(void)::value;
    if (v74)
    {
      v96 = *(int **)(v74 + 16);
      if (v37 != v96)
        goto LABEL_57;
    }
    else
    {
      if ((v81 & 1) == 0
      {
        v92 = operator new();
        *(_QWORD *)(v92 + 8) = 0;
        *(_QWORD *)(v92 + 16) = 0;
        *(_QWORD *)v92 = 0;
        webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v92;
      }
      v96 = (int *)*((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 1);
      if (v37 != v96)
        goto LABEL_57;
    }
LABEL_101:
    v39 = 0;
    v38 = 0;
    v71 = 1;
    v72 = *((_QWORD *)a3 + 8);
    *((_QWORD *)a3 + 8) = 0;
    if (!v72)
      goto LABEL_118;
    goto LABEL_104;
  }
  v37 = *(int **)(v36 + 8);
  v96 = *(int **)(v36 + 16);
  if (v37 == v96)
    goto LABEL_101;
LABEL_57:
  v38 = 0;
  v39 = 0;
  v97 = (pthread_mutex_t *)((char *)v4 + 912);
  v98 = 0;
  do
  {
    while (1)
    {
      v41 = *v37;
      v43 = (_BYTE *)*((_QWORD *)v37 + 1);
      v42 = (_BYTE *)*((_QWORD *)v37 + 2);
      v44 = v42 - v43;
      if (v42 == v43)
      {
        v45 = 0;
        v46 = 0;
      }
      else
      {
        if (v44 < 0)
          goto LABEL_130;
        v45 = operator new(v42 - v43);
        v46 = (unint64_t)v45 + 4 * (v44 >> 2);
        memcpy(v45, v43, v44);
      }
      v47 = *((int64x2_t *)v37 + 3);
      *(_OWORD *)__p = *((_OWORD *)v37 + 2);
      v103 = v47;
      v104 = *((int64x2_t *)v37 + 4);
      v105[0] = *((_QWORD *)v37 + 10);
      if (*((_BYTE *)v37 + 80))
        break;
      v48 = v41;
      v49 = *((_QWORD *)v37 + 11);
      v50 = *((_BYTE *)v37 + 96);
      if (v38 < v98)
        goto LABEL_88;
LABEL_71:
      v51 = 0x4EC4EC4EC4EC4EC5 * ((v38 - v39) >> 3) + 1;
      if (v51 > 0x276276276276276)
        goto LABEL_130;
      if (0x9D89D89D89D89D8ALL * ((v98 - v39) >> 3) > v51)
        v51 = 0x9D89D89D89D89D8ALL * ((v98 - v39) >> 3);
      if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v98 - v39) >> 3)) >= 0x13B13B13B13B13BLL)
        v51 = 0x276276276276276;
      if (!v51)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        abort();
      }
      if (v51 > 0x276276276276276)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v99 = 104 * v51;
      v52 = (char *)operator new(104 * v51);
      v53 = (int64x2_t *)&v52[8 * ((v38 - v39) >> 3)];
      v54 = v52;
      v53->i32[0] = v48;
      v53[1].i64[0] = 0;
      v53[1].i64[1] = 0;
      v53->i64[1] = (uint64_t)v45;
      v55 = *(int64x2_t *)__p;
      v56 = v103;
      v53[1] = vdupq_n_s64(v46);
      v53[2] = v55;
      v57 = v104;
      v53[3] = v56;
      v53[4] = v57;
      v53[5].i64[0] = v105[0];
      v53[5].i64[1] = v49;
      v53[6].i8[0] = v50;
      if (v38 == v39)
      {
        v64 = &v52[8 * ((v38 - v39) >> 3)];
        v98 = &v52[v99];
        v40 = &v53[6].i8[8];
        if (!v38)
          goto LABEL_60;
      }
      else
      {
        v58 = 0;
        do
        {
          v59 = &v53->i8[v58];
          v60 = &v38[v58];
          *((_DWORD *)v59 - 26) = *(_DWORD *)&v38[v58 - 104];
          *((_OWORD *)v59 - 6) = *(_OWORD *)&v38[v58 - 96];
          *((_QWORD *)v59 - 10) = *(_QWORD *)&v38[v58 - 80];
          *((_QWORD *)v60 - 11) = 0;
          *((_QWORD *)v60 - 10) = 0;
          *((_QWORD *)v60 - 12) = 0;
          v61 = *(_OWORD *)&v38[v58 - 40];
          v62 = *(_OWORD *)&v38[v58 - 24];
          v63 = v38[v58 - 8];
          *(_OWORD *)(v59 - 56) = *(_OWORD *)&v38[v58 - 56];
          *(v59 - 8) = v63;
          *(_OWORD *)(v59 - 24) = v62;
          *(_OWORD *)(v59 - 40) = v61;
          *(_OWORD *)(v59 - 72) = *(_OWORD *)&v38[v58 - 72];
          v58 -= 104;
        }
        while (&v38[v58] != v39);
        v64 = &v53->i8[v58];
        do
        {
          v65 = (void *)*((_QWORD *)v38 - 12);
          if (v65)
          {
            *((_QWORD *)v38 - 11) = v65;
            operator delete(v65);
          }
          v38 -= 104;
        }
        while (v38 != v39);
        v38 = v39;
        v98 = &v54[v99];
        v40 = &v53[6].i8[8];
        if (!v39)
          goto LABEL_60;
      }
      operator delete(v38);
LABEL_60:
      v38 = v40;
      v39 = v64;
      v4 = v95;
      v37 += 26;
      if (v37 == v96)
        goto LABEL_93;
    }
    pthread_mutex_lock(v97);
    if (!*((_BYTE *)v37 + 80))
      goto LABEL_129;
    if (*((_BYTE *)v37 + 72))
    {
      v48 = v41;
      if (*((_BYTE *)v4 + 1192))
      {
        v49 = 1000 * llround((double)(uint64_t)(*((_QWORD *)v4 + 148) + *((_QWORD *)v37 + 8)) * 0.000000232830644);
        v50 = 1;
        goto LABEL_87;
      }
    }
    else
    {
      v48 = v41;
    }
    v50 = 0;
    v49 = 0;
LABEL_87:
    pthread_mutex_unlock(v97);
    if (v38 >= v98)
      goto LABEL_71;
LABEL_88:
    if (!v38)
      goto LABEL_129;
    *(_DWORD *)v38 = v48;
    *((_QWORD *)v38 + 1) = v45;
    *((_QWORD *)v38 + 2) = v46;
    *((_QWORD *)v38 + 3) = v46;
    v66 = v105[0];
    v68 = v103;
    v67 = v104;
    *((_OWORD *)v38 + 2) = *(_OWORD *)__p;
    *((int64x2_t *)v38 + 3) = v68;
    *((int64x2_t *)v38 + 4) = v67;
    *((_QWORD *)v38 + 10) = v66;
    *((_QWORD *)v38 + 11) = v49;
    v38[96] = v50;
    v38 += 104;
    v37 += 26;
  }
  while (v37 != v96);
LABEL_93:
  if (v39 == v38)
  {
    v71 = 1;
    v39 = v38;
    v72 = *((_QWORD *)v93 + 8);
    *((_QWORD *)v93 + 8) = 0;
    if (!v72)
      goto LABEL_118;
  }
  else
  {
    v69 = operator new();
    *(_DWORD *)v69 = 0;
    *(_QWORD *)(v69 + 16) = 0;
    *(_QWORD *)(v69 + 24) = 0;
    *(_QWORD *)(v69 + 8) = 0;
    std::vector<webrtc::RtpPacketInfo>::__init_with_size[abi:sn180100]<webrtc::RtpPacketInfo*,webrtc::RtpPacketInfo*>((_QWORD *)(v69 + 8), (uint64_t)v39, (uint64_t)v38, 0x4EC4EC4EC4EC4EC5 * ((v38 - v39) >> 3));
    do
      v70 = __ldxr((unsigned int *)v69);
    while (__stxr(v70 + 1, (unsigned int *)v69));
    v71 = 0;
    v72 = *((_QWORD *)v93 + 8);
    *((_QWORD *)v93 + 8) = v69;
    if (!v72)
      goto LABEL_118;
  }
  do
  {
LABEL_104:
    v75 = __ldaxr((unsigned int *)v72);
    v76 = v75 - 1;
  }
  while (__stlxr(v76, (unsigned int *)v72));
  if (!v76)
  {
    v77 = *(_QWORD *)(v72 + 8);
    if (v77)
    {
      v78 = *(_QWORD *)(v72 + 16);
      v79 = *(void **)(v72 + 8);
      if (v78 != v77)
      {
        do
        {
          v80 = *(void **)(v78 - 96);
          if (v80)
          {
            *(_QWORD *)(v78 - 88) = v80;
            operator delete(v80);
          }
          v78 -= 104;
        }
        while (v78 != v77);
        v79 = *(void **)(v72 + 8);
      }
      *(_QWORD *)(v72 + 16) = v77;
      operator delete(v79);
      v4 = v95;
    }
    MEMORY[0x20BD0ADEC](v72, 0x1020C40E72D6CFBLL);
  }
LABEL_118:
  v82 = *((_DWORD *)v4 + 302);
  *((_DWORD *)v4 + 302) = v82 + 1;
  if (v82 > 98)
  {
    *((_DWORD *)v4 + 302) = 0;
    v83 = v4;
    v84 = *((_QWORD *)v4 + 2);
    v85 = (unsigned int *)*((_QWORD *)v83 + 3);
    if (v85)
    {
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    v87 = (_QWORD *)operator new();
    *v87 = v85;
    v87[1] = v95;
    v87[3] = absl::internal_any_invocable::LocalManagerTrivial;
    __p[0] = v87;
    v103.i64[0] = (uint64_t)_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
    v103.i64[1] = (uint64_t)_ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, void **, char *, char *))(*(_QWORD *)v84 + 8))(v84, __p, v107, &v100);
    ((void (*)(uint64_t, void **, void **))v103.i64[0])(1, __p, __p);
  }
  v13 = *v94;
  if (v39)
  {
    if ((v71 & 1) == 0)
    {
      do
      {
        v89 = (void *)*((_QWORD *)v38 - 12);
        if (v89)
        {
          *((_QWORD *)v38 - 11) = v89;
          operator delete(v89);
        }
        v38 -= 104;
      }
      while (v38 != v39);
    }
    operator delete(v39);
  }
  return v13;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::PreferredSampleRate(webrtc::voe::_anonymous_namespace_::ChannelReceive *this)
{
  pthread_mutex_t *v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t result;

  v2 = (pthread_mutex_t *)((char *)this + 272);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 272));
  v3 = *((unsigned __int8 *)this + 416);
  if (*((_BYTE *)this + 416))
  {
    v4 = *((_DWORD *)this + 85) & 0xFFFFFF00;
    v5 = *((_DWORD *)this + 85);
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  pthread_mutex_unlock(v2);
  if (v3)
    v6 = v4 | v5;
  else
    v6 = 0;
  LODWORD(result) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 160))(*((_QWORD *)this + 67));
  if (v6 <= (int)result)
    return result;
  else
    return v6;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetSourceTracker(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 240) = a2;
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetAssociatedSendChannel(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 1024) = a2;
  return result;
}

_QWORD *webrtc::voe::`anonymous namespace'::ChannelReceive::SetDepacketizerToDecoderFrameTransformer(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a2;
  if (*a2)
  {
    v4 = (uint64_t)result;
    v5 = result[150];
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 40);
      if (v6
        && ((**(void (***)(uint64_t))v6)(v6), (**(void (***)(uint64_t))v6)(v6), (v2 = *a2) == 0)
        || ((**(void (***)(uint64_t))v2)(v2), (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2), v6))
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
        if (v6 == v2)
          return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v4 = *(_QWORD *)(*(_QWORD *)(v4 + 1200) + 40);
      if (v4)
        (**(void (***)(uint64_t))v4)(v4);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/channel_receive.cc", 922, "frame_transformer_delegate_->FrameTransformer() == frame_transformer", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*> const&)::t, v7, v8, v9, v10, v4);
    }
    *a2 = 0;
    v11 = v2;
    v6 = v11;
    if (!v11)
      return result;
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::SetFrameDecryptor(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 1048);
  *(_QWORD *)(a1 + 1048) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::OnLocalSsrcChange(uint64_t this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(this + 224);
  v3 = *(_QWORD *)(v2 + 736);
  if (v3 <= 1)
  {
    __break(1u);
  }
  else
  {
    v5 = (_QWORD *)(v2 + 744);
    if ((v3 & 1) != 0)
      v5 = (_QWORD *)*v5;
    *(_DWORD *)v5 = a2;
    pthread_mutex_lock((pthread_mutex_t *)(v2 + 128));
    *(_DWORD *)(v2 + 44) = a2;
    return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 128));
  }
  return this;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::GetLocalSsrc(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int *v3;

  v1 = *(_QWORD *)(this + 224);
  v2 = *(_QWORD *)(v1 + 736);
  if (v2 <= 1)
  {
    __break(1u);
  }
  else
  {
    v3 = (unsigned int *)(v1 + 744);
    if ((v2 & 1) != 0)
      v3 = *(unsigned int **)v3;
    return *v3;
  }
  return this;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelReceive::RtcpPacketTypesCounterUpdated(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;

  if (*(_DWORD *)(result + 232) == a2)
  {
    v4 = result;
    v5 = (pthread_mutex_t *)(result + 1216);
    pthread_mutex_lock((pthread_mutex_t *)(result + 1216));
    v6 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 1280) = *(_OWORD *)a3;
    *(_DWORD *)(v4 + 1296) = v6;
    return pthread_mutex_unlock(v5);
  }
  return result;
}

void `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelReceive::~ChannelReceive(uint64_t a1)
{
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelReceive::RtcpPacketTypesCounterUpdated(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;

  if (*(_DWORD *)(result + 224) == a2)
  {
    v4 = result;
    v5 = (pthread_mutex_t *)(result + 1208);
    pthread_mutex_lock((pthread_mutex_t *)(result + 1208));
    v6 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 1272) = *(_OWORD *)a3;
    *(_DWORD *)(v4 + 1288) = v6;
    return pthread_mutex_unlock(v5);
  }
  return result;
}

void std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,void ()(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTPHeader const&)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,void ()(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTPHeader const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B0EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,void ()(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTPHeader const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B0EB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelReceive::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,void ()(rtc::ArrayView<unsigned char const,-4711l>,webrtc::RTPHeader const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
    v6 = *(_BYTE **)a2;
  else
    v6 = 0;
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::OnReceivedPayloadData(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE *v8;
  const unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  void **v17;
  unsigned __int16 *v18;
  int64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  webrtc::SourceTracker *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  RtpPacketInfos v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  const unsigned __int16 *v42;
  const unsigned __int16 *v43;
  const unsigned __int16 *v44;
  uint64_t v45;
  __int128 v46;
  _BYTE v47[48];
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 176))
  {
    if (!*(_QWORD *)(a1 + 240))
      return;
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 656) + 16))(*(_QWORD *)(a1 + 656));
    v12 = *(_DWORD *)(a4 + 4);
    LODWORD(v42) = *(_DWORD *)(a4 + 8);
    v44 = 0;
    v45 = 0;
    v43 = 0;
    LODWORD(v46) = v12;
    *((_QWORD *)&v46 + 1) = v11;
    *(_WORD *)v47 = 0;
    v47[8] = 0;
    v47[32] = 0;
    v47[40] = 0;
    v48 = 0;
    if (*(unsigned __int8 *)(a4 + 12) >= 0xFu)
      v13 = 15;
    else
      v13 = *(unsigned __int8 *)(a4 + 12);
    std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(&v43, (char *)(a4 + 16), (char *)(a4 + 16 + 4 * v13), v13);
    if (*(_BYTE *)(a4 + 360))
    {
      v14 = *(_QWORD *)(a4 + 352);
      if (!v47[1])
        v47[1] = 1;
      v47[0] = BYTE4(v14);
    }
    *(_OWORD *)&v47[8] = *(_OWORD *)(a4 + 112);
    *(_OWORD *)&v47[17] = *(_OWORD *)(a4 + 121);
    v15 = (char *)operator new(0x68uLL);
    v16 = (int)v42;
    *((_QWORD *)v15 + 1) = 0;
    v17 = (void **)(v15 + 8);
    *(_DWORD *)v15 = v16;
    *((_QWORD *)v15 + 2) = 0;
    *((_QWORD *)v15 + 3) = 0;
    v18 = (unsigned __int16 *)v43;
    v19 = (char *)v44 - (char *)v43;
    if (v44 == v43)
    {
      v21 = 0;
      v20 = 0;
    }
    else
    {
      if (v19 < 0)
        goto LABEL_46;
      v20 = (char *)operator new((char *)v44 - (char *)v43);
      *((_QWORD *)v15 + 1) = v20;
      v21 = &v20[4 * (v19 >> 2)];
      *((_QWORD *)v15 + 3) = v21;
      memcpy(v20, v18, v19);
      *((_QWORD *)v15 + 2) = v21;
    }
    v22 = *(_OWORD *)&v47[32];
    *((_OWORD *)v15 + 4) = *(_OWORD *)&v47[16];
    *((_OWORD *)v15 + 5) = v22;
    v15[96] = v48;
    v23 = *(_OWORD *)v47;
    *((_OWORD *)v15 + 2) = v46;
    *((_OWORD *)v15 + 3) = v23;
    if (v18)
    {
      v44 = v18;
      operator delete(v18);
    }
    v24 = *(webrtc::SourceTracker **)(a1 + 240);
    v25 = operator new();
    *(_DWORD *)v25 = 0;
    v26 = operator new(0x68uLL);
    *(_QWORD *)(v25 + 8) = v26;
    *(_QWORD *)(v25 + 24) = v26 + 13;
    *(_DWORD *)v26 = v16;
    v26[2] = 0;
    v26[3] = 0;
    v26[1] = 0;
    v27 = v21 - v20;
    if (v21 == v20)
      goto LABEL_27;
    if ((v27 & 0x8000000000000000) == 0)
    {
      v28 = (char *)operator new(v21 - v20);
      v26[1] = v28;
      v29 = &v28[4 * (v27 >> 2)];
      v26[3] = v29;
      memcpy(v28, v20, v21 - v20);
      v26[2] = v29;
LABEL_27:
      v30 = *((_OWORD *)v15 + 5);
      *((_OWORD *)v26 + 4) = *((_OWORD *)v15 + 4);
      *((_OWORD *)v26 + 5) = v30;
      *((_BYTE *)v26 + 96) = v15[96];
      v31 = *((_OWORD *)v15 + 3);
      *((_OWORD *)v26 + 2) = *((_OWORD *)v15 + 2);
      *((_OWORD *)v26 + 3) = v31;
      *(_QWORD *)(v25 + 16) = v26 + 13;
      do
        v32 = __ldxr((unsigned int *)v25);
      while (__stxr(v32 + 1, (unsigned int *)v25));
      v41 = v25;
      v33.var0.var0 = (Data *)&v41;
      webrtc::SourceTracker::OnFrameDelivered(v24, v33);
      v34 = v41;
      if (v41)
      {
        do
        {
          v35 = __ldaxr((unsigned int *)v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, (unsigned int *)v34));
        if (!v36)
        {
          v37 = *(_QWORD *)(v34 + 8);
          if (v37)
          {
            v38 = *(_QWORD *)(v34 + 16);
            v39 = *(void **)(v34 + 8);
            if (v38 != v37)
            {
              do
              {
                v40 = *(void **)(v38 - 96);
                if (v40)
                {
                  *(_QWORD *)(v38 - 88) = v40;
                  operator delete(v40);
                }
                v38 -= 104;
              }
              while (v38 != v37);
              v39 = *(void **)(v34 + 8);
            }
            *(_QWORD *)(v34 + 16) = v37;
            operator delete(v39);
          }
          MEMORY[0x20BD0ADEC](v34, 0x1020C40E72D6CFBLL);
        }
      }
      if (*v17)
        operator delete(*v17);
      v10 = (unsigned __int16 *)v15;
      goto LABEL_44;
    }
LABEL_46:
    abort();
  }
  v7 = a1 + 272;
  if (a3)
    v8 = a2;
  else
    v8 = 0;
  if (!webrtc::acm2::AcmReceiver::InsertPacket(v7, a4, v8, a3))
  {
    webrtc::ModuleRtpRtcpImpl2::LastRtt(*(webrtc::ModuleRtpRtcpImpl2 **)(a1 + 224));
    (*(void (**)(const unsigned __int16 **__return_ptr))(**(_QWORD **)(a1 + 536) + 200))(&v42);
    v9 = v42;
    if (v42 != v43)
    {
      webrtc::ModuleRtpRtcpImpl2::SendNACK(*(webrtc::ModuleRtpRtcpImpl2 **)(a1 + 224), v42, (unsigned __int16)(((_DWORD)v43 - (_DWORD)v42) >> 1));
      v9 = v42;
    }
    if (v9)
    {
      v43 = v9;
      v10 = (unsigned __int16 *)v9;
LABEL_44:
      operator delete(v10);
    }
  }
}

_QWORD *std::vector<webrtc::RtpPacketInfo>::__init_with_size[abi:sn180100]<webrtc::RtpPacketInfo*,webrtc::RtpPacketInfo*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;

  if (a4)
  {
    if (a4 >= 0x276276276276277)
LABEL_9:
      abort();
    v6 = result;
    v7 = 13 * a4;
    result = operator new(104 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      *(_DWORD *)v8 = *(_DWORD *)a2;
      v8[2] = 0;
      v8[3] = 0;
      v8[1] = 0;
      v14 = *(_BYTE **)(a2 + 8);
      v13 = *(_BYTE **)(a2 + 16);
      v15 = v13 - v14;
      if (v13 != v14)
      {
        if (v15 < 0)
          goto LABEL_9;
        v9 = (char *)operator new(v13 - v14);
        v8[1] = v9;
        v8[2] = v9;
        v10 = &v9[4 * (v15 >> 2)];
        v8[3] = v10;
        result = memcpy(v9, v14, v15);
        v8[2] = v10;
      }
      v11 = *(_OWORD *)(a2 + 80);
      *((_OWORD *)v8 + 4) = *(_OWORD *)(a2 + 64);
      *((_OWORD *)v8 + 5) = v11;
      *((_BYTE *)v8 + 96) = *(_BYTE *)(a2 + 96);
      v12 = *(_OWORD *)(a2 + 48);
      *((_OWORD *)v8 + 2) = *(_OWORD *)(a2 + 32);
      *((_OWORD *)v8 + 3) = v12;
      v8 += 13;
      a2 += 104;
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::ChannelReceiveFrameTransformerDelegate>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 60);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::ChannelReceiveFrameTransformerDelegate>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 15;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::ChannelReceiveFrameTransformerDelegate>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24C0B0F40;
  v2 = a1[5];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 == a1 + 1)
  {
    v4 = 4;
    v3 = a1 + 1;
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::ChannelReceiveFrameTransformerDelegate>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24C0B0F40;
  v2 = a1[5];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)a1[4];
  if (v3 == a1 + 1)
  {
    v4 = 4;
    v3 = a1 + 1;
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::ChannelReceiveFrameTransformerDelegate>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 60));
  return v1 == 1;
}

void webrtc::voe::`anonymous namespace'::ChannelReceive::UpdatePlayoutTimestamp(webrtc::voe::_anonymous_namespace_::ChannelReceive *this, char a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned __int16 v11;
  _BYTE v12[8];
  void *__p;
  char v14;
  int v15;
  uint64_t v16[3];
  char v17;

  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 152))(*((_QWORD *)this + 67));
  *((_DWORD *)this + 210) = v6;
  *((_BYTE *)this + 844) = BYTE4(v6);
  if ((v6 & 0xFF00000000) != 0)
  {
    v11 = 0;
    if ((*(unsigned int (**)(_QWORD, unsigned __int16 *))(**((_QWORD **)this + 126) + 440))(*((_QWORD *)this + 126), &v11) != -1)
    {
      if (*((_BYTE *)this + 844))
      {
        v7 = *((_DWORD *)this + 210);
        v8 = v11;
        webrtc::acm2::AcmReceiver::LastDecoder((webrtc::voe::_anonymous_namespace_::ChannelReceive *)((char *)this + 272), (uint64_t)v12);
        if (v17 && (v9 = v15) != 0
          || (v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 67) + 160))(*((_QWORD *)this + 67)), v17))
        {
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v16, v16[1]);
          if (v14 < 0)
            operator delete(__p);
        }
        if ((a2 & 1) == 0)
        {
          v10 = v7 + v9 / -1000 * v8;
          if (v10 != *((_DWORD *)this + 212))
          {
            *((_DWORD *)this + 212) = v10;
            *((_QWORD *)this + 107) = a3;
            *((_BYTE *)this + 864) = 1;
          }
        }
        *((_DWORD *)this + 218) = v11;
      }
      else
      {
        __break(1u);
      }
    }
  }
}

unint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::voe::`anonymous namespace'::ChannelReceive::GetAudioFrameWithInfo(int,webrtc::AudioFrame *)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t result;

  v1 = *a1;
  v2 = atomic_load(&_MergedGlobals_6);
  if (v2)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 536) + 104))(*(_QWORD *)(v1 + 536));
    webrtc::metrics::HistogramAdd(v2, v3);
  }
  else
  {
    while (!__ldaxr(&_MergedGlobals_6))
    {
      if (!__stlxr(0, &_MergedGlobals_6))
        goto LABEL_6;
    }
    __clrex();
  }
LABEL_6:
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 536) + 112))(*(_QWORD *)(v1 + 536));
  v6 = atomic_load(&qword_253EA5558);
  if (v6)
  {
    webrtc::metrics::HistogramAdd(v6, *(_DWORD *)(v1 + 872) + v5);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5558))
    {
      if (!__stlxr(0, &qword_253EA5558))
        goto LABEL_11;
    }
    __clrex();
  }
LABEL_11:
  v8 = atomic_load(&qword_253EA5560);
  if (v8)
  {
    webrtc::metrics::HistogramAdd(v8, v5);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5560))
    {
      if (!__stlxr(0, &qword_253EA5560))
        goto LABEL_16;
    }
    __clrex();
  }
LABEL_16:
  result = atomic_load(&qword_253EA5568);
  if (result)
    return webrtc::metrics::HistogramAdd(result, *(_DWORD *)(v1 + 872));
  while (!__ldaxr(&qword_253EA5568))
  {
    if (!__stlxr(0, &qword_253EA5568))
      return result;
  }
  __clrex();
  return result;
}

uint64_t webrtc::ChannelReceiveFrameTransformerDelegate::Transform(uint64_t a1, const void *a2, size_t a3, uint64_t a4, int a5, uint64_t a6)
{
  const void *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  __int128 v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[2];

  if (*(_BYTE *)(a1 + 56))
  {
    if (a3)
      v9 = a2;
    else
      v9 = 0;
    v32[0] = v9;
    v32[1] = a3;
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v32, a4);
    v30 = std::__throw_bad_function_call[abi:sn180100]();
    return webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(v30);
  }
  v14 = *(_QWORD *)(a1 + 40);
  v15 = (_QWORD *)operator new();
  v16 = v15;
  *v15 = &off_24C0B0F80;
  v15[1] = a3;
  v15[2] = a3;
  if (a3)
  {
    v17 = (void *)operator new[]();
    v16[3] = v17;
    memcpy(v17, a2, a3);
  }
  else
  {
    v15[3] = 0;
  }
  v18 = *(_OWORD *)(a4 + 48);
  *((_OWORD *)v16 + 4) = *(_OWORD *)(a4 + 32);
  *((_OWORD *)v16 + 5) = v18;
  v19 = *(_OWORD *)(a4 + 80);
  *((_OWORD *)v16 + 6) = *(_OWORD *)(a4 + 64);
  *((_OWORD *)v16 + 7) = v19;
  v20 = *(_OWORD *)(a4 + 16);
  *((_OWORD *)v16 + 2) = *(_OWORD *)a4;
  *((_OWORD *)v16 + 3) = v20;
  v21 = *(_OWORD *)(a4 + 176);
  *((_OWORD *)v16 + 12) = *(_OWORD *)(a4 + 160);
  *((_OWORD *)v16 + 13) = v21;
  *((_OWORD *)v16 + 14) = *(_OWORD *)(a4 + 192);
  v22 = *(_OWORD *)(a4 + 112);
  *((_OWORD *)v16 + 8) = *(_OWORD *)(a4 + 96);
  *((_OWORD *)v16 + 9) = v22;
  v23 = *(_OWORD *)(a4 + 144);
  *((_OWORD *)v16 + 10) = *(_OWORD *)(a4 + 128);
  *((_OWORD *)v16 + 11) = v23;
  v24 = (std::string *)(v16 + 30);
  if (*(char *)(a4 + 231) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)(a4 + 208), *(_QWORD *)(a4 + 216));
    v25 = (std::string *)(v16 + 33);
    if ((*(char *)(a4 + 255) & 0x80000000) == 0)
    {
LABEL_12:
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 232);
      v25->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 248);
      v26 = (std::string *)(v16 + 36);
      if ((*(char *)(a4 + 279) & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 208);
    v16[32] = *(_QWORD *)(a4 + 224);
    v25 = (std::string *)(v16 + 33);
    if ((*(char *)(a4 + 255) & 0x80000000) == 0)
      goto LABEL_12;
  }
  std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)(a4 + 232), *(_QWORD *)(a4 + 240));
  v26 = (std::string *)(v16 + 36);
  if ((*(char *)(a4 + 279) & 0x80000000) == 0)
  {
LABEL_13:
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 256);
    v26->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 272);
    *((_BYTE *)v16 + 312) = 0;
    *((_BYTE *)v16 + 380) = 0;
    if (!*(_BYTE *)(a4 + 348))
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_19:
  std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)(a4 + 256), *(_QWORD *)(a4 + 264));
  *((_BYTE *)v16 + 312) = 0;
  *((_BYTE *)v16 + 380) = 0;
  if (*(_BYTE *)(a4 + 348))
  {
LABEL_14:
    *((_BYTE *)v16 + 376) = *(_BYTE *)(a4 + 344);
    v27 = *(_OWORD *)(a4 + 296);
    v28 = *(_OWORD *)(a4 + 328);
    *(_OWORD *)(v16 + 43) = *(_OWORD *)(a4 + 312);
    *(_OWORD *)(v16 + 45) = v28;
    *(_OWORD *)(v16 + 39) = *(_OWORD *)(a4 + 280);
    *(_OWORD *)(v16 + 41) = v27;
    *((_BYTE *)v16 + 380) = 1;
  }
LABEL_15:
  v16[48] = *(_QWORD *)(a4 + 352);
  *((_DWORD *)v16 + 98) = *(_DWORD *)(a4 + 360);
  *((_DWORD *)v16 + 100) = a5;
  v29 = (std::string *)(v16 + 51);
  if (*(char *)(a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)&v29->__r_.__value_.__l.__data_ = *(_OWORD *)a6;
    v16[53] = *(_QWORD *)(a6 + 16);
  }
  v31 = (uint64_t)v16;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 32))(v14, &v31);
  result = v31;
  v31 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;
  _QWORD v9[2];
  uint64_t (*v10)(char, uint64_t *, uint64_t *);
  uint64_t *(*v11)(uint64_t *);

  if (a1)
    (**(void (***)(uint64_t))a1)(a1);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *a2;
  *a2 = 0;
  v9[0] = a1;
  v9[1] = v5;
  v10 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>;
  v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v9, &v8, &v7);
  return v10(1, v9, v9);
}

uint64_t webrtc::ChannelReceiveFrameTransformerDelegate::StartShortCircuiting(webrtc::ChannelReceiveFrameTransformerDelegate *this)
{
  uint64_t v2;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  uint64_t (*v8)(uint64_t);

  if (this)
    (**(void (***)(webrtc::ChannelReceiveFrameTransformerDelegate *))this)(this);
  v2 = *((_QWORD *)this + 6);
  v6[0] = this;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelReceiveFrameTransformerDelegate::StartShortCircuiting(void)::$_0>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelReceiveFrameTransformerDelegate::StartShortCircuiting(void)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v6, &v5, &v4);
  return v7(1, v6, v6);
}

void webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::~TransformableIncomingAudioFrame(void **this)
{
  void *v2;

  *this = &off_24C0B0F80;
  if (*((char *)this + 431) < 0)
  {
    operator delete(this[51]);
    if ((*((char *)this + 311) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 287) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*((char *)this + 311) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[36]);
  if ((*((char *)this + 287) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 263) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(this[33]);
  if ((*((char *)this + 263) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = this[3];
    this[3] = 0;
    if (!v2)
      return;
    goto LABEL_6;
  }
LABEL_11:
  operator delete(this[30]);
  v2 = this[3];
  this[3] = 0;
  if (!v2)
    return;
LABEL_6:
  MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetData(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  if (*((_QWORD *)this + 1))
    return *((_QWORD *)this + 3);
  else
    return 0;
}

_QWORD *webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::SetData(_QWORD *result, void *__src, size_t __n)
{
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  result[1] = 0;
  if (__n)
  {
    v5 = (uint64_t)result;
    v6 = result[2];
    if (v6 >= __n)
    {
      v12 = 0;
    }
    else
    {
      v7 = v6 + (v6 >> 1);
      if (v7 <= __n)
        v8 = __n;
      else
        v8 = v7;
      v9 = (void *)operator new[]();
      v10 = v9;
      v11 = *(_QWORD *)(v5 + 24);
      if (v11)
      {
        memcpy(v9, *(const void **)(v5 + 24), *(_QWORD *)(v5 + 8));
        *(_QWORD *)(v5 + 24) = v10;
        MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(v5 + 24) = v9;
      }
      *(_QWORD *)(v5 + 16) = v8;
      v12 = *(_QWORD *)(v5 + 8);
    }
    result = memcpy((void *)(*(_QWORD *)(v5 + 24) + v12), __src, __n);
    *(_QWORD *)(v5 + 8) = __n;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetPayloadType(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetSsrc(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return *((unsigned int *)this + 100);
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetTimestamp(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::SetRTPTimestamp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t webrtc::TransformableFrameInterface::GetCaptureTimeIdentifier(webrtc::TransformableFrameInterface *this)
{
  return 0;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetDirection(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return 1;
}

void webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetMimeType(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 431) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 51), *((_QWORD *)this + 52));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 408);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 53);
  }
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::GetContributingSources(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  if (*((_BYTE *)this + 44))
    return (uint64_t)this + 48;
  else
    return 0;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::SequenceNumber(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return *((unsigned __int16 *)this + 17) | 0x10000u;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::AbsoluteCaptureTimestamp(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  return 0;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::Type(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  BOOL v1;

  if (*((_BYTE *)this + 384))
    v1 = *((_BYTE *)this + 392) == 0;
  else
    v1 = 1;
  if (v1)
    return 2;
  else
    return 1;
}

uint64_t webrtc::`anonymous namespace'::TransformableIncomingAudioFrame::AudioLevel(webrtc::_anonymous_namespace_::TransformableIncomingAudioFrame *this)
{
  if (*((_BYTE *)this + 392))
    return *((unsigned __int8 *)this + 388) | 0x100u;
  else
    return 0;
}

uint64_t *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>(uint64_t *result)
{
  __int128 *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  char v19[4];
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  _DWORD v32[5];
  char v33;
  __int128 v34;
  void *v35[2];
  void *v36[2];
  __int128 v37;
  void *__p[11];
  char v39;
  char v40;
  char v41;
  _QWORD v42[2];

  v2 = *result;
  v1 = (__int128 *)result[1];
  result[1] = 0;
  if (*(_QWORD *)(v2 + 32))
  {
    v16 = 0u;
    memset(v17, 0, 28);
    v15 = 0u;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LOBYTE(v23) = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32[0] = 0;
    *(_DWORD *)((char *)v32 + 3) = 0;
    *(_QWORD *)&v14 = 0;
    *(_QWORD *)((char *)&v14 + 5) = 0;
    v18 = 0uLL;
    v19[0] = 0;
    v33 = -1;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v37 = 0u;
    memset(__p, 0, 25);
    *(_OWORD *)v35 = 0u;
    *(_OWORD *)v36 = 0u;
    v34 = xmmword_208F060A0;
    if ((*(unsigned int (**)(__int128 *))(*(_QWORD *)v1 + 72))(v1) == 2)
    {
      BYTE1(v14) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 32))(v1);
      DWORD1(v14) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 48))(v1);
      DWORD2(v14) = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 40))(v1);
      (*(void (**)(__int128 *))(*(_QWORD *)v1 + 104))(v1);
      if (v3)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v26 = 1;
        v4 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 104))(v1);
        if (!v5)
        {
LABEL_18:
          std::__throw_bad_optional_access[abi:sn180100]();
          return (uint64_t *)absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(v11, v12, v13);
        }
        v23 = v4;
      }
    }
    else
    {
      v6 = v1[5];
      v16 = v1[4];
      *(_OWORD *)v17 = v6;
      v7 = v1[7];
      *(_OWORD *)&v17[16] = v1[6];
      v18 = v7;
      v8 = v1[3];
      v14 = v1[2];
      v15 = v8;
      webrtc::RTPHeaderExtension::operator=((uint64_t)v19, v1 + 8);
    }
    v42[0] = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 16))(v1);
    v42[1] = v9;
    v10 = *(_QWORD *)(v2 + 32);
    if (v10)
    {
      (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v10 + 48))(v10, v42, &v14);
      if (SHIBYTE(__p[2]) < 0)
      {
        operator delete(__p[0]);
        if ((SHIBYTE(v37) & 0x80000000) == 0)
        {
LABEL_12:
          if ((SHIBYTE(v36[0]) & 0x80000000) == 0)
            return (uint64_t *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 8))(v1);
LABEL_16:
          operator delete(v35[0]);
          return (uint64_t *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 8))(v1);
        }
      }
      else if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v36[1]);
      if ((SHIBYTE(v36[0]) & 0x80000000) == 0)
        return (uint64_t *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 8))(v1);
      goto LABEL_16;
    }
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_18;
  }
  if (v1)
    return (uint64_t *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v1 + 8))(v1);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelReceiveFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v4 = *a2;
    *a2 = 0;
    *a3 = v4;
    v5 = a2[1];
    a2[1] = 0;
    a3[1] = v5;
  }
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelReceiveFrameTransformerDelegate::StartShortCircuiting(void)::$_0 &&>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 56) = 1;
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelReceiveFrameTransformerDelegate::StartShortCircuiting(void)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::voe::CreateChannelSend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (***a6)(_QWORD)@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t *a9@<X8>, int a10, int a11, void **a12, uint64_t a13, uint64_t a14)
{
  uint64_t v19;
  void *v20;
  webrtc::ModuleRtpRtcpImpl2 **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  _QWORD *p_p;
  unint64_t v28;
  _BOOL4 v29;
  unint64_t v30;
  unint64_t v31;
  webrtc::ModuleRtpRtcpImpl2 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  webrtc::ModuleRtpRtcpImpl2 *v43;
  pthread_mutex_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t result;
  _QWORD *v50;
  void *v52;
  void *__p;
  unint64_t v57;
  unsigned __int8 v58;
  pthread_mutexattr_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[4];
  uint64_t v70;
  _QWORD v71[2];
  uint64_t v72;
  int v73;
  char v74;
  char v75;
  __int16 v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v19 = operator new();
  v20 = *a12;
  *(_QWORD *)(v19 + 8) = &unk_24C0B1108;
  v52 = v20;
  *a12 = 0;
  *(_QWORD *)(v19 + 16) = &unk_24C0B1138;
  *(_QWORD *)(v19 + 24) = &unk_24C0B1160;
  *(_QWORD *)v19 = &off_24C0B1010;
  *(_DWORD *)(v19 + 32) = 0;
  pthread_mutexattr_init(&v59);
  pthread_mutexattr_setpolicy_np(&v59, 3);
  pthread_mutex_init((pthread_mutex_t *)(v19 + 48), &v59);
  pthread_mutexattr_destroy(&v59);
  *(_DWORD *)(v19 + 112) = a11;
  *(_BYTE *)(v19 + 116) = 0;
  *(_QWORD *)(v19 + 120) = a5;
  *(_QWORD *)(v19 + 128) = 0;
  v21 = (webrtc::ModuleRtpRtcpImpl2 **)(v19 + 128);
  *(_BYTE *)(v19 + 160) = 0;
  *(_BYTE *)(v19 + 168) = 0;
  *(_QWORD *)(v19 + 136) = 0;
  *(_QWORD *)(v19 + 144) = 0;
  *(_DWORD *)(v19 + 152) = 0;
  *(_BYTE *)(v19 + 200) = 0;
  *(_BYTE *)(v19 + 208) = 0;
  *(_DWORD *)(v19 + 176) = 0;
  *(_QWORD *)(v19 + 184) = 0;
  *(_DWORD *)(v19 + 192) = 0;
  *(_WORD *)(v19 + 216) = 0;
  *(_QWORD *)(v19 + 224) = 0;
  v22 = operator new();
  *(_QWORD *)v22 = &off_24C0B1188;
  pthread_mutexattr_init(&v59);
  pthread_mutexattr_setpolicy_np(&v59, 3);
  pthread_mutex_init((pthread_mutex_t *)(v22 + 8), &v59);
  pthread_mutexattr_destroy(&v59);
  *(_QWORD *)(v22 + 72) = 0;
  *(_QWORD *)(v19 + 232) = v22;
  v23 = operator new();
  *(_QWORD *)v23 = a1;
  pthread_mutexattr_init(&v59);
  pthread_mutexattr_setpolicy_np(&v59, 3);
  pthread_mutex_init((pthread_mutex_t *)(v23 + 8), &v59);
  pthread_mutexattr_destroy(&v59);
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_QWORD *)(v23 + 120) = 0;
  *(_QWORD *)(v23 + 128) = -1;
  *(_BYTE *)(v23 + 136) = 0;
  *(_QWORD *)(v23 + 140) = 0x45FA000000000000;
  *(int64x2_t *)(v23 + 152) = vdupq_n_s64(0x3E8uLL);
  *(_QWORD *)(v23 + 168) = 1000;
  *(_DWORD *)(v23 + 176) = -1;
  *(_QWORD *)(v19 + 240) = v23;
  *(_WORD *)(v19 + 248) = 0;
  *(_BYTE *)(v19 + 250) = 1;
  *(_QWORD *)(v19 + 256) = a6;
  if (a6)
    (**a6)(a6);
  *(_DWORD *)(v19 + 264) = *(_DWORD *)a7;
  *(_BYTE *)(v19 + 268) = *(_BYTE *)(a7 + 4);
  *(_QWORD *)(v19 + 272) = 0;
  pthread_mutexattr_init(&v59);
  pthread_mutexattr_setpolicy_np(&v59, 3);
  pthread_mutex_init((pthread_mutex_t *)(v19 + 280), &v59);
  pthread_mutexattr_destroy(&v59);
  *(_QWORD *)(v19 + 344) = 0;
  *(_QWORD *)(v19 + 352) = 0;
  *(_DWORD *)(v19 + 360) = 0;
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, "AudioEncoder", 12, 0);
  *(_BYTE *)(v19 + 399) = 9;
  if (v19 + 376 <= (unint64_t)"x-unknown" && v19 + 385 > (unint64_t)"x-unknown")
    goto LABEL_49;
  strcpy((char *)(v19 + 376), "x-unknown");
  *(_DWORD *)(v19 + 400) = 0;
  *(_QWORD *)(v19 + 424) = 0;
  *(_QWORD *)(v19 + 432) = 0;
  *(_QWORD *)(v19 + 408) = 0;
  *(_QWORD *)(v19 + 416) = v19 + 424;
  webrtc::AudioCodingModule::Create(&v59.__sig);
  v24 = *(_QWORD *)(v19 + 144);
  *(_QWORD *)(v19 + 144) = v59.__sig;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  BYTE1(v59.__sig) = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0;
  v67 = 0u;
  v68 = 0u;
  memset(v69, 0, 29);
  v72 = 0;
  v70 = 0;
  memset(v71, 0, 11);
  v77 = 0;
  v78 = 0;
  v80 = 0;
  v79 = 0;
  v66 = v19 + 24;
  *(_QWORD *)&v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a13 + 136))(a13);
  if (!a1)
  {
    {
      v50 = (_QWORD *)operator new();
      *v50 = &unk_24C0B13E8;
      webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v50;
    }
    a1 = webrtc::Clock::GetRealTimeClock(void)::clock;
  }
  LOBYTE(v59.__sig) = 1;
  *(_QWORD *)v59.__opaque = a1;
  *((_QWORD *)&v60 + 1) = a3;
  v26 = *(_QWORD *)(v19 + 232);
  *((_QWORD *)&v68 + 1) = *(_QWORD *)(v19 + 120);
  *(_QWORD *)&v67 = v26;
  *(_QWORD *)&v64 = a4;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a14 + 16))(&__p, a14, "WebRTC-DisableRtxRateLimiter", 28);
  if (((char)v58 & 0x80000000) == 0)
  {
    p_p = &__p;
    v28 = v58;
    goto LABEL_15;
  }
  v28 = v57;
  if ((v57 & 0x8000000000000000) != 0 || (p_p = __p, v57) && !__p)
LABEL_49:
    __break(1u);
LABEL_15:
  if (v28 >= 8)
  {
    v29 = *p_p == 0x64656C6261736944;
    if ((v58 & 0x80) == 0)
      goto LABEL_20;
  }
  else
  {
    v29 = 0;
    if ((v58 & 0x80) == 0)
      goto LABEL_20;
  }
  operator delete(__p);
LABEL_20:
  if (v29)
    v69[1] = *(_QWORD *)(v19 + 240);
  BYTE1(v71[1]) = a8;
  LODWORD(v69[3]) = a10;
  *((_QWORD *)&v64 + 1) = v19 + 16;
  v73 = a11;
  v72 = a14;
  v30 = operator new();
  v31 = webrtc::ModuleRtpRtcpImpl2::ModuleRtpRtcpImpl2(v30, (uint64_t)&v59);
  v32 = *v21;
  *v21 = (webrtc::ModuleRtpRtcpImpl2 *)v31;
  if (v32)
  {
    webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v32);
    MEMORY[0x20BD0ADEC]();
    v31 = (unint64_t)*v21;
  }
  v33 = *(_QWORD *)(v31 + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v33 + 1072));
  *(_BYTE *)(v33 + 1136) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)(v33 + 1072));
  v34 = *(_QWORD *)(*(_QWORD *)(v19 + 128) + 24);
  if (v34)
    v35 = v34 + 1016;
  else
    v35 = 0;
  v36 = operator new();
  v37 = webrtc::RTPSenderAudio::RTPSenderAudio(v36, *(uint64_t *)v59.__opaque, v35);
  v38 = *(_QWORD *)(v19 + 136);
  *(_QWORD *)(v19 + 136) = v37;
  if (v38)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v38 + 224));
    if (*(_QWORD *)(v38 + 200))
    {
      v40 = *(_QWORD *)(v38 + 184);
      v39 = *(uint64_t **)(v38 + 192);
      v41 = *v39;
      *(_QWORD *)(v41 + 8) = *(_QWORD *)(v40 + 8);
      **(_QWORD **)(v40 + 8) = v41;
      *(_QWORD *)(v38 + 200) = 0;
      if (v39 != (uint64_t *)(v38 + 184))
      {
        do
        {
          v42 = (uint64_t *)v39[1];
          operator delete(v39);
          v39 = v42;
        }
        while (v42 != (uint64_t *)(v38 + 184));
      }
    }
    pthread_mutex_destroy((pthread_mutex_t *)(v38 + 120));
    pthread_mutex_destroy((pthread_mutex_t *)(v38 + 16));
    MEMORY[0x20BD0ADEC](v38, 0x1060C40538CB600);
  }
  v43 = *v21;
  v44 = (pthread_mutex_t *)((char *)*v21 + 128);
  pthread_mutex_lock(v44);
  if (!*((_DWORD *)v43 + 16))
  {
    v45 = *((_QWORD *)v43 + 11) / 2;
    v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v43 + 6) + 16))(*((_QWORD *)v43 + 6));
    v47 = v46 + v45;
    if (v46 == 0x8000000000000000)
      v47 = 0x8000000000000000;
    if (v46 == 0x7FFFFFFFFFFFFFFFLL)
      v47 = 0x7FFFFFFFFFFFFFFFLL;
    if (!*((_BYTE *)v43 + 208))
      *((_BYTE *)v43 + 208) = 1;
    *((_QWORD *)v43 + 25) = v47;
    v48 = *((_QWORD *)v43 + 15);
    if (v48)
    {
      __p = (void *)v45;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v48 + 48))(v48, &__p);
    }
  }
  *((_DWORD *)v43 + 16) = 1;
  pthread_mutex_unlock(v44);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v19 + 144) + 24))(*(_QWORD *)(v19 + 144), v19 + 8);
  if (v52)
  {
    __p = v52;
    if (__p)
      (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  }
  if (SHIBYTE(v79) < 0)
    operator delete(v77);
  result = v70;
  if (v70)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  *a9 = v19;
  return result;
}

_QWORD *webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  pthread_mutexattr_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v17[0] = &off_24C0B11B8;
  v17[1] = a1;
  v18 = v17;
  v4 = *(_QWORD *)(a1 + 368);
  v5 = operator new();
  if (v18)
  {
    if (v18 == v17)
    {
      v20 = v19;
      (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
    }
    else
    {
      v20 = v18;
      v18 = 0;
    }
  }
  else
  {
    v20 = 0;
  }
  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)v5 = &unk_24C0B1248;
  pthread_mutexattr_init(&v21);
  pthread_mutexattr_setpolicy_np(&v21, 3);
  pthread_mutex_init((pthread_mutex_t *)(v5 + 8), &v21);
  pthread_mutexattr_destroy(&v21);
  v7 = v20;
  if (!v20)
  {
    *(_QWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = v6;
    *(_QWORD *)(v5 + 112) = v4;
    *(_BYTE *)(v5 + 120) = 0;
    if (&v16 != (uint64_t *)-40)
      goto LABEL_13;
LABEL_10:
    v8 = 4;
    v7 = v19;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_16;
  }
  if (v20 == v19)
  {
    *(_QWORD *)(v5 + 96) = v5 + 72;
    (*(void (**)(_QWORD *, uint64_t))(v19[0] + 24))(v19, v5 + 72);
  }
  else
  {
    *(_QWORD *)(v5 + 96) = (*(uint64_t (**)(void))(*v20 + 16))();
  }
  v7 = v20;
  *(_QWORD *)(v5 + 104) = v6;
  *(_QWORD *)(v5 + 112) = v4;
  *(_BYTE *)(v5 + 120) = 0;
  if (v7 == v19)
    goto LABEL_10;
LABEL_13:
  if (v7)
  {
    v8 = 5;
    goto LABEL_15;
  }
LABEL_16:
  *(_QWORD *)v5 = off_24C0B1200;
  *(_DWORD *)(v5 + 124) = 0;
  v9 = (unsigned int *)(v5 + 124);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v11 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v5;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v5 = *(_QWORD *)(a1 + 272);
    v12 = *(uint64_t (***)())v5;
  }
  else
  {
    v12 = off_24C0B1200;
  }
  v13 = *(_QWORD *)(v5 + 104);
  v19[0] = v5;
  ((void (*)(uint64_t))*v12)(v5);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 40))(v13, v19);
  if (v19[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v19[0] + 8))(v19[0]);
  result = v18;
  if (v18 == v17)
  {
    v15 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void webrtc::voe::`anonymous namespace'::ChannelSend::~ChannelSend(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  void (**v2)(webrtc::voe::_anonymous_namespace_::ChannelSend *__hidden);
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  webrtc::ModuleRtpRtcpImpl2 *v19;

  v2 = &off_24C0B1010;
  *(_QWORD *)this = &off_24C0B1010;
  *((_QWORD *)this + 1) = &unk_24C0B1108;
  *((_QWORD *)this + 2) = &unk_24C0B1138;
  *((_QWORD *)this + 3) = &unk_24C0B1160;
  v3 = *((_QWORD *)this + 34);
  if (v3)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 104) + 56))(*(_QWORD *)(v3 + 104));
    v4 = *(_QWORD *)(v3 + 104);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(v3 + 104) = 0;
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 8));
    v5 = *(_QWORD **)(v3 + 96);
    *(_QWORD *)(v3 + 96) = 0;
    if (v5 == (_QWORD *)(v3 + 72))
    {
      v6 = 4;
      v5 = (_QWORD *)(v3 + 72);
    }
    else
    {
      if (!v5)
      {
LABEL_9:
        *(_QWORD *)(v3 + 96) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
        v2 = *(void (***)(webrtc::voe::_anonymous_namespace_::ChannelSend *__hidden))this;
        goto LABEL_10;
      }
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_9;
  }
LABEL_10:
  v2[23](this);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 18) + 24))(*((_QWORD *)this + 18), 0);
  v7 = (void (***)(_QWORD))*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v7)
    (**v7)(v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 416, *((_QWORD *)this + 53));
  if ((*((char *)this + 399) & 0x80000000) == 0)
  {
    v8 = (void (***)(_QWORD))*((_QWORD *)this + 46);
    *((_QWORD *)this + 46) = 0;
    if (!v8)
      goto LABEL_15;
    goto LABEL_14;
  }
  operator delete(*((void **)this + 47));
  v8 = (void (***)(_QWORD))*((_QWORD *)this + 46);
  *((_QWORD *)this + 46) = 0;
  if (v8)
LABEL_14:
    (**v8)(v8);
LABEL_15:
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 280));
  v9 = *((_QWORD *)this + 34);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 32);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
  {
    std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)(v11 + 72));
    pthread_mutex_destroy((pthread_mutex_t *)(v11 + 8));
    MEMORY[0x20BD0ADEC](v11, 0x10E0C409C3A6D8FLL);
  }
  v12 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v14)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(v14 + 224));
    if (*(_QWORD *)(v14 + 200))
    {
      v16 = *(_QWORD *)(v14 + 184);
      v15 = *(uint64_t **)(v14 + 192);
      v17 = *v15;
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(v16 + 8);
      **(_QWORD **)(v16 + 8) = v17;
      *(_QWORD *)(v14 + 200) = 0;
      if (v15 != (uint64_t *)(v14 + 184))
      {
        do
        {
          v18 = (uint64_t *)v15[1];
          operator delete(v15);
          v15 = v18;
        }
        while (v18 != (uint64_t *)(v14 + 184));
      }
    }
    pthread_mutex_destroy((pthread_mutex_t *)(v14 + 120));
    pthread_mutex_destroy((pthread_mutex_t *)(v14 + 16));
    MEMORY[0x20BD0ADEC](v14, 0x1060C40538CB600);
  }
  v19 = (webrtc::ModuleRtpRtcpImpl2 *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v19)
  {
    webrtc::ModuleRtpRtcpImpl2::~ModuleRtpRtcpImpl2(v19);
    MEMORY[0x20BD0ADEC]();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::ReceivedRTCPPacket(webrtc::voe::_anonymous_namespace_::ChannelSend *this, const unsigned __int8 *a2, uint64_t a3)
{
  webrtc::RTCPReceiver *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (webrtc::RTCPReceiver *)(*((_QWORD *)this + 16) + 712);
  if (!a3)
    a2 = 0;
  webrtc::RTCPReceiver::IncomingPacket(v4, a2, a3);
  result = (*(uint64_t (**)(webrtc::voe::_anonymous_namespace_::ChannelSend *))(*(_QWORD *)this + 168))(this);
  if (result)
  {
    v6 = result;
    v7 = 1000;
    if (result < 1000)
      v7 = result;
    if (v7 <= 30)
      v8 = 30;
    else
      v8 = v7;
    v9 = (_QWORD *)*((_QWORD *)this + 30);
    pthread_mutex_lock((pthread_mutex_t *)(v9 + 1));
    v9[21] = v8;
    v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
    v11 = v10 / 0x3E8uLL;
    if (v10 % 0x3E8uLL > 0x1F3)
      ++v11;
    if (-v10 % 0x3E8uLL <= 0x1F4)
      v12 = 0;
    else
      v12 = -1;
    if (v10 < 0)
      v13 = v12 - -v10 / 0x3E8uLL;
    else
      v13 = v11;
    webrtc::RateStatistics::SetWindowSize((webrtc::RateStatistics *)(v9 + 9), v8, v13);
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 1));
    v14 = v6;
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetRTCPStatistics@<X0>(webrtc::voe::_anonymous_namespace_::ChannelSend *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;

  v4 = (*(uint64_t (**)(webrtc::voe::_anonymous_namespace_::ChannelSend *))(*(_QWORD *)this + 168))(this);
  v5 = *((_QWORD *)this + 16);
  v6 = *(_QWORD *)(v5 + 24);
  v7 = *(_QWORD *)(v6 + 608);
  v8 = *(_QWORD *)(v6 + 624);
  v9 = *(_DWORD *)(v6 + 632);
  v10 = *(_QWORD *)(v6 + 640);
  v11 = *(_QWORD *)(v6 + 656);
  v12 = *(_QWORD *)(v6 + 672);
  v13 = *(_QWORD *)(v6 + 736);
  v14 = *(_QWORD *)(v6 + 744) + *(_QWORD *)(v6 + 616);
  v15 = *(_QWORD *)(v6 + 752);
  LODWORD(v6) = *(_DWORD *)(v6 + 760);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v8 + v7 + v13 + v15;
  *(_QWORD *)(a2 + 24) = v11;
  *(_DWORD *)(a2 + 32) = v6 + v9;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v12;
  webrtc::RTCPReceiver::GetLatestReportBlockData((webrtc::RTCPReceiver *)(v5 + 712), (char **)&v18);
  v16 = v19;
  *(_OWORD *)(a2 + 56) = v18;
  *(_QWORD *)(a2 + 72) = v16;
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 280));
  *(_DWORD *)(a2 + 80) = *((_DWORD *)this + 86);
  return pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 280));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetEncoder(uint64_t a1, char a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  std::string *v12;
  char v13;
  __int128 v14;
  const std::string::value_type *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;

  v8 = *(_QWORD *)(a1 + 128);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 32))(*a4);
  webrtc::RTCPSender::SetRtpClockRate((webrtc::RTCPSender *)(v8 + 32), a2, v9);
  v10 = *(_QWORD *)(a1 + 136);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a4 + 32))(*a4);
  (*(void (**)(uint64_t))(*(_QWORD *)*a4 + 24))(*a4);
  pthread_mutex_lock((pthread_mutex_t *)(v10 + 16));
  *(_DWORD *)(v10 + 288) = v11;
  *(_BYTE *)(v10 + 292) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 16));
  v12 = (std::string *)(a1 + 376);
  if ((__int128 *)(a1 + 376) != a3)
  {
    v13 = *((_BYTE *)a3 + 23);
    if (*(char *)(a1 + 399) < 0)
    {
      if (v13 >= 0)
        v15 = (const std::string::value_type *)a3;
      else
        v15 = *(const std::string::value_type **)a3;
      if (v13 >= 0)
        v16 = *((unsigned __int8 *)a3 + 23);
      else
        v16 = *((_QWORD *)a3 + 1);
      std::string::__assign_no_alias<false>(v12, v15, v16);
    }
    else if ((*((_BYTE *)a3 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v12, *(char **)a3, *((_QWORD *)a3 + 1));
    }
    else
    {
      v14 = *a3;
      *(_QWORD *)(a1 + 392) = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    *(_OWORD *)(a1 + 400) = *(__int128 *)((char *)a3 + 24);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a1 + 416, *((char **)a3 + 5), (char *)a3 + 48);
  }
  v17 = *(_QWORD *)(a1 + 144);
  v18 = *a4;
  *a4 = 0;
  v20 = v18;
  v21 = &v20;
  (*(void (**)(uint64_t, uint64_t **, uint64_t (*)(uint64_t **, uint64_t *)))(*(_QWORD *)v17 + 16))(v17, &v21, rtc::FunctionView<void ()(std::unique_ptr<webrtc::AudioEncoder> *)>::CallVoidPtr<webrtc::AudioCodingModule::SetEncoder(std::unique_ptr<webrtc::AudioEncoder>)::{lambda(std::unique_ptr<webrtc::AudioEncoder> *)#1}>);
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::ModifyEncoder(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::CallEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
}

void webrtc::voe::`anonymous namespace'::ChannelSend::SetRTCP_CNAME(uint64_t a1, char *__src, unint64_t a3)
{
  size_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char *v12;
  size_t v13;
  char __s[8];
  size_t v15;
  unint64_t v16;

  if (a3 >= 0xFF)
    v5 = 255;
  else
    v5 = a3;
  if (!__src && v5)
    goto LABEL_22;
  if (v5 > 0x16)
  {
    v7 = (v5 & 0xF8) + 8;
    if ((v5 | 7) != 0x17)
      v7 = v5 | 7;
    v8 = v7 + 1;
    v6 = (char *)operator new(v7 + 1);
    v15 = v5;
    v16 = v8 | 0x8000000000000000;
    *(_QWORD *)__s = v6;
  }
  else
  {
    HIBYTE(v16) = v5;
    v6 = __s;
  }
  v9 = &v6[v5];
  if (v6 <= __src && v9 > __src)
    goto LABEL_22;
  if (v5)
    memmove(v6, __src, v5);
  *v9 = 0;
  v11 = *(_QWORD *)(a1 + 128);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    v12 = __s;
    goto LABEL_20;
  }
  v12 = *(char **)__s;
  if (!*(_QWORD *)__s)
  {
LABEL_22:
    __break(1u);
    return;
  }
LABEL_20:
  v13 = strlen(v12);
  webrtc::RTCPSender::SetCNAME(v11 + 32, (__int128 *)v12, v13);
  if (SHIBYTE(v16) < 0)
    operator delete(*(void **)__s);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetSendAudioLevelIndicationStatus(webrtc::voe::_anonymous_namespace_::ChannelSend *this, int a2, int a3)
{
  uint64_t v3;
  char v5;
  BOOL v6;
  BOOL v8;
  BOOL v9;
  BOOL v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;

  atomic_store(a2, (unsigned __int8 *)this + 248);
  v3 = *(_QWORD *)(*((_QWORD *)this + 16) + 24);
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 1072));
    v5 = webrtc::RtpHeaderExtensionMap::RegisterByUri((webrtc::RtpHeaderExtensionMap *)(v3 + 1152), a3, "urn:ietf:params:rtp-hdrext:ssrc-audio-level", 43);
    if (*(_BYTE *)(v3 + 1160))
      v6 = 0;
    else
      v6 = *(_BYTE *)(v3 + 1161) == 0;
    v8 = !v6 || *(_BYTE *)(v3 + 1157) != 0 || *(_BYTE *)(v3 + 1153) != 0;
    *(_BYTE *)(v3 + 1296) = v8;
    webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v3 + 1016));
    result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
    if ((v5 & 1) == 0)
    {
      v17 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtp_rtcp_impl2.cc", 563, "registered", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v13, v14, v15, v16, v18);
    }
  }
  else
  {
    pthread_mutex_lock((pthread_mutex_t *)(v3 + 1072));
    webrtc::RtpHeaderExtensionMap::Deregister(v3 + 1152, "urn:ietf:params:rtp-hdrext:ssrc-audio-level", 43);
    if (*(_BYTE *)(v3 + 1160))
      v9 = 0;
    else
      v9 = *(_BYTE *)(v3 + 1161) == 0;
    v11 = !v9 || *(_BYTE *)(v3 + 1157) != 0 || *(_BYTE *)(v3 + 1153) != 0;
    *(_BYTE *)(v3 + 1296) = v11;
    webrtc::RTPSender::UpdateHeaderSizes((webrtc::RTPSender *)(v3 + 1016));
    return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1072));
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::RegisterSenderCongestionControlObjects(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = a1[29];
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 8));
  *(_QWORD *)(v6 + 72) = v4;
  pthread_mutex_unlock((pthread_mutex_t *)(v6 + 8));
  result = webrtc::RtpPacketHistory::SetStorePacketsStatus(*(_QWORD *)(a1[16] + 24), 1, 0x258uLL);
  a1[28] = v5;
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::ResetSenderCongestionControlObjects(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  uint64_t v2;

  webrtc::RtpPacketHistory::SetStorePacketsStatus(*(_QWORD *)(*((_QWORD *)this + 16) + 24), 0, 0x258uLL);
  *((_QWORD *)this + 28) = 0;
  v2 = *((_QWORD *)this + 29);
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  *(_QWORD *)(v2 + 72) = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetRemoteRTCPReportBlocks@<X0>(webrtc::voe::_anonymous_namespace_::ChannelSend *this@<X0>, char **a2@<X8>)
{
  return webrtc::RTCPReceiver::GetLatestReportBlockData((webrtc::RTCPReceiver *)(*((_QWORD *)this + 16) + 712), a2);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetANAStatistics(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 48))(*((_QWORD *)this + 18));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::RegisterCngPayloadType(webrtc::voe::_anonymous_namespace_::ChannelSend *this, char a2, int a3)
{
  uint64_t v6;

  webrtc::RTCPSender::SetRtpClockRate((webrtc::RTCPSender *)(*((_QWORD *)this + 16) + 32), a2, a3);
  v6 = *((_QWORD *)this + 17);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  if (a3 > 31999)
  {
    if (a3 == 32000)
    {
      *(_BYTE *)(v6 + 211) = a2;
      return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    }
    if (a3 == 48000)
    {
      *(_BYTE *)(v6 + 212) = a2;
      return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    }
  }
  else
  {
    if (a3 == 8000)
    {
      *(_BYTE *)(v6 + 209) = a2;
      return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
    }
    if (a3 == 16000)
      *(_BYTE *)(v6 + 210) = a2;
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetSendTelephoneEventPayloadType(webrtc::voe::_anonymous_namespace_::ChannelSend *this, char a2, int a3)
{
  uint64_t v6;

  webrtc::RTCPSender::SetRtpClockRate((webrtc::RTCPSender *)(*((_QWORD *)this + 16) + 32), a2, a3);
  v6 = *((_QWORD *)this + 17);
  pthread_mutex_lock((pthread_mutex_t *)(v6 + 16));
  *(_BYTE *)(v6 + 82) = a2;
  *(_DWORD *)(v6 + 84) = a3;
  return pthread_mutex_unlock((pthread_mutex_t *)(v6 + 16));
}

BOOL webrtc::voe::`anonymous namespace'::ChannelSend::SendTelephoneEventOutband(webrtc::voe::_anonymous_namespace_::ChannelSend *this, char a2, __int16 a3)
{
  uint64_t v5;
  int v6;
  pthread_mutex_t *v7;
  unint64_t v8;
  _BOOL8 v9;
  _WORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (!*((_BYTE *)this + 116))
    return 0;
  v5 = *((_QWORD *)this + 17);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 16));
  v6 = *(char *)(v5 + 82);
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 16));
  if (v6 < 0)
    return 0;
  v7 = (pthread_mutex_t *)(v5 + 120);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 120));
  v8 = *(_QWORD *)(v5 + 200);
  v9 = v8 < 0x14;
  if (v8 <= 0x13)
  {
    v10 = operator new(0x18uLL);
    v10[8] = a3;
    *((_BYTE *)v10 + 18) = v6;
    *((_BYTE *)v10 + 19) = a2;
    *((_BYTE *)v10 + 20) = 10;
    v12 = *(_QWORD *)(v5 + 184);
    v11 = (_QWORD *)(v5 + 184);
    *(_QWORD *)v10 = v12;
    *((_QWORD *)v10 + 1) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *v11 = v10;
    v11[2] = v8 + 1;
  }
  pthread_mutex_unlock(v7);
  return v9;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::OnBitrateAllocation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v7 = a2;
  v4 = a1[30];
  v5 = *a2;
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 8));
  *(_DWORD *)(v4 + 176) = v5;
  return pthread_mutex_unlock((pthread_mutex_t *)(v4 + 8));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetTargetBitrate(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 18) + 56))(*((_QWORD *)this + 18));
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetInputMute(webrtc::voe::_anonymous_namespace_::ChannelSend *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 48);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 48));
  *((_BYTE *)this + 216) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::ProcessAndEncodeAudio(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  int64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t, _QWORD *, _QWORD *);
  _QWORD *(*v19)(_QWORD *);

  v2 = atomic_load((unsigned __int8 *)(result + 249));
  if ((v2 & 1) != 0)
  {
    v4 = result;
    v5 = atomic_load((unsigned __int8 *)(result + 250));
    if ((v5 & 1) != 0)
    {
      atomic_store(0, (unsigned __int8 *)(result + 250));
      v6 = *a2;
      if (*(_BYTE *)(result + 168) && *(_BYTE *)(v6 + 15448))
      {
        v7 = ((unint64_t)((*(_QWORD *)(v6 + 15440) - *(_QWORD *)(result + 160)) * *(int *)(v6 + 32) / 1000)
            / *(_QWORD *)(v6 + 24)
            - 1)
           * *(_QWORD *)(v6 + 24);
        *(_DWORD *)(result + 152) += v7 & ~(v7 >> 63);
      }
    }
    else
    {
      v6 = *a2;
    }
    v8 = *(_DWORD *)(result + 152);
    *(_DWORD *)v6 = v8;
    *(_DWORD *)(result + 152) = v8 + *(_DWORD *)(v6 + 24);
    v9 = *(_QWORD *)(v6 + 15440);
    v10 = *(_QWORD *)(v6 + 15448);
    *(_QWORD *)(result + 160) = v9;
    *(_BYTE *)(result + 168) = v10;
    v11 = *a2;
    if (rtc::g_clock)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v12 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)(v11 + 56) = v12 / 1000000;
    v13 = *(_QWORD *)(v4 + 368);
    v14 = *a2;
    *a2 = 0;
    v17[0] = v4;
    v17[1] = v14;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v13 + 8))(v13, v17, &v16, &v15);
    return v18(1, v17, v17);
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetRtpRtcp(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  return *((_QWORD *)this + 16);
}

unint64_t webrtc::voe::`anonymous namespace'::ChannelSend::GetRTT(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;

  webrtc::RTCPReceiver::GetLatestReportBlockData((webrtc::RTCPReceiver *)(*((_QWORD *)this + 16) + 712), &v7);
  if (v7 == v8)
  {
    v2 = 0;
    if (!v7)
      return 0;
  }
  else
  {
    v1 = *((_QWORD *)v7 + 4);
    if ((v1 & 0x8000000000000000) != 0)
    {
      v4 = -(uint64_t)v1;
      v5 = v4 / 0x3E8;
      if (v4 % 0x3E8 <= 0x1F4)
        v6 = 0;
      else
        v6 = -1;
      v2 = v6 - v5;
    }
    else if (v1 % 0x3E8 <= 0x1F3)
    {
      v2 = v1 / 0x3E8;
    }
    else
    {
      v2 = v1 / 0x3E8 + 1;
    }
  }
  v8 = v7;
  operator delete(v7);
  return v2;
}

void webrtc::voe::`anonymous namespace'::ChannelSend::StartSend(webrtc::voe::_anonymous_namespace_::ChannelSend *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE v25[40];
  void *__p;
  void *v27;

  *((_BYTE *)this + 116) = 1;
  v2 = *((_QWORD *)this + 28);
  v3 = *((_QWORD *)this + 16);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 208))(v3);
  webrtc::PacketRouter::AddSendRtpModuleToMap(v2, v3, v4, v5, v6, v7, v8, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
  if ((v10 & 0xFF00000000) != 0)
    webrtc::PacketRouter::AddSendRtpModuleToMap(v2, v3, v10, v11, v12, v13, v14, v15);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 256))(v3);
  if ((v16 & 0xFF00000000) != 0)
    webrtc::PacketRouter::AddSendRtpModuleToMap(v2, v3, v16, v17, v18, v19, v20, v21);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 128))(v3))
    *(_QWORD *)(v2 + 80) = v3;
  v22 = *(_QWORD *)(*((_QWORD *)this + 16) + 24);
  pthread_mutex_lock((pthread_mutex_t *)(v22 + 1072));
  *(_BYTE *)(v22 + 1136) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(v22 + 1072));
  v23 = *((_QWORD *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v23 + 128));
  v24 = *(unsigned __int8 *)(v23 + 192);
  pthread_mutex_unlock((pthread_mutex_t *)(v23 + 128));
  if (!v24)
  {
    webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v23, (uint64_t)v25);
    pthread_mutex_lock((pthread_mutex_t *)(v23 + 128));
    *(_BYTE *)(v23 + 192) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(v23 + 128));
    if (__p)
    {
      v27 = __p;
      operator delete(__p);
    }
  }
  atomic_store(1u, (unsigned __int8 *)this + 250);
  atomic_store(1u, (unsigned __int8 *)this + 249);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::StopSend(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  pthread_mutex_t *v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD v20[2];
  __n128 (*v21)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v22)(_QWORD *);
  void *__p;
  void *v24;
  pthread_mutex_t v25;
  pthread_cond_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(this + 116))
  {
    v1 = this;
    *(_BYTE *)(this + 116) = 0;
    atomic_store(0, (unsigned __int8 *)(this + 249));
    rtc::Event::Event((rtc::Event *)&v25, 0, 0);
    v2 = *(_QWORD *)(v1 + 368);
    v20[0] = v1;
    v20[1] = &v25;
    v21 = absl::internal_any_invocable::LocalManagerTrivial;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v2 + 8))(v2, v20, &v19, &v18);
    v21(1, (__n128 *)v20, (__n128 *)v20);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v25, v3, v4);
    v5 = *(_QWORD *)(v1 + 128);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 128));
    v6 = *(unsigned __int8 *)(v5 + 192);
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 128));
    if (v6)
    {
      webrtc::ModuleRtpRtcpImpl2::GetFeedbackState((webrtc::ModuleRtpRtcpImpl2 *)v5, (uint64_t)v20);
      pthread_mutex_lock((pthread_mutex_t *)(v5 + 128));
      *(_BYTE *)(v5 + 192) = 0;
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 128));
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + 24);
    pthread_mutex_lock((pthread_mutex_t *)(v7 + 1072));
    *(_BYTE *)(v7 + 1136) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 1072));
    webrtc::PacketRouter::RemoveSendRtpModule(*(webrtc::PacketRouter **)(v1 + 224), *(_QWORD *)(v1 + 128), v8, v9, v10, v11, v12, v13);
    v14 = *(_QWORD *)(v1 + 232);
    v15 = *(_QWORD *)(v1 + 128);
    v16 = (pthread_mutex_t *)(v15 + 128);
    pthread_mutex_lock((pthread_mutex_t *)(v15 + 128));
    v17 = *(unsigned int *)(v15 + 44);
    pthread_mutex_unlock(v16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v17);
    pthread_mutex_destroy(&v25);
    return pthread_cond_destroy(&v26);
  }
  return this;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetFrameEncryptor(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void (***v4)(_QWORD);
  char v6;
  char v7;
  _QWORD v8[2];
  uint64_t (*v9)(char, __int128 *, _OWORD *);
  uint64_t (*v10)(uint64_t *);

  v3 = *(_QWORD *)(a1 + 368);
  v4 = (void (***)(_QWORD))*a2;
  if (*a2)
    (**v4)(*a2);
  v8[0] = a1;
  v8[1] = v4;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v8, &v7, &v6);
  return v9(1, (__int128 *)v8, v8);
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SetEncoderToPacketizerFrameTransformer(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, __int128 *, _OWORD *);
  uint64_t (*v8)(uint64_t *);

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 368);
    *a2 = 0;
    v6[0] = result;
    v6[1] = v2;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v6, &v5, &v4);
    return v7(1, (__int128 *)v6, v6);
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::RtcpPacketTypesCounterUpdated(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;

  if (*(_DWORD *)(result + 112) == a2)
  {
    v4 = result;
    v5 = (pthread_mutex_t *)(result + 280);
    pthread_mutex_lock((pthread_mutex_t *)(result + 280));
    v6 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 344) = *(_OWORD *)a3;
    *(_DWORD *)(v4 + 360) = v6;
    return pthread_mutex_unlock(v5);
  }
  return result;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::OnReportBlockDataUpdated(uint64_t a1, uint64_t a2, double a3)
{
  float v3;
  float *v5;
  float v6;

  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  v3 = (double)*(unint64_t *)&a3 * 0.00390625;
  v6 = v3;
  v5 = &v6;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SendData(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, int a8)
{
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  int v25;
  uint64_t v26;
  size_t v28;
  uint64_t v29;
  pthread_mutex_t *v30;
  int v31;
  uint64_t v32;
  pthread_mutex_t *v33;
  int v34;
  size_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  char *v39;
  char *v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const void *v45;
  int v46;
  size_t v47;
  void *__p[2];
  unint64_t v49;
  char __s[1024];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v15 = atomic_load((unsigned __int8 *)(a1 + 248));
  if ((v15 & 1) != 0)
  {
    v22 = *(_QWORD *)(a1 + 184);
    if (v22)
    {
      v23 = *(float *)(a1 + 176);
      v24 = v23 / (float)v22;
      if (v24 <= 0.00021424 || (v25 = (int)(float)((float)(log10f(v24 * 9.3132e-10) * -10.0) + 0.5), v25 == 127))
      {
        if (v23 == 0.0)
          LOBYTE(v25) = 127;
        else
          LOBYTE(v25) = 126;
      }
      *(_DWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      if (*(_BYTE *)(a1 + 208))
        goto LABEL_16;
    }
    else
    {
      LOBYTE(v25) = 127;
      *(_DWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      if (*(_BYTE *)(a1 + 208))
LABEL_16:
        *(_BYTE *)(a1 + 208) = 0;
    }
    v16 = v25;
    v17 = 256;
    v18 = *(_QWORD *)(a1 + 272);
    if (v18)
      goto LABEL_3;
LABEL_18:
    if (a6)
      v26 = (uint64_t)a5;
    else
      v26 = 0;
  }
  v16 = 0;
  v17 = 0;
  v18 = *(_QWORD *)(a1 + 272);
  if (!v18)
    goto LABEL_18;
LABEL_3:
  HIBYTE(v49) = 5;
  if (__p <= (void **)"audio" && (char *)__p + 5 > "audio")
    goto LABEL_43;
  LODWORD(__p[0]) = *(_DWORD *)"audio";
  WORD2(__p[0]) = cricket::kMediaTypeAudio[4];
  strcpy(__s, "audio/");
  v20 = (_QWORD *)(a1 + 376);
  if (*(char *)(a1 + 399) < 0)
  {
    v21 = *(_QWORD *)(a1 + 384);
    if ((v21 & 0x8000000000000000) != 0)
      goto LABEL_43;
    v20 = (_QWORD *)*v20;
    if (v21)
    {
      if (!v20)
        goto LABEL_43;
    }
  }
  else
  {
    v21 = *(unsigned __int8 *)(a1 + 399);
  }
  v45 = a5;
  v46 = a2;
  v47 = a6;
  if (v21 >= 0x3F9)
    v28 = 1017;
  else
    v28 = v21;
  memcpy(&__s[6], v20, v28);
  __s[v28 + 6] = 0;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24);
  v30 = (pthread_mutex_t *)(v29 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v29 + 1072));
  v31 = *(_DWORD *)(v29 + 1192);
  pthread_mutex_unlock(v30);
  v32 = *(_QWORD *)(a1 + 128);
  v33 = (pthread_mutex_t *)(v32 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(v32 + 128));
  v34 = *(_DWORD *)(v32 + 44);
  pthread_mutex_unlock(v33);
  v35 = strlen(__s);
  if (v35 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v36 = (char *)v35;
  v37 = a3;
  v38 = a7;
  if (v35 > 0x16)
  {
    v42 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v42 = v35 | 7;
    v43 = v42 + 1;
    v39 = (char *)operator new(v42 + 1);
    __p[1] = v36;
    v49 = v43 | 0x8000000000000000;
    __p[0] = v39;
    v40 = &v36[(_QWORD)v39];
    v41 = &v36[(_QWORD)v39] > __s;
    if (v39 > __s)
      goto LABEL_36;
  }
  else
  {
    HIBYTE(v49) = v35;
    v39 = (char *)__p;
    v40 = (char *)__p + (_QWORD)v36;
    v41 = (char *)__p + (unint64_t)v36 > __s;
    if (__p > (void **)__s)
      goto LABEL_36;
  }
  if (v41)
LABEL_43:
    __break(1u);
LABEL_36:
  v44 = v31 + a4;
  if (v36)
    memcpy(v39, __s, (size_t)v36);
  *v40 = 0;
  webrtc::ChannelSendFrameTransformerDelegate::Transform(v18, v46, v37, v44, v45, v47, v38, v34, (uint64_t)__p, v17 | v16);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  return 0;
}

void `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelSend::~ChannelSend(uint64_t a1)
{
}

{
  JUMPOUT(0x20BD0ADECLL);
}

{
}

{
  JUMPOUT(0x20BD0ADECLL);
}

{
}

{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelSend::SendData(uint64_t a1, int a2, int a3, int a4, const void *a5, uint64_t a6, uint64_t a7, int a8)
{
}

uint64_t webrtc::AudioPacketizationCallback::SendData()
{
  return 0xFFFFFFFFLL;
}

uint64_t `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelSend::RtcpPacketTypesCounterUpdated(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  int v6;

  if (*(_DWORD *)(result + 96) == a2)
  {
    v4 = result;
    v5 = (pthread_mutex_t *)(result + 264);
    pthread_mutex_lock((pthread_mutex_t *)(result + 264));
    v6 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)(v4 + 328) = *(_OWORD *)a3;
    *(_DWORD *)(v4 + 344) = v6;
    return pthread_mutex_unlock(v5);
  }
  return result;
}

uint64_t `non-virtual thunk to'webrtc::voe::`anonymous namespace'::ChannelSend::OnReportBlockDataUpdated(uint64_t a1, uint64_t a2, double a3)
{
  float v3;
  float *v5;
  float v6;

  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  v3 = (double)*(unint64_t *)&a3 * 0.00390625;
  v6 = v3;
  v5 = &v6;
  return (*(uint64_t (**)(uint64_t, float **, uint64_t (*)(float **, uint64_t)))(*(_QWORD *)(a1 - 24)
}

void webrtc::voe::`anonymous namespace'::RtpPacketSenderProxy::~RtpPacketSenderProxy(webrtc::voe::_anonymous_namespace_::RtpPacketSenderProxy *this)
{
  *(_QWORD *)this = &off_24C0B1188;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C0B1188;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::voe::`anonymous namespace'::RtpPacketSenderProxy::EnqueuePackets(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  void *__p[2];
  uint64_t v23;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)__p = *(_OWORD *)a2;
  v23 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 16))(v5, __p);
  v6 = __p[0];
  if (__p[0])
  {
    v7 = __p[1];
    v8 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        v10 = (_QWORD *)*--v7;
        v9 = v10;
        *v7 = 0;
        if (v10)
        {
          v11 = (unsigned int *)v9[22];
          if (v11)
          {
            v12 = v11 + 2;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
          }
          v15 = v9[11];
          if (v15)
          {
            v16 = (unsigned int *)(v15 + 24);
            do
            {
              v17 = __ldaxr(v16);
              v18 = v17 - 1;
            }
            while (__stlxr(v18, v16));
            if (!v18)
            {
              v19 = *(_QWORD *)(v15 + 16);
              *(_QWORD *)(v15 + 16) = 0;
              if (v19)
                MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
              MEMORY[0x20BD0ADEC](v15, 0x1010C40EE34DA14);
            }
          }
          v20 = (void *)v9[7];
          if (v20)
          {
            v9[8] = v20;
            operator delete(v20);
          }
          MEMORY[0x20BD0ADEC](v9, 0x1020C4000E59722);
        }
      }
      while (v7 != v6);
      v8 = __p[0];
    }
    __p[1] = v6;
    operator delete(v8);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::voe::`anonymous namespace'::RtpPacketSenderProxy::RemovePacketsForSsrc(webrtc::voe::_anonymous_namespace_::RtpPacketSenderProxy *this, uint64_t a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 9) + 24))(*((_QWORD *)this + 9), a2);
  return pthread_mutex_unlock(v4);
}

void std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,int ()(webrtc::AudioFrameType,unsigned char,unsigned int,rtc::ArrayView<unsigned char const,-4711l>,long long,rtc::ArrayView<unsigned int const,-4711l>,std::optional<unsigned char>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,int ()(webrtc::AudioFrameType,unsigned char,unsigned int,rtc::ArrayView<unsigned char const,-4711l>,long long,rtc::ArrayView<unsigned int const,-4711l>,std::optional<unsigned char>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B11B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,int ()(webrtc::AudioFrameType,unsigned char,unsigned int,rtc::ArrayView<unsigned char const,-4711l>,long long,rtc::ArrayView<unsigned int const,-4711l>,std::optional<unsigned char>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B11B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0,std::allocator<webrtc::voe::`anonymous namespace'::ChannelSend::InitFrameTransformerDelegate(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>,int ()(webrtc::AudioFrameType,unsigned char,unsigned int,rtc::ArrayView<unsigned char const,-4711l>,long long,rtc::ArrayView<unsigned int const,-4711l>,std::optional<unsigned char>)>::operator()(uint64_t a1, int *a2, unsigned __int8 *a3, int *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned __int16 *a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  pthread_mutex_t *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  int v24;

  v8 = *(_QWORD *)(a1 + 8);
  v23 = *a3;
  v24 = *a2;
  v9 = *a4;
  v11 = *a5;
  v10 = a5[1];
  v12 = *a6;
  v13 = *a7;
  v14 = a7[1];
  v15 = *a8;
  v16 = *(_QWORD *)(*(_QWORD *)(v8 + 128) + 24);
  v17 = (pthread_mutex_t *)(v16 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v16 + 1072));
  v18 = *(_DWORD *)(v16 + 1192);
  pthread_mutex_unlock(v17);
  if (v10)
    v20 = v11;
  else
    v20 = 0;
  if (v14)
    v21 = v13;
  else
    v21 = 0;
}

uint64_t webrtc::voe::`anonymous namespace'::ChannelSend::SendRtpAudio(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  uint64_t v18;
  size_t v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  pthread_mutex_t *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  pthread_mutex_t *v30;
  uint64_t v31;
  unsigned __int8 v32;
  int v33;
  int v35;
  uint64_t v36;
  _QWORD v37[3];
  int v38;
  int v39;
  uint64_t v40;
  char v41;
  int v42;
  char v43;
  uint64_t v44;
  uint64_t v45;

  v12 = a6;
  if (!a6)
  {
LABEL_7:
    v20 = 0;
    goto LABEL_15;
  }
  v18 = *(_QWORD *)(a1 + 256);
  if (!v18)
  {
    if (*(_BYTE *)(a1 + 268))
      return 0xFFFFFFFFLL;
    goto LABEL_7;
  }
  v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v18 + 40))(v18, 0, a6);
  v36 = a7;
  v35 = a2;
  if (v19)
    v20 = (const void *)operator new[]();
  else
    v20 = 0;
  v37[0] = 0;
  v22 = *(_QWORD *)(a1 + 256);
  v23 = *(_QWORD *)(a1 + 128);
  v24 = (pthread_mutex_t *)(v23 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(v23 + 128));
  v25 = *(unsigned int *)(v23 + 44);
  pthread_mutex_unlock(v24);
  if ((*(unsigned int (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, 0, v25, 0, 0, a5, v12))
  {
LABEL_29:
    v21 = 0xFFFFFFFFLL;
    if (!v20)
      return v21;
LABEL_30:
    MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
    return v21;
  }
  v12 = v37[0];
  a2 = v35;
  if (v19 >= v37[0])
  {
    v27 = v20;
  }
  else
  {
    v26 = (void *)operator new[]();
    v27 = v26;
    if (v20)
    {
      memcpy(v26, v20, v19);
      MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
    }
  }
  a5 = 0;
  v20 = v27;
  a7 = v36;
LABEL_15:
  if (!webrtc::ModuleRtpRtcpImpl2::OnSendingRtpFrame(*(pthread_mutex_t **)(a1 + 128), a4, -1, a3, 0))
    goto LABEL_29;
  LODWORD(v37[0]) = a2;
  if (v12)
    v28 = a5;
  else
    v28 = 0;
  v37[1] = v28;
  v37[2] = v12;
  v38 = a3;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 24);
  v30 = (pthread_mutex_t *)(v29 + 1072);
  pthread_mutex_lock((pthread_mutex_t *)(v29 + 1072));
  LODWORD(v29) = *(_DWORD *)(v29 + 1192);
  pthread_mutex_unlock(v30);
  v39 = v29 + a4;
  LOBYTE(v40) = 0;
  v41 = 0;
  LOBYTE(v42) = 0;
  v43 = 0;
  if (a10)
    v31 = a9;
  else
    v31 = 0;
  v44 = v31;
  v45 = a10;
  if (a7 >= 1)
  {
    v41 = 1;
    v40 = 1000 * a7;
  }
  v32 = atomic_load((unsigned __int8 *)(a1 + 248));
  if ((v32 & 1) != 0 && (a11 & 0xFF00) != 0)
  {
    v43 = 1;
    v42 = a11;
  }
  webrtc::RTPSenderAudio::SendAudio(*(_QWORD **)(a1 + 136), (int *)v37);
  v21 = (v33 - 1);
  if (v20)
    goto LABEL_30;
  return v21;
}

uint64_t rtc::RefCountedObject<webrtc::ChannelSendFrameTransformerDelegate>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 124);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::ChannelSendFrameTransformerDelegate>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 31;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::ChannelSendFrameTransformerDelegate>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24C0B1248;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == (_QWORD *)(a1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 72);
    goto LABEL_7;
  }
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::ChannelSendFrameTransformerDelegate>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_24C0B1248;
  v2 = *(_QWORD *)(a1 + 104);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD **)(a1 + 96);
  if (v3 == (_QWORD *)(a1 + 72))
  {
    v4 = 4;
    v3 = (_QWORD *)(a1 + 72);
  }
  else
  {
    if (!v3)
    {
LABEL_8:
      pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_8;
}

BOOL rtc::RefCountedObject<webrtc::ChannelSendFrameTransformerDelegate>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 124));
  return v1 == 1;
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::voe::`anonymous namespace'::ChannelSend::OnReceivedRtt(long long)::$_0>(unsigned int *a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 184))(a2, *a1);
}

uint64_t rtc::FunctionView<void ()(std::unique_ptr<webrtc::AudioEncoder> *)>::CallVoidPtr<webrtc::AudioCodingModule::SetEncoder(std::unique_ptr<webrtc::AudioEncoder>)::{lambda(std::unique_ptr<webrtc::AudioEncoder> *)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = **a1;
  **a1 = 0;
  result = *a2;
  *a2 = v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t rtc::FunctionView<void ()(std::unique_ptr<webrtc::AudioEncoder> *)>::CallVoidPtr<webrtc::voe::`anonymous namespace'::ChannelSend::CallEncoder(rtc::FunctionView<void ()(webrtc::AudioEncoder*)>)::$_0>(uint64_t result, _QWORD *a2)
{
  if (*a2)
    return (*(uint64_t (**)(_QWORD))(result + 8))(*(_QWORD *)result);
  return result;
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::voe::`anonymous namespace'::ChannelSend::OnBitrateAllocation(webrtc::BitrateAllocationUpdate)::$_0>(__int128 **a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];

  v2 = **a1;
  v3 = (*a1)[2];
  v5[1] = (*a1)[1];
  v5[2] = v3;
  v5[0] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a2 + 176))(a2, v5);
}

_QWORD *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::voe::`anonymous namespace'::ChannelSend::ProcessAndEncodeAudio(std::unique_ptr<webrtc::AudioFrame>)::$_0 &&>(_QWORD *result)
{
  uint64_t v1;
  unsigned __int8 v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int16x4_t v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  float v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  int16x8_t *v34;
  unint64_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  __int16 *v44;
  int v45;
  float v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  float v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v1 = *result;
  v2 = atomic_load((unsigned __int8 *)(*result + 249));
  if ((v2 & 1) != 0)
  {
    v3 = result;
    if (v4)
    {
      v5 = *(_QWORD *)(result[1] + 56);
      if (v5)
      {
        if (rtc::g_clock)
        {
          v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
        }
        else
        {
          if (!dword_253EA791C)
            mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
          v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
             / dword_253EA791C;
        }
        v8 = v6 / 1000000 - v5;
      }
      else
      {
        LODWORD(v8) = -1;
      }
      webrtc::metrics::HistogramAdd(v4, v8);
    }
    else
    {
      {
      }
      __clrex();
    }
LABEL_15:
    pthread_mutex_lock((pthread_mutex_t *)(v1 + 48));
    v9 = *(unsigned __int8 *)(v1 + 216);
    pthread_mutex_unlock((pthread_mutex_t *)(v1 + 48));
    if (*(unsigned __int8 *)(v1 + 217) | v9)
    {
      v15 = v3[1];
      v16 = (_BYTE *)(v15 + 15432);
      if (v9 && *(_BYTE *)(v1 + 217))
      {
        *v16 = 1;
      }
      else if (!*v16)
      {
        v26 = *(_QWORD *)(v15 + 24);
        if (v26 > 0x7F)
        {
          v27 = 0.0078125;
          v28 = 128;
        }
        else if (v26)
        {
          v27 = 1.0 / (float)v26;
          v28 = *(_QWORD *)(v15 + 24);
        }
        else
        {
          v28 = 0;
          v27 = 0.0078125;
        }
        v46 = 0.0;
        v47 = v26 - v28;
        v14.i32[0] = 1.0;
        if (v9)
          v27 = -v27;
        else
          v47 = 0;
        if (v9)
          v48 = *(_QWORD *)(v15 + 24);
        else
          v48 = v28;
        if (v9)
          v46 = 1.0;
        v49 = *(_QWORD *)(v15 + 40);
        if (v49)
        {
          v50 = v49 * v47;
          v51 = v49 * v48;
          if (v50 < v49 * v48)
          {
            v52 = 0;
            v53 = v15 + 72;
            do
            {
              v54 = v50;
              v55 = v46;
              do
              {
                v55 = v27 + v55;
                v14.i16[0] = *(_WORD *)(v53 + 2 * v54);
                v14 = (int16x4_t)vmovl_s16(v14).u64[0];
                *(float *)v14.i32 = v55 * (float)v14.i32[0];
                *(_WORD *)(v53 + 2 * v54) = (int)*(float *)v14.i32;
                v54 += v49;
              }
              while (v54 < v51);
              ++v52;
              v53 += 2;
            }
            while (v52 != v49);
          }
        }
      }
    }
    v17 = atomic_load((unsigned __int8 *)(v1 + 248));
    if ((v17 & 1) == 0)
      goto LABEL_50;
    v18 = v3[1];
    v19 = *(_QWORD *)(v18 + 24);
    v20 = *(_QWORD *)(v18 + 40);
    v21 = v20 * v19;
    if ((unint64_t)(v20 * v19) >= 0x3C01)
    {
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/channel_send.cc", 797, "length <= AudioFrame::kMaxDataSizeBytes", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v10, v11, v12, v13, v20 * v19);
    }
    else
    {
      if (v9 && *(_BYTE *)(v1 + 217))
      {
        if (*(_BYTE *)(v1 + 208) && *(_QWORD *)(v1 + 200) == v21)
        {
          v22 = *(_QWORD *)(v1 + 184);
        }
        else
        {
          v22 = 0;
          *(_DWORD *)(v1 + 176) = 0;
          *(_DWORD *)(v1 + 192) = 0;
          *(_QWORD *)(v1 + 200) = v21;
          *(_BYTE *)(v1 + 208) = 1;
        }
        *(_QWORD *)(v1 + 184) = v22 + v21;
        goto LABEL_50;
      }
      if (!*(_BYTE *)(v18 + 15432))
      {
        v25 = v18 + 72;
        if (!v21)
        {
LABEL_50:
          *(_BYTE *)(v1 + 217) = v9;
          return (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 144) + 32))(*(_QWORD *)(v1 + 144), v3[1]);
        }
LABEL_35:
        if (*(_BYTE *)(v1 + 208) && *(_QWORD *)(v1 + 200) == v21)
        {
          v29 = (v20 * v19 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v29 < 0xF)
          {
LABEL_38:
            v30 = 0.0;
            v31 = (__int16 *)v25;
LABEL_45:
            v44 = (__int16 *)(v25 + 2 * v21);
            do
            {
              v45 = *v31++;
              v30 = v30 + (float)(v45 * v45);
            }
            while (v31 != v44);
LABEL_47:
            *(float *)(v1 + 176) = v30 + *(float *)(v1 + 176);
            *(_QWORD *)(v1 + 184) += v21;
            if (*(float *)(v1 + 192) >= v30)
              v30 = *(float *)(v1 + 192);
            *(float *)(v1 + 192) = v30;
            goto LABEL_50;
          }
        }
        else
        {
          *(_DWORD *)(v1 + 176) = 0;
          *(_QWORD *)(v1 + 184) = 0;
          *(_DWORD *)(v1 + 192) = 0;
          *(_QWORD *)(v1 + 200) = v21;
          *(_BYTE *)(v1 + 208) = 1;
          v29 = (v20 * v19 - 1) & 0x7FFFFFFFFFFFFFFFLL;
          if (v29 < 0xF)
            goto LABEL_38;
        }
        v32 = v29 + 1;
        v33 = (v29 + 1) & 0xFFFFFFFFFFFFFFF0;
        v31 = (__int16 *)(v25 + 2 * v33);
        v34 = (int16x8_t *)(v25 + 16);
        v30 = 0.0;
        v35 = v33;
        do
        {
          v36 = v34[-1];
          v37 = *v34;
          v38 = vmull_s16(*(int16x4_t *)v36.i8, *(int16x4_t *)v36.i8);
          v39 = vmull_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v37.i8);
          v40 = vcvtq_f32_s32(vmull_high_s16(v36, v36));
          v41 = vcvtq_f32_s32(v38);
          v42 = vcvtq_f32_s32(vmull_high_s16(v37, v37));
          v43 = vcvtq_f32_s32(v39);
          v30 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v30 + v41.f32[0]) + v41.f32[1]) + v41.f32[2]) + v41.f32[3]) + v40.f32[0])
                                                                                              + v40.f32[1])
                                                                                      + v40.f32[2])
                                                                              + v40.f32[3])
                                                                      + v43.f32[0])
                                                              + v43.f32[1])
                                                      + v43.f32[2])
                                              + v43.f32[3])
                                      + v42.f32[0])
                              + v42.f32[1])
                      + v42.f32[2])
              + v42.f32[3];
          v34 += 2;
          v35 -= 16;
        }
        while (v35);
        if (v32 == v33)
          goto LABEL_47;
        goto LABEL_45;
      }
      v24 = &qword_254572000;
      if ((v23 & 1) != 0)
      {
LABEL_29:
        v25 = v24[163];
        if (!v21)
          goto LABEL_50;
        goto LABEL_35;
      }
    }
    v59 = v20;
    v60 = v19;
    v24 = &qword_254572000;
    v20 = v59;
    v19 = v60;
    if (v56)
    {
      v58 = v21;
      v57 = (void *)operator new[]();
      bzero(v57, 0x3C00uLL);
      webrtc::AudioFrame::zeroed_data(void)::null_data = (uint64_t)v57;
      v21 = v58;
      v20 = v59;
      v19 = v60;
      v25 = webrtc::AudioFrame::zeroed_data(void)::null_data;
      if (!v58)
        goto LABEL_50;
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::voe::`anonymous namespace'::ChannelSend::ProcessAndEncodeAudio(std::unique_ptr<webrtc::AudioFrame>)::$_0>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  if ((result & 1) == 0)
  {
    *a3 = *a2;
    v3 = a2[1];
    a2[1] = 0;
    a3[1] = v3;
  }
  v4 = a2[1];
  a2[1] = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 64);
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        v8 = *(_QWORD *)(v5 + 8);
        if (v8)
        {
          v9 = *(_QWORD *)(v5 + 16);
          v10 = *(void **)(v5 + 8);
          if (v9 != v8)
          {
            do
            {
              v11 = *(void **)(v9 - 96);
              if (v11)
              {
                *(_QWORD *)(v9 - 88) = v11;
                operator delete(v11);
              }
              v9 -= 104;
            }
            while (v9 != v8);
            v10 = *(void **)(v5 + 8);
          }
          *(_QWORD *)(v5 + 16) = v8;
          operator delete(v10);
        }
        MEMORY[0x20BD0ADEC](v5, 0x1020C40E72D6CFBLL);
      }
    }
    JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::voe::`anonymous namespace'::ChannelSend::StopSend(void)::$_0 &&>(_QWORD *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[1];
  pthread_mutex_lock((pthread_mutex_t *)v2);
  *(_BYTE *)(v2 + 113) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v2 + 64));
  return pthread_mutex_unlock((pthread_mutex_t *)v2);
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::voe::`anonymous namespace'::ChannelSend::StopSend(void)::$_0::operator() const(void)::{lambda(webrtc::AudioEncoder *)#1}>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::voe::`anonymous namespace'::ChannelSend::SetFrameEncryptor(webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = 0;
  result = *(_QWORD *)(v1 + 256);
  *(_QWORD *)(v1 + 256) = v2;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::voe::`anonymous namespace'::ChannelSend::SetFrameEncryptor(webrtc::scoped_refptr<webrtc::FrameEncryptorInterface>)::$_0>(char a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *a3 = v3;
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::voe::`anonymous namespace'::ChannelSend::SetEncoderToPacketizerFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *a1;
  v2 = a1[1];
  a1[1] = 0;
  v4 = v2;
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::voe::`anonymous namespace'::ChannelSend::SetEncoderToPacketizerFrameTransformer(webrtc::scoped_refptr<webrtc::FrameTransformerInterface>)::$_0>(char a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *a3 = v3;
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t rtc::FunctionView<void ()(webrtc::AudioEncoder *)>::CallVoidPtr<webrtc::voe::`anonymous namespace'::ChannelSend::OnReportBlockDataUpdated(webrtc::ReportBlockData)::$_0>(float **a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 144))(a2, **a1);
}

uint64_t webrtc::ChannelSendFrameTransformerDelegate::Transform(uint64_t a1, int a2, char a3, int a4, const void *a5, size_t a6, uint64_t a7, int a8, uint64_t a9, __int16 a10)
{
  pthread_mutex_t *v18;
  const void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  int v31;
  __int16 v32;
  _QWORD v33[2];
  _QWORD v34[2];

  v18 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  if (*(_BYTE *)(a1 + 120))
  {
    if (a6)
      v19 = a5;
    else
      v19 = 0;
    v34[0] = v19;
    v34[1] = a6;
    v33[0] = 0;
    v33[1] = 0;
    v32 = a10;
    v31 = a2;
    v30 = a3;
    v29 = a4;
    v28 = a7;
    v20 = *(_QWORD *)(a1 + 96);
    if (v20)
    {
      (*(void (**)(uint64_t, int *, char *, int *, _QWORD *, uint64_t *, _QWORD *, __int16 *))(*(_QWORD *)v20 + 48))(v20, &v31, &v30, &v29, v34, &v28, v33, &v32);
      return pthread_mutex_unlock(v18);
    }
    else
    {
      v26 = std::__throw_bad_function_call[abi:sn180100]();
      return webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(v26);
    }
  }
  else
  {
    pthread_mutex_unlock(v18);
    v22 = *(_QWORD *)(a1 + 104);
    v23 = operator new();
    *(_QWORD *)v23 = off_24C0B1288;
    *(_DWORD *)(v23 + 8) = a2;
    *(_BYTE *)(v23 + 12) = a3;
    *(_DWORD *)(v23 + 16) = a4;
    *(_QWORD *)(v23 + 24) = a6;
    *(_QWORD *)(v23 + 32) = a6;
    if (a6)
    {
      v24 = (void *)operator new[]();
      memcpy(v24, a5, a6);
    }
    else
    {
      v24 = 0;
    }
    *(_QWORD *)(v23 + 40) = v24;
    *(_QWORD *)(v23 + 48) = a7;
    *(_QWORD *)(v23 + 56) = 1;
    *(_DWORD *)(v23 + 64) = a8;
    v25 = (std::string *)(v23 + 96);
    *(_QWORD *)(v23 + 80) = 0;
    *(_QWORD *)(v23 + 88) = 0;
    *(_QWORD *)(v23 + 72) = 0;
    if (*(char *)(a9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v25, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
    }
    else
    {
      *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)a9;
      *(_QWORD *)(v23 + 112) = *(_QWORD *)(a9 + 16);
    }
    *(_DWORD *)(v23 + 120) = 0;
    *(_WORD *)(v23 + 124) = a10;
    v27 = v23;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 32))(v22, &v27);
    result = v27;
    v27 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(uint64_t a1, uint64_t *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  _QWORD v10[2];
  uint64_t (*v11)(char, uint64_t *, uint64_t *);
  uint64_t (*v12)(uint64_t *);

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  if (*(_QWORD *)(a1 + 96))
  {
    (**(void (***)(uint64_t))a1)(a1);
    v5 = *(_QWORD *)(a1 + 112);
    v6 = *a2;
    *a2 = 0;
    v10[0] = a1;
    v10[1] = v6;
    v11 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>;
    v12 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v10, &v9, &v8);
    v11(1, v10, v10);
  }
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::ChannelSendFrameTransformerDelegate::StartShortCircuiting(webrtc::ChannelSendFrameTransformerDelegate *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 120) = 1;
  return pthread_mutex_unlock(v2);
}

void webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::~TransformableOutgoingAudioFrame(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = off_24C0B1288;
  if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 9);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 12));
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
}

void webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::~TransformableOutgoingAudioFrame(void **this)
{
  void *v2;
  void *v3;

  *this = off_24C0B1288;
  if (*((char *)this + 119) < 0)
  {
    operator delete(this[12]);
    v2 = this[9];
    if (!v2)
    {
LABEL_4:
      v3 = this[5];
      this[5] = 0;
      if (v3)
        MEMORY[0x20BD0ADD4](v3, 0x1000C8077774924);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    v2 = this[9];
    if (!v2)
      goto LABEL_4;
  }
  this[10] = v2;
  operator delete(v2);
  goto LABEL_4;
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetData(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  if (*((_QWORD *)this + 3))
    return *((_QWORD *)this + 5);
  else
    return 0;
}

_QWORD *webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::SetData(_QWORD *result, void *__src, size_t __n)
{
  uint64_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  result[3] = 0;
  if (__n)
  {
    v5 = (uint64_t)result;
    v6 = result[4];
    if (v6 >= __n)
    {
      v12 = 0;
    }
    else
    {
      v7 = v6 + (v6 >> 1);
      if (v7 <= __n)
        v8 = __n;
      else
        v8 = v7;
      v9 = (void *)operator new[]();
      v10 = v9;
      v11 = *(_QWORD *)(v5 + 40);
      if (v11)
      {
        memcpy(v9, *(const void **)(v5 + 40), *(_QWORD *)(v5 + 24));
        *(_QWORD *)(v5 + 40) = v10;
        MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(v5 + 40) = v9;
      }
      *(_QWORD *)(v5 + 32) = v8;
      v12 = *(_QWORD *)(v5 + 24);
    }
    result = memcpy((void *)(*(_QWORD *)(v5 + 40) + v12), __src, __n);
    *(_QWORD *)(v5 + 24) = __n;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetPayloadType(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((unsigned __int8 *)this + 12);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetSsrc(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetTimestamp(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::SetRTPTimestamp(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetDirection(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return 2;
}

void webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetMimeType(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::GetContributingSources(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  if (*((_QWORD *)this + 10) == *((_QWORD *)this + 9))
    return 0;
  else
    return *((_QWORD *)this + 9);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::SequenceNumber(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::AbsoluteCaptureTimestamp(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::Type(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t webrtc::`anonymous namespace'::TransformableOutgoingAudioFrame::AudioLevel(webrtc::_anonymous_namespace_::TransformableOutgoingAudioFrame *this)
{
  return *((unsigned __int16 *)this + 62);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  char v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  char v28;
  int v29;
  __int16 v30;
  _QWORD v31[2];
  _QWORD v32[2];

  v2 = *a1;
  v1 = a1[1];
  a1[1] = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v2 + 8));
  if (*(_QWORD *)(v2 + 96))
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
    if (v3 == 2)
      v4 = 2;
    else
      v4 = v3 == 1;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
    v9 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
      if (!v12)
      {
        __break(1u);
LABEL_15:
        v23 = std::__throw_bad_function_call[abi:sn180100]();
        return absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(v23, v24, v25);
      }
      v13 = v11;
      v14 = v6;
      v15 = v5;
      v16 = v4;
    }
    else
    {
      v14 = v6;
      v15 = v5;
      v16 = v4;
      v13 = 0;
    }
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 88))(v1);
    v20 = v19;
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v1);
    v32[0] = v7;
    v32[1] = v9;
    v31[0] = v18;
    v31[1] = v20;
    v30 = v21;
    v29 = v16;
    v28 = v15;
    v27 = v14;
    v26 = v13;
    v22 = *(_QWORD *)(v2 + 96);
    if (v22)
    {
      (*(void (**)(uint64_t, int *, char *, int *, _QWORD *, uint64_t *, _QWORD *, __int16 *))(*(_QWORD *)v22 + 48))(v22, &v29, &v28, &v27, v32, &v26, v31, &v30);
      pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    }
    goto LABEL_15;
  }
  result = pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ChannelSendFrameTransformerDelegate::OnTransformedFrame(std::unique_ptr<webrtc::TransformableFrameInterface>)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v4 = *a2;
    *a2 = 0;
    *a3 = v4;
    v5 = a2[1];
    a2[1] = 0;
    a3[1] = v5;
  }
  v6 = a2[1];
  a2[1] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void rtc::webrtc_checks_impl::WriteFatalLog(const void *a1, size_t a2)
{
  FILE **v4;

  fflush((FILE *)*MEMORY[0x24BDAC8E8]);
  v4 = (FILE **)MEMORY[0x24BDAC8D8];
  fwrite(a1, a2, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  fflush(*v4);
  abort();
}

uint64_t rtc::webrtc_checks_impl::ParseArg(uint64_t result, _QWORD *a2, std::string *a3)
{
  uint64_t v5;
  std::string::size_type v6;
  std::string::size_type v7;
  const char **v8;
  const char *v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string::size_type v19;
  const char *v20;
  const char **v21;
  int v22;
  size_t v23;
  BOOL v24;
  std::string::size_type v25;
  std::string::size_type v26;
  const char **v27;
  const char *v28;
  BOOL v29;
  uint64_t v30;
  std::string *v31;
  uint64_t v33;
  BOOL v34;
  std::string *v35;
  uint64_t v37;
  std::string *v39;
  std::string::size_type v41;

  v5 = 0;
  switch(*(_BYTE *)*a2)
  {
    case 0:
      return v5;
    case 1:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 2:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 3:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 4:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 5:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 6:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 7:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 8:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    case 9:
      v8 = *(const char ***)result;
      *(_QWORD *)result += 8;
      v9 = *v8;
      if (!*v8)
        goto LABEL_84;
      v10 = strlen(*v8);
      v11 = v10;
      v12 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        size = a3->__r_.__value_.__l.__size_;
        v13 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v13 - size < v10)
          goto LABEL_16;
      }
      else
      {
        v13 = 22;
        size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (22 - v12 < v10)
        {
LABEL_16:
          v15 = v10 - v13 + size;
          v16 = a3;
          v17 = size;
          v18 = size;
          v19 = v11;
          v20 = v9;
          goto LABEL_63;
        }
      }
      if (!v10)
        goto LABEL_30;
      v31 = a3;
      if ((v12 & 0x80) != 0)
        v31 = (std::string *)a3->__r_.__value_.__r.__words[0];
      result = (uint64_t)v31 + size;
      if ((char *)v31 + size <= v9 && (char *)v31 + size + v11 > v9)
        goto LABEL_84;
      memmove((void *)result, v9, v11);
      v33 = size + v11;
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
        a3->__r_.__value_.__l.__size_ = v33;
      else
        *((_BYTE *)&a3->__r_.__value_.__s + 23) = v33 & 0x7F;
      v31->__r_.__value_.__s.__data_[v33] = 0;
      goto LABEL_30;
    case 0xA:
      v21 = *(const char ***)result;
      *(_QWORD *)result += 8;
      v20 = *v21;
      v22 = (*v21)[23];
      if (v22 < 0)
      {
        v23 = *((_QWORD *)v20 + 1);
        v24 = v23 == 0;
        if (*(_QWORD *)v20)
          v34 = 1;
        else
          v34 = v23 == 0;
        if (!v34)
          goto LABEL_84;
        v20 = *(const char **)v20;
        v25 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
      }
      else
      {
        v23 = v22;
        v24 = v22 == 0;
        v25 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          v13 = 22;
          v26 = v25;
          if (22 - v25 < v23)
            goto LABEL_62;
          goto LABEL_52;
        }
      }
      v26 = a3->__r_.__value_.__l.__size_;
      v13 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v13 - v26 < v23)
        goto LABEL_62;
LABEL_52:
      if (v24)
        goto LABEL_30;
      v35 = a3;
      if ((v25 & 0x80) != 0)
        v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
      result = (uint64_t)v35 + v26;
      if ((char *)v35 + v26 <= v20 && (char *)v35 + v26 + v23 > v20)
        goto LABEL_84;
      memmove((void *)result, v20, v23);
      v37 = v26 + v23;
      if ((SHIBYTE(a3->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_72;
LABEL_60:
      a3->__r_.__value_.__l.__size_ = v37;
      v35->__r_.__value_.__s.__data_[v37] = 0;
      goto LABEL_30;
    case 0xB:
      v27 = *(const char ***)result;
      *(_QWORD *)result += 8;
      v28 = *v27;
      v20 = *(const char **)v28;
      v23 = *((_QWORD *)v28 + 1);
      if (*(_QWORD *)v28)
        v29 = 1;
      else
        v29 = v23 == 0;
      if (!v29)
        goto LABEL_84;
      v30 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        v26 = a3->__r_.__value_.__l.__size_;
        v13 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v13 - v26 >= v23)
          goto LABEL_64;
      }
      else
      {
        v13 = 22;
        v26 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (22 - v30 >= v23)
        {
LABEL_64:
          if (!v23)
            goto LABEL_30;
          v35 = a3;
          if ((v30 & 0x80) != 0)
            v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
          result = (uint64_t)v35 + v26;
          if ((char *)v35 + v26 > v20 || (char *)v35 + v26 + v23 <= v20)
          {
            memmove((void *)result, v20, v23);
            v37 = v26 + v23;
            if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_60;
LABEL_72:
            *((_BYTE *)&a3->__r_.__value_.__s + 23) = v37 & 0x7F;
            v35->__r_.__value_.__s.__data_[v37] = 0;
LABEL_30:
            ++*a2;
            return 1;
          }
          goto LABEL_84;
        }
      }
LABEL_62:
      v15 = v23 - v13 + v26;
      v16 = a3;
      v17 = v26;
      v18 = v26;
      v19 = v23;
LABEL_63:
      std::string::__grow_by_and_replace(v16, v13, v15, v17, v18, 0, v19, v20);
      goto LABEL_30;
    case 0xC:
      *(_QWORD *)result += 8;
      goto LABEL_30;
    default:
      if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      {
        v6 = a3->__r_.__value_.__l.__size_;
        v7 = (a3->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (v7 - v6 < 0x16)
          goto LABEL_33;
        v39 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      else
      {
        v6 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (v6 - 1 < 0x16)
        {
          v7 = 22;
LABEL_33:
          std::string::__grow_by_and_replace(a3, v7, v6 - v7 + 22, v6, v6, 0, 0x16uLL, "[Invalid CheckArgType]");
          return 0;
        }
        v39 = a3;
      }
      if ((char *)v39 + v6 > "[Invalid CheckArgType]"
        || (char *)&v39->__r_.__value_.__r.__words[2] + v6 + 6 <= "[Invalid CheckArgType]")
      {
        qmemcpy((char *)v39 + v6, "[Invalid CheckArgType]", 22);
        v41 = v6 + 22;
        if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
          a3->__r_.__value_.__l.__size_ = v41;
        else
          *((_BYTE *)&a3->__r_.__value_.__s + 23) = v41 & 0x7F;
        v5 = 0;
        v39->__r_.__value_.__s.__data_[v41] = 0;
        return v5;
      }
LABEL_84:
      __break(1u);
      return result;
  }
}

std::string *`anonymous namespace'::AppendFormat(std::string *a1, char *__format, ...)
{
  std::string *result;
  int v5;
  unint64_t size;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  va_list va;

  va_start(va, __format);
  result = (std::string *)vsnprintf(0, 0, __format, va);
  if ((int)result < 1)
    return result;
  v5 = (int)result;
  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    v7 = size + result;
    goto LABEL_5;
  }
  size = a1->__r_.__value_.__l.__size_;
  v7 = size + result;
  if (size < v7)
  {
LABEL_5:
    result = std::string::append(a1, v7 - size, 0);
    v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    if (a1->__r_.__value_.__l.__size_ >= size)
      goto LABEL_7;
LABEL_13:
    __break(1u);
    return result;
  }
  v9 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  a1->__r_.__value_.__l.__size_ = v7;
  *((_BYTE *)v9 + v7) = 0;
  v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
LABEL_6:
  if (v8 < size)
    goto LABEL_13;
LABEL_7:
  if ((v8 & 0x80) != 0)
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
  return (std::string *)vsnprintf((char *)a1 + size, (v5 + 1), __format, va);
}

std::string *rtc::webrtc_checks_impl::FatalLog(const char *a1, int a2, const char *a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v13;
  std::string *result;
  std::string *v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  char *v20;
  std::string::size_type v22;
  uint64_t **v23;
  size_t v24;
  std::string __p;
  std::string v26;
  std::string v27;
  uint64_t *v28;
  _BYTE *v29;

  v28 = &a9;
  v29 = a4;
  memset(&v27, 0, sizeof(v27));
  v13 = __error();
  if (*a4 == 13)
  {
    v29 = a4 + 1;
    memset(&v26, 0, sizeof(v26));
    memset(&__p, 0, sizeof(__p));
    if (rtc::webrtc_checks_impl::ParseArg((uint64_t)&v28, &v29, &v26)
      && rtc::webrtc_checks_impl::ParseArg((uint64_t)&v28, &v29, &__p))
    {
      v15 = &v26;
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
LABEL_32:
    while ((rtc::webrtc_checks_impl::ParseArg((uint64_t)&v28, &v29, &v27) & 1) != 0)
      ;
    v23 = std::string::operator std::string_view[abi:sn180100]((uint64_t **)&v27);
    rtc::webrtc_checks_impl::WriteFatalLog(v23, v24);
  }
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = 22;
  else
    v17 = (v27.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    size = v27.__r_.__value_.__l.__size_;
  if (v17 - size < 3)
  {
    std::string::__grow_by_and_replace(&v27, v17, size - v17 + 3, size, size, 0, 3uLL, "\n# ");
    goto LABEL_32;
  }
  v19 = &v27;
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v27.__r_.__value_.__r.__words[0];
  v20 = (char *)v19 + size;
  if ((char *)v19 + size > "\n# " || (char *)v19->__r_.__value_.__r.__words + size + 3 <= "\n# ")
  {
    v20[2] = 32;
    *(_WORD *)v20 = 8970;
    v22 = size + 3;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      v27.__r_.__value_.__l.__size_ = size + 3;
    else
      *((_BYTE *)&v27.__r_.__value_.__s + 23) = v22 & 0x7F;
    v19->__r_.__value_.__s.__data_[v22] = 0;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t **std::string::operator std::string_view[abi:sn180100](uint64_t **result)
{
  uint64_t *v1;
  BOOL v2;

  if (*((char *)result + 23) < 0)
  {
    v1 = result[1];
    if (((unint64_t)v1 & 0x8000000000000000) != 0
      || ((result = (uint64_t **)*result, v1) ? (v2 = result == 0) : (v2 = 0), v2))
    {
      __break(1u);
    }
  }
  return result;
}

void rtc::webrtc_checks_impl::UnreachableCodeReached(rtc::webrtc_checks_impl *this)
{
  int *v1;
  uint64_t **v2;
  size_t v3;
  std::string v4;

  memset(&v4, 0, sizeof(v4));
  v1 = __error();
  v2 = std::string::operator std::string_view[abi:sn180100]((uint64_t **)&v4);
  rtc::webrtc_checks_impl::WriteFatalLog(v2, v3);
}

std::string *rtc::StringBuilder::operator<<(std::string *this, const std::string::value_type *__src, size_t __len)
{
  std::string *v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  std::string::size_type v11;

  v5 = this;
  if (!__src && __len)
    goto LABEL_19;
  v6 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v7 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v7 - size < __len)
      goto LABEL_5;
  }
  else
  {
    v7 = 22;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (22 - v6 < __len)
    {
LABEL_5:
      std::string::__grow_by_and_replace(this, v7, __len - v7 + size, size, size, 0, __len, __src);
      return v5;
    }
  }
  if (!__len)
    return v5;
  v9 = this;
  if ((v6 & 0x80) != 0)
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
  this = (std::string *)((char *)v9 + size);
  if ((char *)v9 + size <= __src && (char *)v9 + size + __len > __src)
  {
LABEL_19:
    __break(1u);
  }
  else
  {
    memmove(this, __src, __len);
    v11 = size + __len;
    if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      v5->__r_.__value_.__l.__size_ = v11;
    else
      *((_BYTE *)&v5->__r_.__value_.__s + 23) = v11 & 0x7F;
    v9->__r_.__value_.__s.__data_[v11] = 0;
    return v5;
  }
  return this;
}

void dcsctp::ChunkValidators::Clean(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 *v3;
  _QWORD *v4;
  unsigned __int16 *v5;
  int64_t v6;
  unsigned __int16 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int32x2_t *v23;
  int32x2_t *v24;
  int32x2_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int32x2_t *v30;
  int32x2_t *v31;
  unint64_t v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  int32x2_t *v38;
  uint64_t v39;
  __int128 v40;
  __int32 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int16 *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BYTE *v62;
  _DWORD *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  _OWORD *v70;
  __int128 *v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unsigned int *v79;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;

  v5 = (unsigned __int16 *)a1[2];
  v3 = (unsigned __int16 *)a1[3];
  v4 = a1 + 2;
  v6 = (char *)v3 - (char *)v5;
  if (v3 == v5)
  {
LABEL_8:
    v16 = a1 + 6;
    v17 = a1[6];
    v18 = a1[1];
    *a2 = &off_24C0BEDA0;
    a2[1] = v18;
    a2[2] = v5;
    a2[3] = v3;
    *v4 = 0;
    v4[1] = 0;
    v19 = a1[4];
    v20 = a1[5];
    v4[2] = 0;
    a2[4] = v19;
    a2[5] = v20;
    a2[6] = v17;
    v21 = a2 + 6;
    v22 = a1[7];
    a2[7] = v22;
    if (v22)
    {
      *(_QWORD *)(v17 + 16) = v21;
      a1[5] = v16;
      *v16 = 0;
      a1[7] = 0;
    }
    else
    {
      a2[5] = v21;
    }
    return;
  }
  v7 = 0;
  v8 = v6 >> 2;
  v9 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  v10 = (unsigned __int16 *)((char *)v5 + (v6 & 0xFFFFFFFFFFFFFFFCLL));
  v11 = v5 + 1;
  while (1)
  {
    v12 = *v11;
    v13 = *(v11 - 1);
    v14 = v7 + 1;
    if (v12 < v13 || v14 >= v13)
      break;
    v11 += 2;
    v7 = v12;
    v9 -= 4;
    if (!v9)
      goto LABEL_8;
  }
  v79 = (unsigned int *)a1;
  if (v6 < 0)
    goto LABEL_88;
  v23 = (int32x2_t *)operator new(v6);
  v24 = (int32x2_t *)((char *)v23 + 4 * v8);
  v25 = v23;
  do
  {
    if (v5[1] <= *v5)
      goto LABEL_13;
    if (v25 >= v24)
    {
      v26 = ((char *)v25 - (char *)v23) >> 2;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 62)
        goto LABEL_88;
      if (((char *)v24 - (char *)v23) >> 1 > v27)
        v27 = ((char *)v24 - (char *)v23) >> 1;
      if ((unint64_t)((char *)v24 - (char *)v23) >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v27)
      {
LABEL_87:
        __break(1u);
        goto LABEL_88;
      }
      if (v27 >> 62)
LABEL_89:
        std::__throw_bad_array_new_length[abi:sn180100]();
      v28 = 4 * v27;
      v29 = operator new(4 * v27);
      v30 = (int32x2_t *)&v29[4 * v26];
      v30->i32[0] = *(_DWORD *)v5;
      v31 = (int32x2_t *)((char *)v30 + 4);
      if (v25 == v23)
        goto LABEL_38;
      v32 = (char *)v25 - (char *)v23 - 4;
      if (v32 >= 0xBC)
      {
        v34 = (&v25[-1].u8[4] - (unsigned __int8 *)v23) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v29[(char *)v25 - (char *)v23 - 4 - v34] > &v29[(char *)v25 - (char *)v23 - 4])
        {
          v33 = v25;
        }
        else if (&v25[-1].u8[-v34 + 4] > &v25[-1].u8[4])
        {
          v33 = v25;
        }
        else if ((unint64_t)((char *)v23 - v29) >= 0x20)
        {
          v35 = (v32 >> 2) + 1;
          v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
          v33 = (int32x2_t *)((char *)v25 - v36);
          v30 = (int32x2_t *)((char *)v30 - v36);
          v37 = &v29[4 * v26 - 16];
          v38 = v25 - 2;
          v39 = v35 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v40 = *(_OWORD *)v38->i8;
            *(v37 - 1) = *(_OWORD *)v38[-2].i8;
            *v37 = v40;
            v37 -= 2;
            v38 -= 4;
            v39 -= 8;
          }
          while (v39);
          if (v35 == (v35 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_38;
        }
        else
        {
          v33 = v25;
        }
      }
      else
      {
        v33 = v25;
      }
      do
      {
        v41 = v33[-1].i32[1];
        v33 = (int32x2_t *)((char *)v33 - 4);
        v30[-1].i32[1] = v41;
        v30 = (int32x2_t *)((char *)v30 - 4);
      }
      while (v33 != v23);
LABEL_38:
      v24 = (int32x2_t *)&v29[v28];
      if (v23)
        operator delete(v23);
      v25 = v31;
      v23 = v30;
      goto LABEL_13;
    }
    if (!v25)
      goto LABEL_87;
    v25->i32[0] = *(_DWORD *)v5;
    v25 = (int32x2_t *)((char *)v25 + 4);
LABEL_13:
    v5 += 2;
  }
  while (v5 != v10);
  v42 = (char *)v25 - (char *)v23;
  if ((unint64_t)((char *)v25 - (char *)v23) < 8)
  {
    v85 = 0;
    v86 = 0;
    v84 = &v85;
    v43 = *((_QWORD *)v79 + 1);
    std::set<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::insert[abi:sn180100]<std::__tree_const_iterator<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,std::__tree_node<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,void *> *,long>>((uint64_t *)&v84, *((unsigned int **)v79 + 5), v79 + 12);
    *a2 = &off_24C0BEDA0;
    a2[1] = v43;
    a2[2] = v23;
    a2[3] = v25;
    v45 = (uint64_t)v84;
    v44 = v85;
    a2[4] = v24;
    a2[5] = v45;
    a2[6] = v44;
    v46 = a2 + 6;
    v47 = v86;
    a2[7] = v86;
    if (v47)
    {
      v44[2] = v46;
      v84 = &v85;
      v85 = 0;
      v86 = 0;
      v44 = 0;
    }
    else
    {
      a2[5] = v46;
    }
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v84, v44);
    return;
  }
  v48 = v42 >> 2;
  v49 = 126 - 2 * __clz(v42 >> 2);
  if (v25 == v23)
    v50 = 0;
  else
    v50 = v49;
  std::__introsort<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,false>(v23, v25, v50, 1);
  if (v42 < 0)
LABEL_88:
    abort();
  v51 = (char *)operator new((char *)v25 - (char *)v23);
  v52 = &v51[4 * v48];
  *(_DWORD *)v51 = v23->i32[0];
  v53 = v51 + 4;
  if (v48 <= 2)
    v54 = 2;
  else
    v54 = v42 >> 2;
  v55 = 1;
  while (2)
  {
    if (v51 == v53)
      goto LABEL_87;
    v56 = *((unsigned __int16 *)v53 - 1);
    v57 = (unsigned __int16 *)v23 + 2 * v55;
    if (v56 + 1 >= *v57)
    {
      if (v56 <= v57[1])
        LOWORD(v56) = v57[1];
      *((_WORD *)v53 - 1) = v56;
    }
    else
    {
      if (v53 < v52)
      {
        *(_DWORD *)v53 = *(_DWORD *)v57;
        v53 += 4;
        goto LABEL_55;
      }
      v58 = v53 - v51;
      v59 = (v53 - v51) >> 2;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 62)
        goto LABEL_88;
      if ((v52 - v51) >> 1 > v60)
        v60 = (v52 - v51) >> 1;
      if ((unint64_t)(v52 - v51) >= 0x7FFFFFFFFFFFFFFCLL)
        v61 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      if (!v61)
        goto LABEL_87;
      if (v61 >> 62)
        goto LABEL_89;
      v62 = operator new(4 * v61);
      v63 = &v62[4 * v59];
      *v63 = *(_DWORD *)v57;
      if ((unint64_t)(v58 - 4) < 0xBC
        || (v64 = (v53 - 4 - v51) & 0xFFFFFFFFFFFFFFFCLL, &v62[v58 - 4 - v64] > &v62[v58 - 4])
        || &v53[-v64 - 4] > v53 - 4
        || (unint64_t)(v51 - v62) < 0x20)
      {
        v65 = v53;
        v66 = &v62[4 * v59];
        goto LABEL_73;
      }
      v68 = ((unint64_t)(v58 - 4) >> 2) + 1;
      v69 = 4 * (v68 & 0x7FFFFFFFFFFFFFF8);
      v65 = &v53[-v69];
      v66 = (char *)&v63[v69 / 0xFFFFFFFFFFFFFFFCLL];
      v70 = &v62[4 * v59 - 16];
      v71 = (__int128 *)(v53 - 16);
      v72 = v68 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v73 = *v71;
        *(v70 - 1) = *(v71 - 1);
        *v70 = v73;
        v70 -= 2;
        v71 -= 2;
        v72 -= 8;
      }
      while (v72);
      if (v68 != (v68 & 0x7FFFFFFFFFFFFFF8))
      {
        do
        {
LABEL_73:
          v67 = *((_DWORD *)v65 - 1);
          v65 -= 4;
          *((_DWORD *)v66 - 1) = v67;
          v66 -= 4;
        }
        while (v65 != v51);
      }
      v52 = &v62[4 * v61];
      v53 = (char *)(v63 + 1);
      if (v51)
        operator delete(v51);
      v51 = v66;
    }
LABEL_55:
    if (++v55 != v54)
      continue;
    break;
  }
  v82 = 0;
  v83 = 0;
  v81 = &v82;
  v74 = *((_QWORD *)v79 + 1);
  std::set<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::insert[abi:sn180100]<std::__tree_const_iterator<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,std::__tree_node<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,void *> *,long>>((uint64_t *)&v81, *((unsigned int **)v79 + 5), v79 + 12);
  *a2 = &off_24C0BEDA0;
  a2[1] = v74;
  a2[2] = v51;
  a2[3] = v53;
  v76 = (uint64_t)v81;
  v75 = v82;
  a2[4] = v52;
  a2[5] = v76;
  a2[6] = v75;
  v77 = a2 + 6;
  v78 = v83;
  a2[7] = v83;
  if (v78)
  {
    v75[2] = v77;
    v81 = &v82;
    v82 = 0;
    v83 = 0;
    v75 = 0;
  }
  else
  {
    a2[5] = v77;
  }
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v81, v75);
  operator delete(v23);
}

uint64_t *std::set<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::insert[abi:sn180100]<std::__tree_const_iterator<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,std::__tree_node<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unsigned int *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int *v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;
  unsigned int *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18[9];

  if (a2 != a3)
  {
    v18[7] = v3;
    v18[8] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      result = std::__tree<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::__find_equal<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>(v7, v8, v18, &v17, v6 + 7);
      if (*result)
      {
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x20uLL);
        v11[7] = v6[7];
        v12 = v18[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v12;
        *v10 = (uint64_t)v11;
        v13 = *(_QWORD **)*v7;
        if (v13)
        {
          *v7 = (uint64_t)v13;
          v14 = (uint64_t *)*v10;
        }
        else
        {
          v14 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v14);
        ++v7[2];
        v9 = (unsigned int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v15 = v9;
            v9 = *(unsigned int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v15 = (unsigned int *)*((_QWORD *)v6 + 2);
        v16 = *(_QWORD *)v15 == (_QWORD)v6;
        v6 = v15;
      }
      while (!v16);
LABEL_3:
      v6 = v15;
    }
    while (v15 != a3);
  }
  return result;
}

uint64_t *std::__tree<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>::__find_equal<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v14 = a2;
      do
      {
        v10 = (uint64_t *)v14[2];
        v15 = *v10 == (_QWORD)v14;
        v14 = v10;
      }
      while (v15);
    }
    v16 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v18 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v19 = (uint64_t *)v18;
          v20 = *(_DWORD *)(v18 + 28);
          if (v16 >= v20)
            break;
          v18 = *v19;
          v5 = v19;
          if (!*v19)
            goto LABEL_25;
        }
        if (v20 >= v16)
          break;
        v5 = v19 + 1;
        v18 = v19[1];
      }
      while (v18);
LABEL_25:
      *a3 = v19;
      return v5;
    }
    else
    {
      *a3 = v5;
      return a1 + 1;
    }
  }
  else if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  else
  {
    v11 = a2[1];
    if (v11)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v21 = a2;
      do
      {
        v13 = (uint64_t *)v21[2];
        v15 = *v13 == (_QWORD)v21;
        v21 = v13;
      }
      while (!v15);
    }
    if (v13 == v5 || v6 < *((_DWORD *)v13 + 7))
    {
      if (v11)
      {
        *a3 = v13;
        return v13;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
    }
    else
    {
      v22 = *v5;
      if (*v5)
      {
        do
        {
          while (1)
          {
            v23 = (uint64_t *)v22;
            v24 = *(_DWORD *)(v22 + 28);
            if (v6 >= v24)
              break;
            v22 = *v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_41;
          }
          if (v24 >= v6)
            break;
          v5 = v23 + 1;
          v22 = v23[1];
        }
        while (v22);
LABEL_41:
        *a3 = v23;
        return v5;
      }
      else
      {
        *a3 = v5;
        return a1 + 1;
      }
    }
  }
}

int32x2_t *std::__introsort<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,false>(int32x2_t *result, int32x2_t *a2, uint64_t a3, char a4)
{
  int32x2_t *v7;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned int v13;
  unsigned int v14;
  __int32 v15;
  unsigned int v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  char *v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  __int32 v27;
  __int32 v28;
  __int32 v29;
  int32x2_t *v30;
  char *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int32 v42;
  __int32 v43;
  __int32 v44;
  __int32 v45;
  __int32 v46;
  __int32 v47;
  __int32 v48;
  uint64_t v49;
  int32x2_t *v50;
  char *v51;
  int32x2_t *v52;
  unsigned int v53;
  unsigned int v54;
  int32x2_t *v55;
  int32x2_t *v56;
  __int32 v57;
  int32x2_t *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int16 *v61;
  BOOL v62;
  __int32 v63;
  unsigned int v64;
  int32x2_t *v65;
  unsigned int v66;
  int32x2_t *v67;
  int32x2_t *v68;
  unsigned int v69;
  __int32 v70;
  int32x2_t *v71;
  unsigned int v72;
  unsigned int v73;
  __int32 *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int32 v80;
  unsigned int v81;
  BOOL v83;
  uint64_t v84;
  int32x2_t *v85;
  int32x2_t *v86;
  unsigned int v87;
  __int32 v88;
  uint64_t v89;
  unsigned int v90;
  int64_t v91;
  int64_t v92;
  BOOL v93;
  uint64_t v94;
  unsigned __int16 *v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unsigned __int16 *v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  BOOL v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int32 v108;
  int32x2_t *v109;
  int32x2_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int32x2_t *v115;
  __int32 v116;
  int32x2_t *v117;
  __int32 v118;
  __int32 v119;
  __int32 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int32 v125;
  uint64_t v126;
  int32x2_t *v127;
  unsigned int v128;
  __int32 v129;
  __int32 v130;
  __int32 v131;
  __int32 v132;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 2;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (a2[-1].u16[2] < v8->u16[0])
        {
          LODWORD(v30) = v8->i32[0];
          goto LABEL_117;
        }
        return result;
      case 3:
        v75 = v8->u16[2];
        v76 = a2[-1].u16[2];
        if (v75 < v8->u16[0])
        {
          LODWORD(v30) = v8->i32[0];
          if (v76 >= v75)
            goto LABEL_195;
LABEL_117:
          v8->i32[0] = a2[-1].i32[1];
          goto LABEL_118;
        }
        if (v76 < v75)
        {
          v118 = v8->i32[1];
          v8->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v118;
          if (v8->u16[2] < v8->u16[0])
            *v8 = vrev64_s32(*v8);
        }
        return result;
      case 4:
        v77 = v8->u16[2];
        v78 = v8->u16[0];
        v79 = v8[1].u16[0];
        if (v77 >= v78)
        {
          if (v79 < v77)
          {
            v79 = v8->u32[1];
            v119 = v8[1].i32[0];
            v8->i32[1] = v119;
            v8[1].i32[0] = v79;
            v79 = (unsigned __int16)v79;
            if (v78 > (unsigned __int16)v119)
            {
              v120 = v8->i32[0];
              v8->i32[0] = v119;
              v8->i32[1] = v120;
            }
          }
        }
        else
        {
          v80 = v8->i32[0];
          v81 = (unsigned __int16)v8->i32[0];
          if (v79 >= v77)
          {
            v8->i32[0] = v8->i32[1];
            v8->i32[1] = v80;
            if (v79 >= v81)
              goto LABEL_200;
            v8->i32[1] = v8[1].i32[0];
          }
          else
          {
            v8->i32[0] = v8[1].i32[0];
          }
          v8[1].i32[0] = v80;
          v79 = v81;
        }
LABEL_200:
        if (a2[-1].u16[2] < v79)
        {
          v129 = v8[1].i32[0];
          v8[1].i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v129;
          if (v8[1].u16[0] < v8->u16[2])
          {
            v131 = v8->i32[1];
            v130 = v8[1].i32[0];
            v8->i32[1] = v130;
            v8[1].i32[0] = v131;
            if (v8->u16[0] > (unsigned __int16)v130)
            {
              v132 = v8->i32[0];
              v8->i32[0] = v130;
              v8->i32[1] = v132;
            }
          }
        }
        return result;
      case 5:
        return (int32x2_t *)std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,0>((unsigned __int16 *)v8, (unsigned __int16 *)v8 + 2, &v8[1], (_DWORD *)&v8[1] + 1, (_DWORD *)&a2[-1] + 1);
      default:
        if (v9 > 95)
        {
          if (!a3)
          {
            if (v8 == a2)
              return result;
            v91 = (unint64_t)(v10 - 2) >> 1;
            v92 = v91;
            while (1)
            {
              if (v91 >= v92)
              {
                v94 = (2 * v92) | 1;
                v95 = (unsigned __int16 *)v8 + 2 * v94;
                if (2 * v92 + 2 >= v10)
                {
                  v99 = (unsigned __int16 *)v8 + 2 * v92;
                  if (*v95 >= *v99)
                    goto LABEL_153;
                }
                else
                {
                  v96 = *v95;
                  v97 = v95[2];
                  v98 = v96 >= v97;
                  if (v96 <= v97)
                    v96 = v95[2];
                  if (!v98)
                  {
                    v95 += 2;
                    v94 = 2 * v92 + 2;
                  }
                  v99 = (unsigned __int16 *)v8 + 2 * v92;
                  if (v96 >= *v99)
                  {
LABEL_153:
                    v100 = *(_DWORD *)v99;
                    while (1)
                    {
                      v104 = v99;
                      v99 = v95;
                      *v104 = *(_DWORD *)v95;
                      if (v91 < v94)
                        break;
                      v105 = (2 * v94) | 1;
                      v95 = (unsigned __int16 *)v8 + 2 * v105;
                      v94 = 2 * v94 + 2;
                      if (v94 < v10)
                      {
                        v101 = *v95;
                        result = (int32x2_t *)(v95 + 2);
                        v102 = v95[2];
                        v103 = v101 >= v102;
                        if (v101 <= v102)
                          v101 = v95[2];
                        if (v103)
                          v94 = v105;
                        else
                          v95 += 2;
                        if (v101 < (unsigned __int16)v100)
                          break;
                      }
                      else
                      {
                        v94 = v105;
                        if (*v95 < (unsigned __int16)v100)
                          break;
                      }
                    }
                    *(_DWORD *)v99 = v100;
                  }
                }
              }
              v93 = v92-- <= 0;
              if (v93)
              {
                v106 = (unint64_t)v9 >> 2;
                do
                {
                  v107 = 0;
                  v108 = v8->i32[0];
                  v109 = v8;
                  do
                  {
                    v110 = (int32x2_t *)((char *)v109 + 4 * v107 + 4);
                    v111 = (2 * v107) | 1;
                    v112 = 2 * v107 + 2;
                    if (v112 < v106 && v110->u16[0] < v110->u16[2])
                    {
                      v110 = (int32x2_t *)((char *)v110 + 4);
                      v111 = v112;
                    }
                    v109->i32[0] = v110->i32[0];
                    v109 = v110;
                    v107 = v111;
                  }
                  while (v111 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
                  a2 = (int32x2_t *)((char *)a2 - 4);
                  if (v110 == a2)
                  {
                    v110->i32[0] = v108;
                  }
                  else
                  {
                    v110->i32[0] = a2->i32[0];
                    a2->i32[0] = v108;
                    v113 = (char *)v110 - (char *)v8 + 4;
                    if (v113 >= 5)
                    {
                      v114 = (((unint64_t)v113 >> 2) - 2) >> 1;
                      v115 = (int32x2_t *)((char *)v8 + 4 * v114);
                      if (v115->u16[0] < v110->u16[0])
                      {
                        v116 = v110->i32[0];
                        do
                        {
                          v117 = v110;
                          v110 = v115;
                          v117->i32[0] = v115->i32[0];
                          if (!v114)
                            break;
                          v114 = (v114 - 1) >> 1;
                          v115 = (int32x2_t *)((char *)v8 + 4 * v114);
                        }
                        while (v115->u16[0] < (unsigned __int16)v116);
                        v110->i32[0] = v116;
                      }
                    }
                  }
                  v93 = v106-- <= 2;
                }
                while (!v93);
                return result;
              }
            }
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = (unsigned __int16 *)v8 + 2 * ((unint64_t)v10 >> 1);
          v13 = a2[-1].u16[2];
          if ((unint64_t)v9 < 0x201)
          {
            v16 = v8->u16[0];
            if (v16 >= *v12)
            {
              if (v13 < v16)
              {
                v20 = v8->i32[0];
                v8->i32[0] = a2[-1].i32[1];
                a2[-1].i32[1] = v20;
                if (v8->u16[0] < *v12)
                {
                  v21 = *(_DWORD *)v12;
                  *(_DWORD *)v12 = v8->i32[0];
                  v8->i32[0] = v21;
                  --a3;
                  if ((a4 & 1) != 0)
                    goto LABEL_33;
                  goto LABEL_57;
                }
              }
              goto LABEL_32;
            }
            v17 = *(_DWORD *)v12;
            if (v13 >= v16)
            {
              *(_DWORD *)v12 = v8->i32[0];
              v8->i32[0] = v17;
              if (a2[-1].u16[2] >= (unsigned __int16)v17)
                goto LABEL_32;
              v8->i32[0] = a2[-1].i32[1];
            }
            else
            {
              *(_DWORD *)v12 = a2[-1].i32[1];
            }
            a2[-1].i32[1] = v17;
LABEL_32:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v14 = *v12;
          if (v14 >= v8->u16[0])
          {
            if (v13 < v14)
            {
              v18 = *(_DWORD *)v12;
              *(_DWORD *)v12 = a2[-1].i32[1];
              a2[-1].i32[1] = v18;
              if (*v12 < v8->u16[0])
              {
                v19 = v8->i32[0];
                v8->i32[0] = *(_DWORD *)v12;
                *(_DWORD *)v12 = v19;
              }
            }
          }
          else
          {
            v15 = v8->i32[0];
            if (v13 >= v14)
            {
              v8->i32[0] = *(_DWORD *)v12;
              *(_DWORD *)v12 = v15;
              if (a2[-1].u16[2] >= (unsigned __int16)v15)
                goto LABEL_23;
              *(_DWORD *)v12 = a2[-1].i32[1];
            }
            else
            {
              v8->i32[0] = a2[-1].i32[1];
            }
            a2[-1].i32[1] = v15;
          }
LABEL_23:
          v22 = (char *)v8 + 4 * v11;
          v25 = *((unsigned __int16 *)v22 - 2);
          v23 = v22 - 4;
          v24 = v25;
          v26 = a2[-1].u16[0];
          if (v25 >= v8->u16[2])
          {
            if (v26 < v24)
            {
              v28 = *(_DWORD *)v23;
              *(_DWORD *)v23 = a2[-1].i32[0];
              a2[-1].i32[0] = v28;
              if (*(unsigned __int16 *)v23 < v8->u16[2])
              {
                v29 = v8->i32[1];
                v8->i32[1] = *(_DWORD *)v23;
                *(_DWORD *)v23 = v29;
              }
            }
          }
          else
          {
            v27 = v8->i32[1];
            if (v26 >= v24)
            {
              v8->i32[1] = *(_DWORD *)v23;
              *(_DWORD *)v23 = v27;
              if (a2[-1].u16[0] >= (unsigned __int16)v27)
                goto LABEL_37;
              *(_DWORD *)v23 = a2[-1].i32[0];
            }
            else
            {
              v8->i32[1] = a2[-1].i32[0];
            }
            a2[-1].i32[0] = v27;
          }
LABEL_37:
          v31 = (char *)v8 + 4 * v11;
          v34 = *((unsigned __int16 *)v31 + 2);
          v32 = (unsigned __int16 *)(v31 + 4);
          v33 = v34;
          v35 = a2[-2].u16[2];
          if (v34 >= v8[1].u16[0])
          {
            if (v35 < v33)
            {
              v37 = *(_DWORD *)v32;
              *(_DWORD *)v32 = a2[-2].i32[1];
              a2[-2].i32[1] = v37;
              if (*v32 < v8[1].u16[0])
              {
                v38 = v8[1].i32[0];
                v8[1].i32[0] = *(_DWORD *)v32;
                *(_DWORD *)v32 = v38;
              }
            }
          }
          else
          {
            v36 = v8[1].i32[0];
            if (v35 >= v33)
            {
              v8[1].i32[0] = *(_DWORD *)v32;
              *(_DWORD *)v32 = v36;
              if (a2[-2].u16[2] >= (unsigned __int16)v36)
                goto LABEL_46;
              *(_DWORD *)v32 = a2[-2].i32[1];
            }
            else
            {
              v8[1].i32[0] = a2[-2].i32[1];
            }
            a2[-2].i32[1] = v36;
          }
LABEL_46:
          v39 = *v12;
          v40 = *(unsigned __int16 *)v23;
          v41 = *v32;
          if (v39 < v40)
          {
            v42 = *(_DWORD *)v23;
            if (v41 < v39)
            {
              *(_DWORD *)v23 = *(_DWORD *)v32;
              *(_DWORD *)v32 = v42;
              v43 = v8->i32[0];
              v8->i32[0] = *(_DWORD *)v12;
              *(_DWORD *)v12 = v43;
              --a3;
              if ((a4 & 1) != 0)
                goto LABEL_33;
              goto LABEL_57;
            }
            *(_DWORD *)v23 = *(_DWORD *)v12;
            *(_DWORD *)v12 = v42;
            if (v41 < (unsigned __int16)v42)
            {
              v47 = *(_DWORD *)v32;
              *(_DWORD *)v12 = *(_DWORD *)v32;
              *(_DWORD *)v32 = v42;
              v42 = v47;
            }
            goto LABEL_56;
          }
          v42 = *(_DWORD *)v12;
          if (v41 >= v39)
          {
LABEL_56:
            v48 = v8->i32[0];
            v8->i32[0] = v42;
            *(_DWORD *)v12 = v48;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
LABEL_57:
            LODWORD(v30) = v8->i32[0];
            if (v8[-1].u16[2] < v8->u16[0])
              goto LABEL_58;
            v64 = (unsigned __int16)v8->i32[0];
            if (a2[-1].u16[2] <= v64)
            {
              v67 = (int32x2_t *)((char *)v8 + 4);
              do
              {
                v8 = v67;
                if (v67 >= a2)
                  break;
                v67 = (int32x2_t *)((char *)v67 + 4);
              }
              while (v8->u16[0] <= v64);
            }
            else
            {
              v65 = (int32x2_t *)((char *)v8 + 4);
              do
              {
                if (v65 == a2)
                  goto LABEL_194;
                v66 = v65->u16[0];
                v65 = (int32x2_t *)((char *)v65 + 4);
              }
              while (v66 <= v64);
              v8 = (int32x2_t *)((char *)v65 - 4);
            }
            v68 = a2;
            if (v8 < a2)
            {
              v68 = a2;
              while (v68 != v7)
              {
                v69 = v68[-1].u16[2];
                v68 = (int32x2_t *)((char *)v68 - 4);
                if (v69 <= v64)
                  goto LABEL_106;
              }
              goto LABEL_194;
            }
LABEL_106:
            if (v8 < v68)
            {
              v70 = v8->i32[0];
              v8->i32[0] = v68->i32[0];
              v71 = (int32x2_t *)((char *)v8 + 4);
              v68->i32[0] = v70;
              while (v71 != a2)
              {
                v72 = v71->u16[0];
                v71 = (int32x2_t *)((char *)v71 + 4);
                if (v72 > v64)
                {
                  v8 = (int32x2_t *)((char *)v71 - 4);
                  while (v68 != v7)
                  {
                    v73 = v68[-1].u16[2];
                    v68 = (int32x2_t *)((char *)v68 - 4);
                    if (v73 <= v64)
                      goto LABEL_106;
                  }
                  goto LABEL_194;
                }
              }
              goto LABEL_194;
            }
            v74 = (__int32 *)&v8[-1] + 1;
            if (&v8[-1].u8[4] != (unsigned __int8 *)v7)
              v7->i32[0] = *v74;
            a4 = 0;
            *v74 = (int)v30;
            continue;
          }
          v44 = *(_DWORD *)v32;
          *(_DWORD *)v12 = *(_DWORD *)v32;
          *(_DWORD *)v32 = v42;
          if (v40 > (unsigned __int16)v44)
          {
            v45 = *(_DWORD *)v23;
            *(_DWORD *)v23 = v44;
            *(_DWORD *)v12 = v45;
            v46 = v8->i32[0];
            v8->i32[0] = v45;
            *(_DWORD *)v12 = v46;
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_33;
            goto LABEL_57;
          }
          v63 = v8->i32[0];
          v8->i32[0] = v44;
          *(_DWORD *)v12 = v63;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_57;
LABEL_33:
          LODWORD(v30) = v8->i32[0];
LABEL_58:
          v49 = 0;
          do
          {
            v50 = (int32x2_t *)((char *)v8 + v49 + 4);
            if (v50 == a2)
              goto LABEL_194;
            v49 += 4;
          }
          while (v50->u16[0] < (unsigned __int16)v30);
          v51 = (char *)v8 + v49;
          v52 = a2;
          if (v49 != 4)
          {
            while (v52 != v8)
            {
              v53 = v52[-1].u16[2];
              v52 = (int32x2_t *)((char *)v52 - 4);
              if (v53 < (unsigned __int16)v30)
                goto LABEL_68;
            }
            goto LABEL_194;
          }
          v52 = a2;
          do
          {
            if (v51 >= (char *)v52)
              break;
            v54 = v52[-1].u16[2];
            v52 = (int32x2_t *)((char *)v52 - 4);
          }
          while (v54 >= (unsigned __int16)v30);
LABEL_68:
          if (v51 >= (char *)v52)
          {
            v61 = (unsigned __int16 *)(v51 - 4);
            if (v51 - 4 == (char *)v8)
              goto LABEL_81;
LABEL_80:
            v8->i32[0] = *(_DWORD *)v61;
            goto LABEL_81;
          }
          v55 = (int32x2_t *)((char *)v8 + v49);
          v56 = v52;
          do
          {
            v57 = v55->i32[0];
            v55->i32[0] = v56->i32[0];
            v56->i32[0] = v57;
            v58 = (int32x2_t *)((char *)v55 + 4);
            do
            {
              if (v58 == a2)
                goto LABEL_194;
              v59 = v58->u16[0];
              v58 = (int32x2_t *)((char *)v58 + 4);
            }
            while (v59 < (unsigned __int16)v30);
            v55 = (int32x2_t *)((char *)v58 - 4);
            do
            {
              if (v56 == v8)
                goto LABEL_194;
              v60 = v56[-1].u16[2];
              v56 = (int32x2_t *)((char *)v56 - 4);
            }
            while (v60 >= (unsigned __int16)v30);
          }
          while (v55 < v56);
          v61 = (unsigned __int16 *)&v58[-1];
          if (&v58[-1] != v8)
            goto LABEL_80;
LABEL_81:
          *(_DWORD *)v61 = (_DWORD)v30;
          if (v51 < (char *)v52)
            goto LABEL_84;
          v62 = std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *>(v8, (int32x2_t *)v61);
          v8 = (int32x2_t *)(v61 + 2);
          result = (int32x2_t *)std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *>((int32x2_t *)(v61 + 2), a2);
          if (!(_DWORD)result)
          {
            if (v62)
              continue;
LABEL_84:
            result = (int32x2_t *)std::__introsort<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,false>(v7, v61, a3, a4 & 1);
            a4 = 0;
            v8 = (int32x2_t *)(v61 + 2);
            continue;
          }
          a2 = (int32x2_t *)v61;
          if (v62)
            return result;
          goto LABEL_2;
        }
        v30 = (int32x2_t *)((char *)v8 + 4);
        v83 = v8 == a2 || v30 == a2;
        if ((a4 & 1) != 0)
        {
          if (v83)
            return result;
          v84 = 0;
          v85 = v8;
          while (1)
          {
            v87 = v85->u16[0];
            v85 = v30;
            if (v30->u16[0] < v87)
            {
              v88 = v30->i32[0];
              v89 = v84;
              do
              {
                *(__int32 *)((char *)&v8->i32[1] + v89) = *(__int32 *)((char *)v8->i32 + v89);
                if (!v89)
                {
                  v86 = v8;
                  goto LABEL_133;
                }
                v90 = *(unsigned __int16 *)((char *)&v8->u16[-2] + v89);
                v89 -= 4;
              }
              while (v90 > (unsigned __int16)v88);
              v86 = (int32x2_t *)((char *)v8 + v89 + 4);
LABEL_133:
              v86->i32[0] = v88;
            }
            v30 = (int32x2_t *)((char *)v85 + 4);
            v84 += 4;
            if (&v85->u8[4] == (unsigned __int8 *)a2)
              return result;
          }
        }
        if (v83)
          return result;
        v121 = 0;
        v122 = -1;
        v123 = 1;
        while (1)
        {
          v124 = 2 * v121;
          v121 = v123;
          if (v30->u16[0] < v8->u16[v124])
            break;
LABEL_188:
          v123 = v121 + 1;
          v30 = (int32x2_t *)((char *)v30 + 4);
          --v122;
          if (v30 == a2)
            return result;
        }
        v125 = v30->i32[0];
        v126 = v122;
        v127 = v30;
        while (1)
        {
          v127->i32[0] = v127[-1].i32[1];
          if (!v126)
            break;
          v128 = v127[-1].u16[0];
          v127 = (int32x2_t *)((char *)v127 - 4);
          ++v126;
          if (v128 <= (unsigned __int16)v125)
          {
            v127->i32[0] = v125;
            goto LABEL_188;
          }
        }
LABEL_194:
        __break(1u);
LABEL_195:
        v7->i32[0] = v7->i32[1];
        v7->i32[1] = (int)v30;
        if (a2[-1].u16[2] < (unsigned __int16)v30)
        {
          v7->i32[1] = a2[-1].i32[1];
LABEL_118:
          a2[-1].i32[1] = (int)v30;
        }
        return result;
    }
  }
}

unsigned __int16 *std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,0>(unsigned __int16 *result, unsigned __int16 *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v5 = *a2;
  v6 = *(unsigned __int16 *)a3;
  if (v5 >= *result)
  {
    if (v6 < v5)
    {
      v8 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *a3;
      *a3 = v8;
      if (*a2 >= *result)
      {
        if (*(unsigned __int16 *)a4 >= (unsigned __int16)v8)
          goto LABEL_16;
      }
      else
      {
        v9 = *(_DWORD *)result;
        *(_DWORD *)result = *(_DWORD *)a2;
        *(_DWORD *)a2 = v9;
        if (*(unsigned __int16 *)a4 >= *(unsigned __int16 *)a3)
          goto LABEL_16;
      }
      goto LABEL_12;
    }
LABEL_11:
    if (*(unsigned __int16 *)a4 >= v6)
      goto LABEL_16;
    goto LABEL_12;
  }
  v7 = *(_DWORD *)result;
  if (v6 >= v5)
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    *(_DWORD *)a2 = v7;
    v6 = *(unsigned __int16 *)a3;
    if (v6 < (unsigned __int16)v7)
    {
      *(_DWORD *)a2 = *a3;
      *a3 = v7;
      v6 = (unsigned __int16)v7;
    }
    goto LABEL_11;
  }
  *(_DWORD *)result = *a3;
  *a3 = v7;
  if (*(unsigned __int16 *)a4 >= (unsigned __int16)v7)
    goto LABEL_16;
LABEL_12:
  v10 = *a3;
  *a3 = *a4;
  *a4 = v10;
  if (*(unsigned __int16 *)a3 < *a2)
  {
    v11 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *a3;
    *a3 = v11;
    if (*a2 < *result)
    {
      v12 = *(_DWORD *)result;
      *(_DWORD *)result = *(_DWORD *)a2;
      *(_DWORD *)a2 = v12;
    }
  }
LABEL_16:
  if (*(unsigned __int16 *)a5 < *(unsigned __int16 *)a4)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    if (*(unsigned __int16 *)a4 < *(unsigned __int16 *)a3)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      if (*(unsigned __int16 *)a3 < *a2)
      {
        v15 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *a3;
        *a3 = v15;
        if (*a2 < *result)
        {
          v16 = *(_DWORD *)result;
          *(_DWORD *)result = *(_DWORD *)a2;
          *(_DWORD *)a2 = v16;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *>(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  __int32 v7;
  __int32 v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int32 v14;
  unsigned int v15;
  __int32 v16;
  __int32 v17;
  __int32 v18;
  __int32 v19;
  __int32 v20;
  __int32 v21;
  unsigned __int16 *v22;
  uint64_t v23;
  int v24;
  __int32 v25;
  uint64_t v26;
  unsigned int v27;
  __int32 v28;
  __int32 v29;
  __int32 v30;
  __int32 v31;

  switch(((char *)a2 - (char *)a1) >> 2)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      if (a2[-1].u16[2] >= a1->u16[0])
        return 1;
      v8 = a1->i32[0];
      goto LABEL_10;
    case 3:
      v9 = a1->u16[2];
      v10 = a2[-1].u16[2];
      if (v9 >= a1->u16[0])
      {
        if (v10 < v9)
        {
          v19 = a1->i32[1];
          a1->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v19;
          if (a1->u16[2] < a1->u16[0])
          {
            *a1 = vrev64_s32(*a1);
            return 1;
          }
        }
      }
      else
      {
        v8 = a1->i32[0];
        if (v10 < v9)
        {
LABEL_10:
          a1->i32[0] = a2[-1].i32[1];
          a2[-1].i32[1] = v8;
          return 1;
        }
        a1->i32[0] = a1->i32[1];
        a1->i32[1] = v8;
        if (a2[-1].u16[2] < (unsigned __int16)v8)
        {
          a1->i32[1] = a2[-1].i32[1];
          a2[-1].i32[1] = v8;
          return 1;
        }
      }
      return 1;
    case 4:
      v11 = a1->u16[2];
      v12 = a1->u16[0];
      v13 = a1[1].u16[0];
      if (v11 >= v12)
      {
        if (v13 < v11)
        {
          v13 = a1->u32[1];
          v20 = a1[1].i32[0];
          a1->i32[1] = v20;
          a1[1].i32[0] = v13;
          v13 = (unsigned __int16)v13;
          if (v12 > (unsigned __int16)v20)
          {
            v21 = a1->i32[0];
            a1->i32[0] = v20;
            a1->i32[1] = v21;
          }
        }
      }
      else
      {
        v14 = a1->i32[0];
        v15 = (unsigned __int16)a1->i32[0];
        if (v13 >= v11)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v14;
          if (v13 >= v15)
            goto LABEL_44;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v14;
        v13 = v15;
      }
LABEL_44:
      if (a2[-1].u16[2] >= v13)
        return 1;
      v28 = a1[1].i32[0];
      a1[1].i32[0] = a2[-1].i32[1];
      a2[-1].i32[1] = v28;
      if (a1[1].u16[0] >= a1->u16[2])
        return 1;
      v30 = a1->i32[1];
      v29 = a1[1].i32[0];
      a1->i32[1] = v29;
      a1[1].i32[0] = v30;
      if (a1->u16[0] <= (unsigned __int16)v29)
        return 1;
      v31 = a1->i32[0];
      a1->i32[0] = v29;
      a1->i32[1] = v31;
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:sn180100]<std::_ClassicAlgPolicy,dcsctp::ChunkValidators::Clean(dcsctp::SackChunk &&)::$_0 &,dcsctp::SackChunk::GapAckBlock *,0>((unsigned __int16 *)a1, (unsigned __int16 *)a1 + 2, &a1[1], (_DWORD *)&a1[1] + 1, (_DWORD *)&a2[-1] + 1);
      return 1;
    default:
      v3 = a1 + 1;
      v4 = a1[1].u16[0];
      v5 = a1->u16[2];
      v6 = a1->u16[0];
      if (v5 >= v6)
      {
        if (v4 < v5)
        {
          v17 = a1->i32[1];
          v16 = a1[1].i32[0];
          a1->i32[1] = v16;
          a1[1].i32[0] = v17;
          if (v6 > (unsigned __int16)v16)
          {
            v18 = a1->i32[0];
            a1->i32[0] = v16;
            a1->i32[1] = v18;
          }
        }
      }
      else
      {
        v7 = a1->i32[0];
        if (v4 >= v5)
        {
          a1->i32[0] = a1->i32[1];
          a1->i32[1] = v7;
          if (v4 >= (unsigned __int16)v7)
            goto LABEL_28;
          a1->i32[1] = a1[1].i32[0];
        }
        else
        {
          a1->i32[0] = a1[1].i32[0];
        }
        a1[1].i32[0] = v7;
      }
LABEL_28:
      v22 = (unsigned __int16 *)&a1[1] + 2;
      if (&a1[1].u8[4] == (unsigned __int8 *)a2)
        return 1;
      v23 = 0;
      v24 = 0;
      break;
  }
  while (*v22 >= v3->u16[0])
  {
LABEL_37:
    v3 = (int32x2_t *)v22;
    v23 += 4;
    v22 += 2;
    if (v22 == (unsigned __int16 *)a2)
      return 1;
  }
  v25 = *(_DWORD *)v22;
  v26 = v23;
  do
  {
    *(__int32 *)((char *)&a1[1].i32[1] + v26) = *(__int32 *)((char *)a1[1].i32 + v26);
    if (v26 == -8)
    {
      a1->i32[0] = v25;
      if (++v24 != 8)
        goto LABEL_37;
      return v22 + 2 == (unsigned __int16 *)a2;
    }
    v27 = *(unsigned __int16 *)((char *)&a1->u16[2] + v26);
    v26 -= 4;
  }
  while (v27 > (unsigned __int16)v25);
  *(__int32 *)((char *)&a1[1].i32[1] + v26) = v25;
  if (++v24 != 8)
    goto LABEL_37;
  return v22 + 2 == (unsigned __int16 *)a2;
}

void webrtc::CreateClippingPredictor(int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  int v4;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int *v16;
  int *v17;
  int *v18;
  float *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  char v47;
  char v48;
  int v49;
  _QWORD *v50;

  v4 = a1;
  v49 = a1;
  v6 = *a2;
  v7 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if (v6)
  {
    if ((v7 & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor.cc");
    v15 = *((_DWORD *)a2 + 1);
    if (v15 == 2)
    {
      v16 = (int *)(a2 + 8);
      v17 = (int *)(a2 + 12);
      v18 = (int *)(a2 + 16);
      v19 = (float *)(a2 + 20);
      v47 = 0;
      v20 = &v47;
    }
    else
    {
      if (v15 != 1)
      {
        v21 = operator new();
        v23 = *((_DWORD *)a2 + 2);
        v22 = *((_DWORD *)a2 + 3);
        v24 = *((_DWORD *)a2 + 4);
        *(_QWORD *)v21 = &off_24C0B1378;
        *(_QWORD *)(v21 + 8) = 0;
        v25 = (_QWORD *)(v21 + 8);
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = 0;
        *(_DWORD *)(v21 + 32) = v23;
        *(_DWORD *)(v21 + 36) = v22;
        *(_DWORD *)(v21 + 40) = v24;
        *(_QWORD *)(v21 + 44) = *(_QWORD *)(a2 + 20);
        if (v4 < 1)
        {
LABEL_37:
          *a3 = v21;
          return;
        }
        v26 = v24 + v22;
        if (v24 + v22 <= 1)
          v27 = 1;
        else
          v27 = v26;
        if (v26 > 100)
        {
          v28 = 0;
          while (1)
          {
            v29 = (_QWORD *)operator new();
            *v29 = 0xFFFFFFFFLL;
            v30 = (char *)operator new(8 * v27);
            v29[1] = v30;
            v31 = &v30[8 * v27];
            v29[3] = v31;
            bzero(v30, 8 * v27);
            v29[2] = v31;
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor_level_buffer.cc");
            v50 = v29;
            if ((unint64_t)v28 >= *(_QWORD *)(v21 + 24))
            {
              v28 = std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(v25, (uint64_t *)&v50);
              v39 = (uint64_t)v50;
              *(_QWORD *)(v21 + 16) = v28;
              if (v39)
              {
                v40 = *(void **)(v39 + 8);
                if (v40)
                {
                  *(_QWORD *)(v39 + 16) = v40;
                  operator delete(v40);
                }
                MEMORY[0x20BD0ADEC](v39, 0x1020C405E66F15BLL);
              }
            }
            else
            {
              if (!v28)
                goto LABEL_38;
              *v28++ = v29;
              *(_QWORD *)(v21 + 16) = v28;
            }
            if (!--v4)
              goto LABEL_37;
          }
        }
        v41 = 0;
        while (1)
        {
          v42 = (_QWORD *)operator new();
          *v42 = 0xFFFFFFFFLL;
          v43 = (char *)operator new(8 * v27);
          v42[1] = v43;
          v44 = &v43[8 * v27];
          v42[3] = v44;
          bzero(v43, 8 * v27);
          v42[2] = v44;
          v50 = v42;
          if ((unint64_t)v41 >= *(_QWORD *)(v21 + 24))
          {
            v41 = std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(v25, (uint64_t *)&v50);
            v45 = (uint64_t)v50;
            *(_QWORD *)(v21 + 16) = v41;
            if (v45)
            {
              v46 = *(void **)(v45 + 8);
              if (v46)
              {
                *(_QWORD *)(v45 + 16) = v46;
                operator delete(v46);
              }
              MEMORY[0x20BD0ADEC](v45, 0x1020C405E66F15BLL);
            }
          }
          else
          {
            if (!v41)
            {
LABEL_38:
              __break(1u);
              return;
            }
            *v41++ = v42;
            *(_QWORD *)(v21 + 16) = v41;
          }
          if (!--v4)
            goto LABEL_37;
        }
      }
      v16 = (int *)(a2 + 8);
      v17 = (int *)(a2 + 12);
      v18 = (int *)(a2 + 16);
      v19 = (float *)(a2 + 20);
      v48 = 1;
      v20 = &v48;
    }
    return;
  }
  if ((v7 & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor.cc");
  *a3 = 0;
}

void std::make_unique[abi:sn180100]<webrtc::`anonymous namespace'::ClippingPeakPredictor,int &,int const&,int const&,int const&,float const&,BOOL>(uint64_t *a1, int *a2, int *a3, int *a4, int *a5, float *a6, char *a7)
{
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v43;

  v13 = operator new();
  v14 = *a2;
  v15 = *a3;
  v16 = *a4;
  v17 = *a5;
  v18 = (int)*a6;
  v19 = *a7;
  *(_QWORD *)v13 = &off_24C0B13B0;
  *(_QWORD *)(v13 + 8) = 0;
  v20 = (_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_DWORD *)(v13 + 32) = v15;
  *(_DWORD *)(v13 + 36) = v16;
  *(_DWORD *)(v13 + 40) = v17;
  *(_DWORD *)(v13 + 44) = v18;
  *(_BYTE *)(v13 + 48) = v19;
  if (v14 < 1)
  {
LABEL_26:
    *a1 = v13;
    return;
  }
  v21 = v17 + v16;
  if (v17 + v16 <= 1)
    v22 = 1;
  else
    v22 = v21;
  if (v21 > 100)
  {
    v23 = 0;
    while (1)
    {
      v24 = (_QWORD *)operator new();
      *v24 = 0xFFFFFFFFLL;
      v25 = (char *)operator new(8 * v22);
      v24[1] = v25;
      v26 = &v25[8 * v22];
      v24[3] = v26;
      bzero(v25, 8 * v22);
      v24[2] = v26;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor_level_buffer.cc");
      v43 = v24;
      if ((unint64_t)v23 >= *(_QWORD *)(v13 + 24))
      {
        v23 = std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(v20, (uint64_t *)&v43);
        v34 = (uint64_t)v43;
        *(_QWORD *)(v13 + 16) = v23;
        if (v34)
        {
          v35 = *(void **)(v34 + 8);
          if (v35)
          {
            *(_QWORD *)(v34 + 16) = v35;
            operator delete(v35);
          }
          MEMORY[0x20BD0ADEC](v34, 0x1020C405E66F15BLL);
        }
      }
      else
      {
        if (!v23)
          goto LABEL_27;
        *v23++ = v24;
        *(_QWORD *)(v13 + 16) = v23;
      }
      if (!--v14)
        goto LABEL_26;
    }
  }
  v36 = 0;
  while (1)
  {
    v37 = (_QWORD *)operator new();
    *v37 = 0xFFFFFFFFLL;
    v38 = (char *)operator new(8 * v22);
    v37[1] = v38;
    v39 = &v38[8 * v22];
    v37[3] = v39;
    bzero(v38, 8 * v22);
    v37[2] = v39;
    v43 = v37;
    if ((unint64_t)v36 >= *(_QWORD *)(v13 + 24))
    {
      v36 = std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(v20, (uint64_t *)&v43);
      v40 = (uint64_t)v43;
      *(_QWORD *)(v13 + 16) = v36;
      if (v40)
      {
        v41 = *(void **)(v40 + 8);
        if (v41)
        {
          *(_QWORD *)(v40 + 16) = v41;
          operator delete(v41);
        }
        MEMORY[0x20BD0ADEC](v40, 0x1020C405E66F15BLL);
      }
      goto LABEL_19;
    }
    if (!v36)
      break;
    *v36++ = v37;
    *(_QWORD *)(v13 + 16) = v36;
LABEL_19:
    if (!--v14)
      goto LABEL_26;
  }
LABEL_27:
  __break(1u);
}

void webrtc::`anonymous namespace'::ClippingEventPredictor::~ClippingEventPredictor(webrtc::_anonymous_namespace_::ClippingEventPredictor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24C0B1378;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 16) = v7;
            operator delete(v7);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1020C405E66F15BLL);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24C0B1378;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 16) = v7;
            operator delete(v7);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1020C405E66F15BLL);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::ClippingEventPredictor::Reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16) - v1;
  if ((int)((unint64_t)v2 >> 3) >= 1)
  {
    v3 = ((unint64_t)v2 >> 3);
    v4 = v2 >> 3;
    if (v4 >= v3 - 1)
      v5 = v3 - 1;
    else
      v5 = v4;
    v6 = v5 + 1;
    if (v5 + 1 > 2)
    {
      v8 = 2;
      if ((v6 & 1) != 0)
        v8 = v6 & 1;
      v7 = v6 - v8;
      v9 = (_QWORD **)(v1 + 8);
      v10 = ~v5 + v8;
      do
      {
        v11 = *v9;
        **(v9 - 1) = 0xFFFFFFFFLL;
        *v11 = 0xFFFFFFFFLL;
        v9 += 2;
        v10 += 2;
      }
      while (v10);
    }
    else
    {
      v7 = 0;
    }
    v12 = v4 - v7;
    v13 = (_QWORD **)(v1 + 8 * v7);
    v14 = v7 - v3;
    while (v12)
    {
      v15 = *v13++;
      *v15 = 0xFFFFFFFFLL;
      --v12;
      if (__CFADD__(v14++, 1))
        return this;
    }
    __break(1u);
  }
  return this;
}

unint64_t webrtc::`anonymous namespace'::ClippingEventPredictor::Analyze(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  int **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  float v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    v3 = *((int *)a2 + 3);
    v4 = (float)(int)v3;
    v5 = *(int ***)(result + 8);
    v6 = (uint64_t)(*(_QWORD *)(result + 16) - (_QWORD)v5) >> 3;
    if ((_DWORD)v3)
    {
      v7 = 0;
      v8 = *a2;
      v9 = 4 * v3;
      while (1)
      {
        v10 = *(float **)(v8 + 8 * v7);
        v11 = 0.0;
        v12 = v9;
        v13 = 0.0;
        do
        {
          v14 = *v10++;
          v11 = v11 + (float)(v14 * v14);
          v15 = fabsf(v14);
          if (v15 >= v13)
            v13 = v15;
          v12 -= 4;
        }
        while (v12);
        if (v7 == v6)
          goto LABEL_27;
        v16 = v5[v7];
        v17 = *v16 + 1;
        *v16 = v17;
        v18 = *((_QWORD *)v16 + 1);
        v19 = *((_QWORD *)v16 + 2) - v18;
        result = (unint64_t)v19 >> 3;
        if (v17 == ((unint64_t)v19 >> 3))
        {
          v17 = 0;
          *v16 = 0;
          v20 = v16[1];
          if (v20 < (int)result)
          {
LABEL_14:
            result = (v20 + 1);
            v16[1] = result;
            v21 = v17;
            if (v17 >= (unint64_t)(v19 >> 3))
              goto LABEL_27;
            goto LABEL_15;
          }
        }
        else
        {
          v20 = v16[1];
          if (v20 < (int)result)
            goto LABEL_14;
        }
        v21 = v17;
        if (v17 >= (unint64_t)(v19 >> 3))
          goto LABEL_27;
LABEL_15:
        v22 = (float *)(v18 + 8 * v21);
        *v22 = v11 / v4;
        v22[1] = v13;
        if (++v7 == v2)
          return result;
      }
    }
    v23 = 0.0 / v4;
    do
    {
      if (!v6)
      {
LABEL_27:
        __break(1u);
        return result;
      }
      v24 = *v5;
      v25 = **v5 + 1;
      *v24 = v25;
      v26 = *((_QWORD *)v24 + 1);
      v27 = *((_QWORD *)v24 + 2) - v26;
      v28 = (unint64_t)v27 >> 3;
      if (v25 == ((unint64_t)v27 >> 3))
      {
        v25 = 0;
        *v24 = 0;
        v29 = v24[1];
        if (v29 >= (int)v28)
        {
LABEL_21:
          v30 = v25;
          if (v25 >= (unint64_t)(v27 >> 3))
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      else
      {
        v29 = v24[1];
        if (v29 >= (int)v28)
          goto LABEL_21;
      }
      v24[1] = v29 + 1;
      v30 = v25;
      if (v25 >= (unint64_t)(v27 >> 3))
        goto LABEL_27;
LABEL_25:
      v31 = v26 + 8 * v30;
      *(float *)v31 = v23;
      *(_DWORD *)(v31 + 4) = 0;
      --v6;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *webrtc::`anonymous namespace'::ClippingEventPredictor::EstimateClippedLevelStep(webrtc::_anonymous_namespace_::ClippingEventPredictor *this, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float v22;
  int v23;
  float v24;
  unint64_t v25;
  float *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  float v35;
  float v36;
  unint64_t v37;
  float *v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  std::string *v56;
  uint64_t *v57;

  if ((a2 & 0x80000000) != 0)
    goto LABEL_44;
  v9 = *((_QWORD *)this + 1);
  if ((*((_QWORD *)this + 2) - v9) >> 3 > (unint64_t)a2)
  {
    v10 = a5;
    if (a3 <= (int)a5)
      goto LABEL_41;
    v12 = *(_QWORD *)(v9 + 8 * a2);
    v13 = *((_DWORD *)this + 8);
    v14 = *(_DWORD *)(v12 + 4);
    if (v13 > v14)
      goto LABEL_41;
    v15 = a6;
    if (v13 >= 1)
    {
      v17 = *(_DWORD *)v12;
      v18 = *(_QWORD *)(v12 + 8);
      v19 = *(_QWORD *)(v12 + 16) - v18;
      v20 = v19 >> 3;
      v21 = (unint64_t)v19 >> 3;
      v22 = 0.0;
      v23 = *((_DWORD *)this + 8);
      v24 = 0.0;
      while (1)
      {
        v25 = (int)((v21 & (v17 >> 31)) + v17);
        if (v20 <= v25)
          goto LABEL_43;
        v26 = (float *)(v18 + 8 * v25);
        v22 = v22 + *v26;
        v24 = fmaxf(v26[1], v24);
        --v17;
        if (!--v23)
        {
          if (v24 <= 1.0)
            goto LABEL_13;
          goto LABEL_10;
        }
      }
    }
    v24 = 0.0;
    v22 = 0.0;
    if (0.0 > 1.0)
    {
LABEL_10:
      if ((float)((float)(log10f(v24) * 20.0) + -90.309) <= *((float *)this + 11))
        goto LABEL_41;
    }
    else
    {
LABEL_13:
      if (*((float *)this + 11) >= -90.309)
        goto LABEL_41;
    }
    v28 = *((_DWORD *)this + 9);
    v27 = *((_DWORD *)this + 10);
    if (v28 + v27 > v14)
      goto LABEL_41;
    if (v28 >= v14)
      v29 = v14;
    else
      v29 = *((_DWORD *)this + 9);
    if (v29 >= 1)
    {
      v30 = *(_QWORD *)(v12 + 8);
      v31 = *(_QWORD *)(v12 + 16) - v30;
      v32 = v31 >> 3;
      v33 = (unint64_t)v31 >> 3;
      v34 = *(_DWORD *)v12 - v27;
      v35 = 0.0;
      v36 = 0.0;
      while (1)
      {
        v37 = (int)((v33 & (v34 >> 31)) + v34);
        if (v32 <= v37)
          break;
        v38 = (float *)(v30 + 8 * v37);
        v35 = v35 + *v38;
        v36 = fmaxf(v38[1], v36);
        --v34;
        if (!--v29)
        {
          v39 = v22 / (float)v13;
          v40 = 1.0;
          if (v24 <= 1.0)
            goto LABEL_29;
          goto LABEL_23;
        }
      }
LABEL_43:
      __break(1u);
LABEL_44:
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor.cc", 139, "channel >= 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, a2);
      goto LABEL_45;
    }
    v36 = 0.0;
    v35 = 0.0;
    v39 = v22 / (float)v13;
    v40 = 1.0;
    if (v24 > 1.0)
    {
LABEL_23:
      v41 = (float)(log10f(v24) * 20.0) + -90.309;
      v42 = (float)v28;
      v43 = sqrtf(v39);
      if (v43 > v40)
        goto LABEL_30;
    }
    else
    {
LABEL_29:
      v41 = -90.309;
      v42 = (float)v28;
      v43 = sqrtf(v39);
      if (v43 > v40)
      {
LABEL_30:
        v44 = (float)(log10f(v43) * 20.0) + -90.309;
        v45 = v35 / v42;
        if (v36 > v40)
        {
LABEL_31:
          v46 = (float)(log10f(v36) * 20.0) + -90.309;
          v47 = v41 - v44;
          v48 = sqrtf(v45);
          if (v48 > v40)
          {
LABEL_32:
            if (v47 >= (float)((float)(v46 - (float)((float)(log10f(v48) * 20.0) + -90.309)) - *((float *)this + 12)))
              goto LABEL_41;
            goto LABEL_33;
          }
LABEL_26:
          if (v47 >= (float)((float)(v46 - -90.309) - *((float *)this + 12)))
            goto LABEL_41;
LABEL_33:
          if (a3 - a4 >= v15)
            v49 = v15;
          else
            v49 = a3 - a4;
          if (a3 - a4 <= v10)
            v50 = v10;
          else
            v50 = v49;
          v51 = a3 - v50;
          if (v51 >= 1)
          {
            v52 = v51 & 0x7FFFFF00;
            v53 = v51;
            v54 = 0x100000000;
            return (_QWORD *)(v54 | v52 | v53);
          }
LABEL_41:
          v54 = 0;
          v53 = 0;
          v52 = 0;
          return (_QWORD *)(v54 | v52 | v53);
        }
LABEL_25:
        v46 = -90.309;
        v47 = v41 - v44;
        v48 = sqrtf(v45);
        if (v48 > v40)
          goto LABEL_32;
        goto LABEL_26;
      }
    }
    v44 = -90.309;
    v45 = v35 / v42;
    if (v36 > v40)
      goto LABEL_31;
    goto LABEL_25;
  }
LABEL_45:
  v56 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/agc2/clipping_predictor.cc", 140, "channel < ch_buffers_.size()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a2);
  return std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(v56, v57);
}

_QWORD *std::vector<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>::__push_back_slow_path<std::unique_ptr<webrtc::ClippingPredictorLevelBuffer>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v2 = a1[1] - *a1;
  v3 = v2 >> 3;
  v4 = (v2 >> 3) + 1;
  if (v4 >> 61)
    abort();
  v6 = a1[2] - *a1;
  if (v6 >> 2 > v4)
    v4 = v6 >> 2;
  v18 = (unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8;
  v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v18)
    v7 = v4;
  if (!v7)
  {
    __break(1u);
LABEL_31:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v7 >> 61)
    goto LABEL_31;
  v9 = 8 * v7;
  v10 = (char *)operator new(8 * v7);
  v11 = &v10[v9];
  v12 = &v10[8 * v3];
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)v12 = v13;
  v14 = v12 + 8;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == (char *)*a1)
  {
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
  }
  else
  {
    v17 = (unint64_t)&v16[-*a1 - 8];
    if (v17 < 0x78)
      goto LABEL_34;
    v18 = &v16[-(v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v12 || &v10[v2 - (v17 & 0xFFFFFFFFFFFFFFF8) - 8] >= v16;
    if (!v18)
      goto LABEL_34;
    v19 = (v17 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v21 = &v16[-v20];
    v12 -= v20;
    v22 = &v10[8 * v3 - 16];
    v23 = v16 - 16;
    v24 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v23 - 1) = 0uLL;
      *(_OWORD *)v23 = 0uLL;
      *((_OWORD *)v22 - 1) = v26;
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 4;
    }
    while (v24);
    v16 = v21;
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v27 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v12 - 1) = v27;
        v12 -= 8;
      }
      while (v16 != v15);
    }
    v16 = (char *)*a1;
    v28 = (char *)a1[1];
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v11;
    while (v28 != v16)
    {
      v30 = *((_QWORD *)v28 - 1);
      v28 -= 8;
      v29 = v30;
      *(_QWORD *)v28 = 0;
      if (v30)
      {
        v31 = *(void **)(v29 + 8);
        if (v31)
        {
          *(_QWORD *)(v29 + 16) = v31;
          operator delete(v31);
        }
        MEMORY[0x20BD0ADEC](v29, 0x1020C405E66F15BLL);
      }
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void webrtc::`anonymous namespace'::ClippingPeakPredictor::~ClippingPeakPredictor(webrtc::_anonymous_namespace_::ClippingPeakPredictor *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24C0B13B0;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 16) = v7;
            operator delete(v7);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1020C405E66F15BLL);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_24C0B13B0;
  v2 = (_QWORD *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
        {
          v7 = *(void **)(v5 + 8);
          if (v7)
          {
            *(_QWORD *)(v5 + 16) = v7;
            operator delete(v7);
          }
          MEMORY[0x20BD0ADEC](v5, 0x1020C405E66F15BLL);
        }
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::`anonymous namespace'::ClippingPeakPredictor::Reset(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16) - v1;
  if ((int)((unint64_t)v2 >> 3) >= 1)
  {
    v3 = ((unint64_t)v2 >> 3);
    v4 = v2 >> 3;
    if (v4 >= v3 - 1)
      v5 = v3 - 1;
    else
      v5 = v4;
    v6 = v5 + 1;
    if (v5 + 1 > 2)
    {
      v8 = 2;
      if ((v6 & 1) != 0)
        v8 = v6 & 1;
      v7 = v6 - v8;
      v9 = (_QWORD **)(v1 + 8);
      v10 = ~v5 + v8;
      do
      {
        v11 = *v9;
        **(v9 - 1) = 0xFFFFFFFFLL;
        *v11 = 0xFFFFFFFFLL;
        v9 += 2;
        v10 += 2;
      }
      while (v10);
    }
    else
    {
      v7 = 0;
    }
    v12 = v4 - v7;
    v13 = (_QWORD **)(v1 + 8 * v7);
    v14 = v7 - v3;
    while (v12)
    {
      v15 = *v13++;
      *v15 = 0xFFFFFFFFLL;
      --v12;
      if (__CFADD__(v14++, 1))
        return this;
    }
    __break(1u);
  }
  return this;
}

unint64_t webrtc::`anonymous namespace'::ClippingPeakPredictor::Analyze(unint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  int **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float *v22;
  float v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *((unsigned int *)a2 + 2);
  if ((int)v2 >= 1)
  {
    v3 = *((int *)a2 + 3);
    v4 = (float)(int)v3;
    v5 = *(int ***)(result + 8);
    v6 = (uint64_t)(*(_QWORD *)(result + 16) - (_QWORD)v5) >> 3;
    if ((_DWORD)v3)
    {
      v7 = 0;
      v8 = *a2;
      v9 = 4 * v3;
      while (1)
      {
        v10 = *(float **)(v8 + 8 * v7);
        v11 = 0.0;
        v12 = v9;
        v13 = 0.0;
        do
        {
          v14 = *v10++;
          v11 = v11 + (float)(v14 * v14);
          v15 = fabsf(v14);
          if (v15 >= v13)
            v13 = v15;
          v12 -= 4;
        }
        while (v12);
        if (v7 == v6)
          goto LABEL_27;
        v16 = v5[v7];
        v17 = *v16 + 1;
        *v16 = v17;
        v18 = *((_QWORD *)v16 + 1);
        v19 = *((_QWORD *)v16 + 2) - v18;
        result = (unint64_t)v19 >> 3;
        if (v17 == ((unint64_t)v19 >> 3))
        {
          v17 = 0;
          *v16 = 0;
          v20 = v16[1];
          if (v20 < (int)result)
          {
LABEL_14:
            result = (v20 + 1);
            v16[1] = result;
            v21 = v17;
            if (v17 >= (unint64_t)(v19 >> 3))
              goto LABEL_27;
            goto LABEL_15;
          }
        }
        else
        {
          v20 = v16[1];
          if (v20 < (int)result)
            goto LABEL_14;
        }
        v21 = v17;
        if (v17 >= (unint64_t)(v19 >> 3))
          goto LABEL_27;
LABEL_15:
        v22 = (float *)(v18 + 8 * v21);
        *v22 = v11 / v4;
        v22[1] = v13;
        if (++v7 == v2)
          return result;
      }
    }
    v23 = 0.0 / v4;
    do
    {
      if (!v6)
      {
LABEL_27:
        __break(1u);
        return result;
      }
      v24 = *v5;
      v25 = **v5 + 1;
      *v24 = v25;
      v26 = *((_QWORD *)v24 + 1);
      v27 = *((_QWORD *)v24 + 2) - v26;
      v28 = (unint64_t)v27 >> 3;
      if (v25 == ((unint64_t)v27 >> 3))
      {
        v25 = 0;
        *v24 = 0;
        v29 = v24[1];
        if (v29 >= (int)v28)
        {
LABEL_21:
          v30 = v25;
          if (v25 >= (unint64_t)(v27 >> 3))
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      else
      {
        v29 = v24[1];
        if (v29 >= (int)v28)
          goto LABEL_21;
      }
      v24[1] = v29 + 1;
      v30 = v25;
      if (v25 >= (unint64_t)(v27 >> 3))
        goto LABEL_27;
LABEL_25:
      v31 = v26 + 8 * v30;
      *(float *)v31 = v23;
      *(_DWORD *)(v31 + 4) = 0;
      --v6;
      ++v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::ClippingPeakPredictor::EstimateClippedLevelStep(uint64_t this, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  float v22;
  float v23;
  unint64_t v24;
  float *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float v33;
  int v34;
  float v35;
  unint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  int v56;
  unsigned int v57;
  int v58;
  uint64_t v59;

  if (a3 <= a5)
    goto LABEL_48;
  v6 = this;
  v7 = *(_QWORD *)(this + 8);
  if (a2 < (unint64_t)((*(_QWORD *)(this + 16) - v7) >> 3))
  {
    v8 = *(_QWORD *)(v7 + 8 * a2);
    v10 = *(_DWORD *)(this + 36);
    v9 = *(_DWORD *)(this + 40);
    v11 = *(_DWORD *)(v8 + 4);
    if (v10 + v9 > v11)
      goto LABEL_48;
    if (v10 >= v11)
      v16 = *(_DWORD *)(v8 + 4);
    else
      v16 = *(_DWORD *)(this + 36);
    if (v16 >= 1)
    {
      v17 = *(_QWORD *)(v8 + 8);
      v18 = *(_QWORD *)(v8 + 16) - v17;
      v19 = v18 >> 3;
      v20 = (unint64_t)v18 >> 3;
      v21 = *(_DWORD *)v8 - v9;
      v22 = 0.0;
      v23 = 0.0;
      while (1)
      {
        v24 = (int)((v20 & (v21 >> 31)) + v21);
        if (v19 <= v24)
          goto LABEL_50;
        v25 = (float *)(v17 + 8 * v24);
        v22 = v22 + *v25;
        v23 = fmaxf(v25[1], v23);
        --v21;
        if (!--v16)
        {
          v26 = *(_DWORD *)(this + 32);
          if (v26 <= v11)
            goto LABEL_14;
          goto LABEL_48;
        }
      }
    }
    v23 = 0.0;
    v22 = 0.0;
    v26 = *(_DWORD *)(this + 32);
    if (v26 > v11)
      goto LABEL_48;
LABEL_14:
    if (v26 >= 1)
    {
      v27 = *(_DWORD *)v8;
      v29 = v8 + 8;
      v28 = *(_QWORD *)(v8 + 8);
      v30 = *(_QWORD *)(v29 + 8) - v28;
      v31 = v30 >> 3;
      v32 = (unint64_t)v30 >> 3;
      v33 = 0.0;
      v34 = v26;
      v35 = 0.0;
      while (1)
      {
        v36 = (int)((v32 & (v27 >> 31)) + v27);
        if (v31 <= v36)
          goto LABEL_50;
        v37 = (float *)(v28 + 8 * v36);
        v33 = v33 + *v37;
        v35 = fmaxf(v37[1], v35);
        --v27;
        if (!--v34)
        {
          if (v35 <= 1.0)
            goto LABEL_22;
          goto LABEL_19;
        }
      }
    }
    v35 = 0.0;
    v33 = 0.0;
    if (0.0 > 1.0)
    {
LABEL_19:
      v38 = log10f(v35);
      v39 = (float)*(int *)(v6 + 44);
      if ((float)((float)(v38 * 20.0) + -90.309) <= v39)
        goto LABEL_48;
    }
    else
    {
LABEL_22:
      v39 = (float)*(int *)(this + 44);
      if (v39 >= -90.309)
        goto LABEL_48;
    }
    v40 = (float)v26;
    v41 = v22 / (float)v10;
    if (v23 <= 1.0)
    {
      v42 = -90.309;
      v43 = v33 / v40;
      v44 = sqrtf(v41);
      if (v44 <= 1.0)
      {
LABEL_25:
        v45 = v42 - -90.309;
        v46 = sqrtf(v43);
        if (v46 <= 1.0)
          goto LABEL_26;
        goto LABEL_30;
      }
    }
    else
    {
      v42 = (float)(log10f(v23) * 20.0) + -90.309;
      v43 = v33 / v40;
      v44 = sqrtf(v41);
      if (v44 <= 1.0)
        goto LABEL_25;
    }
    v45 = v42 - (float)((float)(log10f(v44) * 20.0) + -90.309);
    v46 = sqrtf(v43);
    if (v46 <= 1.0)
    {
LABEL_26:
      v47 = v45 + -90.309;
      if ((float)(v45 + -90.309) <= v39)
        goto LABEL_48;
LABEL_31:
      if (*(_BYTE *)(v6 + 48))
      {
        v48 = vcvtps_s32_f32(v47);
        v49 = -v48 & ((signed int)-v48 >> 31);
        if (v49 <= -15)
          v49 = -15;
        v50 = a3;
        if (v49)
        {
          v51 = a3;
          v50 = a3 + 1;
          do
          {
            --v50;
            if (v51 <= a5)
              break;
            v52 = webrtc::kGainMap[v51--] - webrtc::kGainMap[a3];
          }
          while (v52 > v49);
        }
        if (a3 - v50 > a4)
          a4 = a3 - v50;
      }
      if (a3 - a4 >= a6)
        v53 = a6;
      else
        v53 = a3 - a4;
      if (a3 - a4 <= a5)
        v54 = a5;
      else
        v54 = v53;
      v55 = __OFSUB__(a3, v54);
      v56 = a3 - v54;
      if (!((v56 < 0) ^ v55 | (v56 == 0)))
      {
        v57 = v56 & 0xFFFFFF00;
        v58 = v56;
        v59 = 0x100000000;
        return v59 | v57 | v58;
      }
LABEL_48:
      v59 = 0;
      v58 = 0;
      v57 = 0;
      return v59 | v57 | v58;
    }
LABEL_30:
    v47 = v45 + (float)((float)(log10f(v46) * 20.0) + -90.309);
    if (v47 <= v39)
      goto LABEL_48;
    goto LABEL_31;
  }
LABEL_50:
  __break(1u);
  return this;
}

void webrtc::RealTimeClock::~RealTimeClock(webrtc::RealTimeClock *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RealTimeClock::CurrentTime(webrtc::RealTimeClock *this)
{
  uint64_t v1;

  if (rtc::g_clock)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v1 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  return v1 / 1000;
}

uint64_t webrtc::RealTimeClock::ConvertTimestampToNtpTime(webrtc::RealTimeClock *this, Timestamp a2)
{
  unsigned __int8 v2;
  int64_t var0;
  rtc *v5;
  rtc *v6;

  v2 = atomic_load((unsigned __int8 *)&qword_253EA5578);
  if ((v2 & 1) == 0)
  {
    var0 = a2.var0;
    v5 = (rtc *)__cxa_guard_acquire(&qword_253EA5578);
    a2.var0 = var0;
    if ((_DWORD)v5)
    {
      v6 = (rtc *)rtc::TimeMicros(v5);
      _MergedGlobals_7 = rtc::TimeUTCMicros(v6) - (_QWORD)v6 + 2208988800000000;
      __cxa_guard_release(&qword_253EA5578);
      a2.var0 = var0;
    }
  }
  return ((_MergedGlobals_7 + a2.var0) / 1000000) << 32;
}

float webrtc::CoarseFilterUpdateGain::Compute(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, unint64_t a5, char a6, float32x4_t *a7)
{
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  float result;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  float v43;
  float *v44;
  float32x4_t v45[2];
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int v60;

  v7 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_DWORD *)(a1 + 72);
  v9 = __OFSUB__(v8, 1);
  v10 = v8 - 1;
  if (v10 < 0 == v9)
  {
    *(_DWORD *)(a1 + 72) = v10;
    if (v10)
    {
      *(float32x2_t *)(a1 + 8) = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(a1 + 24), 1.0 - (float)(*(float *)(a1 + 52) * (float)v10)), *(float32x2_t *)(a1 + 40), *(float *)(a1 + 52) * (float)v10);
    }
    else
    {
      v11 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v11;
    }
  }
  v12 = 1;
  do
  {
    v13 = a3[v12];
    if (v13 > 0xA)
      break;
  }
  while (v12++ != 63);
  if (v13 <= 0xA)
  {
    v15 = *(_QWORD *)(a1 + 56) + 1;
    *(_QWORD *)(a1 + 56) = v15;
    if (v15 < a5)
    {
LABEL_19:
      bzero(a7, 0x208uLL);
      return result;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 1;
    if (a5 > 1)
      goto LABEL_19;
  }
  if ((a6 & 1) != 0 || v7 <= a5)
    goto LABEL_19;
  v16 = 0;
  v17 = *(float *)(a1 + 12);
  do
  {
    v18 = *(float *)(a2 + v16 * 4);
    v19 = 0.0;
    if (v18 > v17)
      v19 = *(float *)(a1 + 8) / v18;
    v45[0].f32[v16++] = v19;
  }
  while (v16 != 65);
  if (a3[1] > 5uLL)
    v45[0].i64[0] = 0;
  v21 = 0;
  v22 = a3 + 2;
  do
  {
    v23 = *v22++;
    if (v23 >= 6)
    {
      v24 = (char *)v45 + v21;
      *((_DWORD *)v24 + 4) = 0;
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
    }
    v21 += 4;
  }
  while (v21 != 244);
  if (a3[63] > 5uLL)
  {
    v59.i32[3] = 0;
    v60 = 0;
  }
  if (a4 + 520 <= (unint64_t)a7 || (unint64_t)&a7[32].u64[1] <= a4)
  {
    v26 = v45[0];
    v27 = v45[1];
    *a7 = vmulq_f32(v45[0], *(float32x4_t *)a4);
    *(float32x4_t *)((char *)a7 + 260) = vmulq_f32(v26, *(float32x4_t *)(a4 + 260));
    a7[1] = vmulq_f32(v27, *(float32x4_t *)(a4 + 16));
    *(float32x4_t *)((char *)a7 + 276) = vmulq_f32(v27, *(float32x4_t *)(a4 + 276));
    v28 = v46;
    v29 = v47;
    a7[2] = vmulq_f32(v46, *(float32x4_t *)(a4 + 32));
    *(float32x4_t *)((char *)a7 + 292) = vmulq_f32(v28, *(float32x4_t *)(a4 + 292));
    a7[3] = vmulq_f32(v29, *(float32x4_t *)(a4 + 48));
    *(float32x4_t *)((char *)a7 + 308) = vmulq_f32(v29, *(float32x4_t *)(a4 + 308));
    v30 = v48;
    v31 = v49;
    a7[4] = vmulq_f32(v48, *(float32x4_t *)(a4 + 64));
    *(float32x4_t *)((char *)a7 + 324) = vmulq_f32(v30, *(float32x4_t *)(a4 + 324));
    a7[5] = vmulq_f32(v31, *(float32x4_t *)(a4 + 80));
    *(float32x4_t *)((char *)a7 + 340) = vmulq_f32(v31, *(float32x4_t *)(a4 + 340));
    v32 = v50;
    v33 = v51;
    a7[6] = vmulq_f32(v50, *(float32x4_t *)(a4 + 96));
    *(float32x4_t *)((char *)a7 + 356) = vmulq_f32(v32, *(float32x4_t *)(a4 + 356));
    a7[7] = vmulq_f32(v33, *(float32x4_t *)(a4 + 112));
    *(float32x4_t *)((char *)a7 + 372) = vmulq_f32(v33, *(float32x4_t *)(a4 + 372));
    v34 = v52;
    v35 = v53;
    a7[8] = vmulq_f32(v52, *(float32x4_t *)(a4 + 128));
    *(float32x4_t *)((char *)a7 + 388) = vmulq_f32(v34, *(float32x4_t *)(a4 + 388));
    a7[9] = vmulq_f32(v35, *(float32x4_t *)(a4 + 144));
    *(float32x4_t *)((char *)a7 + 404) = vmulq_f32(v35, *(float32x4_t *)(a4 + 404));
    v36 = v54;
    v37 = v55;
    a7[10] = vmulq_f32(v54, *(float32x4_t *)(a4 + 160));
    *(float32x4_t *)((char *)a7 + 420) = vmulq_f32(v36, *(float32x4_t *)(a4 + 420));
    a7[11] = vmulq_f32(v37, *(float32x4_t *)(a4 + 176));
    *(float32x4_t *)((char *)a7 + 436) = vmulq_f32(v37, *(float32x4_t *)(a4 + 436));
    v38 = v56;
    v39 = v57;
    a7[12] = vmulq_f32(v56, *(float32x4_t *)(a4 + 192));
    *(float32x4_t *)((char *)a7 + 452) = vmulq_f32(v38, *(float32x4_t *)(a4 + 452));
    a7[13] = vmulq_f32(v39, *(float32x4_t *)(a4 + 208));
    *(float32x4_t *)((char *)a7 + 468) = vmulq_f32(v39, *(float32x4_t *)(a4 + 468));
    v40 = v58;
    v41 = v59;
    a7[14] = vmulq_f32(v58, *(float32x4_t *)(a4 + 224));
    *(float32x4_t *)((char *)a7 + 484) = vmulq_f32(v40, *(float32x4_t *)(a4 + 484));
    a7[15] = vmulq_f32(v41, *(float32x4_t *)(a4 + 240));
    *(float32x4_t *)((char *)a7 + 500) = vmulq_f32(v41, *(float32x4_t *)(a4 + 500));
    v25 = 64;
  }
  else
  {
    v25 = 0;
  }
  v42 = v25;
  do
  {
    v43 = v45[0].f32[v42];
    v44 = &a7->f32[v42];
    *v44 = v43 * *(float *)(a4 + v42 * 4);
    result = v43 * *(float *)(a4 + v42 * 4 + 260);
    v44[65] = result;
    ++v42;
  }
  while (v42 != 65);
  return result;
}

void InitCocoaMultiThreading(void)
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_253EA5588);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_253EA5588))
  {
    _MergedGlobals_8 = objc_msgSend(MEMORY[0x24BDD17F0], "isMultiThreaded");
    __cxa_guard_release(&qword_253EA5588);
  }
  if (!_MergedGlobals_8)
  {
    objc_msgSend(MEMORY[0x24BDD17F0], "detachNewThreadSelector:toTarget:withObject:", sel_class, objc_opt_class(), 0);
    _MergedGlobals_8 = 1;
  }
}

void sub_208564DEC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_253EA5588);
  _Unwind_Resume(a1);
}

uint64_t cricket::FeedbackParam::operator==(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if ((char)a2[23] < 0)
  {
    v2 = *((_QWORD *)a2 + 1);
    if (v2 < 0)
      goto LABEL_45;
    v3 = *(unsigned __int8 **)a2;
    if (v2 && v3 == 0)
      goto LABEL_45;
  }
  else
  {
    v2 = a2[23];
    v3 = a2;
  }
  if (*(char *)(result + 23) < 0)
  {
    v5 = *(_QWORD *)(result + 8);
    if (v5 < 0)
      goto LABEL_45;
    v6 = *(unsigned __int8 **)result;
    if (v5)
    {
      if (!v6)
        goto LABEL_45;
    }
  }
  else
  {
    v5 = *(unsigned __int8 *)(result + 23);
    v6 = (unsigned __int8 *)result;
  }
  if (v2 != v5)
    return 0;
  if (v2)
  {
    do
    {
      v10 = *v3++;
      v9 = v10;
      v12 = *v6++;
      v11 = v12;
      if (v9 != v12)
      {
        if ((v9 - 65) < 0x1A)
          LOBYTE(v9) = v9 + 32;
        if ((v11 - 65) < 0x1A)
          LOBYTE(v11) = v11 + 32;
        if (v9 != v11)
          return 0;
      }
    }
    while (--v2);
  }
  v7 = a2 + 24;
  if ((char)a2[47] < 0)
  {
    v8 = *((_QWORD *)a2 + 4);
    if (v8 < 0)
      goto LABEL_45;
    v7 = (_QWORD *)*v7;
    if (v8)
    {
      if (!v7)
        goto LABEL_45;
    }
  }
  else
  {
    v8 = a2[47];
  }
  v13 = (_QWORD *)(result + 24);
  if ((*(char *)(result + 47) & 0x80000000) == 0)
  {
    v14 = *(unsigned __int8 *)(result + 47);
    goto LABEL_33;
  }
  v14 = *(_QWORD *)(result + 32);
  if (v14 < 0 || (v13 = (_QWORD *)*v13, v14) && !v13)
  {
LABEL_45:
    __break(1u);
    return result;
  }
LABEL_33:
  if (v8 != v14)
    return 0;
  if (!v8)
    return 1;
  while (1)
  {
    v16 = *(unsigned __int8 *)v7;
    v7 = (_QWORD *)((char *)v7 + 1);
    v15 = v16;
    v18 = *(unsigned __int8 *)v13;
    v13 = (_QWORD *)((char *)v13 + 1);
    v17 = v18;
    if (v15 != v18)
    {
      if ((v15 - 65) < 0x1A)
        LOBYTE(v15) = v15 + 32;
      if ((v17 - 65) < 0x1A)
        LOBYTE(v17) = v17 + 32;
      if (v15 != v17)
        break;
    }
    if (!--v8)
      return 1;
  }
  return 0;
}

uint64_t cricket::FeedbackParams::Add(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return this;
  v4 = this;
  v5 = *(_QWORD *)this;
  v6 = *(_QWORD *)(this + 8);
  if (*(_QWORD *)this != v6)
  {
    while (1)
    {
      this = cricket::FeedbackParam::operator==(v5, (unsigned __int8 *)a2);
      if ((this & 1) != 0)
        break;
      v5 += 48;
      if (v5 == v6)
      {
        v5 = v6;
        break;
      }
    }
  }
  if (v5 != v6)
    return this;
  v7 = *(_QWORD *)(v4 + 8);
  if (v7 >= *(_QWORD *)(v4 + 16))
  {
    *(_QWORD *)(v4 + 8) = std::vector<cricket::FeedbackParam>::__push_back_slow_path<cricket::FeedbackParam const&>((void **)v4, a2);
    this = cricket::FeedbackParams::HasDuplicateEntries(v4);
    if (!(_DWORD)this)
      return this;
    goto LABEL_19;
  }
  if (!v7)
  {
LABEL_20:
    __break(1u);
    return this;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)v7 = v8;
    v9 = (std::string *)(v7 + 24);
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
  std::string::__init_copy_ctor_external(*(std::string **)(v4 + 8), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v9 = (std::string *)(v7 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
LABEL_18:
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
    *(_QWORD *)(v4 + 8) = v7 + 48;
    this = cricket::FeedbackParams::HasDuplicateEntries(v4);
    if (!(_DWORD)this)
      return this;
LABEL_19:
    this = (uint64_t)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/codec.cc", 149, "!HasDuplicateEntries()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v11, v12, v13, v14, v15);
    goto LABEL_20;
  }
LABEL_13:
  v10 = *(_OWORD *)(a2 + 24);
  v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  *(_QWORD *)(v4 + 8) = v7 + 48;
  this = cricket::FeedbackParams::HasDuplicateEntries(v4);
  if ((_DWORD)this)
    goto LABEL_19;
  return this;
}

uint64_t cricket::FeedbackParams::HasDuplicateEntries(uint64_t this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;

  v2 = *(unsigned __int8 **)this;
  v1 = *(unsigned __int8 **)(this + 8);
  if (*(unsigned __int8 **)this == v1)
    return 0;
  while (2)
  {
    v3 = v2 + 48;
    if (v2 + 48 == v1)
      return 0;
    v4 = v2 + 48;
    do
    {
      v5 = v2;
      v6 = v2[23];
      if ((v2[23] & 0x80) != 0)
      {
        v6 = *((_QWORD *)v2 + 1);
        if (v6 < 0 || ((v5 = *(unsigned __int8 **)v2, v6) ? (v7 = v5 == 0) : (v7 = 0), v7))
        {
LABEL_51:
          __break(1u);
          return this;
        }
      }
      if ((char)v4[23] < 0)
      {
        v8 = *((_QWORD *)v4 + 1);
        if (v8 < 0)
          goto LABEL_51;
        v9 = *(unsigned __int8 **)v4;
        if (v8)
        {
          if (!v9)
            goto LABEL_51;
        }
      }
      else
      {
        v8 = v4[23];
        v9 = v4;
      }
      if (v6 == v8)
      {
        if (v6)
        {
          while (1)
          {
            v12 = *v5++;
            this = v12;
            v14 = *v9++;
            v13 = v14;
            if ((_DWORD)this != v14)
            {
              if ((this - 65) < 0x1A)
                LOBYTE(this) = this + 32;
              this = this;
              if ((v13 - 65) < 0x1A)
                LOBYTE(v13) = v13 + 32;
              if (this != v13)
                break;
            }
            if (!--v6)
              goto LABEL_18;
          }
        }
        else
        {
LABEL_18:
          if ((char)v2[47] < 0)
          {
            v10 = *((_QWORD *)v2 + 4);
            if (v10 < 0)
              goto LABEL_51;
            v11 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
            if (v10)
            {
              if (!v11)
                goto LABEL_51;
            }
          }
          else
          {
            v10 = v2[47];
            v11 = v2 + 24;
          }
          v15 = v4 + 24;
          if ((char)v4[47] < 0)
          {
            v16 = *((_QWORD *)v4 + 4);
            if (v16 < 0)
              goto LABEL_51;
            v15 = (_QWORD *)*v15;
            if (v16)
            {
              if (!v15)
                goto LABEL_51;
            }
          }
          else
          {
            v16 = v4[47];
          }
          if (v10 == v16)
          {
            if (!v10)
              return 1;
            while (1)
            {
              v17 = *v11++;
              LODWORD(this) = v17;
              v19 = *(unsigned __int8 *)v15;
              v15 = (_QWORD *)((char *)v15 + 1);
              v18 = v19;
              if ((_DWORD)this != v19)
              {
                if ((this - 65) < 0x1A)
                  LOBYTE(this) = this + 32;
                this = this;
                if ((v18 - 65) < 0x1A)
                  LOBYTE(v18) = v18 + 32;
                if (this != v18)
                  break;
              }
              if (!--v10)
                return 1;
            }
          }
        }
      }
      v4 += 48;
    }
    while (v4 != v1);
    this = 0;
    v2 += 48;
    if (v3 != v1)
      continue;
    return this;
  }
}

void cricket::FeedbackParams::Intersect(unsigned __int8 **this, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void **v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;

  v2 = *this;
  v3 = this[1];
  if (*this == v3)
    return;
  while (2)
  {
    while (2)
    {
      v6 = *a2;
      v11 = a2[1];
      if (*a2 != v11)
      {
        do
        {
          v12 = v2;
          v13 = v2[23];
          if ((v2[23] & 0x80) != 0)
          {
            v13 = *((_QWORD *)v2 + 1);
            if (v13 < 0)
              goto LABEL_71;
            v12 = *(unsigned __int8 **)v2;
            if (v13 && v12 == 0)
              goto LABEL_71;
          }
          if ((char)v6[23] < 0)
          {
            v15 = *((_QWORD *)v6 + 1);
            if (v15 < 0)
              goto LABEL_71;
            v16 = *(unsigned __int8 **)v6;
            if (v15)
            {
              if (!v16)
                goto LABEL_71;
            }
          }
          else
          {
            v15 = v6[23];
            v16 = v6;
          }
          if (v13 == v15)
          {
            if (v13)
            {
              while (1)
              {
                v20 = *v12++;
                v19 = v20;
                v22 = *v16++;
                v21 = v22;
                if (v19 != v22)
                {
                  if ((v19 - 65) < 0x1A)
                    LOBYTE(v19) = v19 + 32;
                  if ((v21 - 65) < 0x1A)
                    LOBYTE(v21) = v21 + 32;
                  if (v19 != v21)
                    break;
                }
                if (!--v13)
                  goto LABEL_41;
              }
            }
            else
            {
LABEL_41:
              if ((char)v2[47] < 0)
              {
                v17 = *((_QWORD *)v2 + 4);
                if (v17 < 0)
                  goto LABEL_71;
                v18 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
                if (v17)
                {
                  if (!v18)
                    goto LABEL_71;
                }
              }
              else
              {
                v17 = v2[47];
                v18 = v2 + 24;
              }
              v23 = v6 + 24;
              if ((char)v6[47] < 0)
              {
                v24 = *((_QWORD *)v6 + 4);
                if (v24 < 0)
                  goto LABEL_71;
                v23 = (_QWORD *)*v23;
                if (v24)
                {
                  if (!v23)
                    goto LABEL_71;
                }
              }
              else
              {
                v24 = v6[47];
              }
              if (v17 == v24)
              {
                if (!v17)
                  goto LABEL_4;
                while (1)
                {
                  v26 = *v18++;
                  v25 = v26;
                  v28 = *(unsigned __int8 *)v23;
                  v23 = (_QWORD *)((char *)v23 + 1);
                  v27 = v28;
                  if (v25 != v28)
                  {
                    if ((v25 - 65) < 0x1A)
                      LOBYTE(v25) = v25 + 32;
                    if ((v27 - 65) < 0x1A)
                      LOBYTE(v27) = v27 + 32;
                    if (v25 != v27)
                      break;
                  }
                  if (!--v17)
                    goto LABEL_4;
                }
              }
            }
          }
          v6 += 48;
        }
        while (v6 != v11);
        v6 = a2[1];
      }
LABEL_4:
      if (v6 != v11)
      {
        v2 += 48;
        if (v2 != v3)
          continue;
        return;
      }
      break;
    }
    if (v3 == v2)
    {
LABEL_71:
      __break(1u);
      return;
    }
    if (v2 + 48 == v3)
    {
      v8 = v2;
    }
    else
    {
      v7 = v2;
      do
      {
        if ((char)v7[23] < 0)
          operator delete(*(void **)v7);
        *(_OWORD *)v7 = *((_OWORD *)v7 + 3);
        *((_QWORD *)v7 + 2) = *((_QWORD *)v7 + 8);
        v7[71] = 0;
        v7[48] = 0;
        v10 = (void **)(v7 + 24);
        if ((char)v7[47] < 0)
          operator delete(*v10);
        *(_OWORD *)v10 = *(_OWORD *)(v7 + 72);
        *((_QWORD *)v7 + 5) = *((_QWORD *)v7 + 11);
        v7[95] = 0;
        v7[72] = 0;
        v8 = v7 + 48;
        v9 = v7 + 96;
        v7 += 48;
      }
      while (v9 != v3);
      v3 = this[1];
    }
    while (v3 != v8)
    {
      if ((char)*(v3 - 1) < 0)
      {
        operator delete(*((void **)v3 - 3));
        if (((char)*(v3 - 25) & 0x80000000) == 0)
          goto LABEL_17;
      }
      else if (((char)*(v3 - 25) & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*((void **)v3 - 6));
LABEL_17:
      v3 -= 48;
    }
    this[1] = v8;
    v3 = v8;
    if (v2 != v8)
      continue;
    break;
  }
}

unint64_t *absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  unint64_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  unint64_t v24;
  _BYTE *v25;
  char v26;
  size_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  _OWORD *v32;
  __int128 *v33;
  unint64_t v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char v43;

  v2 = result;
  if (result == a2)
    return v2;
  v3 = *a2;
  v6 = a2[1];
  v4 = (char *)(a2 + 1);
  v5 = (char *)v6;
  if ((v3 & 1) != 0)
    v7 = v5;
  else
    v7 = v4;
  v8 = v3 >> 1;
  v10 = (void **)(result + 1);
  v9 = *result;
  v11 = *result & 1;
  if ((*result & 1) == 0)
  {
    v12 = 34;
    v13 = result + 1;
    if (v8 <= 0x22)
      goto LABEL_7;
LABEL_23:
    if (2 * v12 <= v8)
      v27 = v3 >> 1;
    else
      v27 = 2 * v12;
    v28 = (char *)operator new(v27);
    v29 = v28;
    v30 = 0;
    if (v8 < 8)
      goto LABEL_34;
LABEL_31:
    if ((unint64_t)(v29 - v7) >= 0x20)
    {
      if (v8 >= 0x20)
      {
        v30 = v8 & 0xFFFFFFFFFFFFFFE0;
        v32 = v29 + 16;
        v33 = (__int128 *)(v7 + 16);
        v34 = v8 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v35 = *v33;
          *(v32 - 1) = *(v33 - 1);
          *v32 = v35;
          v32 += 2;
          v33 += 2;
          v34 -= 32;
        }
        while (v34);
        if (v8 == v30)
        {
LABEL_46:
          if (v28)
          {
            if (v11)
              operator delete(*v10);
            v2[1] = (unint64_t)v28;
            v2[2] = v27;
            v11 = 1;
          }
          goto LABEL_50;
        }
        if ((v8 & 0x18) == 0)
        {
          v31 = &v7[v30];
          goto LABEL_44;
        }
      }
      else
      {
        v30 = 0;
      }
      v36 = v30;
      v30 = v8 & 0xFFFFFFFFFFFFFFF8;
      v31 = &v7[v8 & 0xFFFFFFFFFFFFFFF8];
      v37 = &v29[v36];
      v38 = (uint64_t *)&v7[v36];
      v39 = v36 - (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v40 = *v38++;
        *(_QWORD *)v37 = v40;
        v37 += 8;
        v39 += 8;
      }
      while (v39);
      if (v8 == v30)
        goto LABEL_46;
LABEL_44:
      v41 = v8 - v30;
      v42 = &v29[v30];
      do
      {
        v43 = *v31++;
        *v42++ = v43;
        --v41;
      }
      while (v41);
      goto LABEL_46;
    }
LABEL_34:
    v31 = v7;
    goto LABEL_44;
  }
  v13 = (_QWORD *)result[1];
  v12 = result[2];
  if (v12 < v8)
    goto LABEL_23;
LABEL_7:
  v14 = v9 >> 1;
  v15 = v8 >= v9 >> 1;
  v16 = v8 - (v9 >> 1);
  if (!v15)
    v16 = 0;
  if (v14 >= v8)
    v17 = v3 >> 1;
  else
    v17 = v14;
  if (v17)
  {
    v18 = 0;
    if (v17 < 0x20)
      goto LABEL_18;
    if ((unint64_t)((char *)v13 - v7) < 0x20)
      goto LABEL_18;
    v18 = v17 & 0x7FFFFFFFFFFFFFE0;
    v19 = &v7[v17 & 0x7FFFFFFFFFFFFFE0];
    v20 = v13 + 2;
    v21 = (__int128 *)(v7 + 16);
    v22 = v17 & 0x7FFFFFFFFFFFFFE0;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 += 2;
      v21 += 2;
      v22 -= 32;
    }
    while (v22);
    v7 += v17 & 0x7FFFFFFFFFFFFFE0;
    if (v17 != v18)
    {
LABEL_18:
      v24 = v17 - v18;
      v25 = (char *)v13 + v18;
      v19 = v7;
      do
      {
        v26 = *v19++;
        *v25++ = v26;
        --v24;
      }
      while (v24);
    }
    if (v14 >= v8)
      goto LABEL_50;
  }
  else
  {
    v19 = v7;
    if (v14 >= v8)
    {
LABEL_50:
      *v2 = v11 | v3 & 0xFFFFFFFFFFFFFFFELL;
      return v2;
    }
  }
  if (v13)
  {
    v28 = 0;
    v27 = 0;
    v29 = (char *)v13 + v14;
    v8 = v16;
    v7 = v19;
    v30 = 0;
    if (v8 < 8)
      goto LABEL_34;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

cricket::Codec *cricket::Codec::Codec(cricket::Codec *this, const webrtc::SdpVideoFormat *a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)this = &off_24C0B1418;
  *((_QWORD *)this + 1) = 1;
  v4 = (std::string *)((char *)this + 16);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 5) = 90000;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  if ((char *)this + 168 != (char *)a2 + 24)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)this + 168, *((char **)a2 + 3), (char *)a2 + 32);
  absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=((unint64_t *)this + 11, (unint64_t *)a2 + 6);
  return this;
}

cricket::Codec *cricket::Codec::Codec(cricket::Codec *this, const cricket::Codec *a2)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  const cricket::Codec *v14;
  const cricket::Codec *v16;
  const cricket::Codec *v17;
  BOOL v18;

  *(_QWORD *)this = &off_24C0B1418;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  v4 = (std::string *)((char *)this + 16);
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 4);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(_OWORD *)((char *)a2 + 40);
  *((_BYTE *)this + 56) = 0;
  v7 = (std::string *)((char *)this + 56);
  *(_OWORD *)((char *)this + 40) = v6;
  *((_BYTE *)this + 80) = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
    }
    else
    {
      v8 = *(_OWORD *)((char *)a2 + 56);
      *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    }
    *((_BYTE *)this + 80) = 1;
  }
  *((_QWORD *)this + 11) = 0;
  v9 = *((_QWORD *)a2 + 11);
  if (v9 >= 2)
  {
    if ((v9 & 1) != 0)
    {
      absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom((unint64_t *)this + 11, (unint64_t *)a2 + 11);
      *((_BYTE *)this + 136) = 0;
      v12 = (std::string *)((char *)this + 136);
      *((_BYTE *)this + 160) = 0;
      if (!*((_BYTE *)a2 + 160))
        goto LABEL_19;
      goto LABEL_13;
    }
    *((_QWORD *)this + 11) = v9;
    v10 = *((_OWORD *)a2 + 6);
    v11 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *((_OWORD *)this + 6) = v10;
    *((_OWORD *)this + 7) = v11;
  }
  *((_BYTE *)this + 136) = 0;
  v12 = (std::string *)((char *)this + 136);
  *((_BYTE *)this + 160) = 0;
  if (!*((_BYTE *)a2 + 160))
    goto LABEL_19;
LABEL_13:
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 136);
    v12->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 19);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  *((_BYTE *)this + 160) = 1;
LABEL_19:
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  v14 = (const cricket::Codec *)*((_QWORD *)a2 + 21);
  if (v14 != (const cricket::Codec *)((char *)a2 + 176))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)this + 21, (uint64_t *)this + 22, (uint64_t)v14 + 32, (uint64_t)v14 + 32);
      v16 = (const cricket::Codec *)*((_QWORD *)v14 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(const cricket::Codec **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (const cricket::Codec *)*((_QWORD *)v14 + 2);
          v18 = *(_QWORD *)v17 == (_QWORD)v14;
          v14 = v17;
        }
        while (!v18);
      }
      v14 = v17;
    }
    while (v17 != (const cricket::Codec *)((char *)a2 + 176));
  }
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((_QWORD *)this + 24, *((_QWORD *)a2 + 24), *((_QWORD *)a2 + 25), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 4));
  return this;
}

void cricket::Codec::~Codec(cricket::Codec *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24C0B1418;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 25);
    v4 = (void *)*((_QWORD *)this + 24);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 25) = v2;
      operator delete(v4);
      goto LABEL_12;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if (*(char *)(v3 - 25) < 0)
LABEL_9:
          operator delete(*(void **)(v3 - 48));
      }
      else if (*(char *)(v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 48;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 24);
        goto LABEL_11;
      }
    }
  }
LABEL_12:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 168, *((_QWORD *)this + 22));
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
  {
    operator delete(*((void **)this + 17));
    if ((*((_BYTE *)this + 88) & 1) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if ((*((_BYTE *)this + 88) & 1) != 0)
LABEL_15:
    operator delete(*((void **)this + 12));
LABEL_16:
  if (!*((_BYTE *)this + 80) || (*((char *)this + 79) & 0x80000000) == 0)
  {
    if ((*((char *)this + 39) & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(*((void **)this + 2));
    return;
  }
  operator delete(*((void **)this + 7));
  if (*((char *)this + 39) < 0)
    goto LABEL_23;
}

{
  cricket::Codec::~Codec(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t cricket::Codec::operator=(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  char v5;
  __int128 v6;
  const std::string::value_type *v7;
  size_t v8;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  if (a1 != a2)
  {
    v4 = (std::string *)(a1 + 16);
    v5 = *(_BYTE *)(a2 + 39);
    if (*(char *)(a1 + 39) < 0)
    {
      if (v5 >= 0)
        v7 = (const std::string::value_type *)(a2 + 16);
      else
        v7 = *(const std::string::value_type **)(a2 + 16);
      if (v5 >= 0)
        v8 = *(unsigned __int8 *)(a2 + 39);
      else
        v8 = *(_QWORD *)(a2 + 24);
      std::string::__assign_no_alias<false>(v4, v7, v8);
    }
    else if ((*(_BYTE *)(a2 + 39) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v6;
    }
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 56), (std::string *)(a2 + 56));
  absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=((unint64_t *)(a1 + 88), (unint64_t *)(a2 + 88));
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 136), (std::string *)(a2 + 136));
  if (a1 != a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(a1 + 168, *(char **)(a2 + 168), (char *)(a2 + 176));
    std::vector<cricket::FeedbackParam>::__assign_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((uint64_t *)(a1 + 192), *(_QWORD *)(a2 + 192), *(_QWORD *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 4));
  }
  return a1;
}

{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  void **v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = a1 + 16;
  v5 = (__int128 *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 39) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v7 = (void **)(a1 + 56);
  v8 = (__int128 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 80) != *(unsigned __int8 *)(a2 + 80))
  {
    if (!*(_BYTE *)(a1 + 80))
    {
      v15 = *v8;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_OWORD *)v7 = v15;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)v8 = 0;
      *(_BYTE *)(a1 + 80) = 1;
      if (a1 == a2)
        goto LABEL_17;
      goto LABEL_14;
    }
    if (*(char *)(a1 + 79) < 0)
      operator delete(*v7);
    *(_BYTE *)(a1 + 80) = 0;
    goto LABEL_13;
  }
  if (!*(_BYTE *)(a1 + 80))
  {
LABEL_13:
    if (a1 == a2)
      goto LABEL_17;
    goto LABEL_14;
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v7);
  v9 = *v8;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v7 = v9;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  if (a1 != a2)
  {
LABEL_14:
    if ((*(_BYTE *)(a1 + 88) & 1) != 0)
      operator delete(*(void **)(a1 + 96));
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v10 = *(_OWORD *)(a2 + 96);
    v11 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 112) = v11;
    *(_QWORD *)(a2 + 88) = 0;
  }
LABEL_17:
  v12 = (void **)(a1 + 136);
  v13 = (__int128 *)(a2 + 136);
  if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    if (*(_BYTE *)(a1 + 160))
    {
      if (*(char *)(a1 + 159) < 0)
        operator delete(*v12);
      v14 = *v13;
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      *(_OWORD *)v12 = v14;
      *(_BYTE *)(a2 + 159) = 0;
      *(_BYTE *)(a2 + 136) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 160))
  {
    if (*(char *)(a1 + 159) < 0)
      operator delete(*v12);
    *(_BYTE *)(a1 + 160) = 0;
  }
  else
  {
    v16 = *v13;
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_OWORD *)v12 = v16;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    *(_QWORD *)v13 = 0;
    *(_BYTE *)(a1 + 160) = 1;
  }
  v17 = a1 + 176;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 168, *(_QWORD *)(a1 + 176));
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v18 = (_QWORD *)(a2 + 176);
  v19 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 176) = v19;
  v20 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 184) = v20;
  if (!v20)
  {
    *(_QWORD *)(a1 + 168) = v17;
    if (a1 == a2)
      return a1;
    goto LABEL_31;
  }
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(a2 + 168) = v18;
  *v18 = 0;
  *(_QWORD *)(a2 + 184) = 0;
  if (a1 != a2)
LABEL_31:
    std::vector<cricket::FeedbackParam>::__assign_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>((uint64_t *)(a1 + 192), *(_QWORD *)(a2 + 192), *(_QWORD *)(a2 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 4));
  return a1;
}

uint64_t cricket::Codec::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t result;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char v21;

  if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  if (*(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a2 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 24);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 16);
  v9 = v7 >= 0 ? (unsigned __int8 *)(a2 + 16) : *(unsigned __int8 **)(a2 + 16);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40) || *(_QWORD *)(a1 + 184) != *(_QWORD *)(a2 + 184))
    return 0;
  v11 = *(unsigned __int8 **)(a1 + 168);
  if (v11 != (unsigned __int8 *)(a1 + 176))
  {
    v12 = *(unsigned __int8 **)(a2 + 168);
    while ((std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v21, v11 + 32, v12 + 32) & 1) != 0)
    {
      v13 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      v14 = v11;
      if (v13)
      {
        do
        {
          v11 = v13;
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v11 = (unsigned __int8 *)*((_QWORD *)v14 + 2);
          v15 = *(_QWORD *)v11 == (_QWORD)v14;
          v14 = v11;
        }
        while (!v15);
      }
      v16 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (unsigned __int8 *)*((_QWORD *)v12 + 2);
          v15 = *(_QWORD *)v17 == (_QWORD)v12;
          v12 = v17;
        }
        while (!v15);
      }
      v12 = v17;
      if (v11 == (unsigned __int8 *)(a1 + 176))
        goto LABEL_37;
    }
    return 0;
  }
LABEL_37:
  v18 = *(_QWORD *)(a1 + 192);
  v19 = *(_QWORD *)(a1 + 200);
  v20 = *(unsigned __int8 **)(a2 + 192);
  if (v19 - v18 != *(_QWORD *)(a2 + 200) - (_QWORD)v20)
    return 0;
  if (v18 == v19)
  {
LABEL_41:
    if (*(_DWORD *)(a1 + 8))
      return std::operator==[abi:sn180100]<std::string,std::string>((unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a2 + 56));
    if (*(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44))
      return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48);
    return 0;
  }
  while (1)
  {
    result = cricket::FeedbackParam::operator==(v18, v20);
    if (!(_DWORD)result)
      return result;
    v18 += 48;
    v20 += 48;
    if (v18 == v19)
      goto LABEL_41;
  }
}

uint64_t cricket::Codec::Matches(cricket::Codec *this, const cricket::Codec *a2)
{
  uint64_t **v2;
  std::string::size_type v3;
  std::string *v4;
  const char *v5;
  int v6;
  int v7;
  _BOOL4 v9;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  int v47;
  char v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t **v59;
  uint64_t **v60;
  unsigned __int8 *v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  unsigned __int8 *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t **v71;
  uint64_t **v72;
  std::string::size_type size;
  std::string::size_type v74;
  std::string *v75;
  uint64_t v76;
  std::string *p_s2;
  int v78;
  int v79;
  int v80;
  int v81;
  char v82;
  _BOOL4 v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  char v89;
  std::string::size_type v90;
  std::string::size_type v91;
  int v92;
  std::string *v93;
  uint64_t v94;
  std::string *p_s1;
  int v96;
  int v97;
  int v98;
  int v99;
  char v100;
  std::string::size_type v101;
  std::string *v102;
  void *v103;
  char v104;
  std::string::size_type v105;
  std::string::size_type v106;
  int v107;
  std::string *v108;
  uint64_t v109;
  std::string *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  char v115;
  void *__p[2];
  char v117;
  char v118[24];
  std::string v119;
  std::string __s1;
  std::string v121;
  std::string __s2;

  v6 = *((_DWORD *)this + 3);
  v7 = *((_DWORD *)a2 + 3);
  v9 = (v7 - 35) < 0x1F || (v7 & 0xFFFFFFE0) == 96;
  if ((v6 & 0xFFFFFFE0) != 0x60 && (v6 - 35) > 0x1E || !v9)
  {
    if (v6 != v7)
      goto LABEL_52;
  }
  else
  {
    v12 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      v13 = *((_QWORD *)this + 3);
      if (v13 < 0)
        goto LABEL_287;
      v12 = (_QWORD *)*v12;
      if (v13)
      {
        if (!v12)
          goto LABEL_287;
      }
    }
    else
    {
      v13 = *((unsigned __int8 *)this + 39);
    }
    v14 = (_QWORD *)((char *)a2 + 16);
    if (*((char *)a2 + 39) < 0)
    {
      v15 = *((_QWORD *)a2 + 3);
      if (v15 < 0)
        goto LABEL_287;
      v14 = (_QWORD *)*v14;
      if (v15)
      {
        if (!v14)
          goto LABEL_287;
      }
    }
    else
    {
      v15 = *((unsigned __int8 *)a2 + 39);
    }
    if (v13 != v15)
      goto LABEL_52;
    if (v13)
    {
      do
      {
        v25 = *(unsigned __int8 *)v12;
        v12 = (_QWORD *)((char *)v12 + 1);
        v24 = v25;
        v27 = *(unsigned __int8 *)v14;
        v14 = (_QWORD *)((char *)v14 + 1);
        v26 = v27;
        if (v24 != v27)
        {
          if ((v24 - 65) < 0x1A)
            LOBYTE(v24) = v24 + 32;
          if ((v26 - 65) < 0x1A)
            LOBYTE(v26) = v26 + 32;
          if (v24 != v26)
            goto LABEL_52;
        }
      }
      while (--v13);
    }
  }
  v16 = *((_DWORD *)this + 2);
  if (v16 != 1)
  {
    if (v16)
      return v4 & 1;
    v17 = *((_DWORD *)a2 + 10);
    if (!v17 || *((_DWORD *)this + 10) == v17)
    {
      v18 = *((_DWORD *)a2 + 11);
      if (!v18 || (v19 = *((_DWORD *)this + 11), v19 < 1) || v19 == v18)
      {
        v20 = *((_QWORD *)a2 + 6);
        v21 = *((_QWORD *)this + 6);
        v22 = v20 >= 2 || v21 >= 2;
        LOBYTE(v4) = !v22 || v21 == v20;
        return v4 & 1;
      }
    }
LABEL_52:
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v118[23] = 4;
  if (v118 <= "H264" && &v118[4] > "H264")
    goto LABEL_287;
  v29 = (unsigned __int8 *)this + 16;
  strcpy(v118, "H264");
  v30 = *((unsigned __int8 *)this + 39);
  v31 = (unsigned __int8 *)this + 16;
  v32 = v30;
  if (*((char *)this + 39) < 0)
  {
    v32 = *((_QWORD *)this + 3);
    if (v32 < 0)
      goto LABEL_287;
    v31 = *(unsigned __int8 **)v29;
    if (v32)
    {
      if (!v31)
        goto LABEL_287;
    }
  }
  v3 = (std::string::size_type)this + 168;
  v2 = (uint64_t **)((char *)a2 + 168);
  if (v32 != 4)
    goto LABEL_97;
  v33 = *v31;
  if (v33 != 72)
  {
    if ((v33 - 65) < 0x1A)
      LOBYTE(v33) = v33 + 32;
    if (v33 != 104)
      goto LABEL_97;
  }
  v34 = v31[1];
  if (v34 != 50)
  {
    if ((v34 - 65) < 0x1A)
      LOBYTE(v34) = v34 + 32;
    if (v34 != 50)
      goto LABEL_97;
  }
  v35 = v31[2];
  if (v35 != 54)
  {
    if ((v35 - 65) < 0x1A)
      LOBYTE(v35) = v35 + 32;
    if (v35 != 54)
      goto LABEL_97;
  }
  v36 = v31[3];
  if (v36 != 52)
  {
    if ((v36 - 65) < 0x1A)
      LOBYTE(v36) = v36 + 32;
    if (v36 != 52)
    {
LABEL_97:
      v37 = (unsigned __int8 *)a2 + 16;
      v38 = *((unsigned __int8 *)a2 + 39);
      v39 = (unsigned __int8 *)a2 + 16;
      v40 = v38;
      if (*((char *)a2 + 39) < 0)
      {
        v40 = *((_QWORD *)a2 + 3);
        if (v40 < 0)
          goto LABEL_287;
        v39 = *(unsigned __int8 **)v37;
        if (v40)
        {
          if (!v39)
            goto LABEL_287;
        }
      }
      if (v40 != 4)
        goto LABEL_109;
      v41 = *v39;
      if (v41 != 72)
      {
        if ((v41 - 65) < 0x1A)
          LOBYTE(v41) = v41 + 32;
        if (v41 != 104)
          goto LABEL_109;
      }
      v42 = v39[1];
      if (v42 != 50)
      {
        if ((v42 - 65) < 0x1A)
          LOBYTE(v42) = v42 + 32;
        if (v42 != 50)
          goto LABEL_109;
      }
      v43 = v39[2];
      if (v43 != 54)
      {
        if ((v43 - 65) < 0x1A)
          LOBYTE(v43) = v43 + 32;
        if (v43 != 54)
          goto LABEL_109;
      }
      v44 = v39[3];
      if (v44 != 52)
      {
        if ((v44 - 65) < 0x1A)
          LOBYTE(v44) = v44 + 32;
        if (v44 != 52)
        {
LABEL_109:
          *((_BYTE *)&__s1.__r_.__value_.__s + 23) = 3;
          if (&__s1 <= (std::string *)&cricket::kVp9CodecName
            && (char *)__s1.__r_.__value_.__r.__words + 3 > (char *)&cricket::kVp9CodecName)
          {
            goto LABEL_287;
          }
          strcpy((char *)&__s1, "VP9");
          v49 = (unsigned __int8 *)this + 16;
          v50 = v30;
          if ((v30 & 0x80) != 0)
          {
            v50 = *((_QWORD *)this + 3);
            if (v50 < 0)
              goto LABEL_287;
            v49 = *(unsigned __int8 **)v29;
            if (v50)
            {
              if (!v49)
                goto LABEL_287;
            }
          }
          if (v50 == 3)
          {
            v51 = *v49;
            if (v51 == 86)
              goto LABEL_120;
            if ((v51 - 65) < 0x1A)
              LOBYTE(v51) = v51 + 32;
            if (v51 == 118)
            {
LABEL_120:
              v52 = v49[1];
              if (v52 == 80)
                goto LABEL_127;
              if ((v52 - 65) < 0x1A)
                LOBYTE(v52) = v52 + 32;
              if (v52 == 112)
              {
LABEL_127:
                v53 = v49[2];
                if (v53 == 57)
                  goto LABEL_145;
                if ((v53 - 65) < 0x1A)
                  LOBYTE(v53) = v53 + 32;
                if (v53 == 57)
                  goto LABEL_145;
              }
            }
          }
          v54 = (unsigned __int8 *)a2 + 16;
          v55 = v38;
          if ((v38 & 0x80) != 0)
          {
            v55 = *((_QWORD *)a2 + 3);
            if (v55 < 0)
              goto LABEL_287;
            v54 = *(unsigned __int8 **)v37;
            if (v55)
            {
              if (!v54)
                goto LABEL_287;
            }
          }
          if (v55 == 3)
          {
            v56 = *v54;
            if (v56 == 86)
              goto LABEL_137;
            if ((v56 - 65) < 0x1A)
              LOBYTE(v56) = v56 + 32;
            if (v56 == 118)
            {
LABEL_137:
              v57 = v54[1];
              if (v57 == 80)
                goto LABEL_144;
              if ((v57 - 65) < 0x1A)
                LOBYTE(v57) = v57 + 32;
              if (v57 == 112)
              {
LABEL_144:
                v58 = v54[2];
                if (v58 == 57)
                  goto LABEL_145;
                if ((v58 - 65) < 0x1A)
                  LOBYTE(v58) = v58 + 32;
                if (v58 == 57)
                {
LABEL_145:
                  v59 = webrtc::ParseSdpForVP9Profile((uint64_t **)this + 21);
                  v60 = webrtc::ParseSdpForVP9Profile(v2);
                  LOBYTE(v4) = 0;
                  if (((unint64_t)v59 & 0xFF00000000) != 0 && ((unint64_t)v60 & 0xFF00000000) != 0)
                    LOBYTE(v4) = (_DWORD)v59 == (_DWORD)v60;
                  return v4 & 1;
                }
              }
            }
          }
          *((_BYTE *)&v119.__r_.__value_.__s + 23) = 3;
          if (&v119 <= (std::string *)&cricket::kAv1CodecName
            && (char *)v119.__r_.__value_.__r.__words + 3 > (char *)&cricket::kAv1CodecName)
          {
            goto LABEL_287;
          }
          strcpy((char *)&v119, "AV1");
          v61 = (unsigned __int8 *)this + 16;
          v62 = v30;
          if ((v30 & 0x80) != 0)
          {
            v62 = *((_QWORD *)this + 3);
            if (v62 < 0)
              goto LABEL_287;
            v61 = *(unsigned __int8 **)v29;
            if (v62)
            {
              if (!v61)
                goto LABEL_287;
            }
          }
          if (v62 == 3)
          {
            v63 = *v61;
            if (v63 == 65)
              goto LABEL_159;
            if ((v63 - 65) < 0x1A)
              LOBYTE(v63) = v63 + 32;
            if (v63 == 97)
            {
LABEL_159:
              v64 = v61[1];
              if (v64 == 86)
                goto LABEL_166;
              if ((v64 - 65) < 0x1A)
                LOBYTE(v64) = v64 + 32;
              if (v64 == 118)
              {
LABEL_166:
                v65 = v61[2];
                if (v65 == 49)
                  goto LABEL_184;
                if ((v65 - 65) < 0x1A)
                  LOBYTE(v65) = v65 + 32;
                if (v65 == 49)
                  goto LABEL_184;
              }
            }
          }
          v66 = (unsigned __int8 *)a2 + 16;
          v67 = v38;
          if ((v38 & 0x80) != 0)
          {
            v67 = *((_QWORD *)a2 + 3);
            if (v67 < 0)
              goto LABEL_287;
            v66 = *(unsigned __int8 **)v37;
            if (v67)
            {
              if (!v66)
                goto LABEL_287;
            }
          }
          if (v67 == 3)
          {
            v68 = *v66;
            if (v68 == 65)
              goto LABEL_176;
            if ((v68 - 65) < 0x1A)
              LOBYTE(v68) = v68 + 32;
            if (v68 == 97)
            {
LABEL_176:
              v69 = v66[1];
              if (v69 == 86)
                goto LABEL_183;
              if ((v69 - 65) < 0x1A)
                LOBYTE(v69) = v69 + 32;
              if (v69 == 118)
              {
LABEL_183:
                v70 = v66[2];
                if (v70 == 49)
                  goto LABEL_184;
                if ((v70 - 65) < 0x1A)
                  LOBYTE(v70) = v70 + 32;
                if (v70 == 49)
                {
LABEL_184:
                  v71 = webrtc::ParseSdpForAV1Profile((uint64_t **)this + 21);
                  v72 = webrtc::ParseSdpForAV1Profile(v2);
                  LOBYTE(v4) = 0;
                  if (((unint64_t)v71 & 0xFF00000000) == 0
                    || ((unint64_t)v72 & 0xFF00000000) == 0
                    || (_DWORD)v71 != (_DWORD)v72)
                  {
                    return v4 & 1;
                  }
                  LOBYTE(v4) = *((_BYTE *)&__s2.__r_.__value_.__s + 23);
                  if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                  else
                    size = __s2.__r_.__value_.__l.__size_;
                  v74 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
                  LODWORD(v5) = SHIBYTE(v121.__r_.__value_.__r.__words[2]);
                  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v74 = v121.__r_.__value_.__l.__size_;
                  if (size != v74)
                  {
                    v83 = 0;
                    goto LABEL_289;
                  }
                  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v75 = &v121;
                  else
                    v75 = (std::string *)v121.__r_.__value_.__r.__words[0];
                  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v83 = memcmp(__s2.__r_.__value_.__l.__data_, v75, __s2.__r_.__value_.__l.__size_) == 0;
                    goto LABEL_289;
                  }
                  if (*((_BYTE *)&__s2.__r_.__value_.__s + 23))
                  {
                    v76 = HIBYTE(__s2.__r_.__value_.__r.__words[2]) - 1;
                    p_s2 = &__s2;
                    do
                    {
                      v79 = p_s2->__r_.__value_.__s.__data_[0];
                      p_s2 = (std::string *)((char *)p_s2 + 1);
                      v78 = v79;
                      v81 = v75->__r_.__value_.__s.__data_[0];
                      v75 = (std::string *)((char *)v75 + 1);
                      v80 = v81;
                      v22 = v76-- != 0;
                      v82 = v22;
                      v83 = v78 == v80;
                    }
                    while (v78 == v80 && (v82 & 1) != 0);
LABEL_289:
                    if ((v5 & 0x80000000) != 0)
                    {
                      operator delete(v121.__r_.__value_.__l.__data_);
                      if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) == 0)
                      {
LABEL_291:
                        if (!v83)
                          goto LABEL_52;
LABEL_295:
                        v104 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                        if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v105 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                        else
                          v105 = __s2.__r_.__value_.__l.__size_;
                        v106 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
                        v107 = SHIBYTE(v121.__r_.__value_.__r.__words[2]);
                        if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v106 = v121.__r_.__value_.__l.__size_;
                        if (v105 == v106)
                        {
                          if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v108 = &v121;
                          else
                            v108 = (std::string *)v121.__r_.__value_.__r.__words[0];
                          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
                          {
                            LOBYTE(v4) = memcmp(__s2.__r_.__value_.__l.__data_, v108, __s2.__r_.__value_.__l.__size_) == 0;
                          }
                          else if (*((_BYTE *)&__s2.__r_.__value_.__s + 23))
                          {
                            v109 = HIBYTE(__s2.__r_.__value_.__r.__words[2]) - 1;
                            v110 = &__s2;
                            do
                            {
                              v112 = v110->__r_.__value_.__s.__data_[0];
                              v110 = (std::string *)((char *)v110 + 1);
                              v111 = v112;
                              v114 = v108->__r_.__value_.__s.__data_[0];
                              v108 = (std::string *)((char *)v108 + 1);
                              v113 = v114;
                              v22 = v109-- != 0;
                              v115 = v22;
                              LOBYTE(v4) = v111 == v113;
                            }
                            while (v111 == v113 && (v115 & 1) != 0);
                          }
                          else
                          {
                            LOBYTE(v4) = 1;
                          }
                        }
                        else
                        {
                          LOBYTE(v4) = 0;
                        }
                        if (v107 < 0)
                        {
                          operator delete(v121.__r_.__value_.__l.__data_);
                          v104 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
                        }
                        if ((v104 & 0x80) == 0)
                          return v4 & 1;
                        goto LABEL_319;
                      }
                    }
                    else if ((v4 & 0x80) == 0)
                    {
                      goto LABEL_291;
                    }
                    operator delete(__s2.__r_.__value_.__l.__data_);
                    if (!v83)
                      goto LABEL_52;
                    goto LABEL_295;
                  }
LABEL_288:
                  v83 = 1;
                  goto LABEL_289;
                }
              }
            }
          }
          v117 = 4;
          if (__p <= (void **)"H265" && (char *)__p + 4 > "H265")
            goto LABEL_287;
          strcpy((char *)__p, "H265");
          if ((v30 & 0x80) != 0)
          {
            v30 = *((_QWORD *)this + 3);
            if (v30 < 0)
              goto LABEL_287;
            v29 = *(unsigned __int8 **)v29;
            if (v30)
            {
              if (!v29)
                goto LABEL_287;
            }
          }
          if (v30 != 4)
            goto LABEL_231;
          v84 = *v29;
          if (v84 != 72)
          {
            if ((v84 - 65) < 0x1A)
              LOBYTE(v84) = v84 + 32;
            if (v84 != 104)
              goto LABEL_231;
          }
          v85 = v29[1];
          if (v85 != 50)
          {
            if ((v85 - 65) < 0x1A)
              LOBYTE(v85) = v85 + 32;
            if (v85 != 50)
              goto LABEL_231;
          }
          v86 = v29[2];
          if (v86 != 54)
          {
            if ((v86 - 65) < 0x1A)
              LOBYTE(v86) = v86 + 32;
            if (v86 != 54)
              goto LABEL_231;
          }
          v87 = v29[3];
          if (v87 != 53)
          {
            if ((v87 - 65) < 0x1A)
              LOBYTE(v87) = v87 + 32;
            if (v87 != 53)
            {
LABEL_231:
              if ((v38 & 0x80) != 0)
              {
                v38 = *((_QWORD *)a2 + 3);
                if (v38 < 0)
                  goto LABEL_287;
                v37 = *(unsigned __int8 **)v37;
                if (v38)
                {
                  if (!v37)
                    goto LABEL_287;
                }
              }
              v88 = absl::EqualsIgnoreCase((unsigned __int8 *)__p, 4, v37, v38);
              LOBYTE(v4) = v88;
              if ((v117 & 0x80000000) == 0)
              {
                if (v88)
                  goto LABEL_234;
LABEL_238:
                LOBYTE(v4) = 1;
                return v4 & 1;
              }
              operator delete(__p[0]);
              if ((v4 & 1) == 0)
                goto LABEL_238;
            }
          }
LABEL_234:
          if (!webrtc::H265IsSameProfileTierLevel(v3, (uint64_t)v2))
            goto LABEL_52;
          if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
          {
            v3 = __s2.__r_.__value_.__l.__size_;
            if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_287;
            v4 = (std::string *)__s2.__r_.__value_.__r.__words[0];
            if (__s2.__r_.__value_.__l.__size_)
            {
              if (!__s2.__r_.__value_.__r.__words[0])
                goto LABEL_287;
            }
          }
          else
          {
            v3 = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
            v4 = &__s2;
          }
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
          {
            v101 = v121.__r_.__value_.__l.__size_;
            if ((v121.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
              goto LABEL_287;
            v102 = (std::string *)v121.__r_.__value_.__r.__words[0];
            if (v121.__r_.__value_.__l.__size_)
            {
              if (!v121.__r_.__value_.__r.__words[0])
                goto LABEL_287;
            }
          }
          else
          {
            v101 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
            v102 = &v121;
          }
          LOBYTE(v4) = absl::EqualsIgnoreCase((unsigned __int8 *)v4, v3, (unsigned __int8 *)v102, v101);
          if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v121.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return v4 & 1;
LABEL_319:
          v103 = (void *)__s2.__r_.__value_.__r.__words[0];
          goto LABEL_320;
        }
      }
    }
  }
  LODWORD(v5) = webrtc::ParseSdpForH264ProfileLevelId((unint64_t)this + 168);
  v46 = v45;
  v47 = webrtc::ParseSdpForH264ProfileLevelId((unint64_t)v2);
  LOBYTE(v4) = 0;
  if (!v46 || !v48 || (_DWORD)v5 != v47)
    return v4 & 1;
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 18;
  v4 = (std::string *)"packetization-mode";
  if (&__s2 <= (std::string *)"packetization-mode"
    && (char *)&__s2.__r_.__value_.__r.__words[2] + 2 > "packetization-mode")
  {
    goto LABEL_287;
  }
  strcpy((char *)&__s2, "packetization-mode");
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
  v5 = "0";
  if (&v121 <= (std::string *)"0" && (char *)&v121.__r_.__value_.__l.__data_ + 1 > "0")
    goto LABEL_287;
  LOWORD(v121.__r_.__value_.__l.__data_) = 48;
  if ((SHIBYTE(v121.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__s2.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_107;
LABEL_240:
    operator delete(__s2.__r_.__value_.__l.__data_);
    *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 18;
    if (&__s2 > (std::string *)"packetization-mode")
      goto LABEL_242;
    goto LABEL_241;
  }
  operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_240;
LABEL_107:
  *((_BYTE *)&__s2.__r_.__value_.__s + 23) = 18;
  if (&__s2 > (std::string *)"packetization-mode")
    goto LABEL_242;
LABEL_241:
  if ((char *)&__s2.__r_.__value_.__r.__words[2] + 2 > "packetization-mode")
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }
LABEL_242:
  strcpy((char *)&__s2, "packetization-mode");
  *((_BYTE *)&v121.__r_.__value_.__s + 23) = 1;
  if (&v121 <= (std::string *)"0" && (char *)&v121.__r_.__value_.__l.__data_ + 1 > "0")
    goto LABEL_287;
  LOWORD(v121.__r_.__value_.__l.__data_) = 48;
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
  v89 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v90 = __s1.__r_.__value_.__l.__size_;
  v91 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
  v92 = SHIBYTE(v119.__r_.__value_.__r.__words[2]);
  if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v91 = v119.__r_.__value_.__l.__size_;
  if (v90 == v91)
  {
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &v119;
    else
      v93 = (std::string *)v119.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      LOBYTE(v4) = memcmp(__s1.__r_.__value_.__l.__data_, v93, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v94 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v97 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v96 = v97;
        v99 = v93->__r_.__value_.__s.__data_[0];
        v93 = (std::string *)((char *)v93 + 1);
        v98 = v99;
        v22 = v94-- != 0;
        v100 = v22;
        LOBYTE(v4) = v96 == v98;
      }
      while (v96 == v98 && (v100 & 1) != 0);
    }
    else
    {
      LOBYTE(v4) = 1;
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  if (v92 < 0)
  {
    operator delete(v119.__r_.__value_.__l.__data_);
    v89 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  if (v89 < 0)
  {
    v103 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_320:
    operator delete(v103);
  }
  return v4 & 1;
}

uint64_t cricket::Codec::MatchesRtpCodec(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  size_t v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unsigned __int16 *p_s1;
  unsigned __int8 *v10;
  void **v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  void (**v21)(webrtc::RtpCodec *__hidden);
  void *__s1;
  size_t __n;
  unsigned __int8 v24;
  int v25;
  int v26;
  char v27;
  int v28;
  char v29;
  void *__p;
  void *v31;
  uint64_t *v32;
  uint64_t v33[3];
  char v34;

  result = (uint64_t)(*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(&v21);
  v4 = v24;
  v5 = __n;
  if ((v24 & 0x80u) == 0)
    v6 = v24;
  else
    v6 = __n;
  v7 = *(unsigned __int8 *)(a2 + 31);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 16);
  if (v6 != v7)
    goto LABEL_40;
  p_s1 = (unsigned __int16 *)&__s1;
  if (v8 >= 0)
    v10 = (unsigned __int8 *)(a2 + 8);
  else
    v10 = *(unsigned __int8 **)(a2 + 8);
  if ((v24 & 0x80) != 0)
  {
    result = memcmp(__s1, v10, __n);
    if ((_DWORD)result)
      goto LABEL_40;
  }
  else if (v24)
  {
    v11 = &__s1;
    v12 = v24;
    while (*(unsigned __int8 *)v11 == *v10)
    {
      v11 = (void **)((char *)v11 + 1);
      ++v10;
      if (!--v12)
        goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_17:
  if (v25 != *(_DWORD *)(a2 + 32))
    goto LABEL_40;
  if (v29 && *(_BYTE *)(a2 + 48))
  {
    if (v28 != *(_DWORD *)(a2 + 44))
      goto LABEL_40;
  }
  else if ((v29 != 0) != (*(_BYTE *)(a2 + 48) != 0))
  {
    goto LABEL_40;
  }
  if (v27 && *(_BYTE *)(a2 + 40))
  {
    if (v26 != *(_DWORD *)(a2 + 36))
      goto LABEL_40;
  }
  else if ((v27 != 0) != (*(_BYTE *)(a2 + 40) != 0))
  {
    goto LABEL_40;
  }
  if ((v4 & 0x80) != 0)
  {
    if ((v5 & 0x8000000000000000) != 0 || (p_s1 = (unsigned __int16 *)__s1, (v4 = v5) != 0) && !__s1)
    {
      __break(1u);
      return result;
    }
  }
  if (v4 == 3)
  {
    v13 = *p_s1 == *(unsigned __int16 *)"rtx"
       && *((unsigned __int8 *)p_s1 + 2) == cricket::kRtxCodecName[2];
    if (v13)
      goto LABEL_59;
  }
  if (v33[1] != *(_QWORD *)(a2 + 96))
  {
LABEL_40:
    v16 = 0;
    goto LABEL_41;
  }
  v14 = v32;
  if (v32 == v33)
  {
LABEL_59:
    v16 = 1;
    goto LABEL_41;
  }
  v15 = *(unsigned __int8 **)(a2 + 80);
  do
  {
    v16 = std::__equal_to::operator()[abi:sn180100]<std::pair<std::string const,std::string>,std::pair<std::string const,std::string>>((uint64_t)&v34, (unsigned __int8 *)v14 + 32, v15 + 32);
    if (!(_DWORD)v16)
      break;
    v17 = (uint64_t *)v14[1];
    v18 = v14;
    if (v17)
    {
      do
      {
        v14 = v17;
        v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v14 = (uint64_t *)v18[2];
        v13 = *v14 == (_QWORD)v18;
        v18 = v14;
      }
      while (!v13);
    }
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = *(unsigned __int8 **)v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (unsigned __int8 *)*((_QWORD *)v15 + 2);
        v13 = *(_QWORD *)v20 == (_QWORD)v15;
        v15 = v20;
      }
      while (!v13);
    }
    v15 = v20;
  }
  while (v14 != v33);
LABEL_41:
  v21 = off_24C0BCBF0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v32, v33[0]);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if ((char)v24 < 0)
    operator delete(__s1);
  return v16;
}

uint64_t cricket::Codec::GetParam(uint64_t a1, const void **a2, uint64_t a3)
{
  const void **v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  int v13;
  char v14;
  __int128 v15;
  const std::string::value_type *v16;
  size_t v17;

  v4 = a2;
  v5 = a1 + 176;
  result = (uint64_t)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 168, a2, *(uint64_t **)(a1 + 176), (uint64_t *)(a1 + 176));
  if (v5 == result)
    return 0;
  v7 = result;
  if (*((char *)v4 + 23) < 0)
  {
    v8 = (size_t)v4[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_34;
    v4 = (const void **)*v4;
    if (v8)
    {
      if (!v4)
        goto LABEL_34;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v4 + 23);
  }
  v9 = (_QWORD *)(result + 32);
  if ((*(char *)(result + 55) & 0x80000000) == 0)
  {
    v10 = *(unsigned __int8 *)(result + 55);
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(result + 40);
  if ((v10 & 0x8000000000000000) != 0 || ((v9 = (_QWORD *)*v9, v10) ? (v11 = v9 == 0) : (v11 = 0), v11))
  {
LABEL_34:
    __break(1u);
    return result;
  }
LABEL_14:
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v4, v9, v12);
  if (!v13)
  {
    if (v8 >= v10)
      goto LABEL_19;
    return 0;
  }
  if (v13 < 0)
    return 0;
LABEL_19:
  if (v7 + 56 == a3)
    return 1;
  v14 = *(_BYTE *)(v7 + 79);
  if (*(char *)(a3 + 23) < 0)
  {
    if (v14 >= 0)
      v16 = (const std::string::value_type *)(v7 + 56);
    else
      v16 = *(const std::string::value_type **)(v7 + 56);
    if (v14 >= 0)
      v17 = *(unsigned __int8 *)(v7 + 79);
    else
      v17 = *(_QWORD *)(v7 + 64);
    std::string::__assign_no_alias<false>((std::string *)a3, v16, v17);
    return 1;
  }
  else
  {
    if ((*(_BYTE *)(v7 + 79) & 0x80) == 0)
    {
      v15 = *(_OWORD *)(v7 + 56);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 72);
      *(_OWORD *)a3 = v15;
      return 1;
    }
    std::string::__assign_no_alias<true>((_QWORD *)a3, *(char **)(v7 + 56), *(_QWORD *)(v7 + 64));
    return 1;
  }
}

uint64_t *cricket::Codec::GetParam(uint64_t a1, const void **a2, _DWORD *a3)
{
  const void **v4;
  uint64_t *v5;
  uint64_t *result;
  uint64_t *v7;
  size_t v8;
  _QWORD *v9;
  size_t v10;
  size_t v12;
  int v13;
  size_t v14;
  int64_t v15;
  char v16;
  BOOL v17;
  BOOL v18;
  int v19;

  v4 = a2;
  v5 = (uint64_t *)(a1 + 176);
  result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>((int)a1 + 168, a2, *(uint64_t **)(a1 + 176), (uint64_t *)(a1 + 176));
  if (v5 == result)
    return 0;
  v7 = result;
  if (*((char *)v4 + 23) < 0)
  {
    v8 = (size_t)v4[1];
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v4 = (const void **)*v4;
    if (v8)
    {
      if (!v4)
        goto LABEL_39;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)v4 + 23);
  }
  v9 = result + 4;
  if (*((char *)result + 55) < 0)
  {
    v10 = result[5];
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_39;
    v9 = (_QWORD *)*v9;
    if (v10 && v9 == 0)
      goto LABEL_39;
  }
  else
  {
    v10 = *((unsigned __int8 *)result + 55);
  }
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v4, v9, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_19;
    return 0;
  }
  if (v8 < v10)
    return 0;
LABEL_19:
  result = v7 + 7;
  if ((*((char *)v7 + 79) & 0x80000000) == 0)
  {
    v14 = *((unsigned __int8 *)v7 + 79);
    goto LABEL_26;
  }
  v14 = v7[8];
  if ((v14 & 0x8000000000000000) != 0 || (result = (uint64_t *)*result, v14) && !result)
  {
LABEL_39:
    __break(1u);
    return result;
  }
LABEL_26:
  v15 = rtc::string_to_number_internal::ParseSigned((void **)result, v14, 10);
  if (v16)
    v17 = v15 < (uint64_t)0xFFFFFFFF80000000;
  else
    v17 = 1;
  v18 = !v17 && v15 <= 0x7FFFFFFF;
  v19 = !v18;
  if (v18)
    *a3 = v15;
  return (uint64_t *)(v19 ^ 1u);
}

uint64_t std::map<std::string,std::string>::operator[](uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t **v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v12, (const void **)a2);
  if (*v4)
    return (uint64_t)*v4 + 56;
  v6 = (uint64_t **)v4;
  v7 = operator new(0x50uLL);
  v8 = (std::string *)(v7 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7[6] = *(_QWORD *)(a2 + 16);
  }
  v7[7] = 0;
  v7[8] = 0;
  v7[9] = 0;
  v9 = v12;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = v9;
  *v6 = v7;
  v10 = **(_QWORD **)a1;
  v11 = v7;
  if (v10)
  {
    *(_QWORD *)a1 = v10;
    v11 = *v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v11);
  ++*(_QWORD *)(a1 + 16);
  return (uint64_t)(v7 + 7);
}

__n128 cricket::Codec::SetParam(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  size_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v12;
  __n128 *v13;
  __n128 result;
  __n128 v15;
  unint64_t v16;
  __n128 __str[2];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v5 = snprintf((char *)__str, 0x20uLL, "%d", a3);
  if (v5 < 0)
LABEL_17:
    abort();
  v6 = v5;
  if (v5 > 0x16)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (__n128 *)operator new(v8 + 1);
    v15.n128_u64[1] = v6;
    v16 = v9 | 0x8000000000000000;
    v15.n128_u64[0] = (unint64_t)v7;
  }
  else
  {
    HIBYTE(v16) = v5;
    v7 = &v15;
  }
  v10 = (char *)v7 + v6;
  if (v7 <= __str && (__n128 *)((char *)v7 + v6) > __str)
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((_DWORD)v6)
    memcpy(v7, __str, v6);
  *v10 = 0;
  v12 = std::map<std::string,std::string>::operator[](a1 + 168, a2);
  v13 = (__n128 *)v12;
  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  result = v15;
  v13[1].n128_u64[0] = v16;
  *v13 = result;
  return result;
}

_QWORD *cricket::Codec::ToCodecParameters@<X0>(cricket::Codec *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  uint64_t *v5;
  uint64_t **v6;
  cricket::Codec *v7;
  int v8;
  cricket::Codec *v9;
  cricket::Codec *v10;
  BOOL v11;

  *(_QWORD *)(a2 + 8) = 0;
  result = (_QWORD *)(a2 + 8);
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v5 = (uint64_t *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = a2 + 88;
  v6 = (uint64_t **)(a2 + 80);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = off_24C0BCC30;
  *(_DWORD *)(a2 + 104) = *((_DWORD *)this + 3);
  *(_QWORD *)(a2 + 29) = 0;
  if ((cricket::Codec *)(a2 + 8) != (cricket::Codec *)((char *)this + 16))
  {
    if (*((char *)this + 39) < 0)
    {
      result = std::string::__assign_no_alias<true>(result, *((char **)this + 2), *((_QWORD *)this + 3));
    }
    else
    {
      *(_OWORD *)result = *((_OWORD *)this + 1);
      *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 4);
    }
  }
  *(_DWORD *)(a2 + 36) = *((_DWORD *)this + 10);
  *(_BYTE *)(a2 + 40) = 1;
  v7 = (cricket::Codec *)*((_QWORD *)this + 21);
  if (v7 != (cricket::Codec *)((char *)this + 176))
  {
    do
    {
      result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(v6, v5, (uint64_t)v7 + 32, (uint64_t)v7 + 32);
      v9 = (cricket::Codec *)*((_QWORD *)v7 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(cricket::Codec **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (cricket::Codec *)*((_QWORD *)v7 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != (cricket::Codec *)((char *)this + 176));
  }
  v8 = *((_DWORD *)this + 2);
  if (v8 != 1)
  {
    if (v8)
      return result;
    *(_DWORD *)(a2 + 44) = *((_QWORD *)this + 6);
    *(_BYTE *)(a2 + 48) = 1;
  }
  *(_DWORD *)(a2 + 32) = v8;
  return result;
}

uint64_t cricket::Codec::GetResiliencyType(uint64_t this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  unsigned __int8 v7;
  int v8;
  unsigned __int8 v9;
  int v10;
  char v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  unsigned __int8 v19;
  int v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  char v25;
  char v26;
  unsigned __int8 *v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  int v31;
  unsigned __int8 v32;
  int v33;
  unsigned __int8 v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  int v39;
  unsigned __int8 v40;
  int v41;
  unsigned __int8 v42;
  int v43;
  unsigned __int8 v44;
  int v45;
  unsigned __int8 v46;
  int v47;
  char v48;
  char v49;
  int v50;
  unsigned __int8 v51;
  int v52;
  unsigned __int8 v53;
  int v54;
  char v55;
  char v56;

  v1 = (unsigned __int8 *)(this + 16);
  v2 = *(unsigned __int8 *)(this + 39);
  v3 = (unsigned __int8 *)(this + 16);
  v4 = v2;
  if (*(char *)(this + 39) < 0)
  {
    v4 = *(_QWORD *)(this + 24);
    if (v4 < 0)
      goto LABEL_162;
    v3 = *(unsigned __int8 **)v1;
    if (v4 && v3 == 0)
      goto LABEL_162;
  }
  if (v4 == 3)
  {
    v6 = *v3;
    v7 = cricket::kRedCodecName;
    if (v6 == cricket::kRedCodecName)
      goto LABEL_14;
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    if (cricket::kRedCodecName - 65 < 0x1A)
      v7 = cricket::kRedCodecName + 32;
    if (v6 == v7)
    {
LABEL_14:
      v8 = v3[1];
      v9 = HIBYTE(cricket::kRedCodecName);
      if (v8 == HIBYTE(cricket::kRedCodecName))
        goto LABEL_24;
      if ((v8 - 65) < 0x1A)
        LOBYTE(v8) = v8 + 32;
      if (HIBYTE(cricket::kRedCodecName) - 65 < 0x1A)
        v9 = HIBYTE(cricket::kRedCodecName) + 32;
      if (v8 == v9)
      {
LABEL_24:
        v10 = v3[2];
        if (v10 == 100)
          return 1;
        v11 = (v10 - 65) >= 0x1A ? v3[2] : v10 + 32;
        if (v11 == 100)
          return 1;
      }
    }
  }
  v12 = (unsigned __int8 *)(this + 16);
  v13 = *(unsigned __int8 *)(this + 39);
  if ((v2 & 0x80) != 0)
  {
    v13 = *(_QWORD *)(this + 24);
    if (v13 < 0)
      goto LABEL_162;
    v12 = *(unsigned __int8 **)v1;
    if (v13)
    {
      if (!v12)
        goto LABEL_162;
    }
  }
  if (v13 == 6)
  {
    v14 = *v12;
    v15 = cricket::kUlpfecCodecName[0];
    if (v14 == cricket::kUlpfecCodecName[0])
      goto LABEL_37;
    if ((v14 - 65) < 0x1A)
      LOBYTE(v14) = v14 + 32;
    if (cricket::kUlpfecCodecName[0] - 65 < 0x1A)
      v15 = cricket::kUlpfecCodecName[0] + 32;
    if (v14 == v15)
    {
LABEL_37:
      v16 = v12[1];
      v17 = cricket::kUlpfecCodecName[1];
      if (v16 == cricket::kUlpfecCodecName[1])
        goto LABEL_67;
      if ((v16 - 65) < 0x1A)
        LOBYTE(v16) = v16 + 32;
      if (cricket::kUlpfecCodecName[1] - 65 < 0x1A)
        v17 = cricket::kUlpfecCodecName[1] + 32;
      if (v16 == v17)
      {
LABEL_67:
        v18 = v12[2];
        v19 = cricket::kUlpfecCodecName[2];
        if (v18 == cricket::kUlpfecCodecName[2])
          goto LABEL_165;
        if ((v18 - 65) < 0x1A)
          LOBYTE(v18) = v18 + 32;
        if (cricket::kUlpfecCodecName[2] - 65 < 0x1A)
          v19 = cricket::kUlpfecCodecName[2] + 32;
        if (v18 == v19)
        {
LABEL_165:
          v20 = v12[3];
          v21 = cricket::kUlpfecCodecName[3];
          if (v20 == cricket::kUlpfecCodecName[3])
            goto LABEL_166;
          if ((v20 - 65) < 0x1A)
            LOBYTE(v20) = v20 + 32;
          if (cricket::kUlpfecCodecName[3] - 65 < 0x1A)
            v21 = cricket::kUlpfecCodecName[3] + 32;
          if (v20 == v21)
          {
LABEL_166:
            v22 = v12[4];
            v23 = cricket::kUlpfecCodecName[4];
            if (v22 == cricket::kUlpfecCodecName[4])
              goto LABEL_167;
            if ((v22 - 65) < 0x1A)
              LOBYTE(v22) = v22 + 32;
            if (cricket::kUlpfecCodecName[4] - 65 < 0x1A)
              v23 = cricket::kUlpfecCodecName[4] + 32;
            if (v22 == v23)
            {
LABEL_167:
              v24 = v12[5];
              v25 = cricket::kUlpfecCodecName[5];
              if (v24 == cricket::kUlpfecCodecName[5])
                return 2;
              if ((v24 - 65) >= 0x1A)
                v26 = v24;
              else
                v26 = v24 + 32;
              if (cricket::kUlpfecCodecName[5] - 65 < 0x1A)
                v25 = cricket::kUlpfecCodecName[5] + 32;
              if (v26 == v25)
                return 2;
            }
          }
        }
      }
    }
  }
  v27 = (unsigned __int8 *)(this + 16);
  v28 = *(unsigned __int8 *)(this + 39);
  if ((v2 & 0x80) != 0)
  {
    v28 = *(_QWORD *)(this + 24);
    if (v28 < 0)
      goto LABEL_162;
    v27 = *(unsigned __int8 **)v1;
    if (v28)
    {
      if (!v27)
        goto LABEL_162;
    }
  }
  if (v28 == 10)
  {
    v29 = *v27;
    v30 = cricket::kFlexfecCodecName[0];
    if (v29 == cricket::kFlexfecCodecName[0])
      goto LABEL_80;
    if ((v29 - 65) < 0x1A)
      LOBYTE(v29) = v29 + 32;
    if (cricket::kFlexfecCodecName[0] - 65 < 0x1A)
      v30 = cricket::kFlexfecCodecName[0] + 32;
    if (v29 == v30)
    {
LABEL_80:
      v31 = v27[1];
      v32 = cricket::kFlexfecCodecName[1];
      if (v31 == cricket::kFlexfecCodecName[1])
        goto LABEL_134;
      if ((v31 - 65) < 0x1A)
        LOBYTE(v31) = v31 + 32;
      if (cricket::kFlexfecCodecName[1] - 65 < 0x1A)
        v32 = cricket::kFlexfecCodecName[1] + 32;
      if (v31 == v32)
      {
LABEL_134:
        v33 = v27[2];
        v34 = cricket::kFlexfecCodecName[2];
        if (v33 == cricket::kFlexfecCodecName[2])
          goto LABEL_168;
        if ((v33 - 65) < 0x1A)
          LOBYTE(v33) = v33 + 32;
        if (cricket::kFlexfecCodecName[2] - 65 < 0x1A)
          v34 = cricket::kFlexfecCodecName[2] + 32;
        if (v33 == v34)
        {
LABEL_168:
          v35 = v27[3];
          v36 = cricket::kFlexfecCodecName[3];
          if (v35 == cricket::kFlexfecCodecName[3])
            goto LABEL_169;
          if ((v35 - 65) < 0x1A)
            LOBYTE(v35) = v35 + 32;
          if (cricket::kFlexfecCodecName[3] - 65 < 0x1A)
            v36 = cricket::kFlexfecCodecName[3] + 32;
          if (v35 == v36)
          {
LABEL_169:
            v37 = v27[4];
            v38 = cricket::kFlexfecCodecName[4];
            if (v37 == cricket::kFlexfecCodecName[4])
              goto LABEL_170;
            if ((v37 - 65) < 0x1A)
              LOBYTE(v37) = v37 + 32;
            if (cricket::kFlexfecCodecName[4] - 65 < 0x1A)
              v38 = cricket::kFlexfecCodecName[4] + 32;
            if (v37 == v38)
            {
LABEL_170:
              v39 = v27[5];
              v40 = cricket::kFlexfecCodecName[5];
              if (v39 == cricket::kFlexfecCodecName[5])
                goto LABEL_171;
              if ((v39 - 65) < 0x1A)
                LOBYTE(v39) = v39 + 32;
              if (cricket::kFlexfecCodecName[5] - 65 < 0x1A)
                v40 = cricket::kFlexfecCodecName[5] + 32;
              if (v39 == v40)
              {
LABEL_171:
                v41 = v27[6];
                v42 = cricket::kFlexfecCodecName[6];
                if (v41 == cricket::kFlexfecCodecName[6])
                  goto LABEL_172;
                if ((v41 - 65) < 0x1A)
                  LOBYTE(v41) = v41 + 32;
                if (cricket::kFlexfecCodecName[6] - 65 < 0x1A)
                  v42 = cricket::kFlexfecCodecName[6] + 32;
                if (v41 == v42)
                {
LABEL_172:
                  v43 = v27[7];
                  v44 = cricket::kFlexfecCodecName[7];
                  if (v43 == cricket::kFlexfecCodecName[7])
                    goto LABEL_173;
                  if ((v43 - 65) < 0x1A)
                    LOBYTE(v43) = v43 + 32;
                  if (cricket::kFlexfecCodecName[7] - 65 < 0x1A)
                    v44 = cricket::kFlexfecCodecName[7] + 32;
                  if (v43 == v44)
                  {
LABEL_173:
                    v45 = v27[8];
                    v46 = cricket::kFlexfecCodecName[8];
                    if (v45 == cricket::kFlexfecCodecName[8])
                      goto LABEL_174;
                    if ((v45 - 65) < 0x1A)
                      LOBYTE(v45) = v45 + 32;
                    if (cricket::kFlexfecCodecName[8] - 65 < 0x1A)
                      v46 = cricket::kFlexfecCodecName[8] + 32;
                    if (v45 == v46)
                    {
LABEL_174:
                      v47 = v27[9];
                      v48 = cricket::kFlexfecCodecName[9];
                      if (v47 == cricket::kFlexfecCodecName[9])
                        return 3;
                      if ((v47 - 65) >= 0x1A)
                        v49 = v47;
                      else
                        v49 = v47 + 32;
                      if (cricket::kFlexfecCodecName[9] - 65 < 0x1A)
                        v48 = cricket::kFlexfecCodecName[9] + 32;
                      if (v49 == v48)
                        return 3;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((v2 & 0x80) != 0 && ((v2 = *(_QWORD *)(this + 24), v2 < 0) || (v1 = *(unsigned __int8 **)v1, v2) && !v1))
  {
LABEL_162:
    __break(1u);
  }
  else
  {
    if (v2 != 3)
      return 0;
    v50 = *v1;
    v51 = cricket::kRtxCodecName[0];
    if (v50 != cricket::kRtxCodecName[0])
    {
      if ((v50 - 65) < 0x1A)
        LOBYTE(v50) = v50 + 32;
      if (cricket::kRtxCodecName[0] - 65 < 0x1A)
        v51 = cricket::kRtxCodecName[0] + 32;
      if (v50 != v51)
        return 0;
    }
    v52 = v1[1];
    v53 = cricket::kRtxCodecName[1];
    if (v52 != cricket::kRtxCodecName[1])
    {
      if ((v52 - 65) < 0x1A)
        LOBYTE(v52) = v52 + 32;
      if (cricket::kRtxCodecName[1] - 65 < 0x1A)
        v53 = cricket::kRtxCodecName[1] + 32;
      if (v52 != v53)
        return 0;
    }
    v54 = v1[2];
    v55 = cricket::kRtxCodecName[2];
    if (v54 == cricket::kRtxCodecName[2])
      return 4;
    v56 = (v54 - 65) >= 0x1A ? v54 : v54 + 32;
    if (cricket::kRtxCodecName[2] - 65 < 0x1A)
      v55 = cricket::kRtxCodecName[2] + 32;
    if (v56 == v55)
      return 4;
    else
      return 0;
  }
  return this;
}

uint64_t cricket::Codec::ValidateCodecFormat(cricket::Codec *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int Param;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char __p[21];
  char v20;
  int v21;
  int v22;
  const void *v23[4];

  if (*((_DWORD *)this + 3) >= 0x80u)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      return 0;
    cricket::Codec::ToString(this, (char *)v23);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/codec.cc");
    if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
      return 0;
    goto LABEL_22;
  }
  result = cricket::Codec::GetResiliencyType((uint64_t)this);
  if ((_DWORD)result)
    return 1;
  v22 = -1;
  v21 = -1;
  HIBYTE(v23[2]) = 20;
  if (v23 > (const void **)"x-google-min-bitrate" || (char *)&v23[2] + 4 <= "x-google-min-bitrate")
  {
    strcpy((char *)v23, "x-google-min-bitrate");
    result = (uint64_t)cricket::Codec::GetParam((uint64_t)this, v23, &v22);
    Param = 0;
    if (!(_DWORD)result)
      goto LABEL_15;
    v20 = 20;
    if (__p > "x-google-max-bitrate" || &__p[20] <= "x-google-max-bitrate")
    {
      strcpy(__p, "x-google-max-bitrate");
      Param = cricket::Codec::GetParam((uint64_t)this, (const void **)__p, &v21);
      if (v20 < 0)
        operator delete(*(void **)__p);
LABEL_15:
      if (SHIBYTE(v23[2]) < 0)
      {
        operator delete((void *)v23[0]);
        if (Param)
          goto LABEL_19;
      }
      else if (Param)
      {
LABEL_19:
        if (v21 < v22)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
            return 0;
          cricket::Codec::ToString(this, (char *)v23);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/codec.cc");
          if ((SHIBYTE(v23[2]) & 0x80000000) == 0)
            return 0;
LABEL_22:
          operator delete((void *)v23[0]);
          return 0;
        }
      }
      return 1;
    }
  }
  __break(1u);
  return result;
}

unint64_t cricket::Codec::ToString@<X0>(cricket::Codec *this@<X0>, char *a2@<X8>)
{
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t result;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v42;
  __int128 v43;
  char __s[256];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v4 = __s;
  v42 = __s;
  v43 = xmmword_208F06510;
  __s[0] = 0;
  v5 = *((_DWORD *)this + 2);
  if (v5 == 1)
  {
    *((_QWORD *)&v43 + 1) = 11;
    strcpy(__s, "VideoCodec[");
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v42, "%d", *((_DWORD *)this + 3));
    v11 = v43;
    v12 = *((_QWORD *)&v43 + 1) + 1;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
    v13 = *((_QWORD *)&v43 + 1);
    if (v11 != v12)
      v13 = *((_QWORD *)&v43 + 1) + 1;
    *((_QWORD *)&v43 + 1) = v13;
    v42[v13] = 0;
    v14 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      v15 = *((_QWORD *)this + 3);
      if ((v15 & 0x8000000000000000) != 0)
        goto LABEL_59;
      v14 = (_QWORD *)*v14;
      if (v15)
      {
        if (!v14)
          goto LABEL_59;
      }
    }
    else
    {
      v15 = *((unsigned __int8 *)this + 39);
    }
    if (v15 >= (_QWORD)v43 + ~*((_QWORD *)&v43 + 1))
      v26 = v43 + ~*((_QWORD *)&v43 + 1);
    else
      v26 = v15;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], v14, v26);
    *((_QWORD *)&v43 + 1) += v26;
    v42[*((_QWORD *)&v43 + 1)] = 0;
    if (*((_BYTE *)this + 80))
    {
      v27 = v43;
      v28 = *((_QWORD *)&v43 + 1) + 1;
      memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
      v29 = *((_QWORD *)&v43 + 1);
      if (v27 != v28)
        v29 = *((_QWORD *)&v43 + 1) + 1;
      *((_QWORD *)&v43 + 1) = v29;
      v42[v29] = 0;
      if (!*((_BYTE *)this + 80))
        goto LABEL_59;
      v30 = (_QWORD *)((char *)this + 56);
      if (*((char *)this + 79) < 0)
      {
        v31 = *((_QWORD *)this + 8);
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_59;
        v30 = (_QWORD *)*v30;
        if (v31)
        {
          if (!v30)
            goto LABEL_59;
        }
      }
      else
      {
        v31 = *((unsigned __int8 *)this + 79);
      }
      if (v31 >= (_QWORD)v43 + ~*((_QWORD *)&v43 + 1))
        v32 = v43 + ~*((_QWORD *)&v43 + 1);
      else
        v32 = v31;
      memcpy(&v42[*((_QWORD *)&v43 + 1)], v30, v32);
      *((_QWORD *)&v43 + 1) += v32;
      v42[*((_QWORD *)&v43 + 1)] = 0;
    }
  }
  else
  {
    if (v5)
      goto LABEL_46;
    *((_QWORD *)&v43 + 1) = 11;
    strcpy(__s, "AudioCodec[");
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v42, "%d", *((_DWORD *)this + 3));
    v6 = v43;
    v7 = *((_QWORD *)&v43 + 1) + 1;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
    v8 = *((_QWORD *)&v43 + 1);
    if (v6 != v7)
      v8 = *((_QWORD *)&v43 + 1) + 1;
    *((_QWORD *)&v43 + 1) = v8;
    v42[v8] = 0;
    v9 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
    {
      v10 = *((_QWORD *)this + 3);
      if ((v10 & 0x8000000000000000) != 0)
        goto LABEL_59;
      v9 = (_QWORD *)*v9;
      if (v10)
      {
        if (!v9)
          goto LABEL_59;
      }
    }
    else
    {
      v10 = *((unsigned __int8 *)this + 39);
    }
    if (v10 >= (_QWORD)v43 + ~*((_QWORD *)&v43 + 1))
      v16 = v43 + ~*((_QWORD *)&v43 + 1);
    else
      v16 = v10;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], v9, v16);
    *((_QWORD *)&v43 + 1) += v16;
    v42[*((_QWORD *)&v43 + 1)] = 0;
    v17 = v43;
    v18 = *((_QWORD *)&v43 + 1) + 1;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
    v19 = *((_QWORD *)&v43 + 1);
    if (v17 != v18)
      v19 = *((_QWORD *)&v43 + 1) + 1;
    *((_QWORD *)&v43 + 1) = v19;
    v42[v19] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v42, "%d", *((_DWORD *)this + 10));
    v20 = v43;
    v21 = *((_QWORD *)&v43 + 1) + 1;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
    v22 = *((_QWORD *)&v43 + 1);
    if (v20 != v21)
      v22 = *((_QWORD *)&v43 + 1) + 1;
    *((_QWORD *)&v43 + 1) = v22;
    v42[v22] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v42, "%d", *((_DWORD *)this + 11));
    v23 = v43;
    v24 = *((_QWORD *)&v43 + 1) + 1;
    memcpy(&v42[*((_QWORD *)&v43 + 1)], ":", v43 != *((_QWORD *)&v43 + 1) + 1);
    v25 = *((_QWORD *)&v43 + 1);
    if (v23 != v24)
      v25 = *((_QWORD *)&v43 + 1) + 1;
    *((_QWORD *)&v43 + 1) = v25;
    v42[v25] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v42, "%lu", *((_QWORD *)this + 6));
  }
  v33 = v43;
  v34 = *((_QWORD *)&v43 + 1) + 1;
  memcpy(&v42[*((_QWORD *)&v43 + 1)], "]", v43 != *((_QWORD *)&v43 + 1) + 1);
  v35 = *((_QWORD *)&v43 + 1);
  if (v33 != v34)
    v35 = *((_QWORD *)&v43 + 1) + 1;
  *((_QWORD *)&v43 + 1) = v35;
  v42[v35] = 0;
  v4 = v42;
  if (!v42)
    goto LABEL_59;
LABEL_46:
  result = strlen(v4);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_60;
  v37 = result;
  if (result > 0x16)
  {
    v38 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v38 = result | 7;
    v39 = v38 + 1;
    result = (unint64_t)operator new(v38 + 1);
    *((_QWORD *)a2 + 1) = v37;
    *((_QWORD *)a2 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a2 = result;
    a2 = (char *)result;
  }
  else
  {
    a2[23] = result;
  }
  v40 = &a2[v37];
  if (a2 <= v4 && v40 > v4)
  {
LABEL_59:
    __break(1u);
LABEL_60:
    abort();
  }
  if (v37)
    result = (unint64_t)memmove(a2, v4, v37);
  *v40 = 0;
  return result;
}

void cricket::CreateVideoRtxCodec(cricket *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  size_t v7;
  void **v8;
  _BYTE *v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  void *v17[2];
  char v18;
  __int128 v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v22 = 3;
  if (__p <= (void **)"rtx" && (char *)__p + 3 > "rtx")
    goto LABEL_24;
  LOWORD(__p[0]) = *(_WORD *)"rtx";
  WORD1(__p[0]) = cricket::kRtxCodecName[2];
  cricket::CreateVideoCodec((int)this, (unsigned __int8 *)__p, a3);
  if (v22 < 0)
    operator delete(__p[0]);
  v18 = 3;
  if (v17 <= (void **)"apt" && (char *)v17 + 3 > "apt")
  {
LABEL_24:
    __break(1u);
LABEL_25:
    abort();
  }
  LOWORD(v17[0]) = *(_WORD *)"apt";
  WORD1(v17[0]) = cricket::kCodecParamAssociatedPayloadType[2];
  v6 = snprintf((char *)__p, 0x20uLL, "%d", a2);
  if (v6 < 0)
    goto LABEL_25;
  v7 = v6;
  if (v6 <= 0x16)
  {
    HIBYTE(v20) = v6;
    v8 = (void **)&v19;
    v9 = (char *)&v19 + v7;
    v10 = (char *)&v19 + v7 > (char *)__p;
    if (&v19 > (__int128 *)__p)
      goto LABEL_17;
    goto LABEL_16;
  }
  v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v11 = v6 | 7;
  v12 = v11 + 1;
  v8 = (void **)operator new(v11 + 1);
  *((_QWORD *)&v19 + 1) = v7;
  v20 = v12 | 0x8000000000000000;
  *(_QWORD *)&v19 = v8;
  v9 = (char *)v8 + v7;
  v10 = (void **)((char *)v8 + v7) > __p;
  if (v8 <= __p)
  {
LABEL_16:
    if (!v10)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_17:
  if ((_DWORD)v7)
    memcpy(v8, __p, v7);
  *v9 = 0;
  v13 = std::map<std::string,std::string>::operator[](a3 + 168, (uint64_t)v17);
  v14 = v13;
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    v15 = v19;
    *(_QWORD *)(v13 + 16) = v20;
    *(_OWORD *)v13 = v15;
    if ((v18 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v17[0]);
    return;
  }
  operator delete(*(void **)v13);
  v16 = v19;
  *(_QWORD *)(v14 + 16) = v20;
  *(_OWORD *)v14 = v16;
  if (v18 < 0)
    goto LABEL_23;
}

void cricket::CreateVideoCodec(int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v3;
  uint64_t v4;
  std::string *v5;
  _QWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  void **v13;
  size_t v14;
  void *__p[2];
  uint64_t v16;
  void *v17[4];

  v3 = a2;
  v4 = a3;
  *(_QWORD *)a3 = &off_24C0B1418;
  *(_DWORD *)(a3 + 8) = 1;
  *(_DWORD *)(a3 + 12) = a1;
  v5 = (std::string *)(a3 + 16);
  LODWORD(a3) = (char)a2[23];
  if ((a3 & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    LOBYTE(a3) = v3[23];
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 168) = v4 + 176;
  v6 = (_QWORD *)(v4 + 168);
  *(v6 - 16) = 90000;
  *(v6 - 15) = 0;
  *((_BYTE *)v6 - 112) = 0;
  *((_BYTE *)v6 - 88) = 0;
  *(v6 - 10) = 0;
  *((_BYTE *)v6 - 32) = 0;
  *((_BYTE *)v6 - 8) = 0;
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = 0;
  v6[5] = 0;
  if ((a3 & 0x80) != 0)
  {
    a3 = *((_QWORD *)v3 + 1);
    if (a3 < 0)
      goto LABEL_49;
    v3 = *(unsigned __int8 **)v3;
    if (a3)
    {
      if (!v3)
        goto LABEL_49;
    }
  }
  else
  {
    a3 = a3;
  }
  if (a3 == 4)
  {
    v7 = *v3;
    if (v7 == 72)
      goto LABEL_14;
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    if (v7 == 104)
    {
LABEL_14:
      v8 = v3[1];
      if (v8 == 50)
        goto LABEL_25;
      if ((v8 - 65) < 0x1A)
        LOBYTE(v8) = v8 + 32;
      if (v8 == 50)
      {
LABEL_25:
        v9 = v3[2];
        if (v9 == 54)
          goto LABEL_52;
        if ((v9 - 65) < 0x1A)
          LOBYTE(v9) = v9 + 32;
        if (v9 == 54)
        {
LABEL_52:
          v10 = v3[3];
          if (v10 == 52)
            goto LABEL_26;
          if ((v10 - 65) < 0x1A)
            LOBYTE(v10) = v10 + 32;
          if (v10 == 52)
          {
LABEL_26:
            HIBYTE(v17[2]) = 18;
            if (v17 > (void **)"packetization-mode" || (char *)&v17[2] + 2 <= "packetization-mode")
            {
              strcpy((char *)v17, "packetization-mode");
              HIBYTE(v16) = 1;
              if (__p > (void **)"1" || (char *)__p + 1 <= "1")
              {
                LOWORD(__p[0]) = 49;
                v11 = std::map<std::string,std::string>::operator[]((uint64_t)v6, (uint64_t)v17);
                if ((void **)v11 != __p)
                {
                  if ((*(char *)(v11 + 23) & 0x80000000) == 0)
                  {
                    if (v16 < 0)
                    {
                      std::string::__assign_no_alias<true>((_QWORD *)v11, (char *)__p[0], (size_t)__p[1]);
                      if ((SHIBYTE(v16) & 0x80000000) == 0)
                      {
LABEL_44:
                        if (SHIBYTE(v17[2]) < 0)
                          operator delete(v17[0]);
                        return;
                      }
                    }
                    else
                    {
                      v12 = *(_OWORD *)__p;
                      *(_QWORD *)(v11 + 16) = v16;
                      *(_OWORD *)v11 = v12;
                      if ((SHIBYTE(v16) & 0x80000000) == 0)
                        goto LABEL_44;
                    }
LABEL_43:
                    operator delete(__p[0]);
                    goto LABEL_44;
                  }
                  if (v16 >= 0)
                    v13 = __p;
                  else
                    v13 = (void **)__p[0];
                  if (v16 >= 0)
                    v14 = HIBYTE(v16);
                  else
                    v14 = (size_t)__p[1];
                  std::string::__assign_no_alias<false>((std::string *)v11, (const std::string::value_type *)v13, v14);
                }
                if ((SHIBYTE(v16) & 0x80000000) == 0)
                  goto LABEL_44;
                goto LABEL_43;
              }
            }
LABEL_49:
            __break(1u);
          }
        }
      }
    }
  }
}

BOOL cricket::HasLntf(_BOOL8 this, const cricket::Codec *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;

  v6 = 9;
  if (v5 <= (void **)"goog-lntf" && (char *)&v5[1] + 1 > "goog-lntf")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)v5, "goog-lntf");
    __p = 0;
    v8 = 0;
    v3 = *(_QWORD *)(this + 192);
    v4 = *(_QWORD *)(this + 200);
    if (v3 == v4)
      goto LABEL_10;
    while ((cricket::FeedbackParam::operator==(v3, (unsigned __int8 *)v5) & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v8 < 0)
    {
      operator delete(__p);
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    else
    {
LABEL_10:
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    operator delete(v5[0]);
    return v3 != v4;
  }
  return this;
}

BOOL cricket::HasNack(_BOOL8 this, const cricket::Codec *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;

  v6 = 4;
  if (v5 <= (void **)"nack" && (char *)v5 + 4 > "nack")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)v5, "nack");
    __p = 0;
    v8 = 0;
    v3 = *(_QWORD *)(this + 192);
    v4 = *(_QWORD *)(this + 200);
    if (v3 == v4)
      goto LABEL_10;
    while ((cricket::FeedbackParam::operator==(v3, (unsigned __int8 *)v5) & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v8 < 0)
    {
      operator delete(__p);
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    else
    {
LABEL_10:
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    operator delete(v5[0]);
    return v3 != v4;
  }
  return this;
}

BOOL cricket::HasRrtr(_BOOL8 this, const cricket::Codec *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;

  v6 = 4;
  if (v5 <= (void **)"rrtr" && (char *)v5 + 4 > "rrtr")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)v5, "rrtr");
    __p = 0;
    v8 = 0;
    v3 = *(_QWORD *)(this + 192);
    v4 = *(_QWORD *)(this + 200);
    if (v3 == v4)
      goto LABEL_10;
    while ((cricket::FeedbackParam::operator==(v3, (unsigned __int8 *)v5) & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v8 < 0)
    {
      operator delete(__p);
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    else
    {
LABEL_10:
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    operator delete(v5[0]);
    return v3 != v4;
  }
  return this;
}

BOOL cricket::HasTransportCc(_BOOL8 this, const cricket::Codec *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;

  v6 = 12;
  if (v5 <= (void **)"transport-cc" && (char *)&v5[1] + 4 > "transport-cc")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)v5, "transport-cc");
    __p = 0;
    v8 = 0;
    v3 = *(_QWORD *)(this + 192);
    v4 = *(_QWORD *)(this + 200);
    if (v3 == v4)
      goto LABEL_10;
    while ((cricket::FeedbackParam::operator==(v3, (unsigned __int8 *)v5) & 1) == 0)
    {
      v3 += 48;
      if (v3 == v4)
      {
        v3 = v4;
        break;
      }
    }
    if (v8 < 0)
    {
      operator delete(__p);
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    else
    {
LABEL_10:
      if ((v6 & 0x80000000) == 0)
        return v3 != v4;
    }
    operator delete(v5[0]);
    return v3 != v4;
  }
  return this;
}

uint64_t cricket::FindMatchingVideoCodec(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  char v10;
  const void **v11;
  _QWORD *v12;
  const void **v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  std::string v42;
  uint64_t **v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *__p;
  std::string v48;
  uint64_t *v49;
  uint64_t v50[2];
  uint64_t v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v48 = *(std::string *)(a2 + 16);
  v50[0] = 0;
  v50[1] = 0;
  v49 = v50;
  v4 = *(_QWORD **)(a2 + 168);
  v5 = (_QWORD *)(a2 + 176);
  if (v4 != v5)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v49, v50, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v37 = (_QWORD *)v4[1];
      if (v37)
      {
        do
        {
          v38 = v37;
          v37 = (_QWORD *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          v38 = (_QWORD *)v4[2];
          v21 = *v38 == (_QWORD)v4;
          v4 = v38;
        }
        while (!v21);
      }
      v4 = v38;
    }
    while (v38 != v5);
  }
  v51 = 0;
  v6 = *a1;
  v39 = a1[1];
  if (*a1 == v39)
  {
    v6 = 0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v49, v50[0]);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v6;
LABEL_75:
    operator delete(v48.__r_.__value_.__l.__data_);
    return v6;
  }
  while (1)
  {
    if (*(char *)(v6 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
      v44 = 0;
      v45 = 0;
      v43 = (uint64_t **)&v44;
      v7 = *(_QWORD **)(v6 + 168);
      v8 = (_QWORD *)(v6 + 176);
      if (v7 == (_QWORD *)(v6 + 176))
        goto LABEL_10;
LABEL_15:
      v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v43, (uint64_t *)&v44, &v41, &v40, (uint64_t)(v7 + 4));
      if (*v11)
      {
        v12 = (_QWORD *)v7[1];
        if (!v12)
          goto LABEL_49;
        goto LABEL_43;
      }
      v13 = v11;
      v14 = (char *)operator new(0x50uLL);
      v15 = (std::string *)(v14 + 32);
      if (*((char *)v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v15, (const std::string::value_type *)v7[4], v7[5]);
        v17 = (std::string *)(v14 + 56);
        if ((*((char *)v7 + 79) & 0x80000000) == 0)
          goto LABEL_20;
      }
      else
      {
        v16 = *((_OWORD *)v7 + 2);
        *((_QWORD *)v14 + 6) = v7[6];
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        v17 = (std::string *)(v14 + 56);
        if ((*((char *)v7 + 79) & 0x80000000) == 0)
        {
LABEL_20:
          v18 = *(_OWORD *)(v7 + 7);
          v17->__r_.__value_.__r.__words[2] = v7[9];
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          goto LABEL_23;
        }
      }
      std::string::__init_copy_ctor_external(v17, (const std::string::value_type *)v7[7], v7[8]);
LABEL_23:
      v19 = v41;
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v19;
      *v13 = v14;
      if (*v43)
      {
        v43 = (uint64_t **)*v43;
        v14 = (char *)*v13;
      }
      v20 = (uint64_t)v44;
      v21 = v14 == v44;
      v14[24] = v14 == v44;
      if (v21)
      {
LABEL_42:
        ++v45;
        v12 = (_QWORD *)v7[1];
        if (!v12)
          goto LABEL_49;
        goto LABEL_43;
      }
      while (1)
      {
        v22 = *((_QWORD *)v14 + 2);
        if (*(_BYTE *)(v22 + 24))
          goto LABEL_42;
        v23 = *(_BYTE **)(v22 + 16);
        v24 = *(_QWORD *)v23;
        if (*(_QWORD *)v23 == v22)
        {
          v27 = *((_QWORD *)v23 + 1);
          if (!v27 || (v28 = *(unsigned __int8 *)(v27 + 24), v25 = (_BYTE *)(v27 + 24), v28))
          {
            if (*(char **)v22 == v14)
            {
              *(_BYTE *)(v22 + 24) = 1;
              v23[24] = 0;
              v31 = *(_QWORD *)(v22 + 8);
              *(_QWORD *)v23 = v31;
              if (v31)
                goto LABEL_40;
            }
            else
            {
              v29 = *(uint64_t **)(v22 + 8);
              v30 = *v29;
              *(_QWORD *)(v22 + 8) = *v29;
              if (v30)
              {
                *(_QWORD *)(v30 + 16) = v22;
                v23 = *(_BYTE **)(v22 + 16);
              }
              v29[2] = (uint64_t)v23;
              *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * (**(_QWORD **)(v22 + 16) != v22)) = v29;
              *v29 = v22;
              *(_QWORD *)(v22 + 16) = v29;
              v23 = (_BYTE *)v29[2];
              v22 = *(_QWORD *)v23;
              *((_BYTE *)v29 + 24) = 1;
              v23[24] = 0;
              v31 = *(_QWORD *)(v22 + 8);
              *(_QWORD *)v23 = v31;
              if (v31)
LABEL_40:
                *(_QWORD *)(v31 + 16) = v23;
            }
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_QWORD *)(*((_QWORD *)v23 + 2) + 8 * (**((_QWORD **)v23 + 2) != (_QWORD)v23)) = v22;
            *(_QWORD *)(v22 + 8) = v23;
            *((_QWORD *)v23 + 2) = v22;
            goto LABEL_42;
          }
        }
        else if (!v24 || (v26 = *(unsigned __int8 *)(v24 + 24), v25 = (_BYTE *)(v24 + 24), v26))
        {
          if (*(char **)v22 == v14)
          {
            v35 = *((_QWORD *)v14 + 1);
            *(_QWORD *)v22 = v35;
            if (v35)
            {
              *(_QWORD *)(v35 + 16) = v22;
              v23 = *(_BYTE **)(v22 + 16);
            }
            *((_QWORD *)v14 + 2) = v23;
            *(_QWORD *)(*(_QWORD *)(v22 + 16) + 8 * (**(_QWORD **)(v22 + 16) != v22)) = v14;
            *((_QWORD *)v14 + 1) = v22;
            *(_QWORD *)(v22 + 16) = v14;
            v23 = (_BYTE *)*((_QWORD *)v14 + 2);
            v14[24] = 1;
            v23[24] = 0;
            v33 = (uint64_t *)*((_QWORD *)v23 + 1);
            v34 = *v33;
            *((_QWORD *)v23 + 1) = *v33;
            if (v34)
LABEL_47:
              *(_QWORD *)(v34 + 16) = v23;
          }
          else
          {
            *(_BYTE *)(v22 + 24) = 1;
            v23[24] = 0;
            v33 = (uint64_t *)*((_QWORD *)v23 + 1);
            v34 = *v33;
            *((_QWORD *)v23 + 1) = *v33;
            if (v34)
              goto LABEL_47;
          }
          v33[2] = *((_QWORD *)v23 + 2);
          *(_QWORD *)(*((_QWORD *)v23 + 2) + 8 * (**((_QWORD **)v23 + 2) != (_QWORD)v23)) = v33;
          *v33 = (uint64_t)v23;
          *((_QWORD *)v23 + 2) = v33;
          ++v45;
          v12 = (_QWORD *)v7[1];
          if (!v12)
          {
            do
            {
LABEL_49:
              v32 = (_QWORD *)v7[2];
              v21 = *v32 == (_QWORD)v7;
              v7 = v32;
            }
            while (!v21);
            goto LABEL_14;
          }
          do
          {
LABEL_43:
            v32 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
LABEL_14:
          v7 = v32;
          if (v32 == v8)
            goto LABEL_10;
          goto LABEL_15;
        }
        *(_BYTE *)(v22 + 24) = 1;
        v14 = v23;
        v23[24] = v23 == (_BYTE *)v20;
        *v25 = 1;
        if (v23 == (_BYTE *)v20)
          goto LABEL_42;
      }
    }
    v42 = *(std::string *)(v6 + 16);
    v43 = (uint64_t **)&v44;
    v44 = 0;
    v45 = 0;
    v7 = *(_QWORD **)(v6 + 168);
    v8 = (_QWORD *)(v6 + 176);
    if (v7 != (_QWORD *)(v6 + 176))
      goto LABEL_15;
LABEL_10:
    v46 = 0;
    webrtc::SdpVideoFormat::IsSameCodec((webrtc::SdpVideoFormat *)&v48, (const webrtc::SdpVideoFormat *)&v42);
    v10 = v9;
    if ((v46 & 1) == 0)
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v43, (uint64_t)v44);
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
LABEL_59:
      operator delete(v42.__r_.__value_.__l.__data_);
      if ((v10 & 1) != 0)
        break;
      goto LABEL_60;
    }
    operator delete(__p);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v43, (uint64_t)v44);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_59;
LABEL_12:
    if ((v10 & 1) != 0)
      break;
LABEL_60:
    v6 += 216;
    if (v6 == v39)
    {
      v6 = 0;
      break;
    }
  }
  if ((v51 & 1) != 0)
  {
    operator delete(v52);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v49, v50[0]);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v6;
    goto LABEL_75;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v49, v50[0]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
  return v6;
}

void cricket::FindAllMatchingCodecs(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  const void **v16;
  _QWORD *v17;
  const void **v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _OWORD *v57;
  char *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  std::string v66;
  uint64_t **v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  void *__p;
  std::string v72;
  uint64_t *v73;
  uint64_t v74[2];
  uint64_t v75;
  void *v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    v72 = *(std::string *)(a2 + 16);
  v74[0] = 0;
  v74[1] = 0;
  v73 = v74;
  v5 = *(_QWORD **)(a2 + 168);
  if (v5 != (_QWORD *)(a2 + 176))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(&v73, v74, (uint64_t)(v5 + 4), (uint64_t)(v5 + 4));
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (_QWORD *)(a2 + 176));
  }
  v75 = 0;
  v6 = *a1;
  v63 = a1[1];
  if (*a1 != v63)
  {
    v7 = a3;
    while ((*(char *)(v6 + 39) & 0x80000000) == 0)
    {
      v66 = *(std::string *)(v6 + 16);
      v67 = (uint64_t **)&v68;
      v68 = 0;
      v69 = 0;
      v12 = *(_QWORD **)(v6 + 168);
      v13 = (_QWORD *)(v6 + 176);
      if (v12 != (_QWORD *)(v6 + 176))
        goto LABEL_27;
LABEL_22:
      v70 = 0;
      webrtc::SdpVideoFormat::IsSameCodec((webrtc::SdpVideoFormat *)&v72, (const webrtc::SdpVideoFormat *)&v66);
      v15 = v14;
      if ((v70 & 1) == 0)
      {
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v67, (uint64_t)v68);
        if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_24;
LABEL_71:
        operator delete(v66.__r_.__value_.__l.__data_);
        if (!v15)
          goto LABEL_17;
        goto LABEL_72;
      }
      operator delete(__p);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v67, (uint64_t)v68);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_71;
LABEL_24:
      if (!v15)
        goto LABEL_17;
LABEL_72:
      v41 = (char *)v7[1];
      v40 = v7[2];
      if ((unint64_t)v41 < v40)
      {
        if (!v41)
          goto LABEL_97;
        *(_QWORD *)v41 = v6;
        v11 = v41 + 8;
        goto LABEL_16;
      }
      v42 = (char *)*v7;
      v43 = (uint64_t)&v41[-*v7];
      v44 = v43 >> 3;
      v45 = (v43 >> 3) + 1;
      if (v45 >> 61)
LABEL_98:
        abort();
      v46 = v40 - (_QWORD)v42;
      if (v46 >> 2 > v45)
        v45 = v46 >> 2;
      v47 = (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8;
      v48 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v47)
        v48 = v45;
      if (!v48)
      {
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v49 = 8 * v48;
      v50 = operator new(8 * v48);
      v51 = &v50[8 * v44];
      *v51 = v6;
      v11 = v51 + 1;
      if (v41 == v42)
      {
        v7 = a3;
        *a3 = v51;
        a3[2] = &v50[v49];
        if (!v41)
          goto LABEL_16;
        goto LABEL_91;
      }
      v52 = v41 - v42 - 8;
      if (v52 < 0x58)
      {
        v7 = a3;
        do
        {
LABEL_89:
          v61 = *((_QWORD *)v41 - 1);
          v41 -= 8;
          *--v51 = v61;
        }
        while (v41 != v42);
        goto LABEL_90;
      }
      v53 = v41 - &v50[v43];
      v7 = a3;
      if (v53 < 0x20)
        goto LABEL_89;
      v54 = (v52 >> 3) + 1;
      v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
      v56 = &v41[-v55];
      v51 = (_QWORD *)((char *)v51 - v55);
      v57 = &v50[8 * v44 - 16];
      v58 = v41 - 16;
      v59 = v54 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v60 = *(_OWORD *)v58;
        *(v57 - 1) = *((_OWORD *)v58 - 1);
        *v57 = v60;
        v57 -= 2;
        v58 -= 32;
        v59 -= 4;
      }
      while (v59);
      v41 = v56;
      if (v54 != (v54 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_89;
LABEL_90:
      v41 = v42;
      *v7 = v51;
      v7[2] = &v50[v49];
      if (v42)
LABEL_91:
        operator delete(v41);
LABEL_16:
      v7[1] = v11;
LABEL_17:
      v6 += 216;
      if (v6 == v63)
      {
        if ((v75 & 1) != 0)
          operator delete(v76);
        goto LABEL_94;
      }
    }
    std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)(v6 + 16), *(_QWORD *)(v6 + 24));
    v68 = 0;
    v69 = 0;
    v67 = (uint64_t **)&v68;
    v12 = *(_QWORD **)(v6 + 168);
    v13 = (_QWORD *)(v6 + 176);
    if (v12 == (_QWORD *)(v6 + 176))
      goto LABEL_22;
LABEL_27:
    v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t **)&v67, (uint64_t *)&v68, &v65, &v64, (uint64_t)(v12 + 4));
    if (*v16)
    {
      v17 = (_QWORD *)v12[1];
      if (!v17)
        goto LABEL_61;
      goto LABEL_55;
    }
    v18 = v16;
    v19 = (char *)operator new(0x50uLL);
    v20 = (std::string *)(v19 + 32);
    if (*((char *)v12 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)v12[4], v12[5]);
      v22 = (std::string *)(v19 + 56);
      if ((*((char *)v12 + 79) & 0x80000000) == 0)
        goto LABEL_32;
    }
    else
    {
      v21 = *((_OWORD *)v12 + 2);
      *((_QWORD *)v19 + 6) = v12[6];
      *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
      v22 = (std::string *)(v19 + 56);
      if ((*((char *)v12 + 79) & 0x80000000) == 0)
      {
LABEL_32:
        v23 = *(_OWORD *)(v12 + 7);
        v22->__r_.__value_.__r.__words[2] = v12[9];
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
        goto LABEL_35;
      }
    }
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v12[7], v12[8]);
LABEL_35:
    v24 = v65;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = v24;
    *v18 = v19;
    if (*v67)
    {
      v67 = (uint64_t **)*v67;
      v19 = (char *)*v18;
    }
    v25 = (uint64_t)v68;
    v10 = v19 == v68;
    v19[24] = v19 == v68;
    if (v10)
    {
LABEL_54:
      ++v69;
      v17 = (_QWORD *)v12[1];
      if (!v17)
        goto LABEL_61;
      goto LABEL_55;
    }
    while (1)
    {
      v26 = *((_QWORD *)v19 + 2);
      if (*(_BYTE *)(v26 + 24))
        goto LABEL_54;
      v27 = *(_BYTE **)(v26 + 16);
      v28 = *(_QWORD *)v27;
      if (*(_QWORD *)v27 == v26)
      {
        v31 = *((_QWORD *)v27 + 1);
        if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
        {
          if (*(char **)v26 == v19)
          {
            *(_BYTE *)(v26 + 24) = 1;
            v27[24] = 0;
            v35 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)v27 = v35;
            if (v35)
              goto LABEL_52;
          }
          else
          {
            v33 = *(uint64_t **)(v26 + 8);
            v34 = *v33;
            *(_QWORD *)(v26 + 8) = *v33;
            if (v34)
            {
              *(_QWORD *)(v34 + 16) = v26;
              v27 = *(_BYTE **)(v26 + 16);
            }
            v33[2] = (uint64_t)v27;
            *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
            *v33 = v26;
            *(_QWORD *)(v26 + 16) = v33;
            v27 = (_BYTE *)v33[2];
            v26 = *(_QWORD *)v27;
            *((_BYTE *)v33 + 24) = 1;
            v27[24] = 0;
            v35 = *(_QWORD *)(v26 + 8);
            *(_QWORD *)v27 = v35;
            if (v35)
LABEL_52:
              *(_QWORD *)(v35 + 16) = v27;
          }
          *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
          *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v26;
          *(_QWORD *)(v26 + 8) = v27;
          *((_QWORD *)v27 + 2) = v26;
          goto LABEL_54;
        }
      }
      else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
      {
        if (*(char **)v26 == v19)
        {
          v39 = *((_QWORD *)v19 + 1);
          *(_QWORD *)v26 = v39;
          if (v39)
          {
            *(_QWORD *)(v39 + 16) = v26;
            v27 = *(_BYTE **)(v26 + 16);
          }
          *((_QWORD *)v19 + 2) = v27;
          *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v19;
          *((_QWORD *)v19 + 1) = v26;
          *(_QWORD *)(v26 + 16) = v19;
          v27 = (_BYTE *)*((_QWORD *)v19 + 2);
          v19[24] = 1;
          v27[24] = 0;
          v37 = (uint64_t *)*((_QWORD *)v27 + 1);
          v38 = *v37;
          *((_QWORD *)v27 + 1) = *v37;
          if (v38)
LABEL_59:
            *(_QWORD *)(v38 + 16) = v27;
        }
        else
        {
          *(_BYTE *)(v26 + 24) = 1;
          v27[24] = 0;
          v37 = (uint64_t *)*((_QWORD *)v27 + 1);
          v38 = *v37;
          *((_QWORD *)v27 + 1) = *v37;
          if (v38)
            goto LABEL_59;
        }
        v37[2] = *((_QWORD *)v27 + 2);
        *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v37;
        *v37 = (uint64_t)v27;
        *((_QWORD *)v27 + 2) = v37;
        ++v69;
        v17 = (_QWORD *)v12[1];
        if (!v17)
        {
          do
          {
LABEL_61:
            v36 = (_QWORD *)v12[2];
            v10 = *v36 == (_QWORD)v12;
            v12 = v36;
          }
          while (!v10);
          goto LABEL_26;
        }
        do
        {
LABEL_55:
          v36 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
LABEL_26:
        v12 = v36;
        if (v36 == v13)
          goto LABEL_22;
        goto LABEL_27;
      }
      *(_BYTE *)(v26 + 24) = 1;
      v19 = v27;
      v27[24] = v27 == (_BYTE *)v25;
      *v29 = 1;
      if (v27 == (_BYTE *)v25)
        goto LABEL_54;
    }
  }
LABEL_94:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v73, v74[0]);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
}

void cricket::AddH264ConstrainedBaselineProfileToSupportedFormats(uint64_t a1)
{
  unint64_t v1;
  std::string *v2;
  uint64_t v5;
  _DWORD *v6;
  unint64_t v8;
  char v9;
  int v10;
  const void **v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  _OWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  std::string::size_type size;
  std::string *v20;
  unint64_t v22;
  char v23;
  webrtc::SdpVideoFormat *v24;
  std::string *v25;
  unint64_t v26;
  std::string *v27;
  const webrtc::SdpVideoFormat *v28;
  uint64_t v29;
  std::string *v30;
  const webrtc::SdpVideoFormat *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string *v40;
  std::string *v41;
  void *v42;
  void *__p[4];
  void *v44[2];
  uint64_t v45;
  char v46;
  int v47;
  int v48;
  void *v49;
  std::string *v50;
  unint64_t v51;
  uint64_t v52;
  std::string v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;
  void *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v2 = *(std::string **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v1)
    goto LABEL_73;
  if (__p > (void **)"profile-level-id" || &__p[2] <= (void **)"profile-level-id")
  {
    v1 = *(_QWORD *)a1;
    while (1)
    {
      if (*(char *)(v1 + 23) < 0)
      {
        v5 = *(_QWORD *)(v1 + 8);
        if (v5 < 0)
          goto LABEL_84;
        v6 = *(_DWORD **)v1;
        if (v5 && v6 == 0)
          goto LABEL_84;
      }
      else
      {
        v5 = *(unsigned __int8 *)(v1 + 23);
        v6 = (_DWORD *)v1;
      }
      if (v5 == 4 && *v6 == *(_DWORD *)"H264")
      {
        v8 = webrtc::ParseSdpForH264ProfileLevelId(v1 + 24);
        if (v9)
        {
          v10 = HIDWORD(v8);
          if ((_DWORD)v8)
            break;
        }
      }
LABEL_9:
      v1 += 96;
      if (v1 == *(_QWORD *)(a1 + 8))
        goto LABEL_54;
    }
    webrtc::SdpVideoFormat::SdpVideoFormat(&v53, (const webrtc::SdpVideoFormat *)v1);
    v48 = v10;
    v47 = 0;
    webrtc::H264ProfileLevelIdToString(&v47, (int *)v44);
    if (!v46)
      goto LABEL_84;
    HIBYTE(__p[2]) = 16;
    strcpy((char *)__p, "profile-level-id");
    v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v54, &v52, (const void **)__p);
    v12 = (char *)*v11;
    if (*v11)
    {
      v13 = v12 + 56;
      if ((v12[79] & 0x80000000) == 0)
        goto LABEL_24;
    }
    else
    {
      v14 = (uint64_t **)v11;
      v15 = operator new(0x50uLL);
      v15[2] = *(_OWORD *)__p;
      v16 = __p[2];
      memset(__p, 0, 24);
      *((_QWORD *)v15 + 6) = v16;
      *((_QWORD *)v15 + 7) = 0;
      *((_QWORD *)v15 + 8) = 0;
      *((_QWORD *)v15 + 9) = 0;
      v17 = v52;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = v17;
      *v14 = (uint64_t *)v15;
      v18 = (uint64_t *)v15;
      if (*v54)
      {
        v54 = (_QWORD *)*v54;
        v18 = *v14;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v55, v18);
      ++v56;
      v13 = (char *)v15 + 56;
      if ((*((char *)v15 + 79) & 0x80000000) == 0)
      {
LABEL_24:
        *(_OWORD *)v13 = *(_OWORD *)v44;
        *((_QWORD *)v13 + 2) = v45;
        HIBYTE(v45) = 0;
        LOBYTE(v44[0]) = 0;
        if (SHIBYTE(__p[2]) < 0)
        {
          operator delete(__p[0]);
          if (v46)
          {
            if (SHIBYTE(v45) < 0)
              operator delete(v44[0]);
          }
        }
        if ((unint64_t)v50 >= v51)
        {
          v50 = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)&v49, (const webrtc::SdpVideoFormat *)&v53);
          if ((v57 & 1) == 0)
            goto LABEL_7;
        }
        else
        {
          if (!v50)
            goto LABEL_84;
          v50 = webrtc::SdpVideoFormat::SdpVideoFormat(v50, (const webrtc::SdpVideoFormat *)&v53) + 4;
          if ((v57 & 1) == 0)
            goto LABEL_7;
        }
        operator delete(v58);
LABEL_7:
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v54, (uint64_t)v55);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        goto LABEL_9;
      }
    }
    operator delete(*(void **)v13);
    goto LABEL_24;
  }
  while (1)
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      size = v2->__r_.__value_.__l.__size_;
      if ((size & 0x8000000000000000) != 0)
        goto LABEL_84;
      v20 = (std::string *)v2->__r_.__value_.__r.__words[0];
      if (size && v20 == 0)
        goto LABEL_84;
    }
    else
    {
      size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
      v20 = v2;
    }
    if (size == 4 && LODWORD(v20->__r_.__value_.__l.__data_) == *(_DWORD *)"H264")
      break;
LABEL_40:
    v2 += 4;
    if (v2 == (std::string *)v1)
      goto LABEL_54;
  }
  v22 = webrtc::ParseSdpForH264ProfileLevelId((unint64_t)&v2[1]);
  if (!v23 || (v1 = v22, !(_DWORD)v22))
  {
    v1 = *(_QWORD *)(a1 + 8);
    goto LABEL_40;
  }
  webrtc::SdpVideoFormat::SdpVideoFormat(&v53, (const webrtc::SdpVideoFormat *)v2);
  v48 = HIDWORD(v1);
  v47 = 0;
  webrtc::H264ProfileLevelIdToString(&v47, (int *)v44);
  if (!v46)
LABEL_84:
    __break(1u);
  HIBYTE(__p[2]) = 16;
  __break(1u);
LABEL_54:
  v24 = (webrtc::SdpVideoFormat *)v49;
  v25 = v50;
  if (v49 != v50)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1 - *(_QWORD *)a1) >> 5);
    do
    {
      v28 = *(const webrtc::SdpVideoFormat **)a1;
      v29 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
      if (v29)
        v30 = *(std::string **)a1;
      else
        v30 = 0;
      if (v29)
      {
        v31 = (const webrtc::SdpVideoFormat *)((char *)v30 + v29);
        do
        {
          webrtc::SdpVideoFormat::IsSameCodec(v24, v28);
          if ((v32 & 1) != 0)
            goto LABEL_58;
          v28 = (const webrtc::SdpVideoFormat *)((char *)v28 + 96);
        }
        while (v28 != v31);
        v28 = *(const webrtc::SdpVideoFormat **)(a1 + 8);
      }
      if ((unint64_t)v28 >= *(_QWORD *)(a1 + 16))
      {
        v27 = std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>((std::string **)a1, v24);
      }
      else
      {
        if (!v28)
          goto LABEL_84;
        webrtc::SdpVideoFormat::SdpVideoFormat((std::string *)v28, v24);
        v27 = (std::string *)((char *)v28 + 96);
      }
      *(_QWORD *)(a1 + 8) = v27;
LABEL_58:
      v24 = (webrtc::SdpVideoFormat *)((char *)v24 + 96);
    }
    while (v24 != (webrtc::SdpVideoFormat *)v25);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5) > v26
      && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log("\r\t", v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/media/base/codec.cc");
    }
  }
LABEL_73:
  v40 = (std::string *)v49;
  if (v49)
  {
    v41 = v50;
    v42 = v49;
    if (v50 != v49)
    {
      do
      {
        while (1)
        {
          if ((v41[-2].__r_.__value_.__s.__data_[0] & 1) != 0)
            operator delete((void *)v41[-2].__r_.__value_.__l.__size_);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v41[-3], v41[-3].__r_.__value_.__l.__size_);
          if (SHIBYTE(v41[-4].__r_.__value_.__r.__words[2]) < 0)
            break;
          v41 -= 4;
          if (v41 == v40)
            goto LABEL_81;
        }
        operator delete(v41[-4].__r_.__value_.__l.__data_);
        v41 -= 4;
      }
      while (v41 != v40);
LABEL_81:
      v42 = v49;
    }
    v50 = v40;
    operator delete(v42);
  }
}

unint64_t *cricket::CreateVideoCodec@<X0>(cricket *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *v5;
  _QWORD *v6;

  *a2 = &off_24C0B1418;
  a2[1] = 1;
  v5 = (std::string *)(a2 + 2);
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2[4] = *((_QWORD *)this + 2);
  }
  a2[11] = 0;
  v6 = a2 + 11;
  *(v6 - 6) = 90000;
  *(v6 - 5) = 0;
  *((_BYTE *)v6 - 32) = 0;
  *((_BYTE *)v6 - 8) = 0;
  *((_BYTE *)v6 + 48) = 0;
  *((_BYTE *)v6 + 72) = 0;
  v6[11] = 0;
  v6[10] = v6 + 11;
  v6[12] = 0;
  v6[13] = 0;
  v6[14] = 0;
  v6[15] = 0;
  if (v6 + 10 != (_QWORD *)((char *)this + 24))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v6 + 10), *((char **)this + 3), (char *)this + 32);
  return absl::InlinedVector<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::operator=(v6, (unint64_t *)this + 6);
}

char *std::vector<cricket::FeedbackParam>::__push_back_slow_path<cricket::FeedbackParam const&>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char *v13;
  void **v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  void **v18;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_30:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x555555555555555)
    goto LABEL_30;
  v7 = 2 * v5;
  v8 = (std::string *)operator new(48 * v5);
  v9 = v8;
  v10 = v8 + 2 * v2;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 2 * v2, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v11 = v9 + 2 * v2 + 1;
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
    {
LABEL_11:
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
      v11->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
      v12 = &v9[v7];
      v13 = (char *)&v10[2];
      v14 = (void **)*a1;
      v15 = (void **)a1[1];
      if (v15 == *a1)
        goto LABEL_24;
      goto LABEL_15;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v8 + 2 * v2 + 1;
    if ((*(char *)(a2 + 47) & 0x80000000) == 0)
      goto LABEL_11;
  }
  std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  v12 = &v9[v7];
  v13 = (char *)&v10[2];
  v14 = (void **)*a1;
  v15 = (void **)a1[1];
  if (v15 != *a1)
  {
    do
    {
LABEL_15:
      v16 = *((_OWORD *)v15 - 3);
      v10[-2].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v15 - 4);
      *(_OWORD *)&v10[-2].__r_.__value_.__l.__data_ = v16;
      *(v15 - 5) = 0;
      *(v15 - 4) = 0;
      *(v15 - 6) = 0;
      v17 = *(_OWORD *)(v15 - 3);
      v10[-1].__r_.__value_.__r.__words[2] = (std::string::size_type)*(v15 - 1);
      *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v17;
      v10 -= 2;
      *(v15 - 2) = 0;
      *(v15 - 1) = 0;
      *(v15 - 3) = 0;
      v15 -= 6;
    }
    while (v15 != v14);
    v15 = (void **)*a1;
    v18 = (void **)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v12;
    while (1)
    {
      if (v18 == v15)
        goto LABEL_25;
      if (*((char *)v18 - 1) < 0)
      {
        operator delete(*(v18 - 3));
        if ((*((char *)v18 - 25) & 0x80000000) == 0)
          goto LABEL_17;
      }
      else if ((*((char *)v18 - 25) & 0x80000000) == 0)
      {
        goto LABEL_17;
      }
      operator delete(*(v18 - 6));
LABEL_17:
      v18 -= 6;
    }
  }
LABEL_24:
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v12;
LABEL_25:
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<cricket::FeedbackParam>::__init_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      abort();
    v7 = 48 * a4;
    v8 = (char *)operator new(48 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v7];
    if (a2 != a3)
    {
      v9 = 0;
      while (1)
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
          v12 = (std::string *)&v8[v9 + 24];
          v13 = a2 + v9;
          v14 = a2 + v9 + 24;
          if ((*(char *)(a2 + v9 + 47) & 0x80000000) == 0)
            goto LABEL_10;
LABEL_5:
          std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v14, *(_QWORD *)(v13 + 32));
          v9 += 48;
          if (a2 + v9 == a3)
            goto LABEL_11;
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
          v12 = (std::string *)&v8[v9 + 24];
          v13 = a2 + v9;
          v14 = a2 + v9 + 24;
          if (*(char *)(a2 + v9 + 47) < 0)
            goto LABEL_5;
LABEL_10:
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v14;
          v12->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
          v9 += 48;
          if (a2 + v9 == a3)
          {
LABEL_11:
            v8 += v9;
            break;
          }
        }
      }
    }
    a1[1] = v8;
  }
}

void std::vector<cricket::FeedbackParam>::__assign_with_size[abi:sn180100]<cricket::FeedbackParam*,cricket::FeedbackParam*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;

  v8 = a1[2];
  v9 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v9) >> 4) < a4)
    {
      v12 = a2 + 16 * ((a1[1] - v9) >> 4);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::FeedbackParam *,cricket::FeedbackParam *,cricket::FeedbackParam *>(a2, v12, v9);
      v13 = a1[1];
      if (v12 == a3)
      {
LABEL_22:
        a1[1] = v13;
        return;
      }
      v14 = 0;
      while (1)
      {
        v16 = (std::string *)(v13 + v14);
        if (!(v13 + v14))
        {
          __break(1u);
          goto LABEL_51;
        }
        v17 = (__int128 *)(v12 + v14);
        if (*(char *)(v12 + v14 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)(v12 + v14), *(_QWORD *)(v12 + v14 + 8));
          v19 = (std::string *)(v13 + v14 + 24);
          v20 = v12 + v14;
          v21 = v12 + v14 + 24;
          if ((*(char *)(v12 + v14 + 47) & 0x80000000) == 0)
            goto LABEL_14;
LABEL_20:
          std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v21, *(_QWORD *)(v20 + 32));
          v14 += 48;
          if (v12 + v14 == a3)
          {
LABEL_21:
            v13 += v14;
            goto LABEL_22;
          }
        }
        else
        {
          v18 = *v17;
          v16->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
          v19 = (std::string *)(v13 + v14 + 24);
          v20 = v12 + v14;
          v21 = v12 + v14 + 24;
          if (*(char *)(v12 + v14 + 47) < 0)
            goto LABEL_20;
LABEL_14:
          v15 = *(_OWORD *)v21;
          v19->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
          *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v15;
          v14 += 48;
          if (v12 + v14 == a3)
            goto LABEL_21;
        }
      }
    }
    v22 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::FeedbackParam *,cricket::FeedbackParam *,cricket::FeedbackParam *>(a2, a3, v9);
    v23 = a1[1];
    if (v23 == v22)
    {
LABEL_24:
      a1[1] = v22;
      return;
    }
    while (1)
    {
      if (*(char *)(v23 - 1) < 0)
      {
        operator delete(*(void **)(v23 - 24));
        if (*(char *)(v23 - 25) < 0)
LABEL_30:
          operator delete(*(void **)(v23 - 48));
      }
      else if (*(char *)(v23 - 25) < 0)
      {
        goto LABEL_30;
      }
      v23 -= 48;
      if (v23 == v22)
        goto LABEL_24;
    }
  }
  if (!v9)
    goto LABEL_33;
  v10 = a1[1];
  v11 = (void *)*a1;
  if (v10 != v9)
  {
    while (1)
    {
      if (*(char *)(v10 - 1) < 0)
      {
        operator delete(*(void **)(v10 - 24));
        if (*(char *)(v10 - 25) < 0)
LABEL_10:
          operator delete(*(void **)(v10 - 48));
      }
      else if (*(char *)(v10 - 25) < 0)
      {
        goto LABEL_10;
      }
      v10 -= 48;
      if (v10 == v9)
      {
        v11 = (void *)*a1;
        break;
      }
    }
  }
  a1[1] = v9;
  operator delete(v11);
  v8 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_33:
  if (a4 > 0x555555555555555)
    goto LABEL_51;
  v24 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
  v25 = 2 * v24;
  if (2 * v24 <= a4)
    v25 = a4;
  v26 = v24 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v25;
  if (v26 > 0x555555555555555)
LABEL_51:
    abort();
  v27 = 48 * v26;
  v28 = (char *)operator new(48 * v26);
  *a1 = (uint64_t)v28;
  a1[1] = (uint64_t)v28;
  a1[2] = (uint64_t)&v28[v27];
  if (a2 == a3)
    goto LABEL_49;
  v29 = 0;
  do
  {
    while (1)
    {
      v30 = (std::string *)&v28[v29];
      v31 = a2 + v29;
      if ((*(char *)(a2 + v29 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
      v32 = (std::string *)&v28[v29 + 24];
      v33 = a2 + v29;
      v34 = a2 + v29 + 24;
      if ((*(char *)(a2 + v29 + 47) & 0x80000000) == 0)
        goto LABEL_47;
LABEL_42:
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v34, *(_QWORD *)(v33 + 32));
      v29 += 48;
      if (a2 + v29 == a3)
        goto LABEL_48;
    }
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)v31;
    v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
    v32 = (std::string *)&v28[v29 + 24];
    v33 = a2 + v29;
    v34 = a2 + v29 + 24;
    if (*(char *)(a2 + v29 + 47) < 0)
      goto LABEL_42;
LABEL_47:
    *(_OWORD *)&v32->__r_.__value_.__l.__data_ = *(_OWORD *)v34;
    v32->__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
    v29 += 48;
  }
  while (a2 + v29 != a3);
LABEL_48:
  v28 += v29;
LABEL_49:
  a1[1] = (uint64_t)v28;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<cricket::FeedbackParam *,cricket::FeedbackParam *,cricket::FeedbackParam *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::string::value_type *v7;
  size_t v8;
  std::string *v9;
  __int128 *v10;
  char v11;
  __int128 v12;
  const std::string::value_type *v13;
  size_t v14;
  std::string *v15;
  char **v16;
  char v17;
  __int128 v18;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      if (a1 != a3)
      {
        v9 = (std::string *)(a3 + v6);
        v10 = (__int128 *)(a1 + v6);
        v11 = *(_BYTE *)(a1 + v6 + 23);
        if (*(char *)(a3 + v6 + 23) < 0)
        {
          if (v11 >= 0)
            v13 = (const std::string::value_type *)(a1 + v6);
          else
            v13 = *(const std::string::value_type **)(a1 + v6);
          if (v11 >= 0)
            v14 = *(unsigned __int8 *)(a1 + v6 + 23);
          else
            v14 = *(_QWORD *)(a1 + v6 + 8);
          std::string::__assign_no_alias<false>(v9, v13, v14);
        }
        else if ((*(_BYTE *)(a1 + v6 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, *(char **)(a1 + v6), *(_QWORD *)(a1 + v6 + 8));
        }
        else
        {
          v12 = *v10;
          v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
        }
        v15 = (std::string *)(a3 + v6 + 24);
        v16 = (char **)(a1 + v6 + 24);
        v17 = *(_BYTE *)(a1 + v6 + 47);
        if (*(char *)(a3 + v6 + 47) < 0)
        {
          if (v17 >= 0)
            v7 = (const std::string::value_type *)(a1 + v6 + 24);
          else
            v7 = *v16;
          if (v17 >= 0)
            v8 = *(unsigned __int8 *)(a1 + v6 + 47);
          else
            v8 = *(_QWORD *)(a1 + v6 + 32);
          std::string::__assign_no_alias<false>(v15, v7, v8);
        }
        else if ((*(_BYTE *)(a1 + v6 + 47) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v15, *v16, *(_QWORD *)(a1 + v6 + 32));
        }
        else
        {
          v18 = *(_OWORD *)v16;
          *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
        }
      }
      v6 += 48;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void cricket::`anonymous namespace'::GetFmtpParameterOrDefault(std::string *a1, uint64_t a2, const void **__s2, uint64_t a4)
{
  const void **v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  size_t v10;
  _QWORD *v11;
  size_t v12;
  BOOL v13;
  size_t v14;
  int v15;
  __int128 v16;

  v5 = __s2;
  v7 = (uint64_t *)(a2 + 8);
  v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__lower_bound<std::string>(a2, __s2, *(uint64_t **)(a2 + 8), (uint64_t *)(a2 + 8));
  if (v7 == v8)
    goto LABEL_22;
  v9 = v8;
  if (*((char *)v5 + 23) < 0)
  {
    v10 = (size_t)v5[1];
    if ((v10 & 0x8000000000000000) != 0)
      goto LABEL_27;
    v5 = (const void **)*v5;
    if (v10)
    {
      if (!v5)
        goto LABEL_27;
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)v5 + 23);
  }
  v11 = v8 + 4;
  if ((*((char *)v8 + 55) & 0x80000000) == 0)
  {
    v12 = *((unsigned __int8 *)v8 + 55);
    goto LABEL_14;
  }
  v12 = v8[5];
  if ((v12 & 0x8000000000000000) != 0 || ((v11 = (_QWORD *)*v11, v12) ? (v13 = v11 == 0) : (v13 = 0), v13))
  {
LABEL_27:
    __break(1u);
    return;
  }
LABEL_14:
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v5, v11, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else if (v10 >= v12)
  {
LABEL_19:
    if (*((char *)v9 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v9[7], v9[8]);
    }
    else
    {
      v16 = *(_OWORD *)(v9 + 7);
      a1->__r_.__value_.__r.__words[2] = v9[9];
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v16;
    }
    return;
  }
LABEL_22:
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a4 + 16);
  }
}

void cricket::`anonymous namespace'::AV1GetTierOrDefault(std::string *a1, uint64_t a2)
{
  BOOL v2;
  void *__p[2];
  char v4;
  void *__s2[2];
  char v6;

  v6 = 4;
  v2 = __s2 <= (void **)"tier" && (char *)__s2 + 4 > "tier";
  if (v2 || (strcpy((char *)__s2, "tier"), v4 = 1, __p <= (void **)"0") && (char *)__p + 1 > "0")
  {
    __break(1u);
    return;
  }
  LOWORD(__p[0]) = 48;
  if ((v4 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__s2[0]);
    return;
  }
  operator delete(__p[0]);
  if (v6 < 0)
    goto LABEL_11;
}

void cricket::`anonymous namespace'::AV1GetLevelIdxOrDefault(std::string *a1, uint64_t a2)
{
  BOOL v2;
  void *__p[2];
  char v4;
  void *__s2[2];
  char v6;

  v6 = 9;
  v2 = __s2 <= (void **)"level-idx" && (char *)&__s2[1] + 1 > "level-idx";
  if (v2 || (strcpy((char *)__s2, "level-idx"), v4 = 1, __p <= (void **)"5") && (char *)__p + 1 > "5")
  {
    __break(1u);
    return;
  }
  LOWORD(__p[0]) = 53;
  if ((v4 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__s2[0]);
    return;
  }
  operator delete(__p[0]);
  if (v6 < 0)
    goto LABEL_11;
}

void cricket::`anonymous namespace'::GetH265TxModeOrDefault(std::string *a1, uint64_t a2)
{
  BOOL v2;
  void *__p[2];
  char v4;
  void *__s2[2];
  char v6;

  v6 = 7;
  v2 = __s2 <= (void **)"tx-mode" && (char *)__s2 + 7 > "tx-mode";
  if (v2 || (strcpy((char *)__s2, "tx-mode"), v4 = 4, __p <= (void **)"SRST") && (char *)__p + 4 > "SRST")
  {
    __break(1u);
    return;
  }
  strcpy((char *)__p, "SRST");
  if ((v4 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(__s2[0]);
    return;
  }
  operator delete(__p[0]);
  if (v6 < 0)
    goto LABEL_11;
}

std::string *std::vector<webrtc::SdpVideoFormat>::__push_back_slow_path<webrtc::SdpVideoFormat const&>(std::string **a1, const webrtc::SdpVideoFormat *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string *v25;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0x155555555555555)
    v5 = 0x2AAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (!v5)
  {
    __break(1u);
LABEL_28:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x2AAAAAAAAAAAAAALL)
    goto LABEL_28;
  v7 = 4 * v5;
  v8 = (std::string *)operator new(96 * v5);
  v9 = &v8[v7];
  v10 = webrtc::SdpVideoFormat::SdpVideoFormat(v8 + 4 * v2, a2);
  v11 = v10 + 4;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v9;
  }
  else
  {
    v14 = 0;
    do
    {
      v18 = &v10[v14];
      v19 = (char *)&v13[v14];
      v20 = *(_OWORD *)&v13[v14 - 4].__r_.__value_.__l.__data_;
      v18[-4].__r_.__value_.__r.__words[2] = *((_QWORD *)&v13[v14 - 3] - 1);
      *(_OWORD *)&v18[-4].__r_.__value_.__l.__data_ = v20;
      *((_QWORD *)v19 - 11) = 0;
      *((_QWORD *)v19 - 10) = 0;
      *((_QWORD *)v19 - 12) = 0;
      v18[-3].__r_.__value_.__r.__words[0] = v13[v14 - 3].__r_.__value_.__r.__words[0];
      v21 = (char *)&v13[v14 - 2] - 16;
      v22 = *(_QWORD *)v21;
      *((_QWORD *)&v10[v14 - 2] - 2) = *(_QWORD *)v21;
      v23 = (uint64_t)&v10[v14 - 2] - 16;
      v24 = *((_QWORD *)&v13[v14 - 2] - 1);
      v18[-3].__r_.__value_.__r.__words[2] = v24;
      if (v24)
      {
        *(_QWORD *)(v22 + 16) = v23;
        *((_QWORD *)v19 - 9) = v21;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)&v13[v14 - 2] - 1) = 0;
      }
      else
      {
        v18[-3].__r_.__value_.__r.__words[0] = v23;
      }
      v15 = &v10[v14];
      v15[-2].__r_.__value_.__r.__words[0] = 0;
      v15[-2].__r_.__value_.__r.__words[0] = v13[v14 - 2].__r_.__value_.__r.__words[0];
      v16 = *((_OWORD *)&v13[v14 - 1] - 1);
      v17 = *(_OWORD *)&v13[v14 - 1].__r_.__value_.__l.__data_;
      v15[-1].__r_.__value_.__r.__words[2] = v13[v14 - 1].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15[-1].__r_.__value_.__l.__data_ = v17;
      *(_OWORD *)&v15[-2].__r_.__value_.__r.__words[1] = v16;
      v13[v14 - 2].__r_.__value_.__r.__words[0] = 0;
      v14 -= 4;
    }
    while (&v13[v14] != v12);
    v13 = *a1;
    v25 = a1[1];
    *a1 = &v10[v14];
    a1[1] = v11;
    a1[2] = v9;
    while (v25 != v13)
    {
      if ((v25[-2].__r_.__value_.__s.__data_[0] & 1) != 0)
        operator delete((void *)v25[-2].__r_.__value_.__l.__size_);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v25[-3], v25[-3].__r_.__value_.__l.__size_);
      if (SHIBYTE(v25[-4].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25[-4].__r_.__value_.__l.__data_);
      v25 -= 4;
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

unint64_t *absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v5 = v2 >> 1;
    if ((v2 & 1) != 0)
    {
      if (v5 <= 0x44)
        v8 = 68;
      else
        v8 = v2 >> 1;
      v6 = operator new(v8);
      v4[1] = (unint64_t)v6;
      v4[2] = v8;
      v7 = (const void *)a2[1];
    }
    else
    {
      v6 = result + 1;
      v7 = a2 + 1;
    }
    result = (unint64_t *)memcpy(v6, v7, v5);
    *v4 = *a2;
  }
  return result;
}

__n128 webrtc::ColorSpace::ColorSpace(__n128 *this, const ColorSpace *a2)
{
  __n128 result;
  __n128 v3;
  __n128 v4;

  *this = *(__n128 *)&a2->var0;
  result = *(__n128 *)&a2->var6.var0.var0;
  v3 = *(__n128 *)&a2->var6.var0.var1.var0.var2.var0;
  v4 = *(__n128 *)&a2->var6.var0.var1.var0.var4;
  this[4].n128_u8[0] = a2->var6.var1;
  this[2] = v3;
  this[3] = v4;
  this[1] = result;
  return result;
}

uint64_t webrtc::ColorSpace::primaries(webrtc::ColorSpace *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t webrtc::ColorSpace::transfer(webrtc::ColorSpace *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t webrtc::ColorSpace::matrix(webrtc::ColorSpace *this)
{
  return *((unsigned __int8 *)this + 2);
}

uint64_t webrtc::ColorSpace::range(webrtc::ColorSpace *this)
{
  return *((unsigned int *)this + 1);
}

unint64_t webrtc::ComfortNoise::Generate(webrtc::ComfortNoise *this, unint64_t a2, webrtc::AudioMultiVector *a3)
{
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  _QWORD *v18;
  int v19;
  int v20;
  __int16 v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;

  if ((*(uint64_t (**)(webrtc::AudioMultiVector *))(*(_QWORD *)a3 + 112))(a3) != 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/comfort_noise.cc");
    return 3;
  }
  v6 = *((unsigned __int8 *)this + 4);
  v7 = a2;
  if (*((_BYTE *)this + 4))
    v7 = *((_QWORD *)this + 1) + a2;
  (*(void (**)(webrtc::AudioMultiVector *, unint64_t))(*(_QWORD *)a3 + 128))(a3, v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  if (!v8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v31, v32, v33, v34, v35, v36, v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/comfort_noise.cc");
    return 1;
  }
  v9 = v8;
  v10 = operator new[]();
  v15 = v10;
  if (v7)
    v16 = v10;
  else
    v16 = 0;
  result = webrtc::ComfortNoiseDecoder::Generate(v9, v16, v7, v6 != 0, v11, v12, v13, v14);
  if ((result & 1) == 0)
  {
    (*(void (**)(webrtc::AudioMultiVector *, unint64_t))(*(_QWORD *)a3 + 24))(a3, a2);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v38, v39, v40, v41, v42, v43, v44, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/comfort_noise.cc");
    v30 = 2;
    goto LABEL_41;
  }
  v18 = (_QWORD *)*((_QWORD *)a3 + 1);
  if (*((_QWORD **)a3 + 2) != v18)
  {
    (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD))(*(_QWORD *)*v18 + 128))(*v18, v15, v7, 0);
    if (!*((_BYTE *)this + 4))
    {
LABEL_40:
      v30 = 0;
      *((_BYTE *)this + 4) = 0;
LABEL_41:
      MEMORY[0x20BD0ADD4](v15, 0x1000C80BDFB0063);
      return v30;
    }
    v19 = *(_DWORD *)this;
    if (*(_DWORD *)this == 8000)
    {
      v20 = 5461;
      v21 = -5461;
      v22 = 27307;
    }
    else if (v19 == 32000)
    {
      v20 = 1560;
      v21 = -1560;
      v22 = 31208;
    }
    else if (v19 == 16000)
    {
      v20 = 2979;
      v21 = -2979;
      v22 = 29789;
    }
    else
    {
      v20 = 1057;
      v21 = -1057;
      v22 = 31711;
    }
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 120))(*((_QWORD *)this + 3));
    v45 = *((_QWORD *)this + 1);
    if (!v45)
    {
LABEL_39:
      (*(void (**)(webrtc::AudioMultiVector *))(*(_QWORD *)a3 + 56))(a3);
      goto LABEL_40;
    }
    v46 = *(uint64_t **)(*((_QWORD *)this + 3) + 8);
    if (*(uint64_t **)(*((_QWORD *)this + 3) + 16) != v46)
    {
      v47 = (uint64_t *)*((_QWORD *)a3 + 1);
      if (*((uint64_t **)a3 + 2) != v47)
      {
        v48 = *v46;
        v49 = *(_QWORD *)(v48 + 8);
        v52 = v48 + 16;
        v50 = *(_QWORD *)(v48 + 16);
        v51 = *(_QWORD *)(v52 + 8);
        v53 = *v47;
        v55 = *(_QWORD *)(*v47 + 16);
        v54 = *(_QWORD *)(*v47 + 24);
        v56 = *(_QWORD *)(v53 + 8);
        v57 = -v45;
        v58 = v49 + 2 * result + 2 * v51;
        v59 = result + v51;
        v60 = v20;
        do
        {
          if (v59 + v57 >= v50)
            v61 = v50;
          else
            v61 = 0;
          v62 = v58 - 2 * v61;
          if (v54 >= v55)
            v63 = v55;
          else
            v63 = 0;
          *(_WORD *)(v62 + 2 * v57) = (*(__int16 *)(v56 - 2 * v63 + 2 * v54) * (__int16)v60
                                                   + v22 * *(__int16 *)(v62 + 2 * v57)
                                                   + 0x4000) >> 15;
          v22 += v21;
          v60 += v20;
          ++v54;
        }
        while (!__CFADD__(v57++, 1));
        goto LABEL_39;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t webrtc::ComfortNoiseGenerator::ComfortNoiseGenerator(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  size_t v8;
  char *v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32x4_t *v24;

  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = 42;
  *(_QWORD *)(a1 + 8) = a4;
  *(float *)(a1 + 16) = __exp10f((float)(*(float *)(a2 + 384) + 90.309) * 0.1) * 64.0;
  v5 = (_QWORD *)operator new();
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 8);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  if (v7)
  {
    if (v7 < 0xFC0FC0FC0FC0FDLL)
    {
      v8 = 260 * v7;
      v9 = (char *)operator new(260 * v7);
      *v6 = v9;
      v10 = &v9[v8];
      v6[2] = &v9[v8];
      v11 = 260 * ((v8 - 260) / 0x104) + 260;
      bzero(v9, v11);
      v6[1] = v10;
      *(_QWORD *)(a1 + 24) = v6;
      v12 = (char *)operator new(v8);
      *(_QWORD *)(a1 + 32) = v12;
      v13 = &v12[v8];
      *(_QWORD *)(a1 + 48) = &v12[v8];
      bzero(v12, v11);
      *(_QWORD *)(a1 + 40) = v13;
      v14 = (char *)operator new(v8);
      *(_QWORD *)(a1 + 56) = v14;
      v15 = &v14[v8];
      *(_QWORD *)(a1 + 72) = &v14[v8];
      bzero(v14, v11);
      v16 = 0;
      v17 = 0;
      *(_QWORD *)(a1 + 64) = v15;
      *(_DWORD *)(a1 + 80) = 0;
      v18 = vdupq_n_s32(0x49742400u);
      while (1)
      {
        v19 = **(_QWORD **)(a1 + 24);
        if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - v19) >> 2) <= v17)
          break;
        v20 = v19 + v16;
        *(_DWORD *)(v20 + 256) = 0;
        *(_OWORD *)(v20 + 224) = 0uLL;
        *(_OWORD *)(v20 + 240) = 0uLL;
        *(_OWORD *)(v20 + 192) = 0uLL;
        *(_OWORD *)(v20 + 208) = 0uLL;
        *(_OWORD *)(v20 + 160) = 0uLL;
        *(_OWORD *)(v20 + 176) = 0uLL;
        *(_OWORD *)(v20 + 128) = 0uLL;
        *(_OWORD *)(v20 + 144) = 0uLL;
        *(_OWORD *)(v20 + 96) = 0uLL;
        *(_OWORD *)(v20 + 112) = 0uLL;
        *(_OWORD *)(v20 + 64) = 0uLL;
        *(_OWORD *)(v20 + 80) = 0uLL;
        *(_OWORD *)(v20 + 32) = 0uLL;
        *(_OWORD *)(v20 + 48) = 0uLL;
        *(_OWORD *)v20 = 0uLL;
        *(_OWORD *)(v20 + 16) = 0uLL;
        v21 = *(_QWORD *)(a1 + 32);
        if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(a1 + 40) - v21) >> 2) <= v17)
          break;
        v22 = v21 + v16;
        *(_DWORD *)(v22 + 256) = 0;
        *(_OWORD *)(v22 + 224) = 0uLL;
        *(_OWORD *)(v22 + 240) = 0uLL;
        *(_OWORD *)(v22 + 192) = 0uLL;
        *(_OWORD *)(v22 + 208) = 0uLL;
        *(_OWORD *)(v22 + 160) = 0uLL;
        *(_OWORD *)(v22 + 176) = 0uLL;
        *(_OWORD *)(v22 + 128) = 0uLL;
        *(_OWORD *)(v22 + 144) = 0uLL;
        *(_OWORD *)(v22 + 96) = 0uLL;
        *(_OWORD *)(v22 + 112) = 0uLL;
        *(_OWORD *)(v22 + 64) = 0uLL;
        *(_OWORD *)(v22 + 80) = 0uLL;
        *(_OWORD *)(v22 + 32) = 0uLL;
        *(_OWORD *)(v22 + 48) = 0uLL;
        *(_OWORD *)v22 = 0uLL;
        *(_OWORD *)(v22 + 16) = 0uLL;
        v23 = *(_QWORD *)(a1 + 56);
        if (0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(a1 + 64) - v23) >> 2) <= v17)
          break;
        v24 = (int32x4_t *)(v23 + v16);
        *v24 = v18;
        v24[1] = v18;
        v24[2] = v18;
        v24[3] = v18;
        v24[4] = v18;
        v24[5] = v18;
        v24[6] = v18;
        v24[7] = v18;
        v24[8] = v18;
        v24[9] = v18;
        v24[10] = v18;
        v24[11] = v18;
        v24[12] = v18;
        v24[13] = v18;
        v24[14] = v18;
        v24[15] = v18;
        v24[16].i32[0] = 1232348160;
        ++v17;
        v16 += 260;
        if (v17 >= *(_QWORD *)(a1 + 8))
          return a1;
      }
      __break(1u);
    }
    abort();
  }
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

unint64_t webrtc::ComfortNoiseGenerator::Compute(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  float v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float32x4_t *v33;
  unint64_t v34;
  float32x4_t *v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  _DWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t *v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  void **v77;
  void *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  float32x4_t *v86;
  unint64_t v87;
  float32x4_t *v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const float *v105;
  float32x4_t *v106;
  uint64_t v107;
  float32x4_t *v108;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  uint64_t v123;
  uint64_t v124;
  float v125;
  uint64_t v126;
  float32x4_t *v127;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  float v145;
  uint64_t v146;
  _QWORD *v147;
  float32x4_t __dst[17];

  v7 = (_QWORD *)result;
  v8 = *(_QWORD *)(result + 8);
  if (a2)
  {
    result = *(_QWORD *)(result + 24);
LABEL_3:
    v9 = v7 + 7;
    if (result)
      v9 = (_QWORD *)result;
    v147 = v9;
    if (v8)
    {
      v10 = 0;
      v11 = a5;
      v12 = a7;
      v146 = v8;
      while (0xFC0FC0FC0FC0FC1 * ((uint64_t)(v147[1] - *v147) >> 2) > v10)
      {
        v13 = (_DWORD *)(a5 + 520 * v10);
        v14 = v7;
        v15 = (_DWORD *)(a7 + 520 * v10);
        result = (unint64_t)memcpy(__dst, (const void *)(*v147 + 260 * v10), 0x104uLL);
        v16 = 0;
        __dst[0] = vsqrtq_f32(__dst[0]);
        __dst[1] = vsqrtq_f32(__dst[1]);
        __dst[2] = vsqrtq_f32(__dst[2]);
        __dst[3] = vsqrtq_f32(__dst[3]);
        __dst[4] = vsqrtq_f32(__dst[4]);
        __dst[5] = vsqrtq_f32(__dst[5]);
        __dst[6] = vsqrtq_f32(__dst[6]);
        __dst[7] = vsqrtq_f32(__dst[7]);
        __dst[8].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[8].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[8].f32[0])));
        __dst[8].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[8].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[8].f32[2])));
        __dst[9].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[9].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[9].f32[0])));
        __dst[9].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[9].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[9].f32[2])));
        __dst[10].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[10].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[10].f32[0])));
        __dst[10].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[10].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[10].f32[2])));
        __dst[11].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[11].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[11].f32[0])));
        __dst[11].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[11].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[11].f32[2])));
        __dst[12].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[12].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[12].f32[0])));
        __dst[12].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[12].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[12].f32[2])));
        __dst[13].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[13].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[13].f32[0])));
        __dst[13].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[13].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[13].f32[2])));
        __dst[14].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[14].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[14].f32[0])));
        __dst[14].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[14].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[14].f32[2])));
        __dst[15].i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[15].f32[1])), COERCE_UNSIGNED_INT(sqrtf(__dst[15].f32[0])));
        __dst[15].i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(__dst[15].f32[3])), COERCE_UNSIGNED_INT(sqrtf(__dst[15].f32[2])));
        __dst[16].i32[0] = sqrtf(__dst[16].f32[0]);
        v17 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(__dst[8].f32[0] + 0.0) + __dst[8].f32[1]) + __dst[8].f32[2]) + __dst[8].f32[3]) + __dst[9].f32[0]) + __dst[9].f32[1]) + __dst[9].f32[2]) + __dst[9].f32[3]) + __dst[10].f32[0]) + __dst[10].f32[1]) + __dst[10].f32[2]) + __dst[10].f32[3]) + __dst[11].f32[0]) + __dst[11].f32[1]) + __dst[11].f32[2]) + __dst[11].f32[3]) + __dst[12].f32[0]) + __dst[12].f32[1]) + __dst[12].f32[2]) + __dst[12].f32[3]) + __dst[13].f32[0]) + __dst[13].f32[1]) + __dst[13].f32[2])
                                                                                            + __dst[13].f32[3])
                                                                                    + __dst[14].f32[0])
                                                                            + __dst[14].f32[1])
                                                                    + __dst[14].f32[2])
                                                            + __dst[14].f32[3])
                                                    + __dst[15].f32[0])
                                            + __dst[15].f32[1])
                                    + __dst[15].f32[2])
                            + __dst[15].f32[3])
                    + __dst[16].f32[0])
            * 0.030303;
        v15[64] = 0;
        *v15 = 0;
        v7 = v14;
        v13[64] = 0;
        *v13 = 0;
        v18 = *((_DWORD *)v14 + 1);
        do
        {
          v19 = 69069 * v18 + 1;
          v18 = v19 & 0x7FFFFFFF;
          v20 = (v19 >> 26) & 0x1F;
          v23 = __dst[0].f32[v16 + 1];
          v24 = v11 + v16 * 4;
          *(float *)(v24 + 4) = v21 * v23;
          *(float *)(v24 + 264) = v22 * v23;
          v25 = v12 + v16 * 4;
          *(float *)(v25 + 4) = v17 * v21;
          *(float *)(v25 + 264) = v17 * v22;
          ++v16;
        }
        while (v16 != 63);
        *((_DWORD *)v14 + 1) = v18;
        ++v10;
        v12 += 520;
        v11 += 520;
        if (v10 == v146)
          return result;
      }
LABEL_87:
      __break(1u);
    }
  }
  else
  {
    if (v8)
    {
      v26 = 0;
      v27 = *(_QWORD *)(result + 32);
      v28 = 0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(result + 40) - v27) >> 2);
      v29 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
      v30 = v27;
      while (v26 != v28)
      {
        v31 = 260 * v26 + 260;
        v32 = a3 + v31;
        v33 = (float32x4_t *)(a3 + 260 * v26);
        v34 = v27 + v31;
        v35 = (float32x4_t *)(v27 + 260 * v26);
        if ((unint64_t)v35 >= v32 || (unint64_t)v33 >= v34)
        {
          v37 = vmlaq_f32(v35[1], v29, vsubq_f32(v33[1], v35[1]));
          *v35 = vmlaq_f32(*v35, v29, vsubq_f32(*v33, *v35));
          v35[1] = v37;
          v38 = vmlaq_f32(v35[3], v29, vsubq_f32(v33[3], v35[3]));
          v35[2] = vmlaq_f32(v35[2], v29, vsubq_f32(v33[2], v35[2]));
          v35[3] = v38;
          v39 = vmlaq_f32(v35[5], v29, vsubq_f32(v33[5], v35[5]));
          v35[4] = vmlaq_f32(v35[4], v29, vsubq_f32(v33[4], v35[4]));
          v35[5] = v39;
          v40 = vmlaq_f32(v35[7], v29, vsubq_f32(v33[7], v35[7]));
          v35[6] = vmlaq_f32(v35[6], v29, vsubq_f32(v33[6], v35[6]));
          v35[7] = v40;
          v41 = vmlaq_f32(v35[9], v29, vsubq_f32(v33[9], v35[9]));
          v35[8] = vmlaq_f32(v35[8], v29, vsubq_f32(v33[8], v35[8]));
          v35[9] = v41;
          v42 = vmlaq_f32(v35[11], v29, vsubq_f32(v33[11], v35[11]));
          v35[10] = vmlaq_f32(v35[10], v29, vsubq_f32(v33[10], v35[10]));
          v35[11] = v42;
          v43 = vmlaq_f32(v35[13], v29, vsubq_f32(v33[13], v35[13]));
          v35[12] = vmlaq_f32(v35[12], v29, vsubq_f32(v33[12], v35[12]));
          v35[13] = v43;
          v44 = v33[14];
          v45 = v33[15];
          v33 += 16;
          v46 = vmlaq_f32(v35[15], v29, vsubq_f32(v45, v35[15]));
          v35[14] = vmlaq_f32(v35[14], v29, vsubq_f32(v44, v35[14]));
          v35[15] = v46;
          v35 += 16;
          v47 = 64;
        }
        else
        {
          v47 = 0;
        }
        v48 = 4 * v47;
        do
        {
          v49 = v33->f32[0];
          v33 = (float32x4_t *)((char *)v33 + 4);
          v35->f32[0] = *(float *)(v30 + v48) + (float)((float)(v49 - *(float *)(v30 + v48)) * 0.1);
          v35 = (float32x4_t *)((char *)v35 + 4);
          v48 += 4;
        }
        while (v48 != 260);
        ++v26;
        v30 += 260;
        if (v26 == v8)
        {
          v50 = (_DWORD *)(result + 80);
          v51 = *(_DWORD *)(result + 80);
          if (v51 >= 51)
          {
            v52 = 0;
            v53 = *(_QWORD *)(result + 56);
            v54 = 0xFC0FC0FC0FC0FC1 * ((*(_QWORD *)(result + 64) - v53) >> 2);
            v55 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
            result = 1065354894;
            v56 = (float32x4_t)vdupq_n_s32(0x3F666666u);
            v57 = (float32x4_t)vdupq_n_s32(0x3F80068Eu);
            v58 = v7[7];
            while (v52 != v54 && v52 != v28)
            {
              v59 = 260 * v52 + 260;
              v60 = (float32x4_t *)(v53 + 260 * v52);
              v61 = (float32x4_t *)(v27 + 260 * v52);
              if ((unint64_t)v60 >= v27 + v59 || v27 + 260 * v52 >= (unint64_t)(v53 + v59))
              {
                v63 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[1], v61[1]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[1], v55), v56, v61[1]), (int8x16_t)v60[1]), v57);
                *v60 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*v60, *v61), (int8x16_t)vmlaq_f32(vmulq_f32(*v60, v55), v56, *v61), *(int8x16_t *)v60), v57);
                v60[1] = v63;
                v64 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[3], v61[3]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[3], v55), v56, v61[3]), (int8x16_t)v60[3]), v57);
                v60[2] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[2], v61[2]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[2], v55), v56, v61[2]), (int8x16_t)v60[2]), v57);
                v60[3] = v64;
                v65 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[5], v61[5]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[5], v55), v56, v61[5]), (int8x16_t)v60[5]), v57);
                v60[4] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[4], v61[4]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[4], v55), v56, v61[4]), (int8x16_t)v60[4]), v57);
                v60[5] = v65;
                v66 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[7], v61[7]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[7], v55), v56, v61[7]), (int8x16_t)v60[7]), v57);
                v60[6] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[6], v61[6]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[6], v55), v56, v61[6]), (int8x16_t)v60[6]), v57);
                v60[7] = v66;
                v67 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[9], v61[9]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[9], v55), v56, v61[9]), (int8x16_t)v60[9]), v57);
                v60[8] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[8], v61[8]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[8], v55), v56, v61[8]), (int8x16_t)v60[8]), v57);
                v60[9] = v67;
                v68 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[11], v61[11]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[11], v55), v56, v61[11]), (int8x16_t)v60[11]), v57);
                v60[10] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[10], v61[10]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[10], v55), v56, v61[10]), (int8x16_t)v60[10]), v57);
                v60[11] = v68;
                v69 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[13], v61[13]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[13], v55), v56, v61[13]), (int8x16_t)v60[13]), v57);
                v60[12] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[12], v61[12]), (int8x16_t)vmlaq_f32(vmulq_f32(v60[12], v55), v56, v61[12]), (int8x16_t)v60[12]), v57);
                v60[13] = v69;
                v70 = v61[14];
                v71 = v61[15];
                v61 += 16;
                v72 = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[15], v71), (int8x16_t)vmlaq_f32(vmulq_f32(v60[15], v55), v56, v71), (int8x16_t)v60[15]), v57);
                v60[14] = vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v60[14], v70), (int8x16_t)vmlaq_f32(vmulq_f32(v60[14], v55), v56, v70), (int8x16_t)v60[14]), v57);
                v60[15] = v72;
                v60 += 16;
                v62 = 64;
              }
              else
              {
                v62 = 0;
              }
              v73 = 4 * v62;
              do
              {
                v74 = *(float *)(v58 + v73);
                v75 = v61->f32[0];
                v61 = (float32x4_t *)((char *)v61 + 4);
                v76 = (float)(v74 * 0.1) + (float)(v75 * 0.9);
                if (v75 < v74)
                  v74 = v76;
                v60->f32[0] = v74 * 1.0002;
                v60 = (float32x4_t *)((char *)v60 + 4);
                v73 += 4;
              }
              while (v73 != 260);
              ++v52;
              v58 += 260;
              if (v52 == v8)
                goto LABEL_37;
            }
            goto LABEL_87;
          }
LABEL_37:
          v77 = (void **)v7[3];
          if (v77)
            goto LABEL_40;
          goto LABEL_59;
        }
      }
      goto LABEL_87;
    }
    v50 = (_DWORD *)(result + 80);
    v51 = *(_DWORD *)(result + 80);
    v77 = *(void ***)(result + 24);
    if (v77)
    {
LABEL_40:
      *v50 = v51 + 1;
      if (v51 != 999)
      {
        if (v8)
        {
          v79 = 0;
          v80 = v7[7];
          v81 = 0xFC0FC0FC0FC0FC1 * ((v7[8] - v80) >> 2);
          v82 = (float32x4_t)vdupq_n_s32(0x3A83126Fu);
          v83 = v80;
          while (v79 != v81)
          {
            v84 = (char *)*v77;
            if (0xFC0FC0FC0FC0FC1 * (((_BYTE *)v77[1] - (_BYTE *)*v77) >> 2) <= v79)
              break;
            v85 = 260 * v79 + 260;
            result = v80 + 260 * v79;
            v86 = (float32x4_t *)&v84[260 * v79];
            v87 = (unint64_t)&v84[v85];
            if ((unint64_t)v86 >= v80 + v85 || result >= v87)
            {
              v89 = (float32x4_t *)(v80 + 260 * v79);
              v90 = vbslq_s8((int8x16_t)vcgtq_f32(v89[1], v86[1]), (int8x16_t)vmlaq_f32(v86[1], v82, vsubq_f32(v89[1], v86[1])), (int8x16_t)v89[1]);
              *(int8x16_t *)v86 = vbslq_s8((int8x16_t)vcgtq_f32(*v89, *v86), (int8x16_t)vmlaq_f32(*v86, v82, vsubq_f32(*v89, *v86)), *(int8x16_t *)v89);
              v86[1] = (float32x4_t)v90;
              v91 = vbslq_s8((int8x16_t)vcgtq_f32(v89[3], v86[3]), (int8x16_t)vmlaq_f32(v86[3], v82, vsubq_f32(v89[3], v86[3])), (int8x16_t)v89[3]);
              v86[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[2], v86[2]), (int8x16_t)vmlaq_f32(v86[2], v82, vsubq_f32(v89[2], v86[2])), (int8x16_t)v89[2]);
              v86[3] = (float32x4_t)v91;
              v92 = vbslq_s8((int8x16_t)vcgtq_f32(v89[5], v86[5]), (int8x16_t)vmlaq_f32(v86[5], v82, vsubq_f32(v89[5], v86[5])), (int8x16_t)v89[5]);
              v86[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[4], v86[4]), (int8x16_t)vmlaq_f32(v86[4], v82, vsubq_f32(v89[4], v86[4])), (int8x16_t)v89[4]);
              v86[5] = (float32x4_t)v92;
              v93 = vbslq_s8((int8x16_t)vcgtq_f32(v89[7], v86[7]), (int8x16_t)vmlaq_f32(v86[7], v82, vsubq_f32(v89[7], v86[7])), (int8x16_t)v89[7]);
              v86[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[6], v86[6]), (int8x16_t)vmlaq_f32(v86[6], v82, vsubq_f32(v89[6], v86[6])), (int8x16_t)v89[6]);
              v86[7] = (float32x4_t)v93;
              v94 = vbslq_s8((int8x16_t)vcgtq_f32(v89[9], v86[9]), (int8x16_t)vmlaq_f32(v86[9], v82, vsubq_f32(v89[9], v86[9])), (int8x16_t)v89[9]);
              v86[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[8], v86[8]), (int8x16_t)vmlaq_f32(v86[8], v82, vsubq_f32(v89[8], v86[8])), (int8x16_t)v89[8]);
              v86[9] = (float32x4_t)v94;
              v95 = vbslq_s8((int8x16_t)vcgtq_f32(v89[11], v86[11]), (int8x16_t)vmlaq_f32(v86[11], v82, vsubq_f32(v89[11], v86[11])), (int8x16_t)v89[11]);
              v86[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[10], v86[10]), (int8x16_t)vmlaq_f32(v86[10], v82, vsubq_f32(v89[10], v86[10])), (int8x16_t)v89[10]);
              v86[11] = (float32x4_t)v95;
              v96 = vbslq_s8((int8x16_t)vcgtq_f32(v89[13], v86[13]), (int8x16_t)vmlaq_f32(v86[13], v82, vsubq_f32(v89[13], v86[13])), (int8x16_t)v89[13]);
              v86[12] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[12], v86[12]), (int8x16_t)vmlaq_f32(v86[12], v82, vsubq_f32(v89[12], v86[12])), (int8x16_t)v89[12]);
              v86[13] = (float32x4_t)v96;
              v97 = vbslq_s8((int8x16_t)vcgtq_f32(v89[15], v86[15]), (int8x16_t)vmlaq_f32(v86[15], v82, vsubq_f32(v89[15], v86[15])), (int8x16_t)v89[15]);
              v86[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v89[14], v86[14]), (int8x16_t)vmlaq_f32(v86[14], v82, vsubq_f32(v89[14], v86[14])), (int8x16_t)v89[14]);
              v86[15] = (float32x4_t)v97;
              v86 += 16;
              v98 = 64;
            }
            else
            {
              v98 = 0;
            }
            v99 = 4 * v98;
            do
            {
              v100 = *(float *)(v83 + v99);
              if (v100 > v86->f32[0])
                v100 = v86->f32[0] + (float)((float)(v100 - v86->f32[0]) * 0.001);
              v86->f32[0] = v100;
              v86 = (float32x4_t *)((char *)v86 + 4);
              v99 += 4;
            }
            while (v99 != 260);
            ++v79;
            v83 += 260;
            if (v79 == v8)
              goto LABEL_59;
          }
          goto LABEL_87;
        }
        return result;
      }
      v7[3] = 0;
      v78 = *v77;
      if (*v77)
      {
        v77[1] = v78;
        operator delete(v78);
      }
      result = MEMORY[0x20BD0ADEC](v77, 0x20C40960023A9);
      v8 = v7[1];
    }
LABEL_59:
    if (v8)
    {
      v101 = 0;
      v102 = 0;
      v103 = v7[7];
      v104 = 0xFC0FC0FC0FC0FC1 * ((v7[8] - v103) >> 2);
      v105 = (const float *)(v7 + 2);
      v106 = (float32x4_t *)((char *)v7 + 20);
      v107 = v103;
      while (v102 != v104)
      {
        v108 = (float32x4_t *)(v103 + 260 * v102);
        if (v108 >= v106 || v105 >= &v108[16].f32[1])
        {
          v110 = (int8x16_t)vld1q_dup_f32(v105);
          v111 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[1]), v110, (int8x16_t)v108[1]);
          *(int8x16_t *)v108 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, *v108), v110, *(int8x16_t *)v108);
          v108[1] = (float32x4_t)v111;
          v112 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[3]), v110, (int8x16_t)v108[3]);
          v108[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[2]), v110, (int8x16_t)v108[2]);
          v108[3] = (float32x4_t)v112;
          v113 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[5]), v110, (int8x16_t)v108[5]);
          v108[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[4]), v110, (int8x16_t)v108[4]);
          v108[5] = (float32x4_t)v113;
          v114 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[7]), v110, (int8x16_t)v108[7]);
          v108[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[6]), v110, (int8x16_t)v108[6]);
          v108[7] = (float32x4_t)v114;
          v115 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[9]), v110, (int8x16_t)v108[9]);
          v108[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v110, v108[8]), v110, (int8x16_t)v108[8]);
          v108[9] = (float32x4_t)v115;
          v116 = (int8x16_t)vld1q_dup_f32(v105);
          v117 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v116, v108[11]), v116, (int8x16_t)v108[11]);
          v108[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v116, v108[10]), v116, (int8x16_t)v108[10]);
          v108[11] = (float32x4_t)v117;
          v118 = (int8x16_t)vld1q_dup_f32(v105);
          v119 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v118, v108[12]), v118, (int8x16_t)v108[12]);
          v120 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v118, v108[13]), v118, (int8x16_t)v108[13]);
          v108[12] = (float32x4_t)v119;
          v108[13] = (float32x4_t)v120;
          v121 = (int8x16_t)vld1q_dup_f32(v105);
          v122 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v121, v108[15]), v121, (int8x16_t)v108[15]);
          v108[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v121, v108[14]), v121, (int8x16_t)v108[14]);
          v108[15] = (float32x4_t)v122;
          v123 = 64;
        }
        else
        {
          v123 = 0;
        }
        v124 = 4 * v123;
        do
        {
          v125 = *(float *)(v107 + v124);
          if (v125 < *v105)
            v125 = *v105;
          *(float *)(v107 + v124) = v125;
          v124 += 4;
        }
        while (v124 != 260);
        result = v7[3];
        if (result)
        {
          v126 = *(_QWORD *)result;
          if (0xFC0FC0FC0FC0FC1 * ((uint64_t)(*(_QWORD *)(result + 8) - *(_QWORD *)result) >> 2) <= v102)
            goto LABEL_87;
          v127 = (float32x4_t *)(v126 + 260 * v102);
          if (v127 >= v106 || (unint64_t)v105 >= v126 + 260 * v102 + 260)
          {
            v129 = (int8x16_t)vld1q_dup_f32(v105);
            v130 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[1]), v129, (int8x16_t)v127[1]);
            *(int8x16_t *)v127 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, *v127), v129, *(int8x16_t *)v127);
            v127[1] = (float32x4_t)v130;
            v131 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[3]), v129, (int8x16_t)v127[3]);
            v127[2] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[2]), v129, (int8x16_t)v127[2]);
            v127[3] = (float32x4_t)v131;
            v132 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[5]), v129, (int8x16_t)v127[5]);
            v127[4] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[4]), v129, (int8x16_t)v127[4]);
            v127[5] = (float32x4_t)v132;
            v133 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[7]), v129, (int8x16_t)v127[7]);
            v127[6] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[6]), v129, (int8x16_t)v127[6]);
            v127[7] = (float32x4_t)v133;
            v134 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[9]), v129, (int8x16_t)v127[9]);
            v127[8] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v129, v127[8]), v129, (int8x16_t)v127[8]);
            v127[9] = (float32x4_t)v134;
            v135 = (int8x16_t)vld1q_dup_f32(v105);
            v136 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v135, v127[11]), v135, (int8x16_t)v127[11]);
            v127[10] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v135, v127[10]), v135, (int8x16_t)v127[10]);
            v127[11] = (float32x4_t)v136;
            v137 = (int8x16_t)vld1q_dup_f32(v105);
            v138 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v137, v127[12]), v137, (int8x16_t)v127[12]);
            v139 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v137, v127[13]), v137, (int8x16_t)v127[13]);
            v127[12] = (float32x4_t)v138;
            v127[13] = (float32x4_t)v139;
            v140 = (int8x16_t)vld1q_dup_f32(v105);
            v141 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v140, v127[15]), v140, (int8x16_t)v127[15]);
            v127[14] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v140, v127[14]), v140, (int8x16_t)v127[14]);
            v127[15] = (float32x4_t)v141;
            v142 = 64;
          }
          else
          {
            v142 = 0;
          }
          v143 = 4 * v142;
          v144 = v126 + v101;
          do
          {
            v145 = *(float *)(v144 + v143);
            if (v145 < *v105)
              v145 = *v105;
            *(float *)(v144 + v143) = v145;
            v143 += 4;
          }
          while (v143 != 260);
        }
        ++v102;
        v107 += 260;
        v101 += 260;
        if (v102 == v8)
          goto LABEL_3;
      }
      goto LABEL_87;
    }
  }
  return result;
}

uint64_t webrtc::rtcp::CommonHeader::Parse(webrtc::rtcp::CommonHeader *this, const unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a3 <= 3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/common_header.cc");
    return 0;
  }
  v11 = *a2;
  if (v11 >> 6 != 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      return 0;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/common_header.cc");
    return 0;
  }
  *((_BYTE *)this + 1) = v11 & 0x1F;
  *(_BYTE *)this = a2[1];
  v12 = __rev16(*((unsigned __int16 *)a2 + 1));
  v13 = 4 * v12;
  *((_DWORD *)this + 1) = 4 * v12;
  *((_QWORD *)this + 1) = a2 + 4;
  *((_BYTE *)this + 2) = 0;
  if (4 * v12 + 4 <= a3)
  {
    if ((v11 & 0x20) == 0)
      return 1;
    if (v12)
    {
      v29 = a2[v13 + 3];
      *((_BYTE *)this + 2) = v29;
      if (v29)
      {
        v30 = v13 >= v29;
        v31 = v13 - v29;
        if (v30)
        {
          *((_DWORD *)this + 1) = v31;
          return 1;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          return 0;
        v28 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
        goto LABEL_15;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        return 0;
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    {
      return 0;
    }
    rtc::webrtc_logging_impl::Log("\r\t", v32, v33, v34, v35, v36, v37, v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/common_header.cc");
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
    return 0;
  v28 = (unsigned __int8 *)&rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t;
LABEL_15:
  rtc::webrtc_logging_impl::Log(v28, v14, v15, v16, v17, v18, v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/common_header.cc");
  return 0;
}

uint64_t WebRtcSpl_ComplexFFT(uint64_t a1, char a2, int a3)
{
  uint64_t v3;
  int v5;
  char v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  char v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;

  v3 = (1 << a2);
  if ((int)v3 > 1024)
    return 0xFFFFFFFFLL;
  if (a3)
  {
    if ((int)v3 >= 2)
    {
      v5 = 1;
      v6 = 9;
      do
      {
        v7 = 2 * v5;
        if (v5 >= 1)
        {
          v8 = 0;
          v9 = 1;
          do
          {
            if ((int)v3 > (int)v8)
            {
              v10 = (unsigned __int16 *)((char *)&kSinTable1024 + 2 * ((_DWORD)v8 << v6));
              v11 = -*v10;
              v12 = (__int16)v10[256];
              v13 = v9;
              v14 = v8;
              do
              {
                v15 = 2 * (v7 + v13 - 1);
                v16 = *(__int16 *)(a1 + v15);
                v17 = 2 * (v7 + v13);
                v18 = *(__int16 *)(a1 + v17);
                v19 = v16 * v12 - v18 * (__int16)v11 + 1;
                v20 = v18 * v12 + v16 * (__int16)v11 + 1;
                v21 = v19 >> 1;
                v20 >>= 1;
                v22 = 2 * (v13 - 1);
                v23 = 2 * v13;
                v24 = *(__int16 *)(a1 + v23);
                v25 = (*(__int16 *)(a1 + v22) << 14) + 0x4000;
                *(_WORD *)(a1 + v15) = (v25 - v21) >> 15;
                *(_WORD *)(a1 + v17) = ((v24 << 14) - v20 + 0x4000) >> 15;
                *(_WORD *)(a1 + v22) = (v25 + v21) >> 15;
                *(_WORD *)(a1 + v23) = (v20 + (v24 << 14) + 0x4000) >> 15;
                v14 += v7;
                v13 += 4 * v5;
              }
              while (v14 < v3);
            }
            ++v8;
            v9 += 2;
          }
          while (v8 != v5);
        }
        --v6;
        v5 *= 2;
      }
      while (v7 < (int)v3);
    }
  }
  else if ((int)v3 >= 2)
  {
    v26 = 1;
    v27 = 9;
    do
    {
      v28 = 2 * v26;
      if (v26 >= 1)
      {
        v29 = 0;
        v30 = 1;
        do
        {
          if ((int)v3 > (int)v29)
          {
            v31 = (unsigned __int16 *)((char *)&kSinTable1024 + 2 * ((_DWORD)v29 << v27));
            v32 = -*v31;
            v33 = (__int16)v31[256];
            v34 = v30;
            v35 = v29;
            do
            {
              v36 = 2 * (v28 + v34 - 1);
              v37 = *(__int16 *)(a1 + v36);
              v38 = 2 * (v28 + v34);
              v39 = *(__int16 *)(a1 + v38);
              v40 = (v37 * v33 - v39 * (__int16)v32) >> 15;
              v41 = v37 * (__int16)v32 + v39 * v33;
              v42 = 2 * (v34 - 1);
              v43 = *(__int16 *)(a1 + v42);
              v41 >>= 15;
              v44 = 2 * v34;
              v45 = *(__int16 *)(a1 + v44);
              *(_WORD *)(a1 + v36) = (v43 - v40) >> 1;
              *(_WORD *)(a1 + v38) = (v45 - v41) >> 1;
              *(_WORD *)(a1 + v42) = (v40 + v43) >> 1;
              *(_WORD *)(a1 + v44) = (v41 + v45) >> 1;
              v35 += v28;
              v34 += 4 * v26;
            }
            while (v35 < v3);
          }
          ++v29;
          v30 += 2;
        }
        while (v29 != v26);
      }
      --v27;
      v26 *= 2;
    }
    while (v28 < (int)v3);
  }
  return 0;
}

uint64_t WebRtcSpl_ComplexIFFT(int16x8_t *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  _BOOL4 v12;
  int v13;
  char v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int16x8_t *v23;
  __int16 *v24;
  int v25;
  int v26;
  int16x8_t *v27;
  unint64_t v28;
  __int16 *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  char v44;
  char v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int16x8_t *v49;
  __int16 *v50;
  int v51;
  int v52;
  int16x8_t *v53;
  unint64_t v54;
  __int16 *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;

  if (a2 > 0xA)
    return 0xFFFFFFFFLL;
  if (!a2)
    return 0;
  v5 = 1 << a2;
  v6 = 2 << a2;
  LODWORD(v3) = 0;
  if (a3)
  {
    v7 = 9;
    v8 = 1;
    do
    {
      v9 = v8;
      v10 = WebRtcSpl_MaxAbsValueW16C(a1, v6);
      v11 = 0;
      v12 = v10 > 13573;
      if (v10 <= 13573)
        v13 = 0x2000;
      else
        v13 = 0x4000;
      if (v10 <= 13573)
        v14 = 1;
      else
        v14 = 2;
      v15 = v10 > 27146;
      v16 = v13 << v15;
      if (v10 <= 27146)
        v17 = v10 > 13573;
      else
        v17 = v14;
      v8 = 2 * v9;
      v18 = v7;
      v19 = v17 + 14;
      if (v9 <= 1)
        v20 = 1;
      else
        v20 = v9;
      v21 = 8 * v9;
      v22 = 2 * v9;
      v23 = a1;
      do
      {
        if (v11 < v5)
        {
          v24 = (__int16 *)((char *)&kSinTable1024 + 2 * (v11 << v18));
          v25 = *v24;
          v26 = v24[256];
          v27 = v23;
          v28 = v11;
          do
          {
            v29 = &v27->i16[v22];
            v30 = v27->i16[v22];
            v31 = v27->i16[v22 + 1];
            v32 = v30 * v26 - v31 * v25 + 1;
            v33 = v31 * v26 + v30 * v25 + 1;
            v34 = v32 >> 1;
            v33 >>= 1;
            v35 = v27->i16[1] << 14;
            v36 = v16 + (v27->i16[0] << 14);
            *v29 = (v36 - v34) >> v19;
            v29[1] = (v16 - v33 + v35) >> v19;
            v27->i16[0] = (v36 + v34) >> v19;
            v27->i16[1] = (v33 + v16 + v35) >> v19;
            v28 += v8;
            v27 = (int16x8_t *)((char *)v27 + v21);
          }
          while (v28 < v5);
        }
        ++v11;
        v23 = (int16x8_t *)((char *)v23 + 4);
      }
      while (v11 != v20);
      v3 = (v3 + v12 + v15);
      v7 = v18 - 1;
    }
    while (v8 < v5);
  }
  else
  {
    v38 = 9;
    v39 = 1;
    do
    {
      v41 = v39;
      v42 = WebRtcSpl_MaxAbsValueW16C(a1, v6);
      v43 = 0;
      if (v42 <= 13573)
        v44 = 1;
      else
        v44 = 2;
      v39 = 2 * v41;
      if (v42 <= 27146)
        v45 = v42 > 13573;
      else
        v45 = v44;
      v46 = v38;
      if (v41 <= 1)
        v47 = 1;
      else
        v47 = v41;
      v48 = 2 * v41;
      v49 = a1;
      do
      {
        if (v43 < v5)
        {
          v50 = (__int16 *)((char *)&kSinTable1024 + 2 * (v43 << v46));
          v51 = *v50;
          v52 = v50[256];
          v53 = v49;
          v54 = v43;
          do
          {
            v55 = &v53->i16[v48];
            v56 = v53->i16[2 * v41];
            v57 = v53->i16[v48 + 1];
            v58 = (v56 * v52 - v57 * v51) >> 15;
            v59 = (v56 * v51 + v57 * v52) >> 15;
            v60 = v53->i16[0];
            v61 = v53->i16[1];
            *v55 = (v60 - v58) >> v45;
            v55[1] = (v61 - v59) >> v45;
            v53->i16[0] = (v58 + v60) >> v45;
            v53->i16[1] = (v59 + v61) >> v45;
            v54 += v39;
            v53 = (int16x8_t *)((char *)v53 + 8 * v41);
          }
          while (v54 < v5);
        }
        ++v43;
        v49 = (int16x8_t *)((char *)v49 + 4);
      }
      while (v43 != v47);
      v40 = v3 + (v42 > 13573);
      if (v42 <= 27146)
        v3 = v40;
      else
        v3 = v40 + 1;
      v38 = v46 - 1;
    }
    while (v39 < v5);
  }
  return v3;
}

uint64_t webrtc::rtcp::CongestionControlFeedback::Create(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  unint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int i;
  uint64_t v28;
  unsigned int v29;
  _BYTE *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v12 = *a3;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = -117;
    *(_BYTE *)(*a3 + a2 + 1) = -51;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v13 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v13 - 4) >> 2;
    v14 = *a3 + 4;
    *a3 = v14;
    *(_DWORD *)(a2 + v14) = bswap32(*(_DWORD *)(a1 + 8));
    v15 = *a3 + 4;
    *a3 = v15;
    v16 = *(_DWORD **)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 24) - (_QWORD)v16;
    if (v17)
    {
      v18 = 0xAAAAAAAAAAAAAAABLL * (v17 >> 3);
      do
      {
        v19 = 0;
        if (v18)
        {
          v20 = 24 * v18;
          v21 = v16;
          while (*v21 == *v16)
          {
            ++v19;
            v21 += 6;
            v20 -= 24;
            if (!v20)
            {
              v19 = v18;
              break;
            }
          }
        }
        if (v18 >= v19)
          v22 = v19;
        else
          v22 = v18;
        if (v22)
          v23 = v16;
        else
          v23 = 0;
        *(_DWORD *)(a2 + v15) = bswap32(*v23);
        v24 = *a3 + 4;
        *a3 = v24;
        *(_WORD *)(a2 + v24) = bswap32(*((unsigned __int16 *)v23 + 2)) >> 16;
        v15 = *a3 + 2;
        *a3 = v15;
        v25 = (unsigned __int16)(LOWORD(v23[6 * v22 - 5]) - *((_WORD *)v23 + 2) + 1);
        if (v25 <= 0x4000)
        {
          *(_WORD *)(a2 + v15) = __rev16(v25);
          v15 = *a3 + 2;
          *a3 = v15;
          if (v25)
          {
            v26 = 0;
            for (i = 0; i != v25; ++i)
            {
              if (LOWORD(v23[6 * v26 + 1]) == (unsigned __int16)(*((_WORD *)v23 + 2) + i))
              {
                v31 = &v23[6 * v26];
                v32 = v31[4];
                if (v32 >= 4)
                  v33 = 0;
                else
                  v33 = v32 << 13;
                v34 = *((_QWORD *)v31 + 1);
                if (v34 < 0)
                {
                  LODWORD(v28) = 0x1FFF;
                }
                else
                {
                  v28 = vcvts_n_s32_f32((float)v34 * 0.000001, 0xAuLL);
                  if (v28 >= 8190)
                    LODWORD(v28) = 8190;
                }
                ++v26;
                v29 = ((v28 | v33) >> 8) | 0xFFFFFF80;
              }
              else
              {
                LOBYTE(v28) = 0;
                LOBYTE(v29) = 0;
              }
              v30 = (_BYTE *)(a2 + v15);
              *v30 = v29;
              v30[1] = v28;
              v15 = *a3 + 2;
              *a3 = v15;
            }
            if ((v25 & 1) != 0)
            {
              *(_WORD *)(a2 + v15) = 0;
              v15 = *a3 + 2;
              *a3 = v15;
            }
          }
        }
        if (v18 <= v19)
          break;
        v16 += 6 * v19;
        if (v18 - v19 < v18)
          v18 -= v19;
      }
      while (v18);
    }
    *(_DWORD *)(a2 + v15) = bswap32(*(_DWORD *)(a1 + 40));
    *a3 += 4;
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

uint64_t webrtc::rtcp::CongestionControlFeedback::BlockLength(uint64_t this)
{
  int *v1;
  int *v2;
  uint64_t v3;
  unint64_t v4;
  _WORD *v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v2 = *(int **)(this + 16);
  v1 = *(int **)(this + 24);
  if (v2 == v1)
    return 12;
  v3 = 0;
  v4 = ((char *)v1 - (char *)v2) / 24;
  v5 = v2 + 1;
  v6 = *((_WORD *)v2 + 2);
  v7 = *v2;
  if (v4 <= 1)
    v8 = 1;
  else
    v8 = ((char *)v1 - (char *)v2) / 24;
  v9 = 12;
  while (*((_DWORD *)v5 - 1) == v7)
  {
LABEL_6:
    ++v3;
    v5 += 12;
    if (v8 == v3)
    {
      v11 = 2 * (unsigned __int16)(*((_WORD *)v1 - 10) - v6 + 1);
      return v9 + v11 + (v11 & 2u) + 8;
    }
  }
  if (v4 > v3 - 1)
  {
    v10 = 2 * (unsigned __int16)(*(v5 - 12) - v6 + 1);
    v9 += v10 + (v10 & 2u) + 8;
    v6 = *v5;
    v7 = *((_DWORD *)v5 - 1);
    goto LABEL_6;
  }
  __break(1u);
  return this;
}

BOOL webrtc::rtcp::CongestionControlFeedback::Parse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned __int16 v13;
  unsigned int v14;
  unint64_t v15;
  __int16 v16;
  int v17;
  unint64_t v18;
  unsigned int *v19;
  _DWORD *v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  unsigned int v32;

  v2 = *(unsigned int *)(a2 + 4);
  if (v2 < 8 || (v2 & 3) != 0)
    return 0;
  v6 = *(unsigned int **)(a2 + 8);
  v7 = v6 + 1;
  *(_DWORD *)(a1 + 8) = bswap32(*v6);
  v8 = (unsigned int *)((char *)v6 + v2 - 4);
  *(_DWORD *)(a1 + 40) = bswap32(*v8);
  if (v2 >= 0x11)
  {
    v9 = (unsigned __int16 *)(v6 + 3);
    v29 = (unint64_t)v6 + v2 - 4;
    while (1)
    {
      v10 = __rev16(*((unsigned __int16 *)v7 + 3));
      if (&v9[v10] > (unsigned __int16 *)v8)
        return 0;
      if (v10)
      {
        v11 = 0;
        v32 = bswap32(*v7);
        v12 = bswap32(*((unsigned __int16 *)v7 + 2)) >> 16;
        v30 = v12;
        do
        {
          v13 = _byteswap_ushort(*v9);
          if ((v13 & 0x8000) != 0)
          {
            v14 = v13 & 0x1FFF;
            if (v14 == 8190)
            {
              v15 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v14 == 0x1FFF)
            {
              v15 = 0x8000000000000000;
            }
            else
            {
              v15 = (1000000 * (unint64_t)v14) >> 10;
            }
            v16 = v12 + v11;
            if (((*(unsigned __int8 *)v9 >> 5) & 3u) - 1 < 3)
              v17 = (unsigned __int16)(((*(_BYTE *)v9 >> 5) & 3) - 1) + 1;
            else
              v17 = 0;
            v19 = *(unsigned int **)(a1 + 24);
            v18 = *(_QWORD *)(a1 + 32);
            if ((unint64_t)v19 >= v18)
            {
              v21 = *(unsigned int **)(a1 + 16);
              v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v21) >> 3) + 1;
              if (v22 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_42;
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 3);
              if (2 * v23 > v22)
                v22 = 2 * v23;
              if (v23 >= 0x555555555555555)
                v24 = 0xAAAAAAAAAAAAAAALL;
              else
                v24 = v22;
              if (!v24)
              {
LABEL_41:
                __break(1u);
LABEL_42:
                abort();
              }
              if (v24 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:sn180100]();
              v31 = 24 * v24;
              v25 = (char *)operator new(24 * v24);
              v26 = &v25[8 * (((char *)v19 - (char *)v21) >> 3)];
              *(_DWORD *)v26 = v32;
              *((_WORD *)v26 + 2) = v16;
              *((_QWORD *)v26 + 1) = v15;
              *((_DWORD *)v26 + 4) = v17;
              v27 = v26;
              if (v19 != v21)
              {
                do
                {
                  v28 = *(_OWORD *)(v19 - 6);
                  *((_DWORD *)v27 - 2) = *(v19 - 2);
                  *(_OWORD *)(v27 - 24) = v28;
                  v27 -= 24;
                  v19 -= 6;
                }
                while (v19 != v21);
                v19 = v21;
              }
              v20 = v26 + 24;
              *(_QWORD *)(a1 + 16) = v27;
              *(_QWORD *)(a1 + 24) = v26 + 24;
              *(_QWORD *)(a1 + 32) = &v25[v31];
              if (v19)
                operator delete(v19);
              LOWORD(v12) = v30;
            }
            else
            {
              if (!v19)
                goto LABEL_41;
              *v19 = v32;
              *((_WORD *)v19 + 2) = v16;
              *((_QWORD *)v19 + 1) = v15;
              v20 = v19 + 6;
              v19[4] = v17;
            }
            *(_QWORD *)(a1 + 24) = v20;
          }
          ++v9;
          ++v11;
        }
        while (v11 != v10);
      }
      v7 = (unsigned int *)&v9[v10 & 1];
      v9 = (unsigned __int16 *)(v7 + 2);
      v8 = (unsigned int *)v29;
      if ((unint64_t)(v7 + 2) >= v29)
        return v7 == v8;
    }
  }
  return v7 == v8;
}

void webrtc::rtcp::CongestionControlFeedback::~CongestionControlFeedback(webrtc::rtcp::CongestionControlFeedback *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B1440;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B1440;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::CongestionWindowPushbackController::CongestionWindowPushbackController(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  int *p_p;
  unint64_t v6;
  BOOL v7;
  int v8;
  int v9;
  int v11;
  void *__p;
  unint64_t v13;
  __int128 v14;

  result = (*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-AddPacingToCongestionWindowPushback", 42);
  if (SBYTE7(v14) < 0)
  {
    v6 = v13;
    if ((v13 & 0x8000000000000000) != 0 || (p_p = (int *)__p, v13) && !__p)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v6 = BYTE7(v14);
  }
  if (v6 >= 7)
  {
    v8 = *p_p;
    v9 = *(int *)((char *)p_p + 3);
    v7 = v8 == 1650552389 && v9 == 1684368482;
    if ((BYTE7(v14) & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v7 = 0;
  if ((BYTE7(v14) & 0x80) != 0)
LABEL_16:
    operator delete(__p);
LABEL_17:
  *(_BYTE *)a1 = v7;
  webrtc::RateControlSettings::RateControlSettings((uint64_t)&__p, a2);
  if (BYTE4(v13))
    v11 = v13;
  else
    v11 = 30000;
  *(_DWORD *)(a1 + 4) = v11;
  webrtc::RateControlSettings::RateControlSettings((uint64_t)&__p, a2);
  *(_OWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  return (_QWORD *)a1;
}

uint64_t cricket::Connection::ConnectionRequest::OnResponse(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 56) + 72))(*(_QWORD *)(a1 + 56), a1, a2);
}

_QWORD *cricket::Connection::ConnectionRequest::OnErrorResponse(_QWORD *this, cricket::StunMessage *a2)
{
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void (*v45)(_QWORD *, _QWORD *);
  void *__p[2];
  int64_t v47;
  void *v48;
  char v49;
  std::string v50;
  char v51;
  _QWORD v52[3];
  _QWORD *v53;
  std::string v54;

  v2 = this[7];
  v3 = *(_BYTE **)(v2 + 248);
  if (!v3 || !*v3 || !*(_QWORD *)(v2 + 256))
    return this;
  v5 = this;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  if (v6 == v7)
  {
LABEL_7:
    v8 = 600;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_34;
  }
  else
  {
    while (*(_WORD *)(*(_QWORD *)v6 + 8) != 9)
    {
      v6 += 8;
      if (v6 == v7)
        goto LABEL_7;
    }
    v8 = *(unsigned __int8 *)(*(_QWORD *)v6 + 13) + 100 * *(unsigned __int8 *)(*(_QWORD *)v6 + 12);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
      goto LABEL_34;
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/Thir"
                                                             "dParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
  v54.__r_.__value_.__l.__size_ = 12002;
  v54.__r_.__value_.__r.__words[2] = (std::string::size_type)&v51;
  cricket::Connection::ToString((cricket::Connection *)v2, &v50);
  v52[0] = &v50;
  v52[1] = &v54;
  v52[2] = ": Received ";
  v53 = v52;
  cricket::StunMethodToString((cricket *)*((unsigned __int16 *)a2 + 16), (unint64_t)&v48);
  v9 = v5[2];
  v10 = (_QWORD *)(v9 + 40);
  if ((*(char *)(v9 + 63) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(v9 + 63);
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v9 + 48);
  if ((v11 & 0x8000000000000000) != 0 || (v10 = (_QWORD *)*v10, v11) && !v10)
  {
    __break(1u);
LABEL_63:
    abort();
  }
  if (v11 >= 0x3FFFFFFFFFFFFFFCLL)
    goto LABEL_63;
LABEL_16:
  v12 = 2 * v11;
  if (v11 >= 0xC)
  {
    v14 = (v12 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = (void *)(2 * v11);
    v47 = v15 | 0x8000000000000000;
    __p[0] = v13;
  }
  else
  {
    HIBYTE(v47) = 2 * v11;
    v13 = __p;
    if (!v11)
    {
      LOBYTE(__p[0]) = 0;
      goto LABEL_26;
    }
  }
  bzero(v13, 2 * v11);
  *((_BYTE *)v13 + 2 * v11) = 0;
  v16 = __p;
  if (v47 < 0)
    v16 = (void **)__p[0];
  v17 = (char *)v16 + 1;
  do
  {
    v18 = *(unsigned __int8 *)v10;
    v10 = (_QWORD *)((char *)v10 + 1);
    v17 += 2;
    --v11;
  }
  while (v11);
LABEL_26:
  if (rtc::g_clock)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    mach_absolute_time();
  }
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v19, v20, v21, v22, v23, v24, v25, *(_QWORD *)v53[1]);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    if ((v49 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_56;
  }
  operator delete(__p[0]);
  if (v49 < 0)
  {
LABEL_56:
    operator delete(v48);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_57;
LABEL_34:
    this = *(_QWORD **)(v2 + 2648);
    *(_QWORD *)(v2 + 2648) = 0;
    if (!this)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_33:
  if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_34;
LABEL_57:
  operator delete(v50.__r_.__value_.__l.__data_);
  this = *(_QWORD **)(v2 + 2648);
  *(_QWORD *)(v2 + 2648) = 0;
  if (this)
LABEL_35:
    this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 8))(this);
LABEL_36:
  if (v8 <= 486)
  {
    if (v8 == 401 || v8 == 420)
      return this;
    goto LABEL_46;
  }
  if (v8 == 500)
    return this;
  if (v8 != 487)
  {
LABEL_46:
    if (*(_WORD *)(v5[2] + 32) != 512)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        cricket::Connection::ToString((cricket::Connection *)v2, &v54);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
      v36 = *(_DWORD *)(v2 + 2560);
      *(_DWORD *)(v2 + 2560) = 3;
      if (v36 != 3 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        cricket::Connection::ToString((cricket::Connection *)v2, &v54);
        rtc::webrtc_logging_impl::Log("\r\n\t", v37, v38, v39, v40, v41, v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 256) + 200))(*(_QWORD *)(v2 + 256), v2);
    }
    return this;
  }
  v26 = *(_BYTE **)(v2 + 248);
  if (v26 && *v26)
  {
    v27 = *(_QWORD **)(v2 + 256);
    v28 = (uint64_t)(v27 + 10);
    this = (_QWORD *)v27[11];
    v27[13] = this;
    if (this == v27 + 10)
      return this;
  }
  else
  {
    v27 = 0;
    v28 = 80;
    this = (_QWORD *)MEMORY[0x58];
    MEMORY[0x68] = MEMORY[0x58];
    if (MEMORY[0x58] == 80)
      return this;
  }
  do
  {
    v45 = (void (*)(_QWORD *, _QWORD *))this[2];
    v44 = this + 2;
    v27[13] = *(v44 - 1);
    v45(v44, v27);
    this = (_QWORD *)v27[13];
  }
  while (this != (_QWORD *)v28);
  return this;
}

void cricket::Connection::ConnectionRequest::OnTimeout(cricket::Connection::ConnectionRequest *this)
{
  cricket::Connection *v2;
  int v3;
  BOOL v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *__p[2];
  int64_t v25;
  std::string v26;

  v2 = (cricket::Connection *)*((_QWORD *)this + 7);
  v3 = *((_DWORD *)v2 + 582) == 0;
  if (!v4 && (rtc::LogMessage::streams_empty_ & 1) != 0)
    return;
  v5.n128_f64[0] = cricket::Connection::ToString(v2, &v26);
  v6 = *((_QWORD *)this + 2);
  v7 = (_QWORD *)(v6 + 40);
  if ((*(char *)(v6 + 63) & 0x80000000) == 0)
  {
    v8 = *(unsigned __int8 *)(v6 + 63);
    goto LABEL_14;
  }
  v8 = *(_QWORD *)(v6 + 48);
  if ((v8 & 0x8000000000000000) != 0 || ((v7 = (_QWORD *)*v7, v8) ? (v9 = v7 == 0) : (v9 = 0), v9))
  {
    __break(1u);
LABEL_35:
    abort();
  }
  if (v8 >= 0x3FFFFFFFFFFFFFFCLL)
    goto LABEL_35;
LABEL_14:
  v10 = 2 * v8;
  if (v8 >= 0xC)
  {
    v12 = (v10 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v12 = v10 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = (void *)(2 * v8);
    v25 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_20;
  }
  HIBYTE(v25) = 2 * v8;
  v11 = __p;
  if (v8)
  {
LABEL_20:
    bzero(v11, 2 * v8);
    *((_BYTE *)v11 + 2 * v8) = 0;
    v14 = __p;
    if (v25 < 0)
      v14 = (void **)__p[0];
    v15 = (char *)v14 + 1;
    do
    {
      v16 = *(unsigned __int8 *)v7;
      v7 = (_QWORD *)((char *)v7 + 1);
      v15 += 2;
      --v8;
    }
    while (v8);
    goto LABEL_24;
  }
  LOBYTE(__p[0]) = 0;
LABEL_24:
  if (rtc::g_clock)
  {
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock, v5);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    mach_absolute_time();
  }
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(v26.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_33;
}

uint64_t cricket::Connection::ConnectionRequest::OnSent(cricket::Connection::ConnectionRequest *this)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  _BYTE *v21;
  unsigned int v22;
  uint64_t result;
  void *__p[2];
  int64_t v25;
  void *v26;
  char v27;
  std::string v28;
  char v29;
  const char *v30;
  uint64_t v31;
  char *v32;

  v2 = *((_QWORD *)this + 7);
  v3 = *(_DWORD *)(v2 + 2328) != 0;
  if (!v4 && (rtc::LogMessage::streams_empty_ & 1) != 0)
    goto LABEL_27;
  v30 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
  v31 = v3 | 0x3008u;
  v32 = &v29;
  cricket::Connection::ToString((cricket::Connection *)v2, &v28);
  cricket::StunMethodToString((cricket *)*(unsigned __int16 *)(*((_QWORD *)this + 2) + 32), (unint64_t)&v26);
  v12 = *((_QWORD *)this + 2);
  v13 = (_QWORD *)(v12 + 40);
  if ((*(char *)(v12 + 63) & 0x80000000) == 0)
  {
    v14 = *(unsigned __int8 *)(v12 + 63);
    goto LABEL_14;
  }
  v14 = *(_QWORD *)(v12 + 48);
  if ((v14 & 0x8000000000000000) != 0 || ((v13 = (_QWORD *)*v13, v14) ? (v15 = v13 == 0) : (v15 = 0), v15))
  {
    __break(1u);
LABEL_37:
    abort();
  }
  if (v14 >= 0x3FFFFFFFFFFFFFFCLL)
    goto LABEL_37;
LABEL_14:
  v16 = 2 * v14;
  if (v14 >= 0xC)
  {
    v18 = (v16 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = operator new(v18 + 1);
    __p[1] = (void *)(2 * v14);
    v25 = v19 | 0x8000000000000000;
    __p[0] = v17;
  }
  else
  {
    HIBYTE(v25) = 2 * v14;
    v17 = __p;
    if (!v14)
    {
      LOBYTE(__p[0]) = 0;
      goto LABEL_24;
    }
  }
  bzero(v17, 2 * v14);
  *((_BYTE *)v17 + 2 * v14) = 0;
  v20 = __p;
  if (v25 < 0)
    v20 = (void **)__p[0];
  v21 = (char *)v20 + 1;
  do
  {
    v22 = *(unsigned __int8 *)v13;
    v13 = (_QWORD *)((char *)v13 + 1);
    v21 += 2;
    --v14;
  }
  while (v14);
LABEL_24:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)v30);
  if ((SHIBYTE(v25) & 0x80000000) == 0)
  {
    if ((v27 & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_33;
  }
  operator delete(__p[0]);
  if (v27 < 0)
  {
LABEL_33:
    operator delete(v26);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_34;
LABEL_27:
    ++*(_QWORD *)(v2 + 1184);
    result = *(_QWORD *)(v2 + 2632);
    if (!result)
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_26:
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_27;
LABEL_34:
  operator delete(v28.__r_.__value_.__l.__data_);
  ++*(_QWORD *)(v2 + 1184);
  result = *(_QWORD *)(v2 + 2632);
  if (result)
LABEL_28:
    result = webrtc::IceEventLog::LogCandidatePairEvent(result, 0, *(_DWORD *)(v2 + 240), *(_DWORD *)(*((_QWORD *)this + 2) + 64));
LABEL_29:
  if (!*(_QWORD *)(v2 + 1240))
    ++*(_QWORD *)(v2 + 1192);
  *((_BYTE *)this + 36) = 1;
  return result;
}

uint64_t cricket::Connection::ConnectionRequest::resend_delay(cricket::Connection::ConnectionRequest *this)
{
  return 60000;
}

uint64_t cricket::Connection::Connection(uint64_t a1, uint64_t *a2, unint64_t a3, std::string *a4)
{
  rtc *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v25;
  _QWORD v26[5];

  v26[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B14B8;
  *(_QWORD *)(a1 + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 16) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 24;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 72) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 80) = a1 + 80;
  *(_QWORD *)(a1 + 88) = a1 + 80;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 80;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 128) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 136) = a1 + 136;
  *(_QWORD *)(a1 + 144) = a1 + 136;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 136;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 184) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 192) = a1 + 192;
  *(_QWORD *)(a1 + 200) = a1 + 192;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 192;
  *(_BYTE *)(a1 + 224) = 0;
  v8 = (rtc *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2[1] + 208))(a2[1]);
  *(_QWORD *)(a1 + 232) = v8;
  *(_DWORD *)(a1 + 240) = rtc::CreateRandomId(v8);
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 248) = v9;
  v10 = a2[1];
  *(_QWORD *)(a1 + 256) = v10;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
  if (0x84BDA12F684BDA13 * ((uint64_t)(v11[1] - *v11) >> 4) <= a3)
    __break(1u);
  cricket::Candidate::Candidate((std::string *)(a1 + 264), (std::string *)(*v11 + 432 * a3));
  cricket::Candidate::Candidate((std::string *)(a1 + 696), a4);
  cricket::ConnectionInfo::ConnectionInfo((cricket::ConnectionInfo *)(a1 + 1128));
  *(_QWORD *)(a1 + 2192) = &off_24C0BAFD8;
  *(_QWORD *)(a1 + 2200) = 100;
  *(_QWORD *)(a1 + 2208) = 10;
  *(_QWORD *)(a1 + 2216) = operator new[]();
  *(_QWORD *)(a1 + 2224) = 0;
  *(_QWORD *)(a1 + 2240) = -1;
  *(_QWORD *)(a1 + 2256) = &off_24C0BAFD8;
  *(_QWORD *)(a1 + 2264) = 100;
  *(_QWORD *)(a1 + 2272) = 10;
  *(_QWORD *)(a1 + 2280) = operator new[]();
  *(_QWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2304) = -1;
  *(_QWORD *)(a1 + 2320) = 0;
  *(_DWORD *)(a1 + 2328) = 2;
  *(_DWORD *)(a1 + 2332) = 256;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_DWORD *)(a1 + 2340) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 208))(*(_QWORD *)(a1 + 256));
  v26[0] = &off_24C0B1658;
  v26[1] = a1;
  v26[3] = v26;
  *(_QWORD *)(a1 + 2352) = v12;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2368) = 0;
  *(_QWORD *)(a1 + 2360) = a1 + 2368;
  *(_QWORD *)(a1 + 2408) = a1 + 2384;
  *(_QWORD *)(a1 + 2384) = &off_24C0B1658;
  *(_QWORD *)(a1 + 2392) = a1;
  *(_QWORD *)(a1 + 2416) = 3000;
  *(_QWORD *)(a1 + 2424) = 0;
  *(_BYTE *)(a1 + 2432) = 0;
  *(_BYTE *)(a1 + 2436) = 0;
  *(_BYTE *)(a1 + 2528) = 0;
  *(_BYTE *)(a1 + 2536) = 0;
  *(_BYTE *)(a1 + 2540) = 0;
  *(_BYTE *)(a1 + 2544) = 0;
  *(_BYTE *)(a1 + 2548) = 0;
  *(_BYTE *)(a1 + 2552) = 0;
  *(_BYTE *)(a1 + 2556) = 0;
  *(_DWORD *)(a1 + 2560) = 0;
  *(_BYTE *)(a1 + 2564) = 0;
  *(_BYTE *)(a1 + 2568) = 0;
  *(_BYTE *)(a1 + 2504) = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  if (rtc::g_clock)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v13 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *(_QWORD *)(a1 + 2576) = v13 / 1000000;
  if (rtc::g_clock)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
  }
  else
  {
    gettimeofday((timeval *)&v25, 0);
    v14 = SLODWORD(v25.__r_.__value_.__r.__words[1]) + 1000000 * v25.__r_.__value_.__r.__words[0];
  }
  v15 = v14 / 1000;
  if (rtc::g_clock)
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v16 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
        / dword_253EA791C;
  }
  *(_QWORD *)(a1 + 2584) = v16 / -1000000 + v15;
  *(_DWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2596) = 0;
  *(_BYTE *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2632) = 0;
  *(_WORD *)(a1 + 2640) = 0;
  *(_QWORD *)(a1 + 2648) = 0;
  *(double *)(a1 + 2672) = nan("uninit");
  *(_OWORD *)(a1 + 2680) = xmmword_208F070A0;
  *(_BYTE *)(a1 + 2696) = 0;
  *(_BYTE *)(a1 + 2704) = 0;
  *(_QWORD *)(a1 + 2664) = 0x40868AC7B8CC7DECLL;
  *(double *)(a1 + 2672) = nan("uninit");
  *(_OWORD *)(a1 + 2680) = xmmword_208F070A0;
  *(_BYTE *)(a1 + 2712) = 0;
  *(_BYTE *)(a1 + 2744) = 0;
  *(_BYTE *)(a1 + 2752) = 0;
  *(_BYTE *)(a1 + 2784) = 0;
  *(_QWORD *)(a1 + 2808) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a1 + 2816) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::Connection::ToString((cricket::Connection *)a1, &v25);
    rtc::webrtc_logging_impl::Log("\r\n\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  return a1;
}

double cricket::Connection::ToString@<D0>(cricket::Connection *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  size_t v5;
  std::string::value_type *p_p_new_stuff;
  std::string::value_type *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type size;
  _BYTE *v16;
  std::string *v17;
  char *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  char *v25;
  std::string::size_type v26;
  std::string *v27;
  _BYTE *v28;
  std::string::size_type v29;
  uint64_t v30;
  char *v31;
  size_t v32;
  BOOL v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string *v36;
  char *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string *v41;
  _BYTE *v42;
  std::string::size_type v43;
  rtc::Network *v44;
  size_t v45;
  BOOL v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  char *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  std::string::size_type v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  BOOL v58;
  char *v59;
  std::string::size_type v60;
  std::string::size_type v61;
  std::string *v62;
  char *v63;
  std::string::size_type v64;
  std::string *v65;
  _BYTE *v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string *v70;
  _BYTE *v71;
  std::string::size_type v72;
  std::string *v73;
  std::string *v74;
  std::string::size_type v75;
  int v76;
  std::string::size_type v77;
  std::string *v78;
  _BYTE *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string *v82;
  std::string::size_type v83;
  int v84;
  std::string::size_type v85;
  unsigned int v86;
  const char *v87;
  size_t v88;
  std::string *v89;
  _BYTE *v90;
  std::string::size_type v91;
  int v92;
  std::string::size_type v93;
  std::string::size_type v94;
  std::string *v95;
  char *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  int v99;
  std::string::size_type v100;
  char *v101;
  int v102;
  size_t v103;
  BOOL v104;
  std::string *v105;
  _BYTE *v106;
  std::string::size_type v107;
  int v108;
  std::string::size_type v109;
  std::string::size_type v110;
  std::string *v111;
  char *v112;
  std::string::size_type v113;
  std::string::size_type v114;
  int v115;
  std::string::size_type v116;
  unsigned __int8 v117;
  size_t v118;
  BOOL v119;
  std::string *v120;
  std::string *v121;
  _BYTE *v122;
  std::string::size_type v123;
  int v124;
  std::string::size_type v125;
  std::string::size_type v126;
  std::string *v127;
  char *v128;
  std::string::size_type v129;
  int v130;
  std::string::size_type v131;
  std::string::size_type v132;
  int v133;
  size_t v134;
  BOOL v135;
  char *v136;
  std::string *v137;
  _WORD *v138;
  std::string::size_type v139;
  int v140;
  std::string::size_type v141;
  std::string::size_type v142;
  std::string *v143;
  char *v144;
  std::string::size_type v145;
  std::string::size_type v146;
  int v147;
  std::string::size_type v148;
  std::string *v149;
  _BYTE *v150;
  std::string::size_type v151;
  std::string *v152;
  std::string *v153;
  std::string::size_type v154;
  int v155;
  std::string::size_type v156;
  std::string *v157;
  _BYTE *v158;
  std::string::size_type v159;
  std::string *v160;
  std::string *v161;
  std::string::size_type v162;
  int v163;
  std::string::size_type v164;
  unsigned int v165;
  const char *v166;
  size_t v167;
  std::string *v168;
  _BYTE *v169;
  std::string::size_type v170;
  int v171;
  std::string::size_type v172;
  std::string::size_type v173;
  std::string *v174;
  char *v175;
  std::string::size_type v176;
  std::string::size_type v177;
  int v178;
  std::string::size_type v179;
  char *v180;
  int v181;
  size_t v182;
  BOOL v183;
  std::string *v184;
  _BYTE *v185;
  std::string::size_type v186;
  int v187;
  std::string::size_type v188;
  std::string::size_type v189;
  std::string *v190;
  char *v191;
  std::string::size_type v192;
  std::string::size_type v193;
  int v194;
  std::string::size_type v195;
  unsigned __int8 v196;
  size_t v197;
  BOOL v198;
  char *v199;
  std::string *v200;
  _BYTE *v201;
  std::string::size_type v202;
  int v203;
  std::string::size_type v204;
  std::string::size_type v205;
  std::string *v206;
  char *v207;
  std::string::size_type v208;
  std::string::size_type v209;
  int v210;
  std::string::size_type v211;
  const std::string::value_type *v212;
  std::string *v213;
  _BYTE *v214;
  std::string::size_type v215;
  std::string::size_type v216;
  std::string::size_type v217;
  const std::string::value_type *v218;
  std::string *v219;
  std::string::value_type *v220;
  std::string::size_type v221;
  std::string::size_type v222;
  std::string::size_type v223;
  const std::string::value_type *v224;
  std::string *v225;
  std::string::value_type *v226;
  std::string::size_type v227;
  std::string::size_type v228;
  std::string::size_type v229;
  const std::string::value_type *v230;
  std::string *v231;
  std::string::value_type *v232;
  std::string::size_type v233;
  std::string::size_type v234;
  std::string::size_type v235;
  std::string *v236;
  std::string::value_type *v237;
  std::string::size_type v238;
  std::string::size_type v239;
  std::string::size_type v240;
  const std::string::value_type *v241;
  std::string *v242;
  _BYTE *v243;
  std::string::size_type v244;
  std::string::size_type v245;
  std::string::size_type v246;
  std::string *v247;
  std::string::value_type *v248;
  std::string::size_type v249;
  std::string::size_type v250;
  std::string::size_type v251;
  std::string *v252;
  _BYTE *v253;
  std::string::size_type v254;
  std::string *v255;
  std::string *v256;
  std::string::size_type v257;
  int v258;
  std::string::size_type v259;
  std::string *v260;
  _BYTE *v261;
  std::string::size_type v262;
  std::string *v263;
  std::string::size_type v264;
  int v265;
  std::string::size_type v266;
  _BYTE *v267;
  std::string *v268;
  _BYTE *v269;
  std::string::size_type v270;
  uint64_t v271;
  std::string *v272;
  std::string::size_type v273;
  int v274;
  std::string::size_type v275;
  int v276;
  std::string::size_type v277;
  std::string::size_type v278;
  std::string::size_type v279;
  const std::string::value_type *v280;
  std::string *v281;
  std::string::size_type v282;
  std::string::size_type v283;
  std::string *v284;
  _WORD *v285;
  std::string::size_type v286;
  std::string *v287;
  _BYTE *v288;
  std::string::size_type v289;
  std::string::size_type v290;
  int v291;
  _BYTE *v292;
  double result;
  std::string::value_type *__p_new_stuff;
  size_t v295;
  unint64_t v296;
  std::string v297;
  std::string __str[2];
  uint64_t v299;

  v299 = *MEMORY[0x24BDAC8D0];
  memset(&v297, 0, sizeof(v297));
  if (&v297 <= (std::string *)"Conn[" && (char *)v297.__r_.__value_.__r.__words + 5 > "Conn[")
    goto LABEL_713;
  strcpy((char *)&v297, "Conn[");
  *((_BYTE *)&v297.__r_.__value_.__s + 23) = 5;
  snprintf((char *)__str, 0x32uLL, "%x", (_DWORD)this);
  v4 = strlen((const char *)__str);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_714;
  v5 = v4;
  if (v4 > 0x16)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_p_new_stuff = (std::string::value_type *)operator new(v9 + 1);
    v295 = v5;
    v296 = v10 | 0x8000000000000000;
    __p_new_stuff = p_p_new_stuff;
    v7 = &p_p_new_stuff[v5];
    v8 = &p_p_new_stuff[v5] > (std::string::value_type *)__str;
    if (p_p_new_stuff > (std::string::value_type *)__str)
      goto LABEL_11;
  }
  else
  {
    HIBYTE(v296) = v4;
    p_p_new_stuff = (std::string::value_type *)&__p_new_stuff;
    v7 = (char *)&__p_new_stuff + v5;
    v8 = (char *)&__p_new_stuff + v5 > (char *)__str;
    if (&__p_new_stuff > (std::string::value_type **)__str)
      goto LABEL_11;
  }
  if (v8)
    goto LABEL_713;
LABEL_11:
  if (v5)
    memcpy(p_p_new_stuff, __str, v5);
  *v7 = 0;
  if (SHIBYTE(v296) < 0)
  {
    v11 = v295;
    if ((v295 & 0x8000000000000000) != 0)
      goto LABEL_713;
    v13 = __p_new_stuff;
    v12 = v295 == 0;
    if (v295)
    {
      if (!__p_new_stuff)
        goto LABEL_713;
    }
  }
  else
  {
    v11 = HIBYTE(v296);
    v12 = HIBYTE(v296) == 0;
    v13 = (char *)&__p_new_stuff;
  }
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = 22;
  else
    v14 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  else
    size = v297.__r_.__value_.__l.__size_;
  if (v14 - size >= v11)
  {
    if (!v12)
    {
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v297;
      else
        v17 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v18 = (char *)v17 + size;
      if ((char *)v17 + size <= v13 && &v18[v11] > v13)
        goto LABEL_713;
      memmove(v18, v13, v11);
      v19 = size + v11;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      {
        v297.__r_.__value_.__l.__size_ = size + v11;
        v17->__r_.__value_.__s.__data_[v19] = 0;
        if ((SHIBYTE(v296) & 0x80000000) == 0)
          goto LABEL_37;
LABEL_26:
        operator delete(__p_new_stuff);
        v16 = (_BYTE *)*((_QWORD *)this + 31);
        if (!v16)
          goto LABEL_47;
        goto LABEL_38;
      }
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v19 & 0x7F;
      v17->__r_.__value_.__s.__data_[v19] = 0;
    }
    if ((SHIBYTE(v296) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_26;
  }
  std::string::__grow_by_and_replace(&v297, v14, size + v11 - v14, size, size, 0, v11, v13);
  if (SHIBYTE(v296) < 0)
    goto LABEL_26;
LABEL_37:
  v16 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v16)
    goto LABEL_47;
LABEL_38:
  if (*v16 && *((_QWORD *)this + 32))
  {
    v20 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = 22;
    else
      v21 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = v297.__r_.__value_.__l.__size_;
    if (v21 == v20)
    {
      std::string::__grow_by_and_replace(&v297, v21, 1uLL, v21, v21, 0, 1uLL, ":");
    }
    else
    {
      v27 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v28 = (char *)v27 + v20;
      if ((char *)v27 + v20 <= ":" && v28 + 1 > ":")
        goto LABEL_713;
      *v28 = 58;
      v29 = v20 + 1;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        v297.__r_.__value_.__l.__size_ = v29;
      else
        *((_BYTE *)&v297.__r_.__value_.__s + 23) = v29 & 0x7F;
      v27->__r_.__value_.__s.__data_[v29] = 0;
    }
    v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 248))(*((_QWORD *)this + 32));
    v31 = (char *)v30;
    if (*(char *)(v30 + 23) < 0)
    {
      v32 = *(_QWORD *)(v30 + 8);
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_713;
      v31 = *(char **)v30;
      v33 = v32 == 0;
      if (v32)
      {
        if (!v31)
          goto LABEL_713;
      }
    }
    else
    {
      v32 = *(unsigned __int8 *)(v30 + 23);
      v33 = *(_BYTE *)(v30 + 23) == 0;
    }
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = 22;
    else
      v34 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    else
      v35 = v297.__r_.__value_.__l.__size_;
    if (v34 - v35 >= v32)
    {
      if (!v33)
      {
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &v297;
        else
          v36 = (std::string *)v297.__r_.__value_.__r.__words[0];
        v37 = (char *)v36 + v35;
        if ((char *)v36 + v35 <= v31 && &v37[v32] > v31)
          goto LABEL_713;
        memmove(v37, v31, v32);
        v38 = v35 + v32;
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          v297.__r_.__value_.__l.__size_ = v35 + v32;
        else
          *((_BYTE *)&v297.__r_.__value_.__s + 23) = v38 & 0x7F;
        v36->__r_.__value_.__s.__data_[v38] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v297, v34, v35 + v32 - v34, v35, v35, 0, v32, v31);
    }
    v39 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = 22;
    else
      v40 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v39 = v297.__r_.__value_.__l.__size_;
    if (v40 == v39)
    {
      std::string::__grow_by_and_replace(&v297, v40, 1uLL, v40, v40, 0, 1uLL, ":");
    }
    else
    {
      v41 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v42 = (char *)v41 + v39;
      if ((char *)v41 + v39 <= ":" && v42 + 1 > ":")
        goto LABEL_713;
      *v42 = 58;
      v43 = v39 + 1;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        v297.__r_.__value_.__l.__size_ = v43;
      else
        *((_BYTE *)&v297.__r_.__value_.__s + 23) = v43 & 0x7F;
      v41->__r_.__value_.__s.__data_[v43] = 0;
    }
    v44 = (rtc::Network *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 24))(*((_QWORD *)this + 32));
    rtc::Network::ToString(v44, __str);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v45 = __str[0].__r_.__value_.__l.__size_;
      if ((__str[0].__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
        goto LABEL_713;
      v47 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
      v46 = __str[0].__r_.__value_.__l.__size_ == 0;
      if (__str[0].__r_.__value_.__l.__size_)
      {
        if (!__str[0].__r_.__value_.__r.__words[0])
          goto LABEL_713;
      }
    }
    else
    {
      v45 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
      v46 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]) == 0;
      v47 = __str;
    }
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = 22;
    else
      v48 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    else
      v49 = v297.__r_.__value_.__l.__size_;
    if (v48 - v49 >= v45)
    {
      if (!v46)
      {
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v297;
        else
          v50 = (std::string *)v297.__r_.__value_.__r.__words[0];
        v51 = (char *)v50 + v49;
        if ((std::string *)((char *)v50 + v49) <= v47 && &v51[v45] > (char *)v47)
          goto LABEL_713;
        memmove(v51, v47, v45);
        v52 = v49 + v45;
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          v297.__r_.__value_.__l.__size_ = v49 + v45;
        else
          *((_BYTE *)&v297.__r_.__value_.__s + 23) = v52 & 0x7F;
        v50->__r_.__value_.__s.__data_[v52] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v297, v48, v49 + v45 - v48, v49, v49, 0, v45, (const std::string::value_type *)v47);
    }
    v53 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = 22;
    else
      v54 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v53 = v297.__r_.__value_.__l.__size_;
    if (v54 == v53)
    {
      std::string::__grow_by_and_replace(&v297, v54, 1uLL, v54, v54, 0, 1uLL, ":");
      if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_142;
    }
    else
    {
      v65 = &v297;
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v65 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v66 = (char *)v65 + v53;
      if ((char *)v65 + v53 <= ":" && v66 + 1 > ":")
        goto LABEL_713;
      *v66 = 58;
      v67 = v53 + 1;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      {
        v297.__r_.__value_.__l.__size_ = v67;
        v65->__r_.__value_.__s.__data_[v67] = 0;
        if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_142;
      }
      else
      {
        *((_BYTE *)&v297.__r_.__value_.__s + 23) = v67 & 0x7F;
        v65->__r_.__value_.__s.__data_[v67] = 0;
        if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_142;
      }
    }
    operator delete(__str[0].__r_.__value_.__l.__data_);
    goto LABEL_142;
  }
LABEL_47:
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = 22;
  else
    v22 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  else
    v23 = v297.__r_.__value_.__l.__size_;
  if (v22 - v23 >= 5)
  {
    v24 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v25 = (char *)v24 + v23;
    if ((char *)v24 + v23 <= ":#:#:" && v25 + 5 > ":#:#:")
      goto LABEL_713;
    v25[4] = 58;
    *(_DWORD *)v25 = 591012666;
    v26 = v23 + 5;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v23 + 5;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v26 & 0x7F;
    v24->__r_.__value_.__s.__data_[v26] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v297, v22, v23 - v22 + 5, v23, v23, 0, 5uLL, ":#:#:");
  }
LABEL_142:
  v55 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this);
  v56 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 24))(this);
  if (*(char *)(v55 + 23) < 0)
  {
    v57 = *(_QWORD *)(v55 + 8);
    if ((v57 & 0x8000000000000000) != 0)
      goto LABEL_713;
    v59 = *(char **)v55;
    v58 = v57 == 0;
    if (v57)
    {
      if (!v59)
        goto LABEL_713;
    }
  }
  else
  {
    v57 = *(unsigned __int8 *)(v55 + 23);
    v58 = *(_BYTE *)(v55 + 23) == 0;
    v59 = (char *)v55;
  }
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v60 = 22;
  else
    v60 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  else
    v61 = v297.__r_.__value_.__l.__size_;
  if (v60 - v61 >= v57)
  {
    if (!v58)
    {
      if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v297;
      else
        v62 = (std::string *)v297.__r_.__value_.__r.__words[0];
      v63 = (char *)v62 + v61;
      if ((char *)v62 + v61 <= v59 && &v63[v57] > v59)
        goto LABEL_713;
      memmove(v63, v59, v57);
      v64 = v61 + v57;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        v297.__r_.__value_.__l.__size_ = v61 + v57;
      else
        *((_BYTE *)&v297.__r_.__value_.__s + 23) = v64 & 0x7F;
      v62->__r_.__value_.__s.__data_[v64] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v297, v60, v61 + v57 - v60, v61, v61, 0, v57, v59);
  }
  v68 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = 22;
  else
    v69 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v68 = v297.__r_.__value_.__l.__size_;
  if (v69 == v68)
  {
    std::string::__grow_by_and_replace(&v297, v69, 1uLL, v69, v69, 0, 1uLL, ":");
  }
  else
  {
    v70 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v70 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v71 = (char *)v70 + v68;
    if ((char *)v70 + v68 <= ":" && v71 + 1 > ":")
      goto LABEL_713;
    *v71 = 58;
    v72 = v68 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v72;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v72 & 0x7F;
    v70->__r_.__value_.__s.__data_[v72] = 0;
  }
  v73 = rtc::StringBuilder::operator<<(&v297, *(_DWORD *)(v55 + 24));
  v74 = v73;
  v75 = HIBYTE(v73->__r_.__value_.__r.__words[2]);
  v76 = (char)v75;
  if ((v75 & 0x80u) == 0)
    v77 = 22;
  else
    v77 = (v73->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v75 & 0x80u) != 0)
    v75 = v73->__r_.__value_.__l.__size_;
  if (v77 == v75)
  {
    std::string::__grow_by_and_replace(v73, v77, 1uLL, v77, v77, 0, 1uLL, ":");
  }
  else
  {
    if (v76 >= 0)
      v78 = v73;
    else
      v78 = (std::string *)v73->__r_.__value_.__r.__words[0];
    v79 = (char *)v78 + v75;
    if ((char *)v78 + v75 <= ":" && v79 + 1 > ":")
      goto LABEL_713;
    *v79 = 58;
    v80 = v75 + 1;
    if (SHIBYTE(v73->__r_.__value_.__r.__words[2]) < 0)
      v73->__r_.__value_.__l.__size_ = v80;
    else
      *((_BYTE *)&v73->__r_.__value_.__s + 23) = v80 & 0x7F;
    v78->__r_.__value_.__s.__data_[v80] = 0;
  }
  v81 = rtc::StringBuilder::operator<<(v74, *(_DWORD *)(v55 + 248));
  v82 = v81;
  v83 = HIBYTE(v81->__r_.__value_.__r.__words[2]);
  v84 = (char)v83;
  if ((v83 & 0x80u) == 0)
    v85 = 22;
  else
    v85 = (v81->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v83 & 0x80u) != 0)
    v83 = v81->__r_.__value_.__l.__size_;
  if (v85 == v83)
  {
    std::string::__grow_by_and_replace(v81, v85, 1uLL, v85, v85, 0, 1uLL, ":");
    v86 = *(_DWORD *)(v55 + 208) - 1;
    if (v86 <= 2)
    {
LABEL_210:
      v87 = off_24C0B16D8[v86];
      v88 = 5;
      goto LABEL_219;
    }
  }
  else
  {
    if (v84 >= 0)
      v89 = v81;
    else
      v89 = (std::string *)v81->__r_.__value_.__r.__words[0];
    v90 = (char *)v89 + v83;
    if ((char *)v89 + v83 <= ":" && v90 + 1 > ":")
      goto LABEL_713;
    *v90 = 58;
    v91 = v83 + 1;
    if (SHIBYTE(v81->__r_.__value_.__r.__words[2]) < 0)
    {
      v81->__r_.__value_.__l.__size_ = v91;
      v89->__r_.__value_.__s.__data_[v91] = 0;
      v86 = *(_DWORD *)(v55 + 208) - 1;
      if (v86 <= 2)
        goto LABEL_210;
    }
    else
    {
      *((_BYTE *)&v81->__r_.__value_.__s + 23) = v91 & 0x7F;
      v89->__r_.__value_.__s.__data_[v91] = 0;
      v86 = *(_DWORD *)(v55 + 208) - 1;
      if (v86 <= 2)
        goto LABEL_210;
    }
  }
  v87 = "host";
  v88 = 4;
LABEL_219:
  v92 = SHIBYTE(v82->__r_.__value_.__r.__words[2]);
  if (v92 >= 0)
    v93 = 22;
  else
    v93 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v92 >= 0)
    v94 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  else
    v94 = v82->__r_.__value_.__l.__size_;
  if (v93 - v94 >= v88)
  {
    if (v92 >= 0)
      v95 = v82;
    else
      v95 = (std::string *)v82->__r_.__value_.__r.__words[0];
    v96 = (char *)v95 + v94;
    if ((char *)v95 + v94 <= v87 && &v96[v88] > v87)
      goto LABEL_713;
    memcpy(v96, v87, v88);
    v97 = v94 + v88;
    if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
      v82->__r_.__value_.__l.__size_ = v97;
    else
      *((_BYTE *)&v82->__r_.__value_.__s + 23) = v97 & 0x7F;
    v95->__r_.__value_.__s.__data_[v97] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v82, v93, v94 + v88 - v93, v94, v94, 0, v88, v87);
  }
  v98 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  v99 = (char)v98;
  if ((v98 & 0x80u) == 0)
    v100 = 22;
  else
    v100 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v98 & 0x80u) != 0)
    v98 = v82->__r_.__value_.__l.__size_;
  if (v100 == v98)
  {
    std::string::__grow_by_and_replace(v82, v100, 1uLL, v100, v100, 0, 1uLL, ":");
    v101 = (char *)(v55 + 32);
    v102 = *(char *)(v55 + 55);
    if ((v102 & 0x80000000) == 0)
    {
LABEL_245:
      v103 = v102;
      v104 = v102 == 0;
      goto LABEL_256;
    }
  }
  else
  {
    if (v99 >= 0)
      v105 = v82;
    else
      v105 = (std::string *)v82->__r_.__value_.__r.__words[0];
    v106 = (char *)v105 + v98;
    if ((char *)v105 + v98 <= ":" && v106 + 1 > ":")
      goto LABEL_713;
    *v106 = 58;
    v107 = v98 + 1;
    if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
    {
      v82->__r_.__value_.__l.__size_ = v107;
      v105->__r_.__value_.__s.__data_[v107] = 0;
      v101 = (char *)(v55 + 32);
      v102 = *(char *)(v55 + 55);
      if ((v102 & 0x80000000) == 0)
        goto LABEL_245;
    }
    else
    {
      *((_BYTE *)&v82->__r_.__value_.__s + 23) = v107 & 0x7F;
      v105->__r_.__value_.__s.__data_[v107] = 0;
      v101 = (char *)(v55 + 32);
      v102 = *(char *)(v55 + 55);
      if ((v102 & 0x80000000) == 0)
        goto LABEL_245;
    }
  }
  v103 = *(_QWORD *)(v55 + 40);
  if ((v103 & 0x8000000000000000) != 0)
    goto LABEL_713;
  v101 = *(char **)v101;
  v104 = v103 == 0;
  if (v103)
  {
    if (!v101)
      goto LABEL_713;
  }
LABEL_256:
  v108 = SHIBYTE(v82->__r_.__value_.__r.__words[2]);
  if (v108 >= 0)
    v109 = 22;
  else
    v109 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v108 >= 0)
    v110 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  else
    v110 = v82->__r_.__value_.__l.__size_;
  if (v109 - v110 >= v103)
  {
    if (!v104)
    {
      if (v108 >= 0)
        v111 = v82;
      else
        v111 = (std::string *)v82->__r_.__value_.__r.__words[0];
      v112 = (char *)v111 + v110;
      if ((char *)v111 + v110 <= v101 && &v112[v103] > v101)
        goto LABEL_713;
      memmove(v112, v101, v103);
      v113 = v110 + v103;
      if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
        v82->__r_.__value_.__l.__size_ = v113;
      else
        *((_BYTE *)&v82->__r_.__value_.__s + 23) = v113 & 0x7F;
      v111->__r_.__value_.__s.__data_[v113] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v82, v109, v110 + v103 - v109, v110, v110, 0, v103, v101);
  }
  v114 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  v115 = (char)v114;
  if ((v114 & 0x80u) == 0)
    v116 = 22;
  else
    v116 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v114 & 0x80u) != 0)
    v114 = v82->__r_.__value_.__l.__size_;
  if (v116 == v114)
  {
    std::string::__grow_by_and_replace(v82, v116, 1uLL, v116, v116, 0, 1uLL, ":");
    rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v55 + 80), (char *)__str);
    v117 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_283:
      v118 = v117;
      v119 = v117 == 0;
      v120 = __str;
      goto LABEL_294;
    }
  }
  else
  {
    if (v115 >= 0)
      v121 = v82;
    else
      v121 = (std::string *)v82->__r_.__value_.__r.__words[0];
    v122 = (char *)v121 + v114;
    if ((char *)v121 + v114 <= ":" && v122 + 1 > ":")
      goto LABEL_713;
    *v122 = 58;
    v123 = v114 + 1;
    if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
    {
      v82->__r_.__value_.__l.__size_ = v123;
      v121->__r_.__value_.__s.__data_[v123] = 0;
      rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v55 + 80), (char *)__str);
      v117 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_283;
    }
    else
    {
      *((_BYTE *)&v82->__r_.__value_.__s + 23) = v123 & 0x7F;
      v121->__r_.__value_.__s.__data_[v123] = 0;
      rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v55 + 80), (char *)__str);
      v117 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_283;
    }
  }
  v118 = __str[0].__r_.__value_.__l.__size_;
  if ((__str[0].__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_713;
  v120 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
  v119 = __str[0].__r_.__value_.__l.__size_ == 0;
  if (__str[0].__r_.__value_.__l.__size_)
  {
    if (!__str[0].__r_.__value_.__r.__words[0])
      goto LABEL_713;
  }
LABEL_294:
  v124 = SHIBYTE(v82->__r_.__value_.__r.__words[2]);
  if (v124 >= 0)
    v125 = 22;
  else
    v125 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v124 >= 0)
    v126 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  else
    v126 = v82->__r_.__value_.__l.__size_;
  if (v125 - v126 >= v118)
  {
    if (!v119)
    {
      if (v124 >= 0)
        v127 = v82;
      else
        v127 = (std::string *)v82->__r_.__value_.__r.__words[0];
      v128 = (char *)v127 + v126;
      if ((std::string *)((char *)v127 + v126) <= v120 && &v128[v118] > (char *)v120)
        goto LABEL_713;
      memmove(v128, v120, v118);
      v129 = v126 + v118;
      if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
        v82->__r_.__value_.__l.__size_ = v129;
      else
        *((_BYTE *)&v82->__r_.__value_.__s + 23) = v129 & 0x7F;
      v127->__r_.__value_.__s.__data_[v129] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v82, v125, v126 + v118 - v125, v126, v126, 0, v118, (const std::string::value_type *)v120);
  }
  v130 = SHIBYTE(v82->__r_.__value_.__r.__words[2]);
  if (v130 >= 0)
    v131 = 22;
  else
    v131 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v130 >= 0)
    v132 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  else
    v132 = v82->__r_.__value_.__l.__size_;
  if (v131 - v132 >= 2)
  {
    if (v130 >= 0)
      v137 = v82;
    else
      v137 = (std::string *)v82->__r_.__value_.__r.__words[0];
    v138 = (_WORD *)((char *)v137 + v132);
    if ((char *)v137 + v132 <= "->" && v138 + 1 > (_WORD *)"->")
      goto LABEL_713;
    *v138 = 15917;
    v139 = v132 + 2;
    if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
    {
      v82->__r_.__value_.__l.__size_ = v139;
      v137->__r_.__value_.__s.__data_[v139] = 0;
      v133 = *(char *)(v56 + 23);
      if ((v133 & 0x80000000) == 0)
        goto LABEL_322;
    }
    else
    {
      *((_BYTE *)&v82->__r_.__value_.__s + 23) = v139 & 0x7F;
      v137->__r_.__value_.__s.__data_[v139] = 0;
      v133 = *(char *)(v56 + 23);
      if ((v133 & 0x80000000) == 0)
        goto LABEL_322;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v82, v131, v132 - v131 + 2, v132, v132, 0, 2uLL, "->");
    v133 = *(char *)(v56 + 23);
    if ((v133 & 0x80000000) == 0)
    {
LABEL_322:
      v134 = v133;
      v135 = v133 == 0;
      v136 = (char *)v56;
      goto LABEL_333;
    }
  }
  v134 = *(_QWORD *)(v56 + 8);
  if ((v134 & 0x8000000000000000) != 0)
    goto LABEL_713;
  v136 = *(char **)v56;
  v135 = v134 == 0;
  if (v134)
  {
    if (!v136)
      goto LABEL_713;
  }
LABEL_333:
  v140 = SHIBYTE(v82->__r_.__value_.__r.__words[2]);
  if (v140 >= 0)
    v141 = 22;
  else
    v141 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v140 >= 0)
    v142 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  else
    v142 = v82->__r_.__value_.__l.__size_;
  if (v141 - v142 >= v134)
  {
    if (!v135)
    {
      if (v140 >= 0)
        v143 = v82;
      else
        v143 = (std::string *)v82->__r_.__value_.__r.__words[0];
      v144 = (char *)v143 + v142;
      if ((char *)v143 + v142 <= v136 && &v144[v134] > v136)
        goto LABEL_713;
      memmove(v144, v136, v134);
      v145 = v142 + v134;
      if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
        v82->__r_.__value_.__l.__size_ = v145;
      else
        *((_BYTE *)&v82->__r_.__value_.__s + 23) = v145 & 0x7F;
      v143->__r_.__value_.__s.__data_[v145] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v82, v141, v142 + v134 - v141, v142, v142, 0, v134, v136);
  }
  v146 = HIBYTE(v82->__r_.__value_.__r.__words[2]);
  v147 = (char)v146;
  if ((v146 & 0x80u) == 0)
    v148 = 22;
  else
    v148 = (v82->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v146 & 0x80u) != 0)
    v146 = v82->__r_.__value_.__l.__size_;
  if (v148 == v146)
  {
    std::string::__grow_by_and_replace(v82, v148, 1uLL, v148, v148, 0, 1uLL, ":");
  }
  else
  {
    if (v147 >= 0)
      v149 = v82;
    else
      v149 = (std::string *)v82->__r_.__value_.__r.__words[0];
    v150 = (char *)v149 + v146;
    if ((char *)v149 + v146 <= ":" && v150 + 1 > ":")
      goto LABEL_713;
    *v150 = 58;
    v151 = v146 + 1;
    if (SHIBYTE(v82->__r_.__value_.__r.__words[2]) < 0)
      v82->__r_.__value_.__l.__size_ = v151;
    else
      *((_BYTE *)&v82->__r_.__value_.__s + 23) = v151 & 0x7F;
    v149->__r_.__value_.__s.__data_[v151] = 0;
  }
  v152 = rtc::StringBuilder::operator<<(v82, *(_DWORD *)(v56 + 24));
  v153 = v152;
  v154 = HIBYTE(v152->__r_.__value_.__r.__words[2]);
  v155 = (char)v154;
  if ((v154 & 0x80u) == 0)
    v156 = 22;
  else
    v156 = (v152->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v154 & 0x80u) != 0)
    v154 = v152->__r_.__value_.__l.__size_;
  if (v156 == v154)
  {
    std::string::__grow_by_and_replace(v152, v156, 1uLL, v156, v156, 0, 1uLL, ":");
  }
  else
  {
    if (v155 >= 0)
      v157 = v152;
    else
      v157 = (std::string *)v152->__r_.__value_.__r.__words[0];
    v158 = (char *)v157 + v154;
    if ((char *)v157 + v154 <= ":" && v158 + 1 > ":")
      goto LABEL_713;
    *v158 = 58;
    v159 = v154 + 1;
    if (SHIBYTE(v152->__r_.__value_.__r.__words[2]) < 0)
      v152->__r_.__value_.__l.__size_ = v159;
    else
      *((_BYTE *)&v152->__r_.__value_.__s + 23) = v159 & 0x7F;
    v157->__r_.__value_.__s.__data_[v159] = 0;
  }
  v160 = rtc::StringBuilder::operator<<(v153, *(_DWORD *)(v56 + 152));
  v161 = v160;
  v162 = HIBYTE(v160->__r_.__value_.__r.__words[2]);
  v163 = (char)v162;
  if ((v162 & 0x80u) == 0)
    v164 = 22;
  else
    v164 = (v160->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v162 & 0x80u) != 0)
    v162 = v160->__r_.__value_.__l.__size_;
  if (v164 == v162)
  {
    std::string::__grow_by_and_replace(v160, v164, 1uLL, v164, v164, 0, 1uLL, ":");
    v165 = *(_DWORD *)(v56 + 208) - 1;
    if (v165 <= 2)
    {
LABEL_392:
      v166 = off_24C0B16D8[v165];
      v167 = 5;
      goto LABEL_401;
    }
  }
  else
  {
    if (v163 >= 0)
      v168 = v160;
    else
      v168 = (std::string *)v160->__r_.__value_.__r.__words[0];
    v169 = (char *)v168 + v162;
    if ((char *)v168 + v162 <= ":" && v169 + 1 > ":")
      goto LABEL_713;
    *v169 = 58;
    v170 = v162 + 1;
    if (SHIBYTE(v160->__r_.__value_.__r.__words[2]) < 0)
    {
      v160->__r_.__value_.__l.__size_ = v170;
      v168->__r_.__value_.__s.__data_[v170] = 0;
      v165 = *(_DWORD *)(v56 + 208) - 1;
      if (v165 <= 2)
        goto LABEL_392;
    }
    else
    {
      *((_BYTE *)&v160->__r_.__value_.__s + 23) = v170 & 0x7F;
      v168->__r_.__value_.__s.__data_[v170] = 0;
      v165 = *(_DWORD *)(v56 + 208) - 1;
      if (v165 <= 2)
        goto LABEL_392;
    }
  }
  v166 = "host";
  v167 = 4;
LABEL_401:
  v171 = SHIBYTE(v161->__r_.__value_.__r.__words[2]);
  if (v171 >= 0)
    v172 = 22;
  else
    v172 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v171 >= 0)
    v173 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  else
    v173 = v161->__r_.__value_.__l.__size_;
  if (v172 - v173 >= v167)
  {
    if (v171 >= 0)
      v174 = v161;
    else
      v174 = (std::string *)v161->__r_.__value_.__r.__words[0];
    v175 = (char *)v174 + v173;
    if ((char *)v174 + v173 <= v166 && &v175[v167] > v166)
      goto LABEL_713;
    memcpy(v175, v166, v167);
    v176 = v173 + v167;
    if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
      v161->__r_.__value_.__l.__size_ = v176;
    else
      *((_BYTE *)&v161->__r_.__value_.__s + 23) = v176 & 0x7F;
    v174->__r_.__value_.__s.__data_[v176] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v161, v172, v173 + v167 - v172, v173, v173, 0, v167, v166);
  }
  v177 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  v178 = (char)v177;
  if ((v177 & 0x80u) == 0)
    v179 = 22;
  else
    v179 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v177 & 0x80u) != 0)
    v177 = v161->__r_.__value_.__l.__size_;
  if (v179 == v177)
  {
    std::string::__grow_by_and_replace(v161, v179, 1uLL, v179, v179, 0, 1uLL, ":");
    v180 = (char *)(v56 + 32);
    v181 = *(char *)(v56 + 55);
    if ((v181 & 0x80000000) == 0)
    {
LABEL_427:
      v182 = v181;
      v183 = v181 == 0;
      goto LABEL_438;
    }
  }
  else
  {
    if (v178 >= 0)
      v184 = v161;
    else
      v184 = (std::string *)v161->__r_.__value_.__r.__words[0];
    v185 = (char *)v184 + v177;
    if ((char *)v184 + v177 <= ":" && v185 + 1 > ":")
      goto LABEL_713;
    *v185 = 58;
    v186 = v177 + 1;
    if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
    {
      v161->__r_.__value_.__l.__size_ = v186;
      v184->__r_.__value_.__s.__data_[v186] = 0;
      v180 = (char *)(v56 + 32);
      v181 = *(char *)(v56 + 55);
      if ((v181 & 0x80000000) == 0)
        goto LABEL_427;
    }
    else
    {
      *((_BYTE *)&v161->__r_.__value_.__s + 23) = v186 & 0x7F;
      v184->__r_.__value_.__s.__data_[v186] = 0;
      v180 = (char *)(v56 + 32);
      v181 = *(char *)(v56 + 55);
      if ((v181 & 0x80000000) == 0)
        goto LABEL_427;
    }
  }
  v182 = *(_QWORD *)(v56 + 40);
  if ((v182 & 0x8000000000000000) != 0)
    goto LABEL_713;
  v180 = *(char **)v180;
  v183 = v182 == 0;
  if (v182)
  {
    if (!v180)
      goto LABEL_713;
  }
LABEL_438:
  v187 = SHIBYTE(v161->__r_.__value_.__r.__words[2]);
  if (v187 >= 0)
    v188 = 22;
  else
    v188 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v187 >= 0)
    v189 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  else
    v189 = v161->__r_.__value_.__l.__size_;
  if (v188 - v189 >= v182)
  {
    if (!v183)
    {
      if (v187 >= 0)
        v190 = v161;
      else
        v190 = (std::string *)v161->__r_.__value_.__r.__words[0];
      v191 = (char *)v190 + v189;
      if ((char *)v190 + v189 <= v180 && &v191[v182] > v180)
        goto LABEL_713;
      memmove(v191, v180, v182);
      v192 = v189 + v182;
      if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
        v161->__r_.__value_.__l.__size_ = v192;
      else
        *((_BYTE *)&v161->__r_.__value_.__s + 23) = v192 & 0x7F;
      v190->__r_.__value_.__s.__data_[v192] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v161, v188, v189 + v182 - v188, v189, v189, 0, v182, v180);
  }
  v193 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  v194 = (char)v193;
  if ((v193 & 0x80u) == 0)
    v195 = 22;
  else
    v195 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v193 & 0x80u) != 0)
    v193 = v161->__r_.__value_.__l.__size_;
  if (v195 == v193)
  {
    std::string::__grow_by_and_replace(v161, v195, 1uLL, v195, v195, 0, 1uLL, ":");
    rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v56 + 80), (char *)&__p_new_stuff);
    v196 = HIBYTE(v296);
    if ((SHIBYTE(v296) & 0x80000000) == 0)
    {
LABEL_465:
      v197 = v196;
      v198 = v196 == 0;
      v199 = (char *)&__p_new_stuff;
      goto LABEL_476;
    }
  }
  else
  {
    if (v194 >= 0)
      v200 = v161;
    else
      v200 = (std::string *)v161->__r_.__value_.__r.__words[0];
    v201 = (char *)v200 + v193;
    if ((char *)v200 + v193 <= ":" && v201 + 1 > ":")
      goto LABEL_713;
    *v201 = 58;
    v202 = v193 + 1;
    if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
    {
      v161->__r_.__value_.__l.__size_ = v202;
      v200->__r_.__value_.__s.__data_[v202] = 0;
      rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v56 + 80), (char *)&__p_new_stuff);
      v196 = HIBYTE(v296);
      if ((SHIBYTE(v296) & 0x80000000) == 0)
        goto LABEL_465;
    }
    else
    {
      *((_BYTE *)&v161->__r_.__value_.__s + 23) = v202 & 0x7F;
      v200->__r_.__value_.__s.__data_[v202] = 0;
      rtc::SocketAddress::ToSensitiveString((rtc::SocketAddress *)(v56 + 80), (char *)&__p_new_stuff);
      v196 = HIBYTE(v296);
      if ((SHIBYTE(v296) & 0x80000000) == 0)
        goto LABEL_465;
    }
  }
  v197 = v295;
  if ((v295 & 0x8000000000000000) != 0)
    goto LABEL_713;
  v199 = __p_new_stuff;
  v198 = v295 == 0;
  if (v295)
  {
    if (!__p_new_stuff)
      goto LABEL_713;
  }
LABEL_476:
  v203 = SHIBYTE(v161->__r_.__value_.__r.__words[2]);
  if (v203 >= 0)
    v204 = 22;
  else
    v204 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v203 >= 0)
    v205 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  else
    v205 = v161->__r_.__value_.__l.__size_;
  if (v204 - v205 >= v197)
  {
    if (!v198)
    {
      if (v203 >= 0)
        v206 = v161;
      else
        v206 = (std::string *)v161->__r_.__value_.__r.__words[0];
      v207 = (char *)v206 + v205;
      if ((char *)v206 + v205 <= v199 && &v207[v197] > v199)
        goto LABEL_713;
      memmove(v207, v199, v197);
      v208 = v205 + v197;
      if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
        v161->__r_.__value_.__l.__size_ = v208;
      else
        *((_BYTE *)&v161->__r_.__value_.__s + 23) = v208 & 0x7F;
      v206->__r_.__value_.__s.__data_[v208] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(v161, v204, v205 + v197 - v204, v205, v205, 0, v197, v199);
  }
  v209 = HIBYTE(v161->__r_.__value_.__r.__words[2]);
  v210 = (char)v209;
  if ((v209 & 0x80u) == 0)
    v211 = 22;
  else
    v211 = (v161->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v209 & 0x80u) != 0)
    v209 = v161->__r_.__value_.__l.__size_;
  if (v211 != v209)
  {
    if (v210 >= 0)
      v213 = v161;
    else
      v213 = (std::string *)v161->__r_.__value_.__r.__words[0];
    v214 = (char *)v213 + v209;
    if ((char *)v213 + v209 <= "|" && v214 + 1 > "|")
      goto LABEL_713;
    *v214 = 124;
    v215 = v209 + 1;
    if (SHIBYTE(v161->__r_.__value_.__r.__words[2]) < 0)
    {
      v161->__r_.__value_.__l.__size_ = v215;
      v213->__r_.__value_.__s.__data_[v215] = 0;
      if (SHIBYTE(v296) < 0)
        goto LABEL_515;
    }
    else
    {
      *((_BYTE *)&v161->__r_.__value_.__s + 23) = v215 & 0x7F;
      v213->__r_.__value_.__s.__data_[v215] = 0;
      if (SHIBYTE(v296) < 0)
        goto LABEL_515;
    }
LABEL_503:
    if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_504;
    goto LABEL_516;
  }
  std::string::__grow_by_and_replace(v161, v211, 1uLL, v211, v211, 0, 1uLL, "|");
  if ((SHIBYTE(v296) & 0x80000000) == 0)
    goto LABEL_503;
LABEL_515:
  operator delete(__p_new_stuff);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_516:
    operator delete(__str[0].__r_.__value_.__l.__data_);
    v212 = (&off_24C0B1508)[2 * *((unsigned __int8 *)this + 2333)];
    if (v212)
      goto LABEL_517;
LABEL_713:
    __break(1u);
LABEL_714:
    abort();
  }
LABEL_504:
  v212 = (&off_24C0B1508)[2 * *((unsigned __int8 *)this + 2333)];
  if (!v212)
    goto LABEL_713;
LABEL_517:
  v216 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v217 = 22;
  else
    v217 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v216 = v297.__r_.__value_.__l.__size_;
  if (v217 == v216)
  {
    std::string::__grow_by_and_replace(&v297, v217, 1uLL, v217, v217, 0, 1uLL, v212);
    v218 = (&off_24C0B1528)[2 * *((unsigned __int8 *)this + 2332)];
    if (!v218)
      goto LABEL_713;
  }
  else
  {
    v219 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v219 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v220 = (char *)v219 + v216;
    if ((char *)v219 + v216 <= v212 && v220 + 1 > v212)
      goto LABEL_713;
    *v220 = *v212;
    v221 = v216 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v221;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v221 & 0x7F;
    v219->__r_.__value_.__s.__data_[v221] = 0;
    v218 = (&off_24C0B1528)[2 * *((unsigned __int8 *)this + 2332)];
    if (!v218)
      goto LABEL_713;
  }
  v222 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v223 = 22;
  else
    v223 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v222 = v297.__r_.__value_.__l.__size_;
  if (v223 == v222)
  {
    std::string::__grow_by_and_replace(&v297, v223, 1uLL, v223, v223, 0, 1uLL, v218);
    v224 = (&off_24C0B1548)[2 * *((unsigned int *)this + 582)];
    if (!v224)
      goto LABEL_713;
  }
  else
  {
    v225 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v225 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v226 = (char *)v225 + v222;
    if ((char *)v225 + v222 <= v218 && v226 + 1 > v218)
      goto LABEL_713;
    *v226 = *v218;
    v227 = v222 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v227;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v227 & 0x7F;
    v225->__r_.__value_.__s.__data_[v227] = 0;
    v224 = (&off_24C0B1548)[2 * *((unsigned int *)this + 582)];
    if (!v224)
      goto LABEL_713;
  }
  v228 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v229 = 22;
  else
    v229 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v228 = v297.__r_.__value_.__l.__size_;
  if (v229 == v228)
  {
    std::string::__grow_by_and_replace(&v297, v229, 1uLL, v229, v229, 0, 1uLL, v224);
    v230 = (&off_24C0B1588)[2 * *((int *)this + 640)];
    if (!v230)
      goto LABEL_713;
  }
  else
  {
    v231 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v231 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v232 = (char *)v231 + v228;
    if ((char *)v231 + v228 <= v224 && v232 + 1 > v224)
      goto LABEL_713;
    *v232 = *v224;
    v233 = v228 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v233;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v233 & 0x7F;
    v231->__r_.__value_.__s.__data_[v233] = 0;
    v230 = (&off_24C0B1588)[2 * *((int *)this + 640)];
    if (!v230)
      goto LABEL_713;
  }
  v234 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v235 = 22;
  else
    v235 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v234 = v297.__r_.__value_.__l.__size_;
  if (v235 == v234)
  {
    std::string::__grow_by_and_replace(&v297, v235, 1uLL, v235, v235, 0, 1uLL, v230);
  }
  else
  {
    v236 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v236 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v237 = (char *)v236 + v234;
    if ((char *)v236 + v234 <= v230 && v237 + 1 > v230)
      goto LABEL_713;
    *v237 = *v230;
    v238 = v234 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v238;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v238 & 0x7F;
    v236->__r_.__value_.__s.__data_[v238] = 0;
  }
  v239 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v240 = 22;
  else
    v240 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v239 = v297.__r_.__value_.__l.__size_;
  if (v240 == v239)
  {
    std::string::__grow_by_and_replace(&v297, v240, 1uLL, v240, v240, 0, 1uLL, "|");
    v241 = (&off_24C0B15C8)[2 * *((unsigned __int8 *)this + 2335)];
    if (!v241)
      goto LABEL_713;
  }
  else
  {
    v242 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v242 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v243 = (char *)v242 + v239;
    if ((char *)v242 + v239 <= "|" && v243 + 1 > "|")
      goto LABEL_713;
    *v243 = 124;
    v244 = v239 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v244;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v244 & 0x7F;
    v242->__r_.__value_.__s.__data_[v244] = 0;
    v241 = (&off_24C0B15C8)[2 * *((unsigned __int8 *)this + 2335)];
    if (!v241)
      goto LABEL_713;
  }
  v245 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v246 = 22;
  else
    v246 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v245 = v297.__r_.__value_.__l.__size_;
  if (v246 == v245)
  {
    std::string::__grow_by_and_replace(&v297, v246, 1uLL, v246, v246, 0, 1uLL, v241);
  }
  else
  {
    v247 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v247 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v248 = (char *)v247 + v245;
    if ((char *)v247 + v245 <= v241 && v248 + 1 > v241)
      goto LABEL_713;
    *v248 = *v241;
    v249 = v245 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v249;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v249 & 0x7F;
    v247->__r_.__value_.__s.__data_[v249] = 0;
  }
  v250 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v251 = 22;
  else
    v251 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v250 = v297.__r_.__value_.__l.__size_;
  if (v251 == v250)
  {
    std::string::__grow_by_and_replace(&v297, v251, 1uLL, v251, v251, 0, 1uLL, "|");
  }
  else
  {
    v252 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v252 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v253 = (char *)v252 + v250;
    if ((char *)v252 + v250 <= "|" && v253 + 1 > "|")
      goto LABEL_713;
    *v253 = 124;
    v254 = v250 + 1;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v254;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v254 & 0x7F;
    v252->__r_.__value_.__s.__data_[v254] = 0;
  }
  v255 = rtc::StringBuilder::operator<<(&v297, *((_DWORD *)this + 587));
  v256 = v255;
  v257 = HIBYTE(v255->__r_.__value_.__r.__words[2]);
  v258 = (char)v257;
  if ((v257 & 0x80u) == 0)
    v259 = 22;
  else
    v259 = (v255->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v257 & 0x80u) != 0)
    v257 = v255->__r_.__value_.__l.__size_;
  if (v259 == v257)
  {
    std::string::__grow_by_and_replace(v255, v259, 1uLL, v259, v259, 0, 1uLL, "|");
  }
  else
  {
    if (v258 >= 0)
      v260 = v255;
    else
      v260 = (std::string *)v255->__r_.__value_.__r.__words[0];
    v261 = (char *)v260 + v257;
    if ((char *)v260 + v257 <= "|" && v261 + 1 > "|")
      goto LABEL_713;
    *v261 = 124;
    v262 = v257 + 1;
    if (SHIBYTE(v255->__r_.__value_.__r.__words[2]) < 0)
      v255->__r_.__value_.__l.__size_ = v262;
    else
      *((_BYTE *)&v255->__r_.__value_.__s + 23) = v262 & 0x7F;
    v260->__r_.__value_.__s.__data_[v262] = 0;
  }
  v263 = rtc::StringBuilder::operator<<(v256, *((_DWORD *)this + 585));
  v264 = HIBYTE(v263->__r_.__value_.__r.__words[2]);
  v265 = (char)v264;
  if ((v264 & 0x80u) == 0)
    v266 = 22;
  else
    v266 = (v263->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v264 & 0x80u) != 0)
    v264 = v263->__r_.__value_.__l.__size_;
  if (v266 == v264)
  {
    std::string::__grow_by_and_replace(v263, v266, 1uLL, v266, v266, 0, 1uLL, "|");
    v267 = (_BYTE *)*((_QWORD *)this + 31);
    if (!v267)
      goto LABEL_689;
  }
  else
  {
    if (v265 >= 0)
      v268 = v263;
    else
      v268 = (std::string *)v263->__r_.__value_.__r.__words[0];
    v269 = (char *)v268 + v264;
    if ((char *)v268 + v264 <= "|" && v269 + 1 > "|")
      goto LABEL_713;
    *v269 = 124;
    v270 = v264 + 1;
    if (SHIBYTE(v263->__r_.__value_.__r.__words[2]) < 0)
    {
      v263->__r_.__value_.__l.__size_ = v270;
      v268->__r_.__value_.__s.__data_[v270] = 0;
      v267 = (_BYTE *)*((_QWORD *)this + 31);
      if (!v267)
        goto LABEL_689;
    }
    else
    {
      *((_BYTE *)&v263->__r_.__value_.__s + 23) = v270 & 0x7F;
      v268->__r_.__value_.__s.__data_[v270] = 0;
      v267 = (_BYTE *)*((_QWORD *)this + 31);
      if (!v267)
        goto LABEL_689;
    }
  }
  if (!*v267 || !*((_QWORD *)this + 32))
  {
LABEL_689:
    v276 = *((_DWORD *)this + 604);
    if (v276 <= 2999)
      goto LABEL_690;
    goto LABEL_668;
  }
  v271 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 48))(this);
  v272 = rtc::StringBuilder::operator<<(&v297, v271);
  v273 = HIBYTE(v272->__r_.__value_.__r.__words[2]);
  v274 = (char)v273;
  if ((v273 & 0x80u) == 0)
    v275 = 22;
  else
    v275 = (v272->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v273 & 0x80u) != 0)
    v273 = v272->__r_.__value_.__l.__size_;
  if (v275 != v273)
  {
    if (v274 >= 0)
      v287 = v272;
    else
      v287 = (std::string *)v272->__r_.__value_.__r.__words[0];
    v288 = (char *)v287 + v273;
    if ((char *)v287 + v273 <= "|" && v288 + 1 > "|")
      goto LABEL_713;
    *v288 = 124;
    v289 = v273 + 1;
    if (SHIBYTE(v272->__r_.__value_.__r.__words[2]) < 0)
    {
      v272->__r_.__value_.__l.__size_ = v289;
      v287->__r_.__value_.__s.__data_[v289] = 0;
      v276 = *((_DWORD *)this + 604);
      if (v276 <= 2999)
        goto LABEL_690;
      goto LABEL_668;
    }
    *((_BYTE *)&v272->__r_.__value_.__s + 23) = v289 & 0x7F;
    v287->__r_.__value_.__s.__data_[v289] = 0;
    goto LABEL_689;
  }
  std::string::__grow_by_and_replace(v272, v275, 1uLL, v275, v275, 0, 1uLL, "|");
  v276 = *((_DWORD *)this + 604);
  if (v276 <= 2999)
  {
LABEL_690:
    v281 = rtc::StringBuilder::operator<<(&v297, v276);
    v290 = HIBYTE(v281->__r_.__value_.__r.__words[2]);
    v291 = (char)v290;
    if ((v290 & 0x80u) == 0)
      v277 = 22;
    else
      v277 = (v281->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v290 & 0x80u) != 0)
      v290 = v281->__r_.__value_.__l.__size_;
    if (v277 == v290)
    {
      v280 = "]";
      v279 = 1;
      v278 = v277;
      v282 = v277;
      v283 = 1;
      goto LABEL_697;
    }
    if (v291 >= 0)
      v284 = v281;
    else
      v284 = (std::string *)v281->__r_.__value_.__r.__words[0];
    v292 = (char *)v284 + v290;
    if ((char *)v284 + v290 <= "]" && v292 + 1 > "]")
      goto LABEL_713;
    *v292 = 93;
    v286 = v290 + 1;
    if (SHIBYTE(v281->__r_.__value_.__r.__words[2]) < 0)
      v281->__r_.__value_.__l.__size_ = v286;
    else
      *((_BYTE *)&v281->__r_.__value_.__s + 23) = v286 & 0x7F;
LABEL_707:
    v284->__r_.__value_.__s.__data_[v286] = 0;
    goto LABEL_708;
  }
LABEL_668:
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v277 = 22;
  else
    v277 = (v297.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v278 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  else
    v278 = v297.__r_.__value_.__l.__size_;
  if (v277 - v278 >= 2)
  {
    v284 = &v297;
    if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v284 = (std::string *)v297.__r_.__value_.__r.__words[0];
    v285 = (_WORD *)((char *)v284 + v278);
    if ((char *)v284 + v278 <= "-]" && v285 + 1 > (_WORD *)"-]")
      goto LABEL_713;
    *v285 = 23853;
    v286 = v278 + 2;
    if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      v297.__r_.__value_.__l.__size_ = v278 + 2;
    else
      *((_BYTE *)&v297.__r_.__value_.__s + 23) = v286 & 0x7F;
    goto LABEL_707;
  }
  v279 = v278 - v277 + 2;
  v280 = "-]";
  v281 = &v297;
  v282 = v278;
  v283 = 2;
LABEL_697:
  std::string::__grow_by_and_replace(v281, v277, v279, v278, v282, 0, v283, v280);
LABEL_708:
  result = *(double *)&v297.__r_.__value_.__l.__data_;
  *a2 = v297;
  return result;
}

void cricket::Connection::~Connection(cricket::Connection *this)
{
  cricket::Connection *v2;
  uint64_t v3;
  cricket::Connection *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void **v9;
  cricket::Connection *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t i;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t j;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t k;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t m;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)this = off_24C0B14B8;
  (*((void (**)(uint64_t, char *, char *))this + 351))(1, (char *)this + 2792, (char *)this + 2792);
  if (*((_BYTE *)this + 2784))
  {
    v2 = (cricket::Connection *)*((_QWORD *)this + 347);
    if (v2 == (cricket::Connection *)((char *)this + 2752))
    {
      v3 = 4;
      v2 = (cricket::Connection *)((char *)this + 2752);
    }
    else
    {
      if (!v2)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
  }
LABEL_7:
  if (!*((_BYTE *)this + 2744))
    goto LABEL_13;
  v4 = (cricket::Connection *)*((_QWORD *)this + 342);
  if (v4 == (cricket::Connection *)((char *)this + 2712))
  {
    v5 = 4;
    v4 = (cricket::Connection *)((char *)this + 2712);
  }
  else
  {
    if (!v4)
      goto LABEL_13;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_13:
  v6 = *((_QWORD *)this + 331);
  *((_QWORD *)this + 331) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (*((_BYTE *)this + 2528) && *((char *)this + 2527) < 0)
  {
    operator delete(*((void **)this + 313));
    v7 = (void **)*((_QWORD *)this + 310);
    if (!v7)
      goto LABEL_25;
  }
  else
  {
    v7 = (void **)*((_QWORD *)this + 310);
    if (!v7)
      goto LABEL_25;
  }
  v8 = (void **)*((_QWORD *)this + 311);
  v9 = v7;
  if (v8 != v7)
  {
    do
    {
      if (*((char *)v8 - 17) < 0)
        operator delete(*(v8 - 5));
      v8 -= 5;
    }
    while (v8 != v7);
    v9 = (void **)*((_QWORD *)this + 310);
  }
  *((_QWORD *)this + 311) = v7;
  operator delete(v9);
LABEL_25:
  v10 = (cricket::Connection *)*((_QWORD *)this + 301);
  if (v10 == (cricket::Connection *)((char *)this + 2384))
  {
    v11 = 4;
    v10 = (cricket::Connection *)((char *)this + 2384);
  }
  else
  {
    if (!v10)
      goto LABEL_30;
    v11 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_30:
  std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)this + 2360, *((char **)this + 296));
  *((_QWORD *)this + 282) = &off_24C0BAFD8;
  v12 = *((_QWORD *)this + 285);
  if (v12)
    MEMORY[0x20BD0ADD4](v12, 0x1000C8000313F17);
  *((_QWORD *)this + 274) = &off_24C0BAFD8;
  v13 = *((_QWORD *)this + 277);
  if (v13)
    MEMORY[0x20BD0ADD4](v13, 0x1000C8000313F17);
  cricket::Candidate::~Candidate((void **)this + 210);
  cricket::Candidate::~Candidate((void **)this + 156);
  cricket::Candidate::~Candidate((void **)this + 87);
  cricket::Candidate::~Candidate((void **)this + 33);
  v14 = *((_QWORD *)this + 31);
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 4);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      MEMORY[0x20BD0ADEC]();
  }
  for (i = *((_QWORD *)this + 26); i; i = *((_QWORD *)this + 26))
  {
    v19 = (uint64_t *)*((_QWORD *)this + 25);
    v20 = v19[3];
    v21 = *v19;
    *(_QWORD *)(v21 + 8) = v19[1];
    *(_QWORD *)v19[1] = v21;
    *((_QWORD *)this + 26) = i - 1;
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 176);
  }
  *((_QWORD *)this + 27) = (char *)this + 192;
  for (j = *((_QWORD *)this + 19); j; j = *((_QWORD *)this + 19))
  {
    v23 = (uint64_t *)*((_QWORD *)this + 18);
    v24 = v23[3];
    v25 = *v23;
    *(_QWORD *)(v25 + 8) = v23[1];
    *(_QWORD *)v23[1] = v25;
    *((_QWORD *)this + 19) = j - 1;
    operator delete(v23);
    (*(void (**)(uint64_t, char *))(v24 + 16))(v24, (char *)this + 120);
  }
  *((_QWORD *)this + 20) = (char *)this + 136;
  for (k = *((_QWORD *)this + 12); k; k = *((_QWORD *)this + 12))
  {
    v27 = (uint64_t *)*((_QWORD *)this + 11);
    v28 = v27[3];
    v29 = *v27;
    *(_QWORD *)(v29 + 8) = v27[1];
    *(_QWORD *)v27[1] = v29;
    *((_QWORD *)this + 12) = k - 1;
    operator delete(v27);
    (*(void (**)(uint64_t, char *))(v28 + 16))(v28, (char *)this + 64);
  }
  *((_QWORD *)this + 13) = (char *)this + 80;
  for (m = *((_QWORD *)this + 5); m; m = *((_QWORD *)this + 5))
  {
    v31 = (uint64_t *)*((_QWORD *)this + 4);
    v32 = v31[3];
    v33 = *v31;
    *(_QWORD *)(v33 + 8) = v31[1];
    *(_QWORD *)v31[1] = v33;
    *((_QWORD *)this + 5) = m - 1;
    operator delete(v31);
    (*(void (**)(uint64_t, char *))(v32 + 16))(v32, (char *)this + 8);
  }
  *((_QWORD *)this + 6) = (char *)this + 24;
}

uint64_t cricket::Connection::local_candidate(cricket::Connection *this)
{
  return (uint64_t)this + 264;
}

uint64_t cricket::Connection::remote_candidate(cricket::Connection *this)
{
  return (uint64_t)this + 696;
}

uint64_t cricket::Connection::network(cricket::Connection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 24))(*((_QWORD *)this + 32));
}

uint64_t cricket::Connection::generation(cricket::Connection *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 224))(*((_QWORD *)this + 32));
}

unint64_t cricket::Connection::priority(cricket::Connection *this)
{
  _BYTE *v1;
  unint64_t result;
  int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _BOOL4 v8;
  uint64_t v9;

  v1 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v1)
    return 0;
  if (!*v1)
    return 0;
  result = *((_QWORD *)this + 32);
  if (!result)
    return result;
  v4 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
  if (v4 == 2)
    return 0;
  if (v4)
  {
    v5 = *((_DWORD *)this + 212);
    v6 = (unsigned int *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this) + 152);
  }
  else
  {
    v5 = *(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this) + 152);
    v6 = (unsigned int *)((char *)this + 848);
  }
  v7 = *v6;
  v8 = v7 < v5;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  if (v5 > v7)
    v7 = v5;
  return v8 | (2 * v7) | (unint64_t)(v9 << 32);
}

uint64_t cricket::Connection::set_write_state(uint64_t result, int a2)
{
  int v2;
  cricket::Connection *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, cricket::Connection *);
  std::string __p;

  v2 = *(_DWORD *)(result + 2328);
  *(_DWORD *)(result + 2328) = a2;
  if (v2 != a2)
  {
    v3 = (cricket::Connection *)result;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      cricket::Connection::ToString(v3, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    result = *((_QWORD *)v3 + 4);
    for (*((_QWORD *)v3 + 6) = result;
          (cricket::Connection *)result != (cricket::Connection *)((char *)v3 + 24);
          result = *((_QWORD *)v3 + 6))
    {
      v12 = *(void (**)(uint64_t, cricket::Connection *))(result + 16);
      v11 = result + 16;
      *((_QWORD *)v3 + 6) = *(_QWORD *)(v11 - 8);
      v12(v11, v3);
    }
  }
  return result;
}

uint64_t cricket::Connection::UpdateReceiving(uint64_t this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  std::string __p;

  v3 = this;
  v4 = *(_QWORD *)(this + 2464);
  if (*(_QWORD *)(this + 2440) < v4)
  {
    LOBYTE(v5) = 1;
    if (*(_BYTE *)(this + 2332) == 1)
      return this;
    goto LABEL_15;
  }
  if (*(_QWORD *)(this + 2448) > v4)
    v4 = *(_QWORD *)(this + 2448);
  if (*(_QWORD *)(this + 2456) > v4)
    v4 = *(_QWORD *)(this + 2456);
  if (v4 < 1)
  {
    LOBYTE(v5) = 0;
    if (!*(_BYTE *)(this + 2332))
      return this;
    goto LABEL_15;
  }
  v6 = (int *)(this + 2564);
  if (!*(_BYTE *)(this + 2568))
    v6 = (int *)&cricket::WEAK_CONNECTION_RECEIVE_TIMEOUT;
  v5 = v4 + *v6 >= a2;
  if (*(unsigned __int8 *)(this + 2332) != v5)
  {
LABEL_15:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      cricket::Connection::ToString((cricket::Connection *)v3, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_BYTE *)(v3 + 2332) = v5;
    *(_QWORD *)(v3 + 2472) = a2;
    this = *(_QWORD *)(v3 + 32);
    for (*(_QWORD *)(v3 + 48) = this; this != v3 + 24; this = *(_QWORD *)(v3 + 48))
    {
      v15 = *(void (**)(uint64_t, uint64_t))(this + 16);
      v14 = this + 16;
      *(_QWORD *)(v3 + 48) = *(_QWORD *)(v14 - 8);
      v15(v14, v3);
    }
  }
  return this;
}

uint64_t cricket::Connection::OnReadPacket(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, _QWORD *);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  int v46;
  cricket::Connection *v47;
  cricket::IceMessage *v48;
  _QWORD *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  _BYTE *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  int v78;
  unsigned __int8 *v79;
  void **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t result;
  std::string __p;
  char v90;
  void *v91;
  uint64_t v92;
  int64_t v93;
  void *v94[2];
  char v95;
  std::string v96;
  char v97;
  std::string *v98;
  std::string *p_p;
  void *v100;
  size_t v101;
  uint64_t v102;
  uint64_t v103;

  v102 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  v4 = a1 + 776;
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t *, void **))(**(_QWORD **)(a1 + 256) + 280))(*(_QWORD *)(a1 + 256), *a2, a2[1], a1 + 776, &v103, &v100) & 1) == 0)
  {
    if (rtc::g_clock)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v16 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)(a1 + 2456) = v16 / 1000000;
    cricket::Connection::UpdateReceiving(a1, v16 / 1000000);
    v17 = a2[1];
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 2192) + 16))(a1 + 2192);
    if (*(_QWORD *)(a1 + 2240) == -1)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 2192) + 16))(a1 + 2192);
      *(_QWORD *)(a1 + 2248) = v19;
      *(_QWORD *)(a1 + 2240) = v19;
      *(_QWORD *)(a1 + 2232) = 0;
      **(_QWORD **)(a1 + 2216) = 0;
    }
    v20 = 0;
    v21 = *(_QWORD *)(a1 + 2208);
    while (1)
    {
      v22 = *(_QWORD *)(a1 + 2240);
      v23 = *(_QWORD *)(a1 + 2200);
      if (v23 + v22 > v18)
        break;
      *(_QWORD *)(a1 + 2240) = v23 + v22;
      v24 = (*(_QWORD *)(a1 + 2232) + 1) % (v21 + 1);
      *(_QWORD *)(a1 + 2232) = v24;
      v25 = *(_QWORD *)(a1 + 2216);
      *(_QWORD *)(v25 + 8 * v24) = 0;
      if (++v20 > v21)
      {
        v23 = *(_QWORD *)(a1 + 2200);
        v22 = *(_QWORD *)(a1 + 2240);
        goto LABEL_22;
      }
    }
    v25 = *(_QWORD *)(a1 + 2216);
    v24 = *(_QWORD *)(a1 + 2232);
LABEL_22:
    *(_QWORD *)(a1 + 2240) = v22 + (v18 - v22) / v23 * v23;
    *(_QWORD *)(v25 + 8 * v24) += v17;
    *(_QWORD *)(a1 + 2224) += v17;
    ++*(_QWORD *)(a1 + 1224);
    v26 = *(void (**)(uint64_t, uint64_t, _QWORD *))(a1 + 2816);
    if (v26)
      v26(a1 + 2792, a1, a2);
    if (!*(_BYTE *)(a1 + 2334) && *(_DWORD *)(a1 + 2328) == 3)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      v34 = *(_DWORD *)(a1 + 2328);
      *(_DWORD *)(a1 + 2328) = 2;
      if (v34 != 2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        {
          cricket::Connection::ToString((cricket::Connection *)a1, &__p);
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v35, v36, v37, v38, v39, v40, v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v42 = *(_QWORD *)(a1 + 32);
        for (*(_QWORD *)(a1 + 48) = v42; v42 != a1 + 24; v42 = *(_QWORD *)(a1 + 48))
        {
          v44 = *(void (**)(uint64_t, uint64_t))(v42 + 16);
          v43 = v42 + 16;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v43 - 8);
          v44(v43, a1);
        }
      }
    }
    goto LABEL_136;
  }
  v5 = v103;
  if (!v103)
    goto LABEL_136;
  v6 = *(unsigned __int16 *)(v103 + 32);
  if ((v6 & 0x110) == 0x110 || (v6 & 0x110) == 0x100)
  {
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    if (cricket::StunMessage::ValidateMessageIntegrity(v5, (std::string *)(v45 + 184)) != 2)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
        goto LABEL_136;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/"
                                                                 "ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
      __p.__r_.__value_.__l.__size_ = 4240;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v97;
      cricket::Connection::ToString((cricket::Connection *)a1, &v96);
      v98 = &v96;
      p_p = &__p;
      cricket::StunMethodToString((cricket *)*(unsigned __int16 *)(v103 + 32), (unint64_t)v94);
      v49 = (_QWORD *)(v103 + 40);
      if (*(char *)(v103 + 63) < 0)
      {
        v50 = *(_QWORD *)(v103 + 48);
        if ((v50 & 0x8000000000000000) != 0)
          goto LABEL_141;
        v49 = (_QWORD *)*v49;
        if (v50)
        {
          if (!v49)
            goto LABEL_141;
        }
        if (v50 > 0x3FFFFFFFFFFFFFFBLL)
          goto LABEL_142;
      }
      else
      {
        v50 = *(unsigned __int8 *)(v103 + 63);
      }
      v53 = 2 * v50;
      if (v50 >= 0xC)
      {
        v55 = (v53 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17)
          v55 = v53 | 7;
        v56 = v55 + 1;
        v54 = operator new(v55 + 1);
        v92 = 2 * v50;
        v93 = v56 | 0x8000000000000000;
        v91 = v54;
      }
      else
      {
        HIBYTE(v93) = 2 * v50;
        v54 = &v91;
        if (!v50)
          goto LABEL_89;
      }
      bzero(v54, 2 * v50);
      *((_BYTE *)v54 + 2 * v50) = 0;
      v57 = (char *)&v91;
      if (v93 < 0)
        v57 = (char *)v91;
      v58 = v57 + 1;
      do
      {
        v59 = *(unsigned __int8 *)v49;
        v49 = (_QWORD *)((char *)v49 + 1);
        v58 += 2;
        --v50;
      }
      while (v50);
      goto LABEL_97;
    }
    v5 = v103;
    v6 = *(unsigned __int16 *)(v103 + 32);
  }
  else if ((v6 & 0x110) == 0 && *(_DWORD *)(v103 + 96) != 2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      goto LABEL_136;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/Th"
                                                               "irdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
    __p.__r_.__value_.__l.__size_ = 4128;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v97;
    cricket::Connection::ToString((cricket::Connection *)a1, &v96);
    v98 = &v96;
    p_p = &__p;
    cricket::StunMethodToString((cricket *)*(unsigned __int16 *)(v103 + 32), (unint64_t)v94);
    v14 = (_QWORD *)(v103 + 40);
    if ((*(char *)(v103 + 63) & 0x80000000) == 0)
    {
      v15 = *(unsigned __int8 *)(v103 + 63);
LABEL_87:
      v53 = 2 * v15;
      if (v15 >= 0xC)
      {
        v63 = (v53 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v53 | 7) != 0x17)
          v63 = v53 | 7;
        v64 = v63 + 1;
        v62 = operator new(v63 + 1);
        v92 = 2 * v15;
        v93 = v64 | 0x8000000000000000;
        v91 = v62;
      }
      else
      {
        HIBYTE(v93) = 2 * v15;
        v62 = &v91;
        if (!v15)
        {
LABEL_89:
          *((_BYTE *)&v91 + v53) = 0;
          goto LABEL_97;
        }
      }
      bzero(v62, 2 * v15);
      *((_BYTE *)v62 + 2 * v15) = 0;
      v65 = (char *)&v91;
      if (v93 < 0)
        v65 = (char *)v91;
      v66 = v65 + 1;
      do
      {
        v67 = *(unsigned __int8 *)v14;
        v14 = (_QWORD *)((char *)v14 + 1);
        v66 += 2;
        --v15;
      }
      while (v15);
LABEL_97:
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v7, v8, v9, v10, v11, v12, v13, p_p->__r_.__value_.__r.__words[0]);
      if (SHIBYTE(v93) < 0)
      {
        operator delete(v91);
        if ((v95 & 0x80000000) == 0)
        {
LABEL_99:
          if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_136;
LABEL_103:
          v61 = (void *)v96.__r_.__value_.__r.__words[0];
          goto LABEL_104;
        }
      }
      else if ((v95 & 0x80000000) == 0)
      {
        goto LABEL_99;
      }
      operator delete(v94[0]);
      if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_136;
      goto LABEL_103;
    }
    v15 = *(_QWORD *)(v103 + 48);
    if ((v15 & 0x8000000000000000) == 0)
    {
      v14 = (_QWORD *)*v14;
      if (!v15 || v14)
      {
        if (v15 <= 0x3FFFFFFFFFFFFFFBLL)
          goto LABEL_87;
LABEL_142:
        abort();
      }
    }
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v46 = *(_DWORD *)(a1 + 2328) != 0;
  if (v6 <= 272)
  {
    if (v6 != 1)
    {
      if (v6 == 17)
      {
        if (*(char *)(v5 + 63) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 40), *(_QWORD *)(v5 + 48));
        else
          __p = *(std::string *)(v5 + 40);
        v90 = 1;
        if (rtc::g_clock)
        {
          v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
        }
        else
        {
          if (!dword_253EA791C)
            mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
          v60 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
              / dword_253EA791C;
        }
        *(_QWORD *)(a1 + 2448) = v60 / 1000000;
        std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 2504), &__p);
        cricket::Connection::UpdateReceiving(a1, *(_QWORD *)(a1 + 2448));
        if (v90 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v61 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_104:
          operator delete(v61);
          goto LABEL_136;
        }
      }
      else if (v6 == 257)
      {
        goto LABEL_51;
      }
      goto LABEL_136;
    }
      && (rtc::LogMessage::streams_empty_ & 1) != 0)
    {
LABEL_111:
      v75 = HIBYTE(v102);
      if (v102 >= 0)
        v76 = HIBYTE(v102);
      else
        v76 = v101;
      v77 = *(unsigned __int8 *)(a1 + 879);
      v78 = (char)v77;
      if ((v77 & 0x80u) != 0)
        v77 = *(_QWORD *)(a1 + 864);
      if (v76 == v77)
      {
        if (v78 >= 0)
          v79 = (unsigned __int8 *)(a1 + 856);
        else
          v79 = *(unsigned __int8 **)(a1 + 856);
        if ((v102 & 0x8000000000000000) == 0)
        {
          if (HIBYTE(v102))
          {
            v80 = &v100;
            while (*(unsigned __int8 *)v80 == *v79)
            {
              v80 = (void **)((char *)v80 + 1);
              ++v79;
              if (!--v75)
                goto LABEL_134;
            }
            goto LABEL_130;
          }
LABEL_134:
          v48 = (cricket::IceMessage *)v103;
          v47 = (cricket::Connection *)a1;
LABEL_135:
          cricket::Connection::HandleStunBindingOrGoogPingRequest(v47, v48);
          goto LABEL_136;
        }
        if (!memcmp(v100, v79, v101))
          goto LABEL_134;
      }
LABEL_130:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        cricket::Connection::ToString((cricket::Connection *)a1, &__p);
        rtc::webrtc_logging_impl::Log("\r\n\t\n", v81, v82, v83, v84, v85, v86, v87, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(**(_QWORD **)(a1 + 256) + 152))(*(_QWORD *)(a1 + 256), v103, v4, 401, "Unauthorized", 12);
      goto LABEL_136;
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/Th"
                                                               "irdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
    __p.__r_.__value_.__l.__size_ = v46 | 0x1108u;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v98;
    cricket::Connection::ToString((cricket::Connection *)a1, &v96);
    cricket::StunMethodToString((cricket *)*(unsigned __int16 *)(v103 + 32), (unint64_t)v94);
    v51 = (unsigned __int8 *)(v103 + 40);
    if (*(char *)(v103 + 63) < 0)
    {
      v52 = *(_QWORD *)(v103 + 48);
      if (v52 < 0)
        goto LABEL_141;
      v51 = *(unsigned __int8 **)v51;
      if (v52)
      {
        if (!v51)
          goto LABEL_141;
      }
    }
    else
    {
      v52 = *(unsigned __int8 *)(v103 + 63);
    }
    rtc::hex_encode(v51, v52, &v91);
    rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n", v68, v69, v70, v71, v72, v73, v74, (uint64_t)__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93) < 0)
    {
      operator delete(v91);
      if ((v95 & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_111;
LABEL_128:
        operator delete(v96.__r_.__value_.__l.__data_);
        goto LABEL_111;
      }
    }
    else if ((v95 & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v94[0]);
    if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_111;
    goto LABEL_128;
  }
  if (v6 <= 767)
  {
    if (v6 != 273)
    {
      if (v6 != 512)
        goto LABEL_136;
      v47 = (cricket::Connection *)a1;
      v48 = (cricket::IceMessage *)v5;
      goto LABEL_135;
    }
LABEL_51:
    cricket::StunRequestManager::CheckResponse((uint64_t **)(a1 + 2352), (cricket::StunMessage *)v5);
    goto LABEL_136;
  }
  if (v6 == 768 || v6 == 784)
    goto LABEL_51;
LABEL_136:
  if (SHIBYTE(v102) < 0)
    operator delete(v100);
  result = v103;
  v103 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void cricket::Connection::HandleStunBindingOrGoogPingRequest(cricket::Connection *this, cricket::IceMessage *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  size_t v19;
  int8x16_t *v20;
  char *v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int8x16_t *v44;
  unint64_t v45;
  __int32 v46;
  uint64_t v47;
  int v48;
  size_t v49;
  int8x16_t *v50;
  char *v51;
  uint64_t v52;
  int8x16_t *v53;
  int8x16_t v54;
  uint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  unint64_t v58;
  unsigned int *v59;
  unsigned int v60;
  uint64_t v61;
  __int128 *v62;
  size_t v63;
  _QWORD *size;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  void **v81;
  unint64_t v83;
  int8x16_t *v84;
  unint64_t v85;
  __int32 v86;
  uint64_t v87;
  uint64_t v88;
  int8x16_t *v89;
  int8x16_t v90;
  uint64_t v91;
  int8x16_t v92;
  int8x16_t v93;
  unint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  std::string *v99;
  uint64_t v100;
  std::string::size_type v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  int v113;
  __int16 v114;
  __int16 v115;
  std::string::size_type v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  _WORD *v121;
  uint64_t v122;
  _QWORD *v123;
  _WORD *v124;
  _WORD *v125;
  uint64_t v126;
  std::string::size_type v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _WORD *v140;
  std::string::size_type v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  std::string::size_type v157;
  _WORD *v158;
  uint64_t v159;
  __int128 *v160;
  size_t v161;
  BOOL v162;
  std::string::size_type v163;
  _QWORD *v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  void (*v177)(_QWORD *, cricket::Connection *);
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  unsigned int v182;
  _QWORD *v183;
  _QWORD *v184;
  void (*v185)(_QWORD *, cricket::Connection *);
  uint64_t v186;
  uint64_t v187;
  int v188;
  _QWORD *v189;
  _QWORD *v190;
  void (*v191)(_QWORD *, cricket::Connection *);
  uint64_t *v192;
  uint64_t *v193;
  uint64_t v194;
  unsigned __int8 *v195;
  size_t v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const void *v201;
  int v203;
  BOOL v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  std::string *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::string *v222;
  std::string::value_type *v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  std::string *v227;
  _WORD **v228;
  _WORD *v229;
  std::string *v230;
  std::string *v231;
  _WORD *v232;
  uint64_t v233;
  uint64_t v234;
  std::string v235;
  std::string::size_type v236;
  int v237;
  void *v238;
  size_t v239;
  unint64_t v240;
  __int32 v241;
  int v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  void *__p;
  uint64_t v248;
  uint64_t v249;
  std::string v250;

  v4 = (void **)((char *)a2 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v235, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
    LOBYTE(v236) = 1;
    v5 = rtc::g_clock;
    if (rtc::g_clock)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)&v235.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    v235.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 7);
    LOBYTE(v236) = 1;
    v5 = rtc::g_clock;
    if (rtc::g_clock)
    {
LABEL_3:
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      goto LABEL_8;
    }
  }
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
     / dword_253EA791C;
LABEL_8:
  *((_QWORD *)this + 306) = v6 / 1000000;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 2504), &v235);
  cricket::Connection::UpdateReceiving((uint64_t)this, *((_QWORD *)this + 306));
  if ((_BYTE)v236 && SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v235.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(*((_QWORD *)this + 332) + 57)
    && !*((_QWORD *)this + 308)
    && (*(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this) + 208) == 3
     || *(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this) + 208) == 2
     || *(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 24))(this) + 208) == 3
     || *(_DWORD *)((*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 24))(this) + 208) == 2))
  {
    if (rtc::g_clock)
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      v31 = *((_QWORD *)this + 305) + 100;
      v32 = v30 / 1000000;
      v33 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if (v31 > v32)
      {
LABEL_43:
        if ((v33 & 1) == 0)
        {
          v235.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/So"
                                                                      "urce/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
          v235.__r_.__value_.__l.__size_ = 4849;
          v235.__r_.__value_.__r.__words[2] = (std::string::size_type)&v234;
          cricket::Connection::ToString(this, &v250);
          v230 = &v250;
          v231 = &v235;
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v34, v35, v36, v37, v38, v39, v40, (uint64_t)v235.__r_.__value_.__l.__data_);
          if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v250.__r_.__value_.__l.__data_);
        }
        goto LABEL_13;
      }
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v69 = mach_absolute_time();
      v70 = *((_QWORD *)this + 305) + 100;
      v32 = (uint64_t)(v69 * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C
          / 1000000;
      v33 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
      if (v70 > v32)
        goto LABEL_43;
    }
    if ((v33 & 1) == 0)
    {
      v235.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source"
                                                                  "/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
      v235.__r_.__value_.__l.__size_ = 4793;
      v235.__r_.__value_.__r.__words[2] = (std::string::size_type)&v234;
      cricket::Connection::ToString(this, &v250);
      v230 = &v250;
      v231 = &v235;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v71, v72, v73, v74, v75, v76, v77, (uint64_t)v235.__r_.__value_.__l.__data_);
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
    }
    v229 = 0;
    cricket::Connection::Ping((uint64_t)this, (std::string *)v32, &v229);
    v78 = v229;
    v229 = 0;
    if (v78)
      (*(void (**)(_WORD *))(*(_QWORD *)v78 + 8))(v78);
  }
LABEL_13:
  v7 = (_OWORD *)((char *)this + 776);
  if (*((_WORD *)a2 + 16) != 1)
    goto LABEL_21;
  v8 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v8 || !*v8)
  {
    v9 = 0;
    v10 = (uint64_t *)((char *)this + 856);
    v11 = *((char *)this + 879);
    if (v11 < 0)
      goto LABEL_17;
LABEL_34:
    if (((*(uint64_t (**)(uint64_t, char *, cricket::IceMessage *, uint64_t *, _QWORD))(*(_QWORD *)v9 + 304))(v9, (char *)this + 776, a2, v10, v11) & 1) != 0)goto LABEL_21;
LABEL_35:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v23, v24, v25, v26, v27, v28, v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    return;
  }
  v9 = *((_QWORD *)this + 32);
  v10 = (uint64_t *)((char *)this + 856);
  v11 = *((char *)this + 879);
  if ((v11 & 0x80000000) == 0)
    goto LABEL_34;
LABEL_17:
  v12 = *((_QWORD *)this + 108);
  if (v12 < 0)
    goto LABEL_308;
  v13 = *v10;
  if (v12)
  {
    if (!v13)
      goto LABEL_308;
  }
  if (((*(uint64_t (**)(uint64_t, char *, cricket::IceMessage *, uint64_t))(*(_QWORD *)v9 + 304))(v9, (char *)this + 776, a2, v13) & 1) == 0)goto LABEL_35;
LABEL_21:
  ++*((_QWORD *)this + 154);
  v14 = *((_QWORD *)this + 329);
  if (v14)
    webrtc::IceEventLog::LogCandidatePairEvent(v14, 1, *((_DWORD *)this + 60), *((_DWORD *)a2 + 16));
  if (*((_WORD *)a2 + 16) != 1)
  {
    v18 = *((char *)a2 + 63);
    if (v18 < 0)
    {
      v19 = *((_QWORD *)a2 + 6);
      if ((v19 & 0x8000000000000000) != 0)
        goto LABEL_308;
      v4 = (void **)*v4;
      if (v19)
      {
        if (!v4)
          goto LABEL_308;
      }
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = (unint64_t)&off_24C0C1470;
      v235.__r_.__value_.__r.__words[2] = 0;
      v236 = 0;
      v237 = 768;
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_309;
      v20 = (int8x16_t *)&v238;
      if (v19 <= 0x16)
      {
LABEL_31:
        HIBYTE(v240) = v19;
        v21 = (char *)&v238;
        v22 = (void **)((char *)&v238 + v19);
        if (&v238 > v4)
          goto LABEL_55;
LABEL_54:
        if (v22 > v4)
          goto LABEL_308;
LABEL_55:
        if (v19)
          memmove(v21, v4, v19);
        *(_BYTE *)v22 = 0;
        if (SHIBYTE(v240) < 0)
        {
          v43 = v239;
          if ((v239 & 0x8000000000000000) != 0)
            goto LABEL_308;
          v20 = (int8x16_t *)v238;
          if (v239)
          {
            if (!v238)
              goto LABEL_308;
          }
        }
        else
        {
          v43 = HIBYTE(v240);
        }
        if (v43)
          v44 = v20;
        else
          v44 = 0;
        v45 = v43 - 4;
        if (v43 < 4)
        {
          v46 = 0;
          goto LABEL_77;
        }
        if (v45 >= 0x1C)
        {
          v52 = (v45 >> 2) + 1;
          v47 = v52 & 0x7FFFFFFFFFFFFFF8;
          v53 = v44 + 1;
          v54 = 0uLL;
          v55 = v52 & 0x7FFFFFFFFFFFFFF8;
          v56 = 0uLL;
          do
          {
            v54 = veorq_s8(vrev32q_s8(v53[-1]), v54);
            v56 = veorq_s8(vrev32q_s8(*v53), v56);
            v53 += 2;
            v55 -= 8;
          }
          while (v55);
          v57 = veorq_s8(v56, v54);
          *(int8x8_t *)v57.i8 = veor_s8(*(int8x8_t *)v57.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
          v46 = v57.i32[0] ^ v57.i32[1];
          if (v52 == (v52 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_77:
            v241 = v46;
            v242 = 554869826;
            v248 = 0;
            v249 = 0;
            __p = 0;
            v244 = 0;
            v245 = 0;
            v243 = 0;
            v246 = 0;
            v61 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this);
            v62 = (__int128 *)(v61 + 184);
            if (*(char *)(v61 + 207) < 0)
            {
              v63 = *(_QWORD *)(v61 + 192);
              if ((v63 & 0x8000000000000000) != 0)
                goto LABEL_308;
              v62 = *(__int128 **)v62;
              if (v63 && v62 == 0)
                goto LABEL_308;
            }
            else
            {
              v63 = *(unsigned __int8 *)(v61 + 207);
            }
            cricket::StunMessage::AddMessageIntegrityOfType((uint64_t)&v235, 49248, 4uLL, v62, v63);
            cricket::Connection::SendResponseMessage(this, (const cricket::StunMessage *)&v235);
            v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1470;
            if (SHIBYTE(v249) < 0)
            {
              operator delete(__p);
              if ((SHIBYTE(v245) & 0x80000000) == 0)
              {
LABEL_86:
                if ((SHIBYTE(v240) & 0x80000000) == 0)
                  goto LABEL_87;
                goto LABEL_92;
              }
            }
            else if ((SHIBYTE(v245) & 0x80000000) == 0)
            {
              goto LABEL_86;
            }
            operator delete(v243);
            if ((SHIBYTE(v240) & 0x80000000) == 0)
            {
LABEL_87:
              size = (_QWORD *)v235.__r_.__value_.__l.__size_;
              if (!v235.__r_.__value_.__l.__size_)
                goto LABEL_88;
              goto LABEL_93;
            }
LABEL_92:
            operator delete(v238);
            size = (_QWORD *)v235.__r_.__value_.__l.__size_;
            if (!v235.__r_.__value_.__l.__size_)
            {
LABEL_88:
              if (*((_BYTE *)this + 2334))
                goto LABEL_234;
              goto LABEL_228;
            }
LABEL_93:
            v66 = (_QWORD *)v235.__r_.__value_.__r.__words[2];
            if ((_QWORD *)v235.__r_.__value_.__r.__words[2] != size)
            {
              do
              {
                v68 = *--v66;
                v67 = v68;
                *v66 = 0;
                if (v68)
                  (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
              }
              while (v66 != size);
              v235.__r_.__value_.__r.__words[2] = (std::string::size_type)size;
              operator delete((void *)v235.__r_.__value_.__l.__size_);
              if (*((_BYTE *)this + 2334))
                goto LABEL_234;
              goto LABEL_228;
            }
            v235.__r_.__value_.__r.__words[2] = (std::string::size_type)size;
            operator delete(size);
            if (*((_BYTE *)this + 2334))
              goto LABEL_234;
LABEL_228:
            if (*((_DWORD *)this + 582) == 3)
            {
              *((_DWORD *)this + 582) = 2;
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
              {
                cricket::Connection::ToString(this, &v235);
                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v168, v169, v170, v171, v172, v173, v174, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
                if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v235.__r_.__value_.__l.__data_);
              }
              v175 = (_QWORD *)*((_QWORD *)this + 4);
              for (*((_QWORD *)this + 6) = v175;
                    v175 != (_QWORD *)((char *)this + 24);
                    v175 = (_QWORD *)*((_QWORD *)this + 6))
              {
                v177 = (void (*)(_QWORD *, cricket::Connection *))v175[2];
                v176 = v175 + 2;
                *((_QWORD *)this + 6) = *(v176 - 1);
                v177(v176, this);
              }
            }
            goto LABEL_234;
          }
        }
        else
        {
          v46 = 0;
          v47 = 0;
        }
        v58 = v43 - v47 * 4;
        v59 = &v44->u32[v47];
        do
        {
          v60 = *v59++;
          v46 ^= bswap32(v60);
          v58 -= 4;
        }
        while (v58 > 3);
        goto LABEL_77;
      }
    }
    else
    {
      v19 = *((unsigned __int8 *)a2 + 63);
      *(_OWORD *)&v235.__r_.__value_.__l.__data_ = (unint64_t)&off_24C0C1470;
      v235.__r_.__value_.__r.__words[2] = 0;
      v236 = 0;
      v20 = (int8x16_t *)&v238;
      v237 = 768;
      if (v18 <= 0x16uLL)
        goto LABEL_31;
    }
    v41 = (v19 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v41 = v19 | 7;
    v42 = v41 + 1;
    v21 = (char *)operator new(v41 + 1);
    v239 = v19;
    v240 = v42 | 0x8000000000000000;
    v238 = v21;
    v22 = (void **)&v21[v19];
    if (v21 > (char *)v4)
      goto LABEL_55;
    goto LABEL_54;
  }
  v16 = (uint64_t *)*((_QWORD *)a2 + 1);
  v15 = (uint64_t *)*((_QWORD *)a2 + 2);
  if (v16 == v15)
    goto LABEL_227;
  v17 = (uint64_t *)*((_QWORD *)a2 + 1);
  while (*(_WORD *)(*v17 + 8) != 6)
  {
    if (++v17 == v15)
      goto LABEL_227;
  }
  v48 = *((char *)a2 + 63);
  if (v48 < 0)
  {
    v49 = *((_QWORD *)a2 + 6);
    if ((v49 & 0x8000000000000000) != 0)
      goto LABEL_308;
    v4 = (void **)*v4;
    if (v49)
    {
      if (!v4)
        goto LABEL_308;
    }
    v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1470;
    *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
    v236 = 0;
    v237 = 257;
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_309;
    v50 = (int8x16_t *)&v238;
    if (v49 <= 0x16)
      goto LABEL_71;
  }
  else
  {
    v49 = *((unsigned __int8 *)a2 + 63);
    v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1470;
    *(_OWORD *)&v235.__r_.__value_.__r.__words[1] = 0uLL;
    v236 = 0;
    v237 = 257;
    v50 = (int8x16_t *)&v238;
    if (v48 <= 0x16uLL)
    {
LABEL_71:
      HIBYTE(v240) = v49;
      v51 = (char *)&v238;
      goto LABEL_117;
    }
  }
  v79 = (v49 & 0x7FFFFFFFFFFFFFF8) + 8;
  if ((v49 | 7) != 0x17)
    v79 = v49 | 7;
  v80 = v79 + 1;
  v51 = (char *)operator new(v79 + 1);
  v239 = v49;
  v240 = v80 | 0x8000000000000000;
  v238 = v51;
LABEL_117:
  v81 = (void **)&v51[v49];
  if (v51 <= (char *)v4 && v81 > v4)
    goto LABEL_308;
  if (v49)
    memmove(v51, v4, v49);
  *(_BYTE *)v81 = 0;
  if (SHIBYTE(v240) < 0)
  {
    v83 = v239;
    if ((v239 & 0x8000000000000000) != 0)
      goto LABEL_308;
    v50 = (int8x16_t *)v238;
    if (v239)
    {
      if (!v238)
        goto LABEL_308;
    }
  }
  else
  {
    v83 = HIBYTE(v240);
  }
  if (v83)
    v84 = v50;
  else
    v84 = 0;
  v85 = v83 - 4;
  if (v83 < 4)
  {
    v86 = 0;
  }
  else
  {
    if (v85 >= 0x1C)
    {
      v88 = (v85 >> 2) + 1;
      v87 = v88 & 0x7FFFFFFFFFFFFFF8;
      v89 = v84 + 1;
      v90 = 0uLL;
      v91 = v88 & 0x7FFFFFFFFFFFFFF8;
      v92 = 0uLL;
      do
      {
        v90 = veorq_s8(vrev32q_s8(v89[-1]), v90);
        v92 = veorq_s8(vrev32q_s8(*v89), v92);
        v89 += 2;
        v91 -= 8;
      }
      while (v91);
      v93 = veorq_s8(v92, v90);
      *(int8x8_t *)v93.i8 = veor_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL));
      v86 = v93.i32[0] ^ v93.i32[1];
      if (v88 == (v88 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_140;
    }
    else
    {
      v86 = 0;
      v87 = 0;
    }
    v94 = v83 - v87 * 4;
    v95 = &v84->u32[v87];
    do
    {
      v96 = *v95++;
      v86 ^= bswap32(v96);
      v94 -= 4;
    }
    while (v94 > 3);
  }
LABEL_140:
  v241 = v86;
  v242 = 554869826;
  v248 = 0;
  v249 = 0;
  __p = 0;
  v244 = 0;
  v245 = 0;
  v243 = 0;
  v246 = 0;
  while (1)
  {
    v97 = *v16;
    if (*(__int16 *)(*v16 + 8) == -256)
      break;
    if (++v16 == v15)
      goto LABEL_154;
  }
  v98 = *(_DWORD *)(v97 + 12);
  v99 = (std::string *)operator new();
  v99->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1520;
  LODWORD(v99->__r_.__value_.__r.__words[1]) = 327424;
  HIDWORD(v99->__r_.__value_.__r.__words[1]) = v98;
  v230 = v99;
  cricket::StunAttribute::SetOwner((cricket::StunAttribute *)v99, (cricket::StunMessage *)&v235);
  v100 = (uint64_t)v230;
  HIWORD(v237) += ((WORD1(v230->__r_.__value_.__r.__words[1]) + 3) & 0xFFFC) + 4;
  v101 = v235.__r_.__value_.__r.__words[2];
  if (v235.__r_.__value_.__r.__words[2] >= v236)
  {
    v102 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v235.__r_.__value_.__l.__size_, (uint64_t *)&v230);
  }
  else
  {
    if (!v235.__r_.__value_.__r.__words[2])
      goto LABEL_308;
    v230 = 0;
    *(_QWORD *)v235.__r_.__value_.__r.__words[2] = v100;
    v102 = (_QWORD *)(v101 + 8);
  }
  v235.__r_.__value_.__r.__words[2] = (std::string::size_type)v102;
  v103 = (uint64_t)v230;
  v230 = 0;
  if (v103)
    (*(void (**)(uint64_t))(*(_QWORD *)v103 + 8))(v103);
  if (*(_DWORD *)(v97 + 12) >= 6u && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::Connection::ToString(this, &v250);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v104, v105, v106, v107, v108, v109, v110, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v250.__r_.__value_.__l.__data_);
  }
LABEL_154:
  v111 = operator new();
  *(_DWORD *)(v111 + 8) = 32;
  *(_QWORD *)v111 = off_24C0C14A0;
  *(_QWORD *)(v111 + 16) = 0;
  v112 = (_QWORD *)(v111 + 16);
  *(_QWORD *)(v111 + 24) = 0;
  *(_QWORD *)(v111 + 32) = 0;
  *(_BYTE *)(v111 + 80) = 0;
  *(_WORD *)(v111 + 72) = 0;
  *(_DWORD *)(v111 + 76) = 0;
  *(_QWORD *)(v111 + 48) = 0;
  *(_QWORD *)(v111 + 56) = 0;
  *(_QWORD *)(v111 + 40) = &unk_24C0ACDA0;
  *(_DWORD *)(v111 + 64) = 0;
  if ((_OWORD *)(v111 + 16) != v7)
  {
    if (*((char *)this + 799) < 0)
    {
      std::string::__assign_no_alias<true>(v112, *((char **)this + 97), *((_QWORD *)this + 98));
    }
    else
    {
      *(_OWORD *)v112 = *v7;
      *(_QWORD *)(v111 + 32) = *((_QWORD *)this + 99);
    }
  }
  v113 = *((_DWORD *)this + 202);
  *(_DWORD *)(v111 + 48) = v113;
  *(_OWORD *)(v111 + 52) = *(_OWORD *)((char *)this + 812);
  *(_WORD *)(v111 + 72) = *((_WORD *)this + 416);
  *(_BYTE *)(v111 + 80) = *((_BYTE *)this + 840);
  *(_DWORD *)(v111 + 76) = *((_DWORD *)this + 209);
  if (v113 == 30)
    v114 = 20;
  else
    v114 = 0;
  if (v113 == 2)
    v115 = 8;
  else
    v115 = v114;
  *(_WORD *)(v111 + 10) = v115;
  *(_QWORD *)v111 = off_24C0C14E0;
  *(_QWORD *)(v111 + 88) = 0;
  v234 = v111;
  cricket::StunXorAddressAttribute::SetOwner(v111, (cricket::StunMessage *)&v235);
  HIWORD(v237) += ((*(_WORD *)(v111 + 10) + 3) & 0xFFFC) + 4;
  v116 = v235.__r_.__value_.__r.__words[2];
  if (v235.__r_.__value_.__r.__words[2] >= v236)
  {
    v235.__r_.__value_.__r.__words[2] = (std::string::size_type)std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v235.__r_.__value_.__l.__size_, &v234);
    v117 = v234;
    v234 = 0;
    if (!v117)
      goto LABEL_170;
    goto LABEL_169;
  }
  if (!v235.__r_.__value_.__r.__words[2])
    goto LABEL_308;
  v234 = 0;
  *(_QWORD *)v235.__r_.__value_.__r.__words[2] = v111;
  v235.__r_.__value_.__r.__words[2] = v116 + 8;
  v117 = v234;
  v234 = 0;
  if (v117)
LABEL_169:
    (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
LABEL_170:
  if (*(_BYTE *)(*((_QWORD *)this + 332) + 28))
  {
    v118 = (uint64_t *)*((_QWORD *)a2 + 1);
    v119 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v118 != v119)
    {
      while (1)
      {
        v120 = *v118;
        if (*(unsigned __int16 *)(*v118 + 8) == 49241)
          break;
        if (++v118 == v119)
          goto LABEL_184;
      }
      v121 = **(_WORD ***)(v120 + 16);
      if (*(_WORD **)(*(_QWORD *)(v120 + 16) + 8) == v121)
        goto LABEL_308;
      if (*v121)
      {
        v122 = operator new();
        *(_DWORD *)(v122 + 8) = 49241;
        *(_QWORD *)v122 = &off_24C0C1620;
        v123 = (_QWORD *)operator new();
        v123[1] = 0;
        v123[2] = 0;
        *v123 = 0;
        *(_QWORD *)(v122 + 16) = v123;
        std::vector<short>::__append((uint64_t)v123, 1uLL);
        v125 = **(_WORD ***)(v122 + 16);
        v124 = *(_WORD **)(*(_QWORD *)(v122 + 16) + 8);
        if (v124 == v125)
          goto LABEL_308;
        *v125 = 1;
        *(_WORD *)(v122 + 10) = ((_WORD)v124 - (_WORD)v125) & 0xFFFE;
        v233 = v122;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v122 + 24))(v122, &v235);
        v126 = v233;
        HIWORD(v237) += ((*(_WORD *)(v233 + 10) + 3) & 0xFFFC) + 4;
        v127 = v235.__r_.__value_.__r.__words[2];
        if (v235.__r_.__value_.__r.__words[2] >= v236)
        {
          v128 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v235.__r_.__value_.__l.__size_, &v233);
        }
        else
        {
          if (!v235.__r_.__value_.__r.__words[2])
            goto LABEL_308;
          v233 = 0;
          *(_QWORD *)v235.__r_.__value_.__r.__words[2] = v126;
          v128 = (_QWORD *)(v127 + 8);
        }
        v235.__r_.__value_.__r.__words[2] = (std::string::size_type)v128;
        v129 = v233;
        v233 = 0;
        if (v129)
          (*(void (**)(uint64_t))(*(_QWORD *)v129 + 8))(v129);
      }
    }
  }
LABEL_184:
  v130 = *((_QWORD *)a2 + 1);
  v131 = *((_QWORD *)a2 + 2);
  if (v130 != v131)
  {
    while (*(unsigned __int16 *)(*(_QWORD *)v130 + 8) != 49244)
    {
      v130 += 8;
      if (v130 == v131)
        goto LABEL_205;
    }
    if (*(_BYTE *)(*((_QWORD *)this + 332) + 59) && *((_BYTE *)this + 2744))
    {
      v250.__r_.__value_.__r.__words[0] = *(_QWORD *)v130;
      v132 = *((_QWORD *)this + 342);
      if (!v132)
      {
        v226 = std::__throw_bad_function_call[abi:sn180100]();
        cricket::Connection::Ping(v226, v227, v228);
        return;
      }
      (*(void (**)(_WORD **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v132 + 48))(&v232, v132, &v250);
      if (v232)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v133, v134, v135, v136, v137, v138, v139, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
        v140 = v232;
        v232 = 0;
        v250.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
        (*(void (**)(_WORD *, std::string *))(*(_QWORD *)v140 + 24))(v140, &v235);
        HIWORD(v237) += ((v140[5] + 3) & 0xFFFC) + 4;
        v141 = v235.__r_.__value_.__r.__words[2];
        if (v235.__r_.__value_.__r.__words[2] >= v236)
        {
          v156 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v235.__r_.__value_.__l.__size_, (uint64_t *)&v250);
          v157 = v250.__r_.__value_.__r.__words[0];
          v235.__r_.__value_.__r.__words[2] = (std::string::size_type)v156;
          v250.__r_.__value_.__r.__words[0] = 0;
          if (v157)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v157 + 8))(v157);
        }
        else
        {
          if (!v235.__r_.__value_.__r.__words[2])
            goto LABEL_308;
          *(_QWORD *)v235.__r_.__value_.__r.__words[2] = v140;
          v235.__r_.__value_.__r.__words[2] = v141 + 8;
          v250.__r_.__value_.__r.__words[0] = 0;
        }
      }
      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log("\r\t", v149, v150, v151, v152, v153, v154, v155, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      }
      v158 = v232;
      v232 = 0;
      if (v158)
        (*(void (**)(_WORD *))(*(_QWORD *)v158 + 8))(v158);
    }
    else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v142, v143, v144, v145, v146, v147, v148, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    }
  }
LABEL_205:
  v159 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this);
  v160 = (__int128 *)(v159 + 184);
  if ((*(char *)(v159 + 207) & 0x80000000) == 0)
  {
    v161 = *(unsigned __int8 *)(v159 + 207);
    goto LABEL_212;
  }
  v161 = *(_QWORD *)(v159 + 192);
  if ((v161 & 0x8000000000000000) != 0
    || ((v160 = *(__int128 **)v160, v161) ? (v162 = v160 == 0) : (v162 = 0), v162))
  {
LABEL_308:
    __break(1u);
LABEL_309:
    abort();
  }
LABEL_212:
  cricket::StunMessage::AddMessageIntegrityOfType((uint64_t)&v235, 8, 0x14uLL, v160, v161);
  cricket::StunMessage::AddFingerprint((cricket::StunMessage *)&v235);
  cricket::Connection::SendResponseMessage(this, (const cricket::StunMessage *)&v235);
  v235.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1470;
  if (SHIBYTE(v249) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v245) & 0x80000000) == 0)
    {
LABEL_214:
      if ((SHIBYTE(v240) & 0x80000000) == 0)
        goto LABEL_215;
      goto LABEL_219;
    }
  }
  else if ((SHIBYTE(v245) & 0x80000000) == 0)
  {
    goto LABEL_214;
  }
  operator delete(v243);
  if ((SHIBYTE(v240) & 0x80000000) == 0)
  {
LABEL_215:
    v163 = v235.__r_.__value_.__l.__size_;
    if (!v235.__r_.__value_.__l.__size_)
      goto LABEL_227;
    goto LABEL_220;
  }
LABEL_219:
  operator delete(v238);
  v163 = v235.__r_.__value_.__l.__size_;
  if (!v235.__r_.__value_.__l.__size_)
    goto LABEL_227;
LABEL_220:
  v164 = (_QWORD *)v235.__r_.__value_.__r.__words[2];
  v165 = (void *)v163;
  if (v235.__r_.__value_.__r.__words[2] != v163)
  {
    do
    {
      v167 = *--v164;
      v166 = v167;
      *v164 = 0;
      if (v167)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
    }
    while (v164 != (_QWORD *)v163);
    v165 = (void *)v235.__r_.__value_.__l.__size_;
  }
  v235.__r_.__value_.__r.__words[2] = v163;
  operator delete(v165);
LABEL_227:
  if (!*((_BYTE *)this + 2334))
    goto LABEL_228;
LABEL_234:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 32) + 40))(*((_QWORD *)this + 32)) == 1)
  {
    v178 = (uint64_t *)*((_QWORD *)a2 + 1);
    v179 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v178 == v179)
    {
LABEL_243:
      v181 = 0;
LABEL_244:
      v182 = v181 != 0;
LABEL_246:
      if (v182 > *((_DWORD *)this + 587))
      {
        *((_DWORD *)this + 587) = v182;
        v183 = (_QWORD *)*((_QWORD *)this + 25);
        for (*((_QWORD *)this + 27) = v183; v183 != (_QWORD *)((char *)this + 192); v183 = (_QWORD *)*((_QWORD *)this + 27))
        {
          v185 = (void (*)(_QWORD *, cricket::Connection *))v183[2];
          v184 = v183 + 2;
          *((_QWORD *)this + 27) = *(v184 - 1);
          v185(v184, this);
        }
      }
    }
    else
    {
      v180 = (uint64_t *)*((_QWORD *)a2 + 1);
      while (*(unsigned __int16 *)(*v180 + 8) != 49153)
      {
        if (++v180 == v179)
        {
          while (1)
          {
            v181 = *v178;
            if (*(_WORD *)(*v178 + 8) == 37)
              goto LABEL_244;
            if (++v178 == v179)
              goto LABEL_243;
          }
        }
      }
      v182 = *(_DWORD *)(*v180 + 12);
      if (v182)
        goto LABEL_246;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v214, v215, v216, v217, v218, v219, v220, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    }
  }
  v186 = *((_QWORD *)a2 + 1);
  v187 = *((_QWORD *)a2 + 2);
  if (v186 != v187)
  {
    while (*(unsigned __int16 *)(*(_QWORD *)v186 + 8) != 49239)
    {
      v186 += 8;
      if (v186 == v187)
        goto LABEL_256;
    }
    v188 = *(_DWORD *)(*(_QWORD *)v186 + 12);
    if (*((unsigned __int16 *)this + 549) != (unsigned __int16)v188)
    {
      *((_WORD *)this + 549) = v188;
      v189 = (_QWORD *)*((_QWORD *)this + 4);
      for (*((_QWORD *)this + 6) = v189; v189 != (_QWORD *)((char *)this + 24); v189 = (_QWORD *)*((_QWORD *)this + 6))
      {
        v191 = (void (*)(_QWORD *, cricket::Connection *))v189[2];
        v190 = v189 + 2;
        *((_QWORD *)this + 6) = *(v190 - 1);
        v191(v190, this);
      }
    }
  }
LABEL_256:
  if (*(_BYTE *)(*((_QWORD *)this + 332) + 56))
  {
    v192 = (uint64_t *)*((_QWORD *)a2 + 1);
    v193 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v192 != v193)
    {
      while (1)
      {
        v194 = *v192;
        if (*(unsigned __int16 *)(*v192 + 8) == 49240)
          break;
        if (++v192 == v193)
          return;
      }
      v195 = *(unsigned __int8 **)(v194 + 16);
      v196 = *(unsigned __int16 *)(v194 + 10);
      if (v195)
        v197 = 1;
      else
        v197 = (_DWORD)v196 == 0;
      if (!v197)
        goto LABEL_308;
      v198 = *((_QWORD *)this + 310);
      v199 = *((_QWORD *)this + 311);
      if (v198 != v199)
      {
        while (1)
        {
          if (*(char *)(v198 + 23) < 0)
          {
            v200 = *(_QWORD *)(v198 + 8);
            if (v200 < 0)
              goto LABEL_308;
            v201 = *(const void **)v198;
            if (v200 && v201 == 0)
              goto LABEL_308;
          }
          else
          {
            v200 = *(unsigned __int8 *)(v198 + 23);
            v201 = (const void *)v198;
          }
          if (v200 == v196 && !memcmp(v195, v201, v196))
            break;
          v198 += 40;
          if (v198 == v199)
            return;
        }
      }
      if (v198 != v199)
      {
        v203 = *((_DWORD *)this + 582) != 0;
        if (!v204 && (rtc::LogMessage::streams_empty_ & 1) != 0)
        {
LABEL_301:
          if (rtc::g_clock)
          {
            v225 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
          }
          else
          {
            if (!dword_253EA791C)
              mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
            v225 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
                 / dword_253EA791C;
          }
          cricket::Connection::ReceivedPingResponse((uint64_t)this, v225 / 1000000 - *(_DWORD *)(v198 + 24), *(_DWORD *)(v198 + 32), 1);
          return;
        }
        cricket::Connection::ToString(this, &v235);
        v212 = 2 * v196;
        if (v196 >= 0xC)
        {
          if ((v212 | 7) == 0x17)
            v221 = (v212 & 0x1FFF8) + 8;
          else
            v221 = v212 | 7;
          v213 = (std::string *)operator new(v221 + 1);
          v250.__r_.__value_.__l.__size_ = 2 * v196;
          v250.__r_.__value_.__r.__words[2] = v221 - 0x7FFFFFFFFFFFFFFFLL;
          v250.__r_.__value_.__r.__words[0] = (std::string::size_type)v213;
        }
        else
        {
          *((_BYTE *)&v250.__r_.__value_.__s + 23) = 2 * v196;
          v213 = &v250;
          if (!(_DWORD)v196)
          {
            v250.__r_.__value_.__s.__data_[2 * v196] = 0;
LABEL_297:
            rtc::webrtc_logging_impl::Log("\r\n\t\n", v205, v206, v207, v208, v209, v210, v211, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
            if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v250.__r_.__value_.__l.__data_);
            if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v235.__r_.__value_.__l.__data_);
            goto LABEL_301;
          }
        }
        bzero(v213, 2 * v196);
        v213->__r_.__value_.__s.__data_[2 * v196] = 0;
        v222 = &v250;
        if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v222 = (std::string *)v250.__r_.__value_.__r.__words[0];
        v223 = &v222->__r_.__value_.__s.__data_[1];
        do
        {
          v224 = *v195++;
          v223 += 2;
          --v196;
        }
        while (v196);
        goto LABEL_297;
      }
    }
  }
}

void cricket::Connection::Ping(uint64_t a1, std::string *a2, _WORD **a3)
{
  _BYTE *v3;
  int v6;
  _WORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t size;
  std::string *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  int v23;
  int v24;
  cricket::StunAttribute *v25;
  std::string::size_type v26;
  std::string::size_type *v27;
  std::string::size_type v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  cricket::StunAttribute *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  cricket::StunAttribute *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _WORD *v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  cricket::StunAttribute *v73;
  int v74;
  uint64_t v75;
  uint64_t *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  __int128 *v90;
  size_t v91;
  __int128 *v92;
  cricket::StunRequest *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  std::string *v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  std::string *v102;
  uint64_t v103;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  std::string *v108;
  void **v110;
  unint64_t v111;
  __int128 v112;
  int v113;
  void **v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  std::string::size_type v122;
  std::string *v123;
  char *v124;
  __int128 v125;
  uint64_t v126;
  void **v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void **v143;
  _BYTE *v144;
  unsigned int v145;
  const void **v146;
  std::string::size_type v147;
  uint64_t v148;
  unsigned int v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  uint64_t v153;
  int8x16_t *v154;
  uint64_t v155;
  _QWORD *v156;
  size_t v157;
  size_t v158;
  cricket::StunRequest *v159;
  int v160;
  void *__p[2];
  int64_t v162;
  _WORD *v163;
  uint64_t v164;
  cricket::StunAttribute *v165;
  cricket::StunAttribute *v166;
  cricket::StunAttribute *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  std::string v171;
  std::string *v172;
  int v173;
  uint64_t v174;

  v174 = *MEMORY[0x24BDAC8D0];
  v3 = *(_BYTE **)(a1 + 248);
  if (!v3 || !*v3 || !*(_QWORD *)(a1 + 256))
    return;
  *(_QWORD *)(a1 + 2440) = a2;
  if (*(_DWORD *)(a1 + 2340))
    v6 = *(_DWORD *)(a1 + 2340);
  else
    v6 = *(unsigned __int8 *)(a1 + 2336);
  v7 = *a3;
  *a3 = 0;
  v8 = operator new();
  cricket::StunMessage::StunMessage((cricket::StunMessage *)v8, 1);
  *v9 = &off_24C0C1690;
  v10 = *(_BYTE **)(a1 + 248);
  if (v10 && *v10)
  {
    v11 = *(_QWORD *)(a1 + 256);
    v12 = (uint64_t *)(a1 + 856);
    if ((*(char *)(a1 + 879) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else
  {
    v11 = 0;
    v12 = (uint64_t *)(a1 + 856);
    if ((*(char *)(a1 + 879) & 0x80000000) == 0)
      goto LABEL_15;
  }
  v13 = *(_QWORD *)(a1 + 864);
  if (v13 < 0)
    goto LABEL_227;
  v14 = *v12;
  if (v13)
  {
    if (!v14)
      goto LABEL_227;
  }
LABEL_15:
  v160 = v6;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v11 + 296))(&v171);
  v15 = operator new();
  v16 = v15;
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v171.__r_.__value_.__l.__size_;
    if ((v171.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
      goto LABEL_227;
    v18 = (std::string *)v171.__r_.__value_.__r.__words[0];
    if (v171.__r_.__value_.__l.__size_)
    {
      if (!v171.__r_.__value_.__r.__words[0])
        goto LABEL_227;
    }
  }
  else
  {
    size = HIBYTE(v171.__r_.__value_.__r.__words[2]);
    v18 = &v171;
  }
  *(_DWORD *)(v15 + 8) = 6;
  *(_QWORD *)v15 = &off_24C0C15A0;
  *(_QWORD *)(v15 + 16) = 0;
  v19 = (void *)operator new[]();
  memcpy(v19, v18, size);
  v20 = *(_QWORD *)(v16 + 16);
  if (v20)
    MEMORY[0x20BD0ADD4](v20, 0x1000C8077774924);
  *(_QWORD *)(v16 + 16) = v19;
  *(_WORD *)(v16 + 10) = size;
  __p[0] = (void *)v16;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 24))(v16, v8);
  *(_WORD *)(v8 + 34) += ((*(_WORD *)(v16 + 10) + 3) & 0xFFFC) + 4;
  v21 = *(uint64_t **)(v8 + 16);
  if ((unint64_t)v21 >= *(_QWORD *)(v8 + 24))
  {
    *(_QWORD *)(v8 + 16) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)__p);
    v22 = __p[0];
    __p[0] = 0;
    if (!v22)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!v21)
    goto LABEL_227;
  __p[0] = 0;
  *v21 = v16;
  *(_QWORD *)(v8 + 16) = v21 + 1;
  v22 = __p[0];
  __p[0] = 0;
  if (v22)
LABEL_27:
    (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
LABEL_28:
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v171.__r_.__value_.__l.__data_);
  v23 = *(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 24))(*(_QWORD *)(a1 + 256))
                            + 286);
  v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 312))(*(_QWORD *)(a1 + 256)) | (v23 << 16);
  v25 = (cricket::StunAttribute *)operator new();
  *(_QWORD *)v25 = &off_24C0C1520;
  *((_DWORD *)v25 + 2) = 311383;
  *((_DWORD *)v25 + 3) = v24;
  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  cricket::StunAttribute::SetOwner(v25, (cricket::StunMessage *)v8);
  v26 = v171.__r_.__value_.__r.__words[0];
  *(_WORD *)(v8 + 34) += ((*(_WORD *)(v171.__r_.__value_.__r.__words[0] + 10) + 3) & 0xFFFC) + 4;
  v27 = *(std::string::size_type **)(v8 + 16);
  if ((unint64_t)v27 >= *(_QWORD *)(v8 + 24))
  {
    *(_QWORD *)(v8 + 16) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)&v171);
    v28 = v171.__r_.__value_.__r.__words[0];
    v171.__r_.__value_.__r.__words[0] = 0;
    if (!v28)
      goto LABEL_36;
LABEL_35:
    (*(void (**)(std::string::size_type))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_36;
  }
  if (!v27)
    goto LABEL_227;
  v171.__r_.__value_.__r.__words[0] = 0;
  *v27 = v26;
  *(_QWORD *)(v8 + 16) = v27 + 1;
  v28 = v171.__r_.__value_.__r.__words[0];
  v171.__r_.__value_.__r.__words[0] = 0;
  if (v28)
    goto LABEL_35;
LABEL_36:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2656) + 56) && *(_BYTE *)(a1 + 2528))
  {
    v29 = (_QWORD *)(a1 + 2504);
    v30 = operator new();
    v31 = v30;
    if (*(char *)(a1 + 2527) < 0)
    {
      v32 = *(_QWORD *)(a1 + 2512);
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_227;
      v29 = (_QWORD *)*v29;
      if (v32)
      {
        if (!v29)
          goto LABEL_227;
      }
    }
    else
    {
      v32 = *(unsigned __int8 *)(a1 + 2527);
    }
    *(_DWORD *)(v30 + 8) = 49240;
    *(_QWORD *)v30 = &off_24C0C15A0;
    *(_QWORD *)(v30 + 16) = 0;
    v33 = (void *)operator new[]();
    memcpy(v33, v29, v32);
    v34 = *(_QWORD *)(v31 + 16);
    if (v34)
      MEMORY[0x20BD0ADD4](v34, 0x1000C8077774924);
    *(_QWORD *)(v31 + 16) = v33;
    *(_WORD *)(v31 + 10) = v32;
    v170 = v31;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 24))(v31, v8);
    v35 = v170;
    *(_WORD *)(v8 + 34) += ((*(_WORD *)(v170 + 10) + 3) & 0xFFFC) + 4;
    v36 = *(uint64_t **)(v8 + 16);
    if ((unint64_t)v36 >= *(_QWORD *)(v8 + 24))
    {
      v37 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), &v170);
    }
    else
    {
      if (!v36)
        goto LABEL_227;
      v170 = 0;
      *v36 = v35;
      v37 = v36 + 1;
    }
    *(_QWORD *)(v8 + 16) = v37;
    v38 = v170;
    v170 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 40))(*(_QWORD *)(a1 + 256));
  v40 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 56))(*(_QWORD *)(a1 + 256));
  v41 = operator new();
  if (v39)
    v42 = -32727;
  else
    v42 = -32726;
  *(_WORD *)(v41 + 8) = v42;
  *(_WORD *)(v41 + 10) = 8;
  *(_QWORD *)v41 = &off_24C0C1560;
  *(_QWORD *)(v41 + 16) = v40;
  v169 = v41;
  cricket::StunAttribute::SetOwner((cricket::StunAttribute *)v41, (cricket::StunMessage *)v8);
  v43 = v169;
  *(_WORD *)(v8 + 34) += ((*(_WORD *)(v169 + 10) + 3) & 0xFFFC) + 4;
  v44 = *(uint64_t **)(v8 + 16);
  if ((unint64_t)v44 < *(_QWORD *)(v8 + 24))
  {
    if (!v44)
      goto LABEL_227;
    v169 = 0;
    *v44 = v43;
    *(_QWORD *)(v8 + 16) = v44 + 1;
    v45 = v169;
    v169 = 0;
    if (!v45)
      goto LABEL_60;
    goto LABEL_59;
  }
  *(_QWORD *)(v8 + 16) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), &v169);
  v45 = v169;
  v169 = 0;
  if (v45)
LABEL_59:
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
LABEL_60:
  if (!v39)
  {
    if (*(_BYTE *)(a1 + 2336))
    {
      v48 = operator new();
      *(_DWORD *)(v48 + 8) = 37;
      *(_QWORD *)v48 = &off_24C0C15A0;
      *(_QWORD *)(v48 + 16) = 0;
      v168 = v48;
      cricket::StunAttribute::SetOwner((cricket::StunAttribute *)v48, (cricket::StunMessage *)v8);
      v49 = v168;
      *(_WORD *)(v8 + 34) += ((*(_WORD *)(v168 + 10) + 3) & 0xFFFC) + 4;
      v50 = *(uint64_t **)(v8 + 16);
      if ((unint64_t)v50 >= *(_QWORD *)(v8 + 24))
      {
        v51 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), &v168);
      }
      else
      {
        if (!v50)
          goto LABEL_227;
        v168 = 0;
        *v50 = v49;
        v51 = v50 + 1;
      }
      *(_QWORD *)(v8 + 16) = v51;
      v71 = v168;
      v168 = 0;
      if (v71)
        (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    }
    v72 = *(_DWORD *)(a1 + 2340);
    if (v72)
    {
      if (v72 != *(_DWORD *)(a1 + 2344))
      {
        v73 = (cricket::StunAttribute *)operator new();
        v74 = *(_DWORD *)(a1 + 2340);
        *(_QWORD *)v73 = &off_24C0C1520;
        *((_DWORD *)v73 + 2) = 311297;
        *((_DWORD *)v73 + 3) = v74;
        v167 = v73;
        cricket::StunAttribute::SetOwner(v73, (cricket::StunMessage *)v8);
        v75 = (uint64_t)v167;
        *(_WORD *)(v8 + 34) += ((*((_WORD *)v167 + 5) + 3) & 0xFFFC) + 4;
        v76 = *(uint64_t **)(v8 + 16);
        if ((unint64_t)v76 >= *(_QWORD *)(v8 + 24))
        {
          v77 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)&v167);
        }
        else
        {
          if (!v76)
            goto LABEL_227;
          v167 = 0;
          *v76 = v75;
          v77 = v76 + 1;
        }
        *(_QWORD *)(v8 + 16) = v77;
        v152 = (uint64_t)v167;
        v167 = 0;
        if (v152)
          (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
      }
    }
  }
  v46 = (unsigned __int16 *)(a1 + 296);
  if (*(char *)(a1 + 319) < 0)
  {
    v47 = *(_QWORD *)(a1 + 304);
    if (v47 < 0)
      goto LABEL_227;
    v46 = *(unsigned __int16 **)v46;
    if (v47)
    {
      if (!v46)
        goto LABEL_227;
    }
  }
  else
  {
    v47 = *(unsigned __int8 *)(a1 + 319);
  }
  if (v47 == 3)
  {
    v52 = bswap32(*v46) >> 16;
    v53 = bswap32((unsigned __int16)cricket::TCP_PROTOCOL_NAME) >> 16;
    if (v52 == v53)
    {
      v54 = *((unsigned __int8 *)v46 + 2) - 112;
    }
    else if (v52 < v53)
    {
      v54 = -1;
    }
    else
    {
      v54 = 1;
    }
    if (v54)
      v55 = 1845493760;
    else
      v55 = 1342177280;
  }
  else
  {
    v55 = 1845493760;
  }
  v56 = *(_DWORD *)(a1 + 416) & 0xFFFFFF | v55;
  v57 = (cricket::StunAttribute *)operator new();
  *(_QWORD *)v57 = &off_24C0C1520;
  *((_DWORD *)v57 + 2) = 262180;
  *((_DWORD *)v57 + 3) = v56;
  v166 = v57;
  cricket::StunAttribute::SetOwner(v57, (cricket::StunMessage *)v8);
  v58 = (uint64_t)v166;
  *(_WORD *)(v8 + 34) += ((*((_WORD *)v166 + 5) + 3) & 0xFFFC) + 4;
  v59 = *(uint64_t **)(v8 + 16);
  if ((unint64_t)v59 >= *(_QWORD *)(v8 + 24))
  {
    *(_QWORD *)(v8 + 16) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)&v166);
    v60 = (uint64_t)v166;
    v166 = 0;
    if (!v60)
      goto LABEL_86;
    goto LABEL_85;
  }
  if (!v59)
    goto LABEL_227;
  v166 = 0;
  *v59 = v58;
  *(_QWORD *)(v8 + 16) = v59 + 1;
  v60 = (uint64_t)v166;
  v166 = 0;
  if (v60)
LABEL_85:
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
LABEL_86:
  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 256) + 240))(*(_QWORD *)(a1 + 256)))
    goto LABEL_93;
  v61 = -858993459 * ((*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 3);
  v62 = (cricket::StunAttribute *)operator new();
  *(_QWORD *)v62 = &off_24C0C1520;
  *((_DWORD *)v62 + 2) = 327424;
  *((_DWORD *)v62 + 3) = v61;
  v165 = v62;
  cricket::StunAttribute::SetOwner(v62, (cricket::StunMessage *)v8);
  v63 = (uint64_t)v165;
  *(_WORD *)(v8 + 34) += ((*((_WORD *)v165 + 5) + 3) & 0xFFFC) + 4;
  v64 = *(uint64_t **)(v8 + 16);
  if ((unint64_t)v64 >= *(_QWORD *)(v8 + 24))
  {
    *(_QWORD *)(v8 + 16) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)&v165);
    v65 = (uint64_t)v165;
    v165 = 0;
    if (!v65)
      goto LABEL_93;
LABEL_92:
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    goto LABEL_93;
  }
  if (!v64)
    goto LABEL_227;
  v165 = 0;
  *v64 = v63;
  *(_QWORD *)(v8 + 16) = v64 + 1;
  v65 = (uint64_t)v165;
  v165 = 0;
  if (v65)
    goto LABEL_92;
LABEL_93:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 2656) + 29) && !*(_BYTE *)(a1 + 2641))
  {
    v66 = operator new();
    *(_DWORD *)(v66 + 8) = 49241;
    *(_QWORD *)v66 = &off_24C0C1620;
    v67 = (_QWORD *)operator new();
    v67[1] = 0;
    v67[2] = 0;
    *v67 = 0;
    *(_QWORD *)(v66 + 16) = v67;
    std::vector<short>::__append((uint64_t)v67, 1uLL);
    v69 = (_WORD *)*v67;
    v68 = v67[1];
    if (v68 == *v67)
      goto LABEL_227;
    *v69 = 1;
    *(_WORD *)(v66 + 10) = (v68 - (_WORD)v69) & 0xFFFE;
    v164 = v66;
    cricket::StunAttribute::SetOwner((cricket::StunAttribute *)v66, (cricket::StunMessage *)v8);
    *(_WORD *)(v8 + 34) += ((*(_WORD *)(v66 + 10) + 3) & 0xFFFC) + 4;
    v70 = *(uint64_t **)(v8 + 16);
    if ((unint64_t)v70 >= *(_QWORD *)(v8 + 24))
    {
      v78 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), &v164);
      v79 = v164;
      *(_QWORD *)(v8 + 16) = v78;
      v164 = 0;
      if (v79)
        (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
    }
    else
    {
      if (!v70)
        goto LABEL_227;
      *v70 = v66;
      *(_QWORD *)(v8 + 16) = v70 + 1;
      v164 = 0;
    }
  }
  if (v7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v80, v81, v82, v83, v84, v85, v86, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    v163 = v7;
    (*(void (**)(_WORD *, uint64_t))(*(_QWORD *)v7 + 24))(v7, v8);
    *(_WORD *)(v8 + 34) += ((v7[5] + 3) & 0xFFFC) + 4;
    v87 = *(_QWORD **)(v8 + 16);
    if ((unint64_t)v87 >= *(_QWORD *)(v8 + 24))
    {
      v88 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(v8 + 8), (uint64_t *)&v163);
      v89 = (uint64_t)v163;
      *(_QWORD *)(v8 + 16) = v88;
      v163 = 0;
      if (v89)
        (*(void (**)(uint64_t))(*(_QWORD *)v89 + 8))(v89);
    }
    else
    {
      if (!v87)
        goto LABEL_227;
      *v87 = v7;
      *(_QWORD *)(v8 + 16) = v87 + 1;
      v163 = 0;
    }
  }
  v90 = (__int128 *)(a1 + 880);
  if (*(char *)(a1 + 903) < 0)
  {
    v91 = *(_QWORD *)(a1 + 888);
    if ((v91 & 0x8000000000000000) != 0)
      goto LABEL_227;
    v92 = *(__int128 **)v90;
    if (v91)
    {
      if (!v92)
        goto LABEL_227;
    }
  }
  else
  {
    v91 = *(unsigned __int8 *)(a1 + 903);
    v92 = (__int128 *)(a1 + 880);
  }
  cricket::StunMessage::AddMessageIntegrityOfType(v8, 8, 0x14uLL, v92, v91);
  cricket::StunMessage::AddFingerprint((cricket::StunMessage *)v8);
  v93 = (cricket::StunRequest *)operator new();
  *(_QWORD *)v93 = &off_24C0C1B10;
  *((_QWORD *)v93 + 1) = a1 + 2352;
  *((_QWORD *)v93 + 2) = v8;
  *((_QWORD *)v93 + 3) = 0;
  *((_DWORD *)v93 + 8) = 0;
  *((_BYTE *)v93 + 36) = 0;
  v94 = operator new();
  *(_DWORD *)v94 = 0;
  *(_BYTE *)(v94 + 4) = 0;
  do
    v95 = __ldxr((unsigned int *)v94);
  while (__stxr(v95 + 1, (unsigned int *)v94));
  *((_QWORD *)v93 + 5) = v94;
  *((_BYTE *)v93 + 48) = 1;
  *(_QWORD *)v93 = &off_24C0B1470;
  *((_QWORD *)v93 + 7) = a1;
  if (!v7)
  {
    if (*(_BYTE *)(a1 + 2641))
    {
      if (*(_BYTE *)(a1 + 2640))
      {
        v99 = *(_QWORD *)(a1 + 2648);
        if (v99)
        {
          v100 = *((_QWORD *)v93 + 2);
          v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0B16A0;
          v172 = &v171;
          v101 = cricket::StunMessage::EqualAttributes(v99, v100, (uint64_t)&v171);
          v102 = v172;
          if (v172 == &v171)
          {
            v103 = 4;
            v102 = &v171;
          }
          else
          {
            if (!v172)
            {
              if (!v101)
                goto LABEL_125;
              goto LABEL_214;
            }
            v103 = 5;
          }
          (*(void (**)(void))(v102->__r_.__value_.__r.__words[0] + 8 * v103))();
          if ((v101 & 1) == 0)
            goto LABEL_125;
LABEL_214:
          v153 = *((_QWORD *)v93 + 2);
          v154 = (int8x16_t *)(v153 + 40);
          v155 = operator new();
          v156 = (_QWORD *)v155;
          if (*(char *)(v153 + 63) < 0)
          {
            v157 = *(_QWORD *)(v153 + 48);
            if ((v157 & 0x8000000000000000) != 0)
              goto LABEL_227;
            v154 = (int8x16_t *)v154->i64[0];
            if (v157)
            {
              if (!v154)
                goto LABEL_227;
            }
          }
          else
          {
            v157 = *(unsigned __int8 *)(v153 + 63);
          }
          cricket::StunMessage::StunMessage(v155, 512, v154, v157);
          *v156 = &off_24C0C1690;
          if (*(char *)(a1 + 903) < 0)
          {
            v158 = *(_QWORD *)(a1 + 888);
            if ((v158 & 0x8000000000000000) != 0)
              goto LABEL_227;
            v90 = *(__int128 **)v90;
            if (v158)
            {
              if (!v90)
                goto LABEL_227;
            }
          }
          else
          {
            v158 = *(unsigned __int8 *)(a1 + 903);
          }
          cricket::StunMessage::AddMessageIntegrityOfType((uint64_t)v156, 49248, 4uLL, v90, v158);
          v159 = (cricket::StunRequest *)operator new();
          v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
          cricket::StunRequest::StunRequest((uint64_t)v159, a1 + 2352, (uint64_t *)&v171);
          if (v171.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v171.__r_.__value_.__l.__data_ + 8))(v171.__r_.__value_.__r.__words[0]);
          *(_QWORD *)v159 = &off_24C0B1470;
          *((_QWORD *)v159 + 7) = a1;
          (*(void (**)(cricket::StunRequest *))(*(_QWORD *)v93 + 8))(v93);
          v93 = v159;
        }
      }
    }
  }
LABEL_125:
  v96 = *((_QWORD *)v93 + 2);
  v97 = (std::string *)(v96 + 40);
  if (*(char *)(v96 + 63) < 0)
  {
    v98 = *(_QWORD *)(v96 + 48);
    if ((v98 & 0x8000000000000000) != 0)
      goto LABEL_227;
    v97 = (std::string *)v97->__r_.__value_.__r.__words[0];
    if (v98 && v97 == 0)
      goto LABEL_227;
    if (v98 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_228;
  }
  else
  {
    v98 = *(unsigned __int8 *)(v96 + 63);
  }
  if (v98 > 0x16)
  {
    v106 = (v98 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v98 | 7) != 0x17)
      v106 = v98 | 7;
    v107 = v106 + 1;
    v105 = (std::string *)operator new(v106 + 1);
    v171.__r_.__value_.__l.__size_ = v98;
    v171.__r_.__value_.__r.__words[2] = v107 | 0x8000000000000000;
    v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
  }
  else
  {
    *((_BYTE *)&v171.__r_.__value_.__s + 23) = v98;
    v105 = &v171;
  }
  v108 = (std::string *)((char *)v105 + v98);
  if (v105 <= v97 && v108 > v97)
    goto LABEL_227;
  if (v98)
    memmove(v105, v97, v98);
  v108->__r_.__value_.__s.__data_[0] = 0;
  v172 = a2;
  v173 = v160;
  v110 = *(void ***)(a1 + 2488);
  v111 = *(_QWORD *)(a1 + 2496);
  if ((unint64_t)v110 < v111)
  {
    if (!v110)
      goto LABEL_227;
    v112 = *(_OWORD *)&v171.__r_.__value_.__l.__data_;
    v110[2] = (void *)v171.__r_.__value_.__r.__words[2];
    *(_OWORD *)v110 = v112;
    memset(&v171, 0, sizeof(v171));
    v113 = v173;
    v110[3] = v172;
    *((_DWORD *)v110 + 8) = v113;
    *(_QWORD *)(a1 + 2488) = v110 + 5;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
      goto LABEL_196;
    goto LABEL_174;
  }
  v114 = *(void ***)(a1 + 2480);
  v115 = 0xCCCCCCCCCCCCCCCDLL * (v110 - v114) + 1;
  if (v115 > 0x666666666666666)
    goto LABEL_228;
  v116 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v111 - (_QWORD)v114) >> 3);
  if (2 * v116 > v115)
    v115 = 2 * v116;
  v117 = v116 >= 0x333333333333333 ? 0x666666666666666 : v115;
  if (!v117)
LABEL_227:
    __break(1u);
  if (v117 > 0x666666666666666)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v118 = 40 * v117;
  v119 = (char *)operator new(40 * v117);
  v120 = &v119[v118];
  v121 = &v119[8 * (v110 - v114)];
  *(_OWORD *)v121 = *(_OWORD *)&v171.__r_.__value_.__l.__data_;
  v122 = v171.__r_.__value_.__r.__words[2];
  memset(&v171, 0, sizeof(v171));
  v123 = v172;
  *((_QWORD *)v121 + 2) = v122;
  *((_QWORD *)v121 + 3) = v123;
  *((_DWORD *)v121 + 8) = v173;
  v124 = v121 + 40;
  if (v110 == v114)
  {
    *(_QWORD *)(a1 + 2480) = v121;
    *(_QWORD *)(a1 + 2488) = v124;
    *(_QWORD *)(a1 + 2496) = v120;
  }
  else
  {
    do
    {
      v125 = *(_OWORD *)(v110 - 5);
      *((_QWORD *)v121 - 3) = *(v110 - 3);
      *(_OWORD *)(v121 - 40) = v125;
      *(v110 - 4) = 0;
      *(v110 - 3) = 0;
      *(v110 - 5) = 0;
      v126 = (uint64_t)*(v110 - 2);
      *((_DWORD *)v121 - 2) = *((_DWORD *)v110 - 2);
      *((_QWORD *)v121 - 2) = v126;
      v121 -= 40;
      v110 -= 5;
    }
    while (v110 != v114);
    v110 = *(void ***)(a1 + 2480);
    v127 = *(void ***)(a1 + 2488);
    *(_QWORD *)(a1 + 2480) = v121;
    *(_QWORD *)(a1 + 2488) = v124;
    *(_QWORD *)(a1 + 2496) = v120;
    while (v127 != v110)
    {
      if (*((char *)v127 - 17) < 0)
        operator delete(*(v127 - 5));
      v127 -= 5;
    }
  }
  if (v110)
    operator delete(v110);
  v128 = SHIBYTE(v171.__r_.__value_.__r.__words[2]);
  *(_QWORD *)(a1 + 2488) = v124;
  if (v128 < 0)
  {
    operator delete(v171.__r_.__value_.__l.__data_);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      goto LABEL_174;
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
LABEL_174:
    cricket::Connection::ToString((cricket::Connection *)a1, &v171);
    v136 = *((_QWORD *)v93 + 2);
    v137 = (_QWORD *)(v136 + 40);
    if ((*(char *)(v136 + 63) & 0x80000000) == 0)
    {
      v138 = *(unsigned __int8 *)(v136 + 63);
      goto LABEL_182;
    }
    v138 = *(_QWORD *)(v136 + 48);
    if ((v138 & 0x8000000000000000) != 0)
      goto LABEL_227;
    v137 = (_QWORD *)*v137;
    if (v138)
    {
      if (!v137)
        goto LABEL_227;
    }
    if (v138 < 0x3FFFFFFFFFFFFFFCLL)
    {
LABEL_182:
      v139 = 2 * v138;
      if (v138 >= 0xC)
      {
        v141 = (v139 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v139 | 7) != 0x17)
          v141 = v139 | 7;
        v142 = v141 + 1;
        v140 = operator new(v141 + 1);
        __p[1] = (void *)(2 * v138);
        v162 = v142 | 0x8000000000000000;
        __p[0] = v140;
      }
      else
      {
        HIBYTE(v162) = 2 * v138;
        v140 = __p;
        if (!v138)
        {
          LOBYTE(__p[0]) = 0;
LABEL_192:
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v129, v130, v131, v132, v133, v134, v135, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
          if (SHIBYTE(v162) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v171.__r_.__value_.__l.__data_);
          goto LABEL_196;
        }
      }
      bzero(v140, 2 * v138);
      *((_BYTE *)v140 + 2 * v138) = 0;
      v143 = __p;
      if (v162 < 0)
        v143 = (void **)__p[0];
      v144 = (char *)v143 + 1;
      do
      {
        v145 = *(unsigned __int8 *)v137;
        v137 = (_QWORD *)((char *)v137 + 1);
        v144 += 2;
        --v138;
      }
      while (v138);
      goto LABEL_192;
    }
LABEL_228:
    abort();
  }
LABEL_196:
  v146 = (const void **)(*((_QWORD *)v93 + 2) + 40);
  v171.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
  std::__tree<std::__value_type<std::string,std::unique_ptr<cricket::StunRequest>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<cricket::StunRequest>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<cricket::StunRequest>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<cricket::StunRequest>>(a1 + 2360, v146, (uint64_t)v146, (uint64_t *)&v171);
  v147 = v171.__r_.__value_.__r.__words[0];
  v171.__r_.__value_.__r.__words[0] = 0;
  if (v147)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v147 + 8))(v147);
  v148 = *((_QWORD *)v93 + 5);
  if (v148)
  {
    do
      v149 = __ldxr((unsigned int *)v148);
    while (__stxr(v149 + 1, (unsigned int *)v148));
    *(_BYTE *)(v148 + 4) = 1;
    do
    {
      v150 = __ldaxr((unsigned int *)v148);
      v151 = v150 - 1;
    }
    while (__stlxr(v151, (unsigned int *)v148));
    if (!v151)
      MEMORY[0x20BD0ADEC]();
  }
  else
  {
    MEMORY[4] = 1;
  }
  cricket::StunRequest::SendInternal(v93);
  *(_DWORD *)(a1 + 2560) = 1;
  ++*(_DWORD *)(a1 + 2592);
}

uint64_t cricket::Connection::SendResponseMessage(cricket::Connection *this, const cricket::StunMessage *a2)
{
  rtc::SocketAddress *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  void *p_p;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t result;
  void *__p;
  uint64_t v42;
  int64_t v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  std::string v48;
  char v49;
  const char *v50;
  uint64_t v51;
  char *v52;
  _QWORD v53[2];
  _QWORD v54[2];
  std::string *v55;
  const char **v56;
  const char *v57;
  std::string **v58;
  int v59;
  char v60;
  uint64_t v61;
  int v62;
  void *v63;
  void *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int16 v75;
  __int128 v76;
  uint64_t v77;

  v4 = (cricket::Connection *)((char *)this + 776);
  v77 = operator new[]();
  v76 = xmmword_208F070B0;
  cricket::StunMessage::Write((uint64_t)a2, (uint64_t)&v76);
  v59 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 272))(*((_QWORD *)this + 32));
  v60 = 0;
  v61 = -1;
  v62 = -1;
  v64 = 0;
  v65 = 0;
  v63 = 0;
  v66 = -1;
  v67 = -1;
  v68 = 0;
  v71 = 0;
  v70 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  v75 = 0;
  v69 = 3;
  if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD, rtc::SocketAddress *, int *, _QWORD))(**((_QWORD **)this + 32)
                                                                                                + 144))(*((_QWORD *)this + 32), v77, v76, v4, &v59, 0) & 0x80000000) == 0)
  {
    v5 = *((_DWORD *)this + 582) != 0;
      && (rtc::LogMessage::streams_empty_ & 1) != 0)
    {
      goto LABEL_28;
    }
    v50 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
    v51 = v5 | 0x18D0u;
    v52 = (char *)v54;
    cricket::Connection::ToString(this, &v48);
    v55 = &v48;
    v56 = &v50;
    v57 = ": Sent ";
    v58 = &v55;
    cricket::StunMethodToString((cricket *)*((unsigned __int16 *)a2 + 16), (unint64_t)v46);
    rtc::SocketAddress::ToSensitiveString(v4, (char *)v44);
    v13 = (_QWORD *)((char *)a2 + 40);
    if ((*((char *)a2 + 63) & 0x80000000) == 0)
    {
      v14 = *((unsigned __int8 *)a2 + 63);
      goto LABEL_14;
    }
    v14 = *((_QWORD *)a2 + 6);
    if ((v14 & 0x8000000000000000) == 0)
    {
      v13 = (_QWORD *)*v13;
      if (!v14 || v13)
      {
        if (v14 <= 0x3FFFFFFFFFFFFFFBLL)
        {
LABEL_14:
          v24 = 2 * v14;
          if (v14 >= 0xC)
          {
            v26 = (v24 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v24 | 7) != 0x17)
              v26 = v24 | 7;
            v27 = v26 + 1;
            p_p = operator new(v26 + 1);
            v42 = 2 * v14;
            v43 = v27 | 0x8000000000000000;
            __p = p_p;
          }
          else
          {
            HIBYTE(v43) = 2 * v14;
            p_p = &__p;
            if (!v14)
            {
              LOBYTE(__p) = 0;
              goto LABEL_24;
            }
          }
          bzero(p_p, 2 * v14);
          *((_BYTE *)p_p + 2 * v14) = 0;
          v28 = (char *)&__p;
          if (v43 < 0)
            v28 = (char *)__p;
          v29 = v28 + 1;
          do
          {
            v30 = *(unsigned __int8 *)v13;
            v13 = (_QWORD *)((char *)v13 + 1);
            v29 += 2;
            --v14;
          }
          while (v14);
LABEL_24:
          rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n\t\n", v6, v7, v8, v9, v10, v11, v12, v58[1]->__r_.__value_.__r.__words[0]);
          if (SHIBYTE(v43) < 0)
          {
            operator delete(__p);
            if ((v45 & 0x80000000) == 0)
            {
LABEL_26:
              if ((v47 & 0x80000000) == 0)
                goto LABEL_27;
LABEL_32:
              operator delete(v46[0]);
              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_33;
LABEL_28:
              ++*((_QWORD *)this + 150);
              v31 = *((_QWORD *)this + 329);
              if (!v31)
              {
LABEL_54:
                v32 = v63;
                if (!v63)
                  goto LABEL_56;
                goto LABEL_55;
              }
LABEL_34:
              webrtc::IceEventLog::LogCandidatePairEvent(v31, 2, *((_DWORD *)this + 60), *((_DWORD *)a2 + 16));
              v32 = v63;
              if (!v63)
                goto LABEL_56;
LABEL_55:
              v64 = v32;
              operator delete(v32);
              goto LABEL_56;
            }
          }
          else if ((v45 & 0x80000000) == 0)
          {
            goto LABEL_26;
          }
          operator delete(v44[0]);
          if ((v47 & 0x80000000) == 0)
          {
LABEL_27:
            if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_28;
LABEL_33:
            operator delete(v48.__r_.__value_.__l.__data_);
            ++*((_QWORD *)this + 150);
            v31 = *((_QWORD *)this + 329);
            if (!v31)
              goto LABEL_54;
            goto LABEL_34;
          }
          goto LABEL_32;
        }
LABEL_65:
        abort();
      }
    }
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_54;
  v50 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
  v51 = 6291;
  v52 = &v49;
  cricket::Connection::ToString(this, &v48);
  v53[0] = &v48;
  v53[1] = &v50;
  v54[0] = ": Failed to send ";
  v54[1] = v53;
  cricket::StunMethodToString((cricket *)*((unsigned __int16 *)a2 + 16), (unint64_t)v46);
  v55 = (std::string *)v46;
  v56 = (const char **)v54;
  v57 = ", to=";
  v58 = &v55;
  rtc::SocketAddress::ToSensitiveString(v4, (char *)v44);
  v22 = (_QWORD *)((char *)a2 + 40);
  if (*((char *)a2 + 63) < 0)
  {
    v23 = *((_QWORD *)a2 + 6);
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_64;
    v22 = (_QWORD *)*v22;
    if (v23)
    {
      if (!v22)
        goto LABEL_64;
    }
    if (v23 > 0x3FFFFFFFFFFFFFFBLL)
      goto LABEL_65;
  }
  else
  {
    v23 = *((unsigned __int8 *)a2 + 63);
  }
  v33 = 2 * v23;
  if (v23 >= 0xC)
  {
    v35 = (v33 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v35 = v33 | 7;
    v36 = v35 + 1;
    v34 = operator new(v35 + 1);
    v42 = 2 * v23;
    v43 = v36 | 0x8000000000000000;
    __p = v34;
  }
  else
  {
    HIBYTE(v43) = 2 * v23;
    v34 = &__p;
    if (!v23)
    {
      LOBYTE(__p) = 0;
      goto LABEL_50;
    }
  }
  bzero(v34, 2 * v23);
  *((_BYTE *)v34 + 2 * v23) = 0;
  v37 = (char *)&__p;
  if (v43 < 0)
    v37 = (char *)__p;
  v38 = v37 + 1;
  do
  {
    v39 = *(unsigned __int8 *)v22;
    v22 = (_QWORD *)((char *)v22 + 1);
    v38 += 2;
    --v23;
  }
  while (v23);
LABEL_50:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v15, v16, v17, v18, v19, v20, v21, **(_QWORD **)(v58[1]->__r_.__value_.__l.__size_ + 8));
  if (SHIBYTE(v43) < 0)
  {
    operator delete(__p);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_52:
      if ((v47 & 0x80000000) == 0)
        goto LABEL_53;
      goto LABEL_61;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_52;
  }
  operator delete(v44[0]);
  if ((v47 & 0x80000000) == 0)
  {
LABEL_53:
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_62;
  }
LABEL_61:
  operator delete(v46[0]);
  if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_54;
LABEL_62:
  operator delete(v48.__r_.__value_.__l.__data_);
  v32 = v63;
  if (v63)
    goto LABEL_55;
LABEL_56:
  result = v77;
  v77 = 0;
  if (result)
    return MEMORY[0x20BD0ADD4](result, 0x1000C8077774924);
  return result;
}

void cricket::Connection::Prune(char **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void (*v19)(_QWORD *, char **);
  std::string __p;

  if (!*((_BYTE *)this + 2334) || *((_DWORD *)this + 582) != 3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      cricket::Connection::ToString((cricket::Connection *)this, &__p);
      rtc::webrtc_logging_impl::Log("\r\n\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    *((_BYTE *)this + 2334) = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)(this + 295), this[296]);
    this[295] = (char *)(this + 296);
    this[297] = 0;
    this[296] = 0;
    v9 = *((_DWORD *)this + 582);
    *((_DWORD *)this + 582) = 3;
    if (v9 != 3)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      {
        cricket::Connection::ToString((cricket::Connection *)this, &__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v17 = this[4];
      for (this[6] = v17; v17 != (char *)(this + 3); v17 = this[6])
      {
        v19 = (void (*)(_QWORD *, char **))*((_QWORD *)v17 + 2);
        v18 = v17 + 16;
        this[6] = (char *)*(v18 - 1);
        v19(v18, this);
      }
    }
  }
}

uint64_t cricket::Connection::Shutdown(cricket::Connection *this)
{
  _BYTE *v1;
  char *v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  void (*v14)(char *, cricket::Connection *);
  float *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t j;
  _QWORD **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  _QWORD *v28;
  void *__p;
  uint64_t v30;
  void **v31;
  char v32;

  v1 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v1 || !*v1 || !*((_QWORD *)this + 32))
    return 0;
  v27[0] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  v27[1] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  v28 = &v28;
  __p = &v28;
  v30 = 0;
  v31 = (void **)&v28;
  v32 = 0;
  v3 = (char *)this + 80;
  v4 = *((_QWORD *)this + 11);
  if ((cricket::Connection *)v4 != (cricket::Connection *)((char *)this + 80))
  {
    do
    {
      (*(void (**)(void))(*(_QWORD *)(v4 + 24) + 8))();
      v5 = operator new(0x30uLL);
      v6 = *(_OWORD *)(v4 + 32);
      v5[1] = *(_OWORD *)(v4 + 16);
      v5[2] = v6;
      v7 = v28;
      *(_QWORD *)v5 = v28;
      *((_QWORD *)v5 + 1) = &v28;
      v7[1] = v5;
      v28 = v5;
      ++v30;
      v4 = *(_QWORD *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  for (i = *((_QWORD *)this + 12); i; i = *((_QWORD *)this + 12))
  {
    v9 = (uint64_t *)*((_QWORD *)this + 11);
    v10 = v9[3];
    v11 = *v9;
    *(_QWORD *)(v11 + 8) = v9[1];
    *(_QWORD *)v9[1] = v11;
    *((_QWORD *)this + 12) = i - 1;
    operator delete(v9);
    (*(void (**)(uint64_t, char *))(v10 + 16))(v10, (char *)this + 64);
  }
  *((_QWORD *)this + 13) = v3;
  v12 = __p;
  v31 = (void **)__p;
  if (__p != &v28)
  {
    do
    {
      v14 = (void (*)(char *, cricket::Connection *))v12[2];
      v13 = (char *)(v12 + 2);
      v31 = (void **)*((_QWORD *)v13 - 1);
      v14(v13, this);
      v12 = v31;
    }
    while (v31 != (void **)&v28);
  }
  v15 = (float *)*((_QWORD *)this + 329);
  if (v15)
  {
    v16 = *((_DWORD *)this + 60);
    v17 = cricket::Connection::ToLogDescription(this);
    webrtc::IceEventLog::LogCandidatePairConfig(v15, 2, v16, v17);
  }
  v18 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 4);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      MEMORY[0x20BD0ADEC]();
  }
  *((_QWORD *)this + 32) = 0;
  std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)this + 2360, *((char **)this + 296));
  *((_QWORD *)this + 295) = (char *)this + 2368;
  *((_QWORD *)this + 297) = 0;
  *((_QWORD *)this + 296) = 0;
  for (j = v30; v30; j = v30)
  {
    v23 = (_QWORD **)__p;
    v24 = *((_QWORD *)__p + 3);
    v25 = *(_QWORD *)__p;
    *(_QWORD *)(v25 + 8) = *((_QWORD *)__p + 1);
    *v23[1] = v25;
    v30 = j - 1;
    operator delete(v23);
    (*(void (**)(uint64_t, _QWORD *))(v24 + 16))(v24, v27);
  }
  return 1;
}

void cricket::Connection::FailAndPrune(cricket::Connection *this)
{
  _BYTE *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;

  v1 = (_BYTE *)*((_QWORD *)this + 31);
  if (v1 && *v1 && *((_QWORD *)this + 32))
  {
    v3 = *((_DWORD *)this + 640);
    *((_DWORD *)this + 640) = 3;
    if (v3 != 3 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      cricket::Connection::ToString(this, &__p);
      rtc::webrtc_logging_impl::Log("\r\n\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    cricket::Connection::Prune((char **)this);
  }
}

void cricket::Connection::PrintPingsSinceLastResponse(uint64_t a1, std::string *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t i;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned __int8 v17;
  size_t v18;
  BOOL v19;
  char *v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string *v23;
  char *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string *v28;
  _BYTE *v29;
  std::string::size_type v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v34;
  void *p_p;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned __int8 v41;
  size_t v42;
  BOOL v43;
  char *v44;
  std::string::size_type v45;
  std::string::size_type size;
  std::string *v47;
  char *v48;
  std::string::size_type v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  _BYTE *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string *v57;
  _DWORD *v58;
  std::string::size_type v59;
  std::string *v60;
  int v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string *v64;
  std::string *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string *v68;
  size_t v69;
  void *__p;
  uint64_t v72;
  int64_t v73;
  std::string v74;

  memset(&v74, 0, sizeof(v74));
  v2 = *(unsigned __int8 **)(a1 + 2488);
  v3 = *(unsigned __int8 **)(a1 + 2480);
  if (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3) <= 5)
  {
    if (v3 == v2)
      goto LABEL_160;
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        v31 = *((_QWORD *)v3 + 1);
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_177;
        v32 = *(unsigned __int8 **)v3;
        if (v31 && v32 == 0)
          goto LABEL_177;
        if (v31 > 0x3FFFFFFFFFFFFFFBLL)
          goto LABEL_178;
      }
      else
      {
        v31 = v3[23];
        v32 = v3;
      }
      v34 = 2 * v31;
      if (v31 >= 0xC)
      {
        v36 = (v34 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v36 = v34 | 7;
        v37 = v36 + 1;
        p_p = operator new(v36 + 1);
        v72 = 2 * v31;
        v73 = v37 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v73) = 2 * v31;
        if (!v31)
        {
          LOBYTE(__p) = 0;
          v41 = HIBYTE(v73);
          if ((SHIBYTE(v73) & 0x80000000) == 0)
            goto LABEL_88;
          goto LABEL_90;
        }
        p_p = &__p;
      }
      bzero(p_p, 2 * v31);
      *((_BYTE *)p_p + 2 * v31) = 0;
      v38 = (char *)&__p;
      if (v73 < 0)
        v38 = (char *)__p;
      v39 = v38 + 1;
      do
      {
        v40 = *v32++;
        v39 += 2;
        --v31;
      }
      while (v31);
      v41 = HIBYTE(v73);
      if ((SHIBYTE(v73) & 0x80000000) == 0)
      {
LABEL_88:
        v42 = v41;
        v43 = v41 == 0;
        v44 = (char *)&__p;
        goto LABEL_93;
      }
LABEL_90:
      v42 = v72;
      if (v72 < 0)
        goto LABEL_177;
      v44 = (char *)__p;
      v43 = v72 == 0;
      if (v72)
      {
        if (!__p)
          goto LABEL_177;
      }
LABEL_93:
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = 22;
      else
        v45 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      else
        size = v74.__r_.__value_.__l.__size_;
      if (v45 - size >= v42)
      {
        if (!v43)
        {
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = &v74;
          else
            v47 = (std::string *)v74.__r_.__value_.__r.__words[0];
          v48 = (char *)v47 + size;
          if ((char *)v47 + size <= v44 && &v48[v42] > v44)
            goto LABEL_177;
          memmove(v48, v44, v42);
          v49 = size + v42;
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            v74.__r_.__value_.__l.__size_ = size + v42;
          else
            *((_BYTE *)&v74.__r_.__value_.__s + 23) = v49 & 0x7F;
          v47->__r_.__value_.__s.__data_[v49] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace(&v74, v45, size + v42 - v45, size, size, 0, v42, v44);
      }
      v50 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = 22;
      else
        v51 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = v74.__r_.__value_.__l.__size_;
      if (v51 == v50)
      {
        std::string::__grow_by_and_replace(&v74, v51, 1uLL, v51, v51, 0, 1uLL, " ");
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_68;
      }
      else
      {
        v52 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v52 = (std::string *)v74.__r_.__value_.__r.__words[0];
        v53 = (char *)v52 + v50;
        if ((char *)v52 + v50 <= " " && v53 + 1 > " ")
          goto LABEL_177;
        *v53 = 32;
        v54 = v50 + 1;
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        {
          v74.__r_.__value_.__l.__size_ = v54;
          v52->__r_.__value_.__s.__data_[v54] = 0;
          if ((SHIBYTE(v73) & 0x80000000) == 0)
            goto LABEL_68;
        }
        else
        {
          *((_BYTE *)&v74.__r_.__value_.__s + 23) = v54 & 0x7F;
          v52->__r_.__value_.__s.__data_[v54] = 0;
          if ((SHIBYTE(v73) & 0x80000000) == 0)
            goto LABEL_68;
        }
      }
      operator delete(__p);
LABEL_68:
      v3 += 40;
      if (v3 == v2)
        goto LABEL_160;
    }
  }
  for (i = 0; i != 5; ++i)
  {
    v6 = *(_QWORD *)(a1 + 2480);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 2488) - v6) >> 3) <= i)
      goto LABEL_177;
    v7 = (unsigned __int8 *)(v6 + 40 * i);
    if ((char)v7[23] < 0)
    {
      v8 = *((_QWORD *)v7 + 1);
      if ((v8 & 0x8000000000000000) != 0)
        goto LABEL_177;
      v7 = *(unsigned __int8 **)v7;
      if (v8 && v7 == 0)
        goto LABEL_177;
      if (v8 > 0x3FFFFFFFFFFFFFFBLL)
        goto LABEL_178;
    }
    else
    {
      v8 = v7[23];
    }
    v10 = 2 * v8;
    if (v8 >= 0xC)
    {
      v12 = (v10 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v12 = v10 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      v72 = 2 * v8;
      v73 = v13 | 0x8000000000000000;
      __p = v11;
    }
    else
    {
      HIBYTE(v73) = 2 * v8;
      if (!v8)
      {
        LOBYTE(__p) = 0;
        v17 = HIBYTE(v73);
        if ((SHIBYTE(v73) & 0x80000000) == 0)
          goto LABEL_25;
        goto LABEL_27;
      }
      v11 = &__p;
    }
    bzero(v11, 2 * v8);
    *((_BYTE *)v11 + 2 * v8) = 0;
    v14 = (char *)&__p;
    if (v73 < 0)
      v14 = (char *)__p;
    v15 = v14 + 1;
    do
    {
      v16 = *v7++;
      v15 += 2;
      --v8;
    }
    while (v8);
    v17 = HIBYTE(v73);
    if ((SHIBYTE(v73) & 0x80000000) == 0)
    {
LABEL_25:
      v18 = v17;
      v19 = v17 == 0;
      v20 = (char *)&__p;
      goto LABEL_30;
    }
LABEL_27:
    v18 = v72;
    if (v72 < 0)
      goto LABEL_177;
    v20 = (char *)__p;
    v19 = v72 == 0;
    if (v72)
    {
      if (!__p)
        goto LABEL_177;
    }
LABEL_30:
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = 22;
    else
      v21 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
    else
      v22 = v74.__r_.__value_.__l.__size_;
    if (v21 - v22 >= v18)
    {
      if (!v19)
      {
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v74;
        else
          v23 = (std::string *)v74.__r_.__value_.__r.__words[0];
        v24 = (char *)v23 + v22;
        if ((char *)v23 + v22 <= v20 && &v24[v18] > v20)
          goto LABEL_177;
        memmove(v24, v20, v18);
        v25 = v22 + v18;
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          v74.__r_.__value_.__l.__size_ = v22 + v18;
        else
          *((_BYTE *)&v74.__r_.__value_.__s + 23) = v25 & 0x7F;
        v23->__r_.__value_.__s.__data_[v25] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v74, v21, v22 + v18 - v21, v22, v22, 0, v18, v20);
    }
    v26 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = 22;
    else
      v27 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = v74.__r_.__value_.__l.__size_;
    if (v27 == v26)
    {
      std::string::__grow_by_and_replace(&v74, v27, 1uLL, v27, v27, 0, 1uLL, " ");
      if (SHIBYTE(v73) < 0)
        goto LABEL_3;
    }
    else
    {
      v28 = &v74;
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = (std::string *)v74.__r_.__value_.__r.__words[0];
      v29 = (char *)v28 + v26;
      if ((char *)v28 + v26 <= " " && v29 + 1 > " ")
        goto LABEL_177;
      *v29 = 32;
      v30 = v26 + 1;
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      {
        v74.__r_.__value_.__l.__size_ = v30;
        v28->__r_.__value_.__s.__data_[v30] = 0;
        if (SHIBYTE(v73) < 0)
        {
LABEL_3:
          operator delete(__p);
          continue;
        }
      }
      else
      {
        *((_BYTE *)&v74.__r_.__value_.__s + 23) = v30 & 0x7F;
        v28->__r_.__value_.__s.__data_[v30] = 0;
        if (SHIBYTE(v73) < 0)
          goto LABEL_3;
      }
    }
  }
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = 22;
  else
    v55 = (v74.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    v56 = v74.__r_.__value_.__l.__size_;
  if (v55 - v56 < 4)
  {
    std::string::__grow_by_and_replace(&v74, v55, v56 - v55 + 4, v56, v56, 0, 4uLL, "... ");
    goto LABEL_144;
  }
  v57 = &v74;
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v57 = (std::string *)v74.__r_.__value_.__r.__words[0];
  v58 = (_DWORD *)((char *)v57 + v56);
  if ((char *)v57 + v56 <= "... " && v58 + 1 > (_DWORD *)"... ")
    goto LABEL_177;
  *v58 = 539897390;
  v59 = v56 + 4;
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    v74.__r_.__value_.__l.__size_ = v56 + 4;
  else
    *((_BYTE *)&v74.__r_.__value_.__s + 23) = v59 & 0x7F;
  v57->__r_.__value_.__s.__data_[v59] = 0;
LABEL_144:
  v60 = rtc::StringBuilder::operator<<(&v74, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 2488) - *(_QWORD *)(a1 + 2480)) >> 3) - 5);
  v61 = SHIBYTE(v60->__r_.__value_.__r.__words[2]);
  if (v61 >= 0)
    v62 = 22;
  else
    v62 = (v60->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v61 >= 0)
    v63 = HIBYTE(v60->__r_.__value_.__r.__words[2]);
  else
    v63 = v60->__r_.__value_.__l.__size_;
  if (v62 - v63 >= 5)
  {
    if (v61 >= 0)
      v65 = v60;
    else
      v65 = (std::string *)v60->__r_.__value_.__r.__words[0];
    v66 = (std::string::size_type)v65 + v63;
    if ((char *)v65 + v63 > " more" || v66 + 5 <= (unint64_t)" more")
    {
      *(_BYTE *)(v66 + 4) = 101;
      *(_DWORD *)v66 = 1919905056;
      v67 = v63 + 5;
      if (SHIBYTE(v60->__r_.__value_.__r.__words[2]) < 0)
      {
        v60->__r_.__value_.__l.__size_ = v67;
        v65->__r_.__value_.__s.__data_[v67] = 0;
        v64 = a2;
        if (&v74 != a2)
          goto LABEL_161;
        goto LABEL_172;
      }
      *((_BYTE *)&v60->__r_.__value_.__s + 23) = v67 & 0x7F;
      v65->__r_.__value_.__s.__data_[v67] = 0;
LABEL_160:
      v64 = a2;
      if (&v74 == a2)
        goto LABEL_172;
      goto LABEL_161;
    }
LABEL_177:
    __break(1u);
LABEL_178:
    abort();
  }
  std::string::__grow_by_and_replace(v60, v62, v63 - v62 + 5, v63, v63, 0, 5uLL, " more");
  v64 = a2;
  if (&v74 == a2)
    goto LABEL_172;
LABEL_161:
  if (SHIBYTE(v64->__r_.__value_.__r.__words[2]) < 0)
  {
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v74;
    else
      v68 = (std::string *)v74.__r_.__value_.__r.__words[0];
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v69 = HIBYTE(v74.__r_.__value_.__r.__words[2]);
    else
      v69 = v74.__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v64, (const std::string::value_type *)v68, v69);
  }
  else if ((*((_BYTE *)&v74.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v64, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else
  {
    *v64 = v74;
  }
LABEL_172:
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
}

std::string *rtc::StringBuilder::operator<<(std::string *a1, uint64_t a2)
{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%lu", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%llu", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

{
  int v3;
  size_t v4;
  void **p_src;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  std::string::size_type v10;
  BOOL v11;
  const std::string::value_type *v12;
  uint64_t v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  void **__src;
  size_t v21;
  unint64_t v22;
  char __str[32];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = snprintf(__str, 0x20uLL, "%lld", a2);
  if (v3 < 0)
LABEL_37:
    abort();
  v4 = v3;
  if (v3 > 0x16)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_src = (void **)operator new(v6 + 1);
    v21 = v4;
    v22 = v7 | 0x8000000000000000;
    __src = p_src;
  }
  else
  {
    HIBYTE(v22) = v3;
    p_src = (void **)&__src;
  }
  v8 = (char *)p_src + v4;
  if (p_src <= (void **)__str && (char *)p_src + v4 > __str)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if ((_DWORD)v4)
    memcpy(p_src, __str, v4);
  *v8 = 0;
  if (SHIBYTE(v22) < 0)
  {
    v12 = (const std::string::value_type *)__src;
    v10 = v21;
    v11 = v21 == 0;
    if (!__src && v21)
      goto LABEL_36;
  }
  else
  {
    v10 = HIBYTE(v22);
    v11 = HIBYTE(v22) == 0;
    v12 = (const std::string::value_type *)&__src;
  }
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    size = a1->__r_.__value_.__l.__size_;
    v14 = (a1->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v14 - size < v10)
    {
LABEL_20:
      std::string::__grow_by_and_replace(a1, v14, v10 - v14 + size, size, size, 0, v10, v12);
      if (SHIBYTE(v22) < 0)
        goto LABEL_32;
      return a1;
    }
  }
  else
  {
    v14 = 22;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (22 - v13 < v10)
      goto LABEL_20;
  }
  if (!v11)
  {
    v16 = a1;
    if ((v13 & 0x80) != 0)
    {
      v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
      v17 = (std::string::value_type *)(a1->__r_.__value_.__r.__words[0] + size);
      if (v17 > v12)
      {
LABEL_29:
        memmove(v17, v12, v10);
        v18 = size + v10;
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          a1->__r_.__value_.__l.__size_ = v18;
          v16->__r_.__value_.__s.__data_[v18] = 0;
          if ((SHIBYTE(v22) & 0x80000000) == 0)
            return a1;
          goto LABEL_32;
        }
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = v18 & 0x7F;
        v16->__r_.__value_.__s.__data_[v18] = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v17 = (char *)a1 + size;
      if ((char *)a1 + size > v12)
        goto LABEL_29;
    }
    if (&v17[v10] > v12)
      goto LABEL_36;
    goto LABEL_29;
  }
LABEL_31:
  if (SHIBYTE(v22) < 0)
LABEL_32:
    operator delete(__src);
  return a1;
}

void cricket::Connection::UpdateState(cricket::Connection *this, uint64_t a2)
{
  _BYTE *v2;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  cricket::Connection *v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  unint64_t v18;
  unint64_t v19;
  int *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  void (*v59)(_QWORD *, cricket::Connection *);
  std::string __p;
  char v61;
  std::string v62;
  std::string *p_p;
  std::string *v64;
  const char *v65;
  std::string **p_p_p;
  std::string v67;
  uint64_t v68;
  int v69;

  v2 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v2 || !*v2 || !*((_QWORD *)this + 32))
    return;
  v5 = 2 * *((_DWORD *)this + 604);
  if (v5 >= 60000)
    v5 = 60000;
  if (v5 <= 100)
    v6 = 100;
  else
    v6 = v5;
  {
    memset(&v67, 0, sizeof(v67));
    cricket::Connection::PrintPingsSinceLastResponse((uint64_t)this, &v67);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/"
                                                                 "ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
      v62.__r_.__value_.__l.__size_ = 7416;
      v62.__r_.__value_.__r.__words[2] = (std::string::size_type)&v61;
      cricket::Connection::ToString(this, &__p);
      p_p = &__p;
      v64 = &v62;
      v65 = ": UpdateState(), ms since last received response=";
      p_p_p = &p_p;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
  }
  if (!*((_DWORD *)this + 582))
  {
    v14 = *((_BYTE *)this + 2548)
        ? (cricket::Connection *)((char *)this + 2544)
        : (cricket::Connection *)&cricket::CONNECTION_WRITE_CONNECT_FAILURES;
    v15 = *(unsigned int *)v14;
    v16 = (__int128 *)*((_QWORD *)this + 310);
    v17 = (__int128 *)*((_QWORD *)this + 311);
    v18 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v17 - (char *)v16) >> 3);
    if (v18 >= v15)
    {
      v19 = (v15 - 1);
      if (v18 <= v19)
        goto LABEL_75;
      if (*((_QWORD *)v16 + 5 * v19 + 3) + v6 < a2)
      {
        v20 = (int *)((char *)this + 2536);
        if (!*((_BYTE *)this + 2540))
          v20 = (int *)&cricket::CONNECTION_WRITE_CONNECT_TIMEOUT;
        if (v17 != v16)
        {
          v21 = *v20;
          if (*((char *)v16 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
          }
          else
          {
            v22 = *v16;
            v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
            *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v22;
          }
          v23 = *((_QWORD *)v16 + 3);
          v69 = *((_DWORD *)v16 + 8);
          v68 = v23;
          v24 = v23 + v21;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          if (v24 < a2)
          {
            if (*((_BYTE *)this + 2548))
              v25 = (unsigned int *)((char *)this + 2544);
            else
              v25 = (unsigned int *)&cricket::CONNECTION_WRITE_CONNECT_FAILURES;
            v26 = *v25;
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              v67.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc"
                                                                         "/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/"
                                                                         "base/connection.cc";
              v67.__r_.__value_.__l.__size_ = 7609;
              v67.__r_.__value_.__r.__words[2] = (std::string::size_type)&v61;
              cricket::Connection::ToString(this, &v62);
              p_p = &v62;
              v64 = &v67;
              v65 = ": Unwritable after ";
              p_p_p = &p_p;
              __p.__r_.__value_.__r.__words[0] = v26;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v65;
              if (*((_QWORD *)this + 311) == *((_QWORD *)this + 310))
                goto LABEL_75;
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v27, v28, v29, v30, v31, v32, v33, **(_QWORD **)(*(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8) + 8));
              if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v62.__r_.__value_.__l.__data_);
            }
            cricket::Connection::set_write_state((uint64_t)this, 1);
          }
        }
      }
    }
  }
  if ((*((_DWORD *)this + 582) - 1) <= 1)
  {
    v34 = (int *)((char *)this + 2552);
    if (!*((_BYTE *)this + 2556))
      v34 = (int *)&cricket::CONNECTION_WRITE_TIMEOUT;
    v35 = (__int128 *)*((_QWORD *)this + 310);
    if (*((__int128 **)this + 311) != v35)
    {
      v36 = *v34;
      if (*((char *)v35 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
      }
      else
      {
        v37 = *v35;
        v67.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v37;
      }
      v38 = *((_QWORD *)v35 + 3);
      v69 = *((_DWORD *)v35 + 8);
      v68 = v38;
      v39 = v38 + v36;
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (v39 < a2)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
        {
LABEL_53:
          v47 = *((_DWORD *)this + 582);
          *((_DWORD *)this + 582) = 3;
          if (v47 != 3)
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
            {
              cricket::Connection::ToString(this, &v67);
              rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v67.__r_.__value_.__l.__data_);
            }
            v57 = (_QWORD *)*((_QWORD *)this + 4);
            for (*((_QWORD *)this + 6) = v57; v57 != (_QWORD *)((char *)this + 24); v57 = (_QWORD *)*((_QWORD *)this + 6))
            {
              v59 = (void (*)(_QWORD *, cricket::Connection *))v57[2];
              v58 = v57 + 2;
              *((_QWORD *)this + 6) = *(v58 - 1);
              v59(v58, this);
            }
          }
          goto LABEL_54;
        }
        cricket::Connection::ToString(this, &v67);
        if (*((_QWORD *)this + 311) != *((_QWORD *)this + 310))
        {
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          goto LABEL_53;
        }
LABEL_75:
        __break(1u);
        return;
      }
    }
  }
LABEL_54:
  cricket::Connection::UpdateReceiving((uint64_t)this, a2);
  v48 = *((_QWORD *)this + 306);
  if (v48 <= *((_QWORD *)this + 308))
    v48 = *((_QWORD *)this + 308);
  if (*((_QWORD *)this + 307) > v48)
    v48 = *((_QWORD *)this + 307);
  if (v48 < 1)
  {
    if (*((_DWORD *)this + 582) != 3 || *((_QWORD *)this + 322) + 10000 >= a2)
      return;
LABEL_65:
    (*(void (**)(_QWORD, cricket::Connection *))(**((_QWORD **)this + 32) + 200))(*((_QWORD *)this + 32), this);
    return;
  }
  if (v48 + 30000 >= a2)
    return;
  v49 = *((_QWORD *)this + 310);
  if (v49 != *((_QWORD *)this + 311))
  {
    if (*(_QWORD *)(v49 + 24) + 30000 >= a2)
      return;
    goto LABEL_65;
  }
  if (v48 + *(int *)(*((_QWORD *)this + 332) + 40) < a2)
    goto LABEL_65;
}

void cricket::Connection::ReceivedPingResponse(uint64_t a1, int a2, unsigned int a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  long double v8;
  long double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  std::string __p;

  if (a4 && *(_DWORD *)(a1 + 2344) < a3)
    *(_DWORD *)(a1 + 2344) = a3;
  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v7 = v6 / 1000000;
  *(_QWORD *)(a1 + 2424) += a2;
  *(_DWORD *)(a1 + 2432) = a2;
  *(_BYTE *)(a1 + 2436) = 1;
  if (*(_BYTE *)(a1 + 2704))
  {
    v8 = exp((double)(*(_QWORD *)(a1 + 2696) - v7) / *(double *)(a1 + 2664));
    v9 = v8 / (v8 + 1.0);
    v10 = *(double *)(a1 + 2672);
    v11 = (double)a2 - v10;
    *(long double *)(a1 + 2672) = v9 * (double)a2 + (1.0 - v9) * v10;
    *(long double *)(a1 + 2688) = v9 * v9 + (1.0 - v9) * (1.0 - v9) * *(double *)(a1 + 2688);
    v12 = *(double *)(a1 + 2680);
    v13 = v11 * (v11 * v9) + (1.0 - v9) * v12;
    if (v12 == INFINITY)
      v13 = v11 * v11;
    *(double *)(a1 + 2680) = v13;
  }
  else
  {
    *(double *)(a1 + 2672) = (double)a2;
  }
  *(_QWORD *)(a1 + 2696) = v7;
  *(_BYTE *)(a1 + 2704) = 1;
  v14 = *(_QWORD *)(a1 + 2488);
  v15 = *(_QWORD *)(a1 + 2480);
  while (v14 != v15)
  {
    if (*(char *)(v14 - 17) < 0)
      operator delete(*(void **)(v14 - 40));
    v14 -= 40;
  }
  *(_QWORD *)(a1 + 2488) = v15;
  *(_QWORD *)(a1 + 2464) = v7;
  cricket::Connection::UpdateReceiving(a1, v7);
  v16 = *(_DWORD *)(a1 + 2328);
  *(_DWORD *)(a1 + 2328) = 0;
  if (v16)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    {
      cricket::Connection::ToString((cricket::Connection *)a1, &__p);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v24 = *(_QWORD *)(a1 + 32);
    for (*(_QWORD *)(a1 + 48) = v24; v24 != a1 + 24; v24 = *(_QWORD *)(a1 + 48))
    {
      v26 = *(void (**)(uint64_t, uint64_t))(v24 + 16);
      v25 = v24 + 16;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(v25 - 8);
      v26(v25, a1);
    }
  }
  v27 = *(_DWORD *)(a1 + 2560);
  *(_DWORD *)(a1 + 2560) = 2;
  if (v27 != 2 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    cricket::Connection::ToString((cricket::Connection *)a1, &__p);
    rtc::webrtc_logging_impl::Log("\r\n\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v35 = *(_DWORD *)(a1 + 2420);
  if (v35 >= 1)
    a2 = (int)(((double)a2 + (double)*(int *)(a1 + 2416) * 3.0) * 0.25);
  *(_DWORD *)(a1 + 2416) = a2;
  *(_DWORD *)(a1 + 2420) = v35 + 1;
}

uint64_t cricket::Connection::ToLogDescription(cricket::Connection *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;

  if (*((_BYTE *)this + 2624))
    return (uint64_t)this + 2596;
  v3 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this);
  v4 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 24))(this);
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 24))(*((_QWORD *)this + 32));
  v5 = *(_DWORD *)(v3 + 208);
  if (v5 == 2)
    v6 = 2;
  else
    v6 = 3;
  if (v5 == 1)
    v7 = 1;
  else
    v7 = v6;
  if (v5)
    v8 = v7;
  else
    v8 = 0;
  v9 = *(_DWORD *)(v4 + 208);
  if (v9 == 2)
    v10 = 2;
  else
    v10 = 3;
  if (v9 == 1)
    v10 = 1;
  if (v9)
    v11 = v10;
  else
    v11 = 0;
  if (!*((_BYTE *)this + 2624))
    *((_BYTE *)this + 2624) = 1;
  *((_DWORD *)this + 649) = v8;
  *((_QWORD *)this + 325) = 0;
  *((_DWORD *)this + 652) = 0;
  *((_DWORD *)this + 653) = v11;
  *((_QWORD *)this + 327) = 0;
  v12 = (unsigned __int16 *)(v3 + 56);
  if (*(char *)(v3 + 79) < 0)
  {
    v13 = *(_QWORD *)(v3 + 64);
    if (v13 < 0)
      goto LABEL_102;
    v12 = *(unsigned __int16 **)v12;
    if (v13 && v12 == 0)
      goto LABEL_102;
  }
  else
  {
    v13 = *(unsigned __int8 *)(v3 + 79);
  }
  if (v13 != 6)
  {
    if (v13 == 3)
    {
      if (*v12 == (unsigned __int16)cricket::UDP_PROTOCOL_NAME && *((_BYTE *)v12 + 2) == 112)
      {
        *((_DWORD *)this + 650) = 1;
        v21 = *(_DWORD *)(result + 272);
        if (v21 <= 63)
          goto LABEL_62;
      }
      else if (*v12 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME && *((_BYTE *)v12 + 2) == 112)
      {
        *((_DWORD *)this + 650) = 2;
        v21 = *(_DWORD *)(result + 272);
        if (v21 <= 63)
          goto LABEL_62;
      }
      else
      {
        v17 = bswap32(*v12) >> 16;
        v18 = bswap32(*(unsigned __int16 *)"tls") >> 16;
        if (v17 == v18)
        {
          v19 = *((unsigned __int8 *)v12 + 2) - cricket::TLS_PROTOCOL_NAME[2];
        }
        else if (v17 < v18)
        {
          v19 = -1;
        }
        else
        {
          v19 = 1;
        }
        *((_DWORD *)this + 650) = 4 * (v19 == 0);
        v21 = *(_DWORD *)(result + 272);
        if (v21 <= 63)
          goto LABEL_62;
      }
    }
    else
    {
      *((_DWORD *)this + 650) = 0;
      v21 = *(_DWORD *)(result + 272);
      if (v21 <= 63)
        goto LABEL_62;
    }
LABEL_51:
    if (v21 > 255)
    {
      if (v21 != 256 && v21 != 512)
        goto LABEL_96;
    }
    else if (v21 != 64 && v21 != 128)
    {
LABEL_96:
      v21 = 0;
      goto LABEL_65;
    }
LABEL_64:
    v21 = 5;
    goto LABEL_65;
  }
  if (*(_DWORD *)v12 ^ *(_DWORD *)"ssltcp" | v12[2] ^ *(unsigned __int16 *)"cp")
    v20 = 0;
  else
    v20 = 3;
  *((_DWORD *)this + 650) = v20;
  v21 = *(_DWORD *)(result + 272);
  if (v21 > 63)
    goto LABEL_51;
LABEL_62:
  switch(v21)
  {
    case 1:
      break;
    case 2:
      v21 = 3;
      break;
    case 4:
      goto LABEL_64;
    case 8:
      v21 = 4;
      break;
    case 16:
      v21 = 2;
      break;
    default:
      goto LABEL_96;
  }
LABEL_65:
  *((_DWORD *)this + 651) = v21;
  v22 = *(_DWORD *)(v3 + 112);
  if (v22 == 2)
    v23 = 1;
  else
    v23 = 2 * (v22 == 30);
  *((_DWORD *)this + 652) = v23;
  v24 = *(_DWORD *)(v4 + 112);
  if (v24 == 2)
    v25 = 1;
  else
    v25 = 2 * (v24 == 30);
  *((_DWORD *)this + 654) = v25;
  v26 = (unsigned __int16 *)(v3 + 32);
  if ((*(char *)(v3 + 55) & 0x80000000) == 0)
  {
    v27 = *(unsigned __int8 *)(v3 + 55);
    goto LABEL_76;
  }
  v27 = *(_QWORD *)(v3 + 40);
  if (v27 < 0 || (v26 = *(unsigned __int16 **)v26, v27) && !v26)
  {
LABEL_102:
    __break(1u);
    return result;
  }
LABEL_76:
  if (v27 == 6)
  {
    if (*(_DWORD *)v26 ^ *(_DWORD *)"ssltcp" | v26[2] ^ *(unsigned __int16 *)"cp")
      v33 = 0;
    else
      v33 = 3;
    *((_DWORD *)this + 655) = v33;
    return (uint64_t)this + 2596;
  }
  else if (v27 == 3)
  {
    if (*v26 == (unsigned __int16)cricket::UDP_PROTOCOL_NAME && *((_BYTE *)v26 + 2) == 112)
    {
      *((_DWORD *)this + 655) = 1;
      return (uint64_t)this + 2596;
    }
    else if (*v26 == (unsigned __int16)cricket::TCP_PROTOCOL_NAME && *((_BYTE *)v26 + 2) == 112)
    {
      *((_DWORD *)this + 655) = 2;
      return (uint64_t)this + 2596;
    }
    else
    {
      v30 = bswap32(*v26) >> 16;
      v31 = bswap32(*(unsigned __int16 *)"tls") >> 16;
      if (v30 == v31)
      {
        v32 = *((unsigned __int8 *)v26 + 2) - cricket::TLS_PROTOCOL_NAME[2];
      }
      else if (v30 < v31)
      {
        v32 = -1;
      }
      else
      {
        v32 = 1;
      }
      *((_DWORD *)this + 655) = 4 * (v32 == 0);
      return (uint64_t)this + 2596;
    }
  }
  else
  {
    *((_DWORD *)this + 655) = 0;
    return (uint64_t)this + 2596;
  }
}

void cricket::Connection::OnConnectionRequestResponse(cricket::Connection *this, cricket::StunRequest *a2, cricket::StunMessage *a3)
{
  int *v3;
  std::string::size_type size;
  std::string::size_type p_s2;
  uint64_t v9;
  void **v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  _BYTE *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned __int16 *v54;
  unsigned __int16 *v55;
  unsigned __int16 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, cricket::Connection *);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  std::string *v114;
  char v115;
  const std::string::value_type *v116;
  size_t v117;
  uint64_t v118;
  signed __int8 v119;
  __int128 v120;
  const std::string::value_type *v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void **v130;
  _QWORD *v131;
  void (*v132)(_QWORD *, cricket::Connection *);
  std::string *v133;
  unsigned __int8 *v134;
  int v135;
  uint64_t v136;
  int v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  char v142;
  char v143;
  char v144;
  char v145;
  int v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  char v151;
  char v152;
  char v153;
  char v154;
  int v155;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  cricket::StunMessage *v160;
  char v161;
  void *__p[2];
  int64_t v163;
  void *v164[2];
  char v165;
  std::string v166;
  char v167;
  std::string __s2;
  _QWORD v169[2];
  _QWORD v170[3];
  _QWORD *v171;
  std::string v172;

  p_s2 = *((_DWORD *)this + 582) != 0;
  if (rtc::g_clock)
  {
    LODWORD(v9) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v10 = (void **)((int)v9 / 1000000 - *((_DWORD *)a2 + 6));
    goto LABEL_32;
  memset(&v172, 0, sizeof(v172));
  cricket::Connection::PrintPingsSinceLastResponse((uint64_t)this, &v172);
  if (!v11 && (rtc::LogMessage::streams_empty_ & 1) != 0)
    goto LABEL_31;
  __s2.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/Thi"
                                                              "rdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc";
  __s2.__r_.__value_.__l.__size_ = p_s2 | 0x2C58;
  __s2.__r_.__value_.__r.__words[2] = (std::string::size_type)&v167;
  cricket::Connection::ToString(this, &v166);
  v169[0] = &v166;
  v169[1] = &__s2;
  v170[0] = ": Received ";
  v170[1] = v169;
  p_s2 = (std::string::size_type)v164;
  cricket::StunMethodToString((cricket *)*((unsigned __int16 *)a3 + 16), (unint64_t)v164);
  v170[2] = v164;
  v171 = v170;
  v19 = *((_QWORD *)a2 + 2);
  v20 = (unsigned __int8 *)(v19 + 40);
  if (*(char *)(v19 + 63) < 0)
  {
    size = *(_QWORD *)(v19 + 48);
    if ((size & 0x8000000000000000) != 0)
      goto LABEL_182;
    v20 = *(unsigned __int8 **)v20;
    if (size)
    {
      if (!v20)
        goto LABEL_182;
    }
    if (size >= 0x3FFFFFFFFFFFFFFCLL)
LABEL_191:
      abort();
  }
  else
  {
    size = *(unsigned __int8 *)(v19 + 63);
  }
  p_s2 = 2 * size;
  if (size >= 0xC)
  {
    v22 = (p_s2 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((p_s2 | 7) != 0x17)
      v22 = p_s2 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    __p[1] = (void *)(2 * size);
    v163 = v23 | 0x8000000000000000;
    __p[0] = v21;
    goto LABEL_24;
  }
  HIBYTE(v163) = 2 * size;
  v21 = __p;
  if (size)
  {
LABEL_24:
    bzero(v21, 2 * size);
    *((_BYTE *)v21 + 2 * size) = 0;
    v24 = __p;
    if (v163 < 0)
      v24 = (void **)__p[0];
    v25 = (char *)v24 + 1;
    do
    {
      v26 = *v20++;
      v25 += 2;
      --size;
    }
    while (size);
    goto LABEL_28;
  }
  LOBYTE(__p[0]) = 0;
LABEL_28:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v12, v13, v14, v15, v16, v17, v18, **(_QWORD **)(v171[1] + 8));
  if (SHIBYTE(v163) < 0)
  {
    operator delete(__p[0]);
    if ((v165 & 0x80000000) == 0)
    {
LABEL_30:
      if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
      goto LABEL_37;
    }
  }
  else if ((v165 & 0x80000000) == 0)
  {
    goto LABEL_30;
  }
  operator delete(v164[0]);
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_38;
LABEL_32:
    v3 = &v155;
    v27 = *((_QWORD *)a2 + 2);
    if ((*(char *)(v27 + 63) & 0x80000000) == 0)
      goto LABEL_33;
LABEL_39:
    std::string::__init_copy_ctor_external(&__s2, *(const std::string::value_type **)(v27 + 40), *(_QWORD *)(v27 + 48));
    v28 = *((_QWORD *)this + 310);
    v20 = (unsigned __int8 *)*((_QWORD *)this + 311);
    if ((unsigned __int8 *)v28 == v20)
      goto LABEL_69;
LABEL_40:
    if ((__s2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s2.__r_.__value_.__r.__words[2]);
    else
      size = __s2.__r_.__value_.__l.__size_;
    if ((*((_BYTE *)&__s2.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      p_s2 = (std::string::size_type)&__s2;
      while (1)
      {
        v29 = *(unsigned __int8 *)(v28 + 23);
        if ((v29 & 0x80u) == 0)
          v30 = *(unsigned __int8 *)(v28 + 23);
        else
          v30 = *(_QWORD *)(v28 + 8);
        if (v30 == size)
        {
          if ((v29 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v28, &__s2, *(_QWORD *)(v28 + 8)))
              goto LABEL_69;
          }
          else
          {
            if (!*(_BYTE *)(v28 + 23))
              goto LABEL_69;
            v31 = 0;
            while (*(unsigned __int8 *)(v28 + v31) == __s2.__r_.__value_.__s.__data_[v31])
            {
              if (v29 == ++v31)
                goto LABEL_69;
            }
          }
        }
        v28 += 40;
        if ((unsigned __int8 *)v28 == v20)
          goto LABEL_72;
      }
    }
    p_s2 = __s2.__r_.__value_.__r.__words[0];
    while (1)
    {
      v32 = *(unsigned __int8 *)(v28 + 23);
      if ((v32 & 0x80u) == 0)
        v33 = *(unsigned __int8 *)(v28 + 23);
      else
        v33 = *(_QWORD *)(v28 + 8);
      if (v33 == size)
      {
        if ((v32 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v28, (const void *)p_s2, *(_QWORD *)(v28 + 8)))
            goto LABEL_69;
        }
        else
        {
          if (!*(_BYTE *)(v28 + 23))
            goto LABEL_69;
          v34 = 0;
          while (*(unsigned __int8 *)(v28 + v34) == *(unsigned __int8 *)(p_s2 + v34))
          {
            if (v32 == ++v34)
              goto LABEL_69;
          }
        }
      }
      v28 += 40;
      if ((unsigned __int8 *)v28 == v20)
        goto LABEL_72;
    }
  }
LABEL_31:
  if ((SHIBYTE(v172.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_32;
LABEL_38:
  operator delete(v172.__r_.__value_.__l.__data_);
  v3 = &v155;
  v27 = *((_QWORD *)a2 + 2);
  if (*(char *)(v27 + 63) < 0)
    goto LABEL_39;
LABEL_33:
  __s2 = *(std::string *)(v27 + 40);
  v28 = *((_QWORD *)this + 310);
  v20 = (unsigned __int8 *)*((_QWORD *)this + 311);
  if ((unsigned __int8 *)v28 != v20)
    goto LABEL_40;
LABEL_69:
  if ((unsigned __int8 *)v28 == v20)
  {
LABEL_72:
    v36 = 0;
    v35 = 0;
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_73:
      if ((__s2.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0
        || __s2.__r_.__value_.__l.__size_ && !__s2.__r_.__value_.__r.__words[0])
      {
        goto LABEL_182;
      }
    }
  }
  else
  {
    v35 = *(_DWORD *)(v28 + 32);
    v36 = 1;
    if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_73;
  }
  cricket::Connection::ReceivedPingResponse((uint64_t)this, (int)v10, v35, v36);
  ++*((_QWORD *)this + 155);
  v37 = *((_QWORD *)this + 329);
  if (v37)
    webrtc::IceEventLog::LogCandidatePairEvent(v37, 3, *((_DWORD *)this + 60), *((_DWORD *)a3 + 16));
  if (*(_WORD *)(*((_QWORD *)a2 + 2) + 32) != 1)
    goto LABEL_117;
  if (*((_BYTE *)this + 2641))
  {
    v38 = (_BYTE *)*((_QWORD *)this + 31);
    if (!v38)
      goto LABEL_113;
  }
  else
  {
    v39 = (uint64_t *)*((_QWORD *)a3 + 1);
    v40 = (uint64_t *)*((_QWORD *)a3 + 2);
    if (v39 == v40)
    {
LABEL_85:
      *((_WORD *)this + 1320) = 256;
      v38 = (_BYTE *)*((_QWORD *)this + 31);
      if (!v38)
        goto LABEL_113;
    }
    else
    {
      while (1)
      {
        v41 = *v39;
        if (*(unsigned __int16 *)(*v39 + 8) == 49241)
          break;
        if (++v39 == v40)
          goto LABEL_85;
      }
      v42 = **(_WORD ***)(v41 + 16);
      if (*(_WORD **)(*(_QWORD *)(v41 + 16) + 8) == v42)
        goto LABEL_182;
      *((_WORD *)this + 1320) = (*v42 != 0) | 0x100;
      v38 = (_BYTE *)*((_QWORD *)this + 31);
      if (!v38)
        goto LABEL_113;
    }
  }
  if (*v38)
  {
    v43 = *((_QWORD *)this + 32);
    if (v43)
    {
      v44 = (unsigned __int8 **)*((_QWORD *)a3 + 1);
      v45 = (unsigned __int8 **)*((_QWORD *)a3 + 2);
      if (v44 == v45)
      {
LABEL_94:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_113;
      }
      else
      {
        while (1)
        {
          v20 = *v44;
          if (*((_WORD *)*v44 + 4) == 32)
            break;
          if (++v44 == v45)
            goto LABEL_94;
        }
        v53 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 136))(v43);
        v54 = (unsigned __int16 *)v53[1];
        if ((unsigned __int16 *)*v53 != v54)
        {
          p_s2 = (std::string::size_type)(v20 + 16);
          v10 = (void **)((char *)this + 264);
          size = (std::string::size_type)this + 24;
          v55 = (unsigned __int16 *)(*v53 + 80);
          do
          {
            if (rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)v55, (const rtc::SocketAddress *)(v20 + 16))
              && v55[28] == *((unsigned __int16 *)v20 + 36))
            {
              p_s2 = (std::string::size_type)(v55 - 40);
              if (!cricket::Candidate::operator==((unsigned __int8 *)this + 264, (unsigned __int8 *)v55 - 80))
              {
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                {
                  cricket::Connection::ToString(this, &v172);
                  rtc::webrtc_logging_impl::Log("\r\n\t", v57, v58, v59, v60, v61, v62, v63, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
                  if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v172.__r_.__value_.__l.__data_);
                }
                cricket::Candidate::operator=((std::string *)this + 11, (std::string *)(v55 - 40));
                v64 = *((_QWORD *)this + 4);
                for (*((_QWORD *)this + 6) = v64; v64 != size; v64 = *((_QWORD *)this + 6))
                {
                  v66 = *(void (**)(uint64_t, cricket::Connection *))(v64 + 16);
                  v65 = v64 + 16;
                  *((_QWORD *)this + 6) = *(_QWORD *)(v65 - 8);
                  v66(v65, this);
                }
              }
              goto LABEL_113;
            }
            v56 = v55 + 176;
            v55 += 216;
          }
          while (v56 != v54);
        }
        v67 = *((_QWORD *)a2 + 2);
        v68 = *(_QWORD *)(v67 + 8);
        v69 = *(_QWORD *)(v67 + 16);
        if (v68 != v69)
        {
          while (*(_WORD *)(*(_QWORD *)v68 + 8) != 36)
          {
            v68 += 8;
            if (v68 == v69)
              goto LABEL_111;
          }
          v109 = *(_DWORD *)(*(_QWORD *)v68 + 12);
          memset(&v172, 0, sizeof(v172));
          {
            v10 = (void **)((char *)this + 264);
            if (*((char *)this + 287) < 0)
              operator delete(*v10);
            *(_OWORD *)v10 = *(_OWORD *)&v172.__r_.__value_.__l.__data_;
            *((_QWORD *)this + 35) = *((_QWORD *)&v172.__r_.__value_.__l + 2);
            *((_DWORD *)this + 118) = 2;
            p_s2 = (std::string::size_type)this + 344;
            v114 = (std::string *)((char *)this + 544);
            v115 = *((_BYTE *)this + 367);
            if (*((char *)this + 567) < 0)
            {
              if (v115 >= 0)
                v116 = (char *)this + 344;
              else
                v116 = (const std::string::value_type *)*((_QWORD *)this + 43);
              if (v115 >= 0)
                v117 = *((unsigned __int8 *)this + 367);
              else
                v117 = *((_QWORD *)this + 44);
              std::string::__assign_no_alias<false>(v114, v116, v117);
            }
            else if ((*((_BYTE *)this + 367) & 0x80) != 0)
            {
              std::string::__assign_no_alias<true>(v114, *((char **)this + 43), *((_QWORD *)this + 44));
            }
            else
            {
              *(_OWORD *)&v114->__r_.__value_.__l.__data_ = *(_OWORD *)p_s2;
              *((_QWORD *)this + 70) = *((_QWORD *)this + 45);
            }
            *((_DWORD *)this + 144) = *((_DWORD *)this + 94);
            size = (std::string::size_type)this + 380;
            *(_OWORD *)((char *)this + 580) = *(_OWORD *)((char *)this + 380);
            *((_WORD *)this + 300) = *((_WORD *)this + 200);
            *((_BYTE *)this + 608) = *((_BYTE *)this + 408);
            *((_DWORD *)this + 151) = *((_DWORD *)this + 101);
            v118 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 56))(*((_QWORD *)this + 32));
            cricket::Candidate::ComputeFoundation((cricket::Connection *)((char *)this + 264), (cricket::Connection *)((char *)this + 344), v118);
            *((_DWORD *)this + 104) = v109;
            if ((unsigned __int8 *)p_s2 == v20 + 16)
              goto LABEL_184;
            v119 = v20[39];
            if (*((char *)this + 367) < 0)
            {
              if (v119 >= 0)
                v121 = (const std::string::value_type *)(v20 + 16);
              else
                v121 = (const std::string::value_type *)*((_QWORD *)v20 + 2);
              if (v119 >= 0)
                v122 = v20[39];
              else
                v122 = *((_QWORD *)v20 + 3);
              std::string::__assign_no_alias<false>((std::string *)((char *)this + 344), v121, v122);
              goto LABEL_184;
            }
            if ((v20[39] & 0x80) == 0)
            {
              v120 = *((_OWORD *)v20 + 1);
              *((_QWORD *)this + 45) = *((_QWORD *)v20 + 4);
              *(_OWORD *)p_s2 = v120;
              goto LABEL_184;
            }
            goto LABEL_183;
          }
          v133 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v110, v111, v112, v113, v136);
          cricket::Connection::MaybeSetRemoteIceParametersAndGeneration(v133, v134, v135);
          return;
        }
LABEL_111:
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_113;
      }
      rtc::webrtc_logging_impl::Log("\r\t", v46, v47, v48, v49, v50, v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      goto LABEL_113;
    }
  }
  while (1)
  {
LABEL_113:
    if (*(_BYTE *)(*((_QWORD *)this + 332) + 29))
    {
      if (*((_BYTE *)this + 2641))
      {
        cricket::StunMessage::Clone(*((cricket::StunMessage **)a2 + 2), (std::string **)&v172);
        v70 = *((_QWORD *)this + 331);
        *((_QWORD *)this + 331) = v172.__r_.__value_.__r.__words[0];
        if (v70)
          (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
      }
    }
LABEL_117:
    v71 = *((_QWORD *)a2 + 2);
    v72 = *(uint64_t **)(v71 + 8);
    v73 = *(uint64_t **)(v71 + 16);
    if (v72 != v73)
    {
      while (1)
      {
        v74 = *v72;
        if (*(unsigned __int16 *)(*v72 + 8) == 49244)
          break;
        if (++v72 == v73)
        {
          v74 = 0;
          break;
        }
      }
      v75 = *((_QWORD *)a3 + 1);
      v76 = *((_QWORD *)a3 + 2);
      if (v75 != v76)
        goto LABEL_122;
LABEL_135:
      a3 = 0;
      if (!*((_BYTE *)this + 2784))
        goto LABEL_136;
      goto LABEL_126;
    }
    v74 = 0;
    v75 = *((_QWORD *)a3 + 1);
    v76 = *((_QWORD *)a3 + 2);
    if (v75 == v76)
      goto LABEL_135;
LABEL_122:
    while (1)
    {
      a3 = *(cricket::StunMessage **)v75;
      if (*(unsigned __int16 *)(*(_QWORD *)v75 + 8) == 49245)
        break;
      v75 += 8;
      if (v75 == v76)
      {
        a3 = 0;
        break;
      }
    }
    if (!*((_BYTE *)this + 2784))
    {
LABEL_136:
      if (a3 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v86, v87, v88, v89, v90, v91, v92, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      goto LABEL_154;
    }
LABEL_126:
    if (!v74 || !a3)
      break;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v77, v78, v79, v80, v81, v82, v83, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (*((_BYTE *)this + 2784))
    {
      v155 = 0;
      v159 = 0;
      v157 = 0;
      v158 = 0;
      v156 = 0;
      *(_QWORD *)((char *)v3 + 29) = 0;
      v160 = a3;
      v161 = 1;
      v84 = *((_QWORD *)this + 347);
      if (v84)
      {
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v84 + 48))(v84, &v155);
        if (SHIBYTE(v158) < 0)
        {
          v85 = v156;
          goto LABEL_153;
        }
        goto LABEL_154;
      }
      goto LABEL_190;
    }
LABEL_182:
    __break(1u);
LABEL_183:
    std::string::__assign_no_alias<true>((_QWORD *)p_s2, *((char **)v20 + 2), *((_QWORD *)v20 + 3));
LABEL_184:
    *((_DWORD *)this + 94) = *((_DWORD *)v20 + 12);
    *(_OWORD *)size = *(_OWORD *)(v20 + 52);
    *((_WORD *)this + 200) = *((_WORD *)v20 + 36);
    *((_BYTE *)this + 408) = v20[80];
    *((_DWORD *)this + 101) = *((_DWORD *)v20 + 19);
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      p_s2 = (std::string::size_type)&v172;
      cricket::Connection::ToString(this, &v172);
      rtc::webrtc_logging_impl::Log("\r\n\t", v123, v124, v125, v126, v127, v128, v129, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
      if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v172.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD, void **))(**((_QWORD **)this + 32) + 256))(*((_QWORD *)this + 32), v10);
    v10 = (void **)((char *)this + 24);
    v130 = (void **)*((_QWORD *)this + 4);
    *((_QWORD *)this + 6) = v130;
    if (v130 != (void **)((char *)this + 24))
    {
      do
      {
        v132 = (void (*)(_QWORD *, cricket::Connection *))v130[2];
        v131 = v130 + 2;
        *((_QWORD *)this + 6) = *(v131 - 1);
        v132(v131, this);
        v130 = (void **)*((_QWORD *)this + 6);
      }
      while (v130 != v10);
    }
  }
  if (v74)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v93, v94, v95, v96, v97, v98, v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (*((_BYTE *)this + 2784))
    {
      v151 = 0;
      v150 = 0;
      v146 = 1;
      v148 = 0;
      v149 = 0;
      v147 = 0;
      v152 = 0;
      v153 = 0;
      v154 = 0;
      v100 = *((_QWORD *)this + 347);
      if (v100)
      {
        (*(void (**)(uint64_t, int *))(*(_QWORD *)v100 + 48))(v100, &v146);
        if (SHIBYTE(v149) < 0)
        {
          v85 = v147;
          goto LABEL_153;
        }
        goto LABEL_154;
      }
      goto LABEL_190;
    }
    goto LABEL_182;
  }
  if (!a3)
    goto LABEL_154;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v101, v102, v103, v104, v105, v106, v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
  if (!*((_BYTE *)this + 2784))
    goto LABEL_182;
  v142 = 0;
  v141 = 0;
  v137 = 10;
  v139 = 0;
  v140 = 0;
  v138 = 0;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v108 = *((_QWORD *)this + 347);
  if (!v108)
  {
LABEL_190:
    std::__throw_bad_function_call[abi:sn180100]();
    goto LABEL_191;
  }
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v108 + 48))(v108, &v137);
  if (SHIBYTE(v140) < 0)
  {
    v85 = v138;
LABEL_153:
    operator delete(v85);
  }
LABEL_154:
  if (SHIBYTE(__s2.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s2.__r_.__value_.__l.__data_);
}

std::string *cricket::Connection::MaybeSetRemoteIceParametersAndGeneration(std::string *result, unsigned __int8 *a2, int a3)
{
  unsigned __int8 *v4;
  std::string *v5;
  const void **v6;
  size_t v7;
  size_t v8;
  std::string::pointer data;
  uint64_t v10;
  signed __int8 v11;
  uint64_t v12;
  char *v13;
  std::string::value_type *v14;
  uint64_t v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  size_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  std::string::pointer v22;
  char *v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;

  v4 = a2;
  v5 = result;
  v6 = (const void **)&result[35].__r_.__value_.__r.__words[2];
  v7 = result[36].__r_.__value_.__s.__data_[15];
  v8 = result[36].__r_.__value_.__r.__words[0];
  if ((v7 & 0x80u) == 0)
    data = (std::string::pointer)result[36].__r_.__value_.__s.__data_[15];
  else
    data = result[36].__r_.__value_.__l.__data_;
  v10 = a2[23];
  v11 = v10;
  v12 = *((_QWORD *)a2 + 1);
  if ((v10 & 0x80u) == 0)
    v13 = (char *)a2[23];
  else
    v13 = (char *)*((_QWORD *)a2 + 1);
  if (data != v13)
    goto LABEL_27;
  if ((v10 & 0x80u) != 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v7 & 0x80) != 0)
  {
    result = (std::string *)memcmp(*v6, a2, v8);
    if ((_DWORD)result)
      goto LABEL_27;
  }
  else if (result[36].__r_.__value_.__s.__data_[15])
  {
    v14 = &result[35].__r_.__value_.__s.__data_[16];
    v15 = result[36].__r_.__value_.__s.__data_[15];
    while (*v14 == *a2)
    {
      ++v14;
      ++a2;
      if (!--v15)
        goto LABEL_17;
    }
    goto LABEL_27;
  }
LABEL_17:
  if (v5[37].__r_.__value_.__s.__data_[15] < 0)
  {
    if (v5[37].__r_.__value_.__r.__words[0])
      goto LABEL_27;
  }
  else if (v5[37].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_27;
  }
  v16 = (const std::string::value_type *)(v4 + 24);
  if ((char)v4[47] < 0)
  {
    v17 = *((_QWORD *)v4 + 4);
    if ((v17 & 0x8000000000000000) != 0 || (v16 = *(const std::string::value_type **)v16, v17) && !v16)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v17 = v4[47];
  }
  result = std::string::__assign_external((std::string *)((char *)v5 + 880), v16, v17);
  v7 = v5[36].__r_.__value_.__s.__data_[15];
  v8 = v5[36].__r_.__value_.__r.__words[0];
  v10 = v4[23];
  v12 = *((_QWORD *)v4 + 1);
  v11 = v4[23];
LABEL_27:
  if ((v7 & 0x80u) == 0)
    v18 = v7;
  else
    v18 = v8;
  if (v11 >= 0)
    v19 = v10;
  else
    v19 = v12;
  if (v18 != v19)
    return result;
  if (v11 >= 0)
    v20 = v4;
  else
    v20 = *(unsigned __int8 **)v4;
  if ((v7 & 0x80) != 0)
  {
    result = (std::string *)memcmp(*v6, v20, v8);
    if ((_DWORD)result)
      return result;
LABEL_43:
    v21 = v5[37].__r_.__value_.__s.__data_[15];
    if ((v21 & 0x80u) == 0)
      v22 = (std::string::pointer)v5[37].__r_.__value_.__s.__data_[15];
    else
      v22 = v5[37].__r_.__value_.__l.__data_;
    v23 = (char *)v4[47];
    v24 = (char)v23;
    if ((char)v23 < 0)
      v23 = (char *)*((_QWORD *)v4 + 4);
    if (v22 != v23)
      return result;
    v25 = (const void **)&v5[36].__r_.__value_.__r.__words[2];
    v28 = (unsigned __int8 *)*((_QWORD *)v4 + 3);
    v27 = v4 + 24;
    v26 = v28;
    if (v24 >= 0)
      v29 = v27;
    else
      v29 = v26;
    if ((v21 & 0x80) != 0)
    {
      result = (std::string *)memcmp(*v25, v29, v5[37].__r_.__value_.__r.__words[0]);
      if ((_DWORD)result)
        return result;
    }
    else if (v5[37].__r_.__value_.__s.__data_[15])
    {
      while (*(unsigned __int8 *)v25 == *v29)
      {
        v25 = (const void **)((char *)v25 + 1);
        ++v29;
        if (!--v21)
          goto LABEL_58;
      }
      return result;
    }
LABEL_58:
    if (!LODWORD(v5[39].__r_.__value_.__r.__words[1]))
      LODWORD(v5[39].__r_.__value_.__r.__words[1]) = a3;
    return result;
  }
  if (!(_DWORD)v7)
    goto LABEL_43;
  while (*(unsigned __int8 *)v6 == *v20)
  {
    v6 = (const void **)((char *)v6 + 1);
    ++v20;
    if (!--v7)
      goto LABEL_43;
  }
  return result;
}

std::string *cricket::Connection::MaybeUpdatePeerReflexiveCandidate(std::string *this, const cricket::Candidate *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  const void **p_size;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const void **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const void **v21;
  unsigned __int8 *v22;

  if (LODWORD(this[37].__r_.__value_.__r.__words[2]) != 2 || *((_DWORD *)a2 + 52) == 2)
    return this;
  v4 = (uint64_t)this;
  v5 = this[31].__r_.__value_.__s.__data_[7];
  if ((v5 & 0x80u) == 0)
    v6 = this[31].__r_.__value_.__s.__data_[7];
  else
    v6 = this[30].__r_.__value_.__r.__words[2];
  v7 = *((unsigned __int8 *)a2 + 55);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 5);
  if (v6 != v7)
    return this;
  p_size = (const void **)&this[30].__r_.__value_.__l.__size_;
  if (v8 >= 0)
    v10 = (unsigned __int8 *)a2 + 32;
  else
    v10 = (unsigned __int8 *)*((_QWORD *)a2 + 4);
  if ((v5 & 0x80) != 0)
  {
    this = (std::string *)memcmp(*p_size, v10, this[30].__r_.__value_.__r.__words[2]);
    if ((_DWORD)this)
      return this;
LABEL_20:
    this = (std::string *)rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)(v4 + 776), (const cricket::Candidate *)((char *)a2 + 80));
    if (!(_DWORD)this || *(unsigned __int16 *)(v4 + 832) != *((unsigned __int16 *)a2 + 68))
      return this;
    v11 = *(unsigned __int8 *)(v4 + 879);
    if ((v11 & 0x80u) == 0)
      v12 = *(unsigned __int8 *)(v4 + 879);
    else
      v12 = *(_QWORD *)(v4 + 864);
    v13 = *((unsigned __int8 *)a2 + 183);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *((_QWORD *)a2 + 21);
    if (v12 != v13)
      return this;
    v15 = (const void **)(v4 + 856);
    if (v14 >= 0)
      v16 = (unsigned __int8 *)a2 + 160;
    else
      v16 = (unsigned __int8 *)*((_QWORD *)a2 + 20);
    if ((v11 & 0x80) != 0)
    {
      this = (std::string *)memcmp(*v15, v16, *(_QWORD *)(v4 + 864));
      if ((_DWORD)this)
        return this;
    }
    else if (*(_BYTE *)(v4 + 879))
    {
      while (*(unsigned __int8 *)v15 == *v16)
      {
        v15 = (const void **)((char *)v15 + 1);
        ++v16;
        if (!--v11)
          goto LABEL_37;
      }
      return this;
    }
LABEL_37:
    v17 = *(unsigned __int8 *)(v4 + 903);
    if ((v17 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(v4 + 903);
    else
      v18 = *(_QWORD *)(v4 + 888);
    v19 = *((unsigned __int8 *)a2 + 207);
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)a2 + 24);
    if (v18 != v19)
      return this;
    v21 = (const void **)(v4 + 880);
    if (v20 >= 0)
      v22 = (unsigned __int8 *)a2 + 184;
    else
      v22 = (unsigned __int8 *)*((_QWORD *)a2 + 23);
    if ((v17 & 0x80) != 0)
    {
      this = (std::string *)memcmp(*v21, v22, *(_QWORD *)(v4 + 888));
      if ((_DWORD)this)
        return this;
    }
    else if (*(_BYTE *)(v4 + 903))
    {
      while (*(unsigned __int8 *)v21 == *v22)
      {
        v21 = (const void **)((char *)v21 + 1);
        ++v22;
        if (!--v17)
          goto LABEL_52;
      }
      return this;
    }
LABEL_52:
    if (*(_DWORD *)(v4 + 944) == *((_DWORD *)a2 + 62))
      return cricket::Candidate::operator=((std::string *)(v4 + 696), (std::string *)a2);
    return this;
  }
  if (!this[31].__r_.__value_.__s.__data_[7])
    goto LABEL_20;
  while (*(unsigned __int8 *)p_size == *v10)
  {
    p_size = (const void **)((char *)p_size + 1);
    ++v10;
    if (!--v5)
      goto LABEL_20;
  }
  return this;
}

std::string *cricket::Candidate::operator=(std::string *this, std::string *a2)
{
  std::string *v2;
  __int128 v4;
  size_t size;
  std::string *v6;
  std::string::value_type v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type *p_size;
  size_t v11;
  const std::string::value_type *v12;
  size_t v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type *v16;
  size_t v17;
  const std::string::value_type *v18;
  size_t v19;
  __int128 v20;
  const std::string::value_type *v21;
  size_t v22;
  std::string *v23;
  std::string::value_type v24;
  __int128 v25;
  std::string *v26;
  const std::string::value_type *v27;
  size_t v28;
  const std::string::value_type *v29;
  size_t v30;
  __int128 v31;
  const std::string::value_type *v32;
  size_t v33;
  std::string *v34;
  char v35;
  __int128 v36;
  const std::string::value_type *data;
  size_t v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::value_type v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type *v44;
  size_t v45;
  const std::string::value_type *v46;
  size_t v47;
  __int128 v48;
  const std::string::value_type *v49;
  size_t v50;
  std::string *v51;
  std::string::value_type v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type *v55;
  size_t v56;
  const std::string::value_type *v57;
  size_t v58;
  __int128 v59;
  const std::string::value_type *v60;
  size_t v61;
  std::string *v62;
  char v63;
  __int128 v64;
  const std::string::value_type *v66;
  size_t v67;

  v2 = a2;
  if (this == a2)
    goto LABEL_98;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    }
    else
    {
      a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      size = v2->__r_.__value_.__l.__size_;
    }
    std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
  }
  else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = v2[1].__r_.__value_.__l.__data_;
  v6 = (std::string *)((char *)this + 32);
  v7 = v2[2].__r_.__value_.__s.__data_[7];
  if ((this[2].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if (v2[2].__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::__assign_no_alias<true>(v6, (char *)v2[1].__r_.__value_.__l.__size_, v2[1].__r_.__value_.__r.__words[2]);
      v9 = (std::string *)((char *)this + 56);
      p_size = &v2[2].__r_.__value_.__l.__size_;
      v11 = v2[3].__r_.__value_.__s.__data_[7];
      if (this[3].__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_25;
    }
    else
    {
      v8 = *(_OWORD *)&v2[1].__r_.__value_.__r.__words[1];
      this[2].__r_.__value_.__r.__words[0] = v2[2].__r_.__value_.__r.__words[0];
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
      v9 = (std::string *)((char *)this + 56);
      p_size = &v2[2].__r_.__value_.__l.__size_;
      v11 = v2[3].__r_.__value_.__s.__data_[7];
      if (this[3].__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_25;
    }
LABEL_21:
    if ((v11 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v9, (char *)v2[2].__r_.__value_.__l.__size_, v2[2].__r_.__value_.__r.__words[2]);
      v15 = (std::string *)((char *)this + 80);
      v16 = &v2[3].__r_.__value_.__l.__size_;
      v17 = v2[4].__r_.__value_.__s.__data_[7];
      if (this[4].__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_35;
    }
    else
    {
      v14 = *(_OWORD *)p_size;
      v9->__r_.__value_.__r.__words[2] = p_size[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v14;
      v15 = (std::string *)((char *)this + 80);
      v16 = &v2[3].__r_.__value_.__l.__size_;
      v17 = v2[4].__r_.__value_.__s.__data_[7];
      if (this[4].__r_.__value_.__s.__data_[7] < 0)
        goto LABEL_35;
    }
LABEL_32:
    if ((v17 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v15, (char *)v2[3].__r_.__value_.__l.__size_, v2[3].__r_.__value_.__r.__words[2]);
    }
    else
    {
      v20 = *(_OWORD *)v16;
      v15->__r_.__value_.__r.__words[2] = v16[2];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v20;
    }
    goto LABEL_43;
  }
  if (v7 >= 0)
    v12 = &v2[1].__r_.__value_.__s.__data_[8];
  else
    v12 = (const std::string::value_type *)v2[1].__r_.__value_.__l.__size_;
  if (v7 >= 0)
    v13 = v2[2].__r_.__value_.__s.__data_[7];
  else
    v13 = v2[1].__r_.__value_.__r.__words[2];
  std::string::__assign_no_alias<false>(v6, v12, v13);
  v9 = (std::string *)((char *)this + 56);
  p_size = &v2[2].__r_.__value_.__l.__size_;
  v11 = v2[3].__r_.__value_.__s.__data_[7];
  if ((this[3].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
    goto LABEL_21;
LABEL_25:
  if ((v11 & 0x80u) == 0)
    v18 = (const std::string::value_type *)p_size;
  else
    v18 = (const std::string::value_type *)v2[2].__r_.__value_.__l.__size_;
  if ((v11 & 0x80u) == 0)
    v19 = v11;
  else
    v19 = v2[2].__r_.__value_.__r.__words[2];
  std::string::__assign_no_alias<false>(v9, v18, v19);
  v15 = (std::string *)((char *)this + 80);
  v16 = &v2[3].__r_.__value_.__l.__size_;
  v17 = v2[4].__r_.__value_.__s.__data_[7];
  if ((this[4].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
    goto LABEL_32;
LABEL_35:
  if ((v17 & 0x80u) == 0)
    v21 = (const std::string::value_type *)v16;
  else
    v21 = (const std::string::value_type *)v2[3].__r_.__value_.__l.__size_;
  if ((v17 & 0x80u) == 0)
    v22 = v17;
  else
    v22 = v2[3].__r_.__value_.__r.__words[2];
  std::string::__assign_no_alias<false>(v15, v21, v22);
LABEL_43:
  LODWORD(this[4].__r_.__value_.__r.__words[2]) = v2[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)((char *)&this[4].__r_.__value_.__r.__words[2] + 4) = *(_OWORD *)((char *)&v2[4].__r_.__value_.__r.__words[2]
                                                                             + 4);
  LOWORD(this[5].__r_.__value_.__r.__words[2]) = v2[5].__r_.__value_.__r.__words[2];
  this[6].__r_.__value_.__s.__data_[0] = v2[6].__r_.__value_.__s.__data_[0];
  HIDWORD(this[5].__r_.__value_.__r.__words[2]) = HIDWORD(v2[5].__r_.__value_.__r.__words[2]);
  LODWORD(this[6].__r_.__value_.__r.__words[1]) = v2[6].__r_.__value_.__r.__words[1];
  v23 = (std::string *)((char *)this + 160);
  v24 = v2[7].__r_.__value_.__s.__data_[15];
  if (this[7].__r_.__value_.__s.__data_[15] < 0)
  {
    if (v24 >= 0)
      v29 = &v2[6].__r_.__value_.__s.__data_[16];
    else
      v29 = (const std::string::value_type *)v2[6].__r_.__value_.__r.__words[2];
    if (v24 >= 0)
      v30 = v2[7].__r_.__value_.__s.__data_[15];
    else
      v30 = v2[7].__r_.__value_.__r.__words[0];
    std::string::__assign_no_alias<false>(v23, v29, v30);
    v26 = (std::string *)((char *)this + 184);
    v27 = &v2[7].__r_.__value_.__s.__data_[16];
    v28 = v2[8].__r_.__value_.__s.__data_[15];
    if (this[8].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_57;
  }
  else if (v2[7].__r_.__value_.__s.__data_[15] < 0)
  {
    std::string::__assign_no_alias<true>(v23, (char *)v2[6].__r_.__value_.__r.__words[2], v2[7].__r_.__value_.__r.__words[0]);
    v26 = (std::string *)((char *)this + 184);
    v27 = &v2[7].__r_.__value_.__s.__data_[16];
    v28 = v2[8].__r_.__value_.__s.__data_[15];
    if (this[8].__r_.__value_.__s.__data_[15] < 0)
    {
LABEL_57:
      if ((v28 & 0x80u) == 0)
        v32 = v27;
      else
        v32 = (const std::string::value_type *)v2[7].__r_.__value_.__r.__words[2];
      if ((v28 & 0x80u) == 0)
        v33 = v28;
      else
        v33 = v2[8].__r_.__value_.__r.__words[0];
      std::string::__assign_no_alias<false>(v26, v32, v33);
      goto LABEL_65;
    }
  }
  else
  {
    v25 = *(_OWORD *)&v2[6].__r_.__value_.__r.__words[2];
    this[7].__r_.__value_.__l.__size_ = v2[7].__r_.__value_.__l.__size_;
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
    v26 = (std::string *)((char *)this + 184);
    v27 = &v2[7].__r_.__value_.__s.__data_[16];
    v28 = v2[8].__r_.__value_.__s.__data_[15];
    if (this[8].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_57;
  }
  if ((v28 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v26, (char *)v2[7].__r_.__value_.__r.__words[2], v2[8].__r_.__value_.__r.__words[0]);
  }
  else
  {
    v31 = *(_OWORD *)v27;
    v26->__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v31;
  }
LABEL_65:
  LODWORD(this[8].__r_.__value_.__r.__words[2]) = v2[8].__r_.__value_.__r.__words[2];
  v34 = this + 9;
  v35 = HIBYTE(v2[9].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v35 >= 0)
      data = (const std::string::value_type *)&v2[9];
    else
      data = v2[9].__r_.__value_.__l.__data_;
    if (v35 >= 0)
      v38 = HIBYTE(v2[9].__r_.__value_.__r.__words[2]);
    else
      v38 = v2[9].__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v34, data, v38);
  }
  else if ((*((_BYTE *)&v2[9].__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v34, v2[9].__r_.__value_.__l.__data_, v2[9].__r_.__value_.__l.__size_);
  }
  else
  {
    v36 = *(_OWORD *)&v2[9].__r_.__value_.__l.__data_;
    this[9].__r_.__value_.__r.__words[2] = v2[9].__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v36;
  }
  v39 = v2[10].__r_.__value_.__r.__words[0];
  LODWORD(this[10].__r_.__value_.__r.__words[1]) = v2[10].__r_.__value_.__r.__words[1];
  this[10].__r_.__value_.__r.__words[0] = v39;
  v40 = (std::string *)((char *)this + 256);
  v41 = v2[11].__r_.__value_.__s.__data_[15];
  if (this[11].__r_.__value_.__s.__data_[15] < 0)
  {
    if (v41 >= 0)
      v46 = &v2[10].__r_.__value_.__s.__data_[16];
    else
      v46 = (const std::string::value_type *)v2[10].__r_.__value_.__r.__words[2];
    if (v41 >= 0)
      v47 = v2[11].__r_.__value_.__s.__data_[15];
    else
      v47 = v2[11].__r_.__value_.__r.__words[0];
    std::string::__assign_no_alias<false>(v40, v46, v47);
    v43 = (std::string *)((char *)this + 280);
    v44 = &v2[11].__r_.__value_.__r.__words[2];
    v45 = v2[12].__r_.__value_.__s.__data_[15];
    if (this[12].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_90;
    goto LABEL_87;
  }
  if ((v2[11].__r_.__value_.__s.__data_[15] & 0x80) == 0)
  {
    v42 = *(_OWORD *)&v2[10].__r_.__value_.__r.__words[2];
    this[11].__r_.__value_.__l.__size_ = v2[11].__r_.__value_.__l.__size_;
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v42;
    v43 = (std::string *)((char *)this + 280);
    v44 = &v2[11].__r_.__value_.__r.__words[2];
    v45 = v2[12].__r_.__value_.__s.__data_[15];
    if (this[12].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_90;
LABEL_87:
    if ((v45 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v43, (char *)v2[11].__r_.__value_.__r.__words[2], v2[12].__r_.__value_.__r.__words[0]);
    }
    else
    {
      v48 = *(_OWORD *)v44;
      v43->__r_.__value_.__r.__words[2] = v44[2];
      *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v48;
    }
    goto LABEL_98;
  }
  std::string::__assign_no_alias<true>(v40, (char *)v2[10].__r_.__value_.__r.__words[2], v2[11].__r_.__value_.__r.__words[0]);
  v43 = (std::string *)((char *)this + 280);
  v44 = &v2[11].__r_.__value_.__r.__words[2];
  v45 = v2[12].__r_.__value_.__s.__data_[15];
  if ((this[12].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
    goto LABEL_87;
LABEL_90:
  if ((v45 & 0x80u) == 0)
    v49 = (const std::string::value_type *)v44;
  else
    v49 = (const std::string::value_type *)v2[11].__r_.__value_.__r.__words[2];
  if ((v45 & 0x80u) == 0)
    v50 = v45;
  else
    v50 = v2[12].__r_.__value_.__r.__words[0];
  std::string::__assign_no_alias<false>(v43, v49, v50);
LABEL_98:
  LODWORD(this[13].__r_.__value_.__l.__data_) = v2[13].__r_.__value_.__l.__data_;
  *(_OWORD *)((char *)this[13].__r_.__value_.__r.__words + 4) = *(_OWORD *)((char *)v2[13].__r_.__value_.__r.__words + 4);
  LOWORD(this[14].__r_.__value_.__l.__data_) = v2[14].__r_.__value_.__l.__data_;
  this[14].__r_.__value_.__s.__data_[8] = v2[14].__r_.__value_.__s.__data_[8];
  HIDWORD(this[14].__r_.__value_.__r.__words[0]) = HIDWORD(v2[14].__r_.__value_.__r.__words[0]);
  if (this == v2)
    return this;
  v51 = (std::string *)((char *)this + 352);
  v52 = v2[15].__r_.__value_.__s.__data_[15];
  if (this[15].__r_.__value_.__s.__data_[15] < 0)
  {
    if (v52 >= 0)
      v57 = &v2[14].__r_.__value_.__s.__data_[16];
    else
      v57 = (const std::string::value_type *)v2[14].__r_.__value_.__r.__words[2];
    if (v52 >= 0)
      v58 = v2[15].__r_.__value_.__s.__data_[15];
    else
      v58 = v2[15].__r_.__value_.__r.__words[0];
    std::string::__assign_no_alias<false>(v51, v57, v58);
    v54 = (std::string *)((char *)this + 376);
    v55 = &v2[15].__r_.__value_.__r.__words[2];
    v56 = v2[16].__r_.__value_.__s.__data_[15];
    if (this[16].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_113;
    goto LABEL_110;
  }
  if ((v2[15].__r_.__value_.__s.__data_[15] & 0x80) == 0)
  {
    v53 = *(_OWORD *)&v2[14].__r_.__value_.__r.__words[2];
    this[15].__r_.__value_.__l.__size_ = v2[15].__r_.__value_.__l.__size_;
    *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v53;
    v54 = (std::string *)((char *)this + 376);
    v55 = &v2[15].__r_.__value_.__r.__words[2];
    v56 = v2[16].__r_.__value_.__s.__data_[15];
    if (this[16].__r_.__value_.__s.__data_[15] < 0)
      goto LABEL_113;
LABEL_110:
    if ((v56 & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v54, (char *)v2[15].__r_.__value_.__r.__words[2], v2[16].__r_.__value_.__r.__words[0]);
    }
    else
    {
      v59 = *(_OWORD *)v55;
      v54->__r_.__value_.__r.__words[2] = v55[2];
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v59;
    }
    goto LABEL_121;
  }
  std::string::__assign_no_alias<true>(v51, (char *)v2[14].__r_.__value_.__r.__words[2], v2[15].__r_.__value_.__r.__words[0]);
  v54 = (std::string *)((char *)this + 376);
  v55 = &v2[15].__r_.__value_.__r.__words[2];
  v56 = v2[16].__r_.__value_.__s.__data_[15];
  if ((this[16].__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
    goto LABEL_110;
LABEL_113:
  if ((v56 & 0x80u) == 0)
    v60 = (const std::string::value_type *)v55;
  else
    v60 = (const std::string::value_type *)v2[15].__r_.__value_.__r.__words[2];
  if ((v56 & 0x80u) == 0)
    v61 = v56;
  else
    v61 = v2[16].__r_.__value_.__r.__words[0];
  std::string::__assign_no_alias<false>(v54, v60, v61);
LABEL_121:
  LODWORD(this[16].__r_.__value_.__r.__words[2]) = v2[16].__r_.__value_.__r.__words[2];
  v62 = this + 17;
  v63 = HIBYTE(v2[17].__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this[17].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v63 >= 0)
      v66 = (const std::string::value_type *)&v2[17];
    else
      v66 = v2[17].__r_.__value_.__l.__data_;
    if (v63 >= 0)
      v67 = HIBYTE(v2[17].__r_.__value_.__r.__words[2]);
    else
      v67 = v2[17].__r_.__value_.__l.__size_;
    std::string::__assign_no_alias<false>(v62, v66, v67);
    return this;
  }
  else
  {
    if ((*((_BYTE *)&v2[17].__r_.__value_.__s + 23) & 0x80) == 0)
    {
      v64 = *(_OWORD *)&v2[17].__r_.__value_.__l.__data_;
      this[17].__r_.__value_.__r.__words[2] = v2[17].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v64;
      return this;
    }
    std::string::__assign_no_alias<true>(v62, v2[17].__r_.__value_.__l.__data_, v2[17].__r_.__value_.__l.__size_);
    return this;
  }
}

__n128 cricket::Connection::stats@<Q0>(cricket::Connection *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _BYTE *v5;
  std::string *v6;
  BOOL v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;

  *((_QWORD *)this + 152) = vcvtad_u64_f64(rtc::RateTracker::ComputeRateForInterval((cricket::Connection *)((char *)this + 2192), *((_QWORD *)this + 276) * *((_QWORD *)this + 275)));
  *((_QWORD *)this + 151) = *((_QWORD *)this + 278);
  *((_QWORD *)this + 145) = vcvtad_u64_f64(rtc::RateTracker::ComputeRateForInterval((cricket::Connection *)((char *)this + 2256), *((_QWORD *)this + 284) * *((_QWORD *)this + 283)));
  *((_QWORD *)this + 144) = *((_QWORD *)this + 286);
  *((_BYTE *)this + 1130) = *((_BYTE *)this + 2332);
  v4 = *((_DWORD *)this + 582);
  *((_BYTE *)this + 1129) = v4 == 0;
  *((_BYTE *)this + 1131) = v4 == 3;
  *((_QWORD *)this + 142) = *((int *)this + 604);
  *((_QWORD *)this + 264) = this;
  *((_DWORD *)this + 530) = *((_DWORD *)this + 640);
  v5 = (_BYTE *)*((_QWORD *)this + 31);
  if (v5 && *v5 && *((_QWORD *)this + 32))
  {
    *((_QWORD *)this + 266) = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 48))(this);
    v6 = (std::string *)(*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 16))(this);
    cricket::Candidate::operator=((std::string *)this + 52, v6);
  }
  if (*((_DWORD *)this + 586))
    v7 = 1;
  else
    v7 = *((_DWORD *)this + 587) != 0;
  *((_BYTE *)this + 2136) = v7;
  *((_QWORD *)this + 268) = *((_QWORD *)this + 303);
  *((_DWORD *)this + 538) = *((_DWORD *)this + 608);
  *((_BYTE *)this + 2156) = *((_BYTE *)this + 2436);
  v8 = (std::string *)(*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)this + 24))(this);
  cricket::Candidate::operator=((std::string *)this + 70, v8);
  v9 = *((_QWORD *)this + 307);
  if (v9 >= 1)
  {
    v10 = 1000 * (*((_QWORD *)this + 323) + v9);
    if (!*((_BYTE *)this + 2168))
      *((_BYTE *)this + 2168) = 1;
    *((_QWORD *)this + 270) = v10;
  }
  v11 = *((_QWORD *)this + 290);
  if (v11 >= 1)
  {
    v12 = 1000 * (*((_QWORD *)this + 323) + v11);
    if (!*((_BYTE *)this + 2184))
      *((_BYTE *)this + 2184) = 1;
    *((_QWORD *)this + 272) = v12;
  }
  *(_QWORD *)(a2 + 112) = *((_QWORD *)this + 155);
  v13 = *(_OWORD *)((char *)this + 1208);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 1192);
  *(_OWORD *)(a2 + 80) = v13;
  *(_OWORD *)(a2 + 96) = *(_OWORD *)((char *)this + 1224);
  v14 = *(_OWORD *)((char *)this + 1144);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 1128);
  *(_OWORD *)(a2 + 16) = v14;
  v15 = *(_OWORD *)((char *)this + 1176);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 1160);
  *(_OWORD *)(a2 + 48) = v15;
  cricket::Candidate::Candidate((std::string *)(a2 + 120), (std::string *)this + 52);
  cricket::Candidate::Candidate((std::string *)(a2 + 552), (std::string *)this + 70);
  v16 = *((_OWORD *)this + 135);
  *(_OWORD *)(a2 + 1016) = *((_OWORD *)this + 134);
  *(_OWORD *)(a2 + 1032) = v16;
  *(_OWORD *)(a2 + 1041) = *(_OWORD *)((char *)this + 2169);
  result = *((__n128 *)this + 133);
  *(_OWORD *)(a2 + 984) = *((_OWORD *)this + 132);
  *(__n128 *)(a2 + 1000) = result;
  return result;
}

void cricket::Connection::ForgetLearnedState(char **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  std::string __p;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    cricket::Connection::ToString((cricket::Connection *)this, &__p);
    rtc::webrtc_logging_impl::Log("\r\n\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)(this + 295), this[296]);
  this[295] = (char *)(this + 296);
  this[297] = 0;
  this[296] = 0;
  *((_BYTE *)this + 2332) = 0;
  *((_DWORD *)this + 582) = 2;
  *((double *)this + 334) = nan("uninit");
  this[335] = (char *)0x7FF0000000000000;
  this[336] = (char *)0x3FF0000000000000;
  if (*((_BYTE *)this + 2704))
    *((_BYTE *)this + 2704) = 0;
  v9 = this[311];
  v10 = this[310];
  while (v9 != v10)
  {
    if (*(v9 - 17) < 0)
      operator delete(*((void **)v9 - 5));
    v9 -= 40;
  }
  this[311] = v10;
}

uint64_t cricket::ProxyConnection::Send(cricket::ProxyConnection *this, const void *a2, uint64_t a3, const rtc::PacketOptions *a4)
{
  _BYTE *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;

  v4 = (_BYTE *)*((_QWORD *)this + 31);
  if (!v4)
    return 0xFFFFFFFFLL;
  if (!*v4)
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)this + 32);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = a3;
  ++*((_QWORD *)this + 147);
  v8 = (*(uint64_t (**)(uint64_t, const void *, uint64_t, char *, const rtc::PacketOptions *, uint64_t))(*(_QWORD *)v6 + 144))(v6, a2, a3, (char *)this + 776, a4, 1);
  if (rtc::g_clock)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v9 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  v11 = v9 / 1000000;
  if ((int)v8 <= 0)
  {
    *((_DWORD *)this + 706) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 32) + 120))(*((_QWORD *)this + 32));
    ++*((_QWORD *)this + 146);
    v19 = (char *)this + 1144;
  }
  else
  {
    v7 = v8;
    if (*((_QWORD *)this + 288) == -1)
    {
      v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 282) + 16))((char *)this + 2256);
      *((_QWORD *)this + 289) = v12;
      *((_QWORD *)this + 288) = v12;
      *((_QWORD *)this + 287) = 0;
      **((_QWORD **)this + 285) = 0;
    }
    v13 = 0;
    v14 = *((_QWORD *)this + 284);
    while (1)
    {
      v15 = *((_QWORD *)this + 288);
      v16 = *((_QWORD *)this + 283);
      if (v16 + v15 > v11)
        break;
      *((_QWORD *)this + 288) = v16 + v15;
      v17 = (*((_QWORD *)this + 287) + 1) % (v14 + 1);
      *((_QWORD *)this + 287) = v17;
      v18 = *((_QWORD *)this + 285);
      *(_QWORD *)(v18 + 8 * v17) = 0;
      if (++v13 > v14)
      {
        v16 = *((_QWORD *)this + 283);
        v15 = *((_QWORD *)this + 288);
        goto LABEL_19;
      }
    }
    v18 = *((_QWORD *)this + 285);
    v17 = *((_QWORD *)this + 287);
LABEL_19:
    *((_QWORD *)this + 288) = v15 + (v11 - v15) / v16 * v16;
    *(_QWORD *)(v18 + 8 * v17) += v8;
    v19 = (char *)this + 2288;
  }
  *(_QWORD *)v19 += v7;
  *((_QWORD *)this + 290) = v11;
  return v8;
}

uint64_t cricket::ProxyConnection::GetError(cricket::ProxyConnection *this)
{
  return *((unsigned int *)this + 706);
}

void cricket::Connection::ConnectionRequest::~ConnectionRequest(cricket::Connection::ConnectionRequest *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0C1B10;
  v2 = *((_QWORD *)this + 5);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0C1B10;
  v2 = *((_QWORD *)this + 5);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x20BD0ADECLL);
}

void cricket::ProxyConnection::~ProxyConnection(cricket::ProxyConnection *this)
{
  cricket::Connection::~Connection(this);
  JUMPOUT(0x20BD0ADECLL);
}

void std::__function::__func<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0,std::allocator<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0,std::allocator<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0B1658;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0,std::allocator<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0B1658;
  a2[1] = v2;
  return result;
}

void std::__function::__func<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0,std::allocator<cricket::Connection::Connection(rtc::WeakPtr<cricket::PortInterface>,unsigned long,cricket::Candidate const&)::$_0>,void ()(void const*,unsigned long,cricket::StunRequest *)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  cricket::Connection *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  _BYTE *v23;
  unsigned int v24;
  void *v25;
  void *v26[2];
  int64_t v27;
  std::string v28;
  int v29;
  char v30;
  uint64_t v31;
  int v32;
  void *__p;
  void *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v4 = *(cricket::Connection **)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v29 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v4 + 32) + 272))(*((_QWORD **)v4 + 32));
  v30 = 0;
  v31 = -1;
  v32 = -1;
  v34 = 0;
  v35 = 0;
  __p = 0;
  v36 = -1;
  v37 = -1;
  v38 = 0;
  v41 = 0;
  v40 = 0;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v45 = 0;
  v39 = 2;
  if (((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, _QWORD **, int *, _QWORD))(**((_QWORD **)v4 + 32) + 144))(*((_QWORD **)v4 + 32), v5, v6, (_QWORD **)v4 + 97, &v29, 0) & 0x80000000) == 0|| (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
  {
    goto LABEL_21;
  }
  cricket::Connection::ToString(v4, &v28);
  v15 = *(_QWORD *)(v7 + 16);
  v16 = (_QWORD *)(v15 + 40);
  if ((*(char *)(v15 + 63) & 0x80000000) == 0)
  {
    v17 = *(unsigned __int8 *)(v15 + 63);
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(v15 + 48);
  if ((v17 & 0x8000000000000000) != 0 || (v16 = (_QWORD *)*v16, v17) && !v16)
  {
    __break(1u);
LABEL_28:
    abort();
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFCLL)
    goto LABEL_28;
LABEL_9:
  v18 = 2 * v17;
  if (v17 >= 0xC)
  {
    v20 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    v26[1] = (void *)(2 * v17);
    v27 = v21 | 0x8000000000000000;
    v26[0] = v19;
  }
  else
  {
    HIBYTE(v27) = 2 * v17;
    v19 = v26;
    if (!v17)
    {
      LOBYTE(v26[0]) = 0;
      goto LABEL_19;
    }
  }
  bzero(v19, 2 * v17);
  *((_BYTE *)v19 + 2 * v17) = 0;
  v22 = v26;
  if (v27 < 0)
    v22 = (void **)v26[0];
  v23 = (char *)v22 + 1;
  do
  {
    v24 = *(unsigned __int8 *)v16;
    v16 = (_QWORD *)((char *)v16 + 1);
    v23 += 2;
    --v17;
  }
  while (v17);
LABEL_19:
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/connection.cc");
  if (SHIBYTE(v27) < 0)
  {
    operator delete(v26[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_25;
LABEL_21:
    v25 = __p;
    if (!__p)
      return;
    goto LABEL_22;
  }
  if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_21;
LABEL_25:
  operator delete(v28.__r_.__value_.__l.__data_);
  v25 = __p;
  if (__p)
  {
LABEL_22:
    v34 = v25;
    operator delete(v25);
  }
}

void std::__function::__func<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1,std::allocator<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1>,BOOL ()(int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1,std::allocator<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1>,BOOL ()(int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0B16A0;
  return result;
}

void std::__function::__func<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1,std::allocator<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1>,BOOL ()(int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0B16A0;
}

uint64_t std::__function::__func<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1,std::allocator<cricket::Connection::ShouldSendGoogPing(cricket::StunMessage const*)::$_1>,BOOL ()(int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t result;
  int v3;

  result = 0;
  v3 = *a2;
  if (*a2 > 49240)
  {
    if (v3 != 49241 && v3 != 65280)
      return 1;
  }
  else if (v3 != 8 && v3 != 32808)
  {
    return 1;
  }
  return result;
}

uint64_t webrtc::ConnectionContext::ConnectionContext(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  rtc::Thread *v8;
  uint64_t v9;
  rtc::Signaler *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  rtc::Thread *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  rtc::Thread *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  rtc::Thread *v42;
  rtc::Thread *v43;
  rtc::Thread *v44;
  uint64_t v45;
  rtc::ThreadManager *v47;
  char v48;
  char v49;
  pthread_mutexattr_t v50;
  __n128 (*v51)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v52)(uint64_t);
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  if (*a3)
  {
    *(_QWORD *)(a1 + 24) = *a3;
    v7 = a3[1];
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = &off_24C0BA760;
    *(_QWORD *)(v9 + 8) = 0;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_QWORD *)(v9 + 48) = 0;
    *(_DWORD *)(v9 + 56) = 1065353216;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_DWORD *)(v9 + 96) = 1065353216;
    *(_QWORD *)(v9 + 112) = 0;
    *(_QWORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    pthread_mutexattr_init(&v50);
    pthread_mutexattr_settype(&v50, 2);
    pthread_mutexattr_setpolicy_np(&v50, 3);
    pthread_mutex_init((pthread_mutex_t *)(v9 + 136), &v50);
    pthread_mutexattr_destroy(&v50);
    *(_WORD *)(v9 + 216) = 0;
    v10 = (rtc::Signaler *)operator new();
    *(_QWORD *)(v9 + 128) = rtc::Signaler::Signaler(v10, (rtc::PhysicalSocketServer *)v9, (BOOL *)(v9 + 216));
    v11 = (_BYTE *)operator new();
    rtc::Thread::Thread(v11, v9, 1);
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v13 = *v6;
    *v6 = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    rtc::Thread::SetName(*(_QWORD *)(a1 + 16), "pc_network_thread", 0x11uLL, 0);
    rtc::Thread::Start(*(rtc::Thread **)(a1 + 16));
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
    v7 = a3[1];
    if (v7)
    {
LABEL_3:
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = v7;
      v8 = (rtc::Thread *)a3[2];
      *(_BYTE *)(a1 + 4) = 0;
      if (v8)
        goto LABEL_16;
      goto LABEL_13;
    }
  }
  v14 = operator new();
  v15 = (_QWORD *)operator new();
  *v15 = &off_24C0B7990;
  v15[1] = 0;
  rtc::Event::Event((rtc::Event *)(v15 + 2), 0, 0);
  rtc::Thread::Thread((_BYTE *)v14, (uint64_t)v15, 1);
  v16 = *(_QWORD *)(v14 + 176);
  *(_QWORD *)(v14 + 176) = v15;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  *(_QWORD *)(a1 + 32) = v14;
  rtc::Thread::SetName(v14, "pc_worker_thread", 0x10uLL, 0);
  rtc::Thread::Start(*(rtc::Thread **)(a1 + 32));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  v8 = (rtc::Thread *)a3[2];
  *(_BYTE *)(a1 + 4) = 0;
  if (!v8)
  {
LABEL_13:
    v8 = (rtc::Thread *)rtc::Thread::Current(v8);
    if (!v8)
    {
      if ((v17 & 1) == 0
      {
        v47 = (rtc::ThreadManager *)operator new();
        rtc::ThreadManager::Instance(void)::thread_manager = (uint64_t)rtc::ThreadManager::ThreadManager(v47);
      }
      v8 = (rtc::Thread *)rtc::ThreadManager::WrapCurrentThread((rtc::ThreadManager *)rtc::ThreadManager::Instance(void)::thread_manager);
      *(_BYTE *)(a1 + 4) = 1;
    }
  }
LABEL_16:
  v18 = *a2;
  *(_QWORD *)(a1 + 56) = *a2;
  *(_QWORD *)(a1 + 48) = v8;
  if (v18)
  {
    v19 = (unsigned int *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 80) = v21;
  v22 = (_QWORD *)(a1 + 96);
  v23 = a3[26];
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  else
    *v22 = 0;
  pthread_mutexattr_init(&v50);
  pthread_mutexattr_setpolicy_np(&v50, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 104), &v50);
  pthread_mutexattr_destroy(&v50);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  v24 = a3[11];
  a3[11] = 0;
  *(_QWORD *)(a1 + 192) = v24;
  v25 = a3[10];
  a3[10] = 0;
  *(_QWORD *)(a1 + 200) = v25;
  v26 = a3[26];
  a3[26] = 0;
  *(_QWORD *)(a1 + 208) = v26;
  v27 = a3[4];
  a3[4] = 0;
  *(_QWORD *)(a1 + 216) = v27;
  v28 = a3[13];
  a3[13] = 0;
  v29 = *(rtc::Thread **)(a1 + 24);
  if (v28)
  {
    *(_QWORD *)(a1 + 224) = v28;
    *(_BYTE *)(a1 + 232) = 1;
    if (rtc::Thread::IsCurrent(v29))
      goto LABEL_24;
LABEL_27:
    v34 = *(_QWORD *)(a1 + 40);
    v50.__sig = *(_QWORD *)(a1 + 24);
    *(_QWORD *)v50.__opaque = v34;
    v51 = absl::internal_any_invocable::LocalManagerTrivial;
    v52 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConnectionContext::ConnectionContext(webrtc::Environment const&,webrtc::PeerConnectionFactoryDependencies *)::$_2 &&>;
    (*(void (**)(uint64_t, pthread_mutexattr_t *, char *, char *))(*(_QWORD *)v50.__sig + 8))(v50.__sig, &v50, &v49, &v48);
    v51(1, (__n128 *)&v50, (__n128 *)&v50);
    v30 = rtc::g_clock;
    if (rtc::g_clock)
      goto LABEL_25;
    goto LABEL_28;
  }
  v32 = (_QWORD *)operator new();
  *v32 = &unk_24C0C01A8;
  v32[1] = v29;
  v33 = *(rtc::Thread **)(a1 + 24);
  *(_QWORD *)(a1 + 224) = v32;
  *(_BYTE *)(a1 + 232) = 1;
  if (!rtc::Thread::IsCurrent(v33))
    goto LABEL_27;
LABEL_24:
  v30 = rtc::g_clock;
  if (rtc::g_clock)
  {
LABEL_25:
    LODWORD(v31) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
    goto LABEL_31;
  }
LABEL_28:
  if (!dword_253EA791C)
    mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
  v31 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
      / dword_253EA791C;
LABEL_31:
  LODWORD(v50.__sig) = (int)v31 / 1000000;
  rtc::InitRandom((rtc *)&v50, (const char *)4);
  v35 = a3[3];
  if (v35 || (v35 = *v6) != 0)
  {
    if (*(_QWORD *)(a1 + 200))
      goto LABEL_37;
  }
  else
  {
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 168);
    if (*(_QWORD *)(a1 + 200))
      goto LABEL_37;
  }
  v36 = *(_QWORD *)(a1 + 192);
  v37 = *(_OWORD **)(a1 + 64);
  v38 = operator new();
  rtc::BasicNetworkManager::BasicNetworkManager(v38, v36, v35, v37);
  v39 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = v38;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
LABEL_37:
  if (!*(_QWORD *)(a1 + 216))
  {
    v40 = (_QWORD *)operator new();
    *v40 = &off_24C0AFD98;
    v40[1] = v35;
    v41 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 216) = v40;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v42 = *(rtc::Thread **)(a1 + 48);
  if (rtc::Thread::IsCurrent(v42))
  {
    *((_DWORD *)v42 + 58) = 100;
    v43 = *(rtc::Thread **)(a1 + 40);
    if (!rtc::Thread::IsCurrent(v43))
      goto LABEL_42;
  }
  else
  {
    v50.__sig = (uint64_t)v42;
    *(_DWORD *)v50.__opaque = 100;
    v51 = absl::internal_any_invocable::LocalManagerTrivial;
    v52 = absl::internal_any_invocable::LocalInvoker<false,void,rtc::Thread::SetDispatchWarningMs(int)::$_0 &&>;
    (*(void (**)(rtc::Thread *, pthread_mutexattr_t *, char *, char *))(*(_QWORD *)v42 + 8))(v42, &v50, &v49, &v48);
    v51(1, (__n128 *)&v50, (__n128 *)&v50);
    v43 = *(rtc::Thread **)(a1 + 40);
    if (!rtc::Thread::IsCurrent(v43))
    {
LABEL_42:
      v50.__sig = (uint64_t)v43;
      *(_DWORD *)v50.__opaque = 30;
      v51 = absl::internal_any_invocable::LocalManagerTrivial;
      v52 = absl::internal_any_invocable::LocalInvoker<false,void,rtc::Thread::SetDispatchWarningMs(int)::$_0 &&>;
      (*(void (**)(rtc::Thread *, pthread_mutexattr_t *, char *, char *))(*(_QWORD *)v43 + 8))(v43, &v50, &v49, &v48);
      v51(1, (__n128 *)&v50, (__n128 *)&v50);
      v44 = *(rtc::Thread **)(a1 + 24);
      if (!rtc::Thread::IsCurrent(v44))
        goto LABEL_43;
      goto LABEL_47;
    }
  }
  *((_DWORD *)v43 + 58) = 30;
  v44 = *(rtc::Thread **)(a1 + 24);
  if (!rtc::Thread::IsCurrent(v44))
  {
LABEL_43:
    v50.__sig = (uint64_t)v44;
    *(_DWORD *)v50.__opaque = 10;
    v51 = absl::internal_any_invocable::LocalManagerTrivial;
    v52 = absl::internal_any_invocable::LocalInvoker<false,void,rtc::Thread::SetDispatchWarningMs(int)::$_0 &&>;
    (*(void (**)(rtc::Thread *, pthread_mutexattr_t *, char *, char *))(*(_QWORD *)v44 + 8))(v44, &v50, &v49, &v48);
    v51(1, (__n128 *)&v50, (__n128 *)&v50);
    if (!*v22)
      return a1;
    goto LABEL_48;
  }
LABEL_47:
  *((_DWORD *)v44 + 58) = 10;
  if (*v22)
  {
LABEL_48:
    v45 = *(_QWORD *)(a1 + 40);
    v50.__sig = a1;
    (*(void (**)(uint64_t, pthread_mutexattr_t *, uint64_t (*)(uint64_t), char *))(*(_QWORD *)v45 + 96))(v45, &v50, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::ConnectionContext::ConnectionContext(webrtc::Environment const&,webrtc::PeerConnectionFactoryDependencies *)::$_3>, &v49);
  }
  return a1;
}

void webrtc::ConnectionContext::~ConnectionContext(webrtc::ConnectionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  rtc::Thread *v8;
  rtc::Thread *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  pthread_mutexattr_t v26;
  uint64_t (*v27)(char, uint64_t *, uint64_t *);
  uint64_t (*v28)();
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 5);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  v26.__sig = v3;
  v27 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ConnectionContext::~ConnectionContext()::$_1>;
  v28 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConnectionContext::~ConnectionContext()::$_1 &&>;
  (*(void (**)(uint64_t, pthread_mutexattr_t *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v26, &v25, &v24);
  v27(1, &v26.__sig, &v26.__sig);
  v4 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*((_BYTE *)this + 4))
  {
    v7 = &unk_253EA7000;
    {
      v23 = operator new();
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)v23 = 0;
      pthread_mutexattr_init(&v26);
      pthread_mutexattr_setpolicy_np(&v26, 3);
      pthread_mutex_init((pthread_mutex_t *)(v23 + 24), &v26);
      pthread_mutexattr_destroy(&v26);
      InitCocoaMultiThreading();
      pthread_key_create((pthread_key_t *)(v23 + 88), 0);
      rtc::ThreadManager::Instance(void)::thread_manager = v23;
      v7 = (_QWORD *)&unk_253EA7000;
    }
    v8 = (rtc::Thread *)pthread_getspecific(*(_QWORD *)(v7[292] + 88));
    if (v8)
    {
      v9 = v8;
      if (!*((_BYTE *)v8 + 216))
      {
        rtc::Thread::UnwrapCurrent(v8);
        (*(void (**)(rtc::Thread *))(*(_QWORD *)v9 + 32))(v9);
      }
    }
  }
  v10 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 104));
  v15 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (unsigned int *)*((_QWORD *)this + 7);
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
  }
  v20 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
  v21 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
  v22 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConnectionContext::ConnectionContext(webrtc::Environment const&,webrtc::PeerConnectionFactoryDependencies *)::$_2 &&>(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 217) = 0;
  return result;
}

uint64_t rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::ConnectionContext::ConnectionContext(webrtc::Environment const&,webrtc::PeerConnectionFactoryDependencies *)::$_3>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 96) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 96));
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ConnectionContext::~ConnectionContext()::$_1>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void cricket::ConnectionInfo::ConnectionInfo(cricket::ConnectionInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
    goto LABEL_4;
  *((_DWORD *)this + 36) = 1;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = &unk_24C0ACDA0;
  *((_BYTE *)this + 264) = 0;
  *((_WORD *)this + 128) = 0;
  *((_DWORD *)this + 65) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 68) = 0;
  *((_DWORD *)this + 82) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_BYTE *)this + 464) = 0;
  *((_WORD *)this + 228) = 0;
  *((_DWORD *)this + 115) = 0;
  *((_DWORD *)this + 112) = 0;
  *((_QWORD *)this + 53) = &unk_24C0ACDA0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 130) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 33) = 0u;
  {
    *((_DWORD *)this + 144) = 1;
    *((_QWORD *)this + 81) = 0;
    *(_OWORD *)((char *)this + 584) = 0u;
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
    *((_QWORD *)this + 82) = &unk_24C0ACDA0;
    *((_BYTE *)this + 696) = 0;
    *((_WORD *)this + 344) = 0;
    *((_DWORD *)this + 173) = 0;
    *((_QWORD *)this + 84) = 0;
    *((_QWORD *)this + 83) = 0;
    *((_DWORD *)this + 170) = 0;
    *((_DWORD *)this + 176) = 0;
    *((_DWORD *)this + 190) = 0;
    *(_OWORD *)((char *)this + 712) = 0u;
    *(_OWORD *)((char *)this + 728) = 0u;
    *(_OWORD *)((char *)this + 744) = 0u;
    *((_DWORD *)this + 200) = 0;
    *((_OWORD *)this + 48) = 0u;
    *((_OWORD *)this + 49) = 0u;
    *(_OWORD *)((char *)this + 808) = 0u;
    *(_OWORD *)((char *)this + 824) = 0u;
    *(_OWORD *)((char *)this + 840) = 0u;
    *((_QWORD *)this + 107) = &unk_24C0ACDA0;
    *((_BYTE *)this + 896) = 0;
    *((_WORD *)this + 444) = 0;
    *((_DWORD *)this + 223) = 0;
    *((_DWORD *)this + 220) = 0;
    *((_QWORD *)this + 108) = 0;
    *((_QWORD *)this + 109) = 0;
    *(_OWORD *)((char *)this + 904) = 0u;
    *(_OWORD *)((char *)this + 920) = 0u;
    *(_OWORD *)((char *)this + 936) = 0u;
    *((_DWORD *)this + 238) = 0;
    *((_QWORD *)this + 125) = 0;
    *((_BYTE *)this + 1008) = 0;
    *((_QWORD *)this + 127) = 0;
    *((_BYTE *)this + 1024) = 0;
    *((_BYTE *)this + 1028) = 0;
    *((_BYTE *)this + 1032) = 0;
    *((_BYTE *)this + 1040) = 0;
    *((_BYTE *)this + 1048) = 0;
    *((_BYTE *)this + 1056) = 0;
    *((_DWORD *)this + 248) = 0;
    *((_OWORD *)this + 60) = 0u;
    *((_OWORD *)this + 61) = 0u;
  }
  else
  {
LABEL_4:
    v6 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v8);
    webrtc::CongestionControlHandler::GetUpdate((webrtc::CongestionControlHandler *)v6, v7);
  }
}

void webrtc::CongestionControlHandler::GetUpdate(webrtc::CongestionControlHandler *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  char v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p;
  char v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 72))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    return;
  }
  v4 = *(_OWORD *)this;
  v5 = *((_QWORD *)this + 3);
  v26 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 4);
  v7 = *((float *)this + 10);
  v8 = *((_DWORD *)this + 11);
  v9 = *((_QWORD *)this + 6);
  v24 = *(_OWORD *)((char *)this + 56);
  v25 = v4;
  if (*((_BYTE *)this + 160) && *((uint64_t *)this + 21) < 2001)
  {
    v11 = 0;
    v10 = v9;
    v12 = *((unsigned __int8 *)this + 152);
    if (!*((_BYTE *)this + 152))
    {
LABEL_13:
      v14 = (_OWORD *)((char *)this + 80);
      if (*((unsigned __int8 *)this + 161) != v11)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          webrtc::ToString(v9, (char *)&__p);
          rtc::webrtc_logging_impl::Log("\r\t\n\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/rtp/control_handler.cc");
          if (v23 < 0)
            operator delete(__p);
        }
        v12 = *((unsigned __int8 *)this + 152);
      }
      *((_BYTE *)this + 161) = v11;
      *v14 = v25;
      *((_QWORD *)this + 12) = v26;
      *((_QWORD *)this + 13) = v5;
      *((_QWORD *)this + 14) = v6;
      *((float *)this + 30) = v7;
      *((_DWORD *)this + 31) = v8;
      *((_QWORD *)this + 16) = v10;
      *(_OWORD *)((char *)this + 136) = v24;
      if (!v12)
        *((_BYTE *)this + 152) = 1;
      *(_OWORD *)a2 = v25;
      *(_QWORD *)(a2 + 16) = v26;
      *(_QWORD *)(a2 + 24) = v5;
      *(_QWORD *)(a2 + 32) = v6;
      *(float *)(a2 + 40) = v7;
      *(_DWORD *)(a2 + 44) = v8;
      *(_QWORD *)(a2 + 48) = v10;
      v13 = 1;
      *(_OWORD *)(a2 + 56) = v24;
      goto LABEL_21;
    }
  }
  else
  {
    v10 = 0;
    v11 = 1;
    v12 = *((unsigned __int8 *)this + 152);
    if (!*((_BYTE *)this + 152))
      goto LABEL_13;
  }
  if (*((_QWORD *)this + 16) != v10 || v10 && (*((float *)this + 30) != v7 || *((_QWORD *)this + 13) != v5))
    goto LABEL_13;
  v13 = 0;
  *(_BYTE *)a2 = 0;
LABEL_21:
  *(_BYTE *)(a2 + 72) = v13;
}

void dcsctp::CookieAckChunk::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  char *v5;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    v3 = *(char **)a2;
  }
  v5 = &v3[v4];
  *v5 = 11;
  *((_WORD *)v5 + 1) = 1024;
}

void dcsctp::CookieAckChunk::ToString(char *a1@<X8>)
{
  a1[23] = 10;
  if (a1 <= "COOKIE-ACK" && a1 + 10 > "COOKIE-ACK")
    __break(1u);
  else
    strcpy(a1, "COOKIE-ACK");
}

void dcsctp::CookieAckChunk::~CookieAckChunk(dcsctp::CookieAckChunk *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::CookieEchoChunk::~CookieEchoChunk(dcsctp::CookieEchoChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0B1730;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0B1730;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::CookieEchoChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 4;
  v14 = v12 + v10 + 4;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 4);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *v15 = 10;
  v15[2] = HIBYTE(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::CookieEchoChunk::ToString(v20);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (v16)
      v17 = *(const void **)(a1 + 8);
    else
      v17 = 0;
    if (v10 >= v16)
      v18 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    else
      v18 = v10;
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v17, v18);
  }
}

void dcsctp::CookieEchoChunk::ToString(char *a1@<X8>)
{
  a1[23] = 11;
  if (a1 <= "COOKIE-ECHO" && a1 + 11 > "COOKIE-ECHO")
    __break(1u);
  else
    strcpy(a1, "COOKIE-ECHO");
}

double dcsctp::CookieReceivedWhileShuttingDownCause::SerializeTo(uint64_t a1, uint64_t a2)
{
  char *v3;
  unint64_t v4;
  double result;

  v3 = *(char **)a2;
  v4 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v4 > 0xFFFFFFFFFFFFFFFBLL)
  {
    *(_QWORD *)(a2 + 8) = &v3[v4 + 4];
    *(_QWORD *)&result = 67111424;
    *(_DWORD *)&v3[v4] = 67111424;
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, 4uLL);
    *(_QWORD *)&result = 67111424;
    *(_DWORD *)(*(_QWORD *)a2 + v4) = 67111424;
  }
  return result;
}

char *dcsctp::CookieReceivedWhileShuttingDownCause::ToString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_208F051B0;
  if (result <= "Cookie Received While Shutting Down" && result + 35 > "Cookie Received While Shutting Down")
    __break(1u);
  else
    strcpy(result, "Cookie Received While Shutting Down");
  return result;
}

void dcsctp::CookieReceivedWhileShuttingDownCause::~CookieReceivedWhileShuttingDownCause(dcsctp::CookieReceivedWhileShuttingDownCause *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  __n128 result;

  v2 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  result = *(__n128 *)(a2 + 1);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t *rtc::CopyOnWriteBuffer::CopyOnWriteBuffer(uint64_t *this, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = this;
  if (a3 | a2)
  {
    v6 = operator new();
    if (a2 <= a3)
      v7 = a3;
    else
      v7 = a2;
    *(_QWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = v7;
    if (v7)
      v7 = operator new[]();
    *(_QWORD *)(v6 + 16) = v7;
    *(_DWORD *)(v6 + 24) = 0;
    v8 = (unsigned int *)(v6 + 24);
    *v4 = v6;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v4[1] = 0;
    v4[2] = a2;
    return v4;
  }
  else
  {
    *this = 0;
    this[1] = 0;
    this[2] = a2;
  }
  return this;
}

void rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer(rtc::CopyOnWriteBuffer *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = (unsigned int *)(v1 + 24);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v1 + 16);
      *(_QWORD *)(v1 + 16) = 0;
      if (v5)
        MEMORY[0x20BD0ADD4](v5, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v1, 0x1010C40EE34DA14);
    }
  }
}

uint64_t *rtc::CopyOnWriteBuffer::SetSize(uint64_t *this, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;

  v2 = a2;
  v3 = this;
  if (*this)
  {
    v4 = (uint64_t **)(this + 2);
    if (this[2] < (unint64_t)a2)
    {
      if (*(_QWORD *)(*this + 8) - this[1] > (unint64_t)a2)
        a2 = (uint64_t *)(*(_QWORD *)(*this + 8) - this[1]);
      this = rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(this, a2);
      v5 = *v3;
      v6 = (char *)v2 + v3[1];
      v7 = *(_QWORD *)(*v3 + 8);
      if (v7 < (unint64_t)v6)
      {
        v8 = (char *)(v7 + (v7 >> 1));
        if (v8 <= v6)
          v9 = (char *)v2 + v3[1];
        else
          v9 = v8;
        this = (uint64_t *)operator new[]();
        v10 = this;
        v11 = *(_QWORD *)(v5 + 16);
        if (v11)
        {
          memcpy(this, *(const void **)(v5 + 16), *(_QWORD *)v5);
          *(_QWORD *)(v5 + 16) = v10;
          this = (uint64_t *)MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        }
        else
        {
          *(_QWORD *)(v5 + 16) = this;
        }
        *(_QWORD *)(v5 + 8) = v9;
      }
      *(_QWORD *)v5 = v6;
    }
  }
  else
  {
    if (!a2)
      return this;
    v12 = operator new();
    *(_QWORD *)v12 = v2;
    *(_QWORD *)(v12 + 8) = v2;
    this = (uint64_t *)operator new[]();
    *(_QWORD *)(v12 + 16) = this;
    *(_DWORD *)(v12 + 24) = 0;
    v13 = (unsigned int *)(v12 + 24);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v15 = *v3;
    if (*v3)
    {
      v16 = (unsigned int *)(v15 + 24);
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        v19 = *(_QWORD *)(v15 + 16);
        *(_QWORD *)(v15 + 16) = 0;
        if (v19)
          MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
        this = (uint64_t *)MEMORY[0x20BD0ADEC](v15, 0x1010C40EE34DA14);
      }
    }
    *v3 = v12;
    v3[1] = 0;
    v4 = (uint64_t **)(v3 + 2);
  }
  *v4 = v2;
  return this;
}

uint64_t *rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(uint64_t *this, uint64_t *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  v3 = this;
  v4 = atomic_load((unsigned int *)(*this + 24));
  if (v4 != 1)
    goto LABEL_5;
  v5 = *this;
  if (*this)
    v5 = *(_QWORD *)(v5 + 8) - this[1];
  if (v5 < (unint64_t)a2)
  {
LABEL_5:
    v6 = operator new();
    v7 = v3[1];
    v8 = *(_QWORD *)(*v3 + 16);
    v9 = v3[2];
    if (v9 <= (unint64_t)a2)
      this = a2;
    else
      this = (uint64_t *)v3[2];
    *(_QWORD *)v6 = v9;
    *(_QWORD *)(v6 + 8) = this;
    if (this)
      this = (uint64_t *)operator new[]();
    *(_QWORD *)(v6 + 16) = this;
    if (v9)
      this = (uint64_t *)memcpy(this, (const void *)(v8 + v7), v9);
    *(_DWORD *)(v6 + 24) = 0;
    v10 = (unsigned int *)(v6 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *v3;
    if (*v3)
    {
      v13 = (unsigned int *)(v12 + 24);
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = *(_QWORD *)(v12 + 16);
        *(_QWORD *)(v12 + 16) = 0;
        if (v16)
          MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
        this = (uint64_t *)MEMORY[0x20BD0ADEC](v12, 0x1010C40EE34DA14);
      }
    }
    *v3 = v6;
    v3[1] = 0;
  }
  return this;
}

uint64_t *rtc::CopyOnWriteBuffer::EnsureCapacity(uint64_t *this, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = this;
  if (*this)
  {
    if (*(_QWORD *)(*this + 8) - this[1] < (unint64_t)a2)
      return rtc::CopyOnWriteBuffer::UnshareAndEnsureCapacity(this, a2);
  }
  else if (a2)
  {
    v4 = operator new();
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = a2;
    this = (uint64_t *)operator new[]();
    *(_QWORD *)(v4 + 16) = this;
    *(_DWORD *)(v4 + 24) = 0;
    v5 = (unsigned int *)(v4 + 24);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *v3;
    if (*v3)
    {
      v8 = (unsigned int *)(v7 + 24);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = *(_QWORD *)(v7 + 16);
        *(_QWORD *)(v7 + 16) = 0;
        if (v11)
          MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
        this = (uint64_t *)MEMORY[0x20BD0ADEC](v7, 0x1010C40EE34DA14);
      }
    }
    v3[1] = 0;
    v3[2] = 0;
    *v3 = v4;
  }
  return this;
}

uint64_t rtc::CopyOnWriteBuffer::Clear(uint64_t this)
{
  uint64_t *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;

  if (*(_QWORD *)this)
  {
    v1 = (uint64_t *)this;
    v2 = atomic_load((unsigned int *)(*(_QWORD *)this + 24));
    if (v2 == 1)
    {
      **(_QWORD **)this = 0;
LABEL_22:
      v1[1] = 0;
      v1[2] = 0;
      return this;
    }
    this = operator new();
    v3 = this;
    v4 = *v1;
    if (*v1)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = v1[1];
      this = v5 - v6;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(v3 + 8) = v5 - v6;
      if (v5 == v6)
      {
        *(_DWORD *)(v3 + 24) = 0;
        v7 = (unsigned int *)(v3 + 24);
        *(_QWORD *)(v3 + 16) = 0;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
        goto LABEL_15;
      }
      this = operator new[]();
      v4 = *v1;
      *(_DWORD *)(v3 + 24) = 0;
      v11 = (unsigned int *)(v3 + 24);
      *(_QWORD *)(v3 + 16) = this;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      if (v4)
      {
LABEL_15:
        v13 = (unsigned int *)(v4 + 24);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          v16 = *(_QWORD *)(v4 + 16);
          *(_QWORD *)(v4 + 16) = 0;
          if (v16)
            MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
          this = MEMORY[0x20BD0ADEC](v4, 0x1010C40EE34DA14);
        }
      }
    }
    else
    {
      *(_DWORD *)(this + 24) = 0;
      v9 = (unsigned int *)(this + 24);
      *(_QWORD *)this = 0;
      *(_QWORD *)(this + 8) = 0;
      *(_QWORD *)(this + 16) = 0;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    *v1 = v3;
    goto LABEL_22;
  }
  return this;
}

uint64_t webrtc::CpuInfo::DetectNumberOfCores(webrtc::CpuInfo *this)
{
  unsigned __int8 v1;
  unsigned int *v2;
  internal *v4;

  v2 = (unsigned int *)&unk_253EA7000;
  if ((v1 & 1) != 0)
    return v2[310];
  v2 = (_DWORD *)&unk_253EA7000;
  if (!(_DWORD)v4)
    return v2[310];
  webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus = internal::DetectNumberOfCores(v4);
  return webrtc::CpuInfo::DetectNumberOfCores(void)::logical_cpus;
}

uint64_t internal::DetectNumberOfCores(internal *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  size_t v16;
  int v17;
  int v18[2];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  *(_QWORD *)v18 = 0x1900000006;
  v16 = 4;
  if (sysctl(v18, 2u, &v17, &v16, 0, 0))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v1, v2, v3, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/cpu_info.cc");
    v17 = 1;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/cpu_info.cc");
  result = v17;
  if (v17 <= 0)
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/system_wrappers/source/cpu_info.cc", 55, "number_of_cores > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v11, v12, v13, v14, v17);
  return result;
}

int32x4_t rtc::LoadCrc32Table(rtc *this)
{
  uint64_t v1;
  int32x4_t result;
  int8x16_t v3;
  int8x16_t v4;
  int32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;

  v1 = 0;
  result = (int32x4_t)xmmword_208F071C0;
  v3.i64[0] = 0x100000001;
  v3.i64[1] = 0x100000001;
  v4 = (int8x16_t)vdupq_n_s32(0xEDB88320);
  v5.i64[0] = 0x400000004;
  v5.i64[1] = 0x400000004;
  do
  {
    v6 = (int8x16_t)vshrq_n_u32((uint32x4_t)result, 1uLL);
    v7 = vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)result, v3)), v6, veorq_s8(v6, v4));
    v8 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v3));
    v9 = (int8x16_t)vshrq_n_u32((uint32x4_t)v7, 1uLL);
    v10 = vbslq_s8(v8, v9, veorq_s8(v9, v4));
    v11 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v3));
    v12 = (int8x16_t)vshrq_n_u32((uint32x4_t)v10, 1uLL);
    v13 = vbslq_s8(v11, v12, veorq_s8(v12, v4));
    v14 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v13, v3));
    v15 = (int8x16_t)vshrq_n_u32((uint32x4_t)v13, 1uLL);
    v16 = vbslq_s8(v14, v15, veorq_s8(v15, v4));
    v17 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v16, v3));
    v18 = (int8x16_t)vshrq_n_u32((uint32x4_t)v16, 1uLL);
    v19 = vbslq_s8(v17, v18, veorq_s8(v18, v4));
    v20 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v19, v3));
    v21 = (int8x16_t)vshrq_n_u32((uint32x4_t)v19, 1uLL);
    v22 = vbslq_s8(v20, v21, veorq_s8(v21, v4));
    v23 = (int32x4_t)vandq_s8(v22, v3);
    v24 = (int8x16_t)vshrq_n_u32((uint32x4_t)v22, 1uLL);
    v25 = vbslq_s8((int8x16_t)vceqzq_s32(v23), v24, veorq_s8(v24, v4));
    v26 = (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v25, v3));
    v27 = (int8x16_t)vshrq_n_u32((uint32x4_t)v25, 1uLL);
    rtc::LoadCrc32Table(void)::kCrc32Table[v1] = (__int128)vbslq_s8(v26, v27, veorq_s8(v27, v4));
    result = vaddq_s32(result, v5);
    ++v1;
  }
  while (v1 != 64);
  return result;
}

uint64_t crc32c::ExtendPortable(crc32c *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  const unsigned __int8 *v3;
  unsigned int v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int i;
  int v42;

  v3 = &a3[(_QWORD)a2];
  v4 = ~(_DWORD)this;
  v5 = (const unsigned __int8 *)((unint64_t)(a2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if (&a3[(_QWORD)a2] < v5 || v5 == a2)
  {
    v5 = a2;
  }
  else
  {
    v7 = a2;
    do
    {
      v8 = *v7++;
    }
    while (v7 != v5);
  }
  if (v3 - v5 < 16)
    goto LABEL_22;
  v9 = *((_DWORD *)v5 + 1);
  v10 = *(_DWORD *)v5 ^ v4;
  v11 = *((_DWORD *)v5 + 2);
  v12 = *((_DWORD *)v5 + 3);
  v5 += 16;
  v13 = v3 - v5;
  if (v3 - v5 >= 257)
  {
    do
    {
      v5 += 64;
      v13 -= 64;
    }
    while (v13 > 256);
  }
  if (v13 >= 16)
  {
    v13 = &a2[(_QWORD)a3] - v5;
    do
    {
      v5 += 16;
      v13 -= 16;
    }
    while (v13 > 15);
  }
  if (v13 < 4)
  {
    v27 = v10;
  }
  else
  {
    v26 = &a2[(_QWORD)a3] - v5;
    do
    {
      v27 = v9;
      v9 = v11;
      v11 = v12;
      v28 = *(_DWORD *)v5;
      v5 += 4;
      v26 -= 4;
      v10 = v27;
    }
    while (v26 > 3);
  }
  for (i = v4; ; i = v4 ^ v42)
  {
LABEL_22:
    if (v5 == v3)
      break;
    v42 = *v5++;
  }
  return ~v4;
}

void webrtc::CreateCall(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[3];
  _QWORD v9[3];
  uint64_t v10;

  webrtc::Call::Create(a1, &v7);
  v4 = (void *)v9[0];
  if (v9[0] == v9[1] && (v5 = __p[0], __p[0] == __p[1]))
  {
    *a2 = v7;
    if (v5)
LABEL_6:
      operator delete(v5);
  }
  else
  {
    v6 = operator new();
    v10 = v7;
    webrtc::DegradedCall::DegradedCall(v6, &v10, (uint64_t)v9, (uint64_t)__p);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 216))(v10);
    *a2 = v6;
    v5 = __p[0];
    if (__p[0])
      goto LABEL_6;
  }
  if (v4)
    operator delete(v4);
}

void webrtc::`anonymous namespace'::GetNetworkConfigs(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  int64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t (***v25)();
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  void *v36;
  void *v37;
  uint64_t (***v38)();
  void *v39;
  char v40;
  void *__p;
  _QWORD *v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new();
  v35 = &off_24C0B1790;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v4 = off_24C0B17D8;
  *((_QWORD *)v4 + 1) = off_24C0B4170;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 4) = 0;
  *((_QWORD *)v4 + 2) = 0;
  v4[63] = 20;
  if (v4 + 40 <= "queue_length_packets" && v4 + 60 > "queue_length_packets")
    goto LABEL_45;
  strcpy(v4 + 40, "queue_length_packets");
  *((_WORD *)v4 + 32) = 0;
  v4[66] = 0;
  *((_QWORD *)v4 + 1) = off_24C0B1808;
  *((_QWORD *)v4 + 10) = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 9) = 0;
  *((_QWORD *)v4 + 12) = &off_24C0B1790;
  *((_QWORD *)v4 + 15) = v4 + 96;
  v4[104] = 0;
  v26 = v4;
  v5 = operator new();
  v35 = &off_24C0B1840;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v5 = &unk_24C0AF318;
  *(_QWORD *)(v5 + 8) = off_24C0B4170;
  *(_QWORD *)(v5 + 24) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 63) = 14;
  if (v5 + 40 <= (unint64_t)"queue_delay_ms" && v5 + 54 > (unint64_t)"queue_delay_ms")
    goto LABEL_45;
  strcpy((char *)(v5 + 40), "queue_delay_ms");
  *(_WORD *)(v5 + 64) = 0;
  *(_BYTE *)(v5 + 66) = 0;
  *(_QWORD *)(v5 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 96) = &off_24C0B1840;
  *(_QWORD *)(v5 + 120) = v5 + 96;
  *(_BYTE *)(v5 + 104) = 0;
  v27 = v5;
  v6 = operator new();
  v35 = &off_24C0B1888;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v6 = &unk_24C0AF318;
  *(_QWORD *)(v6 + 8) = off_24C0B4170;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v7 = (char *)operator new(0x20uLL);
  *(_QWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 48) = xmmword_208F051A0;
  if (v7 <= "delay_standard_deviation_ms" && v7 + 27 > "delay_standard_deviation_ms")
    goto LABEL_45;
  strcpy(v7, "delay_standard_deviation_ms");
  *(_WORD *)(v6 + 64) = 0;
  *(_BYTE *)(v6 + 66) = 0;
  *(_QWORD *)(v6 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 96) = &off_24C0B1888;
  *(_QWORD *)(v6 + 120) = v6 + 96;
  *(_BYTE *)(v6 + 104) = 0;
  v28 = v6;
  v8 = operator new();
  v35 = &off_24C0B18D0;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v8 = &unk_24C0AF318;
  *(_QWORD *)(v8 + 8) = off_24C0B4170;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_BYTE *)(v8 + 63) = 18;
  *(_QWORD *)(v8 + 16) = 0;
  if (v8 + 40 <= (unint64_t)"link_capacity_kbps" && v8 + 58 > (unint64_t)"link_capacity_kbps")
    goto LABEL_45;
  strcpy((char *)(v8 + 40), "link_capacity_kbps");
  *(_WORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 66) = 0;
  *(_QWORD *)(v8 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 96) = &off_24C0B18D0;
  *(_QWORD *)(v8 + 120) = v8 + 96;
  *(_BYTE *)(v8 + 104) = 0;
  v29 = v8;
  v9 = operator new();
  v35 = &off_24C0B1918;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v9 = off_24C0B1960;
  *(_QWORD *)(v9 + 8) = off_24C0B4170;
  *(_QWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_BYTE *)(v9 + 63) = 12;
  *(_QWORD *)(v9 + 16) = 0;
  if (v9 + 40 <= (unint64_t)"loss_percent" && v9 + 52 > (unint64_t)"loss_percent")
    goto LABEL_45;
  strcpy((char *)(v9 + 40), "loss_percent");
  *(_WORD *)(v9 + 64) = 0;
  *(_BYTE *)(v9 + 66) = 0;
  *(_QWORD *)(v9 + 8) = &unk_24C0B1990;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 96) = &off_24C0B1918;
  *(_QWORD *)(v9 + 120) = v9 + 96;
  *(_BYTE *)(v9 + 104) = 0;
  v30 = v9;
  v10 = operator new();
  v35 = &off_24C0B19C8;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v10 = &unk_24C0B1A10;
  *(_QWORD *)(v10 + 8) = off_24C0B4170;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 63) = 16;
  if (v10 + 40 <= (unint64_t)"allow_reordering" && v10 + 56 > (unint64_t)"allow_reordering")
    goto LABEL_45;
  strcpy((char *)(v10 + 40), "allow_reordering");
  *(_WORD *)(v10 + 64) = 0;
  *(_BYTE *)(v10 + 66) = 0;
  *(_QWORD *)(v10 + 8) = &unk_24C0B1A40;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 96) = &off_24C0B19C8;
  *(_QWORD *)(v10 + 120) = v10 + 96;
  *(_BYTE *)(v10 + 104) = 0;
  v31 = v10;
  v11 = operator new();
  v35 = &off_24C0B1A78;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v11 = &unk_24C0AF318;
  *(_QWORD *)(v11 + 8) = off_24C0B4170;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_BYTE *)(v11 + 63) = 21;
  *(_QWORD *)(v11 + 16) = 0;
  if (v11 + 40 <= (unint64_t)"avg_burst_loss_length" && v11 + 61 > (unint64_t)"avg_burst_loss_length")
    goto LABEL_45;
  strcpy((char *)(v11 + 40), "avg_burst_loss_length");
  *(_WORD *)(v11 + 64) = 0;
  *(_BYTE *)(v11 + 66) = 0;
  *(_QWORD *)(v11 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 96) = &off_24C0B1A78;
  *(_QWORD *)(v11 + 120) = v11 + 96;
  *(_BYTE *)(v11 + 104) = 0;
  v32 = v11;
  v12 = operator new();
  v35 = &off_24C0B1AC0;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v12 = &unk_24C0AF318;
  *(_QWORD *)(v12 + 8) = off_24C0B4170;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 63) = 15;
  if (v12 + 40 <= (unint64_t)"packet_overhead" && v12 + 55 > (unint64_t)"packet_overhead")
    goto LABEL_45;
  strcpy((char *)(v12 + 40), "packet_overhead");
  *(_WORD *)(v12 + 64) = 0;
  *(_BYTE *)(v12 + 66) = 0;
  *(_QWORD *)(v12 + 8) = &unk_24C0AF348;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 96) = &off_24C0B1AC0;
  *(_QWORD *)(v12 + 120) = v12 + 96;
  *(_BYTE *)(v12 + 104) = 0;
  v33 = v12;
  v13 = operator new();
  v35 = &off_24C0B1B08;
  LOBYTE(v36) = 0;
  v38 = &v35;
  *(_QWORD *)v13 = off_24C0B1B50;
  *(_QWORD *)(v13 + 8) = off_24C0B4170;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_BYTE *)(v13 + 63) = 8;
  *(_QWORD *)(v13 + 16) = 0;
  if (v13 + 40 <= (unint64_t)"duration" && v13 + 48 > (unint64_t)"duration")
    goto LABEL_45;
  strcpy((char *)(v13 + 40), "duration");
  *(_WORD *)(v13 + 64) = 0;
  *(_BYTE *)(v13 + 66) = 0;
  *(_QWORD *)(v13 + 8) = off_24C0B1B80;
  *(_QWORD *)(v13 + 80) = 0;
  *(_QWORD *)(v13 + 88) = 0;
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 96) = &off_24C0B1B08;
  *(_QWORD *)(v13 + 120) = v13 + 96;
  *(_BYTE *)(v13 + 104) = 0;
  v34 = v13;
  webrtc::FieldTrialStructListBase::FieldTrialStructListBase((uint64_t)&v35, &v26, 9);
  v35 = off_24C0B1BB8;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  v25 = &v35;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a2 + 16))(&v26);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    v14 = HIBYTE(v28);
    v15 = (char *)&v26;
    goto LABEL_24;
  }
  v14 = v27;
  if (v27 < 0 || (v15 = (char *)v26, v27) && !v26)
LABEL_45:
    __break(1u);
LABEL_24:
  webrtc::ParseFieldTrial(&v25, 1, v15, v14);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(v26);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v16 = v43;
    v17 = v44 - v43;
    if (v44 == v43)
    {
LABEL_26:
      v35 = off_24C0B1BB8;
      if (!v16)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v16 = v43;
    v17 = v44 - v43;
    if (v44 == v43)
      goto LABEL_26;
  }
  if (v17 < 0)
    abort();
  v23 = (char *)operator new(v17);
  *a1 = v23;
  v24 = &v23[64 * (v17 >> 6)];
  a1[2] = v24;
  memcpy(v23, v16, v17);
  a1[1] = v24;
  v35 = off_24C0B1BB8;
  if (v16)
  {
LABEL_27:
    v44 = v16;
    operator delete(v16);
  }
LABEL_28:
  v35 = (uint64_t (**)())off_24C0B3F90;
  v18 = __p;
  if (__p)
  {
    v19 = v42;
    v20 = __p;
    if (v42 != __p)
    {
      do
      {
        v22 = *--v19;
        v21 = v22;
        *v19 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      while (v19 != v18);
      v20 = __p;
    }
    v42 = v18;
    operator delete(v20);
  }
  v35 = (uint64_t (**)())off_24C0B4170;
  if (v40 < 0)
    operator delete(v39);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

uint64_t webrtc::FieldTrialStructList<webrtc::DegradedCall::TimeScopedNetworkConfig>::~FieldTrialStructList(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  *(_QWORD *)a1 = off_24C0B1BB8;
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B3F90;
  v3 = *(_QWORD **)(a1 + 64);
  if (v3)
  {
    v4 = *(_QWORD **)(a1 + 72);
    v5 = *(void **)(a1 + 64);
    if (v4 != v3)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v5);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v8 = *(void **)(a1 + 8);
    if (!v8)
      return a1;
    goto LABEL_13;
  }
  v8 = *(void **)(a1 + 8);
  if (v8)
  {
LABEL_13:
    *(_QWORD *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1}>,void ()(void *,unsigned int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1}>,void ()(void *,unsigned int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B1790;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1}>,void ()(void *,unsigned int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B1790;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_0)::{lambda(void *,unsigned int)#1}>,void ()(void *,unsigned int)>::operator()(uint64_t a1, _DWORD **a2, _DWORD *a3)
{
  **a2 = *a3;
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<unsigned int>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24C0B17D8;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = off_24C0B1808;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      return a1;
    goto LABEL_10;
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
  {
LABEL_10:
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v6);
  }
  return a1;
}

void webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<unsigned int>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24C0B17D8;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = off_24C0B1808;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 24) = v6;
  operator delete(v6);
LABEL_13:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<unsigned int>::WriteElement(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = a1[9];
  if (a3 >= (unint64_t)((a1[10] - v3) >> 2))
  {
    __break(1u);
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 4 * a3);
    v9 = a2;
    v8 = v4;
    v5 = a1[15];
    if (v5)
      return (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v5 + 48))(v5, &v9, &v8);
  }
  v7 = std::__throw_bad_function_call[abi:sn180100]();
  return webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<unsigned int>::GetList(v7);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<unsigned int>::GetList(uint64_t a1)
{
  return a1 + 8;
}

uint64_t webrtc::FieldTrialList<unsigned int>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C0B1808;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      return a1;
    goto LABEL_5;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void webrtc::FieldTrialList<unsigned int>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C0B1808;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v3;
  operator delete(v3);
LABEL_8:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialList<unsigned int>::Parse(uint64_t a1, size_t __sz)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  void *__p;
  char *v31;

  *(_BYTE *)(a1 + 58) = 1;
  if (!*(_BYTE *)(__sz + 24))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    return 1;
  }
  if (*(char *)(__sz + 23) < 0)
  {
    v3 = *(_QWORD *)(__sz + 8);
    if ((v3 & 0x8000000000000000) != 0 || (__sz = *(_QWORD *)__sz, v3) && !__sz)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      abort();
    }
  }
  else
  {
    v3 = *(unsigned __int8 *)(__sz + 23);
  }
  rtc::split(__sz, v3, 0x7Cu, (char **)&__p);
  v5 = (char *)__p;
  v6 = v31;
  if (__p != v31)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = webrtc::ParseTypedParameter<unsigned int>(*(char **)v5, *((_QWORD *)v5 + 1));
        if ((v10 & 0xFF00000000) == 0)
        {
          *(_BYTE *)(a1 + 57) = 1;
          if (__p)
          {
            v31 = (char *)__p;
            operator delete(__p);
          }
          v4 = 0;
          if (v7)
            goto LABEL_39;
          return v4;
        }
        v11 = v10;
        if (v8 >= v9)
          break;
        if (!v8)
          goto LABEL_47;
        *(_DWORD *)v8 = v10;
        v8 += 4;
        v5 += 16;
        if (v5 == v6)
        {
LABEL_45:
          v5 = (char *)__p;
          if (__p)
            goto LABEL_37;
          goto LABEL_38;
        }
      }
      v12 = (v8 - v7) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        goto LABEL_48;
      if ((v9 - v7) >> 1 > v13)
        v13 = (v9 - v7) >> 1;
      if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13)
        goto LABEL_47;
      if (v13 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v14 = 4 * v13;
      v15 = operator new(4 * v13);
      v16 = &v15[4 * v12];
      *(_DWORD *)v16 = v11;
      v17 = v16;
      if (v8 != v7)
      {
        v18 = v8 - v7 - 4;
        if (v18 < 0xBC
          || (v21 = (v8 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL, &v15[v8 - v7 - 4 - v21] > &v15[v8 - v7 - 4])
          || &v8[-v21 - 4] > v8 - 4
          || (unint64_t)(v7 - v15) < 0x20)
        {
          v19 = v8;
          v17 = &v15[4 * v12];
        }
        else
        {
          v22 = (v18 >> 2) + 1;
          v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
          v19 = &v8[-v23];
          v17 = &v16[-v23];
          v24 = &v15[4 * v12 - 16];
          v25 = v8 - 16;
          v26 = v22 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 8;
          }
          while (v26);
          if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_27;
        }
        do
        {
          v20 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v20;
          v17 -= 4;
        }
        while (v19 != v7);
      }
LABEL_27:
      v9 = &v15[v14];
      if (v7)
        operator delete(v7);
      v7 = v17;
      v8 = v16 + 4;
      v5 += 16;
      if (v5 == v6)
        goto LABEL_45;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
  if (__p)
  {
LABEL_37:
    v31 = v5;
    operator delete(v5);
  }
LABEL_38:
  v28 = *(char **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v4 = 1;
  v7 = v28;
  if (v28)
LABEL_39:
    operator delete(v7);
  return v4;
}

uint64_t webrtc::FieldTrialList<unsigned int>::Size(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B1840;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B1840;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_1)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 8) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B1888;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B1888;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_2)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 12) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B18D0;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B18D0;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_3)::{lambda(void *,int)#1}>,void ()(void *,int)>::operator()(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(_DWORD *)(*(_QWORD *)a2 + 16) = *a3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1}>,void ()(void *,double)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1}>,void ()(void *,double)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B1918;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1}>,void ()(void *,double)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B1918;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

double std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_4)::{lambda(void *,double)#1}>,void ()(void *,double)>::operator()(uint64_t a1, uint64_t a2, double *a3)
{
  double result;

  result = *a3;
  *(double *)(*(_QWORD *)a2 + 32) = *a3;
  return result;
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<double>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24C0B1960;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = &unk_24C0B1990;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      return a1;
    goto LABEL_10;
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
  {
LABEL_10:
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v6);
  }
  return a1;
}

void webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<double>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = off_24C0B1960;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = &unk_24C0B1990;
  v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(_QWORD *)(a1 + 80) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
    v6 = *(void **)(a1 + 16);
    if (!v6)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 24) = v6;
  operator delete(v6);
LABEL_13:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<double>::WriteElement(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1[9];
  if (a3 >= (unint64_t)((a1[10] - v3) >> 3))
  {
    __break(1u);
  }
  else
  {
    v4 = *(_QWORD *)(v3 + 8 * a3);
    v9 = a2;
    v8 = v4;
    v5 = a1[15];
    if (v5)
      return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 48))(v5, &v9, &v8);
  }
  v7 = std::__throw_bad_function_call[abi:sn180100]();
  return webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<double>::GetList(v7);
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<double>::GetList(uint64_t a1)
{
  return a1 + 8;
}

uint64_t webrtc::FieldTrialList<double>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C0B1990;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      return a1;
    goto LABEL_5;
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
LABEL_5:
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void webrtc::FieldTrialList<double>::~FieldTrialList(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_24C0B1990;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  *(_QWORD *)a1 = off_24C0B4170;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(void **)(a1 + 8);
    if (!v3)
      goto LABEL_8;
  }
  *(_QWORD *)(a1 + 16) = v3;
  operator delete(v3);
LABEL_8:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::FieldTrialList<double>::Parse(uint64_t a1, size_t __sz)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t *v29;
  void *__p;
  char *v32;

  *(_BYTE *)(a1 + 58) = 1;
  if (!*(_BYTE *)(__sz + 24))
  {
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
    return 1;
  }
  if (*(char *)(__sz + 23) < 0)
  {
    v3 = *(_QWORD *)(__sz + 8);
    if ((v3 & 0x8000000000000000) != 0 || (__sz = *(_QWORD *)__sz, v3) && !__sz)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      abort();
    }
  }
  else
  {
    v3 = *(unsigned __int8 *)(__sz + 23);
  }
  rtc::split(__sz, v3, 0x7Cu, (char **)&__p);
  v5 = (char *)__p;
  v6 = v32;
  if (__p != v32)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      while (1)
      {
        v10 = webrtc::ParseTypedParameter<double>(*(char **)v5, *((_QWORD *)v5 + 1));
        if (!v11)
        {
          *(_BYTE *)(a1 + 57) = 1;
          if (__p)
          {
            v32 = (char *)__p;
            operator delete(__p);
          }
          v4 = 0;
          if (v7)
            goto LABEL_39;
          return v4;
        }
        v12 = v10;
        if (v8 >= v9)
          break;
        if (!v8)
          goto LABEL_47;
        *v8++ = v10;
        v5 += 16;
        if (v5 == v6)
        {
LABEL_45:
          v5 = (char *)__p;
          if (__p)
            goto LABEL_37;
          goto LABEL_38;
        }
      }
      v13 = v8 - v7;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61)
        goto LABEL_48;
      if (((char *)v9 - (char *)v7) >> 2 > v14)
        v14 = ((char *)v9 - (char *)v7) >> 2;
      if ((unint64_t)((char *)v9 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v14)
        goto LABEL_47;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v15 = 8 * v14;
      v16 = operator new(8 * v14);
      v17 = (uint64_t *)&v16[8 * v13];
      *v17 = v12;
      v18 = v17;
      if (v8 != v7)
      {
        v19 = (char *)v8 - (char *)v7 - 8;
        if (v19 < 0x168
          || (v22 = ((char *)(v8 - 1) - (char *)v7) & 0xFFFFFFFFFFFFFFF8,
              &v16[(char *)v8 - (char *)v7 - 8 - v22] > &v16[(char *)v8 - (char *)v7 - 8])
          || (uint64_t *)((char *)v8 - v22 - 8) > v8 - 1
          || (unint64_t)((char *)v7 - v16) < 0x20)
        {
          v20 = v8;
          v18 = (uint64_t *)&v16[8 * v13];
        }
        else
        {
          v23 = (v19 >> 3) + 1;
          v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
          v20 = &v8[v24 / 0xFFFFFFFFFFFFFFF8];
          v18 = &v17[v24 / 0xFFFFFFFFFFFFFFF8];
          v25 = &v16[8 * v13 - 16];
          v26 = v8 - 2;
          v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            *v25 = v28;
            v25 -= 2;
            v26 -= 4;
            v27 -= 4;
          }
          while (v27);
          if (v23 == (v23 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_27;
        }
        do
        {
          v21 = *--v20;
          *--v18 = v21;
        }
        while (v20 != v7);
      }
LABEL_27:
      v9 = (uint64_t *)&v16[v15];
      if (v7)
        operator delete(v7);
      v7 = v18;
      v8 = v17 + 1;
      v5 += 16;
      if (v5 == v6)
        goto LABEL_45;
    }
  }
  v9 = 0;
  v8 = 0;
  v7 = 0;
  if (__p)
  {
LABEL_37:
    v32 = v5;
    operator delete(v5);
  }
LABEL_38:
  v29 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  v4 = 1;
  v7 = v29;
  if (v29)
LABEL_39:
    operator delete(v7);
  return v4;
}

uint64_t webrtc::FieldTrialList<double>::Size(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_BYTE *std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::__clone(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C0B19C8;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C0B19C8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void std::__function::__func<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1},std::allocator<webrtc::FieldTrialListWrapper * webrtc::FieldTrialStructMember<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5,webrtc::field_trial_list_impl::LambdaTypeTraits<webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5>>(std::string_view,webrtc::`anonymous namespace'::GetNetworkConfigs(webrtc::FieldTrialsView const&,BOOL)::$_5)::{lambda(void *,BOOL)#1}>,void ()(void *,BOOL)>::operator()(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *(_BYTE *)(*(_QWORD *)a2 + 40) = *a3;
}

uint64_t webrtc::field_trial_list_impl::TypedFieldTrialListWrapper<BOOL>::~TypedFieldTrialListWrapper(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)a1 = &unk_24C0B1A10;
  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  *(_QWORD *)(a1 + 8) = &unk_24C0B1A40;
  v5 = *(void **)(a1 + 72);
  if (v5)
    operator delete(v5);
  *(_QWORD *)(a1 + 8) = off_24C0B4170;
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v6 = *(void **)(a1 + 16);
    if (!v6)
      return a1;
    goto LABEL_10;
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
  {
LABEL_10:
    *(_QWORD *)(a1 + 24) = v6;
    operator delete(v6);
  }
  return a1;
}

